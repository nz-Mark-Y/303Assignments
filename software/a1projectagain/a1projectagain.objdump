
a1projectagain.elf:     file format elf32-littlenios2
a1projectagain.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001545c memsz 0x0001545c flags r-x
    LOAD off    0x0001647c vaddr 0x0081547c paddr 0x00817158 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00018e34 vaddr 0x00818e34 paddr 0x00818e34 align 2**12
         filesz 0x00000000 memsz 0x00000468 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014b68  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000760  00814d1c  00814d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  0081547c  00817158  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000468  00818e34  00818e34  00018e34  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  00018180  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bf3  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00037677  00000000  00000000  0001af8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bb89  00000000  00000000  00052602  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001db56  00000000  00000000  0005e18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000256c  00000000  00000000  0007bce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d76  00000000  00000000  0007e250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012c16  00000000  00000000  00080fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00093bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00093c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000989f8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000989fb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000989fe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000989ff  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00098a00  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00098a04  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00098a08  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00098a0c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00098a15  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00098a1e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00098a27  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000059  00000000  00000000  00098a2d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  00098a86  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814d1c l    d  .rodata	00000000 .rodata
0081547c l    d  .rwdata	00000000 .rwdata
00818e34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00818e34 l     O .bss	00000004 tlc_timer_event
00818e38 l     O .bss	00000004 camera_timer_event
00818e3c l     O .bss	00000004 pedestrianNS
00818e40 l     O .bss	00000004 pedestrianEW
00818e44 l     O .bss	00000004 newTimeoutValues
00818e48 l     O .bss	00000004 timerHit
00818e4c l     O .bss	00000004 vehicle_detected
0081547c l     O .rwdata	00000018 timeout
00815494 l     O .rwdata	0000001c timeout_buf
00818e50 l     O .bss	00000004 valueCount
008154b0 l     O .rwdata	00000018 tempBuffer
00818e54 l     O .bss	00000004 mode
008154c8 l     O .rwdata	00000010 proc_state
00817108 l     O .rwdata	00000004 camera_count
0081710c l     O .rwdata	00000004 buttonValue
00818e58 l     O .bss	00000004 snapshotTaken
00818e5c l     O .bss	00000004 timeTaken
00818e60 l     O .bss	00000004 toPrint
00818ea8 l     O .bss	00000018 tlc_timer
00818e64 l     O .bss	00000004 state.3037
00818e68 l     O .bss	00000004 c
00818e6c l     O .bss	00000004 timeoutValue
00818ed8 l     O .bss	0000000a countString
00818ec0 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801598 l     F .text	00000058 std
008016a4 l     F .text	00000008 __fp_lock
008016ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008154d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803eb4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00804074 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804348 l     F .text	00000058 __sprint_r
00814e9c l     O .rodata	00000010 blanks.3452
00814e8c l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814eb4 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814fdc l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807c14 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00817128 l     O .rwdata	00000004 charset
0081517c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
008152c4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080abf4 l     F .text	00000048 match
00815d00 l     O .rwdata	00000014 fpi.1950
008152e0 l     O .rodata	00000028 tinytens
00815cec l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080d06c l     F .text	00000024 htinit
0080d0f8 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d960 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080ea24 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fc4c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00810878 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008108d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008109d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810cb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810d98 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810ef4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00811000 l     F .text	000000dc alt_file_locked
00811264 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
008113e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817148 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811824 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815ebc l     O .rwdata	00001060 jtag_uart
00816f1c l     O .rwdata	00000120 lcd
0081703c l     O .rwdata	000000c4 uart
0081194c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811b8c l     F .text	00000228 altera_avalon_jtag_uart_irq
00811db4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00817154 l     O .rwdata	00000004 colstart
00812430 l     F .text	000000b8 lcd_write_command
008124e8 l     F .text	000000d4 lcd_write_data
008125bc l     F .text	000000c4 lcd_clear_screen
00812680 l     F .text	000001ec lcd_repaint_screen
0081286c l     F .text	000000c8 lcd_scroll_up
00812934 l     F .text	000002d0 lcd_handle_escape
00813110 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813370 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00813630 l     F .text	0000009c altera_avalon_uart_irq
008136cc l     F .text	000000e0 altera_avalon_uart_rxirq
008137ac l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813b98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813dc0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813f18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008145a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814b04 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814cb8 l     F .text	00000040 alt_sim_halt
00809da0 g     F .text	00000094 _mprec_log10
00809e8c g     F .text	00000088 __any_on
008096bc g     F .text	00000070 _isatty_r
0081529c g     O .rodata	00000028 __mprec_tinytens
00810f54 g     F .text	0000006c alt_main
00803648 g     F .text	000000a0 _puts_r
0081900c g     O .bss	00000100 alt_irq
0080981c g     F .text	00000078 _lseek_r
00817158 g       *ABS*	00000000 __flash_rwdata_start
008093e0 g     F .text	000000a0 __sflags
0080f544 g     F .text	00000088 __eqdf2
0081929c g       *ABS*	00000000 __alt_heap_start
00800dd4 g     F .text	00000060 printToUART
008035d0 g     F .text	00000044 printf
00804190 g     F .text	00000068 __sseek
00801600 g     F .text	000000a4 __sinit
0080977c g     F .text	00000084 _setlocale_r
00801700 g     F .text	00000068 __sfmoreglue
0080cf9c g     F .text	0000001c ungetc
00810fe0 g     F .text	00000020 __malloc_unlock
0080ac3c g     F .text	000014e4 _strtod_r
00818e70 g     O .bss	00000004 fp
008033e0 g     F .text	000000e0 memmove
008016f0 g     F .text	00000010 _cleanup
00809f14 g     F .text	000000bc _Balloc
00800b34 g     F .text	00000020 buffer_timeout
0080f654 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008022f8 g     F .text	00000074 _fstat_r
00818e74 g     O .bss	00000004 errno
00803f1c g     F .text	00000014 __srget
008078f0 g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080ff88 g     F .text	0000002c __make_fp
00818e98 g     O .bss	00000004 alt_argv
0081f100 g       *ABS*	00000000 _gp
008146e4 g     F .text	00000030 usleep
008003cc g     F .text	000000bc tlc_timer_isr
00815d3c g     O .rwdata	00000180 alt_fd_list
00814040 g     F .text	00000094 alt_find_dev
00803340 g     F .text	000000a0 memcpy
0080d9ac g     F .text	00000248 __hexnan
00800b74 g     F .text	000000c8 camera_timer_isr
008016e4 g     F .text	0000000c _cleanup_r
0080f874 g     F .text	000000f8 __floatsidf
0081466c g     F .text	00000078 alt_io_redirect
0080f764 g     F .text	00000088 __ltdf2
00814d1c g       *ABS*	00000000 __DTOR_END__
008036e8 g     F .text	00000014 puts
00809914 g     F .text	00000040 mbrtowc
00807914 g     F .text	00000068 _vfscanf_r
00809cf0 g     F .text	000000b0 __ratio
008005cc g     F .text	000001dc pedestrian_tlc
00811fcc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803614 g     F .text	00000034 _printf_r
0080fd88 g     F .text	00000008 __udivsi3
00810bf8 g     F .text	000000c0 isatty
0080972c g     F .text	0000002c iswspace
008151ac g     O .rodata	000000c8 __mprec_tens
00809758 g     F .text	00000008 __locale_charset
0080dc8c g     F .text	000000a4 __fixunsdfsi
00814880 g     F .text	00000090 alt_icache_flush
00818e78 g     O .bss	00000004 __malloc_top_pad
0080ca10 g     F .text	00000024 strtoul
00817124 g     O .rwdata	00000004 __mb_cur_max
00809760 g     F .text	0000000c _localeconv_r
0080ca34 g     F .text	000002f0 _strtoull_r
0080a60c g     F .text	0000003c __i2b
0080236c g     F .text	0000049c __sfvwrite_r
00803f30 g     F .text	00000070 _sbrk_r
008007a8 g     F .text	000000d4 configurable_tlc
0080a988 g     F .text	00000078 _read_r
00815ce0 g     O .rwdata	0000000c __lc_ctype
0081713c g     O .rwdata	00000004 alt_max_fd
008102c8 g     F .text	00000138 __unpack_d
0080111c g     F .text	00000110 _fclose_r
0080143c g     F .text	00000034 fflush
00818e7c g     O .bss	00000004 __malloc_max_sbrked_mem
00810a38 g     F .text	000001c0 alt_irq_register
00801508 g     F .text	00000090 _fgetc_r
0080eeb4 g     F .text	00000074 __adddf3
0080e8bc g     F .text	00000078 __nesf2
00809bd0 g     F .text	00000120 __b2d
0080e30c g     F .text	000005b0 __umoddi3
00810e04 g     F .text	000000f0 lseek
00817114 g     O .rwdata	00000004 _global_impure_ptr
008036fc g     F .text	000005f4 _realloc_r
0081929c g       *ABS*	00000000 __bss_end
008144b0 g     F .text	000000f8 alt_iic_isr_register
008115f8 g     F .text	0000010c alt_tick
00818f0c g     O .bss	00000100 __hexdig
0080dd30 g     F .text	000005dc __udivdi3
00815274 g     O .rodata	00000028 __mprec_bigtens
0080a868 g     F .text	00000120 __s2b
0080fab8 g     F .text	00000194 __floatunsidf
00809af0 g     F .text	00000060 __mcmp
00813568 g     F .text	000000c8 altera_avalon_uart_init
00817120 g     O .rwdata	00000004 __ctype_ptr
008016cc g     F .text	00000018 __fp_lock_all
00814468 g     F .text	00000048 alt_ic_irq_enabled
00811560 g     F .text	00000098 alt_alarm_stop
00800c3c g     F .text	00000198 camera_tlc
0080c4a4 g     F .text	00000024 strtol
00818e90 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815d14 g     O .rwdata	00000028 alt_dev_null
0080fe18 g     F .text	000000c8 __unpack_f
00813e20 g     F .text	00000044 alt_dcache_flush_all
008099bc g     F .text	00000070 __hi0bits
0080f96c g     F .text	000000d8 __fixdfsi
0080c244 g     F .text	0000001c strtod
00817158 g       *ABS*	00000000 __ram_rwdata_end
00817134 g     O .rwdata	00000008 alt_dev_list
00811704 g     F .text	00000120 write
0080e934 g     F .text	00000078 __gtsf2
0081547c g       *ABS*	00000000 __ram_rodata_end
00810904 g     F .text	000000d4 fstat
00801968 g     F .text	0000002c fprintf
0080f7ec g     F .text	00000088 __ledf2
0080a748 g     F .text	00000120 __pow5mult
00818e84 g     O .bss	00000004 __nlocale_changed
0080fd90 g     F .text	00000008 __umodsi3
0081929c g       *ABS*	00000000 end
008104c8 g     F .text	00000160 __pack_f
00812c04 g     F .text	0000050c altera_avalon_lcd_16207_write
00813bf8 g     F .text	000001c8 altera_avalon_uart_write
008022d4 g     F .text	00000024 fseek
00811acc g     F .text	000000c0 altera_avalon_jtag_uart_init
00814d18 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008133e0 g     F .text	00000090 alt_avalon_timer_sc_init
008134c8 g     F .text	00000058 altera_avalon_uart_write_fd
0080fd98 g     F .text	00000080 __clzsi2
00813520 g     F .text	00000048 altera_avalon_uart_close_fd
008121f0 g     F .text	00000240 altera_avalon_jtag_uart_write
008015f0 g     F .text	00000004 __sfp_lock_acquire
0080325c g     F .text	000000e4 memchr
008043a0 g     F .text	00001eac ___vfprintf_internal_r
00804014 g     F .text	00000060 _sprintf_r
00801b84 g     F .text	00000314 _free_r
00814b08 g     F .text	000001b0 __call_exitprocs
00803ed0 g     F .text	0000004c __srget_r
00818e88 g     O .bss	00000004 __mlocale_changed
0081711c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818ea0 g     O .bss	00000004 _alt_tick_rate
0080c4c8 g     F .text	00000318 _strtoll_r
00817100 g     O .rwdata	00000005 chararray
0080a2d8 g     F .text	0000014c __lshift
00818ea4 g     O .bss	00000004 _alt_nticks
008112c4 g     F .text	00000120 read
008118b8 g     F .text	00000094 alt_sys_init
00803558 g     F .text	00000078 _open_r
008149d0 g     F .text	00000134 __register_exitproc
0080a424 g     F .text	000001e8 __multiply
00811e64 g     F .text	00000074 altera_avalon_jtag_uart_close
0081547c g       *ABS*	00000000 __ram_rwdata_start
00814d1c g       *ABS*	00000000 __ram_rodata_start
00818ee4 g     O .bss	00000028 __malloc_current_mallinfo
00809fd0 g     F .text	0000017c __d2b
00811984 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c7e0 g     F .text	00000230 _strtoul_r
008141f4 g     F .text	000000b8 alt_get_fd
00814734 g     F .text	0000014c alt_busy_sleep
00810400 g     F .text	000000c8 __fpcmp_parts_d
00807ba4 g     F .text	00000070 _close_r
0081495c g     F .text	00000074 memcmp
00811a34 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081929c g       *ABS*	00000000 __alt_stack_base
00811a7c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804104 g     F .text	00000084 sscanf
00807a68 g     F .text	0000013c __swsetup_r
0080f2ec g     F .text	00000258 __divdf3
00801768 g     F .text	000000f0 __sfp
00809e34 g     F .text	00000058 __copybits
008158d8 g     O .rwdata	00000408 __malloc_av_
008015fc g     F .text	00000004 __sinit_lock_release
0080ef28 g     F .text	000003c4 __muldf3
00804274 g     F .text	00000060 __sread
0080967c g     F .text	00000040 fread
008140d4 g     F .text	00000120 alt_find_file
00813e64 g     F .text	000000b4 alt_dev_llist_insert
00810fc0 g     F .text	00000020 __malloc_lock
00801994 g     F .text	00000034 _fprintf_r
008114a4 g     F .text	000000bc sbrk
00801240 g     F .text	000001fc _fflush_r
0080cfb8 g     F .text	000000b4 _calloc_r
0080194c g     F .text	0000001c fopen
00818e34 g       *ABS*	00000000 __bss_start
008034c0 g     F .text	00000098 memset
00800e34 g     F .text	000002e8 main
00818e9c g     O .bss	00000004 alt_envp
00818e80 g     O .bss	00000004 __malloc_max_total_mem
008119dc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e9ac g     F .text	00000078 __ltsf2
00809480 g     F .text	000001fc _fread_r
008131dc g     F .text	0000013c altera_avalon_lcd_16207_init
0080087c g     F .text	00000048 config_tlc
00804188 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080122c g     F .text	00000014 fclose
0080c260 g     F .text	00000244 _strtol_r
0080fa44 g     F .text	00000074 __truncdfsf2
0081910c g     O .bss	00000190 _atexit0
00807e2c g     F .text	000015b4 _dtoa_r
00802b1c g     F .text	00000740 _malloc_r
00817140 g     O .rwdata	00000004 alt_errno
0080cd24 g     F .text	000000dc __submore
00800488 g     F .text	000000e8 NSEW_ped_isr
008028d0 g     F .text	000000b8 _fwalk
00809954 g     F .text	00000040 _mbtowc_r
0080fcc8 g     F .text	00000060 __divsi3
00815324 g     O .rodata	00000014 __thenan_df
00801a58 g     F .text	0000012c _malloc_trim_r
00800b54 g     F .text	00000020 update_timeout
00814d1c g       *ABS*	00000000 __CTOR_END__
0080ab38 g     F .text	000000bc strcmp
00814d1c g       *ABS*	00000000 __flash_rodata_start
00814d1c g       *ABS*	00000000 __DTOR_LIST__
0080f5cc g     F .text	00000088 __nedf2
00811884 g     F .text	00000034 alt_irq_init
00811444 g     F .text	00000060 alt_release_fd
00801470 g     F .text	00000098 fgetc
00803fa0 g     F .text	00000074 sprintf
00815338 g     O .rodata	00000100 __clz_tab
00818e8c g     O .bss	00000004 _PathLocale
0080c120 g     F .text	00000124 strtof
00814910 g     F .text	00000014 atexit
008079f0 g     F .text	00000078 _write_r
00809800 g     F .text	0000001c setlocale
0080ab30 g     F .text	00000008 nanf
00817110 g     O .rwdata	00000004 _impure_ptr
00818e94 g     O .bss	00000004 alt_argc
00809894 g     F .text	00000080 _mbrtowc_r
00813fdc g     F .text	00000064 _do_dtors
00801e98 g     F .text	0000043c _fseek_r
008008c4 g     F .text	00000270 timeout_data_handler
00803cf0 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809b50 g     F .text	00000080 __ulp
0080aa00 g     F .text	00000040 __isinfd
008016b4 g     F .text	00000018 __fp_unlock_all
00813318 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0081712c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080976c g     F .text	00000010 localeconv
008142dc g     F .text	00000050 alt_ic_isr_register
0080d090 g     F .text	00000068 __hexdig_init
0080407c g     F .text	00000088 _sscanf_r
00817158 g       *ABS*	00000000 _edata
00813470 g     F .text	00000058 altera_avalon_uart_read_fd
0081929c g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080797c g     F .text	00000074 vfscanf
00811ed8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008019c8 g     F .text	00000074 _fputs_r
008143c8 g     F .text	000000a0 alt_ic_irq_disable
008041f8 g     F .text	0000007c __swrite
00817118 g     O .rwdata	00000004 __malloc_trim_threshold
00814714 g     F .text	00000020 altera_nios2_qsys_irq_init
00814924 g     F .text	00000038 exit
00802808 g     F .text	000000c8 _fwalk_reent
0080a14c g     F .text	0000018c __mdiff
00800250 g     F .text	0000017c simple_tlc
0080fd28 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008015f4 g     F .text	00000004 __sfp_lock_release
0080aa70 g     F .text	000000c0 __sccl
00800200 g     F .text	00000050 init_tlc
00814ed8 g     O .rodata	00000101 _ctype_
00813908 g     F .text	00000060 altera_avalon_uart_close
0080fee0 g     F .text	000000a8 __fpcmp_parts_f
00801858 g     F .text	000000f4 _fopen_r
00814cf8 g     F .text	00000020 _exit
0080aa40 g     F .text	00000030 __isnand
00810628 g     F .text	00000154 alt_alarm_start
0080dbf4 g     F .text	00000098 __muldi3
00802988 g     F .text	00000194 __smakebuf_r
008042d4 g     F .text	00000074 strlen
008110dc g     F .text	00000188 open
0080f6dc g     F .text	00000088 __gedf2
0080d1a8 g     F .text	000007b8 __gethex
008142ac g     F .text	00000030 alt_icache_flush_all
00801a3c g     F .text	0000001c fputs
00817144 g     O .rwdata	00000004 alt_priority_mask
0081432c g     F .text	0000009c alt_ic_irq_enable
0080624c g     F .text	00000024 __vfprintf_internal
00813968 g     F .text	00000230 altera_avalon_uart_read
0080ee34 g     F .text	00000080 __subdf3
00809a2c g     F .text	000000c4 __lo0bits
00806270 g     F .text	00001680 __svfscanf_r
0081714c g     O .rwdata	00000008 alt_alarm_list
0080ce00 g     F .text	0000019c _ungetc_r
00813f78 g     F .text	00000064 _do_ctors
0081077c g     F .text	000000fc close
00800570 g     F .text	0000005c init_buttons_pio
00810d18 g     F .text	00000080 alt_load
0080ffb4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
008015f8 g     F .text	00000004 __sinit_lock_acquire
0080a648 g     F .text	00000100 __multadd
00809994 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e40304 	addi	r3,r3,-28660
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e40304 	addi	r3,r3,-28660
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bc4014 	ori	gp,gp,61696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a38d14 	ori	r2,r2,36404

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e4a714 	ori	r3,r3,37532

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810d180 	call	810d18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810f540 	call	810f54 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static char* timeTaken = 0;
static int toPrint = 0;
static char countString[10];
// Code =======================================
// Initialise the traffic light controller for all modes
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a75517 	ldw	r2,-25260(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	alt_alarm_start(&tlc_timer, timeout[0], tlc_timer_isr, timerContext);
  800218:	00802074 	movhi	r2,129
  80021c:	10951f04 	addi	r2,r2,21628
  800220:	11400017 	ldw	r5,0(r2)
  800224:	010020b4 	movhi	r4,130
  800228:	2123aa04 	addi	r4,r4,-29016
  80022c:	01802034 	movhi	r6,128
  800230:	3180f304 	addi	r6,r6,972
  800234:	e1ffff17 	ldw	r7,-4(fp)
  800238:	08106280 	call	810628 <alt_alarm_start>
}
  80023c:	e037883a 	mov	sp,fp
  800240:	dfc00117 	ldw	ra,4(sp)
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00204 	addi	sp,sp,8
  80024c:	f800283a 	ret

00800250 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	dfc00215 	stw	ra,8(sp)
  800258:	df000115 	stw	fp,4(sp)
  80025c:	df000104 	addi	fp,sp,4
  800260:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800264:	e0bfff17 	ldw	r2,-4(fp)
  800268:	10800017 	ldw	r2,0(r2)
  80026c:	10bfffd8 	cmpnei	r2,r2,-1
  800270:	10000b1e 	bne	r2,zero,8002a0 <simple_tlc+0x50>
		init_tlc();
  800274:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800278:	e0bfff17 	ldw	r2,-4(fp)
  80027c:	10800017 	ldw	r2,0(r2)
  800280:	10c00044 	addi	r3,r2,1
  800284:	e0bfff17 	ldw	r2,-4(fp)
  800288:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);	// both traffic lights will be red by default
  80028c:	00c04074 	movhi	r3,257
  800290:	18c41804 	addi	r3,r3,4192
  800294:	00800904 	movi	r2,36
  800298:	18800035 	stwio	r2,0(r3)
		return;
  80029c:	00004606 	br	8003b8 <simple_tlc+0x168>
	}

	if (tlc_timer_event == 1) {
  8002a0:	d0a74d17 	ldw	r2,-25292(gp)
  8002a4:	10800058 	cmpnei	r2,r2,1
  8002a8:	1000431e 	bne	r2,zero,8003b8 <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	1004c03a 	cmpne	r2,r2,zero
  8002b8:	1000081e 	bne	r2,zero,8002dc <simple_tlc+0x8c>
			*state = 1; // G, R
  8002bc:	e0ffff17 	ldw	r3,-4(fp)
  8002c0:	00800044 	movi	r2,1
  8002c4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  8002c8:	00c04074 	movhi	r3,257
  8002cc:	18c41804 	addi	r3,r3,4192
  8002d0:	00800304 	movi	r2,12
  8002d4:	18800035 	stwio	r2,0(r3)
  8002d8:	00003606 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 1) {
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	10800058 	cmpnei	r2,r2,1
  8002e8:	1000081e 	bne	r2,zero,80030c <simple_tlc+0xbc>
			*state = 2; // Y, R
  8002ec:	e0ffff17 	ldw	r3,-4(fp)
  8002f0:	00800084 	movi	r2,2
  8002f4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8002f8:	00c04074 	movhi	r3,257
  8002fc:	18c41804 	addi	r3,r3,4192
  800300:	00800504 	movi	r2,20
  800304:	18800035 	stwio	r2,0(r3)
  800308:	00002a06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 2) {
  80030c:	e0bfff17 	ldw	r2,-4(fp)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800098 	cmpnei	r2,r2,2
  800318:	1000081e 	bne	r2,zero,80033c <simple_tlc+0xec>
			*state = 3; // R, R
  80031c:	e0ffff17 	ldw	r3,-4(fp)
  800320:	008000c4 	movi	r2,3
  800324:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800328:	00c04074 	movhi	r3,257
  80032c:	18c41804 	addi	r3,r3,4192
  800330:	00800904 	movi	r2,36
  800334:	18800035 	stwio	r2,0(r3)
  800338:	00001e06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 3) {
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	108000d8 	cmpnei	r2,r2,3
  800348:	1000081e 	bne	r2,zero,80036c <simple_tlc+0x11c>
			*state = 4; // R, G
  80034c:	e0ffff17 	ldw	r3,-4(fp)
  800350:	00800104 	movi	r2,4
  800354:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800358:	00c04074 	movhi	r3,257
  80035c:	18c41804 	addi	r3,r3,4192
  800360:	00800844 	movi	r2,33
  800364:	18800035 	stwio	r2,0(r3)
  800368:	00001206 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 4) {
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10800118 	cmpnei	r2,r2,4
  800378:	1000081e 	bne	r2,zero,80039c <simple_tlc+0x14c>
			*state = 5; // R, Y
  80037c:	e0ffff17 	ldw	r3,-4(fp)
  800380:	00800144 	movi	r2,5
  800384:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800388:	00c04074 	movhi	r3,257
  80038c:	18c41804 	addi	r3,r3,4192
  800390:	00800884 	movi	r2,34
  800394:	18800035 	stwio	r2,0(r3)
  800398:	00000606 	br	8003b4 <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8003a4:	00c04074 	movhi	r3,257
  8003a8:	18c41804 	addi	r3,r3,4192
  8003ac:	00800904 	movi	r2,36
  8003b0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8003b4:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  8003b8:	e037883a 	mov	sp,fp
  8003bc:	dfc00117 	ldw	ra,4(sp)
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00204 	addi	sp,sp,8
  8003c8:	f800283a 	ret

008003cc <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  8003cc:	defffb04 	addi	sp,sp,-20
  8003d0:	dfc00415 	stw	ra,16(sp)
  8003d4:	df000315 	stw	fp,12(sp)
  8003d8:	df000304 	addi	fp,sp,12
  8003dc:	e13fff15 	stw	r4,-4(fp)
	int currentState = proc_state[mode];
  8003e0:	d0a75517 	ldw	r2,-25260(gp)
  8003e4:	00c02074 	movhi	r3,129
  8003e8:	18d53204 	addi	r3,r3,21704
  8003ec:	1085883a 	add	r2,r2,r2
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	10c5883a 	add	r2,r2,r3
  8003f8:	10800017 	ldw	r2,0(r2)
  8003fc:	e0bffe15 	stw	r2,-8(fp)
	if (currentState != 5) {
  800400:	e0bffe17 	ldw	r2,-8(fp)
  800404:	10800160 	cmpeqi	r2,r2,5
  800408:	1000041e 	bne	r2,zero,80041c <tlc_timer_isr+0x50>
		currentState++;
  80040c:	e0bffe17 	ldw	r2,-8(fp)
  800410:	10800044 	addi	r2,r2,1
  800414:	e0bffe15 	stw	r2,-8(fp)
  800418:	00000106 	br	800420 <tlc_timer_isr+0x54>
	} else {
		currentState = 0;
  80041c:	e03ffe15 	stw	zero,-8(fp)
	}
	int	nextTimeout = timeout[currentState];
  800420:	e0bffe17 	ldw	r2,-8(fp)
  800424:	00c02074 	movhi	r3,129
  800428:	18d51f04 	addi	r3,r3,21628
  80042c:	1085883a 	add	r2,r2,r2
  800430:	1085883a 	add	r2,r2,r2
  800434:	10c5883a 	add	r2,r2,r3
  800438:	10800017 	ldw	r2,0(r2)
  80043c:	e0bffd15 	stw	r2,-12(fp)
	printf("next timeout: %d\n", nextTimeout);
  800440:	01002074 	movhi	r4,129
  800444:	21134704 	addi	r4,r4,19740
  800448:	e17ffd17 	ldw	r5,-12(fp)
  80044c:	08035d00 	call	8035d0 <printf>
	printf("current state: %d\n", currentState);
  800450:	01002074 	movhi	r4,129
  800454:	21134c04 	addi	r4,r4,19760
  800458:	e17ffe17 	ldw	r5,-8(fp)
  80045c:	08035d00 	call	8035d0 <printf>
	tlc_timer_event = 1;
  800460:	00800044 	movi	r2,1
  800464:	d0a74d15 	stw	r2,-25292(gp)
	timerHit = 1;
  800468:	00800044 	movi	r2,1
  80046c:	d0a75215 	stw	r2,-25272(gp)
	return nextTimeout;
  800470:	e0bffd17 	ldw	r2,-12(fp)
}
  800474:	e037883a 	mov	sp,fp
  800478:	dfc00117 	ldw	ra,4(sp)
  80047c:	df000017 	ldw	fp,0(sp)
  800480:	dec00204 	addi	sp,sp,8
  800484:	f800283a 	ret

00800488 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  800488:	defffb04 	addi	sp,sp,-20
  80048c:	dfc00415 	stw	ra,16(sp)
  800490:	df000315 	stw	fp,12(sp)
  800494:	df000304 	addi	fp,sp,12
  800498:	e13ffe15 	stw	r4,-8(fp)
  80049c:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context;
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  8004a8:	00804074 	movhi	r2,257
  8004ac:	10842b04 	addi	r2,r2,4268
  8004b0:	10c00037 	ldwio	r3,0(r2)
  8004b4:	e0bffd17 	ldw	r2,-12(fp)
  8004b8:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  8004bc:	00804074 	movhi	r2,257
  8004c0:	10842b04 	addi	r2,r2,4268
  8004c4:	10000035 	stwio	zero,0(r2)
	if ((*temp & 0x01) > 0) {
  8004c8:	e0bffd17 	ldw	r2,-12(fp)
  8004cc:	10800017 	ldw	r2,0(r2)
  8004d0:	1080004c 	andi	r2,r2,1
  8004d4:	10800050 	cmplti	r2,r2,1
  8004d8:	1000021e 	bne	r2,zero,8004e4 <NSEW_ped_isr+0x5c>
		pedestrianNS = 1;
  8004dc:	00800044 	movi	r2,1
  8004e0:	d0a74f15 	stw	r2,-25284(gp)
	}
	if ((*temp & 0x02) > 0) {
  8004e4:	e0bffd17 	ldw	r2,-12(fp)
  8004e8:	10800017 	ldw	r2,0(r2)
  8004ec:	1080008c 	andi	r2,r2,2
  8004f0:	10800050 	cmplti	r2,r2,1
  8004f4:	1000021e 	bne	r2,zero,800500 <NSEW_ped_isr+0x78>
		pedestrianEW = 1;
  8004f8:	00800044 	movi	r2,1
  8004fc:	d0a75015 	stw	r2,-25280(gp)
	}
	if ((*temp & 0x04) > 0) {
  800500:	e0bffd17 	ldw	r2,-12(fp)
  800504:	10800017 	ldw	r2,0(r2)
  800508:	1080010c 	andi	r2,r2,4
  80050c:	10800050 	cmplti	r2,r2,1
  800510:	10000d1e 	bne	r2,zero,800548 <NSEW_ped_isr+0xc0>
		if (vehicle_detected == 0) {
  800514:	d0a75317 	ldw	r2,-25268(gp)
  800518:	1004c03a 	cmpne	r2,r2,zero
  80051c:	1000061e 	bne	r2,zero,800538 <NSEW_ped_isr+0xb0>
			printf("Vehicle Enters\n");
  800520:	01002074 	movhi	r4,129
  800524:	21135104 	addi	r4,r4,19780
  800528:	08036e80 	call	8036e8 <puts>
			vehicle_detected = 1; // If vehicle absent, button press means vehicle has entered intersection
  80052c:	00800044 	movi	r2,1
  800530:	d0a75315 	stw	r2,-25268(gp)
  800534:	00000406 	br	800548 <NSEW_ped_isr+0xc0>
		} else {
			printf("Vehicle Leaves\n");
  800538:	01002074 	movhi	r4,129
  80053c:	21135504 	addi	r4,r4,19796
  800540:	08036e80 	call	8036e8 <puts>
			vehicle_detected = 0; // If at any other time, button press means vehicle has left intersection
  800544:	d0275315 	stw	zero,-25268(gp)
		}
	}
	printf("button: %i\n", *temp);
  800548:	e0bffd17 	ldw	r2,-12(fp)
  80054c:	11400017 	ldw	r5,0(r2)
  800550:	01002074 	movhi	r4,129
  800554:	21135904 	addi	r4,r4,19812
  800558:	08035d00 	call	8035d0 <printf>
}
  80055c:	e037883a 	mov	sp,fp
  800560:	dfc00117 	ldw	ra,4(sp)
  800564:	df000017 	ldw	fp,0(sp)
  800568:	dec00204 	addi	sp,sp,8
  80056c:	f800283a 	ret

00800570 <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  800570:	defffd04 	addi	sp,sp,-12
  800574:	dfc00215 	stw	ra,8(sp)
  800578:	df000115 	stw	fp,4(sp)
  80057c:	df000104 	addi	fp,sp,4
	void* context_going_to_be_passed = (void*) &buttonValue; 								// cast before passing to ISR
  800580:	d0a00304 	addi	r2,gp,-32756
  800584:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// clears the edge capture register
  800588:	00804074 	movhi	r2,257
  80058c:	10842b04 	addi	r2,r2,4268
  800590:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7); 									// enable interrupts for all buttons
  800594:	00c04074 	movhi	r3,257
  800598:	18c42a04 	addi	r3,r3,4264
  80059c:	008001c4 	movi	r2,7
  8005a0:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// register the ISR
  8005a4:	01000104 	movi	r4,4
  8005a8:	e17fff17 	ldw	r5,-4(fp)
  8005ac:	01802034 	movhi	r6,128
  8005b0:	31812204 	addi	r6,r6,1160
  8005b4:	0810a380 	call	810a38 <alt_irq_register>
}
  8005b8:	e037883a 	mov	sp,fp
  8005bc:	dfc00117 	ldw	ra,4(sp)
  8005c0:	df000017 	ldw	fp,0(sp)
  8005c4:	dec00204 	addi	sp,sp,8
  8005c8:	f800283a 	ret

008005cc <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  8005cc:	defffd04 	addi	sp,sp,-12
  8005d0:	dfc00215 	stw	ra,8(sp)
  8005d4:	df000115 	stw	fp,4(sp)
  8005d8:	df000104 	addi	fp,sp,4
  8005dc:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8005e0:	e0bfff17 	ldw	r2,-4(fp)
  8005e4:	10800017 	ldw	r2,0(r2)
  8005e8:	10bfffd8 	cmpnei	r2,r2,-1
  8005ec:	10000b1e 	bne	r2,zero,80061c <pedestrian_tlc+0x50>
		init_tlc();
  8005f0:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8005f4:	e0bfff17 	ldw	r2,-4(fp)
  8005f8:	10800017 	ldw	r2,0(r2)
  8005fc:	10c00044 	addi	r3,r2,1
  800600:	e0bfff17 	ldw	r2,-4(fp)
  800604:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800608:	00c04074 	movhi	r3,257
  80060c:	18c41804 	addi	r3,r3,4192
  800610:	00800904 	movi	r2,36
  800614:	18800035 	stwio	r2,0(r3)
		return;
  800618:	00005e06 	br	800794 <pedestrian_tlc+0x1c8>
	}

	if (tlc_timer_event == 1) {
  80061c:	d0a74d17 	ldw	r2,-25292(gp)
  800620:	10800058 	cmpnei	r2,r2,1
  800624:	10005b1e 	bne	r2,zero,800794 <pedestrian_tlc+0x1c8>
		if (*state == 0) { // R, R state
  800628:	e0bfff17 	ldw	r2,-4(fp)
  80062c:	10800017 	ldw	r2,0(r2)
  800630:	1004c03a 	cmpne	r2,r2,zero
  800634:	1000141e 	bne	r2,zero,800688 <pedestrian_tlc+0xbc>
			if (pedestrianNS == 1) {
  800638:	d0a74f17 	ldw	r2,-25284(gp)
  80063c:	10800058 	cmpnei	r2,r2,1
  800640:	1000091e 	bne	r2,zero,800668 <pedestrian_tlc+0x9c>
				*state = 1; // G, R
  800644:	e0ffff17 	ldw	r3,-4(fp)
  800648:	00800044 	movi	r2,1
  80064c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
  800650:	00c04074 	movhi	r3,257
  800654:	18c41804 	addi	r3,r3,4192
  800658:	00801304 	movi	r2,76
  80065c:	18800035 	stwio	r2,0(r3)
				pedestrianNS = 0;
  800660:	d0274f15 	stw	zero,-25284(gp)
  800664:	00004a06 	br	800790 <pedestrian_tlc+0x1c4>
			} else {
				*state = 1; // G, R
  800668:	e0ffff17 	ldw	r3,-4(fp)
  80066c:	00800044 	movi	r2,1
  800670:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800674:	00c04074 	movhi	r3,257
  800678:	18c41804 	addi	r3,r3,4192
  80067c:	00800304 	movi	r2,12
  800680:	18800035 	stwio	r2,0(r3)
  800684:	00004206 	br	800790 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 1) {
  800688:	e0bfff17 	ldw	r2,-4(fp)
  80068c:	10800017 	ldw	r2,0(r2)
  800690:	10800058 	cmpnei	r2,r2,1
  800694:	1000081e 	bne	r2,zero,8006b8 <pedestrian_tlc+0xec>
			*state = 2; // Y, R
  800698:	e0ffff17 	ldw	r3,-4(fp)
  80069c:	00800084 	movi	r2,2
  8006a0:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8006a4:	00c04074 	movhi	r3,257
  8006a8:	18c41804 	addi	r3,r3,4192
  8006ac:	00800504 	movi	r2,20
  8006b0:	18800035 	stwio	r2,0(r3)
  8006b4:	00003606 	br	800790 <pedestrian_tlc+0x1c4>
		} else if (*state == 2) {
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	10800017 	ldw	r2,0(r2)
  8006c0:	10800098 	cmpnei	r2,r2,2
  8006c4:	1000081e 	bne	r2,zero,8006e8 <pedestrian_tlc+0x11c>
			*state = 3; // R, R
  8006c8:	e0ffff17 	ldw	r3,-4(fp)
  8006cc:	008000c4 	movi	r2,3
  8006d0:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8006d4:	00c04074 	movhi	r3,257
  8006d8:	18c41804 	addi	r3,r3,4192
  8006dc:	00800904 	movi	r2,36
  8006e0:	18800035 	stwio	r2,0(r3)
  8006e4:	00002a06 	br	800790 <pedestrian_tlc+0x1c4>
		} else if (*state == 3) {
  8006e8:	e0bfff17 	ldw	r2,-4(fp)
  8006ec:	10800017 	ldw	r2,0(r2)
  8006f0:	108000d8 	cmpnei	r2,r2,3
  8006f4:	1000141e 	bne	r2,zero,800748 <pedestrian_tlc+0x17c>
			if (pedestrianEW == 1) {
  8006f8:	d0a75017 	ldw	r2,-25280(gp)
  8006fc:	10800058 	cmpnei	r2,r2,1
  800700:	1000091e 	bne	r2,zero,800728 <pedestrian_tlc+0x15c>
				*state = 4; // R, G, P2
  800704:	e0ffff17 	ldw	r3,-4(fp)
  800708:	00800104 	movi	r2,4
  80070c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
  800710:	00c04074 	movhi	r3,257
  800714:	18c41804 	addi	r3,r3,4192
  800718:	00802844 	movi	r2,161
  80071c:	18800035 	stwio	r2,0(r3)
				pedestrianEW = 0;
  800720:	d0275015 	stw	zero,-25280(gp)
  800724:	00001a06 	br	800790 <pedestrian_tlc+0x1c4>
			} else {
				*state = 4; // R, G
  800728:	e0ffff17 	ldw	r3,-4(fp)
  80072c:	00800104 	movi	r2,4
  800730:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800734:	00c04074 	movhi	r3,257
  800738:	18c41804 	addi	r3,r3,4192
  80073c:	00800844 	movi	r2,33
  800740:	18800035 	stwio	r2,0(r3)
  800744:	00001206 	br	800790 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 4) {
  800748:	e0bfff17 	ldw	r2,-4(fp)
  80074c:	10800017 	ldw	r2,0(r2)
  800750:	10800118 	cmpnei	r2,r2,4
  800754:	1000081e 	bne	r2,zero,800778 <pedestrian_tlc+0x1ac>
			*state = 5; // R, Y
  800758:	e0ffff17 	ldw	r3,-4(fp)
  80075c:	00800144 	movi	r2,5
  800760:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800764:	00c04074 	movhi	r3,257
  800768:	18c41804 	addi	r3,r3,4192
  80076c:	00800884 	movi	r2,34
  800770:	18800035 	stwio	r2,0(r3)
  800774:	00000606 	br	800790 <pedestrian_tlc+0x1c4>
		} else {	// this accounts for state 5
			*state = 0; // R, R
  800778:	e0bfff17 	ldw	r2,-4(fp)
  80077c:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800780:	00c04074 	movhi	r3,257
  800784:	18c41804 	addi	r3,r3,4192
  800788:	00800904 	movi	r2,36
  80078c:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  800790:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  800794:	e037883a 	mov	sp,fp
  800798:	dfc00117 	ldw	ra,4(sp)
  80079c:	df000017 	ldw	fp,0(sp)
  8007a0:	dec00204 	addi	sp,sp,8
  8007a4:	f800283a 	ret

008007a8 <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  8007a8:	defffd04 	addi	sp,sp,-12
  8007ac:	dfc00215 	stw	ra,8(sp)
  8007b0:	df000115 	stw	fp,4(sp)
  8007b4:	df000104 	addi	fp,sp,4
  8007b8:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8007bc:	e0bfff17 	ldw	r2,-4(fp)
  8007c0:	10800017 	ldw	r2,0(r2)
  8007c4:	10bfffd8 	cmpnei	r2,r2,-1
  8007c8:	10000b1e 	bne	r2,zero,8007f8 <configurable_tlc+0x50>
		init_tlc();
  8007cc:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8007d0:	e0bfff17 	ldw	r2,-4(fp)
  8007d4:	10800017 	ldw	r2,0(r2)
  8007d8:	10c00044 	addi	r3,r2,1
  8007dc:	e0bfff17 	ldw	r2,-4(fp)
  8007e0:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8007e4:	00c04074 	movhi	r3,257
  8007e8:	18c41804 	addi	r3,r3,4192
  8007ec:	00800904 	movi	r2,36
  8007f0:	18800035 	stwio	r2,0(r3)
		return;
  8007f4:	00001c06 	br	800868 <configurable_tlc+0xc0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8007f8:	00804074 	movhi	r2,257
  8007fc:	10842404 	addi	r2,r2,4240
  800800:	10800037 	ldwio	r2,0(r2)
  800804:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800808:	e0bfff17 	ldw	r2,-4(fp)
  80080c:	10800017 	ldw	r2,0(r2)
  800810:	1005003a 	cmpeq	r2,r2,zero
  800814:	1000041e 	bne	r2,zero,800828 <configurable_tlc+0x80>
  800818:	e0bfff17 	ldw	r2,-4(fp)
  80081c:	10800017 	ldw	r2,0(r2)
  800820:	108000d8 	cmpnei	r2,r2,3
  800824:	10000e1e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
  800828:	d0a75117 	ldw	r2,-25276(gp)
  80082c:	10800110 	cmplti	r2,r2,4
  800830:	10000b1e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
  800834:	d0a75217 	ldw	r2,-25272(gp)
  800838:	10800058 	cmpnei	r2,r2,1
  80083c:	1000081e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
		printToUART("Enter values now\n\r");
  800840:	01002074 	movhi	r4,129
  800844:	21135c04 	addi	r4,r4,19824
  800848:	0800dd40 	call	800dd4 <printToUART>
		timeout_data_handler();
  80084c:	08008c40 	call	8008c4 <timeout_data_handler>
		newTimeoutValues = 0;
  800850:	d0275115 	stw	zero,-25276(gp)
		pedestrian_tlc(state);
  800854:	e13fff17 	ldw	r4,-4(fp)
  800858:	08005cc0 	call	8005cc <pedestrian_tlc>
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  80085c:	00000206 	br	800868 <configurable_tlc+0xc0>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  800860:	e13fff17 	ldw	r4,-4(fp)
  800864:	08005cc0 	call	8005cc <pedestrian_tlc>
	}
}
  800868:	e037883a 	mov	sp,fp
  80086c:	dfc00117 	ldw	ra,4(sp)
  800870:	df000017 	ldw	fp,0(sp)
  800874:	dec00204 	addi	sp,sp,8
  800878:	f800283a 	ret

0080087c <config_tlc>:
 * RETURNS:     Returns the state of the configuration phase
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state) {
  80087c:	defffd04 	addi	sp,sp,-12
  800880:	df000215 	stw	fp,8(sp)
  800884:	df000204 	addi	fp,sp,8
  800888:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  80088c:	e0bffe17 	ldw	r2,-8(fp)
  800890:	10800017 	ldw	r2,0(r2)
  800894:	10bfffd8 	cmpnei	r2,r2,-1
  800898:	1000031e 	bne	r2,zero,8008a8 <config_tlc+0x2c>
		// Process initialisation state
		state = 0;
  80089c:	d0275915 	stw	zero,-25244(gp)
		return 0;
  8008a0:	e03fff15 	stw	zero,-4(fp)
  8008a4:	00000206 	br	8008b0 <config_tlc+0x34>
	}

	return state;
  8008a8:	d0a75917 	ldw	r2,-25244(gp)
  8008ac:	e0bfff15 	stw	r2,-4(fp)
  8008b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8008b4:	e037883a 	mov	sp,fp
  8008b8:	df000017 	ldw	fp,0(sp)
  8008bc:	dec00104 	addi	sp,sp,4
  8008c0:	f800283a 	ret

008008c4 <timeout_data_handler>:
 * RETURNS:     none
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void) {
  8008c4:	defffb04 	addi	sp,sp,-20
  8008c8:	dfc00415 	stw	ra,16(sp)
  8008cc:	df000315 	stw	fp,12(sp)
  8008d0:	df000304 	addi	fp,sp,12
	fp = fopen(UART_NAME, "rw"); // open up UART with read and write access
  8008d4:	01002074 	movhi	r4,129
  8008d8:	21136104 	addi	r4,r4,19844
  8008dc:	01402074 	movhi	r5,129
  8008e0:	29536404 	addi	r5,r5,19856
  8008e4:	080194c0 	call	80194c <fopen>
  8008e8:	d0a75c15 	stw	r2,-25232(gp)
	if (fp != NULL) {// check if the UART is open successfully
  8008ec:	d0a75c17 	ldw	r2,-25232(gp)
  8008f0:	1005003a 	cmpeq	r2,r2,zero
  8008f4:	10005a1e 	bne	r2,zero,800a60 <timeout_data_handler+0x19c>
		int k = 0;
  8008f8:	e03fff15 	stw	zero,-4(fp)
  8008fc:	00000006 	br	800900 <timeout_data_handler+0x3c>
		while(1) {
			c = fgetc(fp);
  800900:	d1275c17 	ldw	r4,-25232(gp)
  800904:	08014700 	call	801470 <fgetc>
  800908:	d0a75a15 	stw	r2,-25240(gp)
			if (c== '\n') {
  80090c:	d0a75a17 	ldw	r2,-25240(gp)
  800910:	108002a0 	cmpeqi	r2,r2,10
  800914:	1000501e 	bne	r2,zero,800a58 <timeout_data_handler+0x194>
				break;
			}
			if (c == '\r') {
  800918:	d0a75a17 	ldw	r2,-25240(gp)
  80091c:	10800360 	cmpeqi	r2,r2,13
  800920:	10004d1e 	bne	r2,zero,800a58 <timeout_data_handler+0x194>
				break;
			}
			if (c == ',') {
  800924:	d0a75a17 	ldw	r2,-25240(gp)
  800928:	10800b18 	cmpnei	r2,r2,44
  80092c:	1000401e 	bne	r2,zero,800a30 <timeout_data_handler+0x16c>
				int a;
				for(a=0;a<(4-k);a++){
  800930:	e03ffe15 	stw	zero,-8(fp)
  800934:	00001506 	br	80098c <timeout_data_handler+0xc8>
					chararray[3]=chararray[2];
  800938:	00802074 	movhi	r2,129
  80093c:	109c4084 	addi	r2,r2,28930
  800940:	10c00003 	ldbu	r3,0(r2)
  800944:	00802074 	movhi	r2,129
  800948:	109c40c4 	addi	r2,r2,28931
  80094c:	10c00005 	stb	r3,0(r2)
					chararray[2]=chararray[1];
  800950:	00802074 	movhi	r2,129
  800954:	109c4044 	addi	r2,r2,28929
  800958:	10c00003 	ldbu	r3,0(r2)
  80095c:	00802074 	movhi	r2,129
  800960:	109c4084 	addi	r2,r2,28930
  800964:	10c00005 	stb	r3,0(r2)
					chararray[1]=chararray[0];
  800968:	d0e00003 	ldbu	r3,-32768(gp)
  80096c:	00802074 	movhi	r2,129
  800970:	109c4044 	addi	r2,r2,28929
  800974:	10c00005 	stb	r3,0(r2)
					chararray[0] = '0';
  800978:	00800c04 	movi	r2,48
  80097c:	d0a00005 	stb	r2,-32768(gp)
			if (c == '\r') {
				break;
			}
			if (c == ',') {
				int a;
				for(a=0;a<(4-k);a++){
  800980:	e0bffe17 	ldw	r2,-8(fp)
  800984:	10800044 	addi	r2,r2,1
  800988:	e0bffe15 	stw	r2,-8(fp)
  80098c:	00c00104 	movi	r3,4
  800990:	e0bfff17 	ldw	r2,-4(fp)
  800994:	1887c83a 	sub	r3,r3,r2
  800998:	e0bffe17 	ldw	r2,-8(fp)
  80099c:	10ffe616 	blt	r2,r3,800938 <timeout_data_handler+0x74>
					chararray[3]=chararray[2];
					chararray[2]=chararray[1];
					chararray[1]=chararray[0];
					chararray[0] = '0';
				}
				sscanf(chararray, "%d", &timeoutValue);
  8009a0:	d1200004 	addi	r4,gp,-32768
  8009a4:	01402074 	movhi	r5,129
  8009a8:	29536504 	addi	r5,r5,19860
  8009ac:	d1a75b04 	addi	r6,gp,-25236
  8009b0:	08041040 	call	804104 <sscanf>
				tempBuffer[valueCount] = timeoutValue;
  8009b4:	d0e75417 	ldw	r3,-25264(gp)
  8009b8:	d0a75b17 	ldw	r2,-25236(gp)
  8009bc:	100b883a 	mov	r5,r2
  8009c0:	01002074 	movhi	r4,129
  8009c4:	21152c04 	addi	r4,r4,21680
  8009c8:	18c5883a 	add	r2,r3,r3
  8009cc:	1085883a 	add	r2,r2,r2
  8009d0:	1105883a 	add	r2,r2,r4
  8009d4:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  8009d8:	00800c04 	movi	r2,48
  8009dc:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  8009e0:	00c02074 	movhi	r3,129
  8009e4:	18dc4044 	addi	r3,r3,28929
  8009e8:	00800c04 	movi	r2,48
  8009ec:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  8009f0:	00c02074 	movhi	r3,129
  8009f4:	18dc4084 	addi	r3,r3,28930
  8009f8:	00800c04 	movi	r2,48
  8009fc:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  800a00:	00c02074 	movhi	r3,129
  800a04:	18dc40c4 	addi	r3,r3,28931
  800a08:	00800c04 	movi	r2,48
  800a0c:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  800a10:	00802074 	movhi	r2,129
  800a14:	109c4104 	addi	r2,r2,28932
  800a18:	10000005 	stb	zero,0(r2)
				k = 0;
  800a1c:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  800a20:	d0a75417 	ldw	r2,-25264(gp)
  800a24:	10800044 	addi	r2,r2,1
  800a28:	d0a75415 	stw	r2,-25264(gp)
  800a2c:	003fb406 	br	800900 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  800a30:	e13fff17 	ldw	r4,-4(fp)
  800a34:	d0a75a17 	ldw	r2,-25240(gp)
  800a38:	1007883a 	mov	r3,r2
  800a3c:	d0a00004 	addi	r2,gp,-32768
  800a40:	2085883a 	add	r2,r4,r2
  800a44:	10c00005 	stb	r3,0(r2)
				k += 1;
  800a48:	e0bfff17 	ldw	r2,-4(fp)
  800a4c:	10800044 	addi	r2,r2,1
  800a50:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  800a54:	003faa06 	br	800900 <timeout_data_handler+0x3c>
		fclose(fp); // remember to close the file
  800a58:	d1275c17 	ldw	r4,-25232(gp)
  800a5c:	080122c0 	call	80122c <fclose>
	}

	if (valueCount == 5) {
  800a60:	d0a75417 	ldw	r2,-25264(gp)
  800a64:	10800158 	cmpnei	r2,r2,5
  800a68:	10002c1e 	bne	r2,zero,800b1c <timeout_data_handler+0x258>
		int j;
		for (j=0; j<6; j++) {
  800a6c:	e03ffd15 	stw	zero,-12(fp)
  800a70:	00001006 	br	800ab4 <timeout_data_handler+0x1f0>
			if (tempBuffer[j] <= 0) {
  800a74:	e0bffd17 	ldw	r2,-12(fp)
  800a78:	00c02074 	movhi	r3,129
  800a7c:	18d52c04 	addi	r3,r3,21680
  800a80:	1085883a 	add	r2,r2,r2
  800a84:	1085883a 	add	r2,r2,r2
  800a88:	10c5883a 	add	r2,r2,r3
  800a8c:	10800017 	ldw	r2,0(r2)
  800a90:	1004c03a 	cmpne	r2,r2,zero
  800a94:	1000041e 	bne	r2,zero,800aa8 <timeout_data_handler+0x1e4>
				printToUART("Invalid values\n\r");
  800a98:	01002074 	movhi	r4,129
  800a9c:	21136604 	addi	r4,r4,19864
  800aa0:	0800dd40 	call	800dd4 <printToUART>
				return;
  800aa4:	00001e06 	br	800b20 <timeout_data_handler+0x25c>
		fclose(fp); // remember to close the file
	}

	if (valueCount == 5) {
		int j;
		for (j=0; j<6; j++) {
  800aa8:	e0bffd17 	ldw	r2,-12(fp)
  800aac:	10800044 	addi	r2,r2,1
  800ab0:	e0bffd15 	stw	r2,-12(fp)
  800ab4:	e0bffd17 	ldw	r2,-12(fp)
  800ab8:	10800190 	cmplti	r2,r2,6
  800abc:	103fed1e 	bne	r2,zero,800a74 <timeout_data_handler+0x1b0>
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800ac0:	e03ffd15 	stw	zero,-12(fp)
  800ac4:	00001106 	br	800b0c <timeout_data_handler+0x248>
			timeout[j]=tempBuffer[j];
  800ac8:	e17ffd17 	ldw	r5,-12(fp)
  800acc:	e0bffd17 	ldw	r2,-12(fp)
  800ad0:	00c02074 	movhi	r3,129
  800ad4:	18d52c04 	addi	r3,r3,21680
  800ad8:	1085883a 	add	r2,r2,r2
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	10c5883a 	add	r2,r2,r3
  800ae4:	11000017 	ldw	r4,0(r2)
  800ae8:	00c02074 	movhi	r3,129
  800aec:	18d51f04 	addi	r3,r3,21628
  800af0:	2945883a 	add	r2,r5,r5
  800af4:	1085883a 	add	r2,r2,r2
  800af8:	10c5883a 	add	r2,r2,r3
  800afc:	11000015 	stw	r4,0(r2)
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800b00:	e0bffd17 	ldw	r2,-12(fp)
  800b04:	10800044 	addi	r2,r2,1
  800b08:	e0bffd15 	stw	r2,-12(fp)
  800b0c:	e0bffd17 	ldw	r2,-12(fp)
  800b10:	10800190 	cmplti	r2,r2,6
  800b14:	103fec1e 	bne	r2,zero,800ac8 <timeout_data_handler+0x204>
			timeout[j]=tempBuffer[j];
		}
		timerHit = 0;
  800b18:	d0275215 	stw	zero,-25272(gp)
	}
	valueCount = 0;
  800b1c:	d0275415 	stw	zero,-25264(gp)
}
  800b20:	e037883a 	mov	sp,fp
  800b24:	dfc00117 	ldw	ra,4(sp)
  800b28:	df000017 	ldw	fp,0(sp)
  800b2c:	dec00204 	addi	sp,sp,8
  800b30:	f800283a 	ret

00800b34 <buffer_timeout>:
/* DESCRIPTION: Stores the new timeout values in a secondary buffer for atomic
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(int value) {
  800b34:	defffe04 	addi	sp,sp,-8
  800b38:	df000115 	stw	fp,4(sp)
  800b3c:	df000104 	addi	fp,sp,4
  800b40:	e13fff15 	stw	r4,-4(fp)

}
  800b44:	e037883a 	mov	sp,fp
  800b48:	df000017 	ldw	fp,0(sp)
  800b4c:	dec00104 	addi	sp,sp,4
  800b50:	f800283a 	ret

00800b54 <update_timeout>:
 *              section by ensuring that timeouts are fully received before
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void) {
  800b54:	deffff04 	addi	sp,sp,-4
  800b58:	df000015 	stw	fp,0(sp)
  800b5c:	d839883a 	mov	fp,sp

	return 0;
  800b60:	0005883a 	mov	r2,zero
}
  800b64:	e037883a 	mov	sp,fp
  800b68:	df000017 	ldw	fp,0(sp)
  800b6c:	dec00104 	addi	sp,sp,4
  800b70:	f800283a 	ret

00800b74 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800b74:	defffa04 	addi	sp,sp,-24
  800b78:	dfc00515 	stw	ra,20(sp)
  800b7c:	df000415 	stw	fp,16(sp)
  800b80:	df000404 	addi	fp,sp,16
  800b84:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800b88:	e0bffe17 	ldw	r2,-8(fp)
  800b8c:	e0bffd15 	stw	r2,-12(fp)
	(*trigger)++;
  800b90:	e0bffd17 	ldw	r2,-12(fp)
  800b94:	10800017 	ldw	r2,0(r2)
  800b98:	10c00044 	addi	r3,r2,1
  800b9c:	e0bffd17 	ldw	r2,-12(fp)
  800ba0:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {
  800ba4:	e0bffd17 	ldw	r2,-12(fp)
  800ba8:	10800017 	ldw	r2,0(r2)
  800bac:	1081f418 	cmpnei	r2,r2,2000
  800bb0:	1000061e 	bne	r2,zero,800bcc <camera_timer_isr+0x58>
		snapshotTaken = 1;
  800bb4:	00800044 	movi	r2,1
  800bb8:	d0a75615 	stw	r2,-25256(gp)
		toPrint = 1;
  800bbc:	00800044 	movi	r2,1
  800bc0:	d0a75815 	stw	r2,-25248(gp)
		return 0;
  800bc4:	e03fff15 	stw	zero,-4(fp)
  800bc8:	00001606 	br	800c24 <camera_timer_isr+0xb0>
	}
	if (vehicle_detected != 2) {
  800bcc:	d0a75317 	ldw	r2,-25268(gp)
  800bd0:	108000a0 	cmpeqi	r2,r2,2
  800bd4:	1000111e 	bne	r2,zero,800c1c <camera_timer_isr+0xa8>
		int num = *trigger;
  800bd8:	e0bffd17 	ldw	r2,-12(fp)
  800bdc:	10800017 	ldw	r2,0(r2)
  800be0:	e0bffc15 	stw	r2,-16(fp)
		sprintf(countString, "%d", num);
  800be4:	010020b4 	movhi	r4,130
  800be8:	2123b604 	addi	r4,r4,-28968
  800bec:	01402074 	movhi	r5,129
  800bf0:	29536504 	addi	r5,r5,19860
  800bf4:	e1bffc17 	ldw	r6,-16(fp)
  800bf8:	0803fa00 	call	803fa0 <sprintf>
		printf(countString);
  800bfc:	010020b4 	movhi	r4,130
  800c00:	2123b604 	addi	r4,r4,-28968
  800c04:	08035d00 	call	8035d0 <printf>
		snapshotTaken = 0;
  800c08:	d0275615 	stw	zero,-25256(gp)
		toPrint = 1;
  800c0c:	00800044 	movi	r2,1
  800c10:	d0a75815 	stw	r2,-25248(gp)
		return 0;
  800c14:	e03fff15 	stw	zero,-4(fp)
  800c18:	00000206 	br	800c24 <camera_timer_isr+0xb0>
	}
	return 1;
  800c1c:	00800044 	movi	r2,1
  800c20:	e0bfff15 	stw	r2,-4(fp)
  800c24:	e0bfff17 	ldw	r2,-4(fp)
}
  800c28:	e037883a 	mov	sp,fp
  800c2c:	dfc00117 	ldw	ra,4(sp)
  800c30:	df000017 	ldw	fp,0(sp)
  800c34:	dec00204 	addi	sp,sp,8
  800c38:	f800283a 	ret

00800c3c <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800c3c:	defffc04 	addi	sp,sp,-16
  800c40:	dfc00315 	stw	ra,12(sp)
  800c44:	df000215 	stw	fp,8(sp)
  800c48:	df000204 	addi	fp,sp,8
  800c4c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800c50:	e0bfff17 	ldw	r2,-4(fp)
  800c54:	10800017 	ldw	r2,0(r2)
  800c58:	10bfffd8 	cmpnei	r2,r2,-1
  800c5c:	10000b1e 	bne	r2,zero,800c8c <camera_tlc+0x50>
		init_tlc();
  800c60:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800c64:	e0bfff17 	ldw	r2,-4(fp)
  800c68:	10800017 	ldw	r2,0(r2)
  800c6c:	10c00044 	addi	r3,r2,1
  800c70:	e0bfff17 	ldw	r2,-4(fp)
  800c74:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800c78:	00c04074 	movhi	r3,257
  800c7c:	18c41804 	addi	r3,r3,4192
  800c80:	00800904 	movi	r2,36
  800c84:	18800035 	stwio	r2,0(r3)
		return;
  800c88:	00004d06 	br	800dc0 <camera_tlc+0x184>
	}

	if (toPrint == 1) {
  800c8c:	d0a75817 	ldw	r2,-25248(gp)
  800c90:	10800058 	cmpnei	r2,r2,1
  800c94:	1000141e 	bne	r2,zero,800ce8 <camera_tlc+0xac>
		if (snapshotTaken == 1) {
  800c98:	d0a75617 	ldw	r2,-25256(gp)
  800c9c:	10800058 	cmpnei	r2,r2,1
  800ca0:	1000061e 	bne	r2,zero,800cbc <camera_tlc+0x80>
			snapshotTaken = 0;
  800ca4:	d0275615 	stw	zero,-25256(gp)
			printToUART("Snapshot Taken\n\r");
  800ca8:	01002074 	movhi	r4,129
  800cac:	21136b04 	addi	r4,r4,19884
  800cb0:	0800dd40 	call	800dd4 <printToUART>
			toPrint = 0;
  800cb4:	d0275815 	stw	zero,-25248(gp)
  800cb8:	00000b06 	br	800ce8 <camera_tlc+0xac>
		} else {
			printToUART("Time taken: ");
  800cbc:	01002074 	movhi	r4,129
  800cc0:	21137004 	addi	r4,r4,19904
  800cc4:	0800dd40 	call	800dd4 <printToUART>
			printToUART(countString);
  800cc8:	010020b4 	movhi	r4,130
  800ccc:	2123b604 	addi	r4,r4,-28968
  800cd0:	0800dd40 	call	800dd4 <printToUART>
			printToUART("\n\r");
  800cd4:	01002074 	movhi	r4,129
  800cd8:	21137404 	addi	r4,r4,19920
  800cdc:	0800dd40 	call	800dd4 <printToUART>
			timeTaken = 0;
  800ce0:	d0275715 	stw	zero,-25252(gp)
			toPrint = 0;
  800ce4:	d0275815 	stw	zero,-25248(gp)
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800ce8:	00804074 	movhi	r2,257
  800cec:	10842404 	addi	r2,r2,4240
  800cf0:	10800037 	ldwio	r2,0(r2)
  800cf4:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800cf8:	e0bfff17 	ldw	r2,-4(fp)
  800cfc:	10800017 	ldw	r2,0(r2)
  800d00:	1005003a 	cmpeq	r2,r2,zero
  800d04:	1000041e 	bne	r2,zero,800d18 <camera_tlc+0xdc>
  800d08:	e0bfff17 	ldw	r2,-4(fp)
  800d0c:	10800017 	ldw	r2,0(r2)
  800d10:	108000d8 	cmpnei	r2,r2,3
  800d14:	10000e1e 	bne	r2,zero,800d50 <camera_tlc+0x114>
  800d18:	d0a75117 	ldw	r2,-25276(gp)
  800d1c:	10800110 	cmplti	r2,r2,4
  800d20:	10000b1e 	bne	r2,zero,800d50 <camera_tlc+0x114>
  800d24:	d0a75217 	ldw	r2,-25272(gp)
  800d28:	10800058 	cmpnei	r2,r2,1
  800d2c:	1000081e 	bne	r2,zero,800d50 <camera_tlc+0x114>
		printToUART("Enter values now\n\r");
  800d30:	01002074 	movhi	r4,129
  800d34:	21135c04 	addi	r4,r4,19824
  800d38:	0800dd40 	call	800dd4 <printToUART>
		timeout_data_handler();
  800d3c:	08008c40 	call	8008c4 <timeout_data_handler>
		newTimeoutValues = 0;
  800d40:	d0275115 	stw	zero,-25276(gp)
		pedestrian_tlc(state);
  800d44:	e13fff17 	ldw	r4,-4(fp)
  800d48:	08005cc0 	call	8005cc <pedestrian_tlc>
			toPrint = 0;
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800d4c:	00000206 	br	800d58 <camera_tlc+0x11c>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  800d50:	e13fff17 	ldw	r4,-4(fp)
  800d54:	08005cc0 	call	8005cc <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { // One light yellow and vehicle enters
  800d58:	e0bfff17 	ldw	r2,-4(fp)
  800d5c:	10800017 	ldw	r2,0(r2)
  800d60:	108000a0 	cmpeqi	r2,r2,2
  800d64:	1000041e 	bne	r2,zero,800d78 <camera_tlc+0x13c>
  800d68:	e0bfff17 	ldw	r2,-4(fp)
  800d6c:	10800017 	ldw	r2,0(r2)
  800d70:	10800158 	cmpnei	r2,r2,5
  800d74:	1000121e 	bne	r2,zero,800dc0 <camera_tlc+0x184>
  800d78:	d0a75317 	ldw	r2,-25268(gp)
  800d7c:	10800058 	cmpnei	r2,r2,1
  800d80:	10000f1e 	bne	r2,zero,800dc0 <camera_tlc+0x184>
		printToUART("Camera Activated\n\r");
  800d84:	01002074 	movhi	r4,129
  800d88:	21137504 	addi	r4,r4,19924
  800d8c:	0800dd40 	call	800dd4 <printToUART>
		camera_count = 0;
  800d90:	d0200215 	stw	zero,-32760(gp)
		vehicle_detected = 2;
  800d94:	00800084 	movi	r2,2
  800d98:	d0a75315 	stw	r2,-25268(gp)
		void* cameraContext = (void*) &camera_count;
  800d9c:	d0a00204 	addi	r2,gp,-32760
  800da0:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800da4:	010020b4 	movhi	r4,130
  800da8:	2123b004 	addi	r4,r4,-28992
  800dac:	01400044 	movi	r5,1
  800db0:	01802034 	movhi	r6,128
  800db4:	3182dd04 	addi	r6,r6,2932
  800db8:	e1fffe17 	ldw	r7,-8(fp)
  800dbc:	08106280 	call	810628 <alt_alarm_start>
	}
}
  800dc0:	e037883a 	mov	sp,fp
  800dc4:	dfc00117 	ldw	ra,4(sp)
  800dc8:	df000017 	ldw	fp,0(sp)
  800dcc:	dec00204 	addi	sp,sp,8
  800dd0:	f800283a 	ret

00800dd4 <printToUART>:

void printToUART(char* stringToPrint) {
  800dd4:	defffd04 	addi	sp,sp,-12
  800dd8:	dfc00215 	stw	ra,8(sp)
  800ddc:	df000115 	stw	fp,4(sp)
  800de0:	df000104 	addi	fp,sp,4
  800de4:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800de8:	01002074 	movhi	r4,129
  800dec:	21136104 	addi	r4,r4,19844
  800df0:	01402074 	movhi	r5,129
  800df4:	29537a04 	addi	r5,r5,19944
  800df8:	080194c0 	call	80194c <fopen>
  800dfc:	d0a75c15 	stw	r2,-25232(gp)
	if (fp != NULL) {
  800e00:	d0a75c17 	ldw	r2,-25232(gp)
  800e04:	1005003a 	cmpeq	r2,r2,zero
  800e08:	1000051e 	bne	r2,zero,800e20 <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800e0c:	d1675c17 	ldw	r5,-25232(gp)
  800e10:	e13fff17 	ldw	r4,-4(fp)
  800e14:	0801a3c0 	call	801a3c <fputs>
		fclose(fp);
  800e18:	d1275c17 	ldw	r4,-25232(gp)
  800e1c:	080122c0 	call	80122c <fclose>
	}
}
  800e20:	e037883a 	mov	sp,fp
  800e24:	dfc00117 	ldw	ra,4(sp)
  800e28:	df000017 	ldw	fp,0(sp)
  800e2c:	dec00204 	addi	sp,sp,8
  800e30:	f800283a 	ret

00800e34 <main>:

int main(void) {
  800e34:	defffc04 	addi	sp,sp,-16
  800e38:	dfc00315 	stw	ra,12(sp)
  800e3c:	df000215 	stw	fp,8(sp)
  800e40:	df000204 	addi	fp,sp,8
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800e44:	01002074 	movhi	r4,129
  800e48:	21137b04 	addi	r4,r4,19948
  800e4c:	01402074 	movhi	r5,129
  800e50:	29537a04 	addi	r5,r5,19944
  800e54:	080194c0 	call	80194c <fopen>
  800e58:	e0bffe15 	stw	r2,-8(fp)

	printf("Hello\n");
  800e5c:	01002074 	movhi	r4,129
  800e60:	21137e04 	addi	r4,r4,19960
  800e64:	08036e80 	call	8036e8 <puts>

	init_buttons_pio();			// initialise buttons
  800e68:	08005700 	call	800570 <init_buttons_pio>
  800e6c:	00000006 	br	800e70 <main+0x3c>

	while (1) {
		if ((proc_state[mode] == -1) || (proc_state[mode] == 0) || (proc_state[mode] == 3)) {
  800e70:	d0a75517 	ldw	r2,-25260(gp)
  800e74:	00c02074 	movhi	r3,129
  800e78:	18d53204 	addi	r3,r3,21704
  800e7c:	1085883a 	add	r2,r2,r2
  800e80:	1085883a 	add	r2,r2,r2
  800e84:	10c5883a 	add	r2,r2,r3
  800e88:	10800017 	ldw	r2,0(r2)
  800e8c:	10bfffe0 	cmpeqi	r2,r2,-1
  800e90:	1000121e 	bne	r2,zero,800edc <main+0xa8>
  800e94:	d0a75517 	ldw	r2,-25260(gp)
  800e98:	00c02074 	movhi	r3,129
  800e9c:	18d53204 	addi	r3,r3,21704
  800ea0:	1085883a 	add	r2,r2,r2
  800ea4:	1085883a 	add	r2,r2,r2
  800ea8:	10c5883a 	add	r2,r2,r3
  800eac:	10800017 	ldw	r2,0(r2)
  800eb0:	1005003a 	cmpeq	r2,r2,zero
  800eb4:	1000091e 	bne	r2,zero,800edc <main+0xa8>
  800eb8:	d0a75517 	ldw	r2,-25260(gp)
  800ebc:	00c02074 	movhi	r3,129
  800ec0:	18d53204 	addi	r3,r3,21704
  800ec4:	1085883a 	add	r2,r2,r2
  800ec8:	1085883a 	add	r2,r2,r2
  800ecc:	10c5883a 	add	r2,r2,r3
  800ed0:	10800017 	ldw	r2,0(r2)
  800ed4:	108000d8 	cmpnei	r2,r2,3
  800ed8:	1000571e 	bne	r2,zero,801038 <main+0x204>
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 0) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 4)) {
  800edc:	00804074 	movhi	r2,257
  800ee0:	10842404 	addi	r2,r2,4240
  800ee4:	10800037 	ldwio	r2,0(r2)
  800ee8:	1005003a 	cmpeq	r2,r2,zero
  800eec:	1000051e 	bne	r2,zero,800f04 <main+0xd0>
  800ef0:	00804074 	movhi	r2,257
  800ef4:	10842404 	addi	r2,r2,4240
  800ef8:	10800037 	ldwio	r2,0(r2)
  800efc:	10800118 	cmpnei	r2,r2,4
  800f00:	10000b1e 	bne	r2,zero,800f30 <main+0xfc>
				if (mode != 0) {
  800f04:	d0a75517 	ldw	r2,-25260(gp)
  800f08:	1005003a 	cmpeq	r2,r2,zero
  800f0c:	1000081e 	bne	r2,zero,800f30 <main+0xfc>
					mode = 0;
  800f10:	d0275515 	stw	zero,-25260(gp)
					alt_alarm_stop(&tlc_timer);
  800f14:	010020b4 	movhi	r4,130
  800f18:	2123aa04 	addi	r4,r4,-29016
  800f1c:	08115600 	call	811560 <alt_alarm_stop>
					proc_state[0] = -1;
  800f20:	00c02074 	movhi	r3,129
  800f24:	18d53204 	addi	r3,r3,21704
  800f28:	00bfffc4 	movi	r2,-1
  800f2c:	18800015 	stw	r2,0(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 1) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 5)) {
  800f30:	00804074 	movhi	r2,257
  800f34:	10842404 	addi	r2,r2,4240
  800f38:	10800037 	ldwio	r2,0(r2)
  800f3c:	10800060 	cmpeqi	r2,r2,1
  800f40:	1000051e 	bne	r2,zero,800f58 <main+0x124>
  800f44:	00804074 	movhi	r2,257
  800f48:	10842404 	addi	r2,r2,4240
  800f4c:	10800037 	ldwio	r2,0(r2)
  800f50:	10800158 	cmpnei	r2,r2,5
  800f54:	10000c1e 	bne	r2,zero,800f88 <main+0x154>
				if (mode != 1) {
  800f58:	d0a75517 	ldw	r2,-25260(gp)
  800f5c:	10800060 	cmpeqi	r2,r2,1
  800f60:	1000091e 	bne	r2,zero,800f88 <main+0x154>
					mode = 1;
  800f64:	00800044 	movi	r2,1
  800f68:	d0a75515 	stw	r2,-25260(gp)
					alt_alarm_stop(&tlc_timer);
  800f6c:	010020b4 	movhi	r4,130
  800f70:	2123aa04 	addi	r4,r4,-29016
  800f74:	08115600 	call	811560 <alt_alarm_stop>
					proc_state[1] = -1;
  800f78:	00c02074 	movhi	r3,129
  800f7c:	18d53204 	addi	r3,r3,21704
  800f80:	00bfffc4 	movi	r2,-1
  800f84:	18800115 	stw	r2,4(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 2) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6)) {
  800f88:	00804074 	movhi	r2,257
  800f8c:	10842404 	addi	r2,r2,4240
  800f90:	10800037 	ldwio	r2,0(r2)
  800f94:	108000a0 	cmpeqi	r2,r2,2
  800f98:	1000051e 	bne	r2,zero,800fb0 <main+0x17c>
  800f9c:	00804074 	movhi	r2,257
  800fa0:	10842404 	addi	r2,r2,4240
  800fa4:	10800037 	ldwio	r2,0(r2)
  800fa8:	10800198 	cmpnei	r2,r2,6
  800fac:	10000c1e 	bne	r2,zero,800fe0 <main+0x1ac>
				if (mode != 2) {
  800fb0:	d0a75517 	ldw	r2,-25260(gp)
  800fb4:	108000a0 	cmpeqi	r2,r2,2
  800fb8:	1000091e 	bne	r2,zero,800fe0 <main+0x1ac>
					mode = 2;
  800fbc:	00800084 	movi	r2,2
  800fc0:	d0a75515 	stw	r2,-25260(gp)
					alt_alarm_stop(&tlc_timer);
  800fc4:	010020b4 	movhi	r4,130
  800fc8:	2123aa04 	addi	r4,r4,-29016
  800fcc:	08115600 	call	811560 <alt_alarm_stop>
					proc_state[2] = -1;
  800fd0:	00c02074 	movhi	r3,129
  800fd4:	18d53204 	addi	r3,r3,21704
  800fd8:	00bfffc4 	movi	r2,-1
  800fdc:	18800215 	stw	r2,8(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 3) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 7)) {
  800fe0:	00804074 	movhi	r2,257
  800fe4:	10842404 	addi	r2,r2,4240
  800fe8:	10800037 	ldwio	r2,0(r2)
  800fec:	108000e0 	cmpeqi	r2,r2,3
  800ff0:	1000051e 	bne	r2,zero,801008 <main+0x1d4>
  800ff4:	00804074 	movhi	r2,257
  800ff8:	10842404 	addi	r2,r2,4240
  800ffc:	10800037 	ldwio	r2,0(r2)
  801000:	108001d8 	cmpnei	r2,r2,7
  801004:	10000c1e 	bne	r2,zero,801038 <main+0x204>
				if (mode != 3) {
  801008:	d0a75517 	ldw	r2,-25260(gp)
  80100c:	108000e0 	cmpeqi	r2,r2,3
  801010:	1000091e 	bne	r2,zero,801038 <main+0x204>
					mode = 3;
  801014:	008000c4 	movi	r2,3
  801018:	d0a75515 	stw	r2,-25260(gp)
					alt_alarm_stop(&tlc_timer);
  80101c:	010020b4 	movhi	r4,130
  801020:	2123aa04 	addi	r4,r4,-29016
  801024:	08115600 	call	811560 <alt_alarm_stop>
					proc_state[3] = -1;
  801028:	00c02074 	movhi	r3,129
  80102c:	18d53204 	addi	r3,r3,21704
  801030:	00bfffc4 	movi	r2,-1
  801034:	18800315 	stw	r2,12(r3)
				}
			}
		}

    	if(lcd != NULL) {
  801038:	e0bffe17 	ldw	r2,-8(fp)
  80103c:	1005003a 	cmpeq	r2,r2,zero
  801040:	1000171e 	bne	r2,zero,8010a0 <main+0x26c>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  801044:	e13ffe17 	ldw	r4,-8(fp)
  801048:	01402074 	movhi	r5,129
  80104c:	29538004 	addi	r5,r5,19968
  801050:	018006c4 	movi	r6,27
  801054:	01c02074 	movhi	r7,129
  801058:	39d38204 	addi	r7,r7,19976
  80105c:	08019680 	call	801968 <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  801060:	d1a75517 	ldw	r6,-25260(gp)
  801064:	e13ffe17 	ldw	r4,-8(fp)
  801068:	01402074 	movhi	r5,129
  80106c:	29538304 	addi	r5,r5,19980
  801070:	08019680 	call	801968 <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  801074:	d0a75517 	ldw	r2,-25260(gp)
  801078:	00c02074 	movhi	r3,129
  80107c:	18d53204 	addi	r3,r3,21704
  801080:	1085883a 	add	r2,r2,r2
  801084:	1085883a 	add	r2,r2,r2
  801088:	10c5883a 	add	r2,r2,r3
  80108c:	11800017 	ldw	r6,0(r2)
  801090:	e13ffe17 	ldw	r4,-8(fp)
  801094:	01402074 	movhi	r5,129
  801098:	29538604 	addi	r5,r5,19992
  80109c:	08019680 	call	801968 <fprintf>
    	}

		// Execute the correct TLC
    	switch (mode) {
  8010a0:	d0a75517 	ldw	r2,-25260(gp)
  8010a4:	e0bfff15 	stw	r2,-4(fp)
  8010a8:	e0ffff17 	ldw	r3,-4(fp)
  8010ac:	18800060 	cmpeqi	r2,r3,1
  8010b0:	10000e1e 	bne	r2,zero,8010ec <main+0x2b8>
  8010b4:	e0ffff17 	ldw	r3,-4(fp)
  8010b8:	18800070 	cmpltui	r2,r3,1
  8010bc:	1000071e 	bne	r2,zero,8010dc <main+0x2a8>
  8010c0:	e0ffff17 	ldw	r3,-4(fp)
  8010c4:	188000a0 	cmpeqi	r2,r3,2
  8010c8:	10000c1e 	bne	r2,zero,8010fc <main+0x2c8>
  8010cc:	e0ffff17 	ldw	r3,-4(fp)
  8010d0:	188000e0 	cmpeqi	r2,r3,3
  8010d4:	10000d1e 	bne	r2,zero,80110c <main+0x2d8>
  8010d8:	003f6506 	br	800e70 <main+0x3c>
			case 0:
				simple_tlc(&proc_state[0]);
  8010dc:	01002074 	movhi	r4,129
  8010e0:	21153204 	addi	r4,r4,21704
  8010e4:	08002500 	call	800250 <simple_tlc>
				break;
  8010e8:	003f6106 	br	800e70 <main+0x3c>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  8010ec:	01002074 	movhi	r4,129
  8010f0:	21153304 	addi	r4,r4,21708
  8010f4:	08005cc0 	call	8005cc <pedestrian_tlc>
				break;
  8010f8:	003f5d06 	br	800e70 <main+0x3c>
			case 2:
				configurable_tlc(&proc_state[2]);
  8010fc:	01002074 	movhi	r4,129
  801100:	21153404 	addi	r4,r4,21712
  801104:	08007a80 	call	8007a8 <configurable_tlc>
				break;
  801108:	003f5906 	br	800e70 <main+0x3c>
			case 3:
				camera_tlc(&proc_state[3]);
  80110c:	01002074 	movhi	r4,129
  801110:	21153504 	addi	r4,r4,21716
  801114:	0800c3c0 	call	800c3c <camera_tlc>
				break;
		}
	}
  801118:	003f5506 	br	800e70 <main+0x3c>

0080111c <_fclose_r>:
  80111c:	defffc04 	addi	sp,sp,-16
  801120:	dc400115 	stw	r17,4(sp)
  801124:	dc000015 	stw	r16,0(sp)
  801128:	dfc00315 	stw	ra,12(sp)
  80112c:	dc800215 	stw	r18,8(sp)
  801130:	2821883a 	mov	r16,r5
  801134:	2023883a 	mov	r17,r4
  801138:	28002926 	beq	r5,zero,8011e0 <_fclose_r+0xc4>
  80113c:	08015f00 	call	8015f0 <__sfp_lock_acquire>
  801140:	88000226 	beq	r17,zero,80114c <_fclose_r+0x30>
  801144:	88800e17 	ldw	r2,56(r17)
  801148:	10002d26 	beq	r2,zero,801200 <_fclose_r+0xe4>
  80114c:	8080030f 	ldh	r2,12(r16)
  801150:	10002226 	beq	r2,zero,8011dc <_fclose_r+0xc0>
  801154:	8809883a 	mov	r4,r17
  801158:	800b883a 	mov	r5,r16
  80115c:	08012400 	call	801240 <_fflush_r>
  801160:	1025883a 	mov	r18,r2
  801164:	80800b17 	ldw	r2,44(r16)
  801168:	10000426 	beq	r2,zero,80117c <_fclose_r+0x60>
  80116c:	81400717 	ldw	r5,28(r16)
  801170:	8809883a 	mov	r4,r17
  801174:	103ee83a 	callr	r2
  801178:	10002a16 	blt	r2,zero,801224 <_fclose_r+0x108>
  80117c:	8080030b 	ldhu	r2,12(r16)
  801180:	1080200c 	andi	r2,r2,128
  801184:	1000231e 	bne	r2,zero,801214 <_fclose_r+0xf8>
  801188:	81400c17 	ldw	r5,48(r16)
  80118c:	28000526 	beq	r5,zero,8011a4 <_fclose_r+0x88>
  801190:	80801004 	addi	r2,r16,64
  801194:	28800226 	beq	r5,r2,8011a0 <_fclose_r+0x84>
  801198:	8809883a 	mov	r4,r17
  80119c:	0801b840 	call	801b84 <_free_r>
  8011a0:	80000c15 	stw	zero,48(r16)
  8011a4:	81401117 	ldw	r5,68(r16)
  8011a8:	28000326 	beq	r5,zero,8011b8 <_fclose_r+0x9c>
  8011ac:	8809883a 	mov	r4,r17
  8011b0:	0801b840 	call	801b84 <_free_r>
  8011b4:	80001115 	stw	zero,68(r16)
  8011b8:	8000030d 	sth	zero,12(r16)
  8011bc:	08015f40 	call	8015f4 <__sfp_lock_release>
  8011c0:	9005883a 	mov	r2,r18
  8011c4:	dfc00317 	ldw	ra,12(sp)
  8011c8:	dc800217 	ldw	r18,8(sp)
  8011cc:	dc400117 	ldw	r17,4(sp)
  8011d0:	dc000017 	ldw	r16,0(sp)
  8011d4:	dec00404 	addi	sp,sp,16
  8011d8:	f800283a 	ret
  8011dc:	08015f40 	call	8015f4 <__sfp_lock_release>
  8011e0:	0025883a 	mov	r18,zero
  8011e4:	9005883a 	mov	r2,r18
  8011e8:	dfc00317 	ldw	ra,12(sp)
  8011ec:	dc800217 	ldw	r18,8(sp)
  8011f0:	dc400117 	ldw	r17,4(sp)
  8011f4:	dc000017 	ldw	r16,0(sp)
  8011f8:	dec00404 	addi	sp,sp,16
  8011fc:	f800283a 	ret
  801200:	8809883a 	mov	r4,r17
  801204:	08016000 	call	801600 <__sinit>
  801208:	8080030f 	ldh	r2,12(r16)
  80120c:	103fd11e 	bne	r2,zero,801154 <_fclose_r+0x38>
  801210:	003ff206 	br	8011dc <_fclose_r+0xc0>
  801214:	81400417 	ldw	r5,16(r16)
  801218:	8809883a 	mov	r4,r17
  80121c:	0801b840 	call	801b84 <_free_r>
  801220:	003fd906 	br	801188 <_fclose_r+0x6c>
  801224:	04bfffc4 	movi	r18,-1
  801228:	003fd406 	br	80117c <_fclose_r+0x60>

0080122c <fclose>:
  80122c:	00802074 	movhi	r2,129
  801230:	109c4404 	addi	r2,r2,28944
  801234:	200b883a 	mov	r5,r4
  801238:	11000017 	ldw	r4,0(r2)
  80123c:	080111c1 	jmpi	80111c <_fclose_r>

00801240 <_fflush_r>:
  801240:	defffb04 	addi	sp,sp,-20
  801244:	dcc00315 	stw	r19,12(sp)
  801248:	dc800215 	stw	r18,8(sp)
  80124c:	dfc00415 	stw	ra,16(sp)
  801250:	dc400115 	stw	r17,4(sp)
  801254:	dc000015 	stw	r16,0(sp)
  801258:	2027883a 	mov	r19,r4
  80125c:	2825883a 	mov	r18,r5
  801260:	20000226 	beq	r4,zero,80126c <_fflush_r+0x2c>
  801264:	20800e17 	ldw	r2,56(r4)
  801268:	10005626 	beq	r2,zero,8013c4 <_fflush_r+0x184>
  80126c:	9100030b 	ldhu	r4,12(r18)
  801270:	20ffffcc 	andi	r3,r4,65535
  801274:	18e0001c 	xori	r3,r3,32768
  801278:	18e00004 	addi	r3,r3,-32768
  80127c:	1880020c 	andi	r2,r3,8
  801280:	1000261e 	bne	r2,zero,80131c <_fflush_r+0xdc>
  801284:	90c00117 	ldw	r3,4(r18)
  801288:	20820014 	ori	r2,r4,2048
  80128c:	9080030d 	sth	r2,12(r18)
  801290:	1009883a 	mov	r4,r2
  801294:	00c0400e 	bge	zero,r3,801398 <_fflush_r+0x158>
  801298:	92000a17 	ldw	r8,40(r18)
  80129c:	40004026 	beq	r8,zero,8013a0 <_fflush_r+0x160>
  8012a0:	2084000c 	andi	r2,r4,4096
  8012a4:	10005326 	beq	r2,zero,8013f4 <_fflush_r+0x1b4>
  8012a8:	94001417 	ldw	r16,80(r18)
  8012ac:	9080030b 	ldhu	r2,12(r18)
  8012b0:	1080010c 	andi	r2,r2,4
  8012b4:	1000481e 	bne	r2,zero,8013d8 <_fflush_r+0x198>
  8012b8:	91400717 	ldw	r5,28(r18)
  8012bc:	9809883a 	mov	r4,r19
  8012c0:	800d883a 	mov	r6,r16
  8012c4:	000f883a 	mov	r7,zero
  8012c8:	403ee83a 	callr	r8
  8012cc:	8080261e 	bne	r16,r2,801368 <_fflush_r+0x128>
  8012d0:	9080030b 	ldhu	r2,12(r18)
  8012d4:	91000417 	ldw	r4,16(r18)
  8012d8:	90000115 	stw	zero,4(r18)
  8012dc:	10bdffcc 	andi	r2,r2,63487
  8012e0:	10ffffcc 	andi	r3,r2,65535
  8012e4:	18c4000c 	andi	r3,r3,4096
  8012e8:	9080030d 	sth	r2,12(r18)
  8012ec:	91000015 	stw	r4,0(r18)
  8012f0:	18002b26 	beq	r3,zero,8013a0 <_fflush_r+0x160>
  8012f4:	0007883a 	mov	r3,zero
  8012f8:	1805883a 	mov	r2,r3
  8012fc:	94001415 	stw	r16,80(r18)
  801300:	dfc00417 	ldw	ra,16(sp)
  801304:	dcc00317 	ldw	r19,12(sp)
  801308:	dc800217 	ldw	r18,8(sp)
  80130c:	dc400117 	ldw	r17,4(sp)
  801310:	dc000017 	ldw	r16,0(sp)
  801314:	dec00504 	addi	sp,sp,20
  801318:	f800283a 	ret
  80131c:	94400417 	ldw	r17,16(r18)
  801320:	88001f26 	beq	r17,zero,8013a0 <_fflush_r+0x160>
  801324:	90800017 	ldw	r2,0(r18)
  801328:	18c000cc 	andi	r3,r3,3
  80132c:	94400015 	stw	r17,0(r18)
  801330:	1461c83a 	sub	r16,r2,r17
  801334:	18002526 	beq	r3,zero,8013cc <_fflush_r+0x18c>
  801338:	0005883a 	mov	r2,zero
  80133c:	90800215 	stw	r2,8(r18)
  801340:	0400170e 	bge	zero,r16,8013a0 <_fflush_r+0x160>
  801344:	90c00917 	ldw	r3,36(r18)
  801348:	91400717 	ldw	r5,28(r18)
  80134c:	880d883a 	mov	r6,r17
  801350:	800f883a 	mov	r7,r16
  801354:	9809883a 	mov	r4,r19
  801358:	183ee83a 	callr	r3
  80135c:	88a3883a 	add	r17,r17,r2
  801360:	80a1c83a 	sub	r16,r16,r2
  801364:	00bff616 	blt	zero,r2,801340 <_fflush_r+0x100>
  801368:	9080030b 	ldhu	r2,12(r18)
  80136c:	00ffffc4 	movi	r3,-1
  801370:	10801014 	ori	r2,r2,64
  801374:	9080030d 	sth	r2,12(r18)
  801378:	1805883a 	mov	r2,r3
  80137c:	dfc00417 	ldw	ra,16(sp)
  801380:	dcc00317 	ldw	r19,12(sp)
  801384:	dc800217 	ldw	r18,8(sp)
  801388:	dc400117 	ldw	r17,4(sp)
  80138c:	dc000017 	ldw	r16,0(sp)
  801390:	dec00504 	addi	sp,sp,20
  801394:	f800283a 	ret
  801398:	90800f17 	ldw	r2,60(r18)
  80139c:	00bfbe16 	blt	zero,r2,801298 <_fflush_r+0x58>
  8013a0:	0007883a 	mov	r3,zero
  8013a4:	1805883a 	mov	r2,r3
  8013a8:	dfc00417 	ldw	ra,16(sp)
  8013ac:	dcc00317 	ldw	r19,12(sp)
  8013b0:	dc800217 	ldw	r18,8(sp)
  8013b4:	dc400117 	ldw	r17,4(sp)
  8013b8:	dc000017 	ldw	r16,0(sp)
  8013bc:	dec00504 	addi	sp,sp,20
  8013c0:	f800283a 	ret
  8013c4:	08016000 	call	801600 <__sinit>
  8013c8:	003fa806 	br	80126c <_fflush_r+0x2c>
  8013cc:	90800517 	ldw	r2,20(r18)
  8013d0:	90800215 	stw	r2,8(r18)
  8013d4:	003fda06 	br	801340 <_fflush_r+0x100>
  8013d8:	90800117 	ldw	r2,4(r18)
  8013dc:	90c00c17 	ldw	r3,48(r18)
  8013e0:	80a1c83a 	sub	r16,r16,r2
  8013e4:	183fb426 	beq	r3,zero,8012b8 <_fflush_r+0x78>
  8013e8:	90800f17 	ldw	r2,60(r18)
  8013ec:	80a1c83a 	sub	r16,r16,r2
  8013f0:	003fb106 	br	8012b8 <_fflush_r+0x78>
  8013f4:	91400717 	ldw	r5,28(r18)
  8013f8:	9809883a 	mov	r4,r19
  8013fc:	000d883a 	mov	r6,zero
  801400:	01c00044 	movi	r7,1
  801404:	403ee83a 	callr	r8
  801408:	1021883a 	mov	r16,r2
  80140c:	00bfffc4 	movi	r2,-1
  801410:	80800226 	beq	r16,r2,80141c <_fflush_r+0x1dc>
  801414:	92000a17 	ldw	r8,40(r18)
  801418:	003fa406 	br	8012ac <_fflush_r+0x6c>
  80141c:	98c00017 	ldw	r3,0(r19)
  801420:	00800744 	movi	r2,29
  801424:	18bfde26 	beq	r3,r2,8013a0 <_fflush_r+0x160>
  801428:	9080030b 	ldhu	r2,12(r18)
  80142c:	8007883a 	mov	r3,r16
  801430:	10801014 	ori	r2,r2,64
  801434:	9080030d 	sth	r2,12(r18)
  801438:	003fcf06 	br	801378 <_fflush_r+0x138>

0080143c <fflush>:
  80143c:	01402034 	movhi	r5,128
  801440:	29449004 	addi	r5,r5,4672
  801444:	2007883a 	mov	r3,r4
  801448:	20000526 	beq	r4,zero,801460 <fflush+0x24>
  80144c:	00802074 	movhi	r2,129
  801450:	109c4404 	addi	r2,r2,28944
  801454:	11000017 	ldw	r4,0(r2)
  801458:	180b883a 	mov	r5,r3
  80145c:	08012401 	jmpi	801240 <_fflush_r>
  801460:	00802074 	movhi	r2,129
  801464:	109c4504 	addi	r2,r2,28948
  801468:	11000017 	ldw	r4,0(r2)
  80146c:	08028081 	jmpi	802808 <_fwalk_reent>

00801470 <fgetc>:
  801470:	defffd04 	addi	sp,sp,-12
  801474:	dc400115 	stw	r17,4(sp)
  801478:	04402074 	movhi	r17,129
  80147c:	8c5c4404 	addi	r17,r17,28944
  801480:	88c00017 	ldw	r3,0(r17)
  801484:	dc000015 	stw	r16,0(sp)
  801488:	dfc00215 	stw	ra,8(sp)
  80148c:	2021883a 	mov	r16,r4
  801490:	18000326 	beq	r3,zero,8014a0 <fgetc+0x30>
  801494:	18800e17 	ldw	r2,56(r3)
  801498:	1809883a 	mov	r4,r3
  80149c:	10000e26 	beq	r2,zero,8014d8 <fgetc+0x68>
  8014a0:	80800117 	ldw	r2,4(r16)
  8014a4:	800b883a 	mov	r5,r16
  8014a8:	10bfffc4 	addi	r2,r2,-1
  8014ac:	80800115 	stw	r2,4(r16)
  8014b0:	10000f16 	blt	r2,zero,8014f0 <fgetc+0x80>
  8014b4:	80c00017 	ldw	r3,0(r16)
  8014b8:	18800003 	ldbu	r2,0(r3)
  8014bc:	18c00044 	addi	r3,r3,1
  8014c0:	80c00015 	stw	r3,0(r16)
  8014c4:	dfc00217 	ldw	ra,8(sp)
  8014c8:	dc400117 	ldw	r17,4(sp)
  8014cc:	dc000017 	ldw	r16,0(sp)
  8014d0:	dec00304 	addi	sp,sp,12
  8014d4:	f800283a 	ret
  8014d8:	08016000 	call	801600 <__sinit>
  8014dc:	80800117 	ldw	r2,4(r16)
  8014e0:	800b883a 	mov	r5,r16
  8014e4:	10bfffc4 	addi	r2,r2,-1
  8014e8:	80800115 	stw	r2,4(r16)
  8014ec:	103ff10e 	bge	r2,zero,8014b4 <fgetc+0x44>
  8014f0:	89000017 	ldw	r4,0(r17)
  8014f4:	dfc00217 	ldw	ra,8(sp)
  8014f8:	dc400117 	ldw	r17,4(sp)
  8014fc:	dc000017 	ldw	r16,0(sp)
  801500:	dec00304 	addi	sp,sp,12
  801504:	0803ed01 	jmpi	803ed0 <__srget_r>

00801508 <_fgetc_r>:
  801508:	defffd04 	addi	sp,sp,-12
  80150c:	dc400115 	stw	r17,4(sp)
  801510:	dc000015 	stw	r16,0(sp)
  801514:	dfc00215 	stw	ra,8(sp)
  801518:	2021883a 	mov	r16,r4
  80151c:	2823883a 	mov	r17,r5
  801520:	20000226 	beq	r4,zero,80152c <_fgetc_r+0x24>
  801524:	20800e17 	ldw	r2,56(r4)
  801528:	10000f26 	beq	r2,zero,801568 <_fgetc_r+0x60>
  80152c:	88800117 	ldw	r2,4(r17)
  801530:	8009883a 	mov	r4,r16
  801534:	880b883a 	mov	r5,r17
  801538:	10bfffc4 	addi	r2,r2,-1
  80153c:	88800115 	stw	r2,4(r17)
  801540:	10001016 	blt	r2,zero,801584 <_fgetc_r+0x7c>
  801544:	88c00017 	ldw	r3,0(r17)
  801548:	18800003 	ldbu	r2,0(r3)
  80154c:	18c00044 	addi	r3,r3,1
  801550:	88c00015 	stw	r3,0(r17)
  801554:	dfc00217 	ldw	ra,8(sp)
  801558:	dc400117 	ldw	r17,4(sp)
  80155c:	dc000017 	ldw	r16,0(sp)
  801560:	dec00304 	addi	sp,sp,12
  801564:	f800283a 	ret
  801568:	08016000 	call	801600 <__sinit>
  80156c:	88800117 	ldw	r2,4(r17)
  801570:	8009883a 	mov	r4,r16
  801574:	880b883a 	mov	r5,r17
  801578:	10bfffc4 	addi	r2,r2,-1
  80157c:	88800115 	stw	r2,4(r17)
  801580:	103ff00e 	bge	r2,zero,801544 <_fgetc_r+0x3c>
  801584:	dfc00217 	ldw	ra,8(sp)
  801588:	dc400117 	ldw	r17,4(sp)
  80158c:	dc000017 	ldw	r16,0(sp)
  801590:	dec00304 	addi	sp,sp,12
  801594:	0803ed01 	jmpi	803ed0 <__srget_r>

00801598 <std>:
  801598:	00802034 	movhi	r2,128
  80159c:	10906204 	addi	r2,r2,16776
  8015a0:	20800b15 	stw	r2,44(r4)
  8015a4:	00802034 	movhi	r2,128
  8015a8:	10909d04 	addi	r2,r2,17012
  8015ac:	20800815 	stw	r2,32(r4)
  8015b0:	00c02034 	movhi	r3,128
  8015b4:	18d07e04 	addi	r3,r3,16888
  8015b8:	00802034 	movhi	r2,128
  8015bc:	10906404 	addi	r2,r2,16784
  8015c0:	2140030d 	sth	r5,12(r4)
  8015c4:	2180038d 	sth	r6,14(r4)
  8015c8:	20c00915 	stw	r3,36(r4)
  8015cc:	20800a15 	stw	r2,40(r4)
  8015d0:	20000015 	stw	zero,0(r4)
  8015d4:	20000115 	stw	zero,4(r4)
  8015d8:	20000215 	stw	zero,8(r4)
  8015dc:	20000415 	stw	zero,16(r4)
  8015e0:	20000515 	stw	zero,20(r4)
  8015e4:	20000615 	stw	zero,24(r4)
  8015e8:	21000715 	stw	r4,28(r4)
  8015ec:	f800283a 	ret

008015f0 <__sfp_lock_acquire>:
  8015f0:	f800283a 	ret

008015f4 <__sfp_lock_release>:
  8015f4:	f800283a 	ret

008015f8 <__sinit_lock_acquire>:
  8015f8:	f800283a 	ret

008015fc <__sinit_lock_release>:
  8015fc:	f800283a 	ret

00801600 <__sinit>:
  801600:	20800e17 	ldw	r2,56(r4)
  801604:	defffd04 	addi	sp,sp,-12
  801608:	dc400115 	stw	r17,4(sp)
  80160c:	dc000015 	stw	r16,0(sp)
  801610:	dfc00215 	stw	ra,8(sp)
  801614:	04400044 	movi	r17,1
  801618:	01400104 	movi	r5,4
  80161c:	000d883a 	mov	r6,zero
  801620:	2021883a 	mov	r16,r4
  801624:	2200bb04 	addi	r8,r4,748
  801628:	200f883a 	mov	r7,r4
  80162c:	10000526 	beq	r2,zero,801644 <__sinit+0x44>
  801630:	dfc00217 	ldw	ra,8(sp)
  801634:	dc400117 	ldw	r17,4(sp)
  801638:	dc000017 	ldw	r16,0(sp)
  80163c:	dec00304 	addi	sp,sp,12
  801640:	f800283a 	ret
  801644:	21000117 	ldw	r4,4(r4)
  801648:	00802034 	movhi	r2,128
  80164c:	1085b904 	addi	r2,r2,5860
  801650:	00c000c4 	movi	r3,3
  801654:	80800f15 	stw	r2,60(r16)
  801658:	80c0b915 	stw	r3,740(r16)
  80165c:	8200ba15 	stw	r8,744(r16)
  801660:	84400e15 	stw	r17,56(r16)
  801664:	8000b815 	stw	zero,736(r16)
  801668:	08015980 	call	801598 <std>
  80166c:	81000217 	ldw	r4,8(r16)
  801670:	880d883a 	mov	r6,r17
  801674:	800f883a 	mov	r7,r16
  801678:	01400284 	movi	r5,10
  80167c:	08015980 	call	801598 <std>
  801680:	81000317 	ldw	r4,12(r16)
  801684:	800f883a 	mov	r7,r16
  801688:	01400484 	movi	r5,18
  80168c:	01800084 	movi	r6,2
  801690:	dfc00217 	ldw	ra,8(sp)
  801694:	dc400117 	ldw	r17,4(sp)
  801698:	dc000017 	ldw	r16,0(sp)
  80169c:	dec00304 	addi	sp,sp,12
  8016a0:	08015981 	jmpi	801598 <std>

008016a4 <__fp_lock>:
  8016a4:	0005883a 	mov	r2,zero
  8016a8:	f800283a 	ret

008016ac <__fp_unlock>:
  8016ac:	0005883a 	mov	r2,zero
  8016b0:	f800283a 	ret

008016b4 <__fp_unlock_all>:
  8016b4:	00802074 	movhi	r2,129
  8016b8:	109c4404 	addi	r2,r2,28944
  8016bc:	11000017 	ldw	r4,0(r2)
  8016c0:	01402034 	movhi	r5,128
  8016c4:	2945ab04 	addi	r5,r5,5804
  8016c8:	08028d01 	jmpi	8028d0 <_fwalk>

008016cc <__fp_lock_all>:
  8016cc:	00802074 	movhi	r2,129
  8016d0:	109c4404 	addi	r2,r2,28944
  8016d4:	11000017 	ldw	r4,0(r2)
  8016d8:	01402034 	movhi	r5,128
  8016dc:	2945a904 	addi	r5,r5,5796
  8016e0:	08028d01 	jmpi	8028d0 <_fwalk>

008016e4 <_cleanup_r>:
  8016e4:	01402034 	movhi	r5,128
  8016e8:	29448b04 	addi	r5,r5,4652
  8016ec:	08028d01 	jmpi	8028d0 <_fwalk>

008016f0 <_cleanup>:
  8016f0:	00802074 	movhi	r2,129
  8016f4:	109c4504 	addi	r2,r2,28948
  8016f8:	11000017 	ldw	r4,0(r2)
  8016fc:	08016e41 	jmpi	8016e4 <_cleanup_r>

00801700 <__sfmoreglue>:
  801700:	defffc04 	addi	sp,sp,-16
  801704:	dc400115 	stw	r17,4(sp)
  801708:	2c401724 	muli	r17,r5,92
  80170c:	dc800215 	stw	r18,8(sp)
  801710:	2825883a 	mov	r18,r5
  801714:	89400304 	addi	r5,r17,12
  801718:	dc000015 	stw	r16,0(sp)
  80171c:	dfc00315 	stw	ra,12(sp)
  801720:	0802b1c0 	call	802b1c <_malloc_r>
  801724:	0021883a 	mov	r16,zero
  801728:	880d883a 	mov	r6,r17
  80172c:	000b883a 	mov	r5,zero
  801730:	10000626 	beq	r2,zero,80174c <__sfmoreglue+0x4c>
  801734:	11000304 	addi	r4,r2,12
  801738:	14800115 	stw	r18,4(r2)
  80173c:	10000015 	stw	zero,0(r2)
  801740:	11000215 	stw	r4,8(r2)
  801744:	1021883a 	mov	r16,r2
  801748:	08034c00 	call	8034c0 <memset>
  80174c:	8005883a 	mov	r2,r16
  801750:	dfc00317 	ldw	ra,12(sp)
  801754:	dc800217 	ldw	r18,8(sp)
  801758:	dc400117 	ldw	r17,4(sp)
  80175c:	dc000017 	ldw	r16,0(sp)
  801760:	dec00404 	addi	sp,sp,16
  801764:	f800283a 	ret

00801768 <__sfp>:
  801768:	defffd04 	addi	sp,sp,-12
  80176c:	00802074 	movhi	r2,129
  801770:	109c4504 	addi	r2,r2,28948
  801774:	dc000015 	stw	r16,0(sp)
  801778:	14000017 	ldw	r16,0(r2)
  80177c:	dc400115 	stw	r17,4(sp)
  801780:	dfc00215 	stw	ra,8(sp)
  801784:	80800e17 	ldw	r2,56(r16)
  801788:	2023883a 	mov	r17,r4
  80178c:	10002626 	beq	r2,zero,801828 <__sfp+0xc0>
  801790:	8400b804 	addi	r16,r16,736
  801794:	80800117 	ldw	r2,4(r16)
  801798:	81000217 	ldw	r4,8(r16)
  80179c:	10ffffc4 	addi	r3,r2,-1
  8017a0:	18000916 	blt	r3,zero,8017c8 <__sfp+0x60>
  8017a4:	2080030f 	ldh	r2,12(r4)
  8017a8:	10000b26 	beq	r2,zero,8017d8 <__sfp+0x70>
  8017ac:	017fffc4 	movi	r5,-1
  8017b0:	00000206 	br	8017bc <__sfp+0x54>
  8017b4:	2080030f 	ldh	r2,12(r4)
  8017b8:	10000726 	beq	r2,zero,8017d8 <__sfp+0x70>
  8017bc:	18ffffc4 	addi	r3,r3,-1
  8017c0:	21001704 	addi	r4,r4,92
  8017c4:	197ffb1e 	bne	r3,r5,8017b4 <__sfp+0x4c>
  8017c8:	80800017 	ldw	r2,0(r16)
  8017cc:	10001926 	beq	r2,zero,801834 <__sfp+0xcc>
  8017d0:	1021883a 	mov	r16,r2
  8017d4:	003fef06 	br	801794 <__sfp+0x2c>
  8017d8:	00bfffc4 	movi	r2,-1
  8017dc:	00c00044 	movi	r3,1
  8017e0:	2080038d 	sth	r2,14(r4)
  8017e4:	20c0030d 	sth	r3,12(r4)
  8017e8:	20000015 	stw	zero,0(r4)
  8017ec:	20000215 	stw	zero,8(r4)
  8017f0:	20000115 	stw	zero,4(r4)
  8017f4:	20000415 	stw	zero,16(r4)
  8017f8:	20000515 	stw	zero,20(r4)
  8017fc:	20000615 	stw	zero,24(r4)
  801800:	20000c15 	stw	zero,48(r4)
  801804:	20000d15 	stw	zero,52(r4)
  801808:	20001115 	stw	zero,68(r4)
  80180c:	20001215 	stw	zero,72(r4)
  801810:	2005883a 	mov	r2,r4
  801814:	dfc00217 	ldw	ra,8(sp)
  801818:	dc400117 	ldw	r17,4(sp)
  80181c:	dc000017 	ldw	r16,0(sp)
  801820:	dec00304 	addi	sp,sp,12
  801824:	f800283a 	ret
  801828:	8009883a 	mov	r4,r16
  80182c:	08016000 	call	801600 <__sinit>
  801830:	003fd706 	br	801790 <__sfp+0x28>
  801834:	8809883a 	mov	r4,r17
  801838:	01400104 	movi	r5,4
  80183c:	08017000 	call	801700 <__sfmoreglue>
  801840:	80800015 	stw	r2,0(r16)
  801844:	103fe21e 	bne	r2,zero,8017d0 <__sfp+0x68>
  801848:	00800304 	movi	r2,12
  80184c:	0009883a 	mov	r4,zero
  801850:	88800015 	stw	r2,0(r17)
  801854:	003fee06 	br	801810 <__sfp+0xa8>

00801858 <_fopen_r>:
  801858:	defffa04 	addi	sp,sp,-24
  80185c:	dcc00415 	stw	r19,16(sp)
  801860:	2827883a 	mov	r19,r5
  801864:	300b883a 	mov	r5,r6
  801868:	d80d883a 	mov	r6,sp
  80186c:	dc800315 	stw	r18,12(sp)
  801870:	dc400215 	stw	r17,8(sp)
  801874:	dc000115 	stw	r16,4(sp)
  801878:	dfc00515 	stw	ra,20(sp)
  80187c:	2021883a 	mov	r16,r4
  801880:	08093e00 	call	8093e0 <__sflags>
  801884:	1025883a 	mov	r18,r2
  801888:	8009883a 	mov	r4,r16
  80188c:	0023883a 	mov	r17,zero
  801890:	1000081e 	bne	r2,zero,8018b4 <_fopen_r+0x5c>
  801894:	8805883a 	mov	r2,r17
  801898:	dfc00517 	ldw	ra,20(sp)
  80189c:	dcc00417 	ldw	r19,16(sp)
  8018a0:	dc800317 	ldw	r18,12(sp)
  8018a4:	dc400217 	ldw	r17,8(sp)
  8018a8:	dc000117 	ldw	r16,4(sp)
  8018ac:	dec00604 	addi	sp,sp,24
  8018b0:	f800283a 	ret
  8018b4:	08017680 	call	801768 <__sfp>
  8018b8:	1023883a 	mov	r17,r2
  8018bc:	980b883a 	mov	r5,r19
  8018c0:	8009883a 	mov	r4,r16
  8018c4:	01c06d84 	movi	r7,438
  8018c8:	103ff226 	beq	r2,zero,801894 <_fopen_r+0x3c>
  8018cc:	d9800017 	ldw	r6,0(sp)
  8018d0:	08035580 	call	803558 <_open_r>
  8018d4:	10001816 	blt	r2,zero,801938 <_fopen_r+0xe0>
  8018d8:	00c02034 	movhi	r3,128
  8018dc:	18d07e04 	addi	r3,r3,16888
  8018e0:	923fffcc 	andi	r8,r18,65535
  8018e4:	8880038d 	sth	r2,14(r17)
  8018e8:	00802034 	movhi	r2,128
  8018ec:	10909d04 	addi	r2,r2,17012
  8018f0:	88800815 	stw	r2,32(r17)
  8018f4:	88c00915 	stw	r3,36(r17)
  8018f8:	00802034 	movhi	r2,128
  8018fc:	10906404 	addi	r2,r2,16784
  801900:	00c02034 	movhi	r3,128
  801904:	18d06204 	addi	r3,r3,16776
  801908:	4200400c 	andi	r8,r8,256
  80190c:	8c80030d 	sth	r18,12(r17)
  801910:	8009883a 	mov	r4,r16
  801914:	880b883a 	mov	r5,r17
  801918:	000d883a 	mov	r6,zero
  80191c:	01c00084 	movi	r7,2
  801920:	88800a15 	stw	r2,40(r17)
  801924:	88c00b15 	stw	r3,44(r17)
  801928:	8c400715 	stw	r17,28(r17)
  80192c:	403fd926 	beq	r8,zero,801894 <_fopen_r+0x3c>
  801930:	0801e980 	call	801e98 <_fseek_r>
  801934:	003fd706 	br	801894 <_fopen_r+0x3c>
  801938:	08015f00 	call	8015f0 <__sfp_lock_acquire>
  80193c:	8800030d 	sth	zero,12(r17)
  801940:	08015f40 	call	8015f4 <__sfp_lock_release>
  801944:	0023883a 	mov	r17,zero
  801948:	003fd206 	br	801894 <_fopen_r+0x3c>

0080194c <fopen>:
  80194c:	01802074 	movhi	r6,129
  801950:	319c4404 	addi	r6,r6,28944
  801954:	2007883a 	mov	r3,r4
  801958:	31000017 	ldw	r4,0(r6)
  80195c:	280d883a 	mov	r6,r5
  801960:	180b883a 	mov	r5,r3
  801964:	08018581 	jmpi	801858 <_fopen_r>

00801968 <fprintf>:
  801968:	defffc04 	addi	sp,sp,-16
  80196c:	dfc00115 	stw	ra,4(sp)
  801970:	d9800215 	stw	r6,8(sp)
  801974:	d9c00315 	stw	r7,12(sp)
  801978:	d8800204 	addi	r2,sp,8
  80197c:	100d883a 	mov	r6,r2
  801980:	d8800015 	stw	r2,0(sp)
  801984:	080624c0 	call	80624c <__vfprintf_internal>
  801988:	dfc00117 	ldw	ra,4(sp)
  80198c:	dec00404 	addi	sp,sp,16
  801990:	f800283a 	ret

00801994 <_fprintf_r>:
  801994:	defffd04 	addi	sp,sp,-12
  801998:	2807883a 	mov	r3,r5
  80199c:	dfc00115 	stw	ra,4(sp)
  8019a0:	d9c00215 	stw	r7,8(sp)
  8019a4:	d8800204 	addi	r2,sp,8
  8019a8:	300b883a 	mov	r5,r6
  8019ac:	1809883a 	mov	r4,r3
  8019b0:	100d883a 	mov	r6,r2
  8019b4:	d8800015 	stw	r2,0(sp)
  8019b8:	080624c0 	call	80624c <__vfprintf_internal>
  8019bc:	dfc00117 	ldw	ra,4(sp)
  8019c0:	dec00304 	addi	sp,sp,12
  8019c4:	f800283a 	ret

008019c8 <_fputs_r>:
  8019c8:	defff804 	addi	sp,sp,-32
  8019cc:	dc000515 	stw	r16,20(sp)
  8019d0:	2021883a 	mov	r16,r4
  8019d4:	2809883a 	mov	r4,r5
  8019d8:	dc400615 	stw	r17,24(sp)
  8019dc:	dfc00715 	stw	ra,28(sp)
  8019e0:	3023883a 	mov	r17,r6
  8019e4:	d9400015 	stw	r5,0(sp)
  8019e8:	08042d40 	call	8042d4 <strlen>
  8019ec:	00c00044 	movi	r3,1
  8019f0:	d8800115 	stw	r2,4(sp)
  8019f4:	d8c00315 	stw	r3,12(sp)
  8019f8:	d8800415 	stw	r2,16(sp)
  8019fc:	dec00215 	stw	sp,8(sp)
  801a00:	80000326 	beq	r16,zero,801a10 <_fputs_r+0x48>
  801a04:	80800e17 	ldw	r2,56(r16)
  801a08:	8009883a 	mov	r4,r16
  801a0c:	10000926 	beq	r2,zero,801a34 <_fputs_r+0x6c>
  801a10:	8009883a 	mov	r4,r16
  801a14:	880b883a 	mov	r5,r17
  801a18:	d9800204 	addi	r6,sp,8
  801a1c:	080236c0 	call	80236c <__sfvwrite_r>
  801a20:	dfc00717 	ldw	ra,28(sp)
  801a24:	dc400617 	ldw	r17,24(sp)
  801a28:	dc000517 	ldw	r16,20(sp)
  801a2c:	dec00804 	addi	sp,sp,32
  801a30:	f800283a 	ret
  801a34:	08016000 	call	801600 <__sinit>
  801a38:	003ff506 	br	801a10 <_fputs_r+0x48>

00801a3c <fputs>:
  801a3c:	01802074 	movhi	r6,129
  801a40:	319c4404 	addi	r6,r6,28944
  801a44:	2007883a 	mov	r3,r4
  801a48:	31000017 	ldw	r4,0(r6)
  801a4c:	280d883a 	mov	r6,r5
  801a50:	180b883a 	mov	r5,r3
  801a54:	08019c81 	jmpi	8019c8 <_fputs_r>

00801a58 <_malloc_trim_r>:
  801a58:	defffb04 	addi	sp,sp,-20
  801a5c:	dcc00315 	stw	r19,12(sp)
  801a60:	04c02074 	movhi	r19,129
  801a64:	9cd63604 	addi	r19,r19,22744
  801a68:	dc800215 	stw	r18,8(sp)
  801a6c:	dc400115 	stw	r17,4(sp)
  801a70:	dc000015 	stw	r16,0(sp)
  801a74:	2823883a 	mov	r17,r5
  801a78:	2025883a 	mov	r18,r4
  801a7c:	dfc00415 	stw	ra,16(sp)
  801a80:	0810fc00 	call	810fc0 <__malloc_lock>
  801a84:	98800217 	ldw	r2,8(r19)
  801a88:	9009883a 	mov	r4,r18
  801a8c:	000b883a 	mov	r5,zero
  801a90:	10c00117 	ldw	r3,4(r2)
  801a94:	00bfff04 	movi	r2,-4
  801a98:	18a0703a 	and	r16,r3,r2
  801a9c:	8463c83a 	sub	r17,r16,r17
  801aa0:	8c43fbc4 	addi	r17,r17,4079
  801aa4:	8822d33a 	srli	r17,r17,12
  801aa8:	0083ffc4 	movi	r2,4095
  801aac:	8c7fffc4 	addi	r17,r17,-1
  801ab0:	8822933a 	slli	r17,r17,12
  801ab4:	1440060e 	bge	r2,r17,801ad0 <_malloc_trim_r+0x78>
  801ab8:	0803f300 	call	803f30 <_sbrk_r>
  801abc:	98c00217 	ldw	r3,8(r19)
  801ac0:	9009883a 	mov	r4,r18
  801ac4:	044bc83a 	sub	r5,zero,r17
  801ac8:	80c7883a 	add	r3,r16,r3
  801acc:	10c00926 	beq	r2,r3,801af4 <_malloc_trim_r+0x9c>
  801ad0:	0810fe00 	call	810fe0 <__malloc_unlock>
  801ad4:	0005883a 	mov	r2,zero
  801ad8:	dfc00417 	ldw	ra,16(sp)
  801adc:	dcc00317 	ldw	r19,12(sp)
  801ae0:	dc800217 	ldw	r18,8(sp)
  801ae4:	dc400117 	ldw	r17,4(sp)
  801ae8:	dc000017 	ldw	r16,0(sp)
  801aec:	dec00504 	addi	sp,sp,20
  801af0:	f800283a 	ret
  801af4:	9009883a 	mov	r4,r18
  801af8:	0803f300 	call	803f30 <_sbrk_r>
  801afc:	844dc83a 	sub	r6,r16,r17
  801b00:	00ffffc4 	movi	r3,-1
  801b04:	9009883a 	mov	r4,r18
  801b08:	000b883a 	mov	r5,zero
  801b0c:	01c020b4 	movhi	r7,130
  801b10:	39e3b904 	addi	r7,r7,-28956
  801b14:	31800054 	ori	r6,r6,1
  801b18:	10c00926 	beq	r2,r3,801b40 <_malloc_trim_r+0xe8>
  801b1c:	38800017 	ldw	r2,0(r7)
  801b20:	98c00217 	ldw	r3,8(r19)
  801b24:	9009883a 	mov	r4,r18
  801b28:	1445c83a 	sub	r2,r2,r17
  801b2c:	38800015 	stw	r2,0(r7)
  801b30:	19800115 	stw	r6,4(r3)
  801b34:	0810fe00 	call	810fe0 <__malloc_unlock>
  801b38:	00800044 	movi	r2,1
  801b3c:	003fe606 	br	801ad8 <_malloc_trim_r+0x80>
  801b40:	0803f300 	call	803f30 <_sbrk_r>
  801b44:	99800217 	ldw	r6,8(r19)
  801b48:	100f883a 	mov	r7,r2
  801b4c:	9009883a 	mov	r4,r18
  801b50:	1187c83a 	sub	r3,r2,r6
  801b54:	008003c4 	movi	r2,15
  801b58:	19400054 	ori	r5,r3,1
  801b5c:	10ffdc0e 	bge	r2,r3,801ad0 <_malloc_trim_r+0x78>
  801b60:	00802074 	movhi	r2,129
  801b64:	109c4704 	addi	r2,r2,28956
  801b68:	10c00017 	ldw	r3,0(r2)
  801b6c:	008020b4 	movhi	r2,130
  801b70:	10a3b904 	addi	r2,r2,-28956
  801b74:	31400115 	stw	r5,4(r6)
  801b78:	38c7c83a 	sub	r3,r7,r3
  801b7c:	10c00015 	stw	r3,0(r2)
  801b80:	003fd306 	br	801ad0 <_malloc_trim_r+0x78>

00801b84 <_free_r>:
  801b84:	defffd04 	addi	sp,sp,-12
  801b88:	dc400115 	stw	r17,4(sp)
  801b8c:	dc000015 	stw	r16,0(sp)
  801b90:	dfc00215 	stw	ra,8(sp)
  801b94:	2821883a 	mov	r16,r5
  801b98:	2023883a 	mov	r17,r4
  801b9c:	28005a26 	beq	r5,zero,801d08 <_free_r+0x184>
  801ba0:	0810fc00 	call	810fc0 <__malloc_lock>
  801ba4:	823ffe04 	addi	r8,r16,-8
  801ba8:	41400117 	ldw	r5,4(r8)
  801bac:	00bfff84 	movi	r2,-2
  801bb0:	02802074 	movhi	r10,129
  801bb4:	52963604 	addi	r10,r10,22744
  801bb8:	288e703a 	and	r7,r5,r2
  801bbc:	41cd883a 	add	r6,r8,r7
  801bc0:	30c00117 	ldw	r3,4(r6)
  801bc4:	51000217 	ldw	r4,8(r10)
  801bc8:	00bfff04 	movi	r2,-4
  801bcc:	1892703a 	and	r9,r3,r2
  801bd0:	5017883a 	mov	r11,r10
  801bd4:	31006726 	beq	r6,r4,801d74 <_free_r+0x1f0>
  801bd8:	2880004c 	andi	r2,r5,1
  801bdc:	1005003a 	cmpeq	r2,r2,zero
  801be0:	32400115 	stw	r9,4(r6)
  801be4:	10001a1e 	bne	r2,zero,801c50 <_free_r+0xcc>
  801be8:	000b883a 	mov	r5,zero
  801bec:	3247883a 	add	r3,r6,r9
  801bf0:	18800117 	ldw	r2,4(r3)
  801bf4:	1080004c 	andi	r2,r2,1
  801bf8:	1000231e 	bne	r2,zero,801c88 <_free_r+0x104>
  801bfc:	280ac03a 	cmpne	r5,r5,zero
  801c00:	3a4f883a 	add	r7,r7,r9
  801c04:	2800451e 	bne	r5,zero,801d1c <_free_r+0x198>
  801c08:	31000217 	ldw	r4,8(r6)
  801c0c:	00802074 	movhi	r2,129
  801c10:	10963804 	addi	r2,r2,22752
  801c14:	20807b26 	beq	r4,r2,801e04 <_free_r+0x280>
  801c18:	30800317 	ldw	r2,12(r6)
  801c1c:	3a07883a 	add	r3,r7,r8
  801c20:	19c00015 	stw	r7,0(r3)
  801c24:	11000215 	stw	r4,8(r2)
  801c28:	20800315 	stw	r2,12(r4)
  801c2c:	38800054 	ori	r2,r7,1
  801c30:	40800115 	stw	r2,4(r8)
  801c34:	28001a26 	beq	r5,zero,801ca0 <_free_r+0x11c>
  801c38:	8809883a 	mov	r4,r17
  801c3c:	dfc00217 	ldw	ra,8(sp)
  801c40:	dc400117 	ldw	r17,4(sp)
  801c44:	dc000017 	ldw	r16,0(sp)
  801c48:	dec00304 	addi	sp,sp,12
  801c4c:	0810fe01 	jmpi	810fe0 <__malloc_unlock>
  801c50:	80bffe17 	ldw	r2,-8(r16)
  801c54:	50c00204 	addi	r3,r10,8
  801c58:	4091c83a 	sub	r8,r8,r2
  801c5c:	41000217 	ldw	r4,8(r8)
  801c60:	388f883a 	add	r7,r7,r2
  801c64:	20c06126 	beq	r4,r3,801dec <_free_r+0x268>
  801c68:	40800317 	ldw	r2,12(r8)
  801c6c:	3247883a 	add	r3,r6,r9
  801c70:	000b883a 	mov	r5,zero
  801c74:	11000215 	stw	r4,8(r2)
  801c78:	20800315 	stw	r2,12(r4)
  801c7c:	18800117 	ldw	r2,4(r3)
  801c80:	1080004c 	andi	r2,r2,1
  801c84:	103fdd26 	beq	r2,zero,801bfc <_free_r+0x78>
  801c88:	38800054 	ori	r2,r7,1
  801c8c:	3a07883a 	add	r3,r7,r8
  801c90:	280ac03a 	cmpne	r5,r5,zero
  801c94:	40800115 	stw	r2,4(r8)
  801c98:	19c00015 	stw	r7,0(r3)
  801c9c:	283fe61e 	bne	r5,zero,801c38 <_free_r+0xb4>
  801ca0:	00807fc4 	movi	r2,511
  801ca4:	11c01f2e 	bgeu	r2,r7,801d24 <_free_r+0x1a0>
  801ca8:	3806d27a 	srli	r3,r7,9
  801cac:	1800481e 	bne	r3,zero,801dd0 <_free_r+0x24c>
  801cb0:	3804d0fa 	srli	r2,r7,3
  801cb4:	100690fa 	slli	r3,r2,3
  801cb8:	1acd883a 	add	r6,r3,r11
  801cbc:	31400217 	ldw	r5,8(r6)
  801cc0:	31405926 	beq	r6,r5,801e28 <_free_r+0x2a4>
  801cc4:	28800117 	ldw	r2,4(r5)
  801cc8:	00ffff04 	movi	r3,-4
  801ccc:	10c4703a 	and	r2,r2,r3
  801cd0:	3880022e 	bgeu	r7,r2,801cdc <_free_r+0x158>
  801cd4:	29400217 	ldw	r5,8(r5)
  801cd8:	317ffa1e 	bne	r6,r5,801cc4 <_free_r+0x140>
  801cdc:	29800317 	ldw	r6,12(r5)
  801ce0:	41800315 	stw	r6,12(r8)
  801ce4:	41400215 	stw	r5,8(r8)
  801ce8:	8809883a 	mov	r4,r17
  801cec:	2a000315 	stw	r8,12(r5)
  801cf0:	32000215 	stw	r8,8(r6)
  801cf4:	dfc00217 	ldw	ra,8(sp)
  801cf8:	dc400117 	ldw	r17,4(sp)
  801cfc:	dc000017 	ldw	r16,0(sp)
  801d00:	dec00304 	addi	sp,sp,12
  801d04:	0810fe01 	jmpi	810fe0 <__malloc_unlock>
  801d08:	dfc00217 	ldw	ra,8(sp)
  801d0c:	dc400117 	ldw	r17,4(sp)
  801d10:	dc000017 	ldw	r16,0(sp)
  801d14:	dec00304 	addi	sp,sp,12
  801d18:	f800283a 	ret
  801d1c:	31000217 	ldw	r4,8(r6)
  801d20:	003fbd06 	br	801c18 <_free_r+0x94>
  801d24:	3806d0fa 	srli	r3,r7,3
  801d28:	00800044 	movi	r2,1
  801d2c:	51400117 	ldw	r5,4(r10)
  801d30:	180890fa 	slli	r4,r3,3
  801d34:	1807d0ba 	srai	r3,r3,2
  801d38:	22c9883a 	add	r4,r4,r11
  801d3c:	21800217 	ldw	r6,8(r4)
  801d40:	10c4983a 	sll	r2,r2,r3
  801d44:	41000315 	stw	r4,12(r8)
  801d48:	41800215 	stw	r6,8(r8)
  801d4c:	288ab03a 	or	r5,r5,r2
  801d50:	22000215 	stw	r8,8(r4)
  801d54:	8809883a 	mov	r4,r17
  801d58:	51400115 	stw	r5,4(r10)
  801d5c:	32000315 	stw	r8,12(r6)
  801d60:	dfc00217 	ldw	ra,8(sp)
  801d64:	dc400117 	ldw	r17,4(sp)
  801d68:	dc000017 	ldw	r16,0(sp)
  801d6c:	dec00304 	addi	sp,sp,12
  801d70:	0810fe01 	jmpi	810fe0 <__malloc_unlock>
  801d74:	2880004c 	andi	r2,r5,1
  801d78:	3a4d883a 	add	r6,r7,r9
  801d7c:	1000071e 	bne	r2,zero,801d9c <_free_r+0x218>
  801d80:	80bffe17 	ldw	r2,-8(r16)
  801d84:	4091c83a 	sub	r8,r8,r2
  801d88:	41000317 	ldw	r4,12(r8)
  801d8c:	40c00217 	ldw	r3,8(r8)
  801d90:	308d883a 	add	r6,r6,r2
  801d94:	20c00215 	stw	r3,8(r4)
  801d98:	19000315 	stw	r4,12(r3)
  801d9c:	00802074 	movhi	r2,129
  801da0:	109c4604 	addi	r2,r2,28952
  801da4:	11000017 	ldw	r4,0(r2)
  801da8:	30c00054 	ori	r3,r6,1
  801dac:	52000215 	stw	r8,8(r10)
  801db0:	40c00115 	stw	r3,4(r8)
  801db4:	313fa036 	bltu	r6,r4,801c38 <_free_r+0xb4>
  801db8:	008020b4 	movhi	r2,130
  801dbc:	10a39e04 	addi	r2,r2,-29064
  801dc0:	11400017 	ldw	r5,0(r2)
  801dc4:	8809883a 	mov	r4,r17
  801dc8:	0801a580 	call	801a58 <_malloc_trim_r>
  801dcc:	003f9a06 	br	801c38 <_free_r+0xb4>
  801dd0:	00800104 	movi	r2,4
  801dd4:	10c0072e 	bgeu	r2,r3,801df4 <_free_r+0x270>
  801dd8:	00800504 	movi	r2,20
  801ddc:	10c01936 	bltu	r2,r3,801e44 <_free_r+0x2c0>
  801de0:	188016c4 	addi	r2,r3,91
  801de4:	100690fa 	slli	r3,r2,3
  801de8:	003fb306 	br	801cb8 <_free_r+0x134>
  801dec:	01400044 	movi	r5,1
  801df0:	003f7e06 	br	801bec <_free_r+0x68>
  801df4:	3804d1ba 	srli	r2,r7,6
  801df8:	10800e04 	addi	r2,r2,56
  801dfc:	100690fa 	slli	r3,r2,3
  801e00:	003fad06 	br	801cb8 <_free_r+0x134>
  801e04:	22000315 	stw	r8,12(r4)
  801e08:	22000215 	stw	r8,8(r4)
  801e0c:	3a05883a 	add	r2,r7,r8
  801e10:	38c00054 	ori	r3,r7,1
  801e14:	11c00015 	stw	r7,0(r2)
  801e18:	41000215 	stw	r4,8(r8)
  801e1c:	40c00115 	stw	r3,4(r8)
  801e20:	41000315 	stw	r4,12(r8)
  801e24:	003f8406 	br	801c38 <_free_r+0xb4>
  801e28:	1005d0ba 	srai	r2,r2,2
  801e2c:	00c00044 	movi	r3,1
  801e30:	51000117 	ldw	r4,4(r10)
  801e34:	1886983a 	sll	r3,r3,r2
  801e38:	20c8b03a 	or	r4,r4,r3
  801e3c:	51000115 	stw	r4,4(r10)
  801e40:	003fa706 	br	801ce0 <_free_r+0x15c>
  801e44:	00801504 	movi	r2,84
  801e48:	10c00436 	bltu	r2,r3,801e5c <_free_r+0x2d8>
  801e4c:	3804d33a 	srli	r2,r7,12
  801e50:	10801b84 	addi	r2,r2,110
  801e54:	100690fa 	slli	r3,r2,3
  801e58:	003f9706 	br	801cb8 <_free_r+0x134>
  801e5c:	00805504 	movi	r2,340
  801e60:	10c00436 	bltu	r2,r3,801e74 <_free_r+0x2f0>
  801e64:	3804d3fa 	srli	r2,r7,15
  801e68:	10801dc4 	addi	r2,r2,119
  801e6c:	100690fa 	slli	r3,r2,3
  801e70:	003f9106 	br	801cb8 <_free_r+0x134>
  801e74:	00815504 	movi	r2,1364
  801e78:	10c0032e 	bgeu	r2,r3,801e88 <_free_r+0x304>
  801e7c:	00801f84 	movi	r2,126
  801e80:	00c0fc04 	movi	r3,1008
  801e84:	003f8c06 	br	801cb8 <_free_r+0x134>
  801e88:	3804d4ba 	srli	r2,r7,18
  801e8c:	10801f04 	addi	r2,r2,124
  801e90:	100690fa 	slli	r3,r2,3
  801e94:	003f8806 	br	801cb8 <_free_r+0x134>

00801e98 <_fseek_r>:
  801e98:	deffe804 	addi	sp,sp,-96
  801e9c:	dd801515 	stw	r22,84(sp)
  801ea0:	dcc01215 	stw	r19,72(sp)
  801ea4:	dc801115 	stw	r18,68(sp)
  801ea8:	dc000f15 	stw	r16,60(sp)
  801eac:	dfc01715 	stw	ra,92(sp)
  801eb0:	ddc01615 	stw	r23,88(sp)
  801eb4:	dd401415 	stw	r21,80(sp)
  801eb8:	dd001315 	stw	r20,76(sp)
  801ebc:	dc401015 	stw	r17,64(sp)
  801ec0:	2025883a 	mov	r18,r4
  801ec4:	2821883a 	mov	r16,r5
  801ec8:	302d883a 	mov	r22,r6
  801ecc:	3827883a 	mov	r19,r7
  801ed0:	20000226 	beq	r4,zero,801edc <_fseek_r+0x44>
  801ed4:	20800e17 	ldw	r2,56(r4)
  801ed8:	10007826 	beq	r2,zero,8020bc <_fseek_r+0x224>
  801edc:	8080030b 	ldhu	r2,12(r16)
  801ee0:	00c04204 	movi	r3,264
  801ee4:	1080420c 	andi	r2,r2,264
  801ee8:	10c07926 	beq	r2,r3,8020d0 <_fseek_r+0x238>
  801eec:	85400a17 	ldw	r21,40(r16)
  801ef0:	a800ea26 	beq	r21,zero,80229c <_fseek_r+0x404>
  801ef4:	00800044 	movi	r2,1
  801ef8:	98805f26 	beq	r19,r2,802078 <_fseek_r+0x1e0>
  801efc:	00800084 	movi	r2,2
  801f00:	98801026 	beq	r19,r2,801f44 <_fseek_r+0xac>
  801f04:	98000f26 	beq	r19,zero,801f44 <_fseek_r+0xac>
  801f08:	00800584 	movi	r2,22
  801f0c:	013fffc4 	movi	r4,-1
  801f10:	90800015 	stw	r2,0(r18)
  801f14:	2005883a 	mov	r2,r4
  801f18:	dfc01717 	ldw	ra,92(sp)
  801f1c:	ddc01617 	ldw	r23,88(sp)
  801f20:	dd801517 	ldw	r22,84(sp)
  801f24:	dd401417 	ldw	r21,80(sp)
  801f28:	dd001317 	ldw	r20,76(sp)
  801f2c:	dcc01217 	ldw	r19,72(sp)
  801f30:	dc801117 	ldw	r18,68(sp)
  801f34:	dc401017 	ldw	r17,64(sp)
  801f38:	dc000f17 	ldw	r16,60(sp)
  801f3c:	dec01804 	addi	sp,sp,96
  801f40:	f800283a 	ret
  801f44:	81800417 	ldw	r6,16(r16)
  801f48:	0023883a 	mov	r17,zero
  801f4c:	002f883a 	mov	r23,zero
  801f50:	3000a626 	beq	r6,zero,8021ec <_fseek_r+0x354>
  801f54:	8100030b 	ldhu	r4,12(r16)
  801f58:	2082068c 	andi	r2,r4,2074
  801f5c:	1000081e 	bne	r2,zero,801f80 <_fseek_r+0xe8>
  801f60:	2081000c 	andi	r2,r4,1024
  801f64:	10001b1e 	bne	r2,zero,801fd4 <_fseek_r+0x13c>
  801f68:	00802034 	movhi	r2,128
  801f6c:	10906404 	addi	r2,r2,16784
  801f70:	a8800926 	beq	r21,r2,801f98 <_fseek_r+0x100>
  801f74:	8080030b 	ldhu	r2,12(r16)
  801f78:	10820014 	ori	r2,r2,2048
  801f7c:	8080030d 	sth	r2,12(r16)
  801f80:	9009883a 	mov	r4,r18
  801f84:	800b883a 	mov	r5,r16
  801f88:	08012400 	call	801240 <_fflush_r>
  801f8c:	1000a326 	beq	r2,zero,80221c <_fseek_r+0x384>
  801f90:	013fffc4 	movi	r4,-1
  801f94:	003fdf06 	br	801f14 <_fseek_r+0x7c>
  801f98:	8140038f 	ldh	r5,14(r16)
  801f9c:	283ff516 	blt	r5,zero,801f74 <_fseek_r+0xdc>
  801fa0:	9009883a 	mov	r4,r18
  801fa4:	d80d883a 	mov	r6,sp
  801fa8:	08022f80 	call	8022f8 <_fstat_r>
  801fac:	103ff11e 	bne	r2,zero,801f74 <_fseek_r+0xdc>
  801fb0:	d8800117 	ldw	r2,4(sp)
  801fb4:	00e00014 	movui	r3,32768
  801fb8:	10bc000c 	andi	r2,r2,61440
  801fbc:	10ffed1e 	bne	r2,r3,801f74 <_fseek_r+0xdc>
  801fc0:	80c0030b 	ldhu	r3,12(r16)
  801fc4:	00810004 	movi	r2,1024
  801fc8:	80801315 	stw	r2,76(r16)
  801fcc:	1886b03a 	or	r3,r3,r2
  801fd0:	80c0030d 	sth	r3,12(r16)
  801fd4:	9800701e 	bne	r19,zero,802198 <_fseek_r+0x300>
  801fd8:	b029883a 	mov	r20,r22
  801fdc:	b804c03a 	cmpne	r2,r23,zero
  801fe0:	10003f1e 	bne	r2,zero,8020e0 <_fseek_r+0x248>
  801fe4:	8100030b 	ldhu	r4,12(r16)
  801fe8:	2084000c 	andi	r2,r4,4096
  801fec:	1000a126 	beq	r2,zero,802274 <_fseek_r+0x3dc>
  801ff0:	81801417 	ldw	r6,80(r16)
  801ff4:	80c00117 	ldw	r3,4(r16)
  801ff8:	81400c17 	ldw	r5,48(r16)
  801ffc:	30e3c83a 	sub	r17,r6,r3
  802000:	28008026 	beq	r5,zero,802204 <_fseek_r+0x36c>
  802004:	81c00f17 	ldw	r7,60(r16)
  802008:	89e3c83a 	sub	r17,r17,r7
  80200c:	80800e17 	ldw	r2,56(r16)
  802010:	81800417 	ldw	r6,16(r16)
  802014:	88c7883a 	add	r3,r17,r3
  802018:	1185c83a 	sub	r2,r2,r6
  80201c:	11cf883a 	add	r7,r2,r7
  802020:	1887c83a 	sub	r3,r3,r2
  802024:	2088000c 	andi	r2,r4,8192
  802028:	10003e1e 	bne	r2,zero,802124 <_fseek_r+0x28c>
  80202c:	a0c03d16 	blt	r20,r3,802124 <_fseek_r+0x28c>
  802030:	38c5883a 	add	r2,r7,r3
  802034:	a0803b2e 	bgeu	r20,r2,802124 <_fseek_r+0x28c>
  802038:	a0c5c83a 	sub	r2,r20,r3
  80203c:	3887c83a 	sub	r3,r7,r2
  802040:	3085883a 	add	r2,r6,r2
  802044:	80800015 	stw	r2,0(r16)
  802048:	80c00115 	stw	r3,4(r16)
  80204c:	28000526 	beq	r5,zero,802064 <_fseek_r+0x1cc>
  802050:	80801004 	addi	r2,r16,64
  802054:	28800226 	beq	r5,r2,802060 <_fseek_r+0x1c8>
  802058:	9009883a 	mov	r4,r18
  80205c:	0801b840 	call	801b84 <_free_r>
  802060:	80000c15 	stw	zero,48(r16)
  802064:	8080030b 	ldhu	r2,12(r16)
  802068:	0009883a 	mov	r4,zero
  80206c:	10bff7cc 	andi	r2,r2,65503
  802070:	8080030d 	sth	r2,12(r16)
  802074:	003fa706 	br	801f14 <_fseek_r+0x7c>
  802078:	9009883a 	mov	r4,r18
  80207c:	800b883a 	mov	r5,r16
  802080:	08012400 	call	801240 <_fflush_r>
  802084:	8100030b 	ldhu	r4,12(r16)
  802088:	2084000c 	andi	r2,r4,4096
  80208c:	10008726 	beq	r2,zero,8022ac <_fseek_r+0x414>
  802090:	84401417 	ldw	r17,80(r16)
  802094:	2080010c 	andi	r2,r4,4
  802098:	1000171e 	bne	r2,zero,8020f8 <_fseek_r+0x260>
  80209c:	2080020c 	andi	r2,r4,8
  8020a0:	10003b26 	beq	r2,zero,802190 <_fseek_r+0x2f8>
  8020a4:	80800017 	ldw	r2,0(r16)
  8020a8:	10003926 	beq	r2,zero,802190 <_fseek_r+0x2f8>
  8020ac:	81800417 	ldw	r6,16(r16)
  8020b0:	1185c83a 	sub	r2,r2,r6
  8020b4:	88a3883a 	add	r17,r17,r2
  8020b8:	00001606 	br	802114 <_fseek_r+0x27c>
  8020bc:	08016000 	call	801600 <__sinit>
  8020c0:	8080030b 	ldhu	r2,12(r16)
  8020c4:	00c04204 	movi	r3,264
  8020c8:	1080420c 	andi	r2,r2,264
  8020cc:	10ff871e 	bne	r2,r3,801eec <_fseek_r+0x54>
  8020d0:	9009883a 	mov	r4,r18
  8020d4:	800b883a 	mov	r5,r16
  8020d8:	08012400 	call	801240 <_fflush_r>
  8020dc:	003f8306 	br	801eec <_fseek_r+0x54>
  8020e0:	81400c17 	ldw	r5,48(r16)
  8020e4:	28004526 	beq	r5,zero,8021fc <_fseek_r+0x364>
  8020e8:	8100030b 	ldhu	r4,12(r16)
  8020ec:	80c00117 	ldw	r3,4(r16)
  8020f0:	81c00f17 	ldw	r7,60(r16)
  8020f4:	003fc506 	br	80200c <_fseek_r+0x174>
  8020f8:	80c00117 	ldw	r3,4(r16)
  8020fc:	80800c17 	ldw	r2,48(r16)
  802100:	88e3c83a 	sub	r17,r17,r3
  802104:	10002226 	beq	r2,zero,802190 <_fseek_r+0x2f8>
  802108:	81c00f17 	ldw	r7,60(r16)
  80210c:	81800417 	ldw	r6,16(r16)
  802110:	89e3c83a 	sub	r17,r17,r7
  802114:	b46d883a 	add	r22,r22,r17
  802118:	0027883a 	mov	r19,zero
  80211c:	05c00044 	movi	r23,1
  802120:	003f8b06 	br	801f50 <_fseek_r+0xb8>
  802124:	80801317 	ldw	r2,76(r16)
  802128:	81400717 	ldw	r5,28(r16)
  80212c:	9009883a 	mov	r4,r18
  802130:	0085c83a 	sub	r2,zero,r2
  802134:	a0a2703a 	and	r17,r20,r2
  802138:	880d883a 	mov	r6,r17
  80213c:	000f883a 	mov	r7,zero
  802140:	a83ee83a 	callr	r21
  802144:	00ffffc4 	movi	r3,-1
  802148:	10ff8d26 	beq	r2,r3,801f80 <_fseek_r+0xe8>
  80214c:	80800417 	ldw	r2,16(r16)
  802150:	81400c17 	ldw	r5,48(r16)
  802154:	80000115 	stw	zero,4(r16)
  802158:	80800015 	stw	r2,0(r16)
  80215c:	28000526 	beq	r5,zero,802174 <_fseek_r+0x2dc>
  802160:	80801004 	addi	r2,r16,64
  802164:	28800226 	beq	r5,r2,802170 <_fseek_r+0x2d8>
  802168:	9009883a 	mov	r4,r18
  80216c:	0801b840 	call	801b84 <_free_r>
  802170:	80000c15 	stw	zero,48(r16)
  802174:	8080030b 	ldhu	r2,12(r16)
  802178:	a463c83a 	sub	r17,r20,r17
  80217c:	10bff7cc 	andi	r2,r2,65503
  802180:	8080030d 	sth	r2,12(r16)
  802184:	88000c1e 	bne	r17,zero,8021b8 <_fseek_r+0x320>
  802188:	0009883a 	mov	r4,zero
  80218c:	003f6106 	br	801f14 <_fseek_r+0x7c>
  802190:	81800417 	ldw	r6,16(r16)
  802194:	003fdf06 	br	802114 <_fseek_r+0x27c>
  802198:	8140038f 	ldh	r5,14(r16)
  80219c:	9009883a 	mov	r4,r18
  8021a0:	d80d883a 	mov	r6,sp
  8021a4:	08022f80 	call	8022f8 <_fstat_r>
  8021a8:	103f751e 	bne	r2,zero,801f80 <_fseek_r+0xe8>
  8021ac:	d8800417 	ldw	r2,16(sp)
  8021b0:	b0a9883a 	add	r20,r22,r2
  8021b4:	003f8906 	br	801fdc <_fseek_r+0x144>
  8021b8:	9009883a 	mov	r4,r18
  8021bc:	800b883a 	mov	r5,r16
  8021c0:	0803cf00 	call	803cf0 <__srefill_r>
  8021c4:	103f6e1e 	bne	r2,zero,801f80 <_fseek_r+0xe8>
  8021c8:	80c00117 	ldw	r3,4(r16)
  8021cc:	1c7f6c36 	bltu	r3,r17,801f80 <_fseek_r+0xe8>
  8021d0:	80800017 	ldw	r2,0(r16)
  8021d4:	1c47c83a 	sub	r3,r3,r17
  8021d8:	0009883a 	mov	r4,zero
  8021dc:	1445883a 	add	r2,r2,r17
  8021e0:	80c00115 	stw	r3,4(r16)
  8021e4:	80800015 	stw	r2,0(r16)
  8021e8:	003f4a06 	br	801f14 <_fseek_r+0x7c>
  8021ec:	9009883a 	mov	r4,r18
  8021f0:	800b883a 	mov	r5,r16
  8021f4:	08029880 	call	802988 <__smakebuf_r>
  8021f8:	003f5606 	br	801f54 <_fseek_r+0xbc>
  8021fc:	8100030b 	ldhu	r4,12(r16)
  802200:	80c00117 	ldw	r3,4(r16)
  802204:	80800017 	ldw	r2,0(r16)
  802208:	81800417 	ldw	r6,16(r16)
  80220c:	1185c83a 	sub	r2,r2,r6
  802210:	10cf883a 	add	r7,r2,r3
  802214:	8887c83a 	sub	r3,r17,r2
  802218:	003f8206 	br	802024 <_fseek_r+0x18c>
  80221c:	81400717 	ldw	r5,28(r16)
  802220:	b00d883a 	mov	r6,r22
  802224:	980f883a 	mov	r7,r19
  802228:	9009883a 	mov	r4,r18
  80222c:	a83ee83a 	callr	r21
  802230:	00ffffc4 	movi	r3,-1
  802234:	10ff5626 	beq	r2,r3,801f90 <_fseek_r+0xf8>
  802238:	81400c17 	ldw	r5,48(r16)
  80223c:	28000526 	beq	r5,zero,802254 <_fseek_r+0x3bc>
  802240:	80801004 	addi	r2,r16,64
  802244:	28800226 	beq	r5,r2,802250 <_fseek_r+0x3b8>
  802248:	9009883a 	mov	r4,r18
  80224c:	0801b840 	call	801b84 <_free_r>
  802250:	80000c15 	stw	zero,48(r16)
  802254:	8080030b 	ldhu	r2,12(r16)
  802258:	80c00417 	ldw	r3,16(r16)
  80225c:	0009883a 	mov	r4,zero
  802260:	10bdf7cc 	andi	r2,r2,63455
  802264:	8080030d 	sth	r2,12(r16)
  802268:	80c00015 	stw	r3,0(r16)
  80226c:	80000115 	stw	zero,4(r16)
  802270:	003f2806 	br	801f14 <_fseek_r+0x7c>
  802274:	81400717 	ldw	r5,28(r16)
  802278:	000d883a 	mov	r6,zero
  80227c:	9009883a 	mov	r4,r18
  802280:	01c00044 	movi	r7,1
  802284:	a83ee83a 	callr	r21
  802288:	100d883a 	mov	r6,r2
  80228c:	00bfffc4 	movi	r2,-1
  802290:	30bf3b26 	beq	r6,r2,801f80 <_fseek_r+0xe8>
  802294:	8100030b 	ldhu	r4,12(r16)
  802298:	003f5606 	br	801ff4 <_fseek_r+0x15c>
  80229c:	00800744 	movi	r2,29
  8022a0:	013fffc4 	movi	r4,-1
  8022a4:	90800015 	stw	r2,0(r18)
  8022a8:	003f1a06 	br	801f14 <_fseek_r+0x7c>
  8022ac:	81400717 	ldw	r5,28(r16)
  8022b0:	980f883a 	mov	r7,r19
  8022b4:	9009883a 	mov	r4,r18
  8022b8:	000d883a 	mov	r6,zero
  8022bc:	a83ee83a 	callr	r21
  8022c0:	1023883a 	mov	r17,r2
  8022c4:	00bfffc4 	movi	r2,-1
  8022c8:	88bf3126 	beq	r17,r2,801f90 <_fseek_r+0xf8>
  8022cc:	8100030b 	ldhu	r4,12(r16)
  8022d0:	003f7006 	br	802094 <_fseek_r+0x1fc>

008022d4 <fseek>:
  8022d4:	00802074 	movhi	r2,129
  8022d8:	109c4404 	addi	r2,r2,28944
  8022dc:	2013883a 	mov	r9,r4
  8022e0:	11000017 	ldw	r4,0(r2)
  8022e4:	2805883a 	mov	r2,r5
  8022e8:	300f883a 	mov	r7,r6
  8022ec:	480b883a 	mov	r5,r9
  8022f0:	100d883a 	mov	r6,r2
  8022f4:	0801e981 	jmpi	801e98 <_fseek_r>

008022f8 <_fstat_r>:
  8022f8:	defffd04 	addi	sp,sp,-12
  8022fc:	dc000015 	stw	r16,0(sp)
  802300:	040020b4 	movhi	r16,130
  802304:	84239d04 	addi	r16,r16,-29068
  802308:	dc400115 	stw	r17,4(sp)
  80230c:	80000015 	stw	zero,0(r16)
  802310:	2023883a 	mov	r17,r4
  802314:	2809883a 	mov	r4,r5
  802318:	300b883a 	mov	r5,r6
  80231c:	dfc00215 	stw	ra,8(sp)
  802320:	08109040 	call	810904 <fstat>
  802324:	1007883a 	mov	r3,r2
  802328:	00bfffc4 	movi	r2,-1
  80232c:	18800626 	beq	r3,r2,802348 <_fstat_r+0x50>
  802330:	1805883a 	mov	r2,r3
  802334:	dfc00217 	ldw	ra,8(sp)
  802338:	dc400117 	ldw	r17,4(sp)
  80233c:	dc000017 	ldw	r16,0(sp)
  802340:	dec00304 	addi	sp,sp,12
  802344:	f800283a 	ret
  802348:	80800017 	ldw	r2,0(r16)
  80234c:	103ff826 	beq	r2,zero,802330 <_fstat_r+0x38>
  802350:	88800015 	stw	r2,0(r17)
  802354:	1805883a 	mov	r2,r3
  802358:	dfc00217 	ldw	ra,8(sp)
  80235c:	dc400117 	ldw	r17,4(sp)
  802360:	dc000017 	ldw	r16,0(sp)
  802364:	dec00304 	addi	sp,sp,12
  802368:	f800283a 	ret

0080236c <__sfvwrite_r>:
  80236c:	30800217 	ldw	r2,8(r6)
  802370:	defff504 	addi	sp,sp,-44
  802374:	df000915 	stw	fp,36(sp)
  802378:	dd800715 	stw	r22,28(sp)
  80237c:	dc800315 	stw	r18,12(sp)
  802380:	dfc00a15 	stw	ra,40(sp)
  802384:	ddc00815 	stw	r23,32(sp)
  802388:	dd400615 	stw	r21,24(sp)
  80238c:	dd000515 	stw	r20,20(sp)
  802390:	dcc00415 	stw	r19,16(sp)
  802394:	dc400215 	stw	r17,8(sp)
  802398:	dc000115 	stw	r16,4(sp)
  80239c:	302d883a 	mov	r22,r6
  8023a0:	2039883a 	mov	fp,r4
  8023a4:	2825883a 	mov	r18,r5
  8023a8:	10001c26 	beq	r2,zero,80241c <__sfvwrite_r+0xb0>
  8023ac:	29c0030b 	ldhu	r7,12(r5)
  8023b0:	3880020c 	andi	r2,r7,8
  8023b4:	10002726 	beq	r2,zero,802454 <__sfvwrite_r+0xe8>
  8023b8:	28800417 	ldw	r2,16(r5)
  8023bc:	10002526 	beq	r2,zero,802454 <__sfvwrite_r+0xe8>
  8023c0:	3880008c 	andi	r2,r7,2
  8023c4:	b5400017 	ldw	r21,0(r22)
  8023c8:	10002826 	beq	r2,zero,80246c <__sfvwrite_r+0x100>
  8023cc:	0021883a 	mov	r16,zero
  8023d0:	0023883a 	mov	r17,zero
  8023d4:	880d883a 	mov	r6,r17
  8023d8:	e009883a 	mov	r4,fp
  8023dc:	00810004 	movi	r2,1024
  8023e0:	80006e26 	beq	r16,zero,80259c <__sfvwrite_r+0x230>
  8023e4:	800f883a 	mov	r7,r16
  8023e8:	91400717 	ldw	r5,28(r18)
  8023ec:	1400012e 	bgeu	r2,r16,8023f4 <__sfvwrite_r+0x88>
  8023f0:	100f883a 	mov	r7,r2
  8023f4:	90c00917 	ldw	r3,36(r18)
  8023f8:	183ee83a 	callr	r3
  8023fc:	1007883a 	mov	r3,r2
  802400:	80a1c83a 	sub	r16,r16,r2
  802404:	88a3883a 	add	r17,r17,r2
  802408:	00806d0e 	bge	zero,r2,8025c0 <__sfvwrite_r+0x254>
  80240c:	b0800217 	ldw	r2,8(r22)
  802410:	10c5c83a 	sub	r2,r2,r3
  802414:	b0800215 	stw	r2,8(r22)
  802418:	103fee1e 	bne	r2,zero,8023d4 <__sfvwrite_r+0x68>
  80241c:	0009883a 	mov	r4,zero
  802420:	2005883a 	mov	r2,r4
  802424:	dfc00a17 	ldw	ra,40(sp)
  802428:	df000917 	ldw	fp,36(sp)
  80242c:	ddc00817 	ldw	r23,32(sp)
  802430:	dd800717 	ldw	r22,28(sp)
  802434:	dd400617 	ldw	r21,24(sp)
  802438:	dd000517 	ldw	r20,20(sp)
  80243c:	dcc00417 	ldw	r19,16(sp)
  802440:	dc800317 	ldw	r18,12(sp)
  802444:	dc400217 	ldw	r17,8(sp)
  802448:	dc000117 	ldw	r16,4(sp)
  80244c:	dec00b04 	addi	sp,sp,44
  802450:	f800283a 	ret
  802454:	0807a680 	call	807a68 <__swsetup_r>
  802458:	1000e41e 	bne	r2,zero,8027ec <__sfvwrite_r+0x480>
  80245c:	91c0030b 	ldhu	r7,12(r18)
  802460:	b5400017 	ldw	r21,0(r22)
  802464:	3880008c 	andi	r2,r7,2
  802468:	103fd81e 	bne	r2,zero,8023cc <__sfvwrite_r+0x60>
  80246c:	3880004c 	andi	r2,r7,1
  802470:	1005003a 	cmpeq	r2,r2,zero
  802474:	10005726 	beq	r2,zero,8025d4 <__sfvwrite_r+0x268>
  802478:	0029883a 	mov	r20,zero
  80247c:	002f883a 	mov	r23,zero
  802480:	a0004226 	beq	r20,zero,80258c <__sfvwrite_r+0x220>
  802484:	3880800c 	andi	r2,r7,512
  802488:	94000217 	ldw	r16,8(r18)
  80248c:	10008b26 	beq	r2,zero,8026bc <__sfvwrite_r+0x350>
  802490:	800d883a 	mov	r6,r16
  802494:	a400a536 	bltu	r20,r16,80272c <__sfvwrite_r+0x3c0>
  802498:	3881200c 	andi	r2,r7,1152
  80249c:	10002726 	beq	r2,zero,80253c <__sfvwrite_r+0x1d0>
  8024a0:	90800517 	ldw	r2,20(r18)
  8024a4:	92000417 	ldw	r8,16(r18)
  8024a8:	91400017 	ldw	r5,0(r18)
  8024ac:	1087883a 	add	r3,r2,r2
  8024b0:	1887883a 	add	r3,r3,r2
  8024b4:	1808d7fa 	srli	r4,r3,31
  8024b8:	2a21c83a 	sub	r16,r5,r8
  8024bc:	80800044 	addi	r2,r16,1
  8024c0:	20c9883a 	add	r4,r4,r3
  8024c4:	2027d07a 	srai	r19,r4,1
  8024c8:	a085883a 	add	r2,r20,r2
  8024cc:	980d883a 	mov	r6,r19
  8024d0:	9880022e 	bgeu	r19,r2,8024dc <__sfvwrite_r+0x170>
  8024d4:	1027883a 	mov	r19,r2
  8024d8:	100d883a 	mov	r6,r2
  8024dc:	3881000c 	andi	r2,r7,1024
  8024e0:	1000b826 	beq	r2,zero,8027c4 <__sfvwrite_r+0x458>
  8024e4:	300b883a 	mov	r5,r6
  8024e8:	e009883a 	mov	r4,fp
  8024ec:	0802b1c0 	call	802b1c <_malloc_r>
  8024f0:	10003126 	beq	r2,zero,8025b8 <__sfvwrite_r+0x24c>
  8024f4:	91400417 	ldw	r5,16(r18)
  8024f8:	1009883a 	mov	r4,r2
  8024fc:	800d883a 	mov	r6,r16
  802500:	1023883a 	mov	r17,r2
  802504:	08033400 	call	803340 <memcpy>
  802508:	90c0030b 	ldhu	r3,12(r18)
  80250c:	00beffc4 	movi	r2,-1025
  802510:	1886703a 	and	r3,r3,r2
  802514:	18c02014 	ori	r3,r3,128
  802518:	90c0030d 	sth	r3,12(r18)
  80251c:	9c07c83a 	sub	r3,r19,r16
  802520:	8c05883a 	add	r2,r17,r16
  802524:	a00d883a 	mov	r6,r20
  802528:	a021883a 	mov	r16,r20
  80252c:	90800015 	stw	r2,0(r18)
  802530:	90c00215 	stw	r3,8(r18)
  802534:	94400415 	stw	r17,16(r18)
  802538:	94c00515 	stw	r19,20(r18)
  80253c:	91000017 	ldw	r4,0(r18)
  802540:	b80b883a 	mov	r5,r23
  802544:	a023883a 	mov	r17,r20
  802548:	08033e00 	call	8033e0 <memmove>
  80254c:	90c00217 	ldw	r3,8(r18)
  802550:	90800017 	ldw	r2,0(r18)
  802554:	a027883a 	mov	r19,r20
  802558:	1c07c83a 	sub	r3,r3,r16
  80255c:	1405883a 	add	r2,r2,r16
  802560:	90c00215 	stw	r3,8(r18)
  802564:	a021883a 	mov	r16,r20
  802568:	90800015 	stw	r2,0(r18)
  80256c:	b0800217 	ldw	r2,8(r22)
  802570:	1405c83a 	sub	r2,r2,r16
  802574:	b0800215 	stw	r2,8(r22)
  802578:	103fa826 	beq	r2,zero,80241c <__sfvwrite_r+0xb0>
  80257c:	a469c83a 	sub	r20,r20,r17
  802580:	91c0030b 	ldhu	r7,12(r18)
  802584:	bcef883a 	add	r23,r23,r19
  802588:	a03fbe1e 	bne	r20,zero,802484 <__sfvwrite_r+0x118>
  80258c:	adc00017 	ldw	r23,0(r21)
  802590:	ad000117 	ldw	r20,4(r21)
  802594:	ad400204 	addi	r21,r21,8
  802598:	003fb906 	br	802480 <__sfvwrite_r+0x114>
  80259c:	ac400017 	ldw	r17,0(r21)
  8025a0:	ac000117 	ldw	r16,4(r21)
  8025a4:	ad400204 	addi	r21,r21,8
  8025a8:	003f8a06 	br	8023d4 <__sfvwrite_r+0x68>
  8025ac:	91400417 	ldw	r5,16(r18)
  8025b0:	e009883a 	mov	r4,fp
  8025b4:	0801b840 	call	801b84 <_free_r>
  8025b8:	00800304 	movi	r2,12
  8025bc:	e0800015 	stw	r2,0(fp)
  8025c0:	9080030b 	ldhu	r2,12(r18)
  8025c4:	013fffc4 	movi	r4,-1
  8025c8:	10801014 	ori	r2,r2,64
  8025cc:	9080030d 	sth	r2,12(r18)
  8025d0:	003f9306 	br	802420 <__sfvwrite_r+0xb4>
  8025d4:	0027883a 	mov	r19,zero
  8025d8:	002f883a 	mov	r23,zero
  8025dc:	d8000015 	stw	zero,0(sp)
  8025e0:	0029883a 	mov	r20,zero
  8025e4:	98001e26 	beq	r19,zero,802660 <__sfvwrite_r+0x2f4>
  8025e8:	d8c00017 	ldw	r3,0(sp)
  8025ec:	1804c03a 	cmpne	r2,r3,zero
  8025f0:	10005e26 	beq	r2,zero,80276c <__sfvwrite_r+0x400>
  8025f4:	9821883a 	mov	r16,r19
  8025f8:	a4c0012e 	bgeu	r20,r19,802600 <__sfvwrite_r+0x294>
  8025fc:	a021883a 	mov	r16,r20
  802600:	91000017 	ldw	r4,0(r18)
  802604:	90800417 	ldw	r2,16(r18)
  802608:	91800217 	ldw	r6,8(r18)
  80260c:	91c00517 	ldw	r7,20(r18)
  802610:	1100022e 	bgeu	r2,r4,80261c <__sfvwrite_r+0x2b0>
  802614:	31e3883a 	add	r17,r6,r7
  802618:	8c001616 	blt	r17,r16,802674 <__sfvwrite_r+0x308>
  80261c:	81c03816 	blt	r16,r7,802700 <__sfvwrite_r+0x394>
  802620:	90c00917 	ldw	r3,36(r18)
  802624:	91400717 	ldw	r5,28(r18)
  802628:	e009883a 	mov	r4,fp
  80262c:	b80d883a 	mov	r6,r23
  802630:	183ee83a 	callr	r3
  802634:	1023883a 	mov	r17,r2
  802638:	00bfe10e 	bge	zero,r2,8025c0 <__sfvwrite_r+0x254>
  80263c:	a469c83a 	sub	r20,r20,r17
  802640:	a0001826 	beq	r20,zero,8026a4 <__sfvwrite_r+0x338>
  802644:	b0800217 	ldw	r2,8(r22)
  802648:	1445c83a 	sub	r2,r2,r17
  80264c:	b0800215 	stw	r2,8(r22)
  802650:	103f7226 	beq	r2,zero,80241c <__sfvwrite_r+0xb0>
  802654:	9c67c83a 	sub	r19,r19,r17
  802658:	bc6f883a 	add	r23,r23,r17
  80265c:	983fe21e 	bne	r19,zero,8025e8 <__sfvwrite_r+0x27c>
  802660:	adc00017 	ldw	r23,0(r21)
  802664:	acc00117 	ldw	r19,4(r21)
  802668:	ad400204 	addi	r21,r21,8
  80266c:	d8000015 	stw	zero,0(sp)
  802670:	003fdc06 	br	8025e4 <__sfvwrite_r+0x278>
  802674:	b80b883a 	mov	r5,r23
  802678:	880d883a 	mov	r6,r17
  80267c:	08033e00 	call	8033e0 <memmove>
  802680:	90c00017 	ldw	r3,0(r18)
  802684:	e009883a 	mov	r4,fp
  802688:	900b883a 	mov	r5,r18
  80268c:	1c47883a 	add	r3,r3,r17
  802690:	90c00015 	stw	r3,0(r18)
  802694:	08012400 	call	801240 <_fflush_r>
  802698:	103fc91e 	bne	r2,zero,8025c0 <__sfvwrite_r+0x254>
  80269c:	a469c83a 	sub	r20,r20,r17
  8026a0:	a03fe81e 	bne	r20,zero,802644 <__sfvwrite_r+0x2d8>
  8026a4:	e009883a 	mov	r4,fp
  8026a8:	900b883a 	mov	r5,r18
  8026ac:	08012400 	call	801240 <_fflush_r>
  8026b0:	103fc31e 	bne	r2,zero,8025c0 <__sfvwrite_r+0x254>
  8026b4:	d8000015 	stw	zero,0(sp)
  8026b8:	003fe206 	br	802644 <__sfvwrite_r+0x2d8>
  8026bc:	91000017 	ldw	r4,0(r18)
  8026c0:	90800417 	ldw	r2,16(r18)
  8026c4:	1100022e 	bgeu	r2,r4,8026d0 <__sfvwrite_r+0x364>
  8026c8:	8023883a 	mov	r17,r16
  8026cc:	85003136 	bltu	r16,r20,802794 <__sfvwrite_r+0x428>
  8026d0:	91c00517 	ldw	r7,20(r18)
  8026d4:	a1c01836 	bltu	r20,r7,802738 <__sfvwrite_r+0x3cc>
  8026d8:	90c00917 	ldw	r3,36(r18)
  8026dc:	91400717 	ldw	r5,28(r18)
  8026e0:	e009883a 	mov	r4,fp
  8026e4:	b80d883a 	mov	r6,r23
  8026e8:	183ee83a 	callr	r3
  8026ec:	1021883a 	mov	r16,r2
  8026f0:	00bfb30e 	bge	zero,r2,8025c0 <__sfvwrite_r+0x254>
  8026f4:	1023883a 	mov	r17,r2
  8026f8:	1027883a 	mov	r19,r2
  8026fc:	003f9b06 	br	80256c <__sfvwrite_r+0x200>
  802700:	b80b883a 	mov	r5,r23
  802704:	800d883a 	mov	r6,r16
  802708:	08033e00 	call	8033e0 <memmove>
  80270c:	90c00217 	ldw	r3,8(r18)
  802710:	90800017 	ldw	r2,0(r18)
  802714:	8023883a 	mov	r17,r16
  802718:	1c07c83a 	sub	r3,r3,r16
  80271c:	1405883a 	add	r2,r2,r16
  802720:	90c00215 	stw	r3,8(r18)
  802724:	90800015 	stw	r2,0(r18)
  802728:	003fc406 	br	80263c <__sfvwrite_r+0x2d0>
  80272c:	a00d883a 	mov	r6,r20
  802730:	a021883a 	mov	r16,r20
  802734:	003f8106 	br	80253c <__sfvwrite_r+0x1d0>
  802738:	b80b883a 	mov	r5,r23
  80273c:	a00d883a 	mov	r6,r20
  802740:	08033e00 	call	8033e0 <memmove>
  802744:	90c00217 	ldw	r3,8(r18)
  802748:	90800017 	ldw	r2,0(r18)
  80274c:	a021883a 	mov	r16,r20
  802750:	1d07c83a 	sub	r3,r3,r20
  802754:	1505883a 	add	r2,r2,r20
  802758:	a023883a 	mov	r17,r20
  80275c:	a027883a 	mov	r19,r20
  802760:	90c00215 	stw	r3,8(r18)
  802764:	90800015 	stw	r2,0(r18)
  802768:	003f8006 	br	80256c <__sfvwrite_r+0x200>
  80276c:	b809883a 	mov	r4,r23
  802770:	01400284 	movi	r5,10
  802774:	980d883a 	mov	r6,r19
  802778:	080325c0 	call	80325c <memchr>
  80277c:	10001726 	beq	r2,zero,8027dc <__sfvwrite_r+0x470>
  802780:	15c5c83a 	sub	r2,r2,r23
  802784:	15000044 	addi	r20,r2,1
  802788:	00800044 	movi	r2,1
  80278c:	d8800015 	stw	r2,0(sp)
  802790:	003f9806 	br	8025f4 <__sfvwrite_r+0x288>
  802794:	b80b883a 	mov	r5,r23
  802798:	800d883a 	mov	r6,r16
  80279c:	08033e00 	call	8033e0 <memmove>
  8027a0:	90c00017 	ldw	r3,0(r18)
  8027a4:	e009883a 	mov	r4,fp
  8027a8:	900b883a 	mov	r5,r18
  8027ac:	1c07883a 	add	r3,r3,r16
  8027b0:	90c00015 	stw	r3,0(r18)
  8027b4:	8027883a 	mov	r19,r16
  8027b8:	08012400 	call	801240 <_fflush_r>
  8027bc:	103f6b26 	beq	r2,zero,80256c <__sfvwrite_r+0x200>
  8027c0:	003f7f06 	br	8025c0 <__sfvwrite_r+0x254>
  8027c4:	400b883a 	mov	r5,r8
  8027c8:	e009883a 	mov	r4,fp
  8027cc:	08036fc0 	call	8036fc <_realloc_r>
  8027d0:	103f7626 	beq	r2,zero,8025ac <__sfvwrite_r+0x240>
  8027d4:	1023883a 	mov	r17,r2
  8027d8:	003f5006 	br	80251c <__sfvwrite_r+0x1b0>
  8027dc:	00c00044 	movi	r3,1
  8027e0:	9d000044 	addi	r20,r19,1
  8027e4:	d8c00015 	stw	r3,0(sp)
  8027e8:	003f8206 	br	8025f4 <__sfvwrite_r+0x288>
  8027ec:	9080030b 	ldhu	r2,12(r18)
  8027f0:	00c00244 	movi	r3,9
  8027f4:	013fffc4 	movi	r4,-1
  8027f8:	10801014 	ori	r2,r2,64
  8027fc:	9080030d 	sth	r2,12(r18)
  802800:	e0c00015 	stw	r3,0(fp)
  802804:	003f0606 	br	802420 <__sfvwrite_r+0xb4>

00802808 <_fwalk_reent>:
  802808:	defff704 	addi	sp,sp,-36
  80280c:	dcc00315 	stw	r19,12(sp)
  802810:	24c0b804 	addi	r19,r4,736
  802814:	dd800615 	stw	r22,24(sp)
  802818:	dd400515 	stw	r21,20(sp)
  80281c:	dfc00815 	stw	ra,32(sp)
  802820:	ddc00715 	stw	r23,28(sp)
  802824:	dd000415 	stw	r20,16(sp)
  802828:	dc800215 	stw	r18,8(sp)
  80282c:	dc400115 	stw	r17,4(sp)
  802830:	dc000015 	stw	r16,0(sp)
  802834:	202b883a 	mov	r21,r4
  802838:	282d883a 	mov	r22,r5
  80283c:	08015f00 	call	8015f0 <__sfp_lock_acquire>
  802840:	98002126 	beq	r19,zero,8028c8 <_fwalk_reent+0xc0>
  802844:	002f883a 	mov	r23,zero
  802848:	9c800117 	ldw	r18,4(r19)
  80284c:	9c000217 	ldw	r16,8(r19)
  802850:	90bfffc4 	addi	r2,r18,-1
  802854:	10000d16 	blt	r2,zero,80288c <_fwalk_reent+0x84>
  802858:	0023883a 	mov	r17,zero
  80285c:	053fffc4 	movi	r20,-1
  802860:	8080030f 	ldh	r2,12(r16)
  802864:	8c400044 	addi	r17,r17,1
  802868:	10000626 	beq	r2,zero,802884 <_fwalk_reent+0x7c>
  80286c:	8080038f 	ldh	r2,14(r16)
  802870:	800b883a 	mov	r5,r16
  802874:	a809883a 	mov	r4,r21
  802878:	15000226 	beq	r2,r20,802884 <_fwalk_reent+0x7c>
  80287c:	b03ee83a 	callr	r22
  802880:	b8aeb03a 	or	r23,r23,r2
  802884:	84001704 	addi	r16,r16,92
  802888:	947ff51e 	bne	r18,r17,802860 <_fwalk_reent+0x58>
  80288c:	9cc00017 	ldw	r19,0(r19)
  802890:	983fed1e 	bne	r19,zero,802848 <_fwalk_reent+0x40>
  802894:	08015f40 	call	8015f4 <__sfp_lock_release>
  802898:	b805883a 	mov	r2,r23
  80289c:	dfc00817 	ldw	ra,32(sp)
  8028a0:	ddc00717 	ldw	r23,28(sp)
  8028a4:	dd800617 	ldw	r22,24(sp)
  8028a8:	dd400517 	ldw	r21,20(sp)
  8028ac:	dd000417 	ldw	r20,16(sp)
  8028b0:	dcc00317 	ldw	r19,12(sp)
  8028b4:	dc800217 	ldw	r18,8(sp)
  8028b8:	dc400117 	ldw	r17,4(sp)
  8028bc:	dc000017 	ldw	r16,0(sp)
  8028c0:	dec00904 	addi	sp,sp,36
  8028c4:	f800283a 	ret
  8028c8:	002f883a 	mov	r23,zero
  8028cc:	003ff106 	br	802894 <_fwalk_reent+0x8c>

008028d0 <_fwalk>:
  8028d0:	defff804 	addi	sp,sp,-32
  8028d4:	dcc00315 	stw	r19,12(sp)
  8028d8:	24c0b804 	addi	r19,r4,736
  8028dc:	dd400515 	stw	r21,20(sp)
  8028e0:	dfc00715 	stw	ra,28(sp)
  8028e4:	dd800615 	stw	r22,24(sp)
  8028e8:	dd000415 	stw	r20,16(sp)
  8028ec:	dc800215 	stw	r18,8(sp)
  8028f0:	dc400115 	stw	r17,4(sp)
  8028f4:	dc000015 	stw	r16,0(sp)
  8028f8:	282b883a 	mov	r21,r5
  8028fc:	08015f00 	call	8015f0 <__sfp_lock_acquire>
  802900:	98001f26 	beq	r19,zero,802980 <_fwalk+0xb0>
  802904:	002d883a 	mov	r22,zero
  802908:	9c800117 	ldw	r18,4(r19)
  80290c:	9c000217 	ldw	r16,8(r19)
  802910:	90bfffc4 	addi	r2,r18,-1
  802914:	10000c16 	blt	r2,zero,802948 <_fwalk+0x78>
  802918:	0023883a 	mov	r17,zero
  80291c:	053fffc4 	movi	r20,-1
  802920:	8080030f 	ldh	r2,12(r16)
  802924:	8c400044 	addi	r17,r17,1
  802928:	10000526 	beq	r2,zero,802940 <_fwalk+0x70>
  80292c:	8080038f 	ldh	r2,14(r16)
  802930:	8009883a 	mov	r4,r16
  802934:	15000226 	beq	r2,r20,802940 <_fwalk+0x70>
  802938:	a83ee83a 	callr	r21
  80293c:	b0acb03a 	or	r22,r22,r2
  802940:	84001704 	addi	r16,r16,92
  802944:	947ff61e 	bne	r18,r17,802920 <_fwalk+0x50>
  802948:	9cc00017 	ldw	r19,0(r19)
  80294c:	983fee1e 	bne	r19,zero,802908 <_fwalk+0x38>
  802950:	08015f40 	call	8015f4 <__sfp_lock_release>
  802954:	b005883a 	mov	r2,r22
  802958:	dfc00717 	ldw	ra,28(sp)
  80295c:	dd800617 	ldw	r22,24(sp)
  802960:	dd400517 	ldw	r21,20(sp)
  802964:	dd000417 	ldw	r20,16(sp)
  802968:	dcc00317 	ldw	r19,12(sp)
  80296c:	dc800217 	ldw	r18,8(sp)
  802970:	dc400117 	ldw	r17,4(sp)
  802974:	dc000017 	ldw	r16,0(sp)
  802978:	dec00804 	addi	sp,sp,32
  80297c:	f800283a 	ret
  802980:	002d883a 	mov	r22,zero
  802984:	003ff206 	br	802950 <_fwalk+0x80>

00802988 <__smakebuf_r>:
  802988:	2880030b 	ldhu	r2,12(r5)
  80298c:	deffed04 	addi	sp,sp,-76
  802990:	dc401015 	stw	r17,64(sp)
  802994:	1080008c 	andi	r2,r2,2
  802998:	dc000f15 	stw	r16,60(sp)
  80299c:	dfc01215 	stw	ra,72(sp)
  8029a0:	dc801115 	stw	r18,68(sp)
  8029a4:	2821883a 	mov	r16,r5
  8029a8:	2023883a 	mov	r17,r4
  8029ac:	10000b26 	beq	r2,zero,8029dc <__smakebuf_r+0x54>
  8029b0:	28c010c4 	addi	r3,r5,67
  8029b4:	00800044 	movi	r2,1
  8029b8:	28800515 	stw	r2,20(r5)
  8029bc:	28c00415 	stw	r3,16(r5)
  8029c0:	28c00015 	stw	r3,0(r5)
  8029c4:	dfc01217 	ldw	ra,72(sp)
  8029c8:	dc801117 	ldw	r18,68(sp)
  8029cc:	dc401017 	ldw	r17,64(sp)
  8029d0:	dc000f17 	ldw	r16,60(sp)
  8029d4:	dec01304 	addi	sp,sp,76
  8029d8:	f800283a 	ret
  8029dc:	2940038f 	ldh	r5,14(r5)
  8029e0:	28002116 	blt	r5,zero,802a68 <__smakebuf_r+0xe0>
  8029e4:	d80d883a 	mov	r6,sp
  8029e8:	08022f80 	call	8022f8 <_fstat_r>
  8029ec:	10001e16 	blt	r2,zero,802a68 <__smakebuf_r+0xe0>
  8029f0:	d8800117 	ldw	r2,4(sp)
  8029f4:	00e00014 	movui	r3,32768
  8029f8:	113c000c 	andi	r4,r2,61440
  8029fc:	20c03126 	beq	r4,r3,802ac4 <__smakebuf_r+0x13c>
  802a00:	8080030b 	ldhu	r2,12(r16)
  802a04:	00c80004 	movi	r3,8192
  802a08:	10820014 	ori	r2,r2,2048
  802a0c:	8080030d 	sth	r2,12(r16)
  802a10:	20c01e26 	beq	r4,r3,802a8c <__smakebuf_r+0x104>
  802a14:	04810004 	movi	r18,1024
  802a18:	8809883a 	mov	r4,r17
  802a1c:	900b883a 	mov	r5,r18
  802a20:	0802b1c0 	call	802b1c <_malloc_r>
  802a24:	1009883a 	mov	r4,r2
  802a28:	10003126 	beq	r2,zero,802af0 <__smakebuf_r+0x168>
  802a2c:	80c0030b 	ldhu	r3,12(r16)
  802a30:	00802034 	movhi	r2,128
  802a34:	1085b904 	addi	r2,r2,5860
  802a38:	88800f15 	stw	r2,60(r17)
  802a3c:	18c02014 	ori	r3,r3,128
  802a40:	84800515 	stw	r18,20(r16)
  802a44:	80c0030d 	sth	r3,12(r16)
  802a48:	81000415 	stw	r4,16(r16)
  802a4c:	81000015 	stw	r4,0(r16)
  802a50:	dfc01217 	ldw	ra,72(sp)
  802a54:	dc801117 	ldw	r18,68(sp)
  802a58:	dc401017 	ldw	r17,64(sp)
  802a5c:	dc000f17 	ldw	r16,60(sp)
  802a60:	dec01304 	addi	sp,sp,76
  802a64:	f800283a 	ret
  802a68:	80c0030b 	ldhu	r3,12(r16)
  802a6c:	1880200c 	andi	r2,r3,128
  802a70:	10000426 	beq	r2,zero,802a84 <__smakebuf_r+0xfc>
  802a74:	04801004 	movi	r18,64
  802a78:	18820014 	ori	r2,r3,2048
  802a7c:	8080030d 	sth	r2,12(r16)
  802a80:	003fe506 	br	802a18 <__smakebuf_r+0x90>
  802a84:	04810004 	movi	r18,1024
  802a88:	003ffb06 	br	802a78 <__smakebuf_r+0xf0>
  802a8c:	8140038f 	ldh	r5,14(r16)
  802a90:	8809883a 	mov	r4,r17
  802a94:	08096bc0 	call	8096bc <_isatty_r>
  802a98:	103fde26 	beq	r2,zero,802a14 <__smakebuf_r+0x8c>
  802a9c:	8080030b 	ldhu	r2,12(r16)
  802aa0:	80c010c4 	addi	r3,r16,67
  802aa4:	04810004 	movi	r18,1024
  802aa8:	10800054 	ori	r2,r2,1
  802aac:	8080030d 	sth	r2,12(r16)
  802ab0:	00800044 	movi	r2,1
  802ab4:	80c00415 	stw	r3,16(r16)
  802ab8:	80800515 	stw	r2,20(r16)
  802abc:	80c00015 	stw	r3,0(r16)
  802ac0:	003fd506 	br	802a18 <__smakebuf_r+0x90>
  802ac4:	80c00a17 	ldw	r3,40(r16)
  802ac8:	00802034 	movhi	r2,128
  802acc:	10906404 	addi	r2,r2,16784
  802ad0:	18bfcb1e 	bne	r3,r2,802a00 <__smakebuf_r+0x78>
  802ad4:	8080030b 	ldhu	r2,12(r16)
  802ad8:	00c10004 	movi	r3,1024
  802adc:	1825883a 	mov	r18,r3
  802ae0:	10c4b03a 	or	r2,r2,r3
  802ae4:	8080030d 	sth	r2,12(r16)
  802ae8:	80c01315 	stw	r3,76(r16)
  802aec:	003fca06 	br	802a18 <__smakebuf_r+0x90>
  802af0:	8100030b 	ldhu	r4,12(r16)
  802af4:	2080800c 	andi	r2,r4,512
  802af8:	103fb21e 	bne	r2,zero,8029c4 <__smakebuf_r+0x3c>
  802afc:	80c010c4 	addi	r3,r16,67
  802b00:	21000094 	ori	r4,r4,2
  802b04:	00800044 	movi	r2,1
  802b08:	80800515 	stw	r2,20(r16)
  802b0c:	8100030d 	sth	r4,12(r16)
  802b10:	80c00415 	stw	r3,16(r16)
  802b14:	80c00015 	stw	r3,0(r16)
  802b18:	003faa06 	br	8029c4 <__smakebuf_r+0x3c>

00802b1c <_malloc_r>:
  802b1c:	defff604 	addi	sp,sp,-40
  802b20:	28c002c4 	addi	r3,r5,11
  802b24:	00800584 	movi	r2,22
  802b28:	dc800215 	stw	r18,8(sp)
  802b2c:	dfc00915 	stw	ra,36(sp)
  802b30:	df000815 	stw	fp,32(sp)
  802b34:	ddc00715 	stw	r23,28(sp)
  802b38:	dd800615 	stw	r22,24(sp)
  802b3c:	dd400515 	stw	r21,20(sp)
  802b40:	dd000415 	stw	r20,16(sp)
  802b44:	dcc00315 	stw	r19,12(sp)
  802b48:	dc400115 	stw	r17,4(sp)
  802b4c:	dc000015 	stw	r16,0(sp)
  802b50:	2025883a 	mov	r18,r4
  802b54:	10c01236 	bltu	r2,r3,802ba0 <_malloc_r+0x84>
  802b58:	04400404 	movi	r17,16
  802b5c:	8940142e 	bgeu	r17,r5,802bb0 <_malloc_r+0x94>
  802b60:	00800304 	movi	r2,12
  802b64:	0007883a 	mov	r3,zero
  802b68:	90800015 	stw	r2,0(r18)
  802b6c:	1805883a 	mov	r2,r3
  802b70:	dfc00917 	ldw	ra,36(sp)
  802b74:	df000817 	ldw	fp,32(sp)
  802b78:	ddc00717 	ldw	r23,28(sp)
  802b7c:	dd800617 	ldw	r22,24(sp)
  802b80:	dd400517 	ldw	r21,20(sp)
  802b84:	dd000417 	ldw	r20,16(sp)
  802b88:	dcc00317 	ldw	r19,12(sp)
  802b8c:	dc800217 	ldw	r18,8(sp)
  802b90:	dc400117 	ldw	r17,4(sp)
  802b94:	dc000017 	ldw	r16,0(sp)
  802b98:	dec00a04 	addi	sp,sp,40
  802b9c:	f800283a 	ret
  802ba0:	00bffe04 	movi	r2,-8
  802ba4:	18a2703a 	and	r17,r3,r2
  802ba8:	883fed16 	blt	r17,zero,802b60 <_malloc_r+0x44>
  802bac:	897fec36 	bltu	r17,r5,802b60 <_malloc_r+0x44>
  802bb0:	9009883a 	mov	r4,r18
  802bb4:	0810fc00 	call	810fc0 <__malloc_lock>
  802bb8:	00807dc4 	movi	r2,503
  802bbc:	14402b2e 	bgeu	r2,r17,802c6c <_malloc_r+0x150>
  802bc0:	8806d27a 	srli	r3,r17,9
  802bc4:	18003f1e 	bne	r3,zero,802cc4 <_malloc_r+0x1a8>
  802bc8:	880cd0fa 	srli	r6,r17,3
  802bcc:	300490fa 	slli	r2,r6,3
  802bd0:	02c02074 	movhi	r11,129
  802bd4:	5ad63604 	addi	r11,r11,22744
  802bd8:	12cb883a 	add	r5,r2,r11
  802bdc:	2c000317 	ldw	r16,12(r5)
  802be0:	580f883a 	mov	r7,r11
  802be4:	2c00041e 	bne	r5,r16,802bf8 <_malloc_r+0xdc>
  802be8:	00000a06 	br	802c14 <_malloc_r+0xf8>
  802bec:	1800860e 	bge	r3,zero,802e08 <_malloc_r+0x2ec>
  802bf0:	84000317 	ldw	r16,12(r16)
  802bf4:	2c000726 	beq	r5,r16,802c14 <_malloc_r+0xf8>
  802bf8:	80800117 	ldw	r2,4(r16)
  802bfc:	00ffff04 	movi	r3,-4
  802c00:	10c8703a 	and	r4,r2,r3
  802c04:	2447c83a 	sub	r3,r4,r17
  802c08:	008003c4 	movi	r2,15
  802c0c:	10fff70e 	bge	r2,r3,802bec <_malloc_r+0xd0>
  802c10:	31bfffc4 	addi	r6,r6,-1
  802c14:	32400044 	addi	r9,r6,1
  802c18:	02802074 	movhi	r10,129
  802c1c:	52963804 	addi	r10,r10,22752
  802c20:	54000217 	ldw	r16,8(r10)
  802c24:	8280a026 	beq	r16,r10,802ea8 <_malloc_r+0x38c>
  802c28:	80800117 	ldw	r2,4(r16)
  802c2c:	00ffff04 	movi	r3,-4
  802c30:	10ca703a 	and	r5,r2,r3
  802c34:	2c4dc83a 	sub	r6,r5,r17
  802c38:	008003c4 	movi	r2,15
  802c3c:	11808316 	blt	r2,r6,802e4c <_malloc_r+0x330>
  802c40:	52800315 	stw	r10,12(r10)
  802c44:	52800215 	stw	r10,8(r10)
  802c48:	30002916 	blt	r6,zero,802cf0 <_malloc_r+0x1d4>
  802c4c:	8147883a 	add	r3,r16,r5
  802c50:	18800117 	ldw	r2,4(r3)
  802c54:	9009883a 	mov	r4,r18
  802c58:	10800054 	ori	r2,r2,1
  802c5c:	18800115 	stw	r2,4(r3)
  802c60:	0810fe00 	call	810fe0 <__malloc_unlock>
  802c64:	80c00204 	addi	r3,r16,8
  802c68:	003fc006 	br	802b6c <_malloc_r+0x50>
  802c6c:	02c02074 	movhi	r11,129
  802c70:	5ad63604 	addi	r11,r11,22744
  802c74:	8ac5883a 	add	r2,r17,r11
  802c78:	14000317 	ldw	r16,12(r2)
  802c7c:	580f883a 	mov	r7,r11
  802c80:	8806d0fa 	srli	r3,r17,3
  802c84:	14006c26 	beq	r2,r16,802e38 <_malloc_r+0x31c>
  802c88:	80c00117 	ldw	r3,4(r16)
  802c8c:	00bfff04 	movi	r2,-4
  802c90:	81800317 	ldw	r6,12(r16)
  802c94:	1886703a 	and	r3,r3,r2
  802c98:	80c7883a 	add	r3,r16,r3
  802c9c:	18800117 	ldw	r2,4(r3)
  802ca0:	81400217 	ldw	r5,8(r16)
  802ca4:	9009883a 	mov	r4,r18
  802ca8:	10800054 	ori	r2,r2,1
  802cac:	18800115 	stw	r2,4(r3)
  802cb0:	31400215 	stw	r5,8(r6)
  802cb4:	29800315 	stw	r6,12(r5)
  802cb8:	0810fe00 	call	810fe0 <__malloc_unlock>
  802cbc:	80c00204 	addi	r3,r16,8
  802cc0:	003faa06 	br	802b6c <_malloc_r+0x50>
  802cc4:	00800104 	movi	r2,4
  802cc8:	10c0052e 	bgeu	r2,r3,802ce0 <_malloc_r+0x1c4>
  802ccc:	00800504 	movi	r2,20
  802cd0:	10c07836 	bltu	r2,r3,802eb4 <_malloc_r+0x398>
  802cd4:	198016c4 	addi	r6,r3,91
  802cd8:	300490fa 	slli	r2,r6,3
  802cdc:	003fbc06 	br	802bd0 <_malloc_r+0xb4>
  802ce0:	8804d1ba 	srli	r2,r17,6
  802ce4:	11800e04 	addi	r6,r2,56
  802ce8:	300490fa 	slli	r2,r6,3
  802cec:	003fb806 	br	802bd0 <_malloc_r+0xb4>
  802cf0:	00807fc4 	movi	r2,511
  802cf4:	1140bb36 	bltu	r2,r5,802fe4 <_malloc_r+0x4c8>
  802cf8:	2806d0fa 	srli	r3,r5,3
  802cfc:	573ffe04 	addi	fp,r10,-8
  802d00:	00800044 	movi	r2,1
  802d04:	180890fa 	slli	r4,r3,3
  802d08:	1807d0ba 	srai	r3,r3,2
  802d0c:	e1c00117 	ldw	r7,4(fp)
  802d10:	5909883a 	add	r4,r11,r4
  802d14:	21400217 	ldw	r5,8(r4)
  802d18:	10c4983a 	sll	r2,r2,r3
  802d1c:	81000315 	stw	r4,12(r16)
  802d20:	81400215 	stw	r5,8(r16)
  802d24:	388eb03a 	or	r7,r7,r2
  802d28:	2c000315 	stw	r16,12(r5)
  802d2c:	24000215 	stw	r16,8(r4)
  802d30:	e1c00115 	stw	r7,4(fp)
  802d34:	4807883a 	mov	r3,r9
  802d38:	4800cd16 	blt	r9,zero,803070 <_malloc_r+0x554>
  802d3c:	1807d0ba 	srai	r3,r3,2
  802d40:	00800044 	movi	r2,1
  802d44:	10c8983a 	sll	r4,r2,r3
  802d48:	39004436 	bltu	r7,r4,802e5c <_malloc_r+0x340>
  802d4c:	21c4703a 	and	r2,r4,r7
  802d50:	10000a1e 	bne	r2,zero,802d7c <_malloc_r+0x260>
  802d54:	2109883a 	add	r4,r4,r4
  802d58:	00bfff04 	movi	r2,-4
  802d5c:	4884703a 	and	r2,r9,r2
  802d60:	3906703a 	and	r3,r7,r4
  802d64:	12400104 	addi	r9,r2,4
  802d68:	1800041e 	bne	r3,zero,802d7c <_malloc_r+0x260>
  802d6c:	2109883a 	add	r4,r4,r4
  802d70:	3904703a 	and	r2,r7,r4
  802d74:	4a400104 	addi	r9,r9,4
  802d78:	103ffc26 	beq	r2,zero,802d6c <_malloc_r+0x250>
  802d7c:	480490fa 	slli	r2,r9,3
  802d80:	4819883a 	mov	r12,r9
  802d84:	023fff04 	movi	r8,-4
  802d88:	589b883a 	add	r13,r11,r2
  802d8c:	6807883a 	mov	r3,r13
  802d90:	014003c4 	movi	r5,15
  802d94:	1c000317 	ldw	r16,12(r3)
  802d98:	1c00041e 	bne	r3,r16,802dac <_malloc_r+0x290>
  802d9c:	0000a706 	br	80303c <_malloc_r+0x520>
  802da0:	3000ab0e 	bge	r6,zero,803050 <_malloc_r+0x534>
  802da4:	84000317 	ldw	r16,12(r16)
  802da8:	1c00a426 	beq	r3,r16,80303c <_malloc_r+0x520>
  802dac:	80800117 	ldw	r2,4(r16)
  802db0:	1204703a 	and	r2,r2,r8
  802db4:	144dc83a 	sub	r6,r2,r17
  802db8:	29bff90e 	bge	r5,r6,802da0 <_malloc_r+0x284>
  802dbc:	81000317 	ldw	r4,12(r16)
  802dc0:	80c00217 	ldw	r3,8(r16)
  802dc4:	89400054 	ori	r5,r17,1
  802dc8:	8445883a 	add	r2,r16,r17
  802dcc:	20c00215 	stw	r3,8(r4)
  802dd0:	19000315 	stw	r4,12(r3)
  802dd4:	81400115 	stw	r5,4(r16)
  802dd8:	1187883a 	add	r3,r2,r6
  802ddc:	31000054 	ori	r4,r6,1
  802de0:	50800315 	stw	r2,12(r10)
  802de4:	50800215 	stw	r2,8(r10)
  802de8:	19800015 	stw	r6,0(r3)
  802dec:	11000115 	stw	r4,4(r2)
  802df0:	12800215 	stw	r10,8(r2)
  802df4:	12800315 	stw	r10,12(r2)
  802df8:	9009883a 	mov	r4,r18
  802dfc:	0810fe00 	call	810fe0 <__malloc_unlock>
  802e00:	80c00204 	addi	r3,r16,8
  802e04:	003f5906 	br	802b6c <_malloc_r+0x50>
  802e08:	8109883a 	add	r4,r16,r4
  802e0c:	20800117 	ldw	r2,4(r4)
  802e10:	80c00217 	ldw	r3,8(r16)
  802e14:	81400317 	ldw	r5,12(r16)
  802e18:	10800054 	ori	r2,r2,1
  802e1c:	20800115 	stw	r2,4(r4)
  802e20:	28c00215 	stw	r3,8(r5)
  802e24:	19400315 	stw	r5,12(r3)
  802e28:	9009883a 	mov	r4,r18
  802e2c:	0810fe00 	call	810fe0 <__malloc_unlock>
  802e30:	80c00204 	addi	r3,r16,8
  802e34:	003f4d06 	br	802b6c <_malloc_r+0x50>
  802e38:	80800204 	addi	r2,r16,8
  802e3c:	14000317 	ldw	r16,12(r2)
  802e40:	143f911e 	bne	r2,r16,802c88 <_malloc_r+0x16c>
  802e44:	1a400084 	addi	r9,r3,2
  802e48:	003f7306 	br	802c18 <_malloc_r+0xfc>
  802e4c:	88c00054 	ori	r3,r17,1
  802e50:	8445883a 	add	r2,r16,r17
  802e54:	80c00115 	stw	r3,4(r16)
  802e58:	003fdf06 	br	802dd8 <_malloc_r+0x2bc>
  802e5c:	e4000217 	ldw	r16,8(fp)
  802e60:	00bfff04 	movi	r2,-4
  802e64:	80c00117 	ldw	r3,4(r16)
  802e68:	802d883a 	mov	r22,r16
  802e6c:	18aa703a 	and	r21,r3,r2
  802e70:	ac401636 	bltu	r21,r17,802ecc <_malloc_r+0x3b0>
  802e74:	ac49c83a 	sub	r4,r21,r17
  802e78:	008003c4 	movi	r2,15
  802e7c:	1100130e 	bge	r2,r4,802ecc <_malloc_r+0x3b0>
  802e80:	88800054 	ori	r2,r17,1
  802e84:	8447883a 	add	r3,r16,r17
  802e88:	80800115 	stw	r2,4(r16)
  802e8c:	20800054 	ori	r2,r4,1
  802e90:	18800115 	stw	r2,4(r3)
  802e94:	e0c00215 	stw	r3,8(fp)
  802e98:	9009883a 	mov	r4,r18
  802e9c:	0810fe00 	call	810fe0 <__malloc_unlock>
  802ea0:	80c00204 	addi	r3,r16,8
  802ea4:	003f3106 	br	802b6c <_malloc_r+0x50>
  802ea8:	39c00117 	ldw	r7,4(r7)
  802eac:	573ffe04 	addi	fp,r10,-8
  802eb0:	003fa006 	br	802d34 <_malloc_r+0x218>
  802eb4:	00801504 	movi	r2,84
  802eb8:	10c06736 	bltu	r2,r3,803058 <_malloc_r+0x53c>
  802ebc:	8804d33a 	srli	r2,r17,12
  802ec0:	11801b84 	addi	r6,r2,110
  802ec4:	300490fa 	slli	r2,r6,3
  802ec8:	003f4106 	br	802bd0 <_malloc_r+0xb4>
  802ecc:	d0a75e17 	ldw	r2,-25224(gp)
  802ed0:	d0e00717 	ldw	r3,-32740(gp)
  802ed4:	053fffc4 	movi	r20,-1
  802ed8:	10800404 	addi	r2,r2,16
  802edc:	88a7883a 	add	r19,r17,r2
  802ee0:	1d000326 	beq	r3,r20,802ef0 <_malloc_r+0x3d4>
  802ee4:	98c3ffc4 	addi	r3,r19,4095
  802ee8:	00bc0004 	movi	r2,-4096
  802eec:	18a6703a 	and	r19,r3,r2
  802ef0:	9009883a 	mov	r4,r18
  802ef4:	980b883a 	mov	r5,r19
  802ef8:	0803f300 	call	803f30 <_sbrk_r>
  802efc:	1009883a 	mov	r4,r2
  802f00:	15000426 	beq	r2,r20,802f14 <_malloc_r+0x3f8>
  802f04:	854b883a 	add	r5,r16,r21
  802f08:	1029883a 	mov	r20,r2
  802f0c:	11405a2e 	bgeu	r2,r5,803078 <_malloc_r+0x55c>
  802f10:	87000c26 	beq	r16,fp,802f44 <_malloc_r+0x428>
  802f14:	e4000217 	ldw	r16,8(fp)
  802f18:	80c00117 	ldw	r3,4(r16)
  802f1c:	00bfff04 	movi	r2,-4
  802f20:	1884703a 	and	r2,r3,r2
  802f24:	14400336 	bltu	r2,r17,802f34 <_malloc_r+0x418>
  802f28:	1449c83a 	sub	r4,r2,r17
  802f2c:	008003c4 	movi	r2,15
  802f30:	113fd316 	blt	r2,r4,802e80 <_malloc_r+0x364>
  802f34:	9009883a 	mov	r4,r18
  802f38:	0810fe00 	call	810fe0 <__malloc_unlock>
  802f3c:	0007883a 	mov	r3,zero
  802f40:	003f0a06 	br	802b6c <_malloc_r+0x50>
  802f44:	05c020b4 	movhi	r23,130
  802f48:	bde3b904 	addi	r23,r23,-28956
  802f4c:	b8800017 	ldw	r2,0(r23)
  802f50:	988d883a 	add	r6,r19,r2
  802f54:	b9800015 	stw	r6,0(r23)
  802f58:	d0e00717 	ldw	r3,-32740(gp)
  802f5c:	00bfffc4 	movi	r2,-1
  802f60:	18808e26 	beq	r3,r2,80319c <_malloc_r+0x680>
  802f64:	2145c83a 	sub	r2,r4,r5
  802f68:	3085883a 	add	r2,r6,r2
  802f6c:	b8800015 	stw	r2,0(r23)
  802f70:	20c001cc 	andi	r3,r4,7
  802f74:	18005f1e 	bne	r3,zero,8030f4 <_malloc_r+0x5d8>
  802f78:	000b883a 	mov	r5,zero
  802f7c:	a4c5883a 	add	r2,r20,r19
  802f80:	1083ffcc 	andi	r2,r2,4095
  802f84:	00c40004 	movi	r3,4096
  802f88:	1887c83a 	sub	r3,r3,r2
  802f8c:	28e7883a 	add	r19,r5,r3
  802f90:	9009883a 	mov	r4,r18
  802f94:	980b883a 	mov	r5,r19
  802f98:	0803f300 	call	803f30 <_sbrk_r>
  802f9c:	1007883a 	mov	r3,r2
  802fa0:	00bfffc4 	movi	r2,-1
  802fa4:	18807a26 	beq	r3,r2,803190 <_malloc_r+0x674>
  802fa8:	1d05c83a 	sub	r2,r3,r20
  802fac:	9885883a 	add	r2,r19,r2
  802fb0:	10c00054 	ori	r3,r2,1
  802fb4:	b8800017 	ldw	r2,0(r23)
  802fb8:	a021883a 	mov	r16,r20
  802fbc:	a0c00115 	stw	r3,4(r20)
  802fc0:	9885883a 	add	r2,r19,r2
  802fc4:	b8800015 	stw	r2,0(r23)
  802fc8:	e5000215 	stw	r20,8(fp)
  802fcc:	b7003626 	beq	r22,fp,8030a8 <_malloc_r+0x58c>
  802fd0:	018003c4 	movi	r6,15
  802fd4:	35404b36 	bltu	r6,r21,803104 <_malloc_r+0x5e8>
  802fd8:	00800044 	movi	r2,1
  802fdc:	a0800115 	stw	r2,4(r20)
  802fe0:	003fcd06 	br	802f18 <_malloc_r+0x3fc>
  802fe4:	2808d27a 	srli	r4,r5,9
  802fe8:	2000371e 	bne	r4,zero,8030c8 <_malloc_r+0x5ac>
  802fec:	2808d0fa 	srli	r4,r5,3
  802ff0:	200690fa 	slli	r3,r4,3
  802ff4:	1ad1883a 	add	r8,r3,r11
  802ff8:	41800217 	ldw	r6,8(r8)
  802ffc:	41805b26 	beq	r8,r6,80316c <_malloc_r+0x650>
  803000:	30800117 	ldw	r2,4(r6)
  803004:	00ffff04 	movi	r3,-4
  803008:	10c4703a 	and	r2,r2,r3
  80300c:	2880022e 	bgeu	r5,r2,803018 <_malloc_r+0x4fc>
  803010:	31800217 	ldw	r6,8(r6)
  803014:	41bffa1e 	bne	r8,r6,803000 <_malloc_r+0x4e4>
  803018:	32000317 	ldw	r8,12(r6)
  80301c:	39c00117 	ldw	r7,4(r7)
  803020:	82000315 	stw	r8,12(r16)
  803024:	81800215 	stw	r6,8(r16)
  803028:	07002074 	movhi	fp,129
  80302c:	e7163604 	addi	fp,fp,22744
  803030:	34000315 	stw	r16,12(r6)
  803034:	44000215 	stw	r16,8(r8)
  803038:	003f3e06 	br	802d34 <_malloc_r+0x218>
  80303c:	63000044 	addi	r12,r12,1
  803040:	608000cc 	andi	r2,r12,3
  803044:	10005d26 	beq	r2,zero,8031bc <_malloc_r+0x6a0>
  803048:	18c00204 	addi	r3,r3,8
  80304c:	003f5106 	br	802d94 <_malloc_r+0x278>
  803050:	8089883a 	add	r4,r16,r2
  803054:	003f6d06 	br	802e0c <_malloc_r+0x2f0>
  803058:	00805504 	movi	r2,340
  80305c:	10c02036 	bltu	r2,r3,8030e0 <_malloc_r+0x5c4>
  803060:	8804d3fa 	srli	r2,r17,15
  803064:	11801dc4 	addi	r6,r2,119
  803068:	300490fa 	slli	r2,r6,3
  80306c:	003ed806 	br	802bd0 <_malloc_r+0xb4>
  803070:	48c000c4 	addi	r3,r9,3
  803074:	003f3106 	br	802d3c <_malloc_r+0x220>
  803078:	05c020b4 	movhi	r23,130
  80307c:	bde3b904 	addi	r23,r23,-28956
  803080:	b8800017 	ldw	r2,0(r23)
  803084:	988d883a 	add	r6,r19,r2
  803088:	b9800015 	stw	r6,0(r23)
  80308c:	293fb21e 	bne	r5,r4,802f58 <_malloc_r+0x43c>
  803090:	2083ffcc 	andi	r2,r4,4095
  803094:	103fb01e 	bne	r2,zero,802f58 <_malloc_r+0x43c>
  803098:	e4000217 	ldw	r16,8(fp)
  80309c:	9d45883a 	add	r2,r19,r21
  8030a0:	10800054 	ori	r2,r2,1
  8030a4:	80800115 	stw	r2,4(r16)
  8030a8:	b8c00017 	ldw	r3,0(r23)
  8030ac:	d0a75f17 	ldw	r2,-25220(gp)
  8030b0:	10c0012e 	bgeu	r2,r3,8030b8 <_malloc_r+0x59c>
  8030b4:	d0e75f15 	stw	r3,-25220(gp)
  8030b8:	d0a76017 	ldw	r2,-25216(gp)
  8030bc:	10ff962e 	bgeu	r2,r3,802f18 <_malloc_r+0x3fc>
  8030c0:	d0e76015 	stw	r3,-25216(gp)
  8030c4:	003f9406 	br	802f18 <_malloc_r+0x3fc>
  8030c8:	00800104 	movi	r2,4
  8030cc:	11001e36 	bltu	r2,r4,803148 <_malloc_r+0x62c>
  8030d0:	2804d1ba 	srli	r2,r5,6
  8030d4:	11000e04 	addi	r4,r2,56
  8030d8:	200690fa 	slli	r3,r4,3
  8030dc:	003fc506 	br	802ff4 <_malloc_r+0x4d8>
  8030e0:	00815504 	movi	r2,1364
  8030e4:	10c01d2e 	bgeu	r2,r3,80315c <_malloc_r+0x640>
  8030e8:	01801f84 	movi	r6,126
  8030ec:	0080fc04 	movi	r2,1008
  8030f0:	003eb706 	br	802bd0 <_malloc_r+0xb4>
  8030f4:	00800204 	movi	r2,8
  8030f8:	10cbc83a 	sub	r5,r2,r3
  8030fc:	2169883a 	add	r20,r4,r5
  803100:	003f9e06 	br	802f7c <_malloc_r+0x460>
  803104:	00bffe04 	movi	r2,-8
  803108:	a93ffd04 	addi	r4,r21,-12
  80310c:	2088703a 	and	r4,r4,r2
  803110:	b10b883a 	add	r5,r22,r4
  803114:	00c00144 	movi	r3,5
  803118:	28c00215 	stw	r3,8(r5)
  80311c:	28c00115 	stw	r3,4(r5)
  803120:	b0800117 	ldw	r2,4(r22)
  803124:	1080004c 	andi	r2,r2,1
  803128:	2084b03a 	or	r2,r4,r2
  80312c:	b0800115 	stw	r2,4(r22)
  803130:	313fdd2e 	bgeu	r6,r4,8030a8 <_malloc_r+0x58c>
  803134:	b1400204 	addi	r5,r22,8
  803138:	9009883a 	mov	r4,r18
  80313c:	0801b840 	call	801b84 <_free_r>
  803140:	e4000217 	ldw	r16,8(fp)
  803144:	003fd806 	br	8030a8 <_malloc_r+0x58c>
  803148:	00800504 	movi	r2,20
  80314c:	11001536 	bltu	r2,r4,8031a4 <_malloc_r+0x688>
  803150:	210016c4 	addi	r4,r4,91
  803154:	200690fa 	slli	r3,r4,3
  803158:	003fa606 	br	802ff4 <_malloc_r+0x4d8>
  80315c:	8804d4ba 	srli	r2,r17,18
  803160:	11801f04 	addi	r6,r2,124
  803164:	300490fa 	slli	r2,r6,3
  803168:	003e9906 	br	802bd0 <_malloc_r+0xb4>
  80316c:	2009d0ba 	srai	r4,r4,2
  803170:	01402074 	movhi	r5,129
  803174:	29563604 	addi	r5,r5,22744
  803178:	00c00044 	movi	r3,1
  80317c:	28800117 	ldw	r2,4(r5)
  803180:	1906983a 	sll	r3,r3,r4
  803184:	10c4b03a 	or	r2,r2,r3
  803188:	28800115 	stw	r2,4(r5)
  80318c:	003fa306 	br	80301c <_malloc_r+0x500>
  803190:	0027883a 	mov	r19,zero
  803194:	00c00044 	movi	r3,1
  803198:	003f8606 	br	802fb4 <_malloc_r+0x498>
  80319c:	d1200715 	stw	r4,-32740(gp)
  8031a0:	003f7306 	br	802f70 <_malloc_r+0x454>
  8031a4:	00801504 	movi	r2,84
  8031a8:	11001936 	bltu	r2,r4,803210 <_malloc_r+0x6f4>
  8031ac:	2804d33a 	srli	r2,r5,12
  8031b0:	11001b84 	addi	r4,r2,110
  8031b4:	200690fa 	slli	r3,r4,3
  8031b8:	003f8e06 	br	802ff4 <_malloc_r+0x4d8>
  8031bc:	480b883a 	mov	r5,r9
  8031c0:	6807883a 	mov	r3,r13
  8031c4:	288000cc 	andi	r2,r5,3
  8031c8:	18fffe04 	addi	r3,r3,-8
  8031cc:	297fffc4 	addi	r5,r5,-1
  8031d0:	10001526 	beq	r2,zero,803228 <_malloc_r+0x70c>
  8031d4:	18800217 	ldw	r2,8(r3)
  8031d8:	10fffa26 	beq	r2,r3,8031c4 <_malloc_r+0x6a8>
  8031dc:	2109883a 	add	r4,r4,r4
  8031e0:	393f1e36 	bltu	r7,r4,802e5c <_malloc_r+0x340>
  8031e4:	203f1d26 	beq	r4,zero,802e5c <_malloc_r+0x340>
  8031e8:	21c4703a 	and	r2,r4,r7
  8031ec:	10000226 	beq	r2,zero,8031f8 <_malloc_r+0x6dc>
  8031f0:	6013883a 	mov	r9,r12
  8031f4:	003ee106 	br	802d7c <_malloc_r+0x260>
  8031f8:	2109883a 	add	r4,r4,r4
  8031fc:	3904703a 	and	r2,r7,r4
  803200:	63000104 	addi	r12,r12,4
  803204:	103ffc26 	beq	r2,zero,8031f8 <_malloc_r+0x6dc>
  803208:	6013883a 	mov	r9,r12
  80320c:	003edb06 	br	802d7c <_malloc_r+0x260>
  803210:	00805504 	movi	r2,340
  803214:	11000836 	bltu	r2,r4,803238 <_malloc_r+0x71c>
  803218:	2804d3fa 	srli	r2,r5,15
  80321c:	11001dc4 	addi	r4,r2,119
  803220:	200690fa 	slli	r3,r4,3
  803224:	003f7306 	br	802ff4 <_malloc_r+0x4d8>
  803228:	0104303a 	nor	r2,zero,r4
  80322c:	388e703a 	and	r7,r7,r2
  803230:	e1c00115 	stw	r7,4(fp)
  803234:	003fe906 	br	8031dc <_malloc_r+0x6c0>
  803238:	00815504 	movi	r2,1364
  80323c:	1100032e 	bgeu	r2,r4,80324c <_malloc_r+0x730>
  803240:	01001f84 	movi	r4,126
  803244:	00c0fc04 	movi	r3,1008
  803248:	003f6a06 	br	802ff4 <_malloc_r+0x4d8>
  80324c:	2804d4ba 	srli	r2,r5,18
  803250:	11001f04 	addi	r4,r2,124
  803254:	200690fa 	slli	r3,r4,3
  803258:	003f6606 	br	802ff4 <_malloc_r+0x4d8>

0080325c <memchr>:
  80325c:	008000c4 	movi	r2,3
  803260:	29403fcc 	andi	r5,r5,255
  803264:	2007883a 	mov	r3,r4
  803268:	1180022e 	bgeu	r2,r6,803274 <memchr+0x18>
  80326c:	2084703a 	and	r2,r4,r2
  803270:	10000b26 	beq	r2,zero,8032a0 <memchr+0x44>
  803274:	313fffc4 	addi	r4,r6,-1
  803278:	3000051e 	bne	r6,zero,803290 <memchr+0x34>
  80327c:	00002c06 	br	803330 <memchr+0xd4>
  803280:	213fffc4 	addi	r4,r4,-1
  803284:	00bfffc4 	movi	r2,-1
  803288:	18c00044 	addi	r3,r3,1
  80328c:	20802826 	beq	r4,r2,803330 <memchr+0xd4>
  803290:	18800003 	ldbu	r2,0(r3)
  803294:	28bffa1e 	bne	r5,r2,803280 <memchr+0x24>
  803298:	1805883a 	mov	r2,r3
  80329c:	f800283a 	ret
  8032a0:	0011883a 	mov	r8,zero
  8032a4:	0007883a 	mov	r3,zero
  8032a8:	01c00104 	movi	r7,4
  8032ac:	4004923a 	slli	r2,r8,8
  8032b0:	18c00044 	addi	r3,r3,1
  8032b4:	1151883a 	add	r8,r2,r5
  8032b8:	19fffc1e 	bne	r3,r7,8032ac <memchr+0x50>
  8032bc:	02bfbff4 	movhi	r10,65279
  8032c0:	52bfbfc4 	addi	r10,r10,-257
  8032c4:	02602074 	movhi	r9,32897
  8032c8:	4a602004 	addi	r9,r9,-32640
  8032cc:	02c000c4 	movi	r11,3
  8032d0:	20800017 	ldw	r2,0(r4)
  8032d4:	31bfff04 	addi	r6,r6,-4
  8032d8:	200f883a 	mov	r7,r4
  8032dc:	1204f03a 	xor	r2,r2,r8
  8032e0:	1287883a 	add	r3,r2,r10
  8032e4:	1a46703a 	and	r3,r3,r9
  8032e8:	0084303a 	nor	r2,zero,r2
  8032ec:	10c4703a 	and	r2,r2,r3
  8032f0:	10000b26 	beq	r2,zero,803320 <memchr+0xc4>
  8032f4:	20800003 	ldbu	r2,0(r4)
  8032f8:	28800f26 	beq	r5,r2,803338 <memchr+0xdc>
  8032fc:	20800043 	ldbu	r2,1(r4)
  803300:	21c00044 	addi	r7,r4,1
  803304:	28800c26 	beq	r5,r2,803338 <memchr+0xdc>
  803308:	20800083 	ldbu	r2,2(r4)
  80330c:	21c00084 	addi	r7,r4,2
  803310:	28800926 	beq	r5,r2,803338 <memchr+0xdc>
  803314:	208000c3 	ldbu	r2,3(r4)
  803318:	21c000c4 	addi	r7,r4,3
  80331c:	28800626 	beq	r5,r2,803338 <memchr+0xdc>
  803320:	21000104 	addi	r4,r4,4
  803324:	59bfea36 	bltu	r11,r6,8032d0 <memchr+0x74>
  803328:	2007883a 	mov	r3,r4
  80332c:	003fd106 	br	803274 <memchr+0x18>
  803330:	0005883a 	mov	r2,zero
  803334:	f800283a 	ret
  803338:	3805883a 	mov	r2,r7
  80333c:	f800283a 	ret

00803340 <memcpy>:
  803340:	01c003c4 	movi	r7,15
  803344:	2007883a 	mov	r3,r4
  803348:	3980032e 	bgeu	r7,r6,803358 <memcpy+0x18>
  80334c:	2904b03a 	or	r2,r5,r4
  803350:	108000cc 	andi	r2,r2,3
  803354:	10000926 	beq	r2,zero,80337c <memcpy+0x3c>
  803358:	30000626 	beq	r6,zero,803374 <memcpy+0x34>
  80335c:	30cd883a 	add	r6,r6,r3
  803360:	28800003 	ldbu	r2,0(r5)
  803364:	29400044 	addi	r5,r5,1
  803368:	18800005 	stb	r2,0(r3)
  80336c:	18c00044 	addi	r3,r3,1
  803370:	30fffb1e 	bne	r6,r3,803360 <memcpy+0x20>
  803374:	2005883a 	mov	r2,r4
  803378:	f800283a 	ret
  80337c:	3811883a 	mov	r8,r7
  803380:	200f883a 	mov	r7,r4
  803384:	28c00017 	ldw	r3,0(r5)
  803388:	31bffc04 	addi	r6,r6,-16
  80338c:	38c00015 	stw	r3,0(r7)
  803390:	28800117 	ldw	r2,4(r5)
  803394:	38800115 	stw	r2,4(r7)
  803398:	28c00217 	ldw	r3,8(r5)
  80339c:	38c00215 	stw	r3,8(r7)
  8033a0:	28800317 	ldw	r2,12(r5)
  8033a4:	29400404 	addi	r5,r5,16
  8033a8:	38800315 	stw	r2,12(r7)
  8033ac:	39c00404 	addi	r7,r7,16
  8033b0:	41bff436 	bltu	r8,r6,803384 <memcpy+0x44>
  8033b4:	008000c4 	movi	r2,3
  8033b8:	1180072e 	bgeu	r2,r6,8033d8 <memcpy+0x98>
  8033bc:	1007883a 	mov	r3,r2
  8033c0:	28800017 	ldw	r2,0(r5)
  8033c4:	31bfff04 	addi	r6,r6,-4
  8033c8:	29400104 	addi	r5,r5,4
  8033cc:	38800015 	stw	r2,0(r7)
  8033d0:	39c00104 	addi	r7,r7,4
  8033d4:	19bffa36 	bltu	r3,r6,8033c0 <memcpy+0x80>
  8033d8:	3807883a 	mov	r3,r7
  8033dc:	003fde06 	br	803358 <memcpy+0x18>

008033e0 <memmove>:
  8033e0:	2807883a 	mov	r3,r5
  8033e4:	2011883a 	mov	r8,r4
  8033e8:	29000c2e 	bgeu	r5,r4,80341c <memmove+0x3c>
  8033ec:	298f883a 	add	r7,r5,r6
  8033f0:	21c00a2e 	bgeu	r4,r7,80341c <memmove+0x3c>
  8033f4:	30000726 	beq	r6,zero,803414 <memmove+0x34>
  8033f8:	2187883a 	add	r3,r4,r6
  8033fc:	198dc83a 	sub	r6,r3,r6
  803400:	39ffffc4 	addi	r7,r7,-1
  803404:	38800003 	ldbu	r2,0(r7)
  803408:	18ffffc4 	addi	r3,r3,-1
  80340c:	18800005 	stb	r2,0(r3)
  803410:	19bffb1e 	bne	r3,r6,803400 <memmove+0x20>
  803414:	2005883a 	mov	r2,r4
  803418:	f800283a 	ret
  80341c:	01c003c4 	movi	r7,15
  803420:	39800a36 	bltu	r7,r6,80344c <memmove+0x6c>
  803424:	303ffb26 	beq	r6,zero,803414 <memmove+0x34>
  803428:	400f883a 	mov	r7,r8
  80342c:	320d883a 	add	r6,r6,r8
  803430:	28800003 	ldbu	r2,0(r5)
  803434:	29400044 	addi	r5,r5,1
  803438:	38800005 	stb	r2,0(r7)
  80343c:	39c00044 	addi	r7,r7,1
  803440:	39bffb1e 	bne	r7,r6,803430 <memmove+0x50>
  803444:	2005883a 	mov	r2,r4
  803448:	f800283a 	ret
  80344c:	1904b03a 	or	r2,r3,r4
  803450:	108000cc 	andi	r2,r2,3
  803454:	103ff31e 	bne	r2,zero,803424 <memmove+0x44>
  803458:	3811883a 	mov	r8,r7
  80345c:	180b883a 	mov	r5,r3
  803460:	200f883a 	mov	r7,r4
  803464:	28c00017 	ldw	r3,0(r5)
  803468:	31bffc04 	addi	r6,r6,-16
  80346c:	38c00015 	stw	r3,0(r7)
  803470:	28800117 	ldw	r2,4(r5)
  803474:	38800115 	stw	r2,4(r7)
  803478:	28c00217 	ldw	r3,8(r5)
  80347c:	38c00215 	stw	r3,8(r7)
  803480:	28800317 	ldw	r2,12(r5)
  803484:	29400404 	addi	r5,r5,16
  803488:	38800315 	stw	r2,12(r7)
  80348c:	39c00404 	addi	r7,r7,16
  803490:	41bff436 	bltu	r8,r6,803464 <memmove+0x84>
  803494:	008000c4 	movi	r2,3
  803498:	1180072e 	bgeu	r2,r6,8034b8 <memmove+0xd8>
  80349c:	1007883a 	mov	r3,r2
  8034a0:	28800017 	ldw	r2,0(r5)
  8034a4:	31bfff04 	addi	r6,r6,-4
  8034a8:	29400104 	addi	r5,r5,4
  8034ac:	38800015 	stw	r2,0(r7)
  8034b0:	39c00104 	addi	r7,r7,4
  8034b4:	19bffa36 	bltu	r3,r6,8034a0 <memmove+0xc0>
  8034b8:	3811883a 	mov	r8,r7
  8034bc:	003fd906 	br	803424 <memmove+0x44>

008034c0 <memset>:
  8034c0:	008000c4 	movi	r2,3
  8034c4:	29403fcc 	andi	r5,r5,255
  8034c8:	2007883a 	mov	r3,r4
  8034cc:	1180022e 	bgeu	r2,r6,8034d8 <memset+0x18>
  8034d0:	2084703a 	and	r2,r4,r2
  8034d4:	10000826 	beq	r2,zero,8034f8 <memset+0x38>
  8034d8:	30000526 	beq	r6,zero,8034f0 <memset+0x30>
  8034dc:	2805883a 	mov	r2,r5
  8034e0:	30cd883a 	add	r6,r6,r3
  8034e4:	18800005 	stb	r2,0(r3)
  8034e8:	18c00044 	addi	r3,r3,1
  8034ec:	19bffd1e 	bne	r3,r6,8034e4 <memset+0x24>
  8034f0:	2005883a 	mov	r2,r4
  8034f4:	f800283a 	ret
  8034f8:	2804923a 	slli	r2,r5,8
  8034fc:	020003c4 	movi	r8,15
  803500:	200f883a 	mov	r7,r4
  803504:	2884b03a 	or	r2,r5,r2
  803508:	1006943a 	slli	r3,r2,16
  80350c:	10c6b03a 	or	r3,r2,r3
  803510:	41800a2e 	bgeu	r8,r6,80353c <memset+0x7c>
  803514:	4005883a 	mov	r2,r8
  803518:	31bffc04 	addi	r6,r6,-16
  80351c:	38c00015 	stw	r3,0(r7)
  803520:	38c00115 	stw	r3,4(r7)
  803524:	38c00215 	stw	r3,8(r7)
  803528:	38c00315 	stw	r3,12(r7)
  80352c:	39c00404 	addi	r7,r7,16
  803530:	11bff936 	bltu	r2,r6,803518 <memset+0x58>
  803534:	008000c4 	movi	r2,3
  803538:	1180052e 	bgeu	r2,r6,803550 <memset+0x90>
  80353c:	31bfff04 	addi	r6,r6,-4
  803540:	008000c4 	movi	r2,3
  803544:	38c00015 	stw	r3,0(r7)
  803548:	39c00104 	addi	r7,r7,4
  80354c:	11bffb36 	bltu	r2,r6,80353c <memset+0x7c>
  803550:	3807883a 	mov	r3,r7
  803554:	003fe006 	br	8034d8 <memset+0x18>

00803558 <_open_r>:
  803558:	defffd04 	addi	sp,sp,-12
  80355c:	dc000015 	stw	r16,0(sp)
  803560:	040020b4 	movhi	r16,130
  803564:	84239d04 	addi	r16,r16,-29068
  803568:	dc400115 	stw	r17,4(sp)
  80356c:	80000015 	stw	zero,0(r16)
  803570:	2023883a 	mov	r17,r4
  803574:	2809883a 	mov	r4,r5
  803578:	300b883a 	mov	r5,r6
  80357c:	380d883a 	mov	r6,r7
  803580:	dfc00215 	stw	ra,8(sp)
  803584:	08110dc0 	call	8110dc <open>
  803588:	1007883a 	mov	r3,r2
  80358c:	00bfffc4 	movi	r2,-1
  803590:	18800626 	beq	r3,r2,8035ac <_open_r+0x54>
  803594:	1805883a 	mov	r2,r3
  803598:	dfc00217 	ldw	ra,8(sp)
  80359c:	dc400117 	ldw	r17,4(sp)
  8035a0:	dc000017 	ldw	r16,0(sp)
  8035a4:	dec00304 	addi	sp,sp,12
  8035a8:	f800283a 	ret
  8035ac:	80800017 	ldw	r2,0(r16)
  8035b0:	103ff826 	beq	r2,zero,803594 <_open_r+0x3c>
  8035b4:	88800015 	stw	r2,0(r17)
  8035b8:	1805883a 	mov	r2,r3
  8035bc:	dfc00217 	ldw	ra,8(sp)
  8035c0:	dc400117 	ldw	r17,4(sp)
  8035c4:	dc000017 	ldw	r16,0(sp)
  8035c8:	dec00304 	addi	sp,sp,12
  8035cc:	f800283a 	ret

008035d0 <printf>:
  8035d0:	defffb04 	addi	sp,sp,-20
  8035d4:	dfc00115 	stw	ra,4(sp)
  8035d8:	d9400215 	stw	r5,8(sp)
  8035dc:	d9800315 	stw	r6,12(sp)
  8035e0:	d9c00415 	stw	r7,16(sp)
  8035e4:	00802074 	movhi	r2,129
  8035e8:	109c4404 	addi	r2,r2,28944
  8035ec:	10c00017 	ldw	r3,0(r2)
  8035f0:	200b883a 	mov	r5,r4
  8035f4:	d8800204 	addi	r2,sp,8
  8035f8:	19000217 	ldw	r4,8(r3)
  8035fc:	100d883a 	mov	r6,r2
  803600:	d8800015 	stw	r2,0(sp)
  803604:	080624c0 	call	80624c <__vfprintf_internal>
  803608:	dfc00117 	ldw	ra,4(sp)
  80360c:	dec00504 	addi	sp,sp,20
  803610:	f800283a 	ret

00803614 <_printf_r>:
  803614:	defffc04 	addi	sp,sp,-16
  803618:	dfc00115 	stw	ra,4(sp)
  80361c:	d9800215 	stw	r6,8(sp)
  803620:	d9c00315 	stw	r7,12(sp)
  803624:	280d883a 	mov	r6,r5
  803628:	21400217 	ldw	r5,8(r4)
  80362c:	d8c00204 	addi	r3,sp,8
  803630:	180f883a 	mov	r7,r3
  803634:	d8c00015 	stw	r3,0(sp)
  803638:	08043a00 	call	8043a0 <___vfprintf_internal_r>
  80363c:	dfc00117 	ldw	ra,4(sp)
  803640:	dec00404 	addi	sp,sp,16
  803644:	f800283a 	ret

00803648 <_puts_r>:
  803648:	defff604 	addi	sp,sp,-40
  80364c:	dc400715 	stw	r17,28(sp)
  803650:	2023883a 	mov	r17,r4
  803654:	2809883a 	mov	r4,r5
  803658:	dfc00915 	stw	ra,36(sp)
  80365c:	dcc00815 	stw	r19,32(sp)
  803660:	2827883a 	mov	r19,r5
  803664:	08042d40 	call	8042d4 <strlen>
  803668:	89400217 	ldw	r5,8(r17)
  80366c:	00c02074 	movhi	r3,129
  803670:	18d38a04 	addi	r3,r3,20008
  803674:	01c00044 	movi	r7,1
  803678:	12000044 	addi	r8,r2,1
  80367c:	d8c00515 	stw	r3,20(sp)
  803680:	d9c00615 	stw	r7,24(sp)
  803684:	d8c00304 	addi	r3,sp,12
  803688:	01c00084 	movi	r7,2
  80368c:	8809883a 	mov	r4,r17
  803690:	d80d883a 	mov	r6,sp
  803694:	d8c00015 	stw	r3,0(sp)
  803698:	dcc00315 	stw	r19,12(sp)
  80369c:	da000215 	stw	r8,8(sp)
  8036a0:	d9c00115 	stw	r7,4(sp)
  8036a4:	d8800415 	stw	r2,16(sp)
  8036a8:	080236c0 	call	80236c <__sfvwrite_r>
  8036ac:	00ffffc4 	movi	r3,-1
  8036b0:	10000626 	beq	r2,zero,8036cc <_puts_r+0x84>
  8036b4:	1805883a 	mov	r2,r3
  8036b8:	dfc00917 	ldw	ra,36(sp)
  8036bc:	dcc00817 	ldw	r19,32(sp)
  8036c0:	dc400717 	ldw	r17,28(sp)
  8036c4:	dec00a04 	addi	sp,sp,40
  8036c8:	f800283a 	ret
  8036cc:	00c00284 	movi	r3,10
  8036d0:	1805883a 	mov	r2,r3
  8036d4:	dfc00917 	ldw	ra,36(sp)
  8036d8:	dcc00817 	ldw	r19,32(sp)
  8036dc:	dc400717 	ldw	r17,28(sp)
  8036e0:	dec00a04 	addi	sp,sp,40
  8036e4:	f800283a 	ret

008036e8 <puts>:
  8036e8:	00802074 	movhi	r2,129
  8036ec:	109c4404 	addi	r2,r2,28944
  8036f0:	200b883a 	mov	r5,r4
  8036f4:	11000017 	ldw	r4,0(r2)
  8036f8:	08036481 	jmpi	803648 <_puts_r>

008036fc <_realloc_r>:
  8036fc:	defff404 	addi	sp,sp,-48
  803700:	dd800815 	stw	r22,32(sp)
  803704:	dc800415 	stw	r18,16(sp)
  803708:	dc400315 	stw	r17,12(sp)
  80370c:	dfc00b15 	stw	ra,44(sp)
  803710:	df000a15 	stw	fp,40(sp)
  803714:	ddc00915 	stw	r23,36(sp)
  803718:	dd400715 	stw	r21,28(sp)
  80371c:	dd000615 	stw	r20,24(sp)
  803720:	dcc00515 	stw	r19,20(sp)
  803724:	dc000215 	stw	r16,8(sp)
  803728:	2825883a 	mov	r18,r5
  80372c:	3023883a 	mov	r17,r6
  803730:	202d883a 	mov	r22,r4
  803734:	2800c926 	beq	r5,zero,803a5c <_realloc_r+0x360>
  803738:	0810fc00 	call	810fc0 <__malloc_lock>
  80373c:	943ffe04 	addi	r16,r18,-8
  803740:	88c002c4 	addi	r3,r17,11
  803744:	00800584 	movi	r2,22
  803748:	82000117 	ldw	r8,4(r16)
  80374c:	10c01b2e 	bgeu	r2,r3,8037bc <_realloc_r+0xc0>
  803750:	00bffe04 	movi	r2,-8
  803754:	188e703a 	and	r7,r3,r2
  803758:	3839883a 	mov	fp,r7
  80375c:	38001a16 	blt	r7,zero,8037c8 <_realloc_r+0xcc>
  803760:	e4401936 	bltu	fp,r17,8037c8 <_realloc_r+0xcc>
  803764:	013fff04 	movi	r4,-4
  803768:	4126703a 	and	r19,r8,r4
  80376c:	99c02616 	blt	r19,r7,803808 <_realloc_r+0x10c>
  803770:	802b883a 	mov	r21,r16
  803774:	9829883a 	mov	r20,r19
  803778:	84000204 	addi	r16,r16,8
  80377c:	a80f883a 	mov	r7,r21
  803780:	a70dc83a 	sub	r6,r20,fp
  803784:	008003c4 	movi	r2,15
  803788:	1180c136 	bltu	r2,r6,803a90 <_realloc_r+0x394>
  80378c:	38800117 	ldw	r2,4(r7)
  803790:	a549883a 	add	r4,r20,r21
  803794:	1080004c 	andi	r2,r2,1
  803798:	a084b03a 	or	r2,r20,r2
  80379c:	38800115 	stw	r2,4(r7)
  8037a0:	20c00117 	ldw	r3,4(r4)
  8037a4:	18c00054 	ori	r3,r3,1
  8037a8:	20c00115 	stw	r3,4(r4)
  8037ac:	b009883a 	mov	r4,r22
  8037b0:	0810fe00 	call	810fe0 <__malloc_unlock>
  8037b4:	8023883a 	mov	r17,r16
  8037b8:	00000606 	br	8037d4 <_realloc_r+0xd8>
  8037bc:	01c00404 	movi	r7,16
  8037c0:	3839883a 	mov	fp,r7
  8037c4:	e47fe72e 	bgeu	fp,r17,803764 <_realloc_r+0x68>
  8037c8:	00800304 	movi	r2,12
  8037cc:	0023883a 	mov	r17,zero
  8037d0:	b0800015 	stw	r2,0(r22)
  8037d4:	8805883a 	mov	r2,r17
  8037d8:	dfc00b17 	ldw	ra,44(sp)
  8037dc:	df000a17 	ldw	fp,40(sp)
  8037e0:	ddc00917 	ldw	r23,36(sp)
  8037e4:	dd800817 	ldw	r22,32(sp)
  8037e8:	dd400717 	ldw	r21,28(sp)
  8037ec:	dd000617 	ldw	r20,24(sp)
  8037f0:	dcc00517 	ldw	r19,20(sp)
  8037f4:	dc800417 	ldw	r18,16(sp)
  8037f8:	dc400317 	ldw	r17,12(sp)
  8037fc:	dc000217 	ldw	r16,8(sp)
  803800:	dec00c04 	addi	sp,sp,48
  803804:	f800283a 	ret
  803808:	00802074 	movhi	r2,129
  80380c:	10963604 	addi	r2,r2,22744
  803810:	12400217 	ldw	r9,8(r2)
  803814:	84cd883a 	add	r6,r16,r19
  803818:	802b883a 	mov	r21,r16
  80381c:	3240b926 	beq	r6,r9,803b04 <_realloc_r+0x408>
  803820:	31400117 	ldw	r5,4(r6)
  803824:	00bfff84 	movi	r2,-2
  803828:	2884703a 	and	r2,r5,r2
  80382c:	1185883a 	add	r2,r2,r6
  803830:	10c00117 	ldw	r3,4(r2)
  803834:	18c0004c 	andi	r3,r3,1
  803838:	1807003a 	cmpeq	r3,r3,zero
  80383c:	1800a326 	beq	r3,zero,803acc <_realloc_r+0x3d0>
  803840:	2908703a 	and	r4,r5,r4
  803844:	9929883a 	add	r20,r19,r4
  803848:	a1c0a30e 	bge	r20,r7,803ad8 <_realloc_r+0x3dc>
  80384c:	4080004c 	andi	r2,r8,1
  803850:	1000551e 	bne	r2,zero,8039a8 <_realloc_r+0x2ac>
  803854:	80800017 	ldw	r2,0(r16)
  803858:	80afc83a 	sub	r23,r16,r2
  80385c:	b8c00117 	ldw	r3,4(r23)
  803860:	00bfff04 	movi	r2,-4
  803864:	1884703a 	and	r2,r3,r2
  803868:	30002e26 	beq	r6,zero,803924 <_realloc_r+0x228>
  80386c:	3240b926 	beq	r6,r9,803b54 <_realloc_r+0x458>
  803870:	98a9883a 	add	r20,r19,r2
  803874:	2509883a 	add	r4,r4,r20
  803878:	d9000015 	stw	r4,0(sp)
  80387c:	21c02a16 	blt	r4,r7,803928 <_realloc_r+0x22c>
  803880:	30800317 	ldw	r2,12(r6)
  803884:	30c00217 	ldw	r3,8(r6)
  803888:	01400904 	movi	r5,36
  80388c:	99bfff04 	addi	r6,r19,-4
  803890:	18800315 	stw	r2,12(r3)
  803894:	10c00215 	stw	r3,8(r2)
  803898:	b9000317 	ldw	r4,12(r23)
  80389c:	b8800217 	ldw	r2,8(r23)
  8038a0:	b82b883a 	mov	r21,r23
  8038a4:	bc000204 	addi	r16,r23,8
  8038a8:	20800215 	stw	r2,8(r4)
  8038ac:	11000315 	stw	r4,12(r2)
  8038b0:	2980e436 	bltu	r5,r6,803c44 <_realloc_r+0x548>
  8038b4:	008004c4 	movi	r2,19
  8038b8:	9009883a 	mov	r4,r18
  8038bc:	8011883a 	mov	r8,r16
  8038c0:	11800f2e 	bgeu	r2,r6,803900 <_realloc_r+0x204>
  8038c4:	90800017 	ldw	r2,0(r18)
  8038c8:	ba000404 	addi	r8,r23,16
  8038cc:	91000204 	addi	r4,r18,8
  8038d0:	b8800215 	stw	r2,8(r23)
  8038d4:	90c00117 	ldw	r3,4(r18)
  8038d8:	008006c4 	movi	r2,27
  8038dc:	b8c00315 	stw	r3,12(r23)
  8038e0:	1180072e 	bgeu	r2,r6,803900 <_realloc_r+0x204>
  8038e4:	90c00217 	ldw	r3,8(r18)
  8038e8:	ba000604 	addi	r8,r23,24
  8038ec:	91000404 	addi	r4,r18,16
  8038f0:	b8c00415 	stw	r3,16(r23)
  8038f4:	90800317 	ldw	r2,12(r18)
  8038f8:	b8800515 	stw	r2,20(r23)
  8038fc:	3140e726 	beq	r6,r5,803c9c <_realloc_r+0x5a0>
  803900:	20800017 	ldw	r2,0(r4)
  803904:	dd000017 	ldw	r20,0(sp)
  803908:	b80f883a 	mov	r7,r23
  80390c:	40800015 	stw	r2,0(r8)
  803910:	20c00117 	ldw	r3,4(r4)
  803914:	40c00115 	stw	r3,4(r8)
  803918:	20800217 	ldw	r2,8(r4)
  80391c:	40800215 	stw	r2,8(r8)
  803920:	003f9706 	br	803780 <_realloc_r+0x84>
  803924:	98a9883a 	add	r20,r19,r2
  803928:	a1c01f16 	blt	r20,r7,8039a8 <_realloc_r+0x2ac>
  80392c:	b8c00317 	ldw	r3,12(r23)
  803930:	b8800217 	ldw	r2,8(r23)
  803934:	99bfff04 	addi	r6,r19,-4
  803938:	01400904 	movi	r5,36
  80393c:	b82b883a 	mov	r21,r23
  803940:	18800215 	stw	r2,8(r3)
  803944:	10c00315 	stw	r3,12(r2)
  803948:	bc000204 	addi	r16,r23,8
  80394c:	2980c336 	bltu	r5,r6,803c5c <_realloc_r+0x560>
  803950:	008004c4 	movi	r2,19
  803954:	9009883a 	mov	r4,r18
  803958:	8011883a 	mov	r8,r16
  80395c:	11800f2e 	bgeu	r2,r6,80399c <_realloc_r+0x2a0>
  803960:	90800017 	ldw	r2,0(r18)
  803964:	ba000404 	addi	r8,r23,16
  803968:	91000204 	addi	r4,r18,8
  80396c:	b8800215 	stw	r2,8(r23)
  803970:	90c00117 	ldw	r3,4(r18)
  803974:	008006c4 	movi	r2,27
  803978:	b8c00315 	stw	r3,12(r23)
  80397c:	1180072e 	bgeu	r2,r6,80399c <_realloc_r+0x2a0>
  803980:	90c00217 	ldw	r3,8(r18)
  803984:	ba000604 	addi	r8,r23,24
  803988:	91000404 	addi	r4,r18,16
  80398c:	b8c00415 	stw	r3,16(r23)
  803990:	90800317 	ldw	r2,12(r18)
  803994:	b8800515 	stw	r2,20(r23)
  803998:	3140c726 	beq	r6,r5,803cb8 <_realloc_r+0x5bc>
  80399c:	20800017 	ldw	r2,0(r4)
  8039a0:	b80f883a 	mov	r7,r23
  8039a4:	003fd906 	br	80390c <_realloc_r+0x210>
  8039a8:	880b883a 	mov	r5,r17
  8039ac:	b009883a 	mov	r4,r22
  8039b0:	0802b1c0 	call	802b1c <_malloc_r>
  8039b4:	1023883a 	mov	r17,r2
  8039b8:	10002526 	beq	r2,zero,803a50 <_realloc_r+0x354>
  8039bc:	80800117 	ldw	r2,4(r16)
  8039c0:	00ffff84 	movi	r3,-2
  8039c4:	893ffe04 	addi	r4,r17,-8
  8039c8:	10c4703a 	and	r2,r2,r3
  8039cc:	8085883a 	add	r2,r16,r2
  8039d0:	20809526 	beq	r4,r2,803c28 <_realloc_r+0x52c>
  8039d4:	99bfff04 	addi	r6,r19,-4
  8039d8:	01c00904 	movi	r7,36
  8039dc:	39804536 	bltu	r7,r6,803af4 <_realloc_r+0x3f8>
  8039e0:	008004c4 	movi	r2,19
  8039e4:	9009883a 	mov	r4,r18
  8039e8:	880b883a 	mov	r5,r17
  8039ec:	11800f2e 	bgeu	r2,r6,803a2c <_realloc_r+0x330>
  8039f0:	90800017 	ldw	r2,0(r18)
  8039f4:	89400204 	addi	r5,r17,8
  8039f8:	91000204 	addi	r4,r18,8
  8039fc:	88800015 	stw	r2,0(r17)
  803a00:	90c00117 	ldw	r3,4(r18)
  803a04:	008006c4 	movi	r2,27
  803a08:	88c00115 	stw	r3,4(r17)
  803a0c:	1180072e 	bgeu	r2,r6,803a2c <_realloc_r+0x330>
  803a10:	90c00217 	ldw	r3,8(r18)
  803a14:	89400404 	addi	r5,r17,16
  803a18:	91000404 	addi	r4,r18,16
  803a1c:	88c00215 	stw	r3,8(r17)
  803a20:	90800317 	ldw	r2,12(r18)
  803a24:	88800315 	stw	r2,12(r17)
  803a28:	31c09126 	beq	r6,r7,803c70 <_realloc_r+0x574>
  803a2c:	20800017 	ldw	r2,0(r4)
  803a30:	28800015 	stw	r2,0(r5)
  803a34:	20c00117 	ldw	r3,4(r4)
  803a38:	28c00115 	stw	r3,4(r5)
  803a3c:	20800217 	ldw	r2,8(r4)
  803a40:	28800215 	stw	r2,8(r5)
  803a44:	900b883a 	mov	r5,r18
  803a48:	b009883a 	mov	r4,r22
  803a4c:	0801b840 	call	801b84 <_free_r>
  803a50:	b009883a 	mov	r4,r22
  803a54:	0810fe00 	call	810fe0 <__malloc_unlock>
  803a58:	003f5e06 	br	8037d4 <_realloc_r+0xd8>
  803a5c:	300b883a 	mov	r5,r6
  803a60:	dfc00b17 	ldw	ra,44(sp)
  803a64:	df000a17 	ldw	fp,40(sp)
  803a68:	ddc00917 	ldw	r23,36(sp)
  803a6c:	dd800817 	ldw	r22,32(sp)
  803a70:	dd400717 	ldw	r21,28(sp)
  803a74:	dd000617 	ldw	r20,24(sp)
  803a78:	dcc00517 	ldw	r19,20(sp)
  803a7c:	dc800417 	ldw	r18,16(sp)
  803a80:	dc400317 	ldw	r17,12(sp)
  803a84:	dc000217 	ldw	r16,8(sp)
  803a88:	dec00c04 	addi	sp,sp,48
  803a8c:	0802b1c1 	jmpi	802b1c <_malloc_r>
  803a90:	38800117 	ldw	r2,4(r7)
  803a94:	e54b883a 	add	r5,fp,r21
  803a98:	31000054 	ori	r4,r6,1
  803a9c:	1080004c 	andi	r2,r2,1
  803aa0:	1704b03a 	or	r2,r2,fp
  803aa4:	38800115 	stw	r2,4(r7)
  803aa8:	29000115 	stw	r4,4(r5)
  803aac:	2987883a 	add	r3,r5,r6
  803ab0:	18800117 	ldw	r2,4(r3)
  803ab4:	29400204 	addi	r5,r5,8
  803ab8:	b009883a 	mov	r4,r22
  803abc:	10800054 	ori	r2,r2,1
  803ac0:	18800115 	stw	r2,4(r3)
  803ac4:	0801b840 	call	801b84 <_free_r>
  803ac8:	003f3806 	br	8037ac <_realloc_r+0xb0>
  803acc:	000d883a 	mov	r6,zero
  803ad0:	0009883a 	mov	r4,zero
  803ad4:	003f5d06 	br	80384c <_realloc_r+0x150>
  803ad8:	30c00217 	ldw	r3,8(r6)
  803adc:	30800317 	ldw	r2,12(r6)
  803ae0:	800f883a 	mov	r7,r16
  803ae4:	84000204 	addi	r16,r16,8
  803ae8:	10c00215 	stw	r3,8(r2)
  803aec:	18800315 	stw	r2,12(r3)
  803af0:	003f2306 	br	803780 <_realloc_r+0x84>
  803af4:	8809883a 	mov	r4,r17
  803af8:	900b883a 	mov	r5,r18
  803afc:	08033e00 	call	8033e0 <memmove>
  803b00:	003fd006 	br	803a44 <_realloc_r+0x348>
  803b04:	30800117 	ldw	r2,4(r6)
  803b08:	e0c00404 	addi	r3,fp,16
  803b0c:	1108703a 	and	r4,r2,r4
  803b10:	9905883a 	add	r2,r19,r4
  803b14:	10ff4d16 	blt	r2,r3,80384c <_realloc_r+0x150>
  803b18:	1705c83a 	sub	r2,r2,fp
  803b1c:	870b883a 	add	r5,r16,fp
  803b20:	10800054 	ori	r2,r2,1
  803b24:	28800115 	stw	r2,4(r5)
  803b28:	80c00117 	ldw	r3,4(r16)
  803b2c:	00802074 	movhi	r2,129
  803b30:	10963604 	addi	r2,r2,22744
  803b34:	b009883a 	mov	r4,r22
  803b38:	18c0004c 	andi	r3,r3,1
  803b3c:	e0c6b03a 	or	r3,fp,r3
  803b40:	11400215 	stw	r5,8(r2)
  803b44:	80c00115 	stw	r3,4(r16)
  803b48:	0810fe00 	call	810fe0 <__malloc_unlock>
  803b4c:	84400204 	addi	r17,r16,8
  803b50:	003f2006 	br	8037d4 <_realloc_r+0xd8>
  803b54:	98a9883a 	add	r20,r19,r2
  803b58:	2509883a 	add	r4,r4,r20
  803b5c:	e0800404 	addi	r2,fp,16
  803b60:	d9000115 	stw	r4,4(sp)
  803b64:	20bf7016 	blt	r4,r2,803928 <_realloc_r+0x22c>
  803b68:	b8c00317 	ldw	r3,12(r23)
  803b6c:	b8800217 	ldw	r2,8(r23)
  803b70:	99bfff04 	addi	r6,r19,-4
  803b74:	01400904 	movi	r5,36
  803b78:	18800215 	stw	r2,8(r3)
  803b7c:	10c00315 	stw	r3,12(r2)
  803b80:	bc400204 	addi	r17,r23,8
  803b84:	29804136 	bltu	r5,r6,803c8c <_realloc_r+0x590>
  803b88:	008004c4 	movi	r2,19
  803b8c:	9009883a 	mov	r4,r18
  803b90:	880f883a 	mov	r7,r17
  803b94:	11800f2e 	bgeu	r2,r6,803bd4 <_realloc_r+0x4d8>
  803b98:	90800017 	ldw	r2,0(r18)
  803b9c:	b9c00404 	addi	r7,r23,16
  803ba0:	91000204 	addi	r4,r18,8
  803ba4:	b8800215 	stw	r2,8(r23)
  803ba8:	90c00117 	ldw	r3,4(r18)
  803bac:	008006c4 	movi	r2,27
  803bb0:	b8c00315 	stw	r3,12(r23)
  803bb4:	1180072e 	bgeu	r2,r6,803bd4 <_realloc_r+0x4d8>
  803bb8:	90c00217 	ldw	r3,8(r18)
  803bbc:	b9c00604 	addi	r7,r23,24
  803bc0:	91000404 	addi	r4,r18,16
  803bc4:	b8c00415 	stw	r3,16(r23)
  803bc8:	90800317 	ldw	r2,12(r18)
  803bcc:	b8800515 	stw	r2,20(r23)
  803bd0:	31404026 	beq	r6,r5,803cd4 <_realloc_r+0x5d8>
  803bd4:	20800017 	ldw	r2,0(r4)
  803bd8:	38800015 	stw	r2,0(r7)
  803bdc:	20c00117 	ldw	r3,4(r4)
  803be0:	38c00115 	stw	r3,4(r7)
  803be4:	20800217 	ldw	r2,8(r4)
  803be8:	38800215 	stw	r2,8(r7)
  803bec:	d8c00117 	ldw	r3,4(sp)
  803bf0:	bf0b883a 	add	r5,r23,fp
  803bf4:	b009883a 	mov	r4,r22
  803bf8:	1f05c83a 	sub	r2,r3,fp
  803bfc:	10800054 	ori	r2,r2,1
  803c00:	28800115 	stw	r2,4(r5)
  803c04:	b8c00117 	ldw	r3,4(r23)
  803c08:	00802074 	movhi	r2,129
  803c0c:	10963604 	addi	r2,r2,22744
  803c10:	11400215 	stw	r5,8(r2)
  803c14:	18c0004c 	andi	r3,r3,1
  803c18:	e0c6b03a 	or	r3,fp,r3
  803c1c:	b8c00115 	stw	r3,4(r23)
  803c20:	0810fe00 	call	810fe0 <__malloc_unlock>
  803c24:	003eeb06 	br	8037d4 <_realloc_r+0xd8>
  803c28:	20800117 	ldw	r2,4(r4)
  803c2c:	00ffff04 	movi	r3,-4
  803c30:	800f883a 	mov	r7,r16
  803c34:	10c4703a 	and	r2,r2,r3
  803c38:	98a9883a 	add	r20,r19,r2
  803c3c:	84000204 	addi	r16,r16,8
  803c40:	003ecf06 	br	803780 <_realloc_r+0x84>
  803c44:	900b883a 	mov	r5,r18
  803c48:	8009883a 	mov	r4,r16
  803c4c:	08033e00 	call	8033e0 <memmove>
  803c50:	dd000017 	ldw	r20,0(sp)
  803c54:	b80f883a 	mov	r7,r23
  803c58:	003ec906 	br	803780 <_realloc_r+0x84>
  803c5c:	900b883a 	mov	r5,r18
  803c60:	8009883a 	mov	r4,r16
  803c64:	08033e00 	call	8033e0 <memmove>
  803c68:	b80f883a 	mov	r7,r23
  803c6c:	003ec406 	br	803780 <_realloc_r+0x84>
  803c70:	90c00417 	ldw	r3,16(r18)
  803c74:	89400604 	addi	r5,r17,24
  803c78:	91000604 	addi	r4,r18,24
  803c7c:	88c00415 	stw	r3,16(r17)
  803c80:	90800517 	ldw	r2,20(r18)
  803c84:	88800515 	stw	r2,20(r17)
  803c88:	003f6806 	br	803a2c <_realloc_r+0x330>
  803c8c:	900b883a 	mov	r5,r18
  803c90:	8809883a 	mov	r4,r17
  803c94:	08033e00 	call	8033e0 <memmove>
  803c98:	003fd406 	br	803bec <_realloc_r+0x4f0>
  803c9c:	90c00417 	ldw	r3,16(r18)
  803ca0:	91000604 	addi	r4,r18,24
  803ca4:	ba000804 	addi	r8,r23,32
  803ca8:	b8c00615 	stw	r3,24(r23)
  803cac:	90800517 	ldw	r2,20(r18)
  803cb0:	b8800715 	stw	r2,28(r23)
  803cb4:	003f1206 	br	803900 <_realloc_r+0x204>
  803cb8:	90c00417 	ldw	r3,16(r18)
  803cbc:	91000604 	addi	r4,r18,24
  803cc0:	ba000804 	addi	r8,r23,32
  803cc4:	b8c00615 	stw	r3,24(r23)
  803cc8:	90800517 	ldw	r2,20(r18)
  803ccc:	b8800715 	stw	r2,28(r23)
  803cd0:	003f3206 	br	80399c <_realloc_r+0x2a0>
  803cd4:	90c00417 	ldw	r3,16(r18)
  803cd8:	91000604 	addi	r4,r18,24
  803cdc:	b9c00804 	addi	r7,r23,32
  803ce0:	b8c00615 	stw	r3,24(r23)
  803ce4:	90800517 	ldw	r2,20(r18)
  803ce8:	b8800715 	stw	r2,28(r23)
  803cec:	003fb906 	br	803bd4 <_realloc_r+0x4d8>

00803cf0 <__srefill_r>:
  803cf0:	defffd04 	addi	sp,sp,-12
  803cf4:	dc400115 	stw	r17,4(sp)
  803cf8:	dc000015 	stw	r16,0(sp)
  803cfc:	dfc00215 	stw	ra,8(sp)
  803d00:	2023883a 	mov	r17,r4
  803d04:	2821883a 	mov	r16,r5
  803d08:	20000226 	beq	r4,zero,803d14 <__srefill_r+0x24>
  803d0c:	20800e17 	ldw	r2,56(r4)
  803d10:	10004126 	beq	r2,zero,803e18 <__srefill_r+0x128>
  803d14:	80c0030b 	ldhu	r3,12(r16)
  803d18:	80000115 	stw	zero,4(r16)
  803d1c:	1880080c 	andi	r2,r3,32
  803d20:	1000361e 	bne	r2,zero,803dfc <__srefill_r+0x10c>
  803d24:	1880010c 	andi	r2,r3,4
  803d28:	1000211e 	bne	r2,zero,803db0 <__srefill_r+0xc0>
  803d2c:	1880040c 	andi	r2,r3,16
  803d30:	10005026 	beq	r2,zero,803e74 <__srefill_r+0x184>
  803d34:	1880020c 	andi	r2,r3,8
  803d38:	1000541e 	bne	r2,zero,803e8c <__srefill_r+0x19c>
  803d3c:	8080030b 	ldhu	r2,12(r16)
  803d40:	10800114 	ori	r2,r2,4
  803d44:	8080030d 	sth	r2,12(r16)
  803d48:	80800417 	ldw	r2,16(r16)
  803d4c:	10004526 	beq	r2,zero,803e64 <__srefill_r+0x174>
  803d50:	8080030b 	ldhu	r2,12(r16)
  803d54:	108000cc 	andi	r2,r2,3
  803d58:	1000361e 	bne	r2,zero,803e34 <__srefill_r+0x144>
  803d5c:	81800417 	ldw	r6,16(r16)
  803d60:	80c00817 	ldw	r3,32(r16)
  803d64:	81400717 	ldw	r5,28(r16)
  803d68:	81c00517 	ldw	r7,20(r16)
  803d6c:	8809883a 	mov	r4,r17
  803d70:	81800015 	stw	r6,0(r16)
  803d74:	183ee83a 	callr	r3
  803d78:	80c0030b 	ldhu	r3,12(r16)
  803d7c:	1009883a 	mov	r4,r2
  803d80:	80800115 	stw	r2,4(r16)
  803d84:	00b7ffc4 	movi	r2,-8193
  803d88:	1884703a 	and	r2,r3,r2
  803d8c:	8080030d 	sth	r2,12(r16)
  803d90:	0100230e 	bge	zero,r4,803e20 <__srefill_r+0x130>
  803d94:	0009883a 	mov	r4,zero
  803d98:	2005883a 	mov	r2,r4
  803d9c:	dfc00217 	ldw	ra,8(sp)
  803da0:	dc400117 	ldw	r17,4(sp)
  803da4:	dc000017 	ldw	r16,0(sp)
  803da8:	dec00304 	addi	sp,sp,12
  803dac:	f800283a 	ret
  803db0:	81400c17 	ldw	r5,48(r16)
  803db4:	283fe426 	beq	r5,zero,803d48 <__srefill_r+0x58>
  803db8:	80801004 	addi	r2,r16,64
  803dbc:	28800226 	beq	r5,r2,803dc8 <__srefill_r+0xd8>
  803dc0:	8809883a 	mov	r4,r17
  803dc4:	0801b840 	call	801b84 <_free_r>
  803dc8:	80800f17 	ldw	r2,60(r16)
  803dcc:	80000c15 	stw	zero,48(r16)
  803dd0:	80800115 	stw	r2,4(r16)
  803dd4:	103fdc26 	beq	r2,zero,803d48 <__srefill_r+0x58>
  803dd8:	80800e17 	ldw	r2,56(r16)
  803ddc:	0009883a 	mov	r4,zero
  803de0:	80800015 	stw	r2,0(r16)
  803de4:	2005883a 	mov	r2,r4
  803de8:	dfc00217 	ldw	ra,8(sp)
  803dec:	dc400117 	ldw	r17,4(sp)
  803df0:	dc000017 	ldw	r16,0(sp)
  803df4:	dec00304 	addi	sp,sp,12
  803df8:	f800283a 	ret
  803dfc:	013fffc4 	movi	r4,-1
  803e00:	2005883a 	mov	r2,r4
  803e04:	dfc00217 	ldw	ra,8(sp)
  803e08:	dc400117 	ldw	r17,4(sp)
  803e0c:	dc000017 	ldw	r16,0(sp)
  803e10:	dec00304 	addi	sp,sp,12
  803e14:	f800283a 	ret
  803e18:	08016000 	call	801600 <__sinit>
  803e1c:	003fbd06 	br	803d14 <__srefill_r+0x24>
  803e20:	20000b1e 	bne	r4,zero,803e50 <__srefill_r+0x160>
  803e24:	10800814 	ori	r2,r2,32
  803e28:	013fffc4 	movi	r4,-1
  803e2c:	8080030d 	sth	r2,12(r16)
  803e30:	003fd906 	br	803d98 <__srefill_r+0xa8>
  803e34:	00802074 	movhi	r2,129
  803e38:	109c4504 	addi	r2,r2,28948
  803e3c:	11000017 	ldw	r4,0(r2)
  803e40:	01402034 	movhi	r5,128
  803e44:	294fad04 	addi	r5,r5,16052
  803e48:	08028d00 	call	8028d0 <_fwalk>
  803e4c:	003fc306 	br	803d5c <__srefill_r+0x6c>
  803e50:	10801014 	ori	r2,r2,64
  803e54:	013fffc4 	movi	r4,-1
  803e58:	8080030d 	sth	r2,12(r16)
  803e5c:	80000115 	stw	zero,4(r16)
  803e60:	003fcd06 	br	803d98 <__srefill_r+0xa8>
  803e64:	8809883a 	mov	r4,r17
  803e68:	800b883a 	mov	r5,r16
  803e6c:	08029880 	call	802988 <__smakebuf_r>
  803e70:	003fb706 	br	803d50 <__srefill_r+0x60>
  803e74:	18c01014 	ori	r3,r3,64
  803e78:	00800244 	movi	r2,9
  803e7c:	013fffc4 	movi	r4,-1
  803e80:	88800015 	stw	r2,0(r17)
  803e84:	80c0030d 	sth	r3,12(r16)
  803e88:	003fc306 	br	803d98 <__srefill_r+0xa8>
  803e8c:	8809883a 	mov	r4,r17
  803e90:	800b883a 	mov	r5,r16
  803e94:	08012400 	call	801240 <_fflush_r>
  803e98:	103fd81e 	bne	r2,zero,803dfc <__srefill_r+0x10c>
  803e9c:	8080030b 	ldhu	r2,12(r16)
  803ea0:	80000215 	stw	zero,8(r16)
  803ea4:	80000615 	stw	zero,24(r16)
  803ea8:	10bffdcc 	andi	r2,r2,65527
  803eac:	8080030d 	sth	r2,12(r16)
  803eb0:	003fa206 	br	803d3c <__srefill_r+0x4c>

00803eb4 <lflush>:
  803eb4:	20c0030b 	ldhu	r3,12(r4)
  803eb8:	01400244 	movi	r5,9
  803ebc:	0005883a 	mov	r2,zero
  803ec0:	18c0024c 	andi	r3,r3,9
  803ec4:	19400126 	beq	r3,r5,803ecc <lflush+0x18>
  803ec8:	f800283a 	ret
  803ecc:	080143c1 	jmpi	80143c <fflush>

00803ed0 <__srget_r>:
  803ed0:	defffe04 	addi	sp,sp,-8
  803ed4:	dc000015 	stw	r16,0(sp)
  803ed8:	dfc00115 	stw	ra,4(sp)
  803edc:	2821883a 	mov	r16,r5
  803ee0:	0803cf00 	call	803cf0 <__srefill_r>
  803ee4:	013fffc4 	movi	r4,-1
  803ee8:	1000071e 	bne	r2,zero,803f08 <__srget_r+0x38>
  803eec:	80800117 	ldw	r2,4(r16)
  803ef0:	81000017 	ldw	r4,0(r16)
  803ef4:	10bfffc4 	addi	r2,r2,-1
  803ef8:	20c00044 	addi	r3,r4,1
  803efc:	80800115 	stw	r2,4(r16)
  803f00:	21000003 	ldbu	r4,0(r4)
  803f04:	80c00015 	stw	r3,0(r16)
  803f08:	2005883a 	mov	r2,r4
  803f0c:	dfc00117 	ldw	ra,4(sp)
  803f10:	dc000017 	ldw	r16,0(sp)
  803f14:	dec00204 	addi	sp,sp,8
  803f18:	f800283a 	ret

00803f1c <__srget>:
  803f1c:	00802074 	movhi	r2,129
  803f20:	109c4404 	addi	r2,r2,28944
  803f24:	200b883a 	mov	r5,r4
  803f28:	11000017 	ldw	r4,0(r2)
  803f2c:	0803ed01 	jmpi	803ed0 <__srget_r>

00803f30 <_sbrk_r>:
  803f30:	defffd04 	addi	sp,sp,-12
  803f34:	dc000015 	stw	r16,0(sp)
  803f38:	040020b4 	movhi	r16,130
  803f3c:	84239d04 	addi	r16,r16,-29068
  803f40:	dc400115 	stw	r17,4(sp)
  803f44:	80000015 	stw	zero,0(r16)
  803f48:	2023883a 	mov	r17,r4
  803f4c:	2809883a 	mov	r4,r5
  803f50:	dfc00215 	stw	ra,8(sp)
  803f54:	08114a40 	call	8114a4 <sbrk>
  803f58:	1007883a 	mov	r3,r2
  803f5c:	00bfffc4 	movi	r2,-1
  803f60:	18800626 	beq	r3,r2,803f7c <_sbrk_r+0x4c>
  803f64:	1805883a 	mov	r2,r3
  803f68:	dfc00217 	ldw	ra,8(sp)
  803f6c:	dc400117 	ldw	r17,4(sp)
  803f70:	dc000017 	ldw	r16,0(sp)
  803f74:	dec00304 	addi	sp,sp,12
  803f78:	f800283a 	ret
  803f7c:	80800017 	ldw	r2,0(r16)
  803f80:	103ff826 	beq	r2,zero,803f64 <_sbrk_r+0x34>
  803f84:	88800015 	stw	r2,0(r17)
  803f88:	1805883a 	mov	r2,r3
  803f8c:	dfc00217 	ldw	ra,8(sp)
  803f90:	dc400117 	ldw	r17,4(sp)
  803f94:	dc000017 	ldw	r16,0(sp)
  803f98:	dec00304 	addi	sp,sp,12
  803f9c:	f800283a 	ret

00803fa0 <sprintf>:
  803fa0:	deffe504 	addi	sp,sp,-108
  803fa4:	2013883a 	mov	r9,r4
  803fa8:	dfc01815 	stw	ra,96(sp)
  803fac:	d9801915 	stw	r6,100(sp)
  803fb0:	d9c01a15 	stw	r7,104(sp)
  803fb4:	d8801904 	addi	r2,sp,100
  803fb8:	d8800015 	stw	r2,0(sp)
  803fbc:	00802074 	movhi	r2,129
  803fc0:	109c4404 	addi	r2,r2,28944
  803fc4:	11000017 	ldw	r4,0(r2)
  803fc8:	d9c00017 	ldw	r7,0(sp)
  803fcc:	00808204 	movi	r2,520
  803fd0:	00e00034 	movhi	r3,32768
  803fd4:	18ffffc4 	addi	r3,r3,-1
  803fd8:	280d883a 	mov	r6,r5
  803fdc:	d880040d 	sth	r2,16(sp)
  803fe0:	d9400104 	addi	r5,sp,4
  803fe4:	00bfffc4 	movi	r2,-1
  803fe8:	d8c00615 	stw	r3,24(sp)
  803fec:	d8c00315 	stw	r3,12(sp)
  803ff0:	da400515 	stw	r9,20(sp)
  803ff4:	d880048d 	sth	r2,18(sp)
  803ff8:	da400115 	stw	r9,4(sp)
  803ffc:	08043a00 	call	8043a0 <___vfprintf_internal_r>
  804000:	d8c00117 	ldw	r3,4(sp)
  804004:	18000005 	stb	zero,0(r3)
  804008:	dfc01817 	ldw	ra,96(sp)
  80400c:	dec01b04 	addi	sp,sp,108
  804010:	f800283a 	ret

00804014 <_sprintf_r>:
  804014:	deffe604 	addi	sp,sp,-104
  804018:	2813883a 	mov	r9,r5
  80401c:	dfc01815 	stw	ra,96(sp)
  804020:	d9c01915 	stw	r7,100(sp)
  804024:	d8801904 	addi	r2,sp,100
  804028:	d8800015 	stw	r2,0(sp)
  80402c:	100f883a 	mov	r7,r2
  804030:	00808204 	movi	r2,520
  804034:	00e00034 	movhi	r3,32768
  804038:	18ffffc4 	addi	r3,r3,-1
  80403c:	d880040d 	sth	r2,16(sp)
  804040:	d9400104 	addi	r5,sp,4
  804044:	00bfffc4 	movi	r2,-1
  804048:	d8c00615 	stw	r3,24(sp)
  80404c:	d8c00315 	stw	r3,12(sp)
  804050:	da400515 	stw	r9,20(sp)
  804054:	d880048d 	sth	r2,18(sp)
  804058:	da400115 	stw	r9,4(sp)
  80405c:	08043a00 	call	8043a0 <___vfprintf_internal_r>
  804060:	d8c00117 	ldw	r3,4(sp)
  804064:	18000005 	stb	zero,0(r3)
  804068:	dfc01817 	ldw	ra,96(sp)
  80406c:	dec01a04 	addi	sp,sp,104
  804070:	f800283a 	ret

00804074 <eofread>:
  804074:	0005883a 	mov	r2,zero
  804078:	f800283a 	ret

0080407c <_sscanf_r>:
  80407c:	deffe404 	addi	sp,sp,-112
  804080:	dcc01915 	stw	r19,100(sp)
  804084:	2027883a 	mov	r19,r4
  804088:	dfc01a15 	stw	ra,104(sp)
  80408c:	dc401815 	stw	r17,96(sp)
  804090:	d9c01b15 	stw	r7,108(sp)
  804094:	00808104 	movi	r2,516
  804098:	2809883a 	mov	r4,r5
  80409c:	3023883a 	mov	r17,r6
  8040a0:	d9400115 	stw	r5,4(sp)
  8040a4:	d9400515 	stw	r5,20(sp)
  8040a8:	d880040d 	sth	r2,16(sp)
  8040ac:	08042d40 	call	8042d4 <strlen>
  8040b0:	d8c01b04 	addi	r3,sp,108
  8040b4:	d8c00015 	stw	r3,0(sp)
  8040b8:	180f883a 	mov	r7,r3
  8040bc:	023fffc4 	movi	r8,-1
  8040c0:	00c02034 	movhi	r3,128
  8040c4:	18d01d04 	addi	r3,r3,16500
  8040c8:	9809883a 	mov	r4,r19
  8040cc:	880d883a 	mov	r6,r17
  8040d0:	d9400104 	addi	r5,sp,4
  8040d4:	d8800615 	stw	r2,24(sp)
  8040d8:	d8c00915 	stw	r3,36(sp)
  8040dc:	da00048d 	sth	r8,18(sp)
  8040e0:	d8800215 	stw	r2,8(sp)
  8040e4:	d8000d15 	stw	zero,52(sp)
  8040e8:	d8001215 	stw	zero,72(sp)
  8040ec:	08062700 	call	806270 <__svfscanf_r>
  8040f0:	dfc01a17 	ldw	ra,104(sp)
  8040f4:	dcc01917 	ldw	r19,100(sp)
  8040f8:	dc401817 	ldw	r17,96(sp)
  8040fc:	dec01c04 	addi	sp,sp,112
  804100:	f800283a 	ret

00804104 <sscanf>:
  804104:	deffe404 	addi	sp,sp,-112
  804108:	dfc01915 	stw	ra,100(sp)
  80410c:	dc401815 	stw	r17,96(sp)
  804110:	d9801a15 	stw	r6,104(sp)
  804114:	d9c01b15 	stw	r7,108(sp)
  804118:	00808104 	movi	r2,516
  80411c:	2823883a 	mov	r17,r5
  804120:	d9000515 	stw	r4,20(sp)
  804124:	d9000115 	stw	r4,4(sp)
  804128:	d880040d 	sth	r2,16(sp)
  80412c:	08042d40 	call	8042d4 <strlen>
  804130:	d8c01a04 	addi	r3,sp,104
  804134:	d8c00015 	stw	r3,0(sp)
  804138:	00c02074 	movhi	r3,129
  80413c:	18dc4404 	addi	r3,r3,28944
  804140:	19000017 	ldw	r4,0(r3)
  804144:	d9c00017 	ldw	r7,0(sp)
  804148:	00c02034 	movhi	r3,128
  80414c:	18d01d04 	addi	r3,r3,16500
  804150:	023fffc4 	movi	r8,-1
  804154:	880d883a 	mov	r6,r17
  804158:	d9400104 	addi	r5,sp,4
  80415c:	d8800615 	stw	r2,24(sp)
  804160:	d8c00915 	stw	r3,36(sp)
  804164:	da00048d 	sth	r8,18(sp)
  804168:	d8800215 	stw	r2,8(sp)
  80416c:	d8000d15 	stw	zero,52(sp)
  804170:	d8001215 	stw	zero,72(sp)
  804174:	08062700 	call	806270 <__svfscanf_r>
  804178:	dfc01917 	ldw	ra,100(sp)
  80417c:	dc401817 	ldw	r17,96(sp)
  804180:	dec01c04 	addi	sp,sp,112
  804184:	f800283a 	ret

00804188 <__sclose>:
  804188:	2940038f 	ldh	r5,14(r5)
  80418c:	0807ba41 	jmpi	807ba4 <_close_r>

00804190 <__sseek>:
  804190:	defffe04 	addi	sp,sp,-8
  804194:	dc000015 	stw	r16,0(sp)
  804198:	2821883a 	mov	r16,r5
  80419c:	2940038f 	ldh	r5,14(r5)
  8041a0:	dfc00115 	stw	ra,4(sp)
  8041a4:	080981c0 	call	80981c <_lseek_r>
  8041a8:	1007883a 	mov	r3,r2
  8041ac:	00bfffc4 	movi	r2,-1
  8041b0:	18800926 	beq	r3,r2,8041d8 <__sseek+0x48>
  8041b4:	8080030b 	ldhu	r2,12(r16)
  8041b8:	80c01415 	stw	r3,80(r16)
  8041bc:	10840014 	ori	r2,r2,4096
  8041c0:	8080030d 	sth	r2,12(r16)
  8041c4:	1805883a 	mov	r2,r3
  8041c8:	dfc00117 	ldw	ra,4(sp)
  8041cc:	dc000017 	ldw	r16,0(sp)
  8041d0:	dec00204 	addi	sp,sp,8
  8041d4:	f800283a 	ret
  8041d8:	8080030b 	ldhu	r2,12(r16)
  8041dc:	10bbffcc 	andi	r2,r2,61439
  8041e0:	8080030d 	sth	r2,12(r16)
  8041e4:	1805883a 	mov	r2,r3
  8041e8:	dfc00117 	ldw	ra,4(sp)
  8041ec:	dc000017 	ldw	r16,0(sp)
  8041f0:	dec00204 	addi	sp,sp,8
  8041f4:	f800283a 	ret

008041f8 <__swrite>:
  8041f8:	2880030b 	ldhu	r2,12(r5)
  8041fc:	defffb04 	addi	sp,sp,-20
  804200:	dcc00315 	stw	r19,12(sp)
  804204:	1080400c 	andi	r2,r2,256
  804208:	dc800215 	stw	r18,8(sp)
  80420c:	dc400115 	stw	r17,4(sp)
  804210:	dc000015 	stw	r16,0(sp)
  804214:	3027883a 	mov	r19,r6
  804218:	3825883a 	mov	r18,r7
  80421c:	dfc00415 	stw	ra,16(sp)
  804220:	2821883a 	mov	r16,r5
  804224:	000d883a 	mov	r6,zero
  804228:	01c00084 	movi	r7,2
  80422c:	2023883a 	mov	r17,r4
  804230:	10000226 	beq	r2,zero,80423c <__swrite+0x44>
  804234:	2940038f 	ldh	r5,14(r5)
  804238:	080981c0 	call	80981c <_lseek_r>
  80423c:	8080030b 	ldhu	r2,12(r16)
  804240:	8140038f 	ldh	r5,14(r16)
  804244:	8809883a 	mov	r4,r17
  804248:	10bbffcc 	andi	r2,r2,61439
  80424c:	980d883a 	mov	r6,r19
  804250:	900f883a 	mov	r7,r18
  804254:	8080030d 	sth	r2,12(r16)
  804258:	dfc00417 	ldw	ra,16(sp)
  80425c:	dcc00317 	ldw	r19,12(sp)
  804260:	dc800217 	ldw	r18,8(sp)
  804264:	dc400117 	ldw	r17,4(sp)
  804268:	dc000017 	ldw	r16,0(sp)
  80426c:	dec00504 	addi	sp,sp,20
  804270:	08079f01 	jmpi	8079f0 <_write_r>

00804274 <__sread>:
  804274:	defffe04 	addi	sp,sp,-8
  804278:	dc000015 	stw	r16,0(sp)
  80427c:	2821883a 	mov	r16,r5
  804280:	2940038f 	ldh	r5,14(r5)
  804284:	dfc00115 	stw	ra,4(sp)
  804288:	080a9880 	call	80a988 <_read_r>
  80428c:	1007883a 	mov	r3,r2
  804290:	10000816 	blt	r2,zero,8042b4 <__sread+0x40>
  804294:	80801417 	ldw	r2,80(r16)
  804298:	10c5883a 	add	r2,r2,r3
  80429c:	80801415 	stw	r2,80(r16)
  8042a0:	1805883a 	mov	r2,r3
  8042a4:	dfc00117 	ldw	ra,4(sp)
  8042a8:	dc000017 	ldw	r16,0(sp)
  8042ac:	dec00204 	addi	sp,sp,8
  8042b0:	f800283a 	ret
  8042b4:	8080030b 	ldhu	r2,12(r16)
  8042b8:	10bbffcc 	andi	r2,r2,61439
  8042bc:	8080030d 	sth	r2,12(r16)
  8042c0:	1805883a 	mov	r2,r3
  8042c4:	dfc00117 	ldw	ra,4(sp)
  8042c8:	dc000017 	ldw	r16,0(sp)
  8042cc:	dec00204 	addi	sp,sp,8
  8042d0:	f800283a 	ret

008042d4 <strlen>:
  8042d4:	208000cc 	andi	r2,r4,3
  8042d8:	2011883a 	mov	r8,r4
  8042dc:	1000161e 	bne	r2,zero,804338 <strlen+0x64>
  8042e0:	20c00017 	ldw	r3,0(r4)
  8042e4:	017fbff4 	movhi	r5,65279
  8042e8:	297fbfc4 	addi	r5,r5,-257
  8042ec:	01e02074 	movhi	r7,32897
  8042f0:	39e02004 	addi	r7,r7,-32640
  8042f4:	1945883a 	add	r2,r3,r5
  8042f8:	11c4703a 	and	r2,r2,r7
  8042fc:	00c6303a 	nor	r3,zero,r3
  804300:	1886703a 	and	r3,r3,r2
  804304:	18000c1e 	bne	r3,zero,804338 <strlen+0x64>
  804308:	280d883a 	mov	r6,r5
  80430c:	380b883a 	mov	r5,r7
  804310:	21000104 	addi	r4,r4,4
  804314:	20800017 	ldw	r2,0(r4)
  804318:	1187883a 	add	r3,r2,r6
  80431c:	1946703a 	and	r3,r3,r5
  804320:	0084303a 	nor	r2,zero,r2
  804324:	10c4703a 	and	r2,r2,r3
  804328:	103ff926 	beq	r2,zero,804310 <strlen+0x3c>
  80432c:	20800007 	ldb	r2,0(r4)
  804330:	10000326 	beq	r2,zero,804340 <strlen+0x6c>
  804334:	21000044 	addi	r4,r4,1
  804338:	20800007 	ldb	r2,0(r4)
  80433c:	103ffd1e 	bne	r2,zero,804334 <strlen+0x60>
  804340:	2205c83a 	sub	r2,r4,r8
  804344:	f800283a 	ret

00804348 <__sprint_r>:
  804348:	30800217 	ldw	r2,8(r6)
  80434c:	defffe04 	addi	sp,sp,-8
  804350:	dc000015 	stw	r16,0(sp)
  804354:	dfc00115 	stw	ra,4(sp)
  804358:	3021883a 	mov	r16,r6
  80435c:	0007883a 	mov	r3,zero
  804360:	1000061e 	bne	r2,zero,80437c <__sprint_r+0x34>
  804364:	1805883a 	mov	r2,r3
  804368:	30000115 	stw	zero,4(r6)
  80436c:	dfc00117 	ldw	ra,4(sp)
  804370:	dc000017 	ldw	r16,0(sp)
  804374:	dec00204 	addi	sp,sp,8
  804378:	f800283a 	ret
  80437c:	080236c0 	call	80236c <__sfvwrite_r>
  804380:	1007883a 	mov	r3,r2
  804384:	1805883a 	mov	r2,r3
  804388:	80000115 	stw	zero,4(r16)
  80438c:	80000215 	stw	zero,8(r16)
  804390:	dfc00117 	ldw	ra,4(sp)
  804394:	dc000017 	ldw	r16,0(sp)
  804398:	dec00204 	addi	sp,sp,8
  80439c:	f800283a 	ret

008043a0 <___vfprintf_internal_r>:
  8043a0:	defea304 	addi	sp,sp,-1396
  8043a4:	dd815915 	stw	r22,1380(sp)
  8043a8:	dc015315 	stw	r16,1356(sp)
  8043ac:	d9c15215 	stw	r7,1352(sp)
  8043b0:	dfc15c15 	stw	ra,1392(sp)
  8043b4:	df015b15 	stw	fp,1388(sp)
  8043b8:	ddc15a15 	stw	r23,1384(sp)
  8043bc:	dd415815 	stw	r21,1376(sp)
  8043c0:	dd015715 	stw	r20,1372(sp)
  8043c4:	dcc15615 	stw	r19,1368(sp)
  8043c8:	dc815515 	stw	r18,1364(sp)
  8043cc:	dc415415 	stw	r17,1360(sp)
  8043d0:	282d883a 	mov	r22,r5
  8043d4:	3021883a 	mov	r16,r6
  8043d8:	d9015015 	stw	r4,1344(sp)
  8043dc:	08097600 	call	809760 <_localeconv_r>
  8043e0:	10800017 	ldw	r2,0(r2)
  8043e4:	d9c15217 	ldw	r7,1352(sp)
  8043e8:	d8814a15 	stw	r2,1320(sp)
  8043ec:	d8815017 	ldw	r2,1344(sp)
  8043f0:	10000226 	beq	r2,zero,8043fc <___vfprintf_internal_r+0x5c>
  8043f4:	10800e17 	ldw	r2,56(r2)
  8043f8:	10020d26 	beq	r2,zero,804c30 <___vfprintf_internal_r+0x890>
  8043fc:	b080030b 	ldhu	r2,12(r22)
  804400:	1080020c 	andi	r2,r2,8
  804404:	10020e26 	beq	r2,zero,804c40 <___vfprintf_internal_r+0x8a0>
  804408:	b0800417 	ldw	r2,16(r22)
  80440c:	10020c26 	beq	r2,zero,804c40 <___vfprintf_internal_r+0x8a0>
  804410:	b200030b 	ldhu	r8,12(r22)
  804414:	00800284 	movi	r2,10
  804418:	40c0068c 	andi	r3,r8,26
  80441c:	18802f1e 	bne	r3,r2,8044dc <___vfprintf_internal_r+0x13c>
  804420:	b080038f 	ldh	r2,14(r22)
  804424:	10002d16 	blt	r2,zero,8044dc <___vfprintf_internal_r+0x13c>
  804428:	b240038b 	ldhu	r9,14(r22)
  80442c:	b2800717 	ldw	r10,28(r22)
  804430:	b2c00917 	ldw	r11,36(r22)
  804434:	d9015017 	ldw	r4,1344(sp)
  804438:	dc402a04 	addi	r17,sp,168
  80443c:	d8804104 	addi	r2,sp,260
  804440:	00c10004 	movi	r3,1024
  804444:	423fff4c 	andi	r8,r8,65533
  804448:	800d883a 	mov	r6,r16
  80444c:	880b883a 	mov	r5,r17
  804450:	da002d0d 	sth	r8,180(sp)
  804454:	da402d8d 	sth	r9,182(sp)
  804458:	da803115 	stw	r10,196(sp)
  80445c:	dac03315 	stw	r11,204(sp)
  804460:	d8802e15 	stw	r2,184(sp)
  804464:	d8c02f15 	stw	r3,188(sp)
  804468:	d8802a15 	stw	r2,168(sp)
  80446c:	d8c02c15 	stw	r3,176(sp)
  804470:	d8003015 	stw	zero,192(sp)
  804474:	08043a00 	call	8043a0 <___vfprintf_internal_r>
  804478:	d8814c15 	stw	r2,1328(sp)
  80447c:	10000416 	blt	r2,zero,804490 <___vfprintf_internal_r+0xf0>
  804480:	d9015017 	ldw	r4,1344(sp)
  804484:	880b883a 	mov	r5,r17
  804488:	08012400 	call	801240 <_fflush_r>
  80448c:	1002321e 	bne	r2,zero,804d58 <___vfprintf_internal_r+0x9b8>
  804490:	d8802d0b 	ldhu	r2,180(sp)
  804494:	1080100c 	andi	r2,r2,64
  804498:	10000326 	beq	r2,zero,8044a8 <___vfprintf_internal_r+0x108>
  80449c:	b080030b 	ldhu	r2,12(r22)
  8044a0:	10801014 	ori	r2,r2,64
  8044a4:	b080030d 	sth	r2,12(r22)
  8044a8:	d8814c17 	ldw	r2,1328(sp)
  8044ac:	dfc15c17 	ldw	ra,1392(sp)
  8044b0:	df015b17 	ldw	fp,1388(sp)
  8044b4:	ddc15a17 	ldw	r23,1384(sp)
  8044b8:	dd815917 	ldw	r22,1380(sp)
  8044bc:	dd415817 	ldw	r21,1376(sp)
  8044c0:	dd015717 	ldw	r20,1372(sp)
  8044c4:	dcc15617 	ldw	r19,1368(sp)
  8044c8:	dc815517 	ldw	r18,1364(sp)
  8044cc:	dc415417 	ldw	r17,1360(sp)
  8044d0:	dc015317 	ldw	r16,1356(sp)
  8044d4:	dec15d04 	addi	sp,sp,1396
  8044d8:	f800283a 	ret
  8044dc:	0005883a 	mov	r2,zero
  8044e0:	0007883a 	mov	r3,zero
  8044e4:	dd401a04 	addi	r21,sp,104
  8044e8:	d8814315 	stw	r2,1292(sp)
  8044ec:	802f883a 	mov	r23,r16
  8044f0:	d8c14415 	stw	r3,1296(sp)
  8044f4:	d8014c15 	stw	zero,1328(sp)
  8044f8:	d8014915 	stw	zero,1316(sp)
  8044fc:	d8014515 	stw	zero,1300(sp)
  804500:	d8014815 	stw	zero,1312(sp)
  804504:	dd400d15 	stw	r21,52(sp)
  804508:	d8000f15 	stw	zero,60(sp)
  80450c:	d8000e15 	stw	zero,56(sp)
  804510:	b8800007 	ldb	r2,0(r23)
  804514:	10001926 	beq	r2,zero,80457c <___vfprintf_internal_r+0x1dc>
  804518:	00c00944 	movi	r3,37
  80451c:	10c01726 	beq	r2,r3,80457c <___vfprintf_internal_r+0x1dc>
  804520:	b821883a 	mov	r16,r23
  804524:	00000106 	br	80452c <___vfprintf_internal_r+0x18c>
  804528:	10c00326 	beq	r2,r3,804538 <___vfprintf_internal_r+0x198>
  80452c:	84000044 	addi	r16,r16,1
  804530:	80800007 	ldb	r2,0(r16)
  804534:	103ffc1e 	bne	r2,zero,804528 <___vfprintf_internal_r+0x188>
  804538:	85e7c83a 	sub	r19,r16,r23
  80453c:	98000e26 	beq	r19,zero,804578 <___vfprintf_internal_r+0x1d8>
  804540:	dc800f17 	ldw	r18,60(sp)
  804544:	dc400e17 	ldw	r17,56(sp)
  804548:	008001c4 	movi	r2,7
  80454c:	94e5883a 	add	r18,r18,r19
  804550:	8c400044 	addi	r17,r17,1
  804554:	adc00015 	stw	r23,0(r21)
  804558:	dc800f15 	stw	r18,60(sp)
  80455c:	acc00115 	stw	r19,4(r21)
  804560:	dc400e15 	stw	r17,56(sp)
  804564:	14428b16 	blt	r2,r17,804f94 <___vfprintf_internal_r+0xbf4>
  804568:	ad400204 	addi	r21,r21,8
  80456c:	d9014c17 	ldw	r4,1328(sp)
  804570:	24c9883a 	add	r4,r4,r19
  804574:	d9014c15 	stw	r4,1328(sp)
  804578:	802f883a 	mov	r23,r16
  80457c:	b8800007 	ldb	r2,0(r23)
  804580:	10013c26 	beq	r2,zero,804a74 <___vfprintf_internal_r+0x6d4>
  804584:	bdc00044 	addi	r23,r23,1
  804588:	d8000405 	stb	zero,16(sp)
  80458c:	b8c00007 	ldb	r3,0(r23)
  804590:	04ffffc4 	movi	r19,-1
  804594:	d8014d15 	stw	zero,1332(sp)
  804598:	d8014b15 	stw	zero,1324(sp)
  80459c:	d8c14e15 	stw	r3,1336(sp)
  8045a0:	bdc00044 	addi	r23,r23,1
  8045a4:	d9414e17 	ldw	r5,1336(sp)
  8045a8:	00801604 	movi	r2,88
  8045ac:	28fff804 	addi	r3,r5,-32
  8045b0:	10c06036 	bltu	r2,r3,804734 <___vfprintf_internal_r+0x394>
  8045b4:	18c5883a 	add	r2,r3,r3
  8045b8:	1085883a 	add	r2,r2,r2
  8045bc:	00c02034 	movhi	r3,128
  8045c0:	18d17404 	addi	r3,r3,17872
  8045c4:	10c5883a 	add	r2,r2,r3
  8045c8:	11000017 	ldw	r4,0(r2)
  8045cc:	2000683a 	jmp	r4
  8045d0:	00805544 	movi	r2,341
  8045d4:	00804734 	movhi	r2,284
  8045d8:	00804734 	movhi	r2,284
  8045dc:	00805530 	cmpltui	r2,zero,340
  8045e0:	00804734 	movhi	r2,284
  8045e4:	00804734 	movhi	r2,284
  8045e8:	00804734 	movhi	r2,284
  8045ec:	00804734 	movhi	r2,284
  8045f0:	00804734 	movhi	r2,284
  8045f4:	00804734 	movhi	r2,284
  8045f8:	00805310 	cmplti	r2,zero,332
  8045fc:	00805520 	cmpeqi	r2,zero,340
  804600:	00804734 	movhi	r2,284
  804604:	00805328 	cmpgeui	r2,zero,332
  804608:	008055bc 	xorhi	r2,zero,342
  80460c:	00804734 	movhi	r2,284
  804610:	008055a8 	cmpgeui	r2,zero,342
  804614:	00805570 	cmpltui	r2,zero,341
  804618:	00805570 	cmpltui	r2,zero,341
  80461c:	00805570 	cmpltui	r2,zero,341
  804620:	00805570 	cmpltui	r2,zero,341
  804624:	00805570 	cmpltui	r2,zero,341
  804628:	00805570 	cmpltui	r2,zero,341
  80462c:	00805570 	cmpltui	r2,zero,341
  804630:	00805570 	cmpltui	r2,zero,341
  804634:	00805570 	cmpltui	r2,zero,341
  804638:	00804734 	movhi	r2,284
  80463c:	00804734 	movhi	r2,284
  804640:	00804734 	movhi	r2,284
  804644:	00804734 	movhi	r2,284
  804648:	00804734 	movhi	r2,284
  80464c:	00804734 	movhi	r2,284
  804650:	00804734 	movhi	r2,284
  804654:	00804734 	movhi	r2,284
  804658:	00804734 	movhi	r2,284
  80465c:	00804734 	movhi	r2,284
  804660:	00804d8c 	andi	r2,zero,310
  804664:	008053f8 	rdprs	r2,zero,335
  804668:	00804734 	movhi	r2,284
  80466c:	008053f8 	rdprs	r2,zero,335
  804670:	00804734 	movhi	r2,284
  804674:	00804734 	movhi	r2,284
  804678:	00804734 	movhi	r2,284
  80467c:	00804734 	movhi	r2,284
  804680:	0080555c 	xori	r2,zero,341
  804684:	00804734 	movhi	r2,284
  804688:	00804734 	movhi	r2,284
  80468c:	00804e40 	call	804e4 <__alt_mem_sdram_controller-0x77fb1c>
  804690:	00804734 	movhi	r2,284
  804694:	00804734 	movhi	r2,284
  804698:	00804734 	movhi	r2,284
  80469c:	00804734 	movhi	r2,284
  8046a0:	00804734 	movhi	r2,284
  8046a4:	00804e8c 	andi	r2,zero,314
  8046a8:	00804734 	movhi	r2,284
  8046ac:	00804734 	movhi	r2,284
  8046b0:	008054ac 	andhi	r2,zero,338
  8046b4:	00804734 	movhi	r2,284
  8046b8:	00804734 	movhi	r2,284
  8046bc:	00804734 	movhi	r2,284
  8046c0:	00804734 	movhi	r2,284
  8046c4:	00804734 	movhi	r2,284
  8046c8:	00804734 	movhi	r2,284
  8046cc:	00804734 	movhi	r2,284
  8046d0:	00804734 	movhi	r2,284
  8046d4:	00804734 	movhi	r2,284
  8046d8:	00804734 	movhi	r2,284
  8046dc:	00805480 	call	80548 <__alt_mem_sdram_controller-0x77fab8>
  8046e0:	00804d98 	cmpnei	r2,zero,310
  8046e4:	008053f8 	rdprs	r2,zero,335
  8046e8:	008053f8 	rdprs	r2,zero,335
  8046ec:	008053f8 	rdprs	r2,zero,335
  8046f0:	008053e4 	muli	r2,zero,335
  8046f4:	00804d98 	cmpnei	r2,zero,310
  8046f8:	00804734 	movhi	r2,284
  8046fc:	00804734 	movhi	r2,284
  804700:	0080536c 	andhi	r2,zero,333
  804704:	00804734 	movhi	r2,284
  804708:	0080533c 	xorhi	r2,zero,332
  80470c:	00804e4c 	andi	r2,zero,313
  804710:	0080539c 	xori	r2,zero,334
  804714:	00805388 	cmpgei	r2,zero,334
  804718:	00804734 	movhi	r2,284
  80471c:	00805618 	cmpnei	r2,zero,344
  804720:	00804734 	movhi	r2,284
  804724:	00804e98 	cmpnei	r2,zero,314
  804728:	00804734 	movhi	r2,284
  80472c:	00804734 	movhi	r2,284
  804730:	00805510 	cmplti	r2,zero,340
  804734:	d9014e17 	ldw	r4,1336(sp)
  804738:	2000ce26 	beq	r4,zero,804a74 <___vfprintf_internal_r+0x6d4>
  80473c:	01400044 	movi	r5,1
  804740:	d9801004 	addi	r6,sp,64
  804744:	d9c14115 	stw	r7,1284(sp)
  804748:	d9414615 	stw	r5,1304(sp)
  80474c:	d9814215 	stw	r6,1288(sp)
  804750:	280f883a 	mov	r7,r5
  804754:	d9001005 	stb	r4,64(sp)
  804758:	d8000405 	stb	zero,16(sp)
  80475c:	d8014715 	stw	zero,1308(sp)
  804760:	d8c14d17 	ldw	r3,1332(sp)
  804764:	1880008c 	andi	r2,r3,2
  804768:	1005003a 	cmpeq	r2,r2,zero
  80476c:	d8815115 	stw	r2,1348(sp)
  804770:	1000031e 	bne	r2,zero,804780 <___vfprintf_internal_r+0x3e0>
  804774:	d9014617 	ldw	r4,1304(sp)
  804778:	21000084 	addi	r4,r4,2
  80477c:	d9014615 	stw	r4,1304(sp)
  804780:	d9414d17 	ldw	r5,1332(sp)
  804784:	2940210c 	andi	r5,r5,132
  804788:	d9414f15 	stw	r5,1340(sp)
  80478c:	28002d1e 	bne	r5,zero,804844 <___vfprintf_internal_r+0x4a4>
  804790:	d9814b17 	ldw	r6,1324(sp)
  804794:	d8814617 	ldw	r2,1304(sp)
  804798:	30a1c83a 	sub	r16,r6,r2
  80479c:	0400290e 	bge	zero,r16,804844 <___vfprintf_internal_r+0x4a4>
  8047a0:	00800404 	movi	r2,16
  8047a4:	1404580e 	bge	r2,r16,805908 <___vfprintf_internal_r+0x1568>
  8047a8:	dc800f17 	ldw	r18,60(sp)
  8047ac:	dc400e17 	ldw	r17,56(sp)
  8047b0:	1027883a 	mov	r19,r2
  8047b4:	07002074 	movhi	fp,129
  8047b8:	e713a704 	addi	fp,fp,20124
  8047bc:	050001c4 	movi	r20,7
  8047c0:	00000306 	br	8047d0 <___vfprintf_internal_r+0x430>
  8047c4:	843ffc04 	addi	r16,r16,-16
  8047c8:	ad400204 	addi	r21,r21,8
  8047cc:	9c00130e 	bge	r19,r16,80481c <___vfprintf_internal_r+0x47c>
  8047d0:	94800404 	addi	r18,r18,16
  8047d4:	8c400044 	addi	r17,r17,1
  8047d8:	af000015 	stw	fp,0(r21)
  8047dc:	acc00115 	stw	r19,4(r21)
  8047e0:	dc800f15 	stw	r18,60(sp)
  8047e4:	dc400e15 	stw	r17,56(sp)
  8047e8:	a47ff60e 	bge	r20,r17,8047c4 <___vfprintf_internal_r+0x424>
  8047ec:	d9015017 	ldw	r4,1344(sp)
  8047f0:	b00b883a 	mov	r5,r22
  8047f4:	d9800d04 	addi	r6,sp,52
  8047f8:	d9c15215 	stw	r7,1352(sp)
  8047fc:	08043480 	call	804348 <__sprint_r>
  804800:	d9c15217 	ldw	r7,1352(sp)
  804804:	10009e1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804808:	843ffc04 	addi	r16,r16,-16
  80480c:	dc800f17 	ldw	r18,60(sp)
  804810:	dc400e17 	ldw	r17,56(sp)
  804814:	dd401a04 	addi	r21,sp,104
  804818:	9c3fed16 	blt	r19,r16,8047d0 <___vfprintf_internal_r+0x430>
  80481c:	9425883a 	add	r18,r18,r16
  804820:	8c400044 	addi	r17,r17,1
  804824:	008001c4 	movi	r2,7
  804828:	af000015 	stw	fp,0(r21)
  80482c:	ac000115 	stw	r16,4(r21)
  804830:	dc800f15 	stw	r18,60(sp)
  804834:	dc400e15 	stw	r17,56(sp)
  804838:	1441f516 	blt	r2,r17,805010 <___vfprintf_internal_r+0xc70>
  80483c:	ad400204 	addi	r21,r21,8
  804840:	00000206 	br	80484c <___vfprintf_internal_r+0x4ac>
  804844:	dc800f17 	ldw	r18,60(sp)
  804848:	dc400e17 	ldw	r17,56(sp)
  80484c:	d8800407 	ldb	r2,16(sp)
  804850:	10000b26 	beq	r2,zero,804880 <___vfprintf_internal_r+0x4e0>
  804854:	00800044 	movi	r2,1
  804858:	94800044 	addi	r18,r18,1
  80485c:	8c400044 	addi	r17,r17,1
  804860:	a8800115 	stw	r2,4(r21)
  804864:	d8c00404 	addi	r3,sp,16
  804868:	008001c4 	movi	r2,7
  80486c:	a8c00015 	stw	r3,0(r21)
  804870:	dc800f15 	stw	r18,60(sp)
  804874:	dc400e15 	stw	r17,56(sp)
  804878:	1441da16 	blt	r2,r17,804fe4 <___vfprintf_internal_r+0xc44>
  80487c:	ad400204 	addi	r21,r21,8
  804880:	d9015117 	ldw	r4,1348(sp)
  804884:	20000b1e 	bne	r4,zero,8048b4 <___vfprintf_internal_r+0x514>
  804888:	d8800504 	addi	r2,sp,20
  80488c:	94800084 	addi	r18,r18,2
  804890:	8c400044 	addi	r17,r17,1
  804894:	a8800015 	stw	r2,0(r21)
  804898:	00c00084 	movi	r3,2
  80489c:	008001c4 	movi	r2,7
  8048a0:	a8c00115 	stw	r3,4(r21)
  8048a4:	dc800f15 	stw	r18,60(sp)
  8048a8:	dc400e15 	stw	r17,56(sp)
  8048ac:	1441c216 	blt	r2,r17,804fb8 <___vfprintf_internal_r+0xc18>
  8048b0:	ad400204 	addi	r21,r21,8
  8048b4:	d9414f17 	ldw	r5,1340(sp)
  8048b8:	00802004 	movi	r2,128
  8048bc:	2880b126 	beq	r5,r2,804b84 <___vfprintf_internal_r+0x7e4>
  8048c0:	d8c14717 	ldw	r3,1308(sp)
  8048c4:	19e1c83a 	sub	r16,r3,r7
  8048c8:	0400260e 	bge	zero,r16,804964 <___vfprintf_internal_r+0x5c4>
  8048cc:	00800404 	movi	r2,16
  8048d0:	1403c90e 	bge	r2,r16,8057f8 <___vfprintf_internal_r+0x1458>
  8048d4:	1027883a 	mov	r19,r2
  8048d8:	07002074 	movhi	fp,129
  8048dc:	e713a304 	addi	fp,fp,20108
  8048e0:	050001c4 	movi	r20,7
  8048e4:	00000306 	br	8048f4 <___vfprintf_internal_r+0x554>
  8048e8:	843ffc04 	addi	r16,r16,-16
  8048ec:	ad400204 	addi	r21,r21,8
  8048f0:	9c00130e 	bge	r19,r16,804940 <___vfprintf_internal_r+0x5a0>
  8048f4:	94800404 	addi	r18,r18,16
  8048f8:	8c400044 	addi	r17,r17,1
  8048fc:	af000015 	stw	fp,0(r21)
  804900:	acc00115 	stw	r19,4(r21)
  804904:	dc800f15 	stw	r18,60(sp)
  804908:	dc400e15 	stw	r17,56(sp)
  80490c:	a47ff60e 	bge	r20,r17,8048e8 <___vfprintf_internal_r+0x548>
  804910:	d9015017 	ldw	r4,1344(sp)
  804914:	b00b883a 	mov	r5,r22
  804918:	d9800d04 	addi	r6,sp,52
  80491c:	d9c15215 	stw	r7,1352(sp)
  804920:	08043480 	call	804348 <__sprint_r>
  804924:	d9c15217 	ldw	r7,1352(sp)
  804928:	1000551e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  80492c:	843ffc04 	addi	r16,r16,-16
  804930:	dc800f17 	ldw	r18,60(sp)
  804934:	dc400e17 	ldw	r17,56(sp)
  804938:	dd401a04 	addi	r21,sp,104
  80493c:	9c3fed16 	blt	r19,r16,8048f4 <___vfprintf_internal_r+0x554>
  804940:	9425883a 	add	r18,r18,r16
  804944:	8c400044 	addi	r17,r17,1
  804948:	008001c4 	movi	r2,7
  80494c:	af000015 	stw	fp,0(r21)
  804950:	ac000115 	stw	r16,4(r21)
  804954:	dc800f15 	stw	r18,60(sp)
  804958:	dc400e15 	stw	r17,56(sp)
  80495c:	14418216 	blt	r2,r17,804f68 <___vfprintf_internal_r+0xbc8>
  804960:	ad400204 	addi	r21,r21,8
  804964:	d9014d17 	ldw	r4,1332(sp)
  804968:	2080400c 	andi	r2,r4,256
  80496c:	10004a1e 	bne	r2,zero,804a98 <___vfprintf_internal_r+0x6f8>
  804970:	d9414217 	ldw	r5,1288(sp)
  804974:	91e5883a 	add	r18,r18,r7
  804978:	8c400044 	addi	r17,r17,1
  80497c:	008001c4 	movi	r2,7
  804980:	a9400015 	stw	r5,0(r21)
  804984:	a9c00115 	stw	r7,4(r21)
  804988:	dc800f15 	stw	r18,60(sp)
  80498c:	dc400e15 	stw	r17,56(sp)
  804990:	14416716 	blt	r2,r17,804f30 <___vfprintf_internal_r+0xb90>
  804994:	a8c00204 	addi	r3,r21,8
  804998:	d9814d17 	ldw	r6,1332(sp)
  80499c:	3080010c 	andi	r2,r6,4
  8049a0:	10002826 	beq	r2,zero,804a44 <___vfprintf_internal_r+0x6a4>
  8049a4:	d8814b17 	ldw	r2,1324(sp)
  8049a8:	d9014617 	ldw	r4,1304(sp)
  8049ac:	1121c83a 	sub	r16,r2,r4
  8049b0:	0400240e 	bge	zero,r16,804a44 <___vfprintf_internal_r+0x6a4>
  8049b4:	00800404 	movi	r2,16
  8049b8:	14044f0e 	bge	r2,r16,805af8 <___vfprintf_internal_r+0x1758>
  8049bc:	dc400e17 	ldw	r17,56(sp)
  8049c0:	1027883a 	mov	r19,r2
  8049c4:	07002074 	movhi	fp,129
  8049c8:	e713a704 	addi	fp,fp,20124
  8049cc:	050001c4 	movi	r20,7
  8049d0:	00000306 	br	8049e0 <___vfprintf_internal_r+0x640>
  8049d4:	843ffc04 	addi	r16,r16,-16
  8049d8:	18c00204 	addi	r3,r3,8
  8049dc:	9c00110e 	bge	r19,r16,804a24 <___vfprintf_internal_r+0x684>
  8049e0:	94800404 	addi	r18,r18,16
  8049e4:	8c400044 	addi	r17,r17,1
  8049e8:	1f000015 	stw	fp,0(r3)
  8049ec:	1cc00115 	stw	r19,4(r3)
  8049f0:	dc800f15 	stw	r18,60(sp)
  8049f4:	dc400e15 	stw	r17,56(sp)
  8049f8:	a47ff60e 	bge	r20,r17,8049d4 <___vfprintf_internal_r+0x634>
  8049fc:	d9015017 	ldw	r4,1344(sp)
  804a00:	b00b883a 	mov	r5,r22
  804a04:	d9800d04 	addi	r6,sp,52
  804a08:	08043480 	call	804348 <__sprint_r>
  804a0c:	10001c1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804a10:	843ffc04 	addi	r16,r16,-16
  804a14:	dc800f17 	ldw	r18,60(sp)
  804a18:	dc400e17 	ldw	r17,56(sp)
  804a1c:	d8c01a04 	addi	r3,sp,104
  804a20:	9c3fef16 	blt	r19,r16,8049e0 <___vfprintf_internal_r+0x640>
  804a24:	9425883a 	add	r18,r18,r16
  804a28:	8c400044 	addi	r17,r17,1
  804a2c:	008001c4 	movi	r2,7
  804a30:	1f000015 	stw	fp,0(r3)
  804a34:	1c000115 	stw	r16,4(r3)
  804a38:	dc800f15 	stw	r18,60(sp)
  804a3c:	dc400e15 	stw	r17,56(sp)
  804a40:	1440cb16 	blt	r2,r17,804d70 <___vfprintf_internal_r+0x9d0>
  804a44:	d8814b17 	ldw	r2,1324(sp)
  804a48:	d9414617 	ldw	r5,1304(sp)
  804a4c:	1140010e 	bge	r2,r5,804a54 <___vfprintf_internal_r+0x6b4>
  804a50:	2805883a 	mov	r2,r5
  804a54:	d9814c17 	ldw	r6,1328(sp)
  804a58:	308d883a 	add	r6,r6,r2
  804a5c:	d9814c15 	stw	r6,1328(sp)
  804a60:	90013b1e 	bne	r18,zero,804f50 <___vfprintf_internal_r+0xbb0>
  804a64:	d9c14117 	ldw	r7,1284(sp)
  804a68:	dd401a04 	addi	r21,sp,104
  804a6c:	d8000e15 	stw	zero,56(sp)
  804a70:	003ea706 	br	804510 <___vfprintf_internal_r+0x170>
  804a74:	d8800f17 	ldw	r2,60(sp)
  804a78:	10053f1e 	bne	r2,zero,805f78 <___vfprintf_internal_r+0x1bd8>
  804a7c:	d8000e15 	stw	zero,56(sp)
  804a80:	b080030b 	ldhu	r2,12(r22)
  804a84:	1080100c 	andi	r2,r2,64
  804a88:	103e8726 	beq	r2,zero,8044a8 <___vfprintf_internal_r+0x108>
  804a8c:	00bfffc4 	movi	r2,-1
  804a90:	d8814c15 	stw	r2,1328(sp)
  804a94:	003e8406 	br	8044a8 <___vfprintf_internal_r+0x108>
  804a98:	d9814e17 	ldw	r6,1336(sp)
  804a9c:	00801944 	movi	r2,101
  804aa0:	11806e16 	blt	r2,r6,804c5c <___vfprintf_internal_r+0x8bc>
  804aa4:	d9414817 	ldw	r5,1312(sp)
  804aa8:	00c00044 	movi	r3,1
  804aac:	1943430e 	bge	r3,r5,8057bc <___vfprintf_internal_r+0x141c>
  804ab0:	d8814217 	ldw	r2,1288(sp)
  804ab4:	94800044 	addi	r18,r18,1
  804ab8:	8c400044 	addi	r17,r17,1
  804abc:	a8800015 	stw	r2,0(r21)
  804ac0:	008001c4 	movi	r2,7
  804ac4:	a8c00115 	stw	r3,4(r21)
  804ac8:	dc800f15 	stw	r18,60(sp)
  804acc:	dc400e15 	stw	r17,56(sp)
  804ad0:	1441ca16 	blt	r2,r17,8051fc <___vfprintf_internal_r+0xe5c>
  804ad4:	a8c00204 	addi	r3,r21,8
  804ad8:	d9014a17 	ldw	r4,1320(sp)
  804adc:	00800044 	movi	r2,1
  804ae0:	94800044 	addi	r18,r18,1
  804ae4:	8c400044 	addi	r17,r17,1
  804ae8:	18800115 	stw	r2,4(r3)
  804aec:	008001c4 	movi	r2,7
  804af0:	19000015 	stw	r4,0(r3)
  804af4:	dc800f15 	stw	r18,60(sp)
  804af8:	dc400e15 	stw	r17,56(sp)
  804afc:	1441b616 	blt	r2,r17,8051d8 <___vfprintf_internal_r+0xe38>
  804b00:	1cc00204 	addi	r19,r3,8
  804b04:	d9014317 	ldw	r4,1292(sp)
  804b08:	d9414417 	ldw	r5,1296(sp)
  804b0c:	000d883a 	mov	r6,zero
  804b10:	000f883a 	mov	r7,zero
  804b14:	080f5cc0 	call	80f5cc <__nedf2>
  804b18:	10017426 	beq	r2,zero,8050ec <___vfprintf_internal_r+0xd4c>
  804b1c:	d9414817 	ldw	r5,1312(sp)
  804b20:	d9814217 	ldw	r6,1288(sp)
  804b24:	8c400044 	addi	r17,r17,1
  804b28:	2c85883a 	add	r2,r5,r18
  804b2c:	14bfffc4 	addi	r18,r2,-1
  804b30:	28bfffc4 	addi	r2,r5,-1
  804b34:	30c00044 	addi	r3,r6,1
  804b38:	98800115 	stw	r2,4(r19)
  804b3c:	008001c4 	movi	r2,7
  804b40:	98c00015 	stw	r3,0(r19)
  804b44:	dc800f15 	stw	r18,60(sp)
  804b48:	dc400e15 	stw	r17,56(sp)
  804b4c:	14418e16 	blt	r2,r17,805188 <___vfprintf_internal_r+0xde8>
  804b50:	9cc00204 	addi	r19,r19,8
  804b54:	d9414917 	ldw	r5,1316(sp)
  804b58:	d8800904 	addi	r2,sp,36
  804b5c:	8c400044 	addi	r17,r17,1
  804b60:	9165883a 	add	r18,r18,r5
  804b64:	98800015 	stw	r2,0(r19)
  804b68:	008001c4 	movi	r2,7
  804b6c:	99400115 	stw	r5,4(r19)
  804b70:	dc800f15 	stw	r18,60(sp)
  804b74:	dc400e15 	stw	r17,56(sp)
  804b78:	1440ed16 	blt	r2,r17,804f30 <___vfprintf_internal_r+0xb90>
  804b7c:	98c00204 	addi	r3,r19,8
  804b80:	003f8506 	br	804998 <___vfprintf_internal_r+0x5f8>
  804b84:	d9814b17 	ldw	r6,1324(sp)
  804b88:	d8814617 	ldw	r2,1304(sp)
  804b8c:	30a1c83a 	sub	r16,r6,r2
  804b90:	043f4b0e 	bge	zero,r16,8048c0 <___vfprintf_internal_r+0x520>
  804b94:	00800404 	movi	r2,16
  804b98:	1404340e 	bge	r2,r16,805c6c <___vfprintf_internal_r+0x18cc>
  804b9c:	1027883a 	mov	r19,r2
  804ba0:	07002074 	movhi	fp,129
  804ba4:	e713a304 	addi	fp,fp,20108
  804ba8:	050001c4 	movi	r20,7
  804bac:	00000306 	br	804bbc <___vfprintf_internal_r+0x81c>
  804bb0:	843ffc04 	addi	r16,r16,-16
  804bb4:	ad400204 	addi	r21,r21,8
  804bb8:	9c00130e 	bge	r19,r16,804c08 <___vfprintf_internal_r+0x868>
  804bbc:	94800404 	addi	r18,r18,16
  804bc0:	8c400044 	addi	r17,r17,1
  804bc4:	af000015 	stw	fp,0(r21)
  804bc8:	acc00115 	stw	r19,4(r21)
  804bcc:	dc800f15 	stw	r18,60(sp)
  804bd0:	dc400e15 	stw	r17,56(sp)
  804bd4:	a47ff60e 	bge	r20,r17,804bb0 <___vfprintf_internal_r+0x810>
  804bd8:	d9015017 	ldw	r4,1344(sp)
  804bdc:	b00b883a 	mov	r5,r22
  804be0:	d9800d04 	addi	r6,sp,52
  804be4:	d9c15215 	stw	r7,1352(sp)
  804be8:	08043480 	call	804348 <__sprint_r>
  804bec:	d9c15217 	ldw	r7,1352(sp)
  804bf0:	103fa31e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804bf4:	843ffc04 	addi	r16,r16,-16
  804bf8:	dc800f17 	ldw	r18,60(sp)
  804bfc:	dc400e17 	ldw	r17,56(sp)
  804c00:	dd401a04 	addi	r21,sp,104
  804c04:	9c3fed16 	blt	r19,r16,804bbc <___vfprintf_internal_r+0x81c>
  804c08:	9425883a 	add	r18,r18,r16
  804c0c:	8c400044 	addi	r17,r17,1
  804c10:	008001c4 	movi	r2,7
  804c14:	af000015 	stw	fp,0(r21)
  804c18:	ac000115 	stw	r16,4(r21)
  804c1c:	dc800f15 	stw	r18,60(sp)
  804c20:	dc400e15 	stw	r17,56(sp)
  804c24:	14416116 	blt	r2,r17,8051ac <___vfprintf_internal_r+0xe0c>
  804c28:	ad400204 	addi	r21,r21,8
  804c2c:	003f2406 	br	8048c0 <___vfprintf_internal_r+0x520>
  804c30:	d9015017 	ldw	r4,1344(sp)
  804c34:	08016000 	call	801600 <__sinit>
  804c38:	d9c15217 	ldw	r7,1352(sp)
  804c3c:	003def06 	br	8043fc <___vfprintf_internal_r+0x5c>
  804c40:	d9015017 	ldw	r4,1344(sp)
  804c44:	b00b883a 	mov	r5,r22
  804c48:	d9c15215 	stw	r7,1352(sp)
  804c4c:	0807a680 	call	807a68 <__swsetup_r>
  804c50:	d9c15217 	ldw	r7,1352(sp)
  804c54:	103dee26 	beq	r2,zero,804410 <___vfprintf_internal_r+0x70>
  804c58:	003f8c06 	br	804a8c <___vfprintf_internal_r+0x6ec>
  804c5c:	d9014317 	ldw	r4,1292(sp)
  804c60:	d9414417 	ldw	r5,1296(sp)
  804c64:	000d883a 	mov	r6,zero
  804c68:	000f883a 	mov	r7,zero
  804c6c:	080f5440 	call	80f544 <__eqdf2>
  804c70:	1000f21e 	bne	r2,zero,80503c <___vfprintf_internal_r+0xc9c>
  804c74:	00802074 	movhi	r2,129
  804c78:	1093a204 	addi	r2,r2,20104
  804c7c:	94800044 	addi	r18,r18,1
  804c80:	8c400044 	addi	r17,r17,1
  804c84:	a8800015 	stw	r2,0(r21)
  804c88:	00c00044 	movi	r3,1
  804c8c:	008001c4 	movi	r2,7
  804c90:	a8c00115 	stw	r3,4(r21)
  804c94:	dc800f15 	stw	r18,60(sp)
  804c98:	dc400e15 	stw	r17,56(sp)
  804c9c:	1442fa16 	blt	r2,r17,805888 <___vfprintf_internal_r+0x14e8>
  804ca0:	a8c00204 	addi	r3,r21,8
  804ca4:	d8800617 	ldw	r2,24(sp)
  804ca8:	d9014817 	ldw	r4,1312(sp)
  804cac:	11015c0e 	bge	r2,r4,805220 <___vfprintf_internal_r+0xe80>
  804cb0:	dc400e17 	ldw	r17,56(sp)
  804cb4:	d9814a17 	ldw	r6,1320(sp)
  804cb8:	00800044 	movi	r2,1
  804cbc:	94800044 	addi	r18,r18,1
  804cc0:	8c400044 	addi	r17,r17,1
  804cc4:	18800115 	stw	r2,4(r3)
  804cc8:	008001c4 	movi	r2,7
  804ccc:	19800015 	stw	r6,0(r3)
  804cd0:	dc800f15 	stw	r18,60(sp)
  804cd4:	dc400e15 	stw	r17,56(sp)
  804cd8:	14431016 	blt	r2,r17,80591c <___vfprintf_internal_r+0x157c>
  804cdc:	18c00204 	addi	r3,r3,8
  804ce0:	d8814817 	ldw	r2,1312(sp)
  804ce4:	143fffc4 	addi	r16,r2,-1
  804ce8:	043f2b0e 	bge	zero,r16,804998 <___vfprintf_internal_r+0x5f8>
  804cec:	00800404 	movi	r2,16
  804cf0:	1402a20e 	bge	r2,r16,80577c <___vfprintf_internal_r+0x13dc>
  804cf4:	dc400e17 	ldw	r17,56(sp)
  804cf8:	1027883a 	mov	r19,r2
  804cfc:	07002074 	movhi	fp,129
  804d00:	e713a304 	addi	fp,fp,20108
  804d04:	050001c4 	movi	r20,7
  804d08:	00000306 	br	804d18 <___vfprintf_internal_r+0x978>
  804d0c:	18c00204 	addi	r3,r3,8
  804d10:	843ffc04 	addi	r16,r16,-16
  804d14:	9c029c0e 	bge	r19,r16,805788 <___vfprintf_internal_r+0x13e8>
  804d18:	94800404 	addi	r18,r18,16
  804d1c:	8c400044 	addi	r17,r17,1
  804d20:	1f000015 	stw	fp,0(r3)
  804d24:	1cc00115 	stw	r19,4(r3)
  804d28:	dc800f15 	stw	r18,60(sp)
  804d2c:	dc400e15 	stw	r17,56(sp)
  804d30:	a47ff60e 	bge	r20,r17,804d0c <___vfprintf_internal_r+0x96c>
  804d34:	d9015017 	ldw	r4,1344(sp)
  804d38:	b00b883a 	mov	r5,r22
  804d3c:	d9800d04 	addi	r6,sp,52
  804d40:	08043480 	call	804348 <__sprint_r>
  804d44:	103f4e1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804d48:	dc800f17 	ldw	r18,60(sp)
  804d4c:	dc400e17 	ldw	r17,56(sp)
  804d50:	d8c01a04 	addi	r3,sp,104
  804d54:	003fee06 	br	804d10 <___vfprintf_internal_r+0x970>
  804d58:	d8802d0b 	ldhu	r2,180(sp)
  804d5c:	00ffffc4 	movi	r3,-1
  804d60:	d8c14c15 	stw	r3,1328(sp)
  804d64:	1080100c 	andi	r2,r2,64
  804d68:	103dcc1e 	bne	r2,zero,80449c <___vfprintf_internal_r+0xfc>
  804d6c:	003dce06 	br	8044a8 <___vfprintf_internal_r+0x108>
  804d70:	d9015017 	ldw	r4,1344(sp)
  804d74:	b00b883a 	mov	r5,r22
  804d78:	d9800d04 	addi	r6,sp,52
  804d7c:	08043480 	call	804348 <__sprint_r>
  804d80:	103f3f1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804d84:	dc800f17 	ldw	r18,60(sp)
  804d88:	003f2e06 	br	804a44 <___vfprintf_internal_r+0x6a4>
  804d8c:	d9414d17 	ldw	r5,1332(sp)
  804d90:	29400414 	ori	r5,r5,16
  804d94:	d9414d15 	stw	r5,1332(sp)
  804d98:	d9814d17 	ldw	r6,1332(sp)
  804d9c:	3080080c 	andi	r2,r6,32
  804da0:	10014f1e 	bne	r2,zero,8052e0 <___vfprintf_internal_r+0xf40>
  804da4:	d8c14d17 	ldw	r3,1332(sp)
  804da8:	1880040c 	andi	r2,r3,16
  804dac:	1002ea1e 	bne	r2,zero,805958 <___vfprintf_internal_r+0x15b8>
  804db0:	d9014d17 	ldw	r4,1332(sp)
  804db4:	2080100c 	andi	r2,r4,64
  804db8:	1002e726 	beq	r2,zero,805958 <___vfprintf_internal_r+0x15b8>
  804dbc:	3880000f 	ldh	r2,0(r7)
  804dc0:	39c00104 	addi	r7,r7,4
  804dc4:	d9c14115 	stw	r7,1284(sp)
  804dc8:	1023d7fa 	srai	r17,r2,31
  804dcc:	1021883a 	mov	r16,r2
  804dd0:	88037216 	blt	r17,zero,805b9c <___vfprintf_internal_r+0x17fc>
  804dd4:	01000044 	movi	r4,1
  804dd8:	98000416 	blt	r19,zero,804dec <___vfprintf_internal_r+0xa4c>
  804ddc:	d8c14d17 	ldw	r3,1332(sp)
  804de0:	00bfdfc4 	movi	r2,-129
  804de4:	1886703a 	and	r3,r3,r2
  804de8:	d8c14d15 	stw	r3,1332(sp)
  804dec:	8444b03a 	or	r2,r16,r17
  804df0:	1002261e 	bne	r2,zero,80568c <___vfprintf_internal_r+0x12ec>
  804df4:	9802251e 	bne	r19,zero,80568c <___vfprintf_internal_r+0x12ec>
  804df8:	20803fcc 	andi	r2,r4,255
  804dfc:	10029b26 	beq	r2,zero,80586c <___vfprintf_internal_r+0x14cc>
  804e00:	d8c01a04 	addi	r3,sp,104
  804e04:	dd001004 	addi	r20,sp,64
  804e08:	d8c14215 	stw	r3,1288(sp)
  804e0c:	d8c14217 	ldw	r3,1288(sp)
  804e10:	dcc14615 	stw	r19,1304(sp)
  804e14:	a0c5c83a 	sub	r2,r20,r3
  804e18:	11c00a04 	addi	r7,r2,40
  804e1c:	99c0010e 	bge	r19,r7,804e24 <___vfprintf_internal_r+0xa84>
  804e20:	d9c14615 	stw	r7,1304(sp)
  804e24:	dcc14715 	stw	r19,1308(sp)
  804e28:	d8800407 	ldb	r2,16(sp)
  804e2c:	103e4c26 	beq	r2,zero,804760 <___vfprintf_internal_r+0x3c0>
  804e30:	d8814617 	ldw	r2,1304(sp)
  804e34:	10800044 	addi	r2,r2,1
  804e38:	d8814615 	stw	r2,1304(sp)
  804e3c:	003e4806 	br	804760 <___vfprintf_internal_r+0x3c0>
  804e40:	d9814d17 	ldw	r6,1332(sp)
  804e44:	31800414 	ori	r6,r6,16
  804e48:	d9814d15 	stw	r6,1332(sp)
  804e4c:	d8c14d17 	ldw	r3,1332(sp)
  804e50:	1880080c 	andi	r2,r3,32
  804e54:	1001271e 	bne	r2,zero,8052f4 <___vfprintf_internal_r+0xf54>
  804e58:	d9414d17 	ldw	r5,1332(sp)
  804e5c:	2880040c 	andi	r2,r5,16
  804e60:	1002b61e 	bne	r2,zero,80593c <___vfprintf_internal_r+0x159c>
  804e64:	d9814d17 	ldw	r6,1332(sp)
  804e68:	3080100c 	andi	r2,r6,64
  804e6c:	1002b326 	beq	r2,zero,80593c <___vfprintf_internal_r+0x159c>
  804e70:	3c00000b 	ldhu	r16,0(r7)
  804e74:	0009883a 	mov	r4,zero
  804e78:	39c00104 	addi	r7,r7,4
  804e7c:	0023883a 	mov	r17,zero
  804e80:	d9c14115 	stw	r7,1284(sp)
  804e84:	d8000405 	stb	zero,16(sp)
  804e88:	003fd306 	br	804dd8 <___vfprintf_internal_r+0xa38>
  804e8c:	d9014d17 	ldw	r4,1332(sp)
  804e90:	21000414 	ori	r4,r4,16
  804e94:	d9014d15 	stw	r4,1332(sp)
  804e98:	d9414d17 	ldw	r5,1332(sp)
  804e9c:	2880080c 	andi	r2,r5,32
  804ea0:	1001081e 	bne	r2,zero,8052c4 <___vfprintf_internal_r+0xf24>
  804ea4:	d8c14d17 	ldw	r3,1332(sp)
  804ea8:	1880040c 	andi	r2,r3,16
  804eac:	1002b01e 	bne	r2,zero,805970 <___vfprintf_internal_r+0x15d0>
  804eb0:	d9014d17 	ldw	r4,1332(sp)
  804eb4:	2080100c 	andi	r2,r4,64
  804eb8:	1002ad26 	beq	r2,zero,805970 <___vfprintf_internal_r+0x15d0>
  804ebc:	3c00000b 	ldhu	r16,0(r7)
  804ec0:	01000044 	movi	r4,1
  804ec4:	39c00104 	addi	r7,r7,4
  804ec8:	0023883a 	mov	r17,zero
  804ecc:	d9c14115 	stw	r7,1284(sp)
  804ed0:	d8000405 	stb	zero,16(sp)
  804ed4:	003fc006 	br	804dd8 <___vfprintf_internal_r+0xa38>
  804ed8:	d9015017 	ldw	r4,1344(sp)
  804edc:	b00b883a 	mov	r5,r22
  804ee0:	d9800d04 	addi	r6,sp,52
  804ee4:	08043480 	call	804348 <__sprint_r>
  804ee8:	103ee51e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804eec:	dc800f17 	ldw	r18,60(sp)
  804ef0:	d8c01a04 	addi	r3,sp,104
  804ef4:	d9814d17 	ldw	r6,1332(sp)
  804ef8:	3080004c 	andi	r2,r6,1
  804efc:	1005003a 	cmpeq	r2,r2,zero
  804f00:	103ea51e 	bne	r2,zero,804998 <___vfprintf_internal_r+0x5f8>
  804f04:	00800044 	movi	r2,1
  804f08:	dc400e17 	ldw	r17,56(sp)
  804f0c:	18800115 	stw	r2,4(r3)
  804f10:	d8814a17 	ldw	r2,1320(sp)
  804f14:	94800044 	addi	r18,r18,1
  804f18:	8c400044 	addi	r17,r17,1
  804f1c:	18800015 	stw	r2,0(r3)
  804f20:	008001c4 	movi	r2,7
  804f24:	dc800f15 	stw	r18,60(sp)
  804f28:	dc400e15 	stw	r17,56(sp)
  804f2c:	14421e0e 	bge	r2,r17,8057a8 <___vfprintf_internal_r+0x1408>
  804f30:	d9015017 	ldw	r4,1344(sp)
  804f34:	b00b883a 	mov	r5,r22
  804f38:	d9800d04 	addi	r6,sp,52
  804f3c:	08043480 	call	804348 <__sprint_r>
  804f40:	103ecf1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804f44:	dc800f17 	ldw	r18,60(sp)
  804f48:	d8c01a04 	addi	r3,sp,104
  804f4c:	003e9206 	br	804998 <___vfprintf_internal_r+0x5f8>
  804f50:	d9015017 	ldw	r4,1344(sp)
  804f54:	b00b883a 	mov	r5,r22
  804f58:	d9800d04 	addi	r6,sp,52
  804f5c:	08043480 	call	804348 <__sprint_r>
  804f60:	103ec026 	beq	r2,zero,804a64 <___vfprintf_internal_r+0x6c4>
  804f64:	003ec606 	br	804a80 <___vfprintf_internal_r+0x6e0>
  804f68:	d9015017 	ldw	r4,1344(sp)
  804f6c:	b00b883a 	mov	r5,r22
  804f70:	d9800d04 	addi	r6,sp,52
  804f74:	d9c15215 	stw	r7,1352(sp)
  804f78:	08043480 	call	804348 <__sprint_r>
  804f7c:	d9c15217 	ldw	r7,1352(sp)
  804f80:	103ebf1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804f84:	dc800f17 	ldw	r18,60(sp)
  804f88:	dc400e17 	ldw	r17,56(sp)
  804f8c:	dd401a04 	addi	r21,sp,104
  804f90:	003e7406 	br	804964 <___vfprintf_internal_r+0x5c4>
  804f94:	d9015017 	ldw	r4,1344(sp)
  804f98:	b00b883a 	mov	r5,r22
  804f9c:	d9800d04 	addi	r6,sp,52
  804fa0:	d9c15215 	stw	r7,1352(sp)
  804fa4:	08043480 	call	804348 <__sprint_r>
  804fa8:	d9c15217 	ldw	r7,1352(sp)
  804fac:	103eb41e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804fb0:	dd401a04 	addi	r21,sp,104
  804fb4:	003d6d06 	br	80456c <___vfprintf_internal_r+0x1cc>
  804fb8:	d9015017 	ldw	r4,1344(sp)
  804fbc:	b00b883a 	mov	r5,r22
  804fc0:	d9800d04 	addi	r6,sp,52
  804fc4:	d9c15215 	stw	r7,1352(sp)
  804fc8:	08043480 	call	804348 <__sprint_r>
  804fcc:	d9c15217 	ldw	r7,1352(sp)
  804fd0:	103eab1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  804fd4:	dc800f17 	ldw	r18,60(sp)
  804fd8:	dc400e17 	ldw	r17,56(sp)
  804fdc:	dd401a04 	addi	r21,sp,104
  804fe0:	003e3406 	br	8048b4 <___vfprintf_internal_r+0x514>
  804fe4:	d9015017 	ldw	r4,1344(sp)
  804fe8:	b00b883a 	mov	r5,r22
  804fec:	d9800d04 	addi	r6,sp,52
  804ff0:	d9c15215 	stw	r7,1352(sp)
  804ff4:	08043480 	call	804348 <__sprint_r>
  804ff8:	d9c15217 	ldw	r7,1352(sp)
  804ffc:	103ea01e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805000:	dc800f17 	ldw	r18,60(sp)
  805004:	dc400e17 	ldw	r17,56(sp)
  805008:	dd401a04 	addi	r21,sp,104
  80500c:	003e1c06 	br	804880 <___vfprintf_internal_r+0x4e0>
  805010:	d9015017 	ldw	r4,1344(sp)
  805014:	b00b883a 	mov	r5,r22
  805018:	d9800d04 	addi	r6,sp,52
  80501c:	d9c15215 	stw	r7,1352(sp)
  805020:	08043480 	call	804348 <__sprint_r>
  805024:	d9c15217 	ldw	r7,1352(sp)
  805028:	103e951e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  80502c:	dc800f17 	ldw	r18,60(sp)
  805030:	dc400e17 	ldw	r17,56(sp)
  805034:	dd401a04 	addi	r21,sp,104
  805038:	003e0406 	br	80484c <___vfprintf_internal_r+0x4ac>
  80503c:	d9000617 	ldw	r4,24(sp)
  805040:	0102520e 	bge	zero,r4,80598c <___vfprintf_internal_r+0x15ec>
  805044:	d9814817 	ldw	r6,1312(sp)
  805048:	21807a16 	blt	r4,r6,805234 <___vfprintf_internal_r+0xe94>
  80504c:	d8814217 	ldw	r2,1288(sp)
  805050:	91a5883a 	add	r18,r18,r6
  805054:	8c400044 	addi	r17,r17,1
  805058:	a8800015 	stw	r2,0(r21)
  80505c:	008001c4 	movi	r2,7
  805060:	a9800115 	stw	r6,4(r21)
  805064:	dc800f15 	stw	r18,60(sp)
  805068:	dc400e15 	stw	r17,56(sp)
  80506c:	1442f616 	blt	r2,r17,805c48 <___vfprintf_internal_r+0x18a8>
  805070:	a8c00204 	addi	r3,r21,8
  805074:	d9414817 	ldw	r5,1312(sp)
  805078:	2161c83a 	sub	r16,r4,r5
  80507c:	043f9d0e 	bge	zero,r16,804ef4 <___vfprintf_internal_r+0xb54>
  805080:	00800404 	movi	r2,16
  805084:	1402130e 	bge	r2,r16,8058d4 <___vfprintf_internal_r+0x1534>
  805088:	dc400e17 	ldw	r17,56(sp)
  80508c:	1027883a 	mov	r19,r2
  805090:	07002074 	movhi	fp,129
  805094:	e713a304 	addi	fp,fp,20108
  805098:	050001c4 	movi	r20,7
  80509c:	00000306 	br	8050ac <___vfprintf_internal_r+0xd0c>
  8050a0:	18c00204 	addi	r3,r3,8
  8050a4:	843ffc04 	addi	r16,r16,-16
  8050a8:	9c020d0e 	bge	r19,r16,8058e0 <___vfprintf_internal_r+0x1540>
  8050ac:	94800404 	addi	r18,r18,16
  8050b0:	8c400044 	addi	r17,r17,1
  8050b4:	1f000015 	stw	fp,0(r3)
  8050b8:	1cc00115 	stw	r19,4(r3)
  8050bc:	dc800f15 	stw	r18,60(sp)
  8050c0:	dc400e15 	stw	r17,56(sp)
  8050c4:	a47ff60e 	bge	r20,r17,8050a0 <___vfprintf_internal_r+0xd00>
  8050c8:	d9015017 	ldw	r4,1344(sp)
  8050cc:	b00b883a 	mov	r5,r22
  8050d0:	d9800d04 	addi	r6,sp,52
  8050d4:	08043480 	call	804348 <__sprint_r>
  8050d8:	103e691e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  8050dc:	dc800f17 	ldw	r18,60(sp)
  8050e0:	dc400e17 	ldw	r17,56(sp)
  8050e4:	d8c01a04 	addi	r3,sp,104
  8050e8:	003fee06 	br	8050a4 <___vfprintf_internal_r+0xd04>
  8050ec:	d8814817 	ldw	r2,1312(sp)
  8050f0:	143fffc4 	addi	r16,r2,-1
  8050f4:	043e970e 	bge	zero,r16,804b54 <___vfprintf_internal_r+0x7b4>
  8050f8:	00800404 	movi	r2,16
  8050fc:	1400180e 	bge	r2,r16,805160 <___vfprintf_internal_r+0xdc0>
  805100:	1029883a 	mov	r20,r2
  805104:	07002074 	movhi	fp,129
  805108:	e713a304 	addi	fp,fp,20108
  80510c:	054001c4 	movi	r21,7
  805110:	00000306 	br	805120 <___vfprintf_internal_r+0xd80>
  805114:	9cc00204 	addi	r19,r19,8
  805118:	843ffc04 	addi	r16,r16,-16
  80511c:	a400120e 	bge	r20,r16,805168 <___vfprintf_internal_r+0xdc8>
  805120:	94800404 	addi	r18,r18,16
  805124:	8c400044 	addi	r17,r17,1
  805128:	9f000015 	stw	fp,0(r19)
  80512c:	9d000115 	stw	r20,4(r19)
  805130:	dc800f15 	stw	r18,60(sp)
  805134:	dc400e15 	stw	r17,56(sp)
  805138:	ac7ff60e 	bge	r21,r17,805114 <___vfprintf_internal_r+0xd74>
  80513c:	d9015017 	ldw	r4,1344(sp)
  805140:	b00b883a 	mov	r5,r22
  805144:	d9800d04 	addi	r6,sp,52
  805148:	08043480 	call	804348 <__sprint_r>
  80514c:	103e4c1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805150:	dc800f17 	ldw	r18,60(sp)
  805154:	dc400e17 	ldw	r17,56(sp)
  805158:	dcc01a04 	addi	r19,sp,104
  80515c:	003fee06 	br	805118 <___vfprintf_internal_r+0xd78>
  805160:	07002074 	movhi	fp,129
  805164:	e713a304 	addi	fp,fp,20108
  805168:	9425883a 	add	r18,r18,r16
  80516c:	8c400044 	addi	r17,r17,1
  805170:	008001c4 	movi	r2,7
  805174:	9f000015 	stw	fp,0(r19)
  805178:	9c000115 	stw	r16,4(r19)
  80517c:	dc800f15 	stw	r18,60(sp)
  805180:	dc400e15 	stw	r17,56(sp)
  805184:	147e720e 	bge	r2,r17,804b50 <___vfprintf_internal_r+0x7b0>
  805188:	d9015017 	ldw	r4,1344(sp)
  80518c:	b00b883a 	mov	r5,r22
  805190:	d9800d04 	addi	r6,sp,52
  805194:	08043480 	call	804348 <__sprint_r>
  805198:	103e391e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  80519c:	dc800f17 	ldw	r18,60(sp)
  8051a0:	dc400e17 	ldw	r17,56(sp)
  8051a4:	dcc01a04 	addi	r19,sp,104
  8051a8:	003e6a06 	br	804b54 <___vfprintf_internal_r+0x7b4>
  8051ac:	d9015017 	ldw	r4,1344(sp)
  8051b0:	b00b883a 	mov	r5,r22
  8051b4:	d9800d04 	addi	r6,sp,52
  8051b8:	d9c15215 	stw	r7,1352(sp)
  8051bc:	08043480 	call	804348 <__sprint_r>
  8051c0:	d9c15217 	ldw	r7,1352(sp)
  8051c4:	103e2e1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  8051c8:	dc800f17 	ldw	r18,60(sp)
  8051cc:	dc400e17 	ldw	r17,56(sp)
  8051d0:	dd401a04 	addi	r21,sp,104
  8051d4:	003dba06 	br	8048c0 <___vfprintf_internal_r+0x520>
  8051d8:	d9015017 	ldw	r4,1344(sp)
  8051dc:	b00b883a 	mov	r5,r22
  8051e0:	d9800d04 	addi	r6,sp,52
  8051e4:	08043480 	call	804348 <__sprint_r>
  8051e8:	103e251e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  8051ec:	dc800f17 	ldw	r18,60(sp)
  8051f0:	dc400e17 	ldw	r17,56(sp)
  8051f4:	dcc01a04 	addi	r19,sp,104
  8051f8:	003e4206 	br	804b04 <___vfprintf_internal_r+0x764>
  8051fc:	d9015017 	ldw	r4,1344(sp)
  805200:	b00b883a 	mov	r5,r22
  805204:	d9800d04 	addi	r6,sp,52
  805208:	08043480 	call	804348 <__sprint_r>
  80520c:	103e1c1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805210:	dc800f17 	ldw	r18,60(sp)
  805214:	dc400e17 	ldw	r17,56(sp)
  805218:	d8c01a04 	addi	r3,sp,104
  80521c:	003e2e06 	br	804ad8 <___vfprintf_internal_r+0x738>
  805220:	d9414d17 	ldw	r5,1332(sp)
  805224:	2880004c 	andi	r2,r5,1
  805228:	1005003a 	cmpeq	r2,r2,zero
  80522c:	103dda1e 	bne	r2,zero,804998 <___vfprintf_internal_r+0x5f8>
  805230:	003e9f06 	br	804cb0 <___vfprintf_internal_r+0x910>
  805234:	d8c14217 	ldw	r3,1288(sp)
  805238:	9125883a 	add	r18,r18,r4
  80523c:	8c400044 	addi	r17,r17,1
  805240:	008001c4 	movi	r2,7
  805244:	a8c00015 	stw	r3,0(r21)
  805248:	a9000115 	stw	r4,4(r21)
  80524c:	dc800f15 	stw	r18,60(sp)
  805250:	dc400e15 	stw	r17,56(sp)
  805254:	14426616 	blt	r2,r17,805bf0 <___vfprintf_internal_r+0x1850>
  805258:	a8c00204 	addi	r3,r21,8
  80525c:	d9414a17 	ldw	r5,1320(sp)
  805260:	00800044 	movi	r2,1
  805264:	94800044 	addi	r18,r18,1
  805268:	8c400044 	addi	r17,r17,1
  80526c:	18800115 	stw	r2,4(r3)
  805270:	008001c4 	movi	r2,7
  805274:	19400015 	stw	r5,0(r3)
  805278:	dc800f15 	stw	r18,60(sp)
  80527c:	dc400e15 	stw	r17,56(sp)
  805280:	2021883a 	mov	r16,r4
  805284:	14425016 	blt	r2,r17,805bc8 <___vfprintf_internal_r+0x1828>
  805288:	19400204 	addi	r5,r3,8
  80528c:	d9814817 	ldw	r6,1312(sp)
  805290:	8c400044 	addi	r17,r17,1
  805294:	dc400e15 	stw	r17,56(sp)
  805298:	3107c83a 	sub	r3,r6,r4
  80529c:	d9014217 	ldw	r4,1288(sp)
  8052a0:	90e5883a 	add	r18,r18,r3
  8052a4:	28c00115 	stw	r3,4(r5)
  8052a8:	8105883a 	add	r2,r16,r4
  8052ac:	28800015 	stw	r2,0(r5)
  8052b0:	008001c4 	movi	r2,7
  8052b4:	dc800f15 	stw	r18,60(sp)
  8052b8:	147f1d16 	blt	r2,r17,804f30 <___vfprintf_internal_r+0xb90>
  8052bc:	28c00204 	addi	r3,r5,8
  8052c0:	003db506 	br	804998 <___vfprintf_internal_r+0x5f8>
  8052c4:	3c000017 	ldw	r16,0(r7)
  8052c8:	3c400117 	ldw	r17,4(r7)
  8052cc:	39800204 	addi	r6,r7,8
  8052d0:	01000044 	movi	r4,1
  8052d4:	d9814115 	stw	r6,1284(sp)
  8052d8:	d8000405 	stb	zero,16(sp)
  8052dc:	003ebe06 	br	804dd8 <___vfprintf_internal_r+0xa38>
  8052e0:	3c000017 	ldw	r16,0(r7)
  8052e4:	3c400117 	ldw	r17,4(r7)
  8052e8:	38800204 	addi	r2,r7,8
  8052ec:	d8814115 	stw	r2,1284(sp)
  8052f0:	003eb706 	br	804dd0 <___vfprintf_internal_r+0xa30>
  8052f4:	3c000017 	ldw	r16,0(r7)
  8052f8:	3c400117 	ldw	r17,4(r7)
  8052fc:	39000204 	addi	r4,r7,8
  805300:	d9014115 	stw	r4,1284(sp)
  805304:	0009883a 	mov	r4,zero
  805308:	d8000405 	stb	zero,16(sp)
  80530c:	003eb206 	br	804dd8 <___vfprintf_internal_r+0xa38>
  805310:	38c00017 	ldw	r3,0(r7)
  805314:	39c00104 	addi	r7,r7,4
  805318:	d8c14b15 	stw	r3,1324(sp)
  80531c:	1800d10e 	bge	r3,zero,805664 <___vfprintf_internal_r+0x12c4>
  805320:	00c7c83a 	sub	r3,zero,r3
  805324:	d8c14b15 	stw	r3,1324(sp)
  805328:	d9014d17 	ldw	r4,1332(sp)
  80532c:	b8c00007 	ldb	r3,0(r23)
  805330:	21000114 	ori	r4,r4,4
  805334:	d9014d15 	stw	r4,1332(sp)
  805338:	003c9806 	br	80459c <___vfprintf_internal_r+0x1fc>
  80533c:	d9814d17 	ldw	r6,1332(sp)
  805340:	3080080c 	andi	r2,r6,32
  805344:	1001f026 	beq	r2,zero,805b08 <___vfprintf_internal_r+0x1768>
  805348:	d9014c17 	ldw	r4,1328(sp)
  80534c:	38800017 	ldw	r2,0(r7)
  805350:	39c00104 	addi	r7,r7,4
  805354:	d9c14115 	stw	r7,1284(sp)
  805358:	2007d7fa 	srai	r3,r4,31
  80535c:	d9c14117 	ldw	r7,1284(sp)
  805360:	11000015 	stw	r4,0(r2)
  805364:	10c00115 	stw	r3,4(r2)
  805368:	003c6906 	br	804510 <___vfprintf_internal_r+0x170>
  80536c:	b8c00007 	ldb	r3,0(r23)
  805370:	00801b04 	movi	r2,108
  805374:	18824f26 	beq	r3,r2,805cb4 <___vfprintf_internal_r+0x1914>
  805378:	d9414d17 	ldw	r5,1332(sp)
  80537c:	29400414 	ori	r5,r5,16
  805380:	d9414d15 	stw	r5,1332(sp)
  805384:	003c8506 	br	80459c <___vfprintf_internal_r+0x1fc>
  805388:	d9814d17 	ldw	r6,1332(sp)
  80538c:	b8c00007 	ldb	r3,0(r23)
  805390:	31800814 	ori	r6,r6,32
  805394:	d9814d15 	stw	r6,1332(sp)
  805398:	003c8006 	br	80459c <___vfprintf_internal_r+0x1fc>
  80539c:	d8814d17 	ldw	r2,1332(sp)
  8053a0:	3c000017 	ldw	r16,0(r7)
  8053a4:	00c01e04 	movi	r3,120
  8053a8:	10800094 	ori	r2,r2,2
  8053ac:	d8814d15 	stw	r2,1332(sp)
  8053b0:	39c00104 	addi	r7,r7,4
  8053b4:	01402074 	movhi	r5,129
  8053b8:	29538b04 	addi	r5,r5,20012
  8053bc:	00800c04 	movi	r2,48
  8053c0:	0023883a 	mov	r17,zero
  8053c4:	01000084 	movi	r4,2
  8053c8:	d9c14115 	stw	r7,1284(sp)
  8053cc:	d8c14e15 	stw	r3,1336(sp)
  8053d0:	d9414515 	stw	r5,1300(sp)
  8053d4:	d8800505 	stb	r2,20(sp)
  8053d8:	d8c00545 	stb	r3,21(sp)
  8053dc:	d8000405 	stb	zero,16(sp)
  8053e0:	003e7d06 	br	804dd8 <___vfprintf_internal_r+0xa38>
  8053e4:	d8814d17 	ldw	r2,1332(sp)
  8053e8:	b8c00007 	ldb	r3,0(r23)
  8053ec:	10801014 	ori	r2,r2,64
  8053f0:	d8814d15 	stw	r2,1332(sp)
  8053f4:	003c6906 	br	80459c <___vfprintf_internal_r+0x1fc>
  8053f8:	d9414d17 	ldw	r5,1332(sp)
  8053fc:	2880020c 	andi	r2,r5,8
  805400:	1001df26 	beq	r2,zero,805b80 <___vfprintf_internal_r+0x17e0>
  805404:	39800017 	ldw	r6,0(r7)
  805408:	38800204 	addi	r2,r7,8
  80540c:	d8814115 	stw	r2,1284(sp)
  805410:	d9814315 	stw	r6,1292(sp)
  805414:	39c00117 	ldw	r7,4(r7)
  805418:	d9c14415 	stw	r7,1296(sp)
  80541c:	d9014317 	ldw	r4,1292(sp)
  805420:	d9414417 	ldw	r5,1296(sp)
  805424:	080aa000 	call	80aa00 <__isinfd>
  805428:	10021726 	beq	r2,zero,805c88 <___vfprintf_internal_r+0x18e8>
  80542c:	d9014317 	ldw	r4,1292(sp)
  805430:	d9414417 	ldw	r5,1296(sp)
  805434:	000d883a 	mov	r6,zero
  805438:	000f883a 	mov	r7,zero
  80543c:	080f7640 	call	80f764 <__ltdf2>
  805440:	1002ca16 	blt	r2,zero,805f6c <___vfprintf_internal_r+0x1bcc>
  805444:	d9414e17 	ldw	r5,1336(sp)
  805448:	008011c4 	movi	r2,71
  80544c:	11420a16 	blt	r2,r5,805c78 <___vfprintf_internal_r+0x18d8>
  805450:	01802074 	movhi	r6,129
  805454:	31939004 	addi	r6,r6,20032
  805458:	d9814215 	stw	r6,1288(sp)
  80545c:	d9014d17 	ldw	r4,1332(sp)
  805460:	00c000c4 	movi	r3,3
  805464:	00bfdfc4 	movi	r2,-129
  805468:	2088703a 	and	r4,r4,r2
  80546c:	180f883a 	mov	r7,r3
  805470:	d8c14615 	stw	r3,1304(sp)
  805474:	d9014d15 	stw	r4,1332(sp)
  805478:	d8014715 	stw	zero,1308(sp)
  80547c:	003e6a06 	br	804e28 <___vfprintf_internal_r+0xa88>
  805480:	38800017 	ldw	r2,0(r7)
  805484:	00c00044 	movi	r3,1
  805488:	39c00104 	addi	r7,r7,4
  80548c:	d9c14115 	stw	r7,1284(sp)
  805490:	d9001004 	addi	r4,sp,64
  805494:	180f883a 	mov	r7,r3
  805498:	d8c14615 	stw	r3,1304(sp)
  80549c:	d9014215 	stw	r4,1288(sp)
  8054a0:	d8801005 	stb	r2,64(sp)
  8054a4:	d8000405 	stb	zero,16(sp)
  8054a8:	003cac06 	br	80475c <___vfprintf_internal_r+0x3bc>
  8054ac:	01402074 	movhi	r5,129
  8054b0:	29539604 	addi	r5,r5,20056
  8054b4:	d9414515 	stw	r5,1300(sp)
  8054b8:	d9814d17 	ldw	r6,1332(sp)
  8054bc:	3080080c 	andi	r2,r6,32
  8054c0:	1000f926 	beq	r2,zero,8058a8 <___vfprintf_internal_r+0x1508>
  8054c4:	3c000017 	ldw	r16,0(r7)
  8054c8:	3c400117 	ldw	r17,4(r7)
  8054cc:	38800204 	addi	r2,r7,8
  8054d0:	d8814115 	stw	r2,1284(sp)
  8054d4:	d9414d17 	ldw	r5,1332(sp)
  8054d8:	2880004c 	andi	r2,r5,1
  8054dc:	1005003a 	cmpeq	r2,r2,zero
  8054e0:	1000b31e 	bne	r2,zero,8057b0 <___vfprintf_internal_r+0x1410>
  8054e4:	8444b03a 	or	r2,r16,r17
  8054e8:	1000b126 	beq	r2,zero,8057b0 <___vfprintf_internal_r+0x1410>
  8054ec:	d9814e17 	ldw	r6,1336(sp)
  8054f0:	29400094 	ori	r5,r5,2
  8054f4:	00800c04 	movi	r2,48
  8054f8:	01000084 	movi	r4,2
  8054fc:	d9414d15 	stw	r5,1332(sp)
  805500:	d8800505 	stb	r2,20(sp)
  805504:	d9800545 	stb	r6,21(sp)
  805508:	d8000405 	stb	zero,16(sp)
  80550c:	003e3206 	br	804dd8 <___vfprintf_internal_r+0xa38>
  805510:	01802074 	movhi	r6,129
  805514:	31938b04 	addi	r6,r6,20012
  805518:	d9814515 	stw	r6,1300(sp)
  80551c:	003fe606 	br	8054b8 <___vfprintf_internal_r+0x1118>
  805520:	00800ac4 	movi	r2,43
  805524:	d8800405 	stb	r2,16(sp)
  805528:	b8c00007 	ldb	r3,0(r23)
  80552c:	003c1b06 	br	80459c <___vfprintf_internal_r+0x1fc>
  805530:	d8814d17 	ldw	r2,1332(sp)
  805534:	b8c00007 	ldb	r3,0(r23)
  805538:	10800054 	ori	r2,r2,1
  80553c:	d8814d15 	stw	r2,1332(sp)
  805540:	003c1606 	br	80459c <___vfprintf_internal_r+0x1fc>
  805544:	d8800407 	ldb	r2,16(sp)
  805548:	1000461e 	bne	r2,zero,805664 <___vfprintf_internal_r+0x12c4>
  80554c:	00800804 	movi	r2,32
  805550:	d8800405 	stb	r2,16(sp)
  805554:	b8c00007 	ldb	r3,0(r23)
  805558:	003c1006 	br	80459c <___vfprintf_internal_r+0x1fc>
  80555c:	d9814d17 	ldw	r6,1332(sp)
  805560:	b8c00007 	ldb	r3,0(r23)
  805564:	31800214 	ori	r6,r6,8
  805568:	d9814d15 	stw	r6,1332(sp)
  80556c:	003c0b06 	br	80459c <___vfprintf_internal_r+0x1fc>
  805570:	0007883a 	mov	r3,zero
  805574:	01000244 	movi	r4,9
  805578:	188002a4 	muli	r2,r3,10
  80557c:	b8c00007 	ldb	r3,0(r23)
  805580:	d9814e17 	ldw	r6,1336(sp)
  805584:	bdc00044 	addi	r23,r23,1
  805588:	d8c14e15 	stw	r3,1336(sp)
  80558c:	d9414e17 	ldw	r5,1336(sp)
  805590:	3085883a 	add	r2,r6,r2
  805594:	10fff404 	addi	r3,r2,-48
  805598:	28bff404 	addi	r2,r5,-48
  80559c:	20bff62e 	bgeu	r4,r2,805578 <___vfprintf_internal_r+0x11d8>
  8055a0:	d8c14b15 	stw	r3,1324(sp)
  8055a4:	003bff06 	br	8045a4 <___vfprintf_internal_r+0x204>
  8055a8:	d9414d17 	ldw	r5,1332(sp)
  8055ac:	b8c00007 	ldb	r3,0(r23)
  8055b0:	29402014 	ori	r5,r5,128
  8055b4:	d9414d15 	stw	r5,1332(sp)
  8055b8:	003bf806 	br	80459c <___vfprintf_internal_r+0x1fc>
  8055bc:	b8c00007 	ldb	r3,0(r23)
  8055c0:	00800a84 	movi	r2,42
  8055c4:	bdc00044 	addi	r23,r23,1
  8055c8:	18831526 	beq	r3,r2,806220 <___vfprintf_internal_r+0x1e80>
  8055cc:	d8c14e15 	stw	r3,1336(sp)
  8055d0:	18bff404 	addi	r2,r3,-48
  8055d4:	00c00244 	movi	r3,9
  8055d8:	18827836 	bltu	r3,r2,805fbc <___vfprintf_internal_r+0x1c1c>
  8055dc:	000d883a 	mov	r6,zero
  8055e0:	308002a4 	muli	r2,r6,10
  8055e4:	b9800007 	ldb	r6,0(r23)
  8055e8:	d9414e17 	ldw	r5,1336(sp)
  8055ec:	bdc00044 	addi	r23,r23,1
  8055f0:	d9814e15 	stw	r6,1336(sp)
  8055f4:	d9014e17 	ldw	r4,1336(sp)
  8055f8:	1145883a 	add	r2,r2,r5
  8055fc:	11bff404 	addi	r6,r2,-48
  805600:	20bff404 	addi	r2,r4,-48
  805604:	18bff62e 	bgeu	r3,r2,8055e0 <___vfprintf_internal_r+0x1240>
  805608:	3027883a 	mov	r19,r6
  80560c:	303be50e 	bge	r6,zero,8045a4 <___vfprintf_internal_r+0x204>
  805610:	04ffffc4 	movi	r19,-1
  805614:	003be306 	br	8045a4 <___vfprintf_internal_r+0x204>
  805618:	d8000405 	stb	zero,16(sp)
  80561c:	39800017 	ldw	r6,0(r7)
  805620:	39c00104 	addi	r7,r7,4
  805624:	d9c14115 	stw	r7,1284(sp)
  805628:	d9814215 	stw	r6,1288(sp)
  80562c:	3001c926 	beq	r6,zero,805d54 <___vfprintf_internal_r+0x19b4>
  805630:	98000e16 	blt	r19,zero,80566c <___vfprintf_internal_r+0x12cc>
  805634:	d9014217 	ldw	r4,1288(sp)
  805638:	000b883a 	mov	r5,zero
  80563c:	980d883a 	mov	r6,r19
  805640:	080325c0 	call	80325c <memchr>
  805644:	10025926 	beq	r2,zero,805fac <___vfprintf_internal_r+0x1c0c>
  805648:	d8c14217 	ldw	r3,1288(sp)
  80564c:	10cfc83a 	sub	r7,r2,r3
  805650:	99c19e16 	blt	r19,r7,805ccc <___vfprintf_internal_r+0x192c>
  805654:	d9c14615 	stw	r7,1304(sp)
  805658:	38000916 	blt	r7,zero,805680 <___vfprintf_internal_r+0x12e0>
  80565c:	d8014715 	stw	zero,1308(sp)
  805660:	003df106 	br	804e28 <___vfprintf_internal_r+0xa88>
  805664:	b8c00007 	ldb	r3,0(r23)
  805668:	003bcc06 	br	80459c <___vfprintf_internal_r+0x1fc>
  80566c:	d9014217 	ldw	r4,1288(sp)
  805670:	08042d40 	call	8042d4 <strlen>
  805674:	d8814615 	stw	r2,1304(sp)
  805678:	100f883a 	mov	r7,r2
  80567c:	103ff70e 	bge	r2,zero,80565c <___vfprintf_internal_r+0x12bc>
  805680:	d8014615 	stw	zero,1304(sp)
  805684:	d8014715 	stw	zero,1308(sp)
  805688:	003de706 	br	804e28 <___vfprintf_internal_r+0xa88>
  80568c:	20c03fcc 	andi	r3,r4,255
  805690:	00800044 	movi	r2,1
  805694:	18802d26 	beq	r3,r2,80574c <___vfprintf_internal_r+0x13ac>
  805698:	18800e36 	bltu	r3,r2,8056d4 <___vfprintf_internal_r+0x1334>
  80569c:	00800084 	movi	r2,2
  8056a0:	1880fa26 	beq	r3,r2,805a8c <___vfprintf_internal_r+0x16ec>
  8056a4:	01002074 	movhi	r4,129
  8056a8:	21139b04 	addi	r4,r4,20076
  8056ac:	08042d40 	call	8042d4 <strlen>
  8056b0:	100f883a 	mov	r7,r2
  8056b4:	dcc14615 	stw	r19,1304(sp)
  8056b8:	9880010e 	bge	r19,r2,8056c0 <___vfprintf_internal_r+0x1320>
  8056bc:	d8814615 	stw	r2,1304(sp)
  8056c0:	00802074 	movhi	r2,129
  8056c4:	10939b04 	addi	r2,r2,20076
  8056c8:	dcc14715 	stw	r19,1308(sp)
  8056cc:	d8814215 	stw	r2,1288(sp)
  8056d0:	003dd506 	br	804e28 <___vfprintf_internal_r+0xa88>
  8056d4:	d9401a04 	addi	r5,sp,104
  8056d8:	dd001004 	addi	r20,sp,64
  8056dc:	d9414215 	stw	r5,1288(sp)
  8056e0:	880a977a 	slli	r5,r17,29
  8056e4:	d9814217 	ldw	r6,1288(sp)
  8056e8:	8004d0fa 	srli	r2,r16,3
  8056ec:	8806d0fa 	srli	r3,r17,3
  8056f0:	810001cc 	andi	r4,r16,7
  8056f4:	2884b03a 	or	r2,r5,r2
  8056f8:	31bfffc4 	addi	r6,r6,-1
  8056fc:	21000c04 	addi	r4,r4,48
  805700:	d9814215 	stw	r6,1288(sp)
  805704:	10cab03a 	or	r5,r2,r3
  805708:	31000005 	stb	r4,0(r6)
  80570c:	1021883a 	mov	r16,r2
  805710:	1823883a 	mov	r17,r3
  805714:	283ff21e 	bne	r5,zero,8056e0 <___vfprintf_internal_r+0x1340>
  805718:	d8c14d17 	ldw	r3,1332(sp)
  80571c:	1880004c 	andi	r2,r3,1
  805720:	1005003a 	cmpeq	r2,r2,zero
  805724:	103db91e 	bne	r2,zero,804e0c <___vfprintf_internal_r+0xa6c>
  805728:	20803fcc 	andi	r2,r4,255
  80572c:	1080201c 	xori	r2,r2,128
  805730:	10bfe004 	addi	r2,r2,-128
  805734:	00c00c04 	movi	r3,48
  805738:	10fdb426 	beq	r2,r3,804e0c <___vfprintf_internal_r+0xa6c>
  80573c:	31bfffc4 	addi	r6,r6,-1
  805740:	d9814215 	stw	r6,1288(sp)
  805744:	30c00005 	stb	r3,0(r6)
  805748:	003db006 	br	804e0c <___vfprintf_internal_r+0xa6c>
  80574c:	88800068 	cmpgeui	r2,r17,1
  805750:	10002c1e 	bne	r2,zero,805804 <___vfprintf_internal_r+0x1464>
  805754:	8800021e 	bne	r17,zero,805760 <___vfprintf_internal_r+0x13c0>
  805758:	00800244 	movi	r2,9
  80575c:	14002936 	bltu	r2,r16,805804 <___vfprintf_internal_r+0x1464>
  805760:	d90019c4 	addi	r4,sp,103
  805764:	dd001004 	addi	r20,sp,64
  805768:	d9014215 	stw	r4,1288(sp)
  80576c:	d9014217 	ldw	r4,1288(sp)
  805770:	80800c04 	addi	r2,r16,48
  805774:	20800005 	stb	r2,0(r4)
  805778:	003da406 	br	804e0c <___vfprintf_internal_r+0xa6c>
  80577c:	dc400e17 	ldw	r17,56(sp)
  805780:	07002074 	movhi	fp,129
  805784:	e713a304 	addi	fp,fp,20108
  805788:	9425883a 	add	r18,r18,r16
  80578c:	8c400044 	addi	r17,r17,1
  805790:	008001c4 	movi	r2,7
  805794:	1f000015 	stw	fp,0(r3)
  805798:	1c000115 	stw	r16,4(r3)
  80579c:	dc800f15 	stw	r18,60(sp)
  8057a0:	dc400e15 	stw	r17,56(sp)
  8057a4:	147de216 	blt	r2,r17,804f30 <___vfprintf_internal_r+0xb90>
  8057a8:	18c00204 	addi	r3,r3,8
  8057ac:	003c7a06 	br	804998 <___vfprintf_internal_r+0x5f8>
  8057b0:	01000084 	movi	r4,2
  8057b4:	d8000405 	stb	zero,16(sp)
  8057b8:	003d8706 	br	804dd8 <___vfprintf_internal_r+0xa38>
  8057bc:	d9814d17 	ldw	r6,1332(sp)
  8057c0:	30c4703a 	and	r2,r6,r3
  8057c4:	1005003a 	cmpeq	r2,r2,zero
  8057c8:	103cb926 	beq	r2,zero,804ab0 <___vfprintf_internal_r+0x710>
  8057cc:	d9014217 	ldw	r4,1288(sp)
  8057d0:	94800044 	addi	r18,r18,1
  8057d4:	8c400044 	addi	r17,r17,1
  8057d8:	008001c4 	movi	r2,7
  8057dc:	a9000015 	stw	r4,0(r21)
  8057e0:	a8c00115 	stw	r3,4(r21)
  8057e4:	dc800f15 	stw	r18,60(sp)
  8057e8:	dc400e15 	stw	r17,56(sp)
  8057ec:	147e6616 	blt	r2,r17,805188 <___vfprintf_internal_r+0xde8>
  8057f0:	acc00204 	addi	r19,r21,8
  8057f4:	003cd706 	br	804b54 <___vfprintf_internal_r+0x7b4>
  8057f8:	07002074 	movhi	fp,129
  8057fc:	e713a304 	addi	fp,fp,20108
  805800:	003c4f06 	br	804940 <___vfprintf_internal_r+0x5a0>
  805804:	dd001004 	addi	r20,sp,64
  805808:	dc801a04 	addi	r18,sp,104
  80580c:	8009883a 	mov	r4,r16
  805810:	880b883a 	mov	r5,r17
  805814:	01800284 	movi	r6,10
  805818:	000f883a 	mov	r7,zero
  80581c:	080e30c0 	call	80e30c <__umoddi3>
  805820:	12000c04 	addi	r8,r2,48
  805824:	94bfffc4 	addi	r18,r18,-1
  805828:	8009883a 	mov	r4,r16
  80582c:	880b883a 	mov	r5,r17
  805830:	01800284 	movi	r6,10
  805834:	000f883a 	mov	r7,zero
  805838:	92000005 	stb	r8,0(r18)
  80583c:	080dd300 	call	80dd30 <__udivdi3>
  805840:	1009883a 	mov	r4,r2
  805844:	1021883a 	mov	r16,r2
  805848:	18800068 	cmpgeui	r2,r3,1
  80584c:	1823883a 	mov	r17,r3
  805850:	103fee1e 	bne	r2,zero,80580c <___vfprintf_internal_r+0x146c>
  805854:	1800021e 	bne	r3,zero,805860 <___vfprintf_internal_r+0x14c0>
  805858:	00800244 	movi	r2,9
  80585c:	113feb36 	bltu	r2,r4,80580c <___vfprintf_internal_r+0x146c>
  805860:	94bfffc4 	addi	r18,r18,-1
  805864:	dc814215 	stw	r18,1288(sp)
  805868:	003fc006 	br	80576c <___vfprintf_internal_r+0x13cc>
  80586c:	d9014d17 	ldw	r4,1332(sp)
  805870:	2080004c 	andi	r2,r4,1
  805874:	10009a1e 	bne	r2,zero,805ae0 <___vfprintf_internal_r+0x1740>
  805878:	d9401a04 	addi	r5,sp,104
  80587c:	dd001004 	addi	r20,sp,64
  805880:	d9414215 	stw	r5,1288(sp)
  805884:	003d6106 	br	804e0c <___vfprintf_internal_r+0xa6c>
  805888:	d9015017 	ldw	r4,1344(sp)
  80588c:	b00b883a 	mov	r5,r22
  805890:	d9800d04 	addi	r6,sp,52
  805894:	08043480 	call	804348 <__sprint_r>
  805898:	103c791e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  80589c:	dc800f17 	ldw	r18,60(sp)
  8058a0:	d8c01a04 	addi	r3,sp,104
  8058a4:	003cff06 	br	804ca4 <___vfprintf_internal_r+0x904>
  8058a8:	d8c14d17 	ldw	r3,1332(sp)
  8058ac:	1880040c 	andi	r2,r3,16
  8058b0:	1000711e 	bne	r2,zero,805a78 <___vfprintf_internal_r+0x16d8>
  8058b4:	d9014d17 	ldw	r4,1332(sp)
  8058b8:	2080100c 	andi	r2,r4,64
  8058bc:	10006e26 	beq	r2,zero,805a78 <___vfprintf_internal_r+0x16d8>
  8058c0:	3c00000b 	ldhu	r16,0(r7)
  8058c4:	0023883a 	mov	r17,zero
  8058c8:	39c00104 	addi	r7,r7,4
  8058cc:	d9c14115 	stw	r7,1284(sp)
  8058d0:	003f0006 	br	8054d4 <___vfprintf_internal_r+0x1134>
  8058d4:	dc400e17 	ldw	r17,56(sp)
  8058d8:	07002074 	movhi	fp,129
  8058dc:	e713a304 	addi	fp,fp,20108
  8058e0:	9425883a 	add	r18,r18,r16
  8058e4:	8c400044 	addi	r17,r17,1
  8058e8:	008001c4 	movi	r2,7
  8058ec:	1f000015 	stw	fp,0(r3)
  8058f0:	1c000115 	stw	r16,4(r3)
  8058f4:	dc800f15 	stw	r18,60(sp)
  8058f8:	dc400e15 	stw	r17,56(sp)
  8058fc:	147d7616 	blt	r2,r17,804ed8 <___vfprintf_internal_r+0xb38>
  805900:	18c00204 	addi	r3,r3,8
  805904:	003d7b06 	br	804ef4 <___vfprintf_internal_r+0xb54>
  805908:	dc800f17 	ldw	r18,60(sp)
  80590c:	dc400e17 	ldw	r17,56(sp)
  805910:	07002074 	movhi	fp,129
  805914:	e713a704 	addi	fp,fp,20124
  805918:	003bc006 	br	80481c <___vfprintf_internal_r+0x47c>
  80591c:	d9015017 	ldw	r4,1344(sp)
  805920:	b00b883a 	mov	r5,r22
  805924:	d9800d04 	addi	r6,sp,52
  805928:	08043480 	call	804348 <__sprint_r>
  80592c:	103c541e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805930:	dc800f17 	ldw	r18,60(sp)
  805934:	d8c01a04 	addi	r3,sp,104
  805938:	003ce906 	br	804ce0 <___vfprintf_internal_r+0x940>
  80593c:	3c000017 	ldw	r16,0(r7)
  805940:	0009883a 	mov	r4,zero
  805944:	39c00104 	addi	r7,r7,4
  805948:	0023883a 	mov	r17,zero
  80594c:	d9c14115 	stw	r7,1284(sp)
  805950:	d8000405 	stb	zero,16(sp)
  805954:	003d2006 	br	804dd8 <___vfprintf_internal_r+0xa38>
  805958:	38800017 	ldw	r2,0(r7)
  80595c:	39c00104 	addi	r7,r7,4
  805960:	d9c14115 	stw	r7,1284(sp)
  805964:	1023d7fa 	srai	r17,r2,31
  805968:	1021883a 	mov	r16,r2
  80596c:	003d1806 	br	804dd0 <___vfprintf_internal_r+0xa30>
  805970:	3c000017 	ldw	r16,0(r7)
  805974:	01000044 	movi	r4,1
  805978:	39c00104 	addi	r7,r7,4
  80597c:	0023883a 	mov	r17,zero
  805980:	d9c14115 	stw	r7,1284(sp)
  805984:	d8000405 	stb	zero,16(sp)
  805988:	003d1306 	br	804dd8 <___vfprintf_internal_r+0xa38>
  80598c:	00802074 	movhi	r2,129
  805990:	1093a204 	addi	r2,r2,20104
  805994:	94800044 	addi	r18,r18,1
  805998:	8c400044 	addi	r17,r17,1
  80599c:	a8800015 	stw	r2,0(r21)
  8059a0:	00c00044 	movi	r3,1
  8059a4:	008001c4 	movi	r2,7
  8059a8:	a8c00115 	stw	r3,4(r21)
  8059ac:	dc800f15 	stw	r18,60(sp)
  8059b0:	dc400e15 	stw	r17,56(sp)
  8059b4:	1440ca16 	blt	r2,r17,805ce0 <___vfprintf_internal_r+0x1940>
  8059b8:	a8c00204 	addi	r3,r21,8
  8059bc:	2000061e 	bne	r4,zero,8059d8 <___vfprintf_internal_r+0x1638>
  8059c0:	d9414817 	ldw	r5,1312(sp)
  8059c4:	2800041e 	bne	r5,zero,8059d8 <___vfprintf_internal_r+0x1638>
  8059c8:	d9814d17 	ldw	r6,1332(sp)
  8059cc:	3080004c 	andi	r2,r6,1
  8059d0:	1005003a 	cmpeq	r2,r2,zero
  8059d4:	103bf01e 	bne	r2,zero,804998 <___vfprintf_internal_r+0x5f8>
  8059d8:	00800044 	movi	r2,1
  8059dc:	dc400e17 	ldw	r17,56(sp)
  8059e0:	18800115 	stw	r2,4(r3)
  8059e4:	d8814a17 	ldw	r2,1320(sp)
  8059e8:	94800044 	addi	r18,r18,1
  8059ec:	8c400044 	addi	r17,r17,1
  8059f0:	18800015 	stw	r2,0(r3)
  8059f4:	008001c4 	movi	r2,7
  8059f8:	dc800f15 	stw	r18,60(sp)
  8059fc:	dc400e15 	stw	r17,56(sp)
  805a00:	1440ca16 	blt	r2,r17,805d2c <___vfprintf_internal_r+0x198c>
  805a04:	18c00204 	addi	r3,r3,8
  805a08:	0121c83a 	sub	r16,zero,r4
  805a0c:	0400500e 	bge	zero,r16,805b50 <___vfprintf_internal_r+0x17b0>
  805a10:	00800404 	movi	r2,16
  805a14:	1400800e 	bge	r2,r16,805c18 <___vfprintf_internal_r+0x1878>
  805a18:	1027883a 	mov	r19,r2
  805a1c:	07002074 	movhi	fp,129
  805a20:	e713a304 	addi	fp,fp,20108
  805a24:	050001c4 	movi	r20,7
  805a28:	00000306 	br	805a38 <___vfprintf_internal_r+0x1698>
  805a2c:	18c00204 	addi	r3,r3,8
  805a30:	843ffc04 	addi	r16,r16,-16
  805a34:	9c007a0e 	bge	r19,r16,805c20 <___vfprintf_internal_r+0x1880>
  805a38:	94800404 	addi	r18,r18,16
  805a3c:	8c400044 	addi	r17,r17,1
  805a40:	1f000015 	stw	fp,0(r3)
  805a44:	1cc00115 	stw	r19,4(r3)
  805a48:	dc800f15 	stw	r18,60(sp)
  805a4c:	dc400e15 	stw	r17,56(sp)
  805a50:	a47ff60e 	bge	r20,r17,805a2c <___vfprintf_internal_r+0x168c>
  805a54:	d9015017 	ldw	r4,1344(sp)
  805a58:	b00b883a 	mov	r5,r22
  805a5c:	d9800d04 	addi	r6,sp,52
  805a60:	08043480 	call	804348 <__sprint_r>
  805a64:	103c061e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805a68:	dc800f17 	ldw	r18,60(sp)
  805a6c:	dc400e17 	ldw	r17,56(sp)
  805a70:	d8c01a04 	addi	r3,sp,104
  805a74:	003fee06 	br	805a30 <___vfprintf_internal_r+0x1690>
  805a78:	3c000017 	ldw	r16,0(r7)
  805a7c:	0023883a 	mov	r17,zero
  805a80:	39c00104 	addi	r7,r7,4
  805a84:	d9c14115 	stw	r7,1284(sp)
  805a88:	003e9206 	br	8054d4 <___vfprintf_internal_r+0x1134>
  805a8c:	d9401a04 	addi	r5,sp,104
  805a90:	dd001004 	addi	r20,sp,64
  805a94:	d9414215 	stw	r5,1288(sp)
  805a98:	d9814517 	ldw	r6,1300(sp)
  805a9c:	880a973a 	slli	r5,r17,28
  805aa0:	8004d13a 	srli	r2,r16,4
  805aa4:	810003cc 	andi	r4,r16,15
  805aa8:	3109883a 	add	r4,r6,r4
  805aac:	2884b03a 	or	r2,r5,r2
  805ab0:	21400003 	ldbu	r5,0(r4)
  805ab4:	d9014217 	ldw	r4,1288(sp)
  805ab8:	8806d13a 	srli	r3,r17,4
  805abc:	1021883a 	mov	r16,r2
  805ac0:	213fffc4 	addi	r4,r4,-1
  805ac4:	d9014215 	stw	r4,1288(sp)
  805ac8:	d9814217 	ldw	r6,1288(sp)
  805acc:	10c8b03a 	or	r4,r2,r3
  805ad0:	1823883a 	mov	r17,r3
  805ad4:	31400005 	stb	r5,0(r6)
  805ad8:	203fef1e 	bne	r4,zero,805a98 <___vfprintf_internal_r+0x16f8>
  805adc:	003ccb06 	br	804e0c <___vfprintf_internal_r+0xa6c>
  805ae0:	00800c04 	movi	r2,48
  805ae4:	d98019c4 	addi	r6,sp,103
  805ae8:	dd001004 	addi	r20,sp,64
  805aec:	d88019c5 	stb	r2,103(sp)
  805af0:	d9814215 	stw	r6,1288(sp)
  805af4:	003cc506 	br	804e0c <___vfprintf_internal_r+0xa6c>
  805af8:	dc400e17 	ldw	r17,56(sp)
  805afc:	07002074 	movhi	fp,129
  805b00:	e713a704 	addi	fp,fp,20124
  805b04:	003bc706 	br	804a24 <___vfprintf_internal_r+0x684>
  805b08:	d9414d17 	ldw	r5,1332(sp)
  805b0c:	2880040c 	andi	r2,r5,16
  805b10:	10007c26 	beq	r2,zero,805d04 <___vfprintf_internal_r+0x1964>
  805b14:	38800017 	ldw	r2,0(r7)
  805b18:	39c00104 	addi	r7,r7,4
  805b1c:	d9c14115 	stw	r7,1284(sp)
  805b20:	d9814c17 	ldw	r6,1328(sp)
  805b24:	d9c14117 	ldw	r7,1284(sp)
  805b28:	11800015 	stw	r6,0(r2)
  805b2c:	003a7806 	br	804510 <___vfprintf_internal_r+0x170>
  805b30:	d9015017 	ldw	r4,1344(sp)
  805b34:	b00b883a 	mov	r5,r22
  805b38:	d9800d04 	addi	r6,sp,52
  805b3c:	08043480 	call	804348 <__sprint_r>
  805b40:	103bcf1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805b44:	dc800f17 	ldw	r18,60(sp)
  805b48:	dc400e17 	ldw	r17,56(sp)
  805b4c:	d8c01a04 	addi	r3,sp,104
  805b50:	d9014817 	ldw	r4,1312(sp)
  805b54:	d9414217 	ldw	r5,1288(sp)
  805b58:	8c400044 	addi	r17,r17,1
  805b5c:	9125883a 	add	r18,r18,r4
  805b60:	008001c4 	movi	r2,7
  805b64:	19400015 	stw	r5,0(r3)
  805b68:	19000115 	stw	r4,4(r3)
  805b6c:	dc800f15 	stw	r18,60(sp)
  805b70:	dc400e15 	stw	r17,56(sp)
  805b74:	147cee16 	blt	r2,r17,804f30 <___vfprintf_internal_r+0xb90>
  805b78:	18c00204 	addi	r3,r3,8
  805b7c:	003b8606 	br	804998 <___vfprintf_internal_r+0x5f8>
  805b80:	38c00017 	ldw	r3,0(r7)
  805b84:	39000204 	addi	r4,r7,8
  805b88:	d9014115 	stw	r4,1284(sp)
  805b8c:	d8c14315 	stw	r3,1292(sp)
  805b90:	39c00117 	ldw	r7,4(r7)
  805b94:	d9c14415 	stw	r7,1296(sp)
  805b98:	003e2006 	br	80541c <___vfprintf_internal_r+0x107c>
  805b9c:	0005883a 	mov	r2,zero
  805ba0:	1409c83a 	sub	r4,r2,r16
  805ba4:	1105803a 	cmpltu	r2,r2,r4
  805ba8:	044bc83a 	sub	r5,zero,r17
  805bac:	2885c83a 	sub	r2,r5,r2
  805bb0:	2021883a 	mov	r16,r4
  805bb4:	1023883a 	mov	r17,r2
  805bb8:	01000044 	movi	r4,1
  805bbc:	00800b44 	movi	r2,45
  805bc0:	d8800405 	stb	r2,16(sp)
  805bc4:	003c8406 	br	804dd8 <___vfprintf_internal_r+0xa38>
  805bc8:	d9015017 	ldw	r4,1344(sp)
  805bcc:	b00b883a 	mov	r5,r22
  805bd0:	d9800d04 	addi	r6,sp,52
  805bd4:	08043480 	call	804348 <__sprint_r>
  805bd8:	103ba91e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805bdc:	dc800f17 	ldw	r18,60(sp)
  805be0:	dc400e17 	ldw	r17,56(sp)
  805be4:	d9000617 	ldw	r4,24(sp)
  805be8:	d9401a04 	addi	r5,sp,104
  805bec:	003da706 	br	80528c <___vfprintf_internal_r+0xeec>
  805bf0:	d9015017 	ldw	r4,1344(sp)
  805bf4:	b00b883a 	mov	r5,r22
  805bf8:	d9800d04 	addi	r6,sp,52
  805bfc:	08043480 	call	804348 <__sprint_r>
  805c00:	103b9f1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805c04:	dc800f17 	ldw	r18,60(sp)
  805c08:	dc400e17 	ldw	r17,56(sp)
  805c0c:	d9000617 	ldw	r4,24(sp)
  805c10:	d8c01a04 	addi	r3,sp,104
  805c14:	003d9106 	br	80525c <___vfprintf_internal_r+0xebc>
  805c18:	07002074 	movhi	fp,129
  805c1c:	e713a304 	addi	fp,fp,20108
  805c20:	9425883a 	add	r18,r18,r16
  805c24:	8c400044 	addi	r17,r17,1
  805c28:	008001c4 	movi	r2,7
  805c2c:	1f000015 	stw	fp,0(r3)
  805c30:	1c000115 	stw	r16,4(r3)
  805c34:	dc800f15 	stw	r18,60(sp)
  805c38:	dc400e15 	stw	r17,56(sp)
  805c3c:	147fbc16 	blt	r2,r17,805b30 <___vfprintf_internal_r+0x1790>
  805c40:	18c00204 	addi	r3,r3,8
  805c44:	003fc206 	br	805b50 <___vfprintf_internal_r+0x17b0>
  805c48:	d9015017 	ldw	r4,1344(sp)
  805c4c:	b00b883a 	mov	r5,r22
  805c50:	d9800d04 	addi	r6,sp,52
  805c54:	08043480 	call	804348 <__sprint_r>
  805c58:	103b891e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805c5c:	dc800f17 	ldw	r18,60(sp)
  805c60:	d9000617 	ldw	r4,24(sp)
  805c64:	d8c01a04 	addi	r3,sp,104
  805c68:	003d0206 	br	805074 <___vfprintf_internal_r+0xcd4>
  805c6c:	07002074 	movhi	fp,129
  805c70:	e713a304 	addi	fp,fp,20108
  805c74:	003be406 	br	804c08 <___vfprintf_internal_r+0x868>
  805c78:	00802074 	movhi	r2,129
  805c7c:	10939104 	addi	r2,r2,20036
  805c80:	d8814215 	stw	r2,1288(sp)
  805c84:	003df506 	br	80545c <___vfprintf_internal_r+0x10bc>
  805c88:	d9014317 	ldw	r4,1292(sp)
  805c8c:	d9414417 	ldw	r5,1296(sp)
  805c90:	080aa400 	call	80aa40 <__isnand>
  805c94:	10003926 	beq	r2,zero,805d7c <___vfprintf_internal_r+0x19dc>
  805c98:	d9414e17 	ldw	r5,1336(sp)
  805c9c:	008011c4 	movi	r2,71
  805ca0:	1140ce16 	blt	r2,r5,805fdc <___vfprintf_internal_r+0x1c3c>
  805ca4:	01802074 	movhi	r6,129
  805ca8:	31939204 	addi	r6,r6,20040
  805cac:	d9814215 	stw	r6,1288(sp)
  805cb0:	003dea06 	br	80545c <___vfprintf_internal_r+0x10bc>
  805cb4:	d9014d17 	ldw	r4,1332(sp)
  805cb8:	bdc00044 	addi	r23,r23,1
  805cbc:	b8c00007 	ldb	r3,0(r23)
  805cc0:	21000814 	ori	r4,r4,32
  805cc4:	d9014d15 	stw	r4,1332(sp)
  805cc8:	003a3406 	br	80459c <___vfprintf_internal_r+0x1fc>
  805ccc:	dcc14615 	stw	r19,1304(sp)
  805cd0:	98011016 	blt	r19,zero,806114 <___vfprintf_internal_r+0x1d74>
  805cd4:	980f883a 	mov	r7,r19
  805cd8:	d8014715 	stw	zero,1308(sp)
  805cdc:	003c5206 	br	804e28 <___vfprintf_internal_r+0xa88>
  805ce0:	d9015017 	ldw	r4,1344(sp)
  805ce4:	b00b883a 	mov	r5,r22
  805ce8:	d9800d04 	addi	r6,sp,52
  805cec:	08043480 	call	804348 <__sprint_r>
  805cf0:	103b631e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805cf4:	dc800f17 	ldw	r18,60(sp)
  805cf8:	d9000617 	ldw	r4,24(sp)
  805cfc:	d8c01a04 	addi	r3,sp,104
  805d00:	003f2e06 	br	8059bc <___vfprintf_internal_r+0x161c>
  805d04:	d8c14d17 	ldw	r3,1332(sp)
  805d08:	1880100c 	andi	r2,r3,64
  805d0c:	1000a026 	beq	r2,zero,805f90 <___vfprintf_internal_r+0x1bf0>
  805d10:	38800017 	ldw	r2,0(r7)
  805d14:	39c00104 	addi	r7,r7,4
  805d18:	d9c14115 	stw	r7,1284(sp)
  805d1c:	d9014c17 	ldw	r4,1328(sp)
  805d20:	d9c14117 	ldw	r7,1284(sp)
  805d24:	1100000d 	sth	r4,0(r2)
  805d28:	0039f906 	br	804510 <___vfprintf_internal_r+0x170>
  805d2c:	d9015017 	ldw	r4,1344(sp)
  805d30:	b00b883a 	mov	r5,r22
  805d34:	d9800d04 	addi	r6,sp,52
  805d38:	08043480 	call	804348 <__sprint_r>
  805d3c:	103b501e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805d40:	dc800f17 	ldw	r18,60(sp)
  805d44:	dc400e17 	ldw	r17,56(sp)
  805d48:	d9000617 	ldw	r4,24(sp)
  805d4c:	d8c01a04 	addi	r3,sp,104
  805d50:	003f2d06 	br	805a08 <___vfprintf_internal_r+0x1668>
  805d54:	00800184 	movi	r2,6
  805d58:	14c09a36 	bltu	r2,r19,805fc4 <___vfprintf_internal_r+0x1c24>
  805d5c:	dcc14615 	stw	r19,1304(sp)
  805d60:	9800010e 	bge	r19,zero,805d68 <___vfprintf_internal_r+0x19c8>
  805d64:	d8014615 	stw	zero,1304(sp)
  805d68:	00802074 	movhi	r2,129
  805d6c:	10939404 	addi	r2,r2,20048
  805d70:	980f883a 	mov	r7,r19
  805d74:	d8814215 	stw	r2,1288(sp)
  805d78:	003a7806 	br	80475c <___vfprintf_internal_r+0x3bc>
  805d7c:	00bfffc4 	movi	r2,-1
  805d80:	9880e226 	beq	r19,r2,80610c <___vfprintf_internal_r+0x1d6c>
  805d84:	d9414e17 	ldw	r5,1336(sp)
  805d88:	008019c4 	movi	r2,103
  805d8c:	2880dc26 	beq	r5,r2,806100 <___vfprintf_internal_r+0x1d60>
  805d90:	008011c4 	movi	r2,71
  805d94:	2880da26 	beq	r5,r2,806100 <___vfprintf_internal_r+0x1d60>
  805d98:	d9414d17 	ldw	r5,1332(sp)
  805d9c:	d9014417 	ldw	r4,1296(sp)
  805da0:	d9814317 	ldw	r6,1292(sp)
  805da4:	29404014 	ori	r5,r5,256
  805da8:	d9414d15 	stw	r5,1332(sp)
  805dac:	2000cc16 	blt	r4,zero,8060e0 <___vfprintf_internal_r+0x1d40>
  805db0:	3021883a 	mov	r16,r6
  805db4:	2023883a 	mov	r17,r4
  805db8:	0039883a 	mov	fp,zero
  805dbc:	d9414e17 	ldw	r5,1336(sp)
  805dc0:	00801984 	movi	r2,102
  805dc4:	2880b726 	beq	r5,r2,8060a4 <___vfprintf_internal_r+0x1d04>
  805dc8:	00801184 	movi	r2,70
  805dcc:	2880b526 	beq	r5,r2,8060a4 <___vfprintf_internal_r+0x1d04>
  805dd0:	00801944 	movi	r2,101
  805dd4:	2880c826 	beq	r5,r2,8060f8 <___vfprintf_internal_r+0x1d58>
  805dd8:	00801144 	movi	r2,69
  805ddc:	2880c626 	beq	r5,r2,8060f8 <___vfprintf_internal_r+0x1d58>
  805de0:	9829883a 	mov	r20,r19
  805de4:	d9015017 	ldw	r4,1344(sp)
  805de8:	d8800604 	addi	r2,sp,24
  805dec:	880d883a 	mov	r6,r17
  805df0:	d8800115 	stw	r2,4(sp)
  805df4:	d8c00704 	addi	r3,sp,28
  805df8:	d8800804 	addi	r2,sp,32
  805dfc:	800b883a 	mov	r5,r16
  805e00:	01c00084 	movi	r7,2
  805e04:	d8c00215 	stw	r3,8(sp)
  805e08:	d8800315 	stw	r2,12(sp)
  805e0c:	dd000015 	stw	r20,0(sp)
  805e10:	0807e2c0 	call	807e2c <_dtoa_r>
  805e14:	d9814e17 	ldw	r6,1336(sp)
  805e18:	d8814215 	stw	r2,1288(sp)
  805e1c:	008019c4 	movi	r2,103
  805e20:	30809526 	beq	r6,r2,806078 <___vfprintf_internal_r+0x1cd8>
  805e24:	d8c14e17 	ldw	r3,1336(sp)
  805e28:	008011c4 	movi	r2,71
  805e2c:	18809226 	beq	r3,r2,806078 <___vfprintf_internal_r+0x1cd8>
  805e30:	d9414217 	ldw	r5,1288(sp)
  805e34:	d9814e17 	ldw	r6,1336(sp)
  805e38:	00801984 	movi	r2,102
  805e3c:	2d25883a 	add	r18,r5,r20
  805e40:	30808626 	beq	r6,r2,80605c <___vfprintf_internal_r+0x1cbc>
  805e44:	00801184 	movi	r2,70
  805e48:	30808426 	beq	r6,r2,80605c <___vfprintf_internal_r+0x1cbc>
  805e4c:	000d883a 	mov	r6,zero
  805e50:	000f883a 	mov	r7,zero
  805e54:	880b883a 	mov	r5,r17
  805e58:	8009883a 	mov	r4,r16
  805e5c:	080f5440 	call	80f544 <__eqdf2>
  805e60:	1000751e 	bne	r2,zero,806038 <___vfprintf_internal_r+0x1c98>
  805e64:	9005883a 	mov	r2,r18
  805e68:	dc800815 	stw	r18,32(sp)
  805e6c:	d9014217 	ldw	r4,1288(sp)
  805e70:	d9414e17 	ldw	r5,1336(sp)
  805e74:	00c019c4 	movi	r3,103
  805e78:	1125c83a 	sub	r18,r2,r4
  805e7c:	28c06826 	beq	r5,r3,806020 <___vfprintf_internal_r+0x1c80>
  805e80:	008011c4 	movi	r2,71
  805e84:	28806626 	beq	r5,r2,806020 <___vfprintf_internal_r+0x1c80>
  805e88:	d9000617 	ldw	r4,24(sp)
  805e8c:	d8c14e17 	ldw	r3,1336(sp)
  805e90:	00801944 	movi	r2,101
  805e94:	10c05516 	blt	r2,r3,805fec <___vfprintf_internal_r+0x1c4c>
  805e98:	213fffc4 	addi	r4,r4,-1
  805e9c:	d9000615 	stw	r4,24(sp)
  805ea0:	d8c00905 	stb	r3,36(sp)
  805ea4:	2021883a 	mov	r16,r4
  805ea8:	2000c116 	blt	r4,zero,8061b0 <___vfprintf_internal_r+0x1e10>
  805eac:	00800ac4 	movi	r2,43
  805eb0:	d8800945 	stb	r2,37(sp)
  805eb4:	00800244 	movi	r2,9
  805eb8:	1400af0e 	bge	r2,r16,806178 <___vfprintf_internal_r+0x1dd8>
  805ebc:	1027883a 	mov	r19,r2
  805ec0:	dc400cc4 	addi	r17,sp,51
  805ec4:	8009883a 	mov	r4,r16
  805ec8:	01400284 	movi	r5,10
  805ecc:	080fd280 	call	80fd28 <__modsi3>
  805ed0:	10800c04 	addi	r2,r2,48
  805ed4:	8c7fffc4 	addi	r17,r17,-1
  805ed8:	8009883a 	mov	r4,r16
  805edc:	01400284 	movi	r5,10
  805ee0:	88800005 	stb	r2,0(r17)
  805ee4:	080fcc80 	call	80fcc8 <__divsi3>
  805ee8:	1021883a 	mov	r16,r2
  805eec:	98bff516 	blt	r19,r2,805ec4 <___vfprintf_internal_r+0x1b24>
  805ef0:	10c00c04 	addi	r3,r2,48
  805ef4:	d8800b04 	addi	r2,sp,44
  805ef8:	108001c4 	addi	r2,r2,7
  805efc:	897fffc4 	addi	r5,r17,-1
  805f00:	88ffffc5 	stb	r3,-1(r17)
  805f04:	2880a72e 	bgeu	r5,r2,8061a4 <___vfprintf_internal_r+0x1e04>
  805f08:	1009883a 	mov	r4,r2
  805f0c:	d9800904 	addi	r6,sp,36
  805f10:	d8c00984 	addi	r3,sp,38
  805f14:	28800003 	ldbu	r2,0(r5)
  805f18:	29400044 	addi	r5,r5,1
  805f1c:	18800005 	stb	r2,0(r3)
  805f20:	18c00044 	addi	r3,r3,1
  805f24:	293ffb36 	bltu	r5,r4,805f14 <___vfprintf_internal_r+0x1b74>
  805f28:	1987c83a 	sub	r3,r3,r6
  805f2c:	00800044 	movi	r2,1
  805f30:	d8c14915 	stw	r3,1316(sp)
  805f34:	90cf883a 	add	r7,r18,r3
  805f38:	1480960e 	bge	r2,r18,806194 <___vfprintf_internal_r+0x1df4>
  805f3c:	39c00044 	addi	r7,r7,1
  805f40:	d9c14615 	stw	r7,1304(sp)
  805f44:	38003416 	blt	r7,zero,806018 <___vfprintf_internal_r+0x1c78>
  805f48:	e0803fcc 	andi	r2,fp,255
  805f4c:	1080201c 	xori	r2,r2,128
  805f50:	10bfe004 	addi	r2,r2,-128
  805f54:	10004e26 	beq	r2,zero,806090 <___vfprintf_internal_r+0x1cf0>
  805f58:	00800b44 	movi	r2,45
  805f5c:	dc814815 	stw	r18,1312(sp)
  805f60:	d8014715 	stw	zero,1308(sp)
  805f64:	d8800405 	stb	r2,16(sp)
  805f68:	003bb106 	br	804e30 <___vfprintf_internal_r+0xa90>
  805f6c:	00800b44 	movi	r2,45
  805f70:	d8800405 	stb	r2,16(sp)
  805f74:	003d3306 	br	805444 <___vfprintf_internal_r+0x10a4>
  805f78:	d9015017 	ldw	r4,1344(sp)
  805f7c:	b00b883a 	mov	r5,r22
  805f80:	d9800d04 	addi	r6,sp,52
  805f84:	08043480 	call	804348 <__sprint_r>
  805f88:	103abd1e 	bne	r2,zero,804a80 <___vfprintf_internal_r+0x6e0>
  805f8c:	003abb06 	br	804a7c <___vfprintf_internal_r+0x6dc>
  805f90:	38800017 	ldw	r2,0(r7)
  805f94:	39c00104 	addi	r7,r7,4
  805f98:	d9c14115 	stw	r7,1284(sp)
  805f9c:	d9414c17 	ldw	r5,1328(sp)
  805fa0:	d9c14117 	ldw	r7,1284(sp)
  805fa4:	11400015 	stw	r5,0(r2)
  805fa8:	00395906 	br	804510 <___vfprintf_internal_r+0x170>
  805fac:	980f883a 	mov	r7,r19
  805fb0:	dcc14615 	stw	r19,1304(sp)
  805fb4:	d8014715 	stw	zero,1308(sp)
  805fb8:	003b9b06 	br	804e28 <___vfprintf_internal_r+0xa88>
  805fbc:	0027883a 	mov	r19,zero
  805fc0:	00397806 	br	8045a4 <___vfprintf_internal_r+0x204>
  805fc4:	00c02074 	movhi	r3,129
  805fc8:	18d39404 	addi	r3,r3,20048
  805fcc:	100f883a 	mov	r7,r2
  805fd0:	d8814615 	stw	r2,1304(sp)
  805fd4:	d8c14215 	stw	r3,1288(sp)
  805fd8:	0039e006 	br	80475c <___vfprintf_internal_r+0x3bc>
  805fdc:	00802074 	movhi	r2,129
  805fe0:	10939304 	addi	r2,r2,20044
  805fe4:	d8814215 	stw	r2,1288(sp)
  805fe8:	003d1c06 	br	80545c <___vfprintf_internal_r+0x10bc>
  805fec:	d9414e17 	ldw	r5,1336(sp)
  805ff0:	00801984 	movi	r2,102
  805ff4:	28804926 	beq	r5,r2,80611c <___vfprintf_internal_r+0x1d7c>
  805ff8:	200f883a 	mov	r7,r4
  805ffc:	24805716 	blt	r4,r18,80615c <___vfprintf_internal_r+0x1dbc>
  806000:	d9414d17 	ldw	r5,1332(sp)
  806004:	2880004c 	andi	r2,r5,1
  806008:	10000126 	beq	r2,zero,806010 <___vfprintf_internal_r+0x1c70>
  80600c:	21c00044 	addi	r7,r4,1
  806010:	d9c14615 	stw	r7,1304(sp)
  806014:	383fcc0e 	bge	r7,zero,805f48 <___vfprintf_internal_r+0x1ba8>
  806018:	d8014615 	stw	zero,1304(sp)
  80601c:	003fca06 	br	805f48 <___vfprintf_internal_r+0x1ba8>
  806020:	d9000617 	ldw	r4,24(sp)
  806024:	00bfff04 	movi	r2,-4
  806028:	1100480e 	bge	r2,r4,80614c <___vfprintf_internal_r+0x1dac>
  80602c:	99004716 	blt	r19,r4,80614c <___vfprintf_internal_r+0x1dac>
  806030:	d8c14e15 	stw	r3,1336(sp)
  806034:	003ff006 	br	805ff8 <___vfprintf_internal_r+0x1c58>
  806038:	d8800817 	ldw	r2,32(sp)
  80603c:	14bf8b2e 	bgeu	r2,r18,805e6c <___vfprintf_internal_r+0x1acc>
  806040:	9007883a 	mov	r3,r18
  806044:	01000c04 	movi	r4,48
  806048:	11000005 	stb	r4,0(r2)
  80604c:	10800044 	addi	r2,r2,1
  806050:	d8800815 	stw	r2,32(sp)
  806054:	18bffc1e 	bne	r3,r2,806048 <___vfprintf_internal_r+0x1ca8>
  806058:	003f8406 	br	805e6c <___vfprintf_internal_r+0x1acc>
  80605c:	d8814217 	ldw	r2,1288(sp)
  806060:	10c00007 	ldb	r3,0(r2)
  806064:	00800c04 	movi	r2,48
  806068:	18805b26 	beq	r3,r2,8061d8 <___vfprintf_internal_r+0x1e38>
  80606c:	d9000617 	ldw	r4,24(sp)
  806070:	9125883a 	add	r18,r18,r4
  806074:	003f7506 	br	805e4c <___vfprintf_internal_r+0x1aac>
  806078:	d9014d17 	ldw	r4,1332(sp)
  80607c:	2080004c 	andi	r2,r4,1
  806080:	1005003a 	cmpeq	r2,r2,zero
  806084:	103f6a26 	beq	r2,zero,805e30 <___vfprintf_internal_r+0x1a90>
  806088:	d8800817 	ldw	r2,32(sp)
  80608c:	003f7706 	br	805e6c <___vfprintf_internal_r+0x1acc>
  806090:	d9c14615 	stw	r7,1304(sp)
  806094:	38004d16 	blt	r7,zero,8061cc <___vfprintf_internal_r+0x1e2c>
  806098:	dc814815 	stw	r18,1312(sp)
  80609c:	d8014715 	stw	zero,1308(sp)
  8060a0:	003b6106 	br	804e28 <___vfprintf_internal_r+0xa88>
  8060a4:	d9015017 	ldw	r4,1344(sp)
  8060a8:	d8800604 	addi	r2,sp,24
  8060ac:	d8800115 	stw	r2,4(sp)
  8060b0:	d8c00704 	addi	r3,sp,28
  8060b4:	d8800804 	addi	r2,sp,32
  8060b8:	800b883a 	mov	r5,r16
  8060bc:	880d883a 	mov	r6,r17
  8060c0:	01c000c4 	movi	r7,3
  8060c4:	d8c00215 	stw	r3,8(sp)
  8060c8:	d8800315 	stw	r2,12(sp)
  8060cc:	dcc00015 	stw	r19,0(sp)
  8060d0:	9829883a 	mov	r20,r19
  8060d4:	0807e2c0 	call	807e2c <_dtoa_r>
  8060d8:	d8814215 	stw	r2,1288(sp)
  8060dc:	003f5106 	br	805e24 <___vfprintf_internal_r+0x1a84>
  8060e0:	d8c14317 	ldw	r3,1292(sp)
  8060e4:	d9014417 	ldw	r4,1296(sp)
  8060e8:	07000b44 	movi	fp,45
  8060ec:	1821883a 	mov	r16,r3
  8060f0:	2460003c 	xorhi	r17,r4,32768
  8060f4:	003f3106 	br	805dbc <___vfprintf_internal_r+0x1a1c>
  8060f8:	9d000044 	addi	r20,r19,1
  8060fc:	003f3906 	br	805de4 <___vfprintf_internal_r+0x1a44>
  806100:	983f251e 	bne	r19,zero,805d98 <___vfprintf_internal_r+0x19f8>
  806104:	04c00044 	movi	r19,1
  806108:	003f2306 	br	805d98 <___vfprintf_internal_r+0x19f8>
  80610c:	04c00184 	movi	r19,6
  806110:	003f2106 	br	805d98 <___vfprintf_internal_r+0x19f8>
  806114:	d8014615 	stw	zero,1304(sp)
  806118:	003eee06 	br	805cd4 <___vfprintf_internal_r+0x1934>
  80611c:	200f883a 	mov	r7,r4
  806120:	0100370e 	bge	zero,r4,806200 <___vfprintf_internal_r+0x1e60>
  806124:	9800031e 	bne	r19,zero,806134 <___vfprintf_internal_r+0x1d94>
  806128:	d9814d17 	ldw	r6,1332(sp)
  80612c:	3080004c 	andi	r2,r6,1
  806130:	103fb726 	beq	r2,zero,806010 <___vfprintf_internal_r+0x1c70>
  806134:	20800044 	addi	r2,r4,1
  806138:	98a7883a 	add	r19,r19,r2
  80613c:	dcc14615 	stw	r19,1304(sp)
  806140:	980f883a 	mov	r7,r19
  806144:	983f800e 	bge	r19,zero,805f48 <___vfprintf_internal_r+0x1ba8>
  806148:	003fb306 	br	806018 <___vfprintf_internal_r+0x1c78>
  80614c:	d9814e17 	ldw	r6,1336(sp)
  806150:	31bfff84 	addi	r6,r6,-2
  806154:	d9814e15 	stw	r6,1336(sp)
  806158:	003f4c06 	br	805e8c <___vfprintf_internal_r+0x1aec>
  80615c:	0100180e 	bge	zero,r4,8061c0 <___vfprintf_internal_r+0x1e20>
  806160:	00800044 	movi	r2,1
  806164:	1485883a 	add	r2,r2,r18
  806168:	d8814615 	stw	r2,1304(sp)
  80616c:	100f883a 	mov	r7,r2
  806170:	103f750e 	bge	r2,zero,805f48 <___vfprintf_internal_r+0x1ba8>
  806174:	003fa806 	br	806018 <___vfprintf_internal_r+0x1c78>
  806178:	80c00c04 	addi	r3,r16,48
  80617c:	00800c04 	movi	r2,48
  806180:	d8c009c5 	stb	r3,39(sp)
  806184:	d9800904 	addi	r6,sp,36
  806188:	d8c00a04 	addi	r3,sp,40
  80618c:	d8800985 	stb	r2,38(sp)
  806190:	003f6506 	br	805f28 <___vfprintf_internal_r+0x1b88>
  806194:	d9014d17 	ldw	r4,1332(sp)
  806198:	2084703a 	and	r2,r4,r2
  80619c:	103f9c26 	beq	r2,zero,806010 <___vfprintf_internal_r+0x1c70>
  8061a0:	003f6606 	br	805f3c <___vfprintf_internal_r+0x1b9c>
  8061a4:	d9800904 	addi	r6,sp,36
  8061a8:	d8c00984 	addi	r3,sp,38
  8061ac:	003f5e06 	br	805f28 <___vfprintf_internal_r+0x1b88>
  8061b0:	00800b44 	movi	r2,45
  8061b4:	0121c83a 	sub	r16,zero,r4
  8061b8:	d8800945 	stb	r2,37(sp)
  8061bc:	003f3d06 	br	805eb4 <___vfprintf_internal_r+0x1b14>
  8061c0:	00800084 	movi	r2,2
  8061c4:	1105c83a 	sub	r2,r2,r4
  8061c8:	003fe606 	br	806164 <___vfprintf_internal_r+0x1dc4>
  8061cc:	d8014615 	stw	zero,1304(sp)
  8061d0:	dc814815 	stw	r18,1312(sp)
  8061d4:	003fb106 	br	80609c <___vfprintf_internal_r+0x1cfc>
  8061d8:	000d883a 	mov	r6,zero
  8061dc:	000f883a 	mov	r7,zero
  8061e0:	8009883a 	mov	r4,r16
  8061e4:	880b883a 	mov	r5,r17
  8061e8:	080f5cc0 	call	80f5cc <__nedf2>
  8061ec:	103f9f26 	beq	r2,zero,80606c <___vfprintf_internal_r+0x1ccc>
  8061f0:	00800044 	movi	r2,1
  8061f4:	1509c83a 	sub	r4,r2,r20
  8061f8:	d9000615 	stw	r4,24(sp)
  8061fc:	003f9b06 	br	80606c <___vfprintf_internal_r+0x1ccc>
  806200:	98000d1e 	bne	r19,zero,806238 <___vfprintf_internal_r+0x1e98>
  806204:	d8c14d17 	ldw	r3,1332(sp)
  806208:	1880004c 	andi	r2,r3,1
  80620c:	10000a1e 	bne	r2,zero,806238 <___vfprintf_internal_r+0x1e98>
  806210:	01000044 	movi	r4,1
  806214:	200f883a 	mov	r7,r4
  806218:	d9014615 	stw	r4,1304(sp)
  80621c:	003f4a06 	br	805f48 <___vfprintf_internal_r+0x1ba8>
  806220:	3cc00017 	ldw	r19,0(r7)
  806224:	39c00104 	addi	r7,r7,4
  806228:	983d0e0e 	bge	r19,zero,805664 <___vfprintf_internal_r+0x12c4>
  80622c:	b8c00007 	ldb	r3,0(r23)
  806230:	04ffffc4 	movi	r19,-1
  806234:	0038d906 	br	80459c <___vfprintf_internal_r+0x1fc>
  806238:	9cc00084 	addi	r19,r19,2
  80623c:	dcc14615 	stw	r19,1304(sp)
  806240:	980f883a 	mov	r7,r19
  806244:	983f400e 	bge	r19,zero,805f48 <___vfprintf_internal_r+0x1ba8>
  806248:	003f7306 	br	806018 <___vfprintf_internal_r+0x1c78>

0080624c <__vfprintf_internal>:
  80624c:	00802074 	movhi	r2,129
  806250:	109c4404 	addi	r2,r2,28944
  806254:	2013883a 	mov	r9,r4
  806258:	11000017 	ldw	r4,0(r2)
  80625c:	2805883a 	mov	r2,r5
  806260:	300f883a 	mov	r7,r6
  806264:	480b883a 	mov	r5,r9
  806268:	100d883a 	mov	r6,r2
  80626c:	08043a01 	jmpi	8043a0 <___vfprintf_internal_r>

00806270 <__svfscanf_r>:
  806270:	deff4e04 	addi	sp,sp,-712
  806274:	dd80ae15 	stw	r22,696(sp)
  806278:	dd00ac15 	stw	r20,688(sp)
  80627c:	dc40a915 	stw	r17,676(sp)
  806280:	dc00a815 	stw	r16,672(sp)
  806284:	dfc0b115 	stw	ra,708(sp)
  806288:	df00b015 	stw	fp,704(sp)
  80628c:	ddc0af15 	stw	r23,700(sp)
  806290:	dd40ad15 	stw	r21,692(sp)
  806294:	dcc0ab15 	stw	r19,684(sp)
  806298:	dc80aa15 	stw	r18,680(sp)
  80629c:	202d883a 	mov	r22,r4
  8062a0:	2821883a 	mov	r16,r5
  8062a4:	d9c0a415 	stw	r7,656(sp)
  8062a8:	3029883a 	mov	r20,r6
  8062ac:	d800a215 	stw	zero,648(sp)
  8062b0:	0023883a 	mov	r17,zero
  8062b4:	d800a115 	stw	zero,644(sp)
  8062b8:	d800a015 	stw	zero,640(sp)
  8062bc:	a1000007 	ldb	r4,0(r20)
  8062c0:	d9000115 	stw	r4,4(sp)
  8062c4:	20001f26 	beq	r4,zero,806344 <__svfscanf_r+0xd4>
  8062c8:	04802074 	movhi	r18,129
  8062cc:	949c4804 	addi	r18,r18,28960
  8062d0:	91800017 	ldw	r6,0(r18)
  8062d4:	a5000044 	addi	r20,r20,1
  8062d8:	3107883a 	add	r3,r6,r4
  8062dc:	18800003 	ldbu	r2,0(r3)
  8062e0:	1080020c 	andi	r2,r2,8
  8062e4:	10002426 	beq	r2,zero,806378 <__svfscanf_r+0x108>
  8062e8:	80c00117 	ldw	r3,4(r16)
  8062ec:	00c00e0e 	bge	zero,r3,806328 <__svfscanf_r+0xb8>
  8062f0:	81400017 	ldw	r5,0(r16)
  8062f4:	90800017 	ldw	r2,0(r18)
  8062f8:	28c00003 	ldbu	r3,0(r5)
  8062fc:	1887883a 	add	r3,r3,r2
  806300:	19000003 	ldbu	r4,0(r3)
  806304:	2100020c 	andi	r4,r4,8
  806308:	203fec26 	beq	r4,zero,8062bc <__svfscanf_r+0x4c>
  80630c:	80c00117 	ldw	r3,4(r16)
  806310:	29800044 	addi	r6,r5,1
  806314:	8c400044 	addi	r17,r17,1
  806318:	18ffffc4 	addi	r3,r3,-1
  80631c:	81800015 	stw	r6,0(r16)
  806320:	80c00115 	stw	r3,4(r16)
  806324:	00fff216 	blt	zero,r3,8062f0 <__svfscanf_r+0x80>
  806328:	b009883a 	mov	r4,r22
  80632c:	800b883a 	mov	r5,r16
  806330:	0803cf00 	call	803cf0 <__srefill_r>
  806334:	103fee26 	beq	r2,zero,8062f0 <__svfscanf_r+0x80>
  806338:	a1000007 	ldb	r4,0(r20)
  80633c:	d9000115 	stw	r4,4(sp)
  806340:	203fe11e 	bne	r4,zero,8062c8 <__svfscanf_r+0x58>
  806344:	d880a217 	ldw	r2,648(sp)
  806348:	dfc0b117 	ldw	ra,708(sp)
  80634c:	df00b017 	ldw	fp,704(sp)
  806350:	ddc0af17 	ldw	r23,700(sp)
  806354:	dd80ae17 	ldw	r22,696(sp)
  806358:	dd40ad17 	ldw	r21,692(sp)
  80635c:	dd00ac17 	ldw	r20,688(sp)
  806360:	dcc0ab17 	ldw	r19,684(sp)
  806364:	dc80aa17 	ldw	r18,680(sp)
  806368:	dc40a917 	ldw	r17,676(sp)
  80636c:	dc00a817 	ldw	r16,672(sp)
  806370:	dec0b204 	addi	sp,sp,712
  806374:	f800283a 	ret
  806378:	00800944 	movi	r2,37
  80637c:	20801626 	beq	r4,r2,8063d8 <__svfscanf_r+0x168>
  806380:	80800117 	ldw	r2,4(r16)
  806384:	00800b0e 	bge	zero,r2,8063b4 <__svfscanf_r+0x144>
  806388:	81000017 	ldw	r4,0(r16)
  80638c:	a0ffffc7 	ldb	r3,-1(r20)
  806390:	20800003 	ldbu	r2,0(r4)
  806394:	10ffeb1e 	bne	r2,r3,806344 <__svfscanf_r+0xd4>
  806398:	80c00117 	ldw	r3,4(r16)
  80639c:	21800044 	addi	r6,r4,1
  8063a0:	8c400044 	addi	r17,r17,1
  8063a4:	18ffffc4 	addi	r3,r3,-1
  8063a8:	80c00115 	stw	r3,4(r16)
  8063ac:	81800015 	stw	r6,0(r16)
  8063b0:	003fc206 	br	8062bc <__svfscanf_r+0x4c>
  8063b4:	b009883a 	mov	r4,r22
  8063b8:	800b883a 	mov	r5,r16
  8063bc:	0803cf00 	call	803cf0 <__srefill_r>
  8063c0:	103ff126 	beq	r2,zero,806388 <__svfscanf_r+0x118>
  8063c4:	d900a217 	ldw	r4,648(sp)
  8063c8:	2004c91e 	bne	r4,zero,8076f0 <__svfscanf_r+0x1480>
  8063cc:	00bfffc4 	movi	r2,-1
  8063d0:	d880a215 	stw	r2,648(sp)
  8063d4:	003fdb06 	br	806344 <__svfscanf_r+0xd4>
  8063d8:	d800a315 	stw	zero,652(sp)
  8063dc:	0027883a 	mov	r19,zero
  8063e0:	a0c00003 	ldbu	r3,0(r20)
  8063e4:	00801e04 	movi	r2,120
  8063e8:	a5000044 	addi	r20,r20,1
  8063ec:	19403fcc 	andi	r5,r3,255
  8063f0:	2940201c 	xori	r5,r5,128
  8063f4:	297fe004 	addi	r5,r5,-128
  8063f8:	10c08036 	bltu	r2,r3,8065fc <__svfscanf_r+0x38c>
  8063fc:	18c5883a 	add	r2,r3,r3
  806400:	1085883a 	add	r2,r2,r2
  806404:	00c02034 	movhi	r3,128
  806408:	18d90604 	addi	r3,r3,25624
  80640c:	10c5883a 	add	r2,r2,r3
  806410:	11000017 	ldw	r4,0(r2)
  806414:	2000683a 	jmp	r4
  806418:	008063cc 	andi	r2,zero,399
  80641c:	008065fc 	xorhi	r2,zero,407
  806420:	008065fc 	xorhi	r2,zero,407
  806424:	008065fc 	xorhi	r2,zero,407
  806428:	008065fc 	xorhi	r2,zero,407
  80642c:	008065fc 	xorhi	r2,zero,407
  806430:	008065fc 	xorhi	r2,zero,407
  806434:	008065fc 	xorhi	r2,zero,407
  806438:	008065fc 	xorhi	r2,zero,407
  80643c:	008065fc 	xorhi	r2,zero,407
  806440:	008065fc 	xorhi	r2,zero,407
  806444:	008065fc 	xorhi	r2,zero,407
  806448:	008065fc 	xorhi	r2,zero,407
  80644c:	008065fc 	xorhi	r2,zero,407
  806450:	008065fc 	xorhi	r2,zero,407
  806454:	008065fc 	xorhi	r2,zero,407
  806458:	008065fc 	xorhi	r2,zero,407
  80645c:	008065fc 	xorhi	r2,zero,407
  806460:	008065fc 	xorhi	r2,zero,407
  806464:	008065fc 	xorhi	r2,zero,407
  806468:	008065fc 	xorhi	r2,zero,407
  80646c:	008065fc 	xorhi	r2,zero,407
  806470:	008065fc 	xorhi	r2,zero,407
  806474:	008065fc 	xorhi	r2,zero,407
  806478:	008065fc 	xorhi	r2,zero,407
  80647c:	008065fc 	xorhi	r2,zero,407
  806480:	008065fc 	xorhi	r2,zero,407
  806484:	008065fc 	xorhi	r2,zero,407
  806488:	008065fc 	xorhi	r2,zero,407
  80648c:	008065fc 	xorhi	r2,zero,407
  806490:	008065fc 	xorhi	r2,zero,407
  806494:	008065fc 	xorhi	r2,zero,407
  806498:	008065fc 	xorhi	r2,zero,407
  80649c:	008065fc 	xorhi	r2,zero,407
  8064a0:	008065fc 	xorhi	r2,zero,407
  8064a4:	008065fc 	xorhi	r2,zero,407
  8064a8:	008065fc 	xorhi	r2,zero,407
  8064ac:	00806380 	call	80638 <__alt_mem_sdram_controller-0x77f9c8>
  8064b0:	008065fc 	xorhi	r2,zero,407
  8064b4:	008065fc 	xorhi	r2,zero,407
  8064b8:	008065fc 	xorhi	r2,zero,407
  8064bc:	008065fc 	xorhi	r2,zero,407
  8064c0:	00807620 	cmpeqi	r2,zero,472
  8064c4:	008065fc 	xorhi	r2,zero,407
  8064c8:	008065fc 	xorhi	r2,zero,407
  8064cc:	008065fc 	xorhi	r2,zero,407
  8064d0:	008065fc 	xorhi	r2,zero,407
  8064d4:	008065fc 	xorhi	r2,zero,407
  8064d8:	0080701c 	xori	r2,zero,448
  8064dc:	0080701c 	xori	r2,zero,448
  8064e0:	0080701c 	xori	r2,zero,448
  8064e4:	0080701c 	xori	r2,zero,448
  8064e8:	0080701c 	xori	r2,zero,448
  8064ec:	0080701c 	xori	r2,zero,448
  8064f0:	0080701c 	xori	r2,zero,448
  8064f4:	0080701c 	xori	r2,zero,448
  8064f8:	0080701c 	xori	r2,zero,448
  8064fc:	0080701c 	xori	r2,zero,448
  806500:	008065fc 	xorhi	r2,zero,407
  806504:	008065fc 	xorhi	r2,zero,407
  806508:	008065fc 	xorhi	r2,zero,407
  80650c:	008065fc 	xorhi	r2,zero,407
  806510:	008065fc 	xorhi	r2,zero,407
  806514:	008065fc 	xorhi	r2,zero,407
  806518:	008065fc 	xorhi	r2,zero,407
  80651c:	008065fc 	xorhi	r2,zero,407
  806520:	008065fc 	xorhi	r2,zero,407
  806524:	008065fc 	xorhi	r2,zero,407
  806528:	0080779c 	xori	r2,zero,478
  80652c:	00807794 	movui	r2,478
  806530:	008065fc 	xorhi	r2,zero,407
  806534:	00807794 	movui	r2,478
  806538:	008065fc 	xorhi	r2,zero,407
  80653c:	008065fc 	xorhi	r2,zero,407
  806540:	008065fc 	xorhi	r2,zero,407
  806544:	008065fc 	xorhi	r2,zero,407
  806548:	0080782c 	andhi	r2,zero,480
  80654c:	008065fc 	xorhi	r2,zero,407
  806550:	008065fc 	xorhi	r2,zero,407
  806554:	008077e4 	muli	r2,zero,479
  806558:	008065fc 	xorhi	r2,zero,407
  80655c:	008065fc 	xorhi	r2,zero,407
  806560:	008065fc 	xorhi	r2,zero,407
  806564:	008065fc 	xorhi	r2,zero,407
  806568:	008065fc 	xorhi	r2,zero,407
  80656c:	008065fc 	xorhi	r2,zero,407
  806570:	008065fc 	xorhi	r2,zero,407
  806574:	008065fc 	xorhi	r2,zero,407
  806578:	00807628 	cmpgeui	r2,zero,472
  80657c:	008065fc 	xorhi	r2,zero,407
  806580:	008065fc 	xorhi	r2,zero,407
  806584:	008077c8 	cmpgei	r2,zero,479
  806588:	008065fc 	xorhi	r2,zero,407
  80658c:	008065fc 	xorhi	r2,zero,407
  806590:	008065fc 	xorhi	r2,zero,407
  806594:	008065fc 	xorhi	r2,zero,407
  806598:	008065fc 	xorhi	r2,zero,407
  80659c:	008065fc 	xorhi	r2,zero,407
  8065a0:	008065fc 	xorhi	r2,zero,407
  8065a4:	008077bc 	xorhi	r2,zero,478
  8065a8:	008077a0 	cmpeqi	r2,zero,478
  8065ac:	00807794 	movui	r2,478
  8065b0:	00807794 	movui	r2,478
  8065b4:	00807794 	movui	r2,478
  8065b8:	0080778c 	andi	r2,zero,478
  8065bc:	00807880 	call	80788 <__alt_mem_sdram_controller-0x77f878>
  8065c0:	008065fc 	xorhi	r2,zero,407
  8065c4:	008065fc 	xorhi	r2,zero,407
  8065c8:	0080786c 	andhi	r2,zero,481
  8065cc:	008065fc 	xorhi	r2,zero,407
  8065d0:	00807804 	movi	r2,480
  8065d4:	008077e8 	cmpgeui	r2,zero,479
  8065d8:	0080783c 	xorhi	r2,zero,480
  8065dc:	008065fc 	xorhi	r2,zero,407
  8065e0:	008065fc 	xorhi	r2,zero,407
  8065e4:	00807834 	movhi	r2,480
  8065e8:	008065fc 	xorhi	r2,zero,407
  8065ec:	00806b6c 	andhi	r2,zero,429
  8065f0:	008065fc 	xorhi	r2,zero,407
  8065f4:	008065fc 	xorhi	r2,zero,407
  8065f8:	00807628 	cmpgeui	r2,zero,472
  8065fc:	2987883a 	add	r3,r5,r6
  806600:	18800003 	ldbu	r2,0(r3)
  806604:	1080004c 	andi	r2,r2,1
  806608:	1005003a 	cmpeq	r2,r2,zero
  80660c:	10002c26 	beq	r2,zero,8066c0 <__svfscanf_r+0x450>
  806610:	01002074 	movhi	r4,129
  806614:	21309804 	addi	r4,r4,-15776
  806618:	00800284 	movi	r2,10
  80661c:	d900a015 	stw	r4,640(sp)
  806620:	054000c4 	movi	r21,3
  806624:	d880a115 	stw	r2,644(sp)
  806628:	80c00117 	ldw	r3,4(r16)
  80662c:	00c14a0e 	bge	zero,r3,806b58 <__svfscanf_r+0x8e8>
  806630:	9880100c 	andi	r2,r19,64
  806634:	10001326 	beq	r2,zero,806684 <__svfscanf_r+0x414>
  806638:	00800104 	movi	r2,4
  80663c:	157f1f36 	bltu	r2,r21,8062bc <__svfscanf_r+0x4c>
  806640:	ad45883a 	add	r2,r21,r21
  806644:	1085883a 	add	r2,r2,r2
  806648:	00c02034 	movhi	r3,128
  80664c:	18d99704 	addi	r3,r3,26204
  806650:	10c5883a 	add	r2,r2,r3
  806654:	11000017 	ldw	r4,0(r2)
  806658:	2000683a 	jmp	r4
  80665c:	008066c8 	cmpgei	r2,zero,411
  806660:	008067d4 	movui	r2,415
  806664:	00806848 	cmpgei	r2,zero,417
  806668:	00806b34 	movhi	r2,428
  80666c:	00806980 	call	80698 <__alt_mem_sdram_controller-0x77f968>
  806670:	b009883a 	mov	r4,r22
  806674:	800b883a 	mov	r5,r16
  806678:	0803cf00 	call	803cf0 <__srefill_r>
  80667c:	103f511e 	bne	r2,zero,8063c4 <__svfscanf_r+0x154>
  806680:	8c400044 	addi	r17,r17,1
  806684:	81400017 	ldw	r5,0(r16)
  806688:	90800017 	ldw	r2,0(r18)
  80668c:	28c00003 	ldbu	r3,0(r5)
  806690:	1887883a 	add	r3,r3,r2
  806694:	19000003 	ldbu	r4,0(r3)
  806698:	2100020c 	andi	r4,r4,8
  80669c:	203fe626 	beq	r4,zero,806638 <__svfscanf_r+0x3c8>
  8066a0:	80c00117 	ldw	r3,4(r16)
  8066a4:	18ffffc4 	addi	r3,r3,-1
  8066a8:	80c00115 	stw	r3,4(r16)
  8066ac:	00fff00e 	bge	zero,r3,806670 <__svfscanf_r+0x400>
  8066b0:	29800044 	addi	r6,r5,1
  8066b4:	8c400044 	addi	r17,r17,1
  8066b8:	81800015 	stw	r6,0(r16)
  8066bc:	003ff106 	br	806684 <__svfscanf_r+0x414>
  8066c0:	9cc00054 	ori	r19,r19,1
  8066c4:	003fd206 	br	806610 <__svfscanf_r+0x3a0>
  8066c8:	d8c0a317 	ldw	r3,652(sp)
  8066cc:	1800021e 	bne	r3,zero,8066d8 <__svfscanf_r+0x468>
  8066d0:	01000044 	movi	r4,1
  8066d4:	d900a315 	stw	r4,652(sp)
  8066d8:	9880004c 	andi	r2,r19,1
  8066dc:	1005003a 	cmpeq	r2,r2,zero
  8066e0:	1003d91e 	bne	r2,zero,807648 <__svfscanf_r+0x13d8>
  8066e4:	9d40040c 	andi	r21,r19,16
  8066e8:	a839003a 	cmpeq	fp,r21,zero
  8066ec:	e0042526 	beq	fp,zero,807784 <__svfscanf_r+0x1514>
  8066f0:	d880a417 	ldw	r2,656(sp)
  8066f4:	14c00017 	ldw	r19,0(r2)
  8066f8:	10800104 	addi	r2,r2,4
  8066fc:	d880a415 	stw	r2,656(sp)
  806700:	d8c0a317 	ldw	r3,652(sp)
  806704:	18041a26 	beq	r3,zero,807770 <__svfscanf_r+0x1500>
  806708:	01002074 	movhi	r4,129
  80670c:	211c4904 	addi	r4,r4,28964
  806710:	20800017 	ldw	r2,0(r4)
  806714:	103f2b26 	beq	r2,zero,8063c4 <__svfscanf_r+0x154>
  806718:	d8804404 	addi	r2,sp,272
  80671c:	0025883a 	mov	r18,zero
  806720:	d880a615 	stw	r2,664(sp)
  806724:	05ffffc4 	movi	r23,-1
  806728:	80800017 	ldw	r2,0(r16)
  80672c:	80c00117 	ldw	r3,4(r16)
  806730:	d900a617 	ldw	r4,664(sp)
  806734:	12000003 	ldbu	r8,0(r2)
  806738:	18ffffc4 	addi	r3,r3,-1
  80673c:	11800044 	addi	r6,r2,1
  806740:	248f883a 	add	r7,r4,r18
  806744:	80c00115 	stw	r3,4(r16)
  806748:	81800015 	stw	r6,0(r16)
  80674c:	3a000005 	stb	r8,0(r7)
  806750:	d9000204 	addi	r4,sp,8
  806754:	000b883a 	mov	r5,zero
  806758:	01800204 	movi	r6,8
  80675c:	08034c00 	call	8034c0 <memset>
  806760:	d980a617 	ldw	r6,664(sp)
  806764:	94800044 	addi	r18,r18,1
  806768:	d8800204 	addi	r2,sp,8
  80676c:	b009883a 	mov	r4,r22
  806770:	980b883a 	mov	r5,r19
  806774:	900f883a 	mov	r7,r18
  806778:	d8800015 	stw	r2,0(sp)
  80677c:	08098940 	call	809894 <_mbrtowc_r>
  806780:	1007883a 	mov	r3,r2
  806784:	15ff0f26 	beq	r2,r23,8063c4 <__svfscanf_r+0x154>
  806788:	1003f11e 	bne	r2,zero,807750 <__svfscanf_r+0x14e0>
  80678c:	a800011e 	bne	r21,zero,806794 <__svfscanf_r+0x524>
  806790:	98000015 	stw	zero,0(r19)
  806794:	d8c0a317 	ldw	r3,652(sp)
  806798:	8ca3883a 	add	r17,r17,r18
  80679c:	18ffffc4 	addi	r3,r3,-1
  8067a0:	d8c0a315 	stw	r3,652(sp)
  8067a4:	e0000126 	beq	fp,zero,8067ac <__svfscanf_r+0x53c>
  8067a8:	9cc00104 	addi	r19,r19,4
  8067ac:	0025883a 	mov	r18,zero
  8067b0:	80c00117 	ldw	r3,4(r16)
  8067b4:	00c3e90e 	bge	zero,r3,80775c <__svfscanf_r+0x14ec>
  8067b8:	d900a317 	ldw	r4,652(sp)
  8067bc:	2003ec26 	beq	r4,zero,807770 <__svfscanf_r+0x1500>
  8067c0:	00c02074 	movhi	r3,129
  8067c4:	18dc4904 	addi	r3,r3,28964
  8067c8:	18800017 	ldw	r2,0(r3)
  8067cc:	90bfd61e 	bne	r18,r2,806728 <__svfscanf_r+0x4b8>
  8067d0:	003efc06 	br	8063c4 <__svfscanf_r+0x154>
  8067d4:	d880a317 	ldw	r2,652(sp)
  8067d8:	1000021e 	bne	r2,zero,8067e4 <__svfscanf_r+0x574>
  8067dc:	00ffffc4 	movi	r3,-1
  8067e0:	d8c0a315 	stw	r3,652(sp)
  8067e4:	9880040c 	andi	r2,r19,16
  8067e8:	10036526 	beq	r2,zero,807580 <__svfscanf_r+0x1310>
  8067ec:	0027883a 	mov	r19,zero
  8067f0:	dd400404 	addi	r21,sp,16
  8067f4:	81000017 	ldw	r4,0(r16)
  8067f8:	20800003 	ldbu	r2,0(r4)
  8067fc:	a885883a 	add	r2,r21,r2
  806800:	10c00007 	ldb	r3,0(r2)
  806804:	1803be26 	beq	r3,zero,807700 <__svfscanf_r+0x1490>
  806808:	80c00117 	ldw	r3,4(r16)
  80680c:	21800044 	addi	r6,r4,1
  806810:	d900a317 	ldw	r4,652(sp)
  806814:	18ffffc4 	addi	r3,r3,-1
  806818:	9cc00044 	addi	r19,r19,1
  80681c:	81800015 	stw	r6,0(r16)
  806820:	80c00115 	stw	r3,4(r16)
  806824:	24c3b626 	beq	r4,r19,807700 <__svfscanf_r+0x1490>
  806828:	00fff216 	blt	zero,r3,8067f4 <__svfscanf_r+0x584>
  80682c:	b009883a 	mov	r4,r22
  806830:	800b883a 	mov	r5,r16
  806834:	0803cf00 	call	803cf0 <__srefill_r>
  806838:	103fee26 	beq	r2,zero,8067f4 <__svfscanf_r+0x584>
  80683c:	983ee126 	beq	r19,zero,8063c4 <__svfscanf_r+0x154>
  806840:	8ce3883a 	add	r17,r17,r19
  806844:	003e9d06 	br	8062bc <__svfscanf_r+0x4c>
  806848:	d900a317 	ldw	r4,652(sp)
  80684c:	2000021e 	bne	r4,zero,806858 <__svfscanf_r+0x5e8>
  806850:	00bfffc4 	movi	r2,-1
  806854:	d880a315 	stw	r2,652(sp)
  806858:	9880004c 	andi	r2,r19,1
  80685c:	1005003a 	cmpeq	r2,r2,zero
  806860:	1001f41e 	bne	r2,zero,807034 <__svfscanf_r+0xdc4>
  806864:	9dc0040c 	andi	r23,r19,16
  806868:	b807003a 	cmpeq	r3,r23,zero
  80686c:	d8c0a515 	stw	r3,660(sp)
  806870:	1803b21e 	bne	r3,zero,80773c <__svfscanf_r+0x14cc>
  806874:	dd400104 	addi	r21,sp,4
  806878:	0027883a 	mov	r19,zero
  80687c:	073fffc4 	movi	fp,-1
  806880:	81400017 	ldw	r5,0(r16)
  806884:	90800017 	ldw	r2,0(r18)
  806888:	29c00003 	ldbu	r7,0(r5)
  80688c:	38c03fcc 	andi	r3,r7,255
  806890:	1887883a 	add	r3,r3,r2
  806894:	19000003 	ldbu	r4,0(r3)
  806898:	2100020c 	andi	r4,r4,8
  80689c:	2000321e 	bne	r4,zero,806968 <__svfscanf_r+0x6f8>
  8068a0:	d8c0a317 	ldw	r3,652(sp)
  8068a4:	18003026 	beq	r3,zero,806968 <__svfscanf_r+0x6f8>
  8068a8:	00802074 	movhi	r2,129
  8068ac:	109c4904 	addi	r2,r2,28964
  8068b0:	10c00017 	ldw	r3,0(r2)
  8068b4:	98fec326 	beq	r19,r3,8063c4 <__svfscanf_r+0x154>
  8068b8:	d8c04404 	addi	r3,sp,272
  8068bc:	80800117 	ldw	r2,4(r16)
  8068c0:	d8c0a615 	stw	r3,664(sp)
  8068c4:	d900a617 	ldw	r4,664(sp)
  8068c8:	10ffffc4 	addi	r3,r2,-1
  8068cc:	29800044 	addi	r6,r5,1
  8068d0:	80c00115 	stw	r3,4(r16)
  8068d4:	24c5883a 	add	r2,r4,r19
  8068d8:	81800015 	stw	r6,0(r16)
  8068dc:	d9000204 	addi	r4,sp,8
  8068e0:	000b883a 	mov	r5,zero
  8068e4:	01800204 	movi	r6,8
  8068e8:	11c00005 	stb	r7,0(r2)
  8068ec:	08034c00 	call	8034c0 <memset>
  8068f0:	d980a617 	ldw	r6,664(sp)
  8068f4:	9cc00044 	addi	r19,r19,1
  8068f8:	d8800204 	addi	r2,sp,8
  8068fc:	b009883a 	mov	r4,r22
  806900:	a80b883a 	mov	r5,r21
  806904:	980f883a 	mov	r7,r19
  806908:	d8800015 	stw	r2,0(sp)
  80690c:	08098940 	call	809894 <_mbrtowc_r>
  806910:	1007883a 	mov	r3,r2
  806914:	173eab26 	beq	r2,fp,8063c4 <__svfscanf_r+0x154>
  806918:	1003851e 	bne	r2,zero,807730 <__svfscanf_r+0x14c0>
  80691c:	a8000015 	stw	zero,0(r21)
  806920:	a9000017 	ldw	r4,0(r21)
  806924:	080972c0 	call	80972c <iswspace>
  806928:	1003781e 	bne	r2,zero,80770c <__svfscanf_r+0x149c>
  80692c:	d900a317 	ldw	r4,652(sp)
  806930:	d880a517 	ldw	r2,660(sp)
  806934:	8ce3883a 	add	r17,r17,r19
  806938:	213fffc4 	addi	r4,r4,-1
  80693c:	d900a315 	stw	r4,652(sp)
  806940:	10000126 	beq	r2,zero,806948 <__svfscanf_r+0x6d8>
  806944:	ad400104 	addi	r21,r21,4
  806948:	0027883a 	mov	r19,zero
  80694c:	80c00117 	ldw	r3,4(r16)
  806950:	00ffcb16 	blt	zero,r3,806880 <__svfscanf_r+0x610>
  806954:	b009883a 	mov	r4,r22
  806958:	800b883a 	mov	r5,r16
  80695c:	0803cf00 	call	803cf0 <__srefill_r>
  806960:	103fc726 	beq	r2,zero,806880 <__svfscanf_r+0x610>
  806964:	983e971e 	bne	r19,zero,8063c4 <__svfscanf_r+0x154>
  806968:	b83e541e 	bne	r23,zero,8062bc <__svfscanf_r+0x4c>
  80696c:	d900a217 	ldw	r4,648(sp)
  806970:	a8000015 	stw	zero,0(r21)
  806974:	21000044 	addi	r4,r4,1
  806978:	d900a215 	stw	r4,648(sp)
  80697c:	003e4f06 	br	8062bc <__svfscanf_r+0x4c>
  806980:	d900a317 	ldw	r4,652(sp)
  806984:	00805704 	movi	r2,348
  806988:	20ffffc4 	addi	r3,r4,-1
  80698c:	10c1ed2e 	bgeu	r2,r3,807144 <__svfscanf_r+0xed4>
  806990:	00805744 	movi	r2,349
  806994:	21bfa8c4 	addi	r6,r4,-349
  806998:	9d41e014 	ori	r21,r19,1920
  80699c:	d880a315 	stw	r2,652(sp)
  8069a0:	d8c04404 	addi	r3,sp,272
  8069a4:	d8c0a615 	stw	r3,664(sp)
  8069a8:	182f883a 	mov	r23,r3
  8069ac:	d8009f15 	stw	zero,636(sp)
  8069b0:	d8009e15 	stw	zero,632(sp)
  8069b4:	d8009d15 	stw	zero,628(sp)
  8069b8:	d8009c15 	stw	zero,624(sp)
  8069bc:	0039883a 	mov	fp,zero
  8069c0:	0025883a 	mov	r18,zero
  8069c4:	80800017 	ldw	r2,0(r16)
  8069c8:	11400003 	ldbu	r5,0(r2)
  8069cc:	00801384 	movi	r2,78
  8069d0:	28fff544 	addi	r3,r5,-43
  8069d4:	18c03fcc 	andi	r3,r3,255
  8069d8:	10c07d36 	bltu	r2,r3,806bd0 <__svfscanf_r+0x960>
  8069dc:	18c5883a 	add	r2,r3,r3
  8069e0:	1085883a 	add	r2,r2,r2
  8069e4:	00c02034 	movhi	r3,128
  8069e8:	18da7e04 	addi	r3,r3,27128
  8069ec:	10c5883a 	add	r2,r2,r3
  8069f0:	11000017 	ldw	r4,0(r2)
  8069f4:	2000683a 	jmp	r4
  8069f8:	00806b88 	cmpgei	r2,zero,430
  8069fc:	00806bd0 	cmplti	r2,zero,431
  806a00:	00806b88 	cmpgei	r2,zero,430
  806a04:	00806d1c 	xori	r2,zero,436
  806a08:	00806bd0 	cmplti	r2,zero,431
  806a0c:	00806d54 	movui	r2,437
  806a10:	00806d88 	cmpgei	r2,zero,438
  806a14:	00806d88 	cmpgei	r2,zero,438
  806a18:	00806d88 	cmpgei	r2,zero,438
  806a1c:	00806d88 	cmpgei	r2,zero,438
  806a20:	00806d88 	cmpgei	r2,zero,438
  806a24:	00806d88 	cmpgei	r2,zero,438
  806a28:	00806d88 	cmpgei	r2,zero,438
  806a2c:	00806d88 	cmpgei	r2,zero,438
  806a30:	00806d88 	cmpgei	r2,zero,438
  806a34:	00806bd0 	cmplti	r2,zero,431
  806a38:	00806bd0 	cmplti	r2,zero,431
  806a3c:	00806bd0 	cmplti	r2,zero,431
  806a40:	00806bd0 	cmplti	r2,zero,431
  806a44:	00806bd0 	cmplti	r2,zero,431
  806a48:	00806bd0 	cmplti	r2,zero,431
  806a4c:	00806bd0 	cmplti	r2,zero,431
  806a50:	00806da8 	cmpgeui	r2,zero,438
  806a54:	00806bd0 	cmplti	r2,zero,431
  806a58:	00806bd0 	cmplti	r2,zero,431
  806a5c:	00806bd0 	cmplti	r2,zero,431
  806a60:	00806db8 	rdprs	r2,zero,438
  806a64:	00806e54 	movui	r2,441
  806a68:	00806bd0 	cmplti	r2,zero,431
  806a6c:	00806bd0 	cmplti	r2,zero,431
  806a70:	00806e70 	cmpltui	r2,zero,441
  806a74:	00806bd0 	cmplti	r2,zero,431
  806a78:	00806bd0 	cmplti	r2,zero,431
  806a7c:	00806bd0 	cmplti	r2,zero,431
  806a80:	00806bd0 	cmplti	r2,zero,431
  806a84:	00806e9c 	xori	r2,zero,442
  806a88:	00806bd0 	cmplti	r2,zero,431
  806a8c:	00806bd0 	cmplti	r2,zero,431
  806a90:	00806bd0 	cmplti	r2,zero,431
  806a94:	00806bd0 	cmplti	r2,zero,431
  806a98:	00806bd0 	cmplti	r2,zero,431
  806a9c:	00806ef0 	cmpltui	r2,zero,443
  806aa0:	00806bd0 	cmplti	r2,zero,431
  806aa4:	00806bd0 	cmplti	r2,zero,431
  806aa8:	00806bd0 	cmplti	r2,zero,431
  806aac:	00806bd0 	cmplti	r2,zero,431
  806ab0:	00807000 	call	80700 <__alt_mem_sdram_controller-0x77f900>
  806ab4:	00806bd0 	cmplti	r2,zero,431
  806ab8:	00806bd0 	cmplti	r2,zero,431
  806abc:	00806bd0 	cmplti	r2,zero,431
  806ac0:	00806bd0 	cmplti	r2,zero,431
  806ac4:	00806bd0 	cmplti	r2,zero,431
  806ac8:	00806bd0 	cmplti	r2,zero,431
  806acc:	00806bd0 	cmplti	r2,zero,431
  806ad0:	00806da8 	cmpgeui	r2,zero,438
  806ad4:	00806bd0 	cmplti	r2,zero,431
  806ad8:	00806bd0 	cmplti	r2,zero,431
  806adc:	00806bd0 	cmplti	r2,zero,431
  806ae0:	00806db8 	rdprs	r2,zero,438
  806ae4:	00806e54 	movui	r2,441
  806ae8:	00806bd0 	cmplti	r2,zero,431
  806aec:	00806bd0 	cmplti	r2,zero,431
  806af0:	00806e70 	cmpltui	r2,zero,441
  806af4:	00806bd0 	cmplti	r2,zero,431
  806af8:	00806bd0 	cmplti	r2,zero,431
  806afc:	00806bd0 	cmplti	r2,zero,431
  806b00:	00806bd0 	cmplti	r2,zero,431
  806b04:	00806e9c 	xori	r2,zero,442
  806b08:	00806bd0 	cmplti	r2,zero,431
  806b0c:	00806bd0 	cmplti	r2,zero,431
  806b10:	00806bd0 	cmplti	r2,zero,431
  806b14:	00806bd0 	cmplti	r2,zero,431
  806b18:	00806bd0 	cmplti	r2,zero,431
  806b1c:	00806ef0 	cmpltui	r2,zero,443
  806b20:	00806bd0 	cmplti	r2,zero,431
  806b24:	00806bd0 	cmplti	r2,zero,431
  806b28:	00806bd0 	cmplti	r2,zero,431
  806b2c:	00806bd0 	cmplti	r2,zero,431
  806b30:	00807000 	call	80700 <__alt_mem_sdram_controller-0x77f900>
  806b34:	d900a317 	ldw	r4,652(sp)
  806b38:	00805704 	movi	r2,348
  806b3c:	20ffffc4 	addi	r3,r4,-1
  806b40:	10c18c2e 	bgeu	r2,r3,807174 <__svfscanf_r+0xf04>
  806b44:	00805744 	movi	r2,349
  806b48:	257fa8c4 	addi	r21,r4,-349
  806b4c:	9c836014 	ori	r18,r19,3456
  806b50:	d880a315 	stw	r2,652(sp)
  806b54:	0001a106 	br	8071dc <__svfscanf_r+0xf6c>
  806b58:	b009883a 	mov	r4,r22
  806b5c:	800b883a 	mov	r5,r16
  806b60:	0803cf00 	call	803cf0 <__srefill_r>
  806b64:	103eb226 	beq	r2,zero,806630 <__svfscanf_r+0x3c0>
  806b68:	003e1606 	br	8063c4 <__svfscanf_r+0x154>
  806b6c:	01000284 	movi	r4,10
  806b70:	00802074 	movhi	r2,129
  806b74:	10b1f804 	addi	r2,r2,-14368
  806b78:	054000c4 	movi	r21,3
  806b7c:	d900a115 	stw	r4,644(sp)
  806b80:	d880a015 	stw	r2,640(sp)
  806b84:	003ea806 	br	806628 <__svfscanf_r+0x3b8>
  806b88:	a880200c 	andi	r2,r21,128
  806b8c:	10001026 	beq	r2,zero,806bd0 <__svfscanf_r+0x960>
  806b90:	00bfdfc4 	movi	r2,-129
  806b94:	a8aa703a 	and	r21,r21,r2
  806b98:	b9400005 	stb	r5,0(r23)
  806b9c:	bdc00044 	addi	r23,r23,1
  806ba0:	80c00117 	ldw	r3,4(r16)
  806ba4:	8c400044 	addi	r17,r17,1
  806ba8:	18bfffc4 	addi	r2,r3,-1
  806bac:	80800115 	stw	r2,4(r16)
  806bb0:	0080610e 	bge	zero,r2,806d38 <__svfscanf_r+0xac8>
  806bb4:	80800017 	ldw	r2,0(r16)
  806bb8:	10800044 	addi	r2,r2,1
  806bbc:	80800015 	stw	r2,0(r16)
  806bc0:	d880a317 	ldw	r2,652(sp)
  806bc4:	10bfffc4 	addi	r2,r2,-1
  806bc8:	d880a315 	stw	r2,652(sp)
  806bcc:	103f7d1e 	bne	r2,zero,8069c4 <__svfscanf_r+0x754>
  806bd0:	d8c09e17 	ldw	r3,632(sp)
  806bd4:	18000226 	beq	r3,zero,806be0 <__svfscanf_r+0x970>
  806bd8:	00bfbfc4 	movi	r2,-257
  806bdc:	a8aa703a 	and	r21,r21,r2
  806be0:	90ffffc4 	addi	r3,r18,-1
  806be4:	00800044 	movi	r2,1
  806be8:	10c0cd2e 	bgeu	r2,r3,806f20 <__svfscanf_r+0xcb0>
  806bec:	e1003fcc 	andi	r4,fp,255
  806bf0:	2100201c 	xori	r4,r4,128
  806bf4:	213fe004 	addi	r4,r4,-128
  806bf8:	20ffffc4 	addi	r3,r4,-1
  806bfc:	00800184 	movi	r2,6
  806c00:	10c01736 	bltu	r2,r3,806c60 <__svfscanf_r+0x9f0>
  806c04:	00c00084 	movi	r3,2
  806c08:	1900880e 	bge	r3,r4,806e2c <__svfscanf_r+0xbbc>
  806c0c:	008000c4 	movi	r2,3
  806c10:	1100130e 	bge	r2,r4,806c60 <__svfscanf_r+0x9f0>
  806c14:	e4ffffc4 	addi	r19,fp,-1
  806c18:	b825883a 	mov	r18,r23
  806c1c:	94bfffc4 	addi	r18,r18,-1
  806c20:	91400007 	ldb	r5,0(r18)
  806c24:	b009883a 	mov	r4,r22
  806c28:	800d883a 	mov	r6,r16
  806c2c:	080ce000 	call	80ce00 <_ungetc_r>
  806c30:	9cffffc4 	addi	r19,r19,-1
  806c34:	98c03fcc 	andi	r3,r19,255
  806c38:	18c0201c 	xori	r3,r3,128
  806c3c:	18ffe004 	addi	r3,r3,-128
  806c40:	00800084 	movi	r2,2
  806c44:	18bff51e 	bne	r3,r2,806c1c <__svfscanf_r+0x9ac>
  806c48:	e0bfff04 	addi	r2,fp,-4
  806c4c:	10803fcc 	andi	r2,r2,255
  806c50:	b887c83a 	sub	r3,r23,r2
  806c54:	8885c83a 	sub	r2,r17,r2
  806c58:	147fffc4 	addi	r17,r2,-1
  806c5c:	1dffffc4 	addi	r23,r3,-1
  806c60:	a880400c 	andi	r2,r21,256
  806c64:	10001226 	beq	r2,zero,806cb0 <__svfscanf_r+0xa40>
  806c68:	a881000c 	andi	r2,r21,1024
  806c6c:	1000651e 	bne	r2,zero,806e04 <__svfscanf_r+0xb94>
  806c70:	bdffffc4 	addi	r23,r23,-1
  806c74:	b9400007 	ldb	r5,0(r23)
  806c78:	00801944 	movi	r2,101
  806c7c:	8c7fffc4 	addi	r17,r17,-1
  806c80:	28800826 	beq	r5,r2,806ca4 <__svfscanf_r+0xa34>
  806c84:	00801144 	movi	r2,69
  806c88:	28800626 	beq	r5,r2,806ca4 <__svfscanf_r+0xa34>
  806c8c:	bdffffc4 	addi	r23,r23,-1
  806c90:	b009883a 	mov	r4,r22
  806c94:	800d883a 	mov	r6,r16
  806c98:	080ce000 	call	80ce00 <_ungetc_r>
  806c9c:	b9400007 	ldb	r5,0(r23)
  806ca0:	8c7fffc4 	addi	r17,r17,-1
  806ca4:	b009883a 	mov	r4,r22
  806ca8:	800d883a 	mov	r6,r16
  806cac:	080ce000 	call	80ce00 <_ungetc_r>
  806cb0:	a880040c 	andi	r2,r21,16
  806cb4:	103d811e 	bne	r2,zero,8062bc <__svfscanf_r+0x4c>
  806cb8:	a8c1800c 	andi	r3,r21,1536
  806cbc:	00810004 	movi	r2,1024
  806cc0:	b8000005 	stb	zero,0(r23)
  806cc4:	1880bb26 	beq	r3,r2,806fb4 <__svfscanf_r+0xd44>
  806cc8:	d8809d17 	ldw	r2,628(sp)
  806ccc:	1000a61e 	bne	r2,zero,806f68 <__svfscanf_r+0xcf8>
  806cd0:	d940a617 	ldw	r5,664(sp)
  806cd4:	b009883a 	mov	r4,r22
  806cd8:	000d883a 	mov	r6,zero
  806cdc:	080ac3c0 	call	80ac3c <_strtod_r>
  806ce0:	a900004c 	andi	r4,r21,1
  806ce4:	2009003a 	cmpeq	r4,r4,zero
  806ce8:	1025883a 	mov	r18,r2
  806cec:	1827883a 	mov	r19,r3
  806cf0:	2000951e 	bne	r4,zero,806f48 <__svfscanf_r+0xcd8>
  806cf4:	d8c0a417 	ldw	r3,656(sp)
  806cf8:	18800017 	ldw	r2,0(r3)
  806cfc:	1d400104 	addi	r21,r3,4
  806d00:	14c00115 	stw	r19,4(r2)
  806d04:	14800015 	stw	r18,0(r2)
  806d08:	d8c0a217 	ldw	r3,648(sp)
  806d0c:	dd40a415 	stw	r21,656(sp)
  806d10:	18c00044 	addi	r3,r3,1
  806d14:	d8c0a215 	stw	r3,648(sp)
  806d18:	003d6806 	br	8062bc <__svfscanf_r+0x4c>
  806d1c:	a880800c 	andi	r2,r21,512
  806d20:	103fab26 	beq	r2,zero,806bd0 <__svfscanf_r+0x960>
  806d24:	d9009e17 	ldw	r4,632(sp)
  806d28:	00bf5fc4 	movi	r2,-641
  806d2c:	a8aa703a 	and	r21,r21,r2
  806d30:	d9009f15 	stw	r4,636(sp)
  806d34:	003f9806 	br	806b98 <__svfscanf_r+0x928>
  806d38:	b009883a 	mov	r4,r22
  806d3c:	800b883a 	mov	r5,r16
  806d40:	d980a715 	stw	r6,668(sp)
  806d44:	0803cf00 	call	803cf0 <__srefill_r>
  806d48:	d980a717 	ldw	r6,668(sp)
  806d4c:	103f9c26 	beq	r2,zero,806bc0 <__svfscanf_r+0x950>
  806d50:	003f9f06 	br	806bd0 <__svfscanf_r+0x960>
  806d54:	a880400c 	andi	r2,r21,256
  806d58:	10000b26 	beq	r2,zero,806d88 <__svfscanf_r+0xb18>
  806d5c:	00bfdfc4 	movi	r2,-129
  806d60:	a8aa703a 	and	r21,r21,r2
  806d64:	d8809e17 	ldw	r2,632(sp)
  806d68:	10800044 	addi	r2,r2,1
  806d6c:	d8809e15 	stw	r2,632(sp)
  806d70:	303f8b26 	beq	r6,zero,806ba0 <__svfscanf_r+0x930>
  806d74:	d8c0a317 	ldw	r3,652(sp)
  806d78:	31bfffc4 	addi	r6,r6,-1
  806d7c:	18c00044 	addi	r3,r3,1
  806d80:	d8c0a315 	stw	r3,652(sp)
  806d84:	003f8606 	br	806ba0 <__svfscanf_r+0x930>
  806d88:	e0803fcc 	andi	r2,fp,255
  806d8c:	1080201c 	xori	r2,r2,128
  806d90:	10bfe004 	addi	r2,r2,-128
  806d94:	9085883a 	add	r2,r18,r2
  806d98:	103f8d1e 	bne	r2,zero,806bd0 <__svfscanf_r+0x960>
  806d9c:	00bf9fc4 	movi	r2,-385
  806da0:	a8aa703a 	and	r21,r21,r2
  806da4:	003f7c06 	br	806b98 <__svfscanf_r+0x928>
  806da8:	00800044 	movi	r2,1
  806dac:	90bf881e 	bne	r18,r2,806bd0 <__svfscanf_r+0x960>
  806db0:	04800084 	movi	r18,2
  806db4:	003f7806 	br	806b98 <__svfscanf_r+0x928>
  806db8:	a8c1400c 	andi	r3,r21,1280
  806dbc:	00810004 	movi	r2,1024
  806dc0:	18800426 	beq	r3,r2,806dd4 <__svfscanf_r+0xb64>
  806dc4:	a884703a 	and	r2,r21,r2
  806dc8:	103f8126 	beq	r2,zero,806bd0 <__svfscanf_r+0x960>
  806dcc:	d8809e17 	ldw	r2,632(sp)
  806dd0:	103f8326 	beq	r2,zero,806be0 <__svfscanf_r+0x970>
  806dd4:	a880800c 	andi	r2,r21,512
  806dd8:	1000051e 	bne	r2,zero,806df0 <__svfscanf_r+0xb80>
  806ddc:	d8c09e17 	ldw	r3,632(sp)
  806de0:	d9009f17 	ldw	r4,636(sp)
  806de4:	ddc09c15 	stw	r23,624(sp)
  806de8:	1907c83a 	sub	r3,r3,r4
  806dec:	d8c09d15 	stw	r3,628(sp)
  806df0:	00be7fc4 	movi	r2,-1537
  806df4:	a884703a 	and	r2,r21,r2
  806df8:	15406014 	ori	r21,r2,384
  806dfc:	d8009e15 	stw	zero,632(sp)
  806e00:	003f6506 	br	806b98 <__svfscanf_r+0x928>
  806e04:	d900a617 	ldw	r4,664(sp)
  806e08:	25fd4e2e 	bgeu	r4,r23,806344 <__svfscanf_r+0xd4>
  806e0c:	bdffffc4 	addi	r23,r23,-1
  806e10:	b9400007 	ldb	r5,0(r23)
  806e14:	b009883a 	mov	r4,r22
  806e18:	800d883a 	mov	r6,r16
  806e1c:	080ce000 	call	80ce00 <_ungetc_r>
  806e20:	d880a617 	ldw	r2,664(sp)
  806e24:	15fff936 	bltu	r2,r23,806e0c <__svfscanf_r+0xb9c>
  806e28:	003d4606 	br	806344 <__svfscanf_r+0xd4>
  806e2c:	d900a617 	ldw	r4,664(sp)
  806e30:	25fd442e 	bgeu	r4,r23,806344 <__svfscanf_r+0xd4>
  806e34:	bdffffc4 	addi	r23,r23,-1
  806e38:	b9400007 	ldb	r5,0(r23)
  806e3c:	b009883a 	mov	r4,r22
  806e40:	800d883a 	mov	r6,r16
  806e44:	080ce000 	call	80ce00 <_ungetc_r>
  806e48:	d8c0a617 	ldw	r3,664(sp)
  806e4c:	1dfff936 	bltu	r3,r23,806e34 <__svfscanf_r+0xbc4>
  806e50:	003d3c06 	br	806344 <__svfscanf_r+0xd4>
  806e54:	e0c03fcc 	andi	r3,fp,255
  806e58:	18c0201c 	xori	r3,r3,128
  806e5c:	18ffe004 	addi	r3,r3,-128
  806e60:	00800084 	movi	r2,2
  806e64:	18bf5a1e 	bne	r3,r2,806bd0 <__svfscanf_r+0x960>
  806e68:	070000c4 	movi	fp,3
  806e6c:	003f4a06 	br	806b98 <__svfscanf_r+0x928>
  806e70:	e0c03fcc 	andi	r3,fp,255
  806e74:	18c0201c 	xori	r3,r3,128
  806e78:	18ffe004 	addi	r3,r3,-128
  806e7c:	1800231e 	bne	r3,zero,806f0c <__svfscanf_r+0xc9c>
  806e80:	a8c1c00c 	andi	r3,r21,1792
  806e84:	0081c004 	movi	r2,1792
  806e88:	18bf511e 	bne	r3,r2,806bd0 <__svfscanf_r+0x960>
  806e8c:	00be1fc4 	movi	r2,-1921
  806e90:	a8aa703a 	and	r21,r21,r2
  806e94:	07000044 	movi	fp,1
  806e98:	003f3f06 	br	806b98 <__svfscanf_r+0x928>
  806e9c:	9000101e 	bne	r18,zero,806ee0 <__svfscanf_r+0xc70>
  806ea0:	a8c1c00c 	andi	r3,r21,1792
  806ea4:	0081c004 	movi	r2,1792
  806ea8:	18800926 	beq	r3,r2,806ed0 <__svfscanf_r+0xc60>
  806eac:	e0c03fcc 	andi	r3,fp,255
  806eb0:	18c0201c 	xori	r3,r3,128
  806eb4:	18ffe004 	addi	r3,r3,-128
  806eb8:	00800044 	movi	r2,1
  806ebc:	18800226 	beq	r3,r2,806ec8 <__svfscanf_r+0xc58>
  806ec0:	00800104 	movi	r2,4
  806ec4:	18bf421e 	bne	r3,r2,806bd0 <__svfscanf_r+0x960>
  806ec8:	e7000044 	addi	fp,fp,1
  806ecc:	003f3206 	br	806b98 <__svfscanf_r+0x928>
  806ed0:	00be1fc4 	movi	r2,-1921
  806ed4:	a8aa703a 	and	r21,r21,r2
  806ed8:	04800044 	movi	r18,1
  806edc:	003f2e06 	br	806b98 <__svfscanf_r+0x928>
  806ee0:	00800084 	movi	r2,2
  806ee4:	90bff11e 	bne	r18,r2,806eac <__svfscanf_r+0xc3c>
  806ee8:	048000c4 	movi	r18,3
  806eec:	003f2a06 	br	806b98 <__svfscanf_r+0x928>
  806ef0:	e0c03fcc 	andi	r3,fp,255
  806ef4:	18c0201c 	xori	r3,r3,128
  806ef8:	18ffe004 	addi	r3,r3,-128
  806efc:	00800184 	movi	r2,6
  806f00:	18bf331e 	bne	r3,r2,806bd0 <__svfscanf_r+0x960>
  806f04:	070001c4 	movi	fp,7
  806f08:	003f2306 	br	806b98 <__svfscanf_r+0x928>
  806f0c:	008000c4 	movi	r2,3
  806f10:	18bfed26 	beq	r3,r2,806ec8 <__svfscanf_r+0xc58>
  806f14:	00800144 	movi	r2,5
  806f18:	18bfeb26 	beq	r3,r2,806ec8 <__svfscanf_r+0xc58>
  806f1c:	003f2c06 	br	806bd0 <__svfscanf_r+0x960>
  806f20:	d900a617 	ldw	r4,664(sp)
  806f24:	25fd072e 	bgeu	r4,r23,806344 <__svfscanf_r+0xd4>
  806f28:	bdffffc4 	addi	r23,r23,-1
  806f2c:	b9400007 	ldb	r5,0(r23)
  806f30:	b009883a 	mov	r4,r22
  806f34:	800d883a 	mov	r6,r16
  806f38:	080ce000 	call	80ce00 <_ungetc_r>
  806f3c:	d880a617 	ldw	r2,664(sp)
  806f40:	15fff936 	bltu	r2,r23,806f28 <__svfscanf_r+0xcb8>
  806f44:	003cff06 	br	806344 <__svfscanf_r+0xd4>
  806f48:	a880008c 	andi	r2,r21,2
  806f4c:	10002026 	beq	r2,zero,806fd0 <__svfscanf_r+0xd60>
  806f50:	d900a417 	ldw	r4,656(sp)
  806f54:	20800017 	ldw	r2,0(r4)
  806f58:	25400104 	addi	r21,r4,4
  806f5c:	10c00115 	stw	r3,4(r2)
  806f60:	14800015 	stw	r18,0(r2)
  806f64:	003f6806 	br	806d08 <__svfscanf_r+0xa98>
  806f68:	d8c09c17 	ldw	r3,624(sp)
  806f6c:	b009883a 	mov	r4,r22
  806f70:	000d883a 	mov	r6,zero
  806f74:	19400044 	addi	r5,r3,1
  806f78:	01c00284 	movi	r7,10
  806f7c:	080c2600 	call	80c260 <_strtol_r>
  806f80:	d9009d17 	ldw	r4,628(sp)
  806f84:	110dc83a 	sub	r6,r2,r4
  806f88:	d8c0a617 	ldw	r3,664(sp)
  806f8c:	d9009c17 	ldw	r4,624(sp)
  806f90:	188054c4 	addi	r2,r3,339
  806f94:	20800236 	bltu	r4,r2,806fa0 <__svfscanf_r+0xd30>
  806f98:	18805484 	addi	r2,r3,338
  806f9c:	d8809c15 	stw	r2,624(sp)
  806fa0:	d9009c17 	ldw	r4,624(sp)
  806fa4:	01402074 	movhi	r5,129
  806fa8:	2953ab04 	addi	r5,r5,20140
  806fac:	0803fa00 	call	803fa0 <sprintf>
  806fb0:	003f4706 	br	806cd0 <__svfscanf_r+0xa60>
  806fb4:	d8c09e17 	ldw	r3,632(sp)
  806fb8:	d9009f17 	ldw	r4,636(sp)
  806fbc:	1905c83a 	sub	r2,r3,r4
  806fc0:	103f4326 	beq	r2,zero,806cd0 <__svfscanf_r+0xa60>
  806fc4:	008dc83a 	sub	r6,zero,r2
  806fc8:	ddc09c15 	stw	r23,624(sp)
  806fcc:	003fee06 	br	806f88 <__svfscanf_r+0xd18>
  806fd0:	d880a417 	ldw	r2,656(sp)
  806fd4:	9009883a 	mov	r4,r18
  806fd8:	180b883a 	mov	r5,r3
  806fdc:	15c00017 	ldw	r23,0(r2)
  806fe0:	15400104 	addi	r21,r2,4
  806fe4:	080aa400 	call	80aa40 <__isnand>
  806fe8:	10021c1e 	bne	r2,zero,80785c <__svfscanf_r+0x15ec>
  806fec:	980b883a 	mov	r5,r19
  806ff0:	9009883a 	mov	r4,r18
  806ff4:	080fa440 	call	80fa44 <__truncdfsf2>
  806ff8:	b8800015 	stw	r2,0(r23)
  806ffc:	003f4206 	br	806d08 <__svfscanf_r+0xa98>
  807000:	e0c03fcc 	andi	r3,fp,255
  807004:	18c0201c 	xori	r3,r3,128
  807008:	18ffe004 	addi	r3,r3,-128
  80700c:	008001c4 	movi	r2,7
  807010:	18beef1e 	bne	r3,r2,806bd0 <__svfscanf_r+0x960>
  807014:	07000204 	movi	fp,8
  807018:	003edf06 	br	806b98 <__svfscanf_r+0x928>
  80701c:	d900a317 	ldw	r4,652(sp)
  807020:	208002a4 	muli	r2,r4,10
  807024:	1145883a 	add	r2,r2,r5
  807028:	10bff404 	addi	r2,r2,-48
  80702c:	d880a315 	stw	r2,652(sp)
  807030:	003ceb06 	br	8063e0 <__svfscanf_r+0x170>
  807034:	9880040c 	andi	r2,r19,16
  807038:	10001426 	beq	r2,zero,80708c <__svfscanf_r+0xe1c>
  80703c:	0027883a 	mov	r19,zero
  807040:	00000906 	br	807068 <__svfscanf_r+0xdf8>
  807044:	80c00117 	ldw	r3,4(r16)
  807048:	d880a317 	ldw	r2,652(sp)
  80704c:	29800044 	addi	r6,r5,1
  807050:	18ffffc4 	addi	r3,r3,-1
  807054:	9cc00044 	addi	r19,r19,1
  807058:	81800015 	stw	r6,0(r16)
  80705c:	80c00115 	stw	r3,4(r16)
  807060:	14fdf726 	beq	r2,r19,806840 <__svfscanf_r+0x5d0>
  807064:	00c02c0e 	bge	zero,r3,807118 <__svfscanf_r+0xea8>
  807068:	81400017 	ldw	r5,0(r16)
  80706c:	90800017 	ldw	r2,0(r18)
  807070:	28c00003 	ldbu	r3,0(r5)
  807074:	1887883a 	add	r3,r3,r2
  807078:	19000003 	ldbu	r4,0(r3)
  80707c:	2100020c 	andi	r4,r4,8
  807080:	203ff026 	beq	r4,zero,807044 <__svfscanf_r+0xdd4>
  807084:	8ce3883a 	add	r17,r17,r19
  807088:	003c8c06 	br	8062bc <__svfscanf_r+0x4c>
  80708c:	d8c0a417 	ldw	r3,656(sp)
  807090:	1d400017 	ldw	r21,0(r3)
  807094:	a827883a 	mov	r19,r21
  807098:	00000e06 	br	8070d4 <__svfscanf_r+0xe64>
  80709c:	80800117 	ldw	r2,4(r16)
  8070a0:	d900a317 	ldw	r4,652(sp)
  8070a4:	29800044 	addi	r6,r5,1
  8070a8:	10ffffc4 	addi	r3,r2,-1
  8070ac:	213fffc4 	addi	r4,r4,-1
  8070b0:	d900a315 	stw	r4,652(sp)
  8070b4:	80c00115 	stw	r3,4(r16)
  8070b8:	28800003 	ldbu	r2,0(r5)
  8070bc:	98800005 	stb	r2,0(r19)
  8070c0:	81800015 	stw	r6,0(r16)
  8070c4:	9cc00044 	addi	r19,r19,1
  8070c8:	20000926 	beq	r4,zero,8070f0 <__svfscanf_r+0xe80>
  8070cc:	80800117 	ldw	r2,4(r16)
  8070d0:	0080170e 	bge	zero,r2,807130 <__svfscanf_r+0xec0>
  8070d4:	81400017 	ldw	r5,0(r16)
  8070d8:	90800017 	ldw	r2,0(r18)
  8070dc:	28c00003 	ldbu	r3,0(r5)
  8070e0:	1887883a 	add	r3,r3,r2
  8070e4:	19000003 	ldbu	r4,0(r3)
  8070e8:	2100020c 	andi	r4,r4,8
  8070ec:	203feb26 	beq	r4,zero,80709c <__svfscanf_r+0xe2c>
  8070f0:	9d45c83a 	sub	r2,r19,r21
  8070f4:	d8c0a217 	ldw	r3,648(sp)
  8070f8:	88a3883a 	add	r17,r17,r2
  8070fc:	d880a417 	ldw	r2,656(sp)
  807100:	18c00044 	addi	r3,r3,1
  807104:	d8c0a215 	stw	r3,648(sp)
  807108:	10800104 	addi	r2,r2,4
  80710c:	d880a415 	stw	r2,656(sp)
  807110:	98000005 	stb	zero,0(r19)
  807114:	003c6906 	br	8062bc <__svfscanf_r+0x4c>
  807118:	b009883a 	mov	r4,r22
  80711c:	800b883a 	mov	r5,r16
  807120:	0803cf00 	call	803cf0 <__srefill_r>
  807124:	103fd026 	beq	r2,zero,807068 <__svfscanf_r+0xdf8>
  807128:	8ce3883a 	add	r17,r17,r19
  80712c:	003c6306 	br	8062bc <__svfscanf_r+0x4c>
  807130:	b009883a 	mov	r4,r22
  807134:	800b883a 	mov	r5,r16
  807138:	0803cf00 	call	803cf0 <__srefill_r>
  80713c:	103fe526 	beq	r2,zero,8070d4 <__svfscanf_r+0xe64>
  807140:	003feb06 	br	8070f0 <__svfscanf_r+0xe80>
  807144:	d900a317 	ldw	r4,652(sp)
  807148:	9d41e014 	ori	r21,r19,1920
  80714c:	2000821e 	bne	r4,zero,807358 <__svfscanf_r+0x10e8>
  807150:	d8c04404 	addi	r3,sp,272
  807154:	182f883a 	mov	r23,r3
  807158:	0039883a 	mov	fp,zero
  80715c:	d8c0a615 	stw	r3,664(sp)
  807160:	d8009c15 	stw	zero,624(sp)
  807164:	d8009d15 	stw	zero,628(sp)
  807168:	d8009f15 	stw	zero,636(sp)
  80716c:	d8009e15 	stw	zero,632(sp)
  807170:	003e9e06 	br	806bec <__svfscanf_r+0x97c>
  807174:	d900a317 	ldw	r4,652(sp)
  807178:	9c836014 	ori	r18,r19,3456
  80717c:	2000161e 	bne	r4,zero,8071d8 <__svfscanf_r+0xf68>
  807180:	d8804404 	addi	r2,sp,272
  807184:	d880a615 	stw	r2,664(sp)
  807188:	002f883a 	mov	r23,zero
  80718c:	1027883a 	mov	r19,r2
  807190:	9080400c 	andi	r2,r18,256
  807194:	10000926 	beq	r2,zero,8071bc <__svfscanf_r+0xf4c>
  807198:	d8c0a617 	ldw	r3,664(sp)
  80719c:	1cc0052e 	bgeu	r3,r19,8071b4 <__svfscanf_r+0xf44>
  8071a0:	9cffffc4 	addi	r19,r19,-1
  8071a4:	99400007 	ldb	r5,0(r19)
  8071a8:	b009883a 	mov	r4,r22
  8071ac:	800d883a 	mov	r6,r16
  8071b0:	080ce000 	call	80ce00 <_ungetc_r>
  8071b4:	d900a617 	ldw	r4,664(sp)
  8071b8:	24fc6226 	beq	r4,r19,806344 <__svfscanf_r+0xd4>
  8071bc:	9080040c 	andi	r2,r18,16
  8071c0:	10006726 	beq	r2,zero,807360 <__svfscanf_r+0x10f0>
  8071c4:	d8c0a617 	ldw	r3,664(sp)
  8071c8:	98c5c83a 	sub	r2,r19,r3
  8071cc:	b885883a 	add	r2,r23,r2
  8071d0:	88a3883a 	add	r17,r17,r2
  8071d4:	003c3906 	br	8062bc <__svfscanf_r+0x4c>
  8071d8:	002b883a 	mov	r21,zero
  8071dc:	d8c04404 	addi	r3,sp,272
  8071e0:	d8c0a615 	stw	r3,664(sp)
  8071e4:	002f883a 	mov	r23,zero
  8071e8:	1827883a 	mov	r19,r3
  8071ec:	81800017 	ldw	r6,0(r16)
  8071f0:	00c01344 	movi	r3,77
  8071f4:	31400003 	ldbu	r5,0(r6)
  8071f8:	28bff544 	addi	r2,r5,-43
  8071fc:	10803fcc 	andi	r2,r2,255
  807200:	18bfe336 	bltu	r3,r2,807190 <__svfscanf_r+0xf20>
  807204:	1085883a 	add	r2,r2,r2
  807208:	1085883a 	add	r2,r2,r2
  80720c:	00c02034 	movhi	r3,128
  807210:	18dc8804 	addi	r3,r3,29216
  807214:	10c5883a 	add	r2,r2,r3
  807218:	11000017 	ldw	r4,0(r2)
  80721c:	2000683a 	jmp	r4
  807220:	008073b4 	movhi	r2,462
  807224:	00807190 	cmplti	r2,zero,454
  807228:	008073b4 	movhi	r2,462
  80722c:	00807190 	cmplti	r2,zero,454
  807230:	00807190 	cmplti	r2,zero,454
  807234:	008073f8 	rdprs	r2,zero,463
  807238:	008074f4 	movhi	r2,467
  80723c:	008074f4 	movhi	r2,467
  807240:	008074f4 	movhi	r2,467
  807244:	008074f4 	movhi	r2,467
  807248:	008074f4 	movhi	r2,467
  80724c:	008074f4 	movhi	r2,467
  807250:	008074f4 	movhi	r2,467
  807254:	0080751c 	xori	r2,zero,468
  807258:	0080751c 	xori	r2,zero,468
  80725c:	00807190 	cmplti	r2,zero,454
  807260:	00807190 	cmplti	r2,zero,454
  807264:	00807190 	cmplti	r2,zero,454
  807268:	00807190 	cmplti	r2,zero,454
  80726c:	00807190 	cmplti	r2,zero,454
  807270:	00807190 	cmplti	r2,zero,454
  807274:	00807190 	cmplti	r2,zero,454
  807278:	0080754c 	andi	r2,zero,469
  80727c:	0080754c 	andi	r2,zero,469
  807280:	0080754c 	andi	r2,zero,469
  807284:	0080754c 	andi	r2,zero,469
  807288:	0080754c 	andi	r2,zero,469
  80728c:	0080754c 	andi	r2,zero,469
  807290:	00807190 	cmplti	r2,zero,454
  807294:	00807190 	cmplti	r2,zero,454
  807298:	00807190 	cmplti	r2,zero,454
  80729c:	00807190 	cmplti	r2,zero,454
  8072a0:	00807190 	cmplti	r2,zero,454
  8072a4:	00807190 	cmplti	r2,zero,454
  8072a8:	00807190 	cmplti	r2,zero,454
  8072ac:	00807190 	cmplti	r2,zero,454
  8072b0:	00807190 	cmplti	r2,zero,454
  8072b4:	00807190 	cmplti	r2,zero,454
  8072b8:	00807190 	cmplti	r2,zero,454
  8072bc:	00807190 	cmplti	r2,zero,454
  8072c0:	00807190 	cmplti	r2,zero,454
  8072c4:	00807190 	cmplti	r2,zero,454
  8072c8:	00807190 	cmplti	r2,zero,454
  8072cc:	00807190 	cmplti	r2,zero,454
  8072d0:	00807190 	cmplti	r2,zero,454
  8072d4:	0080755c 	xori	r2,zero,469
  8072d8:	00807190 	cmplti	r2,zero,454
  8072dc:	00807190 	cmplti	r2,zero,454
  8072e0:	00807190 	cmplti	r2,zero,454
  8072e4:	00807190 	cmplti	r2,zero,454
  8072e8:	00807190 	cmplti	r2,zero,454
  8072ec:	00807190 	cmplti	r2,zero,454
  8072f0:	00807190 	cmplti	r2,zero,454
  8072f4:	00807190 	cmplti	r2,zero,454
  8072f8:	0080754c 	andi	r2,zero,469
  8072fc:	0080754c 	andi	r2,zero,469
  807300:	0080754c 	andi	r2,zero,469
  807304:	0080754c 	andi	r2,zero,469
  807308:	0080754c 	andi	r2,zero,469
  80730c:	0080754c 	andi	r2,zero,469
  807310:	00807190 	cmplti	r2,zero,454
  807314:	00807190 	cmplti	r2,zero,454
  807318:	00807190 	cmplti	r2,zero,454
  80731c:	00807190 	cmplti	r2,zero,454
  807320:	00807190 	cmplti	r2,zero,454
  807324:	00807190 	cmplti	r2,zero,454
  807328:	00807190 	cmplti	r2,zero,454
  80732c:	00807190 	cmplti	r2,zero,454
  807330:	00807190 	cmplti	r2,zero,454
  807334:	00807190 	cmplti	r2,zero,454
  807338:	00807190 	cmplti	r2,zero,454
  80733c:	00807190 	cmplti	r2,zero,454
  807340:	00807190 	cmplti	r2,zero,454
  807344:	00807190 	cmplti	r2,zero,454
  807348:	00807190 	cmplti	r2,zero,454
  80734c:	00807190 	cmplti	r2,zero,454
  807350:	00807190 	cmplti	r2,zero,454
  807354:	0080755c 	xori	r2,zero,469
  807358:	000d883a 	mov	r6,zero
  80735c:	003d9006 	br	8069a0 <__svfscanf_r+0x730>
  807360:	98000005 	stb	zero,0(r19)
  807364:	d8c0a017 	ldw	r3,640(sp)
  807368:	d940a617 	ldw	r5,664(sp)
  80736c:	d9c0a117 	ldw	r7,644(sp)
  807370:	b009883a 	mov	r4,r22
  807374:	000d883a 	mov	r6,zero
  807378:	183ee83a 	callr	r3
  80737c:	1007883a 	mov	r3,r2
  807380:	9080080c 	andi	r2,r18,32
  807384:	10004d1e 	bne	r2,zero,8074bc <__svfscanf_r+0x124c>
  807388:	9080010c 	andi	r2,r18,4
  80738c:	10003426 	beq	r2,zero,807460 <__svfscanf_r+0x11f0>
  807390:	d900a417 	ldw	r4,656(sp)
  807394:	20800017 	ldw	r2,0(r4)
  807398:	21000104 	addi	r4,r4,4
  80739c:	d900a415 	stw	r4,656(sp)
  8073a0:	10c0000d 	sth	r3,0(r2)
  8073a4:	d880a217 	ldw	r2,648(sp)
  8073a8:	10800044 	addi	r2,r2,1
  8073ac:	d880a215 	stw	r2,648(sp)
  8073b0:	003f8406 	br	8071c4 <__svfscanf_r+0xf54>
  8073b4:	9080200c 	andi	r2,r18,128
  8073b8:	103f7526 	beq	r2,zero,807190 <__svfscanf_r+0xf20>
  8073bc:	00bfdfc4 	movi	r2,-129
  8073c0:	90a4703a 	and	r18,r18,r2
  8073c4:	99400005 	stb	r5,0(r19)
  8073c8:	9cc00044 	addi	r19,r19,1
  8073cc:	80c00117 	ldw	r3,4(r16)
  8073d0:	18ffffc4 	addi	r3,r3,-1
  8073d4:	80c00115 	stw	r3,4(r16)
  8073d8:	00c0130e 	bge	zero,r3,807428 <__svfscanf_r+0x11b8>
  8073dc:	31800044 	addi	r6,r6,1
  8073e0:	81800015 	stw	r6,0(r16)
  8073e4:	d880a317 	ldw	r2,652(sp)
  8073e8:	10bfffc4 	addi	r2,r2,-1
  8073ec:	d880a315 	stw	r2,652(sp)
  8073f0:	103f7e1e 	bne	r2,zero,8071ec <__svfscanf_r+0xf7c>
  8073f4:	003f6606 	br	807190 <__svfscanf_r+0xf20>
  8073f8:	9082000c 	andi	r2,r18,2048
  8073fc:	103ff126 	beq	r2,zero,8073c4 <__svfscanf_r+0x1154>
  807400:	d8c0a117 	ldw	r3,644(sp)
  807404:	1800031e 	bne	r3,zero,807414 <__svfscanf_r+0x11a4>
  807408:	01000204 	movi	r4,8
  80740c:	94808014 	ori	r18,r18,512
  807410:	d900a115 	stw	r4,644(sp)
  807414:	9081000c 	andi	r2,r18,1024
  807418:	10000826 	beq	r2,zero,80743c <__svfscanf_r+0x11cc>
  80741c:	00be9fc4 	movi	r2,-1409
  807420:	90a4703a 	and	r18,r18,r2
  807424:	003fe706 	br	8073c4 <__svfscanf_r+0x1154>
  807428:	b009883a 	mov	r4,r22
  80742c:	800b883a 	mov	r5,r16
  807430:	0803cf00 	call	803cf0 <__srefill_r>
  807434:	103feb26 	beq	r2,zero,8073e4 <__svfscanf_r+0x1174>
  807438:	003f5506 	br	807190 <__svfscanf_r+0xf20>
  80743c:	a8000426 	beq	r21,zero,807450 <__svfscanf_r+0x11e0>
  807440:	d880a317 	ldw	r2,652(sp)
  807444:	ad7fffc4 	addi	r21,r21,-1
  807448:	10800044 	addi	r2,r2,1
  80744c:	d880a315 	stw	r2,652(sp)
  807450:	00bf1fc4 	movi	r2,-897
  807454:	90a4703a 	and	r18,r18,r2
  807458:	bdc00044 	addi	r23,r23,1
  80745c:	003fdb06 	br	8073cc <__svfscanf_r+0x115c>
  807460:	9080004c 	andi	r2,r18,1
  807464:	1005003a 	cmpeq	r2,r2,zero
  807468:	10001426 	beq	r2,zero,8074bc <__svfscanf_r+0x124c>
  80746c:	9080008c 	andi	r2,r18,2
  807470:	10001226 	beq	r2,zero,8074bc <__svfscanf_r+0x124c>
  807474:	d8c0a017 	ldw	r3,640(sp)
  807478:	00802074 	movhi	r2,129
  80747c:	10b1f804 	addi	r2,r2,-14368
  807480:	18801426 	beq	r3,r2,8074d4 <__svfscanf_r+0x1264>
  807484:	d9c0a117 	ldw	r7,644(sp)
  807488:	d940a617 	ldw	r5,664(sp)
  80748c:	000d883a 	mov	r6,zero
  807490:	b009883a 	mov	r4,r22
  807494:	080c4c80 	call	80c4c8 <_strtoll_r>
  807498:	100d883a 	mov	r6,r2
  80749c:	180f883a 	mov	r7,r3
  8074a0:	d900a417 	ldw	r4,656(sp)
  8074a4:	20800017 	ldw	r2,0(r4)
  8074a8:	21000104 	addi	r4,r4,4
  8074ac:	d900a415 	stw	r4,656(sp)
  8074b0:	11c00115 	stw	r7,4(r2)
  8074b4:	11800015 	stw	r6,0(r2)
  8074b8:	003fba06 	br	8073a4 <__svfscanf_r+0x1134>
  8074bc:	d900a417 	ldw	r4,656(sp)
  8074c0:	20800017 	ldw	r2,0(r4)
  8074c4:	21000104 	addi	r4,r4,4
  8074c8:	d900a415 	stw	r4,656(sp)
  8074cc:	10c00015 	stw	r3,0(r2)
  8074d0:	003fb406 	br	8073a4 <__svfscanf_r+0x1134>
  8074d4:	d9c0a117 	ldw	r7,644(sp)
  8074d8:	d940a617 	ldw	r5,664(sp)
  8074dc:	000d883a 	mov	r6,zero
  8074e0:	b009883a 	mov	r4,r22
  8074e4:	080ca340 	call	80ca34 <_strtoull_r>
  8074e8:	100d883a 	mov	r6,r2
  8074ec:	180f883a 	mov	r7,r3
  8074f0:	003feb06 	br	8074a0 <__svfscanf_r+0x1230>
  8074f4:	d8c0a117 	ldw	r3,644(sp)
  8074f8:	18c5883a 	add	r2,r3,r3
  8074fc:	00c02074 	movhi	r3,129
  807500:	18d3ad04 	addi	r3,r3,20148
  807504:	10c5883a 	add	r2,r2,r3
  807508:	1080000f 	ldh	r2,0(r2)
  80750c:	00fd1fc4 	movi	r3,-2945
  807510:	90e4703a 	and	r18,r18,r3
  807514:	d880a115 	stw	r2,644(sp)
  807518:	003faa06 	br	8073c4 <__svfscanf_r+0x1154>
  80751c:	d900a117 	ldw	r4,644(sp)
  807520:	00c02074 	movhi	r3,129
  807524:	18d3ad04 	addi	r3,r3,20148
  807528:	2105883a 	add	r2,r4,r4
  80752c:	10c5883a 	add	r2,r2,r3
  807530:	1080000f 	ldh	r2,0(r2)
  807534:	00c00204 	movi	r3,8
  807538:	d880a115 	stw	r2,644(sp)
  80753c:	18bf140e 	bge	r3,r2,807190 <__svfscanf_r+0xf20>
  807540:	00bd1fc4 	movi	r2,-2945
  807544:	90a4703a 	and	r18,r18,r2
  807548:	003f9e06 	br	8073c4 <__svfscanf_r+0x1154>
  80754c:	d8c0a117 	ldw	r3,644(sp)
  807550:	00800284 	movi	r2,10
  807554:	10fffa16 	blt	r2,r3,807540 <__svfscanf_r+0x12d0>
  807558:	003f0d06 	br	807190 <__svfscanf_r+0xf20>
  80755c:	90c1800c 	andi	r3,r18,1536
  807560:	00808004 	movi	r2,512
  807564:	18bf0a1e 	bne	r3,r2,807190 <__svfscanf_r+0xf20>
  807568:	00bf7fc4 	movi	r2,-513
  80756c:	9084703a 	and	r2,r18,r2
  807570:	01000404 	movi	r4,16
  807574:	14814014 	ori	r18,r2,1280
  807578:	d900a115 	stw	r4,644(sp)
  80757c:	003f9106 	br	8073c4 <__svfscanf_r+0x1154>
  807580:	d880a417 	ldw	r2,656(sp)
  807584:	dd400404 	addi	r21,sp,16
  807588:	14800017 	ldw	r18,0(r2)
  80758c:	9027883a 	mov	r19,r18
  807590:	81000017 	ldw	r4,0(r16)
  807594:	20800003 	ldbu	r2,0(r4)
  807598:	a885883a 	add	r2,r21,r2
  80759c:	10c00007 	ldb	r3,0(r2)
  8075a0:	18001426 	beq	r3,zero,8075f4 <__svfscanf_r+0x1384>
  8075a4:	d8c0a317 	ldw	r3,652(sp)
  8075a8:	80800117 	ldw	r2,4(r16)
  8075ac:	21800044 	addi	r6,r4,1
  8075b0:	18ffffc4 	addi	r3,r3,-1
  8075b4:	d8c0a315 	stw	r3,652(sp)
  8075b8:	10ffffc4 	addi	r3,r2,-1
  8075bc:	80c00115 	stw	r3,4(r16)
  8075c0:	20800003 	ldbu	r2,0(r4)
  8075c4:	90800005 	stb	r2,0(r18)
  8075c8:	d900a317 	ldw	r4,652(sp)
  8075cc:	81800015 	stw	r6,0(r16)
  8075d0:	94800044 	addi	r18,r18,1
  8075d4:	20000726 	beq	r4,zero,8075f4 <__svfscanf_r+0x1384>
  8075d8:	80800117 	ldw	r2,4(r16)
  8075dc:	00bfec16 	blt	zero,r2,807590 <__svfscanf_r+0x1320>
  8075e0:	b009883a 	mov	r4,r22
  8075e4:	800b883a 	mov	r5,r16
  8075e8:	0803cf00 	call	803cf0 <__srefill_r>
  8075ec:	103fe826 	beq	r2,zero,807590 <__svfscanf_r+0x1320>
  8075f0:	9cbb7426 	beq	r19,r18,8063c4 <__svfscanf_r+0x154>
  8075f4:	94e7c83a 	sub	r19,r18,r19
  8075f8:	983b5226 	beq	r19,zero,806344 <__svfscanf_r+0xd4>
  8075fc:	90000005 	stb	zero,0(r18)
  807600:	d880a417 	ldw	r2,656(sp)
  807604:	d8c0a217 	ldw	r3,648(sp)
  807608:	8ce3883a 	add	r17,r17,r19
  80760c:	10800104 	addi	r2,r2,4
  807610:	18c00044 	addi	r3,r3,1
  807614:	d880a415 	stw	r2,656(sp)
  807618:	d8c0a215 	stw	r3,648(sp)
  80761c:	003b2706 	br	8062bc <__svfscanf_r+0x4c>
  807620:	9cc00414 	ori	r19,r19,16
  807624:	003b6e06 	br	8063e0 <__svfscanf_r+0x170>
  807628:	00c00404 	movi	r3,16
  80762c:	01002074 	movhi	r4,129
  807630:	2131f804 	addi	r4,r4,-14368
  807634:	9cc08014 	ori	r19,r19,512
  807638:	054000c4 	movi	r21,3
  80763c:	d8c0a115 	stw	r3,644(sp)
  807640:	d900a015 	stw	r4,640(sp)
  807644:	003bf806 	br	806628 <__svfscanf_r+0x3b8>
  807648:	9880040c 	andi	r2,r19,16
  80764c:	10001926 	beq	r2,zero,8076b4 <__svfscanf_r+0x1444>
  807650:	0027883a 	mov	r19,zero
  807654:	00000b06 	br	807684 <__svfscanf_r+0x1414>
  807658:	80800017 	ldw	r2,0(r16)
  80765c:	b009883a 	mov	r4,r22
  807660:	800b883a 	mov	r5,r16
  807664:	148d883a 	add	r6,r2,r18
  807668:	81800015 	stw	r6,0(r16)
  80766c:	9ca7883a 	add	r19,r19,r18
  807670:	0803cf00 	call	803cf0 <__srefill_r>
  807674:	103c711e 	bne	r2,zero,80683c <__svfscanf_r+0x5cc>
  807678:	d900a317 	ldw	r4,652(sp)
  80767c:	2489c83a 	sub	r4,r4,r18
  807680:	d900a315 	stw	r4,652(sp)
  807684:	84800117 	ldw	r18,4(r16)
  807688:	d8c0a317 	ldw	r3,652(sp)
  80768c:	90fff216 	blt	r18,r3,807658 <__svfscanf_r+0x13e8>
  807690:	d900a317 	ldw	r4,652(sp)
  807694:	80800017 	ldw	r2,0(r16)
  807698:	9927883a 	add	r19,r19,r4
  80769c:	9107c83a 	sub	r3,r18,r4
  8076a0:	110d883a 	add	r6,r2,r4
  8076a4:	8ce3883a 	add	r17,r17,r19
  8076a8:	80c00115 	stw	r3,4(r16)
  8076ac:	81800015 	stw	r6,0(r16)
  8076b0:	003b0206 	br	8062bc <__svfscanf_r+0x4c>
  8076b4:	d880a417 	ldw	r2,656(sp)
  8076b8:	d980a317 	ldw	r6,652(sp)
  8076bc:	01400044 	movi	r5,1
  8076c0:	11000017 	ldw	r4,0(r2)
  8076c4:	800f883a 	mov	r7,r16
  8076c8:	080967c0 	call	80967c <fread>
  8076cc:	103b3d26 	beq	r2,zero,8063c4 <__svfscanf_r+0x154>
  8076d0:	d8c0a417 	ldw	r3,656(sp)
  8076d4:	d900a217 	ldw	r4,648(sp)
  8076d8:	88a3883a 	add	r17,r17,r2
  8076dc:	18c00104 	addi	r3,r3,4
  8076e0:	21000044 	addi	r4,r4,1
  8076e4:	d8c0a415 	stw	r3,656(sp)
  8076e8:	d900a215 	stw	r4,648(sp)
  8076ec:	003af306 	br	8062bc <__svfscanf_r+0x4c>
  8076f0:	8080030b 	ldhu	r2,12(r16)
  8076f4:	1080100c 	andi	r2,r2,64
  8076f8:	103b1226 	beq	r2,zero,806344 <__svfscanf_r+0xd4>
  8076fc:	003b3306 	br	8063cc <__svfscanf_r+0x15c>
  807700:	983b1026 	beq	r19,zero,806344 <__svfscanf_r+0xd4>
  807704:	8ce3883a 	add	r17,r17,r19
  807708:	003aec06 	br	8062bc <__svfscanf_r+0x4c>
  80770c:	983c9626 	beq	r19,zero,806968 <__svfscanf_r+0x6f8>
  807710:	9cffffc4 	addi	r19,r19,-1
  807714:	d8c04404 	addi	r3,sp,272
  807718:	1cc5883a 	add	r2,r3,r19
  80771c:	11400003 	ldbu	r5,0(r2)
  807720:	b009883a 	mov	r4,r22
  807724:	800d883a 	mov	r6,r16
  807728:	080ce000 	call	80ce00 <_ungetc_r>
  80772c:	003ff706 	br	80770c <__svfscanf_r+0x149c>
  807730:	00bfff84 	movi	r2,-2
  807734:	18bc7a1e 	bne	r3,r2,806920 <__svfscanf_r+0x6b0>
  807738:	003c8406 	br	80694c <__svfscanf_r+0x6dc>
  80773c:	d900a417 	ldw	r4,656(sp)
  807740:	25400017 	ldw	r21,0(r4)
  807744:	21000104 	addi	r4,r4,4
  807748:	d900a415 	stw	r4,656(sp)
  80774c:	003c4a06 	br	806878 <__svfscanf_r+0x608>
  807750:	00bfff84 	movi	r2,-2
  807754:	18bc0f1e 	bne	r3,r2,806794 <__svfscanf_r+0x524>
  807758:	003c1506 	br	8067b0 <__svfscanf_r+0x540>
  80775c:	b009883a 	mov	r4,r22
  807760:	800b883a 	mov	r5,r16
  807764:	0803cf00 	call	803cf0 <__srefill_r>
  807768:	103c1326 	beq	r2,zero,8067b8 <__svfscanf_r+0x548>
  80776c:	903b151e 	bne	r18,zero,8063c4 <__svfscanf_r+0x154>
  807770:	a83ad21e 	bne	r21,zero,8062bc <__svfscanf_r+0x4c>
  807774:	d880a217 	ldw	r2,648(sp)
  807778:	10800044 	addi	r2,r2,1
  80777c:	d880a215 	stw	r2,648(sp)
  807780:	003ace06 	br	8062bc <__svfscanf_r+0x4c>
  807784:	0027883a 	mov	r19,zero
  807788:	003bdd06 	br	806700 <__svfscanf_r+0x490>
  80778c:	9cc00114 	ori	r19,r19,4
  807790:	003b1306 	br	8063e0 <__svfscanf_r+0x170>
  807794:	05400104 	movi	r21,4
  807798:	003ba306 	br	806628 <__svfscanf_r+0x3b8>
  80779c:	9cc00054 	ori	r19,r19,1
  8077a0:	00802074 	movhi	r2,129
  8077a4:	10b09804 	addi	r2,r2,-15776
  8077a8:	00c00284 	movi	r3,10
  8077ac:	054000c4 	movi	r21,3
  8077b0:	d880a015 	stw	r2,640(sp)
  8077b4:	d8c0a115 	stw	r3,644(sp)
  8077b8:	003b9b06 	br	806628 <__svfscanf_r+0x3b8>
  8077bc:	9cc01014 	ori	r19,r19,64
  8077c0:	002b883a 	mov	r21,zero
  8077c4:	003b9806 	br	806628 <__svfscanf_r+0x3b8>
  8077c8:	a00b883a 	mov	r5,r20
  8077cc:	d9000404 	addi	r4,sp,16
  8077d0:	080aa700 	call	80aa70 <__sccl>
  8077d4:	1029883a 	mov	r20,r2
  8077d8:	9cc01014 	ori	r19,r19,64
  8077dc:	05400044 	movi	r21,1
  8077e0:	003b9106 	br	806628 <__svfscanf_r+0x3b8>
  8077e4:	9cc00054 	ori	r19,r19,1
  8077e8:	00800204 	movi	r2,8
  8077ec:	00c02074 	movhi	r3,129
  8077f0:	18f1f804 	addi	r3,r3,-14368
  8077f4:	054000c4 	movi	r21,3
  8077f8:	d880a115 	stw	r2,644(sp)
  8077fc:	d8c0a015 	stw	r3,640(sp)
  807800:	003b8906 	br	806628 <__svfscanf_r+0x3b8>
  807804:	9880040c 	andi	r2,r19,16
  807808:	103aac1e 	bne	r2,zero,8062bc <__svfscanf_r+0x4c>
  80780c:	9880010c 	andi	r2,r19,4
  807810:	10002426 	beq	r2,zero,8078a4 <__svfscanf_r+0x1634>
  807814:	d900a417 	ldw	r4,656(sp)
  807818:	20800017 	ldw	r2,0(r4)
  80781c:	21000104 	addi	r4,r4,4
  807820:	d900a415 	stw	r4,656(sp)
  807824:	1440000d 	sth	r17,0(r2)
  807828:	003aa406 	br	8062bc <__svfscanf_r+0x4c>
  80782c:	9cc00094 	ori	r19,r19,2
  807830:	003aeb06 	br	8063e0 <__svfscanf_r+0x170>
  807834:	05400084 	movi	r21,2
  807838:	003b7b06 	br	806628 <__svfscanf_r+0x3b8>
  80783c:	00800404 	movi	r2,16
  807840:	00c02074 	movhi	r3,129
  807844:	18f1f804 	addi	r3,r3,-14368
  807848:	9cc08814 	ori	r19,r19,544
  80784c:	054000c4 	movi	r21,3
  807850:	d880a115 	stw	r2,644(sp)
  807854:	d8c0a015 	stw	r3,640(sp)
  807858:	003b7306 	br	806628 <__svfscanf_r+0x3b8>
  80785c:	0009883a 	mov	r4,zero
  807860:	080ab300 	call	80ab30 <nanf>
  807864:	b8800015 	stw	r2,0(r23)
  807868:	003d2706 	br	806d08 <__svfscanf_r+0xa98>
  80786c:	a0c00007 	ldb	r3,0(r20)
  807870:	00801b04 	movi	r2,108
  807874:	18800826 	beq	r3,r2,807898 <__svfscanf_r+0x1628>
  807878:	9cc00054 	ori	r19,r19,1
  80787c:	003ad806 	br	8063e0 <__svfscanf_r+0x170>
  807880:	01002074 	movhi	r4,129
  807884:	21309804 	addi	r4,r4,-15776
  807888:	054000c4 	movi	r21,3
  80788c:	d900a015 	stw	r4,640(sp)
  807890:	d800a115 	stw	zero,644(sp)
  807894:	003b6406 	br	806628 <__svfscanf_r+0x3b8>
  807898:	a5000044 	addi	r20,r20,1
  80789c:	9cc00094 	ori	r19,r19,2
  8078a0:	003acf06 	br	8063e0 <__svfscanf_r+0x170>
  8078a4:	9880004c 	andi	r2,r19,1
  8078a8:	1005003a 	cmpeq	r2,r2,zero
  8078ac:	10000a26 	beq	r2,zero,8078d8 <__svfscanf_r+0x1668>
  8078b0:	9880008c 	andi	r2,r19,2
  8078b4:	10000826 	beq	r2,zero,8078d8 <__svfscanf_r+0x1668>
  8078b8:	d900a417 	ldw	r4,656(sp)
  8078bc:	8807d7fa 	srai	r3,r17,31
  8078c0:	20800017 	ldw	r2,0(r4)
  8078c4:	21000104 	addi	r4,r4,4
  8078c8:	d900a415 	stw	r4,656(sp)
  8078cc:	14400015 	stw	r17,0(r2)
  8078d0:	10c00115 	stw	r3,4(r2)
  8078d4:	003a7906 	br	8062bc <__svfscanf_r+0x4c>
  8078d8:	d8c0a417 	ldw	r3,656(sp)
  8078dc:	18800017 	ldw	r2,0(r3)
  8078e0:	18c00104 	addi	r3,r3,4
  8078e4:	d8c0a415 	stw	r3,656(sp)
  8078e8:	14400015 	stw	r17,0(r2)
  8078ec:	003a7306 	br	8062bc <__svfscanf_r+0x4c>

008078f0 <__svfscanf>:
  8078f0:	00802074 	movhi	r2,129
  8078f4:	109c4404 	addi	r2,r2,28944
  8078f8:	2013883a 	mov	r9,r4
  8078fc:	11000017 	ldw	r4,0(r2)
  807900:	2805883a 	mov	r2,r5
  807904:	300f883a 	mov	r7,r6
  807908:	480b883a 	mov	r5,r9
  80790c:	100d883a 	mov	r6,r2
  807910:	08062701 	jmpi	806270 <__svfscanf_r>

00807914 <_vfscanf_r>:
  807914:	defffb04 	addi	sp,sp,-20
  807918:	dcc00315 	stw	r19,12(sp)
  80791c:	dc800215 	stw	r18,8(sp)
  807920:	dc400115 	stw	r17,4(sp)
  807924:	dc000015 	stw	r16,0(sp)
  807928:	dfc00415 	stw	ra,16(sp)
  80792c:	2021883a 	mov	r16,r4
  807930:	2823883a 	mov	r17,r5
  807934:	3025883a 	mov	r18,r6
  807938:	3827883a 	mov	r19,r7
  80793c:	20000226 	beq	r4,zero,807948 <_vfscanf_r+0x34>
  807940:	20800e17 	ldw	r2,56(r4)
  807944:	10000b26 	beq	r2,zero,807974 <_vfscanf_r+0x60>
  807948:	8009883a 	mov	r4,r16
  80794c:	880b883a 	mov	r5,r17
  807950:	900d883a 	mov	r6,r18
  807954:	980f883a 	mov	r7,r19
  807958:	dfc00417 	ldw	ra,16(sp)
  80795c:	dcc00317 	ldw	r19,12(sp)
  807960:	dc800217 	ldw	r18,8(sp)
  807964:	dc400117 	ldw	r17,4(sp)
  807968:	dc000017 	ldw	r16,0(sp)
  80796c:	dec00504 	addi	sp,sp,20
  807970:	08062701 	jmpi	806270 <__svfscanf_r>
  807974:	08016000 	call	801600 <__sinit>
  807978:	003ff306 	br	807948 <_vfscanf_r+0x34>

0080797c <vfscanf>:
  80797c:	defffb04 	addi	sp,sp,-20
  807980:	dcc00315 	stw	r19,12(sp)
  807984:	04c02074 	movhi	r19,129
  807988:	9cdc4404 	addi	r19,r19,28944
  80798c:	98c00017 	ldw	r3,0(r19)
  807990:	dc800215 	stw	r18,8(sp)
  807994:	dc400115 	stw	r17,4(sp)
  807998:	dc000015 	stw	r16,0(sp)
  80799c:	dfc00415 	stw	ra,16(sp)
  8079a0:	2021883a 	mov	r16,r4
  8079a4:	2823883a 	mov	r17,r5
  8079a8:	3025883a 	mov	r18,r6
  8079ac:	18000326 	beq	r3,zero,8079bc <vfscanf+0x40>
  8079b0:	18800e17 	ldw	r2,56(r3)
  8079b4:	1809883a 	mov	r4,r3
  8079b8:	10000b26 	beq	r2,zero,8079e8 <vfscanf+0x6c>
  8079bc:	99000017 	ldw	r4,0(r19)
  8079c0:	800b883a 	mov	r5,r16
  8079c4:	880d883a 	mov	r6,r17
  8079c8:	900f883a 	mov	r7,r18
  8079cc:	dfc00417 	ldw	ra,16(sp)
  8079d0:	dcc00317 	ldw	r19,12(sp)
  8079d4:	dc800217 	ldw	r18,8(sp)
  8079d8:	dc400117 	ldw	r17,4(sp)
  8079dc:	dc000017 	ldw	r16,0(sp)
  8079e0:	dec00504 	addi	sp,sp,20
  8079e4:	08062701 	jmpi	806270 <__svfscanf_r>
  8079e8:	08016000 	call	801600 <__sinit>
  8079ec:	003ff306 	br	8079bc <vfscanf+0x40>

008079f0 <_write_r>:
  8079f0:	defffd04 	addi	sp,sp,-12
  8079f4:	dc000015 	stw	r16,0(sp)
  8079f8:	040020b4 	movhi	r16,130
  8079fc:	84239d04 	addi	r16,r16,-29068
  807a00:	dc400115 	stw	r17,4(sp)
  807a04:	80000015 	stw	zero,0(r16)
  807a08:	2023883a 	mov	r17,r4
  807a0c:	2809883a 	mov	r4,r5
  807a10:	300b883a 	mov	r5,r6
  807a14:	380d883a 	mov	r6,r7
  807a18:	dfc00215 	stw	ra,8(sp)
  807a1c:	08117040 	call	811704 <write>
  807a20:	1007883a 	mov	r3,r2
  807a24:	00bfffc4 	movi	r2,-1
  807a28:	18800626 	beq	r3,r2,807a44 <_write_r+0x54>
  807a2c:	1805883a 	mov	r2,r3
  807a30:	dfc00217 	ldw	ra,8(sp)
  807a34:	dc400117 	ldw	r17,4(sp)
  807a38:	dc000017 	ldw	r16,0(sp)
  807a3c:	dec00304 	addi	sp,sp,12
  807a40:	f800283a 	ret
  807a44:	80800017 	ldw	r2,0(r16)
  807a48:	103ff826 	beq	r2,zero,807a2c <_write_r+0x3c>
  807a4c:	88800015 	stw	r2,0(r17)
  807a50:	1805883a 	mov	r2,r3
  807a54:	dfc00217 	ldw	ra,8(sp)
  807a58:	dc400117 	ldw	r17,4(sp)
  807a5c:	dc000017 	ldw	r16,0(sp)
  807a60:	dec00304 	addi	sp,sp,12
  807a64:	f800283a 	ret

00807a68 <__swsetup_r>:
  807a68:	00802074 	movhi	r2,129
  807a6c:	109c4404 	addi	r2,r2,28944
  807a70:	10c00017 	ldw	r3,0(r2)
  807a74:	defffd04 	addi	sp,sp,-12
  807a78:	dc400115 	stw	r17,4(sp)
  807a7c:	dc000015 	stw	r16,0(sp)
  807a80:	dfc00215 	stw	ra,8(sp)
  807a84:	2023883a 	mov	r17,r4
  807a88:	2821883a 	mov	r16,r5
  807a8c:	18000226 	beq	r3,zero,807a98 <__swsetup_r+0x30>
  807a90:	18800e17 	ldw	r2,56(r3)
  807a94:	10001f26 	beq	r2,zero,807b14 <__swsetup_r+0xac>
  807a98:	8100030b 	ldhu	r4,12(r16)
  807a9c:	2080020c 	andi	r2,r4,8
  807aa0:	10002826 	beq	r2,zero,807b44 <__swsetup_r+0xdc>
  807aa4:	81400417 	ldw	r5,16(r16)
  807aa8:	28001d26 	beq	r5,zero,807b20 <__swsetup_r+0xb8>
  807aac:	2080004c 	andi	r2,r4,1
  807ab0:	1005003a 	cmpeq	r2,r2,zero
  807ab4:	10000b26 	beq	r2,zero,807ae4 <__swsetup_r+0x7c>
  807ab8:	2080008c 	andi	r2,r4,2
  807abc:	10001226 	beq	r2,zero,807b08 <__swsetup_r+0xa0>
  807ac0:	0005883a 	mov	r2,zero
  807ac4:	80800215 	stw	r2,8(r16)
  807ac8:	28000b26 	beq	r5,zero,807af8 <__swsetup_r+0x90>
  807acc:	0005883a 	mov	r2,zero
  807ad0:	dfc00217 	ldw	ra,8(sp)
  807ad4:	dc400117 	ldw	r17,4(sp)
  807ad8:	dc000017 	ldw	r16,0(sp)
  807adc:	dec00304 	addi	sp,sp,12
  807ae0:	f800283a 	ret
  807ae4:	80800517 	ldw	r2,20(r16)
  807ae8:	80000215 	stw	zero,8(r16)
  807aec:	0085c83a 	sub	r2,zero,r2
  807af0:	80800615 	stw	r2,24(r16)
  807af4:	283ff51e 	bne	r5,zero,807acc <__swsetup_r+0x64>
  807af8:	2080200c 	andi	r2,r4,128
  807afc:	103ff326 	beq	r2,zero,807acc <__swsetup_r+0x64>
  807b00:	00bfffc4 	movi	r2,-1
  807b04:	003ff206 	br	807ad0 <__swsetup_r+0x68>
  807b08:	80800517 	ldw	r2,20(r16)
  807b0c:	80800215 	stw	r2,8(r16)
  807b10:	003fed06 	br	807ac8 <__swsetup_r+0x60>
  807b14:	1809883a 	mov	r4,r3
  807b18:	08016000 	call	801600 <__sinit>
  807b1c:	003fde06 	br	807a98 <__swsetup_r+0x30>
  807b20:	20c0a00c 	andi	r3,r4,640
  807b24:	00808004 	movi	r2,512
  807b28:	18bfe026 	beq	r3,r2,807aac <__swsetup_r+0x44>
  807b2c:	8809883a 	mov	r4,r17
  807b30:	800b883a 	mov	r5,r16
  807b34:	08029880 	call	802988 <__smakebuf_r>
  807b38:	8100030b 	ldhu	r4,12(r16)
  807b3c:	81400417 	ldw	r5,16(r16)
  807b40:	003fda06 	br	807aac <__swsetup_r+0x44>
  807b44:	2080040c 	andi	r2,r4,16
  807b48:	103fed26 	beq	r2,zero,807b00 <__swsetup_r+0x98>
  807b4c:	2080010c 	andi	r2,r4,4
  807b50:	10001226 	beq	r2,zero,807b9c <__swsetup_r+0x134>
  807b54:	81400c17 	ldw	r5,48(r16)
  807b58:	28000526 	beq	r5,zero,807b70 <__swsetup_r+0x108>
  807b5c:	80801004 	addi	r2,r16,64
  807b60:	28800226 	beq	r5,r2,807b6c <__swsetup_r+0x104>
  807b64:	8809883a 	mov	r4,r17
  807b68:	0801b840 	call	801b84 <_free_r>
  807b6c:	80000c15 	stw	zero,48(r16)
  807b70:	8080030b 	ldhu	r2,12(r16)
  807b74:	81400417 	ldw	r5,16(r16)
  807b78:	80000115 	stw	zero,4(r16)
  807b7c:	10bff6cc 	andi	r2,r2,65499
  807b80:	8080030d 	sth	r2,12(r16)
  807b84:	81400015 	stw	r5,0(r16)
  807b88:	8080030b 	ldhu	r2,12(r16)
  807b8c:	10800214 	ori	r2,r2,8
  807b90:	113fffcc 	andi	r4,r2,65535
  807b94:	8080030d 	sth	r2,12(r16)
  807b98:	003fc306 	br	807aa8 <__swsetup_r+0x40>
  807b9c:	81400417 	ldw	r5,16(r16)
  807ba0:	003ff906 	br	807b88 <__swsetup_r+0x120>

00807ba4 <_close_r>:
  807ba4:	defffd04 	addi	sp,sp,-12
  807ba8:	dc000015 	stw	r16,0(sp)
  807bac:	040020b4 	movhi	r16,130
  807bb0:	84239d04 	addi	r16,r16,-29068
  807bb4:	dc400115 	stw	r17,4(sp)
  807bb8:	80000015 	stw	zero,0(r16)
  807bbc:	2023883a 	mov	r17,r4
  807bc0:	2809883a 	mov	r4,r5
  807bc4:	dfc00215 	stw	ra,8(sp)
  807bc8:	081077c0 	call	81077c <close>
  807bcc:	1007883a 	mov	r3,r2
  807bd0:	00bfffc4 	movi	r2,-1
  807bd4:	18800626 	beq	r3,r2,807bf0 <_close_r+0x4c>
  807bd8:	1805883a 	mov	r2,r3
  807bdc:	dfc00217 	ldw	ra,8(sp)
  807be0:	dc400117 	ldw	r17,4(sp)
  807be4:	dc000017 	ldw	r16,0(sp)
  807be8:	dec00304 	addi	sp,sp,12
  807bec:	f800283a 	ret
  807bf0:	80800017 	ldw	r2,0(r16)
  807bf4:	103ff826 	beq	r2,zero,807bd8 <_close_r+0x34>
  807bf8:	88800015 	stw	r2,0(r17)
  807bfc:	1805883a 	mov	r2,r3
  807c00:	dfc00217 	ldw	ra,8(sp)
  807c04:	dc400117 	ldw	r17,4(sp)
  807c08:	dc000017 	ldw	r16,0(sp)
  807c0c:	dec00304 	addi	sp,sp,12
  807c10:	f800283a 	ret

00807c14 <quorem>:
  807c14:	28c00417 	ldw	r3,16(r5)
  807c18:	20800417 	ldw	r2,16(r4)
  807c1c:	defff604 	addi	sp,sp,-40
  807c20:	ddc00715 	stw	r23,28(sp)
  807c24:	dd400515 	stw	r21,20(sp)
  807c28:	dfc00915 	stw	ra,36(sp)
  807c2c:	df000815 	stw	fp,32(sp)
  807c30:	dd800615 	stw	r22,24(sp)
  807c34:	dd000415 	stw	r20,16(sp)
  807c38:	dcc00315 	stw	r19,12(sp)
  807c3c:	dc800215 	stw	r18,8(sp)
  807c40:	dc400115 	stw	r17,4(sp)
  807c44:	dc000015 	stw	r16,0(sp)
  807c48:	202f883a 	mov	r23,r4
  807c4c:	282b883a 	mov	r21,r5
  807c50:	10c07416 	blt	r2,r3,807e24 <quorem+0x210>
  807c54:	1c7fffc4 	addi	r17,r3,-1
  807c58:	8c45883a 	add	r2,r17,r17
  807c5c:	1085883a 	add	r2,r2,r2
  807c60:	2c000504 	addi	r16,r5,20
  807c64:	24c00504 	addi	r19,r4,20
  807c68:	14ed883a 	add	r22,r2,r19
  807c6c:	80a5883a 	add	r18,r16,r2
  807c70:	b7000017 	ldw	fp,0(r22)
  807c74:	91400017 	ldw	r5,0(r18)
  807c78:	e009883a 	mov	r4,fp
  807c7c:	29400044 	addi	r5,r5,1
  807c80:	080fd880 	call	80fd88 <__udivsi3>
  807c84:	1029883a 	mov	r20,r2
  807c88:	10003c1e 	bne	r2,zero,807d7c <quorem+0x168>
  807c8c:	a80b883a 	mov	r5,r21
  807c90:	b809883a 	mov	r4,r23
  807c94:	0809af00 	call	809af0 <__mcmp>
  807c98:	10002b16 	blt	r2,zero,807d48 <quorem+0x134>
  807c9c:	a5000044 	addi	r20,r20,1
  807ca0:	980f883a 	mov	r7,r19
  807ca4:	0011883a 	mov	r8,zero
  807ca8:	0009883a 	mov	r4,zero
  807cac:	81400017 	ldw	r5,0(r16)
  807cb0:	38c00017 	ldw	r3,0(r7)
  807cb4:	84000104 	addi	r16,r16,4
  807cb8:	28bfffcc 	andi	r2,r5,65535
  807cbc:	2085883a 	add	r2,r4,r2
  807cc0:	11bfffcc 	andi	r6,r2,65535
  807cc4:	193fffcc 	andi	r4,r3,65535
  807cc8:	1004d43a 	srli	r2,r2,16
  807ccc:	280ad43a 	srli	r5,r5,16
  807cd0:	2189c83a 	sub	r4,r4,r6
  807cd4:	2209883a 	add	r4,r4,r8
  807cd8:	1806d43a 	srli	r3,r3,16
  807cdc:	288b883a 	add	r5,r5,r2
  807ce0:	200dd43a 	srai	r6,r4,16
  807ce4:	28bfffcc 	andi	r2,r5,65535
  807ce8:	1887c83a 	sub	r3,r3,r2
  807cec:	1987883a 	add	r3,r3,r6
  807cf0:	3900000d 	sth	r4,0(r7)
  807cf4:	38c0008d 	sth	r3,2(r7)
  807cf8:	2808d43a 	srli	r4,r5,16
  807cfc:	39c00104 	addi	r7,r7,4
  807d00:	1811d43a 	srai	r8,r3,16
  807d04:	943fe92e 	bgeu	r18,r16,807cac <quorem+0x98>
  807d08:	8c45883a 	add	r2,r17,r17
  807d0c:	1085883a 	add	r2,r2,r2
  807d10:	9885883a 	add	r2,r19,r2
  807d14:	10c00017 	ldw	r3,0(r2)
  807d18:	18000b1e 	bne	r3,zero,807d48 <quorem+0x134>
  807d1c:	113fff04 	addi	r4,r2,-4
  807d20:	9900082e 	bgeu	r19,r4,807d44 <quorem+0x130>
  807d24:	10bfff17 	ldw	r2,-4(r2)
  807d28:	10000326 	beq	r2,zero,807d38 <quorem+0x124>
  807d2c:	00000506 	br	807d44 <quorem+0x130>
  807d30:	20800017 	ldw	r2,0(r4)
  807d34:	1000031e 	bne	r2,zero,807d44 <quorem+0x130>
  807d38:	213fff04 	addi	r4,r4,-4
  807d3c:	8c7fffc4 	addi	r17,r17,-1
  807d40:	993ffb36 	bltu	r19,r4,807d30 <quorem+0x11c>
  807d44:	bc400415 	stw	r17,16(r23)
  807d48:	a005883a 	mov	r2,r20
  807d4c:	dfc00917 	ldw	ra,36(sp)
  807d50:	df000817 	ldw	fp,32(sp)
  807d54:	ddc00717 	ldw	r23,28(sp)
  807d58:	dd800617 	ldw	r22,24(sp)
  807d5c:	dd400517 	ldw	r21,20(sp)
  807d60:	dd000417 	ldw	r20,16(sp)
  807d64:	dcc00317 	ldw	r19,12(sp)
  807d68:	dc800217 	ldw	r18,8(sp)
  807d6c:	dc400117 	ldw	r17,4(sp)
  807d70:	dc000017 	ldw	r16,0(sp)
  807d74:	dec00a04 	addi	sp,sp,40
  807d78:	f800283a 	ret
  807d7c:	980f883a 	mov	r7,r19
  807d80:	8011883a 	mov	r8,r16
  807d84:	0013883a 	mov	r9,zero
  807d88:	000d883a 	mov	r6,zero
  807d8c:	40c00017 	ldw	r3,0(r8)
  807d90:	39000017 	ldw	r4,0(r7)
  807d94:	42000104 	addi	r8,r8,4
  807d98:	18bfffcc 	andi	r2,r3,65535
  807d9c:	a085383a 	mul	r2,r20,r2
  807da0:	1806d43a 	srli	r3,r3,16
  807da4:	217fffcc 	andi	r5,r4,65535
  807da8:	3085883a 	add	r2,r6,r2
  807dac:	11bfffcc 	andi	r6,r2,65535
  807db0:	a0c7383a 	mul	r3,r20,r3
  807db4:	1004d43a 	srli	r2,r2,16
  807db8:	298bc83a 	sub	r5,r5,r6
  807dbc:	2a4b883a 	add	r5,r5,r9
  807dc0:	2008d43a 	srli	r4,r4,16
  807dc4:	1887883a 	add	r3,r3,r2
  807dc8:	280dd43a 	srai	r6,r5,16
  807dcc:	18bfffcc 	andi	r2,r3,65535
  807dd0:	2089c83a 	sub	r4,r4,r2
  807dd4:	2189883a 	add	r4,r4,r6
  807dd8:	3900008d 	sth	r4,2(r7)
  807ddc:	3940000d 	sth	r5,0(r7)
  807de0:	180cd43a 	srli	r6,r3,16
  807de4:	39c00104 	addi	r7,r7,4
  807de8:	2013d43a 	srai	r9,r4,16
  807dec:	923fe72e 	bgeu	r18,r8,807d8c <quorem+0x178>
  807df0:	e03fa61e 	bne	fp,zero,807c8c <quorem+0x78>
  807df4:	b0ffff04 	addi	r3,r22,-4
  807df8:	98c0082e 	bgeu	r19,r3,807e1c <quorem+0x208>
  807dfc:	b0bfff17 	ldw	r2,-4(r22)
  807e00:	10000326 	beq	r2,zero,807e10 <quorem+0x1fc>
  807e04:	00000506 	br	807e1c <quorem+0x208>
  807e08:	18800017 	ldw	r2,0(r3)
  807e0c:	1000031e 	bne	r2,zero,807e1c <quorem+0x208>
  807e10:	18ffff04 	addi	r3,r3,-4
  807e14:	8c7fffc4 	addi	r17,r17,-1
  807e18:	98fffb36 	bltu	r19,r3,807e08 <quorem+0x1f4>
  807e1c:	bc400415 	stw	r17,16(r23)
  807e20:	003f9a06 	br	807c8c <quorem+0x78>
  807e24:	0005883a 	mov	r2,zero
  807e28:	003fc806 	br	807d4c <quorem+0x138>

00807e2c <_dtoa_r>:
  807e2c:	22001017 	ldw	r8,64(r4)
  807e30:	deffda04 	addi	sp,sp,-152
  807e34:	dd402115 	stw	r21,132(sp)
  807e38:	dd002015 	stw	r20,128(sp)
  807e3c:	dc801e15 	stw	r18,120(sp)
  807e40:	dc401d15 	stw	r17,116(sp)
  807e44:	dfc02515 	stw	ra,148(sp)
  807e48:	df002415 	stw	fp,144(sp)
  807e4c:	ddc02315 	stw	r23,140(sp)
  807e50:	dd802215 	stw	r22,136(sp)
  807e54:	dcc01f15 	stw	r19,124(sp)
  807e58:	dc001c15 	stw	r16,112(sp)
  807e5c:	d9001615 	stw	r4,88(sp)
  807e60:	3023883a 	mov	r17,r6
  807e64:	2829883a 	mov	r20,r5
  807e68:	d9c01715 	stw	r7,92(sp)
  807e6c:	dc802817 	ldw	r18,160(sp)
  807e70:	302b883a 	mov	r21,r6
  807e74:	40000a26 	beq	r8,zero,807ea0 <_dtoa_r+0x74>
  807e78:	20801117 	ldw	r2,68(r4)
  807e7c:	400b883a 	mov	r5,r8
  807e80:	40800115 	stw	r2,4(r8)
  807e84:	20c01117 	ldw	r3,68(r4)
  807e88:	00800044 	movi	r2,1
  807e8c:	10c4983a 	sll	r2,r2,r3
  807e90:	40800215 	stw	r2,8(r8)
  807e94:	08099940 	call	809994 <_Bfree>
  807e98:	d8c01617 	ldw	r3,88(sp)
  807e9c:	18001015 	stw	zero,64(r3)
  807ea0:	8800a316 	blt	r17,zero,808130 <_dtoa_r+0x304>
  807ea4:	90000015 	stw	zero,0(r18)
  807ea8:	a8dffc2c 	andhi	r3,r21,32752
  807eac:	009ffc34 	movhi	r2,32752
  807eb0:	18809126 	beq	r3,r2,8080f8 <_dtoa_r+0x2cc>
  807eb4:	000d883a 	mov	r6,zero
  807eb8:	000f883a 	mov	r7,zero
  807ebc:	a009883a 	mov	r4,r20
  807ec0:	a80b883a 	mov	r5,r21
  807ec4:	dd001215 	stw	r20,72(sp)
  807ec8:	dd401315 	stw	r21,76(sp)
  807ecc:	080f5cc0 	call	80f5cc <__nedf2>
  807ed0:	1000171e 	bne	r2,zero,807f30 <_dtoa_r+0x104>
  807ed4:	d9802717 	ldw	r6,156(sp)
  807ed8:	00800044 	movi	r2,1
  807edc:	30800015 	stw	r2,0(r6)
  807ee0:	d8802917 	ldw	r2,164(sp)
  807ee4:	10029b26 	beq	r2,zero,808954 <_dtoa_r+0xb28>
  807ee8:	d9002917 	ldw	r4,164(sp)
  807eec:	00802074 	movhi	r2,129
  807ef0:	1093a244 	addi	r2,r2,20105
  807ef4:	10ffffc4 	addi	r3,r2,-1
  807ef8:	20800015 	stw	r2,0(r4)
  807efc:	1805883a 	mov	r2,r3
  807f00:	dfc02517 	ldw	ra,148(sp)
  807f04:	df002417 	ldw	fp,144(sp)
  807f08:	ddc02317 	ldw	r23,140(sp)
  807f0c:	dd802217 	ldw	r22,136(sp)
  807f10:	dd402117 	ldw	r21,132(sp)
  807f14:	dd002017 	ldw	r20,128(sp)
  807f18:	dcc01f17 	ldw	r19,124(sp)
  807f1c:	dc801e17 	ldw	r18,120(sp)
  807f20:	dc401d17 	ldw	r17,116(sp)
  807f24:	dc001c17 	ldw	r16,112(sp)
  807f28:	dec02604 	addi	sp,sp,152
  807f2c:	f800283a 	ret
  807f30:	d9001617 	ldw	r4,88(sp)
  807f34:	d9401217 	ldw	r5,72(sp)
  807f38:	d8800104 	addi	r2,sp,4
  807f3c:	a80d883a 	mov	r6,r21
  807f40:	d9c00204 	addi	r7,sp,8
  807f44:	d8800015 	stw	r2,0(sp)
  807f48:	0809fd00 	call	809fd0 <__d2b>
  807f4c:	d8800715 	stw	r2,28(sp)
  807f50:	a804d53a 	srli	r2,r21,20
  807f54:	1101ffcc 	andi	r4,r2,2047
  807f58:	20008626 	beq	r4,zero,808174 <_dtoa_r+0x348>
  807f5c:	d8c01217 	ldw	r3,72(sp)
  807f60:	00800434 	movhi	r2,16
  807f64:	10bfffc4 	addi	r2,r2,-1
  807f68:	ddc00117 	ldw	r23,4(sp)
  807f6c:	a884703a 	and	r2,r21,r2
  807f70:	1811883a 	mov	r8,r3
  807f74:	124ffc34 	orhi	r9,r2,16368
  807f78:	25bf0044 	addi	r22,r4,-1023
  807f7c:	d8000815 	stw	zero,32(sp)
  807f80:	0005883a 	mov	r2,zero
  807f84:	00cffe34 	movhi	r3,16376
  807f88:	480b883a 	mov	r5,r9
  807f8c:	4009883a 	mov	r4,r8
  807f90:	180f883a 	mov	r7,r3
  807f94:	100d883a 	mov	r6,r2
  807f98:	080ee340 	call	80ee34 <__subdf3>
  807f9c:	0218dbf4 	movhi	r8,25455
  807fa0:	4210d844 	addi	r8,r8,17249
  807fa4:	024ff4f4 	movhi	r9,16339
  807fa8:	4a61e9c4 	addi	r9,r9,-30809
  807fac:	480f883a 	mov	r7,r9
  807fb0:	400d883a 	mov	r6,r8
  807fb4:	180b883a 	mov	r5,r3
  807fb8:	1009883a 	mov	r4,r2
  807fbc:	080ef280 	call	80ef28 <__muldf3>
  807fc0:	0222d874 	movhi	r8,35681
  807fc4:	42322cc4 	addi	r8,r8,-14157
  807fc8:	024ff1f4 	movhi	r9,16327
  807fcc:	4a628a04 	addi	r9,r9,-30168
  807fd0:	480f883a 	mov	r7,r9
  807fd4:	400d883a 	mov	r6,r8
  807fd8:	180b883a 	mov	r5,r3
  807fdc:	1009883a 	mov	r4,r2
  807fe0:	080eeb40 	call	80eeb4 <__adddf3>
  807fe4:	b009883a 	mov	r4,r22
  807fe8:	1021883a 	mov	r16,r2
  807fec:	1823883a 	mov	r17,r3
  807ff0:	080f8740 	call	80f874 <__floatsidf>
  807ff4:	021427f4 	movhi	r8,20639
  807ff8:	421e7ec4 	addi	r8,r8,31227
  807ffc:	024ff4f4 	movhi	r9,16339
  808000:	4a5104c4 	addi	r9,r9,17427
  808004:	480f883a 	mov	r7,r9
  808008:	400d883a 	mov	r6,r8
  80800c:	180b883a 	mov	r5,r3
  808010:	1009883a 	mov	r4,r2
  808014:	080ef280 	call	80ef28 <__muldf3>
  808018:	180f883a 	mov	r7,r3
  80801c:	880b883a 	mov	r5,r17
  808020:	100d883a 	mov	r6,r2
  808024:	8009883a 	mov	r4,r16
  808028:	080eeb40 	call	80eeb4 <__adddf3>
  80802c:	1009883a 	mov	r4,r2
  808030:	180b883a 	mov	r5,r3
  808034:	1021883a 	mov	r16,r2
  808038:	1823883a 	mov	r17,r3
  80803c:	080f96c0 	call	80f96c <__fixdfsi>
  808040:	000d883a 	mov	r6,zero
  808044:	000f883a 	mov	r7,zero
  808048:	8009883a 	mov	r4,r16
  80804c:	880b883a 	mov	r5,r17
  808050:	d8800d15 	stw	r2,52(sp)
  808054:	080f7640 	call	80f764 <__ltdf2>
  808058:	10031716 	blt	r2,zero,808cb8 <_dtoa_r+0xe8c>
  80805c:	d8c00d17 	ldw	r3,52(sp)
  808060:	00800584 	movi	r2,22
  808064:	10c1482e 	bgeu	r2,r3,808588 <_dtoa_r+0x75c>
  808068:	01000044 	movi	r4,1
  80806c:	d9000c15 	stw	r4,48(sp)
  808070:	bd85c83a 	sub	r2,r23,r22
  808074:	11bfffc4 	addi	r6,r2,-1
  808078:	30030b16 	blt	r6,zero,808ca8 <_dtoa_r+0xe7c>
  80807c:	d9800a15 	stw	r6,40(sp)
  808080:	d8001115 	stw	zero,68(sp)
  808084:	d8c00d17 	ldw	r3,52(sp)
  808088:	1802ff16 	blt	r3,zero,808c88 <_dtoa_r+0xe5c>
  80808c:	d9000a17 	ldw	r4,40(sp)
  808090:	d8c00915 	stw	r3,36(sp)
  808094:	d8001015 	stw	zero,64(sp)
  808098:	20c9883a 	add	r4,r4,r3
  80809c:	d9000a15 	stw	r4,40(sp)
  8080a0:	d9001717 	ldw	r4,92(sp)
  8080a4:	00800244 	movi	r2,9
  8080a8:	11004636 	bltu	r2,r4,8081c4 <_dtoa_r+0x398>
  8080ac:	00800144 	movi	r2,5
  8080b0:	11020416 	blt	r2,r4,8088c4 <_dtoa_r+0xa98>
  8080b4:	04400044 	movi	r17,1
  8080b8:	d8c01717 	ldw	r3,92(sp)
  8080bc:	00800144 	movi	r2,5
  8080c0:	10c1ed36 	bltu	r2,r3,808878 <_dtoa_r+0xa4c>
  8080c4:	18c5883a 	add	r2,r3,r3
  8080c8:	1085883a 	add	r2,r2,r2
  8080cc:	00c02074 	movhi	r3,129
  8080d0:	18e03804 	addi	r3,r3,-32544
  8080d4:	10c5883a 	add	r2,r2,r3
  8080d8:	11000017 	ldw	r4,0(r2)
  8080dc:	2000683a 	jmp	r4
  8080e0:	008081cc 	andi	r2,zero,519
  8080e4:	008081cc 	andi	r2,zero,519
  8080e8:	00808bcc 	andi	r2,zero,559
  8080ec:	00808ba4 	muli	r2,zero,558
  8080f0:	00808be8 	cmpgeui	r2,zero,559
  8080f4:	00808bf4 	movhi	r2,559
  8080f8:	d9002717 	ldw	r4,156(sp)
  8080fc:	0089c3c4 	movi	r2,9999
  808100:	20800015 	stw	r2,0(r4)
  808104:	a0001026 	beq	r20,zero,808148 <_dtoa_r+0x31c>
  808108:	00c02074 	movhi	r3,129
  80810c:	18d45a04 	addi	r3,r3,20840
  808110:	d9802917 	ldw	r6,164(sp)
  808114:	303f7926 	beq	r6,zero,807efc <_dtoa_r+0xd0>
  808118:	188000c7 	ldb	r2,3(r3)
  80811c:	190000c4 	addi	r4,r3,3
  808120:	1000101e 	bne	r2,zero,808164 <_dtoa_r+0x338>
  808124:	d8802917 	ldw	r2,164(sp)
  808128:	11000015 	stw	r4,0(r2)
  80812c:	003f7306 	br	807efc <_dtoa_r+0xd0>
  808130:	00a00034 	movhi	r2,32768
  808134:	10bfffc4 	addi	r2,r2,-1
  808138:	00c00044 	movi	r3,1
  80813c:	88aa703a 	and	r21,r17,r2
  808140:	90c00015 	stw	r3,0(r18)
  808144:	003f5806 	br	807ea8 <_dtoa_r+0x7c>
  808148:	00800434 	movhi	r2,16
  80814c:	10bfffc4 	addi	r2,r2,-1
  808150:	a884703a 	and	r2,r21,r2
  808154:	103fec1e 	bne	r2,zero,808108 <_dtoa_r+0x2dc>
  808158:	00c02074 	movhi	r3,129
  80815c:	18d45704 	addi	r3,r3,20828
  808160:	003feb06 	br	808110 <_dtoa_r+0x2e4>
  808164:	d8802917 	ldw	r2,164(sp)
  808168:	19000204 	addi	r4,r3,8
  80816c:	11000015 	stw	r4,0(r2)
  808170:	003f6206 	br	807efc <_dtoa_r+0xd0>
  808174:	ddc00117 	ldw	r23,4(sp)
  808178:	d8800217 	ldw	r2,8(sp)
  80817c:	01000804 	movi	r4,32
  808180:	b8c10c84 	addi	r3,r23,1074
  808184:	18a3883a 	add	r17,r3,r2
  808188:	2441b80e 	bge	r4,r17,80886c <_dtoa_r+0xa40>
  80818c:	00c01004 	movi	r3,64
  808190:	1c47c83a 	sub	r3,r3,r17
  808194:	88bff804 	addi	r2,r17,-32
  808198:	a8c6983a 	sll	r3,r21,r3
  80819c:	a084d83a 	srl	r2,r20,r2
  8081a0:	1888b03a 	or	r4,r3,r2
  8081a4:	080fab80 	call	80fab8 <__floatunsidf>
  8081a8:	1011883a 	mov	r8,r2
  8081ac:	00bf8434 	movhi	r2,65040
  8081b0:	01000044 	movi	r4,1
  8081b4:	10d3883a 	add	r9,r2,r3
  8081b8:	8dbef344 	addi	r22,r17,-1075
  8081bc:	d9000815 	stw	r4,32(sp)
  8081c0:	003f6f06 	br	807f80 <_dtoa_r+0x154>
  8081c4:	d8001715 	stw	zero,92(sp)
  8081c8:	04400044 	movi	r17,1
  8081cc:	00bfffc4 	movi	r2,-1
  8081d0:	00c00044 	movi	r3,1
  8081d4:	d8800e15 	stw	r2,56(sp)
  8081d8:	d8002615 	stw	zero,152(sp)
  8081dc:	d8800f15 	stw	r2,60(sp)
  8081e0:	d8c00b15 	stw	r3,44(sp)
  8081e4:	1021883a 	mov	r16,r2
  8081e8:	d8801617 	ldw	r2,88(sp)
  8081ec:	10001115 	stw	zero,68(r2)
  8081f0:	d8801617 	ldw	r2,88(sp)
  8081f4:	11401117 	ldw	r5,68(r2)
  8081f8:	1009883a 	mov	r4,r2
  8081fc:	0809f140 	call	809f14 <_Balloc>
  808200:	d8c01617 	ldw	r3,88(sp)
  808204:	d8800515 	stw	r2,20(sp)
  808208:	18801015 	stw	r2,64(r3)
  80820c:	00800384 	movi	r2,14
  808210:	14006836 	bltu	r2,r16,8083b4 <_dtoa_r+0x588>
  808214:	8805003a 	cmpeq	r2,r17,zero
  808218:	1000661e 	bne	r2,zero,8083b4 <_dtoa_r+0x588>
  80821c:	d9000d17 	ldw	r4,52(sp)
  808220:	0102300e 	bge	zero,r4,808ae4 <_dtoa_r+0xcb8>
  808224:	208003cc 	andi	r2,r4,15
  808228:	100490fa 	slli	r2,r2,3
  80822c:	2025d13a 	srai	r18,r4,4
  808230:	00c02074 	movhi	r3,129
  808234:	18d46b04 	addi	r3,r3,20908
  808238:	10c5883a 	add	r2,r2,r3
  80823c:	90c0040c 	andi	r3,r18,16
  808240:	14000017 	ldw	r16,0(r2)
  808244:	14400117 	ldw	r17,4(r2)
  808248:	18036a1e 	bne	r3,zero,808ff4 <_dtoa_r+0x11c8>
  80824c:	05800084 	movi	r22,2
  808250:	90001026 	beq	r18,zero,808294 <_dtoa_r+0x468>
  808254:	04c02074 	movhi	r19,129
  808258:	9cd49d04 	addi	r19,r19,21108
  80825c:	9080004c 	andi	r2,r18,1
  808260:	1005003a 	cmpeq	r2,r2,zero
  808264:	1000081e 	bne	r2,zero,808288 <_dtoa_r+0x45c>
  808268:	99800017 	ldw	r6,0(r19)
  80826c:	99c00117 	ldw	r7,4(r19)
  808270:	880b883a 	mov	r5,r17
  808274:	8009883a 	mov	r4,r16
  808278:	080ef280 	call	80ef28 <__muldf3>
  80827c:	1021883a 	mov	r16,r2
  808280:	b5800044 	addi	r22,r22,1
  808284:	1823883a 	mov	r17,r3
  808288:	9025d07a 	srai	r18,r18,1
  80828c:	9cc00204 	addi	r19,r19,8
  808290:	903ff21e 	bne	r18,zero,80825c <_dtoa_r+0x430>
  808294:	a80b883a 	mov	r5,r21
  808298:	a009883a 	mov	r4,r20
  80829c:	880f883a 	mov	r7,r17
  8082a0:	800d883a 	mov	r6,r16
  8082a4:	080f2ec0 	call	80f2ec <__divdf3>
  8082a8:	1029883a 	mov	r20,r2
  8082ac:	182b883a 	mov	r21,r3
  8082b0:	d8c00c17 	ldw	r3,48(sp)
  8082b4:	1805003a 	cmpeq	r2,r3,zero
  8082b8:	1000081e 	bne	r2,zero,8082dc <_dtoa_r+0x4b0>
  8082bc:	0005883a 	mov	r2,zero
  8082c0:	00cffc34 	movhi	r3,16368
  8082c4:	180f883a 	mov	r7,r3
  8082c8:	a009883a 	mov	r4,r20
  8082cc:	a80b883a 	mov	r5,r21
  8082d0:	100d883a 	mov	r6,r2
  8082d4:	080f7640 	call	80f764 <__ltdf2>
  8082d8:	1003fe16 	blt	r2,zero,8092d4 <_dtoa_r+0x14a8>
  8082dc:	b009883a 	mov	r4,r22
  8082e0:	080f8740 	call	80f874 <__floatsidf>
  8082e4:	180b883a 	mov	r5,r3
  8082e8:	1009883a 	mov	r4,r2
  8082ec:	a00d883a 	mov	r6,r20
  8082f0:	a80f883a 	mov	r7,r21
  8082f4:	080ef280 	call	80ef28 <__muldf3>
  8082f8:	0011883a 	mov	r8,zero
  8082fc:	02500734 	movhi	r9,16412
  808300:	1009883a 	mov	r4,r2
  808304:	180b883a 	mov	r5,r3
  808308:	480f883a 	mov	r7,r9
  80830c:	400d883a 	mov	r6,r8
  808310:	080eeb40 	call	80eeb4 <__adddf3>
  808314:	d9000f17 	ldw	r4,60(sp)
  808318:	102d883a 	mov	r22,r2
  80831c:	00bf3034 	movhi	r2,64704
  808320:	18b9883a 	add	fp,r3,r2
  808324:	e02f883a 	mov	r23,fp
  808328:	20028f1e 	bne	r4,zero,808d68 <_dtoa_r+0xf3c>
  80832c:	0005883a 	mov	r2,zero
  808330:	00d00534 	movhi	r3,16404
  808334:	a009883a 	mov	r4,r20
  808338:	a80b883a 	mov	r5,r21
  80833c:	180f883a 	mov	r7,r3
  808340:	100d883a 	mov	r6,r2
  808344:	080ee340 	call	80ee34 <__subdf3>
  808348:	1009883a 	mov	r4,r2
  80834c:	e00f883a 	mov	r7,fp
  808350:	180b883a 	mov	r5,r3
  808354:	b00d883a 	mov	r6,r22
  808358:	1025883a 	mov	r18,r2
  80835c:	1827883a 	mov	r19,r3
  808360:	080f6540 	call	80f654 <__gtdf2>
  808364:	00834f16 	blt	zero,r2,8090a4 <_dtoa_r+0x1278>
  808368:	e0e0003c 	xorhi	r3,fp,32768
  80836c:	9009883a 	mov	r4,r18
  808370:	980b883a 	mov	r5,r19
  808374:	180f883a 	mov	r7,r3
  808378:	b00d883a 	mov	r6,r22
  80837c:	080f7640 	call	80f764 <__ltdf2>
  808380:	1000080e 	bge	r2,zero,8083a4 <_dtoa_r+0x578>
  808384:	0027883a 	mov	r19,zero
  808388:	0025883a 	mov	r18,zero
  80838c:	d8802617 	ldw	r2,152(sp)
  808390:	df000517 	ldw	fp,20(sp)
  808394:	d8000615 	stw	zero,24(sp)
  808398:	0084303a 	nor	r2,zero,r2
  80839c:	d8800d15 	stw	r2,52(sp)
  8083a0:	00019b06 	br	808a10 <_dtoa_r+0xbe4>
  8083a4:	d9801217 	ldw	r6,72(sp)
  8083a8:	d8801317 	ldw	r2,76(sp)
  8083ac:	3029883a 	mov	r20,r6
  8083b0:	102b883a 	mov	r21,r2
  8083b4:	d8c00217 	ldw	r3,8(sp)
  8083b8:	18008516 	blt	r3,zero,8085d0 <_dtoa_r+0x7a4>
  8083bc:	d9000d17 	ldw	r4,52(sp)
  8083c0:	00800384 	movi	r2,14
  8083c4:	11008216 	blt	r2,r4,8085d0 <_dtoa_r+0x7a4>
  8083c8:	200490fa 	slli	r2,r4,3
  8083cc:	d9802617 	ldw	r6,152(sp)
  8083d0:	00c02074 	movhi	r3,129
  8083d4:	18d46b04 	addi	r3,r3,20908
  8083d8:	10c5883a 	add	r2,r2,r3
  8083dc:	14800017 	ldw	r18,0(r2)
  8083e0:	14c00117 	ldw	r19,4(r2)
  8083e4:	30031e16 	blt	r6,zero,809060 <_dtoa_r+0x1234>
  8083e8:	d9000517 	ldw	r4,20(sp)
  8083ec:	d8c00f17 	ldw	r3,60(sp)
  8083f0:	a823883a 	mov	r17,r21
  8083f4:	a021883a 	mov	r16,r20
  8083f8:	192b883a 	add	r21,r3,r4
  8083fc:	2039883a 	mov	fp,r4
  808400:	00000f06 	br	808440 <_dtoa_r+0x614>
  808404:	0005883a 	mov	r2,zero
  808408:	00d00934 	movhi	r3,16420
  80840c:	5009883a 	mov	r4,r10
  808410:	580b883a 	mov	r5,r11
  808414:	180f883a 	mov	r7,r3
  808418:	100d883a 	mov	r6,r2
  80841c:	080ef280 	call	80ef28 <__muldf3>
  808420:	180b883a 	mov	r5,r3
  808424:	000d883a 	mov	r6,zero
  808428:	000f883a 	mov	r7,zero
  80842c:	1009883a 	mov	r4,r2
  808430:	1021883a 	mov	r16,r2
  808434:	1823883a 	mov	r17,r3
  808438:	080f5cc0 	call	80f5cc <__nedf2>
  80843c:	10004526 	beq	r2,zero,808554 <_dtoa_r+0x728>
  808440:	900d883a 	mov	r6,r18
  808444:	980f883a 	mov	r7,r19
  808448:	8009883a 	mov	r4,r16
  80844c:	880b883a 	mov	r5,r17
  808450:	080f2ec0 	call	80f2ec <__divdf3>
  808454:	180b883a 	mov	r5,r3
  808458:	1009883a 	mov	r4,r2
  80845c:	080f96c0 	call	80f96c <__fixdfsi>
  808460:	1009883a 	mov	r4,r2
  808464:	1029883a 	mov	r20,r2
  808468:	080f8740 	call	80f874 <__floatsidf>
  80846c:	180f883a 	mov	r7,r3
  808470:	9009883a 	mov	r4,r18
  808474:	980b883a 	mov	r5,r19
  808478:	100d883a 	mov	r6,r2
  80847c:	080ef280 	call	80ef28 <__muldf3>
  808480:	180f883a 	mov	r7,r3
  808484:	880b883a 	mov	r5,r17
  808488:	8009883a 	mov	r4,r16
  80848c:	100d883a 	mov	r6,r2
  808490:	080ee340 	call	80ee34 <__subdf3>
  808494:	1015883a 	mov	r10,r2
  808498:	a0800c04 	addi	r2,r20,48
  80849c:	e0800005 	stb	r2,0(fp)
  8084a0:	e7000044 	addi	fp,fp,1
  8084a4:	1817883a 	mov	r11,r3
  8084a8:	e57fd61e 	bne	fp,r21,808404 <_dtoa_r+0x5d8>
  8084ac:	500d883a 	mov	r6,r10
  8084b0:	180f883a 	mov	r7,r3
  8084b4:	5009883a 	mov	r4,r10
  8084b8:	180b883a 	mov	r5,r3
  8084bc:	080eeb40 	call	80eeb4 <__adddf3>
  8084c0:	100d883a 	mov	r6,r2
  8084c4:	9009883a 	mov	r4,r18
  8084c8:	980b883a 	mov	r5,r19
  8084cc:	180f883a 	mov	r7,r3
  8084d0:	1021883a 	mov	r16,r2
  8084d4:	1823883a 	mov	r17,r3
  8084d8:	080f7640 	call	80f764 <__ltdf2>
  8084dc:	10000816 	blt	r2,zero,808500 <_dtoa_r+0x6d4>
  8084e0:	980b883a 	mov	r5,r19
  8084e4:	800d883a 	mov	r6,r16
  8084e8:	880f883a 	mov	r7,r17
  8084ec:	9009883a 	mov	r4,r18
  8084f0:	080f5440 	call	80f544 <__eqdf2>
  8084f4:	1000171e 	bne	r2,zero,808554 <_dtoa_r+0x728>
  8084f8:	a080004c 	andi	r2,r20,1
  8084fc:	10001526 	beq	r2,zero,808554 <_dtoa_r+0x728>
  808500:	d8800d17 	ldw	r2,52(sp)
  808504:	d8800415 	stw	r2,16(sp)
  808508:	e009883a 	mov	r4,fp
  80850c:	213fffc4 	addi	r4,r4,-1
  808510:	20c00007 	ldb	r3,0(r4)
  808514:	00800e44 	movi	r2,57
  808518:	1880081e 	bne	r3,r2,80853c <_dtoa_r+0x710>
  80851c:	d8800517 	ldw	r2,20(sp)
  808520:	113ffa1e 	bne	r2,r4,80850c <_dtoa_r+0x6e0>
  808524:	d8c00417 	ldw	r3,16(sp)
  808528:	d9800517 	ldw	r6,20(sp)
  80852c:	00800c04 	movi	r2,48
  808530:	18c00044 	addi	r3,r3,1
  808534:	d8c00415 	stw	r3,16(sp)
  808538:	30800005 	stb	r2,0(r6)
  80853c:	20800003 	ldbu	r2,0(r4)
  808540:	d8c00417 	ldw	r3,16(sp)
  808544:	27000044 	addi	fp,r4,1
  808548:	10800044 	addi	r2,r2,1
  80854c:	d8c00d15 	stw	r3,52(sp)
  808550:	20800005 	stb	r2,0(r4)
  808554:	d9001617 	ldw	r4,88(sp)
  808558:	d9400717 	ldw	r5,28(sp)
  80855c:	08099940 	call	809994 <_Bfree>
  808560:	e0000005 	stb	zero,0(fp)
  808564:	d9800d17 	ldw	r6,52(sp)
  808568:	d8c02717 	ldw	r3,156(sp)
  80856c:	d9002917 	ldw	r4,164(sp)
  808570:	30800044 	addi	r2,r6,1
  808574:	18800015 	stw	r2,0(r3)
  808578:	20029c26 	beq	r4,zero,808fec <_dtoa_r+0x11c0>
  80857c:	d8c00517 	ldw	r3,20(sp)
  808580:	27000015 	stw	fp,0(r4)
  808584:	003e5d06 	br	807efc <_dtoa_r+0xd0>
  808588:	d9800d17 	ldw	r6,52(sp)
  80858c:	00c02074 	movhi	r3,129
  808590:	18d46b04 	addi	r3,r3,20908
  808594:	d9001217 	ldw	r4,72(sp)
  808598:	300490fa 	slli	r2,r6,3
  80859c:	d9401317 	ldw	r5,76(sp)
  8085a0:	10c5883a 	add	r2,r2,r3
  8085a4:	12000017 	ldw	r8,0(r2)
  8085a8:	12400117 	ldw	r9,4(r2)
  8085ac:	400d883a 	mov	r6,r8
  8085b0:	480f883a 	mov	r7,r9
  8085b4:	080f7640 	call	80f764 <__ltdf2>
  8085b8:	1000030e 	bge	r2,zero,8085c8 <_dtoa_r+0x79c>
  8085bc:	d8800d17 	ldw	r2,52(sp)
  8085c0:	10bfffc4 	addi	r2,r2,-1
  8085c4:	d8800d15 	stw	r2,52(sp)
  8085c8:	d8000c15 	stw	zero,48(sp)
  8085cc:	003ea806 	br	808070 <_dtoa_r+0x244>
  8085d0:	d9000b17 	ldw	r4,44(sp)
  8085d4:	202cc03a 	cmpne	r22,r4,zero
  8085d8:	b000c71e 	bne	r22,zero,8088f8 <_dtoa_r+0xacc>
  8085dc:	dc001117 	ldw	r16,68(sp)
  8085e0:	dc801017 	ldw	r18,64(sp)
  8085e4:	0027883a 	mov	r19,zero
  8085e8:	04000b0e 	bge	zero,r16,808618 <_dtoa_r+0x7ec>
  8085ec:	d8c00a17 	ldw	r3,40(sp)
  8085f0:	00c0090e 	bge	zero,r3,808618 <_dtoa_r+0x7ec>
  8085f4:	8005883a 	mov	r2,r16
  8085f8:	1c011316 	blt	r3,r16,808a48 <_dtoa_r+0xc1c>
  8085fc:	d9000a17 	ldw	r4,40(sp)
  808600:	d9801117 	ldw	r6,68(sp)
  808604:	80a1c83a 	sub	r16,r16,r2
  808608:	2089c83a 	sub	r4,r4,r2
  80860c:	308dc83a 	sub	r6,r6,r2
  808610:	d9000a15 	stw	r4,40(sp)
  808614:	d9801115 	stw	r6,68(sp)
  808618:	d8801017 	ldw	r2,64(sp)
  80861c:	0080150e 	bge	zero,r2,808674 <_dtoa_r+0x848>
  808620:	d8c00b17 	ldw	r3,44(sp)
  808624:	1805003a 	cmpeq	r2,r3,zero
  808628:	1001c91e 	bne	r2,zero,808d50 <_dtoa_r+0xf24>
  80862c:	04800e0e 	bge	zero,r18,808668 <_dtoa_r+0x83c>
  808630:	d9001617 	ldw	r4,88(sp)
  808634:	980b883a 	mov	r5,r19
  808638:	900d883a 	mov	r6,r18
  80863c:	080a7480 	call	80a748 <__pow5mult>
  808640:	d9001617 	ldw	r4,88(sp)
  808644:	d9800717 	ldw	r6,28(sp)
  808648:	100b883a 	mov	r5,r2
  80864c:	1027883a 	mov	r19,r2
  808650:	080a4240 	call	80a424 <__multiply>
  808654:	d9001617 	ldw	r4,88(sp)
  808658:	d9400717 	ldw	r5,28(sp)
  80865c:	1023883a 	mov	r17,r2
  808660:	08099940 	call	809994 <_Bfree>
  808664:	dc400715 	stw	r17,28(sp)
  808668:	d9001017 	ldw	r4,64(sp)
  80866c:	248dc83a 	sub	r6,r4,r18
  808670:	30010e1e 	bne	r6,zero,808aac <_dtoa_r+0xc80>
  808674:	d9001617 	ldw	r4,88(sp)
  808678:	04400044 	movi	r17,1
  80867c:	880b883a 	mov	r5,r17
  808680:	080a60c0 	call	80a60c <__i2b>
  808684:	d9800917 	ldw	r6,36(sp)
  808688:	1025883a 	mov	r18,r2
  80868c:	0180040e 	bge	zero,r6,8086a0 <_dtoa_r+0x874>
  808690:	d9001617 	ldw	r4,88(sp)
  808694:	100b883a 	mov	r5,r2
  808698:	080a7480 	call	80a748 <__pow5mult>
  80869c:	1025883a 	mov	r18,r2
  8086a0:	d8801717 	ldw	r2,92(sp)
  8086a4:	8880f30e 	bge	r17,r2,808a74 <_dtoa_r+0xc48>
  8086a8:	0023883a 	mov	r17,zero
  8086ac:	d9800917 	ldw	r6,36(sp)
  8086b0:	30019e1e 	bne	r6,zero,808d2c <_dtoa_r+0xf00>
  8086b4:	00c00044 	movi	r3,1
  8086b8:	d9000a17 	ldw	r4,40(sp)
  8086bc:	20c5883a 	add	r2,r4,r3
  8086c0:	10c007cc 	andi	r3,r2,31
  8086c4:	1800841e 	bne	r3,zero,8088d8 <_dtoa_r+0xaac>
  8086c8:	00800704 	movi	r2,28
  8086cc:	d9000a17 	ldw	r4,40(sp)
  8086d0:	d9801117 	ldw	r6,68(sp)
  8086d4:	80a1883a 	add	r16,r16,r2
  8086d8:	2089883a 	add	r4,r4,r2
  8086dc:	308d883a 	add	r6,r6,r2
  8086e0:	d9000a15 	stw	r4,40(sp)
  8086e4:	d9801115 	stw	r6,68(sp)
  8086e8:	d8801117 	ldw	r2,68(sp)
  8086ec:	0080050e 	bge	zero,r2,808704 <_dtoa_r+0x8d8>
  8086f0:	d9400717 	ldw	r5,28(sp)
  8086f4:	d9001617 	ldw	r4,88(sp)
  8086f8:	100d883a 	mov	r6,r2
  8086fc:	080a2d80 	call	80a2d8 <__lshift>
  808700:	d8800715 	stw	r2,28(sp)
  808704:	d8c00a17 	ldw	r3,40(sp)
  808708:	00c0050e 	bge	zero,r3,808720 <_dtoa_r+0x8f4>
  80870c:	d9001617 	ldw	r4,88(sp)
  808710:	900b883a 	mov	r5,r18
  808714:	180d883a 	mov	r6,r3
  808718:	080a2d80 	call	80a2d8 <__lshift>
  80871c:	1025883a 	mov	r18,r2
  808720:	d9000c17 	ldw	r4,48(sp)
  808724:	2005003a 	cmpeq	r2,r4,zero
  808728:	10016f26 	beq	r2,zero,808ce8 <_dtoa_r+0xebc>
  80872c:	d9000f17 	ldw	r4,60(sp)
  808730:	0102170e 	bge	zero,r4,808f90 <_dtoa_r+0x1164>
  808734:	d9800b17 	ldw	r6,44(sp)
  808738:	3005003a 	cmpeq	r2,r6,zero
  80873c:	1000881e 	bne	r2,zero,808960 <_dtoa_r+0xb34>
  808740:	0400050e 	bge	zero,r16,808758 <_dtoa_r+0x92c>
  808744:	d9001617 	ldw	r4,88(sp)
  808748:	980b883a 	mov	r5,r19
  80874c:	800d883a 	mov	r6,r16
  808750:	080a2d80 	call	80a2d8 <__lshift>
  808754:	1027883a 	mov	r19,r2
  808758:	8804c03a 	cmpne	r2,r17,zero
  80875c:	1002541e 	bne	r2,zero,8090b0 <_dtoa_r+0x1284>
  808760:	980b883a 	mov	r5,r19
  808764:	dd800517 	ldw	r22,20(sp)
  808768:	dcc00615 	stw	r19,24(sp)
  80876c:	a700004c 	andi	fp,r20,1
  808770:	2827883a 	mov	r19,r5
  808774:	d9000717 	ldw	r4,28(sp)
  808778:	900b883a 	mov	r5,r18
  80877c:	0807c140 	call	807c14 <quorem>
  808780:	d9000717 	ldw	r4,28(sp)
  808784:	d9400617 	ldw	r5,24(sp)
  808788:	1023883a 	mov	r17,r2
  80878c:	8dc00c04 	addi	r23,r17,48
  808790:	0809af00 	call	809af0 <__mcmp>
  808794:	d9001617 	ldw	r4,88(sp)
  808798:	900b883a 	mov	r5,r18
  80879c:	980d883a 	mov	r6,r19
  8087a0:	1029883a 	mov	r20,r2
  8087a4:	080a14c0 	call	80a14c <__mdiff>
  8087a8:	102b883a 	mov	r21,r2
  8087ac:	10800317 	ldw	r2,12(r2)
  8087b0:	1001281e 	bne	r2,zero,808c54 <_dtoa_r+0xe28>
  8087b4:	d9000717 	ldw	r4,28(sp)
  8087b8:	a80b883a 	mov	r5,r21
  8087bc:	0809af00 	call	809af0 <__mcmp>
  8087c0:	d9001617 	ldw	r4,88(sp)
  8087c4:	1021883a 	mov	r16,r2
  8087c8:	a80b883a 	mov	r5,r21
  8087cc:	08099940 	call	809994 <_Bfree>
  8087d0:	8000041e 	bne	r16,zero,8087e4 <_dtoa_r+0x9b8>
  8087d4:	d8801717 	ldw	r2,92(sp)
  8087d8:	1000021e 	bne	r2,zero,8087e4 <_dtoa_r+0x9b8>
  8087dc:	e004c03a 	cmpne	r2,fp,zero
  8087e0:	10011726 	beq	r2,zero,808c40 <_dtoa_r+0xe14>
  8087e4:	a0010616 	blt	r20,zero,808c00 <_dtoa_r+0xdd4>
  8087e8:	a000041e 	bne	r20,zero,8087fc <_dtoa_r+0x9d0>
  8087ec:	d8c01717 	ldw	r3,92(sp)
  8087f0:	1800021e 	bne	r3,zero,8087fc <_dtoa_r+0x9d0>
  8087f4:	e004c03a 	cmpne	r2,fp,zero
  8087f8:	10010126 	beq	r2,zero,808c00 <_dtoa_r+0xdd4>
  8087fc:	04023d16 	blt	zero,r16,8090f4 <_dtoa_r+0x12c8>
  808800:	b5c00005 	stb	r23,0(r22)
  808804:	d9800517 	ldw	r6,20(sp)
  808808:	d9000f17 	ldw	r4,60(sp)
  80880c:	b5800044 	addi	r22,r22,1
  808810:	3105883a 	add	r2,r6,r4
  808814:	b0806526 	beq	r22,r2,8089ac <_dtoa_r+0xb80>
  808818:	d9400717 	ldw	r5,28(sp)
  80881c:	d9001617 	ldw	r4,88(sp)
  808820:	01800284 	movi	r6,10
  808824:	000f883a 	mov	r7,zero
  808828:	080a6480 	call	80a648 <__multadd>
  80882c:	d8800715 	stw	r2,28(sp)
  808830:	d8800617 	ldw	r2,24(sp)
  808834:	14c10c26 	beq	r2,r19,808c68 <_dtoa_r+0xe3c>
  808838:	d9400617 	ldw	r5,24(sp)
  80883c:	d9001617 	ldw	r4,88(sp)
  808840:	01800284 	movi	r6,10
  808844:	000f883a 	mov	r7,zero
  808848:	080a6480 	call	80a648 <__multadd>
  80884c:	d9001617 	ldw	r4,88(sp)
  808850:	980b883a 	mov	r5,r19
  808854:	01800284 	movi	r6,10
  808858:	000f883a 	mov	r7,zero
  80885c:	d8800615 	stw	r2,24(sp)
  808860:	080a6480 	call	80a648 <__multadd>
  808864:	1027883a 	mov	r19,r2
  808868:	003fc206 	br	808774 <_dtoa_r+0x948>
  80886c:	2445c83a 	sub	r2,r4,r17
  808870:	a088983a 	sll	r4,r20,r2
  808874:	003e4b06 	br	8081a4 <_dtoa_r+0x378>
  808878:	01bfffc4 	movi	r6,-1
  80887c:	00800044 	movi	r2,1
  808880:	d9800e15 	stw	r6,56(sp)
  808884:	d9800f15 	stw	r6,60(sp)
  808888:	d8800b15 	stw	r2,44(sp)
  80888c:	d8c01617 	ldw	r3,88(sp)
  808890:	008005c4 	movi	r2,23
  808894:	18001115 	stw	zero,68(r3)
  808898:	1580082e 	bgeu	r2,r22,8088bc <_dtoa_r+0xa90>
  80889c:	00c00104 	movi	r3,4
  8088a0:	0009883a 	mov	r4,zero
  8088a4:	18c7883a 	add	r3,r3,r3
  8088a8:	18800504 	addi	r2,r3,20
  8088ac:	21000044 	addi	r4,r4,1
  8088b0:	b0bffc2e 	bgeu	r22,r2,8088a4 <_dtoa_r+0xa78>
  8088b4:	d9801617 	ldw	r6,88(sp)
  8088b8:	31001115 	stw	r4,68(r6)
  8088bc:	dc000f17 	ldw	r16,60(sp)
  8088c0:	003e4b06 	br	8081f0 <_dtoa_r+0x3c4>
  8088c4:	d9801717 	ldw	r6,92(sp)
  8088c8:	0023883a 	mov	r17,zero
  8088cc:	31bfff04 	addi	r6,r6,-4
  8088d0:	d9801715 	stw	r6,92(sp)
  8088d4:	003df806 	br	8080b8 <_dtoa_r+0x28c>
  8088d8:	00800804 	movi	r2,32
  8088dc:	10c9c83a 	sub	r4,r2,r3
  8088e0:	00c00104 	movi	r3,4
  8088e4:	19005a16 	blt	r3,r4,808a50 <_dtoa_r+0xc24>
  8088e8:	008000c4 	movi	r2,3
  8088ec:	113f7e16 	blt	r2,r4,8086e8 <_dtoa_r+0x8bc>
  8088f0:	20800704 	addi	r2,r4,28
  8088f4:	003f7506 	br	8086cc <_dtoa_r+0x8a0>
  8088f8:	d9801717 	ldw	r6,92(sp)
  8088fc:	00800044 	movi	r2,1
  808900:	1180a10e 	bge	r2,r6,808b88 <_dtoa_r+0xd5c>
  808904:	d9800f17 	ldw	r6,60(sp)
  808908:	d8c01017 	ldw	r3,64(sp)
  80890c:	30bfffc4 	addi	r2,r6,-1
  808910:	1881c616 	blt	r3,r2,80902c <_dtoa_r+0x1200>
  808914:	18a5c83a 	sub	r18,r3,r2
  808918:	d8800f17 	ldw	r2,60(sp)
  80891c:	10026216 	blt	r2,zero,8092a8 <_dtoa_r+0x147c>
  808920:	dc001117 	ldw	r16,68(sp)
  808924:	1007883a 	mov	r3,r2
  808928:	d9800a17 	ldw	r6,40(sp)
  80892c:	d8801117 	ldw	r2,68(sp)
  808930:	d9001617 	ldw	r4,88(sp)
  808934:	30cd883a 	add	r6,r6,r3
  808938:	10c5883a 	add	r2,r2,r3
  80893c:	01400044 	movi	r5,1
  808940:	d9800a15 	stw	r6,40(sp)
  808944:	d8801115 	stw	r2,68(sp)
  808948:	080a60c0 	call	80a60c <__i2b>
  80894c:	1027883a 	mov	r19,r2
  808950:	003f2506 	br	8085e8 <_dtoa_r+0x7bc>
  808954:	00c02074 	movhi	r3,129
  808958:	18d3a204 	addi	r3,r3,20104
  80895c:	003d6706 	br	807efc <_dtoa_r+0xd0>
  808960:	dd800517 	ldw	r22,20(sp)
  808964:	04000044 	movi	r16,1
  808968:	00000706 	br	808988 <_dtoa_r+0xb5c>
  80896c:	d9400717 	ldw	r5,28(sp)
  808970:	d9001617 	ldw	r4,88(sp)
  808974:	01800284 	movi	r6,10
  808978:	000f883a 	mov	r7,zero
  80897c:	080a6480 	call	80a648 <__multadd>
  808980:	d8800715 	stw	r2,28(sp)
  808984:	84000044 	addi	r16,r16,1
  808988:	d9000717 	ldw	r4,28(sp)
  80898c:	900b883a 	mov	r5,r18
  808990:	0807c140 	call	807c14 <quorem>
  808994:	15c00c04 	addi	r23,r2,48
  808998:	b5c00005 	stb	r23,0(r22)
  80899c:	d8c00f17 	ldw	r3,60(sp)
  8089a0:	b5800044 	addi	r22,r22,1
  8089a4:	80fff116 	blt	r16,r3,80896c <_dtoa_r+0xb40>
  8089a8:	d8000615 	stw	zero,24(sp)
  8089ac:	d9400717 	ldw	r5,28(sp)
  8089b0:	d9001617 	ldw	r4,88(sp)
  8089b4:	01800044 	movi	r6,1
  8089b8:	080a2d80 	call	80a2d8 <__lshift>
  8089bc:	1009883a 	mov	r4,r2
  8089c0:	900b883a 	mov	r5,r18
  8089c4:	d8800715 	stw	r2,28(sp)
  8089c8:	0809af00 	call	809af0 <__mcmp>
  8089cc:	00803c0e 	bge	zero,r2,808ac0 <_dtoa_r+0xc94>
  8089d0:	b009883a 	mov	r4,r22
  8089d4:	213fffc4 	addi	r4,r4,-1
  8089d8:	21400003 	ldbu	r5,0(r4)
  8089dc:	00800e44 	movi	r2,57
  8089e0:	28c03fcc 	andi	r3,r5,255
  8089e4:	18c0201c 	xori	r3,r3,128
  8089e8:	18ffe004 	addi	r3,r3,-128
  8089ec:	1881981e 	bne	r3,r2,809050 <_dtoa_r+0x1224>
  8089f0:	d9800517 	ldw	r6,20(sp)
  8089f4:	21bff71e 	bne	r4,r6,8089d4 <_dtoa_r+0xba8>
  8089f8:	d8800d17 	ldw	r2,52(sp)
  8089fc:	37000044 	addi	fp,r6,1
  808a00:	10800044 	addi	r2,r2,1
  808a04:	d8800d15 	stw	r2,52(sp)
  808a08:	00800c44 	movi	r2,49
  808a0c:	30800005 	stb	r2,0(r6)
  808a10:	d9001617 	ldw	r4,88(sp)
  808a14:	900b883a 	mov	r5,r18
  808a18:	08099940 	call	809994 <_Bfree>
  808a1c:	983ecd26 	beq	r19,zero,808554 <_dtoa_r+0x728>
  808a20:	d8c00617 	ldw	r3,24(sp)
  808a24:	18000426 	beq	r3,zero,808a38 <_dtoa_r+0xc0c>
  808a28:	1cc00326 	beq	r3,r19,808a38 <_dtoa_r+0xc0c>
  808a2c:	d9001617 	ldw	r4,88(sp)
  808a30:	180b883a 	mov	r5,r3
  808a34:	08099940 	call	809994 <_Bfree>
  808a38:	d9001617 	ldw	r4,88(sp)
  808a3c:	980b883a 	mov	r5,r19
  808a40:	08099940 	call	809994 <_Bfree>
  808a44:	003ec306 	br	808554 <_dtoa_r+0x728>
  808a48:	1805883a 	mov	r2,r3
  808a4c:	003eeb06 	br	8085fc <_dtoa_r+0x7d0>
  808a50:	d9800a17 	ldw	r6,40(sp)
  808a54:	d8c01117 	ldw	r3,68(sp)
  808a58:	20bfff04 	addi	r2,r4,-4
  808a5c:	308d883a 	add	r6,r6,r2
  808a60:	1887883a 	add	r3,r3,r2
  808a64:	80a1883a 	add	r16,r16,r2
  808a68:	d9800a15 	stw	r6,40(sp)
  808a6c:	d8c01115 	stw	r3,68(sp)
  808a70:	003f1d06 	br	8086e8 <_dtoa_r+0x8bc>
  808a74:	a03f0c1e 	bne	r20,zero,8086a8 <_dtoa_r+0x87c>
  808a78:	00800434 	movhi	r2,16
  808a7c:	10bfffc4 	addi	r2,r2,-1
  808a80:	a884703a 	and	r2,r21,r2
  808a84:	103f081e 	bne	r2,zero,8086a8 <_dtoa_r+0x87c>
  808a88:	a89ffc2c 	andhi	r2,r21,32752
  808a8c:	103f0626 	beq	r2,zero,8086a8 <_dtoa_r+0x87c>
  808a90:	d8c01117 	ldw	r3,68(sp)
  808a94:	d9000a17 	ldw	r4,40(sp)
  808a98:	18c00044 	addi	r3,r3,1
  808a9c:	21000044 	addi	r4,r4,1
  808aa0:	d8c01115 	stw	r3,68(sp)
  808aa4:	d9000a15 	stw	r4,40(sp)
  808aa8:	003f0006 	br	8086ac <_dtoa_r+0x880>
  808aac:	d9400717 	ldw	r5,28(sp)
  808ab0:	d9001617 	ldw	r4,88(sp)
  808ab4:	080a7480 	call	80a748 <__pow5mult>
  808ab8:	d8800715 	stw	r2,28(sp)
  808abc:	003eed06 	br	808674 <_dtoa_r+0x848>
  808ac0:	1000021e 	bne	r2,zero,808acc <_dtoa_r+0xca0>
  808ac4:	b880004c 	andi	r2,r23,1
  808ac8:	103fc11e 	bne	r2,zero,8089d0 <_dtoa_r+0xba4>
  808acc:	b5bfffc4 	addi	r22,r22,-1
  808ad0:	b0c00007 	ldb	r3,0(r22)
  808ad4:	00800c04 	movi	r2,48
  808ad8:	18bffc26 	beq	r3,r2,808acc <_dtoa_r+0xca0>
  808adc:	b7000044 	addi	fp,r22,1
  808ae0:	003fcb06 	br	808a10 <_dtoa_r+0xbe4>
  808ae4:	d9800d17 	ldw	r6,52(sp)
  808ae8:	018fc83a 	sub	r7,zero,r6
  808aec:	3801f726 	beq	r7,zero,8092cc <_dtoa_r+0x14a0>
  808af0:	398003cc 	andi	r6,r7,15
  808af4:	300c90fa 	slli	r6,r6,3
  808af8:	01402074 	movhi	r5,129
  808afc:	29546b04 	addi	r5,r5,20908
  808b00:	d9001217 	ldw	r4,72(sp)
  808b04:	314d883a 	add	r6,r6,r5
  808b08:	30c00117 	ldw	r3,4(r6)
  808b0c:	30800017 	ldw	r2,0(r6)
  808b10:	d9401317 	ldw	r5,76(sp)
  808b14:	3821d13a 	srai	r16,r7,4
  808b18:	100d883a 	mov	r6,r2
  808b1c:	180f883a 	mov	r7,r3
  808b20:	080ef280 	call	80ef28 <__muldf3>
  808b24:	1011883a 	mov	r8,r2
  808b28:	1813883a 	mov	r9,r3
  808b2c:	1029883a 	mov	r20,r2
  808b30:	182b883a 	mov	r21,r3
  808b34:	8001e526 	beq	r16,zero,8092cc <_dtoa_r+0x14a0>
  808b38:	05800084 	movi	r22,2
  808b3c:	04402074 	movhi	r17,129
  808b40:	8c549d04 	addi	r17,r17,21108
  808b44:	8080004c 	andi	r2,r16,1
  808b48:	1005003a 	cmpeq	r2,r2,zero
  808b4c:	1000081e 	bne	r2,zero,808b70 <_dtoa_r+0xd44>
  808b50:	89800017 	ldw	r6,0(r17)
  808b54:	89c00117 	ldw	r7,4(r17)
  808b58:	480b883a 	mov	r5,r9
  808b5c:	4009883a 	mov	r4,r8
  808b60:	080ef280 	call	80ef28 <__muldf3>
  808b64:	1011883a 	mov	r8,r2
  808b68:	b5800044 	addi	r22,r22,1
  808b6c:	1813883a 	mov	r9,r3
  808b70:	8021d07a 	srai	r16,r16,1
  808b74:	8c400204 	addi	r17,r17,8
  808b78:	803ff21e 	bne	r16,zero,808b44 <_dtoa_r+0xd18>
  808b7c:	4029883a 	mov	r20,r8
  808b80:	482b883a 	mov	r21,r9
  808b84:	003dca06 	br	8082b0 <_dtoa_r+0x484>
  808b88:	d9000817 	ldw	r4,32(sp)
  808b8c:	2005003a 	cmpeq	r2,r4,zero
  808b90:	1001f61e 	bne	r2,zero,80936c <_dtoa_r+0x1540>
  808b94:	dc001117 	ldw	r16,68(sp)
  808b98:	dc801017 	ldw	r18,64(sp)
  808b9c:	18c10cc4 	addi	r3,r3,1075
  808ba0:	003f6106 	br	808928 <_dtoa_r+0xafc>
  808ba4:	d8000b15 	stw	zero,44(sp)
  808ba8:	d9802617 	ldw	r6,152(sp)
  808bac:	d8c00d17 	ldw	r3,52(sp)
  808bb0:	30800044 	addi	r2,r6,1
  808bb4:	18ad883a 	add	r22,r3,r2
  808bb8:	b13fffc4 	addi	r4,r22,-1
  808bbc:	d9000e15 	stw	r4,56(sp)
  808bc0:	0581f60e 	bge	zero,r22,80939c <_dtoa_r+0x1570>
  808bc4:	dd800f15 	stw	r22,60(sp)
  808bc8:	003f3006 	br	80888c <_dtoa_r+0xa60>
  808bcc:	d8000b15 	stw	zero,44(sp)
  808bd0:	d9002617 	ldw	r4,152(sp)
  808bd4:	0101eb0e 	bge	zero,r4,809384 <_dtoa_r+0x1558>
  808bd8:	202d883a 	mov	r22,r4
  808bdc:	d9000e15 	stw	r4,56(sp)
  808be0:	d9000f15 	stw	r4,60(sp)
  808be4:	003f2906 	br	80888c <_dtoa_r+0xa60>
  808be8:	01800044 	movi	r6,1
  808bec:	d9800b15 	stw	r6,44(sp)
  808bf0:	003ff706 	br	808bd0 <_dtoa_r+0xda4>
  808bf4:	01000044 	movi	r4,1
  808bf8:	d9000b15 	stw	r4,44(sp)
  808bfc:	003fea06 	br	808ba8 <_dtoa_r+0xd7c>
  808c00:	04000c0e 	bge	zero,r16,808c34 <_dtoa_r+0xe08>
  808c04:	d9400717 	ldw	r5,28(sp)
  808c08:	d9001617 	ldw	r4,88(sp)
  808c0c:	01800044 	movi	r6,1
  808c10:	080a2d80 	call	80a2d8 <__lshift>
  808c14:	1009883a 	mov	r4,r2
  808c18:	900b883a 	mov	r5,r18
  808c1c:	d8800715 	stw	r2,28(sp)
  808c20:	0809af00 	call	809af0 <__mcmp>
  808c24:	0081e00e 	bge	zero,r2,8093a8 <_dtoa_r+0x157c>
  808c28:	bdc00044 	addi	r23,r23,1
  808c2c:	00800e84 	movi	r2,58
  808c30:	b881a226 	beq	r23,r2,8092bc <_dtoa_r+0x1490>
  808c34:	b7000044 	addi	fp,r22,1
  808c38:	b5c00005 	stb	r23,0(r22)
  808c3c:	003f7406 	br	808a10 <_dtoa_r+0xbe4>
  808c40:	00800e44 	movi	r2,57
  808c44:	b8819d26 	beq	r23,r2,8092bc <_dtoa_r+0x1490>
  808c48:	053ffa0e 	bge	zero,r20,808c34 <_dtoa_r+0xe08>
  808c4c:	8dc00c44 	addi	r23,r17,49
  808c50:	003ff806 	br	808c34 <_dtoa_r+0xe08>
  808c54:	d9001617 	ldw	r4,88(sp)
  808c58:	a80b883a 	mov	r5,r21
  808c5c:	04000044 	movi	r16,1
  808c60:	08099940 	call	809994 <_Bfree>
  808c64:	003edf06 	br	8087e4 <_dtoa_r+0x9b8>
  808c68:	d9001617 	ldw	r4,88(sp)
  808c6c:	980b883a 	mov	r5,r19
  808c70:	01800284 	movi	r6,10
  808c74:	000f883a 	mov	r7,zero
  808c78:	080a6480 	call	80a648 <__multadd>
  808c7c:	1027883a 	mov	r19,r2
  808c80:	d8800615 	stw	r2,24(sp)
  808c84:	003ebb06 	br	808774 <_dtoa_r+0x948>
  808c88:	d9801117 	ldw	r6,68(sp)
  808c8c:	d8800d17 	ldw	r2,52(sp)
  808c90:	d8000915 	stw	zero,36(sp)
  808c94:	308dc83a 	sub	r6,r6,r2
  808c98:	0087c83a 	sub	r3,zero,r2
  808c9c:	d9801115 	stw	r6,68(sp)
  808ca0:	d8c01015 	stw	r3,64(sp)
  808ca4:	003cfe06 	br	8080a0 <_dtoa_r+0x274>
  808ca8:	018dc83a 	sub	r6,zero,r6
  808cac:	d9801115 	stw	r6,68(sp)
  808cb0:	d8000a15 	stw	zero,40(sp)
  808cb4:	003cf306 	br	808084 <_dtoa_r+0x258>
  808cb8:	d9000d17 	ldw	r4,52(sp)
  808cbc:	080f8740 	call	80f874 <__floatsidf>
  808cc0:	880b883a 	mov	r5,r17
  808cc4:	8009883a 	mov	r4,r16
  808cc8:	180f883a 	mov	r7,r3
  808ccc:	100d883a 	mov	r6,r2
  808cd0:	080f5cc0 	call	80f5cc <__nedf2>
  808cd4:	103ce126 	beq	r2,zero,80805c <_dtoa_r+0x230>
  808cd8:	d9800d17 	ldw	r6,52(sp)
  808cdc:	31bfffc4 	addi	r6,r6,-1
  808ce0:	d9800d15 	stw	r6,52(sp)
  808ce4:	003cdd06 	br	80805c <_dtoa_r+0x230>
  808ce8:	d9000717 	ldw	r4,28(sp)
  808cec:	900b883a 	mov	r5,r18
  808cf0:	0809af00 	call	809af0 <__mcmp>
  808cf4:	103e8d0e 	bge	r2,zero,80872c <_dtoa_r+0x900>
  808cf8:	d9400717 	ldw	r5,28(sp)
  808cfc:	d9001617 	ldw	r4,88(sp)
  808d00:	01800284 	movi	r6,10
  808d04:	000f883a 	mov	r7,zero
  808d08:	080a6480 	call	80a648 <__multadd>
  808d0c:	d9800d17 	ldw	r6,52(sp)
  808d10:	d8800715 	stw	r2,28(sp)
  808d14:	31bfffc4 	addi	r6,r6,-1
  808d18:	d9800d15 	stw	r6,52(sp)
  808d1c:	b001a71e 	bne	r22,zero,8093bc <_dtoa_r+0x1590>
  808d20:	d8800e17 	ldw	r2,56(sp)
  808d24:	d8800f15 	stw	r2,60(sp)
  808d28:	003e8006 	br	80872c <_dtoa_r+0x900>
  808d2c:	90800417 	ldw	r2,16(r18)
  808d30:	1085883a 	add	r2,r2,r2
  808d34:	1085883a 	add	r2,r2,r2
  808d38:	1485883a 	add	r2,r2,r18
  808d3c:	11000417 	ldw	r4,16(r2)
  808d40:	08099bc0 	call	8099bc <__hi0bits>
  808d44:	00c00804 	movi	r3,32
  808d48:	1887c83a 	sub	r3,r3,r2
  808d4c:	003e5a06 	br	8086b8 <_dtoa_r+0x88c>
  808d50:	d9400717 	ldw	r5,28(sp)
  808d54:	d9801017 	ldw	r6,64(sp)
  808d58:	d9001617 	ldw	r4,88(sp)
  808d5c:	080a7480 	call	80a748 <__pow5mult>
  808d60:	d8800715 	stw	r2,28(sp)
  808d64:	003e4306 	br	808674 <_dtoa_r+0x848>
  808d68:	d9800f17 	ldw	r6,60(sp)
  808d6c:	d8800d17 	ldw	r2,52(sp)
  808d70:	d9800315 	stw	r6,12(sp)
  808d74:	d8800415 	stw	r2,16(sp)
  808d78:	d8c00b17 	ldw	r3,44(sp)
  808d7c:	1805003a 	cmpeq	r2,r3,zero
  808d80:	1000e21e 	bne	r2,zero,80910c <_dtoa_r+0x12e0>
  808d84:	d9000317 	ldw	r4,12(sp)
  808d88:	0005883a 	mov	r2,zero
  808d8c:	00cff834 	movhi	r3,16352
  808d90:	200c90fa 	slli	r6,r4,3
  808d94:	01002074 	movhi	r4,129
  808d98:	21146b04 	addi	r4,r4,20908
  808d9c:	180b883a 	mov	r5,r3
  808da0:	310d883a 	add	r6,r6,r4
  808da4:	327fff17 	ldw	r9,-4(r6)
  808da8:	323ffe17 	ldw	r8,-8(r6)
  808dac:	1009883a 	mov	r4,r2
  808db0:	480f883a 	mov	r7,r9
  808db4:	400d883a 	mov	r6,r8
  808db8:	080f2ec0 	call	80f2ec <__divdf3>
  808dbc:	180b883a 	mov	r5,r3
  808dc0:	b00d883a 	mov	r6,r22
  808dc4:	b80f883a 	mov	r7,r23
  808dc8:	1009883a 	mov	r4,r2
  808dcc:	080ee340 	call	80ee34 <__subdf3>
  808dd0:	a80b883a 	mov	r5,r21
  808dd4:	a009883a 	mov	r4,r20
  808dd8:	d8c01915 	stw	r3,100(sp)
  808ddc:	d8801815 	stw	r2,96(sp)
  808de0:	080f96c0 	call	80f96c <__fixdfsi>
  808de4:	1009883a 	mov	r4,r2
  808de8:	1027883a 	mov	r19,r2
  808dec:	080f8740 	call	80f874 <__floatsidf>
  808df0:	a80b883a 	mov	r5,r21
  808df4:	a009883a 	mov	r4,r20
  808df8:	180f883a 	mov	r7,r3
  808dfc:	100d883a 	mov	r6,r2
  808e00:	080ee340 	call	80ee34 <__subdf3>
  808e04:	d9801817 	ldw	r6,96(sp)
  808e08:	1823883a 	mov	r17,r3
  808e0c:	d8801415 	stw	r2,80(sp)
  808e10:	302d883a 	mov	r22,r6
  808e14:	d9800517 	ldw	r6,20(sp)
  808e18:	9cc00c04 	addi	r19,r19,48
  808e1c:	dc401515 	stw	r17,84(sp)
  808e20:	d8c01917 	ldw	r3,100(sp)
  808e24:	34c00005 	stb	r19,0(r6)
  808e28:	d8800517 	ldw	r2,20(sp)
  808e2c:	d9401917 	ldw	r5,100(sp)
  808e30:	d9801417 	ldw	r6,80(sp)
  808e34:	b009883a 	mov	r4,r22
  808e38:	880f883a 	mov	r7,r17
  808e3c:	182f883a 	mov	r23,r3
  808e40:	17000044 	addi	fp,r2,1
  808e44:	080f6540 	call	80f654 <__gtdf2>
  808e48:	00804e16 	blt	zero,r2,808f84 <_dtoa_r+0x1158>
  808e4c:	d9801417 	ldw	r6,80(sp)
  808e50:	0005883a 	mov	r2,zero
  808e54:	00cffc34 	movhi	r3,16368
  808e58:	180b883a 	mov	r5,r3
  808e5c:	880f883a 	mov	r7,r17
  808e60:	1009883a 	mov	r4,r2
  808e64:	080ee340 	call	80ee34 <__subdf3>
  808e68:	d9401917 	ldw	r5,100(sp)
  808e6c:	180f883a 	mov	r7,r3
  808e70:	b009883a 	mov	r4,r22
  808e74:	100d883a 	mov	r6,r2
  808e78:	080f6540 	call	80f654 <__gtdf2>
  808e7c:	00bda216 	blt	zero,r2,808508 <_dtoa_r+0x6dc>
  808e80:	d8c00317 	ldw	r3,12(sp)
  808e84:	00800044 	movi	r2,1
  808e88:	10c01216 	blt	r2,r3,808ed4 <_dtoa_r+0x10a8>
  808e8c:	003d4506 	br	8083a4 <_dtoa_r+0x578>
  808e90:	d9801417 	ldw	r6,80(sp)
  808e94:	0005883a 	mov	r2,zero
  808e98:	00cffc34 	movhi	r3,16368
  808e9c:	180b883a 	mov	r5,r3
  808ea0:	880f883a 	mov	r7,r17
  808ea4:	1009883a 	mov	r4,r2
  808ea8:	080ee340 	call	80ee34 <__subdf3>
  808eac:	d9c01b17 	ldw	r7,108(sp)
  808eb0:	180b883a 	mov	r5,r3
  808eb4:	1009883a 	mov	r4,r2
  808eb8:	b00d883a 	mov	r6,r22
  808ebc:	080f7640 	call	80f764 <__ltdf2>
  808ec0:	103d9116 	blt	r2,zero,808508 <_dtoa_r+0x6dc>
  808ec4:	d9800517 	ldw	r6,20(sp)
  808ec8:	d9000317 	ldw	r4,12(sp)
  808ecc:	3105883a 	add	r2,r6,r4
  808ed0:	e0bd3426 	beq	fp,r2,8083a4 <_dtoa_r+0x578>
  808ed4:	04500934 	movhi	r17,16420
  808ed8:	0021883a 	mov	r16,zero
  808edc:	b80b883a 	mov	r5,r23
  808ee0:	b009883a 	mov	r4,r22
  808ee4:	800d883a 	mov	r6,r16
  808ee8:	880f883a 	mov	r7,r17
  808eec:	080ef280 	call	80ef28 <__muldf3>
  808ef0:	d9401517 	ldw	r5,84(sp)
  808ef4:	d9001417 	ldw	r4,80(sp)
  808ef8:	880f883a 	mov	r7,r17
  808efc:	000d883a 	mov	r6,zero
  808f00:	d8801a15 	stw	r2,104(sp)
  808f04:	d8c01b15 	stw	r3,108(sp)
  808f08:	080ef280 	call	80ef28 <__muldf3>
  808f0c:	180b883a 	mov	r5,r3
  808f10:	1009883a 	mov	r4,r2
  808f14:	1823883a 	mov	r17,r3
  808f18:	1021883a 	mov	r16,r2
  808f1c:	080f96c0 	call	80f96c <__fixdfsi>
  808f20:	1009883a 	mov	r4,r2
  808f24:	102b883a 	mov	r21,r2
  808f28:	080f8740 	call	80f874 <__floatsidf>
  808f2c:	880b883a 	mov	r5,r17
  808f30:	8009883a 	mov	r4,r16
  808f34:	180f883a 	mov	r7,r3
  808f38:	100d883a 	mov	r6,r2
  808f3c:	080ee340 	call	80ee34 <__subdf3>
  808f40:	1021883a 	mov	r16,r2
  808f44:	d9001b17 	ldw	r4,108(sp)
  808f48:	1823883a 	mov	r17,r3
  808f4c:	dc001415 	stw	r16,80(sp)
  808f50:	ad400c04 	addi	r21,r21,48
  808f54:	dc401515 	stw	r17,84(sp)
  808f58:	d8801a17 	ldw	r2,104(sp)
  808f5c:	e5400005 	stb	r21,0(fp)
  808f60:	202f883a 	mov	r23,r4
  808f64:	d9c01b17 	ldw	r7,108(sp)
  808f68:	d9001417 	ldw	r4,80(sp)
  808f6c:	880b883a 	mov	r5,r17
  808f70:	100d883a 	mov	r6,r2
  808f74:	102d883a 	mov	r22,r2
  808f78:	e7000044 	addi	fp,fp,1
  808f7c:	080f7640 	call	80f764 <__ltdf2>
  808f80:	103fc30e 	bge	r2,zero,808e90 <_dtoa_r+0x1064>
  808f84:	d9000417 	ldw	r4,16(sp)
  808f88:	d9000d15 	stw	r4,52(sp)
  808f8c:	003d7106 	br	808554 <_dtoa_r+0x728>
  808f90:	d9801717 	ldw	r6,92(sp)
  808f94:	00800084 	movi	r2,2
  808f98:	11bde60e 	bge	r2,r6,808734 <_dtoa_r+0x908>
  808f9c:	203cfb1e 	bne	r4,zero,80838c <_dtoa_r+0x560>
  808fa0:	d9001617 	ldw	r4,88(sp)
  808fa4:	900b883a 	mov	r5,r18
  808fa8:	01800144 	movi	r6,5
  808fac:	000f883a 	mov	r7,zero
  808fb0:	080a6480 	call	80a648 <__multadd>
  808fb4:	d9000717 	ldw	r4,28(sp)
  808fb8:	100b883a 	mov	r5,r2
  808fbc:	1025883a 	mov	r18,r2
  808fc0:	0809af00 	call	809af0 <__mcmp>
  808fc4:	00bcf10e 	bge	zero,r2,80838c <_dtoa_r+0x560>
  808fc8:	d8c00d17 	ldw	r3,52(sp)
  808fcc:	d9000517 	ldw	r4,20(sp)
  808fd0:	d8000615 	stw	zero,24(sp)
  808fd4:	18c00044 	addi	r3,r3,1
  808fd8:	d8c00d15 	stw	r3,52(sp)
  808fdc:	00800c44 	movi	r2,49
  808fe0:	27000044 	addi	fp,r4,1
  808fe4:	20800005 	stb	r2,0(r4)
  808fe8:	003e8906 	br	808a10 <_dtoa_r+0xbe4>
  808fec:	d8c00517 	ldw	r3,20(sp)
  808ff0:	003bc206 	br	807efc <_dtoa_r+0xd0>
  808ff4:	01802074 	movhi	r6,129
  808ff8:	31949d04 	addi	r6,r6,21108
  808ffc:	30c00917 	ldw	r3,36(r6)
  809000:	30800817 	ldw	r2,32(r6)
  809004:	d9001217 	ldw	r4,72(sp)
  809008:	d9401317 	ldw	r5,76(sp)
  80900c:	180f883a 	mov	r7,r3
  809010:	100d883a 	mov	r6,r2
  809014:	080f2ec0 	call	80f2ec <__divdf3>
  809018:	948003cc 	andi	r18,r18,15
  80901c:	058000c4 	movi	r22,3
  809020:	1029883a 	mov	r20,r2
  809024:	182b883a 	mov	r21,r3
  809028:	003c8906 	br	808250 <_dtoa_r+0x424>
  80902c:	d9001017 	ldw	r4,64(sp)
  809030:	d9800917 	ldw	r6,36(sp)
  809034:	0025883a 	mov	r18,zero
  809038:	1105c83a 	sub	r2,r2,r4
  80903c:	2089883a 	add	r4,r4,r2
  809040:	308d883a 	add	r6,r6,r2
  809044:	d9001015 	stw	r4,64(sp)
  809048:	d9800915 	stw	r6,36(sp)
  80904c:	003e3206 	br	808918 <_dtoa_r+0xaec>
  809050:	28800044 	addi	r2,r5,1
  809054:	27000044 	addi	fp,r4,1
  809058:	20800005 	stb	r2,0(r4)
  80905c:	003e6c06 	br	808a10 <_dtoa_r+0xbe4>
  809060:	d8800f17 	ldw	r2,60(sp)
  809064:	00bce016 	blt	zero,r2,8083e8 <_dtoa_r+0x5bc>
  809068:	d9800f17 	ldw	r6,60(sp)
  80906c:	303cc51e 	bne	r6,zero,808384 <_dtoa_r+0x558>
  809070:	0005883a 	mov	r2,zero
  809074:	00d00534 	movhi	r3,16404
  809078:	980b883a 	mov	r5,r19
  80907c:	180f883a 	mov	r7,r3
  809080:	9009883a 	mov	r4,r18
  809084:	100d883a 	mov	r6,r2
  809088:	080ef280 	call	80ef28 <__muldf3>
  80908c:	180b883a 	mov	r5,r3
  809090:	a80f883a 	mov	r7,r21
  809094:	1009883a 	mov	r4,r2
  809098:	a00d883a 	mov	r6,r20
  80909c:	080f6dc0 	call	80f6dc <__gedf2>
  8090a0:	103cb80e 	bge	r2,zero,808384 <_dtoa_r+0x558>
  8090a4:	0027883a 	mov	r19,zero
  8090a8:	0025883a 	mov	r18,zero
  8090ac:	003fc606 	br	808fc8 <_dtoa_r+0x119c>
  8090b0:	99400117 	ldw	r5,4(r19)
  8090b4:	d9001617 	ldw	r4,88(sp)
  8090b8:	0809f140 	call	809f14 <_Balloc>
  8090bc:	99800417 	ldw	r6,16(r19)
  8090c0:	11000304 	addi	r4,r2,12
  8090c4:	99400304 	addi	r5,r19,12
  8090c8:	318d883a 	add	r6,r6,r6
  8090cc:	318d883a 	add	r6,r6,r6
  8090d0:	31800204 	addi	r6,r6,8
  8090d4:	1023883a 	mov	r17,r2
  8090d8:	08033400 	call	803340 <memcpy>
  8090dc:	d9001617 	ldw	r4,88(sp)
  8090e0:	880b883a 	mov	r5,r17
  8090e4:	01800044 	movi	r6,1
  8090e8:	080a2d80 	call	80a2d8 <__lshift>
  8090ec:	100b883a 	mov	r5,r2
  8090f0:	003d9c06 	br	808764 <_dtoa_r+0x938>
  8090f4:	00800e44 	movi	r2,57
  8090f8:	b8807026 	beq	r23,r2,8092bc <_dtoa_r+0x1490>
  8090fc:	b8800044 	addi	r2,r23,1
  809100:	b7000044 	addi	fp,r22,1
  809104:	b0800005 	stb	r2,0(r22)
  809108:	003e4106 	br	808a10 <_dtoa_r+0xbe4>
  80910c:	d8800317 	ldw	r2,12(sp)
  809110:	01802074 	movhi	r6,129
  809114:	31946b04 	addi	r6,r6,20908
  809118:	b009883a 	mov	r4,r22
  80911c:	100e90fa 	slli	r7,r2,3
  809120:	b80b883a 	mov	r5,r23
  809124:	398f883a 	add	r7,r7,r6
  809128:	38bffe17 	ldw	r2,-8(r7)
  80912c:	d9800517 	ldw	r6,20(sp)
  809130:	38ffff17 	ldw	r3,-4(r7)
  809134:	37000044 	addi	fp,r6,1
  809138:	180f883a 	mov	r7,r3
  80913c:	100d883a 	mov	r6,r2
  809140:	080ef280 	call	80ef28 <__muldf3>
  809144:	a80b883a 	mov	r5,r21
  809148:	a009883a 	mov	r4,r20
  80914c:	182f883a 	mov	r23,r3
  809150:	102d883a 	mov	r22,r2
  809154:	080f96c0 	call	80f96c <__fixdfsi>
  809158:	1009883a 	mov	r4,r2
  80915c:	1027883a 	mov	r19,r2
  809160:	080f8740 	call	80f874 <__floatsidf>
  809164:	a80b883a 	mov	r5,r21
  809168:	a009883a 	mov	r4,r20
  80916c:	180f883a 	mov	r7,r3
  809170:	100d883a 	mov	r6,r2
  809174:	080ee340 	call	80ee34 <__subdf3>
  809178:	180b883a 	mov	r5,r3
  80917c:	d8c00517 	ldw	r3,20(sp)
  809180:	9cc00c04 	addi	r19,r19,48
  809184:	1009883a 	mov	r4,r2
  809188:	1cc00005 	stb	r19,0(r3)
  80918c:	2021883a 	mov	r16,r4
  809190:	d9000317 	ldw	r4,12(sp)
  809194:	00800044 	movi	r2,1
  809198:	2823883a 	mov	r17,r5
  80919c:	20802226 	beq	r4,r2,809228 <_dtoa_r+0x13fc>
  8091a0:	1029883a 	mov	r20,r2
  8091a4:	0005883a 	mov	r2,zero
  8091a8:	00d00934 	movhi	r3,16420
  8091ac:	180f883a 	mov	r7,r3
  8091b0:	100d883a 	mov	r6,r2
  8091b4:	880b883a 	mov	r5,r17
  8091b8:	8009883a 	mov	r4,r16
  8091bc:	080ef280 	call	80ef28 <__muldf3>
  8091c0:	180b883a 	mov	r5,r3
  8091c4:	1009883a 	mov	r4,r2
  8091c8:	1823883a 	mov	r17,r3
  8091cc:	1021883a 	mov	r16,r2
  8091d0:	080f96c0 	call	80f96c <__fixdfsi>
  8091d4:	1009883a 	mov	r4,r2
  8091d8:	102b883a 	mov	r21,r2
  8091dc:	080f8740 	call	80f874 <__floatsidf>
  8091e0:	880b883a 	mov	r5,r17
  8091e4:	8009883a 	mov	r4,r16
  8091e8:	180f883a 	mov	r7,r3
  8091ec:	100d883a 	mov	r6,r2
  8091f0:	080ee340 	call	80ee34 <__subdf3>
  8091f4:	180b883a 	mov	r5,r3
  8091f8:	d8c00517 	ldw	r3,20(sp)
  8091fc:	1009883a 	mov	r4,r2
  809200:	ad400c04 	addi	r21,r21,48
  809204:	1d05883a 	add	r2,r3,r20
  809208:	15400005 	stb	r21,0(r2)
  80920c:	2021883a 	mov	r16,r4
  809210:	d9000317 	ldw	r4,12(sp)
  809214:	a5000044 	addi	r20,r20,1
  809218:	2823883a 	mov	r17,r5
  80921c:	a13fe11e 	bne	r20,r4,8091a4 <_dtoa_r+0x1378>
  809220:	e505883a 	add	r2,fp,r20
  809224:	173fffc4 	addi	fp,r2,-1
  809228:	0025883a 	mov	r18,zero
  80922c:	04cff834 	movhi	r19,16352
  809230:	b009883a 	mov	r4,r22
  809234:	b80b883a 	mov	r5,r23
  809238:	900d883a 	mov	r6,r18
  80923c:	980f883a 	mov	r7,r19
  809240:	080eeb40 	call	80eeb4 <__adddf3>
  809244:	180b883a 	mov	r5,r3
  809248:	1009883a 	mov	r4,r2
  80924c:	800d883a 	mov	r6,r16
  809250:	880f883a 	mov	r7,r17
  809254:	080f7640 	call	80f764 <__ltdf2>
  809258:	103cab16 	blt	r2,zero,808508 <_dtoa_r+0x6dc>
  80925c:	0009883a 	mov	r4,zero
  809260:	980b883a 	mov	r5,r19
  809264:	b80f883a 	mov	r7,r23
  809268:	b00d883a 	mov	r6,r22
  80926c:	080ee340 	call	80ee34 <__subdf3>
  809270:	180b883a 	mov	r5,r3
  809274:	880f883a 	mov	r7,r17
  809278:	1009883a 	mov	r4,r2
  80927c:	800d883a 	mov	r6,r16
  809280:	080f6540 	call	80f654 <__gtdf2>
  809284:	00bc470e 	bge	zero,r2,8083a4 <_dtoa_r+0x578>
  809288:	00c00c04 	movi	r3,48
  80928c:	e73fffc4 	addi	fp,fp,-1
  809290:	e0800007 	ldb	r2,0(fp)
  809294:	10fffd26 	beq	r2,r3,80928c <_dtoa_r+0x1460>
  809298:	d9800417 	ldw	r6,16(sp)
  80929c:	e7000044 	addi	fp,fp,1
  8092a0:	d9800d15 	stw	r6,52(sp)
  8092a4:	003cab06 	br	808554 <_dtoa_r+0x728>
  8092a8:	d8c00f17 	ldw	r3,60(sp)
  8092ac:	d9001117 	ldw	r4,68(sp)
  8092b0:	20e1c83a 	sub	r16,r4,r3
  8092b4:	0007883a 	mov	r3,zero
  8092b8:	003d9b06 	br	808928 <_dtoa_r+0xafc>
  8092bc:	00800e44 	movi	r2,57
  8092c0:	b0800005 	stb	r2,0(r22)
  8092c4:	b5800044 	addi	r22,r22,1
  8092c8:	003dc106 	br	8089d0 <_dtoa_r+0xba4>
  8092cc:	05800084 	movi	r22,2
  8092d0:	003bf706 	br	8082b0 <_dtoa_r+0x484>
  8092d4:	d9000f17 	ldw	r4,60(sp)
  8092d8:	013c000e 	bge	zero,r4,8082dc <_dtoa_r+0x4b0>
  8092dc:	d9800e17 	ldw	r6,56(sp)
  8092e0:	01bc300e 	bge	zero,r6,8083a4 <_dtoa_r+0x578>
  8092e4:	0005883a 	mov	r2,zero
  8092e8:	00d00934 	movhi	r3,16420
  8092ec:	a80b883a 	mov	r5,r21
  8092f0:	180f883a 	mov	r7,r3
  8092f4:	a009883a 	mov	r4,r20
  8092f8:	100d883a 	mov	r6,r2
  8092fc:	080ef280 	call	80ef28 <__muldf3>
  809300:	b1000044 	addi	r4,r22,1
  809304:	1021883a 	mov	r16,r2
  809308:	1823883a 	mov	r17,r3
  80930c:	080f8740 	call	80f874 <__floatsidf>
  809310:	880b883a 	mov	r5,r17
  809314:	8009883a 	mov	r4,r16
  809318:	180f883a 	mov	r7,r3
  80931c:	100d883a 	mov	r6,r2
  809320:	080ef280 	call	80ef28 <__muldf3>
  809324:	0011883a 	mov	r8,zero
  809328:	02500734 	movhi	r9,16412
  80932c:	180b883a 	mov	r5,r3
  809330:	480f883a 	mov	r7,r9
  809334:	1009883a 	mov	r4,r2
  809338:	400d883a 	mov	r6,r8
  80933c:	080eeb40 	call	80eeb4 <__adddf3>
  809340:	102d883a 	mov	r22,r2
  809344:	00bf3034 	movhi	r2,64704
  809348:	10ef883a 	add	r23,r2,r3
  80934c:	d8800d17 	ldw	r2,52(sp)
  809350:	d8c00e17 	ldw	r3,56(sp)
  809354:	8029883a 	mov	r20,r16
  809358:	10bfffc4 	addi	r2,r2,-1
  80935c:	882b883a 	mov	r21,r17
  809360:	d8800415 	stw	r2,16(sp)
  809364:	d8c00315 	stw	r3,12(sp)
  809368:	003e8306 	br	808d78 <_dtoa_r+0xf4c>
  80936c:	d8800117 	ldw	r2,4(sp)
  809370:	dc001117 	ldw	r16,68(sp)
  809374:	dc801017 	ldw	r18,64(sp)
  809378:	00c00d84 	movi	r3,54
  80937c:	1887c83a 	sub	r3,r3,r2
  809380:	003d6906 	br	808928 <_dtoa_r+0xafc>
  809384:	01800044 	movi	r6,1
  809388:	3021883a 	mov	r16,r6
  80938c:	d9800f15 	stw	r6,60(sp)
  809390:	d9802615 	stw	r6,152(sp)
  809394:	d9800e15 	stw	r6,56(sp)
  809398:	003b9306 	br	8081e8 <_dtoa_r+0x3bc>
  80939c:	b021883a 	mov	r16,r22
  8093a0:	dd800f15 	stw	r22,60(sp)
  8093a4:	003b9006 	br	8081e8 <_dtoa_r+0x3bc>
  8093a8:	103e221e 	bne	r2,zero,808c34 <_dtoa_r+0xe08>
  8093ac:	b880004c 	andi	r2,r23,1
  8093b0:	1005003a 	cmpeq	r2,r2,zero
  8093b4:	103e1f1e 	bne	r2,zero,808c34 <_dtoa_r+0xe08>
  8093b8:	003e1b06 	br	808c28 <_dtoa_r+0xdfc>
  8093bc:	d9001617 	ldw	r4,88(sp)
  8093c0:	980b883a 	mov	r5,r19
  8093c4:	01800284 	movi	r6,10
  8093c8:	000f883a 	mov	r7,zero
  8093cc:	080a6480 	call	80a648 <__multadd>
  8093d0:	d8c00e17 	ldw	r3,56(sp)
  8093d4:	1027883a 	mov	r19,r2
  8093d8:	d8c00f15 	stw	r3,60(sp)
  8093dc:	003cd306 	br	80872c <_dtoa_r+0x900>

008093e0 <__sflags>:
  8093e0:	28c00007 	ldb	r3,0(r5)
  8093e4:	00801c84 	movi	r2,114
  8093e8:	18800926 	beq	r3,r2,809410 <__sflags+0x30>
  8093ec:	00801dc4 	movi	r2,119
  8093f0:	18801426 	beq	r3,r2,809444 <__sflags+0x64>
  8093f4:	00801844 	movi	r2,97
  8093f8:	18801626 	beq	r3,r2,809454 <__sflags+0x74>
  8093fc:	0007883a 	mov	r3,zero
  809400:	00800584 	movi	r2,22
  809404:	20800015 	stw	r2,0(r4)
  809408:	1805883a 	mov	r2,r3
  80940c:	f800283a 	ret
  809410:	000f883a 	mov	r7,zero
  809414:	0011883a 	mov	r8,zero
  809418:	00c00104 	movi	r3,4
  80941c:	28800047 	ldb	r2,1(r5)
  809420:	10000426 	beq	r2,zero,809434 <__sflags+0x54>
  809424:	01000ac4 	movi	r4,43
  809428:	11000e26 	beq	r2,r4,809464 <__sflags+0x84>
  80942c:	28800087 	ldb	r2,2(r5)
  809430:	11000c26 	beq	r2,r4,809464 <__sflags+0x84>
  809434:	3a04b03a 	or	r2,r7,r8
  809438:	30800015 	stw	r2,0(r6)
  80943c:	1805883a 	mov	r2,r3
  809440:	f800283a 	ret
  809444:	01c00044 	movi	r7,1
  809448:	02018004 	movi	r8,1536
  80944c:	00c00204 	movi	r3,8
  809450:	003ff206 	br	80941c <__sflags+0x3c>
  809454:	01c00044 	movi	r7,1
  809458:	02008204 	movi	r8,520
  80945c:	00c04204 	movi	r3,264
  809460:	003fee06 	br	80941c <__sflags+0x3c>
  809464:	00bffcc4 	movi	r2,-13
  809468:	1884703a 	and	r2,r3,r2
  80946c:	01c00084 	movi	r7,2
  809470:	10c00414 	ori	r3,r2,16
  809474:	3a04b03a 	or	r2,r7,r8
  809478:	30800015 	stw	r2,0(r6)
  80947c:	003fef06 	br	80943c <__sflags+0x5c>

00809480 <_fread_r>:
  809480:	defff504 	addi	sp,sp,-44
  809484:	ddc00815 	stw	r23,32(sp)
  809488:	39af383a 	mul	r23,r7,r6
  80948c:	df000915 	stw	fp,36(sp)
  809490:	dd800715 	stw	r22,28(sp)
  809494:	dcc00415 	stw	r19,16(sp)
  809498:	dc000115 	stw	r16,4(sp)
  80949c:	dfc00a15 	stw	ra,40(sp)
  8094a0:	dd400615 	stw	r21,24(sp)
  8094a4:	dd000515 	stw	r20,20(sp)
  8094a8:	dc800315 	stw	r18,12(sp)
  8094ac:	dc400215 	stw	r17,8(sp)
  8094b0:	d9800015 	stw	r6,0(sp)
  8094b4:	3839883a 	mov	fp,r7
  8094b8:	2821883a 	mov	r16,r5
  8094bc:	202d883a 	mov	r22,r4
  8094c0:	dcc00b17 	ldw	r19,44(sp)
  8094c4:	b8005926 	beq	r23,zero,80962c <_fread_r+0x1ac>
  8094c8:	20000226 	beq	r4,zero,8094d4 <_fread_r+0x54>
  8094cc:	20800e17 	ldw	r2,56(r4)
  8094d0:	10005826 	beq	r2,zero,809634 <_fread_r+0x1b4>
  8094d4:	9c400117 	ldw	r17,4(r19)
  8094d8:	88005916 	blt	r17,zero,809640 <_fread_r+0x1c0>
  8094dc:	9880030b 	ldhu	r2,12(r19)
  8094e0:	8029883a 	mov	r20,r16
  8094e4:	1080008c 	andi	r2,r2,2
  8094e8:	1000221e 	bne	r2,zero,809574 <_fread_r+0xf4>
  8094ec:	b825883a 	mov	r18,r23
  8094f0:	00000106 	br	8094f8 <_fread_r+0x78>
  8094f4:	9c400117 	ldw	r17,4(r19)
  8094f8:	a009883a 	mov	r4,r20
  8094fc:	880d883a 	mov	r6,r17
  809500:	8c80542e 	bgeu	r17,r18,809654 <_fread_r+0x1d4>
  809504:	99400017 	ldw	r5,0(r19)
  809508:	a469883a 	add	r20,r20,r17
  80950c:	9465c83a 	sub	r18,r18,r17
  809510:	08033400 	call	803340 <memcpy>
  809514:	98800017 	ldw	r2,0(r19)
  809518:	b009883a 	mov	r4,r22
  80951c:	980b883a 	mov	r5,r19
  809520:	1461883a 	add	r16,r2,r17
  809524:	9c000015 	stw	r16,0(r19)
  809528:	0803cf00 	call	803cf0 <__srefill_r>
  80952c:	103ff126 	beq	r2,zero,8094f4 <_fread_r+0x74>
  809530:	d9400017 	ldw	r5,0(sp)
  809534:	bc89c83a 	sub	r4,r23,r18
  809538:	080fd880 	call	80fd88 <__udivsi3>
  80953c:	1039883a 	mov	fp,r2
  809540:	e005883a 	mov	r2,fp
  809544:	dfc00a17 	ldw	ra,40(sp)
  809548:	df000917 	ldw	fp,36(sp)
  80954c:	ddc00817 	ldw	r23,32(sp)
  809550:	dd800717 	ldw	r22,28(sp)
  809554:	dd400617 	ldw	r21,24(sp)
  809558:	dd000517 	ldw	r20,20(sp)
  80955c:	dcc00417 	ldw	r19,16(sp)
  809560:	dc800317 	ldw	r18,12(sp)
  809564:	dc400217 	ldw	r17,8(sp)
  809568:	dc000117 	ldw	r16,4(sp)
  80956c:	dec00b04 	addi	sp,sp,44
  809570:	f800283a 	ret
  809574:	b825883a 	mov	r18,r23
  809578:	8dc03436 	bltu	r17,r23,80964c <_fread_r+0x1cc>
  80957c:	99400017 	ldw	r5,0(r19)
  809580:	a009883a 	mov	r4,r20
  809584:	900d883a 	mov	r6,r18
  809588:	08033400 	call	803340 <memcpy>
  80958c:	9c000017 	ldw	r16,0(r19)
  809590:	98800117 	ldw	r2,4(r19)
  809594:	99400c17 	ldw	r5,48(r19)
  809598:	84a1883a 	add	r16,r16,r18
  80959c:	14a3c83a 	sub	r17,r2,r18
  8095a0:	a4ab883a 	add	r21,r20,r18
  8095a4:	9c400115 	stw	r17,4(r19)
  8095a8:	9c000015 	stw	r16,0(r19)
  8095ac:	bca9c83a 	sub	r20,r23,r18
  8095b0:	28000826 	beq	r5,zero,8095d4 <_fread_r+0x154>
  8095b4:	a03fe226 	beq	r20,zero,809540 <_fread_r+0xc0>
  8095b8:	98801004 	addi	r2,r19,64
  8095bc:	28800326 	beq	r5,r2,8095cc <_fread_r+0x14c>
  8095c0:	b009883a 	mov	r4,r22
  8095c4:	0801b840 	call	801b84 <_free_r>
  8095c8:	9c000017 	ldw	r16,0(r19)
  8095cc:	98000c15 	stw	zero,48(r19)
  8095d0:	00000106 	br	8095d8 <_fread_r+0x158>
  8095d4:	a03fda26 	beq	r20,zero,809540 <_fread_r+0xc0>
  8095d8:	9c800417 	ldw	r18,16(r19)
  8095dc:	9c400517 	ldw	r17,20(r19)
  8095e0:	9d400015 	stw	r21,0(r19)
  8095e4:	9d400415 	stw	r21,16(r19)
  8095e8:	9d000515 	stw	r20,20(r19)
  8095ec:	b009883a 	mov	r4,r22
  8095f0:	980b883a 	mov	r5,r19
  8095f4:	0803cf00 	call	803cf0 <__srefill_r>
  8095f8:	98c00117 	ldw	r3,4(r19)
  8095fc:	9c800415 	stw	r18,16(r19)
  809600:	9c400515 	stw	r17,20(r19)
  809604:	a8eb883a 	add	r21,r21,r3
  809608:	9c000015 	stw	r16,0(r19)
  80960c:	a0e9c83a 	sub	r20,r20,r3
  809610:	98000115 	stw	zero,4(r19)
  809614:	103fef26 	beq	r2,zero,8095d4 <_fread_r+0x154>
  809618:	d9400017 	ldw	r5,0(sp)
  80961c:	bd09c83a 	sub	r4,r23,r20
  809620:	080fd880 	call	80fd88 <__udivsi3>
  809624:	1039883a 	mov	fp,r2
  809628:	003fc506 	br	809540 <_fread_r+0xc0>
  80962c:	0039883a 	mov	fp,zero
  809630:	003fc306 	br	809540 <_fread_r+0xc0>
  809634:	08016000 	call	801600 <__sinit>
  809638:	9c400117 	ldw	r17,4(r19)
  80963c:	883fa70e 	bge	r17,zero,8094dc <_fread_r+0x5c>
  809640:	0023883a 	mov	r17,zero
  809644:	98000115 	stw	zero,4(r19)
  809648:	003fa406 	br	8094dc <_fread_r+0x5c>
  80964c:	8825883a 	mov	r18,r17
  809650:	003fca06 	br	80957c <_fread_r+0xfc>
  809654:	99400017 	ldw	r5,0(r19)
  809658:	900d883a 	mov	r6,r18
  80965c:	08033400 	call	803340 <memcpy>
  809660:	98c00117 	ldw	r3,4(r19)
  809664:	98800017 	ldw	r2,0(r19)
  809668:	1c87c83a 	sub	r3,r3,r18
  80966c:	1485883a 	add	r2,r2,r18
  809670:	98800015 	stw	r2,0(r19)
  809674:	98c00115 	stw	r3,4(r19)
  809678:	003fb106 	br	809540 <_fread_r+0xc0>

0080967c <fread>:
  80967c:	00802074 	movhi	r2,129
  809680:	109c4404 	addi	r2,r2,28944
  809684:	2017883a 	mov	r11,r4
  809688:	11000017 	ldw	r4,0(r2)
  80968c:	defffe04 	addi	sp,sp,-8
  809690:	3013883a 	mov	r9,r6
  809694:	2805883a 	mov	r2,r5
  809698:	d9c00015 	stw	r7,0(sp)
  80969c:	580b883a 	mov	r5,r11
  8096a0:	100d883a 	mov	r6,r2
  8096a4:	480f883a 	mov	r7,r9
  8096a8:	dfc00115 	stw	ra,4(sp)
  8096ac:	08094800 	call	809480 <_fread_r>
  8096b0:	dfc00117 	ldw	ra,4(sp)
  8096b4:	dec00204 	addi	sp,sp,8
  8096b8:	f800283a 	ret

008096bc <_isatty_r>:
  8096bc:	defffd04 	addi	sp,sp,-12
  8096c0:	dc000015 	stw	r16,0(sp)
  8096c4:	040020b4 	movhi	r16,130
  8096c8:	84239d04 	addi	r16,r16,-29068
  8096cc:	dc400115 	stw	r17,4(sp)
  8096d0:	80000015 	stw	zero,0(r16)
  8096d4:	2023883a 	mov	r17,r4
  8096d8:	2809883a 	mov	r4,r5
  8096dc:	dfc00215 	stw	ra,8(sp)
  8096e0:	0810bf80 	call	810bf8 <isatty>
  8096e4:	1007883a 	mov	r3,r2
  8096e8:	00bfffc4 	movi	r2,-1
  8096ec:	18800626 	beq	r3,r2,809708 <_isatty_r+0x4c>
  8096f0:	1805883a 	mov	r2,r3
  8096f4:	dfc00217 	ldw	ra,8(sp)
  8096f8:	dc400117 	ldw	r17,4(sp)
  8096fc:	dc000017 	ldw	r16,0(sp)
  809700:	dec00304 	addi	sp,sp,12
  809704:	f800283a 	ret
  809708:	80800017 	ldw	r2,0(r16)
  80970c:	103ff826 	beq	r2,zero,8096f0 <_isatty_r+0x34>
  809710:	88800015 	stw	r2,0(r17)
  809714:	1805883a 	mov	r2,r3
  809718:	dfc00217 	ldw	ra,8(sp)
  80971c:	dc400117 	ldw	r17,4(sp)
  809720:	dc000017 	ldw	r16,0(sp)
  809724:	dec00304 	addi	sp,sp,12
  809728:	f800283a 	ret

0080972c <iswspace>:
  80972c:	00803fc4 	movi	r2,255
  809730:	0007883a 	mov	r3,zero
  809734:	11000636 	bltu	r2,r4,809750 <iswspace+0x24>
  809738:	00802074 	movhi	r2,129
  80973c:	109c4804 	addi	r2,r2,28960
  809740:	10c00017 	ldw	r3,0(r2)
  809744:	1907883a 	add	r3,r3,r4
  809748:	18800003 	ldbu	r2,0(r3)
  80974c:	10c0020c 	andi	r3,r2,8
  809750:	1805883a 	mov	r2,r3
  809754:	f800283a 	ret

00809758 <__locale_charset>:
  809758:	d0a00a17 	ldw	r2,-32728(gp)
  80975c:	f800283a 	ret

00809760 <_localeconv_r>:
  809760:	00802074 	movhi	r2,129
  809764:	10945f04 	addi	r2,r2,20860
  809768:	f800283a 	ret

0080976c <localeconv>:
  80976c:	00802074 	movhi	r2,129
  809770:	109c4404 	addi	r2,r2,28944
  809774:	11000017 	ldw	r4,0(r2)
  809778:	08097601 	jmpi	809760 <_localeconv_r>

0080977c <_setlocale_r>:
  80977c:	defffc04 	addi	sp,sp,-16
  809780:	00c02074 	movhi	r3,129
  809784:	18d38904 	addi	r3,r3,20004
  809788:	dc800215 	stw	r18,8(sp)
  80978c:	dc400115 	stw	r17,4(sp)
  809790:	dc000015 	stw	r16,0(sp)
  809794:	2023883a 	mov	r17,r4
  809798:	2825883a 	mov	r18,r5
  80979c:	dfc00315 	stw	ra,12(sp)
  8097a0:	3021883a 	mov	r16,r6
  8097a4:	3009883a 	mov	r4,r6
  8097a8:	180b883a 	mov	r5,r3
  8097ac:	30000926 	beq	r6,zero,8097d4 <_setlocale_r+0x58>
  8097b0:	080ab380 	call	80ab38 <strcmp>
  8097b4:	8009883a 	mov	r4,r16
  8097b8:	01402074 	movhi	r5,129
  8097bc:	29539a04 	addi	r5,r5,20072
  8097c0:	10000b1e 	bne	r2,zero,8097f0 <_setlocale_r+0x74>
  8097c4:	8c000d15 	stw	r16,52(r17)
  8097c8:	8c800c15 	stw	r18,48(r17)
  8097cc:	00c02074 	movhi	r3,129
  8097d0:	18d38904 	addi	r3,r3,20004
  8097d4:	1805883a 	mov	r2,r3
  8097d8:	dfc00317 	ldw	ra,12(sp)
  8097dc:	dc800217 	ldw	r18,8(sp)
  8097e0:	dc400117 	ldw	r17,4(sp)
  8097e4:	dc000017 	ldw	r16,0(sp)
  8097e8:	dec00404 	addi	sp,sp,16
  8097ec:	f800283a 	ret
  8097f0:	080ab380 	call	80ab38 <strcmp>
  8097f4:	0007883a 	mov	r3,zero
  8097f8:	103ff226 	beq	r2,zero,8097c4 <_setlocale_r+0x48>
  8097fc:	003ff506 	br	8097d4 <_setlocale_r+0x58>

00809800 <setlocale>:
  809800:	01802074 	movhi	r6,129
  809804:	319c4404 	addi	r6,r6,28944
  809808:	2007883a 	mov	r3,r4
  80980c:	31000017 	ldw	r4,0(r6)
  809810:	280d883a 	mov	r6,r5
  809814:	180b883a 	mov	r5,r3
  809818:	080977c1 	jmpi	80977c <_setlocale_r>

0080981c <_lseek_r>:
  80981c:	defffd04 	addi	sp,sp,-12
  809820:	dc000015 	stw	r16,0(sp)
  809824:	040020b4 	movhi	r16,130
  809828:	84239d04 	addi	r16,r16,-29068
  80982c:	dc400115 	stw	r17,4(sp)
  809830:	80000015 	stw	zero,0(r16)
  809834:	2023883a 	mov	r17,r4
  809838:	2809883a 	mov	r4,r5
  80983c:	300b883a 	mov	r5,r6
  809840:	380d883a 	mov	r6,r7
  809844:	dfc00215 	stw	ra,8(sp)
  809848:	0810e040 	call	810e04 <lseek>
  80984c:	1007883a 	mov	r3,r2
  809850:	00bfffc4 	movi	r2,-1
  809854:	18800626 	beq	r3,r2,809870 <_lseek_r+0x54>
  809858:	1805883a 	mov	r2,r3
  80985c:	dfc00217 	ldw	ra,8(sp)
  809860:	dc400117 	ldw	r17,4(sp)
  809864:	dc000017 	ldw	r16,0(sp)
  809868:	dec00304 	addi	sp,sp,12
  80986c:	f800283a 	ret
  809870:	80800017 	ldw	r2,0(r16)
  809874:	103ff826 	beq	r2,zero,809858 <_lseek_r+0x3c>
  809878:	88800015 	stw	r2,0(r17)
  80987c:	1805883a 	mov	r2,r3
  809880:	dfc00217 	ldw	ra,8(sp)
  809884:	dc400117 	ldw	r17,4(sp)
  809888:	dc000017 	ldw	r16,0(sp)
  80988c:	dec00304 	addi	sp,sp,12
  809890:	f800283a 	ret

00809894 <_mbrtowc_r>:
  809894:	defffc04 	addi	sp,sp,-16
  809898:	dc400215 	stw	r17,8(sp)
  80989c:	dc000115 	stw	r16,4(sp)
  8098a0:	dfc00315 	stw	ra,12(sp)
  8098a4:	dc000417 	ldw	r16,16(sp)
  8098a8:	2023883a 	mov	r17,r4
  8098ac:	30000f26 	beq	r6,zero,8098ec <_mbrtowc_r+0x58>
  8098b0:	dc000015 	stw	r16,0(sp)
  8098b4:	08099540 	call	809954 <_mbtowc_r>
  8098b8:	1007883a 	mov	r3,r2
  8098bc:	00bfffc4 	movi	r2,-1
  8098c0:	1809883a 	mov	r4,r3
  8098c4:	1880111e 	bne	r3,r2,80990c <_mbrtowc_r+0x78>
  8098c8:	80000015 	stw	zero,0(r16)
  8098cc:	00802284 	movi	r2,138
  8098d0:	88800015 	stw	r2,0(r17)
  8098d4:	2005883a 	mov	r2,r4
  8098d8:	dfc00317 	ldw	ra,12(sp)
  8098dc:	dc400217 	ldw	r17,8(sp)
  8098e0:	dc000117 	ldw	r16,4(sp)
  8098e4:	dec00404 	addi	sp,sp,16
  8098e8:	f800283a 	ret
  8098ec:	000b883a 	mov	r5,zero
  8098f0:	01802074 	movhi	r6,129
  8098f4:	31939a04 	addi	r6,r6,20072
  8098f8:	01c00044 	movi	r7,1
  8098fc:	dc000015 	stw	r16,0(sp)
  809900:	08099540 	call	809954 <_mbtowc_r>
  809904:	1007883a 	mov	r3,r2
  809908:	003fec06 	br	8098bc <_mbrtowc_r+0x28>
  80990c:	1809883a 	mov	r4,r3
  809910:	003ff006 	br	8098d4 <_mbrtowc_r+0x40>

00809914 <mbrtowc>:
  809914:	00802074 	movhi	r2,129
  809918:	109c4404 	addi	r2,r2,28944
  80991c:	2017883a 	mov	r11,r4
  809920:	11000017 	ldw	r4,0(r2)
  809924:	defffe04 	addi	sp,sp,-8
  809928:	3013883a 	mov	r9,r6
  80992c:	2805883a 	mov	r2,r5
  809930:	d9c00015 	stw	r7,0(sp)
  809934:	580b883a 	mov	r5,r11
  809938:	100d883a 	mov	r6,r2
  80993c:	480f883a 	mov	r7,r9
  809940:	dfc00115 	stw	ra,4(sp)
  809944:	08098940 	call	809894 <_mbrtowc_r>
  809948:	dfc00117 	ldw	ra,4(sp)
  80994c:	dec00204 	addi	sp,sp,8
  809950:	f800283a 	ret

00809954 <_mbtowc_r>:
  809954:	deffff04 	addi	sp,sp,-4
  809958:	0005883a 	mov	r2,zero
  80995c:	28000326 	beq	r5,zero,80996c <_mbtowc_r+0x18>
  809960:	3000041e 	bne	r6,zero,809974 <_mbtowc_r+0x20>
  809964:	dec00104 	addi	sp,sp,4
  809968:	f800283a 	ret
  80996c:	d80b883a 	mov	r5,sp
  809970:	303ffc26 	beq	r6,zero,809964 <_mbtowc_r+0x10>
  809974:	00bfff84 	movi	r2,-2
  809978:	383ffa26 	beq	r7,zero,809964 <_mbtowc_r+0x10>
  80997c:	30800003 	ldbu	r2,0(r6)
  809980:	28800015 	stw	r2,0(r5)
  809984:	30c00003 	ldbu	r3,0(r6)
  809988:	1804c03a 	cmpne	r2,r3,zero
  80998c:	dec00104 	addi	sp,sp,4
  809990:	f800283a 	ret

00809994 <_Bfree>:
  809994:	28000826 	beq	r5,zero,8099b8 <_Bfree+0x24>
  809998:	28800117 	ldw	r2,4(r5)
  80999c:	21001317 	ldw	r4,76(r4)
  8099a0:	1085883a 	add	r2,r2,r2
  8099a4:	1085883a 	add	r2,r2,r2
  8099a8:	1105883a 	add	r2,r2,r4
  8099ac:	10c00017 	ldw	r3,0(r2)
  8099b0:	28c00015 	stw	r3,0(r5)
  8099b4:	11400015 	stw	r5,0(r2)
  8099b8:	f800283a 	ret

008099bc <__hi0bits>:
  8099bc:	20bfffec 	andhi	r2,r4,65535
  8099c0:	10001426 	beq	r2,zero,809a14 <__hi0bits+0x58>
  8099c4:	0007883a 	mov	r3,zero
  8099c8:	20bfc02c 	andhi	r2,r4,65280
  8099cc:	1000021e 	bne	r2,zero,8099d8 <__hi0bits+0x1c>
  8099d0:	2008923a 	slli	r4,r4,8
  8099d4:	18c00204 	addi	r3,r3,8
  8099d8:	20bc002c 	andhi	r2,r4,61440
  8099dc:	1000021e 	bne	r2,zero,8099e8 <__hi0bits+0x2c>
  8099e0:	2008913a 	slli	r4,r4,4
  8099e4:	18c00104 	addi	r3,r3,4
  8099e8:	20b0002c 	andhi	r2,r4,49152
  8099ec:	1000031e 	bne	r2,zero,8099fc <__hi0bits+0x40>
  8099f0:	2105883a 	add	r2,r4,r4
  8099f4:	18c00084 	addi	r3,r3,2
  8099f8:	1089883a 	add	r4,r2,r2
  8099fc:	20000316 	blt	r4,zero,809a0c <__hi0bits+0x50>
  809a00:	2090002c 	andhi	r2,r4,16384
  809a04:	10000626 	beq	r2,zero,809a20 <__hi0bits+0x64>
  809a08:	18c00044 	addi	r3,r3,1
  809a0c:	1805883a 	mov	r2,r3
  809a10:	f800283a 	ret
  809a14:	2008943a 	slli	r4,r4,16
  809a18:	00c00404 	movi	r3,16
  809a1c:	003fea06 	br	8099c8 <__hi0bits+0xc>
  809a20:	00c00804 	movi	r3,32
  809a24:	1805883a 	mov	r2,r3
  809a28:	f800283a 	ret

00809a2c <__lo0bits>:
  809a2c:	20c00017 	ldw	r3,0(r4)
  809a30:	188001cc 	andi	r2,r3,7
  809a34:	10000a26 	beq	r2,zero,809a60 <__lo0bits+0x34>
  809a38:	1880004c 	andi	r2,r3,1
  809a3c:	1005003a 	cmpeq	r2,r2,zero
  809a40:	10002126 	beq	r2,zero,809ac8 <__lo0bits+0x9c>
  809a44:	1880008c 	andi	r2,r3,2
  809a48:	1000251e 	bne	r2,zero,809ae0 <__lo0bits+0xb4>
  809a4c:	1804d0ba 	srli	r2,r3,2
  809a50:	01400084 	movi	r5,2
  809a54:	20800015 	stw	r2,0(r4)
  809a58:	2805883a 	mov	r2,r5
  809a5c:	f800283a 	ret
  809a60:	18bfffcc 	andi	r2,r3,65535
  809a64:	10001526 	beq	r2,zero,809abc <__lo0bits+0x90>
  809a68:	000b883a 	mov	r5,zero
  809a6c:	18803fcc 	andi	r2,r3,255
  809a70:	1000021e 	bne	r2,zero,809a7c <__lo0bits+0x50>
  809a74:	1806d23a 	srli	r3,r3,8
  809a78:	29400204 	addi	r5,r5,8
  809a7c:	188003cc 	andi	r2,r3,15
  809a80:	1000021e 	bne	r2,zero,809a8c <__lo0bits+0x60>
  809a84:	1806d13a 	srli	r3,r3,4
  809a88:	29400104 	addi	r5,r5,4
  809a8c:	188000cc 	andi	r2,r3,3
  809a90:	1000021e 	bne	r2,zero,809a9c <__lo0bits+0x70>
  809a94:	1806d0ba 	srli	r3,r3,2
  809a98:	29400084 	addi	r5,r5,2
  809a9c:	1880004c 	andi	r2,r3,1
  809aa0:	1000031e 	bne	r2,zero,809ab0 <__lo0bits+0x84>
  809aa4:	1806d07a 	srli	r3,r3,1
  809aa8:	18000a26 	beq	r3,zero,809ad4 <__lo0bits+0xa8>
  809aac:	29400044 	addi	r5,r5,1
  809ab0:	2805883a 	mov	r2,r5
  809ab4:	20c00015 	stw	r3,0(r4)
  809ab8:	f800283a 	ret
  809abc:	1806d43a 	srli	r3,r3,16
  809ac0:	01400404 	movi	r5,16
  809ac4:	003fe906 	br	809a6c <__lo0bits+0x40>
  809ac8:	000b883a 	mov	r5,zero
  809acc:	2805883a 	mov	r2,r5
  809ad0:	f800283a 	ret
  809ad4:	01400804 	movi	r5,32
  809ad8:	2805883a 	mov	r2,r5
  809adc:	f800283a 	ret
  809ae0:	1804d07a 	srli	r2,r3,1
  809ae4:	01400044 	movi	r5,1
  809ae8:	20800015 	stw	r2,0(r4)
  809aec:	003fda06 	br	809a58 <__lo0bits+0x2c>

00809af0 <__mcmp>:
  809af0:	20800417 	ldw	r2,16(r4)
  809af4:	28c00417 	ldw	r3,16(r5)
  809af8:	10cfc83a 	sub	r7,r2,r3
  809afc:	38000c1e 	bne	r7,zero,809b30 <__mcmp+0x40>
  809b00:	18c5883a 	add	r2,r3,r3
  809b04:	1085883a 	add	r2,r2,r2
  809b08:	10c00504 	addi	r3,r2,20
  809b0c:	21000504 	addi	r4,r4,20
  809b10:	28cb883a 	add	r5,r5,r3
  809b14:	2085883a 	add	r2,r4,r2
  809b18:	10bfff04 	addi	r2,r2,-4
  809b1c:	297fff04 	addi	r5,r5,-4
  809b20:	11800017 	ldw	r6,0(r2)
  809b24:	28c00017 	ldw	r3,0(r5)
  809b28:	30c0031e 	bne	r6,r3,809b38 <__mcmp+0x48>
  809b2c:	20bffa36 	bltu	r4,r2,809b18 <__mcmp+0x28>
  809b30:	3805883a 	mov	r2,r7
  809b34:	f800283a 	ret
  809b38:	30c00336 	bltu	r6,r3,809b48 <__mcmp+0x58>
  809b3c:	01c00044 	movi	r7,1
  809b40:	3805883a 	mov	r2,r7
  809b44:	f800283a 	ret
  809b48:	01ffffc4 	movi	r7,-1
  809b4c:	003ff806 	br	809b30 <__mcmp+0x40>

00809b50 <__ulp>:
  809b50:	295ffc2c 	andhi	r5,r5,32752
  809b54:	013f3034 	movhi	r4,64704
  809b58:	290b883a 	add	r5,r5,r4
  809b5c:	0145c83a 	sub	r2,zero,r5
  809b60:	1007d53a 	srai	r3,r2,20
  809b64:	000d883a 	mov	r6,zero
  809b68:	0140040e 	bge	zero,r5,809b7c <__ulp+0x2c>
  809b6c:	280f883a 	mov	r7,r5
  809b70:	3807883a 	mov	r3,r7
  809b74:	3005883a 	mov	r2,r6
  809b78:	f800283a 	ret
  809b7c:	008004c4 	movi	r2,19
  809b80:	193ffb04 	addi	r4,r3,-20
  809b84:	10c00c0e 	bge	r2,r3,809bb8 <__ulp+0x68>
  809b88:	008007c4 	movi	r2,31
  809b8c:	1107c83a 	sub	r3,r2,r4
  809b90:	00800784 	movi	r2,30
  809b94:	01400044 	movi	r5,1
  809b98:	11000216 	blt	r2,r4,809ba4 <__ulp+0x54>
  809b9c:	00800044 	movi	r2,1
  809ba0:	10ca983a 	sll	r5,r2,r3
  809ba4:	000f883a 	mov	r7,zero
  809ba8:	280d883a 	mov	r6,r5
  809bac:	3807883a 	mov	r3,r7
  809bb0:	3005883a 	mov	r2,r6
  809bb4:	f800283a 	ret
  809bb8:	00800234 	movhi	r2,8
  809bbc:	10cfd83a 	sra	r7,r2,r3
  809bc0:	000d883a 	mov	r6,zero
  809bc4:	3005883a 	mov	r2,r6
  809bc8:	3807883a 	mov	r3,r7
  809bcc:	f800283a 	ret

00809bd0 <__b2d>:
  809bd0:	20800417 	ldw	r2,16(r4)
  809bd4:	defff904 	addi	sp,sp,-28
  809bd8:	dd000415 	stw	r20,16(sp)
  809bdc:	1085883a 	add	r2,r2,r2
  809be0:	25000504 	addi	r20,r4,20
  809be4:	1085883a 	add	r2,r2,r2
  809be8:	dc000015 	stw	r16,0(sp)
  809bec:	a0a1883a 	add	r16,r20,r2
  809bf0:	dd400515 	stw	r21,20(sp)
  809bf4:	857fff17 	ldw	r21,-4(r16)
  809bf8:	dc400115 	stw	r17,4(sp)
  809bfc:	dfc00615 	stw	ra,24(sp)
  809c00:	a809883a 	mov	r4,r21
  809c04:	2823883a 	mov	r17,r5
  809c08:	dcc00315 	stw	r19,12(sp)
  809c0c:	dc800215 	stw	r18,8(sp)
  809c10:	08099bc0 	call	8099bc <__hi0bits>
  809c14:	100b883a 	mov	r5,r2
  809c18:	00800804 	movi	r2,32
  809c1c:	1145c83a 	sub	r2,r2,r5
  809c20:	88800015 	stw	r2,0(r17)
  809c24:	00800284 	movi	r2,10
  809c28:	80ffff04 	addi	r3,r16,-4
  809c2c:	11401416 	blt	r2,r5,809c80 <__b2d+0xb0>
  809c30:	008002c4 	movi	r2,11
  809c34:	1149c83a 	sub	r4,r2,r5
  809c38:	a0c02736 	bltu	r20,r3,809cd8 <__b2d+0x108>
  809c3c:	000d883a 	mov	r6,zero
  809c40:	28800544 	addi	r2,r5,21
  809c44:	a906d83a 	srl	r3,r21,r4
  809c48:	a884983a 	sll	r2,r21,r2
  809c4c:	1ccffc34 	orhi	r19,r3,16368
  809c50:	11a4b03a 	or	r18,r2,r6
  809c54:	9005883a 	mov	r2,r18
  809c58:	9807883a 	mov	r3,r19
  809c5c:	dfc00617 	ldw	ra,24(sp)
  809c60:	dd400517 	ldw	r21,20(sp)
  809c64:	dd000417 	ldw	r20,16(sp)
  809c68:	dcc00317 	ldw	r19,12(sp)
  809c6c:	dc800217 	ldw	r18,8(sp)
  809c70:	dc400117 	ldw	r17,4(sp)
  809c74:	dc000017 	ldw	r16,0(sp)
  809c78:	dec00704 	addi	sp,sp,28
  809c7c:	f800283a 	ret
  809c80:	a0c00e36 	bltu	r20,r3,809cbc <__b2d+0xec>
  809c84:	293ffd44 	addi	r4,r5,-11
  809c88:	000d883a 	mov	r6,zero
  809c8c:	20000f26 	beq	r4,zero,809ccc <__b2d+0xfc>
  809c90:	00800804 	movi	r2,32
  809c94:	110bc83a 	sub	r5,r2,r4
  809c98:	a0c01236 	bltu	r20,r3,809ce4 <__b2d+0x114>
  809c9c:	000f883a 	mov	r7,zero
  809ca0:	a904983a 	sll	r2,r21,r4
  809ca4:	3146d83a 	srl	r3,r6,r5
  809ca8:	3108983a 	sll	r4,r6,r4
  809cac:	108ffc34 	orhi	r2,r2,16368
  809cb0:	18a6b03a 	or	r19,r3,r2
  809cb4:	3924b03a 	or	r18,r7,r4
  809cb8:	003fe606 	br	809c54 <__b2d+0x84>
  809cbc:	293ffd44 	addi	r4,r5,-11
  809cc0:	81bffe17 	ldw	r6,-8(r16)
  809cc4:	80fffe04 	addi	r3,r16,-8
  809cc8:	203ff11e 	bne	r4,zero,809c90 <__b2d+0xc0>
  809ccc:	accffc34 	orhi	r19,r21,16368
  809cd0:	3025883a 	mov	r18,r6
  809cd4:	003fdf06 	br	809c54 <__b2d+0x84>
  809cd8:	18bfff17 	ldw	r2,-4(r3)
  809cdc:	110cd83a 	srl	r6,r2,r4
  809ce0:	003fd706 	br	809c40 <__b2d+0x70>
  809ce4:	18bfff17 	ldw	r2,-4(r3)
  809ce8:	114ed83a 	srl	r7,r2,r5
  809cec:	003fec06 	br	809ca0 <__b2d+0xd0>

00809cf0 <__ratio>:
  809cf0:	defff904 	addi	sp,sp,-28
  809cf4:	dc400215 	stw	r17,8(sp)
  809cf8:	2823883a 	mov	r17,r5
  809cfc:	d80b883a 	mov	r5,sp
  809d00:	dfc00615 	stw	ra,24(sp)
  809d04:	dd000515 	stw	r20,20(sp)
  809d08:	dcc00415 	stw	r19,16(sp)
  809d0c:	dc800315 	stw	r18,12(sp)
  809d10:	2025883a 	mov	r18,r4
  809d14:	0809bd00 	call	809bd0 <__b2d>
  809d18:	8809883a 	mov	r4,r17
  809d1c:	d9400104 	addi	r5,sp,4
  809d20:	1027883a 	mov	r19,r2
  809d24:	1829883a 	mov	r20,r3
  809d28:	0809bd00 	call	809bd0 <__b2d>
  809d2c:	89000417 	ldw	r4,16(r17)
  809d30:	91c00417 	ldw	r7,16(r18)
  809d34:	d9800117 	ldw	r6,4(sp)
  809d38:	180b883a 	mov	r5,r3
  809d3c:	390fc83a 	sub	r7,r7,r4
  809d40:	1009883a 	mov	r4,r2
  809d44:	d8800017 	ldw	r2,0(sp)
  809d48:	380e917a 	slli	r7,r7,5
  809d4c:	2011883a 	mov	r8,r4
  809d50:	1185c83a 	sub	r2,r2,r6
  809d54:	11c5883a 	add	r2,r2,r7
  809d58:	1006953a 	slli	r3,r2,20
  809d5c:	2813883a 	mov	r9,r5
  809d60:	00800d0e 	bge	zero,r2,809d98 <__ratio+0xa8>
  809d64:	1d29883a 	add	r20,r3,r20
  809d68:	a00b883a 	mov	r5,r20
  809d6c:	480f883a 	mov	r7,r9
  809d70:	9809883a 	mov	r4,r19
  809d74:	400d883a 	mov	r6,r8
  809d78:	080f2ec0 	call	80f2ec <__divdf3>
  809d7c:	dfc00617 	ldw	ra,24(sp)
  809d80:	dd000517 	ldw	r20,20(sp)
  809d84:	dcc00417 	ldw	r19,16(sp)
  809d88:	dc800317 	ldw	r18,12(sp)
  809d8c:	dc400217 	ldw	r17,8(sp)
  809d90:	dec00704 	addi	sp,sp,28
  809d94:	f800283a 	ret
  809d98:	28d3c83a 	sub	r9,r5,r3
  809d9c:	003ff206 	br	809d68 <__ratio+0x78>

00809da0 <_mprec_log10>:
  809da0:	defffe04 	addi	sp,sp,-8
  809da4:	008005c4 	movi	r2,23
  809da8:	dc000015 	stw	r16,0(sp)
  809dac:	dfc00115 	stw	ra,4(sp)
  809db0:	2021883a 	mov	r16,r4
  809db4:	11000c16 	blt	r2,r4,809de8 <_mprec_log10+0x48>
  809db8:	200490fa 	slli	r2,r4,3
  809dbc:	00c02074 	movhi	r3,129
  809dc0:	18d46b04 	addi	r3,r3,20908
  809dc4:	10c5883a 	add	r2,r2,r3
  809dc8:	12400117 	ldw	r9,4(r2)
  809dcc:	12000017 	ldw	r8,0(r2)
  809dd0:	4807883a 	mov	r3,r9
  809dd4:	4005883a 	mov	r2,r8
  809dd8:	dfc00117 	ldw	ra,4(sp)
  809ddc:	dc000017 	ldw	r16,0(sp)
  809de0:	dec00204 	addi	sp,sp,8
  809de4:	f800283a 	ret
  809de8:	0011883a 	mov	r8,zero
  809dec:	024ffc34 	movhi	r9,16368
  809df0:	0005883a 	mov	r2,zero
  809df4:	00d00934 	movhi	r3,16420
  809df8:	480b883a 	mov	r5,r9
  809dfc:	4009883a 	mov	r4,r8
  809e00:	180f883a 	mov	r7,r3
  809e04:	100d883a 	mov	r6,r2
  809e08:	080ef280 	call	80ef28 <__muldf3>
  809e0c:	843fffc4 	addi	r16,r16,-1
  809e10:	1011883a 	mov	r8,r2
  809e14:	1813883a 	mov	r9,r3
  809e18:	803ff51e 	bne	r16,zero,809df0 <_mprec_log10+0x50>
  809e1c:	4005883a 	mov	r2,r8
  809e20:	4807883a 	mov	r3,r9
  809e24:	dfc00117 	ldw	ra,4(sp)
  809e28:	dc000017 	ldw	r16,0(sp)
  809e2c:	dec00204 	addi	sp,sp,8
  809e30:	f800283a 	ret

00809e34 <__copybits>:
  809e34:	297fffc4 	addi	r5,r5,-1
  809e38:	30800417 	ldw	r2,16(r6)
  809e3c:	280bd17a 	srai	r5,r5,5
  809e40:	31800504 	addi	r6,r6,20
  809e44:	1085883a 	add	r2,r2,r2
  809e48:	294b883a 	add	r5,r5,r5
  809e4c:	294b883a 	add	r5,r5,r5
  809e50:	1085883a 	add	r2,r2,r2
  809e54:	290b883a 	add	r5,r5,r4
  809e58:	3087883a 	add	r3,r6,r2
  809e5c:	29400104 	addi	r5,r5,4
  809e60:	30c0052e 	bgeu	r6,r3,809e78 <__copybits+0x44>
  809e64:	30800017 	ldw	r2,0(r6)
  809e68:	31800104 	addi	r6,r6,4
  809e6c:	20800015 	stw	r2,0(r4)
  809e70:	21000104 	addi	r4,r4,4
  809e74:	30fffb36 	bltu	r6,r3,809e64 <__copybits+0x30>
  809e78:	2140032e 	bgeu	r4,r5,809e88 <__copybits+0x54>
  809e7c:	20000015 	stw	zero,0(r4)
  809e80:	21000104 	addi	r4,r4,4
  809e84:	217ffd36 	bltu	r4,r5,809e7c <__copybits+0x48>
  809e88:	f800283a 	ret

00809e8c <__any_on>:
  809e8c:	20800417 	ldw	r2,16(r4)
  809e90:	2807d17a 	srai	r3,r5,5
  809e94:	21000504 	addi	r4,r4,20
  809e98:	10c00d0e 	bge	r2,r3,809ed0 <__any_on+0x44>
  809e9c:	1085883a 	add	r2,r2,r2
  809ea0:	1085883a 	add	r2,r2,r2
  809ea4:	208d883a 	add	r6,r4,r2
  809ea8:	2180182e 	bgeu	r4,r6,809f0c <__any_on+0x80>
  809eac:	30bfff17 	ldw	r2,-4(r6)
  809eb0:	30ffff04 	addi	r3,r6,-4
  809eb4:	1000041e 	bne	r2,zero,809ec8 <__any_on+0x3c>
  809eb8:	20c0142e 	bgeu	r4,r3,809f0c <__any_on+0x80>
  809ebc:	18ffff04 	addi	r3,r3,-4
  809ec0:	18800017 	ldw	r2,0(r3)
  809ec4:	103ffc26 	beq	r2,zero,809eb8 <__any_on+0x2c>
  809ec8:	00800044 	movi	r2,1
  809ecc:	f800283a 	ret
  809ed0:	18800a0e 	bge	r3,r2,809efc <__any_on+0x70>
  809ed4:	294007cc 	andi	r5,r5,31
  809ed8:	28000826 	beq	r5,zero,809efc <__any_on+0x70>
  809edc:	18c5883a 	add	r2,r3,r3
  809ee0:	1085883a 	add	r2,r2,r2
  809ee4:	208d883a 	add	r6,r4,r2
  809ee8:	30c00017 	ldw	r3,0(r6)
  809eec:	1944d83a 	srl	r2,r3,r5
  809ef0:	1144983a 	sll	r2,r2,r5
  809ef4:	18bff41e 	bne	r3,r2,809ec8 <__any_on+0x3c>
  809ef8:	003feb06 	br	809ea8 <__any_on+0x1c>
  809efc:	18c5883a 	add	r2,r3,r3
  809f00:	1085883a 	add	r2,r2,r2
  809f04:	208d883a 	add	r6,r4,r2
  809f08:	003fe706 	br	809ea8 <__any_on+0x1c>
  809f0c:	0005883a 	mov	r2,zero
  809f10:	f800283a 	ret

00809f14 <_Balloc>:
  809f14:	20c01317 	ldw	r3,76(r4)
  809f18:	defffb04 	addi	sp,sp,-20
  809f1c:	dcc00315 	stw	r19,12(sp)
  809f20:	dc800215 	stw	r18,8(sp)
  809f24:	dfc00415 	stw	ra,16(sp)
  809f28:	2825883a 	mov	r18,r5
  809f2c:	dc400115 	stw	r17,4(sp)
  809f30:	dc000015 	stw	r16,0(sp)
  809f34:	2027883a 	mov	r19,r4
  809f38:	01800404 	movi	r6,16
  809f3c:	01400104 	movi	r5,4
  809f40:	18001726 	beq	r3,zero,809fa0 <_Balloc+0x8c>
  809f44:	01400044 	movi	r5,1
  809f48:	9485883a 	add	r2,r18,r18
  809f4c:	2ca2983a 	sll	r17,r5,r18
  809f50:	1085883a 	add	r2,r2,r2
  809f54:	10c7883a 	add	r3,r2,r3
  809f58:	1c000017 	ldw	r16,0(r3)
  809f5c:	8c4d883a 	add	r6,r17,r17
  809f60:	318d883a 	add	r6,r6,r6
  809f64:	9809883a 	mov	r4,r19
  809f68:	31800504 	addi	r6,r6,20
  809f6c:	80001226 	beq	r16,zero,809fb8 <_Balloc+0xa4>
  809f70:	80800017 	ldw	r2,0(r16)
  809f74:	18800015 	stw	r2,0(r3)
  809f78:	80000415 	stw	zero,16(r16)
  809f7c:	80000315 	stw	zero,12(r16)
  809f80:	8005883a 	mov	r2,r16
  809f84:	dfc00417 	ldw	ra,16(sp)
  809f88:	dcc00317 	ldw	r19,12(sp)
  809f8c:	dc800217 	ldw	r18,8(sp)
  809f90:	dc400117 	ldw	r17,4(sp)
  809f94:	dc000017 	ldw	r16,0(sp)
  809f98:	dec00504 	addi	sp,sp,20
  809f9c:	f800283a 	ret
  809fa0:	080cfb80 	call	80cfb8 <_calloc_r>
  809fa4:	1007883a 	mov	r3,r2
  809fa8:	0021883a 	mov	r16,zero
  809fac:	98801315 	stw	r2,76(r19)
  809fb0:	103fe41e 	bne	r2,zero,809f44 <_Balloc+0x30>
  809fb4:	003ff206 	br	809f80 <_Balloc+0x6c>
  809fb8:	080cfb80 	call	80cfb8 <_calloc_r>
  809fbc:	103ff026 	beq	r2,zero,809f80 <_Balloc+0x6c>
  809fc0:	1021883a 	mov	r16,r2
  809fc4:	14800115 	stw	r18,4(r2)
  809fc8:	14400215 	stw	r17,8(r2)
  809fcc:	003fea06 	br	809f78 <_Balloc+0x64>

00809fd0 <__d2b>:
  809fd0:	defff504 	addi	sp,sp,-44
  809fd4:	dcc00515 	stw	r19,20(sp)
  809fd8:	04c00044 	movi	r19,1
  809fdc:	dc000215 	stw	r16,8(sp)
  809fe0:	2821883a 	mov	r16,r5
  809fe4:	980b883a 	mov	r5,r19
  809fe8:	ddc00915 	stw	r23,36(sp)
  809fec:	dd800815 	stw	r22,32(sp)
  809ff0:	dd400715 	stw	r21,28(sp)
  809ff4:	dd000615 	stw	r20,24(sp)
  809ff8:	dc800415 	stw	r18,16(sp)
  809ffc:	dc400315 	stw	r17,12(sp)
  80a000:	dfc00a15 	stw	ra,40(sp)
  80a004:	3023883a 	mov	r17,r6
  80a008:	382d883a 	mov	r22,r7
  80a00c:	ddc00b17 	ldw	r23,44(sp)
  80a010:	0809f140 	call	809f14 <_Balloc>
  80a014:	1025883a 	mov	r18,r2
  80a018:	00a00034 	movhi	r2,32768
  80a01c:	10bfffc4 	addi	r2,r2,-1
  80a020:	8888703a 	and	r4,r17,r2
  80a024:	202ad53a 	srli	r21,r4,20
  80a028:	00800434 	movhi	r2,16
  80a02c:	10bfffc4 	addi	r2,r2,-1
  80a030:	8886703a 	and	r3,r17,r2
  80a034:	a829003a 	cmpeq	r20,r21,zero
  80a038:	800b883a 	mov	r5,r16
  80a03c:	d8c00115 	stw	r3,4(sp)
  80a040:	94000504 	addi	r16,r18,20
  80a044:	a000021e 	bne	r20,zero,80a050 <__d2b+0x80>
  80a048:	18c00434 	orhi	r3,r3,16
  80a04c:	d8c00115 	stw	r3,4(sp)
  80a050:	28002726 	beq	r5,zero,80a0f0 <__d2b+0x120>
  80a054:	d809883a 	mov	r4,sp
  80a058:	d9400015 	stw	r5,0(sp)
  80a05c:	0809a2c0 	call	809a2c <__lo0bits>
  80a060:	100d883a 	mov	r6,r2
  80a064:	10003526 	beq	r2,zero,80a13c <__d2b+0x16c>
  80a068:	d8c00117 	ldw	r3,4(sp)
  80a06c:	00800804 	movi	r2,32
  80a070:	1185c83a 	sub	r2,r2,r6
  80a074:	d9000017 	ldw	r4,0(sp)
  80a078:	1886983a 	sll	r3,r3,r2
  80a07c:	1906b03a 	or	r3,r3,r4
  80a080:	90c00515 	stw	r3,20(r18)
  80a084:	d8c00117 	ldw	r3,4(sp)
  80a088:	1986d83a 	srl	r3,r3,r6
  80a08c:	d8c00115 	stw	r3,4(sp)
  80a090:	180b003a 	cmpeq	r5,r3,zero
  80a094:	00800084 	movi	r2,2
  80a098:	114bc83a 	sub	r5,r2,r5
  80a09c:	80c00115 	stw	r3,4(r16)
  80a0a0:	91400415 	stw	r5,16(r18)
  80a0a4:	a0001a1e 	bne	r20,zero,80a110 <__d2b+0x140>
  80a0a8:	3545883a 	add	r2,r6,r21
  80a0ac:	10bef344 	addi	r2,r2,-1075
  80a0b0:	00c00d44 	movi	r3,53
  80a0b4:	b0800015 	stw	r2,0(r22)
  80a0b8:	1987c83a 	sub	r3,r3,r6
  80a0bc:	b8c00015 	stw	r3,0(r23)
  80a0c0:	9005883a 	mov	r2,r18
  80a0c4:	dfc00a17 	ldw	ra,40(sp)
  80a0c8:	ddc00917 	ldw	r23,36(sp)
  80a0cc:	dd800817 	ldw	r22,32(sp)
  80a0d0:	dd400717 	ldw	r21,28(sp)
  80a0d4:	dd000617 	ldw	r20,24(sp)
  80a0d8:	dcc00517 	ldw	r19,20(sp)
  80a0dc:	dc800417 	ldw	r18,16(sp)
  80a0e0:	dc400317 	ldw	r17,12(sp)
  80a0e4:	dc000217 	ldw	r16,8(sp)
  80a0e8:	dec00b04 	addi	sp,sp,44
  80a0ec:	f800283a 	ret
  80a0f0:	d9000104 	addi	r4,sp,4
  80a0f4:	0809a2c0 	call	809a2c <__lo0bits>
  80a0f8:	11800804 	addi	r6,r2,32
  80a0fc:	d8800117 	ldw	r2,4(sp)
  80a100:	94c00415 	stw	r19,16(r18)
  80a104:	980b883a 	mov	r5,r19
  80a108:	90800515 	stw	r2,20(r18)
  80a10c:	a03fe626 	beq	r20,zero,80a0a8 <__d2b+0xd8>
  80a110:	2945883a 	add	r2,r5,r5
  80a114:	1085883a 	add	r2,r2,r2
  80a118:	1405883a 	add	r2,r2,r16
  80a11c:	113fff17 	ldw	r4,-4(r2)
  80a120:	30fef384 	addi	r3,r6,-1074
  80a124:	2820917a 	slli	r16,r5,5
  80a128:	b0c00015 	stw	r3,0(r22)
  80a12c:	08099bc0 	call	8099bc <__hi0bits>
  80a130:	80a1c83a 	sub	r16,r16,r2
  80a134:	bc000015 	stw	r16,0(r23)
  80a138:	003fe106 	br	80a0c0 <__d2b+0xf0>
  80a13c:	d8800017 	ldw	r2,0(sp)
  80a140:	90800515 	stw	r2,20(r18)
  80a144:	d8c00117 	ldw	r3,4(sp)
  80a148:	003fd106 	br	80a090 <__d2b+0xc0>

0080a14c <__mdiff>:
  80a14c:	defffb04 	addi	sp,sp,-20
  80a150:	dc000015 	stw	r16,0(sp)
  80a154:	2821883a 	mov	r16,r5
  80a158:	dc800215 	stw	r18,8(sp)
  80a15c:	300b883a 	mov	r5,r6
  80a160:	2025883a 	mov	r18,r4
  80a164:	8009883a 	mov	r4,r16
  80a168:	dc400115 	stw	r17,4(sp)
  80a16c:	dfc00415 	stw	ra,16(sp)
  80a170:	dcc00315 	stw	r19,12(sp)
  80a174:	3023883a 	mov	r17,r6
  80a178:	0809af00 	call	809af0 <__mcmp>
  80a17c:	10004226 	beq	r2,zero,80a288 <__mdiff+0x13c>
  80a180:	10005016 	blt	r2,zero,80a2c4 <__mdiff+0x178>
  80a184:	0027883a 	mov	r19,zero
  80a188:	81400117 	ldw	r5,4(r16)
  80a18c:	9009883a 	mov	r4,r18
  80a190:	0809f140 	call	809f14 <_Balloc>
  80a194:	1019883a 	mov	r12,r2
  80a198:	82800417 	ldw	r10,16(r16)
  80a19c:	88800417 	ldw	r2,16(r17)
  80a1a0:	81800504 	addi	r6,r16,20
  80a1a4:	5287883a 	add	r3,r10,r10
  80a1a8:	1085883a 	add	r2,r2,r2
  80a1ac:	18c7883a 	add	r3,r3,r3
  80a1b0:	1085883a 	add	r2,r2,r2
  80a1b4:	8a000504 	addi	r8,r17,20
  80a1b8:	64c00315 	stw	r19,12(r12)
  80a1bc:	30db883a 	add	r13,r6,r3
  80a1c0:	4097883a 	add	r11,r8,r2
  80a1c4:	61c00504 	addi	r7,r12,20
  80a1c8:	0013883a 	mov	r9,zero
  80a1cc:	31000017 	ldw	r4,0(r6)
  80a1d0:	41400017 	ldw	r5,0(r8)
  80a1d4:	42000104 	addi	r8,r8,4
  80a1d8:	20bfffcc 	andi	r2,r4,65535
  80a1dc:	28ffffcc 	andi	r3,r5,65535
  80a1e0:	10c5c83a 	sub	r2,r2,r3
  80a1e4:	1245883a 	add	r2,r2,r9
  80a1e8:	2008d43a 	srli	r4,r4,16
  80a1ec:	280ad43a 	srli	r5,r5,16
  80a1f0:	1007d43a 	srai	r3,r2,16
  80a1f4:	3880000d 	sth	r2,0(r7)
  80a1f8:	2149c83a 	sub	r4,r4,r5
  80a1fc:	20c9883a 	add	r4,r4,r3
  80a200:	3900008d 	sth	r4,2(r7)
  80a204:	31800104 	addi	r6,r6,4
  80a208:	39c00104 	addi	r7,r7,4
  80a20c:	2013d43a 	srai	r9,r4,16
  80a210:	42ffee36 	bltu	r8,r11,80a1cc <__mdiff+0x80>
  80a214:	33400c2e 	bgeu	r6,r13,80a248 <__mdiff+0xfc>
  80a218:	30800017 	ldw	r2,0(r6)
  80a21c:	31800104 	addi	r6,r6,4
  80a220:	10ffffcc 	andi	r3,r2,65535
  80a224:	1a47883a 	add	r3,r3,r9
  80a228:	1004d43a 	srli	r2,r2,16
  80a22c:	1809d43a 	srai	r4,r3,16
  80a230:	38c0000d 	sth	r3,0(r7)
  80a234:	1105883a 	add	r2,r2,r4
  80a238:	3880008d 	sth	r2,2(r7)
  80a23c:	1013d43a 	srai	r9,r2,16
  80a240:	39c00104 	addi	r7,r7,4
  80a244:	337ff436 	bltu	r6,r13,80a218 <__mdiff+0xcc>
  80a248:	38bfff17 	ldw	r2,-4(r7)
  80a24c:	38ffff04 	addi	r3,r7,-4
  80a250:	1000041e 	bne	r2,zero,80a264 <__mdiff+0x118>
  80a254:	18ffff04 	addi	r3,r3,-4
  80a258:	18800017 	ldw	r2,0(r3)
  80a25c:	52bfffc4 	addi	r10,r10,-1
  80a260:	103ffc26 	beq	r2,zero,80a254 <__mdiff+0x108>
  80a264:	6005883a 	mov	r2,r12
  80a268:	62800415 	stw	r10,16(r12)
  80a26c:	dfc00417 	ldw	ra,16(sp)
  80a270:	dcc00317 	ldw	r19,12(sp)
  80a274:	dc800217 	ldw	r18,8(sp)
  80a278:	dc400117 	ldw	r17,4(sp)
  80a27c:	dc000017 	ldw	r16,0(sp)
  80a280:	dec00504 	addi	sp,sp,20
  80a284:	f800283a 	ret
  80a288:	9009883a 	mov	r4,r18
  80a28c:	000b883a 	mov	r5,zero
  80a290:	0809f140 	call	809f14 <_Balloc>
  80a294:	1019883a 	mov	r12,r2
  80a298:	00800044 	movi	r2,1
  80a29c:	60800415 	stw	r2,16(r12)
  80a2a0:	6005883a 	mov	r2,r12
  80a2a4:	60000515 	stw	zero,20(r12)
  80a2a8:	dfc00417 	ldw	ra,16(sp)
  80a2ac:	dcc00317 	ldw	r19,12(sp)
  80a2b0:	dc800217 	ldw	r18,8(sp)
  80a2b4:	dc400117 	ldw	r17,4(sp)
  80a2b8:	dc000017 	ldw	r16,0(sp)
  80a2bc:	dec00504 	addi	sp,sp,20
  80a2c0:	f800283a 	ret
  80a2c4:	880d883a 	mov	r6,r17
  80a2c8:	04c00044 	movi	r19,1
  80a2cc:	8023883a 	mov	r17,r16
  80a2d0:	3021883a 	mov	r16,r6
  80a2d4:	003fac06 	br	80a188 <__mdiff+0x3c>

0080a2d8 <__lshift>:
  80a2d8:	defff904 	addi	sp,sp,-28
  80a2dc:	28800417 	ldw	r2,16(r5)
  80a2e0:	dc000015 	stw	r16,0(sp)
  80a2e4:	3021d17a 	srai	r16,r6,5
  80a2e8:	28c00217 	ldw	r3,8(r5)
  80a2ec:	10800044 	addi	r2,r2,1
  80a2f0:	dc400115 	stw	r17,4(sp)
  80a2f4:	80a3883a 	add	r17,r16,r2
  80a2f8:	dd400515 	stw	r21,20(sp)
  80a2fc:	dd000415 	stw	r20,16(sp)
  80a300:	dc800215 	stw	r18,8(sp)
  80a304:	dfc00615 	stw	ra,24(sp)
  80a308:	2825883a 	mov	r18,r5
  80a30c:	dcc00315 	stw	r19,12(sp)
  80a310:	3029883a 	mov	r20,r6
  80a314:	202b883a 	mov	r21,r4
  80a318:	29400117 	ldw	r5,4(r5)
  80a31c:	1c40030e 	bge	r3,r17,80a32c <__lshift+0x54>
  80a320:	18c7883a 	add	r3,r3,r3
  80a324:	29400044 	addi	r5,r5,1
  80a328:	1c7ffd16 	blt	r3,r17,80a320 <__lshift+0x48>
  80a32c:	a809883a 	mov	r4,r21
  80a330:	0809f140 	call	809f14 <_Balloc>
  80a334:	1027883a 	mov	r19,r2
  80a338:	11400504 	addi	r5,r2,20
  80a33c:	0400090e 	bge	zero,r16,80a364 <__lshift+0x8c>
  80a340:	2805883a 	mov	r2,r5
  80a344:	0007883a 	mov	r3,zero
  80a348:	18c00044 	addi	r3,r3,1
  80a34c:	10000015 	stw	zero,0(r2)
  80a350:	10800104 	addi	r2,r2,4
  80a354:	80fffc1e 	bne	r16,r3,80a348 <__lshift+0x70>
  80a358:	8405883a 	add	r2,r16,r16
  80a35c:	1085883a 	add	r2,r2,r2
  80a360:	288b883a 	add	r5,r5,r2
  80a364:	90800417 	ldw	r2,16(r18)
  80a368:	91000504 	addi	r4,r18,20
  80a36c:	a18007cc 	andi	r6,r20,31
  80a370:	1085883a 	add	r2,r2,r2
  80a374:	1085883a 	add	r2,r2,r2
  80a378:	208f883a 	add	r7,r4,r2
  80a37c:	30001e26 	beq	r6,zero,80a3f8 <__lshift+0x120>
  80a380:	00800804 	movi	r2,32
  80a384:	1191c83a 	sub	r8,r2,r6
  80a388:	0007883a 	mov	r3,zero
  80a38c:	20800017 	ldw	r2,0(r4)
  80a390:	1184983a 	sll	r2,r2,r6
  80a394:	1884b03a 	or	r2,r3,r2
  80a398:	28800015 	stw	r2,0(r5)
  80a39c:	20c00017 	ldw	r3,0(r4)
  80a3a0:	21000104 	addi	r4,r4,4
  80a3a4:	29400104 	addi	r5,r5,4
  80a3a8:	1a06d83a 	srl	r3,r3,r8
  80a3ac:	21fff736 	bltu	r4,r7,80a38c <__lshift+0xb4>
  80a3b0:	28c00015 	stw	r3,0(r5)
  80a3b4:	18000126 	beq	r3,zero,80a3bc <__lshift+0xe4>
  80a3b8:	8c400044 	addi	r17,r17,1
  80a3bc:	88bfffc4 	addi	r2,r17,-1
  80a3c0:	98800415 	stw	r2,16(r19)
  80a3c4:	a809883a 	mov	r4,r21
  80a3c8:	900b883a 	mov	r5,r18
  80a3cc:	08099940 	call	809994 <_Bfree>
  80a3d0:	9805883a 	mov	r2,r19
  80a3d4:	dfc00617 	ldw	ra,24(sp)
  80a3d8:	dd400517 	ldw	r21,20(sp)
  80a3dc:	dd000417 	ldw	r20,16(sp)
  80a3e0:	dcc00317 	ldw	r19,12(sp)
  80a3e4:	dc800217 	ldw	r18,8(sp)
  80a3e8:	dc400117 	ldw	r17,4(sp)
  80a3ec:	dc000017 	ldw	r16,0(sp)
  80a3f0:	dec00704 	addi	sp,sp,28
  80a3f4:	f800283a 	ret
  80a3f8:	20800017 	ldw	r2,0(r4)
  80a3fc:	21000104 	addi	r4,r4,4
  80a400:	28800015 	stw	r2,0(r5)
  80a404:	29400104 	addi	r5,r5,4
  80a408:	21ffec2e 	bgeu	r4,r7,80a3bc <__lshift+0xe4>
  80a40c:	20800017 	ldw	r2,0(r4)
  80a410:	21000104 	addi	r4,r4,4
  80a414:	28800015 	stw	r2,0(r5)
  80a418:	29400104 	addi	r5,r5,4
  80a41c:	21fff636 	bltu	r4,r7,80a3f8 <__lshift+0x120>
  80a420:	003fe606 	br	80a3bc <__lshift+0xe4>

0080a424 <__multiply>:
  80a424:	defff904 	addi	sp,sp,-28
  80a428:	dcc00315 	stw	r19,12(sp)
  80a42c:	dc800215 	stw	r18,8(sp)
  80a430:	2cc00417 	ldw	r19,16(r5)
  80a434:	34800417 	ldw	r18,16(r6)
  80a438:	dd000415 	stw	r20,16(sp)
  80a43c:	dc400115 	stw	r17,4(sp)
  80a440:	dfc00615 	stw	ra,24(sp)
  80a444:	dd400515 	stw	r21,20(sp)
  80a448:	dc000015 	stw	r16,0(sp)
  80a44c:	2823883a 	mov	r17,r5
  80a450:	3029883a 	mov	r20,r6
  80a454:	9c80040e 	bge	r19,r18,80a468 <__multiply+0x44>
  80a458:	9027883a 	mov	r19,r18
  80a45c:	2c800417 	ldw	r18,16(r5)
  80a460:	2829883a 	mov	r20,r5
  80a464:	3023883a 	mov	r17,r6
  80a468:	88800217 	ldw	r2,8(r17)
  80a46c:	9ca1883a 	add	r16,r19,r18
  80a470:	89400117 	ldw	r5,4(r17)
  80a474:	1400010e 	bge	r2,r16,80a47c <__multiply+0x58>
  80a478:	29400044 	addi	r5,r5,1
  80a47c:	0809f140 	call	809f14 <_Balloc>
  80a480:	102b883a 	mov	r21,r2
  80a484:	8405883a 	add	r2,r16,r16
  80a488:	1085883a 	add	r2,r2,r2
  80a48c:	a9000504 	addi	r4,r21,20
  80a490:	209d883a 	add	r14,r4,r2
  80a494:	2380042e 	bgeu	r4,r14,80a4a8 <__multiply+0x84>
  80a498:	2005883a 	mov	r2,r4
  80a49c:	10000015 	stw	zero,0(r2)
  80a4a0:	10800104 	addi	r2,r2,4
  80a4a4:	13bffd36 	bltu	r2,r14,80a49c <__multiply+0x78>
  80a4a8:	9485883a 	add	r2,r18,r18
  80a4ac:	9cc7883a 	add	r3,r19,r19
  80a4b0:	a1800504 	addi	r6,r20,20
  80a4b4:	1085883a 	add	r2,r2,r2
  80a4b8:	8b400504 	addi	r13,r17,20
  80a4bc:	18c7883a 	add	r3,r3,r3
  80a4c0:	309f883a 	add	r15,r6,r2
  80a4c4:	68d7883a 	add	r11,r13,r3
  80a4c8:	33c03b2e 	bgeu	r6,r15,80a5b8 <__multiply+0x194>
  80a4cc:	2019883a 	mov	r12,r4
  80a4d0:	30800017 	ldw	r2,0(r6)
  80a4d4:	127fffcc 	andi	r9,r2,65535
  80a4d8:	48001826 	beq	r9,zero,80a53c <__multiply+0x118>
  80a4dc:	6811883a 	mov	r8,r13
  80a4e0:	600f883a 	mov	r7,r12
  80a4e4:	0015883a 	mov	r10,zero
  80a4e8:	40c00017 	ldw	r3,0(r8)
  80a4ec:	39400017 	ldw	r5,0(r7)
  80a4f0:	42000104 	addi	r8,r8,4
  80a4f4:	193fffcc 	andi	r4,r3,65535
  80a4f8:	4909383a 	mul	r4,r9,r4
  80a4fc:	1806d43a 	srli	r3,r3,16
  80a500:	28bfffcc 	andi	r2,r5,65535
  80a504:	5085883a 	add	r2,r10,r2
  80a508:	2089883a 	add	r4,r4,r2
  80a50c:	48c7383a 	mul	r3,r9,r3
  80a510:	280ad43a 	srli	r5,r5,16
  80a514:	2004d43a 	srli	r2,r4,16
  80a518:	3900000d 	sth	r4,0(r7)
  80a51c:	1947883a 	add	r3,r3,r5
  80a520:	10c5883a 	add	r2,r2,r3
  80a524:	3880008d 	sth	r2,2(r7)
  80a528:	1014d43a 	srli	r10,r2,16
  80a52c:	39c00104 	addi	r7,r7,4
  80a530:	42ffed36 	bltu	r8,r11,80a4e8 <__multiply+0xc4>
  80a534:	3a800015 	stw	r10,0(r7)
  80a538:	30800017 	ldw	r2,0(r6)
  80a53c:	1012d43a 	srli	r9,r2,16
  80a540:	48001926 	beq	r9,zero,80a5a8 <__multiply+0x184>
  80a544:	60800017 	ldw	r2,0(r12)
  80a548:	6811883a 	mov	r8,r13
  80a54c:	600f883a 	mov	r7,r12
  80a550:	0015883a 	mov	r10,zero
  80a554:	100b883a 	mov	r5,r2
  80a558:	41000017 	ldw	r4,0(r8)
  80a55c:	2806d43a 	srli	r3,r5,16
  80a560:	3880000d 	sth	r2,0(r7)
  80a564:	20bfffcc 	andi	r2,r4,65535
  80a568:	4885383a 	mul	r2,r9,r2
  80a56c:	50c7883a 	add	r3,r10,r3
  80a570:	2008d43a 	srli	r4,r4,16
  80a574:	10c5883a 	add	r2,r2,r3
  80a578:	3880008d 	sth	r2,2(r7)
  80a57c:	39c00104 	addi	r7,r7,4
  80a580:	39400017 	ldw	r5,0(r7)
  80a584:	4909383a 	mul	r4,r9,r4
  80a588:	1004d43a 	srli	r2,r2,16
  80a58c:	28ffffcc 	andi	r3,r5,65535
  80a590:	20c9883a 	add	r4,r4,r3
  80a594:	1105883a 	add	r2,r2,r4
  80a598:	42000104 	addi	r8,r8,4
  80a59c:	1014d43a 	srli	r10,r2,16
  80a5a0:	42ffed36 	bltu	r8,r11,80a558 <__multiply+0x134>
  80a5a4:	38800015 	stw	r2,0(r7)
  80a5a8:	31800104 	addi	r6,r6,4
  80a5ac:	33c0022e 	bgeu	r6,r15,80a5b8 <__multiply+0x194>
  80a5b0:	63000104 	addi	r12,r12,4
  80a5b4:	003fc606 	br	80a4d0 <__multiply+0xac>
  80a5b8:	0400090e 	bge	zero,r16,80a5e0 <__multiply+0x1bc>
  80a5bc:	70bfff17 	ldw	r2,-4(r14)
  80a5c0:	70ffff04 	addi	r3,r14,-4
  80a5c4:	10000326 	beq	r2,zero,80a5d4 <__multiply+0x1b0>
  80a5c8:	00000506 	br	80a5e0 <__multiply+0x1bc>
  80a5cc:	18800017 	ldw	r2,0(r3)
  80a5d0:	1000031e 	bne	r2,zero,80a5e0 <__multiply+0x1bc>
  80a5d4:	843fffc4 	addi	r16,r16,-1
  80a5d8:	18ffff04 	addi	r3,r3,-4
  80a5dc:	803ffb1e 	bne	r16,zero,80a5cc <__multiply+0x1a8>
  80a5e0:	a805883a 	mov	r2,r21
  80a5e4:	ac000415 	stw	r16,16(r21)
  80a5e8:	dfc00617 	ldw	ra,24(sp)
  80a5ec:	dd400517 	ldw	r21,20(sp)
  80a5f0:	dd000417 	ldw	r20,16(sp)
  80a5f4:	dcc00317 	ldw	r19,12(sp)
  80a5f8:	dc800217 	ldw	r18,8(sp)
  80a5fc:	dc400117 	ldw	r17,4(sp)
  80a600:	dc000017 	ldw	r16,0(sp)
  80a604:	dec00704 	addi	sp,sp,28
  80a608:	f800283a 	ret

0080a60c <__i2b>:
  80a60c:	defffd04 	addi	sp,sp,-12
  80a610:	dc000015 	stw	r16,0(sp)
  80a614:	04000044 	movi	r16,1
  80a618:	dc800115 	stw	r18,4(sp)
  80a61c:	2825883a 	mov	r18,r5
  80a620:	800b883a 	mov	r5,r16
  80a624:	dfc00215 	stw	ra,8(sp)
  80a628:	0809f140 	call	809f14 <_Balloc>
  80a62c:	14000415 	stw	r16,16(r2)
  80a630:	14800515 	stw	r18,20(r2)
  80a634:	dfc00217 	ldw	ra,8(sp)
  80a638:	dc800117 	ldw	r18,4(sp)
  80a63c:	dc000017 	ldw	r16,0(sp)
  80a640:	dec00304 	addi	sp,sp,12
  80a644:	f800283a 	ret

0080a648 <__multadd>:
  80a648:	defffa04 	addi	sp,sp,-24
  80a64c:	dc800215 	stw	r18,8(sp)
  80a650:	2c800417 	ldw	r18,16(r5)
  80a654:	dd000415 	stw	r20,16(sp)
  80a658:	dcc00315 	stw	r19,12(sp)
  80a65c:	dc000015 	stw	r16,0(sp)
  80a660:	dfc00515 	stw	ra,20(sp)
  80a664:	3821883a 	mov	r16,r7
  80a668:	dc400115 	stw	r17,4(sp)
  80a66c:	2827883a 	mov	r19,r5
  80a670:	2029883a 	mov	r20,r4
  80a674:	2a000504 	addi	r8,r5,20
  80a678:	000f883a 	mov	r7,zero
  80a67c:	40800017 	ldw	r2,0(r8)
  80a680:	39c00044 	addi	r7,r7,1
  80a684:	10ffffcc 	andi	r3,r2,65535
  80a688:	1987383a 	mul	r3,r3,r6
  80a68c:	1004d43a 	srli	r2,r2,16
  80a690:	1c07883a 	add	r3,r3,r16
  80a694:	180ad43a 	srli	r5,r3,16
  80a698:	1185383a 	mul	r2,r2,r6
  80a69c:	18ffffcc 	andi	r3,r3,65535
  80a6a0:	1145883a 	add	r2,r2,r5
  80a6a4:	1008943a 	slli	r4,r2,16
  80a6a8:	1020d43a 	srli	r16,r2,16
  80a6ac:	20c9883a 	add	r4,r4,r3
  80a6b0:	41000015 	stw	r4,0(r8)
  80a6b4:	42000104 	addi	r8,r8,4
  80a6b8:	3cbff016 	blt	r7,r18,80a67c <__multadd+0x34>
  80a6bc:	80000826 	beq	r16,zero,80a6e0 <__multadd+0x98>
  80a6c0:	98800217 	ldw	r2,8(r19)
  80a6c4:	90800f0e 	bge	r18,r2,80a704 <__multadd+0xbc>
  80a6c8:	9485883a 	add	r2,r18,r18
  80a6cc:	1085883a 	add	r2,r2,r2
  80a6d0:	14c5883a 	add	r2,r2,r19
  80a6d4:	90c00044 	addi	r3,r18,1
  80a6d8:	14000515 	stw	r16,20(r2)
  80a6dc:	98c00415 	stw	r3,16(r19)
  80a6e0:	9805883a 	mov	r2,r19
  80a6e4:	dfc00517 	ldw	ra,20(sp)
  80a6e8:	dd000417 	ldw	r20,16(sp)
  80a6ec:	dcc00317 	ldw	r19,12(sp)
  80a6f0:	dc800217 	ldw	r18,8(sp)
  80a6f4:	dc400117 	ldw	r17,4(sp)
  80a6f8:	dc000017 	ldw	r16,0(sp)
  80a6fc:	dec00604 	addi	sp,sp,24
  80a700:	f800283a 	ret
  80a704:	99400117 	ldw	r5,4(r19)
  80a708:	a009883a 	mov	r4,r20
  80a70c:	29400044 	addi	r5,r5,1
  80a710:	0809f140 	call	809f14 <_Balloc>
  80a714:	99800417 	ldw	r6,16(r19)
  80a718:	99400304 	addi	r5,r19,12
  80a71c:	11000304 	addi	r4,r2,12
  80a720:	318d883a 	add	r6,r6,r6
  80a724:	318d883a 	add	r6,r6,r6
  80a728:	31800204 	addi	r6,r6,8
  80a72c:	1023883a 	mov	r17,r2
  80a730:	08033400 	call	803340 <memcpy>
  80a734:	980b883a 	mov	r5,r19
  80a738:	a009883a 	mov	r4,r20
  80a73c:	08099940 	call	809994 <_Bfree>
  80a740:	8827883a 	mov	r19,r17
  80a744:	003fe006 	br	80a6c8 <__multadd+0x80>

0080a748 <__pow5mult>:
  80a748:	defffa04 	addi	sp,sp,-24
  80a74c:	308000cc 	andi	r2,r6,3
  80a750:	dd000415 	stw	r20,16(sp)
  80a754:	dcc00315 	stw	r19,12(sp)
  80a758:	dc000015 	stw	r16,0(sp)
  80a75c:	dfc00515 	stw	ra,20(sp)
  80a760:	dc800215 	stw	r18,8(sp)
  80a764:	dc400115 	stw	r17,4(sp)
  80a768:	3021883a 	mov	r16,r6
  80a76c:	2027883a 	mov	r19,r4
  80a770:	2829883a 	mov	r20,r5
  80a774:	10002b1e 	bne	r2,zero,80a824 <__pow5mult+0xdc>
  80a778:	8025d0ba 	srai	r18,r16,2
  80a77c:	90001b26 	beq	r18,zero,80a7ec <__pow5mult+0xa4>
  80a780:	9c001217 	ldw	r16,72(r19)
  80a784:	8000081e 	bne	r16,zero,80a7a8 <__pow5mult+0x60>
  80a788:	00003006 	br	80a84c <__pow5mult+0x104>
  80a78c:	800b883a 	mov	r5,r16
  80a790:	800d883a 	mov	r6,r16
  80a794:	9809883a 	mov	r4,r19
  80a798:	90001426 	beq	r18,zero,80a7ec <__pow5mult+0xa4>
  80a79c:	80800017 	ldw	r2,0(r16)
  80a7a0:	10001b26 	beq	r2,zero,80a810 <__pow5mult+0xc8>
  80a7a4:	1021883a 	mov	r16,r2
  80a7a8:	9080004c 	andi	r2,r18,1
  80a7ac:	1005003a 	cmpeq	r2,r2,zero
  80a7b0:	9025d07a 	srai	r18,r18,1
  80a7b4:	800d883a 	mov	r6,r16
  80a7b8:	9809883a 	mov	r4,r19
  80a7bc:	a00b883a 	mov	r5,r20
  80a7c0:	103ff21e 	bne	r2,zero,80a78c <__pow5mult+0x44>
  80a7c4:	080a4240 	call	80a424 <__multiply>
  80a7c8:	a00b883a 	mov	r5,r20
  80a7cc:	9809883a 	mov	r4,r19
  80a7d0:	1023883a 	mov	r17,r2
  80a7d4:	08099940 	call	809994 <_Bfree>
  80a7d8:	8829883a 	mov	r20,r17
  80a7dc:	800b883a 	mov	r5,r16
  80a7e0:	800d883a 	mov	r6,r16
  80a7e4:	9809883a 	mov	r4,r19
  80a7e8:	903fec1e 	bne	r18,zero,80a79c <__pow5mult+0x54>
  80a7ec:	a005883a 	mov	r2,r20
  80a7f0:	dfc00517 	ldw	ra,20(sp)
  80a7f4:	dd000417 	ldw	r20,16(sp)
  80a7f8:	dcc00317 	ldw	r19,12(sp)
  80a7fc:	dc800217 	ldw	r18,8(sp)
  80a800:	dc400117 	ldw	r17,4(sp)
  80a804:	dc000017 	ldw	r16,0(sp)
  80a808:	dec00604 	addi	sp,sp,24
  80a80c:	f800283a 	ret
  80a810:	080a4240 	call	80a424 <__multiply>
  80a814:	80800015 	stw	r2,0(r16)
  80a818:	1021883a 	mov	r16,r2
  80a81c:	10000015 	stw	zero,0(r2)
  80a820:	003fe106 	br	80a7a8 <__pow5mult+0x60>
  80a824:	1085883a 	add	r2,r2,r2
  80a828:	00c02074 	movhi	r3,129
  80a82c:	18d4b104 	addi	r3,r3,21188
  80a830:	1085883a 	add	r2,r2,r2
  80a834:	10c5883a 	add	r2,r2,r3
  80a838:	11bfff17 	ldw	r6,-4(r2)
  80a83c:	000f883a 	mov	r7,zero
  80a840:	080a6480 	call	80a648 <__multadd>
  80a844:	1029883a 	mov	r20,r2
  80a848:	003fcb06 	br	80a778 <__pow5mult+0x30>
  80a84c:	9809883a 	mov	r4,r19
  80a850:	01409c44 	movi	r5,625
  80a854:	080a60c0 	call	80a60c <__i2b>
  80a858:	98801215 	stw	r2,72(r19)
  80a85c:	1021883a 	mov	r16,r2
  80a860:	10000015 	stw	zero,0(r2)
  80a864:	003fd006 	br	80a7a8 <__pow5mult+0x60>

0080a868 <__s2b>:
  80a868:	defff904 	addi	sp,sp,-28
  80a86c:	dcc00315 	stw	r19,12(sp)
  80a870:	dc800215 	stw	r18,8(sp)
  80a874:	2827883a 	mov	r19,r5
  80a878:	2025883a 	mov	r18,r4
  80a87c:	01400244 	movi	r5,9
  80a880:	39000204 	addi	r4,r7,8
  80a884:	dd000415 	stw	r20,16(sp)
  80a888:	dc400115 	stw	r17,4(sp)
  80a88c:	dfc00615 	stw	ra,24(sp)
  80a890:	dd400515 	stw	r21,20(sp)
  80a894:	dc000015 	stw	r16,0(sp)
  80a898:	3829883a 	mov	r20,r7
  80a89c:	3023883a 	mov	r17,r6
  80a8a0:	080fcc80 	call	80fcc8 <__divsi3>
  80a8a4:	00c00044 	movi	r3,1
  80a8a8:	1880350e 	bge	r3,r2,80a980 <__s2b+0x118>
  80a8ac:	000b883a 	mov	r5,zero
  80a8b0:	18c7883a 	add	r3,r3,r3
  80a8b4:	29400044 	addi	r5,r5,1
  80a8b8:	18bffd16 	blt	r3,r2,80a8b0 <__s2b+0x48>
  80a8bc:	9009883a 	mov	r4,r18
  80a8c0:	0809f140 	call	809f14 <_Balloc>
  80a8c4:	1011883a 	mov	r8,r2
  80a8c8:	d8800717 	ldw	r2,28(sp)
  80a8cc:	00c00044 	movi	r3,1
  80a8d0:	01800244 	movi	r6,9
  80a8d4:	40800515 	stw	r2,20(r8)
  80a8d8:	40c00415 	stw	r3,16(r8)
  80a8dc:	3440260e 	bge	r6,r17,80a978 <__s2b+0x110>
  80a8e0:	3021883a 	mov	r16,r6
  80a8e4:	99ab883a 	add	r21,r19,r6
  80a8e8:	9c05883a 	add	r2,r19,r16
  80a8ec:	11c00007 	ldb	r7,0(r2)
  80a8f0:	400b883a 	mov	r5,r8
  80a8f4:	9009883a 	mov	r4,r18
  80a8f8:	39fff404 	addi	r7,r7,-48
  80a8fc:	01800284 	movi	r6,10
  80a900:	080a6480 	call	80a648 <__multadd>
  80a904:	84000044 	addi	r16,r16,1
  80a908:	1011883a 	mov	r8,r2
  80a90c:	8c3ff61e 	bne	r17,r16,80a8e8 <__s2b+0x80>
  80a910:	ac45883a 	add	r2,r21,r17
  80a914:	117ffe04 	addi	r5,r2,-8
  80a918:	880d883a 	mov	r6,r17
  80a91c:	35000c0e 	bge	r6,r20,80a950 <__s2b+0xe8>
  80a920:	a185c83a 	sub	r2,r20,r6
  80a924:	2821883a 	mov	r16,r5
  80a928:	28a3883a 	add	r17,r5,r2
  80a92c:	81c00007 	ldb	r7,0(r16)
  80a930:	400b883a 	mov	r5,r8
  80a934:	9009883a 	mov	r4,r18
  80a938:	39fff404 	addi	r7,r7,-48
  80a93c:	01800284 	movi	r6,10
  80a940:	080a6480 	call	80a648 <__multadd>
  80a944:	84000044 	addi	r16,r16,1
  80a948:	1011883a 	mov	r8,r2
  80a94c:	847ff71e 	bne	r16,r17,80a92c <__s2b+0xc4>
  80a950:	4005883a 	mov	r2,r8
  80a954:	dfc00617 	ldw	ra,24(sp)
  80a958:	dd400517 	ldw	r21,20(sp)
  80a95c:	dd000417 	ldw	r20,16(sp)
  80a960:	dcc00317 	ldw	r19,12(sp)
  80a964:	dc800217 	ldw	r18,8(sp)
  80a968:	dc400117 	ldw	r17,4(sp)
  80a96c:	dc000017 	ldw	r16,0(sp)
  80a970:	dec00704 	addi	sp,sp,28
  80a974:	f800283a 	ret
  80a978:	99400284 	addi	r5,r19,10
  80a97c:	003fe706 	br	80a91c <__s2b+0xb4>
  80a980:	000b883a 	mov	r5,zero
  80a984:	003fcd06 	br	80a8bc <__s2b+0x54>

0080a988 <_read_r>:
  80a988:	defffd04 	addi	sp,sp,-12
  80a98c:	dc000015 	stw	r16,0(sp)
  80a990:	040020b4 	movhi	r16,130
  80a994:	84239d04 	addi	r16,r16,-29068
  80a998:	dc400115 	stw	r17,4(sp)
  80a99c:	80000015 	stw	zero,0(r16)
  80a9a0:	2023883a 	mov	r17,r4
  80a9a4:	2809883a 	mov	r4,r5
  80a9a8:	300b883a 	mov	r5,r6
  80a9ac:	380d883a 	mov	r6,r7
  80a9b0:	dfc00215 	stw	ra,8(sp)
  80a9b4:	08112c40 	call	8112c4 <read>
  80a9b8:	1007883a 	mov	r3,r2
  80a9bc:	00bfffc4 	movi	r2,-1
  80a9c0:	18800626 	beq	r3,r2,80a9dc <_read_r+0x54>
  80a9c4:	1805883a 	mov	r2,r3
  80a9c8:	dfc00217 	ldw	ra,8(sp)
  80a9cc:	dc400117 	ldw	r17,4(sp)
  80a9d0:	dc000017 	ldw	r16,0(sp)
  80a9d4:	dec00304 	addi	sp,sp,12
  80a9d8:	f800283a 	ret
  80a9dc:	80800017 	ldw	r2,0(r16)
  80a9e0:	103ff826 	beq	r2,zero,80a9c4 <_read_r+0x3c>
  80a9e4:	88800015 	stw	r2,0(r17)
  80a9e8:	1805883a 	mov	r2,r3
  80a9ec:	dfc00217 	ldw	ra,8(sp)
  80a9f0:	dc400117 	ldw	r17,4(sp)
  80a9f4:	dc000017 	ldw	r16,0(sp)
  80a9f8:	dec00304 	addi	sp,sp,12
  80a9fc:	f800283a 	ret

0080aa00 <__isinfd>:
  80aa00:	200d883a 	mov	r6,r4
  80aa04:	0109c83a 	sub	r4,zero,r4
  80aa08:	2188b03a 	or	r4,r4,r6
  80aa0c:	2008d7fa 	srli	r4,r4,31
  80aa10:	00a00034 	movhi	r2,32768
  80aa14:	10bfffc4 	addi	r2,r2,-1
  80aa18:	1144703a 	and	r2,r2,r5
  80aa1c:	2088b03a 	or	r4,r4,r2
  80aa20:	009ffc34 	movhi	r2,32752
  80aa24:	1105c83a 	sub	r2,r2,r4
  80aa28:	0087c83a 	sub	r3,zero,r2
  80aa2c:	10c4b03a 	or	r2,r2,r3
  80aa30:	1004d7fa 	srli	r2,r2,31
  80aa34:	00c00044 	movi	r3,1
  80aa38:	1885c83a 	sub	r2,r3,r2
  80aa3c:	f800283a 	ret

0080aa40 <__isnand>:
  80aa40:	200d883a 	mov	r6,r4
  80aa44:	0109c83a 	sub	r4,zero,r4
  80aa48:	2188b03a 	or	r4,r4,r6
  80aa4c:	2008d7fa 	srli	r4,r4,31
  80aa50:	00a00034 	movhi	r2,32768
  80aa54:	10bfffc4 	addi	r2,r2,-1
  80aa58:	1144703a 	and	r2,r2,r5
  80aa5c:	2088b03a 	or	r4,r4,r2
  80aa60:	009ffc34 	movhi	r2,32752
  80aa64:	1105c83a 	sub	r2,r2,r4
  80aa68:	1004d7fa 	srli	r2,r2,31
  80aa6c:	f800283a 	ret

0080aa70 <__sccl>:
  80aa70:	28c00003 	ldbu	r3,0(r5)
  80aa74:	00801784 	movi	r2,94
  80aa78:	2a000044 	addi	r8,r5,1
  80aa7c:	18802526 	beq	r3,r2,80ab14 <__sccl+0xa4>
  80aa80:	180f883a 	mov	r7,r3
  80aa84:	0013883a 	mov	r9,zero
  80aa88:	000d883a 	mov	r6,zero
  80aa8c:	0007883a 	mov	r3,zero
  80aa90:	01404004 	movi	r5,256
  80aa94:	1905883a 	add	r2,r3,r4
  80aa98:	18c00044 	addi	r3,r3,1
  80aa9c:	11800005 	stb	r6,0(r2)
  80aaa0:	197ffc1e 	bne	r3,r5,80aa94 <__sccl+0x24>
  80aaa4:	38000c26 	beq	r7,zero,80aad8 <__sccl+0x68>
  80aaa8:	00800044 	movi	r2,1
  80aaac:	124dc83a 	sub	r6,r2,r9
  80aab0:	3905883a 	add	r2,r7,r4
  80aab4:	11800005 	stb	r6,0(r2)
  80aab8:	41400044 	addi	r5,r8,1
  80aabc:	02400b44 	movi	r9,45
  80aac0:	02801744 	movi	r10,93
  80aac4:	28bfffc3 	ldbu	r2,-1(r5)
  80aac8:	2811883a 	mov	r8,r5
  80aacc:	12400726 	beq	r2,r9,80aaec <__sccl+0x7c>
  80aad0:	12800226 	beq	r2,r10,80aadc <__sccl+0x6c>
  80aad4:	1000031e 	bne	r2,zero,80aae4 <__sccl+0x74>
  80aad8:	423fffc4 	addi	r8,r8,-1
  80aadc:	4005883a 	mov	r2,r8
  80aae0:	f800283a 	ret
  80aae4:	100f883a 	mov	r7,r2
  80aae8:	003ff106 	br	80aab0 <__sccl+0x40>
  80aaec:	28c00003 	ldbu	r3,0(r5)
  80aaf0:	1a800d26 	beq	r3,r10,80ab28 <__sccl+0xb8>
  80aaf4:	19c00c16 	blt	r3,r7,80ab28 <__sccl+0xb8>
  80aaf8:	21c5883a 	add	r2,r4,r7
  80aafc:	39c00044 	addi	r7,r7,1
  80ab00:	11800045 	stb	r6,1(r2)
  80ab04:	10800044 	addi	r2,r2,1
  80ab08:	38fffc16 	blt	r7,r3,80aafc <__sccl+0x8c>
  80ab0c:	29400084 	addi	r5,r5,2
  80ab10:	003fec06 	br	80aac4 <__sccl+0x54>
  80ab14:	29c00043 	ldbu	r7,1(r5)
  80ab18:	02400044 	movi	r9,1
  80ab1c:	2a000084 	addi	r8,r5,2
  80ab20:	480d883a 	mov	r6,r9
  80ab24:	003fd906 	br	80aa8c <__sccl+0x1c>
  80ab28:	01c00b44 	movi	r7,45
  80ab2c:	003fe006 	br	80aab0 <__sccl+0x40>

0080ab30 <nanf>:
  80ab30:	009ff034 	movhi	r2,32704
  80ab34:	f800283a 	ret

0080ab38 <strcmp>:
  80ab38:	2144b03a 	or	r2,r4,r5
  80ab3c:	108000cc 	andi	r2,r2,3
  80ab40:	10001d1e 	bne	r2,zero,80abb8 <strcmp+0x80>
  80ab44:	200f883a 	mov	r7,r4
  80ab48:	28800017 	ldw	r2,0(r5)
  80ab4c:	21000017 	ldw	r4,0(r4)
  80ab50:	280d883a 	mov	r6,r5
  80ab54:	2080161e 	bne	r4,r2,80abb0 <strcmp+0x78>
  80ab58:	023fbff4 	movhi	r8,65279
  80ab5c:	423fbfc4 	addi	r8,r8,-257
  80ab60:	2207883a 	add	r3,r4,r8
  80ab64:	01602074 	movhi	r5,32897
  80ab68:	29602004 	addi	r5,r5,-32640
  80ab6c:	1946703a 	and	r3,r3,r5
  80ab70:	0104303a 	nor	r2,zero,r4
  80ab74:	10c4703a 	and	r2,r2,r3
  80ab78:	10001c1e 	bne	r2,zero,80abec <strcmp+0xb4>
  80ab7c:	4013883a 	mov	r9,r8
  80ab80:	2811883a 	mov	r8,r5
  80ab84:	00000106 	br	80ab8c <strcmp+0x54>
  80ab88:	1800181e 	bne	r3,zero,80abec <strcmp+0xb4>
  80ab8c:	39c00104 	addi	r7,r7,4
  80ab90:	39000017 	ldw	r4,0(r7)
  80ab94:	31800104 	addi	r6,r6,4
  80ab98:	31400017 	ldw	r5,0(r6)
  80ab9c:	2245883a 	add	r2,r4,r9
  80aba0:	1204703a 	and	r2,r2,r8
  80aba4:	0106303a 	nor	r3,zero,r4
  80aba8:	1886703a 	and	r3,r3,r2
  80abac:	217ff626 	beq	r4,r5,80ab88 <strcmp+0x50>
  80abb0:	3809883a 	mov	r4,r7
  80abb4:	300b883a 	mov	r5,r6
  80abb8:	20c00007 	ldb	r3,0(r4)
  80abbc:	1800051e 	bne	r3,zero,80abd4 <strcmp+0x9c>
  80abc0:	00000606 	br	80abdc <strcmp+0xa4>
  80abc4:	21000044 	addi	r4,r4,1
  80abc8:	20c00007 	ldb	r3,0(r4)
  80abcc:	29400044 	addi	r5,r5,1
  80abd0:	18000226 	beq	r3,zero,80abdc <strcmp+0xa4>
  80abd4:	28800007 	ldb	r2,0(r5)
  80abd8:	18bffa26 	beq	r3,r2,80abc4 <strcmp+0x8c>
  80abdc:	20c00003 	ldbu	r3,0(r4)
  80abe0:	28800003 	ldbu	r2,0(r5)
  80abe4:	1885c83a 	sub	r2,r3,r2
  80abe8:	f800283a 	ret
  80abec:	0005883a 	mov	r2,zero
  80abf0:	f800283a 	ret

0080abf4 <match>:
  80abf4:	21800017 	ldw	r6,0(r4)
  80abf8:	01c01004 	movi	r7,64
  80abfc:	02001684 	movi	r8,90
  80ac00:	28800007 	ldb	r2,0(r5)
  80ac04:	29400044 	addi	r5,r5,1
  80ac08:	10000826 	beq	r2,zero,80ac2c <match+0x38>
  80ac0c:	31800044 	addi	r6,r6,1
  80ac10:	30c00007 	ldb	r3,0(r6)
  80ac14:	38c0020e 	bge	r7,r3,80ac20 <match+0x2c>
  80ac18:	40c00116 	blt	r8,r3,80ac20 <match+0x2c>
  80ac1c:	18c00804 	addi	r3,r3,32
  80ac20:	18bff726 	beq	r3,r2,80ac00 <match+0xc>
  80ac24:	0005883a 	mov	r2,zero
  80ac28:	f800283a 	ret
  80ac2c:	30800044 	addi	r2,r6,1
  80ac30:	20800015 	stw	r2,0(r4)
  80ac34:	00800044 	movi	r2,1
  80ac38:	f800283a 	ret

0080ac3c <_strtod_r>:
  80ac3c:	deffde04 	addi	sp,sp,-136
  80ac40:	df002015 	stw	fp,128(sp)
  80ac44:	dd401d15 	stw	r21,116(sp)
  80ac48:	dc401915 	stw	r17,100(sp)
  80ac4c:	dfc02115 	stw	ra,132(sp)
  80ac50:	ddc01f15 	stw	r23,124(sp)
  80ac54:	dd801e15 	stw	r22,120(sp)
  80ac58:	dd001c15 	stw	r20,112(sp)
  80ac5c:	dcc01b15 	stw	r19,108(sp)
  80ac60:	dc801a15 	stw	r18,104(sp)
  80ac64:	dc001815 	stw	r16,96(sp)
  80ac68:	2823883a 	mov	r17,r5
  80ac6c:	202b883a 	mov	r21,r4
  80ac70:	d9801515 	stw	r6,84(sp)
  80ac74:	d8000915 	stw	zero,36(sp)
  80ac78:	d8000a15 	stw	zero,40(sp)
  80ac7c:	d9400415 	stw	r5,16(sp)
  80ac80:	df000904 	addi	fp,sp,36
  80ac84:	da000417 	ldw	r8,16(sp)
  80ac88:	00800b44 	movi	r2,45
  80ac8c:	40c00003 	ldbu	r3,0(r8)
  80ac90:	10c03536 	bltu	r2,r3,80ad68 <_strtod_r+0x12c>
  80ac94:	18c5883a 	add	r2,r3,r3
  80ac98:	1085883a 	add	r2,r2,r2
  80ac9c:	00c02074 	movhi	r3,129
  80aca0:	18eb2c04 	addi	r3,r3,-21328
  80aca4:	10c5883a 	add	r2,r2,r3
  80aca8:	11000017 	ldw	r4,0(r2)
  80acac:	2000683a 	jmp	r4
  80acb0:	0080aea4 	muli	r2,zero,698
  80acb4:	0080ad68 	cmpgeui	r2,zero,693
  80acb8:	0080ad68 	cmpgeui	r2,zero,693
  80acbc:	0080ad68 	cmpgeui	r2,zero,693
  80acc0:	0080ad68 	cmpgeui	r2,zero,693
  80acc4:	0080ad68 	cmpgeui	r2,zero,693
  80acc8:	0080ad68 	cmpgeui	r2,zero,693
  80accc:	0080ad68 	cmpgeui	r2,zero,693
  80acd0:	0080ad68 	cmpgeui	r2,zero,693
  80acd4:	0080b1bc 	xorhi	r2,zero,710
  80acd8:	0080b1bc 	xorhi	r2,zero,710
  80acdc:	0080b1bc 	xorhi	r2,zero,710
  80ace0:	0080b1bc 	xorhi	r2,zero,710
  80ace4:	0080b1bc 	xorhi	r2,zero,710
  80ace8:	0080ad68 	cmpgeui	r2,zero,693
  80acec:	0080ad68 	cmpgeui	r2,zero,693
  80acf0:	0080ad68 	cmpgeui	r2,zero,693
  80acf4:	0080ad68 	cmpgeui	r2,zero,693
  80acf8:	0080ad68 	cmpgeui	r2,zero,693
  80acfc:	0080ad68 	cmpgeui	r2,zero,693
  80ad00:	0080ad68 	cmpgeui	r2,zero,693
  80ad04:	0080ad68 	cmpgeui	r2,zero,693
  80ad08:	0080ad68 	cmpgeui	r2,zero,693
  80ad0c:	0080ad68 	cmpgeui	r2,zero,693
  80ad10:	0080ad68 	cmpgeui	r2,zero,693
  80ad14:	0080ad68 	cmpgeui	r2,zero,693
  80ad18:	0080ad68 	cmpgeui	r2,zero,693
  80ad1c:	0080ad68 	cmpgeui	r2,zero,693
  80ad20:	0080ad68 	cmpgeui	r2,zero,693
  80ad24:	0080ad68 	cmpgeui	r2,zero,693
  80ad28:	0080ad68 	cmpgeui	r2,zero,693
  80ad2c:	0080ad68 	cmpgeui	r2,zero,693
  80ad30:	0080b1bc 	xorhi	r2,zero,710
  80ad34:	0080ad68 	cmpgeui	r2,zero,693
  80ad38:	0080ad68 	cmpgeui	r2,zero,693
  80ad3c:	0080ad68 	cmpgeui	r2,zero,693
  80ad40:	0080ad68 	cmpgeui	r2,zero,693
  80ad44:	0080ad68 	cmpgeui	r2,zero,693
  80ad48:	0080ad68 	cmpgeui	r2,zero,693
  80ad4c:	0080ad68 	cmpgeui	r2,zero,693
  80ad50:	0080ad68 	cmpgeui	r2,zero,693
  80ad54:	0080ad68 	cmpgeui	r2,zero,693
  80ad58:	0080ad68 	cmpgeui	r2,zero,693
  80ad5c:	0080b19c 	xori	r2,zero,710
  80ad60:	0080ad68 	cmpgeui	r2,zero,693
  80ad64:	0080b1c8 	cmpgei	r2,zero,711
  80ad68:	d8001115 	stw	zero,68(sp)
  80ad6c:	40c00007 	ldb	r3,0(r8)
  80ad70:	00800c04 	movi	r2,48
  80ad74:	1880d026 	beq	r3,r2,80b0b8 <_strtod_r+0x47c>
  80ad78:	001f883a 	mov	r15,zero
  80ad7c:	41000007 	ldb	r4,0(r8)
  80ad80:	00c00bc4 	movi	r3,47
  80ad84:	402d883a 	mov	r22,r8
  80ad88:	1903470e 	bge	r3,r4,80baa8 <_strtod_r+0xe6c>
  80ad8c:	00800e44 	movi	r2,57
  80ad90:	11034516 	blt	r2,r4,80baa8 <_strtod_r+0xe6c>
  80ad94:	180f883a 	mov	r7,r3
  80ad98:	1013883a 	mov	r9,r2
  80ad9c:	4007883a 	mov	r3,r8
  80ada0:	000d883a 	mov	r6,zero
  80ada4:	0029883a 	mov	r20,zero
  80ada8:	0021883a 	mov	r16,zero
  80adac:	01400204 	movi	r5,8
  80adb0:	028003c4 	movi	r10,15
  80adb4:	29803116 	blt	r5,r6,80ae7c <_strtod_r+0x240>
  80adb8:	a08002a4 	muli	r2,r20,10
  80adbc:	1105883a 	add	r2,r2,r4
  80adc0:	153ff404 	addi	r20,r2,-48
  80adc4:	1a000044 	addi	r8,r3,1
  80adc8:	da000415 	stw	r8,16(sp)
  80adcc:	41000007 	ldb	r4,0(r8)
  80add0:	31800044 	addi	r6,r6,1
  80add4:	4007883a 	mov	r3,r8
  80add8:	3900010e 	bge	r7,r4,80ade0 <_strtod_r+0x1a4>
  80addc:	493ff50e 	bge	r9,r4,80adb4 <_strtod_r+0x178>
  80ade0:	00800b84 	movi	r2,46
  80ade4:	2080c126 	beq	r4,r2,80b0ec <_strtod_r+0x4b0>
  80ade8:	3027883a 	mov	r19,r6
  80adec:	0025883a 	mov	r18,zero
  80adf0:	0015883a 	mov	r10,zero
  80adf4:	000f883a 	mov	r7,zero
  80adf8:	00801944 	movi	r2,101
  80adfc:	20802426 	beq	r4,r2,80ae90 <_strtod_r+0x254>
  80ae00:	00801144 	movi	r2,69
  80ae04:	20802226 	beq	r4,r2,80ae90 <_strtod_r+0x254>
  80ae08:	9816c03a 	cmpne	r11,r19,zero
  80ae0c:	000b883a 	mov	r5,zero
  80ae10:	5800631e 	bne	r11,zero,80afa0 <_strtod_r+0x364>
  80ae14:	3800c126 	beq	r7,zero,80b11c <_strtod_r+0x4e0>
  80ae18:	d8c01517 	ldw	r3,84(sp)
  80ae1c:	18000226 	beq	r3,zero,80ae28 <_strtod_r+0x1ec>
  80ae20:	d8800417 	ldw	r2,16(sp)
  80ae24:	18800015 	stw	r2,0(r3)
  80ae28:	d9001117 	ldw	r4,68(sp)
  80ae2c:	2005003a 	cmpeq	r2,r4,zero
  80ae30:	10001f1e 	bne	r2,zero,80aeb0 <_strtod_r+0x274>
  80ae34:	e0800017 	ldw	r2,0(fp)
  80ae38:	e0c00117 	ldw	r3,4(fp)
  80ae3c:	1009883a 	mov	r4,r2
  80ae40:	1960003c 	xorhi	r5,r3,32768
  80ae44:	2005883a 	mov	r2,r4
  80ae48:	2807883a 	mov	r3,r5
  80ae4c:	dfc02117 	ldw	ra,132(sp)
  80ae50:	df002017 	ldw	fp,128(sp)
  80ae54:	ddc01f17 	ldw	r23,124(sp)
  80ae58:	dd801e17 	ldw	r22,120(sp)
  80ae5c:	dd401d17 	ldw	r21,116(sp)
  80ae60:	dd001c17 	ldw	r20,112(sp)
  80ae64:	dcc01b17 	ldw	r19,108(sp)
  80ae68:	dc801a17 	ldw	r18,104(sp)
  80ae6c:	dc401917 	ldw	r17,100(sp)
  80ae70:	dc001817 	ldw	r16,96(sp)
  80ae74:	dec02204 	addi	sp,sp,136
  80ae78:	f800283a 	ret
  80ae7c:	51bfd116 	blt	r10,r6,80adc4 <_strtod_r+0x188>
  80ae80:	808002a4 	muli	r2,r16,10
  80ae84:	1105883a 	add	r2,r2,r4
  80ae88:	143ff404 	addi	r16,r2,-48
  80ae8c:	003fcd06 	br	80adc4 <_strtod_r+0x188>
  80ae90:	9816c03a 	cmpne	r11,r19,zero
  80ae94:	5800091e 	bne	r11,zero,80aebc <_strtod_r+0x280>
  80ae98:	3800081e 	bne	r7,zero,80aebc <_strtod_r+0x280>
  80ae9c:	7805003a 	cmpeq	r2,r15,zero
  80aea0:	10000626 	beq	r2,zero,80aebc <_strtod_r+0x280>
  80aea4:	d8001115 	stw	zero,68(sp)
  80aea8:	dc400415 	stw	r17,16(sp)
  80aeac:	003fda06 	br	80ae18 <_strtod_r+0x1dc>
  80aeb0:	e1000017 	ldw	r4,0(fp)
  80aeb4:	e1400117 	ldw	r5,4(fp)
  80aeb8:	003fe206 	br	80ae44 <_strtod_r+0x208>
  80aebc:	dc400417 	ldw	r17,16(sp)
  80aec0:	00800ac4 	movi	r2,43
  80aec4:	8a000044 	addi	r8,r17,1
  80aec8:	da000415 	stw	r8,16(sp)
  80aecc:	88c00047 	ldb	r3,1(r17)
  80aed0:	4009883a 	mov	r4,r8
  80aed4:	1880bf26 	beq	r3,r2,80b1d4 <_strtod_r+0x598>
  80aed8:	00800b44 	movi	r2,45
  80aedc:	18834526 	beq	r3,r2,80bbf4 <_strtod_r+0xfb8>
  80aee0:	1809883a 	mov	r4,r3
  80aee4:	20fff404 	addi	r3,r4,-48
  80aee8:	00800244 	movi	r2,9
  80aeec:	001d883a 	mov	r14,zero
  80aef0:	10c0bf36 	bltu	r2,r3,80b1f0 <_strtod_r+0x5b4>
  80aef4:	00800c04 	movi	r2,48
  80aef8:	2080061e 	bne	r4,r2,80af14 <_strtod_r+0x2d8>
  80aefc:	da000417 	ldw	r8,16(sp)
  80af00:	2005883a 	mov	r2,r4
  80af04:	42000044 	addi	r8,r8,1
  80af08:	da000415 	stw	r8,16(sp)
  80af0c:	41000007 	ldb	r4,0(r8)
  80af10:	20bffc26 	beq	r4,r2,80af04 <_strtod_r+0x2c8>
  80af14:	20fff3c4 	addi	r3,r4,-49
  80af18:	00800204 	movi	r2,8
  80af1c:	10ffbb36 	bltu	r2,r3,80ae0c <_strtod_r+0x1d0>
  80af20:	da000417 	ldw	r8,16(sp)
  80af24:	227ff404 	addi	r9,r4,-48
  80af28:	03000bc4 	movi	r12,47
  80af2c:	4007883a 	mov	r3,r8
  80af30:	42000044 	addi	r8,r8,1
  80af34:	da000415 	stw	r8,16(sp)
  80af38:	41000007 	ldb	r4,0(r8)
  80af3c:	61000d0e 	bge	r12,r4,80af74 <_strtod_r+0x338>
  80af40:	00800e44 	movi	r2,57
  80af44:	11000b16 	blt	r2,r4,80af74 <_strtod_r+0x338>
  80af48:	601b883a 	mov	r13,r12
  80af4c:	1019883a 	mov	r12,r2
  80af50:	00000106 	br	80af58 <_strtod_r+0x31c>
  80af54:	61000716 	blt	r12,r4,80af74 <_strtod_r+0x338>
  80af58:	488002a4 	muli	r2,r9,10
  80af5c:	42000044 	addi	r8,r8,1
  80af60:	da000415 	stw	r8,16(sp)
  80af64:	2085883a 	add	r2,r4,r2
  80af68:	41000007 	ldb	r4,0(r8)
  80af6c:	127ff404 	addi	r9,r2,-48
  80af70:	693ff816 	blt	r13,r4,80af54 <_strtod_r+0x318>
  80af74:	40c7c83a 	sub	r3,r8,r3
  80af78:	00800204 	movi	r2,8
  80af7c:	10c2e416 	blt	r2,r3,80bb10 <_strtod_r+0xed4>
  80af80:	009387c4 	movi	r2,19999
  80af84:	480b883a 	mov	r5,r9
  80af88:	1240010e 	bge	r2,r9,80af90 <_strtod_r+0x354>
  80af8c:	100b883a 	mov	r5,r2
  80af90:	7005003a 	cmpeq	r2,r14,zero
  80af94:	103f9e1e 	bne	r2,zero,80ae10 <_strtod_r+0x1d4>
  80af98:	014bc83a 	sub	r5,zero,r5
  80af9c:	583f9d26 	beq	r11,zero,80ae14 <_strtod_r+0x1d8>
  80afa0:	2a8bc83a 	sub	r5,r5,r10
  80afa4:	d9400f15 	stw	r5,60(sp)
  80afa8:	30007a1e 	bne	r6,zero,80b194 <_strtod_r+0x558>
  80afac:	dcc01215 	stw	r19,72(sp)
  80afb0:	00800404 	movi	r2,16
  80afb4:	9825883a 	mov	r18,r19
  80afb8:	14c0010e 	bge	r2,r19,80afc0 <_strtod_r+0x384>
  80afbc:	1025883a 	mov	r18,r2
  80afc0:	a009883a 	mov	r4,r20
  80afc4:	080fab80 	call	80fab8 <__floatunsidf>
  80afc8:	100f883a 	mov	r7,r2
  80afcc:	e0800015 	stw	r2,0(fp)
  80afd0:	00800244 	movi	r2,9
  80afd4:	e0c00115 	stw	r3,4(fp)
  80afd8:	1480160e 	bge	r2,r18,80b034 <_strtod_r+0x3f8>
  80afdc:	900c90fa 	slli	r6,r18,3
  80afe0:	01002074 	movhi	r4,129
  80afe4:	21146b04 	addi	r4,r4,20908
  80afe8:	180b883a 	mov	r5,r3
  80afec:	310d883a 	add	r6,r6,r4
  80aff0:	30ffef17 	ldw	r3,-68(r6)
  80aff4:	30bfee17 	ldw	r2,-72(r6)
  80aff8:	3809883a 	mov	r4,r7
  80affc:	180f883a 	mov	r7,r3
  80b000:	100d883a 	mov	r6,r2
  80b004:	080ef280 	call	80ef28 <__muldf3>
  80b008:	8009883a 	mov	r4,r16
  80b00c:	1823883a 	mov	r17,r3
  80b010:	1021883a 	mov	r16,r2
  80b014:	080fab80 	call	80fab8 <__floatunsidf>
  80b018:	880b883a 	mov	r5,r17
  80b01c:	180f883a 	mov	r7,r3
  80b020:	8009883a 	mov	r4,r16
  80b024:	100d883a 	mov	r6,r2
  80b028:	080eeb40 	call	80eeb4 <__adddf3>
  80b02c:	e0c00115 	stw	r3,4(fp)
  80b030:	e0800015 	stw	r2,0(fp)
  80b034:	010003c4 	movi	r4,15
  80b038:	24c09816 	blt	r4,r19,80b29c <_strtod_r+0x660>
  80b03c:	d9800f17 	ldw	r6,60(sp)
  80b040:	303f7526 	beq	r6,zero,80ae18 <_strtod_r+0x1dc>
  80b044:	0183be0e 	bge	zero,r6,80bf40 <_strtod_r+0x1304>
  80b048:	00800584 	movi	r2,22
  80b04c:	1182b20e 	bge	r2,r6,80bb18 <_strtod_r+0xedc>
  80b050:	d8c00f17 	ldw	r3,60(sp)
  80b054:	24e3c83a 	sub	r17,r4,r19
  80b058:	88800584 	addi	r2,r17,22
  80b05c:	10c08f16 	blt	r2,r3,80b29c <_strtod_r+0x660>
  80b060:	880890fa 	slli	r4,r17,3
  80b064:	04002074 	movhi	r16,129
  80b068:	84146b04 	addi	r16,r16,20908
  80b06c:	e0800017 	ldw	r2,0(fp)
  80b070:	2409883a 	add	r4,r4,r16
  80b074:	22000017 	ldw	r8,0(r4)
  80b078:	22400117 	ldw	r9,4(r4)
  80b07c:	e0c00117 	ldw	r3,4(fp)
  80b080:	1009883a 	mov	r4,r2
  80b084:	480f883a 	mov	r7,r9
  80b088:	180b883a 	mov	r5,r3
  80b08c:	400d883a 	mov	r6,r8
  80b090:	080ef280 	call	80ef28 <__muldf3>
  80b094:	d9000f17 	ldw	r4,60(sp)
  80b098:	180b883a 	mov	r5,r3
  80b09c:	2455c83a 	sub	r10,r4,r17
  80b0a0:	501490fa 	slli	r10,r10,3
  80b0a4:	1009883a 	mov	r4,r2
  80b0a8:	5415883a 	add	r10,r10,r16
  80b0ac:	52000017 	ldw	r8,0(r10)
  80b0b0:	52400117 	ldw	r9,4(r10)
  80b0b4:	0002a206 	br	80bb40 <_strtod_r+0xf04>
  80b0b8:	40c00047 	ldb	r3,1(r8)
  80b0bc:	00801604 	movi	r2,88
  80b0c0:	18804e26 	beq	r3,r2,80b1fc <_strtod_r+0x5c0>
  80b0c4:	00801e04 	movi	r2,120
  80b0c8:	18804c26 	beq	r3,r2,80b1fc <_strtod_r+0x5c0>
  80b0cc:	42000044 	addi	r8,r8,1
  80b0d0:	da000415 	stw	r8,16(sp)
  80b0d4:	40c00007 	ldb	r3,0(r8)
  80b0d8:	00800c04 	movi	r2,48
  80b0dc:	18bffb26 	beq	r3,r2,80b0cc <_strtod_r+0x490>
  80b0e0:	183f4d26 	beq	r3,zero,80ae18 <_strtod_r+0x1dc>
  80b0e4:	03c00044 	movi	r15,1
  80b0e8:	003f2406 	br	80ad7c <_strtod_r+0x140>
  80b0ec:	42000044 	addi	r8,r8,1
  80b0f0:	da000415 	stw	r8,16(sp)
  80b0f4:	19000047 	ldb	r4,1(r3)
  80b0f8:	3000b726 	beq	r6,zero,80b3d8 <_strtod_r+0x79c>
  80b0fc:	3027883a 	mov	r19,r6
  80b100:	0015883a 	mov	r10,zero
  80b104:	000f883a 	mov	r7,zero
  80b108:	227ff404 	addi	r9,r4,-48
  80b10c:	00800244 	movi	r2,9
  80b110:	1242592e 	bgeu	r2,r9,80ba78 <_strtod_r+0xe3c>
  80b114:	04800044 	movi	r18,1
  80b118:	003f3706 	br	80adf8 <_strtod_r+0x1bc>
  80b11c:	7804c03a 	cmpne	r2,r15,zero
  80b120:	103f3d1e 	bne	r2,zero,80ae18 <_strtod_r+0x1dc>
  80b124:	9004c03a 	cmpne	r2,r18,zero
  80b128:	103f5e1e 	bne	r2,zero,80aea4 <_strtod_r+0x268>
  80b12c:	00801384 	movi	r2,78
  80b130:	2083a226 	beq	r4,r2,80bfbc <_strtod_r+0x1380>
  80b134:	11039d16 	blt	r2,r4,80bfac <_strtod_r+0x1370>
  80b138:	00801244 	movi	r2,73
  80b13c:	20bf591e 	bne	r4,r2,80aea4 <_strtod_r+0x268>
  80b140:	dc000404 	addi	r16,sp,16
  80b144:	8009883a 	mov	r4,r16
  80b148:	01402074 	movhi	r5,129
  80b14c:	2954b404 	addi	r5,r5,21200
  80b150:	080abf40 	call	80abf4 <match>
  80b154:	103f5326 	beq	r2,zero,80aea4 <_strtod_r+0x268>
  80b158:	d8800417 	ldw	r2,16(sp)
  80b15c:	8009883a 	mov	r4,r16
  80b160:	01402074 	movhi	r5,129
  80b164:	2954b504 	addi	r5,r5,21204
  80b168:	123fffc4 	addi	r8,r2,-1
  80b16c:	da000415 	stw	r8,16(sp)
  80b170:	080abf40 	call	80abf4 <match>
  80b174:	1000031e 	bne	r2,zero,80b184 <_strtod_r+0x548>
  80b178:	d8800417 	ldw	r2,16(sp)
  80b17c:	12000044 	addi	r8,r2,1
  80b180:	da000415 	stw	r8,16(sp)
  80b184:	019ffc34 	movhi	r6,32752
  80b188:	e1800115 	stw	r6,4(fp)
  80b18c:	e0000015 	stw	zero,0(fp)
  80b190:	003f2106 	br	80ae18 <_strtod_r+0x1dc>
  80b194:	d9801215 	stw	r6,72(sp)
  80b198:	003f8506 	br	80afb0 <_strtod_r+0x374>
  80b19c:	d8001115 	stw	zero,68(sp)
  80b1a0:	42000044 	addi	r8,r8,1
  80b1a4:	da000415 	stw	r8,16(sp)
  80b1a8:	40800007 	ldb	r2,0(r8)
  80b1ac:	103eef1e 	bne	r2,zero,80ad6c <_strtod_r+0x130>
  80b1b0:	d8001115 	stw	zero,68(sp)
  80b1b4:	dc400415 	stw	r17,16(sp)
  80b1b8:	003f1706 	br	80ae18 <_strtod_r+0x1dc>
  80b1bc:	42000044 	addi	r8,r8,1
  80b1c0:	da000415 	stw	r8,16(sp)
  80b1c4:	003eaf06 	br	80ac84 <_strtod_r+0x48>
  80b1c8:	00800044 	movi	r2,1
  80b1cc:	d8801115 	stw	r2,68(sp)
  80b1d0:	003ff306 	br	80b1a0 <_strtod_r+0x564>
  80b1d4:	001d883a 	mov	r14,zero
  80b1d8:	42000044 	addi	r8,r8,1
  80b1dc:	da000415 	stw	r8,16(sp)
  80b1e0:	21000047 	ldb	r4,1(r4)
  80b1e4:	00800244 	movi	r2,9
  80b1e8:	20fff404 	addi	r3,r4,-48
  80b1ec:	10ff412e 	bgeu	r2,r3,80aef4 <_strtod_r+0x2b8>
  80b1f0:	000b883a 	mov	r5,zero
  80b1f4:	dc400415 	stw	r17,16(sp)
  80b1f8:	003f0506 	br	80ae10 <_strtod_r+0x1d4>
  80b1fc:	d8c01117 	ldw	r3,68(sp)
  80b200:	04802074 	movhi	r18,129
  80b204:	94974004 	addi	r18,r18,23808
  80b208:	d8800504 	addi	r2,sp,20
  80b20c:	a809883a 	mov	r4,r21
  80b210:	d9400404 	addi	r5,sp,16
  80b214:	900d883a 	mov	r6,r18
  80b218:	d9c00604 	addi	r7,sp,24
  80b21c:	d8800015 	stw	r2,0(sp)
  80b220:	d8c00115 	stw	r3,4(sp)
  80b224:	080d1a80 	call	80d1a8 <__gethex>
  80b228:	140001cc 	andi	r16,r2,7
  80b22c:	1027883a 	mov	r19,r2
  80b230:	803ef926 	beq	r16,zero,80ae18 <_strtod_r+0x1dc>
  80b234:	05000184 	movi	r20,6
  80b238:	853f1a26 	beq	r16,r20,80aea4 <_strtod_r+0x268>
  80b23c:	d9800517 	ldw	r6,20(sp)
  80b240:	30000626 	beq	r6,zero,80b25c <_strtod_r+0x620>
  80b244:	91400017 	ldw	r5,0(r18)
  80b248:	d9000d04 	addi	r4,sp,52
  80b24c:	0809e340 	call	809e34 <__copybits>
  80b250:	d9400517 	ldw	r5,20(sp)
  80b254:	a809883a 	mov	r4,r21
  80b258:	08099940 	call	809994 <_Bfree>
  80b25c:	d9400617 	ldw	r5,24(sp)
  80b260:	a4024136 	bltu	r20,r16,80bb68 <_strtod_r+0xf2c>
  80b264:	8405883a 	add	r2,r16,r16
  80b268:	1085883a 	add	r2,r2,r2
  80b26c:	00c02074 	movhi	r3,129
  80b270:	18eca004 	addi	r3,r3,-19840
  80b274:	10c5883a 	add	r2,r2,r3
  80b278:	11000017 	ldw	r4,0(r2)
  80b27c:	2000683a 	jmp	r4
  80b280:	0080bba8 	cmpgeui	r2,zero,750
  80b284:	0080bbb4 	movhi	r2,750
  80b288:	0080bb58 	cmpnei	r2,zero,749
  80b28c:	0080bb80 	call	80bb8 <__alt_mem_sdram_controller-0x77f448>
  80b290:	0080bb90 	cmplti	r2,zero,750
  80b294:	0080bbb4 	movhi	r2,750
  80b298:	0080bba8 	cmpgeui	r2,zero,750
  80b29c:	d8c00f17 	ldw	r3,60(sp)
  80b2a0:	9c85c83a 	sub	r2,r19,r18
  80b2a4:	18a1883a 	add	r16,r3,r2
  80b2a8:	0402d00e 	bge	zero,r16,80bdec <_strtod_r+0x11b0>
  80b2ac:	814003cc 	andi	r5,r16,15
  80b2b0:	28000f26 	beq	r5,zero,80b2f0 <_strtod_r+0x6b4>
  80b2b4:	280a90fa 	slli	r5,r5,3
  80b2b8:	01002074 	movhi	r4,129
  80b2bc:	21146b04 	addi	r4,r4,20908
  80b2c0:	e0800017 	ldw	r2,0(fp)
  80b2c4:	290b883a 	add	r5,r5,r4
  80b2c8:	2a000017 	ldw	r8,0(r5)
  80b2cc:	e0c00117 	ldw	r3,4(fp)
  80b2d0:	2a400117 	ldw	r9,4(r5)
  80b2d4:	1009883a 	mov	r4,r2
  80b2d8:	180b883a 	mov	r5,r3
  80b2dc:	480f883a 	mov	r7,r9
  80b2e0:	400d883a 	mov	r6,r8
  80b2e4:	080ef280 	call	80ef28 <__muldf3>
  80b2e8:	e0c00115 	stw	r3,4(fp)
  80b2ec:	e0800015 	stw	r2,0(fp)
  80b2f0:	00bffc04 	movi	r2,-16
  80b2f4:	808c703a 	and	r6,r16,r2
  80b2f8:	30005b26 	beq	r6,zero,80b468 <_strtod_r+0x82c>
  80b2fc:	00804d04 	movi	r2,308
  80b300:	1181fd16 	blt	r2,r6,80baf8 <_strtod_r+0xebc>
  80b304:	3021d13a 	srai	r16,r6,4
  80b308:	00800044 	movi	r2,1
  80b30c:	1403610e 	bge	r2,r16,80c094 <_strtod_r+0x1458>
  80b310:	102f883a 	mov	r23,r2
  80b314:	0025883a 	mov	r18,zero
  80b318:	04402074 	movhi	r17,129
  80b31c:	8c549d04 	addi	r17,r17,21108
  80b320:	8080004c 	andi	r2,r16,1
  80b324:	1005003a 	cmpeq	r2,r2,zero
  80b328:	1000091e 	bne	r2,zero,80b350 <_strtod_r+0x714>
  80b32c:	e0800017 	ldw	r2,0(fp)
  80b330:	e0c00117 	ldw	r3,4(fp)
  80b334:	89800017 	ldw	r6,0(r17)
  80b338:	89c00117 	ldw	r7,4(r17)
  80b33c:	180b883a 	mov	r5,r3
  80b340:	1009883a 	mov	r4,r2
  80b344:	080ef280 	call	80ef28 <__muldf3>
  80b348:	e0c00115 	stw	r3,4(fp)
  80b34c:	e0800015 	stw	r2,0(fp)
  80b350:	8021d07a 	srai	r16,r16,1
  80b354:	94800044 	addi	r18,r18,1
  80b358:	8c400204 	addi	r17,r17,8
  80b35c:	bc3ff016 	blt	r23,r16,80b320 <_strtod_r+0x6e4>
  80b360:	900e90fa 	slli	r7,r18,3
  80b364:	01802074 	movhi	r6,129
  80b368:	31949d04 	addi	r6,r6,21108
  80b36c:	e2000117 	ldw	r8,4(fp)
  80b370:	398f883a 	add	r7,r7,r6
  80b374:	38800017 	ldw	r2,0(r7)
  80b378:	38c00117 	ldw	r3,4(r7)
  80b37c:	e1000017 	ldw	r4,0(fp)
  80b380:	01bf2c34 	movhi	r6,64688
  80b384:	418d883a 	add	r6,r8,r6
  80b388:	300b883a 	mov	r5,r6
  80b38c:	180f883a 	mov	r7,r3
  80b390:	100d883a 	mov	r6,r2
  80b394:	080ef280 	call	80ef28 <__muldf3>
  80b398:	1009883a 	mov	r4,r2
  80b39c:	180b883a 	mov	r5,r3
  80b3a0:	199ffc2c 	andhi	r6,r3,32752
  80b3a4:	009f2834 	movhi	r2,31904
  80b3a8:	e1000015 	stw	r4,0(fp)
  80b3ac:	e1400115 	stw	r5,4(fp)
  80b3b0:	1181d136 	bltu	r2,r6,80baf8 <_strtod_r+0xebc>
  80b3b4:	009f2434 	movhi	r2,31888
  80b3b8:	1183202e 	bgeu	r2,r6,80c03c <_strtod_r+0x1400>
  80b3bc:	d8001415 	stw	zero,80(sp)
  80b3c0:	019ffc34 	movhi	r6,32752
  80b3c4:	31bfffc4 	addi	r6,r6,-1
  80b3c8:	01ffffc4 	movi	r7,-1
  80b3cc:	e1800115 	stw	r6,4(fp)
  80b3d0:	e1c00015 	stw	r7,0(fp)
  80b3d4:	00002506 	br	80b46c <_strtod_r+0x830>
  80b3d8:	00800c04 	movi	r2,48
  80b3dc:	2083151e 	bne	r4,r2,80c034 <_strtod_r+0x13f8>
  80b3e0:	2005883a 	mov	r2,r4
  80b3e4:	000f883a 	mov	r7,zero
  80b3e8:	42000044 	addi	r8,r8,1
  80b3ec:	da000415 	stw	r8,16(sp)
  80b3f0:	41000007 	ldb	r4,0(r8)
  80b3f4:	39c00044 	addi	r7,r7,1
  80b3f8:	20bffb26 	beq	r4,r2,80b3e8 <_strtod_r+0x7ac>
  80b3fc:	20fff3c4 	addi	r3,r4,-49
  80b400:	00800204 	movi	r2,8
  80b404:	10c1b836 	bltu	r2,r3,80bae8 <_strtod_r+0xeac>
  80b408:	dd800417 	ldw	r22,16(sp)
  80b40c:	3815883a 	mov	r10,r7
  80b410:	227ff404 	addi	r9,r4,-48
  80b414:	b011883a 	mov	r8,r22
  80b418:	0027883a 	mov	r19,zero
  80b41c:	01c00044 	movi	r7,1
  80b420:	4801fe26 	beq	r9,zero,80bc1c <_strtod_r+0xfe0>
  80b424:	00800044 	movi	r2,1
  80b428:	51d5883a 	add	r10,r10,r7
  80b42c:	11c31f0e 	bge	r2,r7,80c0ac <_strtod_r+0x1470>
  80b430:	1009883a 	mov	r4,r2
  80b434:	9807883a 	mov	r3,r19
  80b438:	02c00204 	movi	r11,8
  80b43c:	03000404 	movi	r12,16
  80b440:	00000306 	br	80b450 <_strtod_r+0x814>
  80b444:	a50002a4 	muli	r20,r20,10
  80b448:	21000044 	addi	r4,r4,1
  80b44c:	21c1eb26 	beq	r4,r7,80bbfc <_strtod_r+0xfc0>
  80b450:	18c00044 	addi	r3,r3,1
  80b454:	18bfffc4 	addi	r2,r3,-1
  80b458:	58bffa0e 	bge	r11,r2,80b444 <_strtod_r+0x808>
  80b45c:	60fffa16 	blt	r12,r3,80b448 <_strtod_r+0x80c>
  80b460:	840002a4 	muli	r16,r16,10
  80b464:	003ff806 	br	80b448 <_strtod_r+0x80c>
  80b468:	d8001415 	stw	zero,80(sp)
  80b46c:	d9801217 	ldw	r6,72(sp)
  80b470:	a809883a 	mov	r4,r21
  80b474:	b00b883a 	mov	r5,r22
  80b478:	980f883a 	mov	r7,r19
  80b47c:	dd000015 	stw	r20,0(sp)
  80b480:	080a8680 	call	80a868 <__s2b>
  80b484:	d9800f17 	ldw	r6,60(sp)
  80b488:	11000304 	addi	r4,r2,12
  80b48c:	d8801015 	stw	r2,64(sp)
  80b490:	300c803a 	cmplt	r6,r6,zero
  80b494:	d9001715 	stw	r4,92(sp)
  80b498:	d9801615 	stw	r6,88(sp)
  80b49c:	d8801017 	ldw	r2,64(sp)
  80b4a0:	a809883a 	mov	r4,r21
  80b4a4:	11400117 	ldw	r5,4(r2)
  80b4a8:	0809f140 	call	809f14 <_Balloc>
  80b4ac:	d8c01017 	ldw	r3,64(sp)
  80b4b0:	d9401717 	ldw	r5,92(sp)
  80b4b4:	11000304 	addi	r4,r2,12
  80b4b8:	19800417 	ldw	r6,16(r3)
  80b4bc:	102f883a 	mov	r23,r2
  80b4c0:	318d883a 	add	r6,r6,r6
  80b4c4:	318d883a 	add	r6,r6,r6
  80b4c8:	31800204 	addi	r6,r6,8
  80b4cc:	08033400 	call	803340 <memcpy>
  80b4d0:	e2000017 	ldw	r8,0(fp)
  80b4d4:	e2400117 	ldw	r9,4(fp)
  80b4d8:	d9800304 	addi	r6,sp,12
  80b4dc:	400b883a 	mov	r5,r8
  80b4e0:	a809883a 	mov	r4,r21
  80b4e4:	d9c00204 	addi	r7,sp,8
  80b4e8:	d9800015 	stw	r6,0(sp)
  80b4ec:	480d883a 	mov	r6,r9
  80b4f0:	0809fd00 	call	809fd0 <__d2b>
  80b4f4:	a809883a 	mov	r4,r21
  80b4f8:	01400044 	movi	r5,1
  80b4fc:	d8800515 	stw	r2,20(sp)
  80b500:	080a60c0 	call	80a60c <__i2b>
  80b504:	102d883a 	mov	r22,r2
  80b508:	d8801617 	ldw	r2,88(sp)
  80b50c:	1001051e 	bne	r2,zero,80b924 <_strtod_r+0xce8>
  80b510:	dd000f17 	ldw	r20,60(sp)
  80b514:	000f883a 	mov	r7,zero
  80b518:	0013883a 	mov	r9,zero
  80b51c:	a011883a 	mov	r8,r20
  80b520:	d8800217 	ldw	r2,8(sp)
  80b524:	1000fd16 	blt	r2,zero,80b91c <_strtod_r+0xce0>
  80b528:	388f883a 	add	r7,r7,r2
  80b52c:	d9801417 	ldw	r6,80(sp)
  80b530:	d9400317 	ldw	r5,12(sp)
  80b534:	00ff0084 	movi	r3,-1022
  80b538:	1189c83a 	sub	r4,r2,r6
  80b53c:	2145883a 	add	r2,r4,r5
  80b540:	10bfffc4 	addi	r2,r2,-1
  80b544:	10c09f0e 	bge	r2,r3,80b7c4 <_strtod_r+0xb88>
  80b548:	21810cc4 	addi	r6,r4,1075
  80b54c:	d8c01417 	ldw	r3,80(sp)
  80b550:	4185883a 	add	r2,r8,r6
  80b554:	39a1883a 	add	r16,r7,r6
  80b558:	18a5883a 	add	r18,r3,r2
  80b55c:	3807883a 	mov	r3,r7
  80b560:	81c0010e 	bge	r16,r7,80b568 <_strtod_r+0x92c>
  80b564:	8007883a 	mov	r3,r16
  80b568:	9005883a 	mov	r2,r18
  80b56c:	1c80010e 	bge	r3,r18,80b574 <_strtod_r+0x938>
  80b570:	1805883a 	mov	r2,r3
  80b574:	0080e70e 	bge	zero,r2,80b914 <_strtod_r+0xcd8>
  80b578:	38a7c83a 	sub	r19,r7,r2
  80b57c:	80a1c83a 	sub	r16,r16,r2
  80b580:	90a5c83a 	sub	r18,r18,r2
  80b584:	02400e0e 	bge	zero,r9,80b5c0 <_strtod_r+0x984>
  80b588:	480d883a 	mov	r6,r9
  80b58c:	b00b883a 	mov	r5,r22
  80b590:	a809883a 	mov	r4,r21
  80b594:	080a7480 	call	80a748 <__pow5mult>
  80b598:	d9800517 	ldw	r6,20(sp)
  80b59c:	a809883a 	mov	r4,r21
  80b5a0:	100b883a 	mov	r5,r2
  80b5a4:	102d883a 	mov	r22,r2
  80b5a8:	080a4240 	call	80a424 <__multiply>
  80b5ac:	d9400517 	ldw	r5,20(sp)
  80b5b0:	1023883a 	mov	r17,r2
  80b5b4:	a809883a 	mov	r4,r21
  80b5b8:	08099940 	call	809994 <_Bfree>
  80b5bc:	dc400515 	stw	r17,20(sp)
  80b5c0:	0400050e 	bge	zero,r16,80b5d8 <_strtod_r+0x99c>
  80b5c4:	d9400517 	ldw	r5,20(sp)
  80b5c8:	800d883a 	mov	r6,r16
  80b5cc:	a809883a 	mov	r4,r21
  80b5d0:	080a2d80 	call	80a2d8 <__lshift>
  80b5d4:	d8800515 	stw	r2,20(sp)
  80b5d8:	a000741e 	bne	r20,zero,80b7ac <_strtod_r+0xb70>
  80b5dc:	0480050e 	bge	zero,r18,80b5f4 <_strtod_r+0x9b8>
  80b5e0:	b80b883a 	mov	r5,r23
  80b5e4:	900d883a 	mov	r6,r18
  80b5e8:	a809883a 	mov	r4,r21
  80b5ec:	080a2d80 	call	80a2d8 <__lshift>
  80b5f0:	102f883a 	mov	r23,r2
  80b5f4:	04c0050e 	bge	zero,r19,80b60c <_strtod_r+0x9d0>
  80b5f8:	b00b883a 	mov	r5,r22
  80b5fc:	980d883a 	mov	r6,r19
  80b600:	a809883a 	mov	r4,r21
  80b604:	080a2d80 	call	80a2d8 <__lshift>
  80b608:	102d883a 	mov	r22,r2
  80b60c:	d9400517 	ldw	r5,20(sp)
  80b610:	a809883a 	mov	r4,r21
  80b614:	b80d883a 	mov	r6,r23
  80b618:	080a14c0 	call	80a14c <__mdiff>
  80b61c:	11000317 	ldw	r4,12(r2)
  80b620:	b00b883a 	mov	r5,r22
  80b624:	10000315 	stw	zero,12(r2)
  80b628:	d9001315 	stw	r4,76(sp)
  80b62c:	1009883a 	mov	r4,r2
  80b630:	1029883a 	mov	r20,r2
  80b634:	0809af00 	call	809af0 <__mcmp>
  80b638:	10017c16 	blt	r2,zero,80bc2c <_strtod_r+0xff0>
  80b63c:	1001af26 	beq	r2,zero,80bcfc <_strtod_r+0x10c0>
  80b640:	a009883a 	mov	r4,r20
  80b644:	b00b883a 	mov	r5,r22
  80b648:	0809cf00 	call	809cf0 <__ratio>
  80b64c:	0011883a 	mov	r8,zero
  80b650:	02500034 	movhi	r9,16384
  80b654:	480f883a 	mov	r7,r9
  80b658:	1009883a 	mov	r4,r2
  80b65c:	180b883a 	mov	r5,r3
  80b660:	400d883a 	mov	r6,r8
  80b664:	1021883a 	mov	r16,r2
  80b668:	1823883a 	mov	r17,r3
  80b66c:	080f7ec0 	call	80f7ec <__ledf2>
  80b670:	00805716 	blt	zero,r2,80b7d0 <_strtod_r+0xb94>
  80b674:	d9801317 	ldw	r6,76(sp)
  80b678:	3025003a 	cmpeq	r18,r6,zero
  80b67c:	90008b1e 	bne	r18,zero,80b8ac <_strtod_r+0xc70>
  80b680:	008ffc34 	movhi	r2,16368
  80b684:	0021883a 	mov	r16,zero
  80b688:	1023883a 	mov	r17,r2
  80b68c:	d8000715 	stw	zero,28(sp)
  80b690:	d8800815 	stw	r2,32(sp)
  80b694:	e1c00117 	ldw	r7,4(fp)
  80b698:	009ff834 	movhi	r2,32736
  80b69c:	3cdffc2c 	andhi	r19,r7,32752
  80b6a0:	98805e26 	beq	r19,r2,80b81c <_strtod_r+0xbe0>
  80b6a4:	d8801417 	ldw	r2,80(sp)
  80b6a8:	10001b26 	beq	r2,zero,80b718 <_strtod_r+0xadc>
  80b6ac:	0081a834 	movhi	r2,1696
  80b6b0:	14c01936 	bltu	r2,r19,80b718 <_strtod_r+0xadc>
  80b6b4:	00bff034 	movhi	r2,65472
  80b6b8:	00d07834 	movhi	r3,16864
  80b6bc:	18ffffc4 	addi	r3,r3,-1
  80b6c0:	180f883a 	mov	r7,r3
  80b6c4:	8009883a 	mov	r4,r16
  80b6c8:	880b883a 	mov	r5,r17
  80b6cc:	100d883a 	mov	r6,r2
  80b6d0:	080f7ec0 	call	80f7ec <__ledf2>
  80b6d4:	00800b16 	blt	zero,r2,80b704 <_strtod_r+0xac8>
  80b6d8:	880b883a 	mov	r5,r17
  80b6dc:	8009883a 	mov	r4,r16
  80b6e0:	080dc8c0 	call	80dc8c <__fixunsdfsi>
  80b6e4:	1000df1e 	bne	r2,zero,80ba64 <_strtod_r+0xe28>
  80b6e8:	0021883a 	mov	r16,zero
  80b6ec:	044ffc34 	movhi	r17,16368
  80b6f0:	9000d91e 	bne	r18,zero,80ba58 <_strtod_r+0xe1c>
  80b6f4:	8005883a 	mov	r2,r16
  80b6f8:	8807883a 	mov	r3,r17
  80b6fc:	d8c00815 	stw	r3,32(sp)
  80b700:	d8800715 	stw	r2,28(sp)
  80b704:	d8800817 	ldw	r2,32(sp)
  80b708:	00c1ac34 	movhi	r3,1712
  80b70c:	14c5c83a 	sub	r2,r2,r19
  80b710:	10c5883a 	add	r2,r2,r3
  80b714:	d8800815 	stw	r2,32(sp)
  80b718:	e0800017 	ldw	r2,0(fp)
  80b71c:	e0c00117 	ldw	r3,4(fp)
  80b720:	1009883a 	mov	r4,r2
  80b724:	180b883a 	mov	r5,r3
  80b728:	0809b500 	call	809b50 <__ulp>
  80b72c:	d9800717 	ldw	r6,28(sp)
  80b730:	d9c00817 	ldw	r7,32(sp)
  80b734:	180b883a 	mov	r5,r3
  80b738:	1009883a 	mov	r4,r2
  80b73c:	080ef280 	call	80ef28 <__muldf3>
  80b740:	e2000017 	ldw	r8,0(fp)
  80b744:	e2400117 	ldw	r9,4(fp)
  80b748:	180b883a 	mov	r5,r3
  80b74c:	1009883a 	mov	r4,r2
  80b750:	480f883a 	mov	r7,r9
  80b754:	400d883a 	mov	r6,r8
  80b758:	080eeb40 	call	80eeb4 <__adddf3>
  80b75c:	e0c00115 	stw	r3,4(fp)
  80b760:	e0800015 	stw	r2,0(fp)
  80b764:	d8c01417 	ldw	r3,80(sp)
  80b768:	e4800117 	ldw	r18,4(fp)
  80b76c:	1800021e 	bne	r3,zero,80b778 <_strtod_r+0xb3c>
  80b770:	909ffc2c 	andhi	r2,r18,32752
  80b774:	98807b26 	beq	r19,r2,80b964 <_strtod_r+0xd28>
  80b778:	d9400517 	ldw	r5,20(sp)
  80b77c:	a809883a 	mov	r4,r21
  80b780:	08099940 	call	809994 <_Bfree>
  80b784:	a809883a 	mov	r4,r21
  80b788:	b80b883a 	mov	r5,r23
  80b78c:	08099940 	call	809994 <_Bfree>
  80b790:	a809883a 	mov	r4,r21
  80b794:	b00b883a 	mov	r5,r22
  80b798:	08099940 	call	809994 <_Bfree>
  80b79c:	a809883a 	mov	r4,r21
  80b7a0:	a00b883a 	mov	r5,r20
  80b7a4:	08099940 	call	809994 <_Bfree>
  80b7a8:	003f3c06 	br	80b49c <_strtod_r+0x860>
  80b7ac:	b80b883a 	mov	r5,r23
  80b7b0:	a00d883a 	mov	r6,r20
  80b7b4:	a809883a 	mov	r4,r21
  80b7b8:	080a7480 	call	80a748 <__pow5mult>
  80b7bc:	102f883a 	mov	r23,r2
  80b7c0:	003f8606 	br	80b5dc <_strtod_r+0x9a0>
  80b7c4:	00800d84 	movi	r2,54
  80b7c8:	114dc83a 	sub	r6,r2,r5
  80b7cc:	003f5f06 	br	80b54c <_strtod_r+0x910>
  80b7d0:	0005883a 	mov	r2,zero
  80b7d4:	00cff834 	movhi	r3,16352
  80b7d8:	880b883a 	mov	r5,r17
  80b7dc:	8009883a 	mov	r4,r16
  80b7e0:	100d883a 	mov	r6,r2
  80b7e4:	180f883a 	mov	r7,r3
  80b7e8:	080ef280 	call	80ef28 <__muldf3>
  80b7ec:	d9801317 	ldw	r6,76(sp)
  80b7f0:	1021883a 	mov	r16,r2
  80b7f4:	1823883a 	mov	r17,r3
  80b7f8:	3025003a 	cmpeq	r18,r6,zero
  80b7fc:	90000126 	beq	r18,zero,80b804 <_strtod_r+0xbc8>
  80b800:	18e0003c 	xorhi	r3,r3,32768
  80b804:	d8800715 	stw	r2,28(sp)
  80b808:	d8c00815 	stw	r3,32(sp)
  80b80c:	e1c00117 	ldw	r7,4(fp)
  80b810:	009ff834 	movhi	r2,32736
  80b814:	3cdffc2c 	andhi	r19,r7,32752
  80b818:	98bfa21e 	bne	r19,r2,80b6a4 <_strtod_r+0xa68>
  80b81c:	e1000017 	ldw	r4,0(fp)
  80b820:	01bf2c34 	movhi	r6,64688
  80b824:	398d883a 	add	r6,r7,r6
  80b828:	d9000b15 	stw	r4,44(sp)
  80b82c:	d9c00c15 	stw	r7,48(sp)
  80b830:	300b883a 	mov	r5,r6
  80b834:	e1800115 	stw	r6,4(fp)
  80b838:	0809b500 	call	809b50 <__ulp>
  80b83c:	d9800717 	ldw	r6,28(sp)
  80b840:	d9c00817 	ldw	r7,32(sp)
  80b844:	180b883a 	mov	r5,r3
  80b848:	1009883a 	mov	r4,r2
  80b84c:	080ef280 	call	80ef28 <__muldf3>
  80b850:	e2000017 	ldw	r8,0(fp)
  80b854:	e2400117 	ldw	r9,4(fp)
  80b858:	180b883a 	mov	r5,r3
  80b85c:	1009883a 	mov	r4,r2
  80b860:	480f883a 	mov	r7,r9
  80b864:	400d883a 	mov	r6,r8
  80b868:	080eeb40 	call	80eeb4 <__adddf3>
  80b86c:	1009883a 	mov	r4,r2
  80b870:	180b883a 	mov	r5,r3
  80b874:	009f2834 	movhi	r2,31904
  80b878:	10bfffc4 	addi	r2,r2,-1
  80b87c:	18dffc2c 	andhi	r3,r3,32752
  80b880:	e1000015 	stw	r4,0(fp)
  80b884:	e1400115 	stw	r5,4(fp)
  80b888:	10c06f2e 	bgeu	r2,r3,80ba48 <_strtod_r+0xe0c>
  80b88c:	d8800c17 	ldw	r2,48(sp)
  80b890:	011ffc34 	movhi	r4,32752
  80b894:	213fffc4 	addi	r4,r4,-1
  80b898:	11007a26 	beq	r2,r4,80ba84 <_strtod_r+0xe48>
  80b89c:	01ffffc4 	movi	r7,-1
  80b8a0:	e1000115 	stw	r4,4(fp)
  80b8a4:	e1c00015 	stw	r7,0(fp)
  80b8a8:	003fb306 	br	80b778 <_strtod_r+0xb3c>
  80b8ac:	e0c00017 	ldw	r3,0(fp)
  80b8b0:	1800221e 	bne	r3,zero,80b93c <_strtod_r+0xd00>
  80b8b4:	e0800117 	ldw	r2,4(fp)
  80b8b8:	00c00434 	movhi	r3,16
  80b8bc:	18ffffc4 	addi	r3,r3,-1
  80b8c0:	10c4703a 	and	r2,r2,r3
  80b8c4:	1000211e 	bne	r2,zero,80b94c <_strtod_r+0xd10>
  80b8c8:	0005883a 	mov	r2,zero
  80b8cc:	00cffc34 	movhi	r3,16368
  80b8d0:	180f883a 	mov	r7,r3
  80b8d4:	8009883a 	mov	r4,r16
  80b8d8:	880b883a 	mov	r5,r17
  80b8dc:	100d883a 	mov	r6,r2
  80b8e0:	080f7640 	call	80f764 <__ltdf2>
  80b8e4:	10013c16 	blt	r2,zero,80bdd8 <_strtod_r+0x119c>
  80b8e8:	0005883a 	mov	r2,zero
  80b8ec:	00cff834 	movhi	r3,16352
  80b8f0:	880b883a 	mov	r5,r17
  80b8f4:	8009883a 	mov	r4,r16
  80b8f8:	180f883a 	mov	r7,r3
  80b8fc:	100d883a 	mov	r6,r2
  80b900:	080ef280 	call	80ef28 <__muldf3>
  80b904:	1823883a 	mov	r17,r3
  80b908:	1021883a 	mov	r16,r2
  80b90c:	18e0003c 	xorhi	r3,r3,32768
  80b910:	003fbc06 	br	80b804 <_strtod_r+0xbc8>
  80b914:	3827883a 	mov	r19,r7
  80b918:	003f1a06 	br	80b584 <_strtod_r+0x948>
  80b91c:	4091c83a 	sub	r8,r8,r2
  80b920:	003f0206 	br	80b52c <_strtod_r+0x8f0>
  80b924:	d8c00f17 	ldw	r3,60(sp)
  80b928:	0011883a 	mov	r8,zero
  80b92c:	0029883a 	mov	r20,zero
  80b930:	00d3c83a 	sub	r9,zero,r3
  80b934:	480f883a 	mov	r7,r9
  80b938:	003ef906 	br	80b520 <_strtod_r+0x8e4>
  80b93c:	00800044 	movi	r2,1
  80b940:	1880021e 	bne	r3,r2,80b94c <_strtod_r+0xd10>
  80b944:	e0800117 	ldw	r2,4(fp)
  80b948:	1000a526 	beq	r2,zero,80bbe0 <_strtod_r+0xfa4>
  80b94c:	00affc34 	movhi	r2,49136
  80b950:	0021883a 	mov	r16,zero
  80b954:	044ffc34 	movhi	r17,16368
  80b958:	d8800815 	stw	r2,32(sp)
  80b95c:	d8000715 	stw	zero,28(sp)
  80b960:	003f4c06 	br	80b694 <_strtod_r+0xa58>
  80b964:	880b883a 	mov	r5,r17
  80b968:	8009883a 	mov	r4,r16
  80b96c:	080f96c0 	call	80f96c <__fixdfsi>
  80b970:	1009883a 	mov	r4,r2
  80b974:	080f8740 	call	80f874 <__floatsidf>
  80b978:	880b883a 	mov	r5,r17
  80b97c:	8009883a 	mov	r4,r16
  80b980:	100d883a 	mov	r6,r2
  80b984:	180f883a 	mov	r7,r3
  80b988:	080ee340 	call	80ee34 <__subdf3>
  80b98c:	d9001317 	ldw	r4,76(sp)
  80b990:	100b883a 	mov	r5,r2
  80b994:	180d883a 	mov	r6,r3
  80b998:	1021883a 	mov	r16,r2
  80b99c:	1823883a 	mov	r17,r3
  80b9a0:	2000061e 	bne	r4,zero,80b9bc <_strtod_r+0xd80>
  80b9a4:	e0800017 	ldw	r2,0(fp)
  80b9a8:	1000041e 	bne	r2,zero,80b9bc <_strtod_r+0xd80>
  80b9ac:	00c00434 	movhi	r3,16
  80b9b0:	18ffffc4 	addi	r3,r3,-1
  80b9b4:	90c4703a 	and	r2,r18,r3
  80b9b8:	10004026 	beq	r2,zero,80babc <_strtod_r+0xe80>
  80b9bc:	00a52834 	movhi	r2,38048
  80b9c0:	108d6544 	addi	r2,r2,13717
  80b9c4:	00cff834 	movhi	r3,16352
  80b9c8:	18ffffc4 	addi	r3,r3,-1
  80b9cc:	180f883a 	mov	r7,r3
  80b9d0:	8009883a 	mov	r4,r16
  80b9d4:	880b883a 	mov	r5,r17
  80b9d8:	100d883a 	mov	r6,r2
  80b9dc:	080f7640 	call	80f764 <__ltdf2>
  80b9e0:	10000916 	blt	r2,zero,80ba08 <_strtod_r+0xdcc>
  80b9e4:	008d6c34 	movhi	r2,13744
  80b9e8:	10b94d44 	addi	r2,r2,-6859
  80b9ec:	00cff834 	movhi	r3,16352
  80b9f0:	880b883a 	mov	r5,r17
  80b9f4:	180f883a 	mov	r7,r3
  80b9f8:	8009883a 	mov	r4,r16
  80b9fc:	100d883a 	mov	r6,r2
  80ba00:	080f6540 	call	80f654 <__gtdf2>
  80ba04:	00bf5c0e 	bge	zero,r2,80b778 <_strtod_r+0xb3c>
  80ba08:	d9400517 	ldw	r5,20(sp)
  80ba0c:	a809883a 	mov	r4,r21
  80ba10:	08099940 	call	809994 <_Bfree>
  80ba14:	a809883a 	mov	r4,r21
  80ba18:	b80b883a 	mov	r5,r23
  80ba1c:	08099940 	call	809994 <_Bfree>
  80ba20:	a809883a 	mov	r4,r21
  80ba24:	b00b883a 	mov	r5,r22
  80ba28:	08099940 	call	809994 <_Bfree>
  80ba2c:	d9401017 	ldw	r5,64(sp)
  80ba30:	a809883a 	mov	r4,r21
  80ba34:	08099940 	call	809994 <_Bfree>
  80ba38:	a809883a 	mov	r4,r21
  80ba3c:	a00b883a 	mov	r5,r20
  80ba40:	08099940 	call	809994 <_Bfree>
  80ba44:	003cf406 	br	80ae18 <_strtod_r+0x1dc>
  80ba48:	0080d434 	movhi	r2,848
  80ba4c:	288d883a 	add	r6,r5,r2
  80ba50:	e1800115 	stw	r6,4(fp)
  80ba54:	003f4306 	br	80b764 <_strtod_r+0xb28>
  80ba58:	8005883a 	mov	r2,r16
  80ba5c:	88e0003c 	xorhi	r3,r17,32768
  80ba60:	003f2606 	br	80b6fc <_strtod_r+0xac0>
  80ba64:	1009883a 	mov	r4,r2
  80ba68:	080fab80 	call	80fab8 <__floatunsidf>
  80ba6c:	1021883a 	mov	r16,r2
  80ba70:	1823883a 	mov	r17,r3
  80ba74:	003f1e06 	br	80b6f0 <_strtod_r+0xab4>
  80ba78:	da000417 	ldw	r8,16(sp)
  80ba7c:	39c00044 	addi	r7,r7,1
  80ba80:	003e6706 	br	80b420 <_strtod_r+0x7e4>
  80ba84:	d8c00b17 	ldw	r3,44(sp)
  80ba88:	00bfffc4 	movi	r2,-1
  80ba8c:	18bf831e 	bne	r3,r2,80b89c <_strtod_r+0xc60>
  80ba90:	00c00884 	movi	r3,34
  80ba94:	a8c00015 	stw	r3,0(r21)
  80ba98:	009ffc34 	movhi	r2,32752
  80ba9c:	e0800115 	stw	r2,4(fp)
  80baa0:	e0000015 	stw	zero,0(fp)
  80baa4:	003fd806 	br	80ba08 <_strtod_r+0xdcc>
  80baa8:	4007883a 	mov	r3,r8
  80baac:	000d883a 	mov	r6,zero
  80bab0:	0029883a 	mov	r20,zero
  80bab4:	0021883a 	mov	r16,zero
  80bab8:	003cc906 	br	80ade0 <_strtod_r+0x1a4>
  80babc:	00a52834 	movhi	r2,38048
  80bac0:	108d6544 	addi	r2,r2,13717
  80bac4:	00cff434 	movhi	r3,16336
  80bac8:	18ffffc4 	addi	r3,r3,-1
  80bacc:	2809883a 	mov	r4,r5
  80bad0:	180f883a 	mov	r7,r3
  80bad4:	300b883a 	mov	r5,r6
  80bad8:	100d883a 	mov	r6,r2
  80badc:	080f7640 	call	80f764 <__ltdf2>
  80bae0:	103f250e 	bge	r2,zero,80b778 <_strtod_r+0xb3c>
  80bae4:	003fc806 	br	80ba08 <_strtod_r+0xdcc>
  80bae8:	0027883a 	mov	r19,zero
  80baec:	04800044 	movi	r18,1
  80baf0:	0015883a 	mov	r10,zero
  80baf4:	003cc006 	br	80adf8 <_strtod_r+0x1bc>
  80baf8:	00800884 	movi	r2,34
  80bafc:	a8800015 	stw	r2,0(r21)
  80bb00:	019ffc34 	movhi	r6,32752
  80bb04:	e1800115 	stw	r6,4(fp)
  80bb08:	e0000015 	stw	zero,0(fp)
  80bb0c:	003cc206 	br	80ae18 <_strtod_r+0x1dc>
  80bb10:	015387c4 	movi	r5,19999
  80bb14:	003d1e06 	br	80af90 <_strtod_r+0x354>
  80bb18:	300a90fa 	slli	r5,r6,3
  80bb1c:	e0800017 	ldw	r2,0(fp)
  80bb20:	e0c00117 	ldw	r3,4(fp)
  80bb24:	01002074 	movhi	r4,129
  80bb28:	21146b04 	addi	r4,r4,20908
  80bb2c:	290b883a 	add	r5,r5,r4
  80bb30:	2a000017 	ldw	r8,0(r5)
  80bb34:	2a400117 	ldw	r9,4(r5)
  80bb38:	1009883a 	mov	r4,r2
  80bb3c:	180b883a 	mov	r5,r3
  80bb40:	480f883a 	mov	r7,r9
  80bb44:	400d883a 	mov	r6,r8
  80bb48:	080ef280 	call	80ef28 <__muldf3>
  80bb4c:	e0c00115 	stw	r3,4(fp)
  80bb50:	e0800015 	stw	r2,0(fp)
  80bb54:	003cb006 	br	80ae18 <_strtod_r+0x1dc>
  80bb58:	d8800d17 	ldw	r2,52(sp)
  80bb5c:	e0800015 	stw	r2,0(fp)
  80bb60:	d8c00e17 	ldw	r3,56(sp)
  80bb64:	e0c00115 	stw	r3,4(fp)
  80bb68:	9880020c 	andi	r2,r19,8
  80bb6c:	103caa26 	beq	r2,zero,80ae18 <_strtod_r+0x1dc>
  80bb70:	e0800117 	ldw	r2,4(fp)
  80bb74:	10a00034 	orhi	r2,r2,32768
  80bb78:	e0800115 	stw	r2,4(fp)
  80bb7c:	003ca606 	br	80ae18 <_strtod_r+0x1dc>
  80bb80:	009ffc34 	movhi	r2,32752
  80bb84:	e0800115 	stw	r2,4(fp)
  80bb88:	e0000015 	stw	zero,0(fp)
  80bb8c:	003ff606 	br	80bb68 <_strtod_r+0xf2c>
  80bb90:	00a00034 	movhi	r2,32768
  80bb94:	10bfffc4 	addi	r2,r2,-1
  80bb98:	00ffffc4 	movi	r3,-1
  80bb9c:	e0800115 	stw	r2,4(fp)
  80bba0:	e0c00015 	stw	r3,0(fp)
  80bba4:	003ff006 	br	80bb68 <_strtod_r+0xf2c>
  80bba8:	e0000115 	stw	zero,4(fp)
  80bbac:	e0000015 	stw	zero,0(fp)
  80bbb0:	003fed06 	br	80bb68 <_strtod_r+0xf2c>
  80bbb4:	d8800e17 	ldw	r2,56(sp)
  80bbb8:	29010cc4 	addi	r4,r5,1075
  80bbbc:	00fffc34 	movhi	r3,65520
  80bbc0:	18ffffc4 	addi	r3,r3,-1
  80bbc4:	2008953a 	slli	r4,r4,20
  80bbc8:	10c4703a 	and	r2,r2,r3
  80bbcc:	d8c00d17 	ldw	r3,52(sp)
  80bbd0:	1104b03a 	or	r2,r2,r4
  80bbd4:	e0800115 	stw	r2,4(fp)
  80bbd8:	e0c00015 	stw	r3,0(fp)
  80bbdc:	003fe206 	br	80bb68 <_strtod_r+0xf2c>
  80bbe0:	00800884 	movi	r2,34
  80bbe4:	a8800015 	stw	r2,0(r21)
  80bbe8:	e0000015 	stw	zero,0(fp)
  80bbec:	e0000115 	stw	zero,4(fp)
  80bbf0:	003f8506 	br	80ba08 <_strtod_r+0xdcc>
  80bbf4:	03800044 	movi	r14,1
  80bbf8:	003d7706 	br	80b1d8 <_strtod_r+0x59c>
  80bbfc:	99c5883a 	add	r2,r19,r7
  80bc00:	11ffffc4 	addi	r7,r2,-1
  80bc04:	00800204 	movi	r2,8
  80bc08:	3cc00044 	addi	r19,r7,1
  80bc0c:	11c0df16 	blt	r2,r7,80bf8c <_strtod_r+0x1350>
  80bc10:	a08002a4 	muli	r2,r20,10
  80bc14:	000f883a 	mov	r7,zero
  80bc18:	1269883a 	add	r20,r2,r9
  80bc1c:	42000044 	addi	r8,r8,1
  80bc20:	da000415 	stw	r8,16(sp)
  80bc24:	41000007 	ldb	r4,0(r8)
  80bc28:	003d3706 	br	80b108 <_strtod_r+0x4cc>
  80bc2c:	d9801317 	ldw	r6,76(sp)
  80bc30:	3000511e 	bne	r6,zero,80bd78 <_strtod_r+0x113c>
  80bc34:	e0800017 	ldw	r2,0(fp)
  80bc38:	1000d81e 	bne	r2,zero,80bf9c <_strtod_r+0x1360>
  80bc3c:	e0c00117 	ldw	r3,4(fp)
  80bc40:	01000434 	movhi	r4,16
  80bc44:	213fffc4 	addi	r4,r4,-1
  80bc48:	1904703a 	and	r2,r3,r4
  80bc4c:	1000b01e 	bne	r2,zero,80bf10 <_strtod_r+0x12d4>
  80bc50:	18dffc2c 	andhi	r3,r3,32752
  80bc54:	0081ac34 	movhi	r2,1712
  80bc58:	10c1102e 	bgeu	r2,r3,80c09c <_strtod_r+0x1460>
  80bc5c:	a0800517 	ldw	r2,20(r20)
  80bc60:	1000031e 	bne	r2,zero,80bc70 <_strtod_r+0x1034>
  80bc64:	a0c00417 	ldw	r3,16(r20)
  80bc68:	00800044 	movi	r2,1
  80bc6c:	10c0420e 	bge	r2,r3,80bd78 <_strtod_r+0x113c>
  80bc70:	a00b883a 	mov	r5,r20
  80bc74:	a809883a 	mov	r4,r21
  80bc78:	01800044 	movi	r6,1
  80bc7c:	080a2d80 	call	80a2d8 <__lshift>
  80bc80:	1009883a 	mov	r4,r2
  80bc84:	b00b883a 	mov	r5,r22
  80bc88:	1029883a 	mov	r20,r2
  80bc8c:	0809af00 	call	809af0 <__mcmp>
  80bc90:	0080c20e 	bge	zero,r2,80bf9c <_strtod_r+0x1360>
  80bc94:	e1800117 	ldw	r6,4(fp)
  80bc98:	d9001417 	ldw	r4,80(sp)
  80bc9c:	2013003a 	cmpeq	r9,r4,zero
  80bca0:	4800ef1e 	bne	r9,zero,80c060 <_strtod_r+0x1424>
  80bca4:	30dffc2c 	andhi	r3,r6,32752
  80bca8:	0081ac34 	movhi	r2,1712
  80bcac:	10c0ec36 	bltu	r2,r3,80c060 <_strtod_r+0x1424>
  80bcb0:	0080dc34 	movhi	r2,880
  80bcb4:	10ffca2e 	bgeu	r2,r3,80bbe0 <_strtod_r+0xfa4>
  80bcb8:	e0800017 	ldw	r2,0(fp)
  80bcbc:	e0c00117 	ldw	r3,4(fp)
  80bcc0:	020e5434 	movhi	r8,14672
  80bcc4:	000d883a 	mov	r6,zero
  80bcc8:	400f883a 	mov	r7,r8
  80bccc:	180b883a 	mov	r5,r3
  80bcd0:	1009883a 	mov	r4,r2
  80bcd4:	da000c15 	stw	r8,48(sp)
  80bcd8:	d8000b15 	stw	zero,44(sp)
  80bcdc:	080ef280 	call	80ef28 <__muldf3>
  80bce0:	e0800015 	stw	r2,0(fp)
  80bce4:	e0c00115 	stw	r3,4(fp)
  80bce8:	183f471e 	bne	r3,zero,80ba08 <_strtod_r+0xdcc>
  80bcec:	103f461e 	bne	r2,zero,80ba08 <_strtod_r+0xdcc>
  80bcf0:	00800884 	movi	r2,34
  80bcf4:	a8800015 	stw	r2,0(r21)
  80bcf8:	003f4306 	br	80ba08 <_strtod_r+0xdcc>
  80bcfc:	d8801317 	ldw	r2,76(sp)
  80bd00:	1025003a 	cmpeq	r18,r2,zero
  80bd04:	9000861e 	bne	r18,zero,80bf20 <_strtod_r+0x12e4>
  80bd08:	e1400117 	ldw	r5,4(fp)
  80bd0c:	00c00434 	movhi	r3,16
  80bd10:	18ffffc4 	addi	r3,r3,-1
  80bd14:	28c4703a 	and	r2,r5,r3
  80bd18:	10c01b26 	beq	r2,r3,80bd88 <_strtod_r+0x114c>
  80bd1c:	e1c00017 	ldw	r7,0(fp)
  80bd20:	3880004c 	andi	r2,r7,1
  80bd24:	1005003a 	cmpeq	r2,r2,zero
  80bd28:	1000791e 	bne	r2,zero,80bf10 <_strtod_r+0x12d4>
  80bd2c:	9000b126 	beq	r18,zero,80bff4 <_strtod_r+0x13b8>
  80bd30:	e4400117 	ldw	r17,4(fp)
  80bd34:	3809883a 	mov	r4,r7
  80bd38:	3821883a 	mov	r16,r7
  80bd3c:	880b883a 	mov	r5,r17
  80bd40:	0809b500 	call	809b50 <__ulp>
  80bd44:	180f883a 	mov	r7,r3
  80bd48:	880b883a 	mov	r5,r17
  80bd4c:	8009883a 	mov	r4,r16
  80bd50:	100d883a 	mov	r6,r2
  80bd54:	080ee340 	call	80ee34 <__subdf3>
  80bd58:	1009883a 	mov	r4,r2
  80bd5c:	000d883a 	mov	r6,zero
  80bd60:	000f883a 	mov	r7,zero
  80bd64:	180b883a 	mov	r5,r3
  80bd68:	e0800015 	stw	r2,0(fp)
  80bd6c:	e0c00115 	stw	r3,4(fp)
  80bd70:	080f5cc0 	call	80f5cc <__nedf2>
  80bd74:	103f9a26 	beq	r2,zero,80bbe0 <_strtod_r+0xfa4>
  80bd78:	d9001417 	ldw	r4,80(sp)
  80bd7c:	2013003a 	cmpeq	r9,r4,zero
  80bd80:	483f211e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80bd84:	003fcc06 	br	80bcb8 <_strtod_r+0x107c>
  80bd88:	d9001417 	ldw	r4,80(sp)
  80bd8c:	e1c00017 	ldw	r7,0(fp)
  80bd90:	2013003a 	cmpeq	r9,r4,zero
  80bd94:	4800bd1e 	bne	r9,zero,80c08c <_strtod_r+0x1450>
  80bd98:	28dffc2c 	andhi	r3,r5,32752
  80bd9c:	0081a834 	movhi	r2,1696
  80bda0:	10c0ba36 	bltu	r2,r3,80c08c <_strtod_r+0x1450>
  80bda4:	1804d53a 	srli	r2,r3,20
  80bda8:	00c01ac4 	movi	r3,107
  80bdac:	013fffc4 	movi	r4,-1
  80bdb0:	1887c83a 	sub	r3,r3,r2
  80bdb4:	20c4983a 	sll	r2,r4,r3
  80bdb8:	11ffd91e 	bne	r2,r7,80bd20 <_strtod_r+0x10e4>
  80bdbc:	28dffc2c 	andhi	r3,r5,32752
  80bdc0:	00800434 	movhi	r2,16
  80bdc4:	188d883a 	add	r6,r3,r2
  80bdc8:	e1800115 	stw	r6,4(fp)
  80bdcc:	e0000015 	stw	zero,0(fp)
  80bdd0:	483f0d1e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80bdd4:	003fb806 	br	80bcb8 <_strtod_r+0x107c>
  80bdd8:	0021883a 	mov	r16,zero
  80bddc:	0005883a 	mov	r2,zero
  80bde0:	044ff834 	movhi	r17,16352
  80bde4:	00eff834 	movhi	r3,49120
  80bde8:	003e8606 	br	80b804 <_strtod_r+0xbc8>
  80bdec:	803d9e26 	beq	r16,zero,80b468 <_strtod_r+0x82c>
  80bdf0:	0421c83a 	sub	r16,zero,r16
  80bdf4:	814003cc 	andi	r5,r16,15
  80bdf8:	28000f26 	beq	r5,zero,80be38 <_strtod_r+0x11fc>
  80bdfc:	280a90fa 	slli	r5,r5,3
  80be00:	01002074 	movhi	r4,129
  80be04:	21146b04 	addi	r4,r4,20908
  80be08:	e0800017 	ldw	r2,0(fp)
  80be0c:	290b883a 	add	r5,r5,r4
  80be10:	2a000017 	ldw	r8,0(r5)
  80be14:	e0c00117 	ldw	r3,4(fp)
  80be18:	2a400117 	ldw	r9,4(r5)
  80be1c:	1009883a 	mov	r4,r2
  80be20:	180b883a 	mov	r5,r3
  80be24:	480f883a 	mov	r7,r9
  80be28:	400d883a 	mov	r6,r8
  80be2c:	080f2ec0 	call	80f2ec <__divdf3>
  80be30:	e0c00115 	stw	r3,4(fp)
  80be34:	e0800015 	stw	r2,0(fp)
  80be38:	8021d13a 	srai	r16,r16,4
  80be3c:	803d8a26 	beq	r16,zero,80b468 <_strtod_r+0x82c>
  80be40:	008007c4 	movi	r2,31
  80be44:	14002d16 	blt	r2,r16,80befc <_strtod_r+0x12c0>
  80be48:	8080040c 	andi	r2,r16,16
  80be4c:	10009926 	beq	r2,zero,80c0b4 <_strtod_r+0x1478>
  80be50:	00801a84 	movi	r2,106
  80be54:	d8801415 	stw	r2,80(sp)
  80be58:	0400110e 	bge	zero,r16,80bea0 <_strtod_r+0x1264>
  80be5c:	04402074 	movhi	r17,129
  80be60:	8c54b804 	addi	r17,r17,21216
  80be64:	8080004c 	andi	r2,r16,1
  80be68:	1005003a 	cmpeq	r2,r2,zero
  80be6c:	1000091e 	bne	r2,zero,80be94 <_strtod_r+0x1258>
  80be70:	e0800017 	ldw	r2,0(fp)
  80be74:	e0c00117 	ldw	r3,4(fp)
  80be78:	89800017 	ldw	r6,0(r17)
  80be7c:	89c00117 	ldw	r7,4(r17)
  80be80:	180b883a 	mov	r5,r3
  80be84:	1009883a 	mov	r4,r2
  80be88:	080ef280 	call	80ef28 <__muldf3>
  80be8c:	e0c00115 	stw	r3,4(fp)
  80be90:	e0800015 	stw	r2,0(fp)
  80be94:	8021d07a 	srai	r16,r16,1
  80be98:	8c400204 	addi	r17,r17,8
  80be9c:	043ff116 	blt	zero,r16,80be64 <_strtod_r+0x1228>
  80bea0:	d8c01417 	ldw	r3,80(sp)
  80bea4:	18000d26 	beq	r3,zero,80bedc <_strtod_r+0x12a0>
  80bea8:	e1000117 	ldw	r4,4(fp)
  80beac:	00c01ac4 	movi	r3,107
  80beb0:	209ffc2c 	andhi	r2,r4,32752
  80beb4:	1004d53a 	srli	r2,r2,20
  80beb8:	1887c83a 	sub	r3,r3,r2
  80bebc:	00c0070e 	bge	zero,r3,80bedc <_strtod_r+0x12a0>
  80bec0:	008007c4 	movi	r2,31
  80bec4:	10c0900e 	bge	r2,r3,80c108 <_strtod_r+0x14cc>
  80bec8:	00800d04 	movi	r2,52
  80becc:	e0000015 	stw	zero,0(fp)
  80bed0:	10c0870e 	bge	r2,r3,80c0f0 <_strtod_r+0x14b4>
  80bed4:	0180dc34 	movhi	r6,880
  80bed8:	e1800115 	stw	r6,4(fp)
  80bedc:	e0800017 	ldw	r2,0(fp)
  80bee0:	e0c00117 	ldw	r3,4(fp)
  80bee4:	000d883a 	mov	r6,zero
  80bee8:	000f883a 	mov	r7,zero
  80beec:	180b883a 	mov	r5,r3
  80bef0:	1009883a 	mov	r4,r2
  80bef4:	080f5cc0 	call	80f5cc <__nedf2>
  80bef8:	103d5c1e 	bne	r2,zero,80b46c <_strtod_r+0x830>
  80befc:	00800884 	movi	r2,34
  80bf00:	a8800015 	stw	r2,0(r21)
  80bf04:	e0000015 	stw	zero,0(fp)
  80bf08:	e0000115 	stw	zero,4(fp)
  80bf0c:	003bc206 	br	80ae18 <_strtod_r+0x1dc>
  80bf10:	d8801417 	ldw	r2,80(sp)
  80bf14:	1013003a 	cmpeq	r9,r2,zero
  80bf18:	483ebb1e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80bf1c:	003f6606 	br	80bcb8 <_strtod_r+0x107c>
  80bf20:	e1800117 	ldw	r6,4(fp)
  80bf24:	00c00434 	movhi	r3,16
  80bf28:	18ffffc4 	addi	r3,r3,-1
  80bf2c:	30c4703a 	and	r2,r6,r3
  80bf30:	103f7a1e 	bne	r2,zero,80bd1c <_strtod_r+0x10e0>
  80bf34:	e1c00017 	ldw	r7,0(fp)
  80bf38:	383f791e 	bne	r7,zero,80bd20 <_strtod_r+0x10e4>
  80bf3c:	003f5606 	br	80bc98 <_strtod_r+0x105c>
  80bf40:	d9800f17 	ldw	r6,60(sp)
  80bf44:	00bffa84 	movi	r2,-22
  80bf48:	30bcd416 	blt	r6,r2,80b29c <_strtod_r+0x660>
  80bf4c:	317ffe24 	muli	r5,r6,-8
  80bf50:	01002074 	movhi	r4,129
  80bf54:	21146b04 	addi	r4,r4,20908
  80bf58:	e0800017 	ldw	r2,0(fp)
  80bf5c:	290b883a 	add	r5,r5,r4
  80bf60:	2a000017 	ldw	r8,0(r5)
  80bf64:	e0c00117 	ldw	r3,4(fp)
  80bf68:	2a400117 	ldw	r9,4(r5)
  80bf6c:	1009883a 	mov	r4,r2
  80bf70:	180b883a 	mov	r5,r3
  80bf74:	480f883a 	mov	r7,r9
  80bf78:	400d883a 	mov	r6,r8
  80bf7c:	080f2ec0 	call	80f2ec <__divdf3>
  80bf80:	e0c00115 	stw	r3,4(fp)
  80bf84:	e0800015 	stw	r2,0(fp)
  80bf88:	003ba306 	br	80ae18 <_strtod_r+0x1dc>
  80bf8c:	00800404 	movi	r2,16
  80bf90:	14c02f0e 	bge	r2,r19,80c050 <_strtod_r+0x1414>
  80bf94:	000f883a 	mov	r7,zero
  80bf98:	003f2006 	br	80bc1c <_strtod_r+0xfe0>
  80bf9c:	d9801417 	ldw	r6,80(sp)
  80bfa0:	3013003a 	cmpeq	r9,r6,zero
  80bfa4:	483e981e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80bfa8:	003f4306 	br	80bcb8 <_strtod_r+0x107c>
  80bfac:	00801a44 	movi	r2,105
  80bfb0:	20bc6326 	beq	r4,r2,80b140 <_strtod_r+0x504>
  80bfb4:	00801b84 	movi	r2,110
  80bfb8:	20bbba1e 	bne	r4,r2,80aea4 <_strtod_r+0x268>
  80bfbc:	dc000404 	addi	r16,sp,16
  80bfc0:	8009883a 	mov	r4,r16
  80bfc4:	01402074 	movhi	r5,129
  80bfc8:	2954b704 	addi	r5,r5,21212
  80bfcc:	080abf40 	call	80abf4 <match>
  80bfd0:	103bb426 	beq	r2,zero,80aea4 <_strtod_r+0x268>
  80bfd4:	d8800417 	ldw	r2,16(sp)
  80bfd8:	00c00a04 	movi	r3,40
  80bfdc:	11000007 	ldb	r4,0(r2)
  80bfe0:	20c03626 	beq	r4,r3,80c0bc <_strtod_r+0x1480>
  80bfe4:	01bffe34 	movhi	r6,65528
  80bfe8:	e1800115 	stw	r6,4(fp)
  80bfec:	e0000015 	stw	zero,0(fp)
  80bff0:	003b8906 	br	80ae18 <_strtod_r+0x1dc>
  80bff4:	e4400117 	ldw	r17,4(fp)
  80bff8:	3809883a 	mov	r4,r7
  80bffc:	3821883a 	mov	r16,r7
  80c000:	880b883a 	mov	r5,r17
  80c004:	0809b500 	call	809b50 <__ulp>
  80c008:	100d883a 	mov	r6,r2
  80c00c:	880b883a 	mov	r5,r17
  80c010:	180f883a 	mov	r7,r3
  80c014:	8009883a 	mov	r4,r16
  80c018:	080eeb40 	call	80eeb4 <__adddf3>
  80c01c:	d9801417 	ldw	r6,80(sp)
  80c020:	e0c00115 	stw	r3,4(fp)
  80c024:	e0800015 	stw	r2,0(fp)
  80c028:	3013003a 	cmpeq	r9,r6,zero
  80c02c:	483e761e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80c030:	003f2106 	br	80bcb8 <_strtod_r+0x107c>
  80c034:	000f883a 	mov	r7,zero
  80c038:	003cf006 	br	80b3fc <_strtod_r+0x7c0>
  80c03c:	0080d434 	movhi	r2,848
  80c040:	188d883a 	add	r6,r3,r2
  80c044:	d8001415 	stw	zero,80(sp)
  80c048:	e1800115 	stw	r6,4(fp)
  80c04c:	003d0706 	br	80b46c <_strtod_r+0x830>
  80c050:	808002a4 	muli	r2,r16,10
  80c054:	000f883a 	mov	r7,zero
  80c058:	1261883a 	add	r16,r2,r9
  80c05c:	003eef06 	br	80bc1c <_strtod_r+0xfe0>
  80c060:	309ffc2c 	andhi	r2,r6,32752
  80c064:	00fffc34 	movhi	r3,65520
  80c068:	10c5883a 	add	r2,r2,r3
  80c06c:	00c00434 	movhi	r3,16
  80c070:	18ffffc4 	addi	r3,r3,-1
  80c074:	10ccb03a 	or	r6,r2,r3
  80c078:	01ffffc4 	movi	r7,-1
  80c07c:	e1800115 	stw	r6,4(fp)
  80c080:	e1c00015 	stw	r7,0(fp)
  80c084:	483e601e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80c088:	003f0b06 	br	80bcb8 <_strtod_r+0x107c>
  80c08c:	00bfffc4 	movi	r2,-1
  80c090:	003f4906 	br	80bdb8 <_strtod_r+0x117c>
  80c094:	0025883a 	mov	r18,zero
  80c098:	003cb106 	br	80b360 <_strtod_r+0x724>
  80c09c:	d8c01417 	ldw	r3,80(sp)
  80c0a0:	1813003a 	cmpeq	r9,r3,zero
  80c0a4:	483e581e 	bne	r9,zero,80ba08 <_strtod_r+0xdcc>
  80c0a8:	003f0306 	br	80bcb8 <_strtod_r+0x107c>
  80c0ac:	980f883a 	mov	r7,r19
  80c0b0:	003ed406 	br	80bc04 <_strtod_r+0xfc8>
  80c0b4:	d8001415 	stw	zero,80(sp)
  80c0b8:	003f6706 	br	80be58 <_strtod_r+0x121c>
  80c0bc:	8009883a 	mov	r4,r16
  80c0c0:	01402074 	movhi	r5,129
  80c0c4:	29573b04 	addi	r5,r5,23788
  80c0c8:	d9800d04 	addi	r6,sp,52
  80c0cc:	080d9ac0 	call	80d9ac <__hexnan>
  80c0d0:	00c00144 	movi	r3,5
  80c0d4:	10ffc31e 	bne	r2,r3,80bfe4 <_strtod_r+0x13a8>
  80c0d8:	d8800e17 	ldw	r2,56(sp)
  80c0dc:	d9c00d17 	ldw	r7,52(sp)
  80c0e0:	119ffc34 	orhi	r6,r2,32752
  80c0e4:	e1800115 	stw	r6,4(fp)
  80c0e8:	e1c00015 	stw	r7,0(fp)
  80c0ec:	003b4a06 	br	80ae18 <_strtod_r+0x1dc>
  80c0f0:	18fff804 	addi	r3,r3,-32
  80c0f4:	00bfffc4 	movi	r2,-1
  80c0f8:	10c4983a 	sll	r2,r2,r3
  80c0fc:	208c703a 	and	r6,r4,r2
  80c100:	e1800115 	stw	r6,4(fp)
  80c104:	003f7506 	br	80bedc <_strtod_r+0x12a0>
  80c108:	00bfffc4 	movi	r2,-1
  80c10c:	10c4983a 	sll	r2,r2,r3
  80c110:	e0c00017 	ldw	r3,0(fp)
  80c114:	188e703a 	and	r7,r3,r2
  80c118:	e1c00015 	stw	r7,0(fp)
  80c11c:	003f6f06 	br	80bedc <_strtod_r+0x12a0>

0080c120 <strtof>:
  80c120:	defffa04 	addi	sp,sp,-24
  80c124:	dd000415 	stw	r20,16(sp)
  80c128:	05002074 	movhi	r20,129
  80c12c:	a51c4404 	addi	r20,r20,28944
  80c130:	2007883a 	mov	r3,r4
  80c134:	a1000017 	ldw	r4,0(r20)
  80c138:	280d883a 	mov	r6,r5
  80c13c:	180b883a 	mov	r5,r3
  80c140:	dfc00515 	stw	ra,20(sp)
  80c144:	dcc00315 	stw	r19,12(sp)
  80c148:	dc800215 	stw	r18,8(sp)
  80c14c:	dc400115 	stw	r17,4(sp)
  80c150:	dc000015 	stw	r16,0(sp)
  80c154:	080ac3c0 	call	80ac3c <_strtod_r>
  80c158:	180b883a 	mov	r5,r3
  80c15c:	1009883a 	mov	r4,r2
  80c160:	1823883a 	mov	r17,r3
  80c164:	1021883a 	mov	r16,r2
  80c168:	080fa440 	call	80fa44 <__truncdfsf2>
  80c16c:	1009883a 	mov	r4,r2
  80c170:	000b883a 	mov	r5,zero
  80c174:	1025883a 	mov	r18,r2
  80c178:	1027883a 	mov	r19,r2
  80c17c:	080e8bc0 	call	80e8bc <__nesf2>
  80c180:	000d883a 	mov	r6,zero
  80c184:	000f883a 	mov	r7,zero
  80c188:	8009883a 	mov	r4,r16
  80c18c:	880b883a 	mov	r5,r17
  80c190:	10000e1e 	bne	r2,zero,80c1cc <strtof+0xac>
  80c194:	080f5cc0 	call	80f5cc <__nedf2>
  80c198:	10000c26 	beq	r2,zero,80c1cc <strtof+0xac>
  80c19c:	a0c00017 	ldw	r3,0(r20)
  80c1a0:	00800884 	movi	r2,34
  80c1a4:	18800015 	stw	r2,0(r3)
  80c1a8:	9805883a 	mov	r2,r19
  80c1ac:	dfc00517 	ldw	ra,20(sp)
  80c1b0:	dd000417 	ldw	r20,16(sp)
  80c1b4:	dcc00317 	ldw	r19,12(sp)
  80c1b8:	dc800217 	ldw	r18,8(sp)
  80c1bc:	dc400117 	ldw	r17,4(sp)
  80c1c0:	dc000017 	ldw	r16,0(sp)
  80c1c4:	dec00604 	addi	sp,sp,24
  80c1c8:	f800283a 	ret
  80c1cc:	9009883a 	mov	r4,r18
  80c1d0:	015fe034 	movhi	r5,32640
  80c1d4:	297fffc4 	addi	r5,r5,-1
  80c1d8:	080e9340 	call	80e934 <__gtsf2>
  80c1dc:	00ffffc4 	movi	r3,-1
  80c1e0:	011ffc34 	movhi	r4,32752
  80c1e4:	213fffc4 	addi	r4,r4,-1
  80c1e8:	200f883a 	mov	r7,r4
  80c1ec:	180d883a 	mov	r6,r3
  80c1f0:	8009883a 	mov	r4,r16
  80c1f4:	880b883a 	mov	r5,r17
  80c1f8:	00800f16 	blt	zero,r2,80c238 <strtof+0x118>
  80c1fc:	9009883a 	mov	r4,r18
  80c200:	017fe034 	movhi	r5,65408
  80c204:	297fffc4 	addi	r5,r5,-1
  80c208:	080e9ac0 	call	80e9ac <__ltsf2>
  80c20c:	023fffc4 	movi	r8,-1
  80c210:	027ffc34 	movhi	r9,65520
  80c214:	4a7fffc4 	addi	r9,r9,-1
  80c218:	880b883a 	mov	r5,r17
  80c21c:	480f883a 	mov	r7,r9
  80c220:	8009883a 	mov	r4,r16
  80c224:	400d883a 	mov	r6,r8
  80c228:	103fdf0e 	bge	r2,zero,80c1a8 <strtof+0x88>
  80c22c:	080f7640 	call	80f764 <__ltdf2>
  80c230:	103fda0e 	bge	r2,zero,80c19c <strtof+0x7c>
  80c234:	003fdc06 	br	80c1a8 <strtof+0x88>
  80c238:	080f6540 	call	80f654 <__gtdf2>
  80c23c:	00bfd70e 	bge	zero,r2,80c19c <strtof+0x7c>
  80c240:	003fee06 	br	80c1fc <strtof+0xdc>

0080c244 <strtod>:
  80c244:	01802074 	movhi	r6,129
  80c248:	319c4404 	addi	r6,r6,28944
  80c24c:	2007883a 	mov	r3,r4
  80c250:	31000017 	ldw	r4,0(r6)
  80c254:	280d883a 	mov	r6,r5
  80c258:	180b883a 	mov	r5,r3
  80c25c:	080ac3c1 	jmpi	80ac3c <_strtod_r>

0080c260 <_strtol_r>:
  80c260:	defff304 	addi	sp,sp,-52
  80c264:	00802074 	movhi	r2,129
  80c268:	109c4804 	addi	r2,r2,28960
  80c26c:	dcc00615 	stw	r19,24(sp)
  80c270:	14c00017 	ldw	r19,0(r2)
  80c274:	ddc00a15 	stw	r23,40(sp)
  80c278:	dc000315 	stw	r16,12(sp)
  80c27c:	dfc00c15 	stw	ra,48(sp)
  80c280:	df000b15 	stw	fp,44(sp)
  80c284:	dd800915 	stw	r22,36(sp)
  80c288:	dd400815 	stw	r21,32(sp)
  80c28c:	dd000715 	stw	r20,28(sp)
  80c290:	dc800515 	stw	r18,20(sp)
  80c294:	dc400415 	stw	r17,16(sp)
  80c298:	282f883a 	mov	r23,r5
  80c29c:	d9000015 	stw	r4,0(sp)
  80c2a0:	d9800115 	stw	r6,4(sp)
  80c2a4:	2821883a 	mov	r16,r5
  80c2a8:	84400007 	ldb	r17,0(r16)
  80c2ac:	84000044 	addi	r16,r16,1
  80c2b0:	9c47883a 	add	r3,r19,r17
  80c2b4:	18800003 	ldbu	r2,0(r3)
  80c2b8:	1080020c 	andi	r2,r2,8
  80c2bc:	103ffa1e 	bne	r2,zero,80c2a8 <_strtol_r+0x48>
  80c2c0:	00800b44 	movi	r2,45
  80c2c4:	88805c26 	beq	r17,r2,80c438 <_strtol_r+0x1d8>
  80c2c8:	00800ac4 	movi	r2,43
  80c2cc:	88805726 	beq	r17,r2,80c42c <_strtol_r+0x1cc>
  80c2d0:	0039883a 	mov	fp,zero
  80c2d4:	3807003a 	cmpeq	r3,r7,zero
  80c2d8:	1800431e 	bne	r3,zero,80c3e8 <_strtol_r+0x188>
  80c2dc:	00800404 	movi	r2,16
  80c2e0:	38804126 	beq	r7,r2,80c3e8 <_strtol_r+0x188>
  80c2e4:	3829883a 	mov	r20,r7
  80c2e8:	e02cc03a 	cmpne	r22,fp,zero
  80c2ec:	b0004b1e 	bne	r22,zero,80c41c <_strtol_r+0x1bc>
  80c2f0:	04a00034 	movhi	r18,32768
  80c2f4:	94bfffc4 	addi	r18,r18,-1
  80c2f8:	9009883a 	mov	r4,r18
  80c2fc:	a00b883a 	mov	r5,r20
  80c300:	d9c00215 	stw	r7,8(sp)
  80c304:	080fd900 	call	80fd90 <__umodsi3>
  80c308:	9009883a 	mov	r4,r18
  80c30c:	a00b883a 	mov	r5,r20
  80c310:	102b883a 	mov	r21,r2
  80c314:	080fd880 	call	80fd88 <__udivsi3>
  80c318:	1011883a 	mov	r8,r2
  80c31c:	9c45883a 	add	r2,r19,r17
  80c320:	11000003 	ldbu	r4,0(r2)
  80c324:	000b883a 	mov	r5,zero
  80c328:	000d883a 	mov	r6,zero
  80c32c:	20c0010c 	andi	r3,r4,4
  80c330:	d9c00217 	ldw	r7,8(sp)
  80c334:	18000e26 	beq	r3,zero,80c370 <_strtol_r+0x110>
  80c338:	88fff404 	addi	r3,r17,-48
  80c33c:	19c0140e 	bge	r3,r7,80c390 <_strtol_r+0x130>
  80c340:	30003116 	blt	r6,zero,80c408 <_strtol_r+0x1a8>
  80c344:	41403036 	bltu	r8,r5,80c408 <_strtol_r+0x1a8>
  80c348:	2a002e26 	beq	r5,r8,80c404 <_strtol_r+0x1a4>
  80c34c:	2d05383a 	mul	r2,r5,r20
  80c350:	01800044 	movi	r6,1
  80c354:	10cb883a 	add	r5,r2,r3
  80c358:	84400007 	ldb	r17,0(r16)
  80c35c:	84000044 	addi	r16,r16,1
  80c360:	9c45883a 	add	r2,r19,r17
  80c364:	11000003 	ldbu	r4,0(r2)
  80c368:	20c0010c 	andi	r3,r4,4
  80c36c:	183ff21e 	bne	r3,zero,80c338 <_strtol_r+0xd8>
  80c370:	208000cc 	andi	r2,r4,3
  80c374:	10000626 	beq	r2,zero,80c390 <_strtol_r+0x130>
  80c378:	2080004c 	andi	r2,r4,1
  80c37c:	1005003a 	cmpeq	r2,r2,zero
  80c380:	1000231e 	bne	r2,zero,80c410 <_strtol_r+0x1b0>
  80c384:	00800dc4 	movi	r2,55
  80c388:	8887c83a 	sub	r3,r17,r2
  80c38c:	19ffec16 	blt	r3,r7,80c340 <_strtol_r+0xe0>
  80c390:	30002d16 	blt	r6,zero,80c448 <_strtol_r+0x1e8>
  80c394:	b000231e 	bne	r22,zero,80c424 <_strtol_r+0x1c4>
  80c398:	2807883a 	mov	r3,r5
  80c39c:	d8800117 	ldw	r2,4(sp)
  80c3a0:	10000426 	beq	r2,zero,80c3b4 <_strtol_r+0x154>
  80c3a4:	30000126 	beq	r6,zero,80c3ac <_strtol_r+0x14c>
  80c3a8:	85ffffc4 	addi	r23,r16,-1
  80c3ac:	d9000117 	ldw	r4,4(sp)
  80c3b0:	25c00015 	stw	r23,0(r4)
  80c3b4:	1805883a 	mov	r2,r3
  80c3b8:	dfc00c17 	ldw	ra,48(sp)
  80c3bc:	df000b17 	ldw	fp,44(sp)
  80c3c0:	ddc00a17 	ldw	r23,40(sp)
  80c3c4:	dd800917 	ldw	r22,36(sp)
  80c3c8:	dd400817 	ldw	r21,32(sp)
  80c3cc:	dd000717 	ldw	r20,28(sp)
  80c3d0:	dcc00617 	ldw	r19,24(sp)
  80c3d4:	dc800517 	ldw	r18,20(sp)
  80c3d8:	dc400417 	ldw	r17,16(sp)
  80c3dc:	dc000317 	ldw	r16,12(sp)
  80c3e0:	dec00d04 	addi	sp,sp,52
  80c3e4:	f800283a 	ret
  80c3e8:	00800c04 	movi	r2,48
  80c3ec:	88801d26 	beq	r17,r2,80c464 <_strtol_r+0x204>
  80c3f0:	183fbc26 	beq	r3,zero,80c2e4 <_strtol_r+0x84>
  80c3f4:	00800c04 	movi	r2,48
  80c3f8:	88802726 	beq	r17,r2,80c498 <_strtol_r+0x238>
  80c3fc:	01c00284 	movi	r7,10
  80c400:	003fb806 	br	80c2e4 <_strtol_r+0x84>
  80c404:	a8ffd10e 	bge	r21,r3,80c34c <_strtol_r+0xec>
  80c408:	01bfffc4 	movi	r6,-1
  80c40c:	003fd206 	br	80c358 <_strtol_r+0xf8>
  80c410:	008015c4 	movi	r2,87
  80c414:	8887c83a 	sub	r3,r17,r2
  80c418:	003fdc06 	br	80c38c <_strtol_r+0x12c>
  80c41c:	04a00034 	movhi	r18,32768
  80c420:	003fb506 	br	80c2f8 <_strtol_r+0x98>
  80c424:	0147c83a 	sub	r3,zero,r5
  80c428:	003fdc06 	br	80c39c <_strtol_r+0x13c>
  80c42c:	84400007 	ldb	r17,0(r16)
  80c430:	84000044 	addi	r16,r16,1
  80c434:	003fa606 	br	80c2d0 <_strtol_r+0x70>
  80c438:	84400007 	ldb	r17,0(r16)
  80c43c:	07000044 	movi	fp,1
  80c440:	84000044 	addi	r16,r16,1
  80c444:	003fa306 	br	80c2d4 <_strtol_r+0x74>
  80c448:	e005003a 	cmpeq	r2,fp,zero
  80c44c:	10000f1e 	bne	r2,zero,80c48c <_strtol_r+0x22c>
  80c450:	00e00034 	movhi	r3,32768
  80c454:	d9000017 	ldw	r4,0(sp)
  80c458:	00800884 	movi	r2,34
  80c45c:	20800015 	stw	r2,0(r4)
  80c460:	003fce06 	br	80c39c <_strtol_r+0x13c>
  80c464:	81000007 	ldb	r4,0(r16)
  80c468:	00801e04 	movi	r2,120
  80c46c:	20800226 	beq	r4,r2,80c478 <_strtol_r+0x218>
  80c470:	00801604 	movi	r2,88
  80c474:	20bfde1e 	bne	r4,r2,80c3f0 <_strtol_r+0x190>
  80c478:	84400047 	ldb	r17,1(r16)
  80c47c:	01c00404 	movi	r7,16
  80c480:	84000084 	addi	r16,r16,2
  80c484:	3829883a 	mov	r20,r7
  80c488:	003f9706 	br	80c2e8 <_strtol_r+0x88>
  80c48c:	00e00034 	movhi	r3,32768
  80c490:	18ffffc4 	addi	r3,r3,-1
  80c494:	003fef06 	br	80c454 <_strtol_r+0x1f4>
  80c498:	01c00204 	movi	r7,8
  80c49c:	3829883a 	mov	r20,r7
  80c4a0:	003f9106 	br	80c2e8 <_strtol_r+0x88>

0080c4a4 <strtol>:
  80c4a4:	00802074 	movhi	r2,129
  80c4a8:	109c4404 	addi	r2,r2,28944
  80c4ac:	2013883a 	mov	r9,r4
  80c4b0:	11000017 	ldw	r4,0(r2)
  80c4b4:	2805883a 	mov	r2,r5
  80c4b8:	300f883a 	mov	r7,r6
  80c4bc:	480b883a 	mov	r5,r9
  80c4c0:	100d883a 	mov	r6,r2
  80c4c4:	080c2601 	jmpi	80c260 <_strtol_r>

0080c4c8 <_strtoll_r>:
  80c4c8:	defff004 	addi	sp,sp,-64
  80c4cc:	00802074 	movhi	r2,129
  80c4d0:	109c4804 	addi	r2,r2,28960
  80c4d4:	df000e15 	stw	fp,56(sp)
  80c4d8:	17000017 	ldw	fp,0(r2)
  80c4dc:	ddc00d15 	stw	r23,52(sp)
  80c4e0:	dd000a15 	stw	r20,40(sp)
  80c4e4:	dfc00f15 	stw	ra,60(sp)
  80c4e8:	dd800c15 	stw	r22,48(sp)
  80c4ec:	dd400b15 	stw	r21,44(sp)
  80c4f0:	dcc00915 	stw	r19,36(sp)
  80c4f4:	dc800815 	stw	r18,32(sp)
  80c4f8:	dc400715 	stw	r17,28(sp)
  80c4fc:	dc000615 	stw	r16,24(sp)
  80c500:	d9400315 	stw	r5,12(sp)
  80c504:	d9000215 	stw	r4,8(sp)
  80c508:	d9800415 	stw	r6,16(sp)
  80c50c:	382f883a 	mov	r23,r7
  80c510:	2829883a 	mov	r20,r5
  80c514:	a4c00007 	ldb	r19,0(r20)
  80c518:	a5000044 	addi	r20,r20,1
  80c51c:	e4c7883a 	add	r3,fp,r19
  80c520:	18800003 	ldbu	r2,0(r3)
  80c524:	1080020c 	andi	r2,r2,8
  80c528:	103ffa1e 	bne	r2,zero,80c514 <_strtoll_r+0x4c>
  80c52c:	00800b44 	movi	r2,45
  80c530:	98808826 	beq	r19,r2,80c754 <_strtoll_r+0x28c>
  80c534:	00800ac4 	movi	r2,43
  80c538:	98808326 	beq	r19,r2,80c748 <_strtoll_r+0x280>
  80c53c:	d8000115 	stw	zero,4(sp)
  80c540:	b807003a 	cmpeq	r3,r23,zero
  80c544:	18005f1e 	bne	r3,zero,80c6c4 <_strtoll_r+0x1fc>
  80c548:	00800404 	movi	r2,16
  80c54c:	b8805d26 	beq	r23,r2,80c6c4 <_strtoll_r+0x1fc>
  80c550:	b82dd7fa 	srai	r22,r23,31
  80c554:	b82b883a 	mov	r21,r23
  80c558:	d8c00117 	ldw	r3,4(sp)
  80c55c:	1806c03a 	cmpne	r3,r3,zero
  80c560:	d8c00515 	stw	r3,20(sp)
  80c564:	1800631e 	bne	r3,zero,80c6f4 <_strtoll_r+0x22c>
  80c568:	043fffc4 	movi	r16,-1
  80c56c:	04600034 	movhi	r17,32768
  80c570:	8c7fffc4 	addi	r17,r17,-1
  80c574:	880b883a 	mov	r5,r17
  80c578:	8009883a 	mov	r4,r16
  80c57c:	a80d883a 	mov	r6,r21
  80c580:	b00f883a 	mov	r7,r22
  80c584:	080e30c0 	call	80e30c <__umoddi3>
  80c588:	880b883a 	mov	r5,r17
  80c58c:	8009883a 	mov	r4,r16
  80c590:	b00f883a 	mov	r7,r22
  80c594:	a80d883a 	mov	r6,r21
  80c598:	d8800015 	stw	r2,0(sp)
  80c59c:	080dd300 	call	80dd30 <__udivdi3>
  80c5a0:	1023883a 	mov	r17,r2
  80c5a4:	e4c5883a 	add	r2,fp,r19
  80c5a8:	11000003 	ldbu	r4,0(r2)
  80c5ac:	1825883a 	mov	r18,r3
  80c5b0:	0015883a 	mov	r10,zero
  80c5b4:	20c0010c 	andi	r3,r4,4
  80c5b8:	0017883a 	mov	r11,zero
  80c5bc:	000f883a 	mov	r7,zero
  80c5c0:	18001a26 	beq	r3,zero,80c62c <_strtoll_r+0x164>
  80c5c4:	9c3ff404 	addi	r16,r19,-48
  80c5c8:	85c0200e 	bge	r16,r23,80c64c <_strtoll_r+0x184>
  80c5cc:	38003b16 	blt	r7,zero,80c6bc <_strtoll_r+0x1f4>
  80c5d0:	92c03a36 	bltu	r18,r11,80c6bc <_strtoll_r+0x1f4>
  80c5d4:	5c803826 	beq	r11,r18,80c6b8 <_strtoll_r+0x1f0>
  80c5d8:	54404c26 	beq	r10,r17,80c70c <_strtoll_r+0x244>
  80c5dc:	580b883a 	mov	r5,r11
  80c5e0:	5009883a 	mov	r4,r10
  80c5e4:	a80d883a 	mov	r6,r21
  80c5e8:	b00f883a 	mov	r7,r22
  80c5ec:	080dbf40 	call	80dbf4 <__muldi3>
  80c5f0:	8013d7fa 	srai	r9,r16,31
  80c5f4:	100d883a 	mov	r6,r2
  80c5f8:	1405883a 	add	r2,r2,r16
  80c5fc:	118d803a 	cmpltu	r6,r2,r6
  80c600:	1a47883a 	add	r3,r3,r9
  80c604:	30cd883a 	add	r6,r6,r3
  80c608:	1015883a 	mov	r10,r2
  80c60c:	3017883a 	mov	r11,r6
  80c610:	01c00044 	movi	r7,1
  80c614:	a4c00007 	ldb	r19,0(r20)
  80c618:	a5000044 	addi	r20,r20,1
  80c61c:	e4c5883a 	add	r2,fp,r19
  80c620:	11000003 	ldbu	r4,0(r2)
  80c624:	20c0010c 	andi	r3,r4,4
  80c628:	183fe61e 	bne	r3,zero,80c5c4 <_strtoll_r+0xfc>
  80c62c:	208000cc 	andi	r2,r4,3
  80c630:	10000626 	beq	r2,zero,80c64c <_strtoll_r+0x184>
  80c634:	2080004c 	andi	r2,r4,1
  80c638:	1005003a 	cmpeq	r2,r2,zero
  80c63c:	1000301e 	bne	r2,zero,80c700 <_strtoll_r+0x238>
  80c640:	02000dc4 	movi	r8,55
  80c644:	9a21c83a 	sub	r16,r19,r8
  80c648:	85ffe016 	blt	r16,r23,80c5cc <_strtoll_r+0x104>
  80c64c:	38004616 	blt	r7,zero,80c768 <_strtoll_r+0x2a0>
  80c650:	d8800517 	ldw	r2,20(sp)
  80c654:	1000341e 	bne	r2,zero,80c728 <_strtoll_r+0x260>
  80c658:	500b883a 	mov	r5,r10
  80c65c:	580d883a 	mov	r6,r11
  80c660:	d8c00417 	ldw	r3,16(sp)
  80c664:	18000626 	beq	r3,zero,80c680 <_strtoll_r+0x1b8>
  80c668:	38000226 	beq	r7,zero,80c674 <_strtoll_r+0x1ac>
  80c66c:	a53fffc4 	addi	r20,r20,-1
  80c670:	dd000315 	stw	r20,12(sp)
  80c674:	d8c00317 	ldw	r3,12(sp)
  80c678:	d8800417 	ldw	r2,16(sp)
  80c67c:	10c00015 	stw	r3,0(r2)
  80c680:	2805883a 	mov	r2,r5
  80c684:	3007883a 	mov	r3,r6
  80c688:	dfc00f17 	ldw	ra,60(sp)
  80c68c:	df000e17 	ldw	fp,56(sp)
  80c690:	ddc00d17 	ldw	r23,52(sp)
  80c694:	dd800c17 	ldw	r22,48(sp)
  80c698:	dd400b17 	ldw	r21,44(sp)
  80c69c:	dd000a17 	ldw	r20,40(sp)
  80c6a0:	dcc00917 	ldw	r19,36(sp)
  80c6a4:	dc800817 	ldw	r18,32(sp)
  80c6a8:	dc400717 	ldw	r17,28(sp)
  80c6ac:	dc000617 	ldw	r16,24(sp)
  80c6b0:	dec01004 	addi	sp,sp,64
  80c6b4:	f800283a 	ret
  80c6b8:	8abfc72e 	bgeu	r17,r10,80c5d8 <_strtoll_r+0x110>
  80c6bc:	01ffffc4 	movi	r7,-1
  80c6c0:	003fd406 	br	80c614 <_strtoll_r+0x14c>
  80c6c4:	00800c04 	movi	r2,48
  80c6c8:	98803226 	beq	r19,r2,80c794 <_strtoll_r+0x2cc>
  80c6cc:	183fa026 	beq	r3,zero,80c550 <_strtoll_r+0x88>
  80c6d0:	00800c04 	movi	r2,48
  80c6d4:	98803e26 	beq	r19,r2,80c7d0 <_strtoll_r+0x308>
  80c6d8:	d8c00117 	ldw	r3,4(sp)
  80c6dc:	05c00284 	movi	r23,10
  80c6e0:	b82b883a 	mov	r21,r23
  80c6e4:	1806c03a 	cmpne	r3,r3,zero
  80c6e8:	002d883a 	mov	r22,zero
  80c6ec:	d8c00515 	stw	r3,20(sp)
  80c6f0:	183f9d26 	beq	r3,zero,80c568 <_strtoll_r+0xa0>
  80c6f4:	0021883a 	mov	r16,zero
  80c6f8:	04600034 	movhi	r17,32768
  80c6fc:	003f9d06 	br	80c574 <_strtoll_r+0xac>
  80c700:	020015c4 	movi	r8,87
  80c704:	9a21c83a 	sub	r16,r19,r8
  80c708:	003fcf06 	br	80c648 <_strtoll_r+0x180>
  80c70c:	5cbfb31e 	bne	r11,r18,80c5dc <_strtoll_r+0x114>
  80c710:	d8800017 	ldw	r2,0(sp)
  80c714:	143fb10e 	bge	r2,r16,80c5dc <_strtoll_r+0x114>
  80c718:	8815883a 	mov	r10,r17
  80c71c:	9017883a 	mov	r11,r18
  80c720:	01ffffc4 	movi	r7,-1
  80c724:	003fbb06 	br	80c614 <_strtoll_r+0x14c>
  80c728:	0009883a 	mov	r4,zero
  80c72c:	2285c83a 	sub	r2,r4,r10
  80c730:	2089803a 	cmpltu	r4,r4,r2
  80c734:	02c7c83a 	sub	r3,zero,r11
  80c738:	1909c83a 	sub	r4,r3,r4
  80c73c:	100b883a 	mov	r5,r2
  80c740:	200d883a 	mov	r6,r4
  80c744:	003fc606 	br	80c660 <_strtoll_r+0x198>
  80c748:	a4c00007 	ldb	r19,0(r20)
  80c74c:	a5000044 	addi	r20,r20,1
  80c750:	003f7a06 	br	80c53c <_strtoll_r+0x74>
  80c754:	a4c00007 	ldb	r19,0(r20)
  80c758:	00800044 	movi	r2,1
  80c75c:	a5000044 	addi	r20,r20,1
  80c760:	d8800115 	stw	r2,4(sp)
  80c764:	003f7606 	br	80c540 <_strtoll_r+0x78>
  80c768:	d8c00117 	ldw	r3,4(sp)
  80c76c:	1805003a 	cmpeq	r2,r3,zero
  80c770:	1000131e 	bne	r2,zero,80c7c0 <_strtoll_r+0x2f8>
  80c774:	0005883a 	mov	r2,zero
  80c778:	00e00034 	movhi	r3,32768
  80c77c:	100b883a 	mov	r5,r2
  80c780:	180d883a 	mov	r6,r3
  80c784:	d8c00217 	ldw	r3,8(sp)
  80c788:	00800884 	movi	r2,34
  80c78c:	18800015 	stw	r2,0(r3)
  80c790:	003fb306 	br	80c660 <_strtoll_r+0x198>
  80c794:	a1000007 	ldb	r4,0(r20)
  80c798:	00801e04 	movi	r2,120
  80c79c:	20800226 	beq	r4,r2,80c7a8 <_strtoll_r+0x2e0>
  80c7a0:	00801604 	movi	r2,88
  80c7a4:	20bfc91e 	bne	r4,r2,80c6cc <_strtoll_r+0x204>
  80c7a8:	a4c00047 	ldb	r19,1(r20)
  80c7ac:	05c00404 	movi	r23,16
  80c7b0:	b82b883a 	mov	r21,r23
  80c7b4:	a5000084 	addi	r20,r20,2
  80c7b8:	002d883a 	mov	r22,zero
  80c7bc:	003f6606 	br	80c558 <_strtoll_r+0x90>
  80c7c0:	017fffc4 	movi	r5,-1
  80c7c4:	01a00034 	movhi	r6,32768
  80c7c8:	31bfffc4 	addi	r6,r6,-1
  80c7cc:	003fed06 	br	80c784 <_strtoll_r+0x2bc>
  80c7d0:	05c00204 	movi	r23,8
  80c7d4:	b82b883a 	mov	r21,r23
  80c7d8:	002d883a 	mov	r22,zero
  80c7dc:	003f5e06 	br	80c558 <_strtoll_r+0x90>

0080c7e0 <_strtoul_r>:
  80c7e0:	defff604 	addi	sp,sp,-40
  80c7e4:	00802074 	movhi	r2,129
  80c7e8:	109c4804 	addi	r2,r2,28960
  80c7ec:	dd000415 	stw	r20,16(sp)
  80c7f0:	15000017 	ldw	r20,0(r2)
  80c7f4:	ddc00715 	stw	r23,28(sp)
  80c7f8:	dd800615 	stw	r22,24(sp)
  80c7fc:	dd400515 	stw	r21,20(sp)
  80c800:	dc800215 	stw	r18,8(sp)
  80c804:	dc000015 	stw	r16,0(sp)
  80c808:	dfc00915 	stw	ra,36(sp)
  80c80c:	df000815 	stw	fp,32(sp)
  80c810:	dcc00315 	stw	r19,12(sp)
  80c814:	dc400115 	stw	r17,4(sp)
  80c818:	282b883a 	mov	r21,r5
  80c81c:	202f883a 	mov	r23,r4
  80c820:	302d883a 	mov	r22,r6
  80c824:	3825883a 	mov	r18,r7
  80c828:	2821883a 	mov	r16,r5
  80c82c:	84400007 	ldb	r17,0(r16)
  80c830:	84000044 	addi	r16,r16,1
  80c834:	a447883a 	add	r3,r20,r17
  80c838:	18800003 	ldbu	r2,0(r3)
  80c83c:	1080020c 	andi	r2,r2,8
  80c840:	103ffa1e 	bne	r2,zero,80c82c <_strtoul_r+0x4c>
  80c844:	00800b44 	movi	r2,45
  80c848:	88805626 	beq	r17,r2,80c9a4 <_strtoul_r+0x1c4>
  80c84c:	00800ac4 	movi	r2,43
  80c850:	88805126 	beq	r17,r2,80c998 <_strtoul_r+0x1b8>
  80c854:	0039883a 	mov	fp,zero
  80c858:	9007003a 	cmpeq	r3,r18,zero
  80c85c:	18003b1e 	bne	r3,zero,80c94c <_strtoul_r+0x16c>
  80c860:	00800404 	movi	r2,16
  80c864:	90803926 	beq	r18,r2,80c94c <_strtoul_r+0x16c>
  80c868:	013fffc4 	movi	r4,-1
  80c86c:	900b883a 	mov	r5,r18
  80c870:	080fd880 	call	80fd88 <__udivsi3>
  80c874:	013fffc4 	movi	r4,-1
  80c878:	900b883a 	mov	r5,r18
  80c87c:	1027883a 	mov	r19,r2
  80c880:	080fd900 	call	80fd90 <__umodsi3>
  80c884:	1011883a 	mov	r8,r2
  80c888:	900f883a 	mov	r7,r18
  80c88c:	a445883a 	add	r2,r20,r17
  80c890:	11000003 	ldbu	r4,0(r2)
  80c894:	000b883a 	mov	r5,zero
  80c898:	000d883a 	mov	r6,zero
  80c89c:	20c0010c 	andi	r3,r4,4
  80c8a0:	18000e26 	beq	r3,zero,80c8dc <_strtoul_r+0xfc>
  80c8a4:	88fff404 	addi	r3,r17,-48
  80c8a8:	1c80140e 	bge	r3,r18,80c8fc <_strtoul_r+0x11c>
  80c8ac:	30003316 	blt	r6,zero,80c97c <_strtoul_r+0x19c>
  80c8b0:	99403236 	bltu	r19,r5,80c97c <_strtoul_r+0x19c>
  80c8b4:	2cc03026 	beq	r5,r19,80c978 <_strtoul_r+0x198>
  80c8b8:	29c5383a 	mul	r2,r5,r7
  80c8bc:	01800044 	movi	r6,1
  80c8c0:	10cb883a 	add	r5,r2,r3
  80c8c4:	84400007 	ldb	r17,0(r16)
  80c8c8:	84000044 	addi	r16,r16,1
  80c8cc:	a445883a 	add	r2,r20,r17
  80c8d0:	11000003 	ldbu	r4,0(r2)
  80c8d4:	20c0010c 	andi	r3,r4,4
  80c8d8:	183ff21e 	bne	r3,zero,80c8a4 <_strtoul_r+0xc4>
  80c8dc:	208000cc 	andi	r2,r4,3
  80c8e0:	10000626 	beq	r2,zero,80c8fc <_strtoul_r+0x11c>
  80c8e4:	2080004c 	andi	r2,r4,1
  80c8e8:	1005003a 	cmpeq	r2,r2,zero
  80c8ec:	1000251e 	bne	r2,zero,80c984 <_strtoul_r+0x1a4>
  80c8f0:	00800dc4 	movi	r2,55
  80c8f4:	8887c83a 	sub	r3,r17,r2
  80c8f8:	1cbfec16 	blt	r3,r18,80c8ac <_strtoul_r+0xcc>
  80c8fc:	3000400e 	bge	r6,zero,80ca00 <_strtoul_r+0x220>
  80c900:	00800884 	movi	r2,34
  80c904:	017fffc4 	movi	r5,-1
  80c908:	b8800015 	stw	r2,0(r23)
  80c90c:	b0000226 	beq	r22,zero,80c918 <_strtoul_r+0x138>
  80c910:	30001f1e 	bne	r6,zero,80c990 <_strtoul_r+0x1b0>
  80c914:	b5400015 	stw	r21,0(r22)
  80c918:	2805883a 	mov	r2,r5
  80c91c:	dfc00917 	ldw	ra,36(sp)
  80c920:	df000817 	ldw	fp,32(sp)
  80c924:	ddc00717 	ldw	r23,28(sp)
  80c928:	dd800617 	ldw	r22,24(sp)
  80c92c:	dd400517 	ldw	r21,20(sp)
  80c930:	dd000417 	ldw	r20,16(sp)
  80c934:	dcc00317 	ldw	r19,12(sp)
  80c938:	dc800217 	ldw	r18,8(sp)
  80c93c:	dc400117 	ldw	r17,4(sp)
  80c940:	dc000017 	ldw	r16,0(sp)
  80c944:	dec00a04 	addi	sp,sp,40
  80c948:	f800283a 	ret
  80c94c:	00800c04 	movi	r2,48
  80c950:	88801826 	beq	r17,r2,80c9b4 <_strtoul_r+0x1d4>
  80c954:	183fc426 	beq	r3,zero,80c868 <_strtoul_r+0x88>
  80c958:	00800c04 	movi	r2,48
  80c95c:	88802226 	beq	r17,r2,80c9e8 <_strtoul_r+0x208>
  80c960:	04800284 	movi	r18,10
  80c964:	900f883a 	mov	r7,r18
  80c968:	04c666b4 	movhi	r19,6554
  80c96c:	9ce66644 	addi	r19,r19,-26215
  80c970:	02000144 	movi	r8,5
  80c974:	003fc506 	br	80c88c <_strtoul_r+0xac>
  80c978:	40ffcf0e 	bge	r8,r3,80c8b8 <_strtoul_r+0xd8>
  80c97c:	01bfffc4 	movi	r6,-1
  80c980:	003fd006 	br	80c8c4 <_strtoul_r+0xe4>
  80c984:	008015c4 	movi	r2,87
  80c988:	8887c83a 	sub	r3,r17,r2
  80c98c:	003fda06 	br	80c8f8 <_strtoul_r+0x118>
  80c990:	857fffc4 	addi	r21,r16,-1
  80c994:	003fdf06 	br	80c914 <_strtoul_r+0x134>
  80c998:	84400007 	ldb	r17,0(r16)
  80c99c:	84000044 	addi	r16,r16,1
  80c9a0:	003fac06 	br	80c854 <_strtoul_r+0x74>
  80c9a4:	84400007 	ldb	r17,0(r16)
  80c9a8:	07000044 	movi	fp,1
  80c9ac:	84000044 	addi	r16,r16,1
  80c9b0:	003fa906 	br	80c858 <_strtoul_r+0x78>
  80c9b4:	81000007 	ldb	r4,0(r16)
  80c9b8:	00801e04 	movi	r2,120
  80c9bc:	20800226 	beq	r4,r2,80c9c8 <_strtoul_r+0x1e8>
  80c9c0:	00801604 	movi	r2,88
  80c9c4:	20bfe31e 	bne	r4,r2,80c954 <_strtoul_r+0x174>
  80c9c8:	84400047 	ldb	r17,1(r16)
  80c9cc:	04800404 	movi	r18,16
  80c9d0:	84000084 	addi	r16,r16,2
  80c9d4:	900f883a 	mov	r7,r18
  80c9d8:	04c40034 	movhi	r19,4096
  80c9dc:	9cffffc4 	addi	r19,r19,-1
  80c9e0:	020003c4 	movi	r8,15
  80c9e4:	003fa906 	br	80c88c <_strtoul_r+0xac>
  80c9e8:	04800204 	movi	r18,8
  80c9ec:	900f883a 	mov	r7,r18
  80c9f0:	04c80034 	movhi	r19,8192
  80c9f4:	9cffffc4 	addi	r19,r19,-1
  80c9f8:	020001c4 	movi	r8,7
  80c9fc:	003fa306 	br	80c88c <_strtoul_r+0xac>
  80ca00:	e005003a 	cmpeq	r2,fp,zero
  80ca04:	103fc11e 	bne	r2,zero,80c90c <_strtoul_r+0x12c>
  80ca08:	014bc83a 	sub	r5,zero,r5
  80ca0c:	003fbf06 	br	80c90c <_strtoul_r+0x12c>

0080ca10 <strtoul>:
  80ca10:	00802074 	movhi	r2,129
  80ca14:	109c4404 	addi	r2,r2,28944
  80ca18:	2013883a 	mov	r9,r4
  80ca1c:	11000017 	ldw	r4,0(r2)
  80ca20:	2805883a 	mov	r2,r5
  80ca24:	300f883a 	mov	r7,r6
  80ca28:	480b883a 	mov	r5,r9
  80ca2c:	100d883a 	mov	r6,r2
  80ca30:	080c7e01 	jmpi	80c7e0 <_strtoul_r>

0080ca34 <_strtoull_r>:
  80ca34:	defff104 	addi	sp,sp,-60
  80ca38:	00802074 	movhi	r2,129
  80ca3c:	109c4804 	addi	r2,r2,28960
  80ca40:	df000d15 	stw	fp,52(sp)
  80ca44:	17000017 	ldw	fp,0(r2)
  80ca48:	ddc00c15 	stw	r23,48(sp)
  80ca4c:	dcc00815 	stw	r19,32(sp)
  80ca50:	dfc00e15 	stw	ra,56(sp)
  80ca54:	dd800b15 	stw	r22,44(sp)
  80ca58:	dd400a15 	stw	r21,40(sp)
  80ca5c:	dd000915 	stw	r20,36(sp)
  80ca60:	dc800715 	stw	r18,28(sp)
  80ca64:	dc400615 	stw	r17,24(sp)
  80ca68:	dc000515 	stw	r16,20(sp)
  80ca6c:	d9400215 	stw	r5,8(sp)
  80ca70:	d9000115 	stw	r4,4(sp)
  80ca74:	d9800315 	stw	r6,12(sp)
  80ca78:	382f883a 	mov	r23,r7
  80ca7c:	2827883a 	mov	r19,r5
  80ca80:	9d000007 	ldb	r20,0(r19)
  80ca84:	9cc00044 	addi	r19,r19,1
  80ca88:	e507883a 	add	r3,fp,r20
  80ca8c:	18800003 	ldbu	r2,0(r3)
  80ca90:	1080020c 	andi	r2,r2,8
  80ca94:	103ffa1e 	bne	r2,zero,80ca80 <_strtoull_r+0x4c>
  80ca98:	00800b44 	movi	r2,45
  80ca9c:	a0807a26 	beq	r20,r2,80cc88 <_strtoull_r+0x254>
  80caa0:	00800ac4 	movi	r2,43
  80caa4:	a0807526 	beq	r20,r2,80cc7c <_strtoull_r+0x248>
  80caa8:	d8000015 	stw	zero,0(sp)
  80caac:	b807003a 	cmpeq	r3,r23,zero
  80cab0:	18005a1e 	bne	r3,zero,80cc1c <_strtoull_r+0x1e8>
  80cab4:	00800404 	movi	r2,16
  80cab8:	b8805826 	beq	r23,r2,80cc1c <_strtoull_r+0x1e8>
  80cabc:	b82dd7fa 	srai	r22,r23,31
  80cac0:	043fffc4 	movi	r16,-1
  80cac4:	8009883a 	mov	r4,r16
  80cac8:	800b883a 	mov	r5,r16
  80cacc:	b80d883a 	mov	r6,r23
  80cad0:	b00f883a 	mov	r7,r22
  80cad4:	080dd300 	call	80dd30 <__udivdi3>
  80cad8:	8009883a 	mov	r4,r16
  80cadc:	800b883a 	mov	r5,r16
  80cae0:	b80d883a 	mov	r6,r23
  80cae4:	b00f883a 	mov	r7,r22
  80cae8:	1023883a 	mov	r17,r2
  80caec:	1825883a 	mov	r18,r3
  80caf0:	080e30c0 	call	80e30c <__umoddi3>
  80caf4:	b82b883a 	mov	r21,r23
  80caf8:	1019883a 	mov	r12,r2
  80cafc:	e505883a 	add	r2,fp,r20
  80cb00:	11000003 	ldbu	r4,0(r2)
  80cb04:	0015883a 	mov	r10,zero
  80cb08:	0017883a 	mov	r11,zero
  80cb0c:	20c0010c 	andi	r3,r4,4
  80cb10:	000d883a 	mov	r6,zero
  80cb14:	18001c26 	beq	r3,zero,80cb88 <_strtoull_r+0x154>
  80cb18:	a43ff404 	addi	r16,r20,-48
  80cb1c:	85c0220e 	bge	r16,r23,80cba8 <_strtoull_r+0x174>
  80cb20:	30003c16 	blt	r6,zero,80cc14 <_strtoull_r+0x1e0>
  80cb24:	92c03b36 	bltu	r18,r11,80cc14 <_strtoull_r+0x1e0>
  80cb28:	5c803926 	beq	r11,r18,80cc10 <_strtoull_r+0x1dc>
  80cb2c:	54404c26 	beq	r10,r17,80cc60 <_strtoull_r+0x22c>
  80cb30:	580b883a 	mov	r5,r11
  80cb34:	5009883a 	mov	r4,r10
  80cb38:	a80d883a 	mov	r6,r21
  80cb3c:	b00f883a 	mov	r7,r22
  80cb40:	db000415 	stw	r12,16(sp)
  80cb44:	080dbf40 	call	80dbf4 <__muldi3>
  80cb48:	8013d7fa 	srai	r9,r16,31
  80cb4c:	100d883a 	mov	r6,r2
  80cb50:	1405883a 	add	r2,r2,r16
  80cb54:	118d803a 	cmpltu	r6,r2,r6
  80cb58:	1a47883a 	add	r3,r3,r9
  80cb5c:	db000417 	ldw	r12,16(sp)
  80cb60:	30cd883a 	add	r6,r6,r3
  80cb64:	3017883a 	mov	r11,r6
  80cb68:	1015883a 	mov	r10,r2
  80cb6c:	01800044 	movi	r6,1
  80cb70:	9d000007 	ldb	r20,0(r19)
  80cb74:	9cc00044 	addi	r19,r19,1
  80cb78:	e505883a 	add	r2,fp,r20
  80cb7c:	11000003 	ldbu	r4,0(r2)
  80cb80:	20c0010c 	andi	r3,r4,4
  80cb84:	183fe41e 	bne	r3,zero,80cb18 <_strtoull_r+0xe4>
  80cb88:	208000cc 	andi	r2,r4,3
  80cb8c:	10000626 	beq	r2,zero,80cba8 <_strtoull_r+0x174>
  80cb90:	2080004c 	andi	r2,r4,1
  80cb94:	1005003a 	cmpeq	r2,r2,zero
  80cb98:	10002e1e 	bne	r2,zero,80cc54 <_strtoull_r+0x220>
  80cb9c:	02000dc4 	movi	r8,55
  80cba0:	a221c83a 	sub	r16,r20,r8
  80cba4:	85ffde16 	blt	r16,r23,80cb20 <_strtoull_r+0xec>
  80cba8:	3000530e 	bge	r6,zero,80ccf8 <_strtoull_r+0x2c4>
  80cbac:	d8c00117 	ldw	r3,4(sp)
  80cbb0:	02bfffc4 	movi	r10,-1
  80cbb4:	00800884 	movi	r2,34
  80cbb8:	5017883a 	mov	r11,r10
  80cbbc:	18800015 	stw	r2,0(r3)
  80cbc0:	d8800317 	ldw	r2,12(sp)
  80cbc4:	10000426 	beq	r2,zero,80cbd8 <_strtoull_r+0x1a4>
  80cbc8:	3000291e 	bne	r6,zero,80cc70 <_strtoull_r+0x23c>
  80cbcc:	d8800217 	ldw	r2,8(sp)
  80cbd0:	d8c00317 	ldw	r3,12(sp)
  80cbd4:	18800015 	stw	r2,0(r3)
  80cbd8:	5005883a 	mov	r2,r10
  80cbdc:	5807883a 	mov	r3,r11
  80cbe0:	dfc00e17 	ldw	ra,56(sp)
  80cbe4:	df000d17 	ldw	fp,52(sp)
  80cbe8:	ddc00c17 	ldw	r23,48(sp)
  80cbec:	dd800b17 	ldw	r22,44(sp)
  80cbf0:	dd400a17 	ldw	r21,40(sp)
  80cbf4:	dd000917 	ldw	r20,36(sp)
  80cbf8:	dcc00817 	ldw	r19,32(sp)
  80cbfc:	dc800717 	ldw	r18,28(sp)
  80cc00:	dc400617 	ldw	r17,24(sp)
  80cc04:	dc000517 	ldw	r16,20(sp)
  80cc08:	dec00f04 	addi	sp,sp,60
  80cc0c:	f800283a 	ret
  80cc10:	8abfc62e 	bgeu	r17,r10,80cb2c <_strtoull_r+0xf8>
  80cc14:	01bfffc4 	movi	r6,-1
  80cc18:	003fd506 	br	80cb70 <_strtoull_r+0x13c>
  80cc1c:	00800c04 	movi	r2,48
  80cc20:	a0801e26 	beq	r20,r2,80cc9c <_strtoull_r+0x268>
  80cc24:	183fa526 	beq	r3,zero,80cabc <_strtoull_r+0x88>
  80cc28:	00800c04 	movi	r2,48
  80cc2c:	a0802a26 	beq	r20,r2,80ccd8 <_strtoull_r+0x2a4>
  80cc30:	05c00284 	movi	r23,10
  80cc34:	b82b883a 	mov	r21,r23
  80cc38:	046666b4 	movhi	r17,39322
  80cc3c:	8c666644 	addi	r17,r17,-26215
  80cc40:	002d883a 	mov	r22,zero
  80cc44:	048666b4 	movhi	r18,6554
  80cc48:	94a66644 	addi	r18,r18,-26215
  80cc4c:	03000144 	movi	r12,5
  80cc50:	003faa06 	br	80cafc <_strtoull_r+0xc8>
  80cc54:	020015c4 	movi	r8,87
  80cc58:	a221c83a 	sub	r16,r20,r8
  80cc5c:	003fd106 	br	80cba4 <_strtoull_r+0x170>
  80cc60:	5cbfb31e 	bne	r11,r18,80cb30 <_strtoull_r+0xfc>
  80cc64:	643fb20e 	bge	r12,r16,80cb30 <_strtoull_r+0xfc>
  80cc68:	01bfffc4 	movi	r6,-1
  80cc6c:	003fc006 	br	80cb70 <_strtoull_r+0x13c>
  80cc70:	9cffffc4 	addi	r19,r19,-1
  80cc74:	dcc00215 	stw	r19,8(sp)
  80cc78:	003fd406 	br	80cbcc <_strtoull_r+0x198>
  80cc7c:	9d000007 	ldb	r20,0(r19)
  80cc80:	9cc00044 	addi	r19,r19,1
  80cc84:	003f8806 	br	80caa8 <_strtoull_r+0x74>
  80cc88:	9d000007 	ldb	r20,0(r19)
  80cc8c:	00800044 	movi	r2,1
  80cc90:	9cc00044 	addi	r19,r19,1
  80cc94:	d8800015 	stw	r2,0(sp)
  80cc98:	003f8406 	br	80caac <_strtoull_r+0x78>
  80cc9c:	99000007 	ldb	r4,0(r19)
  80cca0:	00801e04 	movi	r2,120
  80cca4:	20800226 	beq	r4,r2,80ccb0 <_strtoull_r+0x27c>
  80cca8:	00801604 	movi	r2,88
  80ccac:	20bfdd1e 	bne	r4,r2,80cc24 <_strtoull_r+0x1f0>
  80ccb0:	9d000047 	ldb	r20,1(r19)
  80ccb4:	05c00404 	movi	r23,16
  80ccb8:	b82b883a 	mov	r21,r23
  80ccbc:	047fffc4 	movi	r17,-1
  80ccc0:	9cc00084 	addi	r19,r19,2
  80ccc4:	002d883a 	mov	r22,zero
  80ccc8:	04840034 	movhi	r18,4096
  80cccc:	94bfffc4 	addi	r18,r18,-1
  80ccd0:	030003c4 	movi	r12,15
  80ccd4:	003f8906 	br	80cafc <_strtoull_r+0xc8>
  80ccd8:	05c00204 	movi	r23,8
  80ccdc:	b82b883a 	mov	r21,r23
  80cce0:	047fffc4 	movi	r17,-1
  80cce4:	002d883a 	mov	r22,zero
  80cce8:	04880034 	movhi	r18,8192
  80ccec:	94bfffc4 	addi	r18,r18,-1
  80ccf0:	030001c4 	movi	r12,7
  80ccf4:	003f8106 	br	80cafc <_strtoull_r+0xc8>
  80ccf8:	d8c00017 	ldw	r3,0(sp)
  80ccfc:	1805003a 	cmpeq	r2,r3,zero
  80cd00:	103faf1e 	bne	r2,zero,80cbc0 <_strtoull_r+0x18c>
  80cd04:	0009883a 	mov	r4,zero
  80cd08:	2285c83a 	sub	r2,r4,r10
  80cd0c:	02c7c83a 	sub	r3,zero,r11
  80cd10:	2089803a 	cmpltu	r4,r4,r2
  80cd14:	1909c83a 	sub	r4,r3,r4
  80cd18:	1015883a 	mov	r10,r2
  80cd1c:	2017883a 	mov	r11,r4
  80cd20:	003fa706 	br	80cbc0 <_strtoull_r+0x18c>

0080cd24 <__submore>:
  80cd24:	defffa04 	addi	sp,sp,-24
  80cd28:	28c00c17 	ldw	r3,48(r5)
  80cd2c:	dc800215 	stw	r18,8(sp)
  80cd30:	2825883a 	mov	r18,r5
  80cd34:	dc000015 	stw	r16,0(sp)
  80cd38:	90801004 	addi	r2,r18,64
  80cd3c:	04010004 	movi	r16,1024
  80cd40:	dfc00515 	stw	ra,20(sp)
  80cd44:	dd000415 	stw	r20,16(sp)
  80cd48:	dcc00315 	stw	r19,12(sp)
  80cd4c:	dc400115 	stw	r17,4(sp)
  80cd50:	800b883a 	mov	r5,r16
  80cd54:	18801b26 	beq	r3,r2,80cdc4 <__submore+0xa0>
  80cd58:	94400d17 	ldw	r17,52(r18)
  80cd5c:	180b883a 	mov	r5,r3
  80cd60:	8c69883a 	add	r20,r17,r17
  80cd64:	a00d883a 	mov	r6,r20
  80cd68:	08036fc0 	call	8036fc <_realloc_r>
  80cd6c:	1467883a 	add	r19,r2,r17
  80cd70:	1021883a 	mov	r16,r2
  80cd74:	880d883a 	mov	r6,r17
  80cd78:	9809883a 	mov	r4,r19
  80cd7c:	100b883a 	mov	r5,r2
  80cd80:	10000e26 	beq	r2,zero,80cdbc <__submore+0x98>
  80cd84:	08033400 	call	803340 <memcpy>
  80cd88:	000d883a 	mov	r6,zero
  80cd8c:	95000d15 	stw	r20,52(r18)
  80cd90:	94c00015 	stw	r19,0(r18)
  80cd94:	94000c15 	stw	r16,48(r18)
  80cd98:	3005883a 	mov	r2,r6
  80cd9c:	dfc00517 	ldw	ra,20(sp)
  80cda0:	dd000417 	ldw	r20,16(sp)
  80cda4:	dcc00317 	ldw	r19,12(sp)
  80cda8:	dc800217 	ldw	r18,8(sp)
  80cdac:	dc400117 	ldw	r17,4(sp)
  80cdb0:	dc000017 	ldw	r16,0(sp)
  80cdb4:	dec00604 	addi	sp,sp,24
  80cdb8:	f800283a 	ret
  80cdbc:	01bfffc4 	movi	r6,-1
  80cdc0:	003ff506 	br	80cd98 <__submore+0x74>
  80cdc4:	0802b1c0 	call	802b1c <_malloc_r>
  80cdc8:	1009883a 	mov	r4,r2
  80cdcc:	1140ff44 	addi	r5,r2,1021
  80cdd0:	000d883a 	mov	r6,zero
  80cdd4:	103ff926 	beq	r2,zero,80cdbc <__submore+0x98>
  80cdd8:	90801083 	ldbu	r2,66(r18)
  80cddc:	94000d15 	stw	r16,52(r18)
  80cde0:	91000c15 	stw	r4,48(r18)
  80cde4:	28800085 	stb	r2,2(r5)
  80cde8:	90c01043 	ldbu	r3,65(r18)
  80cdec:	28c00045 	stb	r3,1(r5)
  80cdf0:	90801003 	ldbu	r2,64(r18)
  80cdf4:	2080ff45 	stb	r2,1021(r4)
  80cdf8:	91400015 	stw	r5,0(r18)
  80cdfc:	003fe606 	br	80cd98 <__submore+0x74>

0080ce00 <_ungetc_r>:
  80ce00:	defffc04 	addi	sp,sp,-16
  80ce04:	00bfffc4 	movi	r2,-1
  80ce08:	dc400215 	stw	r17,8(sp)
  80ce0c:	dc000115 	stw	r16,4(sp)
  80ce10:	dfc00315 	stw	ra,12(sp)
  80ce14:	2821883a 	mov	r16,r5
  80ce18:	2023883a 	mov	r17,r4
  80ce1c:	28801826 	beq	r5,r2,80ce80 <_ungetc_r+0x80>
  80ce20:	20000226 	beq	r4,zero,80ce2c <_ungetc_r+0x2c>
  80ce24:	20800e17 	ldw	r2,56(r4)
  80ce28:	10001b26 	beq	r2,zero,80ce98 <_ungetc_r+0x98>
  80ce2c:	3100030b 	ldhu	r4,12(r6)
  80ce30:	00bff7c4 	movi	r2,-33
  80ce34:	2084703a 	and	r2,r4,r2
  80ce38:	117fffcc 	andi	r5,r2,65535
  80ce3c:	28c0010c 	andi	r3,r5,4
  80ce40:	1009883a 	mov	r4,r2
  80ce44:	3080030d 	sth	r2,12(r6)
  80ce48:	18003526 	beq	r3,zero,80cf20 <_ungetc_r+0x120>
  80ce4c:	30800c17 	ldw	r2,48(r6)
  80ce50:	84003fcc 	andi	r16,r16,255
  80ce54:	10001426 	beq	r2,zero,80cea8 <_ungetc_r+0xa8>
  80ce58:	30c00117 	ldw	r3,4(r6)
  80ce5c:	30800d17 	ldw	r2,52(r6)
  80ce60:	1880380e 	bge	r3,r2,80cf44 <_ungetc_r+0x144>
  80ce64:	30c00017 	ldw	r3,0(r6)
  80ce68:	19ffffc4 	addi	r7,r3,-1
  80ce6c:	31c00015 	stw	r7,0(r6)
  80ce70:	1c3fffc5 	stb	r16,-1(r3)
  80ce74:	30800117 	ldw	r2,4(r6)
  80ce78:	10800044 	addi	r2,r2,1
  80ce7c:	30800115 	stw	r2,4(r6)
  80ce80:	8005883a 	mov	r2,r16
  80ce84:	dfc00317 	ldw	ra,12(sp)
  80ce88:	dc400217 	ldw	r17,8(sp)
  80ce8c:	dc000117 	ldw	r16,4(sp)
  80ce90:	dec00404 	addi	sp,sp,16
  80ce94:	f800283a 	ret
  80ce98:	d9800015 	stw	r6,0(sp)
  80ce9c:	08016000 	call	801600 <__sinit>
  80cea0:	d9800017 	ldw	r6,0(sp)
  80cea4:	003fe106 	br	80ce2c <_ungetc_r+0x2c>
  80cea8:	30800417 	ldw	r2,16(r6)
  80ceac:	10002326 	beq	r2,zero,80cf3c <_ungetc_r+0x13c>
  80ceb0:	31c00017 	ldw	r7,0(r6)
  80ceb4:	11c0022e 	bgeu	r2,r7,80cec0 <_ungetc_r+0xc0>
  80ceb8:	38bfffc3 	ldbu	r2,-1(r7)
  80cebc:	80801226 	beq	r16,r2,80cf08 <_ungetc_r+0x108>
  80cec0:	30c00117 	ldw	r3,4(r6)
  80cec4:	00800044 	movi	r2,1
  80cec8:	30800115 	stw	r2,4(r6)
  80cecc:	008000c4 	movi	r2,3
  80ced0:	31001004 	addi	r4,r6,64
  80ced4:	31401084 	addi	r5,r6,66
  80ced8:	30800d15 	stw	r2,52(r6)
  80cedc:	8005883a 	mov	r2,r16
  80cee0:	30c00f15 	stw	r3,60(r6)
  80cee4:	31c00e15 	stw	r7,56(r6)
  80cee8:	31000c15 	stw	r4,48(r6)
  80ceec:	31400015 	stw	r5,0(r6)
  80cef0:	34001085 	stb	r16,66(r6)
  80cef4:	dfc00317 	ldw	ra,12(sp)
  80cef8:	dc400217 	ldw	r17,8(sp)
  80cefc:	dc000117 	ldw	r16,4(sp)
  80cf00:	dec00404 	addi	sp,sp,16
  80cf04:	f800283a 	ret
  80cf08:	30800117 	ldw	r2,4(r6)
  80cf0c:	39ffffc4 	addi	r7,r7,-1
  80cf10:	31c00015 	stw	r7,0(r6)
  80cf14:	10800044 	addi	r2,r2,1
  80cf18:	30800115 	stw	r2,4(r6)
  80cf1c:	003fd806 	br	80ce80 <_ungetc_r+0x80>
  80cf20:	2880040c 	andi	r2,r5,16
  80cf24:	10000d26 	beq	r2,zero,80cf5c <_ungetc_r+0x15c>
  80cf28:	2880020c 	andi	r2,r5,8
  80cf2c:	10000d1e 	bne	r2,zero,80cf64 <_ungetc_r+0x164>
  80cf30:	20800114 	ori	r2,r4,4
  80cf34:	3080030d 	sth	r2,12(r6)
  80cf38:	003fc406 	br	80ce4c <_ungetc_r+0x4c>
  80cf3c:	31c00017 	ldw	r7,0(r6)
  80cf40:	003fdf06 	br	80cec0 <_ungetc_r+0xc0>
  80cf44:	300b883a 	mov	r5,r6
  80cf48:	8809883a 	mov	r4,r17
  80cf4c:	d9800015 	stw	r6,0(sp)
  80cf50:	080cd240 	call	80cd24 <__submore>
  80cf54:	d9800017 	ldw	r6,0(sp)
  80cf58:	103fc226 	beq	r2,zero,80ce64 <_ungetc_r+0x64>
  80cf5c:	043fffc4 	movi	r16,-1
  80cf60:	003fc706 	br	80ce80 <_ungetc_r+0x80>
  80cf64:	300b883a 	mov	r5,r6
  80cf68:	8809883a 	mov	r4,r17
  80cf6c:	d9800015 	stw	r6,0(sp)
  80cf70:	08012400 	call	801240 <_fflush_r>
  80cf74:	d9800017 	ldw	r6,0(sp)
  80cf78:	103ff81e 	bne	r2,zero,80cf5c <_ungetc_r+0x15c>
  80cf7c:	3100030b 	ldhu	r4,12(r6)
  80cf80:	00bffdc4 	movi	r2,-9
  80cf84:	30000215 	stw	zero,8(r6)
  80cf88:	2084703a 	and	r2,r4,r2
  80cf8c:	1009883a 	mov	r4,r2
  80cf90:	3080030d 	sth	r2,12(r6)
  80cf94:	30000615 	stw	zero,24(r6)
  80cf98:	003fe506 	br	80cf30 <_ungetc_r+0x130>

0080cf9c <ungetc>:
  80cf9c:	01802074 	movhi	r6,129
  80cfa0:	319c4404 	addi	r6,r6,28944
  80cfa4:	2007883a 	mov	r3,r4
  80cfa8:	31000017 	ldw	r4,0(r6)
  80cfac:	280d883a 	mov	r6,r5
  80cfb0:	180b883a 	mov	r5,r3
  80cfb4:	080ce001 	jmpi	80ce00 <_ungetc_r>

0080cfb8 <_calloc_r>:
  80cfb8:	298b383a 	mul	r5,r5,r6
  80cfbc:	defffe04 	addi	sp,sp,-8
  80cfc0:	dc000015 	stw	r16,0(sp)
  80cfc4:	dfc00115 	stw	ra,4(sp)
  80cfc8:	0802b1c0 	call	802b1c <_malloc_r>
  80cfcc:	1021883a 	mov	r16,r2
  80cfd0:	01c00904 	movi	r7,36
  80cfd4:	10000d26 	beq	r2,zero,80d00c <_calloc_r+0x54>
  80cfd8:	10ffff17 	ldw	r3,-4(r2)
  80cfdc:	1009883a 	mov	r4,r2
  80cfe0:	00bfff04 	movi	r2,-4
  80cfe4:	1886703a 	and	r3,r3,r2
  80cfe8:	1887883a 	add	r3,r3,r2
  80cfec:	180d883a 	mov	r6,r3
  80cff0:	000b883a 	mov	r5,zero
  80cff4:	38c01736 	bltu	r7,r3,80d054 <_calloc_r+0x9c>
  80cff8:	008004c4 	movi	r2,19
  80cffc:	10c00836 	bltu	r2,r3,80d020 <_calloc_r+0x68>
  80d000:	20000215 	stw	zero,8(r4)
  80d004:	20000015 	stw	zero,0(r4)
  80d008:	20000115 	stw	zero,4(r4)
  80d00c:	8005883a 	mov	r2,r16
  80d010:	dfc00117 	ldw	ra,4(sp)
  80d014:	dc000017 	ldw	r16,0(sp)
  80d018:	dec00204 	addi	sp,sp,8
  80d01c:	f800283a 	ret
  80d020:	008006c4 	movi	r2,27
  80d024:	80000015 	stw	zero,0(r16)
  80d028:	80000115 	stw	zero,4(r16)
  80d02c:	81000204 	addi	r4,r16,8
  80d030:	10fff32e 	bgeu	r2,r3,80d000 <_calloc_r+0x48>
  80d034:	80000215 	stw	zero,8(r16)
  80d038:	80000315 	stw	zero,12(r16)
  80d03c:	81000404 	addi	r4,r16,16
  80d040:	19ffef1e 	bne	r3,r7,80d000 <_calloc_r+0x48>
  80d044:	81000604 	addi	r4,r16,24
  80d048:	80000415 	stw	zero,16(r16)
  80d04c:	80000515 	stw	zero,20(r16)
  80d050:	003feb06 	br	80d000 <_calloc_r+0x48>
  80d054:	08034c00 	call	8034c0 <memset>
  80d058:	8005883a 	mov	r2,r16
  80d05c:	dfc00117 	ldw	ra,4(sp)
  80d060:	dc000017 	ldw	r16,0(sp)
  80d064:	dec00204 	addi	sp,sp,8
  80d068:	f800283a 	ret

0080d06c <htinit>:
  80d06c:	28800003 	ldbu	r2,0(r5)
  80d070:	10000626 	beq	r2,zero,80d08c <htinit+0x20>
  80d074:	1105883a 	add	r2,r2,r4
  80d078:	11800005 	stb	r6,0(r2)
  80d07c:	28800043 	ldbu	r2,1(r5)
  80d080:	31800044 	addi	r6,r6,1
  80d084:	29400044 	addi	r5,r5,1
  80d088:	103ffa1e 	bne	r2,zero,80d074 <htinit+0x8>
  80d08c:	f800283a 	ret

0080d090 <__hexdig_init>:
  80d090:	defffd04 	addi	sp,sp,-12
  80d094:	dc400015 	stw	r17,0(sp)
  80d098:	044020b4 	movhi	r17,130
  80d09c:	8c63c304 	addi	r17,r17,-28916
  80d0a0:	dcc00115 	stw	r19,4(sp)
  80d0a4:	8809883a 	mov	r4,r17
  80d0a8:	04c00684 	movi	r19,26
  80d0ac:	01402074 	movhi	r5,129
  80d0b0:	2954c204 	addi	r5,r5,21256
  80d0b4:	01800404 	movi	r6,16
  80d0b8:	dfc00215 	stw	ra,8(sp)
  80d0bc:	080d06c0 	call	80d06c <htinit>
  80d0c0:	980d883a 	mov	r6,r19
  80d0c4:	8809883a 	mov	r4,r17
  80d0c8:	01402074 	movhi	r5,129
  80d0cc:	2954c504 	addi	r5,r5,21268
  80d0d0:	080d06c0 	call	80d06c <htinit>
  80d0d4:	8809883a 	mov	r4,r17
  80d0d8:	980d883a 	mov	r6,r19
  80d0dc:	01402074 	movhi	r5,129
  80d0e0:	2954c704 	addi	r5,r5,21276
  80d0e4:	dfc00217 	ldw	ra,8(sp)
  80d0e8:	dcc00117 	ldw	r19,4(sp)
  80d0ec:	dc400017 	ldw	r17,0(sp)
  80d0f0:	dec00304 	addi	sp,sp,12
  80d0f4:	080d06c1 	jmpi	80d06c <htinit>

0080d0f8 <rshift>:
  80d0f8:	2807d17a 	srai	r3,r5,5
  80d0fc:	20800417 	ldw	r2,16(r4)
  80d100:	22400504 	addi	r9,r4,20
  80d104:	480f883a 	mov	r7,r9
  80d108:	1880190e 	bge	r3,r2,80d170 <rshift+0x78>
  80d10c:	1085883a 	add	r2,r2,r2
  80d110:	18c7883a 	add	r3,r3,r3
  80d114:	1085883a 	add	r2,r2,r2
  80d118:	18c7883a 	add	r3,r3,r3
  80d11c:	294007cc 	andi	r5,r5,31
  80d120:	4891883a 	add	r8,r9,r2
  80d124:	48cd883a 	add	r6,r9,r3
  80d128:	28001726 	beq	r5,zero,80d188 <rshift+0x90>
  80d12c:	30c00017 	ldw	r3,0(r6)
  80d130:	00800804 	movi	r2,32
  80d134:	31800104 	addi	r6,r6,4
  80d138:	1155c83a 	sub	r10,r2,r5
  80d13c:	1946d83a 	srl	r3,r3,r5
  80d140:	3200092e 	bgeu	r6,r8,80d168 <rshift+0x70>
  80d144:	30800017 	ldw	r2,0(r6)
  80d148:	1284983a 	sll	r2,r2,r10
  80d14c:	10c4b03a 	or	r2,r2,r3
  80d150:	38800015 	stw	r2,0(r7)
  80d154:	30c00017 	ldw	r3,0(r6)
  80d158:	31800104 	addi	r6,r6,4
  80d15c:	39c00104 	addi	r7,r7,4
  80d160:	1946d83a 	srl	r3,r3,r5
  80d164:	323ff736 	bltu	r6,r8,80d144 <rshift+0x4c>
  80d168:	38c00015 	stw	r3,0(r7)
  80d16c:	18000c1e 	bne	r3,zero,80d1a0 <rshift+0xa8>
  80d170:	3a45c83a 	sub	r2,r7,r9
  80d174:	1005d0ba 	srai	r2,r2,2
  80d178:	20800415 	stw	r2,16(r4)
  80d17c:	1000011e 	bne	r2,zero,80d184 <rshift+0x8c>
  80d180:	20000515 	stw	zero,20(r4)
  80d184:	f800283a 	ret
  80d188:	323ff92e 	bgeu	r6,r8,80d170 <rshift+0x78>
  80d18c:	30800017 	ldw	r2,0(r6)
  80d190:	31800104 	addi	r6,r6,4
  80d194:	38800015 	stw	r2,0(r7)
  80d198:	39c00104 	addi	r7,r7,4
  80d19c:	003ffa06 	br	80d188 <rshift+0x90>
  80d1a0:	39c00104 	addi	r7,r7,4
  80d1a4:	003ff206 	br	80d170 <rshift+0x78>

0080d1a8 <__gethex>:
  80d1a8:	defff304 	addi	sp,sp,-52
  80d1ac:	dd400815 	stw	r21,32(sp)
  80d1b0:	dd000715 	stw	r20,28(sp)
  80d1b4:	dcc00615 	stw	r19,24(sp)
  80d1b8:	dc400415 	stw	r17,16(sp)
  80d1bc:	dfc00c15 	stw	ra,48(sp)
  80d1c0:	df000b15 	stw	fp,44(sp)
  80d1c4:	ddc00a15 	stw	r23,40(sp)
  80d1c8:	dd800915 	stw	r22,36(sp)
  80d1cc:	dc800515 	stw	r18,20(sp)
  80d1d0:	dc000315 	stw	r16,12(sp)
  80d1d4:	044020b4 	movhi	r17,130
  80d1d8:	8c63c304 	addi	r17,r17,-28916
  80d1dc:	88800c03 	ldbu	r2,48(r17)
  80d1e0:	202b883a 	mov	r21,r4
  80d1e4:	2827883a 	mov	r19,r5
  80d1e8:	3029883a 	mov	r20,r6
  80d1ec:	d9c00115 	stw	r7,4(sp)
  80d1f0:	10006e26 	beq	r2,zero,80d3ac <__gethex+0x204>
  80d1f4:	99800017 	ldw	r6,0(r19)
  80d1f8:	00800c04 	movi	r2,48
  80d1fc:	31000083 	ldbu	r4,2(r6)
  80d200:	30c00084 	addi	r3,r6,2
  80d204:	20806f1e 	bne	r4,r2,80d3c4 <__gethex+0x21c>
  80d208:	200b883a 	mov	r5,r4
  80d20c:	3007883a 	mov	r3,r6
  80d210:	188000c3 	ldbu	r2,3(r3)
  80d214:	18c00044 	addi	r3,r3,1
  80d218:	1009883a 	mov	r4,r2
  80d21c:	117ffc26 	beq	r2,r5,80d210 <__gethex+0x68>
  80d220:	1997c83a 	sub	r11,r3,r6
  80d224:	19400084 	addi	r5,r3,2
  80d228:	2445883a 	add	r2,r4,r17
  80d22c:	10c00003 	ldbu	r3,0(r2)
  80d230:	18002d26 	beq	r3,zero,80d2e8 <__gethex+0x140>
  80d234:	29000003 	ldbu	r4,0(r5)
  80d238:	2825883a 	mov	r18,r5
  80d23c:	000d883a 	mov	r6,zero
  80d240:	0013883a 	mov	r9,zero
  80d244:	21003fcc 	andi	r4,r4,255
  80d248:	2445883a 	add	r2,r4,r17
  80d24c:	10c00003 	ldbu	r3,0(r2)
  80d250:	18000526 	beq	r3,zero,80d268 <__gethex+0xc0>
  80d254:	29400044 	addi	r5,r5,1
  80d258:	29000003 	ldbu	r4,0(r5)
  80d25c:	2445883a 	add	r2,r4,r17
  80d260:	10c00003 	ldbu	r3,0(r2)
  80d264:	183ffb1e 	bne	r3,zero,80d254 <__gethex+0xac>
  80d268:	00800b84 	movi	r2,46
  80d26c:	20805826 	beq	r4,r2,80d3d0 <__gethex+0x228>
  80d270:	30007a26 	beq	r6,zero,80d45c <__gethex+0x2b4>
  80d274:	2985c83a 	sub	r2,r5,r6
  80d278:	1085883a 	add	r2,r2,r2
  80d27c:	1085883a 	add	r2,r2,r2
  80d280:	00adc83a 	sub	r22,zero,r2
  80d284:	2821883a 	mov	r16,r5
  80d288:	80c00003 	ldbu	r3,0(r16)
  80d28c:	00801404 	movi	r2,80
  80d290:	18801e26 	beq	r3,r2,80d30c <__gethex+0x164>
  80d294:	00801c04 	movi	r2,112
  80d298:	18801c26 	beq	r3,r2,80d30c <__gethex+0x164>
  80d29c:	800d883a 	mov	r6,r16
  80d2a0:	4805003a 	cmpeq	r2,r9,zero
  80d2a4:	99800015 	stw	r6,0(r19)
  80d2a8:	1000861e 	bne	r2,zero,80d4c4 <__gethex+0x31c>
  80d2ac:	58003d26 	beq	r11,zero,80d3a4 <__gethex+0x1fc>
  80d2b0:	0025883a 	mov	r18,zero
  80d2b4:	9005883a 	mov	r2,r18
  80d2b8:	dfc00c17 	ldw	ra,48(sp)
  80d2bc:	df000b17 	ldw	fp,44(sp)
  80d2c0:	ddc00a17 	ldw	r23,40(sp)
  80d2c4:	dd800917 	ldw	r22,36(sp)
  80d2c8:	dd400817 	ldw	r21,32(sp)
  80d2cc:	dd000717 	ldw	r20,28(sp)
  80d2d0:	dcc00617 	ldw	r19,24(sp)
  80d2d4:	dc800517 	ldw	r18,20(sp)
  80d2d8:	dc400417 	ldw	r17,16(sp)
  80d2dc:	dc000317 	ldw	r16,12(sp)
  80d2e0:	dec00d04 	addi	sp,sp,52
  80d2e4:	f800283a 	ret
  80d2e8:	00800b84 	movi	r2,46
  80d2ec:	20804a26 	beq	r4,r2,80d418 <__gethex+0x270>
  80d2f0:	2821883a 	mov	r16,r5
  80d2f4:	80c00003 	ldbu	r3,0(r16)
  80d2f8:	00801404 	movi	r2,80
  80d2fc:	2825883a 	mov	r18,r5
  80d300:	02400044 	movi	r9,1
  80d304:	002d883a 	mov	r22,zero
  80d308:	18bfe21e 	bne	r3,r2,80d294 <__gethex+0xec>
  80d30c:	80c00043 	ldbu	r3,1(r16)
  80d310:	00800ac4 	movi	r2,43
  80d314:	81000044 	addi	r4,r16,1
  80d318:	18804a26 	beq	r3,r2,80d444 <__gethex+0x29c>
  80d31c:	00800b44 	movi	r2,45
  80d320:	18804c26 	beq	r3,r2,80d454 <__gethex+0x2ac>
  80d324:	0015883a 	mov	r10,zero
  80d328:	1c45883a 	add	r2,r3,r17
  80d32c:	10800003 	ldbu	r2,0(r2)
  80d330:	103fda26 	beq	r2,zero,80d29c <__gethex+0xf4>
  80d334:	02000644 	movi	r8,25
  80d338:	40bfd816 	blt	r8,r2,80d29c <__gethex+0xf4>
  80d33c:	20c00043 	ldbu	r3,1(r4)
  80d340:	11fffc04 	addi	r7,r2,-16
  80d344:	008020b4 	movhi	r2,130
  80d348:	10a3c304 	addi	r2,r2,-28916
  80d34c:	1887883a 	add	r3,r3,r2
  80d350:	18800003 	ldbu	r2,0(r3)
  80d354:	21800044 	addi	r6,r4,1
  80d358:	10000d26 	beq	r2,zero,80d390 <__gethex+0x1e8>
  80d35c:	100b883a 	mov	r5,r2
  80d360:	4080020e 	bge	r8,r2,80d36c <__gethex+0x1c4>
  80d364:	00000a06 	br	80d390 <__gethex+0x1e8>
  80d368:	41000916 	blt	r8,r4,80d390 <__gethex+0x1e8>
  80d36c:	31800044 	addi	r6,r6,1
  80d370:	30800003 	ldbu	r2,0(r6)
  80d374:	38c002a4 	muli	r3,r7,10
  80d378:	1445883a 	add	r2,r2,r17
  80d37c:	11000003 	ldbu	r4,0(r2)
  80d380:	1947883a 	add	r3,r3,r5
  80d384:	19fffc04 	addi	r7,r3,-16
  80d388:	200b883a 	mov	r5,r4
  80d38c:	203ff61e 	bne	r4,zero,80d368 <__gethex+0x1c0>
  80d390:	5005003a 	cmpeq	r2,r10,zero
  80d394:	1000011e 	bne	r2,zero,80d39c <__gethex+0x1f4>
  80d398:	01cfc83a 	sub	r7,zero,r7
  80d39c:	b1ed883a 	add	r22,r22,r7
  80d3a0:	003fbf06 	br	80d2a0 <__gethex+0xf8>
  80d3a4:	04800184 	movi	r18,6
  80d3a8:	003fc206 	br	80d2b4 <__gethex+0x10c>
  80d3ac:	080d0900 	call	80d090 <__hexdig_init>
  80d3b0:	99800017 	ldw	r6,0(r19)
  80d3b4:	00800c04 	movi	r2,48
  80d3b8:	31000083 	ldbu	r4,2(r6)
  80d3bc:	30c00084 	addi	r3,r6,2
  80d3c0:	20bf9126 	beq	r4,r2,80d208 <__gethex+0x60>
  80d3c4:	180b883a 	mov	r5,r3
  80d3c8:	0017883a 	mov	r11,zero
  80d3cc:	003f9606 	br	80d228 <__gethex+0x80>
  80d3d0:	303fa81e 	bne	r6,zero,80d274 <__gethex+0xcc>
  80d3d4:	29400044 	addi	r5,r5,1
  80d3d8:	28800003 	ldbu	r2,0(r5)
  80d3dc:	1445883a 	add	r2,r2,r17
  80d3e0:	10c00003 	ldbu	r3,0(r2)
  80d3e4:	1800ad26 	beq	r3,zero,80d69c <__gethex+0x4f4>
  80d3e8:	2809883a 	mov	r4,r5
  80d3ec:	21000044 	addi	r4,r4,1
  80d3f0:	20800003 	ldbu	r2,0(r4)
  80d3f4:	1445883a 	add	r2,r2,r17
  80d3f8:	10c00003 	ldbu	r3,0(r2)
  80d3fc:	183ffb1e 	bne	r3,zero,80d3ec <__gethex+0x244>
  80d400:	2145c83a 	sub	r2,r4,r5
  80d404:	1085883a 	add	r2,r2,r2
  80d408:	1085883a 	add	r2,r2,r2
  80d40c:	00adc83a 	sub	r22,zero,r2
  80d410:	200b883a 	mov	r5,r4
  80d414:	003f9b06 	br	80d284 <__gethex+0xdc>
  80d418:	29000043 	ldbu	r4,1(r5)
  80d41c:	008020b4 	movhi	r2,130
  80d420:	10a3c304 	addi	r2,r2,-28916
  80d424:	2c000044 	addi	r16,r5,1
  80d428:	2085883a 	add	r2,r4,r2
  80d42c:	10c00003 	ldbu	r3,0(r2)
  80d430:	18000d1e 	bne	r3,zero,80d468 <__gethex+0x2c0>
  80d434:	2825883a 	mov	r18,r5
  80d438:	02400044 	movi	r9,1
  80d43c:	002d883a 	mov	r22,zero
  80d440:	003f9106 	br	80d288 <__gethex+0xe0>
  80d444:	0015883a 	mov	r10,zero
  80d448:	21000044 	addi	r4,r4,1
  80d44c:	20c00003 	ldbu	r3,0(r4)
  80d450:	003fb506 	br	80d328 <__gethex+0x180>
  80d454:	02800044 	movi	r10,1
  80d458:	003ffb06 	br	80d448 <__gethex+0x2a0>
  80d45c:	2821883a 	mov	r16,r5
  80d460:	002d883a 	mov	r22,zero
  80d464:	003f8806 	br	80d288 <__gethex+0xe0>
  80d468:	00800c04 	movi	r2,48
  80d46c:	20800e1e 	bne	r4,r2,80d4a8 <__gethex+0x300>
  80d470:	2007883a 	mov	r3,r4
  80d474:	800b883a 	mov	r5,r16
  80d478:	29400044 	addi	r5,r5,1
  80d47c:	29000003 	ldbu	r4,0(r5)
  80d480:	20803fcc 	andi	r2,r4,255
  80d484:	10fffc26 	beq	r2,r3,80d478 <__gethex+0x2d0>
  80d488:	1445883a 	add	r2,r2,r17
  80d48c:	10c00003 	ldbu	r3,0(r2)
  80d490:	1800071e 	bne	r3,zero,80d4b0 <__gethex+0x308>
  80d494:	02c00044 	movi	r11,1
  80d498:	800d883a 	mov	r6,r16
  80d49c:	2825883a 	mov	r18,r5
  80d4a0:	5813883a 	mov	r9,r11
  80d4a4:	003f6706 	br	80d244 <__gethex+0x9c>
  80d4a8:	81000003 	ldbu	r4,0(r16)
  80d4ac:	800b883a 	mov	r5,r16
  80d4b0:	800d883a 	mov	r6,r16
  80d4b4:	2825883a 	mov	r18,r5
  80d4b8:	02c00044 	movi	r11,1
  80d4bc:	0013883a 	mov	r9,zero
  80d4c0:	003f6006 	br	80d244 <__gethex+0x9c>
  80d4c4:	8485c83a 	sub	r2,r16,r18
  80d4c8:	10bfffc4 	addi	r2,r2,-1
  80d4cc:	00c001c4 	movi	r3,7
  80d4d0:	1880700e 	bge	r3,r2,80d694 <__gethex+0x4ec>
  80d4d4:	000b883a 	mov	r5,zero
  80d4d8:	1005d07a 	srai	r2,r2,1
  80d4dc:	29400044 	addi	r5,r5,1
  80d4e0:	18bffd16 	blt	r3,r2,80d4d8 <__gethex+0x330>
  80d4e4:	a809883a 	mov	r4,r21
  80d4e8:	0809f140 	call	809f14 <_Balloc>
  80d4ec:	1027883a 	mov	r19,r2
  80d4f0:	10800504 	addi	r2,r2,20
  80d4f4:	d8800215 	stw	r2,8(sp)
  80d4f8:	9400522e 	bgeu	r18,r16,80d644 <__gethex+0x49c>
  80d4fc:	da000217 	ldw	r8,8(sp)
  80d500:	800b883a 	mov	r5,r16
  80d504:	000f883a 	mov	r7,zero
  80d508:	0009883a 	mov	r4,zero
  80d50c:	02400b84 	movi	r9,46
  80d510:	02800804 	movi	r10,32
  80d514:	297fffc4 	addi	r5,r5,-1
  80d518:	28c00003 	ldbu	r3,0(r5)
  80d51c:	1a400826 	beq	r3,r9,80d540 <__gethex+0x398>
  80d520:	380d883a 	mov	r6,r7
  80d524:	3a802726 	beq	r7,r10,80d5c4 <__gethex+0x41c>
  80d528:	39c00104 	addi	r7,r7,4
  80d52c:	1c47883a 	add	r3,r3,r17
  80d530:	18800003 	ldbu	r2,0(r3)
  80d534:	108003cc 	andi	r2,r2,15
  80d538:	1184983a 	sll	r2,r2,r6
  80d53c:	2088b03a 	or	r4,r4,r2
  80d540:	917ff436 	bltu	r18,r5,80d514 <__gethex+0x36c>
  80d544:	d8c00217 	ldw	r3,8(sp)
  80d548:	40800104 	addi	r2,r8,4
  80d54c:	41000015 	stw	r4,0(r8)
  80d550:	10c5c83a 	sub	r2,r2,r3
  80d554:	1021d0ba 	srai	r16,r2,2
  80d558:	9c000415 	stw	r16,16(r19)
  80d55c:	08099bc0 	call	8099bc <__hi0bits>
  80d560:	8006917a 	slli	r3,r16,5
  80d564:	a5c00017 	ldw	r23,0(r20)
  80d568:	1885c83a 	sub	r2,r3,r2
  80d56c:	b8801c16 	blt	r23,r2,80d5e0 <__gethex+0x438>
  80d570:	15c00a16 	blt	r2,r23,80d59c <__gethex+0x3f4>
  80d574:	0039883a 	mov	fp,zero
  80d578:	a0800217 	ldw	r2,8(r20)
  80d57c:	1580340e 	bge	r2,r22,80d650 <__gethex+0x4a8>
  80d580:	a809883a 	mov	r4,r21
  80d584:	980b883a 	mov	r5,r19
  80d588:	08099940 	call	809994 <_Bfree>
  80d58c:	d8c00d17 	ldw	r3,52(sp)
  80d590:	048028c4 	movi	r18,163
  80d594:	18000015 	stw	zero,0(r3)
  80d598:	003f4606 	br	80d2b4 <__gethex+0x10c>
  80d59c:	b8a1c83a 	sub	r16,r23,r2
  80d5a0:	980b883a 	mov	r5,r19
  80d5a4:	a809883a 	mov	r4,r21
  80d5a8:	800d883a 	mov	r6,r16
  80d5ac:	080a2d80 	call	80a2d8 <__lshift>
  80d5b0:	1027883a 	mov	r19,r2
  80d5b4:	b42dc83a 	sub	r22,r22,r16
  80d5b8:	10800504 	addi	r2,r2,20
  80d5bc:	d8800215 	stw	r2,8(sp)
  80d5c0:	003fec06 	br	80d574 <__gethex+0x3cc>
  80d5c4:	41000015 	stw	r4,0(r8)
  80d5c8:	28c00003 	ldbu	r3,0(r5)
  80d5cc:	01c00104 	movi	r7,4
  80d5d0:	000d883a 	mov	r6,zero
  80d5d4:	41d1883a 	add	r8,r8,r7
  80d5d8:	0009883a 	mov	r4,zero
  80d5dc:	003fd306 	br	80d52c <__gethex+0x384>
  80d5e0:	15e1c83a 	sub	r16,r2,r23
  80d5e4:	9809883a 	mov	r4,r19
  80d5e8:	800b883a 	mov	r5,r16
  80d5ec:	0809e8c0 	call	809e8c <__any_on>
  80d5f0:	1000061e 	bne	r2,zero,80d60c <__gethex+0x464>
  80d5f4:	0039883a 	mov	fp,zero
  80d5f8:	9809883a 	mov	r4,r19
  80d5fc:	800b883a 	mov	r5,r16
  80d600:	080d0f80 	call	80d0f8 <rshift>
  80d604:	b42d883a 	add	r22,r22,r16
  80d608:	003fdb06 	br	80d578 <__gethex+0x3d0>
  80d60c:	817fffc4 	addi	r5,r16,-1
  80d610:	2805d17a 	srai	r2,r5,5
  80d614:	d8c00217 	ldw	r3,8(sp)
  80d618:	290007cc 	andi	r4,r5,31
  80d61c:	1085883a 	add	r2,r2,r2
  80d620:	1085883a 	add	r2,r2,r2
  80d624:	01800044 	movi	r6,1
  80d628:	10c5883a 	add	r2,r2,r3
  80d62c:	3108983a 	sll	r4,r6,r4
  80d630:	10c00017 	ldw	r3,0(r2)
  80d634:	20c8703a 	and	r4,r4,r3
  80d638:	20001a1e 	bne	r4,zero,80d6a4 <__gethex+0x4fc>
  80d63c:	3039883a 	mov	fp,r6
  80d640:	003fed06 	br	80d5f8 <__gethex+0x450>
  80d644:	1011883a 	mov	r8,r2
  80d648:	0009883a 	mov	r4,zero
  80d64c:	003fbd06 	br	80d544 <__gethex+0x39c>
  80d650:	a1000117 	ldw	r4,4(r20)
  80d654:	b1001a16 	blt	r22,r4,80d6c0 <__gethex+0x518>
  80d658:	04800044 	movi	r18,1
  80d65c:	e0000826 	beq	fp,zero,80d680 <__gethex+0x4d8>
  80d660:	a1000317 	ldw	r4,12(r20)
  80d664:	00800084 	movi	r2,2
  80d668:	20809426 	beq	r4,r2,80d8bc <__gethex+0x714>
  80d66c:	008000c4 	movi	r2,3
  80d670:	20805826 	beq	r4,r2,80d7d4 <__gethex+0x62c>
  80d674:	00800044 	movi	r2,1
  80d678:	20803f26 	beq	r4,r2,80d778 <__gethex+0x5d0>
  80d67c:	94800414 	ori	r18,r18,16
  80d680:	d8800d17 	ldw	r2,52(sp)
  80d684:	d8c00117 	ldw	r3,4(sp)
  80d688:	14c00015 	stw	r19,0(r2)
  80d68c:	1d800015 	stw	r22,0(r3)
  80d690:	003f0806 	br	80d2b4 <__gethex+0x10c>
  80d694:	000b883a 	mov	r5,zero
  80d698:	003f9206 	br	80d4e4 <__gethex+0x33c>
  80d69c:	002d883a 	mov	r22,zero
  80d6a0:	003ef806 	br	80d284 <__gethex+0xdc>
  80d6a4:	3140160e 	bge	r6,r5,80d700 <__gethex+0x558>
  80d6a8:	9809883a 	mov	r4,r19
  80d6ac:	817fff84 	addi	r5,r16,-2
  80d6b0:	0809e8c0 	call	809e8c <__any_on>
  80d6b4:	10001226 	beq	r2,zero,80d700 <__gethex+0x558>
  80d6b8:	070000c4 	movi	fp,3
  80d6bc:	003fce06 	br	80d5f8 <__gethex+0x450>
  80d6c0:	25a3c83a 	sub	r17,r4,r22
  80d6c4:	8dc01016 	blt	r17,r23,80d708 <__gethex+0x560>
  80d6c8:	a0c00317 	ldw	r3,12(r20)
  80d6cc:	00800084 	movi	r2,2
  80d6d0:	18809326 	beq	r3,r2,80d920 <__gethex+0x778>
  80d6d4:	008000c4 	movi	r2,3
  80d6d8:	18808e26 	beq	r3,r2,80d914 <__gethex+0x76c>
  80d6dc:	00800044 	movi	r2,1
  80d6e0:	18807b26 	beq	r3,r2,80d8d0 <__gethex+0x728>
  80d6e4:	a809883a 	mov	r4,r21
  80d6e8:	980b883a 	mov	r5,r19
  80d6ec:	08099940 	call	809994 <_Bfree>
  80d6f0:	d8c00d17 	ldw	r3,52(sp)
  80d6f4:	04801404 	movi	r18,80
  80d6f8:	18000015 	stw	zero,0(r3)
  80d6fc:	003eed06 	br	80d2b4 <__gethex+0x10c>
  80d700:	07000084 	movi	fp,2
  80d704:	003fbc06 	br	80d5f8 <__gethex+0x450>
  80d708:	8c3fffc4 	addi	r16,r17,-1
  80d70c:	e0001426 	beq	fp,zero,80d760 <__gethex+0x5b8>
  80d710:	07000044 	movi	fp,1
  80d714:	8005d17a 	srai	r2,r16,5
  80d718:	d8c00217 	ldw	r3,8(sp)
  80d71c:	814007cc 	andi	r5,r16,31
  80d720:	1085883a 	add	r2,r2,r2
  80d724:	1085883a 	add	r2,r2,r2
  80d728:	10c5883a 	add	r2,r2,r3
  80d72c:	00c00044 	movi	r3,1
  80d730:	1946983a 	sll	r3,r3,r5
  80d734:	11000017 	ldw	r4,0(r2)
  80d738:	1906703a 	and	r3,r3,r4
  80d73c:	18000126 	beq	r3,zero,80d744 <__gethex+0x59c>
  80d740:	e7000094 	ori	fp,fp,2
  80d744:	880b883a 	mov	r5,r17
  80d748:	9809883a 	mov	r4,r19
  80d74c:	080d0f80 	call	80d0f8 <rshift>
  80d750:	a5800117 	ldw	r22,4(r20)
  80d754:	bc6fc83a 	sub	r23,r23,r17
  80d758:	04800084 	movi	r18,2
  80d75c:	003fbf06 	br	80d65c <__gethex+0x4b4>
  80d760:	043fec0e 	bge	zero,r16,80d714 <__gethex+0x56c>
  80d764:	9809883a 	mov	r4,r19
  80d768:	800b883a 	mov	r5,r16
  80d76c:	0809e8c0 	call	809e8c <__any_on>
  80d770:	1039883a 	mov	fp,r2
  80d774:	003fe706 	br	80d714 <__gethex+0x56c>
  80d778:	e080008c 	andi	r2,fp,2
  80d77c:	103fbf26 	beq	r2,zero,80d67c <__gethex+0x4d4>
  80d780:	d8c00217 	ldw	r3,8(sp)
  80d784:	18800017 	ldw	r2,0(r3)
  80d788:	e084b03a 	or	r2,fp,r2
  80d78c:	1104703a 	and	r2,r2,r4
  80d790:	103fba26 	beq	r2,zero,80d67c <__gethex+0x4d4>
  80d794:	9c000417 	ldw	r16,16(r19)
  80d798:	d8c00217 	ldw	r3,8(sp)
  80d79c:	017fffc4 	movi	r5,-1
  80d7a0:	8405883a 	add	r2,r16,r16
  80d7a4:	10b9883a 	add	fp,r2,r2
  80d7a8:	1f09883a 	add	r4,r3,fp
  80d7ac:	dc000015 	stw	r16,0(sp)
  80d7b0:	00000306 	br	80d7c0 <__gethex+0x618>
  80d7b4:	18000015 	stw	zero,0(r3)
  80d7b8:	18c00104 	addi	r3,r3,4
  80d7bc:	1900082e 	bgeu	r3,r4,80d7e0 <__gethex+0x638>
  80d7c0:	18800017 	ldw	r2,0(r3)
  80d7c4:	117ffb26 	beq	r2,r5,80d7b4 <__gethex+0x60c>
  80d7c8:	10800044 	addi	r2,r2,1
  80d7cc:	18800015 	stw	r2,0(r3)
  80d7d0:	00001f06 	br	80d850 <__gethex+0x6a8>
  80d7d4:	d8800e17 	ldw	r2,56(sp)
  80d7d8:	103fa826 	beq	r2,zero,80d67c <__gethex+0x4d4>
  80d7dc:	003fed06 	br	80d794 <__gethex+0x5ec>
  80d7e0:	98800217 	ldw	r2,8(r19)
  80d7e4:	80801316 	blt	r16,r2,80d834 <__gethex+0x68c>
  80d7e8:	99400117 	ldw	r5,4(r19)
  80d7ec:	a809883a 	mov	r4,r21
  80d7f0:	29400044 	addi	r5,r5,1
  80d7f4:	0809f140 	call	809f14 <_Balloc>
  80d7f8:	99800417 	ldw	r6,16(r19)
  80d7fc:	99400304 	addi	r5,r19,12
  80d800:	11000304 	addi	r4,r2,12
  80d804:	318d883a 	add	r6,r6,r6
  80d808:	318d883a 	add	r6,r6,r6
  80d80c:	31800204 	addi	r6,r6,8
  80d810:	1023883a 	mov	r17,r2
  80d814:	08033400 	call	803340 <memcpy>
  80d818:	980b883a 	mov	r5,r19
  80d81c:	a809883a 	mov	r4,r21
  80d820:	08099940 	call	809994 <_Bfree>
  80d824:	8c000417 	ldw	r16,16(r17)
  80d828:	88800504 	addi	r2,r17,20
  80d82c:	8827883a 	mov	r19,r17
  80d830:	d8800215 	stw	r2,8(sp)
  80d834:	8405883a 	add	r2,r16,r16
  80d838:	1085883a 	add	r2,r2,r2
  80d83c:	14c5883a 	add	r2,r2,r19
  80d840:	84000044 	addi	r16,r16,1
  80d844:	00c00044 	movi	r3,1
  80d848:	10c00515 	stw	r3,20(r2)
  80d84c:	9c000415 	stw	r16,16(r19)
  80d850:	00800084 	movi	r2,2
  80d854:	90801426 	beq	r18,r2,80d8a8 <__gethex+0x700>
  80d858:	d8800017 	ldw	r2,0(sp)
  80d85c:	14000b16 	blt	r2,r16,80d88c <__gethex+0x6e4>
  80d860:	bc0007cc 	andi	r16,r23,31
  80d864:	8000021e 	bne	r16,zero,80d870 <__gethex+0x6c8>
  80d868:	94800814 	ori	r18,r18,32
  80d86c:	003f8406 	br	80d680 <__gethex+0x4d8>
  80d870:	d8c00217 	ldw	r3,8(sp)
  80d874:	1f05883a 	add	r2,r3,fp
  80d878:	113fff17 	ldw	r4,-4(r2)
  80d87c:	08099bc0 	call	8099bc <__hi0bits>
  80d880:	00c00804 	movi	r3,32
  80d884:	1c07c83a 	sub	r3,r3,r16
  80d888:	10fff70e 	bge	r2,r3,80d868 <__gethex+0x6c0>
  80d88c:	9809883a 	mov	r4,r19
  80d890:	01400044 	movi	r5,1
  80d894:	080d0f80 	call	80d0f8 <rshift>
  80d898:	a0800217 	ldw	r2,8(r20)
  80d89c:	b5800044 	addi	r22,r22,1
  80d8a0:	15bf3716 	blt	r2,r22,80d580 <__gethex+0x3d8>
  80d8a4:	003ff006 	br	80d868 <__gethex+0x6c0>
  80d8a8:	a0800017 	ldw	r2,0(r20)
  80d8ac:	10bfffc4 	addi	r2,r2,-1
  80d8b0:	b8801e26 	beq	r23,r2,80d92c <__gethex+0x784>
  80d8b4:	04800884 	movi	r18,34
  80d8b8:	003f7106 	br	80d680 <__gethex+0x4d8>
  80d8bc:	d8c00e17 	ldw	r3,56(sp)
  80d8c0:	00800044 	movi	r2,1
  80d8c4:	10c5c83a 	sub	r2,r2,r3
  80d8c8:	103f6c26 	beq	r2,zero,80d67c <__gethex+0x4d4>
  80d8cc:	003fb106 	br	80d794 <__gethex+0x5ec>
  80d8d0:	bc7f841e 	bne	r23,r17,80d6e4 <__gethex+0x53c>
  80d8d4:	1dc0050e 	bge	r3,r23,80d8ec <__gethex+0x744>
  80d8d8:	b8cbc83a 	sub	r5,r23,r3
  80d8dc:	9809883a 	mov	r4,r19
  80d8e0:	0809e8c0 	call	809e8c <__any_on>
  80d8e4:	103f7f26 	beq	r2,zero,80d6e4 <__gethex+0x53c>
  80d8e8:	a1000117 	ldw	r4,4(r20)
  80d8ec:	d8800117 	ldw	r2,4(sp)
  80d8f0:	d8c00217 	ldw	r3,8(sp)
  80d8f4:	04000044 	movi	r16,1
  80d8f8:	11000015 	stw	r4,0(r2)
  80d8fc:	d8800d17 	ldw	r2,52(sp)
  80d900:	04801884 	movi	r18,98
  80d904:	1c000015 	stw	r16,0(r3)
  80d908:	14c00015 	stw	r19,0(r2)
  80d90c:	9c000415 	stw	r16,16(r19)
  80d910:	003e6806 	br	80d2b4 <__gethex+0x10c>
  80d914:	d8c00e17 	ldw	r3,56(sp)
  80d918:	183f7226 	beq	r3,zero,80d6e4 <__gethex+0x53c>
  80d91c:	003ff306 	br	80d8ec <__gethex+0x744>
  80d920:	d8800e17 	ldw	r2,56(sp)
  80d924:	103ff126 	beq	r2,zero,80d8ec <__gethex+0x744>
  80d928:	003f6e06 	br	80d6e4 <__gethex+0x53c>
  80d92c:	b805d17a 	srai	r2,r23,5
  80d930:	d8c00217 	ldw	r3,8(sp)
  80d934:	b94007cc 	andi	r5,r23,31
  80d938:	1085883a 	add	r2,r2,r2
  80d93c:	1085883a 	add	r2,r2,r2
  80d940:	10c5883a 	add	r2,r2,r3
  80d944:	00c00044 	movi	r3,1
  80d948:	1946983a 	sll	r3,r3,r5
  80d94c:	11000017 	ldw	r4,0(r2)
  80d950:	1906703a 	and	r3,r3,r4
  80d954:	183fd726 	beq	r3,zero,80d8b4 <__gethex+0x70c>
  80d958:	04800844 	movi	r18,33
  80d95c:	003f4806 	br	80d680 <__gethex+0x4d8>

0080d960 <L_shift>:
  80d960:	00800204 	movi	r2,8
  80d964:	1185c83a 	sub	r2,r2,r6
  80d968:	1085883a 	add	r2,r2,r2
  80d96c:	21c00017 	ldw	r7,0(r4)
  80d970:	1093883a 	add	r9,r2,r2
  80d974:	00800804 	movi	r2,32
  80d978:	200d883a 	mov	r6,r4
  80d97c:	1251c83a 	sub	r8,r2,r9
  80d980:	31800104 	addi	r6,r6,4
  80d984:	3805883a 	mov	r2,r7
  80d988:	31c00017 	ldw	r7,0(r6)
  80d98c:	3a08983a 	sll	r4,r7,r8
  80d990:	3a46d83a 	srl	r3,r7,r9
  80d994:	1104b03a 	or	r2,r2,r4
  80d998:	180f883a 	mov	r7,r3
  80d99c:	30bfff15 	stw	r2,-4(r6)
  80d9a0:	30c00015 	stw	r3,0(r6)
  80d9a4:	317ff636 	bltu	r6,r5,80d980 <L_shift+0x20>
  80d9a8:	f800283a 	ret

0080d9ac <__hexnan>:
  80d9ac:	defff404 	addi	sp,sp,-48
  80d9b0:	dd800815 	stw	r22,32(sp)
  80d9b4:	058020b4 	movhi	r22,130
  80d9b8:	b5a3c304 	addi	r22,r22,-28916
  80d9bc:	b0800c03 	ldbu	r2,48(r22)
  80d9c0:	dcc00515 	stw	r19,20(sp)
  80d9c4:	dc000215 	stw	r16,8(sp)
  80d9c8:	dfc00b15 	stw	ra,44(sp)
  80d9cc:	df000a15 	stw	fp,40(sp)
  80d9d0:	ddc00915 	stw	r23,36(sp)
  80d9d4:	dd400715 	stw	r21,28(sp)
  80d9d8:	dd000615 	stw	r20,24(sp)
  80d9dc:	dc800415 	stw	r18,16(sp)
  80d9e0:	dc400315 	stw	r17,12(sp)
  80d9e4:	d9000115 	stw	r4,4(sp)
  80d9e8:	2821883a 	mov	r16,r5
  80d9ec:	3027883a 	mov	r19,r6
  80d9f0:	10007426 	beq	r2,zero,80dbc4 <__hexnan+0x218>
  80d9f4:	80c00017 	ldw	r3,0(r16)
  80d9f8:	1805d17a 	srai	r2,r3,5
  80d9fc:	18c007cc 	andi	r3,r3,31
  80da00:	1839003a 	cmpeq	fp,r3,zero
  80da04:	1085883a 	add	r2,r2,r2
  80da08:	1085883a 	add	r2,r2,r2
  80da0c:	d8c00015 	stw	r3,0(sp)
  80da10:	14c5883a 	add	r2,r2,r19
  80da14:	e000011e 	bne	fp,zero,80da1c <__hexnan+0x70>
  80da18:	10800104 	addi	r2,r2,4
  80da1c:	d8c00117 	ldw	r3,4(sp)
  80da20:	153fff04 	addi	r20,r2,-4
  80da24:	a021883a 	mov	r16,r20
  80da28:	1c400017 	ldw	r17,0(r3)
  80da2c:	a02b883a 	mov	r21,r20
  80da30:	0025883a 	mov	r18,zero
  80da34:	002f883a 	mov	r23,zero
  80da38:	000d883a 	mov	r6,zero
  80da3c:	103fff15 	stw	zero,-4(r2)
  80da40:	8c400044 	addi	r17,r17,1
  80da44:	89000003 	ldbu	r4,0(r17)
  80da48:	20000e26 	beq	r4,zero,80da84 <__hexnan+0xd8>
  80da4c:	2585883a 	add	r2,r4,r22
  80da50:	10c00003 	ldbu	r3,0(r2)
  80da54:	18002e1e 	bne	r3,zero,80db10 <__hexnan+0x164>
  80da58:	00800804 	movi	r2,32
  80da5c:	11005536 	bltu	r2,r4,80dbb4 <__hexnan+0x208>
  80da60:	bcbff70e 	bge	r23,r18,80da40 <__hexnan+0x94>
  80da64:	8540022e 	bgeu	r16,r21,80da70 <__hexnan+0xc4>
  80da68:	008001c4 	movi	r2,7
  80da6c:	11803c0e 	bge	r2,r6,80db60 <__hexnan+0x1b4>
  80da70:	9c003536 	bltu	r19,r16,80db48 <__hexnan+0x19c>
  80da74:	8c400044 	addi	r17,r17,1
  80da78:	89000003 	ldbu	r4,0(r17)
  80da7c:	01800204 	movi	r6,8
  80da80:	203ff21e 	bne	r4,zero,80da4c <__hexnan+0xa0>
  80da84:	90004d26 	beq	r18,zero,80dbbc <__hexnan+0x210>
  80da88:	85404336 	bltu	r16,r21,80db98 <__hexnan+0x1ec>
  80da8c:	9c00382e 	bgeu	r19,r16,80db70 <__hexnan+0x1c4>
  80da90:	9807883a 	mov	r3,r19
  80da94:	80800017 	ldw	r2,0(r16)
  80da98:	84000104 	addi	r16,r16,4
  80da9c:	18800015 	stw	r2,0(r3)
  80daa0:	18c00104 	addi	r3,r3,4
  80daa4:	a43ffb2e 	bgeu	r20,r16,80da94 <__hexnan+0xe8>
  80daa8:	18000015 	stw	zero,0(r3)
  80daac:	18c00104 	addi	r3,r3,4
  80dab0:	a0fffd2e 	bgeu	r20,r3,80daa8 <__hexnan+0xfc>
  80dab4:	a0800017 	ldw	r2,0(r20)
  80dab8:	1000071e 	bne	r2,zero,80dad8 <__hexnan+0x12c>
  80dabc:	9d004326 	beq	r19,r20,80dbcc <__hexnan+0x220>
  80dac0:	a007883a 	mov	r3,r20
  80dac4:	00000106 	br	80dacc <__hexnan+0x120>
  80dac8:	98c04026 	beq	r19,r3,80dbcc <__hexnan+0x220>
  80dacc:	18ffff04 	addi	r3,r3,-4
  80dad0:	18800017 	ldw	r2,0(r3)
  80dad4:	103ffc26 	beq	r2,zero,80dac8 <__hexnan+0x11c>
  80dad8:	00c00144 	movi	r3,5
  80dadc:	1805883a 	mov	r2,r3
  80dae0:	dfc00b17 	ldw	ra,44(sp)
  80dae4:	df000a17 	ldw	fp,40(sp)
  80dae8:	ddc00917 	ldw	r23,36(sp)
  80daec:	dd800817 	ldw	r22,32(sp)
  80daf0:	dd400717 	ldw	r21,28(sp)
  80daf4:	dd000617 	ldw	r20,24(sp)
  80daf8:	dcc00517 	ldw	r19,20(sp)
  80dafc:	dc800417 	ldw	r18,16(sp)
  80db00:	dc400317 	ldw	r17,12(sp)
  80db04:	dc000217 	ldw	r16,8(sp)
  80db08:	dec00c04 	addi	sp,sp,48
  80db0c:	f800283a 	ret
  80db10:	31800044 	addi	r6,r6,1
  80db14:	00800204 	movi	r2,8
  80db18:	94800044 	addi	r18,r18,1
  80db1c:	1180040e 	bge	r2,r6,80db30 <__hexnan+0x184>
  80db20:	9c3fc72e 	bgeu	r19,r16,80da40 <__hexnan+0x94>
  80db24:	843fff04 	addi	r16,r16,-4
  80db28:	80000015 	stw	zero,0(r16)
  80db2c:	01800044 	movi	r6,1
  80db30:	80800017 	ldw	r2,0(r16)
  80db34:	18c003cc 	andi	r3,r3,15
  80db38:	1004913a 	slli	r2,r2,4
  80db3c:	10c4b03a 	or	r2,r2,r3
  80db40:	80800015 	stw	r2,0(r16)
  80db44:	003fbe06 	br	80da40 <__hexnan+0x94>
  80db48:	843fff04 	addi	r16,r16,-4
  80db4c:	802b883a 	mov	r21,r16
  80db50:	902f883a 	mov	r23,r18
  80db54:	000d883a 	mov	r6,zero
  80db58:	80000015 	stw	zero,0(r16)
  80db5c:	003fb806 	br	80da40 <__hexnan+0x94>
  80db60:	8009883a 	mov	r4,r16
  80db64:	a80b883a 	mov	r5,r21
  80db68:	080d9600 	call	80d960 <L_shift>
  80db6c:	003fc006 	br	80da70 <__hexnan+0xc4>
  80db70:	e03fd01e 	bne	fp,zero,80dab4 <__hexnan+0x108>
  80db74:	d8c00017 	ldw	r3,0(sp)
  80db78:	00800804 	movi	r2,32
  80db7c:	10c5c83a 	sub	r2,r2,r3
  80db80:	00ffffc4 	movi	r3,-1
  80db84:	1886d83a 	srl	r3,r3,r2
  80db88:	a0800017 	ldw	r2,0(r20)
  80db8c:	10c4703a 	and	r2,r2,r3
  80db90:	a0800015 	stw	r2,0(r20)
  80db94:	003fc806 	br	80dab8 <__hexnan+0x10c>
  80db98:	008001c4 	movi	r2,7
  80db9c:	11bfbb16 	blt	r2,r6,80da8c <__hexnan+0xe0>
  80dba0:	a80b883a 	mov	r5,r21
  80dba4:	8009883a 	mov	r4,r16
  80dba8:	080d9600 	call	80d960 <L_shift>
  80dbac:	9c3ff02e 	bgeu	r19,r16,80db70 <__hexnan+0x1c4>
  80dbb0:	003fb706 	br	80da90 <__hexnan+0xe4>
  80dbb4:	00800a44 	movi	r2,41
  80dbb8:	20800826 	beq	r4,r2,80dbdc <__hexnan+0x230>
  80dbbc:	00c00104 	movi	r3,4
  80dbc0:	003fc606 	br	80dadc <__hexnan+0x130>
  80dbc4:	080d0900 	call	80d090 <__hexdig_init>
  80dbc8:	003f8a06 	br	80d9f4 <__hexnan+0x48>
  80dbcc:	00800044 	movi	r2,1
  80dbd0:	00c00144 	movi	r3,5
  80dbd4:	98800015 	stw	r2,0(r19)
  80dbd8:	003fc006 	br	80dadc <__hexnan+0x130>
  80dbdc:	903ff726 	beq	r18,zero,80dbbc <__hexnan+0x210>
  80dbe0:	d8c00117 	ldw	r3,4(sp)
  80dbe4:	88800044 	addi	r2,r17,1
  80dbe8:	18800015 	stw	r2,0(r3)
  80dbec:	857fa72e 	bgeu	r16,r21,80da8c <__hexnan+0xe0>
  80dbf0:	003fe906 	br	80db98 <__hexnan+0x1ec>

0080dbf4 <__muldi3>:
  80dbf4:	2011883a 	mov	r8,r4
  80dbf8:	427fffcc 	andi	r9,r8,65535
  80dbfc:	4018d43a 	srli	r12,r8,16
  80dc00:	32bfffcc 	andi	r10,r6,65535
  80dc04:	3016d43a 	srli	r11,r6,16
  80dc08:	4a85383a 	mul	r2,r9,r10
  80dc0c:	6295383a 	mul	r10,r12,r10
  80dc10:	4ad3383a 	mul	r9,r9,r11
  80dc14:	113fffcc 	andi	r4,r2,65535
  80dc18:	1004d43a 	srli	r2,r2,16
  80dc1c:	4a93883a 	add	r9,r9,r10
  80dc20:	3807883a 	mov	r3,r7
  80dc24:	1245883a 	add	r2,r2,r9
  80dc28:	280f883a 	mov	r7,r5
  80dc2c:	180b883a 	mov	r5,r3
  80dc30:	1006943a 	slli	r3,r2,16
  80dc34:	defffd04 	addi	sp,sp,-12
  80dc38:	dc800215 	stw	r18,8(sp)
  80dc3c:	1907883a 	add	r3,r3,r4
  80dc40:	dc400115 	stw	r17,4(sp)
  80dc44:	dc000015 	stw	r16,0(sp)
  80dc48:	4165383a 	mul	r18,r8,r5
  80dc4c:	31e3383a 	mul	r17,r6,r7
  80dc50:	1012d43a 	srli	r9,r2,16
  80dc54:	62d9383a 	mul	r12,r12,r11
  80dc58:	181f883a 	mov	r15,r3
  80dc5c:	1280022e 	bgeu	r2,r10,80dc68 <__muldi3+0x74>
  80dc60:	00800074 	movhi	r2,1
  80dc64:	6099883a 	add	r12,r12,r2
  80dc68:	624d883a 	add	r6,r12,r9
  80dc6c:	9187883a 	add	r3,r18,r6
  80dc70:	88c7883a 	add	r3,r17,r3
  80dc74:	7805883a 	mov	r2,r15
  80dc78:	dc800217 	ldw	r18,8(sp)
  80dc7c:	dc400117 	ldw	r17,4(sp)
  80dc80:	dc000017 	ldw	r16,0(sp)
  80dc84:	dec00304 	addi	sp,sp,12
  80dc88:	f800283a 	ret

0080dc8c <__fixunsdfsi>:
  80dc8c:	defffb04 	addi	sp,sp,-20
  80dc90:	dc400115 	stw	r17,4(sp)
  80dc94:	dc000015 	stw	r16,0(sp)
  80dc98:	04507834 	movhi	r17,16864
  80dc9c:	0021883a 	mov	r16,zero
  80dca0:	800d883a 	mov	r6,r16
  80dca4:	880f883a 	mov	r7,r17
  80dca8:	dcc00315 	stw	r19,12(sp)
  80dcac:	dc800215 	stw	r18,8(sp)
  80dcb0:	2827883a 	mov	r19,r5
  80dcb4:	2025883a 	mov	r18,r4
  80dcb8:	dfc00415 	stw	ra,16(sp)
  80dcbc:	080f6dc0 	call	80f6dc <__gedf2>
  80dcc0:	000d883a 	mov	r6,zero
  80dcc4:	880f883a 	mov	r7,r17
  80dcc8:	980b883a 	mov	r5,r19
  80dccc:	9009883a 	mov	r4,r18
  80dcd0:	10000d16 	blt	r2,zero,80dd08 <__fixunsdfsi+0x7c>
  80dcd4:	080ee340 	call	80ee34 <__subdf3>
  80dcd8:	180b883a 	mov	r5,r3
  80dcdc:	1009883a 	mov	r4,r2
  80dce0:	080f96c0 	call	80f96c <__fixdfsi>
  80dce4:	00e00034 	movhi	r3,32768
  80dce8:	10c5883a 	add	r2,r2,r3
  80dcec:	dfc00417 	ldw	ra,16(sp)
  80dcf0:	dcc00317 	ldw	r19,12(sp)
  80dcf4:	dc800217 	ldw	r18,8(sp)
  80dcf8:	dc400117 	ldw	r17,4(sp)
  80dcfc:	dc000017 	ldw	r16,0(sp)
  80dd00:	dec00504 	addi	sp,sp,20
  80dd04:	f800283a 	ret
  80dd08:	980b883a 	mov	r5,r19
  80dd0c:	9009883a 	mov	r4,r18
  80dd10:	080f96c0 	call	80f96c <__fixdfsi>
  80dd14:	dfc00417 	ldw	ra,16(sp)
  80dd18:	dcc00317 	ldw	r19,12(sp)
  80dd1c:	dc800217 	ldw	r18,8(sp)
  80dd20:	dc400117 	ldw	r17,4(sp)
  80dd24:	dc000017 	ldw	r16,0(sp)
  80dd28:	dec00504 	addi	sp,sp,20
  80dd2c:	f800283a 	ret

0080dd30 <__udivdi3>:
  80dd30:	defff004 	addi	sp,sp,-64
  80dd34:	2005883a 	mov	r2,r4
  80dd38:	3011883a 	mov	r8,r6
  80dd3c:	df000e15 	stw	fp,56(sp)
  80dd40:	dd000a15 	stw	r20,40(sp)
  80dd44:	dc000615 	stw	r16,24(sp)
  80dd48:	dfc00f15 	stw	ra,60(sp)
  80dd4c:	ddc00d15 	stw	r23,52(sp)
  80dd50:	dd800c15 	stw	r22,48(sp)
  80dd54:	dd400b15 	stw	r21,44(sp)
  80dd58:	dcc00915 	stw	r19,36(sp)
  80dd5c:	dc800815 	stw	r18,32(sp)
  80dd60:	dc400715 	stw	r17,28(sp)
  80dd64:	4021883a 	mov	r16,r8
  80dd68:	1039883a 	mov	fp,r2
  80dd6c:	2829883a 	mov	r20,r5
  80dd70:	38003b1e 	bne	r7,zero,80de60 <__udivdi3+0x130>
  80dd74:	2a005c36 	bltu	r5,r8,80dee8 <__udivdi3+0x1b8>
  80dd78:	4000a626 	beq	r8,zero,80e014 <__udivdi3+0x2e4>
  80dd7c:	00bfffd4 	movui	r2,65535
  80dd80:	14009e36 	bltu	r2,r16,80dffc <__udivdi3+0x2cc>
  80dd84:	00803fc4 	movi	r2,255
  80dd88:	14013d36 	bltu	r2,r16,80e280 <__udivdi3+0x550>
  80dd8c:	000b883a 	mov	r5,zero
  80dd90:	0005883a 	mov	r2,zero
  80dd94:	8084d83a 	srl	r2,r16,r2
  80dd98:	01002074 	movhi	r4,129
  80dd9c:	2114ce04 	addi	r4,r4,21304
  80dda0:	01800804 	movi	r6,32
  80dda4:	1105883a 	add	r2,r2,r4
  80dda8:	10c00003 	ldbu	r3,0(r2)
  80ddac:	28c7883a 	add	r3,r5,r3
  80ddb0:	30edc83a 	sub	r22,r6,r3
  80ddb4:	b000ee1e 	bne	r22,zero,80e170 <__udivdi3+0x440>
  80ddb8:	802ad43a 	srli	r21,r16,16
  80ddbc:	00800044 	movi	r2,1
  80ddc0:	a423c83a 	sub	r17,r20,r16
  80ddc4:	85ffffcc 	andi	r23,r16,65535
  80ddc8:	d8800315 	stw	r2,12(sp)
  80ddcc:	8809883a 	mov	r4,r17
  80ddd0:	a80b883a 	mov	r5,r21
  80ddd4:	080fd880 	call	80fd88 <__udivsi3>
  80ddd8:	8809883a 	mov	r4,r17
  80dddc:	a80b883a 	mov	r5,r21
  80dde0:	102d883a 	mov	r22,r2
  80dde4:	080fd900 	call	80fd90 <__umodsi3>
  80dde8:	1004943a 	slli	r2,r2,16
  80ddec:	e006d43a 	srli	r3,fp,16
  80ddf0:	bda3383a 	mul	r17,r23,r22
  80ddf4:	10c4b03a 	or	r2,r2,r3
  80ddf8:	1440042e 	bgeu	r2,r17,80de0c <__udivdi3+0xdc>
  80ddfc:	1405883a 	add	r2,r2,r16
  80de00:	b5bfffc4 	addi	r22,r22,-1
  80de04:	14000136 	bltu	r2,r16,80de0c <__udivdi3+0xdc>
  80de08:	14413d36 	bltu	r2,r17,80e300 <__udivdi3+0x5d0>
  80de0c:	1463c83a 	sub	r17,r2,r17
  80de10:	8809883a 	mov	r4,r17
  80de14:	a80b883a 	mov	r5,r21
  80de18:	080fd880 	call	80fd88 <__udivsi3>
  80de1c:	8809883a 	mov	r4,r17
  80de20:	a80b883a 	mov	r5,r21
  80de24:	1029883a 	mov	r20,r2
  80de28:	080fd900 	call	80fd90 <__umodsi3>
  80de2c:	1004943a 	slli	r2,r2,16
  80de30:	bd09383a 	mul	r4,r23,r20
  80de34:	e0ffffcc 	andi	r3,fp,65535
  80de38:	10c4b03a 	or	r2,r2,r3
  80de3c:	1100042e 	bgeu	r2,r4,80de50 <__udivdi3+0x120>
  80de40:	8085883a 	add	r2,r16,r2
  80de44:	a53fffc4 	addi	r20,r20,-1
  80de48:	14000136 	bltu	r2,r16,80de50 <__udivdi3+0x120>
  80de4c:	11012036 	bltu	r2,r4,80e2d0 <__udivdi3+0x5a0>
  80de50:	b004943a 	slli	r2,r22,16
  80de54:	d9000317 	ldw	r4,12(sp)
  80de58:	a084b03a 	or	r2,r20,r2
  80de5c:	00001506 	br	80deb4 <__udivdi3+0x184>
  80de60:	380d883a 	mov	r6,r7
  80de64:	29c06236 	bltu	r5,r7,80dff0 <__udivdi3+0x2c0>
  80de68:	00bfffd4 	movui	r2,65535
  80de6c:	11c05a36 	bltu	r2,r7,80dfd8 <__udivdi3+0x2a8>
  80de70:	00803fc4 	movi	r2,255
  80de74:	11c0fc36 	bltu	r2,r7,80e268 <__udivdi3+0x538>
  80de78:	000b883a 	mov	r5,zero
  80de7c:	0005883a 	mov	r2,zero
  80de80:	3084d83a 	srl	r2,r6,r2
  80de84:	01002074 	movhi	r4,129
  80de88:	2114ce04 	addi	r4,r4,21304
  80de8c:	01c00804 	movi	r7,32
  80de90:	1105883a 	add	r2,r2,r4
  80de94:	10c00003 	ldbu	r3,0(r2)
  80de98:	28c7883a 	add	r3,r5,r3
  80de9c:	38efc83a 	sub	r23,r7,r3
  80dea0:	b800691e 	bne	r23,zero,80e048 <__udivdi3+0x318>
  80dea4:	35000136 	bltu	r6,r20,80deac <__udivdi3+0x17c>
  80dea8:	e4005136 	bltu	fp,r16,80dff0 <__udivdi3+0x2c0>
  80deac:	00800044 	movi	r2,1
  80deb0:	0009883a 	mov	r4,zero
  80deb4:	2007883a 	mov	r3,r4
  80deb8:	dfc00f17 	ldw	ra,60(sp)
  80debc:	df000e17 	ldw	fp,56(sp)
  80dec0:	ddc00d17 	ldw	r23,52(sp)
  80dec4:	dd800c17 	ldw	r22,48(sp)
  80dec8:	dd400b17 	ldw	r21,44(sp)
  80decc:	dd000a17 	ldw	r20,40(sp)
  80ded0:	dcc00917 	ldw	r19,36(sp)
  80ded4:	dc800817 	ldw	r18,32(sp)
  80ded8:	dc400717 	ldw	r17,28(sp)
  80dedc:	dc000617 	ldw	r16,24(sp)
  80dee0:	dec01004 	addi	sp,sp,64
  80dee4:	f800283a 	ret
  80dee8:	00bfffd4 	movui	r2,65535
  80deec:	12005036 	bltu	r2,r8,80e030 <__udivdi3+0x300>
  80def0:	00803fc4 	movi	r2,255
  80def4:	1200e836 	bltu	r2,r8,80e298 <__udivdi3+0x568>
  80def8:	000b883a 	mov	r5,zero
  80defc:	0005883a 	mov	r2,zero
  80df00:	8084d83a 	srl	r2,r16,r2
  80df04:	01002074 	movhi	r4,129
  80df08:	2114ce04 	addi	r4,r4,21304
  80df0c:	01800804 	movi	r6,32
  80df10:	1105883a 	add	r2,r2,r4
  80df14:	10c00003 	ldbu	r3,0(r2)
  80df18:	28c7883a 	add	r3,r5,r3
  80df1c:	30cbc83a 	sub	r5,r6,r3
  80df20:	28000626 	beq	r5,zero,80df3c <__udivdi3+0x20c>
  80df24:	3145c83a 	sub	r2,r6,r5
  80df28:	e084d83a 	srl	r2,fp,r2
  80df2c:	a146983a 	sll	r3,r20,r5
  80df30:	e178983a 	sll	fp,fp,r5
  80df34:	8160983a 	sll	r16,r16,r5
  80df38:	18a8b03a 	or	r20,r3,r2
  80df3c:	802ad43a 	srli	r21,r16,16
  80df40:	a009883a 	mov	r4,r20
  80df44:	85ffffcc 	andi	r23,r16,65535
  80df48:	a80b883a 	mov	r5,r21
  80df4c:	080fd880 	call	80fd88 <__udivsi3>
  80df50:	a009883a 	mov	r4,r20
  80df54:	a80b883a 	mov	r5,r21
  80df58:	102d883a 	mov	r22,r2
  80df5c:	080fd900 	call	80fd90 <__umodsi3>
  80df60:	1004943a 	slli	r2,r2,16
  80df64:	e006d43a 	srli	r3,fp,16
  80df68:	bda3383a 	mul	r17,r23,r22
  80df6c:	10c4b03a 	or	r2,r2,r3
  80df70:	1440042e 	bgeu	r2,r17,80df84 <__udivdi3+0x254>
  80df74:	1405883a 	add	r2,r2,r16
  80df78:	b5bfffc4 	addi	r22,r22,-1
  80df7c:	14000136 	bltu	r2,r16,80df84 <__udivdi3+0x254>
  80df80:	1440d536 	bltu	r2,r17,80e2d8 <__udivdi3+0x5a8>
  80df84:	1463c83a 	sub	r17,r2,r17
  80df88:	8809883a 	mov	r4,r17
  80df8c:	a80b883a 	mov	r5,r21
  80df90:	080fd880 	call	80fd88 <__udivsi3>
  80df94:	8809883a 	mov	r4,r17
  80df98:	a80b883a 	mov	r5,r21
  80df9c:	1029883a 	mov	r20,r2
  80dfa0:	080fd900 	call	80fd90 <__umodsi3>
  80dfa4:	1004943a 	slli	r2,r2,16
  80dfa8:	bd09383a 	mul	r4,r23,r20
  80dfac:	e0ffffcc 	andi	r3,fp,65535
  80dfb0:	10c4b03a 	or	r2,r2,r3
  80dfb4:	1100042e 	bgeu	r2,r4,80dfc8 <__udivdi3+0x298>
  80dfb8:	8085883a 	add	r2,r16,r2
  80dfbc:	a53fffc4 	addi	r20,r20,-1
  80dfc0:	14000136 	bltu	r2,r16,80dfc8 <__udivdi3+0x298>
  80dfc4:	1100c736 	bltu	r2,r4,80e2e4 <__udivdi3+0x5b4>
  80dfc8:	b004943a 	slli	r2,r22,16
  80dfcc:	0009883a 	mov	r4,zero
  80dfd0:	a084b03a 	or	r2,r20,r2
  80dfd4:	003fb706 	br	80deb4 <__udivdi3+0x184>
  80dfd8:	00804034 	movhi	r2,256
  80dfdc:	10bfffc4 	addi	r2,r2,-1
  80dfe0:	11c0a436 	bltu	r2,r7,80e274 <__udivdi3+0x544>
  80dfe4:	01400404 	movi	r5,16
  80dfe8:	2805883a 	mov	r2,r5
  80dfec:	003fa406 	br	80de80 <__udivdi3+0x150>
  80dff0:	0005883a 	mov	r2,zero
  80dff4:	0009883a 	mov	r4,zero
  80dff8:	003fae06 	br	80deb4 <__udivdi3+0x184>
  80dffc:	00804034 	movhi	r2,256
  80e000:	10bfffc4 	addi	r2,r2,-1
  80e004:	1400a136 	bltu	r2,r16,80e28c <__udivdi3+0x55c>
  80e008:	01400404 	movi	r5,16
  80e00c:	2805883a 	mov	r2,r5
  80e010:	003f6006 	br	80dd94 <__udivdi3+0x64>
  80e014:	01000044 	movi	r4,1
  80e018:	000b883a 	mov	r5,zero
  80e01c:	080fd880 	call	80fd88 <__udivsi3>
  80e020:	1021883a 	mov	r16,r2
  80e024:	00bfffd4 	movui	r2,65535
  80e028:	143ff436 	bltu	r2,r16,80dffc <__udivdi3+0x2cc>
  80e02c:	003f5506 	br	80dd84 <__udivdi3+0x54>
  80e030:	00804034 	movhi	r2,256
  80e034:	10bfffc4 	addi	r2,r2,-1
  80e038:	12009a36 	bltu	r2,r8,80e2a4 <__udivdi3+0x574>
  80e03c:	01400404 	movi	r5,16
  80e040:	2805883a 	mov	r2,r5
  80e044:	003fae06 	br	80df00 <__udivdi3+0x1d0>
  80e048:	3dc5c83a 	sub	r2,r7,r23
  80e04c:	35c8983a 	sll	r4,r6,r23
  80e050:	8086d83a 	srl	r3,r16,r2
  80e054:	a0a2d83a 	srl	r17,r20,r2
  80e058:	e084d83a 	srl	r2,fp,r2
  80e05c:	20eab03a 	or	r21,r4,r3
  80e060:	a82cd43a 	srli	r22,r21,16
  80e064:	a5c6983a 	sll	r3,r20,r23
  80e068:	8809883a 	mov	r4,r17
  80e06c:	b00b883a 	mov	r5,r22
  80e070:	1886b03a 	or	r3,r3,r2
  80e074:	d8c00215 	stw	r3,8(sp)
  80e078:	080fd880 	call	80fd88 <__udivsi3>
  80e07c:	8809883a 	mov	r4,r17
  80e080:	b00b883a 	mov	r5,r22
  80e084:	1029883a 	mov	r20,r2
  80e088:	080fd900 	call	80fd90 <__umodsi3>
  80e08c:	a8ffffcc 	andi	r3,r21,65535
  80e090:	d8c00515 	stw	r3,20(sp)
  80e094:	d9000217 	ldw	r4,8(sp)
  80e098:	d9400517 	ldw	r5,20(sp)
  80e09c:	1004943a 	slli	r2,r2,16
  80e0a0:	2006d43a 	srli	r3,r4,16
  80e0a4:	85e0983a 	sll	r16,r16,r23
  80e0a8:	2d23383a 	mul	r17,r5,r20
  80e0ac:	10c4b03a 	or	r2,r2,r3
  80e0b0:	dc000015 	stw	r16,0(sp)
  80e0b4:	1440032e 	bgeu	r2,r17,80e0c4 <__udivdi3+0x394>
  80e0b8:	1545883a 	add	r2,r2,r21
  80e0bc:	a53fffc4 	addi	r20,r20,-1
  80e0c0:	15407f2e 	bgeu	r2,r21,80e2c0 <__udivdi3+0x590>
  80e0c4:	1463c83a 	sub	r17,r2,r17
  80e0c8:	8809883a 	mov	r4,r17
  80e0cc:	b00b883a 	mov	r5,r22
  80e0d0:	080fd880 	call	80fd88 <__udivsi3>
  80e0d4:	8809883a 	mov	r4,r17
  80e0d8:	b00b883a 	mov	r5,r22
  80e0dc:	1021883a 	mov	r16,r2
  80e0e0:	080fd900 	call	80fd90 <__umodsi3>
  80e0e4:	d8c00517 	ldw	r3,20(sp)
  80e0e8:	d9000217 	ldw	r4,8(sp)
  80e0ec:	1004943a 	slli	r2,r2,16
  80e0f0:	1c0f383a 	mul	r7,r3,r16
  80e0f4:	20ffffcc 	andi	r3,r4,65535
  80e0f8:	10e2b03a 	or	r17,r2,r3
  80e0fc:	89c0032e 	bgeu	r17,r7,80e10c <__udivdi3+0x3dc>
  80e100:	8d63883a 	add	r17,r17,r21
  80e104:	843fffc4 	addi	r16,r16,-1
  80e108:	8d40692e 	bgeu	r17,r21,80e2b0 <__udivdi3+0x580>
  80e10c:	a008943a 	slli	r4,r20,16
  80e110:	d9400017 	ldw	r5,0(sp)
  80e114:	89e3c83a 	sub	r17,r17,r7
  80e118:	8110b03a 	or	r8,r16,r4
  80e11c:	280cd43a 	srli	r6,r5,16
  80e120:	28ffffcc 	andi	r3,r5,65535
  80e124:	40bfffcc 	andi	r2,r8,65535
  80e128:	400ad43a 	srli	r5,r8,16
  80e12c:	10d3383a 	mul	r9,r2,r3
  80e130:	1185383a 	mul	r2,r2,r6
  80e134:	28c7383a 	mul	r3,r5,r3
  80e138:	4808d43a 	srli	r4,r9,16
  80e13c:	298b383a 	mul	r5,r5,r6
  80e140:	10c5883a 	add	r2,r2,r3
  80e144:	2089883a 	add	r4,r4,r2
  80e148:	20c0022e 	bgeu	r4,r3,80e154 <__udivdi3+0x424>
  80e14c:	00800074 	movhi	r2,1
  80e150:	288b883a 	add	r5,r5,r2
  80e154:	2004d43a 	srli	r2,r4,16
  80e158:	288b883a 	add	r5,r5,r2
  80e15c:	89403f36 	bltu	r17,r5,80e25c <__udivdi3+0x52c>
  80e160:	89403926 	beq	r17,r5,80e248 <__udivdi3+0x518>
  80e164:	4005883a 	mov	r2,r8
  80e168:	0009883a 	mov	r4,zero
  80e16c:	003f5106 	br	80deb4 <__udivdi3+0x184>
  80e170:	85a0983a 	sll	r16,r16,r22
  80e174:	3585c83a 	sub	r2,r6,r22
  80e178:	a0a2d83a 	srl	r17,r20,r2
  80e17c:	802ad43a 	srli	r21,r16,16
  80e180:	e084d83a 	srl	r2,fp,r2
  80e184:	a586983a 	sll	r3,r20,r22
  80e188:	8809883a 	mov	r4,r17
  80e18c:	a80b883a 	mov	r5,r21
  80e190:	1886b03a 	or	r3,r3,r2
  80e194:	d8c00115 	stw	r3,4(sp)
  80e198:	080fd880 	call	80fd88 <__udivsi3>
  80e19c:	8809883a 	mov	r4,r17
  80e1a0:	a80b883a 	mov	r5,r21
  80e1a4:	d8800415 	stw	r2,16(sp)
  80e1a8:	080fd900 	call	80fd90 <__umodsi3>
  80e1ac:	d9000117 	ldw	r4,4(sp)
  80e1b0:	d9400417 	ldw	r5,16(sp)
  80e1b4:	1004943a 	slli	r2,r2,16
  80e1b8:	85ffffcc 	andi	r23,r16,65535
  80e1bc:	2006d43a 	srli	r3,r4,16
  80e1c0:	b963383a 	mul	r17,r23,r5
  80e1c4:	10c4b03a 	or	r2,r2,r3
  80e1c8:	1440042e 	bgeu	r2,r17,80e1dc <__udivdi3+0x4ac>
  80e1cc:	297fffc4 	addi	r5,r5,-1
  80e1d0:	1405883a 	add	r2,r2,r16
  80e1d4:	d9400415 	stw	r5,16(sp)
  80e1d8:	1400442e 	bgeu	r2,r16,80e2ec <__udivdi3+0x5bc>
  80e1dc:	1463c83a 	sub	r17,r2,r17
  80e1e0:	8809883a 	mov	r4,r17
  80e1e4:	a80b883a 	mov	r5,r21
  80e1e8:	080fd880 	call	80fd88 <__udivsi3>
  80e1ec:	8809883a 	mov	r4,r17
  80e1f0:	a80b883a 	mov	r5,r21
  80e1f4:	1029883a 	mov	r20,r2
  80e1f8:	080fd900 	call	80fd90 <__umodsi3>
  80e1fc:	d9400117 	ldw	r5,4(sp)
  80e200:	1004943a 	slli	r2,r2,16
  80e204:	bd09383a 	mul	r4,r23,r20
  80e208:	28ffffcc 	andi	r3,r5,65535
  80e20c:	10c6b03a 	or	r3,r2,r3
  80e210:	1900062e 	bgeu	r3,r4,80e22c <__udivdi3+0x4fc>
  80e214:	1c07883a 	add	r3,r3,r16
  80e218:	a53fffc4 	addi	r20,r20,-1
  80e21c:	1c000336 	bltu	r3,r16,80e22c <__udivdi3+0x4fc>
  80e220:	1900022e 	bgeu	r3,r4,80e22c <__udivdi3+0x4fc>
  80e224:	a53fffc4 	addi	r20,r20,-1
  80e228:	1c07883a 	add	r3,r3,r16
  80e22c:	d9400417 	ldw	r5,16(sp)
  80e230:	e5b8983a 	sll	fp,fp,r22
  80e234:	1923c83a 	sub	r17,r3,r4
  80e238:	2804943a 	slli	r2,r5,16
  80e23c:	a0a8b03a 	or	r20,r20,r2
  80e240:	dd000315 	stw	r20,12(sp)
  80e244:	003ee106 	br	80ddcc <__udivdi3+0x9c>
  80e248:	2004943a 	slli	r2,r4,16
  80e24c:	e5c8983a 	sll	r4,fp,r23
  80e250:	48ffffcc 	andi	r3,r9,65535
  80e254:	10c5883a 	add	r2,r2,r3
  80e258:	20bfc22e 	bgeu	r4,r2,80e164 <__udivdi3+0x434>
  80e25c:	40bfffc4 	addi	r2,r8,-1
  80e260:	0009883a 	mov	r4,zero
  80e264:	003f1306 	br	80deb4 <__udivdi3+0x184>
  80e268:	01400204 	movi	r5,8
  80e26c:	2805883a 	mov	r2,r5
  80e270:	003f0306 	br	80de80 <__udivdi3+0x150>
  80e274:	01400604 	movi	r5,24
  80e278:	2805883a 	mov	r2,r5
  80e27c:	003f0006 	br	80de80 <__udivdi3+0x150>
  80e280:	01400204 	movi	r5,8
  80e284:	2805883a 	mov	r2,r5
  80e288:	003ec206 	br	80dd94 <__udivdi3+0x64>
  80e28c:	01400604 	movi	r5,24
  80e290:	2805883a 	mov	r2,r5
  80e294:	003ebf06 	br	80dd94 <__udivdi3+0x64>
  80e298:	01400204 	movi	r5,8
  80e29c:	2805883a 	mov	r2,r5
  80e2a0:	003f1706 	br	80df00 <__udivdi3+0x1d0>
  80e2a4:	01400604 	movi	r5,24
  80e2a8:	2805883a 	mov	r2,r5
  80e2ac:	003f1406 	br	80df00 <__udivdi3+0x1d0>
  80e2b0:	89ff962e 	bgeu	r17,r7,80e10c <__udivdi3+0x3dc>
  80e2b4:	8d63883a 	add	r17,r17,r21
  80e2b8:	843fffc4 	addi	r16,r16,-1
  80e2bc:	003f9306 	br	80e10c <__udivdi3+0x3dc>
  80e2c0:	147f802e 	bgeu	r2,r17,80e0c4 <__udivdi3+0x394>
  80e2c4:	a53fffc4 	addi	r20,r20,-1
  80e2c8:	1545883a 	add	r2,r2,r21
  80e2cc:	003f7d06 	br	80e0c4 <__udivdi3+0x394>
  80e2d0:	a53fffc4 	addi	r20,r20,-1
  80e2d4:	003ede06 	br	80de50 <__udivdi3+0x120>
  80e2d8:	b5bfffc4 	addi	r22,r22,-1
  80e2dc:	1405883a 	add	r2,r2,r16
  80e2e0:	003f2806 	br	80df84 <__udivdi3+0x254>
  80e2e4:	a53fffc4 	addi	r20,r20,-1
  80e2e8:	003f3706 	br	80dfc8 <__udivdi3+0x298>
  80e2ec:	147fbb2e 	bgeu	r2,r17,80e1dc <__udivdi3+0x4ac>
  80e2f0:	297fffc4 	addi	r5,r5,-1
  80e2f4:	1405883a 	add	r2,r2,r16
  80e2f8:	d9400415 	stw	r5,16(sp)
  80e2fc:	003fb706 	br	80e1dc <__udivdi3+0x4ac>
  80e300:	b5bfffc4 	addi	r22,r22,-1
  80e304:	1405883a 	add	r2,r2,r16
  80e308:	003ec006 	br	80de0c <__udivdi3+0xdc>

0080e30c <__umoddi3>:
  80e30c:	defff104 	addi	sp,sp,-60
  80e310:	dd800b15 	stw	r22,44(sp)
  80e314:	dd000915 	stw	r20,36(sp)
  80e318:	dc000515 	stw	r16,20(sp)
  80e31c:	dfc00e15 	stw	ra,56(sp)
  80e320:	df000d15 	stw	fp,52(sp)
  80e324:	ddc00c15 	stw	r23,48(sp)
  80e328:	dd400a15 	stw	r21,40(sp)
  80e32c:	dcc00815 	stw	r19,32(sp)
  80e330:	dc800715 	stw	r18,28(sp)
  80e334:	dc400615 	stw	r17,24(sp)
  80e338:	3021883a 	mov	r16,r6
  80e33c:	202d883a 	mov	r22,r4
  80e340:	2829883a 	mov	r20,r5
  80e344:	38002b1e 	bne	r7,zero,80e3f4 <__umoddi3+0xe8>
  80e348:	29805036 	bltu	r5,r6,80e48c <__umoddi3+0x180>
  80e34c:	30008a26 	beq	r6,zero,80e578 <__umoddi3+0x26c>
  80e350:	00bfffd4 	movui	r2,65535
  80e354:	14008236 	bltu	r2,r16,80e560 <__umoddi3+0x254>
  80e358:	00803fc4 	movi	r2,255
  80e35c:	14013636 	bltu	r2,r16,80e838 <__umoddi3+0x52c>
  80e360:	000b883a 	mov	r5,zero
  80e364:	0005883a 	mov	r2,zero
  80e368:	8084d83a 	srl	r2,r16,r2
  80e36c:	01002074 	movhi	r4,129
  80e370:	2114ce04 	addi	r4,r4,21304
  80e374:	01800804 	movi	r6,32
  80e378:	1105883a 	add	r2,r2,r4
  80e37c:	10c00003 	ldbu	r3,0(r2)
  80e380:	28c7883a 	add	r3,r5,r3
  80e384:	30efc83a 	sub	r23,r6,r3
  80e388:	b800941e 	bne	r23,zero,80e5dc <__umoddi3+0x2d0>
  80e38c:	802ad43a 	srli	r21,r16,16
  80e390:	a423c83a 	sub	r17,r20,r16
  80e394:	0039883a 	mov	fp,zero
  80e398:	853fffcc 	andi	r20,r16,65535
  80e39c:	8809883a 	mov	r4,r17
  80e3a0:	a80b883a 	mov	r5,r21
  80e3a4:	080fd880 	call	80fd88 <__udivsi3>
  80e3a8:	8809883a 	mov	r4,r17
  80e3ac:	a80b883a 	mov	r5,r21
  80e3b0:	a0a3383a 	mul	r17,r20,r2
  80e3b4:	080fd900 	call	80fd90 <__umodsi3>
  80e3b8:	1004943a 	slli	r2,r2,16
  80e3bc:	b006d43a 	srli	r3,r22,16
  80e3c0:	10c4b03a 	or	r2,r2,r3
  80e3c4:	1440032e 	bgeu	r2,r17,80e3d4 <__umoddi3+0xc8>
  80e3c8:	1405883a 	add	r2,r2,r16
  80e3cc:	14000136 	bltu	r2,r16,80e3d4 <__umoddi3+0xc8>
  80e3d0:	14413536 	bltu	r2,r17,80e8a8 <__umoddi3+0x59c>
  80e3d4:	1463c83a 	sub	r17,r2,r17
  80e3d8:	8809883a 	mov	r4,r17
  80e3dc:	a80b883a 	mov	r5,r21
  80e3e0:	080fd880 	call	80fd88 <__udivsi3>
  80e3e4:	8809883a 	mov	r4,r17
  80e3e8:	a0a3383a 	mul	r17,r20,r2
  80e3ec:	a80b883a 	mov	r5,r21
  80e3f0:	00004d06 	br	80e528 <__umoddi3+0x21c>
  80e3f4:	380d883a 	mov	r6,r7
  80e3f8:	29c0102e 	bgeu	r5,r7,80e43c <__umoddi3+0x130>
  80e3fc:	2011883a 	mov	r8,r4
  80e400:	2813883a 	mov	r9,r5
  80e404:	4005883a 	mov	r2,r8
  80e408:	4807883a 	mov	r3,r9
  80e40c:	dfc00e17 	ldw	ra,56(sp)
  80e410:	df000d17 	ldw	fp,52(sp)
  80e414:	ddc00c17 	ldw	r23,48(sp)
  80e418:	dd800b17 	ldw	r22,44(sp)
  80e41c:	dd400a17 	ldw	r21,40(sp)
  80e420:	dd000917 	ldw	r20,36(sp)
  80e424:	dcc00817 	ldw	r19,32(sp)
  80e428:	dc800717 	ldw	r18,28(sp)
  80e42c:	dc400617 	ldw	r17,24(sp)
  80e430:	dc000517 	ldw	r16,20(sp)
  80e434:	dec00f04 	addi	sp,sp,60
  80e438:	f800283a 	ret
  80e43c:	00bfffd4 	movui	r2,65535
  80e440:	11c05a36 	bltu	r2,r7,80e5ac <__umoddi3+0x2a0>
  80e444:	00803fc4 	movi	r2,255
  80e448:	11c0fe36 	bltu	r2,r7,80e844 <__umoddi3+0x538>
  80e44c:	000b883a 	mov	r5,zero
  80e450:	0005883a 	mov	r2,zero
  80e454:	3084d83a 	srl	r2,r6,r2
  80e458:	01002074 	movhi	r4,129
  80e45c:	2114ce04 	addi	r4,r4,21304
  80e460:	01c00804 	movi	r7,32
  80e464:	1105883a 	add	r2,r2,r4
  80e468:	10c00003 	ldbu	r3,0(r2)
  80e46c:	28c7883a 	add	r3,r5,r3
  80e470:	38ebc83a 	sub	r21,r7,r3
  80e474:	a800851e 	bne	r21,zero,80e68c <__umoddi3+0x380>
  80e478:	35005236 	bltu	r6,r20,80e5c4 <__umoddi3+0x2b8>
  80e47c:	b400512e 	bgeu	r22,r16,80e5c4 <__umoddi3+0x2b8>
  80e480:	b011883a 	mov	r8,r22
  80e484:	a013883a 	mov	r9,r20
  80e488:	003fde06 	br	80e404 <__umoddi3+0xf8>
  80e48c:	00bfffd4 	movui	r2,65535
  80e490:	11804036 	bltu	r2,r6,80e594 <__umoddi3+0x288>
  80e494:	00803fc4 	movi	r2,255
  80e498:	1180ed36 	bltu	r2,r6,80e850 <__umoddi3+0x544>
  80e49c:	000b883a 	mov	r5,zero
  80e4a0:	0005883a 	mov	r2,zero
  80e4a4:	8084d83a 	srl	r2,r16,r2
  80e4a8:	01002074 	movhi	r4,129
  80e4ac:	2114ce04 	addi	r4,r4,21304
  80e4b0:	01800804 	movi	r6,32
  80e4b4:	1105883a 	add	r2,r2,r4
  80e4b8:	10c00003 	ldbu	r3,0(r2)
  80e4bc:	28c7883a 	add	r3,r5,r3
  80e4c0:	30c7c83a 	sub	r3,r6,r3
  80e4c4:	1800bf1e 	bne	r3,zero,80e7c4 <__umoddi3+0x4b8>
  80e4c8:	0039883a 	mov	fp,zero
  80e4cc:	802ad43a 	srli	r21,r16,16
  80e4d0:	a009883a 	mov	r4,r20
  80e4d4:	85ffffcc 	andi	r23,r16,65535
  80e4d8:	a80b883a 	mov	r5,r21
  80e4dc:	080fd880 	call	80fd88 <__udivsi3>
  80e4e0:	a009883a 	mov	r4,r20
  80e4e4:	a80b883a 	mov	r5,r21
  80e4e8:	b8a3383a 	mul	r17,r23,r2
  80e4ec:	080fd900 	call	80fd90 <__umodsi3>
  80e4f0:	1004943a 	slli	r2,r2,16
  80e4f4:	b006d43a 	srli	r3,r22,16
  80e4f8:	10c4b03a 	or	r2,r2,r3
  80e4fc:	1440032e 	bgeu	r2,r17,80e50c <__umoddi3+0x200>
  80e500:	1405883a 	add	r2,r2,r16
  80e504:	14000136 	bltu	r2,r16,80e50c <__umoddi3+0x200>
  80e508:	1440e536 	bltu	r2,r17,80e8a0 <__umoddi3+0x594>
  80e50c:	1463c83a 	sub	r17,r2,r17
  80e510:	8809883a 	mov	r4,r17
  80e514:	a80b883a 	mov	r5,r21
  80e518:	080fd880 	call	80fd88 <__udivsi3>
  80e51c:	8809883a 	mov	r4,r17
  80e520:	b8a3383a 	mul	r17,r23,r2
  80e524:	a80b883a 	mov	r5,r21
  80e528:	080fd900 	call	80fd90 <__umodsi3>
  80e52c:	1004943a 	slli	r2,r2,16
  80e530:	b0ffffcc 	andi	r3,r22,65535
  80e534:	10c4b03a 	or	r2,r2,r3
  80e538:	1440042e 	bgeu	r2,r17,80e54c <__umoddi3+0x240>
  80e53c:	1405883a 	add	r2,r2,r16
  80e540:	14000236 	bltu	r2,r16,80e54c <__umoddi3+0x240>
  80e544:	1440012e 	bgeu	r2,r17,80e54c <__umoddi3+0x240>
  80e548:	1405883a 	add	r2,r2,r16
  80e54c:	1445c83a 	sub	r2,r2,r17
  80e550:	1724d83a 	srl	r18,r2,fp
  80e554:	0013883a 	mov	r9,zero
  80e558:	9011883a 	mov	r8,r18
  80e55c:	003fa906 	br	80e404 <__umoddi3+0xf8>
  80e560:	00804034 	movhi	r2,256
  80e564:	10bfffc4 	addi	r2,r2,-1
  80e568:	1400b036 	bltu	r2,r16,80e82c <__umoddi3+0x520>
  80e56c:	01400404 	movi	r5,16
  80e570:	2805883a 	mov	r2,r5
  80e574:	003f7c06 	br	80e368 <__umoddi3+0x5c>
  80e578:	01000044 	movi	r4,1
  80e57c:	000b883a 	mov	r5,zero
  80e580:	080fd880 	call	80fd88 <__udivsi3>
  80e584:	1021883a 	mov	r16,r2
  80e588:	00bfffd4 	movui	r2,65535
  80e58c:	143ff436 	bltu	r2,r16,80e560 <__umoddi3+0x254>
  80e590:	003f7106 	br	80e358 <__umoddi3+0x4c>
  80e594:	00804034 	movhi	r2,256
  80e598:	10bfffc4 	addi	r2,r2,-1
  80e59c:	1180af36 	bltu	r2,r6,80e85c <__umoddi3+0x550>
  80e5a0:	01400404 	movi	r5,16
  80e5a4:	2805883a 	mov	r2,r5
  80e5a8:	003fbe06 	br	80e4a4 <__umoddi3+0x198>
  80e5ac:	00804034 	movhi	r2,256
  80e5b0:	10bfffc4 	addi	r2,r2,-1
  80e5b4:	11c0ac36 	bltu	r2,r7,80e868 <__umoddi3+0x55c>
  80e5b8:	01400404 	movi	r5,16
  80e5bc:	2805883a 	mov	r2,r5
  80e5c0:	003fa406 	br	80e454 <__umoddi3+0x148>
  80e5c4:	b409c83a 	sub	r4,r22,r16
  80e5c8:	b105803a 	cmpltu	r2,r22,r4
  80e5cc:	a187c83a 	sub	r3,r20,r6
  80e5d0:	18a9c83a 	sub	r20,r3,r2
  80e5d4:	202d883a 	mov	r22,r4
  80e5d8:	003fa906 	br	80e480 <__umoddi3+0x174>
  80e5dc:	85e0983a 	sll	r16,r16,r23
  80e5e0:	35c5c83a 	sub	r2,r6,r23
  80e5e4:	a0a2d83a 	srl	r17,r20,r2
  80e5e8:	802ad43a 	srli	r21,r16,16
  80e5ec:	b084d83a 	srl	r2,r22,r2
  80e5f0:	a5c6983a 	sll	r3,r20,r23
  80e5f4:	8809883a 	mov	r4,r17
  80e5f8:	a80b883a 	mov	r5,r21
  80e5fc:	1886b03a 	or	r3,r3,r2
  80e600:	d8c00115 	stw	r3,4(sp)
  80e604:	853fffcc 	andi	r20,r16,65535
  80e608:	080fd880 	call	80fd88 <__udivsi3>
  80e60c:	8809883a 	mov	r4,r17
  80e610:	a80b883a 	mov	r5,r21
  80e614:	a0a3383a 	mul	r17,r20,r2
  80e618:	080fd900 	call	80fd90 <__umodsi3>
  80e61c:	d9000117 	ldw	r4,4(sp)
  80e620:	1004943a 	slli	r2,r2,16
  80e624:	b839883a 	mov	fp,r23
  80e628:	2006d43a 	srli	r3,r4,16
  80e62c:	10c4b03a 	or	r2,r2,r3
  80e630:	1440022e 	bgeu	r2,r17,80e63c <__umoddi3+0x330>
  80e634:	1405883a 	add	r2,r2,r16
  80e638:	1400962e 	bgeu	r2,r16,80e894 <__umoddi3+0x588>
  80e63c:	1463c83a 	sub	r17,r2,r17
  80e640:	8809883a 	mov	r4,r17
  80e644:	a80b883a 	mov	r5,r21
  80e648:	080fd880 	call	80fd88 <__udivsi3>
  80e64c:	8809883a 	mov	r4,r17
  80e650:	a80b883a 	mov	r5,r21
  80e654:	a0a3383a 	mul	r17,r20,r2
  80e658:	080fd900 	call	80fd90 <__umodsi3>
  80e65c:	d9400117 	ldw	r5,4(sp)
  80e660:	1004943a 	slli	r2,r2,16
  80e664:	28ffffcc 	andi	r3,r5,65535
  80e668:	10c4b03a 	or	r2,r2,r3
  80e66c:	1440042e 	bgeu	r2,r17,80e680 <__umoddi3+0x374>
  80e670:	1405883a 	add	r2,r2,r16
  80e674:	14000236 	bltu	r2,r16,80e680 <__umoddi3+0x374>
  80e678:	1440012e 	bgeu	r2,r17,80e680 <__umoddi3+0x374>
  80e67c:	1405883a 	add	r2,r2,r16
  80e680:	b5ec983a 	sll	r22,r22,r23
  80e684:	1463c83a 	sub	r17,r2,r17
  80e688:	003f4406 	br	80e39c <__umoddi3+0x90>
  80e68c:	3d4fc83a 	sub	r7,r7,r21
  80e690:	3546983a 	sll	r3,r6,r21
  80e694:	81c4d83a 	srl	r2,r16,r7
  80e698:	a1e2d83a 	srl	r17,r20,r7
  80e69c:	a54c983a 	sll	r6,r20,r21
  80e6a0:	18aeb03a 	or	r23,r3,r2
  80e6a4:	b828d43a 	srli	r20,r23,16
  80e6a8:	b1c4d83a 	srl	r2,r22,r7
  80e6ac:	8809883a 	mov	r4,r17
  80e6b0:	a00b883a 	mov	r5,r20
  80e6b4:	308cb03a 	or	r6,r6,r2
  80e6b8:	d9c00315 	stw	r7,12(sp)
  80e6bc:	d9800215 	stw	r6,8(sp)
  80e6c0:	080fd880 	call	80fd88 <__udivsi3>
  80e6c4:	8809883a 	mov	r4,r17
  80e6c8:	a00b883a 	mov	r5,r20
  80e6cc:	1039883a 	mov	fp,r2
  80e6d0:	080fd900 	call	80fd90 <__umodsi3>
  80e6d4:	b8ffffcc 	andi	r3,r23,65535
  80e6d8:	d8c00415 	stw	r3,16(sp)
  80e6dc:	d9000217 	ldw	r4,8(sp)
  80e6e0:	d9400417 	ldw	r5,16(sp)
  80e6e4:	1004943a 	slli	r2,r2,16
  80e6e8:	2006d43a 	srli	r3,r4,16
  80e6ec:	8560983a 	sll	r16,r16,r21
  80e6f0:	2f23383a 	mul	r17,r5,fp
  80e6f4:	10c4b03a 	or	r2,r2,r3
  80e6f8:	dc000015 	stw	r16,0(sp)
  80e6fc:	b56c983a 	sll	r22,r22,r21
  80e700:	1440032e 	bgeu	r2,r17,80e710 <__umoddi3+0x404>
  80e704:	15c5883a 	add	r2,r2,r23
  80e708:	e73fffc4 	addi	fp,fp,-1
  80e70c:	15c05d2e 	bgeu	r2,r23,80e884 <__umoddi3+0x578>
  80e710:	1463c83a 	sub	r17,r2,r17
  80e714:	8809883a 	mov	r4,r17
  80e718:	a00b883a 	mov	r5,r20
  80e71c:	080fd880 	call	80fd88 <__udivsi3>
  80e720:	8809883a 	mov	r4,r17
  80e724:	a00b883a 	mov	r5,r20
  80e728:	1021883a 	mov	r16,r2
  80e72c:	080fd900 	call	80fd90 <__umodsi3>
  80e730:	d8c00417 	ldw	r3,16(sp)
  80e734:	d9000217 	ldw	r4,8(sp)
  80e738:	1004943a 	slli	r2,r2,16
  80e73c:	1c23383a 	mul	r17,r3,r16
  80e740:	20ffffcc 	andi	r3,r4,65535
  80e744:	10ceb03a 	or	r7,r2,r3
  80e748:	3c40032e 	bgeu	r7,r17,80e758 <__umoddi3+0x44c>
  80e74c:	3dcf883a 	add	r7,r7,r23
  80e750:	843fffc4 	addi	r16,r16,-1
  80e754:	3dc0472e 	bgeu	r7,r23,80e874 <__umoddi3+0x568>
  80e758:	e004943a 	slli	r2,fp,16
  80e75c:	d9400017 	ldw	r5,0(sp)
  80e760:	3c4fc83a 	sub	r7,r7,r17
  80e764:	8084b03a 	or	r2,r16,r2
  80e768:	28ffffcc 	andi	r3,r5,65535
  80e76c:	280cd43a 	srli	r6,r5,16
  80e770:	100ad43a 	srli	r5,r2,16
  80e774:	10bfffcc 	andi	r2,r2,65535
  80e778:	10d1383a 	mul	r8,r2,r3
  80e77c:	28c7383a 	mul	r3,r5,r3
  80e780:	1185383a 	mul	r2,r2,r6
  80e784:	4008d43a 	srli	r4,r8,16
  80e788:	298b383a 	mul	r5,r5,r6
  80e78c:	10c5883a 	add	r2,r2,r3
  80e790:	2089883a 	add	r4,r4,r2
  80e794:	20c0022e 	bgeu	r4,r3,80e7a0 <__umoddi3+0x494>
  80e798:	00800074 	movhi	r2,1
  80e79c:	288b883a 	add	r5,r5,r2
  80e7a0:	2004d43a 	srli	r2,r4,16
  80e7a4:	2008943a 	slli	r4,r4,16
  80e7a8:	40ffffcc 	andi	r3,r8,65535
  80e7ac:	288b883a 	add	r5,r5,r2
  80e7b0:	20c9883a 	add	r4,r4,r3
  80e7b4:	39400b36 	bltu	r7,r5,80e7e4 <__umoddi3+0x4d8>
  80e7b8:	39403d26 	beq	r7,r5,80e8b0 <__umoddi3+0x5a4>
  80e7bc:	394bc83a 	sub	r5,r7,r5
  80e7c0:	00000f06 	br	80e800 <__umoddi3+0x4f4>
  80e7c4:	30c5c83a 	sub	r2,r6,r3
  80e7c8:	1839883a 	mov	fp,r3
  80e7cc:	b084d83a 	srl	r2,r22,r2
  80e7d0:	a0c6983a 	sll	r3,r20,r3
  80e7d4:	8720983a 	sll	r16,r16,fp
  80e7d8:	b72c983a 	sll	r22,r22,fp
  80e7dc:	18a8b03a 	or	r20,r3,r2
  80e7e0:	003f3a06 	br	80e4cc <__umoddi3+0x1c0>
  80e7e4:	d8c00017 	ldw	r3,0(sp)
  80e7e8:	20c5c83a 	sub	r2,r4,r3
  80e7ec:	2089803a 	cmpltu	r4,r4,r2
  80e7f0:	2dc7c83a 	sub	r3,r5,r23
  80e7f4:	1907c83a 	sub	r3,r3,r4
  80e7f8:	38cbc83a 	sub	r5,r7,r3
  80e7fc:	1009883a 	mov	r4,r2
  80e800:	b105c83a 	sub	r2,r22,r4
  80e804:	b087803a 	cmpltu	r3,r22,r2
  80e808:	28c7c83a 	sub	r3,r5,r3
  80e80c:	d9400317 	ldw	r5,12(sp)
  80e810:	1544d83a 	srl	r2,r2,r21
  80e814:	1948983a 	sll	r4,r3,r5
  80e818:	1d46d83a 	srl	r3,r3,r21
  80e81c:	20a4b03a 	or	r18,r4,r2
  80e820:	9011883a 	mov	r8,r18
  80e824:	1813883a 	mov	r9,r3
  80e828:	003ef606 	br	80e404 <__umoddi3+0xf8>
  80e82c:	01400604 	movi	r5,24
  80e830:	2805883a 	mov	r2,r5
  80e834:	003ecc06 	br	80e368 <__umoddi3+0x5c>
  80e838:	01400204 	movi	r5,8
  80e83c:	2805883a 	mov	r2,r5
  80e840:	003ec906 	br	80e368 <__umoddi3+0x5c>
  80e844:	01400204 	movi	r5,8
  80e848:	2805883a 	mov	r2,r5
  80e84c:	003f0106 	br	80e454 <__umoddi3+0x148>
  80e850:	01400204 	movi	r5,8
  80e854:	2805883a 	mov	r2,r5
  80e858:	003f1206 	br	80e4a4 <__umoddi3+0x198>
  80e85c:	01400604 	movi	r5,24
  80e860:	2805883a 	mov	r2,r5
  80e864:	003f0f06 	br	80e4a4 <__umoddi3+0x198>
  80e868:	01400604 	movi	r5,24
  80e86c:	2805883a 	mov	r2,r5
  80e870:	003ef806 	br	80e454 <__umoddi3+0x148>
  80e874:	3c7fb82e 	bgeu	r7,r17,80e758 <__umoddi3+0x44c>
  80e878:	843fffc4 	addi	r16,r16,-1
  80e87c:	3dcf883a 	add	r7,r7,r23
  80e880:	003fb506 	br	80e758 <__umoddi3+0x44c>
  80e884:	147fa22e 	bgeu	r2,r17,80e710 <__umoddi3+0x404>
  80e888:	e73fffc4 	addi	fp,fp,-1
  80e88c:	15c5883a 	add	r2,r2,r23
  80e890:	003f9f06 	br	80e710 <__umoddi3+0x404>
  80e894:	147f692e 	bgeu	r2,r17,80e63c <__umoddi3+0x330>
  80e898:	1405883a 	add	r2,r2,r16
  80e89c:	003f6706 	br	80e63c <__umoddi3+0x330>
  80e8a0:	1405883a 	add	r2,r2,r16
  80e8a4:	003f1906 	br	80e50c <__umoddi3+0x200>
  80e8a8:	1405883a 	add	r2,r2,r16
  80e8ac:	003ec906 	br	80e3d4 <__umoddi3+0xc8>
  80e8b0:	b13fcc36 	bltu	r22,r4,80e7e4 <__umoddi3+0x4d8>
  80e8b4:	000b883a 	mov	r5,zero
  80e8b8:	003fd106 	br	80e800 <__umoddi3+0x4f4>

0080e8bc <__nesf2>:
  80e8bc:	defff304 	addi	sp,sp,-52
  80e8c0:	dc400b15 	stw	r17,44(sp)
  80e8c4:	dc400204 	addi	r17,sp,8
  80e8c8:	dc000a15 	stw	r16,40(sp)
  80e8cc:	d9000015 	stw	r4,0(sp)
  80e8d0:	d9400115 	stw	r5,4(sp)
  80e8d4:	d809883a 	mov	r4,sp
  80e8d8:	880b883a 	mov	r5,r17
  80e8dc:	dc000604 	addi	r16,sp,24
  80e8e0:	dfc00c15 	stw	ra,48(sp)
  80e8e4:	080fe180 	call	80fe18 <__unpack_f>
  80e8e8:	d9000104 	addi	r4,sp,4
  80e8ec:	800b883a 	mov	r5,r16
  80e8f0:	080fe180 	call	80fe18 <__unpack_f>
  80e8f4:	d8800217 	ldw	r2,8(sp)
  80e8f8:	00c00044 	movi	r3,1
  80e8fc:	180d883a 	mov	r6,r3
  80e900:	1880062e 	bgeu	r3,r2,80e91c <__nesf2+0x60>
  80e904:	d8800617 	ldw	r2,24(sp)
  80e908:	8809883a 	mov	r4,r17
  80e90c:	800b883a 	mov	r5,r16
  80e910:	1880022e 	bgeu	r3,r2,80e91c <__nesf2+0x60>
  80e914:	080fee00 	call	80fee0 <__fpcmp_parts_f>
  80e918:	100d883a 	mov	r6,r2
  80e91c:	3005883a 	mov	r2,r6
  80e920:	dfc00c17 	ldw	ra,48(sp)
  80e924:	dc400b17 	ldw	r17,44(sp)
  80e928:	dc000a17 	ldw	r16,40(sp)
  80e92c:	dec00d04 	addi	sp,sp,52
  80e930:	f800283a 	ret

0080e934 <__gtsf2>:
  80e934:	defff304 	addi	sp,sp,-52
  80e938:	dc400b15 	stw	r17,44(sp)
  80e93c:	dc400204 	addi	r17,sp,8
  80e940:	dc000a15 	stw	r16,40(sp)
  80e944:	d9000015 	stw	r4,0(sp)
  80e948:	d9400115 	stw	r5,4(sp)
  80e94c:	d809883a 	mov	r4,sp
  80e950:	880b883a 	mov	r5,r17
  80e954:	dc000604 	addi	r16,sp,24
  80e958:	dfc00c15 	stw	ra,48(sp)
  80e95c:	080fe180 	call	80fe18 <__unpack_f>
  80e960:	d9000104 	addi	r4,sp,4
  80e964:	800b883a 	mov	r5,r16
  80e968:	080fe180 	call	80fe18 <__unpack_f>
  80e96c:	d8800217 	ldw	r2,8(sp)
  80e970:	00c00044 	movi	r3,1
  80e974:	01bfffc4 	movi	r6,-1
  80e978:	1880062e 	bgeu	r3,r2,80e994 <__gtsf2+0x60>
  80e97c:	d8800617 	ldw	r2,24(sp)
  80e980:	8809883a 	mov	r4,r17
  80e984:	800b883a 	mov	r5,r16
  80e988:	1880022e 	bgeu	r3,r2,80e994 <__gtsf2+0x60>
  80e98c:	080fee00 	call	80fee0 <__fpcmp_parts_f>
  80e990:	100d883a 	mov	r6,r2
  80e994:	3005883a 	mov	r2,r6
  80e998:	dfc00c17 	ldw	ra,48(sp)
  80e99c:	dc400b17 	ldw	r17,44(sp)
  80e9a0:	dc000a17 	ldw	r16,40(sp)
  80e9a4:	dec00d04 	addi	sp,sp,52
  80e9a8:	f800283a 	ret

0080e9ac <__ltsf2>:
  80e9ac:	defff304 	addi	sp,sp,-52
  80e9b0:	dc400b15 	stw	r17,44(sp)
  80e9b4:	dc400204 	addi	r17,sp,8
  80e9b8:	dc000a15 	stw	r16,40(sp)
  80e9bc:	d9000015 	stw	r4,0(sp)
  80e9c0:	d9400115 	stw	r5,4(sp)
  80e9c4:	d809883a 	mov	r4,sp
  80e9c8:	880b883a 	mov	r5,r17
  80e9cc:	dc000604 	addi	r16,sp,24
  80e9d0:	dfc00c15 	stw	ra,48(sp)
  80e9d4:	080fe180 	call	80fe18 <__unpack_f>
  80e9d8:	d9000104 	addi	r4,sp,4
  80e9dc:	800b883a 	mov	r5,r16
  80e9e0:	080fe180 	call	80fe18 <__unpack_f>
  80e9e4:	d8800217 	ldw	r2,8(sp)
  80e9e8:	00c00044 	movi	r3,1
  80e9ec:	180d883a 	mov	r6,r3
  80e9f0:	1880062e 	bgeu	r3,r2,80ea0c <__ltsf2+0x60>
  80e9f4:	d8800617 	ldw	r2,24(sp)
  80e9f8:	8809883a 	mov	r4,r17
  80e9fc:	800b883a 	mov	r5,r16
  80ea00:	1880022e 	bgeu	r3,r2,80ea0c <__ltsf2+0x60>
  80ea04:	080fee00 	call	80fee0 <__fpcmp_parts_f>
  80ea08:	100d883a 	mov	r6,r2
  80ea0c:	3005883a 	mov	r2,r6
  80ea10:	dfc00c17 	ldw	ra,48(sp)
  80ea14:	dc400b17 	ldw	r17,44(sp)
  80ea18:	dc000a17 	ldw	r16,40(sp)
  80ea1c:	dec00d04 	addi	sp,sp,52
  80ea20:	f800283a 	ret

0080ea24 <_fpadd_parts>:
  80ea24:	defff804 	addi	sp,sp,-32
  80ea28:	dcc00315 	stw	r19,12(sp)
  80ea2c:	2027883a 	mov	r19,r4
  80ea30:	21000017 	ldw	r4,0(r4)
  80ea34:	00c00044 	movi	r3,1
  80ea38:	dd400515 	stw	r21,20(sp)
  80ea3c:	dd000415 	stw	r20,16(sp)
  80ea40:	ddc00715 	stw	r23,28(sp)
  80ea44:	dd800615 	stw	r22,24(sp)
  80ea48:	dc800215 	stw	r18,8(sp)
  80ea4c:	dc400115 	stw	r17,4(sp)
  80ea50:	dc000015 	stw	r16,0(sp)
  80ea54:	282b883a 	mov	r21,r5
  80ea58:	3029883a 	mov	r20,r6
  80ea5c:	1900632e 	bgeu	r3,r4,80ebec <_fpadd_parts+0x1c8>
  80ea60:	28800017 	ldw	r2,0(r5)
  80ea64:	1880812e 	bgeu	r3,r2,80ec6c <_fpadd_parts+0x248>
  80ea68:	00c00104 	movi	r3,4
  80ea6c:	20c0dc26 	beq	r4,r3,80ede0 <_fpadd_parts+0x3bc>
  80ea70:	10c07e26 	beq	r2,r3,80ec6c <_fpadd_parts+0x248>
  80ea74:	00c00084 	movi	r3,2
  80ea78:	10c06726 	beq	r2,r3,80ec18 <_fpadd_parts+0x1f4>
  80ea7c:	20c07b26 	beq	r4,r3,80ec6c <_fpadd_parts+0x248>
  80ea80:	9dc00217 	ldw	r23,8(r19)
  80ea84:	28c00217 	ldw	r3,8(r5)
  80ea88:	9c400317 	ldw	r17,12(r19)
  80ea8c:	2bc00317 	ldw	r15,12(r5)
  80ea90:	b8cdc83a 	sub	r6,r23,r3
  80ea94:	9c800417 	ldw	r18,16(r19)
  80ea98:	2c000417 	ldw	r16,16(r5)
  80ea9c:	3009883a 	mov	r4,r6
  80eaa0:	30009716 	blt	r6,zero,80ed00 <_fpadd_parts+0x2dc>
  80eaa4:	00800fc4 	movi	r2,63
  80eaa8:	11806b16 	blt	r2,r6,80ec58 <_fpadd_parts+0x234>
  80eaac:	0100a40e 	bge	zero,r4,80ed40 <_fpadd_parts+0x31c>
  80eab0:	35bff804 	addi	r22,r6,-32
  80eab4:	b000bc16 	blt	r22,zero,80eda8 <_fpadd_parts+0x384>
  80eab8:	8596d83a 	srl	r11,r16,r22
  80eabc:	0019883a 	mov	r12,zero
  80eac0:	0013883a 	mov	r9,zero
  80eac4:	01000044 	movi	r4,1
  80eac8:	0015883a 	mov	r10,zero
  80eacc:	b000be16 	blt	r22,zero,80edc8 <_fpadd_parts+0x3a4>
  80ead0:	2590983a 	sll	r8,r4,r22
  80ead4:	000f883a 	mov	r7,zero
  80ead8:	00bfffc4 	movi	r2,-1
  80eadc:	3889883a 	add	r4,r7,r2
  80eae0:	408b883a 	add	r5,r8,r2
  80eae4:	21cd803a 	cmpltu	r6,r4,r7
  80eae8:	314b883a 	add	r5,r6,r5
  80eaec:	7904703a 	and	r2,r15,r4
  80eaf0:	8146703a 	and	r3,r16,r5
  80eaf4:	10c4b03a 	or	r2,r2,r3
  80eaf8:	10000226 	beq	r2,zero,80eb04 <_fpadd_parts+0xe0>
  80eafc:	02400044 	movi	r9,1
  80eb00:	0015883a 	mov	r10,zero
  80eb04:	5a5eb03a 	or	r15,r11,r9
  80eb08:	62a0b03a 	or	r16,r12,r10
  80eb0c:	99400117 	ldw	r5,4(r19)
  80eb10:	a8800117 	ldw	r2,4(r21)
  80eb14:	28806e26 	beq	r5,r2,80ecd0 <_fpadd_parts+0x2ac>
  80eb18:	28006626 	beq	r5,zero,80ecb4 <_fpadd_parts+0x290>
  80eb1c:	7c45c83a 	sub	r2,r15,r17
  80eb20:	7889803a 	cmpltu	r4,r15,r2
  80eb24:	8487c83a 	sub	r3,r16,r18
  80eb28:	1909c83a 	sub	r4,r3,r4
  80eb2c:	100d883a 	mov	r6,r2
  80eb30:	200f883a 	mov	r7,r4
  80eb34:	38007716 	blt	r7,zero,80ed14 <_fpadd_parts+0x2f0>
  80eb38:	a5c00215 	stw	r23,8(r20)
  80eb3c:	a1c00415 	stw	r7,16(r20)
  80eb40:	a0000115 	stw	zero,4(r20)
  80eb44:	a1800315 	stw	r6,12(r20)
  80eb48:	a2000317 	ldw	r8,12(r20)
  80eb4c:	a2400417 	ldw	r9,16(r20)
  80eb50:	00bfffc4 	movi	r2,-1
  80eb54:	408b883a 	add	r5,r8,r2
  80eb58:	2a09803a 	cmpltu	r4,r5,r8
  80eb5c:	488d883a 	add	r6,r9,r2
  80eb60:	01c40034 	movhi	r7,4096
  80eb64:	39ffffc4 	addi	r7,r7,-1
  80eb68:	218d883a 	add	r6,r4,r6
  80eb6c:	39801736 	bltu	r7,r6,80ebcc <_fpadd_parts+0x1a8>
  80eb70:	31c06526 	beq	r6,r7,80ed08 <_fpadd_parts+0x2e4>
  80eb74:	a3000217 	ldw	r12,8(r20)
  80eb78:	4209883a 	add	r4,r8,r8
  80eb7c:	00bfffc4 	movi	r2,-1
  80eb80:	220f803a 	cmpltu	r7,r4,r8
  80eb84:	4a4b883a 	add	r5,r9,r9
  80eb88:	394f883a 	add	r7,r7,r5
  80eb8c:	2095883a 	add	r10,r4,r2
  80eb90:	3897883a 	add	r11,r7,r2
  80eb94:	510d803a 	cmpltu	r6,r10,r4
  80eb98:	6099883a 	add	r12,r12,r2
  80eb9c:	32d7883a 	add	r11,r6,r11
  80eba0:	00840034 	movhi	r2,4096
  80eba4:	10bfffc4 	addi	r2,r2,-1
  80eba8:	2011883a 	mov	r8,r4
  80ebac:	3813883a 	mov	r9,r7
  80ebb0:	a1000315 	stw	r4,12(r20)
  80ebb4:	a1c00415 	stw	r7,16(r20)
  80ebb8:	a3000215 	stw	r12,8(r20)
  80ebbc:	12c00336 	bltu	r2,r11,80ebcc <_fpadd_parts+0x1a8>
  80ebc0:	58bfed1e 	bne	r11,r2,80eb78 <_fpadd_parts+0x154>
  80ebc4:	00bfff84 	movi	r2,-2
  80ebc8:	12bfeb2e 	bgeu	r2,r10,80eb78 <_fpadd_parts+0x154>
  80ebcc:	a2800417 	ldw	r10,16(r20)
  80ebd0:	008000c4 	movi	r2,3
  80ebd4:	00c80034 	movhi	r3,8192
  80ebd8:	18ffffc4 	addi	r3,r3,-1
  80ebdc:	a2400317 	ldw	r9,12(r20)
  80ebe0:	a0800015 	stw	r2,0(r20)
  80ebe4:	1a802336 	bltu	r3,r10,80ec74 <_fpadd_parts+0x250>
  80ebe8:	a027883a 	mov	r19,r20
  80ebec:	9805883a 	mov	r2,r19
  80ebf0:	ddc00717 	ldw	r23,28(sp)
  80ebf4:	dd800617 	ldw	r22,24(sp)
  80ebf8:	dd400517 	ldw	r21,20(sp)
  80ebfc:	dd000417 	ldw	r20,16(sp)
  80ec00:	dcc00317 	ldw	r19,12(sp)
  80ec04:	dc800217 	ldw	r18,8(sp)
  80ec08:	dc400117 	ldw	r17,4(sp)
  80ec0c:	dc000017 	ldw	r16,0(sp)
  80ec10:	dec00804 	addi	sp,sp,32
  80ec14:	f800283a 	ret
  80ec18:	20fff41e 	bne	r4,r3,80ebec <_fpadd_parts+0x1c8>
  80ec1c:	31000015 	stw	r4,0(r6)
  80ec20:	98800117 	ldw	r2,4(r19)
  80ec24:	30800115 	stw	r2,4(r6)
  80ec28:	98c00217 	ldw	r3,8(r19)
  80ec2c:	30c00215 	stw	r3,8(r6)
  80ec30:	98800317 	ldw	r2,12(r19)
  80ec34:	30800315 	stw	r2,12(r6)
  80ec38:	98c00417 	ldw	r3,16(r19)
  80ec3c:	30c00415 	stw	r3,16(r6)
  80ec40:	98800117 	ldw	r2,4(r19)
  80ec44:	28c00117 	ldw	r3,4(r5)
  80ec48:	3027883a 	mov	r19,r6
  80ec4c:	10c4703a 	and	r2,r2,r3
  80ec50:	30800115 	stw	r2,4(r6)
  80ec54:	003fe506 	br	80ebec <_fpadd_parts+0x1c8>
  80ec58:	1dc02616 	blt	r3,r23,80ecf4 <_fpadd_parts+0x2d0>
  80ec5c:	0023883a 	mov	r17,zero
  80ec60:	182f883a 	mov	r23,r3
  80ec64:	0025883a 	mov	r18,zero
  80ec68:	003fa806 	br	80eb0c <_fpadd_parts+0xe8>
  80ec6c:	a827883a 	mov	r19,r21
  80ec70:	003fde06 	br	80ebec <_fpadd_parts+0x1c8>
  80ec74:	01800044 	movi	r6,1
  80ec78:	500497fa 	slli	r2,r10,31
  80ec7c:	4808d07a 	srli	r4,r9,1
  80ec80:	518ad83a 	srl	r5,r10,r6
  80ec84:	a2000217 	ldw	r8,8(r20)
  80ec88:	1108b03a 	or	r4,r2,r4
  80ec8c:	0007883a 	mov	r3,zero
  80ec90:	4984703a 	and	r2,r9,r6
  80ec94:	208cb03a 	or	r6,r4,r2
  80ec98:	28ceb03a 	or	r7,r5,r3
  80ec9c:	42000044 	addi	r8,r8,1
  80eca0:	a027883a 	mov	r19,r20
  80eca4:	a1c00415 	stw	r7,16(r20)
  80eca8:	a2000215 	stw	r8,8(r20)
  80ecac:	a1800315 	stw	r6,12(r20)
  80ecb0:	003fce06 	br	80ebec <_fpadd_parts+0x1c8>
  80ecb4:	8bc5c83a 	sub	r2,r17,r15
  80ecb8:	8889803a 	cmpltu	r4,r17,r2
  80ecbc:	9407c83a 	sub	r3,r18,r16
  80ecc0:	1909c83a 	sub	r4,r3,r4
  80ecc4:	100d883a 	mov	r6,r2
  80ecc8:	200f883a 	mov	r7,r4
  80eccc:	003f9906 	br	80eb34 <_fpadd_parts+0x110>
  80ecd0:	7c45883a 	add	r2,r15,r17
  80ecd4:	13c9803a 	cmpltu	r4,r2,r15
  80ecd8:	8487883a 	add	r3,r16,r18
  80ecdc:	20c9883a 	add	r4,r4,r3
  80ece0:	a1400115 	stw	r5,4(r20)
  80ece4:	a5c00215 	stw	r23,8(r20)
  80ece8:	a0800315 	stw	r2,12(r20)
  80ecec:	a1000415 	stw	r4,16(r20)
  80ecf0:	003fb606 	br	80ebcc <_fpadd_parts+0x1a8>
  80ecf4:	001f883a 	mov	r15,zero
  80ecf8:	0021883a 	mov	r16,zero
  80ecfc:	003f8306 	br	80eb0c <_fpadd_parts+0xe8>
  80ed00:	018dc83a 	sub	r6,zero,r6
  80ed04:	003f6706 	br	80eaa4 <_fpadd_parts+0x80>
  80ed08:	00bfff84 	movi	r2,-2
  80ed0c:	117faf36 	bltu	r2,r5,80ebcc <_fpadd_parts+0x1a8>
  80ed10:	003f9806 	br	80eb74 <_fpadd_parts+0x150>
  80ed14:	0005883a 	mov	r2,zero
  80ed18:	1189c83a 	sub	r4,r2,r6
  80ed1c:	1105803a 	cmpltu	r2,r2,r4
  80ed20:	01cbc83a 	sub	r5,zero,r7
  80ed24:	2885c83a 	sub	r2,r5,r2
  80ed28:	01800044 	movi	r6,1
  80ed2c:	a1800115 	stw	r6,4(r20)
  80ed30:	a5c00215 	stw	r23,8(r20)
  80ed34:	a1000315 	stw	r4,12(r20)
  80ed38:	a0800415 	stw	r2,16(r20)
  80ed3c:	003f8206 	br	80eb48 <_fpadd_parts+0x124>
  80ed40:	203f7226 	beq	r4,zero,80eb0c <_fpadd_parts+0xe8>
  80ed44:	35bff804 	addi	r22,r6,-32
  80ed48:	b9af883a 	add	r23,r23,r6
  80ed4c:	b0003116 	blt	r22,zero,80ee14 <_fpadd_parts+0x3f0>
  80ed50:	959ad83a 	srl	r13,r18,r22
  80ed54:	001d883a 	mov	r14,zero
  80ed58:	000f883a 	mov	r7,zero
  80ed5c:	01000044 	movi	r4,1
  80ed60:	0011883a 	mov	r8,zero
  80ed64:	b0002516 	blt	r22,zero,80edfc <_fpadd_parts+0x3d8>
  80ed68:	2594983a 	sll	r10,r4,r22
  80ed6c:	0013883a 	mov	r9,zero
  80ed70:	00bfffc4 	movi	r2,-1
  80ed74:	4889883a 	add	r4,r9,r2
  80ed78:	508b883a 	add	r5,r10,r2
  80ed7c:	224d803a 	cmpltu	r6,r4,r9
  80ed80:	314b883a 	add	r5,r6,r5
  80ed84:	8904703a 	and	r2,r17,r4
  80ed88:	9146703a 	and	r3,r18,r5
  80ed8c:	10c4b03a 	or	r2,r2,r3
  80ed90:	10000226 	beq	r2,zero,80ed9c <_fpadd_parts+0x378>
  80ed94:	01c00044 	movi	r7,1
  80ed98:	0011883a 	mov	r8,zero
  80ed9c:	69e2b03a 	or	r17,r13,r7
  80eda0:	7224b03a 	or	r18,r14,r8
  80eda4:	003f5906 	br	80eb0c <_fpadd_parts+0xe8>
  80eda8:	8407883a 	add	r3,r16,r16
  80edac:	008007c4 	movi	r2,31
  80edb0:	1185c83a 	sub	r2,r2,r6
  80edb4:	1886983a 	sll	r3,r3,r2
  80edb8:	7996d83a 	srl	r11,r15,r6
  80edbc:	8198d83a 	srl	r12,r16,r6
  80edc0:	1ad6b03a 	or	r11,r3,r11
  80edc4:	003f3e06 	br	80eac0 <_fpadd_parts+0x9c>
  80edc8:	2006d07a 	srli	r3,r4,1
  80edcc:	008007c4 	movi	r2,31
  80edd0:	1185c83a 	sub	r2,r2,r6
  80edd4:	1890d83a 	srl	r8,r3,r2
  80edd8:	218e983a 	sll	r7,r4,r6
  80eddc:	003f3e06 	br	80ead8 <_fpadd_parts+0xb4>
  80ede0:	113f821e 	bne	r2,r4,80ebec <_fpadd_parts+0x1c8>
  80ede4:	28c00117 	ldw	r3,4(r5)
  80ede8:	98800117 	ldw	r2,4(r19)
  80edec:	10ff7f26 	beq	r2,r3,80ebec <_fpadd_parts+0x1c8>
  80edf0:	04c02074 	movhi	r19,129
  80edf4:	9cd4c904 	addi	r19,r19,21284
  80edf8:	003f7c06 	br	80ebec <_fpadd_parts+0x1c8>
  80edfc:	2006d07a 	srli	r3,r4,1
  80ee00:	008007c4 	movi	r2,31
  80ee04:	1185c83a 	sub	r2,r2,r6
  80ee08:	1894d83a 	srl	r10,r3,r2
  80ee0c:	2192983a 	sll	r9,r4,r6
  80ee10:	003fd706 	br	80ed70 <_fpadd_parts+0x34c>
  80ee14:	9487883a 	add	r3,r18,r18
  80ee18:	008007c4 	movi	r2,31
  80ee1c:	1185c83a 	sub	r2,r2,r6
  80ee20:	1886983a 	sll	r3,r3,r2
  80ee24:	899ad83a 	srl	r13,r17,r6
  80ee28:	919cd83a 	srl	r14,r18,r6
  80ee2c:	1b5ab03a 	or	r13,r3,r13
  80ee30:	003fc906 	br	80ed58 <_fpadd_parts+0x334>

0080ee34 <__subdf3>:
  80ee34:	deffea04 	addi	sp,sp,-88
  80ee38:	dcc01415 	stw	r19,80(sp)
  80ee3c:	dcc00404 	addi	r19,sp,16
  80ee40:	2011883a 	mov	r8,r4
  80ee44:	2813883a 	mov	r9,r5
  80ee48:	dc401315 	stw	r17,76(sp)
  80ee4c:	d809883a 	mov	r4,sp
  80ee50:	980b883a 	mov	r5,r19
  80ee54:	dc400904 	addi	r17,sp,36
  80ee58:	dfc01515 	stw	ra,84(sp)
  80ee5c:	da400115 	stw	r9,4(sp)
  80ee60:	d9c00315 	stw	r7,12(sp)
  80ee64:	da000015 	stw	r8,0(sp)
  80ee68:	d9800215 	stw	r6,8(sp)
  80ee6c:	08102c80 	call	8102c8 <__unpack_d>
  80ee70:	d9000204 	addi	r4,sp,8
  80ee74:	880b883a 	mov	r5,r17
  80ee78:	08102c80 	call	8102c8 <__unpack_d>
  80ee7c:	d8800a17 	ldw	r2,40(sp)
  80ee80:	880b883a 	mov	r5,r17
  80ee84:	9809883a 	mov	r4,r19
  80ee88:	d9800e04 	addi	r6,sp,56
  80ee8c:	1080005c 	xori	r2,r2,1
  80ee90:	d8800a15 	stw	r2,40(sp)
  80ee94:	080ea240 	call	80ea24 <_fpadd_parts>
  80ee98:	1009883a 	mov	r4,r2
  80ee9c:	080ffb40 	call	80ffb4 <__pack_d>
  80eea0:	dfc01517 	ldw	ra,84(sp)
  80eea4:	dcc01417 	ldw	r19,80(sp)
  80eea8:	dc401317 	ldw	r17,76(sp)
  80eeac:	dec01604 	addi	sp,sp,88
  80eeb0:	f800283a 	ret

0080eeb4 <__adddf3>:
  80eeb4:	deffea04 	addi	sp,sp,-88
  80eeb8:	dcc01415 	stw	r19,80(sp)
  80eebc:	dcc00404 	addi	r19,sp,16
  80eec0:	2011883a 	mov	r8,r4
  80eec4:	2813883a 	mov	r9,r5
  80eec8:	dc401315 	stw	r17,76(sp)
  80eecc:	d809883a 	mov	r4,sp
  80eed0:	980b883a 	mov	r5,r19
  80eed4:	dc400904 	addi	r17,sp,36
  80eed8:	dfc01515 	stw	ra,84(sp)
  80eedc:	da400115 	stw	r9,4(sp)
  80eee0:	d9c00315 	stw	r7,12(sp)
  80eee4:	da000015 	stw	r8,0(sp)
  80eee8:	d9800215 	stw	r6,8(sp)
  80eeec:	08102c80 	call	8102c8 <__unpack_d>
  80eef0:	d9000204 	addi	r4,sp,8
  80eef4:	880b883a 	mov	r5,r17
  80eef8:	08102c80 	call	8102c8 <__unpack_d>
  80eefc:	d9800e04 	addi	r6,sp,56
  80ef00:	9809883a 	mov	r4,r19
  80ef04:	880b883a 	mov	r5,r17
  80ef08:	080ea240 	call	80ea24 <_fpadd_parts>
  80ef0c:	1009883a 	mov	r4,r2
  80ef10:	080ffb40 	call	80ffb4 <__pack_d>
  80ef14:	dfc01517 	ldw	ra,84(sp)
  80ef18:	dcc01417 	ldw	r19,80(sp)
  80ef1c:	dc401317 	ldw	r17,76(sp)
  80ef20:	dec01604 	addi	sp,sp,88
  80ef24:	f800283a 	ret

0080ef28 <__muldf3>:
  80ef28:	deffe004 	addi	sp,sp,-128
  80ef2c:	dc401815 	stw	r17,96(sp)
  80ef30:	dc400404 	addi	r17,sp,16
  80ef34:	2011883a 	mov	r8,r4
  80ef38:	2813883a 	mov	r9,r5
  80ef3c:	dc001715 	stw	r16,92(sp)
  80ef40:	d809883a 	mov	r4,sp
  80ef44:	880b883a 	mov	r5,r17
  80ef48:	dc000904 	addi	r16,sp,36
  80ef4c:	dfc01f15 	stw	ra,124(sp)
  80ef50:	da400115 	stw	r9,4(sp)
  80ef54:	d9c00315 	stw	r7,12(sp)
  80ef58:	da000015 	stw	r8,0(sp)
  80ef5c:	d9800215 	stw	r6,8(sp)
  80ef60:	ddc01e15 	stw	r23,120(sp)
  80ef64:	dd801d15 	stw	r22,116(sp)
  80ef68:	dd401c15 	stw	r21,112(sp)
  80ef6c:	dd001b15 	stw	r20,108(sp)
  80ef70:	dcc01a15 	stw	r19,104(sp)
  80ef74:	dc801915 	stw	r18,100(sp)
  80ef78:	08102c80 	call	8102c8 <__unpack_d>
  80ef7c:	d9000204 	addi	r4,sp,8
  80ef80:	800b883a 	mov	r5,r16
  80ef84:	08102c80 	call	8102c8 <__unpack_d>
  80ef88:	d9000417 	ldw	r4,16(sp)
  80ef8c:	00800044 	movi	r2,1
  80ef90:	1100102e 	bgeu	r2,r4,80efd4 <__muldf3+0xac>
  80ef94:	d8c00917 	ldw	r3,36(sp)
  80ef98:	10c0062e 	bgeu	r2,r3,80efb4 <__muldf3+0x8c>
  80ef9c:	00800104 	movi	r2,4
  80efa0:	20800a26 	beq	r4,r2,80efcc <__muldf3+0xa4>
  80efa4:	1880cc26 	beq	r3,r2,80f2d8 <__muldf3+0x3b0>
  80efa8:	00800084 	movi	r2,2
  80efac:	20800926 	beq	r4,r2,80efd4 <__muldf3+0xac>
  80efb0:	1880191e 	bne	r3,r2,80f018 <__muldf3+0xf0>
  80efb4:	d8c00a17 	ldw	r3,40(sp)
  80efb8:	d8800517 	ldw	r2,20(sp)
  80efbc:	8009883a 	mov	r4,r16
  80efc0:	10c4c03a 	cmpne	r2,r2,r3
  80efc4:	d8800a15 	stw	r2,40(sp)
  80efc8:	00000706 	br	80efe8 <__muldf3+0xc0>
  80efcc:	00800084 	movi	r2,2
  80efd0:	1880c326 	beq	r3,r2,80f2e0 <__muldf3+0x3b8>
  80efd4:	d8800517 	ldw	r2,20(sp)
  80efd8:	d8c00a17 	ldw	r3,40(sp)
  80efdc:	8809883a 	mov	r4,r17
  80efe0:	10c4c03a 	cmpne	r2,r2,r3
  80efe4:	d8800515 	stw	r2,20(sp)
  80efe8:	080ffb40 	call	80ffb4 <__pack_d>
  80efec:	dfc01f17 	ldw	ra,124(sp)
  80eff0:	ddc01e17 	ldw	r23,120(sp)
  80eff4:	dd801d17 	ldw	r22,116(sp)
  80eff8:	dd401c17 	ldw	r21,112(sp)
  80effc:	dd001b17 	ldw	r20,108(sp)
  80f000:	dcc01a17 	ldw	r19,104(sp)
  80f004:	dc801917 	ldw	r18,100(sp)
  80f008:	dc401817 	ldw	r17,96(sp)
  80f00c:	dc001717 	ldw	r16,92(sp)
  80f010:	dec02004 	addi	sp,sp,128
  80f014:	f800283a 	ret
  80f018:	dd800717 	ldw	r22,28(sp)
  80f01c:	dc800c17 	ldw	r18,48(sp)
  80f020:	002b883a 	mov	r21,zero
  80f024:	0023883a 	mov	r17,zero
  80f028:	a80b883a 	mov	r5,r21
  80f02c:	b00d883a 	mov	r6,r22
  80f030:	880f883a 	mov	r7,r17
  80f034:	ddc00817 	ldw	r23,32(sp)
  80f038:	dcc00d17 	ldw	r19,52(sp)
  80f03c:	9009883a 	mov	r4,r18
  80f040:	080dbf40 	call	80dbf4 <__muldi3>
  80f044:	001b883a 	mov	r13,zero
  80f048:	680f883a 	mov	r7,r13
  80f04c:	b009883a 	mov	r4,r22
  80f050:	000b883a 	mov	r5,zero
  80f054:	980d883a 	mov	r6,r19
  80f058:	b82d883a 	mov	r22,r23
  80f05c:	002f883a 	mov	r23,zero
  80f060:	db401615 	stw	r13,88(sp)
  80f064:	d8801315 	stw	r2,76(sp)
  80f068:	d8c01415 	stw	r3,80(sp)
  80f06c:	dcc01515 	stw	r19,84(sp)
  80f070:	080dbf40 	call	80dbf4 <__muldi3>
  80f074:	b00d883a 	mov	r6,r22
  80f078:	000b883a 	mov	r5,zero
  80f07c:	9009883a 	mov	r4,r18
  80f080:	b80f883a 	mov	r7,r23
  80f084:	1021883a 	mov	r16,r2
  80f088:	1823883a 	mov	r17,r3
  80f08c:	080dbf40 	call	80dbf4 <__muldi3>
  80f090:	8085883a 	add	r2,r16,r2
  80f094:	140d803a 	cmpltu	r6,r2,r16
  80f098:	88c7883a 	add	r3,r17,r3
  80f09c:	30cd883a 	add	r6,r6,r3
  80f0a0:	1029883a 	mov	r20,r2
  80f0a4:	302b883a 	mov	r21,r6
  80f0a8:	da801317 	ldw	r10,76(sp)
  80f0ac:	dac01417 	ldw	r11,80(sp)
  80f0b0:	db001517 	ldw	r12,84(sp)
  80f0b4:	db401617 	ldw	r13,88(sp)
  80f0b8:	3440612e 	bgeu	r6,r17,80f240 <__muldf3+0x318>
  80f0bc:	0009883a 	mov	r4,zero
  80f0c0:	5105883a 	add	r2,r10,r4
  80f0c4:	128d803a 	cmpltu	r6,r2,r10
  80f0c8:	5d07883a 	add	r3,r11,r20
  80f0cc:	30cd883a 	add	r6,r6,r3
  80f0d0:	0021883a 	mov	r16,zero
  80f0d4:	04400044 	movi	r17,1
  80f0d8:	1025883a 	mov	r18,r2
  80f0dc:	3027883a 	mov	r19,r6
  80f0e0:	32c06236 	bltu	r6,r11,80f26c <__muldf3+0x344>
  80f0e4:	59807a26 	beq	r11,r6,80f2d0 <__muldf3+0x3a8>
  80f0e8:	680b883a 	mov	r5,r13
  80f0ec:	b80f883a 	mov	r7,r23
  80f0f0:	6009883a 	mov	r4,r12
  80f0f4:	b00d883a 	mov	r6,r22
  80f0f8:	080dbf40 	call	80dbf4 <__muldi3>
  80f0fc:	1009883a 	mov	r4,r2
  80f100:	000f883a 	mov	r7,zero
  80f104:	1545883a 	add	r2,r2,r21
  80f108:	1111803a 	cmpltu	r8,r2,r4
  80f10c:	19c7883a 	add	r3,r3,r7
  80f110:	40c7883a 	add	r3,r8,r3
  80f114:	88cb883a 	add	r5,r17,r3
  80f118:	d8c00617 	ldw	r3,24(sp)
  80f11c:	8089883a 	add	r4,r16,r2
  80f120:	d8800b17 	ldw	r2,44(sp)
  80f124:	18c00104 	addi	r3,r3,4
  80f128:	240d803a 	cmpltu	r6,r4,r16
  80f12c:	10c7883a 	add	r3,r2,r3
  80f130:	2013883a 	mov	r9,r4
  80f134:	d8800a17 	ldw	r2,40(sp)
  80f138:	d9000517 	ldw	r4,20(sp)
  80f13c:	314d883a 	add	r6,r6,r5
  80f140:	3015883a 	mov	r10,r6
  80f144:	2088c03a 	cmpne	r4,r4,r2
  80f148:	00880034 	movhi	r2,8192
  80f14c:	10bfffc4 	addi	r2,r2,-1
  80f150:	d9000f15 	stw	r4,60(sp)
  80f154:	d8c01015 	stw	r3,64(sp)
  80f158:	1180162e 	bgeu	r2,r6,80f1b4 <__muldf3+0x28c>
  80f15c:	1811883a 	mov	r8,r3
  80f160:	101f883a 	mov	r15,r2
  80f164:	980497fa 	slli	r2,r19,31
  80f168:	9016d07a 	srli	r11,r18,1
  80f16c:	500697fa 	slli	r3,r10,31
  80f170:	480cd07a 	srli	r6,r9,1
  80f174:	500ed07a 	srli	r7,r10,1
  80f178:	12d6b03a 	or	r11,r2,r11
  80f17c:	00800044 	movi	r2,1
  80f180:	198cb03a 	or	r6,r3,r6
  80f184:	4888703a 	and	r4,r9,r2
  80f188:	9818d07a 	srli	r12,r19,1
  80f18c:	001b883a 	mov	r13,zero
  80f190:	03a00034 	movhi	r14,32768
  80f194:	3013883a 	mov	r9,r6
  80f198:	3815883a 	mov	r10,r7
  80f19c:	4091883a 	add	r8,r8,r2
  80f1a0:	20000226 	beq	r4,zero,80f1ac <__muldf3+0x284>
  80f1a4:	5b64b03a 	or	r18,r11,r13
  80f1a8:	63a6b03a 	or	r19,r12,r14
  80f1ac:	7abfed36 	bltu	r15,r10,80f164 <__muldf3+0x23c>
  80f1b0:	da001015 	stw	r8,64(sp)
  80f1b4:	00840034 	movhi	r2,4096
  80f1b8:	10bfffc4 	addi	r2,r2,-1
  80f1bc:	12801436 	bltu	r2,r10,80f210 <__muldf3+0x2e8>
  80f1c0:	da001017 	ldw	r8,64(sp)
  80f1c4:	101f883a 	mov	r15,r2
  80f1c8:	4a45883a 	add	r2,r9,r9
  80f1cc:	124d803a 	cmpltu	r6,r2,r9
  80f1d0:	5287883a 	add	r3,r10,r10
  80f1d4:	9497883a 	add	r11,r18,r18
  80f1d8:	5c8f803a 	cmpltu	r7,r11,r18
  80f1dc:	9cd9883a 	add	r12,r19,r19
  80f1e0:	01000044 	movi	r4,1
  80f1e4:	30cd883a 	add	r6,r6,r3
  80f1e8:	3b0f883a 	add	r7,r7,r12
  80f1ec:	423fffc4 	addi	r8,r8,-1
  80f1f0:	1013883a 	mov	r9,r2
  80f1f4:	3015883a 	mov	r10,r6
  80f1f8:	111ab03a 	or	r13,r2,r4
  80f1fc:	98003016 	blt	r19,zero,80f2c0 <__muldf3+0x398>
  80f200:	5825883a 	mov	r18,r11
  80f204:	3827883a 	mov	r19,r7
  80f208:	7abfef2e 	bgeu	r15,r10,80f1c8 <__muldf3+0x2a0>
  80f20c:	da001015 	stw	r8,64(sp)
  80f210:	00803fc4 	movi	r2,255
  80f214:	488e703a 	and	r7,r9,r2
  80f218:	00802004 	movi	r2,128
  80f21c:	0007883a 	mov	r3,zero
  80f220:	0011883a 	mov	r8,zero
  80f224:	38801826 	beq	r7,r2,80f288 <__muldf3+0x360>
  80f228:	008000c4 	movi	r2,3
  80f22c:	d9000e04 	addi	r4,sp,56
  80f230:	da801215 	stw	r10,72(sp)
  80f234:	d8800e15 	stw	r2,56(sp)
  80f238:	da401115 	stw	r9,68(sp)
  80f23c:	003f6a06 	br	80efe8 <__muldf3+0xc0>
  80f240:	89802126 	beq	r17,r6,80f2c8 <__muldf3+0x3a0>
  80f244:	0009883a 	mov	r4,zero
  80f248:	5105883a 	add	r2,r10,r4
  80f24c:	128d803a 	cmpltu	r6,r2,r10
  80f250:	5d07883a 	add	r3,r11,r20
  80f254:	30cd883a 	add	r6,r6,r3
  80f258:	0021883a 	mov	r16,zero
  80f25c:	0023883a 	mov	r17,zero
  80f260:	1025883a 	mov	r18,r2
  80f264:	3027883a 	mov	r19,r6
  80f268:	32ff9e2e 	bgeu	r6,r11,80f0e4 <__muldf3+0x1bc>
  80f26c:	00800044 	movi	r2,1
  80f270:	8089883a 	add	r4,r16,r2
  80f274:	240d803a 	cmpltu	r6,r4,r16
  80f278:	344d883a 	add	r6,r6,r17
  80f27c:	2021883a 	mov	r16,r4
  80f280:	3023883a 	mov	r17,r6
  80f284:	003f9806 	br	80f0e8 <__muldf3+0x1c0>
  80f288:	403fe71e 	bne	r8,zero,80f228 <__muldf3+0x300>
  80f28c:	01004004 	movi	r4,256
  80f290:	4904703a 	and	r2,r9,r4
  80f294:	10c4b03a 	or	r2,r2,r3
  80f298:	103fe31e 	bne	r2,zero,80f228 <__muldf3+0x300>
  80f29c:	94c4b03a 	or	r2,r18,r19
  80f2a0:	103fe126 	beq	r2,zero,80f228 <__muldf3+0x300>
  80f2a4:	49c5883a 	add	r2,r9,r7
  80f2a8:	1251803a 	cmpltu	r8,r2,r9
  80f2ac:	4291883a 	add	r8,r8,r10
  80f2b0:	013fc004 	movi	r4,-256
  80f2b4:	1112703a 	and	r9,r2,r4
  80f2b8:	4015883a 	mov	r10,r8
  80f2bc:	003fda06 	br	80f228 <__muldf3+0x300>
  80f2c0:	6813883a 	mov	r9,r13
  80f2c4:	003fce06 	br	80f200 <__muldf3+0x2d8>
  80f2c8:	143f7c36 	bltu	r2,r16,80f0bc <__muldf3+0x194>
  80f2cc:	003fdd06 	br	80f244 <__muldf3+0x31c>
  80f2d0:	12bf852e 	bgeu	r2,r10,80f0e8 <__muldf3+0x1c0>
  80f2d4:	003fe506 	br	80f26c <__muldf3+0x344>
  80f2d8:	00800084 	movi	r2,2
  80f2dc:	20bf351e 	bne	r4,r2,80efb4 <__muldf3+0x8c>
  80f2e0:	01002074 	movhi	r4,129
  80f2e4:	2114c904 	addi	r4,r4,21284
  80f2e8:	003f3f06 	br	80efe8 <__muldf3+0xc0>

0080f2ec <__divdf3>:
  80f2ec:	deffed04 	addi	sp,sp,-76
  80f2f0:	dcc01115 	stw	r19,68(sp)
  80f2f4:	dcc00404 	addi	r19,sp,16
  80f2f8:	2011883a 	mov	r8,r4
  80f2fc:	2813883a 	mov	r9,r5
  80f300:	dc000e15 	stw	r16,56(sp)
  80f304:	d809883a 	mov	r4,sp
  80f308:	980b883a 	mov	r5,r19
  80f30c:	dc000904 	addi	r16,sp,36
  80f310:	dfc01215 	stw	ra,72(sp)
  80f314:	da400115 	stw	r9,4(sp)
  80f318:	d9c00315 	stw	r7,12(sp)
  80f31c:	da000015 	stw	r8,0(sp)
  80f320:	d9800215 	stw	r6,8(sp)
  80f324:	dc801015 	stw	r18,64(sp)
  80f328:	dc400f15 	stw	r17,60(sp)
  80f32c:	08102c80 	call	8102c8 <__unpack_d>
  80f330:	d9000204 	addi	r4,sp,8
  80f334:	800b883a 	mov	r5,r16
  80f338:	08102c80 	call	8102c8 <__unpack_d>
  80f33c:	d9000417 	ldw	r4,16(sp)
  80f340:	00800044 	movi	r2,1
  80f344:	11000b2e 	bgeu	r2,r4,80f374 <__divdf3+0x88>
  80f348:	d9400917 	ldw	r5,36(sp)
  80f34c:	1140762e 	bgeu	r2,r5,80f528 <__divdf3+0x23c>
  80f350:	d8800517 	ldw	r2,20(sp)
  80f354:	d8c00a17 	ldw	r3,40(sp)
  80f358:	01800104 	movi	r6,4
  80f35c:	10c4f03a 	xor	r2,r2,r3
  80f360:	d8800515 	stw	r2,20(sp)
  80f364:	21800226 	beq	r4,r6,80f370 <__divdf3+0x84>
  80f368:	00800084 	movi	r2,2
  80f36c:	2080141e 	bne	r4,r2,80f3c0 <__divdf3+0xd4>
  80f370:	29000926 	beq	r5,r4,80f398 <__divdf3+0xac>
  80f374:	9809883a 	mov	r4,r19
  80f378:	080ffb40 	call	80ffb4 <__pack_d>
  80f37c:	dfc01217 	ldw	ra,72(sp)
  80f380:	dcc01117 	ldw	r19,68(sp)
  80f384:	dc801017 	ldw	r18,64(sp)
  80f388:	dc400f17 	ldw	r17,60(sp)
  80f38c:	dc000e17 	ldw	r16,56(sp)
  80f390:	dec01304 	addi	sp,sp,76
  80f394:	f800283a 	ret
  80f398:	01002074 	movhi	r4,129
  80f39c:	2114c904 	addi	r4,r4,21284
  80f3a0:	080ffb40 	call	80ffb4 <__pack_d>
  80f3a4:	dfc01217 	ldw	ra,72(sp)
  80f3a8:	dcc01117 	ldw	r19,68(sp)
  80f3ac:	dc801017 	ldw	r18,64(sp)
  80f3b0:	dc400f17 	ldw	r17,60(sp)
  80f3b4:	dc000e17 	ldw	r16,56(sp)
  80f3b8:	dec01304 	addi	sp,sp,76
  80f3bc:	f800283a 	ret
  80f3c0:	29805b26 	beq	r5,r6,80f530 <__divdf3+0x244>
  80f3c4:	28802d26 	beq	r5,r2,80f47c <__divdf3+0x190>
  80f3c8:	d8c00617 	ldw	r3,24(sp)
  80f3cc:	d8800b17 	ldw	r2,44(sp)
  80f3d0:	d9c00817 	ldw	r7,32(sp)
  80f3d4:	dc400d17 	ldw	r17,52(sp)
  80f3d8:	188bc83a 	sub	r5,r3,r2
  80f3dc:	d9800717 	ldw	r6,28(sp)
  80f3e0:	dc000c17 	ldw	r16,48(sp)
  80f3e4:	d9400615 	stw	r5,24(sp)
  80f3e8:	3c403836 	bltu	r7,r17,80f4cc <__divdf3+0x1e0>
  80f3ec:	89c03626 	beq	r17,r7,80f4c8 <__divdf3+0x1dc>
  80f3f0:	0015883a 	mov	r10,zero
  80f3f4:	001d883a 	mov	r14,zero
  80f3f8:	02c40034 	movhi	r11,4096
  80f3fc:	001f883a 	mov	r15,zero
  80f400:	003f883a 	mov	ra,zero
  80f404:	04800f44 	movi	r18,61
  80f408:	00000f06 	br	80f448 <__divdf3+0x15c>
  80f40c:	601d883a 	mov	r14,r12
  80f410:	681f883a 	mov	r15,r13
  80f414:	400d883a 	mov	r6,r8
  80f418:	100f883a 	mov	r7,r2
  80f41c:	3191883a 	add	r8,r6,r6
  80f420:	5808d07a 	srli	r4,r11,1
  80f424:	4185803a 	cmpltu	r2,r8,r6
  80f428:	39d3883a 	add	r9,r7,r7
  80f42c:	28c6b03a 	or	r3,r5,r3
  80f430:	1245883a 	add	r2,r2,r9
  80f434:	1815883a 	mov	r10,r3
  80f438:	2017883a 	mov	r11,r4
  80f43c:	400d883a 	mov	r6,r8
  80f440:	100f883a 	mov	r7,r2
  80f444:	fc801726 	beq	ra,r18,80f4a4 <__divdf3+0x1b8>
  80f448:	580a97fa 	slli	r5,r11,31
  80f44c:	5006d07a 	srli	r3,r10,1
  80f450:	ffc00044 	addi	ra,ra,1
  80f454:	3c7ff136 	bltu	r7,r17,80f41c <__divdf3+0x130>
  80f458:	3411c83a 	sub	r8,r6,r16
  80f45c:	3205803a 	cmpltu	r2,r6,r8
  80f460:	3c53c83a 	sub	r9,r7,r17
  80f464:	7298b03a 	or	r12,r14,r10
  80f468:	7adab03a 	or	r13,r15,r11
  80f46c:	4885c83a 	sub	r2,r9,r2
  80f470:	89ffe61e 	bne	r17,r7,80f40c <__divdf3+0x120>
  80f474:	343fe936 	bltu	r6,r16,80f41c <__divdf3+0x130>
  80f478:	003fe406 	br	80f40c <__divdf3+0x120>
  80f47c:	9809883a 	mov	r4,r19
  80f480:	d9800415 	stw	r6,16(sp)
  80f484:	080ffb40 	call	80ffb4 <__pack_d>
  80f488:	dfc01217 	ldw	ra,72(sp)
  80f48c:	dcc01117 	ldw	r19,68(sp)
  80f490:	dc801017 	ldw	r18,64(sp)
  80f494:	dc400f17 	ldw	r17,60(sp)
  80f498:	dc000e17 	ldw	r16,56(sp)
  80f49c:	dec01304 	addi	sp,sp,76
  80f4a0:	f800283a 	ret
  80f4a4:	00803fc4 	movi	r2,255
  80f4a8:	7090703a 	and	r8,r14,r2
  80f4ac:	00802004 	movi	r2,128
  80f4b0:	0007883a 	mov	r3,zero
  80f4b4:	0013883a 	mov	r9,zero
  80f4b8:	40800d26 	beq	r8,r2,80f4f0 <__divdf3+0x204>
  80f4bc:	dbc00815 	stw	r15,32(sp)
  80f4c0:	db800715 	stw	r14,28(sp)
  80f4c4:	003fab06 	br	80f374 <__divdf3+0x88>
  80f4c8:	343fc92e 	bgeu	r6,r16,80f3f0 <__divdf3+0x104>
  80f4cc:	3185883a 	add	r2,r6,r6
  80f4d0:	1189803a 	cmpltu	r4,r2,r6
  80f4d4:	39c7883a 	add	r3,r7,r7
  80f4d8:	20c9883a 	add	r4,r4,r3
  80f4dc:	297fffc4 	addi	r5,r5,-1
  80f4e0:	100d883a 	mov	r6,r2
  80f4e4:	200f883a 	mov	r7,r4
  80f4e8:	d9400615 	stw	r5,24(sp)
  80f4ec:	003fc006 	br	80f3f0 <__divdf3+0x104>
  80f4f0:	483ff21e 	bne	r9,zero,80f4bc <__divdf3+0x1d0>
  80f4f4:	01004004 	movi	r4,256
  80f4f8:	7104703a 	and	r2,r14,r4
  80f4fc:	10c4b03a 	or	r2,r2,r3
  80f500:	103fee1e 	bne	r2,zero,80f4bc <__divdf3+0x1d0>
  80f504:	31c4b03a 	or	r2,r6,r7
  80f508:	103fec26 	beq	r2,zero,80f4bc <__divdf3+0x1d0>
  80f50c:	7205883a 	add	r2,r14,r8
  80f510:	1391803a 	cmpltu	r8,r2,r14
  80f514:	43d1883a 	add	r8,r8,r15
  80f518:	013fc004 	movi	r4,-256
  80f51c:	111c703a 	and	r14,r2,r4
  80f520:	401f883a 	mov	r15,r8
  80f524:	003fe506 	br	80f4bc <__divdf3+0x1d0>
  80f528:	8009883a 	mov	r4,r16
  80f52c:	003f9206 	br	80f378 <__divdf3+0x8c>
  80f530:	9809883a 	mov	r4,r19
  80f534:	d8000715 	stw	zero,28(sp)
  80f538:	d8000815 	stw	zero,32(sp)
  80f53c:	d8000615 	stw	zero,24(sp)
  80f540:	003f8d06 	br	80f378 <__divdf3+0x8c>

0080f544 <__eqdf2>:
  80f544:	deffef04 	addi	sp,sp,-68
  80f548:	dc400f15 	stw	r17,60(sp)
  80f54c:	dc400404 	addi	r17,sp,16
  80f550:	2005883a 	mov	r2,r4
  80f554:	2807883a 	mov	r3,r5
  80f558:	dc000e15 	stw	r16,56(sp)
  80f55c:	d809883a 	mov	r4,sp
  80f560:	880b883a 	mov	r5,r17
  80f564:	dc000904 	addi	r16,sp,36
  80f568:	d8c00115 	stw	r3,4(sp)
  80f56c:	d8800015 	stw	r2,0(sp)
  80f570:	d9800215 	stw	r6,8(sp)
  80f574:	dfc01015 	stw	ra,64(sp)
  80f578:	d9c00315 	stw	r7,12(sp)
  80f57c:	08102c80 	call	8102c8 <__unpack_d>
  80f580:	d9000204 	addi	r4,sp,8
  80f584:	800b883a 	mov	r5,r16
  80f588:	08102c80 	call	8102c8 <__unpack_d>
  80f58c:	d8800417 	ldw	r2,16(sp)
  80f590:	00c00044 	movi	r3,1
  80f594:	180d883a 	mov	r6,r3
  80f598:	1880062e 	bgeu	r3,r2,80f5b4 <__eqdf2+0x70>
  80f59c:	d8800917 	ldw	r2,36(sp)
  80f5a0:	8809883a 	mov	r4,r17
  80f5a4:	800b883a 	mov	r5,r16
  80f5a8:	1880022e 	bgeu	r3,r2,80f5b4 <__eqdf2+0x70>
  80f5ac:	08104000 	call	810400 <__fpcmp_parts_d>
  80f5b0:	100d883a 	mov	r6,r2
  80f5b4:	3005883a 	mov	r2,r6
  80f5b8:	dfc01017 	ldw	ra,64(sp)
  80f5bc:	dc400f17 	ldw	r17,60(sp)
  80f5c0:	dc000e17 	ldw	r16,56(sp)
  80f5c4:	dec01104 	addi	sp,sp,68
  80f5c8:	f800283a 	ret

0080f5cc <__nedf2>:
  80f5cc:	deffef04 	addi	sp,sp,-68
  80f5d0:	dc400f15 	stw	r17,60(sp)
  80f5d4:	dc400404 	addi	r17,sp,16
  80f5d8:	2005883a 	mov	r2,r4
  80f5dc:	2807883a 	mov	r3,r5
  80f5e0:	dc000e15 	stw	r16,56(sp)
  80f5e4:	d809883a 	mov	r4,sp
  80f5e8:	880b883a 	mov	r5,r17
  80f5ec:	dc000904 	addi	r16,sp,36
  80f5f0:	d8c00115 	stw	r3,4(sp)
  80f5f4:	d8800015 	stw	r2,0(sp)
  80f5f8:	d9800215 	stw	r6,8(sp)
  80f5fc:	dfc01015 	stw	ra,64(sp)
  80f600:	d9c00315 	stw	r7,12(sp)
  80f604:	08102c80 	call	8102c8 <__unpack_d>
  80f608:	d9000204 	addi	r4,sp,8
  80f60c:	800b883a 	mov	r5,r16
  80f610:	08102c80 	call	8102c8 <__unpack_d>
  80f614:	d8800417 	ldw	r2,16(sp)
  80f618:	00c00044 	movi	r3,1
  80f61c:	180d883a 	mov	r6,r3
  80f620:	1880062e 	bgeu	r3,r2,80f63c <__nedf2+0x70>
  80f624:	d8800917 	ldw	r2,36(sp)
  80f628:	8809883a 	mov	r4,r17
  80f62c:	800b883a 	mov	r5,r16
  80f630:	1880022e 	bgeu	r3,r2,80f63c <__nedf2+0x70>
  80f634:	08104000 	call	810400 <__fpcmp_parts_d>
  80f638:	100d883a 	mov	r6,r2
  80f63c:	3005883a 	mov	r2,r6
  80f640:	dfc01017 	ldw	ra,64(sp)
  80f644:	dc400f17 	ldw	r17,60(sp)
  80f648:	dc000e17 	ldw	r16,56(sp)
  80f64c:	dec01104 	addi	sp,sp,68
  80f650:	f800283a 	ret

0080f654 <__gtdf2>:
  80f654:	deffef04 	addi	sp,sp,-68
  80f658:	dc400f15 	stw	r17,60(sp)
  80f65c:	dc400404 	addi	r17,sp,16
  80f660:	2005883a 	mov	r2,r4
  80f664:	2807883a 	mov	r3,r5
  80f668:	dc000e15 	stw	r16,56(sp)
  80f66c:	d809883a 	mov	r4,sp
  80f670:	880b883a 	mov	r5,r17
  80f674:	dc000904 	addi	r16,sp,36
  80f678:	d8c00115 	stw	r3,4(sp)
  80f67c:	d8800015 	stw	r2,0(sp)
  80f680:	d9800215 	stw	r6,8(sp)
  80f684:	dfc01015 	stw	ra,64(sp)
  80f688:	d9c00315 	stw	r7,12(sp)
  80f68c:	08102c80 	call	8102c8 <__unpack_d>
  80f690:	d9000204 	addi	r4,sp,8
  80f694:	800b883a 	mov	r5,r16
  80f698:	08102c80 	call	8102c8 <__unpack_d>
  80f69c:	d8800417 	ldw	r2,16(sp)
  80f6a0:	00c00044 	movi	r3,1
  80f6a4:	01bfffc4 	movi	r6,-1
  80f6a8:	1880062e 	bgeu	r3,r2,80f6c4 <__gtdf2+0x70>
  80f6ac:	d8800917 	ldw	r2,36(sp)
  80f6b0:	8809883a 	mov	r4,r17
  80f6b4:	800b883a 	mov	r5,r16
  80f6b8:	1880022e 	bgeu	r3,r2,80f6c4 <__gtdf2+0x70>
  80f6bc:	08104000 	call	810400 <__fpcmp_parts_d>
  80f6c0:	100d883a 	mov	r6,r2
  80f6c4:	3005883a 	mov	r2,r6
  80f6c8:	dfc01017 	ldw	ra,64(sp)
  80f6cc:	dc400f17 	ldw	r17,60(sp)
  80f6d0:	dc000e17 	ldw	r16,56(sp)
  80f6d4:	dec01104 	addi	sp,sp,68
  80f6d8:	f800283a 	ret

0080f6dc <__gedf2>:
  80f6dc:	deffef04 	addi	sp,sp,-68
  80f6e0:	dc400f15 	stw	r17,60(sp)
  80f6e4:	dc400404 	addi	r17,sp,16
  80f6e8:	2005883a 	mov	r2,r4
  80f6ec:	2807883a 	mov	r3,r5
  80f6f0:	dc000e15 	stw	r16,56(sp)
  80f6f4:	d809883a 	mov	r4,sp
  80f6f8:	880b883a 	mov	r5,r17
  80f6fc:	dc000904 	addi	r16,sp,36
  80f700:	d8c00115 	stw	r3,4(sp)
  80f704:	d8800015 	stw	r2,0(sp)
  80f708:	d9800215 	stw	r6,8(sp)
  80f70c:	dfc01015 	stw	ra,64(sp)
  80f710:	d9c00315 	stw	r7,12(sp)
  80f714:	08102c80 	call	8102c8 <__unpack_d>
  80f718:	d9000204 	addi	r4,sp,8
  80f71c:	800b883a 	mov	r5,r16
  80f720:	08102c80 	call	8102c8 <__unpack_d>
  80f724:	d8800417 	ldw	r2,16(sp)
  80f728:	00c00044 	movi	r3,1
  80f72c:	01bfffc4 	movi	r6,-1
  80f730:	1880062e 	bgeu	r3,r2,80f74c <__gedf2+0x70>
  80f734:	d8800917 	ldw	r2,36(sp)
  80f738:	8809883a 	mov	r4,r17
  80f73c:	800b883a 	mov	r5,r16
  80f740:	1880022e 	bgeu	r3,r2,80f74c <__gedf2+0x70>
  80f744:	08104000 	call	810400 <__fpcmp_parts_d>
  80f748:	100d883a 	mov	r6,r2
  80f74c:	3005883a 	mov	r2,r6
  80f750:	dfc01017 	ldw	ra,64(sp)
  80f754:	dc400f17 	ldw	r17,60(sp)
  80f758:	dc000e17 	ldw	r16,56(sp)
  80f75c:	dec01104 	addi	sp,sp,68
  80f760:	f800283a 	ret

0080f764 <__ltdf2>:
  80f764:	deffef04 	addi	sp,sp,-68
  80f768:	dc400f15 	stw	r17,60(sp)
  80f76c:	dc400404 	addi	r17,sp,16
  80f770:	2005883a 	mov	r2,r4
  80f774:	2807883a 	mov	r3,r5
  80f778:	dc000e15 	stw	r16,56(sp)
  80f77c:	d809883a 	mov	r4,sp
  80f780:	880b883a 	mov	r5,r17
  80f784:	dc000904 	addi	r16,sp,36
  80f788:	d8c00115 	stw	r3,4(sp)
  80f78c:	d8800015 	stw	r2,0(sp)
  80f790:	d9800215 	stw	r6,8(sp)
  80f794:	dfc01015 	stw	ra,64(sp)
  80f798:	d9c00315 	stw	r7,12(sp)
  80f79c:	08102c80 	call	8102c8 <__unpack_d>
  80f7a0:	d9000204 	addi	r4,sp,8
  80f7a4:	800b883a 	mov	r5,r16
  80f7a8:	08102c80 	call	8102c8 <__unpack_d>
  80f7ac:	d8800417 	ldw	r2,16(sp)
  80f7b0:	00c00044 	movi	r3,1
  80f7b4:	180d883a 	mov	r6,r3
  80f7b8:	1880062e 	bgeu	r3,r2,80f7d4 <__ltdf2+0x70>
  80f7bc:	d8800917 	ldw	r2,36(sp)
  80f7c0:	8809883a 	mov	r4,r17
  80f7c4:	800b883a 	mov	r5,r16
  80f7c8:	1880022e 	bgeu	r3,r2,80f7d4 <__ltdf2+0x70>
  80f7cc:	08104000 	call	810400 <__fpcmp_parts_d>
  80f7d0:	100d883a 	mov	r6,r2
  80f7d4:	3005883a 	mov	r2,r6
  80f7d8:	dfc01017 	ldw	ra,64(sp)
  80f7dc:	dc400f17 	ldw	r17,60(sp)
  80f7e0:	dc000e17 	ldw	r16,56(sp)
  80f7e4:	dec01104 	addi	sp,sp,68
  80f7e8:	f800283a 	ret

0080f7ec <__ledf2>:
  80f7ec:	deffef04 	addi	sp,sp,-68
  80f7f0:	dc400f15 	stw	r17,60(sp)
  80f7f4:	dc400404 	addi	r17,sp,16
  80f7f8:	2005883a 	mov	r2,r4
  80f7fc:	2807883a 	mov	r3,r5
  80f800:	dc000e15 	stw	r16,56(sp)
  80f804:	d809883a 	mov	r4,sp
  80f808:	880b883a 	mov	r5,r17
  80f80c:	dc000904 	addi	r16,sp,36
  80f810:	d8c00115 	stw	r3,4(sp)
  80f814:	d8800015 	stw	r2,0(sp)
  80f818:	d9800215 	stw	r6,8(sp)
  80f81c:	dfc01015 	stw	ra,64(sp)
  80f820:	d9c00315 	stw	r7,12(sp)
  80f824:	08102c80 	call	8102c8 <__unpack_d>
  80f828:	d9000204 	addi	r4,sp,8
  80f82c:	800b883a 	mov	r5,r16
  80f830:	08102c80 	call	8102c8 <__unpack_d>
  80f834:	d8800417 	ldw	r2,16(sp)
  80f838:	00c00044 	movi	r3,1
  80f83c:	180d883a 	mov	r6,r3
  80f840:	1880062e 	bgeu	r3,r2,80f85c <__ledf2+0x70>
  80f844:	d8800917 	ldw	r2,36(sp)
  80f848:	8809883a 	mov	r4,r17
  80f84c:	800b883a 	mov	r5,r16
  80f850:	1880022e 	bgeu	r3,r2,80f85c <__ledf2+0x70>
  80f854:	08104000 	call	810400 <__fpcmp_parts_d>
  80f858:	100d883a 	mov	r6,r2
  80f85c:	3005883a 	mov	r2,r6
  80f860:	dfc01017 	ldw	ra,64(sp)
  80f864:	dc400f17 	ldw	r17,60(sp)
  80f868:	dc000e17 	ldw	r16,56(sp)
  80f86c:	dec01104 	addi	sp,sp,68
  80f870:	f800283a 	ret

0080f874 <__floatsidf>:
  80f874:	2006d7fa 	srli	r3,r4,31
  80f878:	defff604 	addi	sp,sp,-40
  80f87c:	008000c4 	movi	r2,3
  80f880:	dfc00915 	stw	ra,36(sp)
  80f884:	dcc00815 	stw	r19,32(sp)
  80f888:	dc800715 	stw	r18,28(sp)
  80f88c:	dc400615 	stw	r17,24(sp)
  80f890:	dc000515 	stw	r16,20(sp)
  80f894:	d8800015 	stw	r2,0(sp)
  80f898:	d8c00115 	stw	r3,4(sp)
  80f89c:	20000f1e 	bne	r4,zero,80f8dc <__floatsidf+0x68>
  80f8a0:	00800084 	movi	r2,2
  80f8a4:	d8800015 	stw	r2,0(sp)
  80f8a8:	d809883a 	mov	r4,sp
  80f8ac:	080ffb40 	call	80ffb4 <__pack_d>
  80f8b0:	1009883a 	mov	r4,r2
  80f8b4:	180b883a 	mov	r5,r3
  80f8b8:	2005883a 	mov	r2,r4
  80f8bc:	2807883a 	mov	r3,r5
  80f8c0:	dfc00917 	ldw	ra,36(sp)
  80f8c4:	dcc00817 	ldw	r19,32(sp)
  80f8c8:	dc800717 	ldw	r18,28(sp)
  80f8cc:	dc400617 	ldw	r17,24(sp)
  80f8d0:	dc000517 	ldw	r16,20(sp)
  80f8d4:	dec00a04 	addi	sp,sp,40
  80f8d8:	f800283a 	ret
  80f8dc:	00800f04 	movi	r2,60
  80f8e0:	1807003a 	cmpeq	r3,r3,zero
  80f8e4:	d8800215 	stw	r2,8(sp)
  80f8e8:	18001126 	beq	r3,zero,80f930 <__floatsidf+0xbc>
  80f8ec:	0027883a 	mov	r19,zero
  80f8f0:	2025883a 	mov	r18,r4
  80f8f4:	d9000315 	stw	r4,12(sp)
  80f8f8:	dcc00415 	stw	r19,16(sp)
  80f8fc:	080fd980 	call	80fd98 <__clzsi2>
  80f900:	11000744 	addi	r4,r2,29
  80f904:	013fe80e 	bge	zero,r4,80f8a8 <__floatsidf+0x34>
  80f908:	10bfff44 	addi	r2,r2,-3
  80f90c:	10000c16 	blt	r2,zero,80f940 <__floatsidf+0xcc>
  80f910:	90a2983a 	sll	r17,r18,r2
  80f914:	0021883a 	mov	r16,zero
  80f918:	d8800217 	ldw	r2,8(sp)
  80f91c:	dc400415 	stw	r17,16(sp)
  80f920:	dc000315 	stw	r16,12(sp)
  80f924:	1105c83a 	sub	r2,r2,r4
  80f928:	d8800215 	stw	r2,8(sp)
  80f92c:	003fde06 	br	80f8a8 <__floatsidf+0x34>
  80f930:	00a00034 	movhi	r2,32768
  80f934:	20800a26 	beq	r4,r2,80f960 <__floatsidf+0xec>
  80f938:	0109c83a 	sub	r4,zero,r4
  80f93c:	003feb06 	br	80f8ec <__floatsidf+0x78>
  80f940:	9006d07a 	srli	r3,r18,1
  80f944:	008007c4 	movi	r2,31
  80f948:	1105c83a 	sub	r2,r2,r4
  80f94c:	1886d83a 	srl	r3,r3,r2
  80f950:	9922983a 	sll	r17,r19,r4
  80f954:	9120983a 	sll	r16,r18,r4
  80f958:	1c62b03a 	or	r17,r3,r17
  80f95c:	003fee06 	br	80f918 <__floatsidf+0xa4>
  80f960:	0009883a 	mov	r4,zero
  80f964:	01707834 	movhi	r5,49632
  80f968:	003fd306 	br	80f8b8 <__floatsidf+0x44>

0080f96c <__fixdfsi>:
  80f96c:	defff804 	addi	sp,sp,-32
  80f970:	2005883a 	mov	r2,r4
  80f974:	2807883a 	mov	r3,r5
  80f978:	d809883a 	mov	r4,sp
  80f97c:	d9400204 	addi	r5,sp,8
  80f980:	d8c00115 	stw	r3,4(sp)
  80f984:	d8800015 	stw	r2,0(sp)
  80f988:	dfc00715 	stw	ra,28(sp)
  80f98c:	08102c80 	call	8102c8 <__unpack_d>
  80f990:	d8c00217 	ldw	r3,8(sp)
  80f994:	00800084 	movi	r2,2
  80f998:	1880051e 	bne	r3,r2,80f9b0 <__fixdfsi+0x44>
  80f99c:	0007883a 	mov	r3,zero
  80f9a0:	1805883a 	mov	r2,r3
  80f9a4:	dfc00717 	ldw	ra,28(sp)
  80f9a8:	dec00804 	addi	sp,sp,32
  80f9ac:	f800283a 	ret
  80f9b0:	00800044 	movi	r2,1
  80f9b4:	10fff92e 	bgeu	r2,r3,80f99c <__fixdfsi+0x30>
  80f9b8:	00800104 	movi	r2,4
  80f9bc:	18800426 	beq	r3,r2,80f9d0 <__fixdfsi+0x64>
  80f9c0:	d8c00417 	ldw	r3,16(sp)
  80f9c4:	183ff516 	blt	r3,zero,80f99c <__fixdfsi+0x30>
  80f9c8:	00800784 	movi	r2,30
  80f9cc:	10c0080e 	bge	r2,r3,80f9f0 <__fixdfsi+0x84>
  80f9d0:	d8800317 	ldw	r2,12(sp)
  80f9d4:	1000121e 	bne	r2,zero,80fa20 <__fixdfsi+0xb4>
  80f9d8:	00e00034 	movhi	r3,32768
  80f9dc:	18ffffc4 	addi	r3,r3,-1
  80f9e0:	1805883a 	mov	r2,r3
  80f9e4:	dfc00717 	ldw	ra,28(sp)
  80f9e8:	dec00804 	addi	sp,sp,32
  80f9ec:	f800283a 	ret
  80f9f0:	00800f04 	movi	r2,60
  80f9f4:	10d1c83a 	sub	r8,r2,r3
  80f9f8:	40bff804 	addi	r2,r8,-32
  80f9fc:	d9800517 	ldw	r6,20(sp)
  80fa00:	d9c00617 	ldw	r7,24(sp)
  80fa04:	10000816 	blt	r2,zero,80fa28 <__fixdfsi+0xbc>
  80fa08:	3888d83a 	srl	r4,r7,r2
  80fa0c:	d8800317 	ldw	r2,12(sp)
  80fa10:	2007883a 	mov	r3,r4
  80fa14:	103fe226 	beq	r2,zero,80f9a0 <__fixdfsi+0x34>
  80fa18:	0107c83a 	sub	r3,zero,r4
  80fa1c:	003fe006 	br	80f9a0 <__fixdfsi+0x34>
  80fa20:	00e00034 	movhi	r3,32768
  80fa24:	003fde06 	br	80f9a0 <__fixdfsi+0x34>
  80fa28:	39c7883a 	add	r3,r7,r7
  80fa2c:	008007c4 	movi	r2,31
  80fa30:	1205c83a 	sub	r2,r2,r8
  80fa34:	1886983a 	sll	r3,r3,r2
  80fa38:	3208d83a 	srl	r4,r6,r8
  80fa3c:	1908b03a 	or	r4,r3,r4
  80fa40:	003ff206 	br	80fa0c <__fixdfsi+0xa0>

0080fa44 <__truncdfsf2>:
  80fa44:	defff804 	addi	sp,sp,-32
  80fa48:	2005883a 	mov	r2,r4
  80fa4c:	2807883a 	mov	r3,r5
  80fa50:	d809883a 	mov	r4,sp
  80fa54:	d9400204 	addi	r5,sp,8
  80fa58:	d8c00115 	stw	r3,4(sp)
  80fa5c:	d8800015 	stw	r2,0(sp)
  80fa60:	dfc00715 	stw	ra,28(sp)
  80fa64:	08102c80 	call	8102c8 <__unpack_d>
  80fa68:	d9c00517 	ldw	r7,20(sp)
  80fa6c:	da000617 	ldw	r8,24(sp)
  80fa70:	02d00034 	movhi	r11,16384
  80fa74:	5affffc4 	addi	r11,r11,-1
  80fa78:	3812d7ba 	srli	r9,r7,30
  80fa7c:	401a90ba 	slli	r13,r8,2
  80fa80:	3ac4703a 	and	r2,r7,r11
  80fa84:	0007883a 	mov	r3,zero
  80fa88:	6a52b03a 	or	r9,r13,r9
  80fa8c:	10c4b03a 	or	r2,r2,r3
  80fa90:	d9000217 	ldw	r4,8(sp)
  80fa94:	d9400317 	ldw	r5,12(sp)
  80fa98:	d9800417 	ldw	r6,16(sp)
  80fa9c:	480f883a 	mov	r7,r9
  80faa0:	10000126 	beq	r2,zero,80faa8 <__truncdfsf2+0x64>
  80faa4:	49c00054 	ori	r7,r9,1
  80faa8:	080ff880 	call	80ff88 <__make_fp>
  80faac:	dfc00717 	ldw	ra,28(sp)
  80fab0:	dec00804 	addi	sp,sp,32
  80fab4:	f800283a 	ret

0080fab8 <__floatunsidf>:
  80fab8:	defff204 	addi	sp,sp,-56
  80fabc:	dfc00d15 	stw	ra,52(sp)
  80fac0:	ddc00c15 	stw	r23,48(sp)
  80fac4:	dd800b15 	stw	r22,44(sp)
  80fac8:	dd400a15 	stw	r21,40(sp)
  80facc:	dd000915 	stw	r20,36(sp)
  80fad0:	dcc00815 	stw	r19,32(sp)
  80fad4:	dc800715 	stw	r18,28(sp)
  80fad8:	dc400615 	stw	r17,24(sp)
  80fadc:	dc000515 	stw	r16,20(sp)
  80fae0:	d8000115 	stw	zero,4(sp)
  80fae4:	20000f1e 	bne	r4,zero,80fb24 <__floatunsidf+0x6c>
  80fae8:	00800084 	movi	r2,2
  80faec:	d8800015 	stw	r2,0(sp)
  80faf0:	d809883a 	mov	r4,sp
  80faf4:	080ffb40 	call	80ffb4 <__pack_d>
  80faf8:	dfc00d17 	ldw	ra,52(sp)
  80fafc:	ddc00c17 	ldw	r23,48(sp)
  80fb00:	dd800b17 	ldw	r22,44(sp)
  80fb04:	dd400a17 	ldw	r21,40(sp)
  80fb08:	dd000917 	ldw	r20,36(sp)
  80fb0c:	dcc00817 	ldw	r19,32(sp)
  80fb10:	dc800717 	ldw	r18,28(sp)
  80fb14:	dc400617 	ldw	r17,24(sp)
  80fb18:	dc000517 	ldw	r16,20(sp)
  80fb1c:	dec00e04 	addi	sp,sp,56
  80fb20:	f800283a 	ret
  80fb24:	008000c4 	movi	r2,3
  80fb28:	00c00f04 	movi	r3,60
  80fb2c:	002f883a 	mov	r23,zero
  80fb30:	202d883a 	mov	r22,r4
  80fb34:	d8800015 	stw	r2,0(sp)
  80fb38:	d8c00215 	stw	r3,8(sp)
  80fb3c:	d9000315 	stw	r4,12(sp)
  80fb40:	ddc00415 	stw	r23,16(sp)
  80fb44:	080fd980 	call	80fd98 <__clzsi2>
  80fb48:	12400744 	addi	r9,r2,29
  80fb4c:	48000b16 	blt	r9,zero,80fb7c <__floatunsidf+0xc4>
  80fb50:	483fe726 	beq	r9,zero,80faf0 <__floatunsidf+0x38>
  80fb54:	10bfff44 	addi	r2,r2,-3
  80fb58:	10002e16 	blt	r2,zero,80fc14 <__floatunsidf+0x15c>
  80fb5c:	b0a2983a 	sll	r17,r22,r2
  80fb60:	0021883a 	mov	r16,zero
  80fb64:	d8800217 	ldw	r2,8(sp)
  80fb68:	dc400415 	stw	r17,16(sp)
  80fb6c:	dc000315 	stw	r16,12(sp)
  80fb70:	1245c83a 	sub	r2,r2,r9
  80fb74:	d8800215 	stw	r2,8(sp)
  80fb78:	003fdd06 	br	80faf0 <__floatunsidf+0x38>
  80fb7c:	0255c83a 	sub	r10,zero,r9
  80fb80:	51bff804 	addi	r6,r10,-32
  80fb84:	30001b16 	blt	r6,zero,80fbf4 <__floatunsidf+0x13c>
  80fb88:	b9a8d83a 	srl	r20,r23,r6
  80fb8c:	002b883a 	mov	r21,zero
  80fb90:	000f883a 	mov	r7,zero
  80fb94:	01000044 	movi	r4,1
  80fb98:	0011883a 	mov	r8,zero
  80fb9c:	30002516 	blt	r6,zero,80fc34 <__floatunsidf+0x17c>
  80fba0:	21a6983a 	sll	r19,r4,r6
  80fba4:	0025883a 	mov	r18,zero
  80fba8:	00bfffc4 	movi	r2,-1
  80fbac:	9089883a 	add	r4,r18,r2
  80fbb0:	988b883a 	add	r5,r19,r2
  80fbb4:	248d803a 	cmpltu	r6,r4,r18
  80fbb8:	314b883a 	add	r5,r6,r5
  80fbbc:	b104703a 	and	r2,r22,r4
  80fbc0:	b946703a 	and	r3,r23,r5
  80fbc4:	10c4b03a 	or	r2,r2,r3
  80fbc8:	10000226 	beq	r2,zero,80fbd4 <__floatunsidf+0x11c>
  80fbcc:	01c00044 	movi	r7,1
  80fbd0:	0011883a 	mov	r8,zero
  80fbd4:	d9000217 	ldw	r4,8(sp)
  80fbd8:	a1c4b03a 	or	r2,r20,r7
  80fbdc:	aa06b03a 	or	r3,r21,r8
  80fbe0:	2249c83a 	sub	r4,r4,r9
  80fbe4:	d8c00415 	stw	r3,16(sp)
  80fbe8:	d9000215 	stw	r4,8(sp)
  80fbec:	d8800315 	stw	r2,12(sp)
  80fbf0:	003fbf06 	br	80faf0 <__floatunsidf+0x38>
  80fbf4:	bdc7883a 	add	r3,r23,r23
  80fbf8:	008007c4 	movi	r2,31
  80fbfc:	1285c83a 	sub	r2,r2,r10
  80fc00:	1886983a 	sll	r3,r3,r2
  80fc04:	b2a8d83a 	srl	r20,r22,r10
  80fc08:	baaad83a 	srl	r21,r23,r10
  80fc0c:	1d28b03a 	or	r20,r3,r20
  80fc10:	003fdf06 	br	80fb90 <__floatunsidf+0xd8>
  80fc14:	b006d07a 	srli	r3,r22,1
  80fc18:	008007c4 	movi	r2,31
  80fc1c:	1245c83a 	sub	r2,r2,r9
  80fc20:	1886d83a 	srl	r3,r3,r2
  80fc24:	ba62983a 	sll	r17,r23,r9
  80fc28:	b260983a 	sll	r16,r22,r9
  80fc2c:	1c62b03a 	or	r17,r3,r17
  80fc30:	003fcc06 	br	80fb64 <__floatunsidf+0xac>
  80fc34:	2006d07a 	srli	r3,r4,1
  80fc38:	008007c4 	movi	r2,31
  80fc3c:	1285c83a 	sub	r2,r2,r10
  80fc40:	18a6d83a 	srl	r19,r3,r2
  80fc44:	22a4983a 	sll	r18,r4,r10
  80fc48:	003fd706 	br	80fba8 <__floatunsidf+0xf0>

0080fc4c <udivmodsi4>:
  80fc4c:	29001b2e 	bgeu	r5,r4,80fcbc <udivmodsi4+0x70>
  80fc50:	28001a16 	blt	r5,zero,80fcbc <udivmodsi4+0x70>
  80fc54:	00800044 	movi	r2,1
  80fc58:	0007883a 	mov	r3,zero
  80fc5c:	01c007c4 	movi	r7,31
  80fc60:	00000306 	br	80fc70 <udivmodsi4+0x24>
  80fc64:	19c01326 	beq	r3,r7,80fcb4 <udivmodsi4+0x68>
  80fc68:	18c00044 	addi	r3,r3,1
  80fc6c:	28000416 	blt	r5,zero,80fc80 <udivmodsi4+0x34>
  80fc70:	294b883a 	add	r5,r5,r5
  80fc74:	1085883a 	add	r2,r2,r2
  80fc78:	293ffa36 	bltu	r5,r4,80fc64 <udivmodsi4+0x18>
  80fc7c:	10000d26 	beq	r2,zero,80fcb4 <udivmodsi4+0x68>
  80fc80:	0007883a 	mov	r3,zero
  80fc84:	21400236 	bltu	r4,r5,80fc90 <udivmodsi4+0x44>
  80fc88:	2149c83a 	sub	r4,r4,r5
  80fc8c:	1886b03a 	or	r3,r3,r2
  80fc90:	1004d07a 	srli	r2,r2,1
  80fc94:	280ad07a 	srli	r5,r5,1
  80fc98:	103ffa1e 	bne	r2,zero,80fc84 <udivmodsi4+0x38>
  80fc9c:	30000226 	beq	r6,zero,80fca8 <udivmodsi4+0x5c>
  80fca0:	2005883a 	mov	r2,r4
  80fca4:	f800283a 	ret
  80fca8:	1809883a 	mov	r4,r3
  80fcac:	2005883a 	mov	r2,r4
  80fcb0:	f800283a 	ret
  80fcb4:	0007883a 	mov	r3,zero
  80fcb8:	003ff806 	br	80fc9c <udivmodsi4+0x50>
  80fcbc:	00800044 	movi	r2,1
  80fcc0:	0007883a 	mov	r3,zero
  80fcc4:	003fef06 	br	80fc84 <udivmodsi4+0x38>

0080fcc8 <__divsi3>:
  80fcc8:	defffe04 	addi	sp,sp,-8
  80fccc:	dc000015 	stw	r16,0(sp)
  80fcd0:	dfc00115 	stw	ra,4(sp)
  80fcd4:	0021883a 	mov	r16,zero
  80fcd8:	20000c16 	blt	r4,zero,80fd0c <__divsi3+0x44>
  80fcdc:	000d883a 	mov	r6,zero
  80fce0:	28000e16 	blt	r5,zero,80fd1c <__divsi3+0x54>
  80fce4:	080fc4c0 	call	80fc4c <udivmodsi4>
  80fce8:	1007883a 	mov	r3,r2
  80fcec:	8005003a 	cmpeq	r2,r16,zero
  80fcf0:	1000011e 	bne	r2,zero,80fcf8 <__divsi3+0x30>
  80fcf4:	00c7c83a 	sub	r3,zero,r3
  80fcf8:	1805883a 	mov	r2,r3
  80fcfc:	dfc00117 	ldw	ra,4(sp)
  80fd00:	dc000017 	ldw	r16,0(sp)
  80fd04:	dec00204 	addi	sp,sp,8
  80fd08:	f800283a 	ret
  80fd0c:	0109c83a 	sub	r4,zero,r4
  80fd10:	04000044 	movi	r16,1
  80fd14:	000d883a 	mov	r6,zero
  80fd18:	283ff20e 	bge	r5,zero,80fce4 <__divsi3+0x1c>
  80fd1c:	014bc83a 	sub	r5,zero,r5
  80fd20:	8021003a 	cmpeq	r16,r16,zero
  80fd24:	003fef06 	br	80fce4 <__divsi3+0x1c>

0080fd28 <__modsi3>:
  80fd28:	deffff04 	addi	sp,sp,-4
  80fd2c:	dfc00015 	stw	ra,0(sp)
  80fd30:	01800044 	movi	r6,1
  80fd34:	2807883a 	mov	r3,r5
  80fd38:	20000416 	blt	r4,zero,80fd4c <__modsi3+0x24>
  80fd3c:	28000c16 	blt	r5,zero,80fd70 <__modsi3+0x48>
  80fd40:	dfc00017 	ldw	ra,0(sp)
  80fd44:	dec00104 	addi	sp,sp,4
  80fd48:	080fc4c1 	jmpi	80fc4c <udivmodsi4>
  80fd4c:	0109c83a 	sub	r4,zero,r4
  80fd50:	28000b16 	blt	r5,zero,80fd80 <__modsi3+0x58>
  80fd54:	180b883a 	mov	r5,r3
  80fd58:	01800044 	movi	r6,1
  80fd5c:	080fc4c0 	call	80fc4c <udivmodsi4>
  80fd60:	0085c83a 	sub	r2,zero,r2
  80fd64:	dfc00017 	ldw	ra,0(sp)
  80fd68:	dec00104 	addi	sp,sp,4
  80fd6c:	f800283a 	ret
  80fd70:	014bc83a 	sub	r5,zero,r5
  80fd74:	dfc00017 	ldw	ra,0(sp)
  80fd78:	dec00104 	addi	sp,sp,4
  80fd7c:	080fc4c1 	jmpi	80fc4c <udivmodsi4>
  80fd80:	0147c83a 	sub	r3,zero,r5
  80fd84:	003ff306 	br	80fd54 <__modsi3+0x2c>

0080fd88 <__udivsi3>:
  80fd88:	000d883a 	mov	r6,zero
  80fd8c:	080fc4c1 	jmpi	80fc4c <udivmodsi4>

0080fd90 <__umodsi3>:
  80fd90:	01800044 	movi	r6,1
  80fd94:	080fc4c1 	jmpi	80fc4c <udivmodsi4>

0080fd98 <__clzsi2>:
  80fd98:	00bfffd4 	movui	r2,65535
  80fd9c:	11000e36 	bltu	r2,r4,80fdd8 <__clzsi2+0x40>
  80fda0:	00803fc4 	movi	r2,255
  80fda4:	01400204 	movi	r5,8
  80fda8:	0007883a 	mov	r3,zero
  80fdac:	11001036 	bltu	r2,r4,80fdf0 <__clzsi2+0x58>
  80fdb0:	000b883a 	mov	r5,zero
  80fdb4:	20c6d83a 	srl	r3,r4,r3
  80fdb8:	00802074 	movhi	r2,129
  80fdbc:	1094ce04 	addi	r2,r2,21304
  80fdc0:	1887883a 	add	r3,r3,r2
  80fdc4:	18800003 	ldbu	r2,0(r3)
  80fdc8:	00c00804 	movi	r3,32
  80fdcc:	2885883a 	add	r2,r5,r2
  80fdd0:	1885c83a 	sub	r2,r3,r2
  80fdd4:	f800283a 	ret
  80fdd8:	01400404 	movi	r5,16
  80fddc:	00804034 	movhi	r2,256
  80fde0:	10bfffc4 	addi	r2,r2,-1
  80fde4:	2807883a 	mov	r3,r5
  80fde8:	113ff22e 	bgeu	r2,r4,80fdb4 <__clzsi2+0x1c>
  80fdec:	01400604 	movi	r5,24
  80fdf0:	2807883a 	mov	r3,r5
  80fdf4:	20c6d83a 	srl	r3,r4,r3
  80fdf8:	00802074 	movhi	r2,129
  80fdfc:	1094ce04 	addi	r2,r2,21304
  80fe00:	1887883a 	add	r3,r3,r2
  80fe04:	18800003 	ldbu	r2,0(r3)
  80fe08:	00c00804 	movi	r3,32
  80fe0c:	2885883a 	add	r2,r5,r2
  80fe10:	1885c83a 	sub	r2,r3,r2
  80fe14:	f800283a 	ret

0080fe18 <__unpack_f>:
  80fe18:	21800017 	ldw	r6,0(r4)
  80fe1c:	00c02034 	movhi	r3,128
  80fe20:	18ffffc4 	addi	r3,r3,-1
  80fe24:	3004d5fa 	srli	r2,r6,23
  80fe28:	3008d7fa 	srli	r4,r6,31
  80fe2c:	30ce703a 	and	r7,r6,r3
  80fe30:	10c03fcc 	andi	r3,r2,255
  80fe34:	29000115 	stw	r4,4(r5)
  80fe38:	1800131e 	bne	r3,zero,80fe88 <__unpack_f+0x70>
  80fe3c:	38000f26 	beq	r7,zero,80fe7c <__unpack_f+0x64>
  80fe40:	380691fa 	slli	r3,r7,7
  80fe44:	01bfe084 	movi	r6,-126
  80fe48:	008000c4 	movi	r2,3
  80fe4c:	01100034 	movhi	r4,16384
  80fe50:	213fffc4 	addi	r4,r4,-1
  80fe54:	28800015 	stw	r2,0(r5)
  80fe58:	29800215 	stw	r6,8(r5)
  80fe5c:	20c00536 	bltu	r4,r3,80fe74 <__unpack_f+0x5c>
  80fe60:	3005883a 	mov	r2,r6
  80fe64:	18c7883a 	add	r3,r3,r3
  80fe68:	10bfffc4 	addi	r2,r2,-1
  80fe6c:	20fffd2e 	bgeu	r4,r3,80fe64 <__unpack_f+0x4c>
  80fe70:	28800215 	stw	r2,8(r5)
  80fe74:	28c00315 	stw	r3,12(r5)
  80fe78:	f800283a 	ret
  80fe7c:	00800084 	movi	r2,2
  80fe80:	28800015 	stw	r2,0(r5)
  80fe84:	f800283a 	ret
  80fe88:	00803fc4 	movi	r2,255
  80fe8c:	18800826 	beq	r3,r2,80feb0 <__unpack_f+0x98>
  80fe90:	380491fa 	slli	r2,r7,7
  80fe94:	18ffe044 	addi	r3,r3,-127
  80fe98:	28c00215 	stw	r3,8(r5)
  80fe9c:	10900034 	orhi	r2,r2,16384
  80fea0:	28800315 	stw	r2,12(r5)
  80fea4:	008000c4 	movi	r2,3
  80fea8:	28800015 	stw	r2,0(r5)
  80feac:	f800283a 	ret
  80feb0:	3800031e 	bne	r7,zero,80fec0 <__unpack_f+0xa8>
  80feb4:	00800104 	movi	r2,4
  80feb8:	28800015 	stw	r2,0(r5)
  80febc:	f800283a 	ret
  80fec0:	3080042c 	andhi	r2,r6,16
  80fec4:	10000426 	beq	r2,zero,80fed8 <__unpack_f+0xc0>
  80fec8:	00800044 	movi	r2,1
  80fecc:	28800015 	stw	r2,0(r5)
  80fed0:	29c00315 	stw	r7,12(r5)
  80fed4:	f800283a 	ret
  80fed8:	28000015 	stw	zero,0(r5)
  80fedc:	003ffc06 	br	80fed0 <__unpack_f+0xb8>

0080fee0 <__fpcmp_parts_f>:
  80fee0:	21800017 	ldw	r6,0(r4)
  80fee4:	00c00044 	movi	r3,1
  80fee8:	19800a2e 	bgeu	r3,r6,80ff14 <__fpcmp_parts_f+0x34>
  80feec:	28800017 	ldw	r2,0(r5)
  80fef0:	1880082e 	bgeu	r3,r2,80ff14 <__fpcmp_parts_f+0x34>
  80fef4:	00c00104 	movi	r3,4
  80fef8:	30c01e26 	beq	r6,r3,80ff74 <__fpcmp_parts_f+0x94>
  80fefc:	10c01a26 	beq	r2,r3,80ff68 <__fpcmp_parts_f+0x88>
  80ff00:	00c00084 	movi	r3,2
  80ff04:	30c00526 	beq	r6,r3,80ff1c <__fpcmp_parts_f+0x3c>
  80ff08:	10c0071e 	bne	r2,r3,80ff28 <__fpcmp_parts_f+0x48>
  80ff0c:	20800117 	ldw	r2,4(r4)
  80ff10:	1000091e 	bne	r2,zero,80ff38 <__fpcmp_parts_f+0x58>
  80ff14:	00800044 	movi	r2,1
  80ff18:	f800283a 	ret
  80ff1c:	10c0121e 	bne	r2,r3,80ff68 <__fpcmp_parts_f+0x88>
  80ff20:	0005883a 	mov	r2,zero
  80ff24:	f800283a 	ret
  80ff28:	20c00117 	ldw	r3,4(r4)
  80ff2c:	28800117 	ldw	r2,4(r5)
  80ff30:	18800326 	beq	r3,r2,80ff40 <__fpcmp_parts_f+0x60>
  80ff34:	183ff726 	beq	r3,zero,80ff14 <__fpcmp_parts_f+0x34>
  80ff38:	00bfffc4 	movi	r2,-1
  80ff3c:	f800283a 	ret
  80ff40:	21800217 	ldw	r6,8(r4)
  80ff44:	28800217 	ldw	r2,8(r5)
  80ff48:	11bffa16 	blt	r2,r6,80ff34 <__fpcmp_parts_f+0x54>
  80ff4c:	30800416 	blt	r6,r2,80ff60 <__fpcmp_parts_f+0x80>
  80ff50:	21000317 	ldw	r4,12(r4)
  80ff54:	29400317 	ldw	r5,12(r5)
  80ff58:	293ff636 	bltu	r5,r4,80ff34 <__fpcmp_parts_f+0x54>
  80ff5c:	217ff02e 	bgeu	r4,r5,80ff20 <__fpcmp_parts_f+0x40>
  80ff60:	183fec1e 	bne	r3,zero,80ff14 <__fpcmp_parts_f+0x34>
  80ff64:	003ff406 	br	80ff38 <__fpcmp_parts_f+0x58>
  80ff68:	28800117 	ldw	r2,4(r5)
  80ff6c:	103fe91e 	bne	r2,zero,80ff14 <__fpcmp_parts_f+0x34>
  80ff70:	003ff106 	br	80ff38 <__fpcmp_parts_f+0x58>
  80ff74:	11bfe51e 	bne	r2,r6,80ff0c <__fpcmp_parts_f+0x2c>
  80ff78:	28c00117 	ldw	r3,4(r5)
  80ff7c:	20800117 	ldw	r2,4(r4)
  80ff80:	1885c83a 	sub	r2,r3,r2
  80ff84:	f800283a 	ret

0080ff88 <__make_fp>:
  80ff88:	defffb04 	addi	sp,sp,-20
  80ff8c:	d9000015 	stw	r4,0(sp)
  80ff90:	d809883a 	mov	r4,sp
  80ff94:	dfc00415 	stw	ra,16(sp)
  80ff98:	d9400115 	stw	r5,4(sp)
  80ff9c:	d9800215 	stw	r6,8(sp)
  80ffa0:	d9c00315 	stw	r7,12(sp)
  80ffa4:	08104c80 	call	8104c8 <__pack_f>
  80ffa8:	dfc00417 	ldw	ra,16(sp)
  80ffac:	dec00504 	addi	sp,sp,20
  80ffb0:	f800283a 	ret

0080ffb4 <__pack_d>:
  80ffb4:	20c00017 	ldw	r3,0(r4)
  80ffb8:	defffd04 	addi	sp,sp,-12
  80ffbc:	dc000015 	stw	r16,0(sp)
  80ffc0:	dc800215 	stw	r18,8(sp)
  80ffc4:	dc400115 	stw	r17,4(sp)
  80ffc8:	00800044 	movi	r2,1
  80ffcc:	22000317 	ldw	r8,12(r4)
  80ffd0:	001f883a 	mov	r15,zero
  80ffd4:	22400417 	ldw	r9,16(r4)
  80ffd8:	24000117 	ldw	r16,4(r4)
  80ffdc:	10c0552e 	bgeu	r2,r3,810134 <__pack_d+0x180>
  80ffe0:	00800104 	movi	r2,4
  80ffe4:	18804f26 	beq	r3,r2,810124 <__pack_d+0x170>
  80ffe8:	00800084 	movi	r2,2
  80ffec:	18800226 	beq	r3,r2,80fff8 <__pack_d+0x44>
  80fff0:	4244b03a 	or	r2,r8,r9
  80fff4:	10001a1e 	bne	r2,zero,810060 <__pack_d+0xac>
  80fff8:	000d883a 	mov	r6,zero
  80fffc:	000f883a 	mov	r7,zero
  810000:	0011883a 	mov	r8,zero
  810004:	00800434 	movhi	r2,16
  810008:	10bfffc4 	addi	r2,r2,-1
  81000c:	301d883a 	mov	r14,r6
  810010:	3884703a 	and	r2,r7,r2
  810014:	400a953a 	slli	r5,r8,20
  810018:	79bffc2c 	andhi	r6,r15,65520
  81001c:	308cb03a 	or	r6,r6,r2
  810020:	00e00434 	movhi	r3,32784
  810024:	18ffffc4 	addi	r3,r3,-1
  810028:	800497fa 	slli	r2,r16,31
  81002c:	30c6703a 	and	r3,r6,r3
  810030:	1946b03a 	or	r3,r3,r5
  810034:	01600034 	movhi	r5,32768
  810038:	297fffc4 	addi	r5,r5,-1
  81003c:	194a703a 	and	r5,r3,r5
  810040:	288ab03a 	or	r5,r5,r2
  810044:	2807883a 	mov	r3,r5
  810048:	7005883a 	mov	r2,r14
  81004c:	dc800217 	ldw	r18,8(sp)
  810050:	dc400117 	ldw	r17,4(sp)
  810054:	dc000017 	ldw	r16,0(sp)
  810058:	dec00304 	addi	sp,sp,12
  81005c:	f800283a 	ret
  810060:	21000217 	ldw	r4,8(r4)
  810064:	00bf0084 	movi	r2,-1022
  810068:	20803f16 	blt	r4,r2,810168 <__pack_d+0x1b4>
  81006c:	0080ffc4 	movi	r2,1023
  810070:	11002c16 	blt	r2,r4,810124 <__pack_d+0x170>
  810074:	00803fc4 	movi	r2,255
  810078:	408c703a 	and	r6,r8,r2
  81007c:	00802004 	movi	r2,128
  810080:	0007883a 	mov	r3,zero
  810084:	000f883a 	mov	r7,zero
  810088:	2280ffc4 	addi	r10,r4,1023
  81008c:	30801e26 	beq	r6,r2,810108 <__pack_d+0x154>
  810090:	00801fc4 	movi	r2,127
  810094:	4089883a 	add	r4,r8,r2
  810098:	220d803a 	cmpltu	r6,r4,r8
  81009c:	324d883a 	add	r6,r6,r9
  8100a0:	2011883a 	mov	r8,r4
  8100a4:	3013883a 	mov	r9,r6
  8100a8:	00880034 	movhi	r2,8192
  8100ac:	10bfffc4 	addi	r2,r2,-1
  8100b0:	12400d36 	bltu	r2,r9,8100e8 <__pack_d+0x134>
  8100b4:	4804963a 	slli	r2,r9,24
  8100b8:	400cd23a 	srli	r6,r8,8
  8100bc:	480ed23a 	srli	r7,r9,8
  8100c0:	013fffc4 	movi	r4,-1
  8100c4:	118cb03a 	or	r6,r2,r6
  8100c8:	01400434 	movhi	r5,16
  8100cc:	297fffc4 	addi	r5,r5,-1
  8100d0:	3104703a 	and	r2,r6,r4
  8100d4:	3946703a 	and	r3,r7,r5
  8100d8:	5201ffcc 	andi	r8,r10,2047
  8100dc:	100d883a 	mov	r6,r2
  8100e0:	180f883a 	mov	r7,r3
  8100e4:	003fc706 	br	810004 <__pack_d+0x50>
  8100e8:	480897fa 	slli	r4,r9,31
  8100ec:	4004d07a 	srli	r2,r8,1
  8100f0:	4806d07a 	srli	r3,r9,1
  8100f4:	52800044 	addi	r10,r10,1
  8100f8:	2084b03a 	or	r2,r4,r2
  8100fc:	1011883a 	mov	r8,r2
  810100:	1813883a 	mov	r9,r3
  810104:	003feb06 	br	8100b4 <__pack_d+0x100>
  810108:	383fe11e 	bne	r7,zero,810090 <__pack_d+0xdc>
  81010c:	01004004 	movi	r4,256
  810110:	4104703a 	and	r2,r8,r4
  810114:	10c4b03a 	or	r2,r2,r3
  810118:	103fe326 	beq	r2,zero,8100a8 <__pack_d+0xf4>
  81011c:	3005883a 	mov	r2,r6
  810120:	003fdc06 	br	810094 <__pack_d+0xe0>
  810124:	000d883a 	mov	r6,zero
  810128:	000f883a 	mov	r7,zero
  81012c:	0201ffc4 	movi	r8,2047
  810130:	003fb406 	br	810004 <__pack_d+0x50>
  810134:	0005883a 	mov	r2,zero
  810138:	00c00234 	movhi	r3,8
  81013c:	408cb03a 	or	r6,r8,r2
  810140:	48ceb03a 	or	r7,r9,r3
  810144:	013fffc4 	movi	r4,-1
  810148:	01400434 	movhi	r5,16
  81014c:	297fffc4 	addi	r5,r5,-1
  810150:	3104703a 	and	r2,r6,r4
  810154:	3946703a 	and	r3,r7,r5
  810158:	100d883a 	mov	r6,r2
  81015c:	180f883a 	mov	r7,r3
  810160:	0201ffc4 	movi	r8,2047
  810164:	003fa706 	br	810004 <__pack_d+0x50>
  810168:	1109c83a 	sub	r4,r2,r4
  81016c:	00800e04 	movi	r2,56
  810170:	11004316 	blt	r2,r4,810280 <__pack_d+0x2cc>
  810174:	21fff804 	addi	r7,r4,-32
  810178:	38004516 	blt	r7,zero,810290 <__pack_d+0x2dc>
  81017c:	49d8d83a 	srl	r12,r9,r7
  810180:	001b883a 	mov	r13,zero
  810184:	0023883a 	mov	r17,zero
  810188:	01400044 	movi	r5,1
  81018c:	0025883a 	mov	r18,zero
  810190:	38004716 	blt	r7,zero,8102b0 <__pack_d+0x2fc>
  810194:	29d6983a 	sll	r11,r5,r7
  810198:	0015883a 	mov	r10,zero
  81019c:	00bfffc4 	movi	r2,-1
  8101a0:	5089883a 	add	r4,r10,r2
  8101a4:	588b883a 	add	r5,r11,r2
  8101a8:	228d803a 	cmpltu	r6,r4,r10
  8101ac:	314b883a 	add	r5,r6,r5
  8101b0:	4104703a 	and	r2,r8,r4
  8101b4:	4946703a 	and	r3,r9,r5
  8101b8:	10c4b03a 	or	r2,r2,r3
  8101bc:	10000226 	beq	r2,zero,8101c8 <__pack_d+0x214>
  8101c0:	04400044 	movi	r17,1
  8101c4:	0025883a 	mov	r18,zero
  8101c8:	00803fc4 	movi	r2,255
  8101cc:	644eb03a 	or	r7,r12,r17
  8101d0:	3892703a 	and	r9,r7,r2
  8101d4:	00802004 	movi	r2,128
  8101d8:	6c90b03a 	or	r8,r13,r18
  8101dc:	0015883a 	mov	r10,zero
  8101e0:	48801626 	beq	r9,r2,81023c <__pack_d+0x288>
  8101e4:	01001fc4 	movi	r4,127
  8101e8:	3905883a 	add	r2,r7,r4
  8101ec:	11cd803a 	cmpltu	r6,r2,r7
  8101f0:	320d883a 	add	r6,r6,r8
  8101f4:	100f883a 	mov	r7,r2
  8101f8:	00840034 	movhi	r2,4096
  8101fc:	10bfffc4 	addi	r2,r2,-1
  810200:	3011883a 	mov	r8,r6
  810204:	0007883a 	mov	r3,zero
  810208:	11801b36 	bltu	r2,r6,810278 <__pack_d+0x2c4>
  81020c:	4004963a 	slli	r2,r8,24
  810210:	3808d23a 	srli	r4,r7,8
  810214:	400ad23a 	srli	r5,r8,8
  810218:	1813883a 	mov	r9,r3
  81021c:	1108b03a 	or	r4,r2,r4
  810220:	00bfffc4 	movi	r2,-1
  810224:	00c00434 	movhi	r3,16
  810228:	18ffffc4 	addi	r3,r3,-1
  81022c:	208c703a 	and	r6,r4,r2
  810230:	28ce703a 	and	r7,r5,r3
  810234:	4a01ffcc 	andi	r8,r9,2047
  810238:	003f7206 	br	810004 <__pack_d+0x50>
  81023c:	503fe91e 	bne	r10,zero,8101e4 <__pack_d+0x230>
  810240:	01004004 	movi	r4,256
  810244:	3904703a 	and	r2,r7,r4
  810248:	0007883a 	mov	r3,zero
  81024c:	10c4b03a 	or	r2,r2,r3
  810250:	10000626 	beq	r2,zero,81026c <__pack_d+0x2b8>
  810254:	3a45883a 	add	r2,r7,r9
  810258:	11cd803a 	cmpltu	r6,r2,r7
  81025c:	320d883a 	add	r6,r6,r8
  810260:	100f883a 	mov	r7,r2
  810264:	3011883a 	mov	r8,r6
  810268:	0007883a 	mov	r3,zero
  81026c:	00840034 	movhi	r2,4096
  810270:	10bfffc4 	addi	r2,r2,-1
  810274:	123fe52e 	bgeu	r2,r8,81020c <__pack_d+0x258>
  810278:	00c00044 	movi	r3,1
  81027c:	003fe306 	br	81020c <__pack_d+0x258>
  810280:	0009883a 	mov	r4,zero
  810284:	0013883a 	mov	r9,zero
  810288:	000b883a 	mov	r5,zero
  81028c:	003fe406 	br	810220 <__pack_d+0x26c>
  810290:	4a47883a 	add	r3,r9,r9
  810294:	008007c4 	movi	r2,31
  810298:	1105c83a 	sub	r2,r2,r4
  81029c:	1886983a 	sll	r3,r3,r2
  8102a0:	4118d83a 	srl	r12,r8,r4
  8102a4:	491ad83a 	srl	r13,r9,r4
  8102a8:	1b18b03a 	or	r12,r3,r12
  8102ac:	003fb506 	br	810184 <__pack_d+0x1d0>
  8102b0:	2806d07a 	srli	r3,r5,1
  8102b4:	008007c4 	movi	r2,31
  8102b8:	1105c83a 	sub	r2,r2,r4
  8102bc:	1896d83a 	srl	r11,r3,r2
  8102c0:	2914983a 	sll	r10,r5,r4
  8102c4:	003fb506 	br	81019c <__pack_d+0x1e8>

008102c8 <__unpack_d>:
  8102c8:	20c00117 	ldw	r3,4(r4)
  8102cc:	22400017 	ldw	r9,0(r4)
  8102d0:	00800434 	movhi	r2,16
  8102d4:	10bfffc4 	addi	r2,r2,-1
  8102d8:	1808d53a 	srli	r4,r3,20
  8102dc:	180cd7fa 	srli	r6,r3,31
  8102e0:	1894703a 	and	r10,r3,r2
  8102e4:	2201ffcc 	andi	r8,r4,2047
  8102e8:	281b883a 	mov	r13,r5
  8102ec:	4817883a 	mov	r11,r9
  8102f0:	29800115 	stw	r6,4(r5)
  8102f4:	5019883a 	mov	r12,r10
  8102f8:	40001e1e 	bne	r8,zero,810374 <__unpack_d+0xac>
  8102fc:	4a84b03a 	or	r2,r9,r10
  810300:	10001926 	beq	r2,zero,810368 <__unpack_d+0xa0>
  810304:	4804d63a 	srli	r2,r9,24
  810308:	500c923a 	slli	r6,r10,8
  81030c:	013f0084 	movi	r4,-1022
  810310:	00c40034 	movhi	r3,4096
  810314:	18ffffc4 	addi	r3,r3,-1
  810318:	118cb03a 	or	r6,r2,r6
  81031c:	008000c4 	movi	r2,3
  810320:	480a923a 	slli	r5,r9,8
  810324:	68800015 	stw	r2,0(r13)
  810328:	69000215 	stw	r4,8(r13)
  81032c:	19800b36 	bltu	r3,r6,81035c <__unpack_d+0x94>
  810330:	200f883a 	mov	r7,r4
  810334:	1811883a 	mov	r8,r3
  810338:	2945883a 	add	r2,r5,r5
  81033c:	1149803a 	cmpltu	r4,r2,r5
  810340:	3187883a 	add	r3,r6,r6
  810344:	20c9883a 	add	r4,r4,r3
  810348:	100b883a 	mov	r5,r2
  81034c:	200d883a 	mov	r6,r4
  810350:	39ffffc4 	addi	r7,r7,-1
  810354:	413ff82e 	bgeu	r8,r4,810338 <__unpack_d+0x70>
  810358:	69c00215 	stw	r7,8(r13)
  81035c:	69800415 	stw	r6,16(r13)
  810360:	69400315 	stw	r5,12(r13)
  810364:	f800283a 	ret
  810368:	00800084 	movi	r2,2
  81036c:	28800015 	stw	r2,0(r5)
  810370:	f800283a 	ret
  810374:	0081ffc4 	movi	r2,2047
  810378:	40800f26 	beq	r8,r2,8103b8 <__unpack_d+0xf0>
  81037c:	480cd63a 	srli	r6,r9,24
  810380:	5006923a 	slli	r3,r10,8
  810384:	4804923a 	slli	r2,r9,8
  810388:	0009883a 	mov	r4,zero
  81038c:	30c6b03a 	or	r3,r6,r3
  810390:	01440034 	movhi	r5,4096
  810394:	110cb03a 	or	r6,r2,r4
  810398:	423f0044 	addi	r8,r8,-1023
  81039c:	194eb03a 	or	r7,r3,r5
  8103a0:	008000c4 	movi	r2,3
  8103a4:	69c00415 	stw	r7,16(r13)
  8103a8:	6a000215 	stw	r8,8(r13)
  8103ac:	68800015 	stw	r2,0(r13)
  8103b0:	69800315 	stw	r6,12(r13)
  8103b4:	f800283a 	ret
  8103b8:	4a84b03a 	or	r2,r9,r10
  8103bc:	1000031e 	bne	r2,zero,8103cc <__unpack_d+0x104>
  8103c0:	00800104 	movi	r2,4
  8103c4:	28800015 	stw	r2,0(r5)
  8103c8:	f800283a 	ret
  8103cc:	0009883a 	mov	r4,zero
  8103d0:	01400234 	movhi	r5,8
  8103d4:	4904703a 	and	r2,r9,r4
  8103d8:	5146703a 	and	r3,r10,r5
  8103dc:	10c4b03a 	or	r2,r2,r3
  8103e0:	10000526 	beq	r2,zero,8103f8 <__unpack_d+0x130>
  8103e4:	00800044 	movi	r2,1
  8103e8:	68800015 	stw	r2,0(r13)
  8103ec:	6b000415 	stw	r12,16(r13)
  8103f0:	6ac00315 	stw	r11,12(r13)
  8103f4:	f800283a 	ret
  8103f8:	68000015 	stw	zero,0(r13)
  8103fc:	003ffb06 	br	8103ec <__unpack_d+0x124>

00810400 <__fpcmp_parts_d>:
  810400:	21800017 	ldw	r6,0(r4)
  810404:	00c00044 	movi	r3,1
  810408:	19800a2e 	bgeu	r3,r6,810434 <__fpcmp_parts_d+0x34>
  81040c:	28800017 	ldw	r2,0(r5)
  810410:	1880082e 	bgeu	r3,r2,810434 <__fpcmp_parts_d+0x34>
  810414:	00c00104 	movi	r3,4
  810418:	30c02626 	beq	r6,r3,8104b4 <__fpcmp_parts_d+0xb4>
  81041c:	10c02226 	beq	r2,r3,8104a8 <__fpcmp_parts_d+0xa8>
  810420:	00c00084 	movi	r3,2
  810424:	30c00526 	beq	r6,r3,81043c <__fpcmp_parts_d+0x3c>
  810428:	10c0071e 	bne	r2,r3,810448 <__fpcmp_parts_d+0x48>
  81042c:	20800117 	ldw	r2,4(r4)
  810430:	1000091e 	bne	r2,zero,810458 <__fpcmp_parts_d+0x58>
  810434:	00800044 	movi	r2,1
  810438:	f800283a 	ret
  81043c:	10c01a1e 	bne	r2,r3,8104a8 <__fpcmp_parts_d+0xa8>
  810440:	0005883a 	mov	r2,zero
  810444:	f800283a 	ret
  810448:	22000117 	ldw	r8,4(r4)
  81044c:	28800117 	ldw	r2,4(r5)
  810450:	40800326 	beq	r8,r2,810460 <__fpcmp_parts_d+0x60>
  810454:	403ff726 	beq	r8,zero,810434 <__fpcmp_parts_d+0x34>
  810458:	00bfffc4 	movi	r2,-1
  81045c:	f800283a 	ret
  810460:	20c00217 	ldw	r3,8(r4)
  810464:	28800217 	ldw	r2,8(r5)
  810468:	10fffa16 	blt	r2,r3,810454 <__fpcmp_parts_d+0x54>
  81046c:	18800916 	blt	r3,r2,810494 <__fpcmp_parts_d+0x94>
  810470:	21c00417 	ldw	r7,16(r4)
  810474:	28c00417 	ldw	r3,16(r5)
  810478:	21800317 	ldw	r6,12(r4)
  81047c:	28800317 	ldw	r2,12(r5)
  810480:	19fff436 	bltu	r3,r7,810454 <__fpcmp_parts_d+0x54>
  810484:	38c00526 	beq	r7,r3,81049c <__fpcmp_parts_d+0x9c>
  810488:	38c00236 	bltu	r7,r3,810494 <__fpcmp_parts_d+0x94>
  81048c:	19ffec1e 	bne	r3,r7,810440 <__fpcmp_parts_d+0x40>
  810490:	30bfeb2e 	bgeu	r6,r2,810440 <__fpcmp_parts_d+0x40>
  810494:	403fe71e 	bne	r8,zero,810434 <__fpcmp_parts_d+0x34>
  810498:	003fef06 	br	810458 <__fpcmp_parts_d+0x58>
  81049c:	11bffa2e 	bgeu	r2,r6,810488 <__fpcmp_parts_d+0x88>
  8104a0:	403fe426 	beq	r8,zero,810434 <__fpcmp_parts_d+0x34>
  8104a4:	003fec06 	br	810458 <__fpcmp_parts_d+0x58>
  8104a8:	28800117 	ldw	r2,4(r5)
  8104ac:	103fe11e 	bne	r2,zero,810434 <__fpcmp_parts_d+0x34>
  8104b0:	003fe906 	br	810458 <__fpcmp_parts_d+0x58>
  8104b4:	11bfdd1e 	bne	r2,r6,81042c <__fpcmp_parts_d+0x2c>
  8104b8:	28c00117 	ldw	r3,4(r5)
  8104bc:	20800117 	ldw	r2,4(r4)
  8104c0:	1885c83a 	sub	r2,r3,r2
  8104c4:	f800283a 	ret

008104c8 <__pack_f>:
  8104c8:	20c00017 	ldw	r3,0(r4)
  8104cc:	01c00044 	movi	r7,1
  8104d0:	21800317 	ldw	r6,12(r4)
  8104d4:	21400117 	ldw	r5,4(r4)
  8104d8:	38c02d2e 	bgeu	r7,r3,810590 <__pack_f+0xc8>
  8104dc:	00800104 	movi	r2,4
  8104e0:	18802826 	beq	r3,r2,810584 <__pack_f+0xbc>
  8104e4:	00800084 	movi	r2,2
  8104e8:	18800126 	beq	r3,r2,8104f0 <__pack_f+0x28>
  8104ec:	3000101e 	bne	r6,zero,810530 <__pack_f+0x68>
  8104f0:	000d883a 	mov	r6,zero
  8104f4:	0007883a 	mov	r3,zero
  8104f8:	19003fcc 	andi	r4,r3,255
  8104fc:	200895fa 	slli	r4,r4,23
  810500:	00c02034 	movhi	r3,128
  810504:	18ffffc4 	addi	r3,r3,-1
  810508:	30c6703a 	and	r3,r6,r3
  81050c:	10a0002c 	andhi	r2,r2,32768
  810510:	10c4b03a 	or	r2,r2,r3
  810514:	280a97fa 	slli	r5,r5,31
  810518:	1104b03a 	or	r2,r2,r4
  81051c:	00e00034 	movhi	r3,32768
  810520:	18ffffc4 	addi	r3,r3,-1
  810524:	10c4703a 	and	r2,r2,r3
  810528:	1144b03a 	or	r2,r2,r5
  81052c:	f800283a 	ret
  810530:	21000217 	ldw	r4,8(r4)
  810534:	00bfe084 	movi	r2,-126
  810538:	20801b16 	blt	r4,r2,8105a8 <__pack_f+0xe0>
  81053c:	00801fc4 	movi	r2,127
  810540:	11001016 	blt	r2,r4,810584 <__pack_f+0xbc>
  810544:	308e703a 	and	r7,r6,r2
  810548:	2087883a 	add	r3,r4,r2
  81054c:	00801004 	movi	r2,64
  810550:	38800526 	beq	r7,r2,810568 <__pack_f+0xa0>
  810554:	31800fc4 	addi	r6,r6,63
  810558:	30000716 	blt	r6,zero,810578 <__pack_f+0xb0>
  81055c:	300490ba 	slli	r2,r6,2
  810560:	100cd27a 	srli	r6,r2,9
  810564:	003fe406 	br	8104f8 <__pack_f+0x30>
  810568:	3080200c 	andi	r2,r6,128
  81056c:	103ffa26 	beq	r2,zero,810558 <__pack_f+0x90>
  810570:	31cd883a 	add	r6,r6,r7
  810574:	003ff806 	br	810558 <__pack_f+0x90>
  810578:	300cd07a 	srli	r6,r6,1
  81057c:	18c00044 	addi	r3,r3,1
  810580:	003ff606 	br	81055c <__pack_f+0x94>
  810584:	000d883a 	mov	r6,zero
  810588:	00ffffc4 	movi	r3,-1
  81058c:	003fda06 	br	8104f8 <__pack_f+0x30>
  810590:	31800434 	orhi	r6,r6,16
  810594:	00802034 	movhi	r2,128
  810598:	10bfffc4 	addi	r2,r2,-1
  81059c:	308c703a 	and	r6,r6,r2
  8105a0:	00ffffc4 	movi	r3,-1
  8105a4:	003fd406 	br	8104f8 <__pack_f+0x30>
  8105a8:	1109c83a 	sub	r4,r2,r4
  8105ac:	00800644 	movi	r2,25
  8105b0:	11001216 	blt	r2,r4,8105fc <__pack_f+0x134>
  8105b4:	3904983a 	sll	r2,r7,r4
  8105b8:	3106d83a 	srl	r3,r6,r4
  8105bc:	10bfffc4 	addi	r2,r2,-1
  8105c0:	3084703a 	and	r2,r6,r2
  8105c4:	1004c03a 	cmpne	r2,r2,zero
  8105c8:	1886b03a 	or	r3,r3,r2
  8105cc:	19001fcc 	andi	r4,r3,127
  8105d0:	00801004 	movi	r2,64
  8105d4:	20800c26 	beq	r4,r2,810608 <__pack_f+0x140>
  8105d8:	18c00fc4 	addi	r3,r3,63
  8105dc:	00900034 	movhi	r2,16384
  8105e0:	10bfffc4 	addi	r2,r2,-1
  8105e4:	180cd1fa 	srli	r6,r3,7
  8105e8:	10c7803a 	cmpltu	r3,r2,r3
  8105ec:	00802034 	movhi	r2,128
  8105f0:	10bfffc4 	addi	r2,r2,-1
  8105f4:	308c703a 	and	r6,r6,r2
  8105f8:	003fbf06 	br	8104f8 <__pack_f+0x30>
  8105fc:	0007883a 	mov	r3,zero
  810600:	000d883a 	mov	r6,zero
  810604:	003ff906 	br	8105ec <__pack_f+0x124>
  810608:	1880200c 	andi	r2,r3,128
  81060c:	10000126 	beq	r2,zero,810614 <__pack_f+0x14c>
  810610:	1907883a 	add	r3,r3,r4
  810614:	180cd1fa 	srli	r6,r3,7
  810618:	00900034 	movhi	r2,16384
  81061c:	10bfffc4 	addi	r2,r2,-1
  810620:	10c7803a 	cmpltu	r3,r2,r3
  810624:	003ff106 	br	8105ec <__pack_f+0x124>

00810628 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810628:	defff404 	addi	sp,sp,-48
  81062c:	df000b15 	stw	fp,44(sp)
  810630:	df000b04 	addi	fp,sp,44
  810634:	e13ffb15 	stw	r4,-20(fp)
  810638:	e17ffc15 	stw	r5,-16(fp)
  81063c:	e1bffd15 	stw	r6,-12(fp)
  810640:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810644:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810648:	008020b4 	movhi	r2,130
  81064c:	10a3a804 	addi	r2,r2,-29024
  810650:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810654:	1005003a 	cmpeq	r2,r2,zero
  810658:	1000411e 	bne	r2,zero,810760 <alt_alarm_start+0x138>
  {
    if (alarm)
  81065c:	e0bffb17 	ldw	r2,-20(fp)
  810660:	1005003a 	cmpeq	r2,r2,zero
  810664:	10003b1e 	bne	r2,zero,810754 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810668:	e0fffb17 	ldw	r3,-20(fp)
  81066c:	e0bffd17 	ldw	r2,-12(fp)
  810670:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810674:	e0fffb17 	ldw	r3,-20(fp)
  810678:	e0bffe17 	ldw	r2,-8(fp)
  81067c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810680:	0005303a 	rdctl	r2,status
  810684:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810688:	e0fff817 	ldw	r3,-32(fp)
  81068c:	00bfff84 	movi	r2,-2
  810690:	1884703a 	and	r2,r3,r2
  810694:	1001703a 	wrctl	status,r2
  
  return context;
  810698:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81069c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8106a0:	008020b4 	movhi	r2,130
  8106a4:	10a3a904 	addi	r2,r2,-29020
  8106a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8106ac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8106b0:	e0fffc17 	ldw	r3,-16(fp)
  8106b4:	e0bff917 	ldw	r2,-28(fp)
  8106b8:	1885883a 	add	r2,r3,r2
  8106bc:	10c00044 	addi	r3,r2,1
  8106c0:	e0bffb17 	ldw	r2,-20(fp)
  8106c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8106c8:	e0bffb17 	ldw	r2,-20(fp)
  8106cc:	10c00217 	ldw	r3,8(r2)
  8106d0:	e0bff917 	ldw	r2,-28(fp)
  8106d4:	1880042e 	bgeu	r3,r2,8106e8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8106d8:	e0fffb17 	ldw	r3,-20(fp)
  8106dc:	00800044 	movi	r2,1
  8106e0:	18800405 	stb	r2,16(r3)
  8106e4:	00000206 	br	8106f0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8106e8:	e0bffb17 	ldw	r2,-20(fp)
  8106ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8106f0:	e0fffb17 	ldw	r3,-20(fp)
  8106f4:	00802074 	movhi	r2,129
  8106f8:	109c5304 	addi	r2,r2,29004
  8106fc:	e0bff615 	stw	r2,-40(fp)
  810700:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810704:	e0fff717 	ldw	r3,-36(fp)
  810708:	e0bff617 	ldw	r2,-40(fp)
  81070c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810710:	e0bff617 	ldw	r2,-40(fp)
  810714:	10c00017 	ldw	r3,0(r2)
  810718:	e0bff717 	ldw	r2,-36(fp)
  81071c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810720:	e0bff617 	ldw	r2,-40(fp)
  810724:	10c00017 	ldw	r3,0(r2)
  810728:	e0bff717 	ldw	r2,-36(fp)
  81072c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810730:	e0fff617 	ldw	r3,-40(fp)
  810734:	e0bff717 	ldw	r2,-36(fp)
  810738:	18800015 	stw	r2,0(r3)
  81073c:	e0bffa17 	ldw	r2,-24(fp)
  810740:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810744:	e0bff517 	ldw	r2,-44(fp)
  810748:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81074c:	e03fff15 	stw	zero,-4(fp)
  810750:	00000506 	br	810768 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810754:	00bffa84 	movi	r2,-22
  810758:	e0bfff15 	stw	r2,-4(fp)
  81075c:	00000206 	br	810768 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810760:	00bfde84 	movi	r2,-134
  810764:	e0bfff15 	stw	r2,-4(fp)
  810768:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81076c:	e037883a 	mov	sp,fp
  810770:	df000017 	ldw	fp,0(sp)
  810774:	dec00104 	addi	sp,sp,4
  810778:	f800283a 	ret

0081077c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81077c:	defff804 	addi	sp,sp,-32
  810780:	dfc00715 	stw	ra,28(sp)
  810784:	df000615 	stw	fp,24(sp)
  810788:	df000604 	addi	fp,sp,24
  81078c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810790:	e0bffc17 	ldw	r2,-16(fp)
  810794:	1004803a 	cmplt	r2,r2,zero
  810798:	1000081e 	bne	r2,zero,8107bc <close+0x40>
  81079c:	e0bffc17 	ldw	r2,-16(fp)
  8107a0:	10800324 	muli	r2,r2,12
  8107a4:	1007883a 	mov	r3,r2
  8107a8:	00802074 	movhi	r2,129
  8107ac:	10974f04 	addi	r2,r2,23868
  8107b0:	1887883a 	add	r3,r3,r2
  8107b4:	e0ffff15 	stw	r3,-4(fp)
  8107b8:	00000106 	br	8107c0 <close+0x44>
  8107bc:	e03fff15 	stw	zero,-4(fp)
  8107c0:	e0bfff17 	ldw	r2,-4(fp)
  8107c4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8107c8:	e0bffb17 	ldw	r2,-20(fp)
  8107cc:	1005003a 	cmpeq	r2,r2,zero
  8107d0:	10001d1e 	bne	r2,zero,810848 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8107d4:	e0bffb17 	ldw	r2,-20(fp)
  8107d8:	10800017 	ldw	r2,0(r2)
  8107dc:	10800417 	ldw	r2,16(r2)
  8107e0:	1005003a 	cmpeq	r2,r2,zero
  8107e4:	1000071e 	bne	r2,zero,810804 <close+0x88>
  8107e8:	e0bffb17 	ldw	r2,-20(fp)
  8107ec:	10800017 	ldw	r2,0(r2)
  8107f0:	10800417 	ldw	r2,16(r2)
  8107f4:	e13ffb17 	ldw	r4,-20(fp)
  8107f8:	103ee83a 	callr	r2
  8107fc:	e0bffe15 	stw	r2,-8(fp)
  810800:	00000106 	br	810808 <close+0x8c>
  810804:	e03ffe15 	stw	zero,-8(fp)
  810808:	e0bffe17 	ldw	r2,-8(fp)
  81080c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810810:	e13ffc17 	ldw	r4,-16(fp)
  810814:	08114440 	call	811444 <alt_release_fd>
    if (rval < 0)
  810818:	e0bffa17 	ldw	r2,-24(fp)
  81081c:	1004403a 	cmpge	r2,r2,zero
  810820:	1000071e 	bne	r2,zero,810840 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  810824:	08108780 	call	810878 <alt_get_errno>
  810828:	e0fffa17 	ldw	r3,-24(fp)
  81082c:	00c7c83a 	sub	r3,zero,r3
  810830:	10c00015 	stw	r3,0(r2)
      return -1;
  810834:	00bfffc4 	movi	r2,-1
  810838:	e0bffd15 	stw	r2,-12(fp)
  81083c:	00000806 	br	810860 <close+0xe4>
    }
    return 0;
  810840:	e03ffd15 	stw	zero,-12(fp)
  810844:	00000606 	br	810860 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810848:	08108780 	call	810878 <alt_get_errno>
  81084c:	1007883a 	mov	r3,r2
  810850:	00801444 	movi	r2,81
  810854:	18800015 	stw	r2,0(r3)
    return -1;
  810858:	00bfffc4 	movi	r2,-1
  81085c:	e0bffd15 	stw	r2,-12(fp)
  810860:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  810864:	e037883a 	mov	sp,fp
  810868:	dfc00117 	ldw	ra,4(sp)
  81086c:	df000017 	ldw	fp,0(sp)
  810870:	dec00204 	addi	sp,sp,8
  810874:	f800283a 	ret

00810878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810878:	defffd04 	addi	sp,sp,-12
  81087c:	dfc00215 	stw	ra,8(sp)
  810880:	df000115 	stw	fp,4(sp)
  810884:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810888:	00802074 	movhi	r2,129
  81088c:	109c5004 	addi	r2,r2,28992
  810890:	10800017 	ldw	r2,0(r2)
  810894:	1005003a 	cmpeq	r2,r2,zero
  810898:	1000061e 	bne	r2,zero,8108b4 <alt_get_errno+0x3c>
  81089c:	00802074 	movhi	r2,129
  8108a0:	109c5004 	addi	r2,r2,28992
  8108a4:	10800017 	ldw	r2,0(r2)
  8108a8:	103ee83a 	callr	r2
  8108ac:	e0bfff15 	stw	r2,-4(fp)
  8108b0:	00000306 	br	8108c0 <alt_get_errno+0x48>
  8108b4:	008020b4 	movhi	r2,130
  8108b8:	10a39d04 	addi	r2,r2,-29068
  8108bc:	e0bfff15 	stw	r2,-4(fp)
  8108c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8108c4:	e037883a 	mov	sp,fp
  8108c8:	dfc00117 	ldw	ra,4(sp)
  8108cc:	df000017 	ldw	fp,0(sp)
  8108d0:	dec00204 	addi	sp,sp,8
  8108d4:	f800283a 	ret

008108d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8108d8:	defffc04 	addi	sp,sp,-16
  8108dc:	df000315 	stw	fp,12(sp)
  8108e0:	df000304 	addi	fp,sp,12
  8108e4:	e13ffd15 	stw	r4,-12(fp)
  8108e8:	e17ffe15 	stw	r5,-8(fp)
  8108ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8108f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8108f4:	e037883a 	mov	sp,fp
  8108f8:	df000017 	ldw	fp,0(sp)
  8108fc:	dec00104 	addi	sp,sp,4
  810900:	f800283a 	ret

00810904 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810904:	defff904 	addi	sp,sp,-28
  810908:	dfc00615 	stw	ra,24(sp)
  81090c:	df000515 	stw	fp,20(sp)
  810910:	df000504 	addi	fp,sp,20
  810914:	e13ffc15 	stw	r4,-16(fp)
  810918:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81091c:	e0bffc17 	ldw	r2,-16(fp)
  810920:	1004803a 	cmplt	r2,r2,zero
  810924:	1000081e 	bne	r2,zero,810948 <fstat+0x44>
  810928:	e0bffc17 	ldw	r2,-16(fp)
  81092c:	10800324 	muli	r2,r2,12
  810930:	1007883a 	mov	r3,r2
  810934:	00802074 	movhi	r2,129
  810938:	10974f04 	addi	r2,r2,23868
  81093c:	1887883a 	add	r3,r3,r2
  810940:	e0ffff15 	stw	r3,-4(fp)
  810944:	00000106 	br	81094c <fstat+0x48>
  810948:	e03fff15 	stw	zero,-4(fp)
  81094c:	e0bfff17 	ldw	r2,-4(fp)
  810950:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810954:	e0bffb17 	ldw	r2,-20(fp)
  810958:	1005003a 	cmpeq	r2,r2,zero
  81095c:	1000121e 	bne	r2,zero,8109a8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810960:	e0bffb17 	ldw	r2,-20(fp)
  810964:	10800017 	ldw	r2,0(r2)
  810968:	10800817 	ldw	r2,32(r2)
  81096c:	1005003a 	cmpeq	r2,r2,zero
  810970:	1000081e 	bne	r2,zero,810994 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  810974:	e0bffb17 	ldw	r2,-20(fp)
  810978:	10800017 	ldw	r2,0(r2)
  81097c:	10800817 	ldw	r2,32(r2)
  810980:	e13ffb17 	ldw	r4,-20(fp)
  810984:	e17ffd17 	ldw	r5,-12(fp)
  810988:	103ee83a 	callr	r2
  81098c:	e0bffe15 	stw	r2,-8(fp)
  810990:	00000b06 	br	8109c0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810994:	e0fffd17 	ldw	r3,-12(fp)
  810998:	00880004 	movi	r2,8192
  81099c:	18800115 	stw	r2,4(r3)
      return 0;
  8109a0:	e03ffe15 	stw	zero,-8(fp)
  8109a4:	00000606 	br	8109c0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8109a8:	08109d80 	call	8109d8 <alt_get_errno>
  8109ac:	1007883a 	mov	r3,r2
  8109b0:	00801444 	movi	r2,81
  8109b4:	18800015 	stw	r2,0(r3)
    return -1;
  8109b8:	00bfffc4 	movi	r2,-1
  8109bc:	e0bffe15 	stw	r2,-8(fp)
  8109c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8109c4:	e037883a 	mov	sp,fp
  8109c8:	dfc00117 	ldw	ra,4(sp)
  8109cc:	df000017 	ldw	fp,0(sp)
  8109d0:	dec00204 	addi	sp,sp,8
  8109d4:	f800283a 	ret

008109d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8109d8:	defffd04 	addi	sp,sp,-12
  8109dc:	dfc00215 	stw	ra,8(sp)
  8109e0:	df000115 	stw	fp,4(sp)
  8109e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8109e8:	00802074 	movhi	r2,129
  8109ec:	109c5004 	addi	r2,r2,28992
  8109f0:	10800017 	ldw	r2,0(r2)
  8109f4:	1005003a 	cmpeq	r2,r2,zero
  8109f8:	1000061e 	bne	r2,zero,810a14 <alt_get_errno+0x3c>
  8109fc:	00802074 	movhi	r2,129
  810a00:	109c5004 	addi	r2,r2,28992
  810a04:	10800017 	ldw	r2,0(r2)
  810a08:	103ee83a 	callr	r2
  810a0c:	e0bfff15 	stw	r2,-4(fp)
  810a10:	00000306 	br	810a20 <alt_get_errno+0x48>
  810a14:	008020b4 	movhi	r2,130
  810a18:	10a39d04 	addi	r2,r2,-29068
  810a1c:	e0bfff15 	stw	r2,-4(fp)
  810a20:	e0bfff17 	ldw	r2,-4(fp)
}
  810a24:	e037883a 	mov	sp,fp
  810a28:	dfc00117 	ldw	ra,4(sp)
  810a2c:	df000017 	ldw	fp,0(sp)
  810a30:	dec00204 	addi	sp,sp,8
  810a34:	f800283a 	ret

00810a38 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  810a38:	deffef04 	addi	sp,sp,-68
  810a3c:	df001015 	stw	fp,64(sp)
  810a40:	df001004 	addi	fp,sp,64
  810a44:	e13ffc15 	stw	r4,-16(fp)
  810a48:	e17ffd15 	stw	r5,-12(fp)
  810a4c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  810a50:	00bffa84 	movi	r2,-22
  810a54:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810a58:	e0bffc17 	ldw	r2,-16(fp)
  810a5c:	10800828 	cmpgeui	r2,r2,32
  810a60:	1000601e 	bne	r2,zero,810be4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a64:	0005303a 	rdctl	r2,status
  810a68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a6c:	e0fff917 	ldw	r3,-28(fp)
  810a70:	00bfff84 	movi	r2,-2
  810a74:	1884703a 	and	r2,r3,r2
  810a78:	1001703a 	wrctl	status,r2
  
  return context;
  810a7c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810a80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  810a84:	e0bffc17 	ldw	r2,-16(fp)
  810a88:	00c020b4 	movhi	r3,130
  810a8c:	18e40304 	addi	r3,r3,-28660
  810a90:	100490fa 	slli	r2,r2,3
  810a94:	10c7883a 	add	r3,r2,r3
  810a98:	e0bffe17 	ldw	r2,-8(fp)
  810a9c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  810aa0:	e0bffc17 	ldw	r2,-16(fp)
  810aa4:	00c020b4 	movhi	r3,130
  810aa8:	18e40304 	addi	r3,r3,-28660
  810aac:	100490fa 	slli	r2,r2,3
  810ab0:	10c5883a 	add	r2,r2,r3
  810ab4:	10c00104 	addi	r3,r2,4
  810ab8:	e0bffd17 	ldw	r2,-12(fp)
  810abc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810ac0:	e0bffe17 	ldw	r2,-8(fp)
  810ac4:	1005003a 	cmpeq	r2,r2,zero
  810ac8:	1000201e 	bne	r2,zero,810b4c <alt_irq_register+0x114>
  810acc:	e0bffc17 	ldw	r2,-16(fp)
  810ad0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ad4:	0005303a 	rdctl	r2,status
  810ad8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810adc:	e0fff617 	ldw	r3,-40(fp)
  810ae0:	00bfff84 	movi	r2,-2
  810ae4:	1884703a 	and	r2,r3,r2
  810ae8:	1001703a 	wrctl	status,r2
  
  return context;
  810aec:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810af0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810af4:	e0fff717 	ldw	r3,-36(fp)
  810af8:	00800044 	movi	r2,1
  810afc:	10c4983a 	sll	r2,r2,r3
  810b00:	1007883a 	mov	r3,r2
  810b04:	008020b4 	movhi	r2,130
  810b08:	10a3a404 	addi	r2,r2,-29040
  810b0c:	10800017 	ldw	r2,0(r2)
  810b10:	1886b03a 	or	r3,r3,r2
  810b14:	008020b4 	movhi	r2,130
  810b18:	10a3a404 	addi	r2,r2,-29040
  810b1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810b20:	008020b4 	movhi	r2,130
  810b24:	10a3a404 	addi	r2,r2,-29040
  810b28:	10800017 	ldw	r2,0(r2)
  810b2c:	100170fa 	wrctl	ienable,r2
  810b30:	e0bff817 	ldw	r2,-32(fp)
  810b34:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b38:	e0bff517 	ldw	r2,-44(fp)
  810b3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810b40:	0005883a 	mov	r2,zero
  810b44:	e0bfff15 	stw	r2,-4(fp)
  810b48:	00002006 	br	810bcc <alt_irq_register+0x194>
  810b4c:	e0bffc17 	ldw	r2,-16(fp)
  810b50:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b54:	0005303a 	rdctl	r2,status
  810b58:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b5c:	e0fff217 	ldw	r3,-56(fp)
  810b60:	00bfff84 	movi	r2,-2
  810b64:	1884703a 	and	r2,r3,r2
  810b68:	1001703a 	wrctl	status,r2
  
  return context;
  810b6c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810b70:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  810b74:	e0fff317 	ldw	r3,-52(fp)
  810b78:	00800044 	movi	r2,1
  810b7c:	10c4983a 	sll	r2,r2,r3
  810b80:	0084303a 	nor	r2,zero,r2
  810b84:	1007883a 	mov	r3,r2
  810b88:	008020b4 	movhi	r2,130
  810b8c:	10a3a404 	addi	r2,r2,-29040
  810b90:	10800017 	ldw	r2,0(r2)
  810b94:	1886703a 	and	r3,r3,r2
  810b98:	008020b4 	movhi	r2,130
  810b9c:	10a3a404 	addi	r2,r2,-29040
  810ba0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810ba4:	008020b4 	movhi	r2,130
  810ba8:	10a3a404 	addi	r2,r2,-29040
  810bac:	10800017 	ldw	r2,0(r2)
  810bb0:	100170fa 	wrctl	ienable,r2
  810bb4:	e0bff417 	ldw	r2,-48(fp)
  810bb8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810bbc:	e0bff117 	ldw	r2,-60(fp)
  810bc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810bc4:	0005883a 	mov	r2,zero
  810bc8:	e0bfff15 	stw	r2,-4(fp)
  810bcc:	e0bfff17 	ldw	r2,-4(fp)
  810bd0:	e0bffb15 	stw	r2,-20(fp)
  810bd4:	e0bffa17 	ldw	r2,-24(fp)
  810bd8:	e0bff015 	stw	r2,-64(fp)
  810bdc:	e0bff017 	ldw	r2,-64(fp)
  810be0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810be4:	e0bffb17 	ldw	r2,-20(fp)
}
  810be8:	e037883a 	mov	sp,fp
  810bec:	df000017 	ldw	fp,0(sp)
  810bf0:	dec00104 	addi	sp,sp,4
  810bf4:	f800283a 	ret

00810bf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810bf8:	deffeb04 	addi	sp,sp,-84
  810bfc:	dfc01415 	stw	ra,80(sp)
  810c00:	df001315 	stw	fp,76(sp)
  810c04:	df001304 	addi	fp,sp,76
  810c08:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810c0c:	e0bffd17 	ldw	r2,-12(fp)
  810c10:	1004803a 	cmplt	r2,r2,zero
  810c14:	1000081e 	bne	r2,zero,810c38 <isatty+0x40>
  810c18:	e0bffd17 	ldw	r2,-12(fp)
  810c1c:	10800324 	muli	r2,r2,12
  810c20:	1007883a 	mov	r3,r2
  810c24:	00802074 	movhi	r2,129
  810c28:	10974f04 	addi	r2,r2,23868
  810c2c:	1887883a 	add	r3,r3,r2
  810c30:	e0ffff15 	stw	r3,-4(fp)
  810c34:	00000106 	br	810c3c <isatty+0x44>
  810c38:	e03fff15 	stw	zero,-4(fp)
  810c3c:	e0bfff17 	ldw	r2,-4(fp)
  810c40:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810c44:	e0bfed17 	ldw	r2,-76(fp)
  810c48:	1005003a 	cmpeq	r2,r2,zero
  810c4c:	10000f1e 	bne	r2,zero,810c8c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810c50:	e0bfed17 	ldw	r2,-76(fp)
  810c54:	10800017 	ldw	r2,0(r2)
  810c58:	10800817 	ldw	r2,32(r2)
  810c5c:	1004c03a 	cmpne	r2,r2,zero
  810c60:	1000031e 	bne	r2,zero,810c70 <isatty+0x78>
    {
      return 1;
  810c64:	00800044 	movi	r2,1
  810c68:	e0bffe15 	stw	r2,-8(fp)
  810c6c:	00000c06 	br	810ca0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810c70:	e17fee04 	addi	r5,fp,-72
  810c74:	e13ffd17 	ldw	r4,-12(fp)
  810c78:	08109040 	call	810904 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810c7c:	e0bfef17 	ldw	r2,-68(fp)
  810c80:	10880020 	cmpeqi	r2,r2,8192
  810c84:	e0bffe15 	stw	r2,-8(fp)
  810c88:	00000506 	br	810ca0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810c8c:	0810cb80 	call	810cb8 <alt_get_errno>
  810c90:	1007883a 	mov	r3,r2
  810c94:	00801444 	movi	r2,81
  810c98:	18800015 	stw	r2,0(r3)
    return 0;
  810c9c:	e03ffe15 	stw	zero,-8(fp)
  810ca0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810ca4:	e037883a 	mov	sp,fp
  810ca8:	dfc00117 	ldw	ra,4(sp)
  810cac:	df000017 	ldw	fp,0(sp)
  810cb0:	dec00204 	addi	sp,sp,8
  810cb4:	f800283a 	ret

00810cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810cb8:	defffd04 	addi	sp,sp,-12
  810cbc:	dfc00215 	stw	ra,8(sp)
  810cc0:	df000115 	stw	fp,4(sp)
  810cc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810cc8:	00802074 	movhi	r2,129
  810ccc:	109c5004 	addi	r2,r2,28992
  810cd0:	10800017 	ldw	r2,0(r2)
  810cd4:	1005003a 	cmpeq	r2,r2,zero
  810cd8:	1000061e 	bne	r2,zero,810cf4 <alt_get_errno+0x3c>
  810cdc:	00802074 	movhi	r2,129
  810ce0:	109c5004 	addi	r2,r2,28992
  810ce4:	10800017 	ldw	r2,0(r2)
  810ce8:	103ee83a 	callr	r2
  810cec:	e0bfff15 	stw	r2,-4(fp)
  810cf0:	00000306 	br	810d00 <alt_get_errno+0x48>
  810cf4:	008020b4 	movhi	r2,130
  810cf8:	10a39d04 	addi	r2,r2,-29068
  810cfc:	e0bfff15 	stw	r2,-4(fp)
  810d00:	e0bfff17 	ldw	r2,-4(fp)
}
  810d04:	e037883a 	mov	sp,fp
  810d08:	dfc00117 	ldw	ra,4(sp)
  810d0c:	df000017 	ldw	fp,0(sp)
  810d10:	dec00204 	addi	sp,sp,8
  810d14:	f800283a 	ret

00810d18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810d18:	defffe04 	addi	sp,sp,-8
  810d1c:	dfc00115 	stw	ra,4(sp)
  810d20:	df000015 	stw	fp,0(sp)
  810d24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810d28:	01002074 	movhi	r4,129
  810d2c:	211c5604 	addi	r4,r4,29016
  810d30:	01402074 	movhi	r5,129
  810d34:	29551f04 	addi	r5,r5,21628
  810d38:	01802074 	movhi	r6,129
  810d3c:	319c5604 	addi	r6,r6,29016
  810d40:	0810d980 	call	810d98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810d44:	01002034 	movhi	r4,128
  810d48:	21000804 	addi	r4,r4,32
  810d4c:	01402034 	movhi	r5,128
  810d50:	29400804 	addi	r5,r5,32
  810d54:	01802034 	movhi	r6,128
  810d58:	31806d04 	addi	r6,r6,436
  810d5c:	0810d980 	call	810d98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810d60:	01002074 	movhi	r4,129
  810d64:	21134704 	addi	r4,r4,19740
  810d68:	01402074 	movhi	r5,129
  810d6c:	29534704 	addi	r5,r5,19740
  810d70:	01802074 	movhi	r6,129
  810d74:	31951f04 	addi	r6,r6,21628
  810d78:	0810d980 	call	810d98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810d7c:	0813e200 	call	813e20 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810d80:	08142ac0 	call	8142ac <alt_icache_flush_all>
}
  810d84:	e037883a 	mov	sp,fp
  810d88:	dfc00117 	ldw	ra,4(sp)
  810d8c:	df000017 	ldw	fp,0(sp)
  810d90:	dec00204 	addi	sp,sp,8
  810d94:	f800283a 	ret

00810d98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810d98:	defffc04 	addi	sp,sp,-16
  810d9c:	df000315 	stw	fp,12(sp)
  810da0:	df000304 	addi	fp,sp,12
  810da4:	e13ffd15 	stw	r4,-12(fp)
  810da8:	e17ffe15 	stw	r5,-8(fp)
  810dac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810db0:	e0fffe17 	ldw	r3,-8(fp)
  810db4:	e0bffd17 	ldw	r2,-12(fp)
  810db8:	18800e26 	beq	r3,r2,810df4 <alt_load_section+0x5c>
  {
    while( to != end )
  810dbc:	00000a06 	br	810de8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810dc0:	e0bffd17 	ldw	r2,-12(fp)
  810dc4:	10c00017 	ldw	r3,0(r2)
  810dc8:	e0bffe17 	ldw	r2,-8(fp)
  810dcc:	10c00015 	stw	r3,0(r2)
  810dd0:	e0bffe17 	ldw	r2,-8(fp)
  810dd4:	10800104 	addi	r2,r2,4
  810dd8:	e0bffe15 	stw	r2,-8(fp)
  810ddc:	e0bffd17 	ldw	r2,-12(fp)
  810de0:	10800104 	addi	r2,r2,4
  810de4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810de8:	e0fffe17 	ldw	r3,-8(fp)
  810dec:	e0bfff17 	ldw	r2,-4(fp)
  810df0:	18bff31e 	bne	r3,r2,810dc0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810df4:	e037883a 	mov	sp,fp
  810df8:	df000017 	ldw	fp,0(sp)
  810dfc:	dec00104 	addi	sp,sp,4
  810e00:	f800283a 	ret

00810e04 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810e04:	defff804 	addi	sp,sp,-32
  810e08:	dfc00715 	stw	ra,28(sp)
  810e0c:	df000615 	stw	fp,24(sp)
  810e10:	df000604 	addi	fp,sp,24
  810e14:	e13ffc15 	stw	r4,-16(fp)
  810e18:	e17ffd15 	stw	r5,-12(fp)
  810e1c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810e20:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810e24:	e0bffc17 	ldw	r2,-16(fp)
  810e28:	1004803a 	cmplt	r2,r2,zero
  810e2c:	1000081e 	bne	r2,zero,810e50 <lseek+0x4c>
  810e30:	e0bffc17 	ldw	r2,-16(fp)
  810e34:	10800324 	muli	r2,r2,12
  810e38:	1007883a 	mov	r3,r2
  810e3c:	00802074 	movhi	r2,129
  810e40:	10974f04 	addi	r2,r2,23868
  810e44:	1887883a 	add	r3,r3,r2
  810e48:	e0ffff15 	stw	r3,-4(fp)
  810e4c:	00000106 	br	810e54 <lseek+0x50>
  810e50:	e03fff15 	stw	zero,-4(fp)
  810e54:	e0bfff17 	ldw	r2,-4(fp)
  810e58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810e5c:	e0bffb17 	ldw	r2,-20(fp)
  810e60:	1005003a 	cmpeq	r2,r2,zero
  810e64:	1000111e 	bne	r2,zero,810eac <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810e68:	e0bffb17 	ldw	r2,-20(fp)
  810e6c:	10800017 	ldw	r2,0(r2)
  810e70:	10800717 	ldw	r2,28(r2)
  810e74:	1005003a 	cmpeq	r2,r2,zero
  810e78:	1000091e 	bne	r2,zero,810ea0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810e7c:	e0bffb17 	ldw	r2,-20(fp)
  810e80:	10800017 	ldw	r2,0(r2)
  810e84:	10800717 	ldw	r2,28(r2)
  810e88:	e13ffb17 	ldw	r4,-20(fp)
  810e8c:	e17ffd17 	ldw	r5,-12(fp)
  810e90:	e1bffe17 	ldw	r6,-8(fp)
  810e94:	103ee83a 	callr	r2
  810e98:	e0bffa15 	stw	r2,-24(fp)
  810e9c:	00000506 	br	810eb4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810ea0:	00bfde84 	movi	r2,-134
  810ea4:	e0bffa15 	stw	r2,-24(fp)
  810ea8:	00000206 	br	810eb4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810eac:	00bfebc4 	movi	r2,-81
  810eb0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810eb4:	e0bffa17 	ldw	r2,-24(fp)
  810eb8:	1004403a 	cmpge	r2,r2,zero
  810ebc:	1000071e 	bne	r2,zero,810edc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810ec0:	0810ef40 	call	810ef4 <alt_get_errno>
  810ec4:	1007883a 	mov	r3,r2
  810ec8:	e0bffa17 	ldw	r2,-24(fp)
  810ecc:	0085c83a 	sub	r2,zero,r2
  810ed0:	18800015 	stw	r2,0(r3)
    rc = -1;
  810ed4:	00bfffc4 	movi	r2,-1
  810ed8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810edc:	e0bffa17 	ldw	r2,-24(fp)
}
  810ee0:	e037883a 	mov	sp,fp
  810ee4:	dfc00117 	ldw	ra,4(sp)
  810ee8:	df000017 	ldw	fp,0(sp)
  810eec:	dec00204 	addi	sp,sp,8
  810ef0:	f800283a 	ret

00810ef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810ef4:	defffd04 	addi	sp,sp,-12
  810ef8:	dfc00215 	stw	ra,8(sp)
  810efc:	df000115 	stw	fp,4(sp)
  810f00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810f04:	00802074 	movhi	r2,129
  810f08:	109c5004 	addi	r2,r2,28992
  810f0c:	10800017 	ldw	r2,0(r2)
  810f10:	1005003a 	cmpeq	r2,r2,zero
  810f14:	1000061e 	bne	r2,zero,810f30 <alt_get_errno+0x3c>
  810f18:	00802074 	movhi	r2,129
  810f1c:	109c5004 	addi	r2,r2,28992
  810f20:	10800017 	ldw	r2,0(r2)
  810f24:	103ee83a 	callr	r2
  810f28:	e0bfff15 	stw	r2,-4(fp)
  810f2c:	00000306 	br	810f3c <alt_get_errno+0x48>
  810f30:	008020b4 	movhi	r2,130
  810f34:	10a39d04 	addi	r2,r2,-29068
  810f38:	e0bfff15 	stw	r2,-4(fp)
  810f3c:	e0bfff17 	ldw	r2,-4(fp)
}
  810f40:	e037883a 	mov	sp,fp
  810f44:	dfc00117 	ldw	ra,4(sp)
  810f48:	df000017 	ldw	fp,0(sp)
  810f4c:	dec00204 	addi	sp,sp,8
  810f50:	f800283a 	ret

00810f54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810f54:	defffd04 	addi	sp,sp,-12
  810f58:	dfc00215 	stw	ra,8(sp)
  810f5c:	df000115 	stw	fp,4(sp)
  810f60:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810f64:	0009883a 	mov	r4,zero
  810f68:	08118840 	call	811884 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810f6c:	08118b80 	call	8118b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810f70:	01002074 	movhi	r4,129
  810f74:	21151104 	addi	r4,r4,21572
  810f78:	01402074 	movhi	r5,129
  810f7c:	29551104 	addi	r5,r5,21572
  810f80:	01802074 	movhi	r6,129
  810f84:	31951104 	addi	r6,r6,21572
  810f88:	081466c0 	call	81466c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810f8c:	0813f780 	call	813f78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810f90:	01002074 	movhi	r4,129
  810f94:	210ff704 	addi	r4,r4,16348
  810f98:	08149100 	call	814910 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810f9c:	d1276517 	ldw	r4,-25196(gp)
  810fa0:	d1676617 	ldw	r5,-25192(gp)
  810fa4:	d1a76717 	ldw	r6,-25188(gp)
  810fa8:	0800e340 	call	800e34 <main>
  810fac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810fb0:	01000044 	movi	r4,1
  810fb4:	081077c0 	call	81077c <close>
  exit (result);
  810fb8:	e13fff17 	ldw	r4,-4(fp)
  810fbc:	08149240 	call	814924 <exit>

00810fc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810fc0:	defffe04 	addi	sp,sp,-8
  810fc4:	df000115 	stw	fp,4(sp)
  810fc8:	df000104 	addi	fp,sp,4
  810fcc:	e13fff15 	stw	r4,-4(fp)
}
  810fd0:	e037883a 	mov	sp,fp
  810fd4:	df000017 	ldw	fp,0(sp)
  810fd8:	dec00104 	addi	sp,sp,4
  810fdc:	f800283a 	ret

00810fe0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810fe0:	defffe04 	addi	sp,sp,-8
  810fe4:	df000115 	stw	fp,4(sp)
  810fe8:	df000104 	addi	fp,sp,4
  810fec:	e13fff15 	stw	r4,-4(fp)
}
  810ff0:	e037883a 	mov	sp,fp
  810ff4:	df000017 	ldw	fp,0(sp)
  810ff8:	dec00104 	addi	sp,sp,4
  810ffc:	f800283a 	ret

00811000 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811000:	defffc04 	addi	sp,sp,-16
  811004:	df000315 	stw	fp,12(sp)
  811008:	df000304 	addi	fp,sp,12
  81100c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811010:	e0bffe17 	ldw	r2,-8(fp)
  811014:	10800217 	ldw	r2,8(r2)
  811018:	10d00034 	orhi	r3,r2,16384
  81101c:	e0bffe17 	ldw	r2,-8(fp)
  811020:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811024:	e03ffd15 	stw	zero,-12(fp)
  811028:	00002006 	br	8110ac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81102c:	e0bffd17 	ldw	r2,-12(fp)
  811030:	00c02074 	movhi	r3,129
  811034:	18d74f04 	addi	r3,r3,23868
  811038:	10800324 	muli	r2,r2,12
  81103c:	10c5883a 	add	r2,r2,r3
  811040:	10c00017 	ldw	r3,0(r2)
  811044:	e0bffe17 	ldw	r2,-8(fp)
  811048:	10800017 	ldw	r2,0(r2)
  81104c:	1880141e 	bne	r3,r2,8110a0 <alt_file_locked+0xa0>
  811050:	e0bffd17 	ldw	r2,-12(fp)
  811054:	00c02074 	movhi	r3,129
  811058:	18d74f04 	addi	r3,r3,23868
  81105c:	10800324 	muli	r2,r2,12
  811060:	10c5883a 	add	r2,r2,r3
  811064:	10800204 	addi	r2,r2,8
  811068:	10800017 	ldw	r2,0(r2)
  81106c:	1004403a 	cmpge	r2,r2,zero
  811070:	10000b1e 	bne	r2,zero,8110a0 <alt_file_locked+0xa0>
  811074:	e0bffd17 	ldw	r2,-12(fp)
  811078:	10800324 	muli	r2,r2,12
  81107c:	1007883a 	mov	r3,r2
  811080:	00802074 	movhi	r2,129
  811084:	10974f04 	addi	r2,r2,23868
  811088:	1887883a 	add	r3,r3,r2
  81108c:	e0bffe17 	ldw	r2,-8(fp)
  811090:	18800326 	beq	r3,r2,8110a0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811094:	00bffcc4 	movi	r2,-13
  811098:	e0bfff15 	stw	r2,-4(fp)
  81109c:	00000a06 	br	8110c8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8110a0:	e0bffd17 	ldw	r2,-12(fp)
  8110a4:	10800044 	addi	r2,r2,1
  8110a8:	e0bffd15 	stw	r2,-12(fp)
  8110ac:	00802074 	movhi	r2,129
  8110b0:	109c4f04 	addi	r2,r2,28988
  8110b4:	10800017 	ldw	r2,0(r2)
  8110b8:	1007883a 	mov	r3,r2
  8110bc:	e0bffd17 	ldw	r2,-12(fp)
  8110c0:	18bfda2e 	bgeu	r3,r2,81102c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8110c4:	e03fff15 	stw	zero,-4(fp)
  8110c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8110cc:	e037883a 	mov	sp,fp
  8110d0:	df000017 	ldw	fp,0(sp)
  8110d4:	dec00104 	addi	sp,sp,4
  8110d8:	f800283a 	ret

008110dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8110dc:	defff404 	addi	sp,sp,-48
  8110e0:	dfc00b15 	stw	ra,44(sp)
  8110e4:	df000a15 	stw	fp,40(sp)
  8110e8:	df000a04 	addi	fp,sp,40
  8110ec:	e13ffb15 	stw	r4,-20(fp)
  8110f0:	e17ffc15 	stw	r5,-16(fp)
  8110f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8110f8:	00bfffc4 	movi	r2,-1
  8110fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  811100:	00bffb44 	movi	r2,-19
  811104:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  811108:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81110c:	e13ffb17 	ldw	r4,-20(fp)
  811110:	01402074 	movhi	r5,129
  811114:	295c4d04 	addi	r5,r5,28980
  811118:	08140400 	call	814040 <alt_find_dev>
  81111c:	e0bffa15 	stw	r2,-24(fp)
  811120:	e0bffa17 	ldw	r2,-24(fp)
  811124:	1004c03a 	cmpne	r2,r2,zero
  811128:	1000051e 	bne	r2,zero,811140 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81112c:	e13ffb17 	ldw	r4,-20(fp)
  811130:	08140d40 	call	8140d4 <alt_find_file>
  811134:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811138:	00800044 	movi	r2,1
  81113c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811140:	e0bffa17 	ldw	r2,-24(fp)
  811144:	1005003a 	cmpeq	r2,r2,zero
  811148:	1000301e 	bne	r2,zero,81120c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81114c:	e13ffa17 	ldw	r4,-24(fp)
  811150:	08141f40 	call	8141f4 <alt_get_fd>
  811154:	e0bff815 	stw	r2,-32(fp)
  811158:	e0bff817 	ldw	r2,-32(fp)
  81115c:	1004403a 	cmpge	r2,r2,zero
  811160:	1000031e 	bne	r2,zero,811170 <open+0x94>
    {
      status = index;
  811164:	e0bff817 	ldw	r2,-32(fp)
  811168:	e0bff715 	stw	r2,-36(fp)
  81116c:	00002906 	br	811214 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  811170:	e0bff817 	ldw	r2,-32(fp)
  811174:	10800324 	muli	r2,r2,12
  811178:	1007883a 	mov	r3,r2
  81117c:	00802074 	movhi	r2,129
  811180:	10974f04 	addi	r2,r2,23868
  811184:	1885883a 	add	r2,r3,r2
  811188:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81118c:	e0fffc17 	ldw	r3,-16(fp)
  811190:	00900034 	movhi	r2,16384
  811194:	10bfffc4 	addi	r2,r2,-1
  811198:	1886703a 	and	r3,r3,r2
  81119c:	e0bff917 	ldw	r2,-28(fp)
  8111a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8111a4:	e0bff617 	ldw	r2,-40(fp)
  8111a8:	1004c03a 	cmpne	r2,r2,zero
  8111ac:	1000061e 	bne	r2,zero,8111c8 <open+0xec>
  8111b0:	e13ff917 	ldw	r4,-28(fp)
  8111b4:	08110000 	call	811000 <alt_file_locked>
  8111b8:	e0bff715 	stw	r2,-36(fp)
  8111bc:	e0bff717 	ldw	r2,-36(fp)
  8111c0:	1004803a 	cmplt	r2,r2,zero
  8111c4:	1000131e 	bne	r2,zero,811214 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8111c8:	e0bffa17 	ldw	r2,-24(fp)
  8111cc:	10800317 	ldw	r2,12(r2)
  8111d0:	1005003a 	cmpeq	r2,r2,zero
  8111d4:	1000091e 	bne	r2,zero,8111fc <open+0x120>
  8111d8:	e0bffa17 	ldw	r2,-24(fp)
  8111dc:	10800317 	ldw	r2,12(r2)
  8111e0:	e13ff917 	ldw	r4,-28(fp)
  8111e4:	e17ffb17 	ldw	r5,-20(fp)
  8111e8:	e1bffc17 	ldw	r6,-16(fp)
  8111ec:	e1fffd17 	ldw	r7,-12(fp)
  8111f0:	103ee83a 	callr	r2
  8111f4:	e0bfff15 	stw	r2,-4(fp)
  8111f8:	00000106 	br	811200 <open+0x124>
  8111fc:	e03fff15 	stw	zero,-4(fp)
  811200:	e0bfff17 	ldw	r2,-4(fp)
  811204:	e0bff715 	stw	r2,-36(fp)
  811208:	00000206 	br	811214 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81120c:	00bffb44 	movi	r2,-19
  811210:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811214:	e0bff717 	ldw	r2,-36(fp)
  811218:	1004403a 	cmpge	r2,r2,zero
  81121c:	1000091e 	bne	r2,zero,811244 <open+0x168>
  {
    alt_release_fd (index);  
  811220:	e13ff817 	ldw	r4,-32(fp)
  811224:	08114440 	call	811444 <alt_release_fd>
    ALT_ERRNO = -status;
  811228:	08112640 	call	811264 <alt_get_errno>
  81122c:	e0fff717 	ldw	r3,-36(fp)
  811230:	00c7c83a 	sub	r3,zero,r3
  811234:	10c00015 	stw	r3,0(r2)
    return -1;
  811238:	00bfffc4 	movi	r2,-1
  81123c:	e0bffe15 	stw	r2,-8(fp)
  811240:	00000206 	br	81124c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  811244:	e0bff817 	ldw	r2,-32(fp)
  811248:	e0bffe15 	stw	r2,-8(fp)
  81124c:	e0bffe17 	ldw	r2,-8(fp)
}
  811250:	e037883a 	mov	sp,fp
  811254:	dfc00117 	ldw	ra,4(sp)
  811258:	df000017 	ldw	fp,0(sp)
  81125c:	dec00204 	addi	sp,sp,8
  811260:	f800283a 	ret

00811264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811264:	defffd04 	addi	sp,sp,-12
  811268:	dfc00215 	stw	ra,8(sp)
  81126c:	df000115 	stw	fp,4(sp)
  811270:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811274:	00802074 	movhi	r2,129
  811278:	109c5004 	addi	r2,r2,28992
  81127c:	10800017 	ldw	r2,0(r2)
  811280:	1005003a 	cmpeq	r2,r2,zero
  811284:	1000061e 	bne	r2,zero,8112a0 <alt_get_errno+0x3c>
  811288:	00802074 	movhi	r2,129
  81128c:	109c5004 	addi	r2,r2,28992
  811290:	10800017 	ldw	r2,0(r2)
  811294:	103ee83a 	callr	r2
  811298:	e0bfff15 	stw	r2,-4(fp)
  81129c:	00000306 	br	8112ac <alt_get_errno+0x48>
  8112a0:	008020b4 	movhi	r2,130
  8112a4:	10a39d04 	addi	r2,r2,-29068
  8112a8:	e0bfff15 	stw	r2,-4(fp)
  8112ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8112b0:	e037883a 	mov	sp,fp
  8112b4:	dfc00117 	ldw	ra,4(sp)
  8112b8:	df000017 	ldw	fp,0(sp)
  8112bc:	dec00204 	addi	sp,sp,8
  8112c0:	f800283a 	ret

008112c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8112c4:	defff704 	addi	sp,sp,-36
  8112c8:	dfc00815 	stw	ra,32(sp)
  8112cc:	df000715 	stw	fp,28(sp)
  8112d0:	df000704 	addi	fp,sp,28
  8112d4:	e13ffb15 	stw	r4,-20(fp)
  8112d8:	e17ffc15 	stw	r5,-16(fp)
  8112dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8112e0:	e0bffb17 	ldw	r2,-20(fp)
  8112e4:	1004803a 	cmplt	r2,r2,zero
  8112e8:	1000081e 	bne	r2,zero,81130c <read+0x48>
  8112ec:	e0bffb17 	ldw	r2,-20(fp)
  8112f0:	10800324 	muli	r2,r2,12
  8112f4:	1007883a 	mov	r3,r2
  8112f8:	00802074 	movhi	r2,129
  8112fc:	10974f04 	addi	r2,r2,23868
  811300:	1887883a 	add	r3,r3,r2
  811304:	e0ffff15 	stw	r3,-4(fp)
  811308:	00000106 	br	811310 <read+0x4c>
  81130c:	e03fff15 	stw	zero,-4(fp)
  811310:	e0bfff17 	ldw	r2,-4(fp)
  811314:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811318:	e0bffa17 	ldw	r2,-24(fp)
  81131c:	1005003a 	cmpeq	r2,r2,zero
  811320:	1000241e 	bne	r2,zero,8113b4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811324:	e0bffa17 	ldw	r2,-24(fp)
  811328:	10800217 	ldw	r2,8(r2)
  81132c:	108000cc 	andi	r2,r2,3
  811330:	10800060 	cmpeqi	r2,r2,1
  811334:	10001a1e 	bne	r2,zero,8113a0 <read+0xdc>
  811338:	e0bffa17 	ldw	r2,-24(fp)
  81133c:	10800017 	ldw	r2,0(r2)
  811340:	10800517 	ldw	r2,20(r2)
  811344:	1005003a 	cmpeq	r2,r2,zero
  811348:	1000151e 	bne	r2,zero,8113a0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81134c:	e0bffa17 	ldw	r2,-24(fp)
  811350:	10800017 	ldw	r2,0(r2)
  811354:	10800517 	ldw	r2,20(r2)
  811358:	e17ffc17 	ldw	r5,-16(fp)
  81135c:	e1bffd17 	ldw	r6,-12(fp)
  811360:	e13ffa17 	ldw	r4,-24(fp)
  811364:	103ee83a 	callr	r2
  811368:	e0bff915 	stw	r2,-28(fp)
  81136c:	e0bff917 	ldw	r2,-28(fp)
  811370:	1004403a 	cmpge	r2,r2,zero
  811374:	1000071e 	bne	r2,zero,811394 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  811378:	08113e40 	call	8113e4 <alt_get_errno>
  81137c:	e0fff917 	ldw	r3,-28(fp)
  811380:	00c7c83a 	sub	r3,zero,r3
  811384:	10c00015 	stw	r3,0(r2)
          return -1;
  811388:	00bfffc4 	movi	r2,-1
  81138c:	e0bffe15 	stw	r2,-8(fp)
  811390:	00000e06 	br	8113cc <read+0x108>
        }
        return rval;
  811394:	e0bff917 	ldw	r2,-28(fp)
  811398:	e0bffe15 	stw	r2,-8(fp)
  81139c:	00000b06 	br	8113cc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8113a0:	08113e40 	call	8113e4 <alt_get_errno>
  8113a4:	1007883a 	mov	r3,r2
  8113a8:	00800344 	movi	r2,13
  8113ac:	18800015 	stw	r2,0(r3)
  8113b0:	00000406 	br	8113c4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8113b4:	08113e40 	call	8113e4 <alt_get_errno>
  8113b8:	1007883a 	mov	r3,r2
  8113bc:	00801444 	movi	r2,81
  8113c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8113c4:	00bfffc4 	movi	r2,-1
  8113c8:	e0bffe15 	stw	r2,-8(fp)
  8113cc:	e0bffe17 	ldw	r2,-8(fp)
}
  8113d0:	e037883a 	mov	sp,fp
  8113d4:	dfc00117 	ldw	ra,4(sp)
  8113d8:	df000017 	ldw	fp,0(sp)
  8113dc:	dec00204 	addi	sp,sp,8
  8113e0:	f800283a 	ret

008113e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8113e4:	defffd04 	addi	sp,sp,-12
  8113e8:	dfc00215 	stw	ra,8(sp)
  8113ec:	df000115 	stw	fp,4(sp)
  8113f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8113f4:	00802074 	movhi	r2,129
  8113f8:	109c5004 	addi	r2,r2,28992
  8113fc:	10800017 	ldw	r2,0(r2)
  811400:	1005003a 	cmpeq	r2,r2,zero
  811404:	1000061e 	bne	r2,zero,811420 <alt_get_errno+0x3c>
  811408:	00802074 	movhi	r2,129
  81140c:	109c5004 	addi	r2,r2,28992
  811410:	10800017 	ldw	r2,0(r2)
  811414:	103ee83a 	callr	r2
  811418:	e0bfff15 	stw	r2,-4(fp)
  81141c:	00000306 	br	81142c <alt_get_errno+0x48>
  811420:	008020b4 	movhi	r2,130
  811424:	10a39d04 	addi	r2,r2,-29068
  811428:	e0bfff15 	stw	r2,-4(fp)
  81142c:	e0bfff17 	ldw	r2,-4(fp)
}
  811430:	e037883a 	mov	sp,fp
  811434:	dfc00117 	ldw	ra,4(sp)
  811438:	df000017 	ldw	fp,0(sp)
  81143c:	dec00204 	addi	sp,sp,8
  811440:	f800283a 	ret

00811444 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811444:	defffe04 	addi	sp,sp,-8
  811448:	df000115 	stw	fp,4(sp)
  81144c:	df000104 	addi	fp,sp,4
  811450:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811454:	e0bfff17 	ldw	r2,-4(fp)
  811458:	108000d0 	cmplti	r2,r2,3
  81145c:	10000d1e 	bne	r2,zero,811494 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  811460:	e0bfff17 	ldw	r2,-4(fp)
  811464:	00c02074 	movhi	r3,129
  811468:	18d74f04 	addi	r3,r3,23868
  81146c:	10800324 	muli	r2,r2,12
  811470:	10c5883a 	add	r2,r2,r3
  811474:	10800204 	addi	r2,r2,8
  811478:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81147c:	e0bfff17 	ldw	r2,-4(fp)
  811480:	00c02074 	movhi	r3,129
  811484:	18d74f04 	addi	r3,r3,23868
  811488:	10800324 	muli	r2,r2,12
  81148c:	10c5883a 	add	r2,r2,r3
  811490:	10000015 	stw	zero,0(r2)
  }
}
  811494:	e037883a 	mov	sp,fp
  811498:	df000017 	ldw	fp,0(sp)
  81149c:	dec00104 	addi	sp,sp,4
  8114a0:	f800283a 	ret

008114a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8114a4:	defff804 	addi	sp,sp,-32
  8114a8:	df000715 	stw	fp,28(sp)
  8114ac:	df000704 	addi	fp,sp,28
  8114b0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114b4:	0005303a 	rdctl	r2,status
  8114b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114bc:	e0fffb17 	ldw	r3,-20(fp)
  8114c0:	00bfff84 	movi	r2,-2
  8114c4:	1884703a 	and	r2,r3,r2
  8114c8:	1001703a 	wrctl	status,r2
  
  return context;
  8114cc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8114d0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8114d4:	d0a01217 	ldw	r2,-32696(gp)
  8114d8:	10c000c4 	addi	r3,r2,3
  8114dc:	00bfff04 	movi	r2,-4
  8114e0:	1884703a 	and	r2,r3,r2
  8114e4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8114e8:	d0e01217 	ldw	r3,-32696(gp)
  8114ec:	e0bffe17 	ldw	r2,-8(fp)
  8114f0:	1887883a 	add	r3,r3,r2
  8114f4:	00804034 	movhi	r2,256
  8114f8:	10800004 	addi	r2,r2,0
  8114fc:	10c0072e 	bgeu	r2,r3,81151c <sbrk+0x78>
  811500:	e0bffd17 	ldw	r2,-12(fp)
  811504:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811508:	e0bffa17 	ldw	r2,-24(fp)
  81150c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811510:	00bfffc4 	movi	r2,-1
  811514:	e0bfff15 	stw	r2,-4(fp)
  811518:	00000c06 	br	81154c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  81151c:	d0a01217 	ldw	r2,-32696(gp)
  811520:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811524:	d0e01217 	ldw	r3,-32696(gp)
  811528:	e0bffe17 	ldw	r2,-8(fp)
  81152c:	1885883a 	add	r2,r3,r2
  811530:	d0a01215 	stw	r2,-32696(gp)
  811534:	e0bffd17 	ldw	r2,-12(fp)
  811538:	e0bff915 	stw	r2,-28(fp)
  81153c:	e0bff917 	ldw	r2,-28(fp)
  811540:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811544:	e0bffc17 	ldw	r2,-16(fp)
  811548:	e0bfff15 	stw	r2,-4(fp)
  81154c:	e0bfff17 	ldw	r2,-4(fp)
} 
  811550:	e037883a 	mov	sp,fp
  811554:	df000017 	ldw	fp,0(sp)
  811558:	dec00104 	addi	sp,sp,4
  81155c:	f800283a 	ret

00811560 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811560:	defffa04 	addi	sp,sp,-24
  811564:	df000515 	stw	fp,20(sp)
  811568:	df000504 	addi	fp,sp,20
  81156c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811570:	0005303a 	rdctl	r2,status
  811574:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811578:	e0fffd17 	ldw	r3,-12(fp)
  81157c:	00bfff84 	movi	r2,-2
  811580:	1884703a 	and	r2,r3,r2
  811584:	1001703a 	wrctl	status,r2
  
  return context;
  811588:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81158c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  811590:	e0bfff17 	ldw	r2,-4(fp)
  811594:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811598:	e0bffc17 	ldw	r2,-16(fp)
  81159c:	10c00017 	ldw	r3,0(r2)
  8115a0:	e0bffc17 	ldw	r2,-16(fp)
  8115a4:	10800117 	ldw	r2,4(r2)
  8115a8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8115ac:	e0bffc17 	ldw	r2,-16(fp)
  8115b0:	10c00117 	ldw	r3,4(r2)
  8115b4:	e0bffc17 	ldw	r2,-16(fp)
  8115b8:	10800017 	ldw	r2,0(r2)
  8115bc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8115c0:	e0fffc17 	ldw	r3,-16(fp)
  8115c4:	e0bffc17 	ldw	r2,-16(fp)
  8115c8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8115cc:	e0fffc17 	ldw	r3,-16(fp)
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	18800015 	stw	r2,0(r3)
  8115d8:	e0bffe17 	ldw	r2,-8(fp)
  8115dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115e0:	e0bffb17 	ldw	r2,-20(fp)
  8115e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8115e8:	e037883a 	mov	sp,fp
  8115ec:	df000017 	ldw	fp,0(sp)
  8115f0:	dec00104 	addi	sp,sp,4
  8115f4:	f800283a 	ret

008115f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8115f8:	defffb04 	addi	sp,sp,-20
  8115fc:	dfc00415 	stw	ra,16(sp)
  811600:	df000315 	stw	fp,12(sp)
  811604:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811608:	d0a01317 	ldw	r2,-32692(gp)
  81160c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811610:	d0a76917 	ldw	r2,-25180(gp)
  811614:	10800044 	addi	r2,r2,1
  811618:	d0a76915 	stw	r2,-25180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81161c:	00003106 	br	8116e4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  811620:	e0bffe17 	ldw	r2,-8(fp)
  811624:	10800017 	ldw	r2,0(r2)
  811628:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81162c:	e0bffe17 	ldw	r2,-8(fp)
  811630:	10800403 	ldbu	r2,16(r2)
  811634:	10803fcc 	andi	r2,r2,255
  811638:	1005003a 	cmpeq	r2,r2,zero
  81163c:	1000051e 	bne	r2,zero,811654 <alt_tick+0x5c>
  811640:	d0a76917 	ldw	r2,-25180(gp)
  811644:	1004c03a 	cmpne	r2,r2,zero
  811648:	1000021e 	bne	r2,zero,811654 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81164c:	e0bffe17 	ldw	r2,-8(fp)
  811650:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811654:	e0bffe17 	ldw	r2,-8(fp)
  811658:	10c00217 	ldw	r3,8(r2)
  81165c:	d0a76917 	ldw	r2,-25180(gp)
  811660:	10c01e36 	bltu	r2,r3,8116dc <alt_tick+0xe4>
  811664:	e0bffe17 	ldw	r2,-8(fp)
  811668:	10800403 	ldbu	r2,16(r2)
  81166c:	10803fcc 	andi	r2,r2,255
  811670:	1004c03a 	cmpne	r2,r2,zero
  811674:	1000191e 	bne	r2,zero,8116dc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811678:	e0bffe17 	ldw	r2,-8(fp)
  81167c:	10c00317 	ldw	r3,12(r2)
  811680:	e0bffe17 	ldw	r2,-8(fp)
  811684:	11000517 	ldw	r4,20(r2)
  811688:	183ee83a 	callr	r3
  81168c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811690:	e0bffd17 	ldw	r2,-12(fp)
  811694:	1004c03a 	cmpne	r2,r2,zero
  811698:	1000031e 	bne	r2,zero,8116a8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81169c:	e13ffe17 	ldw	r4,-8(fp)
  8116a0:	08115600 	call	811560 <alt_alarm_stop>
  8116a4:	00000d06 	br	8116dc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8116a8:	e0bffe17 	ldw	r2,-8(fp)
  8116ac:	10c00217 	ldw	r3,8(r2)
  8116b0:	e0bffd17 	ldw	r2,-12(fp)
  8116b4:	1887883a 	add	r3,r3,r2
  8116b8:	e0bffe17 	ldw	r2,-8(fp)
  8116bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8116c0:	e0bffe17 	ldw	r2,-8(fp)
  8116c4:	10c00217 	ldw	r3,8(r2)
  8116c8:	d0a76917 	ldw	r2,-25180(gp)
  8116cc:	1880032e 	bgeu	r3,r2,8116dc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8116d0:	e0fffe17 	ldw	r3,-8(fp)
  8116d4:	00800044 	movi	r2,1
  8116d8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8116dc:	e0bfff17 	ldw	r2,-4(fp)
  8116e0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8116e4:	d0e01304 	addi	r3,gp,-32692
  8116e8:	e0bffe17 	ldw	r2,-8(fp)
  8116ec:	10ffcc1e 	bne	r2,r3,811620 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8116f0:	e037883a 	mov	sp,fp
  8116f4:	dfc00117 	ldw	ra,4(sp)
  8116f8:	df000017 	ldw	fp,0(sp)
  8116fc:	dec00204 	addi	sp,sp,8
  811700:	f800283a 	ret

00811704 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811704:	defff704 	addi	sp,sp,-36
  811708:	dfc00815 	stw	ra,32(sp)
  81170c:	df000715 	stw	fp,28(sp)
  811710:	df000704 	addi	fp,sp,28
  811714:	e13ffb15 	stw	r4,-20(fp)
  811718:	e17ffc15 	stw	r5,-16(fp)
  81171c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811720:	e0bffb17 	ldw	r2,-20(fp)
  811724:	1004803a 	cmplt	r2,r2,zero
  811728:	1000081e 	bne	r2,zero,81174c <write+0x48>
  81172c:	e0bffb17 	ldw	r2,-20(fp)
  811730:	10800324 	muli	r2,r2,12
  811734:	1007883a 	mov	r3,r2
  811738:	00802074 	movhi	r2,129
  81173c:	10974f04 	addi	r2,r2,23868
  811740:	1887883a 	add	r3,r3,r2
  811744:	e0ffff15 	stw	r3,-4(fp)
  811748:	00000106 	br	811750 <write+0x4c>
  81174c:	e03fff15 	stw	zero,-4(fp)
  811750:	e0bfff17 	ldw	r2,-4(fp)
  811754:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811758:	e0bffa17 	ldw	r2,-24(fp)
  81175c:	1005003a 	cmpeq	r2,r2,zero
  811760:	1000241e 	bne	r2,zero,8117f4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811764:	e0bffa17 	ldw	r2,-24(fp)
  811768:	10800217 	ldw	r2,8(r2)
  81176c:	108000cc 	andi	r2,r2,3
  811770:	1005003a 	cmpeq	r2,r2,zero
  811774:	10001a1e 	bne	r2,zero,8117e0 <write+0xdc>
  811778:	e0bffa17 	ldw	r2,-24(fp)
  81177c:	10800017 	ldw	r2,0(r2)
  811780:	10800617 	ldw	r2,24(r2)
  811784:	1005003a 	cmpeq	r2,r2,zero
  811788:	1000151e 	bne	r2,zero,8117e0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81178c:	e0bffa17 	ldw	r2,-24(fp)
  811790:	10800017 	ldw	r2,0(r2)
  811794:	10800617 	ldw	r2,24(r2)
  811798:	e17ffc17 	ldw	r5,-16(fp)
  81179c:	e1bffd17 	ldw	r6,-12(fp)
  8117a0:	e13ffa17 	ldw	r4,-24(fp)
  8117a4:	103ee83a 	callr	r2
  8117a8:	e0bff915 	stw	r2,-28(fp)
  8117ac:	e0bff917 	ldw	r2,-28(fp)
  8117b0:	1004403a 	cmpge	r2,r2,zero
  8117b4:	1000071e 	bne	r2,zero,8117d4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8117b8:	08118240 	call	811824 <alt_get_errno>
  8117bc:	e0fff917 	ldw	r3,-28(fp)
  8117c0:	00c7c83a 	sub	r3,zero,r3
  8117c4:	10c00015 	stw	r3,0(r2)
        return -1;
  8117c8:	00bfffc4 	movi	r2,-1
  8117cc:	e0bffe15 	stw	r2,-8(fp)
  8117d0:	00000e06 	br	81180c <write+0x108>
      }
      return rval;
  8117d4:	e0bff917 	ldw	r2,-28(fp)
  8117d8:	e0bffe15 	stw	r2,-8(fp)
  8117dc:	00000b06 	br	81180c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8117e0:	08118240 	call	811824 <alt_get_errno>
  8117e4:	1007883a 	mov	r3,r2
  8117e8:	00800344 	movi	r2,13
  8117ec:	18800015 	stw	r2,0(r3)
  8117f0:	00000406 	br	811804 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8117f4:	08118240 	call	811824 <alt_get_errno>
  8117f8:	1007883a 	mov	r3,r2
  8117fc:	00801444 	movi	r2,81
  811800:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811804:	00bfffc4 	movi	r2,-1
  811808:	e0bffe15 	stw	r2,-8(fp)
  81180c:	e0bffe17 	ldw	r2,-8(fp)
}
  811810:	e037883a 	mov	sp,fp
  811814:	dfc00117 	ldw	ra,4(sp)
  811818:	df000017 	ldw	fp,0(sp)
  81181c:	dec00204 	addi	sp,sp,8
  811820:	f800283a 	ret

00811824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811824:	defffd04 	addi	sp,sp,-12
  811828:	dfc00215 	stw	ra,8(sp)
  81182c:	df000115 	stw	fp,4(sp)
  811830:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811834:	00802074 	movhi	r2,129
  811838:	109c5004 	addi	r2,r2,28992
  81183c:	10800017 	ldw	r2,0(r2)
  811840:	1005003a 	cmpeq	r2,r2,zero
  811844:	1000061e 	bne	r2,zero,811860 <alt_get_errno+0x3c>
  811848:	00802074 	movhi	r2,129
  81184c:	109c5004 	addi	r2,r2,28992
  811850:	10800017 	ldw	r2,0(r2)
  811854:	103ee83a 	callr	r2
  811858:	e0bfff15 	stw	r2,-4(fp)
  81185c:	00000306 	br	81186c <alt_get_errno+0x48>
  811860:	008020b4 	movhi	r2,130
  811864:	10a39d04 	addi	r2,r2,-29068
  811868:	e0bfff15 	stw	r2,-4(fp)
  81186c:	e0bfff17 	ldw	r2,-4(fp)
}
  811870:	e037883a 	mov	sp,fp
  811874:	dfc00117 	ldw	ra,4(sp)
  811878:	df000017 	ldw	fp,0(sp)
  81187c:	dec00204 	addi	sp,sp,8
  811880:	f800283a 	ret

00811884 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811884:	defffd04 	addi	sp,sp,-12
  811888:	dfc00215 	stw	ra,8(sp)
  81188c:	df000115 	stw	fp,4(sp)
  811890:	df000104 	addi	fp,sp,4
  811894:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  811898:	08147140 	call	814714 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81189c:	00800044 	movi	r2,1
  8118a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8118a4:	e037883a 	mov	sp,fp
  8118a8:	dfc00117 	ldw	ra,4(sp)
  8118ac:	df000017 	ldw	fp,0(sp)
  8118b0:	dec00204 	addi	sp,sp,8
  8118b4:	f800283a 	ret

008118b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8118b8:	defffe04 	addi	sp,sp,-8
  8118bc:	dfc00115 	stw	ra,4(sp)
  8118c0:	df000015 	stw	fp,0(sp)
  8118c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8118c8:	01004074 	movhi	r4,257
  8118cc:	21040804 	addi	r4,r4,4128
  8118d0:	000b883a 	mov	r5,zero
  8118d4:	01800084 	movi	r6,2
  8118d8:	01c0fa04 	movi	r7,1000
  8118dc:	08133e00 	call	8133e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8118e0:	01002074 	movhi	r4,129
  8118e4:	2117b904 	addi	r4,r4,24292
  8118e8:	000b883a 	mov	r5,zero
  8118ec:	01800044 	movi	r6,1
  8118f0:	0811acc0 	call	811acc <altera_avalon_jtag_uart_init>
  8118f4:	01002074 	movhi	r4,129
  8118f8:	2117af04 	addi	r4,r4,24252
  8118fc:	081194c0 	call	81194c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811900:	01002074 	movhi	r4,129
  811904:	211bd104 	addi	r4,r4,28484
  811908:	08131dc0 	call	8131dc <altera_avalon_lcd_16207_init>
  81190c:	01002074 	movhi	r4,129
  811910:	211bc704 	addi	r4,r4,28444
  811914:	081194c0 	call	81194c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811918:	01002074 	movhi	r4,129
  81191c:	211c1904 	addi	r4,r4,28772
  811920:	000b883a 	mov	r5,zero
  811924:	000d883a 	mov	r6,zero
  811928:	08135680 	call	813568 <altera_avalon_uart_init>
  81192c:	01002074 	movhi	r4,129
  811930:	211c0f04 	addi	r4,r4,28732
  811934:	081194c0 	call	81194c <alt_dev_reg>
}
  811938:	e037883a 	mov	sp,fp
  81193c:	dfc00117 	ldw	ra,4(sp)
  811940:	df000017 	ldw	fp,0(sp)
  811944:	dec00204 	addi	sp,sp,8
  811948:	f800283a 	ret

0081194c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81194c:	defffd04 	addi	sp,sp,-12
  811950:	dfc00215 	stw	ra,8(sp)
  811954:	df000115 	stw	fp,4(sp)
  811958:	df000104 	addi	fp,sp,4
  81195c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811960:	e13fff17 	ldw	r4,-4(fp)
  811964:	01402074 	movhi	r5,129
  811968:	295c4d04 	addi	r5,r5,28980
  81196c:	0813e640 	call	813e64 <alt_dev_llist_insert>
}
  811970:	e037883a 	mov	sp,fp
  811974:	dfc00117 	ldw	ra,4(sp)
  811978:	df000017 	ldw	fp,0(sp)
  81197c:	dec00204 	addi	sp,sp,8
  811980:	f800283a 	ret

00811984 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811984:	defffa04 	addi	sp,sp,-24
  811988:	dfc00515 	stw	ra,20(sp)
  81198c:	df000415 	stw	fp,16(sp)
  811990:	df000404 	addi	fp,sp,16
  811994:	e13ffd15 	stw	r4,-12(fp)
  811998:	e17ffe15 	stw	r5,-8(fp)
  81199c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8119a0:	e0bffd17 	ldw	r2,-12(fp)
  8119a4:	10800017 	ldw	r2,0(r2)
  8119a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8119ac:	e0bffc17 	ldw	r2,-16(fp)
  8119b0:	11000a04 	addi	r4,r2,40
  8119b4:	e0bffd17 	ldw	r2,-12(fp)
  8119b8:	11c00217 	ldw	r7,8(r2)
  8119bc:	e17ffe17 	ldw	r5,-8(fp)
  8119c0:	e1bfff17 	ldw	r6,-4(fp)
  8119c4:	0811fcc0 	call	811fcc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8119c8:	e037883a 	mov	sp,fp
  8119cc:	dfc00117 	ldw	ra,4(sp)
  8119d0:	df000017 	ldw	fp,0(sp)
  8119d4:	dec00204 	addi	sp,sp,8
  8119d8:	f800283a 	ret

008119dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8119dc:	defffa04 	addi	sp,sp,-24
  8119e0:	dfc00515 	stw	ra,20(sp)
  8119e4:	df000415 	stw	fp,16(sp)
  8119e8:	df000404 	addi	fp,sp,16
  8119ec:	e13ffd15 	stw	r4,-12(fp)
  8119f0:	e17ffe15 	stw	r5,-8(fp)
  8119f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8119f8:	e0bffd17 	ldw	r2,-12(fp)
  8119fc:	10800017 	ldw	r2,0(r2)
  811a00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811a04:	e0bffc17 	ldw	r2,-16(fp)
  811a08:	11000a04 	addi	r4,r2,40
  811a0c:	e0bffd17 	ldw	r2,-12(fp)
  811a10:	11c00217 	ldw	r7,8(r2)
  811a14:	e17ffe17 	ldw	r5,-8(fp)
  811a18:	e1bfff17 	ldw	r6,-4(fp)
  811a1c:	08121f00 	call	8121f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811a20:	e037883a 	mov	sp,fp
  811a24:	dfc00117 	ldw	ra,4(sp)
  811a28:	df000017 	ldw	fp,0(sp)
  811a2c:	dec00204 	addi	sp,sp,8
  811a30:	f800283a 	ret

00811a34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811a34:	defffc04 	addi	sp,sp,-16
  811a38:	dfc00315 	stw	ra,12(sp)
  811a3c:	df000215 	stw	fp,8(sp)
  811a40:	df000204 	addi	fp,sp,8
  811a44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811a48:	e0bfff17 	ldw	r2,-4(fp)
  811a4c:	10800017 	ldw	r2,0(r2)
  811a50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811a54:	e0bffe17 	ldw	r2,-8(fp)
  811a58:	11000a04 	addi	r4,r2,40
  811a5c:	e0bfff17 	ldw	r2,-4(fp)
  811a60:	11400217 	ldw	r5,8(r2)
  811a64:	0811e640 	call	811e64 <altera_avalon_jtag_uart_close>
}
  811a68:	e037883a 	mov	sp,fp
  811a6c:	dfc00117 	ldw	ra,4(sp)
  811a70:	df000017 	ldw	fp,0(sp)
  811a74:	dec00204 	addi	sp,sp,8
  811a78:	f800283a 	ret

00811a7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811a7c:	defffa04 	addi	sp,sp,-24
  811a80:	dfc00515 	stw	ra,20(sp)
  811a84:	df000415 	stw	fp,16(sp)
  811a88:	df000404 	addi	fp,sp,16
  811a8c:	e13ffd15 	stw	r4,-12(fp)
  811a90:	e17ffe15 	stw	r5,-8(fp)
  811a94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811a98:	e0bffd17 	ldw	r2,-12(fp)
  811a9c:	10800017 	ldw	r2,0(r2)
  811aa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811aa4:	e0bffc17 	ldw	r2,-16(fp)
  811aa8:	11000a04 	addi	r4,r2,40
  811aac:	e17ffe17 	ldw	r5,-8(fp)
  811ab0:	e1bfff17 	ldw	r6,-4(fp)
  811ab4:	0811ed80 	call	811ed8 <altera_avalon_jtag_uart_ioctl>
}
  811ab8:	e037883a 	mov	sp,fp
  811abc:	dfc00117 	ldw	ra,4(sp)
  811ac0:	df000017 	ldw	fp,0(sp)
  811ac4:	dec00204 	addi	sp,sp,8
  811ac8:	f800283a 	ret

00811acc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811acc:	defffa04 	addi	sp,sp,-24
  811ad0:	dfc00515 	stw	ra,20(sp)
  811ad4:	df000415 	stw	fp,16(sp)
  811ad8:	df000404 	addi	fp,sp,16
  811adc:	e13ffd15 	stw	r4,-12(fp)
  811ae0:	e17ffe15 	stw	r5,-8(fp)
  811ae4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811ae8:	e0fffd17 	ldw	r3,-12(fp)
  811aec:	00800044 	movi	r2,1
  811af0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811af4:	e0bffd17 	ldw	r2,-12(fp)
  811af8:	10800017 	ldw	r2,0(r2)
  811afc:	11000104 	addi	r4,r2,4
  811b00:	e0bffd17 	ldw	r2,-12(fp)
  811b04:	10800817 	ldw	r2,32(r2)
  811b08:	1007883a 	mov	r3,r2
  811b0c:	2005883a 	mov	r2,r4
  811b10:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811b14:	e13ffe17 	ldw	r4,-8(fp)
  811b18:	e17fff17 	ldw	r5,-4(fp)
  811b1c:	d8000015 	stw	zero,0(sp)
  811b20:	01802074 	movhi	r6,129
  811b24:	3186e304 	addi	r6,r6,7052
  811b28:	e1fffd17 	ldw	r7,-12(fp)
  811b2c:	08142dc0 	call	8142dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811b30:	e0bffd17 	ldw	r2,-12(fp)
  811b34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811b38:	e0bffd17 	ldw	r2,-12(fp)
  811b3c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811b40:	008020b4 	movhi	r2,130
  811b44:	10a3a804 	addi	r2,r2,-29024
  811b48:	10800017 	ldw	r2,0(r2)
  811b4c:	100b883a 	mov	r5,r2
  811b50:	01802074 	movhi	r6,129
  811b54:	31876d04 	addi	r6,r6,7604
  811b58:	e1fffd17 	ldw	r7,-12(fp)
  811b5c:	08106280 	call	810628 <alt_alarm_start>
  811b60:	1004403a 	cmpge	r2,r2,zero
  811b64:	1000041e 	bne	r2,zero,811b78 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811b68:	e0fffd17 	ldw	r3,-12(fp)
  811b6c:	00a00034 	movhi	r2,32768
  811b70:	10bfffc4 	addi	r2,r2,-1
  811b74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811b78:	e037883a 	mov	sp,fp
  811b7c:	dfc00117 	ldw	ra,4(sp)
  811b80:	df000017 	ldw	fp,0(sp)
  811b84:	dec00204 	addi	sp,sp,8
  811b88:	f800283a 	ret

00811b8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811b8c:	defff804 	addi	sp,sp,-32
  811b90:	df000715 	stw	fp,28(sp)
  811b94:	df000704 	addi	fp,sp,28
  811b98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811b9c:	e0bfff17 	ldw	r2,-4(fp)
  811ba0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	10800017 	ldw	r2,0(r2)
  811bac:	e0bffd15 	stw	r2,-12(fp)
  811bb0:	00000006 	br	811bb4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811bb4:	e0bffd17 	ldw	r2,-12(fp)
  811bb8:	10800104 	addi	r2,r2,4
  811bbc:	10800037 	ldwio	r2,0(r2)
  811bc0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811bc4:	e0bffc17 	ldw	r2,-16(fp)
  811bc8:	1080c00c 	andi	r2,r2,768
  811bcc:	1005003a 	cmpeq	r2,r2,zero
  811bd0:	1000741e 	bne	r2,zero,811da4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811bd4:	e0bffc17 	ldw	r2,-16(fp)
  811bd8:	1080400c 	andi	r2,r2,256
  811bdc:	1005003a 	cmpeq	r2,r2,zero
  811be0:	1000351e 	bne	r2,zero,811cb8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811be4:	00800074 	movhi	r2,1
  811be8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811bec:	e0bffe17 	ldw	r2,-8(fp)
  811bf0:	10800a17 	ldw	r2,40(r2)
  811bf4:	10800044 	addi	r2,r2,1
  811bf8:	1081ffcc 	andi	r2,r2,2047
  811bfc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811c00:	e0bffe17 	ldw	r2,-8(fp)
  811c04:	10c00b17 	ldw	r3,44(r2)
  811c08:	e0bffa17 	ldw	r2,-24(fp)
  811c0c:	18801626 	beq	r3,r2,811c68 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811c10:	e0bffd17 	ldw	r2,-12(fp)
  811c14:	10800037 	ldwio	r2,0(r2)
  811c18:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811c1c:	e0bffb17 	ldw	r2,-20(fp)
  811c20:	10a0000c 	andi	r2,r2,32768
  811c24:	1005003a 	cmpeq	r2,r2,zero
  811c28:	10000f1e 	bne	r2,zero,811c68 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811c2c:	e0bffe17 	ldw	r2,-8(fp)
  811c30:	10c00a17 	ldw	r3,40(r2)
  811c34:	e0bffb17 	ldw	r2,-20(fp)
  811c38:	1009883a 	mov	r4,r2
  811c3c:	e0bffe17 	ldw	r2,-8(fp)
  811c40:	1885883a 	add	r2,r3,r2
  811c44:	10800e04 	addi	r2,r2,56
  811c48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811c4c:	e0bffe17 	ldw	r2,-8(fp)
  811c50:	10800a17 	ldw	r2,40(r2)
  811c54:	10800044 	addi	r2,r2,1
  811c58:	10c1ffcc 	andi	r3,r2,2047
  811c5c:	e0bffe17 	ldw	r2,-8(fp)
  811c60:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811c64:	003fe106 	br	811bec <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811c68:	e0bffb17 	ldw	r2,-20(fp)
  811c6c:	10bfffec 	andhi	r2,r2,65535
  811c70:	1005003a 	cmpeq	r2,r2,zero
  811c74:	1000101e 	bne	r2,zero,811cb8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811c78:	e0bffe17 	ldw	r2,-8(fp)
  811c7c:	10c00817 	ldw	r3,32(r2)
  811c80:	00bfff84 	movi	r2,-2
  811c84:	1886703a 	and	r3,r3,r2
  811c88:	e0bffe17 	ldw	r2,-8(fp)
  811c8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811c90:	e0bffd17 	ldw	r2,-12(fp)
  811c94:	11000104 	addi	r4,r2,4
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	10800817 	ldw	r2,32(r2)
  811ca0:	1007883a 	mov	r3,r2
  811ca4:	2005883a 	mov	r2,r4
  811ca8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811cac:	e0bffd17 	ldw	r2,-12(fp)
  811cb0:	10800104 	addi	r2,r2,4
  811cb4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811cb8:	e0bffc17 	ldw	r2,-16(fp)
  811cbc:	1080800c 	andi	r2,r2,512
  811cc0:	1005003a 	cmpeq	r2,r2,zero
  811cc4:	103fbb1e 	bne	r2,zero,811bb4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811cc8:	e0bffc17 	ldw	r2,-16(fp)
  811ccc:	10bfffec 	andhi	r2,r2,65535
  811cd0:	1004d43a 	srli	r2,r2,16
  811cd4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811cd8:	00001506 	br	811d30 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811cdc:	e13ffd17 	ldw	r4,-12(fp)
  811ce0:	e0bffe17 	ldw	r2,-8(fp)
  811ce4:	10c00d17 	ldw	r3,52(r2)
  811ce8:	e0bffe17 	ldw	r2,-8(fp)
  811cec:	1885883a 	add	r2,r3,r2
  811cf0:	10820e04 	addi	r2,r2,2104
  811cf4:	10800003 	ldbu	r2,0(r2)
  811cf8:	10c03fcc 	andi	r3,r2,255
  811cfc:	18c0201c 	xori	r3,r3,128
  811d00:	18ffe004 	addi	r3,r3,-128
  811d04:	2005883a 	mov	r2,r4
  811d08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811d0c:	e0bffe17 	ldw	r2,-8(fp)
  811d10:	10800d17 	ldw	r2,52(r2)
  811d14:	10800044 	addi	r2,r2,1
  811d18:	10c1ffcc 	andi	r3,r2,2047
  811d1c:	e0bffe17 	ldw	r2,-8(fp)
  811d20:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811d24:	e0bff917 	ldw	r2,-28(fp)
  811d28:	10bfffc4 	addi	r2,r2,-1
  811d2c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811d30:	e0bff917 	ldw	r2,-28(fp)
  811d34:	1005003a 	cmpeq	r2,r2,zero
  811d38:	1000051e 	bne	r2,zero,811d50 <altera_avalon_jtag_uart_irq+0x1c4>
  811d3c:	e0bffe17 	ldw	r2,-8(fp)
  811d40:	10c00d17 	ldw	r3,52(r2)
  811d44:	e0bffe17 	ldw	r2,-8(fp)
  811d48:	10800c17 	ldw	r2,48(r2)
  811d4c:	18bfe31e 	bne	r3,r2,811cdc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811d50:	e0bff917 	ldw	r2,-28(fp)
  811d54:	1005003a 	cmpeq	r2,r2,zero
  811d58:	103f961e 	bne	r2,zero,811bb4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811d5c:	e0bffe17 	ldw	r2,-8(fp)
  811d60:	10c00817 	ldw	r3,32(r2)
  811d64:	00bfff44 	movi	r2,-3
  811d68:	1886703a 	and	r3,r3,r2
  811d6c:	e0bffe17 	ldw	r2,-8(fp)
  811d70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811d74:	e0bffe17 	ldw	r2,-8(fp)
  811d78:	10800017 	ldw	r2,0(r2)
  811d7c:	11000104 	addi	r4,r2,4
  811d80:	e0bffe17 	ldw	r2,-8(fp)
  811d84:	10800817 	ldw	r2,32(r2)
  811d88:	1007883a 	mov	r3,r2
  811d8c:	2005883a 	mov	r2,r4
  811d90:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811d94:	e0bffd17 	ldw	r2,-12(fp)
  811d98:	10800104 	addi	r2,r2,4
  811d9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811da0:	003f8406 	br	811bb4 <altera_avalon_jtag_uart_irq+0x28>
}
  811da4:	e037883a 	mov	sp,fp
  811da8:	df000017 	ldw	fp,0(sp)
  811dac:	dec00104 	addi	sp,sp,4
  811db0:	f800283a 	ret

00811db4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811db4:	defffc04 	addi	sp,sp,-16
  811db8:	df000315 	stw	fp,12(sp)
  811dbc:	df000304 	addi	fp,sp,12
  811dc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811dc4:	e0bfff17 	ldw	r2,-4(fp)
  811dc8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811dcc:	e0bffe17 	ldw	r2,-8(fp)
  811dd0:	10800017 	ldw	r2,0(r2)
  811dd4:	10800104 	addi	r2,r2,4
  811dd8:	10800037 	ldwio	r2,0(r2)
  811ddc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811de0:	e0bffd17 	ldw	r2,-12(fp)
  811de4:	1081000c 	andi	r2,r2,1024
  811de8:	1005003a 	cmpeq	r2,r2,zero
  811dec:	10000c1e 	bne	r2,zero,811e20 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811df0:	e0bffe17 	ldw	r2,-8(fp)
  811df4:	10800017 	ldw	r2,0(r2)
  811df8:	11000104 	addi	r4,r2,4
  811dfc:	e0bffe17 	ldw	r2,-8(fp)
  811e00:	10800817 	ldw	r2,32(r2)
  811e04:	10810014 	ori	r2,r2,1024
  811e08:	1007883a 	mov	r3,r2
  811e0c:	2005883a 	mov	r2,r4
  811e10:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811e14:	e0bffe17 	ldw	r2,-8(fp)
  811e18:	10000915 	stw	zero,36(r2)
  811e1c:	00000a06 	br	811e48 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811e20:	e0bffe17 	ldw	r2,-8(fp)
  811e24:	10c00917 	ldw	r3,36(r2)
  811e28:	00a00034 	movhi	r2,32768
  811e2c:	10bfff04 	addi	r2,r2,-4
  811e30:	10c00536 	bltu	r2,r3,811e48 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811e34:	e0bffe17 	ldw	r2,-8(fp)
  811e38:	10800917 	ldw	r2,36(r2)
  811e3c:	10c00044 	addi	r3,r2,1
  811e40:	e0bffe17 	ldw	r2,-8(fp)
  811e44:	10c00915 	stw	r3,36(r2)
  811e48:	008020b4 	movhi	r2,130
  811e4c:	10a3a804 	addi	r2,r2,-29024
  811e50:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811e54:	e037883a 	mov	sp,fp
  811e58:	df000017 	ldw	fp,0(sp)
  811e5c:	dec00104 	addi	sp,sp,4
  811e60:	f800283a 	ret

00811e64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811e64:	defffc04 	addi	sp,sp,-16
  811e68:	df000315 	stw	fp,12(sp)
  811e6c:	df000304 	addi	fp,sp,12
  811e70:	e13ffd15 	stw	r4,-12(fp)
  811e74:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811e78:	00000706 	br	811e98 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811e7c:	e0bffe17 	ldw	r2,-8(fp)
  811e80:	1090000c 	andi	r2,r2,16384
  811e84:	1005003a 	cmpeq	r2,r2,zero
  811e88:	1000031e 	bne	r2,zero,811e98 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811e8c:	00bffd44 	movi	r2,-11
  811e90:	e0bfff15 	stw	r2,-4(fp)
  811e94:	00000b06 	br	811ec4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811e98:	e0bffd17 	ldw	r2,-12(fp)
  811e9c:	10c00d17 	ldw	r3,52(r2)
  811ea0:	e0bffd17 	ldw	r2,-12(fp)
  811ea4:	10800c17 	ldw	r2,48(r2)
  811ea8:	18800526 	beq	r3,r2,811ec0 <altera_avalon_jtag_uart_close+0x5c>
  811eac:	e0bffd17 	ldw	r2,-12(fp)
  811eb0:	10c00917 	ldw	r3,36(r2)
  811eb4:	e0bffd17 	ldw	r2,-12(fp)
  811eb8:	10800117 	ldw	r2,4(r2)
  811ebc:	18bfef36 	bltu	r3,r2,811e7c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811ec0:	e03fff15 	stw	zero,-4(fp)
  811ec4:	e0bfff17 	ldw	r2,-4(fp)
}
  811ec8:	e037883a 	mov	sp,fp
  811ecc:	df000017 	ldw	fp,0(sp)
  811ed0:	dec00104 	addi	sp,sp,4
  811ed4:	f800283a 	ret

00811ed8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811ed8:	defff804 	addi	sp,sp,-32
  811edc:	df000715 	stw	fp,28(sp)
  811ee0:	df000704 	addi	fp,sp,28
  811ee4:	e13ffb15 	stw	r4,-20(fp)
  811ee8:	e17ffc15 	stw	r5,-16(fp)
  811eec:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811ef0:	00bff9c4 	movi	r2,-25
  811ef4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811ef8:	e0bffc17 	ldw	r2,-16(fp)
  811efc:	e0bfff15 	stw	r2,-4(fp)
  811f00:	e0ffff17 	ldw	r3,-4(fp)
  811f04:	189a8060 	cmpeqi	r2,r3,27137
  811f08:	1000041e 	bne	r2,zero,811f1c <altera_avalon_jtag_uart_ioctl+0x44>
  811f0c:	e0ffff17 	ldw	r3,-4(fp)
  811f10:	189a80a0 	cmpeqi	r2,r3,27138
  811f14:	10001b1e 	bne	r2,zero,811f84 <altera_avalon_jtag_uart_ioctl+0xac>
  811f18:	00002706 	br	811fb8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811f1c:	e0bffb17 	ldw	r2,-20(fp)
  811f20:	10c00117 	ldw	r3,4(r2)
  811f24:	00a00034 	movhi	r2,32768
  811f28:	10bfffc4 	addi	r2,r2,-1
  811f2c:	18802226 	beq	r3,r2,811fb8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811f30:	e0bffd17 	ldw	r2,-12(fp)
  811f34:	10800017 	ldw	r2,0(r2)
  811f38:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811f3c:	e0bff917 	ldw	r2,-28(fp)
  811f40:	10800090 	cmplti	r2,r2,2
  811f44:	1000071e 	bne	r2,zero,811f64 <altera_avalon_jtag_uart_ioctl+0x8c>
  811f48:	e0fff917 	ldw	r3,-28(fp)
  811f4c:	00a00034 	movhi	r2,32768
  811f50:	10bfffc4 	addi	r2,r2,-1
  811f54:	18800326 	beq	r3,r2,811f64 <altera_avalon_jtag_uart_ioctl+0x8c>
  811f58:	e0bff917 	ldw	r2,-28(fp)
  811f5c:	e0bffe15 	stw	r2,-8(fp)
  811f60:	00000306 	br	811f70 <altera_avalon_jtag_uart_ioctl+0x98>
  811f64:	00e00034 	movhi	r3,32768
  811f68:	18ffff84 	addi	r3,r3,-2
  811f6c:	e0fffe15 	stw	r3,-8(fp)
  811f70:	e0bffb17 	ldw	r2,-20(fp)
  811f74:	e0fffe17 	ldw	r3,-8(fp)
  811f78:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811f7c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811f80:	00000d06 	br	811fb8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811f84:	e0bffb17 	ldw	r2,-20(fp)
  811f88:	10c00117 	ldw	r3,4(r2)
  811f8c:	00a00034 	movhi	r2,32768
  811f90:	10bfffc4 	addi	r2,r2,-1
  811f94:	18800826 	beq	r3,r2,811fb8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811f98:	e13ffd17 	ldw	r4,-12(fp)
  811f9c:	e0bffb17 	ldw	r2,-20(fp)
  811fa0:	10c00917 	ldw	r3,36(r2)
  811fa4:	e0bffb17 	ldw	r2,-20(fp)
  811fa8:	10800117 	ldw	r2,4(r2)
  811fac:	1885803a 	cmpltu	r2,r3,r2
  811fb0:	20800015 	stw	r2,0(r4)
      rc = 0;
  811fb4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811fb8:	e0bffa17 	ldw	r2,-24(fp)
}
  811fbc:	e037883a 	mov	sp,fp
  811fc0:	df000017 	ldw	fp,0(sp)
  811fc4:	dec00104 	addi	sp,sp,4
  811fc8:	f800283a 	ret

00811fcc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811fcc:	defff204 	addi	sp,sp,-56
  811fd0:	dfc00d15 	stw	ra,52(sp)
  811fd4:	df000c15 	stw	fp,48(sp)
  811fd8:	df000c04 	addi	fp,sp,48
  811fdc:	e13ffb15 	stw	r4,-20(fp)
  811fe0:	e17ffc15 	stw	r5,-16(fp)
  811fe4:	e1bffd15 	stw	r6,-12(fp)
  811fe8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811fec:	e0bffc17 	ldw	r2,-16(fp)
  811ff0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811ff4:	00004806 	br	812118 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811ff8:	e0bffb17 	ldw	r2,-20(fp)
  811ffc:	10800a17 	ldw	r2,40(r2)
  812000:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  812004:	e0bffb17 	ldw	r2,-20(fp)
  812008:	10800b17 	ldw	r2,44(r2)
  81200c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  812010:	e0fff717 	ldw	r3,-36(fp)
  812014:	e0bff617 	ldw	r2,-40(fp)
  812018:	18800536 	bltu	r3,r2,812030 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  81201c:	e0bff717 	ldw	r2,-36(fp)
  812020:	e0fff617 	ldw	r3,-40(fp)
  812024:	10c5c83a 	sub	r2,r2,r3
  812028:	e0bff815 	stw	r2,-32(fp)
  81202c:	00000406 	br	812040 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812030:	00820004 	movi	r2,2048
  812034:	e0fff617 	ldw	r3,-40(fp)
  812038:	10c5c83a 	sub	r2,r2,r3
  81203c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812040:	e0bff817 	ldw	r2,-32(fp)
  812044:	1005003a 	cmpeq	r2,r2,zero
  812048:	10001f1e 	bne	r2,zero,8120c8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  81204c:	e0fffd17 	ldw	r3,-12(fp)
  812050:	e0bff817 	ldw	r2,-32(fp)
  812054:	1880022e 	bgeu	r3,r2,812060 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  812058:	e0bffd17 	ldw	r2,-12(fp)
  81205c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812060:	e0bffb17 	ldw	r2,-20(fp)
  812064:	10c00e04 	addi	r3,r2,56
  812068:	e0bff617 	ldw	r2,-40(fp)
  81206c:	1887883a 	add	r3,r3,r2
  812070:	e0bffa17 	ldw	r2,-24(fp)
  812074:	1009883a 	mov	r4,r2
  812078:	180b883a 	mov	r5,r3
  81207c:	e1bff817 	ldw	r6,-32(fp)
  812080:	08033400 	call	803340 <memcpy>
      ptr   += n;
  812084:	e0fff817 	ldw	r3,-32(fp)
  812088:	e0bffa17 	ldw	r2,-24(fp)
  81208c:	10c5883a 	add	r2,r2,r3
  812090:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812094:	e0fffd17 	ldw	r3,-12(fp)
  812098:	e0bff817 	ldw	r2,-32(fp)
  81209c:	1885c83a 	sub	r2,r3,r2
  8120a0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8120a4:	e0fff617 	ldw	r3,-40(fp)
  8120a8:	e0bff817 	ldw	r2,-32(fp)
  8120ac:	1885883a 	add	r2,r3,r2
  8120b0:	10c1ffcc 	andi	r3,r2,2047
  8120b4:	e0bffb17 	ldw	r2,-20(fp)
  8120b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8120bc:	e0bffd17 	ldw	r2,-12(fp)
  8120c0:	10800048 	cmpgei	r2,r2,1
  8120c4:	103fcc1e 	bne	r2,zero,811ff8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8120c8:	e0fffa17 	ldw	r3,-24(fp)
  8120cc:	e0bffc17 	ldw	r2,-16(fp)
  8120d0:	1880141e 	bne	r3,r2,812124 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8120d4:	e0bffe17 	ldw	r2,-8(fp)
  8120d8:	1090000c 	andi	r2,r2,16384
  8120dc:	1004c03a 	cmpne	r2,r2,zero
  8120e0:	1000101e 	bne	r2,zero,812124 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8120e4:	e0bffb17 	ldw	r2,-20(fp)
  8120e8:	10c00a17 	ldw	r3,40(r2)
  8120ec:	e0bff717 	ldw	r2,-36(fp)
  8120f0:	1880051e 	bne	r3,r2,812108 <altera_avalon_jtag_uart_read+0x13c>
  8120f4:	e0bffb17 	ldw	r2,-20(fp)
  8120f8:	10c00917 	ldw	r3,36(r2)
  8120fc:	e0bffb17 	ldw	r2,-20(fp)
  812100:	10800117 	ldw	r2,4(r2)
  812104:	18bff736 	bltu	r3,r2,8120e4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812108:	e0bffb17 	ldw	r2,-20(fp)
  81210c:	10c00a17 	ldw	r3,40(r2)
  812110:	e0bff717 	ldw	r2,-36(fp)
  812114:	18800326 	beq	r3,r2,812124 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812118:	e0bffd17 	ldw	r2,-12(fp)
  81211c:	10800048 	cmpgei	r2,r2,1
  812120:	103fb51e 	bne	r2,zero,811ff8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812124:	e0fffa17 	ldw	r3,-24(fp)
  812128:	e0bffc17 	ldw	r2,-16(fp)
  81212c:	18801926 	beq	r3,r2,812194 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812130:	0005303a 	rdctl	r2,status
  812134:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812138:	e0fff517 	ldw	r3,-44(fp)
  81213c:	00bfff84 	movi	r2,-2
  812140:	1884703a 	and	r2,r3,r2
  812144:	1001703a 	wrctl	status,r2
  
  return context;
  812148:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81214c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812150:	e0bffb17 	ldw	r2,-20(fp)
  812154:	10800817 	ldw	r2,32(r2)
  812158:	10c00054 	ori	r3,r2,1
  81215c:	e0bffb17 	ldw	r2,-20(fp)
  812160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812164:	e0bffb17 	ldw	r2,-20(fp)
  812168:	10800017 	ldw	r2,0(r2)
  81216c:	11000104 	addi	r4,r2,4
  812170:	e0bffb17 	ldw	r2,-20(fp)
  812174:	10800817 	ldw	r2,32(r2)
  812178:	1007883a 	mov	r3,r2
  81217c:	2005883a 	mov	r2,r4
  812180:	10c00035 	stwio	r3,0(r2)
  812184:	e0bff917 	ldw	r2,-28(fp)
  812188:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81218c:	e0bff417 	ldw	r2,-48(fp)
  812190:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812194:	e0fffa17 	ldw	r3,-24(fp)
  812198:	e0bffc17 	ldw	r2,-16(fp)
  81219c:	18800526 	beq	r3,r2,8121b4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8121a0:	e0fffa17 	ldw	r3,-24(fp)
  8121a4:	e0bffc17 	ldw	r2,-16(fp)
  8121a8:	1887c83a 	sub	r3,r3,r2
  8121ac:	e0ffff15 	stw	r3,-4(fp)
  8121b0:	00000906 	br	8121d8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8121b4:	e0bffe17 	ldw	r2,-8(fp)
  8121b8:	1090000c 	andi	r2,r2,16384
  8121bc:	1005003a 	cmpeq	r2,r2,zero
  8121c0:	1000031e 	bne	r2,zero,8121d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8121c4:	00bffd44 	movi	r2,-11
  8121c8:	e0bfff15 	stw	r2,-4(fp)
  8121cc:	00000206 	br	8121d8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8121d0:	00bffec4 	movi	r2,-5
  8121d4:	e0bfff15 	stw	r2,-4(fp)
  8121d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8121dc:	e037883a 	mov	sp,fp
  8121e0:	dfc00117 	ldw	ra,4(sp)
  8121e4:	df000017 	ldw	fp,0(sp)
  8121e8:	dec00204 	addi	sp,sp,8
  8121ec:	f800283a 	ret

008121f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8121f0:	defff204 	addi	sp,sp,-56
  8121f4:	dfc00d15 	stw	ra,52(sp)
  8121f8:	df000c15 	stw	fp,48(sp)
  8121fc:	df000c04 	addi	fp,sp,48
  812200:	e13ffb15 	stw	r4,-20(fp)
  812204:	e17ffc15 	stw	r5,-16(fp)
  812208:	e1bffd15 	stw	r6,-12(fp)
  81220c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812210:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812214:	e0bffc17 	ldw	r2,-16(fp)
  812218:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81221c:	00003a06 	br	812308 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812220:	e0bffb17 	ldw	r2,-20(fp)
  812224:	10800c17 	ldw	r2,48(r2)
  812228:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  81222c:	e0bffb17 	ldw	r2,-20(fp)
  812230:	10800d17 	ldw	r2,52(r2)
  812234:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  812238:	e0fffa17 	ldw	r3,-24(fp)
  81223c:	e0bff917 	ldw	r2,-28(fp)
  812240:	1880062e 	bgeu	r3,r2,81225c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812244:	e0fff917 	ldw	r3,-28(fp)
  812248:	e0bffa17 	ldw	r2,-24(fp)
  81224c:	1885c83a 	sub	r2,r3,r2
  812250:	10bfffc4 	addi	r2,r2,-1
  812254:	e0bff815 	stw	r2,-32(fp)
  812258:	00000c06 	br	81228c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  81225c:	e0bff917 	ldw	r2,-28(fp)
  812260:	1005003a 	cmpeq	r2,r2,zero
  812264:	1000051e 	bne	r2,zero,81227c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812268:	00820004 	movi	r2,2048
  81226c:	e0fffa17 	ldw	r3,-24(fp)
  812270:	10c5c83a 	sub	r2,r2,r3
  812274:	e0bff815 	stw	r2,-32(fp)
  812278:	00000406 	br	81228c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81227c:	0081ffc4 	movi	r2,2047
  812280:	e0fffa17 	ldw	r3,-24(fp)
  812284:	10c5c83a 	sub	r2,r2,r3
  812288:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81228c:	e0bff817 	ldw	r2,-32(fp)
  812290:	1005003a 	cmpeq	r2,r2,zero
  812294:	10001f1e 	bne	r2,zero,812314 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812298:	e0fffd17 	ldw	r3,-12(fp)
  81229c:	e0bff817 	ldw	r2,-32(fp)
  8122a0:	1880022e 	bgeu	r3,r2,8122ac <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8122a4:	e0bffd17 	ldw	r2,-12(fp)
  8122a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8122ac:	e0bffb17 	ldw	r2,-20(fp)
  8122b0:	10c20e04 	addi	r3,r2,2104
  8122b4:	e0bffa17 	ldw	r2,-24(fp)
  8122b8:	1885883a 	add	r2,r3,r2
  8122bc:	e0fffc17 	ldw	r3,-16(fp)
  8122c0:	1009883a 	mov	r4,r2
  8122c4:	180b883a 	mov	r5,r3
  8122c8:	e1bff817 	ldw	r6,-32(fp)
  8122cc:	08033400 	call	803340 <memcpy>
      ptr   += n;
  8122d0:	e0fff817 	ldw	r3,-32(fp)
  8122d4:	e0bffc17 	ldw	r2,-16(fp)
  8122d8:	10c5883a 	add	r2,r2,r3
  8122dc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8122e0:	e0fffd17 	ldw	r3,-12(fp)
  8122e4:	e0bff817 	ldw	r2,-32(fp)
  8122e8:	1885c83a 	sub	r2,r3,r2
  8122ec:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8122f0:	e0fffa17 	ldw	r3,-24(fp)
  8122f4:	e0bff817 	ldw	r2,-32(fp)
  8122f8:	1885883a 	add	r2,r3,r2
  8122fc:	10c1ffcc 	andi	r3,r2,2047
  812300:	e0bffb17 	ldw	r2,-20(fp)
  812304:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812308:	e0bffd17 	ldw	r2,-12(fp)
  81230c:	10800048 	cmpgei	r2,r2,1
  812310:	103fc31e 	bne	r2,zero,812220 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812314:	0005303a 	rdctl	r2,status
  812318:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81231c:	e0fff517 	ldw	r3,-44(fp)
  812320:	00bfff84 	movi	r2,-2
  812324:	1884703a 	and	r2,r3,r2
  812328:	1001703a 	wrctl	status,r2
  
  return context;
  81232c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812330:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812334:	e0bffb17 	ldw	r2,-20(fp)
  812338:	10800817 	ldw	r2,32(r2)
  81233c:	10c00094 	ori	r3,r2,2
  812340:	e0bffb17 	ldw	r2,-20(fp)
  812344:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812348:	e0bffb17 	ldw	r2,-20(fp)
  81234c:	10800017 	ldw	r2,0(r2)
  812350:	11000104 	addi	r4,r2,4
  812354:	e0bffb17 	ldw	r2,-20(fp)
  812358:	10800817 	ldw	r2,32(r2)
  81235c:	1007883a 	mov	r3,r2
  812360:	2005883a 	mov	r2,r4
  812364:	10c00035 	stwio	r3,0(r2)
  812368:	e0bff717 	ldw	r2,-36(fp)
  81236c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812370:	e0bff417 	ldw	r2,-48(fp)
  812374:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812378:	e0bffd17 	ldw	r2,-12(fp)
  81237c:	10800050 	cmplti	r2,r2,1
  812380:	1000111e 	bne	r2,zero,8123c8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  812384:	e0bffe17 	ldw	r2,-8(fp)
  812388:	1090000c 	andi	r2,r2,16384
  81238c:	1004c03a 	cmpne	r2,r2,zero
  812390:	1000101e 	bne	r2,zero,8123d4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812394:	e0bffb17 	ldw	r2,-20(fp)
  812398:	10c00d17 	ldw	r3,52(r2)
  81239c:	e0bff917 	ldw	r2,-28(fp)
  8123a0:	1880051e 	bne	r3,r2,8123b8 <altera_avalon_jtag_uart_write+0x1c8>
  8123a4:	e0bffb17 	ldw	r2,-20(fp)
  8123a8:	10c00917 	ldw	r3,36(r2)
  8123ac:	e0bffb17 	ldw	r2,-20(fp)
  8123b0:	10800117 	ldw	r2,4(r2)
  8123b4:	18bff736 	bltu	r3,r2,812394 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8123b8:	e0bffb17 	ldw	r2,-20(fp)
  8123bc:	10c00d17 	ldw	r3,52(r2)
  8123c0:	e0bff917 	ldw	r2,-28(fp)
  8123c4:	18800326 	beq	r3,r2,8123d4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  8123c8:	e0bffd17 	ldw	r2,-12(fp)
  8123cc:	10800048 	cmpgei	r2,r2,1
  8123d0:	103fcd1e 	bne	r2,zero,812308 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8123d4:	e0fffc17 	ldw	r3,-16(fp)
  8123d8:	e0bff617 	ldw	r2,-40(fp)
  8123dc:	18800526 	beq	r3,r2,8123f4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8123e0:	e0fffc17 	ldw	r3,-16(fp)
  8123e4:	e0bff617 	ldw	r2,-40(fp)
  8123e8:	1887c83a 	sub	r3,r3,r2
  8123ec:	e0ffff15 	stw	r3,-4(fp)
  8123f0:	00000906 	br	812418 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8123f4:	e0bffe17 	ldw	r2,-8(fp)
  8123f8:	1090000c 	andi	r2,r2,16384
  8123fc:	1005003a 	cmpeq	r2,r2,zero
  812400:	1000031e 	bne	r2,zero,812410 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  812404:	00bffd44 	movi	r2,-11
  812408:	e0bfff15 	stw	r2,-4(fp)
  81240c:	00000206 	br	812418 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  812410:	00bffec4 	movi	r2,-5
  812414:	e0bfff15 	stw	r2,-4(fp)
  812418:	e0bfff17 	ldw	r2,-4(fp)
}
  81241c:	e037883a 	mov	sp,fp
  812420:	dfc00117 	ldw	ra,4(sp)
  812424:	df000017 	ldw	fp,0(sp)
  812428:	dec00204 	addi	sp,sp,8
  81242c:	f800283a 	ret

00812430 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  812430:	defffa04 	addi	sp,sp,-24
  812434:	dfc00515 	stw	ra,20(sp)
  812438:	df000415 	stw	fp,16(sp)
  81243c:	df000404 	addi	fp,sp,16
  812440:	e13ffe15 	stw	r4,-8(fp)
  812444:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812448:	e0bffe17 	ldw	r2,-8(fp)
  81244c:	10800017 	ldw	r2,0(r2)
  812450:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812454:	008003f4 	movhi	r2,15
  812458:	10909004 	addi	r2,r2,16960
  81245c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812460:	e0bffe17 	ldw	r2,-8(fp)
  812464:	10800803 	ldbu	r2,32(r2)
  812468:	10803fcc 	andi	r2,r2,255
  81246c:	1080201c 	xori	r2,r2,128
  812470:	10bfe004 	addi	r2,r2,-128
  812474:	1004c03a 	cmpne	r2,r2,zero
  812478:	1000161e 	bne	r2,zero,8124d4 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81247c:	00000a06 	br	8124a8 <lcd_write_command+0x78>
    if (--i == 0)
  812480:	e0bffc17 	ldw	r2,-16(fp)
  812484:	10bfffc4 	addi	r2,r2,-1
  812488:	e0bffc15 	stw	r2,-16(fp)
  81248c:	e0bffc17 	ldw	r2,-16(fp)
  812490:	1004c03a 	cmpne	r2,r2,zero
  812494:	1000041e 	bne	r2,zero,8124a8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  812498:	e0fffe17 	ldw	r3,-8(fp)
  81249c:	00800044 	movi	r2,1
  8124a0:	18800805 	stb	r2,32(r3)
      return;
  8124a4:	00000b06 	br	8124d4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8124a8:	e0bffd17 	ldw	r2,-12(fp)
  8124ac:	10800104 	addi	r2,r2,4
  8124b0:	10800037 	ldwio	r2,0(r2)
  8124b4:	1080200c 	andi	r2,r2,128
  8124b8:	1004c03a 	cmpne	r2,r2,zero
  8124bc:	103ff01e 	bne	r2,zero,812480 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8124c0:	01001904 	movi	r4,100
  8124c4:	08146e40 	call	8146e4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8124c8:	e0bffd17 	ldw	r2,-12(fp)
  8124cc:	e0ffff03 	ldbu	r3,-4(fp)
  8124d0:	10c00035 	stwio	r3,0(r2)
}
  8124d4:	e037883a 	mov	sp,fp
  8124d8:	dfc00117 	ldw	ra,4(sp)
  8124dc:	df000017 	ldw	fp,0(sp)
  8124e0:	dec00204 	addi	sp,sp,8
  8124e4:	f800283a 	ret

008124e8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8124e8:	defffa04 	addi	sp,sp,-24
  8124ec:	dfc00515 	stw	ra,20(sp)
  8124f0:	df000415 	stw	fp,16(sp)
  8124f4:	df000404 	addi	fp,sp,16
  8124f8:	e13ffe15 	stw	r4,-8(fp)
  8124fc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812500:	e0bffe17 	ldw	r2,-8(fp)
  812504:	10800017 	ldw	r2,0(r2)
  812508:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81250c:	008003f4 	movhi	r2,15
  812510:	10909004 	addi	r2,r2,16960
  812514:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812518:	e0bffe17 	ldw	r2,-8(fp)
  81251c:	10800803 	ldbu	r2,32(r2)
  812520:	10803fcc 	andi	r2,r2,255
  812524:	1080201c 	xori	r2,r2,128
  812528:	10bfe004 	addi	r2,r2,-128
  81252c:	1004c03a 	cmpne	r2,r2,zero
  812530:	10001d1e 	bne	r2,zero,8125a8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812534:	00000a06 	br	812560 <lcd_write_data+0x78>
    if (--i == 0)
  812538:	e0bffc17 	ldw	r2,-16(fp)
  81253c:	10bfffc4 	addi	r2,r2,-1
  812540:	e0bffc15 	stw	r2,-16(fp)
  812544:	e0bffc17 	ldw	r2,-16(fp)
  812548:	1004c03a 	cmpne	r2,r2,zero
  81254c:	1000041e 	bne	r2,zero,812560 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  812550:	e0fffe17 	ldw	r3,-8(fp)
  812554:	00800044 	movi	r2,1
  812558:	18800805 	stb	r2,32(r3)
      return;
  81255c:	00001206 	br	8125a8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812560:	e0bffd17 	ldw	r2,-12(fp)
  812564:	10800104 	addi	r2,r2,4
  812568:	10800037 	ldwio	r2,0(r2)
  81256c:	1080200c 	andi	r2,r2,128
  812570:	1004c03a 	cmpne	r2,r2,zero
  812574:	103ff01e 	bne	r2,zero,812538 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812578:	01001904 	movi	r4,100
  81257c:	08146e40 	call	8146e4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812580:	e0bffd17 	ldw	r2,-12(fp)
  812584:	10800204 	addi	r2,r2,8
  812588:	e0ffff03 	ldbu	r3,-4(fp)
  81258c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  812590:	e0bffe17 	ldw	r2,-8(fp)
  812594:	108008c3 	ldbu	r2,35(r2)
  812598:	10800044 	addi	r2,r2,1
  81259c:	1007883a 	mov	r3,r2
  8125a0:	e0bffe17 	ldw	r2,-8(fp)
  8125a4:	10c008c5 	stb	r3,35(r2)
}
  8125a8:	e037883a 	mov	sp,fp
  8125ac:	dfc00117 	ldw	ra,4(sp)
  8125b0:	df000017 	ldw	fp,0(sp)
  8125b4:	dec00204 	addi	sp,sp,8
  8125b8:	f800283a 	ret

008125bc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8125bc:	defffc04 	addi	sp,sp,-16
  8125c0:	dfc00315 	stw	ra,12(sp)
  8125c4:	df000215 	stw	fp,8(sp)
  8125c8:	df000204 	addi	fp,sp,8
  8125cc:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8125d0:	e13fff17 	ldw	r4,-4(fp)
  8125d4:	01400044 	movi	r5,1
  8125d8:	08124300 	call	812430 <lcd_write_command>

  sp->x = 0;
  8125dc:	e0bfff17 	ldw	r2,-4(fp)
  8125e0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8125e4:	e0bfff17 	ldw	r2,-4(fp)
  8125e8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8125ec:	e0bfff17 	ldw	r2,-4(fp)
  8125f0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8125f4:	e03ffe15 	stw	zero,-8(fp)
  8125f8:	00001906 	br	812660 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8125fc:	e0bffe17 	ldw	r2,-8(fp)
  812600:	10801924 	muli	r2,r2,100
  812604:	10c01004 	addi	r3,r2,64
  812608:	e0bfff17 	ldw	r2,-4(fp)
  81260c:	1889883a 	add	r4,r3,r2
  812610:	01400804 	movi	r5,32
  812614:	01801444 	movi	r6,81
  812618:	08034c00 	call	8034c0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  81261c:	e0bffe17 	ldw	r2,-8(fp)
  812620:	10801924 	muli	r2,r2,100
  812624:	10c00c04 	addi	r3,r2,48
  812628:	e0bfff17 	ldw	r2,-4(fp)
  81262c:	1889883a 	add	r4,r3,r2
  812630:	01400804 	movi	r5,32
  812634:	01800404 	movi	r6,16
  812638:	08034c00 	call	8034c0 <memset>
    sp->line[y].width = 0;
  81263c:	e0bffe17 	ldw	r2,-8(fp)
  812640:	e0ffff17 	ldw	r3,-4(fp)
  812644:	10801924 	muli	r2,r2,100
  812648:	10c5883a 	add	r2,r2,r3
  81264c:	10802404 	addi	r2,r2,144
  812650:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812654:	e0bffe17 	ldw	r2,-8(fp)
  812658:	10800044 	addi	r2,r2,1
  81265c:	e0bffe15 	stw	r2,-8(fp)
  812660:	e0bffe17 	ldw	r2,-8(fp)
  812664:	10800090 	cmplti	r2,r2,2
  812668:	103fe41e 	bne	r2,zero,8125fc <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81266c:	e037883a 	mov	sp,fp
  812670:	dfc00117 	ldw	ra,4(sp)
  812674:	df000017 	ldw	fp,0(sp)
  812678:	dec00204 	addi	sp,sp,8
  81267c:	f800283a 	ret

00812680 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812680:	defff604 	addi	sp,sp,-40
  812684:	dfc00915 	stw	ra,36(sp)
  812688:	df000815 	stw	fp,32(sp)
  81268c:	dc000715 	stw	r16,28(sp)
  812690:	df000704 	addi	fp,sp,28
  812694:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812698:	e0bfff17 	ldw	r2,-4(fp)
  81269c:	10800943 	ldbu	r2,37(r2)
  8126a0:	10803fcc 	andi	r2,r2,255
  8126a4:	1080201c 	xori	r2,r2,128
  8126a8:	10bfe004 	addi	r2,r2,-128
  8126ac:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126b0:	e03ffe15 	stw	zero,-8(fp)
  8126b4:	00006406 	br	812848 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8126b8:	e0bffe17 	ldw	r2,-8(fp)
  8126bc:	e0ffff17 	ldw	r3,-4(fp)
  8126c0:	10801924 	muli	r2,r2,100
  8126c4:	10c5883a 	add	r2,r2,r3
  8126c8:	10802404 	addi	r2,r2,144
  8126cc:	10800043 	ldbu	r2,1(r2)
  8126d0:	10803fcc 	andi	r2,r2,255
  8126d4:	1080201c 	xori	r2,r2,128
  8126d8:	10bfe004 	addi	r2,r2,-128
  8126dc:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8126e0:	e0bffe17 	ldw	r2,-8(fp)
  8126e4:	e0ffff17 	ldw	r3,-4(fp)
  8126e8:	10801924 	muli	r2,r2,100
  8126ec:	10c5883a 	add	r2,r2,r3
  8126f0:	10802404 	addi	r2,r2,144
  8126f4:	10800083 	ldbu	r2,2(r2)
  8126f8:	10c03fcc 	andi	r3,r2,255
  8126fc:	e0bffc17 	ldw	r2,-16(fp)
  812700:	1885383a 	mul	r2,r3,r2
  812704:	1005d23a 	srai	r2,r2,8
  812708:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  81270c:	e0fffa17 	ldw	r3,-24(fp)
  812710:	e0bffb17 	ldw	r2,-20(fp)
  812714:	18800116 	blt	r3,r2,81271c <lcd_repaint_screen+0x9c>
      offset = 0;
  812718:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81271c:	e03ffd15 	stw	zero,-12(fp)
  812720:	00004306 	br	812830 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812724:	e43ffe17 	ldw	r16,-8(fp)
  812728:	e0fffd17 	ldw	r3,-12(fp)
  81272c:	e0bffa17 	ldw	r2,-24(fp)
  812730:	1889883a 	add	r4,r3,r2
  812734:	e17ffb17 	ldw	r5,-20(fp)
  812738:	080fd280 	call	80fd28 <__modsi3>
  81273c:	1009883a 	mov	r4,r2
  812740:	e0ffff17 	ldw	r3,-4(fp)
  812744:	80801924 	muli	r2,r16,100
  812748:	10c5883a 	add	r2,r2,r3
  81274c:	1105883a 	add	r2,r2,r4
  812750:	10801004 	addi	r2,r2,64
  812754:	10800003 	ldbu	r2,0(r2)
  812758:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  81275c:	e0bffe17 	ldw	r2,-8(fp)
  812760:	e13ffd17 	ldw	r4,-12(fp)
  812764:	e0ffff17 	ldw	r3,-4(fp)
  812768:	10801924 	muli	r2,r2,100
  81276c:	10c5883a 	add	r2,r2,r3
  812770:	1105883a 	add	r2,r2,r4
  812774:	10800c04 	addi	r2,r2,48
  812778:	10800003 	ldbu	r2,0(r2)
  81277c:	10c03fcc 	andi	r3,r2,255
  812780:	18c0201c 	xori	r3,r3,128
  812784:	18ffe004 	addi	r3,r3,-128
  812788:	e0bff947 	ldb	r2,-27(fp)
  81278c:	18802526 	beq	r3,r2,812824 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812790:	e0fffe17 	ldw	r3,-8(fp)
  812794:	d0a01504 	addi	r2,gp,-32684
  812798:	1885883a 	add	r2,r3,r2
  81279c:	10800003 	ldbu	r2,0(r2)
  8127a0:	1007883a 	mov	r3,r2
  8127a4:	e0bffd17 	ldw	r2,-12(fp)
  8127a8:	1885883a 	add	r2,r3,r2
  8127ac:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  8127b0:	e0fff903 	ldbu	r3,-28(fp)
  8127b4:	e0bfff17 	ldw	r2,-4(fp)
  8127b8:	108008c3 	ldbu	r2,35(r2)
  8127bc:	10803fcc 	andi	r2,r2,255
  8127c0:	1080201c 	xori	r2,r2,128
  8127c4:	10bfe004 	addi	r2,r2,-128
  8127c8:	18800926 	beq	r3,r2,8127f0 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8127cc:	e0fff903 	ldbu	r3,-28(fp)
  8127d0:	00bfe004 	movi	r2,-128
  8127d4:	1884b03a 	or	r2,r3,r2
  8127d8:	11403fcc 	andi	r5,r2,255
  8127dc:	e13fff17 	ldw	r4,-4(fp)
  8127e0:	08124300 	call	812430 <lcd_write_command>
          sp->address = address;
  8127e4:	e0fff903 	ldbu	r3,-28(fp)
  8127e8:	e0bfff17 	ldw	r2,-4(fp)
  8127ec:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8127f0:	e0bff943 	ldbu	r2,-27(fp)
  8127f4:	11403fcc 	andi	r5,r2,255
  8127f8:	e13fff17 	ldw	r4,-4(fp)
  8127fc:	08124e80 	call	8124e8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  812800:	e0bffe17 	ldw	r2,-8(fp)
  812804:	e13ffd17 	ldw	r4,-12(fp)
  812808:	e0ffff17 	ldw	r3,-4(fp)
  81280c:	10801924 	muli	r2,r2,100
  812810:	10c5883a 	add	r2,r2,r3
  812814:	1105883a 	add	r2,r2,r4
  812818:	10c00c04 	addi	r3,r2,48
  81281c:	e0bff943 	ldbu	r2,-27(fp)
  812820:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812824:	e0bffd17 	ldw	r2,-12(fp)
  812828:	10800044 	addi	r2,r2,1
  81282c:	e0bffd15 	stw	r2,-12(fp)
  812830:	e0bffd17 	ldw	r2,-12(fp)
  812834:	10800410 	cmplti	r2,r2,16
  812838:	103fba1e 	bne	r2,zero,812724 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81283c:	e0bffe17 	ldw	r2,-8(fp)
  812840:	10800044 	addi	r2,r2,1
  812844:	e0bffe15 	stw	r2,-8(fp)
  812848:	e0bffe17 	ldw	r2,-8(fp)
  81284c:	10800090 	cmplti	r2,r2,2
  812850:	103f991e 	bne	r2,zero,8126b8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812854:	e037883a 	mov	sp,fp
  812858:	dfc00217 	ldw	ra,8(sp)
  81285c:	df000117 	ldw	fp,4(sp)
  812860:	dc000017 	ldw	r16,0(sp)
  812864:	dec00304 	addi	sp,sp,12
  812868:	f800283a 	ret

0081286c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  81286c:	defffc04 	addi	sp,sp,-16
  812870:	dfc00315 	stw	ra,12(sp)
  812874:	df000215 	stw	fp,8(sp)
  812878:	df000204 	addi	fp,sp,8
  81287c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812880:	e03ffe15 	stw	zero,-8(fp)
  812884:	00001d06 	br	8128fc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812888:	e0bffe17 	ldw	r2,-8(fp)
  81288c:	10800048 	cmpgei	r2,r2,1
  812890:	10000f1e 	bne	r2,zero,8128d0 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  812894:	e0bffe17 	ldw	r2,-8(fp)
  812898:	10801924 	muli	r2,r2,100
  81289c:	10c01004 	addi	r3,r2,64
  8128a0:	e0bfff17 	ldw	r2,-4(fp)
  8128a4:	1889883a 	add	r4,r3,r2
  8128a8:	e0bffe17 	ldw	r2,-8(fp)
  8128ac:	10800044 	addi	r2,r2,1
  8128b0:	10801924 	muli	r2,r2,100
  8128b4:	10c01004 	addi	r3,r2,64
  8128b8:	e0bfff17 	ldw	r2,-4(fp)
  8128bc:	1885883a 	add	r2,r3,r2
  8128c0:	100b883a 	mov	r5,r2
  8128c4:	01801404 	movi	r6,80
  8128c8:	08033400 	call	803340 <memcpy>
  8128cc:	00000806 	br	8128f0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8128d0:	e0bffe17 	ldw	r2,-8(fp)
  8128d4:	10801924 	muli	r2,r2,100
  8128d8:	10c01004 	addi	r3,r2,64
  8128dc:	e0bfff17 	ldw	r2,-4(fp)
  8128e0:	1889883a 	add	r4,r3,r2
  8128e4:	01400804 	movi	r5,32
  8128e8:	01801404 	movi	r6,80
  8128ec:	08034c00 	call	8034c0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8128f0:	e0bffe17 	ldw	r2,-8(fp)
  8128f4:	10800044 	addi	r2,r2,1
  8128f8:	e0bffe15 	stw	r2,-8(fp)
  8128fc:	e0bffe17 	ldw	r2,-8(fp)
  812900:	10800090 	cmplti	r2,r2,2
  812904:	103fe01e 	bne	r2,zero,812888 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812908:	e0bfff17 	ldw	r2,-4(fp)
  81290c:	10800883 	ldbu	r2,34(r2)
  812910:	10bfffc4 	addi	r2,r2,-1
  812914:	1007883a 	mov	r3,r2
  812918:	e0bfff17 	ldw	r2,-4(fp)
  81291c:	10c00885 	stb	r3,34(r2)
}
  812920:	e037883a 	mov	sp,fp
  812924:	dfc00117 	ldw	ra,4(sp)
  812928:	df000017 	ldw	fp,0(sp)
  81292c:	dec00204 	addi	sp,sp,8
  812930:	f800283a 	ret

00812934 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812934:	defff804 	addi	sp,sp,-32
  812938:	dfc00715 	stw	ra,28(sp)
  81293c:	df000615 	stw	fp,24(sp)
  812940:	df000604 	addi	fp,sp,24
  812944:	e13ffd15 	stw	r4,-12(fp)
  812948:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  81294c:	e03ffc15 	stw	zero,-16(fp)
  812950:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  812954:	e0bffd17 	ldw	r2,-12(fp)
  812958:	10800a03 	ldbu	r2,40(r2)
  81295c:	10803fcc 	andi	r2,r2,255
  812960:	1080201c 	xori	r2,r2,128
  812964:	10bfe004 	addi	r2,r2,-128
  812968:	108016d8 	cmpnei	r2,r2,91
  81296c:	1000491e 	bne	r2,zero,812a94 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  812970:	e0bffd17 	ldw	r2,-12(fp)
  812974:	10800a04 	addi	r2,r2,40
  812978:	10800044 	addi	r2,r2,1
  81297c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  812980:	00000d06 	br	8129b8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  812984:	e0bffc17 	ldw	r2,-16(fp)
  812988:	10c002a4 	muli	r3,r2,10
  81298c:	e0bffa17 	ldw	r2,-24(fp)
  812990:	10800003 	ldbu	r2,0(r2)
  812994:	10803fcc 	andi	r2,r2,255
  812998:	1080201c 	xori	r2,r2,128
  81299c:	10bfe004 	addi	r2,r2,-128
  8129a0:	1885883a 	add	r2,r3,r2
  8129a4:	10bff404 	addi	r2,r2,-48
  8129a8:	e0bffc15 	stw	r2,-16(fp)
  8129ac:	e0bffa17 	ldw	r2,-24(fp)
  8129b0:	10800044 	addi	r2,r2,1
  8129b4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8129b8:	e0bffa17 	ldw	r2,-24(fp)
  8129bc:	10800003 	ldbu	r2,0(r2)
  8129c0:	10803fcc 	andi	r2,r2,255
  8129c4:	1080201c 	xori	r2,r2,128
  8129c8:	10bfe004 	addi	r2,r2,-128
  8129cc:	1007883a 	mov	r3,r2
  8129d0:	00802074 	movhi	r2,129
  8129d4:	109c4804 	addi	r2,r2,28960
  8129d8:	10800017 	ldw	r2,0(r2)
  8129dc:	1885883a 	add	r2,r3,r2
  8129e0:	10800003 	ldbu	r2,0(r2)
  8129e4:	10803fcc 	andi	r2,r2,255
  8129e8:	1080010c 	andi	r2,r2,4
  8129ec:	1004c03a 	cmpne	r2,r2,zero
  8129f0:	103fe41e 	bne	r2,zero,812984 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8129f4:	e0bffa17 	ldw	r2,-24(fp)
  8129f8:	10800003 	ldbu	r2,0(r2)
  8129fc:	10803fcc 	andi	r2,r2,255
  812a00:	1080201c 	xori	r2,r2,128
  812a04:	10bfe004 	addi	r2,r2,-128
  812a08:	10800ed8 	cmpnei	r2,r2,59
  812a0c:	1000231e 	bne	r2,zero,812a9c <lcd_handle_escape+0x168>
    {
      ptr++;
  812a10:	e0bffa17 	ldw	r2,-24(fp)
  812a14:	10800044 	addi	r2,r2,1
  812a18:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  812a1c:	00000d06 	br	812a54 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812a20:	e0bffb17 	ldw	r2,-20(fp)
  812a24:	10c002a4 	muli	r3,r2,10
  812a28:	e0bffa17 	ldw	r2,-24(fp)
  812a2c:	10800003 	ldbu	r2,0(r2)
  812a30:	10803fcc 	andi	r2,r2,255
  812a34:	1080201c 	xori	r2,r2,128
  812a38:	10bfe004 	addi	r2,r2,-128
  812a3c:	1885883a 	add	r2,r3,r2
  812a40:	10bff404 	addi	r2,r2,-48
  812a44:	e0bffb15 	stw	r2,-20(fp)
  812a48:	e0bffa17 	ldw	r2,-24(fp)
  812a4c:	10800044 	addi	r2,r2,1
  812a50:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812a54:	e0bffa17 	ldw	r2,-24(fp)
  812a58:	10800003 	ldbu	r2,0(r2)
  812a5c:	10803fcc 	andi	r2,r2,255
  812a60:	1080201c 	xori	r2,r2,128
  812a64:	10bfe004 	addi	r2,r2,-128
  812a68:	1007883a 	mov	r3,r2
  812a6c:	00802074 	movhi	r2,129
  812a70:	109c4804 	addi	r2,r2,28960
  812a74:	10800017 	ldw	r2,0(r2)
  812a78:	1885883a 	add	r2,r3,r2
  812a7c:	10800003 	ldbu	r2,0(r2)
  812a80:	10803fcc 	andi	r2,r2,255
  812a84:	1080010c 	andi	r2,r2,4
  812a88:	1004c03a 	cmpne	r2,r2,zero
  812a8c:	103fe41e 	bne	r2,zero,812a20 <lcd_handle_escape+0xec>
  812a90:	00000206 	br	812a9c <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812a94:	00bfffc4 	movi	r2,-1
  812a98:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812a9c:	e0bffe07 	ldb	r2,-8(fp)
  812aa0:	e0bfff15 	stw	r2,-4(fp)
  812aa4:	e0ffff17 	ldw	r3,-4(fp)
  812aa8:	188012a0 	cmpeqi	r2,r3,74
  812aac:	10002f1e 	bne	r2,zero,812b6c <lcd_handle_escape+0x238>
  812ab0:	e0ffff17 	ldw	r3,-4(fp)
  812ab4:	188012c8 	cmpgei	r2,r3,75
  812ab8:	1000041e 	bne	r2,zero,812acc <lcd_handle_escape+0x198>
  812abc:	e0ffff17 	ldw	r3,-4(fp)
  812ac0:	18801220 	cmpeqi	r2,r3,72
  812ac4:	1000081e 	bne	r2,zero,812ae8 <lcd_handle_escape+0x1b4>
  812ac8:	00004906 	br	812bf0 <lcd_handle_escape+0x2bc>
  812acc:	e0ffff17 	ldw	r3,-4(fp)
  812ad0:	188012e0 	cmpeqi	r2,r3,75
  812ad4:	10002b1e 	bne	r2,zero,812b84 <lcd_handle_escape+0x250>
  812ad8:	e0ffff17 	ldw	r3,-4(fp)
  812adc:	188019a0 	cmpeqi	r2,r3,102
  812ae0:	1000011e 	bne	r2,zero,812ae8 <lcd_handle_escape+0x1b4>
  812ae4:	00004206 	br	812bf0 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812ae8:	e0bffb17 	ldw	r2,-20(fp)
  812aec:	10800050 	cmplti	r2,r2,1
  812af0:	1000051e 	bne	r2,zero,812b08 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  812af4:	e0bffb17 	ldw	r2,-20(fp)
  812af8:	10bfffc4 	addi	r2,r2,-1
  812afc:	1007883a 	mov	r3,r2
  812b00:	e0bffd17 	ldw	r2,-12(fp)
  812b04:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812b08:	e0bffc17 	ldw	r2,-16(fp)
  812b0c:	10800050 	cmplti	r2,r2,1
  812b10:	1000371e 	bne	r2,zero,812bf0 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  812b14:	e0bffc17 	ldw	r2,-16(fp)
  812b18:	10bfffc4 	addi	r2,r2,-1
  812b1c:	1007883a 	mov	r3,r2
  812b20:	e0bffd17 	ldw	r2,-12(fp)
  812b24:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812b28:	e0bffd17 	ldw	r2,-12(fp)
  812b2c:	10800883 	ldbu	r2,34(r2)
  812b30:	10803fcc 	andi	r2,r2,255
  812b34:	10800170 	cmpltui	r2,r2,5
  812b38:	1000061e 	bne	r2,zero,812b54 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  812b3c:	e0fffd17 	ldw	r3,-12(fp)
  812b40:	00800104 	movi	r2,4
  812b44:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812b48:	00000206 	br	812b54 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  812b4c:	e13ffd17 	ldw	r4,-12(fp)
  812b50:	081286c0 	call	81286c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812b54:	e0bffd17 	ldw	r2,-12(fp)
  812b58:	10800883 	ldbu	r2,34(r2)
  812b5c:	10803fcc 	andi	r2,r2,255
  812b60:	108000e8 	cmpgeui	r2,r2,3
  812b64:	103ff91e 	bne	r2,zero,812b4c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  812b68:	00002106 	br	812bf0 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812b6c:	e0bffc17 	ldw	r2,-16(fp)
  812b70:	10800098 	cmpnei	r2,r2,2
  812b74:	10001e1e 	bne	r2,zero,812bf0 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  812b78:	e13ffd17 	ldw	r4,-12(fp)
  812b7c:	08125bc0 	call	8125bc <lcd_clear_screen>
    break;
  812b80:	00001b06 	br	812bf0 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812b84:	e0bffc17 	ldw	r2,-16(fp)
  812b88:	10800048 	cmpgei	r2,r2,1
  812b8c:	1000181e 	bne	r2,zero,812bf0 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812b90:	e0bffd17 	ldw	r2,-12(fp)
  812b94:	10800843 	ldbu	r2,33(r2)
  812b98:	10803fcc 	andi	r2,r2,255
  812b9c:	10801428 	cmpgeui	r2,r2,80
  812ba0:	1000131e 	bne	r2,zero,812bf0 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812ba4:	e0bffd17 	ldw	r2,-12(fp)
  812ba8:	10800883 	ldbu	r2,34(r2)
  812bac:	10803fcc 	andi	r2,r2,255
  812bb0:	10801924 	muli	r2,r2,100
  812bb4:	10c01004 	addi	r3,r2,64
  812bb8:	e0bffd17 	ldw	r2,-12(fp)
  812bbc:	1887883a 	add	r3,r3,r2
  812bc0:	e0bffd17 	ldw	r2,-12(fp)
  812bc4:	10800843 	ldbu	r2,33(r2)
  812bc8:	10803fcc 	andi	r2,r2,255
  812bcc:	1889883a 	add	r4,r3,r2
  812bd0:	e0bffd17 	ldw	r2,-12(fp)
  812bd4:	10800843 	ldbu	r2,33(r2)
  812bd8:	10c03fcc 	andi	r3,r2,255
  812bdc:	00801404 	movi	r2,80
  812be0:	10c5c83a 	sub	r2,r2,r3
  812be4:	100d883a 	mov	r6,r2
  812be8:	01400804 	movi	r5,32
  812bec:	08034c00 	call	8034c0 <memset>
    }
    break;
  }
}
  812bf0:	e037883a 	mov	sp,fp
  812bf4:	dfc00117 	ldw	ra,4(sp)
  812bf8:	df000017 	ldw	fp,0(sp)
  812bfc:	dec00204 	addi	sp,sp,8
  812c00:	f800283a 	ret

00812c04 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812c04:	defff204 	addi	sp,sp,-56
  812c08:	dfc00d15 	stw	ra,52(sp)
  812c0c:	df000c15 	stw	fp,48(sp)
  812c10:	dc000b15 	stw	r16,44(sp)
  812c14:	df000b04 	addi	fp,sp,44
  812c18:	e13ffc15 	stw	r4,-16(fp)
  812c1c:	e17ffd15 	stw	r5,-12(fp)
  812c20:	e1bffe15 	stw	r6,-8(fp)
  812c24:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812c28:	e0bffe17 	ldw	r2,-8(fp)
  812c2c:	1007883a 	mov	r3,r2
  812c30:	e0bffd17 	ldw	r2,-12(fp)
  812c34:	10c5883a 	add	r2,r2,r3
  812c38:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812c3c:	e0fffc17 	ldw	r3,-16(fp)
  812c40:	00800044 	movi	r2,1
  812c44:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812c48:	0000a206 	br	812ed4 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812c4c:	e0bffd17 	ldw	r2,-12(fp)
  812c50:	10800003 	ldbu	r2,0(r2)
  812c54:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812c58:	e0bffc17 	ldw	r2,-16(fp)
  812c5c:	10800903 	ldbu	r2,36(r2)
  812c60:	10803fcc 	andi	r2,r2,255
  812c64:	1080201c 	xori	r2,r2,128
  812c68:	10bfe004 	addi	r2,r2,-128
  812c6c:	1004803a 	cmplt	r2,r2,zero
  812c70:	10003b1e 	bne	r2,zero,812d60 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812c74:	e0bffc17 	ldw	r2,-16(fp)
  812c78:	10800903 	ldbu	r2,36(r2)
  812c7c:	10803fcc 	andi	r2,r2,255
  812c80:	1080201c 	xori	r2,r2,128
  812c84:	10bfe004 	addi	r2,r2,-128
  812c88:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812c8c:	e0bff717 	ldw	r2,-36(fp)
  812c90:	1004c03a 	cmpne	r2,r2,zero
  812c94:	1000031e 	bne	r2,zero,812ca4 <altera_avalon_lcd_16207_write+0xa0>
  812c98:	e0bff807 	ldb	r2,-32(fp)
  812c9c:	108016d8 	cmpnei	r2,r2,91
  812ca0:	1000111e 	bne	r2,zero,812ce8 <altera_avalon_lcd_16207_write+0xe4>
  812ca4:	e0bff717 	ldw	r2,-36(fp)
  812ca8:	1005003a 	cmpeq	r2,r2,zero
  812cac:	10001a1e 	bne	r2,zero,812d18 <altera_avalon_lcd_16207_write+0x114>
  812cb0:	e0bff807 	ldb	r2,-32(fp)
  812cb4:	1007883a 	mov	r3,r2
  812cb8:	00802074 	movhi	r2,129
  812cbc:	109c4804 	addi	r2,r2,28960
  812cc0:	10800017 	ldw	r2,0(r2)
  812cc4:	1885883a 	add	r2,r3,r2
  812cc8:	10800003 	ldbu	r2,0(r2)
  812ccc:	10803fcc 	andi	r2,r2,255
  812cd0:	1080010c 	andi	r2,r2,4
  812cd4:	1004c03a 	cmpne	r2,r2,zero
  812cd8:	10000f1e 	bne	r2,zero,812d18 <altera_avalon_lcd_16207_write+0x114>
  812cdc:	e0bff807 	ldb	r2,-32(fp)
  812ce0:	10800ee0 	cmpeqi	r2,r2,59
  812ce4:	10000c1e 	bne	r2,zero,812d18 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812ce8:	e0fff717 	ldw	r3,-36(fp)
  812cec:	e0bffc17 	ldw	r2,-16(fp)
  812cf0:	1885883a 	add	r2,r3,r2
  812cf4:	10800a04 	addi	r2,r2,40
  812cf8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812cfc:	e17ff807 	ldb	r5,-32(fp)
  812d00:	e13ffc17 	ldw	r4,-16(fp)
  812d04:	08129340 	call	812934 <lcd_handle_escape>

        sp->esccount = -1;
  812d08:	e0fffc17 	ldw	r3,-16(fp)
  812d0c:	00bfffc4 	movi	r2,-1
  812d10:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812d14:	00006c06 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812d18:	e0bffc17 	ldw	r2,-16(fp)
  812d1c:	10800903 	ldbu	r2,36(r2)
  812d20:	10803fcc 	andi	r2,r2,255
  812d24:	108001e8 	cmpgeui	r2,r2,7
  812d28:	1000671e 	bne	r2,zero,812ec8 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812d2c:	e0fff717 	ldw	r3,-36(fp)
  812d30:	e0bffc17 	ldw	r2,-16(fp)
  812d34:	1885883a 	add	r2,r3,r2
  812d38:	10c00a04 	addi	r3,r2,40
  812d3c:	e0bff803 	ldbu	r2,-32(fp)
  812d40:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812d44:	e0bffc17 	ldw	r2,-16(fp)
  812d48:	10800903 	ldbu	r2,36(r2)
  812d4c:	10800044 	addi	r2,r2,1
  812d50:	1007883a 	mov	r3,r2
  812d54:	e0bffc17 	ldw	r2,-16(fp)
  812d58:	10c00905 	stb	r3,36(r2)
  812d5c:	00005a06 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812d60:	e0bff807 	ldb	r2,-32(fp)
  812d64:	108006d8 	cmpnei	r2,r2,27
  812d68:	1000031e 	bne	r2,zero,812d78 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812d6c:	e0bffc17 	ldw	r2,-16(fp)
  812d70:	10000905 	stb	zero,36(r2)
  812d74:	00005406 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812d78:	e0bff807 	ldb	r2,-32(fp)
  812d7c:	10800358 	cmpnei	r2,r2,13
  812d80:	1000031e 	bne	r2,zero,812d90 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812d84:	e0bffc17 	ldw	r2,-16(fp)
  812d88:	10000845 	stb	zero,33(r2)
  812d8c:	00004e06 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812d90:	e0bff807 	ldb	r2,-32(fp)
  812d94:	10800298 	cmpnei	r2,r2,10
  812d98:	1000101e 	bne	r2,zero,812ddc <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812d9c:	e0bffc17 	ldw	r2,-16(fp)
  812da0:	10000845 	stb	zero,33(r2)
      sp->y++;
  812da4:	e0bffc17 	ldw	r2,-16(fp)
  812da8:	10800883 	ldbu	r2,34(r2)
  812dac:	10800044 	addi	r2,r2,1
  812db0:	1007883a 	mov	r3,r2
  812db4:	e0bffc17 	ldw	r2,-16(fp)
  812db8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812dbc:	e0bffc17 	ldw	r2,-16(fp)
  812dc0:	10800883 	ldbu	r2,34(r2)
  812dc4:	10803fcc 	andi	r2,r2,255
  812dc8:	108000f0 	cmpltui	r2,r2,3
  812dcc:	10003e1e 	bne	r2,zero,812ec8 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812dd0:	e13ffc17 	ldw	r4,-16(fp)
  812dd4:	081286c0 	call	81286c <lcd_scroll_up>
  812dd8:	00003b06 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812ddc:	e0bff807 	ldb	r2,-32(fp)
  812de0:	10800218 	cmpnei	r2,r2,8
  812de4:	10000c1e 	bne	r2,zero,812e18 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812de8:	e0bffc17 	ldw	r2,-16(fp)
  812dec:	10800843 	ldbu	r2,33(r2)
  812df0:	10803fcc 	andi	r2,r2,255
  812df4:	1005003a 	cmpeq	r2,r2,zero
  812df8:	1000331e 	bne	r2,zero,812ec8 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812dfc:	e0bffc17 	ldw	r2,-16(fp)
  812e00:	10800843 	ldbu	r2,33(r2)
  812e04:	10bfffc4 	addi	r2,r2,-1
  812e08:	1007883a 	mov	r3,r2
  812e0c:	e0bffc17 	ldw	r2,-16(fp)
  812e10:	10c00845 	stb	r3,33(r2)
  812e14:	00002c06 	br	812ec8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812e18:	e0bff807 	ldb	r2,-32(fp)
  812e1c:	1007883a 	mov	r3,r2
  812e20:	00802074 	movhi	r2,129
  812e24:	109c4804 	addi	r2,r2,28960
  812e28:	10800017 	ldw	r2,0(r2)
  812e2c:	1885883a 	add	r2,r3,r2
  812e30:	10800003 	ldbu	r2,0(r2)
  812e34:	10803fcc 	andi	r2,r2,255
  812e38:	1080201c 	xori	r2,r2,128
  812e3c:	10bfe004 	addi	r2,r2,-128
  812e40:	108025cc 	andi	r2,r2,151
  812e44:	1005003a 	cmpeq	r2,r2,zero
  812e48:	10001f1e 	bne	r2,zero,812ec8 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812e4c:	e0bffc17 	ldw	r2,-16(fp)
  812e50:	10800883 	ldbu	r2,34(r2)
  812e54:	10803fcc 	andi	r2,r2,255
  812e58:	108000b0 	cmpltui	r2,r2,2
  812e5c:	1000021e 	bne	r2,zero,812e68 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812e60:	e13ffc17 	ldw	r4,-16(fp)
  812e64:	081286c0 	call	81286c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812e68:	e0bffc17 	ldw	r2,-16(fp)
  812e6c:	10800843 	ldbu	r2,33(r2)
  812e70:	10803fcc 	andi	r2,r2,255
  812e74:	10801428 	cmpgeui	r2,r2,80
  812e78:	10000d1e 	bne	r2,zero,812eb0 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812e7c:	e0bffc17 	ldw	r2,-16(fp)
  812e80:	10800883 	ldbu	r2,34(r2)
  812e84:	11003fcc 	andi	r4,r2,255
  812e88:	e0bffc17 	ldw	r2,-16(fp)
  812e8c:	10800843 	ldbu	r2,33(r2)
  812e90:	11403fcc 	andi	r5,r2,255
  812e94:	e0fffc17 	ldw	r3,-16(fp)
  812e98:	20801924 	muli	r2,r4,100
  812e9c:	10c5883a 	add	r2,r2,r3
  812ea0:	1145883a 	add	r2,r2,r5
  812ea4:	10c01004 	addi	r3,r2,64
  812ea8:	e0bff803 	ldbu	r2,-32(fp)
  812eac:	18800005 	stb	r2,0(r3)

      sp->x++;
  812eb0:	e0bffc17 	ldw	r2,-16(fp)
  812eb4:	10800843 	ldbu	r2,33(r2)
  812eb8:	10800044 	addi	r2,r2,1
  812ebc:	1007883a 	mov	r3,r2
  812ec0:	e0bffc17 	ldw	r2,-16(fp)
  812ec4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812ec8:	e0bffd17 	ldw	r2,-12(fp)
  812ecc:	10800044 	addi	r2,r2,1
  812ed0:	e0bffd15 	stw	r2,-12(fp)
  812ed4:	e0fffd17 	ldw	r3,-12(fp)
  812ed8:	e0bffb17 	ldw	r2,-20(fp)
  812edc:	18bf5b36 	bltu	r3,r2,812c4c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812ee0:	00800404 	movi	r2,16
  812ee4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ee8:	e03ffa15 	stw	zero,-24(fp)
  812eec:	00003606 	br	812fc8 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812ef0:	00801404 	movi	r2,80
  812ef4:	e0bff615 	stw	r2,-40(fp)
  812ef8:	00001106 	br	812f40 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812efc:	e13ffa17 	ldw	r4,-24(fp)
  812f00:	e0bff617 	ldw	r2,-40(fp)
  812f04:	117fffc4 	addi	r5,r2,-1
  812f08:	e0fffc17 	ldw	r3,-16(fp)
  812f0c:	20801924 	muli	r2,r4,100
  812f10:	10c5883a 	add	r2,r2,r3
  812f14:	1145883a 	add	r2,r2,r5
  812f18:	10801004 	addi	r2,r2,64
  812f1c:	10800003 	ldbu	r2,0(r2)
  812f20:	10803fcc 	andi	r2,r2,255
  812f24:	1080201c 	xori	r2,r2,128
  812f28:	10bfe004 	addi	r2,r2,-128
  812f2c:	10800818 	cmpnei	r2,r2,32
  812f30:	1000061e 	bne	r2,zero,812f4c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f34:	e0bff617 	ldw	r2,-40(fp)
  812f38:	10bfffc4 	addi	r2,r2,-1
  812f3c:	e0bff615 	stw	r2,-40(fp)
  812f40:	e0bff617 	ldw	r2,-40(fp)
  812f44:	10800048 	cmpgei	r2,r2,1
  812f48:	103fec1e 	bne	r2,zero,812efc <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812f4c:	e0bff617 	ldw	r2,-40(fp)
  812f50:	10800448 	cmpgei	r2,r2,17
  812f54:	1000031e 	bne	r2,zero,812f64 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812f58:	00800404 	movi	r2,16
  812f5c:	e0bff615 	stw	r2,-40(fp)
  812f60:	00000306 	br	812f70 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812f64:	e0bff617 	ldw	r2,-40(fp)
  812f68:	10800044 	addi	r2,r2,1
  812f6c:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812f70:	e13ffa17 	ldw	r4,-24(fp)
  812f74:	e0bff617 	ldw	r2,-40(fp)
  812f78:	100b883a 	mov	r5,r2
  812f7c:	e0fffc17 	ldw	r3,-16(fp)
  812f80:	20801924 	muli	r2,r4,100
  812f84:	10c5883a 	add	r2,r2,r3
  812f88:	10802404 	addi	r2,r2,144
  812f8c:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812f90:	e0fff917 	ldw	r3,-28(fp)
  812f94:	e0bff617 	ldw	r2,-40(fp)
  812f98:	1880020e 	bge	r3,r2,812fa4 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812f9c:	e0bff617 	ldw	r2,-40(fp)
  812fa0:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812fa4:	e0bffa17 	ldw	r2,-24(fp)
  812fa8:	e0fffc17 	ldw	r3,-16(fp)
  812fac:	10801924 	muli	r2,r2,100
  812fb0:	10c5883a 	add	r2,r2,r3
  812fb4:	10802404 	addi	r2,r2,144
  812fb8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812fbc:	e0bffa17 	ldw	r2,-24(fp)
  812fc0:	10800044 	addi	r2,r2,1
  812fc4:	e0bffa15 	stw	r2,-24(fp)
  812fc8:	e0bffa17 	ldw	r2,-24(fp)
  812fcc:	10800090 	cmplti	r2,r2,2
  812fd0:	103fc71e 	bne	r2,zero,812ef0 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812fd4:	e0bff917 	ldw	r2,-28(fp)
  812fd8:	10800448 	cmpgei	r2,r2,17
  812fdc:	1000031e 	bne	r2,zero,812fec <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  812fe0:	e0bffc17 	ldw	r2,-16(fp)
  812fe4:	10000985 	stb	zero,38(r2)
  812fe8:	00002d06 	br	8130a0 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  812fec:	e0bff917 	ldw	r2,-28(fp)
  812ff0:	1085883a 	add	r2,r2,r2
  812ff4:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  812ff8:	e0bff917 	ldw	r2,-28(fp)
  812ffc:	1007883a 	mov	r3,r2
  813000:	e0bffc17 	ldw	r2,-16(fp)
  813004:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813008:	e03ffa15 	stw	zero,-24(fp)
  81300c:	00002106 	br	813094 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  813010:	e0bffa17 	ldw	r2,-24(fp)
  813014:	e0fffc17 	ldw	r3,-16(fp)
  813018:	10801924 	muli	r2,r2,100
  81301c:	10c5883a 	add	r2,r2,r3
  813020:	10802404 	addi	r2,r2,144
  813024:	10800043 	ldbu	r2,1(r2)
  813028:	10803fcc 	andi	r2,r2,255
  81302c:	1080201c 	xori	r2,r2,128
  813030:	10bfe004 	addi	r2,r2,-128
  813034:	10800450 	cmplti	r2,r2,17
  813038:	1000131e 	bne	r2,zero,813088 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81303c:	e43ffa17 	ldw	r16,-24(fp)
  813040:	e0bffa17 	ldw	r2,-24(fp)
  813044:	e0fffc17 	ldw	r3,-16(fp)
  813048:	10801924 	muli	r2,r2,100
  81304c:	10c5883a 	add	r2,r2,r3
  813050:	10802404 	addi	r2,r2,144
  813054:	10800043 	ldbu	r2,1(r2)
  813058:	10803fcc 	andi	r2,r2,255
  81305c:	1080201c 	xori	r2,r2,128
  813060:	10bfe004 	addi	r2,r2,-128
  813064:	1008923a 	slli	r4,r2,8
  813068:	e17ff917 	ldw	r5,-28(fp)
  81306c:	080fcc80 	call	80fcc8 <__divsi3>
  813070:	1009883a 	mov	r4,r2
  813074:	e0fffc17 	ldw	r3,-16(fp)
  813078:	80801924 	muli	r2,r16,100
  81307c:	10c5883a 	add	r2,r2,r3
  813080:	10802404 	addi	r2,r2,144
  813084:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813088:	e0bffa17 	ldw	r2,-24(fp)
  81308c:	10800044 	addi	r2,r2,1
  813090:	e0bffa15 	stw	r2,-24(fp)
  813094:	e0bffa17 	ldw	r2,-24(fp)
  813098:	10800090 	cmplti	r2,r2,2
  81309c:	103fdc1e 	bne	r2,zero,813010 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8130a0:	e0bffc17 	ldw	r2,-16(fp)
  8130a4:	10800943 	ldbu	r2,37(r2)
  8130a8:	10803fcc 	andi	r2,r2,255
  8130ac:	1080201c 	xori	r2,r2,128
  8130b0:	10bfe004 	addi	r2,r2,-128
  8130b4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8130b8:	e13ffc17 	ldw	r4,-16(fp)
  8130bc:	08126800 	call	812680 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8130c0:	e0bffc17 	ldw	r2,-16(fp)
  8130c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8130c8:	e0bffc17 	ldw	r2,-16(fp)
  8130cc:	10800943 	ldbu	r2,37(r2)
  8130d0:	10c03fcc 	andi	r3,r2,255
  8130d4:	18c0201c 	xori	r3,r3,128
  8130d8:	18ffe004 	addi	r3,r3,-128
  8130dc:	e0bff517 	ldw	r2,-44(fp)
  8130e0:	18800426 	beq	r3,r2,8130f4 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8130e4:	e0fffc17 	ldw	r3,-16(fp)
  8130e8:	00800044 	movi	r2,1
  8130ec:	188009c5 	stb	r2,39(r3)
  }
  8130f0:	003feb06 	br	8130a0 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8130f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8130f8:	e037883a 	mov	sp,fp
  8130fc:	dfc00217 	ldw	ra,8(sp)
  813100:	df000117 	ldw	fp,4(sp)
  813104:	dc000017 	ldw	r16,0(sp)
  813108:	dec00304 	addi	sp,sp,12
  81310c:	f800283a 	ret

00813110 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  813110:	defffc04 	addi	sp,sp,-16
  813114:	dfc00315 	stw	ra,12(sp)
  813118:	df000215 	stw	fp,8(sp)
  81311c:	df000204 	addi	fp,sp,8
  813120:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  813124:	e0bfff17 	ldw	r2,-4(fp)
  813128:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81312c:	e0bffe17 	ldw	r2,-8(fp)
  813130:	10800943 	ldbu	r2,37(r2)
  813134:	10803fcc 	andi	r2,r2,255
  813138:	1080201c 	xori	r2,r2,128
  81313c:	10bfe004 	addi	r2,r2,-128
  813140:	10c00044 	addi	r3,r2,1
  813144:	e0bffe17 	ldw	r2,-8(fp)
  813148:	10800983 	ldbu	r2,38(r2)
  81314c:	10803fcc 	andi	r2,r2,255
  813150:	1080201c 	xori	r2,r2,128
  813154:	10bfe004 	addi	r2,r2,-128
  813158:	18800316 	blt	r3,r2,813168 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  81315c:	e0bffe17 	ldw	r2,-8(fp)
  813160:	10000945 	stb	zero,37(r2)
  813164:	00000606 	br	813180 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  813168:	e0bffe17 	ldw	r2,-8(fp)
  81316c:	10800943 	ldbu	r2,37(r2)
  813170:	10800044 	addi	r2,r2,1
  813174:	1007883a 	mov	r3,r2
  813178:	e0bffe17 	ldw	r2,-8(fp)
  81317c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  813180:	e0bffe17 	ldw	r2,-8(fp)
  813184:	10800983 	ldbu	r2,38(r2)
  813188:	10803fcc 	andi	r2,r2,255
  81318c:	1080201c 	xori	r2,r2,128
  813190:	10bfe004 	addi	r2,r2,-128
  813194:	10800050 	cmplti	r2,r2,1
  813198:	1000091e 	bne	r2,zero,8131c0 <alt_lcd_16207_timeout+0xb0>
  81319c:	e0bffe17 	ldw	r2,-8(fp)
  8131a0:	108009c3 	ldbu	r2,39(r2)
  8131a4:	10803fcc 	andi	r2,r2,255
  8131a8:	1080201c 	xori	r2,r2,128
  8131ac:	10bfe004 	addi	r2,r2,-128
  8131b0:	1004c03a 	cmpne	r2,r2,zero
  8131b4:	1000021e 	bne	r2,zero,8131c0 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8131b8:	e13ffe17 	ldw	r4,-8(fp)
  8131bc:	08126800 	call	812680 <lcd_repaint_screen>

  return sp->period;
  8131c0:	e0bffe17 	ldw	r2,-8(fp)
  8131c4:	10800717 	ldw	r2,28(r2)
}
  8131c8:	e037883a 	mov	sp,fp
  8131cc:	dfc00117 	ldw	ra,4(sp)
  8131d0:	df000017 	ldw	fp,0(sp)
  8131d4:	dec00204 	addi	sp,sp,8
  8131d8:	f800283a 	ret

008131dc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8131dc:	defffc04 	addi	sp,sp,-16
  8131e0:	dfc00315 	stw	ra,12(sp)
  8131e4:	df000215 	stw	fp,8(sp)
  8131e8:	df000204 	addi	fp,sp,8
  8131ec:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8131f0:	e0bfff17 	ldw	r2,-4(fp)
  8131f4:	10800017 	ldw	r2,0(r2)
  8131f8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8131fc:	e0bfff17 	ldw	r2,-4(fp)
  813200:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813204:	010ea604 	movi	r4,15000
  813208:	08146e40 	call	8146e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81320c:	e0bffe17 	ldw	r2,-8(fp)
  813210:	1007883a 	mov	r3,r2
  813214:	00800c04 	movi	r2,48
  813218:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81321c:	01040104 	movi	r4,4100
  813220:	08146e40 	call	8146e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813224:	e0bffe17 	ldw	r2,-8(fp)
  813228:	1007883a 	mov	r3,r2
  81322c:	00800c04 	movi	r2,48
  813230:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813234:	0100fa04 	movi	r4,1000
  813238:	08146e40 	call	8146e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81323c:	e0bffe17 	ldw	r2,-8(fp)
  813240:	1007883a 	mov	r3,r2
  813244:	00800c04 	movi	r2,48
  813248:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  81324c:	e13fff17 	ldw	r4,-4(fp)
  813250:	01400e04 	movi	r5,56
  813254:	08124300 	call	812430 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  813258:	e13fff17 	ldw	r4,-4(fp)
  81325c:	01400204 	movi	r5,8
  813260:	08124300 	call	812430 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  813264:	e13fff17 	ldw	r4,-4(fp)
  813268:	08125bc0 	call	8125bc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81326c:	e13fff17 	ldw	r4,-4(fp)
  813270:	01400184 	movi	r5,6
  813274:	08124300 	call	812430 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  813278:	e13fff17 	ldw	r4,-4(fp)
  81327c:	01400304 	movi	r5,12
  813280:	08124300 	call	812430 <lcd_write_command>

  sp->esccount = -1;
  813284:	e0ffff17 	ldw	r3,-4(fp)
  813288:	00bfffc4 	movi	r2,-1
  81328c:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  813290:	e0bfff17 	ldw	r2,-4(fp)
  813294:	11000a04 	addi	r4,r2,40
  813298:	000b883a 	mov	r5,zero
  81329c:	01800204 	movi	r6,8
  8132a0:	08034c00 	call	8034c0 <memset>

  sp->scrollpos = 0;
  8132a4:	e0bfff17 	ldw	r2,-4(fp)
  8132a8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8132ac:	e0bfff17 	ldw	r2,-4(fp)
  8132b0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8132b4:	e0bfff17 	ldw	r2,-4(fp)
  8132b8:	100009c5 	stb	zero,39(r2)
  8132bc:	008020b4 	movhi	r2,130
  8132c0:	10a3a804 	addi	r2,r2,-29024
  8132c4:	10800017 	ldw	r2,0(r2)
  8132c8:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8132cc:	01400284 	movi	r5,10
  8132d0:	080fd880 	call	80fd88 <__udivsi3>
  8132d4:	1007883a 	mov	r3,r2
  8132d8:	e0bfff17 	ldw	r2,-4(fp)
  8132dc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8132e0:	e0bfff17 	ldw	r2,-4(fp)
  8132e4:	11000104 	addi	r4,r2,4
  8132e8:	e0bfff17 	ldw	r2,-4(fp)
  8132ec:	10800717 	ldw	r2,28(r2)
  8132f0:	100b883a 	mov	r5,r2
  8132f4:	01802074 	movhi	r6,129
  8132f8:	318c4404 	addi	r6,r6,12560
  8132fc:	e1ffff17 	ldw	r7,-4(fp)
  813300:	08106280 	call	810628 <alt_alarm_start>
}
  813304:	e037883a 	mov	sp,fp
  813308:	dfc00117 	ldw	ra,4(sp)
  81330c:	df000017 	ldw	fp,0(sp)
  813310:	dec00204 	addi	sp,sp,8
  813314:	f800283a 	ret

00813318 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813318:	defffa04 	addi	sp,sp,-24
  81331c:	dfc00515 	stw	ra,20(sp)
  813320:	df000415 	stw	fp,16(sp)
  813324:	df000404 	addi	fp,sp,16
  813328:	e13ffd15 	stw	r4,-12(fp)
  81332c:	e17ffe15 	stw	r5,-8(fp)
  813330:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813334:	e0bffd17 	ldw	r2,-12(fp)
  813338:	10800017 	ldw	r2,0(r2)
  81333c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  813340:	e0bffc17 	ldw	r2,-16(fp)
  813344:	11000a04 	addi	r4,r2,40
  813348:	e0bffd17 	ldw	r2,-12(fp)
  81334c:	11c00217 	ldw	r7,8(r2)
  813350:	e17ffe17 	ldw	r5,-8(fp)
  813354:	e1bfff17 	ldw	r6,-4(fp)
  813358:	0812c040 	call	812c04 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81335c:	e037883a 	mov	sp,fp
  813360:	dfc00117 	ldw	ra,4(sp)
  813364:	df000017 	ldw	fp,0(sp)
  813368:	dec00204 	addi	sp,sp,8
  81336c:	f800283a 	ret

00813370 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813370:	defffa04 	addi	sp,sp,-24
  813374:	dfc00515 	stw	ra,20(sp)
  813378:	df000415 	stw	fp,16(sp)
  81337c:	df000404 	addi	fp,sp,16
  813380:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813384:	e0bfff17 	ldw	r2,-4(fp)
  813388:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81338c:	e0bfff17 	ldw	r2,-4(fp)
  813390:	10800104 	addi	r2,r2,4
  813394:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813398:	0005303a 	rdctl	r2,status
  81339c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133a0:	e0fffd17 	ldw	r3,-12(fp)
  8133a4:	00bfff84 	movi	r2,-2
  8133a8:	1884703a 	and	r2,r3,r2
  8133ac:	1001703a 	wrctl	status,r2
  
  return context;
  8133b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8133b4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8133b8:	08115f80 	call	8115f8 <alt_tick>
  8133bc:	e0bffe17 	ldw	r2,-8(fp)
  8133c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133c4:	e0bffc17 	ldw	r2,-16(fp)
  8133c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8133cc:	e037883a 	mov	sp,fp
  8133d0:	dfc00117 	ldw	ra,4(sp)
  8133d4:	df000017 	ldw	fp,0(sp)
  8133d8:	dec00204 	addi	sp,sp,8
  8133dc:	f800283a 	ret

008133e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8133e0:	defff804 	addi	sp,sp,-32
  8133e4:	dfc00715 	stw	ra,28(sp)
  8133e8:	df000615 	stw	fp,24(sp)
  8133ec:	df000604 	addi	fp,sp,24
  8133f0:	e13ffc15 	stw	r4,-16(fp)
  8133f4:	e17ffd15 	stw	r5,-12(fp)
  8133f8:	e1bffe15 	stw	r6,-8(fp)
  8133fc:	e1ffff15 	stw	r7,-4(fp)
  813400:	e0bfff17 	ldw	r2,-4(fp)
  813404:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813408:	008020b4 	movhi	r2,130
  81340c:	10a3a804 	addi	r2,r2,-29024
  813410:	10800017 	ldw	r2,0(r2)
  813414:	1004c03a 	cmpne	r2,r2,zero
  813418:	1000041e 	bne	r2,zero,81342c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81341c:	00c020b4 	movhi	r3,130
  813420:	18e3a804 	addi	r3,r3,-29024
  813424:	e0bffb17 	ldw	r2,-20(fp)
  813428:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81342c:	e0bffc17 	ldw	r2,-16(fp)
  813430:	10800104 	addi	r2,r2,4
  813434:	1007883a 	mov	r3,r2
  813438:	008001c4 	movi	r2,7
  81343c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813440:	d8000015 	stw	zero,0(sp)
  813444:	e13ffd17 	ldw	r4,-12(fp)
  813448:	e17ffe17 	ldw	r5,-8(fp)
  81344c:	01802074 	movhi	r6,129
  813450:	318cdc04 	addi	r6,r6,13168
  813454:	e1fffc17 	ldw	r7,-16(fp)
  813458:	08142dc0 	call	8142dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81345c:	e037883a 	mov	sp,fp
  813460:	dfc00117 	ldw	ra,4(sp)
  813464:	df000017 	ldw	fp,0(sp)
  813468:	dec00204 	addi	sp,sp,8
  81346c:	f800283a 	ret

00813470 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813470:	defffa04 	addi	sp,sp,-24
  813474:	dfc00515 	stw	ra,20(sp)
  813478:	df000415 	stw	fp,16(sp)
  81347c:	df000404 	addi	fp,sp,16
  813480:	e13ffd15 	stw	r4,-12(fp)
  813484:	e17ffe15 	stw	r5,-8(fp)
  813488:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81348c:	e0bffd17 	ldw	r2,-12(fp)
  813490:	10800017 	ldw	r2,0(r2)
  813494:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  813498:	e0bffc17 	ldw	r2,-16(fp)
  81349c:	11000a04 	addi	r4,r2,40
  8134a0:	e0bffd17 	ldw	r2,-12(fp)
  8134a4:	11c00217 	ldw	r7,8(r2)
  8134a8:	e17ffe17 	ldw	r5,-8(fp)
  8134ac:	e1bfff17 	ldw	r6,-4(fp)
  8134b0:	08139680 	call	813968 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8134b4:	e037883a 	mov	sp,fp
  8134b8:	dfc00117 	ldw	ra,4(sp)
  8134bc:	df000017 	ldw	fp,0(sp)
  8134c0:	dec00204 	addi	sp,sp,8
  8134c4:	f800283a 	ret

008134c8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8134c8:	defffa04 	addi	sp,sp,-24
  8134cc:	dfc00515 	stw	ra,20(sp)
  8134d0:	df000415 	stw	fp,16(sp)
  8134d4:	df000404 	addi	fp,sp,16
  8134d8:	e13ffd15 	stw	r4,-12(fp)
  8134dc:	e17ffe15 	stw	r5,-8(fp)
  8134e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8134e4:	e0bffd17 	ldw	r2,-12(fp)
  8134e8:	10800017 	ldw	r2,0(r2)
  8134ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8134f0:	e0bffc17 	ldw	r2,-16(fp)
  8134f4:	11000a04 	addi	r4,r2,40
  8134f8:	e0bffd17 	ldw	r2,-12(fp)
  8134fc:	11c00217 	ldw	r7,8(r2)
  813500:	e17ffe17 	ldw	r5,-8(fp)
  813504:	e1bfff17 	ldw	r6,-4(fp)
  813508:	0813bf80 	call	813bf8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  81350c:	e037883a 	mov	sp,fp
  813510:	dfc00117 	ldw	ra,4(sp)
  813514:	df000017 	ldw	fp,0(sp)
  813518:	dec00204 	addi	sp,sp,8
  81351c:	f800283a 	ret

00813520 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  813520:	defffc04 	addi	sp,sp,-16
  813524:	dfc00315 	stw	ra,12(sp)
  813528:	df000215 	stw	fp,8(sp)
  81352c:	df000204 	addi	fp,sp,8
  813530:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813534:	e0bfff17 	ldw	r2,-4(fp)
  813538:	10800017 	ldw	r2,0(r2)
  81353c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  813540:	e0bffe17 	ldw	r2,-8(fp)
  813544:	11000a04 	addi	r4,r2,40
  813548:	e0bfff17 	ldw	r2,-4(fp)
  81354c:	11400217 	ldw	r5,8(r2)
  813550:	08139080 	call	813908 <altera_avalon_uart_close>
}
  813554:	e037883a 	mov	sp,fp
  813558:	dfc00117 	ldw	ra,4(sp)
  81355c:	df000017 	ldw	fp,0(sp)
  813560:	dec00204 	addi	sp,sp,8
  813564:	f800283a 	ret

00813568 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  813568:	defff704 	addi	sp,sp,-36
  81356c:	dfc00815 	stw	ra,32(sp)
  813570:	df000715 	stw	fp,28(sp)
  813574:	df000704 	addi	fp,sp,28
  813578:	e13ffc15 	stw	r4,-16(fp)
  81357c:	e17ffd15 	stw	r5,-12(fp)
  813580:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  813584:	e0bffc17 	ldw	r2,-16(fp)
  813588:	10800017 	ldw	r2,0(r2)
  81358c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  813590:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813594:	1004c03a 	cmpne	r2,r2,zero
  813598:	1000061e 	bne	r2,zero,8135b4 <altera_avalon_uart_init+0x4c>
  81359c:	0005883a 	mov	r2,zero
  8135a0:	1004c03a 	cmpne	r2,r2,zero
  8135a4:	1000031e 	bne	r2,zero,8135b4 <altera_avalon_uart_init+0x4c>
  8135a8:	0005883a 	mov	r2,zero
  8135ac:	1005003a 	cmpeq	r2,r2,zero
  8135b0:	1000031e 	bne	r2,zero,8135c0 <altera_avalon_uart_init+0x58>
  8135b4:	00800044 	movi	r2,1
  8135b8:	e0bfff15 	stw	r2,-4(fp)
  8135bc:	00000106 	br	8135c4 <altera_avalon_uart_init+0x5c>
  8135c0:	e03fff15 	stw	zero,-4(fp)
  8135c4:	e0bfff17 	ldw	r2,-4(fp)
  8135c8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8135cc:	e0bffa17 	ldw	r2,-24(fp)
  8135d0:	1004c03a 	cmpne	r2,r2,zero
  8135d4:	1000111e 	bne	r2,zero,81361c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8135d8:	e0fffc17 	ldw	r3,-16(fp)
  8135dc:	00832004 	movi	r2,3200
  8135e0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8135e4:	e0bffb17 	ldw	r2,-20(fp)
  8135e8:	11000304 	addi	r4,r2,12
  8135ec:	e0bffc17 	ldw	r2,-16(fp)
  8135f0:	10800117 	ldw	r2,4(r2)
  8135f4:	1007883a 	mov	r3,r2
  8135f8:	2005883a 	mov	r2,r4
  8135fc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  813600:	d8000015 	stw	zero,0(sp)
  813604:	e13ffd17 	ldw	r4,-12(fp)
  813608:	e17ffe17 	ldw	r5,-8(fp)
  81360c:	01802074 	movhi	r6,129
  813610:	318d8c04 	addi	r6,r6,13872
  813614:	e1fffc17 	ldw	r7,-16(fp)
  813618:	08142dc0 	call	8142dc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81361c:	e037883a 	mov	sp,fp
  813620:	dfc00117 	ldw	ra,4(sp)
  813624:	df000017 	ldw	fp,0(sp)
  813628:	dec00204 	addi	sp,sp,8
  81362c:	f800283a 	ret

00813630 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  813630:	defffa04 	addi	sp,sp,-24
  813634:	dfc00515 	stw	ra,20(sp)
  813638:	df000415 	stw	fp,16(sp)
  81363c:	df000404 	addi	fp,sp,16
  813640:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  813644:	e0bfff17 	ldw	r2,-4(fp)
  813648:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  81364c:	e0bffd17 	ldw	r2,-12(fp)
  813650:	10800017 	ldw	r2,0(r2)
  813654:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  813658:	e0bffc17 	ldw	r2,-16(fp)
  81365c:	10800204 	addi	r2,r2,8
  813660:	10800037 	ldwio	r2,0(r2)
  813664:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  813668:	e0bffc17 	ldw	r2,-16(fp)
  81366c:	10800204 	addi	r2,r2,8
  813670:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  813674:	e0bffc17 	ldw	r2,-16(fp)
  813678:	10800204 	addi	r2,r2,8
  81367c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  813680:	e0bffe17 	ldw	r2,-8(fp)
  813684:	1080200c 	andi	r2,r2,128
  813688:	1005003a 	cmpeq	r2,r2,zero
  81368c:	1000031e 	bne	r2,zero,81369c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  813690:	e13ffd17 	ldw	r4,-12(fp)
  813694:	e17ffe17 	ldw	r5,-8(fp)
  813698:	08136cc0 	call	8136cc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81369c:	e0bffe17 	ldw	r2,-8(fp)
  8136a0:	1081100c 	andi	r2,r2,1088
  8136a4:	1005003a 	cmpeq	r2,r2,zero
  8136a8:	1000031e 	bne	r2,zero,8136b8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8136ac:	e13ffd17 	ldw	r4,-12(fp)
  8136b0:	e17ffe17 	ldw	r5,-8(fp)
  8136b4:	08137ac0 	call	8137ac <altera_avalon_uart_txirq>
  }
  

}
  8136b8:	e037883a 	mov	sp,fp
  8136bc:	dfc00117 	ldw	ra,4(sp)
  8136c0:	df000017 	ldw	fp,0(sp)
  8136c4:	dec00204 	addi	sp,sp,8
  8136c8:	f800283a 	ret

008136cc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8136cc:	defffc04 	addi	sp,sp,-16
  8136d0:	df000315 	stw	fp,12(sp)
  8136d4:	df000304 	addi	fp,sp,12
  8136d8:	e13ffe15 	stw	r4,-8(fp)
  8136dc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8136e0:	e0bfff17 	ldw	r2,-4(fp)
  8136e4:	108000cc 	andi	r2,r2,3
  8136e8:	1004c03a 	cmpne	r2,r2,zero
  8136ec:	10002b1e 	bne	r2,zero,81379c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8136f0:	e0bffe17 	ldw	r2,-8(fp)
  8136f4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8136f8:	e0bffe17 	ldw	r2,-8(fp)
  8136fc:	10800317 	ldw	r2,12(r2)
  813700:	10800044 	addi	r2,r2,1
  813704:	10800fcc 	andi	r2,r2,63
  813708:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81370c:	e0bffe17 	ldw	r2,-8(fp)
  813710:	11000317 	ldw	r4,12(r2)
  813714:	e0bffe17 	ldw	r2,-8(fp)
  813718:	10800017 	ldw	r2,0(r2)
  81371c:	10800037 	ldwio	r2,0(r2)
  813720:	1007883a 	mov	r3,r2
  813724:	e0bffe17 	ldw	r2,-8(fp)
  813728:	2085883a 	add	r2,r4,r2
  81372c:	10800704 	addi	r2,r2,28
  813730:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  813734:	e0fffe17 	ldw	r3,-8(fp)
  813738:	e0bffd17 	ldw	r2,-12(fp)
  81373c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813740:	e0bffe17 	ldw	r2,-8(fp)
  813744:	10800317 	ldw	r2,12(r2)
  813748:	10800044 	addi	r2,r2,1
  81374c:	10800fcc 	andi	r2,r2,63
  813750:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  813754:	e0bffe17 	ldw	r2,-8(fp)
  813758:	10c00217 	ldw	r3,8(r2)
  81375c:	e0bffd17 	ldw	r2,-12(fp)
  813760:	18800e1e 	bne	r3,r2,81379c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813764:	e0bffe17 	ldw	r2,-8(fp)
  813768:	10c00117 	ldw	r3,4(r2)
  81376c:	00bfdfc4 	movi	r2,-129
  813770:	1886703a 	and	r3,r3,r2
  813774:	e0bffe17 	ldw	r2,-8(fp)
  813778:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  81377c:	e0bffe17 	ldw	r2,-8(fp)
  813780:	10800017 	ldw	r2,0(r2)
  813784:	11000304 	addi	r4,r2,12
  813788:	e0bffe17 	ldw	r2,-8(fp)
  81378c:	10800117 	ldw	r2,4(r2)
  813790:	1007883a 	mov	r3,r2
  813794:	2005883a 	mov	r2,r4
  813798:	10c00035 	stwio	r3,0(r2)
  }   
}
  81379c:	e037883a 	mov	sp,fp
  8137a0:	df000017 	ldw	fp,0(sp)
  8137a4:	dec00104 	addi	sp,sp,4
  8137a8:	f800283a 	ret

008137ac <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8137ac:	defffd04 	addi	sp,sp,-12
  8137b0:	df000215 	stw	fp,8(sp)
  8137b4:	df000204 	addi	fp,sp,8
  8137b8:	e13ffe15 	stw	r4,-8(fp)
  8137bc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8137c0:	e0bffe17 	ldw	r2,-8(fp)
  8137c4:	10c00417 	ldw	r3,16(r2)
  8137c8:	e0bffe17 	ldw	r2,-8(fp)
  8137cc:	10800517 	ldw	r2,20(r2)
  8137d0:	18803626 	beq	r3,r2,8138ac <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8137d4:	e0bffe17 	ldw	r2,-8(fp)
  8137d8:	10800617 	ldw	r2,24(r2)
  8137dc:	1080008c 	andi	r2,r2,2
  8137e0:	1005003a 	cmpeq	r2,r2,zero
  8137e4:	1000041e 	bne	r2,zero,8137f8 <altera_avalon_uart_txirq+0x4c>
  8137e8:	e0bfff17 	ldw	r2,-4(fp)
  8137ec:	1082000c 	andi	r2,r2,2048
  8137f0:	1005003a 	cmpeq	r2,r2,zero
  8137f4:	10001e1e 	bne	r2,zero,813870 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8137f8:	e0bffe17 	ldw	r2,-8(fp)
  8137fc:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813800:	e0bffe17 	ldw	r2,-8(fp)
  813804:	10800017 	ldw	r2,0(r2)
  813808:	11000104 	addi	r4,r2,4
  81380c:	e0bffe17 	ldw	r2,-8(fp)
  813810:	10c00417 	ldw	r3,16(r2)
  813814:	e0bffe17 	ldw	r2,-8(fp)
  813818:	1885883a 	add	r2,r3,r2
  81381c:	10801704 	addi	r2,r2,92
  813820:	10800003 	ldbu	r2,0(r2)
  813824:	10c03fcc 	andi	r3,r2,255
  813828:	2005883a 	mov	r2,r4
  81382c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  813830:	e0bffe17 	ldw	r2,-8(fp)
  813834:	10800417 	ldw	r2,16(r2)
  813838:	10c00044 	addi	r3,r2,1
  81383c:	e0bffe17 	ldw	r2,-8(fp)
  813840:	10c00415 	stw	r3,16(r2)
  813844:	e0bffe17 	ldw	r2,-8(fp)
  813848:	10800417 	ldw	r2,16(r2)
  81384c:	10c00fcc 	andi	r3,r2,63
  813850:	e0bffe17 	ldw	r2,-8(fp)
  813854:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813858:	e0bffe17 	ldw	r2,-8(fp)
  81385c:	10800117 	ldw	r2,4(r2)
  813860:	10c01014 	ori	r3,r2,64
  813864:	e0bffe17 	ldw	r2,-8(fp)
  813868:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81386c:	00000f06 	br	8138ac <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  813870:	e0bffe17 	ldw	r2,-8(fp)
  813874:	10800017 	ldw	r2,0(r2)
  813878:	10800204 	addi	r2,r2,8
  81387c:	10800037 	ldwio	r2,0(r2)
  813880:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813884:	e0bfff17 	ldw	r2,-4(fp)
  813888:	1082000c 	andi	r2,r2,2048
  81388c:	1004c03a 	cmpne	r2,r2,zero
  813890:	1000061e 	bne	r2,zero,8138ac <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813894:	e0bffe17 	ldw	r2,-8(fp)
  813898:	10c00117 	ldw	r3,4(r2)
  81389c:	00bfefc4 	movi	r2,-65
  8138a0:	1886703a 	and	r3,r3,r2
  8138a4:	e0bffe17 	ldw	r2,-8(fp)
  8138a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8138ac:	e0bffe17 	ldw	r2,-8(fp)
  8138b0:	10c00417 	ldw	r3,16(r2)
  8138b4:	e0bffe17 	ldw	r2,-8(fp)
  8138b8:	10800517 	ldw	r2,20(r2)
  8138bc:	1880061e 	bne	r3,r2,8138d8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8138c0:	e0bffe17 	ldw	r2,-8(fp)
  8138c4:	10c00117 	ldw	r3,4(r2)
  8138c8:	00beefc4 	movi	r2,-1089
  8138cc:	1886703a 	and	r3,r3,r2
  8138d0:	e0bffe17 	ldw	r2,-8(fp)
  8138d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8138d8:	e0bffe17 	ldw	r2,-8(fp)
  8138dc:	10800017 	ldw	r2,0(r2)
  8138e0:	11000304 	addi	r4,r2,12
  8138e4:	e0bffe17 	ldw	r2,-8(fp)
  8138e8:	10800117 	ldw	r2,4(r2)
  8138ec:	1007883a 	mov	r3,r2
  8138f0:	2005883a 	mov	r2,r4
  8138f4:	10c00035 	stwio	r3,0(r2)
}
  8138f8:	e037883a 	mov	sp,fp
  8138fc:	df000017 	ldw	fp,0(sp)
  813900:	dec00104 	addi	sp,sp,4
  813904:	f800283a 	ret

00813908 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813908:	defffc04 	addi	sp,sp,-16
  81390c:	df000315 	stw	fp,12(sp)
  813910:	df000304 	addi	fp,sp,12
  813914:	e13ffd15 	stw	r4,-12(fp)
  813918:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81391c:	00000706 	br	81393c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813920:	e0bffe17 	ldw	r2,-8(fp)
  813924:	1090000c 	andi	r2,r2,16384
  813928:	1005003a 	cmpeq	r2,r2,zero
  81392c:	1000031e 	bne	r2,zero,81393c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  813930:	00bffd44 	movi	r2,-11
  813934:	e0bfff15 	stw	r2,-4(fp)
  813938:	00000606 	br	813954 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81393c:	e0bffd17 	ldw	r2,-12(fp)
  813940:	10c00417 	ldw	r3,16(r2)
  813944:	e0bffd17 	ldw	r2,-12(fp)
  813948:	10800517 	ldw	r2,20(r2)
  81394c:	18bff41e 	bne	r3,r2,813920 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813950:	e03fff15 	stw	zero,-4(fp)
  813954:	e0bfff17 	ldw	r2,-4(fp)
}
  813958:	e037883a 	mov	sp,fp
  81395c:	df000017 	ldw	fp,0(sp)
  813960:	dec00104 	addi	sp,sp,4
  813964:	f800283a 	ret

00813968 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813968:	defff004 	addi	sp,sp,-64
  81396c:	dfc00f15 	stw	ra,60(sp)
  813970:	df000e15 	stw	fp,56(sp)
  813974:	df000e04 	addi	fp,sp,56
  813978:	e13ffb15 	stw	r4,-20(fp)
  81397c:	e17ffc15 	stw	r5,-16(fp)
  813980:	e1bffd15 	stw	r6,-12(fp)
  813984:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  813988:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  81398c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813990:	e0bffe17 	ldw	r2,-8(fp)
  813994:	1090000c 	andi	r2,r2,16384
  813998:	1005003a 	cmpeq	r2,r2,zero
  81399c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  8139a0:	e0bffb17 	ldw	r2,-20(fp)
  8139a4:	10800217 	ldw	r2,8(r2)
  8139a8:	10800044 	addi	r2,r2,1
  8139ac:	10800fcc 	andi	r2,r2,63
  8139b0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8139b4:	00001906 	br	813a1c <altera_avalon_uart_read+0xb4>
    {
      count++;
  8139b8:	e0bff617 	ldw	r2,-40(fp)
  8139bc:	10800044 	addi	r2,r2,1
  8139c0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8139c4:	e0bffb17 	ldw	r2,-20(fp)
  8139c8:	10c00217 	ldw	r3,8(r2)
  8139cc:	e0bffb17 	ldw	r2,-20(fp)
  8139d0:	1885883a 	add	r2,r3,r2
  8139d4:	10800704 	addi	r2,r2,28
  8139d8:	10800003 	ldbu	r2,0(r2)
  8139dc:	1007883a 	mov	r3,r2
  8139e0:	e0bffc17 	ldw	r2,-16(fp)
  8139e4:	10c00005 	stb	r3,0(r2)
  8139e8:	e0bffc17 	ldw	r2,-16(fp)
  8139ec:	10800044 	addi	r2,r2,1
  8139f0:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8139f4:	e0bffb17 	ldw	r2,-20(fp)
  8139f8:	10800217 	ldw	r2,8(r2)
  8139fc:	10c00044 	addi	r3,r2,1
  813a00:	e0bffb17 	ldw	r2,-20(fp)
  813a04:	10c00215 	stw	r3,8(r2)
  813a08:	e0bffb17 	ldw	r2,-20(fp)
  813a0c:	10800217 	ldw	r2,8(r2)
  813a10:	10c00fcc 	andi	r3,r2,63
  813a14:	e0bffb17 	ldw	r2,-20(fp)
  813a18:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813a1c:	e0fff617 	ldw	r3,-40(fp)
  813a20:	e0bffd17 	ldw	r2,-12(fp)
  813a24:	1880050e 	bge	r3,r2,813a3c <altera_avalon_uart_read+0xd4>
  813a28:	e0bffb17 	ldw	r2,-20(fp)
  813a2c:	10c00217 	ldw	r3,8(r2)
  813a30:	e0bffb17 	ldw	r2,-20(fp)
  813a34:	10800317 	ldw	r2,12(r2)
  813a38:	18bfdf1e 	bne	r3,r2,8139b8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813a3c:	e0bff617 	ldw	r2,-40(fp)
  813a40:	1004c03a 	cmpne	r2,r2,zero
  813a44:	1000271e 	bne	r2,zero,813ae4 <altera_avalon_uart_read+0x17c>
  813a48:	e0bffb17 	ldw	r2,-20(fp)
  813a4c:	10c00217 	ldw	r3,8(r2)
  813a50:	e0bffb17 	ldw	r2,-20(fp)
  813a54:	10800317 	ldw	r2,12(r2)
  813a58:	1880221e 	bne	r3,r2,813ae4 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  813a5c:	e0bff917 	ldw	r2,-28(fp)
  813a60:	1004c03a 	cmpne	r2,r2,zero
  813a64:	1000061e 	bne	r2,zero,813a80 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813a68:	0813b980 	call	813b98 <alt_get_errno>
  813a6c:	00c002c4 	movi	r3,11
  813a70:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  813a74:	00800044 	movi	r2,1
  813a78:	e0bff705 	stb	r2,-36(fp)
        break;
  813a7c:	00001f06 	br	813afc <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a80:	0005303a 	rdctl	r2,status
  813a84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a88:	e0fff517 	ldw	r3,-44(fp)
  813a8c:	00bfff84 	movi	r2,-2
  813a90:	1884703a 	and	r2,r3,r2
  813a94:	1001703a 	wrctl	status,r2
  
  return context;
  813a98:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813a9c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813aa0:	e0bffb17 	ldw	r2,-20(fp)
  813aa4:	10800117 	ldw	r2,4(r2)
  813aa8:	10c02014 	ori	r3,r2,128
  813aac:	e0bffb17 	ldw	r2,-20(fp)
  813ab0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813ab4:	e0bffb17 	ldw	r2,-20(fp)
  813ab8:	10800017 	ldw	r2,0(r2)
  813abc:	11000304 	addi	r4,r2,12
  813ac0:	e0bffb17 	ldw	r2,-20(fp)
  813ac4:	10800117 	ldw	r2,4(r2)
  813ac8:	1007883a 	mov	r3,r2
  813acc:	2005883a 	mov	r2,r4
  813ad0:	10c00035 	stwio	r3,0(r2)
  813ad4:	e0bffa17 	ldw	r2,-24(fp)
  813ad8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813adc:	e0bff417 	ldw	r2,-48(fp)
  813ae0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813ae4:	e0bff617 	ldw	r2,-40(fp)
  813ae8:	1004c03a 	cmpne	r2,r2,zero
  813aec:	1000031e 	bne	r2,zero,813afc <altera_avalon_uart_read+0x194>
  813af0:	e0bffd17 	ldw	r2,-12(fp)
  813af4:	1004c03a 	cmpne	r2,r2,zero
  813af8:	103fc81e 	bne	r2,zero,813a1c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813afc:	0005303a 	rdctl	r2,status
  813b00:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b04:	e0fff317 	ldw	r3,-52(fp)
  813b08:	00bfff84 	movi	r2,-2
  813b0c:	1884703a 	and	r2,r3,r2
  813b10:	1001703a 	wrctl	status,r2
  
  return context;
  813b14:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813b18:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813b1c:	e0bffb17 	ldw	r2,-20(fp)
  813b20:	10800117 	ldw	r2,4(r2)
  813b24:	10c02014 	ori	r3,r2,128
  813b28:	e0bffb17 	ldw	r2,-20(fp)
  813b2c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b30:	e0bffb17 	ldw	r2,-20(fp)
  813b34:	10800017 	ldw	r2,0(r2)
  813b38:	11000304 	addi	r4,r2,12
  813b3c:	e0bffb17 	ldw	r2,-20(fp)
  813b40:	10800117 	ldw	r2,4(r2)
  813b44:	1007883a 	mov	r3,r2
  813b48:	2005883a 	mov	r2,r4
  813b4c:	10c00035 	stwio	r3,0(r2)
  813b50:	e0bffa17 	ldw	r2,-24(fp)
  813b54:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b58:	e0bff217 	ldw	r2,-56(fp)
  813b5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813b60:	e0bff703 	ldbu	r2,-36(fp)
  813b64:	1005003a 	cmpeq	r2,r2,zero
  813b68:	1000031e 	bne	r2,zero,813b78 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  813b6c:	00bffd04 	movi	r2,-12
  813b70:	e0bfff15 	stw	r2,-4(fp)
  813b74:	00000206 	br	813b80 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  813b78:	e0bff617 	ldw	r2,-40(fp)
  813b7c:	e0bfff15 	stw	r2,-4(fp)
  813b80:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813b84:	e037883a 	mov	sp,fp
  813b88:	dfc00117 	ldw	ra,4(sp)
  813b8c:	df000017 	ldw	fp,0(sp)
  813b90:	dec00204 	addi	sp,sp,8
  813b94:	f800283a 	ret

00813b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813b98:	defffd04 	addi	sp,sp,-12
  813b9c:	dfc00215 	stw	ra,8(sp)
  813ba0:	df000115 	stw	fp,4(sp)
  813ba4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813ba8:	00802074 	movhi	r2,129
  813bac:	109c5004 	addi	r2,r2,28992
  813bb0:	10800017 	ldw	r2,0(r2)
  813bb4:	1005003a 	cmpeq	r2,r2,zero
  813bb8:	1000061e 	bne	r2,zero,813bd4 <alt_get_errno+0x3c>
  813bbc:	00802074 	movhi	r2,129
  813bc0:	109c5004 	addi	r2,r2,28992
  813bc4:	10800017 	ldw	r2,0(r2)
  813bc8:	103ee83a 	callr	r2
  813bcc:	e0bfff15 	stw	r2,-4(fp)
  813bd0:	00000306 	br	813be0 <alt_get_errno+0x48>
  813bd4:	008020b4 	movhi	r2,130
  813bd8:	10a39d04 	addi	r2,r2,-29068
  813bdc:	e0bfff15 	stw	r2,-4(fp)
  813be0:	e0bfff17 	ldw	r2,-4(fp)
}
  813be4:	e037883a 	mov	sp,fp
  813be8:	dfc00117 	ldw	ra,4(sp)
  813bec:	df000017 	ldw	fp,0(sp)
  813bf0:	dec00204 	addi	sp,sp,8
  813bf4:	f800283a 	ret

00813bf8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813bf8:	defff204 	addi	sp,sp,-56
  813bfc:	dfc00d15 	stw	ra,52(sp)
  813c00:	df000c15 	stw	fp,48(sp)
  813c04:	df000c04 	addi	fp,sp,48
  813c08:	e13ffc15 	stw	r4,-16(fp)
  813c0c:	e17ffd15 	stw	r5,-12(fp)
  813c10:	e1bffe15 	stw	r6,-8(fp)
  813c14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813c18:	e0bffe17 	ldw	r2,-8(fp)
  813c1c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813c20:	e0bfff17 	ldw	r2,-4(fp)
  813c24:	1090000c 	andi	r2,r2,16384
  813c28:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813c2c:	00004006 	br	813d30 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813c30:	e0bffc17 	ldw	r2,-16(fp)
  813c34:	10800517 	ldw	r2,20(r2)
  813c38:	10800044 	addi	r2,r2,1
  813c3c:	10800fcc 	andi	r2,r2,63
  813c40:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813c44:	e0bffc17 	ldw	r2,-16(fp)
  813c48:	10c00417 	ldw	r3,16(r2)
  813c4c:	e0bff917 	ldw	r2,-28(fp)
  813c50:	1880251e 	bne	r3,r2,813ce8 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813c54:	e0bffa17 	ldw	r2,-24(fp)
  813c58:	1005003a 	cmpeq	r2,r2,zero
  813c5c:	1000051e 	bne	r2,zero,813c74 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813c60:	0813dc00 	call	813dc0 <alt_get_errno>
  813c64:	1007883a 	mov	r3,r2
  813c68:	008002c4 	movi	r2,11
  813c6c:	18800015 	stw	r2,0(r3)
        break;
  813c70:	00003206 	br	813d3c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c74:	0005303a 	rdctl	r2,status
  813c78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c7c:	e0fff717 	ldw	r3,-36(fp)
  813c80:	00bfff84 	movi	r2,-2
  813c84:	1884703a 	and	r2,r3,r2
  813c88:	1001703a 	wrctl	status,r2
  
  return context;
  813c8c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813c90:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813c94:	e0bffc17 	ldw	r2,-16(fp)
  813c98:	10800117 	ldw	r2,4(r2)
  813c9c:	10c11014 	ori	r3,r2,1088
  813ca0:	e0bffc17 	ldw	r2,-16(fp)
  813ca4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813ca8:	e0bffc17 	ldw	r2,-16(fp)
  813cac:	10800017 	ldw	r2,0(r2)
  813cb0:	11000304 	addi	r4,r2,12
  813cb4:	e0bffc17 	ldw	r2,-16(fp)
  813cb8:	10800117 	ldw	r2,4(r2)
  813cbc:	1007883a 	mov	r3,r2
  813cc0:	2005883a 	mov	r2,r4
  813cc4:	10c00035 	stwio	r3,0(r2)
  813cc8:	e0bffb17 	ldw	r2,-20(fp)
  813ccc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cd0:	e0bff617 	ldw	r2,-40(fp)
  813cd4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813cd8:	e0bffc17 	ldw	r2,-16(fp)
  813cdc:	10c00417 	ldw	r3,16(r2)
  813ce0:	e0bff917 	ldw	r2,-28(fp)
  813ce4:	18bffc26 	beq	r3,r2,813cd8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813ce8:	e0bff817 	ldw	r2,-32(fp)
  813cec:	10bfffc4 	addi	r2,r2,-1
  813cf0:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813cf4:	e0bffc17 	ldw	r2,-16(fp)
  813cf8:	10c00517 	ldw	r3,20(r2)
  813cfc:	e0bffd17 	ldw	r2,-12(fp)
  813d00:	10800003 	ldbu	r2,0(r2)
  813d04:	1009883a 	mov	r4,r2
  813d08:	e0bffc17 	ldw	r2,-16(fp)
  813d0c:	1885883a 	add	r2,r3,r2
  813d10:	10801704 	addi	r2,r2,92
  813d14:	11000005 	stb	r4,0(r2)
  813d18:	e0bffd17 	ldw	r2,-12(fp)
  813d1c:	10800044 	addi	r2,r2,1
  813d20:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813d24:	e0fffc17 	ldw	r3,-16(fp)
  813d28:	e0bff917 	ldw	r2,-28(fp)
  813d2c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813d30:	e0bff817 	ldw	r2,-32(fp)
  813d34:	1004c03a 	cmpne	r2,r2,zero
  813d38:	103fbd1e 	bne	r2,zero,813c30 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d3c:	0005303a 	rdctl	r2,status
  813d40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d44:	e0fff517 	ldw	r3,-44(fp)
  813d48:	00bfff84 	movi	r2,-2
  813d4c:	1884703a 	and	r2,r3,r2
  813d50:	1001703a 	wrctl	status,r2
  
  return context;
  813d54:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813d58:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813d5c:	e0bffc17 	ldw	r2,-16(fp)
  813d60:	10800117 	ldw	r2,4(r2)
  813d64:	10c11014 	ori	r3,r2,1088
  813d68:	e0bffc17 	ldw	r2,-16(fp)
  813d6c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813d70:	e0bffc17 	ldw	r2,-16(fp)
  813d74:	10800017 	ldw	r2,0(r2)
  813d78:	11000304 	addi	r4,r2,12
  813d7c:	e0bffc17 	ldw	r2,-16(fp)
  813d80:	10800117 	ldw	r2,4(r2)
  813d84:	1007883a 	mov	r3,r2
  813d88:	2005883a 	mov	r2,r4
  813d8c:	10c00035 	stwio	r3,0(r2)
  813d90:	e0bffb17 	ldw	r2,-20(fp)
  813d94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d98:	e0bff417 	ldw	r2,-48(fp)
  813d9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813da0:	e0fffe17 	ldw	r3,-8(fp)
  813da4:	e0bff817 	ldw	r2,-32(fp)
  813da8:	1885c83a 	sub	r2,r3,r2
}
  813dac:	e037883a 	mov	sp,fp
  813db0:	dfc00117 	ldw	ra,4(sp)
  813db4:	df000017 	ldw	fp,0(sp)
  813db8:	dec00204 	addi	sp,sp,8
  813dbc:	f800283a 	ret

00813dc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813dc0:	defffd04 	addi	sp,sp,-12
  813dc4:	dfc00215 	stw	ra,8(sp)
  813dc8:	df000115 	stw	fp,4(sp)
  813dcc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813dd0:	00802074 	movhi	r2,129
  813dd4:	109c5004 	addi	r2,r2,28992
  813dd8:	10800017 	ldw	r2,0(r2)
  813ddc:	1005003a 	cmpeq	r2,r2,zero
  813de0:	1000061e 	bne	r2,zero,813dfc <alt_get_errno+0x3c>
  813de4:	00802074 	movhi	r2,129
  813de8:	109c5004 	addi	r2,r2,28992
  813dec:	10800017 	ldw	r2,0(r2)
  813df0:	103ee83a 	callr	r2
  813df4:	e0bfff15 	stw	r2,-4(fp)
  813df8:	00000306 	br	813e08 <alt_get_errno+0x48>
  813dfc:	008020b4 	movhi	r2,130
  813e00:	10a39d04 	addi	r2,r2,-29068
  813e04:	e0bfff15 	stw	r2,-4(fp)
  813e08:	e0bfff17 	ldw	r2,-4(fp)
}
  813e0c:	e037883a 	mov	sp,fp
  813e10:	dfc00117 	ldw	ra,4(sp)
  813e14:	df000017 	ldw	fp,0(sp)
  813e18:	dec00204 	addi	sp,sp,8
  813e1c:	f800283a 	ret

00813e20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813e20:	defffe04 	addi	sp,sp,-8
  813e24:	df000115 	stw	fp,4(sp)
  813e28:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813e2c:	e03fff15 	stw	zero,-4(fp)
  813e30:	00000506 	br	813e48 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813e34:	e0bfff17 	ldw	r2,-4(fp)
  813e38:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813e3c:	e0bfff17 	ldw	r2,-4(fp)
  813e40:	10800804 	addi	r2,r2,32
  813e44:	e0bfff15 	stw	r2,-4(fp)
  813e48:	e0bfff17 	ldw	r2,-4(fp)
  813e4c:	10820030 	cmpltui	r2,r2,2048
  813e50:	103ff81e 	bne	r2,zero,813e34 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813e54:	e037883a 	mov	sp,fp
  813e58:	df000017 	ldw	fp,0(sp)
  813e5c:	dec00104 	addi	sp,sp,4
  813e60:	f800283a 	ret

00813e64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813e64:	defff904 	addi	sp,sp,-28
  813e68:	dfc00615 	stw	ra,24(sp)
  813e6c:	df000515 	stw	fp,20(sp)
  813e70:	df000504 	addi	fp,sp,20
  813e74:	e13ffd15 	stw	r4,-12(fp)
  813e78:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813e7c:	e0bffd17 	ldw	r2,-12(fp)
  813e80:	1005003a 	cmpeq	r2,r2,zero
  813e84:	1000041e 	bne	r2,zero,813e98 <alt_dev_llist_insert+0x34>
  813e88:	e0bffd17 	ldw	r2,-12(fp)
  813e8c:	10800217 	ldw	r2,8(r2)
  813e90:	1004c03a 	cmpne	r2,r2,zero
  813e94:	1000071e 	bne	r2,zero,813eb4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813e98:	0813f180 	call	813f18 <alt_get_errno>
  813e9c:	1007883a 	mov	r3,r2
  813ea0:	00800584 	movi	r2,22
  813ea4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813ea8:	00bffa84 	movi	r2,-22
  813eac:	e0bfff15 	stw	r2,-4(fp)
  813eb0:	00001306 	br	813f00 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813eb4:	e0fffd17 	ldw	r3,-12(fp)
  813eb8:	e0bffe17 	ldw	r2,-8(fp)
  813ebc:	e0bffb15 	stw	r2,-20(fp)
  813ec0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813ec4:	e0fffc17 	ldw	r3,-16(fp)
  813ec8:	e0bffb17 	ldw	r2,-20(fp)
  813ecc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813ed0:	e0bffb17 	ldw	r2,-20(fp)
  813ed4:	10c00017 	ldw	r3,0(r2)
  813ed8:	e0bffc17 	ldw	r2,-16(fp)
  813edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813ee0:	e0bffb17 	ldw	r2,-20(fp)
  813ee4:	10c00017 	ldw	r3,0(r2)
  813ee8:	e0bffc17 	ldw	r2,-16(fp)
  813eec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813ef0:	e0fffb17 	ldw	r3,-20(fp)
  813ef4:	e0bffc17 	ldw	r2,-16(fp)
  813ef8:	18800015 	stw	r2,0(r3)

  return 0;  
  813efc:	e03fff15 	stw	zero,-4(fp)
  813f00:	e0bfff17 	ldw	r2,-4(fp)
}
  813f04:	e037883a 	mov	sp,fp
  813f08:	dfc00117 	ldw	ra,4(sp)
  813f0c:	df000017 	ldw	fp,0(sp)
  813f10:	dec00204 	addi	sp,sp,8
  813f14:	f800283a 	ret

00813f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813f18:	defffd04 	addi	sp,sp,-12
  813f1c:	dfc00215 	stw	ra,8(sp)
  813f20:	df000115 	stw	fp,4(sp)
  813f24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813f28:	00802074 	movhi	r2,129
  813f2c:	109c5004 	addi	r2,r2,28992
  813f30:	10800017 	ldw	r2,0(r2)
  813f34:	1005003a 	cmpeq	r2,r2,zero
  813f38:	1000061e 	bne	r2,zero,813f54 <alt_get_errno+0x3c>
  813f3c:	00802074 	movhi	r2,129
  813f40:	109c5004 	addi	r2,r2,28992
  813f44:	10800017 	ldw	r2,0(r2)
  813f48:	103ee83a 	callr	r2
  813f4c:	e0bfff15 	stw	r2,-4(fp)
  813f50:	00000306 	br	813f60 <alt_get_errno+0x48>
  813f54:	008020b4 	movhi	r2,130
  813f58:	10a39d04 	addi	r2,r2,-29068
  813f5c:	e0bfff15 	stw	r2,-4(fp)
  813f60:	e0bfff17 	ldw	r2,-4(fp)
}
  813f64:	e037883a 	mov	sp,fp
  813f68:	dfc00117 	ldw	ra,4(sp)
  813f6c:	df000017 	ldw	fp,0(sp)
  813f70:	dec00204 	addi	sp,sp,8
  813f74:	f800283a 	ret

00813f78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813f78:	defffd04 	addi	sp,sp,-12
  813f7c:	dfc00215 	stw	ra,8(sp)
  813f80:	df000115 	stw	fp,4(sp)
  813f84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813f88:	00bfff04 	movi	r2,-4
  813f8c:	00c02074 	movhi	r3,129
  813f90:	18d34704 	addi	r3,r3,19740
  813f94:	1885883a 	add	r2,r3,r2
  813f98:	e0bfff15 	stw	r2,-4(fp)
  813f9c:	00000606 	br	813fb8 <_do_ctors+0x40>
        (*ctor) (); 
  813fa0:	e0bfff17 	ldw	r2,-4(fp)
  813fa4:	10800017 	ldw	r2,0(r2)
  813fa8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813fac:	e0bfff17 	ldw	r2,-4(fp)
  813fb0:	10bfff04 	addi	r2,r2,-4
  813fb4:	e0bfff15 	stw	r2,-4(fp)
  813fb8:	e0ffff17 	ldw	r3,-4(fp)
  813fbc:	00802074 	movhi	r2,129
  813fc0:	10934604 	addi	r2,r2,19736
  813fc4:	18bff62e 	bgeu	r3,r2,813fa0 <_do_ctors+0x28>
        (*ctor) (); 
}
  813fc8:	e037883a 	mov	sp,fp
  813fcc:	dfc00117 	ldw	ra,4(sp)
  813fd0:	df000017 	ldw	fp,0(sp)
  813fd4:	dec00204 	addi	sp,sp,8
  813fd8:	f800283a 	ret

00813fdc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813fdc:	defffd04 	addi	sp,sp,-12
  813fe0:	dfc00215 	stw	ra,8(sp)
  813fe4:	df000115 	stw	fp,4(sp)
  813fe8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813fec:	00bfff04 	movi	r2,-4
  813ff0:	00c02074 	movhi	r3,129
  813ff4:	18d34704 	addi	r3,r3,19740
  813ff8:	1885883a 	add	r2,r3,r2
  813ffc:	e0bfff15 	stw	r2,-4(fp)
  814000:	00000606 	br	81401c <_do_dtors+0x40>
        (*dtor) (); 
  814004:	e0bfff17 	ldw	r2,-4(fp)
  814008:	10800017 	ldw	r2,0(r2)
  81400c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814010:	e0bfff17 	ldw	r2,-4(fp)
  814014:	10bfff04 	addi	r2,r2,-4
  814018:	e0bfff15 	stw	r2,-4(fp)
  81401c:	e0ffff17 	ldw	r3,-4(fp)
  814020:	00802074 	movhi	r2,129
  814024:	10934704 	addi	r2,r2,19740
  814028:	18bff62e 	bgeu	r3,r2,814004 <_do_dtors+0x28>
        (*dtor) (); 
}
  81402c:	e037883a 	mov	sp,fp
  814030:	dfc00117 	ldw	ra,4(sp)
  814034:	df000017 	ldw	fp,0(sp)
  814038:	dec00204 	addi	sp,sp,8
  81403c:	f800283a 	ret

00814040 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  814040:	defff904 	addi	sp,sp,-28
  814044:	dfc00615 	stw	ra,24(sp)
  814048:	df000515 	stw	fp,20(sp)
  81404c:	df000504 	addi	fp,sp,20
  814050:	e13ffd15 	stw	r4,-12(fp)
  814054:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814058:	e0bffe17 	ldw	r2,-8(fp)
  81405c:	10800017 	ldw	r2,0(r2)
  814060:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  814064:	e13ffd17 	ldw	r4,-12(fp)
  814068:	08042d40 	call	8042d4 <strlen>
  81406c:	10800044 	addi	r2,r2,1
  814070:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814074:	00000d06 	br	8140ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  814078:	e0bffc17 	ldw	r2,-16(fp)
  81407c:	11000217 	ldw	r4,8(r2)
  814080:	e1bffb17 	ldw	r6,-20(fp)
  814084:	e17ffd17 	ldw	r5,-12(fp)
  814088:	081495c0 	call	81495c <memcmp>
  81408c:	1004c03a 	cmpne	r2,r2,zero
  814090:	1000031e 	bne	r2,zero,8140a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  814094:	e0bffc17 	ldw	r2,-16(fp)
  814098:	e0bfff15 	stw	r2,-4(fp)
  81409c:	00000706 	br	8140bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8140a0:	e0bffc17 	ldw	r2,-16(fp)
  8140a4:	10800017 	ldw	r2,0(r2)
  8140a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8140ac:	e0fffe17 	ldw	r3,-8(fp)
  8140b0:	e0bffc17 	ldw	r2,-16(fp)
  8140b4:	10fff01e 	bne	r2,r3,814078 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8140b8:	e03fff15 	stw	zero,-4(fp)
  8140bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8140c0:	e037883a 	mov	sp,fp
  8140c4:	dfc00117 	ldw	ra,4(sp)
  8140c8:	df000017 	ldw	fp,0(sp)
  8140cc:	dec00204 	addi	sp,sp,8
  8140d0:	f800283a 	ret

008140d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8140d4:	defffa04 	addi	sp,sp,-24
  8140d8:	dfc00515 	stw	ra,20(sp)
  8140dc:	df000415 	stw	fp,16(sp)
  8140e0:	df000404 	addi	fp,sp,16
  8140e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8140e8:	00802074 	movhi	r2,129
  8140ec:	109c4b04 	addi	r2,r2,28972
  8140f0:	10800017 	ldw	r2,0(r2)
  8140f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8140f8:	00003306 	br	8141c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8140fc:	e0bffd17 	ldw	r2,-12(fp)
  814100:	11000217 	ldw	r4,8(r2)
  814104:	08042d40 	call	8042d4 <strlen>
  814108:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81410c:	e0bffd17 	ldw	r2,-12(fp)
  814110:	10c00217 	ldw	r3,8(r2)
  814114:	e0bffc17 	ldw	r2,-16(fp)
  814118:	1885883a 	add	r2,r3,r2
  81411c:	10bfffc4 	addi	r2,r2,-1
  814120:	10800003 	ldbu	r2,0(r2)
  814124:	10803fcc 	andi	r2,r2,255
  814128:	1080201c 	xori	r2,r2,128
  81412c:	10bfe004 	addi	r2,r2,-128
  814130:	10800bd8 	cmpnei	r2,r2,47
  814134:	1000031e 	bne	r2,zero,814144 <alt_find_file+0x70>
    {
      len -= 1;
  814138:	e0bffc17 	ldw	r2,-16(fp)
  81413c:	10bfffc4 	addi	r2,r2,-1
  814140:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814144:	e0bffc17 	ldw	r2,-16(fp)
  814148:	1007883a 	mov	r3,r2
  81414c:	e0bffe17 	ldw	r2,-8(fp)
  814150:	1885883a 	add	r2,r3,r2
  814154:	10800003 	ldbu	r2,0(r2)
  814158:	10803fcc 	andi	r2,r2,255
  81415c:	1080201c 	xori	r2,r2,128
  814160:	10bfe004 	addi	r2,r2,-128
  814164:	10800be0 	cmpeqi	r2,r2,47
  814168:	10000a1e 	bne	r2,zero,814194 <alt_find_file+0xc0>
  81416c:	e0bffc17 	ldw	r2,-16(fp)
  814170:	1007883a 	mov	r3,r2
  814174:	e0bffe17 	ldw	r2,-8(fp)
  814178:	1885883a 	add	r2,r3,r2
  81417c:	10800003 	ldbu	r2,0(r2)
  814180:	10803fcc 	andi	r2,r2,255
  814184:	1080201c 	xori	r2,r2,128
  814188:	10bfe004 	addi	r2,r2,-128
  81418c:	1004c03a 	cmpne	r2,r2,zero
  814190:	10000a1e 	bne	r2,zero,8141bc <alt_find_file+0xe8>
  814194:	e0bffd17 	ldw	r2,-12(fp)
  814198:	11000217 	ldw	r4,8(r2)
  81419c:	e1bffc17 	ldw	r6,-16(fp)
  8141a0:	e17ffe17 	ldw	r5,-8(fp)
  8141a4:	081495c0 	call	81495c <memcmp>
  8141a8:	1004c03a 	cmpne	r2,r2,zero
  8141ac:	1000031e 	bne	r2,zero,8141bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8141b0:	e0bffd17 	ldw	r2,-12(fp)
  8141b4:	e0bfff15 	stw	r2,-4(fp)
  8141b8:	00000806 	br	8141dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8141bc:	e0bffd17 	ldw	r2,-12(fp)
  8141c0:	10800017 	ldw	r2,0(r2)
  8141c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8141c8:	00c02074 	movhi	r3,129
  8141cc:	18dc4b04 	addi	r3,r3,28972
  8141d0:	e0bffd17 	ldw	r2,-12(fp)
  8141d4:	10ffc91e 	bne	r2,r3,8140fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8141d8:	e03fff15 	stw	zero,-4(fp)
  8141dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8141e0:	e037883a 	mov	sp,fp
  8141e4:	dfc00117 	ldw	ra,4(sp)
  8141e8:	df000017 	ldw	fp,0(sp)
  8141ec:	dec00204 	addi	sp,sp,8
  8141f0:	f800283a 	ret

008141f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8141f4:	defffc04 	addi	sp,sp,-16
  8141f8:	df000315 	stw	fp,12(sp)
  8141fc:	df000304 	addi	fp,sp,12
  814200:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814204:	00bffa04 	movi	r2,-24
  814208:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81420c:	e03ffe15 	stw	zero,-8(fp)
  814210:	00001e06 	br	81428c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  814214:	e0bffe17 	ldw	r2,-8(fp)
  814218:	00c02074 	movhi	r3,129
  81421c:	18d74f04 	addi	r3,r3,23868
  814220:	10800324 	muli	r2,r2,12
  814224:	10c5883a 	add	r2,r2,r3
  814228:	10800017 	ldw	r2,0(r2)
  81422c:	1004c03a 	cmpne	r2,r2,zero
  814230:	1000131e 	bne	r2,zero,814280 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  814234:	e0bffe17 	ldw	r2,-8(fp)
  814238:	00c02074 	movhi	r3,129
  81423c:	18d74f04 	addi	r3,r3,23868
  814240:	10800324 	muli	r2,r2,12
  814244:	10c7883a 	add	r3,r2,r3
  814248:	e0bfff17 	ldw	r2,-4(fp)
  81424c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  814250:	00802074 	movhi	r2,129
  814254:	109c4f04 	addi	r2,r2,28988
  814258:	10c00017 	ldw	r3,0(r2)
  81425c:	e0bffe17 	ldw	r2,-8(fp)
  814260:	1880040e 	bge	r3,r2,814274 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  814264:	00c02074 	movhi	r3,129
  814268:	18dc4f04 	addi	r3,r3,28988
  81426c:	e0bffe17 	ldw	r2,-8(fp)
  814270:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  814274:	e0bffe17 	ldw	r2,-8(fp)
  814278:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81427c:	00000606 	br	814298 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814280:	e0bffe17 	ldw	r2,-8(fp)
  814284:	10800044 	addi	r2,r2,1
  814288:	e0bffe15 	stw	r2,-8(fp)
  81428c:	e0bffe17 	ldw	r2,-8(fp)
  814290:	10800810 	cmplti	r2,r2,32
  814294:	103fdf1e 	bne	r2,zero,814214 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814298:	e0bffd17 	ldw	r2,-12(fp)
}
  81429c:	e037883a 	mov	sp,fp
  8142a0:	df000017 	ldw	fp,0(sp)
  8142a4:	dec00104 	addi	sp,sp,4
  8142a8:	f800283a 	ret

008142ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8142ac:	defffe04 	addi	sp,sp,-8
  8142b0:	dfc00115 	stw	ra,4(sp)
  8142b4:	df000015 	stw	fp,0(sp)
  8142b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8142bc:	0009883a 	mov	r4,zero
  8142c0:	01440004 	movi	r5,4096
  8142c4:	08148800 	call	814880 <alt_icache_flush>
#endif
}
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	dfc00117 	ldw	ra,4(sp)
  8142d0:	df000017 	ldw	fp,0(sp)
  8142d4:	dec00204 	addi	sp,sp,8
  8142d8:	f800283a 	ret

008142dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8142dc:	defff904 	addi	sp,sp,-28
  8142e0:	dfc00615 	stw	ra,24(sp)
  8142e4:	df000515 	stw	fp,20(sp)
  8142e8:	df000504 	addi	fp,sp,20
  8142ec:	e13ffc15 	stw	r4,-16(fp)
  8142f0:	e17ffd15 	stw	r5,-12(fp)
  8142f4:	e1bffe15 	stw	r6,-8(fp)
  8142f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8142fc:	e0800217 	ldw	r2,8(fp)
  814300:	d8800015 	stw	r2,0(sp)
  814304:	e13ffc17 	ldw	r4,-16(fp)
  814308:	e17ffd17 	ldw	r5,-12(fp)
  81430c:	e1bffe17 	ldw	r6,-8(fp)
  814310:	e1ffff17 	ldw	r7,-4(fp)
  814314:	08144b00 	call	8144b0 <alt_iic_isr_register>
}  
  814318:	e037883a 	mov	sp,fp
  81431c:	dfc00117 	ldw	ra,4(sp)
  814320:	df000017 	ldw	fp,0(sp)
  814324:	dec00204 	addi	sp,sp,8
  814328:	f800283a 	ret

0081432c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81432c:	defff904 	addi	sp,sp,-28
  814330:	df000615 	stw	fp,24(sp)
  814334:	df000604 	addi	fp,sp,24
  814338:	e13ffe15 	stw	r4,-8(fp)
  81433c:	e17fff15 	stw	r5,-4(fp)
  814340:	e0bfff17 	ldw	r2,-4(fp)
  814344:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814348:	0005303a 	rdctl	r2,status
  81434c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814350:	e0fffb17 	ldw	r3,-20(fp)
  814354:	00bfff84 	movi	r2,-2
  814358:	1884703a 	and	r2,r3,r2
  81435c:	1001703a 	wrctl	status,r2
  
  return context;
  814360:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814364:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  814368:	e0fffc17 	ldw	r3,-16(fp)
  81436c:	00800044 	movi	r2,1
  814370:	10c4983a 	sll	r2,r2,r3
  814374:	1007883a 	mov	r3,r2
  814378:	008020b4 	movhi	r2,130
  81437c:	10a3a404 	addi	r2,r2,-29040
  814380:	10800017 	ldw	r2,0(r2)
  814384:	1886b03a 	or	r3,r3,r2
  814388:	008020b4 	movhi	r2,130
  81438c:	10a3a404 	addi	r2,r2,-29040
  814390:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814394:	008020b4 	movhi	r2,130
  814398:	10a3a404 	addi	r2,r2,-29040
  81439c:	10800017 	ldw	r2,0(r2)
  8143a0:	100170fa 	wrctl	ienable,r2
  8143a4:	e0bffd17 	ldw	r2,-12(fp)
  8143a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143ac:	e0bffa17 	ldw	r2,-24(fp)
  8143b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8143b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8143b8:	e037883a 	mov	sp,fp
  8143bc:	df000017 	ldw	fp,0(sp)
  8143c0:	dec00104 	addi	sp,sp,4
  8143c4:	f800283a 	ret

008143c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8143c8:	defff904 	addi	sp,sp,-28
  8143cc:	df000615 	stw	fp,24(sp)
  8143d0:	df000604 	addi	fp,sp,24
  8143d4:	e13ffe15 	stw	r4,-8(fp)
  8143d8:	e17fff15 	stw	r5,-4(fp)
  8143dc:	e0bfff17 	ldw	r2,-4(fp)
  8143e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8143e4:	0005303a 	rdctl	r2,status
  8143e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8143ec:	e0fffb17 	ldw	r3,-20(fp)
  8143f0:	00bfff84 	movi	r2,-2
  8143f4:	1884703a 	and	r2,r3,r2
  8143f8:	1001703a 	wrctl	status,r2
  
  return context;
  8143fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814400:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814404:	e0fffc17 	ldw	r3,-16(fp)
  814408:	00800044 	movi	r2,1
  81440c:	10c4983a 	sll	r2,r2,r3
  814410:	0084303a 	nor	r2,zero,r2
  814414:	1007883a 	mov	r3,r2
  814418:	008020b4 	movhi	r2,130
  81441c:	10a3a404 	addi	r2,r2,-29040
  814420:	10800017 	ldw	r2,0(r2)
  814424:	1886703a 	and	r3,r3,r2
  814428:	008020b4 	movhi	r2,130
  81442c:	10a3a404 	addi	r2,r2,-29040
  814430:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814434:	008020b4 	movhi	r2,130
  814438:	10a3a404 	addi	r2,r2,-29040
  81443c:	10800017 	ldw	r2,0(r2)
  814440:	100170fa 	wrctl	ienable,r2
  814444:	e0bffd17 	ldw	r2,-12(fp)
  814448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81444c:	e0bffa17 	ldw	r2,-24(fp)
  814450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814454:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814458:	e037883a 	mov	sp,fp
  81445c:	df000017 	ldw	fp,0(sp)
  814460:	dec00104 	addi	sp,sp,4
  814464:	f800283a 	ret

00814468 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814468:	defffc04 	addi	sp,sp,-16
  81446c:	df000315 	stw	fp,12(sp)
  814470:	df000304 	addi	fp,sp,12
  814474:	e13ffe15 	stw	r4,-8(fp)
  814478:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81447c:	000530fa 	rdctl	r2,ienable
  814480:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814484:	e0ffff17 	ldw	r3,-4(fp)
  814488:	00800044 	movi	r2,1
  81448c:	10c4983a 	sll	r2,r2,r3
  814490:	1007883a 	mov	r3,r2
  814494:	e0bffd17 	ldw	r2,-12(fp)
  814498:	1884703a 	and	r2,r3,r2
  81449c:	1004c03a 	cmpne	r2,r2,zero
}
  8144a0:	e037883a 	mov	sp,fp
  8144a4:	df000017 	ldw	fp,0(sp)
  8144a8:	dec00104 	addi	sp,sp,4
  8144ac:	f800283a 	ret

008144b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8144b0:	defff404 	addi	sp,sp,-48
  8144b4:	dfc00b15 	stw	ra,44(sp)
  8144b8:	df000a15 	stw	fp,40(sp)
  8144bc:	df000a04 	addi	fp,sp,40
  8144c0:	e13ffb15 	stw	r4,-20(fp)
  8144c4:	e17ffc15 	stw	r5,-16(fp)
  8144c8:	e1bffd15 	stw	r6,-12(fp)
  8144cc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8144d0:	00bffa84 	movi	r2,-22
  8144d4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8144d8:	e0bffc17 	ldw	r2,-16(fp)
  8144dc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8144e0:	e0bff917 	ldw	r2,-28(fp)
  8144e4:	10800808 	cmpgei	r2,r2,32
  8144e8:	1000291e 	bne	r2,zero,814590 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8144ec:	0005303a 	rdctl	r2,status
  8144f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8144f4:	e0fff717 	ldw	r3,-36(fp)
  8144f8:	00bfff84 	movi	r2,-2
  8144fc:	1884703a 	and	r2,r3,r2
  814500:	1001703a 	wrctl	status,r2
  
  return context;
  814504:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814508:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81450c:	e0bff917 	ldw	r2,-28(fp)
  814510:	00c020b4 	movhi	r3,130
  814514:	18e40304 	addi	r3,r3,-28660
  814518:	100490fa 	slli	r2,r2,3
  81451c:	10c7883a 	add	r3,r2,r3
  814520:	e0bffd17 	ldw	r2,-12(fp)
  814524:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814528:	e0bff917 	ldw	r2,-28(fp)
  81452c:	00c020b4 	movhi	r3,130
  814530:	18e40304 	addi	r3,r3,-28660
  814534:	100490fa 	slli	r2,r2,3
  814538:	10c5883a 	add	r2,r2,r3
  81453c:	10c00104 	addi	r3,r2,4
  814540:	e0bffe17 	ldw	r2,-8(fp)
  814544:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814548:	e0bffd17 	ldw	r2,-12(fp)
  81454c:	1005003a 	cmpeq	r2,r2,zero
  814550:	1000051e 	bne	r2,zero,814568 <alt_iic_isr_register+0xb8>
  814554:	e17ff917 	ldw	r5,-28(fp)
  814558:	e13ffb17 	ldw	r4,-20(fp)
  81455c:	081432c0 	call	81432c <alt_ic_irq_enable>
  814560:	e0bfff15 	stw	r2,-4(fp)
  814564:	00000406 	br	814578 <alt_iic_isr_register+0xc8>
  814568:	e17ff917 	ldw	r5,-28(fp)
  81456c:	e13ffb17 	ldw	r4,-20(fp)
  814570:	08143c80 	call	8143c8 <alt_ic_irq_disable>
  814574:	e0bfff15 	stw	r2,-4(fp)
  814578:	e0bfff17 	ldw	r2,-4(fp)
  81457c:	e0bffa15 	stw	r2,-24(fp)
  814580:	e0bff817 	ldw	r2,-32(fp)
  814584:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814588:	e0bff617 	ldw	r2,-40(fp)
  81458c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814590:	e0bffa17 	ldw	r2,-24(fp)
}
  814594:	e037883a 	mov	sp,fp
  814598:	dfc00117 	ldw	ra,4(sp)
  81459c:	df000017 	ldw	fp,0(sp)
  8145a0:	dec00204 	addi	sp,sp,8
  8145a4:	f800283a 	ret

008145a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8145a8:	defff904 	addi	sp,sp,-28
  8145ac:	dfc00615 	stw	ra,24(sp)
  8145b0:	df000515 	stw	fp,20(sp)
  8145b4:	df000504 	addi	fp,sp,20
  8145b8:	e13ffc15 	stw	r4,-16(fp)
  8145bc:	e17ffd15 	stw	r5,-12(fp)
  8145c0:	e1bffe15 	stw	r6,-8(fp)
  8145c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8145c8:	e13ffd17 	ldw	r4,-12(fp)
  8145cc:	e17ffe17 	ldw	r5,-8(fp)
  8145d0:	e1bfff17 	ldw	r6,-4(fp)
  8145d4:	08110dc0 	call	8110dc <open>
  8145d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8145dc:	e0bffb17 	ldw	r2,-20(fp)
  8145e0:	1004803a 	cmplt	r2,r2,zero
  8145e4:	10001c1e 	bne	r2,zero,814658 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8145e8:	e0bffb17 	ldw	r2,-20(fp)
  8145ec:	00c02074 	movhi	r3,129
  8145f0:	18d74f04 	addi	r3,r3,23868
  8145f4:	10800324 	muli	r2,r2,12
  8145f8:	10c5883a 	add	r2,r2,r3
  8145fc:	10c00017 	ldw	r3,0(r2)
  814600:	e0bffc17 	ldw	r2,-16(fp)
  814604:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814608:	e0bffb17 	ldw	r2,-20(fp)
  81460c:	00c02074 	movhi	r3,129
  814610:	18d74f04 	addi	r3,r3,23868
  814614:	10800324 	muli	r2,r2,12
  814618:	10c5883a 	add	r2,r2,r3
  81461c:	10800104 	addi	r2,r2,4
  814620:	10c00017 	ldw	r3,0(r2)
  814624:	e0bffc17 	ldw	r2,-16(fp)
  814628:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81462c:	e0bffb17 	ldw	r2,-20(fp)
  814630:	00c02074 	movhi	r3,129
  814634:	18d74f04 	addi	r3,r3,23868
  814638:	10800324 	muli	r2,r2,12
  81463c:	10c5883a 	add	r2,r2,r3
  814640:	10800204 	addi	r2,r2,8
  814644:	10c00017 	ldw	r3,0(r2)
  814648:	e0bffc17 	ldw	r2,-16(fp)
  81464c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  814650:	e13ffb17 	ldw	r4,-20(fp)
  814654:	08114440 	call	811444 <alt_release_fd>
  }
} 
  814658:	e037883a 	mov	sp,fp
  81465c:	dfc00117 	ldw	ra,4(sp)
  814660:	df000017 	ldw	fp,0(sp)
  814664:	dec00204 	addi	sp,sp,8
  814668:	f800283a 	ret

0081466c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81466c:	defffb04 	addi	sp,sp,-20
  814670:	dfc00415 	stw	ra,16(sp)
  814674:	df000315 	stw	fp,12(sp)
  814678:	df000304 	addi	fp,sp,12
  81467c:	e13ffd15 	stw	r4,-12(fp)
  814680:	e17ffe15 	stw	r5,-8(fp)
  814684:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814688:	01002074 	movhi	r4,129
  81468c:	21175204 	addi	r4,r4,23880
  814690:	e17ffd17 	ldw	r5,-12(fp)
  814694:	01800044 	movi	r6,1
  814698:	01c07fc4 	movi	r7,511
  81469c:	08145a80 	call	8145a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8146a0:	01002074 	movhi	r4,129
  8146a4:	21174f04 	addi	r4,r4,23868
  8146a8:	e17ffe17 	ldw	r5,-8(fp)
  8146ac:	000d883a 	mov	r6,zero
  8146b0:	01c07fc4 	movi	r7,511
  8146b4:	08145a80 	call	8145a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8146b8:	01002074 	movhi	r4,129
  8146bc:	21175504 	addi	r4,r4,23892
  8146c0:	e17fff17 	ldw	r5,-4(fp)
  8146c4:	01800044 	movi	r6,1
  8146c8:	01c07fc4 	movi	r7,511
  8146cc:	08145a80 	call	8145a8 <alt_open_fd>
}  
  8146d0:	e037883a 	mov	sp,fp
  8146d4:	dfc00117 	ldw	ra,4(sp)
  8146d8:	df000017 	ldw	fp,0(sp)
  8146dc:	dec00204 	addi	sp,sp,8
  8146e0:	f800283a 	ret

008146e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8146e4:	defffd04 	addi	sp,sp,-12
  8146e8:	dfc00215 	stw	ra,8(sp)
  8146ec:	df000115 	stw	fp,4(sp)
  8146f0:	df000104 	addi	fp,sp,4
  8146f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8146f8:	e13fff17 	ldw	r4,-4(fp)
  8146fc:	08147340 	call	814734 <alt_busy_sleep>
}
  814700:	e037883a 	mov	sp,fp
  814704:	dfc00117 	ldw	ra,4(sp)
  814708:	df000017 	ldw	fp,0(sp)
  81470c:	dec00204 	addi	sp,sp,8
  814710:	f800283a 	ret

00814714 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814714:	deffff04 	addi	sp,sp,-4
  814718:	df000015 	stw	fp,0(sp)
  81471c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814720:	000170fa 	wrctl	ienable,zero
}
  814724:	e037883a 	mov	sp,fp
  814728:	df000017 	ldw	fp,0(sp)
  81472c:	dec00104 	addi	sp,sp,4
  814730:	f800283a 	ret

00814734 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  814734:	defffa04 	addi	sp,sp,-24
  814738:	dfc00515 	stw	ra,20(sp)
  81473c:	df000415 	stw	fp,16(sp)
  814740:	df000404 	addi	fp,sp,16
  814744:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  814748:	008000c4 	movi	r2,3
  81474c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  814750:	e0fffc17 	ldw	r3,-16(fp)
  814754:	008003f4 	movhi	r2,15
  814758:	10909004 	addi	r2,r2,16960
  81475c:	188b383a 	mul	r5,r3,r2
  814760:	0100bef4 	movhi	r4,763
  814764:	213c2004 	addi	r4,r4,-3968
  814768:	080fd880 	call	80fd88 <__udivsi3>
  81476c:	100b883a 	mov	r5,r2
  814770:	01200034 	movhi	r4,32768
  814774:	213fffc4 	addi	r4,r4,-1
  814778:	080fd880 	call	80fd88 <__udivsi3>
  81477c:	100b883a 	mov	r5,r2
  814780:	e13fff17 	ldw	r4,-4(fp)
  814784:	080fd880 	call	80fd88 <__udivsi3>
  814788:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81478c:	e0bffd17 	ldw	r2,-12(fp)
  814790:	1005003a 	cmpeq	r2,r2,zero
  814794:	1000281e 	bne	r2,zero,814838 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  814798:	e03ffe15 	stw	zero,-8(fp)
  81479c:	00001606 	br	8147f8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8147a0:	00a00034 	movhi	r2,32768
  8147a4:	10bfffc4 	addi	r2,r2,-1
  8147a8:	10bfffc4 	addi	r2,r2,-1
  8147ac:	103ffe1e 	bne	r2,zero,8147a8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8147b0:	e0fffc17 	ldw	r3,-16(fp)
  8147b4:	008003f4 	movhi	r2,15
  8147b8:	10909004 	addi	r2,r2,16960
  8147bc:	188b383a 	mul	r5,r3,r2
  8147c0:	0100bef4 	movhi	r4,763
  8147c4:	213c2004 	addi	r4,r4,-3968
  8147c8:	080fd880 	call	80fd88 <__udivsi3>
  8147cc:	100b883a 	mov	r5,r2
  8147d0:	01200034 	movhi	r4,32768
  8147d4:	213fffc4 	addi	r4,r4,-1
  8147d8:	080fd880 	call	80fd88 <__udivsi3>
  8147dc:	1007883a 	mov	r3,r2
  8147e0:	e0bfff17 	ldw	r2,-4(fp)
  8147e4:	10c5c83a 	sub	r2,r2,r3
  8147e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8147ec:	e0bffe17 	ldw	r2,-8(fp)
  8147f0:	10800044 	addi	r2,r2,1
  8147f4:	e0bffe15 	stw	r2,-8(fp)
  8147f8:	e0fffe17 	ldw	r3,-8(fp)
  8147fc:	e0bffd17 	ldw	r2,-12(fp)
  814800:	18bfe716 	blt	r3,r2,8147a0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814804:	e0fffc17 	ldw	r3,-16(fp)
  814808:	008003f4 	movhi	r2,15
  81480c:	10909004 	addi	r2,r2,16960
  814810:	188b383a 	mul	r5,r3,r2
  814814:	0100bef4 	movhi	r4,763
  814818:	213c2004 	addi	r4,r4,-3968
  81481c:	080fd880 	call	80fd88 <__udivsi3>
  814820:	1007883a 	mov	r3,r2
  814824:	e0bfff17 	ldw	r2,-4(fp)
  814828:	1885383a 	mul	r2,r3,r2
  81482c:	10bfffc4 	addi	r2,r2,-1
  814830:	103ffe1e 	bne	r2,zero,81482c <alt_busy_sleep+0xf8>
  814834:	00000c06 	br	814868 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814838:	e0fffc17 	ldw	r3,-16(fp)
  81483c:	008003f4 	movhi	r2,15
  814840:	10909004 	addi	r2,r2,16960
  814844:	188b383a 	mul	r5,r3,r2
  814848:	0100bef4 	movhi	r4,763
  81484c:	213c2004 	addi	r4,r4,-3968
  814850:	080fd880 	call	80fd88 <__udivsi3>
  814854:	1007883a 	mov	r3,r2
  814858:	e0bfff17 	ldw	r2,-4(fp)
  81485c:	1885383a 	mul	r2,r3,r2
  814860:	10bfffc4 	addi	r2,r2,-1
  814864:	00bffe16 	blt	zero,r2,814860 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  814868:	0005883a 	mov	r2,zero
}
  81486c:	e037883a 	mov	sp,fp
  814870:	dfc00117 	ldw	ra,4(sp)
  814874:	df000017 	ldw	fp,0(sp)
  814878:	dec00204 	addi	sp,sp,8
  81487c:	f800283a 	ret

00814880 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814880:	defffb04 	addi	sp,sp,-20
  814884:	df000415 	stw	fp,16(sp)
  814888:	df000404 	addi	fp,sp,16
  81488c:	e13ffe15 	stw	r4,-8(fp)
  814890:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814894:	e0bfff17 	ldw	r2,-4(fp)
  814898:	10840070 	cmpltui	r2,r2,4097
  81489c:	1000021e 	bne	r2,zero,8148a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8148a0:	00840004 	movi	r2,4096
  8148a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8148a8:	e0fffe17 	ldw	r3,-8(fp)
  8148ac:	e0bfff17 	ldw	r2,-4(fp)
  8148b0:	1885883a 	add	r2,r3,r2
  8148b4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148b8:	e0bffe17 	ldw	r2,-8(fp)
  8148bc:	e0bffd15 	stw	r2,-12(fp)
  8148c0:	00000506 	br	8148d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8148c4:	e0bffd17 	ldw	r2,-12(fp)
  8148c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148cc:	e0bffd17 	ldw	r2,-12(fp)
  8148d0:	10800804 	addi	r2,r2,32
  8148d4:	e0bffd15 	stw	r2,-12(fp)
  8148d8:	e0fffd17 	ldw	r3,-12(fp)
  8148dc:	e0bffc17 	ldw	r2,-16(fp)
  8148e0:	18bff836 	bltu	r3,r2,8148c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8148e4:	e0bffe17 	ldw	r2,-8(fp)
  8148e8:	108007cc 	andi	r2,r2,31
  8148ec:	1005003a 	cmpeq	r2,r2,zero
  8148f0:	1000021e 	bne	r2,zero,8148fc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8148f4:	e0bffd17 	ldw	r2,-12(fp)
  8148f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8148fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814900:	e037883a 	mov	sp,fp
  814904:	df000017 	ldw	fp,0(sp)
  814908:	dec00104 	addi	sp,sp,4
  81490c:	f800283a 	ret

00814910 <atexit>:
  814910:	200b883a 	mov	r5,r4
  814914:	000d883a 	mov	r6,zero
  814918:	0009883a 	mov	r4,zero
  81491c:	000f883a 	mov	r7,zero
  814920:	08149d01 	jmpi	8149d0 <__register_exitproc>

00814924 <exit>:
  814924:	defffe04 	addi	sp,sp,-8
  814928:	000b883a 	mov	r5,zero
  81492c:	dc000015 	stw	r16,0(sp)
  814930:	dfc00115 	stw	ra,4(sp)
  814934:	2021883a 	mov	r16,r4
  814938:	0814b080 	call	814b08 <__call_exitprocs>
  81493c:	00802074 	movhi	r2,129
  814940:	109c4504 	addi	r2,r2,28948
  814944:	11000017 	ldw	r4,0(r2)
  814948:	20800f17 	ldw	r2,60(r4)
  81494c:	10000126 	beq	r2,zero,814954 <exit+0x30>
  814950:	103ee83a 	callr	r2
  814954:	8009883a 	mov	r4,r16
  814958:	0814cf80 	call	814cf8 <_exit>

0081495c <memcmp>:
  81495c:	00c000c4 	movi	r3,3
  814960:	1980032e 	bgeu	r3,r6,814970 <memcmp+0x14>
  814964:	2144b03a 	or	r2,r4,r5
  814968:	10c4703a 	and	r2,r2,r3
  81496c:	10000f26 	beq	r2,zero,8149ac <memcmp+0x50>
  814970:	31ffffc4 	addi	r7,r6,-1
  814974:	3000061e 	bne	r6,zero,814990 <memcmp+0x34>
  814978:	00000a06 	br	8149a4 <memcmp+0x48>
  81497c:	39ffffc4 	addi	r7,r7,-1
  814980:	00bfffc4 	movi	r2,-1
  814984:	21000044 	addi	r4,r4,1
  814988:	29400044 	addi	r5,r5,1
  81498c:	38800526 	beq	r7,r2,8149a4 <memcmp+0x48>
  814990:	20c00003 	ldbu	r3,0(r4)
  814994:	28800003 	ldbu	r2,0(r5)
  814998:	18bff826 	beq	r3,r2,81497c <memcmp+0x20>
  81499c:	1885c83a 	sub	r2,r3,r2
  8149a0:	f800283a 	ret
  8149a4:	0005883a 	mov	r2,zero
  8149a8:	f800283a 	ret
  8149ac:	180f883a 	mov	r7,r3
  8149b0:	20c00017 	ldw	r3,0(r4)
  8149b4:	28800017 	ldw	r2,0(r5)
  8149b8:	18bfed1e 	bne	r3,r2,814970 <memcmp+0x14>
  8149bc:	31bfff04 	addi	r6,r6,-4
  8149c0:	21000104 	addi	r4,r4,4
  8149c4:	29400104 	addi	r5,r5,4
  8149c8:	39bff936 	bltu	r7,r6,8149b0 <memcmp+0x54>
  8149cc:	003fe806 	br	814970 <memcmp+0x14>

008149d0 <__register_exitproc>:
  8149d0:	defffa04 	addi	sp,sp,-24
  8149d4:	00802074 	movhi	r2,129
  8149d8:	109c4504 	addi	r2,r2,28948
  8149dc:	dc000015 	stw	r16,0(sp)
  8149e0:	14000017 	ldw	r16,0(r2)
  8149e4:	dd000415 	stw	r20,16(sp)
  8149e8:	2829883a 	mov	r20,r5
  8149ec:	81405217 	ldw	r5,328(r16)
  8149f0:	dcc00315 	stw	r19,12(sp)
  8149f4:	dc800215 	stw	r18,8(sp)
  8149f8:	dc400115 	stw	r17,4(sp)
  8149fc:	dfc00515 	stw	ra,20(sp)
  814a00:	2023883a 	mov	r17,r4
  814a04:	3027883a 	mov	r19,r6
  814a08:	3825883a 	mov	r18,r7
  814a0c:	28002526 	beq	r5,zero,814aa4 <__register_exitproc+0xd4>
  814a10:	29000117 	ldw	r4,4(r5)
  814a14:	008007c4 	movi	r2,31
  814a18:	11002716 	blt	r2,r4,814ab8 <__register_exitproc+0xe8>
  814a1c:	8800101e 	bne	r17,zero,814a60 <__register_exitproc+0x90>
  814a20:	2105883a 	add	r2,r4,r4
  814a24:	1085883a 	add	r2,r2,r2
  814a28:	20c00044 	addi	r3,r4,1
  814a2c:	1145883a 	add	r2,r2,r5
  814a30:	0009883a 	mov	r4,zero
  814a34:	15000215 	stw	r20,8(r2)
  814a38:	28c00115 	stw	r3,4(r5)
  814a3c:	2005883a 	mov	r2,r4
  814a40:	dfc00517 	ldw	ra,20(sp)
  814a44:	dd000417 	ldw	r20,16(sp)
  814a48:	dcc00317 	ldw	r19,12(sp)
  814a4c:	dc800217 	ldw	r18,8(sp)
  814a50:	dc400117 	ldw	r17,4(sp)
  814a54:	dc000017 	ldw	r16,0(sp)
  814a58:	dec00604 	addi	sp,sp,24
  814a5c:	f800283a 	ret
  814a60:	29802204 	addi	r6,r5,136
  814a64:	00800044 	movi	r2,1
  814a68:	110e983a 	sll	r7,r2,r4
  814a6c:	30c04017 	ldw	r3,256(r6)
  814a70:	2105883a 	add	r2,r4,r4
  814a74:	1085883a 	add	r2,r2,r2
  814a78:	1185883a 	add	r2,r2,r6
  814a7c:	19c6b03a 	or	r3,r3,r7
  814a80:	14802015 	stw	r18,128(r2)
  814a84:	14c00015 	stw	r19,0(r2)
  814a88:	00800084 	movi	r2,2
  814a8c:	30c04015 	stw	r3,256(r6)
  814a90:	88bfe31e 	bne	r17,r2,814a20 <__register_exitproc+0x50>
  814a94:	30804117 	ldw	r2,260(r6)
  814a98:	11c4b03a 	or	r2,r2,r7
  814a9c:	30804115 	stw	r2,260(r6)
  814aa0:	003fdf06 	br	814a20 <__register_exitproc+0x50>
  814aa4:	008020b4 	movhi	r2,130
  814aa8:	10a44304 	addi	r2,r2,-28404
  814aac:	100b883a 	mov	r5,r2
  814ab0:	80805215 	stw	r2,328(r16)
  814ab4:	003fd606 	br	814a10 <__register_exitproc+0x40>
  814ab8:	00800034 	movhi	r2,0
  814abc:	10800004 	addi	r2,r2,0
  814ac0:	1000021e 	bne	r2,zero,814acc <__register_exitproc+0xfc>
  814ac4:	013fffc4 	movi	r4,-1
  814ac8:	003fdc06 	br	814a3c <__register_exitproc+0x6c>
  814acc:	01006404 	movi	r4,400
  814ad0:	103ee83a 	callr	r2
  814ad4:	1007883a 	mov	r3,r2
  814ad8:	103ffa26 	beq	r2,zero,814ac4 <__register_exitproc+0xf4>
  814adc:	80805217 	ldw	r2,328(r16)
  814ae0:	180b883a 	mov	r5,r3
  814ae4:	18000115 	stw	zero,4(r3)
  814ae8:	18800015 	stw	r2,0(r3)
  814aec:	80c05215 	stw	r3,328(r16)
  814af0:	18006215 	stw	zero,392(r3)
  814af4:	18006315 	stw	zero,396(r3)
  814af8:	0009883a 	mov	r4,zero
  814afc:	883fc826 	beq	r17,zero,814a20 <__register_exitproc+0x50>
  814b00:	003fd706 	br	814a60 <__register_exitproc+0x90>

00814b04 <register_fini>:
  814b04:	f800283a 	ret

00814b08 <__call_exitprocs>:
  814b08:	00802074 	movhi	r2,129
  814b0c:	109c4504 	addi	r2,r2,28948
  814b10:	10800017 	ldw	r2,0(r2)
  814b14:	defff304 	addi	sp,sp,-52
  814b18:	df000b15 	stw	fp,44(sp)
  814b1c:	d8800115 	stw	r2,4(sp)
  814b20:	00800034 	movhi	r2,0
  814b24:	10800004 	addi	r2,r2,0
  814b28:	1005003a 	cmpeq	r2,r2,zero
  814b2c:	d8800215 	stw	r2,8(sp)
  814b30:	d8800117 	ldw	r2,4(sp)
  814b34:	dd400815 	stw	r21,32(sp)
  814b38:	dd000715 	stw	r20,28(sp)
  814b3c:	10805204 	addi	r2,r2,328
  814b40:	dfc00c15 	stw	ra,48(sp)
  814b44:	ddc00a15 	stw	r23,40(sp)
  814b48:	dd800915 	stw	r22,36(sp)
  814b4c:	dcc00615 	stw	r19,24(sp)
  814b50:	dc800515 	stw	r18,20(sp)
  814b54:	dc400415 	stw	r17,16(sp)
  814b58:	dc000315 	stw	r16,12(sp)
  814b5c:	282b883a 	mov	r21,r5
  814b60:	2039883a 	mov	fp,r4
  814b64:	d8800015 	stw	r2,0(sp)
  814b68:	2829003a 	cmpeq	r20,r5,zero
  814b6c:	d8800117 	ldw	r2,4(sp)
  814b70:	14405217 	ldw	r17,328(r2)
  814b74:	88001026 	beq	r17,zero,814bb8 <__call_exitprocs+0xb0>
  814b78:	ddc00017 	ldw	r23,0(sp)
  814b7c:	88800117 	ldw	r2,4(r17)
  814b80:	8c802204 	addi	r18,r17,136
  814b84:	143fffc4 	addi	r16,r2,-1
  814b88:	80000916 	blt	r16,zero,814bb0 <__call_exitprocs+0xa8>
  814b8c:	05bfffc4 	movi	r22,-1
  814b90:	a000151e 	bne	r20,zero,814be8 <__call_exitprocs+0xe0>
  814b94:	8409883a 	add	r4,r16,r16
  814b98:	2105883a 	add	r2,r4,r4
  814b9c:	1485883a 	add	r2,r2,r18
  814ba0:	10c02017 	ldw	r3,128(r2)
  814ba4:	a8c01126 	beq	r21,r3,814bec <__call_exitprocs+0xe4>
  814ba8:	843fffc4 	addi	r16,r16,-1
  814bac:	85bff81e 	bne	r16,r22,814b90 <__call_exitprocs+0x88>
  814bb0:	d8800217 	ldw	r2,8(sp)
  814bb4:	10003126 	beq	r2,zero,814c7c <__call_exitprocs+0x174>
  814bb8:	dfc00c17 	ldw	ra,48(sp)
  814bbc:	df000b17 	ldw	fp,44(sp)
  814bc0:	ddc00a17 	ldw	r23,40(sp)
  814bc4:	dd800917 	ldw	r22,36(sp)
  814bc8:	dd400817 	ldw	r21,32(sp)
  814bcc:	dd000717 	ldw	r20,28(sp)
  814bd0:	dcc00617 	ldw	r19,24(sp)
  814bd4:	dc800517 	ldw	r18,20(sp)
  814bd8:	dc400417 	ldw	r17,16(sp)
  814bdc:	dc000317 	ldw	r16,12(sp)
  814be0:	dec00d04 	addi	sp,sp,52
  814be4:	f800283a 	ret
  814be8:	8409883a 	add	r4,r16,r16
  814bec:	88c00117 	ldw	r3,4(r17)
  814bf0:	2105883a 	add	r2,r4,r4
  814bf4:	1445883a 	add	r2,r2,r17
  814bf8:	18ffffc4 	addi	r3,r3,-1
  814bfc:	11800217 	ldw	r6,8(r2)
  814c00:	1c001526 	beq	r3,r16,814c58 <__call_exitprocs+0x150>
  814c04:	10000215 	stw	zero,8(r2)
  814c08:	303fe726 	beq	r6,zero,814ba8 <__call_exitprocs+0xa0>
  814c0c:	00c00044 	movi	r3,1
  814c10:	1c06983a 	sll	r3,r3,r16
  814c14:	90804017 	ldw	r2,256(r18)
  814c18:	8cc00117 	ldw	r19,4(r17)
  814c1c:	1884703a 	and	r2,r3,r2
  814c20:	10001426 	beq	r2,zero,814c74 <__call_exitprocs+0x16c>
  814c24:	90804117 	ldw	r2,260(r18)
  814c28:	1884703a 	and	r2,r3,r2
  814c2c:	10000c1e 	bne	r2,zero,814c60 <__call_exitprocs+0x158>
  814c30:	2105883a 	add	r2,r4,r4
  814c34:	1485883a 	add	r2,r2,r18
  814c38:	11400017 	ldw	r5,0(r2)
  814c3c:	e009883a 	mov	r4,fp
  814c40:	303ee83a 	callr	r6
  814c44:	88800117 	ldw	r2,4(r17)
  814c48:	98bfc81e 	bne	r19,r2,814b6c <__call_exitprocs+0x64>
  814c4c:	b8800017 	ldw	r2,0(r23)
  814c50:	147fd526 	beq	r2,r17,814ba8 <__call_exitprocs+0xa0>
  814c54:	003fc506 	br	814b6c <__call_exitprocs+0x64>
  814c58:	8c000115 	stw	r16,4(r17)
  814c5c:	003fea06 	br	814c08 <__call_exitprocs+0x100>
  814c60:	2105883a 	add	r2,r4,r4
  814c64:	1485883a 	add	r2,r2,r18
  814c68:	11000017 	ldw	r4,0(r2)
  814c6c:	303ee83a 	callr	r6
  814c70:	003ff406 	br	814c44 <__call_exitprocs+0x13c>
  814c74:	303ee83a 	callr	r6
  814c78:	003ff206 	br	814c44 <__call_exitprocs+0x13c>
  814c7c:	88800117 	ldw	r2,4(r17)
  814c80:	1000081e 	bne	r2,zero,814ca4 <__call_exitprocs+0x19c>
  814c84:	89000017 	ldw	r4,0(r17)
  814c88:	20000726 	beq	r4,zero,814ca8 <__call_exitprocs+0x1a0>
  814c8c:	b9000015 	stw	r4,0(r23)
  814c90:	8809883a 	mov	r4,r17
  814c94:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  814c98:	bc400017 	ldw	r17,0(r23)
  814c9c:	883fb71e 	bne	r17,zero,814b7c <__call_exitprocs+0x74>
  814ca0:	003fc506 	br	814bb8 <__call_exitprocs+0xb0>
  814ca4:	89000017 	ldw	r4,0(r17)
  814ca8:	882f883a 	mov	r23,r17
  814cac:	2023883a 	mov	r17,r4
  814cb0:	883fb21e 	bne	r17,zero,814b7c <__call_exitprocs+0x74>
  814cb4:	003fc006 	br	814bb8 <__call_exitprocs+0xb0>

00814cb8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814cb8:	defffd04 	addi	sp,sp,-12
  814cbc:	df000215 	stw	fp,8(sp)
  814cc0:	df000204 	addi	fp,sp,8
  814cc4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814cc8:	e0bfff17 	ldw	r2,-4(fp)
  814ccc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814cd0:	e0bffe17 	ldw	r2,-8(fp)
  814cd4:	1005003a 	cmpeq	r2,r2,zero
  814cd8:	1000021e 	bne	r2,zero,814ce4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814cdc:	002af070 	cmpltui	zero,zero,43969
  814ce0:	00000106 	br	814ce8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814ce4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814ce8:	e037883a 	mov	sp,fp
  814cec:	df000017 	ldw	fp,0(sp)
  814cf0:	dec00104 	addi	sp,sp,4
  814cf4:	f800283a 	ret

00814cf8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814cf8:	defffd04 	addi	sp,sp,-12
  814cfc:	dfc00215 	stw	ra,8(sp)
  814d00:	df000115 	stw	fp,4(sp)
  814d04:	df000104 	addi	fp,sp,4
  814d08:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814d0c:	e13fff17 	ldw	r4,-4(fp)
  814d10:	0814cb80 	call	814cb8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814d14:	003fff06 	br	814d14 <_exit+0x1c>
  814d18:	00814b04 	movi	r2,1324
