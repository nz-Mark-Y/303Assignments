
alproject_final.elf:     file format elf32-littlenios2
alproject_final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000153b8 memsz 0x000153b8 flags r-x
    LOAD off    0x000163d8 vaddr 0x008153d8 paddr 0x00817098 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x00018d58 vaddr 0x00818d58 paddr 0x00818d58 align 2**12
         filesz 0x00000000 memsz 0x00000460 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014abc  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000768  00814c70  00814c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  008153d8  00817098  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000460  00818d58  00818d58  00018d58  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  000180c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bbe  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003756a  00000000  00000000  0001ae96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bb63  00000000  00000000  00052400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001daef  00000000  00000000  0005df63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002518  00000000  00000000  0007ba54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d76  00000000  00000000  0007df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012b95  00000000  00000000  00080ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00093878  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  000938d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000985dd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000985e0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000985e3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000985e4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000985e5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000985e9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000985ed  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000985f1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000985fa  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00098603  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0009860c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  00098612  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  0009862d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814c70 l    d  .rodata	00000000 .rodata
008153d8 l    d  .rwdata	00000000 .rwdata
00818d58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00818d58 l     O .bss	00000004 tlc_timer_event
00818d5c l     O .bss	00000004 pedestrianNS
00818d60 l     O .bss	00000004 pedestrianEW
00818d64 l     O .bss	00000004 newTimeoutValues
00818d68 l     O .bss	00000004 timerHit
00818d6c l     O .bss	00000004 vehicle_detected
008153d8 l     O .rwdata	00000018 timeout
00818d70 l     O .bss	00000004 valueCount
008153f0 l     O .rwdata	00000018 tempBuffer
00818d74 l     O .bss	00000004 mode
00815408 l     O .rwdata	00000010 proc_state
00817048 l     O .rwdata	00000004 camera_count
0081704c l     O .rwdata	00000004 buttonValue
00818d78 l     O .bss	00000004 snapshotTaken
00818d7c l     O .bss	00000004 timeTaken
00818d80 l     O .bss	00000004 toPrint
00818dc4 l     O .bss	00000018 tlc_timer
00818d84 l     O .bss	00000004 c
00818d88 l     O .bss	00000004 timeoutValue
00818df4 l     O .bss	0000000a countString
00818ddc l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
008014ec l     F .text	00000058 std
008015f8 l     F .text	00000008 __fp_lock
00801600 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815418 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803e08 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00803fc8 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080429c l     F .text	00000058 __sprint_r
00814df8 l     O .rodata	00000010 blanks.3452
00814de8 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814e10 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814f38 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807b68 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00817068 l     O .rwdata	00000004 charset
008150d8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
00815220 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080ab48 l     F .text	00000048 match
00815c40 l     O .rwdata	00000014 fpi.1950
0081523c l     O .rodata	00000028 tinytens
00815c2c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080cfc0 l     F .text	00000024 htinit
0080d04c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d8b4 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080e978 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fba0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008107cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081082c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0081092c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810c0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810cec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810e48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810f54 l     F .text	000000dc alt_file_locked
008111b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00811338 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817088 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811778 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815dfc l     O .rwdata	00001060 jtag_uart
00816e5c l     O .rwdata	00000120 lcd
00816f7c l     O .rwdata	000000c4 uart
008118a0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811ae0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00811d08 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00817094 l     O .rwdata	00000004 colstart
00812384 l     F .text	000000b8 lcd_write_command
0081243c l     F .text	000000d4 lcd_write_data
00812510 l     F .text	000000c4 lcd_clear_screen
008125d4 l     F .text	000001ec lcd_repaint_screen
008127c0 l     F .text	000000c8 lcd_scroll_up
00812888 l     F .text	000002d0 lcd_handle_escape
00813064 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008132c4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00813584 l     F .text	0000009c altera_avalon_uart_irq
00813620 l     F .text	000000e0 altera_avalon_uart_rxirq
00813700 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813aec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813d14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813e6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008144fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814a58 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814c0c l     F .text	00000040 alt_sim_halt
00809cf4 g     F .text	00000094 _mprec_log10
00809de0 g     F .text	00000088 __any_on
00809610 g     F .text	00000070 _isatty_r
008151f8 g     O .rodata	00000028 __mprec_tinytens
00810ea8 g     F .text	0000006c alt_main
0080359c g     F .text	000000a0 _puts_r
00818f28 g     O .bss	00000100 alt_irq
00809770 g     F .text	00000078 _lseek_r
00817098 g       *ABS*	00000000 __flash_rwdata_start
00809334 g     F .text	000000a0 __sflags
0080f498 g     F .text	00000088 __eqdf2
008191b8 g       *ABS*	00000000 __alt_heap_start
00800d28 g     F .text	00000060 printToUART
00803524 g     F .text	00000044 printf
008040e4 g     F .text	00000068 __sseek
00801554 g     F .text	000000a4 __sinit
008096d0 g     F .text	00000084 _setlocale_r
00801654 g     F .text	00000068 __sfmoreglue
0080cef0 g     F .text	0000001c ungetc
00810f34 g     F .text	00000020 __malloc_unlock
0080ab90 g     F .text	000014e4 _strtod_r
00818d8c g     O .bss	00000004 fp
00803334 g     F .text	000000e0 memmove
00801644 g     F .text	00000010 _cleanup
00809e68 g     F .text	000000bc _Balloc
0080f5a8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080224c g     F .text	00000074 _fstat_r
00818d90 g     O .bss	00000004 errno
00803e70 g     F .text	00000014 __srget
00807844 g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080fedc g     F .text	0000002c __make_fp
00818db4 g     O .bss	00000004 alt_argv
0081f040 g       *ABS*	00000000 _gp
00814638 g     F .text	00000030 usleep
008003cc g     F .text	000000ac tlc_timer_isr
00815c7c g     O .rwdata	00000180 alt_fd_list
00813f94 g     F .text	00000094 alt_find_dev
00803294 g     F .text	000000a0 memcpy
0080d900 g     F .text	00000248 __hexnan
00800ad4 g     F .text	000000bc camera_timer_isr
00801638 g     F .text	0000000c _cleanup_r
0080f7c8 g     F .text	000000f8 __floatsidf
008145c0 g     F .text	00000078 alt_io_redirect
0080f6b8 g     F .text	00000088 __ltdf2
00814c70 g       *ABS*	00000000 __DTOR_END__
0080363c g     F .text	00000014 puts
00809868 g     F .text	00000040 mbrtowc
00807868 g     F .text	00000068 _vfscanf_r
00809c44 g     F .text	000000b0 __ratio
00800588 g     F .text	000001dc pedestrian_tlc
00811f20 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803568 g     F .text	00000034 _printf_r
0080fcdc g     F .text	00000008 __udivsi3
00810b4c g     F .text	000000c0 isatty
00809680 g     F .text	0000002c iswspace
00815108 g     O .rodata	000000c8 __mprec_tens
008096ac g     F .text	00000008 __locale_charset
0080dbe0 g     F .text	000000a4 __fixunsdfsi
008147d4 g     F .text	00000090 alt_icache_flush
00818d94 g     O .bss	00000004 __malloc_top_pad
0080c964 g     F .text	00000024 strtoul
00817064 g     O .rwdata	00000004 __mb_cur_max
008096b4 g     F .text	0000000c _localeconv_r
0080c988 g     F .text	000002f0 _strtoull_r
0080a560 g     F .text	0000003c __i2b
008022c0 g     F .text	0000049c __sfvwrite_r
00803e84 g     F .text	00000070 _sbrk_r
00800764 g     F .text	000000d4 configurable_tlc
0080a8dc g     F .text	00000078 _read_r
00815c20 g     O .rwdata	0000000c __lc_ctype
0081707c g     O .rwdata	00000004 alt_max_fd
0081021c g     F .text	00000138 __unpack_d
00801070 g     F .text	00000110 _fclose_r
00801390 g     F .text	00000034 fflush
00818d98 g     O .bss	00000004 __malloc_max_sbrked_mem
0081098c g     F .text	000001c0 alt_irq_register
0080145c g     F .text	00000090 _fgetc_r
0080ee08 g     F .text	00000074 __adddf3
0080e810 g     F .text	00000078 __nesf2
00809b24 g     F .text	00000120 __b2d
0080e260 g     F .text	000005b0 __umoddi3
00810d58 g     F .text	000000f0 lseek
00817054 g     O .rwdata	00000004 _global_impure_ptr
00803650 g     F .text	000005f4 _realloc_r
008191b8 g       *ABS*	00000000 __bss_end
00814404 g     F .text	000000f8 alt_iic_isr_register
0081154c g     F .text	0000010c alt_tick
00818e28 g     O .bss	00000100 __hexdig
0080dc84 g     F .text	000005dc __udivdi3
008151d0 g     O .rodata	00000028 __mprec_bigtens
0080a7bc g     F .text	00000120 __s2b
0080fa0c g     F .text	00000194 __floatunsidf
00809a44 g     F .text	00000060 __mcmp
008134bc g     F .text	000000c8 altera_avalon_uart_init
00817060 g     O .rwdata	00000004 __ctype_ptr
00801620 g     F .text	00000018 __fp_lock_all
008143bc g     F .text	00000048 alt_ic_irq_enabled
008114b4 g     F .text	00000098 alt_alarm_stop
00800b90 g     F .text	00000198 camera_tlc
0080c3f8 g     F .text	00000024 strtol
00818dac g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815c54 g     O .rwdata	00000028 alt_dev_null
0080fd6c g     F .text	000000c8 __unpack_f
00813d74 g     F .text	00000044 alt_dcache_flush_all
00809910 g     F .text	00000070 __hi0bits
0080f8c0 g     F .text	000000d8 __fixdfsi
0080c198 g     F .text	0000001c strtod
00817098 g       *ABS*	00000000 __ram_rwdata_end
00817074 g     O .rwdata	00000008 alt_dev_list
00811658 g     F .text	00000120 write
0080e888 g     F .text	00000078 __gtsf2
008153d8 g       *ABS*	00000000 __ram_rodata_end
00810858 g     F .text	000000d4 fstat
008018bc g     F .text	0000002c fprintf
0080f740 g     F .text	00000088 __ledf2
0080a69c g     F .text	00000120 __pow5mult
00818da0 g     O .bss	00000004 __nlocale_changed
0080fce4 g     F .text	00000008 __umodsi3
008191b8 g       *ABS*	00000000 end
0081041c g     F .text	00000160 __pack_f
00812b58 g     F .text	0000050c altera_avalon_lcd_16207_write
00813b4c g     F .text	000001c8 altera_avalon_uart_write
00802228 g     F .text	00000024 fseek
00811a20 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814c6c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813334 g     F .text	00000090 alt_avalon_timer_sc_init
0081341c g     F .text	00000058 altera_avalon_uart_write_fd
0080fcec g     F .text	00000080 __clzsi2
00813474 g     F .text	00000048 altera_avalon_uart_close_fd
00812144 g     F .text	00000240 altera_avalon_jtag_uart_write
00801544 g     F .text	00000004 __sfp_lock_acquire
008031b0 g     F .text	000000e4 memchr
008042f4 g     F .text	00001eac ___vfprintf_internal_r
00803f68 g     F .text	00000060 _sprintf_r
00801ad8 g     F .text	00000314 _free_r
00814a5c g     F .text	000001b0 __call_exitprocs
00803e24 g     F .text	0000004c __srget_r
00818da4 g     O .bss	00000004 __mlocale_changed
0081705c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818dbc g     O .bss	00000004 _alt_tick_rate
0080c41c g     F .text	00000318 _strtoll_r
00817040 g     O .rwdata	00000005 chararray
0080a22c g     F .text	0000014c __lshift
00818dc0 g     O .bss	00000004 _alt_nticks
00811218 g     F .text	00000120 read
0081180c g     F .text	00000094 alt_sys_init
008034ac g     F .text	00000078 _open_r
00814924 g     F .text	00000134 __register_exitproc
0080a378 g     F .text	000001e8 __multiply
00811db8 g     F .text	00000074 altera_avalon_jtag_uart_close
008153d8 g       *ABS*	00000000 __ram_rwdata_start
00814c70 g       *ABS*	00000000 __ram_rodata_start
00818e00 g     O .bss	00000028 __malloc_current_mallinfo
00809f24 g     F .text	0000017c __d2b
008118d8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c734 g     F .text	00000230 _strtoul_r
00814148 g     F .text	000000b8 alt_get_fd
00814688 g     F .text	0000014c alt_busy_sleep
00810354 g     F .text	000000c8 __fpcmp_parts_d
00807af8 g     F .text	00000070 _close_r
008148b0 g     F .text	00000074 memcmp
00811988 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008191b8 g       *ABS*	00000000 __alt_stack_base
008119d0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804058 g     F .text	00000084 sscanf
008079bc g     F .text	0000013c __swsetup_r
0080f240 g     F .text	00000258 __divdf3
008016bc g     F .text	000000f0 __sfp
00809d88 g     F .text	00000058 __copybits
00815818 g     O .rwdata	00000408 __malloc_av_
00801550 g     F .text	00000004 __sinit_lock_release
0080ee7c g     F .text	000003c4 __muldf3
008041c8 g     F .text	00000060 __sread
008095d0 g     F .text	00000040 fread
00814028 g     F .text	00000120 alt_find_file
00813db8 g     F .text	000000b4 alt_dev_llist_insert
00810f14 g     F .text	00000020 __malloc_lock
008018e8 g     F .text	00000034 _fprintf_r
008113f8 g     F .text	000000bc sbrk
00801194 g     F .text	000001fc _fflush_r
0080cf0c g     F .text	000000b4 _calloc_r
008018a0 g     F .text	0000001c fopen
00818d58 g       *ABS*	00000000 __bss_start
00803414 g     F .text	00000098 memset
00800d88 g     F .text	000002e8 main
00818db8 g     O .bss	00000004 alt_envp
00818d9c g     O .bss	00000004 __malloc_max_total_mem
00811930 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e900 g     F .text	00000078 __ltsf2
008093d4 g     F .text	000001fc _fread_r
00813130 g     F .text	0000013c altera_avalon_lcd_16207_init
008040dc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00801180 g     F .text	00000014 fclose
0080c1b4 g     F .text	00000244 _strtol_r
0080f998 g     F .text	00000074 __truncdfsf2
00819028 g     O .bss	00000190 _atexit0
00807d80 g     F .text	000015b4 _dtoa_r
00802a70 g     F .text	00000740 _malloc_r
00817080 g     O .rwdata	00000004 alt_errno
0080cc78 g     F .text	000000dc __submore
00800478 g     F .text	000000b4 NSEW_ped_isr
00802824 g     F .text	000000b8 _fwalk
008098a8 g     F .text	00000040 _mbtowc_r
0080fc1c g     F .text	00000060 __divsi3
00815280 g     O .rodata	00000014 __thenan_df
008019ac g     F .text	0000012c _malloc_trim_r
00814c70 g       *ABS*	00000000 __CTOR_END__
0080aa8c g     F .text	000000bc strcmp
00814c70 g       *ABS*	00000000 __flash_rodata_start
00814c70 g       *ABS*	00000000 __DTOR_LIST__
0080f520 g     F .text	00000088 __nedf2
008117d8 g     F .text	00000034 alt_irq_init
00811398 g     F .text	00000060 alt_release_fd
008013c4 g     F .text	00000098 fgetc
00803ef4 g     F .text	00000074 sprintf
00815294 g     O .rodata	00000100 __clz_tab
00818da8 g     O .bss	00000004 _PathLocale
0080c074 g     F .text	00000124 strtof
00814864 g     F .text	00000014 atexit
00807944 g     F .text	00000078 _write_r
00809754 g     F .text	0000001c setlocale
0080aa84 g     F .text	00000008 nanf
00817050 g     O .rwdata	00000004 _impure_ptr
00818db0 g     O .bss	00000004 alt_argc
008097e8 g     F .text	00000080 _mbrtowc_r
00813f30 g     F .text	00000064 _do_dtors
00801dec g     F .text	0000043c _fseek_r
00800838 g     F .text	0000029c timeout_data_handler
00803c44 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809aa4 g     F .text	00000080 __ulp
0080a954 g     F .text	00000040 __isinfd
00801608 g     F .text	00000018 __fp_unlock_all
0081326c g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0081706c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008096c0 g     F .text	00000010 localeconv
00814230 g     F .text	00000050 alt_ic_isr_register
0080cfe4 g     F .text	00000068 __hexdig_init
00803fd0 g     F .text	00000088 _sscanf_r
00817098 g       *ABS*	00000000 _edata
008133c4 g     F .text	00000058 altera_avalon_uart_read_fd
008191b8 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008078d0 g     F .text	00000074 vfscanf
00811e2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080191c g     F .text	00000074 _fputs_r
0081431c g     F .text	000000a0 alt_ic_irq_disable
0080414c g     F .text	0000007c __swrite
00817058 g     O .rwdata	00000004 __malloc_trim_threshold
00814668 g     F .text	00000020 altera_nios2_qsys_irq_init
00814878 g     F .text	00000038 exit
0080275c g     F .text	000000c8 _fwalk_reent
0080a0a0 g     F .text	0000018c __mdiff
00800250 g     F .text	0000017c simple_tlc
0080fc7c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801548 g     F .text	00000004 __sfp_lock_release
0080a9c4 g     F .text	000000c0 __sccl
00800200 g     F .text	00000050 init_tlc
00814e34 g     O .rodata	00000101 _ctype_
0081385c g     F .text	00000060 altera_avalon_uart_close
0080fe34 g     F .text	000000a8 __fpcmp_parts_f
008017ac g     F .text	000000f4 _fopen_r
00814c4c g     F .text	00000020 _exit
0080a994 g     F .text	00000030 __isnand
0081057c g     F .text	00000154 alt_alarm_start
0080db48 g     F .text	00000098 __muldi3
008028dc g     F .text	00000194 __smakebuf_r
00804228 g     F .text	00000074 strlen
00811030 g     F .text	00000188 open
0080f630 g     F .text	00000088 __gedf2
0080d0fc g     F .text	000007b8 __gethex
00814200 g     F .text	00000030 alt_icache_flush_all
00801990 g     F .text	0000001c fputs
00817084 g     O .rwdata	00000004 alt_priority_mask
00814280 g     F .text	0000009c alt_ic_irq_enable
008061a0 g     F .text	00000024 __vfprintf_internal
008138bc g     F .text	00000230 altera_avalon_uart_read
0080ed88 g     F .text	00000080 __subdf3
00809980 g     F .text	000000c4 __lo0bits
008061c4 g     F .text	00001680 __svfscanf_r
0081708c g     O .rwdata	00000008 alt_alarm_list
0080cd54 g     F .text	0000019c _ungetc_r
00813ecc g     F .text	00000064 _do_ctors
008106d0 g     F .text	000000fc close
0080052c g     F .text	0000005c init_buttons_pio
00810c6c g     F .text	00000080 alt_load
0080ff08 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080154c g     F .text	00000004 __sinit_lock_acquire
0080a59c g     F .text	00000100 __multadd
008098e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e3ca04 	addi	r3,r3,-28888
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e3ca04 	addi	r3,r3,-28888
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bc1014 	ori	gp,gp,61504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a35614 	ori	r2,r2,36184

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e46e14 	ori	r3,r3,37304

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810c6c0 	call	810c6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810ea80 	call	810ea8 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:

/* DESCRIPTION: Initialise the traffic light controller for all modes
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a74d17 	ldw	r2,-25292(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	alt_alarm_start(&tlc_timer, timeout[0], tlc_timer_isr, timerContext); 					// Start the timer
  800218:	00802074 	movhi	r2,129
  80021c:	1094f604 	addi	r2,r2,21464
  800220:	11400017 	ldw	r5,0(r2)
  800224:	010020b4 	movhi	r4,130
  800228:	21237104 	addi	r4,r4,-29244
  80022c:	01802034 	movhi	r6,128
  800230:	3180f304 	addi	r6,r6,972
  800234:	e1ffff17 	ldw	r7,-4(fp)
  800238:	081057c0 	call	81057c <alt_alarm_start>
}
  80023c:	e037883a 	mov	sp,fp
  800240:	dfc00117 	ldw	ra,4(sp)
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00204 	addi	sp,sp,8
  80024c:	f800283a 	ret

00800250 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	dfc00215 	stw	ra,8(sp)
  800258:	df000115 	stw	fp,4(sp)
  80025c:	df000104 	addi	fp,sp,4
  800260:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800264:	e0bfff17 	ldw	r2,-4(fp)
  800268:	10800017 	ldw	r2,0(r2)
  80026c:	10bfffd8 	cmpnei	r2,r2,-1
  800270:	10000b1e 	bne	r2,zero,8002a0 <simple_tlc+0x50>
		init_tlc();
  800274:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800278:	e0bfff17 	ldw	r2,-4(fp)
  80027c:	10800017 	ldw	r2,0(r2)
  800280:	10c00044 	addi	r3,r2,1
  800284:	e0bfff17 	ldw	r2,-4(fp)
  800288:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);									// Both traffic lights will be red by default
  80028c:	00c04074 	movhi	r3,257
  800290:	18c41804 	addi	r3,r3,4192
  800294:	00800904 	movi	r2,36
  800298:	18800035 	stwio	r2,0(r3)
		return;
  80029c:	00004606 	br	8003b8 <simple_tlc+0x168>
	}

	if (tlc_timer_event == 1) { 															// Carry out a state transition when a timeout occurs
  8002a0:	d0a74617 	ldw	r2,-25320(gp)
  8002a4:	10800058 	cmpnei	r2,r2,1
  8002a8:	1000431e 	bne	r2,zero,8003b8 <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	1004c03a 	cmpne	r2,r2,zero
  8002b8:	1000081e 	bne	r2,zero,8002dc <simple_tlc+0x8c>
			*state = 1; // G, R
  8002bc:	e0ffff17 	ldw	r3,-4(fp)
  8002c0:	00800044 	movi	r2,1
  8002c4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C); 							// Turn on the appropriate LEDs
  8002c8:	00c04074 	movhi	r3,257
  8002cc:	18c41804 	addi	r3,r3,4192
  8002d0:	00800304 	movi	r2,12
  8002d4:	18800035 	stwio	r2,0(r3)
  8002d8:	00003606 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 1) {
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	10800058 	cmpnei	r2,r2,1
  8002e8:	1000081e 	bne	r2,zero,80030c <simple_tlc+0xbc>
			*state = 2; // Y, R
  8002ec:	e0ffff17 	ldw	r3,-4(fp)
  8002f0:	00800084 	movi	r2,2
  8002f4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8002f8:	00c04074 	movhi	r3,257
  8002fc:	18c41804 	addi	r3,r3,4192
  800300:	00800504 	movi	r2,20
  800304:	18800035 	stwio	r2,0(r3)
  800308:	00002a06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 2) {
  80030c:	e0bfff17 	ldw	r2,-4(fp)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800098 	cmpnei	r2,r2,2
  800318:	1000081e 	bne	r2,zero,80033c <simple_tlc+0xec>
			*state = 3; // R, R
  80031c:	e0ffff17 	ldw	r3,-4(fp)
  800320:	008000c4 	movi	r2,3
  800324:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800328:	00c04074 	movhi	r3,257
  80032c:	18c41804 	addi	r3,r3,4192
  800330:	00800904 	movi	r2,36
  800334:	18800035 	stwio	r2,0(r3)
  800338:	00001e06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 3) {
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	108000d8 	cmpnei	r2,r2,3
  800348:	1000081e 	bne	r2,zero,80036c <simple_tlc+0x11c>
			*state = 4; // R, G
  80034c:	e0ffff17 	ldw	r3,-4(fp)
  800350:	00800104 	movi	r2,4
  800354:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800358:	00c04074 	movhi	r3,257
  80035c:	18c41804 	addi	r3,r3,4192
  800360:	00800844 	movi	r2,33
  800364:	18800035 	stwio	r2,0(r3)
  800368:	00001206 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 4) {
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10800118 	cmpnei	r2,r2,4
  800378:	1000081e 	bne	r2,zero,80039c <simple_tlc+0x14c>
			*state = 5; // R, Y
  80037c:	e0ffff17 	ldw	r3,-4(fp)
  800380:	00800144 	movi	r2,5
  800384:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800388:	00c04074 	movhi	r3,257
  80038c:	18c41804 	addi	r3,r3,4192
  800390:	00800884 	movi	r2,34
  800394:	18800035 	stwio	r2,0(r3)
  800398:	00000606 	br	8003b4 <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8003a4:	00c04074 	movhi	r3,257
  8003a8:	18c41804 	addi	r3,r3,4192
  8003ac:	00800904 	movi	r2,36
  8003b0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8003b4:	d0274615 	stw	zero,-25320(gp)
		return;
	}
}
  8003b8:	e037883a 	mov	sp,fp
  8003bc:	dfc00117 	ldw	ra,4(sp)
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00204 	addi	sp,sp,8
  8003c8:	f800283a 	ret

008003cc <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  8003cc:	defffb04 	addi	sp,sp,-20
  8003d0:	dfc00415 	stw	ra,16(sp)
  8003d4:	df000315 	stw	fp,12(sp)
  8003d8:	df000304 	addi	fp,sp,12
  8003dc:	e13fff15 	stw	r4,-4(fp)
	int currentState = proc_state[mode];
  8003e0:	d0a74d17 	ldw	r2,-25292(gp)
  8003e4:	00c02074 	movhi	r3,129
  8003e8:	18d50204 	addi	r3,r3,21512
  8003ec:	1085883a 	add	r2,r2,r2
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	10c5883a 	add	r2,r2,r3
  8003f8:	10800017 	ldw	r2,0(r2)
  8003fc:	e0bffe15 	stw	r2,-8(fp)
	if (currentState != 5) {
  800400:	e0bffe17 	ldw	r2,-8(fp)
  800404:	10800160 	cmpeqi	r2,r2,5
  800408:	1000041e 	bne	r2,zero,80041c <tlc_timer_isr+0x50>
		currentState++;
  80040c:	e0bffe17 	ldw	r2,-8(fp)
  800410:	10800044 	addi	r2,r2,1
  800414:	e0bffe15 	stw	r2,-8(fp)
  800418:	00000106 	br	800420 <tlc_timer_isr+0x54>
	} else {
		currentState = 0;
  80041c:	e03ffe15 	stw	zero,-8(fp)
	}
	int	nextTimeout = timeout[currentState]; 											 	// Determine the next timeout value based on the current state
  800420:	e0bffe17 	ldw	r2,-8(fp)
  800424:	00c02074 	movhi	r3,129
  800428:	18d4f604 	addi	r3,r3,21464
  80042c:	1085883a 	add	r2,r2,r2
  800430:	1085883a 	add	r2,r2,r2
  800434:	10c5883a 	add	r2,r2,r3
  800438:	10800017 	ldw	r2,0(r2)
  80043c:	e0bffd15 	stw	r2,-12(fp)
	printf("next timeout: %d\n", nextTimeout);
  800440:	01002074 	movhi	r4,129
  800444:	21131c04 	addi	r4,r4,19568
  800448:	e17ffd17 	ldw	r5,-12(fp)
  80044c:	08035240 	call	803524 <printf>
	tlc_timer_event = 1;
  800450:	00800044 	movi	r2,1
  800454:	d0a74615 	stw	r2,-25320(gp)
	timerHit = 1;
  800458:	00800044 	movi	r2,1
  80045c:	d0a74a15 	stw	r2,-25304(gp)
	return nextTimeout;																		// Returns the time until the next timer interrupt
  800460:	e0bffd17 	ldw	r2,-12(fp)
}
  800464:	e037883a 	mov	sp,fp
  800468:	dfc00117 	ldw	ra,4(sp)
  80046c:	df000017 	ldw	fp,0(sp)
  800470:	dec00204 	addi	sp,sp,8
  800474:	f800283a 	ret

00800478 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  800478:	defffc04 	addi	sp,sp,-16
  80047c:	df000315 	stw	fp,12(sp)
  800480:	df000304 	addi	fp,sp,12
  800484:	e13ffe15 	stw	r4,-8(fp)
  800488:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context;
  80048c:	e0bffe17 	ldw	r2,-8(fp)
  800490:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800494:	00804074 	movhi	r2,257
  800498:	10842b04 	addi	r2,r2,4268
  80049c:	10c00037 	ldwio	r3,0(r2)
  8004a0:	e0bffd17 	ldw	r2,-12(fp)
  8004a4:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);										// Clear the edge capture register
  8004a8:	00804074 	movhi	r2,257
  8004ac:	10842b04 	addi	r2,r2,4268
  8004b0:	10000035 	stwio	zero,0(r2)
	if ((*temp & 0x01) > 0) {
  8004b4:	e0bffd17 	ldw	r2,-12(fp)
  8004b8:	10800017 	ldw	r2,0(r2)
  8004bc:	1080004c 	andi	r2,r2,1
  8004c0:	10800050 	cmplti	r2,r2,1
  8004c4:	1000021e 	bne	r2,zero,8004d0 <NSEW_ped_isr+0x58>
		pedestrianNS = 1;																	// NS pedestrian button is pressed
  8004c8:	00800044 	movi	r2,1
  8004cc:	d0a74715 	stw	r2,-25316(gp)
	}
	if ((*temp & 0x02) > 0) {
  8004d0:	e0bffd17 	ldw	r2,-12(fp)
  8004d4:	10800017 	ldw	r2,0(r2)
  8004d8:	1080008c 	andi	r2,r2,2
  8004dc:	10800050 	cmplti	r2,r2,1
  8004e0:	1000021e 	bne	r2,zero,8004ec <NSEW_ped_isr+0x74>
		pedestrianEW = 1;																	// EW pedestrian button is pressed
  8004e4:	00800044 	movi	r2,1
  8004e8:	d0a74815 	stw	r2,-25312(gp)
	}
	if ((*temp & 0x04) > 0) {
  8004ec:	e0bffd17 	ldw	r2,-12(fp)
  8004f0:	10800017 	ldw	r2,0(r2)
  8004f4:	1080010c 	andi	r2,r2,4
  8004f8:	10800050 	cmplti	r2,r2,1
  8004fc:	1000071e 	bne	r2,zero,80051c <NSEW_ped_isr+0xa4>
		if (vehicle_detected == 0) {
  800500:	d0a74b17 	ldw	r2,-25300(gp)
  800504:	1004c03a 	cmpne	r2,r2,zero
  800508:	1000031e 	bne	r2,zero,800518 <NSEW_ped_isr+0xa0>
			vehicle_detected = 1; 															// If vehicle absent, button press means vehicle has entered intersection
  80050c:	00800044 	movi	r2,1
  800510:	d0a74b15 	stw	r2,-25300(gp)
  800514:	00000106 	br	80051c <NSEW_ped_isr+0xa4>
		} else {
			vehicle_detected = 0; 															// If at any other time, button press means vehicle has left intersection
  800518:	d0274b15 	stw	zero,-25300(gp)
		}
	}
}
  80051c:	e037883a 	mov	sp,fp
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00104 	addi	sp,sp,4
  800528:	f800283a 	ret

0080052c <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  80052c:	defffd04 	addi	sp,sp,-12
  800530:	dfc00215 	stw	ra,8(sp)
  800534:	df000115 	stw	fp,4(sp)
  800538:	df000104 	addi	fp,sp,4
	void* context_going_to_be_passed = (void*) &buttonValue; 								// Cast before passing to ISR
  80053c:	d0a00304 	addi	r2,gp,-32756
  800540:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// Clears the edge capture register
  800544:	00804074 	movhi	r2,257
  800548:	10842b04 	addi	r2,r2,4268
  80054c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7); 									// Enable interrupts for all buttons
  800550:	00c04074 	movhi	r3,257
  800554:	18c42a04 	addi	r3,r3,4264
  800558:	008001c4 	movi	r2,7
  80055c:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// Register the ISR
  800560:	01000104 	movi	r4,4
  800564:	e17fff17 	ldw	r5,-4(fp)
  800568:	01802034 	movhi	r6,128
  80056c:	31811e04 	addi	r6,r6,1144
  800570:	081098c0 	call	81098c <alt_irq_register>
}
  800574:	e037883a 	mov	sp,fp
  800578:	dfc00117 	ldw	ra,4(sp)
  80057c:	df000017 	ldw	fp,0(sp)
  800580:	dec00204 	addi	sp,sp,8
  800584:	f800283a 	ret

00800588 <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  800588:	defffd04 	addi	sp,sp,-12
  80058c:	dfc00215 	stw	ra,8(sp)
  800590:	df000115 	stw	fp,4(sp)
  800594:	df000104 	addi	fp,sp,4
  800598:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  80059c:	e0bfff17 	ldw	r2,-4(fp)
  8005a0:	10800017 	ldw	r2,0(r2)
  8005a4:	10bfffd8 	cmpnei	r2,r2,-1
  8005a8:	10000b1e 	bne	r2,zero,8005d8 <pedestrian_tlc+0x50>
		init_tlc();
  8005ac:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8005b0:	e0bfff17 	ldw	r2,-4(fp)
  8005b4:	10800017 	ldw	r2,0(r2)
  8005b8:	10c00044 	addi	r3,r2,1
  8005bc:	e0bfff17 	ldw	r2,-4(fp)
  8005c0:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8005c4:	00c04074 	movhi	r3,257
  8005c8:	18c41804 	addi	r3,r3,4192
  8005cc:	00800904 	movi	r2,36
  8005d0:	18800035 	stwio	r2,0(r3)
		return;
  8005d4:	00005e06 	br	800750 <pedestrian_tlc+0x1c8>
	}

	if (tlc_timer_event == 1) {
  8005d8:	d0a74617 	ldw	r2,-25320(gp)
  8005dc:	10800058 	cmpnei	r2,r2,1
  8005e0:	10005b1e 	bne	r2,zero,800750 <pedestrian_tlc+0x1c8>
		if (*state == 0) { // R, R state
  8005e4:	e0bfff17 	ldw	r2,-4(fp)
  8005e8:	10800017 	ldw	r2,0(r2)
  8005ec:	1004c03a 	cmpne	r2,r2,zero
  8005f0:	1000141e 	bne	r2,zero,800644 <pedestrian_tlc+0xbc>
			if (pedestrianNS == 1) {
  8005f4:	d0a74717 	ldw	r2,-25316(gp)
  8005f8:	10800058 	cmpnei	r2,r2,1
  8005fc:	1000091e 	bne	r2,zero,800624 <pedestrian_tlc+0x9c>
				*state = 1; // G, R
  800600:	e0ffff17 	ldw	r3,-4(fp)
  800604:	00800044 	movi	r2,1
  800608:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x61);
  80060c:	00c04074 	movhi	r3,257
  800610:	18c41804 	addi	r3,r3,4192
  800614:	00801844 	movi	r2,97
  800618:	18800035 	stwio	r2,0(r3)
				//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
				pedestrianNS = 0;
  80061c:	d0274715 	stw	zero,-25316(gp)
  800620:	00004a06 	br	80074c <pedestrian_tlc+0x1c4>
			} else {
				*state = 1; // G, R
  800624:	e0ffff17 	ldw	r3,-4(fp)
  800628:	00800044 	movi	r2,1
  80062c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800630:	00c04074 	movhi	r3,257
  800634:	18c41804 	addi	r3,r3,4192
  800638:	00800304 	movi	r2,12
  80063c:	18800035 	stwio	r2,0(r3)
  800640:	00004206 	br	80074c <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 1) {
  800644:	e0bfff17 	ldw	r2,-4(fp)
  800648:	10800017 	ldw	r2,0(r2)
  80064c:	10800058 	cmpnei	r2,r2,1
  800650:	1000081e 	bne	r2,zero,800674 <pedestrian_tlc+0xec>
			*state = 2; // Y, R
  800654:	e0ffff17 	ldw	r3,-4(fp)
  800658:	00800084 	movi	r2,2
  80065c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  800660:	00c04074 	movhi	r3,257
  800664:	18c41804 	addi	r3,r3,4192
  800668:	00800504 	movi	r2,20
  80066c:	18800035 	stwio	r2,0(r3)
  800670:	00003606 	br	80074c <pedestrian_tlc+0x1c4>
		} else if (*state == 2) {
  800674:	e0bfff17 	ldw	r2,-4(fp)
  800678:	10800017 	ldw	r2,0(r2)
  80067c:	10800098 	cmpnei	r2,r2,2
  800680:	1000081e 	bne	r2,zero,8006a4 <pedestrian_tlc+0x11c>
			*state = 3; // R, R
  800684:	e0ffff17 	ldw	r3,-4(fp)
  800688:	008000c4 	movi	r2,3
  80068c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800690:	00c04074 	movhi	r3,257
  800694:	18c41804 	addi	r3,r3,4192
  800698:	00800904 	movi	r2,36
  80069c:	18800035 	stwio	r2,0(r3)
  8006a0:	00002a06 	br	80074c <pedestrian_tlc+0x1c4>
		} else if (*state == 3) {
  8006a4:	e0bfff17 	ldw	r2,-4(fp)
  8006a8:	10800017 	ldw	r2,0(r2)
  8006ac:	108000d8 	cmpnei	r2,r2,3
  8006b0:	1000141e 	bne	r2,zero,800704 <pedestrian_tlc+0x17c>
			if (pedestrianEW == 1) {
  8006b4:	d0a74817 	ldw	r2,-25312(gp)
  8006b8:	10800058 	cmpnei	r2,r2,1
  8006bc:	1000091e 	bne	r2,zero,8006e4 <pedestrian_tlc+0x15c>
				*state = 4; // R, G, P2
  8006c0:	e0ffff17 	ldw	r3,-4(fp)
  8006c4:	00800104 	movi	r2,4
  8006c8:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x8C);
  8006cc:	00c04074 	movhi	r3,257
  8006d0:	18c41804 	addi	r3,r3,4192
  8006d4:	00802304 	movi	r2,140
  8006d8:	18800035 	stwio	r2,0(r3)
				//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
				pedestrianEW = 0;
  8006dc:	d0274815 	stw	zero,-25312(gp)
  8006e0:	00001a06 	br	80074c <pedestrian_tlc+0x1c4>
			} else {
				*state = 4; // R, G
  8006e4:	e0ffff17 	ldw	r3,-4(fp)
  8006e8:	00800104 	movi	r2,4
  8006ec:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  8006f0:	00c04074 	movhi	r3,257
  8006f4:	18c41804 	addi	r3,r3,4192
  8006f8:	00800844 	movi	r2,33
  8006fc:	18800035 	stwio	r2,0(r3)
  800700:	00001206 	br	80074c <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 4) {
  800704:	e0bfff17 	ldw	r2,-4(fp)
  800708:	10800017 	ldw	r2,0(r2)
  80070c:	10800118 	cmpnei	r2,r2,4
  800710:	1000081e 	bne	r2,zero,800734 <pedestrian_tlc+0x1ac>
			*state = 5; // R, Y
  800714:	e0ffff17 	ldw	r3,-4(fp)
  800718:	00800144 	movi	r2,5
  80071c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800720:	00c04074 	movhi	r3,257
  800724:	18c41804 	addi	r3,r3,4192
  800728:	00800884 	movi	r2,34
  80072c:	18800035 	stwio	r2,0(r3)
  800730:	00000606 	br	80074c <pedestrian_tlc+0x1c4>
		} else {																			// State 5
			*state = 0; // R, R
  800734:	e0bfff17 	ldw	r2,-4(fp)
  800738:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  80073c:	00c04074 	movhi	r3,257
  800740:	18c41804 	addi	r3,r3,4192
  800744:	00800904 	movi	r2,36
  800748:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  80074c:	d0274615 	stw	zero,-25320(gp)
		return;
	}
}
  800750:	e037883a 	mov	sp,fp
  800754:	dfc00117 	ldw	ra,4(sp)
  800758:	df000017 	ldw	fp,0(sp)
  80075c:	dec00204 	addi	sp,sp,8
  800760:	f800283a 	ret

00800764 <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  800764:	defffd04 	addi	sp,sp,-12
  800768:	dfc00215 	stw	ra,8(sp)
  80076c:	df000115 	stw	fp,4(sp)
  800770:	df000104 	addi	fp,sp,4
  800774:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800778:	e0bfff17 	ldw	r2,-4(fp)
  80077c:	10800017 	ldw	r2,0(r2)
  800780:	10bfffd8 	cmpnei	r2,r2,-1
  800784:	10000b1e 	bne	r2,zero,8007b4 <configurable_tlc+0x50>
		init_tlc();
  800788:	08002000 	call	800200 <init_tlc>
		(*state)++;
  80078c:	e0bfff17 	ldw	r2,-4(fp)
  800790:	10800017 	ldw	r2,0(r2)
  800794:	10c00044 	addi	r3,r2,1
  800798:	e0bfff17 	ldw	r2,-4(fp)
  80079c:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8007a0:	00c04074 	movhi	r3,257
  8007a4:	18c41804 	addi	r3,r3,4192
  8007a8:	00800904 	movi	r2,36
  8007ac:	18800035 	stwio	r2,0(r3)
		return;
  8007b0:	00001c06 	br	800824 <configurable_tlc+0xc0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);							// Check if the new values button is on
  8007b4:	00804074 	movhi	r2,257
  8007b8:	10842404 	addi	r2,r2,4240
  8007bc:	10800037 	ldwio	r2,0(r2)
  8007c0:	d0a74915 	stw	r2,-25308(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)) {	// If the current state is R,R  and the new values switch is on, and the timeout values haven't already been modified in this current state, then read new values from UART
  8007c4:	e0bfff17 	ldw	r2,-4(fp)
  8007c8:	10800017 	ldw	r2,0(r2)
  8007cc:	1005003a 	cmpeq	r2,r2,zero
  8007d0:	1000041e 	bne	r2,zero,8007e4 <configurable_tlc+0x80>
  8007d4:	e0bfff17 	ldw	r2,-4(fp)
  8007d8:	10800017 	ldw	r2,0(r2)
  8007dc:	108000d8 	cmpnei	r2,r2,3
  8007e0:	10000e1e 	bne	r2,zero,80081c <configurable_tlc+0xb8>
  8007e4:	d0a74917 	ldw	r2,-25308(gp)
  8007e8:	10800110 	cmplti	r2,r2,4
  8007ec:	10000b1e 	bne	r2,zero,80081c <configurable_tlc+0xb8>
  8007f0:	d0a74a17 	ldw	r2,-25304(gp)
  8007f4:	10800058 	cmpnei	r2,r2,1
  8007f8:	1000081e 	bne	r2,zero,80081c <configurable_tlc+0xb8>
		printToUART("Enter values now\n\r");
  8007fc:	01002074 	movhi	r4,129
  800800:	21132104 	addi	r4,r4,19588
  800804:	0800d280 	call	800d28 <printToUART>
		timeout_data_handler();
  800808:	08008380 	call	800838 <timeout_data_handler>
		newTimeoutValues = 0;
  80080c:	d0274915 	stw	zero,-25308(gp)
		pedestrian_tlc(state);
  800810:	e13fff17 	ldw	r4,-4(fp)
  800814:	08005880 	call	800588 <pedestrian_tlc>
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);							// Check if the new values button is on
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)) {	// If the current state is R,R  and the new values switch is on, and the timeout values haven't already been modified in this current state, then read new values from UART
  800818:	00000206 	br	800824 <configurable_tlc+0xc0>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  80081c:	e13fff17 	ldw	r4,-4(fp)
  800820:	08005880 	call	800588 <pedestrian_tlc>
	}
}
  800824:	e037883a 	mov	sp,fp
  800828:	dfc00117 	ldw	ra,4(sp)
  80082c:	df000017 	ldw	fp,0(sp)
  800830:	dec00204 	addi	sp,sp,8
  800834:	f800283a 	ret

00800838 <timeout_data_handler>:

/* DESCRIPTION: Parses the configuration string and updates the timeouts
 * PARAMETER:   none
 * RETURNS:     none
 */
void timeout_data_handler(void) {
  800838:	defffb04 	addi	sp,sp,-20
  80083c:	dfc00415 	stw	ra,16(sp)
  800840:	df000315 	stw	fp,12(sp)
  800844:	df000304 	addi	fp,sp,12
	fp = fopen(UART_NAME, "rw"); 															// Open up UART with read and write access
  800848:	01002074 	movhi	r4,129
  80084c:	21132604 	addi	r4,r4,19608
  800850:	01402074 	movhi	r5,129
  800854:	29532904 	addi	r5,r5,19620
  800858:	08018a00 	call	8018a0 <fopen>
  80085c:	d0a75315 	stw	r2,-25268(gp)
	if (fp != NULL) {																		// Check if the UART is open successfully
  800860:	d0a75317 	ldw	r2,-25268(gp)
  800864:	1005003a 	cmpeq	r2,r2,zero
  800868:	1000611e 	bne	r2,zero,8009f0 <timeout_data_handler+0x1b8>
		int k = 0;
  80086c:	e03fff15 	stw	zero,-4(fp)
  800870:	00000006 	br	800874 <timeout_data_handler+0x3c>
		while(1) {
			newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800874:	00804074 	movhi	r2,257
  800878:	10842404 	addi	r2,r2,4240
  80087c:	10800037 	ldwio	r2,0(r2)
  800880:	d0a74915 	stw	r2,-25308(gp)
			if (newTimeoutValues < 4) {
  800884:	d0a74917 	ldw	r2,-25308(gp)
  800888:	10800110 	cmplti	r2,r2,4
  80088c:	10008c1e 	bne	r2,zero,800ac0 <timeout_data_handler+0x288>
				return;
			}
			c = fgetc(fp);																	// Read one char at a time
  800890:	d1275317 	ldw	r4,-25268(gp)
  800894:	08013c40 	call	8013c4 <fgetc>
  800898:	d0a75115 	stw	r2,-25276(gp)
			if (c == '\n') {																// Keep reading chars until the new line char is reached
  80089c:	d0a75117 	ldw	r2,-25276(gp)
  8008a0:	108002a0 	cmpeqi	r2,r2,10
  8008a4:	1000501e 	bne	r2,zero,8009e8 <timeout_data_handler+0x1b0>
				break;
			}
			if (c == '\r') {
  8008a8:	d0a75117 	ldw	r2,-25276(gp)
  8008ac:	10800360 	cmpeqi	r2,r2,13
  8008b0:	10004d1e 	bne	r2,zero,8009e8 <timeout_data_handler+0x1b0>
				break;
			}
			if (c == ',') {																	// A comma indicates that a full number has been read in
  8008b4:	d0a75117 	ldw	r2,-25276(gp)
  8008b8:	10800b18 	cmpnei	r2,r2,44
  8008bc:	1000401e 	bne	r2,zero,8009c0 <timeout_data_handler+0x188>
				int a;
				for (a=0; a<(4-k); a++ ){													// If the entered number is not 4 digits, shift the char array to compensate
  8008c0:	e03ffe15 	stw	zero,-8(fp)
  8008c4:	00001506 	br	80091c <timeout_data_handler+0xe4>
					chararray[3] = chararray[2];
  8008c8:	00802074 	movhi	r2,129
  8008cc:	109c1084 	addi	r2,r2,28738
  8008d0:	10c00003 	ldbu	r3,0(r2)
  8008d4:	00802074 	movhi	r2,129
  8008d8:	109c10c4 	addi	r2,r2,28739
  8008dc:	10c00005 	stb	r3,0(r2)
					chararray[2] = chararray[1];
  8008e0:	00802074 	movhi	r2,129
  8008e4:	109c1044 	addi	r2,r2,28737
  8008e8:	10c00003 	ldbu	r3,0(r2)
  8008ec:	00802074 	movhi	r2,129
  8008f0:	109c1084 	addi	r2,r2,28738
  8008f4:	10c00005 	stb	r3,0(r2)
					chararray[1] = chararray[0];
  8008f8:	d0e00003 	ldbu	r3,-32768(gp)
  8008fc:	00802074 	movhi	r2,129
  800900:	109c1044 	addi	r2,r2,28737
  800904:	10c00005 	stb	r3,0(r2)
					chararray[0] = '0';
  800908:	00800c04 	movi	r2,48
  80090c:	d0a00005 	stb	r2,-32768(gp)
			if (c == '\r') {
				break;
			}
			if (c == ',') {																	// A comma indicates that a full number has been read in
				int a;
				for (a=0; a<(4-k); a++ ){													// If the entered number is not 4 digits, shift the char array to compensate
  800910:	e0bffe17 	ldw	r2,-8(fp)
  800914:	10800044 	addi	r2,r2,1
  800918:	e0bffe15 	stw	r2,-8(fp)
  80091c:	00c00104 	movi	r3,4
  800920:	e0bfff17 	ldw	r2,-4(fp)
  800924:	1887c83a 	sub	r3,r3,r2
  800928:	e0bffe17 	ldw	r2,-8(fp)
  80092c:	10ffe616 	blt	r2,r3,8008c8 <timeout_data_handler+0x90>
					chararray[3] = chararray[2];
					chararray[2] = chararray[1];
					chararray[1] = chararray[0];
					chararray[0] = '0';
				}
				sscanf(chararray, "%d", &timeoutValue);
  800930:	d1200004 	addi	r4,gp,-32768
  800934:	01402074 	movhi	r5,129
  800938:	29532a04 	addi	r5,r5,19624
  80093c:	d1a75204 	addi	r6,gp,-25272
  800940:	08040580 	call	804058 <sscanf>
				tempBuffer[valueCount] = timeoutValue;										// Store the newly read number into a temporary buffer
  800944:	d0e74c17 	ldw	r3,-25296(gp)
  800948:	d0a75217 	ldw	r2,-25272(gp)
  80094c:	100b883a 	mov	r5,r2
  800950:	01002074 	movhi	r4,129
  800954:	2114fc04 	addi	r4,r4,21488
  800958:	18c5883a 	add	r2,r3,r3
  80095c:	1085883a 	add	r2,r2,r2
  800960:	1105883a 	add	r2,r2,r4
  800964:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  800968:	00800c04 	movi	r2,48
  80096c:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  800970:	00c02074 	movhi	r3,129
  800974:	18dc1044 	addi	r3,r3,28737
  800978:	00800c04 	movi	r2,48
  80097c:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  800980:	00c02074 	movhi	r3,129
  800984:	18dc1084 	addi	r3,r3,28738
  800988:	00800c04 	movi	r2,48
  80098c:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  800990:	00c02074 	movhi	r3,129
  800994:	18dc10c4 	addi	r3,r3,28739
  800998:	00800c04 	movi	r2,48
  80099c:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  8009a0:	00802074 	movhi	r2,129
  8009a4:	109c1104 	addi	r2,r2,28740
  8009a8:	10000005 	stb	zero,0(r2)
				k = 0;
  8009ac:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  8009b0:	d0a74c17 	ldw	r2,-25296(gp)
  8009b4:	10800044 	addi	r2,r2,1
  8009b8:	d0a74c15 	stw	r2,-25296(gp)
  8009bc:	003fad06 	br	800874 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  8009c0:	e13fff17 	ldw	r4,-4(fp)
  8009c4:	d0a75117 	ldw	r2,-25276(gp)
  8009c8:	1007883a 	mov	r3,r2
  8009cc:	d0a00004 	addi	r2,gp,-32768
  8009d0:	2085883a 	add	r2,r4,r2
  8009d4:	10c00005 	stb	r3,0(r2)
				k += 1;
  8009d8:	e0bfff17 	ldw	r2,-4(fp)
  8009dc:	10800044 	addi	r2,r2,1
  8009e0:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  8009e4:	003fa306 	br	800874 <timeout_data_handler+0x3c>
		fclose(fp); 																		// Remember to close the file
  8009e8:	d1275317 	ldw	r4,-25268(gp)
  8009ec:	08011800 	call	801180 <fclose>
	}

	if (valueCount == 5) {																	// Check that a valid number of input numbers has been received
  8009f0:	d0a74c17 	ldw	r2,-25296(gp)
  8009f4:	10800158 	cmpnei	r2,r2,5
  8009f8:	10002d1e 	bne	r2,zero,800ab0 <timeout_data_handler+0x278>
		int j;
		for (j=0; j<6; j++) {
  8009fc:	e03ffd15 	stw	zero,-12(fp)
  800a00:	00001006 	br	800a44 <timeout_data_handler+0x20c>
			if (tempBuffer[j] <= 0) {
  800a04:	e0bffd17 	ldw	r2,-12(fp)
  800a08:	00c02074 	movhi	r3,129
  800a0c:	18d4fc04 	addi	r3,r3,21488
  800a10:	1085883a 	add	r2,r2,r2
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	10c5883a 	add	r2,r2,r3
  800a1c:	10800017 	ldw	r2,0(r2)
  800a20:	1004c03a 	cmpne	r2,r2,zero
  800a24:	1000041e 	bne	r2,zero,800a38 <timeout_data_handler+0x200>
				printToUART("Invalid values\n\r");
  800a28:	01002074 	movhi	r4,129
  800a2c:	21132b04 	addi	r4,r4,19628
  800a30:	0800d280 	call	800d28 <printToUART>
				return;
  800a34:	00002206 	br	800ac0 <timeout_data_handler+0x288>
		fclose(fp); 																		// Remember to close the file
	}

	if (valueCount == 5) {																	// Check that a valid number of input numbers has been received
		int j;
		for (j=0; j<6; j++) {
  800a38:	e0bffd17 	ldw	r2,-12(fp)
  800a3c:	10800044 	addi	r2,r2,1
  800a40:	e0bffd15 	stw	r2,-12(fp)
  800a44:	e0bffd17 	ldw	r2,-12(fp)
  800a48:	10800190 	cmplti	r2,r2,6
  800a4c:	103fed1e 	bne	r2,zero,800a04 <timeout_data_handler+0x1cc>
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800a50:	e03ffd15 	stw	zero,-12(fp)
  800a54:	00001106 	br	800a9c <timeout_data_handler+0x264>
			timeout[j]=tempBuffer[j];														// Load the value in the buffer into the timeout array
  800a58:	e17ffd17 	ldw	r5,-12(fp)
  800a5c:	e0bffd17 	ldw	r2,-12(fp)
  800a60:	00c02074 	movhi	r3,129
  800a64:	18d4fc04 	addi	r3,r3,21488
  800a68:	1085883a 	add	r2,r2,r2
  800a6c:	1085883a 	add	r2,r2,r2
  800a70:	10c5883a 	add	r2,r2,r3
  800a74:	11000017 	ldw	r4,0(r2)
  800a78:	00c02074 	movhi	r3,129
  800a7c:	18d4f604 	addi	r3,r3,21464
  800a80:	2945883a 	add	r2,r5,r5
  800a84:	1085883a 	add	r2,r2,r2
  800a88:	10c5883a 	add	r2,r2,r3
  800a8c:	11000015 	stw	r4,0(r2)
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800a90:	e0bffd17 	ldw	r2,-12(fp)
  800a94:	10800044 	addi	r2,r2,1
  800a98:	e0bffd15 	stw	r2,-12(fp)
  800a9c:	e0bffd17 	ldw	r2,-12(fp)
  800aa0:	10800190 	cmplti	r2,r2,6
  800aa4:	103fec1e 	bne	r2,zero,800a58 <timeout_data_handler+0x220>
			timeout[j]=tempBuffer[j];														// Load the value in the buffer into the timeout array
		}
		timerHit = 0;
  800aa8:	d0274a15 	stw	zero,-25304(gp)
  800aac:	00000306 	br	800abc <timeout_data_handler+0x284>
	}else {
		printToUART("Invalid inputs, try again\n\r");
  800ab0:	01002074 	movhi	r4,129
  800ab4:	21133004 	addi	r4,r4,19648
  800ab8:	0800d280 	call	800d28 <printToUART>

	}
	valueCount = 0;
  800abc:	d0274c15 	stw	zero,-25296(gp)
}
  800ac0:	e037883a 	mov	sp,fp
  800ac4:	dfc00117 	ldw	ra,4(sp)
  800ac8:	df000017 	ldw	fp,0(sp)
  800acc:	dec00204 	addi	sp,sp,8
  800ad0:	f800283a 	ret

00800ad4 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800ad4:	defffa04 	addi	sp,sp,-24
  800ad8:	dfc00515 	stw	ra,20(sp)
  800adc:	df000415 	stw	fp,16(sp)
  800ae0:	df000404 	addi	fp,sp,16
  800ae4:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800ae8:	e0bffe17 	ldw	r2,-8(fp)
  800aec:	e0bffd15 	stw	r2,-12(fp)
	(*trigger)++;
  800af0:	e0bffd17 	ldw	r2,-12(fp)
  800af4:	10800017 	ldw	r2,0(r2)
  800af8:	10c00044 	addi	r3,r2,1
  800afc:	e0bffd17 	ldw	r2,-12(fp)
  800b00:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {														// If trigger value is equal to CAMERA_TIMEOUT then the traffic camera takes a snapshot
  800b04:	e0bffd17 	ldw	r2,-12(fp)
  800b08:	10800017 	ldw	r2,0(r2)
  800b0c:	1081f418 	cmpnei	r2,r2,2000
  800b10:	1000061e 	bne	r2,zero,800b2c <camera_timer_isr+0x58>
		snapshotTaken = 1;
  800b14:	00800044 	movi	r2,1
  800b18:	d0a74e15 	stw	r2,-25288(gp)
		toPrint = 1;
  800b1c:	00800044 	movi	r2,1
  800b20:	d0a75015 	stw	r2,-25280(gp)
		return 0;
  800b24:	e03fff15 	stw	zero,-4(fp)
  800b28:	00001306 	br	800b78 <camera_timer_isr+0xa4>
	}
	if (vehicle_detected != 2) {															// Vehicle leaves the intersection before CAMERA_TIMEOUT time value is reached
  800b2c:	d0a74b17 	ldw	r2,-25300(gp)
  800b30:	108000a0 	cmpeqi	r2,r2,2
  800b34:	10000e1e 	bne	r2,zero,800b70 <camera_timer_isr+0x9c>
		int num = *trigger;
  800b38:	e0bffd17 	ldw	r2,-12(fp)
  800b3c:	10800017 	ldw	r2,0(r2)
  800b40:	e0bffc15 	stw	r2,-16(fp)
		sprintf(countString, "%d", num);
  800b44:	010020b4 	movhi	r4,130
  800b48:	21237d04 	addi	r4,r4,-29196
  800b4c:	01402074 	movhi	r5,129
  800b50:	29532a04 	addi	r5,r5,19624
  800b54:	e1bffc17 	ldw	r6,-16(fp)
  800b58:	0803ef40 	call	803ef4 <sprintf>
		snapshotTaken = 0;
  800b5c:	d0274e15 	stw	zero,-25288(gp)
		toPrint = 1;
  800b60:	00800044 	movi	r2,1
  800b64:	d0a75015 	stw	r2,-25280(gp)
		return 0;
  800b68:	e03fff15 	stw	zero,-4(fp)
  800b6c:	00000206 	br	800b78 <camera_timer_isr+0xa4>
	}
	return 1;
  800b70:	00800044 	movi	r2,1
  800b74:	e0bfff15 	stw	r2,-4(fp)
  800b78:	e0bfff17 	ldw	r2,-4(fp)
}
  800b7c:	e037883a 	mov	sp,fp
  800b80:	dfc00117 	ldw	ra,4(sp)
  800b84:	df000017 	ldw	fp,0(sp)
  800b88:	dec00204 	addi	sp,sp,8
  800b8c:	f800283a 	ret

00800b90 <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800b90:	defffc04 	addi	sp,sp,-16
  800b94:	dfc00315 	stw	ra,12(sp)
  800b98:	df000215 	stw	fp,8(sp)
  800b9c:	df000204 	addi	fp,sp,8
  800ba0:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800ba4:	e0bfff17 	ldw	r2,-4(fp)
  800ba8:	10800017 	ldw	r2,0(r2)
  800bac:	10bfffd8 	cmpnei	r2,r2,-1
  800bb0:	10000b1e 	bne	r2,zero,800be0 <camera_tlc+0x50>
		init_tlc();
  800bb4:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800bb8:	e0bfff17 	ldw	r2,-4(fp)
  800bbc:	10800017 	ldw	r2,0(r2)
  800bc0:	10c00044 	addi	r3,r2,1
  800bc4:	e0bfff17 	ldw	r2,-4(fp)
  800bc8:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800bcc:	00c04074 	movhi	r3,257
  800bd0:	18c41804 	addi	r3,r3,4192
  800bd4:	00800904 	movi	r2,36
  800bd8:	18800035 	stwio	r2,0(r3)
		return;
  800bdc:	00004d06 	br	800d14 <camera_tlc+0x184>
	}

	if (toPrint == 1) {
  800be0:	d0a75017 	ldw	r2,-25280(gp)
  800be4:	10800058 	cmpnei	r2,r2,1
  800be8:	1000141e 	bne	r2,zero,800c3c <camera_tlc+0xac>
		if (snapshotTaken == 1) {
  800bec:	d0a74e17 	ldw	r2,-25288(gp)
  800bf0:	10800058 	cmpnei	r2,r2,1
  800bf4:	1000061e 	bne	r2,zero,800c10 <camera_tlc+0x80>
			snapshotTaken = 0;
  800bf8:	d0274e15 	stw	zero,-25288(gp)
			printToUART("Snapshot Taken\n\r");
  800bfc:	01002074 	movhi	r4,129
  800c00:	21133704 	addi	r4,r4,19676
  800c04:	0800d280 	call	800d28 <printToUART>
			toPrint = 0;
  800c08:	d0275015 	stw	zero,-25280(gp)
  800c0c:	00000b06 	br	800c3c <camera_tlc+0xac>
		} else {
			printToUART("Time taken: ");													// Prints time taken to enter and leave the intersection
  800c10:	01002074 	movhi	r4,129
  800c14:	21133c04 	addi	r4,r4,19696
  800c18:	0800d280 	call	800d28 <printToUART>
			printToUART(countString);
  800c1c:	010020b4 	movhi	r4,130
  800c20:	21237d04 	addi	r4,r4,-29196
  800c24:	0800d280 	call	800d28 <printToUART>
			printToUART("\n\r");
  800c28:	01002074 	movhi	r4,129
  800c2c:	21134004 	addi	r4,r4,19712
  800c30:	0800d280 	call	800d28 <printToUART>
			timeTaken = 0;
  800c34:	d0274f15 	stw	zero,-25284(gp)
			toPrint = 0;
  800c38:	d0275015 	stw	zero,-25280(gp)
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800c3c:	00804074 	movhi	r2,257
  800c40:	10842404 	addi	r2,r2,4240
  800c44:	10800037 	ldwio	r2,0(r2)
  800c48:	d0a74915 	stw	r2,-25308(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800c4c:	e0bfff17 	ldw	r2,-4(fp)
  800c50:	10800017 	ldw	r2,0(r2)
  800c54:	1005003a 	cmpeq	r2,r2,zero
  800c58:	1000041e 	bne	r2,zero,800c6c <camera_tlc+0xdc>
  800c5c:	e0bfff17 	ldw	r2,-4(fp)
  800c60:	10800017 	ldw	r2,0(r2)
  800c64:	108000d8 	cmpnei	r2,r2,3
  800c68:	10000e1e 	bne	r2,zero,800ca4 <camera_tlc+0x114>
  800c6c:	d0a74917 	ldw	r2,-25308(gp)
  800c70:	10800110 	cmplti	r2,r2,4
  800c74:	10000b1e 	bne	r2,zero,800ca4 <camera_tlc+0x114>
  800c78:	d0a74a17 	ldw	r2,-25304(gp)
  800c7c:	10800058 	cmpnei	r2,r2,1
  800c80:	1000081e 	bne	r2,zero,800ca4 <camera_tlc+0x114>
		printToUART("Enter values now\n\r");
  800c84:	01002074 	movhi	r4,129
  800c88:	21132104 	addi	r4,r4,19588
  800c8c:	0800d280 	call	800d28 <printToUART>
		timeout_data_handler();
  800c90:	08008380 	call	800838 <timeout_data_handler>
		newTimeoutValues = 0;
  800c94:	d0274915 	stw	zero,-25308(gp)
		pedestrian_tlc(state);
  800c98:	e13fff17 	ldw	r4,-4(fp)
  800c9c:	08005880 	call	800588 <pedestrian_tlc>
			toPrint = 0;
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800ca0:	00000206 	br	800cac <camera_tlc+0x11c>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  800ca4:	e13fff17 	ldw	r4,-4(fp)
  800ca8:	08005880 	call	800588 <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { 						// If vehicle enters while light is yellow, start the timer
  800cac:	e0bfff17 	ldw	r2,-4(fp)
  800cb0:	10800017 	ldw	r2,0(r2)
  800cb4:	108000a0 	cmpeqi	r2,r2,2
  800cb8:	1000041e 	bne	r2,zero,800ccc <camera_tlc+0x13c>
  800cbc:	e0bfff17 	ldw	r2,-4(fp)
  800cc0:	10800017 	ldw	r2,0(r2)
  800cc4:	10800158 	cmpnei	r2,r2,5
  800cc8:	1000121e 	bne	r2,zero,800d14 <camera_tlc+0x184>
  800ccc:	d0a74b17 	ldw	r2,-25300(gp)
  800cd0:	10800058 	cmpnei	r2,r2,1
  800cd4:	10000f1e 	bne	r2,zero,800d14 <camera_tlc+0x184>
		printToUART("Camera Activated\n\r");
  800cd8:	01002074 	movhi	r4,129
  800cdc:	21134104 	addi	r4,r4,19716
  800ce0:	0800d280 	call	800d28 <printToUART>
		camera_count = 0;
  800ce4:	d0200215 	stw	zero,-32760(gp)
		vehicle_detected = 2;
  800ce8:	00800084 	movi	r2,2
  800cec:	d0a74b15 	stw	r2,-25300(gp)
		void* cameraContext = (void*) &camera_count;
  800cf0:	d0a00204 	addi	r2,gp,-32760
  800cf4:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800cf8:	010020b4 	movhi	r4,130
  800cfc:	21237704 	addi	r4,r4,-29220
  800d00:	01400044 	movi	r5,1
  800d04:	01802034 	movhi	r6,128
  800d08:	3182b504 	addi	r6,r6,2772
  800d0c:	e1fffe17 	ldw	r7,-8(fp)
  800d10:	081057c0 	call	81057c <alt_alarm_start>
	}
}
  800d14:	e037883a 	mov	sp,fp
  800d18:	dfc00117 	ldw	ra,4(sp)
  800d1c:	df000017 	ldw	fp,0(sp)
  800d20:	dec00204 	addi	sp,sp,8
  800d24:	f800283a 	ret

00800d28 <printToUART>:

/* DESCRIPTION: Prints a string to PuTTY via UART
 * PARAMETER:   stringToPrint - the string to pritn
 * RETURNS:     none
 */
void printToUART(char* stringToPrint) {
  800d28:	defffd04 	addi	sp,sp,-12
  800d2c:	dfc00215 	stw	ra,8(sp)
  800d30:	df000115 	stw	fp,4(sp)
  800d34:	df000104 	addi	fp,sp,4
  800d38:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800d3c:	01002074 	movhi	r4,129
  800d40:	21132604 	addi	r4,r4,19608
  800d44:	01402074 	movhi	r5,129
  800d48:	29534604 	addi	r5,r5,19736
  800d4c:	08018a00 	call	8018a0 <fopen>
  800d50:	d0a75315 	stw	r2,-25268(gp)
	if (fp != NULL) {
  800d54:	d0a75317 	ldw	r2,-25268(gp)
  800d58:	1005003a 	cmpeq	r2,r2,zero
  800d5c:	1000051e 	bne	r2,zero,800d74 <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800d60:	d1675317 	ldw	r5,-25268(gp)
  800d64:	e13fff17 	ldw	r4,-4(fp)
  800d68:	08019900 	call	801990 <fputs>
		fclose(fp);
  800d6c:	d1275317 	ldw	r4,-25268(gp)
  800d70:	08011800 	call	801180 <fclose>
	}
}
  800d74:	e037883a 	mov	sp,fp
  800d78:	dfc00117 	ldw	ra,4(sp)
  800d7c:	df000017 	ldw	fp,0(sp)
  800d80:	dec00204 	addi	sp,sp,8
  800d84:	f800283a 	ret

00800d88 <main>:

// Main =======================================
int main(void) {
  800d88:	defffc04 	addi	sp,sp,-16
  800d8c:	dfc00315 	stw	ra,12(sp)
  800d90:	df000215 	stw	fp,8(sp)
  800d94:	df000204 	addi	fp,sp,8
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800d98:	01002074 	movhi	r4,129
  800d9c:	21134704 	addi	r4,r4,19740
  800da0:	01402074 	movhi	r5,129
  800da4:	29534604 	addi	r5,r5,19736
  800da8:	08018a00 	call	8018a0 <fopen>
  800dac:	e0bffe15 	stw	r2,-8(fp)

	printf("Hello, Welcome to CS303 Traffic Light Controller\n");
  800db0:	01002074 	movhi	r4,129
  800db4:	21134a04 	addi	r4,r4,19752
  800db8:	080363c0 	call	80363c <puts>

	init_buttons_pio();																										// Initialise buttons
  800dbc:	080052c0 	call	80052c <init_buttons_pio>
  800dc0:	00000006 	br	800dc4 <main+0x3c>

	while (1) {
		if ((proc_state[mode] == -1) || (proc_state[mode] == 0) || (proc_state[mode] == 3)) { 								// We can only change modes when state is Red,Red (or state = -1)
  800dc4:	d0a74d17 	ldw	r2,-25292(gp)
  800dc8:	00c02074 	movhi	r3,129
  800dcc:	18d50204 	addi	r3,r3,21512
  800dd0:	1085883a 	add	r2,r2,r2
  800dd4:	1085883a 	add	r2,r2,r2
  800dd8:	10c5883a 	add	r2,r2,r3
  800ddc:	10800017 	ldw	r2,0(r2)
  800de0:	10bfffe0 	cmpeqi	r2,r2,-1
  800de4:	1000121e 	bne	r2,zero,800e30 <main+0xa8>
  800de8:	d0a74d17 	ldw	r2,-25292(gp)
  800dec:	00c02074 	movhi	r3,129
  800df0:	18d50204 	addi	r3,r3,21512
  800df4:	1085883a 	add	r2,r2,r2
  800df8:	1085883a 	add	r2,r2,r2
  800dfc:	10c5883a 	add	r2,r2,r3
  800e00:	10800017 	ldw	r2,0(r2)
  800e04:	1005003a 	cmpeq	r2,r2,zero
  800e08:	1000091e 	bne	r2,zero,800e30 <main+0xa8>
  800e0c:	d0a74d17 	ldw	r2,-25292(gp)
  800e10:	00c02074 	movhi	r3,129
  800e14:	18d50204 	addi	r3,r3,21512
  800e18:	1085883a 	add	r2,r2,r2
  800e1c:	1085883a 	add	r2,r2,r2
  800e20:	10c5883a 	add	r2,r2,r3
  800e24:	10800017 	ldw	r2,0(r2)
  800e28:	108000d8 	cmpnei	r2,r2,3
  800e2c:	1000571e 	bne	r2,zero,800f8c <main+0x204>
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 0) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 4)) { 	// Mode 0
  800e30:	00804074 	movhi	r2,257
  800e34:	10842404 	addi	r2,r2,4240
  800e38:	10800037 	ldwio	r2,0(r2)
  800e3c:	1005003a 	cmpeq	r2,r2,zero
  800e40:	1000051e 	bne	r2,zero,800e58 <main+0xd0>
  800e44:	00804074 	movhi	r2,257
  800e48:	10842404 	addi	r2,r2,4240
  800e4c:	10800037 	ldwio	r2,0(r2)
  800e50:	10800118 	cmpnei	r2,r2,4
  800e54:	10000b1e 	bne	r2,zero,800e84 <main+0xfc>
				if (mode != 0) {
  800e58:	d0a74d17 	ldw	r2,-25292(gp)
  800e5c:	1005003a 	cmpeq	r2,r2,zero
  800e60:	1000081e 	bne	r2,zero,800e84 <main+0xfc>
					mode = 0;
  800e64:	d0274d15 	stw	zero,-25292(gp)
					alt_alarm_stop(&tlc_timer);																				// Stop current timer when mode changes
  800e68:	010020b4 	movhi	r4,130
  800e6c:	21237104 	addi	r4,r4,-29244
  800e70:	08114b40 	call	8114b4 <alt_alarm_stop>
					proc_state[0] = -1;
  800e74:	00c02074 	movhi	r3,129
  800e78:	18d50204 	addi	r3,r3,21512
  800e7c:	00bfffc4 	movi	r2,-1
  800e80:	18800015 	stw	r2,0(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 1) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 5)) {	// Mode 1
  800e84:	00804074 	movhi	r2,257
  800e88:	10842404 	addi	r2,r2,4240
  800e8c:	10800037 	ldwio	r2,0(r2)
  800e90:	10800060 	cmpeqi	r2,r2,1
  800e94:	1000051e 	bne	r2,zero,800eac <main+0x124>
  800e98:	00804074 	movhi	r2,257
  800e9c:	10842404 	addi	r2,r2,4240
  800ea0:	10800037 	ldwio	r2,0(r2)
  800ea4:	10800158 	cmpnei	r2,r2,5
  800ea8:	10000c1e 	bne	r2,zero,800edc <main+0x154>
				if (mode != 1) {
  800eac:	d0a74d17 	ldw	r2,-25292(gp)
  800eb0:	10800060 	cmpeqi	r2,r2,1
  800eb4:	1000091e 	bne	r2,zero,800edc <main+0x154>
					mode = 1;
  800eb8:	00800044 	movi	r2,1
  800ebc:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800ec0:	010020b4 	movhi	r4,130
  800ec4:	21237104 	addi	r4,r4,-29244
  800ec8:	08114b40 	call	8114b4 <alt_alarm_stop>
					proc_state[1] = -1;
  800ecc:	00c02074 	movhi	r3,129
  800ed0:	18d50204 	addi	r3,r3,21512
  800ed4:	00bfffc4 	movi	r2,-1
  800ed8:	18800115 	stw	r2,4(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 2) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6)) {	// Mode 2
  800edc:	00804074 	movhi	r2,257
  800ee0:	10842404 	addi	r2,r2,4240
  800ee4:	10800037 	ldwio	r2,0(r2)
  800ee8:	108000a0 	cmpeqi	r2,r2,2
  800eec:	1000051e 	bne	r2,zero,800f04 <main+0x17c>
  800ef0:	00804074 	movhi	r2,257
  800ef4:	10842404 	addi	r2,r2,4240
  800ef8:	10800037 	ldwio	r2,0(r2)
  800efc:	10800198 	cmpnei	r2,r2,6
  800f00:	10000c1e 	bne	r2,zero,800f34 <main+0x1ac>
				if (mode != 2) {
  800f04:	d0a74d17 	ldw	r2,-25292(gp)
  800f08:	108000a0 	cmpeqi	r2,r2,2
  800f0c:	1000091e 	bne	r2,zero,800f34 <main+0x1ac>
					mode = 2;
  800f10:	00800084 	movi	r2,2
  800f14:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800f18:	010020b4 	movhi	r4,130
  800f1c:	21237104 	addi	r4,r4,-29244
  800f20:	08114b40 	call	8114b4 <alt_alarm_stop>
					proc_state[2] = -1;
  800f24:	00c02074 	movhi	r3,129
  800f28:	18d50204 	addi	r3,r3,21512
  800f2c:	00bfffc4 	movi	r2,-1
  800f30:	18800215 	stw	r2,8(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 3) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 7)) {	// Mode 3
  800f34:	00804074 	movhi	r2,257
  800f38:	10842404 	addi	r2,r2,4240
  800f3c:	10800037 	ldwio	r2,0(r2)
  800f40:	108000e0 	cmpeqi	r2,r2,3
  800f44:	1000051e 	bne	r2,zero,800f5c <main+0x1d4>
  800f48:	00804074 	movhi	r2,257
  800f4c:	10842404 	addi	r2,r2,4240
  800f50:	10800037 	ldwio	r2,0(r2)
  800f54:	108001d8 	cmpnei	r2,r2,7
  800f58:	10000c1e 	bne	r2,zero,800f8c <main+0x204>
				if (mode != 3) {
  800f5c:	d0a74d17 	ldw	r2,-25292(gp)
  800f60:	108000e0 	cmpeqi	r2,r2,3
  800f64:	1000091e 	bne	r2,zero,800f8c <main+0x204>
					mode = 3;
  800f68:	008000c4 	movi	r2,3
  800f6c:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800f70:	010020b4 	movhi	r4,130
  800f74:	21237104 	addi	r4,r4,-29244
  800f78:	08114b40 	call	8114b4 <alt_alarm_stop>
					proc_state[3] = -1;
  800f7c:	00c02074 	movhi	r3,129
  800f80:	18d50204 	addi	r3,r3,21512
  800f84:	00bfffc4 	movi	r2,-1
  800f88:	18800315 	stw	r2,12(r3)
				}
			}
		}

    	if (lcd != NULL) {																									// Display strings on LCD
  800f8c:	e0bffe17 	ldw	r2,-8(fp)
  800f90:	1005003a 	cmpeq	r2,r2,zero
  800f94:	1000171e 	bne	r2,zero,800ff4 <main+0x26c>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800f98:	e13ffe17 	ldw	r4,-8(fp)
  800f9c:	01402074 	movhi	r5,129
  800fa0:	29535704 	addi	r5,r5,19804
  800fa4:	018006c4 	movi	r6,27
  800fa8:	01c02074 	movhi	r7,129
  800fac:	39d35904 	addi	r7,r7,19812
  800fb0:	08018bc0 	call	8018bc <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  800fb4:	d1a74d17 	ldw	r6,-25292(gp)
  800fb8:	e13ffe17 	ldw	r4,-8(fp)
  800fbc:	01402074 	movhi	r5,129
  800fc0:	29535a04 	addi	r5,r5,19816
  800fc4:	08018bc0 	call	8018bc <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  800fc8:	d0a74d17 	ldw	r2,-25292(gp)
  800fcc:	00c02074 	movhi	r3,129
  800fd0:	18d50204 	addi	r3,r3,21512
  800fd4:	1085883a 	add	r2,r2,r2
  800fd8:	1085883a 	add	r2,r2,r2
  800fdc:	10c5883a 	add	r2,r2,r3
  800fe0:	11800017 	ldw	r6,0(r2)
  800fe4:	e13ffe17 	ldw	r4,-8(fp)
  800fe8:	01402074 	movhi	r5,129
  800fec:	29535d04 	addi	r5,r5,19828
  800ff0:	08018bc0 	call	8018bc <fprintf>
    	}

		// Execute the correct TLC
    	switch (mode) {																										// Exceute the appropriate tlc depending on the current mode
  800ff4:	d0a74d17 	ldw	r2,-25292(gp)
  800ff8:	e0bfff15 	stw	r2,-4(fp)
  800ffc:	e0ffff17 	ldw	r3,-4(fp)
  801000:	18800060 	cmpeqi	r2,r3,1
  801004:	10000e1e 	bne	r2,zero,801040 <main+0x2b8>
  801008:	e0ffff17 	ldw	r3,-4(fp)
  80100c:	18800070 	cmpltui	r2,r3,1
  801010:	1000071e 	bne	r2,zero,801030 <main+0x2a8>
  801014:	e0ffff17 	ldw	r3,-4(fp)
  801018:	188000a0 	cmpeqi	r2,r3,2
  80101c:	10000c1e 	bne	r2,zero,801050 <main+0x2c8>
  801020:	e0ffff17 	ldw	r3,-4(fp)
  801024:	188000e0 	cmpeqi	r2,r3,3
  801028:	10000d1e 	bne	r2,zero,801060 <main+0x2d8>
  80102c:	003f6506 	br	800dc4 <main+0x3c>
			case 0:
				simple_tlc(&proc_state[0]);
  801030:	01002074 	movhi	r4,129
  801034:	21150204 	addi	r4,r4,21512
  801038:	08002500 	call	800250 <simple_tlc>
				break;
  80103c:	003f6106 	br	800dc4 <main+0x3c>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  801040:	01002074 	movhi	r4,129
  801044:	21150304 	addi	r4,r4,21516
  801048:	08005880 	call	800588 <pedestrian_tlc>
				break;
  80104c:	003f5d06 	br	800dc4 <main+0x3c>
			case 2:
				configurable_tlc(&proc_state[2]);
  801050:	01002074 	movhi	r4,129
  801054:	21150404 	addi	r4,r4,21520
  801058:	08007640 	call	800764 <configurable_tlc>
				break;
  80105c:	003f5906 	br	800dc4 <main+0x3c>
			case 3:
				camera_tlc(&proc_state[3]);
  801060:	01002074 	movhi	r4,129
  801064:	21150504 	addi	r4,r4,21524
  801068:	0800b900 	call	800b90 <camera_tlc>
				break;
		}
	}
  80106c:	003f5506 	br	800dc4 <main+0x3c>

00801070 <_fclose_r>:
  801070:	defffc04 	addi	sp,sp,-16
  801074:	dc400115 	stw	r17,4(sp)
  801078:	dc000015 	stw	r16,0(sp)
  80107c:	dfc00315 	stw	ra,12(sp)
  801080:	dc800215 	stw	r18,8(sp)
  801084:	2821883a 	mov	r16,r5
  801088:	2023883a 	mov	r17,r4
  80108c:	28002926 	beq	r5,zero,801134 <_fclose_r+0xc4>
  801090:	08015440 	call	801544 <__sfp_lock_acquire>
  801094:	88000226 	beq	r17,zero,8010a0 <_fclose_r+0x30>
  801098:	88800e17 	ldw	r2,56(r17)
  80109c:	10002d26 	beq	r2,zero,801154 <_fclose_r+0xe4>
  8010a0:	8080030f 	ldh	r2,12(r16)
  8010a4:	10002226 	beq	r2,zero,801130 <_fclose_r+0xc0>
  8010a8:	8809883a 	mov	r4,r17
  8010ac:	800b883a 	mov	r5,r16
  8010b0:	08011940 	call	801194 <_fflush_r>
  8010b4:	1025883a 	mov	r18,r2
  8010b8:	80800b17 	ldw	r2,44(r16)
  8010bc:	10000426 	beq	r2,zero,8010d0 <_fclose_r+0x60>
  8010c0:	81400717 	ldw	r5,28(r16)
  8010c4:	8809883a 	mov	r4,r17
  8010c8:	103ee83a 	callr	r2
  8010cc:	10002a16 	blt	r2,zero,801178 <_fclose_r+0x108>
  8010d0:	8080030b 	ldhu	r2,12(r16)
  8010d4:	1080200c 	andi	r2,r2,128
  8010d8:	1000231e 	bne	r2,zero,801168 <_fclose_r+0xf8>
  8010dc:	81400c17 	ldw	r5,48(r16)
  8010e0:	28000526 	beq	r5,zero,8010f8 <_fclose_r+0x88>
  8010e4:	80801004 	addi	r2,r16,64
  8010e8:	28800226 	beq	r5,r2,8010f4 <_fclose_r+0x84>
  8010ec:	8809883a 	mov	r4,r17
  8010f0:	0801ad80 	call	801ad8 <_free_r>
  8010f4:	80000c15 	stw	zero,48(r16)
  8010f8:	81401117 	ldw	r5,68(r16)
  8010fc:	28000326 	beq	r5,zero,80110c <_fclose_r+0x9c>
  801100:	8809883a 	mov	r4,r17
  801104:	0801ad80 	call	801ad8 <_free_r>
  801108:	80001115 	stw	zero,68(r16)
  80110c:	8000030d 	sth	zero,12(r16)
  801110:	08015480 	call	801548 <__sfp_lock_release>
  801114:	9005883a 	mov	r2,r18
  801118:	dfc00317 	ldw	ra,12(sp)
  80111c:	dc800217 	ldw	r18,8(sp)
  801120:	dc400117 	ldw	r17,4(sp)
  801124:	dc000017 	ldw	r16,0(sp)
  801128:	dec00404 	addi	sp,sp,16
  80112c:	f800283a 	ret
  801130:	08015480 	call	801548 <__sfp_lock_release>
  801134:	0025883a 	mov	r18,zero
  801138:	9005883a 	mov	r2,r18
  80113c:	dfc00317 	ldw	ra,12(sp)
  801140:	dc800217 	ldw	r18,8(sp)
  801144:	dc400117 	ldw	r17,4(sp)
  801148:	dc000017 	ldw	r16,0(sp)
  80114c:	dec00404 	addi	sp,sp,16
  801150:	f800283a 	ret
  801154:	8809883a 	mov	r4,r17
  801158:	08015540 	call	801554 <__sinit>
  80115c:	8080030f 	ldh	r2,12(r16)
  801160:	103fd11e 	bne	r2,zero,8010a8 <_fclose_r+0x38>
  801164:	003ff206 	br	801130 <_fclose_r+0xc0>
  801168:	81400417 	ldw	r5,16(r16)
  80116c:	8809883a 	mov	r4,r17
  801170:	0801ad80 	call	801ad8 <_free_r>
  801174:	003fd906 	br	8010dc <_fclose_r+0x6c>
  801178:	04bfffc4 	movi	r18,-1
  80117c:	003fd406 	br	8010d0 <_fclose_r+0x60>

00801180 <fclose>:
  801180:	00802074 	movhi	r2,129
  801184:	109c1404 	addi	r2,r2,28752
  801188:	200b883a 	mov	r5,r4
  80118c:	11000017 	ldw	r4,0(r2)
  801190:	08010701 	jmpi	801070 <_fclose_r>

00801194 <_fflush_r>:
  801194:	defffb04 	addi	sp,sp,-20
  801198:	dcc00315 	stw	r19,12(sp)
  80119c:	dc800215 	stw	r18,8(sp)
  8011a0:	dfc00415 	stw	ra,16(sp)
  8011a4:	dc400115 	stw	r17,4(sp)
  8011a8:	dc000015 	stw	r16,0(sp)
  8011ac:	2027883a 	mov	r19,r4
  8011b0:	2825883a 	mov	r18,r5
  8011b4:	20000226 	beq	r4,zero,8011c0 <_fflush_r+0x2c>
  8011b8:	20800e17 	ldw	r2,56(r4)
  8011bc:	10005626 	beq	r2,zero,801318 <_fflush_r+0x184>
  8011c0:	9100030b 	ldhu	r4,12(r18)
  8011c4:	20ffffcc 	andi	r3,r4,65535
  8011c8:	18e0001c 	xori	r3,r3,32768
  8011cc:	18e00004 	addi	r3,r3,-32768
  8011d0:	1880020c 	andi	r2,r3,8
  8011d4:	1000261e 	bne	r2,zero,801270 <_fflush_r+0xdc>
  8011d8:	90c00117 	ldw	r3,4(r18)
  8011dc:	20820014 	ori	r2,r4,2048
  8011e0:	9080030d 	sth	r2,12(r18)
  8011e4:	1009883a 	mov	r4,r2
  8011e8:	00c0400e 	bge	zero,r3,8012ec <_fflush_r+0x158>
  8011ec:	92000a17 	ldw	r8,40(r18)
  8011f0:	40004026 	beq	r8,zero,8012f4 <_fflush_r+0x160>
  8011f4:	2084000c 	andi	r2,r4,4096
  8011f8:	10005326 	beq	r2,zero,801348 <_fflush_r+0x1b4>
  8011fc:	94001417 	ldw	r16,80(r18)
  801200:	9080030b 	ldhu	r2,12(r18)
  801204:	1080010c 	andi	r2,r2,4
  801208:	1000481e 	bne	r2,zero,80132c <_fflush_r+0x198>
  80120c:	91400717 	ldw	r5,28(r18)
  801210:	9809883a 	mov	r4,r19
  801214:	800d883a 	mov	r6,r16
  801218:	000f883a 	mov	r7,zero
  80121c:	403ee83a 	callr	r8
  801220:	8080261e 	bne	r16,r2,8012bc <_fflush_r+0x128>
  801224:	9080030b 	ldhu	r2,12(r18)
  801228:	91000417 	ldw	r4,16(r18)
  80122c:	90000115 	stw	zero,4(r18)
  801230:	10bdffcc 	andi	r2,r2,63487
  801234:	10ffffcc 	andi	r3,r2,65535
  801238:	18c4000c 	andi	r3,r3,4096
  80123c:	9080030d 	sth	r2,12(r18)
  801240:	91000015 	stw	r4,0(r18)
  801244:	18002b26 	beq	r3,zero,8012f4 <_fflush_r+0x160>
  801248:	0007883a 	mov	r3,zero
  80124c:	1805883a 	mov	r2,r3
  801250:	94001415 	stw	r16,80(r18)
  801254:	dfc00417 	ldw	ra,16(sp)
  801258:	dcc00317 	ldw	r19,12(sp)
  80125c:	dc800217 	ldw	r18,8(sp)
  801260:	dc400117 	ldw	r17,4(sp)
  801264:	dc000017 	ldw	r16,0(sp)
  801268:	dec00504 	addi	sp,sp,20
  80126c:	f800283a 	ret
  801270:	94400417 	ldw	r17,16(r18)
  801274:	88001f26 	beq	r17,zero,8012f4 <_fflush_r+0x160>
  801278:	90800017 	ldw	r2,0(r18)
  80127c:	18c000cc 	andi	r3,r3,3
  801280:	94400015 	stw	r17,0(r18)
  801284:	1461c83a 	sub	r16,r2,r17
  801288:	18002526 	beq	r3,zero,801320 <_fflush_r+0x18c>
  80128c:	0005883a 	mov	r2,zero
  801290:	90800215 	stw	r2,8(r18)
  801294:	0400170e 	bge	zero,r16,8012f4 <_fflush_r+0x160>
  801298:	90c00917 	ldw	r3,36(r18)
  80129c:	91400717 	ldw	r5,28(r18)
  8012a0:	880d883a 	mov	r6,r17
  8012a4:	800f883a 	mov	r7,r16
  8012a8:	9809883a 	mov	r4,r19
  8012ac:	183ee83a 	callr	r3
  8012b0:	88a3883a 	add	r17,r17,r2
  8012b4:	80a1c83a 	sub	r16,r16,r2
  8012b8:	00bff616 	blt	zero,r2,801294 <_fflush_r+0x100>
  8012bc:	9080030b 	ldhu	r2,12(r18)
  8012c0:	00ffffc4 	movi	r3,-1
  8012c4:	10801014 	ori	r2,r2,64
  8012c8:	9080030d 	sth	r2,12(r18)
  8012cc:	1805883a 	mov	r2,r3
  8012d0:	dfc00417 	ldw	ra,16(sp)
  8012d4:	dcc00317 	ldw	r19,12(sp)
  8012d8:	dc800217 	ldw	r18,8(sp)
  8012dc:	dc400117 	ldw	r17,4(sp)
  8012e0:	dc000017 	ldw	r16,0(sp)
  8012e4:	dec00504 	addi	sp,sp,20
  8012e8:	f800283a 	ret
  8012ec:	90800f17 	ldw	r2,60(r18)
  8012f0:	00bfbe16 	blt	zero,r2,8011ec <_fflush_r+0x58>
  8012f4:	0007883a 	mov	r3,zero
  8012f8:	1805883a 	mov	r2,r3
  8012fc:	dfc00417 	ldw	ra,16(sp)
  801300:	dcc00317 	ldw	r19,12(sp)
  801304:	dc800217 	ldw	r18,8(sp)
  801308:	dc400117 	ldw	r17,4(sp)
  80130c:	dc000017 	ldw	r16,0(sp)
  801310:	dec00504 	addi	sp,sp,20
  801314:	f800283a 	ret
  801318:	08015540 	call	801554 <__sinit>
  80131c:	003fa806 	br	8011c0 <_fflush_r+0x2c>
  801320:	90800517 	ldw	r2,20(r18)
  801324:	90800215 	stw	r2,8(r18)
  801328:	003fda06 	br	801294 <_fflush_r+0x100>
  80132c:	90800117 	ldw	r2,4(r18)
  801330:	90c00c17 	ldw	r3,48(r18)
  801334:	80a1c83a 	sub	r16,r16,r2
  801338:	183fb426 	beq	r3,zero,80120c <_fflush_r+0x78>
  80133c:	90800f17 	ldw	r2,60(r18)
  801340:	80a1c83a 	sub	r16,r16,r2
  801344:	003fb106 	br	80120c <_fflush_r+0x78>
  801348:	91400717 	ldw	r5,28(r18)
  80134c:	9809883a 	mov	r4,r19
  801350:	000d883a 	mov	r6,zero
  801354:	01c00044 	movi	r7,1
  801358:	403ee83a 	callr	r8
  80135c:	1021883a 	mov	r16,r2
  801360:	00bfffc4 	movi	r2,-1
  801364:	80800226 	beq	r16,r2,801370 <_fflush_r+0x1dc>
  801368:	92000a17 	ldw	r8,40(r18)
  80136c:	003fa406 	br	801200 <_fflush_r+0x6c>
  801370:	98c00017 	ldw	r3,0(r19)
  801374:	00800744 	movi	r2,29
  801378:	18bfde26 	beq	r3,r2,8012f4 <_fflush_r+0x160>
  80137c:	9080030b 	ldhu	r2,12(r18)
  801380:	8007883a 	mov	r3,r16
  801384:	10801014 	ori	r2,r2,64
  801388:	9080030d 	sth	r2,12(r18)
  80138c:	003fcf06 	br	8012cc <_fflush_r+0x138>

00801390 <fflush>:
  801390:	01402034 	movhi	r5,128
  801394:	29446504 	addi	r5,r5,4500
  801398:	2007883a 	mov	r3,r4
  80139c:	20000526 	beq	r4,zero,8013b4 <fflush+0x24>
  8013a0:	00802074 	movhi	r2,129
  8013a4:	109c1404 	addi	r2,r2,28752
  8013a8:	11000017 	ldw	r4,0(r2)
  8013ac:	180b883a 	mov	r5,r3
  8013b0:	08011941 	jmpi	801194 <_fflush_r>
  8013b4:	00802074 	movhi	r2,129
  8013b8:	109c1504 	addi	r2,r2,28756
  8013bc:	11000017 	ldw	r4,0(r2)
  8013c0:	080275c1 	jmpi	80275c <_fwalk_reent>

008013c4 <fgetc>:
  8013c4:	defffd04 	addi	sp,sp,-12
  8013c8:	dc400115 	stw	r17,4(sp)
  8013cc:	04402074 	movhi	r17,129
  8013d0:	8c5c1404 	addi	r17,r17,28752
  8013d4:	88c00017 	ldw	r3,0(r17)
  8013d8:	dc000015 	stw	r16,0(sp)
  8013dc:	dfc00215 	stw	ra,8(sp)
  8013e0:	2021883a 	mov	r16,r4
  8013e4:	18000326 	beq	r3,zero,8013f4 <fgetc+0x30>
  8013e8:	18800e17 	ldw	r2,56(r3)
  8013ec:	1809883a 	mov	r4,r3
  8013f0:	10000e26 	beq	r2,zero,80142c <fgetc+0x68>
  8013f4:	80800117 	ldw	r2,4(r16)
  8013f8:	800b883a 	mov	r5,r16
  8013fc:	10bfffc4 	addi	r2,r2,-1
  801400:	80800115 	stw	r2,4(r16)
  801404:	10000f16 	blt	r2,zero,801444 <fgetc+0x80>
  801408:	80c00017 	ldw	r3,0(r16)
  80140c:	18800003 	ldbu	r2,0(r3)
  801410:	18c00044 	addi	r3,r3,1
  801414:	80c00015 	stw	r3,0(r16)
  801418:	dfc00217 	ldw	ra,8(sp)
  80141c:	dc400117 	ldw	r17,4(sp)
  801420:	dc000017 	ldw	r16,0(sp)
  801424:	dec00304 	addi	sp,sp,12
  801428:	f800283a 	ret
  80142c:	08015540 	call	801554 <__sinit>
  801430:	80800117 	ldw	r2,4(r16)
  801434:	800b883a 	mov	r5,r16
  801438:	10bfffc4 	addi	r2,r2,-1
  80143c:	80800115 	stw	r2,4(r16)
  801440:	103ff10e 	bge	r2,zero,801408 <fgetc+0x44>
  801444:	89000017 	ldw	r4,0(r17)
  801448:	dfc00217 	ldw	ra,8(sp)
  80144c:	dc400117 	ldw	r17,4(sp)
  801450:	dc000017 	ldw	r16,0(sp)
  801454:	dec00304 	addi	sp,sp,12
  801458:	0803e241 	jmpi	803e24 <__srget_r>

0080145c <_fgetc_r>:
  80145c:	defffd04 	addi	sp,sp,-12
  801460:	dc400115 	stw	r17,4(sp)
  801464:	dc000015 	stw	r16,0(sp)
  801468:	dfc00215 	stw	ra,8(sp)
  80146c:	2021883a 	mov	r16,r4
  801470:	2823883a 	mov	r17,r5
  801474:	20000226 	beq	r4,zero,801480 <_fgetc_r+0x24>
  801478:	20800e17 	ldw	r2,56(r4)
  80147c:	10000f26 	beq	r2,zero,8014bc <_fgetc_r+0x60>
  801480:	88800117 	ldw	r2,4(r17)
  801484:	8009883a 	mov	r4,r16
  801488:	880b883a 	mov	r5,r17
  80148c:	10bfffc4 	addi	r2,r2,-1
  801490:	88800115 	stw	r2,4(r17)
  801494:	10001016 	blt	r2,zero,8014d8 <_fgetc_r+0x7c>
  801498:	88c00017 	ldw	r3,0(r17)
  80149c:	18800003 	ldbu	r2,0(r3)
  8014a0:	18c00044 	addi	r3,r3,1
  8014a4:	88c00015 	stw	r3,0(r17)
  8014a8:	dfc00217 	ldw	ra,8(sp)
  8014ac:	dc400117 	ldw	r17,4(sp)
  8014b0:	dc000017 	ldw	r16,0(sp)
  8014b4:	dec00304 	addi	sp,sp,12
  8014b8:	f800283a 	ret
  8014bc:	08015540 	call	801554 <__sinit>
  8014c0:	88800117 	ldw	r2,4(r17)
  8014c4:	8009883a 	mov	r4,r16
  8014c8:	880b883a 	mov	r5,r17
  8014cc:	10bfffc4 	addi	r2,r2,-1
  8014d0:	88800115 	stw	r2,4(r17)
  8014d4:	103ff00e 	bge	r2,zero,801498 <_fgetc_r+0x3c>
  8014d8:	dfc00217 	ldw	ra,8(sp)
  8014dc:	dc400117 	ldw	r17,4(sp)
  8014e0:	dc000017 	ldw	r16,0(sp)
  8014e4:	dec00304 	addi	sp,sp,12
  8014e8:	0803e241 	jmpi	803e24 <__srget_r>

008014ec <std>:
  8014ec:	00802034 	movhi	r2,128
  8014f0:	10903704 	addi	r2,r2,16604
  8014f4:	20800b15 	stw	r2,44(r4)
  8014f8:	00802034 	movhi	r2,128
  8014fc:	10907204 	addi	r2,r2,16840
  801500:	20800815 	stw	r2,32(r4)
  801504:	00c02034 	movhi	r3,128
  801508:	18d05304 	addi	r3,r3,16716
  80150c:	00802034 	movhi	r2,128
  801510:	10903904 	addi	r2,r2,16612
  801514:	2140030d 	sth	r5,12(r4)
  801518:	2180038d 	sth	r6,14(r4)
  80151c:	20c00915 	stw	r3,36(r4)
  801520:	20800a15 	stw	r2,40(r4)
  801524:	20000015 	stw	zero,0(r4)
  801528:	20000115 	stw	zero,4(r4)
  80152c:	20000215 	stw	zero,8(r4)
  801530:	20000415 	stw	zero,16(r4)
  801534:	20000515 	stw	zero,20(r4)
  801538:	20000615 	stw	zero,24(r4)
  80153c:	21000715 	stw	r4,28(r4)
  801540:	f800283a 	ret

00801544 <__sfp_lock_acquire>:
  801544:	f800283a 	ret

00801548 <__sfp_lock_release>:
  801548:	f800283a 	ret

0080154c <__sinit_lock_acquire>:
  80154c:	f800283a 	ret

00801550 <__sinit_lock_release>:
  801550:	f800283a 	ret

00801554 <__sinit>:
  801554:	20800e17 	ldw	r2,56(r4)
  801558:	defffd04 	addi	sp,sp,-12
  80155c:	dc400115 	stw	r17,4(sp)
  801560:	dc000015 	stw	r16,0(sp)
  801564:	dfc00215 	stw	ra,8(sp)
  801568:	04400044 	movi	r17,1
  80156c:	01400104 	movi	r5,4
  801570:	000d883a 	mov	r6,zero
  801574:	2021883a 	mov	r16,r4
  801578:	2200bb04 	addi	r8,r4,748
  80157c:	200f883a 	mov	r7,r4
  801580:	10000526 	beq	r2,zero,801598 <__sinit+0x44>
  801584:	dfc00217 	ldw	ra,8(sp)
  801588:	dc400117 	ldw	r17,4(sp)
  80158c:	dc000017 	ldw	r16,0(sp)
  801590:	dec00304 	addi	sp,sp,12
  801594:	f800283a 	ret
  801598:	21000117 	ldw	r4,4(r4)
  80159c:	00802034 	movhi	r2,128
  8015a0:	10858e04 	addi	r2,r2,5688
  8015a4:	00c000c4 	movi	r3,3
  8015a8:	80800f15 	stw	r2,60(r16)
  8015ac:	80c0b915 	stw	r3,740(r16)
  8015b0:	8200ba15 	stw	r8,744(r16)
  8015b4:	84400e15 	stw	r17,56(r16)
  8015b8:	8000b815 	stw	zero,736(r16)
  8015bc:	08014ec0 	call	8014ec <std>
  8015c0:	81000217 	ldw	r4,8(r16)
  8015c4:	880d883a 	mov	r6,r17
  8015c8:	800f883a 	mov	r7,r16
  8015cc:	01400284 	movi	r5,10
  8015d0:	08014ec0 	call	8014ec <std>
  8015d4:	81000317 	ldw	r4,12(r16)
  8015d8:	800f883a 	mov	r7,r16
  8015dc:	01400484 	movi	r5,18
  8015e0:	01800084 	movi	r6,2
  8015e4:	dfc00217 	ldw	ra,8(sp)
  8015e8:	dc400117 	ldw	r17,4(sp)
  8015ec:	dc000017 	ldw	r16,0(sp)
  8015f0:	dec00304 	addi	sp,sp,12
  8015f4:	08014ec1 	jmpi	8014ec <std>

008015f8 <__fp_lock>:
  8015f8:	0005883a 	mov	r2,zero
  8015fc:	f800283a 	ret

00801600 <__fp_unlock>:
  801600:	0005883a 	mov	r2,zero
  801604:	f800283a 	ret

00801608 <__fp_unlock_all>:
  801608:	00802074 	movhi	r2,129
  80160c:	109c1404 	addi	r2,r2,28752
  801610:	11000017 	ldw	r4,0(r2)
  801614:	01402034 	movhi	r5,128
  801618:	29458004 	addi	r5,r5,5632
  80161c:	08028241 	jmpi	802824 <_fwalk>

00801620 <__fp_lock_all>:
  801620:	00802074 	movhi	r2,129
  801624:	109c1404 	addi	r2,r2,28752
  801628:	11000017 	ldw	r4,0(r2)
  80162c:	01402034 	movhi	r5,128
  801630:	29457e04 	addi	r5,r5,5624
  801634:	08028241 	jmpi	802824 <_fwalk>

00801638 <_cleanup_r>:
  801638:	01402034 	movhi	r5,128
  80163c:	29446004 	addi	r5,r5,4480
  801640:	08028241 	jmpi	802824 <_fwalk>

00801644 <_cleanup>:
  801644:	00802074 	movhi	r2,129
  801648:	109c1504 	addi	r2,r2,28756
  80164c:	11000017 	ldw	r4,0(r2)
  801650:	08016381 	jmpi	801638 <_cleanup_r>

00801654 <__sfmoreglue>:
  801654:	defffc04 	addi	sp,sp,-16
  801658:	dc400115 	stw	r17,4(sp)
  80165c:	2c401724 	muli	r17,r5,92
  801660:	dc800215 	stw	r18,8(sp)
  801664:	2825883a 	mov	r18,r5
  801668:	89400304 	addi	r5,r17,12
  80166c:	dc000015 	stw	r16,0(sp)
  801670:	dfc00315 	stw	ra,12(sp)
  801674:	0802a700 	call	802a70 <_malloc_r>
  801678:	0021883a 	mov	r16,zero
  80167c:	880d883a 	mov	r6,r17
  801680:	000b883a 	mov	r5,zero
  801684:	10000626 	beq	r2,zero,8016a0 <__sfmoreglue+0x4c>
  801688:	11000304 	addi	r4,r2,12
  80168c:	14800115 	stw	r18,4(r2)
  801690:	10000015 	stw	zero,0(r2)
  801694:	11000215 	stw	r4,8(r2)
  801698:	1021883a 	mov	r16,r2
  80169c:	08034140 	call	803414 <memset>
  8016a0:	8005883a 	mov	r2,r16
  8016a4:	dfc00317 	ldw	ra,12(sp)
  8016a8:	dc800217 	ldw	r18,8(sp)
  8016ac:	dc400117 	ldw	r17,4(sp)
  8016b0:	dc000017 	ldw	r16,0(sp)
  8016b4:	dec00404 	addi	sp,sp,16
  8016b8:	f800283a 	ret

008016bc <__sfp>:
  8016bc:	defffd04 	addi	sp,sp,-12
  8016c0:	00802074 	movhi	r2,129
  8016c4:	109c1504 	addi	r2,r2,28756
  8016c8:	dc000015 	stw	r16,0(sp)
  8016cc:	14000017 	ldw	r16,0(r2)
  8016d0:	dc400115 	stw	r17,4(sp)
  8016d4:	dfc00215 	stw	ra,8(sp)
  8016d8:	80800e17 	ldw	r2,56(r16)
  8016dc:	2023883a 	mov	r17,r4
  8016e0:	10002626 	beq	r2,zero,80177c <__sfp+0xc0>
  8016e4:	8400b804 	addi	r16,r16,736
  8016e8:	80800117 	ldw	r2,4(r16)
  8016ec:	81000217 	ldw	r4,8(r16)
  8016f0:	10ffffc4 	addi	r3,r2,-1
  8016f4:	18000916 	blt	r3,zero,80171c <__sfp+0x60>
  8016f8:	2080030f 	ldh	r2,12(r4)
  8016fc:	10000b26 	beq	r2,zero,80172c <__sfp+0x70>
  801700:	017fffc4 	movi	r5,-1
  801704:	00000206 	br	801710 <__sfp+0x54>
  801708:	2080030f 	ldh	r2,12(r4)
  80170c:	10000726 	beq	r2,zero,80172c <__sfp+0x70>
  801710:	18ffffc4 	addi	r3,r3,-1
  801714:	21001704 	addi	r4,r4,92
  801718:	197ffb1e 	bne	r3,r5,801708 <__sfp+0x4c>
  80171c:	80800017 	ldw	r2,0(r16)
  801720:	10001926 	beq	r2,zero,801788 <__sfp+0xcc>
  801724:	1021883a 	mov	r16,r2
  801728:	003fef06 	br	8016e8 <__sfp+0x2c>
  80172c:	00bfffc4 	movi	r2,-1
  801730:	00c00044 	movi	r3,1
  801734:	2080038d 	sth	r2,14(r4)
  801738:	20c0030d 	sth	r3,12(r4)
  80173c:	20000015 	stw	zero,0(r4)
  801740:	20000215 	stw	zero,8(r4)
  801744:	20000115 	stw	zero,4(r4)
  801748:	20000415 	stw	zero,16(r4)
  80174c:	20000515 	stw	zero,20(r4)
  801750:	20000615 	stw	zero,24(r4)
  801754:	20000c15 	stw	zero,48(r4)
  801758:	20000d15 	stw	zero,52(r4)
  80175c:	20001115 	stw	zero,68(r4)
  801760:	20001215 	stw	zero,72(r4)
  801764:	2005883a 	mov	r2,r4
  801768:	dfc00217 	ldw	ra,8(sp)
  80176c:	dc400117 	ldw	r17,4(sp)
  801770:	dc000017 	ldw	r16,0(sp)
  801774:	dec00304 	addi	sp,sp,12
  801778:	f800283a 	ret
  80177c:	8009883a 	mov	r4,r16
  801780:	08015540 	call	801554 <__sinit>
  801784:	003fd706 	br	8016e4 <__sfp+0x28>
  801788:	8809883a 	mov	r4,r17
  80178c:	01400104 	movi	r5,4
  801790:	08016540 	call	801654 <__sfmoreglue>
  801794:	80800015 	stw	r2,0(r16)
  801798:	103fe21e 	bne	r2,zero,801724 <__sfp+0x68>
  80179c:	00800304 	movi	r2,12
  8017a0:	0009883a 	mov	r4,zero
  8017a4:	88800015 	stw	r2,0(r17)
  8017a8:	003fee06 	br	801764 <__sfp+0xa8>

008017ac <_fopen_r>:
  8017ac:	defffa04 	addi	sp,sp,-24
  8017b0:	dcc00415 	stw	r19,16(sp)
  8017b4:	2827883a 	mov	r19,r5
  8017b8:	300b883a 	mov	r5,r6
  8017bc:	d80d883a 	mov	r6,sp
  8017c0:	dc800315 	stw	r18,12(sp)
  8017c4:	dc400215 	stw	r17,8(sp)
  8017c8:	dc000115 	stw	r16,4(sp)
  8017cc:	dfc00515 	stw	ra,20(sp)
  8017d0:	2021883a 	mov	r16,r4
  8017d4:	08093340 	call	809334 <__sflags>
  8017d8:	1025883a 	mov	r18,r2
  8017dc:	8009883a 	mov	r4,r16
  8017e0:	0023883a 	mov	r17,zero
  8017e4:	1000081e 	bne	r2,zero,801808 <_fopen_r+0x5c>
  8017e8:	8805883a 	mov	r2,r17
  8017ec:	dfc00517 	ldw	ra,20(sp)
  8017f0:	dcc00417 	ldw	r19,16(sp)
  8017f4:	dc800317 	ldw	r18,12(sp)
  8017f8:	dc400217 	ldw	r17,8(sp)
  8017fc:	dc000117 	ldw	r16,4(sp)
  801800:	dec00604 	addi	sp,sp,24
  801804:	f800283a 	ret
  801808:	08016bc0 	call	8016bc <__sfp>
  80180c:	1023883a 	mov	r17,r2
  801810:	980b883a 	mov	r5,r19
  801814:	8009883a 	mov	r4,r16
  801818:	01c06d84 	movi	r7,438
  80181c:	103ff226 	beq	r2,zero,8017e8 <_fopen_r+0x3c>
  801820:	d9800017 	ldw	r6,0(sp)
  801824:	08034ac0 	call	8034ac <_open_r>
  801828:	10001816 	blt	r2,zero,80188c <_fopen_r+0xe0>
  80182c:	00c02034 	movhi	r3,128
  801830:	18d05304 	addi	r3,r3,16716
  801834:	923fffcc 	andi	r8,r18,65535
  801838:	8880038d 	sth	r2,14(r17)
  80183c:	00802034 	movhi	r2,128
  801840:	10907204 	addi	r2,r2,16840
  801844:	88800815 	stw	r2,32(r17)
  801848:	88c00915 	stw	r3,36(r17)
  80184c:	00802034 	movhi	r2,128
  801850:	10903904 	addi	r2,r2,16612
  801854:	00c02034 	movhi	r3,128
  801858:	18d03704 	addi	r3,r3,16604
  80185c:	4200400c 	andi	r8,r8,256
  801860:	8c80030d 	sth	r18,12(r17)
  801864:	8009883a 	mov	r4,r16
  801868:	880b883a 	mov	r5,r17
  80186c:	000d883a 	mov	r6,zero
  801870:	01c00084 	movi	r7,2
  801874:	88800a15 	stw	r2,40(r17)
  801878:	88c00b15 	stw	r3,44(r17)
  80187c:	8c400715 	stw	r17,28(r17)
  801880:	403fd926 	beq	r8,zero,8017e8 <_fopen_r+0x3c>
  801884:	0801dec0 	call	801dec <_fseek_r>
  801888:	003fd706 	br	8017e8 <_fopen_r+0x3c>
  80188c:	08015440 	call	801544 <__sfp_lock_acquire>
  801890:	8800030d 	sth	zero,12(r17)
  801894:	08015480 	call	801548 <__sfp_lock_release>
  801898:	0023883a 	mov	r17,zero
  80189c:	003fd206 	br	8017e8 <_fopen_r+0x3c>

008018a0 <fopen>:
  8018a0:	01802074 	movhi	r6,129
  8018a4:	319c1404 	addi	r6,r6,28752
  8018a8:	2007883a 	mov	r3,r4
  8018ac:	31000017 	ldw	r4,0(r6)
  8018b0:	280d883a 	mov	r6,r5
  8018b4:	180b883a 	mov	r5,r3
  8018b8:	08017ac1 	jmpi	8017ac <_fopen_r>

008018bc <fprintf>:
  8018bc:	defffc04 	addi	sp,sp,-16
  8018c0:	dfc00115 	stw	ra,4(sp)
  8018c4:	d9800215 	stw	r6,8(sp)
  8018c8:	d9c00315 	stw	r7,12(sp)
  8018cc:	d8800204 	addi	r2,sp,8
  8018d0:	100d883a 	mov	r6,r2
  8018d4:	d8800015 	stw	r2,0(sp)
  8018d8:	08061a00 	call	8061a0 <__vfprintf_internal>
  8018dc:	dfc00117 	ldw	ra,4(sp)
  8018e0:	dec00404 	addi	sp,sp,16
  8018e4:	f800283a 	ret

008018e8 <_fprintf_r>:
  8018e8:	defffd04 	addi	sp,sp,-12
  8018ec:	2807883a 	mov	r3,r5
  8018f0:	dfc00115 	stw	ra,4(sp)
  8018f4:	d9c00215 	stw	r7,8(sp)
  8018f8:	d8800204 	addi	r2,sp,8
  8018fc:	300b883a 	mov	r5,r6
  801900:	1809883a 	mov	r4,r3
  801904:	100d883a 	mov	r6,r2
  801908:	d8800015 	stw	r2,0(sp)
  80190c:	08061a00 	call	8061a0 <__vfprintf_internal>
  801910:	dfc00117 	ldw	ra,4(sp)
  801914:	dec00304 	addi	sp,sp,12
  801918:	f800283a 	ret

0080191c <_fputs_r>:
  80191c:	defff804 	addi	sp,sp,-32
  801920:	dc000515 	stw	r16,20(sp)
  801924:	2021883a 	mov	r16,r4
  801928:	2809883a 	mov	r4,r5
  80192c:	dc400615 	stw	r17,24(sp)
  801930:	dfc00715 	stw	ra,28(sp)
  801934:	3023883a 	mov	r17,r6
  801938:	d9400015 	stw	r5,0(sp)
  80193c:	08042280 	call	804228 <strlen>
  801940:	00c00044 	movi	r3,1
  801944:	d8800115 	stw	r2,4(sp)
  801948:	d8c00315 	stw	r3,12(sp)
  80194c:	d8800415 	stw	r2,16(sp)
  801950:	dec00215 	stw	sp,8(sp)
  801954:	80000326 	beq	r16,zero,801964 <_fputs_r+0x48>
  801958:	80800e17 	ldw	r2,56(r16)
  80195c:	8009883a 	mov	r4,r16
  801960:	10000926 	beq	r2,zero,801988 <_fputs_r+0x6c>
  801964:	8009883a 	mov	r4,r16
  801968:	880b883a 	mov	r5,r17
  80196c:	d9800204 	addi	r6,sp,8
  801970:	08022c00 	call	8022c0 <__sfvwrite_r>
  801974:	dfc00717 	ldw	ra,28(sp)
  801978:	dc400617 	ldw	r17,24(sp)
  80197c:	dc000517 	ldw	r16,20(sp)
  801980:	dec00804 	addi	sp,sp,32
  801984:	f800283a 	ret
  801988:	08015540 	call	801554 <__sinit>
  80198c:	003ff506 	br	801964 <_fputs_r+0x48>

00801990 <fputs>:
  801990:	01802074 	movhi	r6,129
  801994:	319c1404 	addi	r6,r6,28752
  801998:	2007883a 	mov	r3,r4
  80199c:	31000017 	ldw	r4,0(r6)
  8019a0:	280d883a 	mov	r6,r5
  8019a4:	180b883a 	mov	r5,r3
  8019a8:	080191c1 	jmpi	80191c <_fputs_r>

008019ac <_malloc_trim_r>:
  8019ac:	defffb04 	addi	sp,sp,-20
  8019b0:	dcc00315 	stw	r19,12(sp)
  8019b4:	04c02074 	movhi	r19,129
  8019b8:	9cd60604 	addi	r19,r19,22552
  8019bc:	dc800215 	stw	r18,8(sp)
  8019c0:	dc400115 	stw	r17,4(sp)
  8019c4:	dc000015 	stw	r16,0(sp)
  8019c8:	2823883a 	mov	r17,r5
  8019cc:	2025883a 	mov	r18,r4
  8019d0:	dfc00415 	stw	ra,16(sp)
  8019d4:	0810f140 	call	810f14 <__malloc_lock>
  8019d8:	98800217 	ldw	r2,8(r19)
  8019dc:	9009883a 	mov	r4,r18
  8019e0:	000b883a 	mov	r5,zero
  8019e4:	10c00117 	ldw	r3,4(r2)
  8019e8:	00bfff04 	movi	r2,-4
  8019ec:	18a0703a 	and	r16,r3,r2
  8019f0:	8463c83a 	sub	r17,r16,r17
  8019f4:	8c43fbc4 	addi	r17,r17,4079
  8019f8:	8822d33a 	srli	r17,r17,12
  8019fc:	0083ffc4 	movi	r2,4095
  801a00:	8c7fffc4 	addi	r17,r17,-1
  801a04:	8822933a 	slli	r17,r17,12
  801a08:	1440060e 	bge	r2,r17,801a24 <_malloc_trim_r+0x78>
  801a0c:	0803e840 	call	803e84 <_sbrk_r>
  801a10:	98c00217 	ldw	r3,8(r19)
  801a14:	9009883a 	mov	r4,r18
  801a18:	044bc83a 	sub	r5,zero,r17
  801a1c:	80c7883a 	add	r3,r16,r3
  801a20:	10c00926 	beq	r2,r3,801a48 <_malloc_trim_r+0x9c>
  801a24:	0810f340 	call	810f34 <__malloc_unlock>
  801a28:	0005883a 	mov	r2,zero
  801a2c:	dfc00417 	ldw	ra,16(sp)
  801a30:	dcc00317 	ldw	r19,12(sp)
  801a34:	dc800217 	ldw	r18,8(sp)
  801a38:	dc400117 	ldw	r17,4(sp)
  801a3c:	dc000017 	ldw	r16,0(sp)
  801a40:	dec00504 	addi	sp,sp,20
  801a44:	f800283a 	ret
  801a48:	9009883a 	mov	r4,r18
  801a4c:	0803e840 	call	803e84 <_sbrk_r>
  801a50:	844dc83a 	sub	r6,r16,r17
  801a54:	00ffffc4 	movi	r3,-1
  801a58:	9009883a 	mov	r4,r18
  801a5c:	000b883a 	mov	r5,zero
  801a60:	01c020b4 	movhi	r7,130
  801a64:	39e38004 	addi	r7,r7,-29184
  801a68:	31800054 	ori	r6,r6,1
  801a6c:	10c00926 	beq	r2,r3,801a94 <_malloc_trim_r+0xe8>
  801a70:	38800017 	ldw	r2,0(r7)
  801a74:	98c00217 	ldw	r3,8(r19)
  801a78:	9009883a 	mov	r4,r18
  801a7c:	1445c83a 	sub	r2,r2,r17
  801a80:	38800015 	stw	r2,0(r7)
  801a84:	19800115 	stw	r6,4(r3)
  801a88:	0810f340 	call	810f34 <__malloc_unlock>
  801a8c:	00800044 	movi	r2,1
  801a90:	003fe606 	br	801a2c <_malloc_trim_r+0x80>
  801a94:	0803e840 	call	803e84 <_sbrk_r>
  801a98:	99800217 	ldw	r6,8(r19)
  801a9c:	100f883a 	mov	r7,r2
  801aa0:	9009883a 	mov	r4,r18
  801aa4:	1187c83a 	sub	r3,r2,r6
  801aa8:	008003c4 	movi	r2,15
  801aac:	19400054 	ori	r5,r3,1
  801ab0:	10ffdc0e 	bge	r2,r3,801a24 <_malloc_trim_r+0x78>
  801ab4:	00802074 	movhi	r2,129
  801ab8:	109c1704 	addi	r2,r2,28764
  801abc:	10c00017 	ldw	r3,0(r2)
  801ac0:	008020b4 	movhi	r2,130
  801ac4:	10a38004 	addi	r2,r2,-29184
  801ac8:	31400115 	stw	r5,4(r6)
  801acc:	38c7c83a 	sub	r3,r7,r3
  801ad0:	10c00015 	stw	r3,0(r2)
  801ad4:	003fd306 	br	801a24 <_malloc_trim_r+0x78>

00801ad8 <_free_r>:
  801ad8:	defffd04 	addi	sp,sp,-12
  801adc:	dc400115 	stw	r17,4(sp)
  801ae0:	dc000015 	stw	r16,0(sp)
  801ae4:	dfc00215 	stw	ra,8(sp)
  801ae8:	2821883a 	mov	r16,r5
  801aec:	2023883a 	mov	r17,r4
  801af0:	28005a26 	beq	r5,zero,801c5c <_free_r+0x184>
  801af4:	0810f140 	call	810f14 <__malloc_lock>
  801af8:	823ffe04 	addi	r8,r16,-8
  801afc:	41400117 	ldw	r5,4(r8)
  801b00:	00bfff84 	movi	r2,-2
  801b04:	02802074 	movhi	r10,129
  801b08:	52960604 	addi	r10,r10,22552
  801b0c:	288e703a 	and	r7,r5,r2
  801b10:	41cd883a 	add	r6,r8,r7
  801b14:	30c00117 	ldw	r3,4(r6)
  801b18:	51000217 	ldw	r4,8(r10)
  801b1c:	00bfff04 	movi	r2,-4
  801b20:	1892703a 	and	r9,r3,r2
  801b24:	5017883a 	mov	r11,r10
  801b28:	31006726 	beq	r6,r4,801cc8 <_free_r+0x1f0>
  801b2c:	2880004c 	andi	r2,r5,1
  801b30:	1005003a 	cmpeq	r2,r2,zero
  801b34:	32400115 	stw	r9,4(r6)
  801b38:	10001a1e 	bne	r2,zero,801ba4 <_free_r+0xcc>
  801b3c:	000b883a 	mov	r5,zero
  801b40:	3247883a 	add	r3,r6,r9
  801b44:	18800117 	ldw	r2,4(r3)
  801b48:	1080004c 	andi	r2,r2,1
  801b4c:	1000231e 	bne	r2,zero,801bdc <_free_r+0x104>
  801b50:	280ac03a 	cmpne	r5,r5,zero
  801b54:	3a4f883a 	add	r7,r7,r9
  801b58:	2800451e 	bne	r5,zero,801c70 <_free_r+0x198>
  801b5c:	31000217 	ldw	r4,8(r6)
  801b60:	00802074 	movhi	r2,129
  801b64:	10960804 	addi	r2,r2,22560
  801b68:	20807b26 	beq	r4,r2,801d58 <_free_r+0x280>
  801b6c:	30800317 	ldw	r2,12(r6)
  801b70:	3a07883a 	add	r3,r7,r8
  801b74:	19c00015 	stw	r7,0(r3)
  801b78:	11000215 	stw	r4,8(r2)
  801b7c:	20800315 	stw	r2,12(r4)
  801b80:	38800054 	ori	r2,r7,1
  801b84:	40800115 	stw	r2,4(r8)
  801b88:	28001a26 	beq	r5,zero,801bf4 <_free_r+0x11c>
  801b8c:	8809883a 	mov	r4,r17
  801b90:	dfc00217 	ldw	ra,8(sp)
  801b94:	dc400117 	ldw	r17,4(sp)
  801b98:	dc000017 	ldw	r16,0(sp)
  801b9c:	dec00304 	addi	sp,sp,12
  801ba0:	0810f341 	jmpi	810f34 <__malloc_unlock>
  801ba4:	80bffe17 	ldw	r2,-8(r16)
  801ba8:	50c00204 	addi	r3,r10,8
  801bac:	4091c83a 	sub	r8,r8,r2
  801bb0:	41000217 	ldw	r4,8(r8)
  801bb4:	388f883a 	add	r7,r7,r2
  801bb8:	20c06126 	beq	r4,r3,801d40 <_free_r+0x268>
  801bbc:	40800317 	ldw	r2,12(r8)
  801bc0:	3247883a 	add	r3,r6,r9
  801bc4:	000b883a 	mov	r5,zero
  801bc8:	11000215 	stw	r4,8(r2)
  801bcc:	20800315 	stw	r2,12(r4)
  801bd0:	18800117 	ldw	r2,4(r3)
  801bd4:	1080004c 	andi	r2,r2,1
  801bd8:	103fdd26 	beq	r2,zero,801b50 <_free_r+0x78>
  801bdc:	38800054 	ori	r2,r7,1
  801be0:	3a07883a 	add	r3,r7,r8
  801be4:	280ac03a 	cmpne	r5,r5,zero
  801be8:	40800115 	stw	r2,4(r8)
  801bec:	19c00015 	stw	r7,0(r3)
  801bf0:	283fe61e 	bne	r5,zero,801b8c <_free_r+0xb4>
  801bf4:	00807fc4 	movi	r2,511
  801bf8:	11c01f2e 	bgeu	r2,r7,801c78 <_free_r+0x1a0>
  801bfc:	3806d27a 	srli	r3,r7,9
  801c00:	1800481e 	bne	r3,zero,801d24 <_free_r+0x24c>
  801c04:	3804d0fa 	srli	r2,r7,3
  801c08:	100690fa 	slli	r3,r2,3
  801c0c:	1acd883a 	add	r6,r3,r11
  801c10:	31400217 	ldw	r5,8(r6)
  801c14:	31405926 	beq	r6,r5,801d7c <_free_r+0x2a4>
  801c18:	28800117 	ldw	r2,4(r5)
  801c1c:	00ffff04 	movi	r3,-4
  801c20:	10c4703a 	and	r2,r2,r3
  801c24:	3880022e 	bgeu	r7,r2,801c30 <_free_r+0x158>
  801c28:	29400217 	ldw	r5,8(r5)
  801c2c:	317ffa1e 	bne	r6,r5,801c18 <_free_r+0x140>
  801c30:	29800317 	ldw	r6,12(r5)
  801c34:	41800315 	stw	r6,12(r8)
  801c38:	41400215 	stw	r5,8(r8)
  801c3c:	8809883a 	mov	r4,r17
  801c40:	2a000315 	stw	r8,12(r5)
  801c44:	32000215 	stw	r8,8(r6)
  801c48:	dfc00217 	ldw	ra,8(sp)
  801c4c:	dc400117 	ldw	r17,4(sp)
  801c50:	dc000017 	ldw	r16,0(sp)
  801c54:	dec00304 	addi	sp,sp,12
  801c58:	0810f341 	jmpi	810f34 <__malloc_unlock>
  801c5c:	dfc00217 	ldw	ra,8(sp)
  801c60:	dc400117 	ldw	r17,4(sp)
  801c64:	dc000017 	ldw	r16,0(sp)
  801c68:	dec00304 	addi	sp,sp,12
  801c6c:	f800283a 	ret
  801c70:	31000217 	ldw	r4,8(r6)
  801c74:	003fbd06 	br	801b6c <_free_r+0x94>
  801c78:	3806d0fa 	srli	r3,r7,3
  801c7c:	00800044 	movi	r2,1
  801c80:	51400117 	ldw	r5,4(r10)
  801c84:	180890fa 	slli	r4,r3,3
  801c88:	1807d0ba 	srai	r3,r3,2
  801c8c:	22c9883a 	add	r4,r4,r11
  801c90:	21800217 	ldw	r6,8(r4)
  801c94:	10c4983a 	sll	r2,r2,r3
  801c98:	41000315 	stw	r4,12(r8)
  801c9c:	41800215 	stw	r6,8(r8)
  801ca0:	288ab03a 	or	r5,r5,r2
  801ca4:	22000215 	stw	r8,8(r4)
  801ca8:	8809883a 	mov	r4,r17
  801cac:	51400115 	stw	r5,4(r10)
  801cb0:	32000315 	stw	r8,12(r6)
  801cb4:	dfc00217 	ldw	ra,8(sp)
  801cb8:	dc400117 	ldw	r17,4(sp)
  801cbc:	dc000017 	ldw	r16,0(sp)
  801cc0:	dec00304 	addi	sp,sp,12
  801cc4:	0810f341 	jmpi	810f34 <__malloc_unlock>
  801cc8:	2880004c 	andi	r2,r5,1
  801ccc:	3a4d883a 	add	r6,r7,r9
  801cd0:	1000071e 	bne	r2,zero,801cf0 <_free_r+0x218>
  801cd4:	80bffe17 	ldw	r2,-8(r16)
  801cd8:	4091c83a 	sub	r8,r8,r2
  801cdc:	41000317 	ldw	r4,12(r8)
  801ce0:	40c00217 	ldw	r3,8(r8)
  801ce4:	308d883a 	add	r6,r6,r2
  801ce8:	20c00215 	stw	r3,8(r4)
  801cec:	19000315 	stw	r4,12(r3)
  801cf0:	00802074 	movhi	r2,129
  801cf4:	109c1604 	addi	r2,r2,28760
  801cf8:	11000017 	ldw	r4,0(r2)
  801cfc:	30c00054 	ori	r3,r6,1
  801d00:	52000215 	stw	r8,8(r10)
  801d04:	40c00115 	stw	r3,4(r8)
  801d08:	313fa036 	bltu	r6,r4,801b8c <_free_r+0xb4>
  801d0c:	008020b4 	movhi	r2,130
  801d10:	10a36504 	addi	r2,r2,-29292
  801d14:	11400017 	ldw	r5,0(r2)
  801d18:	8809883a 	mov	r4,r17
  801d1c:	08019ac0 	call	8019ac <_malloc_trim_r>
  801d20:	003f9a06 	br	801b8c <_free_r+0xb4>
  801d24:	00800104 	movi	r2,4
  801d28:	10c0072e 	bgeu	r2,r3,801d48 <_free_r+0x270>
  801d2c:	00800504 	movi	r2,20
  801d30:	10c01936 	bltu	r2,r3,801d98 <_free_r+0x2c0>
  801d34:	188016c4 	addi	r2,r3,91
  801d38:	100690fa 	slli	r3,r2,3
  801d3c:	003fb306 	br	801c0c <_free_r+0x134>
  801d40:	01400044 	movi	r5,1
  801d44:	003f7e06 	br	801b40 <_free_r+0x68>
  801d48:	3804d1ba 	srli	r2,r7,6
  801d4c:	10800e04 	addi	r2,r2,56
  801d50:	100690fa 	slli	r3,r2,3
  801d54:	003fad06 	br	801c0c <_free_r+0x134>
  801d58:	22000315 	stw	r8,12(r4)
  801d5c:	22000215 	stw	r8,8(r4)
  801d60:	3a05883a 	add	r2,r7,r8
  801d64:	38c00054 	ori	r3,r7,1
  801d68:	11c00015 	stw	r7,0(r2)
  801d6c:	41000215 	stw	r4,8(r8)
  801d70:	40c00115 	stw	r3,4(r8)
  801d74:	41000315 	stw	r4,12(r8)
  801d78:	003f8406 	br	801b8c <_free_r+0xb4>
  801d7c:	1005d0ba 	srai	r2,r2,2
  801d80:	00c00044 	movi	r3,1
  801d84:	51000117 	ldw	r4,4(r10)
  801d88:	1886983a 	sll	r3,r3,r2
  801d8c:	20c8b03a 	or	r4,r4,r3
  801d90:	51000115 	stw	r4,4(r10)
  801d94:	003fa706 	br	801c34 <_free_r+0x15c>
  801d98:	00801504 	movi	r2,84
  801d9c:	10c00436 	bltu	r2,r3,801db0 <_free_r+0x2d8>
  801da0:	3804d33a 	srli	r2,r7,12
  801da4:	10801b84 	addi	r2,r2,110
  801da8:	100690fa 	slli	r3,r2,3
  801dac:	003f9706 	br	801c0c <_free_r+0x134>
  801db0:	00805504 	movi	r2,340
  801db4:	10c00436 	bltu	r2,r3,801dc8 <_free_r+0x2f0>
  801db8:	3804d3fa 	srli	r2,r7,15
  801dbc:	10801dc4 	addi	r2,r2,119
  801dc0:	100690fa 	slli	r3,r2,3
  801dc4:	003f9106 	br	801c0c <_free_r+0x134>
  801dc8:	00815504 	movi	r2,1364
  801dcc:	10c0032e 	bgeu	r2,r3,801ddc <_free_r+0x304>
  801dd0:	00801f84 	movi	r2,126
  801dd4:	00c0fc04 	movi	r3,1008
  801dd8:	003f8c06 	br	801c0c <_free_r+0x134>
  801ddc:	3804d4ba 	srli	r2,r7,18
  801de0:	10801f04 	addi	r2,r2,124
  801de4:	100690fa 	slli	r3,r2,3
  801de8:	003f8806 	br	801c0c <_free_r+0x134>

00801dec <_fseek_r>:
  801dec:	deffe804 	addi	sp,sp,-96
  801df0:	dd801515 	stw	r22,84(sp)
  801df4:	dcc01215 	stw	r19,72(sp)
  801df8:	dc801115 	stw	r18,68(sp)
  801dfc:	dc000f15 	stw	r16,60(sp)
  801e00:	dfc01715 	stw	ra,92(sp)
  801e04:	ddc01615 	stw	r23,88(sp)
  801e08:	dd401415 	stw	r21,80(sp)
  801e0c:	dd001315 	stw	r20,76(sp)
  801e10:	dc401015 	stw	r17,64(sp)
  801e14:	2025883a 	mov	r18,r4
  801e18:	2821883a 	mov	r16,r5
  801e1c:	302d883a 	mov	r22,r6
  801e20:	3827883a 	mov	r19,r7
  801e24:	20000226 	beq	r4,zero,801e30 <_fseek_r+0x44>
  801e28:	20800e17 	ldw	r2,56(r4)
  801e2c:	10007826 	beq	r2,zero,802010 <_fseek_r+0x224>
  801e30:	8080030b 	ldhu	r2,12(r16)
  801e34:	00c04204 	movi	r3,264
  801e38:	1080420c 	andi	r2,r2,264
  801e3c:	10c07926 	beq	r2,r3,802024 <_fseek_r+0x238>
  801e40:	85400a17 	ldw	r21,40(r16)
  801e44:	a800ea26 	beq	r21,zero,8021f0 <_fseek_r+0x404>
  801e48:	00800044 	movi	r2,1
  801e4c:	98805f26 	beq	r19,r2,801fcc <_fseek_r+0x1e0>
  801e50:	00800084 	movi	r2,2
  801e54:	98801026 	beq	r19,r2,801e98 <_fseek_r+0xac>
  801e58:	98000f26 	beq	r19,zero,801e98 <_fseek_r+0xac>
  801e5c:	00800584 	movi	r2,22
  801e60:	013fffc4 	movi	r4,-1
  801e64:	90800015 	stw	r2,0(r18)
  801e68:	2005883a 	mov	r2,r4
  801e6c:	dfc01717 	ldw	ra,92(sp)
  801e70:	ddc01617 	ldw	r23,88(sp)
  801e74:	dd801517 	ldw	r22,84(sp)
  801e78:	dd401417 	ldw	r21,80(sp)
  801e7c:	dd001317 	ldw	r20,76(sp)
  801e80:	dcc01217 	ldw	r19,72(sp)
  801e84:	dc801117 	ldw	r18,68(sp)
  801e88:	dc401017 	ldw	r17,64(sp)
  801e8c:	dc000f17 	ldw	r16,60(sp)
  801e90:	dec01804 	addi	sp,sp,96
  801e94:	f800283a 	ret
  801e98:	81800417 	ldw	r6,16(r16)
  801e9c:	0023883a 	mov	r17,zero
  801ea0:	002f883a 	mov	r23,zero
  801ea4:	3000a626 	beq	r6,zero,802140 <_fseek_r+0x354>
  801ea8:	8100030b 	ldhu	r4,12(r16)
  801eac:	2082068c 	andi	r2,r4,2074
  801eb0:	1000081e 	bne	r2,zero,801ed4 <_fseek_r+0xe8>
  801eb4:	2081000c 	andi	r2,r4,1024
  801eb8:	10001b1e 	bne	r2,zero,801f28 <_fseek_r+0x13c>
  801ebc:	00802034 	movhi	r2,128
  801ec0:	10903904 	addi	r2,r2,16612
  801ec4:	a8800926 	beq	r21,r2,801eec <_fseek_r+0x100>
  801ec8:	8080030b 	ldhu	r2,12(r16)
  801ecc:	10820014 	ori	r2,r2,2048
  801ed0:	8080030d 	sth	r2,12(r16)
  801ed4:	9009883a 	mov	r4,r18
  801ed8:	800b883a 	mov	r5,r16
  801edc:	08011940 	call	801194 <_fflush_r>
  801ee0:	1000a326 	beq	r2,zero,802170 <_fseek_r+0x384>
  801ee4:	013fffc4 	movi	r4,-1
  801ee8:	003fdf06 	br	801e68 <_fseek_r+0x7c>
  801eec:	8140038f 	ldh	r5,14(r16)
  801ef0:	283ff516 	blt	r5,zero,801ec8 <_fseek_r+0xdc>
  801ef4:	9009883a 	mov	r4,r18
  801ef8:	d80d883a 	mov	r6,sp
  801efc:	080224c0 	call	80224c <_fstat_r>
  801f00:	103ff11e 	bne	r2,zero,801ec8 <_fseek_r+0xdc>
  801f04:	d8800117 	ldw	r2,4(sp)
  801f08:	00e00014 	movui	r3,32768
  801f0c:	10bc000c 	andi	r2,r2,61440
  801f10:	10ffed1e 	bne	r2,r3,801ec8 <_fseek_r+0xdc>
  801f14:	80c0030b 	ldhu	r3,12(r16)
  801f18:	00810004 	movi	r2,1024
  801f1c:	80801315 	stw	r2,76(r16)
  801f20:	1886b03a 	or	r3,r3,r2
  801f24:	80c0030d 	sth	r3,12(r16)
  801f28:	9800701e 	bne	r19,zero,8020ec <_fseek_r+0x300>
  801f2c:	b029883a 	mov	r20,r22
  801f30:	b804c03a 	cmpne	r2,r23,zero
  801f34:	10003f1e 	bne	r2,zero,802034 <_fseek_r+0x248>
  801f38:	8100030b 	ldhu	r4,12(r16)
  801f3c:	2084000c 	andi	r2,r4,4096
  801f40:	1000a126 	beq	r2,zero,8021c8 <_fseek_r+0x3dc>
  801f44:	81801417 	ldw	r6,80(r16)
  801f48:	80c00117 	ldw	r3,4(r16)
  801f4c:	81400c17 	ldw	r5,48(r16)
  801f50:	30e3c83a 	sub	r17,r6,r3
  801f54:	28008026 	beq	r5,zero,802158 <_fseek_r+0x36c>
  801f58:	81c00f17 	ldw	r7,60(r16)
  801f5c:	89e3c83a 	sub	r17,r17,r7
  801f60:	80800e17 	ldw	r2,56(r16)
  801f64:	81800417 	ldw	r6,16(r16)
  801f68:	88c7883a 	add	r3,r17,r3
  801f6c:	1185c83a 	sub	r2,r2,r6
  801f70:	11cf883a 	add	r7,r2,r7
  801f74:	1887c83a 	sub	r3,r3,r2
  801f78:	2088000c 	andi	r2,r4,8192
  801f7c:	10003e1e 	bne	r2,zero,802078 <_fseek_r+0x28c>
  801f80:	a0c03d16 	blt	r20,r3,802078 <_fseek_r+0x28c>
  801f84:	38c5883a 	add	r2,r7,r3
  801f88:	a0803b2e 	bgeu	r20,r2,802078 <_fseek_r+0x28c>
  801f8c:	a0c5c83a 	sub	r2,r20,r3
  801f90:	3887c83a 	sub	r3,r7,r2
  801f94:	3085883a 	add	r2,r6,r2
  801f98:	80800015 	stw	r2,0(r16)
  801f9c:	80c00115 	stw	r3,4(r16)
  801fa0:	28000526 	beq	r5,zero,801fb8 <_fseek_r+0x1cc>
  801fa4:	80801004 	addi	r2,r16,64
  801fa8:	28800226 	beq	r5,r2,801fb4 <_fseek_r+0x1c8>
  801fac:	9009883a 	mov	r4,r18
  801fb0:	0801ad80 	call	801ad8 <_free_r>
  801fb4:	80000c15 	stw	zero,48(r16)
  801fb8:	8080030b 	ldhu	r2,12(r16)
  801fbc:	0009883a 	mov	r4,zero
  801fc0:	10bff7cc 	andi	r2,r2,65503
  801fc4:	8080030d 	sth	r2,12(r16)
  801fc8:	003fa706 	br	801e68 <_fseek_r+0x7c>
  801fcc:	9009883a 	mov	r4,r18
  801fd0:	800b883a 	mov	r5,r16
  801fd4:	08011940 	call	801194 <_fflush_r>
  801fd8:	8100030b 	ldhu	r4,12(r16)
  801fdc:	2084000c 	andi	r2,r4,4096
  801fe0:	10008726 	beq	r2,zero,802200 <_fseek_r+0x414>
  801fe4:	84401417 	ldw	r17,80(r16)
  801fe8:	2080010c 	andi	r2,r4,4
  801fec:	1000171e 	bne	r2,zero,80204c <_fseek_r+0x260>
  801ff0:	2080020c 	andi	r2,r4,8
  801ff4:	10003b26 	beq	r2,zero,8020e4 <_fseek_r+0x2f8>
  801ff8:	80800017 	ldw	r2,0(r16)
  801ffc:	10003926 	beq	r2,zero,8020e4 <_fseek_r+0x2f8>
  802000:	81800417 	ldw	r6,16(r16)
  802004:	1185c83a 	sub	r2,r2,r6
  802008:	88a3883a 	add	r17,r17,r2
  80200c:	00001606 	br	802068 <_fseek_r+0x27c>
  802010:	08015540 	call	801554 <__sinit>
  802014:	8080030b 	ldhu	r2,12(r16)
  802018:	00c04204 	movi	r3,264
  80201c:	1080420c 	andi	r2,r2,264
  802020:	10ff871e 	bne	r2,r3,801e40 <_fseek_r+0x54>
  802024:	9009883a 	mov	r4,r18
  802028:	800b883a 	mov	r5,r16
  80202c:	08011940 	call	801194 <_fflush_r>
  802030:	003f8306 	br	801e40 <_fseek_r+0x54>
  802034:	81400c17 	ldw	r5,48(r16)
  802038:	28004526 	beq	r5,zero,802150 <_fseek_r+0x364>
  80203c:	8100030b 	ldhu	r4,12(r16)
  802040:	80c00117 	ldw	r3,4(r16)
  802044:	81c00f17 	ldw	r7,60(r16)
  802048:	003fc506 	br	801f60 <_fseek_r+0x174>
  80204c:	80c00117 	ldw	r3,4(r16)
  802050:	80800c17 	ldw	r2,48(r16)
  802054:	88e3c83a 	sub	r17,r17,r3
  802058:	10002226 	beq	r2,zero,8020e4 <_fseek_r+0x2f8>
  80205c:	81c00f17 	ldw	r7,60(r16)
  802060:	81800417 	ldw	r6,16(r16)
  802064:	89e3c83a 	sub	r17,r17,r7
  802068:	b46d883a 	add	r22,r22,r17
  80206c:	0027883a 	mov	r19,zero
  802070:	05c00044 	movi	r23,1
  802074:	003f8b06 	br	801ea4 <_fseek_r+0xb8>
  802078:	80801317 	ldw	r2,76(r16)
  80207c:	81400717 	ldw	r5,28(r16)
  802080:	9009883a 	mov	r4,r18
  802084:	0085c83a 	sub	r2,zero,r2
  802088:	a0a2703a 	and	r17,r20,r2
  80208c:	880d883a 	mov	r6,r17
  802090:	000f883a 	mov	r7,zero
  802094:	a83ee83a 	callr	r21
  802098:	00ffffc4 	movi	r3,-1
  80209c:	10ff8d26 	beq	r2,r3,801ed4 <_fseek_r+0xe8>
  8020a0:	80800417 	ldw	r2,16(r16)
  8020a4:	81400c17 	ldw	r5,48(r16)
  8020a8:	80000115 	stw	zero,4(r16)
  8020ac:	80800015 	stw	r2,0(r16)
  8020b0:	28000526 	beq	r5,zero,8020c8 <_fseek_r+0x2dc>
  8020b4:	80801004 	addi	r2,r16,64
  8020b8:	28800226 	beq	r5,r2,8020c4 <_fseek_r+0x2d8>
  8020bc:	9009883a 	mov	r4,r18
  8020c0:	0801ad80 	call	801ad8 <_free_r>
  8020c4:	80000c15 	stw	zero,48(r16)
  8020c8:	8080030b 	ldhu	r2,12(r16)
  8020cc:	a463c83a 	sub	r17,r20,r17
  8020d0:	10bff7cc 	andi	r2,r2,65503
  8020d4:	8080030d 	sth	r2,12(r16)
  8020d8:	88000c1e 	bne	r17,zero,80210c <_fseek_r+0x320>
  8020dc:	0009883a 	mov	r4,zero
  8020e0:	003f6106 	br	801e68 <_fseek_r+0x7c>
  8020e4:	81800417 	ldw	r6,16(r16)
  8020e8:	003fdf06 	br	802068 <_fseek_r+0x27c>
  8020ec:	8140038f 	ldh	r5,14(r16)
  8020f0:	9009883a 	mov	r4,r18
  8020f4:	d80d883a 	mov	r6,sp
  8020f8:	080224c0 	call	80224c <_fstat_r>
  8020fc:	103f751e 	bne	r2,zero,801ed4 <_fseek_r+0xe8>
  802100:	d8800417 	ldw	r2,16(sp)
  802104:	b0a9883a 	add	r20,r22,r2
  802108:	003f8906 	br	801f30 <_fseek_r+0x144>
  80210c:	9009883a 	mov	r4,r18
  802110:	800b883a 	mov	r5,r16
  802114:	0803c440 	call	803c44 <__srefill_r>
  802118:	103f6e1e 	bne	r2,zero,801ed4 <_fseek_r+0xe8>
  80211c:	80c00117 	ldw	r3,4(r16)
  802120:	1c7f6c36 	bltu	r3,r17,801ed4 <_fseek_r+0xe8>
  802124:	80800017 	ldw	r2,0(r16)
  802128:	1c47c83a 	sub	r3,r3,r17
  80212c:	0009883a 	mov	r4,zero
  802130:	1445883a 	add	r2,r2,r17
  802134:	80c00115 	stw	r3,4(r16)
  802138:	80800015 	stw	r2,0(r16)
  80213c:	003f4a06 	br	801e68 <_fseek_r+0x7c>
  802140:	9009883a 	mov	r4,r18
  802144:	800b883a 	mov	r5,r16
  802148:	08028dc0 	call	8028dc <__smakebuf_r>
  80214c:	003f5606 	br	801ea8 <_fseek_r+0xbc>
  802150:	8100030b 	ldhu	r4,12(r16)
  802154:	80c00117 	ldw	r3,4(r16)
  802158:	80800017 	ldw	r2,0(r16)
  80215c:	81800417 	ldw	r6,16(r16)
  802160:	1185c83a 	sub	r2,r2,r6
  802164:	10cf883a 	add	r7,r2,r3
  802168:	8887c83a 	sub	r3,r17,r2
  80216c:	003f8206 	br	801f78 <_fseek_r+0x18c>
  802170:	81400717 	ldw	r5,28(r16)
  802174:	b00d883a 	mov	r6,r22
  802178:	980f883a 	mov	r7,r19
  80217c:	9009883a 	mov	r4,r18
  802180:	a83ee83a 	callr	r21
  802184:	00ffffc4 	movi	r3,-1
  802188:	10ff5626 	beq	r2,r3,801ee4 <_fseek_r+0xf8>
  80218c:	81400c17 	ldw	r5,48(r16)
  802190:	28000526 	beq	r5,zero,8021a8 <_fseek_r+0x3bc>
  802194:	80801004 	addi	r2,r16,64
  802198:	28800226 	beq	r5,r2,8021a4 <_fseek_r+0x3b8>
  80219c:	9009883a 	mov	r4,r18
  8021a0:	0801ad80 	call	801ad8 <_free_r>
  8021a4:	80000c15 	stw	zero,48(r16)
  8021a8:	8080030b 	ldhu	r2,12(r16)
  8021ac:	80c00417 	ldw	r3,16(r16)
  8021b0:	0009883a 	mov	r4,zero
  8021b4:	10bdf7cc 	andi	r2,r2,63455
  8021b8:	8080030d 	sth	r2,12(r16)
  8021bc:	80c00015 	stw	r3,0(r16)
  8021c0:	80000115 	stw	zero,4(r16)
  8021c4:	003f2806 	br	801e68 <_fseek_r+0x7c>
  8021c8:	81400717 	ldw	r5,28(r16)
  8021cc:	000d883a 	mov	r6,zero
  8021d0:	9009883a 	mov	r4,r18
  8021d4:	01c00044 	movi	r7,1
  8021d8:	a83ee83a 	callr	r21
  8021dc:	100d883a 	mov	r6,r2
  8021e0:	00bfffc4 	movi	r2,-1
  8021e4:	30bf3b26 	beq	r6,r2,801ed4 <_fseek_r+0xe8>
  8021e8:	8100030b 	ldhu	r4,12(r16)
  8021ec:	003f5606 	br	801f48 <_fseek_r+0x15c>
  8021f0:	00800744 	movi	r2,29
  8021f4:	013fffc4 	movi	r4,-1
  8021f8:	90800015 	stw	r2,0(r18)
  8021fc:	003f1a06 	br	801e68 <_fseek_r+0x7c>
  802200:	81400717 	ldw	r5,28(r16)
  802204:	980f883a 	mov	r7,r19
  802208:	9009883a 	mov	r4,r18
  80220c:	000d883a 	mov	r6,zero
  802210:	a83ee83a 	callr	r21
  802214:	1023883a 	mov	r17,r2
  802218:	00bfffc4 	movi	r2,-1
  80221c:	88bf3126 	beq	r17,r2,801ee4 <_fseek_r+0xf8>
  802220:	8100030b 	ldhu	r4,12(r16)
  802224:	003f7006 	br	801fe8 <_fseek_r+0x1fc>

00802228 <fseek>:
  802228:	00802074 	movhi	r2,129
  80222c:	109c1404 	addi	r2,r2,28752
  802230:	2013883a 	mov	r9,r4
  802234:	11000017 	ldw	r4,0(r2)
  802238:	2805883a 	mov	r2,r5
  80223c:	300f883a 	mov	r7,r6
  802240:	480b883a 	mov	r5,r9
  802244:	100d883a 	mov	r6,r2
  802248:	0801dec1 	jmpi	801dec <_fseek_r>

0080224c <_fstat_r>:
  80224c:	defffd04 	addi	sp,sp,-12
  802250:	dc000015 	stw	r16,0(sp)
  802254:	040020b4 	movhi	r16,130
  802258:	84236404 	addi	r16,r16,-29296
  80225c:	dc400115 	stw	r17,4(sp)
  802260:	80000015 	stw	zero,0(r16)
  802264:	2023883a 	mov	r17,r4
  802268:	2809883a 	mov	r4,r5
  80226c:	300b883a 	mov	r5,r6
  802270:	dfc00215 	stw	ra,8(sp)
  802274:	08108580 	call	810858 <fstat>
  802278:	1007883a 	mov	r3,r2
  80227c:	00bfffc4 	movi	r2,-1
  802280:	18800626 	beq	r3,r2,80229c <_fstat_r+0x50>
  802284:	1805883a 	mov	r2,r3
  802288:	dfc00217 	ldw	ra,8(sp)
  80228c:	dc400117 	ldw	r17,4(sp)
  802290:	dc000017 	ldw	r16,0(sp)
  802294:	dec00304 	addi	sp,sp,12
  802298:	f800283a 	ret
  80229c:	80800017 	ldw	r2,0(r16)
  8022a0:	103ff826 	beq	r2,zero,802284 <_fstat_r+0x38>
  8022a4:	88800015 	stw	r2,0(r17)
  8022a8:	1805883a 	mov	r2,r3
  8022ac:	dfc00217 	ldw	ra,8(sp)
  8022b0:	dc400117 	ldw	r17,4(sp)
  8022b4:	dc000017 	ldw	r16,0(sp)
  8022b8:	dec00304 	addi	sp,sp,12
  8022bc:	f800283a 	ret

008022c0 <__sfvwrite_r>:
  8022c0:	30800217 	ldw	r2,8(r6)
  8022c4:	defff504 	addi	sp,sp,-44
  8022c8:	df000915 	stw	fp,36(sp)
  8022cc:	dd800715 	stw	r22,28(sp)
  8022d0:	dc800315 	stw	r18,12(sp)
  8022d4:	dfc00a15 	stw	ra,40(sp)
  8022d8:	ddc00815 	stw	r23,32(sp)
  8022dc:	dd400615 	stw	r21,24(sp)
  8022e0:	dd000515 	stw	r20,20(sp)
  8022e4:	dcc00415 	stw	r19,16(sp)
  8022e8:	dc400215 	stw	r17,8(sp)
  8022ec:	dc000115 	stw	r16,4(sp)
  8022f0:	302d883a 	mov	r22,r6
  8022f4:	2039883a 	mov	fp,r4
  8022f8:	2825883a 	mov	r18,r5
  8022fc:	10001c26 	beq	r2,zero,802370 <__sfvwrite_r+0xb0>
  802300:	29c0030b 	ldhu	r7,12(r5)
  802304:	3880020c 	andi	r2,r7,8
  802308:	10002726 	beq	r2,zero,8023a8 <__sfvwrite_r+0xe8>
  80230c:	28800417 	ldw	r2,16(r5)
  802310:	10002526 	beq	r2,zero,8023a8 <__sfvwrite_r+0xe8>
  802314:	3880008c 	andi	r2,r7,2
  802318:	b5400017 	ldw	r21,0(r22)
  80231c:	10002826 	beq	r2,zero,8023c0 <__sfvwrite_r+0x100>
  802320:	0021883a 	mov	r16,zero
  802324:	0023883a 	mov	r17,zero
  802328:	880d883a 	mov	r6,r17
  80232c:	e009883a 	mov	r4,fp
  802330:	00810004 	movi	r2,1024
  802334:	80006e26 	beq	r16,zero,8024f0 <__sfvwrite_r+0x230>
  802338:	800f883a 	mov	r7,r16
  80233c:	91400717 	ldw	r5,28(r18)
  802340:	1400012e 	bgeu	r2,r16,802348 <__sfvwrite_r+0x88>
  802344:	100f883a 	mov	r7,r2
  802348:	90c00917 	ldw	r3,36(r18)
  80234c:	183ee83a 	callr	r3
  802350:	1007883a 	mov	r3,r2
  802354:	80a1c83a 	sub	r16,r16,r2
  802358:	88a3883a 	add	r17,r17,r2
  80235c:	00806d0e 	bge	zero,r2,802514 <__sfvwrite_r+0x254>
  802360:	b0800217 	ldw	r2,8(r22)
  802364:	10c5c83a 	sub	r2,r2,r3
  802368:	b0800215 	stw	r2,8(r22)
  80236c:	103fee1e 	bne	r2,zero,802328 <__sfvwrite_r+0x68>
  802370:	0009883a 	mov	r4,zero
  802374:	2005883a 	mov	r2,r4
  802378:	dfc00a17 	ldw	ra,40(sp)
  80237c:	df000917 	ldw	fp,36(sp)
  802380:	ddc00817 	ldw	r23,32(sp)
  802384:	dd800717 	ldw	r22,28(sp)
  802388:	dd400617 	ldw	r21,24(sp)
  80238c:	dd000517 	ldw	r20,20(sp)
  802390:	dcc00417 	ldw	r19,16(sp)
  802394:	dc800317 	ldw	r18,12(sp)
  802398:	dc400217 	ldw	r17,8(sp)
  80239c:	dc000117 	ldw	r16,4(sp)
  8023a0:	dec00b04 	addi	sp,sp,44
  8023a4:	f800283a 	ret
  8023a8:	08079bc0 	call	8079bc <__swsetup_r>
  8023ac:	1000e41e 	bne	r2,zero,802740 <__sfvwrite_r+0x480>
  8023b0:	91c0030b 	ldhu	r7,12(r18)
  8023b4:	b5400017 	ldw	r21,0(r22)
  8023b8:	3880008c 	andi	r2,r7,2
  8023bc:	103fd81e 	bne	r2,zero,802320 <__sfvwrite_r+0x60>
  8023c0:	3880004c 	andi	r2,r7,1
  8023c4:	1005003a 	cmpeq	r2,r2,zero
  8023c8:	10005726 	beq	r2,zero,802528 <__sfvwrite_r+0x268>
  8023cc:	0029883a 	mov	r20,zero
  8023d0:	002f883a 	mov	r23,zero
  8023d4:	a0004226 	beq	r20,zero,8024e0 <__sfvwrite_r+0x220>
  8023d8:	3880800c 	andi	r2,r7,512
  8023dc:	94000217 	ldw	r16,8(r18)
  8023e0:	10008b26 	beq	r2,zero,802610 <__sfvwrite_r+0x350>
  8023e4:	800d883a 	mov	r6,r16
  8023e8:	a400a536 	bltu	r20,r16,802680 <__sfvwrite_r+0x3c0>
  8023ec:	3881200c 	andi	r2,r7,1152
  8023f0:	10002726 	beq	r2,zero,802490 <__sfvwrite_r+0x1d0>
  8023f4:	90800517 	ldw	r2,20(r18)
  8023f8:	92000417 	ldw	r8,16(r18)
  8023fc:	91400017 	ldw	r5,0(r18)
  802400:	1087883a 	add	r3,r2,r2
  802404:	1887883a 	add	r3,r3,r2
  802408:	1808d7fa 	srli	r4,r3,31
  80240c:	2a21c83a 	sub	r16,r5,r8
  802410:	80800044 	addi	r2,r16,1
  802414:	20c9883a 	add	r4,r4,r3
  802418:	2027d07a 	srai	r19,r4,1
  80241c:	a085883a 	add	r2,r20,r2
  802420:	980d883a 	mov	r6,r19
  802424:	9880022e 	bgeu	r19,r2,802430 <__sfvwrite_r+0x170>
  802428:	1027883a 	mov	r19,r2
  80242c:	100d883a 	mov	r6,r2
  802430:	3881000c 	andi	r2,r7,1024
  802434:	1000b826 	beq	r2,zero,802718 <__sfvwrite_r+0x458>
  802438:	300b883a 	mov	r5,r6
  80243c:	e009883a 	mov	r4,fp
  802440:	0802a700 	call	802a70 <_malloc_r>
  802444:	10003126 	beq	r2,zero,80250c <__sfvwrite_r+0x24c>
  802448:	91400417 	ldw	r5,16(r18)
  80244c:	1009883a 	mov	r4,r2
  802450:	800d883a 	mov	r6,r16
  802454:	1023883a 	mov	r17,r2
  802458:	08032940 	call	803294 <memcpy>
  80245c:	90c0030b 	ldhu	r3,12(r18)
  802460:	00beffc4 	movi	r2,-1025
  802464:	1886703a 	and	r3,r3,r2
  802468:	18c02014 	ori	r3,r3,128
  80246c:	90c0030d 	sth	r3,12(r18)
  802470:	9c07c83a 	sub	r3,r19,r16
  802474:	8c05883a 	add	r2,r17,r16
  802478:	a00d883a 	mov	r6,r20
  80247c:	a021883a 	mov	r16,r20
  802480:	90800015 	stw	r2,0(r18)
  802484:	90c00215 	stw	r3,8(r18)
  802488:	94400415 	stw	r17,16(r18)
  80248c:	94c00515 	stw	r19,20(r18)
  802490:	91000017 	ldw	r4,0(r18)
  802494:	b80b883a 	mov	r5,r23
  802498:	a023883a 	mov	r17,r20
  80249c:	08033340 	call	803334 <memmove>
  8024a0:	90c00217 	ldw	r3,8(r18)
  8024a4:	90800017 	ldw	r2,0(r18)
  8024a8:	a027883a 	mov	r19,r20
  8024ac:	1c07c83a 	sub	r3,r3,r16
  8024b0:	1405883a 	add	r2,r2,r16
  8024b4:	90c00215 	stw	r3,8(r18)
  8024b8:	a021883a 	mov	r16,r20
  8024bc:	90800015 	stw	r2,0(r18)
  8024c0:	b0800217 	ldw	r2,8(r22)
  8024c4:	1405c83a 	sub	r2,r2,r16
  8024c8:	b0800215 	stw	r2,8(r22)
  8024cc:	103fa826 	beq	r2,zero,802370 <__sfvwrite_r+0xb0>
  8024d0:	a469c83a 	sub	r20,r20,r17
  8024d4:	91c0030b 	ldhu	r7,12(r18)
  8024d8:	bcef883a 	add	r23,r23,r19
  8024dc:	a03fbe1e 	bne	r20,zero,8023d8 <__sfvwrite_r+0x118>
  8024e0:	adc00017 	ldw	r23,0(r21)
  8024e4:	ad000117 	ldw	r20,4(r21)
  8024e8:	ad400204 	addi	r21,r21,8
  8024ec:	003fb906 	br	8023d4 <__sfvwrite_r+0x114>
  8024f0:	ac400017 	ldw	r17,0(r21)
  8024f4:	ac000117 	ldw	r16,4(r21)
  8024f8:	ad400204 	addi	r21,r21,8
  8024fc:	003f8a06 	br	802328 <__sfvwrite_r+0x68>
  802500:	91400417 	ldw	r5,16(r18)
  802504:	e009883a 	mov	r4,fp
  802508:	0801ad80 	call	801ad8 <_free_r>
  80250c:	00800304 	movi	r2,12
  802510:	e0800015 	stw	r2,0(fp)
  802514:	9080030b 	ldhu	r2,12(r18)
  802518:	013fffc4 	movi	r4,-1
  80251c:	10801014 	ori	r2,r2,64
  802520:	9080030d 	sth	r2,12(r18)
  802524:	003f9306 	br	802374 <__sfvwrite_r+0xb4>
  802528:	0027883a 	mov	r19,zero
  80252c:	002f883a 	mov	r23,zero
  802530:	d8000015 	stw	zero,0(sp)
  802534:	0029883a 	mov	r20,zero
  802538:	98001e26 	beq	r19,zero,8025b4 <__sfvwrite_r+0x2f4>
  80253c:	d8c00017 	ldw	r3,0(sp)
  802540:	1804c03a 	cmpne	r2,r3,zero
  802544:	10005e26 	beq	r2,zero,8026c0 <__sfvwrite_r+0x400>
  802548:	9821883a 	mov	r16,r19
  80254c:	a4c0012e 	bgeu	r20,r19,802554 <__sfvwrite_r+0x294>
  802550:	a021883a 	mov	r16,r20
  802554:	91000017 	ldw	r4,0(r18)
  802558:	90800417 	ldw	r2,16(r18)
  80255c:	91800217 	ldw	r6,8(r18)
  802560:	91c00517 	ldw	r7,20(r18)
  802564:	1100022e 	bgeu	r2,r4,802570 <__sfvwrite_r+0x2b0>
  802568:	31e3883a 	add	r17,r6,r7
  80256c:	8c001616 	blt	r17,r16,8025c8 <__sfvwrite_r+0x308>
  802570:	81c03816 	blt	r16,r7,802654 <__sfvwrite_r+0x394>
  802574:	90c00917 	ldw	r3,36(r18)
  802578:	91400717 	ldw	r5,28(r18)
  80257c:	e009883a 	mov	r4,fp
  802580:	b80d883a 	mov	r6,r23
  802584:	183ee83a 	callr	r3
  802588:	1023883a 	mov	r17,r2
  80258c:	00bfe10e 	bge	zero,r2,802514 <__sfvwrite_r+0x254>
  802590:	a469c83a 	sub	r20,r20,r17
  802594:	a0001826 	beq	r20,zero,8025f8 <__sfvwrite_r+0x338>
  802598:	b0800217 	ldw	r2,8(r22)
  80259c:	1445c83a 	sub	r2,r2,r17
  8025a0:	b0800215 	stw	r2,8(r22)
  8025a4:	103f7226 	beq	r2,zero,802370 <__sfvwrite_r+0xb0>
  8025a8:	9c67c83a 	sub	r19,r19,r17
  8025ac:	bc6f883a 	add	r23,r23,r17
  8025b0:	983fe21e 	bne	r19,zero,80253c <__sfvwrite_r+0x27c>
  8025b4:	adc00017 	ldw	r23,0(r21)
  8025b8:	acc00117 	ldw	r19,4(r21)
  8025bc:	ad400204 	addi	r21,r21,8
  8025c0:	d8000015 	stw	zero,0(sp)
  8025c4:	003fdc06 	br	802538 <__sfvwrite_r+0x278>
  8025c8:	b80b883a 	mov	r5,r23
  8025cc:	880d883a 	mov	r6,r17
  8025d0:	08033340 	call	803334 <memmove>
  8025d4:	90c00017 	ldw	r3,0(r18)
  8025d8:	e009883a 	mov	r4,fp
  8025dc:	900b883a 	mov	r5,r18
  8025e0:	1c47883a 	add	r3,r3,r17
  8025e4:	90c00015 	stw	r3,0(r18)
  8025e8:	08011940 	call	801194 <_fflush_r>
  8025ec:	103fc91e 	bne	r2,zero,802514 <__sfvwrite_r+0x254>
  8025f0:	a469c83a 	sub	r20,r20,r17
  8025f4:	a03fe81e 	bne	r20,zero,802598 <__sfvwrite_r+0x2d8>
  8025f8:	e009883a 	mov	r4,fp
  8025fc:	900b883a 	mov	r5,r18
  802600:	08011940 	call	801194 <_fflush_r>
  802604:	103fc31e 	bne	r2,zero,802514 <__sfvwrite_r+0x254>
  802608:	d8000015 	stw	zero,0(sp)
  80260c:	003fe206 	br	802598 <__sfvwrite_r+0x2d8>
  802610:	91000017 	ldw	r4,0(r18)
  802614:	90800417 	ldw	r2,16(r18)
  802618:	1100022e 	bgeu	r2,r4,802624 <__sfvwrite_r+0x364>
  80261c:	8023883a 	mov	r17,r16
  802620:	85003136 	bltu	r16,r20,8026e8 <__sfvwrite_r+0x428>
  802624:	91c00517 	ldw	r7,20(r18)
  802628:	a1c01836 	bltu	r20,r7,80268c <__sfvwrite_r+0x3cc>
  80262c:	90c00917 	ldw	r3,36(r18)
  802630:	91400717 	ldw	r5,28(r18)
  802634:	e009883a 	mov	r4,fp
  802638:	b80d883a 	mov	r6,r23
  80263c:	183ee83a 	callr	r3
  802640:	1021883a 	mov	r16,r2
  802644:	00bfb30e 	bge	zero,r2,802514 <__sfvwrite_r+0x254>
  802648:	1023883a 	mov	r17,r2
  80264c:	1027883a 	mov	r19,r2
  802650:	003f9b06 	br	8024c0 <__sfvwrite_r+0x200>
  802654:	b80b883a 	mov	r5,r23
  802658:	800d883a 	mov	r6,r16
  80265c:	08033340 	call	803334 <memmove>
  802660:	90c00217 	ldw	r3,8(r18)
  802664:	90800017 	ldw	r2,0(r18)
  802668:	8023883a 	mov	r17,r16
  80266c:	1c07c83a 	sub	r3,r3,r16
  802670:	1405883a 	add	r2,r2,r16
  802674:	90c00215 	stw	r3,8(r18)
  802678:	90800015 	stw	r2,0(r18)
  80267c:	003fc406 	br	802590 <__sfvwrite_r+0x2d0>
  802680:	a00d883a 	mov	r6,r20
  802684:	a021883a 	mov	r16,r20
  802688:	003f8106 	br	802490 <__sfvwrite_r+0x1d0>
  80268c:	b80b883a 	mov	r5,r23
  802690:	a00d883a 	mov	r6,r20
  802694:	08033340 	call	803334 <memmove>
  802698:	90c00217 	ldw	r3,8(r18)
  80269c:	90800017 	ldw	r2,0(r18)
  8026a0:	a021883a 	mov	r16,r20
  8026a4:	1d07c83a 	sub	r3,r3,r20
  8026a8:	1505883a 	add	r2,r2,r20
  8026ac:	a023883a 	mov	r17,r20
  8026b0:	a027883a 	mov	r19,r20
  8026b4:	90c00215 	stw	r3,8(r18)
  8026b8:	90800015 	stw	r2,0(r18)
  8026bc:	003f8006 	br	8024c0 <__sfvwrite_r+0x200>
  8026c0:	b809883a 	mov	r4,r23
  8026c4:	01400284 	movi	r5,10
  8026c8:	980d883a 	mov	r6,r19
  8026cc:	08031b00 	call	8031b0 <memchr>
  8026d0:	10001726 	beq	r2,zero,802730 <__sfvwrite_r+0x470>
  8026d4:	15c5c83a 	sub	r2,r2,r23
  8026d8:	15000044 	addi	r20,r2,1
  8026dc:	00800044 	movi	r2,1
  8026e0:	d8800015 	stw	r2,0(sp)
  8026e4:	003f9806 	br	802548 <__sfvwrite_r+0x288>
  8026e8:	b80b883a 	mov	r5,r23
  8026ec:	800d883a 	mov	r6,r16
  8026f0:	08033340 	call	803334 <memmove>
  8026f4:	90c00017 	ldw	r3,0(r18)
  8026f8:	e009883a 	mov	r4,fp
  8026fc:	900b883a 	mov	r5,r18
  802700:	1c07883a 	add	r3,r3,r16
  802704:	90c00015 	stw	r3,0(r18)
  802708:	8027883a 	mov	r19,r16
  80270c:	08011940 	call	801194 <_fflush_r>
  802710:	103f6b26 	beq	r2,zero,8024c0 <__sfvwrite_r+0x200>
  802714:	003f7f06 	br	802514 <__sfvwrite_r+0x254>
  802718:	400b883a 	mov	r5,r8
  80271c:	e009883a 	mov	r4,fp
  802720:	08036500 	call	803650 <_realloc_r>
  802724:	103f7626 	beq	r2,zero,802500 <__sfvwrite_r+0x240>
  802728:	1023883a 	mov	r17,r2
  80272c:	003f5006 	br	802470 <__sfvwrite_r+0x1b0>
  802730:	00c00044 	movi	r3,1
  802734:	9d000044 	addi	r20,r19,1
  802738:	d8c00015 	stw	r3,0(sp)
  80273c:	003f8206 	br	802548 <__sfvwrite_r+0x288>
  802740:	9080030b 	ldhu	r2,12(r18)
  802744:	00c00244 	movi	r3,9
  802748:	013fffc4 	movi	r4,-1
  80274c:	10801014 	ori	r2,r2,64
  802750:	9080030d 	sth	r2,12(r18)
  802754:	e0c00015 	stw	r3,0(fp)
  802758:	003f0606 	br	802374 <__sfvwrite_r+0xb4>

0080275c <_fwalk_reent>:
  80275c:	defff704 	addi	sp,sp,-36
  802760:	dcc00315 	stw	r19,12(sp)
  802764:	24c0b804 	addi	r19,r4,736
  802768:	dd800615 	stw	r22,24(sp)
  80276c:	dd400515 	stw	r21,20(sp)
  802770:	dfc00815 	stw	ra,32(sp)
  802774:	ddc00715 	stw	r23,28(sp)
  802778:	dd000415 	stw	r20,16(sp)
  80277c:	dc800215 	stw	r18,8(sp)
  802780:	dc400115 	stw	r17,4(sp)
  802784:	dc000015 	stw	r16,0(sp)
  802788:	202b883a 	mov	r21,r4
  80278c:	282d883a 	mov	r22,r5
  802790:	08015440 	call	801544 <__sfp_lock_acquire>
  802794:	98002126 	beq	r19,zero,80281c <_fwalk_reent+0xc0>
  802798:	002f883a 	mov	r23,zero
  80279c:	9c800117 	ldw	r18,4(r19)
  8027a0:	9c000217 	ldw	r16,8(r19)
  8027a4:	90bfffc4 	addi	r2,r18,-1
  8027a8:	10000d16 	blt	r2,zero,8027e0 <_fwalk_reent+0x84>
  8027ac:	0023883a 	mov	r17,zero
  8027b0:	053fffc4 	movi	r20,-1
  8027b4:	8080030f 	ldh	r2,12(r16)
  8027b8:	8c400044 	addi	r17,r17,1
  8027bc:	10000626 	beq	r2,zero,8027d8 <_fwalk_reent+0x7c>
  8027c0:	8080038f 	ldh	r2,14(r16)
  8027c4:	800b883a 	mov	r5,r16
  8027c8:	a809883a 	mov	r4,r21
  8027cc:	15000226 	beq	r2,r20,8027d8 <_fwalk_reent+0x7c>
  8027d0:	b03ee83a 	callr	r22
  8027d4:	b8aeb03a 	or	r23,r23,r2
  8027d8:	84001704 	addi	r16,r16,92
  8027dc:	947ff51e 	bne	r18,r17,8027b4 <_fwalk_reent+0x58>
  8027e0:	9cc00017 	ldw	r19,0(r19)
  8027e4:	983fed1e 	bne	r19,zero,80279c <_fwalk_reent+0x40>
  8027e8:	08015480 	call	801548 <__sfp_lock_release>
  8027ec:	b805883a 	mov	r2,r23
  8027f0:	dfc00817 	ldw	ra,32(sp)
  8027f4:	ddc00717 	ldw	r23,28(sp)
  8027f8:	dd800617 	ldw	r22,24(sp)
  8027fc:	dd400517 	ldw	r21,20(sp)
  802800:	dd000417 	ldw	r20,16(sp)
  802804:	dcc00317 	ldw	r19,12(sp)
  802808:	dc800217 	ldw	r18,8(sp)
  80280c:	dc400117 	ldw	r17,4(sp)
  802810:	dc000017 	ldw	r16,0(sp)
  802814:	dec00904 	addi	sp,sp,36
  802818:	f800283a 	ret
  80281c:	002f883a 	mov	r23,zero
  802820:	003ff106 	br	8027e8 <_fwalk_reent+0x8c>

00802824 <_fwalk>:
  802824:	defff804 	addi	sp,sp,-32
  802828:	dcc00315 	stw	r19,12(sp)
  80282c:	24c0b804 	addi	r19,r4,736
  802830:	dd400515 	stw	r21,20(sp)
  802834:	dfc00715 	stw	ra,28(sp)
  802838:	dd800615 	stw	r22,24(sp)
  80283c:	dd000415 	stw	r20,16(sp)
  802840:	dc800215 	stw	r18,8(sp)
  802844:	dc400115 	stw	r17,4(sp)
  802848:	dc000015 	stw	r16,0(sp)
  80284c:	282b883a 	mov	r21,r5
  802850:	08015440 	call	801544 <__sfp_lock_acquire>
  802854:	98001f26 	beq	r19,zero,8028d4 <_fwalk+0xb0>
  802858:	002d883a 	mov	r22,zero
  80285c:	9c800117 	ldw	r18,4(r19)
  802860:	9c000217 	ldw	r16,8(r19)
  802864:	90bfffc4 	addi	r2,r18,-1
  802868:	10000c16 	blt	r2,zero,80289c <_fwalk+0x78>
  80286c:	0023883a 	mov	r17,zero
  802870:	053fffc4 	movi	r20,-1
  802874:	8080030f 	ldh	r2,12(r16)
  802878:	8c400044 	addi	r17,r17,1
  80287c:	10000526 	beq	r2,zero,802894 <_fwalk+0x70>
  802880:	8080038f 	ldh	r2,14(r16)
  802884:	8009883a 	mov	r4,r16
  802888:	15000226 	beq	r2,r20,802894 <_fwalk+0x70>
  80288c:	a83ee83a 	callr	r21
  802890:	b0acb03a 	or	r22,r22,r2
  802894:	84001704 	addi	r16,r16,92
  802898:	947ff61e 	bne	r18,r17,802874 <_fwalk+0x50>
  80289c:	9cc00017 	ldw	r19,0(r19)
  8028a0:	983fee1e 	bne	r19,zero,80285c <_fwalk+0x38>
  8028a4:	08015480 	call	801548 <__sfp_lock_release>
  8028a8:	b005883a 	mov	r2,r22
  8028ac:	dfc00717 	ldw	ra,28(sp)
  8028b0:	dd800617 	ldw	r22,24(sp)
  8028b4:	dd400517 	ldw	r21,20(sp)
  8028b8:	dd000417 	ldw	r20,16(sp)
  8028bc:	dcc00317 	ldw	r19,12(sp)
  8028c0:	dc800217 	ldw	r18,8(sp)
  8028c4:	dc400117 	ldw	r17,4(sp)
  8028c8:	dc000017 	ldw	r16,0(sp)
  8028cc:	dec00804 	addi	sp,sp,32
  8028d0:	f800283a 	ret
  8028d4:	002d883a 	mov	r22,zero
  8028d8:	003ff206 	br	8028a4 <_fwalk+0x80>

008028dc <__smakebuf_r>:
  8028dc:	2880030b 	ldhu	r2,12(r5)
  8028e0:	deffed04 	addi	sp,sp,-76
  8028e4:	dc401015 	stw	r17,64(sp)
  8028e8:	1080008c 	andi	r2,r2,2
  8028ec:	dc000f15 	stw	r16,60(sp)
  8028f0:	dfc01215 	stw	ra,72(sp)
  8028f4:	dc801115 	stw	r18,68(sp)
  8028f8:	2821883a 	mov	r16,r5
  8028fc:	2023883a 	mov	r17,r4
  802900:	10000b26 	beq	r2,zero,802930 <__smakebuf_r+0x54>
  802904:	28c010c4 	addi	r3,r5,67
  802908:	00800044 	movi	r2,1
  80290c:	28800515 	stw	r2,20(r5)
  802910:	28c00415 	stw	r3,16(r5)
  802914:	28c00015 	stw	r3,0(r5)
  802918:	dfc01217 	ldw	ra,72(sp)
  80291c:	dc801117 	ldw	r18,68(sp)
  802920:	dc401017 	ldw	r17,64(sp)
  802924:	dc000f17 	ldw	r16,60(sp)
  802928:	dec01304 	addi	sp,sp,76
  80292c:	f800283a 	ret
  802930:	2940038f 	ldh	r5,14(r5)
  802934:	28002116 	blt	r5,zero,8029bc <__smakebuf_r+0xe0>
  802938:	d80d883a 	mov	r6,sp
  80293c:	080224c0 	call	80224c <_fstat_r>
  802940:	10001e16 	blt	r2,zero,8029bc <__smakebuf_r+0xe0>
  802944:	d8800117 	ldw	r2,4(sp)
  802948:	00e00014 	movui	r3,32768
  80294c:	113c000c 	andi	r4,r2,61440
  802950:	20c03126 	beq	r4,r3,802a18 <__smakebuf_r+0x13c>
  802954:	8080030b 	ldhu	r2,12(r16)
  802958:	00c80004 	movi	r3,8192
  80295c:	10820014 	ori	r2,r2,2048
  802960:	8080030d 	sth	r2,12(r16)
  802964:	20c01e26 	beq	r4,r3,8029e0 <__smakebuf_r+0x104>
  802968:	04810004 	movi	r18,1024
  80296c:	8809883a 	mov	r4,r17
  802970:	900b883a 	mov	r5,r18
  802974:	0802a700 	call	802a70 <_malloc_r>
  802978:	1009883a 	mov	r4,r2
  80297c:	10003126 	beq	r2,zero,802a44 <__smakebuf_r+0x168>
  802980:	80c0030b 	ldhu	r3,12(r16)
  802984:	00802034 	movhi	r2,128
  802988:	10858e04 	addi	r2,r2,5688
  80298c:	88800f15 	stw	r2,60(r17)
  802990:	18c02014 	ori	r3,r3,128
  802994:	84800515 	stw	r18,20(r16)
  802998:	80c0030d 	sth	r3,12(r16)
  80299c:	81000415 	stw	r4,16(r16)
  8029a0:	81000015 	stw	r4,0(r16)
  8029a4:	dfc01217 	ldw	ra,72(sp)
  8029a8:	dc801117 	ldw	r18,68(sp)
  8029ac:	dc401017 	ldw	r17,64(sp)
  8029b0:	dc000f17 	ldw	r16,60(sp)
  8029b4:	dec01304 	addi	sp,sp,76
  8029b8:	f800283a 	ret
  8029bc:	80c0030b 	ldhu	r3,12(r16)
  8029c0:	1880200c 	andi	r2,r3,128
  8029c4:	10000426 	beq	r2,zero,8029d8 <__smakebuf_r+0xfc>
  8029c8:	04801004 	movi	r18,64
  8029cc:	18820014 	ori	r2,r3,2048
  8029d0:	8080030d 	sth	r2,12(r16)
  8029d4:	003fe506 	br	80296c <__smakebuf_r+0x90>
  8029d8:	04810004 	movi	r18,1024
  8029dc:	003ffb06 	br	8029cc <__smakebuf_r+0xf0>
  8029e0:	8140038f 	ldh	r5,14(r16)
  8029e4:	8809883a 	mov	r4,r17
  8029e8:	08096100 	call	809610 <_isatty_r>
  8029ec:	103fde26 	beq	r2,zero,802968 <__smakebuf_r+0x8c>
  8029f0:	8080030b 	ldhu	r2,12(r16)
  8029f4:	80c010c4 	addi	r3,r16,67
  8029f8:	04810004 	movi	r18,1024
  8029fc:	10800054 	ori	r2,r2,1
  802a00:	8080030d 	sth	r2,12(r16)
  802a04:	00800044 	movi	r2,1
  802a08:	80c00415 	stw	r3,16(r16)
  802a0c:	80800515 	stw	r2,20(r16)
  802a10:	80c00015 	stw	r3,0(r16)
  802a14:	003fd506 	br	80296c <__smakebuf_r+0x90>
  802a18:	80c00a17 	ldw	r3,40(r16)
  802a1c:	00802034 	movhi	r2,128
  802a20:	10903904 	addi	r2,r2,16612
  802a24:	18bfcb1e 	bne	r3,r2,802954 <__smakebuf_r+0x78>
  802a28:	8080030b 	ldhu	r2,12(r16)
  802a2c:	00c10004 	movi	r3,1024
  802a30:	1825883a 	mov	r18,r3
  802a34:	10c4b03a 	or	r2,r2,r3
  802a38:	8080030d 	sth	r2,12(r16)
  802a3c:	80c01315 	stw	r3,76(r16)
  802a40:	003fca06 	br	80296c <__smakebuf_r+0x90>
  802a44:	8100030b 	ldhu	r4,12(r16)
  802a48:	2080800c 	andi	r2,r4,512
  802a4c:	103fb21e 	bne	r2,zero,802918 <__smakebuf_r+0x3c>
  802a50:	80c010c4 	addi	r3,r16,67
  802a54:	21000094 	ori	r4,r4,2
  802a58:	00800044 	movi	r2,1
  802a5c:	80800515 	stw	r2,20(r16)
  802a60:	8100030d 	sth	r4,12(r16)
  802a64:	80c00415 	stw	r3,16(r16)
  802a68:	80c00015 	stw	r3,0(r16)
  802a6c:	003faa06 	br	802918 <__smakebuf_r+0x3c>

00802a70 <_malloc_r>:
  802a70:	defff604 	addi	sp,sp,-40
  802a74:	28c002c4 	addi	r3,r5,11
  802a78:	00800584 	movi	r2,22
  802a7c:	dc800215 	stw	r18,8(sp)
  802a80:	dfc00915 	stw	ra,36(sp)
  802a84:	df000815 	stw	fp,32(sp)
  802a88:	ddc00715 	stw	r23,28(sp)
  802a8c:	dd800615 	stw	r22,24(sp)
  802a90:	dd400515 	stw	r21,20(sp)
  802a94:	dd000415 	stw	r20,16(sp)
  802a98:	dcc00315 	stw	r19,12(sp)
  802a9c:	dc400115 	stw	r17,4(sp)
  802aa0:	dc000015 	stw	r16,0(sp)
  802aa4:	2025883a 	mov	r18,r4
  802aa8:	10c01236 	bltu	r2,r3,802af4 <_malloc_r+0x84>
  802aac:	04400404 	movi	r17,16
  802ab0:	8940142e 	bgeu	r17,r5,802b04 <_malloc_r+0x94>
  802ab4:	00800304 	movi	r2,12
  802ab8:	0007883a 	mov	r3,zero
  802abc:	90800015 	stw	r2,0(r18)
  802ac0:	1805883a 	mov	r2,r3
  802ac4:	dfc00917 	ldw	ra,36(sp)
  802ac8:	df000817 	ldw	fp,32(sp)
  802acc:	ddc00717 	ldw	r23,28(sp)
  802ad0:	dd800617 	ldw	r22,24(sp)
  802ad4:	dd400517 	ldw	r21,20(sp)
  802ad8:	dd000417 	ldw	r20,16(sp)
  802adc:	dcc00317 	ldw	r19,12(sp)
  802ae0:	dc800217 	ldw	r18,8(sp)
  802ae4:	dc400117 	ldw	r17,4(sp)
  802ae8:	dc000017 	ldw	r16,0(sp)
  802aec:	dec00a04 	addi	sp,sp,40
  802af0:	f800283a 	ret
  802af4:	00bffe04 	movi	r2,-8
  802af8:	18a2703a 	and	r17,r3,r2
  802afc:	883fed16 	blt	r17,zero,802ab4 <_malloc_r+0x44>
  802b00:	897fec36 	bltu	r17,r5,802ab4 <_malloc_r+0x44>
  802b04:	9009883a 	mov	r4,r18
  802b08:	0810f140 	call	810f14 <__malloc_lock>
  802b0c:	00807dc4 	movi	r2,503
  802b10:	14402b2e 	bgeu	r2,r17,802bc0 <_malloc_r+0x150>
  802b14:	8806d27a 	srli	r3,r17,9
  802b18:	18003f1e 	bne	r3,zero,802c18 <_malloc_r+0x1a8>
  802b1c:	880cd0fa 	srli	r6,r17,3
  802b20:	300490fa 	slli	r2,r6,3
  802b24:	02c02074 	movhi	r11,129
  802b28:	5ad60604 	addi	r11,r11,22552
  802b2c:	12cb883a 	add	r5,r2,r11
  802b30:	2c000317 	ldw	r16,12(r5)
  802b34:	580f883a 	mov	r7,r11
  802b38:	2c00041e 	bne	r5,r16,802b4c <_malloc_r+0xdc>
  802b3c:	00000a06 	br	802b68 <_malloc_r+0xf8>
  802b40:	1800860e 	bge	r3,zero,802d5c <_malloc_r+0x2ec>
  802b44:	84000317 	ldw	r16,12(r16)
  802b48:	2c000726 	beq	r5,r16,802b68 <_malloc_r+0xf8>
  802b4c:	80800117 	ldw	r2,4(r16)
  802b50:	00ffff04 	movi	r3,-4
  802b54:	10c8703a 	and	r4,r2,r3
  802b58:	2447c83a 	sub	r3,r4,r17
  802b5c:	008003c4 	movi	r2,15
  802b60:	10fff70e 	bge	r2,r3,802b40 <_malloc_r+0xd0>
  802b64:	31bfffc4 	addi	r6,r6,-1
  802b68:	32400044 	addi	r9,r6,1
  802b6c:	02802074 	movhi	r10,129
  802b70:	52960804 	addi	r10,r10,22560
  802b74:	54000217 	ldw	r16,8(r10)
  802b78:	8280a026 	beq	r16,r10,802dfc <_malloc_r+0x38c>
  802b7c:	80800117 	ldw	r2,4(r16)
  802b80:	00ffff04 	movi	r3,-4
  802b84:	10ca703a 	and	r5,r2,r3
  802b88:	2c4dc83a 	sub	r6,r5,r17
  802b8c:	008003c4 	movi	r2,15
  802b90:	11808316 	blt	r2,r6,802da0 <_malloc_r+0x330>
  802b94:	52800315 	stw	r10,12(r10)
  802b98:	52800215 	stw	r10,8(r10)
  802b9c:	30002916 	blt	r6,zero,802c44 <_malloc_r+0x1d4>
  802ba0:	8147883a 	add	r3,r16,r5
  802ba4:	18800117 	ldw	r2,4(r3)
  802ba8:	9009883a 	mov	r4,r18
  802bac:	10800054 	ori	r2,r2,1
  802bb0:	18800115 	stw	r2,4(r3)
  802bb4:	0810f340 	call	810f34 <__malloc_unlock>
  802bb8:	80c00204 	addi	r3,r16,8
  802bbc:	003fc006 	br	802ac0 <_malloc_r+0x50>
  802bc0:	02c02074 	movhi	r11,129
  802bc4:	5ad60604 	addi	r11,r11,22552
  802bc8:	8ac5883a 	add	r2,r17,r11
  802bcc:	14000317 	ldw	r16,12(r2)
  802bd0:	580f883a 	mov	r7,r11
  802bd4:	8806d0fa 	srli	r3,r17,3
  802bd8:	14006c26 	beq	r2,r16,802d8c <_malloc_r+0x31c>
  802bdc:	80c00117 	ldw	r3,4(r16)
  802be0:	00bfff04 	movi	r2,-4
  802be4:	81800317 	ldw	r6,12(r16)
  802be8:	1886703a 	and	r3,r3,r2
  802bec:	80c7883a 	add	r3,r16,r3
  802bf0:	18800117 	ldw	r2,4(r3)
  802bf4:	81400217 	ldw	r5,8(r16)
  802bf8:	9009883a 	mov	r4,r18
  802bfc:	10800054 	ori	r2,r2,1
  802c00:	18800115 	stw	r2,4(r3)
  802c04:	31400215 	stw	r5,8(r6)
  802c08:	29800315 	stw	r6,12(r5)
  802c0c:	0810f340 	call	810f34 <__malloc_unlock>
  802c10:	80c00204 	addi	r3,r16,8
  802c14:	003faa06 	br	802ac0 <_malloc_r+0x50>
  802c18:	00800104 	movi	r2,4
  802c1c:	10c0052e 	bgeu	r2,r3,802c34 <_malloc_r+0x1c4>
  802c20:	00800504 	movi	r2,20
  802c24:	10c07836 	bltu	r2,r3,802e08 <_malloc_r+0x398>
  802c28:	198016c4 	addi	r6,r3,91
  802c2c:	300490fa 	slli	r2,r6,3
  802c30:	003fbc06 	br	802b24 <_malloc_r+0xb4>
  802c34:	8804d1ba 	srli	r2,r17,6
  802c38:	11800e04 	addi	r6,r2,56
  802c3c:	300490fa 	slli	r2,r6,3
  802c40:	003fb806 	br	802b24 <_malloc_r+0xb4>
  802c44:	00807fc4 	movi	r2,511
  802c48:	1140bb36 	bltu	r2,r5,802f38 <_malloc_r+0x4c8>
  802c4c:	2806d0fa 	srli	r3,r5,3
  802c50:	573ffe04 	addi	fp,r10,-8
  802c54:	00800044 	movi	r2,1
  802c58:	180890fa 	slli	r4,r3,3
  802c5c:	1807d0ba 	srai	r3,r3,2
  802c60:	e1c00117 	ldw	r7,4(fp)
  802c64:	5909883a 	add	r4,r11,r4
  802c68:	21400217 	ldw	r5,8(r4)
  802c6c:	10c4983a 	sll	r2,r2,r3
  802c70:	81000315 	stw	r4,12(r16)
  802c74:	81400215 	stw	r5,8(r16)
  802c78:	388eb03a 	or	r7,r7,r2
  802c7c:	2c000315 	stw	r16,12(r5)
  802c80:	24000215 	stw	r16,8(r4)
  802c84:	e1c00115 	stw	r7,4(fp)
  802c88:	4807883a 	mov	r3,r9
  802c8c:	4800cd16 	blt	r9,zero,802fc4 <_malloc_r+0x554>
  802c90:	1807d0ba 	srai	r3,r3,2
  802c94:	00800044 	movi	r2,1
  802c98:	10c8983a 	sll	r4,r2,r3
  802c9c:	39004436 	bltu	r7,r4,802db0 <_malloc_r+0x340>
  802ca0:	21c4703a 	and	r2,r4,r7
  802ca4:	10000a1e 	bne	r2,zero,802cd0 <_malloc_r+0x260>
  802ca8:	2109883a 	add	r4,r4,r4
  802cac:	00bfff04 	movi	r2,-4
  802cb0:	4884703a 	and	r2,r9,r2
  802cb4:	3906703a 	and	r3,r7,r4
  802cb8:	12400104 	addi	r9,r2,4
  802cbc:	1800041e 	bne	r3,zero,802cd0 <_malloc_r+0x260>
  802cc0:	2109883a 	add	r4,r4,r4
  802cc4:	3904703a 	and	r2,r7,r4
  802cc8:	4a400104 	addi	r9,r9,4
  802ccc:	103ffc26 	beq	r2,zero,802cc0 <_malloc_r+0x250>
  802cd0:	480490fa 	slli	r2,r9,3
  802cd4:	4819883a 	mov	r12,r9
  802cd8:	023fff04 	movi	r8,-4
  802cdc:	589b883a 	add	r13,r11,r2
  802ce0:	6807883a 	mov	r3,r13
  802ce4:	014003c4 	movi	r5,15
  802ce8:	1c000317 	ldw	r16,12(r3)
  802cec:	1c00041e 	bne	r3,r16,802d00 <_malloc_r+0x290>
  802cf0:	0000a706 	br	802f90 <_malloc_r+0x520>
  802cf4:	3000ab0e 	bge	r6,zero,802fa4 <_malloc_r+0x534>
  802cf8:	84000317 	ldw	r16,12(r16)
  802cfc:	1c00a426 	beq	r3,r16,802f90 <_malloc_r+0x520>
  802d00:	80800117 	ldw	r2,4(r16)
  802d04:	1204703a 	and	r2,r2,r8
  802d08:	144dc83a 	sub	r6,r2,r17
  802d0c:	29bff90e 	bge	r5,r6,802cf4 <_malloc_r+0x284>
  802d10:	81000317 	ldw	r4,12(r16)
  802d14:	80c00217 	ldw	r3,8(r16)
  802d18:	89400054 	ori	r5,r17,1
  802d1c:	8445883a 	add	r2,r16,r17
  802d20:	20c00215 	stw	r3,8(r4)
  802d24:	19000315 	stw	r4,12(r3)
  802d28:	81400115 	stw	r5,4(r16)
  802d2c:	1187883a 	add	r3,r2,r6
  802d30:	31000054 	ori	r4,r6,1
  802d34:	50800315 	stw	r2,12(r10)
  802d38:	50800215 	stw	r2,8(r10)
  802d3c:	19800015 	stw	r6,0(r3)
  802d40:	11000115 	stw	r4,4(r2)
  802d44:	12800215 	stw	r10,8(r2)
  802d48:	12800315 	stw	r10,12(r2)
  802d4c:	9009883a 	mov	r4,r18
  802d50:	0810f340 	call	810f34 <__malloc_unlock>
  802d54:	80c00204 	addi	r3,r16,8
  802d58:	003f5906 	br	802ac0 <_malloc_r+0x50>
  802d5c:	8109883a 	add	r4,r16,r4
  802d60:	20800117 	ldw	r2,4(r4)
  802d64:	80c00217 	ldw	r3,8(r16)
  802d68:	81400317 	ldw	r5,12(r16)
  802d6c:	10800054 	ori	r2,r2,1
  802d70:	20800115 	stw	r2,4(r4)
  802d74:	28c00215 	stw	r3,8(r5)
  802d78:	19400315 	stw	r5,12(r3)
  802d7c:	9009883a 	mov	r4,r18
  802d80:	0810f340 	call	810f34 <__malloc_unlock>
  802d84:	80c00204 	addi	r3,r16,8
  802d88:	003f4d06 	br	802ac0 <_malloc_r+0x50>
  802d8c:	80800204 	addi	r2,r16,8
  802d90:	14000317 	ldw	r16,12(r2)
  802d94:	143f911e 	bne	r2,r16,802bdc <_malloc_r+0x16c>
  802d98:	1a400084 	addi	r9,r3,2
  802d9c:	003f7306 	br	802b6c <_malloc_r+0xfc>
  802da0:	88c00054 	ori	r3,r17,1
  802da4:	8445883a 	add	r2,r16,r17
  802da8:	80c00115 	stw	r3,4(r16)
  802dac:	003fdf06 	br	802d2c <_malloc_r+0x2bc>
  802db0:	e4000217 	ldw	r16,8(fp)
  802db4:	00bfff04 	movi	r2,-4
  802db8:	80c00117 	ldw	r3,4(r16)
  802dbc:	802d883a 	mov	r22,r16
  802dc0:	18aa703a 	and	r21,r3,r2
  802dc4:	ac401636 	bltu	r21,r17,802e20 <_malloc_r+0x3b0>
  802dc8:	ac49c83a 	sub	r4,r21,r17
  802dcc:	008003c4 	movi	r2,15
  802dd0:	1100130e 	bge	r2,r4,802e20 <_malloc_r+0x3b0>
  802dd4:	88800054 	ori	r2,r17,1
  802dd8:	8447883a 	add	r3,r16,r17
  802ddc:	80800115 	stw	r2,4(r16)
  802de0:	20800054 	ori	r2,r4,1
  802de4:	18800115 	stw	r2,4(r3)
  802de8:	e0c00215 	stw	r3,8(fp)
  802dec:	9009883a 	mov	r4,r18
  802df0:	0810f340 	call	810f34 <__malloc_unlock>
  802df4:	80c00204 	addi	r3,r16,8
  802df8:	003f3106 	br	802ac0 <_malloc_r+0x50>
  802dfc:	39c00117 	ldw	r7,4(r7)
  802e00:	573ffe04 	addi	fp,r10,-8
  802e04:	003fa006 	br	802c88 <_malloc_r+0x218>
  802e08:	00801504 	movi	r2,84
  802e0c:	10c06736 	bltu	r2,r3,802fac <_malloc_r+0x53c>
  802e10:	8804d33a 	srli	r2,r17,12
  802e14:	11801b84 	addi	r6,r2,110
  802e18:	300490fa 	slli	r2,r6,3
  802e1c:	003f4106 	br	802b24 <_malloc_r+0xb4>
  802e20:	d0a75517 	ldw	r2,-25260(gp)
  802e24:	d0e00717 	ldw	r3,-32740(gp)
  802e28:	053fffc4 	movi	r20,-1
  802e2c:	10800404 	addi	r2,r2,16
  802e30:	88a7883a 	add	r19,r17,r2
  802e34:	1d000326 	beq	r3,r20,802e44 <_malloc_r+0x3d4>
  802e38:	98c3ffc4 	addi	r3,r19,4095
  802e3c:	00bc0004 	movi	r2,-4096
  802e40:	18a6703a 	and	r19,r3,r2
  802e44:	9009883a 	mov	r4,r18
  802e48:	980b883a 	mov	r5,r19
  802e4c:	0803e840 	call	803e84 <_sbrk_r>
  802e50:	1009883a 	mov	r4,r2
  802e54:	15000426 	beq	r2,r20,802e68 <_malloc_r+0x3f8>
  802e58:	854b883a 	add	r5,r16,r21
  802e5c:	1029883a 	mov	r20,r2
  802e60:	11405a2e 	bgeu	r2,r5,802fcc <_malloc_r+0x55c>
  802e64:	87000c26 	beq	r16,fp,802e98 <_malloc_r+0x428>
  802e68:	e4000217 	ldw	r16,8(fp)
  802e6c:	80c00117 	ldw	r3,4(r16)
  802e70:	00bfff04 	movi	r2,-4
  802e74:	1884703a 	and	r2,r3,r2
  802e78:	14400336 	bltu	r2,r17,802e88 <_malloc_r+0x418>
  802e7c:	1449c83a 	sub	r4,r2,r17
  802e80:	008003c4 	movi	r2,15
  802e84:	113fd316 	blt	r2,r4,802dd4 <_malloc_r+0x364>
  802e88:	9009883a 	mov	r4,r18
  802e8c:	0810f340 	call	810f34 <__malloc_unlock>
  802e90:	0007883a 	mov	r3,zero
  802e94:	003f0a06 	br	802ac0 <_malloc_r+0x50>
  802e98:	05c020b4 	movhi	r23,130
  802e9c:	bde38004 	addi	r23,r23,-29184
  802ea0:	b8800017 	ldw	r2,0(r23)
  802ea4:	988d883a 	add	r6,r19,r2
  802ea8:	b9800015 	stw	r6,0(r23)
  802eac:	d0e00717 	ldw	r3,-32740(gp)
  802eb0:	00bfffc4 	movi	r2,-1
  802eb4:	18808e26 	beq	r3,r2,8030f0 <_malloc_r+0x680>
  802eb8:	2145c83a 	sub	r2,r4,r5
  802ebc:	3085883a 	add	r2,r6,r2
  802ec0:	b8800015 	stw	r2,0(r23)
  802ec4:	20c001cc 	andi	r3,r4,7
  802ec8:	18005f1e 	bne	r3,zero,803048 <_malloc_r+0x5d8>
  802ecc:	000b883a 	mov	r5,zero
  802ed0:	a4c5883a 	add	r2,r20,r19
  802ed4:	1083ffcc 	andi	r2,r2,4095
  802ed8:	00c40004 	movi	r3,4096
  802edc:	1887c83a 	sub	r3,r3,r2
  802ee0:	28e7883a 	add	r19,r5,r3
  802ee4:	9009883a 	mov	r4,r18
  802ee8:	980b883a 	mov	r5,r19
  802eec:	0803e840 	call	803e84 <_sbrk_r>
  802ef0:	1007883a 	mov	r3,r2
  802ef4:	00bfffc4 	movi	r2,-1
  802ef8:	18807a26 	beq	r3,r2,8030e4 <_malloc_r+0x674>
  802efc:	1d05c83a 	sub	r2,r3,r20
  802f00:	9885883a 	add	r2,r19,r2
  802f04:	10c00054 	ori	r3,r2,1
  802f08:	b8800017 	ldw	r2,0(r23)
  802f0c:	a021883a 	mov	r16,r20
  802f10:	a0c00115 	stw	r3,4(r20)
  802f14:	9885883a 	add	r2,r19,r2
  802f18:	b8800015 	stw	r2,0(r23)
  802f1c:	e5000215 	stw	r20,8(fp)
  802f20:	b7003626 	beq	r22,fp,802ffc <_malloc_r+0x58c>
  802f24:	018003c4 	movi	r6,15
  802f28:	35404b36 	bltu	r6,r21,803058 <_malloc_r+0x5e8>
  802f2c:	00800044 	movi	r2,1
  802f30:	a0800115 	stw	r2,4(r20)
  802f34:	003fcd06 	br	802e6c <_malloc_r+0x3fc>
  802f38:	2808d27a 	srli	r4,r5,9
  802f3c:	2000371e 	bne	r4,zero,80301c <_malloc_r+0x5ac>
  802f40:	2808d0fa 	srli	r4,r5,3
  802f44:	200690fa 	slli	r3,r4,3
  802f48:	1ad1883a 	add	r8,r3,r11
  802f4c:	41800217 	ldw	r6,8(r8)
  802f50:	41805b26 	beq	r8,r6,8030c0 <_malloc_r+0x650>
  802f54:	30800117 	ldw	r2,4(r6)
  802f58:	00ffff04 	movi	r3,-4
  802f5c:	10c4703a 	and	r2,r2,r3
  802f60:	2880022e 	bgeu	r5,r2,802f6c <_malloc_r+0x4fc>
  802f64:	31800217 	ldw	r6,8(r6)
  802f68:	41bffa1e 	bne	r8,r6,802f54 <_malloc_r+0x4e4>
  802f6c:	32000317 	ldw	r8,12(r6)
  802f70:	39c00117 	ldw	r7,4(r7)
  802f74:	82000315 	stw	r8,12(r16)
  802f78:	81800215 	stw	r6,8(r16)
  802f7c:	07002074 	movhi	fp,129
  802f80:	e7160604 	addi	fp,fp,22552
  802f84:	34000315 	stw	r16,12(r6)
  802f88:	44000215 	stw	r16,8(r8)
  802f8c:	003f3e06 	br	802c88 <_malloc_r+0x218>
  802f90:	63000044 	addi	r12,r12,1
  802f94:	608000cc 	andi	r2,r12,3
  802f98:	10005d26 	beq	r2,zero,803110 <_malloc_r+0x6a0>
  802f9c:	18c00204 	addi	r3,r3,8
  802fa0:	003f5106 	br	802ce8 <_malloc_r+0x278>
  802fa4:	8089883a 	add	r4,r16,r2
  802fa8:	003f6d06 	br	802d60 <_malloc_r+0x2f0>
  802fac:	00805504 	movi	r2,340
  802fb0:	10c02036 	bltu	r2,r3,803034 <_malloc_r+0x5c4>
  802fb4:	8804d3fa 	srli	r2,r17,15
  802fb8:	11801dc4 	addi	r6,r2,119
  802fbc:	300490fa 	slli	r2,r6,3
  802fc0:	003ed806 	br	802b24 <_malloc_r+0xb4>
  802fc4:	48c000c4 	addi	r3,r9,3
  802fc8:	003f3106 	br	802c90 <_malloc_r+0x220>
  802fcc:	05c020b4 	movhi	r23,130
  802fd0:	bde38004 	addi	r23,r23,-29184
  802fd4:	b8800017 	ldw	r2,0(r23)
  802fd8:	988d883a 	add	r6,r19,r2
  802fdc:	b9800015 	stw	r6,0(r23)
  802fe0:	293fb21e 	bne	r5,r4,802eac <_malloc_r+0x43c>
  802fe4:	2083ffcc 	andi	r2,r4,4095
  802fe8:	103fb01e 	bne	r2,zero,802eac <_malloc_r+0x43c>
  802fec:	e4000217 	ldw	r16,8(fp)
  802ff0:	9d45883a 	add	r2,r19,r21
  802ff4:	10800054 	ori	r2,r2,1
  802ff8:	80800115 	stw	r2,4(r16)
  802ffc:	b8c00017 	ldw	r3,0(r23)
  803000:	d0a75617 	ldw	r2,-25256(gp)
  803004:	10c0012e 	bgeu	r2,r3,80300c <_malloc_r+0x59c>
  803008:	d0e75615 	stw	r3,-25256(gp)
  80300c:	d0a75717 	ldw	r2,-25252(gp)
  803010:	10ff962e 	bgeu	r2,r3,802e6c <_malloc_r+0x3fc>
  803014:	d0e75715 	stw	r3,-25252(gp)
  803018:	003f9406 	br	802e6c <_malloc_r+0x3fc>
  80301c:	00800104 	movi	r2,4
  803020:	11001e36 	bltu	r2,r4,80309c <_malloc_r+0x62c>
  803024:	2804d1ba 	srli	r2,r5,6
  803028:	11000e04 	addi	r4,r2,56
  80302c:	200690fa 	slli	r3,r4,3
  803030:	003fc506 	br	802f48 <_malloc_r+0x4d8>
  803034:	00815504 	movi	r2,1364
  803038:	10c01d2e 	bgeu	r2,r3,8030b0 <_malloc_r+0x640>
  80303c:	01801f84 	movi	r6,126
  803040:	0080fc04 	movi	r2,1008
  803044:	003eb706 	br	802b24 <_malloc_r+0xb4>
  803048:	00800204 	movi	r2,8
  80304c:	10cbc83a 	sub	r5,r2,r3
  803050:	2169883a 	add	r20,r4,r5
  803054:	003f9e06 	br	802ed0 <_malloc_r+0x460>
  803058:	00bffe04 	movi	r2,-8
  80305c:	a93ffd04 	addi	r4,r21,-12
  803060:	2088703a 	and	r4,r4,r2
  803064:	b10b883a 	add	r5,r22,r4
  803068:	00c00144 	movi	r3,5
  80306c:	28c00215 	stw	r3,8(r5)
  803070:	28c00115 	stw	r3,4(r5)
  803074:	b0800117 	ldw	r2,4(r22)
  803078:	1080004c 	andi	r2,r2,1
  80307c:	2084b03a 	or	r2,r4,r2
  803080:	b0800115 	stw	r2,4(r22)
  803084:	313fdd2e 	bgeu	r6,r4,802ffc <_malloc_r+0x58c>
  803088:	b1400204 	addi	r5,r22,8
  80308c:	9009883a 	mov	r4,r18
  803090:	0801ad80 	call	801ad8 <_free_r>
  803094:	e4000217 	ldw	r16,8(fp)
  803098:	003fd806 	br	802ffc <_malloc_r+0x58c>
  80309c:	00800504 	movi	r2,20
  8030a0:	11001536 	bltu	r2,r4,8030f8 <_malloc_r+0x688>
  8030a4:	210016c4 	addi	r4,r4,91
  8030a8:	200690fa 	slli	r3,r4,3
  8030ac:	003fa606 	br	802f48 <_malloc_r+0x4d8>
  8030b0:	8804d4ba 	srli	r2,r17,18
  8030b4:	11801f04 	addi	r6,r2,124
  8030b8:	300490fa 	slli	r2,r6,3
  8030bc:	003e9906 	br	802b24 <_malloc_r+0xb4>
  8030c0:	2009d0ba 	srai	r4,r4,2
  8030c4:	01402074 	movhi	r5,129
  8030c8:	29560604 	addi	r5,r5,22552
  8030cc:	00c00044 	movi	r3,1
  8030d0:	28800117 	ldw	r2,4(r5)
  8030d4:	1906983a 	sll	r3,r3,r4
  8030d8:	10c4b03a 	or	r2,r2,r3
  8030dc:	28800115 	stw	r2,4(r5)
  8030e0:	003fa306 	br	802f70 <_malloc_r+0x500>
  8030e4:	0027883a 	mov	r19,zero
  8030e8:	00c00044 	movi	r3,1
  8030ec:	003f8606 	br	802f08 <_malloc_r+0x498>
  8030f0:	d1200715 	stw	r4,-32740(gp)
  8030f4:	003f7306 	br	802ec4 <_malloc_r+0x454>
  8030f8:	00801504 	movi	r2,84
  8030fc:	11001936 	bltu	r2,r4,803164 <_malloc_r+0x6f4>
  803100:	2804d33a 	srli	r2,r5,12
  803104:	11001b84 	addi	r4,r2,110
  803108:	200690fa 	slli	r3,r4,3
  80310c:	003f8e06 	br	802f48 <_malloc_r+0x4d8>
  803110:	480b883a 	mov	r5,r9
  803114:	6807883a 	mov	r3,r13
  803118:	288000cc 	andi	r2,r5,3
  80311c:	18fffe04 	addi	r3,r3,-8
  803120:	297fffc4 	addi	r5,r5,-1
  803124:	10001526 	beq	r2,zero,80317c <_malloc_r+0x70c>
  803128:	18800217 	ldw	r2,8(r3)
  80312c:	10fffa26 	beq	r2,r3,803118 <_malloc_r+0x6a8>
  803130:	2109883a 	add	r4,r4,r4
  803134:	393f1e36 	bltu	r7,r4,802db0 <_malloc_r+0x340>
  803138:	203f1d26 	beq	r4,zero,802db0 <_malloc_r+0x340>
  80313c:	21c4703a 	and	r2,r4,r7
  803140:	10000226 	beq	r2,zero,80314c <_malloc_r+0x6dc>
  803144:	6013883a 	mov	r9,r12
  803148:	003ee106 	br	802cd0 <_malloc_r+0x260>
  80314c:	2109883a 	add	r4,r4,r4
  803150:	3904703a 	and	r2,r7,r4
  803154:	63000104 	addi	r12,r12,4
  803158:	103ffc26 	beq	r2,zero,80314c <_malloc_r+0x6dc>
  80315c:	6013883a 	mov	r9,r12
  803160:	003edb06 	br	802cd0 <_malloc_r+0x260>
  803164:	00805504 	movi	r2,340
  803168:	11000836 	bltu	r2,r4,80318c <_malloc_r+0x71c>
  80316c:	2804d3fa 	srli	r2,r5,15
  803170:	11001dc4 	addi	r4,r2,119
  803174:	200690fa 	slli	r3,r4,3
  803178:	003f7306 	br	802f48 <_malloc_r+0x4d8>
  80317c:	0104303a 	nor	r2,zero,r4
  803180:	388e703a 	and	r7,r7,r2
  803184:	e1c00115 	stw	r7,4(fp)
  803188:	003fe906 	br	803130 <_malloc_r+0x6c0>
  80318c:	00815504 	movi	r2,1364
  803190:	1100032e 	bgeu	r2,r4,8031a0 <_malloc_r+0x730>
  803194:	01001f84 	movi	r4,126
  803198:	00c0fc04 	movi	r3,1008
  80319c:	003f6a06 	br	802f48 <_malloc_r+0x4d8>
  8031a0:	2804d4ba 	srli	r2,r5,18
  8031a4:	11001f04 	addi	r4,r2,124
  8031a8:	200690fa 	slli	r3,r4,3
  8031ac:	003f6606 	br	802f48 <_malloc_r+0x4d8>

008031b0 <memchr>:
  8031b0:	008000c4 	movi	r2,3
  8031b4:	29403fcc 	andi	r5,r5,255
  8031b8:	2007883a 	mov	r3,r4
  8031bc:	1180022e 	bgeu	r2,r6,8031c8 <memchr+0x18>
  8031c0:	2084703a 	and	r2,r4,r2
  8031c4:	10000b26 	beq	r2,zero,8031f4 <memchr+0x44>
  8031c8:	313fffc4 	addi	r4,r6,-1
  8031cc:	3000051e 	bne	r6,zero,8031e4 <memchr+0x34>
  8031d0:	00002c06 	br	803284 <memchr+0xd4>
  8031d4:	213fffc4 	addi	r4,r4,-1
  8031d8:	00bfffc4 	movi	r2,-1
  8031dc:	18c00044 	addi	r3,r3,1
  8031e0:	20802826 	beq	r4,r2,803284 <memchr+0xd4>
  8031e4:	18800003 	ldbu	r2,0(r3)
  8031e8:	28bffa1e 	bne	r5,r2,8031d4 <memchr+0x24>
  8031ec:	1805883a 	mov	r2,r3
  8031f0:	f800283a 	ret
  8031f4:	0011883a 	mov	r8,zero
  8031f8:	0007883a 	mov	r3,zero
  8031fc:	01c00104 	movi	r7,4
  803200:	4004923a 	slli	r2,r8,8
  803204:	18c00044 	addi	r3,r3,1
  803208:	1151883a 	add	r8,r2,r5
  80320c:	19fffc1e 	bne	r3,r7,803200 <memchr+0x50>
  803210:	02bfbff4 	movhi	r10,65279
  803214:	52bfbfc4 	addi	r10,r10,-257
  803218:	02602074 	movhi	r9,32897
  80321c:	4a602004 	addi	r9,r9,-32640
  803220:	02c000c4 	movi	r11,3
  803224:	20800017 	ldw	r2,0(r4)
  803228:	31bfff04 	addi	r6,r6,-4
  80322c:	200f883a 	mov	r7,r4
  803230:	1204f03a 	xor	r2,r2,r8
  803234:	1287883a 	add	r3,r2,r10
  803238:	1a46703a 	and	r3,r3,r9
  80323c:	0084303a 	nor	r2,zero,r2
  803240:	10c4703a 	and	r2,r2,r3
  803244:	10000b26 	beq	r2,zero,803274 <memchr+0xc4>
  803248:	20800003 	ldbu	r2,0(r4)
  80324c:	28800f26 	beq	r5,r2,80328c <memchr+0xdc>
  803250:	20800043 	ldbu	r2,1(r4)
  803254:	21c00044 	addi	r7,r4,1
  803258:	28800c26 	beq	r5,r2,80328c <memchr+0xdc>
  80325c:	20800083 	ldbu	r2,2(r4)
  803260:	21c00084 	addi	r7,r4,2
  803264:	28800926 	beq	r5,r2,80328c <memchr+0xdc>
  803268:	208000c3 	ldbu	r2,3(r4)
  80326c:	21c000c4 	addi	r7,r4,3
  803270:	28800626 	beq	r5,r2,80328c <memchr+0xdc>
  803274:	21000104 	addi	r4,r4,4
  803278:	59bfea36 	bltu	r11,r6,803224 <memchr+0x74>
  80327c:	2007883a 	mov	r3,r4
  803280:	003fd106 	br	8031c8 <memchr+0x18>
  803284:	0005883a 	mov	r2,zero
  803288:	f800283a 	ret
  80328c:	3805883a 	mov	r2,r7
  803290:	f800283a 	ret

00803294 <memcpy>:
  803294:	01c003c4 	movi	r7,15
  803298:	2007883a 	mov	r3,r4
  80329c:	3980032e 	bgeu	r7,r6,8032ac <memcpy+0x18>
  8032a0:	2904b03a 	or	r2,r5,r4
  8032a4:	108000cc 	andi	r2,r2,3
  8032a8:	10000926 	beq	r2,zero,8032d0 <memcpy+0x3c>
  8032ac:	30000626 	beq	r6,zero,8032c8 <memcpy+0x34>
  8032b0:	30cd883a 	add	r6,r6,r3
  8032b4:	28800003 	ldbu	r2,0(r5)
  8032b8:	29400044 	addi	r5,r5,1
  8032bc:	18800005 	stb	r2,0(r3)
  8032c0:	18c00044 	addi	r3,r3,1
  8032c4:	30fffb1e 	bne	r6,r3,8032b4 <memcpy+0x20>
  8032c8:	2005883a 	mov	r2,r4
  8032cc:	f800283a 	ret
  8032d0:	3811883a 	mov	r8,r7
  8032d4:	200f883a 	mov	r7,r4
  8032d8:	28c00017 	ldw	r3,0(r5)
  8032dc:	31bffc04 	addi	r6,r6,-16
  8032e0:	38c00015 	stw	r3,0(r7)
  8032e4:	28800117 	ldw	r2,4(r5)
  8032e8:	38800115 	stw	r2,4(r7)
  8032ec:	28c00217 	ldw	r3,8(r5)
  8032f0:	38c00215 	stw	r3,8(r7)
  8032f4:	28800317 	ldw	r2,12(r5)
  8032f8:	29400404 	addi	r5,r5,16
  8032fc:	38800315 	stw	r2,12(r7)
  803300:	39c00404 	addi	r7,r7,16
  803304:	41bff436 	bltu	r8,r6,8032d8 <memcpy+0x44>
  803308:	008000c4 	movi	r2,3
  80330c:	1180072e 	bgeu	r2,r6,80332c <memcpy+0x98>
  803310:	1007883a 	mov	r3,r2
  803314:	28800017 	ldw	r2,0(r5)
  803318:	31bfff04 	addi	r6,r6,-4
  80331c:	29400104 	addi	r5,r5,4
  803320:	38800015 	stw	r2,0(r7)
  803324:	39c00104 	addi	r7,r7,4
  803328:	19bffa36 	bltu	r3,r6,803314 <memcpy+0x80>
  80332c:	3807883a 	mov	r3,r7
  803330:	003fde06 	br	8032ac <memcpy+0x18>

00803334 <memmove>:
  803334:	2807883a 	mov	r3,r5
  803338:	2011883a 	mov	r8,r4
  80333c:	29000c2e 	bgeu	r5,r4,803370 <memmove+0x3c>
  803340:	298f883a 	add	r7,r5,r6
  803344:	21c00a2e 	bgeu	r4,r7,803370 <memmove+0x3c>
  803348:	30000726 	beq	r6,zero,803368 <memmove+0x34>
  80334c:	2187883a 	add	r3,r4,r6
  803350:	198dc83a 	sub	r6,r3,r6
  803354:	39ffffc4 	addi	r7,r7,-1
  803358:	38800003 	ldbu	r2,0(r7)
  80335c:	18ffffc4 	addi	r3,r3,-1
  803360:	18800005 	stb	r2,0(r3)
  803364:	19bffb1e 	bne	r3,r6,803354 <memmove+0x20>
  803368:	2005883a 	mov	r2,r4
  80336c:	f800283a 	ret
  803370:	01c003c4 	movi	r7,15
  803374:	39800a36 	bltu	r7,r6,8033a0 <memmove+0x6c>
  803378:	303ffb26 	beq	r6,zero,803368 <memmove+0x34>
  80337c:	400f883a 	mov	r7,r8
  803380:	320d883a 	add	r6,r6,r8
  803384:	28800003 	ldbu	r2,0(r5)
  803388:	29400044 	addi	r5,r5,1
  80338c:	38800005 	stb	r2,0(r7)
  803390:	39c00044 	addi	r7,r7,1
  803394:	39bffb1e 	bne	r7,r6,803384 <memmove+0x50>
  803398:	2005883a 	mov	r2,r4
  80339c:	f800283a 	ret
  8033a0:	1904b03a 	or	r2,r3,r4
  8033a4:	108000cc 	andi	r2,r2,3
  8033a8:	103ff31e 	bne	r2,zero,803378 <memmove+0x44>
  8033ac:	3811883a 	mov	r8,r7
  8033b0:	180b883a 	mov	r5,r3
  8033b4:	200f883a 	mov	r7,r4
  8033b8:	28c00017 	ldw	r3,0(r5)
  8033bc:	31bffc04 	addi	r6,r6,-16
  8033c0:	38c00015 	stw	r3,0(r7)
  8033c4:	28800117 	ldw	r2,4(r5)
  8033c8:	38800115 	stw	r2,4(r7)
  8033cc:	28c00217 	ldw	r3,8(r5)
  8033d0:	38c00215 	stw	r3,8(r7)
  8033d4:	28800317 	ldw	r2,12(r5)
  8033d8:	29400404 	addi	r5,r5,16
  8033dc:	38800315 	stw	r2,12(r7)
  8033e0:	39c00404 	addi	r7,r7,16
  8033e4:	41bff436 	bltu	r8,r6,8033b8 <memmove+0x84>
  8033e8:	008000c4 	movi	r2,3
  8033ec:	1180072e 	bgeu	r2,r6,80340c <memmove+0xd8>
  8033f0:	1007883a 	mov	r3,r2
  8033f4:	28800017 	ldw	r2,0(r5)
  8033f8:	31bfff04 	addi	r6,r6,-4
  8033fc:	29400104 	addi	r5,r5,4
  803400:	38800015 	stw	r2,0(r7)
  803404:	39c00104 	addi	r7,r7,4
  803408:	19bffa36 	bltu	r3,r6,8033f4 <memmove+0xc0>
  80340c:	3811883a 	mov	r8,r7
  803410:	003fd906 	br	803378 <memmove+0x44>

00803414 <memset>:
  803414:	008000c4 	movi	r2,3
  803418:	29403fcc 	andi	r5,r5,255
  80341c:	2007883a 	mov	r3,r4
  803420:	1180022e 	bgeu	r2,r6,80342c <memset+0x18>
  803424:	2084703a 	and	r2,r4,r2
  803428:	10000826 	beq	r2,zero,80344c <memset+0x38>
  80342c:	30000526 	beq	r6,zero,803444 <memset+0x30>
  803430:	2805883a 	mov	r2,r5
  803434:	30cd883a 	add	r6,r6,r3
  803438:	18800005 	stb	r2,0(r3)
  80343c:	18c00044 	addi	r3,r3,1
  803440:	19bffd1e 	bne	r3,r6,803438 <memset+0x24>
  803444:	2005883a 	mov	r2,r4
  803448:	f800283a 	ret
  80344c:	2804923a 	slli	r2,r5,8
  803450:	020003c4 	movi	r8,15
  803454:	200f883a 	mov	r7,r4
  803458:	2884b03a 	or	r2,r5,r2
  80345c:	1006943a 	slli	r3,r2,16
  803460:	10c6b03a 	or	r3,r2,r3
  803464:	41800a2e 	bgeu	r8,r6,803490 <memset+0x7c>
  803468:	4005883a 	mov	r2,r8
  80346c:	31bffc04 	addi	r6,r6,-16
  803470:	38c00015 	stw	r3,0(r7)
  803474:	38c00115 	stw	r3,4(r7)
  803478:	38c00215 	stw	r3,8(r7)
  80347c:	38c00315 	stw	r3,12(r7)
  803480:	39c00404 	addi	r7,r7,16
  803484:	11bff936 	bltu	r2,r6,80346c <memset+0x58>
  803488:	008000c4 	movi	r2,3
  80348c:	1180052e 	bgeu	r2,r6,8034a4 <memset+0x90>
  803490:	31bfff04 	addi	r6,r6,-4
  803494:	008000c4 	movi	r2,3
  803498:	38c00015 	stw	r3,0(r7)
  80349c:	39c00104 	addi	r7,r7,4
  8034a0:	11bffb36 	bltu	r2,r6,803490 <memset+0x7c>
  8034a4:	3807883a 	mov	r3,r7
  8034a8:	003fe006 	br	80342c <memset+0x18>

008034ac <_open_r>:
  8034ac:	defffd04 	addi	sp,sp,-12
  8034b0:	dc000015 	stw	r16,0(sp)
  8034b4:	040020b4 	movhi	r16,130
  8034b8:	84236404 	addi	r16,r16,-29296
  8034bc:	dc400115 	stw	r17,4(sp)
  8034c0:	80000015 	stw	zero,0(r16)
  8034c4:	2023883a 	mov	r17,r4
  8034c8:	2809883a 	mov	r4,r5
  8034cc:	300b883a 	mov	r5,r6
  8034d0:	380d883a 	mov	r6,r7
  8034d4:	dfc00215 	stw	ra,8(sp)
  8034d8:	08110300 	call	811030 <open>
  8034dc:	1007883a 	mov	r3,r2
  8034e0:	00bfffc4 	movi	r2,-1
  8034e4:	18800626 	beq	r3,r2,803500 <_open_r+0x54>
  8034e8:	1805883a 	mov	r2,r3
  8034ec:	dfc00217 	ldw	ra,8(sp)
  8034f0:	dc400117 	ldw	r17,4(sp)
  8034f4:	dc000017 	ldw	r16,0(sp)
  8034f8:	dec00304 	addi	sp,sp,12
  8034fc:	f800283a 	ret
  803500:	80800017 	ldw	r2,0(r16)
  803504:	103ff826 	beq	r2,zero,8034e8 <_open_r+0x3c>
  803508:	88800015 	stw	r2,0(r17)
  80350c:	1805883a 	mov	r2,r3
  803510:	dfc00217 	ldw	ra,8(sp)
  803514:	dc400117 	ldw	r17,4(sp)
  803518:	dc000017 	ldw	r16,0(sp)
  80351c:	dec00304 	addi	sp,sp,12
  803520:	f800283a 	ret

00803524 <printf>:
  803524:	defffb04 	addi	sp,sp,-20
  803528:	dfc00115 	stw	ra,4(sp)
  80352c:	d9400215 	stw	r5,8(sp)
  803530:	d9800315 	stw	r6,12(sp)
  803534:	d9c00415 	stw	r7,16(sp)
  803538:	00802074 	movhi	r2,129
  80353c:	109c1404 	addi	r2,r2,28752
  803540:	10c00017 	ldw	r3,0(r2)
  803544:	200b883a 	mov	r5,r4
  803548:	d8800204 	addi	r2,sp,8
  80354c:	19000217 	ldw	r4,8(r3)
  803550:	100d883a 	mov	r6,r2
  803554:	d8800015 	stw	r2,0(sp)
  803558:	08061a00 	call	8061a0 <__vfprintf_internal>
  80355c:	dfc00117 	ldw	ra,4(sp)
  803560:	dec00504 	addi	sp,sp,20
  803564:	f800283a 	ret

00803568 <_printf_r>:
  803568:	defffc04 	addi	sp,sp,-16
  80356c:	dfc00115 	stw	ra,4(sp)
  803570:	d9800215 	stw	r6,8(sp)
  803574:	d9c00315 	stw	r7,12(sp)
  803578:	280d883a 	mov	r6,r5
  80357c:	21400217 	ldw	r5,8(r4)
  803580:	d8c00204 	addi	r3,sp,8
  803584:	180f883a 	mov	r7,r3
  803588:	d8c00015 	stw	r3,0(sp)
  80358c:	08042f40 	call	8042f4 <___vfprintf_internal_r>
  803590:	dfc00117 	ldw	ra,4(sp)
  803594:	dec00404 	addi	sp,sp,16
  803598:	f800283a 	ret

0080359c <_puts_r>:
  80359c:	defff604 	addi	sp,sp,-40
  8035a0:	dc400715 	stw	r17,28(sp)
  8035a4:	2023883a 	mov	r17,r4
  8035a8:	2809883a 	mov	r4,r5
  8035ac:	dfc00915 	stw	ra,36(sp)
  8035b0:	dcc00815 	stw	r19,32(sp)
  8035b4:	2827883a 	mov	r19,r5
  8035b8:	08042280 	call	804228 <strlen>
  8035bc:	89400217 	ldw	r5,8(r17)
  8035c0:	00c02074 	movhi	r3,129
  8035c4:	18d36104 	addi	r3,r3,19844
  8035c8:	01c00044 	movi	r7,1
  8035cc:	12000044 	addi	r8,r2,1
  8035d0:	d8c00515 	stw	r3,20(sp)
  8035d4:	d9c00615 	stw	r7,24(sp)
  8035d8:	d8c00304 	addi	r3,sp,12
  8035dc:	01c00084 	movi	r7,2
  8035e0:	8809883a 	mov	r4,r17
  8035e4:	d80d883a 	mov	r6,sp
  8035e8:	d8c00015 	stw	r3,0(sp)
  8035ec:	dcc00315 	stw	r19,12(sp)
  8035f0:	da000215 	stw	r8,8(sp)
  8035f4:	d9c00115 	stw	r7,4(sp)
  8035f8:	d8800415 	stw	r2,16(sp)
  8035fc:	08022c00 	call	8022c0 <__sfvwrite_r>
  803600:	00ffffc4 	movi	r3,-1
  803604:	10000626 	beq	r2,zero,803620 <_puts_r+0x84>
  803608:	1805883a 	mov	r2,r3
  80360c:	dfc00917 	ldw	ra,36(sp)
  803610:	dcc00817 	ldw	r19,32(sp)
  803614:	dc400717 	ldw	r17,28(sp)
  803618:	dec00a04 	addi	sp,sp,40
  80361c:	f800283a 	ret
  803620:	00c00284 	movi	r3,10
  803624:	1805883a 	mov	r2,r3
  803628:	dfc00917 	ldw	ra,36(sp)
  80362c:	dcc00817 	ldw	r19,32(sp)
  803630:	dc400717 	ldw	r17,28(sp)
  803634:	dec00a04 	addi	sp,sp,40
  803638:	f800283a 	ret

0080363c <puts>:
  80363c:	00802074 	movhi	r2,129
  803640:	109c1404 	addi	r2,r2,28752
  803644:	200b883a 	mov	r5,r4
  803648:	11000017 	ldw	r4,0(r2)
  80364c:	080359c1 	jmpi	80359c <_puts_r>

00803650 <_realloc_r>:
  803650:	defff404 	addi	sp,sp,-48
  803654:	dd800815 	stw	r22,32(sp)
  803658:	dc800415 	stw	r18,16(sp)
  80365c:	dc400315 	stw	r17,12(sp)
  803660:	dfc00b15 	stw	ra,44(sp)
  803664:	df000a15 	stw	fp,40(sp)
  803668:	ddc00915 	stw	r23,36(sp)
  80366c:	dd400715 	stw	r21,28(sp)
  803670:	dd000615 	stw	r20,24(sp)
  803674:	dcc00515 	stw	r19,20(sp)
  803678:	dc000215 	stw	r16,8(sp)
  80367c:	2825883a 	mov	r18,r5
  803680:	3023883a 	mov	r17,r6
  803684:	202d883a 	mov	r22,r4
  803688:	2800c926 	beq	r5,zero,8039b0 <_realloc_r+0x360>
  80368c:	0810f140 	call	810f14 <__malloc_lock>
  803690:	943ffe04 	addi	r16,r18,-8
  803694:	88c002c4 	addi	r3,r17,11
  803698:	00800584 	movi	r2,22
  80369c:	82000117 	ldw	r8,4(r16)
  8036a0:	10c01b2e 	bgeu	r2,r3,803710 <_realloc_r+0xc0>
  8036a4:	00bffe04 	movi	r2,-8
  8036a8:	188e703a 	and	r7,r3,r2
  8036ac:	3839883a 	mov	fp,r7
  8036b0:	38001a16 	blt	r7,zero,80371c <_realloc_r+0xcc>
  8036b4:	e4401936 	bltu	fp,r17,80371c <_realloc_r+0xcc>
  8036b8:	013fff04 	movi	r4,-4
  8036bc:	4126703a 	and	r19,r8,r4
  8036c0:	99c02616 	blt	r19,r7,80375c <_realloc_r+0x10c>
  8036c4:	802b883a 	mov	r21,r16
  8036c8:	9829883a 	mov	r20,r19
  8036cc:	84000204 	addi	r16,r16,8
  8036d0:	a80f883a 	mov	r7,r21
  8036d4:	a70dc83a 	sub	r6,r20,fp
  8036d8:	008003c4 	movi	r2,15
  8036dc:	1180c136 	bltu	r2,r6,8039e4 <_realloc_r+0x394>
  8036e0:	38800117 	ldw	r2,4(r7)
  8036e4:	a549883a 	add	r4,r20,r21
  8036e8:	1080004c 	andi	r2,r2,1
  8036ec:	a084b03a 	or	r2,r20,r2
  8036f0:	38800115 	stw	r2,4(r7)
  8036f4:	20c00117 	ldw	r3,4(r4)
  8036f8:	18c00054 	ori	r3,r3,1
  8036fc:	20c00115 	stw	r3,4(r4)
  803700:	b009883a 	mov	r4,r22
  803704:	0810f340 	call	810f34 <__malloc_unlock>
  803708:	8023883a 	mov	r17,r16
  80370c:	00000606 	br	803728 <_realloc_r+0xd8>
  803710:	01c00404 	movi	r7,16
  803714:	3839883a 	mov	fp,r7
  803718:	e47fe72e 	bgeu	fp,r17,8036b8 <_realloc_r+0x68>
  80371c:	00800304 	movi	r2,12
  803720:	0023883a 	mov	r17,zero
  803724:	b0800015 	stw	r2,0(r22)
  803728:	8805883a 	mov	r2,r17
  80372c:	dfc00b17 	ldw	ra,44(sp)
  803730:	df000a17 	ldw	fp,40(sp)
  803734:	ddc00917 	ldw	r23,36(sp)
  803738:	dd800817 	ldw	r22,32(sp)
  80373c:	dd400717 	ldw	r21,28(sp)
  803740:	dd000617 	ldw	r20,24(sp)
  803744:	dcc00517 	ldw	r19,20(sp)
  803748:	dc800417 	ldw	r18,16(sp)
  80374c:	dc400317 	ldw	r17,12(sp)
  803750:	dc000217 	ldw	r16,8(sp)
  803754:	dec00c04 	addi	sp,sp,48
  803758:	f800283a 	ret
  80375c:	00802074 	movhi	r2,129
  803760:	10960604 	addi	r2,r2,22552
  803764:	12400217 	ldw	r9,8(r2)
  803768:	84cd883a 	add	r6,r16,r19
  80376c:	802b883a 	mov	r21,r16
  803770:	3240b926 	beq	r6,r9,803a58 <_realloc_r+0x408>
  803774:	31400117 	ldw	r5,4(r6)
  803778:	00bfff84 	movi	r2,-2
  80377c:	2884703a 	and	r2,r5,r2
  803780:	1185883a 	add	r2,r2,r6
  803784:	10c00117 	ldw	r3,4(r2)
  803788:	18c0004c 	andi	r3,r3,1
  80378c:	1807003a 	cmpeq	r3,r3,zero
  803790:	1800a326 	beq	r3,zero,803a20 <_realloc_r+0x3d0>
  803794:	2908703a 	and	r4,r5,r4
  803798:	9929883a 	add	r20,r19,r4
  80379c:	a1c0a30e 	bge	r20,r7,803a2c <_realloc_r+0x3dc>
  8037a0:	4080004c 	andi	r2,r8,1
  8037a4:	1000551e 	bne	r2,zero,8038fc <_realloc_r+0x2ac>
  8037a8:	80800017 	ldw	r2,0(r16)
  8037ac:	80afc83a 	sub	r23,r16,r2
  8037b0:	b8c00117 	ldw	r3,4(r23)
  8037b4:	00bfff04 	movi	r2,-4
  8037b8:	1884703a 	and	r2,r3,r2
  8037bc:	30002e26 	beq	r6,zero,803878 <_realloc_r+0x228>
  8037c0:	3240b926 	beq	r6,r9,803aa8 <_realloc_r+0x458>
  8037c4:	98a9883a 	add	r20,r19,r2
  8037c8:	2509883a 	add	r4,r4,r20
  8037cc:	d9000015 	stw	r4,0(sp)
  8037d0:	21c02a16 	blt	r4,r7,80387c <_realloc_r+0x22c>
  8037d4:	30800317 	ldw	r2,12(r6)
  8037d8:	30c00217 	ldw	r3,8(r6)
  8037dc:	01400904 	movi	r5,36
  8037e0:	99bfff04 	addi	r6,r19,-4
  8037e4:	18800315 	stw	r2,12(r3)
  8037e8:	10c00215 	stw	r3,8(r2)
  8037ec:	b9000317 	ldw	r4,12(r23)
  8037f0:	b8800217 	ldw	r2,8(r23)
  8037f4:	b82b883a 	mov	r21,r23
  8037f8:	bc000204 	addi	r16,r23,8
  8037fc:	20800215 	stw	r2,8(r4)
  803800:	11000315 	stw	r4,12(r2)
  803804:	2980e436 	bltu	r5,r6,803b98 <_realloc_r+0x548>
  803808:	008004c4 	movi	r2,19
  80380c:	9009883a 	mov	r4,r18
  803810:	8011883a 	mov	r8,r16
  803814:	11800f2e 	bgeu	r2,r6,803854 <_realloc_r+0x204>
  803818:	90800017 	ldw	r2,0(r18)
  80381c:	ba000404 	addi	r8,r23,16
  803820:	91000204 	addi	r4,r18,8
  803824:	b8800215 	stw	r2,8(r23)
  803828:	90c00117 	ldw	r3,4(r18)
  80382c:	008006c4 	movi	r2,27
  803830:	b8c00315 	stw	r3,12(r23)
  803834:	1180072e 	bgeu	r2,r6,803854 <_realloc_r+0x204>
  803838:	90c00217 	ldw	r3,8(r18)
  80383c:	ba000604 	addi	r8,r23,24
  803840:	91000404 	addi	r4,r18,16
  803844:	b8c00415 	stw	r3,16(r23)
  803848:	90800317 	ldw	r2,12(r18)
  80384c:	b8800515 	stw	r2,20(r23)
  803850:	3140e726 	beq	r6,r5,803bf0 <_realloc_r+0x5a0>
  803854:	20800017 	ldw	r2,0(r4)
  803858:	dd000017 	ldw	r20,0(sp)
  80385c:	b80f883a 	mov	r7,r23
  803860:	40800015 	stw	r2,0(r8)
  803864:	20c00117 	ldw	r3,4(r4)
  803868:	40c00115 	stw	r3,4(r8)
  80386c:	20800217 	ldw	r2,8(r4)
  803870:	40800215 	stw	r2,8(r8)
  803874:	003f9706 	br	8036d4 <_realloc_r+0x84>
  803878:	98a9883a 	add	r20,r19,r2
  80387c:	a1c01f16 	blt	r20,r7,8038fc <_realloc_r+0x2ac>
  803880:	b8c00317 	ldw	r3,12(r23)
  803884:	b8800217 	ldw	r2,8(r23)
  803888:	99bfff04 	addi	r6,r19,-4
  80388c:	01400904 	movi	r5,36
  803890:	b82b883a 	mov	r21,r23
  803894:	18800215 	stw	r2,8(r3)
  803898:	10c00315 	stw	r3,12(r2)
  80389c:	bc000204 	addi	r16,r23,8
  8038a0:	2980c336 	bltu	r5,r6,803bb0 <_realloc_r+0x560>
  8038a4:	008004c4 	movi	r2,19
  8038a8:	9009883a 	mov	r4,r18
  8038ac:	8011883a 	mov	r8,r16
  8038b0:	11800f2e 	bgeu	r2,r6,8038f0 <_realloc_r+0x2a0>
  8038b4:	90800017 	ldw	r2,0(r18)
  8038b8:	ba000404 	addi	r8,r23,16
  8038bc:	91000204 	addi	r4,r18,8
  8038c0:	b8800215 	stw	r2,8(r23)
  8038c4:	90c00117 	ldw	r3,4(r18)
  8038c8:	008006c4 	movi	r2,27
  8038cc:	b8c00315 	stw	r3,12(r23)
  8038d0:	1180072e 	bgeu	r2,r6,8038f0 <_realloc_r+0x2a0>
  8038d4:	90c00217 	ldw	r3,8(r18)
  8038d8:	ba000604 	addi	r8,r23,24
  8038dc:	91000404 	addi	r4,r18,16
  8038e0:	b8c00415 	stw	r3,16(r23)
  8038e4:	90800317 	ldw	r2,12(r18)
  8038e8:	b8800515 	stw	r2,20(r23)
  8038ec:	3140c726 	beq	r6,r5,803c0c <_realloc_r+0x5bc>
  8038f0:	20800017 	ldw	r2,0(r4)
  8038f4:	b80f883a 	mov	r7,r23
  8038f8:	003fd906 	br	803860 <_realloc_r+0x210>
  8038fc:	880b883a 	mov	r5,r17
  803900:	b009883a 	mov	r4,r22
  803904:	0802a700 	call	802a70 <_malloc_r>
  803908:	1023883a 	mov	r17,r2
  80390c:	10002526 	beq	r2,zero,8039a4 <_realloc_r+0x354>
  803910:	80800117 	ldw	r2,4(r16)
  803914:	00ffff84 	movi	r3,-2
  803918:	893ffe04 	addi	r4,r17,-8
  80391c:	10c4703a 	and	r2,r2,r3
  803920:	8085883a 	add	r2,r16,r2
  803924:	20809526 	beq	r4,r2,803b7c <_realloc_r+0x52c>
  803928:	99bfff04 	addi	r6,r19,-4
  80392c:	01c00904 	movi	r7,36
  803930:	39804536 	bltu	r7,r6,803a48 <_realloc_r+0x3f8>
  803934:	008004c4 	movi	r2,19
  803938:	9009883a 	mov	r4,r18
  80393c:	880b883a 	mov	r5,r17
  803940:	11800f2e 	bgeu	r2,r6,803980 <_realloc_r+0x330>
  803944:	90800017 	ldw	r2,0(r18)
  803948:	89400204 	addi	r5,r17,8
  80394c:	91000204 	addi	r4,r18,8
  803950:	88800015 	stw	r2,0(r17)
  803954:	90c00117 	ldw	r3,4(r18)
  803958:	008006c4 	movi	r2,27
  80395c:	88c00115 	stw	r3,4(r17)
  803960:	1180072e 	bgeu	r2,r6,803980 <_realloc_r+0x330>
  803964:	90c00217 	ldw	r3,8(r18)
  803968:	89400404 	addi	r5,r17,16
  80396c:	91000404 	addi	r4,r18,16
  803970:	88c00215 	stw	r3,8(r17)
  803974:	90800317 	ldw	r2,12(r18)
  803978:	88800315 	stw	r2,12(r17)
  80397c:	31c09126 	beq	r6,r7,803bc4 <_realloc_r+0x574>
  803980:	20800017 	ldw	r2,0(r4)
  803984:	28800015 	stw	r2,0(r5)
  803988:	20c00117 	ldw	r3,4(r4)
  80398c:	28c00115 	stw	r3,4(r5)
  803990:	20800217 	ldw	r2,8(r4)
  803994:	28800215 	stw	r2,8(r5)
  803998:	900b883a 	mov	r5,r18
  80399c:	b009883a 	mov	r4,r22
  8039a0:	0801ad80 	call	801ad8 <_free_r>
  8039a4:	b009883a 	mov	r4,r22
  8039a8:	0810f340 	call	810f34 <__malloc_unlock>
  8039ac:	003f5e06 	br	803728 <_realloc_r+0xd8>
  8039b0:	300b883a 	mov	r5,r6
  8039b4:	dfc00b17 	ldw	ra,44(sp)
  8039b8:	df000a17 	ldw	fp,40(sp)
  8039bc:	ddc00917 	ldw	r23,36(sp)
  8039c0:	dd800817 	ldw	r22,32(sp)
  8039c4:	dd400717 	ldw	r21,28(sp)
  8039c8:	dd000617 	ldw	r20,24(sp)
  8039cc:	dcc00517 	ldw	r19,20(sp)
  8039d0:	dc800417 	ldw	r18,16(sp)
  8039d4:	dc400317 	ldw	r17,12(sp)
  8039d8:	dc000217 	ldw	r16,8(sp)
  8039dc:	dec00c04 	addi	sp,sp,48
  8039e0:	0802a701 	jmpi	802a70 <_malloc_r>
  8039e4:	38800117 	ldw	r2,4(r7)
  8039e8:	e54b883a 	add	r5,fp,r21
  8039ec:	31000054 	ori	r4,r6,1
  8039f0:	1080004c 	andi	r2,r2,1
  8039f4:	1704b03a 	or	r2,r2,fp
  8039f8:	38800115 	stw	r2,4(r7)
  8039fc:	29000115 	stw	r4,4(r5)
  803a00:	2987883a 	add	r3,r5,r6
  803a04:	18800117 	ldw	r2,4(r3)
  803a08:	29400204 	addi	r5,r5,8
  803a0c:	b009883a 	mov	r4,r22
  803a10:	10800054 	ori	r2,r2,1
  803a14:	18800115 	stw	r2,4(r3)
  803a18:	0801ad80 	call	801ad8 <_free_r>
  803a1c:	003f3806 	br	803700 <_realloc_r+0xb0>
  803a20:	000d883a 	mov	r6,zero
  803a24:	0009883a 	mov	r4,zero
  803a28:	003f5d06 	br	8037a0 <_realloc_r+0x150>
  803a2c:	30c00217 	ldw	r3,8(r6)
  803a30:	30800317 	ldw	r2,12(r6)
  803a34:	800f883a 	mov	r7,r16
  803a38:	84000204 	addi	r16,r16,8
  803a3c:	10c00215 	stw	r3,8(r2)
  803a40:	18800315 	stw	r2,12(r3)
  803a44:	003f2306 	br	8036d4 <_realloc_r+0x84>
  803a48:	8809883a 	mov	r4,r17
  803a4c:	900b883a 	mov	r5,r18
  803a50:	08033340 	call	803334 <memmove>
  803a54:	003fd006 	br	803998 <_realloc_r+0x348>
  803a58:	30800117 	ldw	r2,4(r6)
  803a5c:	e0c00404 	addi	r3,fp,16
  803a60:	1108703a 	and	r4,r2,r4
  803a64:	9905883a 	add	r2,r19,r4
  803a68:	10ff4d16 	blt	r2,r3,8037a0 <_realloc_r+0x150>
  803a6c:	1705c83a 	sub	r2,r2,fp
  803a70:	870b883a 	add	r5,r16,fp
  803a74:	10800054 	ori	r2,r2,1
  803a78:	28800115 	stw	r2,4(r5)
  803a7c:	80c00117 	ldw	r3,4(r16)
  803a80:	00802074 	movhi	r2,129
  803a84:	10960604 	addi	r2,r2,22552
  803a88:	b009883a 	mov	r4,r22
  803a8c:	18c0004c 	andi	r3,r3,1
  803a90:	e0c6b03a 	or	r3,fp,r3
  803a94:	11400215 	stw	r5,8(r2)
  803a98:	80c00115 	stw	r3,4(r16)
  803a9c:	0810f340 	call	810f34 <__malloc_unlock>
  803aa0:	84400204 	addi	r17,r16,8
  803aa4:	003f2006 	br	803728 <_realloc_r+0xd8>
  803aa8:	98a9883a 	add	r20,r19,r2
  803aac:	2509883a 	add	r4,r4,r20
  803ab0:	e0800404 	addi	r2,fp,16
  803ab4:	d9000115 	stw	r4,4(sp)
  803ab8:	20bf7016 	blt	r4,r2,80387c <_realloc_r+0x22c>
  803abc:	b8c00317 	ldw	r3,12(r23)
  803ac0:	b8800217 	ldw	r2,8(r23)
  803ac4:	99bfff04 	addi	r6,r19,-4
  803ac8:	01400904 	movi	r5,36
  803acc:	18800215 	stw	r2,8(r3)
  803ad0:	10c00315 	stw	r3,12(r2)
  803ad4:	bc400204 	addi	r17,r23,8
  803ad8:	29804136 	bltu	r5,r6,803be0 <_realloc_r+0x590>
  803adc:	008004c4 	movi	r2,19
  803ae0:	9009883a 	mov	r4,r18
  803ae4:	880f883a 	mov	r7,r17
  803ae8:	11800f2e 	bgeu	r2,r6,803b28 <_realloc_r+0x4d8>
  803aec:	90800017 	ldw	r2,0(r18)
  803af0:	b9c00404 	addi	r7,r23,16
  803af4:	91000204 	addi	r4,r18,8
  803af8:	b8800215 	stw	r2,8(r23)
  803afc:	90c00117 	ldw	r3,4(r18)
  803b00:	008006c4 	movi	r2,27
  803b04:	b8c00315 	stw	r3,12(r23)
  803b08:	1180072e 	bgeu	r2,r6,803b28 <_realloc_r+0x4d8>
  803b0c:	90c00217 	ldw	r3,8(r18)
  803b10:	b9c00604 	addi	r7,r23,24
  803b14:	91000404 	addi	r4,r18,16
  803b18:	b8c00415 	stw	r3,16(r23)
  803b1c:	90800317 	ldw	r2,12(r18)
  803b20:	b8800515 	stw	r2,20(r23)
  803b24:	31404026 	beq	r6,r5,803c28 <_realloc_r+0x5d8>
  803b28:	20800017 	ldw	r2,0(r4)
  803b2c:	38800015 	stw	r2,0(r7)
  803b30:	20c00117 	ldw	r3,4(r4)
  803b34:	38c00115 	stw	r3,4(r7)
  803b38:	20800217 	ldw	r2,8(r4)
  803b3c:	38800215 	stw	r2,8(r7)
  803b40:	d8c00117 	ldw	r3,4(sp)
  803b44:	bf0b883a 	add	r5,r23,fp
  803b48:	b009883a 	mov	r4,r22
  803b4c:	1f05c83a 	sub	r2,r3,fp
  803b50:	10800054 	ori	r2,r2,1
  803b54:	28800115 	stw	r2,4(r5)
  803b58:	b8c00117 	ldw	r3,4(r23)
  803b5c:	00802074 	movhi	r2,129
  803b60:	10960604 	addi	r2,r2,22552
  803b64:	11400215 	stw	r5,8(r2)
  803b68:	18c0004c 	andi	r3,r3,1
  803b6c:	e0c6b03a 	or	r3,fp,r3
  803b70:	b8c00115 	stw	r3,4(r23)
  803b74:	0810f340 	call	810f34 <__malloc_unlock>
  803b78:	003eeb06 	br	803728 <_realloc_r+0xd8>
  803b7c:	20800117 	ldw	r2,4(r4)
  803b80:	00ffff04 	movi	r3,-4
  803b84:	800f883a 	mov	r7,r16
  803b88:	10c4703a 	and	r2,r2,r3
  803b8c:	98a9883a 	add	r20,r19,r2
  803b90:	84000204 	addi	r16,r16,8
  803b94:	003ecf06 	br	8036d4 <_realloc_r+0x84>
  803b98:	900b883a 	mov	r5,r18
  803b9c:	8009883a 	mov	r4,r16
  803ba0:	08033340 	call	803334 <memmove>
  803ba4:	dd000017 	ldw	r20,0(sp)
  803ba8:	b80f883a 	mov	r7,r23
  803bac:	003ec906 	br	8036d4 <_realloc_r+0x84>
  803bb0:	900b883a 	mov	r5,r18
  803bb4:	8009883a 	mov	r4,r16
  803bb8:	08033340 	call	803334 <memmove>
  803bbc:	b80f883a 	mov	r7,r23
  803bc0:	003ec406 	br	8036d4 <_realloc_r+0x84>
  803bc4:	90c00417 	ldw	r3,16(r18)
  803bc8:	89400604 	addi	r5,r17,24
  803bcc:	91000604 	addi	r4,r18,24
  803bd0:	88c00415 	stw	r3,16(r17)
  803bd4:	90800517 	ldw	r2,20(r18)
  803bd8:	88800515 	stw	r2,20(r17)
  803bdc:	003f6806 	br	803980 <_realloc_r+0x330>
  803be0:	900b883a 	mov	r5,r18
  803be4:	8809883a 	mov	r4,r17
  803be8:	08033340 	call	803334 <memmove>
  803bec:	003fd406 	br	803b40 <_realloc_r+0x4f0>
  803bf0:	90c00417 	ldw	r3,16(r18)
  803bf4:	91000604 	addi	r4,r18,24
  803bf8:	ba000804 	addi	r8,r23,32
  803bfc:	b8c00615 	stw	r3,24(r23)
  803c00:	90800517 	ldw	r2,20(r18)
  803c04:	b8800715 	stw	r2,28(r23)
  803c08:	003f1206 	br	803854 <_realloc_r+0x204>
  803c0c:	90c00417 	ldw	r3,16(r18)
  803c10:	91000604 	addi	r4,r18,24
  803c14:	ba000804 	addi	r8,r23,32
  803c18:	b8c00615 	stw	r3,24(r23)
  803c1c:	90800517 	ldw	r2,20(r18)
  803c20:	b8800715 	stw	r2,28(r23)
  803c24:	003f3206 	br	8038f0 <_realloc_r+0x2a0>
  803c28:	90c00417 	ldw	r3,16(r18)
  803c2c:	91000604 	addi	r4,r18,24
  803c30:	b9c00804 	addi	r7,r23,32
  803c34:	b8c00615 	stw	r3,24(r23)
  803c38:	90800517 	ldw	r2,20(r18)
  803c3c:	b8800715 	stw	r2,28(r23)
  803c40:	003fb906 	br	803b28 <_realloc_r+0x4d8>

00803c44 <__srefill_r>:
  803c44:	defffd04 	addi	sp,sp,-12
  803c48:	dc400115 	stw	r17,4(sp)
  803c4c:	dc000015 	stw	r16,0(sp)
  803c50:	dfc00215 	stw	ra,8(sp)
  803c54:	2023883a 	mov	r17,r4
  803c58:	2821883a 	mov	r16,r5
  803c5c:	20000226 	beq	r4,zero,803c68 <__srefill_r+0x24>
  803c60:	20800e17 	ldw	r2,56(r4)
  803c64:	10004126 	beq	r2,zero,803d6c <__srefill_r+0x128>
  803c68:	80c0030b 	ldhu	r3,12(r16)
  803c6c:	80000115 	stw	zero,4(r16)
  803c70:	1880080c 	andi	r2,r3,32
  803c74:	1000361e 	bne	r2,zero,803d50 <__srefill_r+0x10c>
  803c78:	1880010c 	andi	r2,r3,4
  803c7c:	1000211e 	bne	r2,zero,803d04 <__srefill_r+0xc0>
  803c80:	1880040c 	andi	r2,r3,16
  803c84:	10005026 	beq	r2,zero,803dc8 <__srefill_r+0x184>
  803c88:	1880020c 	andi	r2,r3,8
  803c8c:	1000541e 	bne	r2,zero,803de0 <__srefill_r+0x19c>
  803c90:	8080030b 	ldhu	r2,12(r16)
  803c94:	10800114 	ori	r2,r2,4
  803c98:	8080030d 	sth	r2,12(r16)
  803c9c:	80800417 	ldw	r2,16(r16)
  803ca0:	10004526 	beq	r2,zero,803db8 <__srefill_r+0x174>
  803ca4:	8080030b 	ldhu	r2,12(r16)
  803ca8:	108000cc 	andi	r2,r2,3
  803cac:	1000361e 	bne	r2,zero,803d88 <__srefill_r+0x144>
  803cb0:	81800417 	ldw	r6,16(r16)
  803cb4:	80c00817 	ldw	r3,32(r16)
  803cb8:	81400717 	ldw	r5,28(r16)
  803cbc:	81c00517 	ldw	r7,20(r16)
  803cc0:	8809883a 	mov	r4,r17
  803cc4:	81800015 	stw	r6,0(r16)
  803cc8:	183ee83a 	callr	r3
  803ccc:	80c0030b 	ldhu	r3,12(r16)
  803cd0:	1009883a 	mov	r4,r2
  803cd4:	80800115 	stw	r2,4(r16)
  803cd8:	00b7ffc4 	movi	r2,-8193
  803cdc:	1884703a 	and	r2,r3,r2
  803ce0:	8080030d 	sth	r2,12(r16)
  803ce4:	0100230e 	bge	zero,r4,803d74 <__srefill_r+0x130>
  803ce8:	0009883a 	mov	r4,zero
  803cec:	2005883a 	mov	r2,r4
  803cf0:	dfc00217 	ldw	ra,8(sp)
  803cf4:	dc400117 	ldw	r17,4(sp)
  803cf8:	dc000017 	ldw	r16,0(sp)
  803cfc:	dec00304 	addi	sp,sp,12
  803d00:	f800283a 	ret
  803d04:	81400c17 	ldw	r5,48(r16)
  803d08:	283fe426 	beq	r5,zero,803c9c <__srefill_r+0x58>
  803d0c:	80801004 	addi	r2,r16,64
  803d10:	28800226 	beq	r5,r2,803d1c <__srefill_r+0xd8>
  803d14:	8809883a 	mov	r4,r17
  803d18:	0801ad80 	call	801ad8 <_free_r>
  803d1c:	80800f17 	ldw	r2,60(r16)
  803d20:	80000c15 	stw	zero,48(r16)
  803d24:	80800115 	stw	r2,4(r16)
  803d28:	103fdc26 	beq	r2,zero,803c9c <__srefill_r+0x58>
  803d2c:	80800e17 	ldw	r2,56(r16)
  803d30:	0009883a 	mov	r4,zero
  803d34:	80800015 	stw	r2,0(r16)
  803d38:	2005883a 	mov	r2,r4
  803d3c:	dfc00217 	ldw	ra,8(sp)
  803d40:	dc400117 	ldw	r17,4(sp)
  803d44:	dc000017 	ldw	r16,0(sp)
  803d48:	dec00304 	addi	sp,sp,12
  803d4c:	f800283a 	ret
  803d50:	013fffc4 	movi	r4,-1
  803d54:	2005883a 	mov	r2,r4
  803d58:	dfc00217 	ldw	ra,8(sp)
  803d5c:	dc400117 	ldw	r17,4(sp)
  803d60:	dc000017 	ldw	r16,0(sp)
  803d64:	dec00304 	addi	sp,sp,12
  803d68:	f800283a 	ret
  803d6c:	08015540 	call	801554 <__sinit>
  803d70:	003fbd06 	br	803c68 <__srefill_r+0x24>
  803d74:	20000b1e 	bne	r4,zero,803da4 <__srefill_r+0x160>
  803d78:	10800814 	ori	r2,r2,32
  803d7c:	013fffc4 	movi	r4,-1
  803d80:	8080030d 	sth	r2,12(r16)
  803d84:	003fd906 	br	803cec <__srefill_r+0xa8>
  803d88:	00802074 	movhi	r2,129
  803d8c:	109c1504 	addi	r2,r2,28756
  803d90:	11000017 	ldw	r4,0(r2)
  803d94:	01402034 	movhi	r5,128
  803d98:	294f8204 	addi	r5,r5,15880
  803d9c:	08028240 	call	802824 <_fwalk>
  803da0:	003fc306 	br	803cb0 <__srefill_r+0x6c>
  803da4:	10801014 	ori	r2,r2,64
  803da8:	013fffc4 	movi	r4,-1
  803dac:	8080030d 	sth	r2,12(r16)
  803db0:	80000115 	stw	zero,4(r16)
  803db4:	003fcd06 	br	803cec <__srefill_r+0xa8>
  803db8:	8809883a 	mov	r4,r17
  803dbc:	800b883a 	mov	r5,r16
  803dc0:	08028dc0 	call	8028dc <__smakebuf_r>
  803dc4:	003fb706 	br	803ca4 <__srefill_r+0x60>
  803dc8:	18c01014 	ori	r3,r3,64
  803dcc:	00800244 	movi	r2,9
  803dd0:	013fffc4 	movi	r4,-1
  803dd4:	88800015 	stw	r2,0(r17)
  803dd8:	80c0030d 	sth	r3,12(r16)
  803ddc:	003fc306 	br	803cec <__srefill_r+0xa8>
  803de0:	8809883a 	mov	r4,r17
  803de4:	800b883a 	mov	r5,r16
  803de8:	08011940 	call	801194 <_fflush_r>
  803dec:	103fd81e 	bne	r2,zero,803d50 <__srefill_r+0x10c>
  803df0:	8080030b 	ldhu	r2,12(r16)
  803df4:	80000215 	stw	zero,8(r16)
  803df8:	80000615 	stw	zero,24(r16)
  803dfc:	10bffdcc 	andi	r2,r2,65527
  803e00:	8080030d 	sth	r2,12(r16)
  803e04:	003fa206 	br	803c90 <__srefill_r+0x4c>

00803e08 <lflush>:
  803e08:	20c0030b 	ldhu	r3,12(r4)
  803e0c:	01400244 	movi	r5,9
  803e10:	0005883a 	mov	r2,zero
  803e14:	18c0024c 	andi	r3,r3,9
  803e18:	19400126 	beq	r3,r5,803e20 <lflush+0x18>
  803e1c:	f800283a 	ret
  803e20:	08013901 	jmpi	801390 <fflush>

00803e24 <__srget_r>:
  803e24:	defffe04 	addi	sp,sp,-8
  803e28:	dc000015 	stw	r16,0(sp)
  803e2c:	dfc00115 	stw	ra,4(sp)
  803e30:	2821883a 	mov	r16,r5
  803e34:	0803c440 	call	803c44 <__srefill_r>
  803e38:	013fffc4 	movi	r4,-1
  803e3c:	1000071e 	bne	r2,zero,803e5c <__srget_r+0x38>
  803e40:	80800117 	ldw	r2,4(r16)
  803e44:	81000017 	ldw	r4,0(r16)
  803e48:	10bfffc4 	addi	r2,r2,-1
  803e4c:	20c00044 	addi	r3,r4,1
  803e50:	80800115 	stw	r2,4(r16)
  803e54:	21000003 	ldbu	r4,0(r4)
  803e58:	80c00015 	stw	r3,0(r16)
  803e5c:	2005883a 	mov	r2,r4
  803e60:	dfc00117 	ldw	ra,4(sp)
  803e64:	dc000017 	ldw	r16,0(sp)
  803e68:	dec00204 	addi	sp,sp,8
  803e6c:	f800283a 	ret

00803e70 <__srget>:
  803e70:	00802074 	movhi	r2,129
  803e74:	109c1404 	addi	r2,r2,28752
  803e78:	200b883a 	mov	r5,r4
  803e7c:	11000017 	ldw	r4,0(r2)
  803e80:	0803e241 	jmpi	803e24 <__srget_r>

00803e84 <_sbrk_r>:
  803e84:	defffd04 	addi	sp,sp,-12
  803e88:	dc000015 	stw	r16,0(sp)
  803e8c:	040020b4 	movhi	r16,130
  803e90:	84236404 	addi	r16,r16,-29296
  803e94:	dc400115 	stw	r17,4(sp)
  803e98:	80000015 	stw	zero,0(r16)
  803e9c:	2023883a 	mov	r17,r4
  803ea0:	2809883a 	mov	r4,r5
  803ea4:	dfc00215 	stw	ra,8(sp)
  803ea8:	08113f80 	call	8113f8 <sbrk>
  803eac:	1007883a 	mov	r3,r2
  803eb0:	00bfffc4 	movi	r2,-1
  803eb4:	18800626 	beq	r3,r2,803ed0 <_sbrk_r+0x4c>
  803eb8:	1805883a 	mov	r2,r3
  803ebc:	dfc00217 	ldw	ra,8(sp)
  803ec0:	dc400117 	ldw	r17,4(sp)
  803ec4:	dc000017 	ldw	r16,0(sp)
  803ec8:	dec00304 	addi	sp,sp,12
  803ecc:	f800283a 	ret
  803ed0:	80800017 	ldw	r2,0(r16)
  803ed4:	103ff826 	beq	r2,zero,803eb8 <_sbrk_r+0x34>
  803ed8:	88800015 	stw	r2,0(r17)
  803edc:	1805883a 	mov	r2,r3
  803ee0:	dfc00217 	ldw	ra,8(sp)
  803ee4:	dc400117 	ldw	r17,4(sp)
  803ee8:	dc000017 	ldw	r16,0(sp)
  803eec:	dec00304 	addi	sp,sp,12
  803ef0:	f800283a 	ret

00803ef4 <sprintf>:
  803ef4:	deffe504 	addi	sp,sp,-108
  803ef8:	2013883a 	mov	r9,r4
  803efc:	dfc01815 	stw	ra,96(sp)
  803f00:	d9801915 	stw	r6,100(sp)
  803f04:	d9c01a15 	stw	r7,104(sp)
  803f08:	d8801904 	addi	r2,sp,100
  803f0c:	d8800015 	stw	r2,0(sp)
  803f10:	00802074 	movhi	r2,129
  803f14:	109c1404 	addi	r2,r2,28752
  803f18:	11000017 	ldw	r4,0(r2)
  803f1c:	d9c00017 	ldw	r7,0(sp)
  803f20:	00808204 	movi	r2,520
  803f24:	00e00034 	movhi	r3,32768
  803f28:	18ffffc4 	addi	r3,r3,-1
  803f2c:	280d883a 	mov	r6,r5
  803f30:	d880040d 	sth	r2,16(sp)
  803f34:	d9400104 	addi	r5,sp,4
  803f38:	00bfffc4 	movi	r2,-1
  803f3c:	d8c00615 	stw	r3,24(sp)
  803f40:	d8c00315 	stw	r3,12(sp)
  803f44:	da400515 	stw	r9,20(sp)
  803f48:	d880048d 	sth	r2,18(sp)
  803f4c:	da400115 	stw	r9,4(sp)
  803f50:	08042f40 	call	8042f4 <___vfprintf_internal_r>
  803f54:	d8c00117 	ldw	r3,4(sp)
  803f58:	18000005 	stb	zero,0(r3)
  803f5c:	dfc01817 	ldw	ra,96(sp)
  803f60:	dec01b04 	addi	sp,sp,108
  803f64:	f800283a 	ret

00803f68 <_sprintf_r>:
  803f68:	deffe604 	addi	sp,sp,-104
  803f6c:	2813883a 	mov	r9,r5
  803f70:	dfc01815 	stw	ra,96(sp)
  803f74:	d9c01915 	stw	r7,100(sp)
  803f78:	d8801904 	addi	r2,sp,100
  803f7c:	d8800015 	stw	r2,0(sp)
  803f80:	100f883a 	mov	r7,r2
  803f84:	00808204 	movi	r2,520
  803f88:	00e00034 	movhi	r3,32768
  803f8c:	18ffffc4 	addi	r3,r3,-1
  803f90:	d880040d 	sth	r2,16(sp)
  803f94:	d9400104 	addi	r5,sp,4
  803f98:	00bfffc4 	movi	r2,-1
  803f9c:	d8c00615 	stw	r3,24(sp)
  803fa0:	d8c00315 	stw	r3,12(sp)
  803fa4:	da400515 	stw	r9,20(sp)
  803fa8:	d880048d 	sth	r2,18(sp)
  803fac:	da400115 	stw	r9,4(sp)
  803fb0:	08042f40 	call	8042f4 <___vfprintf_internal_r>
  803fb4:	d8c00117 	ldw	r3,4(sp)
  803fb8:	18000005 	stb	zero,0(r3)
  803fbc:	dfc01817 	ldw	ra,96(sp)
  803fc0:	dec01a04 	addi	sp,sp,104
  803fc4:	f800283a 	ret

00803fc8 <eofread>:
  803fc8:	0005883a 	mov	r2,zero
  803fcc:	f800283a 	ret

00803fd0 <_sscanf_r>:
  803fd0:	deffe404 	addi	sp,sp,-112
  803fd4:	dcc01915 	stw	r19,100(sp)
  803fd8:	2027883a 	mov	r19,r4
  803fdc:	dfc01a15 	stw	ra,104(sp)
  803fe0:	dc401815 	stw	r17,96(sp)
  803fe4:	d9c01b15 	stw	r7,108(sp)
  803fe8:	00808104 	movi	r2,516
  803fec:	2809883a 	mov	r4,r5
  803ff0:	3023883a 	mov	r17,r6
  803ff4:	d9400115 	stw	r5,4(sp)
  803ff8:	d9400515 	stw	r5,20(sp)
  803ffc:	d880040d 	sth	r2,16(sp)
  804000:	08042280 	call	804228 <strlen>
  804004:	d8c01b04 	addi	r3,sp,108
  804008:	d8c00015 	stw	r3,0(sp)
  80400c:	180f883a 	mov	r7,r3
  804010:	023fffc4 	movi	r8,-1
  804014:	00c02034 	movhi	r3,128
  804018:	18cff204 	addi	r3,r3,16328
  80401c:	9809883a 	mov	r4,r19
  804020:	880d883a 	mov	r6,r17
  804024:	d9400104 	addi	r5,sp,4
  804028:	d8800615 	stw	r2,24(sp)
  80402c:	d8c00915 	stw	r3,36(sp)
  804030:	da00048d 	sth	r8,18(sp)
  804034:	d8800215 	stw	r2,8(sp)
  804038:	d8000d15 	stw	zero,52(sp)
  80403c:	d8001215 	stw	zero,72(sp)
  804040:	08061c40 	call	8061c4 <__svfscanf_r>
  804044:	dfc01a17 	ldw	ra,104(sp)
  804048:	dcc01917 	ldw	r19,100(sp)
  80404c:	dc401817 	ldw	r17,96(sp)
  804050:	dec01c04 	addi	sp,sp,112
  804054:	f800283a 	ret

00804058 <sscanf>:
  804058:	deffe404 	addi	sp,sp,-112
  80405c:	dfc01915 	stw	ra,100(sp)
  804060:	dc401815 	stw	r17,96(sp)
  804064:	d9801a15 	stw	r6,104(sp)
  804068:	d9c01b15 	stw	r7,108(sp)
  80406c:	00808104 	movi	r2,516
  804070:	2823883a 	mov	r17,r5
  804074:	d9000515 	stw	r4,20(sp)
  804078:	d9000115 	stw	r4,4(sp)
  80407c:	d880040d 	sth	r2,16(sp)
  804080:	08042280 	call	804228 <strlen>
  804084:	d8c01a04 	addi	r3,sp,104
  804088:	d8c00015 	stw	r3,0(sp)
  80408c:	00c02074 	movhi	r3,129
  804090:	18dc1404 	addi	r3,r3,28752
  804094:	19000017 	ldw	r4,0(r3)
  804098:	d9c00017 	ldw	r7,0(sp)
  80409c:	00c02034 	movhi	r3,128
  8040a0:	18cff204 	addi	r3,r3,16328
  8040a4:	023fffc4 	movi	r8,-1
  8040a8:	880d883a 	mov	r6,r17
  8040ac:	d9400104 	addi	r5,sp,4
  8040b0:	d8800615 	stw	r2,24(sp)
  8040b4:	d8c00915 	stw	r3,36(sp)
  8040b8:	da00048d 	sth	r8,18(sp)
  8040bc:	d8800215 	stw	r2,8(sp)
  8040c0:	d8000d15 	stw	zero,52(sp)
  8040c4:	d8001215 	stw	zero,72(sp)
  8040c8:	08061c40 	call	8061c4 <__svfscanf_r>
  8040cc:	dfc01917 	ldw	ra,100(sp)
  8040d0:	dc401817 	ldw	r17,96(sp)
  8040d4:	dec01c04 	addi	sp,sp,112
  8040d8:	f800283a 	ret

008040dc <__sclose>:
  8040dc:	2940038f 	ldh	r5,14(r5)
  8040e0:	0807af81 	jmpi	807af8 <_close_r>

008040e4 <__sseek>:
  8040e4:	defffe04 	addi	sp,sp,-8
  8040e8:	dc000015 	stw	r16,0(sp)
  8040ec:	2821883a 	mov	r16,r5
  8040f0:	2940038f 	ldh	r5,14(r5)
  8040f4:	dfc00115 	stw	ra,4(sp)
  8040f8:	08097700 	call	809770 <_lseek_r>
  8040fc:	1007883a 	mov	r3,r2
  804100:	00bfffc4 	movi	r2,-1
  804104:	18800926 	beq	r3,r2,80412c <__sseek+0x48>
  804108:	8080030b 	ldhu	r2,12(r16)
  80410c:	80c01415 	stw	r3,80(r16)
  804110:	10840014 	ori	r2,r2,4096
  804114:	8080030d 	sth	r2,12(r16)
  804118:	1805883a 	mov	r2,r3
  80411c:	dfc00117 	ldw	ra,4(sp)
  804120:	dc000017 	ldw	r16,0(sp)
  804124:	dec00204 	addi	sp,sp,8
  804128:	f800283a 	ret
  80412c:	8080030b 	ldhu	r2,12(r16)
  804130:	10bbffcc 	andi	r2,r2,61439
  804134:	8080030d 	sth	r2,12(r16)
  804138:	1805883a 	mov	r2,r3
  80413c:	dfc00117 	ldw	ra,4(sp)
  804140:	dc000017 	ldw	r16,0(sp)
  804144:	dec00204 	addi	sp,sp,8
  804148:	f800283a 	ret

0080414c <__swrite>:
  80414c:	2880030b 	ldhu	r2,12(r5)
  804150:	defffb04 	addi	sp,sp,-20
  804154:	dcc00315 	stw	r19,12(sp)
  804158:	1080400c 	andi	r2,r2,256
  80415c:	dc800215 	stw	r18,8(sp)
  804160:	dc400115 	stw	r17,4(sp)
  804164:	dc000015 	stw	r16,0(sp)
  804168:	3027883a 	mov	r19,r6
  80416c:	3825883a 	mov	r18,r7
  804170:	dfc00415 	stw	ra,16(sp)
  804174:	2821883a 	mov	r16,r5
  804178:	000d883a 	mov	r6,zero
  80417c:	01c00084 	movi	r7,2
  804180:	2023883a 	mov	r17,r4
  804184:	10000226 	beq	r2,zero,804190 <__swrite+0x44>
  804188:	2940038f 	ldh	r5,14(r5)
  80418c:	08097700 	call	809770 <_lseek_r>
  804190:	8080030b 	ldhu	r2,12(r16)
  804194:	8140038f 	ldh	r5,14(r16)
  804198:	8809883a 	mov	r4,r17
  80419c:	10bbffcc 	andi	r2,r2,61439
  8041a0:	980d883a 	mov	r6,r19
  8041a4:	900f883a 	mov	r7,r18
  8041a8:	8080030d 	sth	r2,12(r16)
  8041ac:	dfc00417 	ldw	ra,16(sp)
  8041b0:	dcc00317 	ldw	r19,12(sp)
  8041b4:	dc800217 	ldw	r18,8(sp)
  8041b8:	dc400117 	ldw	r17,4(sp)
  8041bc:	dc000017 	ldw	r16,0(sp)
  8041c0:	dec00504 	addi	sp,sp,20
  8041c4:	08079441 	jmpi	807944 <_write_r>

008041c8 <__sread>:
  8041c8:	defffe04 	addi	sp,sp,-8
  8041cc:	dc000015 	stw	r16,0(sp)
  8041d0:	2821883a 	mov	r16,r5
  8041d4:	2940038f 	ldh	r5,14(r5)
  8041d8:	dfc00115 	stw	ra,4(sp)
  8041dc:	080a8dc0 	call	80a8dc <_read_r>
  8041e0:	1007883a 	mov	r3,r2
  8041e4:	10000816 	blt	r2,zero,804208 <__sread+0x40>
  8041e8:	80801417 	ldw	r2,80(r16)
  8041ec:	10c5883a 	add	r2,r2,r3
  8041f0:	80801415 	stw	r2,80(r16)
  8041f4:	1805883a 	mov	r2,r3
  8041f8:	dfc00117 	ldw	ra,4(sp)
  8041fc:	dc000017 	ldw	r16,0(sp)
  804200:	dec00204 	addi	sp,sp,8
  804204:	f800283a 	ret
  804208:	8080030b 	ldhu	r2,12(r16)
  80420c:	10bbffcc 	andi	r2,r2,61439
  804210:	8080030d 	sth	r2,12(r16)
  804214:	1805883a 	mov	r2,r3
  804218:	dfc00117 	ldw	ra,4(sp)
  80421c:	dc000017 	ldw	r16,0(sp)
  804220:	dec00204 	addi	sp,sp,8
  804224:	f800283a 	ret

00804228 <strlen>:
  804228:	208000cc 	andi	r2,r4,3
  80422c:	2011883a 	mov	r8,r4
  804230:	1000161e 	bne	r2,zero,80428c <strlen+0x64>
  804234:	20c00017 	ldw	r3,0(r4)
  804238:	017fbff4 	movhi	r5,65279
  80423c:	297fbfc4 	addi	r5,r5,-257
  804240:	01e02074 	movhi	r7,32897
  804244:	39e02004 	addi	r7,r7,-32640
  804248:	1945883a 	add	r2,r3,r5
  80424c:	11c4703a 	and	r2,r2,r7
  804250:	00c6303a 	nor	r3,zero,r3
  804254:	1886703a 	and	r3,r3,r2
  804258:	18000c1e 	bne	r3,zero,80428c <strlen+0x64>
  80425c:	280d883a 	mov	r6,r5
  804260:	380b883a 	mov	r5,r7
  804264:	21000104 	addi	r4,r4,4
  804268:	20800017 	ldw	r2,0(r4)
  80426c:	1187883a 	add	r3,r2,r6
  804270:	1946703a 	and	r3,r3,r5
  804274:	0084303a 	nor	r2,zero,r2
  804278:	10c4703a 	and	r2,r2,r3
  80427c:	103ff926 	beq	r2,zero,804264 <strlen+0x3c>
  804280:	20800007 	ldb	r2,0(r4)
  804284:	10000326 	beq	r2,zero,804294 <strlen+0x6c>
  804288:	21000044 	addi	r4,r4,1
  80428c:	20800007 	ldb	r2,0(r4)
  804290:	103ffd1e 	bne	r2,zero,804288 <strlen+0x60>
  804294:	2205c83a 	sub	r2,r4,r8
  804298:	f800283a 	ret

0080429c <__sprint_r>:
  80429c:	30800217 	ldw	r2,8(r6)
  8042a0:	defffe04 	addi	sp,sp,-8
  8042a4:	dc000015 	stw	r16,0(sp)
  8042a8:	dfc00115 	stw	ra,4(sp)
  8042ac:	3021883a 	mov	r16,r6
  8042b0:	0007883a 	mov	r3,zero
  8042b4:	1000061e 	bne	r2,zero,8042d0 <__sprint_r+0x34>
  8042b8:	1805883a 	mov	r2,r3
  8042bc:	30000115 	stw	zero,4(r6)
  8042c0:	dfc00117 	ldw	ra,4(sp)
  8042c4:	dc000017 	ldw	r16,0(sp)
  8042c8:	dec00204 	addi	sp,sp,8
  8042cc:	f800283a 	ret
  8042d0:	08022c00 	call	8022c0 <__sfvwrite_r>
  8042d4:	1007883a 	mov	r3,r2
  8042d8:	1805883a 	mov	r2,r3
  8042dc:	80000115 	stw	zero,4(r16)
  8042e0:	80000215 	stw	zero,8(r16)
  8042e4:	dfc00117 	ldw	ra,4(sp)
  8042e8:	dc000017 	ldw	r16,0(sp)
  8042ec:	dec00204 	addi	sp,sp,8
  8042f0:	f800283a 	ret

008042f4 <___vfprintf_internal_r>:
  8042f4:	defea304 	addi	sp,sp,-1396
  8042f8:	dd815915 	stw	r22,1380(sp)
  8042fc:	dc015315 	stw	r16,1356(sp)
  804300:	d9c15215 	stw	r7,1352(sp)
  804304:	dfc15c15 	stw	ra,1392(sp)
  804308:	df015b15 	stw	fp,1388(sp)
  80430c:	ddc15a15 	stw	r23,1384(sp)
  804310:	dd415815 	stw	r21,1376(sp)
  804314:	dd015715 	stw	r20,1372(sp)
  804318:	dcc15615 	stw	r19,1368(sp)
  80431c:	dc815515 	stw	r18,1364(sp)
  804320:	dc415415 	stw	r17,1360(sp)
  804324:	282d883a 	mov	r22,r5
  804328:	3021883a 	mov	r16,r6
  80432c:	d9015015 	stw	r4,1344(sp)
  804330:	08096b40 	call	8096b4 <_localeconv_r>
  804334:	10800017 	ldw	r2,0(r2)
  804338:	d9c15217 	ldw	r7,1352(sp)
  80433c:	d8814a15 	stw	r2,1320(sp)
  804340:	d8815017 	ldw	r2,1344(sp)
  804344:	10000226 	beq	r2,zero,804350 <___vfprintf_internal_r+0x5c>
  804348:	10800e17 	ldw	r2,56(r2)
  80434c:	10020d26 	beq	r2,zero,804b84 <___vfprintf_internal_r+0x890>
  804350:	b080030b 	ldhu	r2,12(r22)
  804354:	1080020c 	andi	r2,r2,8
  804358:	10020e26 	beq	r2,zero,804b94 <___vfprintf_internal_r+0x8a0>
  80435c:	b0800417 	ldw	r2,16(r22)
  804360:	10020c26 	beq	r2,zero,804b94 <___vfprintf_internal_r+0x8a0>
  804364:	b200030b 	ldhu	r8,12(r22)
  804368:	00800284 	movi	r2,10
  80436c:	40c0068c 	andi	r3,r8,26
  804370:	18802f1e 	bne	r3,r2,804430 <___vfprintf_internal_r+0x13c>
  804374:	b080038f 	ldh	r2,14(r22)
  804378:	10002d16 	blt	r2,zero,804430 <___vfprintf_internal_r+0x13c>
  80437c:	b240038b 	ldhu	r9,14(r22)
  804380:	b2800717 	ldw	r10,28(r22)
  804384:	b2c00917 	ldw	r11,36(r22)
  804388:	d9015017 	ldw	r4,1344(sp)
  80438c:	dc402a04 	addi	r17,sp,168
  804390:	d8804104 	addi	r2,sp,260
  804394:	00c10004 	movi	r3,1024
  804398:	423fff4c 	andi	r8,r8,65533
  80439c:	800d883a 	mov	r6,r16
  8043a0:	880b883a 	mov	r5,r17
  8043a4:	da002d0d 	sth	r8,180(sp)
  8043a8:	da402d8d 	sth	r9,182(sp)
  8043ac:	da803115 	stw	r10,196(sp)
  8043b0:	dac03315 	stw	r11,204(sp)
  8043b4:	d8802e15 	stw	r2,184(sp)
  8043b8:	d8c02f15 	stw	r3,188(sp)
  8043bc:	d8802a15 	stw	r2,168(sp)
  8043c0:	d8c02c15 	stw	r3,176(sp)
  8043c4:	d8003015 	stw	zero,192(sp)
  8043c8:	08042f40 	call	8042f4 <___vfprintf_internal_r>
  8043cc:	d8814c15 	stw	r2,1328(sp)
  8043d0:	10000416 	blt	r2,zero,8043e4 <___vfprintf_internal_r+0xf0>
  8043d4:	d9015017 	ldw	r4,1344(sp)
  8043d8:	880b883a 	mov	r5,r17
  8043dc:	08011940 	call	801194 <_fflush_r>
  8043e0:	1002321e 	bne	r2,zero,804cac <___vfprintf_internal_r+0x9b8>
  8043e4:	d8802d0b 	ldhu	r2,180(sp)
  8043e8:	1080100c 	andi	r2,r2,64
  8043ec:	10000326 	beq	r2,zero,8043fc <___vfprintf_internal_r+0x108>
  8043f0:	b080030b 	ldhu	r2,12(r22)
  8043f4:	10801014 	ori	r2,r2,64
  8043f8:	b080030d 	sth	r2,12(r22)
  8043fc:	d8814c17 	ldw	r2,1328(sp)
  804400:	dfc15c17 	ldw	ra,1392(sp)
  804404:	df015b17 	ldw	fp,1388(sp)
  804408:	ddc15a17 	ldw	r23,1384(sp)
  80440c:	dd815917 	ldw	r22,1380(sp)
  804410:	dd415817 	ldw	r21,1376(sp)
  804414:	dd015717 	ldw	r20,1372(sp)
  804418:	dcc15617 	ldw	r19,1368(sp)
  80441c:	dc815517 	ldw	r18,1364(sp)
  804420:	dc415417 	ldw	r17,1360(sp)
  804424:	dc015317 	ldw	r16,1356(sp)
  804428:	dec15d04 	addi	sp,sp,1396
  80442c:	f800283a 	ret
  804430:	0005883a 	mov	r2,zero
  804434:	0007883a 	mov	r3,zero
  804438:	dd401a04 	addi	r21,sp,104
  80443c:	d8814315 	stw	r2,1292(sp)
  804440:	802f883a 	mov	r23,r16
  804444:	d8c14415 	stw	r3,1296(sp)
  804448:	d8014c15 	stw	zero,1328(sp)
  80444c:	d8014915 	stw	zero,1316(sp)
  804450:	d8014515 	stw	zero,1300(sp)
  804454:	d8014815 	stw	zero,1312(sp)
  804458:	dd400d15 	stw	r21,52(sp)
  80445c:	d8000f15 	stw	zero,60(sp)
  804460:	d8000e15 	stw	zero,56(sp)
  804464:	b8800007 	ldb	r2,0(r23)
  804468:	10001926 	beq	r2,zero,8044d0 <___vfprintf_internal_r+0x1dc>
  80446c:	00c00944 	movi	r3,37
  804470:	10c01726 	beq	r2,r3,8044d0 <___vfprintf_internal_r+0x1dc>
  804474:	b821883a 	mov	r16,r23
  804478:	00000106 	br	804480 <___vfprintf_internal_r+0x18c>
  80447c:	10c00326 	beq	r2,r3,80448c <___vfprintf_internal_r+0x198>
  804480:	84000044 	addi	r16,r16,1
  804484:	80800007 	ldb	r2,0(r16)
  804488:	103ffc1e 	bne	r2,zero,80447c <___vfprintf_internal_r+0x188>
  80448c:	85e7c83a 	sub	r19,r16,r23
  804490:	98000e26 	beq	r19,zero,8044cc <___vfprintf_internal_r+0x1d8>
  804494:	dc800f17 	ldw	r18,60(sp)
  804498:	dc400e17 	ldw	r17,56(sp)
  80449c:	008001c4 	movi	r2,7
  8044a0:	94e5883a 	add	r18,r18,r19
  8044a4:	8c400044 	addi	r17,r17,1
  8044a8:	adc00015 	stw	r23,0(r21)
  8044ac:	dc800f15 	stw	r18,60(sp)
  8044b0:	acc00115 	stw	r19,4(r21)
  8044b4:	dc400e15 	stw	r17,56(sp)
  8044b8:	14428b16 	blt	r2,r17,804ee8 <___vfprintf_internal_r+0xbf4>
  8044bc:	ad400204 	addi	r21,r21,8
  8044c0:	d9014c17 	ldw	r4,1328(sp)
  8044c4:	24c9883a 	add	r4,r4,r19
  8044c8:	d9014c15 	stw	r4,1328(sp)
  8044cc:	802f883a 	mov	r23,r16
  8044d0:	b8800007 	ldb	r2,0(r23)
  8044d4:	10013c26 	beq	r2,zero,8049c8 <___vfprintf_internal_r+0x6d4>
  8044d8:	bdc00044 	addi	r23,r23,1
  8044dc:	d8000405 	stb	zero,16(sp)
  8044e0:	b8c00007 	ldb	r3,0(r23)
  8044e4:	04ffffc4 	movi	r19,-1
  8044e8:	d8014d15 	stw	zero,1332(sp)
  8044ec:	d8014b15 	stw	zero,1324(sp)
  8044f0:	d8c14e15 	stw	r3,1336(sp)
  8044f4:	bdc00044 	addi	r23,r23,1
  8044f8:	d9414e17 	ldw	r5,1336(sp)
  8044fc:	00801604 	movi	r2,88
  804500:	28fff804 	addi	r3,r5,-32
  804504:	10c06036 	bltu	r2,r3,804688 <___vfprintf_internal_r+0x394>
  804508:	18c5883a 	add	r2,r3,r3
  80450c:	1085883a 	add	r2,r2,r2
  804510:	00c02034 	movhi	r3,128
  804514:	18d14904 	addi	r3,r3,17700
  804518:	10c5883a 	add	r2,r2,r3
  80451c:	11000017 	ldw	r4,0(r2)
  804520:	2000683a 	jmp	r4
  804524:	00805498 	cmpnei	r2,zero,338
  804528:	00804688 	cmpgei	r2,zero,282
  80452c:	00804688 	cmpgei	r2,zero,282
  804530:	00805484 	movi	r2,338
  804534:	00804688 	cmpgei	r2,zero,282
  804538:	00804688 	cmpgei	r2,zero,282
  80453c:	00804688 	cmpgei	r2,zero,282
  804540:	00804688 	cmpgei	r2,zero,282
  804544:	00804688 	cmpgei	r2,zero,282
  804548:	00804688 	cmpgei	r2,zero,282
  80454c:	00805264 	muli	r2,zero,329
  804550:	00805474 	movhi	r2,337
  804554:	00804688 	cmpgei	r2,zero,282
  804558:	0080527c 	xorhi	r2,zero,329
  80455c:	00805510 	cmplti	r2,zero,340
  804560:	00804688 	cmpgei	r2,zero,282
  804564:	008054fc 	xorhi	r2,zero,339
  804568:	008054c4 	movi	r2,339
  80456c:	008054c4 	movi	r2,339
  804570:	008054c4 	movi	r2,339
  804574:	008054c4 	movi	r2,339
  804578:	008054c4 	movi	r2,339
  80457c:	008054c4 	movi	r2,339
  804580:	008054c4 	movi	r2,339
  804584:	008054c4 	movi	r2,339
  804588:	008054c4 	movi	r2,339
  80458c:	00804688 	cmpgei	r2,zero,282
  804590:	00804688 	cmpgei	r2,zero,282
  804594:	00804688 	cmpgei	r2,zero,282
  804598:	00804688 	cmpgei	r2,zero,282
  80459c:	00804688 	cmpgei	r2,zero,282
  8045a0:	00804688 	cmpgei	r2,zero,282
  8045a4:	00804688 	cmpgei	r2,zero,282
  8045a8:	00804688 	cmpgei	r2,zero,282
  8045ac:	00804688 	cmpgei	r2,zero,282
  8045b0:	00804688 	cmpgei	r2,zero,282
  8045b4:	00804ce0 	cmpeqi	r2,zero,307
  8045b8:	0080534c 	andi	r2,zero,333
  8045bc:	00804688 	cmpgei	r2,zero,282
  8045c0:	0080534c 	andi	r2,zero,333
  8045c4:	00804688 	cmpgei	r2,zero,282
  8045c8:	00804688 	cmpgei	r2,zero,282
  8045cc:	00804688 	cmpgei	r2,zero,282
  8045d0:	00804688 	cmpgei	r2,zero,282
  8045d4:	008054b0 	cmpltui	r2,zero,338
  8045d8:	00804688 	cmpgei	r2,zero,282
  8045dc:	00804688 	cmpgei	r2,zero,282
  8045e0:	00804d94 	movui	r2,310
  8045e4:	00804688 	cmpgei	r2,zero,282
  8045e8:	00804688 	cmpgei	r2,zero,282
  8045ec:	00804688 	cmpgei	r2,zero,282
  8045f0:	00804688 	cmpgei	r2,zero,282
  8045f4:	00804688 	cmpgei	r2,zero,282
  8045f8:	00804de0 	cmpeqi	r2,zero,311
  8045fc:	00804688 	cmpgei	r2,zero,282
  804600:	00804688 	cmpgei	r2,zero,282
  804604:	00805400 	call	80540 <__reset-0x77fac0>
  804608:	00804688 	cmpgei	r2,zero,282
  80460c:	00804688 	cmpgei	r2,zero,282
  804610:	00804688 	cmpgei	r2,zero,282
  804614:	00804688 	cmpgei	r2,zero,282
  804618:	00804688 	cmpgei	r2,zero,282
  80461c:	00804688 	cmpgei	r2,zero,282
  804620:	00804688 	cmpgei	r2,zero,282
  804624:	00804688 	cmpgei	r2,zero,282
  804628:	00804688 	cmpgei	r2,zero,282
  80462c:	00804688 	cmpgei	r2,zero,282
  804630:	008053d4 	movui	r2,335
  804634:	00804cec 	andhi	r2,zero,307
  804638:	0080534c 	andi	r2,zero,333
  80463c:	0080534c 	andi	r2,zero,333
  804640:	0080534c 	andi	r2,zero,333
  804644:	00805338 	rdprs	r2,zero,332
  804648:	00804cec 	andhi	r2,zero,307
  80464c:	00804688 	cmpgei	r2,zero,282
  804650:	00804688 	cmpgei	r2,zero,282
  804654:	008052c0 	call	8052c <__reset-0x77fad4>
  804658:	00804688 	cmpgei	r2,zero,282
  80465c:	00805290 	cmplti	r2,zero,330
  804660:	00804da0 	cmpeqi	r2,zero,310
  804664:	008052f0 	cmpltui	r2,zero,331
  804668:	008052dc 	xori	r2,zero,331
  80466c:	00804688 	cmpgei	r2,zero,282
  804670:	0080556c 	andhi	r2,zero,341
  804674:	00804688 	cmpgei	r2,zero,282
  804678:	00804dec 	andhi	r2,zero,311
  80467c:	00804688 	cmpgei	r2,zero,282
  804680:	00804688 	cmpgei	r2,zero,282
  804684:	00805464 	muli	r2,zero,337
  804688:	d9014e17 	ldw	r4,1336(sp)
  80468c:	2000ce26 	beq	r4,zero,8049c8 <___vfprintf_internal_r+0x6d4>
  804690:	01400044 	movi	r5,1
  804694:	d9801004 	addi	r6,sp,64
  804698:	d9c14115 	stw	r7,1284(sp)
  80469c:	d9414615 	stw	r5,1304(sp)
  8046a0:	d9814215 	stw	r6,1288(sp)
  8046a4:	280f883a 	mov	r7,r5
  8046a8:	d9001005 	stb	r4,64(sp)
  8046ac:	d8000405 	stb	zero,16(sp)
  8046b0:	d8014715 	stw	zero,1308(sp)
  8046b4:	d8c14d17 	ldw	r3,1332(sp)
  8046b8:	1880008c 	andi	r2,r3,2
  8046bc:	1005003a 	cmpeq	r2,r2,zero
  8046c0:	d8815115 	stw	r2,1348(sp)
  8046c4:	1000031e 	bne	r2,zero,8046d4 <___vfprintf_internal_r+0x3e0>
  8046c8:	d9014617 	ldw	r4,1304(sp)
  8046cc:	21000084 	addi	r4,r4,2
  8046d0:	d9014615 	stw	r4,1304(sp)
  8046d4:	d9414d17 	ldw	r5,1332(sp)
  8046d8:	2940210c 	andi	r5,r5,132
  8046dc:	d9414f15 	stw	r5,1340(sp)
  8046e0:	28002d1e 	bne	r5,zero,804798 <___vfprintf_internal_r+0x4a4>
  8046e4:	d9814b17 	ldw	r6,1324(sp)
  8046e8:	d8814617 	ldw	r2,1304(sp)
  8046ec:	30a1c83a 	sub	r16,r6,r2
  8046f0:	0400290e 	bge	zero,r16,804798 <___vfprintf_internal_r+0x4a4>
  8046f4:	00800404 	movi	r2,16
  8046f8:	1404580e 	bge	r2,r16,80585c <___vfprintf_internal_r+0x1568>
  8046fc:	dc800f17 	ldw	r18,60(sp)
  804700:	dc400e17 	ldw	r17,56(sp)
  804704:	1027883a 	mov	r19,r2
  804708:	07002074 	movhi	fp,129
  80470c:	e7137e04 	addi	fp,fp,19960
  804710:	050001c4 	movi	r20,7
  804714:	00000306 	br	804724 <___vfprintf_internal_r+0x430>
  804718:	843ffc04 	addi	r16,r16,-16
  80471c:	ad400204 	addi	r21,r21,8
  804720:	9c00130e 	bge	r19,r16,804770 <___vfprintf_internal_r+0x47c>
  804724:	94800404 	addi	r18,r18,16
  804728:	8c400044 	addi	r17,r17,1
  80472c:	af000015 	stw	fp,0(r21)
  804730:	acc00115 	stw	r19,4(r21)
  804734:	dc800f15 	stw	r18,60(sp)
  804738:	dc400e15 	stw	r17,56(sp)
  80473c:	a47ff60e 	bge	r20,r17,804718 <___vfprintf_internal_r+0x424>
  804740:	d9015017 	ldw	r4,1344(sp)
  804744:	b00b883a 	mov	r5,r22
  804748:	d9800d04 	addi	r6,sp,52
  80474c:	d9c15215 	stw	r7,1352(sp)
  804750:	080429c0 	call	80429c <__sprint_r>
  804754:	d9c15217 	ldw	r7,1352(sp)
  804758:	10009e1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  80475c:	843ffc04 	addi	r16,r16,-16
  804760:	dc800f17 	ldw	r18,60(sp)
  804764:	dc400e17 	ldw	r17,56(sp)
  804768:	dd401a04 	addi	r21,sp,104
  80476c:	9c3fed16 	blt	r19,r16,804724 <___vfprintf_internal_r+0x430>
  804770:	9425883a 	add	r18,r18,r16
  804774:	8c400044 	addi	r17,r17,1
  804778:	008001c4 	movi	r2,7
  80477c:	af000015 	stw	fp,0(r21)
  804780:	ac000115 	stw	r16,4(r21)
  804784:	dc800f15 	stw	r18,60(sp)
  804788:	dc400e15 	stw	r17,56(sp)
  80478c:	1441f516 	blt	r2,r17,804f64 <___vfprintf_internal_r+0xc70>
  804790:	ad400204 	addi	r21,r21,8
  804794:	00000206 	br	8047a0 <___vfprintf_internal_r+0x4ac>
  804798:	dc800f17 	ldw	r18,60(sp)
  80479c:	dc400e17 	ldw	r17,56(sp)
  8047a0:	d8800407 	ldb	r2,16(sp)
  8047a4:	10000b26 	beq	r2,zero,8047d4 <___vfprintf_internal_r+0x4e0>
  8047a8:	00800044 	movi	r2,1
  8047ac:	94800044 	addi	r18,r18,1
  8047b0:	8c400044 	addi	r17,r17,1
  8047b4:	a8800115 	stw	r2,4(r21)
  8047b8:	d8c00404 	addi	r3,sp,16
  8047bc:	008001c4 	movi	r2,7
  8047c0:	a8c00015 	stw	r3,0(r21)
  8047c4:	dc800f15 	stw	r18,60(sp)
  8047c8:	dc400e15 	stw	r17,56(sp)
  8047cc:	1441da16 	blt	r2,r17,804f38 <___vfprintf_internal_r+0xc44>
  8047d0:	ad400204 	addi	r21,r21,8
  8047d4:	d9015117 	ldw	r4,1348(sp)
  8047d8:	20000b1e 	bne	r4,zero,804808 <___vfprintf_internal_r+0x514>
  8047dc:	d8800504 	addi	r2,sp,20
  8047e0:	94800084 	addi	r18,r18,2
  8047e4:	8c400044 	addi	r17,r17,1
  8047e8:	a8800015 	stw	r2,0(r21)
  8047ec:	00c00084 	movi	r3,2
  8047f0:	008001c4 	movi	r2,7
  8047f4:	a8c00115 	stw	r3,4(r21)
  8047f8:	dc800f15 	stw	r18,60(sp)
  8047fc:	dc400e15 	stw	r17,56(sp)
  804800:	1441c216 	blt	r2,r17,804f0c <___vfprintf_internal_r+0xc18>
  804804:	ad400204 	addi	r21,r21,8
  804808:	d9414f17 	ldw	r5,1340(sp)
  80480c:	00802004 	movi	r2,128
  804810:	2880b126 	beq	r5,r2,804ad8 <___vfprintf_internal_r+0x7e4>
  804814:	d8c14717 	ldw	r3,1308(sp)
  804818:	19e1c83a 	sub	r16,r3,r7
  80481c:	0400260e 	bge	zero,r16,8048b8 <___vfprintf_internal_r+0x5c4>
  804820:	00800404 	movi	r2,16
  804824:	1403c90e 	bge	r2,r16,80574c <___vfprintf_internal_r+0x1458>
  804828:	1027883a 	mov	r19,r2
  80482c:	07002074 	movhi	fp,129
  804830:	e7137a04 	addi	fp,fp,19944
  804834:	050001c4 	movi	r20,7
  804838:	00000306 	br	804848 <___vfprintf_internal_r+0x554>
  80483c:	843ffc04 	addi	r16,r16,-16
  804840:	ad400204 	addi	r21,r21,8
  804844:	9c00130e 	bge	r19,r16,804894 <___vfprintf_internal_r+0x5a0>
  804848:	94800404 	addi	r18,r18,16
  80484c:	8c400044 	addi	r17,r17,1
  804850:	af000015 	stw	fp,0(r21)
  804854:	acc00115 	stw	r19,4(r21)
  804858:	dc800f15 	stw	r18,60(sp)
  80485c:	dc400e15 	stw	r17,56(sp)
  804860:	a47ff60e 	bge	r20,r17,80483c <___vfprintf_internal_r+0x548>
  804864:	d9015017 	ldw	r4,1344(sp)
  804868:	b00b883a 	mov	r5,r22
  80486c:	d9800d04 	addi	r6,sp,52
  804870:	d9c15215 	stw	r7,1352(sp)
  804874:	080429c0 	call	80429c <__sprint_r>
  804878:	d9c15217 	ldw	r7,1352(sp)
  80487c:	1000551e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804880:	843ffc04 	addi	r16,r16,-16
  804884:	dc800f17 	ldw	r18,60(sp)
  804888:	dc400e17 	ldw	r17,56(sp)
  80488c:	dd401a04 	addi	r21,sp,104
  804890:	9c3fed16 	blt	r19,r16,804848 <___vfprintf_internal_r+0x554>
  804894:	9425883a 	add	r18,r18,r16
  804898:	8c400044 	addi	r17,r17,1
  80489c:	008001c4 	movi	r2,7
  8048a0:	af000015 	stw	fp,0(r21)
  8048a4:	ac000115 	stw	r16,4(r21)
  8048a8:	dc800f15 	stw	r18,60(sp)
  8048ac:	dc400e15 	stw	r17,56(sp)
  8048b0:	14418216 	blt	r2,r17,804ebc <___vfprintf_internal_r+0xbc8>
  8048b4:	ad400204 	addi	r21,r21,8
  8048b8:	d9014d17 	ldw	r4,1332(sp)
  8048bc:	2080400c 	andi	r2,r4,256
  8048c0:	10004a1e 	bne	r2,zero,8049ec <___vfprintf_internal_r+0x6f8>
  8048c4:	d9414217 	ldw	r5,1288(sp)
  8048c8:	91e5883a 	add	r18,r18,r7
  8048cc:	8c400044 	addi	r17,r17,1
  8048d0:	008001c4 	movi	r2,7
  8048d4:	a9400015 	stw	r5,0(r21)
  8048d8:	a9c00115 	stw	r7,4(r21)
  8048dc:	dc800f15 	stw	r18,60(sp)
  8048e0:	dc400e15 	stw	r17,56(sp)
  8048e4:	14416716 	blt	r2,r17,804e84 <___vfprintf_internal_r+0xb90>
  8048e8:	a8c00204 	addi	r3,r21,8
  8048ec:	d9814d17 	ldw	r6,1332(sp)
  8048f0:	3080010c 	andi	r2,r6,4
  8048f4:	10002826 	beq	r2,zero,804998 <___vfprintf_internal_r+0x6a4>
  8048f8:	d8814b17 	ldw	r2,1324(sp)
  8048fc:	d9014617 	ldw	r4,1304(sp)
  804900:	1121c83a 	sub	r16,r2,r4
  804904:	0400240e 	bge	zero,r16,804998 <___vfprintf_internal_r+0x6a4>
  804908:	00800404 	movi	r2,16
  80490c:	14044f0e 	bge	r2,r16,805a4c <___vfprintf_internal_r+0x1758>
  804910:	dc400e17 	ldw	r17,56(sp)
  804914:	1027883a 	mov	r19,r2
  804918:	07002074 	movhi	fp,129
  80491c:	e7137e04 	addi	fp,fp,19960
  804920:	050001c4 	movi	r20,7
  804924:	00000306 	br	804934 <___vfprintf_internal_r+0x640>
  804928:	843ffc04 	addi	r16,r16,-16
  80492c:	18c00204 	addi	r3,r3,8
  804930:	9c00110e 	bge	r19,r16,804978 <___vfprintf_internal_r+0x684>
  804934:	94800404 	addi	r18,r18,16
  804938:	8c400044 	addi	r17,r17,1
  80493c:	1f000015 	stw	fp,0(r3)
  804940:	1cc00115 	stw	r19,4(r3)
  804944:	dc800f15 	stw	r18,60(sp)
  804948:	dc400e15 	stw	r17,56(sp)
  80494c:	a47ff60e 	bge	r20,r17,804928 <___vfprintf_internal_r+0x634>
  804950:	d9015017 	ldw	r4,1344(sp)
  804954:	b00b883a 	mov	r5,r22
  804958:	d9800d04 	addi	r6,sp,52
  80495c:	080429c0 	call	80429c <__sprint_r>
  804960:	10001c1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804964:	843ffc04 	addi	r16,r16,-16
  804968:	dc800f17 	ldw	r18,60(sp)
  80496c:	dc400e17 	ldw	r17,56(sp)
  804970:	d8c01a04 	addi	r3,sp,104
  804974:	9c3fef16 	blt	r19,r16,804934 <___vfprintf_internal_r+0x640>
  804978:	9425883a 	add	r18,r18,r16
  80497c:	8c400044 	addi	r17,r17,1
  804980:	008001c4 	movi	r2,7
  804984:	1f000015 	stw	fp,0(r3)
  804988:	1c000115 	stw	r16,4(r3)
  80498c:	dc800f15 	stw	r18,60(sp)
  804990:	dc400e15 	stw	r17,56(sp)
  804994:	1440cb16 	blt	r2,r17,804cc4 <___vfprintf_internal_r+0x9d0>
  804998:	d8814b17 	ldw	r2,1324(sp)
  80499c:	d9414617 	ldw	r5,1304(sp)
  8049a0:	1140010e 	bge	r2,r5,8049a8 <___vfprintf_internal_r+0x6b4>
  8049a4:	2805883a 	mov	r2,r5
  8049a8:	d9814c17 	ldw	r6,1328(sp)
  8049ac:	308d883a 	add	r6,r6,r2
  8049b0:	d9814c15 	stw	r6,1328(sp)
  8049b4:	90013b1e 	bne	r18,zero,804ea4 <___vfprintf_internal_r+0xbb0>
  8049b8:	d9c14117 	ldw	r7,1284(sp)
  8049bc:	dd401a04 	addi	r21,sp,104
  8049c0:	d8000e15 	stw	zero,56(sp)
  8049c4:	003ea706 	br	804464 <___vfprintf_internal_r+0x170>
  8049c8:	d8800f17 	ldw	r2,60(sp)
  8049cc:	10053f1e 	bne	r2,zero,805ecc <___vfprintf_internal_r+0x1bd8>
  8049d0:	d8000e15 	stw	zero,56(sp)
  8049d4:	b080030b 	ldhu	r2,12(r22)
  8049d8:	1080100c 	andi	r2,r2,64
  8049dc:	103e8726 	beq	r2,zero,8043fc <___vfprintf_internal_r+0x108>
  8049e0:	00bfffc4 	movi	r2,-1
  8049e4:	d8814c15 	stw	r2,1328(sp)
  8049e8:	003e8406 	br	8043fc <___vfprintf_internal_r+0x108>
  8049ec:	d9814e17 	ldw	r6,1336(sp)
  8049f0:	00801944 	movi	r2,101
  8049f4:	11806e16 	blt	r2,r6,804bb0 <___vfprintf_internal_r+0x8bc>
  8049f8:	d9414817 	ldw	r5,1312(sp)
  8049fc:	00c00044 	movi	r3,1
  804a00:	1943430e 	bge	r3,r5,805710 <___vfprintf_internal_r+0x141c>
  804a04:	d8814217 	ldw	r2,1288(sp)
  804a08:	94800044 	addi	r18,r18,1
  804a0c:	8c400044 	addi	r17,r17,1
  804a10:	a8800015 	stw	r2,0(r21)
  804a14:	008001c4 	movi	r2,7
  804a18:	a8c00115 	stw	r3,4(r21)
  804a1c:	dc800f15 	stw	r18,60(sp)
  804a20:	dc400e15 	stw	r17,56(sp)
  804a24:	1441ca16 	blt	r2,r17,805150 <___vfprintf_internal_r+0xe5c>
  804a28:	a8c00204 	addi	r3,r21,8
  804a2c:	d9014a17 	ldw	r4,1320(sp)
  804a30:	00800044 	movi	r2,1
  804a34:	94800044 	addi	r18,r18,1
  804a38:	8c400044 	addi	r17,r17,1
  804a3c:	18800115 	stw	r2,4(r3)
  804a40:	008001c4 	movi	r2,7
  804a44:	19000015 	stw	r4,0(r3)
  804a48:	dc800f15 	stw	r18,60(sp)
  804a4c:	dc400e15 	stw	r17,56(sp)
  804a50:	1441b616 	blt	r2,r17,80512c <___vfprintf_internal_r+0xe38>
  804a54:	1cc00204 	addi	r19,r3,8
  804a58:	d9014317 	ldw	r4,1292(sp)
  804a5c:	d9414417 	ldw	r5,1296(sp)
  804a60:	000d883a 	mov	r6,zero
  804a64:	000f883a 	mov	r7,zero
  804a68:	080f5200 	call	80f520 <__nedf2>
  804a6c:	10017426 	beq	r2,zero,805040 <___vfprintf_internal_r+0xd4c>
  804a70:	d9414817 	ldw	r5,1312(sp)
  804a74:	d9814217 	ldw	r6,1288(sp)
  804a78:	8c400044 	addi	r17,r17,1
  804a7c:	2c85883a 	add	r2,r5,r18
  804a80:	14bfffc4 	addi	r18,r2,-1
  804a84:	28bfffc4 	addi	r2,r5,-1
  804a88:	30c00044 	addi	r3,r6,1
  804a8c:	98800115 	stw	r2,4(r19)
  804a90:	008001c4 	movi	r2,7
  804a94:	98c00015 	stw	r3,0(r19)
  804a98:	dc800f15 	stw	r18,60(sp)
  804a9c:	dc400e15 	stw	r17,56(sp)
  804aa0:	14418e16 	blt	r2,r17,8050dc <___vfprintf_internal_r+0xde8>
  804aa4:	9cc00204 	addi	r19,r19,8
  804aa8:	d9414917 	ldw	r5,1316(sp)
  804aac:	d8800904 	addi	r2,sp,36
  804ab0:	8c400044 	addi	r17,r17,1
  804ab4:	9165883a 	add	r18,r18,r5
  804ab8:	98800015 	stw	r2,0(r19)
  804abc:	008001c4 	movi	r2,7
  804ac0:	99400115 	stw	r5,4(r19)
  804ac4:	dc800f15 	stw	r18,60(sp)
  804ac8:	dc400e15 	stw	r17,56(sp)
  804acc:	1440ed16 	blt	r2,r17,804e84 <___vfprintf_internal_r+0xb90>
  804ad0:	98c00204 	addi	r3,r19,8
  804ad4:	003f8506 	br	8048ec <___vfprintf_internal_r+0x5f8>
  804ad8:	d9814b17 	ldw	r6,1324(sp)
  804adc:	d8814617 	ldw	r2,1304(sp)
  804ae0:	30a1c83a 	sub	r16,r6,r2
  804ae4:	043f4b0e 	bge	zero,r16,804814 <___vfprintf_internal_r+0x520>
  804ae8:	00800404 	movi	r2,16
  804aec:	1404340e 	bge	r2,r16,805bc0 <___vfprintf_internal_r+0x18cc>
  804af0:	1027883a 	mov	r19,r2
  804af4:	07002074 	movhi	fp,129
  804af8:	e7137a04 	addi	fp,fp,19944
  804afc:	050001c4 	movi	r20,7
  804b00:	00000306 	br	804b10 <___vfprintf_internal_r+0x81c>
  804b04:	843ffc04 	addi	r16,r16,-16
  804b08:	ad400204 	addi	r21,r21,8
  804b0c:	9c00130e 	bge	r19,r16,804b5c <___vfprintf_internal_r+0x868>
  804b10:	94800404 	addi	r18,r18,16
  804b14:	8c400044 	addi	r17,r17,1
  804b18:	af000015 	stw	fp,0(r21)
  804b1c:	acc00115 	stw	r19,4(r21)
  804b20:	dc800f15 	stw	r18,60(sp)
  804b24:	dc400e15 	stw	r17,56(sp)
  804b28:	a47ff60e 	bge	r20,r17,804b04 <___vfprintf_internal_r+0x810>
  804b2c:	d9015017 	ldw	r4,1344(sp)
  804b30:	b00b883a 	mov	r5,r22
  804b34:	d9800d04 	addi	r6,sp,52
  804b38:	d9c15215 	stw	r7,1352(sp)
  804b3c:	080429c0 	call	80429c <__sprint_r>
  804b40:	d9c15217 	ldw	r7,1352(sp)
  804b44:	103fa31e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804b48:	843ffc04 	addi	r16,r16,-16
  804b4c:	dc800f17 	ldw	r18,60(sp)
  804b50:	dc400e17 	ldw	r17,56(sp)
  804b54:	dd401a04 	addi	r21,sp,104
  804b58:	9c3fed16 	blt	r19,r16,804b10 <___vfprintf_internal_r+0x81c>
  804b5c:	9425883a 	add	r18,r18,r16
  804b60:	8c400044 	addi	r17,r17,1
  804b64:	008001c4 	movi	r2,7
  804b68:	af000015 	stw	fp,0(r21)
  804b6c:	ac000115 	stw	r16,4(r21)
  804b70:	dc800f15 	stw	r18,60(sp)
  804b74:	dc400e15 	stw	r17,56(sp)
  804b78:	14416116 	blt	r2,r17,805100 <___vfprintf_internal_r+0xe0c>
  804b7c:	ad400204 	addi	r21,r21,8
  804b80:	003f2406 	br	804814 <___vfprintf_internal_r+0x520>
  804b84:	d9015017 	ldw	r4,1344(sp)
  804b88:	08015540 	call	801554 <__sinit>
  804b8c:	d9c15217 	ldw	r7,1352(sp)
  804b90:	003def06 	br	804350 <___vfprintf_internal_r+0x5c>
  804b94:	d9015017 	ldw	r4,1344(sp)
  804b98:	b00b883a 	mov	r5,r22
  804b9c:	d9c15215 	stw	r7,1352(sp)
  804ba0:	08079bc0 	call	8079bc <__swsetup_r>
  804ba4:	d9c15217 	ldw	r7,1352(sp)
  804ba8:	103dee26 	beq	r2,zero,804364 <___vfprintf_internal_r+0x70>
  804bac:	003f8c06 	br	8049e0 <___vfprintf_internal_r+0x6ec>
  804bb0:	d9014317 	ldw	r4,1292(sp)
  804bb4:	d9414417 	ldw	r5,1296(sp)
  804bb8:	000d883a 	mov	r6,zero
  804bbc:	000f883a 	mov	r7,zero
  804bc0:	080f4980 	call	80f498 <__eqdf2>
  804bc4:	1000f21e 	bne	r2,zero,804f90 <___vfprintf_internal_r+0xc9c>
  804bc8:	00802074 	movhi	r2,129
  804bcc:	10937904 	addi	r2,r2,19940
  804bd0:	94800044 	addi	r18,r18,1
  804bd4:	8c400044 	addi	r17,r17,1
  804bd8:	a8800015 	stw	r2,0(r21)
  804bdc:	00c00044 	movi	r3,1
  804be0:	008001c4 	movi	r2,7
  804be4:	a8c00115 	stw	r3,4(r21)
  804be8:	dc800f15 	stw	r18,60(sp)
  804bec:	dc400e15 	stw	r17,56(sp)
  804bf0:	1442fa16 	blt	r2,r17,8057dc <___vfprintf_internal_r+0x14e8>
  804bf4:	a8c00204 	addi	r3,r21,8
  804bf8:	d8800617 	ldw	r2,24(sp)
  804bfc:	d9014817 	ldw	r4,1312(sp)
  804c00:	11015c0e 	bge	r2,r4,805174 <___vfprintf_internal_r+0xe80>
  804c04:	dc400e17 	ldw	r17,56(sp)
  804c08:	d9814a17 	ldw	r6,1320(sp)
  804c0c:	00800044 	movi	r2,1
  804c10:	94800044 	addi	r18,r18,1
  804c14:	8c400044 	addi	r17,r17,1
  804c18:	18800115 	stw	r2,4(r3)
  804c1c:	008001c4 	movi	r2,7
  804c20:	19800015 	stw	r6,0(r3)
  804c24:	dc800f15 	stw	r18,60(sp)
  804c28:	dc400e15 	stw	r17,56(sp)
  804c2c:	14431016 	blt	r2,r17,805870 <___vfprintf_internal_r+0x157c>
  804c30:	18c00204 	addi	r3,r3,8
  804c34:	d8814817 	ldw	r2,1312(sp)
  804c38:	143fffc4 	addi	r16,r2,-1
  804c3c:	043f2b0e 	bge	zero,r16,8048ec <___vfprintf_internal_r+0x5f8>
  804c40:	00800404 	movi	r2,16
  804c44:	1402a20e 	bge	r2,r16,8056d0 <___vfprintf_internal_r+0x13dc>
  804c48:	dc400e17 	ldw	r17,56(sp)
  804c4c:	1027883a 	mov	r19,r2
  804c50:	07002074 	movhi	fp,129
  804c54:	e7137a04 	addi	fp,fp,19944
  804c58:	050001c4 	movi	r20,7
  804c5c:	00000306 	br	804c6c <___vfprintf_internal_r+0x978>
  804c60:	18c00204 	addi	r3,r3,8
  804c64:	843ffc04 	addi	r16,r16,-16
  804c68:	9c029c0e 	bge	r19,r16,8056dc <___vfprintf_internal_r+0x13e8>
  804c6c:	94800404 	addi	r18,r18,16
  804c70:	8c400044 	addi	r17,r17,1
  804c74:	1f000015 	stw	fp,0(r3)
  804c78:	1cc00115 	stw	r19,4(r3)
  804c7c:	dc800f15 	stw	r18,60(sp)
  804c80:	dc400e15 	stw	r17,56(sp)
  804c84:	a47ff60e 	bge	r20,r17,804c60 <___vfprintf_internal_r+0x96c>
  804c88:	d9015017 	ldw	r4,1344(sp)
  804c8c:	b00b883a 	mov	r5,r22
  804c90:	d9800d04 	addi	r6,sp,52
  804c94:	080429c0 	call	80429c <__sprint_r>
  804c98:	103f4e1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804c9c:	dc800f17 	ldw	r18,60(sp)
  804ca0:	dc400e17 	ldw	r17,56(sp)
  804ca4:	d8c01a04 	addi	r3,sp,104
  804ca8:	003fee06 	br	804c64 <___vfprintf_internal_r+0x970>
  804cac:	d8802d0b 	ldhu	r2,180(sp)
  804cb0:	00ffffc4 	movi	r3,-1
  804cb4:	d8c14c15 	stw	r3,1328(sp)
  804cb8:	1080100c 	andi	r2,r2,64
  804cbc:	103dcc1e 	bne	r2,zero,8043f0 <___vfprintf_internal_r+0xfc>
  804cc0:	003dce06 	br	8043fc <___vfprintf_internal_r+0x108>
  804cc4:	d9015017 	ldw	r4,1344(sp)
  804cc8:	b00b883a 	mov	r5,r22
  804ccc:	d9800d04 	addi	r6,sp,52
  804cd0:	080429c0 	call	80429c <__sprint_r>
  804cd4:	103f3f1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804cd8:	dc800f17 	ldw	r18,60(sp)
  804cdc:	003f2e06 	br	804998 <___vfprintf_internal_r+0x6a4>
  804ce0:	d9414d17 	ldw	r5,1332(sp)
  804ce4:	29400414 	ori	r5,r5,16
  804ce8:	d9414d15 	stw	r5,1332(sp)
  804cec:	d9814d17 	ldw	r6,1332(sp)
  804cf0:	3080080c 	andi	r2,r6,32
  804cf4:	10014f1e 	bne	r2,zero,805234 <___vfprintf_internal_r+0xf40>
  804cf8:	d8c14d17 	ldw	r3,1332(sp)
  804cfc:	1880040c 	andi	r2,r3,16
  804d00:	1002ea1e 	bne	r2,zero,8058ac <___vfprintf_internal_r+0x15b8>
  804d04:	d9014d17 	ldw	r4,1332(sp)
  804d08:	2080100c 	andi	r2,r4,64
  804d0c:	1002e726 	beq	r2,zero,8058ac <___vfprintf_internal_r+0x15b8>
  804d10:	3880000f 	ldh	r2,0(r7)
  804d14:	39c00104 	addi	r7,r7,4
  804d18:	d9c14115 	stw	r7,1284(sp)
  804d1c:	1023d7fa 	srai	r17,r2,31
  804d20:	1021883a 	mov	r16,r2
  804d24:	88037216 	blt	r17,zero,805af0 <___vfprintf_internal_r+0x17fc>
  804d28:	01000044 	movi	r4,1
  804d2c:	98000416 	blt	r19,zero,804d40 <___vfprintf_internal_r+0xa4c>
  804d30:	d8c14d17 	ldw	r3,1332(sp)
  804d34:	00bfdfc4 	movi	r2,-129
  804d38:	1886703a 	and	r3,r3,r2
  804d3c:	d8c14d15 	stw	r3,1332(sp)
  804d40:	8444b03a 	or	r2,r16,r17
  804d44:	1002261e 	bne	r2,zero,8055e0 <___vfprintf_internal_r+0x12ec>
  804d48:	9802251e 	bne	r19,zero,8055e0 <___vfprintf_internal_r+0x12ec>
  804d4c:	20803fcc 	andi	r2,r4,255
  804d50:	10029b26 	beq	r2,zero,8057c0 <___vfprintf_internal_r+0x14cc>
  804d54:	d8c01a04 	addi	r3,sp,104
  804d58:	dd001004 	addi	r20,sp,64
  804d5c:	d8c14215 	stw	r3,1288(sp)
  804d60:	d8c14217 	ldw	r3,1288(sp)
  804d64:	dcc14615 	stw	r19,1304(sp)
  804d68:	a0c5c83a 	sub	r2,r20,r3
  804d6c:	11c00a04 	addi	r7,r2,40
  804d70:	99c0010e 	bge	r19,r7,804d78 <___vfprintf_internal_r+0xa84>
  804d74:	d9c14615 	stw	r7,1304(sp)
  804d78:	dcc14715 	stw	r19,1308(sp)
  804d7c:	d8800407 	ldb	r2,16(sp)
  804d80:	103e4c26 	beq	r2,zero,8046b4 <___vfprintf_internal_r+0x3c0>
  804d84:	d8814617 	ldw	r2,1304(sp)
  804d88:	10800044 	addi	r2,r2,1
  804d8c:	d8814615 	stw	r2,1304(sp)
  804d90:	003e4806 	br	8046b4 <___vfprintf_internal_r+0x3c0>
  804d94:	d9814d17 	ldw	r6,1332(sp)
  804d98:	31800414 	ori	r6,r6,16
  804d9c:	d9814d15 	stw	r6,1332(sp)
  804da0:	d8c14d17 	ldw	r3,1332(sp)
  804da4:	1880080c 	andi	r2,r3,32
  804da8:	1001271e 	bne	r2,zero,805248 <___vfprintf_internal_r+0xf54>
  804dac:	d9414d17 	ldw	r5,1332(sp)
  804db0:	2880040c 	andi	r2,r5,16
  804db4:	1002b61e 	bne	r2,zero,805890 <___vfprintf_internal_r+0x159c>
  804db8:	d9814d17 	ldw	r6,1332(sp)
  804dbc:	3080100c 	andi	r2,r6,64
  804dc0:	1002b326 	beq	r2,zero,805890 <___vfprintf_internal_r+0x159c>
  804dc4:	3c00000b 	ldhu	r16,0(r7)
  804dc8:	0009883a 	mov	r4,zero
  804dcc:	39c00104 	addi	r7,r7,4
  804dd0:	0023883a 	mov	r17,zero
  804dd4:	d9c14115 	stw	r7,1284(sp)
  804dd8:	d8000405 	stb	zero,16(sp)
  804ddc:	003fd306 	br	804d2c <___vfprintf_internal_r+0xa38>
  804de0:	d9014d17 	ldw	r4,1332(sp)
  804de4:	21000414 	ori	r4,r4,16
  804de8:	d9014d15 	stw	r4,1332(sp)
  804dec:	d9414d17 	ldw	r5,1332(sp)
  804df0:	2880080c 	andi	r2,r5,32
  804df4:	1001081e 	bne	r2,zero,805218 <___vfprintf_internal_r+0xf24>
  804df8:	d8c14d17 	ldw	r3,1332(sp)
  804dfc:	1880040c 	andi	r2,r3,16
  804e00:	1002b01e 	bne	r2,zero,8058c4 <___vfprintf_internal_r+0x15d0>
  804e04:	d9014d17 	ldw	r4,1332(sp)
  804e08:	2080100c 	andi	r2,r4,64
  804e0c:	1002ad26 	beq	r2,zero,8058c4 <___vfprintf_internal_r+0x15d0>
  804e10:	3c00000b 	ldhu	r16,0(r7)
  804e14:	01000044 	movi	r4,1
  804e18:	39c00104 	addi	r7,r7,4
  804e1c:	0023883a 	mov	r17,zero
  804e20:	d9c14115 	stw	r7,1284(sp)
  804e24:	d8000405 	stb	zero,16(sp)
  804e28:	003fc006 	br	804d2c <___vfprintf_internal_r+0xa38>
  804e2c:	d9015017 	ldw	r4,1344(sp)
  804e30:	b00b883a 	mov	r5,r22
  804e34:	d9800d04 	addi	r6,sp,52
  804e38:	080429c0 	call	80429c <__sprint_r>
  804e3c:	103ee51e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804e40:	dc800f17 	ldw	r18,60(sp)
  804e44:	d8c01a04 	addi	r3,sp,104
  804e48:	d9814d17 	ldw	r6,1332(sp)
  804e4c:	3080004c 	andi	r2,r6,1
  804e50:	1005003a 	cmpeq	r2,r2,zero
  804e54:	103ea51e 	bne	r2,zero,8048ec <___vfprintf_internal_r+0x5f8>
  804e58:	00800044 	movi	r2,1
  804e5c:	dc400e17 	ldw	r17,56(sp)
  804e60:	18800115 	stw	r2,4(r3)
  804e64:	d8814a17 	ldw	r2,1320(sp)
  804e68:	94800044 	addi	r18,r18,1
  804e6c:	8c400044 	addi	r17,r17,1
  804e70:	18800015 	stw	r2,0(r3)
  804e74:	008001c4 	movi	r2,7
  804e78:	dc800f15 	stw	r18,60(sp)
  804e7c:	dc400e15 	stw	r17,56(sp)
  804e80:	14421e0e 	bge	r2,r17,8056fc <___vfprintf_internal_r+0x1408>
  804e84:	d9015017 	ldw	r4,1344(sp)
  804e88:	b00b883a 	mov	r5,r22
  804e8c:	d9800d04 	addi	r6,sp,52
  804e90:	080429c0 	call	80429c <__sprint_r>
  804e94:	103ecf1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804e98:	dc800f17 	ldw	r18,60(sp)
  804e9c:	d8c01a04 	addi	r3,sp,104
  804ea0:	003e9206 	br	8048ec <___vfprintf_internal_r+0x5f8>
  804ea4:	d9015017 	ldw	r4,1344(sp)
  804ea8:	b00b883a 	mov	r5,r22
  804eac:	d9800d04 	addi	r6,sp,52
  804eb0:	080429c0 	call	80429c <__sprint_r>
  804eb4:	103ec026 	beq	r2,zero,8049b8 <___vfprintf_internal_r+0x6c4>
  804eb8:	003ec606 	br	8049d4 <___vfprintf_internal_r+0x6e0>
  804ebc:	d9015017 	ldw	r4,1344(sp)
  804ec0:	b00b883a 	mov	r5,r22
  804ec4:	d9800d04 	addi	r6,sp,52
  804ec8:	d9c15215 	stw	r7,1352(sp)
  804ecc:	080429c0 	call	80429c <__sprint_r>
  804ed0:	d9c15217 	ldw	r7,1352(sp)
  804ed4:	103ebf1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804ed8:	dc800f17 	ldw	r18,60(sp)
  804edc:	dc400e17 	ldw	r17,56(sp)
  804ee0:	dd401a04 	addi	r21,sp,104
  804ee4:	003e7406 	br	8048b8 <___vfprintf_internal_r+0x5c4>
  804ee8:	d9015017 	ldw	r4,1344(sp)
  804eec:	b00b883a 	mov	r5,r22
  804ef0:	d9800d04 	addi	r6,sp,52
  804ef4:	d9c15215 	stw	r7,1352(sp)
  804ef8:	080429c0 	call	80429c <__sprint_r>
  804efc:	d9c15217 	ldw	r7,1352(sp)
  804f00:	103eb41e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804f04:	dd401a04 	addi	r21,sp,104
  804f08:	003d6d06 	br	8044c0 <___vfprintf_internal_r+0x1cc>
  804f0c:	d9015017 	ldw	r4,1344(sp)
  804f10:	b00b883a 	mov	r5,r22
  804f14:	d9800d04 	addi	r6,sp,52
  804f18:	d9c15215 	stw	r7,1352(sp)
  804f1c:	080429c0 	call	80429c <__sprint_r>
  804f20:	d9c15217 	ldw	r7,1352(sp)
  804f24:	103eab1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804f28:	dc800f17 	ldw	r18,60(sp)
  804f2c:	dc400e17 	ldw	r17,56(sp)
  804f30:	dd401a04 	addi	r21,sp,104
  804f34:	003e3406 	br	804808 <___vfprintf_internal_r+0x514>
  804f38:	d9015017 	ldw	r4,1344(sp)
  804f3c:	b00b883a 	mov	r5,r22
  804f40:	d9800d04 	addi	r6,sp,52
  804f44:	d9c15215 	stw	r7,1352(sp)
  804f48:	080429c0 	call	80429c <__sprint_r>
  804f4c:	d9c15217 	ldw	r7,1352(sp)
  804f50:	103ea01e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804f54:	dc800f17 	ldw	r18,60(sp)
  804f58:	dc400e17 	ldw	r17,56(sp)
  804f5c:	dd401a04 	addi	r21,sp,104
  804f60:	003e1c06 	br	8047d4 <___vfprintf_internal_r+0x4e0>
  804f64:	d9015017 	ldw	r4,1344(sp)
  804f68:	b00b883a 	mov	r5,r22
  804f6c:	d9800d04 	addi	r6,sp,52
  804f70:	d9c15215 	stw	r7,1352(sp)
  804f74:	080429c0 	call	80429c <__sprint_r>
  804f78:	d9c15217 	ldw	r7,1352(sp)
  804f7c:	103e951e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  804f80:	dc800f17 	ldw	r18,60(sp)
  804f84:	dc400e17 	ldw	r17,56(sp)
  804f88:	dd401a04 	addi	r21,sp,104
  804f8c:	003e0406 	br	8047a0 <___vfprintf_internal_r+0x4ac>
  804f90:	d9000617 	ldw	r4,24(sp)
  804f94:	0102520e 	bge	zero,r4,8058e0 <___vfprintf_internal_r+0x15ec>
  804f98:	d9814817 	ldw	r6,1312(sp)
  804f9c:	21807a16 	blt	r4,r6,805188 <___vfprintf_internal_r+0xe94>
  804fa0:	d8814217 	ldw	r2,1288(sp)
  804fa4:	91a5883a 	add	r18,r18,r6
  804fa8:	8c400044 	addi	r17,r17,1
  804fac:	a8800015 	stw	r2,0(r21)
  804fb0:	008001c4 	movi	r2,7
  804fb4:	a9800115 	stw	r6,4(r21)
  804fb8:	dc800f15 	stw	r18,60(sp)
  804fbc:	dc400e15 	stw	r17,56(sp)
  804fc0:	1442f616 	blt	r2,r17,805b9c <___vfprintf_internal_r+0x18a8>
  804fc4:	a8c00204 	addi	r3,r21,8
  804fc8:	d9414817 	ldw	r5,1312(sp)
  804fcc:	2161c83a 	sub	r16,r4,r5
  804fd0:	043f9d0e 	bge	zero,r16,804e48 <___vfprintf_internal_r+0xb54>
  804fd4:	00800404 	movi	r2,16
  804fd8:	1402130e 	bge	r2,r16,805828 <___vfprintf_internal_r+0x1534>
  804fdc:	dc400e17 	ldw	r17,56(sp)
  804fe0:	1027883a 	mov	r19,r2
  804fe4:	07002074 	movhi	fp,129
  804fe8:	e7137a04 	addi	fp,fp,19944
  804fec:	050001c4 	movi	r20,7
  804ff0:	00000306 	br	805000 <___vfprintf_internal_r+0xd0c>
  804ff4:	18c00204 	addi	r3,r3,8
  804ff8:	843ffc04 	addi	r16,r16,-16
  804ffc:	9c020d0e 	bge	r19,r16,805834 <___vfprintf_internal_r+0x1540>
  805000:	94800404 	addi	r18,r18,16
  805004:	8c400044 	addi	r17,r17,1
  805008:	1f000015 	stw	fp,0(r3)
  80500c:	1cc00115 	stw	r19,4(r3)
  805010:	dc800f15 	stw	r18,60(sp)
  805014:	dc400e15 	stw	r17,56(sp)
  805018:	a47ff60e 	bge	r20,r17,804ff4 <___vfprintf_internal_r+0xd00>
  80501c:	d9015017 	ldw	r4,1344(sp)
  805020:	b00b883a 	mov	r5,r22
  805024:	d9800d04 	addi	r6,sp,52
  805028:	080429c0 	call	80429c <__sprint_r>
  80502c:	103e691e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805030:	dc800f17 	ldw	r18,60(sp)
  805034:	dc400e17 	ldw	r17,56(sp)
  805038:	d8c01a04 	addi	r3,sp,104
  80503c:	003fee06 	br	804ff8 <___vfprintf_internal_r+0xd04>
  805040:	d8814817 	ldw	r2,1312(sp)
  805044:	143fffc4 	addi	r16,r2,-1
  805048:	043e970e 	bge	zero,r16,804aa8 <___vfprintf_internal_r+0x7b4>
  80504c:	00800404 	movi	r2,16
  805050:	1400180e 	bge	r2,r16,8050b4 <___vfprintf_internal_r+0xdc0>
  805054:	1029883a 	mov	r20,r2
  805058:	07002074 	movhi	fp,129
  80505c:	e7137a04 	addi	fp,fp,19944
  805060:	054001c4 	movi	r21,7
  805064:	00000306 	br	805074 <___vfprintf_internal_r+0xd80>
  805068:	9cc00204 	addi	r19,r19,8
  80506c:	843ffc04 	addi	r16,r16,-16
  805070:	a400120e 	bge	r20,r16,8050bc <___vfprintf_internal_r+0xdc8>
  805074:	94800404 	addi	r18,r18,16
  805078:	8c400044 	addi	r17,r17,1
  80507c:	9f000015 	stw	fp,0(r19)
  805080:	9d000115 	stw	r20,4(r19)
  805084:	dc800f15 	stw	r18,60(sp)
  805088:	dc400e15 	stw	r17,56(sp)
  80508c:	ac7ff60e 	bge	r21,r17,805068 <___vfprintf_internal_r+0xd74>
  805090:	d9015017 	ldw	r4,1344(sp)
  805094:	b00b883a 	mov	r5,r22
  805098:	d9800d04 	addi	r6,sp,52
  80509c:	080429c0 	call	80429c <__sprint_r>
  8050a0:	103e4c1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  8050a4:	dc800f17 	ldw	r18,60(sp)
  8050a8:	dc400e17 	ldw	r17,56(sp)
  8050ac:	dcc01a04 	addi	r19,sp,104
  8050b0:	003fee06 	br	80506c <___vfprintf_internal_r+0xd78>
  8050b4:	07002074 	movhi	fp,129
  8050b8:	e7137a04 	addi	fp,fp,19944
  8050bc:	9425883a 	add	r18,r18,r16
  8050c0:	8c400044 	addi	r17,r17,1
  8050c4:	008001c4 	movi	r2,7
  8050c8:	9f000015 	stw	fp,0(r19)
  8050cc:	9c000115 	stw	r16,4(r19)
  8050d0:	dc800f15 	stw	r18,60(sp)
  8050d4:	dc400e15 	stw	r17,56(sp)
  8050d8:	147e720e 	bge	r2,r17,804aa4 <___vfprintf_internal_r+0x7b0>
  8050dc:	d9015017 	ldw	r4,1344(sp)
  8050e0:	b00b883a 	mov	r5,r22
  8050e4:	d9800d04 	addi	r6,sp,52
  8050e8:	080429c0 	call	80429c <__sprint_r>
  8050ec:	103e391e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  8050f0:	dc800f17 	ldw	r18,60(sp)
  8050f4:	dc400e17 	ldw	r17,56(sp)
  8050f8:	dcc01a04 	addi	r19,sp,104
  8050fc:	003e6a06 	br	804aa8 <___vfprintf_internal_r+0x7b4>
  805100:	d9015017 	ldw	r4,1344(sp)
  805104:	b00b883a 	mov	r5,r22
  805108:	d9800d04 	addi	r6,sp,52
  80510c:	d9c15215 	stw	r7,1352(sp)
  805110:	080429c0 	call	80429c <__sprint_r>
  805114:	d9c15217 	ldw	r7,1352(sp)
  805118:	103e2e1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  80511c:	dc800f17 	ldw	r18,60(sp)
  805120:	dc400e17 	ldw	r17,56(sp)
  805124:	dd401a04 	addi	r21,sp,104
  805128:	003dba06 	br	804814 <___vfprintf_internal_r+0x520>
  80512c:	d9015017 	ldw	r4,1344(sp)
  805130:	b00b883a 	mov	r5,r22
  805134:	d9800d04 	addi	r6,sp,52
  805138:	080429c0 	call	80429c <__sprint_r>
  80513c:	103e251e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805140:	dc800f17 	ldw	r18,60(sp)
  805144:	dc400e17 	ldw	r17,56(sp)
  805148:	dcc01a04 	addi	r19,sp,104
  80514c:	003e4206 	br	804a58 <___vfprintf_internal_r+0x764>
  805150:	d9015017 	ldw	r4,1344(sp)
  805154:	b00b883a 	mov	r5,r22
  805158:	d9800d04 	addi	r6,sp,52
  80515c:	080429c0 	call	80429c <__sprint_r>
  805160:	103e1c1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805164:	dc800f17 	ldw	r18,60(sp)
  805168:	dc400e17 	ldw	r17,56(sp)
  80516c:	d8c01a04 	addi	r3,sp,104
  805170:	003e2e06 	br	804a2c <___vfprintf_internal_r+0x738>
  805174:	d9414d17 	ldw	r5,1332(sp)
  805178:	2880004c 	andi	r2,r5,1
  80517c:	1005003a 	cmpeq	r2,r2,zero
  805180:	103dda1e 	bne	r2,zero,8048ec <___vfprintf_internal_r+0x5f8>
  805184:	003e9f06 	br	804c04 <___vfprintf_internal_r+0x910>
  805188:	d8c14217 	ldw	r3,1288(sp)
  80518c:	9125883a 	add	r18,r18,r4
  805190:	8c400044 	addi	r17,r17,1
  805194:	008001c4 	movi	r2,7
  805198:	a8c00015 	stw	r3,0(r21)
  80519c:	a9000115 	stw	r4,4(r21)
  8051a0:	dc800f15 	stw	r18,60(sp)
  8051a4:	dc400e15 	stw	r17,56(sp)
  8051a8:	14426616 	blt	r2,r17,805b44 <___vfprintf_internal_r+0x1850>
  8051ac:	a8c00204 	addi	r3,r21,8
  8051b0:	d9414a17 	ldw	r5,1320(sp)
  8051b4:	00800044 	movi	r2,1
  8051b8:	94800044 	addi	r18,r18,1
  8051bc:	8c400044 	addi	r17,r17,1
  8051c0:	18800115 	stw	r2,4(r3)
  8051c4:	008001c4 	movi	r2,7
  8051c8:	19400015 	stw	r5,0(r3)
  8051cc:	dc800f15 	stw	r18,60(sp)
  8051d0:	dc400e15 	stw	r17,56(sp)
  8051d4:	2021883a 	mov	r16,r4
  8051d8:	14425016 	blt	r2,r17,805b1c <___vfprintf_internal_r+0x1828>
  8051dc:	19400204 	addi	r5,r3,8
  8051e0:	d9814817 	ldw	r6,1312(sp)
  8051e4:	8c400044 	addi	r17,r17,1
  8051e8:	dc400e15 	stw	r17,56(sp)
  8051ec:	3107c83a 	sub	r3,r6,r4
  8051f0:	d9014217 	ldw	r4,1288(sp)
  8051f4:	90e5883a 	add	r18,r18,r3
  8051f8:	28c00115 	stw	r3,4(r5)
  8051fc:	8105883a 	add	r2,r16,r4
  805200:	28800015 	stw	r2,0(r5)
  805204:	008001c4 	movi	r2,7
  805208:	dc800f15 	stw	r18,60(sp)
  80520c:	147f1d16 	blt	r2,r17,804e84 <___vfprintf_internal_r+0xb90>
  805210:	28c00204 	addi	r3,r5,8
  805214:	003db506 	br	8048ec <___vfprintf_internal_r+0x5f8>
  805218:	3c000017 	ldw	r16,0(r7)
  80521c:	3c400117 	ldw	r17,4(r7)
  805220:	39800204 	addi	r6,r7,8
  805224:	01000044 	movi	r4,1
  805228:	d9814115 	stw	r6,1284(sp)
  80522c:	d8000405 	stb	zero,16(sp)
  805230:	003ebe06 	br	804d2c <___vfprintf_internal_r+0xa38>
  805234:	3c000017 	ldw	r16,0(r7)
  805238:	3c400117 	ldw	r17,4(r7)
  80523c:	38800204 	addi	r2,r7,8
  805240:	d8814115 	stw	r2,1284(sp)
  805244:	003eb706 	br	804d24 <___vfprintf_internal_r+0xa30>
  805248:	3c000017 	ldw	r16,0(r7)
  80524c:	3c400117 	ldw	r17,4(r7)
  805250:	39000204 	addi	r4,r7,8
  805254:	d9014115 	stw	r4,1284(sp)
  805258:	0009883a 	mov	r4,zero
  80525c:	d8000405 	stb	zero,16(sp)
  805260:	003eb206 	br	804d2c <___vfprintf_internal_r+0xa38>
  805264:	38c00017 	ldw	r3,0(r7)
  805268:	39c00104 	addi	r7,r7,4
  80526c:	d8c14b15 	stw	r3,1324(sp)
  805270:	1800d10e 	bge	r3,zero,8055b8 <___vfprintf_internal_r+0x12c4>
  805274:	00c7c83a 	sub	r3,zero,r3
  805278:	d8c14b15 	stw	r3,1324(sp)
  80527c:	d9014d17 	ldw	r4,1332(sp)
  805280:	b8c00007 	ldb	r3,0(r23)
  805284:	21000114 	ori	r4,r4,4
  805288:	d9014d15 	stw	r4,1332(sp)
  80528c:	003c9806 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  805290:	d9814d17 	ldw	r6,1332(sp)
  805294:	3080080c 	andi	r2,r6,32
  805298:	1001f026 	beq	r2,zero,805a5c <___vfprintf_internal_r+0x1768>
  80529c:	d9014c17 	ldw	r4,1328(sp)
  8052a0:	38800017 	ldw	r2,0(r7)
  8052a4:	39c00104 	addi	r7,r7,4
  8052a8:	d9c14115 	stw	r7,1284(sp)
  8052ac:	2007d7fa 	srai	r3,r4,31
  8052b0:	d9c14117 	ldw	r7,1284(sp)
  8052b4:	11000015 	stw	r4,0(r2)
  8052b8:	10c00115 	stw	r3,4(r2)
  8052bc:	003c6906 	br	804464 <___vfprintf_internal_r+0x170>
  8052c0:	b8c00007 	ldb	r3,0(r23)
  8052c4:	00801b04 	movi	r2,108
  8052c8:	18824f26 	beq	r3,r2,805c08 <___vfprintf_internal_r+0x1914>
  8052cc:	d9414d17 	ldw	r5,1332(sp)
  8052d0:	29400414 	ori	r5,r5,16
  8052d4:	d9414d15 	stw	r5,1332(sp)
  8052d8:	003c8506 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  8052dc:	d9814d17 	ldw	r6,1332(sp)
  8052e0:	b8c00007 	ldb	r3,0(r23)
  8052e4:	31800814 	ori	r6,r6,32
  8052e8:	d9814d15 	stw	r6,1332(sp)
  8052ec:	003c8006 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  8052f0:	d8814d17 	ldw	r2,1332(sp)
  8052f4:	3c000017 	ldw	r16,0(r7)
  8052f8:	00c01e04 	movi	r3,120
  8052fc:	10800094 	ori	r2,r2,2
  805300:	d8814d15 	stw	r2,1332(sp)
  805304:	39c00104 	addi	r7,r7,4
  805308:	01402074 	movhi	r5,129
  80530c:	29536204 	addi	r5,r5,19848
  805310:	00800c04 	movi	r2,48
  805314:	0023883a 	mov	r17,zero
  805318:	01000084 	movi	r4,2
  80531c:	d9c14115 	stw	r7,1284(sp)
  805320:	d8c14e15 	stw	r3,1336(sp)
  805324:	d9414515 	stw	r5,1300(sp)
  805328:	d8800505 	stb	r2,20(sp)
  80532c:	d8c00545 	stb	r3,21(sp)
  805330:	d8000405 	stb	zero,16(sp)
  805334:	003e7d06 	br	804d2c <___vfprintf_internal_r+0xa38>
  805338:	d8814d17 	ldw	r2,1332(sp)
  80533c:	b8c00007 	ldb	r3,0(r23)
  805340:	10801014 	ori	r2,r2,64
  805344:	d8814d15 	stw	r2,1332(sp)
  805348:	003c6906 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  80534c:	d9414d17 	ldw	r5,1332(sp)
  805350:	2880020c 	andi	r2,r5,8
  805354:	1001df26 	beq	r2,zero,805ad4 <___vfprintf_internal_r+0x17e0>
  805358:	39800017 	ldw	r6,0(r7)
  80535c:	38800204 	addi	r2,r7,8
  805360:	d8814115 	stw	r2,1284(sp)
  805364:	d9814315 	stw	r6,1292(sp)
  805368:	39c00117 	ldw	r7,4(r7)
  80536c:	d9c14415 	stw	r7,1296(sp)
  805370:	d9014317 	ldw	r4,1292(sp)
  805374:	d9414417 	ldw	r5,1296(sp)
  805378:	080a9540 	call	80a954 <__isinfd>
  80537c:	10021726 	beq	r2,zero,805bdc <___vfprintf_internal_r+0x18e8>
  805380:	d9014317 	ldw	r4,1292(sp)
  805384:	d9414417 	ldw	r5,1296(sp)
  805388:	000d883a 	mov	r6,zero
  80538c:	000f883a 	mov	r7,zero
  805390:	080f6b80 	call	80f6b8 <__ltdf2>
  805394:	1002ca16 	blt	r2,zero,805ec0 <___vfprintf_internal_r+0x1bcc>
  805398:	d9414e17 	ldw	r5,1336(sp)
  80539c:	008011c4 	movi	r2,71
  8053a0:	11420a16 	blt	r2,r5,805bcc <___vfprintf_internal_r+0x18d8>
  8053a4:	01802074 	movhi	r6,129
  8053a8:	31936704 	addi	r6,r6,19868
  8053ac:	d9814215 	stw	r6,1288(sp)
  8053b0:	d9014d17 	ldw	r4,1332(sp)
  8053b4:	00c000c4 	movi	r3,3
  8053b8:	00bfdfc4 	movi	r2,-129
  8053bc:	2088703a 	and	r4,r4,r2
  8053c0:	180f883a 	mov	r7,r3
  8053c4:	d8c14615 	stw	r3,1304(sp)
  8053c8:	d9014d15 	stw	r4,1332(sp)
  8053cc:	d8014715 	stw	zero,1308(sp)
  8053d0:	003e6a06 	br	804d7c <___vfprintf_internal_r+0xa88>
  8053d4:	38800017 	ldw	r2,0(r7)
  8053d8:	00c00044 	movi	r3,1
  8053dc:	39c00104 	addi	r7,r7,4
  8053e0:	d9c14115 	stw	r7,1284(sp)
  8053e4:	d9001004 	addi	r4,sp,64
  8053e8:	180f883a 	mov	r7,r3
  8053ec:	d8c14615 	stw	r3,1304(sp)
  8053f0:	d9014215 	stw	r4,1288(sp)
  8053f4:	d8801005 	stb	r2,64(sp)
  8053f8:	d8000405 	stb	zero,16(sp)
  8053fc:	003cac06 	br	8046b0 <___vfprintf_internal_r+0x3bc>
  805400:	01402074 	movhi	r5,129
  805404:	29536d04 	addi	r5,r5,19892
  805408:	d9414515 	stw	r5,1300(sp)
  80540c:	d9814d17 	ldw	r6,1332(sp)
  805410:	3080080c 	andi	r2,r6,32
  805414:	1000f926 	beq	r2,zero,8057fc <___vfprintf_internal_r+0x1508>
  805418:	3c000017 	ldw	r16,0(r7)
  80541c:	3c400117 	ldw	r17,4(r7)
  805420:	38800204 	addi	r2,r7,8
  805424:	d8814115 	stw	r2,1284(sp)
  805428:	d9414d17 	ldw	r5,1332(sp)
  80542c:	2880004c 	andi	r2,r5,1
  805430:	1005003a 	cmpeq	r2,r2,zero
  805434:	1000b31e 	bne	r2,zero,805704 <___vfprintf_internal_r+0x1410>
  805438:	8444b03a 	or	r2,r16,r17
  80543c:	1000b126 	beq	r2,zero,805704 <___vfprintf_internal_r+0x1410>
  805440:	d9814e17 	ldw	r6,1336(sp)
  805444:	29400094 	ori	r5,r5,2
  805448:	00800c04 	movi	r2,48
  80544c:	01000084 	movi	r4,2
  805450:	d9414d15 	stw	r5,1332(sp)
  805454:	d8800505 	stb	r2,20(sp)
  805458:	d9800545 	stb	r6,21(sp)
  80545c:	d8000405 	stb	zero,16(sp)
  805460:	003e3206 	br	804d2c <___vfprintf_internal_r+0xa38>
  805464:	01802074 	movhi	r6,129
  805468:	31936204 	addi	r6,r6,19848
  80546c:	d9814515 	stw	r6,1300(sp)
  805470:	003fe606 	br	80540c <___vfprintf_internal_r+0x1118>
  805474:	00800ac4 	movi	r2,43
  805478:	d8800405 	stb	r2,16(sp)
  80547c:	b8c00007 	ldb	r3,0(r23)
  805480:	003c1b06 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  805484:	d8814d17 	ldw	r2,1332(sp)
  805488:	b8c00007 	ldb	r3,0(r23)
  80548c:	10800054 	ori	r2,r2,1
  805490:	d8814d15 	stw	r2,1332(sp)
  805494:	003c1606 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  805498:	d8800407 	ldb	r2,16(sp)
  80549c:	1000461e 	bne	r2,zero,8055b8 <___vfprintf_internal_r+0x12c4>
  8054a0:	00800804 	movi	r2,32
  8054a4:	d8800405 	stb	r2,16(sp)
  8054a8:	b8c00007 	ldb	r3,0(r23)
  8054ac:	003c1006 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  8054b0:	d9814d17 	ldw	r6,1332(sp)
  8054b4:	b8c00007 	ldb	r3,0(r23)
  8054b8:	31800214 	ori	r6,r6,8
  8054bc:	d9814d15 	stw	r6,1332(sp)
  8054c0:	003c0b06 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  8054c4:	0007883a 	mov	r3,zero
  8054c8:	01000244 	movi	r4,9
  8054cc:	188002a4 	muli	r2,r3,10
  8054d0:	b8c00007 	ldb	r3,0(r23)
  8054d4:	d9814e17 	ldw	r6,1336(sp)
  8054d8:	bdc00044 	addi	r23,r23,1
  8054dc:	d8c14e15 	stw	r3,1336(sp)
  8054e0:	d9414e17 	ldw	r5,1336(sp)
  8054e4:	3085883a 	add	r2,r6,r2
  8054e8:	10fff404 	addi	r3,r2,-48
  8054ec:	28bff404 	addi	r2,r5,-48
  8054f0:	20bff62e 	bgeu	r4,r2,8054cc <___vfprintf_internal_r+0x11d8>
  8054f4:	d8c14b15 	stw	r3,1324(sp)
  8054f8:	003bff06 	br	8044f8 <___vfprintf_internal_r+0x204>
  8054fc:	d9414d17 	ldw	r5,1332(sp)
  805500:	b8c00007 	ldb	r3,0(r23)
  805504:	29402014 	ori	r5,r5,128
  805508:	d9414d15 	stw	r5,1332(sp)
  80550c:	003bf806 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  805510:	b8c00007 	ldb	r3,0(r23)
  805514:	00800a84 	movi	r2,42
  805518:	bdc00044 	addi	r23,r23,1
  80551c:	18831526 	beq	r3,r2,806174 <___vfprintf_internal_r+0x1e80>
  805520:	d8c14e15 	stw	r3,1336(sp)
  805524:	18bff404 	addi	r2,r3,-48
  805528:	00c00244 	movi	r3,9
  80552c:	18827836 	bltu	r3,r2,805f10 <___vfprintf_internal_r+0x1c1c>
  805530:	000d883a 	mov	r6,zero
  805534:	308002a4 	muli	r2,r6,10
  805538:	b9800007 	ldb	r6,0(r23)
  80553c:	d9414e17 	ldw	r5,1336(sp)
  805540:	bdc00044 	addi	r23,r23,1
  805544:	d9814e15 	stw	r6,1336(sp)
  805548:	d9014e17 	ldw	r4,1336(sp)
  80554c:	1145883a 	add	r2,r2,r5
  805550:	11bff404 	addi	r6,r2,-48
  805554:	20bff404 	addi	r2,r4,-48
  805558:	18bff62e 	bgeu	r3,r2,805534 <___vfprintf_internal_r+0x1240>
  80555c:	3027883a 	mov	r19,r6
  805560:	303be50e 	bge	r6,zero,8044f8 <___vfprintf_internal_r+0x204>
  805564:	04ffffc4 	movi	r19,-1
  805568:	003be306 	br	8044f8 <___vfprintf_internal_r+0x204>
  80556c:	d8000405 	stb	zero,16(sp)
  805570:	39800017 	ldw	r6,0(r7)
  805574:	39c00104 	addi	r7,r7,4
  805578:	d9c14115 	stw	r7,1284(sp)
  80557c:	d9814215 	stw	r6,1288(sp)
  805580:	3001c926 	beq	r6,zero,805ca8 <___vfprintf_internal_r+0x19b4>
  805584:	98000e16 	blt	r19,zero,8055c0 <___vfprintf_internal_r+0x12cc>
  805588:	d9014217 	ldw	r4,1288(sp)
  80558c:	000b883a 	mov	r5,zero
  805590:	980d883a 	mov	r6,r19
  805594:	08031b00 	call	8031b0 <memchr>
  805598:	10025926 	beq	r2,zero,805f00 <___vfprintf_internal_r+0x1c0c>
  80559c:	d8c14217 	ldw	r3,1288(sp)
  8055a0:	10cfc83a 	sub	r7,r2,r3
  8055a4:	99c19e16 	blt	r19,r7,805c20 <___vfprintf_internal_r+0x192c>
  8055a8:	d9c14615 	stw	r7,1304(sp)
  8055ac:	38000916 	blt	r7,zero,8055d4 <___vfprintf_internal_r+0x12e0>
  8055b0:	d8014715 	stw	zero,1308(sp)
  8055b4:	003df106 	br	804d7c <___vfprintf_internal_r+0xa88>
  8055b8:	b8c00007 	ldb	r3,0(r23)
  8055bc:	003bcc06 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  8055c0:	d9014217 	ldw	r4,1288(sp)
  8055c4:	08042280 	call	804228 <strlen>
  8055c8:	d8814615 	stw	r2,1304(sp)
  8055cc:	100f883a 	mov	r7,r2
  8055d0:	103ff70e 	bge	r2,zero,8055b0 <___vfprintf_internal_r+0x12bc>
  8055d4:	d8014615 	stw	zero,1304(sp)
  8055d8:	d8014715 	stw	zero,1308(sp)
  8055dc:	003de706 	br	804d7c <___vfprintf_internal_r+0xa88>
  8055e0:	20c03fcc 	andi	r3,r4,255
  8055e4:	00800044 	movi	r2,1
  8055e8:	18802d26 	beq	r3,r2,8056a0 <___vfprintf_internal_r+0x13ac>
  8055ec:	18800e36 	bltu	r3,r2,805628 <___vfprintf_internal_r+0x1334>
  8055f0:	00800084 	movi	r2,2
  8055f4:	1880fa26 	beq	r3,r2,8059e0 <___vfprintf_internal_r+0x16ec>
  8055f8:	01002074 	movhi	r4,129
  8055fc:	21137204 	addi	r4,r4,19912
  805600:	08042280 	call	804228 <strlen>
  805604:	100f883a 	mov	r7,r2
  805608:	dcc14615 	stw	r19,1304(sp)
  80560c:	9880010e 	bge	r19,r2,805614 <___vfprintf_internal_r+0x1320>
  805610:	d8814615 	stw	r2,1304(sp)
  805614:	00802074 	movhi	r2,129
  805618:	10937204 	addi	r2,r2,19912
  80561c:	dcc14715 	stw	r19,1308(sp)
  805620:	d8814215 	stw	r2,1288(sp)
  805624:	003dd506 	br	804d7c <___vfprintf_internal_r+0xa88>
  805628:	d9401a04 	addi	r5,sp,104
  80562c:	dd001004 	addi	r20,sp,64
  805630:	d9414215 	stw	r5,1288(sp)
  805634:	880a977a 	slli	r5,r17,29
  805638:	d9814217 	ldw	r6,1288(sp)
  80563c:	8004d0fa 	srli	r2,r16,3
  805640:	8806d0fa 	srli	r3,r17,3
  805644:	810001cc 	andi	r4,r16,7
  805648:	2884b03a 	or	r2,r5,r2
  80564c:	31bfffc4 	addi	r6,r6,-1
  805650:	21000c04 	addi	r4,r4,48
  805654:	d9814215 	stw	r6,1288(sp)
  805658:	10cab03a 	or	r5,r2,r3
  80565c:	31000005 	stb	r4,0(r6)
  805660:	1021883a 	mov	r16,r2
  805664:	1823883a 	mov	r17,r3
  805668:	283ff21e 	bne	r5,zero,805634 <___vfprintf_internal_r+0x1340>
  80566c:	d8c14d17 	ldw	r3,1332(sp)
  805670:	1880004c 	andi	r2,r3,1
  805674:	1005003a 	cmpeq	r2,r2,zero
  805678:	103db91e 	bne	r2,zero,804d60 <___vfprintf_internal_r+0xa6c>
  80567c:	20803fcc 	andi	r2,r4,255
  805680:	1080201c 	xori	r2,r2,128
  805684:	10bfe004 	addi	r2,r2,-128
  805688:	00c00c04 	movi	r3,48
  80568c:	10fdb426 	beq	r2,r3,804d60 <___vfprintf_internal_r+0xa6c>
  805690:	31bfffc4 	addi	r6,r6,-1
  805694:	d9814215 	stw	r6,1288(sp)
  805698:	30c00005 	stb	r3,0(r6)
  80569c:	003db006 	br	804d60 <___vfprintf_internal_r+0xa6c>
  8056a0:	88800068 	cmpgeui	r2,r17,1
  8056a4:	10002c1e 	bne	r2,zero,805758 <___vfprintf_internal_r+0x1464>
  8056a8:	8800021e 	bne	r17,zero,8056b4 <___vfprintf_internal_r+0x13c0>
  8056ac:	00800244 	movi	r2,9
  8056b0:	14002936 	bltu	r2,r16,805758 <___vfprintf_internal_r+0x1464>
  8056b4:	d90019c4 	addi	r4,sp,103
  8056b8:	dd001004 	addi	r20,sp,64
  8056bc:	d9014215 	stw	r4,1288(sp)
  8056c0:	d9014217 	ldw	r4,1288(sp)
  8056c4:	80800c04 	addi	r2,r16,48
  8056c8:	20800005 	stb	r2,0(r4)
  8056cc:	003da406 	br	804d60 <___vfprintf_internal_r+0xa6c>
  8056d0:	dc400e17 	ldw	r17,56(sp)
  8056d4:	07002074 	movhi	fp,129
  8056d8:	e7137a04 	addi	fp,fp,19944
  8056dc:	9425883a 	add	r18,r18,r16
  8056e0:	8c400044 	addi	r17,r17,1
  8056e4:	008001c4 	movi	r2,7
  8056e8:	1f000015 	stw	fp,0(r3)
  8056ec:	1c000115 	stw	r16,4(r3)
  8056f0:	dc800f15 	stw	r18,60(sp)
  8056f4:	dc400e15 	stw	r17,56(sp)
  8056f8:	147de216 	blt	r2,r17,804e84 <___vfprintf_internal_r+0xb90>
  8056fc:	18c00204 	addi	r3,r3,8
  805700:	003c7a06 	br	8048ec <___vfprintf_internal_r+0x5f8>
  805704:	01000084 	movi	r4,2
  805708:	d8000405 	stb	zero,16(sp)
  80570c:	003d8706 	br	804d2c <___vfprintf_internal_r+0xa38>
  805710:	d9814d17 	ldw	r6,1332(sp)
  805714:	30c4703a 	and	r2,r6,r3
  805718:	1005003a 	cmpeq	r2,r2,zero
  80571c:	103cb926 	beq	r2,zero,804a04 <___vfprintf_internal_r+0x710>
  805720:	d9014217 	ldw	r4,1288(sp)
  805724:	94800044 	addi	r18,r18,1
  805728:	8c400044 	addi	r17,r17,1
  80572c:	008001c4 	movi	r2,7
  805730:	a9000015 	stw	r4,0(r21)
  805734:	a8c00115 	stw	r3,4(r21)
  805738:	dc800f15 	stw	r18,60(sp)
  80573c:	dc400e15 	stw	r17,56(sp)
  805740:	147e6616 	blt	r2,r17,8050dc <___vfprintf_internal_r+0xde8>
  805744:	acc00204 	addi	r19,r21,8
  805748:	003cd706 	br	804aa8 <___vfprintf_internal_r+0x7b4>
  80574c:	07002074 	movhi	fp,129
  805750:	e7137a04 	addi	fp,fp,19944
  805754:	003c4f06 	br	804894 <___vfprintf_internal_r+0x5a0>
  805758:	dd001004 	addi	r20,sp,64
  80575c:	dc801a04 	addi	r18,sp,104
  805760:	8009883a 	mov	r4,r16
  805764:	880b883a 	mov	r5,r17
  805768:	01800284 	movi	r6,10
  80576c:	000f883a 	mov	r7,zero
  805770:	080e2600 	call	80e260 <__umoddi3>
  805774:	12000c04 	addi	r8,r2,48
  805778:	94bfffc4 	addi	r18,r18,-1
  80577c:	8009883a 	mov	r4,r16
  805780:	880b883a 	mov	r5,r17
  805784:	01800284 	movi	r6,10
  805788:	000f883a 	mov	r7,zero
  80578c:	92000005 	stb	r8,0(r18)
  805790:	080dc840 	call	80dc84 <__udivdi3>
  805794:	1009883a 	mov	r4,r2
  805798:	1021883a 	mov	r16,r2
  80579c:	18800068 	cmpgeui	r2,r3,1
  8057a0:	1823883a 	mov	r17,r3
  8057a4:	103fee1e 	bne	r2,zero,805760 <___vfprintf_internal_r+0x146c>
  8057a8:	1800021e 	bne	r3,zero,8057b4 <___vfprintf_internal_r+0x14c0>
  8057ac:	00800244 	movi	r2,9
  8057b0:	113feb36 	bltu	r2,r4,805760 <___vfprintf_internal_r+0x146c>
  8057b4:	94bfffc4 	addi	r18,r18,-1
  8057b8:	dc814215 	stw	r18,1288(sp)
  8057bc:	003fc006 	br	8056c0 <___vfprintf_internal_r+0x13cc>
  8057c0:	d9014d17 	ldw	r4,1332(sp)
  8057c4:	2080004c 	andi	r2,r4,1
  8057c8:	10009a1e 	bne	r2,zero,805a34 <___vfprintf_internal_r+0x1740>
  8057cc:	d9401a04 	addi	r5,sp,104
  8057d0:	dd001004 	addi	r20,sp,64
  8057d4:	d9414215 	stw	r5,1288(sp)
  8057d8:	003d6106 	br	804d60 <___vfprintf_internal_r+0xa6c>
  8057dc:	d9015017 	ldw	r4,1344(sp)
  8057e0:	b00b883a 	mov	r5,r22
  8057e4:	d9800d04 	addi	r6,sp,52
  8057e8:	080429c0 	call	80429c <__sprint_r>
  8057ec:	103c791e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  8057f0:	dc800f17 	ldw	r18,60(sp)
  8057f4:	d8c01a04 	addi	r3,sp,104
  8057f8:	003cff06 	br	804bf8 <___vfprintf_internal_r+0x904>
  8057fc:	d8c14d17 	ldw	r3,1332(sp)
  805800:	1880040c 	andi	r2,r3,16
  805804:	1000711e 	bne	r2,zero,8059cc <___vfprintf_internal_r+0x16d8>
  805808:	d9014d17 	ldw	r4,1332(sp)
  80580c:	2080100c 	andi	r2,r4,64
  805810:	10006e26 	beq	r2,zero,8059cc <___vfprintf_internal_r+0x16d8>
  805814:	3c00000b 	ldhu	r16,0(r7)
  805818:	0023883a 	mov	r17,zero
  80581c:	39c00104 	addi	r7,r7,4
  805820:	d9c14115 	stw	r7,1284(sp)
  805824:	003f0006 	br	805428 <___vfprintf_internal_r+0x1134>
  805828:	dc400e17 	ldw	r17,56(sp)
  80582c:	07002074 	movhi	fp,129
  805830:	e7137a04 	addi	fp,fp,19944
  805834:	9425883a 	add	r18,r18,r16
  805838:	8c400044 	addi	r17,r17,1
  80583c:	008001c4 	movi	r2,7
  805840:	1f000015 	stw	fp,0(r3)
  805844:	1c000115 	stw	r16,4(r3)
  805848:	dc800f15 	stw	r18,60(sp)
  80584c:	dc400e15 	stw	r17,56(sp)
  805850:	147d7616 	blt	r2,r17,804e2c <___vfprintf_internal_r+0xb38>
  805854:	18c00204 	addi	r3,r3,8
  805858:	003d7b06 	br	804e48 <___vfprintf_internal_r+0xb54>
  80585c:	dc800f17 	ldw	r18,60(sp)
  805860:	dc400e17 	ldw	r17,56(sp)
  805864:	07002074 	movhi	fp,129
  805868:	e7137e04 	addi	fp,fp,19960
  80586c:	003bc006 	br	804770 <___vfprintf_internal_r+0x47c>
  805870:	d9015017 	ldw	r4,1344(sp)
  805874:	b00b883a 	mov	r5,r22
  805878:	d9800d04 	addi	r6,sp,52
  80587c:	080429c0 	call	80429c <__sprint_r>
  805880:	103c541e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805884:	dc800f17 	ldw	r18,60(sp)
  805888:	d8c01a04 	addi	r3,sp,104
  80588c:	003ce906 	br	804c34 <___vfprintf_internal_r+0x940>
  805890:	3c000017 	ldw	r16,0(r7)
  805894:	0009883a 	mov	r4,zero
  805898:	39c00104 	addi	r7,r7,4
  80589c:	0023883a 	mov	r17,zero
  8058a0:	d9c14115 	stw	r7,1284(sp)
  8058a4:	d8000405 	stb	zero,16(sp)
  8058a8:	003d2006 	br	804d2c <___vfprintf_internal_r+0xa38>
  8058ac:	38800017 	ldw	r2,0(r7)
  8058b0:	39c00104 	addi	r7,r7,4
  8058b4:	d9c14115 	stw	r7,1284(sp)
  8058b8:	1023d7fa 	srai	r17,r2,31
  8058bc:	1021883a 	mov	r16,r2
  8058c0:	003d1806 	br	804d24 <___vfprintf_internal_r+0xa30>
  8058c4:	3c000017 	ldw	r16,0(r7)
  8058c8:	01000044 	movi	r4,1
  8058cc:	39c00104 	addi	r7,r7,4
  8058d0:	0023883a 	mov	r17,zero
  8058d4:	d9c14115 	stw	r7,1284(sp)
  8058d8:	d8000405 	stb	zero,16(sp)
  8058dc:	003d1306 	br	804d2c <___vfprintf_internal_r+0xa38>
  8058e0:	00802074 	movhi	r2,129
  8058e4:	10937904 	addi	r2,r2,19940
  8058e8:	94800044 	addi	r18,r18,1
  8058ec:	8c400044 	addi	r17,r17,1
  8058f0:	a8800015 	stw	r2,0(r21)
  8058f4:	00c00044 	movi	r3,1
  8058f8:	008001c4 	movi	r2,7
  8058fc:	a8c00115 	stw	r3,4(r21)
  805900:	dc800f15 	stw	r18,60(sp)
  805904:	dc400e15 	stw	r17,56(sp)
  805908:	1440ca16 	blt	r2,r17,805c34 <___vfprintf_internal_r+0x1940>
  80590c:	a8c00204 	addi	r3,r21,8
  805910:	2000061e 	bne	r4,zero,80592c <___vfprintf_internal_r+0x1638>
  805914:	d9414817 	ldw	r5,1312(sp)
  805918:	2800041e 	bne	r5,zero,80592c <___vfprintf_internal_r+0x1638>
  80591c:	d9814d17 	ldw	r6,1332(sp)
  805920:	3080004c 	andi	r2,r6,1
  805924:	1005003a 	cmpeq	r2,r2,zero
  805928:	103bf01e 	bne	r2,zero,8048ec <___vfprintf_internal_r+0x5f8>
  80592c:	00800044 	movi	r2,1
  805930:	dc400e17 	ldw	r17,56(sp)
  805934:	18800115 	stw	r2,4(r3)
  805938:	d8814a17 	ldw	r2,1320(sp)
  80593c:	94800044 	addi	r18,r18,1
  805940:	8c400044 	addi	r17,r17,1
  805944:	18800015 	stw	r2,0(r3)
  805948:	008001c4 	movi	r2,7
  80594c:	dc800f15 	stw	r18,60(sp)
  805950:	dc400e15 	stw	r17,56(sp)
  805954:	1440ca16 	blt	r2,r17,805c80 <___vfprintf_internal_r+0x198c>
  805958:	18c00204 	addi	r3,r3,8
  80595c:	0121c83a 	sub	r16,zero,r4
  805960:	0400500e 	bge	zero,r16,805aa4 <___vfprintf_internal_r+0x17b0>
  805964:	00800404 	movi	r2,16
  805968:	1400800e 	bge	r2,r16,805b6c <___vfprintf_internal_r+0x1878>
  80596c:	1027883a 	mov	r19,r2
  805970:	07002074 	movhi	fp,129
  805974:	e7137a04 	addi	fp,fp,19944
  805978:	050001c4 	movi	r20,7
  80597c:	00000306 	br	80598c <___vfprintf_internal_r+0x1698>
  805980:	18c00204 	addi	r3,r3,8
  805984:	843ffc04 	addi	r16,r16,-16
  805988:	9c007a0e 	bge	r19,r16,805b74 <___vfprintf_internal_r+0x1880>
  80598c:	94800404 	addi	r18,r18,16
  805990:	8c400044 	addi	r17,r17,1
  805994:	1f000015 	stw	fp,0(r3)
  805998:	1cc00115 	stw	r19,4(r3)
  80599c:	dc800f15 	stw	r18,60(sp)
  8059a0:	dc400e15 	stw	r17,56(sp)
  8059a4:	a47ff60e 	bge	r20,r17,805980 <___vfprintf_internal_r+0x168c>
  8059a8:	d9015017 	ldw	r4,1344(sp)
  8059ac:	b00b883a 	mov	r5,r22
  8059b0:	d9800d04 	addi	r6,sp,52
  8059b4:	080429c0 	call	80429c <__sprint_r>
  8059b8:	103c061e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  8059bc:	dc800f17 	ldw	r18,60(sp)
  8059c0:	dc400e17 	ldw	r17,56(sp)
  8059c4:	d8c01a04 	addi	r3,sp,104
  8059c8:	003fee06 	br	805984 <___vfprintf_internal_r+0x1690>
  8059cc:	3c000017 	ldw	r16,0(r7)
  8059d0:	0023883a 	mov	r17,zero
  8059d4:	39c00104 	addi	r7,r7,4
  8059d8:	d9c14115 	stw	r7,1284(sp)
  8059dc:	003e9206 	br	805428 <___vfprintf_internal_r+0x1134>
  8059e0:	d9401a04 	addi	r5,sp,104
  8059e4:	dd001004 	addi	r20,sp,64
  8059e8:	d9414215 	stw	r5,1288(sp)
  8059ec:	d9814517 	ldw	r6,1300(sp)
  8059f0:	880a973a 	slli	r5,r17,28
  8059f4:	8004d13a 	srli	r2,r16,4
  8059f8:	810003cc 	andi	r4,r16,15
  8059fc:	3109883a 	add	r4,r6,r4
  805a00:	2884b03a 	or	r2,r5,r2
  805a04:	21400003 	ldbu	r5,0(r4)
  805a08:	d9014217 	ldw	r4,1288(sp)
  805a0c:	8806d13a 	srli	r3,r17,4
  805a10:	1021883a 	mov	r16,r2
  805a14:	213fffc4 	addi	r4,r4,-1
  805a18:	d9014215 	stw	r4,1288(sp)
  805a1c:	d9814217 	ldw	r6,1288(sp)
  805a20:	10c8b03a 	or	r4,r2,r3
  805a24:	1823883a 	mov	r17,r3
  805a28:	31400005 	stb	r5,0(r6)
  805a2c:	203fef1e 	bne	r4,zero,8059ec <___vfprintf_internal_r+0x16f8>
  805a30:	003ccb06 	br	804d60 <___vfprintf_internal_r+0xa6c>
  805a34:	00800c04 	movi	r2,48
  805a38:	d98019c4 	addi	r6,sp,103
  805a3c:	dd001004 	addi	r20,sp,64
  805a40:	d88019c5 	stb	r2,103(sp)
  805a44:	d9814215 	stw	r6,1288(sp)
  805a48:	003cc506 	br	804d60 <___vfprintf_internal_r+0xa6c>
  805a4c:	dc400e17 	ldw	r17,56(sp)
  805a50:	07002074 	movhi	fp,129
  805a54:	e7137e04 	addi	fp,fp,19960
  805a58:	003bc706 	br	804978 <___vfprintf_internal_r+0x684>
  805a5c:	d9414d17 	ldw	r5,1332(sp)
  805a60:	2880040c 	andi	r2,r5,16
  805a64:	10007c26 	beq	r2,zero,805c58 <___vfprintf_internal_r+0x1964>
  805a68:	38800017 	ldw	r2,0(r7)
  805a6c:	39c00104 	addi	r7,r7,4
  805a70:	d9c14115 	stw	r7,1284(sp)
  805a74:	d9814c17 	ldw	r6,1328(sp)
  805a78:	d9c14117 	ldw	r7,1284(sp)
  805a7c:	11800015 	stw	r6,0(r2)
  805a80:	003a7806 	br	804464 <___vfprintf_internal_r+0x170>
  805a84:	d9015017 	ldw	r4,1344(sp)
  805a88:	b00b883a 	mov	r5,r22
  805a8c:	d9800d04 	addi	r6,sp,52
  805a90:	080429c0 	call	80429c <__sprint_r>
  805a94:	103bcf1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805a98:	dc800f17 	ldw	r18,60(sp)
  805a9c:	dc400e17 	ldw	r17,56(sp)
  805aa0:	d8c01a04 	addi	r3,sp,104
  805aa4:	d9014817 	ldw	r4,1312(sp)
  805aa8:	d9414217 	ldw	r5,1288(sp)
  805aac:	8c400044 	addi	r17,r17,1
  805ab0:	9125883a 	add	r18,r18,r4
  805ab4:	008001c4 	movi	r2,7
  805ab8:	19400015 	stw	r5,0(r3)
  805abc:	19000115 	stw	r4,4(r3)
  805ac0:	dc800f15 	stw	r18,60(sp)
  805ac4:	dc400e15 	stw	r17,56(sp)
  805ac8:	147cee16 	blt	r2,r17,804e84 <___vfprintf_internal_r+0xb90>
  805acc:	18c00204 	addi	r3,r3,8
  805ad0:	003b8606 	br	8048ec <___vfprintf_internal_r+0x5f8>
  805ad4:	38c00017 	ldw	r3,0(r7)
  805ad8:	39000204 	addi	r4,r7,8
  805adc:	d9014115 	stw	r4,1284(sp)
  805ae0:	d8c14315 	stw	r3,1292(sp)
  805ae4:	39c00117 	ldw	r7,4(r7)
  805ae8:	d9c14415 	stw	r7,1296(sp)
  805aec:	003e2006 	br	805370 <___vfprintf_internal_r+0x107c>
  805af0:	0005883a 	mov	r2,zero
  805af4:	1409c83a 	sub	r4,r2,r16
  805af8:	1105803a 	cmpltu	r2,r2,r4
  805afc:	044bc83a 	sub	r5,zero,r17
  805b00:	2885c83a 	sub	r2,r5,r2
  805b04:	2021883a 	mov	r16,r4
  805b08:	1023883a 	mov	r17,r2
  805b0c:	01000044 	movi	r4,1
  805b10:	00800b44 	movi	r2,45
  805b14:	d8800405 	stb	r2,16(sp)
  805b18:	003c8406 	br	804d2c <___vfprintf_internal_r+0xa38>
  805b1c:	d9015017 	ldw	r4,1344(sp)
  805b20:	b00b883a 	mov	r5,r22
  805b24:	d9800d04 	addi	r6,sp,52
  805b28:	080429c0 	call	80429c <__sprint_r>
  805b2c:	103ba91e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805b30:	dc800f17 	ldw	r18,60(sp)
  805b34:	dc400e17 	ldw	r17,56(sp)
  805b38:	d9000617 	ldw	r4,24(sp)
  805b3c:	d9401a04 	addi	r5,sp,104
  805b40:	003da706 	br	8051e0 <___vfprintf_internal_r+0xeec>
  805b44:	d9015017 	ldw	r4,1344(sp)
  805b48:	b00b883a 	mov	r5,r22
  805b4c:	d9800d04 	addi	r6,sp,52
  805b50:	080429c0 	call	80429c <__sprint_r>
  805b54:	103b9f1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805b58:	dc800f17 	ldw	r18,60(sp)
  805b5c:	dc400e17 	ldw	r17,56(sp)
  805b60:	d9000617 	ldw	r4,24(sp)
  805b64:	d8c01a04 	addi	r3,sp,104
  805b68:	003d9106 	br	8051b0 <___vfprintf_internal_r+0xebc>
  805b6c:	07002074 	movhi	fp,129
  805b70:	e7137a04 	addi	fp,fp,19944
  805b74:	9425883a 	add	r18,r18,r16
  805b78:	8c400044 	addi	r17,r17,1
  805b7c:	008001c4 	movi	r2,7
  805b80:	1f000015 	stw	fp,0(r3)
  805b84:	1c000115 	stw	r16,4(r3)
  805b88:	dc800f15 	stw	r18,60(sp)
  805b8c:	dc400e15 	stw	r17,56(sp)
  805b90:	147fbc16 	blt	r2,r17,805a84 <___vfprintf_internal_r+0x1790>
  805b94:	18c00204 	addi	r3,r3,8
  805b98:	003fc206 	br	805aa4 <___vfprintf_internal_r+0x17b0>
  805b9c:	d9015017 	ldw	r4,1344(sp)
  805ba0:	b00b883a 	mov	r5,r22
  805ba4:	d9800d04 	addi	r6,sp,52
  805ba8:	080429c0 	call	80429c <__sprint_r>
  805bac:	103b891e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805bb0:	dc800f17 	ldw	r18,60(sp)
  805bb4:	d9000617 	ldw	r4,24(sp)
  805bb8:	d8c01a04 	addi	r3,sp,104
  805bbc:	003d0206 	br	804fc8 <___vfprintf_internal_r+0xcd4>
  805bc0:	07002074 	movhi	fp,129
  805bc4:	e7137a04 	addi	fp,fp,19944
  805bc8:	003be406 	br	804b5c <___vfprintf_internal_r+0x868>
  805bcc:	00802074 	movhi	r2,129
  805bd0:	10936804 	addi	r2,r2,19872
  805bd4:	d8814215 	stw	r2,1288(sp)
  805bd8:	003df506 	br	8053b0 <___vfprintf_internal_r+0x10bc>
  805bdc:	d9014317 	ldw	r4,1292(sp)
  805be0:	d9414417 	ldw	r5,1296(sp)
  805be4:	080a9940 	call	80a994 <__isnand>
  805be8:	10003926 	beq	r2,zero,805cd0 <___vfprintf_internal_r+0x19dc>
  805bec:	d9414e17 	ldw	r5,1336(sp)
  805bf0:	008011c4 	movi	r2,71
  805bf4:	1140ce16 	blt	r2,r5,805f30 <___vfprintf_internal_r+0x1c3c>
  805bf8:	01802074 	movhi	r6,129
  805bfc:	31936904 	addi	r6,r6,19876
  805c00:	d9814215 	stw	r6,1288(sp)
  805c04:	003dea06 	br	8053b0 <___vfprintf_internal_r+0x10bc>
  805c08:	d9014d17 	ldw	r4,1332(sp)
  805c0c:	bdc00044 	addi	r23,r23,1
  805c10:	b8c00007 	ldb	r3,0(r23)
  805c14:	21000814 	ori	r4,r4,32
  805c18:	d9014d15 	stw	r4,1332(sp)
  805c1c:	003a3406 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  805c20:	dcc14615 	stw	r19,1304(sp)
  805c24:	98011016 	blt	r19,zero,806068 <___vfprintf_internal_r+0x1d74>
  805c28:	980f883a 	mov	r7,r19
  805c2c:	d8014715 	stw	zero,1308(sp)
  805c30:	003c5206 	br	804d7c <___vfprintf_internal_r+0xa88>
  805c34:	d9015017 	ldw	r4,1344(sp)
  805c38:	b00b883a 	mov	r5,r22
  805c3c:	d9800d04 	addi	r6,sp,52
  805c40:	080429c0 	call	80429c <__sprint_r>
  805c44:	103b631e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805c48:	dc800f17 	ldw	r18,60(sp)
  805c4c:	d9000617 	ldw	r4,24(sp)
  805c50:	d8c01a04 	addi	r3,sp,104
  805c54:	003f2e06 	br	805910 <___vfprintf_internal_r+0x161c>
  805c58:	d8c14d17 	ldw	r3,1332(sp)
  805c5c:	1880100c 	andi	r2,r3,64
  805c60:	1000a026 	beq	r2,zero,805ee4 <___vfprintf_internal_r+0x1bf0>
  805c64:	38800017 	ldw	r2,0(r7)
  805c68:	39c00104 	addi	r7,r7,4
  805c6c:	d9c14115 	stw	r7,1284(sp)
  805c70:	d9014c17 	ldw	r4,1328(sp)
  805c74:	d9c14117 	ldw	r7,1284(sp)
  805c78:	1100000d 	sth	r4,0(r2)
  805c7c:	0039f906 	br	804464 <___vfprintf_internal_r+0x170>
  805c80:	d9015017 	ldw	r4,1344(sp)
  805c84:	b00b883a 	mov	r5,r22
  805c88:	d9800d04 	addi	r6,sp,52
  805c8c:	080429c0 	call	80429c <__sprint_r>
  805c90:	103b501e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805c94:	dc800f17 	ldw	r18,60(sp)
  805c98:	dc400e17 	ldw	r17,56(sp)
  805c9c:	d9000617 	ldw	r4,24(sp)
  805ca0:	d8c01a04 	addi	r3,sp,104
  805ca4:	003f2d06 	br	80595c <___vfprintf_internal_r+0x1668>
  805ca8:	00800184 	movi	r2,6
  805cac:	14c09a36 	bltu	r2,r19,805f18 <___vfprintf_internal_r+0x1c24>
  805cb0:	dcc14615 	stw	r19,1304(sp)
  805cb4:	9800010e 	bge	r19,zero,805cbc <___vfprintf_internal_r+0x19c8>
  805cb8:	d8014615 	stw	zero,1304(sp)
  805cbc:	00802074 	movhi	r2,129
  805cc0:	10936b04 	addi	r2,r2,19884
  805cc4:	980f883a 	mov	r7,r19
  805cc8:	d8814215 	stw	r2,1288(sp)
  805ccc:	003a7806 	br	8046b0 <___vfprintf_internal_r+0x3bc>
  805cd0:	00bfffc4 	movi	r2,-1
  805cd4:	9880e226 	beq	r19,r2,806060 <___vfprintf_internal_r+0x1d6c>
  805cd8:	d9414e17 	ldw	r5,1336(sp)
  805cdc:	008019c4 	movi	r2,103
  805ce0:	2880dc26 	beq	r5,r2,806054 <___vfprintf_internal_r+0x1d60>
  805ce4:	008011c4 	movi	r2,71
  805ce8:	2880da26 	beq	r5,r2,806054 <___vfprintf_internal_r+0x1d60>
  805cec:	d9414d17 	ldw	r5,1332(sp)
  805cf0:	d9014417 	ldw	r4,1296(sp)
  805cf4:	d9814317 	ldw	r6,1292(sp)
  805cf8:	29404014 	ori	r5,r5,256
  805cfc:	d9414d15 	stw	r5,1332(sp)
  805d00:	2000cc16 	blt	r4,zero,806034 <___vfprintf_internal_r+0x1d40>
  805d04:	3021883a 	mov	r16,r6
  805d08:	2023883a 	mov	r17,r4
  805d0c:	0039883a 	mov	fp,zero
  805d10:	d9414e17 	ldw	r5,1336(sp)
  805d14:	00801984 	movi	r2,102
  805d18:	2880b726 	beq	r5,r2,805ff8 <___vfprintf_internal_r+0x1d04>
  805d1c:	00801184 	movi	r2,70
  805d20:	2880b526 	beq	r5,r2,805ff8 <___vfprintf_internal_r+0x1d04>
  805d24:	00801944 	movi	r2,101
  805d28:	2880c826 	beq	r5,r2,80604c <___vfprintf_internal_r+0x1d58>
  805d2c:	00801144 	movi	r2,69
  805d30:	2880c626 	beq	r5,r2,80604c <___vfprintf_internal_r+0x1d58>
  805d34:	9829883a 	mov	r20,r19
  805d38:	d9015017 	ldw	r4,1344(sp)
  805d3c:	d8800604 	addi	r2,sp,24
  805d40:	880d883a 	mov	r6,r17
  805d44:	d8800115 	stw	r2,4(sp)
  805d48:	d8c00704 	addi	r3,sp,28
  805d4c:	d8800804 	addi	r2,sp,32
  805d50:	800b883a 	mov	r5,r16
  805d54:	01c00084 	movi	r7,2
  805d58:	d8c00215 	stw	r3,8(sp)
  805d5c:	d8800315 	stw	r2,12(sp)
  805d60:	dd000015 	stw	r20,0(sp)
  805d64:	0807d800 	call	807d80 <_dtoa_r>
  805d68:	d9814e17 	ldw	r6,1336(sp)
  805d6c:	d8814215 	stw	r2,1288(sp)
  805d70:	008019c4 	movi	r2,103
  805d74:	30809526 	beq	r6,r2,805fcc <___vfprintf_internal_r+0x1cd8>
  805d78:	d8c14e17 	ldw	r3,1336(sp)
  805d7c:	008011c4 	movi	r2,71
  805d80:	18809226 	beq	r3,r2,805fcc <___vfprintf_internal_r+0x1cd8>
  805d84:	d9414217 	ldw	r5,1288(sp)
  805d88:	d9814e17 	ldw	r6,1336(sp)
  805d8c:	00801984 	movi	r2,102
  805d90:	2d25883a 	add	r18,r5,r20
  805d94:	30808626 	beq	r6,r2,805fb0 <___vfprintf_internal_r+0x1cbc>
  805d98:	00801184 	movi	r2,70
  805d9c:	30808426 	beq	r6,r2,805fb0 <___vfprintf_internal_r+0x1cbc>
  805da0:	000d883a 	mov	r6,zero
  805da4:	000f883a 	mov	r7,zero
  805da8:	880b883a 	mov	r5,r17
  805dac:	8009883a 	mov	r4,r16
  805db0:	080f4980 	call	80f498 <__eqdf2>
  805db4:	1000751e 	bne	r2,zero,805f8c <___vfprintf_internal_r+0x1c98>
  805db8:	9005883a 	mov	r2,r18
  805dbc:	dc800815 	stw	r18,32(sp)
  805dc0:	d9014217 	ldw	r4,1288(sp)
  805dc4:	d9414e17 	ldw	r5,1336(sp)
  805dc8:	00c019c4 	movi	r3,103
  805dcc:	1125c83a 	sub	r18,r2,r4
  805dd0:	28c06826 	beq	r5,r3,805f74 <___vfprintf_internal_r+0x1c80>
  805dd4:	008011c4 	movi	r2,71
  805dd8:	28806626 	beq	r5,r2,805f74 <___vfprintf_internal_r+0x1c80>
  805ddc:	d9000617 	ldw	r4,24(sp)
  805de0:	d8c14e17 	ldw	r3,1336(sp)
  805de4:	00801944 	movi	r2,101
  805de8:	10c05516 	blt	r2,r3,805f40 <___vfprintf_internal_r+0x1c4c>
  805dec:	213fffc4 	addi	r4,r4,-1
  805df0:	d9000615 	stw	r4,24(sp)
  805df4:	d8c00905 	stb	r3,36(sp)
  805df8:	2021883a 	mov	r16,r4
  805dfc:	2000c116 	blt	r4,zero,806104 <___vfprintf_internal_r+0x1e10>
  805e00:	00800ac4 	movi	r2,43
  805e04:	d8800945 	stb	r2,37(sp)
  805e08:	00800244 	movi	r2,9
  805e0c:	1400af0e 	bge	r2,r16,8060cc <___vfprintf_internal_r+0x1dd8>
  805e10:	1027883a 	mov	r19,r2
  805e14:	dc400cc4 	addi	r17,sp,51
  805e18:	8009883a 	mov	r4,r16
  805e1c:	01400284 	movi	r5,10
  805e20:	080fc7c0 	call	80fc7c <__modsi3>
  805e24:	10800c04 	addi	r2,r2,48
  805e28:	8c7fffc4 	addi	r17,r17,-1
  805e2c:	8009883a 	mov	r4,r16
  805e30:	01400284 	movi	r5,10
  805e34:	88800005 	stb	r2,0(r17)
  805e38:	080fc1c0 	call	80fc1c <__divsi3>
  805e3c:	1021883a 	mov	r16,r2
  805e40:	98bff516 	blt	r19,r2,805e18 <___vfprintf_internal_r+0x1b24>
  805e44:	10c00c04 	addi	r3,r2,48
  805e48:	d8800b04 	addi	r2,sp,44
  805e4c:	108001c4 	addi	r2,r2,7
  805e50:	897fffc4 	addi	r5,r17,-1
  805e54:	88ffffc5 	stb	r3,-1(r17)
  805e58:	2880a72e 	bgeu	r5,r2,8060f8 <___vfprintf_internal_r+0x1e04>
  805e5c:	1009883a 	mov	r4,r2
  805e60:	d9800904 	addi	r6,sp,36
  805e64:	d8c00984 	addi	r3,sp,38
  805e68:	28800003 	ldbu	r2,0(r5)
  805e6c:	29400044 	addi	r5,r5,1
  805e70:	18800005 	stb	r2,0(r3)
  805e74:	18c00044 	addi	r3,r3,1
  805e78:	293ffb36 	bltu	r5,r4,805e68 <___vfprintf_internal_r+0x1b74>
  805e7c:	1987c83a 	sub	r3,r3,r6
  805e80:	00800044 	movi	r2,1
  805e84:	d8c14915 	stw	r3,1316(sp)
  805e88:	90cf883a 	add	r7,r18,r3
  805e8c:	1480960e 	bge	r2,r18,8060e8 <___vfprintf_internal_r+0x1df4>
  805e90:	39c00044 	addi	r7,r7,1
  805e94:	d9c14615 	stw	r7,1304(sp)
  805e98:	38003416 	blt	r7,zero,805f6c <___vfprintf_internal_r+0x1c78>
  805e9c:	e0803fcc 	andi	r2,fp,255
  805ea0:	1080201c 	xori	r2,r2,128
  805ea4:	10bfe004 	addi	r2,r2,-128
  805ea8:	10004e26 	beq	r2,zero,805fe4 <___vfprintf_internal_r+0x1cf0>
  805eac:	00800b44 	movi	r2,45
  805eb0:	dc814815 	stw	r18,1312(sp)
  805eb4:	d8014715 	stw	zero,1308(sp)
  805eb8:	d8800405 	stb	r2,16(sp)
  805ebc:	003bb106 	br	804d84 <___vfprintf_internal_r+0xa90>
  805ec0:	00800b44 	movi	r2,45
  805ec4:	d8800405 	stb	r2,16(sp)
  805ec8:	003d3306 	br	805398 <___vfprintf_internal_r+0x10a4>
  805ecc:	d9015017 	ldw	r4,1344(sp)
  805ed0:	b00b883a 	mov	r5,r22
  805ed4:	d9800d04 	addi	r6,sp,52
  805ed8:	080429c0 	call	80429c <__sprint_r>
  805edc:	103abd1e 	bne	r2,zero,8049d4 <___vfprintf_internal_r+0x6e0>
  805ee0:	003abb06 	br	8049d0 <___vfprintf_internal_r+0x6dc>
  805ee4:	38800017 	ldw	r2,0(r7)
  805ee8:	39c00104 	addi	r7,r7,4
  805eec:	d9c14115 	stw	r7,1284(sp)
  805ef0:	d9414c17 	ldw	r5,1328(sp)
  805ef4:	d9c14117 	ldw	r7,1284(sp)
  805ef8:	11400015 	stw	r5,0(r2)
  805efc:	00395906 	br	804464 <___vfprintf_internal_r+0x170>
  805f00:	980f883a 	mov	r7,r19
  805f04:	dcc14615 	stw	r19,1304(sp)
  805f08:	d8014715 	stw	zero,1308(sp)
  805f0c:	003b9b06 	br	804d7c <___vfprintf_internal_r+0xa88>
  805f10:	0027883a 	mov	r19,zero
  805f14:	00397806 	br	8044f8 <___vfprintf_internal_r+0x204>
  805f18:	00c02074 	movhi	r3,129
  805f1c:	18d36b04 	addi	r3,r3,19884
  805f20:	100f883a 	mov	r7,r2
  805f24:	d8814615 	stw	r2,1304(sp)
  805f28:	d8c14215 	stw	r3,1288(sp)
  805f2c:	0039e006 	br	8046b0 <___vfprintf_internal_r+0x3bc>
  805f30:	00802074 	movhi	r2,129
  805f34:	10936a04 	addi	r2,r2,19880
  805f38:	d8814215 	stw	r2,1288(sp)
  805f3c:	003d1c06 	br	8053b0 <___vfprintf_internal_r+0x10bc>
  805f40:	d9414e17 	ldw	r5,1336(sp)
  805f44:	00801984 	movi	r2,102
  805f48:	28804926 	beq	r5,r2,806070 <___vfprintf_internal_r+0x1d7c>
  805f4c:	200f883a 	mov	r7,r4
  805f50:	24805716 	blt	r4,r18,8060b0 <___vfprintf_internal_r+0x1dbc>
  805f54:	d9414d17 	ldw	r5,1332(sp)
  805f58:	2880004c 	andi	r2,r5,1
  805f5c:	10000126 	beq	r2,zero,805f64 <___vfprintf_internal_r+0x1c70>
  805f60:	21c00044 	addi	r7,r4,1
  805f64:	d9c14615 	stw	r7,1304(sp)
  805f68:	383fcc0e 	bge	r7,zero,805e9c <___vfprintf_internal_r+0x1ba8>
  805f6c:	d8014615 	stw	zero,1304(sp)
  805f70:	003fca06 	br	805e9c <___vfprintf_internal_r+0x1ba8>
  805f74:	d9000617 	ldw	r4,24(sp)
  805f78:	00bfff04 	movi	r2,-4
  805f7c:	1100480e 	bge	r2,r4,8060a0 <___vfprintf_internal_r+0x1dac>
  805f80:	99004716 	blt	r19,r4,8060a0 <___vfprintf_internal_r+0x1dac>
  805f84:	d8c14e15 	stw	r3,1336(sp)
  805f88:	003ff006 	br	805f4c <___vfprintf_internal_r+0x1c58>
  805f8c:	d8800817 	ldw	r2,32(sp)
  805f90:	14bf8b2e 	bgeu	r2,r18,805dc0 <___vfprintf_internal_r+0x1acc>
  805f94:	9007883a 	mov	r3,r18
  805f98:	01000c04 	movi	r4,48
  805f9c:	11000005 	stb	r4,0(r2)
  805fa0:	10800044 	addi	r2,r2,1
  805fa4:	d8800815 	stw	r2,32(sp)
  805fa8:	18bffc1e 	bne	r3,r2,805f9c <___vfprintf_internal_r+0x1ca8>
  805fac:	003f8406 	br	805dc0 <___vfprintf_internal_r+0x1acc>
  805fb0:	d8814217 	ldw	r2,1288(sp)
  805fb4:	10c00007 	ldb	r3,0(r2)
  805fb8:	00800c04 	movi	r2,48
  805fbc:	18805b26 	beq	r3,r2,80612c <___vfprintf_internal_r+0x1e38>
  805fc0:	d9000617 	ldw	r4,24(sp)
  805fc4:	9125883a 	add	r18,r18,r4
  805fc8:	003f7506 	br	805da0 <___vfprintf_internal_r+0x1aac>
  805fcc:	d9014d17 	ldw	r4,1332(sp)
  805fd0:	2080004c 	andi	r2,r4,1
  805fd4:	1005003a 	cmpeq	r2,r2,zero
  805fd8:	103f6a26 	beq	r2,zero,805d84 <___vfprintf_internal_r+0x1a90>
  805fdc:	d8800817 	ldw	r2,32(sp)
  805fe0:	003f7706 	br	805dc0 <___vfprintf_internal_r+0x1acc>
  805fe4:	d9c14615 	stw	r7,1304(sp)
  805fe8:	38004d16 	blt	r7,zero,806120 <___vfprintf_internal_r+0x1e2c>
  805fec:	dc814815 	stw	r18,1312(sp)
  805ff0:	d8014715 	stw	zero,1308(sp)
  805ff4:	003b6106 	br	804d7c <___vfprintf_internal_r+0xa88>
  805ff8:	d9015017 	ldw	r4,1344(sp)
  805ffc:	d8800604 	addi	r2,sp,24
  806000:	d8800115 	stw	r2,4(sp)
  806004:	d8c00704 	addi	r3,sp,28
  806008:	d8800804 	addi	r2,sp,32
  80600c:	800b883a 	mov	r5,r16
  806010:	880d883a 	mov	r6,r17
  806014:	01c000c4 	movi	r7,3
  806018:	d8c00215 	stw	r3,8(sp)
  80601c:	d8800315 	stw	r2,12(sp)
  806020:	dcc00015 	stw	r19,0(sp)
  806024:	9829883a 	mov	r20,r19
  806028:	0807d800 	call	807d80 <_dtoa_r>
  80602c:	d8814215 	stw	r2,1288(sp)
  806030:	003f5106 	br	805d78 <___vfprintf_internal_r+0x1a84>
  806034:	d8c14317 	ldw	r3,1292(sp)
  806038:	d9014417 	ldw	r4,1296(sp)
  80603c:	07000b44 	movi	fp,45
  806040:	1821883a 	mov	r16,r3
  806044:	2460003c 	xorhi	r17,r4,32768
  806048:	003f3106 	br	805d10 <___vfprintf_internal_r+0x1a1c>
  80604c:	9d000044 	addi	r20,r19,1
  806050:	003f3906 	br	805d38 <___vfprintf_internal_r+0x1a44>
  806054:	983f251e 	bne	r19,zero,805cec <___vfprintf_internal_r+0x19f8>
  806058:	04c00044 	movi	r19,1
  80605c:	003f2306 	br	805cec <___vfprintf_internal_r+0x19f8>
  806060:	04c00184 	movi	r19,6
  806064:	003f2106 	br	805cec <___vfprintf_internal_r+0x19f8>
  806068:	d8014615 	stw	zero,1304(sp)
  80606c:	003eee06 	br	805c28 <___vfprintf_internal_r+0x1934>
  806070:	200f883a 	mov	r7,r4
  806074:	0100370e 	bge	zero,r4,806154 <___vfprintf_internal_r+0x1e60>
  806078:	9800031e 	bne	r19,zero,806088 <___vfprintf_internal_r+0x1d94>
  80607c:	d9814d17 	ldw	r6,1332(sp)
  806080:	3080004c 	andi	r2,r6,1
  806084:	103fb726 	beq	r2,zero,805f64 <___vfprintf_internal_r+0x1c70>
  806088:	20800044 	addi	r2,r4,1
  80608c:	98a7883a 	add	r19,r19,r2
  806090:	dcc14615 	stw	r19,1304(sp)
  806094:	980f883a 	mov	r7,r19
  806098:	983f800e 	bge	r19,zero,805e9c <___vfprintf_internal_r+0x1ba8>
  80609c:	003fb306 	br	805f6c <___vfprintf_internal_r+0x1c78>
  8060a0:	d9814e17 	ldw	r6,1336(sp)
  8060a4:	31bfff84 	addi	r6,r6,-2
  8060a8:	d9814e15 	stw	r6,1336(sp)
  8060ac:	003f4c06 	br	805de0 <___vfprintf_internal_r+0x1aec>
  8060b0:	0100180e 	bge	zero,r4,806114 <___vfprintf_internal_r+0x1e20>
  8060b4:	00800044 	movi	r2,1
  8060b8:	1485883a 	add	r2,r2,r18
  8060bc:	d8814615 	stw	r2,1304(sp)
  8060c0:	100f883a 	mov	r7,r2
  8060c4:	103f750e 	bge	r2,zero,805e9c <___vfprintf_internal_r+0x1ba8>
  8060c8:	003fa806 	br	805f6c <___vfprintf_internal_r+0x1c78>
  8060cc:	80c00c04 	addi	r3,r16,48
  8060d0:	00800c04 	movi	r2,48
  8060d4:	d8c009c5 	stb	r3,39(sp)
  8060d8:	d9800904 	addi	r6,sp,36
  8060dc:	d8c00a04 	addi	r3,sp,40
  8060e0:	d8800985 	stb	r2,38(sp)
  8060e4:	003f6506 	br	805e7c <___vfprintf_internal_r+0x1b88>
  8060e8:	d9014d17 	ldw	r4,1332(sp)
  8060ec:	2084703a 	and	r2,r4,r2
  8060f0:	103f9c26 	beq	r2,zero,805f64 <___vfprintf_internal_r+0x1c70>
  8060f4:	003f6606 	br	805e90 <___vfprintf_internal_r+0x1b9c>
  8060f8:	d9800904 	addi	r6,sp,36
  8060fc:	d8c00984 	addi	r3,sp,38
  806100:	003f5e06 	br	805e7c <___vfprintf_internal_r+0x1b88>
  806104:	00800b44 	movi	r2,45
  806108:	0121c83a 	sub	r16,zero,r4
  80610c:	d8800945 	stb	r2,37(sp)
  806110:	003f3d06 	br	805e08 <___vfprintf_internal_r+0x1b14>
  806114:	00800084 	movi	r2,2
  806118:	1105c83a 	sub	r2,r2,r4
  80611c:	003fe606 	br	8060b8 <___vfprintf_internal_r+0x1dc4>
  806120:	d8014615 	stw	zero,1304(sp)
  806124:	dc814815 	stw	r18,1312(sp)
  806128:	003fb106 	br	805ff0 <___vfprintf_internal_r+0x1cfc>
  80612c:	000d883a 	mov	r6,zero
  806130:	000f883a 	mov	r7,zero
  806134:	8009883a 	mov	r4,r16
  806138:	880b883a 	mov	r5,r17
  80613c:	080f5200 	call	80f520 <__nedf2>
  806140:	103f9f26 	beq	r2,zero,805fc0 <___vfprintf_internal_r+0x1ccc>
  806144:	00800044 	movi	r2,1
  806148:	1509c83a 	sub	r4,r2,r20
  80614c:	d9000615 	stw	r4,24(sp)
  806150:	003f9b06 	br	805fc0 <___vfprintf_internal_r+0x1ccc>
  806154:	98000d1e 	bne	r19,zero,80618c <___vfprintf_internal_r+0x1e98>
  806158:	d8c14d17 	ldw	r3,1332(sp)
  80615c:	1880004c 	andi	r2,r3,1
  806160:	10000a1e 	bne	r2,zero,80618c <___vfprintf_internal_r+0x1e98>
  806164:	01000044 	movi	r4,1
  806168:	200f883a 	mov	r7,r4
  80616c:	d9014615 	stw	r4,1304(sp)
  806170:	003f4a06 	br	805e9c <___vfprintf_internal_r+0x1ba8>
  806174:	3cc00017 	ldw	r19,0(r7)
  806178:	39c00104 	addi	r7,r7,4
  80617c:	983d0e0e 	bge	r19,zero,8055b8 <___vfprintf_internal_r+0x12c4>
  806180:	b8c00007 	ldb	r3,0(r23)
  806184:	04ffffc4 	movi	r19,-1
  806188:	0038d906 	br	8044f0 <___vfprintf_internal_r+0x1fc>
  80618c:	9cc00084 	addi	r19,r19,2
  806190:	dcc14615 	stw	r19,1304(sp)
  806194:	980f883a 	mov	r7,r19
  806198:	983f400e 	bge	r19,zero,805e9c <___vfprintf_internal_r+0x1ba8>
  80619c:	003f7306 	br	805f6c <___vfprintf_internal_r+0x1c78>

008061a0 <__vfprintf_internal>:
  8061a0:	00802074 	movhi	r2,129
  8061a4:	109c1404 	addi	r2,r2,28752
  8061a8:	2013883a 	mov	r9,r4
  8061ac:	11000017 	ldw	r4,0(r2)
  8061b0:	2805883a 	mov	r2,r5
  8061b4:	300f883a 	mov	r7,r6
  8061b8:	480b883a 	mov	r5,r9
  8061bc:	100d883a 	mov	r6,r2
  8061c0:	08042f41 	jmpi	8042f4 <___vfprintf_internal_r>

008061c4 <__svfscanf_r>:
  8061c4:	deff4e04 	addi	sp,sp,-712
  8061c8:	dd80ae15 	stw	r22,696(sp)
  8061cc:	dd00ac15 	stw	r20,688(sp)
  8061d0:	dc40a915 	stw	r17,676(sp)
  8061d4:	dc00a815 	stw	r16,672(sp)
  8061d8:	dfc0b115 	stw	ra,708(sp)
  8061dc:	df00b015 	stw	fp,704(sp)
  8061e0:	ddc0af15 	stw	r23,700(sp)
  8061e4:	dd40ad15 	stw	r21,692(sp)
  8061e8:	dcc0ab15 	stw	r19,684(sp)
  8061ec:	dc80aa15 	stw	r18,680(sp)
  8061f0:	202d883a 	mov	r22,r4
  8061f4:	2821883a 	mov	r16,r5
  8061f8:	d9c0a415 	stw	r7,656(sp)
  8061fc:	3029883a 	mov	r20,r6
  806200:	d800a215 	stw	zero,648(sp)
  806204:	0023883a 	mov	r17,zero
  806208:	d800a115 	stw	zero,644(sp)
  80620c:	d800a015 	stw	zero,640(sp)
  806210:	a1000007 	ldb	r4,0(r20)
  806214:	d9000115 	stw	r4,4(sp)
  806218:	20001f26 	beq	r4,zero,806298 <__svfscanf_r+0xd4>
  80621c:	04802074 	movhi	r18,129
  806220:	949c1804 	addi	r18,r18,28768
  806224:	91800017 	ldw	r6,0(r18)
  806228:	a5000044 	addi	r20,r20,1
  80622c:	3107883a 	add	r3,r6,r4
  806230:	18800003 	ldbu	r2,0(r3)
  806234:	1080020c 	andi	r2,r2,8
  806238:	10002426 	beq	r2,zero,8062cc <__svfscanf_r+0x108>
  80623c:	80c00117 	ldw	r3,4(r16)
  806240:	00c00e0e 	bge	zero,r3,80627c <__svfscanf_r+0xb8>
  806244:	81400017 	ldw	r5,0(r16)
  806248:	90800017 	ldw	r2,0(r18)
  80624c:	28c00003 	ldbu	r3,0(r5)
  806250:	1887883a 	add	r3,r3,r2
  806254:	19000003 	ldbu	r4,0(r3)
  806258:	2100020c 	andi	r4,r4,8
  80625c:	203fec26 	beq	r4,zero,806210 <__svfscanf_r+0x4c>
  806260:	80c00117 	ldw	r3,4(r16)
  806264:	29800044 	addi	r6,r5,1
  806268:	8c400044 	addi	r17,r17,1
  80626c:	18ffffc4 	addi	r3,r3,-1
  806270:	81800015 	stw	r6,0(r16)
  806274:	80c00115 	stw	r3,4(r16)
  806278:	00fff216 	blt	zero,r3,806244 <__svfscanf_r+0x80>
  80627c:	b009883a 	mov	r4,r22
  806280:	800b883a 	mov	r5,r16
  806284:	0803c440 	call	803c44 <__srefill_r>
  806288:	103fee26 	beq	r2,zero,806244 <__svfscanf_r+0x80>
  80628c:	a1000007 	ldb	r4,0(r20)
  806290:	d9000115 	stw	r4,4(sp)
  806294:	203fe11e 	bne	r4,zero,80621c <__svfscanf_r+0x58>
  806298:	d880a217 	ldw	r2,648(sp)
  80629c:	dfc0b117 	ldw	ra,708(sp)
  8062a0:	df00b017 	ldw	fp,704(sp)
  8062a4:	ddc0af17 	ldw	r23,700(sp)
  8062a8:	dd80ae17 	ldw	r22,696(sp)
  8062ac:	dd40ad17 	ldw	r21,692(sp)
  8062b0:	dd00ac17 	ldw	r20,688(sp)
  8062b4:	dcc0ab17 	ldw	r19,684(sp)
  8062b8:	dc80aa17 	ldw	r18,680(sp)
  8062bc:	dc40a917 	ldw	r17,676(sp)
  8062c0:	dc00a817 	ldw	r16,672(sp)
  8062c4:	dec0b204 	addi	sp,sp,712
  8062c8:	f800283a 	ret
  8062cc:	00800944 	movi	r2,37
  8062d0:	20801626 	beq	r4,r2,80632c <__svfscanf_r+0x168>
  8062d4:	80800117 	ldw	r2,4(r16)
  8062d8:	00800b0e 	bge	zero,r2,806308 <__svfscanf_r+0x144>
  8062dc:	81000017 	ldw	r4,0(r16)
  8062e0:	a0ffffc7 	ldb	r3,-1(r20)
  8062e4:	20800003 	ldbu	r2,0(r4)
  8062e8:	10ffeb1e 	bne	r2,r3,806298 <__svfscanf_r+0xd4>
  8062ec:	80c00117 	ldw	r3,4(r16)
  8062f0:	21800044 	addi	r6,r4,1
  8062f4:	8c400044 	addi	r17,r17,1
  8062f8:	18ffffc4 	addi	r3,r3,-1
  8062fc:	80c00115 	stw	r3,4(r16)
  806300:	81800015 	stw	r6,0(r16)
  806304:	003fc206 	br	806210 <__svfscanf_r+0x4c>
  806308:	b009883a 	mov	r4,r22
  80630c:	800b883a 	mov	r5,r16
  806310:	0803c440 	call	803c44 <__srefill_r>
  806314:	103ff126 	beq	r2,zero,8062dc <__svfscanf_r+0x118>
  806318:	d900a217 	ldw	r4,648(sp)
  80631c:	2004c91e 	bne	r4,zero,807644 <__svfscanf_r+0x1480>
  806320:	00bfffc4 	movi	r2,-1
  806324:	d880a215 	stw	r2,648(sp)
  806328:	003fdb06 	br	806298 <__svfscanf_r+0xd4>
  80632c:	d800a315 	stw	zero,652(sp)
  806330:	0027883a 	mov	r19,zero
  806334:	a0c00003 	ldbu	r3,0(r20)
  806338:	00801e04 	movi	r2,120
  80633c:	a5000044 	addi	r20,r20,1
  806340:	19403fcc 	andi	r5,r3,255
  806344:	2940201c 	xori	r5,r5,128
  806348:	297fe004 	addi	r5,r5,-128
  80634c:	10c08036 	bltu	r2,r3,806550 <__svfscanf_r+0x38c>
  806350:	18c5883a 	add	r2,r3,r3
  806354:	1085883a 	add	r2,r2,r2
  806358:	00c02034 	movhi	r3,128
  80635c:	18d8db04 	addi	r3,r3,25452
  806360:	10c5883a 	add	r2,r2,r3
  806364:	11000017 	ldw	r4,0(r2)
  806368:	2000683a 	jmp	r4
  80636c:	00806320 	cmpeqi	r2,zero,396
  806370:	00806550 	cmplti	r2,zero,405
  806374:	00806550 	cmplti	r2,zero,405
  806378:	00806550 	cmplti	r2,zero,405
  80637c:	00806550 	cmplti	r2,zero,405
  806380:	00806550 	cmplti	r2,zero,405
  806384:	00806550 	cmplti	r2,zero,405
  806388:	00806550 	cmplti	r2,zero,405
  80638c:	00806550 	cmplti	r2,zero,405
  806390:	00806550 	cmplti	r2,zero,405
  806394:	00806550 	cmplti	r2,zero,405
  806398:	00806550 	cmplti	r2,zero,405
  80639c:	00806550 	cmplti	r2,zero,405
  8063a0:	00806550 	cmplti	r2,zero,405
  8063a4:	00806550 	cmplti	r2,zero,405
  8063a8:	00806550 	cmplti	r2,zero,405
  8063ac:	00806550 	cmplti	r2,zero,405
  8063b0:	00806550 	cmplti	r2,zero,405
  8063b4:	00806550 	cmplti	r2,zero,405
  8063b8:	00806550 	cmplti	r2,zero,405
  8063bc:	00806550 	cmplti	r2,zero,405
  8063c0:	00806550 	cmplti	r2,zero,405
  8063c4:	00806550 	cmplti	r2,zero,405
  8063c8:	00806550 	cmplti	r2,zero,405
  8063cc:	00806550 	cmplti	r2,zero,405
  8063d0:	00806550 	cmplti	r2,zero,405
  8063d4:	00806550 	cmplti	r2,zero,405
  8063d8:	00806550 	cmplti	r2,zero,405
  8063dc:	00806550 	cmplti	r2,zero,405
  8063e0:	00806550 	cmplti	r2,zero,405
  8063e4:	00806550 	cmplti	r2,zero,405
  8063e8:	00806550 	cmplti	r2,zero,405
  8063ec:	00806550 	cmplti	r2,zero,405
  8063f0:	00806550 	cmplti	r2,zero,405
  8063f4:	00806550 	cmplti	r2,zero,405
  8063f8:	00806550 	cmplti	r2,zero,405
  8063fc:	00806550 	cmplti	r2,zero,405
  806400:	008062d4 	movui	r2,395
  806404:	00806550 	cmplti	r2,zero,405
  806408:	00806550 	cmplti	r2,zero,405
  80640c:	00806550 	cmplti	r2,zero,405
  806410:	00806550 	cmplti	r2,zero,405
  806414:	00807574 	movhi	r2,469
  806418:	00806550 	cmplti	r2,zero,405
  80641c:	00806550 	cmplti	r2,zero,405
  806420:	00806550 	cmplti	r2,zero,405
  806424:	00806550 	cmplti	r2,zero,405
  806428:	00806550 	cmplti	r2,zero,405
  80642c:	00806f70 	cmpltui	r2,zero,445
  806430:	00806f70 	cmpltui	r2,zero,445
  806434:	00806f70 	cmpltui	r2,zero,445
  806438:	00806f70 	cmpltui	r2,zero,445
  80643c:	00806f70 	cmpltui	r2,zero,445
  806440:	00806f70 	cmpltui	r2,zero,445
  806444:	00806f70 	cmpltui	r2,zero,445
  806448:	00806f70 	cmpltui	r2,zero,445
  80644c:	00806f70 	cmpltui	r2,zero,445
  806450:	00806f70 	cmpltui	r2,zero,445
  806454:	00806550 	cmplti	r2,zero,405
  806458:	00806550 	cmplti	r2,zero,405
  80645c:	00806550 	cmplti	r2,zero,405
  806460:	00806550 	cmplti	r2,zero,405
  806464:	00806550 	cmplti	r2,zero,405
  806468:	00806550 	cmplti	r2,zero,405
  80646c:	00806550 	cmplti	r2,zero,405
  806470:	00806550 	cmplti	r2,zero,405
  806474:	00806550 	cmplti	r2,zero,405
  806478:	00806550 	cmplti	r2,zero,405
  80647c:	008076f0 	cmpltui	r2,zero,475
  806480:	008076e8 	cmpgeui	r2,zero,475
  806484:	00806550 	cmplti	r2,zero,405
  806488:	008076e8 	cmpgeui	r2,zero,475
  80648c:	00806550 	cmplti	r2,zero,405
  806490:	00806550 	cmplti	r2,zero,405
  806494:	00806550 	cmplti	r2,zero,405
  806498:	00806550 	cmplti	r2,zero,405
  80649c:	00807780 	call	80778 <__reset-0x77f888>
  8064a0:	00806550 	cmplti	r2,zero,405
  8064a4:	00806550 	cmplti	r2,zero,405
  8064a8:	00807738 	rdprs	r2,zero,476
  8064ac:	00806550 	cmplti	r2,zero,405
  8064b0:	00806550 	cmplti	r2,zero,405
  8064b4:	00806550 	cmplti	r2,zero,405
  8064b8:	00806550 	cmplti	r2,zero,405
  8064bc:	00806550 	cmplti	r2,zero,405
  8064c0:	00806550 	cmplti	r2,zero,405
  8064c4:	00806550 	cmplti	r2,zero,405
  8064c8:	00806550 	cmplti	r2,zero,405
  8064cc:	0080757c 	xorhi	r2,zero,469
  8064d0:	00806550 	cmplti	r2,zero,405
  8064d4:	00806550 	cmplti	r2,zero,405
  8064d8:	0080771c 	xori	r2,zero,476
  8064dc:	00806550 	cmplti	r2,zero,405
  8064e0:	00806550 	cmplti	r2,zero,405
  8064e4:	00806550 	cmplti	r2,zero,405
  8064e8:	00806550 	cmplti	r2,zero,405
  8064ec:	00806550 	cmplti	r2,zero,405
  8064f0:	00806550 	cmplti	r2,zero,405
  8064f4:	00806550 	cmplti	r2,zero,405
  8064f8:	00807710 	cmplti	r2,zero,476
  8064fc:	008076f4 	movhi	r2,475
  806500:	008076e8 	cmpgeui	r2,zero,475
  806504:	008076e8 	cmpgeui	r2,zero,475
  806508:	008076e8 	cmpgeui	r2,zero,475
  80650c:	008076e0 	cmpeqi	r2,zero,475
  806510:	008077d4 	movui	r2,479
  806514:	00806550 	cmplti	r2,zero,405
  806518:	00806550 	cmplti	r2,zero,405
  80651c:	008077c0 	call	8077c <__reset-0x77f884>
  806520:	00806550 	cmplti	r2,zero,405
  806524:	00807758 	cmpnei	r2,zero,477
  806528:	0080773c 	xorhi	r2,zero,476
  80652c:	00807790 	cmplti	r2,zero,478
  806530:	00806550 	cmplti	r2,zero,405
  806534:	00806550 	cmplti	r2,zero,405
  806538:	00807788 	cmpgei	r2,zero,478
  80653c:	00806550 	cmplti	r2,zero,405
  806540:	00806ac0 	call	806ac <__reset-0x77f954>
  806544:	00806550 	cmplti	r2,zero,405
  806548:	00806550 	cmplti	r2,zero,405
  80654c:	0080757c 	xorhi	r2,zero,469
  806550:	2987883a 	add	r3,r5,r6
  806554:	18800003 	ldbu	r2,0(r3)
  806558:	1080004c 	andi	r2,r2,1
  80655c:	1005003a 	cmpeq	r2,r2,zero
  806560:	10002c26 	beq	r2,zero,806614 <__svfscanf_r+0x450>
  806564:	01002074 	movhi	r4,129
  806568:	21306d04 	addi	r4,r4,-15948
  80656c:	00800284 	movi	r2,10
  806570:	d900a015 	stw	r4,640(sp)
  806574:	054000c4 	movi	r21,3
  806578:	d880a115 	stw	r2,644(sp)
  80657c:	80c00117 	ldw	r3,4(r16)
  806580:	00c14a0e 	bge	zero,r3,806aac <__svfscanf_r+0x8e8>
  806584:	9880100c 	andi	r2,r19,64
  806588:	10001326 	beq	r2,zero,8065d8 <__svfscanf_r+0x414>
  80658c:	00800104 	movi	r2,4
  806590:	157f1f36 	bltu	r2,r21,806210 <__svfscanf_r+0x4c>
  806594:	ad45883a 	add	r2,r21,r21
  806598:	1085883a 	add	r2,r2,r2
  80659c:	00c02034 	movhi	r3,128
  8065a0:	18d96c04 	addi	r3,r3,26032
  8065a4:	10c5883a 	add	r2,r2,r3
  8065a8:	11000017 	ldw	r4,0(r2)
  8065ac:	2000683a 	jmp	r4
  8065b0:	0080661c 	xori	r2,zero,408
  8065b4:	00806728 	cmpgeui	r2,zero,412
  8065b8:	0080679c 	xori	r2,zero,414
  8065bc:	00806a88 	cmpgei	r2,zero,426
  8065c0:	008068d4 	movui	r2,419
  8065c4:	b009883a 	mov	r4,r22
  8065c8:	800b883a 	mov	r5,r16
  8065cc:	0803c440 	call	803c44 <__srefill_r>
  8065d0:	103f511e 	bne	r2,zero,806318 <__svfscanf_r+0x154>
  8065d4:	8c400044 	addi	r17,r17,1
  8065d8:	81400017 	ldw	r5,0(r16)
  8065dc:	90800017 	ldw	r2,0(r18)
  8065e0:	28c00003 	ldbu	r3,0(r5)
  8065e4:	1887883a 	add	r3,r3,r2
  8065e8:	19000003 	ldbu	r4,0(r3)
  8065ec:	2100020c 	andi	r4,r4,8
  8065f0:	203fe626 	beq	r4,zero,80658c <__svfscanf_r+0x3c8>
  8065f4:	80c00117 	ldw	r3,4(r16)
  8065f8:	18ffffc4 	addi	r3,r3,-1
  8065fc:	80c00115 	stw	r3,4(r16)
  806600:	00fff00e 	bge	zero,r3,8065c4 <__svfscanf_r+0x400>
  806604:	29800044 	addi	r6,r5,1
  806608:	8c400044 	addi	r17,r17,1
  80660c:	81800015 	stw	r6,0(r16)
  806610:	003ff106 	br	8065d8 <__svfscanf_r+0x414>
  806614:	9cc00054 	ori	r19,r19,1
  806618:	003fd206 	br	806564 <__svfscanf_r+0x3a0>
  80661c:	d8c0a317 	ldw	r3,652(sp)
  806620:	1800021e 	bne	r3,zero,80662c <__svfscanf_r+0x468>
  806624:	01000044 	movi	r4,1
  806628:	d900a315 	stw	r4,652(sp)
  80662c:	9880004c 	andi	r2,r19,1
  806630:	1005003a 	cmpeq	r2,r2,zero
  806634:	1003d91e 	bne	r2,zero,80759c <__svfscanf_r+0x13d8>
  806638:	9d40040c 	andi	r21,r19,16
  80663c:	a839003a 	cmpeq	fp,r21,zero
  806640:	e0042526 	beq	fp,zero,8076d8 <__svfscanf_r+0x1514>
  806644:	d880a417 	ldw	r2,656(sp)
  806648:	14c00017 	ldw	r19,0(r2)
  80664c:	10800104 	addi	r2,r2,4
  806650:	d880a415 	stw	r2,656(sp)
  806654:	d8c0a317 	ldw	r3,652(sp)
  806658:	18041a26 	beq	r3,zero,8076c4 <__svfscanf_r+0x1500>
  80665c:	01002074 	movhi	r4,129
  806660:	211c1904 	addi	r4,r4,28772
  806664:	20800017 	ldw	r2,0(r4)
  806668:	103f2b26 	beq	r2,zero,806318 <__svfscanf_r+0x154>
  80666c:	d8804404 	addi	r2,sp,272
  806670:	0025883a 	mov	r18,zero
  806674:	d880a615 	stw	r2,664(sp)
  806678:	05ffffc4 	movi	r23,-1
  80667c:	80800017 	ldw	r2,0(r16)
  806680:	80c00117 	ldw	r3,4(r16)
  806684:	d900a617 	ldw	r4,664(sp)
  806688:	12000003 	ldbu	r8,0(r2)
  80668c:	18ffffc4 	addi	r3,r3,-1
  806690:	11800044 	addi	r6,r2,1
  806694:	248f883a 	add	r7,r4,r18
  806698:	80c00115 	stw	r3,4(r16)
  80669c:	81800015 	stw	r6,0(r16)
  8066a0:	3a000005 	stb	r8,0(r7)
  8066a4:	d9000204 	addi	r4,sp,8
  8066a8:	000b883a 	mov	r5,zero
  8066ac:	01800204 	movi	r6,8
  8066b0:	08034140 	call	803414 <memset>
  8066b4:	d980a617 	ldw	r6,664(sp)
  8066b8:	94800044 	addi	r18,r18,1
  8066bc:	d8800204 	addi	r2,sp,8
  8066c0:	b009883a 	mov	r4,r22
  8066c4:	980b883a 	mov	r5,r19
  8066c8:	900f883a 	mov	r7,r18
  8066cc:	d8800015 	stw	r2,0(sp)
  8066d0:	08097e80 	call	8097e8 <_mbrtowc_r>
  8066d4:	1007883a 	mov	r3,r2
  8066d8:	15ff0f26 	beq	r2,r23,806318 <__svfscanf_r+0x154>
  8066dc:	1003f11e 	bne	r2,zero,8076a4 <__svfscanf_r+0x14e0>
  8066e0:	a800011e 	bne	r21,zero,8066e8 <__svfscanf_r+0x524>
  8066e4:	98000015 	stw	zero,0(r19)
  8066e8:	d8c0a317 	ldw	r3,652(sp)
  8066ec:	8ca3883a 	add	r17,r17,r18
  8066f0:	18ffffc4 	addi	r3,r3,-1
  8066f4:	d8c0a315 	stw	r3,652(sp)
  8066f8:	e0000126 	beq	fp,zero,806700 <__svfscanf_r+0x53c>
  8066fc:	9cc00104 	addi	r19,r19,4
  806700:	0025883a 	mov	r18,zero
  806704:	80c00117 	ldw	r3,4(r16)
  806708:	00c3e90e 	bge	zero,r3,8076b0 <__svfscanf_r+0x14ec>
  80670c:	d900a317 	ldw	r4,652(sp)
  806710:	2003ec26 	beq	r4,zero,8076c4 <__svfscanf_r+0x1500>
  806714:	00c02074 	movhi	r3,129
  806718:	18dc1904 	addi	r3,r3,28772
  80671c:	18800017 	ldw	r2,0(r3)
  806720:	90bfd61e 	bne	r18,r2,80667c <__svfscanf_r+0x4b8>
  806724:	003efc06 	br	806318 <__svfscanf_r+0x154>
  806728:	d880a317 	ldw	r2,652(sp)
  80672c:	1000021e 	bne	r2,zero,806738 <__svfscanf_r+0x574>
  806730:	00ffffc4 	movi	r3,-1
  806734:	d8c0a315 	stw	r3,652(sp)
  806738:	9880040c 	andi	r2,r19,16
  80673c:	10036526 	beq	r2,zero,8074d4 <__svfscanf_r+0x1310>
  806740:	0027883a 	mov	r19,zero
  806744:	dd400404 	addi	r21,sp,16
  806748:	81000017 	ldw	r4,0(r16)
  80674c:	20800003 	ldbu	r2,0(r4)
  806750:	a885883a 	add	r2,r21,r2
  806754:	10c00007 	ldb	r3,0(r2)
  806758:	1803be26 	beq	r3,zero,807654 <__svfscanf_r+0x1490>
  80675c:	80c00117 	ldw	r3,4(r16)
  806760:	21800044 	addi	r6,r4,1
  806764:	d900a317 	ldw	r4,652(sp)
  806768:	18ffffc4 	addi	r3,r3,-1
  80676c:	9cc00044 	addi	r19,r19,1
  806770:	81800015 	stw	r6,0(r16)
  806774:	80c00115 	stw	r3,4(r16)
  806778:	24c3b626 	beq	r4,r19,807654 <__svfscanf_r+0x1490>
  80677c:	00fff216 	blt	zero,r3,806748 <__svfscanf_r+0x584>
  806780:	b009883a 	mov	r4,r22
  806784:	800b883a 	mov	r5,r16
  806788:	0803c440 	call	803c44 <__srefill_r>
  80678c:	103fee26 	beq	r2,zero,806748 <__svfscanf_r+0x584>
  806790:	983ee126 	beq	r19,zero,806318 <__svfscanf_r+0x154>
  806794:	8ce3883a 	add	r17,r17,r19
  806798:	003e9d06 	br	806210 <__svfscanf_r+0x4c>
  80679c:	d900a317 	ldw	r4,652(sp)
  8067a0:	2000021e 	bne	r4,zero,8067ac <__svfscanf_r+0x5e8>
  8067a4:	00bfffc4 	movi	r2,-1
  8067a8:	d880a315 	stw	r2,652(sp)
  8067ac:	9880004c 	andi	r2,r19,1
  8067b0:	1005003a 	cmpeq	r2,r2,zero
  8067b4:	1001f41e 	bne	r2,zero,806f88 <__svfscanf_r+0xdc4>
  8067b8:	9dc0040c 	andi	r23,r19,16
  8067bc:	b807003a 	cmpeq	r3,r23,zero
  8067c0:	d8c0a515 	stw	r3,660(sp)
  8067c4:	1803b21e 	bne	r3,zero,807690 <__svfscanf_r+0x14cc>
  8067c8:	dd400104 	addi	r21,sp,4
  8067cc:	0027883a 	mov	r19,zero
  8067d0:	073fffc4 	movi	fp,-1
  8067d4:	81400017 	ldw	r5,0(r16)
  8067d8:	90800017 	ldw	r2,0(r18)
  8067dc:	29c00003 	ldbu	r7,0(r5)
  8067e0:	38c03fcc 	andi	r3,r7,255
  8067e4:	1887883a 	add	r3,r3,r2
  8067e8:	19000003 	ldbu	r4,0(r3)
  8067ec:	2100020c 	andi	r4,r4,8
  8067f0:	2000321e 	bne	r4,zero,8068bc <__svfscanf_r+0x6f8>
  8067f4:	d8c0a317 	ldw	r3,652(sp)
  8067f8:	18003026 	beq	r3,zero,8068bc <__svfscanf_r+0x6f8>
  8067fc:	00802074 	movhi	r2,129
  806800:	109c1904 	addi	r2,r2,28772
  806804:	10c00017 	ldw	r3,0(r2)
  806808:	98fec326 	beq	r19,r3,806318 <__svfscanf_r+0x154>
  80680c:	d8c04404 	addi	r3,sp,272
  806810:	80800117 	ldw	r2,4(r16)
  806814:	d8c0a615 	stw	r3,664(sp)
  806818:	d900a617 	ldw	r4,664(sp)
  80681c:	10ffffc4 	addi	r3,r2,-1
  806820:	29800044 	addi	r6,r5,1
  806824:	80c00115 	stw	r3,4(r16)
  806828:	24c5883a 	add	r2,r4,r19
  80682c:	81800015 	stw	r6,0(r16)
  806830:	d9000204 	addi	r4,sp,8
  806834:	000b883a 	mov	r5,zero
  806838:	01800204 	movi	r6,8
  80683c:	11c00005 	stb	r7,0(r2)
  806840:	08034140 	call	803414 <memset>
  806844:	d980a617 	ldw	r6,664(sp)
  806848:	9cc00044 	addi	r19,r19,1
  80684c:	d8800204 	addi	r2,sp,8
  806850:	b009883a 	mov	r4,r22
  806854:	a80b883a 	mov	r5,r21
  806858:	980f883a 	mov	r7,r19
  80685c:	d8800015 	stw	r2,0(sp)
  806860:	08097e80 	call	8097e8 <_mbrtowc_r>
  806864:	1007883a 	mov	r3,r2
  806868:	173eab26 	beq	r2,fp,806318 <__svfscanf_r+0x154>
  80686c:	1003851e 	bne	r2,zero,807684 <__svfscanf_r+0x14c0>
  806870:	a8000015 	stw	zero,0(r21)
  806874:	a9000017 	ldw	r4,0(r21)
  806878:	08096800 	call	809680 <iswspace>
  80687c:	1003781e 	bne	r2,zero,807660 <__svfscanf_r+0x149c>
  806880:	d900a317 	ldw	r4,652(sp)
  806884:	d880a517 	ldw	r2,660(sp)
  806888:	8ce3883a 	add	r17,r17,r19
  80688c:	213fffc4 	addi	r4,r4,-1
  806890:	d900a315 	stw	r4,652(sp)
  806894:	10000126 	beq	r2,zero,80689c <__svfscanf_r+0x6d8>
  806898:	ad400104 	addi	r21,r21,4
  80689c:	0027883a 	mov	r19,zero
  8068a0:	80c00117 	ldw	r3,4(r16)
  8068a4:	00ffcb16 	blt	zero,r3,8067d4 <__svfscanf_r+0x610>
  8068a8:	b009883a 	mov	r4,r22
  8068ac:	800b883a 	mov	r5,r16
  8068b0:	0803c440 	call	803c44 <__srefill_r>
  8068b4:	103fc726 	beq	r2,zero,8067d4 <__svfscanf_r+0x610>
  8068b8:	983e971e 	bne	r19,zero,806318 <__svfscanf_r+0x154>
  8068bc:	b83e541e 	bne	r23,zero,806210 <__svfscanf_r+0x4c>
  8068c0:	d900a217 	ldw	r4,648(sp)
  8068c4:	a8000015 	stw	zero,0(r21)
  8068c8:	21000044 	addi	r4,r4,1
  8068cc:	d900a215 	stw	r4,648(sp)
  8068d0:	003e4f06 	br	806210 <__svfscanf_r+0x4c>
  8068d4:	d900a317 	ldw	r4,652(sp)
  8068d8:	00805704 	movi	r2,348
  8068dc:	20ffffc4 	addi	r3,r4,-1
  8068e0:	10c1ed2e 	bgeu	r2,r3,807098 <__svfscanf_r+0xed4>
  8068e4:	00805744 	movi	r2,349
  8068e8:	21bfa8c4 	addi	r6,r4,-349
  8068ec:	9d41e014 	ori	r21,r19,1920
  8068f0:	d880a315 	stw	r2,652(sp)
  8068f4:	d8c04404 	addi	r3,sp,272
  8068f8:	d8c0a615 	stw	r3,664(sp)
  8068fc:	182f883a 	mov	r23,r3
  806900:	d8009f15 	stw	zero,636(sp)
  806904:	d8009e15 	stw	zero,632(sp)
  806908:	d8009d15 	stw	zero,628(sp)
  80690c:	d8009c15 	stw	zero,624(sp)
  806910:	0039883a 	mov	fp,zero
  806914:	0025883a 	mov	r18,zero
  806918:	80800017 	ldw	r2,0(r16)
  80691c:	11400003 	ldbu	r5,0(r2)
  806920:	00801384 	movi	r2,78
  806924:	28fff544 	addi	r3,r5,-43
  806928:	18c03fcc 	andi	r3,r3,255
  80692c:	10c07d36 	bltu	r2,r3,806b24 <__svfscanf_r+0x960>
  806930:	18c5883a 	add	r2,r3,r3
  806934:	1085883a 	add	r2,r2,r2
  806938:	00c02034 	movhi	r3,128
  80693c:	18da5304 	addi	r3,r3,26956
  806940:	10c5883a 	add	r2,r2,r3
  806944:	11000017 	ldw	r4,0(r2)
  806948:	2000683a 	jmp	r4
  80694c:	00806adc 	xori	r2,zero,427
  806950:	00806b24 	muli	r2,zero,428
  806954:	00806adc 	xori	r2,zero,427
  806958:	00806c70 	cmpltui	r2,zero,433
  80695c:	00806b24 	muli	r2,zero,428
  806960:	00806ca8 	cmpgeui	r2,zero,434
  806964:	00806cdc 	xori	r2,zero,435
  806968:	00806cdc 	xori	r2,zero,435
  80696c:	00806cdc 	xori	r2,zero,435
  806970:	00806cdc 	xori	r2,zero,435
  806974:	00806cdc 	xori	r2,zero,435
  806978:	00806cdc 	xori	r2,zero,435
  80697c:	00806cdc 	xori	r2,zero,435
  806980:	00806cdc 	xori	r2,zero,435
  806984:	00806cdc 	xori	r2,zero,435
  806988:	00806b24 	muli	r2,zero,428
  80698c:	00806b24 	muli	r2,zero,428
  806990:	00806b24 	muli	r2,zero,428
  806994:	00806b24 	muli	r2,zero,428
  806998:	00806b24 	muli	r2,zero,428
  80699c:	00806b24 	muli	r2,zero,428
  8069a0:	00806b24 	muli	r2,zero,428
  8069a4:	00806cfc 	xorhi	r2,zero,435
  8069a8:	00806b24 	muli	r2,zero,428
  8069ac:	00806b24 	muli	r2,zero,428
  8069b0:	00806b24 	muli	r2,zero,428
  8069b4:	00806d0c 	andi	r2,zero,436
  8069b8:	00806da8 	cmpgeui	r2,zero,438
  8069bc:	00806b24 	muli	r2,zero,428
  8069c0:	00806b24 	muli	r2,zero,428
  8069c4:	00806dc4 	movi	r2,439
  8069c8:	00806b24 	muli	r2,zero,428
  8069cc:	00806b24 	muli	r2,zero,428
  8069d0:	00806b24 	muli	r2,zero,428
  8069d4:	00806b24 	muli	r2,zero,428
  8069d8:	00806df0 	cmpltui	r2,zero,439
  8069dc:	00806b24 	muli	r2,zero,428
  8069e0:	00806b24 	muli	r2,zero,428
  8069e4:	00806b24 	muli	r2,zero,428
  8069e8:	00806b24 	muli	r2,zero,428
  8069ec:	00806b24 	muli	r2,zero,428
  8069f0:	00806e44 	movi	r2,441
  8069f4:	00806b24 	muli	r2,zero,428
  8069f8:	00806b24 	muli	r2,zero,428
  8069fc:	00806b24 	muli	r2,zero,428
  806a00:	00806b24 	muli	r2,zero,428
  806a04:	00806f54 	movui	r2,445
  806a08:	00806b24 	muli	r2,zero,428
  806a0c:	00806b24 	muli	r2,zero,428
  806a10:	00806b24 	muli	r2,zero,428
  806a14:	00806b24 	muli	r2,zero,428
  806a18:	00806b24 	muli	r2,zero,428
  806a1c:	00806b24 	muli	r2,zero,428
  806a20:	00806b24 	muli	r2,zero,428
  806a24:	00806cfc 	xorhi	r2,zero,435
  806a28:	00806b24 	muli	r2,zero,428
  806a2c:	00806b24 	muli	r2,zero,428
  806a30:	00806b24 	muli	r2,zero,428
  806a34:	00806d0c 	andi	r2,zero,436
  806a38:	00806da8 	cmpgeui	r2,zero,438
  806a3c:	00806b24 	muli	r2,zero,428
  806a40:	00806b24 	muli	r2,zero,428
  806a44:	00806dc4 	movi	r2,439
  806a48:	00806b24 	muli	r2,zero,428
  806a4c:	00806b24 	muli	r2,zero,428
  806a50:	00806b24 	muli	r2,zero,428
  806a54:	00806b24 	muli	r2,zero,428
  806a58:	00806df0 	cmpltui	r2,zero,439
  806a5c:	00806b24 	muli	r2,zero,428
  806a60:	00806b24 	muli	r2,zero,428
  806a64:	00806b24 	muli	r2,zero,428
  806a68:	00806b24 	muli	r2,zero,428
  806a6c:	00806b24 	muli	r2,zero,428
  806a70:	00806e44 	movi	r2,441
  806a74:	00806b24 	muli	r2,zero,428
  806a78:	00806b24 	muli	r2,zero,428
  806a7c:	00806b24 	muli	r2,zero,428
  806a80:	00806b24 	muli	r2,zero,428
  806a84:	00806f54 	movui	r2,445
  806a88:	d900a317 	ldw	r4,652(sp)
  806a8c:	00805704 	movi	r2,348
  806a90:	20ffffc4 	addi	r3,r4,-1
  806a94:	10c18c2e 	bgeu	r2,r3,8070c8 <__svfscanf_r+0xf04>
  806a98:	00805744 	movi	r2,349
  806a9c:	257fa8c4 	addi	r21,r4,-349
  806aa0:	9c836014 	ori	r18,r19,3456
  806aa4:	d880a315 	stw	r2,652(sp)
  806aa8:	0001a106 	br	807130 <__svfscanf_r+0xf6c>
  806aac:	b009883a 	mov	r4,r22
  806ab0:	800b883a 	mov	r5,r16
  806ab4:	0803c440 	call	803c44 <__srefill_r>
  806ab8:	103eb226 	beq	r2,zero,806584 <__svfscanf_r+0x3c0>
  806abc:	003e1606 	br	806318 <__svfscanf_r+0x154>
  806ac0:	01000284 	movi	r4,10
  806ac4:	00802074 	movhi	r2,129
  806ac8:	10b1cd04 	addi	r2,r2,-14540
  806acc:	054000c4 	movi	r21,3
  806ad0:	d900a115 	stw	r4,644(sp)
  806ad4:	d880a015 	stw	r2,640(sp)
  806ad8:	003ea806 	br	80657c <__svfscanf_r+0x3b8>
  806adc:	a880200c 	andi	r2,r21,128
  806ae0:	10001026 	beq	r2,zero,806b24 <__svfscanf_r+0x960>
  806ae4:	00bfdfc4 	movi	r2,-129
  806ae8:	a8aa703a 	and	r21,r21,r2
  806aec:	b9400005 	stb	r5,0(r23)
  806af0:	bdc00044 	addi	r23,r23,1
  806af4:	80c00117 	ldw	r3,4(r16)
  806af8:	8c400044 	addi	r17,r17,1
  806afc:	18bfffc4 	addi	r2,r3,-1
  806b00:	80800115 	stw	r2,4(r16)
  806b04:	0080610e 	bge	zero,r2,806c8c <__svfscanf_r+0xac8>
  806b08:	80800017 	ldw	r2,0(r16)
  806b0c:	10800044 	addi	r2,r2,1
  806b10:	80800015 	stw	r2,0(r16)
  806b14:	d880a317 	ldw	r2,652(sp)
  806b18:	10bfffc4 	addi	r2,r2,-1
  806b1c:	d880a315 	stw	r2,652(sp)
  806b20:	103f7d1e 	bne	r2,zero,806918 <__svfscanf_r+0x754>
  806b24:	d8c09e17 	ldw	r3,632(sp)
  806b28:	18000226 	beq	r3,zero,806b34 <__svfscanf_r+0x970>
  806b2c:	00bfbfc4 	movi	r2,-257
  806b30:	a8aa703a 	and	r21,r21,r2
  806b34:	90ffffc4 	addi	r3,r18,-1
  806b38:	00800044 	movi	r2,1
  806b3c:	10c0cd2e 	bgeu	r2,r3,806e74 <__svfscanf_r+0xcb0>
  806b40:	e1003fcc 	andi	r4,fp,255
  806b44:	2100201c 	xori	r4,r4,128
  806b48:	213fe004 	addi	r4,r4,-128
  806b4c:	20ffffc4 	addi	r3,r4,-1
  806b50:	00800184 	movi	r2,6
  806b54:	10c01736 	bltu	r2,r3,806bb4 <__svfscanf_r+0x9f0>
  806b58:	00c00084 	movi	r3,2
  806b5c:	1900880e 	bge	r3,r4,806d80 <__svfscanf_r+0xbbc>
  806b60:	008000c4 	movi	r2,3
  806b64:	1100130e 	bge	r2,r4,806bb4 <__svfscanf_r+0x9f0>
  806b68:	e4ffffc4 	addi	r19,fp,-1
  806b6c:	b825883a 	mov	r18,r23
  806b70:	94bfffc4 	addi	r18,r18,-1
  806b74:	91400007 	ldb	r5,0(r18)
  806b78:	b009883a 	mov	r4,r22
  806b7c:	800d883a 	mov	r6,r16
  806b80:	080cd540 	call	80cd54 <_ungetc_r>
  806b84:	9cffffc4 	addi	r19,r19,-1
  806b88:	98c03fcc 	andi	r3,r19,255
  806b8c:	18c0201c 	xori	r3,r3,128
  806b90:	18ffe004 	addi	r3,r3,-128
  806b94:	00800084 	movi	r2,2
  806b98:	18bff51e 	bne	r3,r2,806b70 <__svfscanf_r+0x9ac>
  806b9c:	e0bfff04 	addi	r2,fp,-4
  806ba0:	10803fcc 	andi	r2,r2,255
  806ba4:	b887c83a 	sub	r3,r23,r2
  806ba8:	8885c83a 	sub	r2,r17,r2
  806bac:	147fffc4 	addi	r17,r2,-1
  806bb0:	1dffffc4 	addi	r23,r3,-1
  806bb4:	a880400c 	andi	r2,r21,256
  806bb8:	10001226 	beq	r2,zero,806c04 <__svfscanf_r+0xa40>
  806bbc:	a881000c 	andi	r2,r21,1024
  806bc0:	1000651e 	bne	r2,zero,806d58 <__svfscanf_r+0xb94>
  806bc4:	bdffffc4 	addi	r23,r23,-1
  806bc8:	b9400007 	ldb	r5,0(r23)
  806bcc:	00801944 	movi	r2,101
  806bd0:	8c7fffc4 	addi	r17,r17,-1
  806bd4:	28800826 	beq	r5,r2,806bf8 <__svfscanf_r+0xa34>
  806bd8:	00801144 	movi	r2,69
  806bdc:	28800626 	beq	r5,r2,806bf8 <__svfscanf_r+0xa34>
  806be0:	bdffffc4 	addi	r23,r23,-1
  806be4:	b009883a 	mov	r4,r22
  806be8:	800d883a 	mov	r6,r16
  806bec:	080cd540 	call	80cd54 <_ungetc_r>
  806bf0:	b9400007 	ldb	r5,0(r23)
  806bf4:	8c7fffc4 	addi	r17,r17,-1
  806bf8:	b009883a 	mov	r4,r22
  806bfc:	800d883a 	mov	r6,r16
  806c00:	080cd540 	call	80cd54 <_ungetc_r>
  806c04:	a880040c 	andi	r2,r21,16
  806c08:	103d811e 	bne	r2,zero,806210 <__svfscanf_r+0x4c>
  806c0c:	a8c1800c 	andi	r3,r21,1536
  806c10:	00810004 	movi	r2,1024
  806c14:	b8000005 	stb	zero,0(r23)
  806c18:	1880bb26 	beq	r3,r2,806f08 <__svfscanf_r+0xd44>
  806c1c:	d8809d17 	ldw	r2,628(sp)
  806c20:	1000a61e 	bne	r2,zero,806ebc <__svfscanf_r+0xcf8>
  806c24:	d940a617 	ldw	r5,664(sp)
  806c28:	b009883a 	mov	r4,r22
  806c2c:	000d883a 	mov	r6,zero
  806c30:	080ab900 	call	80ab90 <_strtod_r>
  806c34:	a900004c 	andi	r4,r21,1
  806c38:	2009003a 	cmpeq	r4,r4,zero
  806c3c:	1025883a 	mov	r18,r2
  806c40:	1827883a 	mov	r19,r3
  806c44:	2000951e 	bne	r4,zero,806e9c <__svfscanf_r+0xcd8>
  806c48:	d8c0a417 	ldw	r3,656(sp)
  806c4c:	18800017 	ldw	r2,0(r3)
  806c50:	1d400104 	addi	r21,r3,4
  806c54:	14c00115 	stw	r19,4(r2)
  806c58:	14800015 	stw	r18,0(r2)
  806c5c:	d8c0a217 	ldw	r3,648(sp)
  806c60:	dd40a415 	stw	r21,656(sp)
  806c64:	18c00044 	addi	r3,r3,1
  806c68:	d8c0a215 	stw	r3,648(sp)
  806c6c:	003d6806 	br	806210 <__svfscanf_r+0x4c>
  806c70:	a880800c 	andi	r2,r21,512
  806c74:	103fab26 	beq	r2,zero,806b24 <__svfscanf_r+0x960>
  806c78:	d9009e17 	ldw	r4,632(sp)
  806c7c:	00bf5fc4 	movi	r2,-641
  806c80:	a8aa703a 	and	r21,r21,r2
  806c84:	d9009f15 	stw	r4,636(sp)
  806c88:	003f9806 	br	806aec <__svfscanf_r+0x928>
  806c8c:	b009883a 	mov	r4,r22
  806c90:	800b883a 	mov	r5,r16
  806c94:	d980a715 	stw	r6,668(sp)
  806c98:	0803c440 	call	803c44 <__srefill_r>
  806c9c:	d980a717 	ldw	r6,668(sp)
  806ca0:	103f9c26 	beq	r2,zero,806b14 <__svfscanf_r+0x950>
  806ca4:	003f9f06 	br	806b24 <__svfscanf_r+0x960>
  806ca8:	a880400c 	andi	r2,r21,256
  806cac:	10000b26 	beq	r2,zero,806cdc <__svfscanf_r+0xb18>
  806cb0:	00bfdfc4 	movi	r2,-129
  806cb4:	a8aa703a 	and	r21,r21,r2
  806cb8:	d8809e17 	ldw	r2,632(sp)
  806cbc:	10800044 	addi	r2,r2,1
  806cc0:	d8809e15 	stw	r2,632(sp)
  806cc4:	303f8b26 	beq	r6,zero,806af4 <__svfscanf_r+0x930>
  806cc8:	d8c0a317 	ldw	r3,652(sp)
  806ccc:	31bfffc4 	addi	r6,r6,-1
  806cd0:	18c00044 	addi	r3,r3,1
  806cd4:	d8c0a315 	stw	r3,652(sp)
  806cd8:	003f8606 	br	806af4 <__svfscanf_r+0x930>
  806cdc:	e0803fcc 	andi	r2,fp,255
  806ce0:	1080201c 	xori	r2,r2,128
  806ce4:	10bfe004 	addi	r2,r2,-128
  806ce8:	9085883a 	add	r2,r18,r2
  806cec:	103f8d1e 	bne	r2,zero,806b24 <__svfscanf_r+0x960>
  806cf0:	00bf9fc4 	movi	r2,-385
  806cf4:	a8aa703a 	and	r21,r21,r2
  806cf8:	003f7c06 	br	806aec <__svfscanf_r+0x928>
  806cfc:	00800044 	movi	r2,1
  806d00:	90bf881e 	bne	r18,r2,806b24 <__svfscanf_r+0x960>
  806d04:	04800084 	movi	r18,2
  806d08:	003f7806 	br	806aec <__svfscanf_r+0x928>
  806d0c:	a8c1400c 	andi	r3,r21,1280
  806d10:	00810004 	movi	r2,1024
  806d14:	18800426 	beq	r3,r2,806d28 <__svfscanf_r+0xb64>
  806d18:	a884703a 	and	r2,r21,r2
  806d1c:	103f8126 	beq	r2,zero,806b24 <__svfscanf_r+0x960>
  806d20:	d8809e17 	ldw	r2,632(sp)
  806d24:	103f8326 	beq	r2,zero,806b34 <__svfscanf_r+0x970>
  806d28:	a880800c 	andi	r2,r21,512
  806d2c:	1000051e 	bne	r2,zero,806d44 <__svfscanf_r+0xb80>
  806d30:	d8c09e17 	ldw	r3,632(sp)
  806d34:	d9009f17 	ldw	r4,636(sp)
  806d38:	ddc09c15 	stw	r23,624(sp)
  806d3c:	1907c83a 	sub	r3,r3,r4
  806d40:	d8c09d15 	stw	r3,628(sp)
  806d44:	00be7fc4 	movi	r2,-1537
  806d48:	a884703a 	and	r2,r21,r2
  806d4c:	15406014 	ori	r21,r2,384
  806d50:	d8009e15 	stw	zero,632(sp)
  806d54:	003f6506 	br	806aec <__svfscanf_r+0x928>
  806d58:	d900a617 	ldw	r4,664(sp)
  806d5c:	25fd4e2e 	bgeu	r4,r23,806298 <__svfscanf_r+0xd4>
  806d60:	bdffffc4 	addi	r23,r23,-1
  806d64:	b9400007 	ldb	r5,0(r23)
  806d68:	b009883a 	mov	r4,r22
  806d6c:	800d883a 	mov	r6,r16
  806d70:	080cd540 	call	80cd54 <_ungetc_r>
  806d74:	d880a617 	ldw	r2,664(sp)
  806d78:	15fff936 	bltu	r2,r23,806d60 <__svfscanf_r+0xb9c>
  806d7c:	003d4606 	br	806298 <__svfscanf_r+0xd4>
  806d80:	d900a617 	ldw	r4,664(sp)
  806d84:	25fd442e 	bgeu	r4,r23,806298 <__svfscanf_r+0xd4>
  806d88:	bdffffc4 	addi	r23,r23,-1
  806d8c:	b9400007 	ldb	r5,0(r23)
  806d90:	b009883a 	mov	r4,r22
  806d94:	800d883a 	mov	r6,r16
  806d98:	080cd540 	call	80cd54 <_ungetc_r>
  806d9c:	d8c0a617 	ldw	r3,664(sp)
  806da0:	1dfff936 	bltu	r3,r23,806d88 <__svfscanf_r+0xbc4>
  806da4:	003d3c06 	br	806298 <__svfscanf_r+0xd4>
  806da8:	e0c03fcc 	andi	r3,fp,255
  806dac:	18c0201c 	xori	r3,r3,128
  806db0:	18ffe004 	addi	r3,r3,-128
  806db4:	00800084 	movi	r2,2
  806db8:	18bf5a1e 	bne	r3,r2,806b24 <__svfscanf_r+0x960>
  806dbc:	070000c4 	movi	fp,3
  806dc0:	003f4a06 	br	806aec <__svfscanf_r+0x928>
  806dc4:	e0c03fcc 	andi	r3,fp,255
  806dc8:	18c0201c 	xori	r3,r3,128
  806dcc:	18ffe004 	addi	r3,r3,-128
  806dd0:	1800231e 	bne	r3,zero,806e60 <__svfscanf_r+0xc9c>
  806dd4:	a8c1c00c 	andi	r3,r21,1792
  806dd8:	0081c004 	movi	r2,1792
  806ddc:	18bf511e 	bne	r3,r2,806b24 <__svfscanf_r+0x960>
  806de0:	00be1fc4 	movi	r2,-1921
  806de4:	a8aa703a 	and	r21,r21,r2
  806de8:	07000044 	movi	fp,1
  806dec:	003f3f06 	br	806aec <__svfscanf_r+0x928>
  806df0:	9000101e 	bne	r18,zero,806e34 <__svfscanf_r+0xc70>
  806df4:	a8c1c00c 	andi	r3,r21,1792
  806df8:	0081c004 	movi	r2,1792
  806dfc:	18800926 	beq	r3,r2,806e24 <__svfscanf_r+0xc60>
  806e00:	e0c03fcc 	andi	r3,fp,255
  806e04:	18c0201c 	xori	r3,r3,128
  806e08:	18ffe004 	addi	r3,r3,-128
  806e0c:	00800044 	movi	r2,1
  806e10:	18800226 	beq	r3,r2,806e1c <__svfscanf_r+0xc58>
  806e14:	00800104 	movi	r2,4
  806e18:	18bf421e 	bne	r3,r2,806b24 <__svfscanf_r+0x960>
  806e1c:	e7000044 	addi	fp,fp,1
  806e20:	003f3206 	br	806aec <__svfscanf_r+0x928>
  806e24:	00be1fc4 	movi	r2,-1921
  806e28:	a8aa703a 	and	r21,r21,r2
  806e2c:	04800044 	movi	r18,1
  806e30:	003f2e06 	br	806aec <__svfscanf_r+0x928>
  806e34:	00800084 	movi	r2,2
  806e38:	90bff11e 	bne	r18,r2,806e00 <__svfscanf_r+0xc3c>
  806e3c:	048000c4 	movi	r18,3
  806e40:	003f2a06 	br	806aec <__svfscanf_r+0x928>
  806e44:	e0c03fcc 	andi	r3,fp,255
  806e48:	18c0201c 	xori	r3,r3,128
  806e4c:	18ffe004 	addi	r3,r3,-128
  806e50:	00800184 	movi	r2,6
  806e54:	18bf331e 	bne	r3,r2,806b24 <__svfscanf_r+0x960>
  806e58:	070001c4 	movi	fp,7
  806e5c:	003f2306 	br	806aec <__svfscanf_r+0x928>
  806e60:	008000c4 	movi	r2,3
  806e64:	18bfed26 	beq	r3,r2,806e1c <__svfscanf_r+0xc58>
  806e68:	00800144 	movi	r2,5
  806e6c:	18bfeb26 	beq	r3,r2,806e1c <__svfscanf_r+0xc58>
  806e70:	003f2c06 	br	806b24 <__svfscanf_r+0x960>
  806e74:	d900a617 	ldw	r4,664(sp)
  806e78:	25fd072e 	bgeu	r4,r23,806298 <__svfscanf_r+0xd4>
  806e7c:	bdffffc4 	addi	r23,r23,-1
  806e80:	b9400007 	ldb	r5,0(r23)
  806e84:	b009883a 	mov	r4,r22
  806e88:	800d883a 	mov	r6,r16
  806e8c:	080cd540 	call	80cd54 <_ungetc_r>
  806e90:	d880a617 	ldw	r2,664(sp)
  806e94:	15fff936 	bltu	r2,r23,806e7c <__svfscanf_r+0xcb8>
  806e98:	003cff06 	br	806298 <__svfscanf_r+0xd4>
  806e9c:	a880008c 	andi	r2,r21,2
  806ea0:	10002026 	beq	r2,zero,806f24 <__svfscanf_r+0xd60>
  806ea4:	d900a417 	ldw	r4,656(sp)
  806ea8:	20800017 	ldw	r2,0(r4)
  806eac:	25400104 	addi	r21,r4,4
  806eb0:	10c00115 	stw	r3,4(r2)
  806eb4:	14800015 	stw	r18,0(r2)
  806eb8:	003f6806 	br	806c5c <__svfscanf_r+0xa98>
  806ebc:	d8c09c17 	ldw	r3,624(sp)
  806ec0:	b009883a 	mov	r4,r22
  806ec4:	000d883a 	mov	r6,zero
  806ec8:	19400044 	addi	r5,r3,1
  806ecc:	01c00284 	movi	r7,10
  806ed0:	080c1b40 	call	80c1b4 <_strtol_r>
  806ed4:	d9009d17 	ldw	r4,628(sp)
  806ed8:	110dc83a 	sub	r6,r2,r4
  806edc:	d8c0a617 	ldw	r3,664(sp)
  806ee0:	d9009c17 	ldw	r4,624(sp)
  806ee4:	188054c4 	addi	r2,r3,339
  806ee8:	20800236 	bltu	r4,r2,806ef4 <__svfscanf_r+0xd30>
  806eec:	18805484 	addi	r2,r3,338
  806ef0:	d8809c15 	stw	r2,624(sp)
  806ef4:	d9009c17 	ldw	r4,624(sp)
  806ef8:	01402074 	movhi	r5,129
  806efc:	29538204 	addi	r5,r5,19976
  806f00:	0803ef40 	call	803ef4 <sprintf>
  806f04:	003f4706 	br	806c24 <__svfscanf_r+0xa60>
  806f08:	d8c09e17 	ldw	r3,632(sp)
  806f0c:	d9009f17 	ldw	r4,636(sp)
  806f10:	1905c83a 	sub	r2,r3,r4
  806f14:	103f4326 	beq	r2,zero,806c24 <__svfscanf_r+0xa60>
  806f18:	008dc83a 	sub	r6,zero,r2
  806f1c:	ddc09c15 	stw	r23,624(sp)
  806f20:	003fee06 	br	806edc <__svfscanf_r+0xd18>
  806f24:	d880a417 	ldw	r2,656(sp)
  806f28:	9009883a 	mov	r4,r18
  806f2c:	180b883a 	mov	r5,r3
  806f30:	15c00017 	ldw	r23,0(r2)
  806f34:	15400104 	addi	r21,r2,4
  806f38:	080a9940 	call	80a994 <__isnand>
  806f3c:	10021c1e 	bne	r2,zero,8077b0 <__svfscanf_r+0x15ec>
  806f40:	980b883a 	mov	r5,r19
  806f44:	9009883a 	mov	r4,r18
  806f48:	080f9980 	call	80f998 <__truncdfsf2>
  806f4c:	b8800015 	stw	r2,0(r23)
  806f50:	003f4206 	br	806c5c <__svfscanf_r+0xa98>
  806f54:	e0c03fcc 	andi	r3,fp,255
  806f58:	18c0201c 	xori	r3,r3,128
  806f5c:	18ffe004 	addi	r3,r3,-128
  806f60:	008001c4 	movi	r2,7
  806f64:	18beef1e 	bne	r3,r2,806b24 <__svfscanf_r+0x960>
  806f68:	07000204 	movi	fp,8
  806f6c:	003edf06 	br	806aec <__svfscanf_r+0x928>
  806f70:	d900a317 	ldw	r4,652(sp)
  806f74:	208002a4 	muli	r2,r4,10
  806f78:	1145883a 	add	r2,r2,r5
  806f7c:	10bff404 	addi	r2,r2,-48
  806f80:	d880a315 	stw	r2,652(sp)
  806f84:	003ceb06 	br	806334 <__svfscanf_r+0x170>
  806f88:	9880040c 	andi	r2,r19,16
  806f8c:	10001426 	beq	r2,zero,806fe0 <__svfscanf_r+0xe1c>
  806f90:	0027883a 	mov	r19,zero
  806f94:	00000906 	br	806fbc <__svfscanf_r+0xdf8>
  806f98:	80c00117 	ldw	r3,4(r16)
  806f9c:	d880a317 	ldw	r2,652(sp)
  806fa0:	29800044 	addi	r6,r5,1
  806fa4:	18ffffc4 	addi	r3,r3,-1
  806fa8:	9cc00044 	addi	r19,r19,1
  806fac:	81800015 	stw	r6,0(r16)
  806fb0:	80c00115 	stw	r3,4(r16)
  806fb4:	14fdf726 	beq	r2,r19,806794 <__svfscanf_r+0x5d0>
  806fb8:	00c02c0e 	bge	zero,r3,80706c <__svfscanf_r+0xea8>
  806fbc:	81400017 	ldw	r5,0(r16)
  806fc0:	90800017 	ldw	r2,0(r18)
  806fc4:	28c00003 	ldbu	r3,0(r5)
  806fc8:	1887883a 	add	r3,r3,r2
  806fcc:	19000003 	ldbu	r4,0(r3)
  806fd0:	2100020c 	andi	r4,r4,8
  806fd4:	203ff026 	beq	r4,zero,806f98 <__svfscanf_r+0xdd4>
  806fd8:	8ce3883a 	add	r17,r17,r19
  806fdc:	003c8c06 	br	806210 <__svfscanf_r+0x4c>
  806fe0:	d8c0a417 	ldw	r3,656(sp)
  806fe4:	1d400017 	ldw	r21,0(r3)
  806fe8:	a827883a 	mov	r19,r21
  806fec:	00000e06 	br	807028 <__svfscanf_r+0xe64>
  806ff0:	80800117 	ldw	r2,4(r16)
  806ff4:	d900a317 	ldw	r4,652(sp)
  806ff8:	29800044 	addi	r6,r5,1
  806ffc:	10ffffc4 	addi	r3,r2,-1
  807000:	213fffc4 	addi	r4,r4,-1
  807004:	d900a315 	stw	r4,652(sp)
  807008:	80c00115 	stw	r3,4(r16)
  80700c:	28800003 	ldbu	r2,0(r5)
  807010:	98800005 	stb	r2,0(r19)
  807014:	81800015 	stw	r6,0(r16)
  807018:	9cc00044 	addi	r19,r19,1
  80701c:	20000926 	beq	r4,zero,807044 <__svfscanf_r+0xe80>
  807020:	80800117 	ldw	r2,4(r16)
  807024:	0080170e 	bge	zero,r2,807084 <__svfscanf_r+0xec0>
  807028:	81400017 	ldw	r5,0(r16)
  80702c:	90800017 	ldw	r2,0(r18)
  807030:	28c00003 	ldbu	r3,0(r5)
  807034:	1887883a 	add	r3,r3,r2
  807038:	19000003 	ldbu	r4,0(r3)
  80703c:	2100020c 	andi	r4,r4,8
  807040:	203feb26 	beq	r4,zero,806ff0 <__svfscanf_r+0xe2c>
  807044:	9d45c83a 	sub	r2,r19,r21
  807048:	d8c0a217 	ldw	r3,648(sp)
  80704c:	88a3883a 	add	r17,r17,r2
  807050:	d880a417 	ldw	r2,656(sp)
  807054:	18c00044 	addi	r3,r3,1
  807058:	d8c0a215 	stw	r3,648(sp)
  80705c:	10800104 	addi	r2,r2,4
  807060:	d880a415 	stw	r2,656(sp)
  807064:	98000005 	stb	zero,0(r19)
  807068:	003c6906 	br	806210 <__svfscanf_r+0x4c>
  80706c:	b009883a 	mov	r4,r22
  807070:	800b883a 	mov	r5,r16
  807074:	0803c440 	call	803c44 <__srefill_r>
  807078:	103fd026 	beq	r2,zero,806fbc <__svfscanf_r+0xdf8>
  80707c:	8ce3883a 	add	r17,r17,r19
  807080:	003c6306 	br	806210 <__svfscanf_r+0x4c>
  807084:	b009883a 	mov	r4,r22
  807088:	800b883a 	mov	r5,r16
  80708c:	0803c440 	call	803c44 <__srefill_r>
  807090:	103fe526 	beq	r2,zero,807028 <__svfscanf_r+0xe64>
  807094:	003feb06 	br	807044 <__svfscanf_r+0xe80>
  807098:	d900a317 	ldw	r4,652(sp)
  80709c:	9d41e014 	ori	r21,r19,1920
  8070a0:	2000821e 	bne	r4,zero,8072ac <__svfscanf_r+0x10e8>
  8070a4:	d8c04404 	addi	r3,sp,272
  8070a8:	182f883a 	mov	r23,r3
  8070ac:	0039883a 	mov	fp,zero
  8070b0:	d8c0a615 	stw	r3,664(sp)
  8070b4:	d8009c15 	stw	zero,624(sp)
  8070b8:	d8009d15 	stw	zero,628(sp)
  8070bc:	d8009f15 	stw	zero,636(sp)
  8070c0:	d8009e15 	stw	zero,632(sp)
  8070c4:	003e9e06 	br	806b40 <__svfscanf_r+0x97c>
  8070c8:	d900a317 	ldw	r4,652(sp)
  8070cc:	9c836014 	ori	r18,r19,3456
  8070d0:	2000161e 	bne	r4,zero,80712c <__svfscanf_r+0xf68>
  8070d4:	d8804404 	addi	r2,sp,272
  8070d8:	d880a615 	stw	r2,664(sp)
  8070dc:	002f883a 	mov	r23,zero
  8070e0:	1027883a 	mov	r19,r2
  8070e4:	9080400c 	andi	r2,r18,256
  8070e8:	10000926 	beq	r2,zero,807110 <__svfscanf_r+0xf4c>
  8070ec:	d8c0a617 	ldw	r3,664(sp)
  8070f0:	1cc0052e 	bgeu	r3,r19,807108 <__svfscanf_r+0xf44>
  8070f4:	9cffffc4 	addi	r19,r19,-1
  8070f8:	99400007 	ldb	r5,0(r19)
  8070fc:	b009883a 	mov	r4,r22
  807100:	800d883a 	mov	r6,r16
  807104:	080cd540 	call	80cd54 <_ungetc_r>
  807108:	d900a617 	ldw	r4,664(sp)
  80710c:	24fc6226 	beq	r4,r19,806298 <__svfscanf_r+0xd4>
  807110:	9080040c 	andi	r2,r18,16
  807114:	10006726 	beq	r2,zero,8072b4 <__svfscanf_r+0x10f0>
  807118:	d8c0a617 	ldw	r3,664(sp)
  80711c:	98c5c83a 	sub	r2,r19,r3
  807120:	b885883a 	add	r2,r23,r2
  807124:	88a3883a 	add	r17,r17,r2
  807128:	003c3906 	br	806210 <__svfscanf_r+0x4c>
  80712c:	002b883a 	mov	r21,zero
  807130:	d8c04404 	addi	r3,sp,272
  807134:	d8c0a615 	stw	r3,664(sp)
  807138:	002f883a 	mov	r23,zero
  80713c:	1827883a 	mov	r19,r3
  807140:	81800017 	ldw	r6,0(r16)
  807144:	00c01344 	movi	r3,77
  807148:	31400003 	ldbu	r5,0(r6)
  80714c:	28bff544 	addi	r2,r5,-43
  807150:	10803fcc 	andi	r2,r2,255
  807154:	18bfe336 	bltu	r3,r2,8070e4 <__svfscanf_r+0xf20>
  807158:	1085883a 	add	r2,r2,r2
  80715c:	1085883a 	add	r2,r2,r2
  807160:	00c02034 	movhi	r3,128
  807164:	18dc5d04 	addi	r3,r3,29044
  807168:	10c5883a 	add	r2,r2,r3
  80716c:	11000017 	ldw	r4,0(r2)
  807170:	2000683a 	jmp	r4
  807174:	00807308 	cmpgei	r2,zero,460
  807178:	008070e4 	muli	r2,zero,451
  80717c:	00807308 	cmpgei	r2,zero,460
  807180:	008070e4 	muli	r2,zero,451
  807184:	008070e4 	muli	r2,zero,451
  807188:	0080734c 	andi	r2,zero,461
  80718c:	00807448 	cmpgei	r2,zero,465
  807190:	00807448 	cmpgei	r2,zero,465
  807194:	00807448 	cmpgei	r2,zero,465
  807198:	00807448 	cmpgei	r2,zero,465
  80719c:	00807448 	cmpgei	r2,zero,465
  8071a0:	00807448 	cmpgei	r2,zero,465
  8071a4:	00807448 	cmpgei	r2,zero,465
  8071a8:	00807470 	cmpltui	r2,zero,465
  8071ac:	00807470 	cmpltui	r2,zero,465
  8071b0:	008070e4 	muli	r2,zero,451
  8071b4:	008070e4 	muli	r2,zero,451
  8071b8:	008070e4 	muli	r2,zero,451
  8071bc:	008070e4 	muli	r2,zero,451
  8071c0:	008070e4 	muli	r2,zero,451
  8071c4:	008070e4 	muli	r2,zero,451
  8071c8:	008070e4 	muli	r2,zero,451
  8071cc:	008074a0 	cmpeqi	r2,zero,466
  8071d0:	008074a0 	cmpeqi	r2,zero,466
  8071d4:	008074a0 	cmpeqi	r2,zero,466
  8071d8:	008074a0 	cmpeqi	r2,zero,466
  8071dc:	008074a0 	cmpeqi	r2,zero,466
  8071e0:	008074a0 	cmpeqi	r2,zero,466
  8071e4:	008070e4 	muli	r2,zero,451
  8071e8:	008070e4 	muli	r2,zero,451
  8071ec:	008070e4 	muli	r2,zero,451
  8071f0:	008070e4 	muli	r2,zero,451
  8071f4:	008070e4 	muli	r2,zero,451
  8071f8:	008070e4 	muli	r2,zero,451
  8071fc:	008070e4 	muli	r2,zero,451
  807200:	008070e4 	muli	r2,zero,451
  807204:	008070e4 	muli	r2,zero,451
  807208:	008070e4 	muli	r2,zero,451
  80720c:	008070e4 	muli	r2,zero,451
  807210:	008070e4 	muli	r2,zero,451
  807214:	008070e4 	muli	r2,zero,451
  807218:	008070e4 	muli	r2,zero,451
  80721c:	008070e4 	muli	r2,zero,451
  807220:	008070e4 	muli	r2,zero,451
  807224:	008070e4 	muli	r2,zero,451
  807228:	008074b0 	cmpltui	r2,zero,466
  80722c:	008070e4 	muli	r2,zero,451
  807230:	008070e4 	muli	r2,zero,451
  807234:	008070e4 	muli	r2,zero,451
  807238:	008070e4 	muli	r2,zero,451
  80723c:	008070e4 	muli	r2,zero,451
  807240:	008070e4 	muli	r2,zero,451
  807244:	008070e4 	muli	r2,zero,451
  807248:	008070e4 	muli	r2,zero,451
  80724c:	008074a0 	cmpeqi	r2,zero,466
  807250:	008074a0 	cmpeqi	r2,zero,466
  807254:	008074a0 	cmpeqi	r2,zero,466
  807258:	008074a0 	cmpeqi	r2,zero,466
  80725c:	008074a0 	cmpeqi	r2,zero,466
  807260:	008074a0 	cmpeqi	r2,zero,466
  807264:	008070e4 	muli	r2,zero,451
  807268:	008070e4 	muli	r2,zero,451
  80726c:	008070e4 	muli	r2,zero,451
  807270:	008070e4 	muli	r2,zero,451
  807274:	008070e4 	muli	r2,zero,451
  807278:	008070e4 	muli	r2,zero,451
  80727c:	008070e4 	muli	r2,zero,451
  807280:	008070e4 	muli	r2,zero,451
  807284:	008070e4 	muli	r2,zero,451
  807288:	008070e4 	muli	r2,zero,451
  80728c:	008070e4 	muli	r2,zero,451
  807290:	008070e4 	muli	r2,zero,451
  807294:	008070e4 	muli	r2,zero,451
  807298:	008070e4 	muli	r2,zero,451
  80729c:	008070e4 	muli	r2,zero,451
  8072a0:	008070e4 	muli	r2,zero,451
  8072a4:	008070e4 	muli	r2,zero,451
  8072a8:	008074b0 	cmpltui	r2,zero,466
  8072ac:	000d883a 	mov	r6,zero
  8072b0:	003d9006 	br	8068f4 <__svfscanf_r+0x730>
  8072b4:	98000005 	stb	zero,0(r19)
  8072b8:	d8c0a017 	ldw	r3,640(sp)
  8072bc:	d940a617 	ldw	r5,664(sp)
  8072c0:	d9c0a117 	ldw	r7,644(sp)
  8072c4:	b009883a 	mov	r4,r22
  8072c8:	000d883a 	mov	r6,zero
  8072cc:	183ee83a 	callr	r3
  8072d0:	1007883a 	mov	r3,r2
  8072d4:	9080080c 	andi	r2,r18,32
  8072d8:	10004d1e 	bne	r2,zero,807410 <__svfscanf_r+0x124c>
  8072dc:	9080010c 	andi	r2,r18,4
  8072e0:	10003426 	beq	r2,zero,8073b4 <__svfscanf_r+0x11f0>
  8072e4:	d900a417 	ldw	r4,656(sp)
  8072e8:	20800017 	ldw	r2,0(r4)
  8072ec:	21000104 	addi	r4,r4,4
  8072f0:	d900a415 	stw	r4,656(sp)
  8072f4:	10c0000d 	sth	r3,0(r2)
  8072f8:	d880a217 	ldw	r2,648(sp)
  8072fc:	10800044 	addi	r2,r2,1
  807300:	d880a215 	stw	r2,648(sp)
  807304:	003f8406 	br	807118 <__svfscanf_r+0xf54>
  807308:	9080200c 	andi	r2,r18,128
  80730c:	103f7526 	beq	r2,zero,8070e4 <__svfscanf_r+0xf20>
  807310:	00bfdfc4 	movi	r2,-129
  807314:	90a4703a 	and	r18,r18,r2
  807318:	99400005 	stb	r5,0(r19)
  80731c:	9cc00044 	addi	r19,r19,1
  807320:	80c00117 	ldw	r3,4(r16)
  807324:	18ffffc4 	addi	r3,r3,-1
  807328:	80c00115 	stw	r3,4(r16)
  80732c:	00c0130e 	bge	zero,r3,80737c <__svfscanf_r+0x11b8>
  807330:	31800044 	addi	r6,r6,1
  807334:	81800015 	stw	r6,0(r16)
  807338:	d880a317 	ldw	r2,652(sp)
  80733c:	10bfffc4 	addi	r2,r2,-1
  807340:	d880a315 	stw	r2,652(sp)
  807344:	103f7e1e 	bne	r2,zero,807140 <__svfscanf_r+0xf7c>
  807348:	003f6606 	br	8070e4 <__svfscanf_r+0xf20>
  80734c:	9082000c 	andi	r2,r18,2048
  807350:	103ff126 	beq	r2,zero,807318 <__svfscanf_r+0x1154>
  807354:	d8c0a117 	ldw	r3,644(sp)
  807358:	1800031e 	bne	r3,zero,807368 <__svfscanf_r+0x11a4>
  80735c:	01000204 	movi	r4,8
  807360:	94808014 	ori	r18,r18,512
  807364:	d900a115 	stw	r4,644(sp)
  807368:	9081000c 	andi	r2,r18,1024
  80736c:	10000826 	beq	r2,zero,807390 <__svfscanf_r+0x11cc>
  807370:	00be9fc4 	movi	r2,-1409
  807374:	90a4703a 	and	r18,r18,r2
  807378:	003fe706 	br	807318 <__svfscanf_r+0x1154>
  80737c:	b009883a 	mov	r4,r22
  807380:	800b883a 	mov	r5,r16
  807384:	0803c440 	call	803c44 <__srefill_r>
  807388:	103feb26 	beq	r2,zero,807338 <__svfscanf_r+0x1174>
  80738c:	003f5506 	br	8070e4 <__svfscanf_r+0xf20>
  807390:	a8000426 	beq	r21,zero,8073a4 <__svfscanf_r+0x11e0>
  807394:	d880a317 	ldw	r2,652(sp)
  807398:	ad7fffc4 	addi	r21,r21,-1
  80739c:	10800044 	addi	r2,r2,1
  8073a0:	d880a315 	stw	r2,652(sp)
  8073a4:	00bf1fc4 	movi	r2,-897
  8073a8:	90a4703a 	and	r18,r18,r2
  8073ac:	bdc00044 	addi	r23,r23,1
  8073b0:	003fdb06 	br	807320 <__svfscanf_r+0x115c>
  8073b4:	9080004c 	andi	r2,r18,1
  8073b8:	1005003a 	cmpeq	r2,r2,zero
  8073bc:	10001426 	beq	r2,zero,807410 <__svfscanf_r+0x124c>
  8073c0:	9080008c 	andi	r2,r18,2
  8073c4:	10001226 	beq	r2,zero,807410 <__svfscanf_r+0x124c>
  8073c8:	d8c0a017 	ldw	r3,640(sp)
  8073cc:	00802074 	movhi	r2,129
  8073d0:	10b1cd04 	addi	r2,r2,-14540
  8073d4:	18801426 	beq	r3,r2,807428 <__svfscanf_r+0x1264>
  8073d8:	d9c0a117 	ldw	r7,644(sp)
  8073dc:	d940a617 	ldw	r5,664(sp)
  8073e0:	000d883a 	mov	r6,zero
  8073e4:	b009883a 	mov	r4,r22
  8073e8:	080c41c0 	call	80c41c <_strtoll_r>
  8073ec:	100d883a 	mov	r6,r2
  8073f0:	180f883a 	mov	r7,r3
  8073f4:	d900a417 	ldw	r4,656(sp)
  8073f8:	20800017 	ldw	r2,0(r4)
  8073fc:	21000104 	addi	r4,r4,4
  807400:	d900a415 	stw	r4,656(sp)
  807404:	11c00115 	stw	r7,4(r2)
  807408:	11800015 	stw	r6,0(r2)
  80740c:	003fba06 	br	8072f8 <__svfscanf_r+0x1134>
  807410:	d900a417 	ldw	r4,656(sp)
  807414:	20800017 	ldw	r2,0(r4)
  807418:	21000104 	addi	r4,r4,4
  80741c:	d900a415 	stw	r4,656(sp)
  807420:	10c00015 	stw	r3,0(r2)
  807424:	003fb406 	br	8072f8 <__svfscanf_r+0x1134>
  807428:	d9c0a117 	ldw	r7,644(sp)
  80742c:	d940a617 	ldw	r5,664(sp)
  807430:	000d883a 	mov	r6,zero
  807434:	b009883a 	mov	r4,r22
  807438:	080c9880 	call	80c988 <_strtoull_r>
  80743c:	100d883a 	mov	r6,r2
  807440:	180f883a 	mov	r7,r3
  807444:	003feb06 	br	8073f4 <__svfscanf_r+0x1230>
  807448:	d8c0a117 	ldw	r3,644(sp)
  80744c:	18c5883a 	add	r2,r3,r3
  807450:	00c02074 	movhi	r3,129
  807454:	18d38404 	addi	r3,r3,19984
  807458:	10c5883a 	add	r2,r2,r3
  80745c:	1080000f 	ldh	r2,0(r2)
  807460:	00fd1fc4 	movi	r3,-2945
  807464:	90e4703a 	and	r18,r18,r3
  807468:	d880a115 	stw	r2,644(sp)
  80746c:	003faa06 	br	807318 <__svfscanf_r+0x1154>
  807470:	d900a117 	ldw	r4,644(sp)
  807474:	00c02074 	movhi	r3,129
  807478:	18d38404 	addi	r3,r3,19984
  80747c:	2105883a 	add	r2,r4,r4
  807480:	10c5883a 	add	r2,r2,r3
  807484:	1080000f 	ldh	r2,0(r2)
  807488:	00c00204 	movi	r3,8
  80748c:	d880a115 	stw	r2,644(sp)
  807490:	18bf140e 	bge	r3,r2,8070e4 <__svfscanf_r+0xf20>
  807494:	00bd1fc4 	movi	r2,-2945
  807498:	90a4703a 	and	r18,r18,r2
  80749c:	003f9e06 	br	807318 <__svfscanf_r+0x1154>
  8074a0:	d8c0a117 	ldw	r3,644(sp)
  8074a4:	00800284 	movi	r2,10
  8074a8:	10fffa16 	blt	r2,r3,807494 <__svfscanf_r+0x12d0>
  8074ac:	003f0d06 	br	8070e4 <__svfscanf_r+0xf20>
  8074b0:	90c1800c 	andi	r3,r18,1536
  8074b4:	00808004 	movi	r2,512
  8074b8:	18bf0a1e 	bne	r3,r2,8070e4 <__svfscanf_r+0xf20>
  8074bc:	00bf7fc4 	movi	r2,-513
  8074c0:	9084703a 	and	r2,r18,r2
  8074c4:	01000404 	movi	r4,16
  8074c8:	14814014 	ori	r18,r2,1280
  8074cc:	d900a115 	stw	r4,644(sp)
  8074d0:	003f9106 	br	807318 <__svfscanf_r+0x1154>
  8074d4:	d880a417 	ldw	r2,656(sp)
  8074d8:	dd400404 	addi	r21,sp,16
  8074dc:	14800017 	ldw	r18,0(r2)
  8074e0:	9027883a 	mov	r19,r18
  8074e4:	81000017 	ldw	r4,0(r16)
  8074e8:	20800003 	ldbu	r2,0(r4)
  8074ec:	a885883a 	add	r2,r21,r2
  8074f0:	10c00007 	ldb	r3,0(r2)
  8074f4:	18001426 	beq	r3,zero,807548 <__svfscanf_r+0x1384>
  8074f8:	d8c0a317 	ldw	r3,652(sp)
  8074fc:	80800117 	ldw	r2,4(r16)
  807500:	21800044 	addi	r6,r4,1
  807504:	18ffffc4 	addi	r3,r3,-1
  807508:	d8c0a315 	stw	r3,652(sp)
  80750c:	10ffffc4 	addi	r3,r2,-1
  807510:	80c00115 	stw	r3,4(r16)
  807514:	20800003 	ldbu	r2,0(r4)
  807518:	90800005 	stb	r2,0(r18)
  80751c:	d900a317 	ldw	r4,652(sp)
  807520:	81800015 	stw	r6,0(r16)
  807524:	94800044 	addi	r18,r18,1
  807528:	20000726 	beq	r4,zero,807548 <__svfscanf_r+0x1384>
  80752c:	80800117 	ldw	r2,4(r16)
  807530:	00bfec16 	blt	zero,r2,8074e4 <__svfscanf_r+0x1320>
  807534:	b009883a 	mov	r4,r22
  807538:	800b883a 	mov	r5,r16
  80753c:	0803c440 	call	803c44 <__srefill_r>
  807540:	103fe826 	beq	r2,zero,8074e4 <__svfscanf_r+0x1320>
  807544:	9cbb7426 	beq	r19,r18,806318 <__svfscanf_r+0x154>
  807548:	94e7c83a 	sub	r19,r18,r19
  80754c:	983b5226 	beq	r19,zero,806298 <__svfscanf_r+0xd4>
  807550:	90000005 	stb	zero,0(r18)
  807554:	d880a417 	ldw	r2,656(sp)
  807558:	d8c0a217 	ldw	r3,648(sp)
  80755c:	8ce3883a 	add	r17,r17,r19
  807560:	10800104 	addi	r2,r2,4
  807564:	18c00044 	addi	r3,r3,1
  807568:	d880a415 	stw	r2,656(sp)
  80756c:	d8c0a215 	stw	r3,648(sp)
  807570:	003b2706 	br	806210 <__svfscanf_r+0x4c>
  807574:	9cc00414 	ori	r19,r19,16
  807578:	003b6e06 	br	806334 <__svfscanf_r+0x170>
  80757c:	00c00404 	movi	r3,16
  807580:	01002074 	movhi	r4,129
  807584:	2131cd04 	addi	r4,r4,-14540
  807588:	9cc08014 	ori	r19,r19,512
  80758c:	054000c4 	movi	r21,3
  807590:	d8c0a115 	stw	r3,644(sp)
  807594:	d900a015 	stw	r4,640(sp)
  807598:	003bf806 	br	80657c <__svfscanf_r+0x3b8>
  80759c:	9880040c 	andi	r2,r19,16
  8075a0:	10001926 	beq	r2,zero,807608 <__svfscanf_r+0x1444>
  8075a4:	0027883a 	mov	r19,zero
  8075a8:	00000b06 	br	8075d8 <__svfscanf_r+0x1414>
  8075ac:	80800017 	ldw	r2,0(r16)
  8075b0:	b009883a 	mov	r4,r22
  8075b4:	800b883a 	mov	r5,r16
  8075b8:	148d883a 	add	r6,r2,r18
  8075bc:	81800015 	stw	r6,0(r16)
  8075c0:	9ca7883a 	add	r19,r19,r18
  8075c4:	0803c440 	call	803c44 <__srefill_r>
  8075c8:	103c711e 	bne	r2,zero,806790 <__svfscanf_r+0x5cc>
  8075cc:	d900a317 	ldw	r4,652(sp)
  8075d0:	2489c83a 	sub	r4,r4,r18
  8075d4:	d900a315 	stw	r4,652(sp)
  8075d8:	84800117 	ldw	r18,4(r16)
  8075dc:	d8c0a317 	ldw	r3,652(sp)
  8075e0:	90fff216 	blt	r18,r3,8075ac <__svfscanf_r+0x13e8>
  8075e4:	d900a317 	ldw	r4,652(sp)
  8075e8:	80800017 	ldw	r2,0(r16)
  8075ec:	9927883a 	add	r19,r19,r4
  8075f0:	9107c83a 	sub	r3,r18,r4
  8075f4:	110d883a 	add	r6,r2,r4
  8075f8:	8ce3883a 	add	r17,r17,r19
  8075fc:	80c00115 	stw	r3,4(r16)
  807600:	81800015 	stw	r6,0(r16)
  807604:	003b0206 	br	806210 <__svfscanf_r+0x4c>
  807608:	d880a417 	ldw	r2,656(sp)
  80760c:	d980a317 	ldw	r6,652(sp)
  807610:	01400044 	movi	r5,1
  807614:	11000017 	ldw	r4,0(r2)
  807618:	800f883a 	mov	r7,r16
  80761c:	08095d00 	call	8095d0 <fread>
  807620:	103b3d26 	beq	r2,zero,806318 <__svfscanf_r+0x154>
  807624:	d8c0a417 	ldw	r3,656(sp)
  807628:	d900a217 	ldw	r4,648(sp)
  80762c:	88a3883a 	add	r17,r17,r2
  807630:	18c00104 	addi	r3,r3,4
  807634:	21000044 	addi	r4,r4,1
  807638:	d8c0a415 	stw	r3,656(sp)
  80763c:	d900a215 	stw	r4,648(sp)
  807640:	003af306 	br	806210 <__svfscanf_r+0x4c>
  807644:	8080030b 	ldhu	r2,12(r16)
  807648:	1080100c 	andi	r2,r2,64
  80764c:	103b1226 	beq	r2,zero,806298 <__svfscanf_r+0xd4>
  807650:	003b3306 	br	806320 <__svfscanf_r+0x15c>
  807654:	983b1026 	beq	r19,zero,806298 <__svfscanf_r+0xd4>
  807658:	8ce3883a 	add	r17,r17,r19
  80765c:	003aec06 	br	806210 <__svfscanf_r+0x4c>
  807660:	983c9626 	beq	r19,zero,8068bc <__svfscanf_r+0x6f8>
  807664:	9cffffc4 	addi	r19,r19,-1
  807668:	d8c04404 	addi	r3,sp,272
  80766c:	1cc5883a 	add	r2,r3,r19
  807670:	11400003 	ldbu	r5,0(r2)
  807674:	b009883a 	mov	r4,r22
  807678:	800d883a 	mov	r6,r16
  80767c:	080cd540 	call	80cd54 <_ungetc_r>
  807680:	003ff706 	br	807660 <__svfscanf_r+0x149c>
  807684:	00bfff84 	movi	r2,-2
  807688:	18bc7a1e 	bne	r3,r2,806874 <__svfscanf_r+0x6b0>
  80768c:	003c8406 	br	8068a0 <__svfscanf_r+0x6dc>
  807690:	d900a417 	ldw	r4,656(sp)
  807694:	25400017 	ldw	r21,0(r4)
  807698:	21000104 	addi	r4,r4,4
  80769c:	d900a415 	stw	r4,656(sp)
  8076a0:	003c4a06 	br	8067cc <__svfscanf_r+0x608>
  8076a4:	00bfff84 	movi	r2,-2
  8076a8:	18bc0f1e 	bne	r3,r2,8066e8 <__svfscanf_r+0x524>
  8076ac:	003c1506 	br	806704 <__svfscanf_r+0x540>
  8076b0:	b009883a 	mov	r4,r22
  8076b4:	800b883a 	mov	r5,r16
  8076b8:	0803c440 	call	803c44 <__srefill_r>
  8076bc:	103c1326 	beq	r2,zero,80670c <__svfscanf_r+0x548>
  8076c0:	903b151e 	bne	r18,zero,806318 <__svfscanf_r+0x154>
  8076c4:	a83ad21e 	bne	r21,zero,806210 <__svfscanf_r+0x4c>
  8076c8:	d880a217 	ldw	r2,648(sp)
  8076cc:	10800044 	addi	r2,r2,1
  8076d0:	d880a215 	stw	r2,648(sp)
  8076d4:	003ace06 	br	806210 <__svfscanf_r+0x4c>
  8076d8:	0027883a 	mov	r19,zero
  8076dc:	003bdd06 	br	806654 <__svfscanf_r+0x490>
  8076e0:	9cc00114 	ori	r19,r19,4
  8076e4:	003b1306 	br	806334 <__svfscanf_r+0x170>
  8076e8:	05400104 	movi	r21,4
  8076ec:	003ba306 	br	80657c <__svfscanf_r+0x3b8>
  8076f0:	9cc00054 	ori	r19,r19,1
  8076f4:	00802074 	movhi	r2,129
  8076f8:	10b06d04 	addi	r2,r2,-15948
  8076fc:	00c00284 	movi	r3,10
  807700:	054000c4 	movi	r21,3
  807704:	d880a015 	stw	r2,640(sp)
  807708:	d8c0a115 	stw	r3,644(sp)
  80770c:	003b9b06 	br	80657c <__svfscanf_r+0x3b8>
  807710:	9cc01014 	ori	r19,r19,64
  807714:	002b883a 	mov	r21,zero
  807718:	003b9806 	br	80657c <__svfscanf_r+0x3b8>
  80771c:	a00b883a 	mov	r5,r20
  807720:	d9000404 	addi	r4,sp,16
  807724:	080a9c40 	call	80a9c4 <__sccl>
  807728:	1029883a 	mov	r20,r2
  80772c:	9cc01014 	ori	r19,r19,64
  807730:	05400044 	movi	r21,1
  807734:	003b9106 	br	80657c <__svfscanf_r+0x3b8>
  807738:	9cc00054 	ori	r19,r19,1
  80773c:	00800204 	movi	r2,8
  807740:	00c02074 	movhi	r3,129
  807744:	18f1cd04 	addi	r3,r3,-14540
  807748:	054000c4 	movi	r21,3
  80774c:	d880a115 	stw	r2,644(sp)
  807750:	d8c0a015 	stw	r3,640(sp)
  807754:	003b8906 	br	80657c <__svfscanf_r+0x3b8>
  807758:	9880040c 	andi	r2,r19,16
  80775c:	103aac1e 	bne	r2,zero,806210 <__svfscanf_r+0x4c>
  807760:	9880010c 	andi	r2,r19,4
  807764:	10002426 	beq	r2,zero,8077f8 <__svfscanf_r+0x1634>
  807768:	d900a417 	ldw	r4,656(sp)
  80776c:	20800017 	ldw	r2,0(r4)
  807770:	21000104 	addi	r4,r4,4
  807774:	d900a415 	stw	r4,656(sp)
  807778:	1440000d 	sth	r17,0(r2)
  80777c:	003aa406 	br	806210 <__svfscanf_r+0x4c>
  807780:	9cc00094 	ori	r19,r19,2
  807784:	003aeb06 	br	806334 <__svfscanf_r+0x170>
  807788:	05400084 	movi	r21,2
  80778c:	003b7b06 	br	80657c <__svfscanf_r+0x3b8>
  807790:	00800404 	movi	r2,16
  807794:	00c02074 	movhi	r3,129
  807798:	18f1cd04 	addi	r3,r3,-14540
  80779c:	9cc08814 	ori	r19,r19,544
  8077a0:	054000c4 	movi	r21,3
  8077a4:	d880a115 	stw	r2,644(sp)
  8077a8:	d8c0a015 	stw	r3,640(sp)
  8077ac:	003b7306 	br	80657c <__svfscanf_r+0x3b8>
  8077b0:	0009883a 	mov	r4,zero
  8077b4:	080aa840 	call	80aa84 <nanf>
  8077b8:	b8800015 	stw	r2,0(r23)
  8077bc:	003d2706 	br	806c5c <__svfscanf_r+0xa98>
  8077c0:	a0c00007 	ldb	r3,0(r20)
  8077c4:	00801b04 	movi	r2,108
  8077c8:	18800826 	beq	r3,r2,8077ec <__svfscanf_r+0x1628>
  8077cc:	9cc00054 	ori	r19,r19,1
  8077d0:	003ad806 	br	806334 <__svfscanf_r+0x170>
  8077d4:	01002074 	movhi	r4,129
  8077d8:	21306d04 	addi	r4,r4,-15948
  8077dc:	054000c4 	movi	r21,3
  8077e0:	d900a015 	stw	r4,640(sp)
  8077e4:	d800a115 	stw	zero,644(sp)
  8077e8:	003b6406 	br	80657c <__svfscanf_r+0x3b8>
  8077ec:	a5000044 	addi	r20,r20,1
  8077f0:	9cc00094 	ori	r19,r19,2
  8077f4:	003acf06 	br	806334 <__svfscanf_r+0x170>
  8077f8:	9880004c 	andi	r2,r19,1
  8077fc:	1005003a 	cmpeq	r2,r2,zero
  807800:	10000a26 	beq	r2,zero,80782c <__svfscanf_r+0x1668>
  807804:	9880008c 	andi	r2,r19,2
  807808:	10000826 	beq	r2,zero,80782c <__svfscanf_r+0x1668>
  80780c:	d900a417 	ldw	r4,656(sp)
  807810:	8807d7fa 	srai	r3,r17,31
  807814:	20800017 	ldw	r2,0(r4)
  807818:	21000104 	addi	r4,r4,4
  80781c:	d900a415 	stw	r4,656(sp)
  807820:	14400015 	stw	r17,0(r2)
  807824:	10c00115 	stw	r3,4(r2)
  807828:	003a7906 	br	806210 <__svfscanf_r+0x4c>
  80782c:	d8c0a417 	ldw	r3,656(sp)
  807830:	18800017 	ldw	r2,0(r3)
  807834:	18c00104 	addi	r3,r3,4
  807838:	d8c0a415 	stw	r3,656(sp)
  80783c:	14400015 	stw	r17,0(r2)
  807840:	003a7306 	br	806210 <__svfscanf_r+0x4c>

00807844 <__svfscanf>:
  807844:	00802074 	movhi	r2,129
  807848:	109c1404 	addi	r2,r2,28752
  80784c:	2013883a 	mov	r9,r4
  807850:	11000017 	ldw	r4,0(r2)
  807854:	2805883a 	mov	r2,r5
  807858:	300f883a 	mov	r7,r6
  80785c:	480b883a 	mov	r5,r9
  807860:	100d883a 	mov	r6,r2
  807864:	08061c41 	jmpi	8061c4 <__svfscanf_r>

00807868 <_vfscanf_r>:
  807868:	defffb04 	addi	sp,sp,-20
  80786c:	dcc00315 	stw	r19,12(sp)
  807870:	dc800215 	stw	r18,8(sp)
  807874:	dc400115 	stw	r17,4(sp)
  807878:	dc000015 	stw	r16,0(sp)
  80787c:	dfc00415 	stw	ra,16(sp)
  807880:	2021883a 	mov	r16,r4
  807884:	2823883a 	mov	r17,r5
  807888:	3025883a 	mov	r18,r6
  80788c:	3827883a 	mov	r19,r7
  807890:	20000226 	beq	r4,zero,80789c <_vfscanf_r+0x34>
  807894:	20800e17 	ldw	r2,56(r4)
  807898:	10000b26 	beq	r2,zero,8078c8 <_vfscanf_r+0x60>
  80789c:	8009883a 	mov	r4,r16
  8078a0:	880b883a 	mov	r5,r17
  8078a4:	900d883a 	mov	r6,r18
  8078a8:	980f883a 	mov	r7,r19
  8078ac:	dfc00417 	ldw	ra,16(sp)
  8078b0:	dcc00317 	ldw	r19,12(sp)
  8078b4:	dc800217 	ldw	r18,8(sp)
  8078b8:	dc400117 	ldw	r17,4(sp)
  8078bc:	dc000017 	ldw	r16,0(sp)
  8078c0:	dec00504 	addi	sp,sp,20
  8078c4:	08061c41 	jmpi	8061c4 <__svfscanf_r>
  8078c8:	08015540 	call	801554 <__sinit>
  8078cc:	003ff306 	br	80789c <_vfscanf_r+0x34>

008078d0 <vfscanf>:
  8078d0:	defffb04 	addi	sp,sp,-20
  8078d4:	dcc00315 	stw	r19,12(sp)
  8078d8:	04c02074 	movhi	r19,129
  8078dc:	9cdc1404 	addi	r19,r19,28752
  8078e0:	98c00017 	ldw	r3,0(r19)
  8078e4:	dc800215 	stw	r18,8(sp)
  8078e8:	dc400115 	stw	r17,4(sp)
  8078ec:	dc000015 	stw	r16,0(sp)
  8078f0:	dfc00415 	stw	ra,16(sp)
  8078f4:	2021883a 	mov	r16,r4
  8078f8:	2823883a 	mov	r17,r5
  8078fc:	3025883a 	mov	r18,r6
  807900:	18000326 	beq	r3,zero,807910 <vfscanf+0x40>
  807904:	18800e17 	ldw	r2,56(r3)
  807908:	1809883a 	mov	r4,r3
  80790c:	10000b26 	beq	r2,zero,80793c <vfscanf+0x6c>
  807910:	99000017 	ldw	r4,0(r19)
  807914:	800b883a 	mov	r5,r16
  807918:	880d883a 	mov	r6,r17
  80791c:	900f883a 	mov	r7,r18
  807920:	dfc00417 	ldw	ra,16(sp)
  807924:	dcc00317 	ldw	r19,12(sp)
  807928:	dc800217 	ldw	r18,8(sp)
  80792c:	dc400117 	ldw	r17,4(sp)
  807930:	dc000017 	ldw	r16,0(sp)
  807934:	dec00504 	addi	sp,sp,20
  807938:	08061c41 	jmpi	8061c4 <__svfscanf_r>
  80793c:	08015540 	call	801554 <__sinit>
  807940:	003ff306 	br	807910 <vfscanf+0x40>

00807944 <_write_r>:
  807944:	defffd04 	addi	sp,sp,-12
  807948:	dc000015 	stw	r16,0(sp)
  80794c:	040020b4 	movhi	r16,130
  807950:	84236404 	addi	r16,r16,-29296
  807954:	dc400115 	stw	r17,4(sp)
  807958:	80000015 	stw	zero,0(r16)
  80795c:	2023883a 	mov	r17,r4
  807960:	2809883a 	mov	r4,r5
  807964:	300b883a 	mov	r5,r6
  807968:	380d883a 	mov	r6,r7
  80796c:	dfc00215 	stw	ra,8(sp)
  807970:	08116580 	call	811658 <write>
  807974:	1007883a 	mov	r3,r2
  807978:	00bfffc4 	movi	r2,-1
  80797c:	18800626 	beq	r3,r2,807998 <_write_r+0x54>
  807980:	1805883a 	mov	r2,r3
  807984:	dfc00217 	ldw	ra,8(sp)
  807988:	dc400117 	ldw	r17,4(sp)
  80798c:	dc000017 	ldw	r16,0(sp)
  807990:	dec00304 	addi	sp,sp,12
  807994:	f800283a 	ret
  807998:	80800017 	ldw	r2,0(r16)
  80799c:	103ff826 	beq	r2,zero,807980 <_write_r+0x3c>
  8079a0:	88800015 	stw	r2,0(r17)
  8079a4:	1805883a 	mov	r2,r3
  8079a8:	dfc00217 	ldw	ra,8(sp)
  8079ac:	dc400117 	ldw	r17,4(sp)
  8079b0:	dc000017 	ldw	r16,0(sp)
  8079b4:	dec00304 	addi	sp,sp,12
  8079b8:	f800283a 	ret

008079bc <__swsetup_r>:
  8079bc:	00802074 	movhi	r2,129
  8079c0:	109c1404 	addi	r2,r2,28752
  8079c4:	10c00017 	ldw	r3,0(r2)
  8079c8:	defffd04 	addi	sp,sp,-12
  8079cc:	dc400115 	stw	r17,4(sp)
  8079d0:	dc000015 	stw	r16,0(sp)
  8079d4:	dfc00215 	stw	ra,8(sp)
  8079d8:	2023883a 	mov	r17,r4
  8079dc:	2821883a 	mov	r16,r5
  8079e0:	18000226 	beq	r3,zero,8079ec <__swsetup_r+0x30>
  8079e4:	18800e17 	ldw	r2,56(r3)
  8079e8:	10001f26 	beq	r2,zero,807a68 <__swsetup_r+0xac>
  8079ec:	8100030b 	ldhu	r4,12(r16)
  8079f0:	2080020c 	andi	r2,r4,8
  8079f4:	10002826 	beq	r2,zero,807a98 <__swsetup_r+0xdc>
  8079f8:	81400417 	ldw	r5,16(r16)
  8079fc:	28001d26 	beq	r5,zero,807a74 <__swsetup_r+0xb8>
  807a00:	2080004c 	andi	r2,r4,1
  807a04:	1005003a 	cmpeq	r2,r2,zero
  807a08:	10000b26 	beq	r2,zero,807a38 <__swsetup_r+0x7c>
  807a0c:	2080008c 	andi	r2,r4,2
  807a10:	10001226 	beq	r2,zero,807a5c <__swsetup_r+0xa0>
  807a14:	0005883a 	mov	r2,zero
  807a18:	80800215 	stw	r2,8(r16)
  807a1c:	28000b26 	beq	r5,zero,807a4c <__swsetup_r+0x90>
  807a20:	0005883a 	mov	r2,zero
  807a24:	dfc00217 	ldw	ra,8(sp)
  807a28:	dc400117 	ldw	r17,4(sp)
  807a2c:	dc000017 	ldw	r16,0(sp)
  807a30:	dec00304 	addi	sp,sp,12
  807a34:	f800283a 	ret
  807a38:	80800517 	ldw	r2,20(r16)
  807a3c:	80000215 	stw	zero,8(r16)
  807a40:	0085c83a 	sub	r2,zero,r2
  807a44:	80800615 	stw	r2,24(r16)
  807a48:	283ff51e 	bne	r5,zero,807a20 <__swsetup_r+0x64>
  807a4c:	2080200c 	andi	r2,r4,128
  807a50:	103ff326 	beq	r2,zero,807a20 <__swsetup_r+0x64>
  807a54:	00bfffc4 	movi	r2,-1
  807a58:	003ff206 	br	807a24 <__swsetup_r+0x68>
  807a5c:	80800517 	ldw	r2,20(r16)
  807a60:	80800215 	stw	r2,8(r16)
  807a64:	003fed06 	br	807a1c <__swsetup_r+0x60>
  807a68:	1809883a 	mov	r4,r3
  807a6c:	08015540 	call	801554 <__sinit>
  807a70:	003fde06 	br	8079ec <__swsetup_r+0x30>
  807a74:	20c0a00c 	andi	r3,r4,640
  807a78:	00808004 	movi	r2,512
  807a7c:	18bfe026 	beq	r3,r2,807a00 <__swsetup_r+0x44>
  807a80:	8809883a 	mov	r4,r17
  807a84:	800b883a 	mov	r5,r16
  807a88:	08028dc0 	call	8028dc <__smakebuf_r>
  807a8c:	8100030b 	ldhu	r4,12(r16)
  807a90:	81400417 	ldw	r5,16(r16)
  807a94:	003fda06 	br	807a00 <__swsetup_r+0x44>
  807a98:	2080040c 	andi	r2,r4,16
  807a9c:	103fed26 	beq	r2,zero,807a54 <__swsetup_r+0x98>
  807aa0:	2080010c 	andi	r2,r4,4
  807aa4:	10001226 	beq	r2,zero,807af0 <__swsetup_r+0x134>
  807aa8:	81400c17 	ldw	r5,48(r16)
  807aac:	28000526 	beq	r5,zero,807ac4 <__swsetup_r+0x108>
  807ab0:	80801004 	addi	r2,r16,64
  807ab4:	28800226 	beq	r5,r2,807ac0 <__swsetup_r+0x104>
  807ab8:	8809883a 	mov	r4,r17
  807abc:	0801ad80 	call	801ad8 <_free_r>
  807ac0:	80000c15 	stw	zero,48(r16)
  807ac4:	8080030b 	ldhu	r2,12(r16)
  807ac8:	81400417 	ldw	r5,16(r16)
  807acc:	80000115 	stw	zero,4(r16)
  807ad0:	10bff6cc 	andi	r2,r2,65499
  807ad4:	8080030d 	sth	r2,12(r16)
  807ad8:	81400015 	stw	r5,0(r16)
  807adc:	8080030b 	ldhu	r2,12(r16)
  807ae0:	10800214 	ori	r2,r2,8
  807ae4:	113fffcc 	andi	r4,r2,65535
  807ae8:	8080030d 	sth	r2,12(r16)
  807aec:	003fc306 	br	8079fc <__swsetup_r+0x40>
  807af0:	81400417 	ldw	r5,16(r16)
  807af4:	003ff906 	br	807adc <__swsetup_r+0x120>

00807af8 <_close_r>:
  807af8:	defffd04 	addi	sp,sp,-12
  807afc:	dc000015 	stw	r16,0(sp)
  807b00:	040020b4 	movhi	r16,130
  807b04:	84236404 	addi	r16,r16,-29296
  807b08:	dc400115 	stw	r17,4(sp)
  807b0c:	80000015 	stw	zero,0(r16)
  807b10:	2023883a 	mov	r17,r4
  807b14:	2809883a 	mov	r4,r5
  807b18:	dfc00215 	stw	ra,8(sp)
  807b1c:	08106d00 	call	8106d0 <close>
  807b20:	1007883a 	mov	r3,r2
  807b24:	00bfffc4 	movi	r2,-1
  807b28:	18800626 	beq	r3,r2,807b44 <_close_r+0x4c>
  807b2c:	1805883a 	mov	r2,r3
  807b30:	dfc00217 	ldw	ra,8(sp)
  807b34:	dc400117 	ldw	r17,4(sp)
  807b38:	dc000017 	ldw	r16,0(sp)
  807b3c:	dec00304 	addi	sp,sp,12
  807b40:	f800283a 	ret
  807b44:	80800017 	ldw	r2,0(r16)
  807b48:	103ff826 	beq	r2,zero,807b2c <_close_r+0x34>
  807b4c:	88800015 	stw	r2,0(r17)
  807b50:	1805883a 	mov	r2,r3
  807b54:	dfc00217 	ldw	ra,8(sp)
  807b58:	dc400117 	ldw	r17,4(sp)
  807b5c:	dc000017 	ldw	r16,0(sp)
  807b60:	dec00304 	addi	sp,sp,12
  807b64:	f800283a 	ret

00807b68 <quorem>:
  807b68:	28c00417 	ldw	r3,16(r5)
  807b6c:	20800417 	ldw	r2,16(r4)
  807b70:	defff604 	addi	sp,sp,-40
  807b74:	ddc00715 	stw	r23,28(sp)
  807b78:	dd400515 	stw	r21,20(sp)
  807b7c:	dfc00915 	stw	ra,36(sp)
  807b80:	df000815 	stw	fp,32(sp)
  807b84:	dd800615 	stw	r22,24(sp)
  807b88:	dd000415 	stw	r20,16(sp)
  807b8c:	dcc00315 	stw	r19,12(sp)
  807b90:	dc800215 	stw	r18,8(sp)
  807b94:	dc400115 	stw	r17,4(sp)
  807b98:	dc000015 	stw	r16,0(sp)
  807b9c:	202f883a 	mov	r23,r4
  807ba0:	282b883a 	mov	r21,r5
  807ba4:	10c07416 	blt	r2,r3,807d78 <quorem+0x210>
  807ba8:	1c7fffc4 	addi	r17,r3,-1
  807bac:	8c45883a 	add	r2,r17,r17
  807bb0:	1085883a 	add	r2,r2,r2
  807bb4:	2c000504 	addi	r16,r5,20
  807bb8:	24c00504 	addi	r19,r4,20
  807bbc:	14ed883a 	add	r22,r2,r19
  807bc0:	80a5883a 	add	r18,r16,r2
  807bc4:	b7000017 	ldw	fp,0(r22)
  807bc8:	91400017 	ldw	r5,0(r18)
  807bcc:	e009883a 	mov	r4,fp
  807bd0:	29400044 	addi	r5,r5,1
  807bd4:	080fcdc0 	call	80fcdc <__udivsi3>
  807bd8:	1029883a 	mov	r20,r2
  807bdc:	10003c1e 	bne	r2,zero,807cd0 <quorem+0x168>
  807be0:	a80b883a 	mov	r5,r21
  807be4:	b809883a 	mov	r4,r23
  807be8:	0809a440 	call	809a44 <__mcmp>
  807bec:	10002b16 	blt	r2,zero,807c9c <quorem+0x134>
  807bf0:	a5000044 	addi	r20,r20,1
  807bf4:	980f883a 	mov	r7,r19
  807bf8:	0011883a 	mov	r8,zero
  807bfc:	0009883a 	mov	r4,zero
  807c00:	81400017 	ldw	r5,0(r16)
  807c04:	38c00017 	ldw	r3,0(r7)
  807c08:	84000104 	addi	r16,r16,4
  807c0c:	28bfffcc 	andi	r2,r5,65535
  807c10:	2085883a 	add	r2,r4,r2
  807c14:	11bfffcc 	andi	r6,r2,65535
  807c18:	193fffcc 	andi	r4,r3,65535
  807c1c:	1004d43a 	srli	r2,r2,16
  807c20:	280ad43a 	srli	r5,r5,16
  807c24:	2189c83a 	sub	r4,r4,r6
  807c28:	2209883a 	add	r4,r4,r8
  807c2c:	1806d43a 	srli	r3,r3,16
  807c30:	288b883a 	add	r5,r5,r2
  807c34:	200dd43a 	srai	r6,r4,16
  807c38:	28bfffcc 	andi	r2,r5,65535
  807c3c:	1887c83a 	sub	r3,r3,r2
  807c40:	1987883a 	add	r3,r3,r6
  807c44:	3900000d 	sth	r4,0(r7)
  807c48:	38c0008d 	sth	r3,2(r7)
  807c4c:	2808d43a 	srli	r4,r5,16
  807c50:	39c00104 	addi	r7,r7,4
  807c54:	1811d43a 	srai	r8,r3,16
  807c58:	943fe92e 	bgeu	r18,r16,807c00 <quorem+0x98>
  807c5c:	8c45883a 	add	r2,r17,r17
  807c60:	1085883a 	add	r2,r2,r2
  807c64:	9885883a 	add	r2,r19,r2
  807c68:	10c00017 	ldw	r3,0(r2)
  807c6c:	18000b1e 	bne	r3,zero,807c9c <quorem+0x134>
  807c70:	113fff04 	addi	r4,r2,-4
  807c74:	9900082e 	bgeu	r19,r4,807c98 <quorem+0x130>
  807c78:	10bfff17 	ldw	r2,-4(r2)
  807c7c:	10000326 	beq	r2,zero,807c8c <quorem+0x124>
  807c80:	00000506 	br	807c98 <quorem+0x130>
  807c84:	20800017 	ldw	r2,0(r4)
  807c88:	1000031e 	bne	r2,zero,807c98 <quorem+0x130>
  807c8c:	213fff04 	addi	r4,r4,-4
  807c90:	8c7fffc4 	addi	r17,r17,-1
  807c94:	993ffb36 	bltu	r19,r4,807c84 <quorem+0x11c>
  807c98:	bc400415 	stw	r17,16(r23)
  807c9c:	a005883a 	mov	r2,r20
  807ca0:	dfc00917 	ldw	ra,36(sp)
  807ca4:	df000817 	ldw	fp,32(sp)
  807ca8:	ddc00717 	ldw	r23,28(sp)
  807cac:	dd800617 	ldw	r22,24(sp)
  807cb0:	dd400517 	ldw	r21,20(sp)
  807cb4:	dd000417 	ldw	r20,16(sp)
  807cb8:	dcc00317 	ldw	r19,12(sp)
  807cbc:	dc800217 	ldw	r18,8(sp)
  807cc0:	dc400117 	ldw	r17,4(sp)
  807cc4:	dc000017 	ldw	r16,0(sp)
  807cc8:	dec00a04 	addi	sp,sp,40
  807ccc:	f800283a 	ret
  807cd0:	980f883a 	mov	r7,r19
  807cd4:	8011883a 	mov	r8,r16
  807cd8:	0013883a 	mov	r9,zero
  807cdc:	000d883a 	mov	r6,zero
  807ce0:	40c00017 	ldw	r3,0(r8)
  807ce4:	39000017 	ldw	r4,0(r7)
  807ce8:	42000104 	addi	r8,r8,4
  807cec:	18bfffcc 	andi	r2,r3,65535
  807cf0:	a085383a 	mul	r2,r20,r2
  807cf4:	1806d43a 	srli	r3,r3,16
  807cf8:	217fffcc 	andi	r5,r4,65535
  807cfc:	3085883a 	add	r2,r6,r2
  807d00:	11bfffcc 	andi	r6,r2,65535
  807d04:	a0c7383a 	mul	r3,r20,r3
  807d08:	1004d43a 	srli	r2,r2,16
  807d0c:	298bc83a 	sub	r5,r5,r6
  807d10:	2a4b883a 	add	r5,r5,r9
  807d14:	2008d43a 	srli	r4,r4,16
  807d18:	1887883a 	add	r3,r3,r2
  807d1c:	280dd43a 	srai	r6,r5,16
  807d20:	18bfffcc 	andi	r2,r3,65535
  807d24:	2089c83a 	sub	r4,r4,r2
  807d28:	2189883a 	add	r4,r4,r6
  807d2c:	3900008d 	sth	r4,2(r7)
  807d30:	3940000d 	sth	r5,0(r7)
  807d34:	180cd43a 	srli	r6,r3,16
  807d38:	39c00104 	addi	r7,r7,4
  807d3c:	2013d43a 	srai	r9,r4,16
  807d40:	923fe72e 	bgeu	r18,r8,807ce0 <quorem+0x178>
  807d44:	e03fa61e 	bne	fp,zero,807be0 <quorem+0x78>
  807d48:	b0ffff04 	addi	r3,r22,-4
  807d4c:	98c0082e 	bgeu	r19,r3,807d70 <quorem+0x208>
  807d50:	b0bfff17 	ldw	r2,-4(r22)
  807d54:	10000326 	beq	r2,zero,807d64 <quorem+0x1fc>
  807d58:	00000506 	br	807d70 <quorem+0x208>
  807d5c:	18800017 	ldw	r2,0(r3)
  807d60:	1000031e 	bne	r2,zero,807d70 <quorem+0x208>
  807d64:	18ffff04 	addi	r3,r3,-4
  807d68:	8c7fffc4 	addi	r17,r17,-1
  807d6c:	98fffb36 	bltu	r19,r3,807d5c <quorem+0x1f4>
  807d70:	bc400415 	stw	r17,16(r23)
  807d74:	003f9a06 	br	807be0 <quorem+0x78>
  807d78:	0005883a 	mov	r2,zero
  807d7c:	003fc806 	br	807ca0 <quorem+0x138>

00807d80 <_dtoa_r>:
  807d80:	22001017 	ldw	r8,64(r4)
  807d84:	deffda04 	addi	sp,sp,-152
  807d88:	dd402115 	stw	r21,132(sp)
  807d8c:	dd002015 	stw	r20,128(sp)
  807d90:	dc801e15 	stw	r18,120(sp)
  807d94:	dc401d15 	stw	r17,116(sp)
  807d98:	dfc02515 	stw	ra,148(sp)
  807d9c:	df002415 	stw	fp,144(sp)
  807da0:	ddc02315 	stw	r23,140(sp)
  807da4:	dd802215 	stw	r22,136(sp)
  807da8:	dcc01f15 	stw	r19,124(sp)
  807dac:	dc001c15 	stw	r16,112(sp)
  807db0:	d9001615 	stw	r4,88(sp)
  807db4:	3023883a 	mov	r17,r6
  807db8:	2829883a 	mov	r20,r5
  807dbc:	d9c01715 	stw	r7,92(sp)
  807dc0:	dc802817 	ldw	r18,160(sp)
  807dc4:	302b883a 	mov	r21,r6
  807dc8:	40000a26 	beq	r8,zero,807df4 <_dtoa_r+0x74>
  807dcc:	20801117 	ldw	r2,68(r4)
  807dd0:	400b883a 	mov	r5,r8
  807dd4:	40800115 	stw	r2,4(r8)
  807dd8:	20c01117 	ldw	r3,68(r4)
  807ddc:	00800044 	movi	r2,1
  807de0:	10c4983a 	sll	r2,r2,r3
  807de4:	40800215 	stw	r2,8(r8)
  807de8:	08098e80 	call	8098e8 <_Bfree>
  807dec:	d8c01617 	ldw	r3,88(sp)
  807df0:	18001015 	stw	zero,64(r3)
  807df4:	8800a316 	blt	r17,zero,808084 <_dtoa_r+0x304>
  807df8:	90000015 	stw	zero,0(r18)
  807dfc:	a8dffc2c 	andhi	r3,r21,32752
  807e00:	009ffc34 	movhi	r2,32752
  807e04:	18809126 	beq	r3,r2,80804c <_dtoa_r+0x2cc>
  807e08:	000d883a 	mov	r6,zero
  807e0c:	000f883a 	mov	r7,zero
  807e10:	a009883a 	mov	r4,r20
  807e14:	a80b883a 	mov	r5,r21
  807e18:	dd001215 	stw	r20,72(sp)
  807e1c:	dd401315 	stw	r21,76(sp)
  807e20:	080f5200 	call	80f520 <__nedf2>
  807e24:	1000171e 	bne	r2,zero,807e84 <_dtoa_r+0x104>
  807e28:	d9802717 	ldw	r6,156(sp)
  807e2c:	00800044 	movi	r2,1
  807e30:	30800015 	stw	r2,0(r6)
  807e34:	d8802917 	ldw	r2,164(sp)
  807e38:	10029b26 	beq	r2,zero,8088a8 <_dtoa_r+0xb28>
  807e3c:	d9002917 	ldw	r4,164(sp)
  807e40:	00802074 	movhi	r2,129
  807e44:	10937944 	addi	r2,r2,19941
  807e48:	10ffffc4 	addi	r3,r2,-1
  807e4c:	20800015 	stw	r2,0(r4)
  807e50:	1805883a 	mov	r2,r3
  807e54:	dfc02517 	ldw	ra,148(sp)
  807e58:	df002417 	ldw	fp,144(sp)
  807e5c:	ddc02317 	ldw	r23,140(sp)
  807e60:	dd802217 	ldw	r22,136(sp)
  807e64:	dd402117 	ldw	r21,132(sp)
  807e68:	dd002017 	ldw	r20,128(sp)
  807e6c:	dcc01f17 	ldw	r19,124(sp)
  807e70:	dc801e17 	ldw	r18,120(sp)
  807e74:	dc401d17 	ldw	r17,116(sp)
  807e78:	dc001c17 	ldw	r16,112(sp)
  807e7c:	dec02604 	addi	sp,sp,152
  807e80:	f800283a 	ret
  807e84:	d9001617 	ldw	r4,88(sp)
  807e88:	d9401217 	ldw	r5,72(sp)
  807e8c:	d8800104 	addi	r2,sp,4
  807e90:	a80d883a 	mov	r6,r21
  807e94:	d9c00204 	addi	r7,sp,8
  807e98:	d8800015 	stw	r2,0(sp)
  807e9c:	0809f240 	call	809f24 <__d2b>
  807ea0:	d8800715 	stw	r2,28(sp)
  807ea4:	a804d53a 	srli	r2,r21,20
  807ea8:	1101ffcc 	andi	r4,r2,2047
  807eac:	20008626 	beq	r4,zero,8080c8 <_dtoa_r+0x348>
  807eb0:	d8c01217 	ldw	r3,72(sp)
  807eb4:	00800434 	movhi	r2,16
  807eb8:	10bfffc4 	addi	r2,r2,-1
  807ebc:	ddc00117 	ldw	r23,4(sp)
  807ec0:	a884703a 	and	r2,r21,r2
  807ec4:	1811883a 	mov	r8,r3
  807ec8:	124ffc34 	orhi	r9,r2,16368
  807ecc:	25bf0044 	addi	r22,r4,-1023
  807ed0:	d8000815 	stw	zero,32(sp)
  807ed4:	0005883a 	mov	r2,zero
  807ed8:	00cffe34 	movhi	r3,16376
  807edc:	480b883a 	mov	r5,r9
  807ee0:	4009883a 	mov	r4,r8
  807ee4:	180f883a 	mov	r7,r3
  807ee8:	100d883a 	mov	r6,r2
  807eec:	080ed880 	call	80ed88 <__subdf3>
  807ef0:	0218dbf4 	movhi	r8,25455
  807ef4:	4210d844 	addi	r8,r8,17249
  807ef8:	024ff4f4 	movhi	r9,16339
  807efc:	4a61e9c4 	addi	r9,r9,-30809
  807f00:	480f883a 	mov	r7,r9
  807f04:	400d883a 	mov	r6,r8
  807f08:	180b883a 	mov	r5,r3
  807f0c:	1009883a 	mov	r4,r2
  807f10:	080ee7c0 	call	80ee7c <__muldf3>
  807f14:	0222d874 	movhi	r8,35681
  807f18:	42322cc4 	addi	r8,r8,-14157
  807f1c:	024ff1f4 	movhi	r9,16327
  807f20:	4a628a04 	addi	r9,r9,-30168
  807f24:	480f883a 	mov	r7,r9
  807f28:	400d883a 	mov	r6,r8
  807f2c:	180b883a 	mov	r5,r3
  807f30:	1009883a 	mov	r4,r2
  807f34:	080ee080 	call	80ee08 <__adddf3>
  807f38:	b009883a 	mov	r4,r22
  807f3c:	1021883a 	mov	r16,r2
  807f40:	1823883a 	mov	r17,r3
  807f44:	080f7c80 	call	80f7c8 <__floatsidf>
  807f48:	021427f4 	movhi	r8,20639
  807f4c:	421e7ec4 	addi	r8,r8,31227
  807f50:	024ff4f4 	movhi	r9,16339
  807f54:	4a5104c4 	addi	r9,r9,17427
  807f58:	480f883a 	mov	r7,r9
  807f5c:	400d883a 	mov	r6,r8
  807f60:	180b883a 	mov	r5,r3
  807f64:	1009883a 	mov	r4,r2
  807f68:	080ee7c0 	call	80ee7c <__muldf3>
  807f6c:	180f883a 	mov	r7,r3
  807f70:	880b883a 	mov	r5,r17
  807f74:	100d883a 	mov	r6,r2
  807f78:	8009883a 	mov	r4,r16
  807f7c:	080ee080 	call	80ee08 <__adddf3>
  807f80:	1009883a 	mov	r4,r2
  807f84:	180b883a 	mov	r5,r3
  807f88:	1021883a 	mov	r16,r2
  807f8c:	1823883a 	mov	r17,r3
  807f90:	080f8c00 	call	80f8c0 <__fixdfsi>
  807f94:	000d883a 	mov	r6,zero
  807f98:	000f883a 	mov	r7,zero
  807f9c:	8009883a 	mov	r4,r16
  807fa0:	880b883a 	mov	r5,r17
  807fa4:	d8800d15 	stw	r2,52(sp)
  807fa8:	080f6b80 	call	80f6b8 <__ltdf2>
  807fac:	10031716 	blt	r2,zero,808c0c <_dtoa_r+0xe8c>
  807fb0:	d8c00d17 	ldw	r3,52(sp)
  807fb4:	00800584 	movi	r2,22
  807fb8:	10c1482e 	bgeu	r2,r3,8084dc <_dtoa_r+0x75c>
  807fbc:	01000044 	movi	r4,1
  807fc0:	d9000c15 	stw	r4,48(sp)
  807fc4:	bd85c83a 	sub	r2,r23,r22
  807fc8:	11bfffc4 	addi	r6,r2,-1
  807fcc:	30030b16 	blt	r6,zero,808bfc <_dtoa_r+0xe7c>
  807fd0:	d9800a15 	stw	r6,40(sp)
  807fd4:	d8001115 	stw	zero,68(sp)
  807fd8:	d8c00d17 	ldw	r3,52(sp)
  807fdc:	1802ff16 	blt	r3,zero,808bdc <_dtoa_r+0xe5c>
  807fe0:	d9000a17 	ldw	r4,40(sp)
  807fe4:	d8c00915 	stw	r3,36(sp)
  807fe8:	d8001015 	stw	zero,64(sp)
  807fec:	20c9883a 	add	r4,r4,r3
  807ff0:	d9000a15 	stw	r4,40(sp)
  807ff4:	d9001717 	ldw	r4,92(sp)
  807ff8:	00800244 	movi	r2,9
  807ffc:	11004636 	bltu	r2,r4,808118 <_dtoa_r+0x398>
  808000:	00800144 	movi	r2,5
  808004:	11020416 	blt	r2,r4,808818 <_dtoa_r+0xa98>
  808008:	04400044 	movi	r17,1
  80800c:	d8c01717 	ldw	r3,92(sp)
  808010:	00800144 	movi	r2,5
  808014:	10c1ed36 	bltu	r2,r3,8087cc <_dtoa_r+0xa4c>
  808018:	18c5883a 	add	r2,r3,r3
  80801c:	1085883a 	add	r2,r2,r2
  808020:	00c02074 	movhi	r3,129
  808024:	18e00d04 	addi	r3,r3,-32716
  808028:	10c5883a 	add	r2,r2,r3
  80802c:	11000017 	ldw	r4,0(r2)
  808030:	2000683a 	jmp	r4
  808034:	00808120 	cmpeqi	r2,zero,516
  808038:	00808120 	cmpeqi	r2,zero,516
  80803c:	00808b20 	cmpeqi	r2,zero,556
  808040:	00808af8 	rdprs	r2,zero,555
  808044:	00808b3c 	xorhi	r2,zero,556
  808048:	00808b48 	cmpgei	r2,zero,557
  80804c:	d9002717 	ldw	r4,156(sp)
  808050:	0089c3c4 	movi	r2,9999
  808054:	20800015 	stw	r2,0(r4)
  808058:	a0001026 	beq	r20,zero,80809c <_dtoa_r+0x31c>
  80805c:	00c02074 	movhi	r3,129
  808060:	18d43104 	addi	r3,r3,20676
  808064:	d9802917 	ldw	r6,164(sp)
  808068:	303f7926 	beq	r6,zero,807e50 <_dtoa_r+0xd0>
  80806c:	188000c7 	ldb	r2,3(r3)
  808070:	190000c4 	addi	r4,r3,3
  808074:	1000101e 	bne	r2,zero,8080b8 <_dtoa_r+0x338>
  808078:	d8802917 	ldw	r2,164(sp)
  80807c:	11000015 	stw	r4,0(r2)
  808080:	003f7306 	br	807e50 <_dtoa_r+0xd0>
  808084:	00a00034 	movhi	r2,32768
  808088:	10bfffc4 	addi	r2,r2,-1
  80808c:	00c00044 	movi	r3,1
  808090:	88aa703a 	and	r21,r17,r2
  808094:	90c00015 	stw	r3,0(r18)
  808098:	003f5806 	br	807dfc <_dtoa_r+0x7c>
  80809c:	00800434 	movhi	r2,16
  8080a0:	10bfffc4 	addi	r2,r2,-1
  8080a4:	a884703a 	and	r2,r21,r2
  8080a8:	103fec1e 	bne	r2,zero,80805c <_dtoa_r+0x2dc>
  8080ac:	00c02074 	movhi	r3,129
  8080b0:	18d42e04 	addi	r3,r3,20664
  8080b4:	003feb06 	br	808064 <_dtoa_r+0x2e4>
  8080b8:	d8802917 	ldw	r2,164(sp)
  8080bc:	19000204 	addi	r4,r3,8
  8080c0:	11000015 	stw	r4,0(r2)
  8080c4:	003f6206 	br	807e50 <_dtoa_r+0xd0>
  8080c8:	ddc00117 	ldw	r23,4(sp)
  8080cc:	d8800217 	ldw	r2,8(sp)
  8080d0:	01000804 	movi	r4,32
  8080d4:	b8c10c84 	addi	r3,r23,1074
  8080d8:	18a3883a 	add	r17,r3,r2
  8080dc:	2441b80e 	bge	r4,r17,8087c0 <_dtoa_r+0xa40>
  8080e0:	00c01004 	movi	r3,64
  8080e4:	1c47c83a 	sub	r3,r3,r17
  8080e8:	88bff804 	addi	r2,r17,-32
  8080ec:	a8c6983a 	sll	r3,r21,r3
  8080f0:	a084d83a 	srl	r2,r20,r2
  8080f4:	1888b03a 	or	r4,r3,r2
  8080f8:	080fa0c0 	call	80fa0c <__floatunsidf>
  8080fc:	1011883a 	mov	r8,r2
  808100:	00bf8434 	movhi	r2,65040
  808104:	01000044 	movi	r4,1
  808108:	10d3883a 	add	r9,r2,r3
  80810c:	8dbef344 	addi	r22,r17,-1075
  808110:	d9000815 	stw	r4,32(sp)
  808114:	003f6f06 	br	807ed4 <_dtoa_r+0x154>
  808118:	d8001715 	stw	zero,92(sp)
  80811c:	04400044 	movi	r17,1
  808120:	00bfffc4 	movi	r2,-1
  808124:	00c00044 	movi	r3,1
  808128:	d8800e15 	stw	r2,56(sp)
  80812c:	d8002615 	stw	zero,152(sp)
  808130:	d8800f15 	stw	r2,60(sp)
  808134:	d8c00b15 	stw	r3,44(sp)
  808138:	1021883a 	mov	r16,r2
  80813c:	d8801617 	ldw	r2,88(sp)
  808140:	10001115 	stw	zero,68(r2)
  808144:	d8801617 	ldw	r2,88(sp)
  808148:	11401117 	ldw	r5,68(r2)
  80814c:	1009883a 	mov	r4,r2
  808150:	0809e680 	call	809e68 <_Balloc>
  808154:	d8c01617 	ldw	r3,88(sp)
  808158:	d8800515 	stw	r2,20(sp)
  80815c:	18801015 	stw	r2,64(r3)
  808160:	00800384 	movi	r2,14
  808164:	14006836 	bltu	r2,r16,808308 <_dtoa_r+0x588>
  808168:	8805003a 	cmpeq	r2,r17,zero
  80816c:	1000661e 	bne	r2,zero,808308 <_dtoa_r+0x588>
  808170:	d9000d17 	ldw	r4,52(sp)
  808174:	0102300e 	bge	zero,r4,808a38 <_dtoa_r+0xcb8>
  808178:	208003cc 	andi	r2,r4,15
  80817c:	100490fa 	slli	r2,r2,3
  808180:	2025d13a 	srai	r18,r4,4
  808184:	00c02074 	movhi	r3,129
  808188:	18d44204 	addi	r3,r3,20744
  80818c:	10c5883a 	add	r2,r2,r3
  808190:	90c0040c 	andi	r3,r18,16
  808194:	14000017 	ldw	r16,0(r2)
  808198:	14400117 	ldw	r17,4(r2)
  80819c:	18036a1e 	bne	r3,zero,808f48 <_dtoa_r+0x11c8>
  8081a0:	05800084 	movi	r22,2
  8081a4:	90001026 	beq	r18,zero,8081e8 <_dtoa_r+0x468>
  8081a8:	04c02074 	movhi	r19,129
  8081ac:	9cd47404 	addi	r19,r19,20944
  8081b0:	9080004c 	andi	r2,r18,1
  8081b4:	1005003a 	cmpeq	r2,r2,zero
  8081b8:	1000081e 	bne	r2,zero,8081dc <_dtoa_r+0x45c>
  8081bc:	99800017 	ldw	r6,0(r19)
  8081c0:	99c00117 	ldw	r7,4(r19)
  8081c4:	880b883a 	mov	r5,r17
  8081c8:	8009883a 	mov	r4,r16
  8081cc:	080ee7c0 	call	80ee7c <__muldf3>
  8081d0:	1021883a 	mov	r16,r2
  8081d4:	b5800044 	addi	r22,r22,1
  8081d8:	1823883a 	mov	r17,r3
  8081dc:	9025d07a 	srai	r18,r18,1
  8081e0:	9cc00204 	addi	r19,r19,8
  8081e4:	903ff21e 	bne	r18,zero,8081b0 <_dtoa_r+0x430>
  8081e8:	a80b883a 	mov	r5,r21
  8081ec:	a009883a 	mov	r4,r20
  8081f0:	880f883a 	mov	r7,r17
  8081f4:	800d883a 	mov	r6,r16
  8081f8:	080f2400 	call	80f240 <__divdf3>
  8081fc:	1029883a 	mov	r20,r2
  808200:	182b883a 	mov	r21,r3
  808204:	d8c00c17 	ldw	r3,48(sp)
  808208:	1805003a 	cmpeq	r2,r3,zero
  80820c:	1000081e 	bne	r2,zero,808230 <_dtoa_r+0x4b0>
  808210:	0005883a 	mov	r2,zero
  808214:	00cffc34 	movhi	r3,16368
  808218:	180f883a 	mov	r7,r3
  80821c:	a009883a 	mov	r4,r20
  808220:	a80b883a 	mov	r5,r21
  808224:	100d883a 	mov	r6,r2
  808228:	080f6b80 	call	80f6b8 <__ltdf2>
  80822c:	1003fe16 	blt	r2,zero,809228 <_dtoa_r+0x14a8>
  808230:	b009883a 	mov	r4,r22
  808234:	080f7c80 	call	80f7c8 <__floatsidf>
  808238:	180b883a 	mov	r5,r3
  80823c:	1009883a 	mov	r4,r2
  808240:	a00d883a 	mov	r6,r20
  808244:	a80f883a 	mov	r7,r21
  808248:	080ee7c0 	call	80ee7c <__muldf3>
  80824c:	0011883a 	mov	r8,zero
  808250:	02500734 	movhi	r9,16412
  808254:	1009883a 	mov	r4,r2
  808258:	180b883a 	mov	r5,r3
  80825c:	480f883a 	mov	r7,r9
  808260:	400d883a 	mov	r6,r8
  808264:	080ee080 	call	80ee08 <__adddf3>
  808268:	d9000f17 	ldw	r4,60(sp)
  80826c:	102d883a 	mov	r22,r2
  808270:	00bf3034 	movhi	r2,64704
  808274:	18b9883a 	add	fp,r3,r2
  808278:	e02f883a 	mov	r23,fp
  80827c:	20028f1e 	bne	r4,zero,808cbc <_dtoa_r+0xf3c>
  808280:	0005883a 	mov	r2,zero
  808284:	00d00534 	movhi	r3,16404
  808288:	a009883a 	mov	r4,r20
  80828c:	a80b883a 	mov	r5,r21
  808290:	180f883a 	mov	r7,r3
  808294:	100d883a 	mov	r6,r2
  808298:	080ed880 	call	80ed88 <__subdf3>
  80829c:	1009883a 	mov	r4,r2
  8082a0:	e00f883a 	mov	r7,fp
  8082a4:	180b883a 	mov	r5,r3
  8082a8:	b00d883a 	mov	r6,r22
  8082ac:	1025883a 	mov	r18,r2
  8082b0:	1827883a 	mov	r19,r3
  8082b4:	080f5a80 	call	80f5a8 <__gtdf2>
  8082b8:	00834f16 	blt	zero,r2,808ff8 <_dtoa_r+0x1278>
  8082bc:	e0e0003c 	xorhi	r3,fp,32768
  8082c0:	9009883a 	mov	r4,r18
  8082c4:	980b883a 	mov	r5,r19
  8082c8:	180f883a 	mov	r7,r3
  8082cc:	b00d883a 	mov	r6,r22
  8082d0:	080f6b80 	call	80f6b8 <__ltdf2>
  8082d4:	1000080e 	bge	r2,zero,8082f8 <_dtoa_r+0x578>
  8082d8:	0027883a 	mov	r19,zero
  8082dc:	0025883a 	mov	r18,zero
  8082e0:	d8802617 	ldw	r2,152(sp)
  8082e4:	df000517 	ldw	fp,20(sp)
  8082e8:	d8000615 	stw	zero,24(sp)
  8082ec:	0084303a 	nor	r2,zero,r2
  8082f0:	d8800d15 	stw	r2,52(sp)
  8082f4:	00019b06 	br	808964 <_dtoa_r+0xbe4>
  8082f8:	d9801217 	ldw	r6,72(sp)
  8082fc:	d8801317 	ldw	r2,76(sp)
  808300:	3029883a 	mov	r20,r6
  808304:	102b883a 	mov	r21,r2
  808308:	d8c00217 	ldw	r3,8(sp)
  80830c:	18008516 	blt	r3,zero,808524 <_dtoa_r+0x7a4>
  808310:	d9000d17 	ldw	r4,52(sp)
  808314:	00800384 	movi	r2,14
  808318:	11008216 	blt	r2,r4,808524 <_dtoa_r+0x7a4>
  80831c:	200490fa 	slli	r2,r4,3
  808320:	d9802617 	ldw	r6,152(sp)
  808324:	00c02074 	movhi	r3,129
  808328:	18d44204 	addi	r3,r3,20744
  80832c:	10c5883a 	add	r2,r2,r3
  808330:	14800017 	ldw	r18,0(r2)
  808334:	14c00117 	ldw	r19,4(r2)
  808338:	30031e16 	blt	r6,zero,808fb4 <_dtoa_r+0x1234>
  80833c:	d9000517 	ldw	r4,20(sp)
  808340:	d8c00f17 	ldw	r3,60(sp)
  808344:	a823883a 	mov	r17,r21
  808348:	a021883a 	mov	r16,r20
  80834c:	192b883a 	add	r21,r3,r4
  808350:	2039883a 	mov	fp,r4
  808354:	00000f06 	br	808394 <_dtoa_r+0x614>
  808358:	0005883a 	mov	r2,zero
  80835c:	00d00934 	movhi	r3,16420
  808360:	5009883a 	mov	r4,r10
  808364:	580b883a 	mov	r5,r11
  808368:	180f883a 	mov	r7,r3
  80836c:	100d883a 	mov	r6,r2
  808370:	080ee7c0 	call	80ee7c <__muldf3>
  808374:	180b883a 	mov	r5,r3
  808378:	000d883a 	mov	r6,zero
  80837c:	000f883a 	mov	r7,zero
  808380:	1009883a 	mov	r4,r2
  808384:	1021883a 	mov	r16,r2
  808388:	1823883a 	mov	r17,r3
  80838c:	080f5200 	call	80f520 <__nedf2>
  808390:	10004526 	beq	r2,zero,8084a8 <_dtoa_r+0x728>
  808394:	900d883a 	mov	r6,r18
  808398:	980f883a 	mov	r7,r19
  80839c:	8009883a 	mov	r4,r16
  8083a0:	880b883a 	mov	r5,r17
  8083a4:	080f2400 	call	80f240 <__divdf3>
  8083a8:	180b883a 	mov	r5,r3
  8083ac:	1009883a 	mov	r4,r2
  8083b0:	080f8c00 	call	80f8c0 <__fixdfsi>
  8083b4:	1009883a 	mov	r4,r2
  8083b8:	1029883a 	mov	r20,r2
  8083bc:	080f7c80 	call	80f7c8 <__floatsidf>
  8083c0:	180f883a 	mov	r7,r3
  8083c4:	9009883a 	mov	r4,r18
  8083c8:	980b883a 	mov	r5,r19
  8083cc:	100d883a 	mov	r6,r2
  8083d0:	080ee7c0 	call	80ee7c <__muldf3>
  8083d4:	180f883a 	mov	r7,r3
  8083d8:	880b883a 	mov	r5,r17
  8083dc:	8009883a 	mov	r4,r16
  8083e0:	100d883a 	mov	r6,r2
  8083e4:	080ed880 	call	80ed88 <__subdf3>
  8083e8:	1015883a 	mov	r10,r2
  8083ec:	a0800c04 	addi	r2,r20,48
  8083f0:	e0800005 	stb	r2,0(fp)
  8083f4:	e7000044 	addi	fp,fp,1
  8083f8:	1817883a 	mov	r11,r3
  8083fc:	e57fd61e 	bne	fp,r21,808358 <_dtoa_r+0x5d8>
  808400:	500d883a 	mov	r6,r10
  808404:	180f883a 	mov	r7,r3
  808408:	5009883a 	mov	r4,r10
  80840c:	180b883a 	mov	r5,r3
  808410:	080ee080 	call	80ee08 <__adddf3>
  808414:	100d883a 	mov	r6,r2
  808418:	9009883a 	mov	r4,r18
  80841c:	980b883a 	mov	r5,r19
  808420:	180f883a 	mov	r7,r3
  808424:	1021883a 	mov	r16,r2
  808428:	1823883a 	mov	r17,r3
  80842c:	080f6b80 	call	80f6b8 <__ltdf2>
  808430:	10000816 	blt	r2,zero,808454 <_dtoa_r+0x6d4>
  808434:	980b883a 	mov	r5,r19
  808438:	800d883a 	mov	r6,r16
  80843c:	880f883a 	mov	r7,r17
  808440:	9009883a 	mov	r4,r18
  808444:	080f4980 	call	80f498 <__eqdf2>
  808448:	1000171e 	bne	r2,zero,8084a8 <_dtoa_r+0x728>
  80844c:	a080004c 	andi	r2,r20,1
  808450:	10001526 	beq	r2,zero,8084a8 <_dtoa_r+0x728>
  808454:	d8800d17 	ldw	r2,52(sp)
  808458:	d8800415 	stw	r2,16(sp)
  80845c:	e009883a 	mov	r4,fp
  808460:	213fffc4 	addi	r4,r4,-1
  808464:	20c00007 	ldb	r3,0(r4)
  808468:	00800e44 	movi	r2,57
  80846c:	1880081e 	bne	r3,r2,808490 <_dtoa_r+0x710>
  808470:	d8800517 	ldw	r2,20(sp)
  808474:	113ffa1e 	bne	r2,r4,808460 <_dtoa_r+0x6e0>
  808478:	d8c00417 	ldw	r3,16(sp)
  80847c:	d9800517 	ldw	r6,20(sp)
  808480:	00800c04 	movi	r2,48
  808484:	18c00044 	addi	r3,r3,1
  808488:	d8c00415 	stw	r3,16(sp)
  80848c:	30800005 	stb	r2,0(r6)
  808490:	20800003 	ldbu	r2,0(r4)
  808494:	d8c00417 	ldw	r3,16(sp)
  808498:	27000044 	addi	fp,r4,1
  80849c:	10800044 	addi	r2,r2,1
  8084a0:	d8c00d15 	stw	r3,52(sp)
  8084a4:	20800005 	stb	r2,0(r4)
  8084a8:	d9001617 	ldw	r4,88(sp)
  8084ac:	d9400717 	ldw	r5,28(sp)
  8084b0:	08098e80 	call	8098e8 <_Bfree>
  8084b4:	e0000005 	stb	zero,0(fp)
  8084b8:	d9800d17 	ldw	r6,52(sp)
  8084bc:	d8c02717 	ldw	r3,156(sp)
  8084c0:	d9002917 	ldw	r4,164(sp)
  8084c4:	30800044 	addi	r2,r6,1
  8084c8:	18800015 	stw	r2,0(r3)
  8084cc:	20029c26 	beq	r4,zero,808f40 <_dtoa_r+0x11c0>
  8084d0:	d8c00517 	ldw	r3,20(sp)
  8084d4:	27000015 	stw	fp,0(r4)
  8084d8:	003e5d06 	br	807e50 <_dtoa_r+0xd0>
  8084dc:	d9800d17 	ldw	r6,52(sp)
  8084e0:	00c02074 	movhi	r3,129
  8084e4:	18d44204 	addi	r3,r3,20744
  8084e8:	d9001217 	ldw	r4,72(sp)
  8084ec:	300490fa 	slli	r2,r6,3
  8084f0:	d9401317 	ldw	r5,76(sp)
  8084f4:	10c5883a 	add	r2,r2,r3
  8084f8:	12000017 	ldw	r8,0(r2)
  8084fc:	12400117 	ldw	r9,4(r2)
  808500:	400d883a 	mov	r6,r8
  808504:	480f883a 	mov	r7,r9
  808508:	080f6b80 	call	80f6b8 <__ltdf2>
  80850c:	1000030e 	bge	r2,zero,80851c <_dtoa_r+0x79c>
  808510:	d8800d17 	ldw	r2,52(sp)
  808514:	10bfffc4 	addi	r2,r2,-1
  808518:	d8800d15 	stw	r2,52(sp)
  80851c:	d8000c15 	stw	zero,48(sp)
  808520:	003ea806 	br	807fc4 <_dtoa_r+0x244>
  808524:	d9000b17 	ldw	r4,44(sp)
  808528:	202cc03a 	cmpne	r22,r4,zero
  80852c:	b000c71e 	bne	r22,zero,80884c <_dtoa_r+0xacc>
  808530:	dc001117 	ldw	r16,68(sp)
  808534:	dc801017 	ldw	r18,64(sp)
  808538:	0027883a 	mov	r19,zero
  80853c:	04000b0e 	bge	zero,r16,80856c <_dtoa_r+0x7ec>
  808540:	d8c00a17 	ldw	r3,40(sp)
  808544:	00c0090e 	bge	zero,r3,80856c <_dtoa_r+0x7ec>
  808548:	8005883a 	mov	r2,r16
  80854c:	1c011316 	blt	r3,r16,80899c <_dtoa_r+0xc1c>
  808550:	d9000a17 	ldw	r4,40(sp)
  808554:	d9801117 	ldw	r6,68(sp)
  808558:	80a1c83a 	sub	r16,r16,r2
  80855c:	2089c83a 	sub	r4,r4,r2
  808560:	308dc83a 	sub	r6,r6,r2
  808564:	d9000a15 	stw	r4,40(sp)
  808568:	d9801115 	stw	r6,68(sp)
  80856c:	d8801017 	ldw	r2,64(sp)
  808570:	0080150e 	bge	zero,r2,8085c8 <_dtoa_r+0x848>
  808574:	d8c00b17 	ldw	r3,44(sp)
  808578:	1805003a 	cmpeq	r2,r3,zero
  80857c:	1001c91e 	bne	r2,zero,808ca4 <_dtoa_r+0xf24>
  808580:	04800e0e 	bge	zero,r18,8085bc <_dtoa_r+0x83c>
  808584:	d9001617 	ldw	r4,88(sp)
  808588:	980b883a 	mov	r5,r19
  80858c:	900d883a 	mov	r6,r18
  808590:	080a69c0 	call	80a69c <__pow5mult>
  808594:	d9001617 	ldw	r4,88(sp)
  808598:	d9800717 	ldw	r6,28(sp)
  80859c:	100b883a 	mov	r5,r2
  8085a0:	1027883a 	mov	r19,r2
  8085a4:	080a3780 	call	80a378 <__multiply>
  8085a8:	d9001617 	ldw	r4,88(sp)
  8085ac:	d9400717 	ldw	r5,28(sp)
  8085b0:	1023883a 	mov	r17,r2
  8085b4:	08098e80 	call	8098e8 <_Bfree>
  8085b8:	dc400715 	stw	r17,28(sp)
  8085bc:	d9001017 	ldw	r4,64(sp)
  8085c0:	248dc83a 	sub	r6,r4,r18
  8085c4:	30010e1e 	bne	r6,zero,808a00 <_dtoa_r+0xc80>
  8085c8:	d9001617 	ldw	r4,88(sp)
  8085cc:	04400044 	movi	r17,1
  8085d0:	880b883a 	mov	r5,r17
  8085d4:	080a5600 	call	80a560 <__i2b>
  8085d8:	d9800917 	ldw	r6,36(sp)
  8085dc:	1025883a 	mov	r18,r2
  8085e0:	0180040e 	bge	zero,r6,8085f4 <_dtoa_r+0x874>
  8085e4:	d9001617 	ldw	r4,88(sp)
  8085e8:	100b883a 	mov	r5,r2
  8085ec:	080a69c0 	call	80a69c <__pow5mult>
  8085f0:	1025883a 	mov	r18,r2
  8085f4:	d8801717 	ldw	r2,92(sp)
  8085f8:	8880f30e 	bge	r17,r2,8089c8 <_dtoa_r+0xc48>
  8085fc:	0023883a 	mov	r17,zero
  808600:	d9800917 	ldw	r6,36(sp)
  808604:	30019e1e 	bne	r6,zero,808c80 <_dtoa_r+0xf00>
  808608:	00c00044 	movi	r3,1
  80860c:	d9000a17 	ldw	r4,40(sp)
  808610:	20c5883a 	add	r2,r4,r3
  808614:	10c007cc 	andi	r3,r2,31
  808618:	1800841e 	bne	r3,zero,80882c <_dtoa_r+0xaac>
  80861c:	00800704 	movi	r2,28
  808620:	d9000a17 	ldw	r4,40(sp)
  808624:	d9801117 	ldw	r6,68(sp)
  808628:	80a1883a 	add	r16,r16,r2
  80862c:	2089883a 	add	r4,r4,r2
  808630:	308d883a 	add	r6,r6,r2
  808634:	d9000a15 	stw	r4,40(sp)
  808638:	d9801115 	stw	r6,68(sp)
  80863c:	d8801117 	ldw	r2,68(sp)
  808640:	0080050e 	bge	zero,r2,808658 <_dtoa_r+0x8d8>
  808644:	d9400717 	ldw	r5,28(sp)
  808648:	d9001617 	ldw	r4,88(sp)
  80864c:	100d883a 	mov	r6,r2
  808650:	080a22c0 	call	80a22c <__lshift>
  808654:	d8800715 	stw	r2,28(sp)
  808658:	d8c00a17 	ldw	r3,40(sp)
  80865c:	00c0050e 	bge	zero,r3,808674 <_dtoa_r+0x8f4>
  808660:	d9001617 	ldw	r4,88(sp)
  808664:	900b883a 	mov	r5,r18
  808668:	180d883a 	mov	r6,r3
  80866c:	080a22c0 	call	80a22c <__lshift>
  808670:	1025883a 	mov	r18,r2
  808674:	d9000c17 	ldw	r4,48(sp)
  808678:	2005003a 	cmpeq	r2,r4,zero
  80867c:	10016f26 	beq	r2,zero,808c3c <_dtoa_r+0xebc>
  808680:	d9000f17 	ldw	r4,60(sp)
  808684:	0102170e 	bge	zero,r4,808ee4 <_dtoa_r+0x1164>
  808688:	d9800b17 	ldw	r6,44(sp)
  80868c:	3005003a 	cmpeq	r2,r6,zero
  808690:	1000881e 	bne	r2,zero,8088b4 <_dtoa_r+0xb34>
  808694:	0400050e 	bge	zero,r16,8086ac <_dtoa_r+0x92c>
  808698:	d9001617 	ldw	r4,88(sp)
  80869c:	980b883a 	mov	r5,r19
  8086a0:	800d883a 	mov	r6,r16
  8086a4:	080a22c0 	call	80a22c <__lshift>
  8086a8:	1027883a 	mov	r19,r2
  8086ac:	8804c03a 	cmpne	r2,r17,zero
  8086b0:	1002541e 	bne	r2,zero,809004 <_dtoa_r+0x1284>
  8086b4:	980b883a 	mov	r5,r19
  8086b8:	dd800517 	ldw	r22,20(sp)
  8086bc:	dcc00615 	stw	r19,24(sp)
  8086c0:	a700004c 	andi	fp,r20,1
  8086c4:	2827883a 	mov	r19,r5
  8086c8:	d9000717 	ldw	r4,28(sp)
  8086cc:	900b883a 	mov	r5,r18
  8086d0:	0807b680 	call	807b68 <quorem>
  8086d4:	d9000717 	ldw	r4,28(sp)
  8086d8:	d9400617 	ldw	r5,24(sp)
  8086dc:	1023883a 	mov	r17,r2
  8086e0:	8dc00c04 	addi	r23,r17,48
  8086e4:	0809a440 	call	809a44 <__mcmp>
  8086e8:	d9001617 	ldw	r4,88(sp)
  8086ec:	900b883a 	mov	r5,r18
  8086f0:	980d883a 	mov	r6,r19
  8086f4:	1029883a 	mov	r20,r2
  8086f8:	080a0a00 	call	80a0a0 <__mdiff>
  8086fc:	102b883a 	mov	r21,r2
  808700:	10800317 	ldw	r2,12(r2)
  808704:	1001281e 	bne	r2,zero,808ba8 <_dtoa_r+0xe28>
  808708:	d9000717 	ldw	r4,28(sp)
  80870c:	a80b883a 	mov	r5,r21
  808710:	0809a440 	call	809a44 <__mcmp>
  808714:	d9001617 	ldw	r4,88(sp)
  808718:	1021883a 	mov	r16,r2
  80871c:	a80b883a 	mov	r5,r21
  808720:	08098e80 	call	8098e8 <_Bfree>
  808724:	8000041e 	bne	r16,zero,808738 <_dtoa_r+0x9b8>
  808728:	d8801717 	ldw	r2,92(sp)
  80872c:	1000021e 	bne	r2,zero,808738 <_dtoa_r+0x9b8>
  808730:	e004c03a 	cmpne	r2,fp,zero
  808734:	10011726 	beq	r2,zero,808b94 <_dtoa_r+0xe14>
  808738:	a0010616 	blt	r20,zero,808b54 <_dtoa_r+0xdd4>
  80873c:	a000041e 	bne	r20,zero,808750 <_dtoa_r+0x9d0>
  808740:	d8c01717 	ldw	r3,92(sp)
  808744:	1800021e 	bne	r3,zero,808750 <_dtoa_r+0x9d0>
  808748:	e004c03a 	cmpne	r2,fp,zero
  80874c:	10010126 	beq	r2,zero,808b54 <_dtoa_r+0xdd4>
  808750:	04023d16 	blt	zero,r16,809048 <_dtoa_r+0x12c8>
  808754:	b5c00005 	stb	r23,0(r22)
  808758:	d9800517 	ldw	r6,20(sp)
  80875c:	d9000f17 	ldw	r4,60(sp)
  808760:	b5800044 	addi	r22,r22,1
  808764:	3105883a 	add	r2,r6,r4
  808768:	b0806526 	beq	r22,r2,808900 <_dtoa_r+0xb80>
  80876c:	d9400717 	ldw	r5,28(sp)
  808770:	d9001617 	ldw	r4,88(sp)
  808774:	01800284 	movi	r6,10
  808778:	000f883a 	mov	r7,zero
  80877c:	080a59c0 	call	80a59c <__multadd>
  808780:	d8800715 	stw	r2,28(sp)
  808784:	d8800617 	ldw	r2,24(sp)
  808788:	14c10c26 	beq	r2,r19,808bbc <_dtoa_r+0xe3c>
  80878c:	d9400617 	ldw	r5,24(sp)
  808790:	d9001617 	ldw	r4,88(sp)
  808794:	01800284 	movi	r6,10
  808798:	000f883a 	mov	r7,zero
  80879c:	080a59c0 	call	80a59c <__multadd>
  8087a0:	d9001617 	ldw	r4,88(sp)
  8087a4:	980b883a 	mov	r5,r19
  8087a8:	01800284 	movi	r6,10
  8087ac:	000f883a 	mov	r7,zero
  8087b0:	d8800615 	stw	r2,24(sp)
  8087b4:	080a59c0 	call	80a59c <__multadd>
  8087b8:	1027883a 	mov	r19,r2
  8087bc:	003fc206 	br	8086c8 <_dtoa_r+0x948>
  8087c0:	2445c83a 	sub	r2,r4,r17
  8087c4:	a088983a 	sll	r4,r20,r2
  8087c8:	003e4b06 	br	8080f8 <_dtoa_r+0x378>
  8087cc:	01bfffc4 	movi	r6,-1
  8087d0:	00800044 	movi	r2,1
  8087d4:	d9800e15 	stw	r6,56(sp)
  8087d8:	d9800f15 	stw	r6,60(sp)
  8087dc:	d8800b15 	stw	r2,44(sp)
  8087e0:	d8c01617 	ldw	r3,88(sp)
  8087e4:	008005c4 	movi	r2,23
  8087e8:	18001115 	stw	zero,68(r3)
  8087ec:	1580082e 	bgeu	r2,r22,808810 <_dtoa_r+0xa90>
  8087f0:	00c00104 	movi	r3,4
  8087f4:	0009883a 	mov	r4,zero
  8087f8:	18c7883a 	add	r3,r3,r3
  8087fc:	18800504 	addi	r2,r3,20
  808800:	21000044 	addi	r4,r4,1
  808804:	b0bffc2e 	bgeu	r22,r2,8087f8 <_dtoa_r+0xa78>
  808808:	d9801617 	ldw	r6,88(sp)
  80880c:	31001115 	stw	r4,68(r6)
  808810:	dc000f17 	ldw	r16,60(sp)
  808814:	003e4b06 	br	808144 <_dtoa_r+0x3c4>
  808818:	d9801717 	ldw	r6,92(sp)
  80881c:	0023883a 	mov	r17,zero
  808820:	31bfff04 	addi	r6,r6,-4
  808824:	d9801715 	stw	r6,92(sp)
  808828:	003df806 	br	80800c <_dtoa_r+0x28c>
  80882c:	00800804 	movi	r2,32
  808830:	10c9c83a 	sub	r4,r2,r3
  808834:	00c00104 	movi	r3,4
  808838:	19005a16 	blt	r3,r4,8089a4 <_dtoa_r+0xc24>
  80883c:	008000c4 	movi	r2,3
  808840:	113f7e16 	blt	r2,r4,80863c <_dtoa_r+0x8bc>
  808844:	20800704 	addi	r2,r4,28
  808848:	003f7506 	br	808620 <_dtoa_r+0x8a0>
  80884c:	d9801717 	ldw	r6,92(sp)
  808850:	00800044 	movi	r2,1
  808854:	1180a10e 	bge	r2,r6,808adc <_dtoa_r+0xd5c>
  808858:	d9800f17 	ldw	r6,60(sp)
  80885c:	d8c01017 	ldw	r3,64(sp)
  808860:	30bfffc4 	addi	r2,r6,-1
  808864:	1881c616 	blt	r3,r2,808f80 <_dtoa_r+0x1200>
  808868:	18a5c83a 	sub	r18,r3,r2
  80886c:	d8800f17 	ldw	r2,60(sp)
  808870:	10026216 	blt	r2,zero,8091fc <_dtoa_r+0x147c>
  808874:	dc001117 	ldw	r16,68(sp)
  808878:	1007883a 	mov	r3,r2
  80887c:	d9800a17 	ldw	r6,40(sp)
  808880:	d8801117 	ldw	r2,68(sp)
  808884:	d9001617 	ldw	r4,88(sp)
  808888:	30cd883a 	add	r6,r6,r3
  80888c:	10c5883a 	add	r2,r2,r3
  808890:	01400044 	movi	r5,1
  808894:	d9800a15 	stw	r6,40(sp)
  808898:	d8801115 	stw	r2,68(sp)
  80889c:	080a5600 	call	80a560 <__i2b>
  8088a0:	1027883a 	mov	r19,r2
  8088a4:	003f2506 	br	80853c <_dtoa_r+0x7bc>
  8088a8:	00c02074 	movhi	r3,129
  8088ac:	18d37904 	addi	r3,r3,19940
  8088b0:	003d6706 	br	807e50 <_dtoa_r+0xd0>
  8088b4:	dd800517 	ldw	r22,20(sp)
  8088b8:	04000044 	movi	r16,1
  8088bc:	00000706 	br	8088dc <_dtoa_r+0xb5c>
  8088c0:	d9400717 	ldw	r5,28(sp)
  8088c4:	d9001617 	ldw	r4,88(sp)
  8088c8:	01800284 	movi	r6,10
  8088cc:	000f883a 	mov	r7,zero
  8088d0:	080a59c0 	call	80a59c <__multadd>
  8088d4:	d8800715 	stw	r2,28(sp)
  8088d8:	84000044 	addi	r16,r16,1
  8088dc:	d9000717 	ldw	r4,28(sp)
  8088e0:	900b883a 	mov	r5,r18
  8088e4:	0807b680 	call	807b68 <quorem>
  8088e8:	15c00c04 	addi	r23,r2,48
  8088ec:	b5c00005 	stb	r23,0(r22)
  8088f0:	d8c00f17 	ldw	r3,60(sp)
  8088f4:	b5800044 	addi	r22,r22,1
  8088f8:	80fff116 	blt	r16,r3,8088c0 <_dtoa_r+0xb40>
  8088fc:	d8000615 	stw	zero,24(sp)
  808900:	d9400717 	ldw	r5,28(sp)
  808904:	d9001617 	ldw	r4,88(sp)
  808908:	01800044 	movi	r6,1
  80890c:	080a22c0 	call	80a22c <__lshift>
  808910:	1009883a 	mov	r4,r2
  808914:	900b883a 	mov	r5,r18
  808918:	d8800715 	stw	r2,28(sp)
  80891c:	0809a440 	call	809a44 <__mcmp>
  808920:	00803c0e 	bge	zero,r2,808a14 <_dtoa_r+0xc94>
  808924:	b009883a 	mov	r4,r22
  808928:	213fffc4 	addi	r4,r4,-1
  80892c:	21400003 	ldbu	r5,0(r4)
  808930:	00800e44 	movi	r2,57
  808934:	28c03fcc 	andi	r3,r5,255
  808938:	18c0201c 	xori	r3,r3,128
  80893c:	18ffe004 	addi	r3,r3,-128
  808940:	1881981e 	bne	r3,r2,808fa4 <_dtoa_r+0x1224>
  808944:	d9800517 	ldw	r6,20(sp)
  808948:	21bff71e 	bne	r4,r6,808928 <_dtoa_r+0xba8>
  80894c:	d8800d17 	ldw	r2,52(sp)
  808950:	37000044 	addi	fp,r6,1
  808954:	10800044 	addi	r2,r2,1
  808958:	d8800d15 	stw	r2,52(sp)
  80895c:	00800c44 	movi	r2,49
  808960:	30800005 	stb	r2,0(r6)
  808964:	d9001617 	ldw	r4,88(sp)
  808968:	900b883a 	mov	r5,r18
  80896c:	08098e80 	call	8098e8 <_Bfree>
  808970:	983ecd26 	beq	r19,zero,8084a8 <_dtoa_r+0x728>
  808974:	d8c00617 	ldw	r3,24(sp)
  808978:	18000426 	beq	r3,zero,80898c <_dtoa_r+0xc0c>
  80897c:	1cc00326 	beq	r3,r19,80898c <_dtoa_r+0xc0c>
  808980:	d9001617 	ldw	r4,88(sp)
  808984:	180b883a 	mov	r5,r3
  808988:	08098e80 	call	8098e8 <_Bfree>
  80898c:	d9001617 	ldw	r4,88(sp)
  808990:	980b883a 	mov	r5,r19
  808994:	08098e80 	call	8098e8 <_Bfree>
  808998:	003ec306 	br	8084a8 <_dtoa_r+0x728>
  80899c:	1805883a 	mov	r2,r3
  8089a0:	003eeb06 	br	808550 <_dtoa_r+0x7d0>
  8089a4:	d9800a17 	ldw	r6,40(sp)
  8089a8:	d8c01117 	ldw	r3,68(sp)
  8089ac:	20bfff04 	addi	r2,r4,-4
  8089b0:	308d883a 	add	r6,r6,r2
  8089b4:	1887883a 	add	r3,r3,r2
  8089b8:	80a1883a 	add	r16,r16,r2
  8089bc:	d9800a15 	stw	r6,40(sp)
  8089c0:	d8c01115 	stw	r3,68(sp)
  8089c4:	003f1d06 	br	80863c <_dtoa_r+0x8bc>
  8089c8:	a03f0c1e 	bne	r20,zero,8085fc <_dtoa_r+0x87c>
  8089cc:	00800434 	movhi	r2,16
  8089d0:	10bfffc4 	addi	r2,r2,-1
  8089d4:	a884703a 	and	r2,r21,r2
  8089d8:	103f081e 	bne	r2,zero,8085fc <_dtoa_r+0x87c>
  8089dc:	a89ffc2c 	andhi	r2,r21,32752
  8089e0:	103f0626 	beq	r2,zero,8085fc <_dtoa_r+0x87c>
  8089e4:	d8c01117 	ldw	r3,68(sp)
  8089e8:	d9000a17 	ldw	r4,40(sp)
  8089ec:	18c00044 	addi	r3,r3,1
  8089f0:	21000044 	addi	r4,r4,1
  8089f4:	d8c01115 	stw	r3,68(sp)
  8089f8:	d9000a15 	stw	r4,40(sp)
  8089fc:	003f0006 	br	808600 <_dtoa_r+0x880>
  808a00:	d9400717 	ldw	r5,28(sp)
  808a04:	d9001617 	ldw	r4,88(sp)
  808a08:	080a69c0 	call	80a69c <__pow5mult>
  808a0c:	d8800715 	stw	r2,28(sp)
  808a10:	003eed06 	br	8085c8 <_dtoa_r+0x848>
  808a14:	1000021e 	bne	r2,zero,808a20 <_dtoa_r+0xca0>
  808a18:	b880004c 	andi	r2,r23,1
  808a1c:	103fc11e 	bne	r2,zero,808924 <_dtoa_r+0xba4>
  808a20:	b5bfffc4 	addi	r22,r22,-1
  808a24:	b0c00007 	ldb	r3,0(r22)
  808a28:	00800c04 	movi	r2,48
  808a2c:	18bffc26 	beq	r3,r2,808a20 <_dtoa_r+0xca0>
  808a30:	b7000044 	addi	fp,r22,1
  808a34:	003fcb06 	br	808964 <_dtoa_r+0xbe4>
  808a38:	d9800d17 	ldw	r6,52(sp)
  808a3c:	018fc83a 	sub	r7,zero,r6
  808a40:	3801f726 	beq	r7,zero,809220 <_dtoa_r+0x14a0>
  808a44:	398003cc 	andi	r6,r7,15
  808a48:	300c90fa 	slli	r6,r6,3
  808a4c:	01402074 	movhi	r5,129
  808a50:	29544204 	addi	r5,r5,20744
  808a54:	d9001217 	ldw	r4,72(sp)
  808a58:	314d883a 	add	r6,r6,r5
  808a5c:	30c00117 	ldw	r3,4(r6)
  808a60:	30800017 	ldw	r2,0(r6)
  808a64:	d9401317 	ldw	r5,76(sp)
  808a68:	3821d13a 	srai	r16,r7,4
  808a6c:	100d883a 	mov	r6,r2
  808a70:	180f883a 	mov	r7,r3
  808a74:	080ee7c0 	call	80ee7c <__muldf3>
  808a78:	1011883a 	mov	r8,r2
  808a7c:	1813883a 	mov	r9,r3
  808a80:	1029883a 	mov	r20,r2
  808a84:	182b883a 	mov	r21,r3
  808a88:	8001e526 	beq	r16,zero,809220 <_dtoa_r+0x14a0>
  808a8c:	05800084 	movi	r22,2
  808a90:	04402074 	movhi	r17,129
  808a94:	8c547404 	addi	r17,r17,20944
  808a98:	8080004c 	andi	r2,r16,1
  808a9c:	1005003a 	cmpeq	r2,r2,zero
  808aa0:	1000081e 	bne	r2,zero,808ac4 <_dtoa_r+0xd44>
  808aa4:	89800017 	ldw	r6,0(r17)
  808aa8:	89c00117 	ldw	r7,4(r17)
  808aac:	480b883a 	mov	r5,r9
  808ab0:	4009883a 	mov	r4,r8
  808ab4:	080ee7c0 	call	80ee7c <__muldf3>
  808ab8:	1011883a 	mov	r8,r2
  808abc:	b5800044 	addi	r22,r22,1
  808ac0:	1813883a 	mov	r9,r3
  808ac4:	8021d07a 	srai	r16,r16,1
  808ac8:	8c400204 	addi	r17,r17,8
  808acc:	803ff21e 	bne	r16,zero,808a98 <_dtoa_r+0xd18>
  808ad0:	4029883a 	mov	r20,r8
  808ad4:	482b883a 	mov	r21,r9
  808ad8:	003dca06 	br	808204 <_dtoa_r+0x484>
  808adc:	d9000817 	ldw	r4,32(sp)
  808ae0:	2005003a 	cmpeq	r2,r4,zero
  808ae4:	1001f61e 	bne	r2,zero,8092c0 <_dtoa_r+0x1540>
  808ae8:	dc001117 	ldw	r16,68(sp)
  808aec:	dc801017 	ldw	r18,64(sp)
  808af0:	18c10cc4 	addi	r3,r3,1075
  808af4:	003f6106 	br	80887c <_dtoa_r+0xafc>
  808af8:	d8000b15 	stw	zero,44(sp)
  808afc:	d9802617 	ldw	r6,152(sp)
  808b00:	d8c00d17 	ldw	r3,52(sp)
  808b04:	30800044 	addi	r2,r6,1
  808b08:	18ad883a 	add	r22,r3,r2
  808b0c:	b13fffc4 	addi	r4,r22,-1
  808b10:	d9000e15 	stw	r4,56(sp)
  808b14:	0581f60e 	bge	zero,r22,8092f0 <_dtoa_r+0x1570>
  808b18:	dd800f15 	stw	r22,60(sp)
  808b1c:	003f3006 	br	8087e0 <_dtoa_r+0xa60>
  808b20:	d8000b15 	stw	zero,44(sp)
  808b24:	d9002617 	ldw	r4,152(sp)
  808b28:	0101eb0e 	bge	zero,r4,8092d8 <_dtoa_r+0x1558>
  808b2c:	202d883a 	mov	r22,r4
  808b30:	d9000e15 	stw	r4,56(sp)
  808b34:	d9000f15 	stw	r4,60(sp)
  808b38:	003f2906 	br	8087e0 <_dtoa_r+0xa60>
  808b3c:	01800044 	movi	r6,1
  808b40:	d9800b15 	stw	r6,44(sp)
  808b44:	003ff706 	br	808b24 <_dtoa_r+0xda4>
  808b48:	01000044 	movi	r4,1
  808b4c:	d9000b15 	stw	r4,44(sp)
  808b50:	003fea06 	br	808afc <_dtoa_r+0xd7c>
  808b54:	04000c0e 	bge	zero,r16,808b88 <_dtoa_r+0xe08>
  808b58:	d9400717 	ldw	r5,28(sp)
  808b5c:	d9001617 	ldw	r4,88(sp)
  808b60:	01800044 	movi	r6,1
  808b64:	080a22c0 	call	80a22c <__lshift>
  808b68:	1009883a 	mov	r4,r2
  808b6c:	900b883a 	mov	r5,r18
  808b70:	d8800715 	stw	r2,28(sp)
  808b74:	0809a440 	call	809a44 <__mcmp>
  808b78:	0081e00e 	bge	zero,r2,8092fc <_dtoa_r+0x157c>
  808b7c:	bdc00044 	addi	r23,r23,1
  808b80:	00800e84 	movi	r2,58
  808b84:	b881a226 	beq	r23,r2,809210 <_dtoa_r+0x1490>
  808b88:	b7000044 	addi	fp,r22,1
  808b8c:	b5c00005 	stb	r23,0(r22)
  808b90:	003f7406 	br	808964 <_dtoa_r+0xbe4>
  808b94:	00800e44 	movi	r2,57
  808b98:	b8819d26 	beq	r23,r2,809210 <_dtoa_r+0x1490>
  808b9c:	053ffa0e 	bge	zero,r20,808b88 <_dtoa_r+0xe08>
  808ba0:	8dc00c44 	addi	r23,r17,49
  808ba4:	003ff806 	br	808b88 <_dtoa_r+0xe08>
  808ba8:	d9001617 	ldw	r4,88(sp)
  808bac:	a80b883a 	mov	r5,r21
  808bb0:	04000044 	movi	r16,1
  808bb4:	08098e80 	call	8098e8 <_Bfree>
  808bb8:	003edf06 	br	808738 <_dtoa_r+0x9b8>
  808bbc:	d9001617 	ldw	r4,88(sp)
  808bc0:	980b883a 	mov	r5,r19
  808bc4:	01800284 	movi	r6,10
  808bc8:	000f883a 	mov	r7,zero
  808bcc:	080a59c0 	call	80a59c <__multadd>
  808bd0:	1027883a 	mov	r19,r2
  808bd4:	d8800615 	stw	r2,24(sp)
  808bd8:	003ebb06 	br	8086c8 <_dtoa_r+0x948>
  808bdc:	d9801117 	ldw	r6,68(sp)
  808be0:	d8800d17 	ldw	r2,52(sp)
  808be4:	d8000915 	stw	zero,36(sp)
  808be8:	308dc83a 	sub	r6,r6,r2
  808bec:	0087c83a 	sub	r3,zero,r2
  808bf0:	d9801115 	stw	r6,68(sp)
  808bf4:	d8c01015 	stw	r3,64(sp)
  808bf8:	003cfe06 	br	807ff4 <_dtoa_r+0x274>
  808bfc:	018dc83a 	sub	r6,zero,r6
  808c00:	d9801115 	stw	r6,68(sp)
  808c04:	d8000a15 	stw	zero,40(sp)
  808c08:	003cf306 	br	807fd8 <_dtoa_r+0x258>
  808c0c:	d9000d17 	ldw	r4,52(sp)
  808c10:	080f7c80 	call	80f7c8 <__floatsidf>
  808c14:	880b883a 	mov	r5,r17
  808c18:	8009883a 	mov	r4,r16
  808c1c:	180f883a 	mov	r7,r3
  808c20:	100d883a 	mov	r6,r2
  808c24:	080f5200 	call	80f520 <__nedf2>
  808c28:	103ce126 	beq	r2,zero,807fb0 <_dtoa_r+0x230>
  808c2c:	d9800d17 	ldw	r6,52(sp)
  808c30:	31bfffc4 	addi	r6,r6,-1
  808c34:	d9800d15 	stw	r6,52(sp)
  808c38:	003cdd06 	br	807fb0 <_dtoa_r+0x230>
  808c3c:	d9000717 	ldw	r4,28(sp)
  808c40:	900b883a 	mov	r5,r18
  808c44:	0809a440 	call	809a44 <__mcmp>
  808c48:	103e8d0e 	bge	r2,zero,808680 <_dtoa_r+0x900>
  808c4c:	d9400717 	ldw	r5,28(sp)
  808c50:	d9001617 	ldw	r4,88(sp)
  808c54:	01800284 	movi	r6,10
  808c58:	000f883a 	mov	r7,zero
  808c5c:	080a59c0 	call	80a59c <__multadd>
  808c60:	d9800d17 	ldw	r6,52(sp)
  808c64:	d8800715 	stw	r2,28(sp)
  808c68:	31bfffc4 	addi	r6,r6,-1
  808c6c:	d9800d15 	stw	r6,52(sp)
  808c70:	b001a71e 	bne	r22,zero,809310 <_dtoa_r+0x1590>
  808c74:	d8800e17 	ldw	r2,56(sp)
  808c78:	d8800f15 	stw	r2,60(sp)
  808c7c:	003e8006 	br	808680 <_dtoa_r+0x900>
  808c80:	90800417 	ldw	r2,16(r18)
  808c84:	1085883a 	add	r2,r2,r2
  808c88:	1085883a 	add	r2,r2,r2
  808c8c:	1485883a 	add	r2,r2,r18
  808c90:	11000417 	ldw	r4,16(r2)
  808c94:	08099100 	call	809910 <__hi0bits>
  808c98:	00c00804 	movi	r3,32
  808c9c:	1887c83a 	sub	r3,r3,r2
  808ca0:	003e5a06 	br	80860c <_dtoa_r+0x88c>
  808ca4:	d9400717 	ldw	r5,28(sp)
  808ca8:	d9801017 	ldw	r6,64(sp)
  808cac:	d9001617 	ldw	r4,88(sp)
  808cb0:	080a69c0 	call	80a69c <__pow5mult>
  808cb4:	d8800715 	stw	r2,28(sp)
  808cb8:	003e4306 	br	8085c8 <_dtoa_r+0x848>
  808cbc:	d9800f17 	ldw	r6,60(sp)
  808cc0:	d8800d17 	ldw	r2,52(sp)
  808cc4:	d9800315 	stw	r6,12(sp)
  808cc8:	d8800415 	stw	r2,16(sp)
  808ccc:	d8c00b17 	ldw	r3,44(sp)
  808cd0:	1805003a 	cmpeq	r2,r3,zero
  808cd4:	1000e21e 	bne	r2,zero,809060 <_dtoa_r+0x12e0>
  808cd8:	d9000317 	ldw	r4,12(sp)
  808cdc:	0005883a 	mov	r2,zero
  808ce0:	00cff834 	movhi	r3,16352
  808ce4:	200c90fa 	slli	r6,r4,3
  808ce8:	01002074 	movhi	r4,129
  808cec:	21144204 	addi	r4,r4,20744
  808cf0:	180b883a 	mov	r5,r3
  808cf4:	310d883a 	add	r6,r6,r4
  808cf8:	327fff17 	ldw	r9,-4(r6)
  808cfc:	323ffe17 	ldw	r8,-8(r6)
  808d00:	1009883a 	mov	r4,r2
  808d04:	480f883a 	mov	r7,r9
  808d08:	400d883a 	mov	r6,r8
  808d0c:	080f2400 	call	80f240 <__divdf3>
  808d10:	180b883a 	mov	r5,r3
  808d14:	b00d883a 	mov	r6,r22
  808d18:	b80f883a 	mov	r7,r23
  808d1c:	1009883a 	mov	r4,r2
  808d20:	080ed880 	call	80ed88 <__subdf3>
  808d24:	a80b883a 	mov	r5,r21
  808d28:	a009883a 	mov	r4,r20
  808d2c:	d8c01915 	stw	r3,100(sp)
  808d30:	d8801815 	stw	r2,96(sp)
  808d34:	080f8c00 	call	80f8c0 <__fixdfsi>
  808d38:	1009883a 	mov	r4,r2
  808d3c:	1027883a 	mov	r19,r2
  808d40:	080f7c80 	call	80f7c8 <__floatsidf>
  808d44:	a80b883a 	mov	r5,r21
  808d48:	a009883a 	mov	r4,r20
  808d4c:	180f883a 	mov	r7,r3
  808d50:	100d883a 	mov	r6,r2
  808d54:	080ed880 	call	80ed88 <__subdf3>
  808d58:	d9801817 	ldw	r6,96(sp)
  808d5c:	1823883a 	mov	r17,r3
  808d60:	d8801415 	stw	r2,80(sp)
  808d64:	302d883a 	mov	r22,r6
  808d68:	d9800517 	ldw	r6,20(sp)
  808d6c:	9cc00c04 	addi	r19,r19,48
  808d70:	dc401515 	stw	r17,84(sp)
  808d74:	d8c01917 	ldw	r3,100(sp)
  808d78:	34c00005 	stb	r19,0(r6)
  808d7c:	d8800517 	ldw	r2,20(sp)
  808d80:	d9401917 	ldw	r5,100(sp)
  808d84:	d9801417 	ldw	r6,80(sp)
  808d88:	b009883a 	mov	r4,r22
  808d8c:	880f883a 	mov	r7,r17
  808d90:	182f883a 	mov	r23,r3
  808d94:	17000044 	addi	fp,r2,1
  808d98:	080f5a80 	call	80f5a8 <__gtdf2>
  808d9c:	00804e16 	blt	zero,r2,808ed8 <_dtoa_r+0x1158>
  808da0:	d9801417 	ldw	r6,80(sp)
  808da4:	0005883a 	mov	r2,zero
  808da8:	00cffc34 	movhi	r3,16368
  808dac:	180b883a 	mov	r5,r3
  808db0:	880f883a 	mov	r7,r17
  808db4:	1009883a 	mov	r4,r2
  808db8:	080ed880 	call	80ed88 <__subdf3>
  808dbc:	d9401917 	ldw	r5,100(sp)
  808dc0:	180f883a 	mov	r7,r3
  808dc4:	b009883a 	mov	r4,r22
  808dc8:	100d883a 	mov	r6,r2
  808dcc:	080f5a80 	call	80f5a8 <__gtdf2>
  808dd0:	00bda216 	blt	zero,r2,80845c <_dtoa_r+0x6dc>
  808dd4:	d8c00317 	ldw	r3,12(sp)
  808dd8:	00800044 	movi	r2,1
  808ddc:	10c01216 	blt	r2,r3,808e28 <_dtoa_r+0x10a8>
  808de0:	003d4506 	br	8082f8 <_dtoa_r+0x578>
  808de4:	d9801417 	ldw	r6,80(sp)
  808de8:	0005883a 	mov	r2,zero
  808dec:	00cffc34 	movhi	r3,16368
  808df0:	180b883a 	mov	r5,r3
  808df4:	880f883a 	mov	r7,r17
  808df8:	1009883a 	mov	r4,r2
  808dfc:	080ed880 	call	80ed88 <__subdf3>
  808e00:	d9c01b17 	ldw	r7,108(sp)
  808e04:	180b883a 	mov	r5,r3
  808e08:	1009883a 	mov	r4,r2
  808e0c:	b00d883a 	mov	r6,r22
  808e10:	080f6b80 	call	80f6b8 <__ltdf2>
  808e14:	103d9116 	blt	r2,zero,80845c <_dtoa_r+0x6dc>
  808e18:	d9800517 	ldw	r6,20(sp)
  808e1c:	d9000317 	ldw	r4,12(sp)
  808e20:	3105883a 	add	r2,r6,r4
  808e24:	e0bd3426 	beq	fp,r2,8082f8 <_dtoa_r+0x578>
  808e28:	04500934 	movhi	r17,16420
  808e2c:	0021883a 	mov	r16,zero
  808e30:	b80b883a 	mov	r5,r23
  808e34:	b009883a 	mov	r4,r22
  808e38:	800d883a 	mov	r6,r16
  808e3c:	880f883a 	mov	r7,r17
  808e40:	080ee7c0 	call	80ee7c <__muldf3>
  808e44:	d9401517 	ldw	r5,84(sp)
  808e48:	d9001417 	ldw	r4,80(sp)
  808e4c:	880f883a 	mov	r7,r17
  808e50:	000d883a 	mov	r6,zero
  808e54:	d8801a15 	stw	r2,104(sp)
  808e58:	d8c01b15 	stw	r3,108(sp)
  808e5c:	080ee7c0 	call	80ee7c <__muldf3>
  808e60:	180b883a 	mov	r5,r3
  808e64:	1009883a 	mov	r4,r2
  808e68:	1823883a 	mov	r17,r3
  808e6c:	1021883a 	mov	r16,r2
  808e70:	080f8c00 	call	80f8c0 <__fixdfsi>
  808e74:	1009883a 	mov	r4,r2
  808e78:	102b883a 	mov	r21,r2
  808e7c:	080f7c80 	call	80f7c8 <__floatsidf>
  808e80:	880b883a 	mov	r5,r17
  808e84:	8009883a 	mov	r4,r16
  808e88:	180f883a 	mov	r7,r3
  808e8c:	100d883a 	mov	r6,r2
  808e90:	080ed880 	call	80ed88 <__subdf3>
  808e94:	1021883a 	mov	r16,r2
  808e98:	d9001b17 	ldw	r4,108(sp)
  808e9c:	1823883a 	mov	r17,r3
  808ea0:	dc001415 	stw	r16,80(sp)
  808ea4:	ad400c04 	addi	r21,r21,48
  808ea8:	dc401515 	stw	r17,84(sp)
  808eac:	d8801a17 	ldw	r2,104(sp)
  808eb0:	e5400005 	stb	r21,0(fp)
  808eb4:	202f883a 	mov	r23,r4
  808eb8:	d9c01b17 	ldw	r7,108(sp)
  808ebc:	d9001417 	ldw	r4,80(sp)
  808ec0:	880b883a 	mov	r5,r17
  808ec4:	100d883a 	mov	r6,r2
  808ec8:	102d883a 	mov	r22,r2
  808ecc:	e7000044 	addi	fp,fp,1
  808ed0:	080f6b80 	call	80f6b8 <__ltdf2>
  808ed4:	103fc30e 	bge	r2,zero,808de4 <_dtoa_r+0x1064>
  808ed8:	d9000417 	ldw	r4,16(sp)
  808edc:	d9000d15 	stw	r4,52(sp)
  808ee0:	003d7106 	br	8084a8 <_dtoa_r+0x728>
  808ee4:	d9801717 	ldw	r6,92(sp)
  808ee8:	00800084 	movi	r2,2
  808eec:	11bde60e 	bge	r2,r6,808688 <_dtoa_r+0x908>
  808ef0:	203cfb1e 	bne	r4,zero,8082e0 <_dtoa_r+0x560>
  808ef4:	d9001617 	ldw	r4,88(sp)
  808ef8:	900b883a 	mov	r5,r18
  808efc:	01800144 	movi	r6,5
  808f00:	000f883a 	mov	r7,zero
  808f04:	080a59c0 	call	80a59c <__multadd>
  808f08:	d9000717 	ldw	r4,28(sp)
  808f0c:	100b883a 	mov	r5,r2
  808f10:	1025883a 	mov	r18,r2
  808f14:	0809a440 	call	809a44 <__mcmp>
  808f18:	00bcf10e 	bge	zero,r2,8082e0 <_dtoa_r+0x560>
  808f1c:	d8c00d17 	ldw	r3,52(sp)
  808f20:	d9000517 	ldw	r4,20(sp)
  808f24:	d8000615 	stw	zero,24(sp)
  808f28:	18c00044 	addi	r3,r3,1
  808f2c:	d8c00d15 	stw	r3,52(sp)
  808f30:	00800c44 	movi	r2,49
  808f34:	27000044 	addi	fp,r4,1
  808f38:	20800005 	stb	r2,0(r4)
  808f3c:	003e8906 	br	808964 <_dtoa_r+0xbe4>
  808f40:	d8c00517 	ldw	r3,20(sp)
  808f44:	003bc206 	br	807e50 <_dtoa_r+0xd0>
  808f48:	01802074 	movhi	r6,129
  808f4c:	31947404 	addi	r6,r6,20944
  808f50:	30c00917 	ldw	r3,36(r6)
  808f54:	30800817 	ldw	r2,32(r6)
  808f58:	d9001217 	ldw	r4,72(sp)
  808f5c:	d9401317 	ldw	r5,76(sp)
  808f60:	180f883a 	mov	r7,r3
  808f64:	100d883a 	mov	r6,r2
  808f68:	080f2400 	call	80f240 <__divdf3>
  808f6c:	948003cc 	andi	r18,r18,15
  808f70:	058000c4 	movi	r22,3
  808f74:	1029883a 	mov	r20,r2
  808f78:	182b883a 	mov	r21,r3
  808f7c:	003c8906 	br	8081a4 <_dtoa_r+0x424>
  808f80:	d9001017 	ldw	r4,64(sp)
  808f84:	d9800917 	ldw	r6,36(sp)
  808f88:	0025883a 	mov	r18,zero
  808f8c:	1105c83a 	sub	r2,r2,r4
  808f90:	2089883a 	add	r4,r4,r2
  808f94:	308d883a 	add	r6,r6,r2
  808f98:	d9001015 	stw	r4,64(sp)
  808f9c:	d9800915 	stw	r6,36(sp)
  808fa0:	003e3206 	br	80886c <_dtoa_r+0xaec>
  808fa4:	28800044 	addi	r2,r5,1
  808fa8:	27000044 	addi	fp,r4,1
  808fac:	20800005 	stb	r2,0(r4)
  808fb0:	003e6c06 	br	808964 <_dtoa_r+0xbe4>
  808fb4:	d8800f17 	ldw	r2,60(sp)
  808fb8:	00bce016 	blt	zero,r2,80833c <_dtoa_r+0x5bc>
  808fbc:	d9800f17 	ldw	r6,60(sp)
  808fc0:	303cc51e 	bne	r6,zero,8082d8 <_dtoa_r+0x558>
  808fc4:	0005883a 	mov	r2,zero
  808fc8:	00d00534 	movhi	r3,16404
  808fcc:	980b883a 	mov	r5,r19
  808fd0:	180f883a 	mov	r7,r3
  808fd4:	9009883a 	mov	r4,r18
  808fd8:	100d883a 	mov	r6,r2
  808fdc:	080ee7c0 	call	80ee7c <__muldf3>
  808fe0:	180b883a 	mov	r5,r3
  808fe4:	a80f883a 	mov	r7,r21
  808fe8:	1009883a 	mov	r4,r2
  808fec:	a00d883a 	mov	r6,r20
  808ff0:	080f6300 	call	80f630 <__gedf2>
  808ff4:	103cb80e 	bge	r2,zero,8082d8 <_dtoa_r+0x558>
  808ff8:	0027883a 	mov	r19,zero
  808ffc:	0025883a 	mov	r18,zero
  809000:	003fc606 	br	808f1c <_dtoa_r+0x119c>
  809004:	99400117 	ldw	r5,4(r19)
  809008:	d9001617 	ldw	r4,88(sp)
  80900c:	0809e680 	call	809e68 <_Balloc>
  809010:	99800417 	ldw	r6,16(r19)
  809014:	11000304 	addi	r4,r2,12
  809018:	99400304 	addi	r5,r19,12
  80901c:	318d883a 	add	r6,r6,r6
  809020:	318d883a 	add	r6,r6,r6
  809024:	31800204 	addi	r6,r6,8
  809028:	1023883a 	mov	r17,r2
  80902c:	08032940 	call	803294 <memcpy>
  809030:	d9001617 	ldw	r4,88(sp)
  809034:	880b883a 	mov	r5,r17
  809038:	01800044 	movi	r6,1
  80903c:	080a22c0 	call	80a22c <__lshift>
  809040:	100b883a 	mov	r5,r2
  809044:	003d9c06 	br	8086b8 <_dtoa_r+0x938>
  809048:	00800e44 	movi	r2,57
  80904c:	b8807026 	beq	r23,r2,809210 <_dtoa_r+0x1490>
  809050:	b8800044 	addi	r2,r23,1
  809054:	b7000044 	addi	fp,r22,1
  809058:	b0800005 	stb	r2,0(r22)
  80905c:	003e4106 	br	808964 <_dtoa_r+0xbe4>
  809060:	d8800317 	ldw	r2,12(sp)
  809064:	01802074 	movhi	r6,129
  809068:	31944204 	addi	r6,r6,20744
  80906c:	b009883a 	mov	r4,r22
  809070:	100e90fa 	slli	r7,r2,3
  809074:	b80b883a 	mov	r5,r23
  809078:	398f883a 	add	r7,r7,r6
  80907c:	38bffe17 	ldw	r2,-8(r7)
  809080:	d9800517 	ldw	r6,20(sp)
  809084:	38ffff17 	ldw	r3,-4(r7)
  809088:	37000044 	addi	fp,r6,1
  80908c:	180f883a 	mov	r7,r3
  809090:	100d883a 	mov	r6,r2
  809094:	080ee7c0 	call	80ee7c <__muldf3>
  809098:	a80b883a 	mov	r5,r21
  80909c:	a009883a 	mov	r4,r20
  8090a0:	182f883a 	mov	r23,r3
  8090a4:	102d883a 	mov	r22,r2
  8090a8:	080f8c00 	call	80f8c0 <__fixdfsi>
  8090ac:	1009883a 	mov	r4,r2
  8090b0:	1027883a 	mov	r19,r2
  8090b4:	080f7c80 	call	80f7c8 <__floatsidf>
  8090b8:	a80b883a 	mov	r5,r21
  8090bc:	a009883a 	mov	r4,r20
  8090c0:	180f883a 	mov	r7,r3
  8090c4:	100d883a 	mov	r6,r2
  8090c8:	080ed880 	call	80ed88 <__subdf3>
  8090cc:	180b883a 	mov	r5,r3
  8090d0:	d8c00517 	ldw	r3,20(sp)
  8090d4:	9cc00c04 	addi	r19,r19,48
  8090d8:	1009883a 	mov	r4,r2
  8090dc:	1cc00005 	stb	r19,0(r3)
  8090e0:	2021883a 	mov	r16,r4
  8090e4:	d9000317 	ldw	r4,12(sp)
  8090e8:	00800044 	movi	r2,1
  8090ec:	2823883a 	mov	r17,r5
  8090f0:	20802226 	beq	r4,r2,80917c <_dtoa_r+0x13fc>
  8090f4:	1029883a 	mov	r20,r2
  8090f8:	0005883a 	mov	r2,zero
  8090fc:	00d00934 	movhi	r3,16420
  809100:	180f883a 	mov	r7,r3
  809104:	100d883a 	mov	r6,r2
  809108:	880b883a 	mov	r5,r17
  80910c:	8009883a 	mov	r4,r16
  809110:	080ee7c0 	call	80ee7c <__muldf3>
  809114:	180b883a 	mov	r5,r3
  809118:	1009883a 	mov	r4,r2
  80911c:	1823883a 	mov	r17,r3
  809120:	1021883a 	mov	r16,r2
  809124:	080f8c00 	call	80f8c0 <__fixdfsi>
  809128:	1009883a 	mov	r4,r2
  80912c:	102b883a 	mov	r21,r2
  809130:	080f7c80 	call	80f7c8 <__floatsidf>
  809134:	880b883a 	mov	r5,r17
  809138:	8009883a 	mov	r4,r16
  80913c:	180f883a 	mov	r7,r3
  809140:	100d883a 	mov	r6,r2
  809144:	080ed880 	call	80ed88 <__subdf3>
  809148:	180b883a 	mov	r5,r3
  80914c:	d8c00517 	ldw	r3,20(sp)
  809150:	1009883a 	mov	r4,r2
  809154:	ad400c04 	addi	r21,r21,48
  809158:	1d05883a 	add	r2,r3,r20
  80915c:	15400005 	stb	r21,0(r2)
  809160:	2021883a 	mov	r16,r4
  809164:	d9000317 	ldw	r4,12(sp)
  809168:	a5000044 	addi	r20,r20,1
  80916c:	2823883a 	mov	r17,r5
  809170:	a13fe11e 	bne	r20,r4,8090f8 <_dtoa_r+0x1378>
  809174:	e505883a 	add	r2,fp,r20
  809178:	173fffc4 	addi	fp,r2,-1
  80917c:	0025883a 	mov	r18,zero
  809180:	04cff834 	movhi	r19,16352
  809184:	b009883a 	mov	r4,r22
  809188:	b80b883a 	mov	r5,r23
  80918c:	900d883a 	mov	r6,r18
  809190:	980f883a 	mov	r7,r19
  809194:	080ee080 	call	80ee08 <__adddf3>
  809198:	180b883a 	mov	r5,r3
  80919c:	1009883a 	mov	r4,r2
  8091a0:	800d883a 	mov	r6,r16
  8091a4:	880f883a 	mov	r7,r17
  8091a8:	080f6b80 	call	80f6b8 <__ltdf2>
  8091ac:	103cab16 	blt	r2,zero,80845c <_dtoa_r+0x6dc>
  8091b0:	0009883a 	mov	r4,zero
  8091b4:	980b883a 	mov	r5,r19
  8091b8:	b80f883a 	mov	r7,r23
  8091bc:	b00d883a 	mov	r6,r22
  8091c0:	080ed880 	call	80ed88 <__subdf3>
  8091c4:	180b883a 	mov	r5,r3
  8091c8:	880f883a 	mov	r7,r17
  8091cc:	1009883a 	mov	r4,r2
  8091d0:	800d883a 	mov	r6,r16
  8091d4:	080f5a80 	call	80f5a8 <__gtdf2>
  8091d8:	00bc470e 	bge	zero,r2,8082f8 <_dtoa_r+0x578>
  8091dc:	00c00c04 	movi	r3,48
  8091e0:	e73fffc4 	addi	fp,fp,-1
  8091e4:	e0800007 	ldb	r2,0(fp)
  8091e8:	10fffd26 	beq	r2,r3,8091e0 <_dtoa_r+0x1460>
  8091ec:	d9800417 	ldw	r6,16(sp)
  8091f0:	e7000044 	addi	fp,fp,1
  8091f4:	d9800d15 	stw	r6,52(sp)
  8091f8:	003cab06 	br	8084a8 <_dtoa_r+0x728>
  8091fc:	d8c00f17 	ldw	r3,60(sp)
  809200:	d9001117 	ldw	r4,68(sp)
  809204:	20e1c83a 	sub	r16,r4,r3
  809208:	0007883a 	mov	r3,zero
  80920c:	003d9b06 	br	80887c <_dtoa_r+0xafc>
  809210:	00800e44 	movi	r2,57
  809214:	b0800005 	stb	r2,0(r22)
  809218:	b5800044 	addi	r22,r22,1
  80921c:	003dc106 	br	808924 <_dtoa_r+0xba4>
  809220:	05800084 	movi	r22,2
  809224:	003bf706 	br	808204 <_dtoa_r+0x484>
  809228:	d9000f17 	ldw	r4,60(sp)
  80922c:	013c000e 	bge	zero,r4,808230 <_dtoa_r+0x4b0>
  809230:	d9800e17 	ldw	r6,56(sp)
  809234:	01bc300e 	bge	zero,r6,8082f8 <_dtoa_r+0x578>
  809238:	0005883a 	mov	r2,zero
  80923c:	00d00934 	movhi	r3,16420
  809240:	a80b883a 	mov	r5,r21
  809244:	180f883a 	mov	r7,r3
  809248:	a009883a 	mov	r4,r20
  80924c:	100d883a 	mov	r6,r2
  809250:	080ee7c0 	call	80ee7c <__muldf3>
  809254:	b1000044 	addi	r4,r22,1
  809258:	1021883a 	mov	r16,r2
  80925c:	1823883a 	mov	r17,r3
  809260:	080f7c80 	call	80f7c8 <__floatsidf>
  809264:	880b883a 	mov	r5,r17
  809268:	8009883a 	mov	r4,r16
  80926c:	180f883a 	mov	r7,r3
  809270:	100d883a 	mov	r6,r2
  809274:	080ee7c0 	call	80ee7c <__muldf3>
  809278:	0011883a 	mov	r8,zero
  80927c:	02500734 	movhi	r9,16412
  809280:	180b883a 	mov	r5,r3
  809284:	480f883a 	mov	r7,r9
  809288:	1009883a 	mov	r4,r2
  80928c:	400d883a 	mov	r6,r8
  809290:	080ee080 	call	80ee08 <__adddf3>
  809294:	102d883a 	mov	r22,r2
  809298:	00bf3034 	movhi	r2,64704
  80929c:	10ef883a 	add	r23,r2,r3
  8092a0:	d8800d17 	ldw	r2,52(sp)
  8092a4:	d8c00e17 	ldw	r3,56(sp)
  8092a8:	8029883a 	mov	r20,r16
  8092ac:	10bfffc4 	addi	r2,r2,-1
  8092b0:	882b883a 	mov	r21,r17
  8092b4:	d8800415 	stw	r2,16(sp)
  8092b8:	d8c00315 	stw	r3,12(sp)
  8092bc:	003e8306 	br	808ccc <_dtoa_r+0xf4c>
  8092c0:	d8800117 	ldw	r2,4(sp)
  8092c4:	dc001117 	ldw	r16,68(sp)
  8092c8:	dc801017 	ldw	r18,64(sp)
  8092cc:	00c00d84 	movi	r3,54
  8092d0:	1887c83a 	sub	r3,r3,r2
  8092d4:	003d6906 	br	80887c <_dtoa_r+0xafc>
  8092d8:	01800044 	movi	r6,1
  8092dc:	3021883a 	mov	r16,r6
  8092e0:	d9800f15 	stw	r6,60(sp)
  8092e4:	d9802615 	stw	r6,152(sp)
  8092e8:	d9800e15 	stw	r6,56(sp)
  8092ec:	003b9306 	br	80813c <_dtoa_r+0x3bc>
  8092f0:	b021883a 	mov	r16,r22
  8092f4:	dd800f15 	stw	r22,60(sp)
  8092f8:	003b9006 	br	80813c <_dtoa_r+0x3bc>
  8092fc:	103e221e 	bne	r2,zero,808b88 <_dtoa_r+0xe08>
  809300:	b880004c 	andi	r2,r23,1
  809304:	1005003a 	cmpeq	r2,r2,zero
  809308:	103e1f1e 	bne	r2,zero,808b88 <_dtoa_r+0xe08>
  80930c:	003e1b06 	br	808b7c <_dtoa_r+0xdfc>
  809310:	d9001617 	ldw	r4,88(sp)
  809314:	980b883a 	mov	r5,r19
  809318:	01800284 	movi	r6,10
  80931c:	000f883a 	mov	r7,zero
  809320:	080a59c0 	call	80a59c <__multadd>
  809324:	d8c00e17 	ldw	r3,56(sp)
  809328:	1027883a 	mov	r19,r2
  80932c:	d8c00f15 	stw	r3,60(sp)
  809330:	003cd306 	br	808680 <_dtoa_r+0x900>

00809334 <__sflags>:
  809334:	28c00007 	ldb	r3,0(r5)
  809338:	00801c84 	movi	r2,114
  80933c:	18800926 	beq	r3,r2,809364 <__sflags+0x30>
  809340:	00801dc4 	movi	r2,119
  809344:	18801426 	beq	r3,r2,809398 <__sflags+0x64>
  809348:	00801844 	movi	r2,97
  80934c:	18801626 	beq	r3,r2,8093a8 <__sflags+0x74>
  809350:	0007883a 	mov	r3,zero
  809354:	00800584 	movi	r2,22
  809358:	20800015 	stw	r2,0(r4)
  80935c:	1805883a 	mov	r2,r3
  809360:	f800283a 	ret
  809364:	000f883a 	mov	r7,zero
  809368:	0011883a 	mov	r8,zero
  80936c:	00c00104 	movi	r3,4
  809370:	28800047 	ldb	r2,1(r5)
  809374:	10000426 	beq	r2,zero,809388 <__sflags+0x54>
  809378:	01000ac4 	movi	r4,43
  80937c:	11000e26 	beq	r2,r4,8093b8 <__sflags+0x84>
  809380:	28800087 	ldb	r2,2(r5)
  809384:	11000c26 	beq	r2,r4,8093b8 <__sflags+0x84>
  809388:	3a04b03a 	or	r2,r7,r8
  80938c:	30800015 	stw	r2,0(r6)
  809390:	1805883a 	mov	r2,r3
  809394:	f800283a 	ret
  809398:	01c00044 	movi	r7,1
  80939c:	02018004 	movi	r8,1536
  8093a0:	00c00204 	movi	r3,8
  8093a4:	003ff206 	br	809370 <__sflags+0x3c>
  8093a8:	01c00044 	movi	r7,1
  8093ac:	02008204 	movi	r8,520
  8093b0:	00c04204 	movi	r3,264
  8093b4:	003fee06 	br	809370 <__sflags+0x3c>
  8093b8:	00bffcc4 	movi	r2,-13
  8093bc:	1884703a 	and	r2,r3,r2
  8093c0:	01c00084 	movi	r7,2
  8093c4:	10c00414 	ori	r3,r2,16
  8093c8:	3a04b03a 	or	r2,r7,r8
  8093cc:	30800015 	stw	r2,0(r6)
  8093d0:	003fef06 	br	809390 <__sflags+0x5c>

008093d4 <_fread_r>:
  8093d4:	defff504 	addi	sp,sp,-44
  8093d8:	ddc00815 	stw	r23,32(sp)
  8093dc:	39af383a 	mul	r23,r7,r6
  8093e0:	df000915 	stw	fp,36(sp)
  8093e4:	dd800715 	stw	r22,28(sp)
  8093e8:	dcc00415 	stw	r19,16(sp)
  8093ec:	dc000115 	stw	r16,4(sp)
  8093f0:	dfc00a15 	stw	ra,40(sp)
  8093f4:	dd400615 	stw	r21,24(sp)
  8093f8:	dd000515 	stw	r20,20(sp)
  8093fc:	dc800315 	stw	r18,12(sp)
  809400:	dc400215 	stw	r17,8(sp)
  809404:	d9800015 	stw	r6,0(sp)
  809408:	3839883a 	mov	fp,r7
  80940c:	2821883a 	mov	r16,r5
  809410:	202d883a 	mov	r22,r4
  809414:	dcc00b17 	ldw	r19,44(sp)
  809418:	b8005926 	beq	r23,zero,809580 <_fread_r+0x1ac>
  80941c:	20000226 	beq	r4,zero,809428 <_fread_r+0x54>
  809420:	20800e17 	ldw	r2,56(r4)
  809424:	10005826 	beq	r2,zero,809588 <_fread_r+0x1b4>
  809428:	9c400117 	ldw	r17,4(r19)
  80942c:	88005916 	blt	r17,zero,809594 <_fread_r+0x1c0>
  809430:	9880030b 	ldhu	r2,12(r19)
  809434:	8029883a 	mov	r20,r16
  809438:	1080008c 	andi	r2,r2,2
  80943c:	1000221e 	bne	r2,zero,8094c8 <_fread_r+0xf4>
  809440:	b825883a 	mov	r18,r23
  809444:	00000106 	br	80944c <_fread_r+0x78>
  809448:	9c400117 	ldw	r17,4(r19)
  80944c:	a009883a 	mov	r4,r20
  809450:	880d883a 	mov	r6,r17
  809454:	8c80542e 	bgeu	r17,r18,8095a8 <_fread_r+0x1d4>
  809458:	99400017 	ldw	r5,0(r19)
  80945c:	a469883a 	add	r20,r20,r17
  809460:	9465c83a 	sub	r18,r18,r17
  809464:	08032940 	call	803294 <memcpy>
  809468:	98800017 	ldw	r2,0(r19)
  80946c:	b009883a 	mov	r4,r22
  809470:	980b883a 	mov	r5,r19
  809474:	1461883a 	add	r16,r2,r17
  809478:	9c000015 	stw	r16,0(r19)
  80947c:	0803c440 	call	803c44 <__srefill_r>
  809480:	103ff126 	beq	r2,zero,809448 <_fread_r+0x74>
  809484:	d9400017 	ldw	r5,0(sp)
  809488:	bc89c83a 	sub	r4,r23,r18
  80948c:	080fcdc0 	call	80fcdc <__udivsi3>
  809490:	1039883a 	mov	fp,r2
  809494:	e005883a 	mov	r2,fp
  809498:	dfc00a17 	ldw	ra,40(sp)
  80949c:	df000917 	ldw	fp,36(sp)
  8094a0:	ddc00817 	ldw	r23,32(sp)
  8094a4:	dd800717 	ldw	r22,28(sp)
  8094a8:	dd400617 	ldw	r21,24(sp)
  8094ac:	dd000517 	ldw	r20,20(sp)
  8094b0:	dcc00417 	ldw	r19,16(sp)
  8094b4:	dc800317 	ldw	r18,12(sp)
  8094b8:	dc400217 	ldw	r17,8(sp)
  8094bc:	dc000117 	ldw	r16,4(sp)
  8094c0:	dec00b04 	addi	sp,sp,44
  8094c4:	f800283a 	ret
  8094c8:	b825883a 	mov	r18,r23
  8094cc:	8dc03436 	bltu	r17,r23,8095a0 <_fread_r+0x1cc>
  8094d0:	99400017 	ldw	r5,0(r19)
  8094d4:	a009883a 	mov	r4,r20
  8094d8:	900d883a 	mov	r6,r18
  8094dc:	08032940 	call	803294 <memcpy>
  8094e0:	9c000017 	ldw	r16,0(r19)
  8094e4:	98800117 	ldw	r2,4(r19)
  8094e8:	99400c17 	ldw	r5,48(r19)
  8094ec:	84a1883a 	add	r16,r16,r18
  8094f0:	14a3c83a 	sub	r17,r2,r18
  8094f4:	a4ab883a 	add	r21,r20,r18
  8094f8:	9c400115 	stw	r17,4(r19)
  8094fc:	9c000015 	stw	r16,0(r19)
  809500:	bca9c83a 	sub	r20,r23,r18
  809504:	28000826 	beq	r5,zero,809528 <_fread_r+0x154>
  809508:	a03fe226 	beq	r20,zero,809494 <_fread_r+0xc0>
  80950c:	98801004 	addi	r2,r19,64
  809510:	28800326 	beq	r5,r2,809520 <_fread_r+0x14c>
  809514:	b009883a 	mov	r4,r22
  809518:	0801ad80 	call	801ad8 <_free_r>
  80951c:	9c000017 	ldw	r16,0(r19)
  809520:	98000c15 	stw	zero,48(r19)
  809524:	00000106 	br	80952c <_fread_r+0x158>
  809528:	a03fda26 	beq	r20,zero,809494 <_fread_r+0xc0>
  80952c:	9c800417 	ldw	r18,16(r19)
  809530:	9c400517 	ldw	r17,20(r19)
  809534:	9d400015 	stw	r21,0(r19)
  809538:	9d400415 	stw	r21,16(r19)
  80953c:	9d000515 	stw	r20,20(r19)
  809540:	b009883a 	mov	r4,r22
  809544:	980b883a 	mov	r5,r19
  809548:	0803c440 	call	803c44 <__srefill_r>
  80954c:	98c00117 	ldw	r3,4(r19)
  809550:	9c800415 	stw	r18,16(r19)
  809554:	9c400515 	stw	r17,20(r19)
  809558:	a8eb883a 	add	r21,r21,r3
  80955c:	9c000015 	stw	r16,0(r19)
  809560:	a0e9c83a 	sub	r20,r20,r3
  809564:	98000115 	stw	zero,4(r19)
  809568:	103fef26 	beq	r2,zero,809528 <_fread_r+0x154>
  80956c:	d9400017 	ldw	r5,0(sp)
  809570:	bd09c83a 	sub	r4,r23,r20
  809574:	080fcdc0 	call	80fcdc <__udivsi3>
  809578:	1039883a 	mov	fp,r2
  80957c:	003fc506 	br	809494 <_fread_r+0xc0>
  809580:	0039883a 	mov	fp,zero
  809584:	003fc306 	br	809494 <_fread_r+0xc0>
  809588:	08015540 	call	801554 <__sinit>
  80958c:	9c400117 	ldw	r17,4(r19)
  809590:	883fa70e 	bge	r17,zero,809430 <_fread_r+0x5c>
  809594:	0023883a 	mov	r17,zero
  809598:	98000115 	stw	zero,4(r19)
  80959c:	003fa406 	br	809430 <_fread_r+0x5c>
  8095a0:	8825883a 	mov	r18,r17
  8095a4:	003fca06 	br	8094d0 <_fread_r+0xfc>
  8095a8:	99400017 	ldw	r5,0(r19)
  8095ac:	900d883a 	mov	r6,r18
  8095b0:	08032940 	call	803294 <memcpy>
  8095b4:	98c00117 	ldw	r3,4(r19)
  8095b8:	98800017 	ldw	r2,0(r19)
  8095bc:	1c87c83a 	sub	r3,r3,r18
  8095c0:	1485883a 	add	r2,r2,r18
  8095c4:	98800015 	stw	r2,0(r19)
  8095c8:	98c00115 	stw	r3,4(r19)
  8095cc:	003fb106 	br	809494 <_fread_r+0xc0>

008095d0 <fread>:
  8095d0:	00802074 	movhi	r2,129
  8095d4:	109c1404 	addi	r2,r2,28752
  8095d8:	2017883a 	mov	r11,r4
  8095dc:	11000017 	ldw	r4,0(r2)
  8095e0:	defffe04 	addi	sp,sp,-8
  8095e4:	3013883a 	mov	r9,r6
  8095e8:	2805883a 	mov	r2,r5
  8095ec:	d9c00015 	stw	r7,0(sp)
  8095f0:	580b883a 	mov	r5,r11
  8095f4:	100d883a 	mov	r6,r2
  8095f8:	480f883a 	mov	r7,r9
  8095fc:	dfc00115 	stw	ra,4(sp)
  809600:	08093d40 	call	8093d4 <_fread_r>
  809604:	dfc00117 	ldw	ra,4(sp)
  809608:	dec00204 	addi	sp,sp,8
  80960c:	f800283a 	ret

00809610 <_isatty_r>:
  809610:	defffd04 	addi	sp,sp,-12
  809614:	dc000015 	stw	r16,0(sp)
  809618:	040020b4 	movhi	r16,130
  80961c:	84236404 	addi	r16,r16,-29296
  809620:	dc400115 	stw	r17,4(sp)
  809624:	80000015 	stw	zero,0(r16)
  809628:	2023883a 	mov	r17,r4
  80962c:	2809883a 	mov	r4,r5
  809630:	dfc00215 	stw	ra,8(sp)
  809634:	0810b4c0 	call	810b4c <isatty>
  809638:	1007883a 	mov	r3,r2
  80963c:	00bfffc4 	movi	r2,-1
  809640:	18800626 	beq	r3,r2,80965c <_isatty_r+0x4c>
  809644:	1805883a 	mov	r2,r3
  809648:	dfc00217 	ldw	ra,8(sp)
  80964c:	dc400117 	ldw	r17,4(sp)
  809650:	dc000017 	ldw	r16,0(sp)
  809654:	dec00304 	addi	sp,sp,12
  809658:	f800283a 	ret
  80965c:	80800017 	ldw	r2,0(r16)
  809660:	103ff826 	beq	r2,zero,809644 <_isatty_r+0x34>
  809664:	88800015 	stw	r2,0(r17)
  809668:	1805883a 	mov	r2,r3
  80966c:	dfc00217 	ldw	ra,8(sp)
  809670:	dc400117 	ldw	r17,4(sp)
  809674:	dc000017 	ldw	r16,0(sp)
  809678:	dec00304 	addi	sp,sp,12
  80967c:	f800283a 	ret

00809680 <iswspace>:
  809680:	00803fc4 	movi	r2,255
  809684:	0007883a 	mov	r3,zero
  809688:	11000636 	bltu	r2,r4,8096a4 <iswspace+0x24>
  80968c:	00802074 	movhi	r2,129
  809690:	109c1804 	addi	r2,r2,28768
  809694:	10c00017 	ldw	r3,0(r2)
  809698:	1907883a 	add	r3,r3,r4
  80969c:	18800003 	ldbu	r2,0(r3)
  8096a0:	10c0020c 	andi	r3,r2,8
  8096a4:	1805883a 	mov	r2,r3
  8096a8:	f800283a 	ret

008096ac <__locale_charset>:
  8096ac:	d0a00a17 	ldw	r2,-32728(gp)
  8096b0:	f800283a 	ret

008096b4 <_localeconv_r>:
  8096b4:	00802074 	movhi	r2,129
  8096b8:	10943604 	addi	r2,r2,20696
  8096bc:	f800283a 	ret

008096c0 <localeconv>:
  8096c0:	00802074 	movhi	r2,129
  8096c4:	109c1404 	addi	r2,r2,28752
  8096c8:	11000017 	ldw	r4,0(r2)
  8096cc:	08096b41 	jmpi	8096b4 <_localeconv_r>

008096d0 <_setlocale_r>:
  8096d0:	defffc04 	addi	sp,sp,-16
  8096d4:	00c02074 	movhi	r3,129
  8096d8:	18d36004 	addi	r3,r3,19840
  8096dc:	dc800215 	stw	r18,8(sp)
  8096e0:	dc400115 	stw	r17,4(sp)
  8096e4:	dc000015 	stw	r16,0(sp)
  8096e8:	2023883a 	mov	r17,r4
  8096ec:	2825883a 	mov	r18,r5
  8096f0:	dfc00315 	stw	ra,12(sp)
  8096f4:	3021883a 	mov	r16,r6
  8096f8:	3009883a 	mov	r4,r6
  8096fc:	180b883a 	mov	r5,r3
  809700:	30000926 	beq	r6,zero,809728 <_setlocale_r+0x58>
  809704:	080aa8c0 	call	80aa8c <strcmp>
  809708:	8009883a 	mov	r4,r16
  80970c:	01402074 	movhi	r5,129
  809710:	29537104 	addi	r5,r5,19908
  809714:	10000b1e 	bne	r2,zero,809744 <_setlocale_r+0x74>
  809718:	8c000d15 	stw	r16,52(r17)
  80971c:	8c800c15 	stw	r18,48(r17)
  809720:	00c02074 	movhi	r3,129
  809724:	18d36004 	addi	r3,r3,19840
  809728:	1805883a 	mov	r2,r3
  80972c:	dfc00317 	ldw	ra,12(sp)
  809730:	dc800217 	ldw	r18,8(sp)
  809734:	dc400117 	ldw	r17,4(sp)
  809738:	dc000017 	ldw	r16,0(sp)
  80973c:	dec00404 	addi	sp,sp,16
  809740:	f800283a 	ret
  809744:	080aa8c0 	call	80aa8c <strcmp>
  809748:	0007883a 	mov	r3,zero
  80974c:	103ff226 	beq	r2,zero,809718 <_setlocale_r+0x48>
  809750:	003ff506 	br	809728 <_setlocale_r+0x58>

00809754 <setlocale>:
  809754:	01802074 	movhi	r6,129
  809758:	319c1404 	addi	r6,r6,28752
  80975c:	2007883a 	mov	r3,r4
  809760:	31000017 	ldw	r4,0(r6)
  809764:	280d883a 	mov	r6,r5
  809768:	180b883a 	mov	r5,r3
  80976c:	08096d01 	jmpi	8096d0 <_setlocale_r>

00809770 <_lseek_r>:
  809770:	defffd04 	addi	sp,sp,-12
  809774:	dc000015 	stw	r16,0(sp)
  809778:	040020b4 	movhi	r16,130
  80977c:	84236404 	addi	r16,r16,-29296
  809780:	dc400115 	stw	r17,4(sp)
  809784:	80000015 	stw	zero,0(r16)
  809788:	2023883a 	mov	r17,r4
  80978c:	2809883a 	mov	r4,r5
  809790:	300b883a 	mov	r5,r6
  809794:	380d883a 	mov	r6,r7
  809798:	dfc00215 	stw	ra,8(sp)
  80979c:	0810d580 	call	810d58 <lseek>
  8097a0:	1007883a 	mov	r3,r2
  8097a4:	00bfffc4 	movi	r2,-1
  8097a8:	18800626 	beq	r3,r2,8097c4 <_lseek_r+0x54>
  8097ac:	1805883a 	mov	r2,r3
  8097b0:	dfc00217 	ldw	ra,8(sp)
  8097b4:	dc400117 	ldw	r17,4(sp)
  8097b8:	dc000017 	ldw	r16,0(sp)
  8097bc:	dec00304 	addi	sp,sp,12
  8097c0:	f800283a 	ret
  8097c4:	80800017 	ldw	r2,0(r16)
  8097c8:	103ff826 	beq	r2,zero,8097ac <_lseek_r+0x3c>
  8097cc:	88800015 	stw	r2,0(r17)
  8097d0:	1805883a 	mov	r2,r3
  8097d4:	dfc00217 	ldw	ra,8(sp)
  8097d8:	dc400117 	ldw	r17,4(sp)
  8097dc:	dc000017 	ldw	r16,0(sp)
  8097e0:	dec00304 	addi	sp,sp,12
  8097e4:	f800283a 	ret

008097e8 <_mbrtowc_r>:
  8097e8:	defffc04 	addi	sp,sp,-16
  8097ec:	dc400215 	stw	r17,8(sp)
  8097f0:	dc000115 	stw	r16,4(sp)
  8097f4:	dfc00315 	stw	ra,12(sp)
  8097f8:	dc000417 	ldw	r16,16(sp)
  8097fc:	2023883a 	mov	r17,r4
  809800:	30000f26 	beq	r6,zero,809840 <_mbrtowc_r+0x58>
  809804:	dc000015 	stw	r16,0(sp)
  809808:	08098a80 	call	8098a8 <_mbtowc_r>
  80980c:	1007883a 	mov	r3,r2
  809810:	00bfffc4 	movi	r2,-1
  809814:	1809883a 	mov	r4,r3
  809818:	1880111e 	bne	r3,r2,809860 <_mbrtowc_r+0x78>
  80981c:	80000015 	stw	zero,0(r16)
  809820:	00802284 	movi	r2,138
  809824:	88800015 	stw	r2,0(r17)
  809828:	2005883a 	mov	r2,r4
  80982c:	dfc00317 	ldw	ra,12(sp)
  809830:	dc400217 	ldw	r17,8(sp)
  809834:	dc000117 	ldw	r16,4(sp)
  809838:	dec00404 	addi	sp,sp,16
  80983c:	f800283a 	ret
  809840:	000b883a 	mov	r5,zero
  809844:	01802074 	movhi	r6,129
  809848:	31937104 	addi	r6,r6,19908
  80984c:	01c00044 	movi	r7,1
  809850:	dc000015 	stw	r16,0(sp)
  809854:	08098a80 	call	8098a8 <_mbtowc_r>
  809858:	1007883a 	mov	r3,r2
  80985c:	003fec06 	br	809810 <_mbrtowc_r+0x28>
  809860:	1809883a 	mov	r4,r3
  809864:	003ff006 	br	809828 <_mbrtowc_r+0x40>

00809868 <mbrtowc>:
  809868:	00802074 	movhi	r2,129
  80986c:	109c1404 	addi	r2,r2,28752
  809870:	2017883a 	mov	r11,r4
  809874:	11000017 	ldw	r4,0(r2)
  809878:	defffe04 	addi	sp,sp,-8
  80987c:	3013883a 	mov	r9,r6
  809880:	2805883a 	mov	r2,r5
  809884:	d9c00015 	stw	r7,0(sp)
  809888:	580b883a 	mov	r5,r11
  80988c:	100d883a 	mov	r6,r2
  809890:	480f883a 	mov	r7,r9
  809894:	dfc00115 	stw	ra,4(sp)
  809898:	08097e80 	call	8097e8 <_mbrtowc_r>
  80989c:	dfc00117 	ldw	ra,4(sp)
  8098a0:	dec00204 	addi	sp,sp,8
  8098a4:	f800283a 	ret

008098a8 <_mbtowc_r>:
  8098a8:	deffff04 	addi	sp,sp,-4
  8098ac:	0005883a 	mov	r2,zero
  8098b0:	28000326 	beq	r5,zero,8098c0 <_mbtowc_r+0x18>
  8098b4:	3000041e 	bne	r6,zero,8098c8 <_mbtowc_r+0x20>
  8098b8:	dec00104 	addi	sp,sp,4
  8098bc:	f800283a 	ret
  8098c0:	d80b883a 	mov	r5,sp
  8098c4:	303ffc26 	beq	r6,zero,8098b8 <_mbtowc_r+0x10>
  8098c8:	00bfff84 	movi	r2,-2
  8098cc:	383ffa26 	beq	r7,zero,8098b8 <_mbtowc_r+0x10>
  8098d0:	30800003 	ldbu	r2,0(r6)
  8098d4:	28800015 	stw	r2,0(r5)
  8098d8:	30c00003 	ldbu	r3,0(r6)
  8098dc:	1804c03a 	cmpne	r2,r3,zero
  8098e0:	dec00104 	addi	sp,sp,4
  8098e4:	f800283a 	ret

008098e8 <_Bfree>:
  8098e8:	28000826 	beq	r5,zero,80990c <_Bfree+0x24>
  8098ec:	28800117 	ldw	r2,4(r5)
  8098f0:	21001317 	ldw	r4,76(r4)
  8098f4:	1085883a 	add	r2,r2,r2
  8098f8:	1085883a 	add	r2,r2,r2
  8098fc:	1105883a 	add	r2,r2,r4
  809900:	10c00017 	ldw	r3,0(r2)
  809904:	28c00015 	stw	r3,0(r5)
  809908:	11400015 	stw	r5,0(r2)
  80990c:	f800283a 	ret

00809910 <__hi0bits>:
  809910:	20bfffec 	andhi	r2,r4,65535
  809914:	10001426 	beq	r2,zero,809968 <__hi0bits+0x58>
  809918:	0007883a 	mov	r3,zero
  80991c:	20bfc02c 	andhi	r2,r4,65280
  809920:	1000021e 	bne	r2,zero,80992c <__hi0bits+0x1c>
  809924:	2008923a 	slli	r4,r4,8
  809928:	18c00204 	addi	r3,r3,8
  80992c:	20bc002c 	andhi	r2,r4,61440
  809930:	1000021e 	bne	r2,zero,80993c <__hi0bits+0x2c>
  809934:	2008913a 	slli	r4,r4,4
  809938:	18c00104 	addi	r3,r3,4
  80993c:	20b0002c 	andhi	r2,r4,49152
  809940:	1000031e 	bne	r2,zero,809950 <__hi0bits+0x40>
  809944:	2105883a 	add	r2,r4,r4
  809948:	18c00084 	addi	r3,r3,2
  80994c:	1089883a 	add	r4,r2,r2
  809950:	20000316 	blt	r4,zero,809960 <__hi0bits+0x50>
  809954:	2090002c 	andhi	r2,r4,16384
  809958:	10000626 	beq	r2,zero,809974 <__hi0bits+0x64>
  80995c:	18c00044 	addi	r3,r3,1
  809960:	1805883a 	mov	r2,r3
  809964:	f800283a 	ret
  809968:	2008943a 	slli	r4,r4,16
  80996c:	00c00404 	movi	r3,16
  809970:	003fea06 	br	80991c <__hi0bits+0xc>
  809974:	00c00804 	movi	r3,32
  809978:	1805883a 	mov	r2,r3
  80997c:	f800283a 	ret

00809980 <__lo0bits>:
  809980:	20c00017 	ldw	r3,0(r4)
  809984:	188001cc 	andi	r2,r3,7
  809988:	10000a26 	beq	r2,zero,8099b4 <__lo0bits+0x34>
  80998c:	1880004c 	andi	r2,r3,1
  809990:	1005003a 	cmpeq	r2,r2,zero
  809994:	10002126 	beq	r2,zero,809a1c <__lo0bits+0x9c>
  809998:	1880008c 	andi	r2,r3,2
  80999c:	1000251e 	bne	r2,zero,809a34 <__lo0bits+0xb4>
  8099a0:	1804d0ba 	srli	r2,r3,2
  8099a4:	01400084 	movi	r5,2
  8099a8:	20800015 	stw	r2,0(r4)
  8099ac:	2805883a 	mov	r2,r5
  8099b0:	f800283a 	ret
  8099b4:	18bfffcc 	andi	r2,r3,65535
  8099b8:	10001526 	beq	r2,zero,809a10 <__lo0bits+0x90>
  8099bc:	000b883a 	mov	r5,zero
  8099c0:	18803fcc 	andi	r2,r3,255
  8099c4:	1000021e 	bne	r2,zero,8099d0 <__lo0bits+0x50>
  8099c8:	1806d23a 	srli	r3,r3,8
  8099cc:	29400204 	addi	r5,r5,8
  8099d0:	188003cc 	andi	r2,r3,15
  8099d4:	1000021e 	bne	r2,zero,8099e0 <__lo0bits+0x60>
  8099d8:	1806d13a 	srli	r3,r3,4
  8099dc:	29400104 	addi	r5,r5,4
  8099e0:	188000cc 	andi	r2,r3,3
  8099e4:	1000021e 	bne	r2,zero,8099f0 <__lo0bits+0x70>
  8099e8:	1806d0ba 	srli	r3,r3,2
  8099ec:	29400084 	addi	r5,r5,2
  8099f0:	1880004c 	andi	r2,r3,1
  8099f4:	1000031e 	bne	r2,zero,809a04 <__lo0bits+0x84>
  8099f8:	1806d07a 	srli	r3,r3,1
  8099fc:	18000a26 	beq	r3,zero,809a28 <__lo0bits+0xa8>
  809a00:	29400044 	addi	r5,r5,1
  809a04:	2805883a 	mov	r2,r5
  809a08:	20c00015 	stw	r3,0(r4)
  809a0c:	f800283a 	ret
  809a10:	1806d43a 	srli	r3,r3,16
  809a14:	01400404 	movi	r5,16
  809a18:	003fe906 	br	8099c0 <__lo0bits+0x40>
  809a1c:	000b883a 	mov	r5,zero
  809a20:	2805883a 	mov	r2,r5
  809a24:	f800283a 	ret
  809a28:	01400804 	movi	r5,32
  809a2c:	2805883a 	mov	r2,r5
  809a30:	f800283a 	ret
  809a34:	1804d07a 	srli	r2,r3,1
  809a38:	01400044 	movi	r5,1
  809a3c:	20800015 	stw	r2,0(r4)
  809a40:	003fda06 	br	8099ac <__lo0bits+0x2c>

00809a44 <__mcmp>:
  809a44:	20800417 	ldw	r2,16(r4)
  809a48:	28c00417 	ldw	r3,16(r5)
  809a4c:	10cfc83a 	sub	r7,r2,r3
  809a50:	38000c1e 	bne	r7,zero,809a84 <__mcmp+0x40>
  809a54:	18c5883a 	add	r2,r3,r3
  809a58:	1085883a 	add	r2,r2,r2
  809a5c:	10c00504 	addi	r3,r2,20
  809a60:	21000504 	addi	r4,r4,20
  809a64:	28cb883a 	add	r5,r5,r3
  809a68:	2085883a 	add	r2,r4,r2
  809a6c:	10bfff04 	addi	r2,r2,-4
  809a70:	297fff04 	addi	r5,r5,-4
  809a74:	11800017 	ldw	r6,0(r2)
  809a78:	28c00017 	ldw	r3,0(r5)
  809a7c:	30c0031e 	bne	r6,r3,809a8c <__mcmp+0x48>
  809a80:	20bffa36 	bltu	r4,r2,809a6c <__mcmp+0x28>
  809a84:	3805883a 	mov	r2,r7
  809a88:	f800283a 	ret
  809a8c:	30c00336 	bltu	r6,r3,809a9c <__mcmp+0x58>
  809a90:	01c00044 	movi	r7,1
  809a94:	3805883a 	mov	r2,r7
  809a98:	f800283a 	ret
  809a9c:	01ffffc4 	movi	r7,-1
  809aa0:	003ff806 	br	809a84 <__mcmp+0x40>

00809aa4 <__ulp>:
  809aa4:	295ffc2c 	andhi	r5,r5,32752
  809aa8:	013f3034 	movhi	r4,64704
  809aac:	290b883a 	add	r5,r5,r4
  809ab0:	0145c83a 	sub	r2,zero,r5
  809ab4:	1007d53a 	srai	r3,r2,20
  809ab8:	000d883a 	mov	r6,zero
  809abc:	0140040e 	bge	zero,r5,809ad0 <__ulp+0x2c>
  809ac0:	280f883a 	mov	r7,r5
  809ac4:	3807883a 	mov	r3,r7
  809ac8:	3005883a 	mov	r2,r6
  809acc:	f800283a 	ret
  809ad0:	008004c4 	movi	r2,19
  809ad4:	193ffb04 	addi	r4,r3,-20
  809ad8:	10c00c0e 	bge	r2,r3,809b0c <__ulp+0x68>
  809adc:	008007c4 	movi	r2,31
  809ae0:	1107c83a 	sub	r3,r2,r4
  809ae4:	00800784 	movi	r2,30
  809ae8:	01400044 	movi	r5,1
  809aec:	11000216 	blt	r2,r4,809af8 <__ulp+0x54>
  809af0:	00800044 	movi	r2,1
  809af4:	10ca983a 	sll	r5,r2,r3
  809af8:	000f883a 	mov	r7,zero
  809afc:	280d883a 	mov	r6,r5
  809b00:	3807883a 	mov	r3,r7
  809b04:	3005883a 	mov	r2,r6
  809b08:	f800283a 	ret
  809b0c:	00800234 	movhi	r2,8
  809b10:	10cfd83a 	sra	r7,r2,r3
  809b14:	000d883a 	mov	r6,zero
  809b18:	3005883a 	mov	r2,r6
  809b1c:	3807883a 	mov	r3,r7
  809b20:	f800283a 	ret

00809b24 <__b2d>:
  809b24:	20800417 	ldw	r2,16(r4)
  809b28:	defff904 	addi	sp,sp,-28
  809b2c:	dd000415 	stw	r20,16(sp)
  809b30:	1085883a 	add	r2,r2,r2
  809b34:	25000504 	addi	r20,r4,20
  809b38:	1085883a 	add	r2,r2,r2
  809b3c:	dc000015 	stw	r16,0(sp)
  809b40:	a0a1883a 	add	r16,r20,r2
  809b44:	dd400515 	stw	r21,20(sp)
  809b48:	857fff17 	ldw	r21,-4(r16)
  809b4c:	dc400115 	stw	r17,4(sp)
  809b50:	dfc00615 	stw	ra,24(sp)
  809b54:	a809883a 	mov	r4,r21
  809b58:	2823883a 	mov	r17,r5
  809b5c:	dcc00315 	stw	r19,12(sp)
  809b60:	dc800215 	stw	r18,8(sp)
  809b64:	08099100 	call	809910 <__hi0bits>
  809b68:	100b883a 	mov	r5,r2
  809b6c:	00800804 	movi	r2,32
  809b70:	1145c83a 	sub	r2,r2,r5
  809b74:	88800015 	stw	r2,0(r17)
  809b78:	00800284 	movi	r2,10
  809b7c:	80ffff04 	addi	r3,r16,-4
  809b80:	11401416 	blt	r2,r5,809bd4 <__b2d+0xb0>
  809b84:	008002c4 	movi	r2,11
  809b88:	1149c83a 	sub	r4,r2,r5
  809b8c:	a0c02736 	bltu	r20,r3,809c2c <__b2d+0x108>
  809b90:	000d883a 	mov	r6,zero
  809b94:	28800544 	addi	r2,r5,21
  809b98:	a906d83a 	srl	r3,r21,r4
  809b9c:	a884983a 	sll	r2,r21,r2
  809ba0:	1ccffc34 	orhi	r19,r3,16368
  809ba4:	11a4b03a 	or	r18,r2,r6
  809ba8:	9005883a 	mov	r2,r18
  809bac:	9807883a 	mov	r3,r19
  809bb0:	dfc00617 	ldw	ra,24(sp)
  809bb4:	dd400517 	ldw	r21,20(sp)
  809bb8:	dd000417 	ldw	r20,16(sp)
  809bbc:	dcc00317 	ldw	r19,12(sp)
  809bc0:	dc800217 	ldw	r18,8(sp)
  809bc4:	dc400117 	ldw	r17,4(sp)
  809bc8:	dc000017 	ldw	r16,0(sp)
  809bcc:	dec00704 	addi	sp,sp,28
  809bd0:	f800283a 	ret
  809bd4:	a0c00e36 	bltu	r20,r3,809c10 <__b2d+0xec>
  809bd8:	293ffd44 	addi	r4,r5,-11
  809bdc:	000d883a 	mov	r6,zero
  809be0:	20000f26 	beq	r4,zero,809c20 <__b2d+0xfc>
  809be4:	00800804 	movi	r2,32
  809be8:	110bc83a 	sub	r5,r2,r4
  809bec:	a0c01236 	bltu	r20,r3,809c38 <__b2d+0x114>
  809bf0:	000f883a 	mov	r7,zero
  809bf4:	a904983a 	sll	r2,r21,r4
  809bf8:	3146d83a 	srl	r3,r6,r5
  809bfc:	3108983a 	sll	r4,r6,r4
  809c00:	108ffc34 	orhi	r2,r2,16368
  809c04:	18a6b03a 	or	r19,r3,r2
  809c08:	3924b03a 	or	r18,r7,r4
  809c0c:	003fe606 	br	809ba8 <__b2d+0x84>
  809c10:	293ffd44 	addi	r4,r5,-11
  809c14:	81bffe17 	ldw	r6,-8(r16)
  809c18:	80fffe04 	addi	r3,r16,-8
  809c1c:	203ff11e 	bne	r4,zero,809be4 <__b2d+0xc0>
  809c20:	accffc34 	orhi	r19,r21,16368
  809c24:	3025883a 	mov	r18,r6
  809c28:	003fdf06 	br	809ba8 <__b2d+0x84>
  809c2c:	18bfff17 	ldw	r2,-4(r3)
  809c30:	110cd83a 	srl	r6,r2,r4
  809c34:	003fd706 	br	809b94 <__b2d+0x70>
  809c38:	18bfff17 	ldw	r2,-4(r3)
  809c3c:	114ed83a 	srl	r7,r2,r5
  809c40:	003fec06 	br	809bf4 <__b2d+0xd0>

00809c44 <__ratio>:
  809c44:	defff904 	addi	sp,sp,-28
  809c48:	dc400215 	stw	r17,8(sp)
  809c4c:	2823883a 	mov	r17,r5
  809c50:	d80b883a 	mov	r5,sp
  809c54:	dfc00615 	stw	ra,24(sp)
  809c58:	dd000515 	stw	r20,20(sp)
  809c5c:	dcc00415 	stw	r19,16(sp)
  809c60:	dc800315 	stw	r18,12(sp)
  809c64:	2025883a 	mov	r18,r4
  809c68:	0809b240 	call	809b24 <__b2d>
  809c6c:	8809883a 	mov	r4,r17
  809c70:	d9400104 	addi	r5,sp,4
  809c74:	1027883a 	mov	r19,r2
  809c78:	1829883a 	mov	r20,r3
  809c7c:	0809b240 	call	809b24 <__b2d>
  809c80:	89000417 	ldw	r4,16(r17)
  809c84:	91c00417 	ldw	r7,16(r18)
  809c88:	d9800117 	ldw	r6,4(sp)
  809c8c:	180b883a 	mov	r5,r3
  809c90:	390fc83a 	sub	r7,r7,r4
  809c94:	1009883a 	mov	r4,r2
  809c98:	d8800017 	ldw	r2,0(sp)
  809c9c:	380e917a 	slli	r7,r7,5
  809ca0:	2011883a 	mov	r8,r4
  809ca4:	1185c83a 	sub	r2,r2,r6
  809ca8:	11c5883a 	add	r2,r2,r7
  809cac:	1006953a 	slli	r3,r2,20
  809cb0:	2813883a 	mov	r9,r5
  809cb4:	00800d0e 	bge	zero,r2,809cec <__ratio+0xa8>
  809cb8:	1d29883a 	add	r20,r3,r20
  809cbc:	a00b883a 	mov	r5,r20
  809cc0:	480f883a 	mov	r7,r9
  809cc4:	9809883a 	mov	r4,r19
  809cc8:	400d883a 	mov	r6,r8
  809ccc:	080f2400 	call	80f240 <__divdf3>
  809cd0:	dfc00617 	ldw	ra,24(sp)
  809cd4:	dd000517 	ldw	r20,20(sp)
  809cd8:	dcc00417 	ldw	r19,16(sp)
  809cdc:	dc800317 	ldw	r18,12(sp)
  809ce0:	dc400217 	ldw	r17,8(sp)
  809ce4:	dec00704 	addi	sp,sp,28
  809ce8:	f800283a 	ret
  809cec:	28d3c83a 	sub	r9,r5,r3
  809cf0:	003ff206 	br	809cbc <__ratio+0x78>

00809cf4 <_mprec_log10>:
  809cf4:	defffe04 	addi	sp,sp,-8
  809cf8:	008005c4 	movi	r2,23
  809cfc:	dc000015 	stw	r16,0(sp)
  809d00:	dfc00115 	stw	ra,4(sp)
  809d04:	2021883a 	mov	r16,r4
  809d08:	11000c16 	blt	r2,r4,809d3c <_mprec_log10+0x48>
  809d0c:	200490fa 	slli	r2,r4,3
  809d10:	00c02074 	movhi	r3,129
  809d14:	18d44204 	addi	r3,r3,20744
  809d18:	10c5883a 	add	r2,r2,r3
  809d1c:	12400117 	ldw	r9,4(r2)
  809d20:	12000017 	ldw	r8,0(r2)
  809d24:	4807883a 	mov	r3,r9
  809d28:	4005883a 	mov	r2,r8
  809d2c:	dfc00117 	ldw	ra,4(sp)
  809d30:	dc000017 	ldw	r16,0(sp)
  809d34:	dec00204 	addi	sp,sp,8
  809d38:	f800283a 	ret
  809d3c:	0011883a 	mov	r8,zero
  809d40:	024ffc34 	movhi	r9,16368
  809d44:	0005883a 	mov	r2,zero
  809d48:	00d00934 	movhi	r3,16420
  809d4c:	480b883a 	mov	r5,r9
  809d50:	4009883a 	mov	r4,r8
  809d54:	180f883a 	mov	r7,r3
  809d58:	100d883a 	mov	r6,r2
  809d5c:	080ee7c0 	call	80ee7c <__muldf3>
  809d60:	843fffc4 	addi	r16,r16,-1
  809d64:	1011883a 	mov	r8,r2
  809d68:	1813883a 	mov	r9,r3
  809d6c:	803ff51e 	bne	r16,zero,809d44 <_mprec_log10+0x50>
  809d70:	4005883a 	mov	r2,r8
  809d74:	4807883a 	mov	r3,r9
  809d78:	dfc00117 	ldw	ra,4(sp)
  809d7c:	dc000017 	ldw	r16,0(sp)
  809d80:	dec00204 	addi	sp,sp,8
  809d84:	f800283a 	ret

00809d88 <__copybits>:
  809d88:	297fffc4 	addi	r5,r5,-1
  809d8c:	30800417 	ldw	r2,16(r6)
  809d90:	280bd17a 	srai	r5,r5,5
  809d94:	31800504 	addi	r6,r6,20
  809d98:	1085883a 	add	r2,r2,r2
  809d9c:	294b883a 	add	r5,r5,r5
  809da0:	294b883a 	add	r5,r5,r5
  809da4:	1085883a 	add	r2,r2,r2
  809da8:	290b883a 	add	r5,r5,r4
  809dac:	3087883a 	add	r3,r6,r2
  809db0:	29400104 	addi	r5,r5,4
  809db4:	30c0052e 	bgeu	r6,r3,809dcc <__copybits+0x44>
  809db8:	30800017 	ldw	r2,0(r6)
  809dbc:	31800104 	addi	r6,r6,4
  809dc0:	20800015 	stw	r2,0(r4)
  809dc4:	21000104 	addi	r4,r4,4
  809dc8:	30fffb36 	bltu	r6,r3,809db8 <__copybits+0x30>
  809dcc:	2140032e 	bgeu	r4,r5,809ddc <__copybits+0x54>
  809dd0:	20000015 	stw	zero,0(r4)
  809dd4:	21000104 	addi	r4,r4,4
  809dd8:	217ffd36 	bltu	r4,r5,809dd0 <__copybits+0x48>
  809ddc:	f800283a 	ret

00809de0 <__any_on>:
  809de0:	20800417 	ldw	r2,16(r4)
  809de4:	2807d17a 	srai	r3,r5,5
  809de8:	21000504 	addi	r4,r4,20
  809dec:	10c00d0e 	bge	r2,r3,809e24 <__any_on+0x44>
  809df0:	1085883a 	add	r2,r2,r2
  809df4:	1085883a 	add	r2,r2,r2
  809df8:	208d883a 	add	r6,r4,r2
  809dfc:	2180182e 	bgeu	r4,r6,809e60 <__any_on+0x80>
  809e00:	30bfff17 	ldw	r2,-4(r6)
  809e04:	30ffff04 	addi	r3,r6,-4
  809e08:	1000041e 	bne	r2,zero,809e1c <__any_on+0x3c>
  809e0c:	20c0142e 	bgeu	r4,r3,809e60 <__any_on+0x80>
  809e10:	18ffff04 	addi	r3,r3,-4
  809e14:	18800017 	ldw	r2,0(r3)
  809e18:	103ffc26 	beq	r2,zero,809e0c <__any_on+0x2c>
  809e1c:	00800044 	movi	r2,1
  809e20:	f800283a 	ret
  809e24:	18800a0e 	bge	r3,r2,809e50 <__any_on+0x70>
  809e28:	294007cc 	andi	r5,r5,31
  809e2c:	28000826 	beq	r5,zero,809e50 <__any_on+0x70>
  809e30:	18c5883a 	add	r2,r3,r3
  809e34:	1085883a 	add	r2,r2,r2
  809e38:	208d883a 	add	r6,r4,r2
  809e3c:	30c00017 	ldw	r3,0(r6)
  809e40:	1944d83a 	srl	r2,r3,r5
  809e44:	1144983a 	sll	r2,r2,r5
  809e48:	18bff41e 	bne	r3,r2,809e1c <__any_on+0x3c>
  809e4c:	003feb06 	br	809dfc <__any_on+0x1c>
  809e50:	18c5883a 	add	r2,r3,r3
  809e54:	1085883a 	add	r2,r2,r2
  809e58:	208d883a 	add	r6,r4,r2
  809e5c:	003fe706 	br	809dfc <__any_on+0x1c>
  809e60:	0005883a 	mov	r2,zero
  809e64:	f800283a 	ret

00809e68 <_Balloc>:
  809e68:	20c01317 	ldw	r3,76(r4)
  809e6c:	defffb04 	addi	sp,sp,-20
  809e70:	dcc00315 	stw	r19,12(sp)
  809e74:	dc800215 	stw	r18,8(sp)
  809e78:	dfc00415 	stw	ra,16(sp)
  809e7c:	2825883a 	mov	r18,r5
  809e80:	dc400115 	stw	r17,4(sp)
  809e84:	dc000015 	stw	r16,0(sp)
  809e88:	2027883a 	mov	r19,r4
  809e8c:	01800404 	movi	r6,16
  809e90:	01400104 	movi	r5,4
  809e94:	18001726 	beq	r3,zero,809ef4 <_Balloc+0x8c>
  809e98:	01400044 	movi	r5,1
  809e9c:	9485883a 	add	r2,r18,r18
  809ea0:	2ca2983a 	sll	r17,r5,r18
  809ea4:	1085883a 	add	r2,r2,r2
  809ea8:	10c7883a 	add	r3,r2,r3
  809eac:	1c000017 	ldw	r16,0(r3)
  809eb0:	8c4d883a 	add	r6,r17,r17
  809eb4:	318d883a 	add	r6,r6,r6
  809eb8:	9809883a 	mov	r4,r19
  809ebc:	31800504 	addi	r6,r6,20
  809ec0:	80001226 	beq	r16,zero,809f0c <_Balloc+0xa4>
  809ec4:	80800017 	ldw	r2,0(r16)
  809ec8:	18800015 	stw	r2,0(r3)
  809ecc:	80000415 	stw	zero,16(r16)
  809ed0:	80000315 	stw	zero,12(r16)
  809ed4:	8005883a 	mov	r2,r16
  809ed8:	dfc00417 	ldw	ra,16(sp)
  809edc:	dcc00317 	ldw	r19,12(sp)
  809ee0:	dc800217 	ldw	r18,8(sp)
  809ee4:	dc400117 	ldw	r17,4(sp)
  809ee8:	dc000017 	ldw	r16,0(sp)
  809eec:	dec00504 	addi	sp,sp,20
  809ef0:	f800283a 	ret
  809ef4:	080cf0c0 	call	80cf0c <_calloc_r>
  809ef8:	1007883a 	mov	r3,r2
  809efc:	0021883a 	mov	r16,zero
  809f00:	98801315 	stw	r2,76(r19)
  809f04:	103fe41e 	bne	r2,zero,809e98 <_Balloc+0x30>
  809f08:	003ff206 	br	809ed4 <_Balloc+0x6c>
  809f0c:	080cf0c0 	call	80cf0c <_calloc_r>
  809f10:	103ff026 	beq	r2,zero,809ed4 <_Balloc+0x6c>
  809f14:	1021883a 	mov	r16,r2
  809f18:	14800115 	stw	r18,4(r2)
  809f1c:	14400215 	stw	r17,8(r2)
  809f20:	003fea06 	br	809ecc <_Balloc+0x64>

00809f24 <__d2b>:
  809f24:	defff504 	addi	sp,sp,-44
  809f28:	dcc00515 	stw	r19,20(sp)
  809f2c:	04c00044 	movi	r19,1
  809f30:	dc000215 	stw	r16,8(sp)
  809f34:	2821883a 	mov	r16,r5
  809f38:	980b883a 	mov	r5,r19
  809f3c:	ddc00915 	stw	r23,36(sp)
  809f40:	dd800815 	stw	r22,32(sp)
  809f44:	dd400715 	stw	r21,28(sp)
  809f48:	dd000615 	stw	r20,24(sp)
  809f4c:	dc800415 	stw	r18,16(sp)
  809f50:	dc400315 	stw	r17,12(sp)
  809f54:	dfc00a15 	stw	ra,40(sp)
  809f58:	3023883a 	mov	r17,r6
  809f5c:	382d883a 	mov	r22,r7
  809f60:	ddc00b17 	ldw	r23,44(sp)
  809f64:	0809e680 	call	809e68 <_Balloc>
  809f68:	1025883a 	mov	r18,r2
  809f6c:	00a00034 	movhi	r2,32768
  809f70:	10bfffc4 	addi	r2,r2,-1
  809f74:	8888703a 	and	r4,r17,r2
  809f78:	202ad53a 	srli	r21,r4,20
  809f7c:	00800434 	movhi	r2,16
  809f80:	10bfffc4 	addi	r2,r2,-1
  809f84:	8886703a 	and	r3,r17,r2
  809f88:	a829003a 	cmpeq	r20,r21,zero
  809f8c:	800b883a 	mov	r5,r16
  809f90:	d8c00115 	stw	r3,4(sp)
  809f94:	94000504 	addi	r16,r18,20
  809f98:	a000021e 	bne	r20,zero,809fa4 <__d2b+0x80>
  809f9c:	18c00434 	orhi	r3,r3,16
  809fa0:	d8c00115 	stw	r3,4(sp)
  809fa4:	28002726 	beq	r5,zero,80a044 <__d2b+0x120>
  809fa8:	d809883a 	mov	r4,sp
  809fac:	d9400015 	stw	r5,0(sp)
  809fb0:	08099800 	call	809980 <__lo0bits>
  809fb4:	100d883a 	mov	r6,r2
  809fb8:	10003526 	beq	r2,zero,80a090 <__d2b+0x16c>
  809fbc:	d8c00117 	ldw	r3,4(sp)
  809fc0:	00800804 	movi	r2,32
  809fc4:	1185c83a 	sub	r2,r2,r6
  809fc8:	d9000017 	ldw	r4,0(sp)
  809fcc:	1886983a 	sll	r3,r3,r2
  809fd0:	1906b03a 	or	r3,r3,r4
  809fd4:	90c00515 	stw	r3,20(r18)
  809fd8:	d8c00117 	ldw	r3,4(sp)
  809fdc:	1986d83a 	srl	r3,r3,r6
  809fe0:	d8c00115 	stw	r3,4(sp)
  809fe4:	180b003a 	cmpeq	r5,r3,zero
  809fe8:	00800084 	movi	r2,2
  809fec:	114bc83a 	sub	r5,r2,r5
  809ff0:	80c00115 	stw	r3,4(r16)
  809ff4:	91400415 	stw	r5,16(r18)
  809ff8:	a0001a1e 	bne	r20,zero,80a064 <__d2b+0x140>
  809ffc:	3545883a 	add	r2,r6,r21
  80a000:	10bef344 	addi	r2,r2,-1075
  80a004:	00c00d44 	movi	r3,53
  80a008:	b0800015 	stw	r2,0(r22)
  80a00c:	1987c83a 	sub	r3,r3,r6
  80a010:	b8c00015 	stw	r3,0(r23)
  80a014:	9005883a 	mov	r2,r18
  80a018:	dfc00a17 	ldw	ra,40(sp)
  80a01c:	ddc00917 	ldw	r23,36(sp)
  80a020:	dd800817 	ldw	r22,32(sp)
  80a024:	dd400717 	ldw	r21,28(sp)
  80a028:	dd000617 	ldw	r20,24(sp)
  80a02c:	dcc00517 	ldw	r19,20(sp)
  80a030:	dc800417 	ldw	r18,16(sp)
  80a034:	dc400317 	ldw	r17,12(sp)
  80a038:	dc000217 	ldw	r16,8(sp)
  80a03c:	dec00b04 	addi	sp,sp,44
  80a040:	f800283a 	ret
  80a044:	d9000104 	addi	r4,sp,4
  80a048:	08099800 	call	809980 <__lo0bits>
  80a04c:	11800804 	addi	r6,r2,32
  80a050:	d8800117 	ldw	r2,4(sp)
  80a054:	94c00415 	stw	r19,16(r18)
  80a058:	980b883a 	mov	r5,r19
  80a05c:	90800515 	stw	r2,20(r18)
  80a060:	a03fe626 	beq	r20,zero,809ffc <__d2b+0xd8>
  80a064:	2945883a 	add	r2,r5,r5
  80a068:	1085883a 	add	r2,r2,r2
  80a06c:	1405883a 	add	r2,r2,r16
  80a070:	113fff17 	ldw	r4,-4(r2)
  80a074:	30fef384 	addi	r3,r6,-1074
  80a078:	2820917a 	slli	r16,r5,5
  80a07c:	b0c00015 	stw	r3,0(r22)
  80a080:	08099100 	call	809910 <__hi0bits>
  80a084:	80a1c83a 	sub	r16,r16,r2
  80a088:	bc000015 	stw	r16,0(r23)
  80a08c:	003fe106 	br	80a014 <__d2b+0xf0>
  80a090:	d8800017 	ldw	r2,0(sp)
  80a094:	90800515 	stw	r2,20(r18)
  80a098:	d8c00117 	ldw	r3,4(sp)
  80a09c:	003fd106 	br	809fe4 <__d2b+0xc0>

0080a0a0 <__mdiff>:
  80a0a0:	defffb04 	addi	sp,sp,-20
  80a0a4:	dc000015 	stw	r16,0(sp)
  80a0a8:	2821883a 	mov	r16,r5
  80a0ac:	dc800215 	stw	r18,8(sp)
  80a0b0:	300b883a 	mov	r5,r6
  80a0b4:	2025883a 	mov	r18,r4
  80a0b8:	8009883a 	mov	r4,r16
  80a0bc:	dc400115 	stw	r17,4(sp)
  80a0c0:	dfc00415 	stw	ra,16(sp)
  80a0c4:	dcc00315 	stw	r19,12(sp)
  80a0c8:	3023883a 	mov	r17,r6
  80a0cc:	0809a440 	call	809a44 <__mcmp>
  80a0d0:	10004226 	beq	r2,zero,80a1dc <__mdiff+0x13c>
  80a0d4:	10005016 	blt	r2,zero,80a218 <__mdiff+0x178>
  80a0d8:	0027883a 	mov	r19,zero
  80a0dc:	81400117 	ldw	r5,4(r16)
  80a0e0:	9009883a 	mov	r4,r18
  80a0e4:	0809e680 	call	809e68 <_Balloc>
  80a0e8:	1019883a 	mov	r12,r2
  80a0ec:	82800417 	ldw	r10,16(r16)
  80a0f0:	88800417 	ldw	r2,16(r17)
  80a0f4:	81800504 	addi	r6,r16,20
  80a0f8:	5287883a 	add	r3,r10,r10
  80a0fc:	1085883a 	add	r2,r2,r2
  80a100:	18c7883a 	add	r3,r3,r3
  80a104:	1085883a 	add	r2,r2,r2
  80a108:	8a000504 	addi	r8,r17,20
  80a10c:	64c00315 	stw	r19,12(r12)
  80a110:	30db883a 	add	r13,r6,r3
  80a114:	4097883a 	add	r11,r8,r2
  80a118:	61c00504 	addi	r7,r12,20
  80a11c:	0013883a 	mov	r9,zero
  80a120:	31000017 	ldw	r4,0(r6)
  80a124:	41400017 	ldw	r5,0(r8)
  80a128:	42000104 	addi	r8,r8,4
  80a12c:	20bfffcc 	andi	r2,r4,65535
  80a130:	28ffffcc 	andi	r3,r5,65535
  80a134:	10c5c83a 	sub	r2,r2,r3
  80a138:	1245883a 	add	r2,r2,r9
  80a13c:	2008d43a 	srli	r4,r4,16
  80a140:	280ad43a 	srli	r5,r5,16
  80a144:	1007d43a 	srai	r3,r2,16
  80a148:	3880000d 	sth	r2,0(r7)
  80a14c:	2149c83a 	sub	r4,r4,r5
  80a150:	20c9883a 	add	r4,r4,r3
  80a154:	3900008d 	sth	r4,2(r7)
  80a158:	31800104 	addi	r6,r6,4
  80a15c:	39c00104 	addi	r7,r7,4
  80a160:	2013d43a 	srai	r9,r4,16
  80a164:	42ffee36 	bltu	r8,r11,80a120 <__mdiff+0x80>
  80a168:	33400c2e 	bgeu	r6,r13,80a19c <__mdiff+0xfc>
  80a16c:	30800017 	ldw	r2,0(r6)
  80a170:	31800104 	addi	r6,r6,4
  80a174:	10ffffcc 	andi	r3,r2,65535
  80a178:	1a47883a 	add	r3,r3,r9
  80a17c:	1004d43a 	srli	r2,r2,16
  80a180:	1809d43a 	srai	r4,r3,16
  80a184:	38c0000d 	sth	r3,0(r7)
  80a188:	1105883a 	add	r2,r2,r4
  80a18c:	3880008d 	sth	r2,2(r7)
  80a190:	1013d43a 	srai	r9,r2,16
  80a194:	39c00104 	addi	r7,r7,4
  80a198:	337ff436 	bltu	r6,r13,80a16c <__mdiff+0xcc>
  80a19c:	38bfff17 	ldw	r2,-4(r7)
  80a1a0:	38ffff04 	addi	r3,r7,-4
  80a1a4:	1000041e 	bne	r2,zero,80a1b8 <__mdiff+0x118>
  80a1a8:	18ffff04 	addi	r3,r3,-4
  80a1ac:	18800017 	ldw	r2,0(r3)
  80a1b0:	52bfffc4 	addi	r10,r10,-1
  80a1b4:	103ffc26 	beq	r2,zero,80a1a8 <__mdiff+0x108>
  80a1b8:	6005883a 	mov	r2,r12
  80a1bc:	62800415 	stw	r10,16(r12)
  80a1c0:	dfc00417 	ldw	ra,16(sp)
  80a1c4:	dcc00317 	ldw	r19,12(sp)
  80a1c8:	dc800217 	ldw	r18,8(sp)
  80a1cc:	dc400117 	ldw	r17,4(sp)
  80a1d0:	dc000017 	ldw	r16,0(sp)
  80a1d4:	dec00504 	addi	sp,sp,20
  80a1d8:	f800283a 	ret
  80a1dc:	9009883a 	mov	r4,r18
  80a1e0:	000b883a 	mov	r5,zero
  80a1e4:	0809e680 	call	809e68 <_Balloc>
  80a1e8:	1019883a 	mov	r12,r2
  80a1ec:	00800044 	movi	r2,1
  80a1f0:	60800415 	stw	r2,16(r12)
  80a1f4:	6005883a 	mov	r2,r12
  80a1f8:	60000515 	stw	zero,20(r12)
  80a1fc:	dfc00417 	ldw	ra,16(sp)
  80a200:	dcc00317 	ldw	r19,12(sp)
  80a204:	dc800217 	ldw	r18,8(sp)
  80a208:	dc400117 	ldw	r17,4(sp)
  80a20c:	dc000017 	ldw	r16,0(sp)
  80a210:	dec00504 	addi	sp,sp,20
  80a214:	f800283a 	ret
  80a218:	880d883a 	mov	r6,r17
  80a21c:	04c00044 	movi	r19,1
  80a220:	8023883a 	mov	r17,r16
  80a224:	3021883a 	mov	r16,r6
  80a228:	003fac06 	br	80a0dc <__mdiff+0x3c>

0080a22c <__lshift>:
  80a22c:	defff904 	addi	sp,sp,-28
  80a230:	28800417 	ldw	r2,16(r5)
  80a234:	dc000015 	stw	r16,0(sp)
  80a238:	3021d17a 	srai	r16,r6,5
  80a23c:	28c00217 	ldw	r3,8(r5)
  80a240:	10800044 	addi	r2,r2,1
  80a244:	dc400115 	stw	r17,4(sp)
  80a248:	80a3883a 	add	r17,r16,r2
  80a24c:	dd400515 	stw	r21,20(sp)
  80a250:	dd000415 	stw	r20,16(sp)
  80a254:	dc800215 	stw	r18,8(sp)
  80a258:	dfc00615 	stw	ra,24(sp)
  80a25c:	2825883a 	mov	r18,r5
  80a260:	dcc00315 	stw	r19,12(sp)
  80a264:	3029883a 	mov	r20,r6
  80a268:	202b883a 	mov	r21,r4
  80a26c:	29400117 	ldw	r5,4(r5)
  80a270:	1c40030e 	bge	r3,r17,80a280 <__lshift+0x54>
  80a274:	18c7883a 	add	r3,r3,r3
  80a278:	29400044 	addi	r5,r5,1
  80a27c:	1c7ffd16 	blt	r3,r17,80a274 <__lshift+0x48>
  80a280:	a809883a 	mov	r4,r21
  80a284:	0809e680 	call	809e68 <_Balloc>
  80a288:	1027883a 	mov	r19,r2
  80a28c:	11400504 	addi	r5,r2,20
  80a290:	0400090e 	bge	zero,r16,80a2b8 <__lshift+0x8c>
  80a294:	2805883a 	mov	r2,r5
  80a298:	0007883a 	mov	r3,zero
  80a29c:	18c00044 	addi	r3,r3,1
  80a2a0:	10000015 	stw	zero,0(r2)
  80a2a4:	10800104 	addi	r2,r2,4
  80a2a8:	80fffc1e 	bne	r16,r3,80a29c <__lshift+0x70>
  80a2ac:	8405883a 	add	r2,r16,r16
  80a2b0:	1085883a 	add	r2,r2,r2
  80a2b4:	288b883a 	add	r5,r5,r2
  80a2b8:	90800417 	ldw	r2,16(r18)
  80a2bc:	91000504 	addi	r4,r18,20
  80a2c0:	a18007cc 	andi	r6,r20,31
  80a2c4:	1085883a 	add	r2,r2,r2
  80a2c8:	1085883a 	add	r2,r2,r2
  80a2cc:	208f883a 	add	r7,r4,r2
  80a2d0:	30001e26 	beq	r6,zero,80a34c <__lshift+0x120>
  80a2d4:	00800804 	movi	r2,32
  80a2d8:	1191c83a 	sub	r8,r2,r6
  80a2dc:	0007883a 	mov	r3,zero
  80a2e0:	20800017 	ldw	r2,0(r4)
  80a2e4:	1184983a 	sll	r2,r2,r6
  80a2e8:	1884b03a 	or	r2,r3,r2
  80a2ec:	28800015 	stw	r2,0(r5)
  80a2f0:	20c00017 	ldw	r3,0(r4)
  80a2f4:	21000104 	addi	r4,r4,4
  80a2f8:	29400104 	addi	r5,r5,4
  80a2fc:	1a06d83a 	srl	r3,r3,r8
  80a300:	21fff736 	bltu	r4,r7,80a2e0 <__lshift+0xb4>
  80a304:	28c00015 	stw	r3,0(r5)
  80a308:	18000126 	beq	r3,zero,80a310 <__lshift+0xe4>
  80a30c:	8c400044 	addi	r17,r17,1
  80a310:	88bfffc4 	addi	r2,r17,-1
  80a314:	98800415 	stw	r2,16(r19)
  80a318:	a809883a 	mov	r4,r21
  80a31c:	900b883a 	mov	r5,r18
  80a320:	08098e80 	call	8098e8 <_Bfree>
  80a324:	9805883a 	mov	r2,r19
  80a328:	dfc00617 	ldw	ra,24(sp)
  80a32c:	dd400517 	ldw	r21,20(sp)
  80a330:	dd000417 	ldw	r20,16(sp)
  80a334:	dcc00317 	ldw	r19,12(sp)
  80a338:	dc800217 	ldw	r18,8(sp)
  80a33c:	dc400117 	ldw	r17,4(sp)
  80a340:	dc000017 	ldw	r16,0(sp)
  80a344:	dec00704 	addi	sp,sp,28
  80a348:	f800283a 	ret
  80a34c:	20800017 	ldw	r2,0(r4)
  80a350:	21000104 	addi	r4,r4,4
  80a354:	28800015 	stw	r2,0(r5)
  80a358:	29400104 	addi	r5,r5,4
  80a35c:	21ffec2e 	bgeu	r4,r7,80a310 <__lshift+0xe4>
  80a360:	20800017 	ldw	r2,0(r4)
  80a364:	21000104 	addi	r4,r4,4
  80a368:	28800015 	stw	r2,0(r5)
  80a36c:	29400104 	addi	r5,r5,4
  80a370:	21fff636 	bltu	r4,r7,80a34c <__lshift+0x120>
  80a374:	003fe606 	br	80a310 <__lshift+0xe4>

0080a378 <__multiply>:
  80a378:	defff904 	addi	sp,sp,-28
  80a37c:	dcc00315 	stw	r19,12(sp)
  80a380:	dc800215 	stw	r18,8(sp)
  80a384:	2cc00417 	ldw	r19,16(r5)
  80a388:	34800417 	ldw	r18,16(r6)
  80a38c:	dd000415 	stw	r20,16(sp)
  80a390:	dc400115 	stw	r17,4(sp)
  80a394:	dfc00615 	stw	ra,24(sp)
  80a398:	dd400515 	stw	r21,20(sp)
  80a39c:	dc000015 	stw	r16,0(sp)
  80a3a0:	2823883a 	mov	r17,r5
  80a3a4:	3029883a 	mov	r20,r6
  80a3a8:	9c80040e 	bge	r19,r18,80a3bc <__multiply+0x44>
  80a3ac:	9027883a 	mov	r19,r18
  80a3b0:	2c800417 	ldw	r18,16(r5)
  80a3b4:	2829883a 	mov	r20,r5
  80a3b8:	3023883a 	mov	r17,r6
  80a3bc:	88800217 	ldw	r2,8(r17)
  80a3c0:	9ca1883a 	add	r16,r19,r18
  80a3c4:	89400117 	ldw	r5,4(r17)
  80a3c8:	1400010e 	bge	r2,r16,80a3d0 <__multiply+0x58>
  80a3cc:	29400044 	addi	r5,r5,1
  80a3d0:	0809e680 	call	809e68 <_Balloc>
  80a3d4:	102b883a 	mov	r21,r2
  80a3d8:	8405883a 	add	r2,r16,r16
  80a3dc:	1085883a 	add	r2,r2,r2
  80a3e0:	a9000504 	addi	r4,r21,20
  80a3e4:	209d883a 	add	r14,r4,r2
  80a3e8:	2380042e 	bgeu	r4,r14,80a3fc <__multiply+0x84>
  80a3ec:	2005883a 	mov	r2,r4
  80a3f0:	10000015 	stw	zero,0(r2)
  80a3f4:	10800104 	addi	r2,r2,4
  80a3f8:	13bffd36 	bltu	r2,r14,80a3f0 <__multiply+0x78>
  80a3fc:	9485883a 	add	r2,r18,r18
  80a400:	9cc7883a 	add	r3,r19,r19
  80a404:	a1800504 	addi	r6,r20,20
  80a408:	1085883a 	add	r2,r2,r2
  80a40c:	8b400504 	addi	r13,r17,20
  80a410:	18c7883a 	add	r3,r3,r3
  80a414:	309f883a 	add	r15,r6,r2
  80a418:	68d7883a 	add	r11,r13,r3
  80a41c:	33c03b2e 	bgeu	r6,r15,80a50c <__multiply+0x194>
  80a420:	2019883a 	mov	r12,r4
  80a424:	30800017 	ldw	r2,0(r6)
  80a428:	127fffcc 	andi	r9,r2,65535
  80a42c:	48001826 	beq	r9,zero,80a490 <__multiply+0x118>
  80a430:	6811883a 	mov	r8,r13
  80a434:	600f883a 	mov	r7,r12
  80a438:	0015883a 	mov	r10,zero
  80a43c:	40c00017 	ldw	r3,0(r8)
  80a440:	39400017 	ldw	r5,0(r7)
  80a444:	42000104 	addi	r8,r8,4
  80a448:	193fffcc 	andi	r4,r3,65535
  80a44c:	4909383a 	mul	r4,r9,r4
  80a450:	1806d43a 	srli	r3,r3,16
  80a454:	28bfffcc 	andi	r2,r5,65535
  80a458:	5085883a 	add	r2,r10,r2
  80a45c:	2089883a 	add	r4,r4,r2
  80a460:	48c7383a 	mul	r3,r9,r3
  80a464:	280ad43a 	srli	r5,r5,16
  80a468:	2004d43a 	srli	r2,r4,16
  80a46c:	3900000d 	sth	r4,0(r7)
  80a470:	1947883a 	add	r3,r3,r5
  80a474:	10c5883a 	add	r2,r2,r3
  80a478:	3880008d 	sth	r2,2(r7)
  80a47c:	1014d43a 	srli	r10,r2,16
  80a480:	39c00104 	addi	r7,r7,4
  80a484:	42ffed36 	bltu	r8,r11,80a43c <__multiply+0xc4>
  80a488:	3a800015 	stw	r10,0(r7)
  80a48c:	30800017 	ldw	r2,0(r6)
  80a490:	1012d43a 	srli	r9,r2,16
  80a494:	48001926 	beq	r9,zero,80a4fc <__multiply+0x184>
  80a498:	60800017 	ldw	r2,0(r12)
  80a49c:	6811883a 	mov	r8,r13
  80a4a0:	600f883a 	mov	r7,r12
  80a4a4:	0015883a 	mov	r10,zero
  80a4a8:	100b883a 	mov	r5,r2
  80a4ac:	41000017 	ldw	r4,0(r8)
  80a4b0:	2806d43a 	srli	r3,r5,16
  80a4b4:	3880000d 	sth	r2,0(r7)
  80a4b8:	20bfffcc 	andi	r2,r4,65535
  80a4bc:	4885383a 	mul	r2,r9,r2
  80a4c0:	50c7883a 	add	r3,r10,r3
  80a4c4:	2008d43a 	srli	r4,r4,16
  80a4c8:	10c5883a 	add	r2,r2,r3
  80a4cc:	3880008d 	sth	r2,2(r7)
  80a4d0:	39c00104 	addi	r7,r7,4
  80a4d4:	39400017 	ldw	r5,0(r7)
  80a4d8:	4909383a 	mul	r4,r9,r4
  80a4dc:	1004d43a 	srli	r2,r2,16
  80a4e0:	28ffffcc 	andi	r3,r5,65535
  80a4e4:	20c9883a 	add	r4,r4,r3
  80a4e8:	1105883a 	add	r2,r2,r4
  80a4ec:	42000104 	addi	r8,r8,4
  80a4f0:	1014d43a 	srli	r10,r2,16
  80a4f4:	42ffed36 	bltu	r8,r11,80a4ac <__multiply+0x134>
  80a4f8:	38800015 	stw	r2,0(r7)
  80a4fc:	31800104 	addi	r6,r6,4
  80a500:	33c0022e 	bgeu	r6,r15,80a50c <__multiply+0x194>
  80a504:	63000104 	addi	r12,r12,4
  80a508:	003fc606 	br	80a424 <__multiply+0xac>
  80a50c:	0400090e 	bge	zero,r16,80a534 <__multiply+0x1bc>
  80a510:	70bfff17 	ldw	r2,-4(r14)
  80a514:	70ffff04 	addi	r3,r14,-4
  80a518:	10000326 	beq	r2,zero,80a528 <__multiply+0x1b0>
  80a51c:	00000506 	br	80a534 <__multiply+0x1bc>
  80a520:	18800017 	ldw	r2,0(r3)
  80a524:	1000031e 	bne	r2,zero,80a534 <__multiply+0x1bc>
  80a528:	843fffc4 	addi	r16,r16,-1
  80a52c:	18ffff04 	addi	r3,r3,-4
  80a530:	803ffb1e 	bne	r16,zero,80a520 <__multiply+0x1a8>
  80a534:	a805883a 	mov	r2,r21
  80a538:	ac000415 	stw	r16,16(r21)
  80a53c:	dfc00617 	ldw	ra,24(sp)
  80a540:	dd400517 	ldw	r21,20(sp)
  80a544:	dd000417 	ldw	r20,16(sp)
  80a548:	dcc00317 	ldw	r19,12(sp)
  80a54c:	dc800217 	ldw	r18,8(sp)
  80a550:	dc400117 	ldw	r17,4(sp)
  80a554:	dc000017 	ldw	r16,0(sp)
  80a558:	dec00704 	addi	sp,sp,28
  80a55c:	f800283a 	ret

0080a560 <__i2b>:
  80a560:	defffd04 	addi	sp,sp,-12
  80a564:	dc000015 	stw	r16,0(sp)
  80a568:	04000044 	movi	r16,1
  80a56c:	dc800115 	stw	r18,4(sp)
  80a570:	2825883a 	mov	r18,r5
  80a574:	800b883a 	mov	r5,r16
  80a578:	dfc00215 	stw	ra,8(sp)
  80a57c:	0809e680 	call	809e68 <_Balloc>
  80a580:	14000415 	stw	r16,16(r2)
  80a584:	14800515 	stw	r18,20(r2)
  80a588:	dfc00217 	ldw	ra,8(sp)
  80a58c:	dc800117 	ldw	r18,4(sp)
  80a590:	dc000017 	ldw	r16,0(sp)
  80a594:	dec00304 	addi	sp,sp,12
  80a598:	f800283a 	ret

0080a59c <__multadd>:
  80a59c:	defffa04 	addi	sp,sp,-24
  80a5a0:	dc800215 	stw	r18,8(sp)
  80a5a4:	2c800417 	ldw	r18,16(r5)
  80a5a8:	dd000415 	stw	r20,16(sp)
  80a5ac:	dcc00315 	stw	r19,12(sp)
  80a5b0:	dc000015 	stw	r16,0(sp)
  80a5b4:	dfc00515 	stw	ra,20(sp)
  80a5b8:	3821883a 	mov	r16,r7
  80a5bc:	dc400115 	stw	r17,4(sp)
  80a5c0:	2827883a 	mov	r19,r5
  80a5c4:	2029883a 	mov	r20,r4
  80a5c8:	2a000504 	addi	r8,r5,20
  80a5cc:	000f883a 	mov	r7,zero
  80a5d0:	40800017 	ldw	r2,0(r8)
  80a5d4:	39c00044 	addi	r7,r7,1
  80a5d8:	10ffffcc 	andi	r3,r2,65535
  80a5dc:	1987383a 	mul	r3,r3,r6
  80a5e0:	1004d43a 	srli	r2,r2,16
  80a5e4:	1c07883a 	add	r3,r3,r16
  80a5e8:	180ad43a 	srli	r5,r3,16
  80a5ec:	1185383a 	mul	r2,r2,r6
  80a5f0:	18ffffcc 	andi	r3,r3,65535
  80a5f4:	1145883a 	add	r2,r2,r5
  80a5f8:	1008943a 	slli	r4,r2,16
  80a5fc:	1020d43a 	srli	r16,r2,16
  80a600:	20c9883a 	add	r4,r4,r3
  80a604:	41000015 	stw	r4,0(r8)
  80a608:	42000104 	addi	r8,r8,4
  80a60c:	3cbff016 	blt	r7,r18,80a5d0 <__multadd+0x34>
  80a610:	80000826 	beq	r16,zero,80a634 <__multadd+0x98>
  80a614:	98800217 	ldw	r2,8(r19)
  80a618:	90800f0e 	bge	r18,r2,80a658 <__multadd+0xbc>
  80a61c:	9485883a 	add	r2,r18,r18
  80a620:	1085883a 	add	r2,r2,r2
  80a624:	14c5883a 	add	r2,r2,r19
  80a628:	90c00044 	addi	r3,r18,1
  80a62c:	14000515 	stw	r16,20(r2)
  80a630:	98c00415 	stw	r3,16(r19)
  80a634:	9805883a 	mov	r2,r19
  80a638:	dfc00517 	ldw	ra,20(sp)
  80a63c:	dd000417 	ldw	r20,16(sp)
  80a640:	dcc00317 	ldw	r19,12(sp)
  80a644:	dc800217 	ldw	r18,8(sp)
  80a648:	dc400117 	ldw	r17,4(sp)
  80a64c:	dc000017 	ldw	r16,0(sp)
  80a650:	dec00604 	addi	sp,sp,24
  80a654:	f800283a 	ret
  80a658:	99400117 	ldw	r5,4(r19)
  80a65c:	a009883a 	mov	r4,r20
  80a660:	29400044 	addi	r5,r5,1
  80a664:	0809e680 	call	809e68 <_Balloc>
  80a668:	99800417 	ldw	r6,16(r19)
  80a66c:	99400304 	addi	r5,r19,12
  80a670:	11000304 	addi	r4,r2,12
  80a674:	318d883a 	add	r6,r6,r6
  80a678:	318d883a 	add	r6,r6,r6
  80a67c:	31800204 	addi	r6,r6,8
  80a680:	1023883a 	mov	r17,r2
  80a684:	08032940 	call	803294 <memcpy>
  80a688:	980b883a 	mov	r5,r19
  80a68c:	a009883a 	mov	r4,r20
  80a690:	08098e80 	call	8098e8 <_Bfree>
  80a694:	8827883a 	mov	r19,r17
  80a698:	003fe006 	br	80a61c <__multadd+0x80>

0080a69c <__pow5mult>:
  80a69c:	defffa04 	addi	sp,sp,-24
  80a6a0:	308000cc 	andi	r2,r6,3
  80a6a4:	dd000415 	stw	r20,16(sp)
  80a6a8:	dcc00315 	stw	r19,12(sp)
  80a6ac:	dc000015 	stw	r16,0(sp)
  80a6b0:	dfc00515 	stw	ra,20(sp)
  80a6b4:	dc800215 	stw	r18,8(sp)
  80a6b8:	dc400115 	stw	r17,4(sp)
  80a6bc:	3021883a 	mov	r16,r6
  80a6c0:	2027883a 	mov	r19,r4
  80a6c4:	2829883a 	mov	r20,r5
  80a6c8:	10002b1e 	bne	r2,zero,80a778 <__pow5mult+0xdc>
  80a6cc:	8025d0ba 	srai	r18,r16,2
  80a6d0:	90001b26 	beq	r18,zero,80a740 <__pow5mult+0xa4>
  80a6d4:	9c001217 	ldw	r16,72(r19)
  80a6d8:	8000081e 	bne	r16,zero,80a6fc <__pow5mult+0x60>
  80a6dc:	00003006 	br	80a7a0 <__pow5mult+0x104>
  80a6e0:	800b883a 	mov	r5,r16
  80a6e4:	800d883a 	mov	r6,r16
  80a6e8:	9809883a 	mov	r4,r19
  80a6ec:	90001426 	beq	r18,zero,80a740 <__pow5mult+0xa4>
  80a6f0:	80800017 	ldw	r2,0(r16)
  80a6f4:	10001b26 	beq	r2,zero,80a764 <__pow5mult+0xc8>
  80a6f8:	1021883a 	mov	r16,r2
  80a6fc:	9080004c 	andi	r2,r18,1
  80a700:	1005003a 	cmpeq	r2,r2,zero
  80a704:	9025d07a 	srai	r18,r18,1
  80a708:	800d883a 	mov	r6,r16
  80a70c:	9809883a 	mov	r4,r19
  80a710:	a00b883a 	mov	r5,r20
  80a714:	103ff21e 	bne	r2,zero,80a6e0 <__pow5mult+0x44>
  80a718:	080a3780 	call	80a378 <__multiply>
  80a71c:	a00b883a 	mov	r5,r20
  80a720:	9809883a 	mov	r4,r19
  80a724:	1023883a 	mov	r17,r2
  80a728:	08098e80 	call	8098e8 <_Bfree>
  80a72c:	8829883a 	mov	r20,r17
  80a730:	800b883a 	mov	r5,r16
  80a734:	800d883a 	mov	r6,r16
  80a738:	9809883a 	mov	r4,r19
  80a73c:	903fec1e 	bne	r18,zero,80a6f0 <__pow5mult+0x54>
  80a740:	a005883a 	mov	r2,r20
  80a744:	dfc00517 	ldw	ra,20(sp)
  80a748:	dd000417 	ldw	r20,16(sp)
  80a74c:	dcc00317 	ldw	r19,12(sp)
  80a750:	dc800217 	ldw	r18,8(sp)
  80a754:	dc400117 	ldw	r17,4(sp)
  80a758:	dc000017 	ldw	r16,0(sp)
  80a75c:	dec00604 	addi	sp,sp,24
  80a760:	f800283a 	ret
  80a764:	080a3780 	call	80a378 <__multiply>
  80a768:	80800015 	stw	r2,0(r16)
  80a76c:	1021883a 	mov	r16,r2
  80a770:	10000015 	stw	zero,0(r2)
  80a774:	003fe106 	br	80a6fc <__pow5mult+0x60>
  80a778:	1085883a 	add	r2,r2,r2
  80a77c:	00c02074 	movhi	r3,129
  80a780:	18d48804 	addi	r3,r3,21024
  80a784:	1085883a 	add	r2,r2,r2
  80a788:	10c5883a 	add	r2,r2,r3
  80a78c:	11bfff17 	ldw	r6,-4(r2)
  80a790:	000f883a 	mov	r7,zero
  80a794:	080a59c0 	call	80a59c <__multadd>
  80a798:	1029883a 	mov	r20,r2
  80a79c:	003fcb06 	br	80a6cc <__pow5mult+0x30>
  80a7a0:	9809883a 	mov	r4,r19
  80a7a4:	01409c44 	movi	r5,625
  80a7a8:	080a5600 	call	80a560 <__i2b>
  80a7ac:	98801215 	stw	r2,72(r19)
  80a7b0:	1021883a 	mov	r16,r2
  80a7b4:	10000015 	stw	zero,0(r2)
  80a7b8:	003fd006 	br	80a6fc <__pow5mult+0x60>

0080a7bc <__s2b>:
  80a7bc:	defff904 	addi	sp,sp,-28
  80a7c0:	dcc00315 	stw	r19,12(sp)
  80a7c4:	dc800215 	stw	r18,8(sp)
  80a7c8:	2827883a 	mov	r19,r5
  80a7cc:	2025883a 	mov	r18,r4
  80a7d0:	01400244 	movi	r5,9
  80a7d4:	39000204 	addi	r4,r7,8
  80a7d8:	dd000415 	stw	r20,16(sp)
  80a7dc:	dc400115 	stw	r17,4(sp)
  80a7e0:	dfc00615 	stw	ra,24(sp)
  80a7e4:	dd400515 	stw	r21,20(sp)
  80a7e8:	dc000015 	stw	r16,0(sp)
  80a7ec:	3829883a 	mov	r20,r7
  80a7f0:	3023883a 	mov	r17,r6
  80a7f4:	080fc1c0 	call	80fc1c <__divsi3>
  80a7f8:	00c00044 	movi	r3,1
  80a7fc:	1880350e 	bge	r3,r2,80a8d4 <__s2b+0x118>
  80a800:	000b883a 	mov	r5,zero
  80a804:	18c7883a 	add	r3,r3,r3
  80a808:	29400044 	addi	r5,r5,1
  80a80c:	18bffd16 	blt	r3,r2,80a804 <__s2b+0x48>
  80a810:	9009883a 	mov	r4,r18
  80a814:	0809e680 	call	809e68 <_Balloc>
  80a818:	1011883a 	mov	r8,r2
  80a81c:	d8800717 	ldw	r2,28(sp)
  80a820:	00c00044 	movi	r3,1
  80a824:	01800244 	movi	r6,9
  80a828:	40800515 	stw	r2,20(r8)
  80a82c:	40c00415 	stw	r3,16(r8)
  80a830:	3440260e 	bge	r6,r17,80a8cc <__s2b+0x110>
  80a834:	3021883a 	mov	r16,r6
  80a838:	99ab883a 	add	r21,r19,r6
  80a83c:	9c05883a 	add	r2,r19,r16
  80a840:	11c00007 	ldb	r7,0(r2)
  80a844:	400b883a 	mov	r5,r8
  80a848:	9009883a 	mov	r4,r18
  80a84c:	39fff404 	addi	r7,r7,-48
  80a850:	01800284 	movi	r6,10
  80a854:	080a59c0 	call	80a59c <__multadd>
  80a858:	84000044 	addi	r16,r16,1
  80a85c:	1011883a 	mov	r8,r2
  80a860:	8c3ff61e 	bne	r17,r16,80a83c <__s2b+0x80>
  80a864:	ac45883a 	add	r2,r21,r17
  80a868:	117ffe04 	addi	r5,r2,-8
  80a86c:	880d883a 	mov	r6,r17
  80a870:	35000c0e 	bge	r6,r20,80a8a4 <__s2b+0xe8>
  80a874:	a185c83a 	sub	r2,r20,r6
  80a878:	2821883a 	mov	r16,r5
  80a87c:	28a3883a 	add	r17,r5,r2
  80a880:	81c00007 	ldb	r7,0(r16)
  80a884:	400b883a 	mov	r5,r8
  80a888:	9009883a 	mov	r4,r18
  80a88c:	39fff404 	addi	r7,r7,-48
  80a890:	01800284 	movi	r6,10
  80a894:	080a59c0 	call	80a59c <__multadd>
  80a898:	84000044 	addi	r16,r16,1
  80a89c:	1011883a 	mov	r8,r2
  80a8a0:	847ff71e 	bne	r16,r17,80a880 <__s2b+0xc4>
  80a8a4:	4005883a 	mov	r2,r8
  80a8a8:	dfc00617 	ldw	ra,24(sp)
  80a8ac:	dd400517 	ldw	r21,20(sp)
  80a8b0:	dd000417 	ldw	r20,16(sp)
  80a8b4:	dcc00317 	ldw	r19,12(sp)
  80a8b8:	dc800217 	ldw	r18,8(sp)
  80a8bc:	dc400117 	ldw	r17,4(sp)
  80a8c0:	dc000017 	ldw	r16,0(sp)
  80a8c4:	dec00704 	addi	sp,sp,28
  80a8c8:	f800283a 	ret
  80a8cc:	99400284 	addi	r5,r19,10
  80a8d0:	003fe706 	br	80a870 <__s2b+0xb4>
  80a8d4:	000b883a 	mov	r5,zero
  80a8d8:	003fcd06 	br	80a810 <__s2b+0x54>

0080a8dc <_read_r>:
  80a8dc:	defffd04 	addi	sp,sp,-12
  80a8e0:	dc000015 	stw	r16,0(sp)
  80a8e4:	040020b4 	movhi	r16,130
  80a8e8:	84236404 	addi	r16,r16,-29296
  80a8ec:	dc400115 	stw	r17,4(sp)
  80a8f0:	80000015 	stw	zero,0(r16)
  80a8f4:	2023883a 	mov	r17,r4
  80a8f8:	2809883a 	mov	r4,r5
  80a8fc:	300b883a 	mov	r5,r6
  80a900:	380d883a 	mov	r6,r7
  80a904:	dfc00215 	stw	ra,8(sp)
  80a908:	08112180 	call	811218 <read>
  80a90c:	1007883a 	mov	r3,r2
  80a910:	00bfffc4 	movi	r2,-1
  80a914:	18800626 	beq	r3,r2,80a930 <_read_r+0x54>
  80a918:	1805883a 	mov	r2,r3
  80a91c:	dfc00217 	ldw	ra,8(sp)
  80a920:	dc400117 	ldw	r17,4(sp)
  80a924:	dc000017 	ldw	r16,0(sp)
  80a928:	dec00304 	addi	sp,sp,12
  80a92c:	f800283a 	ret
  80a930:	80800017 	ldw	r2,0(r16)
  80a934:	103ff826 	beq	r2,zero,80a918 <_read_r+0x3c>
  80a938:	88800015 	stw	r2,0(r17)
  80a93c:	1805883a 	mov	r2,r3
  80a940:	dfc00217 	ldw	ra,8(sp)
  80a944:	dc400117 	ldw	r17,4(sp)
  80a948:	dc000017 	ldw	r16,0(sp)
  80a94c:	dec00304 	addi	sp,sp,12
  80a950:	f800283a 	ret

0080a954 <__isinfd>:
  80a954:	200d883a 	mov	r6,r4
  80a958:	0109c83a 	sub	r4,zero,r4
  80a95c:	2188b03a 	or	r4,r4,r6
  80a960:	2008d7fa 	srli	r4,r4,31
  80a964:	00a00034 	movhi	r2,32768
  80a968:	10bfffc4 	addi	r2,r2,-1
  80a96c:	1144703a 	and	r2,r2,r5
  80a970:	2088b03a 	or	r4,r4,r2
  80a974:	009ffc34 	movhi	r2,32752
  80a978:	1105c83a 	sub	r2,r2,r4
  80a97c:	0087c83a 	sub	r3,zero,r2
  80a980:	10c4b03a 	or	r2,r2,r3
  80a984:	1004d7fa 	srli	r2,r2,31
  80a988:	00c00044 	movi	r3,1
  80a98c:	1885c83a 	sub	r2,r3,r2
  80a990:	f800283a 	ret

0080a994 <__isnand>:
  80a994:	200d883a 	mov	r6,r4
  80a998:	0109c83a 	sub	r4,zero,r4
  80a99c:	2188b03a 	or	r4,r4,r6
  80a9a0:	2008d7fa 	srli	r4,r4,31
  80a9a4:	00a00034 	movhi	r2,32768
  80a9a8:	10bfffc4 	addi	r2,r2,-1
  80a9ac:	1144703a 	and	r2,r2,r5
  80a9b0:	2088b03a 	or	r4,r4,r2
  80a9b4:	009ffc34 	movhi	r2,32752
  80a9b8:	1105c83a 	sub	r2,r2,r4
  80a9bc:	1004d7fa 	srli	r2,r2,31
  80a9c0:	f800283a 	ret

0080a9c4 <__sccl>:
  80a9c4:	28c00003 	ldbu	r3,0(r5)
  80a9c8:	00801784 	movi	r2,94
  80a9cc:	2a000044 	addi	r8,r5,1
  80a9d0:	18802526 	beq	r3,r2,80aa68 <__sccl+0xa4>
  80a9d4:	180f883a 	mov	r7,r3
  80a9d8:	0013883a 	mov	r9,zero
  80a9dc:	000d883a 	mov	r6,zero
  80a9e0:	0007883a 	mov	r3,zero
  80a9e4:	01404004 	movi	r5,256
  80a9e8:	1905883a 	add	r2,r3,r4
  80a9ec:	18c00044 	addi	r3,r3,1
  80a9f0:	11800005 	stb	r6,0(r2)
  80a9f4:	197ffc1e 	bne	r3,r5,80a9e8 <__sccl+0x24>
  80a9f8:	38000c26 	beq	r7,zero,80aa2c <__sccl+0x68>
  80a9fc:	00800044 	movi	r2,1
  80aa00:	124dc83a 	sub	r6,r2,r9
  80aa04:	3905883a 	add	r2,r7,r4
  80aa08:	11800005 	stb	r6,0(r2)
  80aa0c:	41400044 	addi	r5,r8,1
  80aa10:	02400b44 	movi	r9,45
  80aa14:	02801744 	movi	r10,93
  80aa18:	28bfffc3 	ldbu	r2,-1(r5)
  80aa1c:	2811883a 	mov	r8,r5
  80aa20:	12400726 	beq	r2,r9,80aa40 <__sccl+0x7c>
  80aa24:	12800226 	beq	r2,r10,80aa30 <__sccl+0x6c>
  80aa28:	1000031e 	bne	r2,zero,80aa38 <__sccl+0x74>
  80aa2c:	423fffc4 	addi	r8,r8,-1
  80aa30:	4005883a 	mov	r2,r8
  80aa34:	f800283a 	ret
  80aa38:	100f883a 	mov	r7,r2
  80aa3c:	003ff106 	br	80aa04 <__sccl+0x40>
  80aa40:	28c00003 	ldbu	r3,0(r5)
  80aa44:	1a800d26 	beq	r3,r10,80aa7c <__sccl+0xb8>
  80aa48:	19c00c16 	blt	r3,r7,80aa7c <__sccl+0xb8>
  80aa4c:	21c5883a 	add	r2,r4,r7
  80aa50:	39c00044 	addi	r7,r7,1
  80aa54:	11800045 	stb	r6,1(r2)
  80aa58:	10800044 	addi	r2,r2,1
  80aa5c:	38fffc16 	blt	r7,r3,80aa50 <__sccl+0x8c>
  80aa60:	29400084 	addi	r5,r5,2
  80aa64:	003fec06 	br	80aa18 <__sccl+0x54>
  80aa68:	29c00043 	ldbu	r7,1(r5)
  80aa6c:	02400044 	movi	r9,1
  80aa70:	2a000084 	addi	r8,r5,2
  80aa74:	480d883a 	mov	r6,r9
  80aa78:	003fd906 	br	80a9e0 <__sccl+0x1c>
  80aa7c:	01c00b44 	movi	r7,45
  80aa80:	003fe006 	br	80aa04 <__sccl+0x40>

0080aa84 <nanf>:
  80aa84:	009ff034 	movhi	r2,32704
  80aa88:	f800283a 	ret

0080aa8c <strcmp>:
  80aa8c:	2144b03a 	or	r2,r4,r5
  80aa90:	108000cc 	andi	r2,r2,3
  80aa94:	10001d1e 	bne	r2,zero,80ab0c <strcmp+0x80>
  80aa98:	200f883a 	mov	r7,r4
  80aa9c:	28800017 	ldw	r2,0(r5)
  80aaa0:	21000017 	ldw	r4,0(r4)
  80aaa4:	280d883a 	mov	r6,r5
  80aaa8:	2080161e 	bne	r4,r2,80ab04 <strcmp+0x78>
  80aaac:	023fbff4 	movhi	r8,65279
  80aab0:	423fbfc4 	addi	r8,r8,-257
  80aab4:	2207883a 	add	r3,r4,r8
  80aab8:	01602074 	movhi	r5,32897
  80aabc:	29602004 	addi	r5,r5,-32640
  80aac0:	1946703a 	and	r3,r3,r5
  80aac4:	0104303a 	nor	r2,zero,r4
  80aac8:	10c4703a 	and	r2,r2,r3
  80aacc:	10001c1e 	bne	r2,zero,80ab40 <strcmp+0xb4>
  80aad0:	4013883a 	mov	r9,r8
  80aad4:	2811883a 	mov	r8,r5
  80aad8:	00000106 	br	80aae0 <strcmp+0x54>
  80aadc:	1800181e 	bne	r3,zero,80ab40 <strcmp+0xb4>
  80aae0:	39c00104 	addi	r7,r7,4
  80aae4:	39000017 	ldw	r4,0(r7)
  80aae8:	31800104 	addi	r6,r6,4
  80aaec:	31400017 	ldw	r5,0(r6)
  80aaf0:	2245883a 	add	r2,r4,r9
  80aaf4:	1204703a 	and	r2,r2,r8
  80aaf8:	0106303a 	nor	r3,zero,r4
  80aafc:	1886703a 	and	r3,r3,r2
  80ab00:	217ff626 	beq	r4,r5,80aadc <strcmp+0x50>
  80ab04:	3809883a 	mov	r4,r7
  80ab08:	300b883a 	mov	r5,r6
  80ab0c:	20c00007 	ldb	r3,0(r4)
  80ab10:	1800051e 	bne	r3,zero,80ab28 <strcmp+0x9c>
  80ab14:	00000606 	br	80ab30 <strcmp+0xa4>
  80ab18:	21000044 	addi	r4,r4,1
  80ab1c:	20c00007 	ldb	r3,0(r4)
  80ab20:	29400044 	addi	r5,r5,1
  80ab24:	18000226 	beq	r3,zero,80ab30 <strcmp+0xa4>
  80ab28:	28800007 	ldb	r2,0(r5)
  80ab2c:	18bffa26 	beq	r3,r2,80ab18 <strcmp+0x8c>
  80ab30:	20c00003 	ldbu	r3,0(r4)
  80ab34:	28800003 	ldbu	r2,0(r5)
  80ab38:	1885c83a 	sub	r2,r3,r2
  80ab3c:	f800283a 	ret
  80ab40:	0005883a 	mov	r2,zero
  80ab44:	f800283a 	ret

0080ab48 <match>:
  80ab48:	21800017 	ldw	r6,0(r4)
  80ab4c:	01c01004 	movi	r7,64
  80ab50:	02001684 	movi	r8,90
  80ab54:	28800007 	ldb	r2,0(r5)
  80ab58:	29400044 	addi	r5,r5,1
  80ab5c:	10000826 	beq	r2,zero,80ab80 <match+0x38>
  80ab60:	31800044 	addi	r6,r6,1
  80ab64:	30c00007 	ldb	r3,0(r6)
  80ab68:	38c0020e 	bge	r7,r3,80ab74 <match+0x2c>
  80ab6c:	40c00116 	blt	r8,r3,80ab74 <match+0x2c>
  80ab70:	18c00804 	addi	r3,r3,32
  80ab74:	18bff726 	beq	r3,r2,80ab54 <match+0xc>
  80ab78:	0005883a 	mov	r2,zero
  80ab7c:	f800283a 	ret
  80ab80:	30800044 	addi	r2,r6,1
  80ab84:	20800015 	stw	r2,0(r4)
  80ab88:	00800044 	movi	r2,1
  80ab8c:	f800283a 	ret

0080ab90 <_strtod_r>:
  80ab90:	deffde04 	addi	sp,sp,-136
  80ab94:	df002015 	stw	fp,128(sp)
  80ab98:	dd401d15 	stw	r21,116(sp)
  80ab9c:	dc401915 	stw	r17,100(sp)
  80aba0:	dfc02115 	stw	ra,132(sp)
  80aba4:	ddc01f15 	stw	r23,124(sp)
  80aba8:	dd801e15 	stw	r22,120(sp)
  80abac:	dd001c15 	stw	r20,112(sp)
  80abb0:	dcc01b15 	stw	r19,108(sp)
  80abb4:	dc801a15 	stw	r18,104(sp)
  80abb8:	dc001815 	stw	r16,96(sp)
  80abbc:	2823883a 	mov	r17,r5
  80abc0:	202b883a 	mov	r21,r4
  80abc4:	d9801515 	stw	r6,84(sp)
  80abc8:	d8000915 	stw	zero,36(sp)
  80abcc:	d8000a15 	stw	zero,40(sp)
  80abd0:	d9400415 	stw	r5,16(sp)
  80abd4:	df000904 	addi	fp,sp,36
  80abd8:	da000417 	ldw	r8,16(sp)
  80abdc:	00800b44 	movi	r2,45
  80abe0:	40c00003 	ldbu	r3,0(r8)
  80abe4:	10c03536 	bltu	r2,r3,80acbc <_strtod_r+0x12c>
  80abe8:	18c5883a 	add	r2,r3,r3
  80abec:	1085883a 	add	r2,r2,r2
  80abf0:	00c02074 	movhi	r3,129
  80abf4:	18eb0104 	addi	r3,r3,-21500
  80abf8:	10c5883a 	add	r2,r2,r3
  80abfc:	11000017 	ldw	r4,0(r2)
  80ac00:	2000683a 	jmp	r4
  80ac04:	0080adf8 	rdprs	r2,zero,695
  80ac08:	0080acbc 	xorhi	r2,zero,690
  80ac0c:	0080acbc 	xorhi	r2,zero,690
  80ac10:	0080acbc 	xorhi	r2,zero,690
  80ac14:	0080acbc 	xorhi	r2,zero,690
  80ac18:	0080acbc 	xorhi	r2,zero,690
  80ac1c:	0080acbc 	xorhi	r2,zero,690
  80ac20:	0080acbc 	xorhi	r2,zero,690
  80ac24:	0080acbc 	xorhi	r2,zero,690
  80ac28:	0080b110 	cmplti	r2,zero,708
  80ac2c:	0080b110 	cmplti	r2,zero,708
  80ac30:	0080b110 	cmplti	r2,zero,708
  80ac34:	0080b110 	cmplti	r2,zero,708
  80ac38:	0080b110 	cmplti	r2,zero,708
  80ac3c:	0080acbc 	xorhi	r2,zero,690
  80ac40:	0080acbc 	xorhi	r2,zero,690
  80ac44:	0080acbc 	xorhi	r2,zero,690
  80ac48:	0080acbc 	xorhi	r2,zero,690
  80ac4c:	0080acbc 	xorhi	r2,zero,690
  80ac50:	0080acbc 	xorhi	r2,zero,690
  80ac54:	0080acbc 	xorhi	r2,zero,690
  80ac58:	0080acbc 	xorhi	r2,zero,690
  80ac5c:	0080acbc 	xorhi	r2,zero,690
  80ac60:	0080acbc 	xorhi	r2,zero,690
  80ac64:	0080acbc 	xorhi	r2,zero,690
  80ac68:	0080acbc 	xorhi	r2,zero,690
  80ac6c:	0080acbc 	xorhi	r2,zero,690
  80ac70:	0080acbc 	xorhi	r2,zero,690
  80ac74:	0080acbc 	xorhi	r2,zero,690
  80ac78:	0080acbc 	xorhi	r2,zero,690
  80ac7c:	0080acbc 	xorhi	r2,zero,690
  80ac80:	0080acbc 	xorhi	r2,zero,690
  80ac84:	0080b110 	cmplti	r2,zero,708
  80ac88:	0080acbc 	xorhi	r2,zero,690
  80ac8c:	0080acbc 	xorhi	r2,zero,690
  80ac90:	0080acbc 	xorhi	r2,zero,690
  80ac94:	0080acbc 	xorhi	r2,zero,690
  80ac98:	0080acbc 	xorhi	r2,zero,690
  80ac9c:	0080acbc 	xorhi	r2,zero,690
  80aca0:	0080acbc 	xorhi	r2,zero,690
  80aca4:	0080acbc 	xorhi	r2,zero,690
  80aca8:	0080acbc 	xorhi	r2,zero,690
  80acac:	0080acbc 	xorhi	r2,zero,690
  80acb0:	0080b0f0 	cmpltui	r2,zero,707
  80acb4:	0080acbc 	xorhi	r2,zero,690
  80acb8:	0080b11c 	xori	r2,zero,708
  80acbc:	d8001115 	stw	zero,68(sp)
  80acc0:	40c00007 	ldb	r3,0(r8)
  80acc4:	00800c04 	movi	r2,48
  80acc8:	1880d026 	beq	r3,r2,80b00c <_strtod_r+0x47c>
  80accc:	001f883a 	mov	r15,zero
  80acd0:	41000007 	ldb	r4,0(r8)
  80acd4:	00c00bc4 	movi	r3,47
  80acd8:	402d883a 	mov	r22,r8
  80acdc:	1903470e 	bge	r3,r4,80b9fc <_strtod_r+0xe6c>
  80ace0:	00800e44 	movi	r2,57
  80ace4:	11034516 	blt	r2,r4,80b9fc <_strtod_r+0xe6c>
  80ace8:	180f883a 	mov	r7,r3
  80acec:	1013883a 	mov	r9,r2
  80acf0:	4007883a 	mov	r3,r8
  80acf4:	000d883a 	mov	r6,zero
  80acf8:	0029883a 	mov	r20,zero
  80acfc:	0021883a 	mov	r16,zero
  80ad00:	01400204 	movi	r5,8
  80ad04:	028003c4 	movi	r10,15
  80ad08:	29803116 	blt	r5,r6,80add0 <_strtod_r+0x240>
  80ad0c:	a08002a4 	muli	r2,r20,10
  80ad10:	1105883a 	add	r2,r2,r4
  80ad14:	153ff404 	addi	r20,r2,-48
  80ad18:	1a000044 	addi	r8,r3,1
  80ad1c:	da000415 	stw	r8,16(sp)
  80ad20:	41000007 	ldb	r4,0(r8)
  80ad24:	31800044 	addi	r6,r6,1
  80ad28:	4007883a 	mov	r3,r8
  80ad2c:	3900010e 	bge	r7,r4,80ad34 <_strtod_r+0x1a4>
  80ad30:	493ff50e 	bge	r9,r4,80ad08 <_strtod_r+0x178>
  80ad34:	00800b84 	movi	r2,46
  80ad38:	2080c126 	beq	r4,r2,80b040 <_strtod_r+0x4b0>
  80ad3c:	3027883a 	mov	r19,r6
  80ad40:	0025883a 	mov	r18,zero
  80ad44:	0015883a 	mov	r10,zero
  80ad48:	000f883a 	mov	r7,zero
  80ad4c:	00801944 	movi	r2,101
  80ad50:	20802426 	beq	r4,r2,80ade4 <_strtod_r+0x254>
  80ad54:	00801144 	movi	r2,69
  80ad58:	20802226 	beq	r4,r2,80ade4 <_strtod_r+0x254>
  80ad5c:	9816c03a 	cmpne	r11,r19,zero
  80ad60:	000b883a 	mov	r5,zero
  80ad64:	5800631e 	bne	r11,zero,80aef4 <_strtod_r+0x364>
  80ad68:	3800c126 	beq	r7,zero,80b070 <_strtod_r+0x4e0>
  80ad6c:	d8c01517 	ldw	r3,84(sp)
  80ad70:	18000226 	beq	r3,zero,80ad7c <_strtod_r+0x1ec>
  80ad74:	d8800417 	ldw	r2,16(sp)
  80ad78:	18800015 	stw	r2,0(r3)
  80ad7c:	d9001117 	ldw	r4,68(sp)
  80ad80:	2005003a 	cmpeq	r2,r4,zero
  80ad84:	10001f1e 	bne	r2,zero,80ae04 <_strtod_r+0x274>
  80ad88:	e0800017 	ldw	r2,0(fp)
  80ad8c:	e0c00117 	ldw	r3,4(fp)
  80ad90:	1009883a 	mov	r4,r2
  80ad94:	1960003c 	xorhi	r5,r3,32768
  80ad98:	2005883a 	mov	r2,r4
  80ad9c:	2807883a 	mov	r3,r5
  80ada0:	dfc02117 	ldw	ra,132(sp)
  80ada4:	df002017 	ldw	fp,128(sp)
  80ada8:	ddc01f17 	ldw	r23,124(sp)
  80adac:	dd801e17 	ldw	r22,120(sp)
  80adb0:	dd401d17 	ldw	r21,116(sp)
  80adb4:	dd001c17 	ldw	r20,112(sp)
  80adb8:	dcc01b17 	ldw	r19,108(sp)
  80adbc:	dc801a17 	ldw	r18,104(sp)
  80adc0:	dc401917 	ldw	r17,100(sp)
  80adc4:	dc001817 	ldw	r16,96(sp)
  80adc8:	dec02204 	addi	sp,sp,136
  80adcc:	f800283a 	ret
  80add0:	51bfd116 	blt	r10,r6,80ad18 <_strtod_r+0x188>
  80add4:	808002a4 	muli	r2,r16,10
  80add8:	1105883a 	add	r2,r2,r4
  80addc:	143ff404 	addi	r16,r2,-48
  80ade0:	003fcd06 	br	80ad18 <_strtod_r+0x188>
  80ade4:	9816c03a 	cmpne	r11,r19,zero
  80ade8:	5800091e 	bne	r11,zero,80ae10 <_strtod_r+0x280>
  80adec:	3800081e 	bne	r7,zero,80ae10 <_strtod_r+0x280>
  80adf0:	7805003a 	cmpeq	r2,r15,zero
  80adf4:	10000626 	beq	r2,zero,80ae10 <_strtod_r+0x280>
  80adf8:	d8001115 	stw	zero,68(sp)
  80adfc:	dc400415 	stw	r17,16(sp)
  80ae00:	003fda06 	br	80ad6c <_strtod_r+0x1dc>
  80ae04:	e1000017 	ldw	r4,0(fp)
  80ae08:	e1400117 	ldw	r5,4(fp)
  80ae0c:	003fe206 	br	80ad98 <_strtod_r+0x208>
  80ae10:	dc400417 	ldw	r17,16(sp)
  80ae14:	00800ac4 	movi	r2,43
  80ae18:	8a000044 	addi	r8,r17,1
  80ae1c:	da000415 	stw	r8,16(sp)
  80ae20:	88c00047 	ldb	r3,1(r17)
  80ae24:	4009883a 	mov	r4,r8
  80ae28:	1880bf26 	beq	r3,r2,80b128 <_strtod_r+0x598>
  80ae2c:	00800b44 	movi	r2,45
  80ae30:	18834526 	beq	r3,r2,80bb48 <_strtod_r+0xfb8>
  80ae34:	1809883a 	mov	r4,r3
  80ae38:	20fff404 	addi	r3,r4,-48
  80ae3c:	00800244 	movi	r2,9
  80ae40:	001d883a 	mov	r14,zero
  80ae44:	10c0bf36 	bltu	r2,r3,80b144 <_strtod_r+0x5b4>
  80ae48:	00800c04 	movi	r2,48
  80ae4c:	2080061e 	bne	r4,r2,80ae68 <_strtod_r+0x2d8>
  80ae50:	da000417 	ldw	r8,16(sp)
  80ae54:	2005883a 	mov	r2,r4
  80ae58:	42000044 	addi	r8,r8,1
  80ae5c:	da000415 	stw	r8,16(sp)
  80ae60:	41000007 	ldb	r4,0(r8)
  80ae64:	20bffc26 	beq	r4,r2,80ae58 <_strtod_r+0x2c8>
  80ae68:	20fff3c4 	addi	r3,r4,-49
  80ae6c:	00800204 	movi	r2,8
  80ae70:	10ffbb36 	bltu	r2,r3,80ad60 <_strtod_r+0x1d0>
  80ae74:	da000417 	ldw	r8,16(sp)
  80ae78:	227ff404 	addi	r9,r4,-48
  80ae7c:	03000bc4 	movi	r12,47
  80ae80:	4007883a 	mov	r3,r8
  80ae84:	42000044 	addi	r8,r8,1
  80ae88:	da000415 	stw	r8,16(sp)
  80ae8c:	41000007 	ldb	r4,0(r8)
  80ae90:	61000d0e 	bge	r12,r4,80aec8 <_strtod_r+0x338>
  80ae94:	00800e44 	movi	r2,57
  80ae98:	11000b16 	blt	r2,r4,80aec8 <_strtod_r+0x338>
  80ae9c:	601b883a 	mov	r13,r12
  80aea0:	1019883a 	mov	r12,r2
  80aea4:	00000106 	br	80aeac <_strtod_r+0x31c>
  80aea8:	61000716 	blt	r12,r4,80aec8 <_strtod_r+0x338>
  80aeac:	488002a4 	muli	r2,r9,10
  80aeb0:	42000044 	addi	r8,r8,1
  80aeb4:	da000415 	stw	r8,16(sp)
  80aeb8:	2085883a 	add	r2,r4,r2
  80aebc:	41000007 	ldb	r4,0(r8)
  80aec0:	127ff404 	addi	r9,r2,-48
  80aec4:	693ff816 	blt	r13,r4,80aea8 <_strtod_r+0x318>
  80aec8:	40c7c83a 	sub	r3,r8,r3
  80aecc:	00800204 	movi	r2,8
  80aed0:	10c2e416 	blt	r2,r3,80ba64 <_strtod_r+0xed4>
  80aed4:	009387c4 	movi	r2,19999
  80aed8:	480b883a 	mov	r5,r9
  80aedc:	1240010e 	bge	r2,r9,80aee4 <_strtod_r+0x354>
  80aee0:	100b883a 	mov	r5,r2
  80aee4:	7005003a 	cmpeq	r2,r14,zero
  80aee8:	103f9e1e 	bne	r2,zero,80ad64 <_strtod_r+0x1d4>
  80aeec:	014bc83a 	sub	r5,zero,r5
  80aef0:	583f9d26 	beq	r11,zero,80ad68 <_strtod_r+0x1d8>
  80aef4:	2a8bc83a 	sub	r5,r5,r10
  80aef8:	d9400f15 	stw	r5,60(sp)
  80aefc:	30007a1e 	bne	r6,zero,80b0e8 <_strtod_r+0x558>
  80af00:	dcc01215 	stw	r19,72(sp)
  80af04:	00800404 	movi	r2,16
  80af08:	9825883a 	mov	r18,r19
  80af0c:	14c0010e 	bge	r2,r19,80af14 <_strtod_r+0x384>
  80af10:	1025883a 	mov	r18,r2
  80af14:	a009883a 	mov	r4,r20
  80af18:	080fa0c0 	call	80fa0c <__floatunsidf>
  80af1c:	100f883a 	mov	r7,r2
  80af20:	e0800015 	stw	r2,0(fp)
  80af24:	00800244 	movi	r2,9
  80af28:	e0c00115 	stw	r3,4(fp)
  80af2c:	1480160e 	bge	r2,r18,80af88 <_strtod_r+0x3f8>
  80af30:	900c90fa 	slli	r6,r18,3
  80af34:	01002074 	movhi	r4,129
  80af38:	21144204 	addi	r4,r4,20744
  80af3c:	180b883a 	mov	r5,r3
  80af40:	310d883a 	add	r6,r6,r4
  80af44:	30ffef17 	ldw	r3,-68(r6)
  80af48:	30bfee17 	ldw	r2,-72(r6)
  80af4c:	3809883a 	mov	r4,r7
  80af50:	180f883a 	mov	r7,r3
  80af54:	100d883a 	mov	r6,r2
  80af58:	080ee7c0 	call	80ee7c <__muldf3>
  80af5c:	8009883a 	mov	r4,r16
  80af60:	1823883a 	mov	r17,r3
  80af64:	1021883a 	mov	r16,r2
  80af68:	080fa0c0 	call	80fa0c <__floatunsidf>
  80af6c:	880b883a 	mov	r5,r17
  80af70:	180f883a 	mov	r7,r3
  80af74:	8009883a 	mov	r4,r16
  80af78:	100d883a 	mov	r6,r2
  80af7c:	080ee080 	call	80ee08 <__adddf3>
  80af80:	e0c00115 	stw	r3,4(fp)
  80af84:	e0800015 	stw	r2,0(fp)
  80af88:	010003c4 	movi	r4,15
  80af8c:	24c09816 	blt	r4,r19,80b1f0 <_strtod_r+0x660>
  80af90:	d9800f17 	ldw	r6,60(sp)
  80af94:	303f7526 	beq	r6,zero,80ad6c <_strtod_r+0x1dc>
  80af98:	0183be0e 	bge	zero,r6,80be94 <_strtod_r+0x1304>
  80af9c:	00800584 	movi	r2,22
  80afa0:	1182b20e 	bge	r2,r6,80ba6c <_strtod_r+0xedc>
  80afa4:	d8c00f17 	ldw	r3,60(sp)
  80afa8:	24e3c83a 	sub	r17,r4,r19
  80afac:	88800584 	addi	r2,r17,22
  80afb0:	10c08f16 	blt	r2,r3,80b1f0 <_strtod_r+0x660>
  80afb4:	880890fa 	slli	r4,r17,3
  80afb8:	04002074 	movhi	r16,129
  80afbc:	84144204 	addi	r16,r16,20744
  80afc0:	e0800017 	ldw	r2,0(fp)
  80afc4:	2409883a 	add	r4,r4,r16
  80afc8:	22000017 	ldw	r8,0(r4)
  80afcc:	22400117 	ldw	r9,4(r4)
  80afd0:	e0c00117 	ldw	r3,4(fp)
  80afd4:	1009883a 	mov	r4,r2
  80afd8:	480f883a 	mov	r7,r9
  80afdc:	180b883a 	mov	r5,r3
  80afe0:	400d883a 	mov	r6,r8
  80afe4:	080ee7c0 	call	80ee7c <__muldf3>
  80afe8:	d9000f17 	ldw	r4,60(sp)
  80afec:	180b883a 	mov	r5,r3
  80aff0:	2455c83a 	sub	r10,r4,r17
  80aff4:	501490fa 	slli	r10,r10,3
  80aff8:	1009883a 	mov	r4,r2
  80affc:	5415883a 	add	r10,r10,r16
  80b000:	52000017 	ldw	r8,0(r10)
  80b004:	52400117 	ldw	r9,4(r10)
  80b008:	0002a206 	br	80ba94 <_strtod_r+0xf04>
  80b00c:	40c00047 	ldb	r3,1(r8)
  80b010:	00801604 	movi	r2,88
  80b014:	18804e26 	beq	r3,r2,80b150 <_strtod_r+0x5c0>
  80b018:	00801e04 	movi	r2,120
  80b01c:	18804c26 	beq	r3,r2,80b150 <_strtod_r+0x5c0>
  80b020:	42000044 	addi	r8,r8,1
  80b024:	da000415 	stw	r8,16(sp)
  80b028:	40c00007 	ldb	r3,0(r8)
  80b02c:	00800c04 	movi	r2,48
  80b030:	18bffb26 	beq	r3,r2,80b020 <_strtod_r+0x490>
  80b034:	183f4d26 	beq	r3,zero,80ad6c <_strtod_r+0x1dc>
  80b038:	03c00044 	movi	r15,1
  80b03c:	003f2406 	br	80acd0 <_strtod_r+0x140>
  80b040:	42000044 	addi	r8,r8,1
  80b044:	da000415 	stw	r8,16(sp)
  80b048:	19000047 	ldb	r4,1(r3)
  80b04c:	3000b726 	beq	r6,zero,80b32c <_strtod_r+0x79c>
  80b050:	3027883a 	mov	r19,r6
  80b054:	0015883a 	mov	r10,zero
  80b058:	000f883a 	mov	r7,zero
  80b05c:	227ff404 	addi	r9,r4,-48
  80b060:	00800244 	movi	r2,9
  80b064:	1242592e 	bgeu	r2,r9,80b9cc <_strtod_r+0xe3c>
  80b068:	04800044 	movi	r18,1
  80b06c:	003f3706 	br	80ad4c <_strtod_r+0x1bc>
  80b070:	7804c03a 	cmpne	r2,r15,zero
  80b074:	103f3d1e 	bne	r2,zero,80ad6c <_strtod_r+0x1dc>
  80b078:	9004c03a 	cmpne	r2,r18,zero
  80b07c:	103f5e1e 	bne	r2,zero,80adf8 <_strtod_r+0x268>
  80b080:	00801384 	movi	r2,78
  80b084:	2083a226 	beq	r4,r2,80bf10 <_strtod_r+0x1380>
  80b088:	11039d16 	blt	r2,r4,80bf00 <_strtod_r+0x1370>
  80b08c:	00801244 	movi	r2,73
  80b090:	20bf591e 	bne	r4,r2,80adf8 <_strtod_r+0x268>
  80b094:	dc000404 	addi	r16,sp,16
  80b098:	8009883a 	mov	r4,r16
  80b09c:	01402074 	movhi	r5,129
  80b0a0:	29548b04 	addi	r5,r5,21036
  80b0a4:	080ab480 	call	80ab48 <match>
  80b0a8:	103f5326 	beq	r2,zero,80adf8 <_strtod_r+0x268>
  80b0ac:	d8800417 	ldw	r2,16(sp)
  80b0b0:	8009883a 	mov	r4,r16
  80b0b4:	01402074 	movhi	r5,129
  80b0b8:	29548c04 	addi	r5,r5,21040
  80b0bc:	123fffc4 	addi	r8,r2,-1
  80b0c0:	da000415 	stw	r8,16(sp)
  80b0c4:	080ab480 	call	80ab48 <match>
  80b0c8:	1000031e 	bne	r2,zero,80b0d8 <_strtod_r+0x548>
  80b0cc:	d8800417 	ldw	r2,16(sp)
  80b0d0:	12000044 	addi	r8,r2,1
  80b0d4:	da000415 	stw	r8,16(sp)
  80b0d8:	019ffc34 	movhi	r6,32752
  80b0dc:	e1800115 	stw	r6,4(fp)
  80b0e0:	e0000015 	stw	zero,0(fp)
  80b0e4:	003f2106 	br	80ad6c <_strtod_r+0x1dc>
  80b0e8:	d9801215 	stw	r6,72(sp)
  80b0ec:	003f8506 	br	80af04 <_strtod_r+0x374>
  80b0f0:	d8001115 	stw	zero,68(sp)
  80b0f4:	42000044 	addi	r8,r8,1
  80b0f8:	da000415 	stw	r8,16(sp)
  80b0fc:	40800007 	ldb	r2,0(r8)
  80b100:	103eef1e 	bne	r2,zero,80acc0 <_strtod_r+0x130>
  80b104:	d8001115 	stw	zero,68(sp)
  80b108:	dc400415 	stw	r17,16(sp)
  80b10c:	003f1706 	br	80ad6c <_strtod_r+0x1dc>
  80b110:	42000044 	addi	r8,r8,1
  80b114:	da000415 	stw	r8,16(sp)
  80b118:	003eaf06 	br	80abd8 <_strtod_r+0x48>
  80b11c:	00800044 	movi	r2,1
  80b120:	d8801115 	stw	r2,68(sp)
  80b124:	003ff306 	br	80b0f4 <_strtod_r+0x564>
  80b128:	001d883a 	mov	r14,zero
  80b12c:	42000044 	addi	r8,r8,1
  80b130:	da000415 	stw	r8,16(sp)
  80b134:	21000047 	ldb	r4,1(r4)
  80b138:	00800244 	movi	r2,9
  80b13c:	20fff404 	addi	r3,r4,-48
  80b140:	10ff412e 	bgeu	r2,r3,80ae48 <_strtod_r+0x2b8>
  80b144:	000b883a 	mov	r5,zero
  80b148:	dc400415 	stw	r17,16(sp)
  80b14c:	003f0506 	br	80ad64 <_strtod_r+0x1d4>
  80b150:	d8c01117 	ldw	r3,68(sp)
  80b154:	04802074 	movhi	r18,129
  80b158:	94971004 	addi	r18,r18,23616
  80b15c:	d8800504 	addi	r2,sp,20
  80b160:	a809883a 	mov	r4,r21
  80b164:	d9400404 	addi	r5,sp,16
  80b168:	900d883a 	mov	r6,r18
  80b16c:	d9c00604 	addi	r7,sp,24
  80b170:	d8800015 	stw	r2,0(sp)
  80b174:	d8c00115 	stw	r3,4(sp)
  80b178:	080d0fc0 	call	80d0fc <__gethex>
  80b17c:	140001cc 	andi	r16,r2,7
  80b180:	1027883a 	mov	r19,r2
  80b184:	803ef926 	beq	r16,zero,80ad6c <_strtod_r+0x1dc>
  80b188:	05000184 	movi	r20,6
  80b18c:	853f1a26 	beq	r16,r20,80adf8 <_strtod_r+0x268>
  80b190:	d9800517 	ldw	r6,20(sp)
  80b194:	30000626 	beq	r6,zero,80b1b0 <_strtod_r+0x620>
  80b198:	91400017 	ldw	r5,0(r18)
  80b19c:	d9000d04 	addi	r4,sp,52
  80b1a0:	0809d880 	call	809d88 <__copybits>
  80b1a4:	d9400517 	ldw	r5,20(sp)
  80b1a8:	a809883a 	mov	r4,r21
  80b1ac:	08098e80 	call	8098e8 <_Bfree>
  80b1b0:	d9400617 	ldw	r5,24(sp)
  80b1b4:	a4024136 	bltu	r20,r16,80babc <_strtod_r+0xf2c>
  80b1b8:	8405883a 	add	r2,r16,r16
  80b1bc:	1085883a 	add	r2,r2,r2
  80b1c0:	00c02074 	movhi	r3,129
  80b1c4:	18ec7504 	addi	r3,r3,-20012
  80b1c8:	10c5883a 	add	r2,r2,r3
  80b1cc:	11000017 	ldw	r4,0(r2)
  80b1d0:	2000683a 	jmp	r4
  80b1d4:	0080bafc 	xorhi	r2,zero,747
  80b1d8:	0080bb08 	cmpgei	r2,zero,748
  80b1dc:	0080baac 	andhi	r2,zero,746
  80b1e0:	0080bad4 	movui	r2,747
  80b1e4:	0080bae4 	muli	r2,zero,747
  80b1e8:	0080bb08 	cmpgei	r2,zero,748
  80b1ec:	0080bafc 	xorhi	r2,zero,747
  80b1f0:	d8c00f17 	ldw	r3,60(sp)
  80b1f4:	9c85c83a 	sub	r2,r19,r18
  80b1f8:	18a1883a 	add	r16,r3,r2
  80b1fc:	0402d00e 	bge	zero,r16,80bd40 <_strtod_r+0x11b0>
  80b200:	814003cc 	andi	r5,r16,15
  80b204:	28000f26 	beq	r5,zero,80b244 <_strtod_r+0x6b4>
  80b208:	280a90fa 	slli	r5,r5,3
  80b20c:	01002074 	movhi	r4,129
  80b210:	21144204 	addi	r4,r4,20744
  80b214:	e0800017 	ldw	r2,0(fp)
  80b218:	290b883a 	add	r5,r5,r4
  80b21c:	2a000017 	ldw	r8,0(r5)
  80b220:	e0c00117 	ldw	r3,4(fp)
  80b224:	2a400117 	ldw	r9,4(r5)
  80b228:	1009883a 	mov	r4,r2
  80b22c:	180b883a 	mov	r5,r3
  80b230:	480f883a 	mov	r7,r9
  80b234:	400d883a 	mov	r6,r8
  80b238:	080ee7c0 	call	80ee7c <__muldf3>
  80b23c:	e0c00115 	stw	r3,4(fp)
  80b240:	e0800015 	stw	r2,0(fp)
  80b244:	00bffc04 	movi	r2,-16
  80b248:	808c703a 	and	r6,r16,r2
  80b24c:	30005b26 	beq	r6,zero,80b3bc <_strtod_r+0x82c>
  80b250:	00804d04 	movi	r2,308
  80b254:	1181fd16 	blt	r2,r6,80ba4c <_strtod_r+0xebc>
  80b258:	3021d13a 	srai	r16,r6,4
  80b25c:	00800044 	movi	r2,1
  80b260:	1403610e 	bge	r2,r16,80bfe8 <_strtod_r+0x1458>
  80b264:	102f883a 	mov	r23,r2
  80b268:	0025883a 	mov	r18,zero
  80b26c:	04402074 	movhi	r17,129
  80b270:	8c547404 	addi	r17,r17,20944
  80b274:	8080004c 	andi	r2,r16,1
  80b278:	1005003a 	cmpeq	r2,r2,zero
  80b27c:	1000091e 	bne	r2,zero,80b2a4 <_strtod_r+0x714>
  80b280:	e0800017 	ldw	r2,0(fp)
  80b284:	e0c00117 	ldw	r3,4(fp)
  80b288:	89800017 	ldw	r6,0(r17)
  80b28c:	89c00117 	ldw	r7,4(r17)
  80b290:	180b883a 	mov	r5,r3
  80b294:	1009883a 	mov	r4,r2
  80b298:	080ee7c0 	call	80ee7c <__muldf3>
  80b29c:	e0c00115 	stw	r3,4(fp)
  80b2a0:	e0800015 	stw	r2,0(fp)
  80b2a4:	8021d07a 	srai	r16,r16,1
  80b2a8:	94800044 	addi	r18,r18,1
  80b2ac:	8c400204 	addi	r17,r17,8
  80b2b0:	bc3ff016 	blt	r23,r16,80b274 <_strtod_r+0x6e4>
  80b2b4:	900e90fa 	slli	r7,r18,3
  80b2b8:	01802074 	movhi	r6,129
  80b2bc:	31947404 	addi	r6,r6,20944
  80b2c0:	e2000117 	ldw	r8,4(fp)
  80b2c4:	398f883a 	add	r7,r7,r6
  80b2c8:	38800017 	ldw	r2,0(r7)
  80b2cc:	38c00117 	ldw	r3,4(r7)
  80b2d0:	e1000017 	ldw	r4,0(fp)
  80b2d4:	01bf2c34 	movhi	r6,64688
  80b2d8:	418d883a 	add	r6,r8,r6
  80b2dc:	300b883a 	mov	r5,r6
  80b2e0:	180f883a 	mov	r7,r3
  80b2e4:	100d883a 	mov	r6,r2
  80b2e8:	080ee7c0 	call	80ee7c <__muldf3>
  80b2ec:	1009883a 	mov	r4,r2
  80b2f0:	180b883a 	mov	r5,r3
  80b2f4:	199ffc2c 	andhi	r6,r3,32752
  80b2f8:	009f2834 	movhi	r2,31904
  80b2fc:	e1000015 	stw	r4,0(fp)
  80b300:	e1400115 	stw	r5,4(fp)
  80b304:	1181d136 	bltu	r2,r6,80ba4c <_strtod_r+0xebc>
  80b308:	009f2434 	movhi	r2,31888
  80b30c:	1183202e 	bgeu	r2,r6,80bf90 <_strtod_r+0x1400>
  80b310:	d8001415 	stw	zero,80(sp)
  80b314:	019ffc34 	movhi	r6,32752
  80b318:	31bfffc4 	addi	r6,r6,-1
  80b31c:	01ffffc4 	movi	r7,-1
  80b320:	e1800115 	stw	r6,4(fp)
  80b324:	e1c00015 	stw	r7,0(fp)
  80b328:	00002506 	br	80b3c0 <_strtod_r+0x830>
  80b32c:	00800c04 	movi	r2,48
  80b330:	2083151e 	bne	r4,r2,80bf88 <_strtod_r+0x13f8>
  80b334:	2005883a 	mov	r2,r4
  80b338:	000f883a 	mov	r7,zero
  80b33c:	42000044 	addi	r8,r8,1
  80b340:	da000415 	stw	r8,16(sp)
  80b344:	41000007 	ldb	r4,0(r8)
  80b348:	39c00044 	addi	r7,r7,1
  80b34c:	20bffb26 	beq	r4,r2,80b33c <_strtod_r+0x7ac>
  80b350:	20fff3c4 	addi	r3,r4,-49
  80b354:	00800204 	movi	r2,8
  80b358:	10c1b836 	bltu	r2,r3,80ba3c <_strtod_r+0xeac>
  80b35c:	dd800417 	ldw	r22,16(sp)
  80b360:	3815883a 	mov	r10,r7
  80b364:	227ff404 	addi	r9,r4,-48
  80b368:	b011883a 	mov	r8,r22
  80b36c:	0027883a 	mov	r19,zero
  80b370:	01c00044 	movi	r7,1
  80b374:	4801fe26 	beq	r9,zero,80bb70 <_strtod_r+0xfe0>
  80b378:	00800044 	movi	r2,1
  80b37c:	51d5883a 	add	r10,r10,r7
  80b380:	11c31f0e 	bge	r2,r7,80c000 <_strtod_r+0x1470>
  80b384:	1009883a 	mov	r4,r2
  80b388:	9807883a 	mov	r3,r19
  80b38c:	02c00204 	movi	r11,8
  80b390:	03000404 	movi	r12,16
  80b394:	00000306 	br	80b3a4 <_strtod_r+0x814>
  80b398:	a50002a4 	muli	r20,r20,10
  80b39c:	21000044 	addi	r4,r4,1
  80b3a0:	21c1eb26 	beq	r4,r7,80bb50 <_strtod_r+0xfc0>
  80b3a4:	18c00044 	addi	r3,r3,1
  80b3a8:	18bfffc4 	addi	r2,r3,-1
  80b3ac:	58bffa0e 	bge	r11,r2,80b398 <_strtod_r+0x808>
  80b3b0:	60fffa16 	blt	r12,r3,80b39c <_strtod_r+0x80c>
  80b3b4:	840002a4 	muli	r16,r16,10
  80b3b8:	003ff806 	br	80b39c <_strtod_r+0x80c>
  80b3bc:	d8001415 	stw	zero,80(sp)
  80b3c0:	d9801217 	ldw	r6,72(sp)
  80b3c4:	a809883a 	mov	r4,r21
  80b3c8:	b00b883a 	mov	r5,r22
  80b3cc:	980f883a 	mov	r7,r19
  80b3d0:	dd000015 	stw	r20,0(sp)
  80b3d4:	080a7bc0 	call	80a7bc <__s2b>
  80b3d8:	d9800f17 	ldw	r6,60(sp)
  80b3dc:	11000304 	addi	r4,r2,12
  80b3e0:	d8801015 	stw	r2,64(sp)
  80b3e4:	300c803a 	cmplt	r6,r6,zero
  80b3e8:	d9001715 	stw	r4,92(sp)
  80b3ec:	d9801615 	stw	r6,88(sp)
  80b3f0:	d8801017 	ldw	r2,64(sp)
  80b3f4:	a809883a 	mov	r4,r21
  80b3f8:	11400117 	ldw	r5,4(r2)
  80b3fc:	0809e680 	call	809e68 <_Balloc>
  80b400:	d8c01017 	ldw	r3,64(sp)
  80b404:	d9401717 	ldw	r5,92(sp)
  80b408:	11000304 	addi	r4,r2,12
  80b40c:	19800417 	ldw	r6,16(r3)
  80b410:	102f883a 	mov	r23,r2
  80b414:	318d883a 	add	r6,r6,r6
  80b418:	318d883a 	add	r6,r6,r6
  80b41c:	31800204 	addi	r6,r6,8
  80b420:	08032940 	call	803294 <memcpy>
  80b424:	e2000017 	ldw	r8,0(fp)
  80b428:	e2400117 	ldw	r9,4(fp)
  80b42c:	d9800304 	addi	r6,sp,12
  80b430:	400b883a 	mov	r5,r8
  80b434:	a809883a 	mov	r4,r21
  80b438:	d9c00204 	addi	r7,sp,8
  80b43c:	d9800015 	stw	r6,0(sp)
  80b440:	480d883a 	mov	r6,r9
  80b444:	0809f240 	call	809f24 <__d2b>
  80b448:	a809883a 	mov	r4,r21
  80b44c:	01400044 	movi	r5,1
  80b450:	d8800515 	stw	r2,20(sp)
  80b454:	080a5600 	call	80a560 <__i2b>
  80b458:	102d883a 	mov	r22,r2
  80b45c:	d8801617 	ldw	r2,88(sp)
  80b460:	1001051e 	bne	r2,zero,80b878 <_strtod_r+0xce8>
  80b464:	dd000f17 	ldw	r20,60(sp)
  80b468:	000f883a 	mov	r7,zero
  80b46c:	0013883a 	mov	r9,zero
  80b470:	a011883a 	mov	r8,r20
  80b474:	d8800217 	ldw	r2,8(sp)
  80b478:	1000fd16 	blt	r2,zero,80b870 <_strtod_r+0xce0>
  80b47c:	388f883a 	add	r7,r7,r2
  80b480:	d9801417 	ldw	r6,80(sp)
  80b484:	d9400317 	ldw	r5,12(sp)
  80b488:	00ff0084 	movi	r3,-1022
  80b48c:	1189c83a 	sub	r4,r2,r6
  80b490:	2145883a 	add	r2,r4,r5
  80b494:	10bfffc4 	addi	r2,r2,-1
  80b498:	10c09f0e 	bge	r2,r3,80b718 <_strtod_r+0xb88>
  80b49c:	21810cc4 	addi	r6,r4,1075
  80b4a0:	d8c01417 	ldw	r3,80(sp)
  80b4a4:	4185883a 	add	r2,r8,r6
  80b4a8:	39a1883a 	add	r16,r7,r6
  80b4ac:	18a5883a 	add	r18,r3,r2
  80b4b0:	3807883a 	mov	r3,r7
  80b4b4:	81c0010e 	bge	r16,r7,80b4bc <_strtod_r+0x92c>
  80b4b8:	8007883a 	mov	r3,r16
  80b4bc:	9005883a 	mov	r2,r18
  80b4c0:	1c80010e 	bge	r3,r18,80b4c8 <_strtod_r+0x938>
  80b4c4:	1805883a 	mov	r2,r3
  80b4c8:	0080e70e 	bge	zero,r2,80b868 <_strtod_r+0xcd8>
  80b4cc:	38a7c83a 	sub	r19,r7,r2
  80b4d0:	80a1c83a 	sub	r16,r16,r2
  80b4d4:	90a5c83a 	sub	r18,r18,r2
  80b4d8:	02400e0e 	bge	zero,r9,80b514 <_strtod_r+0x984>
  80b4dc:	480d883a 	mov	r6,r9
  80b4e0:	b00b883a 	mov	r5,r22
  80b4e4:	a809883a 	mov	r4,r21
  80b4e8:	080a69c0 	call	80a69c <__pow5mult>
  80b4ec:	d9800517 	ldw	r6,20(sp)
  80b4f0:	a809883a 	mov	r4,r21
  80b4f4:	100b883a 	mov	r5,r2
  80b4f8:	102d883a 	mov	r22,r2
  80b4fc:	080a3780 	call	80a378 <__multiply>
  80b500:	d9400517 	ldw	r5,20(sp)
  80b504:	1023883a 	mov	r17,r2
  80b508:	a809883a 	mov	r4,r21
  80b50c:	08098e80 	call	8098e8 <_Bfree>
  80b510:	dc400515 	stw	r17,20(sp)
  80b514:	0400050e 	bge	zero,r16,80b52c <_strtod_r+0x99c>
  80b518:	d9400517 	ldw	r5,20(sp)
  80b51c:	800d883a 	mov	r6,r16
  80b520:	a809883a 	mov	r4,r21
  80b524:	080a22c0 	call	80a22c <__lshift>
  80b528:	d8800515 	stw	r2,20(sp)
  80b52c:	a000741e 	bne	r20,zero,80b700 <_strtod_r+0xb70>
  80b530:	0480050e 	bge	zero,r18,80b548 <_strtod_r+0x9b8>
  80b534:	b80b883a 	mov	r5,r23
  80b538:	900d883a 	mov	r6,r18
  80b53c:	a809883a 	mov	r4,r21
  80b540:	080a22c0 	call	80a22c <__lshift>
  80b544:	102f883a 	mov	r23,r2
  80b548:	04c0050e 	bge	zero,r19,80b560 <_strtod_r+0x9d0>
  80b54c:	b00b883a 	mov	r5,r22
  80b550:	980d883a 	mov	r6,r19
  80b554:	a809883a 	mov	r4,r21
  80b558:	080a22c0 	call	80a22c <__lshift>
  80b55c:	102d883a 	mov	r22,r2
  80b560:	d9400517 	ldw	r5,20(sp)
  80b564:	a809883a 	mov	r4,r21
  80b568:	b80d883a 	mov	r6,r23
  80b56c:	080a0a00 	call	80a0a0 <__mdiff>
  80b570:	11000317 	ldw	r4,12(r2)
  80b574:	b00b883a 	mov	r5,r22
  80b578:	10000315 	stw	zero,12(r2)
  80b57c:	d9001315 	stw	r4,76(sp)
  80b580:	1009883a 	mov	r4,r2
  80b584:	1029883a 	mov	r20,r2
  80b588:	0809a440 	call	809a44 <__mcmp>
  80b58c:	10017c16 	blt	r2,zero,80bb80 <_strtod_r+0xff0>
  80b590:	1001af26 	beq	r2,zero,80bc50 <_strtod_r+0x10c0>
  80b594:	a009883a 	mov	r4,r20
  80b598:	b00b883a 	mov	r5,r22
  80b59c:	0809c440 	call	809c44 <__ratio>
  80b5a0:	0011883a 	mov	r8,zero
  80b5a4:	02500034 	movhi	r9,16384
  80b5a8:	480f883a 	mov	r7,r9
  80b5ac:	1009883a 	mov	r4,r2
  80b5b0:	180b883a 	mov	r5,r3
  80b5b4:	400d883a 	mov	r6,r8
  80b5b8:	1021883a 	mov	r16,r2
  80b5bc:	1823883a 	mov	r17,r3
  80b5c0:	080f7400 	call	80f740 <__ledf2>
  80b5c4:	00805716 	blt	zero,r2,80b724 <_strtod_r+0xb94>
  80b5c8:	d9801317 	ldw	r6,76(sp)
  80b5cc:	3025003a 	cmpeq	r18,r6,zero
  80b5d0:	90008b1e 	bne	r18,zero,80b800 <_strtod_r+0xc70>
  80b5d4:	008ffc34 	movhi	r2,16368
  80b5d8:	0021883a 	mov	r16,zero
  80b5dc:	1023883a 	mov	r17,r2
  80b5e0:	d8000715 	stw	zero,28(sp)
  80b5e4:	d8800815 	stw	r2,32(sp)
  80b5e8:	e1c00117 	ldw	r7,4(fp)
  80b5ec:	009ff834 	movhi	r2,32736
  80b5f0:	3cdffc2c 	andhi	r19,r7,32752
  80b5f4:	98805e26 	beq	r19,r2,80b770 <_strtod_r+0xbe0>
  80b5f8:	d8801417 	ldw	r2,80(sp)
  80b5fc:	10001b26 	beq	r2,zero,80b66c <_strtod_r+0xadc>
  80b600:	0081a834 	movhi	r2,1696
  80b604:	14c01936 	bltu	r2,r19,80b66c <_strtod_r+0xadc>
  80b608:	00bff034 	movhi	r2,65472
  80b60c:	00d07834 	movhi	r3,16864
  80b610:	18ffffc4 	addi	r3,r3,-1
  80b614:	180f883a 	mov	r7,r3
  80b618:	8009883a 	mov	r4,r16
  80b61c:	880b883a 	mov	r5,r17
  80b620:	100d883a 	mov	r6,r2
  80b624:	080f7400 	call	80f740 <__ledf2>
  80b628:	00800b16 	blt	zero,r2,80b658 <_strtod_r+0xac8>
  80b62c:	880b883a 	mov	r5,r17
  80b630:	8009883a 	mov	r4,r16
  80b634:	080dbe00 	call	80dbe0 <__fixunsdfsi>
  80b638:	1000df1e 	bne	r2,zero,80b9b8 <_strtod_r+0xe28>
  80b63c:	0021883a 	mov	r16,zero
  80b640:	044ffc34 	movhi	r17,16368
  80b644:	9000d91e 	bne	r18,zero,80b9ac <_strtod_r+0xe1c>
  80b648:	8005883a 	mov	r2,r16
  80b64c:	8807883a 	mov	r3,r17
  80b650:	d8c00815 	stw	r3,32(sp)
  80b654:	d8800715 	stw	r2,28(sp)
  80b658:	d8800817 	ldw	r2,32(sp)
  80b65c:	00c1ac34 	movhi	r3,1712
  80b660:	14c5c83a 	sub	r2,r2,r19
  80b664:	10c5883a 	add	r2,r2,r3
  80b668:	d8800815 	stw	r2,32(sp)
  80b66c:	e0800017 	ldw	r2,0(fp)
  80b670:	e0c00117 	ldw	r3,4(fp)
  80b674:	1009883a 	mov	r4,r2
  80b678:	180b883a 	mov	r5,r3
  80b67c:	0809aa40 	call	809aa4 <__ulp>
  80b680:	d9800717 	ldw	r6,28(sp)
  80b684:	d9c00817 	ldw	r7,32(sp)
  80b688:	180b883a 	mov	r5,r3
  80b68c:	1009883a 	mov	r4,r2
  80b690:	080ee7c0 	call	80ee7c <__muldf3>
  80b694:	e2000017 	ldw	r8,0(fp)
  80b698:	e2400117 	ldw	r9,4(fp)
  80b69c:	180b883a 	mov	r5,r3
  80b6a0:	1009883a 	mov	r4,r2
  80b6a4:	480f883a 	mov	r7,r9
  80b6a8:	400d883a 	mov	r6,r8
  80b6ac:	080ee080 	call	80ee08 <__adddf3>
  80b6b0:	e0c00115 	stw	r3,4(fp)
  80b6b4:	e0800015 	stw	r2,0(fp)
  80b6b8:	d8c01417 	ldw	r3,80(sp)
  80b6bc:	e4800117 	ldw	r18,4(fp)
  80b6c0:	1800021e 	bne	r3,zero,80b6cc <_strtod_r+0xb3c>
  80b6c4:	909ffc2c 	andhi	r2,r18,32752
  80b6c8:	98807b26 	beq	r19,r2,80b8b8 <_strtod_r+0xd28>
  80b6cc:	d9400517 	ldw	r5,20(sp)
  80b6d0:	a809883a 	mov	r4,r21
  80b6d4:	08098e80 	call	8098e8 <_Bfree>
  80b6d8:	a809883a 	mov	r4,r21
  80b6dc:	b80b883a 	mov	r5,r23
  80b6e0:	08098e80 	call	8098e8 <_Bfree>
  80b6e4:	a809883a 	mov	r4,r21
  80b6e8:	b00b883a 	mov	r5,r22
  80b6ec:	08098e80 	call	8098e8 <_Bfree>
  80b6f0:	a809883a 	mov	r4,r21
  80b6f4:	a00b883a 	mov	r5,r20
  80b6f8:	08098e80 	call	8098e8 <_Bfree>
  80b6fc:	003f3c06 	br	80b3f0 <_strtod_r+0x860>
  80b700:	b80b883a 	mov	r5,r23
  80b704:	a00d883a 	mov	r6,r20
  80b708:	a809883a 	mov	r4,r21
  80b70c:	080a69c0 	call	80a69c <__pow5mult>
  80b710:	102f883a 	mov	r23,r2
  80b714:	003f8606 	br	80b530 <_strtod_r+0x9a0>
  80b718:	00800d84 	movi	r2,54
  80b71c:	114dc83a 	sub	r6,r2,r5
  80b720:	003f5f06 	br	80b4a0 <_strtod_r+0x910>
  80b724:	0005883a 	mov	r2,zero
  80b728:	00cff834 	movhi	r3,16352
  80b72c:	880b883a 	mov	r5,r17
  80b730:	8009883a 	mov	r4,r16
  80b734:	100d883a 	mov	r6,r2
  80b738:	180f883a 	mov	r7,r3
  80b73c:	080ee7c0 	call	80ee7c <__muldf3>
  80b740:	d9801317 	ldw	r6,76(sp)
  80b744:	1021883a 	mov	r16,r2
  80b748:	1823883a 	mov	r17,r3
  80b74c:	3025003a 	cmpeq	r18,r6,zero
  80b750:	90000126 	beq	r18,zero,80b758 <_strtod_r+0xbc8>
  80b754:	18e0003c 	xorhi	r3,r3,32768
  80b758:	d8800715 	stw	r2,28(sp)
  80b75c:	d8c00815 	stw	r3,32(sp)
  80b760:	e1c00117 	ldw	r7,4(fp)
  80b764:	009ff834 	movhi	r2,32736
  80b768:	3cdffc2c 	andhi	r19,r7,32752
  80b76c:	98bfa21e 	bne	r19,r2,80b5f8 <_strtod_r+0xa68>
  80b770:	e1000017 	ldw	r4,0(fp)
  80b774:	01bf2c34 	movhi	r6,64688
  80b778:	398d883a 	add	r6,r7,r6
  80b77c:	d9000b15 	stw	r4,44(sp)
  80b780:	d9c00c15 	stw	r7,48(sp)
  80b784:	300b883a 	mov	r5,r6
  80b788:	e1800115 	stw	r6,4(fp)
  80b78c:	0809aa40 	call	809aa4 <__ulp>
  80b790:	d9800717 	ldw	r6,28(sp)
  80b794:	d9c00817 	ldw	r7,32(sp)
  80b798:	180b883a 	mov	r5,r3
  80b79c:	1009883a 	mov	r4,r2
  80b7a0:	080ee7c0 	call	80ee7c <__muldf3>
  80b7a4:	e2000017 	ldw	r8,0(fp)
  80b7a8:	e2400117 	ldw	r9,4(fp)
  80b7ac:	180b883a 	mov	r5,r3
  80b7b0:	1009883a 	mov	r4,r2
  80b7b4:	480f883a 	mov	r7,r9
  80b7b8:	400d883a 	mov	r6,r8
  80b7bc:	080ee080 	call	80ee08 <__adddf3>
  80b7c0:	1009883a 	mov	r4,r2
  80b7c4:	180b883a 	mov	r5,r3
  80b7c8:	009f2834 	movhi	r2,31904
  80b7cc:	10bfffc4 	addi	r2,r2,-1
  80b7d0:	18dffc2c 	andhi	r3,r3,32752
  80b7d4:	e1000015 	stw	r4,0(fp)
  80b7d8:	e1400115 	stw	r5,4(fp)
  80b7dc:	10c06f2e 	bgeu	r2,r3,80b99c <_strtod_r+0xe0c>
  80b7e0:	d8800c17 	ldw	r2,48(sp)
  80b7e4:	011ffc34 	movhi	r4,32752
  80b7e8:	213fffc4 	addi	r4,r4,-1
  80b7ec:	11007a26 	beq	r2,r4,80b9d8 <_strtod_r+0xe48>
  80b7f0:	01ffffc4 	movi	r7,-1
  80b7f4:	e1000115 	stw	r4,4(fp)
  80b7f8:	e1c00015 	stw	r7,0(fp)
  80b7fc:	003fb306 	br	80b6cc <_strtod_r+0xb3c>
  80b800:	e0c00017 	ldw	r3,0(fp)
  80b804:	1800221e 	bne	r3,zero,80b890 <_strtod_r+0xd00>
  80b808:	e0800117 	ldw	r2,4(fp)
  80b80c:	00c00434 	movhi	r3,16
  80b810:	18ffffc4 	addi	r3,r3,-1
  80b814:	10c4703a 	and	r2,r2,r3
  80b818:	1000211e 	bne	r2,zero,80b8a0 <_strtod_r+0xd10>
  80b81c:	0005883a 	mov	r2,zero
  80b820:	00cffc34 	movhi	r3,16368
  80b824:	180f883a 	mov	r7,r3
  80b828:	8009883a 	mov	r4,r16
  80b82c:	880b883a 	mov	r5,r17
  80b830:	100d883a 	mov	r6,r2
  80b834:	080f6b80 	call	80f6b8 <__ltdf2>
  80b838:	10013c16 	blt	r2,zero,80bd2c <_strtod_r+0x119c>
  80b83c:	0005883a 	mov	r2,zero
  80b840:	00cff834 	movhi	r3,16352
  80b844:	880b883a 	mov	r5,r17
  80b848:	8009883a 	mov	r4,r16
  80b84c:	180f883a 	mov	r7,r3
  80b850:	100d883a 	mov	r6,r2
  80b854:	080ee7c0 	call	80ee7c <__muldf3>
  80b858:	1823883a 	mov	r17,r3
  80b85c:	1021883a 	mov	r16,r2
  80b860:	18e0003c 	xorhi	r3,r3,32768
  80b864:	003fbc06 	br	80b758 <_strtod_r+0xbc8>
  80b868:	3827883a 	mov	r19,r7
  80b86c:	003f1a06 	br	80b4d8 <_strtod_r+0x948>
  80b870:	4091c83a 	sub	r8,r8,r2
  80b874:	003f0206 	br	80b480 <_strtod_r+0x8f0>
  80b878:	d8c00f17 	ldw	r3,60(sp)
  80b87c:	0011883a 	mov	r8,zero
  80b880:	0029883a 	mov	r20,zero
  80b884:	00d3c83a 	sub	r9,zero,r3
  80b888:	480f883a 	mov	r7,r9
  80b88c:	003ef906 	br	80b474 <_strtod_r+0x8e4>
  80b890:	00800044 	movi	r2,1
  80b894:	1880021e 	bne	r3,r2,80b8a0 <_strtod_r+0xd10>
  80b898:	e0800117 	ldw	r2,4(fp)
  80b89c:	1000a526 	beq	r2,zero,80bb34 <_strtod_r+0xfa4>
  80b8a0:	00affc34 	movhi	r2,49136
  80b8a4:	0021883a 	mov	r16,zero
  80b8a8:	044ffc34 	movhi	r17,16368
  80b8ac:	d8800815 	stw	r2,32(sp)
  80b8b0:	d8000715 	stw	zero,28(sp)
  80b8b4:	003f4c06 	br	80b5e8 <_strtod_r+0xa58>
  80b8b8:	880b883a 	mov	r5,r17
  80b8bc:	8009883a 	mov	r4,r16
  80b8c0:	080f8c00 	call	80f8c0 <__fixdfsi>
  80b8c4:	1009883a 	mov	r4,r2
  80b8c8:	080f7c80 	call	80f7c8 <__floatsidf>
  80b8cc:	880b883a 	mov	r5,r17
  80b8d0:	8009883a 	mov	r4,r16
  80b8d4:	100d883a 	mov	r6,r2
  80b8d8:	180f883a 	mov	r7,r3
  80b8dc:	080ed880 	call	80ed88 <__subdf3>
  80b8e0:	d9001317 	ldw	r4,76(sp)
  80b8e4:	100b883a 	mov	r5,r2
  80b8e8:	180d883a 	mov	r6,r3
  80b8ec:	1021883a 	mov	r16,r2
  80b8f0:	1823883a 	mov	r17,r3
  80b8f4:	2000061e 	bne	r4,zero,80b910 <_strtod_r+0xd80>
  80b8f8:	e0800017 	ldw	r2,0(fp)
  80b8fc:	1000041e 	bne	r2,zero,80b910 <_strtod_r+0xd80>
  80b900:	00c00434 	movhi	r3,16
  80b904:	18ffffc4 	addi	r3,r3,-1
  80b908:	90c4703a 	and	r2,r18,r3
  80b90c:	10004026 	beq	r2,zero,80ba10 <_strtod_r+0xe80>
  80b910:	00a52834 	movhi	r2,38048
  80b914:	108d6544 	addi	r2,r2,13717
  80b918:	00cff834 	movhi	r3,16352
  80b91c:	18ffffc4 	addi	r3,r3,-1
  80b920:	180f883a 	mov	r7,r3
  80b924:	8009883a 	mov	r4,r16
  80b928:	880b883a 	mov	r5,r17
  80b92c:	100d883a 	mov	r6,r2
  80b930:	080f6b80 	call	80f6b8 <__ltdf2>
  80b934:	10000916 	blt	r2,zero,80b95c <_strtod_r+0xdcc>
  80b938:	008d6c34 	movhi	r2,13744
  80b93c:	10b94d44 	addi	r2,r2,-6859
  80b940:	00cff834 	movhi	r3,16352
  80b944:	880b883a 	mov	r5,r17
  80b948:	180f883a 	mov	r7,r3
  80b94c:	8009883a 	mov	r4,r16
  80b950:	100d883a 	mov	r6,r2
  80b954:	080f5a80 	call	80f5a8 <__gtdf2>
  80b958:	00bf5c0e 	bge	zero,r2,80b6cc <_strtod_r+0xb3c>
  80b95c:	d9400517 	ldw	r5,20(sp)
  80b960:	a809883a 	mov	r4,r21
  80b964:	08098e80 	call	8098e8 <_Bfree>
  80b968:	a809883a 	mov	r4,r21
  80b96c:	b80b883a 	mov	r5,r23
  80b970:	08098e80 	call	8098e8 <_Bfree>
  80b974:	a809883a 	mov	r4,r21
  80b978:	b00b883a 	mov	r5,r22
  80b97c:	08098e80 	call	8098e8 <_Bfree>
  80b980:	d9401017 	ldw	r5,64(sp)
  80b984:	a809883a 	mov	r4,r21
  80b988:	08098e80 	call	8098e8 <_Bfree>
  80b98c:	a809883a 	mov	r4,r21
  80b990:	a00b883a 	mov	r5,r20
  80b994:	08098e80 	call	8098e8 <_Bfree>
  80b998:	003cf406 	br	80ad6c <_strtod_r+0x1dc>
  80b99c:	0080d434 	movhi	r2,848
  80b9a0:	288d883a 	add	r6,r5,r2
  80b9a4:	e1800115 	stw	r6,4(fp)
  80b9a8:	003f4306 	br	80b6b8 <_strtod_r+0xb28>
  80b9ac:	8005883a 	mov	r2,r16
  80b9b0:	88e0003c 	xorhi	r3,r17,32768
  80b9b4:	003f2606 	br	80b650 <_strtod_r+0xac0>
  80b9b8:	1009883a 	mov	r4,r2
  80b9bc:	080fa0c0 	call	80fa0c <__floatunsidf>
  80b9c0:	1021883a 	mov	r16,r2
  80b9c4:	1823883a 	mov	r17,r3
  80b9c8:	003f1e06 	br	80b644 <_strtod_r+0xab4>
  80b9cc:	da000417 	ldw	r8,16(sp)
  80b9d0:	39c00044 	addi	r7,r7,1
  80b9d4:	003e6706 	br	80b374 <_strtod_r+0x7e4>
  80b9d8:	d8c00b17 	ldw	r3,44(sp)
  80b9dc:	00bfffc4 	movi	r2,-1
  80b9e0:	18bf831e 	bne	r3,r2,80b7f0 <_strtod_r+0xc60>
  80b9e4:	00c00884 	movi	r3,34
  80b9e8:	a8c00015 	stw	r3,0(r21)
  80b9ec:	009ffc34 	movhi	r2,32752
  80b9f0:	e0800115 	stw	r2,4(fp)
  80b9f4:	e0000015 	stw	zero,0(fp)
  80b9f8:	003fd806 	br	80b95c <_strtod_r+0xdcc>
  80b9fc:	4007883a 	mov	r3,r8
  80ba00:	000d883a 	mov	r6,zero
  80ba04:	0029883a 	mov	r20,zero
  80ba08:	0021883a 	mov	r16,zero
  80ba0c:	003cc906 	br	80ad34 <_strtod_r+0x1a4>
  80ba10:	00a52834 	movhi	r2,38048
  80ba14:	108d6544 	addi	r2,r2,13717
  80ba18:	00cff434 	movhi	r3,16336
  80ba1c:	18ffffc4 	addi	r3,r3,-1
  80ba20:	2809883a 	mov	r4,r5
  80ba24:	180f883a 	mov	r7,r3
  80ba28:	300b883a 	mov	r5,r6
  80ba2c:	100d883a 	mov	r6,r2
  80ba30:	080f6b80 	call	80f6b8 <__ltdf2>
  80ba34:	103f250e 	bge	r2,zero,80b6cc <_strtod_r+0xb3c>
  80ba38:	003fc806 	br	80b95c <_strtod_r+0xdcc>
  80ba3c:	0027883a 	mov	r19,zero
  80ba40:	04800044 	movi	r18,1
  80ba44:	0015883a 	mov	r10,zero
  80ba48:	003cc006 	br	80ad4c <_strtod_r+0x1bc>
  80ba4c:	00800884 	movi	r2,34
  80ba50:	a8800015 	stw	r2,0(r21)
  80ba54:	019ffc34 	movhi	r6,32752
  80ba58:	e1800115 	stw	r6,4(fp)
  80ba5c:	e0000015 	stw	zero,0(fp)
  80ba60:	003cc206 	br	80ad6c <_strtod_r+0x1dc>
  80ba64:	015387c4 	movi	r5,19999
  80ba68:	003d1e06 	br	80aee4 <_strtod_r+0x354>
  80ba6c:	300a90fa 	slli	r5,r6,3
  80ba70:	e0800017 	ldw	r2,0(fp)
  80ba74:	e0c00117 	ldw	r3,4(fp)
  80ba78:	01002074 	movhi	r4,129
  80ba7c:	21144204 	addi	r4,r4,20744
  80ba80:	290b883a 	add	r5,r5,r4
  80ba84:	2a000017 	ldw	r8,0(r5)
  80ba88:	2a400117 	ldw	r9,4(r5)
  80ba8c:	1009883a 	mov	r4,r2
  80ba90:	180b883a 	mov	r5,r3
  80ba94:	480f883a 	mov	r7,r9
  80ba98:	400d883a 	mov	r6,r8
  80ba9c:	080ee7c0 	call	80ee7c <__muldf3>
  80baa0:	e0c00115 	stw	r3,4(fp)
  80baa4:	e0800015 	stw	r2,0(fp)
  80baa8:	003cb006 	br	80ad6c <_strtod_r+0x1dc>
  80baac:	d8800d17 	ldw	r2,52(sp)
  80bab0:	e0800015 	stw	r2,0(fp)
  80bab4:	d8c00e17 	ldw	r3,56(sp)
  80bab8:	e0c00115 	stw	r3,4(fp)
  80babc:	9880020c 	andi	r2,r19,8
  80bac0:	103caa26 	beq	r2,zero,80ad6c <_strtod_r+0x1dc>
  80bac4:	e0800117 	ldw	r2,4(fp)
  80bac8:	10a00034 	orhi	r2,r2,32768
  80bacc:	e0800115 	stw	r2,4(fp)
  80bad0:	003ca606 	br	80ad6c <_strtod_r+0x1dc>
  80bad4:	009ffc34 	movhi	r2,32752
  80bad8:	e0800115 	stw	r2,4(fp)
  80badc:	e0000015 	stw	zero,0(fp)
  80bae0:	003ff606 	br	80babc <_strtod_r+0xf2c>
  80bae4:	00a00034 	movhi	r2,32768
  80bae8:	10bfffc4 	addi	r2,r2,-1
  80baec:	00ffffc4 	movi	r3,-1
  80baf0:	e0800115 	stw	r2,4(fp)
  80baf4:	e0c00015 	stw	r3,0(fp)
  80baf8:	003ff006 	br	80babc <_strtod_r+0xf2c>
  80bafc:	e0000115 	stw	zero,4(fp)
  80bb00:	e0000015 	stw	zero,0(fp)
  80bb04:	003fed06 	br	80babc <_strtod_r+0xf2c>
  80bb08:	d8800e17 	ldw	r2,56(sp)
  80bb0c:	29010cc4 	addi	r4,r5,1075
  80bb10:	00fffc34 	movhi	r3,65520
  80bb14:	18ffffc4 	addi	r3,r3,-1
  80bb18:	2008953a 	slli	r4,r4,20
  80bb1c:	10c4703a 	and	r2,r2,r3
  80bb20:	d8c00d17 	ldw	r3,52(sp)
  80bb24:	1104b03a 	or	r2,r2,r4
  80bb28:	e0800115 	stw	r2,4(fp)
  80bb2c:	e0c00015 	stw	r3,0(fp)
  80bb30:	003fe206 	br	80babc <_strtod_r+0xf2c>
  80bb34:	00800884 	movi	r2,34
  80bb38:	a8800015 	stw	r2,0(r21)
  80bb3c:	e0000015 	stw	zero,0(fp)
  80bb40:	e0000115 	stw	zero,4(fp)
  80bb44:	003f8506 	br	80b95c <_strtod_r+0xdcc>
  80bb48:	03800044 	movi	r14,1
  80bb4c:	003d7706 	br	80b12c <_strtod_r+0x59c>
  80bb50:	99c5883a 	add	r2,r19,r7
  80bb54:	11ffffc4 	addi	r7,r2,-1
  80bb58:	00800204 	movi	r2,8
  80bb5c:	3cc00044 	addi	r19,r7,1
  80bb60:	11c0df16 	blt	r2,r7,80bee0 <_strtod_r+0x1350>
  80bb64:	a08002a4 	muli	r2,r20,10
  80bb68:	000f883a 	mov	r7,zero
  80bb6c:	1269883a 	add	r20,r2,r9
  80bb70:	42000044 	addi	r8,r8,1
  80bb74:	da000415 	stw	r8,16(sp)
  80bb78:	41000007 	ldb	r4,0(r8)
  80bb7c:	003d3706 	br	80b05c <_strtod_r+0x4cc>
  80bb80:	d9801317 	ldw	r6,76(sp)
  80bb84:	3000511e 	bne	r6,zero,80bccc <_strtod_r+0x113c>
  80bb88:	e0800017 	ldw	r2,0(fp)
  80bb8c:	1000d81e 	bne	r2,zero,80bef0 <_strtod_r+0x1360>
  80bb90:	e0c00117 	ldw	r3,4(fp)
  80bb94:	01000434 	movhi	r4,16
  80bb98:	213fffc4 	addi	r4,r4,-1
  80bb9c:	1904703a 	and	r2,r3,r4
  80bba0:	1000b01e 	bne	r2,zero,80be64 <_strtod_r+0x12d4>
  80bba4:	18dffc2c 	andhi	r3,r3,32752
  80bba8:	0081ac34 	movhi	r2,1712
  80bbac:	10c1102e 	bgeu	r2,r3,80bff0 <_strtod_r+0x1460>
  80bbb0:	a0800517 	ldw	r2,20(r20)
  80bbb4:	1000031e 	bne	r2,zero,80bbc4 <_strtod_r+0x1034>
  80bbb8:	a0c00417 	ldw	r3,16(r20)
  80bbbc:	00800044 	movi	r2,1
  80bbc0:	10c0420e 	bge	r2,r3,80bccc <_strtod_r+0x113c>
  80bbc4:	a00b883a 	mov	r5,r20
  80bbc8:	a809883a 	mov	r4,r21
  80bbcc:	01800044 	movi	r6,1
  80bbd0:	080a22c0 	call	80a22c <__lshift>
  80bbd4:	1009883a 	mov	r4,r2
  80bbd8:	b00b883a 	mov	r5,r22
  80bbdc:	1029883a 	mov	r20,r2
  80bbe0:	0809a440 	call	809a44 <__mcmp>
  80bbe4:	0080c20e 	bge	zero,r2,80bef0 <_strtod_r+0x1360>
  80bbe8:	e1800117 	ldw	r6,4(fp)
  80bbec:	d9001417 	ldw	r4,80(sp)
  80bbf0:	2013003a 	cmpeq	r9,r4,zero
  80bbf4:	4800ef1e 	bne	r9,zero,80bfb4 <_strtod_r+0x1424>
  80bbf8:	30dffc2c 	andhi	r3,r6,32752
  80bbfc:	0081ac34 	movhi	r2,1712
  80bc00:	10c0ec36 	bltu	r2,r3,80bfb4 <_strtod_r+0x1424>
  80bc04:	0080dc34 	movhi	r2,880
  80bc08:	10ffca2e 	bgeu	r2,r3,80bb34 <_strtod_r+0xfa4>
  80bc0c:	e0800017 	ldw	r2,0(fp)
  80bc10:	e0c00117 	ldw	r3,4(fp)
  80bc14:	020e5434 	movhi	r8,14672
  80bc18:	000d883a 	mov	r6,zero
  80bc1c:	400f883a 	mov	r7,r8
  80bc20:	180b883a 	mov	r5,r3
  80bc24:	1009883a 	mov	r4,r2
  80bc28:	da000c15 	stw	r8,48(sp)
  80bc2c:	d8000b15 	stw	zero,44(sp)
  80bc30:	080ee7c0 	call	80ee7c <__muldf3>
  80bc34:	e0800015 	stw	r2,0(fp)
  80bc38:	e0c00115 	stw	r3,4(fp)
  80bc3c:	183f471e 	bne	r3,zero,80b95c <_strtod_r+0xdcc>
  80bc40:	103f461e 	bne	r2,zero,80b95c <_strtod_r+0xdcc>
  80bc44:	00800884 	movi	r2,34
  80bc48:	a8800015 	stw	r2,0(r21)
  80bc4c:	003f4306 	br	80b95c <_strtod_r+0xdcc>
  80bc50:	d8801317 	ldw	r2,76(sp)
  80bc54:	1025003a 	cmpeq	r18,r2,zero
  80bc58:	9000861e 	bne	r18,zero,80be74 <_strtod_r+0x12e4>
  80bc5c:	e1400117 	ldw	r5,4(fp)
  80bc60:	00c00434 	movhi	r3,16
  80bc64:	18ffffc4 	addi	r3,r3,-1
  80bc68:	28c4703a 	and	r2,r5,r3
  80bc6c:	10c01b26 	beq	r2,r3,80bcdc <_strtod_r+0x114c>
  80bc70:	e1c00017 	ldw	r7,0(fp)
  80bc74:	3880004c 	andi	r2,r7,1
  80bc78:	1005003a 	cmpeq	r2,r2,zero
  80bc7c:	1000791e 	bne	r2,zero,80be64 <_strtod_r+0x12d4>
  80bc80:	9000b126 	beq	r18,zero,80bf48 <_strtod_r+0x13b8>
  80bc84:	e4400117 	ldw	r17,4(fp)
  80bc88:	3809883a 	mov	r4,r7
  80bc8c:	3821883a 	mov	r16,r7
  80bc90:	880b883a 	mov	r5,r17
  80bc94:	0809aa40 	call	809aa4 <__ulp>
  80bc98:	180f883a 	mov	r7,r3
  80bc9c:	880b883a 	mov	r5,r17
  80bca0:	8009883a 	mov	r4,r16
  80bca4:	100d883a 	mov	r6,r2
  80bca8:	080ed880 	call	80ed88 <__subdf3>
  80bcac:	1009883a 	mov	r4,r2
  80bcb0:	000d883a 	mov	r6,zero
  80bcb4:	000f883a 	mov	r7,zero
  80bcb8:	180b883a 	mov	r5,r3
  80bcbc:	e0800015 	stw	r2,0(fp)
  80bcc0:	e0c00115 	stw	r3,4(fp)
  80bcc4:	080f5200 	call	80f520 <__nedf2>
  80bcc8:	103f9a26 	beq	r2,zero,80bb34 <_strtod_r+0xfa4>
  80bccc:	d9001417 	ldw	r4,80(sp)
  80bcd0:	2013003a 	cmpeq	r9,r4,zero
  80bcd4:	483f211e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80bcd8:	003fcc06 	br	80bc0c <_strtod_r+0x107c>
  80bcdc:	d9001417 	ldw	r4,80(sp)
  80bce0:	e1c00017 	ldw	r7,0(fp)
  80bce4:	2013003a 	cmpeq	r9,r4,zero
  80bce8:	4800bd1e 	bne	r9,zero,80bfe0 <_strtod_r+0x1450>
  80bcec:	28dffc2c 	andhi	r3,r5,32752
  80bcf0:	0081a834 	movhi	r2,1696
  80bcf4:	10c0ba36 	bltu	r2,r3,80bfe0 <_strtod_r+0x1450>
  80bcf8:	1804d53a 	srli	r2,r3,20
  80bcfc:	00c01ac4 	movi	r3,107
  80bd00:	013fffc4 	movi	r4,-1
  80bd04:	1887c83a 	sub	r3,r3,r2
  80bd08:	20c4983a 	sll	r2,r4,r3
  80bd0c:	11ffd91e 	bne	r2,r7,80bc74 <_strtod_r+0x10e4>
  80bd10:	28dffc2c 	andhi	r3,r5,32752
  80bd14:	00800434 	movhi	r2,16
  80bd18:	188d883a 	add	r6,r3,r2
  80bd1c:	e1800115 	stw	r6,4(fp)
  80bd20:	e0000015 	stw	zero,0(fp)
  80bd24:	483f0d1e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80bd28:	003fb806 	br	80bc0c <_strtod_r+0x107c>
  80bd2c:	0021883a 	mov	r16,zero
  80bd30:	0005883a 	mov	r2,zero
  80bd34:	044ff834 	movhi	r17,16352
  80bd38:	00eff834 	movhi	r3,49120
  80bd3c:	003e8606 	br	80b758 <_strtod_r+0xbc8>
  80bd40:	803d9e26 	beq	r16,zero,80b3bc <_strtod_r+0x82c>
  80bd44:	0421c83a 	sub	r16,zero,r16
  80bd48:	814003cc 	andi	r5,r16,15
  80bd4c:	28000f26 	beq	r5,zero,80bd8c <_strtod_r+0x11fc>
  80bd50:	280a90fa 	slli	r5,r5,3
  80bd54:	01002074 	movhi	r4,129
  80bd58:	21144204 	addi	r4,r4,20744
  80bd5c:	e0800017 	ldw	r2,0(fp)
  80bd60:	290b883a 	add	r5,r5,r4
  80bd64:	2a000017 	ldw	r8,0(r5)
  80bd68:	e0c00117 	ldw	r3,4(fp)
  80bd6c:	2a400117 	ldw	r9,4(r5)
  80bd70:	1009883a 	mov	r4,r2
  80bd74:	180b883a 	mov	r5,r3
  80bd78:	480f883a 	mov	r7,r9
  80bd7c:	400d883a 	mov	r6,r8
  80bd80:	080f2400 	call	80f240 <__divdf3>
  80bd84:	e0c00115 	stw	r3,4(fp)
  80bd88:	e0800015 	stw	r2,0(fp)
  80bd8c:	8021d13a 	srai	r16,r16,4
  80bd90:	803d8a26 	beq	r16,zero,80b3bc <_strtod_r+0x82c>
  80bd94:	008007c4 	movi	r2,31
  80bd98:	14002d16 	blt	r2,r16,80be50 <_strtod_r+0x12c0>
  80bd9c:	8080040c 	andi	r2,r16,16
  80bda0:	10009926 	beq	r2,zero,80c008 <_strtod_r+0x1478>
  80bda4:	00801a84 	movi	r2,106
  80bda8:	d8801415 	stw	r2,80(sp)
  80bdac:	0400110e 	bge	zero,r16,80bdf4 <_strtod_r+0x1264>
  80bdb0:	04402074 	movhi	r17,129
  80bdb4:	8c548f04 	addi	r17,r17,21052
  80bdb8:	8080004c 	andi	r2,r16,1
  80bdbc:	1005003a 	cmpeq	r2,r2,zero
  80bdc0:	1000091e 	bne	r2,zero,80bde8 <_strtod_r+0x1258>
  80bdc4:	e0800017 	ldw	r2,0(fp)
  80bdc8:	e0c00117 	ldw	r3,4(fp)
  80bdcc:	89800017 	ldw	r6,0(r17)
  80bdd0:	89c00117 	ldw	r7,4(r17)
  80bdd4:	180b883a 	mov	r5,r3
  80bdd8:	1009883a 	mov	r4,r2
  80bddc:	080ee7c0 	call	80ee7c <__muldf3>
  80bde0:	e0c00115 	stw	r3,4(fp)
  80bde4:	e0800015 	stw	r2,0(fp)
  80bde8:	8021d07a 	srai	r16,r16,1
  80bdec:	8c400204 	addi	r17,r17,8
  80bdf0:	043ff116 	blt	zero,r16,80bdb8 <_strtod_r+0x1228>
  80bdf4:	d8c01417 	ldw	r3,80(sp)
  80bdf8:	18000d26 	beq	r3,zero,80be30 <_strtod_r+0x12a0>
  80bdfc:	e1000117 	ldw	r4,4(fp)
  80be00:	00c01ac4 	movi	r3,107
  80be04:	209ffc2c 	andhi	r2,r4,32752
  80be08:	1004d53a 	srli	r2,r2,20
  80be0c:	1887c83a 	sub	r3,r3,r2
  80be10:	00c0070e 	bge	zero,r3,80be30 <_strtod_r+0x12a0>
  80be14:	008007c4 	movi	r2,31
  80be18:	10c0900e 	bge	r2,r3,80c05c <_strtod_r+0x14cc>
  80be1c:	00800d04 	movi	r2,52
  80be20:	e0000015 	stw	zero,0(fp)
  80be24:	10c0870e 	bge	r2,r3,80c044 <_strtod_r+0x14b4>
  80be28:	0180dc34 	movhi	r6,880
  80be2c:	e1800115 	stw	r6,4(fp)
  80be30:	e0800017 	ldw	r2,0(fp)
  80be34:	e0c00117 	ldw	r3,4(fp)
  80be38:	000d883a 	mov	r6,zero
  80be3c:	000f883a 	mov	r7,zero
  80be40:	180b883a 	mov	r5,r3
  80be44:	1009883a 	mov	r4,r2
  80be48:	080f5200 	call	80f520 <__nedf2>
  80be4c:	103d5c1e 	bne	r2,zero,80b3c0 <_strtod_r+0x830>
  80be50:	00800884 	movi	r2,34
  80be54:	a8800015 	stw	r2,0(r21)
  80be58:	e0000015 	stw	zero,0(fp)
  80be5c:	e0000115 	stw	zero,4(fp)
  80be60:	003bc206 	br	80ad6c <_strtod_r+0x1dc>
  80be64:	d8801417 	ldw	r2,80(sp)
  80be68:	1013003a 	cmpeq	r9,r2,zero
  80be6c:	483ebb1e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80be70:	003f6606 	br	80bc0c <_strtod_r+0x107c>
  80be74:	e1800117 	ldw	r6,4(fp)
  80be78:	00c00434 	movhi	r3,16
  80be7c:	18ffffc4 	addi	r3,r3,-1
  80be80:	30c4703a 	and	r2,r6,r3
  80be84:	103f7a1e 	bne	r2,zero,80bc70 <_strtod_r+0x10e0>
  80be88:	e1c00017 	ldw	r7,0(fp)
  80be8c:	383f791e 	bne	r7,zero,80bc74 <_strtod_r+0x10e4>
  80be90:	003f5606 	br	80bbec <_strtod_r+0x105c>
  80be94:	d9800f17 	ldw	r6,60(sp)
  80be98:	00bffa84 	movi	r2,-22
  80be9c:	30bcd416 	blt	r6,r2,80b1f0 <_strtod_r+0x660>
  80bea0:	317ffe24 	muli	r5,r6,-8
  80bea4:	01002074 	movhi	r4,129
  80bea8:	21144204 	addi	r4,r4,20744
  80beac:	e0800017 	ldw	r2,0(fp)
  80beb0:	290b883a 	add	r5,r5,r4
  80beb4:	2a000017 	ldw	r8,0(r5)
  80beb8:	e0c00117 	ldw	r3,4(fp)
  80bebc:	2a400117 	ldw	r9,4(r5)
  80bec0:	1009883a 	mov	r4,r2
  80bec4:	180b883a 	mov	r5,r3
  80bec8:	480f883a 	mov	r7,r9
  80becc:	400d883a 	mov	r6,r8
  80bed0:	080f2400 	call	80f240 <__divdf3>
  80bed4:	e0c00115 	stw	r3,4(fp)
  80bed8:	e0800015 	stw	r2,0(fp)
  80bedc:	003ba306 	br	80ad6c <_strtod_r+0x1dc>
  80bee0:	00800404 	movi	r2,16
  80bee4:	14c02f0e 	bge	r2,r19,80bfa4 <_strtod_r+0x1414>
  80bee8:	000f883a 	mov	r7,zero
  80beec:	003f2006 	br	80bb70 <_strtod_r+0xfe0>
  80bef0:	d9801417 	ldw	r6,80(sp)
  80bef4:	3013003a 	cmpeq	r9,r6,zero
  80bef8:	483e981e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80befc:	003f4306 	br	80bc0c <_strtod_r+0x107c>
  80bf00:	00801a44 	movi	r2,105
  80bf04:	20bc6326 	beq	r4,r2,80b094 <_strtod_r+0x504>
  80bf08:	00801b84 	movi	r2,110
  80bf0c:	20bbba1e 	bne	r4,r2,80adf8 <_strtod_r+0x268>
  80bf10:	dc000404 	addi	r16,sp,16
  80bf14:	8009883a 	mov	r4,r16
  80bf18:	01402074 	movhi	r5,129
  80bf1c:	29548e04 	addi	r5,r5,21048
  80bf20:	080ab480 	call	80ab48 <match>
  80bf24:	103bb426 	beq	r2,zero,80adf8 <_strtod_r+0x268>
  80bf28:	d8800417 	ldw	r2,16(sp)
  80bf2c:	00c00a04 	movi	r3,40
  80bf30:	11000007 	ldb	r4,0(r2)
  80bf34:	20c03626 	beq	r4,r3,80c010 <_strtod_r+0x1480>
  80bf38:	01bffe34 	movhi	r6,65528
  80bf3c:	e1800115 	stw	r6,4(fp)
  80bf40:	e0000015 	stw	zero,0(fp)
  80bf44:	003b8906 	br	80ad6c <_strtod_r+0x1dc>
  80bf48:	e4400117 	ldw	r17,4(fp)
  80bf4c:	3809883a 	mov	r4,r7
  80bf50:	3821883a 	mov	r16,r7
  80bf54:	880b883a 	mov	r5,r17
  80bf58:	0809aa40 	call	809aa4 <__ulp>
  80bf5c:	100d883a 	mov	r6,r2
  80bf60:	880b883a 	mov	r5,r17
  80bf64:	180f883a 	mov	r7,r3
  80bf68:	8009883a 	mov	r4,r16
  80bf6c:	080ee080 	call	80ee08 <__adddf3>
  80bf70:	d9801417 	ldw	r6,80(sp)
  80bf74:	e0c00115 	stw	r3,4(fp)
  80bf78:	e0800015 	stw	r2,0(fp)
  80bf7c:	3013003a 	cmpeq	r9,r6,zero
  80bf80:	483e761e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80bf84:	003f2106 	br	80bc0c <_strtod_r+0x107c>
  80bf88:	000f883a 	mov	r7,zero
  80bf8c:	003cf006 	br	80b350 <_strtod_r+0x7c0>
  80bf90:	0080d434 	movhi	r2,848
  80bf94:	188d883a 	add	r6,r3,r2
  80bf98:	d8001415 	stw	zero,80(sp)
  80bf9c:	e1800115 	stw	r6,4(fp)
  80bfa0:	003d0706 	br	80b3c0 <_strtod_r+0x830>
  80bfa4:	808002a4 	muli	r2,r16,10
  80bfa8:	000f883a 	mov	r7,zero
  80bfac:	1261883a 	add	r16,r2,r9
  80bfb0:	003eef06 	br	80bb70 <_strtod_r+0xfe0>
  80bfb4:	309ffc2c 	andhi	r2,r6,32752
  80bfb8:	00fffc34 	movhi	r3,65520
  80bfbc:	10c5883a 	add	r2,r2,r3
  80bfc0:	00c00434 	movhi	r3,16
  80bfc4:	18ffffc4 	addi	r3,r3,-1
  80bfc8:	10ccb03a 	or	r6,r2,r3
  80bfcc:	01ffffc4 	movi	r7,-1
  80bfd0:	e1800115 	stw	r6,4(fp)
  80bfd4:	e1c00015 	stw	r7,0(fp)
  80bfd8:	483e601e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80bfdc:	003f0b06 	br	80bc0c <_strtod_r+0x107c>
  80bfe0:	00bfffc4 	movi	r2,-1
  80bfe4:	003f4906 	br	80bd0c <_strtod_r+0x117c>
  80bfe8:	0025883a 	mov	r18,zero
  80bfec:	003cb106 	br	80b2b4 <_strtod_r+0x724>
  80bff0:	d8c01417 	ldw	r3,80(sp)
  80bff4:	1813003a 	cmpeq	r9,r3,zero
  80bff8:	483e581e 	bne	r9,zero,80b95c <_strtod_r+0xdcc>
  80bffc:	003f0306 	br	80bc0c <_strtod_r+0x107c>
  80c000:	980f883a 	mov	r7,r19
  80c004:	003ed406 	br	80bb58 <_strtod_r+0xfc8>
  80c008:	d8001415 	stw	zero,80(sp)
  80c00c:	003f6706 	br	80bdac <_strtod_r+0x121c>
  80c010:	8009883a 	mov	r4,r16
  80c014:	01402074 	movhi	r5,129
  80c018:	29570b04 	addi	r5,r5,23596
  80c01c:	d9800d04 	addi	r6,sp,52
  80c020:	080d9000 	call	80d900 <__hexnan>
  80c024:	00c00144 	movi	r3,5
  80c028:	10ffc31e 	bne	r2,r3,80bf38 <_strtod_r+0x13a8>
  80c02c:	d8800e17 	ldw	r2,56(sp)
  80c030:	d9c00d17 	ldw	r7,52(sp)
  80c034:	119ffc34 	orhi	r6,r2,32752
  80c038:	e1800115 	stw	r6,4(fp)
  80c03c:	e1c00015 	stw	r7,0(fp)
  80c040:	003b4a06 	br	80ad6c <_strtod_r+0x1dc>
  80c044:	18fff804 	addi	r3,r3,-32
  80c048:	00bfffc4 	movi	r2,-1
  80c04c:	10c4983a 	sll	r2,r2,r3
  80c050:	208c703a 	and	r6,r4,r2
  80c054:	e1800115 	stw	r6,4(fp)
  80c058:	003f7506 	br	80be30 <_strtod_r+0x12a0>
  80c05c:	00bfffc4 	movi	r2,-1
  80c060:	10c4983a 	sll	r2,r2,r3
  80c064:	e0c00017 	ldw	r3,0(fp)
  80c068:	188e703a 	and	r7,r3,r2
  80c06c:	e1c00015 	stw	r7,0(fp)
  80c070:	003f6f06 	br	80be30 <_strtod_r+0x12a0>

0080c074 <strtof>:
  80c074:	defffa04 	addi	sp,sp,-24
  80c078:	dd000415 	stw	r20,16(sp)
  80c07c:	05002074 	movhi	r20,129
  80c080:	a51c1404 	addi	r20,r20,28752
  80c084:	2007883a 	mov	r3,r4
  80c088:	a1000017 	ldw	r4,0(r20)
  80c08c:	280d883a 	mov	r6,r5
  80c090:	180b883a 	mov	r5,r3
  80c094:	dfc00515 	stw	ra,20(sp)
  80c098:	dcc00315 	stw	r19,12(sp)
  80c09c:	dc800215 	stw	r18,8(sp)
  80c0a0:	dc400115 	stw	r17,4(sp)
  80c0a4:	dc000015 	stw	r16,0(sp)
  80c0a8:	080ab900 	call	80ab90 <_strtod_r>
  80c0ac:	180b883a 	mov	r5,r3
  80c0b0:	1009883a 	mov	r4,r2
  80c0b4:	1823883a 	mov	r17,r3
  80c0b8:	1021883a 	mov	r16,r2
  80c0bc:	080f9980 	call	80f998 <__truncdfsf2>
  80c0c0:	1009883a 	mov	r4,r2
  80c0c4:	000b883a 	mov	r5,zero
  80c0c8:	1025883a 	mov	r18,r2
  80c0cc:	1027883a 	mov	r19,r2
  80c0d0:	080e8100 	call	80e810 <__nesf2>
  80c0d4:	000d883a 	mov	r6,zero
  80c0d8:	000f883a 	mov	r7,zero
  80c0dc:	8009883a 	mov	r4,r16
  80c0e0:	880b883a 	mov	r5,r17
  80c0e4:	10000e1e 	bne	r2,zero,80c120 <strtof+0xac>
  80c0e8:	080f5200 	call	80f520 <__nedf2>
  80c0ec:	10000c26 	beq	r2,zero,80c120 <strtof+0xac>
  80c0f0:	a0c00017 	ldw	r3,0(r20)
  80c0f4:	00800884 	movi	r2,34
  80c0f8:	18800015 	stw	r2,0(r3)
  80c0fc:	9805883a 	mov	r2,r19
  80c100:	dfc00517 	ldw	ra,20(sp)
  80c104:	dd000417 	ldw	r20,16(sp)
  80c108:	dcc00317 	ldw	r19,12(sp)
  80c10c:	dc800217 	ldw	r18,8(sp)
  80c110:	dc400117 	ldw	r17,4(sp)
  80c114:	dc000017 	ldw	r16,0(sp)
  80c118:	dec00604 	addi	sp,sp,24
  80c11c:	f800283a 	ret
  80c120:	9009883a 	mov	r4,r18
  80c124:	015fe034 	movhi	r5,32640
  80c128:	297fffc4 	addi	r5,r5,-1
  80c12c:	080e8880 	call	80e888 <__gtsf2>
  80c130:	00ffffc4 	movi	r3,-1
  80c134:	011ffc34 	movhi	r4,32752
  80c138:	213fffc4 	addi	r4,r4,-1
  80c13c:	200f883a 	mov	r7,r4
  80c140:	180d883a 	mov	r6,r3
  80c144:	8009883a 	mov	r4,r16
  80c148:	880b883a 	mov	r5,r17
  80c14c:	00800f16 	blt	zero,r2,80c18c <strtof+0x118>
  80c150:	9009883a 	mov	r4,r18
  80c154:	017fe034 	movhi	r5,65408
  80c158:	297fffc4 	addi	r5,r5,-1
  80c15c:	080e9000 	call	80e900 <__ltsf2>
  80c160:	023fffc4 	movi	r8,-1
  80c164:	027ffc34 	movhi	r9,65520
  80c168:	4a7fffc4 	addi	r9,r9,-1
  80c16c:	880b883a 	mov	r5,r17
  80c170:	480f883a 	mov	r7,r9
  80c174:	8009883a 	mov	r4,r16
  80c178:	400d883a 	mov	r6,r8
  80c17c:	103fdf0e 	bge	r2,zero,80c0fc <strtof+0x88>
  80c180:	080f6b80 	call	80f6b8 <__ltdf2>
  80c184:	103fda0e 	bge	r2,zero,80c0f0 <strtof+0x7c>
  80c188:	003fdc06 	br	80c0fc <strtof+0x88>
  80c18c:	080f5a80 	call	80f5a8 <__gtdf2>
  80c190:	00bfd70e 	bge	zero,r2,80c0f0 <strtof+0x7c>
  80c194:	003fee06 	br	80c150 <strtof+0xdc>

0080c198 <strtod>:
  80c198:	01802074 	movhi	r6,129
  80c19c:	319c1404 	addi	r6,r6,28752
  80c1a0:	2007883a 	mov	r3,r4
  80c1a4:	31000017 	ldw	r4,0(r6)
  80c1a8:	280d883a 	mov	r6,r5
  80c1ac:	180b883a 	mov	r5,r3
  80c1b0:	080ab901 	jmpi	80ab90 <_strtod_r>

0080c1b4 <_strtol_r>:
  80c1b4:	defff304 	addi	sp,sp,-52
  80c1b8:	00802074 	movhi	r2,129
  80c1bc:	109c1804 	addi	r2,r2,28768
  80c1c0:	dcc00615 	stw	r19,24(sp)
  80c1c4:	14c00017 	ldw	r19,0(r2)
  80c1c8:	ddc00a15 	stw	r23,40(sp)
  80c1cc:	dc000315 	stw	r16,12(sp)
  80c1d0:	dfc00c15 	stw	ra,48(sp)
  80c1d4:	df000b15 	stw	fp,44(sp)
  80c1d8:	dd800915 	stw	r22,36(sp)
  80c1dc:	dd400815 	stw	r21,32(sp)
  80c1e0:	dd000715 	stw	r20,28(sp)
  80c1e4:	dc800515 	stw	r18,20(sp)
  80c1e8:	dc400415 	stw	r17,16(sp)
  80c1ec:	282f883a 	mov	r23,r5
  80c1f0:	d9000015 	stw	r4,0(sp)
  80c1f4:	d9800115 	stw	r6,4(sp)
  80c1f8:	2821883a 	mov	r16,r5
  80c1fc:	84400007 	ldb	r17,0(r16)
  80c200:	84000044 	addi	r16,r16,1
  80c204:	9c47883a 	add	r3,r19,r17
  80c208:	18800003 	ldbu	r2,0(r3)
  80c20c:	1080020c 	andi	r2,r2,8
  80c210:	103ffa1e 	bne	r2,zero,80c1fc <_strtol_r+0x48>
  80c214:	00800b44 	movi	r2,45
  80c218:	88805c26 	beq	r17,r2,80c38c <_strtol_r+0x1d8>
  80c21c:	00800ac4 	movi	r2,43
  80c220:	88805726 	beq	r17,r2,80c380 <_strtol_r+0x1cc>
  80c224:	0039883a 	mov	fp,zero
  80c228:	3807003a 	cmpeq	r3,r7,zero
  80c22c:	1800431e 	bne	r3,zero,80c33c <_strtol_r+0x188>
  80c230:	00800404 	movi	r2,16
  80c234:	38804126 	beq	r7,r2,80c33c <_strtol_r+0x188>
  80c238:	3829883a 	mov	r20,r7
  80c23c:	e02cc03a 	cmpne	r22,fp,zero
  80c240:	b0004b1e 	bne	r22,zero,80c370 <_strtol_r+0x1bc>
  80c244:	04a00034 	movhi	r18,32768
  80c248:	94bfffc4 	addi	r18,r18,-1
  80c24c:	9009883a 	mov	r4,r18
  80c250:	a00b883a 	mov	r5,r20
  80c254:	d9c00215 	stw	r7,8(sp)
  80c258:	080fce40 	call	80fce4 <__umodsi3>
  80c25c:	9009883a 	mov	r4,r18
  80c260:	a00b883a 	mov	r5,r20
  80c264:	102b883a 	mov	r21,r2
  80c268:	080fcdc0 	call	80fcdc <__udivsi3>
  80c26c:	1011883a 	mov	r8,r2
  80c270:	9c45883a 	add	r2,r19,r17
  80c274:	11000003 	ldbu	r4,0(r2)
  80c278:	000b883a 	mov	r5,zero
  80c27c:	000d883a 	mov	r6,zero
  80c280:	20c0010c 	andi	r3,r4,4
  80c284:	d9c00217 	ldw	r7,8(sp)
  80c288:	18000e26 	beq	r3,zero,80c2c4 <_strtol_r+0x110>
  80c28c:	88fff404 	addi	r3,r17,-48
  80c290:	19c0140e 	bge	r3,r7,80c2e4 <_strtol_r+0x130>
  80c294:	30003116 	blt	r6,zero,80c35c <_strtol_r+0x1a8>
  80c298:	41403036 	bltu	r8,r5,80c35c <_strtol_r+0x1a8>
  80c29c:	2a002e26 	beq	r5,r8,80c358 <_strtol_r+0x1a4>
  80c2a0:	2d05383a 	mul	r2,r5,r20
  80c2a4:	01800044 	movi	r6,1
  80c2a8:	10cb883a 	add	r5,r2,r3
  80c2ac:	84400007 	ldb	r17,0(r16)
  80c2b0:	84000044 	addi	r16,r16,1
  80c2b4:	9c45883a 	add	r2,r19,r17
  80c2b8:	11000003 	ldbu	r4,0(r2)
  80c2bc:	20c0010c 	andi	r3,r4,4
  80c2c0:	183ff21e 	bne	r3,zero,80c28c <_strtol_r+0xd8>
  80c2c4:	208000cc 	andi	r2,r4,3
  80c2c8:	10000626 	beq	r2,zero,80c2e4 <_strtol_r+0x130>
  80c2cc:	2080004c 	andi	r2,r4,1
  80c2d0:	1005003a 	cmpeq	r2,r2,zero
  80c2d4:	1000231e 	bne	r2,zero,80c364 <_strtol_r+0x1b0>
  80c2d8:	00800dc4 	movi	r2,55
  80c2dc:	8887c83a 	sub	r3,r17,r2
  80c2e0:	19ffec16 	blt	r3,r7,80c294 <_strtol_r+0xe0>
  80c2e4:	30002d16 	blt	r6,zero,80c39c <_strtol_r+0x1e8>
  80c2e8:	b000231e 	bne	r22,zero,80c378 <_strtol_r+0x1c4>
  80c2ec:	2807883a 	mov	r3,r5
  80c2f0:	d8800117 	ldw	r2,4(sp)
  80c2f4:	10000426 	beq	r2,zero,80c308 <_strtol_r+0x154>
  80c2f8:	30000126 	beq	r6,zero,80c300 <_strtol_r+0x14c>
  80c2fc:	85ffffc4 	addi	r23,r16,-1
  80c300:	d9000117 	ldw	r4,4(sp)
  80c304:	25c00015 	stw	r23,0(r4)
  80c308:	1805883a 	mov	r2,r3
  80c30c:	dfc00c17 	ldw	ra,48(sp)
  80c310:	df000b17 	ldw	fp,44(sp)
  80c314:	ddc00a17 	ldw	r23,40(sp)
  80c318:	dd800917 	ldw	r22,36(sp)
  80c31c:	dd400817 	ldw	r21,32(sp)
  80c320:	dd000717 	ldw	r20,28(sp)
  80c324:	dcc00617 	ldw	r19,24(sp)
  80c328:	dc800517 	ldw	r18,20(sp)
  80c32c:	dc400417 	ldw	r17,16(sp)
  80c330:	dc000317 	ldw	r16,12(sp)
  80c334:	dec00d04 	addi	sp,sp,52
  80c338:	f800283a 	ret
  80c33c:	00800c04 	movi	r2,48
  80c340:	88801d26 	beq	r17,r2,80c3b8 <_strtol_r+0x204>
  80c344:	183fbc26 	beq	r3,zero,80c238 <_strtol_r+0x84>
  80c348:	00800c04 	movi	r2,48
  80c34c:	88802726 	beq	r17,r2,80c3ec <_strtol_r+0x238>
  80c350:	01c00284 	movi	r7,10
  80c354:	003fb806 	br	80c238 <_strtol_r+0x84>
  80c358:	a8ffd10e 	bge	r21,r3,80c2a0 <_strtol_r+0xec>
  80c35c:	01bfffc4 	movi	r6,-1
  80c360:	003fd206 	br	80c2ac <_strtol_r+0xf8>
  80c364:	008015c4 	movi	r2,87
  80c368:	8887c83a 	sub	r3,r17,r2
  80c36c:	003fdc06 	br	80c2e0 <_strtol_r+0x12c>
  80c370:	04a00034 	movhi	r18,32768
  80c374:	003fb506 	br	80c24c <_strtol_r+0x98>
  80c378:	0147c83a 	sub	r3,zero,r5
  80c37c:	003fdc06 	br	80c2f0 <_strtol_r+0x13c>
  80c380:	84400007 	ldb	r17,0(r16)
  80c384:	84000044 	addi	r16,r16,1
  80c388:	003fa606 	br	80c224 <_strtol_r+0x70>
  80c38c:	84400007 	ldb	r17,0(r16)
  80c390:	07000044 	movi	fp,1
  80c394:	84000044 	addi	r16,r16,1
  80c398:	003fa306 	br	80c228 <_strtol_r+0x74>
  80c39c:	e005003a 	cmpeq	r2,fp,zero
  80c3a0:	10000f1e 	bne	r2,zero,80c3e0 <_strtol_r+0x22c>
  80c3a4:	00e00034 	movhi	r3,32768
  80c3a8:	d9000017 	ldw	r4,0(sp)
  80c3ac:	00800884 	movi	r2,34
  80c3b0:	20800015 	stw	r2,0(r4)
  80c3b4:	003fce06 	br	80c2f0 <_strtol_r+0x13c>
  80c3b8:	81000007 	ldb	r4,0(r16)
  80c3bc:	00801e04 	movi	r2,120
  80c3c0:	20800226 	beq	r4,r2,80c3cc <_strtol_r+0x218>
  80c3c4:	00801604 	movi	r2,88
  80c3c8:	20bfde1e 	bne	r4,r2,80c344 <_strtol_r+0x190>
  80c3cc:	84400047 	ldb	r17,1(r16)
  80c3d0:	01c00404 	movi	r7,16
  80c3d4:	84000084 	addi	r16,r16,2
  80c3d8:	3829883a 	mov	r20,r7
  80c3dc:	003f9706 	br	80c23c <_strtol_r+0x88>
  80c3e0:	00e00034 	movhi	r3,32768
  80c3e4:	18ffffc4 	addi	r3,r3,-1
  80c3e8:	003fef06 	br	80c3a8 <_strtol_r+0x1f4>
  80c3ec:	01c00204 	movi	r7,8
  80c3f0:	3829883a 	mov	r20,r7
  80c3f4:	003f9106 	br	80c23c <_strtol_r+0x88>

0080c3f8 <strtol>:
  80c3f8:	00802074 	movhi	r2,129
  80c3fc:	109c1404 	addi	r2,r2,28752
  80c400:	2013883a 	mov	r9,r4
  80c404:	11000017 	ldw	r4,0(r2)
  80c408:	2805883a 	mov	r2,r5
  80c40c:	300f883a 	mov	r7,r6
  80c410:	480b883a 	mov	r5,r9
  80c414:	100d883a 	mov	r6,r2
  80c418:	080c1b41 	jmpi	80c1b4 <_strtol_r>

0080c41c <_strtoll_r>:
  80c41c:	defff004 	addi	sp,sp,-64
  80c420:	00802074 	movhi	r2,129
  80c424:	109c1804 	addi	r2,r2,28768
  80c428:	df000e15 	stw	fp,56(sp)
  80c42c:	17000017 	ldw	fp,0(r2)
  80c430:	ddc00d15 	stw	r23,52(sp)
  80c434:	dd000a15 	stw	r20,40(sp)
  80c438:	dfc00f15 	stw	ra,60(sp)
  80c43c:	dd800c15 	stw	r22,48(sp)
  80c440:	dd400b15 	stw	r21,44(sp)
  80c444:	dcc00915 	stw	r19,36(sp)
  80c448:	dc800815 	stw	r18,32(sp)
  80c44c:	dc400715 	stw	r17,28(sp)
  80c450:	dc000615 	stw	r16,24(sp)
  80c454:	d9400315 	stw	r5,12(sp)
  80c458:	d9000215 	stw	r4,8(sp)
  80c45c:	d9800415 	stw	r6,16(sp)
  80c460:	382f883a 	mov	r23,r7
  80c464:	2829883a 	mov	r20,r5
  80c468:	a4c00007 	ldb	r19,0(r20)
  80c46c:	a5000044 	addi	r20,r20,1
  80c470:	e4c7883a 	add	r3,fp,r19
  80c474:	18800003 	ldbu	r2,0(r3)
  80c478:	1080020c 	andi	r2,r2,8
  80c47c:	103ffa1e 	bne	r2,zero,80c468 <_strtoll_r+0x4c>
  80c480:	00800b44 	movi	r2,45
  80c484:	98808826 	beq	r19,r2,80c6a8 <_strtoll_r+0x28c>
  80c488:	00800ac4 	movi	r2,43
  80c48c:	98808326 	beq	r19,r2,80c69c <_strtoll_r+0x280>
  80c490:	d8000115 	stw	zero,4(sp)
  80c494:	b807003a 	cmpeq	r3,r23,zero
  80c498:	18005f1e 	bne	r3,zero,80c618 <_strtoll_r+0x1fc>
  80c49c:	00800404 	movi	r2,16
  80c4a0:	b8805d26 	beq	r23,r2,80c618 <_strtoll_r+0x1fc>
  80c4a4:	b82dd7fa 	srai	r22,r23,31
  80c4a8:	b82b883a 	mov	r21,r23
  80c4ac:	d8c00117 	ldw	r3,4(sp)
  80c4b0:	1806c03a 	cmpne	r3,r3,zero
  80c4b4:	d8c00515 	stw	r3,20(sp)
  80c4b8:	1800631e 	bne	r3,zero,80c648 <_strtoll_r+0x22c>
  80c4bc:	043fffc4 	movi	r16,-1
  80c4c0:	04600034 	movhi	r17,32768
  80c4c4:	8c7fffc4 	addi	r17,r17,-1
  80c4c8:	880b883a 	mov	r5,r17
  80c4cc:	8009883a 	mov	r4,r16
  80c4d0:	a80d883a 	mov	r6,r21
  80c4d4:	b00f883a 	mov	r7,r22
  80c4d8:	080e2600 	call	80e260 <__umoddi3>
  80c4dc:	880b883a 	mov	r5,r17
  80c4e0:	8009883a 	mov	r4,r16
  80c4e4:	b00f883a 	mov	r7,r22
  80c4e8:	a80d883a 	mov	r6,r21
  80c4ec:	d8800015 	stw	r2,0(sp)
  80c4f0:	080dc840 	call	80dc84 <__udivdi3>
  80c4f4:	1023883a 	mov	r17,r2
  80c4f8:	e4c5883a 	add	r2,fp,r19
  80c4fc:	11000003 	ldbu	r4,0(r2)
  80c500:	1825883a 	mov	r18,r3
  80c504:	0015883a 	mov	r10,zero
  80c508:	20c0010c 	andi	r3,r4,4
  80c50c:	0017883a 	mov	r11,zero
  80c510:	000f883a 	mov	r7,zero
  80c514:	18001a26 	beq	r3,zero,80c580 <_strtoll_r+0x164>
  80c518:	9c3ff404 	addi	r16,r19,-48
  80c51c:	85c0200e 	bge	r16,r23,80c5a0 <_strtoll_r+0x184>
  80c520:	38003b16 	blt	r7,zero,80c610 <_strtoll_r+0x1f4>
  80c524:	92c03a36 	bltu	r18,r11,80c610 <_strtoll_r+0x1f4>
  80c528:	5c803826 	beq	r11,r18,80c60c <_strtoll_r+0x1f0>
  80c52c:	54404c26 	beq	r10,r17,80c660 <_strtoll_r+0x244>
  80c530:	580b883a 	mov	r5,r11
  80c534:	5009883a 	mov	r4,r10
  80c538:	a80d883a 	mov	r6,r21
  80c53c:	b00f883a 	mov	r7,r22
  80c540:	080db480 	call	80db48 <__muldi3>
  80c544:	8013d7fa 	srai	r9,r16,31
  80c548:	100d883a 	mov	r6,r2
  80c54c:	1405883a 	add	r2,r2,r16
  80c550:	118d803a 	cmpltu	r6,r2,r6
  80c554:	1a47883a 	add	r3,r3,r9
  80c558:	30cd883a 	add	r6,r6,r3
  80c55c:	1015883a 	mov	r10,r2
  80c560:	3017883a 	mov	r11,r6
  80c564:	01c00044 	movi	r7,1
  80c568:	a4c00007 	ldb	r19,0(r20)
  80c56c:	a5000044 	addi	r20,r20,1
  80c570:	e4c5883a 	add	r2,fp,r19
  80c574:	11000003 	ldbu	r4,0(r2)
  80c578:	20c0010c 	andi	r3,r4,4
  80c57c:	183fe61e 	bne	r3,zero,80c518 <_strtoll_r+0xfc>
  80c580:	208000cc 	andi	r2,r4,3
  80c584:	10000626 	beq	r2,zero,80c5a0 <_strtoll_r+0x184>
  80c588:	2080004c 	andi	r2,r4,1
  80c58c:	1005003a 	cmpeq	r2,r2,zero
  80c590:	1000301e 	bne	r2,zero,80c654 <_strtoll_r+0x238>
  80c594:	02000dc4 	movi	r8,55
  80c598:	9a21c83a 	sub	r16,r19,r8
  80c59c:	85ffe016 	blt	r16,r23,80c520 <_strtoll_r+0x104>
  80c5a0:	38004616 	blt	r7,zero,80c6bc <_strtoll_r+0x2a0>
  80c5a4:	d8800517 	ldw	r2,20(sp)
  80c5a8:	1000341e 	bne	r2,zero,80c67c <_strtoll_r+0x260>
  80c5ac:	500b883a 	mov	r5,r10
  80c5b0:	580d883a 	mov	r6,r11
  80c5b4:	d8c00417 	ldw	r3,16(sp)
  80c5b8:	18000626 	beq	r3,zero,80c5d4 <_strtoll_r+0x1b8>
  80c5bc:	38000226 	beq	r7,zero,80c5c8 <_strtoll_r+0x1ac>
  80c5c0:	a53fffc4 	addi	r20,r20,-1
  80c5c4:	dd000315 	stw	r20,12(sp)
  80c5c8:	d8c00317 	ldw	r3,12(sp)
  80c5cc:	d8800417 	ldw	r2,16(sp)
  80c5d0:	10c00015 	stw	r3,0(r2)
  80c5d4:	2805883a 	mov	r2,r5
  80c5d8:	3007883a 	mov	r3,r6
  80c5dc:	dfc00f17 	ldw	ra,60(sp)
  80c5e0:	df000e17 	ldw	fp,56(sp)
  80c5e4:	ddc00d17 	ldw	r23,52(sp)
  80c5e8:	dd800c17 	ldw	r22,48(sp)
  80c5ec:	dd400b17 	ldw	r21,44(sp)
  80c5f0:	dd000a17 	ldw	r20,40(sp)
  80c5f4:	dcc00917 	ldw	r19,36(sp)
  80c5f8:	dc800817 	ldw	r18,32(sp)
  80c5fc:	dc400717 	ldw	r17,28(sp)
  80c600:	dc000617 	ldw	r16,24(sp)
  80c604:	dec01004 	addi	sp,sp,64
  80c608:	f800283a 	ret
  80c60c:	8abfc72e 	bgeu	r17,r10,80c52c <_strtoll_r+0x110>
  80c610:	01ffffc4 	movi	r7,-1
  80c614:	003fd406 	br	80c568 <_strtoll_r+0x14c>
  80c618:	00800c04 	movi	r2,48
  80c61c:	98803226 	beq	r19,r2,80c6e8 <_strtoll_r+0x2cc>
  80c620:	183fa026 	beq	r3,zero,80c4a4 <_strtoll_r+0x88>
  80c624:	00800c04 	movi	r2,48
  80c628:	98803e26 	beq	r19,r2,80c724 <_strtoll_r+0x308>
  80c62c:	d8c00117 	ldw	r3,4(sp)
  80c630:	05c00284 	movi	r23,10
  80c634:	b82b883a 	mov	r21,r23
  80c638:	1806c03a 	cmpne	r3,r3,zero
  80c63c:	002d883a 	mov	r22,zero
  80c640:	d8c00515 	stw	r3,20(sp)
  80c644:	183f9d26 	beq	r3,zero,80c4bc <_strtoll_r+0xa0>
  80c648:	0021883a 	mov	r16,zero
  80c64c:	04600034 	movhi	r17,32768
  80c650:	003f9d06 	br	80c4c8 <_strtoll_r+0xac>
  80c654:	020015c4 	movi	r8,87
  80c658:	9a21c83a 	sub	r16,r19,r8
  80c65c:	003fcf06 	br	80c59c <_strtoll_r+0x180>
  80c660:	5cbfb31e 	bne	r11,r18,80c530 <_strtoll_r+0x114>
  80c664:	d8800017 	ldw	r2,0(sp)
  80c668:	143fb10e 	bge	r2,r16,80c530 <_strtoll_r+0x114>
  80c66c:	8815883a 	mov	r10,r17
  80c670:	9017883a 	mov	r11,r18
  80c674:	01ffffc4 	movi	r7,-1
  80c678:	003fbb06 	br	80c568 <_strtoll_r+0x14c>
  80c67c:	0009883a 	mov	r4,zero
  80c680:	2285c83a 	sub	r2,r4,r10
  80c684:	2089803a 	cmpltu	r4,r4,r2
  80c688:	02c7c83a 	sub	r3,zero,r11
  80c68c:	1909c83a 	sub	r4,r3,r4
  80c690:	100b883a 	mov	r5,r2
  80c694:	200d883a 	mov	r6,r4
  80c698:	003fc606 	br	80c5b4 <_strtoll_r+0x198>
  80c69c:	a4c00007 	ldb	r19,0(r20)
  80c6a0:	a5000044 	addi	r20,r20,1
  80c6a4:	003f7a06 	br	80c490 <_strtoll_r+0x74>
  80c6a8:	a4c00007 	ldb	r19,0(r20)
  80c6ac:	00800044 	movi	r2,1
  80c6b0:	a5000044 	addi	r20,r20,1
  80c6b4:	d8800115 	stw	r2,4(sp)
  80c6b8:	003f7606 	br	80c494 <_strtoll_r+0x78>
  80c6bc:	d8c00117 	ldw	r3,4(sp)
  80c6c0:	1805003a 	cmpeq	r2,r3,zero
  80c6c4:	1000131e 	bne	r2,zero,80c714 <_strtoll_r+0x2f8>
  80c6c8:	0005883a 	mov	r2,zero
  80c6cc:	00e00034 	movhi	r3,32768
  80c6d0:	100b883a 	mov	r5,r2
  80c6d4:	180d883a 	mov	r6,r3
  80c6d8:	d8c00217 	ldw	r3,8(sp)
  80c6dc:	00800884 	movi	r2,34
  80c6e0:	18800015 	stw	r2,0(r3)
  80c6e4:	003fb306 	br	80c5b4 <_strtoll_r+0x198>
  80c6e8:	a1000007 	ldb	r4,0(r20)
  80c6ec:	00801e04 	movi	r2,120
  80c6f0:	20800226 	beq	r4,r2,80c6fc <_strtoll_r+0x2e0>
  80c6f4:	00801604 	movi	r2,88
  80c6f8:	20bfc91e 	bne	r4,r2,80c620 <_strtoll_r+0x204>
  80c6fc:	a4c00047 	ldb	r19,1(r20)
  80c700:	05c00404 	movi	r23,16
  80c704:	b82b883a 	mov	r21,r23
  80c708:	a5000084 	addi	r20,r20,2
  80c70c:	002d883a 	mov	r22,zero
  80c710:	003f6606 	br	80c4ac <_strtoll_r+0x90>
  80c714:	017fffc4 	movi	r5,-1
  80c718:	01a00034 	movhi	r6,32768
  80c71c:	31bfffc4 	addi	r6,r6,-1
  80c720:	003fed06 	br	80c6d8 <_strtoll_r+0x2bc>
  80c724:	05c00204 	movi	r23,8
  80c728:	b82b883a 	mov	r21,r23
  80c72c:	002d883a 	mov	r22,zero
  80c730:	003f5e06 	br	80c4ac <_strtoll_r+0x90>

0080c734 <_strtoul_r>:
  80c734:	defff604 	addi	sp,sp,-40
  80c738:	00802074 	movhi	r2,129
  80c73c:	109c1804 	addi	r2,r2,28768
  80c740:	dd000415 	stw	r20,16(sp)
  80c744:	15000017 	ldw	r20,0(r2)
  80c748:	ddc00715 	stw	r23,28(sp)
  80c74c:	dd800615 	stw	r22,24(sp)
  80c750:	dd400515 	stw	r21,20(sp)
  80c754:	dc800215 	stw	r18,8(sp)
  80c758:	dc000015 	stw	r16,0(sp)
  80c75c:	dfc00915 	stw	ra,36(sp)
  80c760:	df000815 	stw	fp,32(sp)
  80c764:	dcc00315 	stw	r19,12(sp)
  80c768:	dc400115 	stw	r17,4(sp)
  80c76c:	282b883a 	mov	r21,r5
  80c770:	202f883a 	mov	r23,r4
  80c774:	302d883a 	mov	r22,r6
  80c778:	3825883a 	mov	r18,r7
  80c77c:	2821883a 	mov	r16,r5
  80c780:	84400007 	ldb	r17,0(r16)
  80c784:	84000044 	addi	r16,r16,1
  80c788:	a447883a 	add	r3,r20,r17
  80c78c:	18800003 	ldbu	r2,0(r3)
  80c790:	1080020c 	andi	r2,r2,8
  80c794:	103ffa1e 	bne	r2,zero,80c780 <_strtoul_r+0x4c>
  80c798:	00800b44 	movi	r2,45
  80c79c:	88805626 	beq	r17,r2,80c8f8 <_strtoul_r+0x1c4>
  80c7a0:	00800ac4 	movi	r2,43
  80c7a4:	88805126 	beq	r17,r2,80c8ec <_strtoul_r+0x1b8>
  80c7a8:	0039883a 	mov	fp,zero
  80c7ac:	9007003a 	cmpeq	r3,r18,zero
  80c7b0:	18003b1e 	bne	r3,zero,80c8a0 <_strtoul_r+0x16c>
  80c7b4:	00800404 	movi	r2,16
  80c7b8:	90803926 	beq	r18,r2,80c8a0 <_strtoul_r+0x16c>
  80c7bc:	013fffc4 	movi	r4,-1
  80c7c0:	900b883a 	mov	r5,r18
  80c7c4:	080fcdc0 	call	80fcdc <__udivsi3>
  80c7c8:	013fffc4 	movi	r4,-1
  80c7cc:	900b883a 	mov	r5,r18
  80c7d0:	1027883a 	mov	r19,r2
  80c7d4:	080fce40 	call	80fce4 <__umodsi3>
  80c7d8:	1011883a 	mov	r8,r2
  80c7dc:	900f883a 	mov	r7,r18
  80c7e0:	a445883a 	add	r2,r20,r17
  80c7e4:	11000003 	ldbu	r4,0(r2)
  80c7e8:	000b883a 	mov	r5,zero
  80c7ec:	000d883a 	mov	r6,zero
  80c7f0:	20c0010c 	andi	r3,r4,4
  80c7f4:	18000e26 	beq	r3,zero,80c830 <_strtoul_r+0xfc>
  80c7f8:	88fff404 	addi	r3,r17,-48
  80c7fc:	1c80140e 	bge	r3,r18,80c850 <_strtoul_r+0x11c>
  80c800:	30003316 	blt	r6,zero,80c8d0 <_strtoul_r+0x19c>
  80c804:	99403236 	bltu	r19,r5,80c8d0 <_strtoul_r+0x19c>
  80c808:	2cc03026 	beq	r5,r19,80c8cc <_strtoul_r+0x198>
  80c80c:	29c5383a 	mul	r2,r5,r7
  80c810:	01800044 	movi	r6,1
  80c814:	10cb883a 	add	r5,r2,r3
  80c818:	84400007 	ldb	r17,0(r16)
  80c81c:	84000044 	addi	r16,r16,1
  80c820:	a445883a 	add	r2,r20,r17
  80c824:	11000003 	ldbu	r4,0(r2)
  80c828:	20c0010c 	andi	r3,r4,4
  80c82c:	183ff21e 	bne	r3,zero,80c7f8 <_strtoul_r+0xc4>
  80c830:	208000cc 	andi	r2,r4,3
  80c834:	10000626 	beq	r2,zero,80c850 <_strtoul_r+0x11c>
  80c838:	2080004c 	andi	r2,r4,1
  80c83c:	1005003a 	cmpeq	r2,r2,zero
  80c840:	1000251e 	bne	r2,zero,80c8d8 <_strtoul_r+0x1a4>
  80c844:	00800dc4 	movi	r2,55
  80c848:	8887c83a 	sub	r3,r17,r2
  80c84c:	1cbfec16 	blt	r3,r18,80c800 <_strtoul_r+0xcc>
  80c850:	3000400e 	bge	r6,zero,80c954 <_strtoul_r+0x220>
  80c854:	00800884 	movi	r2,34
  80c858:	017fffc4 	movi	r5,-1
  80c85c:	b8800015 	stw	r2,0(r23)
  80c860:	b0000226 	beq	r22,zero,80c86c <_strtoul_r+0x138>
  80c864:	30001f1e 	bne	r6,zero,80c8e4 <_strtoul_r+0x1b0>
  80c868:	b5400015 	stw	r21,0(r22)
  80c86c:	2805883a 	mov	r2,r5
  80c870:	dfc00917 	ldw	ra,36(sp)
  80c874:	df000817 	ldw	fp,32(sp)
  80c878:	ddc00717 	ldw	r23,28(sp)
  80c87c:	dd800617 	ldw	r22,24(sp)
  80c880:	dd400517 	ldw	r21,20(sp)
  80c884:	dd000417 	ldw	r20,16(sp)
  80c888:	dcc00317 	ldw	r19,12(sp)
  80c88c:	dc800217 	ldw	r18,8(sp)
  80c890:	dc400117 	ldw	r17,4(sp)
  80c894:	dc000017 	ldw	r16,0(sp)
  80c898:	dec00a04 	addi	sp,sp,40
  80c89c:	f800283a 	ret
  80c8a0:	00800c04 	movi	r2,48
  80c8a4:	88801826 	beq	r17,r2,80c908 <_strtoul_r+0x1d4>
  80c8a8:	183fc426 	beq	r3,zero,80c7bc <_strtoul_r+0x88>
  80c8ac:	00800c04 	movi	r2,48
  80c8b0:	88802226 	beq	r17,r2,80c93c <_strtoul_r+0x208>
  80c8b4:	04800284 	movi	r18,10
  80c8b8:	900f883a 	mov	r7,r18
  80c8bc:	04c666b4 	movhi	r19,6554
  80c8c0:	9ce66644 	addi	r19,r19,-26215
  80c8c4:	02000144 	movi	r8,5
  80c8c8:	003fc506 	br	80c7e0 <_strtoul_r+0xac>
  80c8cc:	40ffcf0e 	bge	r8,r3,80c80c <_strtoul_r+0xd8>
  80c8d0:	01bfffc4 	movi	r6,-1
  80c8d4:	003fd006 	br	80c818 <_strtoul_r+0xe4>
  80c8d8:	008015c4 	movi	r2,87
  80c8dc:	8887c83a 	sub	r3,r17,r2
  80c8e0:	003fda06 	br	80c84c <_strtoul_r+0x118>
  80c8e4:	857fffc4 	addi	r21,r16,-1
  80c8e8:	003fdf06 	br	80c868 <_strtoul_r+0x134>
  80c8ec:	84400007 	ldb	r17,0(r16)
  80c8f0:	84000044 	addi	r16,r16,1
  80c8f4:	003fac06 	br	80c7a8 <_strtoul_r+0x74>
  80c8f8:	84400007 	ldb	r17,0(r16)
  80c8fc:	07000044 	movi	fp,1
  80c900:	84000044 	addi	r16,r16,1
  80c904:	003fa906 	br	80c7ac <_strtoul_r+0x78>
  80c908:	81000007 	ldb	r4,0(r16)
  80c90c:	00801e04 	movi	r2,120
  80c910:	20800226 	beq	r4,r2,80c91c <_strtoul_r+0x1e8>
  80c914:	00801604 	movi	r2,88
  80c918:	20bfe31e 	bne	r4,r2,80c8a8 <_strtoul_r+0x174>
  80c91c:	84400047 	ldb	r17,1(r16)
  80c920:	04800404 	movi	r18,16
  80c924:	84000084 	addi	r16,r16,2
  80c928:	900f883a 	mov	r7,r18
  80c92c:	04c40034 	movhi	r19,4096
  80c930:	9cffffc4 	addi	r19,r19,-1
  80c934:	020003c4 	movi	r8,15
  80c938:	003fa906 	br	80c7e0 <_strtoul_r+0xac>
  80c93c:	04800204 	movi	r18,8
  80c940:	900f883a 	mov	r7,r18
  80c944:	04c80034 	movhi	r19,8192
  80c948:	9cffffc4 	addi	r19,r19,-1
  80c94c:	020001c4 	movi	r8,7
  80c950:	003fa306 	br	80c7e0 <_strtoul_r+0xac>
  80c954:	e005003a 	cmpeq	r2,fp,zero
  80c958:	103fc11e 	bne	r2,zero,80c860 <_strtoul_r+0x12c>
  80c95c:	014bc83a 	sub	r5,zero,r5
  80c960:	003fbf06 	br	80c860 <_strtoul_r+0x12c>

0080c964 <strtoul>:
  80c964:	00802074 	movhi	r2,129
  80c968:	109c1404 	addi	r2,r2,28752
  80c96c:	2013883a 	mov	r9,r4
  80c970:	11000017 	ldw	r4,0(r2)
  80c974:	2805883a 	mov	r2,r5
  80c978:	300f883a 	mov	r7,r6
  80c97c:	480b883a 	mov	r5,r9
  80c980:	100d883a 	mov	r6,r2
  80c984:	080c7341 	jmpi	80c734 <_strtoul_r>

0080c988 <_strtoull_r>:
  80c988:	defff104 	addi	sp,sp,-60
  80c98c:	00802074 	movhi	r2,129
  80c990:	109c1804 	addi	r2,r2,28768
  80c994:	df000d15 	stw	fp,52(sp)
  80c998:	17000017 	ldw	fp,0(r2)
  80c99c:	ddc00c15 	stw	r23,48(sp)
  80c9a0:	dcc00815 	stw	r19,32(sp)
  80c9a4:	dfc00e15 	stw	ra,56(sp)
  80c9a8:	dd800b15 	stw	r22,44(sp)
  80c9ac:	dd400a15 	stw	r21,40(sp)
  80c9b0:	dd000915 	stw	r20,36(sp)
  80c9b4:	dc800715 	stw	r18,28(sp)
  80c9b8:	dc400615 	stw	r17,24(sp)
  80c9bc:	dc000515 	stw	r16,20(sp)
  80c9c0:	d9400215 	stw	r5,8(sp)
  80c9c4:	d9000115 	stw	r4,4(sp)
  80c9c8:	d9800315 	stw	r6,12(sp)
  80c9cc:	382f883a 	mov	r23,r7
  80c9d0:	2827883a 	mov	r19,r5
  80c9d4:	9d000007 	ldb	r20,0(r19)
  80c9d8:	9cc00044 	addi	r19,r19,1
  80c9dc:	e507883a 	add	r3,fp,r20
  80c9e0:	18800003 	ldbu	r2,0(r3)
  80c9e4:	1080020c 	andi	r2,r2,8
  80c9e8:	103ffa1e 	bne	r2,zero,80c9d4 <_strtoull_r+0x4c>
  80c9ec:	00800b44 	movi	r2,45
  80c9f0:	a0807a26 	beq	r20,r2,80cbdc <_strtoull_r+0x254>
  80c9f4:	00800ac4 	movi	r2,43
  80c9f8:	a0807526 	beq	r20,r2,80cbd0 <_strtoull_r+0x248>
  80c9fc:	d8000015 	stw	zero,0(sp)
  80ca00:	b807003a 	cmpeq	r3,r23,zero
  80ca04:	18005a1e 	bne	r3,zero,80cb70 <_strtoull_r+0x1e8>
  80ca08:	00800404 	movi	r2,16
  80ca0c:	b8805826 	beq	r23,r2,80cb70 <_strtoull_r+0x1e8>
  80ca10:	b82dd7fa 	srai	r22,r23,31
  80ca14:	043fffc4 	movi	r16,-1
  80ca18:	8009883a 	mov	r4,r16
  80ca1c:	800b883a 	mov	r5,r16
  80ca20:	b80d883a 	mov	r6,r23
  80ca24:	b00f883a 	mov	r7,r22
  80ca28:	080dc840 	call	80dc84 <__udivdi3>
  80ca2c:	8009883a 	mov	r4,r16
  80ca30:	800b883a 	mov	r5,r16
  80ca34:	b80d883a 	mov	r6,r23
  80ca38:	b00f883a 	mov	r7,r22
  80ca3c:	1023883a 	mov	r17,r2
  80ca40:	1825883a 	mov	r18,r3
  80ca44:	080e2600 	call	80e260 <__umoddi3>
  80ca48:	b82b883a 	mov	r21,r23
  80ca4c:	1019883a 	mov	r12,r2
  80ca50:	e505883a 	add	r2,fp,r20
  80ca54:	11000003 	ldbu	r4,0(r2)
  80ca58:	0015883a 	mov	r10,zero
  80ca5c:	0017883a 	mov	r11,zero
  80ca60:	20c0010c 	andi	r3,r4,4
  80ca64:	000d883a 	mov	r6,zero
  80ca68:	18001c26 	beq	r3,zero,80cadc <_strtoull_r+0x154>
  80ca6c:	a43ff404 	addi	r16,r20,-48
  80ca70:	85c0220e 	bge	r16,r23,80cafc <_strtoull_r+0x174>
  80ca74:	30003c16 	blt	r6,zero,80cb68 <_strtoull_r+0x1e0>
  80ca78:	92c03b36 	bltu	r18,r11,80cb68 <_strtoull_r+0x1e0>
  80ca7c:	5c803926 	beq	r11,r18,80cb64 <_strtoull_r+0x1dc>
  80ca80:	54404c26 	beq	r10,r17,80cbb4 <_strtoull_r+0x22c>
  80ca84:	580b883a 	mov	r5,r11
  80ca88:	5009883a 	mov	r4,r10
  80ca8c:	a80d883a 	mov	r6,r21
  80ca90:	b00f883a 	mov	r7,r22
  80ca94:	db000415 	stw	r12,16(sp)
  80ca98:	080db480 	call	80db48 <__muldi3>
  80ca9c:	8013d7fa 	srai	r9,r16,31
  80caa0:	100d883a 	mov	r6,r2
  80caa4:	1405883a 	add	r2,r2,r16
  80caa8:	118d803a 	cmpltu	r6,r2,r6
  80caac:	1a47883a 	add	r3,r3,r9
  80cab0:	db000417 	ldw	r12,16(sp)
  80cab4:	30cd883a 	add	r6,r6,r3
  80cab8:	3017883a 	mov	r11,r6
  80cabc:	1015883a 	mov	r10,r2
  80cac0:	01800044 	movi	r6,1
  80cac4:	9d000007 	ldb	r20,0(r19)
  80cac8:	9cc00044 	addi	r19,r19,1
  80cacc:	e505883a 	add	r2,fp,r20
  80cad0:	11000003 	ldbu	r4,0(r2)
  80cad4:	20c0010c 	andi	r3,r4,4
  80cad8:	183fe41e 	bne	r3,zero,80ca6c <_strtoull_r+0xe4>
  80cadc:	208000cc 	andi	r2,r4,3
  80cae0:	10000626 	beq	r2,zero,80cafc <_strtoull_r+0x174>
  80cae4:	2080004c 	andi	r2,r4,1
  80cae8:	1005003a 	cmpeq	r2,r2,zero
  80caec:	10002e1e 	bne	r2,zero,80cba8 <_strtoull_r+0x220>
  80caf0:	02000dc4 	movi	r8,55
  80caf4:	a221c83a 	sub	r16,r20,r8
  80caf8:	85ffde16 	blt	r16,r23,80ca74 <_strtoull_r+0xec>
  80cafc:	3000530e 	bge	r6,zero,80cc4c <_strtoull_r+0x2c4>
  80cb00:	d8c00117 	ldw	r3,4(sp)
  80cb04:	02bfffc4 	movi	r10,-1
  80cb08:	00800884 	movi	r2,34
  80cb0c:	5017883a 	mov	r11,r10
  80cb10:	18800015 	stw	r2,0(r3)
  80cb14:	d8800317 	ldw	r2,12(sp)
  80cb18:	10000426 	beq	r2,zero,80cb2c <_strtoull_r+0x1a4>
  80cb1c:	3000291e 	bne	r6,zero,80cbc4 <_strtoull_r+0x23c>
  80cb20:	d8800217 	ldw	r2,8(sp)
  80cb24:	d8c00317 	ldw	r3,12(sp)
  80cb28:	18800015 	stw	r2,0(r3)
  80cb2c:	5005883a 	mov	r2,r10
  80cb30:	5807883a 	mov	r3,r11
  80cb34:	dfc00e17 	ldw	ra,56(sp)
  80cb38:	df000d17 	ldw	fp,52(sp)
  80cb3c:	ddc00c17 	ldw	r23,48(sp)
  80cb40:	dd800b17 	ldw	r22,44(sp)
  80cb44:	dd400a17 	ldw	r21,40(sp)
  80cb48:	dd000917 	ldw	r20,36(sp)
  80cb4c:	dcc00817 	ldw	r19,32(sp)
  80cb50:	dc800717 	ldw	r18,28(sp)
  80cb54:	dc400617 	ldw	r17,24(sp)
  80cb58:	dc000517 	ldw	r16,20(sp)
  80cb5c:	dec00f04 	addi	sp,sp,60
  80cb60:	f800283a 	ret
  80cb64:	8abfc62e 	bgeu	r17,r10,80ca80 <_strtoull_r+0xf8>
  80cb68:	01bfffc4 	movi	r6,-1
  80cb6c:	003fd506 	br	80cac4 <_strtoull_r+0x13c>
  80cb70:	00800c04 	movi	r2,48
  80cb74:	a0801e26 	beq	r20,r2,80cbf0 <_strtoull_r+0x268>
  80cb78:	183fa526 	beq	r3,zero,80ca10 <_strtoull_r+0x88>
  80cb7c:	00800c04 	movi	r2,48
  80cb80:	a0802a26 	beq	r20,r2,80cc2c <_strtoull_r+0x2a4>
  80cb84:	05c00284 	movi	r23,10
  80cb88:	b82b883a 	mov	r21,r23
  80cb8c:	046666b4 	movhi	r17,39322
  80cb90:	8c666644 	addi	r17,r17,-26215
  80cb94:	002d883a 	mov	r22,zero
  80cb98:	048666b4 	movhi	r18,6554
  80cb9c:	94a66644 	addi	r18,r18,-26215
  80cba0:	03000144 	movi	r12,5
  80cba4:	003faa06 	br	80ca50 <_strtoull_r+0xc8>
  80cba8:	020015c4 	movi	r8,87
  80cbac:	a221c83a 	sub	r16,r20,r8
  80cbb0:	003fd106 	br	80caf8 <_strtoull_r+0x170>
  80cbb4:	5cbfb31e 	bne	r11,r18,80ca84 <_strtoull_r+0xfc>
  80cbb8:	643fb20e 	bge	r12,r16,80ca84 <_strtoull_r+0xfc>
  80cbbc:	01bfffc4 	movi	r6,-1
  80cbc0:	003fc006 	br	80cac4 <_strtoull_r+0x13c>
  80cbc4:	9cffffc4 	addi	r19,r19,-1
  80cbc8:	dcc00215 	stw	r19,8(sp)
  80cbcc:	003fd406 	br	80cb20 <_strtoull_r+0x198>
  80cbd0:	9d000007 	ldb	r20,0(r19)
  80cbd4:	9cc00044 	addi	r19,r19,1
  80cbd8:	003f8806 	br	80c9fc <_strtoull_r+0x74>
  80cbdc:	9d000007 	ldb	r20,0(r19)
  80cbe0:	00800044 	movi	r2,1
  80cbe4:	9cc00044 	addi	r19,r19,1
  80cbe8:	d8800015 	stw	r2,0(sp)
  80cbec:	003f8406 	br	80ca00 <_strtoull_r+0x78>
  80cbf0:	99000007 	ldb	r4,0(r19)
  80cbf4:	00801e04 	movi	r2,120
  80cbf8:	20800226 	beq	r4,r2,80cc04 <_strtoull_r+0x27c>
  80cbfc:	00801604 	movi	r2,88
  80cc00:	20bfdd1e 	bne	r4,r2,80cb78 <_strtoull_r+0x1f0>
  80cc04:	9d000047 	ldb	r20,1(r19)
  80cc08:	05c00404 	movi	r23,16
  80cc0c:	b82b883a 	mov	r21,r23
  80cc10:	047fffc4 	movi	r17,-1
  80cc14:	9cc00084 	addi	r19,r19,2
  80cc18:	002d883a 	mov	r22,zero
  80cc1c:	04840034 	movhi	r18,4096
  80cc20:	94bfffc4 	addi	r18,r18,-1
  80cc24:	030003c4 	movi	r12,15
  80cc28:	003f8906 	br	80ca50 <_strtoull_r+0xc8>
  80cc2c:	05c00204 	movi	r23,8
  80cc30:	b82b883a 	mov	r21,r23
  80cc34:	047fffc4 	movi	r17,-1
  80cc38:	002d883a 	mov	r22,zero
  80cc3c:	04880034 	movhi	r18,8192
  80cc40:	94bfffc4 	addi	r18,r18,-1
  80cc44:	030001c4 	movi	r12,7
  80cc48:	003f8106 	br	80ca50 <_strtoull_r+0xc8>
  80cc4c:	d8c00017 	ldw	r3,0(sp)
  80cc50:	1805003a 	cmpeq	r2,r3,zero
  80cc54:	103faf1e 	bne	r2,zero,80cb14 <_strtoull_r+0x18c>
  80cc58:	0009883a 	mov	r4,zero
  80cc5c:	2285c83a 	sub	r2,r4,r10
  80cc60:	02c7c83a 	sub	r3,zero,r11
  80cc64:	2089803a 	cmpltu	r4,r4,r2
  80cc68:	1909c83a 	sub	r4,r3,r4
  80cc6c:	1015883a 	mov	r10,r2
  80cc70:	2017883a 	mov	r11,r4
  80cc74:	003fa706 	br	80cb14 <_strtoull_r+0x18c>

0080cc78 <__submore>:
  80cc78:	defffa04 	addi	sp,sp,-24
  80cc7c:	28c00c17 	ldw	r3,48(r5)
  80cc80:	dc800215 	stw	r18,8(sp)
  80cc84:	2825883a 	mov	r18,r5
  80cc88:	dc000015 	stw	r16,0(sp)
  80cc8c:	90801004 	addi	r2,r18,64
  80cc90:	04010004 	movi	r16,1024
  80cc94:	dfc00515 	stw	ra,20(sp)
  80cc98:	dd000415 	stw	r20,16(sp)
  80cc9c:	dcc00315 	stw	r19,12(sp)
  80cca0:	dc400115 	stw	r17,4(sp)
  80cca4:	800b883a 	mov	r5,r16
  80cca8:	18801b26 	beq	r3,r2,80cd18 <__submore+0xa0>
  80ccac:	94400d17 	ldw	r17,52(r18)
  80ccb0:	180b883a 	mov	r5,r3
  80ccb4:	8c69883a 	add	r20,r17,r17
  80ccb8:	a00d883a 	mov	r6,r20
  80ccbc:	08036500 	call	803650 <_realloc_r>
  80ccc0:	1467883a 	add	r19,r2,r17
  80ccc4:	1021883a 	mov	r16,r2
  80ccc8:	880d883a 	mov	r6,r17
  80cccc:	9809883a 	mov	r4,r19
  80ccd0:	100b883a 	mov	r5,r2
  80ccd4:	10000e26 	beq	r2,zero,80cd10 <__submore+0x98>
  80ccd8:	08032940 	call	803294 <memcpy>
  80ccdc:	000d883a 	mov	r6,zero
  80cce0:	95000d15 	stw	r20,52(r18)
  80cce4:	94c00015 	stw	r19,0(r18)
  80cce8:	94000c15 	stw	r16,48(r18)
  80ccec:	3005883a 	mov	r2,r6
  80ccf0:	dfc00517 	ldw	ra,20(sp)
  80ccf4:	dd000417 	ldw	r20,16(sp)
  80ccf8:	dcc00317 	ldw	r19,12(sp)
  80ccfc:	dc800217 	ldw	r18,8(sp)
  80cd00:	dc400117 	ldw	r17,4(sp)
  80cd04:	dc000017 	ldw	r16,0(sp)
  80cd08:	dec00604 	addi	sp,sp,24
  80cd0c:	f800283a 	ret
  80cd10:	01bfffc4 	movi	r6,-1
  80cd14:	003ff506 	br	80ccec <__submore+0x74>
  80cd18:	0802a700 	call	802a70 <_malloc_r>
  80cd1c:	1009883a 	mov	r4,r2
  80cd20:	1140ff44 	addi	r5,r2,1021
  80cd24:	000d883a 	mov	r6,zero
  80cd28:	103ff926 	beq	r2,zero,80cd10 <__submore+0x98>
  80cd2c:	90801083 	ldbu	r2,66(r18)
  80cd30:	94000d15 	stw	r16,52(r18)
  80cd34:	91000c15 	stw	r4,48(r18)
  80cd38:	28800085 	stb	r2,2(r5)
  80cd3c:	90c01043 	ldbu	r3,65(r18)
  80cd40:	28c00045 	stb	r3,1(r5)
  80cd44:	90801003 	ldbu	r2,64(r18)
  80cd48:	2080ff45 	stb	r2,1021(r4)
  80cd4c:	91400015 	stw	r5,0(r18)
  80cd50:	003fe606 	br	80ccec <__submore+0x74>

0080cd54 <_ungetc_r>:
  80cd54:	defffc04 	addi	sp,sp,-16
  80cd58:	00bfffc4 	movi	r2,-1
  80cd5c:	dc400215 	stw	r17,8(sp)
  80cd60:	dc000115 	stw	r16,4(sp)
  80cd64:	dfc00315 	stw	ra,12(sp)
  80cd68:	2821883a 	mov	r16,r5
  80cd6c:	2023883a 	mov	r17,r4
  80cd70:	28801826 	beq	r5,r2,80cdd4 <_ungetc_r+0x80>
  80cd74:	20000226 	beq	r4,zero,80cd80 <_ungetc_r+0x2c>
  80cd78:	20800e17 	ldw	r2,56(r4)
  80cd7c:	10001b26 	beq	r2,zero,80cdec <_ungetc_r+0x98>
  80cd80:	3100030b 	ldhu	r4,12(r6)
  80cd84:	00bff7c4 	movi	r2,-33
  80cd88:	2084703a 	and	r2,r4,r2
  80cd8c:	117fffcc 	andi	r5,r2,65535
  80cd90:	28c0010c 	andi	r3,r5,4
  80cd94:	1009883a 	mov	r4,r2
  80cd98:	3080030d 	sth	r2,12(r6)
  80cd9c:	18003526 	beq	r3,zero,80ce74 <_ungetc_r+0x120>
  80cda0:	30800c17 	ldw	r2,48(r6)
  80cda4:	84003fcc 	andi	r16,r16,255
  80cda8:	10001426 	beq	r2,zero,80cdfc <_ungetc_r+0xa8>
  80cdac:	30c00117 	ldw	r3,4(r6)
  80cdb0:	30800d17 	ldw	r2,52(r6)
  80cdb4:	1880380e 	bge	r3,r2,80ce98 <_ungetc_r+0x144>
  80cdb8:	30c00017 	ldw	r3,0(r6)
  80cdbc:	19ffffc4 	addi	r7,r3,-1
  80cdc0:	31c00015 	stw	r7,0(r6)
  80cdc4:	1c3fffc5 	stb	r16,-1(r3)
  80cdc8:	30800117 	ldw	r2,4(r6)
  80cdcc:	10800044 	addi	r2,r2,1
  80cdd0:	30800115 	stw	r2,4(r6)
  80cdd4:	8005883a 	mov	r2,r16
  80cdd8:	dfc00317 	ldw	ra,12(sp)
  80cddc:	dc400217 	ldw	r17,8(sp)
  80cde0:	dc000117 	ldw	r16,4(sp)
  80cde4:	dec00404 	addi	sp,sp,16
  80cde8:	f800283a 	ret
  80cdec:	d9800015 	stw	r6,0(sp)
  80cdf0:	08015540 	call	801554 <__sinit>
  80cdf4:	d9800017 	ldw	r6,0(sp)
  80cdf8:	003fe106 	br	80cd80 <_ungetc_r+0x2c>
  80cdfc:	30800417 	ldw	r2,16(r6)
  80ce00:	10002326 	beq	r2,zero,80ce90 <_ungetc_r+0x13c>
  80ce04:	31c00017 	ldw	r7,0(r6)
  80ce08:	11c0022e 	bgeu	r2,r7,80ce14 <_ungetc_r+0xc0>
  80ce0c:	38bfffc3 	ldbu	r2,-1(r7)
  80ce10:	80801226 	beq	r16,r2,80ce5c <_ungetc_r+0x108>
  80ce14:	30c00117 	ldw	r3,4(r6)
  80ce18:	00800044 	movi	r2,1
  80ce1c:	30800115 	stw	r2,4(r6)
  80ce20:	008000c4 	movi	r2,3
  80ce24:	31001004 	addi	r4,r6,64
  80ce28:	31401084 	addi	r5,r6,66
  80ce2c:	30800d15 	stw	r2,52(r6)
  80ce30:	8005883a 	mov	r2,r16
  80ce34:	30c00f15 	stw	r3,60(r6)
  80ce38:	31c00e15 	stw	r7,56(r6)
  80ce3c:	31000c15 	stw	r4,48(r6)
  80ce40:	31400015 	stw	r5,0(r6)
  80ce44:	34001085 	stb	r16,66(r6)
  80ce48:	dfc00317 	ldw	ra,12(sp)
  80ce4c:	dc400217 	ldw	r17,8(sp)
  80ce50:	dc000117 	ldw	r16,4(sp)
  80ce54:	dec00404 	addi	sp,sp,16
  80ce58:	f800283a 	ret
  80ce5c:	30800117 	ldw	r2,4(r6)
  80ce60:	39ffffc4 	addi	r7,r7,-1
  80ce64:	31c00015 	stw	r7,0(r6)
  80ce68:	10800044 	addi	r2,r2,1
  80ce6c:	30800115 	stw	r2,4(r6)
  80ce70:	003fd806 	br	80cdd4 <_ungetc_r+0x80>
  80ce74:	2880040c 	andi	r2,r5,16
  80ce78:	10000d26 	beq	r2,zero,80ceb0 <_ungetc_r+0x15c>
  80ce7c:	2880020c 	andi	r2,r5,8
  80ce80:	10000d1e 	bne	r2,zero,80ceb8 <_ungetc_r+0x164>
  80ce84:	20800114 	ori	r2,r4,4
  80ce88:	3080030d 	sth	r2,12(r6)
  80ce8c:	003fc406 	br	80cda0 <_ungetc_r+0x4c>
  80ce90:	31c00017 	ldw	r7,0(r6)
  80ce94:	003fdf06 	br	80ce14 <_ungetc_r+0xc0>
  80ce98:	300b883a 	mov	r5,r6
  80ce9c:	8809883a 	mov	r4,r17
  80cea0:	d9800015 	stw	r6,0(sp)
  80cea4:	080cc780 	call	80cc78 <__submore>
  80cea8:	d9800017 	ldw	r6,0(sp)
  80ceac:	103fc226 	beq	r2,zero,80cdb8 <_ungetc_r+0x64>
  80ceb0:	043fffc4 	movi	r16,-1
  80ceb4:	003fc706 	br	80cdd4 <_ungetc_r+0x80>
  80ceb8:	300b883a 	mov	r5,r6
  80cebc:	8809883a 	mov	r4,r17
  80cec0:	d9800015 	stw	r6,0(sp)
  80cec4:	08011940 	call	801194 <_fflush_r>
  80cec8:	d9800017 	ldw	r6,0(sp)
  80cecc:	103ff81e 	bne	r2,zero,80ceb0 <_ungetc_r+0x15c>
  80ced0:	3100030b 	ldhu	r4,12(r6)
  80ced4:	00bffdc4 	movi	r2,-9
  80ced8:	30000215 	stw	zero,8(r6)
  80cedc:	2084703a 	and	r2,r4,r2
  80cee0:	1009883a 	mov	r4,r2
  80cee4:	3080030d 	sth	r2,12(r6)
  80cee8:	30000615 	stw	zero,24(r6)
  80ceec:	003fe506 	br	80ce84 <_ungetc_r+0x130>

0080cef0 <ungetc>:
  80cef0:	01802074 	movhi	r6,129
  80cef4:	319c1404 	addi	r6,r6,28752
  80cef8:	2007883a 	mov	r3,r4
  80cefc:	31000017 	ldw	r4,0(r6)
  80cf00:	280d883a 	mov	r6,r5
  80cf04:	180b883a 	mov	r5,r3
  80cf08:	080cd541 	jmpi	80cd54 <_ungetc_r>

0080cf0c <_calloc_r>:
  80cf0c:	298b383a 	mul	r5,r5,r6
  80cf10:	defffe04 	addi	sp,sp,-8
  80cf14:	dc000015 	stw	r16,0(sp)
  80cf18:	dfc00115 	stw	ra,4(sp)
  80cf1c:	0802a700 	call	802a70 <_malloc_r>
  80cf20:	1021883a 	mov	r16,r2
  80cf24:	01c00904 	movi	r7,36
  80cf28:	10000d26 	beq	r2,zero,80cf60 <_calloc_r+0x54>
  80cf2c:	10ffff17 	ldw	r3,-4(r2)
  80cf30:	1009883a 	mov	r4,r2
  80cf34:	00bfff04 	movi	r2,-4
  80cf38:	1886703a 	and	r3,r3,r2
  80cf3c:	1887883a 	add	r3,r3,r2
  80cf40:	180d883a 	mov	r6,r3
  80cf44:	000b883a 	mov	r5,zero
  80cf48:	38c01736 	bltu	r7,r3,80cfa8 <_calloc_r+0x9c>
  80cf4c:	008004c4 	movi	r2,19
  80cf50:	10c00836 	bltu	r2,r3,80cf74 <_calloc_r+0x68>
  80cf54:	20000215 	stw	zero,8(r4)
  80cf58:	20000015 	stw	zero,0(r4)
  80cf5c:	20000115 	stw	zero,4(r4)
  80cf60:	8005883a 	mov	r2,r16
  80cf64:	dfc00117 	ldw	ra,4(sp)
  80cf68:	dc000017 	ldw	r16,0(sp)
  80cf6c:	dec00204 	addi	sp,sp,8
  80cf70:	f800283a 	ret
  80cf74:	008006c4 	movi	r2,27
  80cf78:	80000015 	stw	zero,0(r16)
  80cf7c:	80000115 	stw	zero,4(r16)
  80cf80:	81000204 	addi	r4,r16,8
  80cf84:	10fff32e 	bgeu	r2,r3,80cf54 <_calloc_r+0x48>
  80cf88:	80000215 	stw	zero,8(r16)
  80cf8c:	80000315 	stw	zero,12(r16)
  80cf90:	81000404 	addi	r4,r16,16
  80cf94:	19ffef1e 	bne	r3,r7,80cf54 <_calloc_r+0x48>
  80cf98:	81000604 	addi	r4,r16,24
  80cf9c:	80000415 	stw	zero,16(r16)
  80cfa0:	80000515 	stw	zero,20(r16)
  80cfa4:	003feb06 	br	80cf54 <_calloc_r+0x48>
  80cfa8:	08034140 	call	803414 <memset>
  80cfac:	8005883a 	mov	r2,r16
  80cfb0:	dfc00117 	ldw	ra,4(sp)
  80cfb4:	dc000017 	ldw	r16,0(sp)
  80cfb8:	dec00204 	addi	sp,sp,8
  80cfbc:	f800283a 	ret

0080cfc0 <htinit>:
  80cfc0:	28800003 	ldbu	r2,0(r5)
  80cfc4:	10000626 	beq	r2,zero,80cfe0 <htinit+0x20>
  80cfc8:	1105883a 	add	r2,r2,r4
  80cfcc:	11800005 	stb	r6,0(r2)
  80cfd0:	28800043 	ldbu	r2,1(r5)
  80cfd4:	31800044 	addi	r6,r6,1
  80cfd8:	29400044 	addi	r5,r5,1
  80cfdc:	103ffa1e 	bne	r2,zero,80cfc8 <htinit+0x8>
  80cfe0:	f800283a 	ret

0080cfe4 <__hexdig_init>:
  80cfe4:	defffd04 	addi	sp,sp,-12
  80cfe8:	dc400015 	stw	r17,0(sp)
  80cfec:	044020b4 	movhi	r17,130
  80cff0:	8c638a04 	addi	r17,r17,-29144
  80cff4:	dcc00115 	stw	r19,4(sp)
  80cff8:	8809883a 	mov	r4,r17
  80cffc:	04c00684 	movi	r19,26
  80d000:	01402074 	movhi	r5,129
  80d004:	29549904 	addi	r5,r5,21092
  80d008:	01800404 	movi	r6,16
  80d00c:	dfc00215 	stw	ra,8(sp)
  80d010:	080cfc00 	call	80cfc0 <htinit>
  80d014:	980d883a 	mov	r6,r19
  80d018:	8809883a 	mov	r4,r17
  80d01c:	01402074 	movhi	r5,129
  80d020:	29549c04 	addi	r5,r5,21104
  80d024:	080cfc00 	call	80cfc0 <htinit>
  80d028:	8809883a 	mov	r4,r17
  80d02c:	980d883a 	mov	r6,r19
  80d030:	01402074 	movhi	r5,129
  80d034:	29549e04 	addi	r5,r5,21112
  80d038:	dfc00217 	ldw	ra,8(sp)
  80d03c:	dcc00117 	ldw	r19,4(sp)
  80d040:	dc400017 	ldw	r17,0(sp)
  80d044:	dec00304 	addi	sp,sp,12
  80d048:	080cfc01 	jmpi	80cfc0 <htinit>

0080d04c <rshift>:
  80d04c:	2807d17a 	srai	r3,r5,5
  80d050:	20800417 	ldw	r2,16(r4)
  80d054:	22400504 	addi	r9,r4,20
  80d058:	480f883a 	mov	r7,r9
  80d05c:	1880190e 	bge	r3,r2,80d0c4 <rshift+0x78>
  80d060:	1085883a 	add	r2,r2,r2
  80d064:	18c7883a 	add	r3,r3,r3
  80d068:	1085883a 	add	r2,r2,r2
  80d06c:	18c7883a 	add	r3,r3,r3
  80d070:	294007cc 	andi	r5,r5,31
  80d074:	4891883a 	add	r8,r9,r2
  80d078:	48cd883a 	add	r6,r9,r3
  80d07c:	28001726 	beq	r5,zero,80d0dc <rshift+0x90>
  80d080:	30c00017 	ldw	r3,0(r6)
  80d084:	00800804 	movi	r2,32
  80d088:	31800104 	addi	r6,r6,4
  80d08c:	1155c83a 	sub	r10,r2,r5
  80d090:	1946d83a 	srl	r3,r3,r5
  80d094:	3200092e 	bgeu	r6,r8,80d0bc <rshift+0x70>
  80d098:	30800017 	ldw	r2,0(r6)
  80d09c:	1284983a 	sll	r2,r2,r10
  80d0a0:	10c4b03a 	or	r2,r2,r3
  80d0a4:	38800015 	stw	r2,0(r7)
  80d0a8:	30c00017 	ldw	r3,0(r6)
  80d0ac:	31800104 	addi	r6,r6,4
  80d0b0:	39c00104 	addi	r7,r7,4
  80d0b4:	1946d83a 	srl	r3,r3,r5
  80d0b8:	323ff736 	bltu	r6,r8,80d098 <rshift+0x4c>
  80d0bc:	38c00015 	stw	r3,0(r7)
  80d0c0:	18000c1e 	bne	r3,zero,80d0f4 <rshift+0xa8>
  80d0c4:	3a45c83a 	sub	r2,r7,r9
  80d0c8:	1005d0ba 	srai	r2,r2,2
  80d0cc:	20800415 	stw	r2,16(r4)
  80d0d0:	1000011e 	bne	r2,zero,80d0d8 <rshift+0x8c>
  80d0d4:	20000515 	stw	zero,20(r4)
  80d0d8:	f800283a 	ret
  80d0dc:	323ff92e 	bgeu	r6,r8,80d0c4 <rshift+0x78>
  80d0e0:	30800017 	ldw	r2,0(r6)
  80d0e4:	31800104 	addi	r6,r6,4
  80d0e8:	38800015 	stw	r2,0(r7)
  80d0ec:	39c00104 	addi	r7,r7,4
  80d0f0:	003ffa06 	br	80d0dc <rshift+0x90>
  80d0f4:	39c00104 	addi	r7,r7,4
  80d0f8:	003ff206 	br	80d0c4 <rshift+0x78>

0080d0fc <__gethex>:
  80d0fc:	defff304 	addi	sp,sp,-52
  80d100:	dd400815 	stw	r21,32(sp)
  80d104:	dd000715 	stw	r20,28(sp)
  80d108:	dcc00615 	stw	r19,24(sp)
  80d10c:	dc400415 	stw	r17,16(sp)
  80d110:	dfc00c15 	stw	ra,48(sp)
  80d114:	df000b15 	stw	fp,44(sp)
  80d118:	ddc00a15 	stw	r23,40(sp)
  80d11c:	dd800915 	stw	r22,36(sp)
  80d120:	dc800515 	stw	r18,20(sp)
  80d124:	dc000315 	stw	r16,12(sp)
  80d128:	044020b4 	movhi	r17,130
  80d12c:	8c638a04 	addi	r17,r17,-29144
  80d130:	88800c03 	ldbu	r2,48(r17)
  80d134:	202b883a 	mov	r21,r4
  80d138:	2827883a 	mov	r19,r5
  80d13c:	3029883a 	mov	r20,r6
  80d140:	d9c00115 	stw	r7,4(sp)
  80d144:	10006e26 	beq	r2,zero,80d300 <__gethex+0x204>
  80d148:	99800017 	ldw	r6,0(r19)
  80d14c:	00800c04 	movi	r2,48
  80d150:	31000083 	ldbu	r4,2(r6)
  80d154:	30c00084 	addi	r3,r6,2
  80d158:	20806f1e 	bne	r4,r2,80d318 <__gethex+0x21c>
  80d15c:	200b883a 	mov	r5,r4
  80d160:	3007883a 	mov	r3,r6
  80d164:	188000c3 	ldbu	r2,3(r3)
  80d168:	18c00044 	addi	r3,r3,1
  80d16c:	1009883a 	mov	r4,r2
  80d170:	117ffc26 	beq	r2,r5,80d164 <__gethex+0x68>
  80d174:	1997c83a 	sub	r11,r3,r6
  80d178:	19400084 	addi	r5,r3,2
  80d17c:	2445883a 	add	r2,r4,r17
  80d180:	10c00003 	ldbu	r3,0(r2)
  80d184:	18002d26 	beq	r3,zero,80d23c <__gethex+0x140>
  80d188:	29000003 	ldbu	r4,0(r5)
  80d18c:	2825883a 	mov	r18,r5
  80d190:	000d883a 	mov	r6,zero
  80d194:	0013883a 	mov	r9,zero
  80d198:	21003fcc 	andi	r4,r4,255
  80d19c:	2445883a 	add	r2,r4,r17
  80d1a0:	10c00003 	ldbu	r3,0(r2)
  80d1a4:	18000526 	beq	r3,zero,80d1bc <__gethex+0xc0>
  80d1a8:	29400044 	addi	r5,r5,1
  80d1ac:	29000003 	ldbu	r4,0(r5)
  80d1b0:	2445883a 	add	r2,r4,r17
  80d1b4:	10c00003 	ldbu	r3,0(r2)
  80d1b8:	183ffb1e 	bne	r3,zero,80d1a8 <__gethex+0xac>
  80d1bc:	00800b84 	movi	r2,46
  80d1c0:	20805826 	beq	r4,r2,80d324 <__gethex+0x228>
  80d1c4:	30007a26 	beq	r6,zero,80d3b0 <__gethex+0x2b4>
  80d1c8:	2985c83a 	sub	r2,r5,r6
  80d1cc:	1085883a 	add	r2,r2,r2
  80d1d0:	1085883a 	add	r2,r2,r2
  80d1d4:	00adc83a 	sub	r22,zero,r2
  80d1d8:	2821883a 	mov	r16,r5
  80d1dc:	80c00003 	ldbu	r3,0(r16)
  80d1e0:	00801404 	movi	r2,80
  80d1e4:	18801e26 	beq	r3,r2,80d260 <__gethex+0x164>
  80d1e8:	00801c04 	movi	r2,112
  80d1ec:	18801c26 	beq	r3,r2,80d260 <__gethex+0x164>
  80d1f0:	800d883a 	mov	r6,r16
  80d1f4:	4805003a 	cmpeq	r2,r9,zero
  80d1f8:	99800015 	stw	r6,0(r19)
  80d1fc:	1000861e 	bne	r2,zero,80d418 <__gethex+0x31c>
  80d200:	58003d26 	beq	r11,zero,80d2f8 <__gethex+0x1fc>
  80d204:	0025883a 	mov	r18,zero
  80d208:	9005883a 	mov	r2,r18
  80d20c:	dfc00c17 	ldw	ra,48(sp)
  80d210:	df000b17 	ldw	fp,44(sp)
  80d214:	ddc00a17 	ldw	r23,40(sp)
  80d218:	dd800917 	ldw	r22,36(sp)
  80d21c:	dd400817 	ldw	r21,32(sp)
  80d220:	dd000717 	ldw	r20,28(sp)
  80d224:	dcc00617 	ldw	r19,24(sp)
  80d228:	dc800517 	ldw	r18,20(sp)
  80d22c:	dc400417 	ldw	r17,16(sp)
  80d230:	dc000317 	ldw	r16,12(sp)
  80d234:	dec00d04 	addi	sp,sp,52
  80d238:	f800283a 	ret
  80d23c:	00800b84 	movi	r2,46
  80d240:	20804a26 	beq	r4,r2,80d36c <__gethex+0x270>
  80d244:	2821883a 	mov	r16,r5
  80d248:	80c00003 	ldbu	r3,0(r16)
  80d24c:	00801404 	movi	r2,80
  80d250:	2825883a 	mov	r18,r5
  80d254:	02400044 	movi	r9,1
  80d258:	002d883a 	mov	r22,zero
  80d25c:	18bfe21e 	bne	r3,r2,80d1e8 <__gethex+0xec>
  80d260:	80c00043 	ldbu	r3,1(r16)
  80d264:	00800ac4 	movi	r2,43
  80d268:	81000044 	addi	r4,r16,1
  80d26c:	18804a26 	beq	r3,r2,80d398 <__gethex+0x29c>
  80d270:	00800b44 	movi	r2,45
  80d274:	18804c26 	beq	r3,r2,80d3a8 <__gethex+0x2ac>
  80d278:	0015883a 	mov	r10,zero
  80d27c:	1c45883a 	add	r2,r3,r17
  80d280:	10800003 	ldbu	r2,0(r2)
  80d284:	103fda26 	beq	r2,zero,80d1f0 <__gethex+0xf4>
  80d288:	02000644 	movi	r8,25
  80d28c:	40bfd816 	blt	r8,r2,80d1f0 <__gethex+0xf4>
  80d290:	20c00043 	ldbu	r3,1(r4)
  80d294:	11fffc04 	addi	r7,r2,-16
  80d298:	008020b4 	movhi	r2,130
  80d29c:	10a38a04 	addi	r2,r2,-29144
  80d2a0:	1887883a 	add	r3,r3,r2
  80d2a4:	18800003 	ldbu	r2,0(r3)
  80d2a8:	21800044 	addi	r6,r4,1
  80d2ac:	10000d26 	beq	r2,zero,80d2e4 <__gethex+0x1e8>
  80d2b0:	100b883a 	mov	r5,r2
  80d2b4:	4080020e 	bge	r8,r2,80d2c0 <__gethex+0x1c4>
  80d2b8:	00000a06 	br	80d2e4 <__gethex+0x1e8>
  80d2bc:	41000916 	blt	r8,r4,80d2e4 <__gethex+0x1e8>
  80d2c0:	31800044 	addi	r6,r6,1
  80d2c4:	30800003 	ldbu	r2,0(r6)
  80d2c8:	38c002a4 	muli	r3,r7,10
  80d2cc:	1445883a 	add	r2,r2,r17
  80d2d0:	11000003 	ldbu	r4,0(r2)
  80d2d4:	1947883a 	add	r3,r3,r5
  80d2d8:	19fffc04 	addi	r7,r3,-16
  80d2dc:	200b883a 	mov	r5,r4
  80d2e0:	203ff61e 	bne	r4,zero,80d2bc <__gethex+0x1c0>
  80d2e4:	5005003a 	cmpeq	r2,r10,zero
  80d2e8:	1000011e 	bne	r2,zero,80d2f0 <__gethex+0x1f4>
  80d2ec:	01cfc83a 	sub	r7,zero,r7
  80d2f0:	b1ed883a 	add	r22,r22,r7
  80d2f4:	003fbf06 	br	80d1f4 <__gethex+0xf8>
  80d2f8:	04800184 	movi	r18,6
  80d2fc:	003fc206 	br	80d208 <__gethex+0x10c>
  80d300:	080cfe40 	call	80cfe4 <__hexdig_init>
  80d304:	99800017 	ldw	r6,0(r19)
  80d308:	00800c04 	movi	r2,48
  80d30c:	31000083 	ldbu	r4,2(r6)
  80d310:	30c00084 	addi	r3,r6,2
  80d314:	20bf9126 	beq	r4,r2,80d15c <__gethex+0x60>
  80d318:	180b883a 	mov	r5,r3
  80d31c:	0017883a 	mov	r11,zero
  80d320:	003f9606 	br	80d17c <__gethex+0x80>
  80d324:	303fa81e 	bne	r6,zero,80d1c8 <__gethex+0xcc>
  80d328:	29400044 	addi	r5,r5,1
  80d32c:	28800003 	ldbu	r2,0(r5)
  80d330:	1445883a 	add	r2,r2,r17
  80d334:	10c00003 	ldbu	r3,0(r2)
  80d338:	1800ad26 	beq	r3,zero,80d5f0 <__gethex+0x4f4>
  80d33c:	2809883a 	mov	r4,r5
  80d340:	21000044 	addi	r4,r4,1
  80d344:	20800003 	ldbu	r2,0(r4)
  80d348:	1445883a 	add	r2,r2,r17
  80d34c:	10c00003 	ldbu	r3,0(r2)
  80d350:	183ffb1e 	bne	r3,zero,80d340 <__gethex+0x244>
  80d354:	2145c83a 	sub	r2,r4,r5
  80d358:	1085883a 	add	r2,r2,r2
  80d35c:	1085883a 	add	r2,r2,r2
  80d360:	00adc83a 	sub	r22,zero,r2
  80d364:	200b883a 	mov	r5,r4
  80d368:	003f9b06 	br	80d1d8 <__gethex+0xdc>
  80d36c:	29000043 	ldbu	r4,1(r5)
  80d370:	008020b4 	movhi	r2,130
  80d374:	10a38a04 	addi	r2,r2,-29144
  80d378:	2c000044 	addi	r16,r5,1
  80d37c:	2085883a 	add	r2,r4,r2
  80d380:	10c00003 	ldbu	r3,0(r2)
  80d384:	18000d1e 	bne	r3,zero,80d3bc <__gethex+0x2c0>
  80d388:	2825883a 	mov	r18,r5
  80d38c:	02400044 	movi	r9,1
  80d390:	002d883a 	mov	r22,zero
  80d394:	003f9106 	br	80d1dc <__gethex+0xe0>
  80d398:	0015883a 	mov	r10,zero
  80d39c:	21000044 	addi	r4,r4,1
  80d3a0:	20c00003 	ldbu	r3,0(r4)
  80d3a4:	003fb506 	br	80d27c <__gethex+0x180>
  80d3a8:	02800044 	movi	r10,1
  80d3ac:	003ffb06 	br	80d39c <__gethex+0x2a0>
  80d3b0:	2821883a 	mov	r16,r5
  80d3b4:	002d883a 	mov	r22,zero
  80d3b8:	003f8806 	br	80d1dc <__gethex+0xe0>
  80d3bc:	00800c04 	movi	r2,48
  80d3c0:	20800e1e 	bne	r4,r2,80d3fc <__gethex+0x300>
  80d3c4:	2007883a 	mov	r3,r4
  80d3c8:	800b883a 	mov	r5,r16
  80d3cc:	29400044 	addi	r5,r5,1
  80d3d0:	29000003 	ldbu	r4,0(r5)
  80d3d4:	20803fcc 	andi	r2,r4,255
  80d3d8:	10fffc26 	beq	r2,r3,80d3cc <__gethex+0x2d0>
  80d3dc:	1445883a 	add	r2,r2,r17
  80d3e0:	10c00003 	ldbu	r3,0(r2)
  80d3e4:	1800071e 	bne	r3,zero,80d404 <__gethex+0x308>
  80d3e8:	02c00044 	movi	r11,1
  80d3ec:	800d883a 	mov	r6,r16
  80d3f0:	2825883a 	mov	r18,r5
  80d3f4:	5813883a 	mov	r9,r11
  80d3f8:	003f6706 	br	80d198 <__gethex+0x9c>
  80d3fc:	81000003 	ldbu	r4,0(r16)
  80d400:	800b883a 	mov	r5,r16
  80d404:	800d883a 	mov	r6,r16
  80d408:	2825883a 	mov	r18,r5
  80d40c:	02c00044 	movi	r11,1
  80d410:	0013883a 	mov	r9,zero
  80d414:	003f6006 	br	80d198 <__gethex+0x9c>
  80d418:	8485c83a 	sub	r2,r16,r18
  80d41c:	10bfffc4 	addi	r2,r2,-1
  80d420:	00c001c4 	movi	r3,7
  80d424:	1880700e 	bge	r3,r2,80d5e8 <__gethex+0x4ec>
  80d428:	000b883a 	mov	r5,zero
  80d42c:	1005d07a 	srai	r2,r2,1
  80d430:	29400044 	addi	r5,r5,1
  80d434:	18bffd16 	blt	r3,r2,80d42c <__gethex+0x330>
  80d438:	a809883a 	mov	r4,r21
  80d43c:	0809e680 	call	809e68 <_Balloc>
  80d440:	1027883a 	mov	r19,r2
  80d444:	10800504 	addi	r2,r2,20
  80d448:	d8800215 	stw	r2,8(sp)
  80d44c:	9400522e 	bgeu	r18,r16,80d598 <__gethex+0x49c>
  80d450:	da000217 	ldw	r8,8(sp)
  80d454:	800b883a 	mov	r5,r16
  80d458:	000f883a 	mov	r7,zero
  80d45c:	0009883a 	mov	r4,zero
  80d460:	02400b84 	movi	r9,46
  80d464:	02800804 	movi	r10,32
  80d468:	297fffc4 	addi	r5,r5,-1
  80d46c:	28c00003 	ldbu	r3,0(r5)
  80d470:	1a400826 	beq	r3,r9,80d494 <__gethex+0x398>
  80d474:	380d883a 	mov	r6,r7
  80d478:	3a802726 	beq	r7,r10,80d518 <__gethex+0x41c>
  80d47c:	39c00104 	addi	r7,r7,4
  80d480:	1c47883a 	add	r3,r3,r17
  80d484:	18800003 	ldbu	r2,0(r3)
  80d488:	108003cc 	andi	r2,r2,15
  80d48c:	1184983a 	sll	r2,r2,r6
  80d490:	2088b03a 	or	r4,r4,r2
  80d494:	917ff436 	bltu	r18,r5,80d468 <__gethex+0x36c>
  80d498:	d8c00217 	ldw	r3,8(sp)
  80d49c:	40800104 	addi	r2,r8,4
  80d4a0:	41000015 	stw	r4,0(r8)
  80d4a4:	10c5c83a 	sub	r2,r2,r3
  80d4a8:	1021d0ba 	srai	r16,r2,2
  80d4ac:	9c000415 	stw	r16,16(r19)
  80d4b0:	08099100 	call	809910 <__hi0bits>
  80d4b4:	8006917a 	slli	r3,r16,5
  80d4b8:	a5c00017 	ldw	r23,0(r20)
  80d4bc:	1885c83a 	sub	r2,r3,r2
  80d4c0:	b8801c16 	blt	r23,r2,80d534 <__gethex+0x438>
  80d4c4:	15c00a16 	blt	r2,r23,80d4f0 <__gethex+0x3f4>
  80d4c8:	0039883a 	mov	fp,zero
  80d4cc:	a0800217 	ldw	r2,8(r20)
  80d4d0:	1580340e 	bge	r2,r22,80d5a4 <__gethex+0x4a8>
  80d4d4:	a809883a 	mov	r4,r21
  80d4d8:	980b883a 	mov	r5,r19
  80d4dc:	08098e80 	call	8098e8 <_Bfree>
  80d4e0:	d8c00d17 	ldw	r3,52(sp)
  80d4e4:	048028c4 	movi	r18,163
  80d4e8:	18000015 	stw	zero,0(r3)
  80d4ec:	003f4606 	br	80d208 <__gethex+0x10c>
  80d4f0:	b8a1c83a 	sub	r16,r23,r2
  80d4f4:	980b883a 	mov	r5,r19
  80d4f8:	a809883a 	mov	r4,r21
  80d4fc:	800d883a 	mov	r6,r16
  80d500:	080a22c0 	call	80a22c <__lshift>
  80d504:	1027883a 	mov	r19,r2
  80d508:	b42dc83a 	sub	r22,r22,r16
  80d50c:	10800504 	addi	r2,r2,20
  80d510:	d8800215 	stw	r2,8(sp)
  80d514:	003fec06 	br	80d4c8 <__gethex+0x3cc>
  80d518:	41000015 	stw	r4,0(r8)
  80d51c:	28c00003 	ldbu	r3,0(r5)
  80d520:	01c00104 	movi	r7,4
  80d524:	000d883a 	mov	r6,zero
  80d528:	41d1883a 	add	r8,r8,r7
  80d52c:	0009883a 	mov	r4,zero
  80d530:	003fd306 	br	80d480 <__gethex+0x384>
  80d534:	15e1c83a 	sub	r16,r2,r23
  80d538:	9809883a 	mov	r4,r19
  80d53c:	800b883a 	mov	r5,r16
  80d540:	0809de00 	call	809de0 <__any_on>
  80d544:	1000061e 	bne	r2,zero,80d560 <__gethex+0x464>
  80d548:	0039883a 	mov	fp,zero
  80d54c:	9809883a 	mov	r4,r19
  80d550:	800b883a 	mov	r5,r16
  80d554:	080d04c0 	call	80d04c <rshift>
  80d558:	b42d883a 	add	r22,r22,r16
  80d55c:	003fdb06 	br	80d4cc <__gethex+0x3d0>
  80d560:	817fffc4 	addi	r5,r16,-1
  80d564:	2805d17a 	srai	r2,r5,5
  80d568:	d8c00217 	ldw	r3,8(sp)
  80d56c:	290007cc 	andi	r4,r5,31
  80d570:	1085883a 	add	r2,r2,r2
  80d574:	1085883a 	add	r2,r2,r2
  80d578:	01800044 	movi	r6,1
  80d57c:	10c5883a 	add	r2,r2,r3
  80d580:	3108983a 	sll	r4,r6,r4
  80d584:	10c00017 	ldw	r3,0(r2)
  80d588:	20c8703a 	and	r4,r4,r3
  80d58c:	20001a1e 	bne	r4,zero,80d5f8 <__gethex+0x4fc>
  80d590:	3039883a 	mov	fp,r6
  80d594:	003fed06 	br	80d54c <__gethex+0x450>
  80d598:	1011883a 	mov	r8,r2
  80d59c:	0009883a 	mov	r4,zero
  80d5a0:	003fbd06 	br	80d498 <__gethex+0x39c>
  80d5a4:	a1000117 	ldw	r4,4(r20)
  80d5a8:	b1001a16 	blt	r22,r4,80d614 <__gethex+0x518>
  80d5ac:	04800044 	movi	r18,1
  80d5b0:	e0000826 	beq	fp,zero,80d5d4 <__gethex+0x4d8>
  80d5b4:	a1000317 	ldw	r4,12(r20)
  80d5b8:	00800084 	movi	r2,2
  80d5bc:	20809426 	beq	r4,r2,80d810 <__gethex+0x714>
  80d5c0:	008000c4 	movi	r2,3
  80d5c4:	20805826 	beq	r4,r2,80d728 <__gethex+0x62c>
  80d5c8:	00800044 	movi	r2,1
  80d5cc:	20803f26 	beq	r4,r2,80d6cc <__gethex+0x5d0>
  80d5d0:	94800414 	ori	r18,r18,16
  80d5d4:	d8800d17 	ldw	r2,52(sp)
  80d5d8:	d8c00117 	ldw	r3,4(sp)
  80d5dc:	14c00015 	stw	r19,0(r2)
  80d5e0:	1d800015 	stw	r22,0(r3)
  80d5e4:	003f0806 	br	80d208 <__gethex+0x10c>
  80d5e8:	000b883a 	mov	r5,zero
  80d5ec:	003f9206 	br	80d438 <__gethex+0x33c>
  80d5f0:	002d883a 	mov	r22,zero
  80d5f4:	003ef806 	br	80d1d8 <__gethex+0xdc>
  80d5f8:	3140160e 	bge	r6,r5,80d654 <__gethex+0x558>
  80d5fc:	9809883a 	mov	r4,r19
  80d600:	817fff84 	addi	r5,r16,-2
  80d604:	0809de00 	call	809de0 <__any_on>
  80d608:	10001226 	beq	r2,zero,80d654 <__gethex+0x558>
  80d60c:	070000c4 	movi	fp,3
  80d610:	003fce06 	br	80d54c <__gethex+0x450>
  80d614:	25a3c83a 	sub	r17,r4,r22
  80d618:	8dc01016 	blt	r17,r23,80d65c <__gethex+0x560>
  80d61c:	a0c00317 	ldw	r3,12(r20)
  80d620:	00800084 	movi	r2,2
  80d624:	18809326 	beq	r3,r2,80d874 <__gethex+0x778>
  80d628:	008000c4 	movi	r2,3
  80d62c:	18808e26 	beq	r3,r2,80d868 <__gethex+0x76c>
  80d630:	00800044 	movi	r2,1
  80d634:	18807b26 	beq	r3,r2,80d824 <__gethex+0x728>
  80d638:	a809883a 	mov	r4,r21
  80d63c:	980b883a 	mov	r5,r19
  80d640:	08098e80 	call	8098e8 <_Bfree>
  80d644:	d8c00d17 	ldw	r3,52(sp)
  80d648:	04801404 	movi	r18,80
  80d64c:	18000015 	stw	zero,0(r3)
  80d650:	003eed06 	br	80d208 <__gethex+0x10c>
  80d654:	07000084 	movi	fp,2
  80d658:	003fbc06 	br	80d54c <__gethex+0x450>
  80d65c:	8c3fffc4 	addi	r16,r17,-1
  80d660:	e0001426 	beq	fp,zero,80d6b4 <__gethex+0x5b8>
  80d664:	07000044 	movi	fp,1
  80d668:	8005d17a 	srai	r2,r16,5
  80d66c:	d8c00217 	ldw	r3,8(sp)
  80d670:	814007cc 	andi	r5,r16,31
  80d674:	1085883a 	add	r2,r2,r2
  80d678:	1085883a 	add	r2,r2,r2
  80d67c:	10c5883a 	add	r2,r2,r3
  80d680:	00c00044 	movi	r3,1
  80d684:	1946983a 	sll	r3,r3,r5
  80d688:	11000017 	ldw	r4,0(r2)
  80d68c:	1906703a 	and	r3,r3,r4
  80d690:	18000126 	beq	r3,zero,80d698 <__gethex+0x59c>
  80d694:	e7000094 	ori	fp,fp,2
  80d698:	880b883a 	mov	r5,r17
  80d69c:	9809883a 	mov	r4,r19
  80d6a0:	080d04c0 	call	80d04c <rshift>
  80d6a4:	a5800117 	ldw	r22,4(r20)
  80d6a8:	bc6fc83a 	sub	r23,r23,r17
  80d6ac:	04800084 	movi	r18,2
  80d6b0:	003fbf06 	br	80d5b0 <__gethex+0x4b4>
  80d6b4:	043fec0e 	bge	zero,r16,80d668 <__gethex+0x56c>
  80d6b8:	9809883a 	mov	r4,r19
  80d6bc:	800b883a 	mov	r5,r16
  80d6c0:	0809de00 	call	809de0 <__any_on>
  80d6c4:	1039883a 	mov	fp,r2
  80d6c8:	003fe706 	br	80d668 <__gethex+0x56c>
  80d6cc:	e080008c 	andi	r2,fp,2
  80d6d0:	103fbf26 	beq	r2,zero,80d5d0 <__gethex+0x4d4>
  80d6d4:	d8c00217 	ldw	r3,8(sp)
  80d6d8:	18800017 	ldw	r2,0(r3)
  80d6dc:	e084b03a 	or	r2,fp,r2
  80d6e0:	1104703a 	and	r2,r2,r4
  80d6e4:	103fba26 	beq	r2,zero,80d5d0 <__gethex+0x4d4>
  80d6e8:	9c000417 	ldw	r16,16(r19)
  80d6ec:	d8c00217 	ldw	r3,8(sp)
  80d6f0:	017fffc4 	movi	r5,-1
  80d6f4:	8405883a 	add	r2,r16,r16
  80d6f8:	10b9883a 	add	fp,r2,r2
  80d6fc:	1f09883a 	add	r4,r3,fp
  80d700:	dc000015 	stw	r16,0(sp)
  80d704:	00000306 	br	80d714 <__gethex+0x618>
  80d708:	18000015 	stw	zero,0(r3)
  80d70c:	18c00104 	addi	r3,r3,4
  80d710:	1900082e 	bgeu	r3,r4,80d734 <__gethex+0x638>
  80d714:	18800017 	ldw	r2,0(r3)
  80d718:	117ffb26 	beq	r2,r5,80d708 <__gethex+0x60c>
  80d71c:	10800044 	addi	r2,r2,1
  80d720:	18800015 	stw	r2,0(r3)
  80d724:	00001f06 	br	80d7a4 <__gethex+0x6a8>
  80d728:	d8800e17 	ldw	r2,56(sp)
  80d72c:	103fa826 	beq	r2,zero,80d5d0 <__gethex+0x4d4>
  80d730:	003fed06 	br	80d6e8 <__gethex+0x5ec>
  80d734:	98800217 	ldw	r2,8(r19)
  80d738:	80801316 	blt	r16,r2,80d788 <__gethex+0x68c>
  80d73c:	99400117 	ldw	r5,4(r19)
  80d740:	a809883a 	mov	r4,r21
  80d744:	29400044 	addi	r5,r5,1
  80d748:	0809e680 	call	809e68 <_Balloc>
  80d74c:	99800417 	ldw	r6,16(r19)
  80d750:	99400304 	addi	r5,r19,12
  80d754:	11000304 	addi	r4,r2,12
  80d758:	318d883a 	add	r6,r6,r6
  80d75c:	318d883a 	add	r6,r6,r6
  80d760:	31800204 	addi	r6,r6,8
  80d764:	1023883a 	mov	r17,r2
  80d768:	08032940 	call	803294 <memcpy>
  80d76c:	980b883a 	mov	r5,r19
  80d770:	a809883a 	mov	r4,r21
  80d774:	08098e80 	call	8098e8 <_Bfree>
  80d778:	8c000417 	ldw	r16,16(r17)
  80d77c:	88800504 	addi	r2,r17,20
  80d780:	8827883a 	mov	r19,r17
  80d784:	d8800215 	stw	r2,8(sp)
  80d788:	8405883a 	add	r2,r16,r16
  80d78c:	1085883a 	add	r2,r2,r2
  80d790:	14c5883a 	add	r2,r2,r19
  80d794:	84000044 	addi	r16,r16,1
  80d798:	00c00044 	movi	r3,1
  80d79c:	10c00515 	stw	r3,20(r2)
  80d7a0:	9c000415 	stw	r16,16(r19)
  80d7a4:	00800084 	movi	r2,2
  80d7a8:	90801426 	beq	r18,r2,80d7fc <__gethex+0x700>
  80d7ac:	d8800017 	ldw	r2,0(sp)
  80d7b0:	14000b16 	blt	r2,r16,80d7e0 <__gethex+0x6e4>
  80d7b4:	bc0007cc 	andi	r16,r23,31
  80d7b8:	8000021e 	bne	r16,zero,80d7c4 <__gethex+0x6c8>
  80d7bc:	94800814 	ori	r18,r18,32
  80d7c0:	003f8406 	br	80d5d4 <__gethex+0x4d8>
  80d7c4:	d8c00217 	ldw	r3,8(sp)
  80d7c8:	1f05883a 	add	r2,r3,fp
  80d7cc:	113fff17 	ldw	r4,-4(r2)
  80d7d0:	08099100 	call	809910 <__hi0bits>
  80d7d4:	00c00804 	movi	r3,32
  80d7d8:	1c07c83a 	sub	r3,r3,r16
  80d7dc:	10fff70e 	bge	r2,r3,80d7bc <__gethex+0x6c0>
  80d7e0:	9809883a 	mov	r4,r19
  80d7e4:	01400044 	movi	r5,1
  80d7e8:	080d04c0 	call	80d04c <rshift>
  80d7ec:	a0800217 	ldw	r2,8(r20)
  80d7f0:	b5800044 	addi	r22,r22,1
  80d7f4:	15bf3716 	blt	r2,r22,80d4d4 <__gethex+0x3d8>
  80d7f8:	003ff006 	br	80d7bc <__gethex+0x6c0>
  80d7fc:	a0800017 	ldw	r2,0(r20)
  80d800:	10bfffc4 	addi	r2,r2,-1
  80d804:	b8801e26 	beq	r23,r2,80d880 <__gethex+0x784>
  80d808:	04800884 	movi	r18,34
  80d80c:	003f7106 	br	80d5d4 <__gethex+0x4d8>
  80d810:	d8c00e17 	ldw	r3,56(sp)
  80d814:	00800044 	movi	r2,1
  80d818:	10c5c83a 	sub	r2,r2,r3
  80d81c:	103f6c26 	beq	r2,zero,80d5d0 <__gethex+0x4d4>
  80d820:	003fb106 	br	80d6e8 <__gethex+0x5ec>
  80d824:	bc7f841e 	bne	r23,r17,80d638 <__gethex+0x53c>
  80d828:	1dc0050e 	bge	r3,r23,80d840 <__gethex+0x744>
  80d82c:	b8cbc83a 	sub	r5,r23,r3
  80d830:	9809883a 	mov	r4,r19
  80d834:	0809de00 	call	809de0 <__any_on>
  80d838:	103f7f26 	beq	r2,zero,80d638 <__gethex+0x53c>
  80d83c:	a1000117 	ldw	r4,4(r20)
  80d840:	d8800117 	ldw	r2,4(sp)
  80d844:	d8c00217 	ldw	r3,8(sp)
  80d848:	04000044 	movi	r16,1
  80d84c:	11000015 	stw	r4,0(r2)
  80d850:	d8800d17 	ldw	r2,52(sp)
  80d854:	04801884 	movi	r18,98
  80d858:	1c000015 	stw	r16,0(r3)
  80d85c:	14c00015 	stw	r19,0(r2)
  80d860:	9c000415 	stw	r16,16(r19)
  80d864:	003e6806 	br	80d208 <__gethex+0x10c>
  80d868:	d8c00e17 	ldw	r3,56(sp)
  80d86c:	183f7226 	beq	r3,zero,80d638 <__gethex+0x53c>
  80d870:	003ff306 	br	80d840 <__gethex+0x744>
  80d874:	d8800e17 	ldw	r2,56(sp)
  80d878:	103ff126 	beq	r2,zero,80d840 <__gethex+0x744>
  80d87c:	003f6e06 	br	80d638 <__gethex+0x53c>
  80d880:	b805d17a 	srai	r2,r23,5
  80d884:	d8c00217 	ldw	r3,8(sp)
  80d888:	b94007cc 	andi	r5,r23,31
  80d88c:	1085883a 	add	r2,r2,r2
  80d890:	1085883a 	add	r2,r2,r2
  80d894:	10c5883a 	add	r2,r2,r3
  80d898:	00c00044 	movi	r3,1
  80d89c:	1946983a 	sll	r3,r3,r5
  80d8a0:	11000017 	ldw	r4,0(r2)
  80d8a4:	1906703a 	and	r3,r3,r4
  80d8a8:	183fd726 	beq	r3,zero,80d808 <__gethex+0x70c>
  80d8ac:	04800844 	movi	r18,33
  80d8b0:	003f4806 	br	80d5d4 <__gethex+0x4d8>

0080d8b4 <L_shift>:
  80d8b4:	00800204 	movi	r2,8
  80d8b8:	1185c83a 	sub	r2,r2,r6
  80d8bc:	1085883a 	add	r2,r2,r2
  80d8c0:	21c00017 	ldw	r7,0(r4)
  80d8c4:	1093883a 	add	r9,r2,r2
  80d8c8:	00800804 	movi	r2,32
  80d8cc:	200d883a 	mov	r6,r4
  80d8d0:	1251c83a 	sub	r8,r2,r9
  80d8d4:	31800104 	addi	r6,r6,4
  80d8d8:	3805883a 	mov	r2,r7
  80d8dc:	31c00017 	ldw	r7,0(r6)
  80d8e0:	3a08983a 	sll	r4,r7,r8
  80d8e4:	3a46d83a 	srl	r3,r7,r9
  80d8e8:	1104b03a 	or	r2,r2,r4
  80d8ec:	180f883a 	mov	r7,r3
  80d8f0:	30bfff15 	stw	r2,-4(r6)
  80d8f4:	30c00015 	stw	r3,0(r6)
  80d8f8:	317ff636 	bltu	r6,r5,80d8d4 <L_shift+0x20>
  80d8fc:	f800283a 	ret

0080d900 <__hexnan>:
  80d900:	defff404 	addi	sp,sp,-48
  80d904:	dd800815 	stw	r22,32(sp)
  80d908:	058020b4 	movhi	r22,130
  80d90c:	b5a38a04 	addi	r22,r22,-29144
  80d910:	b0800c03 	ldbu	r2,48(r22)
  80d914:	dcc00515 	stw	r19,20(sp)
  80d918:	dc000215 	stw	r16,8(sp)
  80d91c:	dfc00b15 	stw	ra,44(sp)
  80d920:	df000a15 	stw	fp,40(sp)
  80d924:	ddc00915 	stw	r23,36(sp)
  80d928:	dd400715 	stw	r21,28(sp)
  80d92c:	dd000615 	stw	r20,24(sp)
  80d930:	dc800415 	stw	r18,16(sp)
  80d934:	dc400315 	stw	r17,12(sp)
  80d938:	d9000115 	stw	r4,4(sp)
  80d93c:	2821883a 	mov	r16,r5
  80d940:	3027883a 	mov	r19,r6
  80d944:	10007426 	beq	r2,zero,80db18 <__hexnan+0x218>
  80d948:	80c00017 	ldw	r3,0(r16)
  80d94c:	1805d17a 	srai	r2,r3,5
  80d950:	18c007cc 	andi	r3,r3,31
  80d954:	1839003a 	cmpeq	fp,r3,zero
  80d958:	1085883a 	add	r2,r2,r2
  80d95c:	1085883a 	add	r2,r2,r2
  80d960:	d8c00015 	stw	r3,0(sp)
  80d964:	14c5883a 	add	r2,r2,r19
  80d968:	e000011e 	bne	fp,zero,80d970 <__hexnan+0x70>
  80d96c:	10800104 	addi	r2,r2,4
  80d970:	d8c00117 	ldw	r3,4(sp)
  80d974:	153fff04 	addi	r20,r2,-4
  80d978:	a021883a 	mov	r16,r20
  80d97c:	1c400017 	ldw	r17,0(r3)
  80d980:	a02b883a 	mov	r21,r20
  80d984:	0025883a 	mov	r18,zero
  80d988:	002f883a 	mov	r23,zero
  80d98c:	000d883a 	mov	r6,zero
  80d990:	103fff15 	stw	zero,-4(r2)
  80d994:	8c400044 	addi	r17,r17,1
  80d998:	89000003 	ldbu	r4,0(r17)
  80d99c:	20000e26 	beq	r4,zero,80d9d8 <__hexnan+0xd8>
  80d9a0:	2585883a 	add	r2,r4,r22
  80d9a4:	10c00003 	ldbu	r3,0(r2)
  80d9a8:	18002e1e 	bne	r3,zero,80da64 <__hexnan+0x164>
  80d9ac:	00800804 	movi	r2,32
  80d9b0:	11005536 	bltu	r2,r4,80db08 <__hexnan+0x208>
  80d9b4:	bcbff70e 	bge	r23,r18,80d994 <__hexnan+0x94>
  80d9b8:	8540022e 	bgeu	r16,r21,80d9c4 <__hexnan+0xc4>
  80d9bc:	008001c4 	movi	r2,7
  80d9c0:	11803c0e 	bge	r2,r6,80dab4 <__hexnan+0x1b4>
  80d9c4:	9c003536 	bltu	r19,r16,80da9c <__hexnan+0x19c>
  80d9c8:	8c400044 	addi	r17,r17,1
  80d9cc:	89000003 	ldbu	r4,0(r17)
  80d9d0:	01800204 	movi	r6,8
  80d9d4:	203ff21e 	bne	r4,zero,80d9a0 <__hexnan+0xa0>
  80d9d8:	90004d26 	beq	r18,zero,80db10 <__hexnan+0x210>
  80d9dc:	85404336 	bltu	r16,r21,80daec <__hexnan+0x1ec>
  80d9e0:	9c00382e 	bgeu	r19,r16,80dac4 <__hexnan+0x1c4>
  80d9e4:	9807883a 	mov	r3,r19
  80d9e8:	80800017 	ldw	r2,0(r16)
  80d9ec:	84000104 	addi	r16,r16,4
  80d9f0:	18800015 	stw	r2,0(r3)
  80d9f4:	18c00104 	addi	r3,r3,4
  80d9f8:	a43ffb2e 	bgeu	r20,r16,80d9e8 <__hexnan+0xe8>
  80d9fc:	18000015 	stw	zero,0(r3)
  80da00:	18c00104 	addi	r3,r3,4
  80da04:	a0fffd2e 	bgeu	r20,r3,80d9fc <__hexnan+0xfc>
  80da08:	a0800017 	ldw	r2,0(r20)
  80da0c:	1000071e 	bne	r2,zero,80da2c <__hexnan+0x12c>
  80da10:	9d004326 	beq	r19,r20,80db20 <__hexnan+0x220>
  80da14:	a007883a 	mov	r3,r20
  80da18:	00000106 	br	80da20 <__hexnan+0x120>
  80da1c:	98c04026 	beq	r19,r3,80db20 <__hexnan+0x220>
  80da20:	18ffff04 	addi	r3,r3,-4
  80da24:	18800017 	ldw	r2,0(r3)
  80da28:	103ffc26 	beq	r2,zero,80da1c <__hexnan+0x11c>
  80da2c:	00c00144 	movi	r3,5
  80da30:	1805883a 	mov	r2,r3
  80da34:	dfc00b17 	ldw	ra,44(sp)
  80da38:	df000a17 	ldw	fp,40(sp)
  80da3c:	ddc00917 	ldw	r23,36(sp)
  80da40:	dd800817 	ldw	r22,32(sp)
  80da44:	dd400717 	ldw	r21,28(sp)
  80da48:	dd000617 	ldw	r20,24(sp)
  80da4c:	dcc00517 	ldw	r19,20(sp)
  80da50:	dc800417 	ldw	r18,16(sp)
  80da54:	dc400317 	ldw	r17,12(sp)
  80da58:	dc000217 	ldw	r16,8(sp)
  80da5c:	dec00c04 	addi	sp,sp,48
  80da60:	f800283a 	ret
  80da64:	31800044 	addi	r6,r6,1
  80da68:	00800204 	movi	r2,8
  80da6c:	94800044 	addi	r18,r18,1
  80da70:	1180040e 	bge	r2,r6,80da84 <__hexnan+0x184>
  80da74:	9c3fc72e 	bgeu	r19,r16,80d994 <__hexnan+0x94>
  80da78:	843fff04 	addi	r16,r16,-4
  80da7c:	80000015 	stw	zero,0(r16)
  80da80:	01800044 	movi	r6,1
  80da84:	80800017 	ldw	r2,0(r16)
  80da88:	18c003cc 	andi	r3,r3,15
  80da8c:	1004913a 	slli	r2,r2,4
  80da90:	10c4b03a 	or	r2,r2,r3
  80da94:	80800015 	stw	r2,0(r16)
  80da98:	003fbe06 	br	80d994 <__hexnan+0x94>
  80da9c:	843fff04 	addi	r16,r16,-4
  80daa0:	802b883a 	mov	r21,r16
  80daa4:	902f883a 	mov	r23,r18
  80daa8:	000d883a 	mov	r6,zero
  80daac:	80000015 	stw	zero,0(r16)
  80dab0:	003fb806 	br	80d994 <__hexnan+0x94>
  80dab4:	8009883a 	mov	r4,r16
  80dab8:	a80b883a 	mov	r5,r21
  80dabc:	080d8b40 	call	80d8b4 <L_shift>
  80dac0:	003fc006 	br	80d9c4 <__hexnan+0xc4>
  80dac4:	e03fd01e 	bne	fp,zero,80da08 <__hexnan+0x108>
  80dac8:	d8c00017 	ldw	r3,0(sp)
  80dacc:	00800804 	movi	r2,32
  80dad0:	10c5c83a 	sub	r2,r2,r3
  80dad4:	00ffffc4 	movi	r3,-1
  80dad8:	1886d83a 	srl	r3,r3,r2
  80dadc:	a0800017 	ldw	r2,0(r20)
  80dae0:	10c4703a 	and	r2,r2,r3
  80dae4:	a0800015 	stw	r2,0(r20)
  80dae8:	003fc806 	br	80da0c <__hexnan+0x10c>
  80daec:	008001c4 	movi	r2,7
  80daf0:	11bfbb16 	blt	r2,r6,80d9e0 <__hexnan+0xe0>
  80daf4:	a80b883a 	mov	r5,r21
  80daf8:	8009883a 	mov	r4,r16
  80dafc:	080d8b40 	call	80d8b4 <L_shift>
  80db00:	9c3ff02e 	bgeu	r19,r16,80dac4 <__hexnan+0x1c4>
  80db04:	003fb706 	br	80d9e4 <__hexnan+0xe4>
  80db08:	00800a44 	movi	r2,41
  80db0c:	20800826 	beq	r4,r2,80db30 <__hexnan+0x230>
  80db10:	00c00104 	movi	r3,4
  80db14:	003fc606 	br	80da30 <__hexnan+0x130>
  80db18:	080cfe40 	call	80cfe4 <__hexdig_init>
  80db1c:	003f8a06 	br	80d948 <__hexnan+0x48>
  80db20:	00800044 	movi	r2,1
  80db24:	00c00144 	movi	r3,5
  80db28:	98800015 	stw	r2,0(r19)
  80db2c:	003fc006 	br	80da30 <__hexnan+0x130>
  80db30:	903ff726 	beq	r18,zero,80db10 <__hexnan+0x210>
  80db34:	d8c00117 	ldw	r3,4(sp)
  80db38:	88800044 	addi	r2,r17,1
  80db3c:	18800015 	stw	r2,0(r3)
  80db40:	857fa72e 	bgeu	r16,r21,80d9e0 <__hexnan+0xe0>
  80db44:	003fe906 	br	80daec <__hexnan+0x1ec>

0080db48 <__muldi3>:
  80db48:	2011883a 	mov	r8,r4
  80db4c:	427fffcc 	andi	r9,r8,65535
  80db50:	4018d43a 	srli	r12,r8,16
  80db54:	32bfffcc 	andi	r10,r6,65535
  80db58:	3016d43a 	srli	r11,r6,16
  80db5c:	4a85383a 	mul	r2,r9,r10
  80db60:	6295383a 	mul	r10,r12,r10
  80db64:	4ad3383a 	mul	r9,r9,r11
  80db68:	113fffcc 	andi	r4,r2,65535
  80db6c:	1004d43a 	srli	r2,r2,16
  80db70:	4a93883a 	add	r9,r9,r10
  80db74:	3807883a 	mov	r3,r7
  80db78:	1245883a 	add	r2,r2,r9
  80db7c:	280f883a 	mov	r7,r5
  80db80:	180b883a 	mov	r5,r3
  80db84:	1006943a 	slli	r3,r2,16
  80db88:	defffd04 	addi	sp,sp,-12
  80db8c:	dc800215 	stw	r18,8(sp)
  80db90:	1907883a 	add	r3,r3,r4
  80db94:	dc400115 	stw	r17,4(sp)
  80db98:	dc000015 	stw	r16,0(sp)
  80db9c:	4165383a 	mul	r18,r8,r5
  80dba0:	31e3383a 	mul	r17,r6,r7
  80dba4:	1012d43a 	srli	r9,r2,16
  80dba8:	62d9383a 	mul	r12,r12,r11
  80dbac:	181f883a 	mov	r15,r3
  80dbb0:	1280022e 	bgeu	r2,r10,80dbbc <__muldi3+0x74>
  80dbb4:	00800074 	movhi	r2,1
  80dbb8:	6099883a 	add	r12,r12,r2
  80dbbc:	624d883a 	add	r6,r12,r9
  80dbc0:	9187883a 	add	r3,r18,r6
  80dbc4:	88c7883a 	add	r3,r17,r3
  80dbc8:	7805883a 	mov	r2,r15
  80dbcc:	dc800217 	ldw	r18,8(sp)
  80dbd0:	dc400117 	ldw	r17,4(sp)
  80dbd4:	dc000017 	ldw	r16,0(sp)
  80dbd8:	dec00304 	addi	sp,sp,12
  80dbdc:	f800283a 	ret

0080dbe0 <__fixunsdfsi>:
  80dbe0:	defffb04 	addi	sp,sp,-20
  80dbe4:	dc400115 	stw	r17,4(sp)
  80dbe8:	dc000015 	stw	r16,0(sp)
  80dbec:	04507834 	movhi	r17,16864
  80dbf0:	0021883a 	mov	r16,zero
  80dbf4:	800d883a 	mov	r6,r16
  80dbf8:	880f883a 	mov	r7,r17
  80dbfc:	dcc00315 	stw	r19,12(sp)
  80dc00:	dc800215 	stw	r18,8(sp)
  80dc04:	2827883a 	mov	r19,r5
  80dc08:	2025883a 	mov	r18,r4
  80dc0c:	dfc00415 	stw	ra,16(sp)
  80dc10:	080f6300 	call	80f630 <__gedf2>
  80dc14:	000d883a 	mov	r6,zero
  80dc18:	880f883a 	mov	r7,r17
  80dc1c:	980b883a 	mov	r5,r19
  80dc20:	9009883a 	mov	r4,r18
  80dc24:	10000d16 	blt	r2,zero,80dc5c <__fixunsdfsi+0x7c>
  80dc28:	080ed880 	call	80ed88 <__subdf3>
  80dc2c:	180b883a 	mov	r5,r3
  80dc30:	1009883a 	mov	r4,r2
  80dc34:	080f8c00 	call	80f8c0 <__fixdfsi>
  80dc38:	00e00034 	movhi	r3,32768
  80dc3c:	10c5883a 	add	r2,r2,r3
  80dc40:	dfc00417 	ldw	ra,16(sp)
  80dc44:	dcc00317 	ldw	r19,12(sp)
  80dc48:	dc800217 	ldw	r18,8(sp)
  80dc4c:	dc400117 	ldw	r17,4(sp)
  80dc50:	dc000017 	ldw	r16,0(sp)
  80dc54:	dec00504 	addi	sp,sp,20
  80dc58:	f800283a 	ret
  80dc5c:	980b883a 	mov	r5,r19
  80dc60:	9009883a 	mov	r4,r18
  80dc64:	080f8c00 	call	80f8c0 <__fixdfsi>
  80dc68:	dfc00417 	ldw	ra,16(sp)
  80dc6c:	dcc00317 	ldw	r19,12(sp)
  80dc70:	dc800217 	ldw	r18,8(sp)
  80dc74:	dc400117 	ldw	r17,4(sp)
  80dc78:	dc000017 	ldw	r16,0(sp)
  80dc7c:	dec00504 	addi	sp,sp,20
  80dc80:	f800283a 	ret

0080dc84 <__udivdi3>:
  80dc84:	defff004 	addi	sp,sp,-64
  80dc88:	2005883a 	mov	r2,r4
  80dc8c:	3011883a 	mov	r8,r6
  80dc90:	df000e15 	stw	fp,56(sp)
  80dc94:	dd000a15 	stw	r20,40(sp)
  80dc98:	dc000615 	stw	r16,24(sp)
  80dc9c:	dfc00f15 	stw	ra,60(sp)
  80dca0:	ddc00d15 	stw	r23,52(sp)
  80dca4:	dd800c15 	stw	r22,48(sp)
  80dca8:	dd400b15 	stw	r21,44(sp)
  80dcac:	dcc00915 	stw	r19,36(sp)
  80dcb0:	dc800815 	stw	r18,32(sp)
  80dcb4:	dc400715 	stw	r17,28(sp)
  80dcb8:	4021883a 	mov	r16,r8
  80dcbc:	1039883a 	mov	fp,r2
  80dcc0:	2829883a 	mov	r20,r5
  80dcc4:	38003b1e 	bne	r7,zero,80ddb4 <__udivdi3+0x130>
  80dcc8:	2a005c36 	bltu	r5,r8,80de3c <__udivdi3+0x1b8>
  80dccc:	4000a626 	beq	r8,zero,80df68 <__udivdi3+0x2e4>
  80dcd0:	00bfffd4 	movui	r2,65535
  80dcd4:	14009e36 	bltu	r2,r16,80df50 <__udivdi3+0x2cc>
  80dcd8:	00803fc4 	movi	r2,255
  80dcdc:	14013d36 	bltu	r2,r16,80e1d4 <__udivdi3+0x550>
  80dce0:	000b883a 	mov	r5,zero
  80dce4:	0005883a 	mov	r2,zero
  80dce8:	8084d83a 	srl	r2,r16,r2
  80dcec:	01002074 	movhi	r4,129
  80dcf0:	2114a504 	addi	r4,r4,21140
  80dcf4:	01800804 	movi	r6,32
  80dcf8:	1105883a 	add	r2,r2,r4
  80dcfc:	10c00003 	ldbu	r3,0(r2)
  80dd00:	28c7883a 	add	r3,r5,r3
  80dd04:	30edc83a 	sub	r22,r6,r3
  80dd08:	b000ee1e 	bne	r22,zero,80e0c4 <__udivdi3+0x440>
  80dd0c:	802ad43a 	srli	r21,r16,16
  80dd10:	00800044 	movi	r2,1
  80dd14:	a423c83a 	sub	r17,r20,r16
  80dd18:	85ffffcc 	andi	r23,r16,65535
  80dd1c:	d8800315 	stw	r2,12(sp)
  80dd20:	8809883a 	mov	r4,r17
  80dd24:	a80b883a 	mov	r5,r21
  80dd28:	080fcdc0 	call	80fcdc <__udivsi3>
  80dd2c:	8809883a 	mov	r4,r17
  80dd30:	a80b883a 	mov	r5,r21
  80dd34:	102d883a 	mov	r22,r2
  80dd38:	080fce40 	call	80fce4 <__umodsi3>
  80dd3c:	1004943a 	slli	r2,r2,16
  80dd40:	e006d43a 	srli	r3,fp,16
  80dd44:	bda3383a 	mul	r17,r23,r22
  80dd48:	10c4b03a 	or	r2,r2,r3
  80dd4c:	1440042e 	bgeu	r2,r17,80dd60 <__udivdi3+0xdc>
  80dd50:	1405883a 	add	r2,r2,r16
  80dd54:	b5bfffc4 	addi	r22,r22,-1
  80dd58:	14000136 	bltu	r2,r16,80dd60 <__udivdi3+0xdc>
  80dd5c:	14413d36 	bltu	r2,r17,80e254 <__udivdi3+0x5d0>
  80dd60:	1463c83a 	sub	r17,r2,r17
  80dd64:	8809883a 	mov	r4,r17
  80dd68:	a80b883a 	mov	r5,r21
  80dd6c:	080fcdc0 	call	80fcdc <__udivsi3>
  80dd70:	8809883a 	mov	r4,r17
  80dd74:	a80b883a 	mov	r5,r21
  80dd78:	1029883a 	mov	r20,r2
  80dd7c:	080fce40 	call	80fce4 <__umodsi3>
  80dd80:	1004943a 	slli	r2,r2,16
  80dd84:	bd09383a 	mul	r4,r23,r20
  80dd88:	e0ffffcc 	andi	r3,fp,65535
  80dd8c:	10c4b03a 	or	r2,r2,r3
  80dd90:	1100042e 	bgeu	r2,r4,80dda4 <__udivdi3+0x120>
  80dd94:	8085883a 	add	r2,r16,r2
  80dd98:	a53fffc4 	addi	r20,r20,-1
  80dd9c:	14000136 	bltu	r2,r16,80dda4 <__udivdi3+0x120>
  80dda0:	11012036 	bltu	r2,r4,80e224 <__udivdi3+0x5a0>
  80dda4:	b004943a 	slli	r2,r22,16
  80dda8:	d9000317 	ldw	r4,12(sp)
  80ddac:	a084b03a 	or	r2,r20,r2
  80ddb0:	00001506 	br	80de08 <__udivdi3+0x184>
  80ddb4:	380d883a 	mov	r6,r7
  80ddb8:	29c06236 	bltu	r5,r7,80df44 <__udivdi3+0x2c0>
  80ddbc:	00bfffd4 	movui	r2,65535
  80ddc0:	11c05a36 	bltu	r2,r7,80df2c <__udivdi3+0x2a8>
  80ddc4:	00803fc4 	movi	r2,255
  80ddc8:	11c0fc36 	bltu	r2,r7,80e1bc <__udivdi3+0x538>
  80ddcc:	000b883a 	mov	r5,zero
  80ddd0:	0005883a 	mov	r2,zero
  80ddd4:	3084d83a 	srl	r2,r6,r2
  80ddd8:	01002074 	movhi	r4,129
  80dddc:	2114a504 	addi	r4,r4,21140
  80dde0:	01c00804 	movi	r7,32
  80dde4:	1105883a 	add	r2,r2,r4
  80dde8:	10c00003 	ldbu	r3,0(r2)
  80ddec:	28c7883a 	add	r3,r5,r3
  80ddf0:	38efc83a 	sub	r23,r7,r3
  80ddf4:	b800691e 	bne	r23,zero,80df9c <__udivdi3+0x318>
  80ddf8:	35000136 	bltu	r6,r20,80de00 <__udivdi3+0x17c>
  80ddfc:	e4005136 	bltu	fp,r16,80df44 <__udivdi3+0x2c0>
  80de00:	00800044 	movi	r2,1
  80de04:	0009883a 	mov	r4,zero
  80de08:	2007883a 	mov	r3,r4
  80de0c:	dfc00f17 	ldw	ra,60(sp)
  80de10:	df000e17 	ldw	fp,56(sp)
  80de14:	ddc00d17 	ldw	r23,52(sp)
  80de18:	dd800c17 	ldw	r22,48(sp)
  80de1c:	dd400b17 	ldw	r21,44(sp)
  80de20:	dd000a17 	ldw	r20,40(sp)
  80de24:	dcc00917 	ldw	r19,36(sp)
  80de28:	dc800817 	ldw	r18,32(sp)
  80de2c:	dc400717 	ldw	r17,28(sp)
  80de30:	dc000617 	ldw	r16,24(sp)
  80de34:	dec01004 	addi	sp,sp,64
  80de38:	f800283a 	ret
  80de3c:	00bfffd4 	movui	r2,65535
  80de40:	12005036 	bltu	r2,r8,80df84 <__udivdi3+0x300>
  80de44:	00803fc4 	movi	r2,255
  80de48:	1200e836 	bltu	r2,r8,80e1ec <__udivdi3+0x568>
  80de4c:	000b883a 	mov	r5,zero
  80de50:	0005883a 	mov	r2,zero
  80de54:	8084d83a 	srl	r2,r16,r2
  80de58:	01002074 	movhi	r4,129
  80de5c:	2114a504 	addi	r4,r4,21140
  80de60:	01800804 	movi	r6,32
  80de64:	1105883a 	add	r2,r2,r4
  80de68:	10c00003 	ldbu	r3,0(r2)
  80de6c:	28c7883a 	add	r3,r5,r3
  80de70:	30cbc83a 	sub	r5,r6,r3
  80de74:	28000626 	beq	r5,zero,80de90 <__udivdi3+0x20c>
  80de78:	3145c83a 	sub	r2,r6,r5
  80de7c:	e084d83a 	srl	r2,fp,r2
  80de80:	a146983a 	sll	r3,r20,r5
  80de84:	e178983a 	sll	fp,fp,r5
  80de88:	8160983a 	sll	r16,r16,r5
  80de8c:	18a8b03a 	or	r20,r3,r2
  80de90:	802ad43a 	srli	r21,r16,16
  80de94:	a009883a 	mov	r4,r20
  80de98:	85ffffcc 	andi	r23,r16,65535
  80de9c:	a80b883a 	mov	r5,r21
  80dea0:	080fcdc0 	call	80fcdc <__udivsi3>
  80dea4:	a009883a 	mov	r4,r20
  80dea8:	a80b883a 	mov	r5,r21
  80deac:	102d883a 	mov	r22,r2
  80deb0:	080fce40 	call	80fce4 <__umodsi3>
  80deb4:	1004943a 	slli	r2,r2,16
  80deb8:	e006d43a 	srli	r3,fp,16
  80debc:	bda3383a 	mul	r17,r23,r22
  80dec0:	10c4b03a 	or	r2,r2,r3
  80dec4:	1440042e 	bgeu	r2,r17,80ded8 <__udivdi3+0x254>
  80dec8:	1405883a 	add	r2,r2,r16
  80decc:	b5bfffc4 	addi	r22,r22,-1
  80ded0:	14000136 	bltu	r2,r16,80ded8 <__udivdi3+0x254>
  80ded4:	1440d536 	bltu	r2,r17,80e22c <__udivdi3+0x5a8>
  80ded8:	1463c83a 	sub	r17,r2,r17
  80dedc:	8809883a 	mov	r4,r17
  80dee0:	a80b883a 	mov	r5,r21
  80dee4:	080fcdc0 	call	80fcdc <__udivsi3>
  80dee8:	8809883a 	mov	r4,r17
  80deec:	a80b883a 	mov	r5,r21
  80def0:	1029883a 	mov	r20,r2
  80def4:	080fce40 	call	80fce4 <__umodsi3>
  80def8:	1004943a 	slli	r2,r2,16
  80defc:	bd09383a 	mul	r4,r23,r20
  80df00:	e0ffffcc 	andi	r3,fp,65535
  80df04:	10c4b03a 	or	r2,r2,r3
  80df08:	1100042e 	bgeu	r2,r4,80df1c <__udivdi3+0x298>
  80df0c:	8085883a 	add	r2,r16,r2
  80df10:	a53fffc4 	addi	r20,r20,-1
  80df14:	14000136 	bltu	r2,r16,80df1c <__udivdi3+0x298>
  80df18:	1100c736 	bltu	r2,r4,80e238 <__udivdi3+0x5b4>
  80df1c:	b004943a 	slli	r2,r22,16
  80df20:	0009883a 	mov	r4,zero
  80df24:	a084b03a 	or	r2,r20,r2
  80df28:	003fb706 	br	80de08 <__udivdi3+0x184>
  80df2c:	00804034 	movhi	r2,256
  80df30:	10bfffc4 	addi	r2,r2,-1
  80df34:	11c0a436 	bltu	r2,r7,80e1c8 <__udivdi3+0x544>
  80df38:	01400404 	movi	r5,16
  80df3c:	2805883a 	mov	r2,r5
  80df40:	003fa406 	br	80ddd4 <__udivdi3+0x150>
  80df44:	0005883a 	mov	r2,zero
  80df48:	0009883a 	mov	r4,zero
  80df4c:	003fae06 	br	80de08 <__udivdi3+0x184>
  80df50:	00804034 	movhi	r2,256
  80df54:	10bfffc4 	addi	r2,r2,-1
  80df58:	1400a136 	bltu	r2,r16,80e1e0 <__udivdi3+0x55c>
  80df5c:	01400404 	movi	r5,16
  80df60:	2805883a 	mov	r2,r5
  80df64:	003f6006 	br	80dce8 <__udivdi3+0x64>
  80df68:	01000044 	movi	r4,1
  80df6c:	000b883a 	mov	r5,zero
  80df70:	080fcdc0 	call	80fcdc <__udivsi3>
  80df74:	1021883a 	mov	r16,r2
  80df78:	00bfffd4 	movui	r2,65535
  80df7c:	143ff436 	bltu	r2,r16,80df50 <__udivdi3+0x2cc>
  80df80:	003f5506 	br	80dcd8 <__udivdi3+0x54>
  80df84:	00804034 	movhi	r2,256
  80df88:	10bfffc4 	addi	r2,r2,-1
  80df8c:	12009a36 	bltu	r2,r8,80e1f8 <__udivdi3+0x574>
  80df90:	01400404 	movi	r5,16
  80df94:	2805883a 	mov	r2,r5
  80df98:	003fae06 	br	80de54 <__udivdi3+0x1d0>
  80df9c:	3dc5c83a 	sub	r2,r7,r23
  80dfa0:	35c8983a 	sll	r4,r6,r23
  80dfa4:	8086d83a 	srl	r3,r16,r2
  80dfa8:	a0a2d83a 	srl	r17,r20,r2
  80dfac:	e084d83a 	srl	r2,fp,r2
  80dfb0:	20eab03a 	or	r21,r4,r3
  80dfb4:	a82cd43a 	srli	r22,r21,16
  80dfb8:	a5c6983a 	sll	r3,r20,r23
  80dfbc:	8809883a 	mov	r4,r17
  80dfc0:	b00b883a 	mov	r5,r22
  80dfc4:	1886b03a 	or	r3,r3,r2
  80dfc8:	d8c00215 	stw	r3,8(sp)
  80dfcc:	080fcdc0 	call	80fcdc <__udivsi3>
  80dfd0:	8809883a 	mov	r4,r17
  80dfd4:	b00b883a 	mov	r5,r22
  80dfd8:	1029883a 	mov	r20,r2
  80dfdc:	080fce40 	call	80fce4 <__umodsi3>
  80dfe0:	a8ffffcc 	andi	r3,r21,65535
  80dfe4:	d8c00515 	stw	r3,20(sp)
  80dfe8:	d9000217 	ldw	r4,8(sp)
  80dfec:	d9400517 	ldw	r5,20(sp)
  80dff0:	1004943a 	slli	r2,r2,16
  80dff4:	2006d43a 	srli	r3,r4,16
  80dff8:	85e0983a 	sll	r16,r16,r23
  80dffc:	2d23383a 	mul	r17,r5,r20
  80e000:	10c4b03a 	or	r2,r2,r3
  80e004:	dc000015 	stw	r16,0(sp)
  80e008:	1440032e 	bgeu	r2,r17,80e018 <__udivdi3+0x394>
  80e00c:	1545883a 	add	r2,r2,r21
  80e010:	a53fffc4 	addi	r20,r20,-1
  80e014:	15407f2e 	bgeu	r2,r21,80e214 <__udivdi3+0x590>
  80e018:	1463c83a 	sub	r17,r2,r17
  80e01c:	8809883a 	mov	r4,r17
  80e020:	b00b883a 	mov	r5,r22
  80e024:	080fcdc0 	call	80fcdc <__udivsi3>
  80e028:	8809883a 	mov	r4,r17
  80e02c:	b00b883a 	mov	r5,r22
  80e030:	1021883a 	mov	r16,r2
  80e034:	080fce40 	call	80fce4 <__umodsi3>
  80e038:	d8c00517 	ldw	r3,20(sp)
  80e03c:	d9000217 	ldw	r4,8(sp)
  80e040:	1004943a 	slli	r2,r2,16
  80e044:	1c0f383a 	mul	r7,r3,r16
  80e048:	20ffffcc 	andi	r3,r4,65535
  80e04c:	10e2b03a 	or	r17,r2,r3
  80e050:	89c0032e 	bgeu	r17,r7,80e060 <__udivdi3+0x3dc>
  80e054:	8d63883a 	add	r17,r17,r21
  80e058:	843fffc4 	addi	r16,r16,-1
  80e05c:	8d40692e 	bgeu	r17,r21,80e204 <__udivdi3+0x580>
  80e060:	a008943a 	slli	r4,r20,16
  80e064:	d9400017 	ldw	r5,0(sp)
  80e068:	89e3c83a 	sub	r17,r17,r7
  80e06c:	8110b03a 	or	r8,r16,r4
  80e070:	280cd43a 	srli	r6,r5,16
  80e074:	28ffffcc 	andi	r3,r5,65535
  80e078:	40bfffcc 	andi	r2,r8,65535
  80e07c:	400ad43a 	srli	r5,r8,16
  80e080:	10d3383a 	mul	r9,r2,r3
  80e084:	1185383a 	mul	r2,r2,r6
  80e088:	28c7383a 	mul	r3,r5,r3
  80e08c:	4808d43a 	srli	r4,r9,16
  80e090:	298b383a 	mul	r5,r5,r6
  80e094:	10c5883a 	add	r2,r2,r3
  80e098:	2089883a 	add	r4,r4,r2
  80e09c:	20c0022e 	bgeu	r4,r3,80e0a8 <__udivdi3+0x424>
  80e0a0:	00800074 	movhi	r2,1
  80e0a4:	288b883a 	add	r5,r5,r2
  80e0a8:	2004d43a 	srli	r2,r4,16
  80e0ac:	288b883a 	add	r5,r5,r2
  80e0b0:	89403f36 	bltu	r17,r5,80e1b0 <__udivdi3+0x52c>
  80e0b4:	89403926 	beq	r17,r5,80e19c <__udivdi3+0x518>
  80e0b8:	4005883a 	mov	r2,r8
  80e0bc:	0009883a 	mov	r4,zero
  80e0c0:	003f5106 	br	80de08 <__udivdi3+0x184>
  80e0c4:	85a0983a 	sll	r16,r16,r22
  80e0c8:	3585c83a 	sub	r2,r6,r22
  80e0cc:	a0a2d83a 	srl	r17,r20,r2
  80e0d0:	802ad43a 	srli	r21,r16,16
  80e0d4:	e084d83a 	srl	r2,fp,r2
  80e0d8:	a586983a 	sll	r3,r20,r22
  80e0dc:	8809883a 	mov	r4,r17
  80e0e0:	a80b883a 	mov	r5,r21
  80e0e4:	1886b03a 	or	r3,r3,r2
  80e0e8:	d8c00115 	stw	r3,4(sp)
  80e0ec:	080fcdc0 	call	80fcdc <__udivsi3>
  80e0f0:	8809883a 	mov	r4,r17
  80e0f4:	a80b883a 	mov	r5,r21
  80e0f8:	d8800415 	stw	r2,16(sp)
  80e0fc:	080fce40 	call	80fce4 <__umodsi3>
  80e100:	d9000117 	ldw	r4,4(sp)
  80e104:	d9400417 	ldw	r5,16(sp)
  80e108:	1004943a 	slli	r2,r2,16
  80e10c:	85ffffcc 	andi	r23,r16,65535
  80e110:	2006d43a 	srli	r3,r4,16
  80e114:	b963383a 	mul	r17,r23,r5
  80e118:	10c4b03a 	or	r2,r2,r3
  80e11c:	1440042e 	bgeu	r2,r17,80e130 <__udivdi3+0x4ac>
  80e120:	297fffc4 	addi	r5,r5,-1
  80e124:	1405883a 	add	r2,r2,r16
  80e128:	d9400415 	stw	r5,16(sp)
  80e12c:	1400442e 	bgeu	r2,r16,80e240 <__udivdi3+0x5bc>
  80e130:	1463c83a 	sub	r17,r2,r17
  80e134:	8809883a 	mov	r4,r17
  80e138:	a80b883a 	mov	r5,r21
  80e13c:	080fcdc0 	call	80fcdc <__udivsi3>
  80e140:	8809883a 	mov	r4,r17
  80e144:	a80b883a 	mov	r5,r21
  80e148:	1029883a 	mov	r20,r2
  80e14c:	080fce40 	call	80fce4 <__umodsi3>
  80e150:	d9400117 	ldw	r5,4(sp)
  80e154:	1004943a 	slli	r2,r2,16
  80e158:	bd09383a 	mul	r4,r23,r20
  80e15c:	28ffffcc 	andi	r3,r5,65535
  80e160:	10c6b03a 	or	r3,r2,r3
  80e164:	1900062e 	bgeu	r3,r4,80e180 <__udivdi3+0x4fc>
  80e168:	1c07883a 	add	r3,r3,r16
  80e16c:	a53fffc4 	addi	r20,r20,-1
  80e170:	1c000336 	bltu	r3,r16,80e180 <__udivdi3+0x4fc>
  80e174:	1900022e 	bgeu	r3,r4,80e180 <__udivdi3+0x4fc>
  80e178:	a53fffc4 	addi	r20,r20,-1
  80e17c:	1c07883a 	add	r3,r3,r16
  80e180:	d9400417 	ldw	r5,16(sp)
  80e184:	e5b8983a 	sll	fp,fp,r22
  80e188:	1923c83a 	sub	r17,r3,r4
  80e18c:	2804943a 	slli	r2,r5,16
  80e190:	a0a8b03a 	or	r20,r20,r2
  80e194:	dd000315 	stw	r20,12(sp)
  80e198:	003ee106 	br	80dd20 <__udivdi3+0x9c>
  80e19c:	2004943a 	slli	r2,r4,16
  80e1a0:	e5c8983a 	sll	r4,fp,r23
  80e1a4:	48ffffcc 	andi	r3,r9,65535
  80e1a8:	10c5883a 	add	r2,r2,r3
  80e1ac:	20bfc22e 	bgeu	r4,r2,80e0b8 <__udivdi3+0x434>
  80e1b0:	40bfffc4 	addi	r2,r8,-1
  80e1b4:	0009883a 	mov	r4,zero
  80e1b8:	003f1306 	br	80de08 <__udivdi3+0x184>
  80e1bc:	01400204 	movi	r5,8
  80e1c0:	2805883a 	mov	r2,r5
  80e1c4:	003f0306 	br	80ddd4 <__udivdi3+0x150>
  80e1c8:	01400604 	movi	r5,24
  80e1cc:	2805883a 	mov	r2,r5
  80e1d0:	003f0006 	br	80ddd4 <__udivdi3+0x150>
  80e1d4:	01400204 	movi	r5,8
  80e1d8:	2805883a 	mov	r2,r5
  80e1dc:	003ec206 	br	80dce8 <__udivdi3+0x64>
  80e1e0:	01400604 	movi	r5,24
  80e1e4:	2805883a 	mov	r2,r5
  80e1e8:	003ebf06 	br	80dce8 <__udivdi3+0x64>
  80e1ec:	01400204 	movi	r5,8
  80e1f0:	2805883a 	mov	r2,r5
  80e1f4:	003f1706 	br	80de54 <__udivdi3+0x1d0>
  80e1f8:	01400604 	movi	r5,24
  80e1fc:	2805883a 	mov	r2,r5
  80e200:	003f1406 	br	80de54 <__udivdi3+0x1d0>
  80e204:	89ff962e 	bgeu	r17,r7,80e060 <__udivdi3+0x3dc>
  80e208:	8d63883a 	add	r17,r17,r21
  80e20c:	843fffc4 	addi	r16,r16,-1
  80e210:	003f9306 	br	80e060 <__udivdi3+0x3dc>
  80e214:	147f802e 	bgeu	r2,r17,80e018 <__udivdi3+0x394>
  80e218:	a53fffc4 	addi	r20,r20,-1
  80e21c:	1545883a 	add	r2,r2,r21
  80e220:	003f7d06 	br	80e018 <__udivdi3+0x394>
  80e224:	a53fffc4 	addi	r20,r20,-1
  80e228:	003ede06 	br	80dda4 <__udivdi3+0x120>
  80e22c:	b5bfffc4 	addi	r22,r22,-1
  80e230:	1405883a 	add	r2,r2,r16
  80e234:	003f2806 	br	80ded8 <__udivdi3+0x254>
  80e238:	a53fffc4 	addi	r20,r20,-1
  80e23c:	003f3706 	br	80df1c <__udivdi3+0x298>
  80e240:	147fbb2e 	bgeu	r2,r17,80e130 <__udivdi3+0x4ac>
  80e244:	297fffc4 	addi	r5,r5,-1
  80e248:	1405883a 	add	r2,r2,r16
  80e24c:	d9400415 	stw	r5,16(sp)
  80e250:	003fb706 	br	80e130 <__udivdi3+0x4ac>
  80e254:	b5bfffc4 	addi	r22,r22,-1
  80e258:	1405883a 	add	r2,r2,r16
  80e25c:	003ec006 	br	80dd60 <__udivdi3+0xdc>

0080e260 <__umoddi3>:
  80e260:	defff104 	addi	sp,sp,-60
  80e264:	dd800b15 	stw	r22,44(sp)
  80e268:	dd000915 	stw	r20,36(sp)
  80e26c:	dc000515 	stw	r16,20(sp)
  80e270:	dfc00e15 	stw	ra,56(sp)
  80e274:	df000d15 	stw	fp,52(sp)
  80e278:	ddc00c15 	stw	r23,48(sp)
  80e27c:	dd400a15 	stw	r21,40(sp)
  80e280:	dcc00815 	stw	r19,32(sp)
  80e284:	dc800715 	stw	r18,28(sp)
  80e288:	dc400615 	stw	r17,24(sp)
  80e28c:	3021883a 	mov	r16,r6
  80e290:	202d883a 	mov	r22,r4
  80e294:	2829883a 	mov	r20,r5
  80e298:	38002b1e 	bne	r7,zero,80e348 <__umoddi3+0xe8>
  80e29c:	29805036 	bltu	r5,r6,80e3e0 <__umoddi3+0x180>
  80e2a0:	30008a26 	beq	r6,zero,80e4cc <__umoddi3+0x26c>
  80e2a4:	00bfffd4 	movui	r2,65535
  80e2a8:	14008236 	bltu	r2,r16,80e4b4 <__umoddi3+0x254>
  80e2ac:	00803fc4 	movi	r2,255
  80e2b0:	14013636 	bltu	r2,r16,80e78c <__umoddi3+0x52c>
  80e2b4:	000b883a 	mov	r5,zero
  80e2b8:	0005883a 	mov	r2,zero
  80e2bc:	8084d83a 	srl	r2,r16,r2
  80e2c0:	01002074 	movhi	r4,129
  80e2c4:	2114a504 	addi	r4,r4,21140
  80e2c8:	01800804 	movi	r6,32
  80e2cc:	1105883a 	add	r2,r2,r4
  80e2d0:	10c00003 	ldbu	r3,0(r2)
  80e2d4:	28c7883a 	add	r3,r5,r3
  80e2d8:	30efc83a 	sub	r23,r6,r3
  80e2dc:	b800941e 	bne	r23,zero,80e530 <__umoddi3+0x2d0>
  80e2e0:	802ad43a 	srli	r21,r16,16
  80e2e4:	a423c83a 	sub	r17,r20,r16
  80e2e8:	0039883a 	mov	fp,zero
  80e2ec:	853fffcc 	andi	r20,r16,65535
  80e2f0:	8809883a 	mov	r4,r17
  80e2f4:	a80b883a 	mov	r5,r21
  80e2f8:	080fcdc0 	call	80fcdc <__udivsi3>
  80e2fc:	8809883a 	mov	r4,r17
  80e300:	a80b883a 	mov	r5,r21
  80e304:	a0a3383a 	mul	r17,r20,r2
  80e308:	080fce40 	call	80fce4 <__umodsi3>
  80e30c:	1004943a 	slli	r2,r2,16
  80e310:	b006d43a 	srli	r3,r22,16
  80e314:	10c4b03a 	or	r2,r2,r3
  80e318:	1440032e 	bgeu	r2,r17,80e328 <__umoddi3+0xc8>
  80e31c:	1405883a 	add	r2,r2,r16
  80e320:	14000136 	bltu	r2,r16,80e328 <__umoddi3+0xc8>
  80e324:	14413536 	bltu	r2,r17,80e7fc <__umoddi3+0x59c>
  80e328:	1463c83a 	sub	r17,r2,r17
  80e32c:	8809883a 	mov	r4,r17
  80e330:	a80b883a 	mov	r5,r21
  80e334:	080fcdc0 	call	80fcdc <__udivsi3>
  80e338:	8809883a 	mov	r4,r17
  80e33c:	a0a3383a 	mul	r17,r20,r2
  80e340:	a80b883a 	mov	r5,r21
  80e344:	00004d06 	br	80e47c <__umoddi3+0x21c>
  80e348:	380d883a 	mov	r6,r7
  80e34c:	29c0102e 	bgeu	r5,r7,80e390 <__umoddi3+0x130>
  80e350:	2011883a 	mov	r8,r4
  80e354:	2813883a 	mov	r9,r5
  80e358:	4005883a 	mov	r2,r8
  80e35c:	4807883a 	mov	r3,r9
  80e360:	dfc00e17 	ldw	ra,56(sp)
  80e364:	df000d17 	ldw	fp,52(sp)
  80e368:	ddc00c17 	ldw	r23,48(sp)
  80e36c:	dd800b17 	ldw	r22,44(sp)
  80e370:	dd400a17 	ldw	r21,40(sp)
  80e374:	dd000917 	ldw	r20,36(sp)
  80e378:	dcc00817 	ldw	r19,32(sp)
  80e37c:	dc800717 	ldw	r18,28(sp)
  80e380:	dc400617 	ldw	r17,24(sp)
  80e384:	dc000517 	ldw	r16,20(sp)
  80e388:	dec00f04 	addi	sp,sp,60
  80e38c:	f800283a 	ret
  80e390:	00bfffd4 	movui	r2,65535
  80e394:	11c05a36 	bltu	r2,r7,80e500 <__umoddi3+0x2a0>
  80e398:	00803fc4 	movi	r2,255
  80e39c:	11c0fe36 	bltu	r2,r7,80e798 <__umoddi3+0x538>
  80e3a0:	000b883a 	mov	r5,zero
  80e3a4:	0005883a 	mov	r2,zero
  80e3a8:	3084d83a 	srl	r2,r6,r2
  80e3ac:	01002074 	movhi	r4,129
  80e3b0:	2114a504 	addi	r4,r4,21140
  80e3b4:	01c00804 	movi	r7,32
  80e3b8:	1105883a 	add	r2,r2,r4
  80e3bc:	10c00003 	ldbu	r3,0(r2)
  80e3c0:	28c7883a 	add	r3,r5,r3
  80e3c4:	38ebc83a 	sub	r21,r7,r3
  80e3c8:	a800851e 	bne	r21,zero,80e5e0 <__umoddi3+0x380>
  80e3cc:	35005236 	bltu	r6,r20,80e518 <__umoddi3+0x2b8>
  80e3d0:	b400512e 	bgeu	r22,r16,80e518 <__umoddi3+0x2b8>
  80e3d4:	b011883a 	mov	r8,r22
  80e3d8:	a013883a 	mov	r9,r20
  80e3dc:	003fde06 	br	80e358 <__umoddi3+0xf8>
  80e3e0:	00bfffd4 	movui	r2,65535
  80e3e4:	11804036 	bltu	r2,r6,80e4e8 <__umoddi3+0x288>
  80e3e8:	00803fc4 	movi	r2,255
  80e3ec:	1180ed36 	bltu	r2,r6,80e7a4 <__umoddi3+0x544>
  80e3f0:	000b883a 	mov	r5,zero
  80e3f4:	0005883a 	mov	r2,zero
  80e3f8:	8084d83a 	srl	r2,r16,r2
  80e3fc:	01002074 	movhi	r4,129
  80e400:	2114a504 	addi	r4,r4,21140
  80e404:	01800804 	movi	r6,32
  80e408:	1105883a 	add	r2,r2,r4
  80e40c:	10c00003 	ldbu	r3,0(r2)
  80e410:	28c7883a 	add	r3,r5,r3
  80e414:	30c7c83a 	sub	r3,r6,r3
  80e418:	1800bf1e 	bne	r3,zero,80e718 <__umoddi3+0x4b8>
  80e41c:	0039883a 	mov	fp,zero
  80e420:	802ad43a 	srli	r21,r16,16
  80e424:	a009883a 	mov	r4,r20
  80e428:	85ffffcc 	andi	r23,r16,65535
  80e42c:	a80b883a 	mov	r5,r21
  80e430:	080fcdc0 	call	80fcdc <__udivsi3>
  80e434:	a009883a 	mov	r4,r20
  80e438:	a80b883a 	mov	r5,r21
  80e43c:	b8a3383a 	mul	r17,r23,r2
  80e440:	080fce40 	call	80fce4 <__umodsi3>
  80e444:	1004943a 	slli	r2,r2,16
  80e448:	b006d43a 	srli	r3,r22,16
  80e44c:	10c4b03a 	or	r2,r2,r3
  80e450:	1440032e 	bgeu	r2,r17,80e460 <__umoddi3+0x200>
  80e454:	1405883a 	add	r2,r2,r16
  80e458:	14000136 	bltu	r2,r16,80e460 <__umoddi3+0x200>
  80e45c:	1440e536 	bltu	r2,r17,80e7f4 <__umoddi3+0x594>
  80e460:	1463c83a 	sub	r17,r2,r17
  80e464:	8809883a 	mov	r4,r17
  80e468:	a80b883a 	mov	r5,r21
  80e46c:	080fcdc0 	call	80fcdc <__udivsi3>
  80e470:	8809883a 	mov	r4,r17
  80e474:	b8a3383a 	mul	r17,r23,r2
  80e478:	a80b883a 	mov	r5,r21
  80e47c:	080fce40 	call	80fce4 <__umodsi3>
  80e480:	1004943a 	slli	r2,r2,16
  80e484:	b0ffffcc 	andi	r3,r22,65535
  80e488:	10c4b03a 	or	r2,r2,r3
  80e48c:	1440042e 	bgeu	r2,r17,80e4a0 <__umoddi3+0x240>
  80e490:	1405883a 	add	r2,r2,r16
  80e494:	14000236 	bltu	r2,r16,80e4a0 <__umoddi3+0x240>
  80e498:	1440012e 	bgeu	r2,r17,80e4a0 <__umoddi3+0x240>
  80e49c:	1405883a 	add	r2,r2,r16
  80e4a0:	1445c83a 	sub	r2,r2,r17
  80e4a4:	1724d83a 	srl	r18,r2,fp
  80e4a8:	0013883a 	mov	r9,zero
  80e4ac:	9011883a 	mov	r8,r18
  80e4b0:	003fa906 	br	80e358 <__umoddi3+0xf8>
  80e4b4:	00804034 	movhi	r2,256
  80e4b8:	10bfffc4 	addi	r2,r2,-1
  80e4bc:	1400b036 	bltu	r2,r16,80e780 <__umoddi3+0x520>
  80e4c0:	01400404 	movi	r5,16
  80e4c4:	2805883a 	mov	r2,r5
  80e4c8:	003f7c06 	br	80e2bc <__umoddi3+0x5c>
  80e4cc:	01000044 	movi	r4,1
  80e4d0:	000b883a 	mov	r5,zero
  80e4d4:	080fcdc0 	call	80fcdc <__udivsi3>
  80e4d8:	1021883a 	mov	r16,r2
  80e4dc:	00bfffd4 	movui	r2,65535
  80e4e0:	143ff436 	bltu	r2,r16,80e4b4 <__umoddi3+0x254>
  80e4e4:	003f7106 	br	80e2ac <__umoddi3+0x4c>
  80e4e8:	00804034 	movhi	r2,256
  80e4ec:	10bfffc4 	addi	r2,r2,-1
  80e4f0:	1180af36 	bltu	r2,r6,80e7b0 <__umoddi3+0x550>
  80e4f4:	01400404 	movi	r5,16
  80e4f8:	2805883a 	mov	r2,r5
  80e4fc:	003fbe06 	br	80e3f8 <__umoddi3+0x198>
  80e500:	00804034 	movhi	r2,256
  80e504:	10bfffc4 	addi	r2,r2,-1
  80e508:	11c0ac36 	bltu	r2,r7,80e7bc <__umoddi3+0x55c>
  80e50c:	01400404 	movi	r5,16
  80e510:	2805883a 	mov	r2,r5
  80e514:	003fa406 	br	80e3a8 <__umoddi3+0x148>
  80e518:	b409c83a 	sub	r4,r22,r16
  80e51c:	b105803a 	cmpltu	r2,r22,r4
  80e520:	a187c83a 	sub	r3,r20,r6
  80e524:	18a9c83a 	sub	r20,r3,r2
  80e528:	202d883a 	mov	r22,r4
  80e52c:	003fa906 	br	80e3d4 <__umoddi3+0x174>
  80e530:	85e0983a 	sll	r16,r16,r23
  80e534:	35c5c83a 	sub	r2,r6,r23
  80e538:	a0a2d83a 	srl	r17,r20,r2
  80e53c:	802ad43a 	srli	r21,r16,16
  80e540:	b084d83a 	srl	r2,r22,r2
  80e544:	a5c6983a 	sll	r3,r20,r23
  80e548:	8809883a 	mov	r4,r17
  80e54c:	a80b883a 	mov	r5,r21
  80e550:	1886b03a 	or	r3,r3,r2
  80e554:	d8c00115 	stw	r3,4(sp)
  80e558:	853fffcc 	andi	r20,r16,65535
  80e55c:	080fcdc0 	call	80fcdc <__udivsi3>
  80e560:	8809883a 	mov	r4,r17
  80e564:	a80b883a 	mov	r5,r21
  80e568:	a0a3383a 	mul	r17,r20,r2
  80e56c:	080fce40 	call	80fce4 <__umodsi3>
  80e570:	d9000117 	ldw	r4,4(sp)
  80e574:	1004943a 	slli	r2,r2,16
  80e578:	b839883a 	mov	fp,r23
  80e57c:	2006d43a 	srli	r3,r4,16
  80e580:	10c4b03a 	or	r2,r2,r3
  80e584:	1440022e 	bgeu	r2,r17,80e590 <__umoddi3+0x330>
  80e588:	1405883a 	add	r2,r2,r16
  80e58c:	1400962e 	bgeu	r2,r16,80e7e8 <__umoddi3+0x588>
  80e590:	1463c83a 	sub	r17,r2,r17
  80e594:	8809883a 	mov	r4,r17
  80e598:	a80b883a 	mov	r5,r21
  80e59c:	080fcdc0 	call	80fcdc <__udivsi3>
  80e5a0:	8809883a 	mov	r4,r17
  80e5a4:	a80b883a 	mov	r5,r21
  80e5a8:	a0a3383a 	mul	r17,r20,r2
  80e5ac:	080fce40 	call	80fce4 <__umodsi3>
  80e5b0:	d9400117 	ldw	r5,4(sp)
  80e5b4:	1004943a 	slli	r2,r2,16
  80e5b8:	28ffffcc 	andi	r3,r5,65535
  80e5bc:	10c4b03a 	or	r2,r2,r3
  80e5c0:	1440042e 	bgeu	r2,r17,80e5d4 <__umoddi3+0x374>
  80e5c4:	1405883a 	add	r2,r2,r16
  80e5c8:	14000236 	bltu	r2,r16,80e5d4 <__umoddi3+0x374>
  80e5cc:	1440012e 	bgeu	r2,r17,80e5d4 <__umoddi3+0x374>
  80e5d0:	1405883a 	add	r2,r2,r16
  80e5d4:	b5ec983a 	sll	r22,r22,r23
  80e5d8:	1463c83a 	sub	r17,r2,r17
  80e5dc:	003f4406 	br	80e2f0 <__umoddi3+0x90>
  80e5e0:	3d4fc83a 	sub	r7,r7,r21
  80e5e4:	3546983a 	sll	r3,r6,r21
  80e5e8:	81c4d83a 	srl	r2,r16,r7
  80e5ec:	a1e2d83a 	srl	r17,r20,r7
  80e5f0:	a54c983a 	sll	r6,r20,r21
  80e5f4:	18aeb03a 	or	r23,r3,r2
  80e5f8:	b828d43a 	srli	r20,r23,16
  80e5fc:	b1c4d83a 	srl	r2,r22,r7
  80e600:	8809883a 	mov	r4,r17
  80e604:	a00b883a 	mov	r5,r20
  80e608:	308cb03a 	or	r6,r6,r2
  80e60c:	d9c00315 	stw	r7,12(sp)
  80e610:	d9800215 	stw	r6,8(sp)
  80e614:	080fcdc0 	call	80fcdc <__udivsi3>
  80e618:	8809883a 	mov	r4,r17
  80e61c:	a00b883a 	mov	r5,r20
  80e620:	1039883a 	mov	fp,r2
  80e624:	080fce40 	call	80fce4 <__umodsi3>
  80e628:	b8ffffcc 	andi	r3,r23,65535
  80e62c:	d8c00415 	stw	r3,16(sp)
  80e630:	d9000217 	ldw	r4,8(sp)
  80e634:	d9400417 	ldw	r5,16(sp)
  80e638:	1004943a 	slli	r2,r2,16
  80e63c:	2006d43a 	srli	r3,r4,16
  80e640:	8560983a 	sll	r16,r16,r21
  80e644:	2f23383a 	mul	r17,r5,fp
  80e648:	10c4b03a 	or	r2,r2,r3
  80e64c:	dc000015 	stw	r16,0(sp)
  80e650:	b56c983a 	sll	r22,r22,r21
  80e654:	1440032e 	bgeu	r2,r17,80e664 <__umoddi3+0x404>
  80e658:	15c5883a 	add	r2,r2,r23
  80e65c:	e73fffc4 	addi	fp,fp,-1
  80e660:	15c05d2e 	bgeu	r2,r23,80e7d8 <__umoddi3+0x578>
  80e664:	1463c83a 	sub	r17,r2,r17
  80e668:	8809883a 	mov	r4,r17
  80e66c:	a00b883a 	mov	r5,r20
  80e670:	080fcdc0 	call	80fcdc <__udivsi3>
  80e674:	8809883a 	mov	r4,r17
  80e678:	a00b883a 	mov	r5,r20
  80e67c:	1021883a 	mov	r16,r2
  80e680:	080fce40 	call	80fce4 <__umodsi3>
  80e684:	d8c00417 	ldw	r3,16(sp)
  80e688:	d9000217 	ldw	r4,8(sp)
  80e68c:	1004943a 	slli	r2,r2,16
  80e690:	1c23383a 	mul	r17,r3,r16
  80e694:	20ffffcc 	andi	r3,r4,65535
  80e698:	10ceb03a 	or	r7,r2,r3
  80e69c:	3c40032e 	bgeu	r7,r17,80e6ac <__umoddi3+0x44c>
  80e6a0:	3dcf883a 	add	r7,r7,r23
  80e6a4:	843fffc4 	addi	r16,r16,-1
  80e6a8:	3dc0472e 	bgeu	r7,r23,80e7c8 <__umoddi3+0x568>
  80e6ac:	e004943a 	slli	r2,fp,16
  80e6b0:	d9400017 	ldw	r5,0(sp)
  80e6b4:	3c4fc83a 	sub	r7,r7,r17
  80e6b8:	8084b03a 	or	r2,r16,r2
  80e6bc:	28ffffcc 	andi	r3,r5,65535
  80e6c0:	280cd43a 	srli	r6,r5,16
  80e6c4:	100ad43a 	srli	r5,r2,16
  80e6c8:	10bfffcc 	andi	r2,r2,65535
  80e6cc:	10d1383a 	mul	r8,r2,r3
  80e6d0:	28c7383a 	mul	r3,r5,r3
  80e6d4:	1185383a 	mul	r2,r2,r6
  80e6d8:	4008d43a 	srli	r4,r8,16
  80e6dc:	298b383a 	mul	r5,r5,r6
  80e6e0:	10c5883a 	add	r2,r2,r3
  80e6e4:	2089883a 	add	r4,r4,r2
  80e6e8:	20c0022e 	bgeu	r4,r3,80e6f4 <__umoddi3+0x494>
  80e6ec:	00800074 	movhi	r2,1
  80e6f0:	288b883a 	add	r5,r5,r2
  80e6f4:	2004d43a 	srli	r2,r4,16
  80e6f8:	2008943a 	slli	r4,r4,16
  80e6fc:	40ffffcc 	andi	r3,r8,65535
  80e700:	288b883a 	add	r5,r5,r2
  80e704:	20c9883a 	add	r4,r4,r3
  80e708:	39400b36 	bltu	r7,r5,80e738 <__umoddi3+0x4d8>
  80e70c:	39403d26 	beq	r7,r5,80e804 <__umoddi3+0x5a4>
  80e710:	394bc83a 	sub	r5,r7,r5
  80e714:	00000f06 	br	80e754 <__umoddi3+0x4f4>
  80e718:	30c5c83a 	sub	r2,r6,r3
  80e71c:	1839883a 	mov	fp,r3
  80e720:	b084d83a 	srl	r2,r22,r2
  80e724:	a0c6983a 	sll	r3,r20,r3
  80e728:	8720983a 	sll	r16,r16,fp
  80e72c:	b72c983a 	sll	r22,r22,fp
  80e730:	18a8b03a 	or	r20,r3,r2
  80e734:	003f3a06 	br	80e420 <__umoddi3+0x1c0>
  80e738:	d8c00017 	ldw	r3,0(sp)
  80e73c:	20c5c83a 	sub	r2,r4,r3
  80e740:	2089803a 	cmpltu	r4,r4,r2
  80e744:	2dc7c83a 	sub	r3,r5,r23
  80e748:	1907c83a 	sub	r3,r3,r4
  80e74c:	38cbc83a 	sub	r5,r7,r3
  80e750:	1009883a 	mov	r4,r2
  80e754:	b105c83a 	sub	r2,r22,r4
  80e758:	b087803a 	cmpltu	r3,r22,r2
  80e75c:	28c7c83a 	sub	r3,r5,r3
  80e760:	d9400317 	ldw	r5,12(sp)
  80e764:	1544d83a 	srl	r2,r2,r21
  80e768:	1948983a 	sll	r4,r3,r5
  80e76c:	1d46d83a 	srl	r3,r3,r21
  80e770:	20a4b03a 	or	r18,r4,r2
  80e774:	9011883a 	mov	r8,r18
  80e778:	1813883a 	mov	r9,r3
  80e77c:	003ef606 	br	80e358 <__umoddi3+0xf8>
  80e780:	01400604 	movi	r5,24
  80e784:	2805883a 	mov	r2,r5
  80e788:	003ecc06 	br	80e2bc <__umoddi3+0x5c>
  80e78c:	01400204 	movi	r5,8
  80e790:	2805883a 	mov	r2,r5
  80e794:	003ec906 	br	80e2bc <__umoddi3+0x5c>
  80e798:	01400204 	movi	r5,8
  80e79c:	2805883a 	mov	r2,r5
  80e7a0:	003f0106 	br	80e3a8 <__umoddi3+0x148>
  80e7a4:	01400204 	movi	r5,8
  80e7a8:	2805883a 	mov	r2,r5
  80e7ac:	003f1206 	br	80e3f8 <__umoddi3+0x198>
  80e7b0:	01400604 	movi	r5,24
  80e7b4:	2805883a 	mov	r2,r5
  80e7b8:	003f0f06 	br	80e3f8 <__umoddi3+0x198>
  80e7bc:	01400604 	movi	r5,24
  80e7c0:	2805883a 	mov	r2,r5
  80e7c4:	003ef806 	br	80e3a8 <__umoddi3+0x148>
  80e7c8:	3c7fb82e 	bgeu	r7,r17,80e6ac <__umoddi3+0x44c>
  80e7cc:	843fffc4 	addi	r16,r16,-1
  80e7d0:	3dcf883a 	add	r7,r7,r23
  80e7d4:	003fb506 	br	80e6ac <__umoddi3+0x44c>
  80e7d8:	147fa22e 	bgeu	r2,r17,80e664 <__umoddi3+0x404>
  80e7dc:	e73fffc4 	addi	fp,fp,-1
  80e7e0:	15c5883a 	add	r2,r2,r23
  80e7e4:	003f9f06 	br	80e664 <__umoddi3+0x404>
  80e7e8:	147f692e 	bgeu	r2,r17,80e590 <__umoddi3+0x330>
  80e7ec:	1405883a 	add	r2,r2,r16
  80e7f0:	003f6706 	br	80e590 <__umoddi3+0x330>
  80e7f4:	1405883a 	add	r2,r2,r16
  80e7f8:	003f1906 	br	80e460 <__umoddi3+0x200>
  80e7fc:	1405883a 	add	r2,r2,r16
  80e800:	003ec906 	br	80e328 <__umoddi3+0xc8>
  80e804:	b13fcc36 	bltu	r22,r4,80e738 <__umoddi3+0x4d8>
  80e808:	000b883a 	mov	r5,zero
  80e80c:	003fd106 	br	80e754 <__umoddi3+0x4f4>

0080e810 <__nesf2>:
  80e810:	defff304 	addi	sp,sp,-52
  80e814:	dc400b15 	stw	r17,44(sp)
  80e818:	dc400204 	addi	r17,sp,8
  80e81c:	dc000a15 	stw	r16,40(sp)
  80e820:	d9000015 	stw	r4,0(sp)
  80e824:	d9400115 	stw	r5,4(sp)
  80e828:	d809883a 	mov	r4,sp
  80e82c:	880b883a 	mov	r5,r17
  80e830:	dc000604 	addi	r16,sp,24
  80e834:	dfc00c15 	stw	ra,48(sp)
  80e838:	080fd6c0 	call	80fd6c <__unpack_f>
  80e83c:	d9000104 	addi	r4,sp,4
  80e840:	800b883a 	mov	r5,r16
  80e844:	080fd6c0 	call	80fd6c <__unpack_f>
  80e848:	d8800217 	ldw	r2,8(sp)
  80e84c:	00c00044 	movi	r3,1
  80e850:	180d883a 	mov	r6,r3
  80e854:	1880062e 	bgeu	r3,r2,80e870 <__nesf2+0x60>
  80e858:	d8800617 	ldw	r2,24(sp)
  80e85c:	8809883a 	mov	r4,r17
  80e860:	800b883a 	mov	r5,r16
  80e864:	1880022e 	bgeu	r3,r2,80e870 <__nesf2+0x60>
  80e868:	080fe340 	call	80fe34 <__fpcmp_parts_f>
  80e86c:	100d883a 	mov	r6,r2
  80e870:	3005883a 	mov	r2,r6
  80e874:	dfc00c17 	ldw	ra,48(sp)
  80e878:	dc400b17 	ldw	r17,44(sp)
  80e87c:	dc000a17 	ldw	r16,40(sp)
  80e880:	dec00d04 	addi	sp,sp,52
  80e884:	f800283a 	ret

0080e888 <__gtsf2>:
  80e888:	defff304 	addi	sp,sp,-52
  80e88c:	dc400b15 	stw	r17,44(sp)
  80e890:	dc400204 	addi	r17,sp,8
  80e894:	dc000a15 	stw	r16,40(sp)
  80e898:	d9000015 	stw	r4,0(sp)
  80e89c:	d9400115 	stw	r5,4(sp)
  80e8a0:	d809883a 	mov	r4,sp
  80e8a4:	880b883a 	mov	r5,r17
  80e8a8:	dc000604 	addi	r16,sp,24
  80e8ac:	dfc00c15 	stw	ra,48(sp)
  80e8b0:	080fd6c0 	call	80fd6c <__unpack_f>
  80e8b4:	d9000104 	addi	r4,sp,4
  80e8b8:	800b883a 	mov	r5,r16
  80e8bc:	080fd6c0 	call	80fd6c <__unpack_f>
  80e8c0:	d8800217 	ldw	r2,8(sp)
  80e8c4:	00c00044 	movi	r3,1
  80e8c8:	01bfffc4 	movi	r6,-1
  80e8cc:	1880062e 	bgeu	r3,r2,80e8e8 <__gtsf2+0x60>
  80e8d0:	d8800617 	ldw	r2,24(sp)
  80e8d4:	8809883a 	mov	r4,r17
  80e8d8:	800b883a 	mov	r5,r16
  80e8dc:	1880022e 	bgeu	r3,r2,80e8e8 <__gtsf2+0x60>
  80e8e0:	080fe340 	call	80fe34 <__fpcmp_parts_f>
  80e8e4:	100d883a 	mov	r6,r2
  80e8e8:	3005883a 	mov	r2,r6
  80e8ec:	dfc00c17 	ldw	ra,48(sp)
  80e8f0:	dc400b17 	ldw	r17,44(sp)
  80e8f4:	dc000a17 	ldw	r16,40(sp)
  80e8f8:	dec00d04 	addi	sp,sp,52
  80e8fc:	f800283a 	ret

0080e900 <__ltsf2>:
  80e900:	defff304 	addi	sp,sp,-52
  80e904:	dc400b15 	stw	r17,44(sp)
  80e908:	dc400204 	addi	r17,sp,8
  80e90c:	dc000a15 	stw	r16,40(sp)
  80e910:	d9000015 	stw	r4,0(sp)
  80e914:	d9400115 	stw	r5,4(sp)
  80e918:	d809883a 	mov	r4,sp
  80e91c:	880b883a 	mov	r5,r17
  80e920:	dc000604 	addi	r16,sp,24
  80e924:	dfc00c15 	stw	ra,48(sp)
  80e928:	080fd6c0 	call	80fd6c <__unpack_f>
  80e92c:	d9000104 	addi	r4,sp,4
  80e930:	800b883a 	mov	r5,r16
  80e934:	080fd6c0 	call	80fd6c <__unpack_f>
  80e938:	d8800217 	ldw	r2,8(sp)
  80e93c:	00c00044 	movi	r3,1
  80e940:	180d883a 	mov	r6,r3
  80e944:	1880062e 	bgeu	r3,r2,80e960 <__ltsf2+0x60>
  80e948:	d8800617 	ldw	r2,24(sp)
  80e94c:	8809883a 	mov	r4,r17
  80e950:	800b883a 	mov	r5,r16
  80e954:	1880022e 	bgeu	r3,r2,80e960 <__ltsf2+0x60>
  80e958:	080fe340 	call	80fe34 <__fpcmp_parts_f>
  80e95c:	100d883a 	mov	r6,r2
  80e960:	3005883a 	mov	r2,r6
  80e964:	dfc00c17 	ldw	ra,48(sp)
  80e968:	dc400b17 	ldw	r17,44(sp)
  80e96c:	dc000a17 	ldw	r16,40(sp)
  80e970:	dec00d04 	addi	sp,sp,52
  80e974:	f800283a 	ret

0080e978 <_fpadd_parts>:
  80e978:	defff804 	addi	sp,sp,-32
  80e97c:	dcc00315 	stw	r19,12(sp)
  80e980:	2027883a 	mov	r19,r4
  80e984:	21000017 	ldw	r4,0(r4)
  80e988:	00c00044 	movi	r3,1
  80e98c:	dd400515 	stw	r21,20(sp)
  80e990:	dd000415 	stw	r20,16(sp)
  80e994:	ddc00715 	stw	r23,28(sp)
  80e998:	dd800615 	stw	r22,24(sp)
  80e99c:	dc800215 	stw	r18,8(sp)
  80e9a0:	dc400115 	stw	r17,4(sp)
  80e9a4:	dc000015 	stw	r16,0(sp)
  80e9a8:	282b883a 	mov	r21,r5
  80e9ac:	3029883a 	mov	r20,r6
  80e9b0:	1900632e 	bgeu	r3,r4,80eb40 <_fpadd_parts+0x1c8>
  80e9b4:	28800017 	ldw	r2,0(r5)
  80e9b8:	1880812e 	bgeu	r3,r2,80ebc0 <_fpadd_parts+0x248>
  80e9bc:	00c00104 	movi	r3,4
  80e9c0:	20c0dc26 	beq	r4,r3,80ed34 <_fpadd_parts+0x3bc>
  80e9c4:	10c07e26 	beq	r2,r3,80ebc0 <_fpadd_parts+0x248>
  80e9c8:	00c00084 	movi	r3,2
  80e9cc:	10c06726 	beq	r2,r3,80eb6c <_fpadd_parts+0x1f4>
  80e9d0:	20c07b26 	beq	r4,r3,80ebc0 <_fpadd_parts+0x248>
  80e9d4:	9dc00217 	ldw	r23,8(r19)
  80e9d8:	28c00217 	ldw	r3,8(r5)
  80e9dc:	9c400317 	ldw	r17,12(r19)
  80e9e0:	2bc00317 	ldw	r15,12(r5)
  80e9e4:	b8cdc83a 	sub	r6,r23,r3
  80e9e8:	9c800417 	ldw	r18,16(r19)
  80e9ec:	2c000417 	ldw	r16,16(r5)
  80e9f0:	3009883a 	mov	r4,r6
  80e9f4:	30009716 	blt	r6,zero,80ec54 <_fpadd_parts+0x2dc>
  80e9f8:	00800fc4 	movi	r2,63
  80e9fc:	11806b16 	blt	r2,r6,80ebac <_fpadd_parts+0x234>
  80ea00:	0100a40e 	bge	zero,r4,80ec94 <_fpadd_parts+0x31c>
  80ea04:	35bff804 	addi	r22,r6,-32
  80ea08:	b000bc16 	blt	r22,zero,80ecfc <_fpadd_parts+0x384>
  80ea0c:	8596d83a 	srl	r11,r16,r22
  80ea10:	0019883a 	mov	r12,zero
  80ea14:	0013883a 	mov	r9,zero
  80ea18:	01000044 	movi	r4,1
  80ea1c:	0015883a 	mov	r10,zero
  80ea20:	b000be16 	blt	r22,zero,80ed1c <_fpadd_parts+0x3a4>
  80ea24:	2590983a 	sll	r8,r4,r22
  80ea28:	000f883a 	mov	r7,zero
  80ea2c:	00bfffc4 	movi	r2,-1
  80ea30:	3889883a 	add	r4,r7,r2
  80ea34:	408b883a 	add	r5,r8,r2
  80ea38:	21cd803a 	cmpltu	r6,r4,r7
  80ea3c:	314b883a 	add	r5,r6,r5
  80ea40:	7904703a 	and	r2,r15,r4
  80ea44:	8146703a 	and	r3,r16,r5
  80ea48:	10c4b03a 	or	r2,r2,r3
  80ea4c:	10000226 	beq	r2,zero,80ea58 <_fpadd_parts+0xe0>
  80ea50:	02400044 	movi	r9,1
  80ea54:	0015883a 	mov	r10,zero
  80ea58:	5a5eb03a 	or	r15,r11,r9
  80ea5c:	62a0b03a 	or	r16,r12,r10
  80ea60:	99400117 	ldw	r5,4(r19)
  80ea64:	a8800117 	ldw	r2,4(r21)
  80ea68:	28806e26 	beq	r5,r2,80ec24 <_fpadd_parts+0x2ac>
  80ea6c:	28006626 	beq	r5,zero,80ec08 <_fpadd_parts+0x290>
  80ea70:	7c45c83a 	sub	r2,r15,r17
  80ea74:	7889803a 	cmpltu	r4,r15,r2
  80ea78:	8487c83a 	sub	r3,r16,r18
  80ea7c:	1909c83a 	sub	r4,r3,r4
  80ea80:	100d883a 	mov	r6,r2
  80ea84:	200f883a 	mov	r7,r4
  80ea88:	38007716 	blt	r7,zero,80ec68 <_fpadd_parts+0x2f0>
  80ea8c:	a5c00215 	stw	r23,8(r20)
  80ea90:	a1c00415 	stw	r7,16(r20)
  80ea94:	a0000115 	stw	zero,4(r20)
  80ea98:	a1800315 	stw	r6,12(r20)
  80ea9c:	a2000317 	ldw	r8,12(r20)
  80eaa0:	a2400417 	ldw	r9,16(r20)
  80eaa4:	00bfffc4 	movi	r2,-1
  80eaa8:	408b883a 	add	r5,r8,r2
  80eaac:	2a09803a 	cmpltu	r4,r5,r8
  80eab0:	488d883a 	add	r6,r9,r2
  80eab4:	01c40034 	movhi	r7,4096
  80eab8:	39ffffc4 	addi	r7,r7,-1
  80eabc:	218d883a 	add	r6,r4,r6
  80eac0:	39801736 	bltu	r7,r6,80eb20 <_fpadd_parts+0x1a8>
  80eac4:	31c06526 	beq	r6,r7,80ec5c <_fpadd_parts+0x2e4>
  80eac8:	a3000217 	ldw	r12,8(r20)
  80eacc:	4209883a 	add	r4,r8,r8
  80ead0:	00bfffc4 	movi	r2,-1
  80ead4:	220f803a 	cmpltu	r7,r4,r8
  80ead8:	4a4b883a 	add	r5,r9,r9
  80eadc:	394f883a 	add	r7,r7,r5
  80eae0:	2095883a 	add	r10,r4,r2
  80eae4:	3897883a 	add	r11,r7,r2
  80eae8:	510d803a 	cmpltu	r6,r10,r4
  80eaec:	6099883a 	add	r12,r12,r2
  80eaf0:	32d7883a 	add	r11,r6,r11
  80eaf4:	00840034 	movhi	r2,4096
  80eaf8:	10bfffc4 	addi	r2,r2,-1
  80eafc:	2011883a 	mov	r8,r4
  80eb00:	3813883a 	mov	r9,r7
  80eb04:	a1000315 	stw	r4,12(r20)
  80eb08:	a1c00415 	stw	r7,16(r20)
  80eb0c:	a3000215 	stw	r12,8(r20)
  80eb10:	12c00336 	bltu	r2,r11,80eb20 <_fpadd_parts+0x1a8>
  80eb14:	58bfed1e 	bne	r11,r2,80eacc <_fpadd_parts+0x154>
  80eb18:	00bfff84 	movi	r2,-2
  80eb1c:	12bfeb2e 	bgeu	r2,r10,80eacc <_fpadd_parts+0x154>
  80eb20:	a2800417 	ldw	r10,16(r20)
  80eb24:	008000c4 	movi	r2,3
  80eb28:	00c80034 	movhi	r3,8192
  80eb2c:	18ffffc4 	addi	r3,r3,-1
  80eb30:	a2400317 	ldw	r9,12(r20)
  80eb34:	a0800015 	stw	r2,0(r20)
  80eb38:	1a802336 	bltu	r3,r10,80ebc8 <_fpadd_parts+0x250>
  80eb3c:	a027883a 	mov	r19,r20
  80eb40:	9805883a 	mov	r2,r19
  80eb44:	ddc00717 	ldw	r23,28(sp)
  80eb48:	dd800617 	ldw	r22,24(sp)
  80eb4c:	dd400517 	ldw	r21,20(sp)
  80eb50:	dd000417 	ldw	r20,16(sp)
  80eb54:	dcc00317 	ldw	r19,12(sp)
  80eb58:	dc800217 	ldw	r18,8(sp)
  80eb5c:	dc400117 	ldw	r17,4(sp)
  80eb60:	dc000017 	ldw	r16,0(sp)
  80eb64:	dec00804 	addi	sp,sp,32
  80eb68:	f800283a 	ret
  80eb6c:	20fff41e 	bne	r4,r3,80eb40 <_fpadd_parts+0x1c8>
  80eb70:	31000015 	stw	r4,0(r6)
  80eb74:	98800117 	ldw	r2,4(r19)
  80eb78:	30800115 	stw	r2,4(r6)
  80eb7c:	98c00217 	ldw	r3,8(r19)
  80eb80:	30c00215 	stw	r3,8(r6)
  80eb84:	98800317 	ldw	r2,12(r19)
  80eb88:	30800315 	stw	r2,12(r6)
  80eb8c:	98c00417 	ldw	r3,16(r19)
  80eb90:	30c00415 	stw	r3,16(r6)
  80eb94:	98800117 	ldw	r2,4(r19)
  80eb98:	28c00117 	ldw	r3,4(r5)
  80eb9c:	3027883a 	mov	r19,r6
  80eba0:	10c4703a 	and	r2,r2,r3
  80eba4:	30800115 	stw	r2,4(r6)
  80eba8:	003fe506 	br	80eb40 <_fpadd_parts+0x1c8>
  80ebac:	1dc02616 	blt	r3,r23,80ec48 <_fpadd_parts+0x2d0>
  80ebb0:	0023883a 	mov	r17,zero
  80ebb4:	182f883a 	mov	r23,r3
  80ebb8:	0025883a 	mov	r18,zero
  80ebbc:	003fa806 	br	80ea60 <_fpadd_parts+0xe8>
  80ebc0:	a827883a 	mov	r19,r21
  80ebc4:	003fde06 	br	80eb40 <_fpadd_parts+0x1c8>
  80ebc8:	01800044 	movi	r6,1
  80ebcc:	500497fa 	slli	r2,r10,31
  80ebd0:	4808d07a 	srli	r4,r9,1
  80ebd4:	518ad83a 	srl	r5,r10,r6
  80ebd8:	a2000217 	ldw	r8,8(r20)
  80ebdc:	1108b03a 	or	r4,r2,r4
  80ebe0:	0007883a 	mov	r3,zero
  80ebe4:	4984703a 	and	r2,r9,r6
  80ebe8:	208cb03a 	or	r6,r4,r2
  80ebec:	28ceb03a 	or	r7,r5,r3
  80ebf0:	42000044 	addi	r8,r8,1
  80ebf4:	a027883a 	mov	r19,r20
  80ebf8:	a1c00415 	stw	r7,16(r20)
  80ebfc:	a2000215 	stw	r8,8(r20)
  80ec00:	a1800315 	stw	r6,12(r20)
  80ec04:	003fce06 	br	80eb40 <_fpadd_parts+0x1c8>
  80ec08:	8bc5c83a 	sub	r2,r17,r15
  80ec0c:	8889803a 	cmpltu	r4,r17,r2
  80ec10:	9407c83a 	sub	r3,r18,r16
  80ec14:	1909c83a 	sub	r4,r3,r4
  80ec18:	100d883a 	mov	r6,r2
  80ec1c:	200f883a 	mov	r7,r4
  80ec20:	003f9906 	br	80ea88 <_fpadd_parts+0x110>
  80ec24:	7c45883a 	add	r2,r15,r17
  80ec28:	13c9803a 	cmpltu	r4,r2,r15
  80ec2c:	8487883a 	add	r3,r16,r18
  80ec30:	20c9883a 	add	r4,r4,r3
  80ec34:	a1400115 	stw	r5,4(r20)
  80ec38:	a5c00215 	stw	r23,8(r20)
  80ec3c:	a0800315 	stw	r2,12(r20)
  80ec40:	a1000415 	stw	r4,16(r20)
  80ec44:	003fb606 	br	80eb20 <_fpadd_parts+0x1a8>
  80ec48:	001f883a 	mov	r15,zero
  80ec4c:	0021883a 	mov	r16,zero
  80ec50:	003f8306 	br	80ea60 <_fpadd_parts+0xe8>
  80ec54:	018dc83a 	sub	r6,zero,r6
  80ec58:	003f6706 	br	80e9f8 <_fpadd_parts+0x80>
  80ec5c:	00bfff84 	movi	r2,-2
  80ec60:	117faf36 	bltu	r2,r5,80eb20 <_fpadd_parts+0x1a8>
  80ec64:	003f9806 	br	80eac8 <_fpadd_parts+0x150>
  80ec68:	0005883a 	mov	r2,zero
  80ec6c:	1189c83a 	sub	r4,r2,r6
  80ec70:	1105803a 	cmpltu	r2,r2,r4
  80ec74:	01cbc83a 	sub	r5,zero,r7
  80ec78:	2885c83a 	sub	r2,r5,r2
  80ec7c:	01800044 	movi	r6,1
  80ec80:	a1800115 	stw	r6,4(r20)
  80ec84:	a5c00215 	stw	r23,8(r20)
  80ec88:	a1000315 	stw	r4,12(r20)
  80ec8c:	a0800415 	stw	r2,16(r20)
  80ec90:	003f8206 	br	80ea9c <_fpadd_parts+0x124>
  80ec94:	203f7226 	beq	r4,zero,80ea60 <_fpadd_parts+0xe8>
  80ec98:	35bff804 	addi	r22,r6,-32
  80ec9c:	b9af883a 	add	r23,r23,r6
  80eca0:	b0003116 	blt	r22,zero,80ed68 <_fpadd_parts+0x3f0>
  80eca4:	959ad83a 	srl	r13,r18,r22
  80eca8:	001d883a 	mov	r14,zero
  80ecac:	000f883a 	mov	r7,zero
  80ecb0:	01000044 	movi	r4,1
  80ecb4:	0011883a 	mov	r8,zero
  80ecb8:	b0002516 	blt	r22,zero,80ed50 <_fpadd_parts+0x3d8>
  80ecbc:	2594983a 	sll	r10,r4,r22
  80ecc0:	0013883a 	mov	r9,zero
  80ecc4:	00bfffc4 	movi	r2,-1
  80ecc8:	4889883a 	add	r4,r9,r2
  80eccc:	508b883a 	add	r5,r10,r2
  80ecd0:	224d803a 	cmpltu	r6,r4,r9
  80ecd4:	314b883a 	add	r5,r6,r5
  80ecd8:	8904703a 	and	r2,r17,r4
  80ecdc:	9146703a 	and	r3,r18,r5
  80ece0:	10c4b03a 	or	r2,r2,r3
  80ece4:	10000226 	beq	r2,zero,80ecf0 <_fpadd_parts+0x378>
  80ece8:	01c00044 	movi	r7,1
  80ecec:	0011883a 	mov	r8,zero
  80ecf0:	69e2b03a 	or	r17,r13,r7
  80ecf4:	7224b03a 	or	r18,r14,r8
  80ecf8:	003f5906 	br	80ea60 <_fpadd_parts+0xe8>
  80ecfc:	8407883a 	add	r3,r16,r16
  80ed00:	008007c4 	movi	r2,31
  80ed04:	1185c83a 	sub	r2,r2,r6
  80ed08:	1886983a 	sll	r3,r3,r2
  80ed0c:	7996d83a 	srl	r11,r15,r6
  80ed10:	8198d83a 	srl	r12,r16,r6
  80ed14:	1ad6b03a 	or	r11,r3,r11
  80ed18:	003f3e06 	br	80ea14 <_fpadd_parts+0x9c>
  80ed1c:	2006d07a 	srli	r3,r4,1
  80ed20:	008007c4 	movi	r2,31
  80ed24:	1185c83a 	sub	r2,r2,r6
  80ed28:	1890d83a 	srl	r8,r3,r2
  80ed2c:	218e983a 	sll	r7,r4,r6
  80ed30:	003f3e06 	br	80ea2c <_fpadd_parts+0xb4>
  80ed34:	113f821e 	bne	r2,r4,80eb40 <_fpadd_parts+0x1c8>
  80ed38:	28c00117 	ldw	r3,4(r5)
  80ed3c:	98800117 	ldw	r2,4(r19)
  80ed40:	10ff7f26 	beq	r2,r3,80eb40 <_fpadd_parts+0x1c8>
  80ed44:	04c02074 	movhi	r19,129
  80ed48:	9cd4a004 	addi	r19,r19,21120
  80ed4c:	003f7c06 	br	80eb40 <_fpadd_parts+0x1c8>
  80ed50:	2006d07a 	srli	r3,r4,1
  80ed54:	008007c4 	movi	r2,31
  80ed58:	1185c83a 	sub	r2,r2,r6
  80ed5c:	1894d83a 	srl	r10,r3,r2
  80ed60:	2192983a 	sll	r9,r4,r6
  80ed64:	003fd706 	br	80ecc4 <_fpadd_parts+0x34c>
  80ed68:	9487883a 	add	r3,r18,r18
  80ed6c:	008007c4 	movi	r2,31
  80ed70:	1185c83a 	sub	r2,r2,r6
  80ed74:	1886983a 	sll	r3,r3,r2
  80ed78:	899ad83a 	srl	r13,r17,r6
  80ed7c:	919cd83a 	srl	r14,r18,r6
  80ed80:	1b5ab03a 	or	r13,r3,r13
  80ed84:	003fc906 	br	80ecac <_fpadd_parts+0x334>

0080ed88 <__subdf3>:
  80ed88:	deffea04 	addi	sp,sp,-88
  80ed8c:	dcc01415 	stw	r19,80(sp)
  80ed90:	dcc00404 	addi	r19,sp,16
  80ed94:	2011883a 	mov	r8,r4
  80ed98:	2813883a 	mov	r9,r5
  80ed9c:	dc401315 	stw	r17,76(sp)
  80eda0:	d809883a 	mov	r4,sp
  80eda4:	980b883a 	mov	r5,r19
  80eda8:	dc400904 	addi	r17,sp,36
  80edac:	dfc01515 	stw	ra,84(sp)
  80edb0:	da400115 	stw	r9,4(sp)
  80edb4:	d9c00315 	stw	r7,12(sp)
  80edb8:	da000015 	stw	r8,0(sp)
  80edbc:	d9800215 	stw	r6,8(sp)
  80edc0:	081021c0 	call	81021c <__unpack_d>
  80edc4:	d9000204 	addi	r4,sp,8
  80edc8:	880b883a 	mov	r5,r17
  80edcc:	081021c0 	call	81021c <__unpack_d>
  80edd0:	d8800a17 	ldw	r2,40(sp)
  80edd4:	880b883a 	mov	r5,r17
  80edd8:	9809883a 	mov	r4,r19
  80eddc:	d9800e04 	addi	r6,sp,56
  80ede0:	1080005c 	xori	r2,r2,1
  80ede4:	d8800a15 	stw	r2,40(sp)
  80ede8:	080e9780 	call	80e978 <_fpadd_parts>
  80edec:	1009883a 	mov	r4,r2
  80edf0:	080ff080 	call	80ff08 <__pack_d>
  80edf4:	dfc01517 	ldw	ra,84(sp)
  80edf8:	dcc01417 	ldw	r19,80(sp)
  80edfc:	dc401317 	ldw	r17,76(sp)
  80ee00:	dec01604 	addi	sp,sp,88
  80ee04:	f800283a 	ret

0080ee08 <__adddf3>:
  80ee08:	deffea04 	addi	sp,sp,-88
  80ee0c:	dcc01415 	stw	r19,80(sp)
  80ee10:	dcc00404 	addi	r19,sp,16
  80ee14:	2011883a 	mov	r8,r4
  80ee18:	2813883a 	mov	r9,r5
  80ee1c:	dc401315 	stw	r17,76(sp)
  80ee20:	d809883a 	mov	r4,sp
  80ee24:	980b883a 	mov	r5,r19
  80ee28:	dc400904 	addi	r17,sp,36
  80ee2c:	dfc01515 	stw	ra,84(sp)
  80ee30:	da400115 	stw	r9,4(sp)
  80ee34:	d9c00315 	stw	r7,12(sp)
  80ee38:	da000015 	stw	r8,0(sp)
  80ee3c:	d9800215 	stw	r6,8(sp)
  80ee40:	081021c0 	call	81021c <__unpack_d>
  80ee44:	d9000204 	addi	r4,sp,8
  80ee48:	880b883a 	mov	r5,r17
  80ee4c:	081021c0 	call	81021c <__unpack_d>
  80ee50:	d9800e04 	addi	r6,sp,56
  80ee54:	9809883a 	mov	r4,r19
  80ee58:	880b883a 	mov	r5,r17
  80ee5c:	080e9780 	call	80e978 <_fpadd_parts>
  80ee60:	1009883a 	mov	r4,r2
  80ee64:	080ff080 	call	80ff08 <__pack_d>
  80ee68:	dfc01517 	ldw	ra,84(sp)
  80ee6c:	dcc01417 	ldw	r19,80(sp)
  80ee70:	dc401317 	ldw	r17,76(sp)
  80ee74:	dec01604 	addi	sp,sp,88
  80ee78:	f800283a 	ret

0080ee7c <__muldf3>:
  80ee7c:	deffe004 	addi	sp,sp,-128
  80ee80:	dc401815 	stw	r17,96(sp)
  80ee84:	dc400404 	addi	r17,sp,16
  80ee88:	2011883a 	mov	r8,r4
  80ee8c:	2813883a 	mov	r9,r5
  80ee90:	dc001715 	stw	r16,92(sp)
  80ee94:	d809883a 	mov	r4,sp
  80ee98:	880b883a 	mov	r5,r17
  80ee9c:	dc000904 	addi	r16,sp,36
  80eea0:	dfc01f15 	stw	ra,124(sp)
  80eea4:	da400115 	stw	r9,4(sp)
  80eea8:	d9c00315 	stw	r7,12(sp)
  80eeac:	da000015 	stw	r8,0(sp)
  80eeb0:	d9800215 	stw	r6,8(sp)
  80eeb4:	ddc01e15 	stw	r23,120(sp)
  80eeb8:	dd801d15 	stw	r22,116(sp)
  80eebc:	dd401c15 	stw	r21,112(sp)
  80eec0:	dd001b15 	stw	r20,108(sp)
  80eec4:	dcc01a15 	stw	r19,104(sp)
  80eec8:	dc801915 	stw	r18,100(sp)
  80eecc:	081021c0 	call	81021c <__unpack_d>
  80eed0:	d9000204 	addi	r4,sp,8
  80eed4:	800b883a 	mov	r5,r16
  80eed8:	081021c0 	call	81021c <__unpack_d>
  80eedc:	d9000417 	ldw	r4,16(sp)
  80eee0:	00800044 	movi	r2,1
  80eee4:	1100102e 	bgeu	r2,r4,80ef28 <__muldf3+0xac>
  80eee8:	d8c00917 	ldw	r3,36(sp)
  80eeec:	10c0062e 	bgeu	r2,r3,80ef08 <__muldf3+0x8c>
  80eef0:	00800104 	movi	r2,4
  80eef4:	20800a26 	beq	r4,r2,80ef20 <__muldf3+0xa4>
  80eef8:	1880cc26 	beq	r3,r2,80f22c <__muldf3+0x3b0>
  80eefc:	00800084 	movi	r2,2
  80ef00:	20800926 	beq	r4,r2,80ef28 <__muldf3+0xac>
  80ef04:	1880191e 	bne	r3,r2,80ef6c <__muldf3+0xf0>
  80ef08:	d8c00a17 	ldw	r3,40(sp)
  80ef0c:	d8800517 	ldw	r2,20(sp)
  80ef10:	8009883a 	mov	r4,r16
  80ef14:	10c4c03a 	cmpne	r2,r2,r3
  80ef18:	d8800a15 	stw	r2,40(sp)
  80ef1c:	00000706 	br	80ef3c <__muldf3+0xc0>
  80ef20:	00800084 	movi	r2,2
  80ef24:	1880c326 	beq	r3,r2,80f234 <__muldf3+0x3b8>
  80ef28:	d8800517 	ldw	r2,20(sp)
  80ef2c:	d8c00a17 	ldw	r3,40(sp)
  80ef30:	8809883a 	mov	r4,r17
  80ef34:	10c4c03a 	cmpne	r2,r2,r3
  80ef38:	d8800515 	stw	r2,20(sp)
  80ef3c:	080ff080 	call	80ff08 <__pack_d>
  80ef40:	dfc01f17 	ldw	ra,124(sp)
  80ef44:	ddc01e17 	ldw	r23,120(sp)
  80ef48:	dd801d17 	ldw	r22,116(sp)
  80ef4c:	dd401c17 	ldw	r21,112(sp)
  80ef50:	dd001b17 	ldw	r20,108(sp)
  80ef54:	dcc01a17 	ldw	r19,104(sp)
  80ef58:	dc801917 	ldw	r18,100(sp)
  80ef5c:	dc401817 	ldw	r17,96(sp)
  80ef60:	dc001717 	ldw	r16,92(sp)
  80ef64:	dec02004 	addi	sp,sp,128
  80ef68:	f800283a 	ret
  80ef6c:	dd800717 	ldw	r22,28(sp)
  80ef70:	dc800c17 	ldw	r18,48(sp)
  80ef74:	002b883a 	mov	r21,zero
  80ef78:	0023883a 	mov	r17,zero
  80ef7c:	a80b883a 	mov	r5,r21
  80ef80:	b00d883a 	mov	r6,r22
  80ef84:	880f883a 	mov	r7,r17
  80ef88:	ddc00817 	ldw	r23,32(sp)
  80ef8c:	dcc00d17 	ldw	r19,52(sp)
  80ef90:	9009883a 	mov	r4,r18
  80ef94:	080db480 	call	80db48 <__muldi3>
  80ef98:	001b883a 	mov	r13,zero
  80ef9c:	680f883a 	mov	r7,r13
  80efa0:	b009883a 	mov	r4,r22
  80efa4:	000b883a 	mov	r5,zero
  80efa8:	980d883a 	mov	r6,r19
  80efac:	b82d883a 	mov	r22,r23
  80efb0:	002f883a 	mov	r23,zero
  80efb4:	db401615 	stw	r13,88(sp)
  80efb8:	d8801315 	stw	r2,76(sp)
  80efbc:	d8c01415 	stw	r3,80(sp)
  80efc0:	dcc01515 	stw	r19,84(sp)
  80efc4:	080db480 	call	80db48 <__muldi3>
  80efc8:	b00d883a 	mov	r6,r22
  80efcc:	000b883a 	mov	r5,zero
  80efd0:	9009883a 	mov	r4,r18
  80efd4:	b80f883a 	mov	r7,r23
  80efd8:	1021883a 	mov	r16,r2
  80efdc:	1823883a 	mov	r17,r3
  80efe0:	080db480 	call	80db48 <__muldi3>
  80efe4:	8085883a 	add	r2,r16,r2
  80efe8:	140d803a 	cmpltu	r6,r2,r16
  80efec:	88c7883a 	add	r3,r17,r3
  80eff0:	30cd883a 	add	r6,r6,r3
  80eff4:	1029883a 	mov	r20,r2
  80eff8:	302b883a 	mov	r21,r6
  80effc:	da801317 	ldw	r10,76(sp)
  80f000:	dac01417 	ldw	r11,80(sp)
  80f004:	db001517 	ldw	r12,84(sp)
  80f008:	db401617 	ldw	r13,88(sp)
  80f00c:	3440612e 	bgeu	r6,r17,80f194 <__muldf3+0x318>
  80f010:	0009883a 	mov	r4,zero
  80f014:	5105883a 	add	r2,r10,r4
  80f018:	128d803a 	cmpltu	r6,r2,r10
  80f01c:	5d07883a 	add	r3,r11,r20
  80f020:	30cd883a 	add	r6,r6,r3
  80f024:	0021883a 	mov	r16,zero
  80f028:	04400044 	movi	r17,1
  80f02c:	1025883a 	mov	r18,r2
  80f030:	3027883a 	mov	r19,r6
  80f034:	32c06236 	bltu	r6,r11,80f1c0 <__muldf3+0x344>
  80f038:	59807a26 	beq	r11,r6,80f224 <__muldf3+0x3a8>
  80f03c:	680b883a 	mov	r5,r13
  80f040:	b80f883a 	mov	r7,r23
  80f044:	6009883a 	mov	r4,r12
  80f048:	b00d883a 	mov	r6,r22
  80f04c:	080db480 	call	80db48 <__muldi3>
  80f050:	1009883a 	mov	r4,r2
  80f054:	000f883a 	mov	r7,zero
  80f058:	1545883a 	add	r2,r2,r21
  80f05c:	1111803a 	cmpltu	r8,r2,r4
  80f060:	19c7883a 	add	r3,r3,r7
  80f064:	40c7883a 	add	r3,r8,r3
  80f068:	88cb883a 	add	r5,r17,r3
  80f06c:	d8c00617 	ldw	r3,24(sp)
  80f070:	8089883a 	add	r4,r16,r2
  80f074:	d8800b17 	ldw	r2,44(sp)
  80f078:	18c00104 	addi	r3,r3,4
  80f07c:	240d803a 	cmpltu	r6,r4,r16
  80f080:	10c7883a 	add	r3,r2,r3
  80f084:	2013883a 	mov	r9,r4
  80f088:	d8800a17 	ldw	r2,40(sp)
  80f08c:	d9000517 	ldw	r4,20(sp)
  80f090:	314d883a 	add	r6,r6,r5
  80f094:	3015883a 	mov	r10,r6
  80f098:	2088c03a 	cmpne	r4,r4,r2
  80f09c:	00880034 	movhi	r2,8192
  80f0a0:	10bfffc4 	addi	r2,r2,-1
  80f0a4:	d9000f15 	stw	r4,60(sp)
  80f0a8:	d8c01015 	stw	r3,64(sp)
  80f0ac:	1180162e 	bgeu	r2,r6,80f108 <__muldf3+0x28c>
  80f0b0:	1811883a 	mov	r8,r3
  80f0b4:	101f883a 	mov	r15,r2
  80f0b8:	980497fa 	slli	r2,r19,31
  80f0bc:	9016d07a 	srli	r11,r18,1
  80f0c0:	500697fa 	slli	r3,r10,31
  80f0c4:	480cd07a 	srli	r6,r9,1
  80f0c8:	500ed07a 	srli	r7,r10,1
  80f0cc:	12d6b03a 	or	r11,r2,r11
  80f0d0:	00800044 	movi	r2,1
  80f0d4:	198cb03a 	or	r6,r3,r6
  80f0d8:	4888703a 	and	r4,r9,r2
  80f0dc:	9818d07a 	srli	r12,r19,1
  80f0e0:	001b883a 	mov	r13,zero
  80f0e4:	03a00034 	movhi	r14,32768
  80f0e8:	3013883a 	mov	r9,r6
  80f0ec:	3815883a 	mov	r10,r7
  80f0f0:	4091883a 	add	r8,r8,r2
  80f0f4:	20000226 	beq	r4,zero,80f100 <__muldf3+0x284>
  80f0f8:	5b64b03a 	or	r18,r11,r13
  80f0fc:	63a6b03a 	or	r19,r12,r14
  80f100:	7abfed36 	bltu	r15,r10,80f0b8 <__muldf3+0x23c>
  80f104:	da001015 	stw	r8,64(sp)
  80f108:	00840034 	movhi	r2,4096
  80f10c:	10bfffc4 	addi	r2,r2,-1
  80f110:	12801436 	bltu	r2,r10,80f164 <__muldf3+0x2e8>
  80f114:	da001017 	ldw	r8,64(sp)
  80f118:	101f883a 	mov	r15,r2
  80f11c:	4a45883a 	add	r2,r9,r9
  80f120:	124d803a 	cmpltu	r6,r2,r9
  80f124:	5287883a 	add	r3,r10,r10
  80f128:	9497883a 	add	r11,r18,r18
  80f12c:	5c8f803a 	cmpltu	r7,r11,r18
  80f130:	9cd9883a 	add	r12,r19,r19
  80f134:	01000044 	movi	r4,1
  80f138:	30cd883a 	add	r6,r6,r3
  80f13c:	3b0f883a 	add	r7,r7,r12
  80f140:	423fffc4 	addi	r8,r8,-1
  80f144:	1013883a 	mov	r9,r2
  80f148:	3015883a 	mov	r10,r6
  80f14c:	111ab03a 	or	r13,r2,r4
  80f150:	98003016 	blt	r19,zero,80f214 <__muldf3+0x398>
  80f154:	5825883a 	mov	r18,r11
  80f158:	3827883a 	mov	r19,r7
  80f15c:	7abfef2e 	bgeu	r15,r10,80f11c <__muldf3+0x2a0>
  80f160:	da001015 	stw	r8,64(sp)
  80f164:	00803fc4 	movi	r2,255
  80f168:	488e703a 	and	r7,r9,r2
  80f16c:	00802004 	movi	r2,128
  80f170:	0007883a 	mov	r3,zero
  80f174:	0011883a 	mov	r8,zero
  80f178:	38801826 	beq	r7,r2,80f1dc <__muldf3+0x360>
  80f17c:	008000c4 	movi	r2,3
  80f180:	d9000e04 	addi	r4,sp,56
  80f184:	da801215 	stw	r10,72(sp)
  80f188:	d8800e15 	stw	r2,56(sp)
  80f18c:	da401115 	stw	r9,68(sp)
  80f190:	003f6a06 	br	80ef3c <__muldf3+0xc0>
  80f194:	89802126 	beq	r17,r6,80f21c <__muldf3+0x3a0>
  80f198:	0009883a 	mov	r4,zero
  80f19c:	5105883a 	add	r2,r10,r4
  80f1a0:	128d803a 	cmpltu	r6,r2,r10
  80f1a4:	5d07883a 	add	r3,r11,r20
  80f1a8:	30cd883a 	add	r6,r6,r3
  80f1ac:	0021883a 	mov	r16,zero
  80f1b0:	0023883a 	mov	r17,zero
  80f1b4:	1025883a 	mov	r18,r2
  80f1b8:	3027883a 	mov	r19,r6
  80f1bc:	32ff9e2e 	bgeu	r6,r11,80f038 <__muldf3+0x1bc>
  80f1c0:	00800044 	movi	r2,1
  80f1c4:	8089883a 	add	r4,r16,r2
  80f1c8:	240d803a 	cmpltu	r6,r4,r16
  80f1cc:	344d883a 	add	r6,r6,r17
  80f1d0:	2021883a 	mov	r16,r4
  80f1d4:	3023883a 	mov	r17,r6
  80f1d8:	003f9806 	br	80f03c <__muldf3+0x1c0>
  80f1dc:	403fe71e 	bne	r8,zero,80f17c <__muldf3+0x300>
  80f1e0:	01004004 	movi	r4,256
  80f1e4:	4904703a 	and	r2,r9,r4
  80f1e8:	10c4b03a 	or	r2,r2,r3
  80f1ec:	103fe31e 	bne	r2,zero,80f17c <__muldf3+0x300>
  80f1f0:	94c4b03a 	or	r2,r18,r19
  80f1f4:	103fe126 	beq	r2,zero,80f17c <__muldf3+0x300>
  80f1f8:	49c5883a 	add	r2,r9,r7
  80f1fc:	1251803a 	cmpltu	r8,r2,r9
  80f200:	4291883a 	add	r8,r8,r10
  80f204:	013fc004 	movi	r4,-256
  80f208:	1112703a 	and	r9,r2,r4
  80f20c:	4015883a 	mov	r10,r8
  80f210:	003fda06 	br	80f17c <__muldf3+0x300>
  80f214:	6813883a 	mov	r9,r13
  80f218:	003fce06 	br	80f154 <__muldf3+0x2d8>
  80f21c:	143f7c36 	bltu	r2,r16,80f010 <__muldf3+0x194>
  80f220:	003fdd06 	br	80f198 <__muldf3+0x31c>
  80f224:	12bf852e 	bgeu	r2,r10,80f03c <__muldf3+0x1c0>
  80f228:	003fe506 	br	80f1c0 <__muldf3+0x344>
  80f22c:	00800084 	movi	r2,2
  80f230:	20bf351e 	bne	r4,r2,80ef08 <__muldf3+0x8c>
  80f234:	01002074 	movhi	r4,129
  80f238:	2114a004 	addi	r4,r4,21120
  80f23c:	003f3f06 	br	80ef3c <__muldf3+0xc0>

0080f240 <__divdf3>:
  80f240:	deffed04 	addi	sp,sp,-76
  80f244:	dcc01115 	stw	r19,68(sp)
  80f248:	dcc00404 	addi	r19,sp,16
  80f24c:	2011883a 	mov	r8,r4
  80f250:	2813883a 	mov	r9,r5
  80f254:	dc000e15 	stw	r16,56(sp)
  80f258:	d809883a 	mov	r4,sp
  80f25c:	980b883a 	mov	r5,r19
  80f260:	dc000904 	addi	r16,sp,36
  80f264:	dfc01215 	stw	ra,72(sp)
  80f268:	da400115 	stw	r9,4(sp)
  80f26c:	d9c00315 	stw	r7,12(sp)
  80f270:	da000015 	stw	r8,0(sp)
  80f274:	d9800215 	stw	r6,8(sp)
  80f278:	dc801015 	stw	r18,64(sp)
  80f27c:	dc400f15 	stw	r17,60(sp)
  80f280:	081021c0 	call	81021c <__unpack_d>
  80f284:	d9000204 	addi	r4,sp,8
  80f288:	800b883a 	mov	r5,r16
  80f28c:	081021c0 	call	81021c <__unpack_d>
  80f290:	d9000417 	ldw	r4,16(sp)
  80f294:	00800044 	movi	r2,1
  80f298:	11000b2e 	bgeu	r2,r4,80f2c8 <__divdf3+0x88>
  80f29c:	d9400917 	ldw	r5,36(sp)
  80f2a0:	1140762e 	bgeu	r2,r5,80f47c <__divdf3+0x23c>
  80f2a4:	d8800517 	ldw	r2,20(sp)
  80f2a8:	d8c00a17 	ldw	r3,40(sp)
  80f2ac:	01800104 	movi	r6,4
  80f2b0:	10c4f03a 	xor	r2,r2,r3
  80f2b4:	d8800515 	stw	r2,20(sp)
  80f2b8:	21800226 	beq	r4,r6,80f2c4 <__divdf3+0x84>
  80f2bc:	00800084 	movi	r2,2
  80f2c0:	2080141e 	bne	r4,r2,80f314 <__divdf3+0xd4>
  80f2c4:	29000926 	beq	r5,r4,80f2ec <__divdf3+0xac>
  80f2c8:	9809883a 	mov	r4,r19
  80f2cc:	080ff080 	call	80ff08 <__pack_d>
  80f2d0:	dfc01217 	ldw	ra,72(sp)
  80f2d4:	dcc01117 	ldw	r19,68(sp)
  80f2d8:	dc801017 	ldw	r18,64(sp)
  80f2dc:	dc400f17 	ldw	r17,60(sp)
  80f2e0:	dc000e17 	ldw	r16,56(sp)
  80f2e4:	dec01304 	addi	sp,sp,76
  80f2e8:	f800283a 	ret
  80f2ec:	01002074 	movhi	r4,129
  80f2f0:	2114a004 	addi	r4,r4,21120
  80f2f4:	080ff080 	call	80ff08 <__pack_d>
  80f2f8:	dfc01217 	ldw	ra,72(sp)
  80f2fc:	dcc01117 	ldw	r19,68(sp)
  80f300:	dc801017 	ldw	r18,64(sp)
  80f304:	dc400f17 	ldw	r17,60(sp)
  80f308:	dc000e17 	ldw	r16,56(sp)
  80f30c:	dec01304 	addi	sp,sp,76
  80f310:	f800283a 	ret
  80f314:	29805b26 	beq	r5,r6,80f484 <__divdf3+0x244>
  80f318:	28802d26 	beq	r5,r2,80f3d0 <__divdf3+0x190>
  80f31c:	d8c00617 	ldw	r3,24(sp)
  80f320:	d8800b17 	ldw	r2,44(sp)
  80f324:	d9c00817 	ldw	r7,32(sp)
  80f328:	dc400d17 	ldw	r17,52(sp)
  80f32c:	188bc83a 	sub	r5,r3,r2
  80f330:	d9800717 	ldw	r6,28(sp)
  80f334:	dc000c17 	ldw	r16,48(sp)
  80f338:	d9400615 	stw	r5,24(sp)
  80f33c:	3c403836 	bltu	r7,r17,80f420 <__divdf3+0x1e0>
  80f340:	89c03626 	beq	r17,r7,80f41c <__divdf3+0x1dc>
  80f344:	0015883a 	mov	r10,zero
  80f348:	001d883a 	mov	r14,zero
  80f34c:	02c40034 	movhi	r11,4096
  80f350:	001f883a 	mov	r15,zero
  80f354:	003f883a 	mov	ra,zero
  80f358:	04800f44 	movi	r18,61
  80f35c:	00000f06 	br	80f39c <__divdf3+0x15c>
  80f360:	601d883a 	mov	r14,r12
  80f364:	681f883a 	mov	r15,r13
  80f368:	400d883a 	mov	r6,r8
  80f36c:	100f883a 	mov	r7,r2
  80f370:	3191883a 	add	r8,r6,r6
  80f374:	5808d07a 	srli	r4,r11,1
  80f378:	4185803a 	cmpltu	r2,r8,r6
  80f37c:	39d3883a 	add	r9,r7,r7
  80f380:	28c6b03a 	or	r3,r5,r3
  80f384:	1245883a 	add	r2,r2,r9
  80f388:	1815883a 	mov	r10,r3
  80f38c:	2017883a 	mov	r11,r4
  80f390:	400d883a 	mov	r6,r8
  80f394:	100f883a 	mov	r7,r2
  80f398:	fc801726 	beq	ra,r18,80f3f8 <__divdf3+0x1b8>
  80f39c:	580a97fa 	slli	r5,r11,31
  80f3a0:	5006d07a 	srli	r3,r10,1
  80f3a4:	ffc00044 	addi	ra,ra,1
  80f3a8:	3c7ff136 	bltu	r7,r17,80f370 <__divdf3+0x130>
  80f3ac:	3411c83a 	sub	r8,r6,r16
  80f3b0:	3205803a 	cmpltu	r2,r6,r8
  80f3b4:	3c53c83a 	sub	r9,r7,r17
  80f3b8:	7298b03a 	or	r12,r14,r10
  80f3bc:	7adab03a 	or	r13,r15,r11
  80f3c0:	4885c83a 	sub	r2,r9,r2
  80f3c4:	89ffe61e 	bne	r17,r7,80f360 <__divdf3+0x120>
  80f3c8:	343fe936 	bltu	r6,r16,80f370 <__divdf3+0x130>
  80f3cc:	003fe406 	br	80f360 <__divdf3+0x120>
  80f3d0:	9809883a 	mov	r4,r19
  80f3d4:	d9800415 	stw	r6,16(sp)
  80f3d8:	080ff080 	call	80ff08 <__pack_d>
  80f3dc:	dfc01217 	ldw	ra,72(sp)
  80f3e0:	dcc01117 	ldw	r19,68(sp)
  80f3e4:	dc801017 	ldw	r18,64(sp)
  80f3e8:	dc400f17 	ldw	r17,60(sp)
  80f3ec:	dc000e17 	ldw	r16,56(sp)
  80f3f0:	dec01304 	addi	sp,sp,76
  80f3f4:	f800283a 	ret
  80f3f8:	00803fc4 	movi	r2,255
  80f3fc:	7090703a 	and	r8,r14,r2
  80f400:	00802004 	movi	r2,128
  80f404:	0007883a 	mov	r3,zero
  80f408:	0013883a 	mov	r9,zero
  80f40c:	40800d26 	beq	r8,r2,80f444 <__divdf3+0x204>
  80f410:	dbc00815 	stw	r15,32(sp)
  80f414:	db800715 	stw	r14,28(sp)
  80f418:	003fab06 	br	80f2c8 <__divdf3+0x88>
  80f41c:	343fc92e 	bgeu	r6,r16,80f344 <__divdf3+0x104>
  80f420:	3185883a 	add	r2,r6,r6
  80f424:	1189803a 	cmpltu	r4,r2,r6
  80f428:	39c7883a 	add	r3,r7,r7
  80f42c:	20c9883a 	add	r4,r4,r3
  80f430:	297fffc4 	addi	r5,r5,-1
  80f434:	100d883a 	mov	r6,r2
  80f438:	200f883a 	mov	r7,r4
  80f43c:	d9400615 	stw	r5,24(sp)
  80f440:	003fc006 	br	80f344 <__divdf3+0x104>
  80f444:	483ff21e 	bne	r9,zero,80f410 <__divdf3+0x1d0>
  80f448:	01004004 	movi	r4,256
  80f44c:	7104703a 	and	r2,r14,r4
  80f450:	10c4b03a 	or	r2,r2,r3
  80f454:	103fee1e 	bne	r2,zero,80f410 <__divdf3+0x1d0>
  80f458:	31c4b03a 	or	r2,r6,r7
  80f45c:	103fec26 	beq	r2,zero,80f410 <__divdf3+0x1d0>
  80f460:	7205883a 	add	r2,r14,r8
  80f464:	1391803a 	cmpltu	r8,r2,r14
  80f468:	43d1883a 	add	r8,r8,r15
  80f46c:	013fc004 	movi	r4,-256
  80f470:	111c703a 	and	r14,r2,r4
  80f474:	401f883a 	mov	r15,r8
  80f478:	003fe506 	br	80f410 <__divdf3+0x1d0>
  80f47c:	8009883a 	mov	r4,r16
  80f480:	003f9206 	br	80f2cc <__divdf3+0x8c>
  80f484:	9809883a 	mov	r4,r19
  80f488:	d8000715 	stw	zero,28(sp)
  80f48c:	d8000815 	stw	zero,32(sp)
  80f490:	d8000615 	stw	zero,24(sp)
  80f494:	003f8d06 	br	80f2cc <__divdf3+0x8c>

0080f498 <__eqdf2>:
  80f498:	deffef04 	addi	sp,sp,-68
  80f49c:	dc400f15 	stw	r17,60(sp)
  80f4a0:	dc400404 	addi	r17,sp,16
  80f4a4:	2005883a 	mov	r2,r4
  80f4a8:	2807883a 	mov	r3,r5
  80f4ac:	dc000e15 	stw	r16,56(sp)
  80f4b0:	d809883a 	mov	r4,sp
  80f4b4:	880b883a 	mov	r5,r17
  80f4b8:	dc000904 	addi	r16,sp,36
  80f4bc:	d8c00115 	stw	r3,4(sp)
  80f4c0:	d8800015 	stw	r2,0(sp)
  80f4c4:	d9800215 	stw	r6,8(sp)
  80f4c8:	dfc01015 	stw	ra,64(sp)
  80f4cc:	d9c00315 	stw	r7,12(sp)
  80f4d0:	081021c0 	call	81021c <__unpack_d>
  80f4d4:	d9000204 	addi	r4,sp,8
  80f4d8:	800b883a 	mov	r5,r16
  80f4dc:	081021c0 	call	81021c <__unpack_d>
  80f4e0:	d8800417 	ldw	r2,16(sp)
  80f4e4:	00c00044 	movi	r3,1
  80f4e8:	180d883a 	mov	r6,r3
  80f4ec:	1880062e 	bgeu	r3,r2,80f508 <__eqdf2+0x70>
  80f4f0:	d8800917 	ldw	r2,36(sp)
  80f4f4:	8809883a 	mov	r4,r17
  80f4f8:	800b883a 	mov	r5,r16
  80f4fc:	1880022e 	bgeu	r3,r2,80f508 <__eqdf2+0x70>
  80f500:	08103540 	call	810354 <__fpcmp_parts_d>
  80f504:	100d883a 	mov	r6,r2
  80f508:	3005883a 	mov	r2,r6
  80f50c:	dfc01017 	ldw	ra,64(sp)
  80f510:	dc400f17 	ldw	r17,60(sp)
  80f514:	dc000e17 	ldw	r16,56(sp)
  80f518:	dec01104 	addi	sp,sp,68
  80f51c:	f800283a 	ret

0080f520 <__nedf2>:
  80f520:	deffef04 	addi	sp,sp,-68
  80f524:	dc400f15 	stw	r17,60(sp)
  80f528:	dc400404 	addi	r17,sp,16
  80f52c:	2005883a 	mov	r2,r4
  80f530:	2807883a 	mov	r3,r5
  80f534:	dc000e15 	stw	r16,56(sp)
  80f538:	d809883a 	mov	r4,sp
  80f53c:	880b883a 	mov	r5,r17
  80f540:	dc000904 	addi	r16,sp,36
  80f544:	d8c00115 	stw	r3,4(sp)
  80f548:	d8800015 	stw	r2,0(sp)
  80f54c:	d9800215 	stw	r6,8(sp)
  80f550:	dfc01015 	stw	ra,64(sp)
  80f554:	d9c00315 	stw	r7,12(sp)
  80f558:	081021c0 	call	81021c <__unpack_d>
  80f55c:	d9000204 	addi	r4,sp,8
  80f560:	800b883a 	mov	r5,r16
  80f564:	081021c0 	call	81021c <__unpack_d>
  80f568:	d8800417 	ldw	r2,16(sp)
  80f56c:	00c00044 	movi	r3,1
  80f570:	180d883a 	mov	r6,r3
  80f574:	1880062e 	bgeu	r3,r2,80f590 <__nedf2+0x70>
  80f578:	d8800917 	ldw	r2,36(sp)
  80f57c:	8809883a 	mov	r4,r17
  80f580:	800b883a 	mov	r5,r16
  80f584:	1880022e 	bgeu	r3,r2,80f590 <__nedf2+0x70>
  80f588:	08103540 	call	810354 <__fpcmp_parts_d>
  80f58c:	100d883a 	mov	r6,r2
  80f590:	3005883a 	mov	r2,r6
  80f594:	dfc01017 	ldw	ra,64(sp)
  80f598:	dc400f17 	ldw	r17,60(sp)
  80f59c:	dc000e17 	ldw	r16,56(sp)
  80f5a0:	dec01104 	addi	sp,sp,68
  80f5a4:	f800283a 	ret

0080f5a8 <__gtdf2>:
  80f5a8:	deffef04 	addi	sp,sp,-68
  80f5ac:	dc400f15 	stw	r17,60(sp)
  80f5b0:	dc400404 	addi	r17,sp,16
  80f5b4:	2005883a 	mov	r2,r4
  80f5b8:	2807883a 	mov	r3,r5
  80f5bc:	dc000e15 	stw	r16,56(sp)
  80f5c0:	d809883a 	mov	r4,sp
  80f5c4:	880b883a 	mov	r5,r17
  80f5c8:	dc000904 	addi	r16,sp,36
  80f5cc:	d8c00115 	stw	r3,4(sp)
  80f5d0:	d8800015 	stw	r2,0(sp)
  80f5d4:	d9800215 	stw	r6,8(sp)
  80f5d8:	dfc01015 	stw	ra,64(sp)
  80f5dc:	d9c00315 	stw	r7,12(sp)
  80f5e0:	081021c0 	call	81021c <__unpack_d>
  80f5e4:	d9000204 	addi	r4,sp,8
  80f5e8:	800b883a 	mov	r5,r16
  80f5ec:	081021c0 	call	81021c <__unpack_d>
  80f5f0:	d8800417 	ldw	r2,16(sp)
  80f5f4:	00c00044 	movi	r3,1
  80f5f8:	01bfffc4 	movi	r6,-1
  80f5fc:	1880062e 	bgeu	r3,r2,80f618 <__gtdf2+0x70>
  80f600:	d8800917 	ldw	r2,36(sp)
  80f604:	8809883a 	mov	r4,r17
  80f608:	800b883a 	mov	r5,r16
  80f60c:	1880022e 	bgeu	r3,r2,80f618 <__gtdf2+0x70>
  80f610:	08103540 	call	810354 <__fpcmp_parts_d>
  80f614:	100d883a 	mov	r6,r2
  80f618:	3005883a 	mov	r2,r6
  80f61c:	dfc01017 	ldw	ra,64(sp)
  80f620:	dc400f17 	ldw	r17,60(sp)
  80f624:	dc000e17 	ldw	r16,56(sp)
  80f628:	dec01104 	addi	sp,sp,68
  80f62c:	f800283a 	ret

0080f630 <__gedf2>:
  80f630:	deffef04 	addi	sp,sp,-68
  80f634:	dc400f15 	stw	r17,60(sp)
  80f638:	dc400404 	addi	r17,sp,16
  80f63c:	2005883a 	mov	r2,r4
  80f640:	2807883a 	mov	r3,r5
  80f644:	dc000e15 	stw	r16,56(sp)
  80f648:	d809883a 	mov	r4,sp
  80f64c:	880b883a 	mov	r5,r17
  80f650:	dc000904 	addi	r16,sp,36
  80f654:	d8c00115 	stw	r3,4(sp)
  80f658:	d8800015 	stw	r2,0(sp)
  80f65c:	d9800215 	stw	r6,8(sp)
  80f660:	dfc01015 	stw	ra,64(sp)
  80f664:	d9c00315 	stw	r7,12(sp)
  80f668:	081021c0 	call	81021c <__unpack_d>
  80f66c:	d9000204 	addi	r4,sp,8
  80f670:	800b883a 	mov	r5,r16
  80f674:	081021c0 	call	81021c <__unpack_d>
  80f678:	d8800417 	ldw	r2,16(sp)
  80f67c:	00c00044 	movi	r3,1
  80f680:	01bfffc4 	movi	r6,-1
  80f684:	1880062e 	bgeu	r3,r2,80f6a0 <__gedf2+0x70>
  80f688:	d8800917 	ldw	r2,36(sp)
  80f68c:	8809883a 	mov	r4,r17
  80f690:	800b883a 	mov	r5,r16
  80f694:	1880022e 	bgeu	r3,r2,80f6a0 <__gedf2+0x70>
  80f698:	08103540 	call	810354 <__fpcmp_parts_d>
  80f69c:	100d883a 	mov	r6,r2
  80f6a0:	3005883a 	mov	r2,r6
  80f6a4:	dfc01017 	ldw	ra,64(sp)
  80f6a8:	dc400f17 	ldw	r17,60(sp)
  80f6ac:	dc000e17 	ldw	r16,56(sp)
  80f6b0:	dec01104 	addi	sp,sp,68
  80f6b4:	f800283a 	ret

0080f6b8 <__ltdf2>:
  80f6b8:	deffef04 	addi	sp,sp,-68
  80f6bc:	dc400f15 	stw	r17,60(sp)
  80f6c0:	dc400404 	addi	r17,sp,16
  80f6c4:	2005883a 	mov	r2,r4
  80f6c8:	2807883a 	mov	r3,r5
  80f6cc:	dc000e15 	stw	r16,56(sp)
  80f6d0:	d809883a 	mov	r4,sp
  80f6d4:	880b883a 	mov	r5,r17
  80f6d8:	dc000904 	addi	r16,sp,36
  80f6dc:	d8c00115 	stw	r3,4(sp)
  80f6e0:	d8800015 	stw	r2,0(sp)
  80f6e4:	d9800215 	stw	r6,8(sp)
  80f6e8:	dfc01015 	stw	ra,64(sp)
  80f6ec:	d9c00315 	stw	r7,12(sp)
  80f6f0:	081021c0 	call	81021c <__unpack_d>
  80f6f4:	d9000204 	addi	r4,sp,8
  80f6f8:	800b883a 	mov	r5,r16
  80f6fc:	081021c0 	call	81021c <__unpack_d>
  80f700:	d8800417 	ldw	r2,16(sp)
  80f704:	00c00044 	movi	r3,1
  80f708:	180d883a 	mov	r6,r3
  80f70c:	1880062e 	bgeu	r3,r2,80f728 <__ltdf2+0x70>
  80f710:	d8800917 	ldw	r2,36(sp)
  80f714:	8809883a 	mov	r4,r17
  80f718:	800b883a 	mov	r5,r16
  80f71c:	1880022e 	bgeu	r3,r2,80f728 <__ltdf2+0x70>
  80f720:	08103540 	call	810354 <__fpcmp_parts_d>
  80f724:	100d883a 	mov	r6,r2
  80f728:	3005883a 	mov	r2,r6
  80f72c:	dfc01017 	ldw	ra,64(sp)
  80f730:	dc400f17 	ldw	r17,60(sp)
  80f734:	dc000e17 	ldw	r16,56(sp)
  80f738:	dec01104 	addi	sp,sp,68
  80f73c:	f800283a 	ret

0080f740 <__ledf2>:
  80f740:	deffef04 	addi	sp,sp,-68
  80f744:	dc400f15 	stw	r17,60(sp)
  80f748:	dc400404 	addi	r17,sp,16
  80f74c:	2005883a 	mov	r2,r4
  80f750:	2807883a 	mov	r3,r5
  80f754:	dc000e15 	stw	r16,56(sp)
  80f758:	d809883a 	mov	r4,sp
  80f75c:	880b883a 	mov	r5,r17
  80f760:	dc000904 	addi	r16,sp,36
  80f764:	d8c00115 	stw	r3,4(sp)
  80f768:	d8800015 	stw	r2,0(sp)
  80f76c:	d9800215 	stw	r6,8(sp)
  80f770:	dfc01015 	stw	ra,64(sp)
  80f774:	d9c00315 	stw	r7,12(sp)
  80f778:	081021c0 	call	81021c <__unpack_d>
  80f77c:	d9000204 	addi	r4,sp,8
  80f780:	800b883a 	mov	r5,r16
  80f784:	081021c0 	call	81021c <__unpack_d>
  80f788:	d8800417 	ldw	r2,16(sp)
  80f78c:	00c00044 	movi	r3,1
  80f790:	180d883a 	mov	r6,r3
  80f794:	1880062e 	bgeu	r3,r2,80f7b0 <__ledf2+0x70>
  80f798:	d8800917 	ldw	r2,36(sp)
  80f79c:	8809883a 	mov	r4,r17
  80f7a0:	800b883a 	mov	r5,r16
  80f7a4:	1880022e 	bgeu	r3,r2,80f7b0 <__ledf2+0x70>
  80f7a8:	08103540 	call	810354 <__fpcmp_parts_d>
  80f7ac:	100d883a 	mov	r6,r2
  80f7b0:	3005883a 	mov	r2,r6
  80f7b4:	dfc01017 	ldw	ra,64(sp)
  80f7b8:	dc400f17 	ldw	r17,60(sp)
  80f7bc:	dc000e17 	ldw	r16,56(sp)
  80f7c0:	dec01104 	addi	sp,sp,68
  80f7c4:	f800283a 	ret

0080f7c8 <__floatsidf>:
  80f7c8:	2006d7fa 	srli	r3,r4,31
  80f7cc:	defff604 	addi	sp,sp,-40
  80f7d0:	008000c4 	movi	r2,3
  80f7d4:	dfc00915 	stw	ra,36(sp)
  80f7d8:	dcc00815 	stw	r19,32(sp)
  80f7dc:	dc800715 	stw	r18,28(sp)
  80f7e0:	dc400615 	stw	r17,24(sp)
  80f7e4:	dc000515 	stw	r16,20(sp)
  80f7e8:	d8800015 	stw	r2,0(sp)
  80f7ec:	d8c00115 	stw	r3,4(sp)
  80f7f0:	20000f1e 	bne	r4,zero,80f830 <__floatsidf+0x68>
  80f7f4:	00800084 	movi	r2,2
  80f7f8:	d8800015 	stw	r2,0(sp)
  80f7fc:	d809883a 	mov	r4,sp
  80f800:	080ff080 	call	80ff08 <__pack_d>
  80f804:	1009883a 	mov	r4,r2
  80f808:	180b883a 	mov	r5,r3
  80f80c:	2005883a 	mov	r2,r4
  80f810:	2807883a 	mov	r3,r5
  80f814:	dfc00917 	ldw	ra,36(sp)
  80f818:	dcc00817 	ldw	r19,32(sp)
  80f81c:	dc800717 	ldw	r18,28(sp)
  80f820:	dc400617 	ldw	r17,24(sp)
  80f824:	dc000517 	ldw	r16,20(sp)
  80f828:	dec00a04 	addi	sp,sp,40
  80f82c:	f800283a 	ret
  80f830:	00800f04 	movi	r2,60
  80f834:	1807003a 	cmpeq	r3,r3,zero
  80f838:	d8800215 	stw	r2,8(sp)
  80f83c:	18001126 	beq	r3,zero,80f884 <__floatsidf+0xbc>
  80f840:	0027883a 	mov	r19,zero
  80f844:	2025883a 	mov	r18,r4
  80f848:	d9000315 	stw	r4,12(sp)
  80f84c:	dcc00415 	stw	r19,16(sp)
  80f850:	080fcec0 	call	80fcec <__clzsi2>
  80f854:	11000744 	addi	r4,r2,29
  80f858:	013fe80e 	bge	zero,r4,80f7fc <__floatsidf+0x34>
  80f85c:	10bfff44 	addi	r2,r2,-3
  80f860:	10000c16 	blt	r2,zero,80f894 <__floatsidf+0xcc>
  80f864:	90a2983a 	sll	r17,r18,r2
  80f868:	0021883a 	mov	r16,zero
  80f86c:	d8800217 	ldw	r2,8(sp)
  80f870:	dc400415 	stw	r17,16(sp)
  80f874:	dc000315 	stw	r16,12(sp)
  80f878:	1105c83a 	sub	r2,r2,r4
  80f87c:	d8800215 	stw	r2,8(sp)
  80f880:	003fde06 	br	80f7fc <__floatsidf+0x34>
  80f884:	00a00034 	movhi	r2,32768
  80f888:	20800a26 	beq	r4,r2,80f8b4 <__floatsidf+0xec>
  80f88c:	0109c83a 	sub	r4,zero,r4
  80f890:	003feb06 	br	80f840 <__floatsidf+0x78>
  80f894:	9006d07a 	srli	r3,r18,1
  80f898:	008007c4 	movi	r2,31
  80f89c:	1105c83a 	sub	r2,r2,r4
  80f8a0:	1886d83a 	srl	r3,r3,r2
  80f8a4:	9922983a 	sll	r17,r19,r4
  80f8a8:	9120983a 	sll	r16,r18,r4
  80f8ac:	1c62b03a 	or	r17,r3,r17
  80f8b0:	003fee06 	br	80f86c <__floatsidf+0xa4>
  80f8b4:	0009883a 	mov	r4,zero
  80f8b8:	01707834 	movhi	r5,49632
  80f8bc:	003fd306 	br	80f80c <__floatsidf+0x44>

0080f8c0 <__fixdfsi>:
  80f8c0:	defff804 	addi	sp,sp,-32
  80f8c4:	2005883a 	mov	r2,r4
  80f8c8:	2807883a 	mov	r3,r5
  80f8cc:	d809883a 	mov	r4,sp
  80f8d0:	d9400204 	addi	r5,sp,8
  80f8d4:	d8c00115 	stw	r3,4(sp)
  80f8d8:	d8800015 	stw	r2,0(sp)
  80f8dc:	dfc00715 	stw	ra,28(sp)
  80f8e0:	081021c0 	call	81021c <__unpack_d>
  80f8e4:	d8c00217 	ldw	r3,8(sp)
  80f8e8:	00800084 	movi	r2,2
  80f8ec:	1880051e 	bne	r3,r2,80f904 <__fixdfsi+0x44>
  80f8f0:	0007883a 	mov	r3,zero
  80f8f4:	1805883a 	mov	r2,r3
  80f8f8:	dfc00717 	ldw	ra,28(sp)
  80f8fc:	dec00804 	addi	sp,sp,32
  80f900:	f800283a 	ret
  80f904:	00800044 	movi	r2,1
  80f908:	10fff92e 	bgeu	r2,r3,80f8f0 <__fixdfsi+0x30>
  80f90c:	00800104 	movi	r2,4
  80f910:	18800426 	beq	r3,r2,80f924 <__fixdfsi+0x64>
  80f914:	d8c00417 	ldw	r3,16(sp)
  80f918:	183ff516 	blt	r3,zero,80f8f0 <__fixdfsi+0x30>
  80f91c:	00800784 	movi	r2,30
  80f920:	10c0080e 	bge	r2,r3,80f944 <__fixdfsi+0x84>
  80f924:	d8800317 	ldw	r2,12(sp)
  80f928:	1000121e 	bne	r2,zero,80f974 <__fixdfsi+0xb4>
  80f92c:	00e00034 	movhi	r3,32768
  80f930:	18ffffc4 	addi	r3,r3,-1
  80f934:	1805883a 	mov	r2,r3
  80f938:	dfc00717 	ldw	ra,28(sp)
  80f93c:	dec00804 	addi	sp,sp,32
  80f940:	f800283a 	ret
  80f944:	00800f04 	movi	r2,60
  80f948:	10d1c83a 	sub	r8,r2,r3
  80f94c:	40bff804 	addi	r2,r8,-32
  80f950:	d9800517 	ldw	r6,20(sp)
  80f954:	d9c00617 	ldw	r7,24(sp)
  80f958:	10000816 	blt	r2,zero,80f97c <__fixdfsi+0xbc>
  80f95c:	3888d83a 	srl	r4,r7,r2
  80f960:	d8800317 	ldw	r2,12(sp)
  80f964:	2007883a 	mov	r3,r4
  80f968:	103fe226 	beq	r2,zero,80f8f4 <__fixdfsi+0x34>
  80f96c:	0107c83a 	sub	r3,zero,r4
  80f970:	003fe006 	br	80f8f4 <__fixdfsi+0x34>
  80f974:	00e00034 	movhi	r3,32768
  80f978:	003fde06 	br	80f8f4 <__fixdfsi+0x34>
  80f97c:	39c7883a 	add	r3,r7,r7
  80f980:	008007c4 	movi	r2,31
  80f984:	1205c83a 	sub	r2,r2,r8
  80f988:	1886983a 	sll	r3,r3,r2
  80f98c:	3208d83a 	srl	r4,r6,r8
  80f990:	1908b03a 	or	r4,r3,r4
  80f994:	003ff206 	br	80f960 <__fixdfsi+0xa0>

0080f998 <__truncdfsf2>:
  80f998:	defff804 	addi	sp,sp,-32
  80f99c:	2005883a 	mov	r2,r4
  80f9a0:	2807883a 	mov	r3,r5
  80f9a4:	d809883a 	mov	r4,sp
  80f9a8:	d9400204 	addi	r5,sp,8
  80f9ac:	d8c00115 	stw	r3,4(sp)
  80f9b0:	d8800015 	stw	r2,0(sp)
  80f9b4:	dfc00715 	stw	ra,28(sp)
  80f9b8:	081021c0 	call	81021c <__unpack_d>
  80f9bc:	d9c00517 	ldw	r7,20(sp)
  80f9c0:	da000617 	ldw	r8,24(sp)
  80f9c4:	02d00034 	movhi	r11,16384
  80f9c8:	5affffc4 	addi	r11,r11,-1
  80f9cc:	3812d7ba 	srli	r9,r7,30
  80f9d0:	401a90ba 	slli	r13,r8,2
  80f9d4:	3ac4703a 	and	r2,r7,r11
  80f9d8:	0007883a 	mov	r3,zero
  80f9dc:	6a52b03a 	or	r9,r13,r9
  80f9e0:	10c4b03a 	or	r2,r2,r3
  80f9e4:	d9000217 	ldw	r4,8(sp)
  80f9e8:	d9400317 	ldw	r5,12(sp)
  80f9ec:	d9800417 	ldw	r6,16(sp)
  80f9f0:	480f883a 	mov	r7,r9
  80f9f4:	10000126 	beq	r2,zero,80f9fc <__truncdfsf2+0x64>
  80f9f8:	49c00054 	ori	r7,r9,1
  80f9fc:	080fedc0 	call	80fedc <__make_fp>
  80fa00:	dfc00717 	ldw	ra,28(sp)
  80fa04:	dec00804 	addi	sp,sp,32
  80fa08:	f800283a 	ret

0080fa0c <__floatunsidf>:
  80fa0c:	defff204 	addi	sp,sp,-56
  80fa10:	dfc00d15 	stw	ra,52(sp)
  80fa14:	ddc00c15 	stw	r23,48(sp)
  80fa18:	dd800b15 	stw	r22,44(sp)
  80fa1c:	dd400a15 	stw	r21,40(sp)
  80fa20:	dd000915 	stw	r20,36(sp)
  80fa24:	dcc00815 	stw	r19,32(sp)
  80fa28:	dc800715 	stw	r18,28(sp)
  80fa2c:	dc400615 	stw	r17,24(sp)
  80fa30:	dc000515 	stw	r16,20(sp)
  80fa34:	d8000115 	stw	zero,4(sp)
  80fa38:	20000f1e 	bne	r4,zero,80fa78 <__floatunsidf+0x6c>
  80fa3c:	00800084 	movi	r2,2
  80fa40:	d8800015 	stw	r2,0(sp)
  80fa44:	d809883a 	mov	r4,sp
  80fa48:	080ff080 	call	80ff08 <__pack_d>
  80fa4c:	dfc00d17 	ldw	ra,52(sp)
  80fa50:	ddc00c17 	ldw	r23,48(sp)
  80fa54:	dd800b17 	ldw	r22,44(sp)
  80fa58:	dd400a17 	ldw	r21,40(sp)
  80fa5c:	dd000917 	ldw	r20,36(sp)
  80fa60:	dcc00817 	ldw	r19,32(sp)
  80fa64:	dc800717 	ldw	r18,28(sp)
  80fa68:	dc400617 	ldw	r17,24(sp)
  80fa6c:	dc000517 	ldw	r16,20(sp)
  80fa70:	dec00e04 	addi	sp,sp,56
  80fa74:	f800283a 	ret
  80fa78:	008000c4 	movi	r2,3
  80fa7c:	00c00f04 	movi	r3,60
  80fa80:	002f883a 	mov	r23,zero
  80fa84:	202d883a 	mov	r22,r4
  80fa88:	d8800015 	stw	r2,0(sp)
  80fa8c:	d8c00215 	stw	r3,8(sp)
  80fa90:	d9000315 	stw	r4,12(sp)
  80fa94:	ddc00415 	stw	r23,16(sp)
  80fa98:	080fcec0 	call	80fcec <__clzsi2>
  80fa9c:	12400744 	addi	r9,r2,29
  80faa0:	48000b16 	blt	r9,zero,80fad0 <__floatunsidf+0xc4>
  80faa4:	483fe726 	beq	r9,zero,80fa44 <__floatunsidf+0x38>
  80faa8:	10bfff44 	addi	r2,r2,-3
  80faac:	10002e16 	blt	r2,zero,80fb68 <__floatunsidf+0x15c>
  80fab0:	b0a2983a 	sll	r17,r22,r2
  80fab4:	0021883a 	mov	r16,zero
  80fab8:	d8800217 	ldw	r2,8(sp)
  80fabc:	dc400415 	stw	r17,16(sp)
  80fac0:	dc000315 	stw	r16,12(sp)
  80fac4:	1245c83a 	sub	r2,r2,r9
  80fac8:	d8800215 	stw	r2,8(sp)
  80facc:	003fdd06 	br	80fa44 <__floatunsidf+0x38>
  80fad0:	0255c83a 	sub	r10,zero,r9
  80fad4:	51bff804 	addi	r6,r10,-32
  80fad8:	30001b16 	blt	r6,zero,80fb48 <__floatunsidf+0x13c>
  80fadc:	b9a8d83a 	srl	r20,r23,r6
  80fae0:	002b883a 	mov	r21,zero
  80fae4:	000f883a 	mov	r7,zero
  80fae8:	01000044 	movi	r4,1
  80faec:	0011883a 	mov	r8,zero
  80faf0:	30002516 	blt	r6,zero,80fb88 <__floatunsidf+0x17c>
  80faf4:	21a6983a 	sll	r19,r4,r6
  80faf8:	0025883a 	mov	r18,zero
  80fafc:	00bfffc4 	movi	r2,-1
  80fb00:	9089883a 	add	r4,r18,r2
  80fb04:	988b883a 	add	r5,r19,r2
  80fb08:	248d803a 	cmpltu	r6,r4,r18
  80fb0c:	314b883a 	add	r5,r6,r5
  80fb10:	b104703a 	and	r2,r22,r4
  80fb14:	b946703a 	and	r3,r23,r5
  80fb18:	10c4b03a 	or	r2,r2,r3
  80fb1c:	10000226 	beq	r2,zero,80fb28 <__floatunsidf+0x11c>
  80fb20:	01c00044 	movi	r7,1
  80fb24:	0011883a 	mov	r8,zero
  80fb28:	d9000217 	ldw	r4,8(sp)
  80fb2c:	a1c4b03a 	or	r2,r20,r7
  80fb30:	aa06b03a 	or	r3,r21,r8
  80fb34:	2249c83a 	sub	r4,r4,r9
  80fb38:	d8c00415 	stw	r3,16(sp)
  80fb3c:	d9000215 	stw	r4,8(sp)
  80fb40:	d8800315 	stw	r2,12(sp)
  80fb44:	003fbf06 	br	80fa44 <__floatunsidf+0x38>
  80fb48:	bdc7883a 	add	r3,r23,r23
  80fb4c:	008007c4 	movi	r2,31
  80fb50:	1285c83a 	sub	r2,r2,r10
  80fb54:	1886983a 	sll	r3,r3,r2
  80fb58:	b2a8d83a 	srl	r20,r22,r10
  80fb5c:	baaad83a 	srl	r21,r23,r10
  80fb60:	1d28b03a 	or	r20,r3,r20
  80fb64:	003fdf06 	br	80fae4 <__floatunsidf+0xd8>
  80fb68:	b006d07a 	srli	r3,r22,1
  80fb6c:	008007c4 	movi	r2,31
  80fb70:	1245c83a 	sub	r2,r2,r9
  80fb74:	1886d83a 	srl	r3,r3,r2
  80fb78:	ba62983a 	sll	r17,r23,r9
  80fb7c:	b260983a 	sll	r16,r22,r9
  80fb80:	1c62b03a 	or	r17,r3,r17
  80fb84:	003fcc06 	br	80fab8 <__floatunsidf+0xac>
  80fb88:	2006d07a 	srli	r3,r4,1
  80fb8c:	008007c4 	movi	r2,31
  80fb90:	1285c83a 	sub	r2,r2,r10
  80fb94:	18a6d83a 	srl	r19,r3,r2
  80fb98:	22a4983a 	sll	r18,r4,r10
  80fb9c:	003fd706 	br	80fafc <__floatunsidf+0xf0>

0080fba0 <udivmodsi4>:
  80fba0:	29001b2e 	bgeu	r5,r4,80fc10 <udivmodsi4+0x70>
  80fba4:	28001a16 	blt	r5,zero,80fc10 <udivmodsi4+0x70>
  80fba8:	00800044 	movi	r2,1
  80fbac:	0007883a 	mov	r3,zero
  80fbb0:	01c007c4 	movi	r7,31
  80fbb4:	00000306 	br	80fbc4 <udivmodsi4+0x24>
  80fbb8:	19c01326 	beq	r3,r7,80fc08 <udivmodsi4+0x68>
  80fbbc:	18c00044 	addi	r3,r3,1
  80fbc0:	28000416 	blt	r5,zero,80fbd4 <udivmodsi4+0x34>
  80fbc4:	294b883a 	add	r5,r5,r5
  80fbc8:	1085883a 	add	r2,r2,r2
  80fbcc:	293ffa36 	bltu	r5,r4,80fbb8 <udivmodsi4+0x18>
  80fbd0:	10000d26 	beq	r2,zero,80fc08 <udivmodsi4+0x68>
  80fbd4:	0007883a 	mov	r3,zero
  80fbd8:	21400236 	bltu	r4,r5,80fbe4 <udivmodsi4+0x44>
  80fbdc:	2149c83a 	sub	r4,r4,r5
  80fbe0:	1886b03a 	or	r3,r3,r2
  80fbe4:	1004d07a 	srli	r2,r2,1
  80fbe8:	280ad07a 	srli	r5,r5,1
  80fbec:	103ffa1e 	bne	r2,zero,80fbd8 <udivmodsi4+0x38>
  80fbf0:	30000226 	beq	r6,zero,80fbfc <udivmodsi4+0x5c>
  80fbf4:	2005883a 	mov	r2,r4
  80fbf8:	f800283a 	ret
  80fbfc:	1809883a 	mov	r4,r3
  80fc00:	2005883a 	mov	r2,r4
  80fc04:	f800283a 	ret
  80fc08:	0007883a 	mov	r3,zero
  80fc0c:	003ff806 	br	80fbf0 <udivmodsi4+0x50>
  80fc10:	00800044 	movi	r2,1
  80fc14:	0007883a 	mov	r3,zero
  80fc18:	003fef06 	br	80fbd8 <udivmodsi4+0x38>

0080fc1c <__divsi3>:
  80fc1c:	defffe04 	addi	sp,sp,-8
  80fc20:	dc000015 	stw	r16,0(sp)
  80fc24:	dfc00115 	stw	ra,4(sp)
  80fc28:	0021883a 	mov	r16,zero
  80fc2c:	20000c16 	blt	r4,zero,80fc60 <__divsi3+0x44>
  80fc30:	000d883a 	mov	r6,zero
  80fc34:	28000e16 	blt	r5,zero,80fc70 <__divsi3+0x54>
  80fc38:	080fba00 	call	80fba0 <udivmodsi4>
  80fc3c:	1007883a 	mov	r3,r2
  80fc40:	8005003a 	cmpeq	r2,r16,zero
  80fc44:	1000011e 	bne	r2,zero,80fc4c <__divsi3+0x30>
  80fc48:	00c7c83a 	sub	r3,zero,r3
  80fc4c:	1805883a 	mov	r2,r3
  80fc50:	dfc00117 	ldw	ra,4(sp)
  80fc54:	dc000017 	ldw	r16,0(sp)
  80fc58:	dec00204 	addi	sp,sp,8
  80fc5c:	f800283a 	ret
  80fc60:	0109c83a 	sub	r4,zero,r4
  80fc64:	04000044 	movi	r16,1
  80fc68:	000d883a 	mov	r6,zero
  80fc6c:	283ff20e 	bge	r5,zero,80fc38 <__divsi3+0x1c>
  80fc70:	014bc83a 	sub	r5,zero,r5
  80fc74:	8021003a 	cmpeq	r16,r16,zero
  80fc78:	003fef06 	br	80fc38 <__divsi3+0x1c>

0080fc7c <__modsi3>:
  80fc7c:	deffff04 	addi	sp,sp,-4
  80fc80:	dfc00015 	stw	ra,0(sp)
  80fc84:	01800044 	movi	r6,1
  80fc88:	2807883a 	mov	r3,r5
  80fc8c:	20000416 	blt	r4,zero,80fca0 <__modsi3+0x24>
  80fc90:	28000c16 	blt	r5,zero,80fcc4 <__modsi3+0x48>
  80fc94:	dfc00017 	ldw	ra,0(sp)
  80fc98:	dec00104 	addi	sp,sp,4
  80fc9c:	080fba01 	jmpi	80fba0 <udivmodsi4>
  80fca0:	0109c83a 	sub	r4,zero,r4
  80fca4:	28000b16 	blt	r5,zero,80fcd4 <__modsi3+0x58>
  80fca8:	180b883a 	mov	r5,r3
  80fcac:	01800044 	movi	r6,1
  80fcb0:	080fba00 	call	80fba0 <udivmodsi4>
  80fcb4:	0085c83a 	sub	r2,zero,r2
  80fcb8:	dfc00017 	ldw	ra,0(sp)
  80fcbc:	dec00104 	addi	sp,sp,4
  80fcc0:	f800283a 	ret
  80fcc4:	014bc83a 	sub	r5,zero,r5
  80fcc8:	dfc00017 	ldw	ra,0(sp)
  80fccc:	dec00104 	addi	sp,sp,4
  80fcd0:	080fba01 	jmpi	80fba0 <udivmodsi4>
  80fcd4:	0147c83a 	sub	r3,zero,r5
  80fcd8:	003ff306 	br	80fca8 <__modsi3+0x2c>

0080fcdc <__udivsi3>:
  80fcdc:	000d883a 	mov	r6,zero
  80fce0:	080fba01 	jmpi	80fba0 <udivmodsi4>

0080fce4 <__umodsi3>:
  80fce4:	01800044 	movi	r6,1
  80fce8:	080fba01 	jmpi	80fba0 <udivmodsi4>

0080fcec <__clzsi2>:
  80fcec:	00bfffd4 	movui	r2,65535
  80fcf0:	11000e36 	bltu	r2,r4,80fd2c <__clzsi2+0x40>
  80fcf4:	00803fc4 	movi	r2,255
  80fcf8:	01400204 	movi	r5,8
  80fcfc:	0007883a 	mov	r3,zero
  80fd00:	11001036 	bltu	r2,r4,80fd44 <__clzsi2+0x58>
  80fd04:	000b883a 	mov	r5,zero
  80fd08:	20c6d83a 	srl	r3,r4,r3
  80fd0c:	00802074 	movhi	r2,129
  80fd10:	1094a504 	addi	r2,r2,21140
  80fd14:	1887883a 	add	r3,r3,r2
  80fd18:	18800003 	ldbu	r2,0(r3)
  80fd1c:	00c00804 	movi	r3,32
  80fd20:	2885883a 	add	r2,r5,r2
  80fd24:	1885c83a 	sub	r2,r3,r2
  80fd28:	f800283a 	ret
  80fd2c:	01400404 	movi	r5,16
  80fd30:	00804034 	movhi	r2,256
  80fd34:	10bfffc4 	addi	r2,r2,-1
  80fd38:	2807883a 	mov	r3,r5
  80fd3c:	113ff22e 	bgeu	r2,r4,80fd08 <__clzsi2+0x1c>
  80fd40:	01400604 	movi	r5,24
  80fd44:	2807883a 	mov	r3,r5
  80fd48:	20c6d83a 	srl	r3,r4,r3
  80fd4c:	00802074 	movhi	r2,129
  80fd50:	1094a504 	addi	r2,r2,21140
  80fd54:	1887883a 	add	r3,r3,r2
  80fd58:	18800003 	ldbu	r2,0(r3)
  80fd5c:	00c00804 	movi	r3,32
  80fd60:	2885883a 	add	r2,r5,r2
  80fd64:	1885c83a 	sub	r2,r3,r2
  80fd68:	f800283a 	ret

0080fd6c <__unpack_f>:
  80fd6c:	21800017 	ldw	r6,0(r4)
  80fd70:	00c02034 	movhi	r3,128
  80fd74:	18ffffc4 	addi	r3,r3,-1
  80fd78:	3004d5fa 	srli	r2,r6,23
  80fd7c:	3008d7fa 	srli	r4,r6,31
  80fd80:	30ce703a 	and	r7,r6,r3
  80fd84:	10c03fcc 	andi	r3,r2,255
  80fd88:	29000115 	stw	r4,4(r5)
  80fd8c:	1800131e 	bne	r3,zero,80fddc <__unpack_f+0x70>
  80fd90:	38000f26 	beq	r7,zero,80fdd0 <__unpack_f+0x64>
  80fd94:	380691fa 	slli	r3,r7,7
  80fd98:	01bfe084 	movi	r6,-126
  80fd9c:	008000c4 	movi	r2,3
  80fda0:	01100034 	movhi	r4,16384
  80fda4:	213fffc4 	addi	r4,r4,-1
  80fda8:	28800015 	stw	r2,0(r5)
  80fdac:	29800215 	stw	r6,8(r5)
  80fdb0:	20c00536 	bltu	r4,r3,80fdc8 <__unpack_f+0x5c>
  80fdb4:	3005883a 	mov	r2,r6
  80fdb8:	18c7883a 	add	r3,r3,r3
  80fdbc:	10bfffc4 	addi	r2,r2,-1
  80fdc0:	20fffd2e 	bgeu	r4,r3,80fdb8 <__unpack_f+0x4c>
  80fdc4:	28800215 	stw	r2,8(r5)
  80fdc8:	28c00315 	stw	r3,12(r5)
  80fdcc:	f800283a 	ret
  80fdd0:	00800084 	movi	r2,2
  80fdd4:	28800015 	stw	r2,0(r5)
  80fdd8:	f800283a 	ret
  80fddc:	00803fc4 	movi	r2,255
  80fde0:	18800826 	beq	r3,r2,80fe04 <__unpack_f+0x98>
  80fde4:	380491fa 	slli	r2,r7,7
  80fde8:	18ffe044 	addi	r3,r3,-127
  80fdec:	28c00215 	stw	r3,8(r5)
  80fdf0:	10900034 	orhi	r2,r2,16384
  80fdf4:	28800315 	stw	r2,12(r5)
  80fdf8:	008000c4 	movi	r2,3
  80fdfc:	28800015 	stw	r2,0(r5)
  80fe00:	f800283a 	ret
  80fe04:	3800031e 	bne	r7,zero,80fe14 <__unpack_f+0xa8>
  80fe08:	00800104 	movi	r2,4
  80fe0c:	28800015 	stw	r2,0(r5)
  80fe10:	f800283a 	ret
  80fe14:	3080042c 	andhi	r2,r6,16
  80fe18:	10000426 	beq	r2,zero,80fe2c <__unpack_f+0xc0>
  80fe1c:	00800044 	movi	r2,1
  80fe20:	28800015 	stw	r2,0(r5)
  80fe24:	29c00315 	stw	r7,12(r5)
  80fe28:	f800283a 	ret
  80fe2c:	28000015 	stw	zero,0(r5)
  80fe30:	003ffc06 	br	80fe24 <__unpack_f+0xb8>

0080fe34 <__fpcmp_parts_f>:
  80fe34:	21800017 	ldw	r6,0(r4)
  80fe38:	00c00044 	movi	r3,1
  80fe3c:	19800a2e 	bgeu	r3,r6,80fe68 <__fpcmp_parts_f+0x34>
  80fe40:	28800017 	ldw	r2,0(r5)
  80fe44:	1880082e 	bgeu	r3,r2,80fe68 <__fpcmp_parts_f+0x34>
  80fe48:	00c00104 	movi	r3,4
  80fe4c:	30c01e26 	beq	r6,r3,80fec8 <__fpcmp_parts_f+0x94>
  80fe50:	10c01a26 	beq	r2,r3,80febc <__fpcmp_parts_f+0x88>
  80fe54:	00c00084 	movi	r3,2
  80fe58:	30c00526 	beq	r6,r3,80fe70 <__fpcmp_parts_f+0x3c>
  80fe5c:	10c0071e 	bne	r2,r3,80fe7c <__fpcmp_parts_f+0x48>
  80fe60:	20800117 	ldw	r2,4(r4)
  80fe64:	1000091e 	bne	r2,zero,80fe8c <__fpcmp_parts_f+0x58>
  80fe68:	00800044 	movi	r2,1
  80fe6c:	f800283a 	ret
  80fe70:	10c0121e 	bne	r2,r3,80febc <__fpcmp_parts_f+0x88>
  80fe74:	0005883a 	mov	r2,zero
  80fe78:	f800283a 	ret
  80fe7c:	20c00117 	ldw	r3,4(r4)
  80fe80:	28800117 	ldw	r2,4(r5)
  80fe84:	18800326 	beq	r3,r2,80fe94 <__fpcmp_parts_f+0x60>
  80fe88:	183ff726 	beq	r3,zero,80fe68 <__fpcmp_parts_f+0x34>
  80fe8c:	00bfffc4 	movi	r2,-1
  80fe90:	f800283a 	ret
  80fe94:	21800217 	ldw	r6,8(r4)
  80fe98:	28800217 	ldw	r2,8(r5)
  80fe9c:	11bffa16 	blt	r2,r6,80fe88 <__fpcmp_parts_f+0x54>
  80fea0:	30800416 	blt	r6,r2,80feb4 <__fpcmp_parts_f+0x80>
  80fea4:	21000317 	ldw	r4,12(r4)
  80fea8:	29400317 	ldw	r5,12(r5)
  80feac:	293ff636 	bltu	r5,r4,80fe88 <__fpcmp_parts_f+0x54>
  80feb0:	217ff02e 	bgeu	r4,r5,80fe74 <__fpcmp_parts_f+0x40>
  80feb4:	183fec1e 	bne	r3,zero,80fe68 <__fpcmp_parts_f+0x34>
  80feb8:	003ff406 	br	80fe8c <__fpcmp_parts_f+0x58>
  80febc:	28800117 	ldw	r2,4(r5)
  80fec0:	103fe91e 	bne	r2,zero,80fe68 <__fpcmp_parts_f+0x34>
  80fec4:	003ff106 	br	80fe8c <__fpcmp_parts_f+0x58>
  80fec8:	11bfe51e 	bne	r2,r6,80fe60 <__fpcmp_parts_f+0x2c>
  80fecc:	28c00117 	ldw	r3,4(r5)
  80fed0:	20800117 	ldw	r2,4(r4)
  80fed4:	1885c83a 	sub	r2,r3,r2
  80fed8:	f800283a 	ret

0080fedc <__make_fp>:
  80fedc:	defffb04 	addi	sp,sp,-20
  80fee0:	d9000015 	stw	r4,0(sp)
  80fee4:	d809883a 	mov	r4,sp
  80fee8:	dfc00415 	stw	ra,16(sp)
  80feec:	d9400115 	stw	r5,4(sp)
  80fef0:	d9800215 	stw	r6,8(sp)
  80fef4:	d9c00315 	stw	r7,12(sp)
  80fef8:	081041c0 	call	81041c <__pack_f>
  80fefc:	dfc00417 	ldw	ra,16(sp)
  80ff00:	dec00504 	addi	sp,sp,20
  80ff04:	f800283a 	ret

0080ff08 <__pack_d>:
  80ff08:	20c00017 	ldw	r3,0(r4)
  80ff0c:	defffd04 	addi	sp,sp,-12
  80ff10:	dc000015 	stw	r16,0(sp)
  80ff14:	dc800215 	stw	r18,8(sp)
  80ff18:	dc400115 	stw	r17,4(sp)
  80ff1c:	00800044 	movi	r2,1
  80ff20:	22000317 	ldw	r8,12(r4)
  80ff24:	001f883a 	mov	r15,zero
  80ff28:	22400417 	ldw	r9,16(r4)
  80ff2c:	24000117 	ldw	r16,4(r4)
  80ff30:	10c0552e 	bgeu	r2,r3,810088 <__pack_d+0x180>
  80ff34:	00800104 	movi	r2,4
  80ff38:	18804f26 	beq	r3,r2,810078 <__pack_d+0x170>
  80ff3c:	00800084 	movi	r2,2
  80ff40:	18800226 	beq	r3,r2,80ff4c <__pack_d+0x44>
  80ff44:	4244b03a 	or	r2,r8,r9
  80ff48:	10001a1e 	bne	r2,zero,80ffb4 <__pack_d+0xac>
  80ff4c:	000d883a 	mov	r6,zero
  80ff50:	000f883a 	mov	r7,zero
  80ff54:	0011883a 	mov	r8,zero
  80ff58:	00800434 	movhi	r2,16
  80ff5c:	10bfffc4 	addi	r2,r2,-1
  80ff60:	301d883a 	mov	r14,r6
  80ff64:	3884703a 	and	r2,r7,r2
  80ff68:	400a953a 	slli	r5,r8,20
  80ff6c:	79bffc2c 	andhi	r6,r15,65520
  80ff70:	308cb03a 	or	r6,r6,r2
  80ff74:	00e00434 	movhi	r3,32784
  80ff78:	18ffffc4 	addi	r3,r3,-1
  80ff7c:	800497fa 	slli	r2,r16,31
  80ff80:	30c6703a 	and	r3,r6,r3
  80ff84:	1946b03a 	or	r3,r3,r5
  80ff88:	01600034 	movhi	r5,32768
  80ff8c:	297fffc4 	addi	r5,r5,-1
  80ff90:	194a703a 	and	r5,r3,r5
  80ff94:	288ab03a 	or	r5,r5,r2
  80ff98:	2807883a 	mov	r3,r5
  80ff9c:	7005883a 	mov	r2,r14
  80ffa0:	dc800217 	ldw	r18,8(sp)
  80ffa4:	dc400117 	ldw	r17,4(sp)
  80ffa8:	dc000017 	ldw	r16,0(sp)
  80ffac:	dec00304 	addi	sp,sp,12
  80ffb0:	f800283a 	ret
  80ffb4:	21000217 	ldw	r4,8(r4)
  80ffb8:	00bf0084 	movi	r2,-1022
  80ffbc:	20803f16 	blt	r4,r2,8100bc <__pack_d+0x1b4>
  80ffc0:	0080ffc4 	movi	r2,1023
  80ffc4:	11002c16 	blt	r2,r4,810078 <__pack_d+0x170>
  80ffc8:	00803fc4 	movi	r2,255
  80ffcc:	408c703a 	and	r6,r8,r2
  80ffd0:	00802004 	movi	r2,128
  80ffd4:	0007883a 	mov	r3,zero
  80ffd8:	000f883a 	mov	r7,zero
  80ffdc:	2280ffc4 	addi	r10,r4,1023
  80ffe0:	30801e26 	beq	r6,r2,81005c <__pack_d+0x154>
  80ffe4:	00801fc4 	movi	r2,127
  80ffe8:	4089883a 	add	r4,r8,r2
  80ffec:	220d803a 	cmpltu	r6,r4,r8
  80fff0:	324d883a 	add	r6,r6,r9
  80fff4:	2011883a 	mov	r8,r4
  80fff8:	3013883a 	mov	r9,r6
  80fffc:	00880034 	movhi	r2,8192
  810000:	10bfffc4 	addi	r2,r2,-1
  810004:	12400d36 	bltu	r2,r9,81003c <__pack_d+0x134>
  810008:	4804963a 	slli	r2,r9,24
  81000c:	400cd23a 	srli	r6,r8,8
  810010:	480ed23a 	srli	r7,r9,8
  810014:	013fffc4 	movi	r4,-1
  810018:	118cb03a 	or	r6,r2,r6
  81001c:	01400434 	movhi	r5,16
  810020:	297fffc4 	addi	r5,r5,-1
  810024:	3104703a 	and	r2,r6,r4
  810028:	3946703a 	and	r3,r7,r5
  81002c:	5201ffcc 	andi	r8,r10,2047
  810030:	100d883a 	mov	r6,r2
  810034:	180f883a 	mov	r7,r3
  810038:	003fc706 	br	80ff58 <__pack_d+0x50>
  81003c:	480897fa 	slli	r4,r9,31
  810040:	4004d07a 	srli	r2,r8,1
  810044:	4806d07a 	srli	r3,r9,1
  810048:	52800044 	addi	r10,r10,1
  81004c:	2084b03a 	or	r2,r4,r2
  810050:	1011883a 	mov	r8,r2
  810054:	1813883a 	mov	r9,r3
  810058:	003feb06 	br	810008 <__pack_d+0x100>
  81005c:	383fe11e 	bne	r7,zero,80ffe4 <__pack_d+0xdc>
  810060:	01004004 	movi	r4,256
  810064:	4104703a 	and	r2,r8,r4
  810068:	10c4b03a 	or	r2,r2,r3
  81006c:	103fe326 	beq	r2,zero,80fffc <__pack_d+0xf4>
  810070:	3005883a 	mov	r2,r6
  810074:	003fdc06 	br	80ffe8 <__pack_d+0xe0>
  810078:	000d883a 	mov	r6,zero
  81007c:	000f883a 	mov	r7,zero
  810080:	0201ffc4 	movi	r8,2047
  810084:	003fb406 	br	80ff58 <__pack_d+0x50>
  810088:	0005883a 	mov	r2,zero
  81008c:	00c00234 	movhi	r3,8
  810090:	408cb03a 	or	r6,r8,r2
  810094:	48ceb03a 	or	r7,r9,r3
  810098:	013fffc4 	movi	r4,-1
  81009c:	01400434 	movhi	r5,16
  8100a0:	297fffc4 	addi	r5,r5,-1
  8100a4:	3104703a 	and	r2,r6,r4
  8100a8:	3946703a 	and	r3,r7,r5
  8100ac:	100d883a 	mov	r6,r2
  8100b0:	180f883a 	mov	r7,r3
  8100b4:	0201ffc4 	movi	r8,2047
  8100b8:	003fa706 	br	80ff58 <__pack_d+0x50>
  8100bc:	1109c83a 	sub	r4,r2,r4
  8100c0:	00800e04 	movi	r2,56
  8100c4:	11004316 	blt	r2,r4,8101d4 <__pack_d+0x2cc>
  8100c8:	21fff804 	addi	r7,r4,-32
  8100cc:	38004516 	blt	r7,zero,8101e4 <__pack_d+0x2dc>
  8100d0:	49d8d83a 	srl	r12,r9,r7
  8100d4:	001b883a 	mov	r13,zero
  8100d8:	0023883a 	mov	r17,zero
  8100dc:	01400044 	movi	r5,1
  8100e0:	0025883a 	mov	r18,zero
  8100e4:	38004716 	blt	r7,zero,810204 <__pack_d+0x2fc>
  8100e8:	29d6983a 	sll	r11,r5,r7
  8100ec:	0015883a 	mov	r10,zero
  8100f0:	00bfffc4 	movi	r2,-1
  8100f4:	5089883a 	add	r4,r10,r2
  8100f8:	588b883a 	add	r5,r11,r2
  8100fc:	228d803a 	cmpltu	r6,r4,r10
  810100:	314b883a 	add	r5,r6,r5
  810104:	4104703a 	and	r2,r8,r4
  810108:	4946703a 	and	r3,r9,r5
  81010c:	10c4b03a 	or	r2,r2,r3
  810110:	10000226 	beq	r2,zero,81011c <__pack_d+0x214>
  810114:	04400044 	movi	r17,1
  810118:	0025883a 	mov	r18,zero
  81011c:	00803fc4 	movi	r2,255
  810120:	644eb03a 	or	r7,r12,r17
  810124:	3892703a 	and	r9,r7,r2
  810128:	00802004 	movi	r2,128
  81012c:	6c90b03a 	or	r8,r13,r18
  810130:	0015883a 	mov	r10,zero
  810134:	48801626 	beq	r9,r2,810190 <__pack_d+0x288>
  810138:	01001fc4 	movi	r4,127
  81013c:	3905883a 	add	r2,r7,r4
  810140:	11cd803a 	cmpltu	r6,r2,r7
  810144:	320d883a 	add	r6,r6,r8
  810148:	100f883a 	mov	r7,r2
  81014c:	00840034 	movhi	r2,4096
  810150:	10bfffc4 	addi	r2,r2,-1
  810154:	3011883a 	mov	r8,r6
  810158:	0007883a 	mov	r3,zero
  81015c:	11801b36 	bltu	r2,r6,8101cc <__pack_d+0x2c4>
  810160:	4004963a 	slli	r2,r8,24
  810164:	3808d23a 	srli	r4,r7,8
  810168:	400ad23a 	srli	r5,r8,8
  81016c:	1813883a 	mov	r9,r3
  810170:	1108b03a 	or	r4,r2,r4
  810174:	00bfffc4 	movi	r2,-1
  810178:	00c00434 	movhi	r3,16
  81017c:	18ffffc4 	addi	r3,r3,-1
  810180:	208c703a 	and	r6,r4,r2
  810184:	28ce703a 	and	r7,r5,r3
  810188:	4a01ffcc 	andi	r8,r9,2047
  81018c:	003f7206 	br	80ff58 <__pack_d+0x50>
  810190:	503fe91e 	bne	r10,zero,810138 <__pack_d+0x230>
  810194:	01004004 	movi	r4,256
  810198:	3904703a 	and	r2,r7,r4
  81019c:	0007883a 	mov	r3,zero
  8101a0:	10c4b03a 	or	r2,r2,r3
  8101a4:	10000626 	beq	r2,zero,8101c0 <__pack_d+0x2b8>
  8101a8:	3a45883a 	add	r2,r7,r9
  8101ac:	11cd803a 	cmpltu	r6,r2,r7
  8101b0:	320d883a 	add	r6,r6,r8
  8101b4:	100f883a 	mov	r7,r2
  8101b8:	3011883a 	mov	r8,r6
  8101bc:	0007883a 	mov	r3,zero
  8101c0:	00840034 	movhi	r2,4096
  8101c4:	10bfffc4 	addi	r2,r2,-1
  8101c8:	123fe52e 	bgeu	r2,r8,810160 <__pack_d+0x258>
  8101cc:	00c00044 	movi	r3,1
  8101d0:	003fe306 	br	810160 <__pack_d+0x258>
  8101d4:	0009883a 	mov	r4,zero
  8101d8:	0013883a 	mov	r9,zero
  8101dc:	000b883a 	mov	r5,zero
  8101e0:	003fe406 	br	810174 <__pack_d+0x26c>
  8101e4:	4a47883a 	add	r3,r9,r9
  8101e8:	008007c4 	movi	r2,31
  8101ec:	1105c83a 	sub	r2,r2,r4
  8101f0:	1886983a 	sll	r3,r3,r2
  8101f4:	4118d83a 	srl	r12,r8,r4
  8101f8:	491ad83a 	srl	r13,r9,r4
  8101fc:	1b18b03a 	or	r12,r3,r12
  810200:	003fb506 	br	8100d8 <__pack_d+0x1d0>
  810204:	2806d07a 	srli	r3,r5,1
  810208:	008007c4 	movi	r2,31
  81020c:	1105c83a 	sub	r2,r2,r4
  810210:	1896d83a 	srl	r11,r3,r2
  810214:	2914983a 	sll	r10,r5,r4
  810218:	003fb506 	br	8100f0 <__pack_d+0x1e8>

0081021c <__unpack_d>:
  81021c:	20c00117 	ldw	r3,4(r4)
  810220:	22400017 	ldw	r9,0(r4)
  810224:	00800434 	movhi	r2,16
  810228:	10bfffc4 	addi	r2,r2,-1
  81022c:	1808d53a 	srli	r4,r3,20
  810230:	180cd7fa 	srli	r6,r3,31
  810234:	1894703a 	and	r10,r3,r2
  810238:	2201ffcc 	andi	r8,r4,2047
  81023c:	281b883a 	mov	r13,r5
  810240:	4817883a 	mov	r11,r9
  810244:	29800115 	stw	r6,4(r5)
  810248:	5019883a 	mov	r12,r10
  81024c:	40001e1e 	bne	r8,zero,8102c8 <__unpack_d+0xac>
  810250:	4a84b03a 	or	r2,r9,r10
  810254:	10001926 	beq	r2,zero,8102bc <__unpack_d+0xa0>
  810258:	4804d63a 	srli	r2,r9,24
  81025c:	500c923a 	slli	r6,r10,8
  810260:	013f0084 	movi	r4,-1022
  810264:	00c40034 	movhi	r3,4096
  810268:	18ffffc4 	addi	r3,r3,-1
  81026c:	118cb03a 	or	r6,r2,r6
  810270:	008000c4 	movi	r2,3
  810274:	480a923a 	slli	r5,r9,8
  810278:	68800015 	stw	r2,0(r13)
  81027c:	69000215 	stw	r4,8(r13)
  810280:	19800b36 	bltu	r3,r6,8102b0 <__unpack_d+0x94>
  810284:	200f883a 	mov	r7,r4
  810288:	1811883a 	mov	r8,r3
  81028c:	2945883a 	add	r2,r5,r5
  810290:	1149803a 	cmpltu	r4,r2,r5
  810294:	3187883a 	add	r3,r6,r6
  810298:	20c9883a 	add	r4,r4,r3
  81029c:	100b883a 	mov	r5,r2
  8102a0:	200d883a 	mov	r6,r4
  8102a4:	39ffffc4 	addi	r7,r7,-1
  8102a8:	413ff82e 	bgeu	r8,r4,81028c <__unpack_d+0x70>
  8102ac:	69c00215 	stw	r7,8(r13)
  8102b0:	69800415 	stw	r6,16(r13)
  8102b4:	69400315 	stw	r5,12(r13)
  8102b8:	f800283a 	ret
  8102bc:	00800084 	movi	r2,2
  8102c0:	28800015 	stw	r2,0(r5)
  8102c4:	f800283a 	ret
  8102c8:	0081ffc4 	movi	r2,2047
  8102cc:	40800f26 	beq	r8,r2,81030c <__unpack_d+0xf0>
  8102d0:	480cd63a 	srli	r6,r9,24
  8102d4:	5006923a 	slli	r3,r10,8
  8102d8:	4804923a 	slli	r2,r9,8
  8102dc:	0009883a 	mov	r4,zero
  8102e0:	30c6b03a 	or	r3,r6,r3
  8102e4:	01440034 	movhi	r5,4096
  8102e8:	110cb03a 	or	r6,r2,r4
  8102ec:	423f0044 	addi	r8,r8,-1023
  8102f0:	194eb03a 	or	r7,r3,r5
  8102f4:	008000c4 	movi	r2,3
  8102f8:	69c00415 	stw	r7,16(r13)
  8102fc:	6a000215 	stw	r8,8(r13)
  810300:	68800015 	stw	r2,0(r13)
  810304:	69800315 	stw	r6,12(r13)
  810308:	f800283a 	ret
  81030c:	4a84b03a 	or	r2,r9,r10
  810310:	1000031e 	bne	r2,zero,810320 <__unpack_d+0x104>
  810314:	00800104 	movi	r2,4
  810318:	28800015 	stw	r2,0(r5)
  81031c:	f800283a 	ret
  810320:	0009883a 	mov	r4,zero
  810324:	01400234 	movhi	r5,8
  810328:	4904703a 	and	r2,r9,r4
  81032c:	5146703a 	and	r3,r10,r5
  810330:	10c4b03a 	or	r2,r2,r3
  810334:	10000526 	beq	r2,zero,81034c <__unpack_d+0x130>
  810338:	00800044 	movi	r2,1
  81033c:	68800015 	stw	r2,0(r13)
  810340:	6b000415 	stw	r12,16(r13)
  810344:	6ac00315 	stw	r11,12(r13)
  810348:	f800283a 	ret
  81034c:	68000015 	stw	zero,0(r13)
  810350:	003ffb06 	br	810340 <__unpack_d+0x124>

00810354 <__fpcmp_parts_d>:
  810354:	21800017 	ldw	r6,0(r4)
  810358:	00c00044 	movi	r3,1
  81035c:	19800a2e 	bgeu	r3,r6,810388 <__fpcmp_parts_d+0x34>
  810360:	28800017 	ldw	r2,0(r5)
  810364:	1880082e 	bgeu	r3,r2,810388 <__fpcmp_parts_d+0x34>
  810368:	00c00104 	movi	r3,4
  81036c:	30c02626 	beq	r6,r3,810408 <__fpcmp_parts_d+0xb4>
  810370:	10c02226 	beq	r2,r3,8103fc <__fpcmp_parts_d+0xa8>
  810374:	00c00084 	movi	r3,2
  810378:	30c00526 	beq	r6,r3,810390 <__fpcmp_parts_d+0x3c>
  81037c:	10c0071e 	bne	r2,r3,81039c <__fpcmp_parts_d+0x48>
  810380:	20800117 	ldw	r2,4(r4)
  810384:	1000091e 	bne	r2,zero,8103ac <__fpcmp_parts_d+0x58>
  810388:	00800044 	movi	r2,1
  81038c:	f800283a 	ret
  810390:	10c01a1e 	bne	r2,r3,8103fc <__fpcmp_parts_d+0xa8>
  810394:	0005883a 	mov	r2,zero
  810398:	f800283a 	ret
  81039c:	22000117 	ldw	r8,4(r4)
  8103a0:	28800117 	ldw	r2,4(r5)
  8103a4:	40800326 	beq	r8,r2,8103b4 <__fpcmp_parts_d+0x60>
  8103a8:	403ff726 	beq	r8,zero,810388 <__fpcmp_parts_d+0x34>
  8103ac:	00bfffc4 	movi	r2,-1
  8103b0:	f800283a 	ret
  8103b4:	20c00217 	ldw	r3,8(r4)
  8103b8:	28800217 	ldw	r2,8(r5)
  8103bc:	10fffa16 	blt	r2,r3,8103a8 <__fpcmp_parts_d+0x54>
  8103c0:	18800916 	blt	r3,r2,8103e8 <__fpcmp_parts_d+0x94>
  8103c4:	21c00417 	ldw	r7,16(r4)
  8103c8:	28c00417 	ldw	r3,16(r5)
  8103cc:	21800317 	ldw	r6,12(r4)
  8103d0:	28800317 	ldw	r2,12(r5)
  8103d4:	19fff436 	bltu	r3,r7,8103a8 <__fpcmp_parts_d+0x54>
  8103d8:	38c00526 	beq	r7,r3,8103f0 <__fpcmp_parts_d+0x9c>
  8103dc:	38c00236 	bltu	r7,r3,8103e8 <__fpcmp_parts_d+0x94>
  8103e0:	19ffec1e 	bne	r3,r7,810394 <__fpcmp_parts_d+0x40>
  8103e4:	30bfeb2e 	bgeu	r6,r2,810394 <__fpcmp_parts_d+0x40>
  8103e8:	403fe71e 	bne	r8,zero,810388 <__fpcmp_parts_d+0x34>
  8103ec:	003fef06 	br	8103ac <__fpcmp_parts_d+0x58>
  8103f0:	11bffa2e 	bgeu	r2,r6,8103dc <__fpcmp_parts_d+0x88>
  8103f4:	403fe426 	beq	r8,zero,810388 <__fpcmp_parts_d+0x34>
  8103f8:	003fec06 	br	8103ac <__fpcmp_parts_d+0x58>
  8103fc:	28800117 	ldw	r2,4(r5)
  810400:	103fe11e 	bne	r2,zero,810388 <__fpcmp_parts_d+0x34>
  810404:	003fe906 	br	8103ac <__fpcmp_parts_d+0x58>
  810408:	11bfdd1e 	bne	r2,r6,810380 <__fpcmp_parts_d+0x2c>
  81040c:	28c00117 	ldw	r3,4(r5)
  810410:	20800117 	ldw	r2,4(r4)
  810414:	1885c83a 	sub	r2,r3,r2
  810418:	f800283a 	ret

0081041c <__pack_f>:
  81041c:	20c00017 	ldw	r3,0(r4)
  810420:	01c00044 	movi	r7,1
  810424:	21800317 	ldw	r6,12(r4)
  810428:	21400117 	ldw	r5,4(r4)
  81042c:	38c02d2e 	bgeu	r7,r3,8104e4 <__pack_f+0xc8>
  810430:	00800104 	movi	r2,4
  810434:	18802826 	beq	r3,r2,8104d8 <__pack_f+0xbc>
  810438:	00800084 	movi	r2,2
  81043c:	18800126 	beq	r3,r2,810444 <__pack_f+0x28>
  810440:	3000101e 	bne	r6,zero,810484 <__pack_f+0x68>
  810444:	000d883a 	mov	r6,zero
  810448:	0007883a 	mov	r3,zero
  81044c:	19003fcc 	andi	r4,r3,255
  810450:	200895fa 	slli	r4,r4,23
  810454:	00c02034 	movhi	r3,128
  810458:	18ffffc4 	addi	r3,r3,-1
  81045c:	30c6703a 	and	r3,r6,r3
  810460:	10a0002c 	andhi	r2,r2,32768
  810464:	10c4b03a 	or	r2,r2,r3
  810468:	280a97fa 	slli	r5,r5,31
  81046c:	1104b03a 	or	r2,r2,r4
  810470:	00e00034 	movhi	r3,32768
  810474:	18ffffc4 	addi	r3,r3,-1
  810478:	10c4703a 	and	r2,r2,r3
  81047c:	1144b03a 	or	r2,r2,r5
  810480:	f800283a 	ret
  810484:	21000217 	ldw	r4,8(r4)
  810488:	00bfe084 	movi	r2,-126
  81048c:	20801b16 	blt	r4,r2,8104fc <__pack_f+0xe0>
  810490:	00801fc4 	movi	r2,127
  810494:	11001016 	blt	r2,r4,8104d8 <__pack_f+0xbc>
  810498:	308e703a 	and	r7,r6,r2
  81049c:	2087883a 	add	r3,r4,r2
  8104a0:	00801004 	movi	r2,64
  8104a4:	38800526 	beq	r7,r2,8104bc <__pack_f+0xa0>
  8104a8:	31800fc4 	addi	r6,r6,63
  8104ac:	30000716 	blt	r6,zero,8104cc <__pack_f+0xb0>
  8104b0:	300490ba 	slli	r2,r6,2
  8104b4:	100cd27a 	srli	r6,r2,9
  8104b8:	003fe406 	br	81044c <__pack_f+0x30>
  8104bc:	3080200c 	andi	r2,r6,128
  8104c0:	103ffa26 	beq	r2,zero,8104ac <__pack_f+0x90>
  8104c4:	31cd883a 	add	r6,r6,r7
  8104c8:	003ff806 	br	8104ac <__pack_f+0x90>
  8104cc:	300cd07a 	srli	r6,r6,1
  8104d0:	18c00044 	addi	r3,r3,1
  8104d4:	003ff606 	br	8104b0 <__pack_f+0x94>
  8104d8:	000d883a 	mov	r6,zero
  8104dc:	00ffffc4 	movi	r3,-1
  8104e0:	003fda06 	br	81044c <__pack_f+0x30>
  8104e4:	31800434 	orhi	r6,r6,16
  8104e8:	00802034 	movhi	r2,128
  8104ec:	10bfffc4 	addi	r2,r2,-1
  8104f0:	308c703a 	and	r6,r6,r2
  8104f4:	00ffffc4 	movi	r3,-1
  8104f8:	003fd406 	br	81044c <__pack_f+0x30>
  8104fc:	1109c83a 	sub	r4,r2,r4
  810500:	00800644 	movi	r2,25
  810504:	11001216 	blt	r2,r4,810550 <__pack_f+0x134>
  810508:	3904983a 	sll	r2,r7,r4
  81050c:	3106d83a 	srl	r3,r6,r4
  810510:	10bfffc4 	addi	r2,r2,-1
  810514:	3084703a 	and	r2,r6,r2
  810518:	1004c03a 	cmpne	r2,r2,zero
  81051c:	1886b03a 	or	r3,r3,r2
  810520:	19001fcc 	andi	r4,r3,127
  810524:	00801004 	movi	r2,64
  810528:	20800c26 	beq	r4,r2,81055c <__pack_f+0x140>
  81052c:	18c00fc4 	addi	r3,r3,63
  810530:	00900034 	movhi	r2,16384
  810534:	10bfffc4 	addi	r2,r2,-1
  810538:	180cd1fa 	srli	r6,r3,7
  81053c:	10c7803a 	cmpltu	r3,r2,r3
  810540:	00802034 	movhi	r2,128
  810544:	10bfffc4 	addi	r2,r2,-1
  810548:	308c703a 	and	r6,r6,r2
  81054c:	003fbf06 	br	81044c <__pack_f+0x30>
  810550:	0007883a 	mov	r3,zero
  810554:	000d883a 	mov	r6,zero
  810558:	003ff906 	br	810540 <__pack_f+0x124>
  81055c:	1880200c 	andi	r2,r3,128
  810560:	10000126 	beq	r2,zero,810568 <__pack_f+0x14c>
  810564:	1907883a 	add	r3,r3,r4
  810568:	180cd1fa 	srli	r6,r3,7
  81056c:	00900034 	movhi	r2,16384
  810570:	10bfffc4 	addi	r2,r2,-1
  810574:	10c7803a 	cmpltu	r3,r2,r3
  810578:	003ff106 	br	810540 <__pack_f+0x124>

0081057c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81057c:	defff404 	addi	sp,sp,-48
  810580:	df000b15 	stw	fp,44(sp)
  810584:	df000b04 	addi	fp,sp,44
  810588:	e13ffb15 	stw	r4,-20(fp)
  81058c:	e17ffc15 	stw	r5,-16(fp)
  810590:	e1bffd15 	stw	r6,-12(fp)
  810594:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810598:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81059c:	008020b4 	movhi	r2,130
  8105a0:	10a36f04 	addi	r2,r2,-29252
  8105a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8105a8:	1005003a 	cmpeq	r2,r2,zero
  8105ac:	1000411e 	bne	r2,zero,8106b4 <alt_alarm_start+0x138>
  {
    if (alarm)
  8105b0:	e0bffb17 	ldw	r2,-20(fp)
  8105b4:	1005003a 	cmpeq	r2,r2,zero
  8105b8:	10003b1e 	bne	r2,zero,8106a8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8105bc:	e0fffb17 	ldw	r3,-20(fp)
  8105c0:	e0bffd17 	ldw	r2,-12(fp)
  8105c4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8105c8:	e0fffb17 	ldw	r3,-20(fp)
  8105cc:	e0bffe17 	ldw	r2,-8(fp)
  8105d0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105d4:	0005303a 	rdctl	r2,status
  8105d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105dc:	e0fff817 	ldw	r3,-32(fp)
  8105e0:	00bfff84 	movi	r2,-2
  8105e4:	1884703a 	and	r2,r3,r2
  8105e8:	1001703a 	wrctl	status,r2
  
  return context;
  8105ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8105f0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8105f4:	008020b4 	movhi	r2,130
  8105f8:	10a37004 	addi	r2,r2,-29248
  8105fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810600:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810604:	e0fffc17 	ldw	r3,-16(fp)
  810608:	e0bff917 	ldw	r2,-28(fp)
  81060c:	1885883a 	add	r2,r3,r2
  810610:	10c00044 	addi	r3,r2,1
  810614:	e0bffb17 	ldw	r2,-20(fp)
  810618:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81061c:	e0bffb17 	ldw	r2,-20(fp)
  810620:	10c00217 	ldw	r3,8(r2)
  810624:	e0bff917 	ldw	r2,-28(fp)
  810628:	1880042e 	bgeu	r3,r2,81063c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81062c:	e0fffb17 	ldw	r3,-20(fp)
  810630:	00800044 	movi	r2,1
  810634:	18800405 	stb	r2,16(r3)
  810638:	00000206 	br	810644 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81063c:	e0bffb17 	ldw	r2,-20(fp)
  810640:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810644:	e0fffb17 	ldw	r3,-20(fp)
  810648:	00802074 	movhi	r2,129
  81064c:	109c2304 	addi	r2,r2,28812
  810650:	e0bff615 	stw	r2,-40(fp)
  810654:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810658:	e0fff717 	ldw	r3,-36(fp)
  81065c:	e0bff617 	ldw	r2,-40(fp)
  810660:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810664:	e0bff617 	ldw	r2,-40(fp)
  810668:	10c00017 	ldw	r3,0(r2)
  81066c:	e0bff717 	ldw	r2,-36(fp)
  810670:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810674:	e0bff617 	ldw	r2,-40(fp)
  810678:	10c00017 	ldw	r3,0(r2)
  81067c:	e0bff717 	ldw	r2,-36(fp)
  810680:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810684:	e0fff617 	ldw	r3,-40(fp)
  810688:	e0bff717 	ldw	r2,-36(fp)
  81068c:	18800015 	stw	r2,0(r3)
  810690:	e0bffa17 	ldw	r2,-24(fp)
  810694:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810698:	e0bff517 	ldw	r2,-44(fp)
  81069c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8106a0:	e03fff15 	stw	zero,-4(fp)
  8106a4:	00000506 	br	8106bc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8106a8:	00bffa84 	movi	r2,-22
  8106ac:	e0bfff15 	stw	r2,-4(fp)
  8106b0:	00000206 	br	8106bc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8106b4:	00bfde84 	movi	r2,-134
  8106b8:	e0bfff15 	stw	r2,-4(fp)
  8106bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8106c0:	e037883a 	mov	sp,fp
  8106c4:	df000017 	ldw	fp,0(sp)
  8106c8:	dec00104 	addi	sp,sp,4
  8106cc:	f800283a 	ret

008106d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8106d0:	defff804 	addi	sp,sp,-32
  8106d4:	dfc00715 	stw	ra,28(sp)
  8106d8:	df000615 	stw	fp,24(sp)
  8106dc:	df000604 	addi	fp,sp,24
  8106e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8106e4:	e0bffc17 	ldw	r2,-16(fp)
  8106e8:	1004803a 	cmplt	r2,r2,zero
  8106ec:	1000081e 	bne	r2,zero,810710 <close+0x40>
  8106f0:	e0bffc17 	ldw	r2,-16(fp)
  8106f4:	10800324 	muli	r2,r2,12
  8106f8:	1007883a 	mov	r3,r2
  8106fc:	00802074 	movhi	r2,129
  810700:	10971f04 	addi	r2,r2,23676
  810704:	1887883a 	add	r3,r3,r2
  810708:	e0ffff15 	stw	r3,-4(fp)
  81070c:	00000106 	br	810714 <close+0x44>
  810710:	e03fff15 	stw	zero,-4(fp)
  810714:	e0bfff17 	ldw	r2,-4(fp)
  810718:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  81071c:	e0bffb17 	ldw	r2,-20(fp)
  810720:	1005003a 	cmpeq	r2,r2,zero
  810724:	10001d1e 	bne	r2,zero,81079c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810728:	e0bffb17 	ldw	r2,-20(fp)
  81072c:	10800017 	ldw	r2,0(r2)
  810730:	10800417 	ldw	r2,16(r2)
  810734:	1005003a 	cmpeq	r2,r2,zero
  810738:	1000071e 	bne	r2,zero,810758 <close+0x88>
  81073c:	e0bffb17 	ldw	r2,-20(fp)
  810740:	10800017 	ldw	r2,0(r2)
  810744:	10800417 	ldw	r2,16(r2)
  810748:	e13ffb17 	ldw	r4,-20(fp)
  81074c:	103ee83a 	callr	r2
  810750:	e0bffe15 	stw	r2,-8(fp)
  810754:	00000106 	br	81075c <close+0x8c>
  810758:	e03ffe15 	stw	zero,-8(fp)
  81075c:	e0bffe17 	ldw	r2,-8(fp)
  810760:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810764:	e13ffc17 	ldw	r4,-16(fp)
  810768:	08113980 	call	811398 <alt_release_fd>
    if (rval < 0)
  81076c:	e0bffa17 	ldw	r2,-24(fp)
  810770:	1004403a 	cmpge	r2,r2,zero
  810774:	1000071e 	bne	r2,zero,810794 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  810778:	08107cc0 	call	8107cc <alt_get_errno>
  81077c:	e0fffa17 	ldw	r3,-24(fp)
  810780:	00c7c83a 	sub	r3,zero,r3
  810784:	10c00015 	stw	r3,0(r2)
      return -1;
  810788:	00bfffc4 	movi	r2,-1
  81078c:	e0bffd15 	stw	r2,-12(fp)
  810790:	00000806 	br	8107b4 <close+0xe4>
    }
    return 0;
  810794:	e03ffd15 	stw	zero,-12(fp)
  810798:	00000606 	br	8107b4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81079c:	08107cc0 	call	8107cc <alt_get_errno>
  8107a0:	1007883a 	mov	r3,r2
  8107a4:	00801444 	movi	r2,81
  8107a8:	18800015 	stw	r2,0(r3)
    return -1;
  8107ac:	00bfffc4 	movi	r2,-1
  8107b0:	e0bffd15 	stw	r2,-12(fp)
  8107b4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8107b8:	e037883a 	mov	sp,fp
  8107bc:	dfc00117 	ldw	ra,4(sp)
  8107c0:	df000017 	ldw	fp,0(sp)
  8107c4:	dec00204 	addi	sp,sp,8
  8107c8:	f800283a 	ret

008107cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8107cc:	defffd04 	addi	sp,sp,-12
  8107d0:	dfc00215 	stw	ra,8(sp)
  8107d4:	df000115 	stw	fp,4(sp)
  8107d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8107dc:	00802074 	movhi	r2,129
  8107e0:	109c2004 	addi	r2,r2,28800
  8107e4:	10800017 	ldw	r2,0(r2)
  8107e8:	1005003a 	cmpeq	r2,r2,zero
  8107ec:	1000061e 	bne	r2,zero,810808 <alt_get_errno+0x3c>
  8107f0:	00802074 	movhi	r2,129
  8107f4:	109c2004 	addi	r2,r2,28800
  8107f8:	10800017 	ldw	r2,0(r2)
  8107fc:	103ee83a 	callr	r2
  810800:	e0bfff15 	stw	r2,-4(fp)
  810804:	00000306 	br	810814 <alt_get_errno+0x48>
  810808:	008020b4 	movhi	r2,130
  81080c:	10a36404 	addi	r2,r2,-29296
  810810:	e0bfff15 	stw	r2,-4(fp)
  810814:	e0bfff17 	ldw	r2,-4(fp)
}
  810818:	e037883a 	mov	sp,fp
  81081c:	dfc00117 	ldw	ra,4(sp)
  810820:	df000017 	ldw	fp,0(sp)
  810824:	dec00204 	addi	sp,sp,8
  810828:	f800283a 	ret

0081082c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81082c:	defffc04 	addi	sp,sp,-16
  810830:	df000315 	stw	fp,12(sp)
  810834:	df000304 	addi	fp,sp,12
  810838:	e13ffd15 	stw	r4,-12(fp)
  81083c:	e17ffe15 	stw	r5,-8(fp)
  810840:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810844:	e0bfff17 	ldw	r2,-4(fp)
}
  810848:	e037883a 	mov	sp,fp
  81084c:	df000017 	ldw	fp,0(sp)
  810850:	dec00104 	addi	sp,sp,4
  810854:	f800283a 	ret

00810858 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810858:	defff904 	addi	sp,sp,-28
  81085c:	dfc00615 	stw	ra,24(sp)
  810860:	df000515 	stw	fp,20(sp)
  810864:	df000504 	addi	fp,sp,20
  810868:	e13ffc15 	stw	r4,-16(fp)
  81086c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810870:	e0bffc17 	ldw	r2,-16(fp)
  810874:	1004803a 	cmplt	r2,r2,zero
  810878:	1000081e 	bne	r2,zero,81089c <fstat+0x44>
  81087c:	e0bffc17 	ldw	r2,-16(fp)
  810880:	10800324 	muli	r2,r2,12
  810884:	1007883a 	mov	r3,r2
  810888:	00802074 	movhi	r2,129
  81088c:	10971f04 	addi	r2,r2,23676
  810890:	1887883a 	add	r3,r3,r2
  810894:	e0ffff15 	stw	r3,-4(fp)
  810898:	00000106 	br	8108a0 <fstat+0x48>
  81089c:	e03fff15 	stw	zero,-4(fp)
  8108a0:	e0bfff17 	ldw	r2,-4(fp)
  8108a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8108a8:	e0bffb17 	ldw	r2,-20(fp)
  8108ac:	1005003a 	cmpeq	r2,r2,zero
  8108b0:	1000121e 	bne	r2,zero,8108fc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8108b4:	e0bffb17 	ldw	r2,-20(fp)
  8108b8:	10800017 	ldw	r2,0(r2)
  8108bc:	10800817 	ldw	r2,32(r2)
  8108c0:	1005003a 	cmpeq	r2,r2,zero
  8108c4:	1000081e 	bne	r2,zero,8108e8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8108c8:	e0bffb17 	ldw	r2,-20(fp)
  8108cc:	10800017 	ldw	r2,0(r2)
  8108d0:	10800817 	ldw	r2,32(r2)
  8108d4:	e13ffb17 	ldw	r4,-20(fp)
  8108d8:	e17ffd17 	ldw	r5,-12(fp)
  8108dc:	103ee83a 	callr	r2
  8108e0:	e0bffe15 	stw	r2,-8(fp)
  8108e4:	00000b06 	br	810914 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8108e8:	e0fffd17 	ldw	r3,-12(fp)
  8108ec:	00880004 	movi	r2,8192
  8108f0:	18800115 	stw	r2,4(r3)
      return 0;
  8108f4:	e03ffe15 	stw	zero,-8(fp)
  8108f8:	00000606 	br	810914 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8108fc:	081092c0 	call	81092c <alt_get_errno>
  810900:	1007883a 	mov	r3,r2
  810904:	00801444 	movi	r2,81
  810908:	18800015 	stw	r2,0(r3)
    return -1;
  81090c:	00bfffc4 	movi	r2,-1
  810910:	e0bffe15 	stw	r2,-8(fp)
  810914:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810918:	e037883a 	mov	sp,fp
  81091c:	dfc00117 	ldw	ra,4(sp)
  810920:	df000017 	ldw	fp,0(sp)
  810924:	dec00204 	addi	sp,sp,8
  810928:	f800283a 	ret

0081092c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81092c:	defffd04 	addi	sp,sp,-12
  810930:	dfc00215 	stw	ra,8(sp)
  810934:	df000115 	stw	fp,4(sp)
  810938:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81093c:	00802074 	movhi	r2,129
  810940:	109c2004 	addi	r2,r2,28800
  810944:	10800017 	ldw	r2,0(r2)
  810948:	1005003a 	cmpeq	r2,r2,zero
  81094c:	1000061e 	bne	r2,zero,810968 <alt_get_errno+0x3c>
  810950:	00802074 	movhi	r2,129
  810954:	109c2004 	addi	r2,r2,28800
  810958:	10800017 	ldw	r2,0(r2)
  81095c:	103ee83a 	callr	r2
  810960:	e0bfff15 	stw	r2,-4(fp)
  810964:	00000306 	br	810974 <alt_get_errno+0x48>
  810968:	008020b4 	movhi	r2,130
  81096c:	10a36404 	addi	r2,r2,-29296
  810970:	e0bfff15 	stw	r2,-4(fp)
  810974:	e0bfff17 	ldw	r2,-4(fp)
}
  810978:	e037883a 	mov	sp,fp
  81097c:	dfc00117 	ldw	ra,4(sp)
  810980:	df000017 	ldw	fp,0(sp)
  810984:	dec00204 	addi	sp,sp,8
  810988:	f800283a 	ret

0081098c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81098c:	deffef04 	addi	sp,sp,-68
  810990:	df001015 	stw	fp,64(sp)
  810994:	df001004 	addi	fp,sp,64
  810998:	e13ffc15 	stw	r4,-16(fp)
  81099c:	e17ffd15 	stw	r5,-12(fp)
  8109a0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8109a4:	00bffa84 	movi	r2,-22
  8109a8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8109ac:	e0bffc17 	ldw	r2,-16(fp)
  8109b0:	10800828 	cmpgeui	r2,r2,32
  8109b4:	1000601e 	bne	r2,zero,810b38 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109b8:	0005303a 	rdctl	r2,status
  8109bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109c0:	e0fff917 	ldw	r3,-28(fp)
  8109c4:	00bfff84 	movi	r2,-2
  8109c8:	1884703a 	and	r2,r3,r2
  8109cc:	1001703a 	wrctl	status,r2
  
  return context;
  8109d0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8109d4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8109d8:	e0bffc17 	ldw	r2,-16(fp)
  8109dc:	00c020b4 	movhi	r3,130
  8109e0:	18e3ca04 	addi	r3,r3,-28888
  8109e4:	100490fa 	slli	r2,r2,3
  8109e8:	10c7883a 	add	r3,r2,r3
  8109ec:	e0bffe17 	ldw	r2,-8(fp)
  8109f0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8109f4:	e0bffc17 	ldw	r2,-16(fp)
  8109f8:	00c020b4 	movhi	r3,130
  8109fc:	18e3ca04 	addi	r3,r3,-28888
  810a00:	100490fa 	slli	r2,r2,3
  810a04:	10c5883a 	add	r2,r2,r3
  810a08:	10c00104 	addi	r3,r2,4
  810a0c:	e0bffd17 	ldw	r2,-12(fp)
  810a10:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810a14:	e0bffe17 	ldw	r2,-8(fp)
  810a18:	1005003a 	cmpeq	r2,r2,zero
  810a1c:	1000201e 	bne	r2,zero,810aa0 <alt_irq_register+0x114>
  810a20:	e0bffc17 	ldw	r2,-16(fp)
  810a24:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a28:	0005303a 	rdctl	r2,status
  810a2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a30:	e0fff617 	ldw	r3,-40(fp)
  810a34:	00bfff84 	movi	r2,-2
  810a38:	1884703a 	and	r2,r3,r2
  810a3c:	1001703a 	wrctl	status,r2
  
  return context;
  810a40:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810a44:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810a48:	e0fff717 	ldw	r3,-36(fp)
  810a4c:	00800044 	movi	r2,1
  810a50:	10c4983a 	sll	r2,r2,r3
  810a54:	1007883a 	mov	r3,r2
  810a58:	008020b4 	movhi	r2,130
  810a5c:	10a36b04 	addi	r2,r2,-29268
  810a60:	10800017 	ldw	r2,0(r2)
  810a64:	1886b03a 	or	r3,r3,r2
  810a68:	008020b4 	movhi	r2,130
  810a6c:	10a36b04 	addi	r2,r2,-29268
  810a70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810a74:	008020b4 	movhi	r2,130
  810a78:	10a36b04 	addi	r2,r2,-29268
  810a7c:	10800017 	ldw	r2,0(r2)
  810a80:	100170fa 	wrctl	ienable,r2
  810a84:	e0bff817 	ldw	r2,-32(fp)
  810a88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a8c:	e0bff517 	ldw	r2,-44(fp)
  810a90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810a94:	0005883a 	mov	r2,zero
  810a98:	e0bfff15 	stw	r2,-4(fp)
  810a9c:	00002006 	br	810b20 <alt_irq_register+0x194>
  810aa0:	e0bffc17 	ldw	r2,-16(fp)
  810aa4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810aa8:	0005303a 	rdctl	r2,status
  810aac:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ab0:	e0fff217 	ldw	r3,-56(fp)
  810ab4:	00bfff84 	movi	r2,-2
  810ab8:	1884703a 	and	r2,r3,r2
  810abc:	1001703a 	wrctl	status,r2
  
  return context;
  810ac0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810ac4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  810ac8:	e0fff317 	ldw	r3,-52(fp)
  810acc:	00800044 	movi	r2,1
  810ad0:	10c4983a 	sll	r2,r2,r3
  810ad4:	0084303a 	nor	r2,zero,r2
  810ad8:	1007883a 	mov	r3,r2
  810adc:	008020b4 	movhi	r2,130
  810ae0:	10a36b04 	addi	r2,r2,-29268
  810ae4:	10800017 	ldw	r2,0(r2)
  810ae8:	1886703a 	and	r3,r3,r2
  810aec:	008020b4 	movhi	r2,130
  810af0:	10a36b04 	addi	r2,r2,-29268
  810af4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810af8:	008020b4 	movhi	r2,130
  810afc:	10a36b04 	addi	r2,r2,-29268
  810b00:	10800017 	ldw	r2,0(r2)
  810b04:	100170fa 	wrctl	ienable,r2
  810b08:	e0bff417 	ldw	r2,-48(fp)
  810b0c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b10:	e0bff117 	ldw	r2,-60(fp)
  810b14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810b18:	0005883a 	mov	r2,zero
  810b1c:	e0bfff15 	stw	r2,-4(fp)
  810b20:	e0bfff17 	ldw	r2,-4(fp)
  810b24:	e0bffb15 	stw	r2,-20(fp)
  810b28:	e0bffa17 	ldw	r2,-24(fp)
  810b2c:	e0bff015 	stw	r2,-64(fp)
  810b30:	e0bff017 	ldw	r2,-64(fp)
  810b34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810b38:	e0bffb17 	ldw	r2,-20(fp)
}
  810b3c:	e037883a 	mov	sp,fp
  810b40:	df000017 	ldw	fp,0(sp)
  810b44:	dec00104 	addi	sp,sp,4
  810b48:	f800283a 	ret

00810b4c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810b4c:	deffeb04 	addi	sp,sp,-84
  810b50:	dfc01415 	stw	ra,80(sp)
  810b54:	df001315 	stw	fp,76(sp)
  810b58:	df001304 	addi	fp,sp,76
  810b5c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810b60:	e0bffd17 	ldw	r2,-12(fp)
  810b64:	1004803a 	cmplt	r2,r2,zero
  810b68:	1000081e 	bne	r2,zero,810b8c <isatty+0x40>
  810b6c:	e0bffd17 	ldw	r2,-12(fp)
  810b70:	10800324 	muli	r2,r2,12
  810b74:	1007883a 	mov	r3,r2
  810b78:	00802074 	movhi	r2,129
  810b7c:	10971f04 	addi	r2,r2,23676
  810b80:	1887883a 	add	r3,r3,r2
  810b84:	e0ffff15 	stw	r3,-4(fp)
  810b88:	00000106 	br	810b90 <isatty+0x44>
  810b8c:	e03fff15 	stw	zero,-4(fp)
  810b90:	e0bfff17 	ldw	r2,-4(fp)
  810b94:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810b98:	e0bfed17 	ldw	r2,-76(fp)
  810b9c:	1005003a 	cmpeq	r2,r2,zero
  810ba0:	10000f1e 	bne	r2,zero,810be0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810ba4:	e0bfed17 	ldw	r2,-76(fp)
  810ba8:	10800017 	ldw	r2,0(r2)
  810bac:	10800817 	ldw	r2,32(r2)
  810bb0:	1004c03a 	cmpne	r2,r2,zero
  810bb4:	1000031e 	bne	r2,zero,810bc4 <isatty+0x78>
    {
      return 1;
  810bb8:	00800044 	movi	r2,1
  810bbc:	e0bffe15 	stw	r2,-8(fp)
  810bc0:	00000c06 	br	810bf4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810bc4:	e17fee04 	addi	r5,fp,-72
  810bc8:	e13ffd17 	ldw	r4,-12(fp)
  810bcc:	08108580 	call	810858 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810bd0:	e0bfef17 	ldw	r2,-68(fp)
  810bd4:	10880020 	cmpeqi	r2,r2,8192
  810bd8:	e0bffe15 	stw	r2,-8(fp)
  810bdc:	00000506 	br	810bf4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810be0:	0810c0c0 	call	810c0c <alt_get_errno>
  810be4:	1007883a 	mov	r3,r2
  810be8:	00801444 	movi	r2,81
  810bec:	18800015 	stw	r2,0(r3)
    return 0;
  810bf0:	e03ffe15 	stw	zero,-8(fp)
  810bf4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810bf8:	e037883a 	mov	sp,fp
  810bfc:	dfc00117 	ldw	ra,4(sp)
  810c00:	df000017 	ldw	fp,0(sp)
  810c04:	dec00204 	addi	sp,sp,8
  810c08:	f800283a 	ret

00810c0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810c0c:	defffd04 	addi	sp,sp,-12
  810c10:	dfc00215 	stw	ra,8(sp)
  810c14:	df000115 	stw	fp,4(sp)
  810c18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810c1c:	00802074 	movhi	r2,129
  810c20:	109c2004 	addi	r2,r2,28800
  810c24:	10800017 	ldw	r2,0(r2)
  810c28:	1005003a 	cmpeq	r2,r2,zero
  810c2c:	1000061e 	bne	r2,zero,810c48 <alt_get_errno+0x3c>
  810c30:	00802074 	movhi	r2,129
  810c34:	109c2004 	addi	r2,r2,28800
  810c38:	10800017 	ldw	r2,0(r2)
  810c3c:	103ee83a 	callr	r2
  810c40:	e0bfff15 	stw	r2,-4(fp)
  810c44:	00000306 	br	810c54 <alt_get_errno+0x48>
  810c48:	008020b4 	movhi	r2,130
  810c4c:	10a36404 	addi	r2,r2,-29296
  810c50:	e0bfff15 	stw	r2,-4(fp)
  810c54:	e0bfff17 	ldw	r2,-4(fp)
}
  810c58:	e037883a 	mov	sp,fp
  810c5c:	dfc00117 	ldw	ra,4(sp)
  810c60:	df000017 	ldw	fp,0(sp)
  810c64:	dec00204 	addi	sp,sp,8
  810c68:	f800283a 	ret

00810c6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810c6c:	defffe04 	addi	sp,sp,-8
  810c70:	dfc00115 	stw	ra,4(sp)
  810c74:	df000015 	stw	fp,0(sp)
  810c78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810c7c:	01002074 	movhi	r4,129
  810c80:	211c2604 	addi	r4,r4,28824
  810c84:	01402074 	movhi	r5,129
  810c88:	2954f604 	addi	r5,r5,21464
  810c8c:	01802074 	movhi	r6,129
  810c90:	319c2604 	addi	r6,r6,28824
  810c94:	0810cec0 	call	810cec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810c98:	01002034 	movhi	r4,128
  810c9c:	21000804 	addi	r4,r4,32
  810ca0:	01402034 	movhi	r5,128
  810ca4:	29400804 	addi	r5,r5,32
  810ca8:	01802034 	movhi	r6,128
  810cac:	31806d04 	addi	r6,r6,436
  810cb0:	0810cec0 	call	810cec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810cb4:	01002074 	movhi	r4,129
  810cb8:	21131c04 	addi	r4,r4,19568
  810cbc:	01402074 	movhi	r5,129
  810cc0:	29531c04 	addi	r5,r5,19568
  810cc4:	01802074 	movhi	r6,129
  810cc8:	3194f604 	addi	r6,r6,21464
  810ccc:	0810cec0 	call	810cec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810cd0:	0813d740 	call	813d74 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810cd4:	08142000 	call	814200 <alt_icache_flush_all>
}
  810cd8:	e037883a 	mov	sp,fp
  810cdc:	dfc00117 	ldw	ra,4(sp)
  810ce0:	df000017 	ldw	fp,0(sp)
  810ce4:	dec00204 	addi	sp,sp,8
  810ce8:	f800283a 	ret

00810cec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810cec:	defffc04 	addi	sp,sp,-16
  810cf0:	df000315 	stw	fp,12(sp)
  810cf4:	df000304 	addi	fp,sp,12
  810cf8:	e13ffd15 	stw	r4,-12(fp)
  810cfc:	e17ffe15 	stw	r5,-8(fp)
  810d00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810d04:	e0fffe17 	ldw	r3,-8(fp)
  810d08:	e0bffd17 	ldw	r2,-12(fp)
  810d0c:	18800e26 	beq	r3,r2,810d48 <alt_load_section+0x5c>
  {
    while( to != end )
  810d10:	00000a06 	br	810d3c <alt_load_section+0x50>
    {
      *to++ = *from++;
  810d14:	e0bffd17 	ldw	r2,-12(fp)
  810d18:	10c00017 	ldw	r3,0(r2)
  810d1c:	e0bffe17 	ldw	r2,-8(fp)
  810d20:	10c00015 	stw	r3,0(r2)
  810d24:	e0bffe17 	ldw	r2,-8(fp)
  810d28:	10800104 	addi	r2,r2,4
  810d2c:	e0bffe15 	stw	r2,-8(fp)
  810d30:	e0bffd17 	ldw	r2,-12(fp)
  810d34:	10800104 	addi	r2,r2,4
  810d38:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810d3c:	e0fffe17 	ldw	r3,-8(fp)
  810d40:	e0bfff17 	ldw	r2,-4(fp)
  810d44:	18bff31e 	bne	r3,r2,810d14 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810d48:	e037883a 	mov	sp,fp
  810d4c:	df000017 	ldw	fp,0(sp)
  810d50:	dec00104 	addi	sp,sp,4
  810d54:	f800283a 	ret

00810d58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810d58:	defff804 	addi	sp,sp,-32
  810d5c:	dfc00715 	stw	ra,28(sp)
  810d60:	df000615 	stw	fp,24(sp)
  810d64:	df000604 	addi	fp,sp,24
  810d68:	e13ffc15 	stw	r4,-16(fp)
  810d6c:	e17ffd15 	stw	r5,-12(fp)
  810d70:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810d74:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810d78:	e0bffc17 	ldw	r2,-16(fp)
  810d7c:	1004803a 	cmplt	r2,r2,zero
  810d80:	1000081e 	bne	r2,zero,810da4 <lseek+0x4c>
  810d84:	e0bffc17 	ldw	r2,-16(fp)
  810d88:	10800324 	muli	r2,r2,12
  810d8c:	1007883a 	mov	r3,r2
  810d90:	00802074 	movhi	r2,129
  810d94:	10971f04 	addi	r2,r2,23676
  810d98:	1887883a 	add	r3,r3,r2
  810d9c:	e0ffff15 	stw	r3,-4(fp)
  810da0:	00000106 	br	810da8 <lseek+0x50>
  810da4:	e03fff15 	stw	zero,-4(fp)
  810da8:	e0bfff17 	ldw	r2,-4(fp)
  810dac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810db0:	e0bffb17 	ldw	r2,-20(fp)
  810db4:	1005003a 	cmpeq	r2,r2,zero
  810db8:	1000111e 	bne	r2,zero,810e00 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810dbc:	e0bffb17 	ldw	r2,-20(fp)
  810dc0:	10800017 	ldw	r2,0(r2)
  810dc4:	10800717 	ldw	r2,28(r2)
  810dc8:	1005003a 	cmpeq	r2,r2,zero
  810dcc:	1000091e 	bne	r2,zero,810df4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810dd0:	e0bffb17 	ldw	r2,-20(fp)
  810dd4:	10800017 	ldw	r2,0(r2)
  810dd8:	10800717 	ldw	r2,28(r2)
  810ddc:	e13ffb17 	ldw	r4,-20(fp)
  810de0:	e17ffd17 	ldw	r5,-12(fp)
  810de4:	e1bffe17 	ldw	r6,-8(fp)
  810de8:	103ee83a 	callr	r2
  810dec:	e0bffa15 	stw	r2,-24(fp)
  810df0:	00000506 	br	810e08 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810df4:	00bfde84 	movi	r2,-134
  810df8:	e0bffa15 	stw	r2,-24(fp)
  810dfc:	00000206 	br	810e08 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810e00:	00bfebc4 	movi	r2,-81
  810e04:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810e08:	e0bffa17 	ldw	r2,-24(fp)
  810e0c:	1004403a 	cmpge	r2,r2,zero
  810e10:	1000071e 	bne	r2,zero,810e30 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810e14:	0810e480 	call	810e48 <alt_get_errno>
  810e18:	1007883a 	mov	r3,r2
  810e1c:	e0bffa17 	ldw	r2,-24(fp)
  810e20:	0085c83a 	sub	r2,zero,r2
  810e24:	18800015 	stw	r2,0(r3)
    rc = -1;
  810e28:	00bfffc4 	movi	r2,-1
  810e2c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810e30:	e0bffa17 	ldw	r2,-24(fp)
}
  810e34:	e037883a 	mov	sp,fp
  810e38:	dfc00117 	ldw	ra,4(sp)
  810e3c:	df000017 	ldw	fp,0(sp)
  810e40:	dec00204 	addi	sp,sp,8
  810e44:	f800283a 	ret

00810e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810e48:	defffd04 	addi	sp,sp,-12
  810e4c:	dfc00215 	stw	ra,8(sp)
  810e50:	df000115 	stw	fp,4(sp)
  810e54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810e58:	00802074 	movhi	r2,129
  810e5c:	109c2004 	addi	r2,r2,28800
  810e60:	10800017 	ldw	r2,0(r2)
  810e64:	1005003a 	cmpeq	r2,r2,zero
  810e68:	1000061e 	bne	r2,zero,810e84 <alt_get_errno+0x3c>
  810e6c:	00802074 	movhi	r2,129
  810e70:	109c2004 	addi	r2,r2,28800
  810e74:	10800017 	ldw	r2,0(r2)
  810e78:	103ee83a 	callr	r2
  810e7c:	e0bfff15 	stw	r2,-4(fp)
  810e80:	00000306 	br	810e90 <alt_get_errno+0x48>
  810e84:	008020b4 	movhi	r2,130
  810e88:	10a36404 	addi	r2,r2,-29296
  810e8c:	e0bfff15 	stw	r2,-4(fp)
  810e90:	e0bfff17 	ldw	r2,-4(fp)
}
  810e94:	e037883a 	mov	sp,fp
  810e98:	dfc00117 	ldw	ra,4(sp)
  810e9c:	df000017 	ldw	fp,0(sp)
  810ea0:	dec00204 	addi	sp,sp,8
  810ea4:	f800283a 	ret

00810ea8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810ea8:	defffd04 	addi	sp,sp,-12
  810eac:	dfc00215 	stw	ra,8(sp)
  810eb0:	df000115 	stw	fp,4(sp)
  810eb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810eb8:	0009883a 	mov	r4,zero
  810ebc:	08117d80 	call	8117d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810ec0:	081180c0 	call	81180c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810ec4:	01002074 	movhi	r4,129
  810ec8:	2114e804 	addi	r4,r4,21408
  810ecc:	01402074 	movhi	r5,129
  810ed0:	2954e804 	addi	r5,r5,21408
  810ed4:	01802074 	movhi	r6,129
  810ed8:	3194e804 	addi	r6,r6,21408
  810edc:	08145c00 	call	8145c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810ee0:	0813ecc0 	call	813ecc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810ee4:	01002074 	movhi	r4,129
  810ee8:	210fcc04 	addi	r4,r4,16176
  810eec:	08148640 	call	814864 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810ef0:	d1275c17 	ldw	r4,-25232(gp)
  810ef4:	d1675d17 	ldw	r5,-25228(gp)
  810ef8:	d1a75e17 	ldw	r6,-25224(gp)
  810efc:	0800d880 	call	800d88 <main>
  810f00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810f04:	01000044 	movi	r4,1
  810f08:	08106d00 	call	8106d0 <close>
  exit (result);
  810f0c:	e13fff17 	ldw	r4,-4(fp)
  810f10:	08148780 	call	814878 <exit>

00810f14 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810f14:	defffe04 	addi	sp,sp,-8
  810f18:	df000115 	stw	fp,4(sp)
  810f1c:	df000104 	addi	fp,sp,4
  810f20:	e13fff15 	stw	r4,-4(fp)
}
  810f24:	e037883a 	mov	sp,fp
  810f28:	df000017 	ldw	fp,0(sp)
  810f2c:	dec00104 	addi	sp,sp,4
  810f30:	f800283a 	ret

00810f34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810f34:	defffe04 	addi	sp,sp,-8
  810f38:	df000115 	stw	fp,4(sp)
  810f3c:	df000104 	addi	fp,sp,4
  810f40:	e13fff15 	stw	r4,-4(fp)
}
  810f44:	e037883a 	mov	sp,fp
  810f48:	df000017 	ldw	fp,0(sp)
  810f4c:	dec00104 	addi	sp,sp,4
  810f50:	f800283a 	ret

00810f54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810f54:	defffc04 	addi	sp,sp,-16
  810f58:	df000315 	stw	fp,12(sp)
  810f5c:	df000304 	addi	fp,sp,12
  810f60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810f64:	e0bffe17 	ldw	r2,-8(fp)
  810f68:	10800217 	ldw	r2,8(r2)
  810f6c:	10d00034 	orhi	r3,r2,16384
  810f70:	e0bffe17 	ldw	r2,-8(fp)
  810f74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810f78:	e03ffd15 	stw	zero,-12(fp)
  810f7c:	00002006 	br	811000 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810f80:	e0bffd17 	ldw	r2,-12(fp)
  810f84:	00c02074 	movhi	r3,129
  810f88:	18d71f04 	addi	r3,r3,23676
  810f8c:	10800324 	muli	r2,r2,12
  810f90:	10c5883a 	add	r2,r2,r3
  810f94:	10c00017 	ldw	r3,0(r2)
  810f98:	e0bffe17 	ldw	r2,-8(fp)
  810f9c:	10800017 	ldw	r2,0(r2)
  810fa0:	1880141e 	bne	r3,r2,810ff4 <alt_file_locked+0xa0>
  810fa4:	e0bffd17 	ldw	r2,-12(fp)
  810fa8:	00c02074 	movhi	r3,129
  810fac:	18d71f04 	addi	r3,r3,23676
  810fb0:	10800324 	muli	r2,r2,12
  810fb4:	10c5883a 	add	r2,r2,r3
  810fb8:	10800204 	addi	r2,r2,8
  810fbc:	10800017 	ldw	r2,0(r2)
  810fc0:	1004403a 	cmpge	r2,r2,zero
  810fc4:	10000b1e 	bne	r2,zero,810ff4 <alt_file_locked+0xa0>
  810fc8:	e0bffd17 	ldw	r2,-12(fp)
  810fcc:	10800324 	muli	r2,r2,12
  810fd0:	1007883a 	mov	r3,r2
  810fd4:	00802074 	movhi	r2,129
  810fd8:	10971f04 	addi	r2,r2,23676
  810fdc:	1887883a 	add	r3,r3,r2
  810fe0:	e0bffe17 	ldw	r2,-8(fp)
  810fe4:	18800326 	beq	r3,r2,810ff4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810fe8:	00bffcc4 	movi	r2,-13
  810fec:	e0bfff15 	stw	r2,-4(fp)
  810ff0:	00000a06 	br	81101c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810ff4:	e0bffd17 	ldw	r2,-12(fp)
  810ff8:	10800044 	addi	r2,r2,1
  810ffc:	e0bffd15 	stw	r2,-12(fp)
  811000:	00802074 	movhi	r2,129
  811004:	109c1f04 	addi	r2,r2,28796
  811008:	10800017 	ldw	r2,0(r2)
  81100c:	1007883a 	mov	r3,r2
  811010:	e0bffd17 	ldw	r2,-12(fp)
  811014:	18bfda2e 	bgeu	r3,r2,810f80 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811018:	e03fff15 	stw	zero,-4(fp)
  81101c:	e0bfff17 	ldw	r2,-4(fp)
}
  811020:	e037883a 	mov	sp,fp
  811024:	df000017 	ldw	fp,0(sp)
  811028:	dec00104 	addi	sp,sp,4
  81102c:	f800283a 	ret

00811030 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811030:	defff404 	addi	sp,sp,-48
  811034:	dfc00b15 	stw	ra,44(sp)
  811038:	df000a15 	stw	fp,40(sp)
  81103c:	df000a04 	addi	fp,sp,40
  811040:	e13ffb15 	stw	r4,-20(fp)
  811044:	e17ffc15 	stw	r5,-16(fp)
  811048:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81104c:	00bfffc4 	movi	r2,-1
  811050:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  811054:	00bffb44 	movi	r2,-19
  811058:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81105c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811060:	e13ffb17 	ldw	r4,-20(fp)
  811064:	01402074 	movhi	r5,129
  811068:	295c1d04 	addi	r5,r5,28788
  81106c:	0813f940 	call	813f94 <alt_find_dev>
  811070:	e0bffa15 	stw	r2,-24(fp)
  811074:	e0bffa17 	ldw	r2,-24(fp)
  811078:	1004c03a 	cmpne	r2,r2,zero
  81107c:	1000051e 	bne	r2,zero,811094 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811080:	e13ffb17 	ldw	r4,-20(fp)
  811084:	08140280 	call	814028 <alt_find_file>
  811088:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81108c:	00800044 	movi	r2,1
  811090:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811094:	e0bffa17 	ldw	r2,-24(fp)
  811098:	1005003a 	cmpeq	r2,r2,zero
  81109c:	1000301e 	bne	r2,zero,811160 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8110a0:	e13ffa17 	ldw	r4,-24(fp)
  8110a4:	08141480 	call	814148 <alt_get_fd>
  8110a8:	e0bff815 	stw	r2,-32(fp)
  8110ac:	e0bff817 	ldw	r2,-32(fp)
  8110b0:	1004403a 	cmpge	r2,r2,zero
  8110b4:	1000031e 	bne	r2,zero,8110c4 <open+0x94>
    {
      status = index;
  8110b8:	e0bff817 	ldw	r2,-32(fp)
  8110bc:	e0bff715 	stw	r2,-36(fp)
  8110c0:	00002906 	br	811168 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  8110c4:	e0bff817 	ldw	r2,-32(fp)
  8110c8:	10800324 	muli	r2,r2,12
  8110cc:	1007883a 	mov	r3,r2
  8110d0:	00802074 	movhi	r2,129
  8110d4:	10971f04 	addi	r2,r2,23676
  8110d8:	1885883a 	add	r2,r3,r2
  8110dc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8110e0:	e0fffc17 	ldw	r3,-16(fp)
  8110e4:	00900034 	movhi	r2,16384
  8110e8:	10bfffc4 	addi	r2,r2,-1
  8110ec:	1886703a 	and	r3,r3,r2
  8110f0:	e0bff917 	ldw	r2,-28(fp)
  8110f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8110f8:	e0bff617 	ldw	r2,-40(fp)
  8110fc:	1004c03a 	cmpne	r2,r2,zero
  811100:	1000061e 	bne	r2,zero,81111c <open+0xec>
  811104:	e13ff917 	ldw	r4,-28(fp)
  811108:	0810f540 	call	810f54 <alt_file_locked>
  81110c:	e0bff715 	stw	r2,-36(fp)
  811110:	e0bff717 	ldw	r2,-36(fp)
  811114:	1004803a 	cmplt	r2,r2,zero
  811118:	1000131e 	bne	r2,zero,811168 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81111c:	e0bffa17 	ldw	r2,-24(fp)
  811120:	10800317 	ldw	r2,12(r2)
  811124:	1005003a 	cmpeq	r2,r2,zero
  811128:	1000091e 	bne	r2,zero,811150 <open+0x120>
  81112c:	e0bffa17 	ldw	r2,-24(fp)
  811130:	10800317 	ldw	r2,12(r2)
  811134:	e13ff917 	ldw	r4,-28(fp)
  811138:	e17ffb17 	ldw	r5,-20(fp)
  81113c:	e1bffc17 	ldw	r6,-16(fp)
  811140:	e1fffd17 	ldw	r7,-12(fp)
  811144:	103ee83a 	callr	r2
  811148:	e0bfff15 	stw	r2,-4(fp)
  81114c:	00000106 	br	811154 <open+0x124>
  811150:	e03fff15 	stw	zero,-4(fp)
  811154:	e0bfff17 	ldw	r2,-4(fp)
  811158:	e0bff715 	stw	r2,-36(fp)
  81115c:	00000206 	br	811168 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811160:	00bffb44 	movi	r2,-19
  811164:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811168:	e0bff717 	ldw	r2,-36(fp)
  81116c:	1004403a 	cmpge	r2,r2,zero
  811170:	1000091e 	bne	r2,zero,811198 <open+0x168>
  {
    alt_release_fd (index);  
  811174:	e13ff817 	ldw	r4,-32(fp)
  811178:	08113980 	call	811398 <alt_release_fd>
    ALT_ERRNO = -status;
  81117c:	08111b80 	call	8111b8 <alt_get_errno>
  811180:	e0fff717 	ldw	r3,-36(fp)
  811184:	00c7c83a 	sub	r3,zero,r3
  811188:	10c00015 	stw	r3,0(r2)
    return -1;
  81118c:	00bfffc4 	movi	r2,-1
  811190:	e0bffe15 	stw	r2,-8(fp)
  811194:	00000206 	br	8111a0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  811198:	e0bff817 	ldw	r2,-32(fp)
  81119c:	e0bffe15 	stw	r2,-8(fp)
  8111a0:	e0bffe17 	ldw	r2,-8(fp)
}
  8111a4:	e037883a 	mov	sp,fp
  8111a8:	dfc00117 	ldw	ra,4(sp)
  8111ac:	df000017 	ldw	fp,0(sp)
  8111b0:	dec00204 	addi	sp,sp,8
  8111b4:	f800283a 	ret

008111b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8111b8:	defffd04 	addi	sp,sp,-12
  8111bc:	dfc00215 	stw	ra,8(sp)
  8111c0:	df000115 	stw	fp,4(sp)
  8111c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8111c8:	00802074 	movhi	r2,129
  8111cc:	109c2004 	addi	r2,r2,28800
  8111d0:	10800017 	ldw	r2,0(r2)
  8111d4:	1005003a 	cmpeq	r2,r2,zero
  8111d8:	1000061e 	bne	r2,zero,8111f4 <alt_get_errno+0x3c>
  8111dc:	00802074 	movhi	r2,129
  8111e0:	109c2004 	addi	r2,r2,28800
  8111e4:	10800017 	ldw	r2,0(r2)
  8111e8:	103ee83a 	callr	r2
  8111ec:	e0bfff15 	stw	r2,-4(fp)
  8111f0:	00000306 	br	811200 <alt_get_errno+0x48>
  8111f4:	008020b4 	movhi	r2,130
  8111f8:	10a36404 	addi	r2,r2,-29296
  8111fc:	e0bfff15 	stw	r2,-4(fp)
  811200:	e0bfff17 	ldw	r2,-4(fp)
}
  811204:	e037883a 	mov	sp,fp
  811208:	dfc00117 	ldw	ra,4(sp)
  81120c:	df000017 	ldw	fp,0(sp)
  811210:	dec00204 	addi	sp,sp,8
  811214:	f800283a 	ret

00811218 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  811218:	defff704 	addi	sp,sp,-36
  81121c:	dfc00815 	stw	ra,32(sp)
  811220:	df000715 	stw	fp,28(sp)
  811224:	df000704 	addi	fp,sp,28
  811228:	e13ffb15 	stw	r4,-20(fp)
  81122c:	e17ffc15 	stw	r5,-16(fp)
  811230:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811234:	e0bffb17 	ldw	r2,-20(fp)
  811238:	1004803a 	cmplt	r2,r2,zero
  81123c:	1000081e 	bne	r2,zero,811260 <read+0x48>
  811240:	e0bffb17 	ldw	r2,-20(fp)
  811244:	10800324 	muli	r2,r2,12
  811248:	1007883a 	mov	r3,r2
  81124c:	00802074 	movhi	r2,129
  811250:	10971f04 	addi	r2,r2,23676
  811254:	1887883a 	add	r3,r3,r2
  811258:	e0ffff15 	stw	r3,-4(fp)
  81125c:	00000106 	br	811264 <read+0x4c>
  811260:	e03fff15 	stw	zero,-4(fp)
  811264:	e0bfff17 	ldw	r2,-4(fp)
  811268:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81126c:	e0bffa17 	ldw	r2,-24(fp)
  811270:	1005003a 	cmpeq	r2,r2,zero
  811274:	1000241e 	bne	r2,zero,811308 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811278:	e0bffa17 	ldw	r2,-24(fp)
  81127c:	10800217 	ldw	r2,8(r2)
  811280:	108000cc 	andi	r2,r2,3
  811284:	10800060 	cmpeqi	r2,r2,1
  811288:	10001a1e 	bne	r2,zero,8112f4 <read+0xdc>
  81128c:	e0bffa17 	ldw	r2,-24(fp)
  811290:	10800017 	ldw	r2,0(r2)
  811294:	10800517 	ldw	r2,20(r2)
  811298:	1005003a 	cmpeq	r2,r2,zero
  81129c:	1000151e 	bne	r2,zero,8112f4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8112a0:	e0bffa17 	ldw	r2,-24(fp)
  8112a4:	10800017 	ldw	r2,0(r2)
  8112a8:	10800517 	ldw	r2,20(r2)
  8112ac:	e17ffc17 	ldw	r5,-16(fp)
  8112b0:	e1bffd17 	ldw	r6,-12(fp)
  8112b4:	e13ffa17 	ldw	r4,-24(fp)
  8112b8:	103ee83a 	callr	r2
  8112bc:	e0bff915 	stw	r2,-28(fp)
  8112c0:	e0bff917 	ldw	r2,-28(fp)
  8112c4:	1004403a 	cmpge	r2,r2,zero
  8112c8:	1000071e 	bne	r2,zero,8112e8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  8112cc:	08113380 	call	811338 <alt_get_errno>
  8112d0:	e0fff917 	ldw	r3,-28(fp)
  8112d4:	00c7c83a 	sub	r3,zero,r3
  8112d8:	10c00015 	stw	r3,0(r2)
          return -1;
  8112dc:	00bfffc4 	movi	r2,-1
  8112e0:	e0bffe15 	stw	r2,-8(fp)
  8112e4:	00000e06 	br	811320 <read+0x108>
        }
        return rval;
  8112e8:	e0bff917 	ldw	r2,-28(fp)
  8112ec:	e0bffe15 	stw	r2,-8(fp)
  8112f0:	00000b06 	br	811320 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8112f4:	08113380 	call	811338 <alt_get_errno>
  8112f8:	1007883a 	mov	r3,r2
  8112fc:	00800344 	movi	r2,13
  811300:	18800015 	stw	r2,0(r3)
  811304:	00000406 	br	811318 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811308:	08113380 	call	811338 <alt_get_errno>
  81130c:	1007883a 	mov	r3,r2
  811310:	00801444 	movi	r2,81
  811314:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811318:	00bfffc4 	movi	r2,-1
  81131c:	e0bffe15 	stw	r2,-8(fp)
  811320:	e0bffe17 	ldw	r2,-8(fp)
}
  811324:	e037883a 	mov	sp,fp
  811328:	dfc00117 	ldw	ra,4(sp)
  81132c:	df000017 	ldw	fp,0(sp)
  811330:	dec00204 	addi	sp,sp,8
  811334:	f800283a 	ret

00811338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811338:	defffd04 	addi	sp,sp,-12
  81133c:	dfc00215 	stw	ra,8(sp)
  811340:	df000115 	stw	fp,4(sp)
  811344:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811348:	00802074 	movhi	r2,129
  81134c:	109c2004 	addi	r2,r2,28800
  811350:	10800017 	ldw	r2,0(r2)
  811354:	1005003a 	cmpeq	r2,r2,zero
  811358:	1000061e 	bne	r2,zero,811374 <alt_get_errno+0x3c>
  81135c:	00802074 	movhi	r2,129
  811360:	109c2004 	addi	r2,r2,28800
  811364:	10800017 	ldw	r2,0(r2)
  811368:	103ee83a 	callr	r2
  81136c:	e0bfff15 	stw	r2,-4(fp)
  811370:	00000306 	br	811380 <alt_get_errno+0x48>
  811374:	008020b4 	movhi	r2,130
  811378:	10a36404 	addi	r2,r2,-29296
  81137c:	e0bfff15 	stw	r2,-4(fp)
  811380:	e0bfff17 	ldw	r2,-4(fp)
}
  811384:	e037883a 	mov	sp,fp
  811388:	dfc00117 	ldw	ra,4(sp)
  81138c:	df000017 	ldw	fp,0(sp)
  811390:	dec00204 	addi	sp,sp,8
  811394:	f800283a 	ret

00811398 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811398:	defffe04 	addi	sp,sp,-8
  81139c:	df000115 	stw	fp,4(sp)
  8113a0:	df000104 	addi	fp,sp,4
  8113a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8113a8:	e0bfff17 	ldw	r2,-4(fp)
  8113ac:	108000d0 	cmplti	r2,r2,3
  8113b0:	10000d1e 	bne	r2,zero,8113e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8113b4:	e0bfff17 	ldw	r2,-4(fp)
  8113b8:	00c02074 	movhi	r3,129
  8113bc:	18d71f04 	addi	r3,r3,23676
  8113c0:	10800324 	muli	r2,r2,12
  8113c4:	10c5883a 	add	r2,r2,r3
  8113c8:	10800204 	addi	r2,r2,8
  8113cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8113d0:	e0bfff17 	ldw	r2,-4(fp)
  8113d4:	00c02074 	movhi	r3,129
  8113d8:	18d71f04 	addi	r3,r3,23676
  8113dc:	10800324 	muli	r2,r2,12
  8113e0:	10c5883a 	add	r2,r2,r3
  8113e4:	10000015 	stw	zero,0(r2)
  }
}
  8113e8:	e037883a 	mov	sp,fp
  8113ec:	df000017 	ldw	fp,0(sp)
  8113f0:	dec00104 	addi	sp,sp,4
  8113f4:	f800283a 	ret

008113f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8113f8:	defff804 	addi	sp,sp,-32
  8113fc:	df000715 	stw	fp,28(sp)
  811400:	df000704 	addi	fp,sp,28
  811404:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811408:	0005303a 	rdctl	r2,status
  81140c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811410:	e0fffb17 	ldw	r3,-20(fp)
  811414:	00bfff84 	movi	r2,-2
  811418:	1884703a 	and	r2,r3,r2
  81141c:	1001703a 	wrctl	status,r2
  
  return context;
  811420:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811424:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811428:	d0a01217 	ldw	r2,-32696(gp)
  81142c:	10c000c4 	addi	r3,r2,3
  811430:	00bfff04 	movi	r2,-4
  811434:	1884703a 	and	r2,r3,r2
  811438:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81143c:	d0e01217 	ldw	r3,-32696(gp)
  811440:	e0bffe17 	ldw	r2,-8(fp)
  811444:	1887883a 	add	r3,r3,r2
  811448:	00804034 	movhi	r2,256
  81144c:	10800004 	addi	r2,r2,0
  811450:	10c0072e 	bgeu	r2,r3,811470 <sbrk+0x78>
  811454:	e0bffd17 	ldw	r2,-12(fp)
  811458:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81145c:	e0bffa17 	ldw	r2,-24(fp)
  811460:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811464:	00bfffc4 	movi	r2,-1
  811468:	e0bfff15 	stw	r2,-4(fp)
  81146c:	00000c06 	br	8114a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  811470:	d0a01217 	ldw	r2,-32696(gp)
  811474:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811478:	d0e01217 	ldw	r3,-32696(gp)
  81147c:	e0bffe17 	ldw	r2,-8(fp)
  811480:	1885883a 	add	r2,r3,r2
  811484:	d0a01215 	stw	r2,-32696(gp)
  811488:	e0bffd17 	ldw	r2,-12(fp)
  81148c:	e0bff915 	stw	r2,-28(fp)
  811490:	e0bff917 	ldw	r2,-28(fp)
  811494:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811498:	e0bffc17 	ldw	r2,-16(fp)
  81149c:	e0bfff15 	stw	r2,-4(fp)
  8114a0:	e0bfff17 	ldw	r2,-4(fp)
} 
  8114a4:	e037883a 	mov	sp,fp
  8114a8:	df000017 	ldw	fp,0(sp)
  8114ac:	dec00104 	addi	sp,sp,4
  8114b0:	f800283a 	ret

008114b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8114b4:	defffa04 	addi	sp,sp,-24
  8114b8:	df000515 	stw	fp,20(sp)
  8114bc:	df000504 	addi	fp,sp,20
  8114c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114c4:	0005303a 	rdctl	r2,status
  8114c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114cc:	e0fffd17 	ldw	r3,-12(fp)
  8114d0:	00bfff84 	movi	r2,-2
  8114d4:	1884703a 	and	r2,r3,r2
  8114d8:	1001703a 	wrctl	status,r2
  
  return context;
  8114dc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8114e0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8114e4:	e0bfff17 	ldw	r2,-4(fp)
  8114e8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8114ec:	e0bffc17 	ldw	r2,-16(fp)
  8114f0:	10c00017 	ldw	r3,0(r2)
  8114f4:	e0bffc17 	ldw	r2,-16(fp)
  8114f8:	10800117 	ldw	r2,4(r2)
  8114fc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  811500:	e0bffc17 	ldw	r2,-16(fp)
  811504:	10c00117 	ldw	r3,4(r2)
  811508:	e0bffc17 	ldw	r2,-16(fp)
  81150c:	10800017 	ldw	r2,0(r2)
  811510:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811514:	e0fffc17 	ldw	r3,-16(fp)
  811518:	e0bffc17 	ldw	r2,-16(fp)
  81151c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  811520:	e0fffc17 	ldw	r3,-16(fp)
  811524:	e0bffc17 	ldw	r2,-16(fp)
  811528:	18800015 	stw	r2,0(r3)
  81152c:	e0bffe17 	ldw	r2,-8(fp)
  811530:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811534:	e0bffb17 	ldw	r2,-20(fp)
  811538:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81153c:	e037883a 	mov	sp,fp
  811540:	df000017 	ldw	fp,0(sp)
  811544:	dec00104 	addi	sp,sp,4
  811548:	f800283a 	ret

0081154c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81154c:	defffb04 	addi	sp,sp,-20
  811550:	dfc00415 	stw	ra,16(sp)
  811554:	df000315 	stw	fp,12(sp)
  811558:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81155c:	d0a01317 	ldw	r2,-32692(gp)
  811560:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811564:	d0a76017 	ldw	r2,-25216(gp)
  811568:	10800044 	addi	r2,r2,1
  81156c:	d0a76015 	stw	r2,-25216(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811570:	00003106 	br	811638 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  811574:	e0bffe17 	ldw	r2,-8(fp)
  811578:	10800017 	ldw	r2,0(r2)
  81157c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811580:	e0bffe17 	ldw	r2,-8(fp)
  811584:	10800403 	ldbu	r2,16(r2)
  811588:	10803fcc 	andi	r2,r2,255
  81158c:	1005003a 	cmpeq	r2,r2,zero
  811590:	1000051e 	bne	r2,zero,8115a8 <alt_tick+0x5c>
  811594:	d0a76017 	ldw	r2,-25216(gp)
  811598:	1004c03a 	cmpne	r2,r2,zero
  81159c:	1000021e 	bne	r2,zero,8115a8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8115a0:	e0bffe17 	ldw	r2,-8(fp)
  8115a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8115a8:	e0bffe17 	ldw	r2,-8(fp)
  8115ac:	10c00217 	ldw	r3,8(r2)
  8115b0:	d0a76017 	ldw	r2,-25216(gp)
  8115b4:	10c01e36 	bltu	r2,r3,811630 <alt_tick+0xe4>
  8115b8:	e0bffe17 	ldw	r2,-8(fp)
  8115bc:	10800403 	ldbu	r2,16(r2)
  8115c0:	10803fcc 	andi	r2,r2,255
  8115c4:	1004c03a 	cmpne	r2,r2,zero
  8115c8:	1000191e 	bne	r2,zero,811630 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8115cc:	e0bffe17 	ldw	r2,-8(fp)
  8115d0:	10c00317 	ldw	r3,12(r2)
  8115d4:	e0bffe17 	ldw	r2,-8(fp)
  8115d8:	11000517 	ldw	r4,20(r2)
  8115dc:	183ee83a 	callr	r3
  8115e0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8115e4:	e0bffd17 	ldw	r2,-12(fp)
  8115e8:	1004c03a 	cmpne	r2,r2,zero
  8115ec:	1000031e 	bne	r2,zero,8115fc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8115f0:	e13ffe17 	ldw	r4,-8(fp)
  8115f4:	08114b40 	call	8114b4 <alt_alarm_stop>
  8115f8:	00000d06 	br	811630 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8115fc:	e0bffe17 	ldw	r2,-8(fp)
  811600:	10c00217 	ldw	r3,8(r2)
  811604:	e0bffd17 	ldw	r2,-12(fp)
  811608:	1887883a 	add	r3,r3,r2
  81160c:	e0bffe17 	ldw	r2,-8(fp)
  811610:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811614:	e0bffe17 	ldw	r2,-8(fp)
  811618:	10c00217 	ldw	r3,8(r2)
  81161c:	d0a76017 	ldw	r2,-25216(gp)
  811620:	1880032e 	bgeu	r3,r2,811630 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811624:	e0fffe17 	ldw	r3,-8(fp)
  811628:	00800044 	movi	r2,1
  81162c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811630:	e0bfff17 	ldw	r2,-4(fp)
  811634:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811638:	d0e01304 	addi	r3,gp,-32692
  81163c:	e0bffe17 	ldw	r2,-8(fp)
  811640:	10ffcc1e 	bne	r2,r3,811574 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  811644:	e037883a 	mov	sp,fp
  811648:	dfc00117 	ldw	ra,4(sp)
  81164c:	df000017 	ldw	fp,0(sp)
  811650:	dec00204 	addi	sp,sp,8
  811654:	f800283a 	ret

00811658 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811658:	defff704 	addi	sp,sp,-36
  81165c:	dfc00815 	stw	ra,32(sp)
  811660:	df000715 	stw	fp,28(sp)
  811664:	df000704 	addi	fp,sp,28
  811668:	e13ffb15 	stw	r4,-20(fp)
  81166c:	e17ffc15 	stw	r5,-16(fp)
  811670:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811674:	e0bffb17 	ldw	r2,-20(fp)
  811678:	1004803a 	cmplt	r2,r2,zero
  81167c:	1000081e 	bne	r2,zero,8116a0 <write+0x48>
  811680:	e0bffb17 	ldw	r2,-20(fp)
  811684:	10800324 	muli	r2,r2,12
  811688:	1007883a 	mov	r3,r2
  81168c:	00802074 	movhi	r2,129
  811690:	10971f04 	addi	r2,r2,23676
  811694:	1887883a 	add	r3,r3,r2
  811698:	e0ffff15 	stw	r3,-4(fp)
  81169c:	00000106 	br	8116a4 <write+0x4c>
  8116a0:	e03fff15 	stw	zero,-4(fp)
  8116a4:	e0bfff17 	ldw	r2,-4(fp)
  8116a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8116ac:	e0bffa17 	ldw	r2,-24(fp)
  8116b0:	1005003a 	cmpeq	r2,r2,zero
  8116b4:	1000241e 	bne	r2,zero,811748 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8116b8:	e0bffa17 	ldw	r2,-24(fp)
  8116bc:	10800217 	ldw	r2,8(r2)
  8116c0:	108000cc 	andi	r2,r2,3
  8116c4:	1005003a 	cmpeq	r2,r2,zero
  8116c8:	10001a1e 	bne	r2,zero,811734 <write+0xdc>
  8116cc:	e0bffa17 	ldw	r2,-24(fp)
  8116d0:	10800017 	ldw	r2,0(r2)
  8116d4:	10800617 	ldw	r2,24(r2)
  8116d8:	1005003a 	cmpeq	r2,r2,zero
  8116dc:	1000151e 	bne	r2,zero,811734 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8116e0:	e0bffa17 	ldw	r2,-24(fp)
  8116e4:	10800017 	ldw	r2,0(r2)
  8116e8:	10800617 	ldw	r2,24(r2)
  8116ec:	e17ffc17 	ldw	r5,-16(fp)
  8116f0:	e1bffd17 	ldw	r6,-12(fp)
  8116f4:	e13ffa17 	ldw	r4,-24(fp)
  8116f8:	103ee83a 	callr	r2
  8116fc:	e0bff915 	stw	r2,-28(fp)
  811700:	e0bff917 	ldw	r2,-28(fp)
  811704:	1004403a 	cmpge	r2,r2,zero
  811708:	1000071e 	bne	r2,zero,811728 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  81170c:	08117780 	call	811778 <alt_get_errno>
  811710:	e0fff917 	ldw	r3,-28(fp)
  811714:	00c7c83a 	sub	r3,zero,r3
  811718:	10c00015 	stw	r3,0(r2)
        return -1;
  81171c:	00bfffc4 	movi	r2,-1
  811720:	e0bffe15 	stw	r2,-8(fp)
  811724:	00000e06 	br	811760 <write+0x108>
      }
      return rval;
  811728:	e0bff917 	ldw	r2,-28(fp)
  81172c:	e0bffe15 	stw	r2,-8(fp)
  811730:	00000b06 	br	811760 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811734:	08117780 	call	811778 <alt_get_errno>
  811738:	1007883a 	mov	r3,r2
  81173c:	00800344 	movi	r2,13
  811740:	18800015 	stw	r2,0(r3)
  811744:	00000406 	br	811758 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811748:	08117780 	call	811778 <alt_get_errno>
  81174c:	1007883a 	mov	r3,r2
  811750:	00801444 	movi	r2,81
  811754:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811758:	00bfffc4 	movi	r2,-1
  81175c:	e0bffe15 	stw	r2,-8(fp)
  811760:	e0bffe17 	ldw	r2,-8(fp)
}
  811764:	e037883a 	mov	sp,fp
  811768:	dfc00117 	ldw	ra,4(sp)
  81176c:	df000017 	ldw	fp,0(sp)
  811770:	dec00204 	addi	sp,sp,8
  811774:	f800283a 	ret

00811778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811778:	defffd04 	addi	sp,sp,-12
  81177c:	dfc00215 	stw	ra,8(sp)
  811780:	df000115 	stw	fp,4(sp)
  811784:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811788:	00802074 	movhi	r2,129
  81178c:	109c2004 	addi	r2,r2,28800
  811790:	10800017 	ldw	r2,0(r2)
  811794:	1005003a 	cmpeq	r2,r2,zero
  811798:	1000061e 	bne	r2,zero,8117b4 <alt_get_errno+0x3c>
  81179c:	00802074 	movhi	r2,129
  8117a0:	109c2004 	addi	r2,r2,28800
  8117a4:	10800017 	ldw	r2,0(r2)
  8117a8:	103ee83a 	callr	r2
  8117ac:	e0bfff15 	stw	r2,-4(fp)
  8117b0:	00000306 	br	8117c0 <alt_get_errno+0x48>
  8117b4:	008020b4 	movhi	r2,130
  8117b8:	10a36404 	addi	r2,r2,-29296
  8117bc:	e0bfff15 	stw	r2,-4(fp)
  8117c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8117c4:	e037883a 	mov	sp,fp
  8117c8:	dfc00117 	ldw	ra,4(sp)
  8117cc:	df000017 	ldw	fp,0(sp)
  8117d0:	dec00204 	addi	sp,sp,8
  8117d4:	f800283a 	ret

008117d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8117d8:	defffd04 	addi	sp,sp,-12
  8117dc:	dfc00215 	stw	ra,8(sp)
  8117e0:	df000115 	stw	fp,4(sp)
  8117e4:	df000104 	addi	fp,sp,4
  8117e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8117ec:	08146680 	call	814668 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8117f0:	00800044 	movi	r2,1
  8117f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8117f8:	e037883a 	mov	sp,fp
  8117fc:	dfc00117 	ldw	ra,4(sp)
  811800:	df000017 	ldw	fp,0(sp)
  811804:	dec00204 	addi	sp,sp,8
  811808:	f800283a 	ret

0081180c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81180c:	defffe04 	addi	sp,sp,-8
  811810:	dfc00115 	stw	ra,4(sp)
  811814:	df000015 	stw	fp,0(sp)
  811818:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81181c:	01004074 	movhi	r4,257
  811820:	21040804 	addi	r4,r4,4128
  811824:	000b883a 	mov	r5,zero
  811828:	01800084 	movi	r6,2
  81182c:	01c0fa04 	movi	r7,1000
  811830:	08133340 	call	813334 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811834:	01002074 	movhi	r4,129
  811838:	21178904 	addi	r4,r4,24100
  81183c:	000b883a 	mov	r5,zero
  811840:	01800044 	movi	r6,1
  811844:	0811a200 	call	811a20 <altera_avalon_jtag_uart_init>
  811848:	01002074 	movhi	r4,129
  81184c:	21177f04 	addi	r4,r4,24060
  811850:	08118a00 	call	8118a0 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811854:	01002074 	movhi	r4,129
  811858:	211ba104 	addi	r4,r4,28292
  81185c:	08131300 	call	813130 <altera_avalon_lcd_16207_init>
  811860:	01002074 	movhi	r4,129
  811864:	211b9704 	addi	r4,r4,28252
  811868:	08118a00 	call	8118a0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  81186c:	01002074 	movhi	r4,129
  811870:	211be904 	addi	r4,r4,28580
  811874:	000b883a 	mov	r5,zero
  811878:	000d883a 	mov	r6,zero
  81187c:	08134bc0 	call	8134bc <altera_avalon_uart_init>
  811880:	01002074 	movhi	r4,129
  811884:	211bdf04 	addi	r4,r4,28540
  811888:	08118a00 	call	8118a0 <alt_dev_reg>
}
  81188c:	e037883a 	mov	sp,fp
  811890:	dfc00117 	ldw	ra,4(sp)
  811894:	df000017 	ldw	fp,0(sp)
  811898:	dec00204 	addi	sp,sp,8
  81189c:	f800283a 	ret

008118a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8118a0:	defffd04 	addi	sp,sp,-12
  8118a4:	dfc00215 	stw	ra,8(sp)
  8118a8:	df000115 	stw	fp,4(sp)
  8118ac:	df000104 	addi	fp,sp,4
  8118b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8118b4:	e13fff17 	ldw	r4,-4(fp)
  8118b8:	01402074 	movhi	r5,129
  8118bc:	295c1d04 	addi	r5,r5,28788
  8118c0:	0813db80 	call	813db8 <alt_dev_llist_insert>
}
  8118c4:	e037883a 	mov	sp,fp
  8118c8:	dfc00117 	ldw	ra,4(sp)
  8118cc:	df000017 	ldw	fp,0(sp)
  8118d0:	dec00204 	addi	sp,sp,8
  8118d4:	f800283a 	ret

008118d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8118d8:	defffa04 	addi	sp,sp,-24
  8118dc:	dfc00515 	stw	ra,20(sp)
  8118e0:	df000415 	stw	fp,16(sp)
  8118e4:	df000404 	addi	fp,sp,16
  8118e8:	e13ffd15 	stw	r4,-12(fp)
  8118ec:	e17ffe15 	stw	r5,-8(fp)
  8118f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8118f4:	e0bffd17 	ldw	r2,-12(fp)
  8118f8:	10800017 	ldw	r2,0(r2)
  8118fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811900:	e0bffc17 	ldw	r2,-16(fp)
  811904:	11000a04 	addi	r4,r2,40
  811908:	e0bffd17 	ldw	r2,-12(fp)
  81190c:	11c00217 	ldw	r7,8(r2)
  811910:	e17ffe17 	ldw	r5,-8(fp)
  811914:	e1bfff17 	ldw	r6,-4(fp)
  811918:	0811f200 	call	811f20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81191c:	e037883a 	mov	sp,fp
  811920:	dfc00117 	ldw	ra,4(sp)
  811924:	df000017 	ldw	fp,0(sp)
  811928:	dec00204 	addi	sp,sp,8
  81192c:	f800283a 	ret

00811930 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811930:	defffa04 	addi	sp,sp,-24
  811934:	dfc00515 	stw	ra,20(sp)
  811938:	df000415 	stw	fp,16(sp)
  81193c:	df000404 	addi	fp,sp,16
  811940:	e13ffd15 	stw	r4,-12(fp)
  811944:	e17ffe15 	stw	r5,-8(fp)
  811948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81194c:	e0bffd17 	ldw	r2,-12(fp)
  811950:	10800017 	ldw	r2,0(r2)
  811954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811958:	e0bffc17 	ldw	r2,-16(fp)
  81195c:	11000a04 	addi	r4,r2,40
  811960:	e0bffd17 	ldw	r2,-12(fp)
  811964:	11c00217 	ldw	r7,8(r2)
  811968:	e17ffe17 	ldw	r5,-8(fp)
  81196c:	e1bfff17 	ldw	r6,-4(fp)
  811970:	08121440 	call	812144 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811974:	e037883a 	mov	sp,fp
  811978:	dfc00117 	ldw	ra,4(sp)
  81197c:	df000017 	ldw	fp,0(sp)
  811980:	dec00204 	addi	sp,sp,8
  811984:	f800283a 	ret

00811988 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811988:	defffc04 	addi	sp,sp,-16
  81198c:	dfc00315 	stw	ra,12(sp)
  811990:	df000215 	stw	fp,8(sp)
  811994:	df000204 	addi	fp,sp,8
  811998:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81199c:	e0bfff17 	ldw	r2,-4(fp)
  8119a0:	10800017 	ldw	r2,0(r2)
  8119a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8119a8:	e0bffe17 	ldw	r2,-8(fp)
  8119ac:	11000a04 	addi	r4,r2,40
  8119b0:	e0bfff17 	ldw	r2,-4(fp)
  8119b4:	11400217 	ldw	r5,8(r2)
  8119b8:	0811db80 	call	811db8 <altera_avalon_jtag_uart_close>
}
  8119bc:	e037883a 	mov	sp,fp
  8119c0:	dfc00117 	ldw	ra,4(sp)
  8119c4:	df000017 	ldw	fp,0(sp)
  8119c8:	dec00204 	addi	sp,sp,8
  8119cc:	f800283a 	ret

008119d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8119d0:	defffa04 	addi	sp,sp,-24
  8119d4:	dfc00515 	stw	ra,20(sp)
  8119d8:	df000415 	stw	fp,16(sp)
  8119dc:	df000404 	addi	fp,sp,16
  8119e0:	e13ffd15 	stw	r4,-12(fp)
  8119e4:	e17ffe15 	stw	r5,-8(fp)
  8119e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8119ec:	e0bffd17 	ldw	r2,-12(fp)
  8119f0:	10800017 	ldw	r2,0(r2)
  8119f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8119f8:	e0bffc17 	ldw	r2,-16(fp)
  8119fc:	11000a04 	addi	r4,r2,40
  811a00:	e17ffe17 	ldw	r5,-8(fp)
  811a04:	e1bfff17 	ldw	r6,-4(fp)
  811a08:	0811e2c0 	call	811e2c <altera_avalon_jtag_uart_ioctl>
}
  811a0c:	e037883a 	mov	sp,fp
  811a10:	dfc00117 	ldw	ra,4(sp)
  811a14:	df000017 	ldw	fp,0(sp)
  811a18:	dec00204 	addi	sp,sp,8
  811a1c:	f800283a 	ret

00811a20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811a20:	defffa04 	addi	sp,sp,-24
  811a24:	dfc00515 	stw	ra,20(sp)
  811a28:	df000415 	stw	fp,16(sp)
  811a2c:	df000404 	addi	fp,sp,16
  811a30:	e13ffd15 	stw	r4,-12(fp)
  811a34:	e17ffe15 	stw	r5,-8(fp)
  811a38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811a3c:	e0fffd17 	ldw	r3,-12(fp)
  811a40:	00800044 	movi	r2,1
  811a44:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811a48:	e0bffd17 	ldw	r2,-12(fp)
  811a4c:	10800017 	ldw	r2,0(r2)
  811a50:	11000104 	addi	r4,r2,4
  811a54:	e0bffd17 	ldw	r2,-12(fp)
  811a58:	10800817 	ldw	r2,32(r2)
  811a5c:	1007883a 	mov	r3,r2
  811a60:	2005883a 	mov	r2,r4
  811a64:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811a68:	e13ffe17 	ldw	r4,-8(fp)
  811a6c:	e17fff17 	ldw	r5,-4(fp)
  811a70:	d8000015 	stw	zero,0(sp)
  811a74:	01802074 	movhi	r6,129
  811a78:	3186b804 	addi	r6,r6,6880
  811a7c:	e1fffd17 	ldw	r7,-12(fp)
  811a80:	08142300 	call	814230 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811a84:	e0bffd17 	ldw	r2,-12(fp)
  811a88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811a8c:	e0bffd17 	ldw	r2,-12(fp)
  811a90:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811a94:	008020b4 	movhi	r2,130
  811a98:	10a36f04 	addi	r2,r2,-29252
  811a9c:	10800017 	ldw	r2,0(r2)
  811aa0:	100b883a 	mov	r5,r2
  811aa4:	01802074 	movhi	r6,129
  811aa8:	31874204 	addi	r6,r6,7432
  811aac:	e1fffd17 	ldw	r7,-12(fp)
  811ab0:	081057c0 	call	81057c <alt_alarm_start>
  811ab4:	1004403a 	cmpge	r2,r2,zero
  811ab8:	1000041e 	bne	r2,zero,811acc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811abc:	e0fffd17 	ldw	r3,-12(fp)
  811ac0:	00a00034 	movhi	r2,32768
  811ac4:	10bfffc4 	addi	r2,r2,-1
  811ac8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811acc:	e037883a 	mov	sp,fp
  811ad0:	dfc00117 	ldw	ra,4(sp)
  811ad4:	df000017 	ldw	fp,0(sp)
  811ad8:	dec00204 	addi	sp,sp,8
  811adc:	f800283a 	ret

00811ae0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811ae0:	defff804 	addi	sp,sp,-32
  811ae4:	df000715 	stw	fp,28(sp)
  811ae8:	df000704 	addi	fp,sp,28
  811aec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811af0:	e0bfff17 	ldw	r2,-4(fp)
  811af4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811af8:	e0bffe17 	ldw	r2,-8(fp)
  811afc:	10800017 	ldw	r2,0(r2)
  811b00:	e0bffd15 	stw	r2,-12(fp)
  811b04:	00000006 	br	811b08 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811b08:	e0bffd17 	ldw	r2,-12(fp)
  811b0c:	10800104 	addi	r2,r2,4
  811b10:	10800037 	ldwio	r2,0(r2)
  811b14:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811b18:	e0bffc17 	ldw	r2,-16(fp)
  811b1c:	1080c00c 	andi	r2,r2,768
  811b20:	1005003a 	cmpeq	r2,r2,zero
  811b24:	1000741e 	bne	r2,zero,811cf8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811b28:	e0bffc17 	ldw	r2,-16(fp)
  811b2c:	1080400c 	andi	r2,r2,256
  811b30:	1005003a 	cmpeq	r2,r2,zero
  811b34:	1000351e 	bne	r2,zero,811c0c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811b38:	00800074 	movhi	r2,1
  811b3c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b40:	e0bffe17 	ldw	r2,-8(fp)
  811b44:	10800a17 	ldw	r2,40(r2)
  811b48:	10800044 	addi	r2,r2,1
  811b4c:	1081ffcc 	andi	r2,r2,2047
  811b50:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811b54:	e0bffe17 	ldw	r2,-8(fp)
  811b58:	10c00b17 	ldw	r3,44(r2)
  811b5c:	e0bffa17 	ldw	r2,-24(fp)
  811b60:	18801626 	beq	r3,r2,811bbc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811b64:	e0bffd17 	ldw	r2,-12(fp)
  811b68:	10800037 	ldwio	r2,0(r2)
  811b6c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811b70:	e0bffb17 	ldw	r2,-20(fp)
  811b74:	10a0000c 	andi	r2,r2,32768
  811b78:	1005003a 	cmpeq	r2,r2,zero
  811b7c:	10000f1e 	bne	r2,zero,811bbc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811b80:	e0bffe17 	ldw	r2,-8(fp)
  811b84:	10c00a17 	ldw	r3,40(r2)
  811b88:	e0bffb17 	ldw	r2,-20(fp)
  811b8c:	1009883a 	mov	r4,r2
  811b90:	e0bffe17 	ldw	r2,-8(fp)
  811b94:	1885883a 	add	r2,r3,r2
  811b98:	10800e04 	addi	r2,r2,56
  811b9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ba0:	e0bffe17 	ldw	r2,-8(fp)
  811ba4:	10800a17 	ldw	r2,40(r2)
  811ba8:	10800044 	addi	r2,r2,1
  811bac:	10c1ffcc 	andi	r3,r2,2047
  811bb0:	e0bffe17 	ldw	r2,-8(fp)
  811bb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811bb8:	003fe106 	br	811b40 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811bbc:	e0bffb17 	ldw	r2,-20(fp)
  811bc0:	10bfffec 	andhi	r2,r2,65535
  811bc4:	1005003a 	cmpeq	r2,r2,zero
  811bc8:	1000101e 	bne	r2,zero,811c0c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10c00817 	ldw	r3,32(r2)
  811bd4:	00bfff84 	movi	r2,-2
  811bd8:	1886703a 	and	r3,r3,r2
  811bdc:	e0bffe17 	ldw	r2,-8(fp)
  811be0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811be4:	e0bffd17 	ldw	r2,-12(fp)
  811be8:	11000104 	addi	r4,r2,4
  811bec:	e0bffe17 	ldw	r2,-8(fp)
  811bf0:	10800817 	ldw	r2,32(r2)
  811bf4:	1007883a 	mov	r3,r2
  811bf8:	2005883a 	mov	r2,r4
  811bfc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811c00:	e0bffd17 	ldw	r2,-12(fp)
  811c04:	10800104 	addi	r2,r2,4
  811c08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811c0c:	e0bffc17 	ldw	r2,-16(fp)
  811c10:	1080800c 	andi	r2,r2,512
  811c14:	1005003a 	cmpeq	r2,r2,zero
  811c18:	103fbb1e 	bne	r2,zero,811b08 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811c1c:	e0bffc17 	ldw	r2,-16(fp)
  811c20:	10bfffec 	andhi	r2,r2,65535
  811c24:	1004d43a 	srli	r2,r2,16
  811c28:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811c2c:	00001506 	br	811c84 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811c30:	e13ffd17 	ldw	r4,-12(fp)
  811c34:	e0bffe17 	ldw	r2,-8(fp)
  811c38:	10c00d17 	ldw	r3,52(r2)
  811c3c:	e0bffe17 	ldw	r2,-8(fp)
  811c40:	1885883a 	add	r2,r3,r2
  811c44:	10820e04 	addi	r2,r2,2104
  811c48:	10800003 	ldbu	r2,0(r2)
  811c4c:	10c03fcc 	andi	r3,r2,255
  811c50:	18c0201c 	xori	r3,r3,128
  811c54:	18ffe004 	addi	r3,r3,-128
  811c58:	2005883a 	mov	r2,r4
  811c5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811c60:	e0bffe17 	ldw	r2,-8(fp)
  811c64:	10800d17 	ldw	r2,52(r2)
  811c68:	10800044 	addi	r2,r2,1
  811c6c:	10c1ffcc 	andi	r3,r2,2047
  811c70:	e0bffe17 	ldw	r2,-8(fp)
  811c74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811c78:	e0bff917 	ldw	r2,-28(fp)
  811c7c:	10bfffc4 	addi	r2,r2,-1
  811c80:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811c84:	e0bff917 	ldw	r2,-28(fp)
  811c88:	1005003a 	cmpeq	r2,r2,zero
  811c8c:	1000051e 	bne	r2,zero,811ca4 <altera_avalon_jtag_uart_irq+0x1c4>
  811c90:	e0bffe17 	ldw	r2,-8(fp)
  811c94:	10c00d17 	ldw	r3,52(r2)
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	10800c17 	ldw	r2,48(r2)
  811ca0:	18bfe31e 	bne	r3,r2,811c30 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811ca4:	e0bff917 	ldw	r2,-28(fp)
  811ca8:	1005003a 	cmpeq	r2,r2,zero
  811cac:	103f961e 	bne	r2,zero,811b08 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811cb0:	e0bffe17 	ldw	r2,-8(fp)
  811cb4:	10c00817 	ldw	r3,32(r2)
  811cb8:	00bfff44 	movi	r2,-3
  811cbc:	1886703a 	and	r3,r3,r2
  811cc0:	e0bffe17 	ldw	r2,-8(fp)
  811cc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811cc8:	e0bffe17 	ldw	r2,-8(fp)
  811ccc:	10800017 	ldw	r2,0(r2)
  811cd0:	11000104 	addi	r4,r2,4
  811cd4:	e0bffe17 	ldw	r2,-8(fp)
  811cd8:	10800817 	ldw	r2,32(r2)
  811cdc:	1007883a 	mov	r3,r2
  811ce0:	2005883a 	mov	r2,r4
  811ce4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811ce8:	e0bffd17 	ldw	r2,-12(fp)
  811cec:	10800104 	addi	r2,r2,4
  811cf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811cf4:	003f8406 	br	811b08 <altera_avalon_jtag_uart_irq+0x28>
}
  811cf8:	e037883a 	mov	sp,fp
  811cfc:	df000017 	ldw	fp,0(sp)
  811d00:	dec00104 	addi	sp,sp,4
  811d04:	f800283a 	ret

00811d08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811d08:	defffc04 	addi	sp,sp,-16
  811d0c:	df000315 	stw	fp,12(sp)
  811d10:	df000304 	addi	fp,sp,12
  811d14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811d18:	e0bfff17 	ldw	r2,-4(fp)
  811d1c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811d20:	e0bffe17 	ldw	r2,-8(fp)
  811d24:	10800017 	ldw	r2,0(r2)
  811d28:	10800104 	addi	r2,r2,4
  811d2c:	10800037 	ldwio	r2,0(r2)
  811d30:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811d34:	e0bffd17 	ldw	r2,-12(fp)
  811d38:	1081000c 	andi	r2,r2,1024
  811d3c:	1005003a 	cmpeq	r2,r2,zero
  811d40:	10000c1e 	bne	r2,zero,811d74 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811d44:	e0bffe17 	ldw	r2,-8(fp)
  811d48:	10800017 	ldw	r2,0(r2)
  811d4c:	11000104 	addi	r4,r2,4
  811d50:	e0bffe17 	ldw	r2,-8(fp)
  811d54:	10800817 	ldw	r2,32(r2)
  811d58:	10810014 	ori	r2,r2,1024
  811d5c:	1007883a 	mov	r3,r2
  811d60:	2005883a 	mov	r2,r4
  811d64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811d68:	e0bffe17 	ldw	r2,-8(fp)
  811d6c:	10000915 	stw	zero,36(r2)
  811d70:	00000a06 	br	811d9c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811d74:	e0bffe17 	ldw	r2,-8(fp)
  811d78:	10c00917 	ldw	r3,36(r2)
  811d7c:	00a00034 	movhi	r2,32768
  811d80:	10bfff04 	addi	r2,r2,-4
  811d84:	10c00536 	bltu	r2,r3,811d9c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811d88:	e0bffe17 	ldw	r2,-8(fp)
  811d8c:	10800917 	ldw	r2,36(r2)
  811d90:	10c00044 	addi	r3,r2,1
  811d94:	e0bffe17 	ldw	r2,-8(fp)
  811d98:	10c00915 	stw	r3,36(r2)
  811d9c:	008020b4 	movhi	r2,130
  811da0:	10a36f04 	addi	r2,r2,-29252
  811da4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811da8:	e037883a 	mov	sp,fp
  811dac:	df000017 	ldw	fp,0(sp)
  811db0:	dec00104 	addi	sp,sp,4
  811db4:	f800283a 	ret

00811db8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811db8:	defffc04 	addi	sp,sp,-16
  811dbc:	df000315 	stw	fp,12(sp)
  811dc0:	df000304 	addi	fp,sp,12
  811dc4:	e13ffd15 	stw	r4,-12(fp)
  811dc8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811dcc:	00000706 	br	811dec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811dd0:	e0bffe17 	ldw	r2,-8(fp)
  811dd4:	1090000c 	andi	r2,r2,16384
  811dd8:	1005003a 	cmpeq	r2,r2,zero
  811ddc:	1000031e 	bne	r2,zero,811dec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811de0:	00bffd44 	movi	r2,-11
  811de4:	e0bfff15 	stw	r2,-4(fp)
  811de8:	00000b06 	br	811e18 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811dec:	e0bffd17 	ldw	r2,-12(fp)
  811df0:	10c00d17 	ldw	r3,52(r2)
  811df4:	e0bffd17 	ldw	r2,-12(fp)
  811df8:	10800c17 	ldw	r2,48(r2)
  811dfc:	18800526 	beq	r3,r2,811e14 <altera_avalon_jtag_uart_close+0x5c>
  811e00:	e0bffd17 	ldw	r2,-12(fp)
  811e04:	10c00917 	ldw	r3,36(r2)
  811e08:	e0bffd17 	ldw	r2,-12(fp)
  811e0c:	10800117 	ldw	r2,4(r2)
  811e10:	18bfef36 	bltu	r3,r2,811dd0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811e14:	e03fff15 	stw	zero,-4(fp)
  811e18:	e0bfff17 	ldw	r2,-4(fp)
}
  811e1c:	e037883a 	mov	sp,fp
  811e20:	df000017 	ldw	fp,0(sp)
  811e24:	dec00104 	addi	sp,sp,4
  811e28:	f800283a 	ret

00811e2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811e2c:	defff804 	addi	sp,sp,-32
  811e30:	df000715 	stw	fp,28(sp)
  811e34:	df000704 	addi	fp,sp,28
  811e38:	e13ffb15 	stw	r4,-20(fp)
  811e3c:	e17ffc15 	stw	r5,-16(fp)
  811e40:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811e44:	00bff9c4 	movi	r2,-25
  811e48:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811e4c:	e0bffc17 	ldw	r2,-16(fp)
  811e50:	e0bfff15 	stw	r2,-4(fp)
  811e54:	e0ffff17 	ldw	r3,-4(fp)
  811e58:	189a8060 	cmpeqi	r2,r3,27137
  811e5c:	1000041e 	bne	r2,zero,811e70 <altera_avalon_jtag_uart_ioctl+0x44>
  811e60:	e0ffff17 	ldw	r3,-4(fp)
  811e64:	189a80a0 	cmpeqi	r2,r3,27138
  811e68:	10001b1e 	bne	r2,zero,811ed8 <altera_avalon_jtag_uart_ioctl+0xac>
  811e6c:	00002706 	br	811f0c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811e70:	e0bffb17 	ldw	r2,-20(fp)
  811e74:	10c00117 	ldw	r3,4(r2)
  811e78:	00a00034 	movhi	r2,32768
  811e7c:	10bfffc4 	addi	r2,r2,-1
  811e80:	18802226 	beq	r3,r2,811f0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811e84:	e0bffd17 	ldw	r2,-12(fp)
  811e88:	10800017 	ldw	r2,0(r2)
  811e8c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811e90:	e0bff917 	ldw	r2,-28(fp)
  811e94:	10800090 	cmplti	r2,r2,2
  811e98:	1000071e 	bne	r2,zero,811eb8 <altera_avalon_jtag_uart_ioctl+0x8c>
  811e9c:	e0fff917 	ldw	r3,-28(fp)
  811ea0:	00a00034 	movhi	r2,32768
  811ea4:	10bfffc4 	addi	r2,r2,-1
  811ea8:	18800326 	beq	r3,r2,811eb8 <altera_avalon_jtag_uart_ioctl+0x8c>
  811eac:	e0bff917 	ldw	r2,-28(fp)
  811eb0:	e0bffe15 	stw	r2,-8(fp)
  811eb4:	00000306 	br	811ec4 <altera_avalon_jtag_uart_ioctl+0x98>
  811eb8:	00e00034 	movhi	r3,32768
  811ebc:	18ffff84 	addi	r3,r3,-2
  811ec0:	e0fffe15 	stw	r3,-8(fp)
  811ec4:	e0bffb17 	ldw	r2,-20(fp)
  811ec8:	e0fffe17 	ldw	r3,-8(fp)
  811ecc:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811ed0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811ed4:	00000d06 	br	811f0c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811ed8:	e0bffb17 	ldw	r2,-20(fp)
  811edc:	10c00117 	ldw	r3,4(r2)
  811ee0:	00a00034 	movhi	r2,32768
  811ee4:	10bfffc4 	addi	r2,r2,-1
  811ee8:	18800826 	beq	r3,r2,811f0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811eec:	e13ffd17 	ldw	r4,-12(fp)
  811ef0:	e0bffb17 	ldw	r2,-20(fp)
  811ef4:	10c00917 	ldw	r3,36(r2)
  811ef8:	e0bffb17 	ldw	r2,-20(fp)
  811efc:	10800117 	ldw	r2,4(r2)
  811f00:	1885803a 	cmpltu	r2,r3,r2
  811f04:	20800015 	stw	r2,0(r4)
      rc = 0;
  811f08:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811f0c:	e0bffa17 	ldw	r2,-24(fp)
}
  811f10:	e037883a 	mov	sp,fp
  811f14:	df000017 	ldw	fp,0(sp)
  811f18:	dec00104 	addi	sp,sp,4
  811f1c:	f800283a 	ret

00811f20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811f20:	defff204 	addi	sp,sp,-56
  811f24:	dfc00d15 	stw	ra,52(sp)
  811f28:	df000c15 	stw	fp,48(sp)
  811f2c:	df000c04 	addi	fp,sp,48
  811f30:	e13ffb15 	stw	r4,-20(fp)
  811f34:	e17ffc15 	stw	r5,-16(fp)
  811f38:	e1bffd15 	stw	r6,-12(fp)
  811f3c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811f40:	e0bffc17 	ldw	r2,-16(fp)
  811f44:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811f48:	00004806 	br	81206c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811f4c:	e0bffb17 	ldw	r2,-20(fp)
  811f50:	10800a17 	ldw	r2,40(r2)
  811f54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811f58:	e0bffb17 	ldw	r2,-20(fp)
  811f5c:	10800b17 	ldw	r2,44(r2)
  811f60:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  811f64:	e0fff717 	ldw	r3,-36(fp)
  811f68:	e0bff617 	ldw	r2,-40(fp)
  811f6c:	18800536 	bltu	r3,r2,811f84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811f70:	e0bff717 	ldw	r2,-36(fp)
  811f74:	e0fff617 	ldw	r3,-40(fp)
  811f78:	10c5c83a 	sub	r2,r2,r3
  811f7c:	e0bff815 	stw	r2,-32(fp)
  811f80:	00000406 	br	811f94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811f84:	00820004 	movi	r2,2048
  811f88:	e0fff617 	ldw	r3,-40(fp)
  811f8c:	10c5c83a 	sub	r2,r2,r3
  811f90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  811f94:	e0bff817 	ldw	r2,-32(fp)
  811f98:	1005003a 	cmpeq	r2,r2,zero
  811f9c:	10001f1e 	bne	r2,zero,81201c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  811fa0:	e0fffd17 	ldw	r3,-12(fp)
  811fa4:	e0bff817 	ldw	r2,-32(fp)
  811fa8:	1880022e 	bgeu	r3,r2,811fb4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  811fac:	e0bffd17 	ldw	r2,-12(fp)
  811fb0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811fb4:	e0bffb17 	ldw	r2,-20(fp)
  811fb8:	10c00e04 	addi	r3,r2,56
  811fbc:	e0bff617 	ldw	r2,-40(fp)
  811fc0:	1887883a 	add	r3,r3,r2
  811fc4:	e0bffa17 	ldw	r2,-24(fp)
  811fc8:	1009883a 	mov	r4,r2
  811fcc:	180b883a 	mov	r5,r3
  811fd0:	e1bff817 	ldw	r6,-32(fp)
  811fd4:	08032940 	call	803294 <memcpy>
      ptr   += n;
  811fd8:	e0fff817 	ldw	r3,-32(fp)
  811fdc:	e0bffa17 	ldw	r2,-24(fp)
  811fe0:	10c5883a 	add	r2,r2,r3
  811fe4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  811fe8:	e0fffd17 	ldw	r3,-12(fp)
  811fec:	e0bff817 	ldw	r2,-32(fp)
  811ff0:	1885c83a 	sub	r2,r3,r2
  811ff4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ff8:	e0fff617 	ldw	r3,-40(fp)
  811ffc:	e0bff817 	ldw	r2,-32(fp)
  812000:	1885883a 	add	r2,r3,r2
  812004:	10c1ffcc 	andi	r3,r2,2047
  812008:	e0bffb17 	ldw	r2,-20(fp)
  81200c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  812010:	e0bffd17 	ldw	r2,-12(fp)
  812014:	10800048 	cmpgei	r2,r2,1
  812018:	103fcc1e 	bne	r2,zero,811f4c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81201c:	e0fffa17 	ldw	r3,-24(fp)
  812020:	e0bffc17 	ldw	r2,-16(fp)
  812024:	1880141e 	bne	r3,r2,812078 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812028:	e0bffe17 	ldw	r2,-8(fp)
  81202c:	1090000c 	andi	r2,r2,16384
  812030:	1004c03a 	cmpne	r2,r2,zero
  812034:	1000101e 	bne	r2,zero,812078 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812038:	e0bffb17 	ldw	r2,-20(fp)
  81203c:	10c00a17 	ldw	r3,40(r2)
  812040:	e0bff717 	ldw	r2,-36(fp)
  812044:	1880051e 	bne	r3,r2,81205c <altera_avalon_jtag_uart_read+0x13c>
  812048:	e0bffb17 	ldw	r2,-20(fp)
  81204c:	10c00917 	ldw	r3,36(r2)
  812050:	e0bffb17 	ldw	r2,-20(fp)
  812054:	10800117 	ldw	r2,4(r2)
  812058:	18bff736 	bltu	r3,r2,812038 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81205c:	e0bffb17 	ldw	r2,-20(fp)
  812060:	10c00a17 	ldw	r3,40(r2)
  812064:	e0bff717 	ldw	r2,-36(fp)
  812068:	18800326 	beq	r3,r2,812078 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81206c:	e0bffd17 	ldw	r2,-12(fp)
  812070:	10800048 	cmpgei	r2,r2,1
  812074:	103fb51e 	bne	r2,zero,811f4c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812078:	e0fffa17 	ldw	r3,-24(fp)
  81207c:	e0bffc17 	ldw	r2,-16(fp)
  812080:	18801926 	beq	r3,r2,8120e8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812084:	0005303a 	rdctl	r2,status
  812088:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81208c:	e0fff517 	ldw	r3,-44(fp)
  812090:	00bfff84 	movi	r2,-2
  812094:	1884703a 	and	r2,r3,r2
  812098:	1001703a 	wrctl	status,r2
  
  return context;
  81209c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8120a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8120a4:	e0bffb17 	ldw	r2,-20(fp)
  8120a8:	10800817 	ldw	r2,32(r2)
  8120ac:	10c00054 	ori	r3,r2,1
  8120b0:	e0bffb17 	ldw	r2,-20(fp)
  8120b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8120b8:	e0bffb17 	ldw	r2,-20(fp)
  8120bc:	10800017 	ldw	r2,0(r2)
  8120c0:	11000104 	addi	r4,r2,4
  8120c4:	e0bffb17 	ldw	r2,-20(fp)
  8120c8:	10800817 	ldw	r2,32(r2)
  8120cc:	1007883a 	mov	r3,r2
  8120d0:	2005883a 	mov	r2,r4
  8120d4:	10c00035 	stwio	r3,0(r2)
  8120d8:	e0bff917 	ldw	r2,-28(fp)
  8120dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120e0:	e0bff417 	ldw	r2,-48(fp)
  8120e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8120e8:	e0fffa17 	ldw	r3,-24(fp)
  8120ec:	e0bffc17 	ldw	r2,-16(fp)
  8120f0:	18800526 	beq	r3,r2,812108 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8120f4:	e0fffa17 	ldw	r3,-24(fp)
  8120f8:	e0bffc17 	ldw	r2,-16(fp)
  8120fc:	1887c83a 	sub	r3,r3,r2
  812100:	e0ffff15 	stw	r3,-4(fp)
  812104:	00000906 	br	81212c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812108:	e0bffe17 	ldw	r2,-8(fp)
  81210c:	1090000c 	andi	r2,r2,16384
  812110:	1005003a 	cmpeq	r2,r2,zero
  812114:	1000031e 	bne	r2,zero,812124 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812118:	00bffd44 	movi	r2,-11
  81211c:	e0bfff15 	stw	r2,-4(fp)
  812120:	00000206 	br	81212c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812124:	00bffec4 	movi	r2,-5
  812128:	e0bfff15 	stw	r2,-4(fp)
  81212c:	e0bfff17 	ldw	r2,-4(fp)
}
  812130:	e037883a 	mov	sp,fp
  812134:	dfc00117 	ldw	ra,4(sp)
  812138:	df000017 	ldw	fp,0(sp)
  81213c:	dec00204 	addi	sp,sp,8
  812140:	f800283a 	ret

00812144 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812144:	defff204 	addi	sp,sp,-56
  812148:	dfc00d15 	stw	ra,52(sp)
  81214c:	df000c15 	stw	fp,48(sp)
  812150:	df000c04 	addi	fp,sp,48
  812154:	e13ffb15 	stw	r4,-20(fp)
  812158:	e17ffc15 	stw	r5,-16(fp)
  81215c:	e1bffd15 	stw	r6,-12(fp)
  812160:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812164:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812168:	e0bffc17 	ldw	r2,-16(fp)
  81216c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812170:	00003a06 	br	81225c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812174:	e0bffb17 	ldw	r2,-20(fp)
  812178:	10800c17 	ldw	r2,48(r2)
  81217c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  812180:	e0bffb17 	ldw	r2,-20(fp)
  812184:	10800d17 	ldw	r2,52(r2)
  812188:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  81218c:	e0fffa17 	ldw	r3,-24(fp)
  812190:	e0bff917 	ldw	r2,-28(fp)
  812194:	1880062e 	bgeu	r3,r2,8121b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812198:	e0fff917 	ldw	r3,-28(fp)
  81219c:	e0bffa17 	ldw	r2,-24(fp)
  8121a0:	1885c83a 	sub	r2,r3,r2
  8121a4:	10bfffc4 	addi	r2,r2,-1
  8121a8:	e0bff815 	stw	r2,-32(fp)
  8121ac:	00000c06 	br	8121e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  8121b0:	e0bff917 	ldw	r2,-28(fp)
  8121b4:	1005003a 	cmpeq	r2,r2,zero
  8121b8:	1000051e 	bne	r2,zero,8121d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8121bc:	00820004 	movi	r2,2048
  8121c0:	e0fffa17 	ldw	r3,-24(fp)
  8121c4:	10c5c83a 	sub	r2,r2,r3
  8121c8:	e0bff815 	stw	r2,-32(fp)
  8121cc:	00000406 	br	8121e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8121d0:	0081ffc4 	movi	r2,2047
  8121d4:	e0fffa17 	ldw	r3,-24(fp)
  8121d8:	10c5c83a 	sub	r2,r2,r3
  8121dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8121e0:	e0bff817 	ldw	r2,-32(fp)
  8121e4:	1005003a 	cmpeq	r2,r2,zero
  8121e8:	10001f1e 	bne	r2,zero,812268 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8121ec:	e0fffd17 	ldw	r3,-12(fp)
  8121f0:	e0bff817 	ldw	r2,-32(fp)
  8121f4:	1880022e 	bgeu	r3,r2,812200 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8121f8:	e0bffd17 	ldw	r2,-12(fp)
  8121fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812200:	e0bffb17 	ldw	r2,-20(fp)
  812204:	10c20e04 	addi	r3,r2,2104
  812208:	e0bffa17 	ldw	r2,-24(fp)
  81220c:	1885883a 	add	r2,r3,r2
  812210:	e0fffc17 	ldw	r3,-16(fp)
  812214:	1009883a 	mov	r4,r2
  812218:	180b883a 	mov	r5,r3
  81221c:	e1bff817 	ldw	r6,-32(fp)
  812220:	08032940 	call	803294 <memcpy>
      ptr   += n;
  812224:	e0fff817 	ldw	r3,-32(fp)
  812228:	e0bffc17 	ldw	r2,-16(fp)
  81222c:	10c5883a 	add	r2,r2,r3
  812230:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812234:	e0fffd17 	ldw	r3,-12(fp)
  812238:	e0bff817 	ldw	r2,-32(fp)
  81223c:	1885c83a 	sub	r2,r3,r2
  812240:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812244:	e0fffa17 	ldw	r3,-24(fp)
  812248:	e0bff817 	ldw	r2,-32(fp)
  81224c:	1885883a 	add	r2,r3,r2
  812250:	10c1ffcc 	andi	r3,r2,2047
  812254:	e0bffb17 	ldw	r2,-20(fp)
  812258:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81225c:	e0bffd17 	ldw	r2,-12(fp)
  812260:	10800048 	cmpgei	r2,r2,1
  812264:	103fc31e 	bne	r2,zero,812174 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812268:	0005303a 	rdctl	r2,status
  81226c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812270:	e0fff517 	ldw	r3,-44(fp)
  812274:	00bfff84 	movi	r2,-2
  812278:	1884703a 	and	r2,r3,r2
  81227c:	1001703a 	wrctl	status,r2
  
  return context;
  812280:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812284:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812288:	e0bffb17 	ldw	r2,-20(fp)
  81228c:	10800817 	ldw	r2,32(r2)
  812290:	10c00094 	ori	r3,r2,2
  812294:	e0bffb17 	ldw	r2,-20(fp)
  812298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81229c:	e0bffb17 	ldw	r2,-20(fp)
  8122a0:	10800017 	ldw	r2,0(r2)
  8122a4:	11000104 	addi	r4,r2,4
  8122a8:	e0bffb17 	ldw	r2,-20(fp)
  8122ac:	10800817 	ldw	r2,32(r2)
  8122b0:	1007883a 	mov	r3,r2
  8122b4:	2005883a 	mov	r2,r4
  8122b8:	10c00035 	stwio	r3,0(r2)
  8122bc:	e0bff717 	ldw	r2,-36(fp)
  8122c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122c4:	e0bff417 	ldw	r2,-48(fp)
  8122c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8122cc:	e0bffd17 	ldw	r2,-12(fp)
  8122d0:	10800050 	cmplti	r2,r2,1
  8122d4:	1000111e 	bne	r2,zero,81231c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8122d8:	e0bffe17 	ldw	r2,-8(fp)
  8122dc:	1090000c 	andi	r2,r2,16384
  8122e0:	1004c03a 	cmpne	r2,r2,zero
  8122e4:	1000101e 	bne	r2,zero,812328 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8122e8:	e0bffb17 	ldw	r2,-20(fp)
  8122ec:	10c00d17 	ldw	r3,52(r2)
  8122f0:	e0bff917 	ldw	r2,-28(fp)
  8122f4:	1880051e 	bne	r3,r2,81230c <altera_avalon_jtag_uart_write+0x1c8>
  8122f8:	e0bffb17 	ldw	r2,-20(fp)
  8122fc:	10c00917 	ldw	r3,36(r2)
  812300:	e0bffb17 	ldw	r2,-20(fp)
  812304:	10800117 	ldw	r2,4(r2)
  812308:	18bff736 	bltu	r3,r2,8122e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81230c:	e0bffb17 	ldw	r2,-20(fp)
  812310:	10c00d17 	ldw	r3,52(r2)
  812314:	e0bff917 	ldw	r2,-28(fp)
  812318:	18800326 	beq	r3,r2,812328 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  81231c:	e0bffd17 	ldw	r2,-12(fp)
  812320:	10800048 	cmpgei	r2,r2,1
  812324:	103fcd1e 	bne	r2,zero,81225c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812328:	e0fffc17 	ldw	r3,-16(fp)
  81232c:	e0bff617 	ldw	r2,-40(fp)
  812330:	18800526 	beq	r3,r2,812348 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812334:	e0fffc17 	ldw	r3,-16(fp)
  812338:	e0bff617 	ldw	r2,-40(fp)
  81233c:	1887c83a 	sub	r3,r3,r2
  812340:	e0ffff15 	stw	r3,-4(fp)
  812344:	00000906 	br	81236c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812348:	e0bffe17 	ldw	r2,-8(fp)
  81234c:	1090000c 	andi	r2,r2,16384
  812350:	1005003a 	cmpeq	r2,r2,zero
  812354:	1000031e 	bne	r2,zero,812364 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  812358:	00bffd44 	movi	r2,-11
  81235c:	e0bfff15 	stw	r2,-4(fp)
  812360:	00000206 	br	81236c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  812364:	00bffec4 	movi	r2,-5
  812368:	e0bfff15 	stw	r2,-4(fp)
  81236c:	e0bfff17 	ldw	r2,-4(fp)
}
  812370:	e037883a 	mov	sp,fp
  812374:	dfc00117 	ldw	ra,4(sp)
  812378:	df000017 	ldw	fp,0(sp)
  81237c:	dec00204 	addi	sp,sp,8
  812380:	f800283a 	ret

00812384 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  812384:	defffa04 	addi	sp,sp,-24
  812388:	dfc00515 	stw	ra,20(sp)
  81238c:	df000415 	stw	fp,16(sp)
  812390:	df000404 	addi	fp,sp,16
  812394:	e13ffe15 	stw	r4,-8(fp)
  812398:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  81239c:	e0bffe17 	ldw	r2,-8(fp)
  8123a0:	10800017 	ldw	r2,0(r2)
  8123a4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8123a8:	008003f4 	movhi	r2,15
  8123ac:	10909004 	addi	r2,r2,16960
  8123b0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8123b4:	e0bffe17 	ldw	r2,-8(fp)
  8123b8:	10800803 	ldbu	r2,32(r2)
  8123bc:	10803fcc 	andi	r2,r2,255
  8123c0:	1080201c 	xori	r2,r2,128
  8123c4:	10bfe004 	addi	r2,r2,-128
  8123c8:	1004c03a 	cmpne	r2,r2,zero
  8123cc:	1000161e 	bne	r2,zero,812428 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8123d0:	00000a06 	br	8123fc <lcd_write_command+0x78>
    if (--i == 0)
  8123d4:	e0bffc17 	ldw	r2,-16(fp)
  8123d8:	10bfffc4 	addi	r2,r2,-1
  8123dc:	e0bffc15 	stw	r2,-16(fp)
  8123e0:	e0bffc17 	ldw	r2,-16(fp)
  8123e4:	1004c03a 	cmpne	r2,r2,zero
  8123e8:	1000041e 	bne	r2,zero,8123fc <lcd_write_command+0x78>
    {
      sp->broken = 1;
  8123ec:	e0fffe17 	ldw	r3,-8(fp)
  8123f0:	00800044 	movi	r2,1
  8123f4:	18800805 	stb	r2,32(r3)
      return;
  8123f8:	00000b06 	br	812428 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8123fc:	e0bffd17 	ldw	r2,-12(fp)
  812400:	10800104 	addi	r2,r2,4
  812404:	10800037 	ldwio	r2,0(r2)
  812408:	1080200c 	andi	r2,r2,128
  81240c:	1004c03a 	cmpne	r2,r2,zero
  812410:	103ff01e 	bne	r2,zero,8123d4 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812414:	01001904 	movi	r4,100
  812418:	08146380 	call	814638 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81241c:	e0bffd17 	ldw	r2,-12(fp)
  812420:	e0ffff03 	ldbu	r3,-4(fp)
  812424:	10c00035 	stwio	r3,0(r2)
}
  812428:	e037883a 	mov	sp,fp
  81242c:	dfc00117 	ldw	ra,4(sp)
  812430:	df000017 	ldw	fp,0(sp)
  812434:	dec00204 	addi	sp,sp,8
  812438:	f800283a 	ret

0081243c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  81243c:	defffa04 	addi	sp,sp,-24
  812440:	dfc00515 	stw	ra,20(sp)
  812444:	df000415 	stw	fp,16(sp)
  812448:	df000404 	addi	fp,sp,16
  81244c:	e13ffe15 	stw	r4,-8(fp)
  812450:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812454:	e0bffe17 	ldw	r2,-8(fp)
  812458:	10800017 	ldw	r2,0(r2)
  81245c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812460:	008003f4 	movhi	r2,15
  812464:	10909004 	addi	r2,r2,16960
  812468:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81246c:	e0bffe17 	ldw	r2,-8(fp)
  812470:	10800803 	ldbu	r2,32(r2)
  812474:	10803fcc 	andi	r2,r2,255
  812478:	1080201c 	xori	r2,r2,128
  81247c:	10bfe004 	addi	r2,r2,-128
  812480:	1004c03a 	cmpne	r2,r2,zero
  812484:	10001d1e 	bne	r2,zero,8124fc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812488:	00000a06 	br	8124b4 <lcd_write_data+0x78>
    if (--i == 0)
  81248c:	e0bffc17 	ldw	r2,-16(fp)
  812490:	10bfffc4 	addi	r2,r2,-1
  812494:	e0bffc15 	stw	r2,-16(fp)
  812498:	e0bffc17 	ldw	r2,-16(fp)
  81249c:	1004c03a 	cmpne	r2,r2,zero
  8124a0:	1000041e 	bne	r2,zero,8124b4 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8124a4:	e0fffe17 	ldw	r3,-8(fp)
  8124a8:	00800044 	movi	r2,1
  8124ac:	18800805 	stb	r2,32(r3)
      return;
  8124b0:	00001206 	br	8124fc <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8124b4:	e0bffd17 	ldw	r2,-12(fp)
  8124b8:	10800104 	addi	r2,r2,4
  8124bc:	10800037 	ldwio	r2,0(r2)
  8124c0:	1080200c 	andi	r2,r2,128
  8124c4:	1004c03a 	cmpne	r2,r2,zero
  8124c8:	103ff01e 	bne	r2,zero,81248c <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8124cc:	01001904 	movi	r4,100
  8124d0:	08146380 	call	814638 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8124d4:	e0bffd17 	ldw	r2,-12(fp)
  8124d8:	10800204 	addi	r2,r2,8
  8124dc:	e0ffff03 	ldbu	r3,-4(fp)
  8124e0:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  8124e4:	e0bffe17 	ldw	r2,-8(fp)
  8124e8:	108008c3 	ldbu	r2,35(r2)
  8124ec:	10800044 	addi	r2,r2,1
  8124f0:	1007883a 	mov	r3,r2
  8124f4:	e0bffe17 	ldw	r2,-8(fp)
  8124f8:	10c008c5 	stb	r3,35(r2)
}
  8124fc:	e037883a 	mov	sp,fp
  812500:	dfc00117 	ldw	ra,4(sp)
  812504:	df000017 	ldw	fp,0(sp)
  812508:	dec00204 	addi	sp,sp,8
  81250c:	f800283a 	ret

00812510 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  812510:	defffc04 	addi	sp,sp,-16
  812514:	dfc00315 	stw	ra,12(sp)
  812518:	df000215 	stw	fp,8(sp)
  81251c:	df000204 	addi	fp,sp,8
  812520:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812524:	e13fff17 	ldw	r4,-4(fp)
  812528:	01400044 	movi	r5,1
  81252c:	08123840 	call	812384 <lcd_write_command>

  sp->x = 0;
  812530:	e0bfff17 	ldw	r2,-4(fp)
  812534:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  812538:	e0bfff17 	ldw	r2,-4(fp)
  81253c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812540:	e0bfff17 	ldw	r2,-4(fp)
  812544:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812548:	e03ffe15 	stw	zero,-8(fp)
  81254c:	00001906 	br	8125b4 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  812550:	e0bffe17 	ldw	r2,-8(fp)
  812554:	10801924 	muli	r2,r2,100
  812558:	10c01004 	addi	r3,r2,64
  81255c:	e0bfff17 	ldw	r2,-4(fp)
  812560:	1889883a 	add	r4,r3,r2
  812564:	01400804 	movi	r5,32
  812568:	01801444 	movi	r6,81
  81256c:	08034140 	call	803414 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  812570:	e0bffe17 	ldw	r2,-8(fp)
  812574:	10801924 	muli	r2,r2,100
  812578:	10c00c04 	addi	r3,r2,48
  81257c:	e0bfff17 	ldw	r2,-4(fp)
  812580:	1889883a 	add	r4,r3,r2
  812584:	01400804 	movi	r5,32
  812588:	01800404 	movi	r6,16
  81258c:	08034140 	call	803414 <memset>
    sp->line[y].width = 0;
  812590:	e0bffe17 	ldw	r2,-8(fp)
  812594:	e0ffff17 	ldw	r3,-4(fp)
  812598:	10801924 	muli	r2,r2,100
  81259c:	10c5883a 	add	r2,r2,r3
  8125a0:	10802404 	addi	r2,r2,144
  8125a4:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8125a8:	e0bffe17 	ldw	r2,-8(fp)
  8125ac:	10800044 	addi	r2,r2,1
  8125b0:	e0bffe15 	stw	r2,-8(fp)
  8125b4:	e0bffe17 	ldw	r2,-8(fp)
  8125b8:	10800090 	cmplti	r2,r2,2
  8125bc:	103fe41e 	bne	r2,zero,812550 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8125c0:	e037883a 	mov	sp,fp
  8125c4:	dfc00117 	ldw	ra,4(sp)
  8125c8:	df000017 	ldw	fp,0(sp)
  8125cc:	dec00204 	addi	sp,sp,8
  8125d0:	f800283a 	ret

008125d4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8125d4:	defff604 	addi	sp,sp,-40
  8125d8:	dfc00915 	stw	ra,36(sp)
  8125dc:	df000815 	stw	fp,32(sp)
  8125e0:	dc000715 	stw	r16,28(sp)
  8125e4:	df000704 	addi	fp,sp,28
  8125e8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8125ec:	e0bfff17 	ldw	r2,-4(fp)
  8125f0:	10800943 	ldbu	r2,37(r2)
  8125f4:	10803fcc 	andi	r2,r2,255
  8125f8:	1080201c 	xori	r2,r2,128
  8125fc:	10bfe004 	addi	r2,r2,-128
  812600:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812604:	e03ffe15 	stw	zero,-8(fp)
  812608:	00006406 	br	81279c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  81260c:	e0bffe17 	ldw	r2,-8(fp)
  812610:	e0ffff17 	ldw	r3,-4(fp)
  812614:	10801924 	muli	r2,r2,100
  812618:	10c5883a 	add	r2,r2,r3
  81261c:	10802404 	addi	r2,r2,144
  812620:	10800043 	ldbu	r2,1(r2)
  812624:	10803fcc 	andi	r2,r2,255
  812628:	1080201c 	xori	r2,r2,128
  81262c:	10bfe004 	addi	r2,r2,-128
  812630:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812634:	e0bffe17 	ldw	r2,-8(fp)
  812638:	e0ffff17 	ldw	r3,-4(fp)
  81263c:	10801924 	muli	r2,r2,100
  812640:	10c5883a 	add	r2,r2,r3
  812644:	10802404 	addi	r2,r2,144
  812648:	10800083 	ldbu	r2,2(r2)
  81264c:	10c03fcc 	andi	r3,r2,255
  812650:	e0bffc17 	ldw	r2,-16(fp)
  812654:	1885383a 	mul	r2,r3,r2
  812658:	1005d23a 	srai	r2,r2,8
  81265c:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  812660:	e0fffa17 	ldw	r3,-24(fp)
  812664:	e0bffb17 	ldw	r2,-20(fp)
  812668:	18800116 	blt	r3,r2,812670 <lcd_repaint_screen+0x9c>
      offset = 0;
  81266c:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812670:	e03ffd15 	stw	zero,-12(fp)
  812674:	00004306 	br	812784 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812678:	e43ffe17 	ldw	r16,-8(fp)
  81267c:	e0fffd17 	ldw	r3,-12(fp)
  812680:	e0bffa17 	ldw	r2,-24(fp)
  812684:	1889883a 	add	r4,r3,r2
  812688:	e17ffb17 	ldw	r5,-20(fp)
  81268c:	080fc7c0 	call	80fc7c <__modsi3>
  812690:	1009883a 	mov	r4,r2
  812694:	e0ffff17 	ldw	r3,-4(fp)
  812698:	80801924 	muli	r2,r16,100
  81269c:	10c5883a 	add	r2,r2,r3
  8126a0:	1105883a 	add	r2,r2,r4
  8126a4:	10801004 	addi	r2,r2,64
  8126a8:	10800003 	ldbu	r2,0(r2)
  8126ac:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8126b0:	e0bffe17 	ldw	r2,-8(fp)
  8126b4:	e13ffd17 	ldw	r4,-12(fp)
  8126b8:	e0ffff17 	ldw	r3,-4(fp)
  8126bc:	10801924 	muli	r2,r2,100
  8126c0:	10c5883a 	add	r2,r2,r3
  8126c4:	1105883a 	add	r2,r2,r4
  8126c8:	10800c04 	addi	r2,r2,48
  8126cc:	10800003 	ldbu	r2,0(r2)
  8126d0:	10c03fcc 	andi	r3,r2,255
  8126d4:	18c0201c 	xori	r3,r3,128
  8126d8:	18ffe004 	addi	r3,r3,-128
  8126dc:	e0bff947 	ldb	r2,-27(fp)
  8126e0:	18802526 	beq	r3,r2,812778 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8126e4:	e0fffe17 	ldw	r3,-8(fp)
  8126e8:	d0a01504 	addi	r2,gp,-32684
  8126ec:	1885883a 	add	r2,r3,r2
  8126f0:	10800003 	ldbu	r2,0(r2)
  8126f4:	1007883a 	mov	r3,r2
  8126f8:	e0bffd17 	ldw	r2,-12(fp)
  8126fc:	1885883a 	add	r2,r3,r2
  812700:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812704:	e0fff903 	ldbu	r3,-28(fp)
  812708:	e0bfff17 	ldw	r2,-4(fp)
  81270c:	108008c3 	ldbu	r2,35(r2)
  812710:	10803fcc 	andi	r2,r2,255
  812714:	1080201c 	xori	r2,r2,128
  812718:	10bfe004 	addi	r2,r2,-128
  81271c:	18800926 	beq	r3,r2,812744 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812720:	e0fff903 	ldbu	r3,-28(fp)
  812724:	00bfe004 	movi	r2,-128
  812728:	1884b03a 	or	r2,r3,r2
  81272c:	11403fcc 	andi	r5,r2,255
  812730:	e13fff17 	ldw	r4,-4(fp)
  812734:	08123840 	call	812384 <lcd_write_command>
          sp->address = address;
  812738:	e0fff903 	ldbu	r3,-28(fp)
  81273c:	e0bfff17 	ldw	r2,-4(fp)
  812740:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812744:	e0bff943 	ldbu	r2,-27(fp)
  812748:	11403fcc 	andi	r5,r2,255
  81274c:	e13fff17 	ldw	r4,-4(fp)
  812750:	081243c0 	call	81243c <lcd_write_data>
        sp->line[y].visible[x] = c;
  812754:	e0bffe17 	ldw	r2,-8(fp)
  812758:	e13ffd17 	ldw	r4,-12(fp)
  81275c:	e0ffff17 	ldw	r3,-4(fp)
  812760:	10801924 	muli	r2,r2,100
  812764:	10c5883a 	add	r2,r2,r3
  812768:	1105883a 	add	r2,r2,r4
  81276c:	10c00c04 	addi	r3,r2,48
  812770:	e0bff943 	ldbu	r2,-27(fp)
  812774:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812778:	e0bffd17 	ldw	r2,-12(fp)
  81277c:	10800044 	addi	r2,r2,1
  812780:	e0bffd15 	stw	r2,-12(fp)
  812784:	e0bffd17 	ldw	r2,-12(fp)
  812788:	10800410 	cmplti	r2,r2,16
  81278c:	103fba1e 	bne	r2,zero,812678 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812790:	e0bffe17 	ldw	r2,-8(fp)
  812794:	10800044 	addi	r2,r2,1
  812798:	e0bffe15 	stw	r2,-8(fp)
  81279c:	e0bffe17 	ldw	r2,-8(fp)
  8127a0:	10800090 	cmplti	r2,r2,2
  8127a4:	103f991e 	bne	r2,zero,81260c <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8127a8:	e037883a 	mov	sp,fp
  8127ac:	dfc00217 	ldw	ra,8(sp)
  8127b0:	df000117 	ldw	fp,4(sp)
  8127b4:	dc000017 	ldw	r16,0(sp)
  8127b8:	dec00304 	addi	sp,sp,12
  8127bc:	f800283a 	ret

008127c0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8127c0:	defffc04 	addi	sp,sp,-16
  8127c4:	dfc00315 	stw	ra,12(sp)
  8127c8:	df000215 	stw	fp,8(sp)
  8127cc:	df000204 	addi	fp,sp,8
  8127d0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8127d4:	e03ffe15 	stw	zero,-8(fp)
  8127d8:	00001d06 	br	812850 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8127dc:	e0bffe17 	ldw	r2,-8(fp)
  8127e0:	10800048 	cmpgei	r2,r2,1
  8127e4:	10000f1e 	bne	r2,zero,812824 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8127e8:	e0bffe17 	ldw	r2,-8(fp)
  8127ec:	10801924 	muli	r2,r2,100
  8127f0:	10c01004 	addi	r3,r2,64
  8127f4:	e0bfff17 	ldw	r2,-4(fp)
  8127f8:	1889883a 	add	r4,r3,r2
  8127fc:	e0bffe17 	ldw	r2,-8(fp)
  812800:	10800044 	addi	r2,r2,1
  812804:	10801924 	muli	r2,r2,100
  812808:	10c01004 	addi	r3,r2,64
  81280c:	e0bfff17 	ldw	r2,-4(fp)
  812810:	1885883a 	add	r2,r3,r2
  812814:	100b883a 	mov	r5,r2
  812818:	01801404 	movi	r6,80
  81281c:	08032940 	call	803294 <memcpy>
  812820:	00000806 	br	812844 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812824:	e0bffe17 	ldw	r2,-8(fp)
  812828:	10801924 	muli	r2,r2,100
  81282c:	10c01004 	addi	r3,r2,64
  812830:	e0bfff17 	ldw	r2,-4(fp)
  812834:	1889883a 	add	r4,r3,r2
  812838:	01400804 	movi	r5,32
  81283c:	01801404 	movi	r6,80
  812840:	08034140 	call	803414 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812844:	e0bffe17 	ldw	r2,-8(fp)
  812848:	10800044 	addi	r2,r2,1
  81284c:	e0bffe15 	stw	r2,-8(fp)
  812850:	e0bffe17 	ldw	r2,-8(fp)
  812854:	10800090 	cmplti	r2,r2,2
  812858:	103fe01e 	bne	r2,zero,8127dc <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  81285c:	e0bfff17 	ldw	r2,-4(fp)
  812860:	10800883 	ldbu	r2,34(r2)
  812864:	10bfffc4 	addi	r2,r2,-1
  812868:	1007883a 	mov	r3,r2
  81286c:	e0bfff17 	ldw	r2,-4(fp)
  812870:	10c00885 	stb	r3,34(r2)
}
  812874:	e037883a 	mov	sp,fp
  812878:	dfc00117 	ldw	ra,4(sp)
  81287c:	df000017 	ldw	fp,0(sp)
  812880:	dec00204 	addi	sp,sp,8
  812884:	f800283a 	ret

00812888 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812888:	defff804 	addi	sp,sp,-32
  81288c:	dfc00715 	stw	ra,28(sp)
  812890:	df000615 	stw	fp,24(sp)
  812894:	df000604 	addi	fp,sp,24
  812898:	e13ffd15 	stw	r4,-12(fp)
  81289c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  8128a0:	e03ffc15 	stw	zero,-16(fp)
  8128a4:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  8128a8:	e0bffd17 	ldw	r2,-12(fp)
  8128ac:	10800a03 	ldbu	r2,40(r2)
  8128b0:	10803fcc 	andi	r2,r2,255
  8128b4:	1080201c 	xori	r2,r2,128
  8128b8:	10bfe004 	addi	r2,r2,-128
  8128bc:	108016d8 	cmpnei	r2,r2,91
  8128c0:	1000491e 	bne	r2,zero,8129e8 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  8128c4:	e0bffd17 	ldw	r2,-12(fp)
  8128c8:	10800a04 	addi	r2,r2,40
  8128cc:	10800044 	addi	r2,r2,1
  8128d0:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  8128d4:	00000d06 	br	81290c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8128d8:	e0bffc17 	ldw	r2,-16(fp)
  8128dc:	10c002a4 	muli	r3,r2,10
  8128e0:	e0bffa17 	ldw	r2,-24(fp)
  8128e4:	10800003 	ldbu	r2,0(r2)
  8128e8:	10803fcc 	andi	r2,r2,255
  8128ec:	1080201c 	xori	r2,r2,128
  8128f0:	10bfe004 	addi	r2,r2,-128
  8128f4:	1885883a 	add	r2,r3,r2
  8128f8:	10bff404 	addi	r2,r2,-48
  8128fc:	e0bffc15 	stw	r2,-16(fp)
  812900:	e0bffa17 	ldw	r2,-24(fp)
  812904:	10800044 	addi	r2,r2,1
  812908:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  81290c:	e0bffa17 	ldw	r2,-24(fp)
  812910:	10800003 	ldbu	r2,0(r2)
  812914:	10803fcc 	andi	r2,r2,255
  812918:	1080201c 	xori	r2,r2,128
  81291c:	10bfe004 	addi	r2,r2,-128
  812920:	1007883a 	mov	r3,r2
  812924:	00802074 	movhi	r2,129
  812928:	109c1804 	addi	r2,r2,28768
  81292c:	10800017 	ldw	r2,0(r2)
  812930:	1885883a 	add	r2,r3,r2
  812934:	10800003 	ldbu	r2,0(r2)
  812938:	10803fcc 	andi	r2,r2,255
  81293c:	1080010c 	andi	r2,r2,4
  812940:	1004c03a 	cmpne	r2,r2,zero
  812944:	103fe41e 	bne	r2,zero,8128d8 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812948:	e0bffa17 	ldw	r2,-24(fp)
  81294c:	10800003 	ldbu	r2,0(r2)
  812950:	10803fcc 	andi	r2,r2,255
  812954:	1080201c 	xori	r2,r2,128
  812958:	10bfe004 	addi	r2,r2,-128
  81295c:	10800ed8 	cmpnei	r2,r2,59
  812960:	1000231e 	bne	r2,zero,8129f0 <lcd_handle_escape+0x168>
    {
      ptr++;
  812964:	e0bffa17 	ldw	r2,-24(fp)
  812968:	10800044 	addi	r2,r2,1
  81296c:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  812970:	00000d06 	br	8129a8 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812974:	e0bffb17 	ldw	r2,-20(fp)
  812978:	10c002a4 	muli	r3,r2,10
  81297c:	e0bffa17 	ldw	r2,-24(fp)
  812980:	10800003 	ldbu	r2,0(r2)
  812984:	10803fcc 	andi	r2,r2,255
  812988:	1080201c 	xori	r2,r2,128
  81298c:	10bfe004 	addi	r2,r2,-128
  812990:	1885883a 	add	r2,r3,r2
  812994:	10bff404 	addi	r2,r2,-48
  812998:	e0bffb15 	stw	r2,-20(fp)
  81299c:	e0bffa17 	ldw	r2,-24(fp)
  8129a0:	10800044 	addi	r2,r2,1
  8129a4:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8129a8:	e0bffa17 	ldw	r2,-24(fp)
  8129ac:	10800003 	ldbu	r2,0(r2)
  8129b0:	10803fcc 	andi	r2,r2,255
  8129b4:	1080201c 	xori	r2,r2,128
  8129b8:	10bfe004 	addi	r2,r2,-128
  8129bc:	1007883a 	mov	r3,r2
  8129c0:	00802074 	movhi	r2,129
  8129c4:	109c1804 	addi	r2,r2,28768
  8129c8:	10800017 	ldw	r2,0(r2)
  8129cc:	1885883a 	add	r2,r3,r2
  8129d0:	10800003 	ldbu	r2,0(r2)
  8129d4:	10803fcc 	andi	r2,r2,255
  8129d8:	1080010c 	andi	r2,r2,4
  8129dc:	1004c03a 	cmpne	r2,r2,zero
  8129e0:	103fe41e 	bne	r2,zero,812974 <lcd_handle_escape+0xec>
  8129e4:	00000206 	br	8129f0 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8129e8:	00bfffc4 	movi	r2,-1
  8129ec:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  8129f0:	e0bffe07 	ldb	r2,-8(fp)
  8129f4:	e0bfff15 	stw	r2,-4(fp)
  8129f8:	e0ffff17 	ldw	r3,-4(fp)
  8129fc:	188012a0 	cmpeqi	r2,r3,74
  812a00:	10002f1e 	bne	r2,zero,812ac0 <lcd_handle_escape+0x238>
  812a04:	e0ffff17 	ldw	r3,-4(fp)
  812a08:	188012c8 	cmpgei	r2,r3,75
  812a0c:	1000041e 	bne	r2,zero,812a20 <lcd_handle_escape+0x198>
  812a10:	e0ffff17 	ldw	r3,-4(fp)
  812a14:	18801220 	cmpeqi	r2,r3,72
  812a18:	1000081e 	bne	r2,zero,812a3c <lcd_handle_escape+0x1b4>
  812a1c:	00004906 	br	812b44 <lcd_handle_escape+0x2bc>
  812a20:	e0ffff17 	ldw	r3,-4(fp)
  812a24:	188012e0 	cmpeqi	r2,r3,75
  812a28:	10002b1e 	bne	r2,zero,812ad8 <lcd_handle_escape+0x250>
  812a2c:	e0ffff17 	ldw	r3,-4(fp)
  812a30:	188019a0 	cmpeqi	r2,r3,102
  812a34:	1000011e 	bne	r2,zero,812a3c <lcd_handle_escape+0x1b4>
  812a38:	00004206 	br	812b44 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812a3c:	e0bffb17 	ldw	r2,-20(fp)
  812a40:	10800050 	cmplti	r2,r2,1
  812a44:	1000051e 	bne	r2,zero,812a5c <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  812a48:	e0bffb17 	ldw	r2,-20(fp)
  812a4c:	10bfffc4 	addi	r2,r2,-1
  812a50:	1007883a 	mov	r3,r2
  812a54:	e0bffd17 	ldw	r2,-12(fp)
  812a58:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812a5c:	e0bffc17 	ldw	r2,-16(fp)
  812a60:	10800050 	cmplti	r2,r2,1
  812a64:	1000371e 	bne	r2,zero,812b44 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  812a68:	e0bffc17 	ldw	r2,-16(fp)
  812a6c:	10bfffc4 	addi	r2,r2,-1
  812a70:	1007883a 	mov	r3,r2
  812a74:	e0bffd17 	ldw	r2,-12(fp)
  812a78:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812a7c:	e0bffd17 	ldw	r2,-12(fp)
  812a80:	10800883 	ldbu	r2,34(r2)
  812a84:	10803fcc 	andi	r2,r2,255
  812a88:	10800170 	cmpltui	r2,r2,5
  812a8c:	1000061e 	bne	r2,zero,812aa8 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  812a90:	e0fffd17 	ldw	r3,-12(fp)
  812a94:	00800104 	movi	r2,4
  812a98:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812a9c:	00000206 	br	812aa8 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  812aa0:	e13ffd17 	ldw	r4,-12(fp)
  812aa4:	08127c00 	call	8127c0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812aa8:	e0bffd17 	ldw	r2,-12(fp)
  812aac:	10800883 	ldbu	r2,34(r2)
  812ab0:	10803fcc 	andi	r2,r2,255
  812ab4:	108000e8 	cmpgeui	r2,r2,3
  812ab8:	103ff91e 	bne	r2,zero,812aa0 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  812abc:	00002106 	br	812b44 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812ac0:	e0bffc17 	ldw	r2,-16(fp)
  812ac4:	10800098 	cmpnei	r2,r2,2
  812ac8:	10001e1e 	bne	r2,zero,812b44 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  812acc:	e13ffd17 	ldw	r4,-12(fp)
  812ad0:	08125100 	call	812510 <lcd_clear_screen>
    break;
  812ad4:	00001b06 	br	812b44 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812ad8:	e0bffc17 	ldw	r2,-16(fp)
  812adc:	10800048 	cmpgei	r2,r2,1
  812ae0:	1000181e 	bne	r2,zero,812b44 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812ae4:	e0bffd17 	ldw	r2,-12(fp)
  812ae8:	10800843 	ldbu	r2,33(r2)
  812aec:	10803fcc 	andi	r2,r2,255
  812af0:	10801428 	cmpgeui	r2,r2,80
  812af4:	1000131e 	bne	r2,zero,812b44 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812af8:	e0bffd17 	ldw	r2,-12(fp)
  812afc:	10800883 	ldbu	r2,34(r2)
  812b00:	10803fcc 	andi	r2,r2,255
  812b04:	10801924 	muli	r2,r2,100
  812b08:	10c01004 	addi	r3,r2,64
  812b0c:	e0bffd17 	ldw	r2,-12(fp)
  812b10:	1887883a 	add	r3,r3,r2
  812b14:	e0bffd17 	ldw	r2,-12(fp)
  812b18:	10800843 	ldbu	r2,33(r2)
  812b1c:	10803fcc 	andi	r2,r2,255
  812b20:	1889883a 	add	r4,r3,r2
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	10800843 	ldbu	r2,33(r2)
  812b2c:	10c03fcc 	andi	r3,r2,255
  812b30:	00801404 	movi	r2,80
  812b34:	10c5c83a 	sub	r2,r2,r3
  812b38:	100d883a 	mov	r6,r2
  812b3c:	01400804 	movi	r5,32
  812b40:	08034140 	call	803414 <memset>
    }
    break;
  }
}
  812b44:	e037883a 	mov	sp,fp
  812b48:	dfc00117 	ldw	ra,4(sp)
  812b4c:	df000017 	ldw	fp,0(sp)
  812b50:	dec00204 	addi	sp,sp,8
  812b54:	f800283a 	ret

00812b58 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812b58:	defff204 	addi	sp,sp,-56
  812b5c:	dfc00d15 	stw	ra,52(sp)
  812b60:	df000c15 	stw	fp,48(sp)
  812b64:	dc000b15 	stw	r16,44(sp)
  812b68:	df000b04 	addi	fp,sp,44
  812b6c:	e13ffc15 	stw	r4,-16(fp)
  812b70:	e17ffd15 	stw	r5,-12(fp)
  812b74:	e1bffe15 	stw	r6,-8(fp)
  812b78:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812b7c:	e0bffe17 	ldw	r2,-8(fp)
  812b80:	1007883a 	mov	r3,r2
  812b84:	e0bffd17 	ldw	r2,-12(fp)
  812b88:	10c5883a 	add	r2,r2,r3
  812b8c:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812b90:	e0fffc17 	ldw	r3,-16(fp)
  812b94:	00800044 	movi	r2,1
  812b98:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812b9c:	0000a206 	br	812e28 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812ba0:	e0bffd17 	ldw	r2,-12(fp)
  812ba4:	10800003 	ldbu	r2,0(r2)
  812ba8:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812bac:	e0bffc17 	ldw	r2,-16(fp)
  812bb0:	10800903 	ldbu	r2,36(r2)
  812bb4:	10803fcc 	andi	r2,r2,255
  812bb8:	1080201c 	xori	r2,r2,128
  812bbc:	10bfe004 	addi	r2,r2,-128
  812bc0:	1004803a 	cmplt	r2,r2,zero
  812bc4:	10003b1e 	bne	r2,zero,812cb4 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812bc8:	e0bffc17 	ldw	r2,-16(fp)
  812bcc:	10800903 	ldbu	r2,36(r2)
  812bd0:	10803fcc 	andi	r2,r2,255
  812bd4:	1080201c 	xori	r2,r2,128
  812bd8:	10bfe004 	addi	r2,r2,-128
  812bdc:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812be0:	e0bff717 	ldw	r2,-36(fp)
  812be4:	1004c03a 	cmpne	r2,r2,zero
  812be8:	1000031e 	bne	r2,zero,812bf8 <altera_avalon_lcd_16207_write+0xa0>
  812bec:	e0bff807 	ldb	r2,-32(fp)
  812bf0:	108016d8 	cmpnei	r2,r2,91
  812bf4:	1000111e 	bne	r2,zero,812c3c <altera_avalon_lcd_16207_write+0xe4>
  812bf8:	e0bff717 	ldw	r2,-36(fp)
  812bfc:	1005003a 	cmpeq	r2,r2,zero
  812c00:	10001a1e 	bne	r2,zero,812c6c <altera_avalon_lcd_16207_write+0x114>
  812c04:	e0bff807 	ldb	r2,-32(fp)
  812c08:	1007883a 	mov	r3,r2
  812c0c:	00802074 	movhi	r2,129
  812c10:	109c1804 	addi	r2,r2,28768
  812c14:	10800017 	ldw	r2,0(r2)
  812c18:	1885883a 	add	r2,r3,r2
  812c1c:	10800003 	ldbu	r2,0(r2)
  812c20:	10803fcc 	andi	r2,r2,255
  812c24:	1080010c 	andi	r2,r2,4
  812c28:	1004c03a 	cmpne	r2,r2,zero
  812c2c:	10000f1e 	bne	r2,zero,812c6c <altera_avalon_lcd_16207_write+0x114>
  812c30:	e0bff807 	ldb	r2,-32(fp)
  812c34:	10800ee0 	cmpeqi	r2,r2,59
  812c38:	10000c1e 	bne	r2,zero,812c6c <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812c3c:	e0fff717 	ldw	r3,-36(fp)
  812c40:	e0bffc17 	ldw	r2,-16(fp)
  812c44:	1885883a 	add	r2,r3,r2
  812c48:	10800a04 	addi	r2,r2,40
  812c4c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812c50:	e17ff807 	ldb	r5,-32(fp)
  812c54:	e13ffc17 	ldw	r4,-16(fp)
  812c58:	08128880 	call	812888 <lcd_handle_escape>

        sp->esccount = -1;
  812c5c:	e0fffc17 	ldw	r3,-16(fp)
  812c60:	00bfffc4 	movi	r2,-1
  812c64:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812c68:	00006c06 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812c6c:	e0bffc17 	ldw	r2,-16(fp)
  812c70:	10800903 	ldbu	r2,36(r2)
  812c74:	10803fcc 	andi	r2,r2,255
  812c78:	108001e8 	cmpgeui	r2,r2,7
  812c7c:	1000671e 	bne	r2,zero,812e1c <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812c80:	e0fff717 	ldw	r3,-36(fp)
  812c84:	e0bffc17 	ldw	r2,-16(fp)
  812c88:	1885883a 	add	r2,r3,r2
  812c8c:	10c00a04 	addi	r3,r2,40
  812c90:	e0bff803 	ldbu	r2,-32(fp)
  812c94:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812c98:	e0bffc17 	ldw	r2,-16(fp)
  812c9c:	10800903 	ldbu	r2,36(r2)
  812ca0:	10800044 	addi	r2,r2,1
  812ca4:	1007883a 	mov	r3,r2
  812ca8:	e0bffc17 	ldw	r2,-16(fp)
  812cac:	10c00905 	stb	r3,36(r2)
  812cb0:	00005a06 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812cb4:	e0bff807 	ldb	r2,-32(fp)
  812cb8:	108006d8 	cmpnei	r2,r2,27
  812cbc:	1000031e 	bne	r2,zero,812ccc <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812cc0:	e0bffc17 	ldw	r2,-16(fp)
  812cc4:	10000905 	stb	zero,36(r2)
  812cc8:	00005406 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812ccc:	e0bff807 	ldb	r2,-32(fp)
  812cd0:	10800358 	cmpnei	r2,r2,13
  812cd4:	1000031e 	bne	r2,zero,812ce4 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812cd8:	e0bffc17 	ldw	r2,-16(fp)
  812cdc:	10000845 	stb	zero,33(r2)
  812ce0:	00004e06 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812ce4:	e0bff807 	ldb	r2,-32(fp)
  812ce8:	10800298 	cmpnei	r2,r2,10
  812cec:	1000101e 	bne	r2,zero,812d30 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812cf0:	e0bffc17 	ldw	r2,-16(fp)
  812cf4:	10000845 	stb	zero,33(r2)
      sp->y++;
  812cf8:	e0bffc17 	ldw	r2,-16(fp)
  812cfc:	10800883 	ldbu	r2,34(r2)
  812d00:	10800044 	addi	r2,r2,1
  812d04:	1007883a 	mov	r3,r2
  812d08:	e0bffc17 	ldw	r2,-16(fp)
  812d0c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812d10:	e0bffc17 	ldw	r2,-16(fp)
  812d14:	10800883 	ldbu	r2,34(r2)
  812d18:	10803fcc 	andi	r2,r2,255
  812d1c:	108000f0 	cmpltui	r2,r2,3
  812d20:	10003e1e 	bne	r2,zero,812e1c <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812d24:	e13ffc17 	ldw	r4,-16(fp)
  812d28:	08127c00 	call	8127c0 <lcd_scroll_up>
  812d2c:	00003b06 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812d30:	e0bff807 	ldb	r2,-32(fp)
  812d34:	10800218 	cmpnei	r2,r2,8
  812d38:	10000c1e 	bne	r2,zero,812d6c <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812d3c:	e0bffc17 	ldw	r2,-16(fp)
  812d40:	10800843 	ldbu	r2,33(r2)
  812d44:	10803fcc 	andi	r2,r2,255
  812d48:	1005003a 	cmpeq	r2,r2,zero
  812d4c:	1000331e 	bne	r2,zero,812e1c <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812d50:	e0bffc17 	ldw	r2,-16(fp)
  812d54:	10800843 	ldbu	r2,33(r2)
  812d58:	10bfffc4 	addi	r2,r2,-1
  812d5c:	1007883a 	mov	r3,r2
  812d60:	e0bffc17 	ldw	r2,-16(fp)
  812d64:	10c00845 	stb	r3,33(r2)
  812d68:	00002c06 	br	812e1c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812d6c:	e0bff807 	ldb	r2,-32(fp)
  812d70:	1007883a 	mov	r3,r2
  812d74:	00802074 	movhi	r2,129
  812d78:	109c1804 	addi	r2,r2,28768
  812d7c:	10800017 	ldw	r2,0(r2)
  812d80:	1885883a 	add	r2,r3,r2
  812d84:	10800003 	ldbu	r2,0(r2)
  812d88:	10803fcc 	andi	r2,r2,255
  812d8c:	1080201c 	xori	r2,r2,128
  812d90:	10bfe004 	addi	r2,r2,-128
  812d94:	108025cc 	andi	r2,r2,151
  812d98:	1005003a 	cmpeq	r2,r2,zero
  812d9c:	10001f1e 	bne	r2,zero,812e1c <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812da0:	e0bffc17 	ldw	r2,-16(fp)
  812da4:	10800883 	ldbu	r2,34(r2)
  812da8:	10803fcc 	andi	r2,r2,255
  812dac:	108000b0 	cmpltui	r2,r2,2
  812db0:	1000021e 	bne	r2,zero,812dbc <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812db4:	e13ffc17 	ldw	r4,-16(fp)
  812db8:	08127c00 	call	8127c0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812dbc:	e0bffc17 	ldw	r2,-16(fp)
  812dc0:	10800843 	ldbu	r2,33(r2)
  812dc4:	10803fcc 	andi	r2,r2,255
  812dc8:	10801428 	cmpgeui	r2,r2,80
  812dcc:	10000d1e 	bne	r2,zero,812e04 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812dd0:	e0bffc17 	ldw	r2,-16(fp)
  812dd4:	10800883 	ldbu	r2,34(r2)
  812dd8:	11003fcc 	andi	r4,r2,255
  812ddc:	e0bffc17 	ldw	r2,-16(fp)
  812de0:	10800843 	ldbu	r2,33(r2)
  812de4:	11403fcc 	andi	r5,r2,255
  812de8:	e0fffc17 	ldw	r3,-16(fp)
  812dec:	20801924 	muli	r2,r4,100
  812df0:	10c5883a 	add	r2,r2,r3
  812df4:	1145883a 	add	r2,r2,r5
  812df8:	10c01004 	addi	r3,r2,64
  812dfc:	e0bff803 	ldbu	r2,-32(fp)
  812e00:	18800005 	stb	r2,0(r3)

      sp->x++;
  812e04:	e0bffc17 	ldw	r2,-16(fp)
  812e08:	10800843 	ldbu	r2,33(r2)
  812e0c:	10800044 	addi	r2,r2,1
  812e10:	1007883a 	mov	r3,r2
  812e14:	e0bffc17 	ldw	r2,-16(fp)
  812e18:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812e1c:	e0bffd17 	ldw	r2,-12(fp)
  812e20:	10800044 	addi	r2,r2,1
  812e24:	e0bffd15 	stw	r2,-12(fp)
  812e28:	e0fffd17 	ldw	r3,-12(fp)
  812e2c:	e0bffb17 	ldw	r2,-20(fp)
  812e30:	18bf5b36 	bltu	r3,r2,812ba0 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812e34:	00800404 	movi	r2,16
  812e38:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e3c:	e03ffa15 	stw	zero,-24(fp)
  812e40:	00003606 	br	812f1c <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812e44:	00801404 	movi	r2,80
  812e48:	e0bff615 	stw	r2,-40(fp)
  812e4c:	00001106 	br	812e94 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812e50:	e13ffa17 	ldw	r4,-24(fp)
  812e54:	e0bff617 	ldw	r2,-40(fp)
  812e58:	117fffc4 	addi	r5,r2,-1
  812e5c:	e0fffc17 	ldw	r3,-16(fp)
  812e60:	20801924 	muli	r2,r4,100
  812e64:	10c5883a 	add	r2,r2,r3
  812e68:	1145883a 	add	r2,r2,r5
  812e6c:	10801004 	addi	r2,r2,64
  812e70:	10800003 	ldbu	r2,0(r2)
  812e74:	10803fcc 	andi	r2,r2,255
  812e78:	1080201c 	xori	r2,r2,128
  812e7c:	10bfe004 	addi	r2,r2,-128
  812e80:	10800818 	cmpnei	r2,r2,32
  812e84:	1000061e 	bne	r2,zero,812ea0 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812e88:	e0bff617 	ldw	r2,-40(fp)
  812e8c:	10bfffc4 	addi	r2,r2,-1
  812e90:	e0bff615 	stw	r2,-40(fp)
  812e94:	e0bff617 	ldw	r2,-40(fp)
  812e98:	10800048 	cmpgei	r2,r2,1
  812e9c:	103fec1e 	bne	r2,zero,812e50 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812ea0:	e0bff617 	ldw	r2,-40(fp)
  812ea4:	10800448 	cmpgei	r2,r2,17
  812ea8:	1000031e 	bne	r2,zero,812eb8 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812eac:	00800404 	movi	r2,16
  812eb0:	e0bff615 	stw	r2,-40(fp)
  812eb4:	00000306 	br	812ec4 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812eb8:	e0bff617 	ldw	r2,-40(fp)
  812ebc:	10800044 	addi	r2,r2,1
  812ec0:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812ec4:	e13ffa17 	ldw	r4,-24(fp)
  812ec8:	e0bff617 	ldw	r2,-40(fp)
  812ecc:	100b883a 	mov	r5,r2
  812ed0:	e0fffc17 	ldw	r3,-16(fp)
  812ed4:	20801924 	muli	r2,r4,100
  812ed8:	10c5883a 	add	r2,r2,r3
  812edc:	10802404 	addi	r2,r2,144
  812ee0:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812ee4:	e0fff917 	ldw	r3,-28(fp)
  812ee8:	e0bff617 	ldw	r2,-40(fp)
  812eec:	1880020e 	bge	r3,r2,812ef8 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812ef0:	e0bff617 	ldw	r2,-40(fp)
  812ef4:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812ef8:	e0bffa17 	ldw	r2,-24(fp)
  812efc:	e0fffc17 	ldw	r3,-16(fp)
  812f00:	10801924 	muli	r2,r2,100
  812f04:	10c5883a 	add	r2,r2,r3
  812f08:	10802404 	addi	r2,r2,144
  812f0c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812f10:	e0bffa17 	ldw	r2,-24(fp)
  812f14:	10800044 	addi	r2,r2,1
  812f18:	e0bffa15 	stw	r2,-24(fp)
  812f1c:	e0bffa17 	ldw	r2,-24(fp)
  812f20:	10800090 	cmplti	r2,r2,2
  812f24:	103fc71e 	bne	r2,zero,812e44 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812f28:	e0bff917 	ldw	r2,-28(fp)
  812f2c:	10800448 	cmpgei	r2,r2,17
  812f30:	1000031e 	bne	r2,zero,812f40 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  812f34:	e0bffc17 	ldw	r2,-16(fp)
  812f38:	10000985 	stb	zero,38(r2)
  812f3c:	00002d06 	br	812ff4 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  812f40:	e0bff917 	ldw	r2,-28(fp)
  812f44:	1085883a 	add	r2,r2,r2
  812f48:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  812f4c:	e0bff917 	ldw	r2,-28(fp)
  812f50:	1007883a 	mov	r3,r2
  812f54:	e0bffc17 	ldw	r2,-16(fp)
  812f58:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812f5c:	e03ffa15 	stw	zero,-24(fp)
  812f60:	00002106 	br	812fe8 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812f64:	e0bffa17 	ldw	r2,-24(fp)
  812f68:	e0fffc17 	ldw	r3,-16(fp)
  812f6c:	10801924 	muli	r2,r2,100
  812f70:	10c5883a 	add	r2,r2,r3
  812f74:	10802404 	addi	r2,r2,144
  812f78:	10800043 	ldbu	r2,1(r2)
  812f7c:	10803fcc 	andi	r2,r2,255
  812f80:	1080201c 	xori	r2,r2,128
  812f84:	10bfe004 	addi	r2,r2,-128
  812f88:	10800450 	cmplti	r2,r2,17
  812f8c:	1000131e 	bne	r2,zero,812fdc <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812f90:	e43ffa17 	ldw	r16,-24(fp)
  812f94:	e0bffa17 	ldw	r2,-24(fp)
  812f98:	e0fffc17 	ldw	r3,-16(fp)
  812f9c:	10801924 	muli	r2,r2,100
  812fa0:	10c5883a 	add	r2,r2,r3
  812fa4:	10802404 	addi	r2,r2,144
  812fa8:	10800043 	ldbu	r2,1(r2)
  812fac:	10803fcc 	andi	r2,r2,255
  812fb0:	1080201c 	xori	r2,r2,128
  812fb4:	10bfe004 	addi	r2,r2,-128
  812fb8:	1008923a 	slli	r4,r2,8
  812fbc:	e17ff917 	ldw	r5,-28(fp)
  812fc0:	080fc1c0 	call	80fc1c <__divsi3>
  812fc4:	1009883a 	mov	r4,r2
  812fc8:	e0fffc17 	ldw	r3,-16(fp)
  812fcc:	80801924 	muli	r2,r16,100
  812fd0:	10c5883a 	add	r2,r2,r3
  812fd4:	10802404 	addi	r2,r2,144
  812fd8:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812fdc:	e0bffa17 	ldw	r2,-24(fp)
  812fe0:	10800044 	addi	r2,r2,1
  812fe4:	e0bffa15 	stw	r2,-24(fp)
  812fe8:	e0bffa17 	ldw	r2,-24(fp)
  812fec:	10800090 	cmplti	r2,r2,2
  812ff0:	103fdc1e 	bne	r2,zero,812f64 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812ff4:	e0bffc17 	ldw	r2,-16(fp)
  812ff8:	10800943 	ldbu	r2,37(r2)
  812ffc:	10803fcc 	andi	r2,r2,255
  813000:	1080201c 	xori	r2,r2,128
  813004:	10bfe004 	addi	r2,r2,-128
  813008:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  81300c:	e13ffc17 	ldw	r4,-16(fp)
  813010:	08125d40 	call	8125d4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  813014:	e0bffc17 	ldw	r2,-16(fp)
  813018:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81301c:	e0bffc17 	ldw	r2,-16(fp)
  813020:	10800943 	ldbu	r2,37(r2)
  813024:	10c03fcc 	andi	r3,r2,255
  813028:	18c0201c 	xori	r3,r3,128
  81302c:	18ffe004 	addi	r3,r3,-128
  813030:	e0bff517 	ldw	r2,-44(fp)
  813034:	18800426 	beq	r3,r2,813048 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  813038:	e0fffc17 	ldw	r3,-16(fp)
  81303c:	00800044 	movi	r2,1
  813040:	188009c5 	stb	r2,39(r3)
  }
  813044:	003feb06 	br	812ff4 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813048:	e0bffe17 	ldw	r2,-8(fp)
}
  81304c:	e037883a 	mov	sp,fp
  813050:	dfc00217 	ldw	ra,8(sp)
  813054:	df000117 	ldw	fp,4(sp)
  813058:	dc000017 	ldw	r16,0(sp)
  81305c:	dec00304 	addi	sp,sp,12
  813060:	f800283a 	ret

00813064 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  813064:	defffc04 	addi	sp,sp,-16
  813068:	dfc00315 	stw	ra,12(sp)
  81306c:	df000215 	stw	fp,8(sp)
  813070:	df000204 	addi	fp,sp,8
  813074:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  813078:	e0bfff17 	ldw	r2,-4(fp)
  81307c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  813080:	e0bffe17 	ldw	r2,-8(fp)
  813084:	10800943 	ldbu	r2,37(r2)
  813088:	10803fcc 	andi	r2,r2,255
  81308c:	1080201c 	xori	r2,r2,128
  813090:	10bfe004 	addi	r2,r2,-128
  813094:	10c00044 	addi	r3,r2,1
  813098:	e0bffe17 	ldw	r2,-8(fp)
  81309c:	10800983 	ldbu	r2,38(r2)
  8130a0:	10803fcc 	andi	r2,r2,255
  8130a4:	1080201c 	xori	r2,r2,128
  8130a8:	10bfe004 	addi	r2,r2,-128
  8130ac:	18800316 	blt	r3,r2,8130bc <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  8130b0:	e0bffe17 	ldw	r2,-8(fp)
  8130b4:	10000945 	stb	zero,37(r2)
  8130b8:	00000606 	br	8130d4 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8130bc:	e0bffe17 	ldw	r2,-8(fp)
  8130c0:	10800943 	ldbu	r2,37(r2)
  8130c4:	10800044 	addi	r2,r2,1
  8130c8:	1007883a 	mov	r3,r2
  8130cc:	e0bffe17 	ldw	r2,-8(fp)
  8130d0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8130d4:	e0bffe17 	ldw	r2,-8(fp)
  8130d8:	10800983 	ldbu	r2,38(r2)
  8130dc:	10803fcc 	andi	r2,r2,255
  8130e0:	1080201c 	xori	r2,r2,128
  8130e4:	10bfe004 	addi	r2,r2,-128
  8130e8:	10800050 	cmplti	r2,r2,1
  8130ec:	1000091e 	bne	r2,zero,813114 <alt_lcd_16207_timeout+0xb0>
  8130f0:	e0bffe17 	ldw	r2,-8(fp)
  8130f4:	108009c3 	ldbu	r2,39(r2)
  8130f8:	10803fcc 	andi	r2,r2,255
  8130fc:	1080201c 	xori	r2,r2,128
  813100:	10bfe004 	addi	r2,r2,-128
  813104:	1004c03a 	cmpne	r2,r2,zero
  813108:	1000021e 	bne	r2,zero,813114 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  81310c:	e13ffe17 	ldw	r4,-8(fp)
  813110:	08125d40 	call	8125d4 <lcd_repaint_screen>

  return sp->period;
  813114:	e0bffe17 	ldw	r2,-8(fp)
  813118:	10800717 	ldw	r2,28(r2)
}
  81311c:	e037883a 	mov	sp,fp
  813120:	dfc00117 	ldw	ra,4(sp)
  813124:	df000017 	ldw	fp,0(sp)
  813128:	dec00204 	addi	sp,sp,8
  81312c:	f800283a 	ret

00813130 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813130:	defffc04 	addi	sp,sp,-16
  813134:	dfc00315 	stw	ra,12(sp)
  813138:	df000215 	stw	fp,8(sp)
  81313c:	df000204 	addi	fp,sp,8
  813140:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813144:	e0bfff17 	ldw	r2,-4(fp)
  813148:	10800017 	ldw	r2,0(r2)
  81314c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813150:	e0bfff17 	ldw	r2,-4(fp)
  813154:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813158:	010ea604 	movi	r4,15000
  81315c:	08146380 	call	814638 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813160:	e0bffe17 	ldw	r2,-8(fp)
  813164:	1007883a 	mov	r3,r2
  813168:	00800c04 	movi	r2,48
  81316c:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813170:	01040104 	movi	r4,4100
  813174:	08146380 	call	814638 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813178:	e0bffe17 	ldw	r2,-8(fp)
  81317c:	1007883a 	mov	r3,r2
  813180:	00800c04 	movi	r2,48
  813184:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813188:	0100fa04 	movi	r4,1000
  81318c:	08146380 	call	814638 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813190:	e0bffe17 	ldw	r2,-8(fp)
  813194:	1007883a 	mov	r3,r2
  813198:	00800c04 	movi	r2,48
  81319c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8131a0:	e13fff17 	ldw	r4,-4(fp)
  8131a4:	01400e04 	movi	r5,56
  8131a8:	08123840 	call	812384 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8131ac:	e13fff17 	ldw	r4,-4(fp)
  8131b0:	01400204 	movi	r5,8
  8131b4:	08123840 	call	812384 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8131b8:	e13fff17 	ldw	r4,-4(fp)
  8131bc:	08125100 	call	812510 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8131c0:	e13fff17 	ldw	r4,-4(fp)
  8131c4:	01400184 	movi	r5,6
  8131c8:	08123840 	call	812384 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8131cc:	e13fff17 	ldw	r4,-4(fp)
  8131d0:	01400304 	movi	r5,12
  8131d4:	08123840 	call	812384 <lcd_write_command>

  sp->esccount = -1;
  8131d8:	e0ffff17 	ldw	r3,-4(fp)
  8131dc:	00bfffc4 	movi	r2,-1
  8131e0:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8131e4:	e0bfff17 	ldw	r2,-4(fp)
  8131e8:	11000a04 	addi	r4,r2,40
  8131ec:	000b883a 	mov	r5,zero
  8131f0:	01800204 	movi	r6,8
  8131f4:	08034140 	call	803414 <memset>

  sp->scrollpos = 0;
  8131f8:	e0bfff17 	ldw	r2,-4(fp)
  8131fc:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  813200:	e0bfff17 	ldw	r2,-4(fp)
  813204:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  813208:	e0bfff17 	ldw	r2,-4(fp)
  81320c:	100009c5 	stb	zero,39(r2)
  813210:	008020b4 	movhi	r2,130
  813214:	10a36f04 	addi	r2,r2,-29252
  813218:	10800017 	ldw	r2,0(r2)
  81321c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813220:	01400284 	movi	r5,10
  813224:	080fcdc0 	call	80fcdc <__udivsi3>
  813228:	1007883a 	mov	r3,r2
  81322c:	e0bfff17 	ldw	r2,-4(fp)
  813230:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813234:	e0bfff17 	ldw	r2,-4(fp)
  813238:	11000104 	addi	r4,r2,4
  81323c:	e0bfff17 	ldw	r2,-4(fp)
  813240:	10800717 	ldw	r2,28(r2)
  813244:	100b883a 	mov	r5,r2
  813248:	01802074 	movhi	r6,129
  81324c:	318c1904 	addi	r6,r6,12388
  813250:	e1ffff17 	ldw	r7,-4(fp)
  813254:	081057c0 	call	81057c <alt_alarm_start>
}
  813258:	e037883a 	mov	sp,fp
  81325c:	dfc00117 	ldw	ra,4(sp)
  813260:	df000017 	ldw	fp,0(sp)
  813264:	dec00204 	addi	sp,sp,8
  813268:	f800283a 	ret

0081326c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81326c:	defffa04 	addi	sp,sp,-24
  813270:	dfc00515 	stw	ra,20(sp)
  813274:	df000415 	stw	fp,16(sp)
  813278:	df000404 	addi	fp,sp,16
  81327c:	e13ffd15 	stw	r4,-12(fp)
  813280:	e17ffe15 	stw	r5,-8(fp)
  813284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813288:	e0bffd17 	ldw	r2,-12(fp)
  81328c:	10800017 	ldw	r2,0(r2)
  813290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  813294:	e0bffc17 	ldw	r2,-16(fp)
  813298:	11000a04 	addi	r4,r2,40
  81329c:	e0bffd17 	ldw	r2,-12(fp)
  8132a0:	11c00217 	ldw	r7,8(r2)
  8132a4:	e17ffe17 	ldw	r5,-8(fp)
  8132a8:	e1bfff17 	ldw	r6,-4(fp)
  8132ac:	0812b580 	call	812b58 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8132b0:	e037883a 	mov	sp,fp
  8132b4:	dfc00117 	ldw	ra,4(sp)
  8132b8:	df000017 	ldw	fp,0(sp)
  8132bc:	dec00204 	addi	sp,sp,8
  8132c0:	f800283a 	ret

008132c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8132c4:	defffa04 	addi	sp,sp,-24
  8132c8:	dfc00515 	stw	ra,20(sp)
  8132cc:	df000415 	stw	fp,16(sp)
  8132d0:	df000404 	addi	fp,sp,16
  8132d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8132d8:	e0bfff17 	ldw	r2,-4(fp)
  8132dc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8132e0:	e0bfff17 	ldw	r2,-4(fp)
  8132e4:	10800104 	addi	r2,r2,4
  8132e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132ec:	0005303a 	rdctl	r2,status
  8132f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132f4:	e0fffd17 	ldw	r3,-12(fp)
  8132f8:	00bfff84 	movi	r2,-2
  8132fc:	1884703a 	and	r2,r3,r2
  813300:	1001703a 	wrctl	status,r2
  
  return context;
  813304:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813308:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81330c:	081154c0 	call	81154c <alt_tick>
  813310:	e0bffe17 	ldw	r2,-8(fp)
  813314:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813318:	e0bffc17 	ldw	r2,-16(fp)
  81331c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813320:	e037883a 	mov	sp,fp
  813324:	dfc00117 	ldw	ra,4(sp)
  813328:	df000017 	ldw	fp,0(sp)
  81332c:	dec00204 	addi	sp,sp,8
  813330:	f800283a 	ret

00813334 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813334:	defff804 	addi	sp,sp,-32
  813338:	dfc00715 	stw	ra,28(sp)
  81333c:	df000615 	stw	fp,24(sp)
  813340:	df000604 	addi	fp,sp,24
  813344:	e13ffc15 	stw	r4,-16(fp)
  813348:	e17ffd15 	stw	r5,-12(fp)
  81334c:	e1bffe15 	stw	r6,-8(fp)
  813350:	e1ffff15 	stw	r7,-4(fp)
  813354:	e0bfff17 	ldw	r2,-4(fp)
  813358:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81335c:	008020b4 	movhi	r2,130
  813360:	10a36f04 	addi	r2,r2,-29252
  813364:	10800017 	ldw	r2,0(r2)
  813368:	1004c03a 	cmpne	r2,r2,zero
  81336c:	1000041e 	bne	r2,zero,813380 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813370:	00c020b4 	movhi	r3,130
  813374:	18e36f04 	addi	r3,r3,-29252
  813378:	e0bffb17 	ldw	r2,-20(fp)
  81337c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813380:	e0bffc17 	ldw	r2,-16(fp)
  813384:	10800104 	addi	r2,r2,4
  813388:	1007883a 	mov	r3,r2
  81338c:	008001c4 	movi	r2,7
  813390:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813394:	d8000015 	stw	zero,0(sp)
  813398:	e13ffd17 	ldw	r4,-12(fp)
  81339c:	e17ffe17 	ldw	r5,-8(fp)
  8133a0:	01802074 	movhi	r6,129
  8133a4:	318cb104 	addi	r6,r6,12996
  8133a8:	e1fffc17 	ldw	r7,-16(fp)
  8133ac:	08142300 	call	814230 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8133b0:	e037883a 	mov	sp,fp
  8133b4:	dfc00117 	ldw	ra,4(sp)
  8133b8:	df000017 	ldw	fp,0(sp)
  8133bc:	dec00204 	addi	sp,sp,8
  8133c0:	f800283a 	ret

008133c4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8133c4:	defffa04 	addi	sp,sp,-24
  8133c8:	dfc00515 	stw	ra,20(sp)
  8133cc:	df000415 	stw	fp,16(sp)
  8133d0:	df000404 	addi	fp,sp,16
  8133d4:	e13ffd15 	stw	r4,-12(fp)
  8133d8:	e17ffe15 	stw	r5,-8(fp)
  8133dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8133e0:	e0bffd17 	ldw	r2,-12(fp)
  8133e4:	10800017 	ldw	r2,0(r2)
  8133e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8133ec:	e0bffc17 	ldw	r2,-16(fp)
  8133f0:	11000a04 	addi	r4,r2,40
  8133f4:	e0bffd17 	ldw	r2,-12(fp)
  8133f8:	11c00217 	ldw	r7,8(r2)
  8133fc:	e17ffe17 	ldw	r5,-8(fp)
  813400:	e1bfff17 	ldw	r6,-4(fp)
  813404:	08138bc0 	call	8138bc <altera_avalon_uart_read>
      fd->fd_flags);
}
  813408:	e037883a 	mov	sp,fp
  81340c:	dfc00117 	ldw	ra,4(sp)
  813410:	df000017 	ldw	fp,0(sp)
  813414:	dec00204 	addi	sp,sp,8
  813418:	f800283a 	ret

0081341c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81341c:	defffa04 	addi	sp,sp,-24
  813420:	dfc00515 	stw	ra,20(sp)
  813424:	df000415 	stw	fp,16(sp)
  813428:	df000404 	addi	fp,sp,16
  81342c:	e13ffd15 	stw	r4,-12(fp)
  813430:	e17ffe15 	stw	r5,-8(fp)
  813434:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813438:	e0bffd17 	ldw	r2,-12(fp)
  81343c:	10800017 	ldw	r2,0(r2)
  813440:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  813444:	e0bffc17 	ldw	r2,-16(fp)
  813448:	11000a04 	addi	r4,r2,40
  81344c:	e0bffd17 	ldw	r2,-12(fp)
  813450:	11c00217 	ldw	r7,8(r2)
  813454:	e17ffe17 	ldw	r5,-8(fp)
  813458:	e1bfff17 	ldw	r6,-4(fp)
  81345c:	0813b4c0 	call	813b4c <altera_avalon_uart_write>
      fd->fd_flags);
}
  813460:	e037883a 	mov	sp,fp
  813464:	dfc00117 	ldw	ra,4(sp)
  813468:	df000017 	ldw	fp,0(sp)
  81346c:	dec00204 	addi	sp,sp,8
  813470:	f800283a 	ret

00813474 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  813474:	defffc04 	addi	sp,sp,-16
  813478:	dfc00315 	stw	ra,12(sp)
  81347c:	df000215 	stw	fp,8(sp)
  813480:	df000204 	addi	fp,sp,8
  813484:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813488:	e0bfff17 	ldw	r2,-4(fp)
  81348c:	10800017 	ldw	r2,0(r2)
  813490:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  813494:	e0bffe17 	ldw	r2,-8(fp)
  813498:	11000a04 	addi	r4,r2,40
  81349c:	e0bfff17 	ldw	r2,-4(fp)
  8134a0:	11400217 	ldw	r5,8(r2)
  8134a4:	081385c0 	call	81385c <altera_avalon_uart_close>
}
  8134a8:	e037883a 	mov	sp,fp
  8134ac:	dfc00117 	ldw	ra,4(sp)
  8134b0:	df000017 	ldw	fp,0(sp)
  8134b4:	dec00204 	addi	sp,sp,8
  8134b8:	f800283a 	ret

008134bc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8134bc:	defff704 	addi	sp,sp,-36
  8134c0:	dfc00815 	stw	ra,32(sp)
  8134c4:	df000715 	stw	fp,28(sp)
  8134c8:	df000704 	addi	fp,sp,28
  8134cc:	e13ffc15 	stw	r4,-16(fp)
  8134d0:	e17ffd15 	stw	r5,-12(fp)
  8134d4:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  8134d8:	e0bffc17 	ldw	r2,-16(fp)
  8134dc:	10800017 	ldw	r2,0(r2)
  8134e0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8134e4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8134e8:	1004c03a 	cmpne	r2,r2,zero
  8134ec:	1000061e 	bne	r2,zero,813508 <altera_avalon_uart_init+0x4c>
  8134f0:	0005883a 	mov	r2,zero
  8134f4:	1004c03a 	cmpne	r2,r2,zero
  8134f8:	1000031e 	bne	r2,zero,813508 <altera_avalon_uart_init+0x4c>
  8134fc:	0005883a 	mov	r2,zero
  813500:	1005003a 	cmpeq	r2,r2,zero
  813504:	1000031e 	bne	r2,zero,813514 <altera_avalon_uart_init+0x58>
  813508:	00800044 	movi	r2,1
  81350c:	e0bfff15 	stw	r2,-4(fp)
  813510:	00000106 	br	813518 <altera_avalon_uart_init+0x5c>
  813514:	e03fff15 	stw	zero,-4(fp)
  813518:	e0bfff17 	ldw	r2,-4(fp)
  81351c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  813520:	e0bffa17 	ldw	r2,-24(fp)
  813524:	1004c03a 	cmpne	r2,r2,zero
  813528:	1000111e 	bne	r2,zero,813570 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81352c:	e0fffc17 	ldw	r3,-16(fp)
  813530:	00832004 	movi	r2,3200
  813534:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813538:	e0bffb17 	ldw	r2,-20(fp)
  81353c:	11000304 	addi	r4,r2,12
  813540:	e0bffc17 	ldw	r2,-16(fp)
  813544:	10800117 	ldw	r2,4(r2)
  813548:	1007883a 	mov	r3,r2
  81354c:	2005883a 	mov	r2,r4
  813550:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  813554:	d8000015 	stw	zero,0(sp)
  813558:	e13ffd17 	ldw	r4,-12(fp)
  81355c:	e17ffe17 	ldw	r5,-8(fp)
  813560:	01802074 	movhi	r6,129
  813564:	318d6104 	addi	r6,r6,13700
  813568:	e1fffc17 	ldw	r7,-16(fp)
  81356c:	08142300 	call	814230 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  813570:	e037883a 	mov	sp,fp
  813574:	dfc00117 	ldw	ra,4(sp)
  813578:	df000017 	ldw	fp,0(sp)
  81357c:	dec00204 	addi	sp,sp,8
  813580:	f800283a 	ret

00813584 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  813584:	defffa04 	addi	sp,sp,-24
  813588:	dfc00515 	stw	ra,20(sp)
  81358c:	df000415 	stw	fp,16(sp)
  813590:	df000404 	addi	fp,sp,16
  813594:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  813598:	e0bfff17 	ldw	r2,-4(fp)
  81359c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8135a0:	e0bffd17 	ldw	r2,-12(fp)
  8135a4:	10800017 	ldw	r2,0(r2)
  8135a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8135ac:	e0bffc17 	ldw	r2,-16(fp)
  8135b0:	10800204 	addi	r2,r2,8
  8135b4:	10800037 	ldwio	r2,0(r2)
  8135b8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8135bc:	e0bffc17 	ldw	r2,-16(fp)
  8135c0:	10800204 	addi	r2,r2,8
  8135c4:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8135c8:	e0bffc17 	ldw	r2,-16(fp)
  8135cc:	10800204 	addi	r2,r2,8
  8135d0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8135d4:	e0bffe17 	ldw	r2,-8(fp)
  8135d8:	1080200c 	andi	r2,r2,128
  8135dc:	1005003a 	cmpeq	r2,r2,zero
  8135e0:	1000031e 	bne	r2,zero,8135f0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8135e4:	e13ffd17 	ldw	r4,-12(fp)
  8135e8:	e17ffe17 	ldw	r5,-8(fp)
  8135ec:	08136200 	call	813620 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8135f0:	e0bffe17 	ldw	r2,-8(fp)
  8135f4:	1081100c 	andi	r2,r2,1088
  8135f8:	1005003a 	cmpeq	r2,r2,zero
  8135fc:	1000031e 	bne	r2,zero,81360c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813600:	e13ffd17 	ldw	r4,-12(fp)
  813604:	e17ffe17 	ldw	r5,-8(fp)
  813608:	08137000 	call	813700 <altera_avalon_uart_txirq>
  }
  

}
  81360c:	e037883a 	mov	sp,fp
  813610:	dfc00117 	ldw	ra,4(sp)
  813614:	df000017 	ldw	fp,0(sp)
  813618:	dec00204 	addi	sp,sp,8
  81361c:	f800283a 	ret

00813620 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813620:	defffc04 	addi	sp,sp,-16
  813624:	df000315 	stw	fp,12(sp)
  813628:	df000304 	addi	fp,sp,12
  81362c:	e13ffe15 	stw	r4,-8(fp)
  813630:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813634:	e0bfff17 	ldw	r2,-4(fp)
  813638:	108000cc 	andi	r2,r2,3
  81363c:	1004c03a 	cmpne	r2,r2,zero
  813640:	10002b1e 	bne	r2,zero,8136f0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  813644:	e0bffe17 	ldw	r2,-8(fp)
  813648:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81364c:	e0bffe17 	ldw	r2,-8(fp)
  813650:	10800317 	ldw	r2,12(r2)
  813654:	10800044 	addi	r2,r2,1
  813658:	10800fcc 	andi	r2,r2,63
  81365c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	11000317 	ldw	r4,12(r2)
  813668:	e0bffe17 	ldw	r2,-8(fp)
  81366c:	10800017 	ldw	r2,0(r2)
  813670:	10800037 	ldwio	r2,0(r2)
  813674:	1007883a 	mov	r3,r2
  813678:	e0bffe17 	ldw	r2,-8(fp)
  81367c:	2085883a 	add	r2,r4,r2
  813680:	10800704 	addi	r2,r2,28
  813684:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  813688:	e0fffe17 	ldw	r3,-8(fp)
  81368c:	e0bffd17 	ldw	r2,-12(fp)
  813690:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813694:	e0bffe17 	ldw	r2,-8(fp)
  813698:	10800317 	ldw	r2,12(r2)
  81369c:	10800044 	addi	r2,r2,1
  8136a0:	10800fcc 	andi	r2,r2,63
  8136a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8136a8:	e0bffe17 	ldw	r2,-8(fp)
  8136ac:	10c00217 	ldw	r3,8(r2)
  8136b0:	e0bffd17 	ldw	r2,-12(fp)
  8136b4:	18800e1e 	bne	r3,r2,8136f0 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8136b8:	e0bffe17 	ldw	r2,-8(fp)
  8136bc:	10c00117 	ldw	r3,4(r2)
  8136c0:	00bfdfc4 	movi	r2,-129
  8136c4:	1886703a 	and	r3,r3,r2
  8136c8:	e0bffe17 	ldw	r2,-8(fp)
  8136cc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8136d0:	e0bffe17 	ldw	r2,-8(fp)
  8136d4:	10800017 	ldw	r2,0(r2)
  8136d8:	11000304 	addi	r4,r2,12
  8136dc:	e0bffe17 	ldw	r2,-8(fp)
  8136e0:	10800117 	ldw	r2,4(r2)
  8136e4:	1007883a 	mov	r3,r2
  8136e8:	2005883a 	mov	r2,r4
  8136ec:	10c00035 	stwio	r3,0(r2)
  }   
}
  8136f0:	e037883a 	mov	sp,fp
  8136f4:	df000017 	ldw	fp,0(sp)
  8136f8:	dec00104 	addi	sp,sp,4
  8136fc:	f800283a 	ret

00813700 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813700:	defffd04 	addi	sp,sp,-12
  813704:	df000215 	stw	fp,8(sp)
  813708:	df000204 	addi	fp,sp,8
  81370c:	e13ffe15 	stw	r4,-8(fp)
  813710:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813714:	e0bffe17 	ldw	r2,-8(fp)
  813718:	10c00417 	ldw	r3,16(r2)
  81371c:	e0bffe17 	ldw	r2,-8(fp)
  813720:	10800517 	ldw	r2,20(r2)
  813724:	18803626 	beq	r3,r2,813800 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813728:	e0bffe17 	ldw	r2,-8(fp)
  81372c:	10800617 	ldw	r2,24(r2)
  813730:	1080008c 	andi	r2,r2,2
  813734:	1005003a 	cmpeq	r2,r2,zero
  813738:	1000041e 	bne	r2,zero,81374c <altera_avalon_uart_txirq+0x4c>
  81373c:	e0bfff17 	ldw	r2,-4(fp)
  813740:	1082000c 	andi	r2,r2,2048
  813744:	1005003a 	cmpeq	r2,r2,zero
  813748:	10001e1e 	bne	r2,zero,8137c4 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  81374c:	e0bffe17 	ldw	r2,-8(fp)
  813750:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813754:	e0bffe17 	ldw	r2,-8(fp)
  813758:	10800017 	ldw	r2,0(r2)
  81375c:	11000104 	addi	r4,r2,4
  813760:	e0bffe17 	ldw	r2,-8(fp)
  813764:	10c00417 	ldw	r3,16(r2)
  813768:	e0bffe17 	ldw	r2,-8(fp)
  81376c:	1885883a 	add	r2,r3,r2
  813770:	10801704 	addi	r2,r2,92
  813774:	10800003 	ldbu	r2,0(r2)
  813778:	10c03fcc 	andi	r3,r2,255
  81377c:	2005883a 	mov	r2,r4
  813780:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  813784:	e0bffe17 	ldw	r2,-8(fp)
  813788:	10800417 	ldw	r2,16(r2)
  81378c:	10c00044 	addi	r3,r2,1
  813790:	e0bffe17 	ldw	r2,-8(fp)
  813794:	10c00415 	stw	r3,16(r2)
  813798:	e0bffe17 	ldw	r2,-8(fp)
  81379c:	10800417 	ldw	r2,16(r2)
  8137a0:	10c00fcc 	andi	r3,r2,63
  8137a4:	e0bffe17 	ldw	r2,-8(fp)
  8137a8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8137ac:	e0bffe17 	ldw	r2,-8(fp)
  8137b0:	10800117 	ldw	r2,4(r2)
  8137b4:	10c01014 	ori	r3,r2,64
  8137b8:	e0bffe17 	ldw	r2,-8(fp)
  8137bc:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8137c0:	00000f06 	br	813800 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8137c4:	e0bffe17 	ldw	r2,-8(fp)
  8137c8:	10800017 	ldw	r2,0(r2)
  8137cc:	10800204 	addi	r2,r2,8
  8137d0:	10800037 	ldwio	r2,0(r2)
  8137d4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8137d8:	e0bfff17 	ldw	r2,-4(fp)
  8137dc:	1082000c 	andi	r2,r2,2048
  8137e0:	1004c03a 	cmpne	r2,r2,zero
  8137e4:	1000061e 	bne	r2,zero,813800 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8137e8:	e0bffe17 	ldw	r2,-8(fp)
  8137ec:	10c00117 	ldw	r3,4(r2)
  8137f0:	00bfefc4 	movi	r2,-65
  8137f4:	1886703a 	and	r3,r3,r2
  8137f8:	e0bffe17 	ldw	r2,-8(fp)
  8137fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  813800:	e0bffe17 	ldw	r2,-8(fp)
  813804:	10c00417 	ldw	r3,16(r2)
  813808:	e0bffe17 	ldw	r2,-8(fp)
  81380c:	10800517 	ldw	r2,20(r2)
  813810:	1880061e 	bne	r3,r2,81382c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813814:	e0bffe17 	ldw	r2,-8(fp)
  813818:	10c00117 	ldw	r3,4(r2)
  81381c:	00beefc4 	movi	r2,-1089
  813820:	1886703a 	and	r3,r3,r2
  813824:	e0bffe17 	ldw	r2,-8(fp)
  813828:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81382c:	e0bffe17 	ldw	r2,-8(fp)
  813830:	10800017 	ldw	r2,0(r2)
  813834:	11000304 	addi	r4,r2,12
  813838:	e0bffe17 	ldw	r2,-8(fp)
  81383c:	10800117 	ldw	r2,4(r2)
  813840:	1007883a 	mov	r3,r2
  813844:	2005883a 	mov	r2,r4
  813848:	10c00035 	stwio	r3,0(r2)
}
  81384c:	e037883a 	mov	sp,fp
  813850:	df000017 	ldw	fp,0(sp)
  813854:	dec00104 	addi	sp,sp,4
  813858:	f800283a 	ret

0081385c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81385c:	defffc04 	addi	sp,sp,-16
  813860:	df000315 	stw	fp,12(sp)
  813864:	df000304 	addi	fp,sp,12
  813868:	e13ffd15 	stw	r4,-12(fp)
  81386c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813870:	00000706 	br	813890 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813874:	e0bffe17 	ldw	r2,-8(fp)
  813878:	1090000c 	andi	r2,r2,16384
  81387c:	1005003a 	cmpeq	r2,r2,zero
  813880:	1000031e 	bne	r2,zero,813890 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  813884:	00bffd44 	movi	r2,-11
  813888:	e0bfff15 	stw	r2,-4(fp)
  81388c:	00000606 	br	8138a8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813890:	e0bffd17 	ldw	r2,-12(fp)
  813894:	10c00417 	ldw	r3,16(r2)
  813898:	e0bffd17 	ldw	r2,-12(fp)
  81389c:	10800517 	ldw	r2,20(r2)
  8138a0:	18bff41e 	bne	r3,r2,813874 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8138a4:	e03fff15 	stw	zero,-4(fp)
  8138a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8138ac:	e037883a 	mov	sp,fp
  8138b0:	df000017 	ldw	fp,0(sp)
  8138b4:	dec00104 	addi	sp,sp,4
  8138b8:	f800283a 	ret

008138bc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8138bc:	defff004 	addi	sp,sp,-64
  8138c0:	dfc00f15 	stw	ra,60(sp)
  8138c4:	df000e15 	stw	fp,56(sp)
  8138c8:	df000e04 	addi	fp,sp,56
  8138cc:	e13ffb15 	stw	r4,-20(fp)
  8138d0:	e17ffc15 	stw	r5,-16(fp)
  8138d4:	e1bffd15 	stw	r6,-12(fp)
  8138d8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  8138dc:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  8138e0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8138e4:	e0bffe17 	ldw	r2,-8(fp)
  8138e8:	1090000c 	andi	r2,r2,16384
  8138ec:	1005003a 	cmpeq	r2,r2,zero
  8138f0:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  8138f4:	e0bffb17 	ldw	r2,-20(fp)
  8138f8:	10800217 	ldw	r2,8(r2)
  8138fc:	10800044 	addi	r2,r2,1
  813900:	10800fcc 	andi	r2,r2,63
  813904:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813908:	00001906 	br	813970 <altera_avalon_uart_read+0xb4>
    {
      count++;
  81390c:	e0bff617 	ldw	r2,-40(fp)
  813910:	10800044 	addi	r2,r2,1
  813914:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  813918:	e0bffb17 	ldw	r2,-20(fp)
  81391c:	10c00217 	ldw	r3,8(r2)
  813920:	e0bffb17 	ldw	r2,-20(fp)
  813924:	1885883a 	add	r2,r3,r2
  813928:	10800704 	addi	r2,r2,28
  81392c:	10800003 	ldbu	r2,0(r2)
  813930:	1007883a 	mov	r3,r2
  813934:	e0bffc17 	ldw	r2,-16(fp)
  813938:	10c00005 	stb	r3,0(r2)
  81393c:	e0bffc17 	ldw	r2,-16(fp)
  813940:	10800044 	addi	r2,r2,1
  813944:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  813948:	e0bffb17 	ldw	r2,-20(fp)
  81394c:	10800217 	ldw	r2,8(r2)
  813950:	10c00044 	addi	r3,r2,1
  813954:	e0bffb17 	ldw	r2,-20(fp)
  813958:	10c00215 	stw	r3,8(r2)
  81395c:	e0bffb17 	ldw	r2,-20(fp)
  813960:	10800217 	ldw	r2,8(r2)
  813964:	10c00fcc 	andi	r3,r2,63
  813968:	e0bffb17 	ldw	r2,-20(fp)
  81396c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813970:	e0fff617 	ldw	r3,-40(fp)
  813974:	e0bffd17 	ldw	r2,-12(fp)
  813978:	1880050e 	bge	r3,r2,813990 <altera_avalon_uart_read+0xd4>
  81397c:	e0bffb17 	ldw	r2,-20(fp)
  813980:	10c00217 	ldw	r3,8(r2)
  813984:	e0bffb17 	ldw	r2,-20(fp)
  813988:	10800317 	ldw	r2,12(r2)
  81398c:	18bfdf1e 	bne	r3,r2,81390c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813990:	e0bff617 	ldw	r2,-40(fp)
  813994:	1004c03a 	cmpne	r2,r2,zero
  813998:	1000271e 	bne	r2,zero,813a38 <altera_avalon_uart_read+0x17c>
  81399c:	e0bffb17 	ldw	r2,-20(fp)
  8139a0:	10c00217 	ldw	r3,8(r2)
  8139a4:	e0bffb17 	ldw	r2,-20(fp)
  8139a8:	10800317 	ldw	r2,12(r2)
  8139ac:	1880221e 	bne	r3,r2,813a38 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  8139b0:	e0bff917 	ldw	r2,-28(fp)
  8139b4:	1004c03a 	cmpne	r2,r2,zero
  8139b8:	1000061e 	bne	r2,zero,8139d4 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8139bc:	0813aec0 	call	813aec <alt_get_errno>
  8139c0:	00c002c4 	movi	r3,11
  8139c4:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8139c8:	00800044 	movi	r2,1
  8139cc:	e0bff705 	stb	r2,-36(fp)
        break;
  8139d0:	00001f06 	br	813a50 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8139d4:	0005303a 	rdctl	r2,status
  8139d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8139dc:	e0fff517 	ldw	r3,-44(fp)
  8139e0:	00bfff84 	movi	r2,-2
  8139e4:	1884703a 	and	r2,r3,r2
  8139e8:	1001703a 	wrctl	status,r2
  
  return context;
  8139ec:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8139f0:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8139f4:	e0bffb17 	ldw	r2,-20(fp)
  8139f8:	10800117 	ldw	r2,4(r2)
  8139fc:	10c02014 	ori	r3,r2,128
  813a00:	e0bffb17 	ldw	r2,-20(fp)
  813a04:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813a08:	e0bffb17 	ldw	r2,-20(fp)
  813a0c:	10800017 	ldw	r2,0(r2)
  813a10:	11000304 	addi	r4,r2,12
  813a14:	e0bffb17 	ldw	r2,-20(fp)
  813a18:	10800117 	ldw	r2,4(r2)
  813a1c:	1007883a 	mov	r3,r2
  813a20:	2005883a 	mov	r2,r4
  813a24:	10c00035 	stwio	r3,0(r2)
  813a28:	e0bffa17 	ldw	r2,-24(fp)
  813a2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a30:	e0bff417 	ldw	r2,-48(fp)
  813a34:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813a38:	e0bff617 	ldw	r2,-40(fp)
  813a3c:	1004c03a 	cmpne	r2,r2,zero
  813a40:	1000031e 	bne	r2,zero,813a50 <altera_avalon_uart_read+0x194>
  813a44:	e0bffd17 	ldw	r2,-12(fp)
  813a48:	1004c03a 	cmpne	r2,r2,zero
  813a4c:	103fc81e 	bne	r2,zero,813970 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a50:	0005303a 	rdctl	r2,status
  813a54:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a58:	e0fff317 	ldw	r3,-52(fp)
  813a5c:	00bfff84 	movi	r2,-2
  813a60:	1884703a 	and	r2,r3,r2
  813a64:	1001703a 	wrctl	status,r2
  
  return context;
  813a68:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813a6c:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813a70:	e0bffb17 	ldw	r2,-20(fp)
  813a74:	10800117 	ldw	r2,4(r2)
  813a78:	10c02014 	ori	r3,r2,128
  813a7c:	e0bffb17 	ldw	r2,-20(fp)
  813a80:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813a84:	e0bffb17 	ldw	r2,-20(fp)
  813a88:	10800017 	ldw	r2,0(r2)
  813a8c:	11000304 	addi	r4,r2,12
  813a90:	e0bffb17 	ldw	r2,-20(fp)
  813a94:	10800117 	ldw	r2,4(r2)
  813a98:	1007883a 	mov	r3,r2
  813a9c:	2005883a 	mov	r2,r4
  813aa0:	10c00035 	stwio	r3,0(r2)
  813aa4:	e0bffa17 	ldw	r2,-24(fp)
  813aa8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813aac:	e0bff217 	ldw	r2,-56(fp)
  813ab0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813ab4:	e0bff703 	ldbu	r2,-36(fp)
  813ab8:	1005003a 	cmpeq	r2,r2,zero
  813abc:	1000031e 	bne	r2,zero,813acc <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  813ac0:	00bffd04 	movi	r2,-12
  813ac4:	e0bfff15 	stw	r2,-4(fp)
  813ac8:	00000206 	br	813ad4 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  813acc:	e0bff617 	ldw	r2,-40(fp)
  813ad0:	e0bfff15 	stw	r2,-4(fp)
  813ad4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813ad8:	e037883a 	mov	sp,fp
  813adc:	dfc00117 	ldw	ra,4(sp)
  813ae0:	df000017 	ldw	fp,0(sp)
  813ae4:	dec00204 	addi	sp,sp,8
  813ae8:	f800283a 	ret

00813aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813aec:	defffd04 	addi	sp,sp,-12
  813af0:	dfc00215 	stw	ra,8(sp)
  813af4:	df000115 	stw	fp,4(sp)
  813af8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813afc:	00802074 	movhi	r2,129
  813b00:	109c2004 	addi	r2,r2,28800
  813b04:	10800017 	ldw	r2,0(r2)
  813b08:	1005003a 	cmpeq	r2,r2,zero
  813b0c:	1000061e 	bne	r2,zero,813b28 <alt_get_errno+0x3c>
  813b10:	00802074 	movhi	r2,129
  813b14:	109c2004 	addi	r2,r2,28800
  813b18:	10800017 	ldw	r2,0(r2)
  813b1c:	103ee83a 	callr	r2
  813b20:	e0bfff15 	stw	r2,-4(fp)
  813b24:	00000306 	br	813b34 <alt_get_errno+0x48>
  813b28:	008020b4 	movhi	r2,130
  813b2c:	10a36404 	addi	r2,r2,-29296
  813b30:	e0bfff15 	stw	r2,-4(fp)
  813b34:	e0bfff17 	ldw	r2,-4(fp)
}
  813b38:	e037883a 	mov	sp,fp
  813b3c:	dfc00117 	ldw	ra,4(sp)
  813b40:	df000017 	ldw	fp,0(sp)
  813b44:	dec00204 	addi	sp,sp,8
  813b48:	f800283a 	ret

00813b4c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813b4c:	defff204 	addi	sp,sp,-56
  813b50:	dfc00d15 	stw	ra,52(sp)
  813b54:	df000c15 	stw	fp,48(sp)
  813b58:	df000c04 	addi	fp,sp,48
  813b5c:	e13ffc15 	stw	r4,-16(fp)
  813b60:	e17ffd15 	stw	r5,-12(fp)
  813b64:	e1bffe15 	stw	r6,-8(fp)
  813b68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813b6c:	e0bffe17 	ldw	r2,-8(fp)
  813b70:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813b74:	e0bfff17 	ldw	r2,-4(fp)
  813b78:	1090000c 	andi	r2,r2,16384
  813b7c:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813b80:	00004006 	br	813c84 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813b84:	e0bffc17 	ldw	r2,-16(fp)
  813b88:	10800517 	ldw	r2,20(r2)
  813b8c:	10800044 	addi	r2,r2,1
  813b90:	10800fcc 	andi	r2,r2,63
  813b94:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813b98:	e0bffc17 	ldw	r2,-16(fp)
  813b9c:	10c00417 	ldw	r3,16(r2)
  813ba0:	e0bff917 	ldw	r2,-28(fp)
  813ba4:	1880251e 	bne	r3,r2,813c3c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813ba8:	e0bffa17 	ldw	r2,-24(fp)
  813bac:	1005003a 	cmpeq	r2,r2,zero
  813bb0:	1000051e 	bne	r2,zero,813bc8 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813bb4:	0813d140 	call	813d14 <alt_get_errno>
  813bb8:	1007883a 	mov	r3,r2
  813bbc:	008002c4 	movi	r2,11
  813bc0:	18800015 	stw	r2,0(r3)
        break;
  813bc4:	00003206 	br	813c90 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813bc8:	0005303a 	rdctl	r2,status
  813bcc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bd0:	e0fff717 	ldw	r3,-36(fp)
  813bd4:	00bfff84 	movi	r2,-2
  813bd8:	1884703a 	and	r2,r3,r2
  813bdc:	1001703a 	wrctl	status,r2
  
  return context;
  813be0:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813be4:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813be8:	e0bffc17 	ldw	r2,-16(fp)
  813bec:	10800117 	ldw	r2,4(r2)
  813bf0:	10c11014 	ori	r3,r2,1088
  813bf4:	e0bffc17 	ldw	r2,-16(fp)
  813bf8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813bfc:	e0bffc17 	ldw	r2,-16(fp)
  813c00:	10800017 	ldw	r2,0(r2)
  813c04:	11000304 	addi	r4,r2,12
  813c08:	e0bffc17 	ldw	r2,-16(fp)
  813c0c:	10800117 	ldw	r2,4(r2)
  813c10:	1007883a 	mov	r3,r2
  813c14:	2005883a 	mov	r2,r4
  813c18:	10c00035 	stwio	r3,0(r2)
  813c1c:	e0bffb17 	ldw	r2,-20(fp)
  813c20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c24:	e0bff617 	ldw	r2,-40(fp)
  813c28:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813c2c:	e0bffc17 	ldw	r2,-16(fp)
  813c30:	10c00417 	ldw	r3,16(r2)
  813c34:	e0bff917 	ldw	r2,-28(fp)
  813c38:	18bffc26 	beq	r3,r2,813c2c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813c3c:	e0bff817 	ldw	r2,-32(fp)
  813c40:	10bfffc4 	addi	r2,r2,-1
  813c44:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813c48:	e0bffc17 	ldw	r2,-16(fp)
  813c4c:	10c00517 	ldw	r3,20(r2)
  813c50:	e0bffd17 	ldw	r2,-12(fp)
  813c54:	10800003 	ldbu	r2,0(r2)
  813c58:	1009883a 	mov	r4,r2
  813c5c:	e0bffc17 	ldw	r2,-16(fp)
  813c60:	1885883a 	add	r2,r3,r2
  813c64:	10801704 	addi	r2,r2,92
  813c68:	11000005 	stb	r4,0(r2)
  813c6c:	e0bffd17 	ldw	r2,-12(fp)
  813c70:	10800044 	addi	r2,r2,1
  813c74:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813c78:	e0fffc17 	ldw	r3,-16(fp)
  813c7c:	e0bff917 	ldw	r2,-28(fp)
  813c80:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813c84:	e0bff817 	ldw	r2,-32(fp)
  813c88:	1004c03a 	cmpne	r2,r2,zero
  813c8c:	103fbd1e 	bne	r2,zero,813b84 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c90:	0005303a 	rdctl	r2,status
  813c94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c98:	e0fff517 	ldw	r3,-44(fp)
  813c9c:	00bfff84 	movi	r2,-2
  813ca0:	1884703a 	and	r2,r3,r2
  813ca4:	1001703a 	wrctl	status,r2
  
  return context;
  813ca8:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813cac:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813cb0:	e0bffc17 	ldw	r2,-16(fp)
  813cb4:	10800117 	ldw	r2,4(r2)
  813cb8:	10c11014 	ori	r3,r2,1088
  813cbc:	e0bffc17 	ldw	r2,-16(fp)
  813cc0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813cc4:	e0bffc17 	ldw	r2,-16(fp)
  813cc8:	10800017 	ldw	r2,0(r2)
  813ccc:	11000304 	addi	r4,r2,12
  813cd0:	e0bffc17 	ldw	r2,-16(fp)
  813cd4:	10800117 	ldw	r2,4(r2)
  813cd8:	1007883a 	mov	r3,r2
  813cdc:	2005883a 	mov	r2,r4
  813ce0:	10c00035 	stwio	r3,0(r2)
  813ce4:	e0bffb17 	ldw	r2,-20(fp)
  813ce8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cec:	e0bff417 	ldw	r2,-48(fp)
  813cf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813cf4:	e0fffe17 	ldw	r3,-8(fp)
  813cf8:	e0bff817 	ldw	r2,-32(fp)
  813cfc:	1885c83a 	sub	r2,r3,r2
}
  813d00:	e037883a 	mov	sp,fp
  813d04:	dfc00117 	ldw	ra,4(sp)
  813d08:	df000017 	ldw	fp,0(sp)
  813d0c:	dec00204 	addi	sp,sp,8
  813d10:	f800283a 	ret

00813d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813d14:	defffd04 	addi	sp,sp,-12
  813d18:	dfc00215 	stw	ra,8(sp)
  813d1c:	df000115 	stw	fp,4(sp)
  813d20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813d24:	00802074 	movhi	r2,129
  813d28:	109c2004 	addi	r2,r2,28800
  813d2c:	10800017 	ldw	r2,0(r2)
  813d30:	1005003a 	cmpeq	r2,r2,zero
  813d34:	1000061e 	bne	r2,zero,813d50 <alt_get_errno+0x3c>
  813d38:	00802074 	movhi	r2,129
  813d3c:	109c2004 	addi	r2,r2,28800
  813d40:	10800017 	ldw	r2,0(r2)
  813d44:	103ee83a 	callr	r2
  813d48:	e0bfff15 	stw	r2,-4(fp)
  813d4c:	00000306 	br	813d5c <alt_get_errno+0x48>
  813d50:	008020b4 	movhi	r2,130
  813d54:	10a36404 	addi	r2,r2,-29296
  813d58:	e0bfff15 	stw	r2,-4(fp)
  813d5c:	e0bfff17 	ldw	r2,-4(fp)
}
  813d60:	e037883a 	mov	sp,fp
  813d64:	dfc00117 	ldw	ra,4(sp)
  813d68:	df000017 	ldw	fp,0(sp)
  813d6c:	dec00204 	addi	sp,sp,8
  813d70:	f800283a 	ret

00813d74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813d74:	defffe04 	addi	sp,sp,-8
  813d78:	df000115 	stw	fp,4(sp)
  813d7c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813d80:	e03fff15 	stw	zero,-4(fp)
  813d84:	00000506 	br	813d9c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813d88:	e0bfff17 	ldw	r2,-4(fp)
  813d8c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813d90:	e0bfff17 	ldw	r2,-4(fp)
  813d94:	10800804 	addi	r2,r2,32
  813d98:	e0bfff15 	stw	r2,-4(fp)
  813d9c:	e0bfff17 	ldw	r2,-4(fp)
  813da0:	10820030 	cmpltui	r2,r2,2048
  813da4:	103ff81e 	bne	r2,zero,813d88 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813da8:	e037883a 	mov	sp,fp
  813dac:	df000017 	ldw	fp,0(sp)
  813db0:	dec00104 	addi	sp,sp,4
  813db4:	f800283a 	ret

00813db8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813db8:	defff904 	addi	sp,sp,-28
  813dbc:	dfc00615 	stw	ra,24(sp)
  813dc0:	df000515 	stw	fp,20(sp)
  813dc4:	df000504 	addi	fp,sp,20
  813dc8:	e13ffd15 	stw	r4,-12(fp)
  813dcc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813dd0:	e0bffd17 	ldw	r2,-12(fp)
  813dd4:	1005003a 	cmpeq	r2,r2,zero
  813dd8:	1000041e 	bne	r2,zero,813dec <alt_dev_llist_insert+0x34>
  813ddc:	e0bffd17 	ldw	r2,-12(fp)
  813de0:	10800217 	ldw	r2,8(r2)
  813de4:	1004c03a 	cmpne	r2,r2,zero
  813de8:	1000071e 	bne	r2,zero,813e08 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813dec:	0813e6c0 	call	813e6c <alt_get_errno>
  813df0:	1007883a 	mov	r3,r2
  813df4:	00800584 	movi	r2,22
  813df8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813dfc:	00bffa84 	movi	r2,-22
  813e00:	e0bfff15 	stw	r2,-4(fp)
  813e04:	00001306 	br	813e54 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813e08:	e0fffd17 	ldw	r3,-12(fp)
  813e0c:	e0bffe17 	ldw	r2,-8(fp)
  813e10:	e0bffb15 	stw	r2,-20(fp)
  813e14:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813e18:	e0fffc17 	ldw	r3,-16(fp)
  813e1c:	e0bffb17 	ldw	r2,-20(fp)
  813e20:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813e24:	e0bffb17 	ldw	r2,-20(fp)
  813e28:	10c00017 	ldw	r3,0(r2)
  813e2c:	e0bffc17 	ldw	r2,-16(fp)
  813e30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813e34:	e0bffb17 	ldw	r2,-20(fp)
  813e38:	10c00017 	ldw	r3,0(r2)
  813e3c:	e0bffc17 	ldw	r2,-16(fp)
  813e40:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813e44:	e0fffb17 	ldw	r3,-20(fp)
  813e48:	e0bffc17 	ldw	r2,-16(fp)
  813e4c:	18800015 	stw	r2,0(r3)

  return 0;  
  813e50:	e03fff15 	stw	zero,-4(fp)
  813e54:	e0bfff17 	ldw	r2,-4(fp)
}
  813e58:	e037883a 	mov	sp,fp
  813e5c:	dfc00117 	ldw	ra,4(sp)
  813e60:	df000017 	ldw	fp,0(sp)
  813e64:	dec00204 	addi	sp,sp,8
  813e68:	f800283a 	ret

00813e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813e6c:	defffd04 	addi	sp,sp,-12
  813e70:	dfc00215 	stw	ra,8(sp)
  813e74:	df000115 	stw	fp,4(sp)
  813e78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813e7c:	00802074 	movhi	r2,129
  813e80:	109c2004 	addi	r2,r2,28800
  813e84:	10800017 	ldw	r2,0(r2)
  813e88:	1005003a 	cmpeq	r2,r2,zero
  813e8c:	1000061e 	bne	r2,zero,813ea8 <alt_get_errno+0x3c>
  813e90:	00802074 	movhi	r2,129
  813e94:	109c2004 	addi	r2,r2,28800
  813e98:	10800017 	ldw	r2,0(r2)
  813e9c:	103ee83a 	callr	r2
  813ea0:	e0bfff15 	stw	r2,-4(fp)
  813ea4:	00000306 	br	813eb4 <alt_get_errno+0x48>
  813ea8:	008020b4 	movhi	r2,130
  813eac:	10a36404 	addi	r2,r2,-29296
  813eb0:	e0bfff15 	stw	r2,-4(fp)
  813eb4:	e0bfff17 	ldw	r2,-4(fp)
}
  813eb8:	e037883a 	mov	sp,fp
  813ebc:	dfc00117 	ldw	ra,4(sp)
  813ec0:	df000017 	ldw	fp,0(sp)
  813ec4:	dec00204 	addi	sp,sp,8
  813ec8:	f800283a 	ret

00813ecc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813ecc:	defffd04 	addi	sp,sp,-12
  813ed0:	dfc00215 	stw	ra,8(sp)
  813ed4:	df000115 	stw	fp,4(sp)
  813ed8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813edc:	00bfff04 	movi	r2,-4
  813ee0:	00c02074 	movhi	r3,129
  813ee4:	18d31c04 	addi	r3,r3,19568
  813ee8:	1885883a 	add	r2,r3,r2
  813eec:	e0bfff15 	stw	r2,-4(fp)
  813ef0:	00000606 	br	813f0c <_do_ctors+0x40>
        (*ctor) (); 
  813ef4:	e0bfff17 	ldw	r2,-4(fp)
  813ef8:	10800017 	ldw	r2,0(r2)
  813efc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813f00:	e0bfff17 	ldw	r2,-4(fp)
  813f04:	10bfff04 	addi	r2,r2,-4
  813f08:	e0bfff15 	stw	r2,-4(fp)
  813f0c:	e0ffff17 	ldw	r3,-4(fp)
  813f10:	00802074 	movhi	r2,129
  813f14:	10931b04 	addi	r2,r2,19564
  813f18:	18bff62e 	bgeu	r3,r2,813ef4 <_do_ctors+0x28>
        (*ctor) (); 
}
  813f1c:	e037883a 	mov	sp,fp
  813f20:	dfc00117 	ldw	ra,4(sp)
  813f24:	df000017 	ldw	fp,0(sp)
  813f28:	dec00204 	addi	sp,sp,8
  813f2c:	f800283a 	ret

00813f30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813f30:	defffd04 	addi	sp,sp,-12
  813f34:	dfc00215 	stw	ra,8(sp)
  813f38:	df000115 	stw	fp,4(sp)
  813f3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813f40:	00bfff04 	movi	r2,-4
  813f44:	00c02074 	movhi	r3,129
  813f48:	18d31c04 	addi	r3,r3,19568
  813f4c:	1885883a 	add	r2,r3,r2
  813f50:	e0bfff15 	stw	r2,-4(fp)
  813f54:	00000606 	br	813f70 <_do_dtors+0x40>
        (*dtor) (); 
  813f58:	e0bfff17 	ldw	r2,-4(fp)
  813f5c:	10800017 	ldw	r2,0(r2)
  813f60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813f64:	e0bfff17 	ldw	r2,-4(fp)
  813f68:	10bfff04 	addi	r2,r2,-4
  813f6c:	e0bfff15 	stw	r2,-4(fp)
  813f70:	e0ffff17 	ldw	r3,-4(fp)
  813f74:	00802074 	movhi	r2,129
  813f78:	10931c04 	addi	r2,r2,19568
  813f7c:	18bff62e 	bgeu	r3,r2,813f58 <_do_dtors+0x28>
        (*dtor) (); 
}
  813f80:	e037883a 	mov	sp,fp
  813f84:	dfc00117 	ldw	ra,4(sp)
  813f88:	df000017 	ldw	fp,0(sp)
  813f8c:	dec00204 	addi	sp,sp,8
  813f90:	f800283a 	ret

00813f94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813f94:	defff904 	addi	sp,sp,-28
  813f98:	dfc00615 	stw	ra,24(sp)
  813f9c:	df000515 	stw	fp,20(sp)
  813fa0:	df000504 	addi	fp,sp,20
  813fa4:	e13ffd15 	stw	r4,-12(fp)
  813fa8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813fac:	e0bffe17 	ldw	r2,-8(fp)
  813fb0:	10800017 	ldw	r2,0(r2)
  813fb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813fb8:	e13ffd17 	ldw	r4,-12(fp)
  813fbc:	08042280 	call	804228 <strlen>
  813fc0:	10800044 	addi	r2,r2,1
  813fc4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813fc8:	00000d06 	br	814000 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813fcc:	e0bffc17 	ldw	r2,-16(fp)
  813fd0:	11000217 	ldw	r4,8(r2)
  813fd4:	e1bffb17 	ldw	r6,-20(fp)
  813fd8:	e17ffd17 	ldw	r5,-12(fp)
  813fdc:	08148b00 	call	8148b0 <memcmp>
  813fe0:	1004c03a 	cmpne	r2,r2,zero
  813fe4:	1000031e 	bne	r2,zero,813ff4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813fe8:	e0bffc17 	ldw	r2,-16(fp)
  813fec:	e0bfff15 	stw	r2,-4(fp)
  813ff0:	00000706 	br	814010 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813ff4:	e0bffc17 	ldw	r2,-16(fp)
  813ff8:	10800017 	ldw	r2,0(r2)
  813ffc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814000:	e0fffe17 	ldw	r3,-8(fp)
  814004:	e0bffc17 	ldw	r2,-16(fp)
  814008:	10fff01e 	bne	r2,r3,813fcc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81400c:	e03fff15 	stw	zero,-4(fp)
  814010:	e0bfff17 	ldw	r2,-4(fp)
}
  814014:	e037883a 	mov	sp,fp
  814018:	dfc00117 	ldw	ra,4(sp)
  81401c:	df000017 	ldw	fp,0(sp)
  814020:	dec00204 	addi	sp,sp,8
  814024:	f800283a 	ret

00814028 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  814028:	defffa04 	addi	sp,sp,-24
  81402c:	dfc00515 	stw	ra,20(sp)
  814030:	df000415 	stw	fp,16(sp)
  814034:	df000404 	addi	fp,sp,16
  814038:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81403c:	00802074 	movhi	r2,129
  814040:	109c1b04 	addi	r2,r2,28780
  814044:	10800017 	ldw	r2,0(r2)
  814048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81404c:	00003306 	br	81411c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  814050:	e0bffd17 	ldw	r2,-12(fp)
  814054:	11000217 	ldw	r4,8(r2)
  814058:	08042280 	call	804228 <strlen>
  81405c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  814060:	e0bffd17 	ldw	r2,-12(fp)
  814064:	10c00217 	ldw	r3,8(r2)
  814068:	e0bffc17 	ldw	r2,-16(fp)
  81406c:	1885883a 	add	r2,r3,r2
  814070:	10bfffc4 	addi	r2,r2,-1
  814074:	10800003 	ldbu	r2,0(r2)
  814078:	10803fcc 	andi	r2,r2,255
  81407c:	1080201c 	xori	r2,r2,128
  814080:	10bfe004 	addi	r2,r2,-128
  814084:	10800bd8 	cmpnei	r2,r2,47
  814088:	1000031e 	bne	r2,zero,814098 <alt_find_file+0x70>
    {
      len -= 1;
  81408c:	e0bffc17 	ldw	r2,-16(fp)
  814090:	10bfffc4 	addi	r2,r2,-1
  814094:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814098:	e0bffc17 	ldw	r2,-16(fp)
  81409c:	1007883a 	mov	r3,r2
  8140a0:	e0bffe17 	ldw	r2,-8(fp)
  8140a4:	1885883a 	add	r2,r3,r2
  8140a8:	10800003 	ldbu	r2,0(r2)
  8140ac:	10803fcc 	andi	r2,r2,255
  8140b0:	1080201c 	xori	r2,r2,128
  8140b4:	10bfe004 	addi	r2,r2,-128
  8140b8:	10800be0 	cmpeqi	r2,r2,47
  8140bc:	10000a1e 	bne	r2,zero,8140e8 <alt_find_file+0xc0>
  8140c0:	e0bffc17 	ldw	r2,-16(fp)
  8140c4:	1007883a 	mov	r3,r2
  8140c8:	e0bffe17 	ldw	r2,-8(fp)
  8140cc:	1885883a 	add	r2,r3,r2
  8140d0:	10800003 	ldbu	r2,0(r2)
  8140d4:	10803fcc 	andi	r2,r2,255
  8140d8:	1080201c 	xori	r2,r2,128
  8140dc:	10bfe004 	addi	r2,r2,-128
  8140e0:	1004c03a 	cmpne	r2,r2,zero
  8140e4:	10000a1e 	bne	r2,zero,814110 <alt_find_file+0xe8>
  8140e8:	e0bffd17 	ldw	r2,-12(fp)
  8140ec:	11000217 	ldw	r4,8(r2)
  8140f0:	e1bffc17 	ldw	r6,-16(fp)
  8140f4:	e17ffe17 	ldw	r5,-8(fp)
  8140f8:	08148b00 	call	8148b0 <memcmp>
  8140fc:	1004c03a 	cmpne	r2,r2,zero
  814100:	1000031e 	bne	r2,zero,814110 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814104:	e0bffd17 	ldw	r2,-12(fp)
  814108:	e0bfff15 	stw	r2,-4(fp)
  81410c:	00000806 	br	814130 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  814110:	e0bffd17 	ldw	r2,-12(fp)
  814114:	10800017 	ldw	r2,0(r2)
  814118:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81411c:	00c02074 	movhi	r3,129
  814120:	18dc1b04 	addi	r3,r3,28780
  814124:	e0bffd17 	ldw	r2,-12(fp)
  814128:	10ffc91e 	bne	r2,r3,814050 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81412c:	e03fff15 	stw	zero,-4(fp)
  814130:	e0bfff17 	ldw	r2,-4(fp)
}
  814134:	e037883a 	mov	sp,fp
  814138:	dfc00117 	ldw	ra,4(sp)
  81413c:	df000017 	ldw	fp,0(sp)
  814140:	dec00204 	addi	sp,sp,8
  814144:	f800283a 	ret

00814148 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814148:	defffc04 	addi	sp,sp,-16
  81414c:	df000315 	stw	fp,12(sp)
  814150:	df000304 	addi	fp,sp,12
  814154:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814158:	00bffa04 	movi	r2,-24
  81415c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814160:	e03ffe15 	stw	zero,-8(fp)
  814164:	00001e06 	br	8141e0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  814168:	e0bffe17 	ldw	r2,-8(fp)
  81416c:	00c02074 	movhi	r3,129
  814170:	18d71f04 	addi	r3,r3,23676
  814174:	10800324 	muli	r2,r2,12
  814178:	10c5883a 	add	r2,r2,r3
  81417c:	10800017 	ldw	r2,0(r2)
  814180:	1004c03a 	cmpne	r2,r2,zero
  814184:	1000131e 	bne	r2,zero,8141d4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  814188:	e0bffe17 	ldw	r2,-8(fp)
  81418c:	00c02074 	movhi	r3,129
  814190:	18d71f04 	addi	r3,r3,23676
  814194:	10800324 	muli	r2,r2,12
  814198:	10c7883a 	add	r3,r2,r3
  81419c:	e0bfff17 	ldw	r2,-4(fp)
  8141a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8141a4:	00802074 	movhi	r2,129
  8141a8:	109c1f04 	addi	r2,r2,28796
  8141ac:	10c00017 	ldw	r3,0(r2)
  8141b0:	e0bffe17 	ldw	r2,-8(fp)
  8141b4:	1880040e 	bge	r3,r2,8141c8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8141b8:	00c02074 	movhi	r3,129
  8141bc:	18dc1f04 	addi	r3,r3,28796
  8141c0:	e0bffe17 	ldw	r2,-8(fp)
  8141c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8141c8:	e0bffe17 	ldw	r2,-8(fp)
  8141cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8141d0:	00000606 	br	8141ec <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8141d4:	e0bffe17 	ldw	r2,-8(fp)
  8141d8:	10800044 	addi	r2,r2,1
  8141dc:	e0bffe15 	stw	r2,-8(fp)
  8141e0:	e0bffe17 	ldw	r2,-8(fp)
  8141e4:	10800810 	cmplti	r2,r2,32
  8141e8:	103fdf1e 	bne	r2,zero,814168 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8141ec:	e0bffd17 	ldw	r2,-12(fp)
}
  8141f0:	e037883a 	mov	sp,fp
  8141f4:	df000017 	ldw	fp,0(sp)
  8141f8:	dec00104 	addi	sp,sp,4
  8141fc:	f800283a 	ret

00814200 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  814200:	defffe04 	addi	sp,sp,-8
  814204:	dfc00115 	stw	ra,4(sp)
  814208:	df000015 	stw	fp,0(sp)
  81420c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  814210:	0009883a 	mov	r4,zero
  814214:	01440004 	movi	r5,4096
  814218:	08147d40 	call	8147d4 <alt_icache_flush>
#endif
}
  81421c:	e037883a 	mov	sp,fp
  814220:	dfc00117 	ldw	ra,4(sp)
  814224:	df000017 	ldw	fp,0(sp)
  814228:	dec00204 	addi	sp,sp,8
  81422c:	f800283a 	ret

00814230 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814230:	defff904 	addi	sp,sp,-28
  814234:	dfc00615 	stw	ra,24(sp)
  814238:	df000515 	stw	fp,20(sp)
  81423c:	df000504 	addi	fp,sp,20
  814240:	e13ffc15 	stw	r4,-16(fp)
  814244:	e17ffd15 	stw	r5,-12(fp)
  814248:	e1bffe15 	stw	r6,-8(fp)
  81424c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814250:	e0800217 	ldw	r2,8(fp)
  814254:	d8800015 	stw	r2,0(sp)
  814258:	e13ffc17 	ldw	r4,-16(fp)
  81425c:	e17ffd17 	ldw	r5,-12(fp)
  814260:	e1bffe17 	ldw	r6,-8(fp)
  814264:	e1ffff17 	ldw	r7,-4(fp)
  814268:	08144040 	call	814404 <alt_iic_isr_register>
}  
  81426c:	e037883a 	mov	sp,fp
  814270:	dfc00117 	ldw	ra,4(sp)
  814274:	df000017 	ldw	fp,0(sp)
  814278:	dec00204 	addi	sp,sp,8
  81427c:	f800283a 	ret

00814280 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814280:	defff904 	addi	sp,sp,-28
  814284:	df000615 	stw	fp,24(sp)
  814288:	df000604 	addi	fp,sp,24
  81428c:	e13ffe15 	stw	r4,-8(fp)
  814290:	e17fff15 	stw	r5,-4(fp)
  814294:	e0bfff17 	ldw	r2,-4(fp)
  814298:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81429c:	0005303a 	rdctl	r2,status
  8142a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142a4:	e0fffb17 	ldw	r3,-20(fp)
  8142a8:	00bfff84 	movi	r2,-2
  8142ac:	1884703a 	and	r2,r3,r2
  8142b0:	1001703a 	wrctl	status,r2
  
  return context;
  8142b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8142b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8142bc:	e0fffc17 	ldw	r3,-16(fp)
  8142c0:	00800044 	movi	r2,1
  8142c4:	10c4983a 	sll	r2,r2,r3
  8142c8:	1007883a 	mov	r3,r2
  8142cc:	008020b4 	movhi	r2,130
  8142d0:	10a36b04 	addi	r2,r2,-29268
  8142d4:	10800017 	ldw	r2,0(r2)
  8142d8:	1886b03a 	or	r3,r3,r2
  8142dc:	008020b4 	movhi	r2,130
  8142e0:	10a36b04 	addi	r2,r2,-29268
  8142e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8142e8:	008020b4 	movhi	r2,130
  8142ec:	10a36b04 	addi	r2,r2,-29268
  8142f0:	10800017 	ldw	r2,0(r2)
  8142f4:	100170fa 	wrctl	ienable,r2
  8142f8:	e0bffd17 	ldw	r2,-12(fp)
  8142fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814300:	e0bffa17 	ldw	r2,-24(fp)
  814304:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814308:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  81430c:	e037883a 	mov	sp,fp
  814310:	df000017 	ldw	fp,0(sp)
  814314:	dec00104 	addi	sp,sp,4
  814318:	f800283a 	ret

0081431c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81431c:	defff904 	addi	sp,sp,-28
  814320:	df000615 	stw	fp,24(sp)
  814324:	df000604 	addi	fp,sp,24
  814328:	e13ffe15 	stw	r4,-8(fp)
  81432c:	e17fff15 	stw	r5,-4(fp)
  814330:	e0bfff17 	ldw	r2,-4(fp)
  814334:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814338:	0005303a 	rdctl	r2,status
  81433c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814340:	e0fffb17 	ldw	r3,-20(fp)
  814344:	00bfff84 	movi	r2,-2
  814348:	1884703a 	and	r2,r3,r2
  81434c:	1001703a 	wrctl	status,r2
  
  return context;
  814350:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814354:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814358:	e0fffc17 	ldw	r3,-16(fp)
  81435c:	00800044 	movi	r2,1
  814360:	10c4983a 	sll	r2,r2,r3
  814364:	0084303a 	nor	r2,zero,r2
  814368:	1007883a 	mov	r3,r2
  81436c:	008020b4 	movhi	r2,130
  814370:	10a36b04 	addi	r2,r2,-29268
  814374:	10800017 	ldw	r2,0(r2)
  814378:	1886703a 	and	r3,r3,r2
  81437c:	008020b4 	movhi	r2,130
  814380:	10a36b04 	addi	r2,r2,-29268
  814384:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814388:	008020b4 	movhi	r2,130
  81438c:	10a36b04 	addi	r2,r2,-29268
  814390:	10800017 	ldw	r2,0(r2)
  814394:	100170fa 	wrctl	ienable,r2
  814398:	e0bffd17 	ldw	r2,-12(fp)
  81439c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143a0:	e0bffa17 	ldw	r2,-24(fp)
  8143a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8143a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8143ac:	e037883a 	mov	sp,fp
  8143b0:	df000017 	ldw	fp,0(sp)
  8143b4:	dec00104 	addi	sp,sp,4
  8143b8:	f800283a 	ret

008143bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8143bc:	defffc04 	addi	sp,sp,-16
  8143c0:	df000315 	stw	fp,12(sp)
  8143c4:	df000304 	addi	fp,sp,12
  8143c8:	e13ffe15 	stw	r4,-8(fp)
  8143cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8143d0:	000530fa 	rdctl	r2,ienable
  8143d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8143d8:	e0ffff17 	ldw	r3,-4(fp)
  8143dc:	00800044 	movi	r2,1
  8143e0:	10c4983a 	sll	r2,r2,r3
  8143e4:	1007883a 	mov	r3,r2
  8143e8:	e0bffd17 	ldw	r2,-12(fp)
  8143ec:	1884703a 	and	r2,r3,r2
  8143f0:	1004c03a 	cmpne	r2,r2,zero
}
  8143f4:	e037883a 	mov	sp,fp
  8143f8:	df000017 	ldw	fp,0(sp)
  8143fc:	dec00104 	addi	sp,sp,4
  814400:	f800283a 	ret

00814404 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814404:	defff404 	addi	sp,sp,-48
  814408:	dfc00b15 	stw	ra,44(sp)
  81440c:	df000a15 	stw	fp,40(sp)
  814410:	df000a04 	addi	fp,sp,40
  814414:	e13ffb15 	stw	r4,-20(fp)
  814418:	e17ffc15 	stw	r5,-16(fp)
  81441c:	e1bffd15 	stw	r6,-12(fp)
  814420:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814424:	00bffa84 	movi	r2,-22
  814428:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81442c:	e0bffc17 	ldw	r2,-16(fp)
  814430:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814434:	e0bff917 	ldw	r2,-28(fp)
  814438:	10800808 	cmpgei	r2,r2,32
  81443c:	1000291e 	bne	r2,zero,8144e4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814440:	0005303a 	rdctl	r2,status
  814444:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814448:	e0fff717 	ldw	r3,-36(fp)
  81444c:	00bfff84 	movi	r2,-2
  814450:	1884703a 	and	r2,r3,r2
  814454:	1001703a 	wrctl	status,r2
  
  return context;
  814458:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81445c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  814460:	e0bff917 	ldw	r2,-28(fp)
  814464:	00c020b4 	movhi	r3,130
  814468:	18e3ca04 	addi	r3,r3,-28888
  81446c:	100490fa 	slli	r2,r2,3
  814470:	10c7883a 	add	r3,r2,r3
  814474:	e0bffd17 	ldw	r2,-12(fp)
  814478:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  81447c:	e0bff917 	ldw	r2,-28(fp)
  814480:	00c020b4 	movhi	r3,130
  814484:	18e3ca04 	addi	r3,r3,-28888
  814488:	100490fa 	slli	r2,r2,3
  81448c:	10c5883a 	add	r2,r2,r3
  814490:	10c00104 	addi	r3,r2,4
  814494:	e0bffe17 	ldw	r2,-8(fp)
  814498:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81449c:	e0bffd17 	ldw	r2,-12(fp)
  8144a0:	1005003a 	cmpeq	r2,r2,zero
  8144a4:	1000051e 	bne	r2,zero,8144bc <alt_iic_isr_register+0xb8>
  8144a8:	e17ff917 	ldw	r5,-28(fp)
  8144ac:	e13ffb17 	ldw	r4,-20(fp)
  8144b0:	08142800 	call	814280 <alt_ic_irq_enable>
  8144b4:	e0bfff15 	stw	r2,-4(fp)
  8144b8:	00000406 	br	8144cc <alt_iic_isr_register+0xc8>
  8144bc:	e17ff917 	ldw	r5,-28(fp)
  8144c0:	e13ffb17 	ldw	r4,-20(fp)
  8144c4:	081431c0 	call	81431c <alt_ic_irq_disable>
  8144c8:	e0bfff15 	stw	r2,-4(fp)
  8144cc:	e0bfff17 	ldw	r2,-4(fp)
  8144d0:	e0bffa15 	stw	r2,-24(fp)
  8144d4:	e0bff817 	ldw	r2,-32(fp)
  8144d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8144dc:	e0bff617 	ldw	r2,-40(fp)
  8144e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8144e4:	e0bffa17 	ldw	r2,-24(fp)
}
  8144e8:	e037883a 	mov	sp,fp
  8144ec:	dfc00117 	ldw	ra,4(sp)
  8144f0:	df000017 	ldw	fp,0(sp)
  8144f4:	dec00204 	addi	sp,sp,8
  8144f8:	f800283a 	ret

008144fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8144fc:	defff904 	addi	sp,sp,-28
  814500:	dfc00615 	stw	ra,24(sp)
  814504:	df000515 	stw	fp,20(sp)
  814508:	df000504 	addi	fp,sp,20
  81450c:	e13ffc15 	stw	r4,-16(fp)
  814510:	e17ffd15 	stw	r5,-12(fp)
  814514:	e1bffe15 	stw	r6,-8(fp)
  814518:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81451c:	e13ffd17 	ldw	r4,-12(fp)
  814520:	e17ffe17 	ldw	r5,-8(fp)
  814524:	e1bfff17 	ldw	r6,-4(fp)
  814528:	08110300 	call	811030 <open>
  81452c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814530:	e0bffb17 	ldw	r2,-20(fp)
  814534:	1004803a 	cmplt	r2,r2,zero
  814538:	10001c1e 	bne	r2,zero,8145ac <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81453c:	e0bffb17 	ldw	r2,-20(fp)
  814540:	00c02074 	movhi	r3,129
  814544:	18d71f04 	addi	r3,r3,23676
  814548:	10800324 	muli	r2,r2,12
  81454c:	10c5883a 	add	r2,r2,r3
  814550:	10c00017 	ldw	r3,0(r2)
  814554:	e0bffc17 	ldw	r2,-16(fp)
  814558:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81455c:	e0bffb17 	ldw	r2,-20(fp)
  814560:	00c02074 	movhi	r3,129
  814564:	18d71f04 	addi	r3,r3,23676
  814568:	10800324 	muli	r2,r2,12
  81456c:	10c5883a 	add	r2,r2,r3
  814570:	10800104 	addi	r2,r2,4
  814574:	10c00017 	ldw	r3,0(r2)
  814578:	e0bffc17 	ldw	r2,-16(fp)
  81457c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814580:	e0bffb17 	ldw	r2,-20(fp)
  814584:	00c02074 	movhi	r3,129
  814588:	18d71f04 	addi	r3,r3,23676
  81458c:	10800324 	muli	r2,r2,12
  814590:	10c5883a 	add	r2,r2,r3
  814594:	10800204 	addi	r2,r2,8
  814598:	10c00017 	ldw	r3,0(r2)
  81459c:	e0bffc17 	ldw	r2,-16(fp)
  8145a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8145a4:	e13ffb17 	ldw	r4,-20(fp)
  8145a8:	08113980 	call	811398 <alt_release_fd>
  }
} 
  8145ac:	e037883a 	mov	sp,fp
  8145b0:	dfc00117 	ldw	ra,4(sp)
  8145b4:	df000017 	ldw	fp,0(sp)
  8145b8:	dec00204 	addi	sp,sp,8
  8145bc:	f800283a 	ret

008145c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8145c0:	defffb04 	addi	sp,sp,-20
  8145c4:	dfc00415 	stw	ra,16(sp)
  8145c8:	df000315 	stw	fp,12(sp)
  8145cc:	df000304 	addi	fp,sp,12
  8145d0:	e13ffd15 	stw	r4,-12(fp)
  8145d4:	e17ffe15 	stw	r5,-8(fp)
  8145d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8145dc:	01002074 	movhi	r4,129
  8145e0:	21172204 	addi	r4,r4,23688
  8145e4:	e17ffd17 	ldw	r5,-12(fp)
  8145e8:	01800044 	movi	r6,1
  8145ec:	01c07fc4 	movi	r7,511
  8145f0:	08144fc0 	call	8144fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8145f4:	01002074 	movhi	r4,129
  8145f8:	21171f04 	addi	r4,r4,23676
  8145fc:	e17ffe17 	ldw	r5,-8(fp)
  814600:	000d883a 	mov	r6,zero
  814604:	01c07fc4 	movi	r7,511
  814608:	08144fc0 	call	8144fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81460c:	01002074 	movhi	r4,129
  814610:	21172504 	addi	r4,r4,23700
  814614:	e17fff17 	ldw	r5,-4(fp)
  814618:	01800044 	movi	r6,1
  81461c:	01c07fc4 	movi	r7,511
  814620:	08144fc0 	call	8144fc <alt_open_fd>
}  
  814624:	e037883a 	mov	sp,fp
  814628:	dfc00117 	ldw	ra,4(sp)
  81462c:	df000017 	ldw	fp,0(sp)
  814630:	dec00204 	addi	sp,sp,8
  814634:	f800283a 	ret

00814638 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  814638:	defffd04 	addi	sp,sp,-12
  81463c:	dfc00215 	stw	ra,8(sp)
  814640:	df000115 	stw	fp,4(sp)
  814644:	df000104 	addi	fp,sp,4
  814648:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81464c:	e13fff17 	ldw	r4,-4(fp)
  814650:	08146880 	call	814688 <alt_busy_sleep>
}
  814654:	e037883a 	mov	sp,fp
  814658:	dfc00117 	ldw	ra,4(sp)
  81465c:	df000017 	ldw	fp,0(sp)
  814660:	dec00204 	addi	sp,sp,8
  814664:	f800283a 	ret

00814668 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814668:	deffff04 	addi	sp,sp,-4
  81466c:	df000015 	stw	fp,0(sp)
  814670:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814674:	000170fa 	wrctl	ienable,zero
}
  814678:	e037883a 	mov	sp,fp
  81467c:	df000017 	ldw	fp,0(sp)
  814680:	dec00104 	addi	sp,sp,4
  814684:	f800283a 	ret

00814688 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  814688:	defffa04 	addi	sp,sp,-24
  81468c:	dfc00515 	stw	ra,20(sp)
  814690:	df000415 	stw	fp,16(sp)
  814694:	df000404 	addi	fp,sp,16
  814698:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81469c:	008000c4 	movi	r2,3
  8146a0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  8146a4:	e0fffc17 	ldw	r3,-16(fp)
  8146a8:	008003f4 	movhi	r2,15
  8146ac:	10909004 	addi	r2,r2,16960
  8146b0:	188b383a 	mul	r5,r3,r2
  8146b4:	0100bef4 	movhi	r4,763
  8146b8:	213c2004 	addi	r4,r4,-3968
  8146bc:	080fcdc0 	call	80fcdc <__udivsi3>
  8146c0:	100b883a 	mov	r5,r2
  8146c4:	01200034 	movhi	r4,32768
  8146c8:	213fffc4 	addi	r4,r4,-1
  8146cc:	080fcdc0 	call	80fcdc <__udivsi3>
  8146d0:	100b883a 	mov	r5,r2
  8146d4:	e13fff17 	ldw	r4,-4(fp)
  8146d8:	080fcdc0 	call	80fcdc <__udivsi3>
  8146dc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8146e0:	e0bffd17 	ldw	r2,-12(fp)
  8146e4:	1005003a 	cmpeq	r2,r2,zero
  8146e8:	1000281e 	bne	r2,zero,81478c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8146ec:	e03ffe15 	stw	zero,-8(fp)
  8146f0:	00001606 	br	81474c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8146f4:	00a00034 	movhi	r2,32768
  8146f8:	10bfffc4 	addi	r2,r2,-1
  8146fc:	10bfffc4 	addi	r2,r2,-1
  814700:	103ffe1e 	bne	r2,zero,8146fc <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814704:	e0fffc17 	ldw	r3,-16(fp)
  814708:	008003f4 	movhi	r2,15
  81470c:	10909004 	addi	r2,r2,16960
  814710:	188b383a 	mul	r5,r3,r2
  814714:	0100bef4 	movhi	r4,763
  814718:	213c2004 	addi	r4,r4,-3968
  81471c:	080fcdc0 	call	80fcdc <__udivsi3>
  814720:	100b883a 	mov	r5,r2
  814724:	01200034 	movhi	r4,32768
  814728:	213fffc4 	addi	r4,r4,-1
  81472c:	080fcdc0 	call	80fcdc <__udivsi3>
  814730:	1007883a 	mov	r3,r2
  814734:	e0bfff17 	ldw	r2,-4(fp)
  814738:	10c5c83a 	sub	r2,r2,r3
  81473c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814740:	e0bffe17 	ldw	r2,-8(fp)
  814744:	10800044 	addi	r2,r2,1
  814748:	e0bffe15 	stw	r2,-8(fp)
  81474c:	e0fffe17 	ldw	r3,-8(fp)
  814750:	e0bffd17 	ldw	r2,-12(fp)
  814754:	18bfe716 	blt	r3,r2,8146f4 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814758:	e0fffc17 	ldw	r3,-16(fp)
  81475c:	008003f4 	movhi	r2,15
  814760:	10909004 	addi	r2,r2,16960
  814764:	188b383a 	mul	r5,r3,r2
  814768:	0100bef4 	movhi	r4,763
  81476c:	213c2004 	addi	r4,r4,-3968
  814770:	080fcdc0 	call	80fcdc <__udivsi3>
  814774:	1007883a 	mov	r3,r2
  814778:	e0bfff17 	ldw	r2,-4(fp)
  81477c:	1885383a 	mul	r2,r3,r2
  814780:	10bfffc4 	addi	r2,r2,-1
  814784:	103ffe1e 	bne	r2,zero,814780 <alt_busy_sleep+0xf8>
  814788:	00000c06 	br	8147bc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81478c:	e0fffc17 	ldw	r3,-16(fp)
  814790:	008003f4 	movhi	r2,15
  814794:	10909004 	addi	r2,r2,16960
  814798:	188b383a 	mul	r5,r3,r2
  81479c:	0100bef4 	movhi	r4,763
  8147a0:	213c2004 	addi	r4,r4,-3968
  8147a4:	080fcdc0 	call	80fcdc <__udivsi3>
  8147a8:	1007883a 	mov	r3,r2
  8147ac:	e0bfff17 	ldw	r2,-4(fp)
  8147b0:	1885383a 	mul	r2,r3,r2
  8147b4:	10bfffc4 	addi	r2,r2,-1
  8147b8:	00bffe16 	blt	zero,r2,8147b4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8147bc:	0005883a 	mov	r2,zero
}
  8147c0:	e037883a 	mov	sp,fp
  8147c4:	dfc00117 	ldw	ra,4(sp)
  8147c8:	df000017 	ldw	fp,0(sp)
  8147cc:	dec00204 	addi	sp,sp,8
  8147d0:	f800283a 	ret

008147d4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8147d4:	defffb04 	addi	sp,sp,-20
  8147d8:	df000415 	stw	fp,16(sp)
  8147dc:	df000404 	addi	fp,sp,16
  8147e0:	e13ffe15 	stw	r4,-8(fp)
  8147e4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8147e8:	e0bfff17 	ldw	r2,-4(fp)
  8147ec:	10840070 	cmpltui	r2,r2,4097
  8147f0:	1000021e 	bne	r2,zero,8147fc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8147f4:	00840004 	movi	r2,4096
  8147f8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8147fc:	e0fffe17 	ldw	r3,-8(fp)
  814800:	e0bfff17 	ldw	r2,-4(fp)
  814804:	1885883a 	add	r2,r3,r2
  814808:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81480c:	e0bffe17 	ldw	r2,-8(fp)
  814810:	e0bffd15 	stw	r2,-12(fp)
  814814:	00000506 	br	81482c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814818:	e0bffd17 	ldw	r2,-12(fp)
  81481c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814820:	e0bffd17 	ldw	r2,-12(fp)
  814824:	10800804 	addi	r2,r2,32
  814828:	e0bffd15 	stw	r2,-12(fp)
  81482c:	e0fffd17 	ldw	r3,-12(fp)
  814830:	e0bffc17 	ldw	r2,-16(fp)
  814834:	18bff836 	bltu	r3,r2,814818 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814838:	e0bffe17 	ldw	r2,-8(fp)
  81483c:	108007cc 	andi	r2,r2,31
  814840:	1005003a 	cmpeq	r2,r2,zero
  814844:	1000021e 	bne	r2,zero,814850 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814848:	e0bffd17 	ldw	r2,-12(fp)
  81484c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814850:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814854:	e037883a 	mov	sp,fp
  814858:	df000017 	ldw	fp,0(sp)
  81485c:	dec00104 	addi	sp,sp,4
  814860:	f800283a 	ret

00814864 <atexit>:
  814864:	200b883a 	mov	r5,r4
  814868:	000d883a 	mov	r6,zero
  81486c:	0009883a 	mov	r4,zero
  814870:	000f883a 	mov	r7,zero
  814874:	08149241 	jmpi	814924 <__register_exitproc>

00814878 <exit>:
  814878:	defffe04 	addi	sp,sp,-8
  81487c:	000b883a 	mov	r5,zero
  814880:	dc000015 	stw	r16,0(sp)
  814884:	dfc00115 	stw	ra,4(sp)
  814888:	2021883a 	mov	r16,r4
  81488c:	0814a5c0 	call	814a5c <__call_exitprocs>
  814890:	00802074 	movhi	r2,129
  814894:	109c1504 	addi	r2,r2,28756
  814898:	11000017 	ldw	r4,0(r2)
  81489c:	20800f17 	ldw	r2,60(r4)
  8148a0:	10000126 	beq	r2,zero,8148a8 <exit+0x30>
  8148a4:	103ee83a 	callr	r2
  8148a8:	8009883a 	mov	r4,r16
  8148ac:	0814c4c0 	call	814c4c <_exit>

008148b0 <memcmp>:
  8148b0:	00c000c4 	movi	r3,3
  8148b4:	1980032e 	bgeu	r3,r6,8148c4 <memcmp+0x14>
  8148b8:	2144b03a 	or	r2,r4,r5
  8148bc:	10c4703a 	and	r2,r2,r3
  8148c0:	10000f26 	beq	r2,zero,814900 <memcmp+0x50>
  8148c4:	31ffffc4 	addi	r7,r6,-1
  8148c8:	3000061e 	bne	r6,zero,8148e4 <memcmp+0x34>
  8148cc:	00000a06 	br	8148f8 <memcmp+0x48>
  8148d0:	39ffffc4 	addi	r7,r7,-1
  8148d4:	00bfffc4 	movi	r2,-1
  8148d8:	21000044 	addi	r4,r4,1
  8148dc:	29400044 	addi	r5,r5,1
  8148e0:	38800526 	beq	r7,r2,8148f8 <memcmp+0x48>
  8148e4:	20c00003 	ldbu	r3,0(r4)
  8148e8:	28800003 	ldbu	r2,0(r5)
  8148ec:	18bff826 	beq	r3,r2,8148d0 <memcmp+0x20>
  8148f0:	1885c83a 	sub	r2,r3,r2
  8148f4:	f800283a 	ret
  8148f8:	0005883a 	mov	r2,zero
  8148fc:	f800283a 	ret
  814900:	180f883a 	mov	r7,r3
  814904:	20c00017 	ldw	r3,0(r4)
  814908:	28800017 	ldw	r2,0(r5)
  81490c:	18bfed1e 	bne	r3,r2,8148c4 <memcmp+0x14>
  814910:	31bfff04 	addi	r6,r6,-4
  814914:	21000104 	addi	r4,r4,4
  814918:	29400104 	addi	r5,r5,4
  81491c:	39bff936 	bltu	r7,r6,814904 <memcmp+0x54>
  814920:	003fe806 	br	8148c4 <memcmp+0x14>

00814924 <__register_exitproc>:
  814924:	defffa04 	addi	sp,sp,-24
  814928:	00802074 	movhi	r2,129
  81492c:	109c1504 	addi	r2,r2,28756
  814930:	dc000015 	stw	r16,0(sp)
  814934:	14000017 	ldw	r16,0(r2)
  814938:	dd000415 	stw	r20,16(sp)
  81493c:	2829883a 	mov	r20,r5
  814940:	81405217 	ldw	r5,328(r16)
  814944:	dcc00315 	stw	r19,12(sp)
  814948:	dc800215 	stw	r18,8(sp)
  81494c:	dc400115 	stw	r17,4(sp)
  814950:	dfc00515 	stw	ra,20(sp)
  814954:	2023883a 	mov	r17,r4
  814958:	3027883a 	mov	r19,r6
  81495c:	3825883a 	mov	r18,r7
  814960:	28002526 	beq	r5,zero,8149f8 <__register_exitproc+0xd4>
  814964:	29000117 	ldw	r4,4(r5)
  814968:	008007c4 	movi	r2,31
  81496c:	11002716 	blt	r2,r4,814a0c <__register_exitproc+0xe8>
  814970:	8800101e 	bne	r17,zero,8149b4 <__register_exitproc+0x90>
  814974:	2105883a 	add	r2,r4,r4
  814978:	1085883a 	add	r2,r2,r2
  81497c:	20c00044 	addi	r3,r4,1
  814980:	1145883a 	add	r2,r2,r5
  814984:	0009883a 	mov	r4,zero
  814988:	15000215 	stw	r20,8(r2)
  81498c:	28c00115 	stw	r3,4(r5)
  814990:	2005883a 	mov	r2,r4
  814994:	dfc00517 	ldw	ra,20(sp)
  814998:	dd000417 	ldw	r20,16(sp)
  81499c:	dcc00317 	ldw	r19,12(sp)
  8149a0:	dc800217 	ldw	r18,8(sp)
  8149a4:	dc400117 	ldw	r17,4(sp)
  8149a8:	dc000017 	ldw	r16,0(sp)
  8149ac:	dec00604 	addi	sp,sp,24
  8149b0:	f800283a 	ret
  8149b4:	29802204 	addi	r6,r5,136
  8149b8:	00800044 	movi	r2,1
  8149bc:	110e983a 	sll	r7,r2,r4
  8149c0:	30c04017 	ldw	r3,256(r6)
  8149c4:	2105883a 	add	r2,r4,r4
  8149c8:	1085883a 	add	r2,r2,r2
  8149cc:	1185883a 	add	r2,r2,r6
  8149d0:	19c6b03a 	or	r3,r3,r7
  8149d4:	14802015 	stw	r18,128(r2)
  8149d8:	14c00015 	stw	r19,0(r2)
  8149dc:	00800084 	movi	r2,2
  8149e0:	30c04015 	stw	r3,256(r6)
  8149e4:	88bfe31e 	bne	r17,r2,814974 <__register_exitproc+0x50>
  8149e8:	30804117 	ldw	r2,260(r6)
  8149ec:	11c4b03a 	or	r2,r2,r7
  8149f0:	30804115 	stw	r2,260(r6)
  8149f4:	003fdf06 	br	814974 <__register_exitproc+0x50>
  8149f8:	008020b4 	movhi	r2,130
  8149fc:	10a40a04 	addi	r2,r2,-28632
  814a00:	100b883a 	mov	r5,r2
  814a04:	80805215 	stw	r2,328(r16)
  814a08:	003fd606 	br	814964 <__register_exitproc+0x40>
  814a0c:	00800034 	movhi	r2,0
  814a10:	10800004 	addi	r2,r2,0
  814a14:	1000021e 	bne	r2,zero,814a20 <__register_exitproc+0xfc>
  814a18:	013fffc4 	movi	r4,-1
  814a1c:	003fdc06 	br	814990 <__register_exitproc+0x6c>
  814a20:	01006404 	movi	r4,400
  814a24:	103ee83a 	callr	r2
  814a28:	1007883a 	mov	r3,r2
  814a2c:	103ffa26 	beq	r2,zero,814a18 <__register_exitproc+0xf4>
  814a30:	80805217 	ldw	r2,328(r16)
  814a34:	180b883a 	mov	r5,r3
  814a38:	18000115 	stw	zero,4(r3)
  814a3c:	18800015 	stw	r2,0(r3)
  814a40:	80c05215 	stw	r3,328(r16)
  814a44:	18006215 	stw	zero,392(r3)
  814a48:	18006315 	stw	zero,396(r3)
  814a4c:	0009883a 	mov	r4,zero
  814a50:	883fc826 	beq	r17,zero,814974 <__register_exitproc+0x50>
  814a54:	003fd706 	br	8149b4 <__register_exitproc+0x90>

00814a58 <register_fini>:
  814a58:	f800283a 	ret

00814a5c <__call_exitprocs>:
  814a5c:	00802074 	movhi	r2,129
  814a60:	109c1504 	addi	r2,r2,28756
  814a64:	10800017 	ldw	r2,0(r2)
  814a68:	defff304 	addi	sp,sp,-52
  814a6c:	df000b15 	stw	fp,44(sp)
  814a70:	d8800115 	stw	r2,4(sp)
  814a74:	00800034 	movhi	r2,0
  814a78:	10800004 	addi	r2,r2,0
  814a7c:	1005003a 	cmpeq	r2,r2,zero
  814a80:	d8800215 	stw	r2,8(sp)
  814a84:	d8800117 	ldw	r2,4(sp)
  814a88:	dd400815 	stw	r21,32(sp)
  814a8c:	dd000715 	stw	r20,28(sp)
  814a90:	10805204 	addi	r2,r2,328
  814a94:	dfc00c15 	stw	ra,48(sp)
  814a98:	ddc00a15 	stw	r23,40(sp)
  814a9c:	dd800915 	stw	r22,36(sp)
  814aa0:	dcc00615 	stw	r19,24(sp)
  814aa4:	dc800515 	stw	r18,20(sp)
  814aa8:	dc400415 	stw	r17,16(sp)
  814aac:	dc000315 	stw	r16,12(sp)
  814ab0:	282b883a 	mov	r21,r5
  814ab4:	2039883a 	mov	fp,r4
  814ab8:	d8800015 	stw	r2,0(sp)
  814abc:	2829003a 	cmpeq	r20,r5,zero
  814ac0:	d8800117 	ldw	r2,4(sp)
  814ac4:	14405217 	ldw	r17,328(r2)
  814ac8:	88001026 	beq	r17,zero,814b0c <__call_exitprocs+0xb0>
  814acc:	ddc00017 	ldw	r23,0(sp)
  814ad0:	88800117 	ldw	r2,4(r17)
  814ad4:	8c802204 	addi	r18,r17,136
  814ad8:	143fffc4 	addi	r16,r2,-1
  814adc:	80000916 	blt	r16,zero,814b04 <__call_exitprocs+0xa8>
  814ae0:	05bfffc4 	movi	r22,-1
  814ae4:	a000151e 	bne	r20,zero,814b3c <__call_exitprocs+0xe0>
  814ae8:	8409883a 	add	r4,r16,r16
  814aec:	2105883a 	add	r2,r4,r4
  814af0:	1485883a 	add	r2,r2,r18
  814af4:	10c02017 	ldw	r3,128(r2)
  814af8:	a8c01126 	beq	r21,r3,814b40 <__call_exitprocs+0xe4>
  814afc:	843fffc4 	addi	r16,r16,-1
  814b00:	85bff81e 	bne	r16,r22,814ae4 <__call_exitprocs+0x88>
  814b04:	d8800217 	ldw	r2,8(sp)
  814b08:	10003126 	beq	r2,zero,814bd0 <__call_exitprocs+0x174>
  814b0c:	dfc00c17 	ldw	ra,48(sp)
  814b10:	df000b17 	ldw	fp,44(sp)
  814b14:	ddc00a17 	ldw	r23,40(sp)
  814b18:	dd800917 	ldw	r22,36(sp)
  814b1c:	dd400817 	ldw	r21,32(sp)
  814b20:	dd000717 	ldw	r20,28(sp)
  814b24:	dcc00617 	ldw	r19,24(sp)
  814b28:	dc800517 	ldw	r18,20(sp)
  814b2c:	dc400417 	ldw	r17,16(sp)
  814b30:	dc000317 	ldw	r16,12(sp)
  814b34:	dec00d04 	addi	sp,sp,52
  814b38:	f800283a 	ret
  814b3c:	8409883a 	add	r4,r16,r16
  814b40:	88c00117 	ldw	r3,4(r17)
  814b44:	2105883a 	add	r2,r4,r4
  814b48:	1445883a 	add	r2,r2,r17
  814b4c:	18ffffc4 	addi	r3,r3,-1
  814b50:	11800217 	ldw	r6,8(r2)
  814b54:	1c001526 	beq	r3,r16,814bac <__call_exitprocs+0x150>
  814b58:	10000215 	stw	zero,8(r2)
  814b5c:	303fe726 	beq	r6,zero,814afc <__call_exitprocs+0xa0>
  814b60:	00c00044 	movi	r3,1
  814b64:	1c06983a 	sll	r3,r3,r16
  814b68:	90804017 	ldw	r2,256(r18)
  814b6c:	8cc00117 	ldw	r19,4(r17)
  814b70:	1884703a 	and	r2,r3,r2
  814b74:	10001426 	beq	r2,zero,814bc8 <__call_exitprocs+0x16c>
  814b78:	90804117 	ldw	r2,260(r18)
  814b7c:	1884703a 	and	r2,r3,r2
  814b80:	10000c1e 	bne	r2,zero,814bb4 <__call_exitprocs+0x158>
  814b84:	2105883a 	add	r2,r4,r4
  814b88:	1485883a 	add	r2,r2,r18
  814b8c:	11400017 	ldw	r5,0(r2)
  814b90:	e009883a 	mov	r4,fp
  814b94:	303ee83a 	callr	r6
  814b98:	88800117 	ldw	r2,4(r17)
  814b9c:	98bfc81e 	bne	r19,r2,814ac0 <__call_exitprocs+0x64>
  814ba0:	b8800017 	ldw	r2,0(r23)
  814ba4:	147fd526 	beq	r2,r17,814afc <__call_exitprocs+0xa0>
  814ba8:	003fc506 	br	814ac0 <__call_exitprocs+0x64>
  814bac:	8c000115 	stw	r16,4(r17)
  814bb0:	003fea06 	br	814b5c <__call_exitprocs+0x100>
  814bb4:	2105883a 	add	r2,r4,r4
  814bb8:	1485883a 	add	r2,r2,r18
  814bbc:	11000017 	ldw	r4,0(r2)
  814bc0:	303ee83a 	callr	r6
  814bc4:	003ff406 	br	814b98 <__call_exitprocs+0x13c>
  814bc8:	303ee83a 	callr	r6
  814bcc:	003ff206 	br	814b98 <__call_exitprocs+0x13c>
  814bd0:	88800117 	ldw	r2,4(r17)
  814bd4:	1000081e 	bne	r2,zero,814bf8 <__call_exitprocs+0x19c>
  814bd8:	89000017 	ldw	r4,0(r17)
  814bdc:	20000726 	beq	r4,zero,814bfc <__call_exitprocs+0x1a0>
  814be0:	b9000015 	stw	r4,0(r23)
  814be4:	8809883a 	mov	r4,r17
  814be8:	00000000 	call	0 <__reset-0x800000>
  814bec:	bc400017 	ldw	r17,0(r23)
  814bf0:	883fb71e 	bne	r17,zero,814ad0 <__call_exitprocs+0x74>
  814bf4:	003fc506 	br	814b0c <__call_exitprocs+0xb0>
  814bf8:	89000017 	ldw	r4,0(r17)
  814bfc:	882f883a 	mov	r23,r17
  814c00:	2023883a 	mov	r17,r4
  814c04:	883fb21e 	bne	r17,zero,814ad0 <__call_exitprocs+0x74>
  814c08:	003fc006 	br	814b0c <__call_exitprocs+0xb0>

00814c0c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814c0c:	defffd04 	addi	sp,sp,-12
  814c10:	df000215 	stw	fp,8(sp)
  814c14:	df000204 	addi	fp,sp,8
  814c18:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814c1c:	e0bfff17 	ldw	r2,-4(fp)
  814c20:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814c24:	e0bffe17 	ldw	r2,-8(fp)
  814c28:	1005003a 	cmpeq	r2,r2,zero
  814c2c:	1000021e 	bne	r2,zero,814c38 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814c30:	002af070 	cmpltui	zero,zero,43969
  814c34:	00000106 	br	814c3c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814c38:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814c3c:	e037883a 	mov	sp,fp
  814c40:	df000017 	ldw	fp,0(sp)
  814c44:	dec00104 	addi	sp,sp,4
  814c48:	f800283a 	ret

00814c4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814c4c:	defffd04 	addi	sp,sp,-12
  814c50:	dfc00215 	stw	ra,8(sp)
  814c54:	df000115 	stw	fp,4(sp)
  814c58:	df000104 	addi	fp,sp,4
  814c5c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814c60:	e13fff17 	ldw	r4,-4(fp)
  814c64:	0814c0c0 	call	814c0c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814c68:	003fff06 	br	814c68 <_exit+0x1c>
  814c6c:	00814a58 	cmpnei	r2,zero,1321
