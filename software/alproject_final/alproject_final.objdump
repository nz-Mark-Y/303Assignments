
alproject_final.elf:     file format elf32-littlenios2
alproject_final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000154a4 memsz 0x000154a4 flags r-x
    LOAD off    0x000164c4 vaddr 0x008154c4 paddr 0x00817184 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x00018e44 vaddr 0x00818e44 paddr 0x00818e44 align 2**12
         filesz 0x00000000 memsz 0x00000464 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014b94  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000077c  00814d48  00814d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  008154c4  00817184  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000464  00818e44  00818e44  00018e44  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00018184  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  000181a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bf3  00000000  00000000  000193c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00037636  00000000  00000000  0001afb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bb89  00000000  00000000  000525e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001db6f  00000000  00000000  0005e172  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000256c  00000000  00000000  0007bce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d76  00000000  00000000  0007e250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012c16  00000000  00000000  00080fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00093bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00093c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000989b9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000989bc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000989bf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000989c0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000989c1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000989c5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000989c9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000989cd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000989d6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000989df  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000989e8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  000989ee  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  00098a48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814d48 l    d  .rodata	00000000 .rodata
008154c4 l    d  .rwdata	00000000 .rwdata
00818e44 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00818e44 l     O .bss	00000004 tlc_timer_event
00818e48 l     O .bss	00000004 pedestrianNS
00818e4c l     O .bss	00000004 pedestrianEW
00818e50 l     O .bss	00000004 newTimeoutValues
00818e54 l     O .bss	00000004 timerHit
00818e58 l     O .bss	00000004 vehicle_detected
008154c4 l     O .rwdata	00000018 timeout
00818e5c l     O .bss	00000004 valueCount
008154dc l     O .rwdata	00000018 tempBuffer
00818e60 l     O .bss	00000004 mode
008154f4 l     O .rwdata	00000010 proc_state
00817134 l     O .rwdata	00000004 camera_count
00817138 l     O .rwdata	00000004 buttonValue
00818e64 l     O .bss	00000004 snapshotTaken
00818e68 l     O .bss	00000004 timeTaken
00818e6c l     O .bss	00000004 toPrint
00818eb4 l     O .bss	00000018 tlc_timer
00818e70 l     O .bss	00000004 state.3026
00818e74 l     O .bss	00000004 c
00818e78 l     O .bss	00000004 timeoutValue
00818ee4 l     O .bss	0000000a countString
00818ecc l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
008015c4 l     F .text	00000058 std
008016d0 l     F .text	00000008 __fp_lock
008016d8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815504 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803ee0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
008040a0 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804374 l     F .text	00000058 __sprint_r
00814ee4 l     O .rodata	00000010 blanks.3452
00814ed4 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814efc l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00815024 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807c40 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00817154 l     O .rwdata	00000004 charset
008151c4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
0081530c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080ac20 l     F .text	00000048 match
00815d2c l     O .rwdata	00000014 fpi.1950
00815328 l     O .rodata	00000028 tinytens
00815d18 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080d098 l     F .text	00000024 htinit
0080d124 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d98c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080ea50 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fc78 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008108a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810904 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810a04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810ce4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810dc4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810f20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0081102c l     F .text	000000dc alt_file_locked
00811290 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00811410 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817174 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811850 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815ee8 l     O .rwdata	00001060 jtag_uart
00816f48 l     O .rwdata	00000120 lcd
00817068 l     O .rwdata	000000c4 uart
00811978 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811bb8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00811de0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00817180 l     O .rwdata	00000004 colstart
0081245c l     F .text	000000b8 lcd_write_command
00812514 l     F .text	000000d4 lcd_write_data
008125e8 l     F .text	000000c4 lcd_clear_screen
008126ac l     F .text	000001ec lcd_repaint_screen
00812898 l     F .text	000000c8 lcd_scroll_up
00812960 l     F .text	000002d0 lcd_handle_escape
0081313c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081339c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081365c l     F .text	0000009c altera_avalon_uart_irq
008136f8 l     F .text	000000e0 altera_avalon_uart_rxirq
008137d8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813bc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813dec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813f44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008145d4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814b30 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814ce4 l     F .text	00000040 alt_sim_halt
00809dcc g     F .text	00000094 _mprec_log10
00809eb8 g     F .text	00000088 __any_on
008096e8 g     F .text	00000070 _isatty_r
008152e4 g     O .rodata	00000028 __mprec_tinytens
00810f80 g     F .text	0000006c alt_main
00803674 g     F .text	000000a0 _puts_r
00819018 g     O .bss	00000100 alt_irq
00809848 g     F .text	00000078 _lseek_r
00817184 g       *ABS*	00000000 __flash_rwdata_start
0080940c g     F .text	000000a0 __sflags
0080f570 g     F .text	00000088 __eqdf2
008192a8 g       *ABS*	00000000 __alt_heap_start
00800e00 g     F .text	00000060 printToUART
008035fc g     F .text	00000044 printf
008041bc g     F .text	00000068 __sseek
0080162c g     F .text	000000a4 __sinit
008097a8 g     F .text	00000084 _setlocale_r
0080172c g     F .text	00000068 __sfmoreglue
0080cfc8 g     F .text	0000001c ungetc
0081100c g     F .text	00000020 __malloc_unlock
0080ac68 g     F .text	000014e4 _strtod_r
00818e7c g     O .bss	00000004 fp
0080340c g     F .text	000000e0 memmove
0080171c g     F .text	00000010 _cleanup
00809f40 g     F .text	000000bc _Balloc
00800b60 g     F .text	00000020 buffer_timeout
0080f680 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802324 g     F .text	00000074 _fstat_r
00818e80 g     O .bss	00000004 errno
00803f48 g     F .text	00000014 __srget
0080791c g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080ffb4 g     F .text	0000002c __make_fp
00818ea4 g     O .bss	00000004 alt_argv
0081f12c g       *ABS*	00000000 _gp
00814710 g     F .text	00000030 usleep
008003cc g     F .text	000000bc tlc_timer_isr
00815d68 g     O .rwdata	00000180 alt_fd_list
0081406c g     F .text	00000094 alt_find_dev
0080336c g     F .text	000000a0 memcpy
0080d9d8 g     F .text	00000248 __hexnan
00800ba0 g     F .text	000000c8 camera_timer_isr
00801710 g     F .text	0000000c _cleanup_r
0080f8a0 g     F .text	000000f8 __floatsidf
00814698 g     F .text	00000078 alt_io_redirect
0080f790 g     F .text	00000088 __ltdf2
00814d48 g       *ABS*	00000000 __DTOR_END__
00803714 g     F .text	00000014 puts
00809940 g     F .text	00000040 mbrtowc
00807940 g     F .text	00000068 _vfscanf_r
00809d1c g     F .text	000000b0 __ratio
008005cc g     F .text	000001dc pedestrian_tlc
00811ff8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803640 g     F .text	00000034 _printf_r
0080fdb4 g     F .text	00000008 __udivsi3
00810c24 g     F .text	000000c0 isatty
00809758 g     F .text	0000002c iswspace
008151f4 g     O .rodata	000000c8 __mprec_tens
00809784 g     F .text	00000008 __locale_charset
0080dcb8 g     F .text	000000a4 __fixunsdfsi
008148ac g     F .text	00000090 alt_icache_flush
00818e84 g     O .bss	00000004 __malloc_top_pad
0080ca3c g     F .text	00000024 strtoul
00817150 g     O .rwdata	00000004 __mb_cur_max
0080978c g     F .text	0000000c _localeconv_r
0080ca60 g     F .text	000002f0 _strtoull_r
0080a638 g     F .text	0000003c __i2b
00802398 g     F .text	0000049c __sfvwrite_r
00803f5c g     F .text	00000070 _sbrk_r
008007a8 g     F .text	000000d4 configurable_tlc
0080a9b4 g     F .text	00000078 _read_r
00815d0c g     O .rwdata	0000000c __lc_ctype
00817168 g     O .rwdata	00000004 alt_max_fd
008102f4 g     F .text	00000138 __unpack_d
00801148 g     F .text	00000110 _fclose_r
00801468 g     F .text	00000034 fflush
00818e88 g     O .bss	00000004 __malloc_max_sbrked_mem
00810a64 g     F .text	000001c0 alt_irq_register
00801534 g     F .text	00000090 _fgetc_r
0080eee0 g     F .text	00000074 __adddf3
0080e8e8 g     F .text	00000078 __nesf2
00809bfc g     F .text	00000120 __b2d
0080e338 g     F .text	000005b0 __umoddi3
00810e30 g     F .text	000000f0 lseek
00817140 g     O .rwdata	00000004 _global_impure_ptr
00803728 g     F .text	000005f4 _realloc_r
008192a8 g       *ABS*	00000000 __bss_end
008144dc g     F .text	000000f8 alt_iic_isr_register
00811624 g     F .text	0000010c alt_tick
00818f18 g     O .bss	00000100 __hexdig
0080dd5c g     F .text	000005dc __udivdi3
008152bc g     O .rodata	00000028 __mprec_bigtens
0080a894 g     F .text	00000120 __s2b
0080fae4 g     F .text	00000194 __floatunsidf
00809b1c g     F .text	00000060 __mcmp
00813594 g     F .text	000000c8 altera_avalon_uart_init
0081714c g     O .rwdata	00000004 __ctype_ptr
008016f8 g     F .text	00000018 __fp_lock_all
00814494 g     F .text	00000048 alt_ic_irq_enabled
0081158c g     F .text	00000098 alt_alarm_stop
00800c68 g     F .text	00000198 camera_tlc
0080c4d0 g     F .text	00000024 strtol
00818e9c g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815d40 g     O .rwdata	00000028 alt_dev_null
0080fe44 g     F .text	000000c8 __unpack_f
00813e4c g     F .text	00000044 alt_dcache_flush_all
008099e8 g     F .text	00000070 __hi0bits
0080f998 g     F .text	000000d8 __fixdfsi
0080c270 g     F .text	0000001c strtod
00817184 g       *ABS*	00000000 __ram_rwdata_end
00817160 g     O .rwdata	00000008 alt_dev_list
00811730 g     F .text	00000120 write
0080e960 g     F .text	00000078 __gtsf2
008154c4 g       *ABS*	00000000 __ram_rodata_end
00810930 g     F .text	000000d4 fstat
00801994 g     F .text	0000002c fprintf
0080f818 g     F .text	00000088 __ledf2
0080a774 g     F .text	00000120 __pow5mult
00818e90 g     O .bss	00000004 __nlocale_changed
0080fdbc g     F .text	00000008 __umodsi3
008192a8 g       *ABS*	00000000 end
008104f4 g     F .text	00000160 __pack_f
00812c30 g     F .text	0000050c altera_avalon_lcd_16207_write
00813c24 g     F .text	000001c8 altera_avalon_uart_write
00802300 g     F .text	00000024 fseek
00811af8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814d44 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081340c g     F .text	00000090 alt_avalon_timer_sc_init
008134f4 g     F .text	00000058 altera_avalon_uart_write_fd
0080fdc4 g     F .text	00000080 __clzsi2
0081354c g     F .text	00000048 altera_avalon_uart_close_fd
0081221c g     F .text	00000240 altera_avalon_jtag_uart_write
0080161c g     F .text	00000004 __sfp_lock_acquire
00803288 g     F .text	000000e4 memchr
008043cc g     F .text	00001eac ___vfprintf_internal_r
00804040 g     F .text	00000060 _sprintf_r
00801bb0 g     F .text	00000314 _free_r
00814b34 g     F .text	000001b0 __call_exitprocs
00803efc g     F .text	0000004c __srget_r
00818e94 g     O .bss	00000004 __mlocale_changed
00817148 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818eac g     O .bss	00000004 _alt_tick_rate
0080c4f4 g     F .text	00000318 _strtoll_r
0081712c g     O .rwdata	00000005 chararray
0080a304 g     F .text	0000014c __lshift
00818eb0 g     O .bss	00000004 _alt_nticks
008112f0 g     F .text	00000120 read
008118e4 g     F .text	00000094 alt_sys_init
00803584 g     F .text	00000078 _open_r
008149fc g     F .text	00000134 __register_exitproc
0080a450 g     F .text	000001e8 __multiply
00811e90 g     F .text	00000074 altera_avalon_jtag_uart_close
008154c4 g       *ABS*	00000000 __ram_rwdata_start
00814d48 g       *ABS*	00000000 __ram_rodata_start
00818ef0 g     O .bss	00000028 __malloc_current_mallinfo
00809ffc g     F .text	0000017c __d2b
008119b0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c80c g     F .text	00000230 _strtoul_r
00814220 g     F .text	000000b8 alt_get_fd
00814760 g     F .text	0000014c alt_busy_sleep
0081042c g     F .text	000000c8 __fpcmp_parts_d
00807bd0 g     F .text	00000070 _close_r
00814988 g     F .text	00000074 memcmp
00811a60 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008192a8 g       *ABS*	00000000 __alt_stack_base
00811aa8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804130 g     F .text	00000084 sscanf
00807a94 g     F .text	0000013c __swsetup_r
0080f318 g     F .text	00000258 __divdf3
00801794 g     F .text	000000f0 __sfp
00809e60 g     F .text	00000058 __copybits
00815904 g     O .rwdata	00000408 __malloc_av_
00801628 g     F .text	00000004 __sinit_lock_release
0080ef54 g     F .text	000003c4 __muldf3
008042a0 g     F .text	00000060 __sread
008096a8 g     F .text	00000040 fread
00814100 g     F .text	00000120 alt_find_file
00813e90 g     F .text	000000b4 alt_dev_llist_insert
00810fec g     F .text	00000020 __malloc_lock
008019c0 g     F .text	00000034 _fprintf_r
008114d0 g     F .text	000000bc sbrk
0080126c g     F .text	000001fc _fflush_r
0080cfe4 g     F .text	000000b4 _calloc_r
00801978 g     F .text	0000001c fopen
00818e44 g       *ABS*	00000000 __bss_start
008034ec g     F .text	00000098 memset
00800e60 g     F .text	000002e8 main
00818ea8 g     O .bss	00000004 alt_envp
00818e8c g     O .bss	00000004 __malloc_max_total_mem
00811a08 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e9d8 g     F .text	00000078 __ltsf2
008094ac g     F .text	000001fc _fread_r
00813208 g     F .text	0000013c altera_avalon_lcd_16207_init
0080087c g     F .text	00000048 config_tlc
008041b4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00801258 g     F .text	00000014 fclose
0080c28c g     F .text	00000244 _strtol_r
0080fa70 g     F .text	00000074 __truncdfsf2
00819118 g     O .bss	00000190 _atexit0
00807e58 g     F .text	000015b4 _dtoa_r
00802b48 g     F .text	00000740 _malloc_r
0081716c g     O .rwdata	00000004 alt_errno
0080cd50 g     F .text	000000dc __submore
00800488 g     F .text	000000e8 NSEW_ped_isr
008028fc g     F .text	000000b8 _fwalk
00809980 g     F .text	00000040 _mbtowc_r
0080fcf4 g     F .text	00000060 __divsi3
0081536c g     O .rodata	00000014 __thenan_df
00801a84 g     F .text	0000012c _malloc_trim_r
00800b80 g     F .text	00000020 update_timeout
00814d48 g       *ABS*	00000000 __CTOR_END__
0080ab64 g     F .text	000000bc strcmp
00814d48 g       *ABS*	00000000 __flash_rodata_start
00814d48 g       *ABS*	00000000 __DTOR_LIST__
0080f5f8 g     F .text	00000088 __nedf2
008118b0 g     F .text	00000034 alt_irq_init
00811470 g     F .text	00000060 alt_release_fd
0080149c g     F .text	00000098 fgetc
00803fcc g     F .text	00000074 sprintf
00815380 g     O .rodata	00000100 __clz_tab
00818e98 g     O .bss	00000004 _PathLocale
0080c14c g     F .text	00000124 strtof
0081493c g     F .text	00000014 atexit
00807a1c g     F .text	00000078 _write_r
0080982c g     F .text	0000001c setlocale
0080ab5c g     F .text	00000008 nanf
0081713c g     O .rwdata	00000004 _impure_ptr
00818ea0 g     O .bss	00000004 alt_argc
008098c0 g     F .text	00000080 _mbrtowc_r
00814008 g     F .text	00000064 _do_dtors
00801ec4 g     F .text	0000043c _fseek_r
008008c4 g     F .text	0000029c timeout_data_handler
00803d1c g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809b7c g     F .text	00000080 __ulp
0080aa2c g     F .text	00000040 __isinfd
008016e0 g     F .text	00000018 __fp_unlock_all
00813344 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00817158 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00809798 g     F .text	00000010 localeconv
00814308 g     F .text	00000050 alt_ic_isr_register
0080d0bc g     F .text	00000068 __hexdig_init
008040a8 g     F .text	00000088 _sscanf_r
00817184 g       *ABS*	00000000 _edata
0081349c g     F .text	00000058 altera_avalon_uart_read_fd
008192a8 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008079a8 g     F .text	00000074 vfscanf
00811f04 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008019f4 g     F .text	00000074 _fputs_r
008143f4 g     F .text	000000a0 alt_ic_irq_disable
00804224 g     F .text	0000007c __swrite
00817144 g     O .rwdata	00000004 __malloc_trim_threshold
00814740 g     F .text	00000020 altera_nios2_qsys_irq_init
00814950 g     F .text	00000038 exit
00802834 g     F .text	000000c8 _fwalk_reent
0080a178 g     F .text	0000018c __mdiff
00800250 g     F .text	0000017c simple_tlc
0080fd54 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801620 g     F .text	00000004 __sfp_lock_release
0080aa9c g     F .text	000000c0 __sccl
00800200 g     F .text	00000050 init_tlc
00814f20 g     O .rodata	00000101 _ctype_
00813934 g     F .text	00000060 altera_avalon_uart_close
0080ff0c g     F .text	000000a8 __fpcmp_parts_f
00801884 g     F .text	000000f4 _fopen_r
00814d24 g     F .text	00000020 _exit
0080aa6c g     F .text	00000030 __isnand
00810654 g     F .text	00000154 alt_alarm_start
0080dc20 g     F .text	00000098 __muldi3
008029b4 g     F .text	00000194 __smakebuf_r
00804300 g     F .text	00000074 strlen
00811108 g     F .text	00000188 open
0080f708 g     F .text	00000088 __gedf2
0080d1d4 g     F .text	000007b8 __gethex
008142d8 g     F .text	00000030 alt_icache_flush_all
00801a68 g     F .text	0000001c fputs
00817170 g     O .rwdata	00000004 alt_priority_mask
00814358 g     F .text	0000009c alt_ic_irq_enable
00806278 g     F .text	00000024 __vfprintf_internal
00813994 g     F .text	00000230 altera_avalon_uart_read
0080ee60 g     F .text	00000080 __subdf3
00809a58 g     F .text	000000c4 __lo0bits
0080629c g     F .text	00001680 __svfscanf_r
00817178 g     O .rwdata	00000008 alt_alarm_list
0080ce2c g     F .text	0000019c _ungetc_r
00813fa4 g     F .text	00000064 _do_ctors
008107a8 g     F .text	000000fc close
00800570 g     F .text	0000005c init_buttons_pio
00810d44 g     F .text	00000080 alt_load
0080ffe0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00801624 g     F .text	00000004 __sinit_lock_acquire
0080a674 g     F .text	00000100 __multadd
008099c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e40604 	addi	r3,r3,-28648
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e40604 	addi	r3,r3,-28648
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bc4b14 	ori	gp,gp,61740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a39114 	ori	r2,r2,36420

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e4aa14 	ori	r3,r3,37544

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810d440 	call	810d44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810f800 	call	810f80 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int toPrint = 0;
static char countString[10];

// Code =======================================
// Initialise the traffic light controller for all modes
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a74d17 	ldw	r2,-25292(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	alt_alarm_start(&tlc_timer, timeout[0], tlc_timer_isr, timerContext);//start the timer
  800218:	00802074 	movhi	r2,129
  80021c:	10953104 	addi	r2,r2,21700
  800220:	11400017 	ldw	r5,0(r2)
  800224:	010020b4 	movhi	r4,130
  800228:	2123ad04 	addi	r4,r4,-29004
  80022c:	01802034 	movhi	r6,128
  800230:	3180f304 	addi	r6,r6,972
  800234:	e1ffff17 	ldw	r7,-4(fp)
  800238:	08106540 	call	810654 <alt_alarm_start>
}
  80023c:	e037883a 	mov	sp,fp
  800240:	dfc00117 	ldw	ra,4(sp)
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00204 	addi	sp,sp,8
  80024c:	f800283a 	ret

00800250 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	dfc00215 	stw	ra,8(sp)
  800258:	df000115 	stw	fp,4(sp)
  80025c:	df000104 	addi	fp,sp,4
  800260:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800264:	e0bfff17 	ldw	r2,-4(fp)
  800268:	10800017 	ldw	r2,0(r2)
  80026c:	10bfffd8 	cmpnei	r2,r2,-1
  800270:	10000b1e 	bne	r2,zero,8002a0 <simple_tlc+0x50>
		init_tlc();
  800274:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800278:	e0bfff17 	ldw	r2,-4(fp)
  80027c:	10800017 	ldw	r2,0(r2)
  800280:	10c00044 	addi	r3,r2,1
  800284:	e0bfff17 	ldw	r2,-4(fp)
  800288:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);	// both traffic lights will be red by default
  80028c:	00c04074 	movhi	r3,257
  800290:	18c41804 	addi	r3,r3,4192
  800294:	00800904 	movi	r2,36
  800298:	18800035 	stwio	r2,0(r3)
		return;
  80029c:	00004606 	br	8003b8 <simple_tlc+0x168>
	}

	if (tlc_timer_event == 1) {//carry out a state transition when a timeout occurs
  8002a0:	d0a74617 	ldw	r2,-25320(gp)
  8002a4:	10800058 	cmpnei	r2,r2,1
  8002a8:	1000431e 	bne	r2,zero,8003b8 <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	1004c03a 	cmpne	r2,r2,zero
  8002b8:	1000081e 	bne	r2,zero,8002dc <simple_tlc+0x8c>
			*state = 1; // G, R
  8002bc:	e0ffff17 	ldw	r3,-4(fp)
  8002c0:	00800044 	movi	r2,1
  8002c4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);//turn on the appropriate LEDs
  8002c8:	00c04074 	movhi	r3,257
  8002cc:	18c41804 	addi	r3,r3,4192
  8002d0:	00800304 	movi	r2,12
  8002d4:	18800035 	stwio	r2,0(r3)
  8002d8:	00003606 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 1) {
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	10800058 	cmpnei	r2,r2,1
  8002e8:	1000081e 	bne	r2,zero,80030c <simple_tlc+0xbc>
			*state = 2; // Y, R
  8002ec:	e0ffff17 	ldw	r3,-4(fp)
  8002f0:	00800084 	movi	r2,2
  8002f4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8002f8:	00c04074 	movhi	r3,257
  8002fc:	18c41804 	addi	r3,r3,4192
  800300:	00800504 	movi	r2,20
  800304:	18800035 	stwio	r2,0(r3)
  800308:	00002a06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 2) {
  80030c:	e0bfff17 	ldw	r2,-4(fp)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800098 	cmpnei	r2,r2,2
  800318:	1000081e 	bne	r2,zero,80033c <simple_tlc+0xec>
			*state = 3; // R, R
  80031c:	e0ffff17 	ldw	r3,-4(fp)
  800320:	008000c4 	movi	r2,3
  800324:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800328:	00c04074 	movhi	r3,257
  80032c:	18c41804 	addi	r3,r3,4192
  800330:	00800904 	movi	r2,36
  800334:	18800035 	stwio	r2,0(r3)
  800338:	00001e06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 3) {
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	108000d8 	cmpnei	r2,r2,3
  800348:	1000081e 	bne	r2,zero,80036c <simple_tlc+0x11c>
			*state = 4; // R, G
  80034c:	e0ffff17 	ldw	r3,-4(fp)
  800350:	00800104 	movi	r2,4
  800354:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800358:	00c04074 	movhi	r3,257
  80035c:	18c41804 	addi	r3,r3,4192
  800360:	00800844 	movi	r2,33
  800364:	18800035 	stwio	r2,0(r3)
  800368:	00001206 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 4) {
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10800118 	cmpnei	r2,r2,4
  800378:	1000081e 	bne	r2,zero,80039c <simple_tlc+0x14c>
			*state = 5; // R, Y
  80037c:	e0ffff17 	ldw	r3,-4(fp)
  800380:	00800144 	movi	r2,5
  800384:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800388:	00c04074 	movhi	r3,257
  80038c:	18c41804 	addi	r3,r3,4192
  800390:	00800884 	movi	r2,34
  800394:	18800035 	stwio	r2,0(r3)
  800398:	00000606 	br	8003b4 <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8003a4:	00c04074 	movhi	r3,257
  8003a8:	18c41804 	addi	r3,r3,4192
  8003ac:	00800904 	movi	r2,36
  8003b0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8003b4:	d0274615 	stw	zero,-25320(gp)
		return;
	}
}
  8003b8:	e037883a 	mov	sp,fp
  8003bc:	dfc00117 	ldw	ra,4(sp)
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00204 	addi	sp,sp,8
  8003c8:	f800283a 	ret

008003cc <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  8003cc:	defffb04 	addi	sp,sp,-20
  8003d0:	dfc00415 	stw	ra,16(sp)
  8003d4:	df000315 	stw	fp,12(sp)
  8003d8:	df000304 	addi	fp,sp,12
  8003dc:	e13fff15 	stw	r4,-4(fp)
	int currentState = proc_state[mode];
  8003e0:	d0a74d17 	ldw	r2,-25292(gp)
  8003e4:	00c02074 	movhi	r3,129
  8003e8:	18d53d04 	addi	r3,r3,21748
  8003ec:	1085883a 	add	r2,r2,r2
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	10c5883a 	add	r2,r2,r3
  8003f8:	10800017 	ldw	r2,0(r2)
  8003fc:	e0bffe15 	stw	r2,-8(fp)
	if (currentState != 5) {
  800400:	e0bffe17 	ldw	r2,-8(fp)
  800404:	10800160 	cmpeqi	r2,r2,5
  800408:	1000041e 	bne	r2,zero,80041c <tlc_timer_isr+0x50>
		currentState++;
  80040c:	e0bffe17 	ldw	r2,-8(fp)
  800410:	10800044 	addi	r2,r2,1
  800414:	e0bffe15 	stw	r2,-8(fp)
  800418:	00000106 	br	800420 <tlc_timer_isr+0x54>
	} else {
		currentState = 0;
  80041c:	e03ffe15 	stw	zero,-8(fp)
	}
	int	nextTimeout = timeout[currentState]; //determine the next timeout value based on the current state
  800420:	e0bffe17 	ldw	r2,-8(fp)
  800424:	00c02074 	movhi	r3,129
  800428:	18d53104 	addi	r3,r3,21700
  80042c:	1085883a 	add	r2,r2,r2
  800430:	1085883a 	add	r2,r2,r2
  800434:	10c5883a 	add	r2,r2,r3
  800438:	10800017 	ldw	r2,0(r2)
  80043c:	e0bffd15 	stw	r2,-12(fp)
	printf("next timeout: %d\n", nextTimeout);
  800440:	01002074 	movhi	r4,129
  800444:	21135204 	addi	r4,r4,19784
  800448:	e17ffd17 	ldw	r5,-12(fp)
  80044c:	08035fc0 	call	8035fc <printf>
	printf("current state: %d\n", currentState);
  800450:	01002074 	movhi	r4,129
  800454:	21135704 	addi	r4,r4,19804
  800458:	e17ffe17 	ldw	r5,-8(fp)
  80045c:	08035fc0 	call	8035fc <printf>
	tlc_timer_event = 1;
  800460:	00800044 	movi	r2,1
  800464:	d0a74615 	stw	r2,-25320(gp)
	timerHit = 1;
  800468:	00800044 	movi	r2,1
  80046c:	d0a74a15 	stw	r2,-25304(gp)
	return nextTimeout;	//returns the time until the next timer interrupt
  800470:	e0bffd17 	ldw	r2,-12(fp)
}
  800474:	e037883a 	mov	sp,fp
  800478:	dfc00117 	ldw	ra,4(sp)
  80047c:	df000017 	ldw	fp,0(sp)
  800480:	dec00204 	addi	sp,sp,8
  800484:	f800283a 	ret

00800488 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  800488:	defffb04 	addi	sp,sp,-20
  80048c:	dfc00415 	stw	ra,16(sp)
  800490:	df000315 	stw	fp,12(sp)
  800494:	df000304 	addi	fp,sp,12
  800498:	e13ffe15 	stw	r4,-8(fp)
  80049c:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context;
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  8004a8:	00804074 	movhi	r2,257
  8004ac:	10842b04 	addi	r2,r2,4268
  8004b0:	10c00037 	ldwio	r3,0(r2)
  8004b4:	e0bffd17 	ldw	r2,-12(fp)
  8004b8:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  8004bc:	00804074 	movhi	r2,257
  8004c0:	10842b04 	addi	r2,r2,4268
  8004c4:	10000035 	stwio	zero,0(r2)
	if ((*temp & 0x01) > 0) {
  8004c8:	e0bffd17 	ldw	r2,-12(fp)
  8004cc:	10800017 	ldw	r2,0(r2)
  8004d0:	1080004c 	andi	r2,r2,1
  8004d4:	10800050 	cmplti	r2,r2,1
  8004d8:	1000021e 	bne	r2,zero,8004e4 <NSEW_ped_isr+0x5c>
		pedestrianNS = 1;	//NS pedestrian button is pressed
  8004dc:	00800044 	movi	r2,1
  8004e0:	d0a74715 	stw	r2,-25316(gp)
	}
	if ((*temp & 0x02) > 0) {
  8004e4:	e0bffd17 	ldw	r2,-12(fp)
  8004e8:	10800017 	ldw	r2,0(r2)
  8004ec:	1080008c 	andi	r2,r2,2
  8004f0:	10800050 	cmplti	r2,r2,1
  8004f4:	1000021e 	bne	r2,zero,800500 <NSEW_ped_isr+0x78>
		pedestrianEW = 1;	//EW pedestrian button is pressed
  8004f8:	00800044 	movi	r2,1
  8004fc:	d0a74815 	stw	r2,-25312(gp)
	}
	if ((*temp & 0x04) > 0) {
  800500:	e0bffd17 	ldw	r2,-12(fp)
  800504:	10800017 	ldw	r2,0(r2)
  800508:	1080010c 	andi	r2,r2,4
  80050c:	10800050 	cmplti	r2,r2,1
  800510:	10000d1e 	bne	r2,zero,800548 <NSEW_ped_isr+0xc0>
		if (vehicle_detected == 0) {
  800514:	d0a74b17 	ldw	r2,-25300(gp)
  800518:	1004c03a 	cmpne	r2,r2,zero
  80051c:	1000061e 	bne	r2,zero,800538 <NSEW_ped_isr+0xb0>
			printf("Vehicle Enters\n");
  800520:	01002074 	movhi	r4,129
  800524:	21135c04 	addi	r4,r4,19824
  800528:	08037140 	call	803714 <puts>
			vehicle_detected = 1; // If vehicle absent, button press means vehicle has entered intersection
  80052c:	00800044 	movi	r2,1
  800530:	d0a74b15 	stw	r2,-25300(gp)
  800534:	00000406 	br	800548 <NSEW_ped_isr+0xc0>
		} else {
			printf("Vehicle Leaves\n");
  800538:	01002074 	movhi	r4,129
  80053c:	21136004 	addi	r4,r4,19840
  800540:	08037140 	call	803714 <puts>
			vehicle_detected = 0; // If at any other time, button press means vehicle has left intersection
  800544:	d0274b15 	stw	zero,-25300(gp)
		}
	}
	printf("button: %i\n", *temp);
  800548:	e0bffd17 	ldw	r2,-12(fp)
  80054c:	11400017 	ldw	r5,0(r2)
  800550:	01002074 	movhi	r4,129
  800554:	21136404 	addi	r4,r4,19856
  800558:	08035fc0 	call	8035fc <printf>
}
  80055c:	e037883a 	mov	sp,fp
  800560:	dfc00117 	ldw	ra,4(sp)
  800564:	df000017 	ldw	fp,0(sp)
  800568:	dec00204 	addi	sp,sp,8
  80056c:	f800283a 	ret

00800570 <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  800570:	defffd04 	addi	sp,sp,-12
  800574:	dfc00215 	stw	ra,8(sp)
  800578:	df000115 	stw	fp,4(sp)
  80057c:	df000104 	addi	fp,sp,4
	void* context_going_to_be_passed = (void*) &buttonValue; 								// cast before passing to ISR
  800580:	d0a00304 	addi	r2,gp,-32756
  800584:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// clears the edge capture register
  800588:	00804074 	movhi	r2,257
  80058c:	10842b04 	addi	r2,r2,4268
  800590:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7); 									// enable interrupts for all buttons
  800594:	00c04074 	movhi	r3,257
  800598:	18c42a04 	addi	r3,r3,4264
  80059c:	008001c4 	movi	r2,7
  8005a0:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// register the ISR
  8005a4:	01000104 	movi	r4,4
  8005a8:	e17fff17 	ldw	r5,-4(fp)
  8005ac:	01802034 	movhi	r6,128
  8005b0:	31812204 	addi	r6,r6,1160
  8005b4:	0810a640 	call	810a64 <alt_irq_register>
}
  8005b8:	e037883a 	mov	sp,fp
  8005bc:	dfc00117 	ldw	ra,4(sp)
  8005c0:	df000017 	ldw	fp,0(sp)
  8005c4:	dec00204 	addi	sp,sp,8
  8005c8:	f800283a 	ret

008005cc <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  8005cc:	defffd04 	addi	sp,sp,-12
  8005d0:	dfc00215 	stw	ra,8(sp)
  8005d4:	df000115 	stw	fp,4(sp)
  8005d8:	df000104 	addi	fp,sp,4
  8005dc:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8005e0:	e0bfff17 	ldw	r2,-4(fp)
  8005e4:	10800017 	ldw	r2,0(r2)
  8005e8:	10bfffd8 	cmpnei	r2,r2,-1
  8005ec:	10000b1e 	bne	r2,zero,80061c <pedestrian_tlc+0x50>
		init_tlc();
  8005f0:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8005f4:	e0bfff17 	ldw	r2,-4(fp)
  8005f8:	10800017 	ldw	r2,0(r2)
  8005fc:	10c00044 	addi	r3,r2,1
  800600:	e0bfff17 	ldw	r2,-4(fp)
  800604:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800608:	00c04074 	movhi	r3,257
  80060c:	18c41804 	addi	r3,r3,4192
  800610:	00800904 	movi	r2,36
  800614:	18800035 	stwio	r2,0(r3)
		return;
  800618:	00005e06 	br	800794 <pedestrian_tlc+0x1c8>
	}

	if (tlc_timer_event == 1) {
  80061c:	d0a74617 	ldw	r2,-25320(gp)
  800620:	10800058 	cmpnei	r2,r2,1
  800624:	10005b1e 	bne	r2,zero,800794 <pedestrian_tlc+0x1c8>
		if (*state == 0) { // R, R state
  800628:	e0bfff17 	ldw	r2,-4(fp)
  80062c:	10800017 	ldw	r2,0(r2)
  800630:	1004c03a 	cmpne	r2,r2,zero
  800634:	1000141e 	bne	r2,zero,800688 <pedestrian_tlc+0xbc>
			if (pedestrianNS == 1) {
  800638:	d0a74717 	ldw	r2,-25316(gp)
  80063c:	10800058 	cmpnei	r2,r2,1
  800640:	1000091e 	bne	r2,zero,800668 <pedestrian_tlc+0x9c>
				*state = 1; // G, R
  800644:	e0ffff17 	ldw	r3,-4(fp)
  800648:	00800044 	movi	r2,1
  80064c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
  800650:	00c04074 	movhi	r3,257
  800654:	18c41804 	addi	r3,r3,4192
  800658:	00801304 	movi	r2,76
  80065c:	18800035 	stwio	r2,0(r3)
				pedestrianNS = 0;
  800660:	d0274715 	stw	zero,-25316(gp)
  800664:	00004a06 	br	800790 <pedestrian_tlc+0x1c4>
			} else {
				*state = 1; // G, R
  800668:	e0ffff17 	ldw	r3,-4(fp)
  80066c:	00800044 	movi	r2,1
  800670:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800674:	00c04074 	movhi	r3,257
  800678:	18c41804 	addi	r3,r3,4192
  80067c:	00800304 	movi	r2,12
  800680:	18800035 	stwio	r2,0(r3)
  800684:	00004206 	br	800790 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 1) {
  800688:	e0bfff17 	ldw	r2,-4(fp)
  80068c:	10800017 	ldw	r2,0(r2)
  800690:	10800058 	cmpnei	r2,r2,1
  800694:	1000081e 	bne	r2,zero,8006b8 <pedestrian_tlc+0xec>
			*state = 2; // Y, R
  800698:	e0ffff17 	ldw	r3,-4(fp)
  80069c:	00800084 	movi	r2,2
  8006a0:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8006a4:	00c04074 	movhi	r3,257
  8006a8:	18c41804 	addi	r3,r3,4192
  8006ac:	00800504 	movi	r2,20
  8006b0:	18800035 	stwio	r2,0(r3)
  8006b4:	00003606 	br	800790 <pedestrian_tlc+0x1c4>
		} else if (*state == 2) {
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	10800017 	ldw	r2,0(r2)
  8006c0:	10800098 	cmpnei	r2,r2,2
  8006c4:	1000081e 	bne	r2,zero,8006e8 <pedestrian_tlc+0x11c>
			*state = 3; // R, R
  8006c8:	e0ffff17 	ldw	r3,-4(fp)
  8006cc:	008000c4 	movi	r2,3
  8006d0:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8006d4:	00c04074 	movhi	r3,257
  8006d8:	18c41804 	addi	r3,r3,4192
  8006dc:	00800904 	movi	r2,36
  8006e0:	18800035 	stwio	r2,0(r3)
  8006e4:	00002a06 	br	800790 <pedestrian_tlc+0x1c4>
		} else if (*state == 3) {
  8006e8:	e0bfff17 	ldw	r2,-4(fp)
  8006ec:	10800017 	ldw	r2,0(r2)
  8006f0:	108000d8 	cmpnei	r2,r2,3
  8006f4:	1000141e 	bne	r2,zero,800748 <pedestrian_tlc+0x17c>
			if (pedestrianEW == 1) {
  8006f8:	d0a74817 	ldw	r2,-25312(gp)
  8006fc:	10800058 	cmpnei	r2,r2,1
  800700:	1000091e 	bne	r2,zero,800728 <pedestrian_tlc+0x15c>
				*state = 4; // R, G, P2
  800704:	e0ffff17 	ldw	r3,-4(fp)
  800708:	00800104 	movi	r2,4
  80070c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
  800710:	00c04074 	movhi	r3,257
  800714:	18c41804 	addi	r3,r3,4192
  800718:	00802844 	movi	r2,161
  80071c:	18800035 	stwio	r2,0(r3)
				pedestrianEW = 0;
  800720:	d0274815 	stw	zero,-25312(gp)
  800724:	00001a06 	br	800790 <pedestrian_tlc+0x1c4>
			} else {
				*state = 4; // R, G
  800728:	e0ffff17 	ldw	r3,-4(fp)
  80072c:	00800104 	movi	r2,4
  800730:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800734:	00c04074 	movhi	r3,257
  800738:	18c41804 	addi	r3,r3,4192
  80073c:	00800844 	movi	r2,33
  800740:	18800035 	stwio	r2,0(r3)
  800744:	00001206 	br	800790 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 4) {
  800748:	e0bfff17 	ldw	r2,-4(fp)
  80074c:	10800017 	ldw	r2,0(r2)
  800750:	10800118 	cmpnei	r2,r2,4
  800754:	1000081e 	bne	r2,zero,800778 <pedestrian_tlc+0x1ac>
			*state = 5; // R, Y
  800758:	e0ffff17 	ldw	r3,-4(fp)
  80075c:	00800144 	movi	r2,5
  800760:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800764:	00c04074 	movhi	r3,257
  800768:	18c41804 	addi	r3,r3,4192
  80076c:	00800884 	movi	r2,34
  800770:	18800035 	stwio	r2,0(r3)
  800774:	00000606 	br	800790 <pedestrian_tlc+0x1c4>
		} else {	// this accounts for state 5
			*state = 0; // R, R
  800778:	e0bfff17 	ldw	r2,-4(fp)
  80077c:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800780:	00c04074 	movhi	r3,257
  800784:	18c41804 	addi	r3,r3,4192
  800788:	00800904 	movi	r2,36
  80078c:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  800790:	d0274615 	stw	zero,-25320(gp)
		return;
	}
}
  800794:	e037883a 	mov	sp,fp
  800798:	dfc00117 	ldw	ra,4(sp)
  80079c:	df000017 	ldw	fp,0(sp)
  8007a0:	dec00204 	addi	sp,sp,8
  8007a4:	f800283a 	ret

008007a8 <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  8007a8:	defffd04 	addi	sp,sp,-12
  8007ac:	dfc00215 	stw	ra,8(sp)
  8007b0:	df000115 	stw	fp,4(sp)
  8007b4:	df000104 	addi	fp,sp,4
  8007b8:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8007bc:	e0bfff17 	ldw	r2,-4(fp)
  8007c0:	10800017 	ldw	r2,0(r2)
  8007c4:	10bfffd8 	cmpnei	r2,r2,-1
  8007c8:	10000b1e 	bne	r2,zero,8007f8 <configurable_tlc+0x50>
		init_tlc();
  8007cc:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8007d0:	e0bfff17 	ldw	r2,-4(fp)
  8007d4:	10800017 	ldw	r2,0(r2)
  8007d8:	10c00044 	addi	r3,r2,1
  8007dc:	e0bfff17 	ldw	r2,-4(fp)
  8007e0:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8007e4:	00c04074 	movhi	r3,257
  8007e8:	18c41804 	addi	r3,r3,4192
  8007ec:	00800904 	movi	r2,36
  8007f0:	18800035 	stwio	r2,0(r3)
		return;
  8007f4:	00001c06 	br	800868 <configurable_tlc+0xc0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);	//check if the new values button is on
  8007f8:	00804074 	movhi	r2,257
  8007fc:	10842404 	addi	r2,r2,4240
  800800:	10800037 	ldwio	r2,0(r2)
  800804:	d0a74915 	stw	r2,-25308(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){//if the current state is Red,Red and the new values button is on, and the timeout values haven't already been modified in this current state, then read new values from UART
  800808:	e0bfff17 	ldw	r2,-4(fp)
  80080c:	10800017 	ldw	r2,0(r2)
  800810:	1005003a 	cmpeq	r2,r2,zero
  800814:	1000041e 	bne	r2,zero,800828 <configurable_tlc+0x80>
  800818:	e0bfff17 	ldw	r2,-4(fp)
  80081c:	10800017 	ldw	r2,0(r2)
  800820:	108000d8 	cmpnei	r2,r2,3
  800824:	10000e1e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
  800828:	d0a74917 	ldw	r2,-25308(gp)
  80082c:	10800110 	cmplti	r2,r2,4
  800830:	10000b1e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
  800834:	d0a74a17 	ldw	r2,-25304(gp)
  800838:	10800058 	cmpnei	r2,r2,1
  80083c:	1000081e 	bne	r2,zero,800860 <configurable_tlc+0xb8>
		printToUART("Enter values now\n\r");
  800840:	01002074 	movhi	r4,129
  800844:	21136704 	addi	r4,r4,19868
  800848:	0800e000 	call	800e00 <printToUART>
		timeout_data_handler();
  80084c:	08008c40 	call	8008c4 <timeout_data_handler>
		newTimeoutValues = 0;
  800850:	d0274915 	stw	zero,-25308(gp)
		pedestrian_tlc(state);
  800854:	e13fff17 	ldw	r4,-4(fp)
  800858:	08005cc0 	call	8005cc <pedestrian_tlc>
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);	//check if the new values button is on
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){//if the current state is Red,Red and the new values button is on, and the timeout values haven't already been modified in this current state, then read new values from UART
  80085c:	00000206 	br	800868 <configurable_tlc+0xc0>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  800860:	e13fff17 	ldw	r4,-4(fp)
  800864:	08005cc0 	call	8005cc <pedestrian_tlc>
	}
}
  800868:	e037883a 	mov	sp,fp
  80086c:	dfc00117 	ldw	ra,4(sp)
  800870:	df000017 	ldw	fp,0(sp)
  800874:	dec00204 	addi	sp,sp,8
  800878:	f800283a 	ret

0080087c <config_tlc>:
 * RETURNS:     Returns the state of the configuration phase
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state) {
  80087c:	defffd04 	addi	sp,sp,-12
  800880:	df000215 	stw	fp,8(sp)
  800884:	df000204 	addi	fp,sp,8
  800888:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  80088c:	e0bffe17 	ldw	r2,-8(fp)
  800890:	10800017 	ldw	r2,0(r2)
  800894:	10bfffd8 	cmpnei	r2,r2,-1
  800898:	1000031e 	bne	r2,zero,8008a8 <config_tlc+0x2c>
		// Process initialisation state
		state = 0;
  80089c:	d0275115 	stw	zero,-25276(gp)
		return 0;
  8008a0:	e03fff15 	stw	zero,-4(fp)
  8008a4:	00000206 	br	8008b0 <config_tlc+0x34>
	}

	return state;
  8008a8:	d0a75117 	ldw	r2,-25276(gp)
  8008ac:	e0bfff15 	stw	r2,-4(fp)
  8008b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8008b4:	e037883a 	mov	sp,fp
  8008b8:	df000017 	ldw	fp,0(sp)
  8008bc:	dec00104 	addi	sp,sp,4
  8008c0:	f800283a 	ret

008008c4 <timeout_data_handler>:
 * RETURNS:     none
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void) {
  8008c4:	defffb04 	addi	sp,sp,-20
  8008c8:	dfc00415 	stw	ra,16(sp)
  8008cc:	df000315 	stw	fp,12(sp)
  8008d0:	df000304 	addi	fp,sp,12
	fp = fopen(UART_NAME, "rw"); // open up UART with read and write access
  8008d4:	01002074 	movhi	r4,129
  8008d8:	21136c04 	addi	r4,r4,19888
  8008dc:	01402074 	movhi	r5,129
  8008e0:	29536f04 	addi	r5,r5,19900
  8008e4:	08019780 	call	801978 <fopen>
  8008e8:	d0a75415 	stw	r2,-25264(gp)
	if (fp != NULL) {// check if the UART is open successfully
  8008ec:	d0a75417 	ldw	r2,-25264(gp)
  8008f0:	1005003a 	cmpeq	r2,r2,zero
  8008f4:	1000611e 	bne	r2,zero,800a7c <timeout_data_handler+0x1b8>
		int k = 0;
  8008f8:	e03fff15 	stw	zero,-4(fp)
  8008fc:	00000006 	br	800900 <timeout_data_handler+0x3c>
		while(1) {
			newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800900:	00804074 	movhi	r2,257
  800904:	10842404 	addi	r2,r2,4240
  800908:	10800037 	ldwio	r2,0(r2)
  80090c:	d0a74915 	stw	r2,-25308(gp)
			if(newTimeoutValues < 4){
  800910:	d0a74917 	ldw	r2,-25308(gp)
  800914:	10800110 	cmplti	r2,r2,4
  800918:	10008c1e 	bne	r2,zero,800b4c <timeout_data_handler+0x288>
				return;
			}

			c = fgetc(fp);//read one char at a time
  80091c:	d1275417 	ldw	r4,-25264(gp)
  800920:	080149c0 	call	80149c <fgetc>
  800924:	d0a75215 	stw	r2,-25272(gp)
			if (c== '\n') {	//keep reading chars until the new line char is reached
  800928:	d0a75217 	ldw	r2,-25272(gp)
  80092c:	108002a0 	cmpeqi	r2,r2,10
  800930:	1000501e 	bne	r2,zero,800a74 <timeout_data_handler+0x1b0>
				break;
			}
			if (c == '\r') {
  800934:	d0a75217 	ldw	r2,-25272(gp)
  800938:	10800360 	cmpeqi	r2,r2,13
  80093c:	10004d1e 	bne	r2,zero,800a74 <timeout_data_handler+0x1b0>
				break;
			}
			if (c == ',') {//a comma indicates that a full number has been read in
  800940:	d0a75217 	ldw	r2,-25272(gp)
  800944:	10800b18 	cmpnei	r2,r2,44
  800948:	1000401e 	bne	r2,zero,800a4c <timeout_data_handler+0x188>
				int a;
				for(a=0;a<(4-k);a++){//if the entered number is not 4 digits, shift the char array to compensate
  80094c:	e03ffe15 	stw	zero,-8(fp)
  800950:	00001506 	br	8009a8 <timeout_data_handler+0xe4>
					chararray[3]=chararray[2];
  800954:	00802074 	movhi	r2,129
  800958:	109c4b84 	addi	r2,r2,28974
  80095c:	10c00003 	ldbu	r3,0(r2)
  800960:	00802074 	movhi	r2,129
  800964:	109c4bc4 	addi	r2,r2,28975
  800968:	10c00005 	stb	r3,0(r2)
					chararray[2]=chararray[1];
  80096c:	00802074 	movhi	r2,129
  800970:	109c4b44 	addi	r2,r2,28973
  800974:	10c00003 	ldbu	r3,0(r2)
  800978:	00802074 	movhi	r2,129
  80097c:	109c4b84 	addi	r2,r2,28974
  800980:	10c00005 	stb	r3,0(r2)
					chararray[1]=chararray[0];
  800984:	d0e00003 	ldbu	r3,-32768(gp)
  800988:	00802074 	movhi	r2,129
  80098c:	109c4b44 	addi	r2,r2,28973
  800990:	10c00005 	stb	r3,0(r2)
					chararray[0] = '0';
  800994:	00800c04 	movi	r2,48
  800998:	d0a00005 	stb	r2,-32768(gp)
			if (c == '\r') {
				break;
			}
			if (c == ',') {//a comma indicates that a full number has been read in
				int a;
				for(a=0;a<(4-k);a++){//if the entered number is not 4 digits, shift the char array to compensate
  80099c:	e0bffe17 	ldw	r2,-8(fp)
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	e0bffe15 	stw	r2,-8(fp)
  8009a8:	00c00104 	movi	r3,4
  8009ac:	e0bfff17 	ldw	r2,-4(fp)
  8009b0:	1887c83a 	sub	r3,r3,r2
  8009b4:	e0bffe17 	ldw	r2,-8(fp)
  8009b8:	10ffe616 	blt	r2,r3,800954 <timeout_data_handler+0x90>
					chararray[3]=chararray[2];
					chararray[2]=chararray[1];
					chararray[1]=chararray[0];
					chararray[0] = '0';
				}
				sscanf(chararray, "%d", &timeoutValue);
  8009bc:	d1200004 	addi	r4,gp,-32768
  8009c0:	01402074 	movhi	r5,129
  8009c4:	29537004 	addi	r5,r5,19904
  8009c8:	d1a75304 	addi	r6,gp,-25268
  8009cc:	08041300 	call	804130 <sscanf>
				tempBuffer[valueCount] = timeoutValue;// store the newly read number into a temporary buffer
  8009d0:	d0e74c17 	ldw	r3,-25296(gp)
  8009d4:	d0a75317 	ldw	r2,-25268(gp)
  8009d8:	100b883a 	mov	r5,r2
  8009dc:	01002074 	movhi	r4,129
  8009e0:	21153704 	addi	r4,r4,21724
  8009e4:	18c5883a 	add	r2,r3,r3
  8009e8:	1085883a 	add	r2,r2,r2
  8009ec:	1105883a 	add	r2,r2,r4
  8009f0:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  8009f4:	00800c04 	movi	r2,48
  8009f8:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  8009fc:	00c02074 	movhi	r3,129
  800a00:	18dc4b44 	addi	r3,r3,28973
  800a04:	00800c04 	movi	r2,48
  800a08:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  800a0c:	00c02074 	movhi	r3,129
  800a10:	18dc4b84 	addi	r3,r3,28974
  800a14:	00800c04 	movi	r2,48
  800a18:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  800a1c:	00c02074 	movhi	r3,129
  800a20:	18dc4bc4 	addi	r3,r3,28975
  800a24:	00800c04 	movi	r2,48
  800a28:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  800a2c:	00802074 	movhi	r2,129
  800a30:	109c4c04 	addi	r2,r2,28976
  800a34:	10000005 	stb	zero,0(r2)
				k = 0;
  800a38:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  800a3c:	d0a74c17 	ldw	r2,-25296(gp)
  800a40:	10800044 	addi	r2,r2,1
  800a44:	d0a74c15 	stw	r2,-25296(gp)
  800a48:	003fad06 	br	800900 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  800a4c:	e13fff17 	ldw	r4,-4(fp)
  800a50:	d0a75217 	ldw	r2,-25272(gp)
  800a54:	1007883a 	mov	r3,r2
  800a58:	d0a00004 	addi	r2,gp,-32768
  800a5c:	2085883a 	add	r2,r4,r2
  800a60:	10c00005 	stb	r3,0(r2)
				k += 1;
  800a64:	e0bfff17 	ldw	r2,-4(fp)
  800a68:	10800044 	addi	r2,r2,1
  800a6c:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  800a70:	003fa306 	br	800900 <timeout_data_handler+0x3c>
		fclose(fp); // remember to close the file
  800a74:	d1275417 	ldw	r4,-25264(gp)
  800a78:	08012580 	call	801258 <fclose>
	}

	if (valueCount == 5) {//check that a valid number of input numbers has been received
  800a7c:	d0a74c17 	ldw	r2,-25296(gp)
  800a80:	10800158 	cmpnei	r2,r2,5
  800a84:	10002d1e 	bne	r2,zero,800b3c <timeout_data_handler+0x278>
		int j;
		for (j=0; j<6; j++) {
  800a88:	e03ffd15 	stw	zero,-12(fp)
  800a8c:	00001006 	br	800ad0 <timeout_data_handler+0x20c>
			if (tempBuffer[j] <= 0) {
  800a90:	e0bffd17 	ldw	r2,-12(fp)
  800a94:	00c02074 	movhi	r3,129
  800a98:	18d53704 	addi	r3,r3,21724
  800a9c:	1085883a 	add	r2,r2,r2
  800aa0:	1085883a 	add	r2,r2,r2
  800aa4:	10c5883a 	add	r2,r2,r3
  800aa8:	10800017 	ldw	r2,0(r2)
  800aac:	1004c03a 	cmpne	r2,r2,zero
  800ab0:	1000041e 	bne	r2,zero,800ac4 <timeout_data_handler+0x200>
				printToUART("Invalid values\n\r");
  800ab4:	01002074 	movhi	r4,129
  800ab8:	21137104 	addi	r4,r4,19908
  800abc:	0800e000 	call	800e00 <printToUART>
				return;
  800ac0:	00002206 	br	800b4c <timeout_data_handler+0x288>
		fclose(fp); // remember to close the file
	}

	if (valueCount == 5) {//check that a valid number of input numbers has been received
		int j;
		for (j=0; j<6; j++) {
  800ac4:	e0bffd17 	ldw	r2,-12(fp)
  800ac8:	10800044 	addi	r2,r2,1
  800acc:	e0bffd15 	stw	r2,-12(fp)
  800ad0:	e0bffd17 	ldw	r2,-12(fp)
  800ad4:	10800190 	cmplti	r2,r2,6
  800ad8:	103fed1e 	bne	r2,zero,800a90 <timeout_data_handler+0x1cc>
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800adc:	e03ffd15 	stw	zero,-12(fp)
  800ae0:	00001106 	br	800b28 <timeout_data_handler+0x264>
			timeout[j]=tempBuffer[j];//load the value in the buffer into the timeout array
  800ae4:	e17ffd17 	ldw	r5,-12(fp)
  800ae8:	e0bffd17 	ldw	r2,-12(fp)
  800aec:	00c02074 	movhi	r3,129
  800af0:	18d53704 	addi	r3,r3,21724
  800af4:	1085883a 	add	r2,r2,r2
  800af8:	1085883a 	add	r2,r2,r2
  800afc:	10c5883a 	add	r2,r2,r3
  800b00:	11000017 	ldw	r4,0(r2)
  800b04:	00c02074 	movhi	r3,129
  800b08:	18d53104 	addi	r3,r3,21700
  800b0c:	2945883a 	add	r2,r5,r5
  800b10:	1085883a 	add	r2,r2,r2
  800b14:	10c5883a 	add	r2,r2,r3
  800b18:	11000015 	stw	r4,0(r2)
			if (tempBuffer[j] <= 0) {
				printToUART("Invalid values\n\r");
				return;
			}
		}
		for (j=0; j<6; j++) {
  800b1c:	e0bffd17 	ldw	r2,-12(fp)
  800b20:	10800044 	addi	r2,r2,1
  800b24:	e0bffd15 	stw	r2,-12(fp)
  800b28:	e0bffd17 	ldw	r2,-12(fp)
  800b2c:	10800190 	cmplti	r2,r2,6
  800b30:	103fec1e 	bne	r2,zero,800ae4 <timeout_data_handler+0x220>
			timeout[j]=tempBuffer[j];//load the value in the buffer into the timeout array
		}
		timerHit = 0;
  800b34:	d0274a15 	stw	zero,-25304(gp)
  800b38:	00000306 	br	800b48 <timeout_data_handler+0x284>
	}else {
		printToUART("Invalid inputs, try again\n\r");
  800b3c:	01002074 	movhi	r4,129
  800b40:	21137604 	addi	r4,r4,19928
  800b44:	0800e000 	call	800e00 <printToUART>

	}
	valueCount = 0;
  800b48:	d0274c15 	stw	zero,-25296(gp)
}
  800b4c:	e037883a 	mov	sp,fp
  800b50:	dfc00117 	ldw	ra,4(sp)
  800b54:	df000017 	ldw	fp,0(sp)
  800b58:	dec00204 	addi	sp,sp,8
  800b5c:	f800283a 	ret

00800b60 <buffer_timeout>:
/* DESCRIPTION: Stores the new timeout values in a secondary buffer for atomic
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(int value) {
  800b60:	defffe04 	addi	sp,sp,-8
  800b64:	df000115 	stw	fp,4(sp)
  800b68:	df000104 	addi	fp,sp,4
  800b6c:	e13fff15 	stw	r4,-4(fp)

}
  800b70:	e037883a 	mov	sp,fp
  800b74:	df000017 	ldw	fp,0(sp)
  800b78:	dec00104 	addi	sp,sp,4
  800b7c:	f800283a 	ret

00800b80 <update_timeout>:
 *              section by ensuring that timeouts are fully received before
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void) {
  800b80:	deffff04 	addi	sp,sp,-4
  800b84:	df000015 	stw	fp,0(sp)
  800b88:	d839883a 	mov	fp,sp

	return 0;
  800b8c:	0005883a 	mov	r2,zero
}
  800b90:	e037883a 	mov	sp,fp
  800b94:	df000017 	ldw	fp,0(sp)
  800b98:	dec00104 	addi	sp,sp,4
  800b9c:	f800283a 	ret

00800ba0 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800ba0:	defffa04 	addi	sp,sp,-24
  800ba4:	dfc00515 	stw	ra,20(sp)
  800ba8:	df000415 	stw	fp,16(sp)
  800bac:	df000404 	addi	fp,sp,16
  800bb0:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800bb4:	e0bffe17 	ldw	r2,-8(fp)
  800bb8:	e0bffd15 	stw	r2,-12(fp)
	(*trigger)++;
  800bbc:	e0bffd17 	ldw	r2,-12(fp)
  800bc0:	10800017 	ldw	r2,0(r2)
  800bc4:	10c00044 	addi	r3,r2,1
  800bc8:	e0bffd17 	ldw	r2,-12(fp)
  800bcc:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {
  800bd0:	e0bffd17 	ldw	r2,-12(fp)
  800bd4:	10800017 	ldw	r2,0(r2)
  800bd8:	1081f418 	cmpnei	r2,r2,2000
  800bdc:	1000061e 	bne	r2,zero,800bf8 <camera_timer_isr+0x58>
		snapshotTaken = 1;
  800be0:	00800044 	movi	r2,1
  800be4:	d0a74e15 	stw	r2,-25288(gp)
		toPrint = 1;
  800be8:	00800044 	movi	r2,1
  800bec:	d0a75015 	stw	r2,-25280(gp)
		return 0;
  800bf0:	e03fff15 	stw	zero,-4(fp)
  800bf4:	00001606 	br	800c50 <camera_timer_isr+0xb0>
	}
	if (vehicle_detected != 2) {
  800bf8:	d0a74b17 	ldw	r2,-25300(gp)
  800bfc:	108000a0 	cmpeqi	r2,r2,2
  800c00:	1000111e 	bne	r2,zero,800c48 <camera_timer_isr+0xa8>
		int num = *trigger;
  800c04:	e0bffd17 	ldw	r2,-12(fp)
  800c08:	10800017 	ldw	r2,0(r2)
  800c0c:	e0bffc15 	stw	r2,-16(fp)
		sprintf(countString, "%d", num);
  800c10:	010020b4 	movhi	r4,130
  800c14:	2123b904 	addi	r4,r4,-28956
  800c18:	01402074 	movhi	r5,129
  800c1c:	29537004 	addi	r5,r5,19904
  800c20:	e1bffc17 	ldw	r6,-16(fp)
  800c24:	0803fcc0 	call	803fcc <sprintf>
		printf(countString);
  800c28:	010020b4 	movhi	r4,130
  800c2c:	2123b904 	addi	r4,r4,-28956
  800c30:	08035fc0 	call	8035fc <printf>
		snapshotTaken = 0;
  800c34:	d0274e15 	stw	zero,-25288(gp)
		toPrint = 1;
  800c38:	00800044 	movi	r2,1
  800c3c:	d0a75015 	stw	r2,-25280(gp)
		return 0;
  800c40:	e03fff15 	stw	zero,-4(fp)
  800c44:	00000206 	br	800c50 <camera_timer_isr+0xb0>
	}
	return 1;
  800c48:	00800044 	movi	r2,1
  800c4c:	e0bfff15 	stw	r2,-4(fp)
  800c50:	e0bfff17 	ldw	r2,-4(fp)
}
  800c54:	e037883a 	mov	sp,fp
  800c58:	dfc00117 	ldw	ra,4(sp)
  800c5c:	df000017 	ldw	fp,0(sp)
  800c60:	dec00204 	addi	sp,sp,8
  800c64:	f800283a 	ret

00800c68 <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800c68:	defffc04 	addi	sp,sp,-16
  800c6c:	dfc00315 	stw	ra,12(sp)
  800c70:	df000215 	stw	fp,8(sp)
  800c74:	df000204 	addi	fp,sp,8
  800c78:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800c7c:	e0bfff17 	ldw	r2,-4(fp)
  800c80:	10800017 	ldw	r2,0(r2)
  800c84:	10bfffd8 	cmpnei	r2,r2,-1
  800c88:	10000b1e 	bne	r2,zero,800cb8 <camera_tlc+0x50>
		init_tlc();
  800c8c:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800c90:	e0bfff17 	ldw	r2,-4(fp)
  800c94:	10800017 	ldw	r2,0(r2)
  800c98:	10c00044 	addi	r3,r2,1
  800c9c:	e0bfff17 	ldw	r2,-4(fp)
  800ca0:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800ca4:	00c04074 	movhi	r3,257
  800ca8:	18c41804 	addi	r3,r3,4192
  800cac:	00800904 	movi	r2,36
  800cb0:	18800035 	stwio	r2,0(r3)
		return;
  800cb4:	00004d06 	br	800dec <camera_tlc+0x184>
	}

	if (toPrint == 1) {
  800cb8:	d0a75017 	ldw	r2,-25280(gp)
  800cbc:	10800058 	cmpnei	r2,r2,1
  800cc0:	1000141e 	bne	r2,zero,800d14 <camera_tlc+0xac>
		if (snapshotTaken == 1) {
  800cc4:	d0a74e17 	ldw	r2,-25288(gp)
  800cc8:	10800058 	cmpnei	r2,r2,1
  800ccc:	1000061e 	bne	r2,zero,800ce8 <camera_tlc+0x80>
			snapshotTaken = 0;
  800cd0:	d0274e15 	stw	zero,-25288(gp)
			printToUART("Snapshot Taken\n\r");
  800cd4:	01002074 	movhi	r4,129
  800cd8:	21137d04 	addi	r4,r4,19956
  800cdc:	0800e000 	call	800e00 <printToUART>
			toPrint = 0;
  800ce0:	d0275015 	stw	zero,-25280(gp)
  800ce4:	00000b06 	br	800d14 <camera_tlc+0xac>
		} else {
			printToUART("Time taken: ");
  800ce8:	01002074 	movhi	r4,129
  800cec:	21138204 	addi	r4,r4,19976
  800cf0:	0800e000 	call	800e00 <printToUART>
			printToUART(countString);
  800cf4:	010020b4 	movhi	r4,130
  800cf8:	2123b904 	addi	r4,r4,-28956
  800cfc:	0800e000 	call	800e00 <printToUART>
			printToUART("\n\r");
  800d00:	01002074 	movhi	r4,129
  800d04:	21138604 	addi	r4,r4,19992
  800d08:	0800e000 	call	800e00 <printToUART>
			timeTaken = 0;
  800d0c:	d0274f15 	stw	zero,-25284(gp)
			toPrint = 0;
  800d10:	d0275015 	stw	zero,-25280(gp)
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800d14:	00804074 	movhi	r2,257
  800d18:	10842404 	addi	r2,r2,4240
  800d1c:	10800037 	ldwio	r2,0(r2)
  800d20:	d0a74915 	stw	r2,-25308(gp)
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800d24:	e0bfff17 	ldw	r2,-4(fp)
  800d28:	10800017 	ldw	r2,0(r2)
  800d2c:	1005003a 	cmpeq	r2,r2,zero
  800d30:	1000041e 	bne	r2,zero,800d44 <camera_tlc+0xdc>
  800d34:	e0bfff17 	ldw	r2,-4(fp)
  800d38:	10800017 	ldw	r2,0(r2)
  800d3c:	108000d8 	cmpnei	r2,r2,3
  800d40:	10000e1e 	bne	r2,zero,800d7c <camera_tlc+0x114>
  800d44:	d0a74917 	ldw	r2,-25308(gp)
  800d48:	10800110 	cmplti	r2,r2,4
  800d4c:	10000b1e 	bne	r2,zero,800d7c <camera_tlc+0x114>
  800d50:	d0a74a17 	ldw	r2,-25304(gp)
  800d54:	10800058 	cmpnei	r2,r2,1
  800d58:	1000081e 	bne	r2,zero,800d7c <camera_tlc+0x114>
		printToUART("Enter values now\n\r");
  800d5c:	01002074 	movhi	r4,129
  800d60:	21136704 	addi	r4,r4,19868
  800d64:	0800e000 	call	800e00 <printToUART>
		timeout_data_handler();
  800d68:	08008c40 	call	8008c4 <timeout_data_handler>
		newTimeoutValues = 0;
  800d6c:	d0274915 	stw	zero,-25308(gp)
		pedestrian_tlc(state);
  800d70:	e13fff17 	ldw	r4,-4(fp)
  800d74:	08005cc0 	call	8005cc <pedestrian_tlc>
			toPrint = 0;
		}
	}

	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3)) && (newTimeoutValues > 3) && (timerHit == 1)){
  800d78:	00000206 	br	800d84 <camera_tlc+0x11c>
		printToUART("Enter values now\n\r");
		timeout_data_handler();
		newTimeoutValues = 0;
		pedestrian_tlc(state);
	} else {
		pedestrian_tlc(state);
  800d7c:	e13fff17 	ldw	r4,-4(fp)
  800d80:	08005cc0 	call	8005cc <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { // One light yellow and vehicle enters
  800d84:	e0bfff17 	ldw	r2,-4(fp)
  800d88:	10800017 	ldw	r2,0(r2)
  800d8c:	108000a0 	cmpeqi	r2,r2,2
  800d90:	1000041e 	bne	r2,zero,800da4 <camera_tlc+0x13c>
  800d94:	e0bfff17 	ldw	r2,-4(fp)
  800d98:	10800017 	ldw	r2,0(r2)
  800d9c:	10800158 	cmpnei	r2,r2,5
  800da0:	1000121e 	bne	r2,zero,800dec <camera_tlc+0x184>
  800da4:	d0a74b17 	ldw	r2,-25300(gp)
  800da8:	10800058 	cmpnei	r2,r2,1
  800dac:	10000f1e 	bne	r2,zero,800dec <camera_tlc+0x184>
		printToUART("Camera Activated\n\r");
  800db0:	01002074 	movhi	r4,129
  800db4:	21138704 	addi	r4,r4,19996
  800db8:	0800e000 	call	800e00 <printToUART>
		camera_count = 0;
  800dbc:	d0200215 	stw	zero,-32760(gp)
		vehicle_detected = 2;
  800dc0:	00800084 	movi	r2,2
  800dc4:	d0a74b15 	stw	r2,-25300(gp)
		void* cameraContext = (void*) &camera_count;
  800dc8:	d0a00204 	addi	r2,gp,-32760
  800dcc:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800dd0:	010020b4 	movhi	r4,130
  800dd4:	2123b304 	addi	r4,r4,-28980
  800dd8:	01400044 	movi	r5,1
  800ddc:	01802034 	movhi	r6,128
  800de0:	3182e804 	addi	r6,r6,2976
  800de4:	e1fffe17 	ldw	r7,-8(fp)
  800de8:	08106540 	call	810654 <alt_alarm_start>
	}
}
  800dec:	e037883a 	mov	sp,fp
  800df0:	dfc00117 	ldw	ra,4(sp)
  800df4:	df000017 	ldw	fp,0(sp)
  800df8:	dec00204 	addi	sp,sp,8
  800dfc:	f800283a 	ret

00800e00 <printToUART>:

void printToUART(char* stringToPrint) {
  800e00:	defffd04 	addi	sp,sp,-12
  800e04:	dfc00215 	stw	ra,8(sp)
  800e08:	df000115 	stw	fp,4(sp)
  800e0c:	df000104 	addi	fp,sp,4
  800e10:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800e14:	01002074 	movhi	r4,129
  800e18:	21136c04 	addi	r4,r4,19888
  800e1c:	01402074 	movhi	r5,129
  800e20:	29538c04 	addi	r5,r5,20016
  800e24:	08019780 	call	801978 <fopen>
  800e28:	d0a75415 	stw	r2,-25264(gp)
	if (fp != NULL) {
  800e2c:	d0a75417 	ldw	r2,-25264(gp)
  800e30:	1005003a 	cmpeq	r2,r2,zero
  800e34:	1000051e 	bne	r2,zero,800e4c <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800e38:	d1675417 	ldw	r5,-25264(gp)
  800e3c:	e13fff17 	ldw	r4,-4(fp)
  800e40:	0801a680 	call	801a68 <fputs>
		fclose(fp);
  800e44:	d1275417 	ldw	r4,-25264(gp)
  800e48:	08012580 	call	801258 <fclose>
	}
}
  800e4c:	e037883a 	mov	sp,fp
  800e50:	dfc00117 	ldw	ra,4(sp)
  800e54:	df000017 	ldw	fp,0(sp)
  800e58:	dec00204 	addi	sp,sp,8
  800e5c:	f800283a 	ret

00800e60 <main>:

int main(void) {
  800e60:	defffc04 	addi	sp,sp,-16
  800e64:	dfc00315 	stw	ra,12(sp)
  800e68:	df000215 	stw	fp,8(sp)
  800e6c:	df000204 	addi	fp,sp,8
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800e70:	01002074 	movhi	r4,129
  800e74:	21138d04 	addi	r4,r4,20020
  800e78:	01402074 	movhi	r5,129
  800e7c:	29538c04 	addi	r5,r5,20016
  800e80:	08019780 	call	801978 <fopen>
  800e84:	e0bffe15 	stw	r2,-8(fp)

	printf("Hello\n");
  800e88:	01002074 	movhi	r4,129
  800e8c:	21139004 	addi	r4,r4,20032
  800e90:	08037140 	call	803714 <puts>

	init_buttons_pio();			// initialise buttons
  800e94:	08005700 	call	800570 <init_buttons_pio>
  800e98:	00000006 	br	800e9c <main+0x3c>

	while (1) {
		if ((proc_state[mode] == -1) || (proc_state[mode] == 0) || (proc_state[mode] == 3)) {
  800e9c:	d0a74d17 	ldw	r2,-25292(gp)
  800ea0:	00c02074 	movhi	r3,129
  800ea4:	18d53d04 	addi	r3,r3,21748
  800ea8:	1085883a 	add	r2,r2,r2
  800eac:	1085883a 	add	r2,r2,r2
  800eb0:	10c5883a 	add	r2,r2,r3
  800eb4:	10800017 	ldw	r2,0(r2)
  800eb8:	10bfffe0 	cmpeqi	r2,r2,-1
  800ebc:	1000121e 	bne	r2,zero,800f08 <main+0xa8>
  800ec0:	d0a74d17 	ldw	r2,-25292(gp)
  800ec4:	00c02074 	movhi	r3,129
  800ec8:	18d53d04 	addi	r3,r3,21748
  800ecc:	1085883a 	add	r2,r2,r2
  800ed0:	1085883a 	add	r2,r2,r2
  800ed4:	10c5883a 	add	r2,r2,r3
  800ed8:	10800017 	ldw	r2,0(r2)
  800edc:	1005003a 	cmpeq	r2,r2,zero
  800ee0:	1000091e 	bne	r2,zero,800f08 <main+0xa8>
  800ee4:	d0a74d17 	ldw	r2,-25292(gp)
  800ee8:	00c02074 	movhi	r3,129
  800eec:	18d53d04 	addi	r3,r3,21748
  800ef0:	1085883a 	add	r2,r2,r2
  800ef4:	1085883a 	add	r2,r2,r2
  800ef8:	10c5883a 	add	r2,r2,r3
  800efc:	10800017 	ldw	r2,0(r2)
  800f00:	108000d8 	cmpnei	r2,r2,3
  800f04:	1000571e 	bne	r2,zero,801064 <main+0x204>
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 0) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 4)) {
  800f08:	00804074 	movhi	r2,257
  800f0c:	10842404 	addi	r2,r2,4240
  800f10:	10800037 	ldwio	r2,0(r2)
  800f14:	1005003a 	cmpeq	r2,r2,zero
  800f18:	1000051e 	bne	r2,zero,800f30 <main+0xd0>
  800f1c:	00804074 	movhi	r2,257
  800f20:	10842404 	addi	r2,r2,4240
  800f24:	10800037 	ldwio	r2,0(r2)
  800f28:	10800118 	cmpnei	r2,r2,4
  800f2c:	10000b1e 	bne	r2,zero,800f5c <main+0xfc>
				if (mode != 0) {
  800f30:	d0a74d17 	ldw	r2,-25292(gp)
  800f34:	1005003a 	cmpeq	r2,r2,zero
  800f38:	1000081e 	bne	r2,zero,800f5c <main+0xfc>
					mode = 0;
  800f3c:	d0274d15 	stw	zero,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800f40:	010020b4 	movhi	r4,130
  800f44:	2123ad04 	addi	r4,r4,-29004
  800f48:	081158c0 	call	81158c <alt_alarm_stop>
					proc_state[0] = -1;
  800f4c:	00c02074 	movhi	r3,129
  800f50:	18d53d04 	addi	r3,r3,21748
  800f54:	00bfffc4 	movi	r2,-1
  800f58:	18800015 	stw	r2,0(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 1) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 5)) {
  800f5c:	00804074 	movhi	r2,257
  800f60:	10842404 	addi	r2,r2,4240
  800f64:	10800037 	ldwio	r2,0(r2)
  800f68:	10800060 	cmpeqi	r2,r2,1
  800f6c:	1000051e 	bne	r2,zero,800f84 <main+0x124>
  800f70:	00804074 	movhi	r2,257
  800f74:	10842404 	addi	r2,r2,4240
  800f78:	10800037 	ldwio	r2,0(r2)
  800f7c:	10800158 	cmpnei	r2,r2,5
  800f80:	10000c1e 	bne	r2,zero,800fb4 <main+0x154>
				if (mode != 1) {
  800f84:	d0a74d17 	ldw	r2,-25292(gp)
  800f88:	10800060 	cmpeqi	r2,r2,1
  800f8c:	1000091e 	bne	r2,zero,800fb4 <main+0x154>
					mode = 1;
  800f90:	00800044 	movi	r2,1
  800f94:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800f98:	010020b4 	movhi	r4,130
  800f9c:	2123ad04 	addi	r4,r4,-29004
  800fa0:	081158c0 	call	81158c <alt_alarm_stop>
					proc_state[1] = -1;
  800fa4:	00c02074 	movhi	r3,129
  800fa8:	18d53d04 	addi	r3,r3,21748
  800fac:	00bfffc4 	movi	r2,-1
  800fb0:	18800115 	stw	r2,4(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 2) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6)) {
  800fb4:	00804074 	movhi	r2,257
  800fb8:	10842404 	addi	r2,r2,4240
  800fbc:	10800037 	ldwio	r2,0(r2)
  800fc0:	108000a0 	cmpeqi	r2,r2,2
  800fc4:	1000051e 	bne	r2,zero,800fdc <main+0x17c>
  800fc8:	00804074 	movhi	r2,257
  800fcc:	10842404 	addi	r2,r2,4240
  800fd0:	10800037 	ldwio	r2,0(r2)
  800fd4:	10800198 	cmpnei	r2,r2,6
  800fd8:	10000c1e 	bne	r2,zero,80100c <main+0x1ac>
				if (mode != 2) {
  800fdc:	d0a74d17 	ldw	r2,-25292(gp)
  800fe0:	108000a0 	cmpeqi	r2,r2,2
  800fe4:	1000091e 	bne	r2,zero,80100c <main+0x1ac>
					mode = 2;
  800fe8:	00800084 	movi	r2,2
  800fec:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  800ff0:	010020b4 	movhi	r4,130
  800ff4:	2123ad04 	addi	r4,r4,-29004
  800ff8:	081158c0 	call	81158c <alt_alarm_stop>
					proc_state[2] = -1;
  800ffc:	00c02074 	movhi	r3,129
  801000:	18d53d04 	addi	r3,r3,21748
  801004:	00bfffc4 	movi	r2,-1
  801008:	18800215 	stw	r2,8(r3)
				}
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 3) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 7)) {
  80100c:	00804074 	movhi	r2,257
  801010:	10842404 	addi	r2,r2,4240
  801014:	10800037 	ldwio	r2,0(r2)
  801018:	108000e0 	cmpeqi	r2,r2,3
  80101c:	1000051e 	bne	r2,zero,801034 <main+0x1d4>
  801020:	00804074 	movhi	r2,257
  801024:	10842404 	addi	r2,r2,4240
  801028:	10800037 	ldwio	r2,0(r2)
  80102c:	108001d8 	cmpnei	r2,r2,7
  801030:	10000c1e 	bne	r2,zero,801064 <main+0x204>
				if (mode != 3) {
  801034:	d0a74d17 	ldw	r2,-25292(gp)
  801038:	108000e0 	cmpeqi	r2,r2,3
  80103c:	1000091e 	bne	r2,zero,801064 <main+0x204>
					mode = 3;
  801040:	008000c4 	movi	r2,3
  801044:	d0a74d15 	stw	r2,-25292(gp)
					alt_alarm_stop(&tlc_timer);
  801048:	010020b4 	movhi	r4,130
  80104c:	2123ad04 	addi	r4,r4,-29004
  801050:	081158c0 	call	81158c <alt_alarm_stop>
					proc_state[3] = -1;
  801054:	00c02074 	movhi	r3,129
  801058:	18d53d04 	addi	r3,r3,21748
  80105c:	00bfffc4 	movi	r2,-1
  801060:	18800315 	stw	r2,12(r3)
				}
			}
		}

    	if(lcd != NULL) {
  801064:	e0bffe17 	ldw	r2,-8(fp)
  801068:	1005003a 	cmpeq	r2,r2,zero
  80106c:	1000171e 	bne	r2,zero,8010cc <main+0x26c>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  801070:	e13ffe17 	ldw	r4,-8(fp)
  801074:	01402074 	movhi	r5,129
  801078:	29539204 	addi	r5,r5,20040
  80107c:	018006c4 	movi	r6,27
  801080:	01c02074 	movhi	r7,129
  801084:	39d39404 	addi	r7,r7,20048
  801088:	08019940 	call	801994 <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  80108c:	d1a74d17 	ldw	r6,-25292(gp)
  801090:	e13ffe17 	ldw	r4,-8(fp)
  801094:	01402074 	movhi	r5,129
  801098:	29539504 	addi	r5,r5,20052
  80109c:	08019940 	call	801994 <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  8010a0:	d0a74d17 	ldw	r2,-25292(gp)
  8010a4:	00c02074 	movhi	r3,129
  8010a8:	18d53d04 	addi	r3,r3,21748
  8010ac:	1085883a 	add	r2,r2,r2
  8010b0:	1085883a 	add	r2,r2,r2
  8010b4:	10c5883a 	add	r2,r2,r3
  8010b8:	11800017 	ldw	r6,0(r2)
  8010bc:	e13ffe17 	ldw	r4,-8(fp)
  8010c0:	01402074 	movhi	r5,129
  8010c4:	29539804 	addi	r5,r5,20064
  8010c8:	08019940 	call	801994 <fprintf>
    	}

		// Execute the correct TLC
    	switch (mode) {
  8010cc:	d0a74d17 	ldw	r2,-25292(gp)
  8010d0:	e0bfff15 	stw	r2,-4(fp)
  8010d4:	e0ffff17 	ldw	r3,-4(fp)
  8010d8:	18800060 	cmpeqi	r2,r3,1
  8010dc:	10000e1e 	bne	r2,zero,801118 <main+0x2b8>
  8010e0:	e0ffff17 	ldw	r3,-4(fp)
  8010e4:	18800070 	cmpltui	r2,r3,1
  8010e8:	1000071e 	bne	r2,zero,801108 <main+0x2a8>
  8010ec:	e0ffff17 	ldw	r3,-4(fp)
  8010f0:	188000a0 	cmpeqi	r2,r3,2
  8010f4:	10000c1e 	bne	r2,zero,801128 <main+0x2c8>
  8010f8:	e0ffff17 	ldw	r3,-4(fp)
  8010fc:	188000e0 	cmpeqi	r2,r3,3
  801100:	10000d1e 	bne	r2,zero,801138 <main+0x2d8>
  801104:	003f6506 	br	800e9c <main+0x3c>
			case 0:
				simple_tlc(&proc_state[0]);
  801108:	01002074 	movhi	r4,129
  80110c:	21153d04 	addi	r4,r4,21748
  801110:	08002500 	call	800250 <simple_tlc>
				break;
  801114:	003f6106 	br	800e9c <main+0x3c>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  801118:	01002074 	movhi	r4,129
  80111c:	21153e04 	addi	r4,r4,21752
  801120:	08005cc0 	call	8005cc <pedestrian_tlc>
				break;
  801124:	003f5d06 	br	800e9c <main+0x3c>
			case 2:
				configurable_tlc(&proc_state[2]);
  801128:	01002074 	movhi	r4,129
  80112c:	21153f04 	addi	r4,r4,21756
  801130:	08007a80 	call	8007a8 <configurable_tlc>
				break;
  801134:	003f5906 	br	800e9c <main+0x3c>
			case 3:
				camera_tlc(&proc_state[3]);
  801138:	01002074 	movhi	r4,129
  80113c:	21154004 	addi	r4,r4,21760
  801140:	0800c680 	call	800c68 <camera_tlc>
				break;
		}
	}
  801144:	003f5506 	br	800e9c <main+0x3c>

00801148 <_fclose_r>:
  801148:	defffc04 	addi	sp,sp,-16
  80114c:	dc400115 	stw	r17,4(sp)
  801150:	dc000015 	stw	r16,0(sp)
  801154:	dfc00315 	stw	ra,12(sp)
  801158:	dc800215 	stw	r18,8(sp)
  80115c:	2821883a 	mov	r16,r5
  801160:	2023883a 	mov	r17,r4
  801164:	28002926 	beq	r5,zero,80120c <_fclose_r+0xc4>
  801168:	080161c0 	call	80161c <__sfp_lock_acquire>
  80116c:	88000226 	beq	r17,zero,801178 <_fclose_r+0x30>
  801170:	88800e17 	ldw	r2,56(r17)
  801174:	10002d26 	beq	r2,zero,80122c <_fclose_r+0xe4>
  801178:	8080030f 	ldh	r2,12(r16)
  80117c:	10002226 	beq	r2,zero,801208 <_fclose_r+0xc0>
  801180:	8809883a 	mov	r4,r17
  801184:	800b883a 	mov	r5,r16
  801188:	080126c0 	call	80126c <_fflush_r>
  80118c:	1025883a 	mov	r18,r2
  801190:	80800b17 	ldw	r2,44(r16)
  801194:	10000426 	beq	r2,zero,8011a8 <_fclose_r+0x60>
  801198:	81400717 	ldw	r5,28(r16)
  80119c:	8809883a 	mov	r4,r17
  8011a0:	103ee83a 	callr	r2
  8011a4:	10002a16 	blt	r2,zero,801250 <_fclose_r+0x108>
  8011a8:	8080030b 	ldhu	r2,12(r16)
  8011ac:	1080200c 	andi	r2,r2,128
  8011b0:	1000231e 	bne	r2,zero,801240 <_fclose_r+0xf8>
  8011b4:	81400c17 	ldw	r5,48(r16)
  8011b8:	28000526 	beq	r5,zero,8011d0 <_fclose_r+0x88>
  8011bc:	80801004 	addi	r2,r16,64
  8011c0:	28800226 	beq	r5,r2,8011cc <_fclose_r+0x84>
  8011c4:	8809883a 	mov	r4,r17
  8011c8:	0801bb00 	call	801bb0 <_free_r>
  8011cc:	80000c15 	stw	zero,48(r16)
  8011d0:	81401117 	ldw	r5,68(r16)
  8011d4:	28000326 	beq	r5,zero,8011e4 <_fclose_r+0x9c>
  8011d8:	8809883a 	mov	r4,r17
  8011dc:	0801bb00 	call	801bb0 <_free_r>
  8011e0:	80001115 	stw	zero,68(r16)
  8011e4:	8000030d 	sth	zero,12(r16)
  8011e8:	08016200 	call	801620 <__sfp_lock_release>
  8011ec:	9005883a 	mov	r2,r18
  8011f0:	dfc00317 	ldw	ra,12(sp)
  8011f4:	dc800217 	ldw	r18,8(sp)
  8011f8:	dc400117 	ldw	r17,4(sp)
  8011fc:	dc000017 	ldw	r16,0(sp)
  801200:	dec00404 	addi	sp,sp,16
  801204:	f800283a 	ret
  801208:	08016200 	call	801620 <__sfp_lock_release>
  80120c:	0025883a 	mov	r18,zero
  801210:	9005883a 	mov	r2,r18
  801214:	dfc00317 	ldw	ra,12(sp)
  801218:	dc800217 	ldw	r18,8(sp)
  80121c:	dc400117 	ldw	r17,4(sp)
  801220:	dc000017 	ldw	r16,0(sp)
  801224:	dec00404 	addi	sp,sp,16
  801228:	f800283a 	ret
  80122c:	8809883a 	mov	r4,r17
  801230:	080162c0 	call	80162c <__sinit>
  801234:	8080030f 	ldh	r2,12(r16)
  801238:	103fd11e 	bne	r2,zero,801180 <_fclose_r+0x38>
  80123c:	003ff206 	br	801208 <_fclose_r+0xc0>
  801240:	81400417 	ldw	r5,16(r16)
  801244:	8809883a 	mov	r4,r17
  801248:	0801bb00 	call	801bb0 <_free_r>
  80124c:	003fd906 	br	8011b4 <_fclose_r+0x6c>
  801250:	04bfffc4 	movi	r18,-1
  801254:	003fd406 	br	8011a8 <_fclose_r+0x60>

00801258 <fclose>:
  801258:	00802074 	movhi	r2,129
  80125c:	109c4f04 	addi	r2,r2,28988
  801260:	200b883a 	mov	r5,r4
  801264:	11000017 	ldw	r4,0(r2)
  801268:	08011481 	jmpi	801148 <_fclose_r>

0080126c <_fflush_r>:
  80126c:	defffb04 	addi	sp,sp,-20
  801270:	dcc00315 	stw	r19,12(sp)
  801274:	dc800215 	stw	r18,8(sp)
  801278:	dfc00415 	stw	ra,16(sp)
  80127c:	dc400115 	stw	r17,4(sp)
  801280:	dc000015 	stw	r16,0(sp)
  801284:	2027883a 	mov	r19,r4
  801288:	2825883a 	mov	r18,r5
  80128c:	20000226 	beq	r4,zero,801298 <_fflush_r+0x2c>
  801290:	20800e17 	ldw	r2,56(r4)
  801294:	10005626 	beq	r2,zero,8013f0 <_fflush_r+0x184>
  801298:	9100030b 	ldhu	r4,12(r18)
  80129c:	20ffffcc 	andi	r3,r4,65535
  8012a0:	18e0001c 	xori	r3,r3,32768
  8012a4:	18e00004 	addi	r3,r3,-32768
  8012a8:	1880020c 	andi	r2,r3,8
  8012ac:	1000261e 	bne	r2,zero,801348 <_fflush_r+0xdc>
  8012b0:	90c00117 	ldw	r3,4(r18)
  8012b4:	20820014 	ori	r2,r4,2048
  8012b8:	9080030d 	sth	r2,12(r18)
  8012bc:	1009883a 	mov	r4,r2
  8012c0:	00c0400e 	bge	zero,r3,8013c4 <_fflush_r+0x158>
  8012c4:	92000a17 	ldw	r8,40(r18)
  8012c8:	40004026 	beq	r8,zero,8013cc <_fflush_r+0x160>
  8012cc:	2084000c 	andi	r2,r4,4096
  8012d0:	10005326 	beq	r2,zero,801420 <_fflush_r+0x1b4>
  8012d4:	94001417 	ldw	r16,80(r18)
  8012d8:	9080030b 	ldhu	r2,12(r18)
  8012dc:	1080010c 	andi	r2,r2,4
  8012e0:	1000481e 	bne	r2,zero,801404 <_fflush_r+0x198>
  8012e4:	91400717 	ldw	r5,28(r18)
  8012e8:	9809883a 	mov	r4,r19
  8012ec:	800d883a 	mov	r6,r16
  8012f0:	000f883a 	mov	r7,zero
  8012f4:	403ee83a 	callr	r8
  8012f8:	8080261e 	bne	r16,r2,801394 <_fflush_r+0x128>
  8012fc:	9080030b 	ldhu	r2,12(r18)
  801300:	91000417 	ldw	r4,16(r18)
  801304:	90000115 	stw	zero,4(r18)
  801308:	10bdffcc 	andi	r2,r2,63487
  80130c:	10ffffcc 	andi	r3,r2,65535
  801310:	18c4000c 	andi	r3,r3,4096
  801314:	9080030d 	sth	r2,12(r18)
  801318:	91000015 	stw	r4,0(r18)
  80131c:	18002b26 	beq	r3,zero,8013cc <_fflush_r+0x160>
  801320:	0007883a 	mov	r3,zero
  801324:	1805883a 	mov	r2,r3
  801328:	94001415 	stw	r16,80(r18)
  80132c:	dfc00417 	ldw	ra,16(sp)
  801330:	dcc00317 	ldw	r19,12(sp)
  801334:	dc800217 	ldw	r18,8(sp)
  801338:	dc400117 	ldw	r17,4(sp)
  80133c:	dc000017 	ldw	r16,0(sp)
  801340:	dec00504 	addi	sp,sp,20
  801344:	f800283a 	ret
  801348:	94400417 	ldw	r17,16(r18)
  80134c:	88001f26 	beq	r17,zero,8013cc <_fflush_r+0x160>
  801350:	90800017 	ldw	r2,0(r18)
  801354:	18c000cc 	andi	r3,r3,3
  801358:	94400015 	stw	r17,0(r18)
  80135c:	1461c83a 	sub	r16,r2,r17
  801360:	18002526 	beq	r3,zero,8013f8 <_fflush_r+0x18c>
  801364:	0005883a 	mov	r2,zero
  801368:	90800215 	stw	r2,8(r18)
  80136c:	0400170e 	bge	zero,r16,8013cc <_fflush_r+0x160>
  801370:	90c00917 	ldw	r3,36(r18)
  801374:	91400717 	ldw	r5,28(r18)
  801378:	880d883a 	mov	r6,r17
  80137c:	800f883a 	mov	r7,r16
  801380:	9809883a 	mov	r4,r19
  801384:	183ee83a 	callr	r3
  801388:	88a3883a 	add	r17,r17,r2
  80138c:	80a1c83a 	sub	r16,r16,r2
  801390:	00bff616 	blt	zero,r2,80136c <_fflush_r+0x100>
  801394:	9080030b 	ldhu	r2,12(r18)
  801398:	00ffffc4 	movi	r3,-1
  80139c:	10801014 	ori	r2,r2,64
  8013a0:	9080030d 	sth	r2,12(r18)
  8013a4:	1805883a 	mov	r2,r3
  8013a8:	dfc00417 	ldw	ra,16(sp)
  8013ac:	dcc00317 	ldw	r19,12(sp)
  8013b0:	dc800217 	ldw	r18,8(sp)
  8013b4:	dc400117 	ldw	r17,4(sp)
  8013b8:	dc000017 	ldw	r16,0(sp)
  8013bc:	dec00504 	addi	sp,sp,20
  8013c0:	f800283a 	ret
  8013c4:	90800f17 	ldw	r2,60(r18)
  8013c8:	00bfbe16 	blt	zero,r2,8012c4 <_fflush_r+0x58>
  8013cc:	0007883a 	mov	r3,zero
  8013d0:	1805883a 	mov	r2,r3
  8013d4:	dfc00417 	ldw	ra,16(sp)
  8013d8:	dcc00317 	ldw	r19,12(sp)
  8013dc:	dc800217 	ldw	r18,8(sp)
  8013e0:	dc400117 	ldw	r17,4(sp)
  8013e4:	dc000017 	ldw	r16,0(sp)
  8013e8:	dec00504 	addi	sp,sp,20
  8013ec:	f800283a 	ret
  8013f0:	080162c0 	call	80162c <__sinit>
  8013f4:	003fa806 	br	801298 <_fflush_r+0x2c>
  8013f8:	90800517 	ldw	r2,20(r18)
  8013fc:	90800215 	stw	r2,8(r18)
  801400:	003fda06 	br	80136c <_fflush_r+0x100>
  801404:	90800117 	ldw	r2,4(r18)
  801408:	90c00c17 	ldw	r3,48(r18)
  80140c:	80a1c83a 	sub	r16,r16,r2
  801410:	183fb426 	beq	r3,zero,8012e4 <_fflush_r+0x78>
  801414:	90800f17 	ldw	r2,60(r18)
  801418:	80a1c83a 	sub	r16,r16,r2
  80141c:	003fb106 	br	8012e4 <_fflush_r+0x78>
  801420:	91400717 	ldw	r5,28(r18)
  801424:	9809883a 	mov	r4,r19
  801428:	000d883a 	mov	r6,zero
  80142c:	01c00044 	movi	r7,1
  801430:	403ee83a 	callr	r8
  801434:	1021883a 	mov	r16,r2
  801438:	00bfffc4 	movi	r2,-1
  80143c:	80800226 	beq	r16,r2,801448 <_fflush_r+0x1dc>
  801440:	92000a17 	ldw	r8,40(r18)
  801444:	003fa406 	br	8012d8 <_fflush_r+0x6c>
  801448:	98c00017 	ldw	r3,0(r19)
  80144c:	00800744 	movi	r2,29
  801450:	18bfde26 	beq	r3,r2,8013cc <_fflush_r+0x160>
  801454:	9080030b 	ldhu	r2,12(r18)
  801458:	8007883a 	mov	r3,r16
  80145c:	10801014 	ori	r2,r2,64
  801460:	9080030d 	sth	r2,12(r18)
  801464:	003fcf06 	br	8013a4 <_fflush_r+0x138>

00801468 <fflush>:
  801468:	01402034 	movhi	r5,128
  80146c:	29449b04 	addi	r5,r5,4716
  801470:	2007883a 	mov	r3,r4
  801474:	20000526 	beq	r4,zero,80148c <fflush+0x24>
  801478:	00802074 	movhi	r2,129
  80147c:	109c4f04 	addi	r2,r2,28988
  801480:	11000017 	ldw	r4,0(r2)
  801484:	180b883a 	mov	r5,r3
  801488:	080126c1 	jmpi	80126c <_fflush_r>
  80148c:	00802074 	movhi	r2,129
  801490:	109c5004 	addi	r2,r2,28992
  801494:	11000017 	ldw	r4,0(r2)
  801498:	08028341 	jmpi	802834 <_fwalk_reent>

0080149c <fgetc>:
  80149c:	defffd04 	addi	sp,sp,-12
  8014a0:	dc400115 	stw	r17,4(sp)
  8014a4:	04402074 	movhi	r17,129
  8014a8:	8c5c4f04 	addi	r17,r17,28988
  8014ac:	88c00017 	ldw	r3,0(r17)
  8014b0:	dc000015 	stw	r16,0(sp)
  8014b4:	dfc00215 	stw	ra,8(sp)
  8014b8:	2021883a 	mov	r16,r4
  8014bc:	18000326 	beq	r3,zero,8014cc <fgetc+0x30>
  8014c0:	18800e17 	ldw	r2,56(r3)
  8014c4:	1809883a 	mov	r4,r3
  8014c8:	10000e26 	beq	r2,zero,801504 <fgetc+0x68>
  8014cc:	80800117 	ldw	r2,4(r16)
  8014d0:	800b883a 	mov	r5,r16
  8014d4:	10bfffc4 	addi	r2,r2,-1
  8014d8:	80800115 	stw	r2,4(r16)
  8014dc:	10000f16 	blt	r2,zero,80151c <fgetc+0x80>
  8014e0:	80c00017 	ldw	r3,0(r16)
  8014e4:	18800003 	ldbu	r2,0(r3)
  8014e8:	18c00044 	addi	r3,r3,1
  8014ec:	80c00015 	stw	r3,0(r16)
  8014f0:	dfc00217 	ldw	ra,8(sp)
  8014f4:	dc400117 	ldw	r17,4(sp)
  8014f8:	dc000017 	ldw	r16,0(sp)
  8014fc:	dec00304 	addi	sp,sp,12
  801500:	f800283a 	ret
  801504:	080162c0 	call	80162c <__sinit>
  801508:	80800117 	ldw	r2,4(r16)
  80150c:	800b883a 	mov	r5,r16
  801510:	10bfffc4 	addi	r2,r2,-1
  801514:	80800115 	stw	r2,4(r16)
  801518:	103ff10e 	bge	r2,zero,8014e0 <fgetc+0x44>
  80151c:	89000017 	ldw	r4,0(r17)
  801520:	dfc00217 	ldw	ra,8(sp)
  801524:	dc400117 	ldw	r17,4(sp)
  801528:	dc000017 	ldw	r16,0(sp)
  80152c:	dec00304 	addi	sp,sp,12
  801530:	0803efc1 	jmpi	803efc <__srget_r>

00801534 <_fgetc_r>:
  801534:	defffd04 	addi	sp,sp,-12
  801538:	dc400115 	stw	r17,4(sp)
  80153c:	dc000015 	stw	r16,0(sp)
  801540:	dfc00215 	stw	ra,8(sp)
  801544:	2021883a 	mov	r16,r4
  801548:	2823883a 	mov	r17,r5
  80154c:	20000226 	beq	r4,zero,801558 <_fgetc_r+0x24>
  801550:	20800e17 	ldw	r2,56(r4)
  801554:	10000f26 	beq	r2,zero,801594 <_fgetc_r+0x60>
  801558:	88800117 	ldw	r2,4(r17)
  80155c:	8009883a 	mov	r4,r16
  801560:	880b883a 	mov	r5,r17
  801564:	10bfffc4 	addi	r2,r2,-1
  801568:	88800115 	stw	r2,4(r17)
  80156c:	10001016 	blt	r2,zero,8015b0 <_fgetc_r+0x7c>
  801570:	88c00017 	ldw	r3,0(r17)
  801574:	18800003 	ldbu	r2,0(r3)
  801578:	18c00044 	addi	r3,r3,1
  80157c:	88c00015 	stw	r3,0(r17)
  801580:	dfc00217 	ldw	ra,8(sp)
  801584:	dc400117 	ldw	r17,4(sp)
  801588:	dc000017 	ldw	r16,0(sp)
  80158c:	dec00304 	addi	sp,sp,12
  801590:	f800283a 	ret
  801594:	080162c0 	call	80162c <__sinit>
  801598:	88800117 	ldw	r2,4(r17)
  80159c:	8009883a 	mov	r4,r16
  8015a0:	880b883a 	mov	r5,r17
  8015a4:	10bfffc4 	addi	r2,r2,-1
  8015a8:	88800115 	stw	r2,4(r17)
  8015ac:	103ff00e 	bge	r2,zero,801570 <_fgetc_r+0x3c>
  8015b0:	dfc00217 	ldw	ra,8(sp)
  8015b4:	dc400117 	ldw	r17,4(sp)
  8015b8:	dc000017 	ldw	r16,0(sp)
  8015bc:	dec00304 	addi	sp,sp,12
  8015c0:	0803efc1 	jmpi	803efc <__srget_r>

008015c4 <std>:
  8015c4:	00802034 	movhi	r2,128
  8015c8:	10906d04 	addi	r2,r2,16820
  8015cc:	20800b15 	stw	r2,44(r4)
  8015d0:	00802034 	movhi	r2,128
  8015d4:	1090a804 	addi	r2,r2,17056
  8015d8:	20800815 	stw	r2,32(r4)
  8015dc:	00c02034 	movhi	r3,128
  8015e0:	18d08904 	addi	r3,r3,16932
  8015e4:	00802034 	movhi	r2,128
  8015e8:	10906f04 	addi	r2,r2,16828
  8015ec:	2140030d 	sth	r5,12(r4)
  8015f0:	2180038d 	sth	r6,14(r4)
  8015f4:	20c00915 	stw	r3,36(r4)
  8015f8:	20800a15 	stw	r2,40(r4)
  8015fc:	20000015 	stw	zero,0(r4)
  801600:	20000115 	stw	zero,4(r4)
  801604:	20000215 	stw	zero,8(r4)
  801608:	20000415 	stw	zero,16(r4)
  80160c:	20000515 	stw	zero,20(r4)
  801610:	20000615 	stw	zero,24(r4)
  801614:	21000715 	stw	r4,28(r4)
  801618:	f800283a 	ret

0080161c <__sfp_lock_acquire>:
  80161c:	f800283a 	ret

00801620 <__sfp_lock_release>:
  801620:	f800283a 	ret

00801624 <__sinit_lock_acquire>:
  801624:	f800283a 	ret

00801628 <__sinit_lock_release>:
  801628:	f800283a 	ret

0080162c <__sinit>:
  80162c:	20800e17 	ldw	r2,56(r4)
  801630:	defffd04 	addi	sp,sp,-12
  801634:	dc400115 	stw	r17,4(sp)
  801638:	dc000015 	stw	r16,0(sp)
  80163c:	dfc00215 	stw	ra,8(sp)
  801640:	04400044 	movi	r17,1
  801644:	01400104 	movi	r5,4
  801648:	000d883a 	mov	r6,zero
  80164c:	2021883a 	mov	r16,r4
  801650:	2200bb04 	addi	r8,r4,748
  801654:	200f883a 	mov	r7,r4
  801658:	10000526 	beq	r2,zero,801670 <__sinit+0x44>
  80165c:	dfc00217 	ldw	ra,8(sp)
  801660:	dc400117 	ldw	r17,4(sp)
  801664:	dc000017 	ldw	r16,0(sp)
  801668:	dec00304 	addi	sp,sp,12
  80166c:	f800283a 	ret
  801670:	21000117 	ldw	r4,4(r4)
  801674:	00802034 	movhi	r2,128
  801678:	1085c404 	addi	r2,r2,5904
  80167c:	00c000c4 	movi	r3,3
  801680:	80800f15 	stw	r2,60(r16)
  801684:	80c0b915 	stw	r3,740(r16)
  801688:	8200ba15 	stw	r8,744(r16)
  80168c:	84400e15 	stw	r17,56(r16)
  801690:	8000b815 	stw	zero,736(r16)
  801694:	08015c40 	call	8015c4 <std>
  801698:	81000217 	ldw	r4,8(r16)
  80169c:	880d883a 	mov	r6,r17
  8016a0:	800f883a 	mov	r7,r16
  8016a4:	01400284 	movi	r5,10
  8016a8:	08015c40 	call	8015c4 <std>
  8016ac:	81000317 	ldw	r4,12(r16)
  8016b0:	800f883a 	mov	r7,r16
  8016b4:	01400484 	movi	r5,18
  8016b8:	01800084 	movi	r6,2
  8016bc:	dfc00217 	ldw	ra,8(sp)
  8016c0:	dc400117 	ldw	r17,4(sp)
  8016c4:	dc000017 	ldw	r16,0(sp)
  8016c8:	dec00304 	addi	sp,sp,12
  8016cc:	08015c41 	jmpi	8015c4 <std>

008016d0 <__fp_lock>:
  8016d0:	0005883a 	mov	r2,zero
  8016d4:	f800283a 	ret

008016d8 <__fp_unlock>:
  8016d8:	0005883a 	mov	r2,zero
  8016dc:	f800283a 	ret

008016e0 <__fp_unlock_all>:
  8016e0:	00802074 	movhi	r2,129
  8016e4:	109c4f04 	addi	r2,r2,28988
  8016e8:	11000017 	ldw	r4,0(r2)
  8016ec:	01402034 	movhi	r5,128
  8016f0:	2945b604 	addi	r5,r5,5848
  8016f4:	08028fc1 	jmpi	8028fc <_fwalk>

008016f8 <__fp_lock_all>:
  8016f8:	00802074 	movhi	r2,129
  8016fc:	109c4f04 	addi	r2,r2,28988
  801700:	11000017 	ldw	r4,0(r2)
  801704:	01402034 	movhi	r5,128
  801708:	2945b404 	addi	r5,r5,5840
  80170c:	08028fc1 	jmpi	8028fc <_fwalk>

00801710 <_cleanup_r>:
  801710:	01402034 	movhi	r5,128
  801714:	29449604 	addi	r5,r5,4696
  801718:	08028fc1 	jmpi	8028fc <_fwalk>

0080171c <_cleanup>:
  80171c:	00802074 	movhi	r2,129
  801720:	109c5004 	addi	r2,r2,28992
  801724:	11000017 	ldw	r4,0(r2)
  801728:	08017101 	jmpi	801710 <_cleanup_r>

0080172c <__sfmoreglue>:
  80172c:	defffc04 	addi	sp,sp,-16
  801730:	dc400115 	stw	r17,4(sp)
  801734:	2c401724 	muli	r17,r5,92
  801738:	dc800215 	stw	r18,8(sp)
  80173c:	2825883a 	mov	r18,r5
  801740:	89400304 	addi	r5,r17,12
  801744:	dc000015 	stw	r16,0(sp)
  801748:	dfc00315 	stw	ra,12(sp)
  80174c:	0802b480 	call	802b48 <_malloc_r>
  801750:	0021883a 	mov	r16,zero
  801754:	880d883a 	mov	r6,r17
  801758:	000b883a 	mov	r5,zero
  80175c:	10000626 	beq	r2,zero,801778 <__sfmoreglue+0x4c>
  801760:	11000304 	addi	r4,r2,12
  801764:	14800115 	stw	r18,4(r2)
  801768:	10000015 	stw	zero,0(r2)
  80176c:	11000215 	stw	r4,8(r2)
  801770:	1021883a 	mov	r16,r2
  801774:	08034ec0 	call	8034ec <memset>
  801778:	8005883a 	mov	r2,r16
  80177c:	dfc00317 	ldw	ra,12(sp)
  801780:	dc800217 	ldw	r18,8(sp)
  801784:	dc400117 	ldw	r17,4(sp)
  801788:	dc000017 	ldw	r16,0(sp)
  80178c:	dec00404 	addi	sp,sp,16
  801790:	f800283a 	ret

00801794 <__sfp>:
  801794:	defffd04 	addi	sp,sp,-12
  801798:	00802074 	movhi	r2,129
  80179c:	109c5004 	addi	r2,r2,28992
  8017a0:	dc000015 	stw	r16,0(sp)
  8017a4:	14000017 	ldw	r16,0(r2)
  8017a8:	dc400115 	stw	r17,4(sp)
  8017ac:	dfc00215 	stw	ra,8(sp)
  8017b0:	80800e17 	ldw	r2,56(r16)
  8017b4:	2023883a 	mov	r17,r4
  8017b8:	10002626 	beq	r2,zero,801854 <__sfp+0xc0>
  8017bc:	8400b804 	addi	r16,r16,736
  8017c0:	80800117 	ldw	r2,4(r16)
  8017c4:	81000217 	ldw	r4,8(r16)
  8017c8:	10ffffc4 	addi	r3,r2,-1
  8017cc:	18000916 	blt	r3,zero,8017f4 <__sfp+0x60>
  8017d0:	2080030f 	ldh	r2,12(r4)
  8017d4:	10000b26 	beq	r2,zero,801804 <__sfp+0x70>
  8017d8:	017fffc4 	movi	r5,-1
  8017dc:	00000206 	br	8017e8 <__sfp+0x54>
  8017e0:	2080030f 	ldh	r2,12(r4)
  8017e4:	10000726 	beq	r2,zero,801804 <__sfp+0x70>
  8017e8:	18ffffc4 	addi	r3,r3,-1
  8017ec:	21001704 	addi	r4,r4,92
  8017f0:	197ffb1e 	bne	r3,r5,8017e0 <__sfp+0x4c>
  8017f4:	80800017 	ldw	r2,0(r16)
  8017f8:	10001926 	beq	r2,zero,801860 <__sfp+0xcc>
  8017fc:	1021883a 	mov	r16,r2
  801800:	003fef06 	br	8017c0 <__sfp+0x2c>
  801804:	00bfffc4 	movi	r2,-1
  801808:	00c00044 	movi	r3,1
  80180c:	2080038d 	sth	r2,14(r4)
  801810:	20c0030d 	sth	r3,12(r4)
  801814:	20000015 	stw	zero,0(r4)
  801818:	20000215 	stw	zero,8(r4)
  80181c:	20000115 	stw	zero,4(r4)
  801820:	20000415 	stw	zero,16(r4)
  801824:	20000515 	stw	zero,20(r4)
  801828:	20000615 	stw	zero,24(r4)
  80182c:	20000c15 	stw	zero,48(r4)
  801830:	20000d15 	stw	zero,52(r4)
  801834:	20001115 	stw	zero,68(r4)
  801838:	20001215 	stw	zero,72(r4)
  80183c:	2005883a 	mov	r2,r4
  801840:	dfc00217 	ldw	ra,8(sp)
  801844:	dc400117 	ldw	r17,4(sp)
  801848:	dc000017 	ldw	r16,0(sp)
  80184c:	dec00304 	addi	sp,sp,12
  801850:	f800283a 	ret
  801854:	8009883a 	mov	r4,r16
  801858:	080162c0 	call	80162c <__sinit>
  80185c:	003fd706 	br	8017bc <__sfp+0x28>
  801860:	8809883a 	mov	r4,r17
  801864:	01400104 	movi	r5,4
  801868:	080172c0 	call	80172c <__sfmoreglue>
  80186c:	80800015 	stw	r2,0(r16)
  801870:	103fe21e 	bne	r2,zero,8017fc <__sfp+0x68>
  801874:	00800304 	movi	r2,12
  801878:	0009883a 	mov	r4,zero
  80187c:	88800015 	stw	r2,0(r17)
  801880:	003fee06 	br	80183c <__sfp+0xa8>

00801884 <_fopen_r>:
  801884:	defffa04 	addi	sp,sp,-24
  801888:	dcc00415 	stw	r19,16(sp)
  80188c:	2827883a 	mov	r19,r5
  801890:	300b883a 	mov	r5,r6
  801894:	d80d883a 	mov	r6,sp
  801898:	dc800315 	stw	r18,12(sp)
  80189c:	dc400215 	stw	r17,8(sp)
  8018a0:	dc000115 	stw	r16,4(sp)
  8018a4:	dfc00515 	stw	ra,20(sp)
  8018a8:	2021883a 	mov	r16,r4
  8018ac:	080940c0 	call	80940c <__sflags>
  8018b0:	1025883a 	mov	r18,r2
  8018b4:	8009883a 	mov	r4,r16
  8018b8:	0023883a 	mov	r17,zero
  8018bc:	1000081e 	bne	r2,zero,8018e0 <_fopen_r+0x5c>
  8018c0:	8805883a 	mov	r2,r17
  8018c4:	dfc00517 	ldw	ra,20(sp)
  8018c8:	dcc00417 	ldw	r19,16(sp)
  8018cc:	dc800317 	ldw	r18,12(sp)
  8018d0:	dc400217 	ldw	r17,8(sp)
  8018d4:	dc000117 	ldw	r16,4(sp)
  8018d8:	dec00604 	addi	sp,sp,24
  8018dc:	f800283a 	ret
  8018e0:	08017940 	call	801794 <__sfp>
  8018e4:	1023883a 	mov	r17,r2
  8018e8:	980b883a 	mov	r5,r19
  8018ec:	8009883a 	mov	r4,r16
  8018f0:	01c06d84 	movi	r7,438
  8018f4:	103ff226 	beq	r2,zero,8018c0 <_fopen_r+0x3c>
  8018f8:	d9800017 	ldw	r6,0(sp)
  8018fc:	08035840 	call	803584 <_open_r>
  801900:	10001816 	blt	r2,zero,801964 <_fopen_r+0xe0>
  801904:	00c02034 	movhi	r3,128
  801908:	18d08904 	addi	r3,r3,16932
  80190c:	923fffcc 	andi	r8,r18,65535
  801910:	8880038d 	sth	r2,14(r17)
  801914:	00802034 	movhi	r2,128
  801918:	1090a804 	addi	r2,r2,17056
  80191c:	88800815 	stw	r2,32(r17)
  801920:	88c00915 	stw	r3,36(r17)
  801924:	00802034 	movhi	r2,128
  801928:	10906f04 	addi	r2,r2,16828
  80192c:	00c02034 	movhi	r3,128
  801930:	18d06d04 	addi	r3,r3,16820
  801934:	4200400c 	andi	r8,r8,256
  801938:	8c80030d 	sth	r18,12(r17)
  80193c:	8009883a 	mov	r4,r16
  801940:	880b883a 	mov	r5,r17
  801944:	000d883a 	mov	r6,zero
  801948:	01c00084 	movi	r7,2
  80194c:	88800a15 	stw	r2,40(r17)
  801950:	88c00b15 	stw	r3,44(r17)
  801954:	8c400715 	stw	r17,28(r17)
  801958:	403fd926 	beq	r8,zero,8018c0 <_fopen_r+0x3c>
  80195c:	0801ec40 	call	801ec4 <_fseek_r>
  801960:	003fd706 	br	8018c0 <_fopen_r+0x3c>
  801964:	080161c0 	call	80161c <__sfp_lock_acquire>
  801968:	8800030d 	sth	zero,12(r17)
  80196c:	08016200 	call	801620 <__sfp_lock_release>
  801970:	0023883a 	mov	r17,zero
  801974:	003fd206 	br	8018c0 <_fopen_r+0x3c>

00801978 <fopen>:
  801978:	01802074 	movhi	r6,129
  80197c:	319c4f04 	addi	r6,r6,28988
  801980:	2007883a 	mov	r3,r4
  801984:	31000017 	ldw	r4,0(r6)
  801988:	280d883a 	mov	r6,r5
  80198c:	180b883a 	mov	r5,r3
  801990:	08018841 	jmpi	801884 <_fopen_r>

00801994 <fprintf>:
  801994:	defffc04 	addi	sp,sp,-16
  801998:	dfc00115 	stw	ra,4(sp)
  80199c:	d9800215 	stw	r6,8(sp)
  8019a0:	d9c00315 	stw	r7,12(sp)
  8019a4:	d8800204 	addi	r2,sp,8
  8019a8:	100d883a 	mov	r6,r2
  8019ac:	d8800015 	stw	r2,0(sp)
  8019b0:	08062780 	call	806278 <__vfprintf_internal>
  8019b4:	dfc00117 	ldw	ra,4(sp)
  8019b8:	dec00404 	addi	sp,sp,16
  8019bc:	f800283a 	ret

008019c0 <_fprintf_r>:
  8019c0:	defffd04 	addi	sp,sp,-12
  8019c4:	2807883a 	mov	r3,r5
  8019c8:	dfc00115 	stw	ra,4(sp)
  8019cc:	d9c00215 	stw	r7,8(sp)
  8019d0:	d8800204 	addi	r2,sp,8
  8019d4:	300b883a 	mov	r5,r6
  8019d8:	1809883a 	mov	r4,r3
  8019dc:	100d883a 	mov	r6,r2
  8019e0:	d8800015 	stw	r2,0(sp)
  8019e4:	08062780 	call	806278 <__vfprintf_internal>
  8019e8:	dfc00117 	ldw	ra,4(sp)
  8019ec:	dec00304 	addi	sp,sp,12
  8019f0:	f800283a 	ret

008019f4 <_fputs_r>:
  8019f4:	defff804 	addi	sp,sp,-32
  8019f8:	dc000515 	stw	r16,20(sp)
  8019fc:	2021883a 	mov	r16,r4
  801a00:	2809883a 	mov	r4,r5
  801a04:	dc400615 	stw	r17,24(sp)
  801a08:	dfc00715 	stw	ra,28(sp)
  801a0c:	3023883a 	mov	r17,r6
  801a10:	d9400015 	stw	r5,0(sp)
  801a14:	08043000 	call	804300 <strlen>
  801a18:	00c00044 	movi	r3,1
  801a1c:	d8800115 	stw	r2,4(sp)
  801a20:	d8c00315 	stw	r3,12(sp)
  801a24:	d8800415 	stw	r2,16(sp)
  801a28:	dec00215 	stw	sp,8(sp)
  801a2c:	80000326 	beq	r16,zero,801a3c <_fputs_r+0x48>
  801a30:	80800e17 	ldw	r2,56(r16)
  801a34:	8009883a 	mov	r4,r16
  801a38:	10000926 	beq	r2,zero,801a60 <_fputs_r+0x6c>
  801a3c:	8009883a 	mov	r4,r16
  801a40:	880b883a 	mov	r5,r17
  801a44:	d9800204 	addi	r6,sp,8
  801a48:	08023980 	call	802398 <__sfvwrite_r>
  801a4c:	dfc00717 	ldw	ra,28(sp)
  801a50:	dc400617 	ldw	r17,24(sp)
  801a54:	dc000517 	ldw	r16,20(sp)
  801a58:	dec00804 	addi	sp,sp,32
  801a5c:	f800283a 	ret
  801a60:	080162c0 	call	80162c <__sinit>
  801a64:	003ff506 	br	801a3c <_fputs_r+0x48>

00801a68 <fputs>:
  801a68:	01802074 	movhi	r6,129
  801a6c:	319c4f04 	addi	r6,r6,28988
  801a70:	2007883a 	mov	r3,r4
  801a74:	31000017 	ldw	r4,0(r6)
  801a78:	280d883a 	mov	r6,r5
  801a7c:	180b883a 	mov	r5,r3
  801a80:	08019f41 	jmpi	8019f4 <_fputs_r>

00801a84 <_malloc_trim_r>:
  801a84:	defffb04 	addi	sp,sp,-20
  801a88:	dcc00315 	stw	r19,12(sp)
  801a8c:	04c02074 	movhi	r19,129
  801a90:	9cd64104 	addi	r19,r19,22788
  801a94:	dc800215 	stw	r18,8(sp)
  801a98:	dc400115 	stw	r17,4(sp)
  801a9c:	dc000015 	stw	r16,0(sp)
  801aa0:	2823883a 	mov	r17,r5
  801aa4:	2025883a 	mov	r18,r4
  801aa8:	dfc00415 	stw	ra,16(sp)
  801aac:	0810fec0 	call	810fec <__malloc_lock>
  801ab0:	98800217 	ldw	r2,8(r19)
  801ab4:	9009883a 	mov	r4,r18
  801ab8:	000b883a 	mov	r5,zero
  801abc:	10c00117 	ldw	r3,4(r2)
  801ac0:	00bfff04 	movi	r2,-4
  801ac4:	18a0703a 	and	r16,r3,r2
  801ac8:	8463c83a 	sub	r17,r16,r17
  801acc:	8c43fbc4 	addi	r17,r17,4079
  801ad0:	8822d33a 	srli	r17,r17,12
  801ad4:	0083ffc4 	movi	r2,4095
  801ad8:	8c7fffc4 	addi	r17,r17,-1
  801adc:	8822933a 	slli	r17,r17,12
  801ae0:	1440060e 	bge	r2,r17,801afc <_malloc_trim_r+0x78>
  801ae4:	0803f5c0 	call	803f5c <_sbrk_r>
  801ae8:	98c00217 	ldw	r3,8(r19)
  801aec:	9009883a 	mov	r4,r18
  801af0:	044bc83a 	sub	r5,zero,r17
  801af4:	80c7883a 	add	r3,r16,r3
  801af8:	10c00926 	beq	r2,r3,801b20 <_malloc_trim_r+0x9c>
  801afc:	081100c0 	call	81100c <__malloc_unlock>
  801b00:	0005883a 	mov	r2,zero
  801b04:	dfc00417 	ldw	ra,16(sp)
  801b08:	dcc00317 	ldw	r19,12(sp)
  801b0c:	dc800217 	ldw	r18,8(sp)
  801b10:	dc400117 	ldw	r17,4(sp)
  801b14:	dc000017 	ldw	r16,0(sp)
  801b18:	dec00504 	addi	sp,sp,20
  801b1c:	f800283a 	ret
  801b20:	9009883a 	mov	r4,r18
  801b24:	0803f5c0 	call	803f5c <_sbrk_r>
  801b28:	844dc83a 	sub	r6,r16,r17
  801b2c:	00ffffc4 	movi	r3,-1
  801b30:	9009883a 	mov	r4,r18
  801b34:	000b883a 	mov	r5,zero
  801b38:	01c020b4 	movhi	r7,130
  801b3c:	39e3bc04 	addi	r7,r7,-28944
  801b40:	31800054 	ori	r6,r6,1
  801b44:	10c00926 	beq	r2,r3,801b6c <_malloc_trim_r+0xe8>
  801b48:	38800017 	ldw	r2,0(r7)
  801b4c:	98c00217 	ldw	r3,8(r19)
  801b50:	9009883a 	mov	r4,r18
  801b54:	1445c83a 	sub	r2,r2,r17
  801b58:	38800015 	stw	r2,0(r7)
  801b5c:	19800115 	stw	r6,4(r3)
  801b60:	081100c0 	call	81100c <__malloc_unlock>
  801b64:	00800044 	movi	r2,1
  801b68:	003fe606 	br	801b04 <_malloc_trim_r+0x80>
  801b6c:	0803f5c0 	call	803f5c <_sbrk_r>
  801b70:	99800217 	ldw	r6,8(r19)
  801b74:	100f883a 	mov	r7,r2
  801b78:	9009883a 	mov	r4,r18
  801b7c:	1187c83a 	sub	r3,r2,r6
  801b80:	008003c4 	movi	r2,15
  801b84:	19400054 	ori	r5,r3,1
  801b88:	10ffdc0e 	bge	r2,r3,801afc <_malloc_trim_r+0x78>
  801b8c:	00802074 	movhi	r2,129
  801b90:	109c5204 	addi	r2,r2,29000
  801b94:	10c00017 	ldw	r3,0(r2)
  801b98:	008020b4 	movhi	r2,130
  801b9c:	10a3bc04 	addi	r2,r2,-28944
  801ba0:	31400115 	stw	r5,4(r6)
  801ba4:	38c7c83a 	sub	r3,r7,r3
  801ba8:	10c00015 	stw	r3,0(r2)
  801bac:	003fd306 	br	801afc <_malloc_trim_r+0x78>

00801bb0 <_free_r>:
  801bb0:	defffd04 	addi	sp,sp,-12
  801bb4:	dc400115 	stw	r17,4(sp)
  801bb8:	dc000015 	stw	r16,0(sp)
  801bbc:	dfc00215 	stw	ra,8(sp)
  801bc0:	2821883a 	mov	r16,r5
  801bc4:	2023883a 	mov	r17,r4
  801bc8:	28005a26 	beq	r5,zero,801d34 <_free_r+0x184>
  801bcc:	0810fec0 	call	810fec <__malloc_lock>
  801bd0:	823ffe04 	addi	r8,r16,-8
  801bd4:	41400117 	ldw	r5,4(r8)
  801bd8:	00bfff84 	movi	r2,-2
  801bdc:	02802074 	movhi	r10,129
  801be0:	52964104 	addi	r10,r10,22788
  801be4:	288e703a 	and	r7,r5,r2
  801be8:	41cd883a 	add	r6,r8,r7
  801bec:	30c00117 	ldw	r3,4(r6)
  801bf0:	51000217 	ldw	r4,8(r10)
  801bf4:	00bfff04 	movi	r2,-4
  801bf8:	1892703a 	and	r9,r3,r2
  801bfc:	5017883a 	mov	r11,r10
  801c00:	31006726 	beq	r6,r4,801da0 <_free_r+0x1f0>
  801c04:	2880004c 	andi	r2,r5,1
  801c08:	1005003a 	cmpeq	r2,r2,zero
  801c0c:	32400115 	stw	r9,4(r6)
  801c10:	10001a1e 	bne	r2,zero,801c7c <_free_r+0xcc>
  801c14:	000b883a 	mov	r5,zero
  801c18:	3247883a 	add	r3,r6,r9
  801c1c:	18800117 	ldw	r2,4(r3)
  801c20:	1080004c 	andi	r2,r2,1
  801c24:	1000231e 	bne	r2,zero,801cb4 <_free_r+0x104>
  801c28:	280ac03a 	cmpne	r5,r5,zero
  801c2c:	3a4f883a 	add	r7,r7,r9
  801c30:	2800451e 	bne	r5,zero,801d48 <_free_r+0x198>
  801c34:	31000217 	ldw	r4,8(r6)
  801c38:	00802074 	movhi	r2,129
  801c3c:	10964304 	addi	r2,r2,22796
  801c40:	20807b26 	beq	r4,r2,801e30 <_free_r+0x280>
  801c44:	30800317 	ldw	r2,12(r6)
  801c48:	3a07883a 	add	r3,r7,r8
  801c4c:	19c00015 	stw	r7,0(r3)
  801c50:	11000215 	stw	r4,8(r2)
  801c54:	20800315 	stw	r2,12(r4)
  801c58:	38800054 	ori	r2,r7,1
  801c5c:	40800115 	stw	r2,4(r8)
  801c60:	28001a26 	beq	r5,zero,801ccc <_free_r+0x11c>
  801c64:	8809883a 	mov	r4,r17
  801c68:	dfc00217 	ldw	ra,8(sp)
  801c6c:	dc400117 	ldw	r17,4(sp)
  801c70:	dc000017 	ldw	r16,0(sp)
  801c74:	dec00304 	addi	sp,sp,12
  801c78:	081100c1 	jmpi	81100c <__malloc_unlock>
  801c7c:	80bffe17 	ldw	r2,-8(r16)
  801c80:	50c00204 	addi	r3,r10,8
  801c84:	4091c83a 	sub	r8,r8,r2
  801c88:	41000217 	ldw	r4,8(r8)
  801c8c:	388f883a 	add	r7,r7,r2
  801c90:	20c06126 	beq	r4,r3,801e18 <_free_r+0x268>
  801c94:	40800317 	ldw	r2,12(r8)
  801c98:	3247883a 	add	r3,r6,r9
  801c9c:	000b883a 	mov	r5,zero
  801ca0:	11000215 	stw	r4,8(r2)
  801ca4:	20800315 	stw	r2,12(r4)
  801ca8:	18800117 	ldw	r2,4(r3)
  801cac:	1080004c 	andi	r2,r2,1
  801cb0:	103fdd26 	beq	r2,zero,801c28 <_free_r+0x78>
  801cb4:	38800054 	ori	r2,r7,1
  801cb8:	3a07883a 	add	r3,r7,r8
  801cbc:	280ac03a 	cmpne	r5,r5,zero
  801cc0:	40800115 	stw	r2,4(r8)
  801cc4:	19c00015 	stw	r7,0(r3)
  801cc8:	283fe61e 	bne	r5,zero,801c64 <_free_r+0xb4>
  801ccc:	00807fc4 	movi	r2,511
  801cd0:	11c01f2e 	bgeu	r2,r7,801d50 <_free_r+0x1a0>
  801cd4:	3806d27a 	srli	r3,r7,9
  801cd8:	1800481e 	bne	r3,zero,801dfc <_free_r+0x24c>
  801cdc:	3804d0fa 	srli	r2,r7,3
  801ce0:	100690fa 	slli	r3,r2,3
  801ce4:	1acd883a 	add	r6,r3,r11
  801ce8:	31400217 	ldw	r5,8(r6)
  801cec:	31405926 	beq	r6,r5,801e54 <_free_r+0x2a4>
  801cf0:	28800117 	ldw	r2,4(r5)
  801cf4:	00ffff04 	movi	r3,-4
  801cf8:	10c4703a 	and	r2,r2,r3
  801cfc:	3880022e 	bgeu	r7,r2,801d08 <_free_r+0x158>
  801d00:	29400217 	ldw	r5,8(r5)
  801d04:	317ffa1e 	bne	r6,r5,801cf0 <_free_r+0x140>
  801d08:	29800317 	ldw	r6,12(r5)
  801d0c:	41800315 	stw	r6,12(r8)
  801d10:	41400215 	stw	r5,8(r8)
  801d14:	8809883a 	mov	r4,r17
  801d18:	2a000315 	stw	r8,12(r5)
  801d1c:	32000215 	stw	r8,8(r6)
  801d20:	dfc00217 	ldw	ra,8(sp)
  801d24:	dc400117 	ldw	r17,4(sp)
  801d28:	dc000017 	ldw	r16,0(sp)
  801d2c:	dec00304 	addi	sp,sp,12
  801d30:	081100c1 	jmpi	81100c <__malloc_unlock>
  801d34:	dfc00217 	ldw	ra,8(sp)
  801d38:	dc400117 	ldw	r17,4(sp)
  801d3c:	dc000017 	ldw	r16,0(sp)
  801d40:	dec00304 	addi	sp,sp,12
  801d44:	f800283a 	ret
  801d48:	31000217 	ldw	r4,8(r6)
  801d4c:	003fbd06 	br	801c44 <_free_r+0x94>
  801d50:	3806d0fa 	srli	r3,r7,3
  801d54:	00800044 	movi	r2,1
  801d58:	51400117 	ldw	r5,4(r10)
  801d5c:	180890fa 	slli	r4,r3,3
  801d60:	1807d0ba 	srai	r3,r3,2
  801d64:	22c9883a 	add	r4,r4,r11
  801d68:	21800217 	ldw	r6,8(r4)
  801d6c:	10c4983a 	sll	r2,r2,r3
  801d70:	41000315 	stw	r4,12(r8)
  801d74:	41800215 	stw	r6,8(r8)
  801d78:	288ab03a 	or	r5,r5,r2
  801d7c:	22000215 	stw	r8,8(r4)
  801d80:	8809883a 	mov	r4,r17
  801d84:	51400115 	stw	r5,4(r10)
  801d88:	32000315 	stw	r8,12(r6)
  801d8c:	dfc00217 	ldw	ra,8(sp)
  801d90:	dc400117 	ldw	r17,4(sp)
  801d94:	dc000017 	ldw	r16,0(sp)
  801d98:	dec00304 	addi	sp,sp,12
  801d9c:	081100c1 	jmpi	81100c <__malloc_unlock>
  801da0:	2880004c 	andi	r2,r5,1
  801da4:	3a4d883a 	add	r6,r7,r9
  801da8:	1000071e 	bne	r2,zero,801dc8 <_free_r+0x218>
  801dac:	80bffe17 	ldw	r2,-8(r16)
  801db0:	4091c83a 	sub	r8,r8,r2
  801db4:	41000317 	ldw	r4,12(r8)
  801db8:	40c00217 	ldw	r3,8(r8)
  801dbc:	308d883a 	add	r6,r6,r2
  801dc0:	20c00215 	stw	r3,8(r4)
  801dc4:	19000315 	stw	r4,12(r3)
  801dc8:	00802074 	movhi	r2,129
  801dcc:	109c5104 	addi	r2,r2,28996
  801dd0:	11000017 	ldw	r4,0(r2)
  801dd4:	30c00054 	ori	r3,r6,1
  801dd8:	52000215 	stw	r8,8(r10)
  801ddc:	40c00115 	stw	r3,4(r8)
  801de0:	313fa036 	bltu	r6,r4,801c64 <_free_r+0xb4>
  801de4:	008020b4 	movhi	r2,130
  801de8:	10a3a104 	addi	r2,r2,-29052
  801dec:	11400017 	ldw	r5,0(r2)
  801df0:	8809883a 	mov	r4,r17
  801df4:	0801a840 	call	801a84 <_malloc_trim_r>
  801df8:	003f9a06 	br	801c64 <_free_r+0xb4>
  801dfc:	00800104 	movi	r2,4
  801e00:	10c0072e 	bgeu	r2,r3,801e20 <_free_r+0x270>
  801e04:	00800504 	movi	r2,20
  801e08:	10c01936 	bltu	r2,r3,801e70 <_free_r+0x2c0>
  801e0c:	188016c4 	addi	r2,r3,91
  801e10:	100690fa 	slli	r3,r2,3
  801e14:	003fb306 	br	801ce4 <_free_r+0x134>
  801e18:	01400044 	movi	r5,1
  801e1c:	003f7e06 	br	801c18 <_free_r+0x68>
  801e20:	3804d1ba 	srli	r2,r7,6
  801e24:	10800e04 	addi	r2,r2,56
  801e28:	100690fa 	slli	r3,r2,3
  801e2c:	003fad06 	br	801ce4 <_free_r+0x134>
  801e30:	22000315 	stw	r8,12(r4)
  801e34:	22000215 	stw	r8,8(r4)
  801e38:	3a05883a 	add	r2,r7,r8
  801e3c:	38c00054 	ori	r3,r7,1
  801e40:	11c00015 	stw	r7,0(r2)
  801e44:	41000215 	stw	r4,8(r8)
  801e48:	40c00115 	stw	r3,4(r8)
  801e4c:	41000315 	stw	r4,12(r8)
  801e50:	003f8406 	br	801c64 <_free_r+0xb4>
  801e54:	1005d0ba 	srai	r2,r2,2
  801e58:	00c00044 	movi	r3,1
  801e5c:	51000117 	ldw	r4,4(r10)
  801e60:	1886983a 	sll	r3,r3,r2
  801e64:	20c8b03a 	or	r4,r4,r3
  801e68:	51000115 	stw	r4,4(r10)
  801e6c:	003fa706 	br	801d0c <_free_r+0x15c>
  801e70:	00801504 	movi	r2,84
  801e74:	10c00436 	bltu	r2,r3,801e88 <_free_r+0x2d8>
  801e78:	3804d33a 	srli	r2,r7,12
  801e7c:	10801b84 	addi	r2,r2,110
  801e80:	100690fa 	slli	r3,r2,3
  801e84:	003f9706 	br	801ce4 <_free_r+0x134>
  801e88:	00805504 	movi	r2,340
  801e8c:	10c00436 	bltu	r2,r3,801ea0 <_free_r+0x2f0>
  801e90:	3804d3fa 	srli	r2,r7,15
  801e94:	10801dc4 	addi	r2,r2,119
  801e98:	100690fa 	slli	r3,r2,3
  801e9c:	003f9106 	br	801ce4 <_free_r+0x134>
  801ea0:	00815504 	movi	r2,1364
  801ea4:	10c0032e 	bgeu	r2,r3,801eb4 <_free_r+0x304>
  801ea8:	00801f84 	movi	r2,126
  801eac:	00c0fc04 	movi	r3,1008
  801eb0:	003f8c06 	br	801ce4 <_free_r+0x134>
  801eb4:	3804d4ba 	srli	r2,r7,18
  801eb8:	10801f04 	addi	r2,r2,124
  801ebc:	100690fa 	slli	r3,r2,3
  801ec0:	003f8806 	br	801ce4 <_free_r+0x134>

00801ec4 <_fseek_r>:
  801ec4:	deffe804 	addi	sp,sp,-96
  801ec8:	dd801515 	stw	r22,84(sp)
  801ecc:	dcc01215 	stw	r19,72(sp)
  801ed0:	dc801115 	stw	r18,68(sp)
  801ed4:	dc000f15 	stw	r16,60(sp)
  801ed8:	dfc01715 	stw	ra,92(sp)
  801edc:	ddc01615 	stw	r23,88(sp)
  801ee0:	dd401415 	stw	r21,80(sp)
  801ee4:	dd001315 	stw	r20,76(sp)
  801ee8:	dc401015 	stw	r17,64(sp)
  801eec:	2025883a 	mov	r18,r4
  801ef0:	2821883a 	mov	r16,r5
  801ef4:	302d883a 	mov	r22,r6
  801ef8:	3827883a 	mov	r19,r7
  801efc:	20000226 	beq	r4,zero,801f08 <_fseek_r+0x44>
  801f00:	20800e17 	ldw	r2,56(r4)
  801f04:	10007826 	beq	r2,zero,8020e8 <_fseek_r+0x224>
  801f08:	8080030b 	ldhu	r2,12(r16)
  801f0c:	00c04204 	movi	r3,264
  801f10:	1080420c 	andi	r2,r2,264
  801f14:	10c07926 	beq	r2,r3,8020fc <_fseek_r+0x238>
  801f18:	85400a17 	ldw	r21,40(r16)
  801f1c:	a800ea26 	beq	r21,zero,8022c8 <_fseek_r+0x404>
  801f20:	00800044 	movi	r2,1
  801f24:	98805f26 	beq	r19,r2,8020a4 <_fseek_r+0x1e0>
  801f28:	00800084 	movi	r2,2
  801f2c:	98801026 	beq	r19,r2,801f70 <_fseek_r+0xac>
  801f30:	98000f26 	beq	r19,zero,801f70 <_fseek_r+0xac>
  801f34:	00800584 	movi	r2,22
  801f38:	013fffc4 	movi	r4,-1
  801f3c:	90800015 	stw	r2,0(r18)
  801f40:	2005883a 	mov	r2,r4
  801f44:	dfc01717 	ldw	ra,92(sp)
  801f48:	ddc01617 	ldw	r23,88(sp)
  801f4c:	dd801517 	ldw	r22,84(sp)
  801f50:	dd401417 	ldw	r21,80(sp)
  801f54:	dd001317 	ldw	r20,76(sp)
  801f58:	dcc01217 	ldw	r19,72(sp)
  801f5c:	dc801117 	ldw	r18,68(sp)
  801f60:	dc401017 	ldw	r17,64(sp)
  801f64:	dc000f17 	ldw	r16,60(sp)
  801f68:	dec01804 	addi	sp,sp,96
  801f6c:	f800283a 	ret
  801f70:	81800417 	ldw	r6,16(r16)
  801f74:	0023883a 	mov	r17,zero
  801f78:	002f883a 	mov	r23,zero
  801f7c:	3000a626 	beq	r6,zero,802218 <_fseek_r+0x354>
  801f80:	8100030b 	ldhu	r4,12(r16)
  801f84:	2082068c 	andi	r2,r4,2074
  801f88:	1000081e 	bne	r2,zero,801fac <_fseek_r+0xe8>
  801f8c:	2081000c 	andi	r2,r4,1024
  801f90:	10001b1e 	bne	r2,zero,802000 <_fseek_r+0x13c>
  801f94:	00802034 	movhi	r2,128
  801f98:	10906f04 	addi	r2,r2,16828
  801f9c:	a8800926 	beq	r21,r2,801fc4 <_fseek_r+0x100>
  801fa0:	8080030b 	ldhu	r2,12(r16)
  801fa4:	10820014 	ori	r2,r2,2048
  801fa8:	8080030d 	sth	r2,12(r16)
  801fac:	9009883a 	mov	r4,r18
  801fb0:	800b883a 	mov	r5,r16
  801fb4:	080126c0 	call	80126c <_fflush_r>
  801fb8:	1000a326 	beq	r2,zero,802248 <_fseek_r+0x384>
  801fbc:	013fffc4 	movi	r4,-1
  801fc0:	003fdf06 	br	801f40 <_fseek_r+0x7c>
  801fc4:	8140038f 	ldh	r5,14(r16)
  801fc8:	283ff516 	blt	r5,zero,801fa0 <_fseek_r+0xdc>
  801fcc:	9009883a 	mov	r4,r18
  801fd0:	d80d883a 	mov	r6,sp
  801fd4:	08023240 	call	802324 <_fstat_r>
  801fd8:	103ff11e 	bne	r2,zero,801fa0 <_fseek_r+0xdc>
  801fdc:	d8800117 	ldw	r2,4(sp)
  801fe0:	00e00014 	movui	r3,32768
  801fe4:	10bc000c 	andi	r2,r2,61440
  801fe8:	10ffed1e 	bne	r2,r3,801fa0 <_fseek_r+0xdc>
  801fec:	80c0030b 	ldhu	r3,12(r16)
  801ff0:	00810004 	movi	r2,1024
  801ff4:	80801315 	stw	r2,76(r16)
  801ff8:	1886b03a 	or	r3,r3,r2
  801ffc:	80c0030d 	sth	r3,12(r16)
  802000:	9800701e 	bne	r19,zero,8021c4 <_fseek_r+0x300>
  802004:	b029883a 	mov	r20,r22
  802008:	b804c03a 	cmpne	r2,r23,zero
  80200c:	10003f1e 	bne	r2,zero,80210c <_fseek_r+0x248>
  802010:	8100030b 	ldhu	r4,12(r16)
  802014:	2084000c 	andi	r2,r4,4096
  802018:	1000a126 	beq	r2,zero,8022a0 <_fseek_r+0x3dc>
  80201c:	81801417 	ldw	r6,80(r16)
  802020:	80c00117 	ldw	r3,4(r16)
  802024:	81400c17 	ldw	r5,48(r16)
  802028:	30e3c83a 	sub	r17,r6,r3
  80202c:	28008026 	beq	r5,zero,802230 <_fseek_r+0x36c>
  802030:	81c00f17 	ldw	r7,60(r16)
  802034:	89e3c83a 	sub	r17,r17,r7
  802038:	80800e17 	ldw	r2,56(r16)
  80203c:	81800417 	ldw	r6,16(r16)
  802040:	88c7883a 	add	r3,r17,r3
  802044:	1185c83a 	sub	r2,r2,r6
  802048:	11cf883a 	add	r7,r2,r7
  80204c:	1887c83a 	sub	r3,r3,r2
  802050:	2088000c 	andi	r2,r4,8192
  802054:	10003e1e 	bne	r2,zero,802150 <_fseek_r+0x28c>
  802058:	a0c03d16 	blt	r20,r3,802150 <_fseek_r+0x28c>
  80205c:	38c5883a 	add	r2,r7,r3
  802060:	a0803b2e 	bgeu	r20,r2,802150 <_fseek_r+0x28c>
  802064:	a0c5c83a 	sub	r2,r20,r3
  802068:	3887c83a 	sub	r3,r7,r2
  80206c:	3085883a 	add	r2,r6,r2
  802070:	80800015 	stw	r2,0(r16)
  802074:	80c00115 	stw	r3,4(r16)
  802078:	28000526 	beq	r5,zero,802090 <_fseek_r+0x1cc>
  80207c:	80801004 	addi	r2,r16,64
  802080:	28800226 	beq	r5,r2,80208c <_fseek_r+0x1c8>
  802084:	9009883a 	mov	r4,r18
  802088:	0801bb00 	call	801bb0 <_free_r>
  80208c:	80000c15 	stw	zero,48(r16)
  802090:	8080030b 	ldhu	r2,12(r16)
  802094:	0009883a 	mov	r4,zero
  802098:	10bff7cc 	andi	r2,r2,65503
  80209c:	8080030d 	sth	r2,12(r16)
  8020a0:	003fa706 	br	801f40 <_fseek_r+0x7c>
  8020a4:	9009883a 	mov	r4,r18
  8020a8:	800b883a 	mov	r5,r16
  8020ac:	080126c0 	call	80126c <_fflush_r>
  8020b0:	8100030b 	ldhu	r4,12(r16)
  8020b4:	2084000c 	andi	r2,r4,4096
  8020b8:	10008726 	beq	r2,zero,8022d8 <_fseek_r+0x414>
  8020bc:	84401417 	ldw	r17,80(r16)
  8020c0:	2080010c 	andi	r2,r4,4
  8020c4:	1000171e 	bne	r2,zero,802124 <_fseek_r+0x260>
  8020c8:	2080020c 	andi	r2,r4,8
  8020cc:	10003b26 	beq	r2,zero,8021bc <_fseek_r+0x2f8>
  8020d0:	80800017 	ldw	r2,0(r16)
  8020d4:	10003926 	beq	r2,zero,8021bc <_fseek_r+0x2f8>
  8020d8:	81800417 	ldw	r6,16(r16)
  8020dc:	1185c83a 	sub	r2,r2,r6
  8020e0:	88a3883a 	add	r17,r17,r2
  8020e4:	00001606 	br	802140 <_fseek_r+0x27c>
  8020e8:	080162c0 	call	80162c <__sinit>
  8020ec:	8080030b 	ldhu	r2,12(r16)
  8020f0:	00c04204 	movi	r3,264
  8020f4:	1080420c 	andi	r2,r2,264
  8020f8:	10ff871e 	bne	r2,r3,801f18 <_fseek_r+0x54>
  8020fc:	9009883a 	mov	r4,r18
  802100:	800b883a 	mov	r5,r16
  802104:	080126c0 	call	80126c <_fflush_r>
  802108:	003f8306 	br	801f18 <_fseek_r+0x54>
  80210c:	81400c17 	ldw	r5,48(r16)
  802110:	28004526 	beq	r5,zero,802228 <_fseek_r+0x364>
  802114:	8100030b 	ldhu	r4,12(r16)
  802118:	80c00117 	ldw	r3,4(r16)
  80211c:	81c00f17 	ldw	r7,60(r16)
  802120:	003fc506 	br	802038 <_fseek_r+0x174>
  802124:	80c00117 	ldw	r3,4(r16)
  802128:	80800c17 	ldw	r2,48(r16)
  80212c:	88e3c83a 	sub	r17,r17,r3
  802130:	10002226 	beq	r2,zero,8021bc <_fseek_r+0x2f8>
  802134:	81c00f17 	ldw	r7,60(r16)
  802138:	81800417 	ldw	r6,16(r16)
  80213c:	89e3c83a 	sub	r17,r17,r7
  802140:	b46d883a 	add	r22,r22,r17
  802144:	0027883a 	mov	r19,zero
  802148:	05c00044 	movi	r23,1
  80214c:	003f8b06 	br	801f7c <_fseek_r+0xb8>
  802150:	80801317 	ldw	r2,76(r16)
  802154:	81400717 	ldw	r5,28(r16)
  802158:	9009883a 	mov	r4,r18
  80215c:	0085c83a 	sub	r2,zero,r2
  802160:	a0a2703a 	and	r17,r20,r2
  802164:	880d883a 	mov	r6,r17
  802168:	000f883a 	mov	r7,zero
  80216c:	a83ee83a 	callr	r21
  802170:	00ffffc4 	movi	r3,-1
  802174:	10ff8d26 	beq	r2,r3,801fac <_fseek_r+0xe8>
  802178:	80800417 	ldw	r2,16(r16)
  80217c:	81400c17 	ldw	r5,48(r16)
  802180:	80000115 	stw	zero,4(r16)
  802184:	80800015 	stw	r2,0(r16)
  802188:	28000526 	beq	r5,zero,8021a0 <_fseek_r+0x2dc>
  80218c:	80801004 	addi	r2,r16,64
  802190:	28800226 	beq	r5,r2,80219c <_fseek_r+0x2d8>
  802194:	9009883a 	mov	r4,r18
  802198:	0801bb00 	call	801bb0 <_free_r>
  80219c:	80000c15 	stw	zero,48(r16)
  8021a0:	8080030b 	ldhu	r2,12(r16)
  8021a4:	a463c83a 	sub	r17,r20,r17
  8021a8:	10bff7cc 	andi	r2,r2,65503
  8021ac:	8080030d 	sth	r2,12(r16)
  8021b0:	88000c1e 	bne	r17,zero,8021e4 <_fseek_r+0x320>
  8021b4:	0009883a 	mov	r4,zero
  8021b8:	003f6106 	br	801f40 <_fseek_r+0x7c>
  8021bc:	81800417 	ldw	r6,16(r16)
  8021c0:	003fdf06 	br	802140 <_fseek_r+0x27c>
  8021c4:	8140038f 	ldh	r5,14(r16)
  8021c8:	9009883a 	mov	r4,r18
  8021cc:	d80d883a 	mov	r6,sp
  8021d0:	08023240 	call	802324 <_fstat_r>
  8021d4:	103f751e 	bne	r2,zero,801fac <_fseek_r+0xe8>
  8021d8:	d8800417 	ldw	r2,16(sp)
  8021dc:	b0a9883a 	add	r20,r22,r2
  8021e0:	003f8906 	br	802008 <_fseek_r+0x144>
  8021e4:	9009883a 	mov	r4,r18
  8021e8:	800b883a 	mov	r5,r16
  8021ec:	0803d1c0 	call	803d1c <__srefill_r>
  8021f0:	103f6e1e 	bne	r2,zero,801fac <_fseek_r+0xe8>
  8021f4:	80c00117 	ldw	r3,4(r16)
  8021f8:	1c7f6c36 	bltu	r3,r17,801fac <_fseek_r+0xe8>
  8021fc:	80800017 	ldw	r2,0(r16)
  802200:	1c47c83a 	sub	r3,r3,r17
  802204:	0009883a 	mov	r4,zero
  802208:	1445883a 	add	r2,r2,r17
  80220c:	80c00115 	stw	r3,4(r16)
  802210:	80800015 	stw	r2,0(r16)
  802214:	003f4a06 	br	801f40 <_fseek_r+0x7c>
  802218:	9009883a 	mov	r4,r18
  80221c:	800b883a 	mov	r5,r16
  802220:	08029b40 	call	8029b4 <__smakebuf_r>
  802224:	003f5606 	br	801f80 <_fseek_r+0xbc>
  802228:	8100030b 	ldhu	r4,12(r16)
  80222c:	80c00117 	ldw	r3,4(r16)
  802230:	80800017 	ldw	r2,0(r16)
  802234:	81800417 	ldw	r6,16(r16)
  802238:	1185c83a 	sub	r2,r2,r6
  80223c:	10cf883a 	add	r7,r2,r3
  802240:	8887c83a 	sub	r3,r17,r2
  802244:	003f8206 	br	802050 <_fseek_r+0x18c>
  802248:	81400717 	ldw	r5,28(r16)
  80224c:	b00d883a 	mov	r6,r22
  802250:	980f883a 	mov	r7,r19
  802254:	9009883a 	mov	r4,r18
  802258:	a83ee83a 	callr	r21
  80225c:	00ffffc4 	movi	r3,-1
  802260:	10ff5626 	beq	r2,r3,801fbc <_fseek_r+0xf8>
  802264:	81400c17 	ldw	r5,48(r16)
  802268:	28000526 	beq	r5,zero,802280 <_fseek_r+0x3bc>
  80226c:	80801004 	addi	r2,r16,64
  802270:	28800226 	beq	r5,r2,80227c <_fseek_r+0x3b8>
  802274:	9009883a 	mov	r4,r18
  802278:	0801bb00 	call	801bb0 <_free_r>
  80227c:	80000c15 	stw	zero,48(r16)
  802280:	8080030b 	ldhu	r2,12(r16)
  802284:	80c00417 	ldw	r3,16(r16)
  802288:	0009883a 	mov	r4,zero
  80228c:	10bdf7cc 	andi	r2,r2,63455
  802290:	8080030d 	sth	r2,12(r16)
  802294:	80c00015 	stw	r3,0(r16)
  802298:	80000115 	stw	zero,4(r16)
  80229c:	003f2806 	br	801f40 <_fseek_r+0x7c>
  8022a0:	81400717 	ldw	r5,28(r16)
  8022a4:	000d883a 	mov	r6,zero
  8022a8:	9009883a 	mov	r4,r18
  8022ac:	01c00044 	movi	r7,1
  8022b0:	a83ee83a 	callr	r21
  8022b4:	100d883a 	mov	r6,r2
  8022b8:	00bfffc4 	movi	r2,-1
  8022bc:	30bf3b26 	beq	r6,r2,801fac <_fseek_r+0xe8>
  8022c0:	8100030b 	ldhu	r4,12(r16)
  8022c4:	003f5606 	br	802020 <_fseek_r+0x15c>
  8022c8:	00800744 	movi	r2,29
  8022cc:	013fffc4 	movi	r4,-1
  8022d0:	90800015 	stw	r2,0(r18)
  8022d4:	003f1a06 	br	801f40 <_fseek_r+0x7c>
  8022d8:	81400717 	ldw	r5,28(r16)
  8022dc:	980f883a 	mov	r7,r19
  8022e0:	9009883a 	mov	r4,r18
  8022e4:	000d883a 	mov	r6,zero
  8022e8:	a83ee83a 	callr	r21
  8022ec:	1023883a 	mov	r17,r2
  8022f0:	00bfffc4 	movi	r2,-1
  8022f4:	88bf3126 	beq	r17,r2,801fbc <_fseek_r+0xf8>
  8022f8:	8100030b 	ldhu	r4,12(r16)
  8022fc:	003f7006 	br	8020c0 <_fseek_r+0x1fc>

00802300 <fseek>:
  802300:	00802074 	movhi	r2,129
  802304:	109c4f04 	addi	r2,r2,28988
  802308:	2013883a 	mov	r9,r4
  80230c:	11000017 	ldw	r4,0(r2)
  802310:	2805883a 	mov	r2,r5
  802314:	300f883a 	mov	r7,r6
  802318:	480b883a 	mov	r5,r9
  80231c:	100d883a 	mov	r6,r2
  802320:	0801ec41 	jmpi	801ec4 <_fseek_r>

00802324 <_fstat_r>:
  802324:	defffd04 	addi	sp,sp,-12
  802328:	dc000015 	stw	r16,0(sp)
  80232c:	040020b4 	movhi	r16,130
  802330:	8423a004 	addi	r16,r16,-29056
  802334:	dc400115 	stw	r17,4(sp)
  802338:	80000015 	stw	zero,0(r16)
  80233c:	2023883a 	mov	r17,r4
  802340:	2809883a 	mov	r4,r5
  802344:	300b883a 	mov	r5,r6
  802348:	dfc00215 	stw	ra,8(sp)
  80234c:	08109300 	call	810930 <fstat>
  802350:	1007883a 	mov	r3,r2
  802354:	00bfffc4 	movi	r2,-1
  802358:	18800626 	beq	r3,r2,802374 <_fstat_r+0x50>
  80235c:	1805883a 	mov	r2,r3
  802360:	dfc00217 	ldw	ra,8(sp)
  802364:	dc400117 	ldw	r17,4(sp)
  802368:	dc000017 	ldw	r16,0(sp)
  80236c:	dec00304 	addi	sp,sp,12
  802370:	f800283a 	ret
  802374:	80800017 	ldw	r2,0(r16)
  802378:	103ff826 	beq	r2,zero,80235c <_fstat_r+0x38>
  80237c:	88800015 	stw	r2,0(r17)
  802380:	1805883a 	mov	r2,r3
  802384:	dfc00217 	ldw	ra,8(sp)
  802388:	dc400117 	ldw	r17,4(sp)
  80238c:	dc000017 	ldw	r16,0(sp)
  802390:	dec00304 	addi	sp,sp,12
  802394:	f800283a 	ret

00802398 <__sfvwrite_r>:
  802398:	30800217 	ldw	r2,8(r6)
  80239c:	defff504 	addi	sp,sp,-44
  8023a0:	df000915 	stw	fp,36(sp)
  8023a4:	dd800715 	stw	r22,28(sp)
  8023a8:	dc800315 	stw	r18,12(sp)
  8023ac:	dfc00a15 	stw	ra,40(sp)
  8023b0:	ddc00815 	stw	r23,32(sp)
  8023b4:	dd400615 	stw	r21,24(sp)
  8023b8:	dd000515 	stw	r20,20(sp)
  8023bc:	dcc00415 	stw	r19,16(sp)
  8023c0:	dc400215 	stw	r17,8(sp)
  8023c4:	dc000115 	stw	r16,4(sp)
  8023c8:	302d883a 	mov	r22,r6
  8023cc:	2039883a 	mov	fp,r4
  8023d0:	2825883a 	mov	r18,r5
  8023d4:	10001c26 	beq	r2,zero,802448 <__sfvwrite_r+0xb0>
  8023d8:	29c0030b 	ldhu	r7,12(r5)
  8023dc:	3880020c 	andi	r2,r7,8
  8023e0:	10002726 	beq	r2,zero,802480 <__sfvwrite_r+0xe8>
  8023e4:	28800417 	ldw	r2,16(r5)
  8023e8:	10002526 	beq	r2,zero,802480 <__sfvwrite_r+0xe8>
  8023ec:	3880008c 	andi	r2,r7,2
  8023f0:	b5400017 	ldw	r21,0(r22)
  8023f4:	10002826 	beq	r2,zero,802498 <__sfvwrite_r+0x100>
  8023f8:	0021883a 	mov	r16,zero
  8023fc:	0023883a 	mov	r17,zero
  802400:	880d883a 	mov	r6,r17
  802404:	e009883a 	mov	r4,fp
  802408:	00810004 	movi	r2,1024
  80240c:	80006e26 	beq	r16,zero,8025c8 <__sfvwrite_r+0x230>
  802410:	800f883a 	mov	r7,r16
  802414:	91400717 	ldw	r5,28(r18)
  802418:	1400012e 	bgeu	r2,r16,802420 <__sfvwrite_r+0x88>
  80241c:	100f883a 	mov	r7,r2
  802420:	90c00917 	ldw	r3,36(r18)
  802424:	183ee83a 	callr	r3
  802428:	1007883a 	mov	r3,r2
  80242c:	80a1c83a 	sub	r16,r16,r2
  802430:	88a3883a 	add	r17,r17,r2
  802434:	00806d0e 	bge	zero,r2,8025ec <__sfvwrite_r+0x254>
  802438:	b0800217 	ldw	r2,8(r22)
  80243c:	10c5c83a 	sub	r2,r2,r3
  802440:	b0800215 	stw	r2,8(r22)
  802444:	103fee1e 	bne	r2,zero,802400 <__sfvwrite_r+0x68>
  802448:	0009883a 	mov	r4,zero
  80244c:	2005883a 	mov	r2,r4
  802450:	dfc00a17 	ldw	ra,40(sp)
  802454:	df000917 	ldw	fp,36(sp)
  802458:	ddc00817 	ldw	r23,32(sp)
  80245c:	dd800717 	ldw	r22,28(sp)
  802460:	dd400617 	ldw	r21,24(sp)
  802464:	dd000517 	ldw	r20,20(sp)
  802468:	dcc00417 	ldw	r19,16(sp)
  80246c:	dc800317 	ldw	r18,12(sp)
  802470:	dc400217 	ldw	r17,8(sp)
  802474:	dc000117 	ldw	r16,4(sp)
  802478:	dec00b04 	addi	sp,sp,44
  80247c:	f800283a 	ret
  802480:	0807a940 	call	807a94 <__swsetup_r>
  802484:	1000e41e 	bne	r2,zero,802818 <__sfvwrite_r+0x480>
  802488:	91c0030b 	ldhu	r7,12(r18)
  80248c:	b5400017 	ldw	r21,0(r22)
  802490:	3880008c 	andi	r2,r7,2
  802494:	103fd81e 	bne	r2,zero,8023f8 <__sfvwrite_r+0x60>
  802498:	3880004c 	andi	r2,r7,1
  80249c:	1005003a 	cmpeq	r2,r2,zero
  8024a0:	10005726 	beq	r2,zero,802600 <__sfvwrite_r+0x268>
  8024a4:	0029883a 	mov	r20,zero
  8024a8:	002f883a 	mov	r23,zero
  8024ac:	a0004226 	beq	r20,zero,8025b8 <__sfvwrite_r+0x220>
  8024b0:	3880800c 	andi	r2,r7,512
  8024b4:	94000217 	ldw	r16,8(r18)
  8024b8:	10008b26 	beq	r2,zero,8026e8 <__sfvwrite_r+0x350>
  8024bc:	800d883a 	mov	r6,r16
  8024c0:	a400a536 	bltu	r20,r16,802758 <__sfvwrite_r+0x3c0>
  8024c4:	3881200c 	andi	r2,r7,1152
  8024c8:	10002726 	beq	r2,zero,802568 <__sfvwrite_r+0x1d0>
  8024cc:	90800517 	ldw	r2,20(r18)
  8024d0:	92000417 	ldw	r8,16(r18)
  8024d4:	91400017 	ldw	r5,0(r18)
  8024d8:	1087883a 	add	r3,r2,r2
  8024dc:	1887883a 	add	r3,r3,r2
  8024e0:	1808d7fa 	srli	r4,r3,31
  8024e4:	2a21c83a 	sub	r16,r5,r8
  8024e8:	80800044 	addi	r2,r16,1
  8024ec:	20c9883a 	add	r4,r4,r3
  8024f0:	2027d07a 	srai	r19,r4,1
  8024f4:	a085883a 	add	r2,r20,r2
  8024f8:	980d883a 	mov	r6,r19
  8024fc:	9880022e 	bgeu	r19,r2,802508 <__sfvwrite_r+0x170>
  802500:	1027883a 	mov	r19,r2
  802504:	100d883a 	mov	r6,r2
  802508:	3881000c 	andi	r2,r7,1024
  80250c:	1000b826 	beq	r2,zero,8027f0 <__sfvwrite_r+0x458>
  802510:	300b883a 	mov	r5,r6
  802514:	e009883a 	mov	r4,fp
  802518:	0802b480 	call	802b48 <_malloc_r>
  80251c:	10003126 	beq	r2,zero,8025e4 <__sfvwrite_r+0x24c>
  802520:	91400417 	ldw	r5,16(r18)
  802524:	1009883a 	mov	r4,r2
  802528:	800d883a 	mov	r6,r16
  80252c:	1023883a 	mov	r17,r2
  802530:	080336c0 	call	80336c <memcpy>
  802534:	90c0030b 	ldhu	r3,12(r18)
  802538:	00beffc4 	movi	r2,-1025
  80253c:	1886703a 	and	r3,r3,r2
  802540:	18c02014 	ori	r3,r3,128
  802544:	90c0030d 	sth	r3,12(r18)
  802548:	9c07c83a 	sub	r3,r19,r16
  80254c:	8c05883a 	add	r2,r17,r16
  802550:	a00d883a 	mov	r6,r20
  802554:	a021883a 	mov	r16,r20
  802558:	90800015 	stw	r2,0(r18)
  80255c:	90c00215 	stw	r3,8(r18)
  802560:	94400415 	stw	r17,16(r18)
  802564:	94c00515 	stw	r19,20(r18)
  802568:	91000017 	ldw	r4,0(r18)
  80256c:	b80b883a 	mov	r5,r23
  802570:	a023883a 	mov	r17,r20
  802574:	080340c0 	call	80340c <memmove>
  802578:	90c00217 	ldw	r3,8(r18)
  80257c:	90800017 	ldw	r2,0(r18)
  802580:	a027883a 	mov	r19,r20
  802584:	1c07c83a 	sub	r3,r3,r16
  802588:	1405883a 	add	r2,r2,r16
  80258c:	90c00215 	stw	r3,8(r18)
  802590:	a021883a 	mov	r16,r20
  802594:	90800015 	stw	r2,0(r18)
  802598:	b0800217 	ldw	r2,8(r22)
  80259c:	1405c83a 	sub	r2,r2,r16
  8025a0:	b0800215 	stw	r2,8(r22)
  8025a4:	103fa826 	beq	r2,zero,802448 <__sfvwrite_r+0xb0>
  8025a8:	a469c83a 	sub	r20,r20,r17
  8025ac:	91c0030b 	ldhu	r7,12(r18)
  8025b0:	bcef883a 	add	r23,r23,r19
  8025b4:	a03fbe1e 	bne	r20,zero,8024b0 <__sfvwrite_r+0x118>
  8025b8:	adc00017 	ldw	r23,0(r21)
  8025bc:	ad000117 	ldw	r20,4(r21)
  8025c0:	ad400204 	addi	r21,r21,8
  8025c4:	003fb906 	br	8024ac <__sfvwrite_r+0x114>
  8025c8:	ac400017 	ldw	r17,0(r21)
  8025cc:	ac000117 	ldw	r16,4(r21)
  8025d0:	ad400204 	addi	r21,r21,8
  8025d4:	003f8a06 	br	802400 <__sfvwrite_r+0x68>
  8025d8:	91400417 	ldw	r5,16(r18)
  8025dc:	e009883a 	mov	r4,fp
  8025e0:	0801bb00 	call	801bb0 <_free_r>
  8025e4:	00800304 	movi	r2,12
  8025e8:	e0800015 	stw	r2,0(fp)
  8025ec:	9080030b 	ldhu	r2,12(r18)
  8025f0:	013fffc4 	movi	r4,-1
  8025f4:	10801014 	ori	r2,r2,64
  8025f8:	9080030d 	sth	r2,12(r18)
  8025fc:	003f9306 	br	80244c <__sfvwrite_r+0xb4>
  802600:	0027883a 	mov	r19,zero
  802604:	002f883a 	mov	r23,zero
  802608:	d8000015 	stw	zero,0(sp)
  80260c:	0029883a 	mov	r20,zero
  802610:	98001e26 	beq	r19,zero,80268c <__sfvwrite_r+0x2f4>
  802614:	d8c00017 	ldw	r3,0(sp)
  802618:	1804c03a 	cmpne	r2,r3,zero
  80261c:	10005e26 	beq	r2,zero,802798 <__sfvwrite_r+0x400>
  802620:	9821883a 	mov	r16,r19
  802624:	a4c0012e 	bgeu	r20,r19,80262c <__sfvwrite_r+0x294>
  802628:	a021883a 	mov	r16,r20
  80262c:	91000017 	ldw	r4,0(r18)
  802630:	90800417 	ldw	r2,16(r18)
  802634:	91800217 	ldw	r6,8(r18)
  802638:	91c00517 	ldw	r7,20(r18)
  80263c:	1100022e 	bgeu	r2,r4,802648 <__sfvwrite_r+0x2b0>
  802640:	31e3883a 	add	r17,r6,r7
  802644:	8c001616 	blt	r17,r16,8026a0 <__sfvwrite_r+0x308>
  802648:	81c03816 	blt	r16,r7,80272c <__sfvwrite_r+0x394>
  80264c:	90c00917 	ldw	r3,36(r18)
  802650:	91400717 	ldw	r5,28(r18)
  802654:	e009883a 	mov	r4,fp
  802658:	b80d883a 	mov	r6,r23
  80265c:	183ee83a 	callr	r3
  802660:	1023883a 	mov	r17,r2
  802664:	00bfe10e 	bge	zero,r2,8025ec <__sfvwrite_r+0x254>
  802668:	a469c83a 	sub	r20,r20,r17
  80266c:	a0001826 	beq	r20,zero,8026d0 <__sfvwrite_r+0x338>
  802670:	b0800217 	ldw	r2,8(r22)
  802674:	1445c83a 	sub	r2,r2,r17
  802678:	b0800215 	stw	r2,8(r22)
  80267c:	103f7226 	beq	r2,zero,802448 <__sfvwrite_r+0xb0>
  802680:	9c67c83a 	sub	r19,r19,r17
  802684:	bc6f883a 	add	r23,r23,r17
  802688:	983fe21e 	bne	r19,zero,802614 <__sfvwrite_r+0x27c>
  80268c:	adc00017 	ldw	r23,0(r21)
  802690:	acc00117 	ldw	r19,4(r21)
  802694:	ad400204 	addi	r21,r21,8
  802698:	d8000015 	stw	zero,0(sp)
  80269c:	003fdc06 	br	802610 <__sfvwrite_r+0x278>
  8026a0:	b80b883a 	mov	r5,r23
  8026a4:	880d883a 	mov	r6,r17
  8026a8:	080340c0 	call	80340c <memmove>
  8026ac:	90c00017 	ldw	r3,0(r18)
  8026b0:	e009883a 	mov	r4,fp
  8026b4:	900b883a 	mov	r5,r18
  8026b8:	1c47883a 	add	r3,r3,r17
  8026bc:	90c00015 	stw	r3,0(r18)
  8026c0:	080126c0 	call	80126c <_fflush_r>
  8026c4:	103fc91e 	bne	r2,zero,8025ec <__sfvwrite_r+0x254>
  8026c8:	a469c83a 	sub	r20,r20,r17
  8026cc:	a03fe81e 	bne	r20,zero,802670 <__sfvwrite_r+0x2d8>
  8026d0:	e009883a 	mov	r4,fp
  8026d4:	900b883a 	mov	r5,r18
  8026d8:	080126c0 	call	80126c <_fflush_r>
  8026dc:	103fc31e 	bne	r2,zero,8025ec <__sfvwrite_r+0x254>
  8026e0:	d8000015 	stw	zero,0(sp)
  8026e4:	003fe206 	br	802670 <__sfvwrite_r+0x2d8>
  8026e8:	91000017 	ldw	r4,0(r18)
  8026ec:	90800417 	ldw	r2,16(r18)
  8026f0:	1100022e 	bgeu	r2,r4,8026fc <__sfvwrite_r+0x364>
  8026f4:	8023883a 	mov	r17,r16
  8026f8:	85003136 	bltu	r16,r20,8027c0 <__sfvwrite_r+0x428>
  8026fc:	91c00517 	ldw	r7,20(r18)
  802700:	a1c01836 	bltu	r20,r7,802764 <__sfvwrite_r+0x3cc>
  802704:	90c00917 	ldw	r3,36(r18)
  802708:	91400717 	ldw	r5,28(r18)
  80270c:	e009883a 	mov	r4,fp
  802710:	b80d883a 	mov	r6,r23
  802714:	183ee83a 	callr	r3
  802718:	1021883a 	mov	r16,r2
  80271c:	00bfb30e 	bge	zero,r2,8025ec <__sfvwrite_r+0x254>
  802720:	1023883a 	mov	r17,r2
  802724:	1027883a 	mov	r19,r2
  802728:	003f9b06 	br	802598 <__sfvwrite_r+0x200>
  80272c:	b80b883a 	mov	r5,r23
  802730:	800d883a 	mov	r6,r16
  802734:	080340c0 	call	80340c <memmove>
  802738:	90c00217 	ldw	r3,8(r18)
  80273c:	90800017 	ldw	r2,0(r18)
  802740:	8023883a 	mov	r17,r16
  802744:	1c07c83a 	sub	r3,r3,r16
  802748:	1405883a 	add	r2,r2,r16
  80274c:	90c00215 	stw	r3,8(r18)
  802750:	90800015 	stw	r2,0(r18)
  802754:	003fc406 	br	802668 <__sfvwrite_r+0x2d0>
  802758:	a00d883a 	mov	r6,r20
  80275c:	a021883a 	mov	r16,r20
  802760:	003f8106 	br	802568 <__sfvwrite_r+0x1d0>
  802764:	b80b883a 	mov	r5,r23
  802768:	a00d883a 	mov	r6,r20
  80276c:	080340c0 	call	80340c <memmove>
  802770:	90c00217 	ldw	r3,8(r18)
  802774:	90800017 	ldw	r2,0(r18)
  802778:	a021883a 	mov	r16,r20
  80277c:	1d07c83a 	sub	r3,r3,r20
  802780:	1505883a 	add	r2,r2,r20
  802784:	a023883a 	mov	r17,r20
  802788:	a027883a 	mov	r19,r20
  80278c:	90c00215 	stw	r3,8(r18)
  802790:	90800015 	stw	r2,0(r18)
  802794:	003f8006 	br	802598 <__sfvwrite_r+0x200>
  802798:	b809883a 	mov	r4,r23
  80279c:	01400284 	movi	r5,10
  8027a0:	980d883a 	mov	r6,r19
  8027a4:	08032880 	call	803288 <memchr>
  8027a8:	10001726 	beq	r2,zero,802808 <__sfvwrite_r+0x470>
  8027ac:	15c5c83a 	sub	r2,r2,r23
  8027b0:	15000044 	addi	r20,r2,1
  8027b4:	00800044 	movi	r2,1
  8027b8:	d8800015 	stw	r2,0(sp)
  8027bc:	003f9806 	br	802620 <__sfvwrite_r+0x288>
  8027c0:	b80b883a 	mov	r5,r23
  8027c4:	800d883a 	mov	r6,r16
  8027c8:	080340c0 	call	80340c <memmove>
  8027cc:	90c00017 	ldw	r3,0(r18)
  8027d0:	e009883a 	mov	r4,fp
  8027d4:	900b883a 	mov	r5,r18
  8027d8:	1c07883a 	add	r3,r3,r16
  8027dc:	90c00015 	stw	r3,0(r18)
  8027e0:	8027883a 	mov	r19,r16
  8027e4:	080126c0 	call	80126c <_fflush_r>
  8027e8:	103f6b26 	beq	r2,zero,802598 <__sfvwrite_r+0x200>
  8027ec:	003f7f06 	br	8025ec <__sfvwrite_r+0x254>
  8027f0:	400b883a 	mov	r5,r8
  8027f4:	e009883a 	mov	r4,fp
  8027f8:	08037280 	call	803728 <_realloc_r>
  8027fc:	103f7626 	beq	r2,zero,8025d8 <__sfvwrite_r+0x240>
  802800:	1023883a 	mov	r17,r2
  802804:	003f5006 	br	802548 <__sfvwrite_r+0x1b0>
  802808:	00c00044 	movi	r3,1
  80280c:	9d000044 	addi	r20,r19,1
  802810:	d8c00015 	stw	r3,0(sp)
  802814:	003f8206 	br	802620 <__sfvwrite_r+0x288>
  802818:	9080030b 	ldhu	r2,12(r18)
  80281c:	00c00244 	movi	r3,9
  802820:	013fffc4 	movi	r4,-1
  802824:	10801014 	ori	r2,r2,64
  802828:	9080030d 	sth	r2,12(r18)
  80282c:	e0c00015 	stw	r3,0(fp)
  802830:	003f0606 	br	80244c <__sfvwrite_r+0xb4>

00802834 <_fwalk_reent>:
  802834:	defff704 	addi	sp,sp,-36
  802838:	dcc00315 	stw	r19,12(sp)
  80283c:	24c0b804 	addi	r19,r4,736
  802840:	dd800615 	stw	r22,24(sp)
  802844:	dd400515 	stw	r21,20(sp)
  802848:	dfc00815 	stw	ra,32(sp)
  80284c:	ddc00715 	stw	r23,28(sp)
  802850:	dd000415 	stw	r20,16(sp)
  802854:	dc800215 	stw	r18,8(sp)
  802858:	dc400115 	stw	r17,4(sp)
  80285c:	dc000015 	stw	r16,0(sp)
  802860:	202b883a 	mov	r21,r4
  802864:	282d883a 	mov	r22,r5
  802868:	080161c0 	call	80161c <__sfp_lock_acquire>
  80286c:	98002126 	beq	r19,zero,8028f4 <_fwalk_reent+0xc0>
  802870:	002f883a 	mov	r23,zero
  802874:	9c800117 	ldw	r18,4(r19)
  802878:	9c000217 	ldw	r16,8(r19)
  80287c:	90bfffc4 	addi	r2,r18,-1
  802880:	10000d16 	blt	r2,zero,8028b8 <_fwalk_reent+0x84>
  802884:	0023883a 	mov	r17,zero
  802888:	053fffc4 	movi	r20,-1
  80288c:	8080030f 	ldh	r2,12(r16)
  802890:	8c400044 	addi	r17,r17,1
  802894:	10000626 	beq	r2,zero,8028b0 <_fwalk_reent+0x7c>
  802898:	8080038f 	ldh	r2,14(r16)
  80289c:	800b883a 	mov	r5,r16
  8028a0:	a809883a 	mov	r4,r21
  8028a4:	15000226 	beq	r2,r20,8028b0 <_fwalk_reent+0x7c>
  8028a8:	b03ee83a 	callr	r22
  8028ac:	b8aeb03a 	or	r23,r23,r2
  8028b0:	84001704 	addi	r16,r16,92
  8028b4:	947ff51e 	bne	r18,r17,80288c <_fwalk_reent+0x58>
  8028b8:	9cc00017 	ldw	r19,0(r19)
  8028bc:	983fed1e 	bne	r19,zero,802874 <_fwalk_reent+0x40>
  8028c0:	08016200 	call	801620 <__sfp_lock_release>
  8028c4:	b805883a 	mov	r2,r23
  8028c8:	dfc00817 	ldw	ra,32(sp)
  8028cc:	ddc00717 	ldw	r23,28(sp)
  8028d0:	dd800617 	ldw	r22,24(sp)
  8028d4:	dd400517 	ldw	r21,20(sp)
  8028d8:	dd000417 	ldw	r20,16(sp)
  8028dc:	dcc00317 	ldw	r19,12(sp)
  8028e0:	dc800217 	ldw	r18,8(sp)
  8028e4:	dc400117 	ldw	r17,4(sp)
  8028e8:	dc000017 	ldw	r16,0(sp)
  8028ec:	dec00904 	addi	sp,sp,36
  8028f0:	f800283a 	ret
  8028f4:	002f883a 	mov	r23,zero
  8028f8:	003ff106 	br	8028c0 <_fwalk_reent+0x8c>

008028fc <_fwalk>:
  8028fc:	defff804 	addi	sp,sp,-32
  802900:	dcc00315 	stw	r19,12(sp)
  802904:	24c0b804 	addi	r19,r4,736
  802908:	dd400515 	stw	r21,20(sp)
  80290c:	dfc00715 	stw	ra,28(sp)
  802910:	dd800615 	stw	r22,24(sp)
  802914:	dd000415 	stw	r20,16(sp)
  802918:	dc800215 	stw	r18,8(sp)
  80291c:	dc400115 	stw	r17,4(sp)
  802920:	dc000015 	stw	r16,0(sp)
  802924:	282b883a 	mov	r21,r5
  802928:	080161c0 	call	80161c <__sfp_lock_acquire>
  80292c:	98001f26 	beq	r19,zero,8029ac <_fwalk+0xb0>
  802930:	002d883a 	mov	r22,zero
  802934:	9c800117 	ldw	r18,4(r19)
  802938:	9c000217 	ldw	r16,8(r19)
  80293c:	90bfffc4 	addi	r2,r18,-1
  802940:	10000c16 	blt	r2,zero,802974 <_fwalk+0x78>
  802944:	0023883a 	mov	r17,zero
  802948:	053fffc4 	movi	r20,-1
  80294c:	8080030f 	ldh	r2,12(r16)
  802950:	8c400044 	addi	r17,r17,1
  802954:	10000526 	beq	r2,zero,80296c <_fwalk+0x70>
  802958:	8080038f 	ldh	r2,14(r16)
  80295c:	8009883a 	mov	r4,r16
  802960:	15000226 	beq	r2,r20,80296c <_fwalk+0x70>
  802964:	a83ee83a 	callr	r21
  802968:	b0acb03a 	or	r22,r22,r2
  80296c:	84001704 	addi	r16,r16,92
  802970:	947ff61e 	bne	r18,r17,80294c <_fwalk+0x50>
  802974:	9cc00017 	ldw	r19,0(r19)
  802978:	983fee1e 	bne	r19,zero,802934 <_fwalk+0x38>
  80297c:	08016200 	call	801620 <__sfp_lock_release>
  802980:	b005883a 	mov	r2,r22
  802984:	dfc00717 	ldw	ra,28(sp)
  802988:	dd800617 	ldw	r22,24(sp)
  80298c:	dd400517 	ldw	r21,20(sp)
  802990:	dd000417 	ldw	r20,16(sp)
  802994:	dcc00317 	ldw	r19,12(sp)
  802998:	dc800217 	ldw	r18,8(sp)
  80299c:	dc400117 	ldw	r17,4(sp)
  8029a0:	dc000017 	ldw	r16,0(sp)
  8029a4:	dec00804 	addi	sp,sp,32
  8029a8:	f800283a 	ret
  8029ac:	002d883a 	mov	r22,zero
  8029b0:	003ff206 	br	80297c <_fwalk+0x80>

008029b4 <__smakebuf_r>:
  8029b4:	2880030b 	ldhu	r2,12(r5)
  8029b8:	deffed04 	addi	sp,sp,-76
  8029bc:	dc401015 	stw	r17,64(sp)
  8029c0:	1080008c 	andi	r2,r2,2
  8029c4:	dc000f15 	stw	r16,60(sp)
  8029c8:	dfc01215 	stw	ra,72(sp)
  8029cc:	dc801115 	stw	r18,68(sp)
  8029d0:	2821883a 	mov	r16,r5
  8029d4:	2023883a 	mov	r17,r4
  8029d8:	10000b26 	beq	r2,zero,802a08 <__smakebuf_r+0x54>
  8029dc:	28c010c4 	addi	r3,r5,67
  8029e0:	00800044 	movi	r2,1
  8029e4:	28800515 	stw	r2,20(r5)
  8029e8:	28c00415 	stw	r3,16(r5)
  8029ec:	28c00015 	stw	r3,0(r5)
  8029f0:	dfc01217 	ldw	ra,72(sp)
  8029f4:	dc801117 	ldw	r18,68(sp)
  8029f8:	dc401017 	ldw	r17,64(sp)
  8029fc:	dc000f17 	ldw	r16,60(sp)
  802a00:	dec01304 	addi	sp,sp,76
  802a04:	f800283a 	ret
  802a08:	2940038f 	ldh	r5,14(r5)
  802a0c:	28002116 	blt	r5,zero,802a94 <__smakebuf_r+0xe0>
  802a10:	d80d883a 	mov	r6,sp
  802a14:	08023240 	call	802324 <_fstat_r>
  802a18:	10001e16 	blt	r2,zero,802a94 <__smakebuf_r+0xe0>
  802a1c:	d8800117 	ldw	r2,4(sp)
  802a20:	00e00014 	movui	r3,32768
  802a24:	113c000c 	andi	r4,r2,61440
  802a28:	20c03126 	beq	r4,r3,802af0 <__smakebuf_r+0x13c>
  802a2c:	8080030b 	ldhu	r2,12(r16)
  802a30:	00c80004 	movi	r3,8192
  802a34:	10820014 	ori	r2,r2,2048
  802a38:	8080030d 	sth	r2,12(r16)
  802a3c:	20c01e26 	beq	r4,r3,802ab8 <__smakebuf_r+0x104>
  802a40:	04810004 	movi	r18,1024
  802a44:	8809883a 	mov	r4,r17
  802a48:	900b883a 	mov	r5,r18
  802a4c:	0802b480 	call	802b48 <_malloc_r>
  802a50:	1009883a 	mov	r4,r2
  802a54:	10003126 	beq	r2,zero,802b1c <__smakebuf_r+0x168>
  802a58:	80c0030b 	ldhu	r3,12(r16)
  802a5c:	00802034 	movhi	r2,128
  802a60:	1085c404 	addi	r2,r2,5904
  802a64:	88800f15 	stw	r2,60(r17)
  802a68:	18c02014 	ori	r3,r3,128
  802a6c:	84800515 	stw	r18,20(r16)
  802a70:	80c0030d 	sth	r3,12(r16)
  802a74:	81000415 	stw	r4,16(r16)
  802a78:	81000015 	stw	r4,0(r16)
  802a7c:	dfc01217 	ldw	ra,72(sp)
  802a80:	dc801117 	ldw	r18,68(sp)
  802a84:	dc401017 	ldw	r17,64(sp)
  802a88:	dc000f17 	ldw	r16,60(sp)
  802a8c:	dec01304 	addi	sp,sp,76
  802a90:	f800283a 	ret
  802a94:	80c0030b 	ldhu	r3,12(r16)
  802a98:	1880200c 	andi	r2,r3,128
  802a9c:	10000426 	beq	r2,zero,802ab0 <__smakebuf_r+0xfc>
  802aa0:	04801004 	movi	r18,64
  802aa4:	18820014 	ori	r2,r3,2048
  802aa8:	8080030d 	sth	r2,12(r16)
  802aac:	003fe506 	br	802a44 <__smakebuf_r+0x90>
  802ab0:	04810004 	movi	r18,1024
  802ab4:	003ffb06 	br	802aa4 <__smakebuf_r+0xf0>
  802ab8:	8140038f 	ldh	r5,14(r16)
  802abc:	8809883a 	mov	r4,r17
  802ac0:	08096e80 	call	8096e8 <_isatty_r>
  802ac4:	103fde26 	beq	r2,zero,802a40 <__smakebuf_r+0x8c>
  802ac8:	8080030b 	ldhu	r2,12(r16)
  802acc:	80c010c4 	addi	r3,r16,67
  802ad0:	04810004 	movi	r18,1024
  802ad4:	10800054 	ori	r2,r2,1
  802ad8:	8080030d 	sth	r2,12(r16)
  802adc:	00800044 	movi	r2,1
  802ae0:	80c00415 	stw	r3,16(r16)
  802ae4:	80800515 	stw	r2,20(r16)
  802ae8:	80c00015 	stw	r3,0(r16)
  802aec:	003fd506 	br	802a44 <__smakebuf_r+0x90>
  802af0:	80c00a17 	ldw	r3,40(r16)
  802af4:	00802034 	movhi	r2,128
  802af8:	10906f04 	addi	r2,r2,16828
  802afc:	18bfcb1e 	bne	r3,r2,802a2c <__smakebuf_r+0x78>
  802b00:	8080030b 	ldhu	r2,12(r16)
  802b04:	00c10004 	movi	r3,1024
  802b08:	1825883a 	mov	r18,r3
  802b0c:	10c4b03a 	or	r2,r2,r3
  802b10:	8080030d 	sth	r2,12(r16)
  802b14:	80c01315 	stw	r3,76(r16)
  802b18:	003fca06 	br	802a44 <__smakebuf_r+0x90>
  802b1c:	8100030b 	ldhu	r4,12(r16)
  802b20:	2080800c 	andi	r2,r4,512
  802b24:	103fb21e 	bne	r2,zero,8029f0 <__smakebuf_r+0x3c>
  802b28:	80c010c4 	addi	r3,r16,67
  802b2c:	21000094 	ori	r4,r4,2
  802b30:	00800044 	movi	r2,1
  802b34:	80800515 	stw	r2,20(r16)
  802b38:	8100030d 	sth	r4,12(r16)
  802b3c:	80c00415 	stw	r3,16(r16)
  802b40:	80c00015 	stw	r3,0(r16)
  802b44:	003faa06 	br	8029f0 <__smakebuf_r+0x3c>

00802b48 <_malloc_r>:
  802b48:	defff604 	addi	sp,sp,-40
  802b4c:	28c002c4 	addi	r3,r5,11
  802b50:	00800584 	movi	r2,22
  802b54:	dc800215 	stw	r18,8(sp)
  802b58:	dfc00915 	stw	ra,36(sp)
  802b5c:	df000815 	stw	fp,32(sp)
  802b60:	ddc00715 	stw	r23,28(sp)
  802b64:	dd800615 	stw	r22,24(sp)
  802b68:	dd400515 	stw	r21,20(sp)
  802b6c:	dd000415 	stw	r20,16(sp)
  802b70:	dcc00315 	stw	r19,12(sp)
  802b74:	dc400115 	stw	r17,4(sp)
  802b78:	dc000015 	stw	r16,0(sp)
  802b7c:	2025883a 	mov	r18,r4
  802b80:	10c01236 	bltu	r2,r3,802bcc <_malloc_r+0x84>
  802b84:	04400404 	movi	r17,16
  802b88:	8940142e 	bgeu	r17,r5,802bdc <_malloc_r+0x94>
  802b8c:	00800304 	movi	r2,12
  802b90:	0007883a 	mov	r3,zero
  802b94:	90800015 	stw	r2,0(r18)
  802b98:	1805883a 	mov	r2,r3
  802b9c:	dfc00917 	ldw	ra,36(sp)
  802ba0:	df000817 	ldw	fp,32(sp)
  802ba4:	ddc00717 	ldw	r23,28(sp)
  802ba8:	dd800617 	ldw	r22,24(sp)
  802bac:	dd400517 	ldw	r21,20(sp)
  802bb0:	dd000417 	ldw	r20,16(sp)
  802bb4:	dcc00317 	ldw	r19,12(sp)
  802bb8:	dc800217 	ldw	r18,8(sp)
  802bbc:	dc400117 	ldw	r17,4(sp)
  802bc0:	dc000017 	ldw	r16,0(sp)
  802bc4:	dec00a04 	addi	sp,sp,40
  802bc8:	f800283a 	ret
  802bcc:	00bffe04 	movi	r2,-8
  802bd0:	18a2703a 	and	r17,r3,r2
  802bd4:	883fed16 	blt	r17,zero,802b8c <_malloc_r+0x44>
  802bd8:	897fec36 	bltu	r17,r5,802b8c <_malloc_r+0x44>
  802bdc:	9009883a 	mov	r4,r18
  802be0:	0810fec0 	call	810fec <__malloc_lock>
  802be4:	00807dc4 	movi	r2,503
  802be8:	14402b2e 	bgeu	r2,r17,802c98 <_malloc_r+0x150>
  802bec:	8806d27a 	srli	r3,r17,9
  802bf0:	18003f1e 	bne	r3,zero,802cf0 <_malloc_r+0x1a8>
  802bf4:	880cd0fa 	srli	r6,r17,3
  802bf8:	300490fa 	slli	r2,r6,3
  802bfc:	02c02074 	movhi	r11,129
  802c00:	5ad64104 	addi	r11,r11,22788
  802c04:	12cb883a 	add	r5,r2,r11
  802c08:	2c000317 	ldw	r16,12(r5)
  802c0c:	580f883a 	mov	r7,r11
  802c10:	2c00041e 	bne	r5,r16,802c24 <_malloc_r+0xdc>
  802c14:	00000a06 	br	802c40 <_malloc_r+0xf8>
  802c18:	1800860e 	bge	r3,zero,802e34 <_malloc_r+0x2ec>
  802c1c:	84000317 	ldw	r16,12(r16)
  802c20:	2c000726 	beq	r5,r16,802c40 <_malloc_r+0xf8>
  802c24:	80800117 	ldw	r2,4(r16)
  802c28:	00ffff04 	movi	r3,-4
  802c2c:	10c8703a 	and	r4,r2,r3
  802c30:	2447c83a 	sub	r3,r4,r17
  802c34:	008003c4 	movi	r2,15
  802c38:	10fff70e 	bge	r2,r3,802c18 <_malloc_r+0xd0>
  802c3c:	31bfffc4 	addi	r6,r6,-1
  802c40:	32400044 	addi	r9,r6,1
  802c44:	02802074 	movhi	r10,129
  802c48:	52964304 	addi	r10,r10,22796
  802c4c:	54000217 	ldw	r16,8(r10)
  802c50:	8280a026 	beq	r16,r10,802ed4 <_malloc_r+0x38c>
  802c54:	80800117 	ldw	r2,4(r16)
  802c58:	00ffff04 	movi	r3,-4
  802c5c:	10ca703a 	and	r5,r2,r3
  802c60:	2c4dc83a 	sub	r6,r5,r17
  802c64:	008003c4 	movi	r2,15
  802c68:	11808316 	blt	r2,r6,802e78 <_malloc_r+0x330>
  802c6c:	52800315 	stw	r10,12(r10)
  802c70:	52800215 	stw	r10,8(r10)
  802c74:	30002916 	blt	r6,zero,802d1c <_malloc_r+0x1d4>
  802c78:	8147883a 	add	r3,r16,r5
  802c7c:	18800117 	ldw	r2,4(r3)
  802c80:	9009883a 	mov	r4,r18
  802c84:	10800054 	ori	r2,r2,1
  802c88:	18800115 	stw	r2,4(r3)
  802c8c:	081100c0 	call	81100c <__malloc_unlock>
  802c90:	80c00204 	addi	r3,r16,8
  802c94:	003fc006 	br	802b98 <_malloc_r+0x50>
  802c98:	02c02074 	movhi	r11,129
  802c9c:	5ad64104 	addi	r11,r11,22788
  802ca0:	8ac5883a 	add	r2,r17,r11
  802ca4:	14000317 	ldw	r16,12(r2)
  802ca8:	580f883a 	mov	r7,r11
  802cac:	8806d0fa 	srli	r3,r17,3
  802cb0:	14006c26 	beq	r2,r16,802e64 <_malloc_r+0x31c>
  802cb4:	80c00117 	ldw	r3,4(r16)
  802cb8:	00bfff04 	movi	r2,-4
  802cbc:	81800317 	ldw	r6,12(r16)
  802cc0:	1886703a 	and	r3,r3,r2
  802cc4:	80c7883a 	add	r3,r16,r3
  802cc8:	18800117 	ldw	r2,4(r3)
  802ccc:	81400217 	ldw	r5,8(r16)
  802cd0:	9009883a 	mov	r4,r18
  802cd4:	10800054 	ori	r2,r2,1
  802cd8:	18800115 	stw	r2,4(r3)
  802cdc:	31400215 	stw	r5,8(r6)
  802ce0:	29800315 	stw	r6,12(r5)
  802ce4:	081100c0 	call	81100c <__malloc_unlock>
  802ce8:	80c00204 	addi	r3,r16,8
  802cec:	003faa06 	br	802b98 <_malloc_r+0x50>
  802cf0:	00800104 	movi	r2,4
  802cf4:	10c0052e 	bgeu	r2,r3,802d0c <_malloc_r+0x1c4>
  802cf8:	00800504 	movi	r2,20
  802cfc:	10c07836 	bltu	r2,r3,802ee0 <_malloc_r+0x398>
  802d00:	198016c4 	addi	r6,r3,91
  802d04:	300490fa 	slli	r2,r6,3
  802d08:	003fbc06 	br	802bfc <_malloc_r+0xb4>
  802d0c:	8804d1ba 	srli	r2,r17,6
  802d10:	11800e04 	addi	r6,r2,56
  802d14:	300490fa 	slli	r2,r6,3
  802d18:	003fb806 	br	802bfc <_malloc_r+0xb4>
  802d1c:	00807fc4 	movi	r2,511
  802d20:	1140bb36 	bltu	r2,r5,803010 <_malloc_r+0x4c8>
  802d24:	2806d0fa 	srli	r3,r5,3
  802d28:	573ffe04 	addi	fp,r10,-8
  802d2c:	00800044 	movi	r2,1
  802d30:	180890fa 	slli	r4,r3,3
  802d34:	1807d0ba 	srai	r3,r3,2
  802d38:	e1c00117 	ldw	r7,4(fp)
  802d3c:	5909883a 	add	r4,r11,r4
  802d40:	21400217 	ldw	r5,8(r4)
  802d44:	10c4983a 	sll	r2,r2,r3
  802d48:	81000315 	stw	r4,12(r16)
  802d4c:	81400215 	stw	r5,8(r16)
  802d50:	388eb03a 	or	r7,r7,r2
  802d54:	2c000315 	stw	r16,12(r5)
  802d58:	24000215 	stw	r16,8(r4)
  802d5c:	e1c00115 	stw	r7,4(fp)
  802d60:	4807883a 	mov	r3,r9
  802d64:	4800cd16 	blt	r9,zero,80309c <_malloc_r+0x554>
  802d68:	1807d0ba 	srai	r3,r3,2
  802d6c:	00800044 	movi	r2,1
  802d70:	10c8983a 	sll	r4,r2,r3
  802d74:	39004436 	bltu	r7,r4,802e88 <_malloc_r+0x340>
  802d78:	21c4703a 	and	r2,r4,r7
  802d7c:	10000a1e 	bne	r2,zero,802da8 <_malloc_r+0x260>
  802d80:	2109883a 	add	r4,r4,r4
  802d84:	00bfff04 	movi	r2,-4
  802d88:	4884703a 	and	r2,r9,r2
  802d8c:	3906703a 	and	r3,r7,r4
  802d90:	12400104 	addi	r9,r2,4
  802d94:	1800041e 	bne	r3,zero,802da8 <_malloc_r+0x260>
  802d98:	2109883a 	add	r4,r4,r4
  802d9c:	3904703a 	and	r2,r7,r4
  802da0:	4a400104 	addi	r9,r9,4
  802da4:	103ffc26 	beq	r2,zero,802d98 <_malloc_r+0x250>
  802da8:	480490fa 	slli	r2,r9,3
  802dac:	4819883a 	mov	r12,r9
  802db0:	023fff04 	movi	r8,-4
  802db4:	589b883a 	add	r13,r11,r2
  802db8:	6807883a 	mov	r3,r13
  802dbc:	014003c4 	movi	r5,15
  802dc0:	1c000317 	ldw	r16,12(r3)
  802dc4:	1c00041e 	bne	r3,r16,802dd8 <_malloc_r+0x290>
  802dc8:	0000a706 	br	803068 <_malloc_r+0x520>
  802dcc:	3000ab0e 	bge	r6,zero,80307c <_malloc_r+0x534>
  802dd0:	84000317 	ldw	r16,12(r16)
  802dd4:	1c00a426 	beq	r3,r16,803068 <_malloc_r+0x520>
  802dd8:	80800117 	ldw	r2,4(r16)
  802ddc:	1204703a 	and	r2,r2,r8
  802de0:	144dc83a 	sub	r6,r2,r17
  802de4:	29bff90e 	bge	r5,r6,802dcc <_malloc_r+0x284>
  802de8:	81000317 	ldw	r4,12(r16)
  802dec:	80c00217 	ldw	r3,8(r16)
  802df0:	89400054 	ori	r5,r17,1
  802df4:	8445883a 	add	r2,r16,r17
  802df8:	20c00215 	stw	r3,8(r4)
  802dfc:	19000315 	stw	r4,12(r3)
  802e00:	81400115 	stw	r5,4(r16)
  802e04:	1187883a 	add	r3,r2,r6
  802e08:	31000054 	ori	r4,r6,1
  802e0c:	50800315 	stw	r2,12(r10)
  802e10:	50800215 	stw	r2,8(r10)
  802e14:	19800015 	stw	r6,0(r3)
  802e18:	11000115 	stw	r4,4(r2)
  802e1c:	12800215 	stw	r10,8(r2)
  802e20:	12800315 	stw	r10,12(r2)
  802e24:	9009883a 	mov	r4,r18
  802e28:	081100c0 	call	81100c <__malloc_unlock>
  802e2c:	80c00204 	addi	r3,r16,8
  802e30:	003f5906 	br	802b98 <_malloc_r+0x50>
  802e34:	8109883a 	add	r4,r16,r4
  802e38:	20800117 	ldw	r2,4(r4)
  802e3c:	80c00217 	ldw	r3,8(r16)
  802e40:	81400317 	ldw	r5,12(r16)
  802e44:	10800054 	ori	r2,r2,1
  802e48:	20800115 	stw	r2,4(r4)
  802e4c:	28c00215 	stw	r3,8(r5)
  802e50:	19400315 	stw	r5,12(r3)
  802e54:	9009883a 	mov	r4,r18
  802e58:	081100c0 	call	81100c <__malloc_unlock>
  802e5c:	80c00204 	addi	r3,r16,8
  802e60:	003f4d06 	br	802b98 <_malloc_r+0x50>
  802e64:	80800204 	addi	r2,r16,8
  802e68:	14000317 	ldw	r16,12(r2)
  802e6c:	143f911e 	bne	r2,r16,802cb4 <_malloc_r+0x16c>
  802e70:	1a400084 	addi	r9,r3,2
  802e74:	003f7306 	br	802c44 <_malloc_r+0xfc>
  802e78:	88c00054 	ori	r3,r17,1
  802e7c:	8445883a 	add	r2,r16,r17
  802e80:	80c00115 	stw	r3,4(r16)
  802e84:	003fdf06 	br	802e04 <_malloc_r+0x2bc>
  802e88:	e4000217 	ldw	r16,8(fp)
  802e8c:	00bfff04 	movi	r2,-4
  802e90:	80c00117 	ldw	r3,4(r16)
  802e94:	802d883a 	mov	r22,r16
  802e98:	18aa703a 	and	r21,r3,r2
  802e9c:	ac401636 	bltu	r21,r17,802ef8 <_malloc_r+0x3b0>
  802ea0:	ac49c83a 	sub	r4,r21,r17
  802ea4:	008003c4 	movi	r2,15
  802ea8:	1100130e 	bge	r2,r4,802ef8 <_malloc_r+0x3b0>
  802eac:	88800054 	ori	r2,r17,1
  802eb0:	8447883a 	add	r3,r16,r17
  802eb4:	80800115 	stw	r2,4(r16)
  802eb8:	20800054 	ori	r2,r4,1
  802ebc:	18800115 	stw	r2,4(r3)
  802ec0:	e0c00215 	stw	r3,8(fp)
  802ec4:	9009883a 	mov	r4,r18
  802ec8:	081100c0 	call	81100c <__malloc_unlock>
  802ecc:	80c00204 	addi	r3,r16,8
  802ed0:	003f3106 	br	802b98 <_malloc_r+0x50>
  802ed4:	39c00117 	ldw	r7,4(r7)
  802ed8:	573ffe04 	addi	fp,r10,-8
  802edc:	003fa006 	br	802d60 <_malloc_r+0x218>
  802ee0:	00801504 	movi	r2,84
  802ee4:	10c06736 	bltu	r2,r3,803084 <_malloc_r+0x53c>
  802ee8:	8804d33a 	srli	r2,r17,12
  802eec:	11801b84 	addi	r6,r2,110
  802ef0:	300490fa 	slli	r2,r6,3
  802ef4:	003f4106 	br	802bfc <_malloc_r+0xb4>
  802ef8:	d0a75617 	ldw	r2,-25256(gp)
  802efc:	d0e00717 	ldw	r3,-32740(gp)
  802f00:	053fffc4 	movi	r20,-1
  802f04:	10800404 	addi	r2,r2,16
  802f08:	88a7883a 	add	r19,r17,r2
  802f0c:	1d000326 	beq	r3,r20,802f1c <_malloc_r+0x3d4>
  802f10:	98c3ffc4 	addi	r3,r19,4095
  802f14:	00bc0004 	movi	r2,-4096
  802f18:	18a6703a 	and	r19,r3,r2
  802f1c:	9009883a 	mov	r4,r18
  802f20:	980b883a 	mov	r5,r19
  802f24:	0803f5c0 	call	803f5c <_sbrk_r>
  802f28:	1009883a 	mov	r4,r2
  802f2c:	15000426 	beq	r2,r20,802f40 <_malloc_r+0x3f8>
  802f30:	854b883a 	add	r5,r16,r21
  802f34:	1029883a 	mov	r20,r2
  802f38:	11405a2e 	bgeu	r2,r5,8030a4 <_malloc_r+0x55c>
  802f3c:	87000c26 	beq	r16,fp,802f70 <_malloc_r+0x428>
  802f40:	e4000217 	ldw	r16,8(fp)
  802f44:	80c00117 	ldw	r3,4(r16)
  802f48:	00bfff04 	movi	r2,-4
  802f4c:	1884703a 	and	r2,r3,r2
  802f50:	14400336 	bltu	r2,r17,802f60 <_malloc_r+0x418>
  802f54:	1449c83a 	sub	r4,r2,r17
  802f58:	008003c4 	movi	r2,15
  802f5c:	113fd316 	blt	r2,r4,802eac <_malloc_r+0x364>
  802f60:	9009883a 	mov	r4,r18
  802f64:	081100c0 	call	81100c <__malloc_unlock>
  802f68:	0007883a 	mov	r3,zero
  802f6c:	003f0a06 	br	802b98 <_malloc_r+0x50>
  802f70:	05c020b4 	movhi	r23,130
  802f74:	bde3bc04 	addi	r23,r23,-28944
  802f78:	b8800017 	ldw	r2,0(r23)
  802f7c:	988d883a 	add	r6,r19,r2
  802f80:	b9800015 	stw	r6,0(r23)
  802f84:	d0e00717 	ldw	r3,-32740(gp)
  802f88:	00bfffc4 	movi	r2,-1
  802f8c:	18808e26 	beq	r3,r2,8031c8 <_malloc_r+0x680>
  802f90:	2145c83a 	sub	r2,r4,r5
  802f94:	3085883a 	add	r2,r6,r2
  802f98:	b8800015 	stw	r2,0(r23)
  802f9c:	20c001cc 	andi	r3,r4,7
  802fa0:	18005f1e 	bne	r3,zero,803120 <_malloc_r+0x5d8>
  802fa4:	000b883a 	mov	r5,zero
  802fa8:	a4c5883a 	add	r2,r20,r19
  802fac:	1083ffcc 	andi	r2,r2,4095
  802fb0:	00c40004 	movi	r3,4096
  802fb4:	1887c83a 	sub	r3,r3,r2
  802fb8:	28e7883a 	add	r19,r5,r3
  802fbc:	9009883a 	mov	r4,r18
  802fc0:	980b883a 	mov	r5,r19
  802fc4:	0803f5c0 	call	803f5c <_sbrk_r>
  802fc8:	1007883a 	mov	r3,r2
  802fcc:	00bfffc4 	movi	r2,-1
  802fd0:	18807a26 	beq	r3,r2,8031bc <_malloc_r+0x674>
  802fd4:	1d05c83a 	sub	r2,r3,r20
  802fd8:	9885883a 	add	r2,r19,r2
  802fdc:	10c00054 	ori	r3,r2,1
  802fe0:	b8800017 	ldw	r2,0(r23)
  802fe4:	a021883a 	mov	r16,r20
  802fe8:	a0c00115 	stw	r3,4(r20)
  802fec:	9885883a 	add	r2,r19,r2
  802ff0:	b8800015 	stw	r2,0(r23)
  802ff4:	e5000215 	stw	r20,8(fp)
  802ff8:	b7003626 	beq	r22,fp,8030d4 <_malloc_r+0x58c>
  802ffc:	018003c4 	movi	r6,15
  803000:	35404b36 	bltu	r6,r21,803130 <_malloc_r+0x5e8>
  803004:	00800044 	movi	r2,1
  803008:	a0800115 	stw	r2,4(r20)
  80300c:	003fcd06 	br	802f44 <_malloc_r+0x3fc>
  803010:	2808d27a 	srli	r4,r5,9
  803014:	2000371e 	bne	r4,zero,8030f4 <_malloc_r+0x5ac>
  803018:	2808d0fa 	srli	r4,r5,3
  80301c:	200690fa 	slli	r3,r4,3
  803020:	1ad1883a 	add	r8,r3,r11
  803024:	41800217 	ldw	r6,8(r8)
  803028:	41805b26 	beq	r8,r6,803198 <_malloc_r+0x650>
  80302c:	30800117 	ldw	r2,4(r6)
  803030:	00ffff04 	movi	r3,-4
  803034:	10c4703a 	and	r2,r2,r3
  803038:	2880022e 	bgeu	r5,r2,803044 <_malloc_r+0x4fc>
  80303c:	31800217 	ldw	r6,8(r6)
  803040:	41bffa1e 	bne	r8,r6,80302c <_malloc_r+0x4e4>
  803044:	32000317 	ldw	r8,12(r6)
  803048:	39c00117 	ldw	r7,4(r7)
  80304c:	82000315 	stw	r8,12(r16)
  803050:	81800215 	stw	r6,8(r16)
  803054:	07002074 	movhi	fp,129
  803058:	e7164104 	addi	fp,fp,22788
  80305c:	34000315 	stw	r16,12(r6)
  803060:	44000215 	stw	r16,8(r8)
  803064:	003f3e06 	br	802d60 <_malloc_r+0x218>
  803068:	63000044 	addi	r12,r12,1
  80306c:	608000cc 	andi	r2,r12,3
  803070:	10005d26 	beq	r2,zero,8031e8 <_malloc_r+0x6a0>
  803074:	18c00204 	addi	r3,r3,8
  803078:	003f5106 	br	802dc0 <_malloc_r+0x278>
  80307c:	8089883a 	add	r4,r16,r2
  803080:	003f6d06 	br	802e38 <_malloc_r+0x2f0>
  803084:	00805504 	movi	r2,340
  803088:	10c02036 	bltu	r2,r3,80310c <_malloc_r+0x5c4>
  80308c:	8804d3fa 	srli	r2,r17,15
  803090:	11801dc4 	addi	r6,r2,119
  803094:	300490fa 	slli	r2,r6,3
  803098:	003ed806 	br	802bfc <_malloc_r+0xb4>
  80309c:	48c000c4 	addi	r3,r9,3
  8030a0:	003f3106 	br	802d68 <_malloc_r+0x220>
  8030a4:	05c020b4 	movhi	r23,130
  8030a8:	bde3bc04 	addi	r23,r23,-28944
  8030ac:	b8800017 	ldw	r2,0(r23)
  8030b0:	988d883a 	add	r6,r19,r2
  8030b4:	b9800015 	stw	r6,0(r23)
  8030b8:	293fb21e 	bne	r5,r4,802f84 <_malloc_r+0x43c>
  8030bc:	2083ffcc 	andi	r2,r4,4095
  8030c0:	103fb01e 	bne	r2,zero,802f84 <_malloc_r+0x43c>
  8030c4:	e4000217 	ldw	r16,8(fp)
  8030c8:	9d45883a 	add	r2,r19,r21
  8030cc:	10800054 	ori	r2,r2,1
  8030d0:	80800115 	stw	r2,4(r16)
  8030d4:	b8c00017 	ldw	r3,0(r23)
  8030d8:	d0a75717 	ldw	r2,-25252(gp)
  8030dc:	10c0012e 	bgeu	r2,r3,8030e4 <_malloc_r+0x59c>
  8030e0:	d0e75715 	stw	r3,-25252(gp)
  8030e4:	d0a75817 	ldw	r2,-25248(gp)
  8030e8:	10ff962e 	bgeu	r2,r3,802f44 <_malloc_r+0x3fc>
  8030ec:	d0e75815 	stw	r3,-25248(gp)
  8030f0:	003f9406 	br	802f44 <_malloc_r+0x3fc>
  8030f4:	00800104 	movi	r2,4
  8030f8:	11001e36 	bltu	r2,r4,803174 <_malloc_r+0x62c>
  8030fc:	2804d1ba 	srli	r2,r5,6
  803100:	11000e04 	addi	r4,r2,56
  803104:	200690fa 	slli	r3,r4,3
  803108:	003fc506 	br	803020 <_malloc_r+0x4d8>
  80310c:	00815504 	movi	r2,1364
  803110:	10c01d2e 	bgeu	r2,r3,803188 <_malloc_r+0x640>
  803114:	01801f84 	movi	r6,126
  803118:	0080fc04 	movi	r2,1008
  80311c:	003eb706 	br	802bfc <_malloc_r+0xb4>
  803120:	00800204 	movi	r2,8
  803124:	10cbc83a 	sub	r5,r2,r3
  803128:	2169883a 	add	r20,r4,r5
  80312c:	003f9e06 	br	802fa8 <_malloc_r+0x460>
  803130:	00bffe04 	movi	r2,-8
  803134:	a93ffd04 	addi	r4,r21,-12
  803138:	2088703a 	and	r4,r4,r2
  80313c:	b10b883a 	add	r5,r22,r4
  803140:	00c00144 	movi	r3,5
  803144:	28c00215 	stw	r3,8(r5)
  803148:	28c00115 	stw	r3,4(r5)
  80314c:	b0800117 	ldw	r2,4(r22)
  803150:	1080004c 	andi	r2,r2,1
  803154:	2084b03a 	or	r2,r4,r2
  803158:	b0800115 	stw	r2,4(r22)
  80315c:	313fdd2e 	bgeu	r6,r4,8030d4 <_malloc_r+0x58c>
  803160:	b1400204 	addi	r5,r22,8
  803164:	9009883a 	mov	r4,r18
  803168:	0801bb00 	call	801bb0 <_free_r>
  80316c:	e4000217 	ldw	r16,8(fp)
  803170:	003fd806 	br	8030d4 <_malloc_r+0x58c>
  803174:	00800504 	movi	r2,20
  803178:	11001536 	bltu	r2,r4,8031d0 <_malloc_r+0x688>
  80317c:	210016c4 	addi	r4,r4,91
  803180:	200690fa 	slli	r3,r4,3
  803184:	003fa606 	br	803020 <_malloc_r+0x4d8>
  803188:	8804d4ba 	srli	r2,r17,18
  80318c:	11801f04 	addi	r6,r2,124
  803190:	300490fa 	slli	r2,r6,3
  803194:	003e9906 	br	802bfc <_malloc_r+0xb4>
  803198:	2009d0ba 	srai	r4,r4,2
  80319c:	01402074 	movhi	r5,129
  8031a0:	29564104 	addi	r5,r5,22788
  8031a4:	00c00044 	movi	r3,1
  8031a8:	28800117 	ldw	r2,4(r5)
  8031ac:	1906983a 	sll	r3,r3,r4
  8031b0:	10c4b03a 	or	r2,r2,r3
  8031b4:	28800115 	stw	r2,4(r5)
  8031b8:	003fa306 	br	803048 <_malloc_r+0x500>
  8031bc:	0027883a 	mov	r19,zero
  8031c0:	00c00044 	movi	r3,1
  8031c4:	003f8606 	br	802fe0 <_malloc_r+0x498>
  8031c8:	d1200715 	stw	r4,-32740(gp)
  8031cc:	003f7306 	br	802f9c <_malloc_r+0x454>
  8031d0:	00801504 	movi	r2,84
  8031d4:	11001936 	bltu	r2,r4,80323c <_malloc_r+0x6f4>
  8031d8:	2804d33a 	srli	r2,r5,12
  8031dc:	11001b84 	addi	r4,r2,110
  8031e0:	200690fa 	slli	r3,r4,3
  8031e4:	003f8e06 	br	803020 <_malloc_r+0x4d8>
  8031e8:	480b883a 	mov	r5,r9
  8031ec:	6807883a 	mov	r3,r13
  8031f0:	288000cc 	andi	r2,r5,3
  8031f4:	18fffe04 	addi	r3,r3,-8
  8031f8:	297fffc4 	addi	r5,r5,-1
  8031fc:	10001526 	beq	r2,zero,803254 <_malloc_r+0x70c>
  803200:	18800217 	ldw	r2,8(r3)
  803204:	10fffa26 	beq	r2,r3,8031f0 <_malloc_r+0x6a8>
  803208:	2109883a 	add	r4,r4,r4
  80320c:	393f1e36 	bltu	r7,r4,802e88 <_malloc_r+0x340>
  803210:	203f1d26 	beq	r4,zero,802e88 <_malloc_r+0x340>
  803214:	21c4703a 	and	r2,r4,r7
  803218:	10000226 	beq	r2,zero,803224 <_malloc_r+0x6dc>
  80321c:	6013883a 	mov	r9,r12
  803220:	003ee106 	br	802da8 <_malloc_r+0x260>
  803224:	2109883a 	add	r4,r4,r4
  803228:	3904703a 	and	r2,r7,r4
  80322c:	63000104 	addi	r12,r12,4
  803230:	103ffc26 	beq	r2,zero,803224 <_malloc_r+0x6dc>
  803234:	6013883a 	mov	r9,r12
  803238:	003edb06 	br	802da8 <_malloc_r+0x260>
  80323c:	00805504 	movi	r2,340
  803240:	11000836 	bltu	r2,r4,803264 <_malloc_r+0x71c>
  803244:	2804d3fa 	srli	r2,r5,15
  803248:	11001dc4 	addi	r4,r2,119
  80324c:	200690fa 	slli	r3,r4,3
  803250:	003f7306 	br	803020 <_malloc_r+0x4d8>
  803254:	0104303a 	nor	r2,zero,r4
  803258:	388e703a 	and	r7,r7,r2
  80325c:	e1c00115 	stw	r7,4(fp)
  803260:	003fe906 	br	803208 <_malloc_r+0x6c0>
  803264:	00815504 	movi	r2,1364
  803268:	1100032e 	bgeu	r2,r4,803278 <_malloc_r+0x730>
  80326c:	01001f84 	movi	r4,126
  803270:	00c0fc04 	movi	r3,1008
  803274:	003f6a06 	br	803020 <_malloc_r+0x4d8>
  803278:	2804d4ba 	srli	r2,r5,18
  80327c:	11001f04 	addi	r4,r2,124
  803280:	200690fa 	slli	r3,r4,3
  803284:	003f6606 	br	803020 <_malloc_r+0x4d8>

00803288 <memchr>:
  803288:	008000c4 	movi	r2,3
  80328c:	29403fcc 	andi	r5,r5,255
  803290:	2007883a 	mov	r3,r4
  803294:	1180022e 	bgeu	r2,r6,8032a0 <memchr+0x18>
  803298:	2084703a 	and	r2,r4,r2
  80329c:	10000b26 	beq	r2,zero,8032cc <memchr+0x44>
  8032a0:	313fffc4 	addi	r4,r6,-1
  8032a4:	3000051e 	bne	r6,zero,8032bc <memchr+0x34>
  8032a8:	00002c06 	br	80335c <memchr+0xd4>
  8032ac:	213fffc4 	addi	r4,r4,-1
  8032b0:	00bfffc4 	movi	r2,-1
  8032b4:	18c00044 	addi	r3,r3,1
  8032b8:	20802826 	beq	r4,r2,80335c <memchr+0xd4>
  8032bc:	18800003 	ldbu	r2,0(r3)
  8032c0:	28bffa1e 	bne	r5,r2,8032ac <memchr+0x24>
  8032c4:	1805883a 	mov	r2,r3
  8032c8:	f800283a 	ret
  8032cc:	0011883a 	mov	r8,zero
  8032d0:	0007883a 	mov	r3,zero
  8032d4:	01c00104 	movi	r7,4
  8032d8:	4004923a 	slli	r2,r8,8
  8032dc:	18c00044 	addi	r3,r3,1
  8032e0:	1151883a 	add	r8,r2,r5
  8032e4:	19fffc1e 	bne	r3,r7,8032d8 <memchr+0x50>
  8032e8:	02bfbff4 	movhi	r10,65279
  8032ec:	52bfbfc4 	addi	r10,r10,-257
  8032f0:	02602074 	movhi	r9,32897
  8032f4:	4a602004 	addi	r9,r9,-32640
  8032f8:	02c000c4 	movi	r11,3
  8032fc:	20800017 	ldw	r2,0(r4)
  803300:	31bfff04 	addi	r6,r6,-4
  803304:	200f883a 	mov	r7,r4
  803308:	1204f03a 	xor	r2,r2,r8
  80330c:	1287883a 	add	r3,r2,r10
  803310:	1a46703a 	and	r3,r3,r9
  803314:	0084303a 	nor	r2,zero,r2
  803318:	10c4703a 	and	r2,r2,r3
  80331c:	10000b26 	beq	r2,zero,80334c <memchr+0xc4>
  803320:	20800003 	ldbu	r2,0(r4)
  803324:	28800f26 	beq	r5,r2,803364 <memchr+0xdc>
  803328:	20800043 	ldbu	r2,1(r4)
  80332c:	21c00044 	addi	r7,r4,1
  803330:	28800c26 	beq	r5,r2,803364 <memchr+0xdc>
  803334:	20800083 	ldbu	r2,2(r4)
  803338:	21c00084 	addi	r7,r4,2
  80333c:	28800926 	beq	r5,r2,803364 <memchr+0xdc>
  803340:	208000c3 	ldbu	r2,3(r4)
  803344:	21c000c4 	addi	r7,r4,3
  803348:	28800626 	beq	r5,r2,803364 <memchr+0xdc>
  80334c:	21000104 	addi	r4,r4,4
  803350:	59bfea36 	bltu	r11,r6,8032fc <memchr+0x74>
  803354:	2007883a 	mov	r3,r4
  803358:	003fd106 	br	8032a0 <memchr+0x18>
  80335c:	0005883a 	mov	r2,zero
  803360:	f800283a 	ret
  803364:	3805883a 	mov	r2,r7
  803368:	f800283a 	ret

0080336c <memcpy>:
  80336c:	01c003c4 	movi	r7,15
  803370:	2007883a 	mov	r3,r4
  803374:	3980032e 	bgeu	r7,r6,803384 <memcpy+0x18>
  803378:	2904b03a 	or	r2,r5,r4
  80337c:	108000cc 	andi	r2,r2,3
  803380:	10000926 	beq	r2,zero,8033a8 <memcpy+0x3c>
  803384:	30000626 	beq	r6,zero,8033a0 <memcpy+0x34>
  803388:	30cd883a 	add	r6,r6,r3
  80338c:	28800003 	ldbu	r2,0(r5)
  803390:	29400044 	addi	r5,r5,1
  803394:	18800005 	stb	r2,0(r3)
  803398:	18c00044 	addi	r3,r3,1
  80339c:	30fffb1e 	bne	r6,r3,80338c <memcpy+0x20>
  8033a0:	2005883a 	mov	r2,r4
  8033a4:	f800283a 	ret
  8033a8:	3811883a 	mov	r8,r7
  8033ac:	200f883a 	mov	r7,r4
  8033b0:	28c00017 	ldw	r3,0(r5)
  8033b4:	31bffc04 	addi	r6,r6,-16
  8033b8:	38c00015 	stw	r3,0(r7)
  8033bc:	28800117 	ldw	r2,4(r5)
  8033c0:	38800115 	stw	r2,4(r7)
  8033c4:	28c00217 	ldw	r3,8(r5)
  8033c8:	38c00215 	stw	r3,8(r7)
  8033cc:	28800317 	ldw	r2,12(r5)
  8033d0:	29400404 	addi	r5,r5,16
  8033d4:	38800315 	stw	r2,12(r7)
  8033d8:	39c00404 	addi	r7,r7,16
  8033dc:	41bff436 	bltu	r8,r6,8033b0 <memcpy+0x44>
  8033e0:	008000c4 	movi	r2,3
  8033e4:	1180072e 	bgeu	r2,r6,803404 <memcpy+0x98>
  8033e8:	1007883a 	mov	r3,r2
  8033ec:	28800017 	ldw	r2,0(r5)
  8033f0:	31bfff04 	addi	r6,r6,-4
  8033f4:	29400104 	addi	r5,r5,4
  8033f8:	38800015 	stw	r2,0(r7)
  8033fc:	39c00104 	addi	r7,r7,4
  803400:	19bffa36 	bltu	r3,r6,8033ec <memcpy+0x80>
  803404:	3807883a 	mov	r3,r7
  803408:	003fde06 	br	803384 <memcpy+0x18>

0080340c <memmove>:
  80340c:	2807883a 	mov	r3,r5
  803410:	2011883a 	mov	r8,r4
  803414:	29000c2e 	bgeu	r5,r4,803448 <memmove+0x3c>
  803418:	298f883a 	add	r7,r5,r6
  80341c:	21c00a2e 	bgeu	r4,r7,803448 <memmove+0x3c>
  803420:	30000726 	beq	r6,zero,803440 <memmove+0x34>
  803424:	2187883a 	add	r3,r4,r6
  803428:	198dc83a 	sub	r6,r3,r6
  80342c:	39ffffc4 	addi	r7,r7,-1
  803430:	38800003 	ldbu	r2,0(r7)
  803434:	18ffffc4 	addi	r3,r3,-1
  803438:	18800005 	stb	r2,0(r3)
  80343c:	19bffb1e 	bne	r3,r6,80342c <memmove+0x20>
  803440:	2005883a 	mov	r2,r4
  803444:	f800283a 	ret
  803448:	01c003c4 	movi	r7,15
  80344c:	39800a36 	bltu	r7,r6,803478 <memmove+0x6c>
  803450:	303ffb26 	beq	r6,zero,803440 <memmove+0x34>
  803454:	400f883a 	mov	r7,r8
  803458:	320d883a 	add	r6,r6,r8
  80345c:	28800003 	ldbu	r2,0(r5)
  803460:	29400044 	addi	r5,r5,1
  803464:	38800005 	stb	r2,0(r7)
  803468:	39c00044 	addi	r7,r7,1
  80346c:	39bffb1e 	bne	r7,r6,80345c <memmove+0x50>
  803470:	2005883a 	mov	r2,r4
  803474:	f800283a 	ret
  803478:	1904b03a 	or	r2,r3,r4
  80347c:	108000cc 	andi	r2,r2,3
  803480:	103ff31e 	bne	r2,zero,803450 <memmove+0x44>
  803484:	3811883a 	mov	r8,r7
  803488:	180b883a 	mov	r5,r3
  80348c:	200f883a 	mov	r7,r4
  803490:	28c00017 	ldw	r3,0(r5)
  803494:	31bffc04 	addi	r6,r6,-16
  803498:	38c00015 	stw	r3,0(r7)
  80349c:	28800117 	ldw	r2,4(r5)
  8034a0:	38800115 	stw	r2,4(r7)
  8034a4:	28c00217 	ldw	r3,8(r5)
  8034a8:	38c00215 	stw	r3,8(r7)
  8034ac:	28800317 	ldw	r2,12(r5)
  8034b0:	29400404 	addi	r5,r5,16
  8034b4:	38800315 	stw	r2,12(r7)
  8034b8:	39c00404 	addi	r7,r7,16
  8034bc:	41bff436 	bltu	r8,r6,803490 <memmove+0x84>
  8034c0:	008000c4 	movi	r2,3
  8034c4:	1180072e 	bgeu	r2,r6,8034e4 <memmove+0xd8>
  8034c8:	1007883a 	mov	r3,r2
  8034cc:	28800017 	ldw	r2,0(r5)
  8034d0:	31bfff04 	addi	r6,r6,-4
  8034d4:	29400104 	addi	r5,r5,4
  8034d8:	38800015 	stw	r2,0(r7)
  8034dc:	39c00104 	addi	r7,r7,4
  8034e0:	19bffa36 	bltu	r3,r6,8034cc <memmove+0xc0>
  8034e4:	3811883a 	mov	r8,r7
  8034e8:	003fd906 	br	803450 <memmove+0x44>

008034ec <memset>:
  8034ec:	008000c4 	movi	r2,3
  8034f0:	29403fcc 	andi	r5,r5,255
  8034f4:	2007883a 	mov	r3,r4
  8034f8:	1180022e 	bgeu	r2,r6,803504 <memset+0x18>
  8034fc:	2084703a 	and	r2,r4,r2
  803500:	10000826 	beq	r2,zero,803524 <memset+0x38>
  803504:	30000526 	beq	r6,zero,80351c <memset+0x30>
  803508:	2805883a 	mov	r2,r5
  80350c:	30cd883a 	add	r6,r6,r3
  803510:	18800005 	stb	r2,0(r3)
  803514:	18c00044 	addi	r3,r3,1
  803518:	19bffd1e 	bne	r3,r6,803510 <memset+0x24>
  80351c:	2005883a 	mov	r2,r4
  803520:	f800283a 	ret
  803524:	2804923a 	slli	r2,r5,8
  803528:	020003c4 	movi	r8,15
  80352c:	200f883a 	mov	r7,r4
  803530:	2884b03a 	or	r2,r5,r2
  803534:	1006943a 	slli	r3,r2,16
  803538:	10c6b03a 	or	r3,r2,r3
  80353c:	41800a2e 	bgeu	r8,r6,803568 <memset+0x7c>
  803540:	4005883a 	mov	r2,r8
  803544:	31bffc04 	addi	r6,r6,-16
  803548:	38c00015 	stw	r3,0(r7)
  80354c:	38c00115 	stw	r3,4(r7)
  803550:	38c00215 	stw	r3,8(r7)
  803554:	38c00315 	stw	r3,12(r7)
  803558:	39c00404 	addi	r7,r7,16
  80355c:	11bff936 	bltu	r2,r6,803544 <memset+0x58>
  803560:	008000c4 	movi	r2,3
  803564:	1180052e 	bgeu	r2,r6,80357c <memset+0x90>
  803568:	31bfff04 	addi	r6,r6,-4
  80356c:	008000c4 	movi	r2,3
  803570:	38c00015 	stw	r3,0(r7)
  803574:	39c00104 	addi	r7,r7,4
  803578:	11bffb36 	bltu	r2,r6,803568 <memset+0x7c>
  80357c:	3807883a 	mov	r3,r7
  803580:	003fe006 	br	803504 <memset+0x18>

00803584 <_open_r>:
  803584:	defffd04 	addi	sp,sp,-12
  803588:	dc000015 	stw	r16,0(sp)
  80358c:	040020b4 	movhi	r16,130
  803590:	8423a004 	addi	r16,r16,-29056
  803594:	dc400115 	stw	r17,4(sp)
  803598:	80000015 	stw	zero,0(r16)
  80359c:	2023883a 	mov	r17,r4
  8035a0:	2809883a 	mov	r4,r5
  8035a4:	300b883a 	mov	r5,r6
  8035a8:	380d883a 	mov	r6,r7
  8035ac:	dfc00215 	stw	ra,8(sp)
  8035b0:	08111080 	call	811108 <open>
  8035b4:	1007883a 	mov	r3,r2
  8035b8:	00bfffc4 	movi	r2,-1
  8035bc:	18800626 	beq	r3,r2,8035d8 <_open_r+0x54>
  8035c0:	1805883a 	mov	r2,r3
  8035c4:	dfc00217 	ldw	ra,8(sp)
  8035c8:	dc400117 	ldw	r17,4(sp)
  8035cc:	dc000017 	ldw	r16,0(sp)
  8035d0:	dec00304 	addi	sp,sp,12
  8035d4:	f800283a 	ret
  8035d8:	80800017 	ldw	r2,0(r16)
  8035dc:	103ff826 	beq	r2,zero,8035c0 <_open_r+0x3c>
  8035e0:	88800015 	stw	r2,0(r17)
  8035e4:	1805883a 	mov	r2,r3
  8035e8:	dfc00217 	ldw	ra,8(sp)
  8035ec:	dc400117 	ldw	r17,4(sp)
  8035f0:	dc000017 	ldw	r16,0(sp)
  8035f4:	dec00304 	addi	sp,sp,12
  8035f8:	f800283a 	ret

008035fc <printf>:
  8035fc:	defffb04 	addi	sp,sp,-20
  803600:	dfc00115 	stw	ra,4(sp)
  803604:	d9400215 	stw	r5,8(sp)
  803608:	d9800315 	stw	r6,12(sp)
  80360c:	d9c00415 	stw	r7,16(sp)
  803610:	00802074 	movhi	r2,129
  803614:	109c4f04 	addi	r2,r2,28988
  803618:	10c00017 	ldw	r3,0(r2)
  80361c:	200b883a 	mov	r5,r4
  803620:	d8800204 	addi	r2,sp,8
  803624:	19000217 	ldw	r4,8(r3)
  803628:	100d883a 	mov	r6,r2
  80362c:	d8800015 	stw	r2,0(sp)
  803630:	08062780 	call	806278 <__vfprintf_internal>
  803634:	dfc00117 	ldw	ra,4(sp)
  803638:	dec00504 	addi	sp,sp,20
  80363c:	f800283a 	ret

00803640 <_printf_r>:
  803640:	defffc04 	addi	sp,sp,-16
  803644:	dfc00115 	stw	ra,4(sp)
  803648:	d9800215 	stw	r6,8(sp)
  80364c:	d9c00315 	stw	r7,12(sp)
  803650:	280d883a 	mov	r6,r5
  803654:	21400217 	ldw	r5,8(r4)
  803658:	d8c00204 	addi	r3,sp,8
  80365c:	180f883a 	mov	r7,r3
  803660:	d8c00015 	stw	r3,0(sp)
  803664:	08043cc0 	call	8043cc <___vfprintf_internal_r>
  803668:	dfc00117 	ldw	ra,4(sp)
  80366c:	dec00404 	addi	sp,sp,16
  803670:	f800283a 	ret

00803674 <_puts_r>:
  803674:	defff604 	addi	sp,sp,-40
  803678:	dc400715 	stw	r17,28(sp)
  80367c:	2023883a 	mov	r17,r4
  803680:	2809883a 	mov	r4,r5
  803684:	dfc00915 	stw	ra,36(sp)
  803688:	dcc00815 	stw	r19,32(sp)
  80368c:	2827883a 	mov	r19,r5
  803690:	08043000 	call	804300 <strlen>
  803694:	89400217 	ldw	r5,8(r17)
  803698:	00c02074 	movhi	r3,129
  80369c:	18d39c04 	addi	r3,r3,20080
  8036a0:	01c00044 	movi	r7,1
  8036a4:	12000044 	addi	r8,r2,1
  8036a8:	d8c00515 	stw	r3,20(sp)
  8036ac:	d9c00615 	stw	r7,24(sp)
  8036b0:	d8c00304 	addi	r3,sp,12
  8036b4:	01c00084 	movi	r7,2
  8036b8:	8809883a 	mov	r4,r17
  8036bc:	d80d883a 	mov	r6,sp
  8036c0:	d8c00015 	stw	r3,0(sp)
  8036c4:	dcc00315 	stw	r19,12(sp)
  8036c8:	da000215 	stw	r8,8(sp)
  8036cc:	d9c00115 	stw	r7,4(sp)
  8036d0:	d8800415 	stw	r2,16(sp)
  8036d4:	08023980 	call	802398 <__sfvwrite_r>
  8036d8:	00ffffc4 	movi	r3,-1
  8036dc:	10000626 	beq	r2,zero,8036f8 <_puts_r+0x84>
  8036e0:	1805883a 	mov	r2,r3
  8036e4:	dfc00917 	ldw	ra,36(sp)
  8036e8:	dcc00817 	ldw	r19,32(sp)
  8036ec:	dc400717 	ldw	r17,28(sp)
  8036f0:	dec00a04 	addi	sp,sp,40
  8036f4:	f800283a 	ret
  8036f8:	00c00284 	movi	r3,10
  8036fc:	1805883a 	mov	r2,r3
  803700:	dfc00917 	ldw	ra,36(sp)
  803704:	dcc00817 	ldw	r19,32(sp)
  803708:	dc400717 	ldw	r17,28(sp)
  80370c:	dec00a04 	addi	sp,sp,40
  803710:	f800283a 	ret

00803714 <puts>:
  803714:	00802074 	movhi	r2,129
  803718:	109c4f04 	addi	r2,r2,28988
  80371c:	200b883a 	mov	r5,r4
  803720:	11000017 	ldw	r4,0(r2)
  803724:	08036741 	jmpi	803674 <_puts_r>

00803728 <_realloc_r>:
  803728:	defff404 	addi	sp,sp,-48
  80372c:	dd800815 	stw	r22,32(sp)
  803730:	dc800415 	stw	r18,16(sp)
  803734:	dc400315 	stw	r17,12(sp)
  803738:	dfc00b15 	stw	ra,44(sp)
  80373c:	df000a15 	stw	fp,40(sp)
  803740:	ddc00915 	stw	r23,36(sp)
  803744:	dd400715 	stw	r21,28(sp)
  803748:	dd000615 	stw	r20,24(sp)
  80374c:	dcc00515 	stw	r19,20(sp)
  803750:	dc000215 	stw	r16,8(sp)
  803754:	2825883a 	mov	r18,r5
  803758:	3023883a 	mov	r17,r6
  80375c:	202d883a 	mov	r22,r4
  803760:	2800c926 	beq	r5,zero,803a88 <_realloc_r+0x360>
  803764:	0810fec0 	call	810fec <__malloc_lock>
  803768:	943ffe04 	addi	r16,r18,-8
  80376c:	88c002c4 	addi	r3,r17,11
  803770:	00800584 	movi	r2,22
  803774:	82000117 	ldw	r8,4(r16)
  803778:	10c01b2e 	bgeu	r2,r3,8037e8 <_realloc_r+0xc0>
  80377c:	00bffe04 	movi	r2,-8
  803780:	188e703a 	and	r7,r3,r2
  803784:	3839883a 	mov	fp,r7
  803788:	38001a16 	blt	r7,zero,8037f4 <_realloc_r+0xcc>
  80378c:	e4401936 	bltu	fp,r17,8037f4 <_realloc_r+0xcc>
  803790:	013fff04 	movi	r4,-4
  803794:	4126703a 	and	r19,r8,r4
  803798:	99c02616 	blt	r19,r7,803834 <_realloc_r+0x10c>
  80379c:	802b883a 	mov	r21,r16
  8037a0:	9829883a 	mov	r20,r19
  8037a4:	84000204 	addi	r16,r16,8
  8037a8:	a80f883a 	mov	r7,r21
  8037ac:	a70dc83a 	sub	r6,r20,fp
  8037b0:	008003c4 	movi	r2,15
  8037b4:	1180c136 	bltu	r2,r6,803abc <_realloc_r+0x394>
  8037b8:	38800117 	ldw	r2,4(r7)
  8037bc:	a549883a 	add	r4,r20,r21
  8037c0:	1080004c 	andi	r2,r2,1
  8037c4:	a084b03a 	or	r2,r20,r2
  8037c8:	38800115 	stw	r2,4(r7)
  8037cc:	20c00117 	ldw	r3,4(r4)
  8037d0:	18c00054 	ori	r3,r3,1
  8037d4:	20c00115 	stw	r3,4(r4)
  8037d8:	b009883a 	mov	r4,r22
  8037dc:	081100c0 	call	81100c <__malloc_unlock>
  8037e0:	8023883a 	mov	r17,r16
  8037e4:	00000606 	br	803800 <_realloc_r+0xd8>
  8037e8:	01c00404 	movi	r7,16
  8037ec:	3839883a 	mov	fp,r7
  8037f0:	e47fe72e 	bgeu	fp,r17,803790 <_realloc_r+0x68>
  8037f4:	00800304 	movi	r2,12
  8037f8:	0023883a 	mov	r17,zero
  8037fc:	b0800015 	stw	r2,0(r22)
  803800:	8805883a 	mov	r2,r17
  803804:	dfc00b17 	ldw	ra,44(sp)
  803808:	df000a17 	ldw	fp,40(sp)
  80380c:	ddc00917 	ldw	r23,36(sp)
  803810:	dd800817 	ldw	r22,32(sp)
  803814:	dd400717 	ldw	r21,28(sp)
  803818:	dd000617 	ldw	r20,24(sp)
  80381c:	dcc00517 	ldw	r19,20(sp)
  803820:	dc800417 	ldw	r18,16(sp)
  803824:	dc400317 	ldw	r17,12(sp)
  803828:	dc000217 	ldw	r16,8(sp)
  80382c:	dec00c04 	addi	sp,sp,48
  803830:	f800283a 	ret
  803834:	00802074 	movhi	r2,129
  803838:	10964104 	addi	r2,r2,22788
  80383c:	12400217 	ldw	r9,8(r2)
  803840:	84cd883a 	add	r6,r16,r19
  803844:	802b883a 	mov	r21,r16
  803848:	3240b926 	beq	r6,r9,803b30 <_realloc_r+0x408>
  80384c:	31400117 	ldw	r5,4(r6)
  803850:	00bfff84 	movi	r2,-2
  803854:	2884703a 	and	r2,r5,r2
  803858:	1185883a 	add	r2,r2,r6
  80385c:	10c00117 	ldw	r3,4(r2)
  803860:	18c0004c 	andi	r3,r3,1
  803864:	1807003a 	cmpeq	r3,r3,zero
  803868:	1800a326 	beq	r3,zero,803af8 <_realloc_r+0x3d0>
  80386c:	2908703a 	and	r4,r5,r4
  803870:	9929883a 	add	r20,r19,r4
  803874:	a1c0a30e 	bge	r20,r7,803b04 <_realloc_r+0x3dc>
  803878:	4080004c 	andi	r2,r8,1
  80387c:	1000551e 	bne	r2,zero,8039d4 <_realloc_r+0x2ac>
  803880:	80800017 	ldw	r2,0(r16)
  803884:	80afc83a 	sub	r23,r16,r2
  803888:	b8c00117 	ldw	r3,4(r23)
  80388c:	00bfff04 	movi	r2,-4
  803890:	1884703a 	and	r2,r3,r2
  803894:	30002e26 	beq	r6,zero,803950 <_realloc_r+0x228>
  803898:	3240b926 	beq	r6,r9,803b80 <_realloc_r+0x458>
  80389c:	98a9883a 	add	r20,r19,r2
  8038a0:	2509883a 	add	r4,r4,r20
  8038a4:	d9000015 	stw	r4,0(sp)
  8038a8:	21c02a16 	blt	r4,r7,803954 <_realloc_r+0x22c>
  8038ac:	30800317 	ldw	r2,12(r6)
  8038b0:	30c00217 	ldw	r3,8(r6)
  8038b4:	01400904 	movi	r5,36
  8038b8:	99bfff04 	addi	r6,r19,-4
  8038bc:	18800315 	stw	r2,12(r3)
  8038c0:	10c00215 	stw	r3,8(r2)
  8038c4:	b9000317 	ldw	r4,12(r23)
  8038c8:	b8800217 	ldw	r2,8(r23)
  8038cc:	b82b883a 	mov	r21,r23
  8038d0:	bc000204 	addi	r16,r23,8
  8038d4:	20800215 	stw	r2,8(r4)
  8038d8:	11000315 	stw	r4,12(r2)
  8038dc:	2980e436 	bltu	r5,r6,803c70 <_realloc_r+0x548>
  8038e0:	008004c4 	movi	r2,19
  8038e4:	9009883a 	mov	r4,r18
  8038e8:	8011883a 	mov	r8,r16
  8038ec:	11800f2e 	bgeu	r2,r6,80392c <_realloc_r+0x204>
  8038f0:	90800017 	ldw	r2,0(r18)
  8038f4:	ba000404 	addi	r8,r23,16
  8038f8:	91000204 	addi	r4,r18,8
  8038fc:	b8800215 	stw	r2,8(r23)
  803900:	90c00117 	ldw	r3,4(r18)
  803904:	008006c4 	movi	r2,27
  803908:	b8c00315 	stw	r3,12(r23)
  80390c:	1180072e 	bgeu	r2,r6,80392c <_realloc_r+0x204>
  803910:	90c00217 	ldw	r3,8(r18)
  803914:	ba000604 	addi	r8,r23,24
  803918:	91000404 	addi	r4,r18,16
  80391c:	b8c00415 	stw	r3,16(r23)
  803920:	90800317 	ldw	r2,12(r18)
  803924:	b8800515 	stw	r2,20(r23)
  803928:	3140e726 	beq	r6,r5,803cc8 <_realloc_r+0x5a0>
  80392c:	20800017 	ldw	r2,0(r4)
  803930:	dd000017 	ldw	r20,0(sp)
  803934:	b80f883a 	mov	r7,r23
  803938:	40800015 	stw	r2,0(r8)
  80393c:	20c00117 	ldw	r3,4(r4)
  803940:	40c00115 	stw	r3,4(r8)
  803944:	20800217 	ldw	r2,8(r4)
  803948:	40800215 	stw	r2,8(r8)
  80394c:	003f9706 	br	8037ac <_realloc_r+0x84>
  803950:	98a9883a 	add	r20,r19,r2
  803954:	a1c01f16 	blt	r20,r7,8039d4 <_realloc_r+0x2ac>
  803958:	b8c00317 	ldw	r3,12(r23)
  80395c:	b8800217 	ldw	r2,8(r23)
  803960:	99bfff04 	addi	r6,r19,-4
  803964:	01400904 	movi	r5,36
  803968:	b82b883a 	mov	r21,r23
  80396c:	18800215 	stw	r2,8(r3)
  803970:	10c00315 	stw	r3,12(r2)
  803974:	bc000204 	addi	r16,r23,8
  803978:	2980c336 	bltu	r5,r6,803c88 <_realloc_r+0x560>
  80397c:	008004c4 	movi	r2,19
  803980:	9009883a 	mov	r4,r18
  803984:	8011883a 	mov	r8,r16
  803988:	11800f2e 	bgeu	r2,r6,8039c8 <_realloc_r+0x2a0>
  80398c:	90800017 	ldw	r2,0(r18)
  803990:	ba000404 	addi	r8,r23,16
  803994:	91000204 	addi	r4,r18,8
  803998:	b8800215 	stw	r2,8(r23)
  80399c:	90c00117 	ldw	r3,4(r18)
  8039a0:	008006c4 	movi	r2,27
  8039a4:	b8c00315 	stw	r3,12(r23)
  8039a8:	1180072e 	bgeu	r2,r6,8039c8 <_realloc_r+0x2a0>
  8039ac:	90c00217 	ldw	r3,8(r18)
  8039b0:	ba000604 	addi	r8,r23,24
  8039b4:	91000404 	addi	r4,r18,16
  8039b8:	b8c00415 	stw	r3,16(r23)
  8039bc:	90800317 	ldw	r2,12(r18)
  8039c0:	b8800515 	stw	r2,20(r23)
  8039c4:	3140c726 	beq	r6,r5,803ce4 <_realloc_r+0x5bc>
  8039c8:	20800017 	ldw	r2,0(r4)
  8039cc:	b80f883a 	mov	r7,r23
  8039d0:	003fd906 	br	803938 <_realloc_r+0x210>
  8039d4:	880b883a 	mov	r5,r17
  8039d8:	b009883a 	mov	r4,r22
  8039dc:	0802b480 	call	802b48 <_malloc_r>
  8039e0:	1023883a 	mov	r17,r2
  8039e4:	10002526 	beq	r2,zero,803a7c <_realloc_r+0x354>
  8039e8:	80800117 	ldw	r2,4(r16)
  8039ec:	00ffff84 	movi	r3,-2
  8039f0:	893ffe04 	addi	r4,r17,-8
  8039f4:	10c4703a 	and	r2,r2,r3
  8039f8:	8085883a 	add	r2,r16,r2
  8039fc:	20809526 	beq	r4,r2,803c54 <_realloc_r+0x52c>
  803a00:	99bfff04 	addi	r6,r19,-4
  803a04:	01c00904 	movi	r7,36
  803a08:	39804536 	bltu	r7,r6,803b20 <_realloc_r+0x3f8>
  803a0c:	008004c4 	movi	r2,19
  803a10:	9009883a 	mov	r4,r18
  803a14:	880b883a 	mov	r5,r17
  803a18:	11800f2e 	bgeu	r2,r6,803a58 <_realloc_r+0x330>
  803a1c:	90800017 	ldw	r2,0(r18)
  803a20:	89400204 	addi	r5,r17,8
  803a24:	91000204 	addi	r4,r18,8
  803a28:	88800015 	stw	r2,0(r17)
  803a2c:	90c00117 	ldw	r3,4(r18)
  803a30:	008006c4 	movi	r2,27
  803a34:	88c00115 	stw	r3,4(r17)
  803a38:	1180072e 	bgeu	r2,r6,803a58 <_realloc_r+0x330>
  803a3c:	90c00217 	ldw	r3,8(r18)
  803a40:	89400404 	addi	r5,r17,16
  803a44:	91000404 	addi	r4,r18,16
  803a48:	88c00215 	stw	r3,8(r17)
  803a4c:	90800317 	ldw	r2,12(r18)
  803a50:	88800315 	stw	r2,12(r17)
  803a54:	31c09126 	beq	r6,r7,803c9c <_realloc_r+0x574>
  803a58:	20800017 	ldw	r2,0(r4)
  803a5c:	28800015 	stw	r2,0(r5)
  803a60:	20c00117 	ldw	r3,4(r4)
  803a64:	28c00115 	stw	r3,4(r5)
  803a68:	20800217 	ldw	r2,8(r4)
  803a6c:	28800215 	stw	r2,8(r5)
  803a70:	900b883a 	mov	r5,r18
  803a74:	b009883a 	mov	r4,r22
  803a78:	0801bb00 	call	801bb0 <_free_r>
  803a7c:	b009883a 	mov	r4,r22
  803a80:	081100c0 	call	81100c <__malloc_unlock>
  803a84:	003f5e06 	br	803800 <_realloc_r+0xd8>
  803a88:	300b883a 	mov	r5,r6
  803a8c:	dfc00b17 	ldw	ra,44(sp)
  803a90:	df000a17 	ldw	fp,40(sp)
  803a94:	ddc00917 	ldw	r23,36(sp)
  803a98:	dd800817 	ldw	r22,32(sp)
  803a9c:	dd400717 	ldw	r21,28(sp)
  803aa0:	dd000617 	ldw	r20,24(sp)
  803aa4:	dcc00517 	ldw	r19,20(sp)
  803aa8:	dc800417 	ldw	r18,16(sp)
  803aac:	dc400317 	ldw	r17,12(sp)
  803ab0:	dc000217 	ldw	r16,8(sp)
  803ab4:	dec00c04 	addi	sp,sp,48
  803ab8:	0802b481 	jmpi	802b48 <_malloc_r>
  803abc:	38800117 	ldw	r2,4(r7)
  803ac0:	e54b883a 	add	r5,fp,r21
  803ac4:	31000054 	ori	r4,r6,1
  803ac8:	1080004c 	andi	r2,r2,1
  803acc:	1704b03a 	or	r2,r2,fp
  803ad0:	38800115 	stw	r2,4(r7)
  803ad4:	29000115 	stw	r4,4(r5)
  803ad8:	2987883a 	add	r3,r5,r6
  803adc:	18800117 	ldw	r2,4(r3)
  803ae0:	29400204 	addi	r5,r5,8
  803ae4:	b009883a 	mov	r4,r22
  803ae8:	10800054 	ori	r2,r2,1
  803aec:	18800115 	stw	r2,4(r3)
  803af0:	0801bb00 	call	801bb0 <_free_r>
  803af4:	003f3806 	br	8037d8 <_realloc_r+0xb0>
  803af8:	000d883a 	mov	r6,zero
  803afc:	0009883a 	mov	r4,zero
  803b00:	003f5d06 	br	803878 <_realloc_r+0x150>
  803b04:	30c00217 	ldw	r3,8(r6)
  803b08:	30800317 	ldw	r2,12(r6)
  803b0c:	800f883a 	mov	r7,r16
  803b10:	84000204 	addi	r16,r16,8
  803b14:	10c00215 	stw	r3,8(r2)
  803b18:	18800315 	stw	r2,12(r3)
  803b1c:	003f2306 	br	8037ac <_realloc_r+0x84>
  803b20:	8809883a 	mov	r4,r17
  803b24:	900b883a 	mov	r5,r18
  803b28:	080340c0 	call	80340c <memmove>
  803b2c:	003fd006 	br	803a70 <_realloc_r+0x348>
  803b30:	30800117 	ldw	r2,4(r6)
  803b34:	e0c00404 	addi	r3,fp,16
  803b38:	1108703a 	and	r4,r2,r4
  803b3c:	9905883a 	add	r2,r19,r4
  803b40:	10ff4d16 	blt	r2,r3,803878 <_realloc_r+0x150>
  803b44:	1705c83a 	sub	r2,r2,fp
  803b48:	870b883a 	add	r5,r16,fp
  803b4c:	10800054 	ori	r2,r2,1
  803b50:	28800115 	stw	r2,4(r5)
  803b54:	80c00117 	ldw	r3,4(r16)
  803b58:	00802074 	movhi	r2,129
  803b5c:	10964104 	addi	r2,r2,22788
  803b60:	b009883a 	mov	r4,r22
  803b64:	18c0004c 	andi	r3,r3,1
  803b68:	e0c6b03a 	or	r3,fp,r3
  803b6c:	11400215 	stw	r5,8(r2)
  803b70:	80c00115 	stw	r3,4(r16)
  803b74:	081100c0 	call	81100c <__malloc_unlock>
  803b78:	84400204 	addi	r17,r16,8
  803b7c:	003f2006 	br	803800 <_realloc_r+0xd8>
  803b80:	98a9883a 	add	r20,r19,r2
  803b84:	2509883a 	add	r4,r4,r20
  803b88:	e0800404 	addi	r2,fp,16
  803b8c:	d9000115 	stw	r4,4(sp)
  803b90:	20bf7016 	blt	r4,r2,803954 <_realloc_r+0x22c>
  803b94:	b8c00317 	ldw	r3,12(r23)
  803b98:	b8800217 	ldw	r2,8(r23)
  803b9c:	99bfff04 	addi	r6,r19,-4
  803ba0:	01400904 	movi	r5,36
  803ba4:	18800215 	stw	r2,8(r3)
  803ba8:	10c00315 	stw	r3,12(r2)
  803bac:	bc400204 	addi	r17,r23,8
  803bb0:	29804136 	bltu	r5,r6,803cb8 <_realloc_r+0x590>
  803bb4:	008004c4 	movi	r2,19
  803bb8:	9009883a 	mov	r4,r18
  803bbc:	880f883a 	mov	r7,r17
  803bc0:	11800f2e 	bgeu	r2,r6,803c00 <_realloc_r+0x4d8>
  803bc4:	90800017 	ldw	r2,0(r18)
  803bc8:	b9c00404 	addi	r7,r23,16
  803bcc:	91000204 	addi	r4,r18,8
  803bd0:	b8800215 	stw	r2,8(r23)
  803bd4:	90c00117 	ldw	r3,4(r18)
  803bd8:	008006c4 	movi	r2,27
  803bdc:	b8c00315 	stw	r3,12(r23)
  803be0:	1180072e 	bgeu	r2,r6,803c00 <_realloc_r+0x4d8>
  803be4:	90c00217 	ldw	r3,8(r18)
  803be8:	b9c00604 	addi	r7,r23,24
  803bec:	91000404 	addi	r4,r18,16
  803bf0:	b8c00415 	stw	r3,16(r23)
  803bf4:	90800317 	ldw	r2,12(r18)
  803bf8:	b8800515 	stw	r2,20(r23)
  803bfc:	31404026 	beq	r6,r5,803d00 <_realloc_r+0x5d8>
  803c00:	20800017 	ldw	r2,0(r4)
  803c04:	38800015 	stw	r2,0(r7)
  803c08:	20c00117 	ldw	r3,4(r4)
  803c0c:	38c00115 	stw	r3,4(r7)
  803c10:	20800217 	ldw	r2,8(r4)
  803c14:	38800215 	stw	r2,8(r7)
  803c18:	d8c00117 	ldw	r3,4(sp)
  803c1c:	bf0b883a 	add	r5,r23,fp
  803c20:	b009883a 	mov	r4,r22
  803c24:	1f05c83a 	sub	r2,r3,fp
  803c28:	10800054 	ori	r2,r2,1
  803c2c:	28800115 	stw	r2,4(r5)
  803c30:	b8c00117 	ldw	r3,4(r23)
  803c34:	00802074 	movhi	r2,129
  803c38:	10964104 	addi	r2,r2,22788
  803c3c:	11400215 	stw	r5,8(r2)
  803c40:	18c0004c 	andi	r3,r3,1
  803c44:	e0c6b03a 	or	r3,fp,r3
  803c48:	b8c00115 	stw	r3,4(r23)
  803c4c:	081100c0 	call	81100c <__malloc_unlock>
  803c50:	003eeb06 	br	803800 <_realloc_r+0xd8>
  803c54:	20800117 	ldw	r2,4(r4)
  803c58:	00ffff04 	movi	r3,-4
  803c5c:	800f883a 	mov	r7,r16
  803c60:	10c4703a 	and	r2,r2,r3
  803c64:	98a9883a 	add	r20,r19,r2
  803c68:	84000204 	addi	r16,r16,8
  803c6c:	003ecf06 	br	8037ac <_realloc_r+0x84>
  803c70:	900b883a 	mov	r5,r18
  803c74:	8009883a 	mov	r4,r16
  803c78:	080340c0 	call	80340c <memmove>
  803c7c:	dd000017 	ldw	r20,0(sp)
  803c80:	b80f883a 	mov	r7,r23
  803c84:	003ec906 	br	8037ac <_realloc_r+0x84>
  803c88:	900b883a 	mov	r5,r18
  803c8c:	8009883a 	mov	r4,r16
  803c90:	080340c0 	call	80340c <memmove>
  803c94:	b80f883a 	mov	r7,r23
  803c98:	003ec406 	br	8037ac <_realloc_r+0x84>
  803c9c:	90c00417 	ldw	r3,16(r18)
  803ca0:	89400604 	addi	r5,r17,24
  803ca4:	91000604 	addi	r4,r18,24
  803ca8:	88c00415 	stw	r3,16(r17)
  803cac:	90800517 	ldw	r2,20(r18)
  803cb0:	88800515 	stw	r2,20(r17)
  803cb4:	003f6806 	br	803a58 <_realloc_r+0x330>
  803cb8:	900b883a 	mov	r5,r18
  803cbc:	8809883a 	mov	r4,r17
  803cc0:	080340c0 	call	80340c <memmove>
  803cc4:	003fd406 	br	803c18 <_realloc_r+0x4f0>
  803cc8:	90c00417 	ldw	r3,16(r18)
  803ccc:	91000604 	addi	r4,r18,24
  803cd0:	ba000804 	addi	r8,r23,32
  803cd4:	b8c00615 	stw	r3,24(r23)
  803cd8:	90800517 	ldw	r2,20(r18)
  803cdc:	b8800715 	stw	r2,28(r23)
  803ce0:	003f1206 	br	80392c <_realloc_r+0x204>
  803ce4:	90c00417 	ldw	r3,16(r18)
  803ce8:	91000604 	addi	r4,r18,24
  803cec:	ba000804 	addi	r8,r23,32
  803cf0:	b8c00615 	stw	r3,24(r23)
  803cf4:	90800517 	ldw	r2,20(r18)
  803cf8:	b8800715 	stw	r2,28(r23)
  803cfc:	003f3206 	br	8039c8 <_realloc_r+0x2a0>
  803d00:	90c00417 	ldw	r3,16(r18)
  803d04:	91000604 	addi	r4,r18,24
  803d08:	b9c00804 	addi	r7,r23,32
  803d0c:	b8c00615 	stw	r3,24(r23)
  803d10:	90800517 	ldw	r2,20(r18)
  803d14:	b8800715 	stw	r2,28(r23)
  803d18:	003fb906 	br	803c00 <_realloc_r+0x4d8>

00803d1c <__srefill_r>:
  803d1c:	defffd04 	addi	sp,sp,-12
  803d20:	dc400115 	stw	r17,4(sp)
  803d24:	dc000015 	stw	r16,0(sp)
  803d28:	dfc00215 	stw	ra,8(sp)
  803d2c:	2023883a 	mov	r17,r4
  803d30:	2821883a 	mov	r16,r5
  803d34:	20000226 	beq	r4,zero,803d40 <__srefill_r+0x24>
  803d38:	20800e17 	ldw	r2,56(r4)
  803d3c:	10004126 	beq	r2,zero,803e44 <__srefill_r+0x128>
  803d40:	80c0030b 	ldhu	r3,12(r16)
  803d44:	80000115 	stw	zero,4(r16)
  803d48:	1880080c 	andi	r2,r3,32
  803d4c:	1000361e 	bne	r2,zero,803e28 <__srefill_r+0x10c>
  803d50:	1880010c 	andi	r2,r3,4
  803d54:	1000211e 	bne	r2,zero,803ddc <__srefill_r+0xc0>
  803d58:	1880040c 	andi	r2,r3,16
  803d5c:	10005026 	beq	r2,zero,803ea0 <__srefill_r+0x184>
  803d60:	1880020c 	andi	r2,r3,8
  803d64:	1000541e 	bne	r2,zero,803eb8 <__srefill_r+0x19c>
  803d68:	8080030b 	ldhu	r2,12(r16)
  803d6c:	10800114 	ori	r2,r2,4
  803d70:	8080030d 	sth	r2,12(r16)
  803d74:	80800417 	ldw	r2,16(r16)
  803d78:	10004526 	beq	r2,zero,803e90 <__srefill_r+0x174>
  803d7c:	8080030b 	ldhu	r2,12(r16)
  803d80:	108000cc 	andi	r2,r2,3
  803d84:	1000361e 	bne	r2,zero,803e60 <__srefill_r+0x144>
  803d88:	81800417 	ldw	r6,16(r16)
  803d8c:	80c00817 	ldw	r3,32(r16)
  803d90:	81400717 	ldw	r5,28(r16)
  803d94:	81c00517 	ldw	r7,20(r16)
  803d98:	8809883a 	mov	r4,r17
  803d9c:	81800015 	stw	r6,0(r16)
  803da0:	183ee83a 	callr	r3
  803da4:	80c0030b 	ldhu	r3,12(r16)
  803da8:	1009883a 	mov	r4,r2
  803dac:	80800115 	stw	r2,4(r16)
  803db0:	00b7ffc4 	movi	r2,-8193
  803db4:	1884703a 	and	r2,r3,r2
  803db8:	8080030d 	sth	r2,12(r16)
  803dbc:	0100230e 	bge	zero,r4,803e4c <__srefill_r+0x130>
  803dc0:	0009883a 	mov	r4,zero
  803dc4:	2005883a 	mov	r2,r4
  803dc8:	dfc00217 	ldw	ra,8(sp)
  803dcc:	dc400117 	ldw	r17,4(sp)
  803dd0:	dc000017 	ldw	r16,0(sp)
  803dd4:	dec00304 	addi	sp,sp,12
  803dd8:	f800283a 	ret
  803ddc:	81400c17 	ldw	r5,48(r16)
  803de0:	283fe426 	beq	r5,zero,803d74 <__srefill_r+0x58>
  803de4:	80801004 	addi	r2,r16,64
  803de8:	28800226 	beq	r5,r2,803df4 <__srefill_r+0xd8>
  803dec:	8809883a 	mov	r4,r17
  803df0:	0801bb00 	call	801bb0 <_free_r>
  803df4:	80800f17 	ldw	r2,60(r16)
  803df8:	80000c15 	stw	zero,48(r16)
  803dfc:	80800115 	stw	r2,4(r16)
  803e00:	103fdc26 	beq	r2,zero,803d74 <__srefill_r+0x58>
  803e04:	80800e17 	ldw	r2,56(r16)
  803e08:	0009883a 	mov	r4,zero
  803e0c:	80800015 	stw	r2,0(r16)
  803e10:	2005883a 	mov	r2,r4
  803e14:	dfc00217 	ldw	ra,8(sp)
  803e18:	dc400117 	ldw	r17,4(sp)
  803e1c:	dc000017 	ldw	r16,0(sp)
  803e20:	dec00304 	addi	sp,sp,12
  803e24:	f800283a 	ret
  803e28:	013fffc4 	movi	r4,-1
  803e2c:	2005883a 	mov	r2,r4
  803e30:	dfc00217 	ldw	ra,8(sp)
  803e34:	dc400117 	ldw	r17,4(sp)
  803e38:	dc000017 	ldw	r16,0(sp)
  803e3c:	dec00304 	addi	sp,sp,12
  803e40:	f800283a 	ret
  803e44:	080162c0 	call	80162c <__sinit>
  803e48:	003fbd06 	br	803d40 <__srefill_r+0x24>
  803e4c:	20000b1e 	bne	r4,zero,803e7c <__srefill_r+0x160>
  803e50:	10800814 	ori	r2,r2,32
  803e54:	013fffc4 	movi	r4,-1
  803e58:	8080030d 	sth	r2,12(r16)
  803e5c:	003fd906 	br	803dc4 <__srefill_r+0xa8>
  803e60:	00802074 	movhi	r2,129
  803e64:	109c5004 	addi	r2,r2,28992
  803e68:	11000017 	ldw	r4,0(r2)
  803e6c:	01402034 	movhi	r5,128
  803e70:	294fb804 	addi	r5,r5,16096
  803e74:	08028fc0 	call	8028fc <_fwalk>
  803e78:	003fc306 	br	803d88 <__srefill_r+0x6c>
  803e7c:	10801014 	ori	r2,r2,64
  803e80:	013fffc4 	movi	r4,-1
  803e84:	8080030d 	sth	r2,12(r16)
  803e88:	80000115 	stw	zero,4(r16)
  803e8c:	003fcd06 	br	803dc4 <__srefill_r+0xa8>
  803e90:	8809883a 	mov	r4,r17
  803e94:	800b883a 	mov	r5,r16
  803e98:	08029b40 	call	8029b4 <__smakebuf_r>
  803e9c:	003fb706 	br	803d7c <__srefill_r+0x60>
  803ea0:	18c01014 	ori	r3,r3,64
  803ea4:	00800244 	movi	r2,9
  803ea8:	013fffc4 	movi	r4,-1
  803eac:	88800015 	stw	r2,0(r17)
  803eb0:	80c0030d 	sth	r3,12(r16)
  803eb4:	003fc306 	br	803dc4 <__srefill_r+0xa8>
  803eb8:	8809883a 	mov	r4,r17
  803ebc:	800b883a 	mov	r5,r16
  803ec0:	080126c0 	call	80126c <_fflush_r>
  803ec4:	103fd81e 	bne	r2,zero,803e28 <__srefill_r+0x10c>
  803ec8:	8080030b 	ldhu	r2,12(r16)
  803ecc:	80000215 	stw	zero,8(r16)
  803ed0:	80000615 	stw	zero,24(r16)
  803ed4:	10bffdcc 	andi	r2,r2,65527
  803ed8:	8080030d 	sth	r2,12(r16)
  803edc:	003fa206 	br	803d68 <__srefill_r+0x4c>

00803ee0 <lflush>:
  803ee0:	20c0030b 	ldhu	r3,12(r4)
  803ee4:	01400244 	movi	r5,9
  803ee8:	0005883a 	mov	r2,zero
  803eec:	18c0024c 	andi	r3,r3,9
  803ef0:	19400126 	beq	r3,r5,803ef8 <lflush+0x18>
  803ef4:	f800283a 	ret
  803ef8:	08014681 	jmpi	801468 <fflush>

00803efc <__srget_r>:
  803efc:	defffe04 	addi	sp,sp,-8
  803f00:	dc000015 	stw	r16,0(sp)
  803f04:	dfc00115 	stw	ra,4(sp)
  803f08:	2821883a 	mov	r16,r5
  803f0c:	0803d1c0 	call	803d1c <__srefill_r>
  803f10:	013fffc4 	movi	r4,-1
  803f14:	1000071e 	bne	r2,zero,803f34 <__srget_r+0x38>
  803f18:	80800117 	ldw	r2,4(r16)
  803f1c:	81000017 	ldw	r4,0(r16)
  803f20:	10bfffc4 	addi	r2,r2,-1
  803f24:	20c00044 	addi	r3,r4,1
  803f28:	80800115 	stw	r2,4(r16)
  803f2c:	21000003 	ldbu	r4,0(r4)
  803f30:	80c00015 	stw	r3,0(r16)
  803f34:	2005883a 	mov	r2,r4
  803f38:	dfc00117 	ldw	ra,4(sp)
  803f3c:	dc000017 	ldw	r16,0(sp)
  803f40:	dec00204 	addi	sp,sp,8
  803f44:	f800283a 	ret

00803f48 <__srget>:
  803f48:	00802074 	movhi	r2,129
  803f4c:	109c4f04 	addi	r2,r2,28988
  803f50:	200b883a 	mov	r5,r4
  803f54:	11000017 	ldw	r4,0(r2)
  803f58:	0803efc1 	jmpi	803efc <__srget_r>

00803f5c <_sbrk_r>:
  803f5c:	defffd04 	addi	sp,sp,-12
  803f60:	dc000015 	stw	r16,0(sp)
  803f64:	040020b4 	movhi	r16,130
  803f68:	8423a004 	addi	r16,r16,-29056
  803f6c:	dc400115 	stw	r17,4(sp)
  803f70:	80000015 	stw	zero,0(r16)
  803f74:	2023883a 	mov	r17,r4
  803f78:	2809883a 	mov	r4,r5
  803f7c:	dfc00215 	stw	ra,8(sp)
  803f80:	08114d00 	call	8114d0 <sbrk>
  803f84:	1007883a 	mov	r3,r2
  803f88:	00bfffc4 	movi	r2,-1
  803f8c:	18800626 	beq	r3,r2,803fa8 <_sbrk_r+0x4c>
  803f90:	1805883a 	mov	r2,r3
  803f94:	dfc00217 	ldw	ra,8(sp)
  803f98:	dc400117 	ldw	r17,4(sp)
  803f9c:	dc000017 	ldw	r16,0(sp)
  803fa0:	dec00304 	addi	sp,sp,12
  803fa4:	f800283a 	ret
  803fa8:	80800017 	ldw	r2,0(r16)
  803fac:	103ff826 	beq	r2,zero,803f90 <_sbrk_r+0x34>
  803fb0:	88800015 	stw	r2,0(r17)
  803fb4:	1805883a 	mov	r2,r3
  803fb8:	dfc00217 	ldw	ra,8(sp)
  803fbc:	dc400117 	ldw	r17,4(sp)
  803fc0:	dc000017 	ldw	r16,0(sp)
  803fc4:	dec00304 	addi	sp,sp,12
  803fc8:	f800283a 	ret

00803fcc <sprintf>:
  803fcc:	deffe504 	addi	sp,sp,-108
  803fd0:	2013883a 	mov	r9,r4
  803fd4:	dfc01815 	stw	ra,96(sp)
  803fd8:	d9801915 	stw	r6,100(sp)
  803fdc:	d9c01a15 	stw	r7,104(sp)
  803fe0:	d8801904 	addi	r2,sp,100
  803fe4:	d8800015 	stw	r2,0(sp)
  803fe8:	00802074 	movhi	r2,129
  803fec:	109c4f04 	addi	r2,r2,28988
  803ff0:	11000017 	ldw	r4,0(r2)
  803ff4:	d9c00017 	ldw	r7,0(sp)
  803ff8:	00808204 	movi	r2,520
  803ffc:	00e00034 	movhi	r3,32768
  804000:	18ffffc4 	addi	r3,r3,-1
  804004:	280d883a 	mov	r6,r5
  804008:	d880040d 	sth	r2,16(sp)
  80400c:	d9400104 	addi	r5,sp,4
  804010:	00bfffc4 	movi	r2,-1
  804014:	d8c00615 	stw	r3,24(sp)
  804018:	d8c00315 	stw	r3,12(sp)
  80401c:	da400515 	stw	r9,20(sp)
  804020:	d880048d 	sth	r2,18(sp)
  804024:	da400115 	stw	r9,4(sp)
  804028:	08043cc0 	call	8043cc <___vfprintf_internal_r>
  80402c:	d8c00117 	ldw	r3,4(sp)
  804030:	18000005 	stb	zero,0(r3)
  804034:	dfc01817 	ldw	ra,96(sp)
  804038:	dec01b04 	addi	sp,sp,108
  80403c:	f800283a 	ret

00804040 <_sprintf_r>:
  804040:	deffe604 	addi	sp,sp,-104
  804044:	2813883a 	mov	r9,r5
  804048:	dfc01815 	stw	ra,96(sp)
  80404c:	d9c01915 	stw	r7,100(sp)
  804050:	d8801904 	addi	r2,sp,100
  804054:	d8800015 	stw	r2,0(sp)
  804058:	100f883a 	mov	r7,r2
  80405c:	00808204 	movi	r2,520
  804060:	00e00034 	movhi	r3,32768
  804064:	18ffffc4 	addi	r3,r3,-1
  804068:	d880040d 	sth	r2,16(sp)
  80406c:	d9400104 	addi	r5,sp,4
  804070:	00bfffc4 	movi	r2,-1
  804074:	d8c00615 	stw	r3,24(sp)
  804078:	d8c00315 	stw	r3,12(sp)
  80407c:	da400515 	stw	r9,20(sp)
  804080:	d880048d 	sth	r2,18(sp)
  804084:	da400115 	stw	r9,4(sp)
  804088:	08043cc0 	call	8043cc <___vfprintf_internal_r>
  80408c:	d8c00117 	ldw	r3,4(sp)
  804090:	18000005 	stb	zero,0(r3)
  804094:	dfc01817 	ldw	ra,96(sp)
  804098:	dec01a04 	addi	sp,sp,104
  80409c:	f800283a 	ret

008040a0 <eofread>:
  8040a0:	0005883a 	mov	r2,zero
  8040a4:	f800283a 	ret

008040a8 <_sscanf_r>:
  8040a8:	deffe404 	addi	sp,sp,-112
  8040ac:	dcc01915 	stw	r19,100(sp)
  8040b0:	2027883a 	mov	r19,r4
  8040b4:	dfc01a15 	stw	ra,104(sp)
  8040b8:	dc401815 	stw	r17,96(sp)
  8040bc:	d9c01b15 	stw	r7,108(sp)
  8040c0:	00808104 	movi	r2,516
  8040c4:	2809883a 	mov	r4,r5
  8040c8:	3023883a 	mov	r17,r6
  8040cc:	d9400115 	stw	r5,4(sp)
  8040d0:	d9400515 	stw	r5,20(sp)
  8040d4:	d880040d 	sth	r2,16(sp)
  8040d8:	08043000 	call	804300 <strlen>
  8040dc:	d8c01b04 	addi	r3,sp,108
  8040e0:	d8c00015 	stw	r3,0(sp)
  8040e4:	180f883a 	mov	r7,r3
  8040e8:	023fffc4 	movi	r8,-1
  8040ec:	00c02034 	movhi	r3,128
  8040f0:	18d02804 	addi	r3,r3,16544
  8040f4:	9809883a 	mov	r4,r19
  8040f8:	880d883a 	mov	r6,r17
  8040fc:	d9400104 	addi	r5,sp,4
  804100:	d8800615 	stw	r2,24(sp)
  804104:	d8c00915 	stw	r3,36(sp)
  804108:	da00048d 	sth	r8,18(sp)
  80410c:	d8800215 	stw	r2,8(sp)
  804110:	d8000d15 	stw	zero,52(sp)
  804114:	d8001215 	stw	zero,72(sp)
  804118:	080629c0 	call	80629c <__svfscanf_r>
  80411c:	dfc01a17 	ldw	ra,104(sp)
  804120:	dcc01917 	ldw	r19,100(sp)
  804124:	dc401817 	ldw	r17,96(sp)
  804128:	dec01c04 	addi	sp,sp,112
  80412c:	f800283a 	ret

00804130 <sscanf>:
  804130:	deffe404 	addi	sp,sp,-112
  804134:	dfc01915 	stw	ra,100(sp)
  804138:	dc401815 	stw	r17,96(sp)
  80413c:	d9801a15 	stw	r6,104(sp)
  804140:	d9c01b15 	stw	r7,108(sp)
  804144:	00808104 	movi	r2,516
  804148:	2823883a 	mov	r17,r5
  80414c:	d9000515 	stw	r4,20(sp)
  804150:	d9000115 	stw	r4,4(sp)
  804154:	d880040d 	sth	r2,16(sp)
  804158:	08043000 	call	804300 <strlen>
  80415c:	d8c01a04 	addi	r3,sp,104
  804160:	d8c00015 	stw	r3,0(sp)
  804164:	00c02074 	movhi	r3,129
  804168:	18dc4f04 	addi	r3,r3,28988
  80416c:	19000017 	ldw	r4,0(r3)
  804170:	d9c00017 	ldw	r7,0(sp)
  804174:	00c02034 	movhi	r3,128
  804178:	18d02804 	addi	r3,r3,16544
  80417c:	023fffc4 	movi	r8,-1
  804180:	880d883a 	mov	r6,r17
  804184:	d9400104 	addi	r5,sp,4
  804188:	d8800615 	stw	r2,24(sp)
  80418c:	d8c00915 	stw	r3,36(sp)
  804190:	da00048d 	sth	r8,18(sp)
  804194:	d8800215 	stw	r2,8(sp)
  804198:	d8000d15 	stw	zero,52(sp)
  80419c:	d8001215 	stw	zero,72(sp)
  8041a0:	080629c0 	call	80629c <__svfscanf_r>
  8041a4:	dfc01917 	ldw	ra,100(sp)
  8041a8:	dc401817 	ldw	r17,96(sp)
  8041ac:	dec01c04 	addi	sp,sp,112
  8041b0:	f800283a 	ret

008041b4 <__sclose>:
  8041b4:	2940038f 	ldh	r5,14(r5)
  8041b8:	0807bd01 	jmpi	807bd0 <_close_r>

008041bc <__sseek>:
  8041bc:	defffe04 	addi	sp,sp,-8
  8041c0:	dc000015 	stw	r16,0(sp)
  8041c4:	2821883a 	mov	r16,r5
  8041c8:	2940038f 	ldh	r5,14(r5)
  8041cc:	dfc00115 	stw	ra,4(sp)
  8041d0:	08098480 	call	809848 <_lseek_r>
  8041d4:	1007883a 	mov	r3,r2
  8041d8:	00bfffc4 	movi	r2,-1
  8041dc:	18800926 	beq	r3,r2,804204 <__sseek+0x48>
  8041e0:	8080030b 	ldhu	r2,12(r16)
  8041e4:	80c01415 	stw	r3,80(r16)
  8041e8:	10840014 	ori	r2,r2,4096
  8041ec:	8080030d 	sth	r2,12(r16)
  8041f0:	1805883a 	mov	r2,r3
  8041f4:	dfc00117 	ldw	ra,4(sp)
  8041f8:	dc000017 	ldw	r16,0(sp)
  8041fc:	dec00204 	addi	sp,sp,8
  804200:	f800283a 	ret
  804204:	8080030b 	ldhu	r2,12(r16)
  804208:	10bbffcc 	andi	r2,r2,61439
  80420c:	8080030d 	sth	r2,12(r16)
  804210:	1805883a 	mov	r2,r3
  804214:	dfc00117 	ldw	ra,4(sp)
  804218:	dc000017 	ldw	r16,0(sp)
  80421c:	dec00204 	addi	sp,sp,8
  804220:	f800283a 	ret

00804224 <__swrite>:
  804224:	2880030b 	ldhu	r2,12(r5)
  804228:	defffb04 	addi	sp,sp,-20
  80422c:	dcc00315 	stw	r19,12(sp)
  804230:	1080400c 	andi	r2,r2,256
  804234:	dc800215 	stw	r18,8(sp)
  804238:	dc400115 	stw	r17,4(sp)
  80423c:	dc000015 	stw	r16,0(sp)
  804240:	3027883a 	mov	r19,r6
  804244:	3825883a 	mov	r18,r7
  804248:	dfc00415 	stw	ra,16(sp)
  80424c:	2821883a 	mov	r16,r5
  804250:	000d883a 	mov	r6,zero
  804254:	01c00084 	movi	r7,2
  804258:	2023883a 	mov	r17,r4
  80425c:	10000226 	beq	r2,zero,804268 <__swrite+0x44>
  804260:	2940038f 	ldh	r5,14(r5)
  804264:	08098480 	call	809848 <_lseek_r>
  804268:	8080030b 	ldhu	r2,12(r16)
  80426c:	8140038f 	ldh	r5,14(r16)
  804270:	8809883a 	mov	r4,r17
  804274:	10bbffcc 	andi	r2,r2,61439
  804278:	980d883a 	mov	r6,r19
  80427c:	900f883a 	mov	r7,r18
  804280:	8080030d 	sth	r2,12(r16)
  804284:	dfc00417 	ldw	ra,16(sp)
  804288:	dcc00317 	ldw	r19,12(sp)
  80428c:	dc800217 	ldw	r18,8(sp)
  804290:	dc400117 	ldw	r17,4(sp)
  804294:	dc000017 	ldw	r16,0(sp)
  804298:	dec00504 	addi	sp,sp,20
  80429c:	0807a1c1 	jmpi	807a1c <_write_r>

008042a0 <__sread>:
  8042a0:	defffe04 	addi	sp,sp,-8
  8042a4:	dc000015 	stw	r16,0(sp)
  8042a8:	2821883a 	mov	r16,r5
  8042ac:	2940038f 	ldh	r5,14(r5)
  8042b0:	dfc00115 	stw	ra,4(sp)
  8042b4:	080a9b40 	call	80a9b4 <_read_r>
  8042b8:	1007883a 	mov	r3,r2
  8042bc:	10000816 	blt	r2,zero,8042e0 <__sread+0x40>
  8042c0:	80801417 	ldw	r2,80(r16)
  8042c4:	10c5883a 	add	r2,r2,r3
  8042c8:	80801415 	stw	r2,80(r16)
  8042cc:	1805883a 	mov	r2,r3
  8042d0:	dfc00117 	ldw	ra,4(sp)
  8042d4:	dc000017 	ldw	r16,0(sp)
  8042d8:	dec00204 	addi	sp,sp,8
  8042dc:	f800283a 	ret
  8042e0:	8080030b 	ldhu	r2,12(r16)
  8042e4:	10bbffcc 	andi	r2,r2,61439
  8042e8:	8080030d 	sth	r2,12(r16)
  8042ec:	1805883a 	mov	r2,r3
  8042f0:	dfc00117 	ldw	ra,4(sp)
  8042f4:	dc000017 	ldw	r16,0(sp)
  8042f8:	dec00204 	addi	sp,sp,8
  8042fc:	f800283a 	ret

00804300 <strlen>:
  804300:	208000cc 	andi	r2,r4,3
  804304:	2011883a 	mov	r8,r4
  804308:	1000161e 	bne	r2,zero,804364 <strlen+0x64>
  80430c:	20c00017 	ldw	r3,0(r4)
  804310:	017fbff4 	movhi	r5,65279
  804314:	297fbfc4 	addi	r5,r5,-257
  804318:	01e02074 	movhi	r7,32897
  80431c:	39e02004 	addi	r7,r7,-32640
  804320:	1945883a 	add	r2,r3,r5
  804324:	11c4703a 	and	r2,r2,r7
  804328:	00c6303a 	nor	r3,zero,r3
  80432c:	1886703a 	and	r3,r3,r2
  804330:	18000c1e 	bne	r3,zero,804364 <strlen+0x64>
  804334:	280d883a 	mov	r6,r5
  804338:	380b883a 	mov	r5,r7
  80433c:	21000104 	addi	r4,r4,4
  804340:	20800017 	ldw	r2,0(r4)
  804344:	1187883a 	add	r3,r2,r6
  804348:	1946703a 	and	r3,r3,r5
  80434c:	0084303a 	nor	r2,zero,r2
  804350:	10c4703a 	and	r2,r2,r3
  804354:	103ff926 	beq	r2,zero,80433c <strlen+0x3c>
  804358:	20800007 	ldb	r2,0(r4)
  80435c:	10000326 	beq	r2,zero,80436c <strlen+0x6c>
  804360:	21000044 	addi	r4,r4,1
  804364:	20800007 	ldb	r2,0(r4)
  804368:	103ffd1e 	bne	r2,zero,804360 <strlen+0x60>
  80436c:	2205c83a 	sub	r2,r4,r8
  804370:	f800283a 	ret

00804374 <__sprint_r>:
  804374:	30800217 	ldw	r2,8(r6)
  804378:	defffe04 	addi	sp,sp,-8
  80437c:	dc000015 	stw	r16,0(sp)
  804380:	dfc00115 	stw	ra,4(sp)
  804384:	3021883a 	mov	r16,r6
  804388:	0007883a 	mov	r3,zero
  80438c:	1000061e 	bne	r2,zero,8043a8 <__sprint_r+0x34>
  804390:	1805883a 	mov	r2,r3
  804394:	30000115 	stw	zero,4(r6)
  804398:	dfc00117 	ldw	ra,4(sp)
  80439c:	dc000017 	ldw	r16,0(sp)
  8043a0:	dec00204 	addi	sp,sp,8
  8043a4:	f800283a 	ret
  8043a8:	08023980 	call	802398 <__sfvwrite_r>
  8043ac:	1007883a 	mov	r3,r2
  8043b0:	1805883a 	mov	r2,r3
  8043b4:	80000115 	stw	zero,4(r16)
  8043b8:	80000215 	stw	zero,8(r16)
  8043bc:	dfc00117 	ldw	ra,4(sp)
  8043c0:	dc000017 	ldw	r16,0(sp)
  8043c4:	dec00204 	addi	sp,sp,8
  8043c8:	f800283a 	ret

008043cc <___vfprintf_internal_r>:
  8043cc:	defea304 	addi	sp,sp,-1396
  8043d0:	dd815915 	stw	r22,1380(sp)
  8043d4:	dc015315 	stw	r16,1356(sp)
  8043d8:	d9c15215 	stw	r7,1352(sp)
  8043dc:	dfc15c15 	stw	ra,1392(sp)
  8043e0:	df015b15 	stw	fp,1388(sp)
  8043e4:	ddc15a15 	stw	r23,1384(sp)
  8043e8:	dd415815 	stw	r21,1376(sp)
  8043ec:	dd015715 	stw	r20,1372(sp)
  8043f0:	dcc15615 	stw	r19,1368(sp)
  8043f4:	dc815515 	stw	r18,1364(sp)
  8043f8:	dc415415 	stw	r17,1360(sp)
  8043fc:	282d883a 	mov	r22,r5
  804400:	3021883a 	mov	r16,r6
  804404:	d9015015 	stw	r4,1344(sp)
  804408:	080978c0 	call	80978c <_localeconv_r>
  80440c:	10800017 	ldw	r2,0(r2)
  804410:	d9c15217 	ldw	r7,1352(sp)
  804414:	d8814a15 	stw	r2,1320(sp)
  804418:	d8815017 	ldw	r2,1344(sp)
  80441c:	10000226 	beq	r2,zero,804428 <___vfprintf_internal_r+0x5c>
  804420:	10800e17 	ldw	r2,56(r2)
  804424:	10020d26 	beq	r2,zero,804c5c <___vfprintf_internal_r+0x890>
  804428:	b080030b 	ldhu	r2,12(r22)
  80442c:	1080020c 	andi	r2,r2,8
  804430:	10020e26 	beq	r2,zero,804c6c <___vfprintf_internal_r+0x8a0>
  804434:	b0800417 	ldw	r2,16(r22)
  804438:	10020c26 	beq	r2,zero,804c6c <___vfprintf_internal_r+0x8a0>
  80443c:	b200030b 	ldhu	r8,12(r22)
  804440:	00800284 	movi	r2,10
  804444:	40c0068c 	andi	r3,r8,26
  804448:	18802f1e 	bne	r3,r2,804508 <___vfprintf_internal_r+0x13c>
  80444c:	b080038f 	ldh	r2,14(r22)
  804450:	10002d16 	blt	r2,zero,804508 <___vfprintf_internal_r+0x13c>
  804454:	b240038b 	ldhu	r9,14(r22)
  804458:	b2800717 	ldw	r10,28(r22)
  80445c:	b2c00917 	ldw	r11,36(r22)
  804460:	d9015017 	ldw	r4,1344(sp)
  804464:	dc402a04 	addi	r17,sp,168
  804468:	d8804104 	addi	r2,sp,260
  80446c:	00c10004 	movi	r3,1024
  804470:	423fff4c 	andi	r8,r8,65533
  804474:	800d883a 	mov	r6,r16
  804478:	880b883a 	mov	r5,r17
  80447c:	da002d0d 	sth	r8,180(sp)
  804480:	da402d8d 	sth	r9,182(sp)
  804484:	da803115 	stw	r10,196(sp)
  804488:	dac03315 	stw	r11,204(sp)
  80448c:	d8802e15 	stw	r2,184(sp)
  804490:	d8c02f15 	stw	r3,188(sp)
  804494:	d8802a15 	stw	r2,168(sp)
  804498:	d8c02c15 	stw	r3,176(sp)
  80449c:	d8003015 	stw	zero,192(sp)
  8044a0:	08043cc0 	call	8043cc <___vfprintf_internal_r>
  8044a4:	d8814c15 	stw	r2,1328(sp)
  8044a8:	10000416 	blt	r2,zero,8044bc <___vfprintf_internal_r+0xf0>
  8044ac:	d9015017 	ldw	r4,1344(sp)
  8044b0:	880b883a 	mov	r5,r17
  8044b4:	080126c0 	call	80126c <_fflush_r>
  8044b8:	1002321e 	bne	r2,zero,804d84 <___vfprintf_internal_r+0x9b8>
  8044bc:	d8802d0b 	ldhu	r2,180(sp)
  8044c0:	1080100c 	andi	r2,r2,64
  8044c4:	10000326 	beq	r2,zero,8044d4 <___vfprintf_internal_r+0x108>
  8044c8:	b080030b 	ldhu	r2,12(r22)
  8044cc:	10801014 	ori	r2,r2,64
  8044d0:	b080030d 	sth	r2,12(r22)
  8044d4:	d8814c17 	ldw	r2,1328(sp)
  8044d8:	dfc15c17 	ldw	ra,1392(sp)
  8044dc:	df015b17 	ldw	fp,1388(sp)
  8044e0:	ddc15a17 	ldw	r23,1384(sp)
  8044e4:	dd815917 	ldw	r22,1380(sp)
  8044e8:	dd415817 	ldw	r21,1376(sp)
  8044ec:	dd015717 	ldw	r20,1372(sp)
  8044f0:	dcc15617 	ldw	r19,1368(sp)
  8044f4:	dc815517 	ldw	r18,1364(sp)
  8044f8:	dc415417 	ldw	r17,1360(sp)
  8044fc:	dc015317 	ldw	r16,1356(sp)
  804500:	dec15d04 	addi	sp,sp,1396
  804504:	f800283a 	ret
  804508:	0005883a 	mov	r2,zero
  80450c:	0007883a 	mov	r3,zero
  804510:	dd401a04 	addi	r21,sp,104
  804514:	d8814315 	stw	r2,1292(sp)
  804518:	802f883a 	mov	r23,r16
  80451c:	d8c14415 	stw	r3,1296(sp)
  804520:	d8014c15 	stw	zero,1328(sp)
  804524:	d8014915 	stw	zero,1316(sp)
  804528:	d8014515 	stw	zero,1300(sp)
  80452c:	d8014815 	stw	zero,1312(sp)
  804530:	dd400d15 	stw	r21,52(sp)
  804534:	d8000f15 	stw	zero,60(sp)
  804538:	d8000e15 	stw	zero,56(sp)
  80453c:	b8800007 	ldb	r2,0(r23)
  804540:	10001926 	beq	r2,zero,8045a8 <___vfprintf_internal_r+0x1dc>
  804544:	00c00944 	movi	r3,37
  804548:	10c01726 	beq	r2,r3,8045a8 <___vfprintf_internal_r+0x1dc>
  80454c:	b821883a 	mov	r16,r23
  804550:	00000106 	br	804558 <___vfprintf_internal_r+0x18c>
  804554:	10c00326 	beq	r2,r3,804564 <___vfprintf_internal_r+0x198>
  804558:	84000044 	addi	r16,r16,1
  80455c:	80800007 	ldb	r2,0(r16)
  804560:	103ffc1e 	bne	r2,zero,804554 <___vfprintf_internal_r+0x188>
  804564:	85e7c83a 	sub	r19,r16,r23
  804568:	98000e26 	beq	r19,zero,8045a4 <___vfprintf_internal_r+0x1d8>
  80456c:	dc800f17 	ldw	r18,60(sp)
  804570:	dc400e17 	ldw	r17,56(sp)
  804574:	008001c4 	movi	r2,7
  804578:	94e5883a 	add	r18,r18,r19
  80457c:	8c400044 	addi	r17,r17,1
  804580:	adc00015 	stw	r23,0(r21)
  804584:	dc800f15 	stw	r18,60(sp)
  804588:	acc00115 	stw	r19,4(r21)
  80458c:	dc400e15 	stw	r17,56(sp)
  804590:	14428b16 	blt	r2,r17,804fc0 <___vfprintf_internal_r+0xbf4>
  804594:	ad400204 	addi	r21,r21,8
  804598:	d9014c17 	ldw	r4,1328(sp)
  80459c:	24c9883a 	add	r4,r4,r19
  8045a0:	d9014c15 	stw	r4,1328(sp)
  8045a4:	802f883a 	mov	r23,r16
  8045a8:	b8800007 	ldb	r2,0(r23)
  8045ac:	10013c26 	beq	r2,zero,804aa0 <___vfprintf_internal_r+0x6d4>
  8045b0:	bdc00044 	addi	r23,r23,1
  8045b4:	d8000405 	stb	zero,16(sp)
  8045b8:	b8c00007 	ldb	r3,0(r23)
  8045bc:	04ffffc4 	movi	r19,-1
  8045c0:	d8014d15 	stw	zero,1332(sp)
  8045c4:	d8014b15 	stw	zero,1324(sp)
  8045c8:	d8c14e15 	stw	r3,1336(sp)
  8045cc:	bdc00044 	addi	r23,r23,1
  8045d0:	d9414e17 	ldw	r5,1336(sp)
  8045d4:	00801604 	movi	r2,88
  8045d8:	28fff804 	addi	r3,r5,-32
  8045dc:	10c06036 	bltu	r2,r3,804760 <___vfprintf_internal_r+0x394>
  8045e0:	18c5883a 	add	r2,r3,r3
  8045e4:	1085883a 	add	r2,r2,r2
  8045e8:	00c02034 	movhi	r3,128
  8045ec:	18d17f04 	addi	r3,r3,17916
  8045f0:	10c5883a 	add	r2,r2,r3
  8045f4:	11000017 	ldw	r4,0(r2)
  8045f8:	2000683a 	jmp	r4
  8045fc:	00805570 	cmpltui	r2,zero,341
  804600:	00804760 	cmpeqi	r2,zero,285
  804604:	00804760 	cmpeqi	r2,zero,285
  804608:	0080555c 	xori	r2,zero,341
  80460c:	00804760 	cmpeqi	r2,zero,285
  804610:	00804760 	cmpeqi	r2,zero,285
  804614:	00804760 	cmpeqi	r2,zero,285
  804618:	00804760 	cmpeqi	r2,zero,285
  80461c:	00804760 	cmpeqi	r2,zero,285
  804620:	00804760 	cmpeqi	r2,zero,285
  804624:	0080533c 	xorhi	r2,zero,332
  804628:	0080554c 	andi	r2,zero,341
  80462c:	00804760 	cmpeqi	r2,zero,285
  804630:	00805354 	movui	r2,333
  804634:	008055e8 	cmpgeui	r2,zero,343
  804638:	00804760 	cmpeqi	r2,zero,285
  80463c:	008055d4 	movui	r2,343
  804640:	0080559c 	xori	r2,zero,342
  804644:	0080559c 	xori	r2,zero,342
  804648:	0080559c 	xori	r2,zero,342
  80464c:	0080559c 	xori	r2,zero,342
  804650:	0080559c 	xori	r2,zero,342
  804654:	0080559c 	xori	r2,zero,342
  804658:	0080559c 	xori	r2,zero,342
  80465c:	0080559c 	xori	r2,zero,342
  804660:	0080559c 	xori	r2,zero,342
  804664:	00804760 	cmpeqi	r2,zero,285
  804668:	00804760 	cmpeqi	r2,zero,285
  80466c:	00804760 	cmpeqi	r2,zero,285
  804670:	00804760 	cmpeqi	r2,zero,285
  804674:	00804760 	cmpeqi	r2,zero,285
  804678:	00804760 	cmpeqi	r2,zero,285
  80467c:	00804760 	cmpeqi	r2,zero,285
  804680:	00804760 	cmpeqi	r2,zero,285
  804684:	00804760 	cmpeqi	r2,zero,285
  804688:	00804760 	cmpeqi	r2,zero,285
  80468c:	00804db8 	rdprs	r2,zero,310
  804690:	00805424 	muli	r2,zero,336
  804694:	00804760 	cmpeqi	r2,zero,285
  804698:	00805424 	muli	r2,zero,336
  80469c:	00804760 	cmpeqi	r2,zero,285
  8046a0:	00804760 	cmpeqi	r2,zero,285
  8046a4:	00804760 	cmpeqi	r2,zero,285
  8046a8:	00804760 	cmpeqi	r2,zero,285
  8046ac:	00805588 	cmpgei	r2,zero,342
  8046b0:	00804760 	cmpeqi	r2,zero,285
  8046b4:	00804760 	cmpeqi	r2,zero,285
  8046b8:	00804e6c 	andhi	r2,zero,313
  8046bc:	00804760 	cmpeqi	r2,zero,285
  8046c0:	00804760 	cmpeqi	r2,zero,285
  8046c4:	00804760 	cmpeqi	r2,zero,285
  8046c8:	00804760 	cmpeqi	r2,zero,285
  8046cc:	00804760 	cmpeqi	r2,zero,285
  8046d0:	00804eb8 	rdprs	r2,zero,314
  8046d4:	00804760 	cmpeqi	r2,zero,285
  8046d8:	00804760 	cmpeqi	r2,zero,285
  8046dc:	008054d8 	cmpnei	r2,zero,339
  8046e0:	00804760 	cmpeqi	r2,zero,285
  8046e4:	00804760 	cmpeqi	r2,zero,285
  8046e8:	00804760 	cmpeqi	r2,zero,285
  8046ec:	00804760 	cmpeqi	r2,zero,285
  8046f0:	00804760 	cmpeqi	r2,zero,285
  8046f4:	00804760 	cmpeqi	r2,zero,285
  8046f8:	00804760 	cmpeqi	r2,zero,285
  8046fc:	00804760 	cmpeqi	r2,zero,285
  804700:	00804760 	cmpeqi	r2,zero,285
  804704:	00804760 	cmpeqi	r2,zero,285
  804708:	008054ac 	andhi	r2,zero,338
  80470c:	00804dc4 	movi	r2,311
  804710:	00805424 	muli	r2,zero,336
  804714:	00805424 	muli	r2,zero,336
  804718:	00805424 	muli	r2,zero,336
  80471c:	00805410 	cmplti	r2,zero,336
  804720:	00804dc4 	movi	r2,311
  804724:	00804760 	cmpeqi	r2,zero,285
  804728:	00804760 	cmpeqi	r2,zero,285
  80472c:	00805398 	cmpnei	r2,zero,334
  804730:	00804760 	cmpeqi	r2,zero,285
  804734:	00805368 	cmpgeui	r2,zero,333
  804738:	00804e78 	rdprs	r2,zero,313
  80473c:	008053c8 	cmpgei	r2,zero,335
  804740:	008053b4 	movhi	r2,334
  804744:	00804760 	cmpeqi	r2,zero,285
  804748:	00805644 	movi	r2,345
  80474c:	00804760 	cmpeqi	r2,zero,285
  804750:	00804ec4 	movi	r2,315
  804754:	00804760 	cmpeqi	r2,zero,285
  804758:	00804760 	cmpeqi	r2,zero,285
  80475c:	0080553c 	xorhi	r2,zero,340
  804760:	d9014e17 	ldw	r4,1336(sp)
  804764:	2000ce26 	beq	r4,zero,804aa0 <___vfprintf_internal_r+0x6d4>
  804768:	01400044 	movi	r5,1
  80476c:	d9801004 	addi	r6,sp,64
  804770:	d9c14115 	stw	r7,1284(sp)
  804774:	d9414615 	stw	r5,1304(sp)
  804778:	d9814215 	stw	r6,1288(sp)
  80477c:	280f883a 	mov	r7,r5
  804780:	d9001005 	stb	r4,64(sp)
  804784:	d8000405 	stb	zero,16(sp)
  804788:	d8014715 	stw	zero,1308(sp)
  80478c:	d8c14d17 	ldw	r3,1332(sp)
  804790:	1880008c 	andi	r2,r3,2
  804794:	1005003a 	cmpeq	r2,r2,zero
  804798:	d8815115 	stw	r2,1348(sp)
  80479c:	1000031e 	bne	r2,zero,8047ac <___vfprintf_internal_r+0x3e0>
  8047a0:	d9014617 	ldw	r4,1304(sp)
  8047a4:	21000084 	addi	r4,r4,2
  8047a8:	d9014615 	stw	r4,1304(sp)
  8047ac:	d9414d17 	ldw	r5,1332(sp)
  8047b0:	2940210c 	andi	r5,r5,132
  8047b4:	d9414f15 	stw	r5,1340(sp)
  8047b8:	28002d1e 	bne	r5,zero,804870 <___vfprintf_internal_r+0x4a4>
  8047bc:	d9814b17 	ldw	r6,1324(sp)
  8047c0:	d8814617 	ldw	r2,1304(sp)
  8047c4:	30a1c83a 	sub	r16,r6,r2
  8047c8:	0400290e 	bge	zero,r16,804870 <___vfprintf_internal_r+0x4a4>
  8047cc:	00800404 	movi	r2,16
  8047d0:	1404580e 	bge	r2,r16,805934 <___vfprintf_internal_r+0x1568>
  8047d4:	dc800f17 	ldw	r18,60(sp)
  8047d8:	dc400e17 	ldw	r17,56(sp)
  8047dc:	1027883a 	mov	r19,r2
  8047e0:	07002074 	movhi	fp,129
  8047e4:	e713b904 	addi	fp,fp,20196
  8047e8:	050001c4 	movi	r20,7
  8047ec:	00000306 	br	8047fc <___vfprintf_internal_r+0x430>
  8047f0:	843ffc04 	addi	r16,r16,-16
  8047f4:	ad400204 	addi	r21,r21,8
  8047f8:	9c00130e 	bge	r19,r16,804848 <___vfprintf_internal_r+0x47c>
  8047fc:	94800404 	addi	r18,r18,16
  804800:	8c400044 	addi	r17,r17,1
  804804:	af000015 	stw	fp,0(r21)
  804808:	acc00115 	stw	r19,4(r21)
  80480c:	dc800f15 	stw	r18,60(sp)
  804810:	dc400e15 	stw	r17,56(sp)
  804814:	a47ff60e 	bge	r20,r17,8047f0 <___vfprintf_internal_r+0x424>
  804818:	d9015017 	ldw	r4,1344(sp)
  80481c:	b00b883a 	mov	r5,r22
  804820:	d9800d04 	addi	r6,sp,52
  804824:	d9c15215 	stw	r7,1352(sp)
  804828:	08043740 	call	804374 <__sprint_r>
  80482c:	d9c15217 	ldw	r7,1352(sp)
  804830:	10009e1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804834:	843ffc04 	addi	r16,r16,-16
  804838:	dc800f17 	ldw	r18,60(sp)
  80483c:	dc400e17 	ldw	r17,56(sp)
  804840:	dd401a04 	addi	r21,sp,104
  804844:	9c3fed16 	blt	r19,r16,8047fc <___vfprintf_internal_r+0x430>
  804848:	9425883a 	add	r18,r18,r16
  80484c:	8c400044 	addi	r17,r17,1
  804850:	008001c4 	movi	r2,7
  804854:	af000015 	stw	fp,0(r21)
  804858:	ac000115 	stw	r16,4(r21)
  80485c:	dc800f15 	stw	r18,60(sp)
  804860:	dc400e15 	stw	r17,56(sp)
  804864:	1441f516 	blt	r2,r17,80503c <___vfprintf_internal_r+0xc70>
  804868:	ad400204 	addi	r21,r21,8
  80486c:	00000206 	br	804878 <___vfprintf_internal_r+0x4ac>
  804870:	dc800f17 	ldw	r18,60(sp)
  804874:	dc400e17 	ldw	r17,56(sp)
  804878:	d8800407 	ldb	r2,16(sp)
  80487c:	10000b26 	beq	r2,zero,8048ac <___vfprintf_internal_r+0x4e0>
  804880:	00800044 	movi	r2,1
  804884:	94800044 	addi	r18,r18,1
  804888:	8c400044 	addi	r17,r17,1
  80488c:	a8800115 	stw	r2,4(r21)
  804890:	d8c00404 	addi	r3,sp,16
  804894:	008001c4 	movi	r2,7
  804898:	a8c00015 	stw	r3,0(r21)
  80489c:	dc800f15 	stw	r18,60(sp)
  8048a0:	dc400e15 	stw	r17,56(sp)
  8048a4:	1441da16 	blt	r2,r17,805010 <___vfprintf_internal_r+0xc44>
  8048a8:	ad400204 	addi	r21,r21,8
  8048ac:	d9015117 	ldw	r4,1348(sp)
  8048b0:	20000b1e 	bne	r4,zero,8048e0 <___vfprintf_internal_r+0x514>
  8048b4:	d8800504 	addi	r2,sp,20
  8048b8:	94800084 	addi	r18,r18,2
  8048bc:	8c400044 	addi	r17,r17,1
  8048c0:	a8800015 	stw	r2,0(r21)
  8048c4:	00c00084 	movi	r3,2
  8048c8:	008001c4 	movi	r2,7
  8048cc:	a8c00115 	stw	r3,4(r21)
  8048d0:	dc800f15 	stw	r18,60(sp)
  8048d4:	dc400e15 	stw	r17,56(sp)
  8048d8:	1441c216 	blt	r2,r17,804fe4 <___vfprintf_internal_r+0xc18>
  8048dc:	ad400204 	addi	r21,r21,8
  8048e0:	d9414f17 	ldw	r5,1340(sp)
  8048e4:	00802004 	movi	r2,128
  8048e8:	2880b126 	beq	r5,r2,804bb0 <___vfprintf_internal_r+0x7e4>
  8048ec:	d8c14717 	ldw	r3,1308(sp)
  8048f0:	19e1c83a 	sub	r16,r3,r7
  8048f4:	0400260e 	bge	zero,r16,804990 <___vfprintf_internal_r+0x5c4>
  8048f8:	00800404 	movi	r2,16
  8048fc:	1403c90e 	bge	r2,r16,805824 <___vfprintf_internal_r+0x1458>
  804900:	1027883a 	mov	r19,r2
  804904:	07002074 	movhi	fp,129
  804908:	e713b504 	addi	fp,fp,20180
  80490c:	050001c4 	movi	r20,7
  804910:	00000306 	br	804920 <___vfprintf_internal_r+0x554>
  804914:	843ffc04 	addi	r16,r16,-16
  804918:	ad400204 	addi	r21,r21,8
  80491c:	9c00130e 	bge	r19,r16,80496c <___vfprintf_internal_r+0x5a0>
  804920:	94800404 	addi	r18,r18,16
  804924:	8c400044 	addi	r17,r17,1
  804928:	af000015 	stw	fp,0(r21)
  80492c:	acc00115 	stw	r19,4(r21)
  804930:	dc800f15 	stw	r18,60(sp)
  804934:	dc400e15 	stw	r17,56(sp)
  804938:	a47ff60e 	bge	r20,r17,804914 <___vfprintf_internal_r+0x548>
  80493c:	d9015017 	ldw	r4,1344(sp)
  804940:	b00b883a 	mov	r5,r22
  804944:	d9800d04 	addi	r6,sp,52
  804948:	d9c15215 	stw	r7,1352(sp)
  80494c:	08043740 	call	804374 <__sprint_r>
  804950:	d9c15217 	ldw	r7,1352(sp)
  804954:	1000551e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804958:	843ffc04 	addi	r16,r16,-16
  80495c:	dc800f17 	ldw	r18,60(sp)
  804960:	dc400e17 	ldw	r17,56(sp)
  804964:	dd401a04 	addi	r21,sp,104
  804968:	9c3fed16 	blt	r19,r16,804920 <___vfprintf_internal_r+0x554>
  80496c:	9425883a 	add	r18,r18,r16
  804970:	8c400044 	addi	r17,r17,1
  804974:	008001c4 	movi	r2,7
  804978:	af000015 	stw	fp,0(r21)
  80497c:	ac000115 	stw	r16,4(r21)
  804980:	dc800f15 	stw	r18,60(sp)
  804984:	dc400e15 	stw	r17,56(sp)
  804988:	14418216 	blt	r2,r17,804f94 <___vfprintf_internal_r+0xbc8>
  80498c:	ad400204 	addi	r21,r21,8
  804990:	d9014d17 	ldw	r4,1332(sp)
  804994:	2080400c 	andi	r2,r4,256
  804998:	10004a1e 	bne	r2,zero,804ac4 <___vfprintf_internal_r+0x6f8>
  80499c:	d9414217 	ldw	r5,1288(sp)
  8049a0:	91e5883a 	add	r18,r18,r7
  8049a4:	8c400044 	addi	r17,r17,1
  8049a8:	008001c4 	movi	r2,7
  8049ac:	a9400015 	stw	r5,0(r21)
  8049b0:	a9c00115 	stw	r7,4(r21)
  8049b4:	dc800f15 	stw	r18,60(sp)
  8049b8:	dc400e15 	stw	r17,56(sp)
  8049bc:	14416716 	blt	r2,r17,804f5c <___vfprintf_internal_r+0xb90>
  8049c0:	a8c00204 	addi	r3,r21,8
  8049c4:	d9814d17 	ldw	r6,1332(sp)
  8049c8:	3080010c 	andi	r2,r6,4
  8049cc:	10002826 	beq	r2,zero,804a70 <___vfprintf_internal_r+0x6a4>
  8049d0:	d8814b17 	ldw	r2,1324(sp)
  8049d4:	d9014617 	ldw	r4,1304(sp)
  8049d8:	1121c83a 	sub	r16,r2,r4
  8049dc:	0400240e 	bge	zero,r16,804a70 <___vfprintf_internal_r+0x6a4>
  8049e0:	00800404 	movi	r2,16
  8049e4:	14044f0e 	bge	r2,r16,805b24 <___vfprintf_internal_r+0x1758>
  8049e8:	dc400e17 	ldw	r17,56(sp)
  8049ec:	1027883a 	mov	r19,r2
  8049f0:	07002074 	movhi	fp,129
  8049f4:	e713b904 	addi	fp,fp,20196
  8049f8:	050001c4 	movi	r20,7
  8049fc:	00000306 	br	804a0c <___vfprintf_internal_r+0x640>
  804a00:	843ffc04 	addi	r16,r16,-16
  804a04:	18c00204 	addi	r3,r3,8
  804a08:	9c00110e 	bge	r19,r16,804a50 <___vfprintf_internal_r+0x684>
  804a0c:	94800404 	addi	r18,r18,16
  804a10:	8c400044 	addi	r17,r17,1
  804a14:	1f000015 	stw	fp,0(r3)
  804a18:	1cc00115 	stw	r19,4(r3)
  804a1c:	dc800f15 	stw	r18,60(sp)
  804a20:	dc400e15 	stw	r17,56(sp)
  804a24:	a47ff60e 	bge	r20,r17,804a00 <___vfprintf_internal_r+0x634>
  804a28:	d9015017 	ldw	r4,1344(sp)
  804a2c:	b00b883a 	mov	r5,r22
  804a30:	d9800d04 	addi	r6,sp,52
  804a34:	08043740 	call	804374 <__sprint_r>
  804a38:	10001c1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804a3c:	843ffc04 	addi	r16,r16,-16
  804a40:	dc800f17 	ldw	r18,60(sp)
  804a44:	dc400e17 	ldw	r17,56(sp)
  804a48:	d8c01a04 	addi	r3,sp,104
  804a4c:	9c3fef16 	blt	r19,r16,804a0c <___vfprintf_internal_r+0x640>
  804a50:	9425883a 	add	r18,r18,r16
  804a54:	8c400044 	addi	r17,r17,1
  804a58:	008001c4 	movi	r2,7
  804a5c:	1f000015 	stw	fp,0(r3)
  804a60:	1c000115 	stw	r16,4(r3)
  804a64:	dc800f15 	stw	r18,60(sp)
  804a68:	dc400e15 	stw	r17,56(sp)
  804a6c:	1440cb16 	blt	r2,r17,804d9c <___vfprintf_internal_r+0x9d0>
  804a70:	d8814b17 	ldw	r2,1324(sp)
  804a74:	d9414617 	ldw	r5,1304(sp)
  804a78:	1140010e 	bge	r2,r5,804a80 <___vfprintf_internal_r+0x6b4>
  804a7c:	2805883a 	mov	r2,r5
  804a80:	d9814c17 	ldw	r6,1328(sp)
  804a84:	308d883a 	add	r6,r6,r2
  804a88:	d9814c15 	stw	r6,1328(sp)
  804a8c:	90013b1e 	bne	r18,zero,804f7c <___vfprintf_internal_r+0xbb0>
  804a90:	d9c14117 	ldw	r7,1284(sp)
  804a94:	dd401a04 	addi	r21,sp,104
  804a98:	d8000e15 	stw	zero,56(sp)
  804a9c:	003ea706 	br	80453c <___vfprintf_internal_r+0x170>
  804aa0:	d8800f17 	ldw	r2,60(sp)
  804aa4:	10053f1e 	bne	r2,zero,805fa4 <___vfprintf_internal_r+0x1bd8>
  804aa8:	d8000e15 	stw	zero,56(sp)
  804aac:	b080030b 	ldhu	r2,12(r22)
  804ab0:	1080100c 	andi	r2,r2,64
  804ab4:	103e8726 	beq	r2,zero,8044d4 <___vfprintf_internal_r+0x108>
  804ab8:	00bfffc4 	movi	r2,-1
  804abc:	d8814c15 	stw	r2,1328(sp)
  804ac0:	003e8406 	br	8044d4 <___vfprintf_internal_r+0x108>
  804ac4:	d9814e17 	ldw	r6,1336(sp)
  804ac8:	00801944 	movi	r2,101
  804acc:	11806e16 	blt	r2,r6,804c88 <___vfprintf_internal_r+0x8bc>
  804ad0:	d9414817 	ldw	r5,1312(sp)
  804ad4:	00c00044 	movi	r3,1
  804ad8:	1943430e 	bge	r3,r5,8057e8 <___vfprintf_internal_r+0x141c>
  804adc:	d8814217 	ldw	r2,1288(sp)
  804ae0:	94800044 	addi	r18,r18,1
  804ae4:	8c400044 	addi	r17,r17,1
  804ae8:	a8800015 	stw	r2,0(r21)
  804aec:	008001c4 	movi	r2,7
  804af0:	a8c00115 	stw	r3,4(r21)
  804af4:	dc800f15 	stw	r18,60(sp)
  804af8:	dc400e15 	stw	r17,56(sp)
  804afc:	1441ca16 	blt	r2,r17,805228 <___vfprintf_internal_r+0xe5c>
  804b00:	a8c00204 	addi	r3,r21,8
  804b04:	d9014a17 	ldw	r4,1320(sp)
  804b08:	00800044 	movi	r2,1
  804b0c:	94800044 	addi	r18,r18,1
  804b10:	8c400044 	addi	r17,r17,1
  804b14:	18800115 	stw	r2,4(r3)
  804b18:	008001c4 	movi	r2,7
  804b1c:	19000015 	stw	r4,0(r3)
  804b20:	dc800f15 	stw	r18,60(sp)
  804b24:	dc400e15 	stw	r17,56(sp)
  804b28:	1441b616 	blt	r2,r17,805204 <___vfprintf_internal_r+0xe38>
  804b2c:	1cc00204 	addi	r19,r3,8
  804b30:	d9014317 	ldw	r4,1292(sp)
  804b34:	d9414417 	ldw	r5,1296(sp)
  804b38:	000d883a 	mov	r6,zero
  804b3c:	000f883a 	mov	r7,zero
  804b40:	080f5f80 	call	80f5f8 <__nedf2>
  804b44:	10017426 	beq	r2,zero,805118 <___vfprintf_internal_r+0xd4c>
  804b48:	d9414817 	ldw	r5,1312(sp)
  804b4c:	d9814217 	ldw	r6,1288(sp)
  804b50:	8c400044 	addi	r17,r17,1
  804b54:	2c85883a 	add	r2,r5,r18
  804b58:	14bfffc4 	addi	r18,r2,-1
  804b5c:	28bfffc4 	addi	r2,r5,-1
  804b60:	30c00044 	addi	r3,r6,1
  804b64:	98800115 	stw	r2,4(r19)
  804b68:	008001c4 	movi	r2,7
  804b6c:	98c00015 	stw	r3,0(r19)
  804b70:	dc800f15 	stw	r18,60(sp)
  804b74:	dc400e15 	stw	r17,56(sp)
  804b78:	14418e16 	blt	r2,r17,8051b4 <___vfprintf_internal_r+0xde8>
  804b7c:	9cc00204 	addi	r19,r19,8
  804b80:	d9414917 	ldw	r5,1316(sp)
  804b84:	d8800904 	addi	r2,sp,36
  804b88:	8c400044 	addi	r17,r17,1
  804b8c:	9165883a 	add	r18,r18,r5
  804b90:	98800015 	stw	r2,0(r19)
  804b94:	008001c4 	movi	r2,7
  804b98:	99400115 	stw	r5,4(r19)
  804b9c:	dc800f15 	stw	r18,60(sp)
  804ba0:	dc400e15 	stw	r17,56(sp)
  804ba4:	1440ed16 	blt	r2,r17,804f5c <___vfprintf_internal_r+0xb90>
  804ba8:	98c00204 	addi	r3,r19,8
  804bac:	003f8506 	br	8049c4 <___vfprintf_internal_r+0x5f8>
  804bb0:	d9814b17 	ldw	r6,1324(sp)
  804bb4:	d8814617 	ldw	r2,1304(sp)
  804bb8:	30a1c83a 	sub	r16,r6,r2
  804bbc:	043f4b0e 	bge	zero,r16,8048ec <___vfprintf_internal_r+0x520>
  804bc0:	00800404 	movi	r2,16
  804bc4:	1404340e 	bge	r2,r16,805c98 <___vfprintf_internal_r+0x18cc>
  804bc8:	1027883a 	mov	r19,r2
  804bcc:	07002074 	movhi	fp,129
  804bd0:	e713b504 	addi	fp,fp,20180
  804bd4:	050001c4 	movi	r20,7
  804bd8:	00000306 	br	804be8 <___vfprintf_internal_r+0x81c>
  804bdc:	843ffc04 	addi	r16,r16,-16
  804be0:	ad400204 	addi	r21,r21,8
  804be4:	9c00130e 	bge	r19,r16,804c34 <___vfprintf_internal_r+0x868>
  804be8:	94800404 	addi	r18,r18,16
  804bec:	8c400044 	addi	r17,r17,1
  804bf0:	af000015 	stw	fp,0(r21)
  804bf4:	acc00115 	stw	r19,4(r21)
  804bf8:	dc800f15 	stw	r18,60(sp)
  804bfc:	dc400e15 	stw	r17,56(sp)
  804c00:	a47ff60e 	bge	r20,r17,804bdc <___vfprintf_internal_r+0x810>
  804c04:	d9015017 	ldw	r4,1344(sp)
  804c08:	b00b883a 	mov	r5,r22
  804c0c:	d9800d04 	addi	r6,sp,52
  804c10:	d9c15215 	stw	r7,1352(sp)
  804c14:	08043740 	call	804374 <__sprint_r>
  804c18:	d9c15217 	ldw	r7,1352(sp)
  804c1c:	103fa31e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804c20:	843ffc04 	addi	r16,r16,-16
  804c24:	dc800f17 	ldw	r18,60(sp)
  804c28:	dc400e17 	ldw	r17,56(sp)
  804c2c:	dd401a04 	addi	r21,sp,104
  804c30:	9c3fed16 	blt	r19,r16,804be8 <___vfprintf_internal_r+0x81c>
  804c34:	9425883a 	add	r18,r18,r16
  804c38:	8c400044 	addi	r17,r17,1
  804c3c:	008001c4 	movi	r2,7
  804c40:	af000015 	stw	fp,0(r21)
  804c44:	ac000115 	stw	r16,4(r21)
  804c48:	dc800f15 	stw	r18,60(sp)
  804c4c:	dc400e15 	stw	r17,56(sp)
  804c50:	14416116 	blt	r2,r17,8051d8 <___vfprintf_internal_r+0xe0c>
  804c54:	ad400204 	addi	r21,r21,8
  804c58:	003f2406 	br	8048ec <___vfprintf_internal_r+0x520>
  804c5c:	d9015017 	ldw	r4,1344(sp)
  804c60:	080162c0 	call	80162c <__sinit>
  804c64:	d9c15217 	ldw	r7,1352(sp)
  804c68:	003def06 	br	804428 <___vfprintf_internal_r+0x5c>
  804c6c:	d9015017 	ldw	r4,1344(sp)
  804c70:	b00b883a 	mov	r5,r22
  804c74:	d9c15215 	stw	r7,1352(sp)
  804c78:	0807a940 	call	807a94 <__swsetup_r>
  804c7c:	d9c15217 	ldw	r7,1352(sp)
  804c80:	103dee26 	beq	r2,zero,80443c <___vfprintf_internal_r+0x70>
  804c84:	003f8c06 	br	804ab8 <___vfprintf_internal_r+0x6ec>
  804c88:	d9014317 	ldw	r4,1292(sp)
  804c8c:	d9414417 	ldw	r5,1296(sp)
  804c90:	000d883a 	mov	r6,zero
  804c94:	000f883a 	mov	r7,zero
  804c98:	080f5700 	call	80f570 <__eqdf2>
  804c9c:	1000f21e 	bne	r2,zero,805068 <___vfprintf_internal_r+0xc9c>
  804ca0:	00802074 	movhi	r2,129
  804ca4:	1093b404 	addi	r2,r2,20176
  804ca8:	94800044 	addi	r18,r18,1
  804cac:	8c400044 	addi	r17,r17,1
  804cb0:	a8800015 	stw	r2,0(r21)
  804cb4:	00c00044 	movi	r3,1
  804cb8:	008001c4 	movi	r2,7
  804cbc:	a8c00115 	stw	r3,4(r21)
  804cc0:	dc800f15 	stw	r18,60(sp)
  804cc4:	dc400e15 	stw	r17,56(sp)
  804cc8:	1442fa16 	blt	r2,r17,8058b4 <___vfprintf_internal_r+0x14e8>
  804ccc:	a8c00204 	addi	r3,r21,8
  804cd0:	d8800617 	ldw	r2,24(sp)
  804cd4:	d9014817 	ldw	r4,1312(sp)
  804cd8:	11015c0e 	bge	r2,r4,80524c <___vfprintf_internal_r+0xe80>
  804cdc:	dc400e17 	ldw	r17,56(sp)
  804ce0:	d9814a17 	ldw	r6,1320(sp)
  804ce4:	00800044 	movi	r2,1
  804ce8:	94800044 	addi	r18,r18,1
  804cec:	8c400044 	addi	r17,r17,1
  804cf0:	18800115 	stw	r2,4(r3)
  804cf4:	008001c4 	movi	r2,7
  804cf8:	19800015 	stw	r6,0(r3)
  804cfc:	dc800f15 	stw	r18,60(sp)
  804d00:	dc400e15 	stw	r17,56(sp)
  804d04:	14431016 	blt	r2,r17,805948 <___vfprintf_internal_r+0x157c>
  804d08:	18c00204 	addi	r3,r3,8
  804d0c:	d8814817 	ldw	r2,1312(sp)
  804d10:	143fffc4 	addi	r16,r2,-1
  804d14:	043f2b0e 	bge	zero,r16,8049c4 <___vfprintf_internal_r+0x5f8>
  804d18:	00800404 	movi	r2,16
  804d1c:	1402a20e 	bge	r2,r16,8057a8 <___vfprintf_internal_r+0x13dc>
  804d20:	dc400e17 	ldw	r17,56(sp)
  804d24:	1027883a 	mov	r19,r2
  804d28:	07002074 	movhi	fp,129
  804d2c:	e713b504 	addi	fp,fp,20180
  804d30:	050001c4 	movi	r20,7
  804d34:	00000306 	br	804d44 <___vfprintf_internal_r+0x978>
  804d38:	18c00204 	addi	r3,r3,8
  804d3c:	843ffc04 	addi	r16,r16,-16
  804d40:	9c029c0e 	bge	r19,r16,8057b4 <___vfprintf_internal_r+0x13e8>
  804d44:	94800404 	addi	r18,r18,16
  804d48:	8c400044 	addi	r17,r17,1
  804d4c:	1f000015 	stw	fp,0(r3)
  804d50:	1cc00115 	stw	r19,4(r3)
  804d54:	dc800f15 	stw	r18,60(sp)
  804d58:	dc400e15 	stw	r17,56(sp)
  804d5c:	a47ff60e 	bge	r20,r17,804d38 <___vfprintf_internal_r+0x96c>
  804d60:	d9015017 	ldw	r4,1344(sp)
  804d64:	b00b883a 	mov	r5,r22
  804d68:	d9800d04 	addi	r6,sp,52
  804d6c:	08043740 	call	804374 <__sprint_r>
  804d70:	103f4e1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804d74:	dc800f17 	ldw	r18,60(sp)
  804d78:	dc400e17 	ldw	r17,56(sp)
  804d7c:	d8c01a04 	addi	r3,sp,104
  804d80:	003fee06 	br	804d3c <___vfprintf_internal_r+0x970>
  804d84:	d8802d0b 	ldhu	r2,180(sp)
  804d88:	00ffffc4 	movi	r3,-1
  804d8c:	d8c14c15 	stw	r3,1328(sp)
  804d90:	1080100c 	andi	r2,r2,64
  804d94:	103dcc1e 	bne	r2,zero,8044c8 <___vfprintf_internal_r+0xfc>
  804d98:	003dce06 	br	8044d4 <___vfprintf_internal_r+0x108>
  804d9c:	d9015017 	ldw	r4,1344(sp)
  804da0:	b00b883a 	mov	r5,r22
  804da4:	d9800d04 	addi	r6,sp,52
  804da8:	08043740 	call	804374 <__sprint_r>
  804dac:	103f3f1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804db0:	dc800f17 	ldw	r18,60(sp)
  804db4:	003f2e06 	br	804a70 <___vfprintf_internal_r+0x6a4>
  804db8:	d9414d17 	ldw	r5,1332(sp)
  804dbc:	29400414 	ori	r5,r5,16
  804dc0:	d9414d15 	stw	r5,1332(sp)
  804dc4:	d9814d17 	ldw	r6,1332(sp)
  804dc8:	3080080c 	andi	r2,r6,32
  804dcc:	10014f1e 	bne	r2,zero,80530c <___vfprintf_internal_r+0xf40>
  804dd0:	d8c14d17 	ldw	r3,1332(sp)
  804dd4:	1880040c 	andi	r2,r3,16
  804dd8:	1002ea1e 	bne	r2,zero,805984 <___vfprintf_internal_r+0x15b8>
  804ddc:	d9014d17 	ldw	r4,1332(sp)
  804de0:	2080100c 	andi	r2,r4,64
  804de4:	1002e726 	beq	r2,zero,805984 <___vfprintf_internal_r+0x15b8>
  804de8:	3880000f 	ldh	r2,0(r7)
  804dec:	39c00104 	addi	r7,r7,4
  804df0:	d9c14115 	stw	r7,1284(sp)
  804df4:	1023d7fa 	srai	r17,r2,31
  804df8:	1021883a 	mov	r16,r2
  804dfc:	88037216 	blt	r17,zero,805bc8 <___vfprintf_internal_r+0x17fc>
  804e00:	01000044 	movi	r4,1
  804e04:	98000416 	blt	r19,zero,804e18 <___vfprintf_internal_r+0xa4c>
  804e08:	d8c14d17 	ldw	r3,1332(sp)
  804e0c:	00bfdfc4 	movi	r2,-129
  804e10:	1886703a 	and	r3,r3,r2
  804e14:	d8c14d15 	stw	r3,1332(sp)
  804e18:	8444b03a 	or	r2,r16,r17
  804e1c:	1002261e 	bne	r2,zero,8056b8 <___vfprintf_internal_r+0x12ec>
  804e20:	9802251e 	bne	r19,zero,8056b8 <___vfprintf_internal_r+0x12ec>
  804e24:	20803fcc 	andi	r2,r4,255
  804e28:	10029b26 	beq	r2,zero,805898 <___vfprintf_internal_r+0x14cc>
  804e2c:	d8c01a04 	addi	r3,sp,104
  804e30:	dd001004 	addi	r20,sp,64
  804e34:	d8c14215 	stw	r3,1288(sp)
  804e38:	d8c14217 	ldw	r3,1288(sp)
  804e3c:	dcc14615 	stw	r19,1304(sp)
  804e40:	a0c5c83a 	sub	r2,r20,r3
  804e44:	11c00a04 	addi	r7,r2,40
  804e48:	99c0010e 	bge	r19,r7,804e50 <___vfprintf_internal_r+0xa84>
  804e4c:	d9c14615 	stw	r7,1304(sp)
  804e50:	dcc14715 	stw	r19,1308(sp)
  804e54:	d8800407 	ldb	r2,16(sp)
  804e58:	103e4c26 	beq	r2,zero,80478c <___vfprintf_internal_r+0x3c0>
  804e5c:	d8814617 	ldw	r2,1304(sp)
  804e60:	10800044 	addi	r2,r2,1
  804e64:	d8814615 	stw	r2,1304(sp)
  804e68:	003e4806 	br	80478c <___vfprintf_internal_r+0x3c0>
  804e6c:	d9814d17 	ldw	r6,1332(sp)
  804e70:	31800414 	ori	r6,r6,16
  804e74:	d9814d15 	stw	r6,1332(sp)
  804e78:	d8c14d17 	ldw	r3,1332(sp)
  804e7c:	1880080c 	andi	r2,r3,32
  804e80:	1001271e 	bne	r2,zero,805320 <___vfprintf_internal_r+0xf54>
  804e84:	d9414d17 	ldw	r5,1332(sp)
  804e88:	2880040c 	andi	r2,r5,16
  804e8c:	1002b61e 	bne	r2,zero,805968 <___vfprintf_internal_r+0x159c>
  804e90:	d9814d17 	ldw	r6,1332(sp)
  804e94:	3080100c 	andi	r2,r6,64
  804e98:	1002b326 	beq	r2,zero,805968 <___vfprintf_internal_r+0x159c>
  804e9c:	3c00000b 	ldhu	r16,0(r7)
  804ea0:	0009883a 	mov	r4,zero
  804ea4:	39c00104 	addi	r7,r7,4
  804ea8:	0023883a 	mov	r17,zero
  804eac:	d9c14115 	stw	r7,1284(sp)
  804eb0:	d8000405 	stb	zero,16(sp)
  804eb4:	003fd306 	br	804e04 <___vfprintf_internal_r+0xa38>
  804eb8:	d9014d17 	ldw	r4,1332(sp)
  804ebc:	21000414 	ori	r4,r4,16
  804ec0:	d9014d15 	stw	r4,1332(sp)
  804ec4:	d9414d17 	ldw	r5,1332(sp)
  804ec8:	2880080c 	andi	r2,r5,32
  804ecc:	1001081e 	bne	r2,zero,8052f0 <___vfprintf_internal_r+0xf24>
  804ed0:	d8c14d17 	ldw	r3,1332(sp)
  804ed4:	1880040c 	andi	r2,r3,16
  804ed8:	1002b01e 	bne	r2,zero,80599c <___vfprintf_internal_r+0x15d0>
  804edc:	d9014d17 	ldw	r4,1332(sp)
  804ee0:	2080100c 	andi	r2,r4,64
  804ee4:	1002ad26 	beq	r2,zero,80599c <___vfprintf_internal_r+0x15d0>
  804ee8:	3c00000b 	ldhu	r16,0(r7)
  804eec:	01000044 	movi	r4,1
  804ef0:	39c00104 	addi	r7,r7,4
  804ef4:	0023883a 	mov	r17,zero
  804ef8:	d9c14115 	stw	r7,1284(sp)
  804efc:	d8000405 	stb	zero,16(sp)
  804f00:	003fc006 	br	804e04 <___vfprintf_internal_r+0xa38>
  804f04:	d9015017 	ldw	r4,1344(sp)
  804f08:	b00b883a 	mov	r5,r22
  804f0c:	d9800d04 	addi	r6,sp,52
  804f10:	08043740 	call	804374 <__sprint_r>
  804f14:	103ee51e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804f18:	dc800f17 	ldw	r18,60(sp)
  804f1c:	d8c01a04 	addi	r3,sp,104
  804f20:	d9814d17 	ldw	r6,1332(sp)
  804f24:	3080004c 	andi	r2,r6,1
  804f28:	1005003a 	cmpeq	r2,r2,zero
  804f2c:	103ea51e 	bne	r2,zero,8049c4 <___vfprintf_internal_r+0x5f8>
  804f30:	00800044 	movi	r2,1
  804f34:	dc400e17 	ldw	r17,56(sp)
  804f38:	18800115 	stw	r2,4(r3)
  804f3c:	d8814a17 	ldw	r2,1320(sp)
  804f40:	94800044 	addi	r18,r18,1
  804f44:	8c400044 	addi	r17,r17,1
  804f48:	18800015 	stw	r2,0(r3)
  804f4c:	008001c4 	movi	r2,7
  804f50:	dc800f15 	stw	r18,60(sp)
  804f54:	dc400e15 	stw	r17,56(sp)
  804f58:	14421e0e 	bge	r2,r17,8057d4 <___vfprintf_internal_r+0x1408>
  804f5c:	d9015017 	ldw	r4,1344(sp)
  804f60:	b00b883a 	mov	r5,r22
  804f64:	d9800d04 	addi	r6,sp,52
  804f68:	08043740 	call	804374 <__sprint_r>
  804f6c:	103ecf1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804f70:	dc800f17 	ldw	r18,60(sp)
  804f74:	d8c01a04 	addi	r3,sp,104
  804f78:	003e9206 	br	8049c4 <___vfprintf_internal_r+0x5f8>
  804f7c:	d9015017 	ldw	r4,1344(sp)
  804f80:	b00b883a 	mov	r5,r22
  804f84:	d9800d04 	addi	r6,sp,52
  804f88:	08043740 	call	804374 <__sprint_r>
  804f8c:	103ec026 	beq	r2,zero,804a90 <___vfprintf_internal_r+0x6c4>
  804f90:	003ec606 	br	804aac <___vfprintf_internal_r+0x6e0>
  804f94:	d9015017 	ldw	r4,1344(sp)
  804f98:	b00b883a 	mov	r5,r22
  804f9c:	d9800d04 	addi	r6,sp,52
  804fa0:	d9c15215 	stw	r7,1352(sp)
  804fa4:	08043740 	call	804374 <__sprint_r>
  804fa8:	d9c15217 	ldw	r7,1352(sp)
  804fac:	103ebf1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804fb0:	dc800f17 	ldw	r18,60(sp)
  804fb4:	dc400e17 	ldw	r17,56(sp)
  804fb8:	dd401a04 	addi	r21,sp,104
  804fbc:	003e7406 	br	804990 <___vfprintf_internal_r+0x5c4>
  804fc0:	d9015017 	ldw	r4,1344(sp)
  804fc4:	b00b883a 	mov	r5,r22
  804fc8:	d9800d04 	addi	r6,sp,52
  804fcc:	d9c15215 	stw	r7,1352(sp)
  804fd0:	08043740 	call	804374 <__sprint_r>
  804fd4:	d9c15217 	ldw	r7,1352(sp)
  804fd8:	103eb41e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  804fdc:	dd401a04 	addi	r21,sp,104
  804fe0:	003d6d06 	br	804598 <___vfprintf_internal_r+0x1cc>
  804fe4:	d9015017 	ldw	r4,1344(sp)
  804fe8:	b00b883a 	mov	r5,r22
  804fec:	d9800d04 	addi	r6,sp,52
  804ff0:	d9c15215 	stw	r7,1352(sp)
  804ff4:	08043740 	call	804374 <__sprint_r>
  804ff8:	d9c15217 	ldw	r7,1352(sp)
  804ffc:	103eab1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805000:	dc800f17 	ldw	r18,60(sp)
  805004:	dc400e17 	ldw	r17,56(sp)
  805008:	dd401a04 	addi	r21,sp,104
  80500c:	003e3406 	br	8048e0 <___vfprintf_internal_r+0x514>
  805010:	d9015017 	ldw	r4,1344(sp)
  805014:	b00b883a 	mov	r5,r22
  805018:	d9800d04 	addi	r6,sp,52
  80501c:	d9c15215 	stw	r7,1352(sp)
  805020:	08043740 	call	804374 <__sprint_r>
  805024:	d9c15217 	ldw	r7,1352(sp)
  805028:	103ea01e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  80502c:	dc800f17 	ldw	r18,60(sp)
  805030:	dc400e17 	ldw	r17,56(sp)
  805034:	dd401a04 	addi	r21,sp,104
  805038:	003e1c06 	br	8048ac <___vfprintf_internal_r+0x4e0>
  80503c:	d9015017 	ldw	r4,1344(sp)
  805040:	b00b883a 	mov	r5,r22
  805044:	d9800d04 	addi	r6,sp,52
  805048:	d9c15215 	stw	r7,1352(sp)
  80504c:	08043740 	call	804374 <__sprint_r>
  805050:	d9c15217 	ldw	r7,1352(sp)
  805054:	103e951e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805058:	dc800f17 	ldw	r18,60(sp)
  80505c:	dc400e17 	ldw	r17,56(sp)
  805060:	dd401a04 	addi	r21,sp,104
  805064:	003e0406 	br	804878 <___vfprintf_internal_r+0x4ac>
  805068:	d9000617 	ldw	r4,24(sp)
  80506c:	0102520e 	bge	zero,r4,8059b8 <___vfprintf_internal_r+0x15ec>
  805070:	d9814817 	ldw	r6,1312(sp)
  805074:	21807a16 	blt	r4,r6,805260 <___vfprintf_internal_r+0xe94>
  805078:	d8814217 	ldw	r2,1288(sp)
  80507c:	91a5883a 	add	r18,r18,r6
  805080:	8c400044 	addi	r17,r17,1
  805084:	a8800015 	stw	r2,0(r21)
  805088:	008001c4 	movi	r2,7
  80508c:	a9800115 	stw	r6,4(r21)
  805090:	dc800f15 	stw	r18,60(sp)
  805094:	dc400e15 	stw	r17,56(sp)
  805098:	1442f616 	blt	r2,r17,805c74 <___vfprintf_internal_r+0x18a8>
  80509c:	a8c00204 	addi	r3,r21,8
  8050a0:	d9414817 	ldw	r5,1312(sp)
  8050a4:	2161c83a 	sub	r16,r4,r5
  8050a8:	043f9d0e 	bge	zero,r16,804f20 <___vfprintf_internal_r+0xb54>
  8050ac:	00800404 	movi	r2,16
  8050b0:	1402130e 	bge	r2,r16,805900 <___vfprintf_internal_r+0x1534>
  8050b4:	dc400e17 	ldw	r17,56(sp)
  8050b8:	1027883a 	mov	r19,r2
  8050bc:	07002074 	movhi	fp,129
  8050c0:	e713b504 	addi	fp,fp,20180
  8050c4:	050001c4 	movi	r20,7
  8050c8:	00000306 	br	8050d8 <___vfprintf_internal_r+0xd0c>
  8050cc:	18c00204 	addi	r3,r3,8
  8050d0:	843ffc04 	addi	r16,r16,-16
  8050d4:	9c020d0e 	bge	r19,r16,80590c <___vfprintf_internal_r+0x1540>
  8050d8:	94800404 	addi	r18,r18,16
  8050dc:	8c400044 	addi	r17,r17,1
  8050e0:	1f000015 	stw	fp,0(r3)
  8050e4:	1cc00115 	stw	r19,4(r3)
  8050e8:	dc800f15 	stw	r18,60(sp)
  8050ec:	dc400e15 	stw	r17,56(sp)
  8050f0:	a47ff60e 	bge	r20,r17,8050cc <___vfprintf_internal_r+0xd00>
  8050f4:	d9015017 	ldw	r4,1344(sp)
  8050f8:	b00b883a 	mov	r5,r22
  8050fc:	d9800d04 	addi	r6,sp,52
  805100:	08043740 	call	804374 <__sprint_r>
  805104:	103e691e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805108:	dc800f17 	ldw	r18,60(sp)
  80510c:	dc400e17 	ldw	r17,56(sp)
  805110:	d8c01a04 	addi	r3,sp,104
  805114:	003fee06 	br	8050d0 <___vfprintf_internal_r+0xd04>
  805118:	d8814817 	ldw	r2,1312(sp)
  80511c:	143fffc4 	addi	r16,r2,-1
  805120:	043e970e 	bge	zero,r16,804b80 <___vfprintf_internal_r+0x7b4>
  805124:	00800404 	movi	r2,16
  805128:	1400180e 	bge	r2,r16,80518c <___vfprintf_internal_r+0xdc0>
  80512c:	1029883a 	mov	r20,r2
  805130:	07002074 	movhi	fp,129
  805134:	e713b504 	addi	fp,fp,20180
  805138:	054001c4 	movi	r21,7
  80513c:	00000306 	br	80514c <___vfprintf_internal_r+0xd80>
  805140:	9cc00204 	addi	r19,r19,8
  805144:	843ffc04 	addi	r16,r16,-16
  805148:	a400120e 	bge	r20,r16,805194 <___vfprintf_internal_r+0xdc8>
  80514c:	94800404 	addi	r18,r18,16
  805150:	8c400044 	addi	r17,r17,1
  805154:	9f000015 	stw	fp,0(r19)
  805158:	9d000115 	stw	r20,4(r19)
  80515c:	dc800f15 	stw	r18,60(sp)
  805160:	dc400e15 	stw	r17,56(sp)
  805164:	ac7ff60e 	bge	r21,r17,805140 <___vfprintf_internal_r+0xd74>
  805168:	d9015017 	ldw	r4,1344(sp)
  80516c:	b00b883a 	mov	r5,r22
  805170:	d9800d04 	addi	r6,sp,52
  805174:	08043740 	call	804374 <__sprint_r>
  805178:	103e4c1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  80517c:	dc800f17 	ldw	r18,60(sp)
  805180:	dc400e17 	ldw	r17,56(sp)
  805184:	dcc01a04 	addi	r19,sp,104
  805188:	003fee06 	br	805144 <___vfprintf_internal_r+0xd78>
  80518c:	07002074 	movhi	fp,129
  805190:	e713b504 	addi	fp,fp,20180
  805194:	9425883a 	add	r18,r18,r16
  805198:	8c400044 	addi	r17,r17,1
  80519c:	008001c4 	movi	r2,7
  8051a0:	9f000015 	stw	fp,0(r19)
  8051a4:	9c000115 	stw	r16,4(r19)
  8051a8:	dc800f15 	stw	r18,60(sp)
  8051ac:	dc400e15 	stw	r17,56(sp)
  8051b0:	147e720e 	bge	r2,r17,804b7c <___vfprintf_internal_r+0x7b0>
  8051b4:	d9015017 	ldw	r4,1344(sp)
  8051b8:	b00b883a 	mov	r5,r22
  8051bc:	d9800d04 	addi	r6,sp,52
  8051c0:	08043740 	call	804374 <__sprint_r>
  8051c4:	103e391e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  8051c8:	dc800f17 	ldw	r18,60(sp)
  8051cc:	dc400e17 	ldw	r17,56(sp)
  8051d0:	dcc01a04 	addi	r19,sp,104
  8051d4:	003e6a06 	br	804b80 <___vfprintf_internal_r+0x7b4>
  8051d8:	d9015017 	ldw	r4,1344(sp)
  8051dc:	b00b883a 	mov	r5,r22
  8051e0:	d9800d04 	addi	r6,sp,52
  8051e4:	d9c15215 	stw	r7,1352(sp)
  8051e8:	08043740 	call	804374 <__sprint_r>
  8051ec:	d9c15217 	ldw	r7,1352(sp)
  8051f0:	103e2e1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  8051f4:	dc800f17 	ldw	r18,60(sp)
  8051f8:	dc400e17 	ldw	r17,56(sp)
  8051fc:	dd401a04 	addi	r21,sp,104
  805200:	003dba06 	br	8048ec <___vfprintf_internal_r+0x520>
  805204:	d9015017 	ldw	r4,1344(sp)
  805208:	b00b883a 	mov	r5,r22
  80520c:	d9800d04 	addi	r6,sp,52
  805210:	08043740 	call	804374 <__sprint_r>
  805214:	103e251e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805218:	dc800f17 	ldw	r18,60(sp)
  80521c:	dc400e17 	ldw	r17,56(sp)
  805220:	dcc01a04 	addi	r19,sp,104
  805224:	003e4206 	br	804b30 <___vfprintf_internal_r+0x764>
  805228:	d9015017 	ldw	r4,1344(sp)
  80522c:	b00b883a 	mov	r5,r22
  805230:	d9800d04 	addi	r6,sp,52
  805234:	08043740 	call	804374 <__sprint_r>
  805238:	103e1c1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  80523c:	dc800f17 	ldw	r18,60(sp)
  805240:	dc400e17 	ldw	r17,56(sp)
  805244:	d8c01a04 	addi	r3,sp,104
  805248:	003e2e06 	br	804b04 <___vfprintf_internal_r+0x738>
  80524c:	d9414d17 	ldw	r5,1332(sp)
  805250:	2880004c 	andi	r2,r5,1
  805254:	1005003a 	cmpeq	r2,r2,zero
  805258:	103dda1e 	bne	r2,zero,8049c4 <___vfprintf_internal_r+0x5f8>
  80525c:	003e9f06 	br	804cdc <___vfprintf_internal_r+0x910>
  805260:	d8c14217 	ldw	r3,1288(sp)
  805264:	9125883a 	add	r18,r18,r4
  805268:	8c400044 	addi	r17,r17,1
  80526c:	008001c4 	movi	r2,7
  805270:	a8c00015 	stw	r3,0(r21)
  805274:	a9000115 	stw	r4,4(r21)
  805278:	dc800f15 	stw	r18,60(sp)
  80527c:	dc400e15 	stw	r17,56(sp)
  805280:	14426616 	blt	r2,r17,805c1c <___vfprintf_internal_r+0x1850>
  805284:	a8c00204 	addi	r3,r21,8
  805288:	d9414a17 	ldw	r5,1320(sp)
  80528c:	00800044 	movi	r2,1
  805290:	94800044 	addi	r18,r18,1
  805294:	8c400044 	addi	r17,r17,1
  805298:	18800115 	stw	r2,4(r3)
  80529c:	008001c4 	movi	r2,7
  8052a0:	19400015 	stw	r5,0(r3)
  8052a4:	dc800f15 	stw	r18,60(sp)
  8052a8:	dc400e15 	stw	r17,56(sp)
  8052ac:	2021883a 	mov	r16,r4
  8052b0:	14425016 	blt	r2,r17,805bf4 <___vfprintf_internal_r+0x1828>
  8052b4:	19400204 	addi	r5,r3,8
  8052b8:	d9814817 	ldw	r6,1312(sp)
  8052bc:	8c400044 	addi	r17,r17,1
  8052c0:	dc400e15 	stw	r17,56(sp)
  8052c4:	3107c83a 	sub	r3,r6,r4
  8052c8:	d9014217 	ldw	r4,1288(sp)
  8052cc:	90e5883a 	add	r18,r18,r3
  8052d0:	28c00115 	stw	r3,4(r5)
  8052d4:	8105883a 	add	r2,r16,r4
  8052d8:	28800015 	stw	r2,0(r5)
  8052dc:	008001c4 	movi	r2,7
  8052e0:	dc800f15 	stw	r18,60(sp)
  8052e4:	147f1d16 	blt	r2,r17,804f5c <___vfprintf_internal_r+0xb90>
  8052e8:	28c00204 	addi	r3,r5,8
  8052ec:	003db506 	br	8049c4 <___vfprintf_internal_r+0x5f8>
  8052f0:	3c000017 	ldw	r16,0(r7)
  8052f4:	3c400117 	ldw	r17,4(r7)
  8052f8:	39800204 	addi	r6,r7,8
  8052fc:	01000044 	movi	r4,1
  805300:	d9814115 	stw	r6,1284(sp)
  805304:	d8000405 	stb	zero,16(sp)
  805308:	003ebe06 	br	804e04 <___vfprintf_internal_r+0xa38>
  80530c:	3c000017 	ldw	r16,0(r7)
  805310:	3c400117 	ldw	r17,4(r7)
  805314:	38800204 	addi	r2,r7,8
  805318:	d8814115 	stw	r2,1284(sp)
  80531c:	003eb706 	br	804dfc <___vfprintf_internal_r+0xa30>
  805320:	3c000017 	ldw	r16,0(r7)
  805324:	3c400117 	ldw	r17,4(r7)
  805328:	39000204 	addi	r4,r7,8
  80532c:	d9014115 	stw	r4,1284(sp)
  805330:	0009883a 	mov	r4,zero
  805334:	d8000405 	stb	zero,16(sp)
  805338:	003eb206 	br	804e04 <___vfprintf_internal_r+0xa38>
  80533c:	38c00017 	ldw	r3,0(r7)
  805340:	39c00104 	addi	r7,r7,4
  805344:	d8c14b15 	stw	r3,1324(sp)
  805348:	1800d10e 	bge	r3,zero,805690 <___vfprintf_internal_r+0x12c4>
  80534c:	00c7c83a 	sub	r3,zero,r3
  805350:	d8c14b15 	stw	r3,1324(sp)
  805354:	d9014d17 	ldw	r4,1332(sp)
  805358:	b8c00007 	ldb	r3,0(r23)
  80535c:	21000114 	ori	r4,r4,4
  805360:	d9014d15 	stw	r4,1332(sp)
  805364:	003c9806 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805368:	d9814d17 	ldw	r6,1332(sp)
  80536c:	3080080c 	andi	r2,r6,32
  805370:	1001f026 	beq	r2,zero,805b34 <___vfprintf_internal_r+0x1768>
  805374:	d9014c17 	ldw	r4,1328(sp)
  805378:	38800017 	ldw	r2,0(r7)
  80537c:	39c00104 	addi	r7,r7,4
  805380:	d9c14115 	stw	r7,1284(sp)
  805384:	2007d7fa 	srai	r3,r4,31
  805388:	d9c14117 	ldw	r7,1284(sp)
  80538c:	11000015 	stw	r4,0(r2)
  805390:	10c00115 	stw	r3,4(r2)
  805394:	003c6906 	br	80453c <___vfprintf_internal_r+0x170>
  805398:	b8c00007 	ldb	r3,0(r23)
  80539c:	00801b04 	movi	r2,108
  8053a0:	18824f26 	beq	r3,r2,805ce0 <___vfprintf_internal_r+0x1914>
  8053a4:	d9414d17 	ldw	r5,1332(sp)
  8053a8:	29400414 	ori	r5,r5,16
  8053ac:	d9414d15 	stw	r5,1332(sp)
  8053b0:	003c8506 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  8053b4:	d9814d17 	ldw	r6,1332(sp)
  8053b8:	b8c00007 	ldb	r3,0(r23)
  8053bc:	31800814 	ori	r6,r6,32
  8053c0:	d9814d15 	stw	r6,1332(sp)
  8053c4:	003c8006 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  8053c8:	d8814d17 	ldw	r2,1332(sp)
  8053cc:	3c000017 	ldw	r16,0(r7)
  8053d0:	00c01e04 	movi	r3,120
  8053d4:	10800094 	ori	r2,r2,2
  8053d8:	d8814d15 	stw	r2,1332(sp)
  8053dc:	39c00104 	addi	r7,r7,4
  8053e0:	01402074 	movhi	r5,129
  8053e4:	29539d04 	addi	r5,r5,20084
  8053e8:	00800c04 	movi	r2,48
  8053ec:	0023883a 	mov	r17,zero
  8053f0:	01000084 	movi	r4,2
  8053f4:	d9c14115 	stw	r7,1284(sp)
  8053f8:	d8c14e15 	stw	r3,1336(sp)
  8053fc:	d9414515 	stw	r5,1300(sp)
  805400:	d8800505 	stb	r2,20(sp)
  805404:	d8c00545 	stb	r3,21(sp)
  805408:	d8000405 	stb	zero,16(sp)
  80540c:	003e7d06 	br	804e04 <___vfprintf_internal_r+0xa38>
  805410:	d8814d17 	ldw	r2,1332(sp)
  805414:	b8c00007 	ldb	r3,0(r23)
  805418:	10801014 	ori	r2,r2,64
  80541c:	d8814d15 	stw	r2,1332(sp)
  805420:	003c6906 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805424:	d9414d17 	ldw	r5,1332(sp)
  805428:	2880020c 	andi	r2,r5,8
  80542c:	1001df26 	beq	r2,zero,805bac <___vfprintf_internal_r+0x17e0>
  805430:	39800017 	ldw	r6,0(r7)
  805434:	38800204 	addi	r2,r7,8
  805438:	d8814115 	stw	r2,1284(sp)
  80543c:	d9814315 	stw	r6,1292(sp)
  805440:	39c00117 	ldw	r7,4(r7)
  805444:	d9c14415 	stw	r7,1296(sp)
  805448:	d9014317 	ldw	r4,1292(sp)
  80544c:	d9414417 	ldw	r5,1296(sp)
  805450:	080aa2c0 	call	80aa2c <__isinfd>
  805454:	10021726 	beq	r2,zero,805cb4 <___vfprintf_internal_r+0x18e8>
  805458:	d9014317 	ldw	r4,1292(sp)
  80545c:	d9414417 	ldw	r5,1296(sp)
  805460:	000d883a 	mov	r6,zero
  805464:	000f883a 	mov	r7,zero
  805468:	080f7900 	call	80f790 <__ltdf2>
  80546c:	1002ca16 	blt	r2,zero,805f98 <___vfprintf_internal_r+0x1bcc>
  805470:	d9414e17 	ldw	r5,1336(sp)
  805474:	008011c4 	movi	r2,71
  805478:	11420a16 	blt	r2,r5,805ca4 <___vfprintf_internal_r+0x18d8>
  80547c:	01802074 	movhi	r6,129
  805480:	3193a204 	addi	r6,r6,20104
  805484:	d9814215 	stw	r6,1288(sp)
  805488:	d9014d17 	ldw	r4,1332(sp)
  80548c:	00c000c4 	movi	r3,3
  805490:	00bfdfc4 	movi	r2,-129
  805494:	2088703a 	and	r4,r4,r2
  805498:	180f883a 	mov	r7,r3
  80549c:	d8c14615 	stw	r3,1304(sp)
  8054a0:	d9014d15 	stw	r4,1332(sp)
  8054a4:	d8014715 	stw	zero,1308(sp)
  8054a8:	003e6a06 	br	804e54 <___vfprintf_internal_r+0xa88>
  8054ac:	38800017 	ldw	r2,0(r7)
  8054b0:	00c00044 	movi	r3,1
  8054b4:	39c00104 	addi	r7,r7,4
  8054b8:	d9c14115 	stw	r7,1284(sp)
  8054bc:	d9001004 	addi	r4,sp,64
  8054c0:	180f883a 	mov	r7,r3
  8054c4:	d8c14615 	stw	r3,1304(sp)
  8054c8:	d9014215 	stw	r4,1288(sp)
  8054cc:	d8801005 	stb	r2,64(sp)
  8054d0:	d8000405 	stb	zero,16(sp)
  8054d4:	003cac06 	br	804788 <___vfprintf_internal_r+0x3bc>
  8054d8:	01402074 	movhi	r5,129
  8054dc:	2953a804 	addi	r5,r5,20128
  8054e0:	d9414515 	stw	r5,1300(sp)
  8054e4:	d9814d17 	ldw	r6,1332(sp)
  8054e8:	3080080c 	andi	r2,r6,32
  8054ec:	1000f926 	beq	r2,zero,8058d4 <___vfprintf_internal_r+0x1508>
  8054f0:	3c000017 	ldw	r16,0(r7)
  8054f4:	3c400117 	ldw	r17,4(r7)
  8054f8:	38800204 	addi	r2,r7,8
  8054fc:	d8814115 	stw	r2,1284(sp)
  805500:	d9414d17 	ldw	r5,1332(sp)
  805504:	2880004c 	andi	r2,r5,1
  805508:	1005003a 	cmpeq	r2,r2,zero
  80550c:	1000b31e 	bne	r2,zero,8057dc <___vfprintf_internal_r+0x1410>
  805510:	8444b03a 	or	r2,r16,r17
  805514:	1000b126 	beq	r2,zero,8057dc <___vfprintf_internal_r+0x1410>
  805518:	d9814e17 	ldw	r6,1336(sp)
  80551c:	29400094 	ori	r5,r5,2
  805520:	00800c04 	movi	r2,48
  805524:	01000084 	movi	r4,2
  805528:	d9414d15 	stw	r5,1332(sp)
  80552c:	d8800505 	stb	r2,20(sp)
  805530:	d9800545 	stb	r6,21(sp)
  805534:	d8000405 	stb	zero,16(sp)
  805538:	003e3206 	br	804e04 <___vfprintf_internal_r+0xa38>
  80553c:	01802074 	movhi	r6,129
  805540:	31939d04 	addi	r6,r6,20084
  805544:	d9814515 	stw	r6,1300(sp)
  805548:	003fe606 	br	8054e4 <___vfprintf_internal_r+0x1118>
  80554c:	00800ac4 	movi	r2,43
  805550:	d8800405 	stb	r2,16(sp)
  805554:	b8c00007 	ldb	r3,0(r23)
  805558:	003c1b06 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  80555c:	d8814d17 	ldw	r2,1332(sp)
  805560:	b8c00007 	ldb	r3,0(r23)
  805564:	10800054 	ori	r2,r2,1
  805568:	d8814d15 	stw	r2,1332(sp)
  80556c:	003c1606 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805570:	d8800407 	ldb	r2,16(sp)
  805574:	1000461e 	bne	r2,zero,805690 <___vfprintf_internal_r+0x12c4>
  805578:	00800804 	movi	r2,32
  80557c:	d8800405 	stb	r2,16(sp)
  805580:	b8c00007 	ldb	r3,0(r23)
  805584:	003c1006 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805588:	d9814d17 	ldw	r6,1332(sp)
  80558c:	b8c00007 	ldb	r3,0(r23)
  805590:	31800214 	ori	r6,r6,8
  805594:	d9814d15 	stw	r6,1332(sp)
  805598:	003c0b06 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  80559c:	0007883a 	mov	r3,zero
  8055a0:	01000244 	movi	r4,9
  8055a4:	188002a4 	muli	r2,r3,10
  8055a8:	b8c00007 	ldb	r3,0(r23)
  8055ac:	d9814e17 	ldw	r6,1336(sp)
  8055b0:	bdc00044 	addi	r23,r23,1
  8055b4:	d8c14e15 	stw	r3,1336(sp)
  8055b8:	d9414e17 	ldw	r5,1336(sp)
  8055bc:	3085883a 	add	r2,r6,r2
  8055c0:	10fff404 	addi	r3,r2,-48
  8055c4:	28bff404 	addi	r2,r5,-48
  8055c8:	20bff62e 	bgeu	r4,r2,8055a4 <___vfprintf_internal_r+0x11d8>
  8055cc:	d8c14b15 	stw	r3,1324(sp)
  8055d0:	003bff06 	br	8045d0 <___vfprintf_internal_r+0x204>
  8055d4:	d9414d17 	ldw	r5,1332(sp)
  8055d8:	b8c00007 	ldb	r3,0(r23)
  8055dc:	29402014 	ori	r5,r5,128
  8055e0:	d9414d15 	stw	r5,1332(sp)
  8055e4:	003bf806 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  8055e8:	b8c00007 	ldb	r3,0(r23)
  8055ec:	00800a84 	movi	r2,42
  8055f0:	bdc00044 	addi	r23,r23,1
  8055f4:	18831526 	beq	r3,r2,80624c <___vfprintf_internal_r+0x1e80>
  8055f8:	d8c14e15 	stw	r3,1336(sp)
  8055fc:	18bff404 	addi	r2,r3,-48
  805600:	00c00244 	movi	r3,9
  805604:	18827836 	bltu	r3,r2,805fe8 <___vfprintf_internal_r+0x1c1c>
  805608:	000d883a 	mov	r6,zero
  80560c:	308002a4 	muli	r2,r6,10
  805610:	b9800007 	ldb	r6,0(r23)
  805614:	d9414e17 	ldw	r5,1336(sp)
  805618:	bdc00044 	addi	r23,r23,1
  80561c:	d9814e15 	stw	r6,1336(sp)
  805620:	d9014e17 	ldw	r4,1336(sp)
  805624:	1145883a 	add	r2,r2,r5
  805628:	11bff404 	addi	r6,r2,-48
  80562c:	20bff404 	addi	r2,r4,-48
  805630:	18bff62e 	bgeu	r3,r2,80560c <___vfprintf_internal_r+0x1240>
  805634:	3027883a 	mov	r19,r6
  805638:	303be50e 	bge	r6,zero,8045d0 <___vfprintf_internal_r+0x204>
  80563c:	04ffffc4 	movi	r19,-1
  805640:	003be306 	br	8045d0 <___vfprintf_internal_r+0x204>
  805644:	d8000405 	stb	zero,16(sp)
  805648:	39800017 	ldw	r6,0(r7)
  80564c:	39c00104 	addi	r7,r7,4
  805650:	d9c14115 	stw	r7,1284(sp)
  805654:	d9814215 	stw	r6,1288(sp)
  805658:	3001c926 	beq	r6,zero,805d80 <___vfprintf_internal_r+0x19b4>
  80565c:	98000e16 	blt	r19,zero,805698 <___vfprintf_internal_r+0x12cc>
  805660:	d9014217 	ldw	r4,1288(sp)
  805664:	000b883a 	mov	r5,zero
  805668:	980d883a 	mov	r6,r19
  80566c:	08032880 	call	803288 <memchr>
  805670:	10025926 	beq	r2,zero,805fd8 <___vfprintf_internal_r+0x1c0c>
  805674:	d8c14217 	ldw	r3,1288(sp)
  805678:	10cfc83a 	sub	r7,r2,r3
  80567c:	99c19e16 	blt	r19,r7,805cf8 <___vfprintf_internal_r+0x192c>
  805680:	d9c14615 	stw	r7,1304(sp)
  805684:	38000916 	blt	r7,zero,8056ac <___vfprintf_internal_r+0x12e0>
  805688:	d8014715 	stw	zero,1308(sp)
  80568c:	003df106 	br	804e54 <___vfprintf_internal_r+0xa88>
  805690:	b8c00007 	ldb	r3,0(r23)
  805694:	003bcc06 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805698:	d9014217 	ldw	r4,1288(sp)
  80569c:	08043000 	call	804300 <strlen>
  8056a0:	d8814615 	stw	r2,1304(sp)
  8056a4:	100f883a 	mov	r7,r2
  8056a8:	103ff70e 	bge	r2,zero,805688 <___vfprintf_internal_r+0x12bc>
  8056ac:	d8014615 	stw	zero,1304(sp)
  8056b0:	d8014715 	stw	zero,1308(sp)
  8056b4:	003de706 	br	804e54 <___vfprintf_internal_r+0xa88>
  8056b8:	20c03fcc 	andi	r3,r4,255
  8056bc:	00800044 	movi	r2,1
  8056c0:	18802d26 	beq	r3,r2,805778 <___vfprintf_internal_r+0x13ac>
  8056c4:	18800e36 	bltu	r3,r2,805700 <___vfprintf_internal_r+0x1334>
  8056c8:	00800084 	movi	r2,2
  8056cc:	1880fa26 	beq	r3,r2,805ab8 <___vfprintf_internal_r+0x16ec>
  8056d0:	01002074 	movhi	r4,129
  8056d4:	2113ad04 	addi	r4,r4,20148
  8056d8:	08043000 	call	804300 <strlen>
  8056dc:	100f883a 	mov	r7,r2
  8056e0:	dcc14615 	stw	r19,1304(sp)
  8056e4:	9880010e 	bge	r19,r2,8056ec <___vfprintf_internal_r+0x1320>
  8056e8:	d8814615 	stw	r2,1304(sp)
  8056ec:	00802074 	movhi	r2,129
  8056f0:	1093ad04 	addi	r2,r2,20148
  8056f4:	dcc14715 	stw	r19,1308(sp)
  8056f8:	d8814215 	stw	r2,1288(sp)
  8056fc:	003dd506 	br	804e54 <___vfprintf_internal_r+0xa88>
  805700:	d9401a04 	addi	r5,sp,104
  805704:	dd001004 	addi	r20,sp,64
  805708:	d9414215 	stw	r5,1288(sp)
  80570c:	880a977a 	slli	r5,r17,29
  805710:	d9814217 	ldw	r6,1288(sp)
  805714:	8004d0fa 	srli	r2,r16,3
  805718:	8806d0fa 	srli	r3,r17,3
  80571c:	810001cc 	andi	r4,r16,7
  805720:	2884b03a 	or	r2,r5,r2
  805724:	31bfffc4 	addi	r6,r6,-1
  805728:	21000c04 	addi	r4,r4,48
  80572c:	d9814215 	stw	r6,1288(sp)
  805730:	10cab03a 	or	r5,r2,r3
  805734:	31000005 	stb	r4,0(r6)
  805738:	1021883a 	mov	r16,r2
  80573c:	1823883a 	mov	r17,r3
  805740:	283ff21e 	bne	r5,zero,80570c <___vfprintf_internal_r+0x1340>
  805744:	d8c14d17 	ldw	r3,1332(sp)
  805748:	1880004c 	andi	r2,r3,1
  80574c:	1005003a 	cmpeq	r2,r2,zero
  805750:	103db91e 	bne	r2,zero,804e38 <___vfprintf_internal_r+0xa6c>
  805754:	20803fcc 	andi	r2,r4,255
  805758:	1080201c 	xori	r2,r2,128
  80575c:	10bfe004 	addi	r2,r2,-128
  805760:	00c00c04 	movi	r3,48
  805764:	10fdb426 	beq	r2,r3,804e38 <___vfprintf_internal_r+0xa6c>
  805768:	31bfffc4 	addi	r6,r6,-1
  80576c:	d9814215 	stw	r6,1288(sp)
  805770:	30c00005 	stb	r3,0(r6)
  805774:	003db006 	br	804e38 <___vfprintf_internal_r+0xa6c>
  805778:	88800068 	cmpgeui	r2,r17,1
  80577c:	10002c1e 	bne	r2,zero,805830 <___vfprintf_internal_r+0x1464>
  805780:	8800021e 	bne	r17,zero,80578c <___vfprintf_internal_r+0x13c0>
  805784:	00800244 	movi	r2,9
  805788:	14002936 	bltu	r2,r16,805830 <___vfprintf_internal_r+0x1464>
  80578c:	d90019c4 	addi	r4,sp,103
  805790:	dd001004 	addi	r20,sp,64
  805794:	d9014215 	stw	r4,1288(sp)
  805798:	d9014217 	ldw	r4,1288(sp)
  80579c:	80800c04 	addi	r2,r16,48
  8057a0:	20800005 	stb	r2,0(r4)
  8057a4:	003da406 	br	804e38 <___vfprintf_internal_r+0xa6c>
  8057a8:	dc400e17 	ldw	r17,56(sp)
  8057ac:	07002074 	movhi	fp,129
  8057b0:	e713b504 	addi	fp,fp,20180
  8057b4:	9425883a 	add	r18,r18,r16
  8057b8:	8c400044 	addi	r17,r17,1
  8057bc:	008001c4 	movi	r2,7
  8057c0:	1f000015 	stw	fp,0(r3)
  8057c4:	1c000115 	stw	r16,4(r3)
  8057c8:	dc800f15 	stw	r18,60(sp)
  8057cc:	dc400e15 	stw	r17,56(sp)
  8057d0:	147de216 	blt	r2,r17,804f5c <___vfprintf_internal_r+0xb90>
  8057d4:	18c00204 	addi	r3,r3,8
  8057d8:	003c7a06 	br	8049c4 <___vfprintf_internal_r+0x5f8>
  8057dc:	01000084 	movi	r4,2
  8057e0:	d8000405 	stb	zero,16(sp)
  8057e4:	003d8706 	br	804e04 <___vfprintf_internal_r+0xa38>
  8057e8:	d9814d17 	ldw	r6,1332(sp)
  8057ec:	30c4703a 	and	r2,r6,r3
  8057f0:	1005003a 	cmpeq	r2,r2,zero
  8057f4:	103cb926 	beq	r2,zero,804adc <___vfprintf_internal_r+0x710>
  8057f8:	d9014217 	ldw	r4,1288(sp)
  8057fc:	94800044 	addi	r18,r18,1
  805800:	8c400044 	addi	r17,r17,1
  805804:	008001c4 	movi	r2,7
  805808:	a9000015 	stw	r4,0(r21)
  80580c:	a8c00115 	stw	r3,4(r21)
  805810:	dc800f15 	stw	r18,60(sp)
  805814:	dc400e15 	stw	r17,56(sp)
  805818:	147e6616 	blt	r2,r17,8051b4 <___vfprintf_internal_r+0xde8>
  80581c:	acc00204 	addi	r19,r21,8
  805820:	003cd706 	br	804b80 <___vfprintf_internal_r+0x7b4>
  805824:	07002074 	movhi	fp,129
  805828:	e713b504 	addi	fp,fp,20180
  80582c:	003c4f06 	br	80496c <___vfprintf_internal_r+0x5a0>
  805830:	dd001004 	addi	r20,sp,64
  805834:	dc801a04 	addi	r18,sp,104
  805838:	8009883a 	mov	r4,r16
  80583c:	880b883a 	mov	r5,r17
  805840:	01800284 	movi	r6,10
  805844:	000f883a 	mov	r7,zero
  805848:	080e3380 	call	80e338 <__umoddi3>
  80584c:	12000c04 	addi	r8,r2,48
  805850:	94bfffc4 	addi	r18,r18,-1
  805854:	8009883a 	mov	r4,r16
  805858:	880b883a 	mov	r5,r17
  80585c:	01800284 	movi	r6,10
  805860:	000f883a 	mov	r7,zero
  805864:	92000005 	stb	r8,0(r18)
  805868:	080dd5c0 	call	80dd5c <__udivdi3>
  80586c:	1009883a 	mov	r4,r2
  805870:	1021883a 	mov	r16,r2
  805874:	18800068 	cmpgeui	r2,r3,1
  805878:	1823883a 	mov	r17,r3
  80587c:	103fee1e 	bne	r2,zero,805838 <___vfprintf_internal_r+0x146c>
  805880:	1800021e 	bne	r3,zero,80588c <___vfprintf_internal_r+0x14c0>
  805884:	00800244 	movi	r2,9
  805888:	113feb36 	bltu	r2,r4,805838 <___vfprintf_internal_r+0x146c>
  80588c:	94bfffc4 	addi	r18,r18,-1
  805890:	dc814215 	stw	r18,1288(sp)
  805894:	003fc006 	br	805798 <___vfprintf_internal_r+0x13cc>
  805898:	d9014d17 	ldw	r4,1332(sp)
  80589c:	2080004c 	andi	r2,r4,1
  8058a0:	10009a1e 	bne	r2,zero,805b0c <___vfprintf_internal_r+0x1740>
  8058a4:	d9401a04 	addi	r5,sp,104
  8058a8:	dd001004 	addi	r20,sp,64
  8058ac:	d9414215 	stw	r5,1288(sp)
  8058b0:	003d6106 	br	804e38 <___vfprintf_internal_r+0xa6c>
  8058b4:	d9015017 	ldw	r4,1344(sp)
  8058b8:	b00b883a 	mov	r5,r22
  8058bc:	d9800d04 	addi	r6,sp,52
  8058c0:	08043740 	call	804374 <__sprint_r>
  8058c4:	103c791e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  8058c8:	dc800f17 	ldw	r18,60(sp)
  8058cc:	d8c01a04 	addi	r3,sp,104
  8058d0:	003cff06 	br	804cd0 <___vfprintf_internal_r+0x904>
  8058d4:	d8c14d17 	ldw	r3,1332(sp)
  8058d8:	1880040c 	andi	r2,r3,16
  8058dc:	1000711e 	bne	r2,zero,805aa4 <___vfprintf_internal_r+0x16d8>
  8058e0:	d9014d17 	ldw	r4,1332(sp)
  8058e4:	2080100c 	andi	r2,r4,64
  8058e8:	10006e26 	beq	r2,zero,805aa4 <___vfprintf_internal_r+0x16d8>
  8058ec:	3c00000b 	ldhu	r16,0(r7)
  8058f0:	0023883a 	mov	r17,zero
  8058f4:	39c00104 	addi	r7,r7,4
  8058f8:	d9c14115 	stw	r7,1284(sp)
  8058fc:	003f0006 	br	805500 <___vfprintf_internal_r+0x1134>
  805900:	dc400e17 	ldw	r17,56(sp)
  805904:	07002074 	movhi	fp,129
  805908:	e713b504 	addi	fp,fp,20180
  80590c:	9425883a 	add	r18,r18,r16
  805910:	8c400044 	addi	r17,r17,1
  805914:	008001c4 	movi	r2,7
  805918:	1f000015 	stw	fp,0(r3)
  80591c:	1c000115 	stw	r16,4(r3)
  805920:	dc800f15 	stw	r18,60(sp)
  805924:	dc400e15 	stw	r17,56(sp)
  805928:	147d7616 	blt	r2,r17,804f04 <___vfprintf_internal_r+0xb38>
  80592c:	18c00204 	addi	r3,r3,8
  805930:	003d7b06 	br	804f20 <___vfprintf_internal_r+0xb54>
  805934:	dc800f17 	ldw	r18,60(sp)
  805938:	dc400e17 	ldw	r17,56(sp)
  80593c:	07002074 	movhi	fp,129
  805940:	e713b904 	addi	fp,fp,20196
  805944:	003bc006 	br	804848 <___vfprintf_internal_r+0x47c>
  805948:	d9015017 	ldw	r4,1344(sp)
  80594c:	b00b883a 	mov	r5,r22
  805950:	d9800d04 	addi	r6,sp,52
  805954:	08043740 	call	804374 <__sprint_r>
  805958:	103c541e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  80595c:	dc800f17 	ldw	r18,60(sp)
  805960:	d8c01a04 	addi	r3,sp,104
  805964:	003ce906 	br	804d0c <___vfprintf_internal_r+0x940>
  805968:	3c000017 	ldw	r16,0(r7)
  80596c:	0009883a 	mov	r4,zero
  805970:	39c00104 	addi	r7,r7,4
  805974:	0023883a 	mov	r17,zero
  805978:	d9c14115 	stw	r7,1284(sp)
  80597c:	d8000405 	stb	zero,16(sp)
  805980:	003d2006 	br	804e04 <___vfprintf_internal_r+0xa38>
  805984:	38800017 	ldw	r2,0(r7)
  805988:	39c00104 	addi	r7,r7,4
  80598c:	d9c14115 	stw	r7,1284(sp)
  805990:	1023d7fa 	srai	r17,r2,31
  805994:	1021883a 	mov	r16,r2
  805998:	003d1806 	br	804dfc <___vfprintf_internal_r+0xa30>
  80599c:	3c000017 	ldw	r16,0(r7)
  8059a0:	01000044 	movi	r4,1
  8059a4:	39c00104 	addi	r7,r7,4
  8059a8:	0023883a 	mov	r17,zero
  8059ac:	d9c14115 	stw	r7,1284(sp)
  8059b0:	d8000405 	stb	zero,16(sp)
  8059b4:	003d1306 	br	804e04 <___vfprintf_internal_r+0xa38>
  8059b8:	00802074 	movhi	r2,129
  8059bc:	1093b404 	addi	r2,r2,20176
  8059c0:	94800044 	addi	r18,r18,1
  8059c4:	8c400044 	addi	r17,r17,1
  8059c8:	a8800015 	stw	r2,0(r21)
  8059cc:	00c00044 	movi	r3,1
  8059d0:	008001c4 	movi	r2,7
  8059d4:	a8c00115 	stw	r3,4(r21)
  8059d8:	dc800f15 	stw	r18,60(sp)
  8059dc:	dc400e15 	stw	r17,56(sp)
  8059e0:	1440ca16 	blt	r2,r17,805d0c <___vfprintf_internal_r+0x1940>
  8059e4:	a8c00204 	addi	r3,r21,8
  8059e8:	2000061e 	bne	r4,zero,805a04 <___vfprintf_internal_r+0x1638>
  8059ec:	d9414817 	ldw	r5,1312(sp)
  8059f0:	2800041e 	bne	r5,zero,805a04 <___vfprintf_internal_r+0x1638>
  8059f4:	d9814d17 	ldw	r6,1332(sp)
  8059f8:	3080004c 	andi	r2,r6,1
  8059fc:	1005003a 	cmpeq	r2,r2,zero
  805a00:	103bf01e 	bne	r2,zero,8049c4 <___vfprintf_internal_r+0x5f8>
  805a04:	00800044 	movi	r2,1
  805a08:	dc400e17 	ldw	r17,56(sp)
  805a0c:	18800115 	stw	r2,4(r3)
  805a10:	d8814a17 	ldw	r2,1320(sp)
  805a14:	94800044 	addi	r18,r18,1
  805a18:	8c400044 	addi	r17,r17,1
  805a1c:	18800015 	stw	r2,0(r3)
  805a20:	008001c4 	movi	r2,7
  805a24:	dc800f15 	stw	r18,60(sp)
  805a28:	dc400e15 	stw	r17,56(sp)
  805a2c:	1440ca16 	blt	r2,r17,805d58 <___vfprintf_internal_r+0x198c>
  805a30:	18c00204 	addi	r3,r3,8
  805a34:	0121c83a 	sub	r16,zero,r4
  805a38:	0400500e 	bge	zero,r16,805b7c <___vfprintf_internal_r+0x17b0>
  805a3c:	00800404 	movi	r2,16
  805a40:	1400800e 	bge	r2,r16,805c44 <___vfprintf_internal_r+0x1878>
  805a44:	1027883a 	mov	r19,r2
  805a48:	07002074 	movhi	fp,129
  805a4c:	e713b504 	addi	fp,fp,20180
  805a50:	050001c4 	movi	r20,7
  805a54:	00000306 	br	805a64 <___vfprintf_internal_r+0x1698>
  805a58:	18c00204 	addi	r3,r3,8
  805a5c:	843ffc04 	addi	r16,r16,-16
  805a60:	9c007a0e 	bge	r19,r16,805c4c <___vfprintf_internal_r+0x1880>
  805a64:	94800404 	addi	r18,r18,16
  805a68:	8c400044 	addi	r17,r17,1
  805a6c:	1f000015 	stw	fp,0(r3)
  805a70:	1cc00115 	stw	r19,4(r3)
  805a74:	dc800f15 	stw	r18,60(sp)
  805a78:	dc400e15 	stw	r17,56(sp)
  805a7c:	a47ff60e 	bge	r20,r17,805a58 <___vfprintf_internal_r+0x168c>
  805a80:	d9015017 	ldw	r4,1344(sp)
  805a84:	b00b883a 	mov	r5,r22
  805a88:	d9800d04 	addi	r6,sp,52
  805a8c:	08043740 	call	804374 <__sprint_r>
  805a90:	103c061e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805a94:	dc800f17 	ldw	r18,60(sp)
  805a98:	dc400e17 	ldw	r17,56(sp)
  805a9c:	d8c01a04 	addi	r3,sp,104
  805aa0:	003fee06 	br	805a5c <___vfprintf_internal_r+0x1690>
  805aa4:	3c000017 	ldw	r16,0(r7)
  805aa8:	0023883a 	mov	r17,zero
  805aac:	39c00104 	addi	r7,r7,4
  805ab0:	d9c14115 	stw	r7,1284(sp)
  805ab4:	003e9206 	br	805500 <___vfprintf_internal_r+0x1134>
  805ab8:	d9401a04 	addi	r5,sp,104
  805abc:	dd001004 	addi	r20,sp,64
  805ac0:	d9414215 	stw	r5,1288(sp)
  805ac4:	d9814517 	ldw	r6,1300(sp)
  805ac8:	880a973a 	slli	r5,r17,28
  805acc:	8004d13a 	srli	r2,r16,4
  805ad0:	810003cc 	andi	r4,r16,15
  805ad4:	3109883a 	add	r4,r6,r4
  805ad8:	2884b03a 	or	r2,r5,r2
  805adc:	21400003 	ldbu	r5,0(r4)
  805ae0:	d9014217 	ldw	r4,1288(sp)
  805ae4:	8806d13a 	srli	r3,r17,4
  805ae8:	1021883a 	mov	r16,r2
  805aec:	213fffc4 	addi	r4,r4,-1
  805af0:	d9014215 	stw	r4,1288(sp)
  805af4:	d9814217 	ldw	r6,1288(sp)
  805af8:	10c8b03a 	or	r4,r2,r3
  805afc:	1823883a 	mov	r17,r3
  805b00:	31400005 	stb	r5,0(r6)
  805b04:	203fef1e 	bne	r4,zero,805ac4 <___vfprintf_internal_r+0x16f8>
  805b08:	003ccb06 	br	804e38 <___vfprintf_internal_r+0xa6c>
  805b0c:	00800c04 	movi	r2,48
  805b10:	d98019c4 	addi	r6,sp,103
  805b14:	dd001004 	addi	r20,sp,64
  805b18:	d88019c5 	stb	r2,103(sp)
  805b1c:	d9814215 	stw	r6,1288(sp)
  805b20:	003cc506 	br	804e38 <___vfprintf_internal_r+0xa6c>
  805b24:	dc400e17 	ldw	r17,56(sp)
  805b28:	07002074 	movhi	fp,129
  805b2c:	e713b904 	addi	fp,fp,20196
  805b30:	003bc706 	br	804a50 <___vfprintf_internal_r+0x684>
  805b34:	d9414d17 	ldw	r5,1332(sp)
  805b38:	2880040c 	andi	r2,r5,16
  805b3c:	10007c26 	beq	r2,zero,805d30 <___vfprintf_internal_r+0x1964>
  805b40:	38800017 	ldw	r2,0(r7)
  805b44:	39c00104 	addi	r7,r7,4
  805b48:	d9c14115 	stw	r7,1284(sp)
  805b4c:	d9814c17 	ldw	r6,1328(sp)
  805b50:	d9c14117 	ldw	r7,1284(sp)
  805b54:	11800015 	stw	r6,0(r2)
  805b58:	003a7806 	br	80453c <___vfprintf_internal_r+0x170>
  805b5c:	d9015017 	ldw	r4,1344(sp)
  805b60:	b00b883a 	mov	r5,r22
  805b64:	d9800d04 	addi	r6,sp,52
  805b68:	08043740 	call	804374 <__sprint_r>
  805b6c:	103bcf1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805b70:	dc800f17 	ldw	r18,60(sp)
  805b74:	dc400e17 	ldw	r17,56(sp)
  805b78:	d8c01a04 	addi	r3,sp,104
  805b7c:	d9014817 	ldw	r4,1312(sp)
  805b80:	d9414217 	ldw	r5,1288(sp)
  805b84:	8c400044 	addi	r17,r17,1
  805b88:	9125883a 	add	r18,r18,r4
  805b8c:	008001c4 	movi	r2,7
  805b90:	19400015 	stw	r5,0(r3)
  805b94:	19000115 	stw	r4,4(r3)
  805b98:	dc800f15 	stw	r18,60(sp)
  805b9c:	dc400e15 	stw	r17,56(sp)
  805ba0:	147cee16 	blt	r2,r17,804f5c <___vfprintf_internal_r+0xb90>
  805ba4:	18c00204 	addi	r3,r3,8
  805ba8:	003b8606 	br	8049c4 <___vfprintf_internal_r+0x5f8>
  805bac:	38c00017 	ldw	r3,0(r7)
  805bb0:	39000204 	addi	r4,r7,8
  805bb4:	d9014115 	stw	r4,1284(sp)
  805bb8:	d8c14315 	stw	r3,1292(sp)
  805bbc:	39c00117 	ldw	r7,4(r7)
  805bc0:	d9c14415 	stw	r7,1296(sp)
  805bc4:	003e2006 	br	805448 <___vfprintf_internal_r+0x107c>
  805bc8:	0005883a 	mov	r2,zero
  805bcc:	1409c83a 	sub	r4,r2,r16
  805bd0:	1105803a 	cmpltu	r2,r2,r4
  805bd4:	044bc83a 	sub	r5,zero,r17
  805bd8:	2885c83a 	sub	r2,r5,r2
  805bdc:	2021883a 	mov	r16,r4
  805be0:	1023883a 	mov	r17,r2
  805be4:	01000044 	movi	r4,1
  805be8:	00800b44 	movi	r2,45
  805bec:	d8800405 	stb	r2,16(sp)
  805bf0:	003c8406 	br	804e04 <___vfprintf_internal_r+0xa38>
  805bf4:	d9015017 	ldw	r4,1344(sp)
  805bf8:	b00b883a 	mov	r5,r22
  805bfc:	d9800d04 	addi	r6,sp,52
  805c00:	08043740 	call	804374 <__sprint_r>
  805c04:	103ba91e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805c08:	dc800f17 	ldw	r18,60(sp)
  805c0c:	dc400e17 	ldw	r17,56(sp)
  805c10:	d9000617 	ldw	r4,24(sp)
  805c14:	d9401a04 	addi	r5,sp,104
  805c18:	003da706 	br	8052b8 <___vfprintf_internal_r+0xeec>
  805c1c:	d9015017 	ldw	r4,1344(sp)
  805c20:	b00b883a 	mov	r5,r22
  805c24:	d9800d04 	addi	r6,sp,52
  805c28:	08043740 	call	804374 <__sprint_r>
  805c2c:	103b9f1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805c30:	dc800f17 	ldw	r18,60(sp)
  805c34:	dc400e17 	ldw	r17,56(sp)
  805c38:	d9000617 	ldw	r4,24(sp)
  805c3c:	d8c01a04 	addi	r3,sp,104
  805c40:	003d9106 	br	805288 <___vfprintf_internal_r+0xebc>
  805c44:	07002074 	movhi	fp,129
  805c48:	e713b504 	addi	fp,fp,20180
  805c4c:	9425883a 	add	r18,r18,r16
  805c50:	8c400044 	addi	r17,r17,1
  805c54:	008001c4 	movi	r2,7
  805c58:	1f000015 	stw	fp,0(r3)
  805c5c:	1c000115 	stw	r16,4(r3)
  805c60:	dc800f15 	stw	r18,60(sp)
  805c64:	dc400e15 	stw	r17,56(sp)
  805c68:	147fbc16 	blt	r2,r17,805b5c <___vfprintf_internal_r+0x1790>
  805c6c:	18c00204 	addi	r3,r3,8
  805c70:	003fc206 	br	805b7c <___vfprintf_internal_r+0x17b0>
  805c74:	d9015017 	ldw	r4,1344(sp)
  805c78:	b00b883a 	mov	r5,r22
  805c7c:	d9800d04 	addi	r6,sp,52
  805c80:	08043740 	call	804374 <__sprint_r>
  805c84:	103b891e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805c88:	dc800f17 	ldw	r18,60(sp)
  805c8c:	d9000617 	ldw	r4,24(sp)
  805c90:	d8c01a04 	addi	r3,sp,104
  805c94:	003d0206 	br	8050a0 <___vfprintf_internal_r+0xcd4>
  805c98:	07002074 	movhi	fp,129
  805c9c:	e713b504 	addi	fp,fp,20180
  805ca0:	003be406 	br	804c34 <___vfprintf_internal_r+0x868>
  805ca4:	00802074 	movhi	r2,129
  805ca8:	1093a304 	addi	r2,r2,20108
  805cac:	d8814215 	stw	r2,1288(sp)
  805cb0:	003df506 	br	805488 <___vfprintf_internal_r+0x10bc>
  805cb4:	d9014317 	ldw	r4,1292(sp)
  805cb8:	d9414417 	ldw	r5,1296(sp)
  805cbc:	080aa6c0 	call	80aa6c <__isnand>
  805cc0:	10003926 	beq	r2,zero,805da8 <___vfprintf_internal_r+0x19dc>
  805cc4:	d9414e17 	ldw	r5,1336(sp)
  805cc8:	008011c4 	movi	r2,71
  805ccc:	1140ce16 	blt	r2,r5,806008 <___vfprintf_internal_r+0x1c3c>
  805cd0:	01802074 	movhi	r6,129
  805cd4:	3193a404 	addi	r6,r6,20112
  805cd8:	d9814215 	stw	r6,1288(sp)
  805cdc:	003dea06 	br	805488 <___vfprintf_internal_r+0x10bc>
  805ce0:	d9014d17 	ldw	r4,1332(sp)
  805ce4:	bdc00044 	addi	r23,r23,1
  805ce8:	b8c00007 	ldb	r3,0(r23)
  805cec:	21000814 	ori	r4,r4,32
  805cf0:	d9014d15 	stw	r4,1332(sp)
  805cf4:	003a3406 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  805cf8:	dcc14615 	stw	r19,1304(sp)
  805cfc:	98011016 	blt	r19,zero,806140 <___vfprintf_internal_r+0x1d74>
  805d00:	980f883a 	mov	r7,r19
  805d04:	d8014715 	stw	zero,1308(sp)
  805d08:	003c5206 	br	804e54 <___vfprintf_internal_r+0xa88>
  805d0c:	d9015017 	ldw	r4,1344(sp)
  805d10:	b00b883a 	mov	r5,r22
  805d14:	d9800d04 	addi	r6,sp,52
  805d18:	08043740 	call	804374 <__sprint_r>
  805d1c:	103b631e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805d20:	dc800f17 	ldw	r18,60(sp)
  805d24:	d9000617 	ldw	r4,24(sp)
  805d28:	d8c01a04 	addi	r3,sp,104
  805d2c:	003f2e06 	br	8059e8 <___vfprintf_internal_r+0x161c>
  805d30:	d8c14d17 	ldw	r3,1332(sp)
  805d34:	1880100c 	andi	r2,r3,64
  805d38:	1000a026 	beq	r2,zero,805fbc <___vfprintf_internal_r+0x1bf0>
  805d3c:	38800017 	ldw	r2,0(r7)
  805d40:	39c00104 	addi	r7,r7,4
  805d44:	d9c14115 	stw	r7,1284(sp)
  805d48:	d9014c17 	ldw	r4,1328(sp)
  805d4c:	d9c14117 	ldw	r7,1284(sp)
  805d50:	1100000d 	sth	r4,0(r2)
  805d54:	0039f906 	br	80453c <___vfprintf_internal_r+0x170>
  805d58:	d9015017 	ldw	r4,1344(sp)
  805d5c:	b00b883a 	mov	r5,r22
  805d60:	d9800d04 	addi	r6,sp,52
  805d64:	08043740 	call	804374 <__sprint_r>
  805d68:	103b501e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805d6c:	dc800f17 	ldw	r18,60(sp)
  805d70:	dc400e17 	ldw	r17,56(sp)
  805d74:	d9000617 	ldw	r4,24(sp)
  805d78:	d8c01a04 	addi	r3,sp,104
  805d7c:	003f2d06 	br	805a34 <___vfprintf_internal_r+0x1668>
  805d80:	00800184 	movi	r2,6
  805d84:	14c09a36 	bltu	r2,r19,805ff0 <___vfprintf_internal_r+0x1c24>
  805d88:	dcc14615 	stw	r19,1304(sp)
  805d8c:	9800010e 	bge	r19,zero,805d94 <___vfprintf_internal_r+0x19c8>
  805d90:	d8014615 	stw	zero,1304(sp)
  805d94:	00802074 	movhi	r2,129
  805d98:	1093a604 	addi	r2,r2,20120
  805d9c:	980f883a 	mov	r7,r19
  805da0:	d8814215 	stw	r2,1288(sp)
  805da4:	003a7806 	br	804788 <___vfprintf_internal_r+0x3bc>
  805da8:	00bfffc4 	movi	r2,-1
  805dac:	9880e226 	beq	r19,r2,806138 <___vfprintf_internal_r+0x1d6c>
  805db0:	d9414e17 	ldw	r5,1336(sp)
  805db4:	008019c4 	movi	r2,103
  805db8:	2880dc26 	beq	r5,r2,80612c <___vfprintf_internal_r+0x1d60>
  805dbc:	008011c4 	movi	r2,71
  805dc0:	2880da26 	beq	r5,r2,80612c <___vfprintf_internal_r+0x1d60>
  805dc4:	d9414d17 	ldw	r5,1332(sp)
  805dc8:	d9014417 	ldw	r4,1296(sp)
  805dcc:	d9814317 	ldw	r6,1292(sp)
  805dd0:	29404014 	ori	r5,r5,256
  805dd4:	d9414d15 	stw	r5,1332(sp)
  805dd8:	2000cc16 	blt	r4,zero,80610c <___vfprintf_internal_r+0x1d40>
  805ddc:	3021883a 	mov	r16,r6
  805de0:	2023883a 	mov	r17,r4
  805de4:	0039883a 	mov	fp,zero
  805de8:	d9414e17 	ldw	r5,1336(sp)
  805dec:	00801984 	movi	r2,102
  805df0:	2880b726 	beq	r5,r2,8060d0 <___vfprintf_internal_r+0x1d04>
  805df4:	00801184 	movi	r2,70
  805df8:	2880b526 	beq	r5,r2,8060d0 <___vfprintf_internal_r+0x1d04>
  805dfc:	00801944 	movi	r2,101
  805e00:	2880c826 	beq	r5,r2,806124 <___vfprintf_internal_r+0x1d58>
  805e04:	00801144 	movi	r2,69
  805e08:	2880c626 	beq	r5,r2,806124 <___vfprintf_internal_r+0x1d58>
  805e0c:	9829883a 	mov	r20,r19
  805e10:	d9015017 	ldw	r4,1344(sp)
  805e14:	d8800604 	addi	r2,sp,24
  805e18:	880d883a 	mov	r6,r17
  805e1c:	d8800115 	stw	r2,4(sp)
  805e20:	d8c00704 	addi	r3,sp,28
  805e24:	d8800804 	addi	r2,sp,32
  805e28:	800b883a 	mov	r5,r16
  805e2c:	01c00084 	movi	r7,2
  805e30:	d8c00215 	stw	r3,8(sp)
  805e34:	d8800315 	stw	r2,12(sp)
  805e38:	dd000015 	stw	r20,0(sp)
  805e3c:	0807e580 	call	807e58 <_dtoa_r>
  805e40:	d9814e17 	ldw	r6,1336(sp)
  805e44:	d8814215 	stw	r2,1288(sp)
  805e48:	008019c4 	movi	r2,103
  805e4c:	30809526 	beq	r6,r2,8060a4 <___vfprintf_internal_r+0x1cd8>
  805e50:	d8c14e17 	ldw	r3,1336(sp)
  805e54:	008011c4 	movi	r2,71
  805e58:	18809226 	beq	r3,r2,8060a4 <___vfprintf_internal_r+0x1cd8>
  805e5c:	d9414217 	ldw	r5,1288(sp)
  805e60:	d9814e17 	ldw	r6,1336(sp)
  805e64:	00801984 	movi	r2,102
  805e68:	2d25883a 	add	r18,r5,r20
  805e6c:	30808626 	beq	r6,r2,806088 <___vfprintf_internal_r+0x1cbc>
  805e70:	00801184 	movi	r2,70
  805e74:	30808426 	beq	r6,r2,806088 <___vfprintf_internal_r+0x1cbc>
  805e78:	000d883a 	mov	r6,zero
  805e7c:	000f883a 	mov	r7,zero
  805e80:	880b883a 	mov	r5,r17
  805e84:	8009883a 	mov	r4,r16
  805e88:	080f5700 	call	80f570 <__eqdf2>
  805e8c:	1000751e 	bne	r2,zero,806064 <___vfprintf_internal_r+0x1c98>
  805e90:	9005883a 	mov	r2,r18
  805e94:	dc800815 	stw	r18,32(sp)
  805e98:	d9014217 	ldw	r4,1288(sp)
  805e9c:	d9414e17 	ldw	r5,1336(sp)
  805ea0:	00c019c4 	movi	r3,103
  805ea4:	1125c83a 	sub	r18,r2,r4
  805ea8:	28c06826 	beq	r5,r3,80604c <___vfprintf_internal_r+0x1c80>
  805eac:	008011c4 	movi	r2,71
  805eb0:	28806626 	beq	r5,r2,80604c <___vfprintf_internal_r+0x1c80>
  805eb4:	d9000617 	ldw	r4,24(sp)
  805eb8:	d8c14e17 	ldw	r3,1336(sp)
  805ebc:	00801944 	movi	r2,101
  805ec0:	10c05516 	blt	r2,r3,806018 <___vfprintf_internal_r+0x1c4c>
  805ec4:	213fffc4 	addi	r4,r4,-1
  805ec8:	d9000615 	stw	r4,24(sp)
  805ecc:	d8c00905 	stb	r3,36(sp)
  805ed0:	2021883a 	mov	r16,r4
  805ed4:	2000c116 	blt	r4,zero,8061dc <___vfprintf_internal_r+0x1e10>
  805ed8:	00800ac4 	movi	r2,43
  805edc:	d8800945 	stb	r2,37(sp)
  805ee0:	00800244 	movi	r2,9
  805ee4:	1400af0e 	bge	r2,r16,8061a4 <___vfprintf_internal_r+0x1dd8>
  805ee8:	1027883a 	mov	r19,r2
  805eec:	dc400cc4 	addi	r17,sp,51
  805ef0:	8009883a 	mov	r4,r16
  805ef4:	01400284 	movi	r5,10
  805ef8:	080fd540 	call	80fd54 <__modsi3>
  805efc:	10800c04 	addi	r2,r2,48
  805f00:	8c7fffc4 	addi	r17,r17,-1
  805f04:	8009883a 	mov	r4,r16
  805f08:	01400284 	movi	r5,10
  805f0c:	88800005 	stb	r2,0(r17)
  805f10:	080fcf40 	call	80fcf4 <__divsi3>
  805f14:	1021883a 	mov	r16,r2
  805f18:	98bff516 	blt	r19,r2,805ef0 <___vfprintf_internal_r+0x1b24>
  805f1c:	10c00c04 	addi	r3,r2,48
  805f20:	d8800b04 	addi	r2,sp,44
  805f24:	108001c4 	addi	r2,r2,7
  805f28:	897fffc4 	addi	r5,r17,-1
  805f2c:	88ffffc5 	stb	r3,-1(r17)
  805f30:	2880a72e 	bgeu	r5,r2,8061d0 <___vfprintf_internal_r+0x1e04>
  805f34:	1009883a 	mov	r4,r2
  805f38:	d9800904 	addi	r6,sp,36
  805f3c:	d8c00984 	addi	r3,sp,38
  805f40:	28800003 	ldbu	r2,0(r5)
  805f44:	29400044 	addi	r5,r5,1
  805f48:	18800005 	stb	r2,0(r3)
  805f4c:	18c00044 	addi	r3,r3,1
  805f50:	293ffb36 	bltu	r5,r4,805f40 <___vfprintf_internal_r+0x1b74>
  805f54:	1987c83a 	sub	r3,r3,r6
  805f58:	00800044 	movi	r2,1
  805f5c:	d8c14915 	stw	r3,1316(sp)
  805f60:	90cf883a 	add	r7,r18,r3
  805f64:	1480960e 	bge	r2,r18,8061c0 <___vfprintf_internal_r+0x1df4>
  805f68:	39c00044 	addi	r7,r7,1
  805f6c:	d9c14615 	stw	r7,1304(sp)
  805f70:	38003416 	blt	r7,zero,806044 <___vfprintf_internal_r+0x1c78>
  805f74:	e0803fcc 	andi	r2,fp,255
  805f78:	1080201c 	xori	r2,r2,128
  805f7c:	10bfe004 	addi	r2,r2,-128
  805f80:	10004e26 	beq	r2,zero,8060bc <___vfprintf_internal_r+0x1cf0>
  805f84:	00800b44 	movi	r2,45
  805f88:	dc814815 	stw	r18,1312(sp)
  805f8c:	d8014715 	stw	zero,1308(sp)
  805f90:	d8800405 	stb	r2,16(sp)
  805f94:	003bb106 	br	804e5c <___vfprintf_internal_r+0xa90>
  805f98:	00800b44 	movi	r2,45
  805f9c:	d8800405 	stb	r2,16(sp)
  805fa0:	003d3306 	br	805470 <___vfprintf_internal_r+0x10a4>
  805fa4:	d9015017 	ldw	r4,1344(sp)
  805fa8:	b00b883a 	mov	r5,r22
  805fac:	d9800d04 	addi	r6,sp,52
  805fb0:	08043740 	call	804374 <__sprint_r>
  805fb4:	103abd1e 	bne	r2,zero,804aac <___vfprintf_internal_r+0x6e0>
  805fb8:	003abb06 	br	804aa8 <___vfprintf_internal_r+0x6dc>
  805fbc:	38800017 	ldw	r2,0(r7)
  805fc0:	39c00104 	addi	r7,r7,4
  805fc4:	d9c14115 	stw	r7,1284(sp)
  805fc8:	d9414c17 	ldw	r5,1328(sp)
  805fcc:	d9c14117 	ldw	r7,1284(sp)
  805fd0:	11400015 	stw	r5,0(r2)
  805fd4:	00395906 	br	80453c <___vfprintf_internal_r+0x170>
  805fd8:	980f883a 	mov	r7,r19
  805fdc:	dcc14615 	stw	r19,1304(sp)
  805fe0:	d8014715 	stw	zero,1308(sp)
  805fe4:	003b9b06 	br	804e54 <___vfprintf_internal_r+0xa88>
  805fe8:	0027883a 	mov	r19,zero
  805fec:	00397806 	br	8045d0 <___vfprintf_internal_r+0x204>
  805ff0:	00c02074 	movhi	r3,129
  805ff4:	18d3a604 	addi	r3,r3,20120
  805ff8:	100f883a 	mov	r7,r2
  805ffc:	d8814615 	stw	r2,1304(sp)
  806000:	d8c14215 	stw	r3,1288(sp)
  806004:	0039e006 	br	804788 <___vfprintf_internal_r+0x3bc>
  806008:	00802074 	movhi	r2,129
  80600c:	1093a504 	addi	r2,r2,20116
  806010:	d8814215 	stw	r2,1288(sp)
  806014:	003d1c06 	br	805488 <___vfprintf_internal_r+0x10bc>
  806018:	d9414e17 	ldw	r5,1336(sp)
  80601c:	00801984 	movi	r2,102
  806020:	28804926 	beq	r5,r2,806148 <___vfprintf_internal_r+0x1d7c>
  806024:	200f883a 	mov	r7,r4
  806028:	24805716 	blt	r4,r18,806188 <___vfprintf_internal_r+0x1dbc>
  80602c:	d9414d17 	ldw	r5,1332(sp)
  806030:	2880004c 	andi	r2,r5,1
  806034:	10000126 	beq	r2,zero,80603c <___vfprintf_internal_r+0x1c70>
  806038:	21c00044 	addi	r7,r4,1
  80603c:	d9c14615 	stw	r7,1304(sp)
  806040:	383fcc0e 	bge	r7,zero,805f74 <___vfprintf_internal_r+0x1ba8>
  806044:	d8014615 	stw	zero,1304(sp)
  806048:	003fca06 	br	805f74 <___vfprintf_internal_r+0x1ba8>
  80604c:	d9000617 	ldw	r4,24(sp)
  806050:	00bfff04 	movi	r2,-4
  806054:	1100480e 	bge	r2,r4,806178 <___vfprintf_internal_r+0x1dac>
  806058:	99004716 	blt	r19,r4,806178 <___vfprintf_internal_r+0x1dac>
  80605c:	d8c14e15 	stw	r3,1336(sp)
  806060:	003ff006 	br	806024 <___vfprintf_internal_r+0x1c58>
  806064:	d8800817 	ldw	r2,32(sp)
  806068:	14bf8b2e 	bgeu	r2,r18,805e98 <___vfprintf_internal_r+0x1acc>
  80606c:	9007883a 	mov	r3,r18
  806070:	01000c04 	movi	r4,48
  806074:	11000005 	stb	r4,0(r2)
  806078:	10800044 	addi	r2,r2,1
  80607c:	d8800815 	stw	r2,32(sp)
  806080:	18bffc1e 	bne	r3,r2,806074 <___vfprintf_internal_r+0x1ca8>
  806084:	003f8406 	br	805e98 <___vfprintf_internal_r+0x1acc>
  806088:	d8814217 	ldw	r2,1288(sp)
  80608c:	10c00007 	ldb	r3,0(r2)
  806090:	00800c04 	movi	r2,48
  806094:	18805b26 	beq	r3,r2,806204 <___vfprintf_internal_r+0x1e38>
  806098:	d9000617 	ldw	r4,24(sp)
  80609c:	9125883a 	add	r18,r18,r4
  8060a0:	003f7506 	br	805e78 <___vfprintf_internal_r+0x1aac>
  8060a4:	d9014d17 	ldw	r4,1332(sp)
  8060a8:	2080004c 	andi	r2,r4,1
  8060ac:	1005003a 	cmpeq	r2,r2,zero
  8060b0:	103f6a26 	beq	r2,zero,805e5c <___vfprintf_internal_r+0x1a90>
  8060b4:	d8800817 	ldw	r2,32(sp)
  8060b8:	003f7706 	br	805e98 <___vfprintf_internal_r+0x1acc>
  8060bc:	d9c14615 	stw	r7,1304(sp)
  8060c0:	38004d16 	blt	r7,zero,8061f8 <___vfprintf_internal_r+0x1e2c>
  8060c4:	dc814815 	stw	r18,1312(sp)
  8060c8:	d8014715 	stw	zero,1308(sp)
  8060cc:	003b6106 	br	804e54 <___vfprintf_internal_r+0xa88>
  8060d0:	d9015017 	ldw	r4,1344(sp)
  8060d4:	d8800604 	addi	r2,sp,24
  8060d8:	d8800115 	stw	r2,4(sp)
  8060dc:	d8c00704 	addi	r3,sp,28
  8060e0:	d8800804 	addi	r2,sp,32
  8060e4:	800b883a 	mov	r5,r16
  8060e8:	880d883a 	mov	r6,r17
  8060ec:	01c000c4 	movi	r7,3
  8060f0:	d8c00215 	stw	r3,8(sp)
  8060f4:	d8800315 	stw	r2,12(sp)
  8060f8:	dcc00015 	stw	r19,0(sp)
  8060fc:	9829883a 	mov	r20,r19
  806100:	0807e580 	call	807e58 <_dtoa_r>
  806104:	d8814215 	stw	r2,1288(sp)
  806108:	003f5106 	br	805e50 <___vfprintf_internal_r+0x1a84>
  80610c:	d8c14317 	ldw	r3,1292(sp)
  806110:	d9014417 	ldw	r4,1296(sp)
  806114:	07000b44 	movi	fp,45
  806118:	1821883a 	mov	r16,r3
  80611c:	2460003c 	xorhi	r17,r4,32768
  806120:	003f3106 	br	805de8 <___vfprintf_internal_r+0x1a1c>
  806124:	9d000044 	addi	r20,r19,1
  806128:	003f3906 	br	805e10 <___vfprintf_internal_r+0x1a44>
  80612c:	983f251e 	bne	r19,zero,805dc4 <___vfprintf_internal_r+0x19f8>
  806130:	04c00044 	movi	r19,1
  806134:	003f2306 	br	805dc4 <___vfprintf_internal_r+0x19f8>
  806138:	04c00184 	movi	r19,6
  80613c:	003f2106 	br	805dc4 <___vfprintf_internal_r+0x19f8>
  806140:	d8014615 	stw	zero,1304(sp)
  806144:	003eee06 	br	805d00 <___vfprintf_internal_r+0x1934>
  806148:	200f883a 	mov	r7,r4
  80614c:	0100370e 	bge	zero,r4,80622c <___vfprintf_internal_r+0x1e60>
  806150:	9800031e 	bne	r19,zero,806160 <___vfprintf_internal_r+0x1d94>
  806154:	d9814d17 	ldw	r6,1332(sp)
  806158:	3080004c 	andi	r2,r6,1
  80615c:	103fb726 	beq	r2,zero,80603c <___vfprintf_internal_r+0x1c70>
  806160:	20800044 	addi	r2,r4,1
  806164:	98a7883a 	add	r19,r19,r2
  806168:	dcc14615 	stw	r19,1304(sp)
  80616c:	980f883a 	mov	r7,r19
  806170:	983f800e 	bge	r19,zero,805f74 <___vfprintf_internal_r+0x1ba8>
  806174:	003fb306 	br	806044 <___vfprintf_internal_r+0x1c78>
  806178:	d9814e17 	ldw	r6,1336(sp)
  80617c:	31bfff84 	addi	r6,r6,-2
  806180:	d9814e15 	stw	r6,1336(sp)
  806184:	003f4c06 	br	805eb8 <___vfprintf_internal_r+0x1aec>
  806188:	0100180e 	bge	zero,r4,8061ec <___vfprintf_internal_r+0x1e20>
  80618c:	00800044 	movi	r2,1
  806190:	1485883a 	add	r2,r2,r18
  806194:	d8814615 	stw	r2,1304(sp)
  806198:	100f883a 	mov	r7,r2
  80619c:	103f750e 	bge	r2,zero,805f74 <___vfprintf_internal_r+0x1ba8>
  8061a0:	003fa806 	br	806044 <___vfprintf_internal_r+0x1c78>
  8061a4:	80c00c04 	addi	r3,r16,48
  8061a8:	00800c04 	movi	r2,48
  8061ac:	d8c009c5 	stb	r3,39(sp)
  8061b0:	d9800904 	addi	r6,sp,36
  8061b4:	d8c00a04 	addi	r3,sp,40
  8061b8:	d8800985 	stb	r2,38(sp)
  8061bc:	003f6506 	br	805f54 <___vfprintf_internal_r+0x1b88>
  8061c0:	d9014d17 	ldw	r4,1332(sp)
  8061c4:	2084703a 	and	r2,r4,r2
  8061c8:	103f9c26 	beq	r2,zero,80603c <___vfprintf_internal_r+0x1c70>
  8061cc:	003f6606 	br	805f68 <___vfprintf_internal_r+0x1b9c>
  8061d0:	d9800904 	addi	r6,sp,36
  8061d4:	d8c00984 	addi	r3,sp,38
  8061d8:	003f5e06 	br	805f54 <___vfprintf_internal_r+0x1b88>
  8061dc:	00800b44 	movi	r2,45
  8061e0:	0121c83a 	sub	r16,zero,r4
  8061e4:	d8800945 	stb	r2,37(sp)
  8061e8:	003f3d06 	br	805ee0 <___vfprintf_internal_r+0x1b14>
  8061ec:	00800084 	movi	r2,2
  8061f0:	1105c83a 	sub	r2,r2,r4
  8061f4:	003fe606 	br	806190 <___vfprintf_internal_r+0x1dc4>
  8061f8:	d8014615 	stw	zero,1304(sp)
  8061fc:	dc814815 	stw	r18,1312(sp)
  806200:	003fb106 	br	8060c8 <___vfprintf_internal_r+0x1cfc>
  806204:	000d883a 	mov	r6,zero
  806208:	000f883a 	mov	r7,zero
  80620c:	8009883a 	mov	r4,r16
  806210:	880b883a 	mov	r5,r17
  806214:	080f5f80 	call	80f5f8 <__nedf2>
  806218:	103f9f26 	beq	r2,zero,806098 <___vfprintf_internal_r+0x1ccc>
  80621c:	00800044 	movi	r2,1
  806220:	1509c83a 	sub	r4,r2,r20
  806224:	d9000615 	stw	r4,24(sp)
  806228:	003f9b06 	br	806098 <___vfprintf_internal_r+0x1ccc>
  80622c:	98000d1e 	bne	r19,zero,806264 <___vfprintf_internal_r+0x1e98>
  806230:	d8c14d17 	ldw	r3,1332(sp)
  806234:	1880004c 	andi	r2,r3,1
  806238:	10000a1e 	bne	r2,zero,806264 <___vfprintf_internal_r+0x1e98>
  80623c:	01000044 	movi	r4,1
  806240:	200f883a 	mov	r7,r4
  806244:	d9014615 	stw	r4,1304(sp)
  806248:	003f4a06 	br	805f74 <___vfprintf_internal_r+0x1ba8>
  80624c:	3cc00017 	ldw	r19,0(r7)
  806250:	39c00104 	addi	r7,r7,4
  806254:	983d0e0e 	bge	r19,zero,805690 <___vfprintf_internal_r+0x12c4>
  806258:	b8c00007 	ldb	r3,0(r23)
  80625c:	04ffffc4 	movi	r19,-1
  806260:	0038d906 	br	8045c8 <___vfprintf_internal_r+0x1fc>
  806264:	9cc00084 	addi	r19,r19,2
  806268:	dcc14615 	stw	r19,1304(sp)
  80626c:	980f883a 	mov	r7,r19
  806270:	983f400e 	bge	r19,zero,805f74 <___vfprintf_internal_r+0x1ba8>
  806274:	003f7306 	br	806044 <___vfprintf_internal_r+0x1c78>

00806278 <__vfprintf_internal>:
  806278:	00802074 	movhi	r2,129
  80627c:	109c4f04 	addi	r2,r2,28988
  806280:	2013883a 	mov	r9,r4
  806284:	11000017 	ldw	r4,0(r2)
  806288:	2805883a 	mov	r2,r5
  80628c:	300f883a 	mov	r7,r6
  806290:	480b883a 	mov	r5,r9
  806294:	100d883a 	mov	r6,r2
  806298:	08043cc1 	jmpi	8043cc <___vfprintf_internal_r>

0080629c <__svfscanf_r>:
  80629c:	deff4e04 	addi	sp,sp,-712
  8062a0:	dd80ae15 	stw	r22,696(sp)
  8062a4:	dd00ac15 	stw	r20,688(sp)
  8062a8:	dc40a915 	stw	r17,676(sp)
  8062ac:	dc00a815 	stw	r16,672(sp)
  8062b0:	dfc0b115 	stw	ra,708(sp)
  8062b4:	df00b015 	stw	fp,704(sp)
  8062b8:	ddc0af15 	stw	r23,700(sp)
  8062bc:	dd40ad15 	stw	r21,692(sp)
  8062c0:	dcc0ab15 	stw	r19,684(sp)
  8062c4:	dc80aa15 	stw	r18,680(sp)
  8062c8:	202d883a 	mov	r22,r4
  8062cc:	2821883a 	mov	r16,r5
  8062d0:	d9c0a415 	stw	r7,656(sp)
  8062d4:	3029883a 	mov	r20,r6
  8062d8:	d800a215 	stw	zero,648(sp)
  8062dc:	0023883a 	mov	r17,zero
  8062e0:	d800a115 	stw	zero,644(sp)
  8062e4:	d800a015 	stw	zero,640(sp)
  8062e8:	a1000007 	ldb	r4,0(r20)
  8062ec:	d9000115 	stw	r4,4(sp)
  8062f0:	20001f26 	beq	r4,zero,806370 <__svfscanf_r+0xd4>
  8062f4:	04802074 	movhi	r18,129
  8062f8:	949c5304 	addi	r18,r18,29004
  8062fc:	91800017 	ldw	r6,0(r18)
  806300:	a5000044 	addi	r20,r20,1
  806304:	3107883a 	add	r3,r6,r4
  806308:	18800003 	ldbu	r2,0(r3)
  80630c:	1080020c 	andi	r2,r2,8
  806310:	10002426 	beq	r2,zero,8063a4 <__svfscanf_r+0x108>
  806314:	80c00117 	ldw	r3,4(r16)
  806318:	00c00e0e 	bge	zero,r3,806354 <__svfscanf_r+0xb8>
  80631c:	81400017 	ldw	r5,0(r16)
  806320:	90800017 	ldw	r2,0(r18)
  806324:	28c00003 	ldbu	r3,0(r5)
  806328:	1887883a 	add	r3,r3,r2
  80632c:	19000003 	ldbu	r4,0(r3)
  806330:	2100020c 	andi	r4,r4,8
  806334:	203fec26 	beq	r4,zero,8062e8 <__svfscanf_r+0x4c>
  806338:	80c00117 	ldw	r3,4(r16)
  80633c:	29800044 	addi	r6,r5,1
  806340:	8c400044 	addi	r17,r17,1
  806344:	18ffffc4 	addi	r3,r3,-1
  806348:	81800015 	stw	r6,0(r16)
  80634c:	80c00115 	stw	r3,4(r16)
  806350:	00fff216 	blt	zero,r3,80631c <__svfscanf_r+0x80>
  806354:	b009883a 	mov	r4,r22
  806358:	800b883a 	mov	r5,r16
  80635c:	0803d1c0 	call	803d1c <__srefill_r>
  806360:	103fee26 	beq	r2,zero,80631c <__svfscanf_r+0x80>
  806364:	a1000007 	ldb	r4,0(r20)
  806368:	d9000115 	stw	r4,4(sp)
  80636c:	203fe11e 	bne	r4,zero,8062f4 <__svfscanf_r+0x58>
  806370:	d880a217 	ldw	r2,648(sp)
  806374:	dfc0b117 	ldw	ra,708(sp)
  806378:	df00b017 	ldw	fp,704(sp)
  80637c:	ddc0af17 	ldw	r23,700(sp)
  806380:	dd80ae17 	ldw	r22,696(sp)
  806384:	dd40ad17 	ldw	r21,692(sp)
  806388:	dd00ac17 	ldw	r20,688(sp)
  80638c:	dcc0ab17 	ldw	r19,684(sp)
  806390:	dc80aa17 	ldw	r18,680(sp)
  806394:	dc40a917 	ldw	r17,676(sp)
  806398:	dc00a817 	ldw	r16,672(sp)
  80639c:	dec0b204 	addi	sp,sp,712
  8063a0:	f800283a 	ret
  8063a4:	00800944 	movi	r2,37
  8063a8:	20801626 	beq	r4,r2,806404 <__svfscanf_r+0x168>
  8063ac:	80800117 	ldw	r2,4(r16)
  8063b0:	00800b0e 	bge	zero,r2,8063e0 <__svfscanf_r+0x144>
  8063b4:	81000017 	ldw	r4,0(r16)
  8063b8:	a0ffffc7 	ldb	r3,-1(r20)
  8063bc:	20800003 	ldbu	r2,0(r4)
  8063c0:	10ffeb1e 	bne	r2,r3,806370 <__svfscanf_r+0xd4>
  8063c4:	80c00117 	ldw	r3,4(r16)
  8063c8:	21800044 	addi	r6,r4,1
  8063cc:	8c400044 	addi	r17,r17,1
  8063d0:	18ffffc4 	addi	r3,r3,-1
  8063d4:	80c00115 	stw	r3,4(r16)
  8063d8:	81800015 	stw	r6,0(r16)
  8063dc:	003fc206 	br	8062e8 <__svfscanf_r+0x4c>
  8063e0:	b009883a 	mov	r4,r22
  8063e4:	800b883a 	mov	r5,r16
  8063e8:	0803d1c0 	call	803d1c <__srefill_r>
  8063ec:	103ff126 	beq	r2,zero,8063b4 <__svfscanf_r+0x118>
  8063f0:	d900a217 	ldw	r4,648(sp)
  8063f4:	2004c91e 	bne	r4,zero,80771c <__svfscanf_r+0x1480>
  8063f8:	00bfffc4 	movi	r2,-1
  8063fc:	d880a215 	stw	r2,648(sp)
  806400:	003fdb06 	br	806370 <__svfscanf_r+0xd4>
  806404:	d800a315 	stw	zero,652(sp)
  806408:	0027883a 	mov	r19,zero
  80640c:	a0c00003 	ldbu	r3,0(r20)
  806410:	00801e04 	movi	r2,120
  806414:	a5000044 	addi	r20,r20,1
  806418:	19403fcc 	andi	r5,r3,255
  80641c:	2940201c 	xori	r5,r5,128
  806420:	297fe004 	addi	r5,r5,-128
  806424:	10c08036 	bltu	r2,r3,806628 <__svfscanf_r+0x38c>
  806428:	18c5883a 	add	r2,r3,r3
  80642c:	1085883a 	add	r2,r2,r2
  806430:	00c02034 	movhi	r3,128
  806434:	18d91104 	addi	r3,r3,25668
  806438:	10c5883a 	add	r2,r2,r3
  80643c:	11000017 	ldw	r4,0(r2)
  806440:	2000683a 	jmp	r4
  806444:	008063f8 	rdprs	r2,zero,399
  806448:	00806628 	cmpgeui	r2,zero,408
  80644c:	00806628 	cmpgeui	r2,zero,408
  806450:	00806628 	cmpgeui	r2,zero,408
  806454:	00806628 	cmpgeui	r2,zero,408
  806458:	00806628 	cmpgeui	r2,zero,408
  80645c:	00806628 	cmpgeui	r2,zero,408
  806460:	00806628 	cmpgeui	r2,zero,408
  806464:	00806628 	cmpgeui	r2,zero,408
  806468:	00806628 	cmpgeui	r2,zero,408
  80646c:	00806628 	cmpgeui	r2,zero,408
  806470:	00806628 	cmpgeui	r2,zero,408
  806474:	00806628 	cmpgeui	r2,zero,408
  806478:	00806628 	cmpgeui	r2,zero,408
  80647c:	00806628 	cmpgeui	r2,zero,408
  806480:	00806628 	cmpgeui	r2,zero,408
  806484:	00806628 	cmpgeui	r2,zero,408
  806488:	00806628 	cmpgeui	r2,zero,408
  80648c:	00806628 	cmpgeui	r2,zero,408
  806490:	00806628 	cmpgeui	r2,zero,408
  806494:	00806628 	cmpgeui	r2,zero,408
  806498:	00806628 	cmpgeui	r2,zero,408
  80649c:	00806628 	cmpgeui	r2,zero,408
  8064a0:	00806628 	cmpgeui	r2,zero,408
  8064a4:	00806628 	cmpgeui	r2,zero,408
  8064a8:	00806628 	cmpgeui	r2,zero,408
  8064ac:	00806628 	cmpgeui	r2,zero,408
  8064b0:	00806628 	cmpgeui	r2,zero,408
  8064b4:	00806628 	cmpgeui	r2,zero,408
  8064b8:	00806628 	cmpgeui	r2,zero,408
  8064bc:	00806628 	cmpgeui	r2,zero,408
  8064c0:	00806628 	cmpgeui	r2,zero,408
  8064c4:	00806628 	cmpgeui	r2,zero,408
  8064c8:	00806628 	cmpgeui	r2,zero,408
  8064cc:	00806628 	cmpgeui	r2,zero,408
  8064d0:	00806628 	cmpgeui	r2,zero,408
  8064d4:	00806628 	cmpgeui	r2,zero,408
  8064d8:	008063ac 	andhi	r2,zero,398
  8064dc:	00806628 	cmpgeui	r2,zero,408
  8064e0:	00806628 	cmpgeui	r2,zero,408
  8064e4:	00806628 	cmpgeui	r2,zero,408
  8064e8:	00806628 	cmpgeui	r2,zero,408
  8064ec:	0080764c 	andi	r2,zero,473
  8064f0:	00806628 	cmpgeui	r2,zero,408
  8064f4:	00806628 	cmpgeui	r2,zero,408
  8064f8:	00806628 	cmpgeui	r2,zero,408
  8064fc:	00806628 	cmpgeui	r2,zero,408
  806500:	00806628 	cmpgeui	r2,zero,408
  806504:	00807048 	cmpgei	r2,zero,449
  806508:	00807048 	cmpgei	r2,zero,449
  80650c:	00807048 	cmpgei	r2,zero,449
  806510:	00807048 	cmpgei	r2,zero,449
  806514:	00807048 	cmpgei	r2,zero,449
  806518:	00807048 	cmpgei	r2,zero,449
  80651c:	00807048 	cmpgei	r2,zero,449
  806520:	00807048 	cmpgei	r2,zero,449
  806524:	00807048 	cmpgei	r2,zero,449
  806528:	00807048 	cmpgei	r2,zero,449
  80652c:	00806628 	cmpgeui	r2,zero,408
  806530:	00806628 	cmpgeui	r2,zero,408
  806534:	00806628 	cmpgeui	r2,zero,408
  806538:	00806628 	cmpgeui	r2,zero,408
  80653c:	00806628 	cmpgeui	r2,zero,408
  806540:	00806628 	cmpgeui	r2,zero,408
  806544:	00806628 	cmpgeui	r2,zero,408
  806548:	00806628 	cmpgeui	r2,zero,408
  80654c:	00806628 	cmpgeui	r2,zero,408
  806550:	00806628 	cmpgeui	r2,zero,408
  806554:	008077c8 	cmpgei	r2,zero,479
  806558:	008077c0 	call	8077c <__reset-0x77f884>
  80655c:	00806628 	cmpgeui	r2,zero,408
  806560:	008077c0 	call	8077c <__reset-0x77f884>
  806564:	00806628 	cmpgeui	r2,zero,408
  806568:	00806628 	cmpgeui	r2,zero,408
  80656c:	00806628 	cmpgeui	r2,zero,408
  806570:	00806628 	cmpgeui	r2,zero,408
  806574:	00807858 	cmpnei	r2,zero,481
  806578:	00806628 	cmpgeui	r2,zero,408
  80657c:	00806628 	cmpgeui	r2,zero,408
  806580:	00807810 	cmplti	r2,zero,480
  806584:	00806628 	cmpgeui	r2,zero,408
  806588:	00806628 	cmpgeui	r2,zero,408
  80658c:	00806628 	cmpgeui	r2,zero,408
  806590:	00806628 	cmpgeui	r2,zero,408
  806594:	00806628 	cmpgeui	r2,zero,408
  806598:	00806628 	cmpgeui	r2,zero,408
  80659c:	00806628 	cmpgeui	r2,zero,408
  8065a0:	00806628 	cmpgeui	r2,zero,408
  8065a4:	00807654 	movui	r2,473
  8065a8:	00806628 	cmpgeui	r2,zero,408
  8065ac:	00806628 	cmpgeui	r2,zero,408
  8065b0:	008077f4 	movhi	r2,479
  8065b4:	00806628 	cmpgeui	r2,zero,408
  8065b8:	00806628 	cmpgeui	r2,zero,408
  8065bc:	00806628 	cmpgeui	r2,zero,408
  8065c0:	00806628 	cmpgeui	r2,zero,408
  8065c4:	00806628 	cmpgeui	r2,zero,408
  8065c8:	00806628 	cmpgeui	r2,zero,408
  8065cc:	00806628 	cmpgeui	r2,zero,408
  8065d0:	008077e8 	cmpgeui	r2,zero,479
  8065d4:	008077cc 	andi	r2,zero,479
  8065d8:	008077c0 	call	8077c <__reset-0x77f884>
  8065dc:	008077c0 	call	8077c <__reset-0x77f884>
  8065e0:	008077c0 	call	8077c <__reset-0x77f884>
  8065e4:	008077b8 	rdprs	r2,zero,478
  8065e8:	008078ac 	andhi	r2,zero,482
  8065ec:	00806628 	cmpgeui	r2,zero,408
  8065f0:	00806628 	cmpgeui	r2,zero,408
  8065f4:	00807898 	cmpnei	r2,zero,482
  8065f8:	00806628 	cmpgeui	r2,zero,408
  8065fc:	00807830 	cmpltui	r2,zero,480
  806600:	00807814 	movui	r2,480
  806604:	00807868 	cmpgeui	r2,zero,481
  806608:	00806628 	cmpgeui	r2,zero,408
  80660c:	00806628 	cmpgeui	r2,zero,408
  806610:	00807860 	cmpeqi	r2,zero,481
  806614:	00806628 	cmpgeui	r2,zero,408
  806618:	00806b98 	cmpnei	r2,zero,430
  80661c:	00806628 	cmpgeui	r2,zero,408
  806620:	00806628 	cmpgeui	r2,zero,408
  806624:	00807654 	movui	r2,473
  806628:	2987883a 	add	r3,r5,r6
  80662c:	18800003 	ldbu	r2,0(r3)
  806630:	1080004c 	andi	r2,r2,1
  806634:	1005003a 	cmpeq	r2,r2,zero
  806638:	10002c26 	beq	r2,zero,8066ec <__svfscanf_r+0x450>
  80663c:	01002074 	movhi	r4,129
  806640:	2130a304 	addi	r4,r4,-15732
  806644:	00800284 	movi	r2,10
  806648:	d900a015 	stw	r4,640(sp)
  80664c:	054000c4 	movi	r21,3
  806650:	d880a115 	stw	r2,644(sp)
  806654:	80c00117 	ldw	r3,4(r16)
  806658:	00c14a0e 	bge	zero,r3,806b84 <__svfscanf_r+0x8e8>
  80665c:	9880100c 	andi	r2,r19,64
  806660:	10001326 	beq	r2,zero,8066b0 <__svfscanf_r+0x414>
  806664:	00800104 	movi	r2,4
  806668:	157f1f36 	bltu	r2,r21,8062e8 <__svfscanf_r+0x4c>
  80666c:	ad45883a 	add	r2,r21,r21
  806670:	1085883a 	add	r2,r2,r2
  806674:	00c02034 	movhi	r3,128
  806678:	18d9a204 	addi	r3,r3,26248
  80667c:	10c5883a 	add	r2,r2,r3
  806680:	11000017 	ldw	r4,0(r2)
  806684:	2000683a 	jmp	r4
  806688:	008066f4 	movhi	r2,411
  80668c:	00806800 	call	80680 <__reset-0x77f980>
  806690:	00806874 	movhi	r2,417
  806694:	00806b60 	cmpeqi	r2,zero,429
  806698:	008069ac 	andhi	r2,zero,422
  80669c:	b009883a 	mov	r4,r22
  8066a0:	800b883a 	mov	r5,r16
  8066a4:	0803d1c0 	call	803d1c <__srefill_r>
  8066a8:	103f511e 	bne	r2,zero,8063f0 <__svfscanf_r+0x154>
  8066ac:	8c400044 	addi	r17,r17,1
  8066b0:	81400017 	ldw	r5,0(r16)
  8066b4:	90800017 	ldw	r2,0(r18)
  8066b8:	28c00003 	ldbu	r3,0(r5)
  8066bc:	1887883a 	add	r3,r3,r2
  8066c0:	19000003 	ldbu	r4,0(r3)
  8066c4:	2100020c 	andi	r4,r4,8
  8066c8:	203fe626 	beq	r4,zero,806664 <__svfscanf_r+0x3c8>
  8066cc:	80c00117 	ldw	r3,4(r16)
  8066d0:	18ffffc4 	addi	r3,r3,-1
  8066d4:	80c00115 	stw	r3,4(r16)
  8066d8:	00fff00e 	bge	zero,r3,80669c <__svfscanf_r+0x400>
  8066dc:	29800044 	addi	r6,r5,1
  8066e0:	8c400044 	addi	r17,r17,1
  8066e4:	81800015 	stw	r6,0(r16)
  8066e8:	003ff106 	br	8066b0 <__svfscanf_r+0x414>
  8066ec:	9cc00054 	ori	r19,r19,1
  8066f0:	003fd206 	br	80663c <__svfscanf_r+0x3a0>
  8066f4:	d8c0a317 	ldw	r3,652(sp)
  8066f8:	1800021e 	bne	r3,zero,806704 <__svfscanf_r+0x468>
  8066fc:	01000044 	movi	r4,1
  806700:	d900a315 	stw	r4,652(sp)
  806704:	9880004c 	andi	r2,r19,1
  806708:	1005003a 	cmpeq	r2,r2,zero
  80670c:	1003d91e 	bne	r2,zero,807674 <__svfscanf_r+0x13d8>
  806710:	9d40040c 	andi	r21,r19,16
  806714:	a839003a 	cmpeq	fp,r21,zero
  806718:	e0042526 	beq	fp,zero,8077b0 <__svfscanf_r+0x1514>
  80671c:	d880a417 	ldw	r2,656(sp)
  806720:	14c00017 	ldw	r19,0(r2)
  806724:	10800104 	addi	r2,r2,4
  806728:	d880a415 	stw	r2,656(sp)
  80672c:	d8c0a317 	ldw	r3,652(sp)
  806730:	18041a26 	beq	r3,zero,80779c <__svfscanf_r+0x1500>
  806734:	01002074 	movhi	r4,129
  806738:	211c5404 	addi	r4,r4,29008
  80673c:	20800017 	ldw	r2,0(r4)
  806740:	103f2b26 	beq	r2,zero,8063f0 <__svfscanf_r+0x154>
  806744:	d8804404 	addi	r2,sp,272
  806748:	0025883a 	mov	r18,zero
  80674c:	d880a615 	stw	r2,664(sp)
  806750:	05ffffc4 	movi	r23,-1
  806754:	80800017 	ldw	r2,0(r16)
  806758:	80c00117 	ldw	r3,4(r16)
  80675c:	d900a617 	ldw	r4,664(sp)
  806760:	12000003 	ldbu	r8,0(r2)
  806764:	18ffffc4 	addi	r3,r3,-1
  806768:	11800044 	addi	r6,r2,1
  80676c:	248f883a 	add	r7,r4,r18
  806770:	80c00115 	stw	r3,4(r16)
  806774:	81800015 	stw	r6,0(r16)
  806778:	3a000005 	stb	r8,0(r7)
  80677c:	d9000204 	addi	r4,sp,8
  806780:	000b883a 	mov	r5,zero
  806784:	01800204 	movi	r6,8
  806788:	08034ec0 	call	8034ec <memset>
  80678c:	d980a617 	ldw	r6,664(sp)
  806790:	94800044 	addi	r18,r18,1
  806794:	d8800204 	addi	r2,sp,8
  806798:	b009883a 	mov	r4,r22
  80679c:	980b883a 	mov	r5,r19
  8067a0:	900f883a 	mov	r7,r18
  8067a4:	d8800015 	stw	r2,0(sp)
  8067a8:	08098c00 	call	8098c0 <_mbrtowc_r>
  8067ac:	1007883a 	mov	r3,r2
  8067b0:	15ff0f26 	beq	r2,r23,8063f0 <__svfscanf_r+0x154>
  8067b4:	1003f11e 	bne	r2,zero,80777c <__svfscanf_r+0x14e0>
  8067b8:	a800011e 	bne	r21,zero,8067c0 <__svfscanf_r+0x524>
  8067bc:	98000015 	stw	zero,0(r19)
  8067c0:	d8c0a317 	ldw	r3,652(sp)
  8067c4:	8ca3883a 	add	r17,r17,r18
  8067c8:	18ffffc4 	addi	r3,r3,-1
  8067cc:	d8c0a315 	stw	r3,652(sp)
  8067d0:	e0000126 	beq	fp,zero,8067d8 <__svfscanf_r+0x53c>
  8067d4:	9cc00104 	addi	r19,r19,4
  8067d8:	0025883a 	mov	r18,zero
  8067dc:	80c00117 	ldw	r3,4(r16)
  8067e0:	00c3e90e 	bge	zero,r3,807788 <__svfscanf_r+0x14ec>
  8067e4:	d900a317 	ldw	r4,652(sp)
  8067e8:	2003ec26 	beq	r4,zero,80779c <__svfscanf_r+0x1500>
  8067ec:	00c02074 	movhi	r3,129
  8067f0:	18dc5404 	addi	r3,r3,29008
  8067f4:	18800017 	ldw	r2,0(r3)
  8067f8:	90bfd61e 	bne	r18,r2,806754 <__svfscanf_r+0x4b8>
  8067fc:	003efc06 	br	8063f0 <__svfscanf_r+0x154>
  806800:	d880a317 	ldw	r2,652(sp)
  806804:	1000021e 	bne	r2,zero,806810 <__svfscanf_r+0x574>
  806808:	00ffffc4 	movi	r3,-1
  80680c:	d8c0a315 	stw	r3,652(sp)
  806810:	9880040c 	andi	r2,r19,16
  806814:	10036526 	beq	r2,zero,8075ac <__svfscanf_r+0x1310>
  806818:	0027883a 	mov	r19,zero
  80681c:	dd400404 	addi	r21,sp,16
  806820:	81000017 	ldw	r4,0(r16)
  806824:	20800003 	ldbu	r2,0(r4)
  806828:	a885883a 	add	r2,r21,r2
  80682c:	10c00007 	ldb	r3,0(r2)
  806830:	1803be26 	beq	r3,zero,80772c <__svfscanf_r+0x1490>
  806834:	80c00117 	ldw	r3,4(r16)
  806838:	21800044 	addi	r6,r4,1
  80683c:	d900a317 	ldw	r4,652(sp)
  806840:	18ffffc4 	addi	r3,r3,-1
  806844:	9cc00044 	addi	r19,r19,1
  806848:	81800015 	stw	r6,0(r16)
  80684c:	80c00115 	stw	r3,4(r16)
  806850:	24c3b626 	beq	r4,r19,80772c <__svfscanf_r+0x1490>
  806854:	00fff216 	blt	zero,r3,806820 <__svfscanf_r+0x584>
  806858:	b009883a 	mov	r4,r22
  80685c:	800b883a 	mov	r5,r16
  806860:	0803d1c0 	call	803d1c <__srefill_r>
  806864:	103fee26 	beq	r2,zero,806820 <__svfscanf_r+0x584>
  806868:	983ee126 	beq	r19,zero,8063f0 <__svfscanf_r+0x154>
  80686c:	8ce3883a 	add	r17,r17,r19
  806870:	003e9d06 	br	8062e8 <__svfscanf_r+0x4c>
  806874:	d900a317 	ldw	r4,652(sp)
  806878:	2000021e 	bne	r4,zero,806884 <__svfscanf_r+0x5e8>
  80687c:	00bfffc4 	movi	r2,-1
  806880:	d880a315 	stw	r2,652(sp)
  806884:	9880004c 	andi	r2,r19,1
  806888:	1005003a 	cmpeq	r2,r2,zero
  80688c:	1001f41e 	bne	r2,zero,807060 <__svfscanf_r+0xdc4>
  806890:	9dc0040c 	andi	r23,r19,16
  806894:	b807003a 	cmpeq	r3,r23,zero
  806898:	d8c0a515 	stw	r3,660(sp)
  80689c:	1803b21e 	bne	r3,zero,807768 <__svfscanf_r+0x14cc>
  8068a0:	dd400104 	addi	r21,sp,4
  8068a4:	0027883a 	mov	r19,zero
  8068a8:	073fffc4 	movi	fp,-1
  8068ac:	81400017 	ldw	r5,0(r16)
  8068b0:	90800017 	ldw	r2,0(r18)
  8068b4:	29c00003 	ldbu	r7,0(r5)
  8068b8:	38c03fcc 	andi	r3,r7,255
  8068bc:	1887883a 	add	r3,r3,r2
  8068c0:	19000003 	ldbu	r4,0(r3)
  8068c4:	2100020c 	andi	r4,r4,8
  8068c8:	2000321e 	bne	r4,zero,806994 <__svfscanf_r+0x6f8>
  8068cc:	d8c0a317 	ldw	r3,652(sp)
  8068d0:	18003026 	beq	r3,zero,806994 <__svfscanf_r+0x6f8>
  8068d4:	00802074 	movhi	r2,129
  8068d8:	109c5404 	addi	r2,r2,29008
  8068dc:	10c00017 	ldw	r3,0(r2)
  8068e0:	98fec326 	beq	r19,r3,8063f0 <__svfscanf_r+0x154>
  8068e4:	d8c04404 	addi	r3,sp,272
  8068e8:	80800117 	ldw	r2,4(r16)
  8068ec:	d8c0a615 	stw	r3,664(sp)
  8068f0:	d900a617 	ldw	r4,664(sp)
  8068f4:	10ffffc4 	addi	r3,r2,-1
  8068f8:	29800044 	addi	r6,r5,1
  8068fc:	80c00115 	stw	r3,4(r16)
  806900:	24c5883a 	add	r2,r4,r19
  806904:	81800015 	stw	r6,0(r16)
  806908:	d9000204 	addi	r4,sp,8
  80690c:	000b883a 	mov	r5,zero
  806910:	01800204 	movi	r6,8
  806914:	11c00005 	stb	r7,0(r2)
  806918:	08034ec0 	call	8034ec <memset>
  80691c:	d980a617 	ldw	r6,664(sp)
  806920:	9cc00044 	addi	r19,r19,1
  806924:	d8800204 	addi	r2,sp,8
  806928:	b009883a 	mov	r4,r22
  80692c:	a80b883a 	mov	r5,r21
  806930:	980f883a 	mov	r7,r19
  806934:	d8800015 	stw	r2,0(sp)
  806938:	08098c00 	call	8098c0 <_mbrtowc_r>
  80693c:	1007883a 	mov	r3,r2
  806940:	173eab26 	beq	r2,fp,8063f0 <__svfscanf_r+0x154>
  806944:	1003851e 	bne	r2,zero,80775c <__svfscanf_r+0x14c0>
  806948:	a8000015 	stw	zero,0(r21)
  80694c:	a9000017 	ldw	r4,0(r21)
  806950:	08097580 	call	809758 <iswspace>
  806954:	1003781e 	bne	r2,zero,807738 <__svfscanf_r+0x149c>
  806958:	d900a317 	ldw	r4,652(sp)
  80695c:	d880a517 	ldw	r2,660(sp)
  806960:	8ce3883a 	add	r17,r17,r19
  806964:	213fffc4 	addi	r4,r4,-1
  806968:	d900a315 	stw	r4,652(sp)
  80696c:	10000126 	beq	r2,zero,806974 <__svfscanf_r+0x6d8>
  806970:	ad400104 	addi	r21,r21,4
  806974:	0027883a 	mov	r19,zero
  806978:	80c00117 	ldw	r3,4(r16)
  80697c:	00ffcb16 	blt	zero,r3,8068ac <__svfscanf_r+0x610>
  806980:	b009883a 	mov	r4,r22
  806984:	800b883a 	mov	r5,r16
  806988:	0803d1c0 	call	803d1c <__srefill_r>
  80698c:	103fc726 	beq	r2,zero,8068ac <__svfscanf_r+0x610>
  806990:	983e971e 	bne	r19,zero,8063f0 <__svfscanf_r+0x154>
  806994:	b83e541e 	bne	r23,zero,8062e8 <__svfscanf_r+0x4c>
  806998:	d900a217 	ldw	r4,648(sp)
  80699c:	a8000015 	stw	zero,0(r21)
  8069a0:	21000044 	addi	r4,r4,1
  8069a4:	d900a215 	stw	r4,648(sp)
  8069a8:	003e4f06 	br	8062e8 <__svfscanf_r+0x4c>
  8069ac:	d900a317 	ldw	r4,652(sp)
  8069b0:	00805704 	movi	r2,348
  8069b4:	20ffffc4 	addi	r3,r4,-1
  8069b8:	10c1ed2e 	bgeu	r2,r3,807170 <__svfscanf_r+0xed4>
  8069bc:	00805744 	movi	r2,349
  8069c0:	21bfa8c4 	addi	r6,r4,-349
  8069c4:	9d41e014 	ori	r21,r19,1920
  8069c8:	d880a315 	stw	r2,652(sp)
  8069cc:	d8c04404 	addi	r3,sp,272
  8069d0:	d8c0a615 	stw	r3,664(sp)
  8069d4:	182f883a 	mov	r23,r3
  8069d8:	d8009f15 	stw	zero,636(sp)
  8069dc:	d8009e15 	stw	zero,632(sp)
  8069e0:	d8009d15 	stw	zero,628(sp)
  8069e4:	d8009c15 	stw	zero,624(sp)
  8069e8:	0039883a 	mov	fp,zero
  8069ec:	0025883a 	mov	r18,zero
  8069f0:	80800017 	ldw	r2,0(r16)
  8069f4:	11400003 	ldbu	r5,0(r2)
  8069f8:	00801384 	movi	r2,78
  8069fc:	28fff544 	addi	r3,r5,-43
  806a00:	18c03fcc 	andi	r3,r3,255
  806a04:	10c07d36 	bltu	r2,r3,806bfc <__svfscanf_r+0x960>
  806a08:	18c5883a 	add	r2,r3,r3
  806a0c:	1085883a 	add	r2,r2,r2
  806a10:	00c02034 	movhi	r3,128
  806a14:	18da8904 	addi	r3,r3,27172
  806a18:	10c5883a 	add	r2,r2,r3
  806a1c:	11000017 	ldw	r4,0(r2)
  806a20:	2000683a 	jmp	r4
  806a24:	00806bb4 	movhi	r2,430
  806a28:	00806bfc 	xorhi	r2,zero,431
  806a2c:	00806bb4 	movhi	r2,430
  806a30:	00806d48 	cmpgei	r2,zero,437
  806a34:	00806bfc 	xorhi	r2,zero,431
  806a38:	00806d80 	call	806d8 <__reset-0x77f928>
  806a3c:	00806db4 	movhi	r2,438
  806a40:	00806db4 	movhi	r2,438
  806a44:	00806db4 	movhi	r2,438
  806a48:	00806db4 	movhi	r2,438
  806a4c:	00806db4 	movhi	r2,438
  806a50:	00806db4 	movhi	r2,438
  806a54:	00806db4 	movhi	r2,438
  806a58:	00806db4 	movhi	r2,438
  806a5c:	00806db4 	movhi	r2,438
  806a60:	00806bfc 	xorhi	r2,zero,431
  806a64:	00806bfc 	xorhi	r2,zero,431
  806a68:	00806bfc 	xorhi	r2,zero,431
  806a6c:	00806bfc 	xorhi	r2,zero,431
  806a70:	00806bfc 	xorhi	r2,zero,431
  806a74:	00806bfc 	xorhi	r2,zero,431
  806a78:	00806bfc 	xorhi	r2,zero,431
  806a7c:	00806dd4 	movui	r2,439
  806a80:	00806bfc 	xorhi	r2,zero,431
  806a84:	00806bfc 	xorhi	r2,zero,431
  806a88:	00806bfc 	xorhi	r2,zero,431
  806a8c:	00806de4 	muli	r2,zero,439
  806a90:	00806e80 	call	806e8 <__reset-0x77f918>
  806a94:	00806bfc 	xorhi	r2,zero,431
  806a98:	00806bfc 	xorhi	r2,zero,431
  806a9c:	00806e9c 	xori	r2,zero,442
  806aa0:	00806bfc 	xorhi	r2,zero,431
  806aa4:	00806bfc 	xorhi	r2,zero,431
  806aa8:	00806bfc 	xorhi	r2,zero,431
  806aac:	00806bfc 	xorhi	r2,zero,431
  806ab0:	00806ec8 	cmpgei	r2,zero,443
  806ab4:	00806bfc 	xorhi	r2,zero,431
  806ab8:	00806bfc 	xorhi	r2,zero,431
  806abc:	00806bfc 	xorhi	r2,zero,431
  806ac0:	00806bfc 	xorhi	r2,zero,431
  806ac4:	00806bfc 	xorhi	r2,zero,431
  806ac8:	00806f1c 	xori	r2,zero,444
  806acc:	00806bfc 	xorhi	r2,zero,431
  806ad0:	00806bfc 	xorhi	r2,zero,431
  806ad4:	00806bfc 	xorhi	r2,zero,431
  806ad8:	00806bfc 	xorhi	r2,zero,431
  806adc:	0080702c 	andhi	r2,zero,448
  806ae0:	00806bfc 	xorhi	r2,zero,431
  806ae4:	00806bfc 	xorhi	r2,zero,431
  806ae8:	00806bfc 	xorhi	r2,zero,431
  806aec:	00806bfc 	xorhi	r2,zero,431
  806af0:	00806bfc 	xorhi	r2,zero,431
  806af4:	00806bfc 	xorhi	r2,zero,431
  806af8:	00806bfc 	xorhi	r2,zero,431
  806afc:	00806dd4 	movui	r2,439
  806b00:	00806bfc 	xorhi	r2,zero,431
  806b04:	00806bfc 	xorhi	r2,zero,431
  806b08:	00806bfc 	xorhi	r2,zero,431
  806b0c:	00806de4 	muli	r2,zero,439
  806b10:	00806e80 	call	806e8 <__reset-0x77f918>
  806b14:	00806bfc 	xorhi	r2,zero,431
  806b18:	00806bfc 	xorhi	r2,zero,431
  806b1c:	00806e9c 	xori	r2,zero,442
  806b20:	00806bfc 	xorhi	r2,zero,431
  806b24:	00806bfc 	xorhi	r2,zero,431
  806b28:	00806bfc 	xorhi	r2,zero,431
  806b2c:	00806bfc 	xorhi	r2,zero,431
  806b30:	00806ec8 	cmpgei	r2,zero,443
  806b34:	00806bfc 	xorhi	r2,zero,431
  806b38:	00806bfc 	xorhi	r2,zero,431
  806b3c:	00806bfc 	xorhi	r2,zero,431
  806b40:	00806bfc 	xorhi	r2,zero,431
  806b44:	00806bfc 	xorhi	r2,zero,431
  806b48:	00806f1c 	xori	r2,zero,444
  806b4c:	00806bfc 	xorhi	r2,zero,431
  806b50:	00806bfc 	xorhi	r2,zero,431
  806b54:	00806bfc 	xorhi	r2,zero,431
  806b58:	00806bfc 	xorhi	r2,zero,431
  806b5c:	0080702c 	andhi	r2,zero,448
  806b60:	d900a317 	ldw	r4,652(sp)
  806b64:	00805704 	movi	r2,348
  806b68:	20ffffc4 	addi	r3,r4,-1
  806b6c:	10c18c2e 	bgeu	r2,r3,8071a0 <__svfscanf_r+0xf04>
  806b70:	00805744 	movi	r2,349
  806b74:	257fa8c4 	addi	r21,r4,-349
  806b78:	9c836014 	ori	r18,r19,3456
  806b7c:	d880a315 	stw	r2,652(sp)
  806b80:	0001a106 	br	807208 <__svfscanf_r+0xf6c>
  806b84:	b009883a 	mov	r4,r22
  806b88:	800b883a 	mov	r5,r16
  806b8c:	0803d1c0 	call	803d1c <__srefill_r>
  806b90:	103eb226 	beq	r2,zero,80665c <__svfscanf_r+0x3c0>
  806b94:	003e1606 	br	8063f0 <__svfscanf_r+0x154>
  806b98:	01000284 	movi	r4,10
  806b9c:	00802074 	movhi	r2,129
  806ba0:	10b20304 	addi	r2,r2,-14324
  806ba4:	054000c4 	movi	r21,3
  806ba8:	d900a115 	stw	r4,644(sp)
  806bac:	d880a015 	stw	r2,640(sp)
  806bb0:	003ea806 	br	806654 <__svfscanf_r+0x3b8>
  806bb4:	a880200c 	andi	r2,r21,128
  806bb8:	10001026 	beq	r2,zero,806bfc <__svfscanf_r+0x960>
  806bbc:	00bfdfc4 	movi	r2,-129
  806bc0:	a8aa703a 	and	r21,r21,r2
  806bc4:	b9400005 	stb	r5,0(r23)
  806bc8:	bdc00044 	addi	r23,r23,1
  806bcc:	80c00117 	ldw	r3,4(r16)
  806bd0:	8c400044 	addi	r17,r17,1
  806bd4:	18bfffc4 	addi	r2,r3,-1
  806bd8:	80800115 	stw	r2,4(r16)
  806bdc:	0080610e 	bge	zero,r2,806d64 <__svfscanf_r+0xac8>
  806be0:	80800017 	ldw	r2,0(r16)
  806be4:	10800044 	addi	r2,r2,1
  806be8:	80800015 	stw	r2,0(r16)
  806bec:	d880a317 	ldw	r2,652(sp)
  806bf0:	10bfffc4 	addi	r2,r2,-1
  806bf4:	d880a315 	stw	r2,652(sp)
  806bf8:	103f7d1e 	bne	r2,zero,8069f0 <__svfscanf_r+0x754>
  806bfc:	d8c09e17 	ldw	r3,632(sp)
  806c00:	18000226 	beq	r3,zero,806c0c <__svfscanf_r+0x970>
  806c04:	00bfbfc4 	movi	r2,-257
  806c08:	a8aa703a 	and	r21,r21,r2
  806c0c:	90ffffc4 	addi	r3,r18,-1
  806c10:	00800044 	movi	r2,1
  806c14:	10c0cd2e 	bgeu	r2,r3,806f4c <__svfscanf_r+0xcb0>
  806c18:	e1003fcc 	andi	r4,fp,255
  806c1c:	2100201c 	xori	r4,r4,128
  806c20:	213fe004 	addi	r4,r4,-128
  806c24:	20ffffc4 	addi	r3,r4,-1
  806c28:	00800184 	movi	r2,6
  806c2c:	10c01736 	bltu	r2,r3,806c8c <__svfscanf_r+0x9f0>
  806c30:	00c00084 	movi	r3,2
  806c34:	1900880e 	bge	r3,r4,806e58 <__svfscanf_r+0xbbc>
  806c38:	008000c4 	movi	r2,3
  806c3c:	1100130e 	bge	r2,r4,806c8c <__svfscanf_r+0x9f0>
  806c40:	e4ffffc4 	addi	r19,fp,-1
  806c44:	b825883a 	mov	r18,r23
  806c48:	94bfffc4 	addi	r18,r18,-1
  806c4c:	91400007 	ldb	r5,0(r18)
  806c50:	b009883a 	mov	r4,r22
  806c54:	800d883a 	mov	r6,r16
  806c58:	080ce2c0 	call	80ce2c <_ungetc_r>
  806c5c:	9cffffc4 	addi	r19,r19,-1
  806c60:	98c03fcc 	andi	r3,r19,255
  806c64:	18c0201c 	xori	r3,r3,128
  806c68:	18ffe004 	addi	r3,r3,-128
  806c6c:	00800084 	movi	r2,2
  806c70:	18bff51e 	bne	r3,r2,806c48 <__svfscanf_r+0x9ac>
  806c74:	e0bfff04 	addi	r2,fp,-4
  806c78:	10803fcc 	andi	r2,r2,255
  806c7c:	b887c83a 	sub	r3,r23,r2
  806c80:	8885c83a 	sub	r2,r17,r2
  806c84:	147fffc4 	addi	r17,r2,-1
  806c88:	1dffffc4 	addi	r23,r3,-1
  806c8c:	a880400c 	andi	r2,r21,256
  806c90:	10001226 	beq	r2,zero,806cdc <__svfscanf_r+0xa40>
  806c94:	a881000c 	andi	r2,r21,1024
  806c98:	1000651e 	bne	r2,zero,806e30 <__svfscanf_r+0xb94>
  806c9c:	bdffffc4 	addi	r23,r23,-1
  806ca0:	b9400007 	ldb	r5,0(r23)
  806ca4:	00801944 	movi	r2,101
  806ca8:	8c7fffc4 	addi	r17,r17,-1
  806cac:	28800826 	beq	r5,r2,806cd0 <__svfscanf_r+0xa34>
  806cb0:	00801144 	movi	r2,69
  806cb4:	28800626 	beq	r5,r2,806cd0 <__svfscanf_r+0xa34>
  806cb8:	bdffffc4 	addi	r23,r23,-1
  806cbc:	b009883a 	mov	r4,r22
  806cc0:	800d883a 	mov	r6,r16
  806cc4:	080ce2c0 	call	80ce2c <_ungetc_r>
  806cc8:	b9400007 	ldb	r5,0(r23)
  806ccc:	8c7fffc4 	addi	r17,r17,-1
  806cd0:	b009883a 	mov	r4,r22
  806cd4:	800d883a 	mov	r6,r16
  806cd8:	080ce2c0 	call	80ce2c <_ungetc_r>
  806cdc:	a880040c 	andi	r2,r21,16
  806ce0:	103d811e 	bne	r2,zero,8062e8 <__svfscanf_r+0x4c>
  806ce4:	a8c1800c 	andi	r3,r21,1536
  806ce8:	00810004 	movi	r2,1024
  806cec:	b8000005 	stb	zero,0(r23)
  806cf0:	1880bb26 	beq	r3,r2,806fe0 <__svfscanf_r+0xd44>
  806cf4:	d8809d17 	ldw	r2,628(sp)
  806cf8:	1000a61e 	bne	r2,zero,806f94 <__svfscanf_r+0xcf8>
  806cfc:	d940a617 	ldw	r5,664(sp)
  806d00:	b009883a 	mov	r4,r22
  806d04:	000d883a 	mov	r6,zero
  806d08:	080ac680 	call	80ac68 <_strtod_r>
  806d0c:	a900004c 	andi	r4,r21,1
  806d10:	2009003a 	cmpeq	r4,r4,zero
  806d14:	1025883a 	mov	r18,r2
  806d18:	1827883a 	mov	r19,r3
  806d1c:	2000951e 	bne	r4,zero,806f74 <__svfscanf_r+0xcd8>
  806d20:	d8c0a417 	ldw	r3,656(sp)
  806d24:	18800017 	ldw	r2,0(r3)
  806d28:	1d400104 	addi	r21,r3,4
  806d2c:	14c00115 	stw	r19,4(r2)
  806d30:	14800015 	stw	r18,0(r2)
  806d34:	d8c0a217 	ldw	r3,648(sp)
  806d38:	dd40a415 	stw	r21,656(sp)
  806d3c:	18c00044 	addi	r3,r3,1
  806d40:	d8c0a215 	stw	r3,648(sp)
  806d44:	003d6806 	br	8062e8 <__svfscanf_r+0x4c>
  806d48:	a880800c 	andi	r2,r21,512
  806d4c:	103fab26 	beq	r2,zero,806bfc <__svfscanf_r+0x960>
  806d50:	d9009e17 	ldw	r4,632(sp)
  806d54:	00bf5fc4 	movi	r2,-641
  806d58:	a8aa703a 	and	r21,r21,r2
  806d5c:	d9009f15 	stw	r4,636(sp)
  806d60:	003f9806 	br	806bc4 <__svfscanf_r+0x928>
  806d64:	b009883a 	mov	r4,r22
  806d68:	800b883a 	mov	r5,r16
  806d6c:	d980a715 	stw	r6,668(sp)
  806d70:	0803d1c0 	call	803d1c <__srefill_r>
  806d74:	d980a717 	ldw	r6,668(sp)
  806d78:	103f9c26 	beq	r2,zero,806bec <__svfscanf_r+0x950>
  806d7c:	003f9f06 	br	806bfc <__svfscanf_r+0x960>
  806d80:	a880400c 	andi	r2,r21,256
  806d84:	10000b26 	beq	r2,zero,806db4 <__svfscanf_r+0xb18>
  806d88:	00bfdfc4 	movi	r2,-129
  806d8c:	a8aa703a 	and	r21,r21,r2
  806d90:	d8809e17 	ldw	r2,632(sp)
  806d94:	10800044 	addi	r2,r2,1
  806d98:	d8809e15 	stw	r2,632(sp)
  806d9c:	303f8b26 	beq	r6,zero,806bcc <__svfscanf_r+0x930>
  806da0:	d8c0a317 	ldw	r3,652(sp)
  806da4:	31bfffc4 	addi	r6,r6,-1
  806da8:	18c00044 	addi	r3,r3,1
  806dac:	d8c0a315 	stw	r3,652(sp)
  806db0:	003f8606 	br	806bcc <__svfscanf_r+0x930>
  806db4:	e0803fcc 	andi	r2,fp,255
  806db8:	1080201c 	xori	r2,r2,128
  806dbc:	10bfe004 	addi	r2,r2,-128
  806dc0:	9085883a 	add	r2,r18,r2
  806dc4:	103f8d1e 	bne	r2,zero,806bfc <__svfscanf_r+0x960>
  806dc8:	00bf9fc4 	movi	r2,-385
  806dcc:	a8aa703a 	and	r21,r21,r2
  806dd0:	003f7c06 	br	806bc4 <__svfscanf_r+0x928>
  806dd4:	00800044 	movi	r2,1
  806dd8:	90bf881e 	bne	r18,r2,806bfc <__svfscanf_r+0x960>
  806ddc:	04800084 	movi	r18,2
  806de0:	003f7806 	br	806bc4 <__svfscanf_r+0x928>
  806de4:	a8c1400c 	andi	r3,r21,1280
  806de8:	00810004 	movi	r2,1024
  806dec:	18800426 	beq	r3,r2,806e00 <__svfscanf_r+0xb64>
  806df0:	a884703a 	and	r2,r21,r2
  806df4:	103f8126 	beq	r2,zero,806bfc <__svfscanf_r+0x960>
  806df8:	d8809e17 	ldw	r2,632(sp)
  806dfc:	103f8326 	beq	r2,zero,806c0c <__svfscanf_r+0x970>
  806e00:	a880800c 	andi	r2,r21,512
  806e04:	1000051e 	bne	r2,zero,806e1c <__svfscanf_r+0xb80>
  806e08:	d8c09e17 	ldw	r3,632(sp)
  806e0c:	d9009f17 	ldw	r4,636(sp)
  806e10:	ddc09c15 	stw	r23,624(sp)
  806e14:	1907c83a 	sub	r3,r3,r4
  806e18:	d8c09d15 	stw	r3,628(sp)
  806e1c:	00be7fc4 	movi	r2,-1537
  806e20:	a884703a 	and	r2,r21,r2
  806e24:	15406014 	ori	r21,r2,384
  806e28:	d8009e15 	stw	zero,632(sp)
  806e2c:	003f6506 	br	806bc4 <__svfscanf_r+0x928>
  806e30:	d900a617 	ldw	r4,664(sp)
  806e34:	25fd4e2e 	bgeu	r4,r23,806370 <__svfscanf_r+0xd4>
  806e38:	bdffffc4 	addi	r23,r23,-1
  806e3c:	b9400007 	ldb	r5,0(r23)
  806e40:	b009883a 	mov	r4,r22
  806e44:	800d883a 	mov	r6,r16
  806e48:	080ce2c0 	call	80ce2c <_ungetc_r>
  806e4c:	d880a617 	ldw	r2,664(sp)
  806e50:	15fff936 	bltu	r2,r23,806e38 <__svfscanf_r+0xb9c>
  806e54:	003d4606 	br	806370 <__svfscanf_r+0xd4>
  806e58:	d900a617 	ldw	r4,664(sp)
  806e5c:	25fd442e 	bgeu	r4,r23,806370 <__svfscanf_r+0xd4>
  806e60:	bdffffc4 	addi	r23,r23,-1
  806e64:	b9400007 	ldb	r5,0(r23)
  806e68:	b009883a 	mov	r4,r22
  806e6c:	800d883a 	mov	r6,r16
  806e70:	080ce2c0 	call	80ce2c <_ungetc_r>
  806e74:	d8c0a617 	ldw	r3,664(sp)
  806e78:	1dfff936 	bltu	r3,r23,806e60 <__svfscanf_r+0xbc4>
  806e7c:	003d3c06 	br	806370 <__svfscanf_r+0xd4>
  806e80:	e0c03fcc 	andi	r3,fp,255
  806e84:	18c0201c 	xori	r3,r3,128
  806e88:	18ffe004 	addi	r3,r3,-128
  806e8c:	00800084 	movi	r2,2
  806e90:	18bf5a1e 	bne	r3,r2,806bfc <__svfscanf_r+0x960>
  806e94:	070000c4 	movi	fp,3
  806e98:	003f4a06 	br	806bc4 <__svfscanf_r+0x928>
  806e9c:	e0c03fcc 	andi	r3,fp,255
  806ea0:	18c0201c 	xori	r3,r3,128
  806ea4:	18ffe004 	addi	r3,r3,-128
  806ea8:	1800231e 	bne	r3,zero,806f38 <__svfscanf_r+0xc9c>
  806eac:	a8c1c00c 	andi	r3,r21,1792
  806eb0:	0081c004 	movi	r2,1792
  806eb4:	18bf511e 	bne	r3,r2,806bfc <__svfscanf_r+0x960>
  806eb8:	00be1fc4 	movi	r2,-1921
  806ebc:	a8aa703a 	and	r21,r21,r2
  806ec0:	07000044 	movi	fp,1
  806ec4:	003f3f06 	br	806bc4 <__svfscanf_r+0x928>
  806ec8:	9000101e 	bne	r18,zero,806f0c <__svfscanf_r+0xc70>
  806ecc:	a8c1c00c 	andi	r3,r21,1792
  806ed0:	0081c004 	movi	r2,1792
  806ed4:	18800926 	beq	r3,r2,806efc <__svfscanf_r+0xc60>
  806ed8:	e0c03fcc 	andi	r3,fp,255
  806edc:	18c0201c 	xori	r3,r3,128
  806ee0:	18ffe004 	addi	r3,r3,-128
  806ee4:	00800044 	movi	r2,1
  806ee8:	18800226 	beq	r3,r2,806ef4 <__svfscanf_r+0xc58>
  806eec:	00800104 	movi	r2,4
  806ef0:	18bf421e 	bne	r3,r2,806bfc <__svfscanf_r+0x960>
  806ef4:	e7000044 	addi	fp,fp,1
  806ef8:	003f3206 	br	806bc4 <__svfscanf_r+0x928>
  806efc:	00be1fc4 	movi	r2,-1921
  806f00:	a8aa703a 	and	r21,r21,r2
  806f04:	04800044 	movi	r18,1
  806f08:	003f2e06 	br	806bc4 <__svfscanf_r+0x928>
  806f0c:	00800084 	movi	r2,2
  806f10:	90bff11e 	bne	r18,r2,806ed8 <__svfscanf_r+0xc3c>
  806f14:	048000c4 	movi	r18,3
  806f18:	003f2a06 	br	806bc4 <__svfscanf_r+0x928>
  806f1c:	e0c03fcc 	andi	r3,fp,255
  806f20:	18c0201c 	xori	r3,r3,128
  806f24:	18ffe004 	addi	r3,r3,-128
  806f28:	00800184 	movi	r2,6
  806f2c:	18bf331e 	bne	r3,r2,806bfc <__svfscanf_r+0x960>
  806f30:	070001c4 	movi	fp,7
  806f34:	003f2306 	br	806bc4 <__svfscanf_r+0x928>
  806f38:	008000c4 	movi	r2,3
  806f3c:	18bfed26 	beq	r3,r2,806ef4 <__svfscanf_r+0xc58>
  806f40:	00800144 	movi	r2,5
  806f44:	18bfeb26 	beq	r3,r2,806ef4 <__svfscanf_r+0xc58>
  806f48:	003f2c06 	br	806bfc <__svfscanf_r+0x960>
  806f4c:	d900a617 	ldw	r4,664(sp)
  806f50:	25fd072e 	bgeu	r4,r23,806370 <__svfscanf_r+0xd4>
  806f54:	bdffffc4 	addi	r23,r23,-1
  806f58:	b9400007 	ldb	r5,0(r23)
  806f5c:	b009883a 	mov	r4,r22
  806f60:	800d883a 	mov	r6,r16
  806f64:	080ce2c0 	call	80ce2c <_ungetc_r>
  806f68:	d880a617 	ldw	r2,664(sp)
  806f6c:	15fff936 	bltu	r2,r23,806f54 <__svfscanf_r+0xcb8>
  806f70:	003cff06 	br	806370 <__svfscanf_r+0xd4>
  806f74:	a880008c 	andi	r2,r21,2
  806f78:	10002026 	beq	r2,zero,806ffc <__svfscanf_r+0xd60>
  806f7c:	d900a417 	ldw	r4,656(sp)
  806f80:	20800017 	ldw	r2,0(r4)
  806f84:	25400104 	addi	r21,r4,4
  806f88:	10c00115 	stw	r3,4(r2)
  806f8c:	14800015 	stw	r18,0(r2)
  806f90:	003f6806 	br	806d34 <__svfscanf_r+0xa98>
  806f94:	d8c09c17 	ldw	r3,624(sp)
  806f98:	b009883a 	mov	r4,r22
  806f9c:	000d883a 	mov	r6,zero
  806fa0:	19400044 	addi	r5,r3,1
  806fa4:	01c00284 	movi	r7,10
  806fa8:	080c28c0 	call	80c28c <_strtol_r>
  806fac:	d9009d17 	ldw	r4,628(sp)
  806fb0:	110dc83a 	sub	r6,r2,r4
  806fb4:	d8c0a617 	ldw	r3,664(sp)
  806fb8:	d9009c17 	ldw	r4,624(sp)
  806fbc:	188054c4 	addi	r2,r3,339
  806fc0:	20800236 	bltu	r4,r2,806fcc <__svfscanf_r+0xd30>
  806fc4:	18805484 	addi	r2,r3,338
  806fc8:	d8809c15 	stw	r2,624(sp)
  806fcc:	d9009c17 	ldw	r4,624(sp)
  806fd0:	01402074 	movhi	r5,129
  806fd4:	2953bd04 	addi	r5,r5,20212
  806fd8:	0803fcc0 	call	803fcc <sprintf>
  806fdc:	003f4706 	br	806cfc <__svfscanf_r+0xa60>
  806fe0:	d8c09e17 	ldw	r3,632(sp)
  806fe4:	d9009f17 	ldw	r4,636(sp)
  806fe8:	1905c83a 	sub	r2,r3,r4
  806fec:	103f4326 	beq	r2,zero,806cfc <__svfscanf_r+0xa60>
  806ff0:	008dc83a 	sub	r6,zero,r2
  806ff4:	ddc09c15 	stw	r23,624(sp)
  806ff8:	003fee06 	br	806fb4 <__svfscanf_r+0xd18>
  806ffc:	d880a417 	ldw	r2,656(sp)
  807000:	9009883a 	mov	r4,r18
  807004:	180b883a 	mov	r5,r3
  807008:	15c00017 	ldw	r23,0(r2)
  80700c:	15400104 	addi	r21,r2,4
  807010:	080aa6c0 	call	80aa6c <__isnand>
  807014:	10021c1e 	bne	r2,zero,807888 <__svfscanf_r+0x15ec>
  807018:	980b883a 	mov	r5,r19
  80701c:	9009883a 	mov	r4,r18
  807020:	080fa700 	call	80fa70 <__truncdfsf2>
  807024:	b8800015 	stw	r2,0(r23)
  807028:	003f4206 	br	806d34 <__svfscanf_r+0xa98>
  80702c:	e0c03fcc 	andi	r3,fp,255
  807030:	18c0201c 	xori	r3,r3,128
  807034:	18ffe004 	addi	r3,r3,-128
  807038:	008001c4 	movi	r2,7
  80703c:	18beef1e 	bne	r3,r2,806bfc <__svfscanf_r+0x960>
  807040:	07000204 	movi	fp,8
  807044:	003edf06 	br	806bc4 <__svfscanf_r+0x928>
  807048:	d900a317 	ldw	r4,652(sp)
  80704c:	208002a4 	muli	r2,r4,10
  807050:	1145883a 	add	r2,r2,r5
  807054:	10bff404 	addi	r2,r2,-48
  807058:	d880a315 	stw	r2,652(sp)
  80705c:	003ceb06 	br	80640c <__svfscanf_r+0x170>
  807060:	9880040c 	andi	r2,r19,16
  807064:	10001426 	beq	r2,zero,8070b8 <__svfscanf_r+0xe1c>
  807068:	0027883a 	mov	r19,zero
  80706c:	00000906 	br	807094 <__svfscanf_r+0xdf8>
  807070:	80c00117 	ldw	r3,4(r16)
  807074:	d880a317 	ldw	r2,652(sp)
  807078:	29800044 	addi	r6,r5,1
  80707c:	18ffffc4 	addi	r3,r3,-1
  807080:	9cc00044 	addi	r19,r19,1
  807084:	81800015 	stw	r6,0(r16)
  807088:	80c00115 	stw	r3,4(r16)
  80708c:	14fdf726 	beq	r2,r19,80686c <__svfscanf_r+0x5d0>
  807090:	00c02c0e 	bge	zero,r3,807144 <__svfscanf_r+0xea8>
  807094:	81400017 	ldw	r5,0(r16)
  807098:	90800017 	ldw	r2,0(r18)
  80709c:	28c00003 	ldbu	r3,0(r5)
  8070a0:	1887883a 	add	r3,r3,r2
  8070a4:	19000003 	ldbu	r4,0(r3)
  8070a8:	2100020c 	andi	r4,r4,8
  8070ac:	203ff026 	beq	r4,zero,807070 <__svfscanf_r+0xdd4>
  8070b0:	8ce3883a 	add	r17,r17,r19
  8070b4:	003c8c06 	br	8062e8 <__svfscanf_r+0x4c>
  8070b8:	d8c0a417 	ldw	r3,656(sp)
  8070bc:	1d400017 	ldw	r21,0(r3)
  8070c0:	a827883a 	mov	r19,r21
  8070c4:	00000e06 	br	807100 <__svfscanf_r+0xe64>
  8070c8:	80800117 	ldw	r2,4(r16)
  8070cc:	d900a317 	ldw	r4,652(sp)
  8070d0:	29800044 	addi	r6,r5,1
  8070d4:	10ffffc4 	addi	r3,r2,-1
  8070d8:	213fffc4 	addi	r4,r4,-1
  8070dc:	d900a315 	stw	r4,652(sp)
  8070e0:	80c00115 	stw	r3,4(r16)
  8070e4:	28800003 	ldbu	r2,0(r5)
  8070e8:	98800005 	stb	r2,0(r19)
  8070ec:	81800015 	stw	r6,0(r16)
  8070f0:	9cc00044 	addi	r19,r19,1
  8070f4:	20000926 	beq	r4,zero,80711c <__svfscanf_r+0xe80>
  8070f8:	80800117 	ldw	r2,4(r16)
  8070fc:	0080170e 	bge	zero,r2,80715c <__svfscanf_r+0xec0>
  807100:	81400017 	ldw	r5,0(r16)
  807104:	90800017 	ldw	r2,0(r18)
  807108:	28c00003 	ldbu	r3,0(r5)
  80710c:	1887883a 	add	r3,r3,r2
  807110:	19000003 	ldbu	r4,0(r3)
  807114:	2100020c 	andi	r4,r4,8
  807118:	203feb26 	beq	r4,zero,8070c8 <__svfscanf_r+0xe2c>
  80711c:	9d45c83a 	sub	r2,r19,r21
  807120:	d8c0a217 	ldw	r3,648(sp)
  807124:	88a3883a 	add	r17,r17,r2
  807128:	d880a417 	ldw	r2,656(sp)
  80712c:	18c00044 	addi	r3,r3,1
  807130:	d8c0a215 	stw	r3,648(sp)
  807134:	10800104 	addi	r2,r2,4
  807138:	d880a415 	stw	r2,656(sp)
  80713c:	98000005 	stb	zero,0(r19)
  807140:	003c6906 	br	8062e8 <__svfscanf_r+0x4c>
  807144:	b009883a 	mov	r4,r22
  807148:	800b883a 	mov	r5,r16
  80714c:	0803d1c0 	call	803d1c <__srefill_r>
  807150:	103fd026 	beq	r2,zero,807094 <__svfscanf_r+0xdf8>
  807154:	8ce3883a 	add	r17,r17,r19
  807158:	003c6306 	br	8062e8 <__svfscanf_r+0x4c>
  80715c:	b009883a 	mov	r4,r22
  807160:	800b883a 	mov	r5,r16
  807164:	0803d1c0 	call	803d1c <__srefill_r>
  807168:	103fe526 	beq	r2,zero,807100 <__svfscanf_r+0xe64>
  80716c:	003feb06 	br	80711c <__svfscanf_r+0xe80>
  807170:	d900a317 	ldw	r4,652(sp)
  807174:	9d41e014 	ori	r21,r19,1920
  807178:	2000821e 	bne	r4,zero,807384 <__svfscanf_r+0x10e8>
  80717c:	d8c04404 	addi	r3,sp,272
  807180:	182f883a 	mov	r23,r3
  807184:	0039883a 	mov	fp,zero
  807188:	d8c0a615 	stw	r3,664(sp)
  80718c:	d8009c15 	stw	zero,624(sp)
  807190:	d8009d15 	stw	zero,628(sp)
  807194:	d8009f15 	stw	zero,636(sp)
  807198:	d8009e15 	stw	zero,632(sp)
  80719c:	003e9e06 	br	806c18 <__svfscanf_r+0x97c>
  8071a0:	d900a317 	ldw	r4,652(sp)
  8071a4:	9c836014 	ori	r18,r19,3456
  8071a8:	2000161e 	bne	r4,zero,807204 <__svfscanf_r+0xf68>
  8071ac:	d8804404 	addi	r2,sp,272
  8071b0:	d880a615 	stw	r2,664(sp)
  8071b4:	002f883a 	mov	r23,zero
  8071b8:	1027883a 	mov	r19,r2
  8071bc:	9080400c 	andi	r2,r18,256
  8071c0:	10000926 	beq	r2,zero,8071e8 <__svfscanf_r+0xf4c>
  8071c4:	d8c0a617 	ldw	r3,664(sp)
  8071c8:	1cc0052e 	bgeu	r3,r19,8071e0 <__svfscanf_r+0xf44>
  8071cc:	9cffffc4 	addi	r19,r19,-1
  8071d0:	99400007 	ldb	r5,0(r19)
  8071d4:	b009883a 	mov	r4,r22
  8071d8:	800d883a 	mov	r6,r16
  8071dc:	080ce2c0 	call	80ce2c <_ungetc_r>
  8071e0:	d900a617 	ldw	r4,664(sp)
  8071e4:	24fc6226 	beq	r4,r19,806370 <__svfscanf_r+0xd4>
  8071e8:	9080040c 	andi	r2,r18,16
  8071ec:	10006726 	beq	r2,zero,80738c <__svfscanf_r+0x10f0>
  8071f0:	d8c0a617 	ldw	r3,664(sp)
  8071f4:	98c5c83a 	sub	r2,r19,r3
  8071f8:	b885883a 	add	r2,r23,r2
  8071fc:	88a3883a 	add	r17,r17,r2
  807200:	003c3906 	br	8062e8 <__svfscanf_r+0x4c>
  807204:	002b883a 	mov	r21,zero
  807208:	d8c04404 	addi	r3,sp,272
  80720c:	d8c0a615 	stw	r3,664(sp)
  807210:	002f883a 	mov	r23,zero
  807214:	1827883a 	mov	r19,r3
  807218:	81800017 	ldw	r6,0(r16)
  80721c:	00c01344 	movi	r3,77
  807220:	31400003 	ldbu	r5,0(r6)
  807224:	28bff544 	addi	r2,r5,-43
  807228:	10803fcc 	andi	r2,r2,255
  80722c:	18bfe336 	bltu	r3,r2,8071bc <__svfscanf_r+0xf20>
  807230:	1085883a 	add	r2,r2,r2
  807234:	1085883a 	add	r2,r2,r2
  807238:	00c02034 	movhi	r3,128
  80723c:	18dc9304 	addi	r3,r3,29260
  807240:	10c5883a 	add	r2,r2,r3
  807244:	11000017 	ldw	r4,0(r2)
  807248:	2000683a 	jmp	r4
  80724c:	008073e0 	cmpeqi	r2,zero,463
  807250:	008071bc 	xorhi	r2,zero,454
  807254:	008073e0 	cmpeqi	r2,zero,463
  807258:	008071bc 	xorhi	r2,zero,454
  80725c:	008071bc 	xorhi	r2,zero,454
  807260:	00807424 	muli	r2,zero,464
  807264:	00807520 	cmpeqi	r2,zero,468
  807268:	00807520 	cmpeqi	r2,zero,468
  80726c:	00807520 	cmpeqi	r2,zero,468
  807270:	00807520 	cmpeqi	r2,zero,468
  807274:	00807520 	cmpeqi	r2,zero,468
  807278:	00807520 	cmpeqi	r2,zero,468
  80727c:	00807520 	cmpeqi	r2,zero,468
  807280:	00807548 	cmpgei	r2,zero,469
  807284:	00807548 	cmpgei	r2,zero,469
  807288:	008071bc 	xorhi	r2,zero,454
  80728c:	008071bc 	xorhi	r2,zero,454
  807290:	008071bc 	xorhi	r2,zero,454
  807294:	008071bc 	xorhi	r2,zero,454
  807298:	008071bc 	xorhi	r2,zero,454
  80729c:	008071bc 	xorhi	r2,zero,454
  8072a0:	008071bc 	xorhi	r2,zero,454
  8072a4:	00807578 	rdprs	r2,zero,469
  8072a8:	00807578 	rdprs	r2,zero,469
  8072ac:	00807578 	rdprs	r2,zero,469
  8072b0:	00807578 	rdprs	r2,zero,469
  8072b4:	00807578 	rdprs	r2,zero,469
  8072b8:	00807578 	rdprs	r2,zero,469
  8072bc:	008071bc 	xorhi	r2,zero,454
  8072c0:	008071bc 	xorhi	r2,zero,454
  8072c4:	008071bc 	xorhi	r2,zero,454
  8072c8:	008071bc 	xorhi	r2,zero,454
  8072cc:	008071bc 	xorhi	r2,zero,454
  8072d0:	008071bc 	xorhi	r2,zero,454
  8072d4:	008071bc 	xorhi	r2,zero,454
  8072d8:	008071bc 	xorhi	r2,zero,454
  8072dc:	008071bc 	xorhi	r2,zero,454
  8072e0:	008071bc 	xorhi	r2,zero,454
  8072e4:	008071bc 	xorhi	r2,zero,454
  8072e8:	008071bc 	xorhi	r2,zero,454
  8072ec:	008071bc 	xorhi	r2,zero,454
  8072f0:	008071bc 	xorhi	r2,zero,454
  8072f4:	008071bc 	xorhi	r2,zero,454
  8072f8:	008071bc 	xorhi	r2,zero,454
  8072fc:	008071bc 	xorhi	r2,zero,454
  807300:	00807588 	cmpgei	r2,zero,470
  807304:	008071bc 	xorhi	r2,zero,454
  807308:	008071bc 	xorhi	r2,zero,454
  80730c:	008071bc 	xorhi	r2,zero,454
  807310:	008071bc 	xorhi	r2,zero,454
  807314:	008071bc 	xorhi	r2,zero,454
  807318:	008071bc 	xorhi	r2,zero,454
  80731c:	008071bc 	xorhi	r2,zero,454
  807320:	008071bc 	xorhi	r2,zero,454
  807324:	00807578 	rdprs	r2,zero,469
  807328:	00807578 	rdprs	r2,zero,469
  80732c:	00807578 	rdprs	r2,zero,469
  807330:	00807578 	rdprs	r2,zero,469
  807334:	00807578 	rdprs	r2,zero,469
  807338:	00807578 	rdprs	r2,zero,469
  80733c:	008071bc 	xorhi	r2,zero,454
  807340:	008071bc 	xorhi	r2,zero,454
  807344:	008071bc 	xorhi	r2,zero,454
  807348:	008071bc 	xorhi	r2,zero,454
  80734c:	008071bc 	xorhi	r2,zero,454
  807350:	008071bc 	xorhi	r2,zero,454
  807354:	008071bc 	xorhi	r2,zero,454
  807358:	008071bc 	xorhi	r2,zero,454
  80735c:	008071bc 	xorhi	r2,zero,454
  807360:	008071bc 	xorhi	r2,zero,454
  807364:	008071bc 	xorhi	r2,zero,454
  807368:	008071bc 	xorhi	r2,zero,454
  80736c:	008071bc 	xorhi	r2,zero,454
  807370:	008071bc 	xorhi	r2,zero,454
  807374:	008071bc 	xorhi	r2,zero,454
  807378:	008071bc 	xorhi	r2,zero,454
  80737c:	008071bc 	xorhi	r2,zero,454
  807380:	00807588 	cmpgei	r2,zero,470
  807384:	000d883a 	mov	r6,zero
  807388:	003d9006 	br	8069cc <__svfscanf_r+0x730>
  80738c:	98000005 	stb	zero,0(r19)
  807390:	d8c0a017 	ldw	r3,640(sp)
  807394:	d940a617 	ldw	r5,664(sp)
  807398:	d9c0a117 	ldw	r7,644(sp)
  80739c:	b009883a 	mov	r4,r22
  8073a0:	000d883a 	mov	r6,zero
  8073a4:	183ee83a 	callr	r3
  8073a8:	1007883a 	mov	r3,r2
  8073ac:	9080080c 	andi	r2,r18,32
  8073b0:	10004d1e 	bne	r2,zero,8074e8 <__svfscanf_r+0x124c>
  8073b4:	9080010c 	andi	r2,r18,4
  8073b8:	10003426 	beq	r2,zero,80748c <__svfscanf_r+0x11f0>
  8073bc:	d900a417 	ldw	r4,656(sp)
  8073c0:	20800017 	ldw	r2,0(r4)
  8073c4:	21000104 	addi	r4,r4,4
  8073c8:	d900a415 	stw	r4,656(sp)
  8073cc:	10c0000d 	sth	r3,0(r2)
  8073d0:	d880a217 	ldw	r2,648(sp)
  8073d4:	10800044 	addi	r2,r2,1
  8073d8:	d880a215 	stw	r2,648(sp)
  8073dc:	003f8406 	br	8071f0 <__svfscanf_r+0xf54>
  8073e0:	9080200c 	andi	r2,r18,128
  8073e4:	103f7526 	beq	r2,zero,8071bc <__svfscanf_r+0xf20>
  8073e8:	00bfdfc4 	movi	r2,-129
  8073ec:	90a4703a 	and	r18,r18,r2
  8073f0:	99400005 	stb	r5,0(r19)
  8073f4:	9cc00044 	addi	r19,r19,1
  8073f8:	80c00117 	ldw	r3,4(r16)
  8073fc:	18ffffc4 	addi	r3,r3,-1
  807400:	80c00115 	stw	r3,4(r16)
  807404:	00c0130e 	bge	zero,r3,807454 <__svfscanf_r+0x11b8>
  807408:	31800044 	addi	r6,r6,1
  80740c:	81800015 	stw	r6,0(r16)
  807410:	d880a317 	ldw	r2,652(sp)
  807414:	10bfffc4 	addi	r2,r2,-1
  807418:	d880a315 	stw	r2,652(sp)
  80741c:	103f7e1e 	bne	r2,zero,807218 <__svfscanf_r+0xf7c>
  807420:	003f6606 	br	8071bc <__svfscanf_r+0xf20>
  807424:	9082000c 	andi	r2,r18,2048
  807428:	103ff126 	beq	r2,zero,8073f0 <__svfscanf_r+0x1154>
  80742c:	d8c0a117 	ldw	r3,644(sp)
  807430:	1800031e 	bne	r3,zero,807440 <__svfscanf_r+0x11a4>
  807434:	01000204 	movi	r4,8
  807438:	94808014 	ori	r18,r18,512
  80743c:	d900a115 	stw	r4,644(sp)
  807440:	9081000c 	andi	r2,r18,1024
  807444:	10000826 	beq	r2,zero,807468 <__svfscanf_r+0x11cc>
  807448:	00be9fc4 	movi	r2,-1409
  80744c:	90a4703a 	and	r18,r18,r2
  807450:	003fe706 	br	8073f0 <__svfscanf_r+0x1154>
  807454:	b009883a 	mov	r4,r22
  807458:	800b883a 	mov	r5,r16
  80745c:	0803d1c0 	call	803d1c <__srefill_r>
  807460:	103feb26 	beq	r2,zero,807410 <__svfscanf_r+0x1174>
  807464:	003f5506 	br	8071bc <__svfscanf_r+0xf20>
  807468:	a8000426 	beq	r21,zero,80747c <__svfscanf_r+0x11e0>
  80746c:	d880a317 	ldw	r2,652(sp)
  807470:	ad7fffc4 	addi	r21,r21,-1
  807474:	10800044 	addi	r2,r2,1
  807478:	d880a315 	stw	r2,652(sp)
  80747c:	00bf1fc4 	movi	r2,-897
  807480:	90a4703a 	and	r18,r18,r2
  807484:	bdc00044 	addi	r23,r23,1
  807488:	003fdb06 	br	8073f8 <__svfscanf_r+0x115c>
  80748c:	9080004c 	andi	r2,r18,1
  807490:	1005003a 	cmpeq	r2,r2,zero
  807494:	10001426 	beq	r2,zero,8074e8 <__svfscanf_r+0x124c>
  807498:	9080008c 	andi	r2,r18,2
  80749c:	10001226 	beq	r2,zero,8074e8 <__svfscanf_r+0x124c>
  8074a0:	d8c0a017 	ldw	r3,640(sp)
  8074a4:	00802074 	movhi	r2,129
  8074a8:	10b20304 	addi	r2,r2,-14324
  8074ac:	18801426 	beq	r3,r2,807500 <__svfscanf_r+0x1264>
  8074b0:	d9c0a117 	ldw	r7,644(sp)
  8074b4:	d940a617 	ldw	r5,664(sp)
  8074b8:	000d883a 	mov	r6,zero
  8074bc:	b009883a 	mov	r4,r22
  8074c0:	080c4f40 	call	80c4f4 <_strtoll_r>
  8074c4:	100d883a 	mov	r6,r2
  8074c8:	180f883a 	mov	r7,r3
  8074cc:	d900a417 	ldw	r4,656(sp)
  8074d0:	20800017 	ldw	r2,0(r4)
  8074d4:	21000104 	addi	r4,r4,4
  8074d8:	d900a415 	stw	r4,656(sp)
  8074dc:	11c00115 	stw	r7,4(r2)
  8074e0:	11800015 	stw	r6,0(r2)
  8074e4:	003fba06 	br	8073d0 <__svfscanf_r+0x1134>
  8074e8:	d900a417 	ldw	r4,656(sp)
  8074ec:	20800017 	ldw	r2,0(r4)
  8074f0:	21000104 	addi	r4,r4,4
  8074f4:	d900a415 	stw	r4,656(sp)
  8074f8:	10c00015 	stw	r3,0(r2)
  8074fc:	003fb406 	br	8073d0 <__svfscanf_r+0x1134>
  807500:	d9c0a117 	ldw	r7,644(sp)
  807504:	d940a617 	ldw	r5,664(sp)
  807508:	000d883a 	mov	r6,zero
  80750c:	b009883a 	mov	r4,r22
  807510:	080ca600 	call	80ca60 <_strtoull_r>
  807514:	100d883a 	mov	r6,r2
  807518:	180f883a 	mov	r7,r3
  80751c:	003feb06 	br	8074cc <__svfscanf_r+0x1230>
  807520:	d8c0a117 	ldw	r3,644(sp)
  807524:	18c5883a 	add	r2,r3,r3
  807528:	00c02074 	movhi	r3,129
  80752c:	18d3bf04 	addi	r3,r3,20220
  807530:	10c5883a 	add	r2,r2,r3
  807534:	1080000f 	ldh	r2,0(r2)
  807538:	00fd1fc4 	movi	r3,-2945
  80753c:	90e4703a 	and	r18,r18,r3
  807540:	d880a115 	stw	r2,644(sp)
  807544:	003faa06 	br	8073f0 <__svfscanf_r+0x1154>
  807548:	d900a117 	ldw	r4,644(sp)
  80754c:	00c02074 	movhi	r3,129
  807550:	18d3bf04 	addi	r3,r3,20220
  807554:	2105883a 	add	r2,r4,r4
  807558:	10c5883a 	add	r2,r2,r3
  80755c:	1080000f 	ldh	r2,0(r2)
  807560:	00c00204 	movi	r3,8
  807564:	d880a115 	stw	r2,644(sp)
  807568:	18bf140e 	bge	r3,r2,8071bc <__svfscanf_r+0xf20>
  80756c:	00bd1fc4 	movi	r2,-2945
  807570:	90a4703a 	and	r18,r18,r2
  807574:	003f9e06 	br	8073f0 <__svfscanf_r+0x1154>
  807578:	d8c0a117 	ldw	r3,644(sp)
  80757c:	00800284 	movi	r2,10
  807580:	10fffa16 	blt	r2,r3,80756c <__svfscanf_r+0x12d0>
  807584:	003f0d06 	br	8071bc <__svfscanf_r+0xf20>
  807588:	90c1800c 	andi	r3,r18,1536
  80758c:	00808004 	movi	r2,512
  807590:	18bf0a1e 	bne	r3,r2,8071bc <__svfscanf_r+0xf20>
  807594:	00bf7fc4 	movi	r2,-513
  807598:	9084703a 	and	r2,r18,r2
  80759c:	01000404 	movi	r4,16
  8075a0:	14814014 	ori	r18,r2,1280
  8075a4:	d900a115 	stw	r4,644(sp)
  8075a8:	003f9106 	br	8073f0 <__svfscanf_r+0x1154>
  8075ac:	d880a417 	ldw	r2,656(sp)
  8075b0:	dd400404 	addi	r21,sp,16
  8075b4:	14800017 	ldw	r18,0(r2)
  8075b8:	9027883a 	mov	r19,r18
  8075bc:	81000017 	ldw	r4,0(r16)
  8075c0:	20800003 	ldbu	r2,0(r4)
  8075c4:	a885883a 	add	r2,r21,r2
  8075c8:	10c00007 	ldb	r3,0(r2)
  8075cc:	18001426 	beq	r3,zero,807620 <__svfscanf_r+0x1384>
  8075d0:	d8c0a317 	ldw	r3,652(sp)
  8075d4:	80800117 	ldw	r2,4(r16)
  8075d8:	21800044 	addi	r6,r4,1
  8075dc:	18ffffc4 	addi	r3,r3,-1
  8075e0:	d8c0a315 	stw	r3,652(sp)
  8075e4:	10ffffc4 	addi	r3,r2,-1
  8075e8:	80c00115 	stw	r3,4(r16)
  8075ec:	20800003 	ldbu	r2,0(r4)
  8075f0:	90800005 	stb	r2,0(r18)
  8075f4:	d900a317 	ldw	r4,652(sp)
  8075f8:	81800015 	stw	r6,0(r16)
  8075fc:	94800044 	addi	r18,r18,1
  807600:	20000726 	beq	r4,zero,807620 <__svfscanf_r+0x1384>
  807604:	80800117 	ldw	r2,4(r16)
  807608:	00bfec16 	blt	zero,r2,8075bc <__svfscanf_r+0x1320>
  80760c:	b009883a 	mov	r4,r22
  807610:	800b883a 	mov	r5,r16
  807614:	0803d1c0 	call	803d1c <__srefill_r>
  807618:	103fe826 	beq	r2,zero,8075bc <__svfscanf_r+0x1320>
  80761c:	9cbb7426 	beq	r19,r18,8063f0 <__svfscanf_r+0x154>
  807620:	94e7c83a 	sub	r19,r18,r19
  807624:	983b5226 	beq	r19,zero,806370 <__svfscanf_r+0xd4>
  807628:	90000005 	stb	zero,0(r18)
  80762c:	d880a417 	ldw	r2,656(sp)
  807630:	d8c0a217 	ldw	r3,648(sp)
  807634:	8ce3883a 	add	r17,r17,r19
  807638:	10800104 	addi	r2,r2,4
  80763c:	18c00044 	addi	r3,r3,1
  807640:	d880a415 	stw	r2,656(sp)
  807644:	d8c0a215 	stw	r3,648(sp)
  807648:	003b2706 	br	8062e8 <__svfscanf_r+0x4c>
  80764c:	9cc00414 	ori	r19,r19,16
  807650:	003b6e06 	br	80640c <__svfscanf_r+0x170>
  807654:	00c00404 	movi	r3,16
  807658:	01002074 	movhi	r4,129
  80765c:	21320304 	addi	r4,r4,-14324
  807660:	9cc08014 	ori	r19,r19,512
  807664:	054000c4 	movi	r21,3
  807668:	d8c0a115 	stw	r3,644(sp)
  80766c:	d900a015 	stw	r4,640(sp)
  807670:	003bf806 	br	806654 <__svfscanf_r+0x3b8>
  807674:	9880040c 	andi	r2,r19,16
  807678:	10001926 	beq	r2,zero,8076e0 <__svfscanf_r+0x1444>
  80767c:	0027883a 	mov	r19,zero
  807680:	00000b06 	br	8076b0 <__svfscanf_r+0x1414>
  807684:	80800017 	ldw	r2,0(r16)
  807688:	b009883a 	mov	r4,r22
  80768c:	800b883a 	mov	r5,r16
  807690:	148d883a 	add	r6,r2,r18
  807694:	81800015 	stw	r6,0(r16)
  807698:	9ca7883a 	add	r19,r19,r18
  80769c:	0803d1c0 	call	803d1c <__srefill_r>
  8076a0:	103c711e 	bne	r2,zero,806868 <__svfscanf_r+0x5cc>
  8076a4:	d900a317 	ldw	r4,652(sp)
  8076a8:	2489c83a 	sub	r4,r4,r18
  8076ac:	d900a315 	stw	r4,652(sp)
  8076b0:	84800117 	ldw	r18,4(r16)
  8076b4:	d8c0a317 	ldw	r3,652(sp)
  8076b8:	90fff216 	blt	r18,r3,807684 <__svfscanf_r+0x13e8>
  8076bc:	d900a317 	ldw	r4,652(sp)
  8076c0:	80800017 	ldw	r2,0(r16)
  8076c4:	9927883a 	add	r19,r19,r4
  8076c8:	9107c83a 	sub	r3,r18,r4
  8076cc:	110d883a 	add	r6,r2,r4
  8076d0:	8ce3883a 	add	r17,r17,r19
  8076d4:	80c00115 	stw	r3,4(r16)
  8076d8:	81800015 	stw	r6,0(r16)
  8076dc:	003b0206 	br	8062e8 <__svfscanf_r+0x4c>
  8076e0:	d880a417 	ldw	r2,656(sp)
  8076e4:	d980a317 	ldw	r6,652(sp)
  8076e8:	01400044 	movi	r5,1
  8076ec:	11000017 	ldw	r4,0(r2)
  8076f0:	800f883a 	mov	r7,r16
  8076f4:	08096a80 	call	8096a8 <fread>
  8076f8:	103b3d26 	beq	r2,zero,8063f0 <__svfscanf_r+0x154>
  8076fc:	d8c0a417 	ldw	r3,656(sp)
  807700:	d900a217 	ldw	r4,648(sp)
  807704:	88a3883a 	add	r17,r17,r2
  807708:	18c00104 	addi	r3,r3,4
  80770c:	21000044 	addi	r4,r4,1
  807710:	d8c0a415 	stw	r3,656(sp)
  807714:	d900a215 	stw	r4,648(sp)
  807718:	003af306 	br	8062e8 <__svfscanf_r+0x4c>
  80771c:	8080030b 	ldhu	r2,12(r16)
  807720:	1080100c 	andi	r2,r2,64
  807724:	103b1226 	beq	r2,zero,806370 <__svfscanf_r+0xd4>
  807728:	003b3306 	br	8063f8 <__svfscanf_r+0x15c>
  80772c:	983b1026 	beq	r19,zero,806370 <__svfscanf_r+0xd4>
  807730:	8ce3883a 	add	r17,r17,r19
  807734:	003aec06 	br	8062e8 <__svfscanf_r+0x4c>
  807738:	983c9626 	beq	r19,zero,806994 <__svfscanf_r+0x6f8>
  80773c:	9cffffc4 	addi	r19,r19,-1
  807740:	d8c04404 	addi	r3,sp,272
  807744:	1cc5883a 	add	r2,r3,r19
  807748:	11400003 	ldbu	r5,0(r2)
  80774c:	b009883a 	mov	r4,r22
  807750:	800d883a 	mov	r6,r16
  807754:	080ce2c0 	call	80ce2c <_ungetc_r>
  807758:	003ff706 	br	807738 <__svfscanf_r+0x149c>
  80775c:	00bfff84 	movi	r2,-2
  807760:	18bc7a1e 	bne	r3,r2,80694c <__svfscanf_r+0x6b0>
  807764:	003c8406 	br	806978 <__svfscanf_r+0x6dc>
  807768:	d900a417 	ldw	r4,656(sp)
  80776c:	25400017 	ldw	r21,0(r4)
  807770:	21000104 	addi	r4,r4,4
  807774:	d900a415 	stw	r4,656(sp)
  807778:	003c4a06 	br	8068a4 <__svfscanf_r+0x608>
  80777c:	00bfff84 	movi	r2,-2
  807780:	18bc0f1e 	bne	r3,r2,8067c0 <__svfscanf_r+0x524>
  807784:	003c1506 	br	8067dc <__svfscanf_r+0x540>
  807788:	b009883a 	mov	r4,r22
  80778c:	800b883a 	mov	r5,r16
  807790:	0803d1c0 	call	803d1c <__srefill_r>
  807794:	103c1326 	beq	r2,zero,8067e4 <__svfscanf_r+0x548>
  807798:	903b151e 	bne	r18,zero,8063f0 <__svfscanf_r+0x154>
  80779c:	a83ad21e 	bne	r21,zero,8062e8 <__svfscanf_r+0x4c>
  8077a0:	d880a217 	ldw	r2,648(sp)
  8077a4:	10800044 	addi	r2,r2,1
  8077a8:	d880a215 	stw	r2,648(sp)
  8077ac:	003ace06 	br	8062e8 <__svfscanf_r+0x4c>
  8077b0:	0027883a 	mov	r19,zero
  8077b4:	003bdd06 	br	80672c <__svfscanf_r+0x490>
  8077b8:	9cc00114 	ori	r19,r19,4
  8077bc:	003b1306 	br	80640c <__svfscanf_r+0x170>
  8077c0:	05400104 	movi	r21,4
  8077c4:	003ba306 	br	806654 <__svfscanf_r+0x3b8>
  8077c8:	9cc00054 	ori	r19,r19,1
  8077cc:	00802074 	movhi	r2,129
  8077d0:	10b0a304 	addi	r2,r2,-15732
  8077d4:	00c00284 	movi	r3,10
  8077d8:	054000c4 	movi	r21,3
  8077dc:	d880a015 	stw	r2,640(sp)
  8077e0:	d8c0a115 	stw	r3,644(sp)
  8077e4:	003b9b06 	br	806654 <__svfscanf_r+0x3b8>
  8077e8:	9cc01014 	ori	r19,r19,64
  8077ec:	002b883a 	mov	r21,zero
  8077f0:	003b9806 	br	806654 <__svfscanf_r+0x3b8>
  8077f4:	a00b883a 	mov	r5,r20
  8077f8:	d9000404 	addi	r4,sp,16
  8077fc:	080aa9c0 	call	80aa9c <__sccl>
  807800:	1029883a 	mov	r20,r2
  807804:	9cc01014 	ori	r19,r19,64
  807808:	05400044 	movi	r21,1
  80780c:	003b9106 	br	806654 <__svfscanf_r+0x3b8>
  807810:	9cc00054 	ori	r19,r19,1
  807814:	00800204 	movi	r2,8
  807818:	00c02074 	movhi	r3,129
  80781c:	18f20304 	addi	r3,r3,-14324
  807820:	054000c4 	movi	r21,3
  807824:	d880a115 	stw	r2,644(sp)
  807828:	d8c0a015 	stw	r3,640(sp)
  80782c:	003b8906 	br	806654 <__svfscanf_r+0x3b8>
  807830:	9880040c 	andi	r2,r19,16
  807834:	103aac1e 	bne	r2,zero,8062e8 <__svfscanf_r+0x4c>
  807838:	9880010c 	andi	r2,r19,4
  80783c:	10002426 	beq	r2,zero,8078d0 <__svfscanf_r+0x1634>
  807840:	d900a417 	ldw	r4,656(sp)
  807844:	20800017 	ldw	r2,0(r4)
  807848:	21000104 	addi	r4,r4,4
  80784c:	d900a415 	stw	r4,656(sp)
  807850:	1440000d 	sth	r17,0(r2)
  807854:	003aa406 	br	8062e8 <__svfscanf_r+0x4c>
  807858:	9cc00094 	ori	r19,r19,2
  80785c:	003aeb06 	br	80640c <__svfscanf_r+0x170>
  807860:	05400084 	movi	r21,2
  807864:	003b7b06 	br	806654 <__svfscanf_r+0x3b8>
  807868:	00800404 	movi	r2,16
  80786c:	00c02074 	movhi	r3,129
  807870:	18f20304 	addi	r3,r3,-14324
  807874:	9cc08814 	ori	r19,r19,544
  807878:	054000c4 	movi	r21,3
  80787c:	d880a115 	stw	r2,644(sp)
  807880:	d8c0a015 	stw	r3,640(sp)
  807884:	003b7306 	br	806654 <__svfscanf_r+0x3b8>
  807888:	0009883a 	mov	r4,zero
  80788c:	080ab5c0 	call	80ab5c <nanf>
  807890:	b8800015 	stw	r2,0(r23)
  807894:	003d2706 	br	806d34 <__svfscanf_r+0xa98>
  807898:	a0c00007 	ldb	r3,0(r20)
  80789c:	00801b04 	movi	r2,108
  8078a0:	18800826 	beq	r3,r2,8078c4 <__svfscanf_r+0x1628>
  8078a4:	9cc00054 	ori	r19,r19,1
  8078a8:	003ad806 	br	80640c <__svfscanf_r+0x170>
  8078ac:	01002074 	movhi	r4,129
  8078b0:	2130a304 	addi	r4,r4,-15732
  8078b4:	054000c4 	movi	r21,3
  8078b8:	d900a015 	stw	r4,640(sp)
  8078bc:	d800a115 	stw	zero,644(sp)
  8078c0:	003b6406 	br	806654 <__svfscanf_r+0x3b8>
  8078c4:	a5000044 	addi	r20,r20,1
  8078c8:	9cc00094 	ori	r19,r19,2
  8078cc:	003acf06 	br	80640c <__svfscanf_r+0x170>
  8078d0:	9880004c 	andi	r2,r19,1
  8078d4:	1005003a 	cmpeq	r2,r2,zero
  8078d8:	10000a26 	beq	r2,zero,807904 <__svfscanf_r+0x1668>
  8078dc:	9880008c 	andi	r2,r19,2
  8078e0:	10000826 	beq	r2,zero,807904 <__svfscanf_r+0x1668>
  8078e4:	d900a417 	ldw	r4,656(sp)
  8078e8:	8807d7fa 	srai	r3,r17,31
  8078ec:	20800017 	ldw	r2,0(r4)
  8078f0:	21000104 	addi	r4,r4,4
  8078f4:	d900a415 	stw	r4,656(sp)
  8078f8:	14400015 	stw	r17,0(r2)
  8078fc:	10c00115 	stw	r3,4(r2)
  807900:	003a7906 	br	8062e8 <__svfscanf_r+0x4c>
  807904:	d8c0a417 	ldw	r3,656(sp)
  807908:	18800017 	ldw	r2,0(r3)
  80790c:	18c00104 	addi	r3,r3,4
  807910:	d8c0a415 	stw	r3,656(sp)
  807914:	14400015 	stw	r17,0(r2)
  807918:	003a7306 	br	8062e8 <__svfscanf_r+0x4c>

0080791c <__svfscanf>:
  80791c:	00802074 	movhi	r2,129
  807920:	109c4f04 	addi	r2,r2,28988
  807924:	2013883a 	mov	r9,r4
  807928:	11000017 	ldw	r4,0(r2)
  80792c:	2805883a 	mov	r2,r5
  807930:	300f883a 	mov	r7,r6
  807934:	480b883a 	mov	r5,r9
  807938:	100d883a 	mov	r6,r2
  80793c:	080629c1 	jmpi	80629c <__svfscanf_r>

00807940 <_vfscanf_r>:
  807940:	defffb04 	addi	sp,sp,-20
  807944:	dcc00315 	stw	r19,12(sp)
  807948:	dc800215 	stw	r18,8(sp)
  80794c:	dc400115 	stw	r17,4(sp)
  807950:	dc000015 	stw	r16,0(sp)
  807954:	dfc00415 	stw	ra,16(sp)
  807958:	2021883a 	mov	r16,r4
  80795c:	2823883a 	mov	r17,r5
  807960:	3025883a 	mov	r18,r6
  807964:	3827883a 	mov	r19,r7
  807968:	20000226 	beq	r4,zero,807974 <_vfscanf_r+0x34>
  80796c:	20800e17 	ldw	r2,56(r4)
  807970:	10000b26 	beq	r2,zero,8079a0 <_vfscanf_r+0x60>
  807974:	8009883a 	mov	r4,r16
  807978:	880b883a 	mov	r5,r17
  80797c:	900d883a 	mov	r6,r18
  807980:	980f883a 	mov	r7,r19
  807984:	dfc00417 	ldw	ra,16(sp)
  807988:	dcc00317 	ldw	r19,12(sp)
  80798c:	dc800217 	ldw	r18,8(sp)
  807990:	dc400117 	ldw	r17,4(sp)
  807994:	dc000017 	ldw	r16,0(sp)
  807998:	dec00504 	addi	sp,sp,20
  80799c:	080629c1 	jmpi	80629c <__svfscanf_r>
  8079a0:	080162c0 	call	80162c <__sinit>
  8079a4:	003ff306 	br	807974 <_vfscanf_r+0x34>

008079a8 <vfscanf>:
  8079a8:	defffb04 	addi	sp,sp,-20
  8079ac:	dcc00315 	stw	r19,12(sp)
  8079b0:	04c02074 	movhi	r19,129
  8079b4:	9cdc4f04 	addi	r19,r19,28988
  8079b8:	98c00017 	ldw	r3,0(r19)
  8079bc:	dc800215 	stw	r18,8(sp)
  8079c0:	dc400115 	stw	r17,4(sp)
  8079c4:	dc000015 	stw	r16,0(sp)
  8079c8:	dfc00415 	stw	ra,16(sp)
  8079cc:	2021883a 	mov	r16,r4
  8079d0:	2823883a 	mov	r17,r5
  8079d4:	3025883a 	mov	r18,r6
  8079d8:	18000326 	beq	r3,zero,8079e8 <vfscanf+0x40>
  8079dc:	18800e17 	ldw	r2,56(r3)
  8079e0:	1809883a 	mov	r4,r3
  8079e4:	10000b26 	beq	r2,zero,807a14 <vfscanf+0x6c>
  8079e8:	99000017 	ldw	r4,0(r19)
  8079ec:	800b883a 	mov	r5,r16
  8079f0:	880d883a 	mov	r6,r17
  8079f4:	900f883a 	mov	r7,r18
  8079f8:	dfc00417 	ldw	ra,16(sp)
  8079fc:	dcc00317 	ldw	r19,12(sp)
  807a00:	dc800217 	ldw	r18,8(sp)
  807a04:	dc400117 	ldw	r17,4(sp)
  807a08:	dc000017 	ldw	r16,0(sp)
  807a0c:	dec00504 	addi	sp,sp,20
  807a10:	080629c1 	jmpi	80629c <__svfscanf_r>
  807a14:	080162c0 	call	80162c <__sinit>
  807a18:	003ff306 	br	8079e8 <vfscanf+0x40>

00807a1c <_write_r>:
  807a1c:	defffd04 	addi	sp,sp,-12
  807a20:	dc000015 	stw	r16,0(sp)
  807a24:	040020b4 	movhi	r16,130
  807a28:	8423a004 	addi	r16,r16,-29056
  807a2c:	dc400115 	stw	r17,4(sp)
  807a30:	80000015 	stw	zero,0(r16)
  807a34:	2023883a 	mov	r17,r4
  807a38:	2809883a 	mov	r4,r5
  807a3c:	300b883a 	mov	r5,r6
  807a40:	380d883a 	mov	r6,r7
  807a44:	dfc00215 	stw	ra,8(sp)
  807a48:	08117300 	call	811730 <write>
  807a4c:	1007883a 	mov	r3,r2
  807a50:	00bfffc4 	movi	r2,-1
  807a54:	18800626 	beq	r3,r2,807a70 <_write_r+0x54>
  807a58:	1805883a 	mov	r2,r3
  807a5c:	dfc00217 	ldw	ra,8(sp)
  807a60:	dc400117 	ldw	r17,4(sp)
  807a64:	dc000017 	ldw	r16,0(sp)
  807a68:	dec00304 	addi	sp,sp,12
  807a6c:	f800283a 	ret
  807a70:	80800017 	ldw	r2,0(r16)
  807a74:	103ff826 	beq	r2,zero,807a58 <_write_r+0x3c>
  807a78:	88800015 	stw	r2,0(r17)
  807a7c:	1805883a 	mov	r2,r3
  807a80:	dfc00217 	ldw	ra,8(sp)
  807a84:	dc400117 	ldw	r17,4(sp)
  807a88:	dc000017 	ldw	r16,0(sp)
  807a8c:	dec00304 	addi	sp,sp,12
  807a90:	f800283a 	ret

00807a94 <__swsetup_r>:
  807a94:	00802074 	movhi	r2,129
  807a98:	109c4f04 	addi	r2,r2,28988
  807a9c:	10c00017 	ldw	r3,0(r2)
  807aa0:	defffd04 	addi	sp,sp,-12
  807aa4:	dc400115 	stw	r17,4(sp)
  807aa8:	dc000015 	stw	r16,0(sp)
  807aac:	dfc00215 	stw	ra,8(sp)
  807ab0:	2023883a 	mov	r17,r4
  807ab4:	2821883a 	mov	r16,r5
  807ab8:	18000226 	beq	r3,zero,807ac4 <__swsetup_r+0x30>
  807abc:	18800e17 	ldw	r2,56(r3)
  807ac0:	10001f26 	beq	r2,zero,807b40 <__swsetup_r+0xac>
  807ac4:	8100030b 	ldhu	r4,12(r16)
  807ac8:	2080020c 	andi	r2,r4,8
  807acc:	10002826 	beq	r2,zero,807b70 <__swsetup_r+0xdc>
  807ad0:	81400417 	ldw	r5,16(r16)
  807ad4:	28001d26 	beq	r5,zero,807b4c <__swsetup_r+0xb8>
  807ad8:	2080004c 	andi	r2,r4,1
  807adc:	1005003a 	cmpeq	r2,r2,zero
  807ae0:	10000b26 	beq	r2,zero,807b10 <__swsetup_r+0x7c>
  807ae4:	2080008c 	andi	r2,r4,2
  807ae8:	10001226 	beq	r2,zero,807b34 <__swsetup_r+0xa0>
  807aec:	0005883a 	mov	r2,zero
  807af0:	80800215 	stw	r2,8(r16)
  807af4:	28000b26 	beq	r5,zero,807b24 <__swsetup_r+0x90>
  807af8:	0005883a 	mov	r2,zero
  807afc:	dfc00217 	ldw	ra,8(sp)
  807b00:	dc400117 	ldw	r17,4(sp)
  807b04:	dc000017 	ldw	r16,0(sp)
  807b08:	dec00304 	addi	sp,sp,12
  807b0c:	f800283a 	ret
  807b10:	80800517 	ldw	r2,20(r16)
  807b14:	80000215 	stw	zero,8(r16)
  807b18:	0085c83a 	sub	r2,zero,r2
  807b1c:	80800615 	stw	r2,24(r16)
  807b20:	283ff51e 	bne	r5,zero,807af8 <__swsetup_r+0x64>
  807b24:	2080200c 	andi	r2,r4,128
  807b28:	103ff326 	beq	r2,zero,807af8 <__swsetup_r+0x64>
  807b2c:	00bfffc4 	movi	r2,-1
  807b30:	003ff206 	br	807afc <__swsetup_r+0x68>
  807b34:	80800517 	ldw	r2,20(r16)
  807b38:	80800215 	stw	r2,8(r16)
  807b3c:	003fed06 	br	807af4 <__swsetup_r+0x60>
  807b40:	1809883a 	mov	r4,r3
  807b44:	080162c0 	call	80162c <__sinit>
  807b48:	003fde06 	br	807ac4 <__swsetup_r+0x30>
  807b4c:	20c0a00c 	andi	r3,r4,640
  807b50:	00808004 	movi	r2,512
  807b54:	18bfe026 	beq	r3,r2,807ad8 <__swsetup_r+0x44>
  807b58:	8809883a 	mov	r4,r17
  807b5c:	800b883a 	mov	r5,r16
  807b60:	08029b40 	call	8029b4 <__smakebuf_r>
  807b64:	8100030b 	ldhu	r4,12(r16)
  807b68:	81400417 	ldw	r5,16(r16)
  807b6c:	003fda06 	br	807ad8 <__swsetup_r+0x44>
  807b70:	2080040c 	andi	r2,r4,16
  807b74:	103fed26 	beq	r2,zero,807b2c <__swsetup_r+0x98>
  807b78:	2080010c 	andi	r2,r4,4
  807b7c:	10001226 	beq	r2,zero,807bc8 <__swsetup_r+0x134>
  807b80:	81400c17 	ldw	r5,48(r16)
  807b84:	28000526 	beq	r5,zero,807b9c <__swsetup_r+0x108>
  807b88:	80801004 	addi	r2,r16,64
  807b8c:	28800226 	beq	r5,r2,807b98 <__swsetup_r+0x104>
  807b90:	8809883a 	mov	r4,r17
  807b94:	0801bb00 	call	801bb0 <_free_r>
  807b98:	80000c15 	stw	zero,48(r16)
  807b9c:	8080030b 	ldhu	r2,12(r16)
  807ba0:	81400417 	ldw	r5,16(r16)
  807ba4:	80000115 	stw	zero,4(r16)
  807ba8:	10bff6cc 	andi	r2,r2,65499
  807bac:	8080030d 	sth	r2,12(r16)
  807bb0:	81400015 	stw	r5,0(r16)
  807bb4:	8080030b 	ldhu	r2,12(r16)
  807bb8:	10800214 	ori	r2,r2,8
  807bbc:	113fffcc 	andi	r4,r2,65535
  807bc0:	8080030d 	sth	r2,12(r16)
  807bc4:	003fc306 	br	807ad4 <__swsetup_r+0x40>
  807bc8:	81400417 	ldw	r5,16(r16)
  807bcc:	003ff906 	br	807bb4 <__swsetup_r+0x120>

00807bd0 <_close_r>:
  807bd0:	defffd04 	addi	sp,sp,-12
  807bd4:	dc000015 	stw	r16,0(sp)
  807bd8:	040020b4 	movhi	r16,130
  807bdc:	8423a004 	addi	r16,r16,-29056
  807be0:	dc400115 	stw	r17,4(sp)
  807be4:	80000015 	stw	zero,0(r16)
  807be8:	2023883a 	mov	r17,r4
  807bec:	2809883a 	mov	r4,r5
  807bf0:	dfc00215 	stw	ra,8(sp)
  807bf4:	08107a80 	call	8107a8 <close>
  807bf8:	1007883a 	mov	r3,r2
  807bfc:	00bfffc4 	movi	r2,-1
  807c00:	18800626 	beq	r3,r2,807c1c <_close_r+0x4c>
  807c04:	1805883a 	mov	r2,r3
  807c08:	dfc00217 	ldw	ra,8(sp)
  807c0c:	dc400117 	ldw	r17,4(sp)
  807c10:	dc000017 	ldw	r16,0(sp)
  807c14:	dec00304 	addi	sp,sp,12
  807c18:	f800283a 	ret
  807c1c:	80800017 	ldw	r2,0(r16)
  807c20:	103ff826 	beq	r2,zero,807c04 <_close_r+0x34>
  807c24:	88800015 	stw	r2,0(r17)
  807c28:	1805883a 	mov	r2,r3
  807c2c:	dfc00217 	ldw	ra,8(sp)
  807c30:	dc400117 	ldw	r17,4(sp)
  807c34:	dc000017 	ldw	r16,0(sp)
  807c38:	dec00304 	addi	sp,sp,12
  807c3c:	f800283a 	ret

00807c40 <quorem>:
  807c40:	28c00417 	ldw	r3,16(r5)
  807c44:	20800417 	ldw	r2,16(r4)
  807c48:	defff604 	addi	sp,sp,-40
  807c4c:	ddc00715 	stw	r23,28(sp)
  807c50:	dd400515 	stw	r21,20(sp)
  807c54:	dfc00915 	stw	ra,36(sp)
  807c58:	df000815 	stw	fp,32(sp)
  807c5c:	dd800615 	stw	r22,24(sp)
  807c60:	dd000415 	stw	r20,16(sp)
  807c64:	dcc00315 	stw	r19,12(sp)
  807c68:	dc800215 	stw	r18,8(sp)
  807c6c:	dc400115 	stw	r17,4(sp)
  807c70:	dc000015 	stw	r16,0(sp)
  807c74:	202f883a 	mov	r23,r4
  807c78:	282b883a 	mov	r21,r5
  807c7c:	10c07416 	blt	r2,r3,807e50 <quorem+0x210>
  807c80:	1c7fffc4 	addi	r17,r3,-1
  807c84:	8c45883a 	add	r2,r17,r17
  807c88:	1085883a 	add	r2,r2,r2
  807c8c:	2c000504 	addi	r16,r5,20
  807c90:	24c00504 	addi	r19,r4,20
  807c94:	14ed883a 	add	r22,r2,r19
  807c98:	80a5883a 	add	r18,r16,r2
  807c9c:	b7000017 	ldw	fp,0(r22)
  807ca0:	91400017 	ldw	r5,0(r18)
  807ca4:	e009883a 	mov	r4,fp
  807ca8:	29400044 	addi	r5,r5,1
  807cac:	080fdb40 	call	80fdb4 <__udivsi3>
  807cb0:	1029883a 	mov	r20,r2
  807cb4:	10003c1e 	bne	r2,zero,807da8 <quorem+0x168>
  807cb8:	a80b883a 	mov	r5,r21
  807cbc:	b809883a 	mov	r4,r23
  807cc0:	0809b1c0 	call	809b1c <__mcmp>
  807cc4:	10002b16 	blt	r2,zero,807d74 <quorem+0x134>
  807cc8:	a5000044 	addi	r20,r20,1
  807ccc:	980f883a 	mov	r7,r19
  807cd0:	0011883a 	mov	r8,zero
  807cd4:	0009883a 	mov	r4,zero
  807cd8:	81400017 	ldw	r5,0(r16)
  807cdc:	38c00017 	ldw	r3,0(r7)
  807ce0:	84000104 	addi	r16,r16,4
  807ce4:	28bfffcc 	andi	r2,r5,65535
  807ce8:	2085883a 	add	r2,r4,r2
  807cec:	11bfffcc 	andi	r6,r2,65535
  807cf0:	193fffcc 	andi	r4,r3,65535
  807cf4:	1004d43a 	srli	r2,r2,16
  807cf8:	280ad43a 	srli	r5,r5,16
  807cfc:	2189c83a 	sub	r4,r4,r6
  807d00:	2209883a 	add	r4,r4,r8
  807d04:	1806d43a 	srli	r3,r3,16
  807d08:	288b883a 	add	r5,r5,r2
  807d0c:	200dd43a 	srai	r6,r4,16
  807d10:	28bfffcc 	andi	r2,r5,65535
  807d14:	1887c83a 	sub	r3,r3,r2
  807d18:	1987883a 	add	r3,r3,r6
  807d1c:	3900000d 	sth	r4,0(r7)
  807d20:	38c0008d 	sth	r3,2(r7)
  807d24:	2808d43a 	srli	r4,r5,16
  807d28:	39c00104 	addi	r7,r7,4
  807d2c:	1811d43a 	srai	r8,r3,16
  807d30:	943fe92e 	bgeu	r18,r16,807cd8 <quorem+0x98>
  807d34:	8c45883a 	add	r2,r17,r17
  807d38:	1085883a 	add	r2,r2,r2
  807d3c:	9885883a 	add	r2,r19,r2
  807d40:	10c00017 	ldw	r3,0(r2)
  807d44:	18000b1e 	bne	r3,zero,807d74 <quorem+0x134>
  807d48:	113fff04 	addi	r4,r2,-4
  807d4c:	9900082e 	bgeu	r19,r4,807d70 <quorem+0x130>
  807d50:	10bfff17 	ldw	r2,-4(r2)
  807d54:	10000326 	beq	r2,zero,807d64 <quorem+0x124>
  807d58:	00000506 	br	807d70 <quorem+0x130>
  807d5c:	20800017 	ldw	r2,0(r4)
  807d60:	1000031e 	bne	r2,zero,807d70 <quorem+0x130>
  807d64:	213fff04 	addi	r4,r4,-4
  807d68:	8c7fffc4 	addi	r17,r17,-1
  807d6c:	993ffb36 	bltu	r19,r4,807d5c <quorem+0x11c>
  807d70:	bc400415 	stw	r17,16(r23)
  807d74:	a005883a 	mov	r2,r20
  807d78:	dfc00917 	ldw	ra,36(sp)
  807d7c:	df000817 	ldw	fp,32(sp)
  807d80:	ddc00717 	ldw	r23,28(sp)
  807d84:	dd800617 	ldw	r22,24(sp)
  807d88:	dd400517 	ldw	r21,20(sp)
  807d8c:	dd000417 	ldw	r20,16(sp)
  807d90:	dcc00317 	ldw	r19,12(sp)
  807d94:	dc800217 	ldw	r18,8(sp)
  807d98:	dc400117 	ldw	r17,4(sp)
  807d9c:	dc000017 	ldw	r16,0(sp)
  807da0:	dec00a04 	addi	sp,sp,40
  807da4:	f800283a 	ret
  807da8:	980f883a 	mov	r7,r19
  807dac:	8011883a 	mov	r8,r16
  807db0:	0013883a 	mov	r9,zero
  807db4:	000d883a 	mov	r6,zero
  807db8:	40c00017 	ldw	r3,0(r8)
  807dbc:	39000017 	ldw	r4,0(r7)
  807dc0:	42000104 	addi	r8,r8,4
  807dc4:	18bfffcc 	andi	r2,r3,65535
  807dc8:	a085383a 	mul	r2,r20,r2
  807dcc:	1806d43a 	srli	r3,r3,16
  807dd0:	217fffcc 	andi	r5,r4,65535
  807dd4:	3085883a 	add	r2,r6,r2
  807dd8:	11bfffcc 	andi	r6,r2,65535
  807ddc:	a0c7383a 	mul	r3,r20,r3
  807de0:	1004d43a 	srli	r2,r2,16
  807de4:	298bc83a 	sub	r5,r5,r6
  807de8:	2a4b883a 	add	r5,r5,r9
  807dec:	2008d43a 	srli	r4,r4,16
  807df0:	1887883a 	add	r3,r3,r2
  807df4:	280dd43a 	srai	r6,r5,16
  807df8:	18bfffcc 	andi	r2,r3,65535
  807dfc:	2089c83a 	sub	r4,r4,r2
  807e00:	2189883a 	add	r4,r4,r6
  807e04:	3900008d 	sth	r4,2(r7)
  807e08:	3940000d 	sth	r5,0(r7)
  807e0c:	180cd43a 	srli	r6,r3,16
  807e10:	39c00104 	addi	r7,r7,4
  807e14:	2013d43a 	srai	r9,r4,16
  807e18:	923fe72e 	bgeu	r18,r8,807db8 <quorem+0x178>
  807e1c:	e03fa61e 	bne	fp,zero,807cb8 <quorem+0x78>
  807e20:	b0ffff04 	addi	r3,r22,-4
  807e24:	98c0082e 	bgeu	r19,r3,807e48 <quorem+0x208>
  807e28:	b0bfff17 	ldw	r2,-4(r22)
  807e2c:	10000326 	beq	r2,zero,807e3c <quorem+0x1fc>
  807e30:	00000506 	br	807e48 <quorem+0x208>
  807e34:	18800017 	ldw	r2,0(r3)
  807e38:	1000031e 	bne	r2,zero,807e48 <quorem+0x208>
  807e3c:	18ffff04 	addi	r3,r3,-4
  807e40:	8c7fffc4 	addi	r17,r17,-1
  807e44:	98fffb36 	bltu	r19,r3,807e34 <quorem+0x1f4>
  807e48:	bc400415 	stw	r17,16(r23)
  807e4c:	003f9a06 	br	807cb8 <quorem+0x78>
  807e50:	0005883a 	mov	r2,zero
  807e54:	003fc806 	br	807d78 <quorem+0x138>

00807e58 <_dtoa_r>:
  807e58:	22001017 	ldw	r8,64(r4)
  807e5c:	deffda04 	addi	sp,sp,-152
  807e60:	dd402115 	stw	r21,132(sp)
  807e64:	dd002015 	stw	r20,128(sp)
  807e68:	dc801e15 	stw	r18,120(sp)
  807e6c:	dc401d15 	stw	r17,116(sp)
  807e70:	dfc02515 	stw	ra,148(sp)
  807e74:	df002415 	stw	fp,144(sp)
  807e78:	ddc02315 	stw	r23,140(sp)
  807e7c:	dd802215 	stw	r22,136(sp)
  807e80:	dcc01f15 	stw	r19,124(sp)
  807e84:	dc001c15 	stw	r16,112(sp)
  807e88:	d9001615 	stw	r4,88(sp)
  807e8c:	3023883a 	mov	r17,r6
  807e90:	2829883a 	mov	r20,r5
  807e94:	d9c01715 	stw	r7,92(sp)
  807e98:	dc802817 	ldw	r18,160(sp)
  807e9c:	302b883a 	mov	r21,r6
  807ea0:	40000a26 	beq	r8,zero,807ecc <_dtoa_r+0x74>
  807ea4:	20801117 	ldw	r2,68(r4)
  807ea8:	400b883a 	mov	r5,r8
  807eac:	40800115 	stw	r2,4(r8)
  807eb0:	20c01117 	ldw	r3,68(r4)
  807eb4:	00800044 	movi	r2,1
  807eb8:	10c4983a 	sll	r2,r2,r3
  807ebc:	40800215 	stw	r2,8(r8)
  807ec0:	08099c00 	call	8099c0 <_Bfree>
  807ec4:	d8c01617 	ldw	r3,88(sp)
  807ec8:	18001015 	stw	zero,64(r3)
  807ecc:	8800a316 	blt	r17,zero,80815c <_dtoa_r+0x304>
  807ed0:	90000015 	stw	zero,0(r18)
  807ed4:	a8dffc2c 	andhi	r3,r21,32752
  807ed8:	009ffc34 	movhi	r2,32752
  807edc:	18809126 	beq	r3,r2,808124 <_dtoa_r+0x2cc>
  807ee0:	000d883a 	mov	r6,zero
  807ee4:	000f883a 	mov	r7,zero
  807ee8:	a009883a 	mov	r4,r20
  807eec:	a80b883a 	mov	r5,r21
  807ef0:	dd001215 	stw	r20,72(sp)
  807ef4:	dd401315 	stw	r21,76(sp)
  807ef8:	080f5f80 	call	80f5f8 <__nedf2>
  807efc:	1000171e 	bne	r2,zero,807f5c <_dtoa_r+0x104>
  807f00:	d9802717 	ldw	r6,156(sp)
  807f04:	00800044 	movi	r2,1
  807f08:	30800015 	stw	r2,0(r6)
  807f0c:	d8802917 	ldw	r2,164(sp)
  807f10:	10029b26 	beq	r2,zero,808980 <_dtoa_r+0xb28>
  807f14:	d9002917 	ldw	r4,164(sp)
  807f18:	00802074 	movhi	r2,129
  807f1c:	1093b444 	addi	r2,r2,20177
  807f20:	10ffffc4 	addi	r3,r2,-1
  807f24:	20800015 	stw	r2,0(r4)
  807f28:	1805883a 	mov	r2,r3
  807f2c:	dfc02517 	ldw	ra,148(sp)
  807f30:	df002417 	ldw	fp,144(sp)
  807f34:	ddc02317 	ldw	r23,140(sp)
  807f38:	dd802217 	ldw	r22,136(sp)
  807f3c:	dd402117 	ldw	r21,132(sp)
  807f40:	dd002017 	ldw	r20,128(sp)
  807f44:	dcc01f17 	ldw	r19,124(sp)
  807f48:	dc801e17 	ldw	r18,120(sp)
  807f4c:	dc401d17 	ldw	r17,116(sp)
  807f50:	dc001c17 	ldw	r16,112(sp)
  807f54:	dec02604 	addi	sp,sp,152
  807f58:	f800283a 	ret
  807f5c:	d9001617 	ldw	r4,88(sp)
  807f60:	d9401217 	ldw	r5,72(sp)
  807f64:	d8800104 	addi	r2,sp,4
  807f68:	a80d883a 	mov	r6,r21
  807f6c:	d9c00204 	addi	r7,sp,8
  807f70:	d8800015 	stw	r2,0(sp)
  807f74:	0809ffc0 	call	809ffc <__d2b>
  807f78:	d8800715 	stw	r2,28(sp)
  807f7c:	a804d53a 	srli	r2,r21,20
  807f80:	1101ffcc 	andi	r4,r2,2047
  807f84:	20008626 	beq	r4,zero,8081a0 <_dtoa_r+0x348>
  807f88:	d8c01217 	ldw	r3,72(sp)
  807f8c:	00800434 	movhi	r2,16
  807f90:	10bfffc4 	addi	r2,r2,-1
  807f94:	ddc00117 	ldw	r23,4(sp)
  807f98:	a884703a 	and	r2,r21,r2
  807f9c:	1811883a 	mov	r8,r3
  807fa0:	124ffc34 	orhi	r9,r2,16368
  807fa4:	25bf0044 	addi	r22,r4,-1023
  807fa8:	d8000815 	stw	zero,32(sp)
  807fac:	0005883a 	mov	r2,zero
  807fb0:	00cffe34 	movhi	r3,16376
  807fb4:	480b883a 	mov	r5,r9
  807fb8:	4009883a 	mov	r4,r8
  807fbc:	180f883a 	mov	r7,r3
  807fc0:	100d883a 	mov	r6,r2
  807fc4:	080ee600 	call	80ee60 <__subdf3>
  807fc8:	0218dbf4 	movhi	r8,25455
  807fcc:	4210d844 	addi	r8,r8,17249
  807fd0:	024ff4f4 	movhi	r9,16339
  807fd4:	4a61e9c4 	addi	r9,r9,-30809
  807fd8:	480f883a 	mov	r7,r9
  807fdc:	400d883a 	mov	r6,r8
  807fe0:	180b883a 	mov	r5,r3
  807fe4:	1009883a 	mov	r4,r2
  807fe8:	080ef540 	call	80ef54 <__muldf3>
  807fec:	0222d874 	movhi	r8,35681
  807ff0:	42322cc4 	addi	r8,r8,-14157
  807ff4:	024ff1f4 	movhi	r9,16327
  807ff8:	4a628a04 	addi	r9,r9,-30168
  807ffc:	480f883a 	mov	r7,r9
  808000:	400d883a 	mov	r6,r8
  808004:	180b883a 	mov	r5,r3
  808008:	1009883a 	mov	r4,r2
  80800c:	080eee00 	call	80eee0 <__adddf3>
  808010:	b009883a 	mov	r4,r22
  808014:	1021883a 	mov	r16,r2
  808018:	1823883a 	mov	r17,r3
  80801c:	080f8a00 	call	80f8a0 <__floatsidf>
  808020:	021427f4 	movhi	r8,20639
  808024:	421e7ec4 	addi	r8,r8,31227
  808028:	024ff4f4 	movhi	r9,16339
  80802c:	4a5104c4 	addi	r9,r9,17427
  808030:	480f883a 	mov	r7,r9
  808034:	400d883a 	mov	r6,r8
  808038:	180b883a 	mov	r5,r3
  80803c:	1009883a 	mov	r4,r2
  808040:	080ef540 	call	80ef54 <__muldf3>
  808044:	180f883a 	mov	r7,r3
  808048:	880b883a 	mov	r5,r17
  80804c:	100d883a 	mov	r6,r2
  808050:	8009883a 	mov	r4,r16
  808054:	080eee00 	call	80eee0 <__adddf3>
  808058:	1009883a 	mov	r4,r2
  80805c:	180b883a 	mov	r5,r3
  808060:	1021883a 	mov	r16,r2
  808064:	1823883a 	mov	r17,r3
  808068:	080f9980 	call	80f998 <__fixdfsi>
  80806c:	000d883a 	mov	r6,zero
  808070:	000f883a 	mov	r7,zero
  808074:	8009883a 	mov	r4,r16
  808078:	880b883a 	mov	r5,r17
  80807c:	d8800d15 	stw	r2,52(sp)
  808080:	080f7900 	call	80f790 <__ltdf2>
  808084:	10031716 	blt	r2,zero,808ce4 <_dtoa_r+0xe8c>
  808088:	d8c00d17 	ldw	r3,52(sp)
  80808c:	00800584 	movi	r2,22
  808090:	10c1482e 	bgeu	r2,r3,8085b4 <_dtoa_r+0x75c>
  808094:	01000044 	movi	r4,1
  808098:	d9000c15 	stw	r4,48(sp)
  80809c:	bd85c83a 	sub	r2,r23,r22
  8080a0:	11bfffc4 	addi	r6,r2,-1
  8080a4:	30030b16 	blt	r6,zero,808cd4 <_dtoa_r+0xe7c>
  8080a8:	d9800a15 	stw	r6,40(sp)
  8080ac:	d8001115 	stw	zero,68(sp)
  8080b0:	d8c00d17 	ldw	r3,52(sp)
  8080b4:	1802ff16 	blt	r3,zero,808cb4 <_dtoa_r+0xe5c>
  8080b8:	d9000a17 	ldw	r4,40(sp)
  8080bc:	d8c00915 	stw	r3,36(sp)
  8080c0:	d8001015 	stw	zero,64(sp)
  8080c4:	20c9883a 	add	r4,r4,r3
  8080c8:	d9000a15 	stw	r4,40(sp)
  8080cc:	d9001717 	ldw	r4,92(sp)
  8080d0:	00800244 	movi	r2,9
  8080d4:	11004636 	bltu	r2,r4,8081f0 <_dtoa_r+0x398>
  8080d8:	00800144 	movi	r2,5
  8080dc:	11020416 	blt	r2,r4,8088f0 <_dtoa_r+0xa98>
  8080e0:	04400044 	movi	r17,1
  8080e4:	d8c01717 	ldw	r3,92(sp)
  8080e8:	00800144 	movi	r2,5
  8080ec:	10c1ed36 	bltu	r2,r3,8088a4 <_dtoa_r+0xa4c>
  8080f0:	18c5883a 	add	r2,r3,r3
  8080f4:	1085883a 	add	r2,r2,r2
  8080f8:	00c02074 	movhi	r3,129
  8080fc:	18e04304 	addi	r3,r3,-32500
  808100:	10c5883a 	add	r2,r2,r3
  808104:	11000017 	ldw	r4,0(r2)
  808108:	2000683a 	jmp	r4
  80810c:	008081f8 	rdprs	r2,zero,519
  808110:	008081f8 	rdprs	r2,zero,519
  808114:	00808bf8 	rdprs	r2,zero,559
  808118:	00808bd0 	cmplti	r2,zero,559
  80811c:	00808c14 	movui	r2,560
  808120:	00808c20 	cmpeqi	r2,zero,560
  808124:	d9002717 	ldw	r4,156(sp)
  808128:	0089c3c4 	movi	r2,9999
  80812c:	20800015 	stw	r2,0(r4)
  808130:	a0001026 	beq	r20,zero,808174 <_dtoa_r+0x31c>
  808134:	00c02074 	movhi	r3,129
  808138:	18d46c04 	addi	r3,r3,20912
  80813c:	d9802917 	ldw	r6,164(sp)
  808140:	303f7926 	beq	r6,zero,807f28 <_dtoa_r+0xd0>
  808144:	188000c7 	ldb	r2,3(r3)
  808148:	190000c4 	addi	r4,r3,3
  80814c:	1000101e 	bne	r2,zero,808190 <_dtoa_r+0x338>
  808150:	d8802917 	ldw	r2,164(sp)
  808154:	11000015 	stw	r4,0(r2)
  808158:	003f7306 	br	807f28 <_dtoa_r+0xd0>
  80815c:	00a00034 	movhi	r2,32768
  808160:	10bfffc4 	addi	r2,r2,-1
  808164:	00c00044 	movi	r3,1
  808168:	88aa703a 	and	r21,r17,r2
  80816c:	90c00015 	stw	r3,0(r18)
  808170:	003f5806 	br	807ed4 <_dtoa_r+0x7c>
  808174:	00800434 	movhi	r2,16
  808178:	10bfffc4 	addi	r2,r2,-1
  80817c:	a884703a 	and	r2,r21,r2
  808180:	103fec1e 	bne	r2,zero,808134 <_dtoa_r+0x2dc>
  808184:	00c02074 	movhi	r3,129
  808188:	18d46904 	addi	r3,r3,20900
  80818c:	003feb06 	br	80813c <_dtoa_r+0x2e4>
  808190:	d8802917 	ldw	r2,164(sp)
  808194:	19000204 	addi	r4,r3,8
  808198:	11000015 	stw	r4,0(r2)
  80819c:	003f6206 	br	807f28 <_dtoa_r+0xd0>
  8081a0:	ddc00117 	ldw	r23,4(sp)
  8081a4:	d8800217 	ldw	r2,8(sp)
  8081a8:	01000804 	movi	r4,32
  8081ac:	b8c10c84 	addi	r3,r23,1074
  8081b0:	18a3883a 	add	r17,r3,r2
  8081b4:	2441b80e 	bge	r4,r17,808898 <_dtoa_r+0xa40>
  8081b8:	00c01004 	movi	r3,64
  8081bc:	1c47c83a 	sub	r3,r3,r17
  8081c0:	88bff804 	addi	r2,r17,-32
  8081c4:	a8c6983a 	sll	r3,r21,r3
  8081c8:	a084d83a 	srl	r2,r20,r2
  8081cc:	1888b03a 	or	r4,r3,r2
  8081d0:	080fae40 	call	80fae4 <__floatunsidf>
  8081d4:	1011883a 	mov	r8,r2
  8081d8:	00bf8434 	movhi	r2,65040
  8081dc:	01000044 	movi	r4,1
  8081e0:	10d3883a 	add	r9,r2,r3
  8081e4:	8dbef344 	addi	r22,r17,-1075
  8081e8:	d9000815 	stw	r4,32(sp)
  8081ec:	003f6f06 	br	807fac <_dtoa_r+0x154>
  8081f0:	d8001715 	stw	zero,92(sp)
  8081f4:	04400044 	movi	r17,1
  8081f8:	00bfffc4 	movi	r2,-1
  8081fc:	00c00044 	movi	r3,1
  808200:	d8800e15 	stw	r2,56(sp)
  808204:	d8002615 	stw	zero,152(sp)
  808208:	d8800f15 	stw	r2,60(sp)
  80820c:	d8c00b15 	stw	r3,44(sp)
  808210:	1021883a 	mov	r16,r2
  808214:	d8801617 	ldw	r2,88(sp)
  808218:	10001115 	stw	zero,68(r2)
  80821c:	d8801617 	ldw	r2,88(sp)
  808220:	11401117 	ldw	r5,68(r2)
  808224:	1009883a 	mov	r4,r2
  808228:	0809f400 	call	809f40 <_Balloc>
  80822c:	d8c01617 	ldw	r3,88(sp)
  808230:	d8800515 	stw	r2,20(sp)
  808234:	18801015 	stw	r2,64(r3)
  808238:	00800384 	movi	r2,14
  80823c:	14006836 	bltu	r2,r16,8083e0 <_dtoa_r+0x588>
  808240:	8805003a 	cmpeq	r2,r17,zero
  808244:	1000661e 	bne	r2,zero,8083e0 <_dtoa_r+0x588>
  808248:	d9000d17 	ldw	r4,52(sp)
  80824c:	0102300e 	bge	zero,r4,808b10 <_dtoa_r+0xcb8>
  808250:	208003cc 	andi	r2,r4,15
  808254:	100490fa 	slli	r2,r2,3
  808258:	2025d13a 	srai	r18,r4,4
  80825c:	00c02074 	movhi	r3,129
  808260:	18d47d04 	addi	r3,r3,20980
  808264:	10c5883a 	add	r2,r2,r3
  808268:	90c0040c 	andi	r3,r18,16
  80826c:	14000017 	ldw	r16,0(r2)
  808270:	14400117 	ldw	r17,4(r2)
  808274:	18036a1e 	bne	r3,zero,809020 <_dtoa_r+0x11c8>
  808278:	05800084 	movi	r22,2
  80827c:	90001026 	beq	r18,zero,8082c0 <_dtoa_r+0x468>
  808280:	04c02074 	movhi	r19,129
  808284:	9cd4af04 	addi	r19,r19,21180
  808288:	9080004c 	andi	r2,r18,1
  80828c:	1005003a 	cmpeq	r2,r2,zero
  808290:	1000081e 	bne	r2,zero,8082b4 <_dtoa_r+0x45c>
  808294:	99800017 	ldw	r6,0(r19)
  808298:	99c00117 	ldw	r7,4(r19)
  80829c:	880b883a 	mov	r5,r17
  8082a0:	8009883a 	mov	r4,r16
  8082a4:	080ef540 	call	80ef54 <__muldf3>
  8082a8:	1021883a 	mov	r16,r2
  8082ac:	b5800044 	addi	r22,r22,1
  8082b0:	1823883a 	mov	r17,r3
  8082b4:	9025d07a 	srai	r18,r18,1
  8082b8:	9cc00204 	addi	r19,r19,8
  8082bc:	903ff21e 	bne	r18,zero,808288 <_dtoa_r+0x430>
  8082c0:	a80b883a 	mov	r5,r21
  8082c4:	a009883a 	mov	r4,r20
  8082c8:	880f883a 	mov	r7,r17
  8082cc:	800d883a 	mov	r6,r16
  8082d0:	080f3180 	call	80f318 <__divdf3>
  8082d4:	1029883a 	mov	r20,r2
  8082d8:	182b883a 	mov	r21,r3
  8082dc:	d8c00c17 	ldw	r3,48(sp)
  8082e0:	1805003a 	cmpeq	r2,r3,zero
  8082e4:	1000081e 	bne	r2,zero,808308 <_dtoa_r+0x4b0>
  8082e8:	0005883a 	mov	r2,zero
  8082ec:	00cffc34 	movhi	r3,16368
  8082f0:	180f883a 	mov	r7,r3
  8082f4:	a009883a 	mov	r4,r20
  8082f8:	a80b883a 	mov	r5,r21
  8082fc:	100d883a 	mov	r6,r2
  808300:	080f7900 	call	80f790 <__ltdf2>
  808304:	1003fe16 	blt	r2,zero,809300 <_dtoa_r+0x14a8>
  808308:	b009883a 	mov	r4,r22
  80830c:	080f8a00 	call	80f8a0 <__floatsidf>
  808310:	180b883a 	mov	r5,r3
  808314:	1009883a 	mov	r4,r2
  808318:	a00d883a 	mov	r6,r20
  80831c:	a80f883a 	mov	r7,r21
  808320:	080ef540 	call	80ef54 <__muldf3>
  808324:	0011883a 	mov	r8,zero
  808328:	02500734 	movhi	r9,16412
  80832c:	1009883a 	mov	r4,r2
  808330:	180b883a 	mov	r5,r3
  808334:	480f883a 	mov	r7,r9
  808338:	400d883a 	mov	r6,r8
  80833c:	080eee00 	call	80eee0 <__adddf3>
  808340:	d9000f17 	ldw	r4,60(sp)
  808344:	102d883a 	mov	r22,r2
  808348:	00bf3034 	movhi	r2,64704
  80834c:	18b9883a 	add	fp,r3,r2
  808350:	e02f883a 	mov	r23,fp
  808354:	20028f1e 	bne	r4,zero,808d94 <_dtoa_r+0xf3c>
  808358:	0005883a 	mov	r2,zero
  80835c:	00d00534 	movhi	r3,16404
  808360:	a009883a 	mov	r4,r20
  808364:	a80b883a 	mov	r5,r21
  808368:	180f883a 	mov	r7,r3
  80836c:	100d883a 	mov	r6,r2
  808370:	080ee600 	call	80ee60 <__subdf3>
  808374:	1009883a 	mov	r4,r2
  808378:	e00f883a 	mov	r7,fp
  80837c:	180b883a 	mov	r5,r3
  808380:	b00d883a 	mov	r6,r22
  808384:	1025883a 	mov	r18,r2
  808388:	1827883a 	mov	r19,r3
  80838c:	080f6800 	call	80f680 <__gtdf2>
  808390:	00834f16 	blt	zero,r2,8090d0 <_dtoa_r+0x1278>
  808394:	e0e0003c 	xorhi	r3,fp,32768
  808398:	9009883a 	mov	r4,r18
  80839c:	980b883a 	mov	r5,r19
  8083a0:	180f883a 	mov	r7,r3
  8083a4:	b00d883a 	mov	r6,r22
  8083a8:	080f7900 	call	80f790 <__ltdf2>
  8083ac:	1000080e 	bge	r2,zero,8083d0 <_dtoa_r+0x578>
  8083b0:	0027883a 	mov	r19,zero
  8083b4:	0025883a 	mov	r18,zero
  8083b8:	d8802617 	ldw	r2,152(sp)
  8083bc:	df000517 	ldw	fp,20(sp)
  8083c0:	d8000615 	stw	zero,24(sp)
  8083c4:	0084303a 	nor	r2,zero,r2
  8083c8:	d8800d15 	stw	r2,52(sp)
  8083cc:	00019b06 	br	808a3c <_dtoa_r+0xbe4>
  8083d0:	d9801217 	ldw	r6,72(sp)
  8083d4:	d8801317 	ldw	r2,76(sp)
  8083d8:	3029883a 	mov	r20,r6
  8083dc:	102b883a 	mov	r21,r2
  8083e0:	d8c00217 	ldw	r3,8(sp)
  8083e4:	18008516 	blt	r3,zero,8085fc <_dtoa_r+0x7a4>
  8083e8:	d9000d17 	ldw	r4,52(sp)
  8083ec:	00800384 	movi	r2,14
  8083f0:	11008216 	blt	r2,r4,8085fc <_dtoa_r+0x7a4>
  8083f4:	200490fa 	slli	r2,r4,3
  8083f8:	d9802617 	ldw	r6,152(sp)
  8083fc:	00c02074 	movhi	r3,129
  808400:	18d47d04 	addi	r3,r3,20980
  808404:	10c5883a 	add	r2,r2,r3
  808408:	14800017 	ldw	r18,0(r2)
  80840c:	14c00117 	ldw	r19,4(r2)
  808410:	30031e16 	blt	r6,zero,80908c <_dtoa_r+0x1234>
  808414:	d9000517 	ldw	r4,20(sp)
  808418:	d8c00f17 	ldw	r3,60(sp)
  80841c:	a823883a 	mov	r17,r21
  808420:	a021883a 	mov	r16,r20
  808424:	192b883a 	add	r21,r3,r4
  808428:	2039883a 	mov	fp,r4
  80842c:	00000f06 	br	80846c <_dtoa_r+0x614>
  808430:	0005883a 	mov	r2,zero
  808434:	00d00934 	movhi	r3,16420
  808438:	5009883a 	mov	r4,r10
  80843c:	580b883a 	mov	r5,r11
  808440:	180f883a 	mov	r7,r3
  808444:	100d883a 	mov	r6,r2
  808448:	080ef540 	call	80ef54 <__muldf3>
  80844c:	180b883a 	mov	r5,r3
  808450:	000d883a 	mov	r6,zero
  808454:	000f883a 	mov	r7,zero
  808458:	1009883a 	mov	r4,r2
  80845c:	1021883a 	mov	r16,r2
  808460:	1823883a 	mov	r17,r3
  808464:	080f5f80 	call	80f5f8 <__nedf2>
  808468:	10004526 	beq	r2,zero,808580 <_dtoa_r+0x728>
  80846c:	900d883a 	mov	r6,r18
  808470:	980f883a 	mov	r7,r19
  808474:	8009883a 	mov	r4,r16
  808478:	880b883a 	mov	r5,r17
  80847c:	080f3180 	call	80f318 <__divdf3>
  808480:	180b883a 	mov	r5,r3
  808484:	1009883a 	mov	r4,r2
  808488:	080f9980 	call	80f998 <__fixdfsi>
  80848c:	1009883a 	mov	r4,r2
  808490:	1029883a 	mov	r20,r2
  808494:	080f8a00 	call	80f8a0 <__floatsidf>
  808498:	180f883a 	mov	r7,r3
  80849c:	9009883a 	mov	r4,r18
  8084a0:	980b883a 	mov	r5,r19
  8084a4:	100d883a 	mov	r6,r2
  8084a8:	080ef540 	call	80ef54 <__muldf3>
  8084ac:	180f883a 	mov	r7,r3
  8084b0:	880b883a 	mov	r5,r17
  8084b4:	8009883a 	mov	r4,r16
  8084b8:	100d883a 	mov	r6,r2
  8084bc:	080ee600 	call	80ee60 <__subdf3>
  8084c0:	1015883a 	mov	r10,r2
  8084c4:	a0800c04 	addi	r2,r20,48
  8084c8:	e0800005 	stb	r2,0(fp)
  8084cc:	e7000044 	addi	fp,fp,1
  8084d0:	1817883a 	mov	r11,r3
  8084d4:	e57fd61e 	bne	fp,r21,808430 <_dtoa_r+0x5d8>
  8084d8:	500d883a 	mov	r6,r10
  8084dc:	180f883a 	mov	r7,r3
  8084e0:	5009883a 	mov	r4,r10
  8084e4:	180b883a 	mov	r5,r3
  8084e8:	080eee00 	call	80eee0 <__adddf3>
  8084ec:	100d883a 	mov	r6,r2
  8084f0:	9009883a 	mov	r4,r18
  8084f4:	980b883a 	mov	r5,r19
  8084f8:	180f883a 	mov	r7,r3
  8084fc:	1021883a 	mov	r16,r2
  808500:	1823883a 	mov	r17,r3
  808504:	080f7900 	call	80f790 <__ltdf2>
  808508:	10000816 	blt	r2,zero,80852c <_dtoa_r+0x6d4>
  80850c:	980b883a 	mov	r5,r19
  808510:	800d883a 	mov	r6,r16
  808514:	880f883a 	mov	r7,r17
  808518:	9009883a 	mov	r4,r18
  80851c:	080f5700 	call	80f570 <__eqdf2>
  808520:	1000171e 	bne	r2,zero,808580 <_dtoa_r+0x728>
  808524:	a080004c 	andi	r2,r20,1
  808528:	10001526 	beq	r2,zero,808580 <_dtoa_r+0x728>
  80852c:	d8800d17 	ldw	r2,52(sp)
  808530:	d8800415 	stw	r2,16(sp)
  808534:	e009883a 	mov	r4,fp
  808538:	213fffc4 	addi	r4,r4,-1
  80853c:	20c00007 	ldb	r3,0(r4)
  808540:	00800e44 	movi	r2,57
  808544:	1880081e 	bne	r3,r2,808568 <_dtoa_r+0x710>
  808548:	d8800517 	ldw	r2,20(sp)
  80854c:	113ffa1e 	bne	r2,r4,808538 <_dtoa_r+0x6e0>
  808550:	d8c00417 	ldw	r3,16(sp)
  808554:	d9800517 	ldw	r6,20(sp)
  808558:	00800c04 	movi	r2,48
  80855c:	18c00044 	addi	r3,r3,1
  808560:	d8c00415 	stw	r3,16(sp)
  808564:	30800005 	stb	r2,0(r6)
  808568:	20800003 	ldbu	r2,0(r4)
  80856c:	d8c00417 	ldw	r3,16(sp)
  808570:	27000044 	addi	fp,r4,1
  808574:	10800044 	addi	r2,r2,1
  808578:	d8c00d15 	stw	r3,52(sp)
  80857c:	20800005 	stb	r2,0(r4)
  808580:	d9001617 	ldw	r4,88(sp)
  808584:	d9400717 	ldw	r5,28(sp)
  808588:	08099c00 	call	8099c0 <_Bfree>
  80858c:	e0000005 	stb	zero,0(fp)
  808590:	d9800d17 	ldw	r6,52(sp)
  808594:	d8c02717 	ldw	r3,156(sp)
  808598:	d9002917 	ldw	r4,164(sp)
  80859c:	30800044 	addi	r2,r6,1
  8085a0:	18800015 	stw	r2,0(r3)
  8085a4:	20029c26 	beq	r4,zero,809018 <_dtoa_r+0x11c0>
  8085a8:	d8c00517 	ldw	r3,20(sp)
  8085ac:	27000015 	stw	fp,0(r4)
  8085b0:	003e5d06 	br	807f28 <_dtoa_r+0xd0>
  8085b4:	d9800d17 	ldw	r6,52(sp)
  8085b8:	00c02074 	movhi	r3,129
  8085bc:	18d47d04 	addi	r3,r3,20980
  8085c0:	d9001217 	ldw	r4,72(sp)
  8085c4:	300490fa 	slli	r2,r6,3
  8085c8:	d9401317 	ldw	r5,76(sp)
  8085cc:	10c5883a 	add	r2,r2,r3
  8085d0:	12000017 	ldw	r8,0(r2)
  8085d4:	12400117 	ldw	r9,4(r2)
  8085d8:	400d883a 	mov	r6,r8
  8085dc:	480f883a 	mov	r7,r9
  8085e0:	080f7900 	call	80f790 <__ltdf2>
  8085e4:	1000030e 	bge	r2,zero,8085f4 <_dtoa_r+0x79c>
  8085e8:	d8800d17 	ldw	r2,52(sp)
  8085ec:	10bfffc4 	addi	r2,r2,-1
  8085f0:	d8800d15 	stw	r2,52(sp)
  8085f4:	d8000c15 	stw	zero,48(sp)
  8085f8:	003ea806 	br	80809c <_dtoa_r+0x244>
  8085fc:	d9000b17 	ldw	r4,44(sp)
  808600:	202cc03a 	cmpne	r22,r4,zero
  808604:	b000c71e 	bne	r22,zero,808924 <_dtoa_r+0xacc>
  808608:	dc001117 	ldw	r16,68(sp)
  80860c:	dc801017 	ldw	r18,64(sp)
  808610:	0027883a 	mov	r19,zero
  808614:	04000b0e 	bge	zero,r16,808644 <_dtoa_r+0x7ec>
  808618:	d8c00a17 	ldw	r3,40(sp)
  80861c:	00c0090e 	bge	zero,r3,808644 <_dtoa_r+0x7ec>
  808620:	8005883a 	mov	r2,r16
  808624:	1c011316 	blt	r3,r16,808a74 <_dtoa_r+0xc1c>
  808628:	d9000a17 	ldw	r4,40(sp)
  80862c:	d9801117 	ldw	r6,68(sp)
  808630:	80a1c83a 	sub	r16,r16,r2
  808634:	2089c83a 	sub	r4,r4,r2
  808638:	308dc83a 	sub	r6,r6,r2
  80863c:	d9000a15 	stw	r4,40(sp)
  808640:	d9801115 	stw	r6,68(sp)
  808644:	d8801017 	ldw	r2,64(sp)
  808648:	0080150e 	bge	zero,r2,8086a0 <_dtoa_r+0x848>
  80864c:	d8c00b17 	ldw	r3,44(sp)
  808650:	1805003a 	cmpeq	r2,r3,zero
  808654:	1001c91e 	bne	r2,zero,808d7c <_dtoa_r+0xf24>
  808658:	04800e0e 	bge	zero,r18,808694 <_dtoa_r+0x83c>
  80865c:	d9001617 	ldw	r4,88(sp)
  808660:	980b883a 	mov	r5,r19
  808664:	900d883a 	mov	r6,r18
  808668:	080a7740 	call	80a774 <__pow5mult>
  80866c:	d9001617 	ldw	r4,88(sp)
  808670:	d9800717 	ldw	r6,28(sp)
  808674:	100b883a 	mov	r5,r2
  808678:	1027883a 	mov	r19,r2
  80867c:	080a4500 	call	80a450 <__multiply>
  808680:	d9001617 	ldw	r4,88(sp)
  808684:	d9400717 	ldw	r5,28(sp)
  808688:	1023883a 	mov	r17,r2
  80868c:	08099c00 	call	8099c0 <_Bfree>
  808690:	dc400715 	stw	r17,28(sp)
  808694:	d9001017 	ldw	r4,64(sp)
  808698:	248dc83a 	sub	r6,r4,r18
  80869c:	30010e1e 	bne	r6,zero,808ad8 <_dtoa_r+0xc80>
  8086a0:	d9001617 	ldw	r4,88(sp)
  8086a4:	04400044 	movi	r17,1
  8086a8:	880b883a 	mov	r5,r17
  8086ac:	080a6380 	call	80a638 <__i2b>
  8086b0:	d9800917 	ldw	r6,36(sp)
  8086b4:	1025883a 	mov	r18,r2
  8086b8:	0180040e 	bge	zero,r6,8086cc <_dtoa_r+0x874>
  8086bc:	d9001617 	ldw	r4,88(sp)
  8086c0:	100b883a 	mov	r5,r2
  8086c4:	080a7740 	call	80a774 <__pow5mult>
  8086c8:	1025883a 	mov	r18,r2
  8086cc:	d8801717 	ldw	r2,92(sp)
  8086d0:	8880f30e 	bge	r17,r2,808aa0 <_dtoa_r+0xc48>
  8086d4:	0023883a 	mov	r17,zero
  8086d8:	d9800917 	ldw	r6,36(sp)
  8086dc:	30019e1e 	bne	r6,zero,808d58 <_dtoa_r+0xf00>
  8086e0:	00c00044 	movi	r3,1
  8086e4:	d9000a17 	ldw	r4,40(sp)
  8086e8:	20c5883a 	add	r2,r4,r3
  8086ec:	10c007cc 	andi	r3,r2,31
  8086f0:	1800841e 	bne	r3,zero,808904 <_dtoa_r+0xaac>
  8086f4:	00800704 	movi	r2,28
  8086f8:	d9000a17 	ldw	r4,40(sp)
  8086fc:	d9801117 	ldw	r6,68(sp)
  808700:	80a1883a 	add	r16,r16,r2
  808704:	2089883a 	add	r4,r4,r2
  808708:	308d883a 	add	r6,r6,r2
  80870c:	d9000a15 	stw	r4,40(sp)
  808710:	d9801115 	stw	r6,68(sp)
  808714:	d8801117 	ldw	r2,68(sp)
  808718:	0080050e 	bge	zero,r2,808730 <_dtoa_r+0x8d8>
  80871c:	d9400717 	ldw	r5,28(sp)
  808720:	d9001617 	ldw	r4,88(sp)
  808724:	100d883a 	mov	r6,r2
  808728:	080a3040 	call	80a304 <__lshift>
  80872c:	d8800715 	stw	r2,28(sp)
  808730:	d8c00a17 	ldw	r3,40(sp)
  808734:	00c0050e 	bge	zero,r3,80874c <_dtoa_r+0x8f4>
  808738:	d9001617 	ldw	r4,88(sp)
  80873c:	900b883a 	mov	r5,r18
  808740:	180d883a 	mov	r6,r3
  808744:	080a3040 	call	80a304 <__lshift>
  808748:	1025883a 	mov	r18,r2
  80874c:	d9000c17 	ldw	r4,48(sp)
  808750:	2005003a 	cmpeq	r2,r4,zero
  808754:	10016f26 	beq	r2,zero,808d14 <_dtoa_r+0xebc>
  808758:	d9000f17 	ldw	r4,60(sp)
  80875c:	0102170e 	bge	zero,r4,808fbc <_dtoa_r+0x1164>
  808760:	d9800b17 	ldw	r6,44(sp)
  808764:	3005003a 	cmpeq	r2,r6,zero
  808768:	1000881e 	bne	r2,zero,80898c <_dtoa_r+0xb34>
  80876c:	0400050e 	bge	zero,r16,808784 <_dtoa_r+0x92c>
  808770:	d9001617 	ldw	r4,88(sp)
  808774:	980b883a 	mov	r5,r19
  808778:	800d883a 	mov	r6,r16
  80877c:	080a3040 	call	80a304 <__lshift>
  808780:	1027883a 	mov	r19,r2
  808784:	8804c03a 	cmpne	r2,r17,zero
  808788:	1002541e 	bne	r2,zero,8090dc <_dtoa_r+0x1284>
  80878c:	980b883a 	mov	r5,r19
  808790:	dd800517 	ldw	r22,20(sp)
  808794:	dcc00615 	stw	r19,24(sp)
  808798:	a700004c 	andi	fp,r20,1
  80879c:	2827883a 	mov	r19,r5
  8087a0:	d9000717 	ldw	r4,28(sp)
  8087a4:	900b883a 	mov	r5,r18
  8087a8:	0807c400 	call	807c40 <quorem>
  8087ac:	d9000717 	ldw	r4,28(sp)
  8087b0:	d9400617 	ldw	r5,24(sp)
  8087b4:	1023883a 	mov	r17,r2
  8087b8:	8dc00c04 	addi	r23,r17,48
  8087bc:	0809b1c0 	call	809b1c <__mcmp>
  8087c0:	d9001617 	ldw	r4,88(sp)
  8087c4:	900b883a 	mov	r5,r18
  8087c8:	980d883a 	mov	r6,r19
  8087cc:	1029883a 	mov	r20,r2
  8087d0:	080a1780 	call	80a178 <__mdiff>
  8087d4:	102b883a 	mov	r21,r2
  8087d8:	10800317 	ldw	r2,12(r2)
  8087dc:	1001281e 	bne	r2,zero,808c80 <_dtoa_r+0xe28>
  8087e0:	d9000717 	ldw	r4,28(sp)
  8087e4:	a80b883a 	mov	r5,r21
  8087e8:	0809b1c0 	call	809b1c <__mcmp>
  8087ec:	d9001617 	ldw	r4,88(sp)
  8087f0:	1021883a 	mov	r16,r2
  8087f4:	a80b883a 	mov	r5,r21
  8087f8:	08099c00 	call	8099c0 <_Bfree>
  8087fc:	8000041e 	bne	r16,zero,808810 <_dtoa_r+0x9b8>
  808800:	d8801717 	ldw	r2,92(sp)
  808804:	1000021e 	bne	r2,zero,808810 <_dtoa_r+0x9b8>
  808808:	e004c03a 	cmpne	r2,fp,zero
  80880c:	10011726 	beq	r2,zero,808c6c <_dtoa_r+0xe14>
  808810:	a0010616 	blt	r20,zero,808c2c <_dtoa_r+0xdd4>
  808814:	a000041e 	bne	r20,zero,808828 <_dtoa_r+0x9d0>
  808818:	d8c01717 	ldw	r3,92(sp)
  80881c:	1800021e 	bne	r3,zero,808828 <_dtoa_r+0x9d0>
  808820:	e004c03a 	cmpne	r2,fp,zero
  808824:	10010126 	beq	r2,zero,808c2c <_dtoa_r+0xdd4>
  808828:	04023d16 	blt	zero,r16,809120 <_dtoa_r+0x12c8>
  80882c:	b5c00005 	stb	r23,0(r22)
  808830:	d9800517 	ldw	r6,20(sp)
  808834:	d9000f17 	ldw	r4,60(sp)
  808838:	b5800044 	addi	r22,r22,1
  80883c:	3105883a 	add	r2,r6,r4
  808840:	b0806526 	beq	r22,r2,8089d8 <_dtoa_r+0xb80>
  808844:	d9400717 	ldw	r5,28(sp)
  808848:	d9001617 	ldw	r4,88(sp)
  80884c:	01800284 	movi	r6,10
  808850:	000f883a 	mov	r7,zero
  808854:	080a6740 	call	80a674 <__multadd>
  808858:	d8800715 	stw	r2,28(sp)
  80885c:	d8800617 	ldw	r2,24(sp)
  808860:	14c10c26 	beq	r2,r19,808c94 <_dtoa_r+0xe3c>
  808864:	d9400617 	ldw	r5,24(sp)
  808868:	d9001617 	ldw	r4,88(sp)
  80886c:	01800284 	movi	r6,10
  808870:	000f883a 	mov	r7,zero
  808874:	080a6740 	call	80a674 <__multadd>
  808878:	d9001617 	ldw	r4,88(sp)
  80887c:	980b883a 	mov	r5,r19
  808880:	01800284 	movi	r6,10
  808884:	000f883a 	mov	r7,zero
  808888:	d8800615 	stw	r2,24(sp)
  80888c:	080a6740 	call	80a674 <__multadd>
  808890:	1027883a 	mov	r19,r2
  808894:	003fc206 	br	8087a0 <_dtoa_r+0x948>
  808898:	2445c83a 	sub	r2,r4,r17
  80889c:	a088983a 	sll	r4,r20,r2
  8088a0:	003e4b06 	br	8081d0 <_dtoa_r+0x378>
  8088a4:	01bfffc4 	movi	r6,-1
  8088a8:	00800044 	movi	r2,1
  8088ac:	d9800e15 	stw	r6,56(sp)
  8088b0:	d9800f15 	stw	r6,60(sp)
  8088b4:	d8800b15 	stw	r2,44(sp)
  8088b8:	d8c01617 	ldw	r3,88(sp)
  8088bc:	008005c4 	movi	r2,23
  8088c0:	18001115 	stw	zero,68(r3)
  8088c4:	1580082e 	bgeu	r2,r22,8088e8 <_dtoa_r+0xa90>
  8088c8:	00c00104 	movi	r3,4
  8088cc:	0009883a 	mov	r4,zero
  8088d0:	18c7883a 	add	r3,r3,r3
  8088d4:	18800504 	addi	r2,r3,20
  8088d8:	21000044 	addi	r4,r4,1
  8088dc:	b0bffc2e 	bgeu	r22,r2,8088d0 <_dtoa_r+0xa78>
  8088e0:	d9801617 	ldw	r6,88(sp)
  8088e4:	31001115 	stw	r4,68(r6)
  8088e8:	dc000f17 	ldw	r16,60(sp)
  8088ec:	003e4b06 	br	80821c <_dtoa_r+0x3c4>
  8088f0:	d9801717 	ldw	r6,92(sp)
  8088f4:	0023883a 	mov	r17,zero
  8088f8:	31bfff04 	addi	r6,r6,-4
  8088fc:	d9801715 	stw	r6,92(sp)
  808900:	003df806 	br	8080e4 <_dtoa_r+0x28c>
  808904:	00800804 	movi	r2,32
  808908:	10c9c83a 	sub	r4,r2,r3
  80890c:	00c00104 	movi	r3,4
  808910:	19005a16 	blt	r3,r4,808a7c <_dtoa_r+0xc24>
  808914:	008000c4 	movi	r2,3
  808918:	113f7e16 	blt	r2,r4,808714 <_dtoa_r+0x8bc>
  80891c:	20800704 	addi	r2,r4,28
  808920:	003f7506 	br	8086f8 <_dtoa_r+0x8a0>
  808924:	d9801717 	ldw	r6,92(sp)
  808928:	00800044 	movi	r2,1
  80892c:	1180a10e 	bge	r2,r6,808bb4 <_dtoa_r+0xd5c>
  808930:	d9800f17 	ldw	r6,60(sp)
  808934:	d8c01017 	ldw	r3,64(sp)
  808938:	30bfffc4 	addi	r2,r6,-1
  80893c:	1881c616 	blt	r3,r2,809058 <_dtoa_r+0x1200>
  808940:	18a5c83a 	sub	r18,r3,r2
  808944:	d8800f17 	ldw	r2,60(sp)
  808948:	10026216 	blt	r2,zero,8092d4 <_dtoa_r+0x147c>
  80894c:	dc001117 	ldw	r16,68(sp)
  808950:	1007883a 	mov	r3,r2
  808954:	d9800a17 	ldw	r6,40(sp)
  808958:	d8801117 	ldw	r2,68(sp)
  80895c:	d9001617 	ldw	r4,88(sp)
  808960:	30cd883a 	add	r6,r6,r3
  808964:	10c5883a 	add	r2,r2,r3
  808968:	01400044 	movi	r5,1
  80896c:	d9800a15 	stw	r6,40(sp)
  808970:	d8801115 	stw	r2,68(sp)
  808974:	080a6380 	call	80a638 <__i2b>
  808978:	1027883a 	mov	r19,r2
  80897c:	003f2506 	br	808614 <_dtoa_r+0x7bc>
  808980:	00c02074 	movhi	r3,129
  808984:	18d3b404 	addi	r3,r3,20176
  808988:	003d6706 	br	807f28 <_dtoa_r+0xd0>
  80898c:	dd800517 	ldw	r22,20(sp)
  808990:	04000044 	movi	r16,1
  808994:	00000706 	br	8089b4 <_dtoa_r+0xb5c>
  808998:	d9400717 	ldw	r5,28(sp)
  80899c:	d9001617 	ldw	r4,88(sp)
  8089a0:	01800284 	movi	r6,10
  8089a4:	000f883a 	mov	r7,zero
  8089a8:	080a6740 	call	80a674 <__multadd>
  8089ac:	d8800715 	stw	r2,28(sp)
  8089b0:	84000044 	addi	r16,r16,1
  8089b4:	d9000717 	ldw	r4,28(sp)
  8089b8:	900b883a 	mov	r5,r18
  8089bc:	0807c400 	call	807c40 <quorem>
  8089c0:	15c00c04 	addi	r23,r2,48
  8089c4:	b5c00005 	stb	r23,0(r22)
  8089c8:	d8c00f17 	ldw	r3,60(sp)
  8089cc:	b5800044 	addi	r22,r22,1
  8089d0:	80fff116 	blt	r16,r3,808998 <_dtoa_r+0xb40>
  8089d4:	d8000615 	stw	zero,24(sp)
  8089d8:	d9400717 	ldw	r5,28(sp)
  8089dc:	d9001617 	ldw	r4,88(sp)
  8089e0:	01800044 	movi	r6,1
  8089e4:	080a3040 	call	80a304 <__lshift>
  8089e8:	1009883a 	mov	r4,r2
  8089ec:	900b883a 	mov	r5,r18
  8089f0:	d8800715 	stw	r2,28(sp)
  8089f4:	0809b1c0 	call	809b1c <__mcmp>
  8089f8:	00803c0e 	bge	zero,r2,808aec <_dtoa_r+0xc94>
  8089fc:	b009883a 	mov	r4,r22
  808a00:	213fffc4 	addi	r4,r4,-1
  808a04:	21400003 	ldbu	r5,0(r4)
  808a08:	00800e44 	movi	r2,57
  808a0c:	28c03fcc 	andi	r3,r5,255
  808a10:	18c0201c 	xori	r3,r3,128
  808a14:	18ffe004 	addi	r3,r3,-128
  808a18:	1881981e 	bne	r3,r2,80907c <_dtoa_r+0x1224>
  808a1c:	d9800517 	ldw	r6,20(sp)
  808a20:	21bff71e 	bne	r4,r6,808a00 <_dtoa_r+0xba8>
  808a24:	d8800d17 	ldw	r2,52(sp)
  808a28:	37000044 	addi	fp,r6,1
  808a2c:	10800044 	addi	r2,r2,1
  808a30:	d8800d15 	stw	r2,52(sp)
  808a34:	00800c44 	movi	r2,49
  808a38:	30800005 	stb	r2,0(r6)
  808a3c:	d9001617 	ldw	r4,88(sp)
  808a40:	900b883a 	mov	r5,r18
  808a44:	08099c00 	call	8099c0 <_Bfree>
  808a48:	983ecd26 	beq	r19,zero,808580 <_dtoa_r+0x728>
  808a4c:	d8c00617 	ldw	r3,24(sp)
  808a50:	18000426 	beq	r3,zero,808a64 <_dtoa_r+0xc0c>
  808a54:	1cc00326 	beq	r3,r19,808a64 <_dtoa_r+0xc0c>
  808a58:	d9001617 	ldw	r4,88(sp)
  808a5c:	180b883a 	mov	r5,r3
  808a60:	08099c00 	call	8099c0 <_Bfree>
  808a64:	d9001617 	ldw	r4,88(sp)
  808a68:	980b883a 	mov	r5,r19
  808a6c:	08099c00 	call	8099c0 <_Bfree>
  808a70:	003ec306 	br	808580 <_dtoa_r+0x728>
  808a74:	1805883a 	mov	r2,r3
  808a78:	003eeb06 	br	808628 <_dtoa_r+0x7d0>
  808a7c:	d9800a17 	ldw	r6,40(sp)
  808a80:	d8c01117 	ldw	r3,68(sp)
  808a84:	20bfff04 	addi	r2,r4,-4
  808a88:	308d883a 	add	r6,r6,r2
  808a8c:	1887883a 	add	r3,r3,r2
  808a90:	80a1883a 	add	r16,r16,r2
  808a94:	d9800a15 	stw	r6,40(sp)
  808a98:	d8c01115 	stw	r3,68(sp)
  808a9c:	003f1d06 	br	808714 <_dtoa_r+0x8bc>
  808aa0:	a03f0c1e 	bne	r20,zero,8086d4 <_dtoa_r+0x87c>
  808aa4:	00800434 	movhi	r2,16
  808aa8:	10bfffc4 	addi	r2,r2,-1
  808aac:	a884703a 	and	r2,r21,r2
  808ab0:	103f081e 	bne	r2,zero,8086d4 <_dtoa_r+0x87c>
  808ab4:	a89ffc2c 	andhi	r2,r21,32752
  808ab8:	103f0626 	beq	r2,zero,8086d4 <_dtoa_r+0x87c>
  808abc:	d8c01117 	ldw	r3,68(sp)
  808ac0:	d9000a17 	ldw	r4,40(sp)
  808ac4:	18c00044 	addi	r3,r3,1
  808ac8:	21000044 	addi	r4,r4,1
  808acc:	d8c01115 	stw	r3,68(sp)
  808ad0:	d9000a15 	stw	r4,40(sp)
  808ad4:	003f0006 	br	8086d8 <_dtoa_r+0x880>
  808ad8:	d9400717 	ldw	r5,28(sp)
  808adc:	d9001617 	ldw	r4,88(sp)
  808ae0:	080a7740 	call	80a774 <__pow5mult>
  808ae4:	d8800715 	stw	r2,28(sp)
  808ae8:	003eed06 	br	8086a0 <_dtoa_r+0x848>
  808aec:	1000021e 	bne	r2,zero,808af8 <_dtoa_r+0xca0>
  808af0:	b880004c 	andi	r2,r23,1
  808af4:	103fc11e 	bne	r2,zero,8089fc <_dtoa_r+0xba4>
  808af8:	b5bfffc4 	addi	r22,r22,-1
  808afc:	b0c00007 	ldb	r3,0(r22)
  808b00:	00800c04 	movi	r2,48
  808b04:	18bffc26 	beq	r3,r2,808af8 <_dtoa_r+0xca0>
  808b08:	b7000044 	addi	fp,r22,1
  808b0c:	003fcb06 	br	808a3c <_dtoa_r+0xbe4>
  808b10:	d9800d17 	ldw	r6,52(sp)
  808b14:	018fc83a 	sub	r7,zero,r6
  808b18:	3801f726 	beq	r7,zero,8092f8 <_dtoa_r+0x14a0>
  808b1c:	398003cc 	andi	r6,r7,15
  808b20:	300c90fa 	slli	r6,r6,3
  808b24:	01402074 	movhi	r5,129
  808b28:	29547d04 	addi	r5,r5,20980
  808b2c:	d9001217 	ldw	r4,72(sp)
  808b30:	314d883a 	add	r6,r6,r5
  808b34:	30c00117 	ldw	r3,4(r6)
  808b38:	30800017 	ldw	r2,0(r6)
  808b3c:	d9401317 	ldw	r5,76(sp)
  808b40:	3821d13a 	srai	r16,r7,4
  808b44:	100d883a 	mov	r6,r2
  808b48:	180f883a 	mov	r7,r3
  808b4c:	080ef540 	call	80ef54 <__muldf3>
  808b50:	1011883a 	mov	r8,r2
  808b54:	1813883a 	mov	r9,r3
  808b58:	1029883a 	mov	r20,r2
  808b5c:	182b883a 	mov	r21,r3
  808b60:	8001e526 	beq	r16,zero,8092f8 <_dtoa_r+0x14a0>
  808b64:	05800084 	movi	r22,2
  808b68:	04402074 	movhi	r17,129
  808b6c:	8c54af04 	addi	r17,r17,21180
  808b70:	8080004c 	andi	r2,r16,1
  808b74:	1005003a 	cmpeq	r2,r2,zero
  808b78:	1000081e 	bne	r2,zero,808b9c <_dtoa_r+0xd44>
  808b7c:	89800017 	ldw	r6,0(r17)
  808b80:	89c00117 	ldw	r7,4(r17)
  808b84:	480b883a 	mov	r5,r9
  808b88:	4009883a 	mov	r4,r8
  808b8c:	080ef540 	call	80ef54 <__muldf3>
  808b90:	1011883a 	mov	r8,r2
  808b94:	b5800044 	addi	r22,r22,1
  808b98:	1813883a 	mov	r9,r3
  808b9c:	8021d07a 	srai	r16,r16,1
  808ba0:	8c400204 	addi	r17,r17,8
  808ba4:	803ff21e 	bne	r16,zero,808b70 <_dtoa_r+0xd18>
  808ba8:	4029883a 	mov	r20,r8
  808bac:	482b883a 	mov	r21,r9
  808bb0:	003dca06 	br	8082dc <_dtoa_r+0x484>
  808bb4:	d9000817 	ldw	r4,32(sp)
  808bb8:	2005003a 	cmpeq	r2,r4,zero
  808bbc:	1001f61e 	bne	r2,zero,809398 <_dtoa_r+0x1540>
  808bc0:	dc001117 	ldw	r16,68(sp)
  808bc4:	dc801017 	ldw	r18,64(sp)
  808bc8:	18c10cc4 	addi	r3,r3,1075
  808bcc:	003f6106 	br	808954 <_dtoa_r+0xafc>
  808bd0:	d8000b15 	stw	zero,44(sp)
  808bd4:	d9802617 	ldw	r6,152(sp)
  808bd8:	d8c00d17 	ldw	r3,52(sp)
  808bdc:	30800044 	addi	r2,r6,1
  808be0:	18ad883a 	add	r22,r3,r2
  808be4:	b13fffc4 	addi	r4,r22,-1
  808be8:	d9000e15 	stw	r4,56(sp)
  808bec:	0581f60e 	bge	zero,r22,8093c8 <_dtoa_r+0x1570>
  808bf0:	dd800f15 	stw	r22,60(sp)
  808bf4:	003f3006 	br	8088b8 <_dtoa_r+0xa60>
  808bf8:	d8000b15 	stw	zero,44(sp)
  808bfc:	d9002617 	ldw	r4,152(sp)
  808c00:	0101eb0e 	bge	zero,r4,8093b0 <_dtoa_r+0x1558>
  808c04:	202d883a 	mov	r22,r4
  808c08:	d9000e15 	stw	r4,56(sp)
  808c0c:	d9000f15 	stw	r4,60(sp)
  808c10:	003f2906 	br	8088b8 <_dtoa_r+0xa60>
  808c14:	01800044 	movi	r6,1
  808c18:	d9800b15 	stw	r6,44(sp)
  808c1c:	003ff706 	br	808bfc <_dtoa_r+0xda4>
  808c20:	01000044 	movi	r4,1
  808c24:	d9000b15 	stw	r4,44(sp)
  808c28:	003fea06 	br	808bd4 <_dtoa_r+0xd7c>
  808c2c:	04000c0e 	bge	zero,r16,808c60 <_dtoa_r+0xe08>
  808c30:	d9400717 	ldw	r5,28(sp)
  808c34:	d9001617 	ldw	r4,88(sp)
  808c38:	01800044 	movi	r6,1
  808c3c:	080a3040 	call	80a304 <__lshift>
  808c40:	1009883a 	mov	r4,r2
  808c44:	900b883a 	mov	r5,r18
  808c48:	d8800715 	stw	r2,28(sp)
  808c4c:	0809b1c0 	call	809b1c <__mcmp>
  808c50:	0081e00e 	bge	zero,r2,8093d4 <_dtoa_r+0x157c>
  808c54:	bdc00044 	addi	r23,r23,1
  808c58:	00800e84 	movi	r2,58
  808c5c:	b881a226 	beq	r23,r2,8092e8 <_dtoa_r+0x1490>
  808c60:	b7000044 	addi	fp,r22,1
  808c64:	b5c00005 	stb	r23,0(r22)
  808c68:	003f7406 	br	808a3c <_dtoa_r+0xbe4>
  808c6c:	00800e44 	movi	r2,57
  808c70:	b8819d26 	beq	r23,r2,8092e8 <_dtoa_r+0x1490>
  808c74:	053ffa0e 	bge	zero,r20,808c60 <_dtoa_r+0xe08>
  808c78:	8dc00c44 	addi	r23,r17,49
  808c7c:	003ff806 	br	808c60 <_dtoa_r+0xe08>
  808c80:	d9001617 	ldw	r4,88(sp)
  808c84:	a80b883a 	mov	r5,r21
  808c88:	04000044 	movi	r16,1
  808c8c:	08099c00 	call	8099c0 <_Bfree>
  808c90:	003edf06 	br	808810 <_dtoa_r+0x9b8>
  808c94:	d9001617 	ldw	r4,88(sp)
  808c98:	980b883a 	mov	r5,r19
  808c9c:	01800284 	movi	r6,10
  808ca0:	000f883a 	mov	r7,zero
  808ca4:	080a6740 	call	80a674 <__multadd>
  808ca8:	1027883a 	mov	r19,r2
  808cac:	d8800615 	stw	r2,24(sp)
  808cb0:	003ebb06 	br	8087a0 <_dtoa_r+0x948>
  808cb4:	d9801117 	ldw	r6,68(sp)
  808cb8:	d8800d17 	ldw	r2,52(sp)
  808cbc:	d8000915 	stw	zero,36(sp)
  808cc0:	308dc83a 	sub	r6,r6,r2
  808cc4:	0087c83a 	sub	r3,zero,r2
  808cc8:	d9801115 	stw	r6,68(sp)
  808ccc:	d8c01015 	stw	r3,64(sp)
  808cd0:	003cfe06 	br	8080cc <_dtoa_r+0x274>
  808cd4:	018dc83a 	sub	r6,zero,r6
  808cd8:	d9801115 	stw	r6,68(sp)
  808cdc:	d8000a15 	stw	zero,40(sp)
  808ce0:	003cf306 	br	8080b0 <_dtoa_r+0x258>
  808ce4:	d9000d17 	ldw	r4,52(sp)
  808ce8:	080f8a00 	call	80f8a0 <__floatsidf>
  808cec:	880b883a 	mov	r5,r17
  808cf0:	8009883a 	mov	r4,r16
  808cf4:	180f883a 	mov	r7,r3
  808cf8:	100d883a 	mov	r6,r2
  808cfc:	080f5f80 	call	80f5f8 <__nedf2>
  808d00:	103ce126 	beq	r2,zero,808088 <_dtoa_r+0x230>
  808d04:	d9800d17 	ldw	r6,52(sp)
  808d08:	31bfffc4 	addi	r6,r6,-1
  808d0c:	d9800d15 	stw	r6,52(sp)
  808d10:	003cdd06 	br	808088 <_dtoa_r+0x230>
  808d14:	d9000717 	ldw	r4,28(sp)
  808d18:	900b883a 	mov	r5,r18
  808d1c:	0809b1c0 	call	809b1c <__mcmp>
  808d20:	103e8d0e 	bge	r2,zero,808758 <_dtoa_r+0x900>
  808d24:	d9400717 	ldw	r5,28(sp)
  808d28:	d9001617 	ldw	r4,88(sp)
  808d2c:	01800284 	movi	r6,10
  808d30:	000f883a 	mov	r7,zero
  808d34:	080a6740 	call	80a674 <__multadd>
  808d38:	d9800d17 	ldw	r6,52(sp)
  808d3c:	d8800715 	stw	r2,28(sp)
  808d40:	31bfffc4 	addi	r6,r6,-1
  808d44:	d9800d15 	stw	r6,52(sp)
  808d48:	b001a71e 	bne	r22,zero,8093e8 <_dtoa_r+0x1590>
  808d4c:	d8800e17 	ldw	r2,56(sp)
  808d50:	d8800f15 	stw	r2,60(sp)
  808d54:	003e8006 	br	808758 <_dtoa_r+0x900>
  808d58:	90800417 	ldw	r2,16(r18)
  808d5c:	1085883a 	add	r2,r2,r2
  808d60:	1085883a 	add	r2,r2,r2
  808d64:	1485883a 	add	r2,r2,r18
  808d68:	11000417 	ldw	r4,16(r2)
  808d6c:	08099e80 	call	8099e8 <__hi0bits>
  808d70:	00c00804 	movi	r3,32
  808d74:	1887c83a 	sub	r3,r3,r2
  808d78:	003e5a06 	br	8086e4 <_dtoa_r+0x88c>
  808d7c:	d9400717 	ldw	r5,28(sp)
  808d80:	d9801017 	ldw	r6,64(sp)
  808d84:	d9001617 	ldw	r4,88(sp)
  808d88:	080a7740 	call	80a774 <__pow5mult>
  808d8c:	d8800715 	stw	r2,28(sp)
  808d90:	003e4306 	br	8086a0 <_dtoa_r+0x848>
  808d94:	d9800f17 	ldw	r6,60(sp)
  808d98:	d8800d17 	ldw	r2,52(sp)
  808d9c:	d9800315 	stw	r6,12(sp)
  808da0:	d8800415 	stw	r2,16(sp)
  808da4:	d8c00b17 	ldw	r3,44(sp)
  808da8:	1805003a 	cmpeq	r2,r3,zero
  808dac:	1000e21e 	bne	r2,zero,809138 <_dtoa_r+0x12e0>
  808db0:	d9000317 	ldw	r4,12(sp)
  808db4:	0005883a 	mov	r2,zero
  808db8:	00cff834 	movhi	r3,16352
  808dbc:	200c90fa 	slli	r6,r4,3
  808dc0:	01002074 	movhi	r4,129
  808dc4:	21147d04 	addi	r4,r4,20980
  808dc8:	180b883a 	mov	r5,r3
  808dcc:	310d883a 	add	r6,r6,r4
  808dd0:	327fff17 	ldw	r9,-4(r6)
  808dd4:	323ffe17 	ldw	r8,-8(r6)
  808dd8:	1009883a 	mov	r4,r2
  808ddc:	480f883a 	mov	r7,r9
  808de0:	400d883a 	mov	r6,r8
  808de4:	080f3180 	call	80f318 <__divdf3>
  808de8:	180b883a 	mov	r5,r3
  808dec:	b00d883a 	mov	r6,r22
  808df0:	b80f883a 	mov	r7,r23
  808df4:	1009883a 	mov	r4,r2
  808df8:	080ee600 	call	80ee60 <__subdf3>
  808dfc:	a80b883a 	mov	r5,r21
  808e00:	a009883a 	mov	r4,r20
  808e04:	d8c01915 	stw	r3,100(sp)
  808e08:	d8801815 	stw	r2,96(sp)
  808e0c:	080f9980 	call	80f998 <__fixdfsi>
  808e10:	1009883a 	mov	r4,r2
  808e14:	1027883a 	mov	r19,r2
  808e18:	080f8a00 	call	80f8a0 <__floatsidf>
  808e1c:	a80b883a 	mov	r5,r21
  808e20:	a009883a 	mov	r4,r20
  808e24:	180f883a 	mov	r7,r3
  808e28:	100d883a 	mov	r6,r2
  808e2c:	080ee600 	call	80ee60 <__subdf3>
  808e30:	d9801817 	ldw	r6,96(sp)
  808e34:	1823883a 	mov	r17,r3
  808e38:	d8801415 	stw	r2,80(sp)
  808e3c:	302d883a 	mov	r22,r6
  808e40:	d9800517 	ldw	r6,20(sp)
  808e44:	9cc00c04 	addi	r19,r19,48
  808e48:	dc401515 	stw	r17,84(sp)
  808e4c:	d8c01917 	ldw	r3,100(sp)
  808e50:	34c00005 	stb	r19,0(r6)
  808e54:	d8800517 	ldw	r2,20(sp)
  808e58:	d9401917 	ldw	r5,100(sp)
  808e5c:	d9801417 	ldw	r6,80(sp)
  808e60:	b009883a 	mov	r4,r22
  808e64:	880f883a 	mov	r7,r17
  808e68:	182f883a 	mov	r23,r3
  808e6c:	17000044 	addi	fp,r2,1
  808e70:	080f6800 	call	80f680 <__gtdf2>
  808e74:	00804e16 	blt	zero,r2,808fb0 <_dtoa_r+0x1158>
  808e78:	d9801417 	ldw	r6,80(sp)
  808e7c:	0005883a 	mov	r2,zero
  808e80:	00cffc34 	movhi	r3,16368
  808e84:	180b883a 	mov	r5,r3
  808e88:	880f883a 	mov	r7,r17
  808e8c:	1009883a 	mov	r4,r2
  808e90:	080ee600 	call	80ee60 <__subdf3>
  808e94:	d9401917 	ldw	r5,100(sp)
  808e98:	180f883a 	mov	r7,r3
  808e9c:	b009883a 	mov	r4,r22
  808ea0:	100d883a 	mov	r6,r2
  808ea4:	080f6800 	call	80f680 <__gtdf2>
  808ea8:	00bda216 	blt	zero,r2,808534 <_dtoa_r+0x6dc>
  808eac:	d8c00317 	ldw	r3,12(sp)
  808eb0:	00800044 	movi	r2,1
  808eb4:	10c01216 	blt	r2,r3,808f00 <_dtoa_r+0x10a8>
  808eb8:	003d4506 	br	8083d0 <_dtoa_r+0x578>
  808ebc:	d9801417 	ldw	r6,80(sp)
  808ec0:	0005883a 	mov	r2,zero
  808ec4:	00cffc34 	movhi	r3,16368
  808ec8:	180b883a 	mov	r5,r3
  808ecc:	880f883a 	mov	r7,r17
  808ed0:	1009883a 	mov	r4,r2
  808ed4:	080ee600 	call	80ee60 <__subdf3>
  808ed8:	d9c01b17 	ldw	r7,108(sp)
  808edc:	180b883a 	mov	r5,r3
  808ee0:	1009883a 	mov	r4,r2
  808ee4:	b00d883a 	mov	r6,r22
  808ee8:	080f7900 	call	80f790 <__ltdf2>
  808eec:	103d9116 	blt	r2,zero,808534 <_dtoa_r+0x6dc>
  808ef0:	d9800517 	ldw	r6,20(sp)
  808ef4:	d9000317 	ldw	r4,12(sp)
  808ef8:	3105883a 	add	r2,r6,r4
  808efc:	e0bd3426 	beq	fp,r2,8083d0 <_dtoa_r+0x578>
  808f00:	04500934 	movhi	r17,16420
  808f04:	0021883a 	mov	r16,zero
  808f08:	b80b883a 	mov	r5,r23
  808f0c:	b009883a 	mov	r4,r22
  808f10:	800d883a 	mov	r6,r16
  808f14:	880f883a 	mov	r7,r17
  808f18:	080ef540 	call	80ef54 <__muldf3>
  808f1c:	d9401517 	ldw	r5,84(sp)
  808f20:	d9001417 	ldw	r4,80(sp)
  808f24:	880f883a 	mov	r7,r17
  808f28:	000d883a 	mov	r6,zero
  808f2c:	d8801a15 	stw	r2,104(sp)
  808f30:	d8c01b15 	stw	r3,108(sp)
  808f34:	080ef540 	call	80ef54 <__muldf3>
  808f38:	180b883a 	mov	r5,r3
  808f3c:	1009883a 	mov	r4,r2
  808f40:	1823883a 	mov	r17,r3
  808f44:	1021883a 	mov	r16,r2
  808f48:	080f9980 	call	80f998 <__fixdfsi>
  808f4c:	1009883a 	mov	r4,r2
  808f50:	102b883a 	mov	r21,r2
  808f54:	080f8a00 	call	80f8a0 <__floatsidf>
  808f58:	880b883a 	mov	r5,r17
  808f5c:	8009883a 	mov	r4,r16
  808f60:	180f883a 	mov	r7,r3
  808f64:	100d883a 	mov	r6,r2
  808f68:	080ee600 	call	80ee60 <__subdf3>
  808f6c:	1021883a 	mov	r16,r2
  808f70:	d9001b17 	ldw	r4,108(sp)
  808f74:	1823883a 	mov	r17,r3
  808f78:	dc001415 	stw	r16,80(sp)
  808f7c:	ad400c04 	addi	r21,r21,48
  808f80:	dc401515 	stw	r17,84(sp)
  808f84:	d8801a17 	ldw	r2,104(sp)
  808f88:	e5400005 	stb	r21,0(fp)
  808f8c:	202f883a 	mov	r23,r4
  808f90:	d9c01b17 	ldw	r7,108(sp)
  808f94:	d9001417 	ldw	r4,80(sp)
  808f98:	880b883a 	mov	r5,r17
  808f9c:	100d883a 	mov	r6,r2
  808fa0:	102d883a 	mov	r22,r2
  808fa4:	e7000044 	addi	fp,fp,1
  808fa8:	080f7900 	call	80f790 <__ltdf2>
  808fac:	103fc30e 	bge	r2,zero,808ebc <_dtoa_r+0x1064>
  808fb0:	d9000417 	ldw	r4,16(sp)
  808fb4:	d9000d15 	stw	r4,52(sp)
  808fb8:	003d7106 	br	808580 <_dtoa_r+0x728>
  808fbc:	d9801717 	ldw	r6,92(sp)
  808fc0:	00800084 	movi	r2,2
  808fc4:	11bde60e 	bge	r2,r6,808760 <_dtoa_r+0x908>
  808fc8:	203cfb1e 	bne	r4,zero,8083b8 <_dtoa_r+0x560>
  808fcc:	d9001617 	ldw	r4,88(sp)
  808fd0:	900b883a 	mov	r5,r18
  808fd4:	01800144 	movi	r6,5
  808fd8:	000f883a 	mov	r7,zero
  808fdc:	080a6740 	call	80a674 <__multadd>
  808fe0:	d9000717 	ldw	r4,28(sp)
  808fe4:	100b883a 	mov	r5,r2
  808fe8:	1025883a 	mov	r18,r2
  808fec:	0809b1c0 	call	809b1c <__mcmp>
  808ff0:	00bcf10e 	bge	zero,r2,8083b8 <_dtoa_r+0x560>
  808ff4:	d8c00d17 	ldw	r3,52(sp)
  808ff8:	d9000517 	ldw	r4,20(sp)
  808ffc:	d8000615 	stw	zero,24(sp)
  809000:	18c00044 	addi	r3,r3,1
  809004:	d8c00d15 	stw	r3,52(sp)
  809008:	00800c44 	movi	r2,49
  80900c:	27000044 	addi	fp,r4,1
  809010:	20800005 	stb	r2,0(r4)
  809014:	003e8906 	br	808a3c <_dtoa_r+0xbe4>
  809018:	d8c00517 	ldw	r3,20(sp)
  80901c:	003bc206 	br	807f28 <_dtoa_r+0xd0>
  809020:	01802074 	movhi	r6,129
  809024:	3194af04 	addi	r6,r6,21180
  809028:	30c00917 	ldw	r3,36(r6)
  80902c:	30800817 	ldw	r2,32(r6)
  809030:	d9001217 	ldw	r4,72(sp)
  809034:	d9401317 	ldw	r5,76(sp)
  809038:	180f883a 	mov	r7,r3
  80903c:	100d883a 	mov	r6,r2
  809040:	080f3180 	call	80f318 <__divdf3>
  809044:	948003cc 	andi	r18,r18,15
  809048:	058000c4 	movi	r22,3
  80904c:	1029883a 	mov	r20,r2
  809050:	182b883a 	mov	r21,r3
  809054:	003c8906 	br	80827c <_dtoa_r+0x424>
  809058:	d9001017 	ldw	r4,64(sp)
  80905c:	d9800917 	ldw	r6,36(sp)
  809060:	0025883a 	mov	r18,zero
  809064:	1105c83a 	sub	r2,r2,r4
  809068:	2089883a 	add	r4,r4,r2
  80906c:	308d883a 	add	r6,r6,r2
  809070:	d9001015 	stw	r4,64(sp)
  809074:	d9800915 	stw	r6,36(sp)
  809078:	003e3206 	br	808944 <_dtoa_r+0xaec>
  80907c:	28800044 	addi	r2,r5,1
  809080:	27000044 	addi	fp,r4,1
  809084:	20800005 	stb	r2,0(r4)
  809088:	003e6c06 	br	808a3c <_dtoa_r+0xbe4>
  80908c:	d8800f17 	ldw	r2,60(sp)
  809090:	00bce016 	blt	zero,r2,808414 <_dtoa_r+0x5bc>
  809094:	d9800f17 	ldw	r6,60(sp)
  809098:	303cc51e 	bne	r6,zero,8083b0 <_dtoa_r+0x558>
  80909c:	0005883a 	mov	r2,zero
  8090a0:	00d00534 	movhi	r3,16404
  8090a4:	980b883a 	mov	r5,r19
  8090a8:	180f883a 	mov	r7,r3
  8090ac:	9009883a 	mov	r4,r18
  8090b0:	100d883a 	mov	r6,r2
  8090b4:	080ef540 	call	80ef54 <__muldf3>
  8090b8:	180b883a 	mov	r5,r3
  8090bc:	a80f883a 	mov	r7,r21
  8090c0:	1009883a 	mov	r4,r2
  8090c4:	a00d883a 	mov	r6,r20
  8090c8:	080f7080 	call	80f708 <__gedf2>
  8090cc:	103cb80e 	bge	r2,zero,8083b0 <_dtoa_r+0x558>
  8090d0:	0027883a 	mov	r19,zero
  8090d4:	0025883a 	mov	r18,zero
  8090d8:	003fc606 	br	808ff4 <_dtoa_r+0x119c>
  8090dc:	99400117 	ldw	r5,4(r19)
  8090e0:	d9001617 	ldw	r4,88(sp)
  8090e4:	0809f400 	call	809f40 <_Balloc>
  8090e8:	99800417 	ldw	r6,16(r19)
  8090ec:	11000304 	addi	r4,r2,12
  8090f0:	99400304 	addi	r5,r19,12
  8090f4:	318d883a 	add	r6,r6,r6
  8090f8:	318d883a 	add	r6,r6,r6
  8090fc:	31800204 	addi	r6,r6,8
  809100:	1023883a 	mov	r17,r2
  809104:	080336c0 	call	80336c <memcpy>
  809108:	d9001617 	ldw	r4,88(sp)
  80910c:	880b883a 	mov	r5,r17
  809110:	01800044 	movi	r6,1
  809114:	080a3040 	call	80a304 <__lshift>
  809118:	100b883a 	mov	r5,r2
  80911c:	003d9c06 	br	808790 <_dtoa_r+0x938>
  809120:	00800e44 	movi	r2,57
  809124:	b8807026 	beq	r23,r2,8092e8 <_dtoa_r+0x1490>
  809128:	b8800044 	addi	r2,r23,1
  80912c:	b7000044 	addi	fp,r22,1
  809130:	b0800005 	stb	r2,0(r22)
  809134:	003e4106 	br	808a3c <_dtoa_r+0xbe4>
  809138:	d8800317 	ldw	r2,12(sp)
  80913c:	01802074 	movhi	r6,129
  809140:	31947d04 	addi	r6,r6,20980
  809144:	b009883a 	mov	r4,r22
  809148:	100e90fa 	slli	r7,r2,3
  80914c:	b80b883a 	mov	r5,r23
  809150:	398f883a 	add	r7,r7,r6
  809154:	38bffe17 	ldw	r2,-8(r7)
  809158:	d9800517 	ldw	r6,20(sp)
  80915c:	38ffff17 	ldw	r3,-4(r7)
  809160:	37000044 	addi	fp,r6,1
  809164:	180f883a 	mov	r7,r3
  809168:	100d883a 	mov	r6,r2
  80916c:	080ef540 	call	80ef54 <__muldf3>
  809170:	a80b883a 	mov	r5,r21
  809174:	a009883a 	mov	r4,r20
  809178:	182f883a 	mov	r23,r3
  80917c:	102d883a 	mov	r22,r2
  809180:	080f9980 	call	80f998 <__fixdfsi>
  809184:	1009883a 	mov	r4,r2
  809188:	1027883a 	mov	r19,r2
  80918c:	080f8a00 	call	80f8a0 <__floatsidf>
  809190:	a80b883a 	mov	r5,r21
  809194:	a009883a 	mov	r4,r20
  809198:	180f883a 	mov	r7,r3
  80919c:	100d883a 	mov	r6,r2
  8091a0:	080ee600 	call	80ee60 <__subdf3>
  8091a4:	180b883a 	mov	r5,r3
  8091a8:	d8c00517 	ldw	r3,20(sp)
  8091ac:	9cc00c04 	addi	r19,r19,48
  8091b0:	1009883a 	mov	r4,r2
  8091b4:	1cc00005 	stb	r19,0(r3)
  8091b8:	2021883a 	mov	r16,r4
  8091bc:	d9000317 	ldw	r4,12(sp)
  8091c0:	00800044 	movi	r2,1
  8091c4:	2823883a 	mov	r17,r5
  8091c8:	20802226 	beq	r4,r2,809254 <_dtoa_r+0x13fc>
  8091cc:	1029883a 	mov	r20,r2
  8091d0:	0005883a 	mov	r2,zero
  8091d4:	00d00934 	movhi	r3,16420
  8091d8:	180f883a 	mov	r7,r3
  8091dc:	100d883a 	mov	r6,r2
  8091e0:	880b883a 	mov	r5,r17
  8091e4:	8009883a 	mov	r4,r16
  8091e8:	080ef540 	call	80ef54 <__muldf3>
  8091ec:	180b883a 	mov	r5,r3
  8091f0:	1009883a 	mov	r4,r2
  8091f4:	1823883a 	mov	r17,r3
  8091f8:	1021883a 	mov	r16,r2
  8091fc:	080f9980 	call	80f998 <__fixdfsi>
  809200:	1009883a 	mov	r4,r2
  809204:	102b883a 	mov	r21,r2
  809208:	080f8a00 	call	80f8a0 <__floatsidf>
  80920c:	880b883a 	mov	r5,r17
  809210:	8009883a 	mov	r4,r16
  809214:	180f883a 	mov	r7,r3
  809218:	100d883a 	mov	r6,r2
  80921c:	080ee600 	call	80ee60 <__subdf3>
  809220:	180b883a 	mov	r5,r3
  809224:	d8c00517 	ldw	r3,20(sp)
  809228:	1009883a 	mov	r4,r2
  80922c:	ad400c04 	addi	r21,r21,48
  809230:	1d05883a 	add	r2,r3,r20
  809234:	15400005 	stb	r21,0(r2)
  809238:	2021883a 	mov	r16,r4
  80923c:	d9000317 	ldw	r4,12(sp)
  809240:	a5000044 	addi	r20,r20,1
  809244:	2823883a 	mov	r17,r5
  809248:	a13fe11e 	bne	r20,r4,8091d0 <_dtoa_r+0x1378>
  80924c:	e505883a 	add	r2,fp,r20
  809250:	173fffc4 	addi	fp,r2,-1
  809254:	0025883a 	mov	r18,zero
  809258:	04cff834 	movhi	r19,16352
  80925c:	b009883a 	mov	r4,r22
  809260:	b80b883a 	mov	r5,r23
  809264:	900d883a 	mov	r6,r18
  809268:	980f883a 	mov	r7,r19
  80926c:	080eee00 	call	80eee0 <__adddf3>
  809270:	180b883a 	mov	r5,r3
  809274:	1009883a 	mov	r4,r2
  809278:	800d883a 	mov	r6,r16
  80927c:	880f883a 	mov	r7,r17
  809280:	080f7900 	call	80f790 <__ltdf2>
  809284:	103cab16 	blt	r2,zero,808534 <_dtoa_r+0x6dc>
  809288:	0009883a 	mov	r4,zero
  80928c:	980b883a 	mov	r5,r19
  809290:	b80f883a 	mov	r7,r23
  809294:	b00d883a 	mov	r6,r22
  809298:	080ee600 	call	80ee60 <__subdf3>
  80929c:	180b883a 	mov	r5,r3
  8092a0:	880f883a 	mov	r7,r17
  8092a4:	1009883a 	mov	r4,r2
  8092a8:	800d883a 	mov	r6,r16
  8092ac:	080f6800 	call	80f680 <__gtdf2>
  8092b0:	00bc470e 	bge	zero,r2,8083d0 <_dtoa_r+0x578>
  8092b4:	00c00c04 	movi	r3,48
  8092b8:	e73fffc4 	addi	fp,fp,-1
  8092bc:	e0800007 	ldb	r2,0(fp)
  8092c0:	10fffd26 	beq	r2,r3,8092b8 <_dtoa_r+0x1460>
  8092c4:	d9800417 	ldw	r6,16(sp)
  8092c8:	e7000044 	addi	fp,fp,1
  8092cc:	d9800d15 	stw	r6,52(sp)
  8092d0:	003cab06 	br	808580 <_dtoa_r+0x728>
  8092d4:	d8c00f17 	ldw	r3,60(sp)
  8092d8:	d9001117 	ldw	r4,68(sp)
  8092dc:	20e1c83a 	sub	r16,r4,r3
  8092e0:	0007883a 	mov	r3,zero
  8092e4:	003d9b06 	br	808954 <_dtoa_r+0xafc>
  8092e8:	00800e44 	movi	r2,57
  8092ec:	b0800005 	stb	r2,0(r22)
  8092f0:	b5800044 	addi	r22,r22,1
  8092f4:	003dc106 	br	8089fc <_dtoa_r+0xba4>
  8092f8:	05800084 	movi	r22,2
  8092fc:	003bf706 	br	8082dc <_dtoa_r+0x484>
  809300:	d9000f17 	ldw	r4,60(sp)
  809304:	013c000e 	bge	zero,r4,808308 <_dtoa_r+0x4b0>
  809308:	d9800e17 	ldw	r6,56(sp)
  80930c:	01bc300e 	bge	zero,r6,8083d0 <_dtoa_r+0x578>
  809310:	0005883a 	mov	r2,zero
  809314:	00d00934 	movhi	r3,16420
  809318:	a80b883a 	mov	r5,r21
  80931c:	180f883a 	mov	r7,r3
  809320:	a009883a 	mov	r4,r20
  809324:	100d883a 	mov	r6,r2
  809328:	080ef540 	call	80ef54 <__muldf3>
  80932c:	b1000044 	addi	r4,r22,1
  809330:	1021883a 	mov	r16,r2
  809334:	1823883a 	mov	r17,r3
  809338:	080f8a00 	call	80f8a0 <__floatsidf>
  80933c:	880b883a 	mov	r5,r17
  809340:	8009883a 	mov	r4,r16
  809344:	180f883a 	mov	r7,r3
  809348:	100d883a 	mov	r6,r2
  80934c:	080ef540 	call	80ef54 <__muldf3>
  809350:	0011883a 	mov	r8,zero
  809354:	02500734 	movhi	r9,16412
  809358:	180b883a 	mov	r5,r3
  80935c:	480f883a 	mov	r7,r9
  809360:	1009883a 	mov	r4,r2
  809364:	400d883a 	mov	r6,r8
  809368:	080eee00 	call	80eee0 <__adddf3>
  80936c:	102d883a 	mov	r22,r2
  809370:	00bf3034 	movhi	r2,64704
  809374:	10ef883a 	add	r23,r2,r3
  809378:	d8800d17 	ldw	r2,52(sp)
  80937c:	d8c00e17 	ldw	r3,56(sp)
  809380:	8029883a 	mov	r20,r16
  809384:	10bfffc4 	addi	r2,r2,-1
  809388:	882b883a 	mov	r21,r17
  80938c:	d8800415 	stw	r2,16(sp)
  809390:	d8c00315 	stw	r3,12(sp)
  809394:	003e8306 	br	808da4 <_dtoa_r+0xf4c>
  809398:	d8800117 	ldw	r2,4(sp)
  80939c:	dc001117 	ldw	r16,68(sp)
  8093a0:	dc801017 	ldw	r18,64(sp)
  8093a4:	00c00d84 	movi	r3,54
  8093a8:	1887c83a 	sub	r3,r3,r2
  8093ac:	003d6906 	br	808954 <_dtoa_r+0xafc>
  8093b0:	01800044 	movi	r6,1
  8093b4:	3021883a 	mov	r16,r6
  8093b8:	d9800f15 	stw	r6,60(sp)
  8093bc:	d9802615 	stw	r6,152(sp)
  8093c0:	d9800e15 	stw	r6,56(sp)
  8093c4:	003b9306 	br	808214 <_dtoa_r+0x3bc>
  8093c8:	b021883a 	mov	r16,r22
  8093cc:	dd800f15 	stw	r22,60(sp)
  8093d0:	003b9006 	br	808214 <_dtoa_r+0x3bc>
  8093d4:	103e221e 	bne	r2,zero,808c60 <_dtoa_r+0xe08>
  8093d8:	b880004c 	andi	r2,r23,1
  8093dc:	1005003a 	cmpeq	r2,r2,zero
  8093e0:	103e1f1e 	bne	r2,zero,808c60 <_dtoa_r+0xe08>
  8093e4:	003e1b06 	br	808c54 <_dtoa_r+0xdfc>
  8093e8:	d9001617 	ldw	r4,88(sp)
  8093ec:	980b883a 	mov	r5,r19
  8093f0:	01800284 	movi	r6,10
  8093f4:	000f883a 	mov	r7,zero
  8093f8:	080a6740 	call	80a674 <__multadd>
  8093fc:	d8c00e17 	ldw	r3,56(sp)
  809400:	1027883a 	mov	r19,r2
  809404:	d8c00f15 	stw	r3,60(sp)
  809408:	003cd306 	br	808758 <_dtoa_r+0x900>

0080940c <__sflags>:
  80940c:	28c00007 	ldb	r3,0(r5)
  809410:	00801c84 	movi	r2,114
  809414:	18800926 	beq	r3,r2,80943c <__sflags+0x30>
  809418:	00801dc4 	movi	r2,119
  80941c:	18801426 	beq	r3,r2,809470 <__sflags+0x64>
  809420:	00801844 	movi	r2,97
  809424:	18801626 	beq	r3,r2,809480 <__sflags+0x74>
  809428:	0007883a 	mov	r3,zero
  80942c:	00800584 	movi	r2,22
  809430:	20800015 	stw	r2,0(r4)
  809434:	1805883a 	mov	r2,r3
  809438:	f800283a 	ret
  80943c:	000f883a 	mov	r7,zero
  809440:	0011883a 	mov	r8,zero
  809444:	00c00104 	movi	r3,4
  809448:	28800047 	ldb	r2,1(r5)
  80944c:	10000426 	beq	r2,zero,809460 <__sflags+0x54>
  809450:	01000ac4 	movi	r4,43
  809454:	11000e26 	beq	r2,r4,809490 <__sflags+0x84>
  809458:	28800087 	ldb	r2,2(r5)
  80945c:	11000c26 	beq	r2,r4,809490 <__sflags+0x84>
  809460:	3a04b03a 	or	r2,r7,r8
  809464:	30800015 	stw	r2,0(r6)
  809468:	1805883a 	mov	r2,r3
  80946c:	f800283a 	ret
  809470:	01c00044 	movi	r7,1
  809474:	02018004 	movi	r8,1536
  809478:	00c00204 	movi	r3,8
  80947c:	003ff206 	br	809448 <__sflags+0x3c>
  809480:	01c00044 	movi	r7,1
  809484:	02008204 	movi	r8,520
  809488:	00c04204 	movi	r3,264
  80948c:	003fee06 	br	809448 <__sflags+0x3c>
  809490:	00bffcc4 	movi	r2,-13
  809494:	1884703a 	and	r2,r3,r2
  809498:	01c00084 	movi	r7,2
  80949c:	10c00414 	ori	r3,r2,16
  8094a0:	3a04b03a 	or	r2,r7,r8
  8094a4:	30800015 	stw	r2,0(r6)
  8094a8:	003fef06 	br	809468 <__sflags+0x5c>

008094ac <_fread_r>:
  8094ac:	defff504 	addi	sp,sp,-44
  8094b0:	ddc00815 	stw	r23,32(sp)
  8094b4:	39af383a 	mul	r23,r7,r6
  8094b8:	df000915 	stw	fp,36(sp)
  8094bc:	dd800715 	stw	r22,28(sp)
  8094c0:	dcc00415 	stw	r19,16(sp)
  8094c4:	dc000115 	stw	r16,4(sp)
  8094c8:	dfc00a15 	stw	ra,40(sp)
  8094cc:	dd400615 	stw	r21,24(sp)
  8094d0:	dd000515 	stw	r20,20(sp)
  8094d4:	dc800315 	stw	r18,12(sp)
  8094d8:	dc400215 	stw	r17,8(sp)
  8094dc:	d9800015 	stw	r6,0(sp)
  8094e0:	3839883a 	mov	fp,r7
  8094e4:	2821883a 	mov	r16,r5
  8094e8:	202d883a 	mov	r22,r4
  8094ec:	dcc00b17 	ldw	r19,44(sp)
  8094f0:	b8005926 	beq	r23,zero,809658 <_fread_r+0x1ac>
  8094f4:	20000226 	beq	r4,zero,809500 <_fread_r+0x54>
  8094f8:	20800e17 	ldw	r2,56(r4)
  8094fc:	10005826 	beq	r2,zero,809660 <_fread_r+0x1b4>
  809500:	9c400117 	ldw	r17,4(r19)
  809504:	88005916 	blt	r17,zero,80966c <_fread_r+0x1c0>
  809508:	9880030b 	ldhu	r2,12(r19)
  80950c:	8029883a 	mov	r20,r16
  809510:	1080008c 	andi	r2,r2,2
  809514:	1000221e 	bne	r2,zero,8095a0 <_fread_r+0xf4>
  809518:	b825883a 	mov	r18,r23
  80951c:	00000106 	br	809524 <_fread_r+0x78>
  809520:	9c400117 	ldw	r17,4(r19)
  809524:	a009883a 	mov	r4,r20
  809528:	880d883a 	mov	r6,r17
  80952c:	8c80542e 	bgeu	r17,r18,809680 <_fread_r+0x1d4>
  809530:	99400017 	ldw	r5,0(r19)
  809534:	a469883a 	add	r20,r20,r17
  809538:	9465c83a 	sub	r18,r18,r17
  80953c:	080336c0 	call	80336c <memcpy>
  809540:	98800017 	ldw	r2,0(r19)
  809544:	b009883a 	mov	r4,r22
  809548:	980b883a 	mov	r5,r19
  80954c:	1461883a 	add	r16,r2,r17
  809550:	9c000015 	stw	r16,0(r19)
  809554:	0803d1c0 	call	803d1c <__srefill_r>
  809558:	103ff126 	beq	r2,zero,809520 <_fread_r+0x74>
  80955c:	d9400017 	ldw	r5,0(sp)
  809560:	bc89c83a 	sub	r4,r23,r18
  809564:	080fdb40 	call	80fdb4 <__udivsi3>
  809568:	1039883a 	mov	fp,r2
  80956c:	e005883a 	mov	r2,fp
  809570:	dfc00a17 	ldw	ra,40(sp)
  809574:	df000917 	ldw	fp,36(sp)
  809578:	ddc00817 	ldw	r23,32(sp)
  80957c:	dd800717 	ldw	r22,28(sp)
  809580:	dd400617 	ldw	r21,24(sp)
  809584:	dd000517 	ldw	r20,20(sp)
  809588:	dcc00417 	ldw	r19,16(sp)
  80958c:	dc800317 	ldw	r18,12(sp)
  809590:	dc400217 	ldw	r17,8(sp)
  809594:	dc000117 	ldw	r16,4(sp)
  809598:	dec00b04 	addi	sp,sp,44
  80959c:	f800283a 	ret
  8095a0:	b825883a 	mov	r18,r23
  8095a4:	8dc03436 	bltu	r17,r23,809678 <_fread_r+0x1cc>
  8095a8:	99400017 	ldw	r5,0(r19)
  8095ac:	a009883a 	mov	r4,r20
  8095b0:	900d883a 	mov	r6,r18
  8095b4:	080336c0 	call	80336c <memcpy>
  8095b8:	9c000017 	ldw	r16,0(r19)
  8095bc:	98800117 	ldw	r2,4(r19)
  8095c0:	99400c17 	ldw	r5,48(r19)
  8095c4:	84a1883a 	add	r16,r16,r18
  8095c8:	14a3c83a 	sub	r17,r2,r18
  8095cc:	a4ab883a 	add	r21,r20,r18
  8095d0:	9c400115 	stw	r17,4(r19)
  8095d4:	9c000015 	stw	r16,0(r19)
  8095d8:	bca9c83a 	sub	r20,r23,r18
  8095dc:	28000826 	beq	r5,zero,809600 <_fread_r+0x154>
  8095e0:	a03fe226 	beq	r20,zero,80956c <_fread_r+0xc0>
  8095e4:	98801004 	addi	r2,r19,64
  8095e8:	28800326 	beq	r5,r2,8095f8 <_fread_r+0x14c>
  8095ec:	b009883a 	mov	r4,r22
  8095f0:	0801bb00 	call	801bb0 <_free_r>
  8095f4:	9c000017 	ldw	r16,0(r19)
  8095f8:	98000c15 	stw	zero,48(r19)
  8095fc:	00000106 	br	809604 <_fread_r+0x158>
  809600:	a03fda26 	beq	r20,zero,80956c <_fread_r+0xc0>
  809604:	9c800417 	ldw	r18,16(r19)
  809608:	9c400517 	ldw	r17,20(r19)
  80960c:	9d400015 	stw	r21,0(r19)
  809610:	9d400415 	stw	r21,16(r19)
  809614:	9d000515 	stw	r20,20(r19)
  809618:	b009883a 	mov	r4,r22
  80961c:	980b883a 	mov	r5,r19
  809620:	0803d1c0 	call	803d1c <__srefill_r>
  809624:	98c00117 	ldw	r3,4(r19)
  809628:	9c800415 	stw	r18,16(r19)
  80962c:	9c400515 	stw	r17,20(r19)
  809630:	a8eb883a 	add	r21,r21,r3
  809634:	9c000015 	stw	r16,0(r19)
  809638:	a0e9c83a 	sub	r20,r20,r3
  80963c:	98000115 	stw	zero,4(r19)
  809640:	103fef26 	beq	r2,zero,809600 <_fread_r+0x154>
  809644:	d9400017 	ldw	r5,0(sp)
  809648:	bd09c83a 	sub	r4,r23,r20
  80964c:	080fdb40 	call	80fdb4 <__udivsi3>
  809650:	1039883a 	mov	fp,r2
  809654:	003fc506 	br	80956c <_fread_r+0xc0>
  809658:	0039883a 	mov	fp,zero
  80965c:	003fc306 	br	80956c <_fread_r+0xc0>
  809660:	080162c0 	call	80162c <__sinit>
  809664:	9c400117 	ldw	r17,4(r19)
  809668:	883fa70e 	bge	r17,zero,809508 <_fread_r+0x5c>
  80966c:	0023883a 	mov	r17,zero
  809670:	98000115 	stw	zero,4(r19)
  809674:	003fa406 	br	809508 <_fread_r+0x5c>
  809678:	8825883a 	mov	r18,r17
  80967c:	003fca06 	br	8095a8 <_fread_r+0xfc>
  809680:	99400017 	ldw	r5,0(r19)
  809684:	900d883a 	mov	r6,r18
  809688:	080336c0 	call	80336c <memcpy>
  80968c:	98c00117 	ldw	r3,4(r19)
  809690:	98800017 	ldw	r2,0(r19)
  809694:	1c87c83a 	sub	r3,r3,r18
  809698:	1485883a 	add	r2,r2,r18
  80969c:	98800015 	stw	r2,0(r19)
  8096a0:	98c00115 	stw	r3,4(r19)
  8096a4:	003fb106 	br	80956c <_fread_r+0xc0>

008096a8 <fread>:
  8096a8:	00802074 	movhi	r2,129
  8096ac:	109c4f04 	addi	r2,r2,28988
  8096b0:	2017883a 	mov	r11,r4
  8096b4:	11000017 	ldw	r4,0(r2)
  8096b8:	defffe04 	addi	sp,sp,-8
  8096bc:	3013883a 	mov	r9,r6
  8096c0:	2805883a 	mov	r2,r5
  8096c4:	d9c00015 	stw	r7,0(sp)
  8096c8:	580b883a 	mov	r5,r11
  8096cc:	100d883a 	mov	r6,r2
  8096d0:	480f883a 	mov	r7,r9
  8096d4:	dfc00115 	stw	ra,4(sp)
  8096d8:	08094ac0 	call	8094ac <_fread_r>
  8096dc:	dfc00117 	ldw	ra,4(sp)
  8096e0:	dec00204 	addi	sp,sp,8
  8096e4:	f800283a 	ret

008096e8 <_isatty_r>:
  8096e8:	defffd04 	addi	sp,sp,-12
  8096ec:	dc000015 	stw	r16,0(sp)
  8096f0:	040020b4 	movhi	r16,130
  8096f4:	8423a004 	addi	r16,r16,-29056
  8096f8:	dc400115 	stw	r17,4(sp)
  8096fc:	80000015 	stw	zero,0(r16)
  809700:	2023883a 	mov	r17,r4
  809704:	2809883a 	mov	r4,r5
  809708:	dfc00215 	stw	ra,8(sp)
  80970c:	0810c240 	call	810c24 <isatty>
  809710:	1007883a 	mov	r3,r2
  809714:	00bfffc4 	movi	r2,-1
  809718:	18800626 	beq	r3,r2,809734 <_isatty_r+0x4c>
  80971c:	1805883a 	mov	r2,r3
  809720:	dfc00217 	ldw	ra,8(sp)
  809724:	dc400117 	ldw	r17,4(sp)
  809728:	dc000017 	ldw	r16,0(sp)
  80972c:	dec00304 	addi	sp,sp,12
  809730:	f800283a 	ret
  809734:	80800017 	ldw	r2,0(r16)
  809738:	103ff826 	beq	r2,zero,80971c <_isatty_r+0x34>
  80973c:	88800015 	stw	r2,0(r17)
  809740:	1805883a 	mov	r2,r3
  809744:	dfc00217 	ldw	ra,8(sp)
  809748:	dc400117 	ldw	r17,4(sp)
  80974c:	dc000017 	ldw	r16,0(sp)
  809750:	dec00304 	addi	sp,sp,12
  809754:	f800283a 	ret

00809758 <iswspace>:
  809758:	00803fc4 	movi	r2,255
  80975c:	0007883a 	mov	r3,zero
  809760:	11000636 	bltu	r2,r4,80977c <iswspace+0x24>
  809764:	00802074 	movhi	r2,129
  809768:	109c5304 	addi	r2,r2,29004
  80976c:	10c00017 	ldw	r3,0(r2)
  809770:	1907883a 	add	r3,r3,r4
  809774:	18800003 	ldbu	r2,0(r3)
  809778:	10c0020c 	andi	r3,r2,8
  80977c:	1805883a 	mov	r2,r3
  809780:	f800283a 	ret

00809784 <__locale_charset>:
  809784:	d0a00a17 	ldw	r2,-32728(gp)
  809788:	f800283a 	ret

0080978c <_localeconv_r>:
  80978c:	00802074 	movhi	r2,129
  809790:	10947104 	addi	r2,r2,20932
  809794:	f800283a 	ret

00809798 <localeconv>:
  809798:	00802074 	movhi	r2,129
  80979c:	109c4f04 	addi	r2,r2,28988
  8097a0:	11000017 	ldw	r4,0(r2)
  8097a4:	080978c1 	jmpi	80978c <_localeconv_r>

008097a8 <_setlocale_r>:
  8097a8:	defffc04 	addi	sp,sp,-16
  8097ac:	00c02074 	movhi	r3,129
  8097b0:	18d39b04 	addi	r3,r3,20076
  8097b4:	dc800215 	stw	r18,8(sp)
  8097b8:	dc400115 	stw	r17,4(sp)
  8097bc:	dc000015 	stw	r16,0(sp)
  8097c0:	2023883a 	mov	r17,r4
  8097c4:	2825883a 	mov	r18,r5
  8097c8:	dfc00315 	stw	ra,12(sp)
  8097cc:	3021883a 	mov	r16,r6
  8097d0:	3009883a 	mov	r4,r6
  8097d4:	180b883a 	mov	r5,r3
  8097d8:	30000926 	beq	r6,zero,809800 <_setlocale_r+0x58>
  8097dc:	080ab640 	call	80ab64 <strcmp>
  8097e0:	8009883a 	mov	r4,r16
  8097e4:	01402074 	movhi	r5,129
  8097e8:	2953ac04 	addi	r5,r5,20144
  8097ec:	10000b1e 	bne	r2,zero,80981c <_setlocale_r+0x74>
  8097f0:	8c000d15 	stw	r16,52(r17)
  8097f4:	8c800c15 	stw	r18,48(r17)
  8097f8:	00c02074 	movhi	r3,129
  8097fc:	18d39b04 	addi	r3,r3,20076
  809800:	1805883a 	mov	r2,r3
  809804:	dfc00317 	ldw	ra,12(sp)
  809808:	dc800217 	ldw	r18,8(sp)
  80980c:	dc400117 	ldw	r17,4(sp)
  809810:	dc000017 	ldw	r16,0(sp)
  809814:	dec00404 	addi	sp,sp,16
  809818:	f800283a 	ret
  80981c:	080ab640 	call	80ab64 <strcmp>
  809820:	0007883a 	mov	r3,zero
  809824:	103ff226 	beq	r2,zero,8097f0 <_setlocale_r+0x48>
  809828:	003ff506 	br	809800 <_setlocale_r+0x58>

0080982c <setlocale>:
  80982c:	01802074 	movhi	r6,129
  809830:	319c4f04 	addi	r6,r6,28988
  809834:	2007883a 	mov	r3,r4
  809838:	31000017 	ldw	r4,0(r6)
  80983c:	280d883a 	mov	r6,r5
  809840:	180b883a 	mov	r5,r3
  809844:	08097a81 	jmpi	8097a8 <_setlocale_r>

00809848 <_lseek_r>:
  809848:	defffd04 	addi	sp,sp,-12
  80984c:	dc000015 	stw	r16,0(sp)
  809850:	040020b4 	movhi	r16,130
  809854:	8423a004 	addi	r16,r16,-29056
  809858:	dc400115 	stw	r17,4(sp)
  80985c:	80000015 	stw	zero,0(r16)
  809860:	2023883a 	mov	r17,r4
  809864:	2809883a 	mov	r4,r5
  809868:	300b883a 	mov	r5,r6
  80986c:	380d883a 	mov	r6,r7
  809870:	dfc00215 	stw	ra,8(sp)
  809874:	0810e300 	call	810e30 <lseek>
  809878:	1007883a 	mov	r3,r2
  80987c:	00bfffc4 	movi	r2,-1
  809880:	18800626 	beq	r3,r2,80989c <_lseek_r+0x54>
  809884:	1805883a 	mov	r2,r3
  809888:	dfc00217 	ldw	ra,8(sp)
  80988c:	dc400117 	ldw	r17,4(sp)
  809890:	dc000017 	ldw	r16,0(sp)
  809894:	dec00304 	addi	sp,sp,12
  809898:	f800283a 	ret
  80989c:	80800017 	ldw	r2,0(r16)
  8098a0:	103ff826 	beq	r2,zero,809884 <_lseek_r+0x3c>
  8098a4:	88800015 	stw	r2,0(r17)
  8098a8:	1805883a 	mov	r2,r3
  8098ac:	dfc00217 	ldw	ra,8(sp)
  8098b0:	dc400117 	ldw	r17,4(sp)
  8098b4:	dc000017 	ldw	r16,0(sp)
  8098b8:	dec00304 	addi	sp,sp,12
  8098bc:	f800283a 	ret

008098c0 <_mbrtowc_r>:
  8098c0:	defffc04 	addi	sp,sp,-16
  8098c4:	dc400215 	stw	r17,8(sp)
  8098c8:	dc000115 	stw	r16,4(sp)
  8098cc:	dfc00315 	stw	ra,12(sp)
  8098d0:	dc000417 	ldw	r16,16(sp)
  8098d4:	2023883a 	mov	r17,r4
  8098d8:	30000f26 	beq	r6,zero,809918 <_mbrtowc_r+0x58>
  8098dc:	dc000015 	stw	r16,0(sp)
  8098e0:	08099800 	call	809980 <_mbtowc_r>
  8098e4:	1007883a 	mov	r3,r2
  8098e8:	00bfffc4 	movi	r2,-1
  8098ec:	1809883a 	mov	r4,r3
  8098f0:	1880111e 	bne	r3,r2,809938 <_mbrtowc_r+0x78>
  8098f4:	80000015 	stw	zero,0(r16)
  8098f8:	00802284 	movi	r2,138
  8098fc:	88800015 	stw	r2,0(r17)
  809900:	2005883a 	mov	r2,r4
  809904:	dfc00317 	ldw	ra,12(sp)
  809908:	dc400217 	ldw	r17,8(sp)
  80990c:	dc000117 	ldw	r16,4(sp)
  809910:	dec00404 	addi	sp,sp,16
  809914:	f800283a 	ret
  809918:	000b883a 	mov	r5,zero
  80991c:	01802074 	movhi	r6,129
  809920:	3193ac04 	addi	r6,r6,20144
  809924:	01c00044 	movi	r7,1
  809928:	dc000015 	stw	r16,0(sp)
  80992c:	08099800 	call	809980 <_mbtowc_r>
  809930:	1007883a 	mov	r3,r2
  809934:	003fec06 	br	8098e8 <_mbrtowc_r+0x28>
  809938:	1809883a 	mov	r4,r3
  80993c:	003ff006 	br	809900 <_mbrtowc_r+0x40>

00809940 <mbrtowc>:
  809940:	00802074 	movhi	r2,129
  809944:	109c4f04 	addi	r2,r2,28988
  809948:	2017883a 	mov	r11,r4
  80994c:	11000017 	ldw	r4,0(r2)
  809950:	defffe04 	addi	sp,sp,-8
  809954:	3013883a 	mov	r9,r6
  809958:	2805883a 	mov	r2,r5
  80995c:	d9c00015 	stw	r7,0(sp)
  809960:	580b883a 	mov	r5,r11
  809964:	100d883a 	mov	r6,r2
  809968:	480f883a 	mov	r7,r9
  80996c:	dfc00115 	stw	ra,4(sp)
  809970:	08098c00 	call	8098c0 <_mbrtowc_r>
  809974:	dfc00117 	ldw	ra,4(sp)
  809978:	dec00204 	addi	sp,sp,8
  80997c:	f800283a 	ret

00809980 <_mbtowc_r>:
  809980:	deffff04 	addi	sp,sp,-4
  809984:	0005883a 	mov	r2,zero
  809988:	28000326 	beq	r5,zero,809998 <_mbtowc_r+0x18>
  80998c:	3000041e 	bne	r6,zero,8099a0 <_mbtowc_r+0x20>
  809990:	dec00104 	addi	sp,sp,4
  809994:	f800283a 	ret
  809998:	d80b883a 	mov	r5,sp
  80999c:	303ffc26 	beq	r6,zero,809990 <_mbtowc_r+0x10>
  8099a0:	00bfff84 	movi	r2,-2
  8099a4:	383ffa26 	beq	r7,zero,809990 <_mbtowc_r+0x10>
  8099a8:	30800003 	ldbu	r2,0(r6)
  8099ac:	28800015 	stw	r2,0(r5)
  8099b0:	30c00003 	ldbu	r3,0(r6)
  8099b4:	1804c03a 	cmpne	r2,r3,zero
  8099b8:	dec00104 	addi	sp,sp,4
  8099bc:	f800283a 	ret

008099c0 <_Bfree>:
  8099c0:	28000826 	beq	r5,zero,8099e4 <_Bfree+0x24>
  8099c4:	28800117 	ldw	r2,4(r5)
  8099c8:	21001317 	ldw	r4,76(r4)
  8099cc:	1085883a 	add	r2,r2,r2
  8099d0:	1085883a 	add	r2,r2,r2
  8099d4:	1105883a 	add	r2,r2,r4
  8099d8:	10c00017 	ldw	r3,0(r2)
  8099dc:	28c00015 	stw	r3,0(r5)
  8099e0:	11400015 	stw	r5,0(r2)
  8099e4:	f800283a 	ret

008099e8 <__hi0bits>:
  8099e8:	20bfffec 	andhi	r2,r4,65535
  8099ec:	10001426 	beq	r2,zero,809a40 <__hi0bits+0x58>
  8099f0:	0007883a 	mov	r3,zero
  8099f4:	20bfc02c 	andhi	r2,r4,65280
  8099f8:	1000021e 	bne	r2,zero,809a04 <__hi0bits+0x1c>
  8099fc:	2008923a 	slli	r4,r4,8
  809a00:	18c00204 	addi	r3,r3,8
  809a04:	20bc002c 	andhi	r2,r4,61440
  809a08:	1000021e 	bne	r2,zero,809a14 <__hi0bits+0x2c>
  809a0c:	2008913a 	slli	r4,r4,4
  809a10:	18c00104 	addi	r3,r3,4
  809a14:	20b0002c 	andhi	r2,r4,49152
  809a18:	1000031e 	bne	r2,zero,809a28 <__hi0bits+0x40>
  809a1c:	2105883a 	add	r2,r4,r4
  809a20:	18c00084 	addi	r3,r3,2
  809a24:	1089883a 	add	r4,r2,r2
  809a28:	20000316 	blt	r4,zero,809a38 <__hi0bits+0x50>
  809a2c:	2090002c 	andhi	r2,r4,16384
  809a30:	10000626 	beq	r2,zero,809a4c <__hi0bits+0x64>
  809a34:	18c00044 	addi	r3,r3,1
  809a38:	1805883a 	mov	r2,r3
  809a3c:	f800283a 	ret
  809a40:	2008943a 	slli	r4,r4,16
  809a44:	00c00404 	movi	r3,16
  809a48:	003fea06 	br	8099f4 <__hi0bits+0xc>
  809a4c:	00c00804 	movi	r3,32
  809a50:	1805883a 	mov	r2,r3
  809a54:	f800283a 	ret

00809a58 <__lo0bits>:
  809a58:	20c00017 	ldw	r3,0(r4)
  809a5c:	188001cc 	andi	r2,r3,7
  809a60:	10000a26 	beq	r2,zero,809a8c <__lo0bits+0x34>
  809a64:	1880004c 	andi	r2,r3,1
  809a68:	1005003a 	cmpeq	r2,r2,zero
  809a6c:	10002126 	beq	r2,zero,809af4 <__lo0bits+0x9c>
  809a70:	1880008c 	andi	r2,r3,2
  809a74:	1000251e 	bne	r2,zero,809b0c <__lo0bits+0xb4>
  809a78:	1804d0ba 	srli	r2,r3,2
  809a7c:	01400084 	movi	r5,2
  809a80:	20800015 	stw	r2,0(r4)
  809a84:	2805883a 	mov	r2,r5
  809a88:	f800283a 	ret
  809a8c:	18bfffcc 	andi	r2,r3,65535
  809a90:	10001526 	beq	r2,zero,809ae8 <__lo0bits+0x90>
  809a94:	000b883a 	mov	r5,zero
  809a98:	18803fcc 	andi	r2,r3,255
  809a9c:	1000021e 	bne	r2,zero,809aa8 <__lo0bits+0x50>
  809aa0:	1806d23a 	srli	r3,r3,8
  809aa4:	29400204 	addi	r5,r5,8
  809aa8:	188003cc 	andi	r2,r3,15
  809aac:	1000021e 	bne	r2,zero,809ab8 <__lo0bits+0x60>
  809ab0:	1806d13a 	srli	r3,r3,4
  809ab4:	29400104 	addi	r5,r5,4
  809ab8:	188000cc 	andi	r2,r3,3
  809abc:	1000021e 	bne	r2,zero,809ac8 <__lo0bits+0x70>
  809ac0:	1806d0ba 	srli	r3,r3,2
  809ac4:	29400084 	addi	r5,r5,2
  809ac8:	1880004c 	andi	r2,r3,1
  809acc:	1000031e 	bne	r2,zero,809adc <__lo0bits+0x84>
  809ad0:	1806d07a 	srli	r3,r3,1
  809ad4:	18000a26 	beq	r3,zero,809b00 <__lo0bits+0xa8>
  809ad8:	29400044 	addi	r5,r5,1
  809adc:	2805883a 	mov	r2,r5
  809ae0:	20c00015 	stw	r3,0(r4)
  809ae4:	f800283a 	ret
  809ae8:	1806d43a 	srli	r3,r3,16
  809aec:	01400404 	movi	r5,16
  809af0:	003fe906 	br	809a98 <__lo0bits+0x40>
  809af4:	000b883a 	mov	r5,zero
  809af8:	2805883a 	mov	r2,r5
  809afc:	f800283a 	ret
  809b00:	01400804 	movi	r5,32
  809b04:	2805883a 	mov	r2,r5
  809b08:	f800283a 	ret
  809b0c:	1804d07a 	srli	r2,r3,1
  809b10:	01400044 	movi	r5,1
  809b14:	20800015 	stw	r2,0(r4)
  809b18:	003fda06 	br	809a84 <__lo0bits+0x2c>

00809b1c <__mcmp>:
  809b1c:	20800417 	ldw	r2,16(r4)
  809b20:	28c00417 	ldw	r3,16(r5)
  809b24:	10cfc83a 	sub	r7,r2,r3
  809b28:	38000c1e 	bne	r7,zero,809b5c <__mcmp+0x40>
  809b2c:	18c5883a 	add	r2,r3,r3
  809b30:	1085883a 	add	r2,r2,r2
  809b34:	10c00504 	addi	r3,r2,20
  809b38:	21000504 	addi	r4,r4,20
  809b3c:	28cb883a 	add	r5,r5,r3
  809b40:	2085883a 	add	r2,r4,r2
  809b44:	10bfff04 	addi	r2,r2,-4
  809b48:	297fff04 	addi	r5,r5,-4
  809b4c:	11800017 	ldw	r6,0(r2)
  809b50:	28c00017 	ldw	r3,0(r5)
  809b54:	30c0031e 	bne	r6,r3,809b64 <__mcmp+0x48>
  809b58:	20bffa36 	bltu	r4,r2,809b44 <__mcmp+0x28>
  809b5c:	3805883a 	mov	r2,r7
  809b60:	f800283a 	ret
  809b64:	30c00336 	bltu	r6,r3,809b74 <__mcmp+0x58>
  809b68:	01c00044 	movi	r7,1
  809b6c:	3805883a 	mov	r2,r7
  809b70:	f800283a 	ret
  809b74:	01ffffc4 	movi	r7,-1
  809b78:	003ff806 	br	809b5c <__mcmp+0x40>

00809b7c <__ulp>:
  809b7c:	295ffc2c 	andhi	r5,r5,32752
  809b80:	013f3034 	movhi	r4,64704
  809b84:	290b883a 	add	r5,r5,r4
  809b88:	0145c83a 	sub	r2,zero,r5
  809b8c:	1007d53a 	srai	r3,r2,20
  809b90:	000d883a 	mov	r6,zero
  809b94:	0140040e 	bge	zero,r5,809ba8 <__ulp+0x2c>
  809b98:	280f883a 	mov	r7,r5
  809b9c:	3807883a 	mov	r3,r7
  809ba0:	3005883a 	mov	r2,r6
  809ba4:	f800283a 	ret
  809ba8:	008004c4 	movi	r2,19
  809bac:	193ffb04 	addi	r4,r3,-20
  809bb0:	10c00c0e 	bge	r2,r3,809be4 <__ulp+0x68>
  809bb4:	008007c4 	movi	r2,31
  809bb8:	1107c83a 	sub	r3,r2,r4
  809bbc:	00800784 	movi	r2,30
  809bc0:	01400044 	movi	r5,1
  809bc4:	11000216 	blt	r2,r4,809bd0 <__ulp+0x54>
  809bc8:	00800044 	movi	r2,1
  809bcc:	10ca983a 	sll	r5,r2,r3
  809bd0:	000f883a 	mov	r7,zero
  809bd4:	280d883a 	mov	r6,r5
  809bd8:	3807883a 	mov	r3,r7
  809bdc:	3005883a 	mov	r2,r6
  809be0:	f800283a 	ret
  809be4:	00800234 	movhi	r2,8
  809be8:	10cfd83a 	sra	r7,r2,r3
  809bec:	000d883a 	mov	r6,zero
  809bf0:	3005883a 	mov	r2,r6
  809bf4:	3807883a 	mov	r3,r7
  809bf8:	f800283a 	ret

00809bfc <__b2d>:
  809bfc:	20800417 	ldw	r2,16(r4)
  809c00:	defff904 	addi	sp,sp,-28
  809c04:	dd000415 	stw	r20,16(sp)
  809c08:	1085883a 	add	r2,r2,r2
  809c0c:	25000504 	addi	r20,r4,20
  809c10:	1085883a 	add	r2,r2,r2
  809c14:	dc000015 	stw	r16,0(sp)
  809c18:	a0a1883a 	add	r16,r20,r2
  809c1c:	dd400515 	stw	r21,20(sp)
  809c20:	857fff17 	ldw	r21,-4(r16)
  809c24:	dc400115 	stw	r17,4(sp)
  809c28:	dfc00615 	stw	ra,24(sp)
  809c2c:	a809883a 	mov	r4,r21
  809c30:	2823883a 	mov	r17,r5
  809c34:	dcc00315 	stw	r19,12(sp)
  809c38:	dc800215 	stw	r18,8(sp)
  809c3c:	08099e80 	call	8099e8 <__hi0bits>
  809c40:	100b883a 	mov	r5,r2
  809c44:	00800804 	movi	r2,32
  809c48:	1145c83a 	sub	r2,r2,r5
  809c4c:	88800015 	stw	r2,0(r17)
  809c50:	00800284 	movi	r2,10
  809c54:	80ffff04 	addi	r3,r16,-4
  809c58:	11401416 	blt	r2,r5,809cac <__b2d+0xb0>
  809c5c:	008002c4 	movi	r2,11
  809c60:	1149c83a 	sub	r4,r2,r5
  809c64:	a0c02736 	bltu	r20,r3,809d04 <__b2d+0x108>
  809c68:	000d883a 	mov	r6,zero
  809c6c:	28800544 	addi	r2,r5,21
  809c70:	a906d83a 	srl	r3,r21,r4
  809c74:	a884983a 	sll	r2,r21,r2
  809c78:	1ccffc34 	orhi	r19,r3,16368
  809c7c:	11a4b03a 	or	r18,r2,r6
  809c80:	9005883a 	mov	r2,r18
  809c84:	9807883a 	mov	r3,r19
  809c88:	dfc00617 	ldw	ra,24(sp)
  809c8c:	dd400517 	ldw	r21,20(sp)
  809c90:	dd000417 	ldw	r20,16(sp)
  809c94:	dcc00317 	ldw	r19,12(sp)
  809c98:	dc800217 	ldw	r18,8(sp)
  809c9c:	dc400117 	ldw	r17,4(sp)
  809ca0:	dc000017 	ldw	r16,0(sp)
  809ca4:	dec00704 	addi	sp,sp,28
  809ca8:	f800283a 	ret
  809cac:	a0c00e36 	bltu	r20,r3,809ce8 <__b2d+0xec>
  809cb0:	293ffd44 	addi	r4,r5,-11
  809cb4:	000d883a 	mov	r6,zero
  809cb8:	20000f26 	beq	r4,zero,809cf8 <__b2d+0xfc>
  809cbc:	00800804 	movi	r2,32
  809cc0:	110bc83a 	sub	r5,r2,r4
  809cc4:	a0c01236 	bltu	r20,r3,809d10 <__b2d+0x114>
  809cc8:	000f883a 	mov	r7,zero
  809ccc:	a904983a 	sll	r2,r21,r4
  809cd0:	3146d83a 	srl	r3,r6,r5
  809cd4:	3108983a 	sll	r4,r6,r4
  809cd8:	108ffc34 	orhi	r2,r2,16368
  809cdc:	18a6b03a 	or	r19,r3,r2
  809ce0:	3924b03a 	or	r18,r7,r4
  809ce4:	003fe606 	br	809c80 <__b2d+0x84>
  809ce8:	293ffd44 	addi	r4,r5,-11
  809cec:	81bffe17 	ldw	r6,-8(r16)
  809cf0:	80fffe04 	addi	r3,r16,-8
  809cf4:	203ff11e 	bne	r4,zero,809cbc <__b2d+0xc0>
  809cf8:	accffc34 	orhi	r19,r21,16368
  809cfc:	3025883a 	mov	r18,r6
  809d00:	003fdf06 	br	809c80 <__b2d+0x84>
  809d04:	18bfff17 	ldw	r2,-4(r3)
  809d08:	110cd83a 	srl	r6,r2,r4
  809d0c:	003fd706 	br	809c6c <__b2d+0x70>
  809d10:	18bfff17 	ldw	r2,-4(r3)
  809d14:	114ed83a 	srl	r7,r2,r5
  809d18:	003fec06 	br	809ccc <__b2d+0xd0>

00809d1c <__ratio>:
  809d1c:	defff904 	addi	sp,sp,-28
  809d20:	dc400215 	stw	r17,8(sp)
  809d24:	2823883a 	mov	r17,r5
  809d28:	d80b883a 	mov	r5,sp
  809d2c:	dfc00615 	stw	ra,24(sp)
  809d30:	dd000515 	stw	r20,20(sp)
  809d34:	dcc00415 	stw	r19,16(sp)
  809d38:	dc800315 	stw	r18,12(sp)
  809d3c:	2025883a 	mov	r18,r4
  809d40:	0809bfc0 	call	809bfc <__b2d>
  809d44:	8809883a 	mov	r4,r17
  809d48:	d9400104 	addi	r5,sp,4
  809d4c:	1027883a 	mov	r19,r2
  809d50:	1829883a 	mov	r20,r3
  809d54:	0809bfc0 	call	809bfc <__b2d>
  809d58:	89000417 	ldw	r4,16(r17)
  809d5c:	91c00417 	ldw	r7,16(r18)
  809d60:	d9800117 	ldw	r6,4(sp)
  809d64:	180b883a 	mov	r5,r3
  809d68:	390fc83a 	sub	r7,r7,r4
  809d6c:	1009883a 	mov	r4,r2
  809d70:	d8800017 	ldw	r2,0(sp)
  809d74:	380e917a 	slli	r7,r7,5
  809d78:	2011883a 	mov	r8,r4
  809d7c:	1185c83a 	sub	r2,r2,r6
  809d80:	11c5883a 	add	r2,r2,r7
  809d84:	1006953a 	slli	r3,r2,20
  809d88:	2813883a 	mov	r9,r5
  809d8c:	00800d0e 	bge	zero,r2,809dc4 <__ratio+0xa8>
  809d90:	1d29883a 	add	r20,r3,r20
  809d94:	a00b883a 	mov	r5,r20
  809d98:	480f883a 	mov	r7,r9
  809d9c:	9809883a 	mov	r4,r19
  809da0:	400d883a 	mov	r6,r8
  809da4:	080f3180 	call	80f318 <__divdf3>
  809da8:	dfc00617 	ldw	ra,24(sp)
  809dac:	dd000517 	ldw	r20,20(sp)
  809db0:	dcc00417 	ldw	r19,16(sp)
  809db4:	dc800317 	ldw	r18,12(sp)
  809db8:	dc400217 	ldw	r17,8(sp)
  809dbc:	dec00704 	addi	sp,sp,28
  809dc0:	f800283a 	ret
  809dc4:	28d3c83a 	sub	r9,r5,r3
  809dc8:	003ff206 	br	809d94 <__ratio+0x78>

00809dcc <_mprec_log10>:
  809dcc:	defffe04 	addi	sp,sp,-8
  809dd0:	008005c4 	movi	r2,23
  809dd4:	dc000015 	stw	r16,0(sp)
  809dd8:	dfc00115 	stw	ra,4(sp)
  809ddc:	2021883a 	mov	r16,r4
  809de0:	11000c16 	blt	r2,r4,809e14 <_mprec_log10+0x48>
  809de4:	200490fa 	slli	r2,r4,3
  809de8:	00c02074 	movhi	r3,129
  809dec:	18d47d04 	addi	r3,r3,20980
  809df0:	10c5883a 	add	r2,r2,r3
  809df4:	12400117 	ldw	r9,4(r2)
  809df8:	12000017 	ldw	r8,0(r2)
  809dfc:	4807883a 	mov	r3,r9
  809e00:	4005883a 	mov	r2,r8
  809e04:	dfc00117 	ldw	ra,4(sp)
  809e08:	dc000017 	ldw	r16,0(sp)
  809e0c:	dec00204 	addi	sp,sp,8
  809e10:	f800283a 	ret
  809e14:	0011883a 	mov	r8,zero
  809e18:	024ffc34 	movhi	r9,16368
  809e1c:	0005883a 	mov	r2,zero
  809e20:	00d00934 	movhi	r3,16420
  809e24:	480b883a 	mov	r5,r9
  809e28:	4009883a 	mov	r4,r8
  809e2c:	180f883a 	mov	r7,r3
  809e30:	100d883a 	mov	r6,r2
  809e34:	080ef540 	call	80ef54 <__muldf3>
  809e38:	843fffc4 	addi	r16,r16,-1
  809e3c:	1011883a 	mov	r8,r2
  809e40:	1813883a 	mov	r9,r3
  809e44:	803ff51e 	bne	r16,zero,809e1c <_mprec_log10+0x50>
  809e48:	4005883a 	mov	r2,r8
  809e4c:	4807883a 	mov	r3,r9
  809e50:	dfc00117 	ldw	ra,4(sp)
  809e54:	dc000017 	ldw	r16,0(sp)
  809e58:	dec00204 	addi	sp,sp,8
  809e5c:	f800283a 	ret

00809e60 <__copybits>:
  809e60:	297fffc4 	addi	r5,r5,-1
  809e64:	30800417 	ldw	r2,16(r6)
  809e68:	280bd17a 	srai	r5,r5,5
  809e6c:	31800504 	addi	r6,r6,20
  809e70:	1085883a 	add	r2,r2,r2
  809e74:	294b883a 	add	r5,r5,r5
  809e78:	294b883a 	add	r5,r5,r5
  809e7c:	1085883a 	add	r2,r2,r2
  809e80:	290b883a 	add	r5,r5,r4
  809e84:	3087883a 	add	r3,r6,r2
  809e88:	29400104 	addi	r5,r5,4
  809e8c:	30c0052e 	bgeu	r6,r3,809ea4 <__copybits+0x44>
  809e90:	30800017 	ldw	r2,0(r6)
  809e94:	31800104 	addi	r6,r6,4
  809e98:	20800015 	stw	r2,0(r4)
  809e9c:	21000104 	addi	r4,r4,4
  809ea0:	30fffb36 	bltu	r6,r3,809e90 <__copybits+0x30>
  809ea4:	2140032e 	bgeu	r4,r5,809eb4 <__copybits+0x54>
  809ea8:	20000015 	stw	zero,0(r4)
  809eac:	21000104 	addi	r4,r4,4
  809eb0:	217ffd36 	bltu	r4,r5,809ea8 <__copybits+0x48>
  809eb4:	f800283a 	ret

00809eb8 <__any_on>:
  809eb8:	20800417 	ldw	r2,16(r4)
  809ebc:	2807d17a 	srai	r3,r5,5
  809ec0:	21000504 	addi	r4,r4,20
  809ec4:	10c00d0e 	bge	r2,r3,809efc <__any_on+0x44>
  809ec8:	1085883a 	add	r2,r2,r2
  809ecc:	1085883a 	add	r2,r2,r2
  809ed0:	208d883a 	add	r6,r4,r2
  809ed4:	2180182e 	bgeu	r4,r6,809f38 <__any_on+0x80>
  809ed8:	30bfff17 	ldw	r2,-4(r6)
  809edc:	30ffff04 	addi	r3,r6,-4
  809ee0:	1000041e 	bne	r2,zero,809ef4 <__any_on+0x3c>
  809ee4:	20c0142e 	bgeu	r4,r3,809f38 <__any_on+0x80>
  809ee8:	18ffff04 	addi	r3,r3,-4
  809eec:	18800017 	ldw	r2,0(r3)
  809ef0:	103ffc26 	beq	r2,zero,809ee4 <__any_on+0x2c>
  809ef4:	00800044 	movi	r2,1
  809ef8:	f800283a 	ret
  809efc:	18800a0e 	bge	r3,r2,809f28 <__any_on+0x70>
  809f00:	294007cc 	andi	r5,r5,31
  809f04:	28000826 	beq	r5,zero,809f28 <__any_on+0x70>
  809f08:	18c5883a 	add	r2,r3,r3
  809f0c:	1085883a 	add	r2,r2,r2
  809f10:	208d883a 	add	r6,r4,r2
  809f14:	30c00017 	ldw	r3,0(r6)
  809f18:	1944d83a 	srl	r2,r3,r5
  809f1c:	1144983a 	sll	r2,r2,r5
  809f20:	18bff41e 	bne	r3,r2,809ef4 <__any_on+0x3c>
  809f24:	003feb06 	br	809ed4 <__any_on+0x1c>
  809f28:	18c5883a 	add	r2,r3,r3
  809f2c:	1085883a 	add	r2,r2,r2
  809f30:	208d883a 	add	r6,r4,r2
  809f34:	003fe706 	br	809ed4 <__any_on+0x1c>
  809f38:	0005883a 	mov	r2,zero
  809f3c:	f800283a 	ret

00809f40 <_Balloc>:
  809f40:	20c01317 	ldw	r3,76(r4)
  809f44:	defffb04 	addi	sp,sp,-20
  809f48:	dcc00315 	stw	r19,12(sp)
  809f4c:	dc800215 	stw	r18,8(sp)
  809f50:	dfc00415 	stw	ra,16(sp)
  809f54:	2825883a 	mov	r18,r5
  809f58:	dc400115 	stw	r17,4(sp)
  809f5c:	dc000015 	stw	r16,0(sp)
  809f60:	2027883a 	mov	r19,r4
  809f64:	01800404 	movi	r6,16
  809f68:	01400104 	movi	r5,4
  809f6c:	18001726 	beq	r3,zero,809fcc <_Balloc+0x8c>
  809f70:	01400044 	movi	r5,1
  809f74:	9485883a 	add	r2,r18,r18
  809f78:	2ca2983a 	sll	r17,r5,r18
  809f7c:	1085883a 	add	r2,r2,r2
  809f80:	10c7883a 	add	r3,r2,r3
  809f84:	1c000017 	ldw	r16,0(r3)
  809f88:	8c4d883a 	add	r6,r17,r17
  809f8c:	318d883a 	add	r6,r6,r6
  809f90:	9809883a 	mov	r4,r19
  809f94:	31800504 	addi	r6,r6,20
  809f98:	80001226 	beq	r16,zero,809fe4 <_Balloc+0xa4>
  809f9c:	80800017 	ldw	r2,0(r16)
  809fa0:	18800015 	stw	r2,0(r3)
  809fa4:	80000415 	stw	zero,16(r16)
  809fa8:	80000315 	stw	zero,12(r16)
  809fac:	8005883a 	mov	r2,r16
  809fb0:	dfc00417 	ldw	ra,16(sp)
  809fb4:	dcc00317 	ldw	r19,12(sp)
  809fb8:	dc800217 	ldw	r18,8(sp)
  809fbc:	dc400117 	ldw	r17,4(sp)
  809fc0:	dc000017 	ldw	r16,0(sp)
  809fc4:	dec00504 	addi	sp,sp,20
  809fc8:	f800283a 	ret
  809fcc:	080cfe40 	call	80cfe4 <_calloc_r>
  809fd0:	1007883a 	mov	r3,r2
  809fd4:	0021883a 	mov	r16,zero
  809fd8:	98801315 	stw	r2,76(r19)
  809fdc:	103fe41e 	bne	r2,zero,809f70 <_Balloc+0x30>
  809fe0:	003ff206 	br	809fac <_Balloc+0x6c>
  809fe4:	080cfe40 	call	80cfe4 <_calloc_r>
  809fe8:	103ff026 	beq	r2,zero,809fac <_Balloc+0x6c>
  809fec:	1021883a 	mov	r16,r2
  809ff0:	14800115 	stw	r18,4(r2)
  809ff4:	14400215 	stw	r17,8(r2)
  809ff8:	003fea06 	br	809fa4 <_Balloc+0x64>

00809ffc <__d2b>:
  809ffc:	defff504 	addi	sp,sp,-44
  80a000:	dcc00515 	stw	r19,20(sp)
  80a004:	04c00044 	movi	r19,1
  80a008:	dc000215 	stw	r16,8(sp)
  80a00c:	2821883a 	mov	r16,r5
  80a010:	980b883a 	mov	r5,r19
  80a014:	ddc00915 	stw	r23,36(sp)
  80a018:	dd800815 	stw	r22,32(sp)
  80a01c:	dd400715 	stw	r21,28(sp)
  80a020:	dd000615 	stw	r20,24(sp)
  80a024:	dc800415 	stw	r18,16(sp)
  80a028:	dc400315 	stw	r17,12(sp)
  80a02c:	dfc00a15 	stw	ra,40(sp)
  80a030:	3023883a 	mov	r17,r6
  80a034:	382d883a 	mov	r22,r7
  80a038:	ddc00b17 	ldw	r23,44(sp)
  80a03c:	0809f400 	call	809f40 <_Balloc>
  80a040:	1025883a 	mov	r18,r2
  80a044:	00a00034 	movhi	r2,32768
  80a048:	10bfffc4 	addi	r2,r2,-1
  80a04c:	8888703a 	and	r4,r17,r2
  80a050:	202ad53a 	srli	r21,r4,20
  80a054:	00800434 	movhi	r2,16
  80a058:	10bfffc4 	addi	r2,r2,-1
  80a05c:	8886703a 	and	r3,r17,r2
  80a060:	a829003a 	cmpeq	r20,r21,zero
  80a064:	800b883a 	mov	r5,r16
  80a068:	d8c00115 	stw	r3,4(sp)
  80a06c:	94000504 	addi	r16,r18,20
  80a070:	a000021e 	bne	r20,zero,80a07c <__d2b+0x80>
  80a074:	18c00434 	orhi	r3,r3,16
  80a078:	d8c00115 	stw	r3,4(sp)
  80a07c:	28002726 	beq	r5,zero,80a11c <__d2b+0x120>
  80a080:	d809883a 	mov	r4,sp
  80a084:	d9400015 	stw	r5,0(sp)
  80a088:	0809a580 	call	809a58 <__lo0bits>
  80a08c:	100d883a 	mov	r6,r2
  80a090:	10003526 	beq	r2,zero,80a168 <__d2b+0x16c>
  80a094:	d8c00117 	ldw	r3,4(sp)
  80a098:	00800804 	movi	r2,32
  80a09c:	1185c83a 	sub	r2,r2,r6
  80a0a0:	d9000017 	ldw	r4,0(sp)
  80a0a4:	1886983a 	sll	r3,r3,r2
  80a0a8:	1906b03a 	or	r3,r3,r4
  80a0ac:	90c00515 	stw	r3,20(r18)
  80a0b0:	d8c00117 	ldw	r3,4(sp)
  80a0b4:	1986d83a 	srl	r3,r3,r6
  80a0b8:	d8c00115 	stw	r3,4(sp)
  80a0bc:	180b003a 	cmpeq	r5,r3,zero
  80a0c0:	00800084 	movi	r2,2
  80a0c4:	114bc83a 	sub	r5,r2,r5
  80a0c8:	80c00115 	stw	r3,4(r16)
  80a0cc:	91400415 	stw	r5,16(r18)
  80a0d0:	a0001a1e 	bne	r20,zero,80a13c <__d2b+0x140>
  80a0d4:	3545883a 	add	r2,r6,r21
  80a0d8:	10bef344 	addi	r2,r2,-1075
  80a0dc:	00c00d44 	movi	r3,53
  80a0e0:	b0800015 	stw	r2,0(r22)
  80a0e4:	1987c83a 	sub	r3,r3,r6
  80a0e8:	b8c00015 	stw	r3,0(r23)
  80a0ec:	9005883a 	mov	r2,r18
  80a0f0:	dfc00a17 	ldw	ra,40(sp)
  80a0f4:	ddc00917 	ldw	r23,36(sp)
  80a0f8:	dd800817 	ldw	r22,32(sp)
  80a0fc:	dd400717 	ldw	r21,28(sp)
  80a100:	dd000617 	ldw	r20,24(sp)
  80a104:	dcc00517 	ldw	r19,20(sp)
  80a108:	dc800417 	ldw	r18,16(sp)
  80a10c:	dc400317 	ldw	r17,12(sp)
  80a110:	dc000217 	ldw	r16,8(sp)
  80a114:	dec00b04 	addi	sp,sp,44
  80a118:	f800283a 	ret
  80a11c:	d9000104 	addi	r4,sp,4
  80a120:	0809a580 	call	809a58 <__lo0bits>
  80a124:	11800804 	addi	r6,r2,32
  80a128:	d8800117 	ldw	r2,4(sp)
  80a12c:	94c00415 	stw	r19,16(r18)
  80a130:	980b883a 	mov	r5,r19
  80a134:	90800515 	stw	r2,20(r18)
  80a138:	a03fe626 	beq	r20,zero,80a0d4 <__d2b+0xd8>
  80a13c:	2945883a 	add	r2,r5,r5
  80a140:	1085883a 	add	r2,r2,r2
  80a144:	1405883a 	add	r2,r2,r16
  80a148:	113fff17 	ldw	r4,-4(r2)
  80a14c:	30fef384 	addi	r3,r6,-1074
  80a150:	2820917a 	slli	r16,r5,5
  80a154:	b0c00015 	stw	r3,0(r22)
  80a158:	08099e80 	call	8099e8 <__hi0bits>
  80a15c:	80a1c83a 	sub	r16,r16,r2
  80a160:	bc000015 	stw	r16,0(r23)
  80a164:	003fe106 	br	80a0ec <__d2b+0xf0>
  80a168:	d8800017 	ldw	r2,0(sp)
  80a16c:	90800515 	stw	r2,20(r18)
  80a170:	d8c00117 	ldw	r3,4(sp)
  80a174:	003fd106 	br	80a0bc <__d2b+0xc0>

0080a178 <__mdiff>:
  80a178:	defffb04 	addi	sp,sp,-20
  80a17c:	dc000015 	stw	r16,0(sp)
  80a180:	2821883a 	mov	r16,r5
  80a184:	dc800215 	stw	r18,8(sp)
  80a188:	300b883a 	mov	r5,r6
  80a18c:	2025883a 	mov	r18,r4
  80a190:	8009883a 	mov	r4,r16
  80a194:	dc400115 	stw	r17,4(sp)
  80a198:	dfc00415 	stw	ra,16(sp)
  80a19c:	dcc00315 	stw	r19,12(sp)
  80a1a0:	3023883a 	mov	r17,r6
  80a1a4:	0809b1c0 	call	809b1c <__mcmp>
  80a1a8:	10004226 	beq	r2,zero,80a2b4 <__mdiff+0x13c>
  80a1ac:	10005016 	blt	r2,zero,80a2f0 <__mdiff+0x178>
  80a1b0:	0027883a 	mov	r19,zero
  80a1b4:	81400117 	ldw	r5,4(r16)
  80a1b8:	9009883a 	mov	r4,r18
  80a1bc:	0809f400 	call	809f40 <_Balloc>
  80a1c0:	1019883a 	mov	r12,r2
  80a1c4:	82800417 	ldw	r10,16(r16)
  80a1c8:	88800417 	ldw	r2,16(r17)
  80a1cc:	81800504 	addi	r6,r16,20
  80a1d0:	5287883a 	add	r3,r10,r10
  80a1d4:	1085883a 	add	r2,r2,r2
  80a1d8:	18c7883a 	add	r3,r3,r3
  80a1dc:	1085883a 	add	r2,r2,r2
  80a1e0:	8a000504 	addi	r8,r17,20
  80a1e4:	64c00315 	stw	r19,12(r12)
  80a1e8:	30db883a 	add	r13,r6,r3
  80a1ec:	4097883a 	add	r11,r8,r2
  80a1f0:	61c00504 	addi	r7,r12,20
  80a1f4:	0013883a 	mov	r9,zero
  80a1f8:	31000017 	ldw	r4,0(r6)
  80a1fc:	41400017 	ldw	r5,0(r8)
  80a200:	42000104 	addi	r8,r8,4
  80a204:	20bfffcc 	andi	r2,r4,65535
  80a208:	28ffffcc 	andi	r3,r5,65535
  80a20c:	10c5c83a 	sub	r2,r2,r3
  80a210:	1245883a 	add	r2,r2,r9
  80a214:	2008d43a 	srli	r4,r4,16
  80a218:	280ad43a 	srli	r5,r5,16
  80a21c:	1007d43a 	srai	r3,r2,16
  80a220:	3880000d 	sth	r2,0(r7)
  80a224:	2149c83a 	sub	r4,r4,r5
  80a228:	20c9883a 	add	r4,r4,r3
  80a22c:	3900008d 	sth	r4,2(r7)
  80a230:	31800104 	addi	r6,r6,4
  80a234:	39c00104 	addi	r7,r7,4
  80a238:	2013d43a 	srai	r9,r4,16
  80a23c:	42ffee36 	bltu	r8,r11,80a1f8 <__mdiff+0x80>
  80a240:	33400c2e 	bgeu	r6,r13,80a274 <__mdiff+0xfc>
  80a244:	30800017 	ldw	r2,0(r6)
  80a248:	31800104 	addi	r6,r6,4
  80a24c:	10ffffcc 	andi	r3,r2,65535
  80a250:	1a47883a 	add	r3,r3,r9
  80a254:	1004d43a 	srli	r2,r2,16
  80a258:	1809d43a 	srai	r4,r3,16
  80a25c:	38c0000d 	sth	r3,0(r7)
  80a260:	1105883a 	add	r2,r2,r4
  80a264:	3880008d 	sth	r2,2(r7)
  80a268:	1013d43a 	srai	r9,r2,16
  80a26c:	39c00104 	addi	r7,r7,4
  80a270:	337ff436 	bltu	r6,r13,80a244 <__mdiff+0xcc>
  80a274:	38bfff17 	ldw	r2,-4(r7)
  80a278:	38ffff04 	addi	r3,r7,-4
  80a27c:	1000041e 	bne	r2,zero,80a290 <__mdiff+0x118>
  80a280:	18ffff04 	addi	r3,r3,-4
  80a284:	18800017 	ldw	r2,0(r3)
  80a288:	52bfffc4 	addi	r10,r10,-1
  80a28c:	103ffc26 	beq	r2,zero,80a280 <__mdiff+0x108>
  80a290:	6005883a 	mov	r2,r12
  80a294:	62800415 	stw	r10,16(r12)
  80a298:	dfc00417 	ldw	ra,16(sp)
  80a29c:	dcc00317 	ldw	r19,12(sp)
  80a2a0:	dc800217 	ldw	r18,8(sp)
  80a2a4:	dc400117 	ldw	r17,4(sp)
  80a2a8:	dc000017 	ldw	r16,0(sp)
  80a2ac:	dec00504 	addi	sp,sp,20
  80a2b0:	f800283a 	ret
  80a2b4:	9009883a 	mov	r4,r18
  80a2b8:	000b883a 	mov	r5,zero
  80a2bc:	0809f400 	call	809f40 <_Balloc>
  80a2c0:	1019883a 	mov	r12,r2
  80a2c4:	00800044 	movi	r2,1
  80a2c8:	60800415 	stw	r2,16(r12)
  80a2cc:	6005883a 	mov	r2,r12
  80a2d0:	60000515 	stw	zero,20(r12)
  80a2d4:	dfc00417 	ldw	ra,16(sp)
  80a2d8:	dcc00317 	ldw	r19,12(sp)
  80a2dc:	dc800217 	ldw	r18,8(sp)
  80a2e0:	dc400117 	ldw	r17,4(sp)
  80a2e4:	dc000017 	ldw	r16,0(sp)
  80a2e8:	dec00504 	addi	sp,sp,20
  80a2ec:	f800283a 	ret
  80a2f0:	880d883a 	mov	r6,r17
  80a2f4:	04c00044 	movi	r19,1
  80a2f8:	8023883a 	mov	r17,r16
  80a2fc:	3021883a 	mov	r16,r6
  80a300:	003fac06 	br	80a1b4 <__mdiff+0x3c>

0080a304 <__lshift>:
  80a304:	defff904 	addi	sp,sp,-28
  80a308:	28800417 	ldw	r2,16(r5)
  80a30c:	dc000015 	stw	r16,0(sp)
  80a310:	3021d17a 	srai	r16,r6,5
  80a314:	28c00217 	ldw	r3,8(r5)
  80a318:	10800044 	addi	r2,r2,1
  80a31c:	dc400115 	stw	r17,4(sp)
  80a320:	80a3883a 	add	r17,r16,r2
  80a324:	dd400515 	stw	r21,20(sp)
  80a328:	dd000415 	stw	r20,16(sp)
  80a32c:	dc800215 	stw	r18,8(sp)
  80a330:	dfc00615 	stw	ra,24(sp)
  80a334:	2825883a 	mov	r18,r5
  80a338:	dcc00315 	stw	r19,12(sp)
  80a33c:	3029883a 	mov	r20,r6
  80a340:	202b883a 	mov	r21,r4
  80a344:	29400117 	ldw	r5,4(r5)
  80a348:	1c40030e 	bge	r3,r17,80a358 <__lshift+0x54>
  80a34c:	18c7883a 	add	r3,r3,r3
  80a350:	29400044 	addi	r5,r5,1
  80a354:	1c7ffd16 	blt	r3,r17,80a34c <__lshift+0x48>
  80a358:	a809883a 	mov	r4,r21
  80a35c:	0809f400 	call	809f40 <_Balloc>
  80a360:	1027883a 	mov	r19,r2
  80a364:	11400504 	addi	r5,r2,20
  80a368:	0400090e 	bge	zero,r16,80a390 <__lshift+0x8c>
  80a36c:	2805883a 	mov	r2,r5
  80a370:	0007883a 	mov	r3,zero
  80a374:	18c00044 	addi	r3,r3,1
  80a378:	10000015 	stw	zero,0(r2)
  80a37c:	10800104 	addi	r2,r2,4
  80a380:	80fffc1e 	bne	r16,r3,80a374 <__lshift+0x70>
  80a384:	8405883a 	add	r2,r16,r16
  80a388:	1085883a 	add	r2,r2,r2
  80a38c:	288b883a 	add	r5,r5,r2
  80a390:	90800417 	ldw	r2,16(r18)
  80a394:	91000504 	addi	r4,r18,20
  80a398:	a18007cc 	andi	r6,r20,31
  80a39c:	1085883a 	add	r2,r2,r2
  80a3a0:	1085883a 	add	r2,r2,r2
  80a3a4:	208f883a 	add	r7,r4,r2
  80a3a8:	30001e26 	beq	r6,zero,80a424 <__lshift+0x120>
  80a3ac:	00800804 	movi	r2,32
  80a3b0:	1191c83a 	sub	r8,r2,r6
  80a3b4:	0007883a 	mov	r3,zero
  80a3b8:	20800017 	ldw	r2,0(r4)
  80a3bc:	1184983a 	sll	r2,r2,r6
  80a3c0:	1884b03a 	or	r2,r3,r2
  80a3c4:	28800015 	stw	r2,0(r5)
  80a3c8:	20c00017 	ldw	r3,0(r4)
  80a3cc:	21000104 	addi	r4,r4,4
  80a3d0:	29400104 	addi	r5,r5,4
  80a3d4:	1a06d83a 	srl	r3,r3,r8
  80a3d8:	21fff736 	bltu	r4,r7,80a3b8 <__lshift+0xb4>
  80a3dc:	28c00015 	stw	r3,0(r5)
  80a3e0:	18000126 	beq	r3,zero,80a3e8 <__lshift+0xe4>
  80a3e4:	8c400044 	addi	r17,r17,1
  80a3e8:	88bfffc4 	addi	r2,r17,-1
  80a3ec:	98800415 	stw	r2,16(r19)
  80a3f0:	a809883a 	mov	r4,r21
  80a3f4:	900b883a 	mov	r5,r18
  80a3f8:	08099c00 	call	8099c0 <_Bfree>
  80a3fc:	9805883a 	mov	r2,r19
  80a400:	dfc00617 	ldw	ra,24(sp)
  80a404:	dd400517 	ldw	r21,20(sp)
  80a408:	dd000417 	ldw	r20,16(sp)
  80a40c:	dcc00317 	ldw	r19,12(sp)
  80a410:	dc800217 	ldw	r18,8(sp)
  80a414:	dc400117 	ldw	r17,4(sp)
  80a418:	dc000017 	ldw	r16,0(sp)
  80a41c:	dec00704 	addi	sp,sp,28
  80a420:	f800283a 	ret
  80a424:	20800017 	ldw	r2,0(r4)
  80a428:	21000104 	addi	r4,r4,4
  80a42c:	28800015 	stw	r2,0(r5)
  80a430:	29400104 	addi	r5,r5,4
  80a434:	21ffec2e 	bgeu	r4,r7,80a3e8 <__lshift+0xe4>
  80a438:	20800017 	ldw	r2,0(r4)
  80a43c:	21000104 	addi	r4,r4,4
  80a440:	28800015 	stw	r2,0(r5)
  80a444:	29400104 	addi	r5,r5,4
  80a448:	21fff636 	bltu	r4,r7,80a424 <__lshift+0x120>
  80a44c:	003fe606 	br	80a3e8 <__lshift+0xe4>

0080a450 <__multiply>:
  80a450:	defff904 	addi	sp,sp,-28
  80a454:	dcc00315 	stw	r19,12(sp)
  80a458:	dc800215 	stw	r18,8(sp)
  80a45c:	2cc00417 	ldw	r19,16(r5)
  80a460:	34800417 	ldw	r18,16(r6)
  80a464:	dd000415 	stw	r20,16(sp)
  80a468:	dc400115 	stw	r17,4(sp)
  80a46c:	dfc00615 	stw	ra,24(sp)
  80a470:	dd400515 	stw	r21,20(sp)
  80a474:	dc000015 	stw	r16,0(sp)
  80a478:	2823883a 	mov	r17,r5
  80a47c:	3029883a 	mov	r20,r6
  80a480:	9c80040e 	bge	r19,r18,80a494 <__multiply+0x44>
  80a484:	9027883a 	mov	r19,r18
  80a488:	2c800417 	ldw	r18,16(r5)
  80a48c:	2829883a 	mov	r20,r5
  80a490:	3023883a 	mov	r17,r6
  80a494:	88800217 	ldw	r2,8(r17)
  80a498:	9ca1883a 	add	r16,r19,r18
  80a49c:	89400117 	ldw	r5,4(r17)
  80a4a0:	1400010e 	bge	r2,r16,80a4a8 <__multiply+0x58>
  80a4a4:	29400044 	addi	r5,r5,1
  80a4a8:	0809f400 	call	809f40 <_Balloc>
  80a4ac:	102b883a 	mov	r21,r2
  80a4b0:	8405883a 	add	r2,r16,r16
  80a4b4:	1085883a 	add	r2,r2,r2
  80a4b8:	a9000504 	addi	r4,r21,20
  80a4bc:	209d883a 	add	r14,r4,r2
  80a4c0:	2380042e 	bgeu	r4,r14,80a4d4 <__multiply+0x84>
  80a4c4:	2005883a 	mov	r2,r4
  80a4c8:	10000015 	stw	zero,0(r2)
  80a4cc:	10800104 	addi	r2,r2,4
  80a4d0:	13bffd36 	bltu	r2,r14,80a4c8 <__multiply+0x78>
  80a4d4:	9485883a 	add	r2,r18,r18
  80a4d8:	9cc7883a 	add	r3,r19,r19
  80a4dc:	a1800504 	addi	r6,r20,20
  80a4e0:	1085883a 	add	r2,r2,r2
  80a4e4:	8b400504 	addi	r13,r17,20
  80a4e8:	18c7883a 	add	r3,r3,r3
  80a4ec:	309f883a 	add	r15,r6,r2
  80a4f0:	68d7883a 	add	r11,r13,r3
  80a4f4:	33c03b2e 	bgeu	r6,r15,80a5e4 <__multiply+0x194>
  80a4f8:	2019883a 	mov	r12,r4
  80a4fc:	30800017 	ldw	r2,0(r6)
  80a500:	127fffcc 	andi	r9,r2,65535
  80a504:	48001826 	beq	r9,zero,80a568 <__multiply+0x118>
  80a508:	6811883a 	mov	r8,r13
  80a50c:	600f883a 	mov	r7,r12
  80a510:	0015883a 	mov	r10,zero
  80a514:	40c00017 	ldw	r3,0(r8)
  80a518:	39400017 	ldw	r5,0(r7)
  80a51c:	42000104 	addi	r8,r8,4
  80a520:	193fffcc 	andi	r4,r3,65535
  80a524:	4909383a 	mul	r4,r9,r4
  80a528:	1806d43a 	srli	r3,r3,16
  80a52c:	28bfffcc 	andi	r2,r5,65535
  80a530:	5085883a 	add	r2,r10,r2
  80a534:	2089883a 	add	r4,r4,r2
  80a538:	48c7383a 	mul	r3,r9,r3
  80a53c:	280ad43a 	srli	r5,r5,16
  80a540:	2004d43a 	srli	r2,r4,16
  80a544:	3900000d 	sth	r4,0(r7)
  80a548:	1947883a 	add	r3,r3,r5
  80a54c:	10c5883a 	add	r2,r2,r3
  80a550:	3880008d 	sth	r2,2(r7)
  80a554:	1014d43a 	srli	r10,r2,16
  80a558:	39c00104 	addi	r7,r7,4
  80a55c:	42ffed36 	bltu	r8,r11,80a514 <__multiply+0xc4>
  80a560:	3a800015 	stw	r10,0(r7)
  80a564:	30800017 	ldw	r2,0(r6)
  80a568:	1012d43a 	srli	r9,r2,16
  80a56c:	48001926 	beq	r9,zero,80a5d4 <__multiply+0x184>
  80a570:	60800017 	ldw	r2,0(r12)
  80a574:	6811883a 	mov	r8,r13
  80a578:	600f883a 	mov	r7,r12
  80a57c:	0015883a 	mov	r10,zero
  80a580:	100b883a 	mov	r5,r2
  80a584:	41000017 	ldw	r4,0(r8)
  80a588:	2806d43a 	srli	r3,r5,16
  80a58c:	3880000d 	sth	r2,0(r7)
  80a590:	20bfffcc 	andi	r2,r4,65535
  80a594:	4885383a 	mul	r2,r9,r2
  80a598:	50c7883a 	add	r3,r10,r3
  80a59c:	2008d43a 	srli	r4,r4,16
  80a5a0:	10c5883a 	add	r2,r2,r3
  80a5a4:	3880008d 	sth	r2,2(r7)
  80a5a8:	39c00104 	addi	r7,r7,4
  80a5ac:	39400017 	ldw	r5,0(r7)
  80a5b0:	4909383a 	mul	r4,r9,r4
  80a5b4:	1004d43a 	srli	r2,r2,16
  80a5b8:	28ffffcc 	andi	r3,r5,65535
  80a5bc:	20c9883a 	add	r4,r4,r3
  80a5c0:	1105883a 	add	r2,r2,r4
  80a5c4:	42000104 	addi	r8,r8,4
  80a5c8:	1014d43a 	srli	r10,r2,16
  80a5cc:	42ffed36 	bltu	r8,r11,80a584 <__multiply+0x134>
  80a5d0:	38800015 	stw	r2,0(r7)
  80a5d4:	31800104 	addi	r6,r6,4
  80a5d8:	33c0022e 	bgeu	r6,r15,80a5e4 <__multiply+0x194>
  80a5dc:	63000104 	addi	r12,r12,4
  80a5e0:	003fc606 	br	80a4fc <__multiply+0xac>
  80a5e4:	0400090e 	bge	zero,r16,80a60c <__multiply+0x1bc>
  80a5e8:	70bfff17 	ldw	r2,-4(r14)
  80a5ec:	70ffff04 	addi	r3,r14,-4
  80a5f0:	10000326 	beq	r2,zero,80a600 <__multiply+0x1b0>
  80a5f4:	00000506 	br	80a60c <__multiply+0x1bc>
  80a5f8:	18800017 	ldw	r2,0(r3)
  80a5fc:	1000031e 	bne	r2,zero,80a60c <__multiply+0x1bc>
  80a600:	843fffc4 	addi	r16,r16,-1
  80a604:	18ffff04 	addi	r3,r3,-4
  80a608:	803ffb1e 	bne	r16,zero,80a5f8 <__multiply+0x1a8>
  80a60c:	a805883a 	mov	r2,r21
  80a610:	ac000415 	stw	r16,16(r21)
  80a614:	dfc00617 	ldw	ra,24(sp)
  80a618:	dd400517 	ldw	r21,20(sp)
  80a61c:	dd000417 	ldw	r20,16(sp)
  80a620:	dcc00317 	ldw	r19,12(sp)
  80a624:	dc800217 	ldw	r18,8(sp)
  80a628:	dc400117 	ldw	r17,4(sp)
  80a62c:	dc000017 	ldw	r16,0(sp)
  80a630:	dec00704 	addi	sp,sp,28
  80a634:	f800283a 	ret

0080a638 <__i2b>:
  80a638:	defffd04 	addi	sp,sp,-12
  80a63c:	dc000015 	stw	r16,0(sp)
  80a640:	04000044 	movi	r16,1
  80a644:	dc800115 	stw	r18,4(sp)
  80a648:	2825883a 	mov	r18,r5
  80a64c:	800b883a 	mov	r5,r16
  80a650:	dfc00215 	stw	ra,8(sp)
  80a654:	0809f400 	call	809f40 <_Balloc>
  80a658:	14000415 	stw	r16,16(r2)
  80a65c:	14800515 	stw	r18,20(r2)
  80a660:	dfc00217 	ldw	ra,8(sp)
  80a664:	dc800117 	ldw	r18,4(sp)
  80a668:	dc000017 	ldw	r16,0(sp)
  80a66c:	dec00304 	addi	sp,sp,12
  80a670:	f800283a 	ret

0080a674 <__multadd>:
  80a674:	defffa04 	addi	sp,sp,-24
  80a678:	dc800215 	stw	r18,8(sp)
  80a67c:	2c800417 	ldw	r18,16(r5)
  80a680:	dd000415 	stw	r20,16(sp)
  80a684:	dcc00315 	stw	r19,12(sp)
  80a688:	dc000015 	stw	r16,0(sp)
  80a68c:	dfc00515 	stw	ra,20(sp)
  80a690:	3821883a 	mov	r16,r7
  80a694:	dc400115 	stw	r17,4(sp)
  80a698:	2827883a 	mov	r19,r5
  80a69c:	2029883a 	mov	r20,r4
  80a6a0:	2a000504 	addi	r8,r5,20
  80a6a4:	000f883a 	mov	r7,zero
  80a6a8:	40800017 	ldw	r2,0(r8)
  80a6ac:	39c00044 	addi	r7,r7,1
  80a6b0:	10ffffcc 	andi	r3,r2,65535
  80a6b4:	1987383a 	mul	r3,r3,r6
  80a6b8:	1004d43a 	srli	r2,r2,16
  80a6bc:	1c07883a 	add	r3,r3,r16
  80a6c0:	180ad43a 	srli	r5,r3,16
  80a6c4:	1185383a 	mul	r2,r2,r6
  80a6c8:	18ffffcc 	andi	r3,r3,65535
  80a6cc:	1145883a 	add	r2,r2,r5
  80a6d0:	1008943a 	slli	r4,r2,16
  80a6d4:	1020d43a 	srli	r16,r2,16
  80a6d8:	20c9883a 	add	r4,r4,r3
  80a6dc:	41000015 	stw	r4,0(r8)
  80a6e0:	42000104 	addi	r8,r8,4
  80a6e4:	3cbff016 	blt	r7,r18,80a6a8 <__multadd+0x34>
  80a6e8:	80000826 	beq	r16,zero,80a70c <__multadd+0x98>
  80a6ec:	98800217 	ldw	r2,8(r19)
  80a6f0:	90800f0e 	bge	r18,r2,80a730 <__multadd+0xbc>
  80a6f4:	9485883a 	add	r2,r18,r18
  80a6f8:	1085883a 	add	r2,r2,r2
  80a6fc:	14c5883a 	add	r2,r2,r19
  80a700:	90c00044 	addi	r3,r18,1
  80a704:	14000515 	stw	r16,20(r2)
  80a708:	98c00415 	stw	r3,16(r19)
  80a70c:	9805883a 	mov	r2,r19
  80a710:	dfc00517 	ldw	ra,20(sp)
  80a714:	dd000417 	ldw	r20,16(sp)
  80a718:	dcc00317 	ldw	r19,12(sp)
  80a71c:	dc800217 	ldw	r18,8(sp)
  80a720:	dc400117 	ldw	r17,4(sp)
  80a724:	dc000017 	ldw	r16,0(sp)
  80a728:	dec00604 	addi	sp,sp,24
  80a72c:	f800283a 	ret
  80a730:	99400117 	ldw	r5,4(r19)
  80a734:	a009883a 	mov	r4,r20
  80a738:	29400044 	addi	r5,r5,1
  80a73c:	0809f400 	call	809f40 <_Balloc>
  80a740:	99800417 	ldw	r6,16(r19)
  80a744:	99400304 	addi	r5,r19,12
  80a748:	11000304 	addi	r4,r2,12
  80a74c:	318d883a 	add	r6,r6,r6
  80a750:	318d883a 	add	r6,r6,r6
  80a754:	31800204 	addi	r6,r6,8
  80a758:	1023883a 	mov	r17,r2
  80a75c:	080336c0 	call	80336c <memcpy>
  80a760:	980b883a 	mov	r5,r19
  80a764:	a009883a 	mov	r4,r20
  80a768:	08099c00 	call	8099c0 <_Bfree>
  80a76c:	8827883a 	mov	r19,r17
  80a770:	003fe006 	br	80a6f4 <__multadd+0x80>

0080a774 <__pow5mult>:
  80a774:	defffa04 	addi	sp,sp,-24
  80a778:	308000cc 	andi	r2,r6,3
  80a77c:	dd000415 	stw	r20,16(sp)
  80a780:	dcc00315 	stw	r19,12(sp)
  80a784:	dc000015 	stw	r16,0(sp)
  80a788:	dfc00515 	stw	ra,20(sp)
  80a78c:	dc800215 	stw	r18,8(sp)
  80a790:	dc400115 	stw	r17,4(sp)
  80a794:	3021883a 	mov	r16,r6
  80a798:	2027883a 	mov	r19,r4
  80a79c:	2829883a 	mov	r20,r5
  80a7a0:	10002b1e 	bne	r2,zero,80a850 <__pow5mult+0xdc>
  80a7a4:	8025d0ba 	srai	r18,r16,2
  80a7a8:	90001b26 	beq	r18,zero,80a818 <__pow5mult+0xa4>
  80a7ac:	9c001217 	ldw	r16,72(r19)
  80a7b0:	8000081e 	bne	r16,zero,80a7d4 <__pow5mult+0x60>
  80a7b4:	00003006 	br	80a878 <__pow5mult+0x104>
  80a7b8:	800b883a 	mov	r5,r16
  80a7bc:	800d883a 	mov	r6,r16
  80a7c0:	9809883a 	mov	r4,r19
  80a7c4:	90001426 	beq	r18,zero,80a818 <__pow5mult+0xa4>
  80a7c8:	80800017 	ldw	r2,0(r16)
  80a7cc:	10001b26 	beq	r2,zero,80a83c <__pow5mult+0xc8>
  80a7d0:	1021883a 	mov	r16,r2
  80a7d4:	9080004c 	andi	r2,r18,1
  80a7d8:	1005003a 	cmpeq	r2,r2,zero
  80a7dc:	9025d07a 	srai	r18,r18,1
  80a7e0:	800d883a 	mov	r6,r16
  80a7e4:	9809883a 	mov	r4,r19
  80a7e8:	a00b883a 	mov	r5,r20
  80a7ec:	103ff21e 	bne	r2,zero,80a7b8 <__pow5mult+0x44>
  80a7f0:	080a4500 	call	80a450 <__multiply>
  80a7f4:	a00b883a 	mov	r5,r20
  80a7f8:	9809883a 	mov	r4,r19
  80a7fc:	1023883a 	mov	r17,r2
  80a800:	08099c00 	call	8099c0 <_Bfree>
  80a804:	8829883a 	mov	r20,r17
  80a808:	800b883a 	mov	r5,r16
  80a80c:	800d883a 	mov	r6,r16
  80a810:	9809883a 	mov	r4,r19
  80a814:	903fec1e 	bne	r18,zero,80a7c8 <__pow5mult+0x54>
  80a818:	a005883a 	mov	r2,r20
  80a81c:	dfc00517 	ldw	ra,20(sp)
  80a820:	dd000417 	ldw	r20,16(sp)
  80a824:	dcc00317 	ldw	r19,12(sp)
  80a828:	dc800217 	ldw	r18,8(sp)
  80a82c:	dc400117 	ldw	r17,4(sp)
  80a830:	dc000017 	ldw	r16,0(sp)
  80a834:	dec00604 	addi	sp,sp,24
  80a838:	f800283a 	ret
  80a83c:	080a4500 	call	80a450 <__multiply>
  80a840:	80800015 	stw	r2,0(r16)
  80a844:	1021883a 	mov	r16,r2
  80a848:	10000015 	stw	zero,0(r2)
  80a84c:	003fe106 	br	80a7d4 <__pow5mult+0x60>
  80a850:	1085883a 	add	r2,r2,r2
  80a854:	00c02074 	movhi	r3,129
  80a858:	18d4c304 	addi	r3,r3,21260
  80a85c:	1085883a 	add	r2,r2,r2
  80a860:	10c5883a 	add	r2,r2,r3
  80a864:	11bfff17 	ldw	r6,-4(r2)
  80a868:	000f883a 	mov	r7,zero
  80a86c:	080a6740 	call	80a674 <__multadd>
  80a870:	1029883a 	mov	r20,r2
  80a874:	003fcb06 	br	80a7a4 <__pow5mult+0x30>
  80a878:	9809883a 	mov	r4,r19
  80a87c:	01409c44 	movi	r5,625
  80a880:	080a6380 	call	80a638 <__i2b>
  80a884:	98801215 	stw	r2,72(r19)
  80a888:	1021883a 	mov	r16,r2
  80a88c:	10000015 	stw	zero,0(r2)
  80a890:	003fd006 	br	80a7d4 <__pow5mult+0x60>

0080a894 <__s2b>:
  80a894:	defff904 	addi	sp,sp,-28
  80a898:	dcc00315 	stw	r19,12(sp)
  80a89c:	dc800215 	stw	r18,8(sp)
  80a8a0:	2827883a 	mov	r19,r5
  80a8a4:	2025883a 	mov	r18,r4
  80a8a8:	01400244 	movi	r5,9
  80a8ac:	39000204 	addi	r4,r7,8
  80a8b0:	dd000415 	stw	r20,16(sp)
  80a8b4:	dc400115 	stw	r17,4(sp)
  80a8b8:	dfc00615 	stw	ra,24(sp)
  80a8bc:	dd400515 	stw	r21,20(sp)
  80a8c0:	dc000015 	stw	r16,0(sp)
  80a8c4:	3829883a 	mov	r20,r7
  80a8c8:	3023883a 	mov	r17,r6
  80a8cc:	080fcf40 	call	80fcf4 <__divsi3>
  80a8d0:	00c00044 	movi	r3,1
  80a8d4:	1880350e 	bge	r3,r2,80a9ac <__s2b+0x118>
  80a8d8:	000b883a 	mov	r5,zero
  80a8dc:	18c7883a 	add	r3,r3,r3
  80a8e0:	29400044 	addi	r5,r5,1
  80a8e4:	18bffd16 	blt	r3,r2,80a8dc <__s2b+0x48>
  80a8e8:	9009883a 	mov	r4,r18
  80a8ec:	0809f400 	call	809f40 <_Balloc>
  80a8f0:	1011883a 	mov	r8,r2
  80a8f4:	d8800717 	ldw	r2,28(sp)
  80a8f8:	00c00044 	movi	r3,1
  80a8fc:	01800244 	movi	r6,9
  80a900:	40800515 	stw	r2,20(r8)
  80a904:	40c00415 	stw	r3,16(r8)
  80a908:	3440260e 	bge	r6,r17,80a9a4 <__s2b+0x110>
  80a90c:	3021883a 	mov	r16,r6
  80a910:	99ab883a 	add	r21,r19,r6
  80a914:	9c05883a 	add	r2,r19,r16
  80a918:	11c00007 	ldb	r7,0(r2)
  80a91c:	400b883a 	mov	r5,r8
  80a920:	9009883a 	mov	r4,r18
  80a924:	39fff404 	addi	r7,r7,-48
  80a928:	01800284 	movi	r6,10
  80a92c:	080a6740 	call	80a674 <__multadd>
  80a930:	84000044 	addi	r16,r16,1
  80a934:	1011883a 	mov	r8,r2
  80a938:	8c3ff61e 	bne	r17,r16,80a914 <__s2b+0x80>
  80a93c:	ac45883a 	add	r2,r21,r17
  80a940:	117ffe04 	addi	r5,r2,-8
  80a944:	880d883a 	mov	r6,r17
  80a948:	35000c0e 	bge	r6,r20,80a97c <__s2b+0xe8>
  80a94c:	a185c83a 	sub	r2,r20,r6
  80a950:	2821883a 	mov	r16,r5
  80a954:	28a3883a 	add	r17,r5,r2
  80a958:	81c00007 	ldb	r7,0(r16)
  80a95c:	400b883a 	mov	r5,r8
  80a960:	9009883a 	mov	r4,r18
  80a964:	39fff404 	addi	r7,r7,-48
  80a968:	01800284 	movi	r6,10
  80a96c:	080a6740 	call	80a674 <__multadd>
  80a970:	84000044 	addi	r16,r16,1
  80a974:	1011883a 	mov	r8,r2
  80a978:	847ff71e 	bne	r16,r17,80a958 <__s2b+0xc4>
  80a97c:	4005883a 	mov	r2,r8
  80a980:	dfc00617 	ldw	ra,24(sp)
  80a984:	dd400517 	ldw	r21,20(sp)
  80a988:	dd000417 	ldw	r20,16(sp)
  80a98c:	dcc00317 	ldw	r19,12(sp)
  80a990:	dc800217 	ldw	r18,8(sp)
  80a994:	dc400117 	ldw	r17,4(sp)
  80a998:	dc000017 	ldw	r16,0(sp)
  80a99c:	dec00704 	addi	sp,sp,28
  80a9a0:	f800283a 	ret
  80a9a4:	99400284 	addi	r5,r19,10
  80a9a8:	003fe706 	br	80a948 <__s2b+0xb4>
  80a9ac:	000b883a 	mov	r5,zero
  80a9b0:	003fcd06 	br	80a8e8 <__s2b+0x54>

0080a9b4 <_read_r>:
  80a9b4:	defffd04 	addi	sp,sp,-12
  80a9b8:	dc000015 	stw	r16,0(sp)
  80a9bc:	040020b4 	movhi	r16,130
  80a9c0:	8423a004 	addi	r16,r16,-29056
  80a9c4:	dc400115 	stw	r17,4(sp)
  80a9c8:	80000015 	stw	zero,0(r16)
  80a9cc:	2023883a 	mov	r17,r4
  80a9d0:	2809883a 	mov	r4,r5
  80a9d4:	300b883a 	mov	r5,r6
  80a9d8:	380d883a 	mov	r6,r7
  80a9dc:	dfc00215 	stw	ra,8(sp)
  80a9e0:	08112f00 	call	8112f0 <read>
  80a9e4:	1007883a 	mov	r3,r2
  80a9e8:	00bfffc4 	movi	r2,-1
  80a9ec:	18800626 	beq	r3,r2,80aa08 <_read_r+0x54>
  80a9f0:	1805883a 	mov	r2,r3
  80a9f4:	dfc00217 	ldw	ra,8(sp)
  80a9f8:	dc400117 	ldw	r17,4(sp)
  80a9fc:	dc000017 	ldw	r16,0(sp)
  80aa00:	dec00304 	addi	sp,sp,12
  80aa04:	f800283a 	ret
  80aa08:	80800017 	ldw	r2,0(r16)
  80aa0c:	103ff826 	beq	r2,zero,80a9f0 <_read_r+0x3c>
  80aa10:	88800015 	stw	r2,0(r17)
  80aa14:	1805883a 	mov	r2,r3
  80aa18:	dfc00217 	ldw	ra,8(sp)
  80aa1c:	dc400117 	ldw	r17,4(sp)
  80aa20:	dc000017 	ldw	r16,0(sp)
  80aa24:	dec00304 	addi	sp,sp,12
  80aa28:	f800283a 	ret

0080aa2c <__isinfd>:
  80aa2c:	200d883a 	mov	r6,r4
  80aa30:	0109c83a 	sub	r4,zero,r4
  80aa34:	2188b03a 	or	r4,r4,r6
  80aa38:	2008d7fa 	srli	r4,r4,31
  80aa3c:	00a00034 	movhi	r2,32768
  80aa40:	10bfffc4 	addi	r2,r2,-1
  80aa44:	1144703a 	and	r2,r2,r5
  80aa48:	2088b03a 	or	r4,r4,r2
  80aa4c:	009ffc34 	movhi	r2,32752
  80aa50:	1105c83a 	sub	r2,r2,r4
  80aa54:	0087c83a 	sub	r3,zero,r2
  80aa58:	10c4b03a 	or	r2,r2,r3
  80aa5c:	1004d7fa 	srli	r2,r2,31
  80aa60:	00c00044 	movi	r3,1
  80aa64:	1885c83a 	sub	r2,r3,r2
  80aa68:	f800283a 	ret

0080aa6c <__isnand>:
  80aa6c:	200d883a 	mov	r6,r4
  80aa70:	0109c83a 	sub	r4,zero,r4
  80aa74:	2188b03a 	or	r4,r4,r6
  80aa78:	2008d7fa 	srli	r4,r4,31
  80aa7c:	00a00034 	movhi	r2,32768
  80aa80:	10bfffc4 	addi	r2,r2,-1
  80aa84:	1144703a 	and	r2,r2,r5
  80aa88:	2088b03a 	or	r4,r4,r2
  80aa8c:	009ffc34 	movhi	r2,32752
  80aa90:	1105c83a 	sub	r2,r2,r4
  80aa94:	1004d7fa 	srli	r2,r2,31
  80aa98:	f800283a 	ret

0080aa9c <__sccl>:
  80aa9c:	28c00003 	ldbu	r3,0(r5)
  80aaa0:	00801784 	movi	r2,94
  80aaa4:	2a000044 	addi	r8,r5,1
  80aaa8:	18802526 	beq	r3,r2,80ab40 <__sccl+0xa4>
  80aaac:	180f883a 	mov	r7,r3
  80aab0:	0013883a 	mov	r9,zero
  80aab4:	000d883a 	mov	r6,zero
  80aab8:	0007883a 	mov	r3,zero
  80aabc:	01404004 	movi	r5,256
  80aac0:	1905883a 	add	r2,r3,r4
  80aac4:	18c00044 	addi	r3,r3,1
  80aac8:	11800005 	stb	r6,0(r2)
  80aacc:	197ffc1e 	bne	r3,r5,80aac0 <__sccl+0x24>
  80aad0:	38000c26 	beq	r7,zero,80ab04 <__sccl+0x68>
  80aad4:	00800044 	movi	r2,1
  80aad8:	124dc83a 	sub	r6,r2,r9
  80aadc:	3905883a 	add	r2,r7,r4
  80aae0:	11800005 	stb	r6,0(r2)
  80aae4:	41400044 	addi	r5,r8,1
  80aae8:	02400b44 	movi	r9,45
  80aaec:	02801744 	movi	r10,93
  80aaf0:	28bfffc3 	ldbu	r2,-1(r5)
  80aaf4:	2811883a 	mov	r8,r5
  80aaf8:	12400726 	beq	r2,r9,80ab18 <__sccl+0x7c>
  80aafc:	12800226 	beq	r2,r10,80ab08 <__sccl+0x6c>
  80ab00:	1000031e 	bne	r2,zero,80ab10 <__sccl+0x74>
  80ab04:	423fffc4 	addi	r8,r8,-1
  80ab08:	4005883a 	mov	r2,r8
  80ab0c:	f800283a 	ret
  80ab10:	100f883a 	mov	r7,r2
  80ab14:	003ff106 	br	80aadc <__sccl+0x40>
  80ab18:	28c00003 	ldbu	r3,0(r5)
  80ab1c:	1a800d26 	beq	r3,r10,80ab54 <__sccl+0xb8>
  80ab20:	19c00c16 	blt	r3,r7,80ab54 <__sccl+0xb8>
  80ab24:	21c5883a 	add	r2,r4,r7
  80ab28:	39c00044 	addi	r7,r7,1
  80ab2c:	11800045 	stb	r6,1(r2)
  80ab30:	10800044 	addi	r2,r2,1
  80ab34:	38fffc16 	blt	r7,r3,80ab28 <__sccl+0x8c>
  80ab38:	29400084 	addi	r5,r5,2
  80ab3c:	003fec06 	br	80aaf0 <__sccl+0x54>
  80ab40:	29c00043 	ldbu	r7,1(r5)
  80ab44:	02400044 	movi	r9,1
  80ab48:	2a000084 	addi	r8,r5,2
  80ab4c:	480d883a 	mov	r6,r9
  80ab50:	003fd906 	br	80aab8 <__sccl+0x1c>
  80ab54:	01c00b44 	movi	r7,45
  80ab58:	003fe006 	br	80aadc <__sccl+0x40>

0080ab5c <nanf>:
  80ab5c:	009ff034 	movhi	r2,32704
  80ab60:	f800283a 	ret

0080ab64 <strcmp>:
  80ab64:	2144b03a 	or	r2,r4,r5
  80ab68:	108000cc 	andi	r2,r2,3
  80ab6c:	10001d1e 	bne	r2,zero,80abe4 <strcmp+0x80>
  80ab70:	200f883a 	mov	r7,r4
  80ab74:	28800017 	ldw	r2,0(r5)
  80ab78:	21000017 	ldw	r4,0(r4)
  80ab7c:	280d883a 	mov	r6,r5
  80ab80:	2080161e 	bne	r4,r2,80abdc <strcmp+0x78>
  80ab84:	023fbff4 	movhi	r8,65279
  80ab88:	423fbfc4 	addi	r8,r8,-257
  80ab8c:	2207883a 	add	r3,r4,r8
  80ab90:	01602074 	movhi	r5,32897
  80ab94:	29602004 	addi	r5,r5,-32640
  80ab98:	1946703a 	and	r3,r3,r5
  80ab9c:	0104303a 	nor	r2,zero,r4
  80aba0:	10c4703a 	and	r2,r2,r3
  80aba4:	10001c1e 	bne	r2,zero,80ac18 <strcmp+0xb4>
  80aba8:	4013883a 	mov	r9,r8
  80abac:	2811883a 	mov	r8,r5
  80abb0:	00000106 	br	80abb8 <strcmp+0x54>
  80abb4:	1800181e 	bne	r3,zero,80ac18 <strcmp+0xb4>
  80abb8:	39c00104 	addi	r7,r7,4
  80abbc:	39000017 	ldw	r4,0(r7)
  80abc0:	31800104 	addi	r6,r6,4
  80abc4:	31400017 	ldw	r5,0(r6)
  80abc8:	2245883a 	add	r2,r4,r9
  80abcc:	1204703a 	and	r2,r2,r8
  80abd0:	0106303a 	nor	r3,zero,r4
  80abd4:	1886703a 	and	r3,r3,r2
  80abd8:	217ff626 	beq	r4,r5,80abb4 <strcmp+0x50>
  80abdc:	3809883a 	mov	r4,r7
  80abe0:	300b883a 	mov	r5,r6
  80abe4:	20c00007 	ldb	r3,0(r4)
  80abe8:	1800051e 	bne	r3,zero,80ac00 <strcmp+0x9c>
  80abec:	00000606 	br	80ac08 <strcmp+0xa4>
  80abf0:	21000044 	addi	r4,r4,1
  80abf4:	20c00007 	ldb	r3,0(r4)
  80abf8:	29400044 	addi	r5,r5,1
  80abfc:	18000226 	beq	r3,zero,80ac08 <strcmp+0xa4>
  80ac00:	28800007 	ldb	r2,0(r5)
  80ac04:	18bffa26 	beq	r3,r2,80abf0 <strcmp+0x8c>
  80ac08:	20c00003 	ldbu	r3,0(r4)
  80ac0c:	28800003 	ldbu	r2,0(r5)
  80ac10:	1885c83a 	sub	r2,r3,r2
  80ac14:	f800283a 	ret
  80ac18:	0005883a 	mov	r2,zero
  80ac1c:	f800283a 	ret

0080ac20 <match>:
  80ac20:	21800017 	ldw	r6,0(r4)
  80ac24:	01c01004 	movi	r7,64
  80ac28:	02001684 	movi	r8,90
  80ac2c:	28800007 	ldb	r2,0(r5)
  80ac30:	29400044 	addi	r5,r5,1
  80ac34:	10000826 	beq	r2,zero,80ac58 <match+0x38>
  80ac38:	31800044 	addi	r6,r6,1
  80ac3c:	30c00007 	ldb	r3,0(r6)
  80ac40:	38c0020e 	bge	r7,r3,80ac4c <match+0x2c>
  80ac44:	40c00116 	blt	r8,r3,80ac4c <match+0x2c>
  80ac48:	18c00804 	addi	r3,r3,32
  80ac4c:	18bff726 	beq	r3,r2,80ac2c <match+0xc>
  80ac50:	0005883a 	mov	r2,zero
  80ac54:	f800283a 	ret
  80ac58:	30800044 	addi	r2,r6,1
  80ac5c:	20800015 	stw	r2,0(r4)
  80ac60:	00800044 	movi	r2,1
  80ac64:	f800283a 	ret

0080ac68 <_strtod_r>:
  80ac68:	deffde04 	addi	sp,sp,-136
  80ac6c:	df002015 	stw	fp,128(sp)
  80ac70:	dd401d15 	stw	r21,116(sp)
  80ac74:	dc401915 	stw	r17,100(sp)
  80ac78:	dfc02115 	stw	ra,132(sp)
  80ac7c:	ddc01f15 	stw	r23,124(sp)
  80ac80:	dd801e15 	stw	r22,120(sp)
  80ac84:	dd001c15 	stw	r20,112(sp)
  80ac88:	dcc01b15 	stw	r19,108(sp)
  80ac8c:	dc801a15 	stw	r18,104(sp)
  80ac90:	dc001815 	stw	r16,96(sp)
  80ac94:	2823883a 	mov	r17,r5
  80ac98:	202b883a 	mov	r21,r4
  80ac9c:	d9801515 	stw	r6,84(sp)
  80aca0:	d8000915 	stw	zero,36(sp)
  80aca4:	d8000a15 	stw	zero,40(sp)
  80aca8:	d9400415 	stw	r5,16(sp)
  80acac:	df000904 	addi	fp,sp,36
  80acb0:	da000417 	ldw	r8,16(sp)
  80acb4:	00800b44 	movi	r2,45
  80acb8:	40c00003 	ldbu	r3,0(r8)
  80acbc:	10c03536 	bltu	r2,r3,80ad94 <_strtod_r+0x12c>
  80acc0:	18c5883a 	add	r2,r3,r3
  80acc4:	1085883a 	add	r2,r2,r2
  80acc8:	00c02074 	movhi	r3,129
  80accc:	18eb3704 	addi	r3,r3,-21284
  80acd0:	10c5883a 	add	r2,r2,r3
  80acd4:	11000017 	ldw	r4,0(r2)
  80acd8:	2000683a 	jmp	r4
  80acdc:	0080aed0 	cmplti	r2,zero,699
  80ace0:	0080ad94 	movui	r2,694
  80ace4:	0080ad94 	movui	r2,694
  80ace8:	0080ad94 	movui	r2,694
  80acec:	0080ad94 	movui	r2,694
  80acf0:	0080ad94 	movui	r2,694
  80acf4:	0080ad94 	movui	r2,694
  80acf8:	0080ad94 	movui	r2,694
  80acfc:	0080ad94 	movui	r2,694
  80ad00:	0080b1e8 	cmpgeui	r2,zero,711
  80ad04:	0080b1e8 	cmpgeui	r2,zero,711
  80ad08:	0080b1e8 	cmpgeui	r2,zero,711
  80ad0c:	0080b1e8 	cmpgeui	r2,zero,711
  80ad10:	0080b1e8 	cmpgeui	r2,zero,711
  80ad14:	0080ad94 	movui	r2,694
  80ad18:	0080ad94 	movui	r2,694
  80ad1c:	0080ad94 	movui	r2,694
  80ad20:	0080ad94 	movui	r2,694
  80ad24:	0080ad94 	movui	r2,694
  80ad28:	0080ad94 	movui	r2,694
  80ad2c:	0080ad94 	movui	r2,694
  80ad30:	0080ad94 	movui	r2,694
  80ad34:	0080ad94 	movui	r2,694
  80ad38:	0080ad94 	movui	r2,694
  80ad3c:	0080ad94 	movui	r2,694
  80ad40:	0080ad94 	movui	r2,694
  80ad44:	0080ad94 	movui	r2,694
  80ad48:	0080ad94 	movui	r2,694
  80ad4c:	0080ad94 	movui	r2,694
  80ad50:	0080ad94 	movui	r2,694
  80ad54:	0080ad94 	movui	r2,694
  80ad58:	0080ad94 	movui	r2,694
  80ad5c:	0080b1e8 	cmpgeui	r2,zero,711
  80ad60:	0080ad94 	movui	r2,694
  80ad64:	0080ad94 	movui	r2,694
  80ad68:	0080ad94 	movui	r2,694
  80ad6c:	0080ad94 	movui	r2,694
  80ad70:	0080ad94 	movui	r2,694
  80ad74:	0080ad94 	movui	r2,694
  80ad78:	0080ad94 	movui	r2,694
  80ad7c:	0080ad94 	movui	r2,694
  80ad80:	0080ad94 	movui	r2,694
  80ad84:	0080ad94 	movui	r2,694
  80ad88:	0080b1c8 	cmpgei	r2,zero,711
  80ad8c:	0080ad94 	movui	r2,694
  80ad90:	0080b1f4 	movhi	r2,711
  80ad94:	d8001115 	stw	zero,68(sp)
  80ad98:	40c00007 	ldb	r3,0(r8)
  80ad9c:	00800c04 	movi	r2,48
  80ada0:	1880d026 	beq	r3,r2,80b0e4 <_strtod_r+0x47c>
  80ada4:	001f883a 	mov	r15,zero
  80ada8:	41000007 	ldb	r4,0(r8)
  80adac:	00c00bc4 	movi	r3,47
  80adb0:	402d883a 	mov	r22,r8
  80adb4:	1903470e 	bge	r3,r4,80bad4 <_strtod_r+0xe6c>
  80adb8:	00800e44 	movi	r2,57
  80adbc:	11034516 	blt	r2,r4,80bad4 <_strtod_r+0xe6c>
  80adc0:	180f883a 	mov	r7,r3
  80adc4:	1013883a 	mov	r9,r2
  80adc8:	4007883a 	mov	r3,r8
  80adcc:	000d883a 	mov	r6,zero
  80add0:	0029883a 	mov	r20,zero
  80add4:	0021883a 	mov	r16,zero
  80add8:	01400204 	movi	r5,8
  80addc:	028003c4 	movi	r10,15
  80ade0:	29803116 	blt	r5,r6,80aea8 <_strtod_r+0x240>
  80ade4:	a08002a4 	muli	r2,r20,10
  80ade8:	1105883a 	add	r2,r2,r4
  80adec:	153ff404 	addi	r20,r2,-48
  80adf0:	1a000044 	addi	r8,r3,1
  80adf4:	da000415 	stw	r8,16(sp)
  80adf8:	41000007 	ldb	r4,0(r8)
  80adfc:	31800044 	addi	r6,r6,1
  80ae00:	4007883a 	mov	r3,r8
  80ae04:	3900010e 	bge	r7,r4,80ae0c <_strtod_r+0x1a4>
  80ae08:	493ff50e 	bge	r9,r4,80ade0 <_strtod_r+0x178>
  80ae0c:	00800b84 	movi	r2,46
  80ae10:	2080c126 	beq	r4,r2,80b118 <_strtod_r+0x4b0>
  80ae14:	3027883a 	mov	r19,r6
  80ae18:	0025883a 	mov	r18,zero
  80ae1c:	0015883a 	mov	r10,zero
  80ae20:	000f883a 	mov	r7,zero
  80ae24:	00801944 	movi	r2,101
  80ae28:	20802426 	beq	r4,r2,80aebc <_strtod_r+0x254>
  80ae2c:	00801144 	movi	r2,69
  80ae30:	20802226 	beq	r4,r2,80aebc <_strtod_r+0x254>
  80ae34:	9816c03a 	cmpne	r11,r19,zero
  80ae38:	000b883a 	mov	r5,zero
  80ae3c:	5800631e 	bne	r11,zero,80afcc <_strtod_r+0x364>
  80ae40:	3800c126 	beq	r7,zero,80b148 <_strtod_r+0x4e0>
  80ae44:	d8c01517 	ldw	r3,84(sp)
  80ae48:	18000226 	beq	r3,zero,80ae54 <_strtod_r+0x1ec>
  80ae4c:	d8800417 	ldw	r2,16(sp)
  80ae50:	18800015 	stw	r2,0(r3)
  80ae54:	d9001117 	ldw	r4,68(sp)
  80ae58:	2005003a 	cmpeq	r2,r4,zero
  80ae5c:	10001f1e 	bne	r2,zero,80aedc <_strtod_r+0x274>
  80ae60:	e0800017 	ldw	r2,0(fp)
  80ae64:	e0c00117 	ldw	r3,4(fp)
  80ae68:	1009883a 	mov	r4,r2
  80ae6c:	1960003c 	xorhi	r5,r3,32768
  80ae70:	2005883a 	mov	r2,r4
  80ae74:	2807883a 	mov	r3,r5
  80ae78:	dfc02117 	ldw	ra,132(sp)
  80ae7c:	df002017 	ldw	fp,128(sp)
  80ae80:	ddc01f17 	ldw	r23,124(sp)
  80ae84:	dd801e17 	ldw	r22,120(sp)
  80ae88:	dd401d17 	ldw	r21,116(sp)
  80ae8c:	dd001c17 	ldw	r20,112(sp)
  80ae90:	dcc01b17 	ldw	r19,108(sp)
  80ae94:	dc801a17 	ldw	r18,104(sp)
  80ae98:	dc401917 	ldw	r17,100(sp)
  80ae9c:	dc001817 	ldw	r16,96(sp)
  80aea0:	dec02204 	addi	sp,sp,136
  80aea4:	f800283a 	ret
  80aea8:	51bfd116 	blt	r10,r6,80adf0 <_strtod_r+0x188>
  80aeac:	808002a4 	muli	r2,r16,10
  80aeb0:	1105883a 	add	r2,r2,r4
  80aeb4:	143ff404 	addi	r16,r2,-48
  80aeb8:	003fcd06 	br	80adf0 <_strtod_r+0x188>
  80aebc:	9816c03a 	cmpne	r11,r19,zero
  80aec0:	5800091e 	bne	r11,zero,80aee8 <_strtod_r+0x280>
  80aec4:	3800081e 	bne	r7,zero,80aee8 <_strtod_r+0x280>
  80aec8:	7805003a 	cmpeq	r2,r15,zero
  80aecc:	10000626 	beq	r2,zero,80aee8 <_strtod_r+0x280>
  80aed0:	d8001115 	stw	zero,68(sp)
  80aed4:	dc400415 	stw	r17,16(sp)
  80aed8:	003fda06 	br	80ae44 <_strtod_r+0x1dc>
  80aedc:	e1000017 	ldw	r4,0(fp)
  80aee0:	e1400117 	ldw	r5,4(fp)
  80aee4:	003fe206 	br	80ae70 <_strtod_r+0x208>
  80aee8:	dc400417 	ldw	r17,16(sp)
  80aeec:	00800ac4 	movi	r2,43
  80aef0:	8a000044 	addi	r8,r17,1
  80aef4:	da000415 	stw	r8,16(sp)
  80aef8:	88c00047 	ldb	r3,1(r17)
  80aefc:	4009883a 	mov	r4,r8
  80af00:	1880bf26 	beq	r3,r2,80b200 <_strtod_r+0x598>
  80af04:	00800b44 	movi	r2,45
  80af08:	18834526 	beq	r3,r2,80bc20 <_strtod_r+0xfb8>
  80af0c:	1809883a 	mov	r4,r3
  80af10:	20fff404 	addi	r3,r4,-48
  80af14:	00800244 	movi	r2,9
  80af18:	001d883a 	mov	r14,zero
  80af1c:	10c0bf36 	bltu	r2,r3,80b21c <_strtod_r+0x5b4>
  80af20:	00800c04 	movi	r2,48
  80af24:	2080061e 	bne	r4,r2,80af40 <_strtod_r+0x2d8>
  80af28:	da000417 	ldw	r8,16(sp)
  80af2c:	2005883a 	mov	r2,r4
  80af30:	42000044 	addi	r8,r8,1
  80af34:	da000415 	stw	r8,16(sp)
  80af38:	41000007 	ldb	r4,0(r8)
  80af3c:	20bffc26 	beq	r4,r2,80af30 <_strtod_r+0x2c8>
  80af40:	20fff3c4 	addi	r3,r4,-49
  80af44:	00800204 	movi	r2,8
  80af48:	10ffbb36 	bltu	r2,r3,80ae38 <_strtod_r+0x1d0>
  80af4c:	da000417 	ldw	r8,16(sp)
  80af50:	227ff404 	addi	r9,r4,-48
  80af54:	03000bc4 	movi	r12,47
  80af58:	4007883a 	mov	r3,r8
  80af5c:	42000044 	addi	r8,r8,1
  80af60:	da000415 	stw	r8,16(sp)
  80af64:	41000007 	ldb	r4,0(r8)
  80af68:	61000d0e 	bge	r12,r4,80afa0 <_strtod_r+0x338>
  80af6c:	00800e44 	movi	r2,57
  80af70:	11000b16 	blt	r2,r4,80afa0 <_strtod_r+0x338>
  80af74:	601b883a 	mov	r13,r12
  80af78:	1019883a 	mov	r12,r2
  80af7c:	00000106 	br	80af84 <_strtod_r+0x31c>
  80af80:	61000716 	blt	r12,r4,80afa0 <_strtod_r+0x338>
  80af84:	488002a4 	muli	r2,r9,10
  80af88:	42000044 	addi	r8,r8,1
  80af8c:	da000415 	stw	r8,16(sp)
  80af90:	2085883a 	add	r2,r4,r2
  80af94:	41000007 	ldb	r4,0(r8)
  80af98:	127ff404 	addi	r9,r2,-48
  80af9c:	693ff816 	blt	r13,r4,80af80 <_strtod_r+0x318>
  80afa0:	40c7c83a 	sub	r3,r8,r3
  80afa4:	00800204 	movi	r2,8
  80afa8:	10c2e416 	blt	r2,r3,80bb3c <_strtod_r+0xed4>
  80afac:	009387c4 	movi	r2,19999
  80afb0:	480b883a 	mov	r5,r9
  80afb4:	1240010e 	bge	r2,r9,80afbc <_strtod_r+0x354>
  80afb8:	100b883a 	mov	r5,r2
  80afbc:	7005003a 	cmpeq	r2,r14,zero
  80afc0:	103f9e1e 	bne	r2,zero,80ae3c <_strtod_r+0x1d4>
  80afc4:	014bc83a 	sub	r5,zero,r5
  80afc8:	583f9d26 	beq	r11,zero,80ae40 <_strtod_r+0x1d8>
  80afcc:	2a8bc83a 	sub	r5,r5,r10
  80afd0:	d9400f15 	stw	r5,60(sp)
  80afd4:	30007a1e 	bne	r6,zero,80b1c0 <_strtod_r+0x558>
  80afd8:	dcc01215 	stw	r19,72(sp)
  80afdc:	00800404 	movi	r2,16
  80afe0:	9825883a 	mov	r18,r19
  80afe4:	14c0010e 	bge	r2,r19,80afec <_strtod_r+0x384>
  80afe8:	1025883a 	mov	r18,r2
  80afec:	a009883a 	mov	r4,r20
  80aff0:	080fae40 	call	80fae4 <__floatunsidf>
  80aff4:	100f883a 	mov	r7,r2
  80aff8:	e0800015 	stw	r2,0(fp)
  80affc:	00800244 	movi	r2,9
  80b000:	e0c00115 	stw	r3,4(fp)
  80b004:	1480160e 	bge	r2,r18,80b060 <_strtod_r+0x3f8>
  80b008:	900c90fa 	slli	r6,r18,3
  80b00c:	01002074 	movhi	r4,129
  80b010:	21147d04 	addi	r4,r4,20980
  80b014:	180b883a 	mov	r5,r3
  80b018:	310d883a 	add	r6,r6,r4
  80b01c:	30ffef17 	ldw	r3,-68(r6)
  80b020:	30bfee17 	ldw	r2,-72(r6)
  80b024:	3809883a 	mov	r4,r7
  80b028:	180f883a 	mov	r7,r3
  80b02c:	100d883a 	mov	r6,r2
  80b030:	080ef540 	call	80ef54 <__muldf3>
  80b034:	8009883a 	mov	r4,r16
  80b038:	1823883a 	mov	r17,r3
  80b03c:	1021883a 	mov	r16,r2
  80b040:	080fae40 	call	80fae4 <__floatunsidf>
  80b044:	880b883a 	mov	r5,r17
  80b048:	180f883a 	mov	r7,r3
  80b04c:	8009883a 	mov	r4,r16
  80b050:	100d883a 	mov	r6,r2
  80b054:	080eee00 	call	80eee0 <__adddf3>
  80b058:	e0c00115 	stw	r3,4(fp)
  80b05c:	e0800015 	stw	r2,0(fp)
  80b060:	010003c4 	movi	r4,15
  80b064:	24c09816 	blt	r4,r19,80b2c8 <_strtod_r+0x660>
  80b068:	d9800f17 	ldw	r6,60(sp)
  80b06c:	303f7526 	beq	r6,zero,80ae44 <_strtod_r+0x1dc>
  80b070:	0183be0e 	bge	zero,r6,80bf6c <_strtod_r+0x1304>
  80b074:	00800584 	movi	r2,22
  80b078:	1182b20e 	bge	r2,r6,80bb44 <_strtod_r+0xedc>
  80b07c:	d8c00f17 	ldw	r3,60(sp)
  80b080:	24e3c83a 	sub	r17,r4,r19
  80b084:	88800584 	addi	r2,r17,22
  80b088:	10c08f16 	blt	r2,r3,80b2c8 <_strtod_r+0x660>
  80b08c:	880890fa 	slli	r4,r17,3
  80b090:	04002074 	movhi	r16,129
  80b094:	84147d04 	addi	r16,r16,20980
  80b098:	e0800017 	ldw	r2,0(fp)
  80b09c:	2409883a 	add	r4,r4,r16
  80b0a0:	22000017 	ldw	r8,0(r4)
  80b0a4:	22400117 	ldw	r9,4(r4)
  80b0a8:	e0c00117 	ldw	r3,4(fp)
  80b0ac:	1009883a 	mov	r4,r2
  80b0b0:	480f883a 	mov	r7,r9
  80b0b4:	180b883a 	mov	r5,r3
  80b0b8:	400d883a 	mov	r6,r8
  80b0bc:	080ef540 	call	80ef54 <__muldf3>
  80b0c0:	d9000f17 	ldw	r4,60(sp)
  80b0c4:	180b883a 	mov	r5,r3
  80b0c8:	2455c83a 	sub	r10,r4,r17
  80b0cc:	501490fa 	slli	r10,r10,3
  80b0d0:	1009883a 	mov	r4,r2
  80b0d4:	5415883a 	add	r10,r10,r16
  80b0d8:	52000017 	ldw	r8,0(r10)
  80b0dc:	52400117 	ldw	r9,4(r10)
  80b0e0:	0002a206 	br	80bb6c <_strtod_r+0xf04>
  80b0e4:	40c00047 	ldb	r3,1(r8)
  80b0e8:	00801604 	movi	r2,88
  80b0ec:	18804e26 	beq	r3,r2,80b228 <_strtod_r+0x5c0>
  80b0f0:	00801e04 	movi	r2,120
  80b0f4:	18804c26 	beq	r3,r2,80b228 <_strtod_r+0x5c0>
  80b0f8:	42000044 	addi	r8,r8,1
  80b0fc:	da000415 	stw	r8,16(sp)
  80b100:	40c00007 	ldb	r3,0(r8)
  80b104:	00800c04 	movi	r2,48
  80b108:	18bffb26 	beq	r3,r2,80b0f8 <_strtod_r+0x490>
  80b10c:	183f4d26 	beq	r3,zero,80ae44 <_strtod_r+0x1dc>
  80b110:	03c00044 	movi	r15,1
  80b114:	003f2406 	br	80ada8 <_strtod_r+0x140>
  80b118:	42000044 	addi	r8,r8,1
  80b11c:	da000415 	stw	r8,16(sp)
  80b120:	19000047 	ldb	r4,1(r3)
  80b124:	3000b726 	beq	r6,zero,80b404 <_strtod_r+0x79c>
  80b128:	3027883a 	mov	r19,r6
  80b12c:	0015883a 	mov	r10,zero
  80b130:	000f883a 	mov	r7,zero
  80b134:	227ff404 	addi	r9,r4,-48
  80b138:	00800244 	movi	r2,9
  80b13c:	1242592e 	bgeu	r2,r9,80baa4 <_strtod_r+0xe3c>
  80b140:	04800044 	movi	r18,1
  80b144:	003f3706 	br	80ae24 <_strtod_r+0x1bc>
  80b148:	7804c03a 	cmpne	r2,r15,zero
  80b14c:	103f3d1e 	bne	r2,zero,80ae44 <_strtod_r+0x1dc>
  80b150:	9004c03a 	cmpne	r2,r18,zero
  80b154:	103f5e1e 	bne	r2,zero,80aed0 <_strtod_r+0x268>
  80b158:	00801384 	movi	r2,78
  80b15c:	2083a226 	beq	r4,r2,80bfe8 <_strtod_r+0x1380>
  80b160:	11039d16 	blt	r2,r4,80bfd8 <_strtod_r+0x1370>
  80b164:	00801244 	movi	r2,73
  80b168:	20bf591e 	bne	r4,r2,80aed0 <_strtod_r+0x268>
  80b16c:	dc000404 	addi	r16,sp,16
  80b170:	8009883a 	mov	r4,r16
  80b174:	01402074 	movhi	r5,129
  80b178:	2954c604 	addi	r5,r5,21272
  80b17c:	080ac200 	call	80ac20 <match>
  80b180:	103f5326 	beq	r2,zero,80aed0 <_strtod_r+0x268>
  80b184:	d8800417 	ldw	r2,16(sp)
  80b188:	8009883a 	mov	r4,r16
  80b18c:	01402074 	movhi	r5,129
  80b190:	2954c704 	addi	r5,r5,21276
  80b194:	123fffc4 	addi	r8,r2,-1
  80b198:	da000415 	stw	r8,16(sp)
  80b19c:	080ac200 	call	80ac20 <match>
  80b1a0:	1000031e 	bne	r2,zero,80b1b0 <_strtod_r+0x548>
  80b1a4:	d8800417 	ldw	r2,16(sp)
  80b1a8:	12000044 	addi	r8,r2,1
  80b1ac:	da000415 	stw	r8,16(sp)
  80b1b0:	019ffc34 	movhi	r6,32752
  80b1b4:	e1800115 	stw	r6,4(fp)
  80b1b8:	e0000015 	stw	zero,0(fp)
  80b1bc:	003f2106 	br	80ae44 <_strtod_r+0x1dc>
  80b1c0:	d9801215 	stw	r6,72(sp)
  80b1c4:	003f8506 	br	80afdc <_strtod_r+0x374>
  80b1c8:	d8001115 	stw	zero,68(sp)
  80b1cc:	42000044 	addi	r8,r8,1
  80b1d0:	da000415 	stw	r8,16(sp)
  80b1d4:	40800007 	ldb	r2,0(r8)
  80b1d8:	103eef1e 	bne	r2,zero,80ad98 <_strtod_r+0x130>
  80b1dc:	d8001115 	stw	zero,68(sp)
  80b1e0:	dc400415 	stw	r17,16(sp)
  80b1e4:	003f1706 	br	80ae44 <_strtod_r+0x1dc>
  80b1e8:	42000044 	addi	r8,r8,1
  80b1ec:	da000415 	stw	r8,16(sp)
  80b1f0:	003eaf06 	br	80acb0 <_strtod_r+0x48>
  80b1f4:	00800044 	movi	r2,1
  80b1f8:	d8801115 	stw	r2,68(sp)
  80b1fc:	003ff306 	br	80b1cc <_strtod_r+0x564>
  80b200:	001d883a 	mov	r14,zero
  80b204:	42000044 	addi	r8,r8,1
  80b208:	da000415 	stw	r8,16(sp)
  80b20c:	21000047 	ldb	r4,1(r4)
  80b210:	00800244 	movi	r2,9
  80b214:	20fff404 	addi	r3,r4,-48
  80b218:	10ff412e 	bgeu	r2,r3,80af20 <_strtod_r+0x2b8>
  80b21c:	000b883a 	mov	r5,zero
  80b220:	dc400415 	stw	r17,16(sp)
  80b224:	003f0506 	br	80ae3c <_strtod_r+0x1d4>
  80b228:	d8c01117 	ldw	r3,68(sp)
  80b22c:	04802074 	movhi	r18,129
  80b230:	94974b04 	addi	r18,r18,23852
  80b234:	d8800504 	addi	r2,sp,20
  80b238:	a809883a 	mov	r4,r21
  80b23c:	d9400404 	addi	r5,sp,16
  80b240:	900d883a 	mov	r6,r18
  80b244:	d9c00604 	addi	r7,sp,24
  80b248:	d8800015 	stw	r2,0(sp)
  80b24c:	d8c00115 	stw	r3,4(sp)
  80b250:	080d1d40 	call	80d1d4 <__gethex>
  80b254:	140001cc 	andi	r16,r2,7
  80b258:	1027883a 	mov	r19,r2
  80b25c:	803ef926 	beq	r16,zero,80ae44 <_strtod_r+0x1dc>
  80b260:	05000184 	movi	r20,6
  80b264:	853f1a26 	beq	r16,r20,80aed0 <_strtod_r+0x268>
  80b268:	d9800517 	ldw	r6,20(sp)
  80b26c:	30000626 	beq	r6,zero,80b288 <_strtod_r+0x620>
  80b270:	91400017 	ldw	r5,0(r18)
  80b274:	d9000d04 	addi	r4,sp,52
  80b278:	0809e600 	call	809e60 <__copybits>
  80b27c:	d9400517 	ldw	r5,20(sp)
  80b280:	a809883a 	mov	r4,r21
  80b284:	08099c00 	call	8099c0 <_Bfree>
  80b288:	d9400617 	ldw	r5,24(sp)
  80b28c:	a4024136 	bltu	r20,r16,80bb94 <_strtod_r+0xf2c>
  80b290:	8405883a 	add	r2,r16,r16
  80b294:	1085883a 	add	r2,r2,r2
  80b298:	00c02074 	movhi	r3,129
  80b29c:	18ecab04 	addi	r3,r3,-19796
  80b2a0:	10c5883a 	add	r2,r2,r3
  80b2a4:	11000017 	ldw	r4,0(r2)
  80b2a8:	2000683a 	jmp	r4
  80b2ac:	0080bbd4 	movui	r2,751
  80b2b0:	0080bbe0 	cmpeqi	r2,zero,751
  80b2b4:	0080bb84 	movi	r2,750
  80b2b8:	0080bbac 	andhi	r2,zero,750
  80b2bc:	0080bbbc 	xorhi	r2,zero,750
  80b2c0:	0080bbe0 	cmpeqi	r2,zero,751
  80b2c4:	0080bbd4 	movui	r2,751
  80b2c8:	d8c00f17 	ldw	r3,60(sp)
  80b2cc:	9c85c83a 	sub	r2,r19,r18
  80b2d0:	18a1883a 	add	r16,r3,r2
  80b2d4:	0402d00e 	bge	zero,r16,80be18 <_strtod_r+0x11b0>
  80b2d8:	814003cc 	andi	r5,r16,15
  80b2dc:	28000f26 	beq	r5,zero,80b31c <_strtod_r+0x6b4>
  80b2e0:	280a90fa 	slli	r5,r5,3
  80b2e4:	01002074 	movhi	r4,129
  80b2e8:	21147d04 	addi	r4,r4,20980
  80b2ec:	e0800017 	ldw	r2,0(fp)
  80b2f0:	290b883a 	add	r5,r5,r4
  80b2f4:	2a000017 	ldw	r8,0(r5)
  80b2f8:	e0c00117 	ldw	r3,4(fp)
  80b2fc:	2a400117 	ldw	r9,4(r5)
  80b300:	1009883a 	mov	r4,r2
  80b304:	180b883a 	mov	r5,r3
  80b308:	480f883a 	mov	r7,r9
  80b30c:	400d883a 	mov	r6,r8
  80b310:	080ef540 	call	80ef54 <__muldf3>
  80b314:	e0c00115 	stw	r3,4(fp)
  80b318:	e0800015 	stw	r2,0(fp)
  80b31c:	00bffc04 	movi	r2,-16
  80b320:	808c703a 	and	r6,r16,r2
  80b324:	30005b26 	beq	r6,zero,80b494 <_strtod_r+0x82c>
  80b328:	00804d04 	movi	r2,308
  80b32c:	1181fd16 	blt	r2,r6,80bb24 <_strtod_r+0xebc>
  80b330:	3021d13a 	srai	r16,r6,4
  80b334:	00800044 	movi	r2,1
  80b338:	1403610e 	bge	r2,r16,80c0c0 <_strtod_r+0x1458>
  80b33c:	102f883a 	mov	r23,r2
  80b340:	0025883a 	mov	r18,zero
  80b344:	04402074 	movhi	r17,129
  80b348:	8c54af04 	addi	r17,r17,21180
  80b34c:	8080004c 	andi	r2,r16,1
  80b350:	1005003a 	cmpeq	r2,r2,zero
  80b354:	1000091e 	bne	r2,zero,80b37c <_strtod_r+0x714>
  80b358:	e0800017 	ldw	r2,0(fp)
  80b35c:	e0c00117 	ldw	r3,4(fp)
  80b360:	89800017 	ldw	r6,0(r17)
  80b364:	89c00117 	ldw	r7,4(r17)
  80b368:	180b883a 	mov	r5,r3
  80b36c:	1009883a 	mov	r4,r2
  80b370:	080ef540 	call	80ef54 <__muldf3>
  80b374:	e0c00115 	stw	r3,4(fp)
  80b378:	e0800015 	stw	r2,0(fp)
  80b37c:	8021d07a 	srai	r16,r16,1
  80b380:	94800044 	addi	r18,r18,1
  80b384:	8c400204 	addi	r17,r17,8
  80b388:	bc3ff016 	blt	r23,r16,80b34c <_strtod_r+0x6e4>
  80b38c:	900e90fa 	slli	r7,r18,3
  80b390:	01802074 	movhi	r6,129
  80b394:	3194af04 	addi	r6,r6,21180
  80b398:	e2000117 	ldw	r8,4(fp)
  80b39c:	398f883a 	add	r7,r7,r6
  80b3a0:	38800017 	ldw	r2,0(r7)
  80b3a4:	38c00117 	ldw	r3,4(r7)
  80b3a8:	e1000017 	ldw	r4,0(fp)
  80b3ac:	01bf2c34 	movhi	r6,64688
  80b3b0:	418d883a 	add	r6,r8,r6
  80b3b4:	300b883a 	mov	r5,r6
  80b3b8:	180f883a 	mov	r7,r3
  80b3bc:	100d883a 	mov	r6,r2
  80b3c0:	080ef540 	call	80ef54 <__muldf3>
  80b3c4:	1009883a 	mov	r4,r2
  80b3c8:	180b883a 	mov	r5,r3
  80b3cc:	199ffc2c 	andhi	r6,r3,32752
  80b3d0:	009f2834 	movhi	r2,31904
  80b3d4:	e1000015 	stw	r4,0(fp)
  80b3d8:	e1400115 	stw	r5,4(fp)
  80b3dc:	1181d136 	bltu	r2,r6,80bb24 <_strtod_r+0xebc>
  80b3e0:	009f2434 	movhi	r2,31888
  80b3e4:	1183202e 	bgeu	r2,r6,80c068 <_strtod_r+0x1400>
  80b3e8:	d8001415 	stw	zero,80(sp)
  80b3ec:	019ffc34 	movhi	r6,32752
  80b3f0:	31bfffc4 	addi	r6,r6,-1
  80b3f4:	01ffffc4 	movi	r7,-1
  80b3f8:	e1800115 	stw	r6,4(fp)
  80b3fc:	e1c00015 	stw	r7,0(fp)
  80b400:	00002506 	br	80b498 <_strtod_r+0x830>
  80b404:	00800c04 	movi	r2,48
  80b408:	2083151e 	bne	r4,r2,80c060 <_strtod_r+0x13f8>
  80b40c:	2005883a 	mov	r2,r4
  80b410:	000f883a 	mov	r7,zero
  80b414:	42000044 	addi	r8,r8,1
  80b418:	da000415 	stw	r8,16(sp)
  80b41c:	41000007 	ldb	r4,0(r8)
  80b420:	39c00044 	addi	r7,r7,1
  80b424:	20bffb26 	beq	r4,r2,80b414 <_strtod_r+0x7ac>
  80b428:	20fff3c4 	addi	r3,r4,-49
  80b42c:	00800204 	movi	r2,8
  80b430:	10c1b836 	bltu	r2,r3,80bb14 <_strtod_r+0xeac>
  80b434:	dd800417 	ldw	r22,16(sp)
  80b438:	3815883a 	mov	r10,r7
  80b43c:	227ff404 	addi	r9,r4,-48
  80b440:	b011883a 	mov	r8,r22
  80b444:	0027883a 	mov	r19,zero
  80b448:	01c00044 	movi	r7,1
  80b44c:	4801fe26 	beq	r9,zero,80bc48 <_strtod_r+0xfe0>
  80b450:	00800044 	movi	r2,1
  80b454:	51d5883a 	add	r10,r10,r7
  80b458:	11c31f0e 	bge	r2,r7,80c0d8 <_strtod_r+0x1470>
  80b45c:	1009883a 	mov	r4,r2
  80b460:	9807883a 	mov	r3,r19
  80b464:	02c00204 	movi	r11,8
  80b468:	03000404 	movi	r12,16
  80b46c:	00000306 	br	80b47c <_strtod_r+0x814>
  80b470:	a50002a4 	muli	r20,r20,10
  80b474:	21000044 	addi	r4,r4,1
  80b478:	21c1eb26 	beq	r4,r7,80bc28 <_strtod_r+0xfc0>
  80b47c:	18c00044 	addi	r3,r3,1
  80b480:	18bfffc4 	addi	r2,r3,-1
  80b484:	58bffa0e 	bge	r11,r2,80b470 <_strtod_r+0x808>
  80b488:	60fffa16 	blt	r12,r3,80b474 <_strtod_r+0x80c>
  80b48c:	840002a4 	muli	r16,r16,10
  80b490:	003ff806 	br	80b474 <_strtod_r+0x80c>
  80b494:	d8001415 	stw	zero,80(sp)
  80b498:	d9801217 	ldw	r6,72(sp)
  80b49c:	a809883a 	mov	r4,r21
  80b4a0:	b00b883a 	mov	r5,r22
  80b4a4:	980f883a 	mov	r7,r19
  80b4a8:	dd000015 	stw	r20,0(sp)
  80b4ac:	080a8940 	call	80a894 <__s2b>
  80b4b0:	d9800f17 	ldw	r6,60(sp)
  80b4b4:	11000304 	addi	r4,r2,12
  80b4b8:	d8801015 	stw	r2,64(sp)
  80b4bc:	300c803a 	cmplt	r6,r6,zero
  80b4c0:	d9001715 	stw	r4,92(sp)
  80b4c4:	d9801615 	stw	r6,88(sp)
  80b4c8:	d8801017 	ldw	r2,64(sp)
  80b4cc:	a809883a 	mov	r4,r21
  80b4d0:	11400117 	ldw	r5,4(r2)
  80b4d4:	0809f400 	call	809f40 <_Balloc>
  80b4d8:	d8c01017 	ldw	r3,64(sp)
  80b4dc:	d9401717 	ldw	r5,92(sp)
  80b4e0:	11000304 	addi	r4,r2,12
  80b4e4:	19800417 	ldw	r6,16(r3)
  80b4e8:	102f883a 	mov	r23,r2
  80b4ec:	318d883a 	add	r6,r6,r6
  80b4f0:	318d883a 	add	r6,r6,r6
  80b4f4:	31800204 	addi	r6,r6,8
  80b4f8:	080336c0 	call	80336c <memcpy>
  80b4fc:	e2000017 	ldw	r8,0(fp)
  80b500:	e2400117 	ldw	r9,4(fp)
  80b504:	d9800304 	addi	r6,sp,12
  80b508:	400b883a 	mov	r5,r8
  80b50c:	a809883a 	mov	r4,r21
  80b510:	d9c00204 	addi	r7,sp,8
  80b514:	d9800015 	stw	r6,0(sp)
  80b518:	480d883a 	mov	r6,r9
  80b51c:	0809ffc0 	call	809ffc <__d2b>
  80b520:	a809883a 	mov	r4,r21
  80b524:	01400044 	movi	r5,1
  80b528:	d8800515 	stw	r2,20(sp)
  80b52c:	080a6380 	call	80a638 <__i2b>
  80b530:	102d883a 	mov	r22,r2
  80b534:	d8801617 	ldw	r2,88(sp)
  80b538:	1001051e 	bne	r2,zero,80b950 <_strtod_r+0xce8>
  80b53c:	dd000f17 	ldw	r20,60(sp)
  80b540:	000f883a 	mov	r7,zero
  80b544:	0013883a 	mov	r9,zero
  80b548:	a011883a 	mov	r8,r20
  80b54c:	d8800217 	ldw	r2,8(sp)
  80b550:	1000fd16 	blt	r2,zero,80b948 <_strtod_r+0xce0>
  80b554:	388f883a 	add	r7,r7,r2
  80b558:	d9801417 	ldw	r6,80(sp)
  80b55c:	d9400317 	ldw	r5,12(sp)
  80b560:	00ff0084 	movi	r3,-1022
  80b564:	1189c83a 	sub	r4,r2,r6
  80b568:	2145883a 	add	r2,r4,r5
  80b56c:	10bfffc4 	addi	r2,r2,-1
  80b570:	10c09f0e 	bge	r2,r3,80b7f0 <_strtod_r+0xb88>
  80b574:	21810cc4 	addi	r6,r4,1075
  80b578:	d8c01417 	ldw	r3,80(sp)
  80b57c:	4185883a 	add	r2,r8,r6
  80b580:	39a1883a 	add	r16,r7,r6
  80b584:	18a5883a 	add	r18,r3,r2
  80b588:	3807883a 	mov	r3,r7
  80b58c:	81c0010e 	bge	r16,r7,80b594 <_strtod_r+0x92c>
  80b590:	8007883a 	mov	r3,r16
  80b594:	9005883a 	mov	r2,r18
  80b598:	1c80010e 	bge	r3,r18,80b5a0 <_strtod_r+0x938>
  80b59c:	1805883a 	mov	r2,r3
  80b5a0:	0080e70e 	bge	zero,r2,80b940 <_strtod_r+0xcd8>
  80b5a4:	38a7c83a 	sub	r19,r7,r2
  80b5a8:	80a1c83a 	sub	r16,r16,r2
  80b5ac:	90a5c83a 	sub	r18,r18,r2
  80b5b0:	02400e0e 	bge	zero,r9,80b5ec <_strtod_r+0x984>
  80b5b4:	480d883a 	mov	r6,r9
  80b5b8:	b00b883a 	mov	r5,r22
  80b5bc:	a809883a 	mov	r4,r21
  80b5c0:	080a7740 	call	80a774 <__pow5mult>
  80b5c4:	d9800517 	ldw	r6,20(sp)
  80b5c8:	a809883a 	mov	r4,r21
  80b5cc:	100b883a 	mov	r5,r2
  80b5d0:	102d883a 	mov	r22,r2
  80b5d4:	080a4500 	call	80a450 <__multiply>
  80b5d8:	d9400517 	ldw	r5,20(sp)
  80b5dc:	1023883a 	mov	r17,r2
  80b5e0:	a809883a 	mov	r4,r21
  80b5e4:	08099c00 	call	8099c0 <_Bfree>
  80b5e8:	dc400515 	stw	r17,20(sp)
  80b5ec:	0400050e 	bge	zero,r16,80b604 <_strtod_r+0x99c>
  80b5f0:	d9400517 	ldw	r5,20(sp)
  80b5f4:	800d883a 	mov	r6,r16
  80b5f8:	a809883a 	mov	r4,r21
  80b5fc:	080a3040 	call	80a304 <__lshift>
  80b600:	d8800515 	stw	r2,20(sp)
  80b604:	a000741e 	bne	r20,zero,80b7d8 <_strtod_r+0xb70>
  80b608:	0480050e 	bge	zero,r18,80b620 <_strtod_r+0x9b8>
  80b60c:	b80b883a 	mov	r5,r23
  80b610:	900d883a 	mov	r6,r18
  80b614:	a809883a 	mov	r4,r21
  80b618:	080a3040 	call	80a304 <__lshift>
  80b61c:	102f883a 	mov	r23,r2
  80b620:	04c0050e 	bge	zero,r19,80b638 <_strtod_r+0x9d0>
  80b624:	b00b883a 	mov	r5,r22
  80b628:	980d883a 	mov	r6,r19
  80b62c:	a809883a 	mov	r4,r21
  80b630:	080a3040 	call	80a304 <__lshift>
  80b634:	102d883a 	mov	r22,r2
  80b638:	d9400517 	ldw	r5,20(sp)
  80b63c:	a809883a 	mov	r4,r21
  80b640:	b80d883a 	mov	r6,r23
  80b644:	080a1780 	call	80a178 <__mdiff>
  80b648:	11000317 	ldw	r4,12(r2)
  80b64c:	b00b883a 	mov	r5,r22
  80b650:	10000315 	stw	zero,12(r2)
  80b654:	d9001315 	stw	r4,76(sp)
  80b658:	1009883a 	mov	r4,r2
  80b65c:	1029883a 	mov	r20,r2
  80b660:	0809b1c0 	call	809b1c <__mcmp>
  80b664:	10017c16 	blt	r2,zero,80bc58 <_strtod_r+0xff0>
  80b668:	1001af26 	beq	r2,zero,80bd28 <_strtod_r+0x10c0>
  80b66c:	a009883a 	mov	r4,r20
  80b670:	b00b883a 	mov	r5,r22
  80b674:	0809d1c0 	call	809d1c <__ratio>
  80b678:	0011883a 	mov	r8,zero
  80b67c:	02500034 	movhi	r9,16384
  80b680:	480f883a 	mov	r7,r9
  80b684:	1009883a 	mov	r4,r2
  80b688:	180b883a 	mov	r5,r3
  80b68c:	400d883a 	mov	r6,r8
  80b690:	1021883a 	mov	r16,r2
  80b694:	1823883a 	mov	r17,r3
  80b698:	080f8180 	call	80f818 <__ledf2>
  80b69c:	00805716 	blt	zero,r2,80b7fc <_strtod_r+0xb94>
  80b6a0:	d9801317 	ldw	r6,76(sp)
  80b6a4:	3025003a 	cmpeq	r18,r6,zero
  80b6a8:	90008b1e 	bne	r18,zero,80b8d8 <_strtod_r+0xc70>
  80b6ac:	008ffc34 	movhi	r2,16368
  80b6b0:	0021883a 	mov	r16,zero
  80b6b4:	1023883a 	mov	r17,r2
  80b6b8:	d8000715 	stw	zero,28(sp)
  80b6bc:	d8800815 	stw	r2,32(sp)
  80b6c0:	e1c00117 	ldw	r7,4(fp)
  80b6c4:	009ff834 	movhi	r2,32736
  80b6c8:	3cdffc2c 	andhi	r19,r7,32752
  80b6cc:	98805e26 	beq	r19,r2,80b848 <_strtod_r+0xbe0>
  80b6d0:	d8801417 	ldw	r2,80(sp)
  80b6d4:	10001b26 	beq	r2,zero,80b744 <_strtod_r+0xadc>
  80b6d8:	0081a834 	movhi	r2,1696
  80b6dc:	14c01936 	bltu	r2,r19,80b744 <_strtod_r+0xadc>
  80b6e0:	00bff034 	movhi	r2,65472
  80b6e4:	00d07834 	movhi	r3,16864
  80b6e8:	18ffffc4 	addi	r3,r3,-1
  80b6ec:	180f883a 	mov	r7,r3
  80b6f0:	8009883a 	mov	r4,r16
  80b6f4:	880b883a 	mov	r5,r17
  80b6f8:	100d883a 	mov	r6,r2
  80b6fc:	080f8180 	call	80f818 <__ledf2>
  80b700:	00800b16 	blt	zero,r2,80b730 <_strtod_r+0xac8>
  80b704:	880b883a 	mov	r5,r17
  80b708:	8009883a 	mov	r4,r16
  80b70c:	080dcb80 	call	80dcb8 <__fixunsdfsi>
  80b710:	1000df1e 	bne	r2,zero,80ba90 <_strtod_r+0xe28>
  80b714:	0021883a 	mov	r16,zero
  80b718:	044ffc34 	movhi	r17,16368
  80b71c:	9000d91e 	bne	r18,zero,80ba84 <_strtod_r+0xe1c>
  80b720:	8005883a 	mov	r2,r16
  80b724:	8807883a 	mov	r3,r17
  80b728:	d8c00815 	stw	r3,32(sp)
  80b72c:	d8800715 	stw	r2,28(sp)
  80b730:	d8800817 	ldw	r2,32(sp)
  80b734:	00c1ac34 	movhi	r3,1712
  80b738:	14c5c83a 	sub	r2,r2,r19
  80b73c:	10c5883a 	add	r2,r2,r3
  80b740:	d8800815 	stw	r2,32(sp)
  80b744:	e0800017 	ldw	r2,0(fp)
  80b748:	e0c00117 	ldw	r3,4(fp)
  80b74c:	1009883a 	mov	r4,r2
  80b750:	180b883a 	mov	r5,r3
  80b754:	0809b7c0 	call	809b7c <__ulp>
  80b758:	d9800717 	ldw	r6,28(sp)
  80b75c:	d9c00817 	ldw	r7,32(sp)
  80b760:	180b883a 	mov	r5,r3
  80b764:	1009883a 	mov	r4,r2
  80b768:	080ef540 	call	80ef54 <__muldf3>
  80b76c:	e2000017 	ldw	r8,0(fp)
  80b770:	e2400117 	ldw	r9,4(fp)
  80b774:	180b883a 	mov	r5,r3
  80b778:	1009883a 	mov	r4,r2
  80b77c:	480f883a 	mov	r7,r9
  80b780:	400d883a 	mov	r6,r8
  80b784:	080eee00 	call	80eee0 <__adddf3>
  80b788:	e0c00115 	stw	r3,4(fp)
  80b78c:	e0800015 	stw	r2,0(fp)
  80b790:	d8c01417 	ldw	r3,80(sp)
  80b794:	e4800117 	ldw	r18,4(fp)
  80b798:	1800021e 	bne	r3,zero,80b7a4 <_strtod_r+0xb3c>
  80b79c:	909ffc2c 	andhi	r2,r18,32752
  80b7a0:	98807b26 	beq	r19,r2,80b990 <_strtod_r+0xd28>
  80b7a4:	d9400517 	ldw	r5,20(sp)
  80b7a8:	a809883a 	mov	r4,r21
  80b7ac:	08099c00 	call	8099c0 <_Bfree>
  80b7b0:	a809883a 	mov	r4,r21
  80b7b4:	b80b883a 	mov	r5,r23
  80b7b8:	08099c00 	call	8099c0 <_Bfree>
  80b7bc:	a809883a 	mov	r4,r21
  80b7c0:	b00b883a 	mov	r5,r22
  80b7c4:	08099c00 	call	8099c0 <_Bfree>
  80b7c8:	a809883a 	mov	r4,r21
  80b7cc:	a00b883a 	mov	r5,r20
  80b7d0:	08099c00 	call	8099c0 <_Bfree>
  80b7d4:	003f3c06 	br	80b4c8 <_strtod_r+0x860>
  80b7d8:	b80b883a 	mov	r5,r23
  80b7dc:	a00d883a 	mov	r6,r20
  80b7e0:	a809883a 	mov	r4,r21
  80b7e4:	080a7740 	call	80a774 <__pow5mult>
  80b7e8:	102f883a 	mov	r23,r2
  80b7ec:	003f8606 	br	80b608 <_strtod_r+0x9a0>
  80b7f0:	00800d84 	movi	r2,54
  80b7f4:	114dc83a 	sub	r6,r2,r5
  80b7f8:	003f5f06 	br	80b578 <_strtod_r+0x910>
  80b7fc:	0005883a 	mov	r2,zero
  80b800:	00cff834 	movhi	r3,16352
  80b804:	880b883a 	mov	r5,r17
  80b808:	8009883a 	mov	r4,r16
  80b80c:	100d883a 	mov	r6,r2
  80b810:	180f883a 	mov	r7,r3
  80b814:	080ef540 	call	80ef54 <__muldf3>
  80b818:	d9801317 	ldw	r6,76(sp)
  80b81c:	1021883a 	mov	r16,r2
  80b820:	1823883a 	mov	r17,r3
  80b824:	3025003a 	cmpeq	r18,r6,zero
  80b828:	90000126 	beq	r18,zero,80b830 <_strtod_r+0xbc8>
  80b82c:	18e0003c 	xorhi	r3,r3,32768
  80b830:	d8800715 	stw	r2,28(sp)
  80b834:	d8c00815 	stw	r3,32(sp)
  80b838:	e1c00117 	ldw	r7,4(fp)
  80b83c:	009ff834 	movhi	r2,32736
  80b840:	3cdffc2c 	andhi	r19,r7,32752
  80b844:	98bfa21e 	bne	r19,r2,80b6d0 <_strtod_r+0xa68>
  80b848:	e1000017 	ldw	r4,0(fp)
  80b84c:	01bf2c34 	movhi	r6,64688
  80b850:	398d883a 	add	r6,r7,r6
  80b854:	d9000b15 	stw	r4,44(sp)
  80b858:	d9c00c15 	stw	r7,48(sp)
  80b85c:	300b883a 	mov	r5,r6
  80b860:	e1800115 	stw	r6,4(fp)
  80b864:	0809b7c0 	call	809b7c <__ulp>
  80b868:	d9800717 	ldw	r6,28(sp)
  80b86c:	d9c00817 	ldw	r7,32(sp)
  80b870:	180b883a 	mov	r5,r3
  80b874:	1009883a 	mov	r4,r2
  80b878:	080ef540 	call	80ef54 <__muldf3>
  80b87c:	e2000017 	ldw	r8,0(fp)
  80b880:	e2400117 	ldw	r9,4(fp)
  80b884:	180b883a 	mov	r5,r3
  80b888:	1009883a 	mov	r4,r2
  80b88c:	480f883a 	mov	r7,r9
  80b890:	400d883a 	mov	r6,r8
  80b894:	080eee00 	call	80eee0 <__adddf3>
  80b898:	1009883a 	mov	r4,r2
  80b89c:	180b883a 	mov	r5,r3
  80b8a0:	009f2834 	movhi	r2,31904
  80b8a4:	10bfffc4 	addi	r2,r2,-1
  80b8a8:	18dffc2c 	andhi	r3,r3,32752
  80b8ac:	e1000015 	stw	r4,0(fp)
  80b8b0:	e1400115 	stw	r5,4(fp)
  80b8b4:	10c06f2e 	bgeu	r2,r3,80ba74 <_strtod_r+0xe0c>
  80b8b8:	d8800c17 	ldw	r2,48(sp)
  80b8bc:	011ffc34 	movhi	r4,32752
  80b8c0:	213fffc4 	addi	r4,r4,-1
  80b8c4:	11007a26 	beq	r2,r4,80bab0 <_strtod_r+0xe48>
  80b8c8:	01ffffc4 	movi	r7,-1
  80b8cc:	e1000115 	stw	r4,4(fp)
  80b8d0:	e1c00015 	stw	r7,0(fp)
  80b8d4:	003fb306 	br	80b7a4 <_strtod_r+0xb3c>
  80b8d8:	e0c00017 	ldw	r3,0(fp)
  80b8dc:	1800221e 	bne	r3,zero,80b968 <_strtod_r+0xd00>
  80b8e0:	e0800117 	ldw	r2,4(fp)
  80b8e4:	00c00434 	movhi	r3,16
  80b8e8:	18ffffc4 	addi	r3,r3,-1
  80b8ec:	10c4703a 	and	r2,r2,r3
  80b8f0:	1000211e 	bne	r2,zero,80b978 <_strtod_r+0xd10>
  80b8f4:	0005883a 	mov	r2,zero
  80b8f8:	00cffc34 	movhi	r3,16368
  80b8fc:	180f883a 	mov	r7,r3
  80b900:	8009883a 	mov	r4,r16
  80b904:	880b883a 	mov	r5,r17
  80b908:	100d883a 	mov	r6,r2
  80b90c:	080f7900 	call	80f790 <__ltdf2>
  80b910:	10013c16 	blt	r2,zero,80be04 <_strtod_r+0x119c>
  80b914:	0005883a 	mov	r2,zero
  80b918:	00cff834 	movhi	r3,16352
  80b91c:	880b883a 	mov	r5,r17
  80b920:	8009883a 	mov	r4,r16
  80b924:	180f883a 	mov	r7,r3
  80b928:	100d883a 	mov	r6,r2
  80b92c:	080ef540 	call	80ef54 <__muldf3>
  80b930:	1823883a 	mov	r17,r3
  80b934:	1021883a 	mov	r16,r2
  80b938:	18e0003c 	xorhi	r3,r3,32768
  80b93c:	003fbc06 	br	80b830 <_strtod_r+0xbc8>
  80b940:	3827883a 	mov	r19,r7
  80b944:	003f1a06 	br	80b5b0 <_strtod_r+0x948>
  80b948:	4091c83a 	sub	r8,r8,r2
  80b94c:	003f0206 	br	80b558 <_strtod_r+0x8f0>
  80b950:	d8c00f17 	ldw	r3,60(sp)
  80b954:	0011883a 	mov	r8,zero
  80b958:	0029883a 	mov	r20,zero
  80b95c:	00d3c83a 	sub	r9,zero,r3
  80b960:	480f883a 	mov	r7,r9
  80b964:	003ef906 	br	80b54c <_strtod_r+0x8e4>
  80b968:	00800044 	movi	r2,1
  80b96c:	1880021e 	bne	r3,r2,80b978 <_strtod_r+0xd10>
  80b970:	e0800117 	ldw	r2,4(fp)
  80b974:	1000a526 	beq	r2,zero,80bc0c <_strtod_r+0xfa4>
  80b978:	00affc34 	movhi	r2,49136
  80b97c:	0021883a 	mov	r16,zero
  80b980:	044ffc34 	movhi	r17,16368
  80b984:	d8800815 	stw	r2,32(sp)
  80b988:	d8000715 	stw	zero,28(sp)
  80b98c:	003f4c06 	br	80b6c0 <_strtod_r+0xa58>
  80b990:	880b883a 	mov	r5,r17
  80b994:	8009883a 	mov	r4,r16
  80b998:	080f9980 	call	80f998 <__fixdfsi>
  80b99c:	1009883a 	mov	r4,r2
  80b9a0:	080f8a00 	call	80f8a0 <__floatsidf>
  80b9a4:	880b883a 	mov	r5,r17
  80b9a8:	8009883a 	mov	r4,r16
  80b9ac:	100d883a 	mov	r6,r2
  80b9b0:	180f883a 	mov	r7,r3
  80b9b4:	080ee600 	call	80ee60 <__subdf3>
  80b9b8:	d9001317 	ldw	r4,76(sp)
  80b9bc:	100b883a 	mov	r5,r2
  80b9c0:	180d883a 	mov	r6,r3
  80b9c4:	1021883a 	mov	r16,r2
  80b9c8:	1823883a 	mov	r17,r3
  80b9cc:	2000061e 	bne	r4,zero,80b9e8 <_strtod_r+0xd80>
  80b9d0:	e0800017 	ldw	r2,0(fp)
  80b9d4:	1000041e 	bne	r2,zero,80b9e8 <_strtod_r+0xd80>
  80b9d8:	00c00434 	movhi	r3,16
  80b9dc:	18ffffc4 	addi	r3,r3,-1
  80b9e0:	90c4703a 	and	r2,r18,r3
  80b9e4:	10004026 	beq	r2,zero,80bae8 <_strtod_r+0xe80>
  80b9e8:	00a52834 	movhi	r2,38048
  80b9ec:	108d6544 	addi	r2,r2,13717
  80b9f0:	00cff834 	movhi	r3,16352
  80b9f4:	18ffffc4 	addi	r3,r3,-1
  80b9f8:	180f883a 	mov	r7,r3
  80b9fc:	8009883a 	mov	r4,r16
  80ba00:	880b883a 	mov	r5,r17
  80ba04:	100d883a 	mov	r6,r2
  80ba08:	080f7900 	call	80f790 <__ltdf2>
  80ba0c:	10000916 	blt	r2,zero,80ba34 <_strtod_r+0xdcc>
  80ba10:	008d6c34 	movhi	r2,13744
  80ba14:	10b94d44 	addi	r2,r2,-6859
  80ba18:	00cff834 	movhi	r3,16352
  80ba1c:	880b883a 	mov	r5,r17
  80ba20:	180f883a 	mov	r7,r3
  80ba24:	8009883a 	mov	r4,r16
  80ba28:	100d883a 	mov	r6,r2
  80ba2c:	080f6800 	call	80f680 <__gtdf2>
  80ba30:	00bf5c0e 	bge	zero,r2,80b7a4 <_strtod_r+0xb3c>
  80ba34:	d9400517 	ldw	r5,20(sp)
  80ba38:	a809883a 	mov	r4,r21
  80ba3c:	08099c00 	call	8099c0 <_Bfree>
  80ba40:	a809883a 	mov	r4,r21
  80ba44:	b80b883a 	mov	r5,r23
  80ba48:	08099c00 	call	8099c0 <_Bfree>
  80ba4c:	a809883a 	mov	r4,r21
  80ba50:	b00b883a 	mov	r5,r22
  80ba54:	08099c00 	call	8099c0 <_Bfree>
  80ba58:	d9401017 	ldw	r5,64(sp)
  80ba5c:	a809883a 	mov	r4,r21
  80ba60:	08099c00 	call	8099c0 <_Bfree>
  80ba64:	a809883a 	mov	r4,r21
  80ba68:	a00b883a 	mov	r5,r20
  80ba6c:	08099c00 	call	8099c0 <_Bfree>
  80ba70:	003cf406 	br	80ae44 <_strtod_r+0x1dc>
  80ba74:	0080d434 	movhi	r2,848
  80ba78:	288d883a 	add	r6,r5,r2
  80ba7c:	e1800115 	stw	r6,4(fp)
  80ba80:	003f4306 	br	80b790 <_strtod_r+0xb28>
  80ba84:	8005883a 	mov	r2,r16
  80ba88:	88e0003c 	xorhi	r3,r17,32768
  80ba8c:	003f2606 	br	80b728 <_strtod_r+0xac0>
  80ba90:	1009883a 	mov	r4,r2
  80ba94:	080fae40 	call	80fae4 <__floatunsidf>
  80ba98:	1021883a 	mov	r16,r2
  80ba9c:	1823883a 	mov	r17,r3
  80baa0:	003f1e06 	br	80b71c <_strtod_r+0xab4>
  80baa4:	da000417 	ldw	r8,16(sp)
  80baa8:	39c00044 	addi	r7,r7,1
  80baac:	003e6706 	br	80b44c <_strtod_r+0x7e4>
  80bab0:	d8c00b17 	ldw	r3,44(sp)
  80bab4:	00bfffc4 	movi	r2,-1
  80bab8:	18bf831e 	bne	r3,r2,80b8c8 <_strtod_r+0xc60>
  80babc:	00c00884 	movi	r3,34
  80bac0:	a8c00015 	stw	r3,0(r21)
  80bac4:	009ffc34 	movhi	r2,32752
  80bac8:	e0800115 	stw	r2,4(fp)
  80bacc:	e0000015 	stw	zero,0(fp)
  80bad0:	003fd806 	br	80ba34 <_strtod_r+0xdcc>
  80bad4:	4007883a 	mov	r3,r8
  80bad8:	000d883a 	mov	r6,zero
  80badc:	0029883a 	mov	r20,zero
  80bae0:	0021883a 	mov	r16,zero
  80bae4:	003cc906 	br	80ae0c <_strtod_r+0x1a4>
  80bae8:	00a52834 	movhi	r2,38048
  80baec:	108d6544 	addi	r2,r2,13717
  80baf0:	00cff434 	movhi	r3,16336
  80baf4:	18ffffc4 	addi	r3,r3,-1
  80baf8:	2809883a 	mov	r4,r5
  80bafc:	180f883a 	mov	r7,r3
  80bb00:	300b883a 	mov	r5,r6
  80bb04:	100d883a 	mov	r6,r2
  80bb08:	080f7900 	call	80f790 <__ltdf2>
  80bb0c:	103f250e 	bge	r2,zero,80b7a4 <_strtod_r+0xb3c>
  80bb10:	003fc806 	br	80ba34 <_strtod_r+0xdcc>
  80bb14:	0027883a 	mov	r19,zero
  80bb18:	04800044 	movi	r18,1
  80bb1c:	0015883a 	mov	r10,zero
  80bb20:	003cc006 	br	80ae24 <_strtod_r+0x1bc>
  80bb24:	00800884 	movi	r2,34
  80bb28:	a8800015 	stw	r2,0(r21)
  80bb2c:	019ffc34 	movhi	r6,32752
  80bb30:	e1800115 	stw	r6,4(fp)
  80bb34:	e0000015 	stw	zero,0(fp)
  80bb38:	003cc206 	br	80ae44 <_strtod_r+0x1dc>
  80bb3c:	015387c4 	movi	r5,19999
  80bb40:	003d1e06 	br	80afbc <_strtod_r+0x354>
  80bb44:	300a90fa 	slli	r5,r6,3
  80bb48:	e0800017 	ldw	r2,0(fp)
  80bb4c:	e0c00117 	ldw	r3,4(fp)
  80bb50:	01002074 	movhi	r4,129
  80bb54:	21147d04 	addi	r4,r4,20980
  80bb58:	290b883a 	add	r5,r5,r4
  80bb5c:	2a000017 	ldw	r8,0(r5)
  80bb60:	2a400117 	ldw	r9,4(r5)
  80bb64:	1009883a 	mov	r4,r2
  80bb68:	180b883a 	mov	r5,r3
  80bb6c:	480f883a 	mov	r7,r9
  80bb70:	400d883a 	mov	r6,r8
  80bb74:	080ef540 	call	80ef54 <__muldf3>
  80bb78:	e0c00115 	stw	r3,4(fp)
  80bb7c:	e0800015 	stw	r2,0(fp)
  80bb80:	003cb006 	br	80ae44 <_strtod_r+0x1dc>
  80bb84:	d8800d17 	ldw	r2,52(sp)
  80bb88:	e0800015 	stw	r2,0(fp)
  80bb8c:	d8c00e17 	ldw	r3,56(sp)
  80bb90:	e0c00115 	stw	r3,4(fp)
  80bb94:	9880020c 	andi	r2,r19,8
  80bb98:	103caa26 	beq	r2,zero,80ae44 <_strtod_r+0x1dc>
  80bb9c:	e0800117 	ldw	r2,4(fp)
  80bba0:	10a00034 	orhi	r2,r2,32768
  80bba4:	e0800115 	stw	r2,4(fp)
  80bba8:	003ca606 	br	80ae44 <_strtod_r+0x1dc>
  80bbac:	009ffc34 	movhi	r2,32752
  80bbb0:	e0800115 	stw	r2,4(fp)
  80bbb4:	e0000015 	stw	zero,0(fp)
  80bbb8:	003ff606 	br	80bb94 <_strtod_r+0xf2c>
  80bbbc:	00a00034 	movhi	r2,32768
  80bbc0:	10bfffc4 	addi	r2,r2,-1
  80bbc4:	00ffffc4 	movi	r3,-1
  80bbc8:	e0800115 	stw	r2,4(fp)
  80bbcc:	e0c00015 	stw	r3,0(fp)
  80bbd0:	003ff006 	br	80bb94 <_strtod_r+0xf2c>
  80bbd4:	e0000115 	stw	zero,4(fp)
  80bbd8:	e0000015 	stw	zero,0(fp)
  80bbdc:	003fed06 	br	80bb94 <_strtod_r+0xf2c>
  80bbe0:	d8800e17 	ldw	r2,56(sp)
  80bbe4:	29010cc4 	addi	r4,r5,1075
  80bbe8:	00fffc34 	movhi	r3,65520
  80bbec:	18ffffc4 	addi	r3,r3,-1
  80bbf0:	2008953a 	slli	r4,r4,20
  80bbf4:	10c4703a 	and	r2,r2,r3
  80bbf8:	d8c00d17 	ldw	r3,52(sp)
  80bbfc:	1104b03a 	or	r2,r2,r4
  80bc00:	e0800115 	stw	r2,4(fp)
  80bc04:	e0c00015 	stw	r3,0(fp)
  80bc08:	003fe206 	br	80bb94 <_strtod_r+0xf2c>
  80bc0c:	00800884 	movi	r2,34
  80bc10:	a8800015 	stw	r2,0(r21)
  80bc14:	e0000015 	stw	zero,0(fp)
  80bc18:	e0000115 	stw	zero,4(fp)
  80bc1c:	003f8506 	br	80ba34 <_strtod_r+0xdcc>
  80bc20:	03800044 	movi	r14,1
  80bc24:	003d7706 	br	80b204 <_strtod_r+0x59c>
  80bc28:	99c5883a 	add	r2,r19,r7
  80bc2c:	11ffffc4 	addi	r7,r2,-1
  80bc30:	00800204 	movi	r2,8
  80bc34:	3cc00044 	addi	r19,r7,1
  80bc38:	11c0df16 	blt	r2,r7,80bfb8 <_strtod_r+0x1350>
  80bc3c:	a08002a4 	muli	r2,r20,10
  80bc40:	000f883a 	mov	r7,zero
  80bc44:	1269883a 	add	r20,r2,r9
  80bc48:	42000044 	addi	r8,r8,1
  80bc4c:	da000415 	stw	r8,16(sp)
  80bc50:	41000007 	ldb	r4,0(r8)
  80bc54:	003d3706 	br	80b134 <_strtod_r+0x4cc>
  80bc58:	d9801317 	ldw	r6,76(sp)
  80bc5c:	3000511e 	bne	r6,zero,80bda4 <_strtod_r+0x113c>
  80bc60:	e0800017 	ldw	r2,0(fp)
  80bc64:	1000d81e 	bne	r2,zero,80bfc8 <_strtod_r+0x1360>
  80bc68:	e0c00117 	ldw	r3,4(fp)
  80bc6c:	01000434 	movhi	r4,16
  80bc70:	213fffc4 	addi	r4,r4,-1
  80bc74:	1904703a 	and	r2,r3,r4
  80bc78:	1000b01e 	bne	r2,zero,80bf3c <_strtod_r+0x12d4>
  80bc7c:	18dffc2c 	andhi	r3,r3,32752
  80bc80:	0081ac34 	movhi	r2,1712
  80bc84:	10c1102e 	bgeu	r2,r3,80c0c8 <_strtod_r+0x1460>
  80bc88:	a0800517 	ldw	r2,20(r20)
  80bc8c:	1000031e 	bne	r2,zero,80bc9c <_strtod_r+0x1034>
  80bc90:	a0c00417 	ldw	r3,16(r20)
  80bc94:	00800044 	movi	r2,1
  80bc98:	10c0420e 	bge	r2,r3,80bda4 <_strtod_r+0x113c>
  80bc9c:	a00b883a 	mov	r5,r20
  80bca0:	a809883a 	mov	r4,r21
  80bca4:	01800044 	movi	r6,1
  80bca8:	080a3040 	call	80a304 <__lshift>
  80bcac:	1009883a 	mov	r4,r2
  80bcb0:	b00b883a 	mov	r5,r22
  80bcb4:	1029883a 	mov	r20,r2
  80bcb8:	0809b1c0 	call	809b1c <__mcmp>
  80bcbc:	0080c20e 	bge	zero,r2,80bfc8 <_strtod_r+0x1360>
  80bcc0:	e1800117 	ldw	r6,4(fp)
  80bcc4:	d9001417 	ldw	r4,80(sp)
  80bcc8:	2013003a 	cmpeq	r9,r4,zero
  80bccc:	4800ef1e 	bne	r9,zero,80c08c <_strtod_r+0x1424>
  80bcd0:	30dffc2c 	andhi	r3,r6,32752
  80bcd4:	0081ac34 	movhi	r2,1712
  80bcd8:	10c0ec36 	bltu	r2,r3,80c08c <_strtod_r+0x1424>
  80bcdc:	0080dc34 	movhi	r2,880
  80bce0:	10ffca2e 	bgeu	r2,r3,80bc0c <_strtod_r+0xfa4>
  80bce4:	e0800017 	ldw	r2,0(fp)
  80bce8:	e0c00117 	ldw	r3,4(fp)
  80bcec:	020e5434 	movhi	r8,14672
  80bcf0:	000d883a 	mov	r6,zero
  80bcf4:	400f883a 	mov	r7,r8
  80bcf8:	180b883a 	mov	r5,r3
  80bcfc:	1009883a 	mov	r4,r2
  80bd00:	da000c15 	stw	r8,48(sp)
  80bd04:	d8000b15 	stw	zero,44(sp)
  80bd08:	080ef540 	call	80ef54 <__muldf3>
  80bd0c:	e0800015 	stw	r2,0(fp)
  80bd10:	e0c00115 	stw	r3,4(fp)
  80bd14:	183f471e 	bne	r3,zero,80ba34 <_strtod_r+0xdcc>
  80bd18:	103f461e 	bne	r2,zero,80ba34 <_strtod_r+0xdcc>
  80bd1c:	00800884 	movi	r2,34
  80bd20:	a8800015 	stw	r2,0(r21)
  80bd24:	003f4306 	br	80ba34 <_strtod_r+0xdcc>
  80bd28:	d8801317 	ldw	r2,76(sp)
  80bd2c:	1025003a 	cmpeq	r18,r2,zero
  80bd30:	9000861e 	bne	r18,zero,80bf4c <_strtod_r+0x12e4>
  80bd34:	e1400117 	ldw	r5,4(fp)
  80bd38:	00c00434 	movhi	r3,16
  80bd3c:	18ffffc4 	addi	r3,r3,-1
  80bd40:	28c4703a 	and	r2,r5,r3
  80bd44:	10c01b26 	beq	r2,r3,80bdb4 <_strtod_r+0x114c>
  80bd48:	e1c00017 	ldw	r7,0(fp)
  80bd4c:	3880004c 	andi	r2,r7,1
  80bd50:	1005003a 	cmpeq	r2,r2,zero
  80bd54:	1000791e 	bne	r2,zero,80bf3c <_strtod_r+0x12d4>
  80bd58:	9000b126 	beq	r18,zero,80c020 <_strtod_r+0x13b8>
  80bd5c:	e4400117 	ldw	r17,4(fp)
  80bd60:	3809883a 	mov	r4,r7
  80bd64:	3821883a 	mov	r16,r7
  80bd68:	880b883a 	mov	r5,r17
  80bd6c:	0809b7c0 	call	809b7c <__ulp>
  80bd70:	180f883a 	mov	r7,r3
  80bd74:	880b883a 	mov	r5,r17
  80bd78:	8009883a 	mov	r4,r16
  80bd7c:	100d883a 	mov	r6,r2
  80bd80:	080ee600 	call	80ee60 <__subdf3>
  80bd84:	1009883a 	mov	r4,r2
  80bd88:	000d883a 	mov	r6,zero
  80bd8c:	000f883a 	mov	r7,zero
  80bd90:	180b883a 	mov	r5,r3
  80bd94:	e0800015 	stw	r2,0(fp)
  80bd98:	e0c00115 	stw	r3,4(fp)
  80bd9c:	080f5f80 	call	80f5f8 <__nedf2>
  80bda0:	103f9a26 	beq	r2,zero,80bc0c <_strtod_r+0xfa4>
  80bda4:	d9001417 	ldw	r4,80(sp)
  80bda8:	2013003a 	cmpeq	r9,r4,zero
  80bdac:	483f211e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80bdb0:	003fcc06 	br	80bce4 <_strtod_r+0x107c>
  80bdb4:	d9001417 	ldw	r4,80(sp)
  80bdb8:	e1c00017 	ldw	r7,0(fp)
  80bdbc:	2013003a 	cmpeq	r9,r4,zero
  80bdc0:	4800bd1e 	bne	r9,zero,80c0b8 <_strtod_r+0x1450>
  80bdc4:	28dffc2c 	andhi	r3,r5,32752
  80bdc8:	0081a834 	movhi	r2,1696
  80bdcc:	10c0ba36 	bltu	r2,r3,80c0b8 <_strtod_r+0x1450>
  80bdd0:	1804d53a 	srli	r2,r3,20
  80bdd4:	00c01ac4 	movi	r3,107
  80bdd8:	013fffc4 	movi	r4,-1
  80bddc:	1887c83a 	sub	r3,r3,r2
  80bde0:	20c4983a 	sll	r2,r4,r3
  80bde4:	11ffd91e 	bne	r2,r7,80bd4c <_strtod_r+0x10e4>
  80bde8:	28dffc2c 	andhi	r3,r5,32752
  80bdec:	00800434 	movhi	r2,16
  80bdf0:	188d883a 	add	r6,r3,r2
  80bdf4:	e1800115 	stw	r6,4(fp)
  80bdf8:	e0000015 	stw	zero,0(fp)
  80bdfc:	483f0d1e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80be00:	003fb806 	br	80bce4 <_strtod_r+0x107c>
  80be04:	0021883a 	mov	r16,zero
  80be08:	0005883a 	mov	r2,zero
  80be0c:	044ff834 	movhi	r17,16352
  80be10:	00eff834 	movhi	r3,49120
  80be14:	003e8606 	br	80b830 <_strtod_r+0xbc8>
  80be18:	803d9e26 	beq	r16,zero,80b494 <_strtod_r+0x82c>
  80be1c:	0421c83a 	sub	r16,zero,r16
  80be20:	814003cc 	andi	r5,r16,15
  80be24:	28000f26 	beq	r5,zero,80be64 <_strtod_r+0x11fc>
  80be28:	280a90fa 	slli	r5,r5,3
  80be2c:	01002074 	movhi	r4,129
  80be30:	21147d04 	addi	r4,r4,20980
  80be34:	e0800017 	ldw	r2,0(fp)
  80be38:	290b883a 	add	r5,r5,r4
  80be3c:	2a000017 	ldw	r8,0(r5)
  80be40:	e0c00117 	ldw	r3,4(fp)
  80be44:	2a400117 	ldw	r9,4(r5)
  80be48:	1009883a 	mov	r4,r2
  80be4c:	180b883a 	mov	r5,r3
  80be50:	480f883a 	mov	r7,r9
  80be54:	400d883a 	mov	r6,r8
  80be58:	080f3180 	call	80f318 <__divdf3>
  80be5c:	e0c00115 	stw	r3,4(fp)
  80be60:	e0800015 	stw	r2,0(fp)
  80be64:	8021d13a 	srai	r16,r16,4
  80be68:	803d8a26 	beq	r16,zero,80b494 <_strtod_r+0x82c>
  80be6c:	008007c4 	movi	r2,31
  80be70:	14002d16 	blt	r2,r16,80bf28 <_strtod_r+0x12c0>
  80be74:	8080040c 	andi	r2,r16,16
  80be78:	10009926 	beq	r2,zero,80c0e0 <_strtod_r+0x1478>
  80be7c:	00801a84 	movi	r2,106
  80be80:	d8801415 	stw	r2,80(sp)
  80be84:	0400110e 	bge	zero,r16,80becc <_strtod_r+0x1264>
  80be88:	04402074 	movhi	r17,129
  80be8c:	8c54ca04 	addi	r17,r17,21288
  80be90:	8080004c 	andi	r2,r16,1
  80be94:	1005003a 	cmpeq	r2,r2,zero
  80be98:	1000091e 	bne	r2,zero,80bec0 <_strtod_r+0x1258>
  80be9c:	e0800017 	ldw	r2,0(fp)
  80bea0:	e0c00117 	ldw	r3,4(fp)
  80bea4:	89800017 	ldw	r6,0(r17)
  80bea8:	89c00117 	ldw	r7,4(r17)
  80beac:	180b883a 	mov	r5,r3
  80beb0:	1009883a 	mov	r4,r2
  80beb4:	080ef540 	call	80ef54 <__muldf3>
  80beb8:	e0c00115 	stw	r3,4(fp)
  80bebc:	e0800015 	stw	r2,0(fp)
  80bec0:	8021d07a 	srai	r16,r16,1
  80bec4:	8c400204 	addi	r17,r17,8
  80bec8:	043ff116 	blt	zero,r16,80be90 <_strtod_r+0x1228>
  80becc:	d8c01417 	ldw	r3,80(sp)
  80bed0:	18000d26 	beq	r3,zero,80bf08 <_strtod_r+0x12a0>
  80bed4:	e1000117 	ldw	r4,4(fp)
  80bed8:	00c01ac4 	movi	r3,107
  80bedc:	209ffc2c 	andhi	r2,r4,32752
  80bee0:	1004d53a 	srli	r2,r2,20
  80bee4:	1887c83a 	sub	r3,r3,r2
  80bee8:	00c0070e 	bge	zero,r3,80bf08 <_strtod_r+0x12a0>
  80beec:	008007c4 	movi	r2,31
  80bef0:	10c0900e 	bge	r2,r3,80c134 <_strtod_r+0x14cc>
  80bef4:	00800d04 	movi	r2,52
  80bef8:	e0000015 	stw	zero,0(fp)
  80befc:	10c0870e 	bge	r2,r3,80c11c <_strtod_r+0x14b4>
  80bf00:	0180dc34 	movhi	r6,880
  80bf04:	e1800115 	stw	r6,4(fp)
  80bf08:	e0800017 	ldw	r2,0(fp)
  80bf0c:	e0c00117 	ldw	r3,4(fp)
  80bf10:	000d883a 	mov	r6,zero
  80bf14:	000f883a 	mov	r7,zero
  80bf18:	180b883a 	mov	r5,r3
  80bf1c:	1009883a 	mov	r4,r2
  80bf20:	080f5f80 	call	80f5f8 <__nedf2>
  80bf24:	103d5c1e 	bne	r2,zero,80b498 <_strtod_r+0x830>
  80bf28:	00800884 	movi	r2,34
  80bf2c:	a8800015 	stw	r2,0(r21)
  80bf30:	e0000015 	stw	zero,0(fp)
  80bf34:	e0000115 	stw	zero,4(fp)
  80bf38:	003bc206 	br	80ae44 <_strtod_r+0x1dc>
  80bf3c:	d8801417 	ldw	r2,80(sp)
  80bf40:	1013003a 	cmpeq	r9,r2,zero
  80bf44:	483ebb1e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80bf48:	003f6606 	br	80bce4 <_strtod_r+0x107c>
  80bf4c:	e1800117 	ldw	r6,4(fp)
  80bf50:	00c00434 	movhi	r3,16
  80bf54:	18ffffc4 	addi	r3,r3,-1
  80bf58:	30c4703a 	and	r2,r6,r3
  80bf5c:	103f7a1e 	bne	r2,zero,80bd48 <_strtod_r+0x10e0>
  80bf60:	e1c00017 	ldw	r7,0(fp)
  80bf64:	383f791e 	bne	r7,zero,80bd4c <_strtod_r+0x10e4>
  80bf68:	003f5606 	br	80bcc4 <_strtod_r+0x105c>
  80bf6c:	d9800f17 	ldw	r6,60(sp)
  80bf70:	00bffa84 	movi	r2,-22
  80bf74:	30bcd416 	blt	r6,r2,80b2c8 <_strtod_r+0x660>
  80bf78:	317ffe24 	muli	r5,r6,-8
  80bf7c:	01002074 	movhi	r4,129
  80bf80:	21147d04 	addi	r4,r4,20980
  80bf84:	e0800017 	ldw	r2,0(fp)
  80bf88:	290b883a 	add	r5,r5,r4
  80bf8c:	2a000017 	ldw	r8,0(r5)
  80bf90:	e0c00117 	ldw	r3,4(fp)
  80bf94:	2a400117 	ldw	r9,4(r5)
  80bf98:	1009883a 	mov	r4,r2
  80bf9c:	180b883a 	mov	r5,r3
  80bfa0:	480f883a 	mov	r7,r9
  80bfa4:	400d883a 	mov	r6,r8
  80bfa8:	080f3180 	call	80f318 <__divdf3>
  80bfac:	e0c00115 	stw	r3,4(fp)
  80bfb0:	e0800015 	stw	r2,0(fp)
  80bfb4:	003ba306 	br	80ae44 <_strtod_r+0x1dc>
  80bfb8:	00800404 	movi	r2,16
  80bfbc:	14c02f0e 	bge	r2,r19,80c07c <_strtod_r+0x1414>
  80bfc0:	000f883a 	mov	r7,zero
  80bfc4:	003f2006 	br	80bc48 <_strtod_r+0xfe0>
  80bfc8:	d9801417 	ldw	r6,80(sp)
  80bfcc:	3013003a 	cmpeq	r9,r6,zero
  80bfd0:	483e981e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80bfd4:	003f4306 	br	80bce4 <_strtod_r+0x107c>
  80bfd8:	00801a44 	movi	r2,105
  80bfdc:	20bc6326 	beq	r4,r2,80b16c <_strtod_r+0x504>
  80bfe0:	00801b84 	movi	r2,110
  80bfe4:	20bbba1e 	bne	r4,r2,80aed0 <_strtod_r+0x268>
  80bfe8:	dc000404 	addi	r16,sp,16
  80bfec:	8009883a 	mov	r4,r16
  80bff0:	01402074 	movhi	r5,129
  80bff4:	2954c904 	addi	r5,r5,21284
  80bff8:	080ac200 	call	80ac20 <match>
  80bffc:	103bb426 	beq	r2,zero,80aed0 <_strtod_r+0x268>
  80c000:	d8800417 	ldw	r2,16(sp)
  80c004:	00c00a04 	movi	r3,40
  80c008:	11000007 	ldb	r4,0(r2)
  80c00c:	20c03626 	beq	r4,r3,80c0e8 <_strtod_r+0x1480>
  80c010:	01bffe34 	movhi	r6,65528
  80c014:	e1800115 	stw	r6,4(fp)
  80c018:	e0000015 	stw	zero,0(fp)
  80c01c:	003b8906 	br	80ae44 <_strtod_r+0x1dc>
  80c020:	e4400117 	ldw	r17,4(fp)
  80c024:	3809883a 	mov	r4,r7
  80c028:	3821883a 	mov	r16,r7
  80c02c:	880b883a 	mov	r5,r17
  80c030:	0809b7c0 	call	809b7c <__ulp>
  80c034:	100d883a 	mov	r6,r2
  80c038:	880b883a 	mov	r5,r17
  80c03c:	180f883a 	mov	r7,r3
  80c040:	8009883a 	mov	r4,r16
  80c044:	080eee00 	call	80eee0 <__adddf3>
  80c048:	d9801417 	ldw	r6,80(sp)
  80c04c:	e0c00115 	stw	r3,4(fp)
  80c050:	e0800015 	stw	r2,0(fp)
  80c054:	3013003a 	cmpeq	r9,r6,zero
  80c058:	483e761e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80c05c:	003f2106 	br	80bce4 <_strtod_r+0x107c>
  80c060:	000f883a 	mov	r7,zero
  80c064:	003cf006 	br	80b428 <_strtod_r+0x7c0>
  80c068:	0080d434 	movhi	r2,848
  80c06c:	188d883a 	add	r6,r3,r2
  80c070:	d8001415 	stw	zero,80(sp)
  80c074:	e1800115 	stw	r6,4(fp)
  80c078:	003d0706 	br	80b498 <_strtod_r+0x830>
  80c07c:	808002a4 	muli	r2,r16,10
  80c080:	000f883a 	mov	r7,zero
  80c084:	1261883a 	add	r16,r2,r9
  80c088:	003eef06 	br	80bc48 <_strtod_r+0xfe0>
  80c08c:	309ffc2c 	andhi	r2,r6,32752
  80c090:	00fffc34 	movhi	r3,65520
  80c094:	10c5883a 	add	r2,r2,r3
  80c098:	00c00434 	movhi	r3,16
  80c09c:	18ffffc4 	addi	r3,r3,-1
  80c0a0:	10ccb03a 	or	r6,r2,r3
  80c0a4:	01ffffc4 	movi	r7,-1
  80c0a8:	e1800115 	stw	r6,4(fp)
  80c0ac:	e1c00015 	stw	r7,0(fp)
  80c0b0:	483e601e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80c0b4:	003f0b06 	br	80bce4 <_strtod_r+0x107c>
  80c0b8:	00bfffc4 	movi	r2,-1
  80c0bc:	003f4906 	br	80bde4 <_strtod_r+0x117c>
  80c0c0:	0025883a 	mov	r18,zero
  80c0c4:	003cb106 	br	80b38c <_strtod_r+0x724>
  80c0c8:	d8c01417 	ldw	r3,80(sp)
  80c0cc:	1813003a 	cmpeq	r9,r3,zero
  80c0d0:	483e581e 	bne	r9,zero,80ba34 <_strtod_r+0xdcc>
  80c0d4:	003f0306 	br	80bce4 <_strtod_r+0x107c>
  80c0d8:	980f883a 	mov	r7,r19
  80c0dc:	003ed406 	br	80bc30 <_strtod_r+0xfc8>
  80c0e0:	d8001415 	stw	zero,80(sp)
  80c0e4:	003f6706 	br	80be84 <_strtod_r+0x121c>
  80c0e8:	8009883a 	mov	r4,r16
  80c0ec:	01402074 	movhi	r5,129
  80c0f0:	29574604 	addi	r5,r5,23832
  80c0f4:	d9800d04 	addi	r6,sp,52
  80c0f8:	080d9d80 	call	80d9d8 <__hexnan>
  80c0fc:	00c00144 	movi	r3,5
  80c100:	10ffc31e 	bne	r2,r3,80c010 <_strtod_r+0x13a8>
  80c104:	d8800e17 	ldw	r2,56(sp)
  80c108:	d9c00d17 	ldw	r7,52(sp)
  80c10c:	119ffc34 	orhi	r6,r2,32752
  80c110:	e1800115 	stw	r6,4(fp)
  80c114:	e1c00015 	stw	r7,0(fp)
  80c118:	003b4a06 	br	80ae44 <_strtod_r+0x1dc>
  80c11c:	18fff804 	addi	r3,r3,-32
  80c120:	00bfffc4 	movi	r2,-1
  80c124:	10c4983a 	sll	r2,r2,r3
  80c128:	208c703a 	and	r6,r4,r2
  80c12c:	e1800115 	stw	r6,4(fp)
  80c130:	003f7506 	br	80bf08 <_strtod_r+0x12a0>
  80c134:	00bfffc4 	movi	r2,-1
  80c138:	10c4983a 	sll	r2,r2,r3
  80c13c:	e0c00017 	ldw	r3,0(fp)
  80c140:	188e703a 	and	r7,r3,r2
  80c144:	e1c00015 	stw	r7,0(fp)
  80c148:	003f6f06 	br	80bf08 <_strtod_r+0x12a0>

0080c14c <strtof>:
  80c14c:	defffa04 	addi	sp,sp,-24
  80c150:	dd000415 	stw	r20,16(sp)
  80c154:	05002074 	movhi	r20,129
  80c158:	a51c4f04 	addi	r20,r20,28988
  80c15c:	2007883a 	mov	r3,r4
  80c160:	a1000017 	ldw	r4,0(r20)
  80c164:	280d883a 	mov	r6,r5
  80c168:	180b883a 	mov	r5,r3
  80c16c:	dfc00515 	stw	ra,20(sp)
  80c170:	dcc00315 	stw	r19,12(sp)
  80c174:	dc800215 	stw	r18,8(sp)
  80c178:	dc400115 	stw	r17,4(sp)
  80c17c:	dc000015 	stw	r16,0(sp)
  80c180:	080ac680 	call	80ac68 <_strtod_r>
  80c184:	180b883a 	mov	r5,r3
  80c188:	1009883a 	mov	r4,r2
  80c18c:	1823883a 	mov	r17,r3
  80c190:	1021883a 	mov	r16,r2
  80c194:	080fa700 	call	80fa70 <__truncdfsf2>
  80c198:	1009883a 	mov	r4,r2
  80c19c:	000b883a 	mov	r5,zero
  80c1a0:	1025883a 	mov	r18,r2
  80c1a4:	1027883a 	mov	r19,r2
  80c1a8:	080e8e80 	call	80e8e8 <__nesf2>
  80c1ac:	000d883a 	mov	r6,zero
  80c1b0:	000f883a 	mov	r7,zero
  80c1b4:	8009883a 	mov	r4,r16
  80c1b8:	880b883a 	mov	r5,r17
  80c1bc:	10000e1e 	bne	r2,zero,80c1f8 <strtof+0xac>
  80c1c0:	080f5f80 	call	80f5f8 <__nedf2>
  80c1c4:	10000c26 	beq	r2,zero,80c1f8 <strtof+0xac>
  80c1c8:	a0c00017 	ldw	r3,0(r20)
  80c1cc:	00800884 	movi	r2,34
  80c1d0:	18800015 	stw	r2,0(r3)
  80c1d4:	9805883a 	mov	r2,r19
  80c1d8:	dfc00517 	ldw	ra,20(sp)
  80c1dc:	dd000417 	ldw	r20,16(sp)
  80c1e0:	dcc00317 	ldw	r19,12(sp)
  80c1e4:	dc800217 	ldw	r18,8(sp)
  80c1e8:	dc400117 	ldw	r17,4(sp)
  80c1ec:	dc000017 	ldw	r16,0(sp)
  80c1f0:	dec00604 	addi	sp,sp,24
  80c1f4:	f800283a 	ret
  80c1f8:	9009883a 	mov	r4,r18
  80c1fc:	015fe034 	movhi	r5,32640
  80c200:	297fffc4 	addi	r5,r5,-1
  80c204:	080e9600 	call	80e960 <__gtsf2>
  80c208:	00ffffc4 	movi	r3,-1
  80c20c:	011ffc34 	movhi	r4,32752
  80c210:	213fffc4 	addi	r4,r4,-1
  80c214:	200f883a 	mov	r7,r4
  80c218:	180d883a 	mov	r6,r3
  80c21c:	8009883a 	mov	r4,r16
  80c220:	880b883a 	mov	r5,r17
  80c224:	00800f16 	blt	zero,r2,80c264 <strtof+0x118>
  80c228:	9009883a 	mov	r4,r18
  80c22c:	017fe034 	movhi	r5,65408
  80c230:	297fffc4 	addi	r5,r5,-1
  80c234:	080e9d80 	call	80e9d8 <__ltsf2>
  80c238:	023fffc4 	movi	r8,-1
  80c23c:	027ffc34 	movhi	r9,65520
  80c240:	4a7fffc4 	addi	r9,r9,-1
  80c244:	880b883a 	mov	r5,r17
  80c248:	480f883a 	mov	r7,r9
  80c24c:	8009883a 	mov	r4,r16
  80c250:	400d883a 	mov	r6,r8
  80c254:	103fdf0e 	bge	r2,zero,80c1d4 <strtof+0x88>
  80c258:	080f7900 	call	80f790 <__ltdf2>
  80c25c:	103fda0e 	bge	r2,zero,80c1c8 <strtof+0x7c>
  80c260:	003fdc06 	br	80c1d4 <strtof+0x88>
  80c264:	080f6800 	call	80f680 <__gtdf2>
  80c268:	00bfd70e 	bge	zero,r2,80c1c8 <strtof+0x7c>
  80c26c:	003fee06 	br	80c228 <strtof+0xdc>

0080c270 <strtod>:
  80c270:	01802074 	movhi	r6,129
  80c274:	319c4f04 	addi	r6,r6,28988
  80c278:	2007883a 	mov	r3,r4
  80c27c:	31000017 	ldw	r4,0(r6)
  80c280:	280d883a 	mov	r6,r5
  80c284:	180b883a 	mov	r5,r3
  80c288:	080ac681 	jmpi	80ac68 <_strtod_r>

0080c28c <_strtol_r>:
  80c28c:	defff304 	addi	sp,sp,-52
  80c290:	00802074 	movhi	r2,129
  80c294:	109c5304 	addi	r2,r2,29004
  80c298:	dcc00615 	stw	r19,24(sp)
  80c29c:	14c00017 	ldw	r19,0(r2)
  80c2a0:	ddc00a15 	stw	r23,40(sp)
  80c2a4:	dc000315 	stw	r16,12(sp)
  80c2a8:	dfc00c15 	stw	ra,48(sp)
  80c2ac:	df000b15 	stw	fp,44(sp)
  80c2b0:	dd800915 	stw	r22,36(sp)
  80c2b4:	dd400815 	stw	r21,32(sp)
  80c2b8:	dd000715 	stw	r20,28(sp)
  80c2bc:	dc800515 	stw	r18,20(sp)
  80c2c0:	dc400415 	stw	r17,16(sp)
  80c2c4:	282f883a 	mov	r23,r5
  80c2c8:	d9000015 	stw	r4,0(sp)
  80c2cc:	d9800115 	stw	r6,4(sp)
  80c2d0:	2821883a 	mov	r16,r5
  80c2d4:	84400007 	ldb	r17,0(r16)
  80c2d8:	84000044 	addi	r16,r16,1
  80c2dc:	9c47883a 	add	r3,r19,r17
  80c2e0:	18800003 	ldbu	r2,0(r3)
  80c2e4:	1080020c 	andi	r2,r2,8
  80c2e8:	103ffa1e 	bne	r2,zero,80c2d4 <_strtol_r+0x48>
  80c2ec:	00800b44 	movi	r2,45
  80c2f0:	88805c26 	beq	r17,r2,80c464 <_strtol_r+0x1d8>
  80c2f4:	00800ac4 	movi	r2,43
  80c2f8:	88805726 	beq	r17,r2,80c458 <_strtol_r+0x1cc>
  80c2fc:	0039883a 	mov	fp,zero
  80c300:	3807003a 	cmpeq	r3,r7,zero
  80c304:	1800431e 	bne	r3,zero,80c414 <_strtol_r+0x188>
  80c308:	00800404 	movi	r2,16
  80c30c:	38804126 	beq	r7,r2,80c414 <_strtol_r+0x188>
  80c310:	3829883a 	mov	r20,r7
  80c314:	e02cc03a 	cmpne	r22,fp,zero
  80c318:	b0004b1e 	bne	r22,zero,80c448 <_strtol_r+0x1bc>
  80c31c:	04a00034 	movhi	r18,32768
  80c320:	94bfffc4 	addi	r18,r18,-1
  80c324:	9009883a 	mov	r4,r18
  80c328:	a00b883a 	mov	r5,r20
  80c32c:	d9c00215 	stw	r7,8(sp)
  80c330:	080fdbc0 	call	80fdbc <__umodsi3>
  80c334:	9009883a 	mov	r4,r18
  80c338:	a00b883a 	mov	r5,r20
  80c33c:	102b883a 	mov	r21,r2
  80c340:	080fdb40 	call	80fdb4 <__udivsi3>
  80c344:	1011883a 	mov	r8,r2
  80c348:	9c45883a 	add	r2,r19,r17
  80c34c:	11000003 	ldbu	r4,0(r2)
  80c350:	000b883a 	mov	r5,zero
  80c354:	000d883a 	mov	r6,zero
  80c358:	20c0010c 	andi	r3,r4,4
  80c35c:	d9c00217 	ldw	r7,8(sp)
  80c360:	18000e26 	beq	r3,zero,80c39c <_strtol_r+0x110>
  80c364:	88fff404 	addi	r3,r17,-48
  80c368:	19c0140e 	bge	r3,r7,80c3bc <_strtol_r+0x130>
  80c36c:	30003116 	blt	r6,zero,80c434 <_strtol_r+0x1a8>
  80c370:	41403036 	bltu	r8,r5,80c434 <_strtol_r+0x1a8>
  80c374:	2a002e26 	beq	r5,r8,80c430 <_strtol_r+0x1a4>
  80c378:	2d05383a 	mul	r2,r5,r20
  80c37c:	01800044 	movi	r6,1
  80c380:	10cb883a 	add	r5,r2,r3
  80c384:	84400007 	ldb	r17,0(r16)
  80c388:	84000044 	addi	r16,r16,1
  80c38c:	9c45883a 	add	r2,r19,r17
  80c390:	11000003 	ldbu	r4,0(r2)
  80c394:	20c0010c 	andi	r3,r4,4
  80c398:	183ff21e 	bne	r3,zero,80c364 <_strtol_r+0xd8>
  80c39c:	208000cc 	andi	r2,r4,3
  80c3a0:	10000626 	beq	r2,zero,80c3bc <_strtol_r+0x130>
  80c3a4:	2080004c 	andi	r2,r4,1
  80c3a8:	1005003a 	cmpeq	r2,r2,zero
  80c3ac:	1000231e 	bne	r2,zero,80c43c <_strtol_r+0x1b0>
  80c3b0:	00800dc4 	movi	r2,55
  80c3b4:	8887c83a 	sub	r3,r17,r2
  80c3b8:	19ffec16 	blt	r3,r7,80c36c <_strtol_r+0xe0>
  80c3bc:	30002d16 	blt	r6,zero,80c474 <_strtol_r+0x1e8>
  80c3c0:	b000231e 	bne	r22,zero,80c450 <_strtol_r+0x1c4>
  80c3c4:	2807883a 	mov	r3,r5
  80c3c8:	d8800117 	ldw	r2,4(sp)
  80c3cc:	10000426 	beq	r2,zero,80c3e0 <_strtol_r+0x154>
  80c3d0:	30000126 	beq	r6,zero,80c3d8 <_strtol_r+0x14c>
  80c3d4:	85ffffc4 	addi	r23,r16,-1
  80c3d8:	d9000117 	ldw	r4,4(sp)
  80c3dc:	25c00015 	stw	r23,0(r4)
  80c3e0:	1805883a 	mov	r2,r3
  80c3e4:	dfc00c17 	ldw	ra,48(sp)
  80c3e8:	df000b17 	ldw	fp,44(sp)
  80c3ec:	ddc00a17 	ldw	r23,40(sp)
  80c3f0:	dd800917 	ldw	r22,36(sp)
  80c3f4:	dd400817 	ldw	r21,32(sp)
  80c3f8:	dd000717 	ldw	r20,28(sp)
  80c3fc:	dcc00617 	ldw	r19,24(sp)
  80c400:	dc800517 	ldw	r18,20(sp)
  80c404:	dc400417 	ldw	r17,16(sp)
  80c408:	dc000317 	ldw	r16,12(sp)
  80c40c:	dec00d04 	addi	sp,sp,52
  80c410:	f800283a 	ret
  80c414:	00800c04 	movi	r2,48
  80c418:	88801d26 	beq	r17,r2,80c490 <_strtol_r+0x204>
  80c41c:	183fbc26 	beq	r3,zero,80c310 <_strtol_r+0x84>
  80c420:	00800c04 	movi	r2,48
  80c424:	88802726 	beq	r17,r2,80c4c4 <_strtol_r+0x238>
  80c428:	01c00284 	movi	r7,10
  80c42c:	003fb806 	br	80c310 <_strtol_r+0x84>
  80c430:	a8ffd10e 	bge	r21,r3,80c378 <_strtol_r+0xec>
  80c434:	01bfffc4 	movi	r6,-1
  80c438:	003fd206 	br	80c384 <_strtol_r+0xf8>
  80c43c:	008015c4 	movi	r2,87
  80c440:	8887c83a 	sub	r3,r17,r2
  80c444:	003fdc06 	br	80c3b8 <_strtol_r+0x12c>
  80c448:	04a00034 	movhi	r18,32768
  80c44c:	003fb506 	br	80c324 <_strtol_r+0x98>
  80c450:	0147c83a 	sub	r3,zero,r5
  80c454:	003fdc06 	br	80c3c8 <_strtol_r+0x13c>
  80c458:	84400007 	ldb	r17,0(r16)
  80c45c:	84000044 	addi	r16,r16,1
  80c460:	003fa606 	br	80c2fc <_strtol_r+0x70>
  80c464:	84400007 	ldb	r17,0(r16)
  80c468:	07000044 	movi	fp,1
  80c46c:	84000044 	addi	r16,r16,1
  80c470:	003fa306 	br	80c300 <_strtol_r+0x74>
  80c474:	e005003a 	cmpeq	r2,fp,zero
  80c478:	10000f1e 	bne	r2,zero,80c4b8 <_strtol_r+0x22c>
  80c47c:	00e00034 	movhi	r3,32768
  80c480:	d9000017 	ldw	r4,0(sp)
  80c484:	00800884 	movi	r2,34
  80c488:	20800015 	stw	r2,0(r4)
  80c48c:	003fce06 	br	80c3c8 <_strtol_r+0x13c>
  80c490:	81000007 	ldb	r4,0(r16)
  80c494:	00801e04 	movi	r2,120
  80c498:	20800226 	beq	r4,r2,80c4a4 <_strtol_r+0x218>
  80c49c:	00801604 	movi	r2,88
  80c4a0:	20bfde1e 	bne	r4,r2,80c41c <_strtol_r+0x190>
  80c4a4:	84400047 	ldb	r17,1(r16)
  80c4a8:	01c00404 	movi	r7,16
  80c4ac:	84000084 	addi	r16,r16,2
  80c4b0:	3829883a 	mov	r20,r7
  80c4b4:	003f9706 	br	80c314 <_strtol_r+0x88>
  80c4b8:	00e00034 	movhi	r3,32768
  80c4bc:	18ffffc4 	addi	r3,r3,-1
  80c4c0:	003fef06 	br	80c480 <_strtol_r+0x1f4>
  80c4c4:	01c00204 	movi	r7,8
  80c4c8:	3829883a 	mov	r20,r7
  80c4cc:	003f9106 	br	80c314 <_strtol_r+0x88>

0080c4d0 <strtol>:
  80c4d0:	00802074 	movhi	r2,129
  80c4d4:	109c4f04 	addi	r2,r2,28988
  80c4d8:	2013883a 	mov	r9,r4
  80c4dc:	11000017 	ldw	r4,0(r2)
  80c4e0:	2805883a 	mov	r2,r5
  80c4e4:	300f883a 	mov	r7,r6
  80c4e8:	480b883a 	mov	r5,r9
  80c4ec:	100d883a 	mov	r6,r2
  80c4f0:	080c28c1 	jmpi	80c28c <_strtol_r>

0080c4f4 <_strtoll_r>:
  80c4f4:	defff004 	addi	sp,sp,-64
  80c4f8:	00802074 	movhi	r2,129
  80c4fc:	109c5304 	addi	r2,r2,29004
  80c500:	df000e15 	stw	fp,56(sp)
  80c504:	17000017 	ldw	fp,0(r2)
  80c508:	ddc00d15 	stw	r23,52(sp)
  80c50c:	dd000a15 	stw	r20,40(sp)
  80c510:	dfc00f15 	stw	ra,60(sp)
  80c514:	dd800c15 	stw	r22,48(sp)
  80c518:	dd400b15 	stw	r21,44(sp)
  80c51c:	dcc00915 	stw	r19,36(sp)
  80c520:	dc800815 	stw	r18,32(sp)
  80c524:	dc400715 	stw	r17,28(sp)
  80c528:	dc000615 	stw	r16,24(sp)
  80c52c:	d9400315 	stw	r5,12(sp)
  80c530:	d9000215 	stw	r4,8(sp)
  80c534:	d9800415 	stw	r6,16(sp)
  80c538:	382f883a 	mov	r23,r7
  80c53c:	2829883a 	mov	r20,r5
  80c540:	a4c00007 	ldb	r19,0(r20)
  80c544:	a5000044 	addi	r20,r20,1
  80c548:	e4c7883a 	add	r3,fp,r19
  80c54c:	18800003 	ldbu	r2,0(r3)
  80c550:	1080020c 	andi	r2,r2,8
  80c554:	103ffa1e 	bne	r2,zero,80c540 <_strtoll_r+0x4c>
  80c558:	00800b44 	movi	r2,45
  80c55c:	98808826 	beq	r19,r2,80c780 <_strtoll_r+0x28c>
  80c560:	00800ac4 	movi	r2,43
  80c564:	98808326 	beq	r19,r2,80c774 <_strtoll_r+0x280>
  80c568:	d8000115 	stw	zero,4(sp)
  80c56c:	b807003a 	cmpeq	r3,r23,zero
  80c570:	18005f1e 	bne	r3,zero,80c6f0 <_strtoll_r+0x1fc>
  80c574:	00800404 	movi	r2,16
  80c578:	b8805d26 	beq	r23,r2,80c6f0 <_strtoll_r+0x1fc>
  80c57c:	b82dd7fa 	srai	r22,r23,31
  80c580:	b82b883a 	mov	r21,r23
  80c584:	d8c00117 	ldw	r3,4(sp)
  80c588:	1806c03a 	cmpne	r3,r3,zero
  80c58c:	d8c00515 	stw	r3,20(sp)
  80c590:	1800631e 	bne	r3,zero,80c720 <_strtoll_r+0x22c>
  80c594:	043fffc4 	movi	r16,-1
  80c598:	04600034 	movhi	r17,32768
  80c59c:	8c7fffc4 	addi	r17,r17,-1
  80c5a0:	880b883a 	mov	r5,r17
  80c5a4:	8009883a 	mov	r4,r16
  80c5a8:	a80d883a 	mov	r6,r21
  80c5ac:	b00f883a 	mov	r7,r22
  80c5b0:	080e3380 	call	80e338 <__umoddi3>
  80c5b4:	880b883a 	mov	r5,r17
  80c5b8:	8009883a 	mov	r4,r16
  80c5bc:	b00f883a 	mov	r7,r22
  80c5c0:	a80d883a 	mov	r6,r21
  80c5c4:	d8800015 	stw	r2,0(sp)
  80c5c8:	080dd5c0 	call	80dd5c <__udivdi3>
  80c5cc:	1023883a 	mov	r17,r2
  80c5d0:	e4c5883a 	add	r2,fp,r19
  80c5d4:	11000003 	ldbu	r4,0(r2)
  80c5d8:	1825883a 	mov	r18,r3
  80c5dc:	0015883a 	mov	r10,zero
  80c5e0:	20c0010c 	andi	r3,r4,4
  80c5e4:	0017883a 	mov	r11,zero
  80c5e8:	000f883a 	mov	r7,zero
  80c5ec:	18001a26 	beq	r3,zero,80c658 <_strtoll_r+0x164>
  80c5f0:	9c3ff404 	addi	r16,r19,-48
  80c5f4:	85c0200e 	bge	r16,r23,80c678 <_strtoll_r+0x184>
  80c5f8:	38003b16 	blt	r7,zero,80c6e8 <_strtoll_r+0x1f4>
  80c5fc:	92c03a36 	bltu	r18,r11,80c6e8 <_strtoll_r+0x1f4>
  80c600:	5c803826 	beq	r11,r18,80c6e4 <_strtoll_r+0x1f0>
  80c604:	54404c26 	beq	r10,r17,80c738 <_strtoll_r+0x244>
  80c608:	580b883a 	mov	r5,r11
  80c60c:	5009883a 	mov	r4,r10
  80c610:	a80d883a 	mov	r6,r21
  80c614:	b00f883a 	mov	r7,r22
  80c618:	080dc200 	call	80dc20 <__muldi3>
  80c61c:	8013d7fa 	srai	r9,r16,31
  80c620:	100d883a 	mov	r6,r2
  80c624:	1405883a 	add	r2,r2,r16
  80c628:	118d803a 	cmpltu	r6,r2,r6
  80c62c:	1a47883a 	add	r3,r3,r9
  80c630:	30cd883a 	add	r6,r6,r3
  80c634:	1015883a 	mov	r10,r2
  80c638:	3017883a 	mov	r11,r6
  80c63c:	01c00044 	movi	r7,1
  80c640:	a4c00007 	ldb	r19,0(r20)
  80c644:	a5000044 	addi	r20,r20,1
  80c648:	e4c5883a 	add	r2,fp,r19
  80c64c:	11000003 	ldbu	r4,0(r2)
  80c650:	20c0010c 	andi	r3,r4,4
  80c654:	183fe61e 	bne	r3,zero,80c5f0 <_strtoll_r+0xfc>
  80c658:	208000cc 	andi	r2,r4,3
  80c65c:	10000626 	beq	r2,zero,80c678 <_strtoll_r+0x184>
  80c660:	2080004c 	andi	r2,r4,1
  80c664:	1005003a 	cmpeq	r2,r2,zero
  80c668:	1000301e 	bne	r2,zero,80c72c <_strtoll_r+0x238>
  80c66c:	02000dc4 	movi	r8,55
  80c670:	9a21c83a 	sub	r16,r19,r8
  80c674:	85ffe016 	blt	r16,r23,80c5f8 <_strtoll_r+0x104>
  80c678:	38004616 	blt	r7,zero,80c794 <_strtoll_r+0x2a0>
  80c67c:	d8800517 	ldw	r2,20(sp)
  80c680:	1000341e 	bne	r2,zero,80c754 <_strtoll_r+0x260>
  80c684:	500b883a 	mov	r5,r10
  80c688:	580d883a 	mov	r6,r11
  80c68c:	d8c00417 	ldw	r3,16(sp)
  80c690:	18000626 	beq	r3,zero,80c6ac <_strtoll_r+0x1b8>
  80c694:	38000226 	beq	r7,zero,80c6a0 <_strtoll_r+0x1ac>
  80c698:	a53fffc4 	addi	r20,r20,-1
  80c69c:	dd000315 	stw	r20,12(sp)
  80c6a0:	d8c00317 	ldw	r3,12(sp)
  80c6a4:	d8800417 	ldw	r2,16(sp)
  80c6a8:	10c00015 	stw	r3,0(r2)
  80c6ac:	2805883a 	mov	r2,r5
  80c6b0:	3007883a 	mov	r3,r6
  80c6b4:	dfc00f17 	ldw	ra,60(sp)
  80c6b8:	df000e17 	ldw	fp,56(sp)
  80c6bc:	ddc00d17 	ldw	r23,52(sp)
  80c6c0:	dd800c17 	ldw	r22,48(sp)
  80c6c4:	dd400b17 	ldw	r21,44(sp)
  80c6c8:	dd000a17 	ldw	r20,40(sp)
  80c6cc:	dcc00917 	ldw	r19,36(sp)
  80c6d0:	dc800817 	ldw	r18,32(sp)
  80c6d4:	dc400717 	ldw	r17,28(sp)
  80c6d8:	dc000617 	ldw	r16,24(sp)
  80c6dc:	dec01004 	addi	sp,sp,64
  80c6e0:	f800283a 	ret
  80c6e4:	8abfc72e 	bgeu	r17,r10,80c604 <_strtoll_r+0x110>
  80c6e8:	01ffffc4 	movi	r7,-1
  80c6ec:	003fd406 	br	80c640 <_strtoll_r+0x14c>
  80c6f0:	00800c04 	movi	r2,48
  80c6f4:	98803226 	beq	r19,r2,80c7c0 <_strtoll_r+0x2cc>
  80c6f8:	183fa026 	beq	r3,zero,80c57c <_strtoll_r+0x88>
  80c6fc:	00800c04 	movi	r2,48
  80c700:	98803e26 	beq	r19,r2,80c7fc <_strtoll_r+0x308>
  80c704:	d8c00117 	ldw	r3,4(sp)
  80c708:	05c00284 	movi	r23,10
  80c70c:	b82b883a 	mov	r21,r23
  80c710:	1806c03a 	cmpne	r3,r3,zero
  80c714:	002d883a 	mov	r22,zero
  80c718:	d8c00515 	stw	r3,20(sp)
  80c71c:	183f9d26 	beq	r3,zero,80c594 <_strtoll_r+0xa0>
  80c720:	0021883a 	mov	r16,zero
  80c724:	04600034 	movhi	r17,32768
  80c728:	003f9d06 	br	80c5a0 <_strtoll_r+0xac>
  80c72c:	020015c4 	movi	r8,87
  80c730:	9a21c83a 	sub	r16,r19,r8
  80c734:	003fcf06 	br	80c674 <_strtoll_r+0x180>
  80c738:	5cbfb31e 	bne	r11,r18,80c608 <_strtoll_r+0x114>
  80c73c:	d8800017 	ldw	r2,0(sp)
  80c740:	143fb10e 	bge	r2,r16,80c608 <_strtoll_r+0x114>
  80c744:	8815883a 	mov	r10,r17
  80c748:	9017883a 	mov	r11,r18
  80c74c:	01ffffc4 	movi	r7,-1
  80c750:	003fbb06 	br	80c640 <_strtoll_r+0x14c>
  80c754:	0009883a 	mov	r4,zero
  80c758:	2285c83a 	sub	r2,r4,r10
  80c75c:	2089803a 	cmpltu	r4,r4,r2
  80c760:	02c7c83a 	sub	r3,zero,r11
  80c764:	1909c83a 	sub	r4,r3,r4
  80c768:	100b883a 	mov	r5,r2
  80c76c:	200d883a 	mov	r6,r4
  80c770:	003fc606 	br	80c68c <_strtoll_r+0x198>
  80c774:	a4c00007 	ldb	r19,0(r20)
  80c778:	a5000044 	addi	r20,r20,1
  80c77c:	003f7a06 	br	80c568 <_strtoll_r+0x74>
  80c780:	a4c00007 	ldb	r19,0(r20)
  80c784:	00800044 	movi	r2,1
  80c788:	a5000044 	addi	r20,r20,1
  80c78c:	d8800115 	stw	r2,4(sp)
  80c790:	003f7606 	br	80c56c <_strtoll_r+0x78>
  80c794:	d8c00117 	ldw	r3,4(sp)
  80c798:	1805003a 	cmpeq	r2,r3,zero
  80c79c:	1000131e 	bne	r2,zero,80c7ec <_strtoll_r+0x2f8>
  80c7a0:	0005883a 	mov	r2,zero
  80c7a4:	00e00034 	movhi	r3,32768
  80c7a8:	100b883a 	mov	r5,r2
  80c7ac:	180d883a 	mov	r6,r3
  80c7b0:	d8c00217 	ldw	r3,8(sp)
  80c7b4:	00800884 	movi	r2,34
  80c7b8:	18800015 	stw	r2,0(r3)
  80c7bc:	003fb306 	br	80c68c <_strtoll_r+0x198>
  80c7c0:	a1000007 	ldb	r4,0(r20)
  80c7c4:	00801e04 	movi	r2,120
  80c7c8:	20800226 	beq	r4,r2,80c7d4 <_strtoll_r+0x2e0>
  80c7cc:	00801604 	movi	r2,88
  80c7d0:	20bfc91e 	bne	r4,r2,80c6f8 <_strtoll_r+0x204>
  80c7d4:	a4c00047 	ldb	r19,1(r20)
  80c7d8:	05c00404 	movi	r23,16
  80c7dc:	b82b883a 	mov	r21,r23
  80c7e0:	a5000084 	addi	r20,r20,2
  80c7e4:	002d883a 	mov	r22,zero
  80c7e8:	003f6606 	br	80c584 <_strtoll_r+0x90>
  80c7ec:	017fffc4 	movi	r5,-1
  80c7f0:	01a00034 	movhi	r6,32768
  80c7f4:	31bfffc4 	addi	r6,r6,-1
  80c7f8:	003fed06 	br	80c7b0 <_strtoll_r+0x2bc>
  80c7fc:	05c00204 	movi	r23,8
  80c800:	b82b883a 	mov	r21,r23
  80c804:	002d883a 	mov	r22,zero
  80c808:	003f5e06 	br	80c584 <_strtoll_r+0x90>

0080c80c <_strtoul_r>:
  80c80c:	defff604 	addi	sp,sp,-40
  80c810:	00802074 	movhi	r2,129
  80c814:	109c5304 	addi	r2,r2,29004
  80c818:	dd000415 	stw	r20,16(sp)
  80c81c:	15000017 	ldw	r20,0(r2)
  80c820:	ddc00715 	stw	r23,28(sp)
  80c824:	dd800615 	stw	r22,24(sp)
  80c828:	dd400515 	stw	r21,20(sp)
  80c82c:	dc800215 	stw	r18,8(sp)
  80c830:	dc000015 	stw	r16,0(sp)
  80c834:	dfc00915 	stw	ra,36(sp)
  80c838:	df000815 	stw	fp,32(sp)
  80c83c:	dcc00315 	stw	r19,12(sp)
  80c840:	dc400115 	stw	r17,4(sp)
  80c844:	282b883a 	mov	r21,r5
  80c848:	202f883a 	mov	r23,r4
  80c84c:	302d883a 	mov	r22,r6
  80c850:	3825883a 	mov	r18,r7
  80c854:	2821883a 	mov	r16,r5
  80c858:	84400007 	ldb	r17,0(r16)
  80c85c:	84000044 	addi	r16,r16,1
  80c860:	a447883a 	add	r3,r20,r17
  80c864:	18800003 	ldbu	r2,0(r3)
  80c868:	1080020c 	andi	r2,r2,8
  80c86c:	103ffa1e 	bne	r2,zero,80c858 <_strtoul_r+0x4c>
  80c870:	00800b44 	movi	r2,45
  80c874:	88805626 	beq	r17,r2,80c9d0 <_strtoul_r+0x1c4>
  80c878:	00800ac4 	movi	r2,43
  80c87c:	88805126 	beq	r17,r2,80c9c4 <_strtoul_r+0x1b8>
  80c880:	0039883a 	mov	fp,zero
  80c884:	9007003a 	cmpeq	r3,r18,zero
  80c888:	18003b1e 	bne	r3,zero,80c978 <_strtoul_r+0x16c>
  80c88c:	00800404 	movi	r2,16
  80c890:	90803926 	beq	r18,r2,80c978 <_strtoul_r+0x16c>
  80c894:	013fffc4 	movi	r4,-1
  80c898:	900b883a 	mov	r5,r18
  80c89c:	080fdb40 	call	80fdb4 <__udivsi3>
  80c8a0:	013fffc4 	movi	r4,-1
  80c8a4:	900b883a 	mov	r5,r18
  80c8a8:	1027883a 	mov	r19,r2
  80c8ac:	080fdbc0 	call	80fdbc <__umodsi3>
  80c8b0:	1011883a 	mov	r8,r2
  80c8b4:	900f883a 	mov	r7,r18
  80c8b8:	a445883a 	add	r2,r20,r17
  80c8bc:	11000003 	ldbu	r4,0(r2)
  80c8c0:	000b883a 	mov	r5,zero
  80c8c4:	000d883a 	mov	r6,zero
  80c8c8:	20c0010c 	andi	r3,r4,4
  80c8cc:	18000e26 	beq	r3,zero,80c908 <_strtoul_r+0xfc>
  80c8d0:	88fff404 	addi	r3,r17,-48
  80c8d4:	1c80140e 	bge	r3,r18,80c928 <_strtoul_r+0x11c>
  80c8d8:	30003316 	blt	r6,zero,80c9a8 <_strtoul_r+0x19c>
  80c8dc:	99403236 	bltu	r19,r5,80c9a8 <_strtoul_r+0x19c>
  80c8e0:	2cc03026 	beq	r5,r19,80c9a4 <_strtoul_r+0x198>
  80c8e4:	29c5383a 	mul	r2,r5,r7
  80c8e8:	01800044 	movi	r6,1
  80c8ec:	10cb883a 	add	r5,r2,r3
  80c8f0:	84400007 	ldb	r17,0(r16)
  80c8f4:	84000044 	addi	r16,r16,1
  80c8f8:	a445883a 	add	r2,r20,r17
  80c8fc:	11000003 	ldbu	r4,0(r2)
  80c900:	20c0010c 	andi	r3,r4,4
  80c904:	183ff21e 	bne	r3,zero,80c8d0 <_strtoul_r+0xc4>
  80c908:	208000cc 	andi	r2,r4,3
  80c90c:	10000626 	beq	r2,zero,80c928 <_strtoul_r+0x11c>
  80c910:	2080004c 	andi	r2,r4,1
  80c914:	1005003a 	cmpeq	r2,r2,zero
  80c918:	1000251e 	bne	r2,zero,80c9b0 <_strtoul_r+0x1a4>
  80c91c:	00800dc4 	movi	r2,55
  80c920:	8887c83a 	sub	r3,r17,r2
  80c924:	1cbfec16 	blt	r3,r18,80c8d8 <_strtoul_r+0xcc>
  80c928:	3000400e 	bge	r6,zero,80ca2c <_strtoul_r+0x220>
  80c92c:	00800884 	movi	r2,34
  80c930:	017fffc4 	movi	r5,-1
  80c934:	b8800015 	stw	r2,0(r23)
  80c938:	b0000226 	beq	r22,zero,80c944 <_strtoul_r+0x138>
  80c93c:	30001f1e 	bne	r6,zero,80c9bc <_strtoul_r+0x1b0>
  80c940:	b5400015 	stw	r21,0(r22)
  80c944:	2805883a 	mov	r2,r5
  80c948:	dfc00917 	ldw	ra,36(sp)
  80c94c:	df000817 	ldw	fp,32(sp)
  80c950:	ddc00717 	ldw	r23,28(sp)
  80c954:	dd800617 	ldw	r22,24(sp)
  80c958:	dd400517 	ldw	r21,20(sp)
  80c95c:	dd000417 	ldw	r20,16(sp)
  80c960:	dcc00317 	ldw	r19,12(sp)
  80c964:	dc800217 	ldw	r18,8(sp)
  80c968:	dc400117 	ldw	r17,4(sp)
  80c96c:	dc000017 	ldw	r16,0(sp)
  80c970:	dec00a04 	addi	sp,sp,40
  80c974:	f800283a 	ret
  80c978:	00800c04 	movi	r2,48
  80c97c:	88801826 	beq	r17,r2,80c9e0 <_strtoul_r+0x1d4>
  80c980:	183fc426 	beq	r3,zero,80c894 <_strtoul_r+0x88>
  80c984:	00800c04 	movi	r2,48
  80c988:	88802226 	beq	r17,r2,80ca14 <_strtoul_r+0x208>
  80c98c:	04800284 	movi	r18,10
  80c990:	900f883a 	mov	r7,r18
  80c994:	04c666b4 	movhi	r19,6554
  80c998:	9ce66644 	addi	r19,r19,-26215
  80c99c:	02000144 	movi	r8,5
  80c9a0:	003fc506 	br	80c8b8 <_strtoul_r+0xac>
  80c9a4:	40ffcf0e 	bge	r8,r3,80c8e4 <_strtoul_r+0xd8>
  80c9a8:	01bfffc4 	movi	r6,-1
  80c9ac:	003fd006 	br	80c8f0 <_strtoul_r+0xe4>
  80c9b0:	008015c4 	movi	r2,87
  80c9b4:	8887c83a 	sub	r3,r17,r2
  80c9b8:	003fda06 	br	80c924 <_strtoul_r+0x118>
  80c9bc:	857fffc4 	addi	r21,r16,-1
  80c9c0:	003fdf06 	br	80c940 <_strtoul_r+0x134>
  80c9c4:	84400007 	ldb	r17,0(r16)
  80c9c8:	84000044 	addi	r16,r16,1
  80c9cc:	003fac06 	br	80c880 <_strtoul_r+0x74>
  80c9d0:	84400007 	ldb	r17,0(r16)
  80c9d4:	07000044 	movi	fp,1
  80c9d8:	84000044 	addi	r16,r16,1
  80c9dc:	003fa906 	br	80c884 <_strtoul_r+0x78>
  80c9e0:	81000007 	ldb	r4,0(r16)
  80c9e4:	00801e04 	movi	r2,120
  80c9e8:	20800226 	beq	r4,r2,80c9f4 <_strtoul_r+0x1e8>
  80c9ec:	00801604 	movi	r2,88
  80c9f0:	20bfe31e 	bne	r4,r2,80c980 <_strtoul_r+0x174>
  80c9f4:	84400047 	ldb	r17,1(r16)
  80c9f8:	04800404 	movi	r18,16
  80c9fc:	84000084 	addi	r16,r16,2
  80ca00:	900f883a 	mov	r7,r18
  80ca04:	04c40034 	movhi	r19,4096
  80ca08:	9cffffc4 	addi	r19,r19,-1
  80ca0c:	020003c4 	movi	r8,15
  80ca10:	003fa906 	br	80c8b8 <_strtoul_r+0xac>
  80ca14:	04800204 	movi	r18,8
  80ca18:	900f883a 	mov	r7,r18
  80ca1c:	04c80034 	movhi	r19,8192
  80ca20:	9cffffc4 	addi	r19,r19,-1
  80ca24:	020001c4 	movi	r8,7
  80ca28:	003fa306 	br	80c8b8 <_strtoul_r+0xac>
  80ca2c:	e005003a 	cmpeq	r2,fp,zero
  80ca30:	103fc11e 	bne	r2,zero,80c938 <_strtoul_r+0x12c>
  80ca34:	014bc83a 	sub	r5,zero,r5
  80ca38:	003fbf06 	br	80c938 <_strtoul_r+0x12c>

0080ca3c <strtoul>:
  80ca3c:	00802074 	movhi	r2,129
  80ca40:	109c4f04 	addi	r2,r2,28988
  80ca44:	2013883a 	mov	r9,r4
  80ca48:	11000017 	ldw	r4,0(r2)
  80ca4c:	2805883a 	mov	r2,r5
  80ca50:	300f883a 	mov	r7,r6
  80ca54:	480b883a 	mov	r5,r9
  80ca58:	100d883a 	mov	r6,r2
  80ca5c:	080c80c1 	jmpi	80c80c <_strtoul_r>

0080ca60 <_strtoull_r>:
  80ca60:	defff104 	addi	sp,sp,-60
  80ca64:	00802074 	movhi	r2,129
  80ca68:	109c5304 	addi	r2,r2,29004
  80ca6c:	df000d15 	stw	fp,52(sp)
  80ca70:	17000017 	ldw	fp,0(r2)
  80ca74:	ddc00c15 	stw	r23,48(sp)
  80ca78:	dcc00815 	stw	r19,32(sp)
  80ca7c:	dfc00e15 	stw	ra,56(sp)
  80ca80:	dd800b15 	stw	r22,44(sp)
  80ca84:	dd400a15 	stw	r21,40(sp)
  80ca88:	dd000915 	stw	r20,36(sp)
  80ca8c:	dc800715 	stw	r18,28(sp)
  80ca90:	dc400615 	stw	r17,24(sp)
  80ca94:	dc000515 	stw	r16,20(sp)
  80ca98:	d9400215 	stw	r5,8(sp)
  80ca9c:	d9000115 	stw	r4,4(sp)
  80caa0:	d9800315 	stw	r6,12(sp)
  80caa4:	382f883a 	mov	r23,r7
  80caa8:	2827883a 	mov	r19,r5
  80caac:	9d000007 	ldb	r20,0(r19)
  80cab0:	9cc00044 	addi	r19,r19,1
  80cab4:	e507883a 	add	r3,fp,r20
  80cab8:	18800003 	ldbu	r2,0(r3)
  80cabc:	1080020c 	andi	r2,r2,8
  80cac0:	103ffa1e 	bne	r2,zero,80caac <_strtoull_r+0x4c>
  80cac4:	00800b44 	movi	r2,45
  80cac8:	a0807a26 	beq	r20,r2,80ccb4 <_strtoull_r+0x254>
  80cacc:	00800ac4 	movi	r2,43
  80cad0:	a0807526 	beq	r20,r2,80cca8 <_strtoull_r+0x248>
  80cad4:	d8000015 	stw	zero,0(sp)
  80cad8:	b807003a 	cmpeq	r3,r23,zero
  80cadc:	18005a1e 	bne	r3,zero,80cc48 <_strtoull_r+0x1e8>
  80cae0:	00800404 	movi	r2,16
  80cae4:	b8805826 	beq	r23,r2,80cc48 <_strtoull_r+0x1e8>
  80cae8:	b82dd7fa 	srai	r22,r23,31
  80caec:	043fffc4 	movi	r16,-1
  80caf0:	8009883a 	mov	r4,r16
  80caf4:	800b883a 	mov	r5,r16
  80caf8:	b80d883a 	mov	r6,r23
  80cafc:	b00f883a 	mov	r7,r22
  80cb00:	080dd5c0 	call	80dd5c <__udivdi3>
  80cb04:	8009883a 	mov	r4,r16
  80cb08:	800b883a 	mov	r5,r16
  80cb0c:	b80d883a 	mov	r6,r23
  80cb10:	b00f883a 	mov	r7,r22
  80cb14:	1023883a 	mov	r17,r2
  80cb18:	1825883a 	mov	r18,r3
  80cb1c:	080e3380 	call	80e338 <__umoddi3>
  80cb20:	b82b883a 	mov	r21,r23
  80cb24:	1019883a 	mov	r12,r2
  80cb28:	e505883a 	add	r2,fp,r20
  80cb2c:	11000003 	ldbu	r4,0(r2)
  80cb30:	0015883a 	mov	r10,zero
  80cb34:	0017883a 	mov	r11,zero
  80cb38:	20c0010c 	andi	r3,r4,4
  80cb3c:	000d883a 	mov	r6,zero
  80cb40:	18001c26 	beq	r3,zero,80cbb4 <_strtoull_r+0x154>
  80cb44:	a43ff404 	addi	r16,r20,-48
  80cb48:	85c0220e 	bge	r16,r23,80cbd4 <_strtoull_r+0x174>
  80cb4c:	30003c16 	blt	r6,zero,80cc40 <_strtoull_r+0x1e0>
  80cb50:	92c03b36 	bltu	r18,r11,80cc40 <_strtoull_r+0x1e0>
  80cb54:	5c803926 	beq	r11,r18,80cc3c <_strtoull_r+0x1dc>
  80cb58:	54404c26 	beq	r10,r17,80cc8c <_strtoull_r+0x22c>
  80cb5c:	580b883a 	mov	r5,r11
  80cb60:	5009883a 	mov	r4,r10
  80cb64:	a80d883a 	mov	r6,r21
  80cb68:	b00f883a 	mov	r7,r22
  80cb6c:	db000415 	stw	r12,16(sp)
  80cb70:	080dc200 	call	80dc20 <__muldi3>
  80cb74:	8013d7fa 	srai	r9,r16,31
  80cb78:	100d883a 	mov	r6,r2
  80cb7c:	1405883a 	add	r2,r2,r16
  80cb80:	118d803a 	cmpltu	r6,r2,r6
  80cb84:	1a47883a 	add	r3,r3,r9
  80cb88:	db000417 	ldw	r12,16(sp)
  80cb8c:	30cd883a 	add	r6,r6,r3
  80cb90:	3017883a 	mov	r11,r6
  80cb94:	1015883a 	mov	r10,r2
  80cb98:	01800044 	movi	r6,1
  80cb9c:	9d000007 	ldb	r20,0(r19)
  80cba0:	9cc00044 	addi	r19,r19,1
  80cba4:	e505883a 	add	r2,fp,r20
  80cba8:	11000003 	ldbu	r4,0(r2)
  80cbac:	20c0010c 	andi	r3,r4,4
  80cbb0:	183fe41e 	bne	r3,zero,80cb44 <_strtoull_r+0xe4>
  80cbb4:	208000cc 	andi	r2,r4,3
  80cbb8:	10000626 	beq	r2,zero,80cbd4 <_strtoull_r+0x174>
  80cbbc:	2080004c 	andi	r2,r4,1
  80cbc0:	1005003a 	cmpeq	r2,r2,zero
  80cbc4:	10002e1e 	bne	r2,zero,80cc80 <_strtoull_r+0x220>
  80cbc8:	02000dc4 	movi	r8,55
  80cbcc:	a221c83a 	sub	r16,r20,r8
  80cbd0:	85ffde16 	blt	r16,r23,80cb4c <_strtoull_r+0xec>
  80cbd4:	3000530e 	bge	r6,zero,80cd24 <_strtoull_r+0x2c4>
  80cbd8:	d8c00117 	ldw	r3,4(sp)
  80cbdc:	02bfffc4 	movi	r10,-1
  80cbe0:	00800884 	movi	r2,34
  80cbe4:	5017883a 	mov	r11,r10
  80cbe8:	18800015 	stw	r2,0(r3)
  80cbec:	d8800317 	ldw	r2,12(sp)
  80cbf0:	10000426 	beq	r2,zero,80cc04 <_strtoull_r+0x1a4>
  80cbf4:	3000291e 	bne	r6,zero,80cc9c <_strtoull_r+0x23c>
  80cbf8:	d8800217 	ldw	r2,8(sp)
  80cbfc:	d8c00317 	ldw	r3,12(sp)
  80cc00:	18800015 	stw	r2,0(r3)
  80cc04:	5005883a 	mov	r2,r10
  80cc08:	5807883a 	mov	r3,r11
  80cc0c:	dfc00e17 	ldw	ra,56(sp)
  80cc10:	df000d17 	ldw	fp,52(sp)
  80cc14:	ddc00c17 	ldw	r23,48(sp)
  80cc18:	dd800b17 	ldw	r22,44(sp)
  80cc1c:	dd400a17 	ldw	r21,40(sp)
  80cc20:	dd000917 	ldw	r20,36(sp)
  80cc24:	dcc00817 	ldw	r19,32(sp)
  80cc28:	dc800717 	ldw	r18,28(sp)
  80cc2c:	dc400617 	ldw	r17,24(sp)
  80cc30:	dc000517 	ldw	r16,20(sp)
  80cc34:	dec00f04 	addi	sp,sp,60
  80cc38:	f800283a 	ret
  80cc3c:	8abfc62e 	bgeu	r17,r10,80cb58 <_strtoull_r+0xf8>
  80cc40:	01bfffc4 	movi	r6,-1
  80cc44:	003fd506 	br	80cb9c <_strtoull_r+0x13c>
  80cc48:	00800c04 	movi	r2,48
  80cc4c:	a0801e26 	beq	r20,r2,80ccc8 <_strtoull_r+0x268>
  80cc50:	183fa526 	beq	r3,zero,80cae8 <_strtoull_r+0x88>
  80cc54:	00800c04 	movi	r2,48
  80cc58:	a0802a26 	beq	r20,r2,80cd04 <_strtoull_r+0x2a4>
  80cc5c:	05c00284 	movi	r23,10
  80cc60:	b82b883a 	mov	r21,r23
  80cc64:	046666b4 	movhi	r17,39322
  80cc68:	8c666644 	addi	r17,r17,-26215
  80cc6c:	002d883a 	mov	r22,zero
  80cc70:	048666b4 	movhi	r18,6554
  80cc74:	94a66644 	addi	r18,r18,-26215
  80cc78:	03000144 	movi	r12,5
  80cc7c:	003faa06 	br	80cb28 <_strtoull_r+0xc8>
  80cc80:	020015c4 	movi	r8,87
  80cc84:	a221c83a 	sub	r16,r20,r8
  80cc88:	003fd106 	br	80cbd0 <_strtoull_r+0x170>
  80cc8c:	5cbfb31e 	bne	r11,r18,80cb5c <_strtoull_r+0xfc>
  80cc90:	643fb20e 	bge	r12,r16,80cb5c <_strtoull_r+0xfc>
  80cc94:	01bfffc4 	movi	r6,-1
  80cc98:	003fc006 	br	80cb9c <_strtoull_r+0x13c>
  80cc9c:	9cffffc4 	addi	r19,r19,-1
  80cca0:	dcc00215 	stw	r19,8(sp)
  80cca4:	003fd406 	br	80cbf8 <_strtoull_r+0x198>
  80cca8:	9d000007 	ldb	r20,0(r19)
  80ccac:	9cc00044 	addi	r19,r19,1
  80ccb0:	003f8806 	br	80cad4 <_strtoull_r+0x74>
  80ccb4:	9d000007 	ldb	r20,0(r19)
  80ccb8:	00800044 	movi	r2,1
  80ccbc:	9cc00044 	addi	r19,r19,1
  80ccc0:	d8800015 	stw	r2,0(sp)
  80ccc4:	003f8406 	br	80cad8 <_strtoull_r+0x78>
  80ccc8:	99000007 	ldb	r4,0(r19)
  80cccc:	00801e04 	movi	r2,120
  80ccd0:	20800226 	beq	r4,r2,80ccdc <_strtoull_r+0x27c>
  80ccd4:	00801604 	movi	r2,88
  80ccd8:	20bfdd1e 	bne	r4,r2,80cc50 <_strtoull_r+0x1f0>
  80ccdc:	9d000047 	ldb	r20,1(r19)
  80cce0:	05c00404 	movi	r23,16
  80cce4:	b82b883a 	mov	r21,r23
  80cce8:	047fffc4 	movi	r17,-1
  80ccec:	9cc00084 	addi	r19,r19,2
  80ccf0:	002d883a 	mov	r22,zero
  80ccf4:	04840034 	movhi	r18,4096
  80ccf8:	94bfffc4 	addi	r18,r18,-1
  80ccfc:	030003c4 	movi	r12,15
  80cd00:	003f8906 	br	80cb28 <_strtoull_r+0xc8>
  80cd04:	05c00204 	movi	r23,8
  80cd08:	b82b883a 	mov	r21,r23
  80cd0c:	047fffc4 	movi	r17,-1
  80cd10:	002d883a 	mov	r22,zero
  80cd14:	04880034 	movhi	r18,8192
  80cd18:	94bfffc4 	addi	r18,r18,-1
  80cd1c:	030001c4 	movi	r12,7
  80cd20:	003f8106 	br	80cb28 <_strtoull_r+0xc8>
  80cd24:	d8c00017 	ldw	r3,0(sp)
  80cd28:	1805003a 	cmpeq	r2,r3,zero
  80cd2c:	103faf1e 	bne	r2,zero,80cbec <_strtoull_r+0x18c>
  80cd30:	0009883a 	mov	r4,zero
  80cd34:	2285c83a 	sub	r2,r4,r10
  80cd38:	02c7c83a 	sub	r3,zero,r11
  80cd3c:	2089803a 	cmpltu	r4,r4,r2
  80cd40:	1909c83a 	sub	r4,r3,r4
  80cd44:	1015883a 	mov	r10,r2
  80cd48:	2017883a 	mov	r11,r4
  80cd4c:	003fa706 	br	80cbec <_strtoull_r+0x18c>

0080cd50 <__submore>:
  80cd50:	defffa04 	addi	sp,sp,-24
  80cd54:	28c00c17 	ldw	r3,48(r5)
  80cd58:	dc800215 	stw	r18,8(sp)
  80cd5c:	2825883a 	mov	r18,r5
  80cd60:	dc000015 	stw	r16,0(sp)
  80cd64:	90801004 	addi	r2,r18,64
  80cd68:	04010004 	movi	r16,1024
  80cd6c:	dfc00515 	stw	ra,20(sp)
  80cd70:	dd000415 	stw	r20,16(sp)
  80cd74:	dcc00315 	stw	r19,12(sp)
  80cd78:	dc400115 	stw	r17,4(sp)
  80cd7c:	800b883a 	mov	r5,r16
  80cd80:	18801b26 	beq	r3,r2,80cdf0 <__submore+0xa0>
  80cd84:	94400d17 	ldw	r17,52(r18)
  80cd88:	180b883a 	mov	r5,r3
  80cd8c:	8c69883a 	add	r20,r17,r17
  80cd90:	a00d883a 	mov	r6,r20
  80cd94:	08037280 	call	803728 <_realloc_r>
  80cd98:	1467883a 	add	r19,r2,r17
  80cd9c:	1021883a 	mov	r16,r2
  80cda0:	880d883a 	mov	r6,r17
  80cda4:	9809883a 	mov	r4,r19
  80cda8:	100b883a 	mov	r5,r2
  80cdac:	10000e26 	beq	r2,zero,80cde8 <__submore+0x98>
  80cdb0:	080336c0 	call	80336c <memcpy>
  80cdb4:	000d883a 	mov	r6,zero
  80cdb8:	95000d15 	stw	r20,52(r18)
  80cdbc:	94c00015 	stw	r19,0(r18)
  80cdc0:	94000c15 	stw	r16,48(r18)
  80cdc4:	3005883a 	mov	r2,r6
  80cdc8:	dfc00517 	ldw	ra,20(sp)
  80cdcc:	dd000417 	ldw	r20,16(sp)
  80cdd0:	dcc00317 	ldw	r19,12(sp)
  80cdd4:	dc800217 	ldw	r18,8(sp)
  80cdd8:	dc400117 	ldw	r17,4(sp)
  80cddc:	dc000017 	ldw	r16,0(sp)
  80cde0:	dec00604 	addi	sp,sp,24
  80cde4:	f800283a 	ret
  80cde8:	01bfffc4 	movi	r6,-1
  80cdec:	003ff506 	br	80cdc4 <__submore+0x74>
  80cdf0:	0802b480 	call	802b48 <_malloc_r>
  80cdf4:	1009883a 	mov	r4,r2
  80cdf8:	1140ff44 	addi	r5,r2,1021
  80cdfc:	000d883a 	mov	r6,zero
  80ce00:	103ff926 	beq	r2,zero,80cde8 <__submore+0x98>
  80ce04:	90801083 	ldbu	r2,66(r18)
  80ce08:	94000d15 	stw	r16,52(r18)
  80ce0c:	91000c15 	stw	r4,48(r18)
  80ce10:	28800085 	stb	r2,2(r5)
  80ce14:	90c01043 	ldbu	r3,65(r18)
  80ce18:	28c00045 	stb	r3,1(r5)
  80ce1c:	90801003 	ldbu	r2,64(r18)
  80ce20:	2080ff45 	stb	r2,1021(r4)
  80ce24:	91400015 	stw	r5,0(r18)
  80ce28:	003fe606 	br	80cdc4 <__submore+0x74>

0080ce2c <_ungetc_r>:
  80ce2c:	defffc04 	addi	sp,sp,-16
  80ce30:	00bfffc4 	movi	r2,-1
  80ce34:	dc400215 	stw	r17,8(sp)
  80ce38:	dc000115 	stw	r16,4(sp)
  80ce3c:	dfc00315 	stw	ra,12(sp)
  80ce40:	2821883a 	mov	r16,r5
  80ce44:	2023883a 	mov	r17,r4
  80ce48:	28801826 	beq	r5,r2,80ceac <_ungetc_r+0x80>
  80ce4c:	20000226 	beq	r4,zero,80ce58 <_ungetc_r+0x2c>
  80ce50:	20800e17 	ldw	r2,56(r4)
  80ce54:	10001b26 	beq	r2,zero,80cec4 <_ungetc_r+0x98>
  80ce58:	3100030b 	ldhu	r4,12(r6)
  80ce5c:	00bff7c4 	movi	r2,-33
  80ce60:	2084703a 	and	r2,r4,r2
  80ce64:	117fffcc 	andi	r5,r2,65535
  80ce68:	28c0010c 	andi	r3,r5,4
  80ce6c:	1009883a 	mov	r4,r2
  80ce70:	3080030d 	sth	r2,12(r6)
  80ce74:	18003526 	beq	r3,zero,80cf4c <_ungetc_r+0x120>
  80ce78:	30800c17 	ldw	r2,48(r6)
  80ce7c:	84003fcc 	andi	r16,r16,255
  80ce80:	10001426 	beq	r2,zero,80ced4 <_ungetc_r+0xa8>
  80ce84:	30c00117 	ldw	r3,4(r6)
  80ce88:	30800d17 	ldw	r2,52(r6)
  80ce8c:	1880380e 	bge	r3,r2,80cf70 <_ungetc_r+0x144>
  80ce90:	30c00017 	ldw	r3,0(r6)
  80ce94:	19ffffc4 	addi	r7,r3,-1
  80ce98:	31c00015 	stw	r7,0(r6)
  80ce9c:	1c3fffc5 	stb	r16,-1(r3)
  80cea0:	30800117 	ldw	r2,4(r6)
  80cea4:	10800044 	addi	r2,r2,1
  80cea8:	30800115 	stw	r2,4(r6)
  80ceac:	8005883a 	mov	r2,r16
  80ceb0:	dfc00317 	ldw	ra,12(sp)
  80ceb4:	dc400217 	ldw	r17,8(sp)
  80ceb8:	dc000117 	ldw	r16,4(sp)
  80cebc:	dec00404 	addi	sp,sp,16
  80cec0:	f800283a 	ret
  80cec4:	d9800015 	stw	r6,0(sp)
  80cec8:	080162c0 	call	80162c <__sinit>
  80cecc:	d9800017 	ldw	r6,0(sp)
  80ced0:	003fe106 	br	80ce58 <_ungetc_r+0x2c>
  80ced4:	30800417 	ldw	r2,16(r6)
  80ced8:	10002326 	beq	r2,zero,80cf68 <_ungetc_r+0x13c>
  80cedc:	31c00017 	ldw	r7,0(r6)
  80cee0:	11c0022e 	bgeu	r2,r7,80ceec <_ungetc_r+0xc0>
  80cee4:	38bfffc3 	ldbu	r2,-1(r7)
  80cee8:	80801226 	beq	r16,r2,80cf34 <_ungetc_r+0x108>
  80ceec:	30c00117 	ldw	r3,4(r6)
  80cef0:	00800044 	movi	r2,1
  80cef4:	30800115 	stw	r2,4(r6)
  80cef8:	008000c4 	movi	r2,3
  80cefc:	31001004 	addi	r4,r6,64
  80cf00:	31401084 	addi	r5,r6,66
  80cf04:	30800d15 	stw	r2,52(r6)
  80cf08:	8005883a 	mov	r2,r16
  80cf0c:	30c00f15 	stw	r3,60(r6)
  80cf10:	31c00e15 	stw	r7,56(r6)
  80cf14:	31000c15 	stw	r4,48(r6)
  80cf18:	31400015 	stw	r5,0(r6)
  80cf1c:	34001085 	stb	r16,66(r6)
  80cf20:	dfc00317 	ldw	ra,12(sp)
  80cf24:	dc400217 	ldw	r17,8(sp)
  80cf28:	dc000117 	ldw	r16,4(sp)
  80cf2c:	dec00404 	addi	sp,sp,16
  80cf30:	f800283a 	ret
  80cf34:	30800117 	ldw	r2,4(r6)
  80cf38:	39ffffc4 	addi	r7,r7,-1
  80cf3c:	31c00015 	stw	r7,0(r6)
  80cf40:	10800044 	addi	r2,r2,1
  80cf44:	30800115 	stw	r2,4(r6)
  80cf48:	003fd806 	br	80ceac <_ungetc_r+0x80>
  80cf4c:	2880040c 	andi	r2,r5,16
  80cf50:	10000d26 	beq	r2,zero,80cf88 <_ungetc_r+0x15c>
  80cf54:	2880020c 	andi	r2,r5,8
  80cf58:	10000d1e 	bne	r2,zero,80cf90 <_ungetc_r+0x164>
  80cf5c:	20800114 	ori	r2,r4,4
  80cf60:	3080030d 	sth	r2,12(r6)
  80cf64:	003fc406 	br	80ce78 <_ungetc_r+0x4c>
  80cf68:	31c00017 	ldw	r7,0(r6)
  80cf6c:	003fdf06 	br	80ceec <_ungetc_r+0xc0>
  80cf70:	300b883a 	mov	r5,r6
  80cf74:	8809883a 	mov	r4,r17
  80cf78:	d9800015 	stw	r6,0(sp)
  80cf7c:	080cd500 	call	80cd50 <__submore>
  80cf80:	d9800017 	ldw	r6,0(sp)
  80cf84:	103fc226 	beq	r2,zero,80ce90 <_ungetc_r+0x64>
  80cf88:	043fffc4 	movi	r16,-1
  80cf8c:	003fc706 	br	80ceac <_ungetc_r+0x80>
  80cf90:	300b883a 	mov	r5,r6
  80cf94:	8809883a 	mov	r4,r17
  80cf98:	d9800015 	stw	r6,0(sp)
  80cf9c:	080126c0 	call	80126c <_fflush_r>
  80cfa0:	d9800017 	ldw	r6,0(sp)
  80cfa4:	103ff81e 	bne	r2,zero,80cf88 <_ungetc_r+0x15c>
  80cfa8:	3100030b 	ldhu	r4,12(r6)
  80cfac:	00bffdc4 	movi	r2,-9
  80cfb0:	30000215 	stw	zero,8(r6)
  80cfb4:	2084703a 	and	r2,r4,r2
  80cfb8:	1009883a 	mov	r4,r2
  80cfbc:	3080030d 	sth	r2,12(r6)
  80cfc0:	30000615 	stw	zero,24(r6)
  80cfc4:	003fe506 	br	80cf5c <_ungetc_r+0x130>

0080cfc8 <ungetc>:
  80cfc8:	01802074 	movhi	r6,129
  80cfcc:	319c4f04 	addi	r6,r6,28988
  80cfd0:	2007883a 	mov	r3,r4
  80cfd4:	31000017 	ldw	r4,0(r6)
  80cfd8:	280d883a 	mov	r6,r5
  80cfdc:	180b883a 	mov	r5,r3
  80cfe0:	080ce2c1 	jmpi	80ce2c <_ungetc_r>

0080cfe4 <_calloc_r>:
  80cfe4:	298b383a 	mul	r5,r5,r6
  80cfe8:	defffe04 	addi	sp,sp,-8
  80cfec:	dc000015 	stw	r16,0(sp)
  80cff0:	dfc00115 	stw	ra,4(sp)
  80cff4:	0802b480 	call	802b48 <_malloc_r>
  80cff8:	1021883a 	mov	r16,r2
  80cffc:	01c00904 	movi	r7,36
  80d000:	10000d26 	beq	r2,zero,80d038 <_calloc_r+0x54>
  80d004:	10ffff17 	ldw	r3,-4(r2)
  80d008:	1009883a 	mov	r4,r2
  80d00c:	00bfff04 	movi	r2,-4
  80d010:	1886703a 	and	r3,r3,r2
  80d014:	1887883a 	add	r3,r3,r2
  80d018:	180d883a 	mov	r6,r3
  80d01c:	000b883a 	mov	r5,zero
  80d020:	38c01736 	bltu	r7,r3,80d080 <_calloc_r+0x9c>
  80d024:	008004c4 	movi	r2,19
  80d028:	10c00836 	bltu	r2,r3,80d04c <_calloc_r+0x68>
  80d02c:	20000215 	stw	zero,8(r4)
  80d030:	20000015 	stw	zero,0(r4)
  80d034:	20000115 	stw	zero,4(r4)
  80d038:	8005883a 	mov	r2,r16
  80d03c:	dfc00117 	ldw	ra,4(sp)
  80d040:	dc000017 	ldw	r16,0(sp)
  80d044:	dec00204 	addi	sp,sp,8
  80d048:	f800283a 	ret
  80d04c:	008006c4 	movi	r2,27
  80d050:	80000015 	stw	zero,0(r16)
  80d054:	80000115 	stw	zero,4(r16)
  80d058:	81000204 	addi	r4,r16,8
  80d05c:	10fff32e 	bgeu	r2,r3,80d02c <_calloc_r+0x48>
  80d060:	80000215 	stw	zero,8(r16)
  80d064:	80000315 	stw	zero,12(r16)
  80d068:	81000404 	addi	r4,r16,16
  80d06c:	19ffef1e 	bne	r3,r7,80d02c <_calloc_r+0x48>
  80d070:	81000604 	addi	r4,r16,24
  80d074:	80000415 	stw	zero,16(r16)
  80d078:	80000515 	stw	zero,20(r16)
  80d07c:	003feb06 	br	80d02c <_calloc_r+0x48>
  80d080:	08034ec0 	call	8034ec <memset>
  80d084:	8005883a 	mov	r2,r16
  80d088:	dfc00117 	ldw	ra,4(sp)
  80d08c:	dc000017 	ldw	r16,0(sp)
  80d090:	dec00204 	addi	sp,sp,8
  80d094:	f800283a 	ret

0080d098 <htinit>:
  80d098:	28800003 	ldbu	r2,0(r5)
  80d09c:	10000626 	beq	r2,zero,80d0b8 <htinit+0x20>
  80d0a0:	1105883a 	add	r2,r2,r4
  80d0a4:	11800005 	stb	r6,0(r2)
  80d0a8:	28800043 	ldbu	r2,1(r5)
  80d0ac:	31800044 	addi	r6,r6,1
  80d0b0:	29400044 	addi	r5,r5,1
  80d0b4:	103ffa1e 	bne	r2,zero,80d0a0 <htinit+0x8>
  80d0b8:	f800283a 	ret

0080d0bc <__hexdig_init>:
  80d0bc:	defffd04 	addi	sp,sp,-12
  80d0c0:	dc400015 	stw	r17,0(sp)
  80d0c4:	044020b4 	movhi	r17,130
  80d0c8:	8c63c604 	addi	r17,r17,-28904
  80d0cc:	dcc00115 	stw	r19,4(sp)
  80d0d0:	8809883a 	mov	r4,r17
  80d0d4:	04c00684 	movi	r19,26
  80d0d8:	01402074 	movhi	r5,129
  80d0dc:	2954d404 	addi	r5,r5,21328
  80d0e0:	01800404 	movi	r6,16
  80d0e4:	dfc00215 	stw	ra,8(sp)
  80d0e8:	080d0980 	call	80d098 <htinit>
  80d0ec:	980d883a 	mov	r6,r19
  80d0f0:	8809883a 	mov	r4,r17
  80d0f4:	01402074 	movhi	r5,129
  80d0f8:	2954d704 	addi	r5,r5,21340
  80d0fc:	080d0980 	call	80d098 <htinit>
  80d100:	8809883a 	mov	r4,r17
  80d104:	980d883a 	mov	r6,r19
  80d108:	01402074 	movhi	r5,129
  80d10c:	2954d904 	addi	r5,r5,21348
  80d110:	dfc00217 	ldw	ra,8(sp)
  80d114:	dcc00117 	ldw	r19,4(sp)
  80d118:	dc400017 	ldw	r17,0(sp)
  80d11c:	dec00304 	addi	sp,sp,12
  80d120:	080d0981 	jmpi	80d098 <htinit>

0080d124 <rshift>:
  80d124:	2807d17a 	srai	r3,r5,5
  80d128:	20800417 	ldw	r2,16(r4)
  80d12c:	22400504 	addi	r9,r4,20
  80d130:	480f883a 	mov	r7,r9
  80d134:	1880190e 	bge	r3,r2,80d19c <rshift+0x78>
  80d138:	1085883a 	add	r2,r2,r2
  80d13c:	18c7883a 	add	r3,r3,r3
  80d140:	1085883a 	add	r2,r2,r2
  80d144:	18c7883a 	add	r3,r3,r3
  80d148:	294007cc 	andi	r5,r5,31
  80d14c:	4891883a 	add	r8,r9,r2
  80d150:	48cd883a 	add	r6,r9,r3
  80d154:	28001726 	beq	r5,zero,80d1b4 <rshift+0x90>
  80d158:	30c00017 	ldw	r3,0(r6)
  80d15c:	00800804 	movi	r2,32
  80d160:	31800104 	addi	r6,r6,4
  80d164:	1155c83a 	sub	r10,r2,r5
  80d168:	1946d83a 	srl	r3,r3,r5
  80d16c:	3200092e 	bgeu	r6,r8,80d194 <rshift+0x70>
  80d170:	30800017 	ldw	r2,0(r6)
  80d174:	1284983a 	sll	r2,r2,r10
  80d178:	10c4b03a 	or	r2,r2,r3
  80d17c:	38800015 	stw	r2,0(r7)
  80d180:	30c00017 	ldw	r3,0(r6)
  80d184:	31800104 	addi	r6,r6,4
  80d188:	39c00104 	addi	r7,r7,4
  80d18c:	1946d83a 	srl	r3,r3,r5
  80d190:	323ff736 	bltu	r6,r8,80d170 <rshift+0x4c>
  80d194:	38c00015 	stw	r3,0(r7)
  80d198:	18000c1e 	bne	r3,zero,80d1cc <rshift+0xa8>
  80d19c:	3a45c83a 	sub	r2,r7,r9
  80d1a0:	1005d0ba 	srai	r2,r2,2
  80d1a4:	20800415 	stw	r2,16(r4)
  80d1a8:	1000011e 	bne	r2,zero,80d1b0 <rshift+0x8c>
  80d1ac:	20000515 	stw	zero,20(r4)
  80d1b0:	f800283a 	ret
  80d1b4:	323ff92e 	bgeu	r6,r8,80d19c <rshift+0x78>
  80d1b8:	30800017 	ldw	r2,0(r6)
  80d1bc:	31800104 	addi	r6,r6,4
  80d1c0:	38800015 	stw	r2,0(r7)
  80d1c4:	39c00104 	addi	r7,r7,4
  80d1c8:	003ffa06 	br	80d1b4 <rshift+0x90>
  80d1cc:	39c00104 	addi	r7,r7,4
  80d1d0:	003ff206 	br	80d19c <rshift+0x78>

0080d1d4 <__gethex>:
  80d1d4:	defff304 	addi	sp,sp,-52
  80d1d8:	dd400815 	stw	r21,32(sp)
  80d1dc:	dd000715 	stw	r20,28(sp)
  80d1e0:	dcc00615 	stw	r19,24(sp)
  80d1e4:	dc400415 	stw	r17,16(sp)
  80d1e8:	dfc00c15 	stw	ra,48(sp)
  80d1ec:	df000b15 	stw	fp,44(sp)
  80d1f0:	ddc00a15 	stw	r23,40(sp)
  80d1f4:	dd800915 	stw	r22,36(sp)
  80d1f8:	dc800515 	stw	r18,20(sp)
  80d1fc:	dc000315 	stw	r16,12(sp)
  80d200:	044020b4 	movhi	r17,130
  80d204:	8c63c604 	addi	r17,r17,-28904
  80d208:	88800c03 	ldbu	r2,48(r17)
  80d20c:	202b883a 	mov	r21,r4
  80d210:	2827883a 	mov	r19,r5
  80d214:	3029883a 	mov	r20,r6
  80d218:	d9c00115 	stw	r7,4(sp)
  80d21c:	10006e26 	beq	r2,zero,80d3d8 <__gethex+0x204>
  80d220:	99800017 	ldw	r6,0(r19)
  80d224:	00800c04 	movi	r2,48
  80d228:	31000083 	ldbu	r4,2(r6)
  80d22c:	30c00084 	addi	r3,r6,2
  80d230:	20806f1e 	bne	r4,r2,80d3f0 <__gethex+0x21c>
  80d234:	200b883a 	mov	r5,r4
  80d238:	3007883a 	mov	r3,r6
  80d23c:	188000c3 	ldbu	r2,3(r3)
  80d240:	18c00044 	addi	r3,r3,1
  80d244:	1009883a 	mov	r4,r2
  80d248:	117ffc26 	beq	r2,r5,80d23c <__gethex+0x68>
  80d24c:	1997c83a 	sub	r11,r3,r6
  80d250:	19400084 	addi	r5,r3,2
  80d254:	2445883a 	add	r2,r4,r17
  80d258:	10c00003 	ldbu	r3,0(r2)
  80d25c:	18002d26 	beq	r3,zero,80d314 <__gethex+0x140>
  80d260:	29000003 	ldbu	r4,0(r5)
  80d264:	2825883a 	mov	r18,r5
  80d268:	000d883a 	mov	r6,zero
  80d26c:	0013883a 	mov	r9,zero
  80d270:	21003fcc 	andi	r4,r4,255
  80d274:	2445883a 	add	r2,r4,r17
  80d278:	10c00003 	ldbu	r3,0(r2)
  80d27c:	18000526 	beq	r3,zero,80d294 <__gethex+0xc0>
  80d280:	29400044 	addi	r5,r5,1
  80d284:	29000003 	ldbu	r4,0(r5)
  80d288:	2445883a 	add	r2,r4,r17
  80d28c:	10c00003 	ldbu	r3,0(r2)
  80d290:	183ffb1e 	bne	r3,zero,80d280 <__gethex+0xac>
  80d294:	00800b84 	movi	r2,46
  80d298:	20805826 	beq	r4,r2,80d3fc <__gethex+0x228>
  80d29c:	30007a26 	beq	r6,zero,80d488 <__gethex+0x2b4>
  80d2a0:	2985c83a 	sub	r2,r5,r6
  80d2a4:	1085883a 	add	r2,r2,r2
  80d2a8:	1085883a 	add	r2,r2,r2
  80d2ac:	00adc83a 	sub	r22,zero,r2
  80d2b0:	2821883a 	mov	r16,r5
  80d2b4:	80c00003 	ldbu	r3,0(r16)
  80d2b8:	00801404 	movi	r2,80
  80d2bc:	18801e26 	beq	r3,r2,80d338 <__gethex+0x164>
  80d2c0:	00801c04 	movi	r2,112
  80d2c4:	18801c26 	beq	r3,r2,80d338 <__gethex+0x164>
  80d2c8:	800d883a 	mov	r6,r16
  80d2cc:	4805003a 	cmpeq	r2,r9,zero
  80d2d0:	99800015 	stw	r6,0(r19)
  80d2d4:	1000861e 	bne	r2,zero,80d4f0 <__gethex+0x31c>
  80d2d8:	58003d26 	beq	r11,zero,80d3d0 <__gethex+0x1fc>
  80d2dc:	0025883a 	mov	r18,zero
  80d2e0:	9005883a 	mov	r2,r18
  80d2e4:	dfc00c17 	ldw	ra,48(sp)
  80d2e8:	df000b17 	ldw	fp,44(sp)
  80d2ec:	ddc00a17 	ldw	r23,40(sp)
  80d2f0:	dd800917 	ldw	r22,36(sp)
  80d2f4:	dd400817 	ldw	r21,32(sp)
  80d2f8:	dd000717 	ldw	r20,28(sp)
  80d2fc:	dcc00617 	ldw	r19,24(sp)
  80d300:	dc800517 	ldw	r18,20(sp)
  80d304:	dc400417 	ldw	r17,16(sp)
  80d308:	dc000317 	ldw	r16,12(sp)
  80d30c:	dec00d04 	addi	sp,sp,52
  80d310:	f800283a 	ret
  80d314:	00800b84 	movi	r2,46
  80d318:	20804a26 	beq	r4,r2,80d444 <__gethex+0x270>
  80d31c:	2821883a 	mov	r16,r5
  80d320:	80c00003 	ldbu	r3,0(r16)
  80d324:	00801404 	movi	r2,80
  80d328:	2825883a 	mov	r18,r5
  80d32c:	02400044 	movi	r9,1
  80d330:	002d883a 	mov	r22,zero
  80d334:	18bfe21e 	bne	r3,r2,80d2c0 <__gethex+0xec>
  80d338:	80c00043 	ldbu	r3,1(r16)
  80d33c:	00800ac4 	movi	r2,43
  80d340:	81000044 	addi	r4,r16,1
  80d344:	18804a26 	beq	r3,r2,80d470 <__gethex+0x29c>
  80d348:	00800b44 	movi	r2,45
  80d34c:	18804c26 	beq	r3,r2,80d480 <__gethex+0x2ac>
  80d350:	0015883a 	mov	r10,zero
  80d354:	1c45883a 	add	r2,r3,r17
  80d358:	10800003 	ldbu	r2,0(r2)
  80d35c:	103fda26 	beq	r2,zero,80d2c8 <__gethex+0xf4>
  80d360:	02000644 	movi	r8,25
  80d364:	40bfd816 	blt	r8,r2,80d2c8 <__gethex+0xf4>
  80d368:	20c00043 	ldbu	r3,1(r4)
  80d36c:	11fffc04 	addi	r7,r2,-16
  80d370:	008020b4 	movhi	r2,130
  80d374:	10a3c604 	addi	r2,r2,-28904
  80d378:	1887883a 	add	r3,r3,r2
  80d37c:	18800003 	ldbu	r2,0(r3)
  80d380:	21800044 	addi	r6,r4,1
  80d384:	10000d26 	beq	r2,zero,80d3bc <__gethex+0x1e8>
  80d388:	100b883a 	mov	r5,r2
  80d38c:	4080020e 	bge	r8,r2,80d398 <__gethex+0x1c4>
  80d390:	00000a06 	br	80d3bc <__gethex+0x1e8>
  80d394:	41000916 	blt	r8,r4,80d3bc <__gethex+0x1e8>
  80d398:	31800044 	addi	r6,r6,1
  80d39c:	30800003 	ldbu	r2,0(r6)
  80d3a0:	38c002a4 	muli	r3,r7,10
  80d3a4:	1445883a 	add	r2,r2,r17
  80d3a8:	11000003 	ldbu	r4,0(r2)
  80d3ac:	1947883a 	add	r3,r3,r5
  80d3b0:	19fffc04 	addi	r7,r3,-16
  80d3b4:	200b883a 	mov	r5,r4
  80d3b8:	203ff61e 	bne	r4,zero,80d394 <__gethex+0x1c0>
  80d3bc:	5005003a 	cmpeq	r2,r10,zero
  80d3c0:	1000011e 	bne	r2,zero,80d3c8 <__gethex+0x1f4>
  80d3c4:	01cfc83a 	sub	r7,zero,r7
  80d3c8:	b1ed883a 	add	r22,r22,r7
  80d3cc:	003fbf06 	br	80d2cc <__gethex+0xf8>
  80d3d0:	04800184 	movi	r18,6
  80d3d4:	003fc206 	br	80d2e0 <__gethex+0x10c>
  80d3d8:	080d0bc0 	call	80d0bc <__hexdig_init>
  80d3dc:	99800017 	ldw	r6,0(r19)
  80d3e0:	00800c04 	movi	r2,48
  80d3e4:	31000083 	ldbu	r4,2(r6)
  80d3e8:	30c00084 	addi	r3,r6,2
  80d3ec:	20bf9126 	beq	r4,r2,80d234 <__gethex+0x60>
  80d3f0:	180b883a 	mov	r5,r3
  80d3f4:	0017883a 	mov	r11,zero
  80d3f8:	003f9606 	br	80d254 <__gethex+0x80>
  80d3fc:	303fa81e 	bne	r6,zero,80d2a0 <__gethex+0xcc>
  80d400:	29400044 	addi	r5,r5,1
  80d404:	28800003 	ldbu	r2,0(r5)
  80d408:	1445883a 	add	r2,r2,r17
  80d40c:	10c00003 	ldbu	r3,0(r2)
  80d410:	1800ad26 	beq	r3,zero,80d6c8 <__gethex+0x4f4>
  80d414:	2809883a 	mov	r4,r5
  80d418:	21000044 	addi	r4,r4,1
  80d41c:	20800003 	ldbu	r2,0(r4)
  80d420:	1445883a 	add	r2,r2,r17
  80d424:	10c00003 	ldbu	r3,0(r2)
  80d428:	183ffb1e 	bne	r3,zero,80d418 <__gethex+0x244>
  80d42c:	2145c83a 	sub	r2,r4,r5
  80d430:	1085883a 	add	r2,r2,r2
  80d434:	1085883a 	add	r2,r2,r2
  80d438:	00adc83a 	sub	r22,zero,r2
  80d43c:	200b883a 	mov	r5,r4
  80d440:	003f9b06 	br	80d2b0 <__gethex+0xdc>
  80d444:	29000043 	ldbu	r4,1(r5)
  80d448:	008020b4 	movhi	r2,130
  80d44c:	10a3c604 	addi	r2,r2,-28904
  80d450:	2c000044 	addi	r16,r5,1
  80d454:	2085883a 	add	r2,r4,r2
  80d458:	10c00003 	ldbu	r3,0(r2)
  80d45c:	18000d1e 	bne	r3,zero,80d494 <__gethex+0x2c0>
  80d460:	2825883a 	mov	r18,r5
  80d464:	02400044 	movi	r9,1
  80d468:	002d883a 	mov	r22,zero
  80d46c:	003f9106 	br	80d2b4 <__gethex+0xe0>
  80d470:	0015883a 	mov	r10,zero
  80d474:	21000044 	addi	r4,r4,1
  80d478:	20c00003 	ldbu	r3,0(r4)
  80d47c:	003fb506 	br	80d354 <__gethex+0x180>
  80d480:	02800044 	movi	r10,1
  80d484:	003ffb06 	br	80d474 <__gethex+0x2a0>
  80d488:	2821883a 	mov	r16,r5
  80d48c:	002d883a 	mov	r22,zero
  80d490:	003f8806 	br	80d2b4 <__gethex+0xe0>
  80d494:	00800c04 	movi	r2,48
  80d498:	20800e1e 	bne	r4,r2,80d4d4 <__gethex+0x300>
  80d49c:	2007883a 	mov	r3,r4
  80d4a0:	800b883a 	mov	r5,r16
  80d4a4:	29400044 	addi	r5,r5,1
  80d4a8:	29000003 	ldbu	r4,0(r5)
  80d4ac:	20803fcc 	andi	r2,r4,255
  80d4b0:	10fffc26 	beq	r2,r3,80d4a4 <__gethex+0x2d0>
  80d4b4:	1445883a 	add	r2,r2,r17
  80d4b8:	10c00003 	ldbu	r3,0(r2)
  80d4bc:	1800071e 	bne	r3,zero,80d4dc <__gethex+0x308>
  80d4c0:	02c00044 	movi	r11,1
  80d4c4:	800d883a 	mov	r6,r16
  80d4c8:	2825883a 	mov	r18,r5
  80d4cc:	5813883a 	mov	r9,r11
  80d4d0:	003f6706 	br	80d270 <__gethex+0x9c>
  80d4d4:	81000003 	ldbu	r4,0(r16)
  80d4d8:	800b883a 	mov	r5,r16
  80d4dc:	800d883a 	mov	r6,r16
  80d4e0:	2825883a 	mov	r18,r5
  80d4e4:	02c00044 	movi	r11,1
  80d4e8:	0013883a 	mov	r9,zero
  80d4ec:	003f6006 	br	80d270 <__gethex+0x9c>
  80d4f0:	8485c83a 	sub	r2,r16,r18
  80d4f4:	10bfffc4 	addi	r2,r2,-1
  80d4f8:	00c001c4 	movi	r3,7
  80d4fc:	1880700e 	bge	r3,r2,80d6c0 <__gethex+0x4ec>
  80d500:	000b883a 	mov	r5,zero
  80d504:	1005d07a 	srai	r2,r2,1
  80d508:	29400044 	addi	r5,r5,1
  80d50c:	18bffd16 	blt	r3,r2,80d504 <__gethex+0x330>
  80d510:	a809883a 	mov	r4,r21
  80d514:	0809f400 	call	809f40 <_Balloc>
  80d518:	1027883a 	mov	r19,r2
  80d51c:	10800504 	addi	r2,r2,20
  80d520:	d8800215 	stw	r2,8(sp)
  80d524:	9400522e 	bgeu	r18,r16,80d670 <__gethex+0x49c>
  80d528:	da000217 	ldw	r8,8(sp)
  80d52c:	800b883a 	mov	r5,r16
  80d530:	000f883a 	mov	r7,zero
  80d534:	0009883a 	mov	r4,zero
  80d538:	02400b84 	movi	r9,46
  80d53c:	02800804 	movi	r10,32
  80d540:	297fffc4 	addi	r5,r5,-1
  80d544:	28c00003 	ldbu	r3,0(r5)
  80d548:	1a400826 	beq	r3,r9,80d56c <__gethex+0x398>
  80d54c:	380d883a 	mov	r6,r7
  80d550:	3a802726 	beq	r7,r10,80d5f0 <__gethex+0x41c>
  80d554:	39c00104 	addi	r7,r7,4
  80d558:	1c47883a 	add	r3,r3,r17
  80d55c:	18800003 	ldbu	r2,0(r3)
  80d560:	108003cc 	andi	r2,r2,15
  80d564:	1184983a 	sll	r2,r2,r6
  80d568:	2088b03a 	or	r4,r4,r2
  80d56c:	917ff436 	bltu	r18,r5,80d540 <__gethex+0x36c>
  80d570:	d8c00217 	ldw	r3,8(sp)
  80d574:	40800104 	addi	r2,r8,4
  80d578:	41000015 	stw	r4,0(r8)
  80d57c:	10c5c83a 	sub	r2,r2,r3
  80d580:	1021d0ba 	srai	r16,r2,2
  80d584:	9c000415 	stw	r16,16(r19)
  80d588:	08099e80 	call	8099e8 <__hi0bits>
  80d58c:	8006917a 	slli	r3,r16,5
  80d590:	a5c00017 	ldw	r23,0(r20)
  80d594:	1885c83a 	sub	r2,r3,r2
  80d598:	b8801c16 	blt	r23,r2,80d60c <__gethex+0x438>
  80d59c:	15c00a16 	blt	r2,r23,80d5c8 <__gethex+0x3f4>
  80d5a0:	0039883a 	mov	fp,zero
  80d5a4:	a0800217 	ldw	r2,8(r20)
  80d5a8:	1580340e 	bge	r2,r22,80d67c <__gethex+0x4a8>
  80d5ac:	a809883a 	mov	r4,r21
  80d5b0:	980b883a 	mov	r5,r19
  80d5b4:	08099c00 	call	8099c0 <_Bfree>
  80d5b8:	d8c00d17 	ldw	r3,52(sp)
  80d5bc:	048028c4 	movi	r18,163
  80d5c0:	18000015 	stw	zero,0(r3)
  80d5c4:	003f4606 	br	80d2e0 <__gethex+0x10c>
  80d5c8:	b8a1c83a 	sub	r16,r23,r2
  80d5cc:	980b883a 	mov	r5,r19
  80d5d0:	a809883a 	mov	r4,r21
  80d5d4:	800d883a 	mov	r6,r16
  80d5d8:	080a3040 	call	80a304 <__lshift>
  80d5dc:	1027883a 	mov	r19,r2
  80d5e0:	b42dc83a 	sub	r22,r22,r16
  80d5e4:	10800504 	addi	r2,r2,20
  80d5e8:	d8800215 	stw	r2,8(sp)
  80d5ec:	003fec06 	br	80d5a0 <__gethex+0x3cc>
  80d5f0:	41000015 	stw	r4,0(r8)
  80d5f4:	28c00003 	ldbu	r3,0(r5)
  80d5f8:	01c00104 	movi	r7,4
  80d5fc:	000d883a 	mov	r6,zero
  80d600:	41d1883a 	add	r8,r8,r7
  80d604:	0009883a 	mov	r4,zero
  80d608:	003fd306 	br	80d558 <__gethex+0x384>
  80d60c:	15e1c83a 	sub	r16,r2,r23
  80d610:	9809883a 	mov	r4,r19
  80d614:	800b883a 	mov	r5,r16
  80d618:	0809eb80 	call	809eb8 <__any_on>
  80d61c:	1000061e 	bne	r2,zero,80d638 <__gethex+0x464>
  80d620:	0039883a 	mov	fp,zero
  80d624:	9809883a 	mov	r4,r19
  80d628:	800b883a 	mov	r5,r16
  80d62c:	080d1240 	call	80d124 <rshift>
  80d630:	b42d883a 	add	r22,r22,r16
  80d634:	003fdb06 	br	80d5a4 <__gethex+0x3d0>
  80d638:	817fffc4 	addi	r5,r16,-1
  80d63c:	2805d17a 	srai	r2,r5,5
  80d640:	d8c00217 	ldw	r3,8(sp)
  80d644:	290007cc 	andi	r4,r5,31
  80d648:	1085883a 	add	r2,r2,r2
  80d64c:	1085883a 	add	r2,r2,r2
  80d650:	01800044 	movi	r6,1
  80d654:	10c5883a 	add	r2,r2,r3
  80d658:	3108983a 	sll	r4,r6,r4
  80d65c:	10c00017 	ldw	r3,0(r2)
  80d660:	20c8703a 	and	r4,r4,r3
  80d664:	20001a1e 	bne	r4,zero,80d6d0 <__gethex+0x4fc>
  80d668:	3039883a 	mov	fp,r6
  80d66c:	003fed06 	br	80d624 <__gethex+0x450>
  80d670:	1011883a 	mov	r8,r2
  80d674:	0009883a 	mov	r4,zero
  80d678:	003fbd06 	br	80d570 <__gethex+0x39c>
  80d67c:	a1000117 	ldw	r4,4(r20)
  80d680:	b1001a16 	blt	r22,r4,80d6ec <__gethex+0x518>
  80d684:	04800044 	movi	r18,1
  80d688:	e0000826 	beq	fp,zero,80d6ac <__gethex+0x4d8>
  80d68c:	a1000317 	ldw	r4,12(r20)
  80d690:	00800084 	movi	r2,2
  80d694:	20809426 	beq	r4,r2,80d8e8 <__gethex+0x714>
  80d698:	008000c4 	movi	r2,3
  80d69c:	20805826 	beq	r4,r2,80d800 <__gethex+0x62c>
  80d6a0:	00800044 	movi	r2,1
  80d6a4:	20803f26 	beq	r4,r2,80d7a4 <__gethex+0x5d0>
  80d6a8:	94800414 	ori	r18,r18,16
  80d6ac:	d8800d17 	ldw	r2,52(sp)
  80d6b0:	d8c00117 	ldw	r3,4(sp)
  80d6b4:	14c00015 	stw	r19,0(r2)
  80d6b8:	1d800015 	stw	r22,0(r3)
  80d6bc:	003f0806 	br	80d2e0 <__gethex+0x10c>
  80d6c0:	000b883a 	mov	r5,zero
  80d6c4:	003f9206 	br	80d510 <__gethex+0x33c>
  80d6c8:	002d883a 	mov	r22,zero
  80d6cc:	003ef806 	br	80d2b0 <__gethex+0xdc>
  80d6d0:	3140160e 	bge	r6,r5,80d72c <__gethex+0x558>
  80d6d4:	9809883a 	mov	r4,r19
  80d6d8:	817fff84 	addi	r5,r16,-2
  80d6dc:	0809eb80 	call	809eb8 <__any_on>
  80d6e0:	10001226 	beq	r2,zero,80d72c <__gethex+0x558>
  80d6e4:	070000c4 	movi	fp,3
  80d6e8:	003fce06 	br	80d624 <__gethex+0x450>
  80d6ec:	25a3c83a 	sub	r17,r4,r22
  80d6f0:	8dc01016 	blt	r17,r23,80d734 <__gethex+0x560>
  80d6f4:	a0c00317 	ldw	r3,12(r20)
  80d6f8:	00800084 	movi	r2,2
  80d6fc:	18809326 	beq	r3,r2,80d94c <__gethex+0x778>
  80d700:	008000c4 	movi	r2,3
  80d704:	18808e26 	beq	r3,r2,80d940 <__gethex+0x76c>
  80d708:	00800044 	movi	r2,1
  80d70c:	18807b26 	beq	r3,r2,80d8fc <__gethex+0x728>
  80d710:	a809883a 	mov	r4,r21
  80d714:	980b883a 	mov	r5,r19
  80d718:	08099c00 	call	8099c0 <_Bfree>
  80d71c:	d8c00d17 	ldw	r3,52(sp)
  80d720:	04801404 	movi	r18,80
  80d724:	18000015 	stw	zero,0(r3)
  80d728:	003eed06 	br	80d2e0 <__gethex+0x10c>
  80d72c:	07000084 	movi	fp,2
  80d730:	003fbc06 	br	80d624 <__gethex+0x450>
  80d734:	8c3fffc4 	addi	r16,r17,-1
  80d738:	e0001426 	beq	fp,zero,80d78c <__gethex+0x5b8>
  80d73c:	07000044 	movi	fp,1
  80d740:	8005d17a 	srai	r2,r16,5
  80d744:	d8c00217 	ldw	r3,8(sp)
  80d748:	814007cc 	andi	r5,r16,31
  80d74c:	1085883a 	add	r2,r2,r2
  80d750:	1085883a 	add	r2,r2,r2
  80d754:	10c5883a 	add	r2,r2,r3
  80d758:	00c00044 	movi	r3,1
  80d75c:	1946983a 	sll	r3,r3,r5
  80d760:	11000017 	ldw	r4,0(r2)
  80d764:	1906703a 	and	r3,r3,r4
  80d768:	18000126 	beq	r3,zero,80d770 <__gethex+0x59c>
  80d76c:	e7000094 	ori	fp,fp,2
  80d770:	880b883a 	mov	r5,r17
  80d774:	9809883a 	mov	r4,r19
  80d778:	080d1240 	call	80d124 <rshift>
  80d77c:	a5800117 	ldw	r22,4(r20)
  80d780:	bc6fc83a 	sub	r23,r23,r17
  80d784:	04800084 	movi	r18,2
  80d788:	003fbf06 	br	80d688 <__gethex+0x4b4>
  80d78c:	043fec0e 	bge	zero,r16,80d740 <__gethex+0x56c>
  80d790:	9809883a 	mov	r4,r19
  80d794:	800b883a 	mov	r5,r16
  80d798:	0809eb80 	call	809eb8 <__any_on>
  80d79c:	1039883a 	mov	fp,r2
  80d7a0:	003fe706 	br	80d740 <__gethex+0x56c>
  80d7a4:	e080008c 	andi	r2,fp,2
  80d7a8:	103fbf26 	beq	r2,zero,80d6a8 <__gethex+0x4d4>
  80d7ac:	d8c00217 	ldw	r3,8(sp)
  80d7b0:	18800017 	ldw	r2,0(r3)
  80d7b4:	e084b03a 	or	r2,fp,r2
  80d7b8:	1104703a 	and	r2,r2,r4
  80d7bc:	103fba26 	beq	r2,zero,80d6a8 <__gethex+0x4d4>
  80d7c0:	9c000417 	ldw	r16,16(r19)
  80d7c4:	d8c00217 	ldw	r3,8(sp)
  80d7c8:	017fffc4 	movi	r5,-1
  80d7cc:	8405883a 	add	r2,r16,r16
  80d7d0:	10b9883a 	add	fp,r2,r2
  80d7d4:	1f09883a 	add	r4,r3,fp
  80d7d8:	dc000015 	stw	r16,0(sp)
  80d7dc:	00000306 	br	80d7ec <__gethex+0x618>
  80d7e0:	18000015 	stw	zero,0(r3)
  80d7e4:	18c00104 	addi	r3,r3,4
  80d7e8:	1900082e 	bgeu	r3,r4,80d80c <__gethex+0x638>
  80d7ec:	18800017 	ldw	r2,0(r3)
  80d7f0:	117ffb26 	beq	r2,r5,80d7e0 <__gethex+0x60c>
  80d7f4:	10800044 	addi	r2,r2,1
  80d7f8:	18800015 	stw	r2,0(r3)
  80d7fc:	00001f06 	br	80d87c <__gethex+0x6a8>
  80d800:	d8800e17 	ldw	r2,56(sp)
  80d804:	103fa826 	beq	r2,zero,80d6a8 <__gethex+0x4d4>
  80d808:	003fed06 	br	80d7c0 <__gethex+0x5ec>
  80d80c:	98800217 	ldw	r2,8(r19)
  80d810:	80801316 	blt	r16,r2,80d860 <__gethex+0x68c>
  80d814:	99400117 	ldw	r5,4(r19)
  80d818:	a809883a 	mov	r4,r21
  80d81c:	29400044 	addi	r5,r5,1
  80d820:	0809f400 	call	809f40 <_Balloc>
  80d824:	99800417 	ldw	r6,16(r19)
  80d828:	99400304 	addi	r5,r19,12
  80d82c:	11000304 	addi	r4,r2,12
  80d830:	318d883a 	add	r6,r6,r6
  80d834:	318d883a 	add	r6,r6,r6
  80d838:	31800204 	addi	r6,r6,8
  80d83c:	1023883a 	mov	r17,r2
  80d840:	080336c0 	call	80336c <memcpy>
  80d844:	980b883a 	mov	r5,r19
  80d848:	a809883a 	mov	r4,r21
  80d84c:	08099c00 	call	8099c0 <_Bfree>
  80d850:	8c000417 	ldw	r16,16(r17)
  80d854:	88800504 	addi	r2,r17,20
  80d858:	8827883a 	mov	r19,r17
  80d85c:	d8800215 	stw	r2,8(sp)
  80d860:	8405883a 	add	r2,r16,r16
  80d864:	1085883a 	add	r2,r2,r2
  80d868:	14c5883a 	add	r2,r2,r19
  80d86c:	84000044 	addi	r16,r16,1
  80d870:	00c00044 	movi	r3,1
  80d874:	10c00515 	stw	r3,20(r2)
  80d878:	9c000415 	stw	r16,16(r19)
  80d87c:	00800084 	movi	r2,2
  80d880:	90801426 	beq	r18,r2,80d8d4 <__gethex+0x700>
  80d884:	d8800017 	ldw	r2,0(sp)
  80d888:	14000b16 	blt	r2,r16,80d8b8 <__gethex+0x6e4>
  80d88c:	bc0007cc 	andi	r16,r23,31
  80d890:	8000021e 	bne	r16,zero,80d89c <__gethex+0x6c8>
  80d894:	94800814 	ori	r18,r18,32
  80d898:	003f8406 	br	80d6ac <__gethex+0x4d8>
  80d89c:	d8c00217 	ldw	r3,8(sp)
  80d8a0:	1f05883a 	add	r2,r3,fp
  80d8a4:	113fff17 	ldw	r4,-4(r2)
  80d8a8:	08099e80 	call	8099e8 <__hi0bits>
  80d8ac:	00c00804 	movi	r3,32
  80d8b0:	1c07c83a 	sub	r3,r3,r16
  80d8b4:	10fff70e 	bge	r2,r3,80d894 <__gethex+0x6c0>
  80d8b8:	9809883a 	mov	r4,r19
  80d8bc:	01400044 	movi	r5,1
  80d8c0:	080d1240 	call	80d124 <rshift>
  80d8c4:	a0800217 	ldw	r2,8(r20)
  80d8c8:	b5800044 	addi	r22,r22,1
  80d8cc:	15bf3716 	blt	r2,r22,80d5ac <__gethex+0x3d8>
  80d8d0:	003ff006 	br	80d894 <__gethex+0x6c0>
  80d8d4:	a0800017 	ldw	r2,0(r20)
  80d8d8:	10bfffc4 	addi	r2,r2,-1
  80d8dc:	b8801e26 	beq	r23,r2,80d958 <__gethex+0x784>
  80d8e0:	04800884 	movi	r18,34
  80d8e4:	003f7106 	br	80d6ac <__gethex+0x4d8>
  80d8e8:	d8c00e17 	ldw	r3,56(sp)
  80d8ec:	00800044 	movi	r2,1
  80d8f0:	10c5c83a 	sub	r2,r2,r3
  80d8f4:	103f6c26 	beq	r2,zero,80d6a8 <__gethex+0x4d4>
  80d8f8:	003fb106 	br	80d7c0 <__gethex+0x5ec>
  80d8fc:	bc7f841e 	bne	r23,r17,80d710 <__gethex+0x53c>
  80d900:	1dc0050e 	bge	r3,r23,80d918 <__gethex+0x744>
  80d904:	b8cbc83a 	sub	r5,r23,r3
  80d908:	9809883a 	mov	r4,r19
  80d90c:	0809eb80 	call	809eb8 <__any_on>
  80d910:	103f7f26 	beq	r2,zero,80d710 <__gethex+0x53c>
  80d914:	a1000117 	ldw	r4,4(r20)
  80d918:	d8800117 	ldw	r2,4(sp)
  80d91c:	d8c00217 	ldw	r3,8(sp)
  80d920:	04000044 	movi	r16,1
  80d924:	11000015 	stw	r4,0(r2)
  80d928:	d8800d17 	ldw	r2,52(sp)
  80d92c:	04801884 	movi	r18,98
  80d930:	1c000015 	stw	r16,0(r3)
  80d934:	14c00015 	stw	r19,0(r2)
  80d938:	9c000415 	stw	r16,16(r19)
  80d93c:	003e6806 	br	80d2e0 <__gethex+0x10c>
  80d940:	d8c00e17 	ldw	r3,56(sp)
  80d944:	183f7226 	beq	r3,zero,80d710 <__gethex+0x53c>
  80d948:	003ff306 	br	80d918 <__gethex+0x744>
  80d94c:	d8800e17 	ldw	r2,56(sp)
  80d950:	103ff126 	beq	r2,zero,80d918 <__gethex+0x744>
  80d954:	003f6e06 	br	80d710 <__gethex+0x53c>
  80d958:	b805d17a 	srai	r2,r23,5
  80d95c:	d8c00217 	ldw	r3,8(sp)
  80d960:	b94007cc 	andi	r5,r23,31
  80d964:	1085883a 	add	r2,r2,r2
  80d968:	1085883a 	add	r2,r2,r2
  80d96c:	10c5883a 	add	r2,r2,r3
  80d970:	00c00044 	movi	r3,1
  80d974:	1946983a 	sll	r3,r3,r5
  80d978:	11000017 	ldw	r4,0(r2)
  80d97c:	1906703a 	and	r3,r3,r4
  80d980:	183fd726 	beq	r3,zero,80d8e0 <__gethex+0x70c>
  80d984:	04800844 	movi	r18,33
  80d988:	003f4806 	br	80d6ac <__gethex+0x4d8>

0080d98c <L_shift>:
  80d98c:	00800204 	movi	r2,8
  80d990:	1185c83a 	sub	r2,r2,r6
  80d994:	1085883a 	add	r2,r2,r2
  80d998:	21c00017 	ldw	r7,0(r4)
  80d99c:	1093883a 	add	r9,r2,r2
  80d9a0:	00800804 	movi	r2,32
  80d9a4:	200d883a 	mov	r6,r4
  80d9a8:	1251c83a 	sub	r8,r2,r9
  80d9ac:	31800104 	addi	r6,r6,4
  80d9b0:	3805883a 	mov	r2,r7
  80d9b4:	31c00017 	ldw	r7,0(r6)
  80d9b8:	3a08983a 	sll	r4,r7,r8
  80d9bc:	3a46d83a 	srl	r3,r7,r9
  80d9c0:	1104b03a 	or	r2,r2,r4
  80d9c4:	180f883a 	mov	r7,r3
  80d9c8:	30bfff15 	stw	r2,-4(r6)
  80d9cc:	30c00015 	stw	r3,0(r6)
  80d9d0:	317ff636 	bltu	r6,r5,80d9ac <L_shift+0x20>
  80d9d4:	f800283a 	ret

0080d9d8 <__hexnan>:
  80d9d8:	defff404 	addi	sp,sp,-48
  80d9dc:	dd800815 	stw	r22,32(sp)
  80d9e0:	058020b4 	movhi	r22,130
  80d9e4:	b5a3c604 	addi	r22,r22,-28904
  80d9e8:	b0800c03 	ldbu	r2,48(r22)
  80d9ec:	dcc00515 	stw	r19,20(sp)
  80d9f0:	dc000215 	stw	r16,8(sp)
  80d9f4:	dfc00b15 	stw	ra,44(sp)
  80d9f8:	df000a15 	stw	fp,40(sp)
  80d9fc:	ddc00915 	stw	r23,36(sp)
  80da00:	dd400715 	stw	r21,28(sp)
  80da04:	dd000615 	stw	r20,24(sp)
  80da08:	dc800415 	stw	r18,16(sp)
  80da0c:	dc400315 	stw	r17,12(sp)
  80da10:	d9000115 	stw	r4,4(sp)
  80da14:	2821883a 	mov	r16,r5
  80da18:	3027883a 	mov	r19,r6
  80da1c:	10007426 	beq	r2,zero,80dbf0 <__hexnan+0x218>
  80da20:	80c00017 	ldw	r3,0(r16)
  80da24:	1805d17a 	srai	r2,r3,5
  80da28:	18c007cc 	andi	r3,r3,31
  80da2c:	1839003a 	cmpeq	fp,r3,zero
  80da30:	1085883a 	add	r2,r2,r2
  80da34:	1085883a 	add	r2,r2,r2
  80da38:	d8c00015 	stw	r3,0(sp)
  80da3c:	14c5883a 	add	r2,r2,r19
  80da40:	e000011e 	bne	fp,zero,80da48 <__hexnan+0x70>
  80da44:	10800104 	addi	r2,r2,4
  80da48:	d8c00117 	ldw	r3,4(sp)
  80da4c:	153fff04 	addi	r20,r2,-4
  80da50:	a021883a 	mov	r16,r20
  80da54:	1c400017 	ldw	r17,0(r3)
  80da58:	a02b883a 	mov	r21,r20
  80da5c:	0025883a 	mov	r18,zero
  80da60:	002f883a 	mov	r23,zero
  80da64:	000d883a 	mov	r6,zero
  80da68:	103fff15 	stw	zero,-4(r2)
  80da6c:	8c400044 	addi	r17,r17,1
  80da70:	89000003 	ldbu	r4,0(r17)
  80da74:	20000e26 	beq	r4,zero,80dab0 <__hexnan+0xd8>
  80da78:	2585883a 	add	r2,r4,r22
  80da7c:	10c00003 	ldbu	r3,0(r2)
  80da80:	18002e1e 	bne	r3,zero,80db3c <__hexnan+0x164>
  80da84:	00800804 	movi	r2,32
  80da88:	11005536 	bltu	r2,r4,80dbe0 <__hexnan+0x208>
  80da8c:	bcbff70e 	bge	r23,r18,80da6c <__hexnan+0x94>
  80da90:	8540022e 	bgeu	r16,r21,80da9c <__hexnan+0xc4>
  80da94:	008001c4 	movi	r2,7
  80da98:	11803c0e 	bge	r2,r6,80db8c <__hexnan+0x1b4>
  80da9c:	9c003536 	bltu	r19,r16,80db74 <__hexnan+0x19c>
  80daa0:	8c400044 	addi	r17,r17,1
  80daa4:	89000003 	ldbu	r4,0(r17)
  80daa8:	01800204 	movi	r6,8
  80daac:	203ff21e 	bne	r4,zero,80da78 <__hexnan+0xa0>
  80dab0:	90004d26 	beq	r18,zero,80dbe8 <__hexnan+0x210>
  80dab4:	85404336 	bltu	r16,r21,80dbc4 <__hexnan+0x1ec>
  80dab8:	9c00382e 	bgeu	r19,r16,80db9c <__hexnan+0x1c4>
  80dabc:	9807883a 	mov	r3,r19
  80dac0:	80800017 	ldw	r2,0(r16)
  80dac4:	84000104 	addi	r16,r16,4
  80dac8:	18800015 	stw	r2,0(r3)
  80dacc:	18c00104 	addi	r3,r3,4
  80dad0:	a43ffb2e 	bgeu	r20,r16,80dac0 <__hexnan+0xe8>
  80dad4:	18000015 	stw	zero,0(r3)
  80dad8:	18c00104 	addi	r3,r3,4
  80dadc:	a0fffd2e 	bgeu	r20,r3,80dad4 <__hexnan+0xfc>
  80dae0:	a0800017 	ldw	r2,0(r20)
  80dae4:	1000071e 	bne	r2,zero,80db04 <__hexnan+0x12c>
  80dae8:	9d004326 	beq	r19,r20,80dbf8 <__hexnan+0x220>
  80daec:	a007883a 	mov	r3,r20
  80daf0:	00000106 	br	80daf8 <__hexnan+0x120>
  80daf4:	98c04026 	beq	r19,r3,80dbf8 <__hexnan+0x220>
  80daf8:	18ffff04 	addi	r3,r3,-4
  80dafc:	18800017 	ldw	r2,0(r3)
  80db00:	103ffc26 	beq	r2,zero,80daf4 <__hexnan+0x11c>
  80db04:	00c00144 	movi	r3,5
  80db08:	1805883a 	mov	r2,r3
  80db0c:	dfc00b17 	ldw	ra,44(sp)
  80db10:	df000a17 	ldw	fp,40(sp)
  80db14:	ddc00917 	ldw	r23,36(sp)
  80db18:	dd800817 	ldw	r22,32(sp)
  80db1c:	dd400717 	ldw	r21,28(sp)
  80db20:	dd000617 	ldw	r20,24(sp)
  80db24:	dcc00517 	ldw	r19,20(sp)
  80db28:	dc800417 	ldw	r18,16(sp)
  80db2c:	dc400317 	ldw	r17,12(sp)
  80db30:	dc000217 	ldw	r16,8(sp)
  80db34:	dec00c04 	addi	sp,sp,48
  80db38:	f800283a 	ret
  80db3c:	31800044 	addi	r6,r6,1
  80db40:	00800204 	movi	r2,8
  80db44:	94800044 	addi	r18,r18,1
  80db48:	1180040e 	bge	r2,r6,80db5c <__hexnan+0x184>
  80db4c:	9c3fc72e 	bgeu	r19,r16,80da6c <__hexnan+0x94>
  80db50:	843fff04 	addi	r16,r16,-4
  80db54:	80000015 	stw	zero,0(r16)
  80db58:	01800044 	movi	r6,1
  80db5c:	80800017 	ldw	r2,0(r16)
  80db60:	18c003cc 	andi	r3,r3,15
  80db64:	1004913a 	slli	r2,r2,4
  80db68:	10c4b03a 	or	r2,r2,r3
  80db6c:	80800015 	stw	r2,0(r16)
  80db70:	003fbe06 	br	80da6c <__hexnan+0x94>
  80db74:	843fff04 	addi	r16,r16,-4
  80db78:	802b883a 	mov	r21,r16
  80db7c:	902f883a 	mov	r23,r18
  80db80:	000d883a 	mov	r6,zero
  80db84:	80000015 	stw	zero,0(r16)
  80db88:	003fb806 	br	80da6c <__hexnan+0x94>
  80db8c:	8009883a 	mov	r4,r16
  80db90:	a80b883a 	mov	r5,r21
  80db94:	080d98c0 	call	80d98c <L_shift>
  80db98:	003fc006 	br	80da9c <__hexnan+0xc4>
  80db9c:	e03fd01e 	bne	fp,zero,80dae0 <__hexnan+0x108>
  80dba0:	d8c00017 	ldw	r3,0(sp)
  80dba4:	00800804 	movi	r2,32
  80dba8:	10c5c83a 	sub	r2,r2,r3
  80dbac:	00ffffc4 	movi	r3,-1
  80dbb0:	1886d83a 	srl	r3,r3,r2
  80dbb4:	a0800017 	ldw	r2,0(r20)
  80dbb8:	10c4703a 	and	r2,r2,r3
  80dbbc:	a0800015 	stw	r2,0(r20)
  80dbc0:	003fc806 	br	80dae4 <__hexnan+0x10c>
  80dbc4:	008001c4 	movi	r2,7
  80dbc8:	11bfbb16 	blt	r2,r6,80dab8 <__hexnan+0xe0>
  80dbcc:	a80b883a 	mov	r5,r21
  80dbd0:	8009883a 	mov	r4,r16
  80dbd4:	080d98c0 	call	80d98c <L_shift>
  80dbd8:	9c3ff02e 	bgeu	r19,r16,80db9c <__hexnan+0x1c4>
  80dbdc:	003fb706 	br	80dabc <__hexnan+0xe4>
  80dbe0:	00800a44 	movi	r2,41
  80dbe4:	20800826 	beq	r4,r2,80dc08 <__hexnan+0x230>
  80dbe8:	00c00104 	movi	r3,4
  80dbec:	003fc606 	br	80db08 <__hexnan+0x130>
  80dbf0:	080d0bc0 	call	80d0bc <__hexdig_init>
  80dbf4:	003f8a06 	br	80da20 <__hexnan+0x48>
  80dbf8:	00800044 	movi	r2,1
  80dbfc:	00c00144 	movi	r3,5
  80dc00:	98800015 	stw	r2,0(r19)
  80dc04:	003fc006 	br	80db08 <__hexnan+0x130>
  80dc08:	903ff726 	beq	r18,zero,80dbe8 <__hexnan+0x210>
  80dc0c:	d8c00117 	ldw	r3,4(sp)
  80dc10:	88800044 	addi	r2,r17,1
  80dc14:	18800015 	stw	r2,0(r3)
  80dc18:	857fa72e 	bgeu	r16,r21,80dab8 <__hexnan+0xe0>
  80dc1c:	003fe906 	br	80dbc4 <__hexnan+0x1ec>

0080dc20 <__muldi3>:
  80dc20:	2011883a 	mov	r8,r4
  80dc24:	427fffcc 	andi	r9,r8,65535
  80dc28:	4018d43a 	srli	r12,r8,16
  80dc2c:	32bfffcc 	andi	r10,r6,65535
  80dc30:	3016d43a 	srli	r11,r6,16
  80dc34:	4a85383a 	mul	r2,r9,r10
  80dc38:	6295383a 	mul	r10,r12,r10
  80dc3c:	4ad3383a 	mul	r9,r9,r11
  80dc40:	113fffcc 	andi	r4,r2,65535
  80dc44:	1004d43a 	srli	r2,r2,16
  80dc48:	4a93883a 	add	r9,r9,r10
  80dc4c:	3807883a 	mov	r3,r7
  80dc50:	1245883a 	add	r2,r2,r9
  80dc54:	280f883a 	mov	r7,r5
  80dc58:	180b883a 	mov	r5,r3
  80dc5c:	1006943a 	slli	r3,r2,16
  80dc60:	defffd04 	addi	sp,sp,-12
  80dc64:	dc800215 	stw	r18,8(sp)
  80dc68:	1907883a 	add	r3,r3,r4
  80dc6c:	dc400115 	stw	r17,4(sp)
  80dc70:	dc000015 	stw	r16,0(sp)
  80dc74:	4165383a 	mul	r18,r8,r5
  80dc78:	31e3383a 	mul	r17,r6,r7
  80dc7c:	1012d43a 	srli	r9,r2,16
  80dc80:	62d9383a 	mul	r12,r12,r11
  80dc84:	181f883a 	mov	r15,r3
  80dc88:	1280022e 	bgeu	r2,r10,80dc94 <__muldi3+0x74>
  80dc8c:	00800074 	movhi	r2,1
  80dc90:	6099883a 	add	r12,r12,r2
  80dc94:	624d883a 	add	r6,r12,r9
  80dc98:	9187883a 	add	r3,r18,r6
  80dc9c:	88c7883a 	add	r3,r17,r3
  80dca0:	7805883a 	mov	r2,r15
  80dca4:	dc800217 	ldw	r18,8(sp)
  80dca8:	dc400117 	ldw	r17,4(sp)
  80dcac:	dc000017 	ldw	r16,0(sp)
  80dcb0:	dec00304 	addi	sp,sp,12
  80dcb4:	f800283a 	ret

0080dcb8 <__fixunsdfsi>:
  80dcb8:	defffb04 	addi	sp,sp,-20
  80dcbc:	dc400115 	stw	r17,4(sp)
  80dcc0:	dc000015 	stw	r16,0(sp)
  80dcc4:	04507834 	movhi	r17,16864
  80dcc8:	0021883a 	mov	r16,zero
  80dccc:	800d883a 	mov	r6,r16
  80dcd0:	880f883a 	mov	r7,r17
  80dcd4:	dcc00315 	stw	r19,12(sp)
  80dcd8:	dc800215 	stw	r18,8(sp)
  80dcdc:	2827883a 	mov	r19,r5
  80dce0:	2025883a 	mov	r18,r4
  80dce4:	dfc00415 	stw	ra,16(sp)
  80dce8:	080f7080 	call	80f708 <__gedf2>
  80dcec:	000d883a 	mov	r6,zero
  80dcf0:	880f883a 	mov	r7,r17
  80dcf4:	980b883a 	mov	r5,r19
  80dcf8:	9009883a 	mov	r4,r18
  80dcfc:	10000d16 	blt	r2,zero,80dd34 <__fixunsdfsi+0x7c>
  80dd00:	080ee600 	call	80ee60 <__subdf3>
  80dd04:	180b883a 	mov	r5,r3
  80dd08:	1009883a 	mov	r4,r2
  80dd0c:	080f9980 	call	80f998 <__fixdfsi>
  80dd10:	00e00034 	movhi	r3,32768
  80dd14:	10c5883a 	add	r2,r2,r3
  80dd18:	dfc00417 	ldw	ra,16(sp)
  80dd1c:	dcc00317 	ldw	r19,12(sp)
  80dd20:	dc800217 	ldw	r18,8(sp)
  80dd24:	dc400117 	ldw	r17,4(sp)
  80dd28:	dc000017 	ldw	r16,0(sp)
  80dd2c:	dec00504 	addi	sp,sp,20
  80dd30:	f800283a 	ret
  80dd34:	980b883a 	mov	r5,r19
  80dd38:	9009883a 	mov	r4,r18
  80dd3c:	080f9980 	call	80f998 <__fixdfsi>
  80dd40:	dfc00417 	ldw	ra,16(sp)
  80dd44:	dcc00317 	ldw	r19,12(sp)
  80dd48:	dc800217 	ldw	r18,8(sp)
  80dd4c:	dc400117 	ldw	r17,4(sp)
  80dd50:	dc000017 	ldw	r16,0(sp)
  80dd54:	dec00504 	addi	sp,sp,20
  80dd58:	f800283a 	ret

0080dd5c <__udivdi3>:
  80dd5c:	defff004 	addi	sp,sp,-64
  80dd60:	2005883a 	mov	r2,r4
  80dd64:	3011883a 	mov	r8,r6
  80dd68:	df000e15 	stw	fp,56(sp)
  80dd6c:	dd000a15 	stw	r20,40(sp)
  80dd70:	dc000615 	stw	r16,24(sp)
  80dd74:	dfc00f15 	stw	ra,60(sp)
  80dd78:	ddc00d15 	stw	r23,52(sp)
  80dd7c:	dd800c15 	stw	r22,48(sp)
  80dd80:	dd400b15 	stw	r21,44(sp)
  80dd84:	dcc00915 	stw	r19,36(sp)
  80dd88:	dc800815 	stw	r18,32(sp)
  80dd8c:	dc400715 	stw	r17,28(sp)
  80dd90:	4021883a 	mov	r16,r8
  80dd94:	1039883a 	mov	fp,r2
  80dd98:	2829883a 	mov	r20,r5
  80dd9c:	38003b1e 	bne	r7,zero,80de8c <__udivdi3+0x130>
  80dda0:	2a005c36 	bltu	r5,r8,80df14 <__udivdi3+0x1b8>
  80dda4:	4000a626 	beq	r8,zero,80e040 <__udivdi3+0x2e4>
  80dda8:	00bfffd4 	movui	r2,65535
  80ddac:	14009e36 	bltu	r2,r16,80e028 <__udivdi3+0x2cc>
  80ddb0:	00803fc4 	movi	r2,255
  80ddb4:	14013d36 	bltu	r2,r16,80e2ac <__udivdi3+0x550>
  80ddb8:	000b883a 	mov	r5,zero
  80ddbc:	0005883a 	mov	r2,zero
  80ddc0:	8084d83a 	srl	r2,r16,r2
  80ddc4:	01002074 	movhi	r4,129
  80ddc8:	2114e004 	addi	r4,r4,21376
  80ddcc:	01800804 	movi	r6,32
  80ddd0:	1105883a 	add	r2,r2,r4
  80ddd4:	10c00003 	ldbu	r3,0(r2)
  80ddd8:	28c7883a 	add	r3,r5,r3
  80dddc:	30edc83a 	sub	r22,r6,r3
  80dde0:	b000ee1e 	bne	r22,zero,80e19c <__udivdi3+0x440>
  80dde4:	802ad43a 	srli	r21,r16,16
  80dde8:	00800044 	movi	r2,1
  80ddec:	a423c83a 	sub	r17,r20,r16
  80ddf0:	85ffffcc 	andi	r23,r16,65535
  80ddf4:	d8800315 	stw	r2,12(sp)
  80ddf8:	8809883a 	mov	r4,r17
  80ddfc:	a80b883a 	mov	r5,r21
  80de00:	080fdb40 	call	80fdb4 <__udivsi3>
  80de04:	8809883a 	mov	r4,r17
  80de08:	a80b883a 	mov	r5,r21
  80de0c:	102d883a 	mov	r22,r2
  80de10:	080fdbc0 	call	80fdbc <__umodsi3>
  80de14:	1004943a 	slli	r2,r2,16
  80de18:	e006d43a 	srli	r3,fp,16
  80de1c:	bda3383a 	mul	r17,r23,r22
  80de20:	10c4b03a 	or	r2,r2,r3
  80de24:	1440042e 	bgeu	r2,r17,80de38 <__udivdi3+0xdc>
  80de28:	1405883a 	add	r2,r2,r16
  80de2c:	b5bfffc4 	addi	r22,r22,-1
  80de30:	14000136 	bltu	r2,r16,80de38 <__udivdi3+0xdc>
  80de34:	14413d36 	bltu	r2,r17,80e32c <__udivdi3+0x5d0>
  80de38:	1463c83a 	sub	r17,r2,r17
  80de3c:	8809883a 	mov	r4,r17
  80de40:	a80b883a 	mov	r5,r21
  80de44:	080fdb40 	call	80fdb4 <__udivsi3>
  80de48:	8809883a 	mov	r4,r17
  80de4c:	a80b883a 	mov	r5,r21
  80de50:	1029883a 	mov	r20,r2
  80de54:	080fdbc0 	call	80fdbc <__umodsi3>
  80de58:	1004943a 	slli	r2,r2,16
  80de5c:	bd09383a 	mul	r4,r23,r20
  80de60:	e0ffffcc 	andi	r3,fp,65535
  80de64:	10c4b03a 	or	r2,r2,r3
  80de68:	1100042e 	bgeu	r2,r4,80de7c <__udivdi3+0x120>
  80de6c:	8085883a 	add	r2,r16,r2
  80de70:	a53fffc4 	addi	r20,r20,-1
  80de74:	14000136 	bltu	r2,r16,80de7c <__udivdi3+0x120>
  80de78:	11012036 	bltu	r2,r4,80e2fc <__udivdi3+0x5a0>
  80de7c:	b004943a 	slli	r2,r22,16
  80de80:	d9000317 	ldw	r4,12(sp)
  80de84:	a084b03a 	or	r2,r20,r2
  80de88:	00001506 	br	80dee0 <__udivdi3+0x184>
  80de8c:	380d883a 	mov	r6,r7
  80de90:	29c06236 	bltu	r5,r7,80e01c <__udivdi3+0x2c0>
  80de94:	00bfffd4 	movui	r2,65535
  80de98:	11c05a36 	bltu	r2,r7,80e004 <__udivdi3+0x2a8>
  80de9c:	00803fc4 	movi	r2,255
  80dea0:	11c0fc36 	bltu	r2,r7,80e294 <__udivdi3+0x538>
  80dea4:	000b883a 	mov	r5,zero
  80dea8:	0005883a 	mov	r2,zero
  80deac:	3084d83a 	srl	r2,r6,r2
  80deb0:	01002074 	movhi	r4,129
  80deb4:	2114e004 	addi	r4,r4,21376
  80deb8:	01c00804 	movi	r7,32
  80debc:	1105883a 	add	r2,r2,r4
  80dec0:	10c00003 	ldbu	r3,0(r2)
  80dec4:	28c7883a 	add	r3,r5,r3
  80dec8:	38efc83a 	sub	r23,r7,r3
  80decc:	b800691e 	bne	r23,zero,80e074 <__udivdi3+0x318>
  80ded0:	35000136 	bltu	r6,r20,80ded8 <__udivdi3+0x17c>
  80ded4:	e4005136 	bltu	fp,r16,80e01c <__udivdi3+0x2c0>
  80ded8:	00800044 	movi	r2,1
  80dedc:	0009883a 	mov	r4,zero
  80dee0:	2007883a 	mov	r3,r4
  80dee4:	dfc00f17 	ldw	ra,60(sp)
  80dee8:	df000e17 	ldw	fp,56(sp)
  80deec:	ddc00d17 	ldw	r23,52(sp)
  80def0:	dd800c17 	ldw	r22,48(sp)
  80def4:	dd400b17 	ldw	r21,44(sp)
  80def8:	dd000a17 	ldw	r20,40(sp)
  80defc:	dcc00917 	ldw	r19,36(sp)
  80df00:	dc800817 	ldw	r18,32(sp)
  80df04:	dc400717 	ldw	r17,28(sp)
  80df08:	dc000617 	ldw	r16,24(sp)
  80df0c:	dec01004 	addi	sp,sp,64
  80df10:	f800283a 	ret
  80df14:	00bfffd4 	movui	r2,65535
  80df18:	12005036 	bltu	r2,r8,80e05c <__udivdi3+0x300>
  80df1c:	00803fc4 	movi	r2,255
  80df20:	1200e836 	bltu	r2,r8,80e2c4 <__udivdi3+0x568>
  80df24:	000b883a 	mov	r5,zero
  80df28:	0005883a 	mov	r2,zero
  80df2c:	8084d83a 	srl	r2,r16,r2
  80df30:	01002074 	movhi	r4,129
  80df34:	2114e004 	addi	r4,r4,21376
  80df38:	01800804 	movi	r6,32
  80df3c:	1105883a 	add	r2,r2,r4
  80df40:	10c00003 	ldbu	r3,0(r2)
  80df44:	28c7883a 	add	r3,r5,r3
  80df48:	30cbc83a 	sub	r5,r6,r3
  80df4c:	28000626 	beq	r5,zero,80df68 <__udivdi3+0x20c>
  80df50:	3145c83a 	sub	r2,r6,r5
  80df54:	e084d83a 	srl	r2,fp,r2
  80df58:	a146983a 	sll	r3,r20,r5
  80df5c:	e178983a 	sll	fp,fp,r5
  80df60:	8160983a 	sll	r16,r16,r5
  80df64:	18a8b03a 	or	r20,r3,r2
  80df68:	802ad43a 	srli	r21,r16,16
  80df6c:	a009883a 	mov	r4,r20
  80df70:	85ffffcc 	andi	r23,r16,65535
  80df74:	a80b883a 	mov	r5,r21
  80df78:	080fdb40 	call	80fdb4 <__udivsi3>
  80df7c:	a009883a 	mov	r4,r20
  80df80:	a80b883a 	mov	r5,r21
  80df84:	102d883a 	mov	r22,r2
  80df88:	080fdbc0 	call	80fdbc <__umodsi3>
  80df8c:	1004943a 	slli	r2,r2,16
  80df90:	e006d43a 	srli	r3,fp,16
  80df94:	bda3383a 	mul	r17,r23,r22
  80df98:	10c4b03a 	or	r2,r2,r3
  80df9c:	1440042e 	bgeu	r2,r17,80dfb0 <__udivdi3+0x254>
  80dfa0:	1405883a 	add	r2,r2,r16
  80dfa4:	b5bfffc4 	addi	r22,r22,-1
  80dfa8:	14000136 	bltu	r2,r16,80dfb0 <__udivdi3+0x254>
  80dfac:	1440d536 	bltu	r2,r17,80e304 <__udivdi3+0x5a8>
  80dfb0:	1463c83a 	sub	r17,r2,r17
  80dfb4:	8809883a 	mov	r4,r17
  80dfb8:	a80b883a 	mov	r5,r21
  80dfbc:	080fdb40 	call	80fdb4 <__udivsi3>
  80dfc0:	8809883a 	mov	r4,r17
  80dfc4:	a80b883a 	mov	r5,r21
  80dfc8:	1029883a 	mov	r20,r2
  80dfcc:	080fdbc0 	call	80fdbc <__umodsi3>
  80dfd0:	1004943a 	slli	r2,r2,16
  80dfd4:	bd09383a 	mul	r4,r23,r20
  80dfd8:	e0ffffcc 	andi	r3,fp,65535
  80dfdc:	10c4b03a 	or	r2,r2,r3
  80dfe0:	1100042e 	bgeu	r2,r4,80dff4 <__udivdi3+0x298>
  80dfe4:	8085883a 	add	r2,r16,r2
  80dfe8:	a53fffc4 	addi	r20,r20,-1
  80dfec:	14000136 	bltu	r2,r16,80dff4 <__udivdi3+0x298>
  80dff0:	1100c736 	bltu	r2,r4,80e310 <__udivdi3+0x5b4>
  80dff4:	b004943a 	slli	r2,r22,16
  80dff8:	0009883a 	mov	r4,zero
  80dffc:	a084b03a 	or	r2,r20,r2
  80e000:	003fb706 	br	80dee0 <__udivdi3+0x184>
  80e004:	00804034 	movhi	r2,256
  80e008:	10bfffc4 	addi	r2,r2,-1
  80e00c:	11c0a436 	bltu	r2,r7,80e2a0 <__udivdi3+0x544>
  80e010:	01400404 	movi	r5,16
  80e014:	2805883a 	mov	r2,r5
  80e018:	003fa406 	br	80deac <__udivdi3+0x150>
  80e01c:	0005883a 	mov	r2,zero
  80e020:	0009883a 	mov	r4,zero
  80e024:	003fae06 	br	80dee0 <__udivdi3+0x184>
  80e028:	00804034 	movhi	r2,256
  80e02c:	10bfffc4 	addi	r2,r2,-1
  80e030:	1400a136 	bltu	r2,r16,80e2b8 <__udivdi3+0x55c>
  80e034:	01400404 	movi	r5,16
  80e038:	2805883a 	mov	r2,r5
  80e03c:	003f6006 	br	80ddc0 <__udivdi3+0x64>
  80e040:	01000044 	movi	r4,1
  80e044:	000b883a 	mov	r5,zero
  80e048:	080fdb40 	call	80fdb4 <__udivsi3>
  80e04c:	1021883a 	mov	r16,r2
  80e050:	00bfffd4 	movui	r2,65535
  80e054:	143ff436 	bltu	r2,r16,80e028 <__udivdi3+0x2cc>
  80e058:	003f5506 	br	80ddb0 <__udivdi3+0x54>
  80e05c:	00804034 	movhi	r2,256
  80e060:	10bfffc4 	addi	r2,r2,-1
  80e064:	12009a36 	bltu	r2,r8,80e2d0 <__udivdi3+0x574>
  80e068:	01400404 	movi	r5,16
  80e06c:	2805883a 	mov	r2,r5
  80e070:	003fae06 	br	80df2c <__udivdi3+0x1d0>
  80e074:	3dc5c83a 	sub	r2,r7,r23
  80e078:	35c8983a 	sll	r4,r6,r23
  80e07c:	8086d83a 	srl	r3,r16,r2
  80e080:	a0a2d83a 	srl	r17,r20,r2
  80e084:	e084d83a 	srl	r2,fp,r2
  80e088:	20eab03a 	or	r21,r4,r3
  80e08c:	a82cd43a 	srli	r22,r21,16
  80e090:	a5c6983a 	sll	r3,r20,r23
  80e094:	8809883a 	mov	r4,r17
  80e098:	b00b883a 	mov	r5,r22
  80e09c:	1886b03a 	or	r3,r3,r2
  80e0a0:	d8c00215 	stw	r3,8(sp)
  80e0a4:	080fdb40 	call	80fdb4 <__udivsi3>
  80e0a8:	8809883a 	mov	r4,r17
  80e0ac:	b00b883a 	mov	r5,r22
  80e0b0:	1029883a 	mov	r20,r2
  80e0b4:	080fdbc0 	call	80fdbc <__umodsi3>
  80e0b8:	a8ffffcc 	andi	r3,r21,65535
  80e0bc:	d8c00515 	stw	r3,20(sp)
  80e0c0:	d9000217 	ldw	r4,8(sp)
  80e0c4:	d9400517 	ldw	r5,20(sp)
  80e0c8:	1004943a 	slli	r2,r2,16
  80e0cc:	2006d43a 	srli	r3,r4,16
  80e0d0:	85e0983a 	sll	r16,r16,r23
  80e0d4:	2d23383a 	mul	r17,r5,r20
  80e0d8:	10c4b03a 	or	r2,r2,r3
  80e0dc:	dc000015 	stw	r16,0(sp)
  80e0e0:	1440032e 	bgeu	r2,r17,80e0f0 <__udivdi3+0x394>
  80e0e4:	1545883a 	add	r2,r2,r21
  80e0e8:	a53fffc4 	addi	r20,r20,-1
  80e0ec:	15407f2e 	bgeu	r2,r21,80e2ec <__udivdi3+0x590>
  80e0f0:	1463c83a 	sub	r17,r2,r17
  80e0f4:	8809883a 	mov	r4,r17
  80e0f8:	b00b883a 	mov	r5,r22
  80e0fc:	080fdb40 	call	80fdb4 <__udivsi3>
  80e100:	8809883a 	mov	r4,r17
  80e104:	b00b883a 	mov	r5,r22
  80e108:	1021883a 	mov	r16,r2
  80e10c:	080fdbc0 	call	80fdbc <__umodsi3>
  80e110:	d8c00517 	ldw	r3,20(sp)
  80e114:	d9000217 	ldw	r4,8(sp)
  80e118:	1004943a 	slli	r2,r2,16
  80e11c:	1c0f383a 	mul	r7,r3,r16
  80e120:	20ffffcc 	andi	r3,r4,65535
  80e124:	10e2b03a 	or	r17,r2,r3
  80e128:	89c0032e 	bgeu	r17,r7,80e138 <__udivdi3+0x3dc>
  80e12c:	8d63883a 	add	r17,r17,r21
  80e130:	843fffc4 	addi	r16,r16,-1
  80e134:	8d40692e 	bgeu	r17,r21,80e2dc <__udivdi3+0x580>
  80e138:	a008943a 	slli	r4,r20,16
  80e13c:	d9400017 	ldw	r5,0(sp)
  80e140:	89e3c83a 	sub	r17,r17,r7
  80e144:	8110b03a 	or	r8,r16,r4
  80e148:	280cd43a 	srli	r6,r5,16
  80e14c:	28ffffcc 	andi	r3,r5,65535
  80e150:	40bfffcc 	andi	r2,r8,65535
  80e154:	400ad43a 	srli	r5,r8,16
  80e158:	10d3383a 	mul	r9,r2,r3
  80e15c:	1185383a 	mul	r2,r2,r6
  80e160:	28c7383a 	mul	r3,r5,r3
  80e164:	4808d43a 	srli	r4,r9,16
  80e168:	298b383a 	mul	r5,r5,r6
  80e16c:	10c5883a 	add	r2,r2,r3
  80e170:	2089883a 	add	r4,r4,r2
  80e174:	20c0022e 	bgeu	r4,r3,80e180 <__udivdi3+0x424>
  80e178:	00800074 	movhi	r2,1
  80e17c:	288b883a 	add	r5,r5,r2
  80e180:	2004d43a 	srli	r2,r4,16
  80e184:	288b883a 	add	r5,r5,r2
  80e188:	89403f36 	bltu	r17,r5,80e288 <__udivdi3+0x52c>
  80e18c:	89403926 	beq	r17,r5,80e274 <__udivdi3+0x518>
  80e190:	4005883a 	mov	r2,r8
  80e194:	0009883a 	mov	r4,zero
  80e198:	003f5106 	br	80dee0 <__udivdi3+0x184>
  80e19c:	85a0983a 	sll	r16,r16,r22
  80e1a0:	3585c83a 	sub	r2,r6,r22
  80e1a4:	a0a2d83a 	srl	r17,r20,r2
  80e1a8:	802ad43a 	srli	r21,r16,16
  80e1ac:	e084d83a 	srl	r2,fp,r2
  80e1b0:	a586983a 	sll	r3,r20,r22
  80e1b4:	8809883a 	mov	r4,r17
  80e1b8:	a80b883a 	mov	r5,r21
  80e1bc:	1886b03a 	or	r3,r3,r2
  80e1c0:	d8c00115 	stw	r3,4(sp)
  80e1c4:	080fdb40 	call	80fdb4 <__udivsi3>
  80e1c8:	8809883a 	mov	r4,r17
  80e1cc:	a80b883a 	mov	r5,r21
  80e1d0:	d8800415 	stw	r2,16(sp)
  80e1d4:	080fdbc0 	call	80fdbc <__umodsi3>
  80e1d8:	d9000117 	ldw	r4,4(sp)
  80e1dc:	d9400417 	ldw	r5,16(sp)
  80e1e0:	1004943a 	slli	r2,r2,16
  80e1e4:	85ffffcc 	andi	r23,r16,65535
  80e1e8:	2006d43a 	srli	r3,r4,16
  80e1ec:	b963383a 	mul	r17,r23,r5
  80e1f0:	10c4b03a 	or	r2,r2,r3
  80e1f4:	1440042e 	bgeu	r2,r17,80e208 <__udivdi3+0x4ac>
  80e1f8:	297fffc4 	addi	r5,r5,-1
  80e1fc:	1405883a 	add	r2,r2,r16
  80e200:	d9400415 	stw	r5,16(sp)
  80e204:	1400442e 	bgeu	r2,r16,80e318 <__udivdi3+0x5bc>
  80e208:	1463c83a 	sub	r17,r2,r17
  80e20c:	8809883a 	mov	r4,r17
  80e210:	a80b883a 	mov	r5,r21
  80e214:	080fdb40 	call	80fdb4 <__udivsi3>
  80e218:	8809883a 	mov	r4,r17
  80e21c:	a80b883a 	mov	r5,r21
  80e220:	1029883a 	mov	r20,r2
  80e224:	080fdbc0 	call	80fdbc <__umodsi3>
  80e228:	d9400117 	ldw	r5,4(sp)
  80e22c:	1004943a 	slli	r2,r2,16
  80e230:	bd09383a 	mul	r4,r23,r20
  80e234:	28ffffcc 	andi	r3,r5,65535
  80e238:	10c6b03a 	or	r3,r2,r3
  80e23c:	1900062e 	bgeu	r3,r4,80e258 <__udivdi3+0x4fc>
  80e240:	1c07883a 	add	r3,r3,r16
  80e244:	a53fffc4 	addi	r20,r20,-1
  80e248:	1c000336 	bltu	r3,r16,80e258 <__udivdi3+0x4fc>
  80e24c:	1900022e 	bgeu	r3,r4,80e258 <__udivdi3+0x4fc>
  80e250:	a53fffc4 	addi	r20,r20,-1
  80e254:	1c07883a 	add	r3,r3,r16
  80e258:	d9400417 	ldw	r5,16(sp)
  80e25c:	e5b8983a 	sll	fp,fp,r22
  80e260:	1923c83a 	sub	r17,r3,r4
  80e264:	2804943a 	slli	r2,r5,16
  80e268:	a0a8b03a 	or	r20,r20,r2
  80e26c:	dd000315 	stw	r20,12(sp)
  80e270:	003ee106 	br	80ddf8 <__udivdi3+0x9c>
  80e274:	2004943a 	slli	r2,r4,16
  80e278:	e5c8983a 	sll	r4,fp,r23
  80e27c:	48ffffcc 	andi	r3,r9,65535
  80e280:	10c5883a 	add	r2,r2,r3
  80e284:	20bfc22e 	bgeu	r4,r2,80e190 <__udivdi3+0x434>
  80e288:	40bfffc4 	addi	r2,r8,-1
  80e28c:	0009883a 	mov	r4,zero
  80e290:	003f1306 	br	80dee0 <__udivdi3+0x184>
  80e294:	01400204 	movi	r5,8
  80e298:	2805883a 	mov	r2,r5
  80e29c:	003f0306 	br	80deac <__udivdi3+0x150>
  80e2a0:	01400604 	movi	r5,24
  80e2a4:	2805883a 	mov	r2,r5
  80e2a8:	003f0006 	br	80deac <__udivdi3+0x150>
  80e2ac:	01400204 	movi	r5,8
  80e2b0:	2805883a 	mov	r2,r5
  80e2b4:	003ec206 	br	80ddc0 <__udivdi3+0x64>
  80e2b8:	01400604 	movi	r5,24
  80e2bc:	2805883a 	mov	r2,r5
  80e2c0:	003ebf06 	br	80ddc0 <__udivdi3+0x64>
  80e2c4:	01400204 	movi	r5,8
  80e2c8:	2805883a 	mov	r2,r5
  80e2cc:	003f1706 	br	80df2c <__udivdi3+0x1d0>
  80e2d0:	01400604 	movi	r5,24
  80e2d4:	2805883a 	mov	r2,r5
  80e2d8:	003f1406 	br	80df2c <__udivdi3+0x1d0>
  80e2dc:	89ff962e 	bgeu	r17,r7,80e138 <__udivdi3+0x3dc>
  80e2e0:	8d63883a 	add	r17,r17,r21
  80e2e4:	843fffc4 	addi	r16,r16,-1
  80e2e8:	003f9306 	br	80e138 <__udivdi3+0x3dc>
  80e2ec:	147f802e 	bgeu	r2,r17,80e0f0 <__udivdi3+0x394>
  80e2f0:	a53fffc4 	addi	r20,r20,-1
  80e2f4:	1545883a 	add	r2,r2,r21
  80e2f8:	003f7d06 	br	80e0f0 <__udivdi3+0x394>
  80e2fc:	a53fffc4 	addi	r20,r20,-1
  80e300:	003ede06 	br	80de7c <__udivdi3+0x120>
  80e304:	b5bfffc4 	addi	r22,r22,-1
  80e308:	1405883a 	add	r2,r2,r16
  80e30c:	003f2806 	br	80dfb0 <__udivdi3+0x254>
  80e310:	a53fffc4 	addi	r20,r20,-1
  80e314:	003f3706 	br	80dff4 <__udivdi3+0x298>
  80e318:	147fbb2e 	bgeu	r2,r17,80e208 <__udivdi3+0x4ac>
  80e31c:	297fffc4 	addi	r5,r5,-1
  80e320:	1405883a 	add	r2,r2,r16
  80e324:	d9400415 	stw	r5,16(sp)
  80e328:	003fb706 	br	80e208 <__udivdi3+0x4ac>
  80e32c:	b5bfffc4 	addi	r22,r22,-1
  80e330:	1405883a 	add	r2,r2,r16
  80e334:	003ec006 	br	80de38 <__udivdi3+0xdc>

0080e338 <__umoddi3>:
  80e338:	defff104 	addi	sp,sp,-60
  80e33c:	dd800b15 	stw	r22,44(sp)
  80e340:	dd000915 	stw	r20,36(sp)
  80e344:	dc000515 	stw	r16,20(sp)
  80e348:	dfc00e15 	stw	ra,56(sp)
  80e34c:	df000d15 	stw	fp,52(sp)
  80e350:	ddc00c15 	stw	r23,48(sp)
  80e354:	dd400a15 	stw	r21,40(sp)
  80e358:	dcc00815 	stw	r19,32(sp)
  80e35c:	dc800715 	stw	r18,28(sp)
  80e360:	dc400615 	stw	r17,24(sp)
  80e364:	3021883a 	mov	r16,r6
  80e368:	202d883a 	mov	r22,r4
  80e36c:	2829883a 	mov	r20,r5
  80e370:	38002b1e 	bne	r7,zero,80e420 <__umoddi3+0xe8>
  80e374:	29805036 	bltu	r5,r6,80e4b8 <__umoddi3+0x180>
  80e378:	30008a26 	beq	r6,zero,80e5a4 <__umoddi3+0x26c>
  80e37c:	00bfffd4 	movui	r2,65535
  80e380:	14008236 	bltu	r2,r16,80e58c <__umoddi3+0x254>
  80e384:	00803fc4 	movi	r2,255
  80e388:	14013636 	bltu	r2,r16,80e864 <__umoddi3+0x52c>
  80e38c:	000b883a 	mov	r5,zero
  80e390:	0005883a 	mov	r2,zero
  80e394:	8084d83a 	srl	r2,r16,r2
  80e398:	01002074 	movhi	r4,129
  80e39c:	2114e004 	addi	r4,r4,21376
  80e3a0:	01800804 	movi	r6,32
  80e3a4:	1105883a 	add	r2,r2,r4
  80e3a8:	10c00003 	ldbu	r3,0(r2)
  80e3ac:	28c7883a 	add	r3,r5,r3
  80e3b0:	30efc83a 	sub	r23,r6,r3
  80e3b4:	b800941e 	bne	r23,zero,80e608 <__umoddi3+0x2d0>
  80e3b8:	802ad43a 	srli	r21,r16,16
  80e3bc:	a423c83a 	sub	r17,r20,r16
  80e3c0:	0039883a 	mov	fp,zero
  80e3c4:	853fffcc 	andi	r20,r16,65535
  80e3c8:	8809883a 	mov	r4,r17
  80e3cc:	a80b883a 	mov	r5,r21
  80e3d0:	080fdb40 	call	80fdb4 <__udivsi3>
  80e3d4:	8809883a 	mov	r4,r17
  80e3d8:	a80b883a 	mov	r5,r21
  80e3dc:	a0a3383a 	mul	r17,r20,r2
  80e3e0:	080fdbc0 	call	80fdbc <__umodsi3>
  80e3e4:	1004943a 	slli	r2,r2,16
  80e3e8:	b006d43a 	srli	r3,r22,16
  80e3ec:	10c4b03a 	or	r2,r2,r3
  80e3f0:	1440032e 	bgeu	r2,r17,80e400 <__umoddi3+0xc8>
  80e3f4:	1405883a 	add	r2,r2,r16
  80e3f8:	14000136 	bltu	r2,r16,80e400 <__umoddi3+0xc8>
  80e3fc:	14413536 	bltu	r2,r17,80e8d4 <__umoddi3+0x59c>
  80e400:	1463c83a 	sub	r17,r2,r17
  80e404:	8809883a 	mov	r4,r17
  80e408:	a80b883a 	mov	r5,r21
  80e40c:	080fdb40 	call	80fdb4 <__udivsi3>
  80e410:	8809883a 	mov	r4,r17
  80e414:	a0a3383a 	mul	r17,r20,r2
  80e418:	a80b883a 	mov	r5,r21
  80e41c:	00004d06 	br	80e554 <__umoddi3+0x21c>
  80e420:	380d883a 	mov	r6,r7
  80e424:	29c0102e 	bgeu	r5,r7,80e468 <__umoddi3+0x130>
  80e428:	2011883a 	mov	r8,r4
  80e42c:	2813883a 	mov	r9,r5
  80e430:	4005883a 	mov	r2,r8
  80e434:	4807883a 	mov	r3,r9
  80e438:	dfc00e17 	ldw	ra,56(sp)
  80e43c:	df000d17 	ldw	fp,52(sp)
  80e440:	ddc00c17 	ldw	r23,48(sp)
  80e444:	dd800b17 	ldw	r22,44(sp)
  80e448:	dd400a17 	ldw	r21,40(sp)
  80e44c:	dd000917 	ldw	r20,36(sp)
  80e450:	dcc00817 	ldw	r19,32(sp)
  80e454:	dc800717 	ldw	r18,28(sp)
  80e458:	dc400617 	ldw	r17,24(sp)
  80e45c:	dc000517 	ldw	r16,20(sp)
  80e460:	dec00f04 	addi	sp,sp,60
  80e464:	f800283a 	ret
  80e468:	00bfffd4 	movui	r2,65535
  80e46c:	11c05a36 	bltu	r2,r7,80e5d8 <__umoddi3+0x2a0>
  80e470:	00803fc4 	movi	r2,255
  80e474:	11c0fe36 	bltu	r2,r7,80e870 <__umoddi3+0x538>
  80e478:	000b883a 	mov	r5,zero
  80e47c:	0005883a 	mov	r2,zero
  80e480:	3084d83a 	srl	r2,r6,r2
  80e484:	01002074 	movhi	r4,129
  80e488:	2114e004 	addi	r4,r4,21376
  80e48c:	01c00804 	movi	r7,32
  80e490:	1105883a 	add	r2,r2,r4
  80e494:	10c00003 	ldbu	r3,0(r2)
  80e498:	28c7883a 	add	r3,r5,r3
  80e49c:	38ebc83a 	sub	r21,r7,r3
  80e4a0:	a800851e 	bne	r21,zero,80e6b8 <__umoddi3+0x380>
  80e4a4:	35005236 	bltu	r6,r20,80e5f0 <__umoddi3+0x2b8>
  80e4a8:	b400512e 	bgeu	r22,r16,80e5f0 <__umoddi3+0x2b8>
  80e4ac:	b011883a 	mov	r8,r22
  80e4b0:	a013883a 	mov	r9,r20
  80e4b4:	003fde06 	br	80e430 <__umoddi3+0xf8>
  80e4b8:	00bfffd4 	movui	r2,65535
  80e4bc:	11804036 	bltu	r2,r6,80e5c0 <__umoddi3+0x288>
  80e4c0:	00803fc4 	movi	r2,255
  80e4c4:	1180ed36 	bltu	r2,r6,80e87c <__umoddi3+0x544>
  80e4c8:	000b883a 	mov	r5,zero
  80e4cc:	0005883a 	mov	r2,zero
  80e4d0:	8084d83a 	srl	r2,r16,r2
  80e4d4:	01002074 	movhi	r4,129
  80e4d8:	2114e004 	addi	r4,r4,21376
  80e4dc:	01800804 	movi	r6,32
  80e4e0:	1105883a 	add	r2,r2,r4
  80e4e4:	10c00003 	ldbu	r3,0(r2)
  80e4e8:	28c7883a 	add	r3,r5,r3
  80e4ec:	30c7c83a 	sub	r3,r6,r3
  80e4f0:	1800bf1e 	bne	r3,zero,80e7f0 <__umoddi3+0x4b8>
  80e4f4:	0039883a 	mov	fp,zero
  80e4f8:	802ad43a 	srli	r21,r16,16
  80e4fc:	a009883a 	mov	r4,r20
  80e500:	85ffffcc 	andi	r23,r16,65535
  80e504:	a80b883a 	mov	r5,r21
  80e508:	080fdb40 	call	80fdb4 <__udivsi3>
  80e50c:	a009883a 	mov	r4,r20
  80e510:	a80b883a 	mov	r5,r21
  80e514:	b8a3383a 	mul	r17,r23,r2
  80e518:	080fdbc0 	call	80fdbc <__umodsi3>
  80e51c:	1004943a 	slli	r2,r2,16
  80e520:	b006d43a 	srli	r3,r22,16
  80e524:	10c4b03a 	or	r2,r2,r3
  80e528:	1440032e 	bgeu	r2,r17,80e538 <__umoddi3+0x200>
  80e52c:	1405883a 	add	r2,r2,r16
  80e530:	14000136 	bltu	r2,r16,80e538 <__umoddi3+0x200>
  80e534:	1440e536 	bltu	r2,r17,80e8cc <__umoddi3+0x594>
  80e538:	1463c83a 	sub	r17,r2,r17
  80e53c:	8809883a 	mov	r4,r17
  80e540:	a80b883a 	mov	r5,r21
  80e544:	080fdb40 	call	80fdb4 <__udivsi3>
  80e548:	8809883a 	mov	r4,r17
  80e54c:	b8a3383a 	mul	r17,r23,r2
  80e550:	a80b883a 	mov	r5,r21
  80e554:	080fdbc0 	call	80fdbc <__umodsi3>
  80e558:	1004943a 	slli	r2,r2,16
  80e55c:	b0ffffcc 	andi	r3,r22,65535
  80e560:	10c4b03a 	or	r2,r2,r3
  80e564:	1440042e 	bgeu	r2,r17,80e578 <__umoddi3+0x240>
  80e568:	1405883a 	add	r2,r2,r16
  80e56c:	14000236 	bltu	r2,r16,80e578 <__umoddi3+0x240>
  80e570:	1440012e 	bgeu	r2,r17,80e578 <__umoddi3+0x240>
  80e574:	1405883a 	add	r2,r2,r16
  80e578:	1445c83a 	sub	r2,r2,r17
  80e57c:	1724d83a 	srl	r18,r2,fp
  80e580:	0013883a 	mov	r9,zero
  80e584:	9011883a 	mov	r8,r18
  80e588:	003fa906 	br	80e430 <__umoddi3+0xf8>
  80e58c:	00804034 	movhi	r2,256
  80e590:	10bfffc4 	addi	r2,r2,-1
  80e594:	1400b036 	bltu	r2,r16,80e858 <__umoddi3+0x520>
  80e598:	01400404 	movi	r5,16
  80e59c:	2805883a 	mov	r2,r5
  80e5a0:	003f7c06 	br	80e394 <__umoddi3+0x5c>
  80e5a4:	01000044 	movi	r4,1
  80e5a8:	000b883a 	mov	r5,zero
  80e5ac:	080fdb40 	call	80fdb4 <__udivsi3>
  80e5b0:	1021883a 	mov	r16,r2
  80e5b4:	00bfffd4 	movui	r2,65535
  80e5b8:	143ff436 	bltu	r2,r16,80e58c <__umoddi3+0x254>
  80e5bc:	003f7106 	br	80e384 <__umoddi3+0x4c>
  80e5c0:	00804034 	movhi	r2,256
  80e5c4:	10bfffc4 	addi	r2,r2,-1
  80e5c8:	1180af36 	bltu	r2,r6,80e888 <__umoddi3+0x550>
  80e5cc:	01400404 	movi	r5,16
  80e5d0:	2805883a 	mov	r2,r5
  80e5d4:	003fbe06 	br	80e4d0 <__umoddi3+0x198>
  80e5d8:	00804034 	movhi	r2,256
  80e5dc:	10bfffc4 	addi	r2,r2,-1
  80e5e0:	11c0ac36 	bltu	r2,r7,80e894 <__umoddi3+0x55c>
  80e5e4:	01400404 	movi	r5,16
  80e5e8:	2805883a 	mov	r2,r5
  80e5ec:	003fa406 	br	80e480 <__umoddi3+0x148>
  80e5f0:	b409c83a 	sub	r4,r22,r16
  80e5f4:	b105803a 	cmpltu	r2,r22,r4
  80e5f8:	a187c83a 	sub	r3,r20,r6
  80e5fc:	18a9c83a 	sub	r20,r3,r2
  80e600:	202d883a 	mov	r22,r4
  80e604:	003fa906 	br	80e4ac <__umoddi3+0x174>
  80e608:	85e0983a 	sll	r16,r16,r23
  80e60c:	35c5c83a 	sub	r2,r6,r23
  80e610:	a0a2d83a 	srl	r17,r20,r2
  80e614:	802ad43a 	srli	r21,r16,16
  80e618:	b084d83a 	srl	r2,r22,r2
  80e61c:	a5c6983a 	sll	r3,r20,r23
  80e620:	8809883a 	mov	r4,r17
  80e624:	a80b883a 	mov	r5,r21
  80e628:	1886b03a 	or	r3,r3,r2
  80e62c:	d8c00115 	stw	r3,4(sp)
  80e630:	853fffcc 	andi	r20,r16,65535
  80e634:	080fdb40 	call	80fdb4 <__udivsi3>
  80e638:	8809883a 	mov	r4,r17
  80e63c:	a80b883a 	mov	r5,r21
  80e640:	a0a3383a 	mul	r17,r20,r2
  80e644:	080fdbc0 	call	80fdbc <__umodsi3>
  80e648:	d9000117 	ldw	r4,4(sp)
  80e64c:	1004943a 	slli	r2,r2,16
  80e650:	b839883a 	mov	fp,r23
  80e654:	2006d43a 	srli	r3,r4,16
  80e658:	10c4b03a 	or	r2,r2,r3
  80e65c:	1440022e 	bgeu	r2,r17,80e668 <__umoddi3+0x330>
  80e660:	1405883a 	add	r2,r2,r16
  80e664:	1400962e 	bgeu	r2,r16,80e8c0 <__umoddi3+0x588>
  80e668:	1463c83a 	sub	r17,r2,r17
  80e66c:	8809883a 	mov	r4,r17
  80e670:	a80b883a 	mov	r5,r21
  80e674:	080fdb40 	call	80fdb4 <__udivsi3>
  80e678:	8809883a 	mov	r4,r17
  80e67c:	a80b883a 	mov	r5,r21
  80e680:	a0a3383a 	mul	r17,r20,r2
  80e684:	080fdbc0 	call	80fdbc <__umodsi3>
  80e688:	d9400117 	ldw	r5,4(sp)
  80e68c:	1004943a 	slli	r2,r2,16
  80e690:	28ffffcc 	andi	r3,r5,65535
  80e694:	10c4b03a 	or	r2,r2,r3
  80e698:	1440042e 	bgeu	r2,r17,80e6ac <__umoddi3+0x374>
  80e69c:	1405883a 	add	r2,r2,r16
  80e6a0:	14000236 	bltu	r2,r16,80e6ac <__umoddi3+0x374>
  80e6a4:	1440012e 	bgeu	r2,r17,80e6ac <__umoddi3+0x374>
  80e6a8:	1405883a 	add	r2,r2,r16
  80e6ac:	b5ec983a 	sll	r22,r22,r23
  80e6b0:	1463c83a 	sub	r17,r2,r17
  80e6b4:	003f4406 	br	80e3c8 <__umoddi3+0x90>
  80e6b8:	3d4fc83a 	sub	r7,r7,r21
  80e6bc:	3546983a 	sll	r3,r6,r21
  80e6c0:	81c4d83a 	srl	r2,r16,r7
  80e6c4:	a1e2d83a 	srl	r17,r20,r7
  80e6c8:	a54c983a 	sll	r6,r20,r21
  80e6cc:	18aeb03a 	or	r23,r3,r2
  80e6d0:	b828d43a 	srli	r20,r23,16
  80e6d4:	b1c4d83a 	srl	r2,r22,r7
  80e6d8:	8809883a 	mov	r4,r17
  80e6dc:	a00b883a 	mov	r5,r20
  80e6e0:	308cb03a 	or	r6,r6,r2
  80e6e4:	d9c00315 	stw	r7,12(sp)
  80e6e8:	d9800215 	stw	r6,8(sp)
  80e6ec:	080fdb40 	call	80fdb4 <__udivsi3>
  80e6f0:	8809883a 	mov	r4,r17
  80e6f4:	a00b883a 	mov	r5,r20
  80e6f8:	1039883a 	mov	fp,r2
  80e6fc:	080fdbc0 	call	80fdbc <__umodsi3>
  80e700:	b8ffffcc 	andi	r3,r23,65535
  80e704:	d8c00415 	stw	r3,16(sp)
  80e708:	d9000217 	ldw	r4,8(sp)
  80e70c:	d9400417 	ldw	r5,16(sp)
  80e710:	1004943a 	slli	r2,r2,16
  80e714:	2006d43a 	srli	r3,r4,16
  80e718:	8560983a 	sll	r16,r16,r21
  80e71c:	2f23383a 	mul	r17,r5,fp
  80e720:	10c4b03a 	or	r2,r2,r3
  80e724:	dc000015 	stw	r16,0(sp)
  80e728:	b56c983a 	sll	r22,r22,r21
  80e72c:	1440032e 	bgeu	r2,r17,80e73c <__umoddi3+0x404>
  80e730:	15c5883a 	add	r2,r2,r23
  80e734:	e73fffc4 	addi	fp,fp,-1
  80e738:	15c05d2e 	bgeu	r2,r23,80e8b0 <__umoddi3+0x578>
  80e73c:	1463c83a 	sub	r17,r2,r17
  80e740:	8809883a 	mov	r4,r17
  80e744:	a00b883a 	mov	r5,r20
  80e748:	080fdb40 	call	80fdb4 <__udivsi3>
  80e74c:	8809883a 	mov	r4,r17
  80e750:	a00b883a 	mov	r5,r20
  80e754:	1021883a 	mov	r16,r2
  80e758:	080fdbc0 	call	80fdbc <__umodsi3>
  80e75c:	d8c00417 	ldw	r3,16(sp)
  80e760:	d9000217 	ldw	r4,8(sp)
  80e764:	1004943a 	slli	r2,r2,16
  80e768:	1c23383a 	mul	r17,r3,r16
  80e76c:	20ffffcc 	andi	r3,r4,65535
  80e770:	10ceb03a 	or	r7,r2,r3
  80e774:	3c40032e 	bgeu	r7,r17,80e784 <__umoddi3+0x44c>
  80e778:	3dcf883a 	add	r7,r7,r23
  80e77c:	843fffc4 	addi	r16,r16,-1
  80e780:	3dc0472e 	bgeu	r7,r23,80e8a0 <__umoddi3+0x568>
  80e784:	e004943a 	slli	r2,fp,16
  80e788:	d9400017 	ldw	r5,0(sp)
  80e78c:	3c4fc83a 	sub	r7,r7,r17
  80e790:	8084b03a 	or	r2,r16,r2
  80e794:	28ffffcc 	andi	r3,r5,65535
  80e798:	280cd43a 	srli	r6,r5,16
  80e79c:	100ad43a 	srli	r5,r2,16
  80e7a0:	10bfffcc 	andi	r2,r2,65535
  80e7a4:	10d1383a 	mul	r8,r2,r3
  80e7a8:	28c7383a 	mul	r3,r5,r3
  80e7ac:	1185383a 	mul	r2,r2,r6
  80e7b0:	4008d43a 	srli	r4,r8,16
  80e7b4:	298b383a 	mul	r5,r5,r6
  80e7b8:	10c5883a 	add	r2,r2,r3
  80e7bc:	2089883a 	add	r4,r4,r2
  80e7c0:	20c0022e 	bgeu	r4,r3,80e7cc <__umoddi3+0x494>
  80e7c4:	00800074 	movhi	r2,1
  80e7c8:	288b883a 	add	r5,r5,r2
  80e7cc:	2004d43a 	srli	r2,r4,16
  80e7d0:	2008943a 	slli	r4,r4,16
  80e7d4:	40ffffcc 	andi	r3,r8,65535
  80e7d8:	288b883a 	add	r5,r5,r2
  80e7dc:	20c9883a 	add	r4,r4,r3
  80e7e0:	39400b36 	bltu	r7,r5,80e810 <__umoddi3+0x4d8>
  80e7e4:	39403d26 	beq	r7,r5,80e8dc <__umoddi3+0x5a4>
  80e7e8:	394bc83a 	sub	r5,r7,r5
  80e7ec:	00000f06 	br	80e82c <__umoddi3+0x4f4>
  80e7f0:	30c5c83a 	sub	r2,r6,r3
  80e7f4:	1839883a 	mov	fp,r3
  80e7f8:	b084d83a 	srl	r2,r22,r2
  80e7fc:	a0c6983a 	sll	r3,r20,r3
  80e800:	8720983a 	sll	r16,r16,fp
  80e804:	b72c983a 	sll	r22,r22,fp
  80e808:	18a8b03a 	or	r20,r3,r2
  80e80c:	003f3a06 	br	80e4f8 <__umoddi3+0x1c0>
  80e810:	d8c00017 	ldw	r3,0(sp)
  80e814:	20c5c83a 	sub	r2,r4,r3
  80e818:	2089803a 	cmpltu	r4,r4,r2
  80e81c:	2dc7c83a 	sub	r3,r5,r23
  80e820:	1907c83a 	sub	r3,r3,r4
  80e824:	38cbc83a 	sub	r5,r7,r3
  80e828:	1009883a 	mov	r4,r2
  80e82c:	b105c83a 	sub	r2,r22,r4
  80e830:	b087803a 	cmpltu	r3,r22,r2
  80e834:	28c7c83a 	sub	r3,r5,r3
  80e838:	d9400317 	ldw	r5,12(sp)
  80e83c:	1544d83a 	srl	r2,r2,r21
  80e840:	1948983a 	sll	r4,r3,r5
  80e844:	1d46d83a 	srl	r3,r3,r21
  80e848:	20a4b03a 	or	r18,r4,r2
  80e84c:	9011883a 	mov	r8,r18
  80e850:	1813883a 	mov	r9,r3
  80e854:	003ef606 	br	80e430 <__umoddi3+0xf8>
  80e858:	01400604 	movi	r5,24
  80e85c:	2805883a 	mov	r2,r5
  80e860:	003ecc06 	br	80e394 <__umoddi3+0x5c>
  80e864:	01400204 	movi	r5,8
  80e868:	2805883a 	mov	r2,r5
  80e86c:	003ec906 	br	80e394 <__umoddi3+0x5c>
  80e870:	01400204 	movi	r5,8
  80e874:	2805883a 	mov	r2,r5
  80e878:	003f0106 	br	80e480 <__umoddi3+0x148>
  80e87c:	01400204 	movi	r5,8
  80e880:	2805883a 	mov	r2,r5
  80e884:	003f1206 	br	80e4d0 <__umoddi3+0x198>
  80e888:	01400604 	movi	r5,24
  80e88c:	2805883a 	mov	r2,r5
  80e890:	003f0f06 	br	80e4d0 <__umoddi3+0x198>
  80e894:	01400604 	movi	r5,24
  80e898:	2805883a 	mov	r2,r5
  80e89c:	003ef806 	br	80e480 <__umoddi3+0x148>
  80e8a0:	3c7fb82e 	bgeu	r7,r17,80e784 <__umoddi3+0x44c>
  80e8a4:	843fffc4 	addi	r16,r16,-1
  80e8a8:	3dcf883a 	add	r7,r7,r23
  80e8ac:	003fb506 	br	80e784 <__umoddi3+0x44c>
  80e8b0:	147fa22e 	bgeu	r2,r17,80e73c <__umoddi3+0x404>
  80e8b4:	e73fffc4 	addi	fp,fp,-1
  80e8b8:	15c5883a 	add	r2,r2,r23
  80e8bc:	003f9f06 	br	80e73c <__umoddi3+0x404>
  80e8c0:	147f692e 	bgeu	r2,r17,80e668 <__umoddi3+0x330>
  80e8c4:	1405883a 	add	r2,r2,r16
  80e8c8:	003f6706 	br	80e668 <__umoddi3+0x330>
  80e8cc:	1405883a 	add	r2,r2,r16
  80e8d0:	003f1906 	br	80e538 <__umoddi3+0x200>
  80e8d4:	1405883a 	add	r2,r2,r16
  80e8d8:	003ec906 	br	80e400 <__umoddi3+0xc8>
  80e8dc:	b13fcc36 	bltu	r22,r4,80e810 <__umoddi3+0x4d8>
  80e8e0:	000b883a 	mov	r5,zero
  80e8e4:	003fd106 	br	80e82c <__umoddi3+0x4f4>

0080e8e8 <__nesf2>:
  80e8e8:	defff304 	addi	sp,sp,-52
  80e8ec:	dc400b15 	stw	r17,44(sp)
  80e8f0:	dc400204 	addi	r17,sp,8
  80e8f4:	dc000a15 	stw	r16,40(sp)
  80e8f8:	d9000015 	stw	r4,0(sp)
  80e8fc:	d9400115 	stw	r5,4(sp)
  80e900:	d809883a 	mov	r4,sp
  80e904:	880b883a 	mov	r5,r17
  80e908:	dc000604 	addi	r16,sp,24
  80e90c:	dfc00c15 	stw	ra,48(sp)
  80e910:	080fe440 	call	80fe44 <__unpack_f>
  80e914:	d9000104 	addi	r4,sp,4
  80e918:	800b883a 	mov	r5,r16
  80e91c:	080fe440 	call	80fe44 <__unpack_f>
  80e920:	d8800217 	ldw	r2,8(sp)
  80e924:	00c00044 	movi	r3,1
  80e928:	180d883a 	mov	r6,r3
  80e92c:	1880062e 	bgeu	r3,r2,80e948 <__nesf2+0x60>
  80e930:	d8800617 	ldw	r2,24(sp)
  80e934:	8809883a 	mov	r4,r17
  80e938:	800b883a 	mov	r5,r16
  80e93c:	1880022e 	bgeu	r3,r2,80e948 <__nesf2+0x60>
  80e940:	080ff0c0 	call	80ff0c <__fpcmp_parts_f>
  80e944:	100d883a 	mov	r6,r2
  80e948:	3005883a 	mov	r2,r6
  80e94c:	dfc00c17 	ldw	ra,48(sp)
  80e950:	dc400b17 	ldw	r17,44(sp)
  80e954:	dc000a17 	ldw	r16,40(sp)
  80e958:	dec00d04 	addi	sp,sp,52
  80e95c:	f800283a 	ret

0080e960 <__gtsf2>:
  80e960:	defff304 	addi	sp,sp,-52
  80e964:	dc400b15 	stw	r17,44(sp)
  80e968:	dc400204 	addi	r17,sp,8
  80e96c:	dc000a15 	stw	r16,40(sp)
  80e970:	d9000015 	stw	r4,0(sp)
  80e974:	d9400115 	stw	r5,4(sp)
  80e978:	d809883a 	mov	r4,sp
  80e97c:	880b883a 	mov	r5,r17
  80e980:	dc000604 	addi	r16,sp,24
  80e984:	dfc00c15 	stw	ra,48(sp)
  80e988:	080fe440 	call	80fe44 <__unpack_f>
  80e98c:	d9000104 	addi	r4,sp,4
  80e990:	800b883a 	mov	r5,r16
  80e994:	080fe440 	call	80fe44 <__unpack_f>
  80e998:	d8800217 	ldw	r2,8(sp)
  80e99c:	00c00044 	movi	r3,1
  80e9a0:	01bfffc4 	movi	r6,-1
  80e9a4:	1880062e 	bgeu	r3,r2,80e9c0 <__gtsf2+0x60>
  80e9a8:	d8800617 	ldw	r2,24(sp)
  80e9ac:	8809883a 	mov	r4,r17
  80e9b0:	800b883a 	mov	r5,r16
  80e9b4:	1880022e 	bgeu	r3,r2,80e9c0 <__gtsf2+0x60>
  80e9b8:	080ff0c0 	call	80ff0c <__fpcmp_parts_f>
  80e9bc:	100d883a 	mov	r6,r2
  80e9c0:	3005883a 	mov	r2,r6
  80e9c4:	dfc00c17 	ldw	ra,48(sp)
  80e9c8:	dc400b17 	ldw	r17,44(sp)
  80e9cc:	dc000a17 	ldw	r16,40(sp)
  80e9d0:	dec00d04 	addi	sp,sp,52
  80e9d4:	f800283a 	ret

0080e9d8 <__ltsf2>:
  80e9d8:	defff304 	addi	sp,sp,-52
  80e9dc:	dc400b15 	stw	r17,44(sp)
  80e9e0:	dc400204 	addi	r17,sp,8
  80e9e4:	dc000a15 	stw	r16,40(sp)
  80e9e8:	d9000015 	stw	r4,0(sp)
  80e9ec:	d9400115 	stw	r5,4(sp)
  80e9f0:	d809883a 	mov	r4,sp
  80e9f4:	880b883a 	mov	r5,r17
  80e9f8:	dc000604 	addi	r16,sp,24
  80e9fc:	dfc00c15 	stw	ra,48(sp)
  80ea00:	080fe440 	call	80fe44 <__unpack_f>
  80ea04:	d9000104 	addi	r4,sp,4
  80ea08:	800b883a 	mov	r5,r16
  80ea0c:	080fe440 	call	80fe44 <__unpack_f>
  80ea10:	d8800217 	ldw	r2,8(sp)
  80ea14:	00c00044 	movi	r3,1
  80ea18:	180d883a 	mov	r6,r3
  80ea1c:	1880062e 	bgeu	r3,r2,80ea38 <__ltsf2+0x60>
  80ea20:	d8800617 	ldw	r2,24(sp)
  80ea24:	8809883a 	mov	r4,r17
  80ea28:	800b883a 	mov	r5,r16
  80ea2c:	1880022e 	bgeu	r3,r2,80ea38 <__ltsf2+0x60>
  80ea30:	080ff0c0 	call	80ff0c <__fpcmp_parts_f>
  80ea34:	100d883a 	mov	r6,r2
  80ea38:	3005883a 	mov	r2,r6
  80ea3c:	dfc00c17 	ldw	ra,48(sp)
  80ea40:	dc400b17 	ldw	r17,44(sp)
  80ea44:	dc000a17 	ldw	r16,40(sp)
  80ea48:	dec00d04 	addi	sp,sp,52
  80ea4c:	f800283a 	ret

0080ea50 <_fpadd_parts>:
  80ea50:	defff804 	addi	sp,sp,-32
  80ea54:	dcc00315 	stw	r19,12(sp)
  80ea58:	2027883a 	mov	r19,r4
  80ea5c:	21000017 	ldw	r4,0(r4)
  80ea60:	00c00044 	movi	r3,1
  80ea64:	dd400515 	stw	r21,20(sp)
  80ea68:	dd000415 	stw	r20,16(sp)
  80ea6c:	ddc00715 	stw	r23,28(sp)
  80ea70:	dd800615 	stw	r22,24(sp)
  80ea74:	dc800215 	stw	r18,8(sp)
  80ea78:	dc400115 	stw	r17,4(sp)
  80ea7c:	dc000015 	stw	r16,0(sp)
  80ea80:	282b883a 	mov	r21,r5
  80ea84:	3029883a 	mov	r20,r6
  80ea88:	1900632e 	bgeu	r3,r4,80ec18 <_fpadd_parts+0x1c8>
  80ea8c:	28800017 	ldw	r2,0(r5)
  80ea90:	1880812e 	bgeu	r3,r2,80ec98 <_fpadd_parts+0x248>
  80ea94:	00c00104 	movi	r3,4
  80ea98:	20c0dc26 	beq	r4,r3,80ee0c <_fpadd_parts+0x3bc>
  80ea9c:	10c07e26 	beq	r2,r3,80ec98 <_fpadd_parts+0x248>
  80eaa0:	00c00084 	movi	r3,2
  80eaa4:	10c06726 	beq	r2,r3,80ec44 <_fpadd_parts+0x1f4>
  80eaa8:	20c07b26 	beq	r4,r3,80ec98 <_fpadd_parts+0x248>
  80eaac:	9dc00217 	ldw	r23,8(r19)
  80eab0:	28c00217 	ldw	r3,8(r5)
  80eab4:	9c400317 	ldw	r17,12(r19)
  80eab8:	2bc00317 	ldw	r15,12(r5)
  80eabc:	b8cdc83a 	sub	r6,r23,r3
  80eac0:	9c800417 	ldw	r18,16(r19)
  80eac4:	2c000417 	ldw	r16,16(r5)
  80eac8:	3009883a 	mov	r4,r6
  80eacc:	30009716 	blt	r6,zero,80ed2c <_fpadd_parts+0x2dc>
  80ead0:	00800fc4 	movi	r2,63
  80ead4:	11806b16 	blt	r2,r6,80ec84 <_fpadd_parts+0x234>
  80ead8:	0100a40e 	bge	zero,r4,80ed6c <_fpadd_parts+0x31c>
  80eadc:	35bff804 	addi	r22,r6,-32
  80eae0:	b000bc16 	blt	r22,zero,80edd4 <_fpadd_parts+0x384>
  80eae4:	8596d83a 	srl	r11,r16,r22
  80eae8:	0019883a 	mov	r12,zero
  80eaec:	0013883a 	mov	r9,zero
  80eaf0:	01000044 	movi	r4,1
  80eaf4:	0015883a 	mov	r10,zero
  80eaf8:	b000be16 	blt	r22,zero,80edf4 <_fpadd_parts+0x3a4>
  80eafc:	2590983a 	sll	r8,r4,r22
  80eb00:	000f883a 	mov	r7,zero
  80eb04:	00bfffc4 	movi	r2,-1
  80eb08:	3889883a 	add	r4,r7,r2
  80eb0c:	408b883a 	add	r5,r8,r2
  80eb10:	21cd803a 	cmpltu	r6,r4,r7
  80eb14:	314b883a 	add	r5,r6,r5
  80eb18:	7904703a 	and	r2,r15,r4
  80eb1c:	8146703a 	and	r3,r16,r5
  80eb20:	10c4b03a 	or	r2,r2,r3
  80eb24:	10000226 	beq	r2,zero,80eb30 <_fpadd_parts+0xe0>
  80eb28:	02400044 	movi	r9,1
  80eb2c:	0015883a 	mov	r10,zero
  80eb30:	5a5eb03a 	or	r15,r11,r9
  80eb34:	62a0b03a 	or	r16,r12,r10
  80eb38:	99400117 	ldw	r5,4(r19)
  80eb3c:	a8800117 	ldw	r2,4(r21)
  80eb40:	28806e26 	beq	r5,r2,80ecfc <_fpadd_parts+0x2ac>
  80eb44:	28006626 	beq	r5,zero,80ece0 <_fpadd_parts+0x290>
  80eb48:	7c45c83a 	sub	r2,r15,r17
  80eb4c:	7889803a 	cmpltu	r4,r15,r2
  80eb50:	8487c83a 	sub	r3,r16,r18
  80eb54:	1909c83a 	sub	r4,r3,r4
  80eb58:	100d883a 	mov	r6,r2
  80eb5c:	200f883a 	mov	r7,r4
  80eb60:	38007716 	blt	r7,zero,80ed40 <_fpadd_parts+0x2f0>
  80eb64:	a5c00215 	stw	r23,8(r20)
  80eb68:	a1c00415 	stw	r7,16(r20)
  80eb6c:	a0000115 	stw	zero,4(r20)
  80eb70:	a1800315 	stw	r6,12(r20)
  80eb74:	a2000317 	ldw	r8,12(r20)
  80eb78:	a2400417 	ldw	r9,16(r20)
  80eb7c:	00bfffc4 	movi	r2,-1
  80eb80:	408b883a 	add	r5,r8,r2
  80eb84:	2a09803a 	cmpltu	r4,r5,r8
  80eb88:	488d883a 	add	r6,r9,r2
  80eb8c:	01c40034 	movhi	r7,4096
  80eb90:	39ffffc4 	addi	r7,r7,-1
  80eb94:	218d883a 	add	r6,r4,r6
  80eb98:	39801736 	bltu	r7,r6,80ebf8 <_fpadd_parts+0x1a8>
  80eb9c:	31c06526 	beq	r6,r7,80ed34 <_fpadd_parts+0x2e4>
  80eba0:	a3000217 	ldw	r12,8(r20)
  80eba4:	4209883a 	add	r4,r8,r8
  80eba8:	00bfffc4 	movi	r2,-1
  80ebac:	220f803a 	cmpltu	r7,r4,r8
  80ebb0:	4a4b883a 	add	r5,r9,r9
  80ebb4:	394f883a 	add	r7,r7,r5
  80ebb8:	2095883a 	add	r10,r4,r2
  80ebbc:	3897883a 	add	r11,r7,r2
  80ebc0:	510d803a 	cmpltu	r6,r10,r4
  80ebc4:	6099883a 	add	r12,r12,r2
  80ebc8:	32d7883a 	add	r11,r6,r11
  80ebcc:	00840034 	movhi	r2,4096
  80ebd0:	10bfffc4 	addi	r2,r2,-1
  80ebd4:	2011883a 	mov	r8,r4
  80ebd8:	3813883a 	mov	r9,r7
  80ebdc:	a1000315 	stw	r4,12(r20)
  80ebe0:	a1c00415 	stw	r7,16(r20)
  80ebe4:	a3000215 	stw	r12,8(r20)
  80ebe8:	12c00336 	bltu	r2,r11,80ebf8 <_fpadd_parts+0x1a8>
  80ebec:	58bfed1e 	bne	r11,r2,80eba4 <_fpadd_parts+0x154>
  80ebf0:	00bfff84 	movi	r2,-2
  80ebf4:	12bfeb2e 	bgeu	r2,r10,80eba4 <_fpadd_parts+0x154>
  80ebf8:	a2800417 	ldw	r10,16(r20)
  80ebfc:	008000c4 	movi	r2,3
  80ec00:	00c80034 	movhi	r3,8192
  80ec04:	18ffffc4 	addi	r3,r3,-1
  80ec08:	a2400317 	ldw	r9,12(r20)
  80ec0c:	a0800015 	stw	r2,0(r20)
  80ec10:	1a802336 	bltu	r3,r10,80eca0 <_fpadd_parts+0x250>
  80ec14:	a027883a 	mov	r19,r20
  80ec18:	9805883a 	mov	r2,r19
  80ec1c:	ddc00717 	ldw	r23,28(sp)
  80ec20:	dd800617 	ldw	r22,24(sp)
  80ec24:	dd400517 	ldw	r21,20(sp)
  80ec28:	dd000417 	ldw	r20,16(sp)
  80ec2c:	dcc00317 	ldw	r19,12(sp)
  80ec30:	dc800217 	ldw	r18,8(sp)
  80ec34:	dc400117 	ldw	r17,4(sp)
  80ec38:	dc000017 	ldw	r16,0(sp)
  80ec3c:	dec00804 	addi	sp,sp,32
  80ec40:	f800283a 	ret
  80ec44:	20fff41e 	bne	r4,r3,80ec18 <_fpadd_parts+0x1c8>
  80ec48:	31000015 	stw	r4,0(r6)
  80ec4c:	98800117 	ldw	r2,4(r19)
  80ec50:	30800115 	stw	r2,4(r6)
  80ec54:	98c00217 	ldw	r3,8(r19)
  80ec58:	30c00215 	stw	r3,8(r6)
  80ec5c:	98800317 	ldw	r2,12(r19)
  80ec60:	30800315 	stw	r2,12(r6)
  80ec64:	98c00417 	ldw	r3,16(r19)
  80ec68:	30c00415 	stw	r3,16(r6)
  80ec6c:	98800117 	ldw	r2,4(r19)
  80ec70:	28c00117 	ldw	r3,4(r5)
  80ec74:	3027883a 	mov	r19,r6
  80ec78:	10c4703a 	and	r2,r2,r3
  80ec7c:	30800115 	stw	r2,4(r6)
  80ec80:	003fe506 	br	80ec18 <_fpadd_parts+0x1c8>
  80ec84:	1dc02616 	blt	r3,r23,80ed20 <_fpadd_parts+0x2d0>
  80ec88:	0023883a 	mov	r17,zero
  80ec8c:	182f883a 	mov	r23,r3
  80ec90:	0025883a 	mov	r18,zero
  80ec94:	003fa806 	br	80eb38 <_fpadd_parts+0xe8>
  80ec98:	a827883a 	mov	r19,r21
  80ec9c:	003fde06 	br	80ec18 <_fpadd_parts+0x1c8>
  80eca0:	01800044 	movi	r6,1
  80eca4:	500497fa 	slli	r2,r10,31
  80eca8:	4808d07a 	srli	r4,r9,1
  80ecac:	518ad83a 	srl	r5,r10,r6
  80ecb0:	a2000217 	ldw	r8,8(r20)
  80ecb4:	1108b03a 	or	r4,r2,r4
  80ecb8:	0007883a 	mov	r3,zero
  80ecbc:	4984703a 	and	r2,r9,r6
  80ecc0:	208cb03a 	or	r6,r4,r2
  80ecc4:	28ceb03a 	or	r7,r5,r3
  80ecc8:	42000044 	addi	r8,r8,1
  80eccc:	a027883a 	mov	r19,r20
  80ecd0:	a1c00415 	stw	r7,16(r20)
  80ecd4:	a2000215 	stw	r8,8(r20)
  80ecd8:	a1800315 	stw	r6,12(r20)
  80ecdc:	003fce06 	br	80ec18 <_fpadd_parts+0x1c8>
  80ece0:	8bc5c83a 	sub	r2,r17,r15
  80ece4:	8889803a 	cmpltu	r4,r17,r2
  80ece8:	9407c83a 	sub	r3,r18,r16
  80ecec:	1909c83a 	sub	r4,r3,r4
  80ecf0:	100d883a 	mov	r6,r2
  80ecf4:	200f883a 	mov	r7,r4
  80ecf8:	003f9906 	br	80eb60 <_fpadd_parts+0x110>
  80ecfc:	7c45883a 	add	r2,r15,r17
  80ed00:	13c9803a 	cmpltu	r4,r2,r15
  80ed04:	8487883a 	add	r3,r16,r18
  80ed08:	20c9883a 	add	r4,r4,r3
  80ed0c:	a1400115 	stw	r5,4(r20)
  80ed10:	a5c00215 	stw	r23,8(r20)
  80ed14:	a0800315 	stw	r2,12(r20)
  80ed18:	a1000415 	stw	r4,16(r20)
  80ed1c:	003fb606 	br	80ebf8 <_fpadd_parts+0x1a8>
  80ed20:	001f883a 	mov	r15,zero
  80ed24:	0021883a 	mov	r16,zero
  80ed28:	003f8306 	br	80eb38 <_fpadd_parts+0xe8>
  80ed2c:	018dc83a 	sub	r6,zero,r6
  80ed30:	003f6706 	br	80ead0 <_fpadd_parts+0x80>
  80ed34:	00bfff84 	movi	r2,-2
  80ed38:	117faf36 	bltu	r2,r5,80ebf8 <_fpadd_parts+0x1a8>
  80ed3c:	003f9806 	br	80eba0 <_fpadd_parts+0x150>
  80ed40:	0005883a 	mov	r2,zero
  80ed44:	1189c83a 	sub	r4,r2,r6
  80ed48:	1105803a 	cmpltu	r2,r2,r4
  80ed4c:	01cbc83a 	sub	r5,zero,r7
  80ed50:	2885c83a 	sub	r2,r5,r2
  80ed54:	01800044 	movi	r6,1
  80ed58:	a1800115 	stw	r6,4(r20)
  80ed5c:	a5c00215 	stw	r23,8(r20)
  80ed60:	a1000315 	stw	r4,12(r20)
  80ed64:	a0800415 	stw	r2,16(r20)
  80ed68:	003f8206 	br	80eb74 <_fpadd_parts+0x124>
  80ed6c:	203f7226 	beq	r4,zero,80eb38 <_fpadd_parts+0xe8>
  80ed70:	35bff804 	addi	r22,r6,-32
  80ed74:	b9af883a 	add	r23,r23,r6
  80ed78:	b0003116 	blt	r22,zero,80ee40 <_fpadd_parts+0x3f0>
  80ed7c:	959ad83a 	srl	r13,r18,r22
  80ed80:	001d883a 	mov	r14,zero
  80ed84:	000f883a 	mov	r7,zero
  80ed88:	01000044 	movi	r4,1
  80ed8c:	0011883a 	mov	r8,zero
  80ed90:	b0002516 	blt	r22,zero,80ee28 <_fpadd_parts+0x3d8>
  80ed94:	2594983a 	sll	r10,r4,r22
  80ed98:	0013883a 	mov	r9,zero
  80ed9c:	00bfffc4 	movi	r2,-1
  80eda0:	4889883a 	add	r4,r9,r2
  80eda4:	508b883a 	add	r5,r10,r2
  80eda8:	224d803a 	cmpltu	r6,r4,r9
  80edac:	314b883a 	add	r5,r6,r5
  80edb0:	8904703a 	and	r2,r17,r4
  80edb4:	9146703a 	and	r3,r18,r5
  80edb8:	10c4b03a 	or	r2,r2,r3
  80edbc:	10000226 	beq	r2,zero,80edc8 <_fpadd_parts+0x378>
  80edc0:	01c00044 	movi	r7,1
  80edc4:	0011883a 	mov	r8,zero
  80edc8:	69e2b03a 	or	r17,r13,r7
  80edcc:	7224b03a 	or	r18,r14,r8
  80edd0:	003f5906 	br	80eb38 <_fpadd_parts+0xe8>
  80edd4:	8407883a 	add	r3,r16,r16
  80edd8:	008007c4 	movi	r2,31
  80eddc:	1185c83a 	sub	r2,r2,r6
  80ede0:	1886983a 	sll	r3,r3,r2
  80ede4:	7996d83a 	srl	r11,r15,r6
  80ede8:	8198d83a 	srl	r12,r16,r6
  80edec:	1ad6b03a 	or	r11,r3,r11
  80edf0:	003f3e06 	br	80eaec <_fpadd_parts+0x9c>
  80edf4:	2006d07a 	srli	r3,r4,1
  80edf8:	008007c4 	movi	r2,31
  80edfc:	1185c83a 	sub	r2,r2,r6
  80ee00:	1890d83a 	srl	r8,r3,r2
  80ee04:	218e983a 	sll	r7,r4,r6
  80ee08:	003f3e06 	br	80eb04 <_fpadd_parts+0xb4>
  80ee0c:	113f821e 	bne	r2,r4,80ec18 <_fpadd_parts+0x1c8>
  80ee10:	28c00117 	ldw	r3,4(r5)
  80ee14:	98800117 	ldw	r2,4(r19)
  80ee18:	10ff7f26 	beq	r2,r3,80ec18 <_fpadd_parts+0x1c8>
  80ee1c:	04c02074 	movhi	r19,129
  80ee20:	9cd4db04 	addi	r19,r19,21356
  80ee24:	003f7c06 	br	80ec18 <_fpadd_parts+0x1c8>
  80ee28:	2006d07a 	srli	r3,r4,1
  80ee2c:	008007c4 	movi	r2,31
  80ee30:	1185c83a 	sub	r2,r2,r6
  80ee34:	1894d83a 	srl	r10,r3,r2
  80ee38:	2192983a 	sll	r9,r4,r6
  80ee3c:	003fd706 	br	80ed9c <_fpadd_parts+0x34c>
  80ee40:	9487883a 	add	r3,r18,r18
  80ee44:	008007c4 	movi	r2,31
  80ee48:	1185c83a 	sub	r2,r2,r6
  80ee4c:	1886983a 	sll	r3,r3,r2
  80ee50:	899ad83a 	srl	r13,r17,r6
  80ee54:	919cd83a 	srl	r14,r18,r6
  80ee58:	1b5ab03a 	or	r13,r3,r13
  80ee5c:	003fc906 	br	80ed84 <_fpadd_parts+0x334>

0080ee60 <__subdf3>:
  80ee60:	deffea04 	addi	sp,sp,-88
  80ee64:	dcc01415 	stw	r19,80(sp)
  80ee68:	dcc00404 	addi	r19,sp,16
  80ee6c:	2011883a 	mov	r8,r4
  80ee70:	2813883a 	mov	r9,r5
  80ee74:	dc401315 	stw	r17,76(sp)
  80ee78:	d809883a 	mov	r4,sp
  80ee7c:	980b883a 	mov	r5,r19
  80ee80:	dc400904 	addi	r17,sp,36
  80ee84:	dfc01515 	stw	ra,84(sp)
  80ee88:	da400115 	stw	r9,4(sp)
  80ee8c:	d9c00315 	stw	r7,12(sp)
  80ee90:	da000015 	stw	r8,0(sp)
  80ee94:	d9800215 	stw	r6,8(sp)
  80ee98:	08102f40 	call	8102f4 <__unpack_d>
  80ee9c:	d9000204 	addi	r4,sp,8
  80eea0:	880b883a 	mov	r5,r17
  80eea4:	08102f40 	call	8102f4 <__unpack_d>
  80eea8:	d8800a17 	ldw	r2,40(sp)
  80eeac:	880b883a 	mov	r5,r17
  80eeb0:	9809883a 	mov	r4,r19
  80eeb4:	d9800e04 	addi	r6,sp,56
  80eeb8:	1080005c 	xori	r2,r2,1
  80eebc:	d8800a15 	stw	r2,40(sp)
  80eec0:	080ea500 	call	80ea50 <_fpadd_parts>
  80eec4:	1009883a 	mov	r4,r2
  80eec8:	080ffe00 	call	80ffe0 <__pack_d>
  80eecc:	dfc01517 	ldw	ra,84(sp)
  80eed0:	dcc01417 	ldw	r19,80(sp)
  80eed4:	dc401317 	ldw	r17,76(sp)
  80eed8:	dec01604 	addi	sp,sp,88
  80eedc:	f800283a 	ret

0080eee0 <__adddf3>:
  80eee0:	deffea04 	addi	sp,sp,-88
  80eee4:	dcc01415 	stw	r19,80(sp)
  80eee8:	dcc00404 	addi	r19,sp,16
  80eeec:	2011883a 	mov	r8,r4
  80eef0:	2813883a 	mov	r9,r5
  80eef4:	dc401315 	stw	r17,76(sp)
  80eef8:	d809883a 	mov	r4,sp
  80eefc:	980b883a 	mov	r5,r19
  80ef00:	dc400904 	addi	r17,sp,36
  80ef04:	dfc01515 	stw	ra,84(sp)
  80ef08:	da400115 	stw	r9,4(sp)
  80ef0c:	d9c00315 	stw	r7,12(sp)
  80ef10:	da000015 	stw	r8,0(sp)
  80ef14:	d9800215 	stw	r6,8(sp)
  80ef18:	08102f40 	call	8102f4 <__unpack_d>
  80ef1c:	d9000204 	addi	r4,sp,8
  80ef20:	880b883a 	mov	r5,r17
  80ef24:	08102f40 	call	8102f4 <__unpack_d>
  80ef28:	d9800e04 	addi	r6,sp,56
  80ef2c:	9809883a 	mov	r4,r19
  80ef30:	880b883a 	mov	r5,r17
  80ef34:	080ea500 	call	80ea50 <_fpadd_parts>
  80ef38:	1009883a 	mov	r4,r2
  80ef3c:	080ffe00 	call	80ffe0 <__pack_d>
  80ef40:	dfc01517 	ldw	ra,84(sp)
  80ef44:	dcc01417 	ldw	r19,80(sp)
  80ef48:	dc401317 	ldw	r17,76(sp)
  80ef4c:	dec01604 	addi	sp,sp,88
  80ef50:	f800283a 	ret

0080ef54 <__muldf3>:
  80ef54:	deffe004 	addi	sp,sp,-128
  80ef58:	dc401815 	stw	r17,96(sp)
  80ef5c:	dc400404 	addi	r17,sp,16
  80ef60:	2011883a 	mov	r8,r4
  80ef64:	2813883a 	mov	r9,r5
  80ef68:	dc001715 	stw	r16,92(sp)
  80ef6c:	d809883a 	mov	r4,sp
  80ef70:	880b883a 	mov	r5,r17
  80ef74:	dc000904 	addi	r16,sp,36
  80ef78:	dfc01f15 	stw	ra,124(sp)
  80ef7c:	da400115 	stw	r9,4(sp)
  80ef80:	d9c00315 	stw	r7,12(sp)
  80ef84:	da000015 	stw	r8,0(sp)
  80ef88:	d9800215 	stw	r6,8(sp)
  80ef8c:	ddc01e15 	stw	r23,120(sp)
  80ef90:	dd801d15 	stw	r22,116(sp)
  80ef94:	dd401c15 	stw	r21,112(sp)
  80ef98:	dd001b15 	stw	r20,108(sp)
  80ef9c:	dcc01a15 	stw	r19,104(sp)
  80efa0:	dc801915 	stw	r18,100(sp)
  80efa4:	08102f40 	call	8102f4 <__unpack_d>
  80efa8:	d9000204 	addi	r4,sp,8
  80efac:	800b883a 	mov	r5,r16
  80efb0:	08102f40 	call	8102f4 <__unpack_d>
  80efb4:	d9000417 	ldw	r4,16(sp)
  80efb8:	00800044 	movi	r2,1
  80efbc:	1100102e 	bgeu	r2,r4,80f000 <__muldf3+0xac>
  80efc0:	d8c00917 	ldw	r3,36(sp)
  80efc4:	10c0062e 	bgeu	r2,r3,80efe0 <__muldf3+0x8c>
  80efc8:	00800104 	movi	r2,4
  80efcc:	20800a26 	beq	r4,r2,80eff8 <__muldf3+0xa4>
  80efd0:	1880cc26 	beq	r3,r2,80f304 <__muldf3+0x3b0>
  80efd4:	00800084 	movi	r2,2
  80efd8:	20800926 	beq	r4,r2,80f000 <__muldf3+0xac>
  80efdc:	1880191e 	bne	r3,r2,80f044 <__muldf3+0xf0>
  80efe0:	d8c00a17 	ldw	r3,40(sp)
  80efe4:	d8800517 	ldw	r2,20(sp)
  80efe8:	8009883a 	mov	r4,r16
  80efec:	10c4c03a 	cmpne	r2,r2,r3
  80eff0:	d8800a15 	stw	r2,40(sp)
  80eff4:	00000706 	br	80f014 <__muldf3+0xc0>
  80eff8:	00800084 	movi	r2,2
  80effc:	1880c326 	beq	r3,r2,80f30c <__muldf3+0x3b8>
  80f000:	d8800517 	ldw	r2,20(sp)
  80f004:	d8c00a17 	ldw	r3,40(sp)
  80f008:	8809883a 	mov	r4,r17
  80f00c:	10c4c03a 	cmpne	r2,r2,r3
  80f010:	d8800515 	stw	r2,20(sp)
  80f014:	080ffe00 	call	80ffe0 <__pack_d>
  80f018:	dfc01f17 	ldw	ra,124(sp)
  80f01c:	ddc01e17 	ldw	r23,120(sp)
  80f020:	dd801d17 	ldw	r22,116(sp)
  80f024:	dd401c17 	ldw	r21,112(sp)
  80f028:	dd001b17 	ldw	r20,108(sp)
  80f02c:	dcc01a17 	ldw	r19,104(sp)
  80f030:	dc801917 	ldw	r18,100(sp)
  80f034:	dc401817 	ldw	r17,96(sp)
  80f038:	dc001717 	ldw	r16,92(sp)
  80f03c:	dec02004 	addi	sp,sp,128
  80f040:	f800283a 	ret
  80f044:	dd800717 	ldw	r22,28(sp)
  80f048:	dc800c17 	ldw	r18,48(sp)
  80f04c:	002b883a 	mov	r21,zero
  80f050:	0023883a 	mov	r17,zero
  80f054:	a80b883a 	mov	r5,r21
  80f058:	b00d883a 	mov	r6,r22
  80f05c:	880f883a 	mov	r7,r17
  80f060:	ddc00817 	ldw	r23,32(sp)
  80f064:	dcc00d17 	ldw	r19,52(sp)
  80f068:	9009883a 	mov	r4,r18
  80f06c:	080dc200 	call	80dc20 <__muldi3>
  80f070:	001b883a 	mov	r13,zero
  80f074:	680f883a 	mov	r7,r13
  80f078:	b009883a 	mov	r4,r22
  80f07c:	000b883a 	mov	r5,zero
  80f080:	980d883a 	mov	r6,r19
  80f084:	b82d883a 	mov	r22,r23
  80f088:	002f883a 	mov	r23,zero
  80f08c:	db401615 	stw	r13,88(sp)
  80f090:	d8801315 	stw	r2,76(sp)
  80f094:	d8c01415 	stw	r3,80(sp)
  80f098:	dcc01515 	stw	r19,84(sp)
  80f09c:	080dc200 	call	80dc20 <__muldi3>
  80f0a0:	b00d883a 	mov	r6,r22
  80f0a4:	000b883a 	mov	r5,zero
  80f0a8:	9009883a 	mov	r4,r18
  80f0ac:	b80f883a 	mov	r7,r23
  80f0b0:	1021883a 	mov	r16,r2
  80f0b4:	1823883a 	mov	r17,r3
  80f0b8:	080dc200 	call	80dc20 <__muldi3>
  80f0bc:	8085883a 	add	r2,r16,r2
  80f0c0:	140d803a 	cmpltu	r6,r2,r16
  80f0c4:	88c7883a 	add	r3,r17,r3
  80f0c8:	30cd883a 	add	r6,r6,r3
  80f0cc:	1029883a 	mov	r20,r2
  80f0d0:	302b883a 	mov	r21,r6
  80f0d4:	da801317 	ldw	r10,76(sp)
  80f0d8:	dac01417 	ldw	r11,80(sp)
  80f0dc:	db001517 	ldw	r12,84(sp)
  80f0e0:	db401617 	ldw	r13,88(sp)
  80f0e4:	3440612e 	bgeu	r6,r17,80f26c <__muldf3+0x318>
  80f0e8:	0009883a 	mov	r4,zero
  80f0ec:	5105883a 	add	r2,r10,r4
  80f0f0:	128d803a 	cmpltu	r6,r2,r10
  80f0f4:	5d07883a 	add	r3,r11,r20
  80f0f8:	30cd883a 	add	r6,r6,r3
  80f0fc:	0021883a 	mov	r16,zero
  80f100:	04400044 	movi	r17,1
  80f104:	1025883a 	mov	r18,r2
  80f108:	3027883a 	mov	r19,r6
  80f10c:	32c06236 	bltu	r6,r11,80f298 <__muldf3+0x344>
  80f110:	59807a26 	beq	r11,r6,80f2fc <__muldf3+0x3a8>
  80f114:	680b883a 	mov	r5,r13
  80f118:	b80f883a 	mov	r7,r23
  80f11c:	6009883a 	mov	r4,r12
  80f120:	b00d883a 	mov	r6,r22
  80f124:	080dc200 	call	80dc20 <__muldi3>
  80f128:	1009883a 	mov	r4,r2
  80f12c:	000f883a 	mov	r7,zero
  80f130:	1545883a 	add	r2,r2,r21
  80f134:	1111803a 	cmpltu	r8,r2,r4
  80f138:	19c7883a 	add	r3,r3,r7
  80f13c:	40c7883a 	add	r3,r8,r3
  80f140:	88cb883a 	add	r5,r17,r3
  80f144:	d8c00617 	ldw	r3,24(sp)
  80f148:	8089883a 	add	r4,r16,r2
  80f14c:	d8800b17 	ldw	r2,44(sp)
  80f150:	18c00104 	addi	r3,r3,4
  80f154:	240d803a 	cmpltu	r6,r4,r16
  80f158:	10c7883a 	add	r3,r2,r3
  80f15c:	2013883a 	mov	r9,r4
  80f160:	d8800a17 	ldw	r2,40(sp)
  80f164:	d9000517 	ldw	r4,20(sp)
  80f168:	314d883a 	add	r6,r6,r5
  80f16c:	3015883a 	mov	r10,r6
  80f170:	2088c03a 	cmpne	r4,r4,r2
  80f174:	00880034 	movhi	r2,8192
  80f178:	10bfffc4 	addi	r2,r2,-1
  80f17c:	d9000f15 	stw	r4,60(sp)
  80f180:	d8c01015 	stw	r3,64(sp)
  80f184:	1180162e 	bgeu	r2,r6,80f1e0 <__muldf3+0x28c>
  80f188:	1811883a 	mov	r8,r3
  80f18c:	101f883a 	mov	r15,r2
  80f190:	980497fa 	slli	r2,r19,31
  80f194:	9016d07a 	srli	r11,r18,1
  80f198:	500697fa 	slli	r3,r10,31
  80f19c:	480cd07a 	srli	r6,r9,1
  80f1a0:	500ed07a 	srli	r7,r10,1
  80f1a4:	12d6b03a 	or	r11,r2,r11
  80f1a8:	00800044 	movi	r2,1
  80f1ac:	198cb03a 	or	r6,r3,r6
  80f1b0:	4888703a 	and	r4,r9,r2
  80f1b4:	9818d07a 	srli	r12,r19,1
  80f1b8:	001b883a 	mov	r13,zero
  80f1bc:	03a00034 	movhi	r14,32768
  80f1c0:	3013883a 	mov	r9,r6
  80f1c4:	3815883a 	mov	r10,r7
  80f1c8:	4091883a 	add	r8,r8,r2
  80f1cc:	20000226 	beq	r4,zero,80f1d8 <__muldf3+0x284>
  80f1d0:	5b64b03a 	or	r18,r11,r13
  80f1d4:	63a6b03a 	or	r19,r12,r14
  80f1d8:	7abfed36 	bltu	r15,r10,80f190 <__muldf3+0x23c>
  80f1dc:	da001015 	stw	r8,64(sp)
  80f1e0:	00840034 	movhi	r2,4096
  80f1e4:	10bfffc4 	addi	r2,r2,-1
  80f1e8:	12801436 	bltu	r2,r10,80f23c <__muldf3+0x2e8>
  80f1ec:	da001017 	ldw	r8,64(sp)
  80f1f0:	101f883a 	mov	r15,r2
  80f1f4:	4a45883a 	add	r2,r9,r9
  80f1f8:	124d803a 	cmpltu	r6,r2,r9
  80f1fc:	5287883a 	add	r3,r10,r10
  80f200:	9497883a 	add	r11,r18,r18
  80f204:	5c8f803a 	cmpltu	r7,r11,r18
  80f208:	9cd9883a 	add	r12,r19,r19
  80f20c:	01000044 	movi	r4,1
  80f210:	30cd883a 	add	r6,r6,r3
  80f214:	3b0f883a 	add	r7,r7,r12
  80f218:	423fffc4 	addi	r8,r8,-1
  80f21c:	1013883a 	mov	r9,r2
  80f220:	3015883a 	mov	r10,r6
  80f224:	111ab03a 	or	r13,r2,r4
  80f228:	98003016 	blt	r19,zero,80f2ec <__muldf3+0x398>
  80f22c:	5825883a 	mov	r18,r11
  80f230:	3827883a 	mov	r19,r7
  80f234:	7abfef2e 	bgeu	r15,r10,80f1f4 <__muldf3+0x2a0>
  80f238:	da001015 	stw	r8,64(sp)
  80f23c:	00803fc4 	movi	r2,255
  80f240:	488e703a 	and	r7,r9,r2
  80f244:	00802004 	movi	r2,128
  80f248:	0007883a 	mov	r3,zero
  80f24c:	0011883a 	mov	r8,zero
  80f250:	38801826 	beq	r7,r2,80f2b4 <__muldf3+0x360>
  80f254:	008000c4 	movi	r2,3
  80f258:	d9000e04 	addi	r4,sp,56
  80f25c:	da801215 	stw	r10,72(sp)
  80f260:	d8800e15 	stw	r2,56(sp)
  80f264:	da401115 	stw	r9,68(sp)
  80f268:	003f6a06 	br	80f014 <__muldf3+0xc0>
  80f26c:	89802126 	beq	r17,r6,80f2f4 <__muldf3+0x3a0>
  80f270:	0009883a 	mov	r4,zero
  80f274:	5105883a 	add	r2,r10,r4
  80f278:	128d803a 	cmpltu	r6,r2,r10
  80f27c:	5d07883a 	add	r3,r11,r20
  80f280:	30cd883a 	add	r6,r6,r3
  80f284:	0021883a 	mov	r16,zero
  80f288:	0023883a 	mov	r17,zero
  80f28c:	1025883a 	mov	r18,r2
  80f290:	3027883a 	mov	r19,r6
  80f294:	32ff9e2e 	bgeu	r6,r11,80f110 <__muldf3+0x1bc>
  80f298:	00800044 	movi	r2,1
  80f29c:	8089883a 	add	r4,r16,r2
  80f2a0:	240d803a 	cmpltu	r6,r4,r16
  80f2a4:	344d883a 	add	r6,r6,r17
  80f2a8:	2021883a 	mov	r16,r4
  80f2ac:	3023883a 	mov	r17,r6
  80f2b0:	003f9806 	br	80f114 <__muldf3+0x1c0>
  80f2b4:	403fe71e 	bne	r8,zero,80f254 <__muldf3+0x300>
  80f2b8:	01004004 	movi	r4,256
  80f2bc:	4904703a 	and	r2,r9,r4
  80f2c0:	10c4b03a 	or	r2,r2,r3
  80f2c4:	103fe31e 	bne	r2,zero,80f254 <__muldf3+0x300>
  80f2c8:	94c4b03a 	or	r2,r18,r19
  80f2cc:	103fe126 	beq	r2,zero,80f254 <__muldf3+0x300>
  80f2d0:	49c5883a 	add	r2,r9,r7
  80f2d4:	1251803a 	cmpltu	r8,r2,r9
  80f2d8:	4291883a 	add	r8,r8,r10
  80f2dc:	013fc004 	movi	r4,-256
  80f2e0:	1112703a 	and	r9,r2,r4
  80f2e4:	4015883a 	mov	r10,r8
  80f2e8:	003fda06 	br	80f254 <__muldf3+0x300>
  80f2ec:	6813883a 	mov	r9,r13
  80f2f0:	003fce06 	br	80f22c <__muldf3+0x2d8>
  80f2f4:	143f7c36 	bltu	r2,r16,80f0e8 <__muldf3+0x194>
  80f2f8:	003fdd06 	br	80f270 <__muldf3+0x31c>
  80f2fc:	12bf852e 	bgeu	r2,r10,80f114 <__muldf3+0x1c0>
  80f300:	003fe506 	br	80f298 <__muldf3+0x344>
  80f304:	00800084 	movi	r2,2
  80f308:	20bf351e 	bne	r4,r2,80efe0 <__muldf3+0x8c>
  80f30c:	01002074 	movhi	r4,129
  80f310:	2114db04 	addi	r4,r4,21356
  80f314:	003f3f06 	br	80f014 <__muldf3+0xc0>

0080f318 <__divdf3>:
  80f318:	deffed04 	addi	sp,sp,-76
  80f31c:	dcc01115 	stw	r19,68(sp)
  80f320:	dcc00404 	addi	r19,sp,16
  80f324:	2011883a 	mov	r8,r4
  80f328:	2813883a 	mov	r9,r5
  80f32c:	dc000e15 	stw	r16,56(sp)
  80f330:	d809883a 	mov	r4,sp
  80f334:	980b883a 	mov	r5,r19
  80f338:	dc000904 	addi	r16,sp,36
  80f33c:	dfc01215 	stw	ra,72(sp)
  80f340:	da400115 	stw	r9,4(sp)
  80f344:	d9c00315 	stw	r7,12(sp)
  80f348:	da000015 	stw	r8,0(sp)
  80f34c:	d9800215 	stw	r6,8(sp)
  80f350:	dc801015 	stw	r18,64(sp)
  80f354:	dc400f15 	stw	r17,60(sp)
  80f358:	08102f40 	call	8102f4 <__unpack_d>
  80f35c:	d9000204 	addi	r4,sp,8
  80f360:	800b883a 	mov	r5,r16
  80f364:	08102f40 	call	8102f4 <__unpack_d>
  80f368:	d9000417 	ldw	r4,16(sp)
  80f36c:	00800044 	movi	r2,1
  80f370:	11000b2e 	bgeu	r2,r4,80f3a0 <__divdf3+0x88>
  80f374:	d9400917 	ldw	r5,36(sp)
  80f378:	1140762e 	bgeu	r2,r5,80f554 <__divdf3+0x23c>
  80f37c:	d8800517 	ldw	r2,20(sp)
  80f380:	d8c00a17 	ldw	r3,40(sp)
  80f384:	01800104 	movi	r6,4
  80f388:	10c4f03a 	xor	r2,r2,r3
  80f38c:	d8800515 	stw	r2,20(sp)
  80f390:	21800226 	beq	r4,r6,80f39c <__divdf3+0x84>
  80f394:	00800084 	movi	r2,2
  80f398:	2080141e 	bne	r4,r2,80f3ec <__divdf3+0xd4>
  80f39c:	29000926 	beq	r5,r4,80f3c4 <__divdf3+0xac>
  80f3a0:	9809883a 	mov	r4,r19
  80f3a4:	080ffe00 	call	80ffe0 <__pack_d>
  80f3a8:	dfc01217 	ldw	ra,72(sp)
  80f3ac:	dcc01117 	ldw	r19,68(sp)
  80f3b0:	dc801017 	ldw	r18,64(sp)
  80f3b4:	dc400f17 	ldw	r17,60(sp)
  80f3b8:	dc000e17 	ldw	r16,56(sp)
  80f3bc:	dec01304 	addi	sp,sp,76
  80f3c0:	f800283a 	ret
  80f3c4:	01002074 	movhi	r4,129
  80f3c8:	2114db04 	addi	r4,r4,21356
  80f3cc:	080ffe00 	call	80ffe0 <__pack_d>
  80f3d0:	dfc01217 	ldw	ra,72(sp)
  80f3d4:	dcc01117 	ldw	r19,68(sp)
  80f3d8:	dc801017 	ldw	r18,64(sp)
  80f3dc:	dc400f17 	ldw	r17,60(sp)
  80f3e0:	dc000e17 	ldw	r16,56(sp)
  80f3e4:	dec01304 	addi	sp,sp,76
  80f3e8:	f800283a 	ret
  80f3ec:	29805b26 	beq	r5,r6,80f55c <__divdf3+0x244>
  80f3f0:	28802d26 	beq	r5,r2,80f4a8 <__divdf3+0x190>
  80f3f4:	d8c00617 	ldw	r3,24(sp)
  80f3f8:	d8800b17 	ldw	r2,44(sp)
  80f3fc:	d9c00817 	ldw	r7,32(sp)
  80f400:	dc400d17 	ldw	r17,52(sp)
  80f404:	188bc83a 	sub	r5,r3,r2
  80f408:	d9800717 	ldw	r6,28(sp)
  80f40c:	dc000c17 	ldw	r16,48(sp)
  80f410:	d9400615 	stw	r5,24(sp)
  80f414:	3c403836 	bltu	r7,r17,80f4f8 <__divdf3+0x1e0>
  80f418:	89c03626 	beq	r17,r7,80f4f4 <__divdf3+0x1dc>
  80f41c:	0015883a 	mov	r10,zero
  80f420:	001d883a 	mov	r14,zero
  80f424:	02c40034 	movhi	r11,4096
  80f428:	001f883a 	mov	r15,zero
  80f42c:	003f883a 	mov	ra,zero
  80f430:	04800f44 	movi	r18,61
  80f434:	00000f06 	br	80f474 <__divdf3+0x15c>
  80f438:	601d883a 	mov	r14,r12
  80f43c:	681f883a 	mov	r15,r13
  80f440:	400d883a 	mov	r6,r8
  80f444:	100f883a 	mov	r7,r2
  80f448:	3191883a 	add	r8,r6,r6
  80f44c:	5808d07a 	srli	r4,r11,1
  80f450:	4185803a 	cmpltu	r2,r8,r6
  80f454:	39d3883a 	add	r9,r7,r7
  80f458:	28c6b03a 	or	r3,r5,r3
  80f45c:	1245883a 	add	r2,r2,r9
  80f460:	1815883a 	mov	r10,r3
  80f464:	2017883a 	mov	r11,r4
  80f468:	400d883a 	mov	r6,r8
  80f46c:	100f883a 	mov	r7,r2
  80f470:	fc801726 	beq	ra,r18,80f4d0 <__divdf3+0x1b8>
  80f474:	580a97fa 	slli	r5,r11,31
  80f478:	5006d07a 	srli	r3,r10,1
  80f47c:	ffc00044 	addi	ra,ra,1
  80f480:	3c7ff136 	bltu	r7,r17,80f448 <__divdf3+0x130>
  80f484:	3411c83a 	sub	r8,r6,r16
  80f488:	3205803a 	cmpltu	r2,r6,r8
  80f48c:	3c53c83a 	sub	r9,r7,r17
  80f490:	7298b03a 	or	r12,r14,r10
  80f494:	7adab03a 	or	r13,r15,r11
  80f498:	4885c83a 	sub	r2,r9,r2
  80f49c:	89ffe61e 	bne	r17,r7,80f438 <__divdf3+0x120>
  80f4a0:	343fe936 	bltu	r6,r16,80f448 <__divdf3+0x130>
  80f4a4:	003fe406 	br	80f438 <__divdf3+0x120>
  80f4a8:	9809883a 	mov	r4,r19
  80f4ac:	d9800415 	stw	r6,16(sp)
  80f4b0:	080ffe00 	call	80ffe0 <__pack_d>
  80f4b4:	dfc01217 	ldw	ra,72(sp)
  80f4b8:	dcc01117 	ldw	r19,68(sp)
  80f4bc:	dc801017 	ldw	r18,64(sp)
  80f4c0:	dc400f17 	ldw	r17,60(sp)
  80f4c4:	dc000e17 	ldw	r16,56(sp)
  80f4c8:	dec01304 	addi	sp,sp,76
  80f4cc:	f800283a 	ret
  80f4d0:	00803fc4 	movi	r2,255
  80f4d4:	7090703a 	and	r8,r14,r2
  80f4d8:	00802004 	movi	r2,128
  80f4dc:	0007883a 	mov	r3,zero
  80f4e0:	0013883a 	mov	r9,zero
  80f4e4:	40800d26 	beq	r8,r2,80f51c <__divdf3+0x204>
  80f4e8:	dbc00815 	stw	r15,32(sp)
  80f4ec:	db800715 	stw	r14,28(sp)
  80f4f0:	003fab06 	br	80f3a0 <__divdf3+0x88>
  80f4f4:	343fc92e 	bgeu	r6,r16,80f41c <__divdf3+0x104>
  80f4f8:	3185883a 	add	r2,r6,r6
  80f4fc:	1189803a 	cmpltu	r4,r2,r6
  80f500:	39c7883a 	add	r3,r7,r7
  80f504:	20c9883a 	add	r4,r4,r3
  80f508:	297fffc4 	addi	r5,r5,-1
  80f50c:	100d883a 	mov	r6,r2
  80f510:	200f883a 	mov	r7,r4
  80f514:	d9400615 	stw	r5,24(sp)
  80f518:	003fc006 	br	80f41c <__divdf3+0x104>
  80f51c:	483ff21e 	bne	r9,zero,80f4e8 <__divdf3+0x1d0>
  80f520:	01004004 	movi	r4,256
  80f524:	7104703a 	and	r2,r14,r4
  80f528:	10c4b03a 	or	r2,r2,r3
  80f52c:	103fee1e 	bne	r2,zero,80f4e8 <__divdf3+0x1d0>
  80f530:	31c4b03a 	or	r2,r6,r7
  80f534:	103fec26 	beq	r2,zero,80f4e8 <__divdf3+0x1d0>
  80f538:	7205883a 	add	r2,r14,r8
  80f53c:	1391803a 	cmpltu	r8,r2,r14
  80f540:	43d1883a 	add	r8,r8,r15
  80f544:	013fc004 	movi	r4,-256
  80f548:	111c703a 	and	r14,r2,r4
  80f54c:	401f883a 	mov	r15,r8
  80f550:	003fe506 	br	80f4e8 <__divdf3+0x1d0>
  80f554:	8009883a 	mov	r4,r16
  80f558:	003f9206 	br	80f3a4 <__divdf3+0x8c>
  80f55c:	9809883a 	mov	r4,r19
  80f560:	d8000715 	stw	zero,28(sp)
  80f564:	d8000815 	stw	zero,32(sp)
  80f568:	d8000615 	stw	zero,24(sp)
  80f56c:	003f8d06 	br	80f3a4 <__divdf3+0x8c>

0080f570 <__eqdf2>:
  80f570:	deffef04 	addi	sp,sp,-68
  80f574:	dc400f15 	stw	r17,60(sp)
  80f578:	dc400404 	addi	r17,sp,16
  80f57c:	2005883a 	mov	r2,r4
  80f580:	2807883a 	mov	r3,r5
  80f584:	dc000e15 	stw	r16,56(sp)
  80f588:	d809883a 	mov	r4,sp
  80f58c:	880b883a 	mov	r5,r17
  80f590:	dc000904 	addi	r16,sp,36
  80f594:	d8c00115 	stw	r3,4(sp)
  80f598:	d8800015 	stw	r2,0(sp)
  80f59c:	d9800215 	stw	r6,8(sp)
  80f5a0:	dfc01015 	stw	ra,64(sp)
  80f5a4:	d9c00315 	stw	r7,12(sp)
  80f5a8:	08102f40 	call	8102f4 <__unpack_d>
  80f5ac:	d9000204 	addi	r4,sp,8
  80f5b0:	800b883a 	mov	r5,r16
  80f5b4:	08102f40 	call	8102f4 <__unpack_d>
  80f5b8:	d8800417 	ldw	r2,16(sp)
  80f5bc:	00c00044 	movi	r3,1
  80f5c0:	180d883a 	mov	r6,r3
  80f5c4:	1880062e 	bgeu	r3,r2,80f5e0 <__eqdf2+0x70>
  80f5c8:	d8800917 	ldw	r2,36(sp)
  80f5cc:	8809883a 	mov	r4,r17
  80f5d0:	800b883a 	mov	r5,r16
  80f5d4:	1880022e 	bgeu	r3,r2,80f5e0 <__eqdf2+0x70>
  80f5d8:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f5dc:	100d883a 	mov	r6,r2
  80f5e0:	3005883a 	mov	r2,r6
  80f5e4:	dfc01017 	ldw	ra,64(sp)
  80f5e8:	dc400f17 	ldw	r17,60(sp)
  80f5ec:	dc000e17 	ldw	r16,56(sp)
  80f5f0:	dec01104 	addi	sp,sp,68
  80f5f4:	f800283a 	ret

0080f5f8 <__nedf2>:
  80f5f8:	deffef04 	addi	sp,sp,-68
  80f5fc:	dc400f15 	stw	r17,60(sp)
  80f600:	dc400404 	addi	r17,sp,16
  80f604:	2005883a 	mov	r2,r4
  80f608:	2807883a 	mov	r3,r5
  80f60c:	dc000e15 	stw	r16,56(sp)
  80f610:	d809883a 	mov	r4,sp
  80f614:	880b883a 	mov	r5,r17
  80f618:	dc000904 	addi	r16,sp,36
  80f61c:	d8c00115 	stw	r3,4(sp)
  80f620:	d8800015 	stw	r2,0(sp)
  80f624:	d9800215 	stw	r6,8(sp)
  80f628:	dfc01015 	stw	ra,64(sp)
  80f62c:	d9c00315 	stw	r7,12(sp)
  80f630:	08102f40 	call	8102f4 <__unpack_d>
  80f634:	d9000204 	addi	r4,sp,8
  80f638:	800b883a 	mov	r5,r16
  80f63c:	08102f40 	call	8102f4 <__unpack_d>
  80f640:	d8800417 	ldw	r2,16(sp)
  80f644:	00c00044 	movi	r3,1
  80f648:	180d883a 	mov	r6,r3
  80f64c:	1880062e 	bgeu	r3,r2,80f668 <__nedf2+0x70>
  80f650:	d8800917 	ldw	r2,36(sp)
  80f654:	8809883a 	mov	r4,r17
  80f658:	800b883a 	mov	r5,r16
  80f65c:	1880022e 	bgeu	r3,r2,80f668 <__nedf2+0x70>
  80f660:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f664:	100d883a 	mov	r6,r2
  80f668:	3005883a 	mov	r2,r6
  80f66c:	dfc01017 	ldw	ra,64(sp)
  80f670:	dc400f17 	ldw	r17,60(sp)
  80f674:	dc000e17 	ldw	r16,56(sp)
  80f678:	dec01104 	addi	sp,sp,68
  80f67c:	f800283a 	ret

0080f680 <__gtdf2>:
  80f680:	deffef04 	addi	sp,sp,-68
  80f684:	dc400f15 	stw	r17,60(sp)
  80f688:	dc400404 	addi	r17,sp,16
  80f68c:	2005883a 	mov	r2,r4
  80f690:	2807883a 	mov	r3,r5
  80f694:	dc000e15 	stw	r16,56(sp)
  80f698:	d809883a 	mov	r4,sp
  80f69c:	880b883a 	mov	r5,r17
  80f6a0:	dc000904 	addi	r16,sp,36
  80f6a4:	d8c00115 	stw	r3,4(sp)
  80f6a8:	d8800015 	stw	r2,0(sp)
  80f6ac:	d9800215 	stw	r6,8(sp)
  80f6b0:	dfc01015 	stw	ra,64(sp)
  80f6b4:	d9c00315 	stw	r7,12(sp)
  80f6b8:	08102f40 	call	8102f4 <__unpack_d>
  80f6bc:	d9000204 	addi	r4,sp,8
  80f6c0:	800b883a 	mov	r5,r16
  80f6c4:	08102f40 	call	8102f4 <__unpack_d>
  80f6c8:	d8800417 	ldw	r2,16(sp)
  80f6cc:	00c00044 	movi	r3,1
  80f6d0:	01bfffc4 	movi	r6,-1
  80f6d4:	1880062e 	bgeu	r3,r2,80f6f0 <__gtdf2+0x70>
  80f6d8:	d8800917 	ldw	r2,36(sp)
  80f6dc:	8809883a 	mov	r4,r17
  80f6e0:	800b883a 	mov	r5,r16
  80f6e4:	1880022e 	bgeu	r3,r2,80f6f0 <__gtdf2+0x70>
  80f6e8:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f6ec:	100d883a 	mov	r6,r2
  80f6f0:	3005883a 	mov	r2,r6
  80f6f4:	dfc01017 	ldw	ra,64(sp)
  80f6f8:	dc400f17 	ldw	r17,60(sp)
  80f6fc:	dc000e17 	ldw	r16,56(sp)
  80f700:	dec01104 	addi	sp,sp,68
  80f704:	f800283a 	ret

0080f708 <__gedf2>:
  80f708:	deffef04 	addi	sp,sp,-68
  80f70c:	dc400f15 	stw	r17,60(sp)
  80f710:	dc400404 	addi	r17,sp,16
  80f714:	2005883a 	mov	r2,r4
  80f718:	2807883a 	mov	r3,r5
  80f71c:	dc000e15 	stw	r16,56(sp)
  80f720:	d809883a 	mov	r4,sp
  80f724:	880b883a 	mov	r5,r17
  80f728:	dc000904 	addi	r16,sp,36
  80f72c:	d8c00115 	stw	r3,4(sp)
  80f730:	d8800015 	stw	r2,0(sp)
  80f734:	d9800215 	stw	r6,8(sp)
  80f738:	dfc01015 	stw	ra,64(sp)
  80f73c:	d9c00315 	stw	r7,12(sp)
  80f740:	08102f40 	call	8102f4 <__unpack_d>
  80f744:	d9000204 	addi	r4,sp,8
  80f748:	800b883a 	mov	r5,r16
  80f74c:	08102f40 	call	8102f4 <__unpack_d>
  80f750:	d8800417 	ldw	r2,16(sp)
  80f754:	00c00044 	movi	r3,1
  80f758:	01bfffc4 	movi	r6,-1
  80f75c:	1880062e 	bgeu	r3,r2,80f778 <__gedf2+0x70>
  80f760:	d8800917 	ldw	r2,36(sp)
  80f764:	8809883a 	mov	r4,r17
  80f768:	800b883a 	mov	r5,r16
  80f76c:	1880022e 	bgeu	r3,r2,80f778 <__gedf2+0x70>
  80f770:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f774:	100d883a 	mov	r6,r2
  80f778:	3005883a 	mov	r2,r6
  80f77c:	dfc01017 	ldw	ra,64(sp)
  80f780:	dc400f17 	ldw	r17,60(sp)
  80f784:	dc000e17 	ldw	r16,56(sp)
  80f788:	dec01104 	addi	sp,sp,68
  80f78c:	f800283a 	ret

0080f790 <__ltdf2>:
  80f790:	deffef04 	addi	sp,sp,-68
  80f794:	dc400f15 	stw	r17,60(sp)
  80f798:	dc400404 	addi	r17,sp,16
  80f79c:	2005883a 	mov	r2,r4
  80f7a0:	2807883a 	mov	r3,r5
  80f7a4:	dc000e15 	stw	r16,56(sp)
  80f7a8:	d809883a 	mov	r4,sp
  80f7ac:	880b883a 	mov	r5,r17
  80f7b0:	dc000904 	addi	r16,sp,36
  80f7b4:	d8c00115 	stw	r3,4(sp)
  80f7b8:	d8800015 	stw	r2,0(sp)
  80f7bc:	d9800215 	stw	r6,8(sp)
  80f7c0:	dfc01015 	stw	ra,64(sp)
  80f7c4:	d9c00315 	stw	r7,12(sp)
  80f7c8:	08102f40 	call	8102f4 <__unpack_d>
  80f7cc:	d9000204 	addi	r4,sp,8
  80f7d0:	800b883a 	mov	r5,r16
  80f7d4:	08102f40 	call	8102f4 <__unpack_d>
  80f7d8:	d8800417 	ldw	r2,16(sp)
  80f7dc:	00c00044 	movi	r3,1
  80f7e0:	180d883a 	mov	r6,r3
  80f7e4:	1880062e 	bgeu	r3,r2,80f800 <__ltdf2+0x70>
  80f7e8:	d8800917 	ldw	r2,36(sp)
  80f7ec:	8809883a 	mov	r4,r17
  80f7f0:	800b883a 	mov	r5,r16
  80f7f4:	1880022e 	bgeu	r3,r2,80f800 <__ltdf2+0x70>
  80f7f8:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f7fc:	100d883a 	mov	r6,r2
  80f800:	3005883a 	mov	r2,r6
  80f804:	dfc01017 	ldw	ra,64(sp)
  80f808:	dc400f17 	ldw	r17,60(sp)
  80f80c:	dc000e17 	ldw	r16,56(sp)
  80f810:	dec01104 	addi	sp,sp,68
  80f814:	f800283a 	ret

0080f818 <__ledf2>:
  80f818:	deffef04 	addi	sp,sp,-68
  80f81c:	dc400f15 	stw	r17,60(sp)
  80f820:	dc400404 	addi	r17,sp,16
  80f824:	2005883a 	mov	r2,r4
  80f828:	2807883a 	mov	r3,r5
  80f82c:	dc000e15 	stw	r16,56(sp)
  80f830:	d809883a 	mov	r4,sp
  80f834:	880b883a 	mov	r5,r17
  80f838:	dc000904 	addi	r16,sp,36
  80f83c:	d8c00115 	stw	r3,4(sp)
  80f840:	d8800015 	stw	r2,0(sp)
  80f844:	d9800215 	stw	r6,8(sp)
  80f848:	dfc01015 	stw	ra,64(sp)
  80f84c:	d9c00315 	stw	r7,12(sp)
  80f850:	08102f40 	call	8102f4 <__unpack_d>
  80f854:	d9000204 	addi	r4,sp,8
  80f858:	800b883a 	mov	r5,r16
  80f85c:	08102f40 	call	8102f4 <__unpack_d>
  80f860:	d8800417 	ldw	r2,16(sp)
  80f864:	00c00044 	movi	r3,1
  80f868:	180d883a 	mov	r6,r3
  80f86c:	1880062e 	bgeu	r3,r2,80f888 <__ledf2+0x70>
  80f870:	d8800917 	ldw	r2,36(sp)
  80f874:	8809883a 	mov	r4,r17
  80f878:	800b883a 	mov	r5,r16
  80f87c:	1880022e 	bgeu	r3,r2,80f888 <__ledf2+0x70>
  80f880:	081042c0 	call	81042c <__fpcmp_parts_d>
  80f884:	100d883a 	mov	r6,r2
  80f888:	3005883a 	mov	r2,r6
  80f88c:	dfc01017 	ldw	ra,64(sp)
  80f890:	dc400f17 	ldw	r17,60(sp)
  80f894:	dc000e17 	ldw	r16,56(sp)
  80f898:	dec01104 	addi	sp,sp,68
  80f89c:	f800283a 	ret

0080f8a0 <__floatsidf>:
  80f8a0:	2006d7fa 	srli	r3,r4,31
  80f8a4:	defff604 	addi	sp,sp,-40
  80f8a8:	008000c4 	movi	r2,3
  80f8ac:	dfc00915 	stw	ra,36(sp)
  80f8b0:	dcc00815 	stw	r19,32(sp)
  80f8b4:	dc800715 	stw	r18,28(sp)
  80f8b8:	dc400615 	stw	r17,24(sp)
  80f8bc:	dc000515 	stw	r16,20(sp)
  80f8c0:	d8800015 	stw	r2,0(sp)
  80f8c4:	d8c00115 	stw	r3,4(sp)
  80f8c8:	20000f1e 	bne	r4,zero,80f908 <__floatsidf+0x68>
  80f8cc:	00800084 	movi	r2,2
  80f8d0:	d8800015 	stw	r2,0(sp)
  80f8d4:	d809883a 	mov	r4,sp
  80f8d8:	080ffe00 	call	80ffe0 <__pack_d>
  80f8dc:	1009883a 	mov	r4,r2
  80f8e0:	180b883a 	mov	r5,r3
  80f8e4:	2005883a 	mov	r2,r4
  80f8e8:	2807883a 	mov	r3,r5
  80f8ec:	dfc00917 	ldw	ra,36(sp)
  80f8f0:	dcc00817 	ldw	r19,32(sp)
  80f8f4:	dc800717 	ldw	r18,28(sp)
  80f8f8:	dc400617 	ldw	r17,24(sp)
  80f8fc:	dc000517 	ldw	r16,20(sp)
  80f900:	dec00a04 	addi	sp,sp,40
  80f904:	f800283a 	ret
  80f908:	00800f04 	movi	r2,60
  80f90c:	1807003a 	cmpeq	r3,r3,zero
  80f910:	d8800215 	stw	r2,8(sp)
  80f914:	18001126 	beq	r3,zero,80f95c <__floatsidf+0xbc>
  80f918:	0027883a 	mov	r19,zero
  80f91c:	2025883a 	mov	r18,r4
  80f920:	d9000315 	stw	r4,12(sp)
  80f924:	dcc00415 	stw	r19,16(sp)
  80f928:	080fdc40 	call	80fdc4 <__clzsi2>
  80f92c:	11000744 	addi	r4,r2,29
  80f930:	013fe80e 	bge	zero,r4,80f8d4 <__floatsidf+0x34>
  80f934:	10bfff44 	addi	r2,r2,-3
  80f938:	10000c16 	blt	r2,zero,80f96c <__floatsidf+0xcc>
  80f93c:	90a2983a 	sll	r17,r18,r2
  80f940:	0021883a 	mov	r16,zero
  80f944:	d8800217 	ldw	r2,8(sp)
  80f948:	dc400415 	stw	r17,16(sp)
  80f94c:	dc000315 	stw	r16,12(sp)
  80f950:	1105c83a 	sub	r2,r2,r4
  80f954:	d8800215 	stw	r2,8(sp)
  80f958:	003fde06 	br	80f8d4 <__floatsidf+0x34>
  80f95c:	00a00034 	movhi	r2,32768
  80f960:	20800a26 	beq	r4,r2,80f98c <__floatsidf+0xec>
  80f964:	0109c83a 	sub	r4,zero,r4
  80f968:	003feb06 	br	80f918 <__floatsidf+0x78>
  80f96c:	9006d07a 	srli	r3,r18,1
  80f970:	008007c4 	movi	r2,31
  80f974:	1105c83a 	sub	r2,r2,r4
  80f978:	1886d83a 	srl	r3,r3,r2
  80f97c:	9922983a 	sll	r17,r19,r4
  80f980:	9120983a 	sll	r16,r18,r4
  80f984:	1c62b03a 	or	r17,r3,r17
  80f988:	003fee06 	br	80f944 <__floatsidf+0xa4>
  80f98c:	0009883a 	mov	r4,zero
  80f990:	01707834 	movhi	r5,49632
  80f994:	003fd306 	br	80f8e4 <__floatsidf+0x44>

0080f998 <__fixdfsi>:
  80f998:	defff804 	addi	sp,sp,-32
  80f99c:	2005883a 	mov	r2,r4
  80f9a0:	2807883a 	mov	r3,r5
  80f9a4:	d809883a 	mov	r4,sp
  80f9a8:	d9400204 	addi	r5,sp,8
  80f9ac:	d8c00115 	stw	r3,4(sp)
  80f9b0:	d8800015 	stw	r2,0(sp)
  80f9b4:	dfc00715 	stw	ra,28(sp)
  80f9b8:	08102f40 	call	8102f4 <__unpack_d>
  80f9bc:	d8c00217 	ldw	r3,8(sp)
  80f9c0:	00800084 	movi	r2,2
  80f9c4:	1880051e 	bne	r3,r2,80f9dc <__fixdfsi+0x44>
  80f9c8:	0007883a 	mov	r3,zero
  80f9cc:	1805883a 	mov	r2,r3
  80f9d0:	dfc00717 	ldw	ra,28(sp)
  80f9d4:	dec00804 	addi	sp,sp,32
  80f9d8:	f800283a 	ret
  80f9dc:	00800044 	movi	r2,1
  80f9e0:	10fff92e 	bgeu	r2,r3,80f9c8 <__fixdfsi+0x30>
  80f9e4:	00800104 	movi	r2,4
  80f9e8:	18800426 	beq	r3,r2,80f9fc <__fixdfsi+0x64>
  80f9ec:	d8c00417 	ldw	r3,16(sp)
  80f9f0:	183ff516 	blt	r3,zero,80f9c8 <__fixdfsi+0x30>
  80f9f4:	00800784 	movi	r2,30
  80f9f8:	10c0080e 	bge	r2,r3,80fa1c <__fixdfsi+0x84>
  80f9fc:	d8800317 	ldw	r2,12(sp)
  80fa00:	1000121e 	bne	r2,zero,80fa4c <__fixdfsi+0xb4>
  80fa04:	00e00034 	movhi	r3,32768
  80fa08:	18ffffc4 	addi	r3,r3,-1
  80fa0c:	1805883a 	mov	r2,r3
  80fa10:	dfc00717 	ldw	ra,28(sp)
  80fa14:	dec00804 	addi	sp,sp,32
  80fa18:	f800283a 	ret
  80fa1c:	00800f04 	movi	r2,60
  80fa20:	10d1c83a 	sub	r8,r2,r3
  80fa24:	40bff804 	addi	r2,r8,-32
  80fa28:	d9800517 	ldw	r6,20(sp)
  80fa2c:	d9c00617 	ldw	r7,24(sp)
  80fa30:	10000816 	blt	r2,zero,80fa54 <__fixdfsi+0xbc>
  80fa34:	3888d83a 	srl	r4,r7,r2
  80fa38:	d8800317 	ldw	r2,12(sp)
  80fa3c:	2007883a 	mov	r3,r4
  80fa40:	103fe226 	beq	r2,zero,80f9cc <__fixdfsi+0x34>
  80fa44:	0107c83a 	sub	r3,zero,r4
  80fa48:	003fe006 	br	80f9cc <__fixdfsi+0x34>
  80fa4c:	00e00034 	movhi	r3,32768
  80fa50:	003fde06 	br	80f9cc <__fixdfsi+0x34>
  80fa54:	39c7883a 	add	r3,r7,r7
  80fa58:	008007c4 	movi	r2,31
  80fa5c:	1205c83a 	sub	r2,r2,r8
  80fa60:	1886983a 	sll	r3,r3,r2
  80fa64:	3208d83a 	srl	r4,r6,r8
  80fa68:	1908b03a 	or	r4,r3,r4
  80fa6c:	003ff206 	br	80fa38 <__fixdfsi+0xa0>

0080fa70 <__truncdfsf2>:
  80fa70:	defff804 	addi	sp,sp,-32
  80fa74:	2005883a 	mov	r2,r4
  80fa78:	2807883a 	mov	r3,r5
  80fa7c:	d809883a 	mov	r4,sp
  80fa80:	d9400204 	addi	r5,sp,8
  80fa84:	d8c00115 	stw	r3,4(sp)
  80fa88:	d8800015 	stw	r2,0(sp)
  80fa8c:	dfc00715 	stw	ra,28(sp)
  80fa90:	08102f40 	call	8102f4 <__unpack_d>
  80fa94:	d9c00517 	ldw	r7,20(sp)
  80fa98:	da000617 	ldw	r8,24(sp)
  80fa9c:	02d00034 	movhi	r11,16384
  80faa0:	5affffc4 	addi	r11,r11,-1
  80faa4:	3812d7ba 	srli	r9,r7,30
  80faa8:	401a90ba 	slli	r13,r8,2
  80faac:	3ac4703a 	and	r2,r7,r11
  80fab0:	0007883a 	mov	r3,zero
  80fab4:	6a52b03a 	or	r9,r13,r9
  80fab8:	10c4b03a 	or	r2,r2,r3
  80fabc:	d9000217 	ldw	r4,8(sp)
  80fac0:	d9400317 	ldw	r5,12(sp)
  80fac4:	d9800417 	ldw	r6,16(sp)
  80fac8:	480f883a 	mov	r7,r9
  80facc:	10000126 	beq	r2,zero,80fad4 <__truncdfsf2+0x64>
  80fad0:	49c00054 	ori	r7,r9,1
  80fad4:	080ffb40 	call	80ffb4 <__make_fp>
  80fad8:	dfc00717 	ldw	ra,28(sp)
  80fadc:	dec00804 	addi	sp,sp,32
  80fae0:	f800283a 	ret

0080fae4 <__floatunsidf>:
  80fae4:	defff204 	addi	sp,sp,-56
  80fae8:	dfc00d15 	stw	ra,52(sp)
  80faec:	ddc00c15 	stw	r23,48(sp)
  80faf0:	dd800b15 	stw	r22,44(sp)
  80faf4:	dd400a15 	stw	r21,40(sp)
  80faf8:	dd000915 	stw	r20,36(sp)
  80fafc:	dcc00815 	stw	r19,32(sp)
  80fb00:	dc800715 	stw	r18,28(sp)
  80fb04:	dc400615 	stw	r17,24(sp)
  80fb08:	dc000515 	stw	r16,20(sp)
  80fb0c:	d8000115 	stw	zero,4(sp)
  80fb10:	20000f1e 	bne	r4,zero,80fb50 <__floatunsidf+0x6c>
  80fb14:	00800084 	movi	r2,2
  80fb18:	d8800015 	stw	r2,0(sp)
  80fb1c:	d809883a 	mov	r4,sp
  80fb20:	080ffe00 	call	80ffe0 <__pack_d>
  80fb24:	dfc00d17 	ldw	ra,52(sp)
  80fb28:	ddc00c17 	ldw	r23,48(sp)
  80fb2c:	dd800b17 	ldw	r22,44(sp)
  80fb30:	dd400a17 	ldw	r21,40(sp)
  80fb34:	dd000917 	ldw	r20,36(sp)
  80fb38:	dcc00817 	ldw	r19,32(sp)
  80fb3c:	dc800717 	ldw	r18,28(sp)
  80fb40:	dc400617 	ldw	r17,24(sp)
  80fb44:	dc000517 	ldw	r16,20(sp)
  80fb48:	dec00e04 	addi	sp,sp,56
  80fb4c:	f800283a 	ret
  80fb50:	008000c4 	movi	r2,3
  80fb54:	00c00f04 	movi	r3,60
  80fb58:	002f883a 	mov	r23,zero
  80fb5c:	202d883a 	mov	r22,r4
  80fb60:	d8800015 	stw	r2,0(sp)
  80fb64:	d8c00215 	stw	r3,8(sp)
  80fb68:	d9000315 	stw	r4,12(sp)
  80fb6c:	ddc00415 	stw	r23,16(sp)
  80fb70:	080fdc40 	call	80fdc4 <__clzsi2>
  80fb74:	12400744 	addi	r9,r2,29
  80fb78:	48000b16 	blt	r9,zero,80fba8 <__floatunsidf+0xc4>
  80fb7c:	483fe726 	beq	r9,zero,80fb1c <__floatunsidf+0x38>
  80fb80:	10bfff44 	addi	r2,r2,-3
  80fb84:	10002e16 	blt	r2,zero,80fc40 <__floatunsidf+0x15c>
  80fb88:	b0a2983a 	sll	r17,r22,r2
  80fb8c:	0021883a 	mov	r16,zero
  80fb90:	d8800217 	ldw	r2,8(sp)
  80fb94:	dc400415 	stw	r17,16(sp)
  80fb98:	dc000315 	stw	r16,12(sp)
  80fb9c:	1245c83a 	sub	r2,r2,r9
  80fba0:	d8800215 	stw	r2,8(sp)
  80fba4:	003fdd06 	br	80fb1c <__floatunsidf+0x38>
  80fba8:	0255c83a 	sub	r10,zero,r9
  80fbac:	51bff804 	addi	r6,r10,-32
  80fbb0:	30001b16 	blt	r6,zero,80fc20 <__floatunsidf+0x13c>
  80fbb4:	b9a8d83a 	srl	r20,r23,r6
  80fbb8:	002b883a 	mov	r21,zero
  80fbbc:	000f883a 	mov	r7,zero
  80fbc0:	01000044 	movi	r4,1
  80fbc4:	0011883a 	mov	r8,zero
  80fbc8:	30002516 	blt	r6,zero,80fc60 <__floatunsidf+0x17c>
  80fbcc:	21a6983a 	sll	r19,r4,r6
  80fbd0:	0025883a 	mov	r18,zero
  80fbd4:	00bfffc4 	movi	r2,-1
  80fbd8:	9089883a 	add	r4,r18,r2
  80fbdc:	988b883a 	add	r5,r19,r2
  80fbe0:	248d803a 	cmpltu	r6,r4,r18
  80fbe4:	314b883a 	add	r5,r6,r5
  80fbe8:	b104703a 	and	r2,r22,r4
  80fbec:	b946703a 	and	r3,r23,r5
  80fbf0:	10c4b03a 	or	r2,r2,r3
  80fbf4:	10000226 	beq	r2,zero,80fc00 <__floatunsidf+0x11c>
  80fbf8:	01c00044 	movi	r7,1
  80fbfc:	0011883a 	mov	r8,zero
  80fc00:	d9000217 	ldw	r4,8(sp)
  80fc04:	a1c4b03a 	or	r2,r20,r7
  80fc08:	aa06b03a 	or	r3,r21,r8
  80fc0c:	2249c83a 	sub	r4,r4,r9
  80fc10:	d8c00415 	stw	r3,16(sp)
  80fc14:	d9000215 	stw	r4,8(sp)
  80fc18:	d8800315 	stw	r2,12(sp)
  80fc1c:	003fbf06 	br	80fb1c <__floatunsidf+0x38>
  80fc20:	bdc7883a 	add	r3,r23,r23
  80fc24:	008007c4 	movi	r2,31
  80fc28:	1285c83a 	sub	r2,r2,r10
  80fc2c:	1886983a 	sll	r3,r3,r2
  80fc30:	b2a8d83a 	srl	r20,r22,r10
  80fc34:	baaad83a 	srl	r21,r23,r10
  80fc38:	1d28b03a 	or	r20,r3,r20
  80fc3c:	003fdf06 	br	80fbbc <__floatunsidf+0xd8>
  80fc40:	b006d07a 	srli	r3,r22,1
  80fc44:	008007c4 	movi	r2,31
  80fc48:	1245c83a 	sub	r2,r2,r9
  80fc4c:	1886d83a 	srl	r3,r3,r2
  80fc50:	ba62983a 	sll	r17,r23,r9
  80fc54:	b260983a 	sll	r16,r22,r9
  80fc58:	1c62b03a 	or	r17,r3,r17
  80fc5c:	003fcc06 	br	80fb90 <__floatunsidf+0xac>
  80fc60:	2006d07a 	srli	r3,r4,1
  80fc64:	008007c4 	movi	r2,31
  80fc68:	1285c83a 	sub	r2,r2,r10
  80fc6c:	18a6d83a 	srl	r19,r3,r2
  80fc70:	22a4983a 	sll	r18,r4,r10
  80fc74:	003fd706 	br	80fbd4 <__floatunsidf+0xf0>

0080fc78 <udivmodsi4>:
  80fc78:	29001b2e 	bgeu	r5,r4,80fce8 <udivmodsi4+0x70>
  80fc7c:	28001a16 	blt	r5,zero,80fce8 <udivmodsi4+0x70>
  80fc80:	00800044 	movi	r2,1
  80fc84:	0007883a 	mov	r3,zero
  80fc88:	01c007c4 	movi	r7,31
  80fc8c:	00000306 	br	80fc9c <udivmodsi4+0x24>
  80fc90:	19c01326 	beq	r3,r7,80fce0 <udivmodsi4+0x68>
  80fc94:	18c00044 	addi	r3,r3,1
  80fc98:	28000416 	blt	r5,zero,80fcac <udivmodsi4+0x34>
  80fc9c:	294b883a 	add	r5,r5,r5
  80fca0:	1085883a 	add	r2,r2,r2
  80fca4:	293ffa36 	bltu	r5,r4,80fc90 <udivmodsi4+0x18>
  80fca8:	10000d26 	beq	r2,zero,80fce0 <udivmodsi4+0x68>
  80fcac:	0007883a 	mov	r3,zero
  80fcb0:	21400236 	bltu	r4,r5,80fcbc <udivmodsi4+0x44>
  80fcb4:	2149c83a 	sub	r4,r4,r5
  80fcb8:	1886b03a 	or	r3,r3,r2
  80fcbc:	1004d07a 	srli	r2,r2,1
  80fcc0:	280ad07a 	srli	r5,r5,1
  80fcc4:	103ffa1e 	bne	r2,zero,80fcb0 <udivmodsi4+0x38>
  80fcc8:	30000226 	beq	r6,zero,80fcd4 <udivmodsi4+0x5c>
  80fccc:	2005883a 	mov	r2,r4
  80fcd0:	f800283a 	ret
  80fcd4:	1809883a 	mov	r4,r3
  80fcd8:	2005883a 	mov	r2,r4
  80fcdc:	f800283a 	ret
  80fce0:	0007883a 	mov	r3,zero
  80fce4:	003ff806 	br	80fcc8 <udivmodsi4+0x50>
  80fce8:	00800044 	movi	r2,1
  80fcec:	0007883a 	mov	r3,zero
  80fcf0:	003fef06 	br	80fcb0 <udivmodsi4+0x38>

0080fcf4 <__divsi3>:
  80fcf4:	defffe04 	addi	sp,sp,-8
  80fcf8:	dc000015 	stw	r16,0(sp)
  80fcfc:	dfc00115 	stw	ra,4(sp)
  80fd00:	0021883a 	mov	r16,zero
  80fd04:	20000c16 	blt	r4,zero,80fd38 <__divsi3+0x44>
  80fd08:	000d883a 	mov	r6,zero
  80fd0c:	28000e16 	blt	r5,zero,80fd48 <__divsi3+0x54>
  80fd10:	080fc780 	call	80fc78 <udivmodsi4>
  80fd14:	1007883a 	mov	r3,r2
  80fd18:	8005003a 	cmpeq	r2,r16,zero
  80fd1c:	1000011e 	bne	r2,zero,80fd24 <__divsi3+0x30>
  80fd20:	00c7c83a 	sub	r3,zero,r3
  80fd24:	1805883a 	mov	r2,r3
  80fd28:	dfc00117 	ldw	ra,4(sp)
  80fd2c:	dc000017 	ldw	r16,0(sp)
  80fd30:	dec00204 	addi	sp,sp,8
  80fd34:	f800283a 	ret
  80fd38:	0109c83a 	sub	r4,zero,r4
  80fd3c:	04000044 	movi	r16,1
  80fd40:	000d883a 	mov	r6,zero
  80fd44:	283ff20e 	bge	r5,zero,80fd10 <__divsi3+0x1c>
  80fd48:	014bc83a 	sub	r5,zero,r5
  80fd4c:	8021003a 	cmpeq	r16,r16,zero
  80fd50:	003fef06 	br	80fd10 <__divsi3+0x1c>

0080fd54 <__modsi3>:
  80fd54:	deffff04 	addi	sp,sp,-4
  80fd58:	dfc00015 	stw	ra,0(sp)
  80fd5c:	01800044 	movi	r6,1
  80fd60:	2807883a 	mov	r3,r5
  80fd64:	20000416 	blt	r4,zero,80fd78 <__modsi3+0x24>
  80fd68:	28000c16 	blt	r5,zero,80fd9c <__modsi3+0x48>
  80fd6c:	dfc00017 	ldw	ra,0(sp)
  80fd70:	dec00104 	addi	sp,sp,4
  80fd74:	080fc781 	jmpi	80fc78 <udivmodsi4>
  80fd78:	0109c83a 	sub	r4,zero,r4
  80fd7c:	28000b16 	blt	r5,zero,80fdac <__modsi3+0x58>
  80fd80:	180b883a 	mov	r5,r3
  80fd84:	01800044 	movi	r6,1
  80fd88:	080fc780 	call	80fc78 <udivmodsi4>
  80fd8c:	0085c83a 	sub	r2,zero,r2
  80fd90:	dfc00017 	ldw	ra,0(sp)
  80fd94:	dec00104 	addi	sp,sp,4
  80fd98:	f800283a 	ret
  80fd9c:	014bc83a 	sub	r5,zero,r5
  80fda0:	dfc00017 	ldw	ra,0(sp)
  80fda4:	dec00104 	addi	sp,sp,4
  80fda8:	080fc781 	jmpi	80fc78 <udivmodsi4>
  80fdac:	0147c83a 	sub	r3,zero,r5
  80fdb0:	003ff306 	br	80fd80 <__modsi3+0x2c>

0080fdb4 <__udivsi3>:
  80fdb4:	000d883a 	mov	r6,zero
  80fdb8:	080fc781 	jmpi	80fc78 <udivmodsi4>

0080fdbc <__umodsi3>:
  80fdbc:	01800044 	movi	r6,1
  80fdc0:	080fc781 	jmpi	80fc78 <udivmodsi4>

0080fdc4 <__clzsi2>:
  80fdc4:	00bfffd4 	movui	r2,65535
  80fdc8:	11000e36 	bltu	r2,r4,80fe04 <__clzsi2+0x40>
  80fdcc:	00803fc4 	movi	r2,255
  80fdd0:	01400204 	movi	r5,8
  80fdd4:	0007883a 	mov	r3,zero
  80fdd8:	11001036 	bltu	r2,r4,80fe1c <__clzsi2+0x58>
  80fddc:	000b883a 	mov	r5,zero
  80fde0:	20c6d83a 	srl	r3,r4,r3
  80fde4:	00802074 	movhi	r2,129
  80fde8:	1094e004 	addi	r2,r2,21376
  80fdec:	1887883a 	add	r3,r3,r2
  80fdf0:	18800003 	ldbu	r2,0(r3)
  80fdf4:	00c00804 	movi	r3,32
  80fdf8:	2885883a 	add	r2,r5,r2
  80fdfc:	1885c83a 	sub	r2,r3,r2
  80fe00:	f800283a 	ret
  80fe04:	01400404 	movi	r5,16
  80fe08:	00804034 	movhi	r2,256
  80fe0c:	10bfffc4 	addi	r2,r2,-1
  80fe10:	2807883a 	mov	r3,r5
  80fe14:	113ff22e 	bgeu	r2,r4,80fde0 <__clzsi2+0x1c>
  80fe18:	01400604 	movi	r5,24
  80fe1c:	2807883a 	mov	r3,r5
  80fe20:	20c6d83a 	srl	r3,r4,r3
  80fe24:	00802074 	movhi	r2,129
  80fe28:	1094e004 	addi	r2,r2,21376
  80fe2c:	1887883a 	add	r3,r3,r2
  80fe30:	18800003 	ldbu	r2,0(r3)
  80fe34:	00c00804 	movi	r3,32
  80fe38:	2885883a 	add	r2,r5,r2
  80fe3c:	1885c83a 	sub	r2,r3,r2
  80fe40:	f800283a 	ret

0080fe44 <__unpack_f>:
  80fe44:	21800017 	ldw	r6,0(r4)
  80fe48:	00c02034 	movhi	r3,128
  80fe4c:	18ffffc4 	addi	r3,r3,-1
  80fe50:	3004d5fa 	srli	r2,r6,23
  80fe54:	3008d7fa 	srli	r4,r6,31
  80fe58:	30ce703a 	and	r7,r6,r3
  80fe5c:	10c03fcc 	andi	r3,r2,255
  80fe60:	29000115 	stw	r4,4(r5)
  80fe64:	1800131e 	bne	r3,zero,80feb4 <__unpack_f+0x70>
  80fe68:	38000f26 	beq	r7,zero,80fea8 <__unpack_f+0x64>
  80fe6c:	380691fa 	slli	r3,r7,7
  80fe70:	01bfe084 	movi	r6,-126
  80fe74:	008000c4 	movi	r2,3
  80fe78:	01100034 	movhi	r4,16384
  80fe7c:	213fffc4 	addi	r4,r4,-1
  80fe80:	28800015 	stw	r2,0(r5)
  80fe84:	29800215 	stw	r6,8(r5)
  80fe88:	20c00536 	bltu	r4,r3,80fea0 <__unpack_f+0x5c>
  80fe8c:	3005883a 	mov	r2,r6
  80fe90:	18c7883a 	add	r3,r3,r3
  80fe94:	10bfffc4 	addi	r2,r2,-1
  80fe98:	20fffd2e 	bgeu	r4,r3,80fe90 <__unpack_f+0x4c>
  80fe9c:	28800215 	stw	r2,8(r5)
  80fea0:	28c00315 	stw	r3,12(r5)
  80fea4:	f800283a 	ret
  80fea8:	00800084 	movi	r2,2
  80feac:	28800015 	stw	r2,0(r5)
  80feb0:	f800283a 	ret
  80feb4:	00803fc4 	movi	r2,255
  80feb8:	18800826 	beq	r3,r2,80fedc <__unpack_f+0x98>
  80febc:	380491fa 	slli	r2,r7,7
  80fec0:	18ffe044 	addi	r3,r3,-127
  80fec4:	28c00215 	stw	r3,8(r5)
  80fec8:	10900034 	orhi	r2,r2,16384
  80fecc:	28800315 	stw	r2,12(r5)
  80fed0:	008000c4 	movi	r2,3
  80fed4:	28800015 	stw	r2,0(r5)
  80fed8:	f800283a 	ret
  80fedc:	3800031e 	bne	r7,zero,80feec <__unpack_f+0xa8>
  80fee0:	00800104 	movi	r2,4
  80fee4:	28800015 	stw	r2,0(r5)
  80fee8:	f800283a 	ret
  80feec:	3080042c 	andhi	r2,r6,16
  80fef0:	10000426 	beq	r2,zero,80ff04 <__unpack_f+0xc0>
  80fef4:	00800044 	movi	r2,1
  80fef8:	28800015 	stw	r2,0(r5)
  80fefc:	29c00315 	stw	r7,12(r5)
  80ff00:	f800283a 	ret
  80ff04:	28000015 	stw	zero,0(r5)
  80ff08:	003ffc06 	br	80fefc <__unpack_f+0xb8>

0080ff0c <__fpcmp_parts_f>:
  80ff0c:	21800017 	ldw	r6,0(r4)
  80ff10:	00c00044 	movi	r3,1
  80ff14:	19800a2e 	bgeu	r3,r6,80ff40 <__fpcmp_parts_f+0x34>
  80ff18:	28800017 	ldw	r2,0(r5)
  80ff1c:	1880082e 	bgeu	r3,r2,80ff40 <__fpcmp_parts_f+0x34>
  80ff20:	00c00104 	movi	r3,4
  80ff24:	30c01e26 	beq	r6,r3,80ffa0 <__fpcmp_parts_f+0x94>
  80ff28:	10c01a26 	beq	r2,r3,80ff94 <__fpcmp_parts_f+0x88>
  80ff2c:	00c00084 	movi	r3,2
  80ff30:	30c00526 	beq	r6,r3,80ff48 <__fpcmp_parts_f+0x3c>
  80ff34:	10c0071e 	bne	r2,r3,80ff54 <__fpcmp_parts_f+0x48>
  80ff38:	20800117 	ldw	r2,4(r4)
  80ff3c:	1000091e 	bne	r2,zero,80ff64 <__fpcmp_parts_f+0x58>
  80ff40:	00800044 	movi	r2,1
  80ff44:	f800283a 	ret
  80ff48:	10c0121e 	bne	r2,r3,80ff94 <__fpcmp_parts_f+0x88>
  80ff4c:	0005883a 	mov	r2,zero
  80ff50:	f800283a 	ret
  80ff54:	20c00117 	ldw	r3,4(r4)
  80ff58:	28800117 	ldw	r2,4(r5)
  80ff5c:	18800326 	beq	r3,r2,80ff6c <__fpcmp_parts_f+0x60>
  80ff60:	183ff726 	beq	r3,zero,80ff40 <__fpcmp_parts_f+0x34>
  80ff64:	00bfffc4 	movi	r2,-1
  80ff68:	f800283a 	ret
  80ff6c:	21800217 	ldw	r6,8(r4)
  80ff70:	28800217 	ldw	r2,8(r5)
  80ff74:	11bffa16 	blt	r2,r6,80ff60 <__fpcmp_parts_f+0x54>
  80ff78:	30800416 	blt	r6,r2,80ff8c <__fpcmp_parts_f+0x80>
  80ff7c:	21000317 	ldw	r4,12(r4)
  80ff80:	29400317 	ldw	r5,12(r5)
  80ff84:	293ff636 	bltu	r5,r4,80ff60 <__fpcmp_parts_f+0x54>
  80ff88:	217ff02e 	bgeu	r4,r5,80ff4c <__fpcmp_parts_f+0x40>
  80ff8c:	183fec1e 	bne	r3,zero,80ff40 <__fpcmp_parts_f+0x34>
  80ff90:	003ff406 	br	80ff64 <__fpcmp_parts_f+0x58>
  80ff94:	28800117 	ldw	r2,4(r5)
  80ff98:	103fe91e 	bne	r2,zero,80ff40 <__fpcmp_parts_f+0x34>
  80ff9c:	003ff106 	br	80ff64 <__fpcmp_parts_f+0x58>
  80ffa0:	11bfe51e 	bne	r2,r6,80ff38 <__fpcmp_parts_f+0x2c>
  80ffa4:	28c00117 	ldw	r3,4(r5)
  80ffa8:	20800117 	ldw	r2,4(r4)
  80ffac:	1885c83a 	sub	r2,r3,r2
  80ffb0:	f800283a 	ret

0080ffb4 <__make_fp>:
  80ffb4:	defffb04 	addi	sp,sp,-20
  80ffb8:	d9000015 	stw	r4,0(sp)
  80ffbc:	d809883a 	mov	r4,sp
  80ffc0:	dfc00415 	stw	ra,16(sp)
  80ffc4:	d9400115 	stw	r5,4(sp)
  80ffc8:	d9800215 	stw	r6,8(sp)
  80ffcc:	d9c00315 	stw	r7,12(sp)
  80ffd0:	08104f40 	call	8104f4 <__pack_f>
  80ffd4:	dfc00417 	ldw	ra,16(sp)
  80ffd8:	dec00504 	addi	sp,sp,20
  80ffdc:	f800283a 	ret

0080ffe0 <__pack_d>:
  80ffe0:	20c00017 	ldw	r3,0(r4)
  80ffe4:	defffd04 	addi	sp,sp,-12
  80ffe8:	dc000015 	stw	r16,0(sp)
  80ffec:	dc800215 	stw	r18,8(sp)
  80fff0:	dc400115 	stw	r17,4(sp)
  80fff4:	00800044 	movi	r2,1
  80fff8:	22000317 	ldw	r8,12(r4)
  80fffc:	001f883a 	mov	r15,zero
  810000:	22400417 	ldw	r9,16(r4)
  810004:	24000117 	ldw	r16,4(r4)
  810008:	10c0552e 	bgeu	r2,r3,810160 <__pack_d+0x180>
  81000c:	00800104 	movi	r2,4
  810010:	18804f26 	beq	r3,r2,810150 <__pack_d+0x170>
  810014:	00800084 	movi	r2,2
  810018:	18800226 	beq	r3,r2,810024 <__pack_d+0x44>
  81001c:	4244b03a 	or	r2,r8,r9
  810020:	10001a1e 	bne	r2,zero,81008c <__pack_d+0xac>
  810024:	000d883a 	mov	r6,zero
  810028:	000f883a 	mov	r7,zero
  81002c:	0011883a 	mov	r8,zero
  810030:	00800434 	movhi	r2,16
  810034:	10bfffc4 	addi	r2,r2,-1
  810038:	301d883a 	mov	r14,r6
  81003c:	3884703a 	and	r2,r7,r2
  810040:	400a953a 	slli	r5,r8,20
  810044:	79bffc2c 	andhi	r6,r15,65520
  810048:	308cb03a 	or	r6,r6,r2
  81004c:	00e00434 	movhi	r3,32784
  810050:	18ffffc4 	addi	r3,r3,-1
  810054:	800497fa 	slli	r2,r16,31
  810058:	30c6703a 	and	r3,r6,r3
  81005c:	1946b03a 	or	r3,r3,r5
  810060:	01600034 	movhi	r5,32768
  810064:	297fffc4 	addi	r5,r5,-1
  810068:	194a703a 	and	r5,r3,r5
  81006c:	288ab03a 	or	r5,r5,r2
  810070:	2807883a 	mov	r3,r5
  810074:	7005883a 	mov	r2,r14
  810078:	dc800217 	ldw	r18,8(sp)
  81007c:	dc400117 	ldw	r17,4(sp)
  810080:	dc000017 	ldw	r16,0(sp)
  810084:	dec00304 	addi	sp,sp,12
  810088:	f800283a 	ret
  81008c:	21000217 	ldw	r4,8(r4)
  810090:	00bf0084 	movi	r2,-1022
  810094:	20803f16 	blt	r4,r2,810194 <__pack_d+0x1b4>
  810098:	0080ffc4 	movi	r2,1023
  81009c:	11002c16 	blt	r2,r4,810150 <__pack_d+0x170>
  8100a0:	00803fc4 	movi	r2,255
  8100a4:	408c703a 	and	r6,r8,r2
  8100a8:	00802004 	movi	r2,128
  8100ac:	0007883a 	mov	r3,zero
  8100b0:	000f883a 	mov	r7,zero
  8100b4:	2280ffc4 	addi	r10,r4,1023
  8100b8:	30801e26 	beq	r6,r2,810134 <__pack_d+0x154>
  8100bc:	00801fc4 	movi	r2,127
  8100c0:	4089883a 	add	r4,r8,r2
  8100c4:	220d803a 	cmpltu	r6,r4,r8
  8100c8:	324d883a 	add	r6,r6,r9
  8100cc:	2011883a 	mov	r8,r4
  8100d0:	3013883a 	mov	r9,r6
  8100d4:	00880034 	movhi	r2,8192
  8100d8:	10bfffc4 	addi	r2,r2,-1
  8100dc:	12400d36 	bltu	r2,r9,810114 <__pack_d+0x134>
  8100e0:	4804963a 	slli	r2,r9,24
  8100e4:	400cd23a 	srli	r6,r8,8
  8100e8:	480ed23a 	srli	r7,r9,8
  8100ec:	013fffc4 	movi	r4,-1
  8100f0:	118cb03a 	or	r6,r2,r6
  8100f4:	01400434 	movhi	r5,16
  8100f8:	297fffc4 	addi	r5,r5,-1
  8100fc:	3104703a 	and	r2,r6,r4
  810100:	3946703a 	and	r3,r7,r5
  810104:	5201ffcc 	andi	r8,r10,2047
  810108:	100d883a 	mov	r6,r2
  81010c:	180f883a 	mov	r7,r3
  810110:	003fc706 	br	810030 <__pack_d+0x50>
  810114:	480897fa 	slli	r4,r9,31
  810118:	4004d07a 	srli	r2,r8,1
  81011c:	4806d07a 	srli	r3,r9,1
  810120:	52800044 	addi	r10,r10,1
  810124:	2084b03a 	or	r2,r4,r2
  810128:	1011883a 	mov	r8,r2
  81012c:	1813883a 	mov	r9,r3
  810130:	003feb06 	br	8100e0 <__pack_d+0x100>
  810134:	383fe11e 	bne	r7,zero,8100bc <__pack_d+0xdc>
  810138:	01004004 	movi	r4,256
  81013c:	4104703a 	and	r2,r8,r4
  810140:	10c4b03a 	or	r2,r2,r3
  810144:	103fe326 	beq	r2,zero,8100d4 <__pack_d+0xf4>
  810148:	3005883a 	mov	r2,r6
  81014c:	003fdc06 	br	8100c0 <__pack_d+0xe0>
  810150:	000d883a 	mov	r6,zero
  810154:	000f883a 	mov	r7,zero
  810158:	0201ffc4 	movi	r8,2047
  81015c:	003fb406 	br	810030 <__pack_d+0x50>
  810160:	0005883a 	mov	r2,zero
  810164:	00c00234 	movhi	r3,8
  810168:	408cb03a 	or	r6,r8,r2
  81016c:	48ceb03a 	or	r7,r9,r3
  810170:	013fffc4 	movi	r4,-1
  810174:	01400434 	movhi	r5,16
  810178:	297fffc4 	addi	r5,r5,-1
  81017c:	3104703a 	and	r2,r6,r4
  810180:	3946703a 	and	r3,r7,r5
  810184:	100d883a 	mov	r6,r2
  810188:	180f883a 	mov	r7,r3
  81018c:	0201ffc4 	movi	r8,2047
  810190:	003fa706 	br	810030 <__pack_d+0x50>
  810194:	1109c83a 	sub	r4,r2,r4
  810198:	00800e04 	movi	r2,56
  81019c:	11004316 	blt	r2,r4,8102ac <__pack_d+0x2cc>
  8101a0:	21fff804 	addi	r7,r4,-32
  8101a4:	38004516 	blt	r7,zero,8102bc <__pack_d+0x2dc>
  8101a8:	49d8d83a 	srl	r12,r9,r7
  8101ac:	001b883a 	mov	r13,zero
  8101b0:	0023883a 	mov	r17,zero
  8101b4:	01400044 	movi	r5,1
  8101b8:	0025883a 	mov	r18,zero
  8101bc:	38004716 	blt	r7,zero,8102dc <__pack_d+0x2fc>
  8101c0:	29d6983a 	sll	r11,r5,r7
  8101c4:	0015883a 	mov	r10,zero
  8101c8:	00bfffc4 	movi	r2,-1
  8101cc:	5089883a 	add	r4,r10,r2
  8101d0:	588b883a 	add	r5,r11,r2
  8101d4:	228d803a 	cmpltu	r6,r4,r10
  8101d8:	314b883a 	add	r5,r6,r5
  8101dc:	4104703a 	and	r2,r8,r4
  8101e0:	4946703a 	and	r3,r9,r5
  8101e4:	10c4b03a 	or	r2,r2,r3
  8101e8:	10000226 	beq	r2,zero,8101f4 <__pack_d+0x214>
  8101ec:	04400044 	movi	r17,1
  8101f0:	0025883a 	mov	r18,zero
  8101f4:	00803fc4 	movi	r2,255
  8101f8:	644eb03a 	or	r7,r12,r17
  8101fc:	3892703a 	and	r9,r7,r2
  810200:	00802004 	movi	r2,128
  810204:	6c90b03a 	or	r8,r13,r18
  810208:	0015883a 	mov	r10,zero
  81020c:	48801626 	beq	r9,r2,810268 <__pack_d+0x288>
  810210:	01001fc4 	movi	r4,127
  810214:	3905883a 	add	r2,r7,r4
  810218:	11cd803a 	cmpltu	r6,r2,r7
  81021c:	320d883a 	add	r6,r6,r8
  810220:	100f883a 	mov	r7,r2
  810224:	00840034 	movhi	r2,4096
  810228:	10bfffc4 	addi	r2,r2,-1
  81022c:	3011883a 	mov	r8,r6
  810230:	0007883a 	mov	r3,zero
  810234:	11801b36 	bltu	r2,r6,8102a4 <__pack_d+0x2c4>
  810238:	4004963a 	slli	r2,r8,24
  81023c:	3808d23a 	srli	r4,r7,8
  810240:	400ad23a 	srli	r5,r8,8
  810244:	1813883a 	mov	r9,r3
  810248:	1108b03a 	or	r4,r2,r4
  81024c:	00bfffc4 	movi	r2,-1
  810250:	00c00434 	movhi	r3,16
  810254:	18ffffc4 	addi	r3,r3,-1
  810258:	208c703a 	and	r6,r4,r2
  81025c:	28ce703a 	and	r7,r5,r3
  810260:	4a01ffcc 	andi	r8,r9,2047
  810264:	003f7206 	br	810030 <__pack_d+0x50>
  810268:	503fe91e 	bne	r10,zero,810210 <__pack_d+0x230>
  81026c:	01004004 	movi	r4,256
  810270:	3904703a 	and	r2,r7,r4
  810274:	0007883a 	mov	r3,zero
  810278:	10c4b03a 	or	r2,r2,r3
  81027c:	10000626 	beq	r2,zero,810298 <__pack_d+0x2b8>
  810280:	3a45883a 	add	r2,r7,r9
  810284:	11cd803a 	cmpltu	r6,r2,r7
  810288:	320d883a 	add	r6,r6,r8
  81028c:	100f883a 	mov	r7,r2
  810290:	3011883a 	mov	r8,r6
  810294:	0007883a 	mov	r3,zero
  810298:	00840034 	movhi	r2,4096
  81029c:	10bfffc4 	addi	r2,r2,-1
  8102a0:	123fe52e 	bgeu	r2,r8,810238 <__pack_d+0x258>
  8102a4:	00c00044 	movi	r3,1
  8102a8:	003fe306 	br	810238 <__pack_d+0x258>
  8102ac:	0009883a 	mov	r4,zero
  8102b0:	0013883a 	mov	r9,zero
  8102b4:	000b883a 	mov	r5,zero
  8102b8:	003fe406 	br	81024c <__pack_d+0x26c>
  8102bc:	4a47883a 	add	r3,r9,r9
  8102c0:	008007c4 	movi	r2,31
  8102c4:	1105c83a 	sub	r2,r2,r4
  8102c8:	1886983a 	sll	r3,r3,r2
  8102cc:	4118d83a 	srl	r12,r8,r4
  8102d0:	491ad83a 	srl	r13,r9,r4
  8102d4:	1b18b03a 	or	r12,r3,r12
  8102d8:	003fb506 	br	8101b0 <__pack_d+0x1d0>
  8102dc:	2806d07a 	srli	r3,r5,1
  8102e0:	008007c4 	movi	r2,31
  8102e4:	1105c83a 	sub	r2,r2,r4
  8102e8:	1896d83a 	srl	r11,r3,r2
  8102ec:	2914983a 	sll	r10,r5,r4
  8102f0:	003fb506 	br	8101c8 <__pack_d+0x1e8>

008102f4 <__unpack_d>:
  8102f4:	20c00117 	ldw	r3,4(r4)
  8102f8:	22400017 	ldw	r9,0(r4)
  8102fc:	00800434 	movhi	r2,16
  810300:	10bfffc4 	addi	r2,r2,-1
  810304:	1808d53a 	srli	r4,r3,20
  810308:	180cd7fa 	srli	r6,r3,31
  81030c:	1894703a 	and	r10,r3,r2
  810310:	2201ffcc 	andi	r8,r4,2047
  810314:	281b883a 	mov	r13,r5
  810318:	4817883a 	mov	r11,r9
  81031c:	29800115 	stw	r6,4(r5)
  810320:	5019883a 	mov	r12,r10
  810324:	40001e1e 	bne	r8,zero,8103a0 <__unpack_d+0xac>
  810328:	4a84b03a 	or	r2,r9,r10
  81032c:	10001926 	beq	r2,zero,810394 <__unpack_d+0xa0>
  810330:	4804d63a 	srli	r2,r9,24
  810334:	500c923a 	slli	r6,r10,8
  810338:	013f0084 	movi	r4,-1022
  81033c:	00c40034 	movhi	r3,4096
  810340:	18ffffc4 	addi	r3,r3,-1
  810344:	118cb03a 	or	r6,r2,r6
  810348:	008000c4 	movi	r2,3
  81034c:	480a923a 	slli	r5,r9,8
  810350:	68800015 	stw	r2,0(r13)
  810354:	69000215 	stw	r4,8(r13)
  810358:	19800b36 	bltu	r3,r6,810388 <__unpack_d+0x94>
  81035c:	200f883a 	mov	r7,r4
  810360:	1811883a 	mov	r8,r3
  810364:	2945883a 	add	r2,r5,r5
  810368:	1149803a 	cmpltu	r4,r2,r5
  81036c:	3187883a 	add	r3,r6,r6
  810370:	20c9883a 	add	r4,r4,r3
  810374:	100b883a 	mov	r5,r2
  810378:	200d883a 	mov	r6,r4
  81037c:	39ffffc4 	addi	r7,r7,-1
  810380:	413ff82e 	bgeu	r8,r4,810364 <__unpack_d+0x70>
  810384:	69c00215 	stw	r7,8(r13)
  810388:	69800415 	stw	r6,16(r13)
  81038c:	69400315 	stw	r5,12(r13)
  810390:	f800283a 	ret
  810394:	00800084 	movi	r2,2
  810398:	28800015 	stw	r2,0(r5)
  81039c:	f800283a 	ret
  8103a0:	0081ffc4 	movi	r2,2047
  8103a4:	40800f26 	beq	r8,r2,8103e4 <__unpack_d+0xf0>
  8103a8:	480cd63a 	srli	r6,r9,24
  8103ac:	5006923a 	slli	r3,r10,8
  8103b0:	4804923a 	slli	r2,r9,8
  8103b4:	0009883a 	mov	r4,zero
  8103b8:	30c6b03a 	or	r3,r6,r3
  8103bc:	01440034 	movhi	r5,4096
  8103c0:	110cb03a 	or	r6,r2,r4
  8103c4:	423f0044 	addi	r8,r8,-1023
  8103c8:	194eb03a 	or	r7,r3,r5
  8103cc:	008000c4 	movi	r2,3
  8103d0:	69c00415 	stw	r7,16(r13)
  8103d4:	6a000215 	stw	r8,8(r13)
  8103d8:	68800015 	stw	r2,0(r13)
  8103dc:	69800315 	stw	r6,12(r13)
  8103e0:	f800283a 	ret
  8103e4:	4a84b03a 	or	r2,r9,r10
  8103e8:	1000031e 	bne	r2,zero,8103f8 <__unpack_d+0x104>
  8103ec:	00800104 	movi	r2,4
  8103f0:	28800015 	stw	r2,0(r5)
  8103f4:	f800283a 	ret
  8103f8:	0009883a 	mov	r4,zero
  8103fc:	01400234 	movhi	r5,8
  810400:	4904703a 	and	r2,r9,r4
  810404:	5146703a 	and	r3,r10,r5
  810408:	10c4b03a 	or	r2,r2,r3
  81040c:	10000526 	beq	r2,zero,810424 <__unpack_d+0x130>
  810410:	00800044 	movi	r2,1
  810414:	68800015 	stw	r2,0(r13)
  810418:	6b000415 	stw	r12,16(r13)
  81041c:	6ac00315 	stw	r11,12(r13)
  810420:	f800283a 	ret
  810424:	68000015 	stw	zero,0(r13)
  810428:	003ffb06 	br	810418 <__unpack_d+0x124>

0081042c <__fpcmp_parts_d>:
  81042c:	21800017 	ldw	r6,0(r4)
  810430:	00c00044 	movi	r3,1
  810434:	19800a2e 	bgeu	r3,r6,810460 <__fpcmp_parts_d+0x34>
  810438:	28800017 	ldw	r2,0(r5)
  81043c:	1880082e 	bgeu	r3,r2,810460 <__fpcmp_parts_d+0x34>
  810440:	00c00104 	movi	r3,4
  810444:	30c02626 	beq	r6,r3,8104e0 <__fpcmp_parts_d+0xb4>
  810448:	10c02226 	beq	r2,r3,8104d4 <__fpcmp_parts_d+0xa8>
  81044c:	00c00084 	movi	r3,2
  810450:	30c00526 	beq	r6,r3,810468 <__fpcmp_parts_d+0x3c>
  810454:	10c0071e 	bne	r2,r3,810474 <__fpcmp_parts_d+0x48>
  810458:	20800117 	ldw	r2,4(r4)
  81045c:	1000091e 	bne	r2,zero,810484 <__fpcmp_parts_d+0x58>
  810460:	00800044 	movi	r2,1
  810464:	f800283a 	ret
  810468:	10c01a1e 	bne	r2,r3,8104d4 <__fpcmp_parts_d+0xa8>
  81046c:	0005883a 	mov	r2,zero
  810470:	f800283a 	ret
  810474:	22000117 	ldw	r8,4(r4)
  810478:	28800117 	ldw	r2,4(r5)
  81047c:	40800326 	beq	r8,r2,81048c <__fpcmp_parts_d+0x60>
  810480:	403ff726 	beq	r8,zero,810460 <__fpcmp_parts_d+0x34>
  810484:	00bfffc4 	movi	r2,-1
  810488:	f800283a 	ret
  81048c:	20c00217 	ldw	r3,8(r4)
  810490:	28800217 	ldw	r2,8(r5)
  810494:	10fffa16 	blt	r2,r3,810480 <__fpcmp_parts_d+0x54>
  810498:	18800916 	blt	r3,r2,8104c0 <__fpcmp_parts_d+0x94>
  81049c:	21c00417 	ldw	r7,16(r4)
  8104a0:	28c00417 	ldw	r3,16(r5)
  8104a4:	21800317 	ldw	r6,12(r4)
  8104a8:	28800317 	ldw	r2,12(r5)
  8104ac:	19fff436 	bltu	r3,r7,810480 <__fpcmp_parts_d+0x54>
  8104b0:	38c00526 	beq	r7,r3,8104c8 <__fpcmp_parts_d+0x9c>
  8104b4:	38c00236 	bltu	r7,r3,8104c0 <__fpcmp_parts_d+0x94>
  8104b8:	19ffec1e 	bne	r3,r7,81046c <__fpcmp_parts_d+0x40>
  8104bc:	30bfeb2e 	bgeu	r6,r2,81046c <__fpcmp_parts_d+0x40>
  8104c0:	403fe71e 	bne	r8,zero,810460 <__fpcmp_parts_d+0x34>
  8104c4:	003fef06 	br	810484 <__fpcmp_parts_d+0x58>
  8104c8:	11bffa2e 	bgeu	r2,r6,8104b4 <__fpcmp_parts_d+0x88>
  8104cc:	403fe426 	beq	r8,zero,810460 <__fpcmp_parts_d+0x34>
  8104d0:	003fec06 	br	810484 <__fpcmp_parts_d+0x58>
  8104d4:	28800117 	ldw	r2,4(r5)
  8104d8:	103fe11e 	bne	r2,zero,810460 <__fpcmp_parts_d+0x34>
  8104dc:	003fe906 	br	810484 <__fpcmp_parts_d+0x58>
  8104e0:	11bfdd1e 	bne	r2,r6,810458 <__fpcmp_parts_d+0x2c>
  8104e4:	28c00117 	ldw	r3,4(r5)
  8104e8:	20800117 	ldw	r2,4(r4)
  8104ec:	1885c83a 	sub	r2,r3,r2
  8104f0:	f800283a 	ret

008104f4 <__pack_f>:
  8104f4:	20c00017 	ldw	r3,0(r4)
  8104f8:	01c00044 	movi	r7,1
  8104fc:	21800317 	ldw	r6,12(r4)
  810500:	21400117 	ldw	r5,4(r4)
  810504:	38c02d2e 	bgeu	r7,r3,8105bc <__pack_f+0xc8>
  810508:	00800104 	movi	r2,4
  81050c:	18802826 	beq	r3,r2,8105b0 <__pack_f+0xbc>
  810510:	00800084 	movi	r2,2
  810514:	18800126 	beq	r3,r2,81051c <__pack_f+0x28>
  810518:	3000101e 	bne	r6,zero,81055c <__pack_f+0x68>
  81051c:	000d883a 	mov	r6,zero
  810520:	0007883a 	mov	r3,zero
  810524:	19003fcc 	andi	r4,r3,255
  810528:	200895fa 	slli	r4,r4,23
  81052c:	00c02034 	movhi	r3,128
  810530:	18ffffc4 	addi	r3,r3,-1
  810534:	30c6703a 	and	r3,r6,r3
  810538:	10a0002c 	andhi	r2,r2,32768
  81053c:	10c4b03a 	or	r2,r2,r3
  810540:	280a97fa 	slli	r5,r5,31
  810544:	1104b03a 	or	r2,r2,r4
  810548:	00e00034 	movhi	r3,32768
  81054c:	18ffffc4 	addi	r3,r3,-1
  810550:	10c4703a 	and	r2,r2,r3
  810554:	1144b03a 	or	r2,r2,r5
  810558:	f800283a 	ret
  81055c:	21000217 	ldw	r4,8(r4)
  810560:	00bfe084 	movi	r2,-126
  810564:	20801b16 	blt	r4,r2,8105d4 <__pack_f+0xe0>
  810568:	00801fc4 	movi	r2,127
  81056c:	11001016 	blt	r2,r4,8105b0 <__pack_f+0xbc>
  810570:	308e703a 	and	r7,r6,r2
  810574:	2087883a 	add	r3,r4,r2
  810578:	00801004 	movi	r2,64
  81057c:	38800526 	beq	r7,r2,810594 <__pack_f+0xa0>
  810580:	31800fc4 	addi	r6,r6,63
  810584:	30000716 	blt	r6,zero,8105a4 <__pack_f+0xb0>
  810588:	300490ba 	slli	r2,r6,2
  81058c:	100cd27a 	srli	r6,r2,9
  810590:	003fe406 	br	810524 <__pack_f+0x30>
  810594:	3080200c 	andi	r2,r6,128
  810598:	103ffa26 	beq	r2,zero,810584 <__pack_f+0x90>
  81059c:	31cd883a 	add	r6,r6,r7
  8105a0:	003ff806 	br	810584 <__pack_f+0x90>
  8105a4:	300cd07a 	srli	r6,r6,1
  8105a8:	18c00044 	addi	r3,r3,1
  8105ac:	003ff606 	br	810588 <__pack_f+0x94>
  8105b0:	000d883a 	mov	r6,zero
  8105b4:	00ffffc4 	movi	r3,-1
  8105b8:	003fda06 	br	810524 <__pack_f+0x30>
  8105bc:	31800434 	orhi	r6,r6,16
  8105c0:	00802034 	movhi	r2,128
  8105c4:	10bfffc4 	addi	r2,r2,-1
  8105c8:	308c703a 	and	r6,r6,r2
  8105cc:	00ffffc4 	movi	r3,-1
  8105d0:	003fd406 	br	810524 <__pack_f+0x30>
  8105d4:	1109c83a 	sub	r4,r2,r4
  8105d8:	00800644 	movi	r2,25
  8105dc:	11001216 	blt	r2,r4,810628 <__pack_f+0x134>
  8105e0:	3904983a 	sll	r2,r7,r4
  8105e4:	3106d83a 	srl	r3,r6,r4
  8105e8:	10bfffc4 	addi	r2,r2,-1
  8105ec:	3084703a 	and	r2,r6,r2
  8105f0:	1004c03a 	cmpne	r2,r2,zero
  8105f4:	1886b03a 	or	r3,r3,r2
  8105f8:	19001fcc 	andi	r4,r3,127
  8105fc:	00801004 	movi	r2,64
  810600:	20800c26 	beq	r4,r2,810634 <__pack_f+0x140>
  810604:	18c00fc4 	addi	r3,r3,63
  810608:	00900034 	movhi	r2,16384
  81060c:	10bfffc4 	addi	r2,r2,-1
  810610:	180cd1fa 	srli	r6,r3,7
  810614:	10c7803a 	cmpltu	r3,r2,r3
  810618:	00802034 	movhi	r2,128
  81061c:	10bfffc4 	addi	r2,r2,-1
  810620:	308c703a 	and	r6,r6,r2
  810624:	003fbf06 	br	810524 <__pack_f+0x30>
  810628:	0007883a 	mov	r3,zero
  81062c:	000d883a 	mov	r6,zero
  810630:	003ff906 	br	810618 <__pack_f+0x124>
  810634:	1880200c 	andi	r2,r3,128
  810638:	10000126 	beq	r2,zero,810640 <__pack_f+0x14c>
  81063c:	1907883a 	add	r3,r3,r4
  810640:	180cd1fa 	srli	r6,r3,7
  810644:	00900034 	movhi	r2,16384
  810648:	10bfffc4 	addi	r2,r2,-1
  81064c:	10c7803a 	cmpltu	r3,r2,r3
  810650:	003ff106 	br	810618 <__pack_f+0x124>

00810654 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810654:	defff404 	addi	sp,sp,-48
  810658:	df000b15 	stw	fp,44(sp)
  81065c:	df000b04 	addi	fp,sp,44
  810660:	e13ffb15 	stw	r4,-20(fp)
  810664:	e17ffc15 	stw	r5,-16(fp)
  810668:	e1bffd15 	stw	r6,-12(fp)
  81066c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810670:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810674:	008020b4 	movhi	r2,130
  810678:	10a3ab04 	addi	r2,r2,-29012
  81067c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810680:	1005003a 	cmpeq	r2,r2,zero
  810684:	1000411e 	bne	r2,zero,81078c <alt_alarm_start+0x138>
  {
    if (alarm)
  810688:	e0bffb17 	ldw	r2,-20(fp)
  81068c:	1005003a 	cmpeq	r2,r2,zero
  810690:	10003b1e 	bne	r2,zero,810780 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810694:	e0fffb17 	ldw	r3,-20(fp)
  810698:	e0bffd17 	ldw	r2,-12(fp)
  81069c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8106a0:	e0fffb17 	ldw	r3,-20(fp)
  8106a4:	e0bffe17 	ldw	r2,-8(fp)
  8106a8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106ac:	0005303a 	rdctl	r2,status
  8106b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106b4:	e0fff817 	ldw	r3,-32(fp)
  8106b8:	00bfff84 	movi	r2,-2
  8106bc:	1884703a 	and	r2,r3,r2
  8106c0:	1001703a 	wrctl	status,r2
  
  return context;
  8106c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8106c8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8106cc:	008020b4 	movhi	r2,130
  8106d0:	10a3ac04 	addi	r2,r2,-29008
  8106d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8106d8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8106dc:	e0fffc17 	ldw	r3,-16(fp)
  8106e0:	e0bff917 	ldw	r2,-28(fp)
  8106e4:	1885883a 	add	r2,r3,r2
  8106e8:	10c00044 	addi	r3,r2,1
  8106ec:	e0bffb17 	ldw	r2,-20(fp)
  8106f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8106f4:	e0bffb17 	ldw	r2,-20(fp)
  8106f8:	10c00217 	ldw	r3,8(r2)
  8106fc:	e0bff917 	ldw	r2,-28(fp)
  810700:	1880042e 	bgeu	r3,r2,810714 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810704:	e0fffb17 	ldw	r3,-20(fp)
  810708:	00800044 	movi	r2,1
  81070c:	18800405 	stb	r2,16(r3)
  810710:	00000206 	br	81071c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810714:	e0bffb17 	ldw	r2,-20(fp)
  810718:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81071c:	e0fffb17 	ldw	r3,-20(fp)
  810720:	00802074 	movhi	r2,129
  810724:	109c5e04 	addi	r2,r2,29048
  810728:	e0bff615 	stw	r2,-40(fp)
  81072c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810730:	e0fff717 	ldw	r3,-36(fp)
  810734:	e0bff617 	ldw	r2,-40(fp)
  810738:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81073c:	e0bff617 	ldw	r2,-40(fp)
  810740:	10c00017 	ldw	r3,0(r2)
  810744:	e0bff717 	ldw	r2,-36(fp)
  810748:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81074c:	e0bff617 	ldw	r2,-40(fp)
  810750:	10c00017 	ldw	r3,0(r2)
  810754:	e0bff717 	ldw	r2,-36(fp)
  810758:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81075c:	e0fff617 	ldw	r3,-40(fp)
  810760:	e0bff717 	ldw	r2,-36(fp)
  810764:	18800015 	stw	r2,0(r3)
  810768:	e0bffa17 	ldw	r2,-24(fp)
  81076c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810770:	e0bff517 	ldw	r2,-44(fp)
  810774:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810778:	e03fff15 	stw	zero,-4(fp)
  81077c:	00000506 	br	810794 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810780:	00bffa84 	movi	r2,-22
  810784:	e0bfff15 	stw	r2,-4(fp)
  810788:	00000206 	br	810794 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81078c:	00bfde84 	movi	r2,-134
  810790:	e0bfff15 	stw	r2,-4(fp)
  810794:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  810798:	e037883a 	mov	sp,fp
  81079c:	df000017 	ldw	fp,0(sp)
  8107a0:	dec00104 	addi	sp,sp,4
  8107a4:	f800283a 	ret

008107a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8107a8:	defff804 	addi	sp,sp,-32
  8107ac:	dfc00715 	stw	ra,28(sp)
  8107b0:	df000615 	stw	fp,24(sp)
  8107b4:	df000604 	addi	fp,sp,24
  8107b8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8107bc:	e0bffc17 	ldw	r2,-16(fp)
  8107c0:	1004803a 	cmplt	r2,r2,zero
  8107c4:	1000081e 	bne	r2,zero,8107e8 <close+0x40>
  8107c8:	e0bffc17 	ldw	r2,-16(fp)
  8107cc:	10800324 	muli	r2,r2,12
  8107d0:	1007883a 	mov	r3,r2
  8107d4:	00802074 	movhi	r2,129
  8107d8:	10975a04 	addi	r2,r2,23912
  8107dc:	1887883a 	add	r3,r3,r2
  8107e0:	e0ffff15 	stw	r3,-4(fp)
  8107e4:	00000106 	br	8107ec <close+0x44>
  8107e8:	e03fff15 	stw	zero,-4(fp)
  8107ec:	e0bfff17 	ldw	r2,-4(fp)
  8107f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8107f4:	e0bffb17 	ldw	r2,-20(fp)
  8107f8:	1005003a 	cmpeq	r2,r2,zero
  8107fc:	10001d1e 	bne	r2,zero,810874 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810800:	e0bffb17 	ldw	r2,-20(fp)
  810804:	10800017 	ldw	r2,0(r2)
  810808:	10800417 	ldw	r2,16(r2)
  81080c:	1005003a 	cmpeq	r2,r2,zero
  810810:	1000071e 	bne	r2,zero,810830 <close+0x88>
  810814:	e0bffb17 	ldw	r2,-20(fp)
  810818:	10800017 	ldw	r2,0(r2)
  81081c:	10800417 	ldw	r2,16(r2)
  810820:	e13ffb17 	ldw	r4,-20(fp)
  810824:	103ee83a 	callr	r2
  810828:	e0bffe15 	stw	r2,-8(fp)
  81082c:	00000106 	br	810834 <close+0x8c>
  810830:	e03ffe15 	stw	zero,-8(fp)
  810834:	e0bffe17 	ldw	r2,-8(fp)
  810838:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81083c:	e13ffc17 	ldw	r4,-16(fp)
  810840:	08114700 	call	811470 <alt_release_fd>
    if (rval < 0)
  810844:	e0bffa17 	ldw	r2,-24(fp)
  810848:	1004403a 	cmpge	r2,r2,zero
  81084c:	1000071e 	bne	r2,zero,81086c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  810850:	08108a40 	call	8108a4 <alt_get_errno>
  810854:	e0fffa17 	ldw	r3,-24(fp)
  810858:	00c7c83a 	sub	r3,zero,r3
  81085c:	10c00015 	stw	r3,0(r2)
      return -1;
  810860:	00bfffc4 	movi	r2,-1
  810864:	e0bffd15 	stw	r2,-12(fp)
  810868:	00000806 	br	81088c <close+0xe4>
    }
    return 0;
  81086c:	e03ffd15 	stw	zero,-12(fp)
  810870:	00000606 	br	81088c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810874:	08108a40 	call	8108a4 <alt_get_errno>
  810878:	1007883a 	mov	r3,r2
  81087c:	00801444 	movi	r2,81
  810880:	18800015 	stw	r2,0(r3)
    return -1;
  810884:	00bfffc4 	movi	r2,-1
  810888:	e0bffd15 	stw	r2,-12(fp)
  81088c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  810890:	e037883a 	mov	sp,fp
  810894:	dfc00117 	ldw	ra,4(sp)
  810898:	df000017 	ldw	fp,0(sp)
  81089c:	dec00204 	addi	sp,sp,8
  8108a0:	f800283a 	ret

008108a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8108a4:	defffd04 	addi	sp,sp,-12
  8108a8:	dfc00215 	stw	ra,8(sp)
  8108ac:	df000115 	stw	fp,4(sp)
  8108b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8108b4:	00802074 	movhi	r2,129
  8108b8:	109c5b04 	addi	r2,r2,29036
  8108bc:	10800017 	ldw	r2,0(r2)
  8108c0:	1005003a 	cmpeq	r2,r2,zero
  8108c4:	1000061e 	bne	r2,zero,8108e0 <alt_get_errno+0x3c>
  8108c8:	00802074 	movhi	r2,129
  8108cc:	109c5b04 	addi	r2,r2,29036
  8108d0:	10800017 	ldw	r2,0(r2)
  8108d4:	103ee83a 	callr	r2
  8108d8:	e0bfff15 	stw	r2,-4(fp)
  8108dc:	00000306 	br	8108ec <alt_get_errno+0x48>
  8108e0:	008020b4 	movhi	r2,130
  8108e4:	10a3a004 	addi	r2,r2,-29056
  8108e8:	e0bfff15 	stw	r2,-4(fp)
  8108ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8108f0:	e037883a 	mov	sp,fp
  8108f4:	dfc00117 	ldw	ra,4(sp)
  8108f8:	df000017 	ldw	fp,0(sp)
  8108fc:	dec00204 	addi	sp,sp,8
  810900:	f800283a 	ret

00810904 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810904:	defffc04 	addi	sp,sp,-16
  810908:	df000315 	stw	fp,12(sp)
  81090c:	df000304 	addi	fp,sp,12
  810910:	e13ffd15 	stw	r4,-12(fp)
  810914:	e17ffe15 	stw	r5,-8(fp)
  810918:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81091c:	e0bfff17 	ldw	r2,-4(fp)
}
  810920:	e037883a 	mov	sp,fp
  810924:	df000017 	ldw	fp,0(sp)
  810928:	dec00104 	addi	sp,sp,4
  81092c:	f800283a 	ret

00810930 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810930:	defff904 	addi	sp,sp,-28
  810934:	dfc00615 	stw	ra,24(sp)
  810938:	df000515 	stw	fp,20(sp)
  81093c:	df000504 	addi	fp,sp,20
  810940:	e13ffc15 	stw	r4,-16(fp)
  810944:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810948:	e0bffc17 	ldw	r2,-16(fp)
  81094c:	1004803a 	cmplt	r2,r2,zero
  810950:	1000081e 	bne	r2,zero,810974 <fstat+0x44>
  810954:	e0bffc17 	ldw	r2,-16(fp)
  810958:	10800324 	muli	r2,r2,12
  81095c:	1007883a 	mov	r3,r2
  810960:	00802074 	movhi	r2,129
  810964:	10975a04 	addi	r2,r2,23912
  810968:	1887883a 	add	r3,r3,r2
  81096c:	e0ffff15 	stw	r3,-4(fp)
  810970:	00000106 	br	810978 <fstat+0x48>
  810974:	e03fff15 	stw	zero,-4(fp)
  810978:	e0bfff17 	ldw	r2,-4(fp)
  81097c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810980:	e0bffb17 	ldw	r2,-20(fp)
  810984:	1005003a 	cmpeq	r2,r2,zero
  810988:	1000121e 	bne	r2,zero,8109d4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81098c:	e0bffb17 	ldw	r2,-20(fp)
  810990:	10800017 	ldw	r2,0(r2)
  810994:	10800817 	ldw	r2,32(r2)
  810998:	1005003a 	cmpeq	r2,r2,zero
  81099c:	1000081e 	bne	r2,zero,8109c0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8109a0:	e0bffb17 	ldw	r2,-20(fp)
  8109a4:	10800017 	ldw	r2,0(r2)
  8109a8:	10800817 	ldw	r2,32(r2)
  8109ac:	e13ffb17 	ldw	r4,-20(fp)
  8109b0:	e17ffd17 	ldw	r5,-12(fp)
  8109b4:	103ee83a 	callr	r2
  8109b8:	e0bffe15 	stw	r2,-8(fp)
  8109bc:	00000b06 	br	8109ec <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8109c0:	e0fffd17 	ldw	r3,-12(fp)
  8109c4:	00880004 	movi	r2,8192
  8109c8:	18800115 	stw	r2,4(r3)
      return 0;
  8109cc:	e03ffe15 	stw	zero,-8(fp)
  8109d0:	00000606 	br	8109ec <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8109d4:	0810a040 	call	810a04 <alt_get_errno>
  8109d8:	1007883a 	mov	r3,r2
  8109dc:	00801444 	movi	r2,81
  8109e0:	18800015 	stw	r2,0(r3)
    return -1;
  8109e4:	00bfffc4 	movi	r2,-1
  8109e8:	e0bffe15 	stw	r2,-8(fp)
  8109ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8109f0:	e037883a 	mov	sp,fp
  8109f4:	dfc00117 	ldw	ra,4(sp)
  8109f8:	df000017 	ldw	fp,0(sp)
  8109fc:	dec00204 	addi	sp,sp,8
  810a00:	f800283a 	ret

00810a04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a04:	defffd04 	addi	sp,sp,-12
  810a08:	dfc00215 	stw	ra,8(sp)
  810a0c:	df000115 	stw	fp,4(sp)
  810a10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810a14:	00802074 	movhi	r2,129
  810a18:	109c5b04 	addi	r2,r2,29036
  810a1c:	10800017 	ldw	r2,0(r2)
  810a20:	1005003a 	cmpeq	r2,r2,zero
  810a24:	1000061e 	bne	r2,zero,810a40 <alt_get_errno+0x3c>
  810a28:	00802074 	movhi	r2,129
  810a2c:	109c5b04 	addi	r2,r2,29036
  810a30:	10800017 	ldw	r2,0(r2)
  810a34:	103ee83a 	callr	r2
  810a38:	e0bfff15 	stw	r2,-4(fp)
  810a3c:	00000306 	br	810a4c <alt_get_errno+0x48>
  810a40:	008020b4 	movhi	r2,130
  810a44:	10a3a004 	addi	r2,r2,-29056
  810a48:	e0bfff15 	stw	r2,-4(fp)
  810a4c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a50:	e037883a 	mov	sp,fp
  810a54:	dfc00117 	ldw	ra,4(sp)
  810a58:	df000017 	ldw	fp,0(sp)
  810a5c:	dec00204 	addi	sp,sp,8
  810a60:	f800283a 	ret

00810a64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  810a64:	deffef04 	addi	sp,sp,-68
  810a68:	df001015 	stw	fp,64(sp)
  810a6c:	df001004 	addi	fp,sp,64
  810a70:	e13ffc15 	stw	r4,-16(fp)
  810a74:	e17ffd15 	stw	r5,-12(fp)
  810a78:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  810a7c:	00bffa84 	movi	r2,-22
  810a80:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810a84:	e0bffc17 	ldw	r2,-16(fp)
  810a88:	10800828 	cmpgeui	r2,r2,32
  810a8c:	1000601e 	bne	r2,zero,810c10 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a90:	0005303a 	rdctl	r2,status
  810a94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a98:	e0fff917 	ldw	r3,-28(fp)
  810a9c:	00bfff84 	movi	r2,-2
  810aa0:	1884703a 	and	r2,r3,r2
  810aa4:	1001703a 	wrctl	status,r2
  
  return context;
  810aa8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810aac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  810ab0:	e0bffc17 	ldw	r2,-16(fp)
  810ab4:	00c020b4 	movhi	r3,130
  810ab8:	18e40604 	addi	r3,r3,-28648
  810abc:	100490fa 	slli	r2,r2,3
  810ac0:	10c7883a 	add	r3,r2,r3
  810ac4:	e0bffe17 	ldw	r2,-8(fp)
  810ac8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  810acc:	e0bffc17 	ldw	r2,-16(fp)
  810ad0:	00c020b4 	movhi	r3,130
  810ad4:	18e40604 	addi	r3,r3,-28648
  810ad8:	100490fa 	slli	r2,r2,3
  810adc:	10c5883a 	add	r2,r2,r3
  810ae0:	10c00104 	addi	r3,r2,4
  810ae4:	e0bffd17 	ldw	r2,-12(fp)
  810ae8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810aec:	e0bffe17 	ldw	r2,-8(fp)
  810af0:	1005003a 	cmpeq	r2,r2,zero
  810af4:	1000201e 	bne	r2,zero,810b78 <alt_irq_register+0x114>
  810af8:	e0bffc17 	ldw	r2,-16(fp)
  810afc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b00:	0005303a 	rdctl	r2,status
  810b04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b08:	e0fff617 	ldw	r3,-40(fp)
  810b0c:	00bfff84 	movi	r2,-2
  810b10:	1884703a 	and	r2,r3,r2
  810b14:	1001703a 	wrctl	status,r2
  
  return context;
  810b18:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810b1c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810b20:	e0fff717 	ldw	r3,-36(fp)
  810b24:	00800044 	movi	r2,1
  810b28:	10c4983a 	sll	r2,r2,r3
  810b2c:	1007883a 	mov	r3,r2
  810b30:	008020b4 	movhi	r2,130
  810b34:	10a3a704 	addi	r2,r2,-29028
  810b38:	10800017 	ldw	r2,0(r2)
  810b3c:	1886b03a 	or	r3,r3,r2
  810b40:	008020b4 	movhi	r2,130
  810b44:	10a3a704 	addi	r2,r2,-29028
  810b48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810b4c:	008020b4 	movhi	r2,130
  810b50:	10a3a704 	addi	r2,r2,-29028
  810b54:	10800017 	ldw	r2,0(r2)
  810b58:	100170fa 	wrctl	ienable,r2
  810b5c:	e0bff817 	ldw	r2,-32(fp)
  810b60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b64:	e0bff517 	ldw	r2,-44(fp)
  810b68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810b6c:	0005883a 	mov	r2,zero
  810b70:	e0bfff15 	stw	r2,-4(fp)
  810b74:	00002006 	br	810bf8 <alt_irq_register+0x194>
  810b78:	e0bffc17 	ldw	r2,-16(fp)
  810b7c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b80:	0005303a 	rdctl	r2,status
  810b84:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b88:	e0fff217 	ldw	r3,-56(fp)
  810b8c:	00bfff84 	movi	r2,-2
  810b90:	1884703a 	and	r2,r3,r2
  810b94:	1001703a 	wrctl	status,r2
  
  return context;
  810b98:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810b9c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  810ba0:	e0fff317 	ldw	r3,-52(fp)
  810ba4:	00800044 	movi	r2,1
  810ba8:	10c4983a 	sll	r2,r2,r3
  810bac:	0084303a 	nor	r2,zero,r2
  810bb0:	1007883a 	mov	r3,r2
  810bb4:	008020b4 	movhi	r2,130
  810bb8:	10a3a704 	addi	r2,r2,-29028
  810bbc:	10800017 	ldw	r2,0(r2)
  810bc0:	1886703a 	and	r3,r3,r2
  810bc4:	008020b4 	movhi	r2,130
  810bc8:	10a3a704 	addi	r2,r2,-29028
  810bcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810bd0:	008020b4 	movhi	r2,130
  810bd4:	10a3a704 	addi	r2,r2,-29028
  810bd8:	10800017 	ldw	r2,0(r2)
  810bdc:	100170fa 	wrctl	ienable,r2
  810be0:	e0bff417 	ldw	r2,-48(fp)
  810be4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810be8:	e0bff117 	ldw	r2,-60(fp)
  810bec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810bf0:	0005883a 	mov	r2,zero
  810bf4:	e0bfff15 	stw	r2,-4(fp)
  810bf8:	e0bfff17 	ldw	r2,-4(fp)
  810bfc:	e0bffb15 	stw	r2,-20(fp)
  810c00:	e0bffa17 	ldw	r2,-24(fp)
  810c04:	e0bff015 	stw	r2,-64(fp)
  810c08:	e0bff017 	ldw	r2,-64(fp)
  810c0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810c10:	e0bffb17 	ldw	r2,-20(fp)
}
  810c14:	e037883a 	mov	sp,fp
  810c18:	df000017 	ldw	fp,0(sp)
  810c1c:	dec00104 	addi	sp,sp,4
  810c20:	f800283a 	ret

00810c24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810c24:	deffeb04 	addi	sp,sp,-84
  810c28:	dfc01415 	stw	ra,80(sp)
  810c2c:	df001315 	stw	fp,76(sp)
  810c30:	df001304 	addi	fp,sp,76
  810c34:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810c38:	e0bffd17 	ldw	r2,-12(fp)
  810c3c:	1004803a 	cmplt	r2,r2,zero
  810c40:	1000081e 	bne	r2,zero,810c64 <isatty+0x40>
  810c44:	e0bffd17 	ldw	r2,-12(fp)
  810c48:	10800324 	muli	r2,r2,12
  810c4c:	1007883a 	mov	r3,r2
  810c50:	00802074 	movhi	r2,129
  810c54:	10975a04 	addi	r2,r2,23912
  810c58:	1887883a 	add	r3,r3,r2
  810c5c:	e0ffff15 	stw	r3,-4(fp)
  810c60:	00000106 	br	810c68 <isatty+0x44>
  810c64:	e03fff15 	stw	zero,-4(fp)
  810c68:	e0bfff17 	ldw	r2,-4(fp)
  810c6c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810c70:	e0bfed17 	ldw	r2,-76(fp)
  810c74:	1005003a 	cmpeq	r2,r2,zero
  810c78:	10000f1e 	bne	r2,zero,810cb8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810c7c:	e0bfed17 	ldw	r2,-76(fp)
  810c80:	10800017 	ldw	r2,0(r2)
  810c84:	10800817 	ldw	r2,32(r2)
  810c88:	1004c03a 	cmpne	r2,r2,zero
  810c8c:	1000031e 	bne	r2,zero,810c9c <isatty+0x78>
    {
      return 1;
  810c90:	00800044 	movi	r2,1
  810c94:	e0bffe15 	stw	r2,-8(fp)
  810c98:	00000c06 	br	810ccc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810c9c:	e17fee04 	addi	r5,fp,-72
  810ca0:	e13ffd17 	ldw	r4,-12(fp)
  810ca4:	08109300 	call	810930 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810ca8:	e0bfef17 	ldw	r2,-68(fp)
  810cac:	10880020 	cmpeqi	r2,r2,8192
  810cb0:	e0bffe15 	stw	r2,-8(fp)
  810cb4:	00000506 	br	810ccc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810cb8:	0810ce40 	call	810ce4 <alt_get_errno>
  810cbc:	1007883a 	mov	r3,r2
  810cc0:	00801444 	movi	r2,81
  810cc4:	18800015 	stw	r2,0(r3)
    return 0;
  810cc8:	e03ffe15 	stw	zero,-8(fp)
  810ccc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810cd0:	e037883a 	mov	sp,fp
  810cd4:	dfc00117 	ldw	ra,4(sp)
  810cd8:	df000017 	ldw	fp,0(sp)
  810cdc:	dec00204 	addi	sp,sp,8
  810ce0:	f800283a 	ret

00810ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810ce4:	defffd04 	addi	sp,sp,-12
  810ce8:	dfc00215 	stw	ra,8(sp)
  810cec:	df000115 	stw	fp,4(sp)
  810cf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810cf4:	00802074 	movhi	r2,129
  810cf8:	109c5b04 	addi	r2,r2,29036
  810cfc:	10800017 	ldw	r2,0(r2)
  810d00:	1005003a 	cmpeq	r2,r2,zero
  810d04:	1000061e 	bne	r2,zero,810d20 <alt_get_errno+0x3c>
  810d08:	00802074 	movhi	r2,129
  810d0c:	109c5b04 	addi	r2,r2,29036
  810d10:	10800017 	ldw	r2,0(r2)
  810d14:	103ee83a 	callr	r2
  810d18:	e0bfff15 	stw	r2,-4(fp)
  810d1c:	00000306 	br	810d2c <alt_get_errno+0x48>
  810d20:	008020b4 	movhi	r2,130
  810d24:	10a3a004 	addi	r2,r2,-29056
  810d28:	e0bfff15 	stw	r2,-4(fp)
  810d2c:	e0bfff17 	ldw	r2,-4(fp)
}
  810d30:	e037883a 	mov	sp,fp
  810d34:	dfc00117 	ldw	ra,4(sp)
  810d38:	df000017 	ldw	fp,0(sp)
  810d3c:	dec00204 	addi	sp,sp,8
  810d40:	f800283a 	ret

00810d44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810d44:	defffe04 	addi	sp,sp,-8
  810d48:	dfc00115 	stw	ra,4(sp)
  810d4c:	df000015 	stw	fp,0(sp)
  810d50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810d54:	01002074 	movhi	r4,129
  810d58:	211c6104 	addi	r4,r4,29060
  810d5c:	01402074 	movhi	r5,129
  810d60:	29553104 	addi	r5,r5,21700
  810d64:	01802074 	movhi	r6,129
  810d68:	319c6104 	addi	r6,r6,29060
  810d6c:	0810dc40 	call	810dc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810d70:	01002034 	movhi	r4,128
  810d74:	21000804 	addi	r4,r4,32
  810d78:	01402034 	movhi	r5,128
  810d7c:	29400804 	addi	r5,r5,32
  810d80:	01802034 	movhi	r6,128
  810d84:	31806d04 	addi	r6,r6,436
  810d88:	0810dc40 	call	810dc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810d8c:	01002074 	movhi	r4,129
  810d90:	21135204 	addi	r4,r4,19784
  810d94:	01402074 	movhi	r5,129
  810d98:	29535204 	addi	r5,r5,19784
  810d9c:	01802074 	movhi	r6,129
  810da0:	31953104 	addi	r6,r6,21700
  810da4:	0810dc40 	call	810dc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810da8:	0813e4c0 	call	813e4c <alt_dcache_flush_all>
  alt_icache_flush_all();
  810dac:	08142d80 	call	8142d8 <alt_icache_flush_all>
}
  810db0:	e037883a 	mov	sp,fp
  810db4:	dfc00117 	ldw	ra,4(sp)
  810db8:	df000017 	ldw	fp,0(sp)
  810dbc:	dec00204 	addi	sp,sp,8
  810dc0:	f800283a 	ret

00810dc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810dc4:	defffc04 	addi	sp,sp,-16
  810dc8:	df000315 	stw	fp,12(sp)
  810dcc:	df000304 	addi	fp,sp,12
  810dd0:	e13ffd15 	stw	r4,-12(fp)
  810dd4:	e17ffe15 	stw	r5,-8(fp)
  810dd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810ddc:	e0fffe17 	ldw	r3,-8(fp)
  810de0:	e0bffd17 	ldw	r2,-12(fp)
  810de4:	18800e26 	beq	r3,r2,810e20 <alt_load_section+0x5c>
  {
    while( to != end )
  810de8:	00000a06 	br	810e14 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810dec:	e0bffd17 	ldw	r2,-12(fp)
  810df0:	10c00017 	ldw	r3,0(r2)
  810df4:	e0bffe17 	ldw	r2,-8(fp)
  810df8:	10c00015 	stw	r3,0(r2)
  810dfc:	e0bffe17 	ldw	r2,-8(fp)
  810e00:	10800104 	addi	r2,r2,4
  810e04:	e0bffe15 	stw	r2,-8(fp)
  810e08:	e0bffd17 	ldw	r2,-12(fp)
  810e0c:	10800104 	addi	r2,r2,4
  810e10:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810e14:	e0fffe17 	ldw	r3,-8(fp)
  810e18:	e0bfff17 	ldw	r2,-4(fp)
  810e1c:	18bff31e 	bne	r3,r2,810dec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810e20:	e037883a 	mov	sp,fp
  810e24:	df000017 	ldw	fp,0(sp)
  810e28:	dec00104 	addi	sp,sp,4
  810e2c:	f800283a 	ret

00810e30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810e30:	defff804 	addi	sp,sp,-32
  810e34:	dfc00715 	stw	ra,28(sp)
  810e38:	df000615 	stw	fp,24(sp)
  810e3c:	df000604 	addi	fp,sp,24
  810e40:	e13ffc15 	stw	r4,-16(fp)
  810e44:	e17ffd15 	stw	r5,-12(fp)
  810e48:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810e4c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810e50:	e0bffc17 	ldw	r2,-16(fp)
  810e54:	1004803a 	cmplt	r2,r2,zero
  810e58:	1000081e 	bne	r2,zero,810e7c <lseek+0x4c>
  810e5c:	e0bffc17 	ldw	r2,-16(fp)
  810e60:	10800324 	muli	r2,r2,12
  810e64:	1007883a 	mov	r3,r2
  810e68:	00802074 	movhi	r2,129
  810e6c:	10975a04 	addi	r2,r2,23912
  810e70:	1887883a 	add	r3,r3,r2
  810e74:	e0ffff15 	stw	r3,-4(fp)
  810e78:	00000106 	br	810e80 <lseek+0x50>
  810e7c:	e03fff15 	stw	zero,-4(fp)
  810e80:	e0bfff17 	ldw	r2,-4(fp)
  810e84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810e88:	e0bffb17 	ldw	r2,-20(fp)
  810e8c:	1005003a 	cmpeq	r2,r2,zero
  810e90:	1000111e 	bne	r2,zero,810ed8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810e94:	e0bffb17 	ldw	r2,-20(fp)
  810e98:	10800017 	ldw	r2,0(r2)
  810e9c:	10800717 	ldw	r2,28(r2)
  810ea0:	1005003a 	cmpeq	r2,r2,zero
  810ea4:	1000091e 	bne	r2,zero,810ecc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810ea8:	e0bffb17 	ldw	r2,-20(fp)
  810eac:	10800017 	ldw	r2,0(r2)
  810eb0:	10800717 	ldw	r2,28(r2)
  810eb4:	e13ffb17 	ldw	r4,-20(fp)
  810eb8:	e17ffd17 	ldw	r5,-12(fp)
  810ebc:	e1bffe17 	ldw	r6,-8(fp)
  810ec0:	103ee83a 	callr	r2
  810ec4:	e0bffa15 	stw	r2,-24(fp)
  810ec8:	00000506 	br	810ee0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810ecc:	00bfde84 	movi	r2,-134
  810ed0:	e0bffa15 	stw	r2,-24(fp)
  810ed4:	00000206 	br	810ee0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810ed8:	00bfebc4 	movi	r2,-81
  810edc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810ee0:	e0bffa17 	ldw	r2,-24(fp)
  810ee4:	1004403a 	cmpge	r2,r2,zero
  810ee8:	1000071e 	bne	r2,zero,810f08 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810eec:	0810f200 	call	810f20 <alt_get_errno>
  810ef0:	1007883a 	mov	r3,r2
  810ef4:	e0bffa17 	ldw	r2,-24(fp)
  810ef8:	0085c83a 	sub	r2,zero,r2
  810efc:	18800015 	stw	r2,0(r3)
    rc = -1;
  810f00:	00bfffc4 	movi	r2,-1
  810f04:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810f08:	e0bffa17 	ldw	r2,-24(fp)
}
  810f0c:	e037883a 	mov	sp,fp
  810f10:	dfc00117 	ldw	ra,4(sp)
  810f14:	df000017 	ldw	fp,0(sp)
  810f18:	dec00204 	addi	sp,sp,8
  810f1c:	f800283a 	ret

00810f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f20:	defffd04 	addi	sp,sp,-12
  810f24:	dfc00215 	stw	ra,8(sp)
  810f28:	df000115 	stw	fp,4(sp)
  810f2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810f30:	00802074 	movhi	r2,129
  810f34:	109c5b04 	addi	r2,r2,29036
  810f38:	10800017 	ldw	r2,0(r2)
  810f3c:	1005003a 	cmpeq	r2,r2,zero
  810f40:	1000061e 	bne	r2,zero,810f5c <alt_get_errno+0x3c>
  810f44:	00802074 	movhi	r2,129
  810f48:	109c5b04 	addi	r2,r2,29036
  810f4c:	10800017 	ldw	r2,0(r2)
  810f50:	103ee83a 	callr	r2
  810f54:	e0bfff15 	stw	r2,-4(fp)
  810f58:	00000306 	br	810f68 <alt_get_errno+0x48>
  810f5c:	008020b4 	movhi	r2,130
  810f60:	10a3a004 	addi	r2,r2,-29056
  810f64:	e0bfff15 	stw	r2,-4(fp)
  810f68:	e0bfff17 	ldw	r2,-4(fp)
}
  810f6c:	e037883a 	mov	sp,fp
  810f70:	dfc00117 	ldw	ra,4(sp)
  810f74:	df000017 	ldw	fp,0(sp)
  810f78:	dec00204 	addi	sp,sp,8
  810f7c:	f800283a 	ret

00810f80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810f80:	defffd04 	addi	sp,sp,-12
  810f84:	dfc00215 	stw	ra,8(sp)
  810f88:	df000115 	stw	fp,4(sp)
  810f8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810f90:	0009883a 	mov	r4,zero
  810f94:	08118b00 	call	8118b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810f98:	08118e40 	call	8118e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810f9c:	01002074 	movhi	r4,129
  810fa0:	21152304 	addi	r4,r4,21644
  810fa4:	01402074 	movhi	r5,129
  810fa8:	29552304 	addi	r5,r5,21644
  810fac:	01802074 	movhi	r6,129
  810fb0:	31952304 	addi	r6,r6,21644
  810fb4:	08146980 	call	814698 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810fb8:	0813fa40 	call	813fa4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810fbc:	01002074 	movhi	r4,129
  810fc0:	21100204 	addi	r4,r4,16392
  810fc4:	081493c0 	call	81493c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810fc8:	d1275d17 	ldw	r4,-25228(gp)
  810fcc:	d1675e17 	ldw	r5,-25224(gp)
  810fd0:	d1a75f17 	ldw	r6,-25220(gp)
  810fd4:	0800e600 	call	800e60 <main>
  810fd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810fdc:	01000044 	movi	r4,1
  810fe0:	08107a80 	call	8107a8 <close>
  exit (result);
  810fe4:	e13fff17 	ldw	r4,-4(fp)
  810fe8:	08149500 	call	814950 <exit>

00810fec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810fec:	defffe04 	addi	sp,sp,-8
  810ff0:	df000115 	stw	fp,4(sp)
  810ff4:	df000104 	addi	fp,sp,4
  810ff8:	e13fff15 	stw	r4,-4(fp)
}
  810ffc:	e037883a 	mov	sp,fp
  811000:	df000017 	ldw	fp,0(sp)
  811004:	dec00104 	addi	sp,sp,4
  811008:	f800283a 	ret

0081100c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81100c:	defffe04 	addi	sp,sp,-8
  811010:	df000115 	stw	fp,4(sp)
  811014:	df000104 	addi	fp,sp,4
  811018:	e13fff15 	stw	r4,-4(fp)
}
  81101c:	e037883a 	mov	sp,fp
  811020:	df000017 	ldw	fp,0(sp)
  811024:	dec00104 	addi	sp,sp,4
  811028:	f800283a 	ret

0081102c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81102c:	defffc04 	addi	sp,sp,-16
  811030:	df000315 	stw	fp,12(sp)
  811034:	df000304 	addi	fp,sp,12
  811038:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81103c:	e0bffe17 	ldw	r2,-8(fp)
  811040:	10800217 	ldw	r2,8(r2)
  811044:	10d00034 	orhi	r3,r2,16384
  811048:	e0bffe17 	ldw	r2,-8(fp)
  81104c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811050:	e03ffd15 	stw	zero,-12(fp)
  811054:	00002006 	br	8110d8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811058:	e0bffd17 	ldw	r2,-12(fp)
  81105c:	00c02074 	movhi	r3,129
  811060:	18d75a04 	addi	r3,r3,23912
  811064:	10800324 	muli	r2,r2,12
  811068:	10c5883a 	add	r2,r2,r3
  81106c:	10c00017 	ldw	r3,0(r2)
  811070:	e0bffe17 	ldw	r2,-8(fp)
  811074:	10800017 	ldw	r2,0(r2)
  811078:	1880141e 	bne	r3,r2,8110cc <alt_file_locked+0xa0>
  81107c:	e0bffd17 	ldw	r2,-12(fp)
  811080:	00c02074 	movhi	r3,129
  811084:	18d75a04 	addi	r3,r3,23912
  811088:	10800324 	muli	r2,r2,12
  81108c:	10c5883a 	add	r2,r2,r3
  811090:	10800204 	addi	r2,r2,8
  811094:	10800017 	ldw	r2,0(r2)
  811098:	1004403a 	cmpge	r2,r2,zero
  81109c:	10000b1e 	bne	r2,zero,8110cc <alt_file_locked+0xa0>
  8110a0:	e0bffd17 	ldw	r2,-12(fp)
  8110a4:	10800324 	muli	r2,r2,12
  8110a8:	1007883a 	mov	r3,r2
  8110ac:	00802074 	movhi	r2,129
  8110b0:	10975a04 	addi	r2,r2,23912
  8110b4:	1887883a 	add	r3,r3,r2
  8110b8:	e0bffe17 	ldw	r2,-8(fp)
  8110bc:	18800326 	beq	r3,r2,8110cc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8110c0:	00bffcc4 	movi	r2,-13
  8110c4:	e0bfff15 	stw	r2,-4(fp)
  8110c8:	00000a06 	br	8110f4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8110cc:	e0bffd17 	ldw	r2,-12(fp)
  8110d0:	10800044 	addi	r2,r2,1
  8110d4:	e0bffd15 	stw	r2,-12(fp)
  8110d8:	00802074 	movhi	r2,129
  8110dc:	109c5a04 	addi	r2,r2,29032
  8110e0:	10800017 	ldw	r2,0(r2)
  8110e4:	1007883a 	mov	r3,r2
  8110e8:	e0bffd17 	ldw	r2,-12(fp)
  8110ec:	18bfda2e 	bgeu	r3,r2,811058 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8110f0:	e03fff15 	stw	zero,-4(fp)
  8110f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8110f8:	e037883a 	mov	sp,fp
  8110fc:	df000017 	ldw	fp,0(sp)
  811100:	dec00104 	addi	sp,sp,4
  811104:	f800283a 	ret

00811108 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811108:	defff404 	addi	sp,sp,-48
  81110c:	dfc00b15 	stw	ra,44(sp)
  811110:	df000a15 	stw	fp,40(sp)
  811114:	df000a04 	addi	fp,sp,40
  811118:	e13ffb15 	stw	r4,-20(fp)
  81111c:	e17ffc15 	stw	r5,-16(fp)
  811120:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811124:	00bfffc4 	movi	r2,-1
  811128:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81112c:	00bffb44 	movi	r2,-19
  811130:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  811134:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811138:	e13ffb17 	ldw	r4,-20(fp)
  81113c:	01402074 	movhi	r5,129
  811140:	295c5804 	addi	r5,r5,29024
  811144:	081406c0 	call	81406c <alt_find_dev>
  811148:	e0bffa15 	stw	r2,-24(fp)
  81114c:	e0bffa17 	ldw	r2,-24(fp)
  811150:	1004c03a 	cmpne	r2,r2,zero
  811154:	1000051e 	bne	r2,zero,81116c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811158:	e13ffb17 	ldw	r4,-20(fp)
  81115c:	08141000 	call	814100 <alt_find_file>
  811160:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811164:	00800044 	movi	r2,1
  811168:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81116c:	e0bffa17 	ldw	r2,-24(fp)
  811170:	1005003a 	cmpeq	r2,r2,zero
  811174:	1000301e 	bne	r2,zero,811238 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811178:	e13ffa17 	ldw	r4,-24(fp)
  81117c:	08142200 	call	814220 <alt_get_fd>
  811180:	e0bff815 	stw	r2,-32(fp)
  811184:	e0bff817 	ldw	r2,-32(fp)
  811188:	1004403a 	cmpge	r2,r2,zero
  81118c:	1000031e 	bne	r2,zero,81119c <open+0x94>
    {
      status = index;
  811190:	e0bff817 	ldw	r2,-32(fp)
  811194:	e0bff715 	stw	r2,-36(fp)
  811198:	00002906 	br	811240 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81119c:	e0bff817 	ldw	r2,-32(fp)
  8111a0:	10800324 	muli	r2,r2,12
  8111a4:	1007883a 	mov	r3,r2
  8111a8:	00802074 	movhi	r2,129
  8111ac:	10975a04 	addi	r2,r2,23912
  8111b0:	1885883a 	add	r2,r3,r2
  8111b4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8111b8:	e0fffc17 	ldw	r3,-16(fp)
  8111bc:	00900034 	movhi	r2,16384
  8111c0:	10bfffc4 	addi	r2,r2,-1
  8111c4:	1886703a 	and	r3,r3,r2
  8111c8:	e0bff917 	ldw	r2,-28(fp)
  8111cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8111d0:	e0bff617 	ldw	r2,-40(fp)
  8111d4:	1004c03a 	cmpne	r2,r2,zero
  8111d8:	1000061e 	bne	r2,zero,8111f4 <open+0xec>
  8111dc:	e13ff917 	ldw	r4,-28(fp)
  8111e0:	081102c0 	call	81102c <alt_file_locked>
  8111e4:	e0bff715 	stw	r2,-36(fp)
  8111e8:	e0bff717 	ldw	r2,-36(fp)
  8111ec:	1004803a 	cmplt	r2,r2,zero
  8111f0:	1000131e 	bne	r2,zero,811240 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8111f4:	e0bffa17 	ldw	r2,-24(fp)
  8111f8:	10800317 	ldw	r2,12(r2)
  8111fc:	1005003a 	cmpeq	r2,r2,zero
  811200:	1000091e 	bne	r2,zero,811228 <open+0x120>
  811204:	e0bffa17 	ldw	r2,-24(fp)
  811208:	10800317 	ldw	r2,12(r2)
  81120c:	e13ff917 	ldw	r4,-28(fp)
  811210:	e17ffb17 	ldw	r5,-20(fp)
  811214:	e1bffc17 	ldw	r6,-16(fp)
  811218:	e1fffd17 	ldw	r7,-12(fp)
  81121c:	103ee83a 	callr	r2
  811220:	e0bfff15 	stw	r2,-4(fp)
  811224:	00000106 	br	81122c <open+0x124>
  811228:	e03fff15 	stw	zero,-4(fp)
  81122c:	e0bfff17 	ldw	r2,-4(fp)
  811230:	e0bff715 	stw	r2,-36(fp)
  811234:	00000206 	br	811240 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811238:	00bffb44 	movi	r2,-19
  81123c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811240:	e0bff717 	ldw	r2,-36(fp)
  811244:	1004403a 	cmpge	r2,r2,zero
  811248:	1000091e 	bne	r2,zero,811270 <open+0x168>
  {
    alt_release_fd (index);  
  81124c:	e13ff817 	ldw	r4,-32(fp)
  811250:	08114700 	call	811470 <alt_release_fd>
    ALT_ERRNO = -status;
  811254:	08112900 	call	811290 <alt_get_errno>
  811258:	e0fff717 	ldw	r3,-36(fp)
  81125c:	00c7c83a 	sub	r3,zero,r3
  811260:	10c00015 	stw	r3,0(r2)
    return -1;
  811264:	00bfffc4 	movi	r2,-1
  811268:	e0bffe15 	stw	r2,-8(fp)
  81126c:	00000206 	br	811278 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  811270:	e0bff817 	ldw	r2,-32(fp)
  811274:	e0bffe15 	stw	r2,-8(fp)
  811278:	e0bffe17 	ldw	r2,-8(fp)
}
  81127c:	e037883a 	mov	sp,fp
  811280:	dfc00117 	ldw	ra,4(sp)
  811284:	df000017 	ldw	fp,0(sp)
  811288:	dec00204 	addi	sp,sp,8
  81128c:	f800283a 	ret

00811290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811290:	defffd04 	addi	sp,sp,-12
  811294:	dfc00215 	stw	ra,8(sp)
  811298:	df000115 	stw	fp,4(sp)
  81129c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8112a0:	00802074 	movhi	r2,129
  8112a4:	109c5b04 	addi	r2,r2,29036
  8112a8:	10800017 	ldw	r2,0(r2)
  8112ac:	1005003a 	cmpeq	r2,r2,zero
  8112b0:	1000061e 	bne	r2,zero,8112cc <alt_get_errno+0x3c>
  8112b4:	00802074 	movhi	r2,129
  8112b8:	109c5b04 	addi	r2,r2,29036
  8112bc:	10800017 	ldw	r2,0(r2)
  8112c0:	103ee83a 	callr	r2
  8112c4:	e0bfff15 	stw	r2,-4(fp)
  8112c8:	00000306 	br	8112d8 <alt_get_errno+0x48>
  8112cc:	008020b4 	movhi	r2,130
  8112d0:	10a3a004 	addi	r2,r2,-29056
  8112d4:	e0bfff15 	stw	r2,-4(fp)
  8112d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8112dc:	e037883a 	mov	sp,fp
  8112e0:	dfc00117 	ldw	ra,4(sp)
  8112e4:	df000017 	ldw	fp,0(sp)
  8112e8:	dec00204 	addi	sp,sp,8
  8112ec:	f800283a 	ret

008112f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8112f0:	defff704 	addi	sp,sp,-36
  8112f4:	dfc00815 	stw	ra,32(sp)
  8112f8:	df000715 	stw	fp,28(sp)
  8112fc:	df000704 	addi	fp,sp,28
  811300:	e13ffb15 	stw	r4,-20(fp)
  811304:	e17ffc15 	stw	r5,-16(fp)
  811308:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81130c:	e0bffb17 	ldw	r2,-20(fp)
  811310:	1004803a 	cmplt	r2,r2,zero
  811314:	1000081e 	bne	r2,zero,811338 <read+0x48>
  811318:	e0bffb17 	ldw	r2,-20(fp)
  81131c:	10800324 	muli	r2,r2,12
  811320:	1007883a 	mov	r3,r2
  811324:	00802074 	movhi	r2,129
  811328:	10975a04 	addi	r2,r2,23912
  81132c:	1887883a 	add	r3,r3,r2
  811330:	e0ffff15 	stw	r3,-4(fp)
  811334:	00000106 	br	81133c <read+0x4c>
  811338:	e03fff15 	stw	zero,-4(fp)
  81133c:	e0bfff17 	ldw	r2,-4(fp)
  811340:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811344:	e0bffa17 	ldw	r2,-24(fp)
  811348:	1005003a 	cmpeq	r2,r2,zero
  81134c:	1000241e 	bne	r2,zero,8113e0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811350:	e0bffa17 	ldw	r2,-24(fp)
  811354:	10800217 	ldw	r2,8(r2)
  811358:	108000cc 	andi	r2,r2,3
  81135c:	10800060 	cmpeqi	r2,r2,1
  811360:	10001a1e 	bne	r2,zero,8113cc <read+0xdc>
  811364:	e0bffa17 	ldw	r2,-24(fp)
  811368:	10800017 	ldw	r2,0(r2)
  81136c:	10800517 	ldw	r2,20(r2)
  811370:	1005003a 	cmpeq	r2,r2,zero
  811374:	1000151e 	bne	r2,zero,8113cc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811378:	e0bffa17 	ldw	r2,-24(fp)
  81137c:	10800017 	ldw	r2,0(r2)
  811380:	10800517 	ldw	r2,20(r2)
  811384:	e17ffc17 	ldw	r5,-16(fp)
  811388:	e1bffd17 	ldw	r6,-12(fp)
  81138c:	e13ffa17 	ldw	r4,-24(fp)
  811390:	103ee83a 	callr	r2
  811394:	e0bff915 	stw	r2,-28(fp)
  811398:	e0bff917 	ldw	r2,-28(fp)
  81139c:	1004403a 	cmpge	r2,r2,zero
  8113a0:	1000071e 	bne	r2,zero,8113c0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  8113a4:	08114100 	call	811410 <alt_get_errno>
  8113a8:	e0fff917 	ldw	r3,-28(fp)
  8113ac:	00c7c83a 	sub	r3,zero,r3
  8113b0:	10c00015 	stw	r3,0(r2)
          return -1;
  8113b4:	00bfffc4 	movi	r2,-1
  8113b8:	e0bffe15 	stw	r2,-8(fp)
  8113bc:	00000e06 	br	8113f8 <read+0x108>
        }
        return rval;
  8113c0:	e0bff917 	ldw	r2,-28(fp)
  8113c4:	e0bffe15 	stw	r2,-8(fp)
  8113c8:	00000b06 	br	8113f8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8113cc:	08114100 	call	811410 <alt_get_errno>
  8113d0:	1007883a 	mov	r3,r2
  8113d4:	00800344 	movi	r2,13
  8113d8:	18800015 	stw	r2,0(r3)
  8113dc:	00000406 	br	8113f0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8113e0:	08114100 	call	811410 <alt_get_errno>
  8113e4:	1007883a 	mov	r3,r2
  8113e8:	00801444 	movi	r2,81
  8113ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8113f0:	00bfffc4 	movi	r2,-1
  8113f4:	e0bffe15 	stw	r2,-8(fp)
  8113f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8113fc:	e037883a 	mov	sp,fp
  811400:	dfc00117 	ldw	ra,4(sp)
  811404:	df000017 	ldw	fp,0(sp)
  811408:	dec00204 	addi	sp,sp,8
  81140c:	f800283a 	ret

00811410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811410:	defffd04 	addi	sp,sp,-12
  811414:	dfc00215 	stw	ra,8(sp)
  811418:	df000115 	stw	fp,4(sp)
  81141c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811420:	00802074 	movhi	r2,129
  811424:	109c5b04 	addi	r2,r2,29036
  811428:	10800017 	ldw	r2,0(r2)
  81142c:	1005003a 	cmpeq	r2,r2,zero
  811430:	1000061e 	bne	r2,zero,81144c <alt_get_errno+0x3c>
  811434:	00802074 	movhi	r2,129
  811438:	109c5b04 	addi	r2,r2,29036
  81143c:	10800017 	ldw	r2,0(r2)
  811440:	103ee83a 	callr	r2
  811444:	e0bfff15 	stw	r2,-4(fp)
  811448:	00000306 	br	811458 <alt_get_errno+0x48>
  81144c:	008020b4 	movhi	r2,130
  811450:	10a3a004 	addi	r2,r2,-29056
  811454:	e0bfff15 	stw	r2,-4(fp)
  811458:	e0bfff17 	ldw	r2,-4(fp)
}
  81145c:	e037883a 	mov	sp,fp
  811460:	dfc00117 	ldw	ra,4(sp)
  811464:	df000017 	ldw	fp,0(sp)
  811468:	dec00204 	addi	sp,sp,8
  81146c:	f800283a 	ret

00811470 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811470:	defffe04 	addi	sp,sp,-8
  811474:	df000115 	stw	fp,4(sp)
  811478:	df000104 	addi	fp,sp,4
  81147c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811480:	e0bfff17 	ldw	r2,-4(fp)
  811484:	108000d0 	cmplti	r2,r2,3
  811488:	10000d1e 	bne	r2,zero,8114c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  81148c:	e0bfff17 	ldw	r2,-4(fp)
  811490:	00c02074 	movhi	r3,129
  811494:	18d75a04 	addi	r3,r3,23912
  811498:	10800324 	muli	r2,r2,12
  81149c:	10c5883a 	add	r2,r2,r3
  8114a0:	10800204 	addi	r2,r2,8
  8114a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8114a8:	e0bfff17 	ldw	r2,-4(fp)
  8114ac:	00c02074 	movhi	r3,129
  8114b0:	18d75a04 	addi	r3,r3,23912
  8114b4:	10800324 	muli	r2,r2,12
  8114b8:	10c5883a 	add	r2,r2,r3
  8114bc:	10000015 	stw	zero,0(r2)
  }
}
  8114c0:	e037883a 	mov	sp,fp
  8114c4:	df000017 	ldw	fp,0(sp)
  8114c8:	dec00104 	addi	sp,sp,4
  8114cc:	f800283a 	ret

008114d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8114d0:	defff804 	addi	sp,sp,-32
  8114d4:	df000715 	stw	fp,28(sp)
  8114d8:	df000704 	addi	fp,sp,28
  8114dc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114e0:	0005303a 	rdctl	r2,status
  8114e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114e8:	e0fffb17 	ldw	r3,-20(fp)
  8114ec:	00bfff84 	movi	r2,-2
  8114f0:	1884703a 	and	r2,r3,r2
  8114f4:	1001703a 	wrctl	status,r2
  
  return context;
  8114f8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8114fc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811500:	d0a01217 	ldw	r2,-32696(gp)
  811504:	10c000c4 	addi	r3,r2,3
  811508:	00bfff04 	movi	r2,-4
  81150c:	1884703a 	and	r2,r3,r2
  811510:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811514:	d0e01217 	ldw	r3,-32696(gp)
  811518:	e0bffe17 	ldw	r2,-8(fp)
  81151c:	1887883a 	add	r3,r3,r2
  811520:	00804034 	movhi	r2,256
  811524:	10800004 	addi	r2,r2,0
  811528:	10c0072e 	bgeu	r2,r3,811548 <sbrk+0x78>
  81152c:	e0bffd17 	ldw	r2,-12(fp)
  811530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811534:	e0bffa17 	ldw	r2,-24(fp)
  811538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81153c:	00bfffc4 	movi	r2,-1
  811540:	e0bfff15 	stw	r2,-4(fp)
  811544:	00000c06 	br	811578 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  811548:	d0a01217 	ldw	r2,-32696(gp)
  81154c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811550:	d0e01217 	ldw	r3,-32696(gp)
  811554:	e0bffe17 	ldw	r2,-8(fp)
  811558:	1885883a 	add	r2,r3,r2
  81155c:	d0a01215 	stw	r2,-32696(gp)
  811560:	e0bffd17 	ldw	r2,-12(fp)
  811564:	e0bff915 	stw	r2,-28(fp)
  811568:	e0bff917 	ldw	r2,-28(fp)
  81156c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811570:	e0bffc17 	ldw	r2,-16(fp)
  811574:	e0bfff15 	stw	r2,-4(fp)
  811578:	e0bfff17 	ldw	r2,-4(fp)
} 
  81157c:	e037883a 	mov	sp,fp
  811580:	df000017 	ldw	fp,0(sp)
  811584:	dec00104 	addi	sp,sp,4
  811588:	f800283a 	ret

0081158c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81158c:	defffa04 	addi	sp,sp,-24
  811590:	df000515 	stw	fp,20(sp)
  811594:	df000504 	addi	fp,sp,20
  811598:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81159c:	0005303a 	rdctl	r2,status
  8115a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115a4:	e0fffd17 	ldw	r3,-12(fp)
  8115a8:	00bfff84 	movi	r2,-2
  8115ac:	1884703a 	and	r2,r3,r2
  8115b0:	1001703a 	wrctl	status,r2
  
  return context;
  8115b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8115b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8115bc:	e0bfff17 	ldw	r2,-4(fp)
  8115c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8115c4:	e0bffc17 	ldw	r2,-16(fp)
  8115c8:	10c00017 	ldw	r3,0(r2)
  8115cc:	e0bffc17 	ldw	r2,-16(fp)
  8115d0:	10800117 	ldw	r2,4(r2)
  8115d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8115d8:	e0bffc17 	ldw	r2,-16(fp)
  8115dc:	10c00117 	ldw	r3,4(r2)
  8115e0:	e0bffc17 	ldw	r2,-16(fp)
  8115e4:	10800017 	ldw	r2,0(r2)
  8115e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8115ec:	e0fffc17 	ldw	r3,-16(fp)
  8115f0:	e0bffc17 	ldw	r2,-16(fp)
  8115f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8115f8:	e0fffc17 	ldw	r3,-16(fp)
  8115fc:	e0bffc17 	ldw	r2,-16(fp)
  811600:	18800015 	stw	r2,0(r3)
  811604:	e0bffe17 	ldw	r2,-8(fp)
  811608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81160c:	e0bffb17 	ldw	r2,-20(fp)
  811610:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811614:	e037883a 	mov	sp,fp
  811618:	df000017 	ldw	fp,0(sp)
  81161c:	dec00104 	addi	sp,sp,4
  811620:	f800283a 	ret

00811624 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811624:	defffb04 	addi	sp,sp,-20
  811628:	dfc00415 	stw	ra,16(sp)
  81162c:	df000315 	stw	fp,12(sp)
  811630:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811634:	d0a01317 	ldw	r2,-32692(gp)
  811638:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81163c:	d0a76117 	ldw	r2,-25212(gp)
  811640:	10800044 	addi	r2,r2,1
  811644:	d0a76115 	stw	r2,-25212(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811648:	00003106 	br	811710 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81164c:	e0bffe17 	ldw	r2,-8(fp)
  811650:	10800017 	ldw	r2,0(r2)
  811654:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	10800403 	ldbu	r2,16(r2)
  811660:	10803fcc 	andi	r2,r2,255
  811664:	1005003a 	cmpeq	r2,r2,zero
  811668:	1000051e 	bne	r2,zero,811680 <alt_tick+0x5c>
  81166c:	d0a76117 	ldw	r2,-25212(gp)
  811670:	1004c03a 	cmpne	r2,r2,zero
  811674:	1000021e 	bne	r2,zero,811680 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811678:	e0bffe17 	ldw	r2,-8(fp)
  81167c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811680:	e0bffe17 	ldw	r2,-8(fp)
  811684:	10c00217 	ldw	r3,8(r2)
  811688:	d0a76117 	ldw	r2,-25212(gp)
  81168c:	10c01e36 	bltu	r2,r3,811708 <alt_tick+0xe4>
  811690:	e0bffe17 	ldw	r2,-8(fp)
  811694:	10800403 	ldbu	r2,16(r2)
  811698:	10803fcc 	andi	r2,r2,255
  81169c:	1004c03a 	cmpne	r2,r2,zero
  8116a0:	1000191e 	bne	r2,zero,811708 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8116a4:	e0bffe17 	ldw	r2,-8(fp)
  8116a8:	10c00317 	ldw	r3,12(r2)
  8116ac:	e0bffe17 	ldw	r2,-8(fp)
  8116b0:	11000517 	ldw	r4,20(r2)
  8116b4:	183ee83a 	callr	r3
  8116b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8116bc:	e0bffd17 	ldw	r2,-12(fp)
  8116c0:	1004c03a 	cmpne	r2,r2,zero
  8116c4:	1000031e 	bne	r2,zero,8116d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8116c8:	e13ffe17 	ldw	r4,-8(fp)
  8116cc:	081158c0 	call	81158c <alt_alarm_stop>
  8116d0:	00000d06 	br	811708 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8116d4:	e0bffe17 	ldw	r2,-8(fp)
  8116d8:	10c00217 	ldw	r3,8(r2)
  8116dc:	e0bffd17 	ldw	r2,-12(fp)
  8116e0:	1887883a 	add	r3,r3,r2
  8116e4:	e0bffe17 	ldw	r2,-8(fp)
  8116e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8116ec:	e0bffe17 	ldw	r2,-8(fp)
  8116f0:	10c00217 	ldw	r3,8(r2)
  8116f4:	d0a76117 	ldw	r2,-25212(gp)
  8116f8:	1880032e 	bgeu	r3,r2,811708 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8116fc:	e0fffe17 	ldw	r3,-8(fp)
  811700:	00800044 	movi	r2,1
  811704:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811708:	e0bfff17 	ldw	r2,-4(fp)
  81170c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811710:	d0e01304 	addi	r3,gp,-32692
  811714:	e0bffe17 	ldw	r2,-8(fp)
  811718:	10ffcc1e 	bne	r2,r3,81164c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81171c:	e037883a 	mov	sp,fp
  811720:	dfc00117 	ldw	ra,4(sp)
  811724:	df000017 	ldw	fp,0(sp)
  811728:	dec00204 	addi	sp,sp,8
  81172c:	f800283a 	ret

00811730 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811730:	defff704 	addi	sp,sp,-36
  811734:	dfc00815 	stw	ra,32(sp)
  811738:	df000715 	stw	fp,28(sp)
  81173c:	df000704 	addi	fp,sp,28
  811740:	e13ffb15 	stw	r4,-20(fp)
  811744:	e17ffc15 	stw	r5,-16(fp)
  811748:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81174c:	e0bffb17 	ldw	r2,-20(fp)
  811750:	1004803a 	cmplt	r2,r2,zero
  811754:	1000081e 	bne	r2,zero,811778 <write+0x48>
  811758:	e0bffb17 	ldw	r2,-20(fp)
  81175c:	10800324 	muli	r2,r2,12
  811760:	1007883a 	mov	r3,r2
  811764:	00802074 	movhi	r2,129
  811768:	10975a04 	addi	r2,r2,23912
  81176c:	1887883a 	add	r3,r3,r2
  811770:	e0ffff15 	stw	r3,-4(fp)
  811774:	00000106 	br	81177c <write+0x4c>
  811778:	e03fff15 	stw	zero,-4(fp)
  81177c:	e0bfff17 	ldw	r2,-4(fp)
  811780:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811784:	e0bffa17 	ldw	r2,-24(fp)
  811788:	1005003a 	cmpeq	r2,r2,zero
  81178c:	1000241e 	bne	r2,zero,811820 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811790:	e0bffa17 	ldw	r2,-24(fp)
  811794:	10800217 	ldw	r2,8(r2)
  811798:	108000cc 	andi	r2,r2,3
  81179c:	1005003a 	cmpeq	r2,r2,zero
  8117a0:	10001a1e 	bne	r2,zero,81180c <write+0xdc>
  8117a4:	e0bffa17 	ldw	r2,-24(fp)
  8117a8:	10800017 	ldw	r2,0(r2)
  8117ac:	10800617 	ldw	r2,24(r2)
  8117b0:	1005003a 	cmpeq	r2,r2,zero
  8117b4:	1000151e 	bne	r2,zero,81180c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8117b8:	e0bffa17 	ldw	r2,-24(fp)
  8117bc:	10800017 	ldw	r2,0(r2)
  8117c0:	10800617 	ldw	r2,24(r2)
  8117c4:	e17ffc17 	ldw	r5,-16(fp)
  8117c8:	e1bffd17 	ldw	r6,-12(fp)
  8117cc:	e13ffa17 	ldw	r4,-24(fp)
  8117d0:	103ee83a 	callr	r2
  8117d4:	e0bff915 	stw	r2,-28(fp)
  8117d8:	e0bff917 	ldw	r2,-28(fp)
  8117dc:	1004403a 	cmpge	r2,r2,zero
  8117e0:	1000071e 	bne	r2,zero,811800 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8117e4:	08118500 	call	811850 <alt_get_errno>
  8117e8:	e0fff917 	ldw	r3,-28(fp)
  8117ec:	00c7c83a 	sub	r3,zero,r3
  8117f0:	10c00015 	stw	r3,0(r2)
        return -1;
  8117f4:	00bfffc4 	movi	r2,-1
  8117f8:	e0bffe15 	stw	r2,-8(fp)
  8117fc:	00000e06 	br	811838 <write+0x108>
      }
      return rval;
  811800:	e0bff917 	ldw	r2,-28(fp)
  811804:	e0bffe15 	stw	r2,-8(fp)
  811808:	00000b06 	br	811838 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81180c:	08118500 	call	811850 <alt_get_errno>
  811810:	1007883a 	mov	r3,r2
  811814:	00800344 	movi	r2,13
  811818:	18800015 	stw	r2,0(r3)
  81181c:	00000406 	br	811830 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811820:	08118500 	call	811850 <alt_get_errno>
  811824:	1007883a 	mov	r3,r2
  811828:	00801444 	movi	r2,81
  81182c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811830:	00bfffc4 	movi	r2,-1
  811834:	e0bffe15 	stw	r2,-8(fp)
  811838:	e0bffe17 	ldw	r2,-8(fp)
}
  81183c:	e037883a 	mov	sp,fp
  811840:	dfc00117 	ldw	ra,4(sp)
  811844:	df000017 	ldw	fp,0(sp)
  811848:	dec00204 	addi	sp,sp,8
  81184c:	f800283a 	ret

00811850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811850:	defffd04 	addi	sp,sp,-12
  811854:	dfc00215 	stw	ra,8(sp)
  811858:	df000115 	stw	fp,4(sp)
  81185c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811860:	00802074 	movhi	r2,129
  811864:	109c5b04 	addi	r2,r2,29036
  811868:	10800017 	ldw	r2,0(r2)
  81186c:	1005003a 	cmpeq	r2,r2,zero
  811870:	1000061e 	bne	r2,zero,81188c <alt_get_errno+0x3c>
  811874:	00802074 	movhi	r2,129
  811878:	109c5b04 	addi	r2,r2,29036
  81187c:	10800017 	ldw	r2,0(r2)
  811880:	103ee83a 	callr	r2
  811884:	e0bfff15 	stw	r2,-4(fp)
  811888:	00000306 	br	811898 <alt_get_errno+0x48>
  81188c:	008020b4 	movhi	r2,130
  811890:	10a3a004 	addi	r2,r2,-29056
  811894:	e0bfff15 	stw	r2,-4(fp)
  811898:	e0bfff17 	ldw	r2,-4(fp)
}
  81189c:	e037883a 	mov	sp,fp
  8118a0:	dfc00117 	ldw	ra,4(sp)
  8118a4:	df000017 	ldw	fp,0(sp)
  8118a8:	dec00204 	addi	sp,sp,8
  8118ac:	f800283a 	ret

008118b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8118b0:	defffd04 	addi	sp,sp,-12
  8118b4:	dfc00215 	stw	ra,8(sp)
  8118b8:	df000115 	stw	fp,4(sp)
  8118bc:	df000104 	addi	fp,sp,4
  8118c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8118c4:	08147400 	call	814740 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8118c8:	00800044 	movi	r2,1
  8118cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8118d0:	e037883a 	mov	sp,fp
  8118d4:	dfc00117 	ldw	ra,4(sp)
  8118d8:	df000017 	ldw	fp,0(sp)
  8118dc:	dec00204 	addi	sp,sp,8
  8118e0:	f800283a 	ret

008118e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8118e4:	defffe04 	addi	sp,sp,-8
  8118e8:	dfc00115 	stw	ra,4(sp)
  8118ec:	df000015 	stw	fp,0(sp)
  8118f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8118f4:	01004074 	movhi	r4,257
  8118f8:	21040804 	addi	r4,r4,4128
  8118fc:	000b883a 	mov	r5,zero
  811900:	01800084 	movi	r6,2
  811904:	01c0fa04 	movi	r7,1000
  811908:	081340c0 	call	81340c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  81190c:	01002074 	movhi	r4,129
  811910:	2117c404 	addi	r4,r4,24336
  811914:	000b883a 	mov	r5,zero
  811918:	01800044 	movi	r6,1
  81191c:	0811af80 	call	811af8 <altera_avalon_jtag_uart_init>
  811920:	01002074 	movhi	r4,129
  811924:	2117ba04 	addi	r4,r4,24296
  811928:	08119780 	call	811978 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  81192c:	01002074 	movhi	r4,129
  811930:	211bdc04 	addi	r4,r4,28528
  811934:	08132080 	call	813208 <altera_avalon_lcd_16207_init>
  811938:	01002074 	movhi	r4,129
  81193c:	211bd204 	addi	r4,r4,28488
  811940:	08119780 	call	811978 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811944:	01002074 	movhi	r4,129
  811948:	211c2404 	addi	r4,r4,28816
  81194c:	000b883a 	mov	r5,zero
  811950:	000d883a 	mov	r6,zero
  811954:	08135940 	call	813594 <altera_avalon_uart_init>
  811958:	01002074 	movhi	r4,129
  81195c:	211c1a04 	addi	r4,r4,28776
  811960:	08119780 	call	811978 <alt_dev_reg>
}
  811964:	e037883a 	mov	sp,fp
  811968:	dfc00117 	ldw	ra,4(sp)
  81196c:	df000017 	ldw	fp,0(sp)
  811970:	dec00204 	addi	sp,sp,8
  811974:	f800283a 	ret

00811978 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811978:	defffd04 	addi	sp,sp,-12
  81197c:	dfc00215 	stw	ra,8(sp)
  811980:	df000115 	stw	fp,4(sp)
  811984:	df000104 	addi	fp,sp,4
  811988:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81198c:	e13fff17 	ldw	r4,-4(fp)
  811990:	01402074 	movhi	r5,129
  811994:	295c5804 	addi	r5,r5,29024
  811998:	0813e900 	call	813e90 <alt_dev_llist_insert>
}
  81199c:	e037883a 	mov	sp,fp
  8119a0:	dfc00117 	ldw	ra,4(sp)
  8119a4:	df000017 	ldw	fp,0(sp)
  8119a8:	dec00204 	addi	sp,sp,8
  8119ac:	f800283a 	ret

008119b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8119b0:	defffa04 	addi	sp,sp,-24
  8119b4:	dfc00515 	stw	ra,20(sp)
  8119b8:	df000415 	stw	fp,16(sp)
  8119bc:	df000404 	addi	fp,sp,16
  8119c0:	e13ffd15 	stw	r4,-12(fp)
  8119c4:	e17ffe15 	stw	r5,-8(fp)
  8119c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8119cc:	e0bffd17 	ldw	r2,-12(fp)
  8119d0:	10800017 	ldw	r2,0(r2)
  8119d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8119d8:	e0bffc17 	ldw	r2,-16(fp)
  8119dc:	11000a04 	addi	r4,r2,40
  8119e0:	e0bffd17 	ldw	r2,-12(fp)
  8119e4:	11c00217 	ldw	r7,8(r2)
  8119e8:	e17ffe17 	ldw	r5,-8(fp)
  8119ec:	e1bfff17 	ldw	r6,-4(fp)
  8119f0:	0811ff80 	call	811ff8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8119f4:	e037883a 	mov	sp,fp
  8119f8:	dfc00117 	ldw	ra,4(sp)
  8119fc:	df000017 	ldw	fp,0(sp)
  811a00:	dec00204 	addi	sp,sp,8
  811a04:	f800283a 	ret

00811a08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811a08:	defffa04 	addi	sp,sp,-24
  811a0c:	dfc00515 	stw	ra,20(sp)
  811a10:	df000415 	stw	fp,16(sp)
  811a14:	df000404 	addi	fp,sp,16
  811a18:	e13ffd15 	stw	r4,-12(fp)
  811a1c:	e17ffe15 	stw	r5,-8(fp)
  811a20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811a24:	e0bffd17 	ldw	r2,-12(fp)
  811a28:	10800017 	ldw	r2,0(r2)
  811a2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811a30:	e0bffc17 	ldw	r2,-16(fp)
  811a34:	11000a04 	addi	r4,r2,40
  811a38:	e0bffd17 	ldw	r2,-12(fp)
  811a3c:	11c00217 	ldw	r7,8(r2)
  811a40:	e17ffe17 	ldw	r5,-8(fp)
  811a44:	e1bfff17 	ldw	r6,-4(fp)
  811a48:	081221c0 	call	81221c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811a4c:	e037883a 	mov	sp,fp
  811a50:	dfc00117 	ldw	ra,4(sp)
  811a54:	df000017 	ldw	fp,0(sp)
  811a58:	dec00204 	addi	sp,sp,8
  811a5c:	f800283a 	ret

00811a60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811a60:	defffc04 	addi	sp,sp,-16
  811a64:	dfc00315 	stw	ra,12(sp)
  811a68:	df000215 	stw	fp,8(sp)
  811a6c:	df000204 	addi	fp,sp,8
  811a70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811a74:	e0bfff17 	ldw	r2,-4(fp)
  811a78:	10800017 	ldw	r2,0(r2)
  811a7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811a80:	e0bffe17 	ldw	r2,-8(fp)
  811a84:	11000a04 	addi	r4,r2,40
  811a88:	e0bfff17 	ldw	r2,-4(fp)
  811a8c:	11400217 	ldw	r5,8(r2)
  811a90:	0811e900 	call	811e90 <altera_avalon_jtag_uart_close>
}
  811a94:	e037883a 	mov	sp,fp
  811a98:	dfc00117 	ldw	ra,4(sp)
  811a9c:	df000017 	ldw	fp,0(sp)
  811aa0:	dec00204 	addi	sp,sp,8
  811aa4:	f800283a 	ret

00811aa8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811aa8:	defffa04 	addi	sp,sp,-24
  811aac:	dfc00515 	stw	ra,20(sp)
  811ab0:	df000415 	stw	fp,16(sp)
  811ab4:	df000404 	addi	fp,sp,16
  811ab8:	e13ffd15 	stw	r4,-12(fp)
  811abc:	e17ffe15 	stw	r5,-8(fp)
  811ac0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811ac4:	e0bffd17 	ldw	r2,-12(fp)
  811ac8:	10800017 	ldw	r2,0(r2)
  811acc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811ad0:	e0bffc17 	ldw	r2,-16(fp)
  811ad4:	11000a04 	addi	r4,r2,40
  811ad8:	e17ffe17 	ldw	r5,-8(fp)
  811adc:	e1bfff17 	ldw	r6,-4(fp)
  811ae0:	0811f040 	call	811f04 <altera_avalon_jtag_uart_ioctl>
}
  811ae4:	e037883a 	mov	sp,fp
  811ae8:	dfc00117 	ldw	ra,4(sp)
  811aec:	df000017 	ldw	fp,0(sp)
  811af0:	dec00204 	addi	sp,sp,8
  811af4:	f800283a 	ret

00811af8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811af8:	defffa04 	addi	sp,sp,-24
  811afc:	dfc00515 	stw	ra,20(sp)
  811b00:	df000415 	stw	fp,16(sp)
  811b04:	df000404 	addi	fp,sp,16
  811b08:	e13ffd15 	stw	r4,-12(fp)
  811b0c:	e17ffe15 	stw	r5,-8(fp)
  811b10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811b14:	e0fffd17 	ldw	r3,-12(fp)
  811b18:	00800044 	movi	r2,1
  811b1c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811b20:	e0bffd17 	ldw	r2,-12(fp)
  811b24:	10800017 	ldw	r2,0(r2)
  811b28:	11000104 	addi	r4,r2,4
  811b2c:	e0bffd17 	ldw	r2,-12(fp)
  811b30:	10800817 	ldw	r2,32(r2)
  811b34:	1007883a 	mov	r3,r2
  811b38:	2005883a 	mov	r2,r4
  811b3c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811b40:	e13ffe17 	ldw	r4,-8(fp)
  811b44:	e17fff17 	ldw	r5,-4(fp)
  811b48:	d8000015 	stw	zero,0(sp)
  811b4c:	01802074 	movhi	r6,129
  811b50:	3186ee04 	addi	r6,r6,7096
  811b54:	e1fffd17 	ldw	r7,-12(fp)
  811b58:	08143080 	call	814308 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811b5c:	e0bffd17 	ldw	r2,-12(fp)
  811b60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811b64:	e0bffd17 	ldw	r2,-12(fp)
  811b68:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811b6c:	008020b4 	movhi	r2,130
  811b70:	10a3ab04 	addi	r2,r2,-29012
  811b74:	10800017 	ldw	r2,0(r2)
  811b78:	100b883a 	mov	r5,r2
  811b7c:	01802074 	movhi	r6,129
  811b80:	31877804 	addi	r6,r6,7648
  811b84:	e1fffd17 	ldw	r7,-12(fp)
  811b88:	08106540 	call	810654 <alt_alarm_start>
  811b8c:	1004403a 	cmpge	r2,r2,zero
  811b90:	1000041e 	bne	r2,zero,811ba4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811b94:	e0fffd17 	ldw	r3,-12(fp)
  811b98:	00a00034 	movhi	r2,32768
  811b9c:	10bfffc4 	addi	r2,r2,-1
  811ba0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811ba4:	e037883a 	mov	sp,fp
  811ba8:	dfc00117 	ldw	ra,4(sp)
  811bac:	df000017 	ldw	fp,0(sp)
  811bb0:	dec00204 	addi	sp,sp,8
  811bb4:	f800283a 	ret

00811bb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811bb8:	defff804 	addi	sp,sp,-32
  811bbc:	df000715 	stw	fp,28(sp)
  811bc0:	df000704 	addi	fp,sp,28
  811bc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811bc8:	e0bfff17 	ldw	r2,-4(fp)
  811bcc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811bd0:	e0bffe17 	ldw	r2,-8(fp)
  811bd4:	10800017 	ldw	r2,0(r2)
  811bd8:	e0bffd15 	stw	r2,-12(fp)
  811bdc:	00000006 	br	811be0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811be0:	e0bffd17 	ldw	r2,-12(fp)
  811be4:	10800104 	addi	r2,r2,4
  811be8:	10800037 	ldwio	r2,0(r2)
  811bec:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811bf0:	e0bffc17 	ldw	r2,-16(fp)
  811bf4:	1080c00c 	andi	r2,r2,768
  811bf8:	1005003a 	cmpeq	r2,r2,zero
  811bfc:	1000741e 	bne	r2,zero,811dd0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811c00:	e0bffc17 	ldw	r2,-16(fp)
  811c04:	1080400c 	andi	r2,r2,256
  811c08:	1005003a 	cmpeq	r2,r2,zero
  811c0c:	1000351e 	bne	r2,zero,811ce4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811c10:	00800074 	movhi	r2,1
  811c14:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811c18:	e0bffe17 	ldw	r2,-8(fp)
  811c1c:	10800a17 	ldw	r2,40(r2)
  811c20:	10800044 	addi	r2,r2,1
  811c24:	1081ffcc 	andi	r2,r2,2047
  811c28:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811c2c:	e0bffe17 	ldw	r2,-8(fp)
  811c30:	10c00b17 	ldw	r3,44(r2)
  811c34:	e0bffa17 	ldw	r2,-24(fp)
  811c38:	18801626 	beq	r3,r2,811c94 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811c3c:	e0bffd17 	ldw	r2,-12(fp)
  811c40:	10800037 	ldwio	r2,0(r2)
  811c44:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811c48:	e0bffb17 	ldw	r2,-20(fp)
  811c4c:	10a0000c 	andi	r2,r2,32768
  811c50:	1005003a 	cmpeq	r2,r2,zero
  811c54:	10000f1e 	bne	r2,zero,811c94 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811c58:	e0bffe17 	ldw	r2,-8(fp)
  811c5c:	10c00a17 	ldw	r3,40(r2)
  811c60:	e0bffb17 	ldw	r2,-20(fp)
  811c64:	1009883a 	mov	r4,r2
  811c68:	e0bffe17 	ldw	r2,-8(fp)
  811c6c:	1885883a 	add	r2,r3,r2
  811c70:	10800e04 	addi	r2,r2,56
  811c74:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811c78:	e0bffe17 	ldw	r2,-8(fp)
  811c7c:	10800a17 	ldw	r2,40(r2)
  811c80:	10800044 	addi	r2,r2,1
  811c84:	10c1ffcc 	andi	r3,r2,2047
  811c88:	e0bffe17 	ldw	r2,-8(fp)
  811c8c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811c90:	003fe106 	br	811c18 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811c94:	e0bffb17 	ldw	r2,-20(fp)
  811c98:	10bfffec 	andhi	r2,r2,65535
  811c9c:	1005003a 	cmpeq	r2,r2,zero
  811ca0:	1000101e 	bne	r2,zero,811ce4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811ca4:	e0bffe17 	ldw	r2,-8(fp)
  811ca8:	10c00817 	ldw	r3,32(r2)
  811cac:	00bfff84 	movi	r2,-2
  811cb0:	1886703a 	and	r3,r3,r2
  811cb4:	e0bffe17 	ldw	r2,-8(fp)
  811cb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811cbc:	e0bffd17 	ldw	r2,-12(fp)
  811cc0:	11000104 	addi	r4,r2,4
  811cc4:	e0bffe17 	ldw	r2,-8(fp)
  811cc8:	10800817 	ldw	r2,32(r2)
  811ccc:	1007883a 	mov	r3,r2
  811cd0:	2005883a 	mov	r2,r4
  811cd4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811cd8:	e0bffd17 	ldw	r2,-12(fp)
  811cdc:	10800104 	addi	r2,r2,4
  811ce0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811ce4:	e0bffc17 	ldw	r2,-16(fp)
  811ce8:	1080800c 	andi	r2,r2,512
  811cec:	1005003a 	cmpeq	r2,r2,zero
  811cf0:	103fbb1e 	bne	r2,zero,811be0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811cf4:	e0bffc17 	ldw	r2,-16(fp)
  811cf8:	10bfffec 	andhi	r2,r2,65535
  811cfc:	1004d43a 	srli	r2,r2,16
  811d00:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811d04:	00001506 	br	811d5c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811d08:	e13ffd17 	ldw	r4,-12(fp)
  811d0c:	e0bffe17 	ldw	r2,-8(fp)
  811d10:	10c00d17 	ldw	r3,52(r2)
  811d14:	e0bffe17 	ldw	r2,-8(fp)
  811d18:	1885883a 	add	r2,r3,r2
  811d1c:	10820e04 	addi	r2,r2,2104
  811d20:	10800003 	ldbu	r2,0(r2)
  811d24:	10c03fcc 	andi	r3,r2,255
  811d28:	18c0201c 	xori	r3,r3,128
  811d2c:	18ffe004 	addi	r3,r3,-128
  811d30:	2005883a 	mov	r2,r4
  811d34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811d38:	e0bffe17 	ldw	r2,-8(fp)
  811d3c:	10800d17 	ldw	r2,52(r2)
  811d40:	10800044 	addi	r2,r2,1
  811d44:	10c1ffcc 	andi	r3,r2,2047
  811d48:	e0bffe17 	ldw	r2,-8(fp)
  811d4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811d50:	e0bff917 	ldw	r2,-28(fp)
  811d54:	10bfffc4 	addi	r2,r2,-1
  811d58:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811d5c:	e0bff917 	ldw	r2,-28(fp)
  811d60:	1005003a 	cmpeq	r2,r2,zero
  811d64:	1000051e 	bne	r2,zero,811d7c <altera_avalon_jtag_uart_irq+0x1c4>
  811d68:	e0bffe17 	ldw	r2,-8(fp)
  811d6c:	10c00d17 	ldw	r3,52(r2)
  811d70:	e0bffe17 	ldw	r2,-8(fp)
  811d74:	10800c17 	ldw	r2,48(r2)
  811d78:	18bfe31e 	bne	r3,r2,811d08 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811d7c:	e0bff917 	ldw	r2,-28(fp)
  811d80:	1005003a 	cmpeq	r2,r2,zero
  811d84:	103f961e 	bne	r2,zero,811be0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811d88:	e0bffe17 	ldw	r2,-8(fp)
  811d8c:	10c00817 	ldw	r3,32(r2)
  811d90:	00bfff44 	movi	r2,-3
  811d94:	1886703a 	and	r3,r3,r2
  811d98:	e0bffe17 	ldw	r2,-8(fp)
  811d9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811da0:	e0bffe17 	ldw	r2,-8(fp)
  811da4:	10800017 	ldw	r2,0(r2)
  811da8:	11000104 	addi	r4,r2,4
  811dac:	e0bffe17 	ldw	r2,-8(fp)
  811db0:	10800817 	ldw	r2,32(r2)
  811db4:	1007883a 	mov	r3,r2
  811db8:	2005883a 	mov	r2,r4
  811dbc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811dc0:	e0bffd17 	ldw	r2,-12(fp)
  811dc4:	10800104 	addi	r2,r2,4
  811dc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811dcc:	003f8406 	br	811be0 <altera_avalon_jtag_uart_irq+0x28>
}
  811dd0:	e037883a 	mov	sp,fp
  811dd4:	df000017 	ldw	fp,0(sp)
  811dd8:	dec00104 	addi	sp,sp,4
  811ddc:	f800283a 	ret

00811de0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811de0:	defffc04 	addi	sp,sp,-16
  811de4:	df000315 	stw	fp,12(sp)
  811de8:	df000304 	addi	fp,sp,12
  811dec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811df0:	e0bfff17 	ldw	r2,-4(fp)
  811df4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811df8:	e0bffe17 	ldw	r2,-8(fp)
  811dfc:	10800017 	ldw	r2,0(r2)
  811e00:	10800104 	addi	r2,r2,4
  811e04:	10800037 	ldwio	r2,0(r2)
  811e08:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811e0c:	e0bffd17 	ldw	r2,-12(fp)
  811e10:	1081000c 	andi	r2,r2,1024
  811e14:	1005003a 	cmpeq	r2,r2,zero
  811e18:	10000c1e 	bne	r2,zero,811e4c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811e1c:	e0bffe17 	ldw	r2,-8(fp)
  811e20:	10800017 	ldw	r2,0(r2)
  811e24:	11000104 	addi	r4,r2,4
  811e28:	e0bffe17 	ldw	r2,-8(fp)
  811e2c:	10800817 	ldw	r2,32(r2)
  811e30:	10810014 	ori	r2,r2,1024
  811e34:	1007883a 	mov	r3,r2
  811e38:	2005883a 	mov	r2,r4
  811e3c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811e40:	e0bffe17 	ldw	r2,-8(fp)
  811e44:	10000915 	stw	zero,36(r2)
  811e48:	00000a06 	br	811e74 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811e4c:	e0bffe17 	ldw	r2,-8(fp)
  811e50:	10c00917 	ldw	r3,36(r2)
  811e54:	00a00034 	movhi	r2,32768
  811e58:	10bfff04 	addi	r2,r2,-4
  811e5c:	10c00536 	bltu	r2,r3,811e74 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811e60:	e0bffe17 	ldw	r2,-8(fp)
  811e64:	10800917 	ldw	r2,36(r2)
  811e68:	10c00044 	addi	r3,r2,1
  811e6c:	e0bffe17 	ldw	r2,-8(fp)
  811e70:	10c00915 	stw	r3,36(r2)
  811e74:	008020b4 	movhi	r2,130
  811e78:	10a3ab04 	addi	r2,r2,-29012
  811e7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811e80:	e037883a 	mov	sp,fp
  811e84:	df000017 	ldw	fp,0(sp)
  811e88:	dec00104 	addi	sp,sp,4
  811e8c:	f800283a 	ret

00811e90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811e90:	defffc04 	addi	sp,sp,-16
  811e94:	df000315 	stw	fp,12(sp)
  811e98:	df000304 	addi	fp,sp,12
  811e9c:	e13ffd15 	stw	r4,-12(fp)
  811ea0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811ea4:	00000706 	br	811ec4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811ea8:	e0bffe17 	ldw	r2,-8(fp)
  811eac:	1090000c 	andi	r2,r2,16384
  811eb0:	1005003a 	cmpeq	r2,r2,zero
  811eb4:	1000031e 	bne	r2,zero,811ec4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811eb8:	00bffd44 	movi	r2,-11
  811ebc:	e0bfff15 	stw	r2,-4(fp)
  811ec0:	00000b06 	br	811ef0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811ec4:	e0bffd17 	ldw	r2,-12(fp)
  811ec8:	10c00d17 	ldw	r3,52(r2)
  811ecc:	e0bffd17 	ldw	r2,-12(fp)
  811ed0:	10800c17 	ldw	r2,48(r2)
  811ed4:	18800526 	beq	r3,r2,811eec <altera_avalon_jtag_uart_close+0x5c>
  811ed8:	e0bffd17 	ldw	r2,-12(fp)
  811edc:	10c00917 	ldw	r3,36(r2)
  811ee0:	e0bffd17 	ldw	r2,-12(fp)
  811ee4:	10800117 	ldw	r2,4(r2)
  811ee8:	18bfef36 	bltu	r3,r2,811ea8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811eec:	e03fff15 	stw	zero,-4(fp)
  811ef0:	e0bfff17 	ldw	r2,-4(fp)
}
  811ef4:	e037883a 	mov	sp,fp
  811ef8:	df000017 	ldw	fp,0(sp)
  811efc:	dec00104 	addi	sp,sp,4
  811f00:	f800283a 	ret

00811f04 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811f04:	defff804 	addi	sp,sp,-32
  811f08:	df000715 	stw	fp,28(sp)
  811f0c:	df000704 	addi	fp,sp,28
  811f10:	e13ffb15 	stw	r4,-20(fp)
  811f14:	e17ffc15 	stw	r5,-16(fp)
  811f18:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811f1c:	00bff9c4 	movi	r2,-25
  811f20:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811f24:	e0bffc17 	ldw	r2,-16(fp)
  811f28:	e0bfff15 	stw	r2,-4(fp)
  811f2c:	e0ffff17 	ldw	r3,-4(fp)
  811f30:	189a8060 	cmpeqi	r2,r3,27137
  811f34:	1000041e 	bne	r2,zero,811f48 <altera_avalon_jtag_uart_ioctl+0x44>
  811f38:	e0ffff17 	ldw	r3,-4(fp)
  811f3c:	189a80a0 	cmpeqi	r2,r3,27138
  811f40:	10001b1e 	bne	r2,zero,811fb0 <altera_avalon_jtag_uart_ioctl+0xac>
  811f44:	00002706 	br	811fe4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811f48:	e0bffb17 	ldw	r2,-20(fp)
  811f4c:	10c00117 	ldw	r3,4(r2)
  811f50:	00a00034 	movhi	r2,32768
  811f54:	10bfffc4 	addi	r2,r2,-1
  811f58:	18802226 	beq	r3,r2,811fe4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811f5c:	e0bffd17 	ldw	r2,-12(fp)
  811f60:	10800017 	ldw	r2,0(r2)
  811f64:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811f68:	e0bff917 	ldw	r2,-28(fp)
  811f6c:	10800090 	cmplti	r2,r2,2
  811f70:	1000071e 	bne	r2,zero,811f90 <altera_avalon_jtag_uart_ioctl+0x8c>
  811f74:	e0fff917 	ldw	r3,-28(fp)
  811f78:	00a00034 	movhi	r2,32768
  811f7c:	10bfffc4 	addi	r2,r2,-1
  811f80:	18800326 	beq	r3,r2,811f90 <altera_avalon_jtag_uart_ioctl+0x8c>
  811f84:	e0bff917 	ldw	r2,-28(fp)
  811f88:	e0bffe15 	stw	r2,-8(fp)
  811f8c:	00000306 	br	811f9c <altera_avalon_jtag_uart_ioctl+0x98>
  811f90:	00e00034 	movhi	r3,32768
  811f94:	18ffff84 	addi	r3,r3,-2
  811f98:	e0fffe15 	stw	r3,-8(fp)
  811f9c:	e0bffb17 	ldw	r2,-20(fp)
  811fa0:	e0fffe17 	ldw	r3,-8(fp)
  811fa4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811fa8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811fac:	00000d06 	br	811fe4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811fb0:	e0bffb17 	ldw	r2,-20(fp)
  811fb4:	10c00117 	ldw	r3,4(r2)
  811fb8:	00a00034 	movhi	r2,32768
  811fbc:	10bfffc4 	addi	r2,r2,-1
  811fc0:	18800826 	beq	r3,r2,811fe4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811fc4:	e13ffd17 	ldw	r4,-12(fp)
  811fc8:	e0bffb17 	ldw	r2,-20(fp)
  811fcc:	10c00917 	ldw	r3,36(r2)
  811fd0:	e0bffb17 	ldw	r2,-20(fp)
  811fd4:	10800117 	ldw	r2,4(r2)
  811fd8:	1885803a 	cmpltu	r2,r3,r2
  811fdc:	20800015 	stw	r2,0(r4)
      rc = 0;
  811fe0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811fe4:	e0bffa17 	ldw	r2,-24(fp)
}
  811fe8:	e037883a 	mov	sp,fp
  811fec:	df000017 	ldw	fp,0(sp)
  811ff0:	dec00104 	addi	sp,sp,4
  811ff4:	f800283a 	ret

00811ff8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811ff8:	defff204 	addi	sp,sp,-56
  811ffc:	dfc00d15 	stw	ra,52(sp)
  812000:	df000c15 	stw	fp,48(sp)
  812004:	df000c04 	addi	fp,sp,48
  812008:	e13ffb15 	stw	r4,-20(fp)
  81200c:	e17ffc15 	stw	r5,-16(fp)
  812010:	e1bffd15 	stw	r6,-12(fp)
  812014:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  812018:	e0bffc17 	ldw	r2,-16(fp)
  81201c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812020:	00004806 	br	812144 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  812024:	e0bffb17 	ldw	r2,-20(fp)
  812028:	10800a17 	ldw	r2,40(r2)
  81202c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  812030:	e0bffb17 	ldw	r2,-20(fp)
  812034:	10800b17 	ldw	r2,44(r2)
  812038:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  81203c:	e0fff717 	ldw	r3,-36(fp)
  812040:	e0bff617 	ldw	r2,-40(fp)
  812044:	18800536 	bltu	r3,r2,81205c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  812048:	e0bff717 	ldw	r2,-36(fp)
  81204c:	e0fff617 	ldw	r3,-40(fp)
  812050:	10c5c83a 	sub	r2,r2,r3
  812054:	e0bff815 	stw	r2,-32(fp)
  812058:	00000406 	br	81206c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81205c:	00820004 	movi	r2,2048
  812060:	e0fff617 	ldw	r3,-40(fp)
  812064:	10c5c83a 	sub	r2,r2,r3
  812068:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81206c:	e0bff817 	ldw	r2,-32(fp)
  812070:	1005003a 	cmpeq	r2,r2,zero
  812074:	10001f1e 	bne	r2,zero,8120f4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  812078:	e0fffd17 	ldw	r3,-12(fp)
  81207c:	e0bff817 	ldw	r2,-32(fp)
  812080:	1880022e 	bgeu	r3,r2,81208c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  812084:	e0bffd17 	ldw	r2,-12(fp)
  812088:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81208c:	e0bffb17 	ldw	r2,-20(fp)
  812090:	10c00e04 	addi	r3,r2,56
  812094:	e0bff617 	ldw	r2,-40(fp)
  812098:	1887883a 	add	r3,r3,r2
  81209c:	e0bffa17 	ldw	r2,-24(fp)
  8120a0:	1009883a 	mov	r4,r2
  8120a4:	180b883a 	mov	r5,r3
  8120a8:	e1bff817 	ldw	r6,-32(fp)
  8120ac:	080336c0 	call	80336c <memcpy>
      ptr   += n;
  8120b0:	e0fff817 	ldw	r3,-32(fp)
  8120b4:	e0bffa17 	ldw	r2,-24(fp)
  8120b8:	10c5883a 	add	r2,r2,r3
  8120bc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  8120c0:	e0fffd17 	ldw	r3,-12(fp)
  8120c4:	e0bff817 	ldw	r2,-32(fp)
  8120c8:	1885c83a 	sub	r2,r3,r2
  8120cc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8120d0:	e0fff617 	ldw	r3,-40(fp)
  8120d4:	e0bff817 	ldw	r2,-32(fp)
  8120d8:	1885883a 	add	r2,r3,r2
  8120dc:	10c1ffcc 	andi	r3,r2,2047
  8120e0:	e0bffb17 	ldw	r2,-20(fp)
  8120e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8120e8:	e0bffd17 	ldw	r2,-12(fp)
  8120ec:	10800048 	cmpgei	r2,r2,1
  8120f0:	103fcc1e 	bne	r2,zero,812024 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8120f4:	e0fffa17 	ldw	r3,-24(fp)
  8120f8:	e0bffc17 	ldw	r2,-16(fp)
  8120fc:	1880141e 	bne	r3,r2,812150 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812100:	e0bffe17 	ldw	r2,-8(fp)
  812104:	1090000c 	andi	r2,r2,16384
  812108:	1004c03a 	cmpne	r2,r2,zero
  81210c:	1000101e 	bne	r2,zero,812150 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812110:	e0bffb17 	ldw	r2,-20(fp)
  812114:	10c00a17 	ldw	r3,40(r2)
  812118:	e0bff717 	ldw	r2,-36(fp)
  81211c:	1880051e 	bne	r3,r2,812134 <altera_avalon_jtag_uart_read+0x13c>
  812120:	e0bffb17 	ldw	r2,-20(fp)
  812124:	10c00917 	ldw	r3,36(r2)
  812128:	e0bffb17 	ldw	r2,-20(fp)
  81212c:	10800117 	ldw	r2,4(r2)
  812130:	18bff736 	bltu	r3,r2,812110 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812134:	e0bffb17 	ldw	r2,-20(fp)
  812138:	10c00a17 	ldw	r3,40(r2)
  81213c:	e0bff717 	ldw	r2,-36(fp)
  812140:	18800326 	beq	r3,r2,812150 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812144:	e0bffd17 	ldw	r2,-12(fp)
  812148:	10800048 	cmpgei	r2,r2,1
  81214c:	103fb51e 	bne	r2,zero,812024 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812150:	e0fffa17 	ldw	r3,-24(fp)
  812154:	e0bffc17 	ldw	r2,-16(fp)
  812158:	18801926 	beq	r3,r2,8121c0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81215c:	0005303a 	rdctl	r2,status
  812160:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812164:	e0fff517 	ldw	r3,-44(fp)
  812168:	00bfff84 	movi	r2,-2
  81216c:	1884703a 	and	r2,r3,r2
  812170:	1001703a 	wrctl	status,r2
  
  return context;
  812174:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812178:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81217c:	e0bffb17 	ldw	r2,-20(fp)
  812180:	10800817 	ldw	r2,32(r2)
  812184:	10c00054 	ori	r3,r2,1
  812188:	e0bffb17 	ldw	r2,-20(fp)
  81218c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812190:	e0bffb17 	ldw	r2,-20(fp)
  812194:	10800017 	ldw	r2,0(r2)
  812198:	11000104 	addi	r4,r2,4
  81219c:	e0bffb17 	ldw	r2,-20(fp)
  8121a0:	10800817 	ldw	r2,32(r2)
  8121a4:	1007883a 	mov	r3,r2
  8121a8:	2005883a 	mov	r2,r4
  8121ac:	10c00035 	stwio	r3,0(r2)
  8121b0:	e0bff917 	ldw	r2,-28(fp)
  8121b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121b8:	e0bff417 	ldw	r2,-48(fp)
  8121bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8121c0:	e0fffa17 	ldw	r3,-24(fp)
  8121c4:	e0bffc17 	ldw	r2,-16(fp)
  8121c8:	18800526 	beq	r3,r2,8121e0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8121cc:	e0fffa17 	ldw	r3,-24(fp)
  8121d0:	e0bffc17 	ldw	r2,-16(fp)
  8121d4:	1887c83a 	sub	r3,r3,r2
  8121d8:	e0ffff15 	stw	r3,-4(fp)
  8121dc:	00000906 	br	812204 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8121e0:	e0bffe17 	ldw	r2,-8(fp)
  8121e4:	1090000c 	andi	r2,r2,16384
  8121e8:	1005003a 	cmpeq	r2,r2,zero
  8121ec:	1000031e 	bne	r2,zero,8121fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8121f0:	00bffd44 	movi	r2,-11
  8121f4:	e0bfff15 	stw	r2,-4(fp)
  8121f8:	00000206 	br	812204 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8121fc:	00bffec4 	movi	r2,-5
  812200:	e0bfff15 	stw	r2,-4(fp)
  812204:	e0bfff17 	ldw	r2,-4(fp)
}
  812208:	e037883a 	mov	sp,fp
  81220c:	dfc00117 	ldw	ra,4(sp)
  812210:	df000017 	ldw	fp,0(sp)
  812214:	dec00204 	addi	sp,sp,8
  812218:	f800283a 	ret

0081221c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81221c:	defff204 	addi	sp,sp,-56
  812220:	dfc00d15 	stw	ra,52(sp)
  812224:	df000c15 	stw	fp,48(sp)
  812228:	df000c04 	addi	fp,sp,48
  81222c:	e13ffb15 	stw	r4,-20(fp)
  812230:	e17ffc15 	stw	r5,-16(fp)
  812234:	e1bffd15 	stw	r6,-12(fp)
  812238:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81223c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812240:	e0bffc17 	ldw	r2,-16(fp)
  812244:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812248:	00003a06 	br	812334 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81224c:	e0bffb17 	ldw	r2,-20(fp)
  812250:	10800c17 	ldw	r2,48(r2)
  812254:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  812258:	e0bffb17 	ldw	r2,-20(fp)
  81225c:	10800d17 	ldw	r2,52(r2)
  812260:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  812264:	e0fffa17 	ldw	r3,-24(fp)
  812268:	e0bff917 	ldw	r2,-28(fp)
  81226c:	1880062e 	bgeu	r3,r2,812288 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812270:	e0fff917 	ldw	r3,-28(fp)
  812274:	e0bffa17 	ldw	r2,-24(fp)
  812278:	1885c83a 	sub	r2,r3,r2
  81227c:	10bfffc4 	addi	r2,r2,-1
  812280:	e0bff815 	stw	r2,-32(fp)
  812284:	00000c06 	br	8122b8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  812288:	e0bff917 	ldw	r2,-28(fp)
  81228c:	1005003a 	cmpeq	r2,r2,zero
  812290:	1000051e 	bne	r2,zero,8122a8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812294:	00820004 	movi	r2,2048
  812298:	e0fffa17 	ldw	r3,-24(fp)
  81229c:	10c5c83a 	sub	r2,r2,r3
  8122a0:	e0bff815 	stw	r2,-32(fp)
  8122a4:	00000406 	br	8122b8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8122a8:	0081ffc4 	movi	r2,2047
  8122ac:	e0fffa17 	ldw	r3,-24(fp)
  8122b0:	10c5c83a 	sub	r2,r2,r3
  8122b4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8122b8:	e0bff817 	ldw	r2,-32(fp)
  8122bc:	1005003a 	cmpeq	r2,r2,zero
  8122c0:	10001f1e 	bne	r2,zero,812340 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8122c4:	e0fffd17 	ldw	r3,-12(fp)
  8122c8:	e0bff817 	ldw	r2,-32(fp)
  8122cc:	1880022e 	bgeu	r3,r2,8122d8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8122d0:	e0bffd17 	ldw	r2,-12(fp)
  8122d4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8122d8:	e0bffb17 	ldw	r2,-20(fp)
  8122dc:	10c20e04 	addi	r3,r2,2104
  8122e0:	e0bffa17 	ldw	r2,-24(fp)
  8122e4:	1885883a 	add	r2,r3,r2
  8122e8:	e0fffc17 	ldw	r3,-16(fp)
  8122ec:	1009883a 	mov	r4,r2
  8122f0:	180b883a 	mov	r5,r3
  8122f4:	e1bff817 	ldw	r6,-32(fp)
  8122f8:	080336c0 	call	80336c <memcpy>
      ptr   += n;
  8122fc:	e0fff817 	ldw	r3,-32(fp)
  812300:	e0bffc17 	ldw	r2,-16(fp)
  812304:	10c5883a 	add	r2,r2,r3
  812308:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81230c:	e0fffd17 	ldw	r3,-12(fp)
  812310:	e0bff817 	ldw	r2,-32(fp)
  812314:	1885c83a 	sub	r2,r3,r2
  812318:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81231c:	e0fffa17 	ldw	r3,-24(fp)
  812320:	e0bff817 	ldw	r2,-32(fp)
  812324:	1885883a 	add	r2,r3,r2
  812328:	10c1ffcc 	andi	r3,r2,2047
  81232c:	e0bffb17 	ldw	r2,-20(fp)
  812330:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812334:	e0bffd17 	ldw	r2,-12(fp)
  812338:	10800048 	cmpgei	r2,r2,1
  81233c:	103fc31e 	bne	r2,zero,81224c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812340:	0005303a 	rdctl	r2,status
  812344:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812348:	e0fff517 	ldw	r3,-44(fp)
  81234c:	00bfff84 	movi	r2,-2
  812350:	1884703a 	and	r2,r3,r2
  812354:	1001703a 	wrctl	status,r2
  
  return context;
  812358:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81235c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812360:	e0bffb17 	ldw	r2,-20(fp)
  812364:	10800817 	ldw	r2,32(r2)
  812368:	10c00094 	ori	r3,r2,2
  81236c:	e0bffb17 	ldw	r2,-20(fp)
  812370:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812374:	e0bffb17 	ldw	r2,-20(fp)
  812378:	10800017 	ldw	r2,0(r2)
  81237c:	11000104 	addi	r4,r2,4
  812380:	e0bffb17 	ldw	r2,-20(fp)
  812384:	10800817 	ldw	r2,32(r2)
  812388:	1007883a 	mov	r3,r2
  81238c:	2005883a 	mov	r2,r4
  812390:	10c00035 	stwio	r3,0(r2)
  812394:	e0bff717 	ldw	r2,-36(fp)
  812398:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81239c:	e0bff417 	ldw	r2,-48(fp)
  8123a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8123a4:	e0bffd17 	ldw	r2,-12(fp)
  8123a8:	10800050 	cmplti	r2,r2,1
  8123ac:	1000111e 	bne	r2,zero,8123f4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8123b0:	e0bffe17 	ldw	r2,-8(fp)
  8123b4:	1090000c 	andi	r2,r2,16384
  8123b8:	1004c03a 	cmpne	r2,r2,zero
  8123bc:	1000101e 	bne	r2,zero,812400 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8123c0:	e0bffb17 	ldw	r2,-20(fp)
  8123c4:	10c00d17 	ldw	r3,52(r2)
  8123c8:	e0bff917 	ldw	r2,-28(fp)
  8123cc:	1880051e 	bne	r3,r2,8123e4 <altera_avalon_jtag_uart_write+0x1c8>
  8123d0:	e0bffb17 	ldw	r2,-20(fp)
  8123d4:	10c00917 	ldw	r3,36(r2)
  8123d8:	e0bffb17 	ldw	r2,-20(fp)
  8123dc:	10800117 	ldw	r2,4(r2)
  8123e0:	18bff736 	bltu	r3,r2,8123c0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8123e4:	e0bffb17 	ldw	r2,-20(fp)
  8123e8:	10c00d17 	ldw	r3,52(r2)
  8123ec:	e0bff917 	ldw	r2,-28(fp)
  8123f0:	18800326 	beq	r3,r2,812400 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  8123f4:	e0bffd17 	ldw	r2,-12(fp)
  8123f8:	10800048 	cmpgei	r2,r2,1
  8123fc:	103fcd1e 	bne	r2,zero,812334 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812400:	e0fffc17 	ldw	r3,-16(fp)
  812404:	e0bff617 	ldw	r2,-40(fp)
  812408:	18800526 	beq	r3,r2,812420 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  81240c:	e0fffc17 	ldw	r3,-16(fp)
  812410:	e0bff617 	ldw	r2,-40(fp)
  812414:	1887c83a 	sub	r3,r3,r2
  812418:	e0ffff15 	stw	r3,-4(fp)
  81241c:	00000906 	br	812444 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812420:	e0bffe17 	ldw	r2,-8(fp)
  812424:	1090000c 	andi	r2,r2,16384
  812428:	1005003a 	cmpeq	r2,r2,zero
  81242c:	1000031e 	bne	r2,zero,81243c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  812430:	00bffd44 	movi	r2,-11
  812434:	e0bfff15 	stw	r2,-4(fp)
  812438:	00000206 	br	812444 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81243c:	00bffec4 	movi	r2,-5
  812440:	e0bfff15 	stw	r2,-4(fp)
  812444:	e0bfff17 	ldw	r2,-4(fp)
}
  812448:	e037883a 	mov	sp,fp
  81244c:	dfc00117 	ldw	ra,4(sp)
  812450:	df000017 	ldw	fp,0(sp)
  812454:	dec00204 	addi	sp,sp,8
  812458:	f800283a 	ret

0081245c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  81245c:	defffa04 	addi	sp,sp,-24
  812460:	dfc00515 	stw	ra,20(sp)
  812464:	df000415 	stw	fp,16(sp)
  812468:	df000404 	addi	fp,sp,16
  81246c:	e13ffe15 	stw	r4,-8(fp)
  812470:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812474:	e0bffe17 	ldw	r2,-8(fp)
  812478:	10800017 	ldw	r2,0(r2)
  81247c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812480:	008003f4 	movhi	r2,15
  812484:	10909004 	addi	r2,r2,16960
  812488:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81248c:	e0bffe17 	ldw	r2,-8(fp)
  812490:	10800803 	ldbu	r2,32(r2)
  812494:	10803fcc 	andi	r2,r2,255
  812498:	1080201c 	xori	r2,r2,128
  81249c:	10bfe004 	addi	r2,r2,-128
  8124a0:	1004c03a 	cmpne	r2,r2,zero
  8124a4:	1000161e 	bne	r2,zero,812500 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8124a8:	00000a06 	br	8124d4 <lcd_write_command+0x78>
    if (--i == 0)
  8124ac:	e0bffc17 	ldw	r2,-16(fp)
  8124b0:	10bfffc4 	addi	r2,r2,-1
  8124b4:	e0bffc15 	stw	r2,-16(fp)
  8124b8:	e0bffc17 	ldw	r2,-16(fp)
  8124bc:	1004c03a 	cmpne	r2,r2,zero
  8124c0:	1000041e 	bne	r2,zero,8124d4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  8124c4:	e0fffe17 	ldw	r3,-8(fp)
  8124c8:	00800044 	movi	r2,1
  8124cc:	18800805 	stb	r2,32(r3)
      return;
  8124d0:	00000b06 	br	812500 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8124d4:	e0bffd17 	ldw	r2,-12(fp)
  8124d8:	10800104 	addi	r2,r2,4
  8124dc:	10800037 	ldwio	r2,0(r2)
  8124e0:	1080200c 	andi	r2,r2,128
  8124e4:	1004c03a 	cmpne	r2,r2,zero
  8124e8:	103ff01e 	bne	r2,zero,8124ac <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8124ec:	01001904 	movi	r4,100
  8124f0:	08147100 	call	814710 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8124f4:	e0bffd17 	ldw	r2,-12(fp)
  8124f8:	e0ffff03 	ldbu	r3,-4(fp)
  8124fc:	10c00035 	stwio	r3,0(r2)
}
  812500:	e037883a 	mov	sp,fp
  812504:	dfc00117 	ldw	ra,4(sp)
  812508:	df000017 	ldw	fp,0(sp)
  81250c:	dec00204 	addi	sp,sp,8
  812510:	f800283a 	ret

00812514 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  812514:	defffa04 	addi	sp,sp,-24
  812518:	dfc00515 	stw	ra,20(sp)
  81251c:	df000415 	stw	fp,16(sp)
  812520:	df000404 	addi	fp,sp,16
  812524:	e13ffe15 	stw	r4,-8(fp)
  812528:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  81252c:	e0bffe17 	ldw	r2,-8(fp)
  812530:	10800017 	ldw	r2,0(r2)
  812534:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812538:	008003f4 	movhi	r2,15
  81253c:	10909004 	addi	r2,r2,16960
  812540:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812544:	e0bffe17 	ldw	r2,-8(fp)
  812548:	10800803 	ldbu	r2,32(r2)
  81254c:	10803fcc 	andi	r2,r2,255
  812550:	1080201c 	xori	r2,r2,128
  812554:	10bfe004 	addi	r2,r2,-128
  812558:	1004c03a 	cmpne	r2,r2,zero
  81255c:	10001d1e 	bne	r2,zero,8125d4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812560:	00000a06 	br	81258c <lcd_write_data+0x78>
    if (--i == 0)
  812564:	e0bffc17 	ldw	r2,-16(fp)
  812568:	10bfffc4 	addi	r2,r2,-1
  81256c:	e0bffc15 	stw	r2,-16(fp)
  812570:	e0bffc17 	ldw	r2,-16(fp)
  812574:	1004c03a 	cmpne	r2,r2,zero
  812578:	1000041e 	bne	r2,zero,81258c <lcd_write_data+0x78>
    {
      sp->broken = 1;
  81257c:	e0fffe17 	ldw	r3,-8(fp)
  812580:	00800044 	movi	r2,1
  812584:	18800805 	stb	r2,32(r3)
      return;
  812588:	00001206 	br	8125d4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81258c:	e0bffd17 	ldw	r2,-12(fp)
  812590:	10800104 	addi	r2,r2,4
  812594:	10800037 	ldwio	r2,0(r2)
  812598:	1080200c 	andi	r2,r2,128
  81259c:	1004c03a 	cmpne	r2,r2,zero
  8125a0:	103ff01e 	bne	r2,zero,812564 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8125a4:	01001904 	movi	r4,100
  8125a8:	08147100 	call	814710 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8125ac:	e0bffd17 	ldw	r2,-12(fp)
  8125b0:	10800204 	addi	r2,r2,8
  8125b4:	e0ffff03 	ldbu	r3,-4(fp)
  8125b8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  8125bc:	e0bffe17 	ldw	r2,-8(fp)
  8125c0:	108008c3 	ldbu	r2,35(r2)
  8125c4:	10800044 	addi	r2,r2,1
  8125c8:	1007883a 	mov	r3,r2
  8125cc:	e0bffe17 	ldw	r2,-8(fp)
  8125d0:	10c008c5 	stb	r3,35(r2)
}
  8125d4:	e037883a 	mov	sp,fp
  8125d8:	dfc00117 	ldw	ra,4(sp)
  8125dc:	df000017 	ldw	fp,0(sp)
  8125e0:	dec00204 	addi	sp,sp,8
  8125e4:	f800283a 	ret

008125e8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8125e8:	defffc04 	addi	sp,sp,-16
  8125ec:	dfc00315 	stw	ra,12(sp)
  8125f0:	df000215 	stw	fp,8(sp)
  8125f4:	df000204 	addi	fp,sp,8
  8125f8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8125fc:	e13fff17 	ldw	r4,-4(fp)
  812600:	01400044 	movi	r5,1
  812604:	081245c0 	call	81245c <lcd_write_command>

  sp->x = 0;
  812608:	e0bfff17 	ldw	r2,-4(fp)
  81260c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  812610:	e0bfff17 	ldw	r2,-4(fp)
  812614:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812618:	e0bfff17 	ldw	r2,-4(fp)
  81261c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812620:	e03ffe15 	stw	zero,-8(fp)
  812624:	00001906 	br	81268c <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  812628:	e0bffe17 	ldw	r2,-8(fp)
  81262c:	10801924 	muli	r2,r2,100
  812630:	10c01004 	addi	r3,r2,64
  812634:	e0bfff17 	ldw	r2,-4(fp)
  812638:	1889883a 	add	r4,r3,r2
  81263c:	01400804 	movi	r5,32
  812640:	01801444 	movi	r6,81
  812644:	08034ec0 	call	8034ec <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  812648:	e0bffe17 	ldw	r2,-8(fp)
  81264c:	10801924 	muli	r2,r2,100
  812650:	10c00c04 	addi	r3,r2,48
  812654:	e0bfff17 	ldw	r2,-4(fp)
  812658:	1889883a 	add	r4,r3,r2
  81265c:	01400804 	movi	r5,32
  812660:	01800404 	movi	r6,16
  812664:	08034ec0 	call	8034ec <memset>
    sp->line[y].width = 0;
  812668:	e0bffe17 	ldw	r2,-8(fp)
  81266c:	e0ffff17 	ldw	r3,-4(fp)
  812670:	10801924 	muli	r2,r2,100
  812674:	10c5883a 	add	r2,r2,r3
  812678:	10802404 	addi	r2,r2,144
  81267c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812680:	e0bffe17 	ldw	r2,-8(fp)
  812684:	10800044 	addi	r2,r2,1
  812688:	e0bffe15 	stw	r2,-8(fp)
  81268c:	e0bffe17 	ldw	r2,-8(fp)
  812690:	10800090 	cmplti	r2,r2,2
  812694:	103fe41e 	bne	r2,zero,812628 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  812698:	e037883a 	mov	sp,fp
  81269c:	dfc00117 	ldw	ra,4(sp)
  8126a0:	df000017 	ldw	fp,0(sp)
  8126a4:	dec00204 	addi	sp,sp,8
  8126a8:	f800283a 	ret

008126ac <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8126ac:	defff604 	addi	sp,sp,-40
  8126b0:	dfc00915 	stw	ra,36(sp)
  8126b4:	df000815 	stw	fp,32(sp)
  8126b8:	dc000715 	stw	r16,28(sp)
  8126bc:	df000704 	addi	fp,sp,28
  8126c0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8126c4:	e0bfff17 	ldw	r2,-4(fp)
  8126c8:	10800943 	ldbu	r2,37(r2)
  8126cc:	10803fcc 	andi	r2,r2,255
  8126d0:	1080201c 	xori	r2,r2,128
  8126d4:	10bfe004 	addi	r2,r2,-128
  8126d8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126dc:	e03ffe15 	stw	zero,-8(fp)
  8126e0:	00006406 	br	812874 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8126e4:	e0bffe17 	ldw	r2,-8(fp)
  8126e8:	e0ffff17 	ldw	r3,-4(fp)
  8126ec:	10801924 	muli	r2,r2,100
  8126f0:	10c5883a 	add	r2,r2,r3
  8126f4:	10802404 	addi	r2,r2,144
  8126f8:	10800043 	ldbu	r2,1(r2)
  8126fc:	10803fcc 	andi	r2,r2,255
  812700:	1080201c 	xori	r2,r2,128
  812704:	10bfe004 	addi	r2,r2,-128
  812708:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  81270c:	e0bffe17 	ldw	r2,-8(fp)
  812710:	e0ffff17 	ldw	r3,-4(fp)
  812714:	10801924 	muli	r2,r2,100
  812718:	10c5883a 	add	r2,r2,r3
  81271c:	10802404 	addi	r2,r2,144
  812720:	10800083 	ldbu	r2,2(r2)
  812724:	10c03fcc 	andi	r3,r2,255
  812728:	e0bffc17 	ldw	r2,-16(fp)
  81272c:	1885383a 	mul	r2,r3,r2
  812730:	1005d23a 	srai	r2,r2,8
  812734:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  812738:	e0fffa17 	ldw	r3,-24(fp)
  81273c:	e0bffb17 	ldw	r2,-20(fp)
  812740:	18800116 	blt	r3,r2,812748 <lcd_repaint_screen+0x9c>
      offset = 0;
  812744:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812748:	e03ffd15 	stw	zero,-12(fp)
  81274c:	00004306 	br	81285c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812750:	e43ffe17 	ldw	r16,-8(fp)
  812754:	e0fffd17 	ldw	r3,-12(fp)
  812758:	e0bffa17 	ldw	r2,-24(fp)
  81275c:	1889883a 	add	r4,r3,r2
  812760:	e17ffb17 	ldw	r5,-20(fp)
  812764:	080fd540 	call	80fd54 <__modsi3>
  812768:	1009883a 	mov	r4,r2
  81276c:	e0ffff17 	ldw	r3,-4(fp)
  812770:	80801924 	muli	r2,r16,100
  812774:	10c5883a 	add	r2,r2,r3
  812778:	1105883a 	add	r2,r2,r4
  81277c:	10801004 	addi	r2,r2,64
  812780:	10800003 	ldbu	r2,0(r2)
  812784:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812788:	e0bffe17 	ldw	r2,-8(fp)
  81278c:	e13ffd17 	ldw	r4,-12(fp)
  812790:	e0ffff17 	ldw	r3,-4(fp)
  812794:	10801924 	muli	r2,r2,100
  812798:	10c5883a 	add	r2,r2,r3
  81279c:	1105883a 	add	r2,r2,r4
  8127a0:	10800c04 	addi	r2,r2,48
  8127a4:	10800003 	ldbu	r2,0(r2)
  8127a8:	10c03fcc 	andi	r3,r2,255
  8127ac:	18c0201c 	xori	r3,r3,128
  8127b0:	18ffe004 	addi	r3,r3,-128
  8127b4:	e0bff947 	ldb	r2,-27(fp)
  8127b8:	18802526 	beq	r3,r2,812850 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8127bc:	e0fffe17 	ldw	r3,-8(fp)
  8127c0:	d0a01504 	addi	r2,gp,-32684
  8127c4:	1885883a 	add	r2,r3,r2
  8127c8:	10800003 	ldbu	r2,0(r2)
  8127cc:	1007883a 	mov	r3,r2
  8127d0:	e0bffd17 	ldw	r2,-12(fp)
  8127d4:	1885883a 	add	r2,r3,r2
  8127d8:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  8127dc:	e0fff903 	ldbu	r3,-28(fp)
  8127e0:	e0bfff17 	ldw	r2,-4(fp)
  8127e4:	108008c3 	ldbu	r2,35(r2)
  8127e8:	10803fcc 	andi	r2,r2,255
  8127ec:	1080201c 	xori	r2,r2,128
  8127f0:	10bfe004 	addi	r2,r2,-128
  8127f4:	18800926 	beq	r3,r2,81281c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8127f8:	e0fff903 	ldbu	r3,-28(fp)
  8127fc:	00bfe004 	movi	r2,-128
  812800:	1884b03a 	or	r2,r3,r2
  812804:	11403fcc 	andi	r5,r2,255
  812808:	e13fff17 	ldw	r4,-4(fp)
  81280c:	081245c0 	call	81245c <lcd_write_command>
          sp->address = address;
  812810:	e0fff903 	ldbu	r3,-28(fp)
  812814:	e0bfff17 	ldw	r2,-4(fp)
  812818:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  81281c:	e0bff943 	ldbu	r2,-27(fp)
  812820:	11403fcc 	andi	r5,r2,255
  812824:	e13fff17 	ldw	r4,-4(fp)
  812828:	08125140 	call	812514 <lcd_write_data>
        sp->line[y].visible[x] = c;
  81282c:	e0bffe17 	ldw	r2,-8(fp)
  812830:	e13ffd17 	ldw	r4,-12(fp)
  812834:	e0ffff17 	ldw	r3,-4(fp)
  812838:	10801924 	muli	r2,r2,100
  81283c:	10c5883a 	add	r2,r2,r3
  812840:	1105883a 	add	r2,r2,r4
  812844:	10c00c04 	addi	r3,r2,48
  812848:	e0bff943 	ldbu	r2,-27(fp)
  81284c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812850:	e0bffd17 	ldw	r2,-12(fp)
  812854:	10800044 	addi	r2,r2,1
  812858:	e0bffd15 	stw	r2,-12(fp)
  81285c:	e0bffd17 	ldw	r2,-12(fp)
  812860:	10800410 	cmplti	r2,r2,16
  812864:	103fba1e 	bne	r2,zero,812750 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812868:	e0bffe17 	ldw	r2,-8(fp)
  81286c:	10800044 	addi	r2,r2,1
  812870:	e0bffe15 	stw	r2,-8(fp)
  812874:	e0bffe17 	ldw	r2,-8(fp)
  812878:	10800090 	cmplti	r2,r2,2
  81287c:	103f991e 	bne	r2,zero,8126e4 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812880:	e037883a 	mov	sp,fp
  812884:	dfc00217 	ldw	ra,8(sp)
  812888:	df000117 	ldw	fp,4(sp)
  81288c:	dc000017 	ldw	r16,0(sp)
  812890:	dec00304 	addi	sp,sp,12
  812894:	f800283a 	ret

00812898 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812898:	defffc04 	addi	sp,sp,-16
  81289c:	dfc00315 	stw	ra,12(sp)
  8128a0:	df000215 	stw	fp,8(sp)
  8128a4:	df000204 	addi	fp,sp,8
  8128a8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8128ac:	e03ffe15 	stw	zero,-8(fp)
  8128b0:	00001d06 	br	812928 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8128b4:	e0bffe17 	ldw	r2,-8(fp)
  8128b8:	10800048 	cmpgei	r2,r2,1
  8128bc:	10000f1e 	bne	r2,zero,8128fc <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8128c0:	e0bffe17 	ldw	r2,-8(fp)
  8128c4:	10801924 	muli	r2,r2,100
  8128c8:	10c01004 	addi	r3,r2,64
  8128cc:	e0bfff17 	ldw	r2,-4(fp)
  8128d0:	1889883a 	add	r4,r3,r2
  8128d4:	e0bffe17 	ldw	r2,-8(fp)
  8128d8:	10800044 	addi	r2,r2,1
  8128dc:	10801924 	muli	r2,r2,100
  8128e0:	10c01004 	addi	r3,r2,64
  8128e4:	e0bfff17 	ldw	r2,-4(fp)
  8128e8:	1885883a 	add	r2,r3,r2
  8128ec:	100b883a 	mov	r5,r2
  8128f0:	01801404 	movi	r6,80
  8128f4:	080336c0 	call	80336c <memcpy>
  8128f8:	00000806 	br	81291c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8128fc:	e0bffe17 	ldw	r2,-8(fp)
  812900:	10801924 	muli	r2,r2,100
  812904:	10c01004 	addi	r3,r2,64
  812908:	e0bfff17 	ldw	r2,-4(fp)
  81290c:	1889883a 	add	r4,r3,r2
  812910:	01400804 	movi	r5,32
  812914:	01801404 	movi	r6,80
  812918:	08034ec0 	call	8034ec <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81291c:	e0bffe17 	ldw	r2,-8(fp)
  812920:	10800044 	addi	r2,r2,1
  812924:	e0bffe15 	stw	r2,-8(fp)
  812928:	e0bffe17 	ldw	r2,-8(fp)
  81292c:	10800090 	cmplti	r2,r2,2
  812930:	103fe01e 	bne	r2,zero,8128b4 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812934:	e0bfff17 	ldw	r2,-4(fp)
  812938:	10800883 	ldbu	r2,34(r2)
  81293c:	10bfffc4 	addi	r2,r2,-1
  812940:	1007883a 	mov	r3,r2
  812944:	e0bfff17 	ldw	r2,-4(fp)
  812948:	10c00885 	stb	r3,34(r2)
}
  81294c:	e037883a 	mov	sp,fp
  812950:	dfc00117 	ldw	ra,4(sp)
  812954:	df000017 	ldw	fp,0(sp)
  812958:	dec00204 	addi	sp,sp,8
  81295c:	f800283a 	ret

00812960 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812960:	defff804 	addi	sp,sp,-32
  812964:	dfc00715 	stw	ra,28(sp)
  812968:	df000615 	stw	fp,24(sp)
  81296c:	df000604 	addi	fp,sp,24
  812970:	e13ffd15 	stw	r4,-12(fp)
  812974:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  812978:	e03ffc15 	stw	zero,-16(fp)
  81297c:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  812980:	e0bffd17 	ldw	r2,-12(fp)
  812984:	10800a03 	ldbu	r2,40(r2)
  812988:	10803fcc 	andi	r2,r2,255
  81298c:	1080201c 	xori	r2,r2,128
  812990:	10bfe004 	addi	r2,r2,-128
  812994:	108016d8 	cmpnei	r2,r2,91
  812998:	1000491e 	bne	r2,zero,812ac0 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  81299c:	e0bffd17 	ldw	r2,-12(fp)
  8129a0:	10800a04 	addi	r2,r2,40
  8129a4:	10800044 	addi	r2,r2,1
  8129a8:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  8129ac:	00000d06 	br	8129e4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8129b0:	e0bffc17 	ldw	r2,-16(fp)
  8129b4:	10c002a4 	muli	r3,r2,10
  8129b8:	e0bffa17 	ldw	r2,-24(fp)
  8129bc:	10800003 	ldbu	r2,0(r2)
  8129c0:	10803fcc 	andi	r2,r2,255
  8129c4:	1080201c 	xori	r2,r2,128
  8129c8:	10bfe004 	addi	r2,r2,-128
  8129cc:	1885883a 	add	r2,r3,r2
  8129d0:	10bff404 	addi	r2,r2,-48
  8129d4:	e0bffc15 	stw	r2,-16(fp)
  8129d8:	e0bffa17 	ldw	r2,-24(fp)
  8129dc:	10800044 	addi	r2,r2,1
  8129e0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8129e4:	e0bffa17 	ldw	r2,-24(fp)
  8129e8:	10800003 	ldbu	r2,0(r2)
  8129ec:	10803fcc 	andi	r2,r2,255
  8129f0:	1080201c 	xori	r2,r2,128
  8129f4:	10bfe004 	addi	r2,r2,-128
  8129f8:	1007883a 	mov	r3,r2
  8129fc:	00802074 	movhi	r2,129
  812a00:	109c5304 	addi	r2,r2,29004
  812a04:	10800017 	ldw	r2,0(r2)
  812a08:	1885883a 	add	r2,r3,r2
  812a0c:	10800003 	ldbu	r2,0(r2)
  812a10:	10803fcc 	andi	r2,r2,255
  812a14:	1080010c 	andi	r2,r2,4
  812a18:	1004c03a 	cmpne	r2,r2,zero
  812a1c:	103fe41e 	bne	r2,zero,8129b0 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812a20:	e0bffa17 	ldw	r2,-24(fp)
  812a24:	10800003 	ldbu	r2,0(r2)
  812a28:	10803fcc 	andi	r2,r2,255
  812a2c:	1080201c 	xori	r2,r2,128
  812a30:	10bfe004 	addi	r2,r2,-128
  812a34:	10800ed8 	cmpnei	r2,r2,59
  812a38:	1000231e 	bne	r2,zero,812ac8 <lcd_handle_escape+0x168>
    {
      ptr++;
  812a3c:	e0bffa17 	ldw	r2,-24(fp)
  812a40:	10800044 	addi	r2,r2,1
  812a44:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  812a48:	00000d06 	br	812a80 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812a4c:	e0bffb17 	ldw	r2,-20(fp)
  812a50:	10c002a4 	muli	r3,r2,10
  812a54:	e0bffa17 	ldw	r2,-24(fp)
  812a58:	10800003 	ldbu	r2,0(r2)
  812a5c:	10803fcc 	andi	r2,r2,255
  812a60:	1080201c 	xori	r2,r2,128
  812a64:	10bfe004 	addi	r2,r2,-128
  812a68:	1885883a 	add	r2,r3,r2
  812a6c:	10bff404 	addi	r2,r2,-48
  812a70:	e0bffb15 	stw	r2,-20(fp)
  812a74:	e0bffa17 	ldw	r2,-24(fp)
  812a78:	10800044 	addi	r2,r2,1
  812a7c:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812a80:	e0bffa17 	ldw	r2,-24(fp)
  812a84:	10800003 	ldbu	r2,0(r2)
  812a88:	10803fcc 	andi	r2,r2,255
  812a8c:	1080201c 	xori	r2,r2,128
  812a90:	10bfe004 	addi	r2,r2,-128
  812a94:	1007883a 	mov	r3,r2
  812a98:	00802074 	movhi	r2,129
  812a9c:	109c5304 	addi	r2,r2,29004
  812aa0:	10800017 	ldw	r2,0(r2)
  812aa4:	1885883a 	add	r2,r3,r2
  812aa8:	10800003 	ldbu	r2,0(r2)
  812aac:	10803fcc 	andi	r2,r2,255
  812ab0:	1080010c 	andi	r2,r2,4
  812ab4:	1004c03a 	cmpne	r2,r2,zero
  812ab8:	103fe41e 	bne	r2,zero,812a4c <lcd_handle_escape+0xec>
  812abc:	00000206 	br	812ac8 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812ac0:	00bfffc4 	movi	r2,-1
  812ac4:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812ac8:	e0bffe07 	ldb	r2,-8(fp)
  812acc:	e0bfff15 	stw	r2,-4(fp)
  812ad0:	e0ffff17 	ldw	r3,-4(fp)
  812ad4:	188012a0 	cmpeqi	r2,r3,74
  812ad8:	10002f1e 	bne	r2,zero,812b98 <lcd_handle_escape+0x238>
  812adc:	e0ffff17 	ldw	r3,-4(fp)
  812ae0:	188012c8 	cmpgei	r2,r3,75
  812ae4:	1000041e 	bne	r2,zero,812af8 <lcd_handle_escape+0x198>
  812ae8:	e0ffff17 	ldw	r3,-4(fp)
  812aec:	18801220 	cmpeqi	r2,r3,72
  812af0:	1000081e 	bne	r2,zero,812b14 <lcd_handle_escape+0x1b4>
  812af4:	00004906 	br	812c1c <lcd_handle_escape+0x2bc>
  812af8:	e0ffff17 	ldw	r3,-4(fp)
  812afc:	188012e0 	cmpeqi	r2,r3,75
  812b00:	10002b1e 	bne	r2,zero,812bb0 <lcd_handle_escape+0x250>
  812b04:	e0ffff17 	ldw	r3,-4(fp)
  812b08:	188019a0 	cmpeqi	r2,r3,102
  812b0c:	1000011e 	bne	r2,zero,812b14 <lcd_handle_escape+0x1b4>
  812b10:	00004206 	br	812c1c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812b14:	e0bffb17 	ldw	r2,-20(fp)
  812b18:	10800050 	cmplti	r2,r2,1
  812b1c:	1000051e 	bne	r2,zero,812b34 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  812b20:	e0bffb17 	ldw	r2,-20(fp)
  812b24:	10bfffc4 	addi	r2,r2,-1
  812b28:	1007883a 	mov	r3,r2
  812b2c:	e0bffd17 	ldw	r2,-12(fp)
  812b30:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812b34:	e0bffc17 	ldw	r2,-16(fp)
  812b38:	10800050 	cmplti	r2,r2,1
  812b3c:	1000371e 	bne	r2,zero,812c1c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  812b40:	e0bffc17 	ldw	r2,-16(fp)
  812b44:	10bfffc4 	addi	r2,r2,-1
  812b48:	1007883a 	mov	r3,r2
  812b4c:	e0bffd17 	ldw	r2,-12(fp)
  812b50:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812b54:	e0bffd17 	ldw	r2,-12(fp)
  812b58:	10800883 	ldbu	r2,34(r2)
  812b5c:	10803fcc 	andi	r2,r2,255
  812b60:	10800170 	cmpltui	r2,r2,5
  812b64:	1000061e 	bne	r2,zero,812b80 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  812b68:	e0fffd17 	ldw	r3,-12(fp)
  812b6c:	00800104 	movi	r2,4
  812b70:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812b74:	00000206 	br	812b80 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  812b78:	e13ffd17 	ldw	r4,-12(fp)
  812b7c:	08128980 	call	812898 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812b80:	e0bffd17 	ldw	r2,-12(fp)
  812b84:	10800883 	ldbu	r2,34(r2)
  812b88:	10803fcc 	andi	r2,r2,255
  812b8c:	108000e8 	cmpgeui	r2,r2,3
  812b90:	103ff91e 	bne	r2,zero,812b78 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  812b94:	00002106 	br	812c1c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812b98:	e0bffc17 	ldw	r2,-16(fp)
  812b9c:	10800098 	cmpnei	r2,r2,2
  812ba0:	10001e1e 	bne	r2,zero,812c1c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  812ba4:	e13ffd17 	ldw	r4,-12(fp)
  812ba8:	08125e80 	call	8125e8 <lcd_clear_screen>
    break;
  812bac:	00001b06 	br	812c1c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812bb0:	e0bffc17 	ldw	r2,-16(fp)
  812bb4:	10800048 	cmpgei	r2,r2,1
  812bb8:	1000181e 	bne	r2,zero,812c1c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812bbc:	e0bffd17 	ldw	r2,-12(fp)
  812bc0:	10800843 	ldbu	r2,33(r2)
  812bc4:	10803fcc 	andi	r2,r2,255
  812bc8:	10801428 	cmpgeui	r2,r2,80
  812bcc:	1000131e 	bne	r2,zero,812c1c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812bd0:	e0bffd17 	ldw	r2,-12(fp)
  812bd4:	10800883 	ldbu	r2,34(r2)
  812bd8:	10803fcc 	andi	r2,r2,255
  812bdc:	10801924 	muli	r2,r2,100
  812be0:	10c01004 	addi	r3,r2,64
  812be4:	e0bffd17 	ldw	r2,-12(fp)
  812be8:	1887883a 	add	r3,r3,r2
  812bec:	e0bffd17 	ldw	r2,-12(fp)
  812bf0:	10800843 	ldbu	r2,33(r2)
  812bf4:	10803fcc 	andi	r2,r2,255
  812bf8:	1889883a 	add	r4,r3,r2
  812bfc:	e0bffd17 	ldw	r2,-12(fp)
  812c00:	10800843 	ldbu	r2,33(r2)
  812c04:	10c03fcc 	andi	r3,r2,255
  812c08:	00801404 	movi	r2,80
  812c0c:	10c5c83a 	sub	r2,r2,r3
  812c10:	100d883a 	mov	r6,r2
  812c14:	01400804 	movi	r5,32
  812c18:	08034ec0 	call	8034ec <memset>
    }
    break;
  }
}
  812c1c:	e037883a 	mov	sp,fp
  812c20:	dfc00117 	ldw	ra,4(sp)
  812c24:	df000017 	ldw	fp,0(sp)
  812c28:	dec00204 	addi	sp,sp,8
  812c2c:	f800283a 	ret

00812c30 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812c30:	defff204 	addi	sp,sp,-56
  812c34:	dfc00d15 	stw	ra,52(sp)
  812c38:	df000c15 	stw	fp,48(sp)
  812c3c:	dc000b15 	stw	r16,44(sp)
  812c40:	df000b04 	addi	fp,sp,44
  812c44:	e13ffc15 	stw	r4,-16(fp)
  812c48:	e17ffd15 	stw	r5,-12(fp)
  812c4c:	e1bffe15 	stw	r6,-8(fp)
  812c50:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812c54:	e0bffe17 	ldw	r2,-8(fp)
  812c58:	1007883a 	mov	r3,r2
  812c5c:	e0bffd17 	ldw	r2,-12(fp)
  812c60:	10c5883a 	add	r2,r2,r3
  812c64:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812c68:	e0fffc17 	ldw	r3,-16(fp)
  812c6c:	00800044 	movi	r2,1
  812c70:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812c74:	0000a206 	br	812f00 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812c78:	e0bffd17 	ldw	r2,-12(fp)
  812c7c:	10800003 	ldbu	r2,0(r2)
  812c80:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812c84:	e0bffc17 	ldw	r2,-16(fp)
  812c88:	10800903 	ldbu	r2,36(r2)
  812c8c:	10803fcc 	andi	r2,r2,255
  812c90:	1080201c 	xori	r2,r2,128
  812c94:	10bfe004 	addi	r2,r2,-128
  812c98:	1004803a 	cmplt	r2,r2,zero
  812c9c:	10003b1e 	bne	r2,zero,812d8c <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812ca0:	e0bffc17 	ldw	r2,-16(fp)
  812ca4:	10800903 	ldbu	r2,36(r2)
  812ca8:	10803fcc 	andi	r2,r2,255
  812cac:	1080201c 	xori	r2,r2,128
  812cb0:	10bfe004 	addi	r2,r2,-128
  812cb4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812cb8:	e0bff717 	ldw	r2,-36(fp)
  812cbc:	1004c03a 	cmpne	r2,r2,zero
  812cc0:	1000031e 	bne	r2,zero,812cd0 <altera_avalon_lcd_16207_write+0xa0>
  812cc4:	e0bff807 	ldb	r2,-32(fp)
  812cc8:	108016d8 	cmpnei	r2,r2,91
  812ccc:	1000111e 	bne	r2,zero,812d14 <altera_avalon_lcd_16207_write+0xe4>
  812cd0:	e0bff717 	ldw	r2,-36(fp)
  812cd4:	1005003a 	cmpeq	r2,r2,zero
  812cd8:	10001a1e 	bne	r2,zero,812d44 <altera_avalon_lcd_16207_write+0x114>
  812cdc:	e0bff807 	ldb	r2,-32(fp)
  812ce0:	1007883a 	mov	r3,r2
  812ce4:	00802074 	movhi	r2,129
  812ce8:	109c5304 	addi	r2,r2,29004
  812cec:	10800017 	ldw	r2,0(r2)
  812cf0:	1885883a 	add	r2,r3,r2
  812cf4:	10800003 	ldbu	r2,0(r2)
  812cf8:	10803fcc 	andi	r2,r2,255
  812cfc:	1080010c 	andi	r2,r2,4
  812d00:	1004c03a 	cmpne	r2,r2,zero
  812d04:	10000f1e 	bne	r2,zero,812d44 <altera_avalon_lcd_16207_write+0x114>
  812d08:	e0bff807 	ldb	r2,-32(fp)
  812d0c:	10800ee0 	cmpeqi	r2,r2,59
  812d10:	10000c1e 	bne	r2,zero,812d44 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812d14:	e0fff717 	ldw	r3,-36(fp)
  812d18:	e0bffc17 	ldw	r2,-16(fp)
  812d1c:	1885883a 	add	r2,r3,r2
  812d20:	10800a04 	addi	r2,r2,40
  812d24:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812d28:	e17ff807 	ldb	r5,-32(fp)
  812d2c:	e13ffc17 	ldw	r4,-16(fp)
  812d30:	08129600 	call	812960 <lcd_handle_escape>

        sp->esccount = -1;
  812d34:	e0fffc17 	ldw	r3,-16(fp)
  812d38:	00bfffc4 	movi	r2,-1
  812d3c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812d40:	00006c06 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812d44:	e0bffc17 	ldw	r2,-16(fp)
  812d48:	10800903 	ldbu	r2,36(r2)
  812d4c:	10803fcc 	andi	r2,r2,255
  812d50:	108001e8 	cmpgeui	r2,r2,7
  812d54:	1000671e 	bne	r2,zero,812ef4 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812d58:	e0fff717 	ldw	r3,-36(fp)
  812d5c:	e0bffc17 	ldw	r2,-16(fp)
  812d60:	1885883a 	add	r2,r3,r2
  812d64:	10c00a04 	addi	r3,r2,40
  812d68:	e0bff803 	ldbu	r2,-32(fp)
  812d6c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812d70:	e0bffc17 	ldw	r2,-16(fp)
  812d74:	10800903 	ldbu	r2,36(r2)
  812d78:	10800044 	addi	r2,r2,1
  812d7c:	1007883a 	mov	r3,r2
  812d80:	e0bffc17 	ldw	r2,-16(fp)
  812d84:	10c00905 	stb	r3,36(r2)
  812d88:	00005a06 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812d8c:	e0bff807 	ldb	r2,-32(fp)
  812d90:	108006d8 	cmpnei	r2,r2,27
  812d94:	1000031e 	bne	r2,zero,812da4 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812d98:	e0bffc17 	ldw	r2,-16(fp)
  812d9c:	10000905 	stb	zero,36(r2)
  812da0:	00005406 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812da4:	e0bff807 	ldb	r2,-32(fp)
  812da8:	10800358 	cmpnei	r2,r2,13
  812dac:	1000031e 	bne	r2,zero,812dbc <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812db0:	e0bffc17 	ldw	r2,-16(fp)
  812db4:	10000845 	stb	zero,33(r2)
  812db8:	00004e06 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812dbc:	e0bff807 	ldb	r2,-32(fp)
  812dc0:	10800298 	cmpnei	r2,r2,10
  812dc4:	1000101e 	bne	r2,zero,812e08 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812dc8:	e0bffc17 	ldw	r2,-16(fp)
  812dcc:	10000845 	stb	zero,33(r2)
      sp->y++;
  812dd0:	e0bffc17 	ldw	r2,-16(fp)
  812dd4:	10800883 	ldbu	r2,34(r2)
  812dd8:	10800044 	addi	r2,r2,1
  812ddc:	1007883a 	mov	r3,r2
  812de0:	e0bffc17 	ldw	r2,-16(fp)
  812de4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812de8:	e0bffc17 	ldw	r2,-16(fp)
  812dec:	10800883 	ldbu	r2,34(r2)
  812df0:	10803fcc 	andi	r2,r2,255
  812df4:	108000f0 	cmpltui	r2,r2,3
  812df8:	10003e1e 	bne	r2,zero,812ef4 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812dfc:	e13ffc17 	ldw	r4,-16(fp)
  812e00:	08128980 	call	812898 <lcd_scroll_up>
  812e04:	00003b06 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812e08:	e0bff807 	ldb	r2,-32(fp)
  812e0c:	10800218 	cmpnei	r2,r2,8
  812e10:	10000c1e 	bne	r2,zero,812e44 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812e14:	e0bffc17 	ldw	r2,-16(fp)
  812e18:	10800843 	ldbu	r2,33(r2)
  812e1c:	10803fcc 	andi	r2,r2,255
  812e20:	1005003a 	cmpeq	r2,r2,zero
  812e24:	1000331e 	bne	r2,zero,812ef4 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812e28:	e0bffc17 	ldw	r2,-16(fp)
  812e2c:	10800843 	ldbu	r2,33(r2)
  812e30:	10bfffc4 	addi	r2,r2,-1
  812e34:	1007883a 	mov	r3,r2
  812e38:	e0bffc17 	ldw	r2,-16(fp)
  812e3c:	10c00845 	stb	r3,33(r2)
  812e40:	00002c06 	br	812ef4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812e44:	e0bff807 	ldb	r2,-32(fp)
  812e48:	1007883a 	mov	r3,r2
  812e4c:	00802074 	movhi	r2,129
  812e50:	109c5304 	addi	r2,r2,29004
  812e54:	10800017 	ldw	r2,0(r2)
  812e58:	1885883a 	add	r2,r3,r2
  812e5c:	10800003 	ldbu	r2,0(r2)
  812e60:	10803fcc 	andi	r2,r2,255
  812e64:	1080201c 	xori	r2,r2,128
  812e68:	10bfe004 	addi	r2,r2,-128
  812e6c:	108025cc 	andi	r2,r2,151
  812e70:	1005003a 	cmpeq	r2,r2,zero
  812e74:	10001f1e 	bne	r2,zero,812ef4 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812e78:	e0bffc17 	ldw	r2,-16(fp)
  812e7c:	10800883 	ldbu	r2,34(r2)
  812e80:	10803fcc 	andi	r2,r2,255
  812e84:	108000b0 	cmpltui	r2,r2,2
  812e88:	1000021e 	bne	r2,zero,812e94 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812e8c:	e13ffc17 	ldw	r4,-16(fp)
  812e90:	08128980 	call	812898 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812e94:	e0bffc17 	ldw	r2,-16(fp)
  812e98:	10800843 	ldbu	r2,33(r2)
  812e9c:	10803fcc 	andi	r2,r2,255
  812ea0:	10801428 	cmpgeui	r2,r2,80
  812ea4:	10000d1e 	bne	r2,zero,812edc <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812ea8:	e0bffc17 	ldw	r2,-16(fp)
  812eac:	10800883 	ldbu	r2,34(r2)
  812eb0:	11003fcc 	andi	r4,r2,255
  812eb4:	e0bffc17 	ldw	r2,-16(fp)
  812eb8:	10800843 	ldbu	r2,33(r2)
  812ebc:	11403fcc 	andi	r5,r2,255
  812ec0:	e0fffc17 	ldw	r3,-16(fp)
  812ec4:	20801924 	muli	r2,r4,100
  812ec8:	10c5883a 	add	r2,r2,r3
  812ecc:	1145883a 	add	r2,r2,r5
  812ed0:	10c01004 	addi	r3,r2,64
  812ed4:	e0bff803 	ldbu	r2,-32(fp)
  812ed8:	18800005 	stb	r2,0(r3)

      sp->x++;
  812edc:	e0bffc17 	ldw	r2,-16(fp)
  812ee0:	10800843 	ldbu	r2,33(r2)
  812ee4:	10800044 	addi	r2,r2,1
  812ee8:	1007883a 	mov	r3,r2
  812eec:	e0bffc17 	ldw	r2,-16(fp)
  812ef0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812ef4:	e0bffd17 	ldw	r2,-12(fp)
  812ef8:	10800044 	addi	r2,r2,1
  812efc:	e0bffd15 	stw	r2,-12(fp)
  812f00:	e0fffd17 	ldw	r3,-12(fp)
  812f04:	e0bffb17 	ldw	r2,-20(fp)
  812f08:	18bf5b36 	bltu	r3,r2,812c78 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812f0c:	00800404 	movi	r2,16
  812f10:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812f14:	e03ffa15 	stw	zero,-24(fp)
  812f18:	00003606 	br	812ff4 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f1c:	00801404 	movi	r2,80
  812f20:	e0bff615 	stw	r2,-40(fp)
  812f24:	00001106 	br	812f6c <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812f28:	e13ffa17 	ldw	r4,-24(fp)
  812f2c:	e0bff617 	ldw	r2,-40(fp)
  812f30:	117fffc4 	addi	r5,r2,-1
  812f34:	e0fffc17 	ldw	r3,-16(fp)
  812f38:	20801924 	muli	r2,r4,100
  812f3c:	10c5883a 	add	r2,r2,r3
  812f40:	1145883a 	add	r2,r2,r5
  812f44:	10801004 	addi	r2,r2,64
  812f48:	10800003 	ldbu	r2,0(r2)
  812f4c:	10803fcc 	andi	r2,r2,255
  812f50:	1080201c 	xori	r2,r2,128
  812f54:	10bfe004 	addi	r2,r2,-128
  812f58:	10800818 	cmpnei	r2,r2,32
  812f5c:	1000061e 	bne	r2,zero,812f78 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f60:	e0bff617 	ldw	r2,-40(fp)
  812f64:	10bfffc4 	addi	r2,r2,-1
  812f68:	e0bff615 	stw	r2,-40(fp)
  812f6c:	e0bff617 	ldw	r2,-40(fp)
  812f70:	10800048 	cmpgei	r2,r2,1
  812f74:	103fec1e 	bne	r2,zero,812f28 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812f78:	e0bff617 	ldw	r2,-40(fp)
  812f7c:	10800448 	cmpgei	r2,r2,17
  812f80:	1000031e 	bne	r2,zero,812f90 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812f84:	00800404 	movi	r2,16
  812f88:	e0bff615 	stw	r2,-40(fp)
  812f8c:	00000306 	br	812f9c <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812f90:	e0bff617 	ldw	r2,-40(fp)
  812f94:	10800044 	addi	r2,r2,1
  812f98:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812f9c:	e13ffa17 	ldw	r4,-24(fp)
  812fa0:	e0bff617 	ldw	r2,-40(fp)
  812fa4:	100b883a 	mov	r5,r2
  812fa8:	e0fffc17 	ldw	r3,-16(fp)
  812fac:	20801924 	muli	r2,r4,100
  812fb0:	10c5883a 	add	r2,r2,r3
  812fb4:	10802404 	addi	r2,r2,144
  812fb8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812fbc:	e0fff917 	ldw	r3,-28(fp)
  812fc0:	e0bff617 	ldw	r2,-40(fp)
  812fc4:	1880020e 	bge	r3,r2,812fd0 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812fc8:	e0bff617 	ldw	r2,-40(fp)
  812fcc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812fd0:	e0bffa17 	ldw	r2,-24(fp)
  812fd4:	e0fffc17 	ldw	r3,-16(fp)
  812fd8:	10801924 	muli	r2,r2,100
  812fdc:	10c5883a 	add	r2,r2,r3
  812fe0:	10802404 	addi	r2,r2,144
  812fe4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812fe8:	e0bffa17 	ldw	r2,-24(fp)
  812fec:	10800044 	addi	r2,r2,1
  812ff0:	e0bffa15 	stw	r2,-24(fp)
  812ff4:	e0bffa17 	ldw	r2,-24(fp)
  812ff8:	10800090 	cmplti	r2,r2,2
  812ffc:	103fc71e 	bne	r2,zero,812f1c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  813000:	e0bff917 	ldw	r2,-28(fp)
  813004:	10800448 	cmpgei	r2,r2,17
  813008:	1000031e 	bne	r2,zero,813018 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  81300c:	e0bffc17 	ldw	r2,-16(fp)
  813010:	10000985 	stb	zero,38(r2)
  813014:	00002d06 	br	8130cc <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  813018:	e0bff917 	ldw	r2,-28(fp)
  81301c:	1085883a 	add	r2,r2,r2
  813020:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  813024:	e0bff917 	ldw	r2,-28(fp)
  813028:	1007883a 	mov	r3,r2
  81302c:	e0bffc17 	ldw	r2,-16(fp)
  813030:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813034:	e03ffa15 	stw	zero,-24(fp)
  813038:	00002106 	br	8130c0 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81303c:	e0bffa17 	ldw	r2,-24(fp)
  813040:	e0fffc17 	ldw	r3,-16(fp)
  813044:	10801924 	muli	r2,r2,100
  813048:	10c5883a 	add	r2,r2,r3
  81304c:	10802404 	addi	r2,r2,144
  813050:	10800043 	ldbu	r2,1(r2)
  813054:	10803fcc 	andi	r2,r2,255
  813058:	1080201c 	xori	r2,r2,128
  81305c:	10bfe004 	addi	r2,r2,-128
  813060:	10800450 	cmplti	r2,r2,17
  813064:	1000131e 	bne	r2,zero,8130b4 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  813068:	e43ffa17 	ldw	r16,-24(fp)
  81306c:	e0bffa17 	ldw	r2,-24(fp)
  813070:	e0fffc17 	ldw	r3,-16(fp)
  813074:	10801924 	muli	r2,r2,100
  813078:	10c5883a 	add	r2,r2,r3
  81307c:	10802404 	addi	r2,r2,144
  813080:	10800043 	ldbu	r2,1(r2)
  813084:	10803fcc 	andi	r2,r2,255
  813088:	1080201c 	xori	r2,r2,128
  81308c:	10bfe004 	addi	r2,r2,-128
  813090:	1008923a 	slli	r4,r2,8
  813094:	e17ff917 	ldw	r5,-28(fp)
  813098:	080fcf40 	call	80fcf4 <__divsi3>
  81309c:	1009883a 	mov	r4,r2
  8130a0:	e0fffc17 	ldw	r3,-16(fp)
  8130a4:	80801924 	muli	r2,r16,100
  8130a8:	10c5883a 	add	r2,r2,r3
  8130ac:	10802404 	addi	r2,r2,144
  8130b0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8130b4:	e0bffa17 	ldw	r2,-24(fp)
  8130b8:	10800044 	addi	r2,r2,1
  8130bc:	e0bffa15 	stw	r2,-24(fp)
  8130c0:	e0bffa17 	ldw	r2,-24(fp)
  8130c4:	10800090 	cmplti	r2,r2,2
  8130c8:	103fdc1e 	bne	r2,zero,81303c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8130cc:	e0bffc17 	ldw	r2,-16(fp)
  8130d0:	10800943 	ldbu	r2,37(r2)
  8130d4:	10803fcc 	andi	r2,r2,255
  8130d8:	1080201c 	xori	r2,r2,128
  8130dc:	10bfe004 	addi	r2,r2,-128
  8130e0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8130e4:	e13ffc17 	ldw	r4,-16(fp)
  8130e8:	08126ac0 	call	8126ac <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8130ec:	e0bffc17 	ldw	r2,-16(fp)
  8130f0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8130f4:	e0bffc17 	ldw	r2,-16(fp)
  8130f8:	10800943 	ldbu	r2,37(r2)
  8130fc:	10c03fcc 	andi	r3,r2,255
  813100:	18c0201c 	xori	r3,r3,128
  813104:	18ffe004 	addi	r3,r3,-128
  813108:	e0bff517 	ldw	r2,-44(fp)
  81310c:	18800426 	beq	r3,r2,813120 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  813110:	e0fffc17 	ldw	r3,-16(fp)
  813114:	00800044 	movi	r2,1
  813118:	188009c5 	stb	r2,39(r3)
  }
  81311c:	003feb06 	br	8130cc <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813120:	e0bffe17 	ldw	r2,-8(fp)
}
  813124:	e037883a 	mov	sp,fp
  813128:	dfc00217 	ldw	ra,8(sp)
  81312c:	df000117 	ldw	fp,4(sp)
  813130:	dc000017 	ldw	r16,0(sp)
  813134:	dec00304 	addi	sp,sp,12
  813138:	f800283a 	ret

0081313c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81313c:	defffc04 	addi	sp,sp,-16
  813140:	dfc00315 	stw	ra,12(sp)
  813144:	df000215 	stw	fp,8(sp)
  813148:	df000204 	addi	fp,sp,8
  81314c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  813150:	e0bfff17 	ldw	r2,-4(fp)
  813154:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  813158:	e0bffe17 	ldw	r2,-8(fp)
  81315c:	10800943 	ldbu	r2,37(r2)
  813160:	10803fcc 	andi	r2,r2,255
  813164:	1080201c 	xori	r2,r2,128
  813168:	10bfe004 	addi	r2,r2,-128
  81316c:	10c00044 	addi	r3,r2,1
  813170:	e0bffe17 	ldw	r2,-8(fp)
  813174:	10800983 	ldbu	r2,38(r2)
  813178:	10803fcc 	andi	r2,r2,255
  81317c:	1080201c 	xori	r2,r2,128
  813180:	10bfe004 	addi	r2,r2,-128
  813184:	18800316 	blt	r3,r2,813194 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  813188:	e0bffe17 	ldw	r2,-8(fp)
  81318c:	10000945 	stb	zero,37(r2)
  813190:	00000606 	br	8131ac <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  813194:	e0bffe17 	ldw	r2,-8(fp)
  813198:	10800943 	ldbu	r2,37(r2)
  81319c:	10800044 	addi	r2,r2,1
  8131a0:	1007883a 	mov	r3,r2
  8131a4:	e0bffe17 	ldw	r2,-8(fp)
  8131a8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8131ac:	e0bffe17 	ldw	r2,-8(fp)
  8131b0:	10800983 	ldbu	r2,38(r2)
  8131b4:	10803fcc 	andi	r2,r2,255
  8131b8:	1080201c 	xori	r2,r2,128
  8131bc:	10bfe004 	addi	r2,r2,-128
  8131c0:	10800050 	cmplti	r2,r2,1
  8131c4:	1000091e 	bne	r2,zero,8131ec <alt_lcd_16207_timeout+0xb0>
  8131c8:	e0bffe17 	ldw	r2,-8(fp)
  8131cc:	108009c3 	ldbu	r2,39(r2)
  8131d0:	10803fcc 	andi	r2,r2,255
  8131d4:	1080201c 	xori	r2,r2,128
  8131d8:	10bfe004 	addi	r2,r2,-128
  8131dc:	1004c03a 	cmpne	r2,r2,zero
  8131e0:	1000021e 	bne	r2,zero,8131ec <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8131e4:	e13ffe17 	ldw	r4,-8(fp)
  8131e8:	08126ac0 	call	8126ac <lcd_repaint_screen>

  return sp->period;
  8131ec:	e0bffe17 	ldw	r2,-8(fp)
  8131f0:	10800717 	ldw	r2,28(r2)
}
  8131f4:	e037883a 	mov	sp,fp
  8131f8:	dfc00117 	ldw	ra,4(sp)
  8131fc:	df000017 	ldw	fp,0(sp)
  813200:	dec00204 	addi	sp,sp,8
  813204:	f800283a 	ret

00813208 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813208:	defffc04 	addi	sp,sp,-16
  81320c:	dfc00315 	stw	ra,12(sp)
  813210:	df000215 	stw	fp,8(sp)
  813214:	df000204 	addi	fp,sp,8
  813218:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81321c:	e0bfff17 	ldw	r2,-4(fp)
  813220:	10800017 	ldw	r2,0(r2)
  813224:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813228:	e0bfff17 	ldw	r2,-4(fp)
  81322c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813230:	010ea604 	movi	r4,15000
  813234:	08147100 	call	814710 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813238:	e0bffe17 	ldw	r2,-8(fp)
  81323c:	1007883a 	mov	r3,r2
  813240:	00800c04 	movi	r2,48
  813244:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813248:	01040104 	movi	r4,4100
  81324c:	08147100 	call	814710 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813250:	e0bffe17 	ldw	r2,-8(fp)
  813254:	1007883a 	mov	r3,r2
  813258:	00800c04 	movi	r2,48
  81325c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813260:	0100fa04 	movi	r4,1000
  813264:	08147100 	call	814710 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813268:	e0bffe17 	ldw	r2,-8(fp)
  81326c:	1007883a 	mov	r3,r2
  813270:	00800c04 	movi	r2,48
  813274:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  813278:	e13fff17 	ldw	r4,-4(fp)
  81327c:	01400e04 	movi	r5,56
  813280:	081245c0 	call	81245c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  813284:	e13fff17 	ldw	r4,-4(fp)
  813288:	01400204 	movi	r5,8
  81328c:	081245c0 	call	81245c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  813290:	e13fff17 	ldw	r4,-4(fp)
  813294:	08125e80 	call	8125e8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  813298:	e13fff17 	ldw	r4,-4(fp)
  81329c:	01400184 	movi	r5,6
  8132a0:	081245c0 	call	81245c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8132a4:	e13fff17 	ldw	r4,-4(fp)
  8132a8:	01400304 	movi	r5,12
  8132ac:	081245c0 	call	81245c <lcd_write_command>

  sp->esccount = -1;
  8132b0:	e0ffff17 	ldw	r3,-4(fp)
  8132b4:	00bfffc4 	movi	r2,-1
  8132b8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8132bc:	e0bfff17 	ldw	r2,-4(fp)
  8132c0:	11000a04 	addi	r4,r2,40
  8132c4:	000b883a 	mov	r5,zero
  8132c8:	01800204 	movi	r6,8
  8132cc:	08034ec0 	call	8034ec <memset>

  sp->scrollpos = 0;
  8132d0:	e0bfff17 	ldw	r2,-4(fp)
  8132d4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8132d8:	e0bfff17 	ldw	r2,-4(fp)
  8132dc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8132e0:	e0bfff17 	ldw	r2,-4(fp)
  8132e4:	100009c5 	stb	zero,39(r2)
  8132e8:	008020b4 	movhi	r2,130
  8132ec:	10a3ab04 	addi	r2,r2,-29012
  8132f0:	10800017 	ldw	r2,0(r2)
  8132f4:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8132f8:	01400284 	movi	r5,10
  8132fc:	080fdb40 	call	80fdb4 <__udivsi3>
  813300:	1007883a 	mov	r3,r2
  813304:	e0bfff17 	ldw	r2,-4(fp)
  813308:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81330c:	e0bfff17 	ldw	r2,-4(fp)
  813310:	11000104 	addi	r4,r2,4
  813314:	e0bfff17 	ldw	r2,-4(fp)
  813318:	10800717 	ldw	r2,28(r2)
  81331c:	100b883a 	mov	r5,r2
  813320:	01802074 	movhi	r6,129
  813324:	318c4f04 	addi	r6,r6,12604
  813328:	e1ffff17 	ldw	r7,-4(fp)
  81332c:	08106540 	call	810654 <alt_alarm_start>
}
  813330:	e037883a 	mov	sp,fp
  813334:	dfc00117 	ldw	ra,4(sp)
  813338:	df000017 	ldw	fp,0(sp)
  81333c:	dec00204 	addi	sp,sp,8
  813340:	f800283a 	ret

00813344 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813344:	defffa04 	addi	sp,sp,-24
  813348:	dfc00515 	stw	ra,20(sp)
  81334c:	df000415 	stw	fp,16(sp)
  813350:	df000404 	addi	fp,sp,16
  813354:	e13ffd15 	stw	r4,-12(fp)
  813358:	e17ffe15 	stw	r5,-8(fp)
  81335c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813360:	e0bffd17 	ldw	r2,-12(fp)
  813364:	10800017 	ldw	r2,0(r2)
  813368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81336c:	e0bffc17 	ldw	r2,-16(fp)
  813370:	11000a04 	addi	r4,r2,40
  813374:	e0bffd17 	ldw	r2,-12(fp)
  813378:	11c00217 	ldw	r7,8(r2)
  81337c:	e17ffe17 	ldw	r5,-8(fp)
  813380:	e1bfff17 	ldw	r6,-4(fp)
  813384:	0812c300 	call	812c30 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  813388:	e037883a 	mov	sp,fp
  81338c:	dfc00117 	ldw	ra,4(sp)
  813390:	df000017 	ldw	fp,0(sp)
  813394:	dec00204 	addi	sp,sp,8
  813398:	f800283a 	ret

0081339c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81339c:	defffa04 	addi	sp,sp,-24
  8133a0:	dfc00515 	stw	ra,20(sp)
  8133a4:	df000415 	stw	fp,16(sp)
  8133a8:	df000404 	addi	fp,sp,16
  8133ac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8133b0:	e0bfff17 	ldw	r2,-4(fp)
  8133b4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8133b8:	e0bfff17 	ldw	r2,-4(fp)
  8133bc:	10800104 	addi	r2,r2,4
  8133c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133c4:	0005303a 	rdctl	r2,status
  8133c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133cc:	e0fffd17 	ldw	r3,-12(fp)
  8133d0:	00bfff84 	movi	r2,-2
  8133d4:	1884703a 	and	r2,r3,r2
  8133d8:	1001703a 	wrctl	status,r2
  
  return context;
  8133dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8133e0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8133e4:	08116240 	call	811624 <alt_tick>
  8133e8:	e0bffe17 	ldw	r2,-8(fp)
  8133ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133f0:	e0bffc17 	ldw	r2,-16(fp)
  8133f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8133f8:	e037883a 	mov	sp,fp
  8133fc:	dfc00117 	ldw	ra,4(sp)
  813400:	df000017 	ldw	fp,0(sp)
  813404:	dec00204 	addi	sp,sp,8
  813408:	f800283a 	ret

0081340c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81340c:	defff804 	addi	sp,sp,-32
  813410:	dfc00715 	stw	ra,28(sp)
  813414:	df000615 	stw	fp,24(sp)
  813418:	df000604 	addi	fp,sp,24
  81341c:	e13ffc15 	stw	r4,-16(fp)
  813420:	e17ffd15 	stw	r5,-12(fp)
  813424:	e1bffe15 	stw	r6,-8(fp)
  813428:	e1ffff15 	stw	r7,-4(fp)
  81342c:	e0bfff17 	ldw	r2,-4(fp)
  813430:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813434:	008020b4 	movhi	r2,130
  813438:	10a3ab04 	addi	r2,r2,-29012
  81343c:	10800017 	ldw	r2,0(r2)
  813440:	1004c03a 	cmpne	r2,r2,zero
  813444:	1000041e 	bne	r2,zero,813458 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813448:	00c020b4 	movhi	r3,130
  81344c:	18e3ab04 	addi	r3,r3,-29012
  813450:	e0bffb17 	ldw	r2,-20(fp)
  813454:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813458:	e0bffc17 	ldw	r2,-16(fp)
  81345c:	10800104 	addi	r2,r2,4
  813460:	1007883a 	mov	r3,r2
  813464:	008001c4 	movi	r2,7
  813468:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81346c:	d8000015 	stw	zero,0(sp)
  813470:	e13ffd17 	ldw	r4,-12(fp)
  813474:	e17ffe17 	ldw	r5,-8(fp)
  813478:	01802074 	movhi	r6,129
  81347c:	318ce704 	addi	r6,r6,13212
  813480:	e1fffc17 	ldw	r7,-16(fp)
  813484:	08143080 	call	814308 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813488:	e037883a 	mov	sp,fp
  81348c:	dfc00117 	ldw	ra,4(sp)
  813490:	df000017 	ldw	fp,0(sp)
  813494:	dec00204 	addi	sp,sp,8
  813498:	f800283a 	ret

0081349c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81349c:	defffa04 	addi	sp,sp,-24
  8134a0:	dfc00515 	stw	ra,20(sp)
  8134a4:	df000415 	stw	fp,16(sp)
  8134a8:	df000404 	addi	fp,sp,16
  8134ac:	e13ffd15 	stw	r4,-12(fp)
  8134b0:	e17ffe15 	stw	r5,-8(fp)
  8134b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8134b8:	e0bffd17 	ldw	r2,-12(fp)
  8134bc:	10800017 	ldw	r2,0(r2)
  8134c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8134c4:	e0bffc17 	ldw	r2,-16(fp)
  8134c8:	11000a04 	addi	r4,r2,40
  8134cc:	e0bffd17 	ldw	r2,-12(fp)
  8134d0:	11c00217 	ldw	r7,8(r2)
  8134d4:	e17ffe17 	ldw	r5,-8(fp)
  8134d8:	e1bfff17 	ldw	r6,-4(fp)
  8134dc:	08139940 	call	813994 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8134e0:	e037883a 	mov	sp,fp
  8134e4:	dfc00117 	ldw	ra,4(sp)
  8134e8:	df000017 	ldw	fp,0(sp)
  8134ec:	dec00204 	addi	sp,sp,8
  8134f0:	f800283a 	ret

008134f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8134f4:	defffa04 	addi	sp,sp,-24
  8134f8:	dfc00515 	stw	ra,20(sp)
  8134fc:	df000415 	stw	fp,16(sp)
  813500:	df000404 	addi	fp,sp,16
  813504:	e13ffd15 	stw	r4,-12(fp)
  813508:	e17ffe15 	stw	r5,-8(fp)
  81350c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813510:	e0bffd17 	ldw	r2,-12(fp)
  813514:	10800017 	ldw	r2,0(r2)
  813518:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81351c:	e0bffc17 	ldw	r2,-16(fp)
  813520:	11000a04 	addi	r4,r2,40
  813524:	e0bffd17 	ldw	r2,-12(fp)
  813528:	11c00217 	ldw	r7,8(r2)
  81352c:	e17ffe17 	ldw	r5,-8(fp)
  813530:	e1bfff17 	ldw	r6,-4(fp)
  813534:	0813c240 	call	813c24 <altera_avalon_uart_write>
      fd->fd_flags);
}
  813538:	e037883a 	mov	sp,fp
  81353c:	dfc00117 	ldw	ra,4(sp)
  813540:	df000017 	ldw	fp,0(sp)
  813544:	dec00204 	addi	sp,sp,8
  813548:	f800283a 	ret

0081354c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  81354c:	defffc04 	addi	sp,sp,-16
  813550:	dfc00315 	stw	ra,12(sp)
  813554:	df000215 	stw	fp,8(sp)
  813558:	df000204 	addi	fp,sp,8
  81355c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813560:	e0bfff17 	ldw	r2,-4(fp)
  813564:	10800017 	ldw	r2,0(r2)
  813568:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  81356c:	e0bffe17 	ldw	r2,-8(fp)
  813570:	11000a04 	addi	r4,r2,40
  813574:	e0bfff17 	ldw	r2,-4(fp)
  813578:	11400217 	ldw	r5,8(r2)
  81357c:	08139340 	call	813934 <altera_avalon_uart_close>
}
  813580:	e037883a 	mov	sp,fp
  813584:	dfc00117 	ldw	ra,4(sp)
  813588:	df000017 	ldw	fp,0(sp)
  81358c:	dec00204 	addi	sp,sp,8
  813590:	f800283a 	ret

00813594 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  813594:	defff704 	addi	sp,sp,-36
  813598:	dfc00815 	stw	ra,32(sp)
  81359c:	df000715 	stw	fp,28(sp)
  8135a0:	df000704 	addi	fp,sp,28
  8135a4:	e13ffc15 	stw	r4,-16(fp)
  8135a8:	e17ffd15 	stw	r5,-12(fp)
  8135ac:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  8135b0:	e0bffc17 	ldw	r2,-16(fp)
  8135b4:	10800017 	ldw	r2,0(r2)
  8135b8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8135bc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8135c0:	1004c03a 	cmpne	r2,r2,zero
  8135c4:	1000061e 	bne	r2,zero,8135e0 <altera_avalon_uart_init+0x4c>
  8135c8:	0005883a 	mov	r2,zero
  8135cc:	1004c03a 	cmpne	r2,r2,zero
  8135d0:	1000031e 	bne	r2,zero,8135e0 <altera_avalon_uart_init+0x4c>
  8135d4:	0005883a 	mov	r2,zero
  8135d8:	1005003a 	cmpeq	r2,r2,zero
  8135dc:	1000031e 	bne	r2,zero,8135ec <altera_avalon_uart_init+0x58>
  8135e0:	00800044 	movi	r2,1
  8135e4:	e0bfff15 	stw	r2,-4(fp)
  8135e8:	00000106 	br	8135f0 <altera_avalon_uart_init+0x5c>
  8135ec:	e03fff15 	stw	zero,-4(fp)
  8135f0:	e0bfff17 	ldw	r2,-4(fp)
  8135f4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8135f8:	e0bffa17 	ldw	r2,-24(fp)
  8135fc:	1004c03a 	cmpne	r2,r2,zero
  813600:	1000111e 	bne	r2,zero,813648 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  813604:	e0fffc17 	ldw	r3,-16(fp)
  813608:	00832004 	movi	r2,3200
  81360c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813610:	e0bffb17 	ldw	r2,-20(fp)
  813614:	11000304 	addi	r4,r2,12
  813618:	e0bffc17 	ldw	r2,-16(fp)
  81361c:	10800117 	ldw	r2,4(r2)
  813620:	1007883a 	mov	r3,r2
  813624:	2005883a 	mov	r2,r4
  813628:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  81362c:	d8000015 	stw	zero,0(sp)
  813630:	e13ffd17 	ldw	r4,-12(fp)
  813634:	e17ffe17 	ldw	r5,-8(fp)
  813638:	01802074 	movhi	r6,129
  81363c:	318d9704 	addi	r6,r6,13916
  813640:	e1fffc17 	ldw	r7,-16(fp)
  813644:	08143080 	call	814308 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  813648:	e037883a 	mov	sp,fp
  81364c:	dfc00117 	ldw	ra,4(sp)
  813650:	df000017 	ldw	fp,0(sp)
  813654:	dec00204 	addi	sp,sp,8
  813658:	f800283a 	ret

0081365c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81365c:	defffa04 	addi	sp,sp,-24
  813660:	dfc00515 	stw	ra,20(sp)
  813664:	df000415 	stw	fp,16(sp)
  813668:	df000404 	addi	fp,sp,16
  81366c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  813670:	e0bfff17 	ldw	r2,-4(fp)
  813674:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  813678:	e0bffd17 	ldw	r2,-12(fp)
  81367c:	10800017 	ldw	r2,0(r2)
  813680:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  813684:	e0bffc17 	ldw	r2,-16(fp)
  813688:	10800204 	addi	r2,r2,8
  81368c:	10800037 	ldwio	r2,0(r2)
  813690:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  813694:	e0bffc17 	ldw	r2,-16(fp)
  813698:	10800204 	addi	r2,r2,8
  81369c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8136a0:	e0bffc17 	ldw	r2,-16(fp)
  8136a4:	10800204 	addi	r2,r2,8
  8136a8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8136ac:	e0bffe17 	ldw	r2,-8(fp)
  8136b0:	1080200c 	andi	r2,r2,128
  8136b4:	1005003a 	cmpeq	r2,r2,zero
  8136b8:	1000031e 	bne	r2,zero,8136c8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8136bc:	e13ffd17 	ldw	r4,-12(fp)
  8136c0:	e17ffe17 	ldw	r5,-8(fp)
  8136c4:	08136f80 	call	8136f8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8136c8:	e0bffe17 	ldw	r2,-8(fp)
  8136cc:	1081100c 	andi	r2,r2,1088
  8136d0:	1005003a 	cmpeq	r2,r2,zero
  8136d4:	1000031e 	bne	r2,zero,8136e4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8136d8:	e13ffd17 	ldw	r4,-12(fp)
  8136dc:	e17ffe17 	ldw	r5,-8(fp)
  8136e0:	08137d80 	call	8137d8 <altera_avalon_uart_txirq>
  }
  

}
  8136e4:	e037883a 	mov	sp,fp
  8136e8:	dfc00117 	ldw	ra,4(sp)
  8136ec:	df000017 	ldw	fp,0(sp)
  8136f0:	dec00204 	addi	sp,sp,8
  8136f4:	f800283a 	ret

008136f8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8136f8:	defffc04 	addi	sp,sp,-16
  8136fc:	df000315 	stw	fp,12(sp)
  813700:	df000304 	addi	fp,sp,12
  813704:	e13ffe15 	stw	r4,-8(fp)
  813708:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81370c:	e0bfff17 	ldw	r2,-4(fp)
  813710:	108000cc 	andi	r2,r2,3
  813714:	1004c03a 	cmpne	r2,r2,zero
  813718:	10002b1e 	bne	r2,zero,8137c8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81371c:	e0bffe17 	ldw	r2,-8(fp)
  813720:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813724:	e0bffe17 	ldw	r2,-8(fp)
  813728:	10800317 	ldw	r2,12(r2)
  81372c:	10800044 	addi	r2,r2,1
  813730:	10800fcc 	andi	r2,r2,63
  813734:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  813738:	e0bffe17 	ldw	r2,-8(fp)
  81373c:	11000317 	ldw	r4,12(r2)
  813740:	e0bffe17 	ldw	r2,-8(fp)
  813744:	10800017 	ldw	r2,0(r2)
  813748:	10800037 	ldwio	r2,0(r2)
  81374c:	1007883a 	mov	r3,r2
  813750:	e0bffe17 	ldw	r2,-8(fp)
  813754:	2085883a 	add	r2,r4,r2
  813758:	10800704 	addi	r2,r2,28
  81375c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  813760:	e0fffe17 	ldw	r3,-8(fp)
  813764:	e0bffd17 	ldw	r2,-12(fp)
  813768:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81376c:	e0bffe17 	ldw	r2,-8(fp)
  813770:	10800317 	ldw	r2,12(r2)
  813774:	10800044 	addi	r2,r2,1
  813778:	10800fcc 	andi	r2,r2,63
  81377c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  813780:	e0bffe17 	ldw	r2,-8(fp)
  813784:	10c00217 	ldw	r3,8(r2)
  813788:	e0bffd17 	ldw	r2,-12(fp)
  81378c:	18800e1e 	bne	r3,r2,8137c8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813790:	e0bffe17 	ldw	r2,-8(fp)
  813794:	10c00117 	ldw	r3,4(r2)
  813798:	00bfdfc4 	movi	r2,-129
  81379c:	1886703a 	and	r3,r3,r2
  8137a0:	e0bffe17 	ldw	r2,-8(fp)
  8137a4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8137a8:	e0bffe17 	ldw	r2,-8(fp)
  8137ac:	10800017 	ldw	r2,0(r2)
  8137b0:	11000304 	addi	r4,r2,12
  8137b4:	e0bffe17 	ldw	r2,-8(fp)
  8137b8:	10800117 	ldw	r2,4(r2)
  8137bc:	1007883a 	mov	r3,r2
  8137c0:	2005883a 	mov	r2,r4
  8137c4:	10c00035 	stwio	r3,0(r2)
  }   
}
  8137c8:	e037883a 	mov	sp,fp
  8137cc:	df000017 	ldw	fp,0(sp)
  8137d0:	dec00104 	addi	sp,sp,4
  8137d4:	f800283a 	ret

008137d8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8137d8:	defffd04 	addi	sp,sp,-12
  8137dc:	df000215 	stw	fp,8(sp)
  8137e0:	df000204 	addi	fp,sp,8
  8137e4:	e13ffe15 	stw	r4,-8(fp)
  8137e8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8137ec:	e0bffe17 	ldw	r2,-8(fp)
  8137f0:	10c00417 	ldw	r3,16(r2)
  8137f4:	e0bffe17 	ldw	r2,-8(fp)
  8137f8:	10800517 	ldw	r2,20(r2)
  8137fc:	18803626 	beq	r3,r2,8138d8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813800:	e0bffe17 	ldw	r2,-8(fp)
  813804:	10800617 	ldw	r2,24(r2)
  813808:	1080008c 	andi	r2,r2,2
  81380c:	1005003a 	cmpeq	r2,r2,zero
  813810:	1000041e 	bne	r2,zero,813824 <altera_avalon_uart_txirq+0x4c>
  813814:	e0bfff17 	ldw	r2,-4(fp)
  813818:	1082000c 	andi	r2,r2,2048
  81381c:	1005003a 	cmpeq	r2,r2,zero
  813820:	10001e1e 	bne	r2,zero,81389c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  813824:	e0bffe17 	ldw	r2,-8(fp)
  813828:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  81382c:	e0bffe17 	ldw	r2,-8(fp)
  813830:	10800017 	ldw	r2,0(r2)
  813834:	11000104 	addi	r4,r2,4
  813838:	e0bffe17 	ldw	r2,-8(fp)
  81383c:	10c00417 	ldw	r3,16(r2)
  813840:	e0bffe17 	ldw	r2,-8(fp)
  813844:	1885883a 	add	r2,r3,r2
  813848:	10801704 	addi	r2,r2,92
  81384c:	10800003 	ldbu	r2,0(r2)
  813850:	10c03fcc 	andi	r3,r2,255
  813854:	2005883a 	mov	r2,r4
  813858:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81385c:	e0bffe17 	ldw	r2,-8(fp)
  813860:	10800417 	ldw	r2,16(r2)
  813864:	10c00044 	addi	r3,r2,1
  813868:	e0bffe17 	ldw	r2,-8(fp)
  81386c:	10c00415 	stw	r3,16(r2)
  813870:	e0bffe17 	ldw	r2,-8(fp)
  813874:	10800417 	ldw	r2,16(r2)
  813878:	10c00fcc 	andi	r3,r2,63
  81387c:	e0bffe17 	ldw	r2,-8(fp)
  813880:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813884:	e0bffe17 	ldw	r2,-8(fp)
  813888:	10800117 	ldw	r2,4(r2)
  81388c:	10c01014 	ori	r3,r2,64
  813890:	e0bffe17 	ldw	r2,-8(fp)
  813894:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813898:	00000f06 	br	8138d8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  81389c:	e0bffe17 	ldw	r2,-8(fp)
  8138a0:	10800017 	ldw	r2,0(r2)
  8138a4:	10800204 	addi	r2,r2,8
  8138a8:	10800037 	ldwio	r2,0(r2)
  8138ac:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8138b0:	e0bfff17 	ldw	r2,-4(fp)
  8138b4:	1082000c 	andi	r2,r2,2048
  8138b8:	1004c03a 	cmpne	r2,r2,zero
  8138bc:	1000061e 	bne	r2,zero,8138d8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8138c0:	e0bffe17 	ldw	r2,-8(fp)
  8138c4:	10c00117 	ldw	r3,4(r2)
  8138c8:	00bfefc4 	movi	r2,-65
  8138cc:	1886703a 	and	r3,r3,r2
  8138d0:	e0bffe17 	ldw	r2,-8(fp)
  8138d4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8138d8:	e0bffe17 	ldw	r2,-8(fp)
  8138dc:	10c00417 	ldw	r3,16(r2)
  8138e0:	e0bffe17 	ldw	r2,-8(fp)
  8138e4:	10800517 	ldw	r2,20(r2)
  8138e8:	1880061e 	bne	r3,r2,813904 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8138ec:	e0bffe17 	ldw	r2,-8(fp)
  8138f0:	10c00117 	ldw	r3,4(r2)
  8138f4:	00beefc4 	movi	r2,-1089
  8138f8:	1886703a 	and	r3,r3,r2
  8138fc:	e0bffe17 	ldw	r2,-8(fp)
  813900:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813904:	e0bffe17 	ldw	r2,-8(fp)
  813908:	10800017 	ldw	r2,0(r2)
  81390c:	11000304 	addi	r4,r2,12
  813910:	e0bffe17 	ldw	r2,-8(fp)
  813914:	10800117 	ldw	r2,4(r2)
  813918:	1007883a 	mov	r3,r2
  81391c:	2005883a 	mov	r2,r4
  813920:	10c00035 	stwio	r3,0(r2)
}
  813924:	e037883a 	mov	sp,fp
  813928:	df000017 	ldw	fp,0(sp)
  81392c:	dec00104 	addi	sp,sp,4
  813930:	f800283a 	ret

00813934 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813934:	defffc04 	addi	sp,sp,-16
  813938:	df000315 	stw	fp,12(sp)
  81393c:	df000304 	addi	fp,sp,12
  813940:	e13ffd15 	stw	r4,-12(fp)
  813944:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813948:	00000706 	br	813968 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81394c:	e0bffe17 	ldw	r2,-8(fp)
  813950:	1090000c 	andi	r2,r2,16384
  813954:	1005003a 	cmpeq	r2,r2,zero
  813958:	1000031e 	bne	r2,zero,813968 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  81395c:	00bffd44 	movi	r2,-11
  813960:	e0bfff15 	stw	r2,-4(fp)
  813964:	00000606 	br	813980 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813968:	e0bffd17 	ldw	r2,-12(fp)
  81396c:	10c00417 	ldw	r3,16(r2)
  813970:	e0bffd17 	ldw	r2,-12(fp)
  813974:	10800517 	ldw	r2,20(r2)
  813978:	18bff41e 	bne	r3,r2,81394c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81397c:	e03fff15 	stw	zero,-4(fp)
  813980:	e0bfff17 	ldw	r2,-4(fp)
}
  813984:	e037883a 	mov	sp,fp
  813988:	df000017 	ldw	fp,0(sp)
  81398c:	dec00104 	addi	sp,sp,4
  813990:	f800283a 	ret

00813994 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813994:	defff004 	addi	sp,sp,-64
  813998:	dfc00f15 	stw	ra,60(sp)
  81399c:	df000e15 	stw	fp,56(sp)
  8139a0:	df000e04 	addi	fp,sp,56
  8139a4:	e13ffb15 	stw	r4,-20(fp)
  8139a8:	e17ffc15 	stw	r5,-16(fp)
  8139ac:	e1bffd15 	stw	r6,-12(fp)
  8139b0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  8139b4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  8139b8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8139bc:	e0bffe17 	ldw	r2,-8(fp)
  8139c0:	1090000c 	andi	r2,r2,16384
  8139c4:	1005003a 	cmpeq	r2,r2,zero
  8139c8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  8139cc:	e0bffb17 	ldw	r2,-20(fp)
  8139d0:	10800217 	ldw	r2,8(r2)
  8139d4:	10800044 	addi	r2,r2,1
  8139d8:	10800fcc 	andi	r2,r2,63
  8139dc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8139e0:	00001906 	br	813a48 <altera_avalon_uart_read+0xb4>
    {
      count++;
  8139e4:	e0bff617 	ldw	r2,-40(fp)
  8139e8:	10800044 	addi	r2,r2,1
  8139ec:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8139f0:	e0bffb17 	ldw	r2,-20(fp)
  8139f4:	10c00217 	ldw	r3,8(r2)
  8139f8:	e0bffb17 	ldw	r2,-20(fp)
  8139fc:	1885883a 	add	r2,r3,r2
  813a00:	10800704 	addi	r2,r2,28
  813a04:	10800003 	ldbu	r2,0(r2)
  813a08:	1007883a 	mov	r3,r2
  813a0c:	e0bffc17 	ldw	r2,-16(fp)
  813a10:	10c00005 	stb	r3,0(r2)
  813a14:	e0bffc17 	ldw	r2,-16(fp)
  813a18:	10800044 	addi	r2,r2,1
  813a1c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  813a20:	e0bffb17 	ldw	r2,-20(fp)
  813a24:	10800217 	ldw	r2,8(r2)
  813a28:	10c00044 	addi	r3,r2,1
  813a2c:	e0bffb17 	ldw	r2,-20(fp)
  813a30:	10c00215 	stw	r3,8(r2)
  813a34:	e0bffb17 	ldw	r2,-20(fp)
  813a38:	10800217 	ldw	r2,8(r2)
  813a3c:	10c00fcc 	andi	r3,r2,63
  813a40:	e0bffb17 	ldw	r2,-20(fp)
  813a44:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813a48:	e0fff617 	ldw	r3,-40(fp)
  813a4c:	e0bffd17 	ldw	r2,-12(fp)
  813a50:	1880050e 	bge	r3,r2,813a68 <altera_avalon_uart_read+0xd4>
  813a54:	e0bffb17 	ldw	r2,-20(fp)
  813a58:	10c00217 	ldw	r3,8(r2)
  813a5c:	e0bffb17 	ldw	r2,-20(fp)
  813a60:	10800317 	ldw	r2,12(r2)
  813a64:	18bfdf1e 	bne	r3,r2,8139e4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813a68:	e0bff617 	ldw	r2,-40(fp)
  813a6c:	1004c03a 	cmpne	r2,r2,zero
  813a70:	1000271e 	bne	r2,zero,813b10 <altera_avalon_uart_read+0x17c>
  813a74:	e0bffb17 	ldw	r2,-20(fp)
  813a78:	10c00217 	ldw	r3,8(r2)
  813a7c:	e0bffb17 	ldw	r2,-20(fp)
  813a80:	10800317 	ldw	r2,12(r2)
  813a84:	1880221e 	bne	r3,r2,813b10 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  813a88:	e0bff917 	ldw	r2,-28(fp)
  813a8c:	1004c03a 	cmpne	r2,r2,zero
  813a90:	1000061e 	bne	r2,zero,813aac <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813a94:	0813bc40 	call	813bc4 <alt_get_errno>
  813a98:	00c002c4 	movi	r3,11
  813a9c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  813aa0:	00800044 	movi	r2,1
  813aa4:	e0bff705 	stb	r2,-36(fp)
        break;
  813aa8:	00001f06 	br	813b28 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813aac:	0005303a 	rdctl	r2,status
  813ab0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ab4:	e0fff517 	ldw	r3,-44(fp)
  813ab8:	00bfff84 	movi	r2,-2
  813abc:	1884703a 	and	r2,r3,r2
  813ac0:	1001703a 	wrctl	status,r2
  
  return context;
  813ac4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813ac8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813acc:	e0bffb17 	ldw	r2,-20(fp)
  813ad0:	10800117 	ldw	r2,4(r2)
  813ad4:	10c02014 	ori	r3,r2,128
  813ad8:	e0bffb17 	ldw	r2,-20(fp)
  813adc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813ae0:	e0bffb17 	ldw	r2,-20(fp)
  813ae4:	10800017 	ldw	r2,0(r2)
  813ae8:	11000304 	addi	r4,r2,12
  813aec:	e0bffb17 	ldw	r2,-20(fp)
  813af0:	10800117 	ldw	r2,4(r2)
  813af4:	1007883a 	mov	r3,r2
  813af8:	2005883a 	mov	r2,r4
  813afc:	10c00035 	stwio	r3,0(r2)
  813b00:	e0bffa17 	ldw	r2,-24(fp)
  813b04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b08:	e0bff417 	ldw	r2,-48(fp)
  813b0c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813b10:	e0bff617 	ldw	r2,-40(fp)
  813b14:	1004c03a 	cmpne	r2,r2,zero
  813b18:	1000031e 	bne	r2,zero,813b28 <altera_avalon_uart_read+0x194>
  813b1c:	e0bffd17 	ldw	r2,-12(fp)
  813b20:	1004c03a 	cmpne	r2,r2,zero
  813b24:	103fc81e 	bne	r2,zero,813a48 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b28:	0005303a 	rdctl	r2,status
  813b2c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b30:	e0fff317 	ldw	r3,-52(fp)
  813b34:	00bfff84 	movi	r2,-2
  813b38:	1884703a 	and	r2,r3,r2
  813b3c:	1001703a 	wrctl	status,r2
  
  return context;
  813b40:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813b44:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813b48:	e0bffb17 	ldw	r2,-20(fp)
  813b4c:	10800117 	ldw	r2,4(r2)
  813b50:	10c02014 	ori	r3,r2,128
  813b54:	e0bffb17 	ldw	r2,-20(fp)
  813b58:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b5c:	e0bffb17 	ldw	r2,-20(fp)
  813b60:	10800017 	ldw	r2,0(r2)
  813b64:	11000304 	addi	r4,r2,12
  813b68:	e0bffb17 	ldw	r2,-20(fp)
  813b6c:	10800117 	ldw	r2,4(r2)
  813b70:	1007883a 	mov	r3,r2
  813b74:	2005883a 	mov	r2,r4
  813b78:	10c00035 	stwio	r3,0(r2)
  813b7c:	e0bffa17 	ldw	r2,-24(fp)
  813b80:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b84:	e0bff217 	ldw	r2,-56(fp)
  813b88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813b8c:	e0bff703 	ldbu	r2,-36(fp)
  813b90:	1005003a 	cmpeq	r2,r2,zero
  813b94:	1000031e 	bne	r2,zero,813ba4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  813b98:	00bffd04 	movi	r2,-12
  813b9c:	e0bfff15 	stw	r2,-4(fp)
  813ba0:	00000206 	br	813bac <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  813ba4:	e0bff617 	ldw	r2,-40(fp)
  813ba8:	e0bfff15 	stw	r2,-4(fp)
  813bac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813bb0:	e037883a 	mov	sp,fp
  813bb4:	dfc00117 	ldw	ra,4(sp)
  813bb8:	df000017 	ldw	fp,0(sp)
  813bbc:	dec00204 	addi	sp,sp,8
  813bc0:	f800283a 	ret

00813bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813bc4:	defffd04 	addi	sp,sp,-12
  813bc8:	dfc00215 	stw	ra,8(sp)
  813bcc:	df000115 	stw	fp,4(sp)
  813bd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813bd4:	00802074 	movhi	r2,129
  813bd8:	109c5b04 	addi	r2,r2,29036
  813bdc:	10800017 	ldw	r2,0(r2)
  813be0:	1005003a 	cmpeq	r2,r2,zero
  813be4:	1000061e 	bne	r2,zero,813c00 <alt_get_errno+0x3c>
  813be8:	00802074 	movhi	r2,129
  813bec:	109c5b04 	addi	r2,r2,29036
  813bf0:	10800017 	ldw	r2,0(r2)
  813bf4:	103ee83a 	callr	r2
  813bf8:	e0bfff15 	stw	r2,-4(fp)
  813bfc:	00000306 	br	813c0c <alt_get_errno+0x48>
  813c00:	008020b4 	movhi	r2,130
  813c04:	10a3a004 	addi	r2,r2,-29056
  813c08:	e0bfff15 	stw	r2,-4(fp)
  813c0c:	e0bfff17 	ldw	r2,-4(fp)
}
  813c10:	e037883a 	mov	sp,fp
  813c14:	dfc00117 	ldw	ra,4(sp)
  813c18:	df000017 	ldw	fp,0(sp)
  813c1c:	dec00204 	addi	sp,sp,8
  813c20:	f800283a 	ret

00813c24 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813c24:	defff204 	addi	sp,sp,-56
  813c28:	dfc00d15 	stw	ra,52(sp)
  813c2c:	df000c15 	stw	fp,48(sp)
  813c30:	df000c04 	addi	fp,sp,48
  813c34:	e13ffc15 	stw	r4,-16(fp)
  813c38:	e17ffd15 	stw	r5,-12(fp)
  813c3c:	e1bffe15 	stw	r6,-8(fp)
  813c40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813c44:	e0bffe17 	ldw	r2,-8(fp)
  813c48:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813c4c:	e0bfff17 	ldw	r2,-4(fp)
  813c50:	1090000c 	andi	r2,r2,16384
  813c54:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813c58:	00004006 	br	813d5c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813c5c:	e0bffc17 	ldw	r2,-16(fp)
  813c60:	10800517 	ldw	r2,20(r2)
  813c64:	10800044 	addi	r2,r2,1
  813c68:	10800fcc 	andi	r2,r2,63
  813c6c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813c70:	e0bffc17 	ldw	r2,-16(fp)
  813c74:	10c00417 	ldw	r3,16(r2)
  813c78:	e0bff917 	ldw	r2,-28(fp)
  813c7c:	1880251e 	bne	r3,r2,813d14 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813c80:	e0bffa17 	ldw	r2,-24(fp)
  813c84:	1005003a 	cmpeq	r2,r2,zero
  813c88:	1000051e 	bne	r2,zero,813ca0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813c8c:	0813dec0 	call	813dec <alt_get_errno>
  813c90:	1007883a 	mov	r3,r2
  813c94:	008002c4 	movi	r2,11
  813c98:	18800015 	stw	r2,0(r3)
        break;
  813c9c:	00003206 	br	813d68 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ca0:	0005303a 	rdctl	r2,status
  813ca4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ca8:	e0fff717 	ldw	r3,-36(fp)
  813cac:	00bfff84 	movi	r2,-2
  813cb0:	1884703a 	and	r2,r3,r2
  813cb4:	1001703a 	wrctl	status,r2
  
  return context;
  813cb8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813cbc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813cc0:	e0bffc17 	ldw	r2,-16(fp)
  813cc4:	10800117 	ldw	r2,4(r2)
  813cc8:	10c11014 	ori	r3,r2,1088
  813ccc:	e0bffc17 	ldw	r2,-16(fp)
  813cd0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813cd4:	e0bffc17 	ldw	r2,-16(fp)
  813cd8:	10800017 	ldw	r2,0(r2)
  813cdc:	11000304 	addi	r4,r2,12
  813ce0:	e0bffc17 	ldw	r2,-16(fp)
  813ce4:	10800117 	ldw	r2,4(r2)
  813ce8:	1007883a 	mov	r3,r2
  813cec:	2005883a 	mov	r2,r4
  813cf0:	10c00035 	stwio	r3,0(r2)
  813cf4:	e0bffb17 	ldw	r2,-20(fp)
  813cf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cfc:	e0bff617 	ldw	r2,-40(fp)
  813d00:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813d04:	e0bffc17 	ldw	r2,-16(fp)
  813d08:	10c00417 	ldw	r3,16(r2)
  813d0c:	e0bff917 	ldw	r2,-28(fp)
  813d10:	18bffc26 	beq	r3,r2,813d04 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813d14:	e0bff817 	ldw	r2,-32(fp)
  813d18:	10bfffc4 	addi	r2,r2,-1
  813d1c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813d20:	e0bffc17 	ldw	r2,-16(fp)
  813d24:	10c00517 	ldw	r3,20(r2)
  813d28:	e0bffd17 	ldw	r2,-12(fp)
  813d2c:	10800003 	ldbu	r2,0(r2)
  813d30:	1009883a 	mov	r4,r2
  813d34:	e0bffc17 	ldw	r2,-16(fp)
  813d38:	1885883a 	add	r2,r3,r2
  813d3c:	10801704 	addi	r2,r2,92
  813d40:	11000005 	stb	r4,0(r2)
  813d44:	e0bffd17 	ldw	r2,-12(fp)
  813d48:	10800044 	addi	r2,r2,1
  813d4c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813d50:	e0fffc17 	ldw	r3,-16(fp)
  813d54:	e0bff917 	ldw	r2,-28(fp)
  813d58:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813d5c:	e0bff817 	ldw	r2,-32(fp)
  813d60:	1004c03a 	cmpne	r2,r2,zero
  813d64:	103fbd1e 	bne	r2,zero,813c5c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d68:	0005303a 	rdctl	r2,status
  813d6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d70:	e0fff517 	ldw	r3,-44(fp)
  813d74:	00bfff84 	movi	r2,-2
  813d78:	1884703a 	and	r2,r3,r2
  813d7c:	1001703a 	wrctl	status,r2
  
  return context;
  813d80:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813d84:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813d88:	e0bffc17 	ldw	r2,-16(fp)
  813d8c:	10800117 	ldw	r2,4(r2)
  813d90:	10c11014 	ori	r3,r2,1088
  813d94:	e0bffc17 	ldw	r2,-16(fp)
  813d98:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813d9c:	e0bffc17 	ldw	r2,-16(fp)
  813da0:	10800017 	ldw	r2,0(r2)
  813da4:	11000304 	addi	r4,r2,12
  813da8:	e0bffc17 	ldw	r2,-16(fp)
  813dac:	10800117 	ldw	r2,4(r2)
  813db0:	1007883a 	mov	r3,r2
  813db4:	2005883a 	mov	r2,r4
  813db8:	10c00035 	stwio	r3,0(r2)
  813dbc:	e0bffb17 	ldw	r2,-20(fp)
  813dc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dc4:	e0bff417 	ldw	r2,-48(fp)
  813dc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813dcc:	e0fffe17 	ldw	r3,-8(fp)
  813dd0:	e0bff817 	ldw	r2,-32(fp)
  813dd4:	1885c83a 	sub	r2,r3,r2
}
  813dd8:	e037883a 	mov	sp,fp
  813ddc:	dfc00117 	ldw	ra,4(sp)
  813de0:	df000017 	ldw	fp,0(sp)
  813de4:	dec00204 	addi	sp,sp,8
  813de8:	f800283a 	ret

00813dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813dec:	defffd04 	addi	sp,sp,-12
  813df0:	dfc00215 	stw	ra,8(sp)
  813df4:	df000115 	stw	fp,4(sp)
  813df8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813dfc:	00802074 	movhi	r2,129
  813e00:	109c5b04 	addi	r2,r2,29036
  813e04:	10800017 	ldw	r2,0(r2)
  813e08:	1005003a 	cmpeq	r2,r2,zero
  813e0c:	1000061e 	bne	r2,zero,813e28 <alt_get_errno+0x3c>
  813e10:	00802074 	movhi	r2,129
  813e14:	109c5b04 	addi	r2,r2,29036
  813e18:	10800017 	ldw	r2,0(r2)
  813e1c:	103ee83a 	callr	r2
  813e20:	e0bfff15 	stw	r2,-4(fp)
  813e24:	00000306 	br	813e34 <alt_get_errno+0x48>
  813e28:	008020b4 	movhi	r2,130
  813e2c:	10a3a004 	addi	r2,r2,-29056
  813e30:	e0bfff15 	stw	r2,-4(fp)
  813e34:	e0bfff17 	ldw	r2,-4(fp)
}
  813e38:	e037883a 	mov	sp,fp
  813e3c:	dfc00117 	ldw	ra,4(sp)
  813e40:	df000017 	ldw	fp,0(sp)
  813e44:	dec00204 	addi	sp,sp,8
  813e48:	f800283a 	ret

00813e4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813e4c:	defffe04 	addi	sp,sp,-8
  813e50:	df000115 	stw	fp,4(sp)
  813e54:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813e58:	e03fff15 	stw	zero,-4(fp)
  813e5c:	00000506 	br	813e74 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813e60:	e0bfff17 	ldw	r2,-4(fp)
  813e64:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813e68:	e0bfff17 	ldw	r2,-4(fp)
  813e6c:	10800804 	addi	r2,r2,32
  813e70:	e0bfff15 	stw	r2,-4(fp)
  813e74:	e0bfff17 	ldw	r2,-4(fp)
  813e78:	10820030 	cmpltui	r2,r2,2048
  813e7c:	103ff81e 	bne	r2,zero,813e60 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813e80:	e037883a 	mov	sp,fp
  813e84:	df000017 	ldw	fp,0(sp)
  813e88:	dec00104 	addi	sp,sp,4
  813e8c:	f800283a 	ret

00813e90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813e90:	defff904 	addi	sp,sp,-28
  813e94:	dfc00615 	stw	ra,24(sp)
  813e98:	df000515 	stw	fp,20(sp)
  813e9c:	df000504 	addi	fp,sp,20
  813ea0:	e13ffd15 	stw	r4,-12(fp)
  813ea4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813ea8:	e0bffd17 	ldw	r2,-12(fp)
  813eac:	1005003a 	cmpeq	r2,r2,zero
  813eb0:	1000041e 	bne	r2,zero,813ec4 <alt_dev_llist_insert+0x34>
  813eb4:	e0bffd17 	ldw	r2,-12(fp)
  813eb8:	10800217 	ldw	r2,8(r2)
  813ebc:	1004c03a 	cmpne	r2,r2,zero
  813ec0:	1000071e 	bne	r2,zero,813ee0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813ec4:	0813f440 	call	813f44 <alt_get_errno>
  813ec8:	1007883a 	mov	r3,r2
  813ecc:	00800584 	movi	r2,22
  813ed0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813ed4:	00bffa84 	movi	r2,-22
  813ed8:	e0bfff15 	stw	r2,-4(fp)
  813edc:	00001306 	br	813f2c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813ee0:	e0fffd17 	ldw	r3,-12(fp)
  813ee4:	e0bffe17 	ldw	r2,-8(fp)
  813ee8:	e0bffb15 	stw	r2,-20(fp)
  813eec:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813ef0:	e0fffc17 	ldw	r3,-16(fp)
  813ef4:	e0bffb17 	ldw	r2,-20(fp)
  813ef8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813efc:	e0bffb17 	ldw	r2,-20(fp)
  813f00:	10c00017 	ldw	r3,0(r2)
  813f04:	e0bffc17 	ldw	r2,-16(fp)
  813f08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813f0c:	e0bffb17 	ldw	r2,-20(fp)
  813f10:	10c00017 	ldw	r3,0(r2)
  813f14:	e0bffc17 	ldw	r2,-16(fp)
  813f18:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813f1c:	e0fffb17 	ldw	r3,-20(fp)
  813f20:	e0bffc17 	ldw	r2,-16(fp)
  813f24:	18800015 	stw	r2,0(r3)

  return 0;  
  813f28:	e03fff15 	stw	zero,-4(fp)
  813f2c:	e0bfff17 	ldw	r2,-4(fp)
}
  813f30:	e037883a 	mov	sp,fp
  813f34:	dfc00117 	ldw	ra,4(sp)
  813f38:	df000017 	ldw	fp,0(sp)
  813f3c:	dec00204 	addi	sp,sp,8
  813f40:	f800283a 	ret

00813f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813f44:	defffd04 	addi	sp,sp,-12
  813f48:	dfc00215 	stw	ra,8(sp)
  813f4c:	df000115 	stw	fp,4(sp)
  813f50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813f54:	00802074 	movhi	r2,129
  813f58:	109c5b04 	addi	r2,r2,29036
  813f5c:	10800017 	ldw	r2,0(r2)
  813f60:	1005003a 	cmpeq	r2,r2,zero
  813f64:	1000061e 	bne	r2,zero,813f80 <alt_get_errno+0x3c>
  813f68:	00802074 	movhi	r2,129
  813f6c:	109c5b04 	addi	r2,r2,29036
  813f70:	10800017 	ldw	r2,0(r2)
  813f74:	103ee83a 	callr	r2
  813f78:	e0bfff15 	stw	r2,-4(fp)
  813f7c:	00000306 	br	813f8c <alt_get_errno+0x48>
  813f80:	008020b4 	movhi	r2,130
  813f84:	10a3a004 	addi	r2,r2,-29056
  813f88:	e0bfff15 	stw	r2,-4(fp)
  813f8c:	e0bfff17 	ldw	r2,-4(fp)
}
  813f90:	e037883a 	mov	sp,fp
  813f94:	dfc00117 	ldw	ra,4(sp)
  813f98:	df000017 	ldw	fp,0(sp)
  813f9c:	dec00204 	addi	sp,sp,8
  813fa0:	f800283a 	ret

00813fa4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813fa4:	defffd04 	addi	sp,sp,-12
  813fa8:	dfc00215 	stw	ra,8(sp)
  813fac:	df000115 	stw	fp,4(sp)
  813fb0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813fb4:	00bfff04 	movi	r2,-4
  813fb8:	00c02074 	movhi	r3,129
  813fbc:	18d35204 	addi	r3,r3,19784
  813fc0:	1885883a 	add	r2,r3,r2
  813fc4:	e0bfff15 	stw	r2,-4(fp)
  813fc8:	00000606 	br	813fe4 <_do_ctors+0x40>
        (*ctor) (); 
  813fcc:	e0bfff17 	ldw	r2,-4(fp)
  813fd0:	10800017 	ldw	r2,0(r2)
  813fd4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813fd8:	e0bfff17 	ldw	r2,-4(fp)
  813fdc:	10bfff04 	addi	r2,r2,-4
  813fe0:	e0bfff15 	stw	r2,-4(fp)
  813fe4:	e0ffff17 	ldw	r3,-4(fp)
  813fe8:	00802074 	movhi	r2,129
  813fec:	10935104 	addi	r2,r2,19780
  813ff0:	18bff62e 	bgeu	r3,r2,813fcc <_do_ctors+0x28>
        (*ctor) (); 
}
  813ff4:	e037883a 	mov	sp,fp
  813ff8:	dfc00117 	ldw	ra,4(sp)
  813ffc:	df000017 	ldw	fp,0(sp)
  814000:	dec00204 	addi	sp,sp,8
  814004:	f800283a 	ret

00814008 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  814008:	defffd04 	addi	sp,sp,-12
  81400c:	dfc00215 	stw	ra,8(sp)
  814010:	df000115 	stw	fp,4(sp)
  814014:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814018:	00bfff04 	movi	r2,-4
  81401c:	00c02074 	movhi	r3,129
  814020:	18d35204 	addi	r3,r3,19784
  814024:	1885883a 	add	r2,r3,r2
  814028:	e0bfff15 	stw	r2,-4(fp)
  81402c:	00000606 	br	814048 <_do_dtors+0x40>
        (*dtor) (); 
  814030:	e0bfff17 	ldw	r2,-4(fp)
  814034:	10800017 	ldw	r2,0(r2)
  814038:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81403c:	e0bfff17 	ldw	r2,-4(fp)
  814040:	10bfff04 	addi	r2,r2,-4
  814044:	e0bfff15 	stw	r2,-4(fp)
  814048:	e0ffff17 	ldw	r3,-4(fp)
  81404c:	00802074 	movhi	r2,129
  814050:	10935204 	addi	r2,r2,19784
  814054:	18bff62e 	bgeu	r3,r2,814030 <_do_dtors+0x28>
        (*dtor) (); 
}
  814058:	e037883a 	mov	sp,fp
  81405c:	dfc00117 	ldw	ra,4(sp)
  814060:	df000017 	ldw	fp,0(sp)
  814064:	dec00204 	addi	sp,sp,8
  814068:	f800283a 	ret

0081406c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81406c:	defff904 	addi	sp,sp,-28
  814070:	dfc00615 	stw	ra,24(sp)
  814074:	df000515 	stw	fp,20(sp)
  814078:	df000504 	addi	fp,sp,20
  81407c:	e13ffd15 	stw	r4,-12(fp)
  814080:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814084:	e0bffe17 	ldw	r2,-8(fp)
  814088:	10800017 	ldw	r2,0(r2)
  81408c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  814090:	e13ffd17 	ldw	r4,-12(fp)
  814094:	08043000 	call	804300 <strlen>
  814098:	10800044 	addi	r2,r2,1
  81409c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8140a0:	00000d06 	br	8140d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8140a4:	e0bffc17 	ldw	r2,-16(fp)
  8140a8:	11000217 	ldw	r4,8(r2)
  8140ac:	e1bffb17 	ldw	r6,-20(fp)
  8140b0:	e17ffd17 	ldw	r5,-12(fp)
  8140b4:	08149880 	call	814988 <memcmp>
  8140b8:	1004c03a 	cmpne	r2,r2,zero
  8140bc:	1000031e 	bne	r2,zero,8140cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8140c0:	e0bffc17 	ldw	r2,-16(fp)
  8140c4:	e0bfff15 	stw	r2,-4(fp)
  8140c8:	00000706 	br	8140e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8140cc:	e0bffc17 	ldw	r2,-16(fp)
  8140d0:	10800017 	ldw	r2,0(r2)
  8140d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8140d8:	e0fffe17 	ldw	r3,-8(fp)
  8140dc:	e0bffc17 	ldw	r2,-16(fp)
  8140e0:	10fff01e 	bne	r2,r3,8140a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8140e4:	e03fff15 	stw	zero,-4(fp)
  8140e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8140ec:	e037883a 	mov	sp,fp
  8140f0:	dfc00117 	ldw	ra,4(sp)
  8140f4:	df000017 	ldw	fp,0(sp)
  8140f8:	dec00204 	addi	sp,sp,8
  8140fc:	f800283a 	ret

00814100 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  814100:	defffa04 	addi	sp,sp,-24
  814104:	dfc00515 	stw	ra,20(sp)
  814108:	df000415 	stw	fp,16(sp)
  81410c:	df000404 	addi	fp,sp,16
  814110:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  814114:	00802074 	movhi	r2,129
  814118:	109c5604 	addi	r2,r2,29016
  81411c:	10800017 	ldw	r2,0(r2)
  814120:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814124:	00003306 	br	8141f4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  814128:	e0bffd17 	ldw	r2,-12(fp)
  81412c:	11000217 	ldw	r4,8(r2)
  814130:	08043000 	call	804300 <strlen>
  814134:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  814138:	e0bffd17 	ldw	r2,-12(fp)
  81413c:	10c00217 	ldw	r3,8(r2)
  814140:	e0bffc17 	ldw	r2,-16(fp)
  814144:	1885883a 	add	r2,r3,r2
  814148:	10bfffc4 	addi	r2,r2,-1
  81414c:	10800003 	ldbu	r2,0(r2)
  814150:	10803fcc 	andi	r2,r2,255
  814154:	1080201c 	xori	r2,r2,128
  814158:	10bfe004 	addi	r2,r2,-128
  81415c:	10800bd8 	cmpnei	r2,r2,47
  814160:	1000031e 	bne	r2,zero,814170 <alt_find_file+0x70>
    {
      len -= 1;
  814164:	e0bffc17 	ldw	r2,-16(fp)
  814168:	10bfffc4 	addi	r2,r2,-1
  81416c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814170:	e0bffc17 	ldw	r2,-16(fp)
  814174:	1007883a 	mov	r3,r2
  814178:	e0bffe17 	ldw	r2,-8(fp)
  81417c:	1885883a 	add	r2,r3,r2
  814180:	10800003 	ldbu	r2,0(r2)
  814184:	10803fcc 	andi	r2,r2,255
  814188:	1080201c 	xori	r2,r2,128
  81418c:	10bfe004 	addi	r2,r2,-128
  814190:	10800be0 	cmpeqi	r2,r2,47
  814194:	10000a1e 	bne	r2,zero,8141c0 <alt_find_file+0xc0>
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	1007883a 	mov	r3,r2
  8141a0:	e0bffe17 	ldw	r2,-8(fp)
  8141a4:	1885883a 	add	r2,r3,r2
  8141a8:	10800003 	ldbu	r2,0(r2)
  8141ac:	10803fcc 	andi	r2,r2,255
  8141b0:	1080201c 	xori	r2,r2,128
  8141b4:	10bfe004 	addi	r2,r2,-128
  8141b8:	1004c03a 	cmpne	r2,r2,zero
  8141bc:	10000a1e 	bne	r2,zero,8141e8 <alt_find_file+0xe8>
  8141c0:	e0bffd17 	ldw	r2,-12(fp)
  8141c4:	11000217 	ldw	r4,8(r2)
  8141c8:	e1bffc17 	ldw	r6,-16(fp)
  8141cc:	e17ffe17 	ldw	r5,-8(fp)
  8141d0:	08149880 	call	814988 <memcmp>
  8141d4:	1004c03a 	cmpne	r2,r2,zero
  8141d8:	1000031e 	bne	r2,zero,8141e8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8141dc:	e0bffd17 	ldw	r2,-12(fp)
  8141e0:	e0bfff15 	stw	r2,-4(fp)
  8141e4:	00000806 	br	814208 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8141e8:	e0bffd17 	ldw	r2,-12(fp)
  8141ec:	10800017 	ldw	r2,0(r2)
  8141f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8141f4:	00c02074 	movhi	r3,129
  8141f8:	18dc5604 	addi	r3,r3,29016
  8141fc:	e0bffd17 	ldw	r2,-12(fp)
  814200:	10ffc91e 	bne	r2,r3,814128 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814204:	e03fff15 	stw	zero,-4(fp)
  814208:	e0bfff17 	ldw	r2,-4(fp)
}
  81420c:	e037883a 	mov	sp,fp
  814210:	dfc00117 	ldw	ra,4(sp)
  814214:	df000017 	ldw	fp,0(sp)
  814218:	dec00204 	addi	sp,sp,8
  81421c:	f800283a 	ret

00814220 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814220:	defffc04 	addi	sp,sp,-16
  814224:	df000315 	stw	fp,12(sp)
  814228:	df000304 	addi	fp,sp,12
  81422c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814230:	00bffa04 	movi	r2,-24
  814234:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814238:	e03ffe15 	stw	zero,-8(fp)
  81423c:	00001e06 	br	8142b8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  814240:	e0bffe17 	ldw	r2,-8(fp)
  814244:	00c02074 	movhi	r3,129
  814248:	18d75a04 	addi	r3,r3,23912
  81424c:	10800324 	muli	r2,r2,12
  814250:	10c5883a 	add	r2,r2,r3
  814254:	10800017 	ldw	r2,0(r2)
  814258:	1004c03a 	cmpne	r2,r2,zero
  81425c:	1000131e 	bne	r2,zero,8142ac <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  814260:	e0bffe17 	ldw	r2,-8(fp)
  814264:	00c02074 	movhi	r3,129
  814268:	18d75a04 	addi	r3,r3,23912
  81426c:	10800324 	muli	r2,r2,12
  814270:	10c7883a 	add	r3,r2,r3
  814274:	e0bfff17 	ldw	r2,-4(fp)
  814278:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81427c:	00802074 	movhi	r2,129
  814280:	109c5a04 	addi	r2,r2,29032
  814284:	10c00017 	ldw	r3,0(r2)
  814288:	e0bffe17 	ldw	r2,-8(fp)
  81428c:	1880040e 	bge	r3,r2,8142a0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  814290:	00c02074 	movhi	r3,129
  814294:	18dc5a04 	addi	r3,r3,29032
  814298:	e0bffe17 	ldw	r2,-8(fp)
  81429c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8142a0:	e0bffe17 	ldw	r2,-8(fp)
  8142a4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8142a8:	00000606 	br	8142c4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8142ac:	e0bffe17 	ldw	r2,-8(fp)
  8142b0:	10800044 	addi	r2,r2,1
  8142b4:	e0bffe15 	stw	r2,-8(fp)
  8142b8:	e0bffe17 	ldw	r2,-8(fp)
  8142bc:	10800810 	cmplti	r2,r2,32
  8142c0:	103fdf1e 	bne	r2,zero,814240 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8142c4:	e0bffd17 	ldw	r2,-12(fp)
}
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	df000017 	ldw	fp,0(sp)
  8142d0:	dec00104 	addi	sp,sp,4
  8142d4:	f800283a 	ret

008142d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8142d8:	defffe04 	addi	sp,sp,-8
  8142dc:	dfc00115 	stw	ra,4(sp)
  8142e0:	df000015 	stw	fp,0(sp)
  8142e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8142e8:	0009883a 	mov	r4,zero
  8142ec:	01440004 	movi	r5,4096
  8142f0:	08148ac0 	call	8148ac <alt_icache_flush>
#endif
}
  8142f4:	e037883a 	mov	sp,fp
  8142f8:	dfc00117 	ldw	ra,4(sp)
  8142fc:	df000017 	ldw	fp,0(sp)
  814300:	dec00204 	addi	sp,sp,8
  814304:	f800283a 	ret

00814308 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814308:	defff904 	addi	sp,sp,-28
  81430c:	dfc00615 	stw	ra,24(sp)
  814310:	df000515 	stw	fp,20(sp)
  814314:	df000504 	addi	fp,sp,20
  814318:	e13ffc15 	stw	r4,-16(fp)
  81431c:	e17ffd15 	stw	r5,-12(fp)
  814320:	e1bffe15 	stw	r6,-8(fp)
  814324:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814328:	e0800217 	ldw	r2,8(fp)
  81432c:	d8800015 	stw	r2,0(sp)
  814330:	e13ffc17 	ldw	r4,-16(fp)
  814334:	e17ffd17 	ldw	r5,-12(fp)
  814338:	e1bffe17 	ldw	r6,-8(fp)
  81433c:	e1ffff17 	ldw	r7,-4(fp)
  814340:	08144dc0 	call	8144dc <alt_iic_isr_register>
}  
  814344:	e037883a 	mov	sp,fp
  814348:	dfc00117 	ldw	ra,4(sp)
  81434c:	df000017 	ldw	fp,0(sp)
  814350:	dec00204 	addi	sp,sp,8
  814354:	f800283a 	ret

00814358 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814358:	defff904 	addi	sp,sp,-28
  81435c:	df000615 	stw	fp,24(sp)
  814360:	df000604 	addi	fp,sp,24
  814364:	e13ffe15 	stw	r4,-8(fp)
  814368:	e17fff15 	stw	r5,-4(fp)
  81436c:	e0bfff17 	ldw	r2,-4(fp)
  814370:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814374:	0005303a 	rdctl	r2,status
  814378:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81437c:	e0fffb17 	ldw	r3,-20(fp)
  814380:	00bfff84 	movi	r2,-2
  814384:	1884703a 	and	r2,r3,r2
  814388:	1001703a 	wrctl	status,r2
  
  return context;
  81438c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814390:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  814394:	e0fffc17 	ldw	r3,-16(fp)
  814398:	00800044 	movi	r2,1
  81439c:	10c4983a 	sll	r2,r2,r3
  8143a0:	1007883a 	mov	r3,r2
  8143a4:	008020b4 	movhi	r2,130
  8143a8:	10a3a704 	addi	r2,r2,-29028
  8143ac:	10800017 	ldw	r2,0(r2)
  8143b0:	1886b03a 	or	r3,r3,r2
  8143b4:	008020b4 	movhi	r2,130
  8143b8:	10a3a704 	addi	r2,r2,-29028
  8143bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8143c0:	008020b4 	movhi	r2,130
  8143c4:	10a3a704 	addi	r2,r2,-29028
  8143c8:	10800017 	ldw	r2,0(r2)
  8143cc:	100170fa 	wrctl	ienable,r2
  8143d0:	e0bffd17 	ldw	r2,-12(fp)
  8143d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143d8:	e0bffa17 	ldw	r2,-24(fp)
  8143dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8143e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8143e4:	e037883a 	mov	sp,fp
  8143e8:	df000017 	ldw	fp,0(sp)
  8143ec:	dec00104 	addi	sp,sp,4
  8143f0:	f800283a 	ret

008143f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8143f4:	defff904 	addi	sp,sp,-28
  8143f8:	df000615 	stw	fp,24(sp)
  8143fc:	df000604 	addi	fp,sp,24
  814400:	e13ffe15 	stw	r4,-8(fp)
  814404:	e17fff15 	stw	r5,-4(fp)
  814408:	e0bfff17 	ldw	r2,-4(fp)
  81440c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814410:	0005303a 	rdctl	r2,status
  814414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814418:	e0fffb17 	ldw	r3,-20(fp)
  81441c:	00bfff84 	movi	r2,-2
  814420:	1884703a 	and	r2,r3,r2
  814424:	1001703a 	wrctl	status,r2
  
  return context;
  814428:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81442c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814430:	e0fffc17 	ldw	r3,-16(fp)
  814434:	00800044 	movi	r2,1
  814438:	10c4983a 	sll	r2,r2,r3
  81443c:	0084303a 	nor	r2,zero,r2
  814440:	1007883a 	mov	r3,r2
  814444:	008020b4 	movhi	r2,130
  814448:	10a3a704 	addi	r2,r2,-29028
  81444c:	10800017 	ldw	r2,0(r2)
  814450:	1886703a 	and	r3,r3,r2
  814454:	008020b4 	movhi	r2,130
  814458:	10a3a704 	addi	r2,r2,-29028
  81445c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814460:	008020b4 	movhi	r2,130
  814464:	10a3a704 	addi	r2,r2,-29028
  814468:	10800017 	ldw	r2,0(r2)
  81446c:	100170fa 	wrctl	ienable,r2
  814470:	e0bffd17 	ldw	r2,-12(fp)
  814474:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814478:	e0bffa17 	ldw	r2,-24(fp)
  81447c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814480:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814484:	e037883a 	mov	sp,fp
  814488:	df000017 	ldw	fp,0(sp)
  81448c:	dec00104 	addi	sp,sp,4
  814490:	f800283a 	ret

00814494 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814494:	defffc04 	addi	sp,sp,-16
  814498:	df000315 	stw	fp,12(sp)
  81449c:	df000304 	addi	fp,sp,12
  8144a0:	e13ffe15 	stw	r4,-8(fp)
  8144a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8144a8:	000530fa 	rdctl	r2,ienable
  8144ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8144b0:	e0ffff17 	ldw	r3,-4(fp)
  8144b4:	00800044 	movi	r2,1
  8144b8:	10c4983a 	sll	r2,r2,r3
  8144bc:	1007883a 	mov	r3,r2
  8144c0:	e0bffd17 	ldw	r2,-12(fp)
  8144c4:	1884703a 	and	r2,r3,r2
  8144c8:	1004c03a 	cmpne	r2,r2,zero
}
  8144cc:	e037883a 	mov	sp,fp
  8144d0:	df000017 	ldw	fp,0(sp)
  8144d4:	dec00104 	addi	sp,sp,4
  8144d8:	f800283a 	ret

008144dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8144dc:	defff404 	addi	sp,sp,-48
  8144e0:	dfc00b15 	stw	ra,44(sp)
  8144e4:	df000a15 	stw	fp,40(sp)
  8144e8:	df000a04 	addi	fp,sp,40
  8144ec:	e13ffb15 	stw	r4,-20(fp)
  8144f0:	e17ffc15 	stw	r5,-16(fp)
  8144f4:	e1bffd15 	stw	r6,-12(fp)
  8144f8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8144fc:	00bffa84 	movi	r2,-22
  814500:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814504:	e0bffc17 	ldw	r2,-16(fp)
  814508:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81450c:	e0bff917 	ldw	r2,-28(fp)
  814510:	10800808 	cmpgei	r2,r2,32
  814514:	1000291e 	bne	r2,zero,8145bc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814518:	0005303a 	rdctl	r2,status
  81451c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814520:	e0fff717 	ldw	r3,-36(fp)
  814524:	00bfff84 	movi	r2,-2
  814528:	1884703a 	and	r2,r3,r2
  81452c:	1001703a 	wrctl	status,r2
  
  return context;
  814530:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814534:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  814538:	e0bff917 	ldw	r2,-28(fp)
  81453c:	00c020b4 	movhi	r3,130
  814540:	18e40604 	addi	r3,r3,-28648
  814544:	100490fa 	slli	r2,r2,3
  814548:	10c7883a 	add	r3,r2,r3
  81454c:	e0bffd17 	ldw	r2,-12(fp)
  814550:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814554:	e0bff917 	ldw	r2,-28(fp)
  814558:	00c020b4 	movhi	r3,130
  81455c:	18e40604 	addi	r3,r3,-28648
  814560:	100490fa 	slli	r2,r2,3
  814564:	10c5883a 	add	r2,r2,r3
  814568:	10c00104 	addi	r3,r2,4
  81456c:	e0bffe17 	ldw	r2,-8(fp)
  814570:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814574:	e0bffd17 	ldw	r2,-12(fp)
  814578:	1005003a 	cmpeq	r2,r2,zero
  81457c:	1000051e 	bne	r2,zero,814594 <alt_iic_isr_register+0xb8>
  814580:	e17ff917 	ldw	r5,-28(fp)
  814584:	e13ffb17 	ldw	r4,-20(fp)
  814588:	08143580 	call	814358 <alt_ic_irq_enable>
  81458c:	e0bfff15 	stw	r2,-4(fp)
  814590:	00000406 	br	8145a4 <alt_iic_isr_register+0xc8>
  814594:	e17ff917 	ldw	r5,-28(fp)
  814598:	e13ffb17 	ldw	r4,-20(fp)
  81459c:	08143f40 	call	8143f4 <alt_ic_irq_disable>
  8145a0:	e0bfff15 	stw	r2,-4(fp)
  8145a4:	e0bfff17 	ldw	r2,-4(fp)
  8145a8:	e0bffa15 	stw	r2,-24(fp)
  8145ac:	e0bff817 	ldw	r2,-32(fp)
  8145b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8145b4:	e0bff617 	ldw	r2,-40(fp)
  8145b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8145bc:	e0bffa17 	ldw	r2,-24(fp)
}
  8145c0:	e037883a 	mov	sp,fp
  8145c4:	dfc00117 	ldw	ra,4(sp)
  8145c8:	df000017 	ldw	fp,0(sp)
  8145cc:	dec00204 	addi	sp,sp,8
  8145d0:	f800283a 	ret

008145d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8145d4:	defff904 	addi	sp,sp,-28
  8145d8:	dfc00615 	stw	ra,24(sp)
  8145dc:	df000515 	stw	fp,20(sp)
  8145e0:	df000504 	addi	fp,sp,20
  8145e4:	e13ffc15 	stw	r4,-16(fp)
  8145e8:	e17ffd15 	stw	r5,-12(fp)
  8145ec:	e1bffe15 	stw	r6,-8(fp)
  8145f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8145f4:	e13ffd17 	ldw	r4,-12(fp)
  8145f8:	e17ffe17 	ldw	r5,-8(fp)
  8145fc:	e1bfff17 	ldw	r6,-4(fp)
  814600:	08111080 	call	811108 <open>
  814604:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814608:	e0bffb17 	ldw	r2,-20(fp)
  81460c:	1004803a 	cmplt	r2,r2,zero
  814610:	10001c1e 	bne	r2,zero,814684 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814614:	e0bffb17 	ldw	r2,-20(fp)
  814618:	00c02074 	movhi	r3,129
  81461c:	18d75a04 	addi	r3,r3,23912
  814620:	10800324 	muli	r2,r2,12
  814624:	10c5883a 	add	r2,r2,r3
  814628:	10c00017 	ldw	r3,0(r2)
  81462c:	e0bffc17 	ldw	r2,-16(fp)
  814630:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814634:	e0bffb17 	ldw	r2,-20(fp)
  814638:	00c02074 	movhi	r3,129
  81463c:	18d75a04 	addi	r3,r3,23912
  814640:	10800324 	muli	r2,r2,12
  814644:	10c5883a 	add	r2,r2,r3
  814648:	10800104 	addi	r2,r2,4
  81464c:	10c00017 	ldw	r3,0(r2)
  814650:	e0bffc17 	ldw	r2,-16(fp)
  814654:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814658:	e0bffb17 	ldw	r2,-20(fp)
  81465c:	00c02074 	movhi	r3,129
  814660:	18d75a04 	addi	r3,r3,23912
  814664:	10800324 	muli	r2,r2,12
  814668:	10c5883a 	add	r2,r2,r3
  81466c:	10800204 	addi	r2,r2,8
  814670:	10c00017 	ldw	r3,0(r2)
  814674:	e0bffc17 	ldw	r2,-16(fp)
  814678:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81467c:	e13ffb17 	ldw	r4,-20(fp)
  814680:	08114700 	call	811470 <alt_release_fd>
  }
} 
  814684:	e037883a 	mov	sp,fp
  814688:	dfc00117 	ldw	ra,4(sp)
  81468c:	df000017 	ldw	fp,0(sp)
  814690:	dec00204 	addi	sp,sp,8
  814694:	f800283a 	ret

00814698 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  814698:	defffb04 	addi	sp,sp,-20
  81469c:	dfc00415 	stw	ra,16(sp)
  8146a0:	df000315 	stw	fp,12(sp)
  8146a4:	df000304 	addi	fp,sp,12
  8146a8:	e13ffd15 	stw	r4,-12(fp)
  8146ac:	e17ffe15 	stw	r5,-8(fp)
  8146b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8146b4:	01002074 	movhi	r4,129
  8146b8:	21175d04 	addi	r4,r4,23924
  8146bc:	e17ffd17 	ldw	r5,-12(fp)
  8146c0:	01800044 	movi	r6,1
  8146c4:	01c07fc4 	movi	r7,511
  8146c8:	08145d40 	call	8145d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8146cc:	01002074 	movhi	r4,129
  8146d0:	21175a04 	addi	r4,r4,23912
  8146d4:	e17ffe17 	ldw	r5,-8(fp)
  8146d8:	000d883a 	mov	r6,zero
  8146dc:	01c07fc4 	movi	r7,511
  8146e0:	08145d40 	call	8145d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8146e4:	01002074 	movhi	r4,129
  8146e8:	21176004 	addi	r4,r4,23936
  8146ec:	e17fff17 	ldw	r5,-4(fp)
  8146f0:	01800044 	movi	r6,1
  8146f4:	01c07fc4 	movi	r7,511
  8146f8:	08145d40 	call	8145d4 <alt_open_fd>
}  
  8146fc:	e037883a 	mov	sp,fp
  814700:	dfc00117 	ldw	ra,4(sp)
  814704:	df000017 	ldw	fp,0(sp)
  814708:	dec00204 	addi	sp,sp,8
  81470c:	f800283a 	ret

00814710 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  814710:	defffd04 	addi	sp,sp,-12
  814714:	dfc00215 	stw	ra,8(sp)
  814718:	df000115 	stw	fp,4(sp)
  81471c:	df000104 	addi	fp,sp,4
  814720:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  814724:	e13fff17 	ldw	r4,-4(fp)
  814728:	08147600 	call	814760 <alt_busy_sleep>
}
  81472c:	e037883a 	mov	sp,fp
  814730:	dfc00117 	ldw	ra,4(sp)
  814734:	df000017 	ldw	fp,0(sp)
  814738:	dec00204 	addi	sp,sp,8
  81473c:	f800283a 	ret

00814740 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814740:	deffff04 	addi	sp,sp,-4
  814744:	df000015 	stw	fp,0(sp)
  814748:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81474c:	000170fa 	wrctl	ienable,zero
}
  814750:	e037883a 	mov	sp,fp
  814754:	df000017 	ldw	fp,0(sp)
  814758:	dec00104 	addi	sp,sp,4
  81475c:	f800283a 	ret

00814760 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  814760:	defffa04 	addi	sp,sp,-24
  814764:	dfc00515 	stw	ra,20(sp)
  814768:	df000415 	stw	fp,16(sp)
  81476c:	df000404 	addi	fp,sp,16
  814770:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  814774:	008000c4 	movi	r2,3
  814778:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81477c:	e0fffc17 	ldw	r3,-16(fp)
  814780:	008003f4 	movhi	r2,15
  814784:	10909004 	addi	r2,r2,16960
  814788:	188b383a 	mul	r5,r3,r2
  81478c:	0100bef4 	movhi	r4,763
  814790:	213c2004 	addi	r4,r4,-3968
  814794:	080fdb40 	call	80fdb4 <__udivsi3>
  814798:	100b883a 	mov	r5,r2
  81479c:	01200034 	movhi	r4,32768
  8147a0:	213fffc4 	addi	r4,r4,-1
  8147a4:	080fdb40 	call	80fdb4 <__udivsi3>
  8147a8:	100b883a 	mov	r5,r2
  8147ac:	e13fff17 	ldw	r4,-4(fp)
  8147b0:	080fdb40 	call	80fdb4 <__udivsi3>
  8147b4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8147b8:	e0bffd17 	ldw	r2,-12(fp)
  8147bc:	1005003a 	cmpeq	r2,r2,zero
  8147c0:	1000281e 	bne	r2,zero,814864 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8147c4:	e03ffe15 	stw	zero,-8(fp)
  8147c8:	00001606 	br	814824 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8147cc:	00a00034 	movhi	r2,32768
  8147d0:	10bfffc4 	addi	r2,r2,-1
  8147d4:	10bfffc4 	addi	r2,r2,-1
  8147d8:	103ffe1e 	bne	r2,zero,8147d4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8147dc:	e0fffc17 	ldw	r3,-16(fp)
  8147e0:	008003f4 	movhi	r2,15
  8147e4:	10909004 	addi	r2,r2,16960
  8147e8:	188b383a 	mul	r5,r3,r2
  8147ec:	0100bef4 	movhi	r4,763
  8147f0:	213c2004 	addi	r4,r4,-3968
  8147f4:	080fdb40 	call	80fdb4 <__udivsi3>
  8147f8:	100b883a 	mov	r5,r2
  8147fc:	01200034 	movhi	r4,32768
  814800:	213fffc4 	addi	r4,r4,-1
  814804:	080fdb40 	call	80fdb4 <__udivsi3>
  814808:	1007883a 	mov	r3,r2
  81480c:	e0bfff17 	ldw	r2,-4(fp)
  814810:	10c5c83a 	sub	r2,r2,r3
  814814:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814818:	e0bffe17 	ldw	r2,-8(fp)
  81481c:	10800044 	addi	r2,r2,1
  814820:	e0bffe15 	stw	r2,-8(fp)
  814824:	e0fffe17 	ldw	r3,-8(fp)
  814828:	e0bffd17 	ldw	r2,-12(fp)
  81482c:	18bfe716 	blt	r3,r2,8147cc <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814830:	e0fffc17 	ldw	r3,-16(fp)
  814834:	008003f4 	movhi	r2,15
  814838:	10909004 	addi	r2,r2,16960
  81483c:	188b383a 	mul	r5,r3,r2
  814840:	0100bef4 	movhi	r4,763
  814844:	213c2004 	addi	r4,r4,-3968
  814848:	080fdb40 	call	80fdb4 <__udivsi3>
  81484c:	1007883a 	mov	r3,r2
  814850:	e0bfff17 	ldw	r2,-4(fp)
  814854:	1885383a 	mul	r2,r3,r2
  814858:	10bfffc4 	addi	r2,r2,-1
  81485c:	103ffe1e 	bne	r2,zero,814858 <alt_busy_sleep+0xf8>
  814860:	00000c06 	br	814894 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814864:	e0fffc17 	ldw	r3,-16(fp)
  814868:	008003f4 	movhi	r2,15
  81486c:	10909004 	addi	r2,r2,16960
  814870:	188b383a 	mul	r5,r3,r2
  814874:	0100bef4 	movhi	r4,763
  814878:	213c2004 	addi	r4,r4,-3968
  81487c:	080fdb40 	call	80fdb4 <__udivsi3>
  814880:	1007883a 	mov	r3,r2
  814884:	e0bfff17 	ldw	r2,-4(fp)
  814888:	1885383a 	mul	r2,r3,r2
  81488c:	10bfffc4 	addi	r2,r2,-1
  814890:	00bffe16 	blt	zero,r2,81488c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  814894:	0005883a 	mov	r2,zero
}
  814898:	e037883a 	mov	sp,fp
  81489c:	dfc00117 	ldw	ra,4(sp)
  8148a0:	df000017 	ldw	fp,0(sp)
  8148a4:	dec00204 	addi	sp,sp,8
  8148a8:	f800283a 	ret

008148ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8148ac:	defffb04 	addi	sp,sp,-20
  8148b0:	df000415 	stw	fp,16(sp)
  8148b4:	df000404 	addi	fp,sp,16
  8148b8:	e13ffe15 	stw	r4,-8(fp)
  8148bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8148c0:	e0bfff17 	ldw	r2,-4(fp)
  8148c4:	10840070 	cmpltui	r2,r2,4097
  8148c8:	1000021e 	bne	r2,zero,8148d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8148cc:	00840004 	movi	r2,4096
  8148d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8148d4:	e0fffe17 	ldw	r3,-8(fp)
  8148d8:	e0bfff17 	ldw	r2,-4(fp)
  8148dc:	1885883a 	add	r2,r3,r2
  8148e0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148e4:	e0bffe17 	ldw	r2,-8(fp)
  8148e8:	e0bffd15 	stw	r2,-12(fp)
  8148ec:	00000506 	br	814904 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8148f0:	e0bffd17 	ldw	r2,-12(fp)
  8148f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148f8:	e0bffd17 	ldw	r2,-12(fp)
  8148fc:	10800804 	addi	r2,r2,32
  814900:	e0bffd15 	stw	r2,-12(fp)
  814904:	e0fffd17 	ldw	r3,-12(fp)
  814908:	e0bffc17 	ldw	r2,-16(fp)
  81490c:	18bff836 	bltu	r3,r2,8148f0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814910:	e0bffe17 	ldw	r2,-8(fp)
  814914:	108007cc 	andi	r2,r2,31
  814918:	1005003a 	cmpeq	r2,r2,zero
  81491c:	1000021e 	bne	r2,zero,814928 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814920:	e0bffd17 	ldw	r2,-12(fp)
  814924:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814928:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81492c:	e037883a 	mov	sp,fp
  814930:	df000017 	ldw	fp,0(sp)
  814934:	dec00104 	addi	sp,sp,4
  814938:	f800283a 	ret

0081493c <atexit>:
  81493c:	200b883a 	mov	r5,r4
  814940:	000d883a 	mov	r6,zero
  814944:	0009883a 	mov	r4,zero
  814948:	000f883a 	mov	r7,zero
  81494c:	08149fc1 	jmpi	8149fc <__register_exitproc>

00814950 <exit>:
  814950:	defffe04 	addi	sp,sp,-8
  814954:	000b883a 	mov	r5,zero
  814958:	dc000015 	stw	r16,0(sp)
  81495c:	dfc00115 	stw	ra,4(sp)
  814960:	2021883a 	mov	r16,r4
  814964:	0814b340 	call	814b34 <__call_exitprocs>
  814968:	00802074 	movhi	r2,129
  81496c:	109c5004 	addi	r2,r2,28992
  814970:	11000017 	ldw	r4,0(r2)
  814974:	20800f17 	ldw	r2,60(r4)
  814978:	10000126 	beq	r2,zero,814980 <exit+0x30>
  81497c:	103ee83a 	callr	r2
  814980:	8009883a 	mov	r4,r16
  814984:	0814d240 	call	814d24 <_exit>

00814988 <memcmp>:
  814988:	00c000c4 	movi	r3,3
  81498c:	1980032e 	bgeu	r3,r6,81499c <memcmp+0x14>
  814990:	2144b03a 	or	r2,r4,r5
  814994:	10c4703a 	and	r2,r2,r3
  814998:	10000f26 	beq	r2,zero,8149d8 <memcmp+0x50>
  81499c:	31ffffc4 	addi	r7,r6,-1
  8149a0:	3000061e 	bne	r6,zero,8149bc <memcmp+0x34>
  8149a4:	00000a06 	br	8149d0 <memcmp+0x48>
  8149a8:	39ffffc4 	addi	r7,r7,-1
  8149ac:	00bfffc4 	movi	r2,-1
  8149b0:	21000044 	addi	r4,r4,1
  8149b4:	29400044 	addi	r5,r5,1
  8149b8:	38800526 	beq	r7,r2,8149d0 <memcmp+0x48>
  8149bc:	20c00003 	ldbu	r3,0(r4)
  8149c0:	28800003 	ldbu	r2,0(r5)
  8149c4:	18bff826 	beq	r3,r2,8149a8 <memcmp+0x20>
  8149c8:	1885c83a 	sub	r2,r3,r2
  8149cc:	f800283a 	ret
  8149d0:	0005883a 	mov	r2,zero
  8149d4:	f800283a 	ret
  8149d8:	180f883a 	mov	r7,r3
  8149dc:	20c00017 	ldw	r3,0(r4)
  8149e0:	28800017 	ldw	r2,0(r5)
  8149e4:	18bfed1e 	bne	r3,r2,81499c <memcmp+0x14>
  8149e8:	31bfff04 	addi	r6,r6,-4
  8149ec:	21000104 	addi	r4,r4,4
  8149f0:	29400104 	addi	r5,r5,4
  8149f4:	39bff936 	bltu	r7,r6,8149dc <memcmp+0x54>
  8149f8:	003fe806 	br	81499c <memcmp+0x14>

008149fc <__register_exitproc>:
  8149fc:	defffa04 	addi	sp,sp,-24
  814a00:	00802074 	movhi	r2,129
  814a04:	109c5004 	addi	r2,r2,28992
  814a08:	dc000015 	stw	r16,0(sp)
  814a0c:	14000017 	ldw	r16,0(r2)
  814a10:	dd000415 	stw	r20,16(sp)
  814a14:	2829883a 	mov	r20,r5
  814a18:	81405217 	ldw	r5,328(r16)
  814a1c:	dcc00315 	stw	r19,12(sp)
  814a20:	dc800215 	stw	r18,8(sp)
  814a24:	dc400115 	stw	r17,4(sp)
  814a28:	dfc00515 	stw	ra,20(sp)
  814a2c:	2023883a 	mov	r17,r4
  814a30:	3027883a 	mov	r19,r6
  814a34:	3825883a 	mov	r18,r7
  814a38:	28002526 	beq	r5,zero,814ad0 <__register_exitproc+0xd4>
  814a3c:	29000117 	ldw	r4,4(r5)
  814a40:	008007c4 	movi	r2,31
  814a44:	11002716 	blt	r2,r4,814ae4 <__register_exitproc+0xe8>
  814a48:	8800101e 	bne	r17,zero,814a8c <__register_exitproc+0x90>
  814a4c:	2105883a 	add	r2,r4,r4
  814a50:	1085883a 	add	r2,r2,r2
  814a54:	20c00044 	addi	r3,r4,1
  814a58:	1145883a 	add	r2,r2,r5
  814a5c:	0009883a 	mov	r4,zero
  814a60:	15000215 	stw	r20,8(r2)
  814a64:	28c00115 	stw	r3,4(r5)
  814a68:	2005883a 	mov	r2,r4
  814a6c:	dfc00517 	ldw	ra,20(sp)
  814a70:	dd000417 	ldw	r20,16(sp)
  814a74:	dcc00317 	ldw	r19,12(sp)
  814a78:	dc800217 	ldw	r18,8(sp)
  814a7c:	dc400117 	ldw	r17,4(sp)
  814a80:	dc000017 	ldw	r16,0(sp)
  814a84:	dec00604 	addi	sp,sp,24
  814a88:	f800283a 	ret
  814a8c:	29802204 	addi	r6,r5,136
  814a90:	00800044 	movi	r2,1
  814a94:	110e983a 	sll	r7,r2,r4
  814a98:	30c04017 	ldw	r3,256(r6)
  814a9c:	2105883a 	add	r2,r4,r4
  814aa0:	1085883a 	add	r2,r2,r2
  814aa4:	1185883a 	add	r2,r2,r6
  814aa8:	19c6b03a 	or	r3,r3,r7
  814aac:	14802015 	stw	r18,128(r2)
  814ab0:	14c00015 	stw	r19,0(r2)
  814ab4:	00800084 	movi	r2,2
  814ab8:	30c04015 	stw	r3,256(r6)
  814abc:	88bfe31e 	bne	r17,r2,814a4c <__register_exitproc+0x50>
  814ac0:	30804117 	ldw	r2,260(r6)
  814ac4:	11c4b03a 	or	r2,r2,r7
  814ac8:	30804115 	stw	r2,260(r6)
  814acc:	003fdf06 	br	814a4c <__register_exitproc+0x50>
  814ad0:	008020b4 	movhi	r2,130
  814ad4:	10a44604 	addi	r2,r2,-28392
  814ad8:	100b883a 	mov	r5,r2
  814adc:	80805215 	stw	r2,328(r16)
  814ae0:	003fd606 	br	814a3c <__register_exitproc+0x40>
  814ae4:	00800034 	movhi	r2,0
  814ae8:	10800004 	addi	r2,r2,0
  814aec:	1000021e 	bne	r2,zero,814af8 <__register_exitproc+0xfc>
  814af0:	013fffc4 	movi	r4,-1
  814af4:	003fdc06 	br	814a68 <__register_exitproc+0x6c>
  814af8:	01006404 	movi	r4,400
  814afc:	103ee83a 	callr	r2
  814b00:	1007883a 	mov	r3,r2
  814b04:	103ffa26 	beq	r2,zero,814af0 <__register_exitproc+0xf4>
  814b08:	80805217 	ldw	r2,328(r16)
  814b0c:	180b883a 	mov	r5,r3
  814b10:	18000115 	stw	zero,4(r3)
  814b14:	18800015 	stw	r2,0(r3)
  814b18:	80c05215 	stw	r3,328(r16)
  814b1c:	18006215 	stw	zero,392(r3)
  814b20:	18006315 	stw	zero,396(r3)
  814b24:	0009883a 	mov	r4,zero
  814b28:	883fc826 	beq	r17,zero,814a4c <__register_exitproc+0x50>
  814b2c:	003fd706 	br	814a8c <__register_exitproc+0x90>

00814b30 <register_fini>:
  814b30:	f800283a 	ret

00814b34 <__call_exitprocs>:
  814b34:	00802074 	movhi	r2,129
  814b38:	109c5004 	addi	r2,r2,28992
  814b3c:	10800017 	ldw	r2,0(r2)
  814b40:	defff304 	addi	sp,sp,-52
  814b44:	df000b15 	stw	fp,44(sp)
  814b48:	d8800115 	stw	r2,4(sp)
  814b4c:	00800034 	movhi	r2,0
  814b50:	10800004 	addi	r2,r2,0
  814b54:	1005003a 	cmpeq	r2,r2,zero
  814b58:	d8800215 	stw	r2,8(sp)
  814b5c:	d8800117 	ldw	r2,4(sp)
  814b60:	dd400815 	stw	r21,32(sp)
  814b64:	dd000715 	stw	r20,28(sp)
  814b68:	10805204 	addi	r2,r2,328
  814b6c:	dfc00c15 	stw	ra,48(sp)
  814b70:	ddc00a15 	stw	r23,40(sp)
  814b74:	dd800915 	stw	r22,36(sp)
  814b78:	dcc00615 	stw	r19,24(sp)
  814b7c:	dc800515 	stw	r18,20(sp)
  814b80:	dc400415 	stw	r17,16(sp)
  814b84:	dc000315 	stw	r16,12(sp)
  814b88:	282b883a 	mov	r21,r5
  814b8c:	2039883a 	mov	fp,r4
  814b90:	d8800015 	stw	r2,0(sp)
  814b94:	2829003a 	cmpeq	r20,r5,zero
  814b98:	d8800117 	ldw	r2,4(sp)
  814b9c:	14405217 	ldw	r17,328(r2)
  814ba0:	88001026 	beq	r17,zero,814be4 <__call_exitprocs+0xb0>
  814ba4:	ddc00017 	ldw	r23,0(sp)
  814ba8:	88800117 	ldw	r2,4(r17)
  814bac:	8c802204 	addi	r18,r17,136
  814bb0:	143fffc4 	addi	r16,r2,-1
  814bb4:	80000916 	blt	r16,zero,814bdc <__call_exitprocs+0xa8>
  814bb8:	05bfffc4 	movi	r22,-1
  814bbc:	a000151e 	bne	r20,zero,814c14 <__call_exitprocs+0xe0>
  814bc0:	8409883a 	add	r4,r16,r16
  814bc4:	2105883a 	add	r2,r4,r4
  814bc8:	1485883a 	add	r2,r2,r18
  814bcc:	10c02017 	ldw	r3,128(r2)
  814bd0:	a8c01126 	beq	r21,r3,814c18 <__call_exitprocs+0xe4>
  814bd4:	843fffc4 	addi	r16,r16,-1
  814bd8:	85bff81e 	bne	r16,r22,814bbc <__call_exitprocs+0x88>
  814bdc:	d8800217 	ldw	r2,8(sp)
  814be0:	10003126 	beq	r2,zero,814ca8 <__call_exitprocs+0x174>
  814be4:	dfc00c17 	ldw	ra,48(sp)
  814be8:	df000b17 	ldw	fp,44(sp)
  814bec:	ddc00a17 	ldw	r23,40(sp)
  814bf0:	dd800917 	ldw	r22,36(sp)
  814bf4:	dd400817 	ldw	r21,32(sp)
  814bf8:	dd000717 	ldw	r20,28(sp)
  814bfc:	dcc00617 	ldw	r19,24(sp)
  814c00:	dc800517 	ldw	r18,20(sp)
  814c04:	dc400417 	ldw	r17,16(sp)
  814c08:	dc000317 	ldw	r16,12(sp)
  814c0c:	dec00d04 	addi	sp,sp,52
  814c10:	f800283a 	ret
  814c14:	8409883a 	add	r4,r16,r16
  814c18:	88c00117 	ldw	r3,4(r17)
  814c1c:	2105883a 	add	r2,r4,r4
  814c20:	1445883a 	add	r2,r2,r17
  814c24:	18ffffc4 	addi	r3,r3,-1
  814c28:	11800217 	ldw	r6,8(r2)
  814c2c:	1c001526 	beq	r3,r16,814c84 <__call_exitprocs+0x150>
  814c30:	10000215 	stw	zero,8(r2)
  814c34:	303fe726 	beq	r6,zero,814bd4 <__call_exitprocs+0xa0>
  814c38:	00c00044 	movi	r3,1
  814c3c:	1c06983a 	sll	r3,r3,r16
  814c40:	90804017 	ldw	r2,256(r18)
  814c44:	8cc00117 	ldw	r19,4(r17)
  814c48:	1884703a 	and	r2,r3,r2
  814c4c:	10001426 	beq	r2,zero,814ca0 <__call_exitprocs+0x16c>
  814c50:	90804117 	ldw	r2,260(r18)
  814c54:	1884703a 	and	r2,r3,r2
  814c58:	10000c1e 	bne	r2,zero,814c8c <__call_exitprocs+0x158>
  814c5c:	2105883a 	add	r2,r4,r4
  814c60:	1485883a 	add	r2,r2,r18
  814c64:	11400017 	ldw	r5,0(r2)
  814c68:	e009883a 	mov	r4,fp
  814c6c:	303ee83a 	callr	r6
  814c70:	88800117 	ldw	r2,4(r17)
  814c74:	98bfc81e 	bne	r19,r2,814b98 <__call_exitprocs+0x64>
  814c78:	b8800017 	ldw	r2,0(r23)
  814c7c:	147fd526 	beq	r2,r17,814bd4 <__call_exitprocs+0xa0>
  814c80:	003fc506 	br	814b98 <__call_exitprocs+0x64>
  814c84:	8c000115 	stw	r16,4(r17)
  814c88:	003fea06 	br	814c34 <__call_exitprocs+0x100>
  814c8c:	2105883a 	add	r2,r4,r4
  814c90:	1485883a 	add	r2,r2,r18
  814c94:	11000017 	ldw	r4,0(r2)
  814c98:	303ee83a 	callr	r6
  814c9c:	003ff406 	br	814c70 <__call_exitprocs+0x13c>
  814ca0:	303ee83a 	callr	r6
  814ca4:	003ff206 	br	814c70 <__call_exitprocs+0x13c>
  814ca8:	88800117 	ldw	r2,4(r17)
  814cac:	1000081e 	bne	r2,zero,814cd0 <__call_exitprocs+0x19c>
  814cb0:	89000017 	ldw	r4,0(r17)
  814cb4:	20000726 	beq	r4,zero,814cd4 <__call_exitprocs+0x1a0>
  814cb8:	b9000015 	stw	r4,0(r23)
  814cbc:	8809883a 	mov	r4,r17
  814cc0:	00000000 	call	0 <__reset-0x800000>
  814cc4:	bc400017 	ldw	r17,0(r23)
  814cc8:	883fb71e 	bne	r17,zero,814ba8 <__call_exitprocs+0x74>
  814ccc:	003fc506 	br	814be4 <__call_exitprocs+0xb0>
  814cd0:	89000017 	ldw	r4,0(r17)
  814cd4:	882f883a 	mov	r23,r17
  814cd8:	2023883a 	mov	r17,r4
  814cdc:	883fb21e 	bne	r17,zero,814ba8 <__call_exitprocs+0x74>
  814ce0:	003fc006 	br	814be4 <__call_exitprocs+0xb0>

00814ce4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814ce4:	defffd04 	addi	sp,sp,-12
  814ce8:	df000215 	stw	fp,8(sp)
  814cec:	df000204 	addi	fp,sp,8
  814cf0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814cf4:	e0bfff17 	ldw	r2,-4(fp)
  814cf8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814cfc:	e0bffe17 	ldw	r2,-8(fp)
  814d00:	1005003a 	cmpeq	r2,r2,zero
  814d04:	1000021e 	bne	r2,zero,814d10 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814d08:	002af070 	cmpltui	zero,zero,43969
  814d0c:	00000106 	br	814d14 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814d10:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814d14:	e037883a 	mov	sp,fp
  814d18:	df000017 	ldw	fp,0(sp)
  814d1c:	dec00104 	addi	sp,sp,4
  814d20:	f800283a 	ret

00814d24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814d24:	defffd04 	addi	sp,sp,-12
  814d28:	dfc00215 	stw	ra,8(sp)
  814d2c:	df000115 	stw	fp,4(sp)
  814d30:	df000104 	addi	fp,sp,4
  814d34:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814d38:	e13fff17 	ldw	r4,-4(fp)
  814d3c:	0814ce40 	call	814ce4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814d40:	003fff06 	br	814d40 <_exit+0x1c>
  814d44:	00814b30 	cmpltui	r2,zero,1324
