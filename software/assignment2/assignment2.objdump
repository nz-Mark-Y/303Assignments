
assignment2.elf:     file format elf32-littlenios2
assignment2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000b9c4 memsz 0x0000b9c4 flags r-x
    LOAD off    0x0000c9e4 vaddr 0x0080b9e4 paddr 0x0080d620 align 2**12
         filesz 0x00001c3c memsz 0x00001c3c flags rw-
    LOAD off    0x0000f25c vaddr 0x0080f25c paddr 0x0080f25c align 2**12
         filesz 0x00000000 memsz 0x00000518 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b3d0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000460  0080b584  0080b584  0000c584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  0080b9e4  0080d620  0000c9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000518  0080f25c  0080f25c  0000f25c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000e620  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a58  00000000  00000000  0000e648  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001f22  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001f2d4  00000000  00000000  00010fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005c11  00000000  00000000  00030296  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ff5b  00000000  00000000  00035ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001668  00000000  00000000  00045e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018a5  00000000  00000000  0004746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000047ed  00000000  00000000  00048d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004d500  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0004d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00052441  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00052444  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00052447  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00052448  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00052449  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005244d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00052451  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00052455  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005245e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00052467  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00052470  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00052476  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  000524cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080b584 l    d  .rodata	00000000 .rodata
0080b9e4 l    d  .rwdata	00000000 .rwdata
0080f25c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
0080d5d8 l     O .rwdata	00000004 buttonValue
0080f25c l     O .bss	00000004 vpace_LED_on
0080f260 l     O .bss	00000004 apace_LED_on
0080f264 l     O .bss	00000004 pvarp_running
0080f268 l     O .bss	00000004 vrp_running
0080f26c l     O .bss	00000004 aei_running
0080f270 l     O .bss	00000004 crit_flag
0080f274 l     O .bss	00000004 setAVITO
0080f278 l     O .bss	00000004 setAEITO
0080f27c l     O .bss	00000004 setPVARPTO
0080f280 l     O .bss	00000004 setVRPTO
0080f284 l     O .bss	00000004 setLRITO
0080f288 l     O .bss	00000004 setURITO
0080f3fc l     O .bss	00000018 avi_timer
0080f414 l     O .bss	00000018 aei_timer
0080f42c l     O .bss	00000018 pvarp_timer
0080f444 l     O .bss	00000018 vrp_timer
0080f45c l     O .bss	00000018 lri_timer
0080f474 l     O .bss	00000018 uri_timer
0080f48c l     O .bss	00000018 debounce_timer
0080f4a4 l     O .bss	00000018 LED_timer
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0080b9e4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805d6c l     F .text	00000058 std
00805e78 l     F .text	00000008 __fp_lock
00805e80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00806f94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00806ff4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008070f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008073d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008074b4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00807610 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080771c l     F .text	000000dc alt_file_locked
00807980 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00807b00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080d60c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00807f40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080c394 l     O .rwdata	00001060 jtag_uart
0080d3f4 l     O .rwdata	00000120 lcd
0080d514 l     O .rwdata	000000c4 uart
00808068 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008082a8 l     F .text	00000228 altera_avalon_jtag_uart_irq
008084d0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080d618 l     O .rwdata	00000004 colstart
00808b4c l     F .text	000000b8 lcd_write_command
00808c04 l     F .text	000000d4 lcd_write_data
00808cd8 l     F .text	000000c4 lcd_clear_screen
00808d9c l     F .text	000001ec lcd_repaint_screen
00808f88 l     F .text	000000c8 lcd_scroll_up
00809050 l     F .text	000002d0 lcd_handle_escape
0080982c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00809a8c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00809d4c l     F .text	0000009c altera_avalon_uart_irq
00809de8 l     F .text	000000e0 altera_avalon_uart_rxirq
00809ec8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080a2b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080a4dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080a634 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080acc4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080b864 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080b220 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080b3d4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
0080b520 l     F .text	00000040 alt_sim_halt
0080f2a0 g     O .bss	00000001 _cg81
0080f2a1 g     O .bss	00000001 g40
0080f2a2 g     O .bss	00000001 g83
0080f2a3 g     O .bss	00000001 g143_e2
00806be4 g     F .text	00000070 _isatty_r
0080f2a4 g     O .bss	00000001 g91
00807670 g     F .text	0000006c alt_main
0080f2a5 g     O .bss	00000001 _compsys303_a2_local_URI_stop
00804434 g     F .text	000000a0 _puts_r
0080f2a6 g     O .bss	00000001 APace
0080f4e4 g     O .bss	00000100 alt_irq
00806c54 g     F .text	00000078 _lseek_r
0080f2a7 g     O .bss	00000001 g139
0080f2a8 g     O .bss	00000001 g4
0080d620 g       *ABS*	00000000 __flash_rwdata_start
0080f2a9 g     O .bss	00000001 g108
0080f2aa g     O .bss	00000001 g19
0080f2ab g     O .bss	00000001 g111
0080f774 g       *ABS*	00000000 __alt_heap_start
00806820 g     F .text	00000068 __sseek
00805dd4 g     F .text	000000a4 __sinit
0080f2ac g     O .bss	00000001 g139_fix1
0080f2ad g     O .bss	00000001 g55
0080f2ae g     O .bss	00000001 _cg59
0080f2af g     O .bss	00000001 g27
0080f2b0 g     O .bss	00000001 g94_e9
00805ed4 g     F .text	00000068 __sfmoreglue
008076fc g     F .text	00000020 __malloc_unlock
0080f2b1 g     O .bss	00000001 PRE_g90
0080f2b2 g     O .bss	00000001 _compsys303_a2_local_AEI_start
0080f2b3 g     O .bss	00000001 g112
0080f2b4 g     O .bss	00000001 g139_e1_fix_fix
0080f2b5 g     O .bss	00000001 g3
0080f2b6 g     O .bss	00000001 URI_NOTRUNNING
0080f2b7 g     O .bss	00000001 g31b
0080f294 g     O .bss	00000004 fp
008052bc g     F .text	000000e0 memmove
0080f2b8 g     O .bss	00000001 g103
0080f2b9 g     O .bss	00000001 PRE_g27
0080f2ba g     O .bss	00000001 g47
0080f2bb g     O .bss	00000001 g86_e8
0080f2bc g     O .bss	00000001 g85
0080f2bd g     O .bss	00000001 g42
00805ec4 g     F .text	00000010 _cleanup
00800cc4 g     F .text	0000004c initialise_LED_timer
0080f2be g     O .bss	00000001 g9
0080f2bf g     O .bss	00000001 g127
0080f2c0 g     O .bss	00000001 _cg125
0080f2c1 g     O .bss	00000001 LRITO
0080f2c2 g     O .bss	00000001 _cg7
0080f2c4 g     O .bss	00000004 _PRE_GO
0080f2c8 g     O .bss	00000001 _compsys303_a2_local_AEI_ex
0080f2c9 g     O .bss	00000001 PRE_g3
0080f2ca g     O .bss	00000001 g102
0080f2cb g     O .bss	00000001 g140
00000000  w      *UND*	00000000 __errno
0080f2cc g     O .bss	00000001 _cg128
0080f2cd g     O .bss	00000001 g115
00800b38 g     F .text	0000006c initialise_vrp_timer
00800000 g     F .entry	0000001c __reset
0080f2ce g     O .bss	00000001 g114_e10
0080f2cf g     O .bss	00000001 PRE_g56
00800020 g       *ABS*	00000000 __flash_exceptions_start
00806b70 g     F .text	00000074 _fstat_r
0080f2d0 g     O .bss	00000001 _compsys303_a2_local_LRI_ex
0080f3e0 g     O .bss	00000004 errno
0080f2d1 g     O .bss	00000001 PRE_g75
0080f2d2 g     O .bss	00000001 g87
0080f2d3 g     O .bss	00000001 g44
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080f2d4 g     O .bss	00000001 g123
0080f3ec g     O .bss	00000004 alt_argv
008155d8 g       *ABS*	00000000 _gp
0080ae00 g     F .text	00000030 usleep
0080f2d5 g     O .bss	00000001 _cg84
00800fd4 g     F .text	000000b0 reset
0080f2d6 g     O .bss	00000001 PRE_g65
0080f2d7 g     O .bss	00000001 g92
0080f2d8 g     O .bss	00000001 g1
0080f2d9 g     O .bss	00000001 g61
0080c214 g     O .rwdata	00000180 alt_fd_list
0080f2da g     O .bss	00000001 g135
0080f2db g     O .bss	00000001 g71
0080f2dc g     O .bss	00000001 PRE_g141
0080f2dd g     O .bss	00000001 g7b
0080f2de g     O .bss	00000001 PRE_g118
0080a75c g     F .text	00000094 alt_find_dev
0080521c g     F .text	000000a0 memcpy
0080f2df g     O .bss	00000001 g126
00805eb8 g     F .text	0000000c _cleanup_r
00800acc g     F .text	0000006c initialise_pvarp_timer
0080f2e0 g     O .bss	00000001 g82
0080ad88 g     F .text	00000078 alt_io_redirect
0080b584 g       *ABS*	00000000 __DTOR_END__
0080f2e1 g     O .bss	00000001 g12
008044d4 g     F .text	00000014 puts
0080f2e2 g     O .bss	00000001 g97
0080f2e3 g     O .bss	00000001 g52
0080f2e4 g     O .bss	00000001 _cg85
0080f2e5 g     O .bss	00000001 _cg46
008086e8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080f2e6 g     O .bss	00000001 _cg74
0080f2e7 g     O .bss	00000001 _compsys303_a2_local_AVI_stop
0080b510 g     F .text	00000008 __udivsi3
00807314 g     F .text	000000c0 isatty
0080f2e8 g     O .bss	00000001 g17
0080f2e9 g     O .bss	00000001 g76
0080f2ea g     O .bss	00000001 g31
0080af9c g     F .text	00000090 alt_icache_flush
0080f2eb g     O .bss	00000001 g139_fix0
0080f2ec g     O .bss	00000001 g37
0080f3d4 g     O .bss	00000004 __malloc_top_pad
0080f2ed g     O .bss	00000001 g62
0080455c g     F .text	0000049c __sfvwrite_r
00800844 g     F .text	00000038 init_uart
00805990 g     F .text	00000070 _sbrk_r
0080f2ee g     O .bss	00000001 g84
0080f2ef g     O .bss	00000001 g41
0080f2f0 g     O .bss	00000001 _cg61
0080f2f1 g     O .bss	00000001 _cg119
0080f2f2 g     O .bss	00000001 g118
00806ccc g     F .text	00000078 _read_r
00800c78 g     F .text	0000004c initialise_debounce_timer
0080f2f3 g     O .bss	00000001 g119b
0080d600 g     O .rwdata	00000004 alt_max_fd
0080f2f4 g     O .bss	00000001 PRE_g8
0080f2f5 g     O .bss	00000001 _cg69
00806a4c g     F .text	00000110 _fclose_r
00805d38 g     F .text	00000034 fflush
0080f3d8 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f2f6 g     O .bss	00000001 PRE_g136
0080f2f7 g     O .bss	00000001 _compsys303_a2_local_AVI_ex
0080f2f8 g     O .bss	00000001 g18
00807154 g     F .text	000001c0 alt_irq_register
0080f2f9 g     O .bss	00000001 PRE_g124
0080f2fa g     O .bss	00000001 ASense
0080f2fb g     O .bss	00000001 PRE_g50
0080f2fc g     O .bss	00000001 PRE_g104
0080f2fd g     O .bss	00000001 g132
008009fc g     F .text	00000064 initialise_avi_timer
00807520 g     F .text	000000f0 lseek
0080d5e4 g     O .rwdata	00000004 _global_impure_ptr
0080f2fe g     O .bss	00000001 g48
0080f2ff g     O .bss	00000001 PRE_g35
0080539c g     F .text	000005f4 _realloc_r
0080f774 g       *ABS*	00000000 __bss_end
0080abcc g     F .text	000000f8 alt_iic_isr_register
0080d5dc g     O .rwdata	00000004 previous_switch_value
00807d14 g     F .text	0000010c alt_tick
0080f300 g     O .bss	00000001 g134_e12
0080f301 g     O .bss	00000001 g78_e7
0080f302 g     O .bss	00000001 _cg111
0080f303 g     O .bss	00000001 g38
0080f304 g     O .bss	00000001 g105
00809c84 g     F .text	000000c8 altera_avalon_uart_init
0080f305 g     O .bss	00000001 _cg97
0080d61c g     O .rwdata	00000004 __ctype_ptr
0080f306 g     O .bss	00000001 PRE_g116
0080f307 g     O .bss	00000001 _cg132
00805ea0 g     F .text	00000018 __fp_lock_all
0080ab84 g     F .text	00000048 alt_ic_irq_enabled
0080f308 g     O .bss	00000001 PRE_g42
00807c7c g     F .text	00000098 alt_alarm_stop
0080f3e4 g     O .bss	00000004 alt_irq_active
0080f309 g     O .bss	00000001 g117
0080f30a g     O .bss	00000001 _cg20
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080c1ec g     O .rwdata	00000028 alt_dev_null
0080f30b g     O .bss	00000001 _cg76
0080f30c g     O .bss	00000001 _cg43
0080f30d g     O .bss	00000001 _compsys303_a2_local_PVARP_stop
0080a53c g     F .text	00000044 alt_dcache_flush_all
0080f30e g     O .bss	00000001 g22b
008005ec g     F .text	00000258 mode1
0080f30f g     O .bss	00000001 _cg28
0080f310 g     O .bss	00000001 g64
0080f311 g     O .bss	00000001 g21
0080f312 g     O .bss	00000001 g74b
0080f313 g     O .bss	00000001 _cg107
0080f314 g     O .bss	00000001 _cg51
0080f315 g     O .bss	00000001 _cg14
00800fa0 g     F .text	00000034 LED_isr_function
0080f316 g     O .bss	00000001 _cg68
0080f317 g     O .bss	00000001 g79
0080f318 g     O .bss	00000001 g34
0080d620 g       *ABS*	00000000 __ram_rwdata_end
00800f6c g     F .text	00000034 debounce_isr_function
0080f319 g     O .bss	00000001 g5
0080d5f8 g     O .rwdata	00000008 alt_dev_list
0080f31a g     O .bss	00000001 g94
0080f31b g     O .bss	00000001 g110
0080f31c g     O .bss	00000001 g49
00807e20 g     F .text	00000120 write
0080f31d g     O .bss	00000001 g2
0080f31e g     O .bss	00000001 g7
0080f31f g     O .bss	00000001 _cg53
0080f320 g     O .bss	00000001 _cg16
0080f321 g     O .bss	00000001 _compsys303_a2_local_AEI_stop
0080b9e4 g       *ABS*	00000000 __ram_rodata_end
0080f322 g     O .bss	00000001 PRE_g101
00807020 g     F .text	000000d4 fstat
0080f323 g     O .bss	00000001 g80
0080b518 g     F .text	00000008 __umodsi3
0080f324 g     O .bss	00000001 PRE_g80
00800efc g     F .text	00000070 uri_isr_function
0080f325 g     O .bss	00000001 g139_fix3
0080f326 g     O .bss	00000001 g128
008008d8 g     F .text	00000124 buttons_isr
0080f327 g     O .bss	00000001 g136
0080f774 g       *ABS*	00000000 end
0080f328 g     O .bss	00000001 g143
0080f329 g     O .bss	00000001 g100
00809320 g     F .text	0000050c altera_avalon_lcd_16207_write
0080f28c g     O .bss	00000004 mode
0080f32a g     O .bss	00000001 g59
0080f32b g     O .bss	00000001 g99
0080f32c g     O .bss	00000001 g54
0080a314 g     F .text	000001c8 altera_avalon_uart_write
0080f32d g     O .bss	00000001 g66
0080f32e g     O .bss	00000001 g23
008081e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080b580 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00809afc g     F .text	00000090 alt_avalon_timer_sc_init
00809be4 g     F .text	00000058 altera_avalon_uart_write_fd
00809c3c g     F .text	00000048 altera_avalon_uart_close_fd
0080890c g     F .text	00000240 altera_avalon_jtag_uart_write
00805dc4 g     F .text	00000004 __sfp_lock_acquire
00805138 g     F .text	000000e4 memchr
0080f32f g     O .bss	00000001 g14
00806158 g     F .text	00000314 _free_r
0080f330 g     O .bss	00000001 _compsys303_a2_local_URI_start
0080f331 g     O .bss	00000001 _compsys303_a2_local_VRP_stop
0080b224 g     F .text	000001b0 __call_exitprocs
0080f332 g     O .bss	00000001 g144
0080f333 g     O .bss	00000001 g101
00800d10 g     F .text	00000060 avi_isr_function
0080f334 g     O .bss	00000001 g25_e2
0080d5ec g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0080f335 g     O .bss	00000001 _cg100
0080f336 g     O .bss	00000001 g114
0080f3f4 g     O .bss	00000004 _alt_tick_rate
0080f337 g     O .bss	00000001 g56
0080f338 g     O .bss	00000001 g129
0080f339 g     O .bss	00000001 g131
0080f33a g     O .bss	00000001 VSense
0080f3f8 g     O .bss	00000004 _alt_nticks
0080f33b g     O .bss	00000001 PRE_g6
008079e0 g     F .text	00000120 read
00807fd4 g     F .text	00000094 alt_sys_init
0080f33c g     O .bss	00000001 g78
0080f33d g     O .bss	00000001 g33
0080b0ec g     F .text	00000134 __register_exitproc
0080f33e g     O .bss	00000001 _cg133
0080f33f g     O .bss	00000001 g122
0080f340 g     O .bss	00000001 g71_e6
0080f341 g     O .bss	00000001 PRE_g96
00808580 g     F .text	00000074 altera_avalon_jtag_uart_close
0080f342 g     O .bss	00000001 PRE_g67
0080b9e4 g       *ABS*	00000000 __ram_rwdata_start
0080b584 g       *ABS*	00000000 __ram_rodata_start
0080f4bc g     O .bss	00000028 __malloc_current_mallinfo
0080f343 g     O .bss	00000001 PRE_g83
0080f344 g     O .bss	00000001 _cg130
0080f298 g     O .bss	00000004 c
0080f290 g     O .bss	00000004 current_switch_value
0080f345 g     O .bss	00000001 g134
008080a0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080f346 g     O .bss	00000001 g35
0080a910 g     F .text	000000b8 alt_get_fd
0080f347 g     O .bss	00000001 _cg38
0080ae50 g     F .text	0000014c alt_busy_sleep
0080f348 g     O .bss	00000001 g15
008069dc g     F .text	00000070 _close_r
0080f349 g     O .bss	00000001 g90
0080f34a g     O .bss	00000001 _GO
0080f34b g     O .bss	00000001 g89b
0080b078 g     F .text	00000074 memcmp
0080f34c g     O .bss	00000001 URITO
00808150 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080f34d g     O .bss	00000001 VRPTO
0080f34e g     O .bss	00000001 PRE_g11
0080f774 g       *ABS*	00000000 __alt_stack_base
00808198 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805a00 g     F .text	0000013c __swsetup_r
00801084 g     F .text	000033b0 tick
00805f3c g     F .text	000000f0 __sfp
0080f34f g     O .bss	00000001 g63
0080f350 g     O .bss	00000001 g20
0080f351 g     O .bss	00000001 AVITO
0080f352 g     O .bss	00000001 g60
0080bde4 g     O .rwdata	00000408 __malloc_av_
0080f353 g     O .bss	00000001 g68b
00805dd0 g     F .text	00000004 __sinit_lock_release
0080f354 g     O .bss	00000001 PRE_g19
00806904 g     F .text	00000060 __sread
0080f355 g     O .bss	00000001 g66b
0080a7f0 g     F .text	00000120 alt_find_file
0080f356 g     O .bss	00000001 g93
0080a580 g     F .text	000000b4 alt_dev_llist_insert
008076dc g     F .text	00000020 __malloc_lock
00807bc0 g     F .text	000000bc sbrk
0080f357 g     O .bss	00000001 _cg22
0080f358 g     O .bss	00000001 g119
00805b3c g     F .text	000001fc _fflush_r
00800a60 g     F .text	0000006c initialise_aei_timer
0080f359 g     O .bss	00000001 g84b
0080f25c g       *ABS*	00000000 __bss_start
0080f35a g     O .bss	00000001 g86
0080f35b g     O .bss	00000001 g43
00806780 g     F .text	00000098 memset
00800200 g     F .text	000002c8 main
0080f3f0 g     O .bss	00000004 alt_envp
0080f3dc g     O .bss	00000004 __malloc_max_total_mem
0080f35c g     O .bss	00000001 PRE_g88
008080f8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080f35d g     O .bss	00000001 PVARPTO
0080f35e g     O .bss	00000001 g36
008098f8 g     F .text	0000013c altera_avalon_lcd_16207_init
0080f35f g     O .bss	00000001 g89
0080f360 g     O .bss	00000001 g46
00806818 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00806b5c g     F .text	00000014 fclose
0080f5e4 g     O .bss	00000190 _atexit0
008049f8 g     F .text	00000740 _malloc_r
0080f361 g     O .bss	00000001 g57b
0080d604 g     O .rwdata	00000004 alt_errno
00806534 g     F .text	000000b8 _fwalk
0080f362 g     O .bss	00000001 g138_e13
0080f363 g     O .bss	00000001 g95
0080f364 g     O .bss	00000001 g50
0080f365 g     O .bss	00000001 g96
0080f366 g     O .bss	00000001 g51
0080b450 g     F .text	00000060 __divsi3
0080602c g     F .text	0000012c _malloc_trim_r
0080b584 g       *ABS*	00000000 __CTOR_END__
0080f367 g     O .bss	00000001 g138
0080f368 g     O .bss	00000001 g107
0080b584 g       *ABS*	00000000 __flash_rodata_start
0080f369 g     O .bss	00000001 g113
0080b584 g       *ABS*	00000000 __DTOR_LIST__
0080f36a g     O .bss	00000001 _cg117
0080f36b g     O .bss	00000001 PRE_g129
00800e9c g     F .text	00000060 lri_isr_function
0080f36c g     O .bss	00000001 PRE_g48
00807fa0 g     F .text	00000034 alt_irq_init
0080f36d g     O .bss	00000001 _cg112
00807b60 g     F .text	00000060 alt_release_fd
0080f36e g     O .bss	00000001 g104
0080f36f g     O .bss	00000001 g139_e1_fix
0080f370 g     O .bss	00000001 g13
008004c8 g     F .text	00000124 mode0
0080f371 g     O .bss	00000001 g98
0080f372 g     O .bss	00000001 g53
0080f373 g     O .bss	00000001 g8
0080f374 g     O .bss	00000001 g57
0080b02c g     F .text	00000014 atexit
00806964 g     F .text	00000078 _write_r
0080f375 g     O .bss	00000001 _compsys303_a2_local_AVI_start
0080f376 g     O .bss	00000001 g70
0080f377 g     O .bss	00000001 _cg66
0080f378 g     O .bss	00000001 g139_e1
0080f379 g     O .bss	00000001 g91b
0080f37a g     O .bss	00000001 g141
0080f37b g     O .bss	00000001 g36b
0080f37c g     O .bss	00000001 g116
0080d5e0 g     O .rwdata	00000004 _impure_ptr
0080f3e8 g     O .bss	00000004 alt_argc
0080f37d g     O .bss	00000001 g6
0080a6f8 g     F .text	00000064 _do_dtors
0080f37e g     O .bss	00000001 g72
0080f37f g     O .bss	00000001 g81
0080f380 g     O .bss	00000001 g117b
00800020 g       .exceptions	00000000 alt_irq_entry
0080f381 g     O .bss	00000001 _compsys303_a2_local_PVARP_start
00805e88 g     F .text	00000018 __fp_unlock_all
0080f382 g     O .bss	00000001 g124
0080f383 g     O .bss	00000001 _cg108
00809a34 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0080f384 g     O .bss	00000001 _cg13
0080f385 g     O .bss	00000001 _cg9
0080f386 g     O .bss	00000001 PRE_g99
0080d5f0 g     O .rwdata	00000008 alt_fs_list
0080f387 g     O .bss	00000001 g137
0080f388 g     O .bss	00000001 g17_e1
0080f389 g     O .bss	00000001 _compsys303_a2_local_URI_ex
0080f38a g     O .bss	00000001 g0
0080f38b g     O .bss	00000001 _cg89
0080f38c g     O .bss	00000001 g128b
0080f38d g     O .bss	00000001 g139_fix2
0080f38e g     O .bss	00000001 _cg54
0080f38f g     O .bss	00000001 _cg91
0080f390 g     O .bss	00000001 g75
0080f391 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080f392 g     O .bss	00000001 PRE_g21
0080f393 g     O .bss	00000001 g16
0080a9f8 g     F .text	00000050 alt_ic_isr_register
0080f394 g     O .bss	00000001 g58
0080f395 g     O .bss	00000001 g63_e5
0080f396 g     O .bss	00000001 _compsys303_a2_local_LRI_stop
0080f397 g     O .bss	00000001 _cg57
0080f398 g     O .bss	00000001 g25
0080f399 g     O .bss	00000001 g68
0080d620 g       *ABS*	00000000 _edata
00809b8c g     F .text	00000058 altera_avalon_uart_read_fd
0080f39a g     O .bss	00000001 g142
00800d70 g     F .text	00000064 aei_isr_function
0080f774 g       *ABS*	00000000 _end
0080f39b g     O .bss	00000001 _compsys303_a2_local_LRI_start
0080f39c g     O .bss	00000001 g11
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008085f4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080f39d g     O .bss	00000001 g65
0080f39e g     O .bss	00000001 g22
0080f39f g     O .bss	00000001 g28
0080f3a0 g     O .bss	00000001 g73
0080f3a1 g     O .bss	00000001 _cg113
0080aae4 g     F .text	000000a0 alt_ic_irq_disable
0080f29c g     O .bss	00000004 uart_read
00806888 g     F .text	0000007c __swrite
0080d5e8 g     O .rwdata	00000004 __malloc_trim_threshold
0080ae30 g     F .text	00000020 altera_nios2_qsys_irq_init
0080b040 g     F .text	00000038 exit
0080f3a2 g     O .bss	00000001 g40_e4
0080f3a3 g     O .bss	00000001 g125
0080646c g     F .text	000000c8 _fwalk_reent
0080f3a4 g     O .bss	00000001 g77
0080f3a5 g     O .bss	00000001 g32
0080f3a6 g     O .bss	00000001 _compsys303_a2_local_PVARP_ex
0080b4b0 g     F .text	00000060 __modsi3
0080f3a7 g     O .bss	00000001 g20b
0080f3a8 g     O .bss	00000001 g88
0080f3a9 g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00805dc8 g     F .text	00000004 __sfp_lock_release
0080f3aa g     O .bss	00000001 _cg23
0080f3ab g     O .bss	00000001 _compsys303_a2_local_VRP_ex
0080f3ac g     O .bss	00000001 PRE_g127
0080f3ad g     O .bss	00000001 _compsys303_a2_local_VRP_start
0080f3ae g     O .bss	00000001 _cg55
0080f3af g     O .bss	00000001 _cg92
0080f3b0 g     O .bss	00000001 PRE_g45
0080f3b1 g     O .bss	00000001 g130
0080b760 g     O .rodata	00000101 _ctype_
00800dd4 g     F .text	00000064 pvarp_isr_function
00800ba4 g     F .text	00000064 initialise_lri_timer
0080f3b2 g     O .bss	00000001 g49b
0080a024 g     F .text	00000060 altera_avalon_uart_close
0080f3b3 g     O .bss	00000001 PRE_g73
0080f3b4 g     O .bss	00000001 PRE_g30
00800c08 g     F .text	00000070 initialise_uri_timer
0080b560 g     F .text	00000020 _exit
00806d44 g     F .text	00000154 alt_alarm_start
0080f3b5 g     O .bss	00000001 g121
0080f3b6 g     O .bss	00000001 g100b
0080f3b7 g     O .bss	00000001 _cg109
008065ec g     F .text	00000194 __smakebuf_r
0080f3b8 g     O .bss	00000001 VPace
0080f3b9 g     O .bss	00000001 g12b
008044e8 g     F .text	00000074 strlen
0080f3ba g     O .bss	00000001 g39
008077f8 g     F .text	00000188 open
0080f3bb g     O .bss	00000001 _cg49
0080f3bc g     O .bss	00000001 g120
0080f3bd g     O .bss	00000001 _cg120
0080a9c8 g     F .text	00000030 alt_icache_flush_all
0080f3be g     O .bss	00000001 g29
0080f3bf g     O .bss	00000001 g67
0080f3c0 g     O .bss	00000001 g24
0080f3c1 g     O .bss	00000001 _cg4
00800e38 g     F .text	00000064 vrp_isr_function
0080f3c2 g     O .bss	00000001 g133
0080d608 g     O .rwdata	00000004 alt_priority_mask
0080f3c3 g     O .bss	00000001 g109
0080f3c4 g     O .bss	00000001 _cg32
0080aa48 g     F .text	0000009c alt_ic_irq_enable
0080a084 g     F .text	00000230 altera_avalon_uart_read
0080f3c5 g     O .bss	00000001 g106
0080f3c6 g     O .bss	00000001 _cg36
0080f3c7 g     O .bss	00000001 _cg31
0080f3c8 g     O .bss	00000001 g10
0080d610 g     O .rwdata	00000008 alt_alarm_list
0080a694 g     F .text	00000064 _do_ctors
0080f3c9 g     O .bss	00000001 _cg102
0080f3ca g     O .bss	00000001 AEITO
0080f3cb g     O .bss	00000001 g69
0080f3cc g     O .bss	00000001 g26
00806e98 g     F .text	000000fc close
0080087c g     F .text	0000005c init_buttons_pio
00807434 g     F .text	00000080 alt_load
0080f3cd g     O .bss	00000001 PRE_g37
00000000  w      *UND*	00000000 free
00805dcc g     F .text	00000004 __sinit_lock_acquire
0080f3ce g     O .bss	00000001 g122_e11
0080f3cf g     O .bss	00000001 _cg105
0080f3d0 g     O .bss	00000001 g74
0080f3d1 g     O .bss	00000001 g33_e3



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18fd3904 	addi	r3,r3,-2844
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18fd3904 	addi	r3,r3,-2844
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6957614 	ori	gp,gp,21976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10bc9714 	ori	r2,r2,62044

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18fddd14 	ori	r3,r3,63348

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08074340 	call	807434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08076700 	call	807670 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <main>:
char* uart_read;																					// Buffer character pointer for uart read
int mode = 0;
int previous_switch_value = 2;
int current_switch_value = 0;
//=============================================
int main() {
  800200:	defffe04 	addi	sp,sp,-8
  800204:	dfc00115 	stw	ra,4(sp)
  800208:	df000015 	stw	fp,0(sp)
  80020c:	d839883a 	mov	fp,sp
	printf("Welcome to the Nios II Pacemaker! \n");
  800210:	01002074 	movhi	r4,129
  800214:	212d6104 	addi	r4,r4,-19068
  800218:	08044d40 	call	8044d4 <puts>
	reset();
  80021c:	0800fd40 	call	800fd4 <reset>
	init_uart();
  800220:	08008440 	call	800844 <init_uart>

	while(1) {
		if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE)) {
  800224:	00804074 	movhi	r2,257
  800228:	10842404 	addi	r2,r2,4240
  80022c:	10800037 	ldwio	r2,0(r2)
  800230:	1005003a 	cmpeq	r2,r2,zero
  800234:	1000031e 	bne	r2,zero,800244 <main+0x44>
			current_switch_value = 1;
  800238:	00800044 	movi	r2,1
  80023c:	d0a72e15 	stw	r2,-25416(gp)
  800240:	00000106 	br	800248 <main+0x48>
		} else {
			current_switch_value = 0;
  800244:	d0272e15 	stw	zero,-25416(gp)
		}
		if (current_switch_value != previous_switch_value) {
  800248:	d0e72e17 	ldw	r3,-25416(gp)
  80024c:	d0a00117 	ldw	r2,-32764(gp)
  800250:	18804e26 	beq	r3,r2,80038c <main+0x18c>
			crit_flag = 1;
  800254:	00800044 	movi	r2,1
  800258:	d0a72615 	stw	r2,-25448(gp)
			alt_alarm_stop(&avi_timer);
  80025c:	01002074 	movhi	r4,129
  800260:	213cff04 	addi	r4,r4,-3076
  800264:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&aei_timer);
  800268:	01002074 	movhi	r4,129
  80026c:	213d0504 	addi	r4,r4,-3052
  800270:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&pvarp_timer);
  800274:	01002074 	movhi	r4,129
  800278:	213d0b04 	addi	r4,r4,-3028
  80027c:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&vrp_timer);
  800280:	01002074 	movhi	r4,129
  800284:	213d1104 	addi	r4,r4,-3004
  800288:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&lri_timer);
  80028c:	01002074 	movhi	r4,129
  800290:	213d1704 	addi	r4,r4,-2980
  800294:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&uri_timer);
  800298:	01002074 	movhi	r4,129
  80029c:	213d1d04 	addi	r4,r4,-2956
  8002a0:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&debounce_timer);
  8002a4:	01002074 	movhi	r4,129
  8002a8:	213d2304 	addi	r4,r4,-2932
  8002ac:	0807c7c0 	call	807c7c <alt_alarm_stop>
			alt_alarm_stop(&LED_timer);
  8002b0:	01002074 	movhi	r4,129
  8002b4:	213d2904 	addi	r4,r4,-2908
  8002b8:	0807c7c0 	call	807c7c <alt_alarm_stop>
			setAVITO = 0;
  8002bc:	d0272715 	stw	zero,-25444(gp)
			setAEITO = 0;
  8002c0:	d0272815 	stw	zero,-25440(gp)
			setPVARPTO = 0;
  8002c4:	d0272915 	stw	zero,-25436(gp)
			setVRPTO = 0;
  8002c8:	d0272a15 	stw	zero,-25432(gp)
			setLRITO = 0;
  8002cc:	d0272b15 	stw	zero,-25428(gp)
			setURITO = 0;
  8002d0:	d0272c15 	stw	zero,-25424(gp)
			AVITO = 0;																					// Reset flags
  8002d4:	00802074 	movhi	r2,129
  8002d8:	10bcd444 	addi	r2,r2,-3247
  8002dc:	10000005 	stb	zero,0(r2)
			AEITO = 0;
  8002e0:	00802074 	movhi	r2,129
  8002e4:	10bcf284 	addi	r2,r2,-3126
  8002e8:	10000005 	stb	zero,0(r2)
			PVARPTO = 0;
  8002ec:	00802074 	movhi	r2,129
  8002f0:	10bcd744 	addi	r2,r2,-3235
  8002f4:	10000005 	stb	zero,0(r2)
			VRPTO = 0;
  8002f8:	00802074 	movhi	r2,129
  8002fc:	10bcd344 	addi	r2,r2,-3251
  800300:	10000005 	stb	zero,0(r2)
			LRITO = 0;
  800304:	00802074 	movhi	r2,129
  800308:	10bcb044 	addi	r2,r2,-3391
  80030c:	10000005 	stb	zero,0(r2)
			URITO = 0;
  800310:	00802074 	movhi	r2,129
  800314:	10bcd304 	addi	r2,r2,-3252
  800318:	10000005 	stb	zero,0(r2)
			URI_NOTRUNNING = 1;
  80031c:	00c02074 	movhi	r3,129
  800320:	18fcad84 	addi	r3,r3,-3402
  800324:	00800044 	movi	r2,1
  800328:	18800005 	stb	r2,0(r3)
			vpace_LED_on = 0;
  80032c:	d0272115 	stw	zero,-25468(gp)
			apace_LED_on = 0;
  800330:	d0272215 	stw	zero,-25464(gp)
			pvarp_running = 0;
  800334:	d0272315 	stw	zero,-25460(gp)
			vrp_running = 0;
  800338:	d0272415 	stw	zero,-25456(gp)
			aei_running = 0;
  80033c:	d0272515 	stw	zero,-25452(gp)
			ASense = 0;
  800340:	00802074 	movhi	r2,129
  800344:	10bcbe84 	addi	r2,r2,-3334
  800348:	10000005 	stb	zero,0(r2)
			VSense = 0;
  80034c:	00802074 	movhi	r2,129
  800350:	10bcce84 	addi	r2,r2,-3270
  800354:	10000005 	stb	zero,0(r2)
			printf("switch===========\n");
  800358:	01002074 	movhi	r4,129
  80035c:	212d6a04 	addi	r4,r4,-19032
  800360:	08044d40 	call	8044d4 <puts>
			crit_flag = 0;
  800364:	d0272615 	stw	zero,-25448(gp)
			if (current_switch_value) {
  800368:	d0a72e17 	ldw	r2,-25416(gp)
  80036c:	1005003a 	cmpeq	r2,r2,zero
  800370:	1000031e 	bne	r2,zero,800380 <main+0x180>
				mode = 1;
  800374:	00800044 	movi	r2,1
  800378:	d0a72d15 	stw	r2,-25420(gp)
  80037c:	00000206 	br	800388 <main+0x188>
				//IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x00); 										// Disable interrupts for all buttons
			} else {
				mode = 0;
  800380:	d0272d15 	stw	zero,-25420(gp)
				init_buttons_pio();
  800384:	080087c0 	call	80087c <init_buttons_pio>
			}
			reset();
  800388:	0800fd40 	call	800fd4 <reset>
		}	
		crit_flag = 1;																				// Enter critical section
  80038c:	00800044 	movi	r2,1
  800390:	d0a72615 	stw	r2,-25448(gp)
		tick();																						// Tick
  800394:	08010840 	call	801084 <tick>
		AVITO = 0;																					// Reset flags
  800398:	00802074 	movhi	r2,129
  80039c:	10bcd444 	addi	r2,r2,-3247
  8003a0:	10000005 	stb	zero,0(r2)
		AEITO = 0;
  8003a4:	00802074 	movhi	r2,129
  8003a8:	10bcf284 	addi	r2,r2,-3126
  8003ac:	10000005 	stb	zero,0(r2)
		PVARPTO = 0;
  8003b0:	00802074 	movhi	r2,129
  8003b4:	10bcd744 	addi	r2,r2,-3235
  8003b8:	10000005 	stb	zero,0(r2)
		VRPTO = 0;
  8003bc:	00802074 	movhi	r2,129
  8003c0:	10bcd344 	addi	r2,r2,-3251
  8003c4:	10000005 	stb	zero,0(r2)
		LRITO = 0;
  8003c8:	00802074 	movhi	r2,129
  8003cc:	10bcb044 	addi	r2,r2,-3391
  8003d0:	10000005 	stb	zero,0(r2)
		URITO = 0;
  8003d4:	00802074 	movhi	r2,129
  8003d8:	10bcd304 	addi	r2,r2,-3252
  8003dc:	10000005 	stb	zero,0(r2)
		crit_flag = 0;																				// Exit critical section
  8003e0:	d0272615 	stw	zero,-25448(gp)
		if (setAVITO) {																				// Update flags if necessary
  8003e4:	d0a72717 	ldw	r2,-25444(gp)
  8003e8:	1005003a 	cmpeq	r2,r2,zero
  8003ec:	1000051e 	bne	r2,zero,800404 <main+0x204>
			AVITO = 1;
  8003f0:	00c02074 	movhi	r3,129
  8003f4:	18fcd444 	addi	r3,r3,-3247
  8003f8:	00800044 	movi	r2,1
  8003fc:	18800005 	stb	r2,0(r3)
			setAVITO = 0;
  800400:	d0272715 	stw	zero,-25444(gp)
		}
		if (setAEITO) {
  800404:	d0a72817 	ldw	r2,-25440(gp)
  800408:	1005003a 	cmpeq	r2,r2,zero
  80040c:	1000051e 	bne	r2,zero,800424 <main+0x224>
			AEITO = 1;
  800410:	00c02074 	movhi	r3,129
  800414:	18fcf284 	addi	r3,r3,-3126
  800418:	00800044 	movi	r2,1
  80041c:	18800005 	stb	r2,0(r3)
			setAEITO = 0;
  800420:	d0272815 	stw	zero,-25440(gp)
		}
		if (setPVARPTO) {
  800424:	d0a72917 	ldw	r2,-25436(gp)
  800428:	1005003a 	cmpeq	r2,r2,zero
  80042c:	1000051e 	bne	r2,zero,800444 <main+0x244>
			PVARPTO = 1;
  800430:	00c02074 	movhi	r3,129
  800434:	18fcd744 	addi	r3,r3,-3235
  800438:	00800044 	movi	r2,1
  80043c:	18800005 	stb	r2,0(r3)
			setPVARPTO = 0;
  800440:	d0272915 	stw	zero,-25436(gp)
		}
		if (setVRPTO) {
  800444:	d0a72a17 	ldw	r2,-25432(gp)
  800448:	1005003a 	cmpeq	r2,r2,zero
  80044c:	1000051e 	bne	r2,zero,800464 <main+0x264>
			VRPTO = 1;
  800450:	00c02074 	movhi	r3,129
  800454:	18fcd344 	addi	r3,r3,-3251
  800458:	00800044 	movi	r2,1
  80045c:	18800005 	stb	r2,0(r3)
			setVRPTO = 0;
  800460:	d0272a15 	stw	zero,-25432(gp)
		}
		if (setLRITO) {
  800464:	d0a72b17 	ldw	r2,-25428(gp)
  800468:	1005003a 	cmpeq	r2,r2,zero
  80046c:	1000051e 	bne	r2,zero,800484 <main+0x284>
			LRITO = 1;
  800470:	00c02074 	movhi	r3,129
  800474:	18fcb044 	addi	r3,r3,-3391
  800478:	00800044 	movi	r2,1
  80047c:	18800005 	stb	r2,0(r3)
			setLRITO = 0;
  800480:	d0272b15 	stw	zero,-25428(gp)
		}
		if (setURITO) {
  800484:	d0a72c17 	ldw	r2,-25424(gp)
  800488:	1005003a 	cmpeq	r2,r2,zero
  80048c:	1000051e 	bne	r2,zero,8004a4 <main+0x2a4>
			URITO = 1;
  800490:	00c02074 	movhi	r3,129
  800494:	18fcd304 	addi	r3,r3,-3252
  800498:	00800044 	movi	r2,1
  80049c:	18800005 	stb	r2,0(r3)
			setURITO = 0;
  8004a0:	d0272c15 	stw	zero,-25424(gp)
		}

		if (mode == 0) {										// Select mode
  8004a4:	d0a72d17 	ldw	r2,-25420(gp)
  8004a8:	1004c03a 	cmpne	r2,r2,zero
  8004ac:	1000021e 	bne	r2,zero,8004b8 <main+0x2b8>
			mode0();
  8004b0:	08004c80 	call	8004c8 <mode0>
  8004b4:	00000106 	br	8004bc <main+0x2bc>
		} else {
			mode1();
  8004b8:	08005ec0 	call	8005ec <mode1>
		}
		previous_switch_value = current_switch_value;
  8004bc:	d0a72e17 	ldw	r2,-25416(gp)
  8004c0:	d0a00115 	stw	r2,-32764(gp)
	}
  8004c4:	003f5706 	br	800224 <main+0x24>

008004c8 <mode0>:
	return 0;
}

void mode0() {
  8004c8:	defffe04 	addi	sp,sp,-8
  8004cc:	dfc00115 	stw	ra,4(sp)
  8004d0:	df000015 	stw	fp,0(sp)
  8004d4:	d839883a 	mov	fp,sp
	 * Contains logic for timers, inputs, buttons and outputs for Mode 0
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	if (VPace == 1) {																			 	// VPace signal handler
  8004d8:	00802074 	movhi	r2,129
  8004dc:	10bcee04 	addi	r2,r2,-3144
  8004e0:	10800003 	ldbu	r2,0(r2)
  8004e4:	10803fcc 	andi	r2,r2,255
  8004e8:	1080201c 	xori	r2,r2,128
  8004ec:	10bfe004 	addi	r2,r2,-128
  8004f0:	10800058 	cmpnei	r2,r2,1
  8004f4:	1000121e 	bne	r2,zero,800540 <mode0+0x78>
		printf("** vpace set **\n");
  8004f8:	01002074 	movhi	r4,129
  8004fc:	212d6f04 	addi	r4,r4,-19012
  800500:	08044d40 	call	8044d4 <puts>
		if (vrp_running == 1) {																		// If in VRP phase, ignore as VR
  800504:	d0a72417 	ldw	r2,-25456(gp)
  800508:	10800060 	cmpeqi	r2,r2,1
  80050c:	1000321e 	bne	r2,zero,8005d8 <mode0+0x110>
			return;
		}
		initialise_pvarp_timer();
  800510:	0800acc0 	call	800acc <initialise_pvarp_timer>
		initialise_vrp_timer();
  800514:	0800b380 	call	800b38 <initialise_vrp_timer>
		if (aei_running == 0) {
  800518:	d0a72517 	ldw	r2,-25452(gp)
  80051c:	1004c03a 	cmpne	r2,r2,zero
  800520:	1000011e 	bne	r2,zero,800528 <mode0+0x60>
			initialise_aei_timer();	//initialise AEI if it is not running
  800524:	0800a600 	call	800a60 <initialise_aei_timer>
		}
		initialise_lri_timer();
  800528:	0800ba40 	call	800ba4 <initialise_lri_timer>
		initialise_uri_timer();
  80052c:	0800c080 	call	800c08 <initialise_uri_timer>
		vpace_LED_on = 1;																			// Set LED on
  800530:	00800044 	movi	r2,1
  800534:	d0a72115 	stw	r2,-25468(gp)
		initialise_LED_timer(&vpace_LED_on);
  800538:	d1272104 	addi	r4,gp,-25468
  80053c:	0800cc40 	call	800cc4 <initialise_LED_timer>
	}
	if (APace == 1) {																				// APace signal handler
  800540:	00802074 	movhi	r2,129
  800544:	10bca984 	addi	r2,r2,-3418
  800548:	10800003 	ldbu	r2,0(r2)
  80054c:	10803fcc 	andi	r2,r2,255
  800550:	1080201c 	xori	r2,r2,128
  800554:	10bfe004 	addi	r2,r2,-128
  800558:	10800058 	cmpnei	r2,r2,1
  80055c:	10000b1e 	bne	r2,zero,80058c <mode0+0xc4>
		printf("** apace set **\n");
  800560:	01002074 	movhi	r4,129
  800564:	212d7304 	addi	r4,r4,-18996
  800568:	08044d40 	call	8044d4 <puts>
		if (pvarp_running == 1) {																	// If in PVARP phase, ignore as AR
  80056c:	d0a72317 	ldw	r2,-25460(gp)
  800570:	10800060 	cmpeqi	r2,r2,1
  800574:	1000181e 	bne	r2,zero,8005d8 <mode0+0x110>
			return;
		}
		initialise_avi_timer();
  800578:	08009fc0 	call	8009fc <initialise_avi_timer>
		apace_LED_on = 1;																			// Set LED on
  80057c:	00800044 	movi	r2,1
  800580:	d0a72215 	stw	r2,-25464(gp)
		initialise_LED_timer(&apace_LED_on);
  800584:	d1272204 	addi	r4,gp,-25464
  800588:	0800cc40 	call	800cc4 <initialise_LED_timer>
	}

	if (vpace_LED_on == 1) {																		// LED Logic
  80058c:	d0a72117 	ldw	r2,-25468(gp)
  800590:	10800058 	cmpnei	r2,r2,1
  800594:	1000051e 	bne	r2,zero,8005ac <mode0+0xe4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x01);											// LED 1
  800598:	00c04074 	movhi	r3,257
  80059c:	18c41804 	addi	r3,r3,4192
  8005a0:	00800044 	movi	r2,1
  8005a4:	18800035 	stwio	r2,0(r3)
  8005a8:	00000b06 	br	8005d8 <mode0+0x110>
	} else if (apace_LED_on == 1) {
  8005ac:	d0a72217 	ldw	r2,-25464(gp)
  8005b0:	10800058 	cmpnei	r2,r2,1
  8005b4:	1000051e 	bne	r2,zero,8005cc <mode0+0x104>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x02);											// LED 2
  8005b8:	00c04074 	movhi	r3,257
  8005bc:	18c41804 	addi	r3,r3,4192
  8005c0:	00800084 	movi	r2,2
  8005c4:	18800035 	stwio	r2,0(r3)
  8005c8:	00000306 	br	8005d8 <mode0+0x110>
	} else {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x00);											// No LEDs
  8005cc:	00804074 	movhi	r2,257
  8005d0:	10841804 	addi	r2,r2,4192
  8005d4:	10000035 	stwio	zero,0(r2)
	}
}
  8005d8:	e037883a 	mov	sp,fp
  8005dc:	dfc00117 	ldw	ra,4(sp)
  8005e0:	df000017 	ldw	fp,0(sp)
  8005e4:	dec00204 	addi	sp,sp,8
  8005e8:	f800283a 	ret

008005ec <mode1>:

void mode1() {
  8005ec:	defffe04 	addi	sp,sp,-8
  8005f0:	dfc00115 	stw	ra,4(sp)
  8005f4:	df000015 	stw	fp,0(sp)
  8005f8:	d839883a 	mov	fp,sp
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */

	c = read(fp, uart_read, 1);																		// Read from UART into buffer, non blocking
  8005fc:	d1272f17 	ldw	r4,-25412(gp)
  800600:	d1673117 	ldw	r5,-25404(gp)
  800604:	01800044 	movi	r6,1
  800608:	08079e00 	call	8079e0 <read>
  80060c:	d0a73015 	stw	r2,-25408(gp)
	if (c) {
  800610:	d0a73017 	ldw	r2,-25408(gp)
  800614:	1005003a 	cmpeq	r2,r2,zero
  800618:	1000531e 	bne	r2,zero,800768 <mode1+0x17c>
		if (*uart_read != 0) {																		// Ignore an empty buffer
  80061c:	d0a73117 	ldw	r2,-25404(gp)
  800620:	10800003 	ldbu	r2,0(r2)
  800624:	10803fcc 	andi	r2,r2,255
  800628:	1080201c 	xori	r2,r2,128
  80062c:	10bfe004 	addi	r2,r2,-128
  800630:	1005003a 	cmpeq	r2,r2,zero
  800634:	1000451e 	bne	r2,zero,80074c <mode1+0x160>
			if(*uart_read == 'A') {																	// ASense received
  800638:	d0a73117 	ldw	r2,-25404(gp)
  80063c:	10800003 	ldbu	r2,0(r2)
  800640:	10803fcc 	andi	r2,r2,255
  800644:	1080201c 	xori	r2,r2,128
  800648:	10bfe004 	addi	r2,r2,-128
  80064c:	10801058 	cmpnei	r2,r2,65
  800650:	1000151e 	bne	r2,zero,8006a8 <mode1+0xbc>
				if (pvarp_running == 1) {															// If in PVARP phase, ignore as AR
  800654:	d0a72317 	ldw	r2,-25460(gp)
  800658:	10800058 	cmpnei	r2,r2,1
  80065c:	1000061e 	bne	r2,zero,800678 <mode1+0x8c>
					printf("ar registered\n");
  800660:	01002074 	movhi	r4,129
  800664:	212d7704 	addi	r4,r4,-18980
  800668:	08044d40 	call	8044d4 <puts>
					*uart_read = 0;																	// Clear buffer
  80066c:	d0a73117 	ldw	r2,-25404(gp)
  800670:	10000005 	stb	zero,0(r2)
					return;
  800674:	00006e06 	br	800830 <mode1+0x244>
				}
				printf("asense received\n");
  800678:	01002074 	movhi	r4,129
  80067c:	212d7b04 	addi	r4,r4,-18964
  800680:	08044d40 	call	8044d4 <puts>
				initialise_avi_timer();
  800684:	08009fc0 	call	8009fc <initialise_avi_timer>
				ASense = 1;																			// Set ASense as sensed
  800688:	00c02074 	movhi	r3,129
  80068c:	18fcbe84 	addi	r3,r3,-3334
  800690:	00800044 	movi	r2,1
  800694:	18800005 	stb	r2,0(r3)
				initialise_debounce_timer(&ASense);
  800698:	01002074 	movhi	r4,129
  80069c:	213cbe84 	addi	r4,r4,-3334
  8006a0:	0800c780 	call	800c78 <initialise_debounce_timer>
  8006a4:	00002606 	br	800740 <mode1+0x154>
			} else if (*uart_read == 'V') {
  8006a8:	d0a73117 	ldw	r2,-25404(gp)
  8006ac:	10800003 	ldbu	r2,0(r2)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	10801598 	cmpnei	r2,r2,86
  8006c0:	1000191e 	bne	r2,zero,800728 <mode1+0x13c>
				if (vrp_running == 1) {																// If in VRP phase, ignore as VR
  8006c4:	d0a72417 	ldw	r2,-25456(gp)
  8006c8:	10800058 	cmpnei	r2,r2,1
  8006cc:	1000061e 	bne	r2,zero,8006e8 <mode1+0xfc>
					printf("vr registered\n");
  8006d0:	01002074 	movhi	r4,129
  8006d4:	212d7f04 	addi	r4,r4,-18948
  8006d8:	08044d40 	call	8044d4 <puts>
					*uart_read = 0;																	// Clear buffer
  8006dc:	d0a73117 	ldw	r2,-25404(gp)
  8006e0:	10000005 	stb	zero,0(r2)
					return;
  8006e4:	00005206 	br	800830 <mode1+0x244>
				}
				printf("vsense received\n");
  8006e8:	01002074 	movhi	r4,129
  8006ec:	212d8304 	addi	r4,r4,-18932
  8006f0:	08044d40 	call	8044d4 <puts>
				initialise_pvarp_timer();
  8006f4:	0800acc0 	call	800acc <initialise_pvarp_timer>
				initialise_vrp_timer();
  8006f8:	0800b380 	call	800b38 <initialise_vrp_timer>
				initialise_aei_timer();
  8006fc:	0800a600 	call	800a60 <initialise_aei_timer>
				initialise_lri_timer();
  800700:	0800ba40 	call	800ba4 <initialise_lri_timer>
				initialise_uri_timer();
  800704:	0800c080 	call	800c08 <initialise_uri_timer>
				VSense = 1;																			// Set VSense as sensed
  800708:	00c02074 	movhi	r3,129
  80070c:	18fcce84 	addi	r3,r3,-3270
  800710:	00800044 	movi	r2,1
  800714:	18800005 	stb	r2,0(r3)
				initialise_debounce_timer(&VSense);
  800718:	01002074 	movhi	r4,129
  80071c:	213cce84 	addi	r4,r4,-3270
  800720:	0800c780 	call	800c78 <initialise_debounce_timer>
  800724:	00000606 	br	800740 <mode1+0x154>
			} else {
				VSense = 0;
  800728:	00802074 	movhi	r2,129
  80072c:	10bcce84 	addi	r2,r2,-3270
  800730:	10000005 	stb	zero,0(r2)
				ASense = 0;
  800734:	00802074 	movhi	r2,129
  800738:	10bcbe84 	addi	r2,r2,-3334
  80073c:	10000005 	stb	zero,0(r2)
			}
			*uart_read = 0;																			// Clear buffer
  800740:	d0a73117 	ldw	r2,-25404(gp)
  800744:	10000005 	stb	zero,0(r2)
  800748:	00000d06 	br	800780 <mode1+0x194>
		} else {
			VSense = 0;
  80074c:	00802074 	movhi	r2,129
  800750:	10bcce84 	addi	r2,r2,-3270
  800754:	10000005 	stb	zero,0(r2)
			ASense = 0;
  800758:	00802074 	movhi	r2,129
  80075c:	10bcbe84 	addi	r2,r2,-3334
  800760:	10000005 	stb	zero,0(r2)
  800764:	00000606 	br	800780 <mode1+0x194>
		}
	} else {
		VSense = 0;
  800768:	00802074 	movhi	r2,129
  80076c:	10bcce84 	addi	r2,r2,-3270
  800770:	10000005 	stb	zero,0(r2)
		ASense = 0;
  800774:	00802074 	movhi	r2,129
  800778:	10bcbe84 	addi	r2,r2,-3334
  80077c:	10000005 	stb	zero,0(r2)
	}

	if (VPace == 1) {																			 	// VPace signal handler
  800780:	00802074 	movhi	r2,129
  800784:	10bcee04 	addi	r2,r2,-3144
  800788:	10800003 	ldbu	r2,0(r2)
  80078c:	10803fcc 	andi	r2,r2,255
  800790:	1080201c 	xori	r2,r2,128
  800794:	10bfe004 	addi	r2,r2,-128
  800798:	10800058 	cmpnei	r2,r2,1
  80079c:	1000101e 	bne	r2,zero,8007e0 <mode1+0x1f4>
		printf("** vpace set **\n");
  8007a0:	01002074 	movhi	r4,129
  8007a4:	212d6f04 	addi	r4,r4,-19012
  8007a8:	08044d40 	call	8044d4 <puts>
		if (vrp_running == 1) {																		// If in VRP phase, ignore as VR
  8007ac:	d0a72417 	ldw	r2,-25456(gp)
  8007b0:	10800060 	cmpeqi	r2,r2,1
  8007b4:	10001e1e 	bne	r2,zero,800830 <mode1+0x244>
			return;
		}
		initialise_pvarp_timer();
  8007b8:	0800acc0 	call	800acc <initialise_pvarp_timer>
		initialise_vrp_timer();
  8007bc:	0800b380 	call	800b38 <initialise_vrp_timer>
		initialise_aei_timer();
  8007c0:	0800a600 	call	800a60 <initialise_aei_timer>
		initialise_lri_timer();
  8007c4:	0800ba40 	call	800ba4 <initialise_lri_timer>
		initialise_uri_timer();
  8007c8:	0800c080 	call	800c08 <initialise_uri_timer>
		write(fp,"V",1);
  8007cc:	d1272f17 	ldw	r4,-25412(gp)
  8007d0:	01402074 	movhi	r5,129
  8007d4:	296d8704 	addi	r5,r5,-18916
  8007d8:	01800044 	movi	r6,1
  8007dc:	0807e200 	call	807e20 <write>
	}
	if (APace == 1) {																				// APace signal handler
  8007e0:	00802074 	movhi	r2,129
  8007e4:	10bca984 	addi	r2,r2,-3418
  8007e8:	10800003 	ldbu	r2,0(r2)
  8007ec:	10803fcc 	andi	r2,r2,255
  8007f0:	1080201c 	xori	r2,r2,128
  8007f4:	10bfe004 	addi	r2,r2,-128
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	10000c1e 	bne	r2,zero,800830 <mode1+0x244>
		printf("** apace set **\n");
  800800:	01002074 	movhi	r4,129
  800804:	212d7304 	addi	r4,r4,-18996
  800808:	08044d40 	call	8044d4 <puts>
		if (pvarp_running == 1) {																	// If in PVARP phase, ignore as AR
  80080c:	d0a72317 	ldw	r2,-25460(gp)
  800810:	10800060 	cmpeqi	r2,r2,1
  800814:	1000061e 	bne	r2,zero,800830 <mode1+0x244>
			return;
		}
		initialise_avi_timer();
  800818:	08009fc0 	call	8009fc <initialise_avi_timer>
		write(fp,"A",1);
  80081c:	d1272f17 	ldw	r4,-25412(gp)
  800820:	01402074 	movhi	r5,129
  800824:	296d8804 	addi	r5,r5,-18912
  800828:	01800044 	movi	r6,1
  80082c:	0807e200 	call	807e20 <write>
	}
}
  800830:	e037883a 	mov	sp,fp
  800834:	dfc00117 	ldw	ra,4(sp)
  800838:	df000017 	ldw	fp,0(sp)
  80083c:	dec00204 	addi	sp,sp,8
  800840:	f800283a 	ret

00800844 <init_uart>:

void init_uart() {
  800844:	defffe04 	addi	sp,sp,-8
  800848:	dfc00115 	stw	ra,4(sp)
  80084c:	df000015 	stw	fp,0(sp)
  800850:	d839883a 	mov	fp,sp
	fp = open(UART_NAME, O_NONBLOCK | O_RDWR);														// Open file pointer for non blocking, rw
  800854:	01002074 	movhi	r4,129
  800858:	212d8904 	addi	r4,r4,-18908
  80085c:	01500084 	movi	r5,16386
  800860:	08077f80 	call	8077f8 <open>
  800864:	d0a72f15 	stw	r2,-25412(gp)
}
  800868:	e037883a 	mov	sp,fp
  80086c:	dfc00117 	ldw	ra,4(sp)
  800870:	df000017 	ldw	fp,0(sp)
  800874:	dec00204 	addi	sp,sp,8
  800878:	f800283a 	ret

0080087c <init_buttons_pio>:

void init_buttons_pio() {
  80087c:	defffd04 	addi	sp,sp,-12
  800880:	dfc00215 	stw	ra,8(sp)
  800884:	df000115 	stw	fp,4(sp)
  800888:	df000104 	addi	fp,sp,4
	 * Initialises buttons and their interrupts for mode 0
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	void* context_going_to_be_passed = (void*) &buttonValue; 										// Cast before passing to ISR
  80088c:	d0a00004 	addi	r2,gp,-32768
  800890:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 												// Clears the edge capture register
  800894:	00804074 	movhi	r2,257
  800898:	10842b04 	addi	r2,r2,4268
  80089c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7); 											// Enable interrupts for all buttons
  8008a0:	00c04074 	movhi	r3,257
  8008a4:	18c42a04 	addi	r3,r3,4264
  8008a8:	008001c4 	movi	r2,7
  8008ac:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ, context_going_to_be_passed, buttons_isr); 						// Register the ISR
  8008b0:	01000104 	movi	r4,4
  8008b4:	e17fff17 	ldw	r5,-4(fp)
  8008b8:	01802034 	movhi	r6,128
  8008bc:	31823604 	addi	r6,r6,2264
  8008c0:	08071540 	call	807154 <alt_irq_register>
}
  8008c4:	e037883a 	mov	sp,fp
  8008c8:	dfc00117 	ldw	ra,4(sp)
  8008cc:	df000017 	ldw	fp,0(sp)
  8008d0:	dec00204 	addi	sp,sp,8
  8008d4:	f800283a 	ret

008008d8 <buttons_isr>:

void buttons_isr(void* context) {
  8008d8:	defffc04 	addi	sp,sp,-16
  8008dc:	dfc00315 	stw	ra,12(sp)
  8008e0:	df000215 	stw	fp,8(sp)
  8008e4:	df000204 	addi	fp,sp,8
  8008e8:	e13fff15 	stw	r4,-4(fp)
	 * Determines which button is pressed, sets necessary bits and starts corresponding timers
	 *
	 * Parameters: context
	 * Returns: NONE
	 */
	int* temp = (int*) context;
  8008ec:	e0bfff17 	ldw	r2,-4(fp)
  8008f0:	e0bffe15 	stw	r2,-8(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  8008f4:	00804074 	movhi	r2,257
  8008f8:	10842b04 	addi	r2,r2,4268
  8008fc:	10c00037 	ldwio	r3,0(r2)
  800900:	e0bffe17 	ldw	r2,-8(fp)
  800904:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);												// Clear the edge capture register
  800908:	00804074 	movhi	r2,257
  80090c:	10842b04 	addi	r2,r2,4268
  800910:	10000035 	stwio	zero,0(r2)
	if ((*temp & 0x01) > 0) {																		// VSense button
  800914:	e0bffe17 	ldw	r2,-8(fp)
  800918:	10800017 	ldw	r2,0(r2)
  80091c:	1080004c 	andi	r2,r2,1
  800920:	10800050 	cmplti	r2,r2,1
  800924:	1000191e 	bne	r2,zero,80098c <buttons_isr+0xb4>
		if (vrp_running == 1) {																		// If in VRP phase, ignore as VR
  800928:	d0a72417 	ldw	r2,-25456(gp)
  80092c:	10800058 	cmpnei	r2,r2,1
  800930:	1000041e 	bne	r2,zero,800944 <buttons_isr+0x6c>
			printf("vr registered\n");
  800934:	01002074 	movhi	r4,129
  800938:	212d7f04 	addi	r4,r4,-18948
  80093c:	08044d40 	call	8044d4 <puts>
			return;
  800940:	00002906 	br	8009e8 <buttons_isr+0x110>
		}
		printf("vsense pressed\n");
  800944:	01002074 	movhi	r4,129
  800948:	212d8c04 	addi	r4,r4,-18896
  80094c:	08044d40 	call	8044d4 <puts>
		initialise_pvarp_timer();
  800950:	0800acc0 	call	800acc <initialise_pvarp_timer>
		initialise_vrp_timer();
  800954:	0800b380 	call	800b38 <initialise_vrp_timer>
		if (aei_running == 0) {
  800958:	d0a72517 	ldw	r2,-25452(gp)
  80095c:	1004c03a 	cmpne	r2,r2,zero
  800960:	1000011e 	bne	r2,zero,800968 <buttons_isr+0x90>
			initialise_aei_timer();				//initialise AEI if it is not running
  800964:	0800a600 	call	800a60 <initialise_aei_timer>
		}
		initialise_lri_timer();
  800968:	0800ba40 	call	800ba4 <initialise_lri_timer>
		initialise_uri_timer();
  80096c:	0800c080 	call	800c08 <initialise_uri_timer>
		VSense = 1;																					// Set VSense as pressed
  800970:	00c02074 	movhi	r3,129
  800974:	18fcce84 	addi	r3,r3,-3270
  800978:	00800044 	movi	r2,1
  80097c:	18800005 	stb	r2,0(r3)
		initialise_debounce_timer(&VSense);
  800980:	01002074 	movhi	r4,129
  800984:	213cce84 	addi	r4,r4,-3270
  800988:	0800c780 	call	800c78 <initialise_debounce_timer>
	}
	if ((*temp & 0x02) > 0) {																		// ASense button
  80098c:	e0bffe17 	ldw	r2,-8(fp)
  800990:	10800017 	ldw	r2,0(r2)
  800994:	1080008c 	andi	r2,r2,2
  800998:	10800050 	cmplti	r2,r2,1
  80099c:	1000121e 	bne	r2,zero,8009e8 <buttons_isr+0x110>
		if (pvarp_running == 1) {																	// If in PVARP phase, ignore as AR
  8009a0:	d0a72317 	ldw	r2,-25460(gp)
  8009a4:	10800058 	cmpnei	r2,r2,1
  8009a8:	1000041e 	bne	r2,zero,8009bc <buttons_isr+0xe4>
			printf("ar registered\n");
  8009ac:	01002074 	movhi	r4,129
  8009b0:	212d7704 	addi	r4,r4,-18980
  8009b4:	08044d40 	call	8044d4 <puts>
			return;
  8009b8:	00000b06 	br	8009e8 <buttons_isr+0x110>
		}
		printf("asense pressed\n");
  8009bc:	01002074 	movhi	r4,129
  8009c0:	212d9004 	addi	r4,r4,-18880
  8009c4:	08044d40 	call	8044d4 <puts>
		initialise_avi_timer();
  8009c8:	08009fc0 	call	8009fc <initialise_avi_timer>
		ASense = 1;																					// Set ASense as pressed
  8009cc:	00c02074 	movhi	r3,129
  8009d0:	18fcbe84 	addi	r3,r3,-3334
  8009d4:	00800044 	movi	r2,1
  8009d8:	18800005 	stb	r2,0(r3)
		initialise_debounce_timer(&ASense);
  8009dc:	01002074 	movhi	r4,129
  8009e0:	213cbe84 	addi	r4,r4,-3334
  8009e4:	0800c780 	call	800c78 <initialise_debounce_timer>
	}
}
  8009e8:	e037883a 	mov	sp,fp
  8009ec:	dfc00117 	ldw	ra,4(sp)
  8009f0:	df000017 	ldw	fp,0(sp)
  8009f4:	dec00204 	addi	sp,sp,8
  8009f8:	f800283a 	ret

008009fc <initialise_avi_timer>:

void initialise_avi_timer() {
  8009fc:	defffc04 	addi	sp,sp,-16
  800a00:	dfc00315 	stw	ra,12(sp)
  800a04:	df000215 	stw	fp,8(sp)
  800a08:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the AVI period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("avi timer start\n");
  800a0c:	01002074 	movhi	r4,129
  800a10:	212d9404 	addi	r4,r4,-18864
  800a14:	08044d40 	call	8044d4 <puts>
	int avi_context = 0;
  800a18:	e03fff15 	stw	zero,-4(fp)
	void* avi_timer_context = (void*) &avi_context;
  800a1c:	e0bfff04 	addi	r2,fp,-4
  800a20:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_stop(&avi_timer);																		// Stop the timer before running it again
  800a24:	01002074 	movhi	r4,129
  800a28:	213cff04 	addi	r4,r4,-3076
  800a2c:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&avi_timer, AVI_VALUE, avi_isr_function, avi_timer_context);
  800a30:	01002074 	movhi	r4,129
  800a34:	213cff04 	addi	r4,r4,-3076
  800a38:	01404b04 	movi	r5,300
  800a3c:	01802034 	movhi	r6,128
  800a40:	31834404 	addi	r6,r6,3344
  800a44:	e1fffe17 	ldw	r7,-8(fp)
  800a48:	0806d440 	call	806d44 <alt_alarm_start>
}
  800a4c:	e037883a 	mov	sp,fp
  800a50:	dfc00117 	ldw	ra,4(sp)
  800a54:	df000017 	ldw	fp,0(sp)
  800a58:	dec00204 	addi	sp,sp,8
  800a5c:	f800283a 	ret

00800a60 <initialise_aei_timer>:

void initialise_aei_timer() {
  800a60:	defffc04 	addi	sp,sp,-16
  800a64:	dfc00315 	stw	ra,12(sp)
  800a68:	df000215 	stw	fp,8(sp)
  800a6c:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the AEI period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("aei timer start\n");
  800a70:	01002074 	movhi	r4,129
  800a74:	212d9804 	addi	r4,r4,-18848
  800a78:	08044d40 	call	8044d4 <puts>
	int aei_context = 0;																			// Update that AEI timer is running
  800a7c:	e03fff15 	stw	zero,-4(fp)
	void* aei_timer_context = (void*) &aei_context;
  800a80:	e0bfff04 	addi	r2,fp,-4
  800a84:	e0bffe15 	stw	r2,-8(fp)
	aei_running = 1;
  800a88:	00800044 	movi	r2,1
  800a8c:	d0a72515 	stw	r2,-25452(gp)
	alt_alarm_stop(&aei_timer);
  800a90:	01002074 	movhi	r4,129
  800a94:	213d0504 	addi	r4,r4,-3052
  800a98:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&aei_timer, AEI_VALUE, aei_isr_function, aei_timer_context);
  800a9c:	01002074 	movhi	r4,129
  800aa0:	213d0504 	addi	r4,r4,-3052
  800aa4:	0140c804 	movi	r5,800
  800aa8:	01802034 	movhi	r6,128
  800aac:	31835c04 	addi	r6,r6,3440
  800ab0:	e1fffe17 	ldw	r7,-8(fp)
  800ab4:	0806d440 	call	806d44 <alt_alarm_start>
}
  800ab8:	e037883a 	mov	sp,fp
  800abc:	dfc00117 	ldw	ra,4(sp)
  800ac0:	df000017 	ldw	fp,0(sp)
  800ac4:	dec00204 	addi	sp,sp,8
  800ac8:	f800283a 	ret

00800acc <initialise_pvarp_timer>:

void initialise_pvarp_timer() {
  800acc:	defffc04 	addi	sp,sp,-16
  800ad0:	dfc00315 	stw	ra,12(sp)
  800ad4:	df000215 	stw	fp,8(sp)
  800ad8:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the PVARP period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("pvarp timer start\n");
  800adc:	01002074 	movhi	r4,129
  800ae0:	212d9c04 	addi	r4,r4,-18832
  800ae4:	08044d40 	call	8044d4 <puts>
	int pvarp_context = 0;
  800ae8:	e03fff15 	stw	zero,-4(fp)
	pvarp_running = 1;																				// Update that PVARP timer is running
  800aec:	00800044 	movi	r2,1
  800af0:	d0a72315 	stw	r2,-25460(gp)
	void* pvarp_timer_context = (void*) &pvarp_context;
  800af4:	e0bfff04 	addi	r2,fp,-4
  800af8:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_stop(&pvarp_timer);
  800afc:	01002074 	movhi	r4,129
  800b00:	213d0b04 	addi	r4,r4,-3028
  800b04:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&pvarp_timer, PVARP_VALUE, pvarp_isr_function, pvarp_timer_context);
  800b08:	01002074 	movhi	r4,129
  800b0c:	213d0b04 	addi	r4,r4,-3028
  800b10:	01400c84 	movi	r5,50
  800b14:	01802034 	movhi	r6,128
  800b18:	31837504 	addi	r6,r6,3540
  800b1c:	e1fffe17 	ldw	r7,-8(fp)
  800b20:	0806d440 	call	806d44 <alt_alarm_start>
}
  800b24:	e037883a 	mov	sp,fp
  800b28:	dfc00117 	ldw	ra,4(sp)
  800b2c:	df000017 	ldw	fp,0(sp)
  800b30:	dec00204 	addi	sp,sp,8
  800b34:	f800283a 	ret

00800b38 <initialise_vrp_timer>:

void initialise_vrp_timer() {
  800b38:	defffc04 	addi	sp,sp,-16
  800b3c:	dfc00315 	stw	ra,12(sp)
  800b40:	df000215 	stw	fp,8(sp)
  800b44:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the VRP period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("vrp timer start\n");
  800b48:	01002074 	movhi	r4,129
  800b4c:	212da104 	addi	r4,r4,-18812
  800b50:	08044d40 	call	8044d4 <puts>
	int vrp_context = 0;
  800b54:	e03fff15 	stw	zero,-4(fp)
	vrp_running = 1;																				// Update that VRP timer is running
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a72415 	stw	r2,-25456(gp)
	void* vrp_timer_context = (void*) &vrp_context;
  800b60:	e0bfff04 	addi	r2,fp,-4
  800b64:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_stop(&vrp_timer);
  800b68:	01002074 	movhi	r4,129
  800b6c:	213d1104 	addi	r4,r4,-3004
  800b70:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&vrp_timer, VRP_VALUE, vrp_isr_function, vrp_timer_context);
  800b74:	01002074 	movhi	r4,129
  800b78:	213d1104 	addi	r4,r4,-3004
  800b7c:	01402584 	movi	r5,150
  800b80:	01802034 	movhi	r6,128
  800b84:	31838e04 	addi	r6,r6,3640
  800b88:	e1fffe17 	ldw	r7,-8(fp)
  800b8c:	0806d440 	call	806d44 <alt_alarm_start>
}
  800b90:	e037883a 	mov	sp,fp
  800b94:	dfc00117 	ldw	ra,4(sp)
  800b98:	df000017 	ldw	fp,0(sp)
  800b9c:	dec00204 	addi	sp,sp,8
  800ba0:	f800283a 	ret

00800ba4 <initialise_lri_timer>:

void initialise_lri_timer() {
  800ba4:	defffc04 	addi	sp,sp,-16
  800ba8:	dfc00315 	stw	ra,12(sp)
  800bac:	df000215 	stw	fp,8(sp)
  800bb0:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the LRI period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("lri timer start\n");
  800bb4:	01002074 	movhi	r4,129
  800bb8:	212da504 	addi	r4,r4,-18796
  800bbc:	08044d40 	call	8044d4 <puts>
	int lri_context = 0;
  800bc0:	e03fff15 	stw	zero,-4(fp)
	void* lri_timer_context = (void*) &lri_context;
  800bc4:	e0bfff04 	addi	r2,fp,-4
  800bc8:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_stop(&lri_timer);																		// Stop LRI timer before running it again
  800bcc:	01002074 	movhi	r4,129
  800bd0:	213d1704 	addi	r4,r4,-2980
  800bd4:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&lri_timer, LRI_VALUE, lri_isr_function, lri_timer_context);
  800bd8:	01002074 	movhi	r4,129
  800bdc:	213d1704 	addi	r4,r4,-2980
  800be0:	0140fa04 	movi	r5,1000
  800be4:	01802034 	movhi	r6,128
  800be8:	3183a704 	addi	r6,r6,3740
  800bec:	e1fffe17 	ldw	r7,-8(fp)
  800bf0:	0806d440 	call	806d44 <alt_alarm_start>
}
  800bf4:	e037883a 	mov	sp,fp
  800bf8:	dfc00117 	ldw	ra,4(sp)
  800bfc:	df000017 	ldw	fp,0(sp)
  800c00:	dec00204 	addi	sp,sp,8
  800c04:	f800283a 	ret

00800c08 <initialise_uri_timer>:

void initialise_uri_timer() {
  800c08:	defffc04 	addi	sp,sp,-16
  800c0c:	dfc00315 	stw	ra,12(sp)
  800c10:	df000215 	stw	fp,8(sp)
  800c14:	df000204 	addi	fp,sp,8
	 * Initialises the timer for measuring the URI period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	printf("uri timer start\n");
  800c18:	01002074 	movhi	r4,129
  800c1c:	212da904 	addi	r4,r4,-18780
  800c20:	08044d40 	call	8044d4 <puts>
	int uri_context = 0;
  800c24:	e03fff15 	stw	zero,-4(fp)
	void* uri_timer_context = (void*) &uri_context;
  800c28:	e0bfff04 	addi	r2,fp,-4
  800c2c:	e0bffe15 	stw	r2,-8(fp)
	URI_NOTRUNNING = 0;
  800c30:	00802074 	movhi	r2,129
  800c34:	10bcad84 	addi	r2,r2,-3402
  800c38:	10000005 	stb	zero,0(r2)
	alt_alarm_stop(&uri_timer);																		// Stop URI timer before running it again
  800c3c:	01002074 	movhi	r4,129
  800c40:	213d1d04 	addi	r4,r4,-2956
  800c44:	0807c7c0 	call	807c7c <alt_alarm_stop>
	alt_alarm_start(&uri_timer, URI_VALUE, uri_isr_function, uri_timer_context);
  800c48:	01002074 	movhi	r4,129
  800c4c:	213d1d04 	addi	r4,r4,-2956
  800c50:	01409604 	movi	r5,600
  800c54:	01802034 	movhi	r6,128
  800c58:	3183bf04 	addi	r6,r6,3836
  800c5c:	e1fffe17 	ldw	r7,-8(fp)
  800c60:	0806d440 	call	806d44 <alt_alarm_start>
}
  800c64:	e037883a 	mov	sp,fp
  800c68:	dfc00117 	ldw	ra,4(sp)
  800c6c:	df000017 	ldw	fp,0(sp)
  800c70:	dec00204 	addi	sp,sp,8
  800c74:	f800283a 	ret

00800c78 <initialise_debounce_timer>:

void initialise_debounce_timer(int* context) {
  800c78:	defffc04 	addi	sp,sp,-16
  800c7c:	dfc00315 	stw	ra,12(sp)
  800c80:	df000215 	stw	fp,8(sp)
  800c84:	df000204 	addi	fp,sp,8
  800c88:	e13fff15 	stw	r4,-4(fp)
	 * Initialises the timer for measuring the debounce period for switches
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	void* debounce_timer_context = (void*) context;
  800c8c:	e0bfff17 	ldw	r2,-4(fp)
  800c90:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_start(&debounce_timer, SIGNAL_VALUE, debounce_isr_function, debounce_timer_context);
  800c94:	01002074 	movhi	r4,129
  800c98:	213d2304 	addi	r4,r4,-2932
  800c9c:	01400044 	movi	r5,1
  800ca0:	01802034 	movhi	r6,128
  800ca4:	3183db04 	addi	r6,r6,3948
  800ca8:	e1fffe17 	ldw	r7,-8(fp)
  800cac:	0806d440 	call	806d44 <alt_alarm_start>
}
  800cb0:	e037883a 	mov	sp,fp
  800cb4:	dfc00117 	ldw	ra,4(sp)
  800cb8:	df000017 	ldw	fp,0(sp)
  800cbc:	dec00204 	addi	sp,sp,8
  800cc0:	f800283a 	ret

00800cc4 <initialise_LED_timer>:

void initialise_LED_timer(int* context) {
  800cc4:	defffc04 	addi	sp,sp,-16
  800cc8:	dfc00315 	stw	ra,12(sp)
  800ccc:	df000215 	stw	fp,8(sp)
  800cd0:	df000204 	addi	fp,sp,8
  800cd4:	e13fff15 	stw	r4,-4(fp)
	 * Initialises the timer for measuring the LED extension period
	 *
	 * Parameters: NONE
	 * Returns: NONE
	 */
	void* LED_timer_context = (void*) context;
  800cd8:	e0bfff17 	ldw	r2,-4(fp)
  800cdc:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_start(&LED_timer, DEBOUNCE_VALUE, LED_isr_function, LED_timer_context);
  800ce0:	01002074 	movhi	r4,129
  800ce4:	213d2904 	addi	r4,r4,-2908
  800ce8:	01400c84 	movi	r5,50
  800cec:	01802034 	movhi	r6,128
  800cf0:	3183e804 	addi	r6,r6,4000
  800cf4:	e1fffe17 	ldw	r7,-8(fp)
  800cf8:	0806d440 	call	806d44 <alt_alarm_start>
}
  800cfc:	e037883a 	mov	sp,fp
  800d00:	dfc00117 	ldw	ra,4(sp)
  800d04:	df000017 	ldw	fp,0(sp)
  800d08:	dec00204 	addi	sp,sp,8
  800d0c:	f800283a 	ret

00800d10 <avi_isr_function>:

alt_u32 avi_isr_function(void* context) {
  800d10:	defffd04 	addi	sp,sp,-12
  800d14:	dfc00215 	stw	ra,8(sp)
  800d18:	df000115 	stw	fp,4(sp)
  800d1c:	df000104 	addi	fp,sp,4
  800d20:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when AVI timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("avi timer end\n");
  800d24:	01002074 	movhi	r4,129
  800d28:	212dad04 	addi	r4,r4,-18764
  800d2c:	08044d40 	call	8044d4 <puts>
	if (crit_flag) {																				// Check for critical section
  800d30:	d0a72617 	ldw	r2,-25448(gp)
  800d34:	1005003a 	cmpeq	r2,r2,zero
  800d38:	1000031e 	bne	r2,zero,800d48 <avi_isr_function+0x38>
		setAVITO = 1;																				// If in crit section, set flag to be updated
  800d3c:	00800044 	movi	r2,1
  800d40:	d0a72715 	stw	r2,-25444(gp)
  800d44:	00000406 	br	800d58 <avi_isr_function+0x48>
	} else {
		AVITO = 1;																					// Else update flag
  800d48:	00c02074 	movhi	r3,129
  800d4c:	18fcd444 	addi	r3,r3,-3247
  800d50:	00800044 	movi	r2,1
  800d54:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800d58:	0005883a 	mov	r2,zero
}
  800d5c:	e037883a 	mov	sp,fp
  800d60:	dfc00117 	ldw	ra,4(sp)
  800d64:	df000017 	ldw	fp,0(sp)
  800d68:	dec00204 	addi	sp,sp,8
  800d6c:	f800283a 	ret

00800d70 <aei_isr_function>:

alt_u32 aei_isr_function(void* context) {
  800d70:	defffd04 	addi	sp,sp,-12
  800d74:	dfc00215 	stw	ra,8(sp)
  800d78:	df000115 	stw	fp,4(sp)
  800d7c:	df000104 	addi	fp,sp,4
  800d80:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when AEI timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("aei timer end\n");
  800d84:	01002074 	movhi	r4,129
  800d88:	212db104 	addi	r4,r4,-18748
  800d8c:	08044d40 	call	8044d4 <puts>
	aei_running = 0;
  800d90:	d0272515 	stw	zero,-25452(gp)
	if (crit_flag) {
  800d94:	d0a72617 	ldw	r2,-25448(gp)
  800d98:	1005003a 	cmpeq	r2,r2,zero
  800d9c:	1000031e 	bne	r2,zero,800dac <aei_isr_function+0x3c>
		setAEITO = 1;
  800da0:	00800044 	movi	r2,1
  800da4:	d0a72815 	stw	r2,-25440(gp)
  800da8:	00000406 	br	800dbc <aei_isr_function+0x4c>
	} else {
		AEITO = 1;
  800dac:	00c02074 	movhi	r3,129
  800db0:	18fcf284 	addi	r3,r3,-3126
  800db4:	00800044 	movi	r2,1
  800db8:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800dbc:	0005883a 	mov	r2,zero
}
  800dc0:	e037883a 	mov	sp,fp
  800dc4:	dfc00117 	ldw	ra,4(sp)
  800dc8:	df000017 	ldw	fp,0(sp)
  800dcc:	dec00204 	addi	sp,sp,8
  800dd0:	f800283a 	ret

00800dd4 <pvarp_isr_function>:

alt_u32 pvarp_isr_function(void* context) {
  800dd4:	defffd04 	addi	sp,sp,-12
  800dd8:	dfc00215 	stw	ra,8(sp)
  800ddc:	df000115 	stw	fp,4(sp)
  800de0:	df000104 	addi	fp,sp,4
  800de4:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when PVARP timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("pvarp timer end\n");
  800de8:	01002074 	movhi	r4,129
  800dec:	212db504 	addi	r4,r4,-18732
  800df0:	08044d40 	call	8044d4 <puts>
	pvarp_running = 0;
  800df4:	d0272315 	stw	zero,-25460(gp)
	if (crit_flag) {
  800df8:	d0a72617 	ldw	r2,-25448(gp)
  800dfc:	1005003a 	cmpeq	r2,r2,zero
  800e00:	1000031e 	bne	r2,zero,800e10 <pvarp_isr_function+0x3c>
		setPVARPTO = 1;
  800e04:	00800044 	movi	r2,1
  800e08:	d0a72915 	stw	r2,-25436(gp)
  800e0c:	00000406 	br	800e20 <pvarp_isr_function+0x4c>
	} else {
		PVARPTO = 1;
  800e10:	00c02074 	movhi	r3,129
  800e14:	18fcd744 	addi	r3,r3,-3235
  800e18:	00800044 	movi	r2,1
  800e1c:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800e20:	0005883a 	mov	r2,zero
}
  800e24:	e037883a 	mov	sp,fp
  800e28:	dfc00117 	ldw	ra,4(sp)
  800e2c:	df000017 	ldw	fp,0(sp)
  800e30:	dec00204 	addi	sp,sp,8
  800e34:	f800283a 	ret

00800e38 <vrp_isr_function>:

alt_u32 vrp_isr_function(void* context) {
  800e38:	defffd04 	addi	sp,sp,-12
  800e3c:	dfc00215 	stw	ra,8(sp)
  800e40:	df000115 	stw	fp,4(sp)
  800e44:	df000104 	addi	fp,sp,4
  800e48:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when VRP timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("vrp timer end\n");
  800e4c:	01002074 	movhi	r4,129
  800e50:	212db904 	addi	r4,r4,-18716
  800e54:	08044d40 	call	8044d4 <puts>
	vrp_running = 0;
  800e58:	d0272415 	stw	zero,-25456(gp)
	if (crit_flag) {
  800e5c:	d0a72617 	ldw	r2,-25448(gp)
  800e60:	1005003a 	cmpeq	r2,r2,zero
  800e64:	1000031e 	bne	r2,zero,800e74 <vrp_isr_function+0x3c>
		setVRPTO = 1;
  800e68:	00800044 	movi	r2,1
  800e6c:	d0a72a15 	stw	r2,-25432(gp)
  800e70:	00000406 	br	800e84 <vrp_isr_function+0x4c>
	} else {
		VRPTO = 1;
  800e74:	00c02074 	movhi	r3,129
  800e78:	18fcd344 	addi	r3,r3,-3251
  800e7c:	00800044 	movi	r2,1
  800e80:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800e84:	0005883a 	mov	r2,zero
}
  800e88:	e037883a 	mov	sp,fp
  800e8c:	dfc00117 	ldw	ra,4(sp)
  800e90:	df000017 	ldw	fp,0(sp)
  800e94:	dec00204 	addi	sp,sp,8
  800e98:	f800283a 	ret

00800e9c <lri_isr_function>:

alt_u32 lri_isr_function(void* context) {
  800e9c:	defffd04 	addi	sp,sp,-12
  800ea0:	dfc00215 	stw	ra,8(sp)
  800ea4:	df000115 	stw	fp,4(sp)
  800ea8:	df000104 	addi	fp,sp,4
  800eac:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when LRI timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("lri timer end\n");
  800eb0:	01002074 	movhi	r4,129
  800eb4:	212dbd04 	addi	r4,r4,-18700
  800eb8:	08044d40 	call	8044d4 <puts>
	if (crit_flag) {
  800ebc:	d0a72617 	ldw	r2,-25448(gp)
  800ec0:	1005003a 	cmpeq	r2,r2,zero
  800ec4:	1000031e 	bne	r2,zero,800ed4 <lri_isr_function+0x38>
		setLRITO = 1;
  800ec8:	00800044 	movi	r2,1
  800ecc:	d0a72b15 	stw	r2,-25428(gp)
  800ed0:	00000406 	br	800ee4 <lri_isr_function+0x48>
	} else {
		LRITO = 1;
  800ed4:	00c02074 	movhi	r3,129
  800ed8:	18fcb044 	addi	r3,r3,-3391
  800edc:	00800044 	movi	r2,1
  800ee0:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800ee4:	0005883a 	mov	r2,zero
}
  800ee8:	e037883a 	mov	sp,fp
  800eec:	dfc00117 	ldw	ra,4(sp)
  800ef0:	df000017 	ldw	fp,0(sp)
  800ef4:	dec00204 	addi	sp,sp,8
  800ef8:	f800283a 	ret

00800efc <uri_isr_function>:

alt_u32 uri_isr_function(void* context) {
  800efc:	defffd04 	addi	sp,sp,-12
  800f00:	dfc00215 	stw	ra,8(sp)
  800f04:	df000115 	stw	fp,4(sp)
  800f08:	df000104 	addi	fp,sp,4
  800f0c:	e13fff15 	stw	r4,-4(fp)
	 * ISR function that is called when URI timer times out
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	printf("uri timer end\n");
  800f10:	01002074 	movhi	r4,129
  800f14:	212dc104 	addi	r4,r4,-18684
  800f18:	08044d40 	call	8044d4 <puts>
	URI_NOTRUNNING = 1;
  800f1c:	00c02074 	movhi	r3,129
  800f20:	18fcad84 	addi	r3,r3,-3402
  800f24:	00800044 	movi	r2,1
  800f28:	18800005 	stb	r2,0(r3)
	if (crit_flag) {
  800f2c:	d0a72617 	ldw	r2,-25448(gp)
  800f30:	1005003a 	cmpeq	r2,r2,zero
  800f34:	1000031e 	bne	r2,zero,800f44 <uri_isr_function+0x48>
		setURITO = 1;
  800f38:	00800044 	movi	r2,1
  800f3c:	d0a72c15 	stw	r2,-25424(gp)
  800f40:	00000406 	br	800f54 <uri_isr_function+0x58>
	} else {
		URITO = 1;
  800f44:	00c02074 	movhi	r3,129
  800f48:	18fcd304 	addi	r3,r3,-3252
  800f4c:	00800044 	movi	r2,1
  800f50:	18800005 	stb	r2,0(r3)
	}
	return 0;
  800f54:	0005883a 	mov	r2,zero
}
  800f58:	e037883a 	mov	sp,fp
  800f5c:	dfc00117 	ldw	ra,4(sp)
  800f60:	df000017 	ldw	fp,0(sp)
  800f64:	dec00204 	addi	sp,sp,8
  800f68:	f800283a 	ret

00800f6c <debounce_isr_function>:

alt_u32 debounce_isr_function(void* context) {
  800f6c:	defffd04 	addi	sp,sp,-12
  800f70:	df000215 	stw	fp,8(sp)
  800f74:	df000204 	addi	fp,sp,8
  800f78:	e13fff15 	stw	r4,-4(fp)
	 * Sets the context variable (reference to the button pressed value) to 0
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	int *temp = (int*) context;
  800f7c:	e0bfff17 	ldw	r2,-4(fp)
  800f80:	e0bffe15 	stw	r2,-8(fp)
	*temp = 0;
  800f84:	e0bffe17 	ldw	r2,-8(fp)
  800f88:	10000015 	stw	zero,0(r2)
	return 0;
  800f8c:	0005883a 	mov	r2,zero
}
  800f90:	e037883a 	mov	sp,fp
  800f94:	df000017 	ldw	fp,0(sp)
  800f98:	dec00104 	addi	sp,sp,4
  800f9c:	f800283a 	ret

00800fa0 <LED_isr_function>:

alt_u32 LED_isr_function(void* context) {
  800fa0:	defffd04 	addi	sp,sp,-12
  800fa4:	df000215 	stw	fp,8(sp)
  800fa8:	df000204 	addi	fp,sp,8
  800fac:	e13fff15 	stw	r4,-4(fp)
	 * Sets the context variable (reference to the LED on value) to 0
	 *
	 * Parameters: context
	 * Returns: alt_u32 representing the next timer value
	 */
	int *temp = (int*) context;
  800fb0:	e0bfff17 	ldw	r2,-4(fp)
  800fb4:	e0bffe15 	stw	r2,-8(fp)
	*temp = 0;
  800fb8:	e0bffe17 	ldw	r2,-8(fp)
  800fbc:	10000015 	stw	zero,0(r2)
	return 0;
  800fc0:	0005883a 	mov	r2,zero
}
  800fc4:	e037883a 	mov	sp,fp
  800fc8:	df000017 	ldw	fp,0(sp)
  800fcc:	dec00104 	addi	sp,sp,4
  800fd0:	f800283a 	ret

00800fd4 <reset>:
char g139_e1_fix_fix;
char g139_e1_fix;
char g139_e1;
char g143_e2;
int _PRE_GO;
void reset(){
  800fd4:	deffff04 	addi	sp,sp,-4
  800fd8:	df000015 	stw	fp,0(sp)
  800fdc:	d839883a 	mov	fp,sp
   _GO = 1;
  800fe0:	00800044 	movi	r2,1
  800fe4:	d0a75c85 	stb	r2,-25230(gp)
   _PRE_GO = 0;
  800fe8:	d0273b15 	stw	zero,-25364(gp)
   PRE_g3 = 0;
  800fec:	d0273c45 	stb	zero,-25359(gp)
   PRE_g6 = 0;
  800ff0:	d02758c5 	stb	zero,-25245(gp)
   PRE_g8 = 0;
  800ff4:	d0274705 	stb	zero,-25316(gp)
   PRE_g11 = 0;
  800ff8:	d0275d85 	stb	zero,-25226(gp)
   PRE_g19 = 0;
  800ffc:	d0275f05 	stb	zero,-25220(gp)
   PRE_g21 = 0;
  801000:	d0276e85 	stb	zero,-25158(gp)
   PRE_g27 = 0;
  801004:	d0273845 	stb	zero,-25375(gp)
   PRE_g30 = 0;
  801008:	d0277705 	stb	zero,-25124(gp)
   PRE_g35 = 0;
  80100c:	d02749c5 	stb	zero,-25305(gp)
   PRE_g37 = 0;
  801010:	d0277d45 	stb	zero,-25099(gp)
   PRE_g42 = 0;
  801014:	d0274c05 	stb	zero,-25296(gp)
   PRE_g45 = 0;
  801018:	d0277605 	stb	zero,-25128(gp)
   PRE_g48 = 0;
  80101c:	d0276505 	stb	zero,-25196(gp)
   PRE_g50 = 0;
  801020:	d02748c5 	stb	zero,-25309(gp)
   PRE_g56 = 0;
  801024:	d0273dc5 	stb	zero,-25353(gp)
   PRE_g65 = 0;
  801028:	d0273f85 	stb	zero,-25346(gp)
   PRE_g67 = 0;
  80102c:	d0275a85 	stb	zero,-25238(gp)
   PRE_g73 = 0;
  801030:	d02776c5 	stb	zero,-25125(gp)
   PRE_g75 = 0;
  801034:	d0273e45 	stb	zero,-25351(gp)
   PRE_g80 = 0;
  801038:	d0275305 	stb	zero,-25268(gp)
   PRE_g83 = 0;
  80103c:	d0275ac5 	stb	zero,-25237(gp)
   PRE_g88 = 0;
  801040:	d0276105 	stb	zero,-25212(gp)
   PRE_g90 = 0;
  801044:	d0273645 	stb	zero,-25383(gp)
   PRE_g96 = 0;
  801048:	d0275a45 	stb	zero,-25239(gp)
   PRE_g99 = 0;
  80104c:	d0276b85 	stb	zero,-25170(gp)
   PRE_g101 = 0;
  801050:	d0275285 	stb	zero,-25270(gp)
   PRE_g104 = 0;
  801054:	d0274905 	stb	zero,-25308(gp)
   PRE_g116 = 0;
  801058:	d0274b85 	stb	zero,-25298(gp)
   PRE_g118 = 0;
  80105c:	d0274185 	stb	zero,-25338(gp)
   PRE_g124 = 0;
  801060:	d0274845 	stb	zero,-25311(gp)
   PRE_g127 = 0;
  801064:	d0277505 	stb	zero,-25132(gp)
   PRE_g129 = 0;
  801068:	d02764c5 	stb	zero,-25197(gp)
   PRE_g136 = 0;
  80106c:	d0274785 	stb	zero,-25314(gp)
   PRE_g141 = 0;
  801070:	d0274105 	stb	zero,-25340(gp)
   return;
}
  801074:	e037883a 	mov	sp,fp
  801078:	df000017 	ldw	fp,0(sp)
  80107c:	dec00104 	addi	sp,sp,4
  801080:	f800283a 	ret

00801084 <tick>:
void tick(){
  801084:	deff9d04 	addi	sp,sp,-396
  801088:	df006215 	stw	fp,392(sp)
  80108c:	df006204 	addi	fp,sp,392
   if(_PRE_GO == 1){
  801090:	d0a73b17 	ldw	r2,-25364(gp)
  801094:	10800058 	cmpnei	r2,r2,1
  801098:	1000011e 	bne	r2,zero,8010a0 <tick+0x1c>
      _GO = 0;
  80109c:	d0275c85 	stb	zero,-25230(gp)
   }
   {
      g0 = _GO;
  8010a0:	d0a75c83 	ldbu	r2,-25230(gp)
  8010a4:	d0a76c85 	stb	r2,-25166(gp)
      if(g0){
  8010a8:	d0a76c83 	ldbu	r2,-25166(gp)
  8010ac:	10803fcc 	andi	r2,r2,255
  8010b0:	1080201c 	xori	r2,r2,128
  8010b4:	10bfe004 	addi	r2,r2,-128
  8010b8:	1005003a 	cmpeq	r2,r2,zero
  8010bc:	1000021e 	bne	r2,zero,8010c8 <tick+0x44>
         URI_NOTRUNNING = 1;
  8010c0:	00800044 	movi	r2,1
  8010c4:	d0a73785 	stb	r2,-25378(gp)
      }
      g1 = g0;
  8010c8:	d0a76c83 	ldbu	r2,-25166(gp)
  8010cc:	d0a74005 	stb	r2,-25344(gp)
      g2 = g1;
  8010d0:	d0a74003 	ldbu	r2,-25344(gp)
  8010d4:	d0a75145 	stb	r2,-25275(gp)
      g142 =(PRE_g141);
  8010d8:	d0a74103 	ldbu	r2,-25340(gp)
  8010dc:	d0a77085 	stb	r2,-25150(gp)
      g140 = g0;
  8010e0:	d0a76c83 	ldbu	r2,-25166(gp)
  8010e4:	d0a73cc5 	stb	r2,-25357(gp)
      g141 =(g142||g140);
  8010e8:	d0a77083 	ldbu	r2,-25150(gp)
  8010ec:	10803fcc 	andi	r2,r2,255
  8010f0:	1080201c 	xori	r2,r2,128
  8010f4:	10bfe004 	addi	r2,r2,-128
  8010f8:	1004c03a 	cmpne	r2,r2,zero
  8010fc:	1000061e 	bne	r2,zero,801118 <tick+0x94>
  801100:	d0a73cc3 	ldbu	r2,-25357(gp)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	1005003a 	cmpeq	r2,r2,zero
  801114:	1000031e 	bne	r2,zero,801124 <tick+0xa0>
  801118:	00800044 	movi	r2,1
  80111c:	e0bfff15 	stw	r2,-4(fp)
  801120:	00000106 	br	801128 <tick+0xa4>
  801124:	e03fff15 	stw	zero,-4(fp)
  801128:	e0ffff17 	ldw	r3,-4(fp)
  80112c:	1805883a 	mov	r2,r3
  801130:	d0a76885 	stb	r2,-25182(gp)
      if(g141){
  801134:	d0a76883 	ldbu	r2,-25182(gp)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	1080201c 	xori	r2,r2,128
  801140:	10bfe004 	addi	r2,r2,-128
  801144:	1005003a 	cmpeq	r2,r2,zero
  801148:	1000021e 	bne	r2,zero,801154 <tick+0xd0>
         VPace = 0;
  80114c:	d0277805 	stb	zero,-25120(gp)
         APace = 0;
  801150:	d0273385 	stb	zero,-25394(gp)
      }
      g137 =(PRE_g136);
  801154:	d0a74783 	ldbu	r2,-25314(gp)
  801158:	d0a76bc5 	stb	r2,-25169(gp)
      g135 = g1;
  80115c:	d0a74003 	ldbu	r2,-25344(gp)
  801160:	d0a74085 	stb	r2,-25342(gp)
      g136 =(g137||g135);
  801164:	d0a76bc3 	ldbu	r2,-25169(gp)
  801168:	10803fcc 	andi	r2,r2,255
  80116c:	1080201c 	xori	r2,r2,128
  801170:	10bfe004 	addi	r2,r2,-128
  801174:	1004c03a 	cmpne	r2,r2,zero
  801178:	1000061e 	bne	r2,zero,801194 <tick+0x110>
  80117c:	d0a74083 	ldbu	r2,-25342(gp)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	1005003a 	cmpeq	r2,r2,zero
  801190:	1000031e 	bne	r2,zero,8011a0 <tick+0x11c>
  801194:	00800044 	movi	r2,1
  801198:	e0bffe15 	stw	r2,-8(fp)
  80119c:	00000106 	br	8011a4 <tick+0x120>
  8011a0:	e03ffe15 	stw	zero,-8(fp)
  8011a4:	e0fffe17 	ldw	r3,-8(fp)
  8011a8:	1805883a 	mov	r2,r3
  8011ac:	d0a753c5 	stb	r2,-25265(gp)
      if(g136){
  8011b0:	d0a753c3 	ldbu	r2,-25265(gp)
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	1080201c 	xori	r2,r2,128
  8011bc:	10bfe004 	addi	r2,r2,-128
  8011c0:	1005003a 	cmpeq	r2,r2,zero
  8011c4:	1000121e 	bne	r2,zero,801210 <tick+0x18c>
         _compsys303_a2_local_LRI_start = 0;
  8011c8:	d02770c5 	stb	zero,-25149(gp)
         _compsys303_a2_local_LRI_ex = 0;
  8011cc:	d0273e05 	stb	zero,-25352(gp)
         _compsys303_a2_local_LRI_stop = 0;
  8011d0:	d0276f85 	stb	zero,-25154(gp)
         _compsys303_a2_local_VRP_start = 0;
  8011d4:	d0277545 	stb	zero,-25131(gp)
         _compsys303_a2_local_VRP_ex = 0;
  8011d8:	d02774c5 	stb	zero,-25133(gp)
         _compsys303_a2_local_VRP_stop = 0;
  8011dc:	d0275645 	stb	zero,-25255(gp)
         _compsys303_a2_local_AVI_start = 0;
  8011e0:	d0276745 	stb	zero,-25187(gp)
         _compsys303_a2_local_AVI_ex = 0;
  8011e4:	d02747c5 	stb	zero,-25313(gp)
         _compsys303_a2_local_AVI_stop = 0;
  8011e8:	d02743c5 	stb	zero,-25329(gp)
         _compsys303_a2_local_PVARP_start = 0;
  8011ec:	d0276a45 	stb	zero,-25175(gp)
         _compsys303_a2_local_PVARP_ex = 0;
  8011f0:	d0277385 	stb	zero,-25138(gp)
         _compsys303_a2_local_PVARP_stop = 0;
  8011f4:	d0274d45 	stb	zero,-25291(gp)
         _compsys303_a2_local_AEI_start = 0;
  8011f8:	d0273685 	stb	zero,-25382(gp)
         _compsys303_a2_local_AEI_ex = 0;
  8011fc:	d0273c05 	stb	zero,-25360(gp)
         _compsys303_a2_local_AEI_stop = 0;
  801200:	d0275245 	stb	zero,-25271(gp)
         _compsys303_a2_local_URI_start = 0;
  801204:	d0275605 	stb	zero,-25256(gp)
         _compsys303_a2_local_URI_ex = 0;
  801208:	d0276c45 	stb	zero,-25167(gp)
         _compsys303_a2_local_URI_stop = 0;
  80120c:	d0273345 	stb	zero,-25395(gp)
      }
      g119 =(PRE_g118);
  801210:	d0a74183 	ldbu	r2,-25338(gp)
  801214:	d0a76005 	stb	r2,-25216(gp)
      g119b = g119;
  801218:	d0a76003 	ldbu	r2,-25216(gp)
  80121c:	d0a746c5 	stb	r2,-25317(gp)
      _cg119 = _compsys303_a2_local_URI_stop;
  801220:	d0a73343 	ldbu	r2,-25395(gp)
  801224:	d0a74645 	stb	r2,-25319(gp)
      g120 =(g119b&&(!(_cg119)));
  801228:	d0a746c3 	ldbu	r2,-25317(gp)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	1005003a 	cmpeq	r2,r2,zero
  80123c:	1000091e 	bne	r2,zero,801264 <tick+0x1e0>
  801240:	d0a74643 	ldbu	r2,-25319(gp)
  801244:	10803fcc 	andi	r2,r2,255
  801248:	1080201c 	xori	r2,r2,128
  80124c:	10bfe004 	addi	r2,r2,-128
  801250:	1004c03a 	cmpne	r2,r2,zero
  801254:	1000031e 	bne	r2,zero,801264 <tick+0x1e0>
  801258:	00800044 	movi	r2,1
  80125c:	e0bffd15 	stw	r2,-12(fp)
  801260:	00000106 	br	801268 <tick+0x1e4>
  801264:	e03ffd15 	stw	zero,-12(fp)
  801268:	e0fffd17 	ldw	r3,-12(fp)
  80126c:	1805883a 	mov	r2,r3
  801270:	d0a77905 	stb	r2,-25116(gp)
      _cg120 = URITO;
  801274:	d0a75d03 	ldbu	r2,-25228(gp)
  801278:	d0a77945 	stb	r2,-25115(gp)
      g121 =(g120&&_cg120);
  80127c:	d0a77903 	ldbu	r2,-25116(gp)
  801280:	10803fcc 	andi	r2,r2,255
  801284:	1080201c 	xori	r2,r2,128
  801288:	10bfe004 	addi	r2,r2,-128
  80128c:	1005003a 	cmpeq	r2,r2,zero
  801290:	1000091e 	bne	r2,zero,8012b8 <tick+0x234>
  801294:	d0a77943 	ldbu	r2,-25115(gp)
  801298:	10803fcc 	andi	r2,r2,255
  80129c:	1080201c 	xori	r2,r2,128
  8012a0:	10bfe004 	addi	r2,r2,-128
  8012a4:	1005003a 	cmpeq	r2,r2,zero
  8012a8:	1000031e 	bne	r2,zero,8012b8 <tick+0x234>
  8012ac:	00800044 	movi	r2,1
  8012b0:	e0bffc15 	stw	r2,-16(fp)
  8012b4:	00000106 	br	8012bc <tick+0x238>
  8012b8:	e03ffc15 	stw	zero,-16(fp)
  8012bc:	e0fffc17 	ldw	r3,-16(fp)
  8012c0:	1805883a 	mov	r2,r3
  8012c4:	d0a77745 	stb	r2,-25123(gp)
      if(g121){
  8012c8:	d0a77743 	ldbu	r2,-25123(gp)
  8012cc:	10803fcc 	andi	r2,r2,255
  8012d0:	1080201c 	xori	r2,r2,128
  8012d4:	10bfe004 	addi	r2,r2,-128
  8012d8:	1005003a 	cmpeq	r2,r2,zero
  8012dc:	1000021e 	bne	r2,zero,8012e8 <tick+0x264>
         _compsys303_a2_local_URI_ex =(_compsys303_a2_local_URI_ex||1);
  8012e0:	00800044 	movi	r2,1
  8012e4:	d0a76c45 	stb	r2,-25167(gp)
      }
      g57 =(PRE_g56);
  8012e8:	d0a73dc3 	ldbu	r2,-25353(gp)
  8012ec:	d0a76705 	stb	r2,-25188(gp)
      g57b = g57;
  8012f0:	d0a76703 	ldbu	r2,-25188(gp)
  8012f4:	d0a76245 	stb	r2,-25207(gp)
      _cg57 = _compsys303_a2_local_URI_ex;
  8012f8:	d0a76c43 	ldbu	r2,-25167(gp)
  8012fc:	d0a76fc5 	stb	r2,-25153(gp)
      g58 =(g57b&&_cg57);
  801300:	d0a76243 	ldbu	r2,-25207(gp)
  801304:	10803fcc 	andi	r2,r2,255
  801308:	1080201c 	xori	r2,r2,128
  80130c:	10bfe004 	addi	r2,r2,-128
  801310:	1005003a 	cmpeq	r2,r2,zero
  801314:	1000091e 	bne	r2,zero,80133c <tick+0x2b8>
  801318:	d0a76fc3 	ldbu	r2,-25153(gp)
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	1080201c 	xori	r2,r2,128
  801324:	10bfe004 	addi	r2,r2,-128
  801328:	1005003a 	cmpeq	r2,r2,zero
  80132c:	1000031e 	bne	r2,zero,80133c <tick+0x2b8>
  801330:	00800044 	movi	r2,1
  801334:	e0bffb15 	stw	r2,-20(fp)
  801338:	00000106 	br	801340 <tick+0x2bc>
  80133c:	e03ffb15 	stw	zero,-20(fp)
  801340:	e0fffb17 	ldw	r3,-20(fp)
  801344:	1805883a 	mov	r2,r3
  801348:	d0a76f05 	stb	r2,-25156(gp)
      if(g58){
  80134c:	d0a76f03 	ldbu	r2,-25156(gp)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	1080201c 	xori	r2,r2,128
  801358:	10bfe004 	addi	r2,r2,-128
  80135c:	1005003a 	cmpeq	r2,r2,zero
  801360:	1000021e 	bne	r2,zero,80136c <tick+0x2e8>
         VPace =(VPace||1);
  801364:	00800044 	movi	r2,1
  801368:	d0a77805 	stb	r2,-25120(gp)
      }
      g59 =(g57b&&(!(_cg57)));
  80136c:	d0a76243 	ldbu	r2,-25207(gp)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	1005003a 	cmpeq	r2,r2,zero
  801380:	1000091e 	bne	r2,zero,8013a8 <tick+0x324>
  801384:	d0a76fc3 	ldbu	r2,-25153(gp)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	1004c03a 	cmpne	r2,r2,zero
  801398:	1000031e 	bne	r2,zero,8013a8 <tick+0x324>
  80139c:	00800044 	movi	r2,1
  8013a0:	e0bffa15 	stw	r2,-24(fp)
  8013a4:	00000106 	br	8013ac <tick+0x328>
  8013a8:	e03ffa15 	stw	zero,-24(fp)
  8013ac:	e0fffa17 	ldw	r3,-24(fp)
  8013b0:	1805883a 	mov	r2,r3
  8013b4:	d0a75485 	stb	r2,-25262(gp)
      _cg59 = URI_NOTRUNNING;
  8013b8:	d0a73783 	ldbu	r2,-25378(gp)
  8013bc:	d0a73585 	stb	r2,-25386(gp)
      g60 =(g59&&_cg59);
  8013c0:	d0a75483 	ldbu	r2,-25262(gp)
  8013c4:	10803fcc 	andi	r2,r2,255
  8013c8:	1080201c 	xori	r2,r2,128
  8013cc:	10bfe004 	addi	r2,r2,-128
  8013d0:	1005003a 	cmpeq	r2,r2,zero
  8013d4:	1000091e 	bne	r2,zero,8013fc <tick+0x378>
  8013d8:	d0a73583 	ldbu	r2,-25386(gp)
  8013dc:	10803fcc 	andi	r2,r2,255
  8013e0:	1080201c 	xori	r2,r2,128
  8013e4:	10bfe004 	addi	r2,r2,-128
  8013e8:	1005003a 	cmpeq	r2,r2,zero
  8013ec:	1000031e 	bne	r2,zero,8013fc <tick+0x378>
  8013f0:	00800044 	movi	r2,1
  8013f4:	e0bff915 	stw	r2,-28(fp)
  8013f8:	00000106 	br	801400 <tick+0x37c>
  8013fc:	e03ff915 	stw	zero,-28(fp)
  801400:	e0fff917 	ldw	r3,-28(fp)
  801404:	1805883a 	mov	r2,r3
  801408:	d0a75e85 	stb	r2,-25222(gp)
      if(g60){
  80140c:	d0a75e83 	ldbu	r2,-25222(gp)
  801410:	10803fcc 	andi	r2,r2,255
  801414:	1080201c 	xori	r2,r2,128
  801418:	10bfe004 	addi	r2,r2,-128
  80141c:	1005003a 	cmpeq	r2,r2,zero
  801420:	1000021e 	bne	r2,zero,80142c <tick+0x3a8>
         VPace =(VPace||1);
  801424:	00800044 	movi	r2,1
  801428:	d0a77805 	stb	r2,-25120(gp)
      }
      g4 =(PRE_g3);
  80142c:	d0a73c43 	ldbu	r2,-25359(gp)
  801430:	d0a73405 	stb	r2,-25392(gp)
      _cg4 = VSense;
  801434:	d0a75883 	ldbu	r2,-25246(gp)
  801438:	d0a77a45 	stb	r2,-25111(gp)
      g16 =(g4&&(!(_cg4)));
  80143c:	d0a73403 	ldbu	r2,-25392(gp)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	1005003a 	cmpeq	r2,r2,zero
  801450:	1000091e 	bne	r2,zero,801478 <tick+0x3f4>
  801454:	d0a77a43 	ldbu	r2,-25111(gp)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	1080201c 	xori	r2,r2,128
  801460:	10bfe004 	addi	r2,r2,-128
  801464:	1004c03a 	cmpne	r2,r2,zero
  801468:	1000031e 	bne	r2,zero,801478 <tick+0x3f4>
  80146c:	00800044 	movi	r2,1
  801470:	e0bff815 	stw	r2,-32(fp)
  801474:	00000106 	br	80147c <tick+0x3f8>
  801478:	e03ff815 	stw	zero,-32(fp)
  80147c:	e0fff817 	ldw	r3,-32(fp)
  801480:	1805883a 	mov	r2,r3
  801484:	d0a76ec5 	stb	r2,-25157(gp)
      _cg16 = VPace;
  801488:	d0a77803 	ldbu	r2,-25120(gp)
  80148c:	d0a75205 	stb	r2,-25272(gp)
      g3 =(g2||(g16&&(!(_cg16))));
  801490:	d0a75143 	ldbu	r2,-25275(gp)
  801494:	10803fcc 	andi	r2,r2,255
  801498:	1080201c 	xori	r2,r2,128
  80149c:	10bfe004 	addi	r2,r2,-128
  8014a0:	1004c03a 	cmpne	r2,r2,zero
  8014a4:	10000c1e 	bne	r2,zero,8014d8 <tick+0x454>
  8014a8:	d0a76ec3 	ldbu	r2,-25157(gp)
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1080201c 	xori	r2,r2,128
  8014b4:	10bfe004 	addi	r2,r2,-128
  8014b8:	1005003a 	cmpeq	r2,r2,zero
  8014bc:	1000091e 	bne	r2,zero,8014e4 <tick+0x460>
  8014c0:	d0a75203 	ldbu	r2,-25272(gp)
  8014c4:	10803fcc 	andi	r2,r2,255
  8014c8:	1080201c 	xori	r2,r2,128
  8014cc:	10bfe004 	addi	r2,r2,-128
  8014d0:	1004c03a 	cmpne	r2,r2,zero
  8014d4:	1000031e 	bne	r2,zero,8014e4 <tick+0x460>
  8014d8:	00800044 	movi	r2,1
  8014dc:	e0bff715 	stw	r2,-36(fp)
  8014e0:	00000106 	br	8014e8 <tick+0x464>
  8014e4:	e03ff715 	stw	zero,-36(fp)
  8014e8:	e0fff717 	ldw	r3,-36(fp)
  8014ec:	1805883a 	mov	r2,r3
  8014f0:	d0a73745 	stb	r2,-25379(gp)
      g5 =((g16&&_cg16)||(g4&&_cg4));
  8014f4:	d0a76ec3 	ldbu	r2,-25157(gp)
  8014f8:	10803fcc 	andi	r2,r2,255
  8014fc:	1080201c 	xori	r2,r2,128
  801500:	10bfe004 	addi	r2,r2,-128
  801504:	1005003a 	cmpeq	r2,r2,zero
  801508:	1000061e 	bne	r2,zero,801524 <tick+0x4a0>
  80150c:	d0a75203 	ldbu	r2,-25272(gp)
  801510:	10803fcc 	andi	r2,r2,255
  801514:	1080201c 	xori	r2,r2,128
  801518:	10bfe004 	addi	r2,r2,-128
  80151c:	1004c03a 	cmpne	r2,r2,zero
  801520:	10000c1e 	bne	r2,zero,801554 <tick+0x4d0>
  801524:	d0a73403 	ldbu	r2,-25392(gp)
  801528:	10803fcc 	andi	r2,r2,255
  80152c:	1080201c 	xori	r2,r2,128
  801530:	10bfe004 	addi	r2,r2,-128
  801534:	1005003a 	cmpeq	r2,r2,zero
  801538:	1000091e 	bne	r2,zero,801560 <tick+0x4dc>
  80153c:	d0a77a43 	ldbu	r2,-25111(gp)
  801540:	10803fcc 	andi	r2,r2,255
  801544:	1080201c 	xori	r2,r2,128
  801548:	10bfe004 	addi	r2,r2,-128
  80154c:	1005003a 	cmpeq	r2,r2,zero
  801550:	1000031e 	bne	r2,zero,801560 <tick+0x4dc>
  801554:	00800044 	movi	r2,1
  801558:	e0bff615 	stw	r2,-40(fp)
  80155c:	00000106 	br	801564 <tick+0x4e0>
  801560:	e03ff615 	stw	zero,-40(fp)
  801564:	e0fff617 	ldw	r3,-40(fp)
  801568:	1805883a 	mov	r2,r3
  80156c:	d0a75045 	stb	r2,-25279(gp)
      if(g5){
  801570:	d0a75043 	ldbu	r2,-25279(gp)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	1005003a 	cmpeq	r2,r2,zero
  801584:	1000021e 	bne	r2,zero,801590 <tick+0x50c>
         _compsys303_a2_local_LRI_start =(_compsys303_a2_local_LRI_start||1);
  801588:	00800044 	movi	r2,1
  80158c:	d0a770c5 	stb	r2,-25149(gp)
      }
      g12 =(PRE_g11);
  801590:	d0a75d83 	ldbu	r2,-25226(gp)
  801594:	d0a74245 	stb	r2,-25335(gp)
      g12b = g12;
  801598:	d0a74243 	ldbu	r2,-25335(gp)
  80159c:	d0a77845 	stb	r2,-25119(gp)
      if(g12b){
  8015a0:	d0a77843 	ldbu	r2,-25119(gp)
  8015a4:	10803fcc 	andi	r2,r2,255
  8015a8:	1080201c 	xori	r2,r2,128
  8015ac:	10bfe004 	addi	r2,r2,-128
  8015b0:	1005003a 	cmpeq	r2,r2,zero
  8015b4:	1000021e 	bne	r2,zero,8015c0 <tick+0x53c>
         _compsys303_a2_local_LRI_start =(_compsys303_a2_local_LRI_start||1);
  8015b8:	00800044 	movi	r2,1
  8015bc:	d0a770c5 	stb	r2,-25149(gp)
      }
      g38 =(PRE_g37);
  8015c0:	d0a77d43 	ldbu	r2,-25099(gp)
  8015c4:	d0a74ac5 	stb	r2,-25301(gp)
      _cg38 = VRPTO;
  8015c8:	d0a75d43 	ldbu	r2,-25227(gp)
  8015cc:	d0a75bc5 	stb	r2,-25233(gp)
      g39 =(g38&&_cg38);
  8015d0:	d0a74ac3 	ldbu	r2,-25301(gp)
  8015d4:	10803fcc 	andi	r2,r2,255
  8015d8:	1080201c 	xori	r2,r2,128
  8015dc:	10bfe004 	addi	r2,r2,-128
  8015e0:	1005003a 	cmpeq	r2,r2,zero
  8015e4:	1000091e 	bne	r2,zero,80160c <tick+0x588>
  8015e8:	d0a75bc3 	ldbu	r2,-25233(gp)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	1005003a 	cmpeq	r2,r2,zero
  8015fc:	1000031e 	bne	r2,zero,80160c <tick+0x588>
  801600:	00800044 	movi	r2,1
  801604:	e0bff515 	stw	r2,-44(fp)
  801608:	00000106 	br	801610 <tick+0x58c>
  80160c:	e03ff515 	stw	zero,-44(fp)
  801610:	e0fff517 	ldw	r3,-44(fp)
  801614:	1805883a 	mov	r2,r3
  801618:	d0a77885 	stb	r2,-25118(gp)
      if(g39){
  80161c:	d0a77883 	ldbu	r2,-25118(gp)
  801620:	10803fcc 	andi	r2,r2,255
  801624:	1080201c 	xori	r2,r2,128
  801628:	10bfe004 	addi	r2,r2,-128
  80162c:	1005003a 	cmpeq	r2,r2,zero
  801630:	1000021e 	bne	r2,zero,80163c <tick+0x5b8>
         _compsys303_a2_local_VRP_ex =(_compsys303_a2_local_VRP_ex||1);
  801634:	00800044 	movi	r2,1
  801638:	d0a774c5 	stb	r2,-25133(gp)
      }
      g7 =(PRE_g6);
  80163c:	d0a758c3 	ldbu	r2,-25245(gp)
  801640:	d0a75185 	stb	r2,-25274(gp)
      g7b = g7;
  801644:	d0a75183 	ldbu	r2,-25274(gp)
  801648:	d0a74145 	stb	r2,-25339(gp)
      _cg7 = _compsys303_a2_local_VRP_ex;
  80164c:	d0a774c3 	ldbu	r2,-25133(gp)
  801650:	d0a73a85 	stb	r2,-25366(gp)
      g6 =(g5||g12b||(g7b&&(!(_cg7))));
  801654:	d0a75043 	ldbu	r2,-25279(gp)
  801658:	10803fcc 	andi	r2,r2,255
  80165c:	1080201c 	xori	r2,r2,128
  801660:	10bfe004 	addi	r2,r2,-128
  801664:	1004c03a 	cmpne	r2,r2,zero
  801668:	1000121e 	bne	r2,zero,8016b4 <tick+0x630>
  80166c:	d0a77843 	ldbu	r2,-25119(gp)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1080201c 	xori	r2,r2,128
  801678:	10bfe004 	addi	r2,r2,-128
  80167c:	1004c03a 	cmpne	r2,r2,zero
  801680:	10000c1e 	bne	r2,zero,8016b4 <tick+0x630>
  801684:	d0a74143 	ldbu	r2,-25339(gp)
  801688:	10803fcc 	andi	r2,r2,255
  80168c:	1080201c 	xori	r2,r2,128
  801690:	10bfe004 	addi	r2,r2,-128
  801694:	1005003a 	cmpeq	r2,r2,zero
  801698:	1000091e 	bne	r2,zero,8016c0 <tick+0x63c>
  80169c:	d0a73a83 	ldbu	r2,-25366(gp)
  8016a0:	10803fcc 	andi	r2,r2,255
  8016a4:	1080201c 	xori	r2,r2,128
  8016a8:	10bfe004 	addi	r2,r2,-128
  8016ac:	1004c03a 	cmpne	r2,r2,zero
  8016b0:	1000031e 	bne	r2,zero,8016c0 <tick+0x63c>
  8016b4:	00800044 	movi	r2,1
  8016b8:	e0bff415 	stw	r2,-48(fp)
  8016bc:	00000106 	br	8016c4 <tick+0x640>
  8016c0:	e03ff415 	stw	zero,-48(fp)
  8016c4:	e0fff417 	ldw	r3,-48(fp)
  8016c8:	1805883a 	mov	r2,r3
  8016cc:	d0a76945 	stb	r2,-25179(gp)
      g9 =(PRE_g8);
  8016d0:	d0a74703 	ldbu	r2,-25316(gp)
  8016d4:	d0a73985 	stb	r2,-25370(gp)
      _cg9 = VSense;
  8016d8:	d0a75883 	ldbu	r2,-25246(gp)
  8016dc:	d0a76b45 	stb	r2,-25171(gp)
      g13 =(g9&&(!(_cg9)));
  8016e0:	d0a73983 	ldbu	r2,-25370(gp)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	1005003a 	cmpeq	r2,r2,zero
  8016f4:	1000091e 	bne	r2,zero,80171c <tick+0x698>
  8016f8:	d0a76b43 	ldbu	r2,-25171(gp)
  8016fc:	10803fcc 	andi	r2,r2,255
  801700:	1080201c 	xori	r2,r2,128
  801704:	10bfe004 	addi	r2,r2,-128
  801708:	1004c03a 	cmpne	r2,r2,zero
  80170c:	1000031e 	bne	r2,zero,80171c <tick+0x698>
  801710:	00800044 	movi	r2,1
  801714:	e0bff315 	stw	r2,-52(fp)
  801718:	00000106 	br	801720 <tick+0x69c>
  80171c:	e03ff315 	stw	zero,-52(fp)
  801720:	e0fff317 	ldw	r3,-52(fp)
  801724:	1805883a 	mov	r2,r3
  801728:	d0a76605 	stb	r2,-25192(gp)
      _cg13 = VPace;
  80172c:	d0a77803 	ldbu	r2,-25120(gp)
  801730:	d0a76b05 	stb	r2,-25172(gp)
      g10 =((g9&&_cg9)||(g13&&_cg13));
  801734:	d0a73983 	ldbu	r2,-25370(gp)
  801738:	10803fcc 	andi	r2,r2,255
  80173c:	1080201c 	xori	r2,r2,128
  801740:	10bfe004 	addi	r2,r2,-128
  801744:	1005003a 	cmpeq	r2,r2,zero
  801748:	1000061e 	bne	r2,zero,801764 <tick+0x6e0>
  80174c:	d0a76b43 	ldbu	r2,-25171(gp)
  801750:	10803fcc 	andi	r2,r2,255
  801754:	1080201c 	xori	r2,r2,128
  801758:	10bfe004 	addi	r2,r2,-128
  80175c:	1004c03a 	cmpne	r2,r2,zero
  801760:	10000c1e 	bne	r2,zero,801794 <tick+0x710>
  801764:	d0a76603 	ldbu	r2,-25192(gp)
  801768:	10803fcc 	andi	r2,r2,255
  80176c:	1080201c 	xori	r2,r2,128
  801770:	10bfe004 	addi	r2,r2,-128
  801774:	1005003a 	cmpeq	r2,r2,zero
  801778:	1000091e 	bne	r2,zero,8017a0 <tick+0x71c>
  80177c:	d0a76b03 	ldbu	r2,-25172(gp)
  801780:	10803fcc 	andi	r2,r2,255
  801784:	1080201c 	xori	r2,r2,128
  801788:	10bfe004 	addi	r2,r2,-128
  80178c:	1005003a 	cmpeq	r2,r2,zero
  801790:	1000031e 	bne	r2,zero,8017a0 <tick+0x71c>
  801794:	00800044 	movi	r2,1
  801798:	e0bff215 	stw	r2,-56(fp)
  80179c:	00000106 	br	8017a4 <tick+0x720>
  8017a0:	e03ff215 	stw	zero,-56(fp)
  8017a4:	e0fff217 	ldw	r3,-56(fp)
  8017a8:	1805883a 	mov	r2,r3
  8017ac:	d0a77c05 	stb	r2,-25104(gp)
      if(g10){
  8017b0:	d0a77c03 	ldbu	r2,-25104(gp)
  8017b4:	10803fcc 	andi	r2,r2,255
  8017b8:	1080201c 	xori	r2,r2,128
  8017bc:	10bfe004 	addi	r2,r2,-128
  8017c0:	1005003a 	cmpeq	r2,r2,zero
  8017c4:	1000021e 	bne	r2,zero,8017d0 <tick+0x74c>
         _compsys303_a2_local_LRI_stop =(_compsys303_a2_local_LRI_stop||1);
  8017c8:	00800044 	movi	r2,1
  8017cc:	d0a76f85 	stb	r2,-25154(gp)
      }
      g22 =(PRE_g21);
  8017d0:	d0a76e83 	ldbu	r2,-25158(gp)
  8017d4:	d0a77185 	stb	r2,-25146(gp)
      g22b = g22;
  8017d8:	d0a77183 	ldbu	r2,-25146(gp)
  8017dc:	d0a74d85 	stb	r2,-25290(gp)
      _cg22 = _compsys303_a2_local_LRI_stop;
  8017e0:	d0a76f83 	ldbu	r2,-25154(gp)
  8017e4:	d0a75fc5 	stb	r2,-25217(gp)
      g23 =(g22b&&(!(_cg22)));
  8017e8:	d0a74d83 	ldbu	r2,-25290(gp)
  8017ec:	10803fcc 	andi	r2,r2,255
  8017f0:	1080201c 	xori	r2,r2,128
  8017f4:	10bfe004 	addi	r2,r2,-128
  8017f8:	1005003a 	cmpeq	r2,r2,zero
  8017fc:	1000091e 	bne	r2,zero,801824 <tick+0x7a0>
  801800:	d0a75fc3 	ldbu	r2,-25217(gp)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	1080201c 	xori	r2,r2,128
  80180c:	10bfe004 	addi	r2,r2,-128
  801810:	1004c03a 	cmpne	r2,r2,zero
  801814:	1000031e 	bne	r2,zero,801824 <tick+0x7a0>
  801818:	00800044 	movi	r2,1
  80181c:	e0bff115 	stw	r2,-60(fp)
  801820:	00000106 	br	801828 <tick+0x7a4>
  801824:	e03ff115 	stw	zero,-60(fp)
  801828:	e0fff117 	ldw	r3,-60(fp)
  80182c:	1805883a 	mov	r2,r3
  801830:	d0a75585 	stb	r2,-25258(gp)
      _cg23 = LRITO;
  801834:	d0a73a43 	ldbu	r2,-25367(gp)
  801838:	d0a77485 	stb	r2,-25134(gp)
      g24 =(g23&&_cg23);
  80183c:	d0a75583 	ldbu	r2,-25258(gp)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	1005003a 	cmpeq	r2,r2,zero
  801850:	1000091e 	bne	r2,zero,801878 <tick+0x7f4>
  801854:	d0a77483 	ldbu	r2,-25134(gp)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	1005003a 	cmpeq	r2,r2,zero
  801868:	1000031e 	bne	r2,zero,801878 <tick+0x7f4>
  80186c:	00800044 	movi	r2,1
  801870:	e0bff015 	stw	r2,-64(fp)
  801874:	00000106 	br	80187c <tick+0x7f8>
  801878:	e03ff015 	stw	zero,-64(fp)
  80187c:	e0fff017 	ldw	r3,-64(fp)
  801880:	1805883a 	mov	r2,r3
  801884:	d0a77a05 	stb	r2,-25112(gp)
      if(g24){
  801888:	d0a77a03 	ldbu	r2,-25112(gp)
  80188c:	10803fcc 	andi	r2,r2,255
  801890:	1080201c 	xori	r2,r2,128
  801894:	10bfe004 	addi	r2,r2,-128
  801898:	1005003a 	cmpeq	r2,r2,zero
  80189c:	1000021e 	bne	r2,zero,8018a8 <tick+0x824>
         _compsys303_a2_local_LRI_ex =(_compsys303_a2_local_LRI_ex||1);
  8018a0:	00800044 	movi	r2,1
  8018a4:	d0a73e05 	stb	r2,-25352(gp)
      }
      g14 =(g13&&(!(_cg13)));
  8018a8:	d0a76603 	ldbu	r2,-25192(gp)
  8018ac:	10803fcc 	andi	r2,r2,255
  8018b0:	1080201c 	xori	r2,r2,128
  8018b4:	10bfe004 	addi	r2,r2,-128
  8018b8:	1005003a 	cmpeq	r2,r2,zero
  8018bc:	1000091e 	bne	r2,zero,8018e4 <tick+0x860>
  8018c0:	d0a76b03 	ldbu	r2,-25172(gp)
  8018c4:	10803fcc 	andi	r2,r2,255
  8018c8:	1080201c 	xori	r2,r2,128
  8018cc:	10bfe004 	addi	r2,r2,-128
  8018d0:	1004c03a 	cmpne	r2,r2,zero
  8018d4:	1000031e 	bne	r2,zero,8018e4 <tick+0x860>
  8018d8:	00800044 	movi	r2,1
  8018dc:	e0bfef15 	stw	r2,-68(fp)
  8018e0:	00000106 	br	8018e8 <tick+0x864>
  8018e4:	e03fef15 	stw	zero,-68(fp)
  8018e8:	e0ffef17 	ldw	r3,-68(fp)
  8018ec:	1805883a 	mov	r2,r3
  8018f0:	d0a755c5 	stb	r2,-25257(gp)
      _cg14 = _compsys303_a2_local_LRI_ex;
  8018f4:	d0a73e03 	ldbu	r2,-25352(gp)
  8018f8:	d0a74f45 	stb	r2,-25283(gp)
      g8 =((g7b&&_cg7)||(g14&&(!(_cg14))));
  8018fc:	d0a74143 	ldbu	r2,-25339(gp)
  801900:	10803fcc 	andi	r2,r2,255
  801904:	1080201c 	xori	r2,r2,128
  801908:	10bfe004 	addi	r2,r2,-128
  80190c:	1005003a 	cmpeq	r2,r2,zero
  801910:	1000061e 	bne	r2,zero,80192c <tick+0x8a8>
  801914:	d0a73a83 	ldbu	r2,-25366(gp)
  801918:	10803fcc 	andi	r2,r2,255
  80191c:	1080201c 	xori	r2,r2,128
  801920:	10bfe004 	addi	r2,r2,-128
  801924:	1004c03a 	cmpne	r2,r2,zero
  801928:	10000c1e 	bne	r2,zero,80195c <tick+0x8d8>
  80192c:	d0a755c3 	ldbu	r2,-25257(gp)
  801930:	10803fcc 	andi	r2,r2,255
  801934:	1080201c 	xori	r2,r2,128
  801938:	10bfe004 	addi	r2,r2,-128
  80193c:	1005003a 	cmpeq	r2,r2,zero
  801940:	1000091e 	bne	r2,zero,801968 <tick+0x8e4>
  801944:	d0a74f43 	ldbu	r2,-25283(gp)
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1080201c 	xori	r2,r2,128
  801950:	10bfe004 	addi	r2,r2,-128
  801954:	1004c03a 	cmpne	r2,r2,zero
  801958:	1000031e 	bne	r2,zero,801968 <tick+0x8e4>
  80195c:	00800044 	movi	r2,1
  801960:	e0bfee15 	stw	r2,-72(fp)
  801964:	00000106 	br	80196c <tick+0x8e8>
  801968:	e03fee15 	stw	zero,-72(fp)
  80196c:	e0ffee17 	ldw	r3,-72(fp)
  801970:	1805883a 	mov	r2,r3
  801974:	d0a766c5 	stb	r2,-25189(gp)
      g15 =(g14&&_cg14);
  801978:	d0a755c3 	ldbu	r2,-25257(gp)
  80197c:	10803fcc 	andi	r2,r2,255
  801980:	1080201c 	xori	r2,r2,128
  801984:	10bfe004 	addi	r2,r2,-128
  801988:	1005003a 	cmpeq	r2,r2,zero
  80198c:	1000091e 	bne	r2,zero,8019b4 <tick+0x930>
  801990:	d0a74f43 	ldbu	r2,-25283(gp)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	1005003a 	cmpeq	r2,r2,zero
  8019a4:	1000031e 	bne	r2,zero,8019b4 <tick+0x930>
  8019a8:	00800044 	movi	r2,1
  8019ac:	e0bfed15 	stw	r2,-76(fp)
  8019b0:	00000106 	br	8019b8 <tick+0x934>
  8019b4:	e03fed15 	stw	zero,-76(fp)
  8019b8:	e0ffed17 	ldw	r3,-76(fp)
  8019bc:	1805883a 	mov	r2,r3
  8019c0:	d0a75c05 	stb	r2,-25232(gp)
      if(g15){
  8019c4:	d0a75c03 	ldbu	r2,-25232(gp)
  8019c8:	10803fcc 	andi	r2,r2,255
  8019cc:	1080201c 	xori	r2,r2,128
  8019d0:	10bfe004 	addi	r2,r2,-128
  8019d4:	1005003a 	cmpeq	r2,r2,zero
  8019d8:	1000021e 	bne	r2,zero,8019e4 <tick+0x960>
         VPace =(VPace||1);
  8019dc:	00800044 	movi	r2,1
  8019e0:	d0a77805 	stb	r2,-25120(gp)
      }
      g11 =(g10||g15);
  8019e4:	d0a77c03 	ldbu	r2,-25104(gp)
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1080201c 	xori	r2,r2,128
  8019f0:	10bfe004 	addi	r2,r2,-128
  8019f4:	1004c03a 	cmpne	r2,r2,zero
  8019f8:	1000061e 	bne	r2,zero,801a14 <tick+0x990>
  8019fc:	d0a75c03 	ldbu	r2,-25232(gp)
  801a00:	10803fcc 	andi	r2,r2,255
  801a04:	1080201c 	xori	r2,r2,128
  801a08:	10bfe004 	addi	r2,r2,-128
  801a0c:	1005003a 	cmpeq	r2,r2,zero
  801a10:	1000031e 	bne	r2,zero,801a20 <tick+0x99c>
  801a14:	00800044 	movi	r2,1
  801a18:	e0bfec15 	stw	r2,-80(fp)
  801a1c:	00000106 	br	801a24 <tick+0x9a0>
  801a20:	e03fec15 	stw	zero,-80(fp)
  801a24:	e0ffec17 	ldw	r3,-80(fp)
  801a28:	1805883a 	mov	r2,r3
  801a2c:	d0a77105 	stb	r2,-25148(gp)
      g18 = g1;
  801a30:	d0a74003 	ldbu	r2,-25344(gp)
  801a34:	d0a74805 	stb	r2,-25312(gp)
      g20 =(PRE_g19);
  801a38:	d0a75f03 	ldbu	r2,-25220(gp)
  801a3c:	d0a75e05 	stb	r2,-25224(gp)
      g20b = g20;
  801a40:	d0a75e03 	ldbu	r2,-25224(gp)
  801a44:	d0a773c5 	stb	r2,-25137(gp)
      _cg20 = _compsys303_a2_local_LRI_start;
  801a48:	d0a770c3 	ldbu	r2,-25149(gp)
  801a4c:	d0a74c85 	stb	r2,-25294(gp)
      g19 =(g18||g24||(g20b&&(!(_cg20)))||(g22b&&_cg22));
  801a50:	d0a74803 	ldbu	r2,-25312(gp)
  801a54:	10803fcc 	andi	r2,r2,255
  801a58:	1080201c 	xori	r2,r2,128
  801a5c:	10bfe004 	addi	r2,r2,-128
  801a60:	1004c03a 	cmpne	r2,r2,zero
  801a64:	10001e1e 	bne	r2,zero,801ae0 <tick+0xa5c>
  801a68:	d0a77a03 	ldbu	r2,-25112(gp)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	1080201c 	xori	r2,r2,128
  801a74:	10bfe004 	addi	r2,r2,-128
  801a78:	1004c03a 	cmpne	r2,r2,zero
  801a7c:	1000181e 	bne	r2,zero,801ae0 <tick+0xa5c>
  801a80:	d0a773c3 	ldbu	r2,-25137(gp)
  801a84:	10803fcc 	andi	r2,r2,255
  801a88:	1080201c 	xori	r2,r2,128
  801a8c:	10bfe004 	addi	r2,r2,-128
  801a90:	1005003a 	cmpeq	r2,r2,zero
  801a94:	1000061e 	bne	r2,zero,801ab0 <tick+0xa2c>
  801a98:	d0a74c83 	ldbu	r2,-25294(gp)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	1005003a 	cmpeq	r2,r2,zero
  801aac:	10000c1e 	bne	r2,zero,801ae0 <tick+0xa5c>
  801ab0:	d0a74d83 	ldbu	r2,-25290(gp)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	1005003a 	cmpeq	r2,r2,zero
  801ac4:	1000091e 	bne	r2,zero,801aec <tick+0xa68>
  801ac8:	d0a75fc3 	ldbu	r2,-25217(gp)
  801acc:	10803fcc 	andi	r2,r2,255
  801ad0:	1080201c 	xori	r2,r2,128
  801ad4:	10bfe004 	addi	r2,r2,-128
  801ad8:	1005003a 	cmpeq	r2,r2,zero
  801adc:	1000031e 	bne	r2,zero,801aec <tick+0xa68>
  801ae0:	00800044 	movi	r2,1
  801ae4:	e0bfeb15 	stw	r2,-84(fp)
  801ae8:	00000106 	br	801af0 <tick+0xa6c>
  801aec:	e03feb15 	stw	zero,-84(fp)
  801af0:	e0ffeb17 	ldw	r3,-84(fp)
  801af4:	1805883a 	mov	r2,r3
  801af8:	d0a73485 	stb	r2,-25390(gp)
      g21 =((g23&&(!(_cg23)))||(g20b&&_cg20));
  801afc:	d0a75583 	ldbu	r2,-25258(gp)
  801b00:	10803fcc 	andi	r2,r2,255
  801b04:	1080201c 	xori	r2,r2,128
  801b08:	10bfe004 	addi	r2,r2,-128
  801b0c:	1005003a 	cmpeq	r2,r2,zero
  801b10:	1000061e 	bne	r2,zero,801b2c <tick+0xaa8>
  801b14:	d0a77483 	ldbu	r2,-25134(gp)
  801b18:	10803fcc 	andi	r2,r2,255
  801b1c:	1080201c 	xori	r2,r2,128
  801b20:	10bfe004 	addi	r2,r2,-128
  801b24:	1005003a 	cmpeq	r2,r2,zero
  801b28:	10000c1e 	bne	r2,zero,801b5c <tick+0xad8>
  801b2c:	d0a773c3 	ldbu	r2,-25137(gp)
  801b30:	10803fcc 	andi	r2,r2,255
  801b34:	1080201c 	xori	r2,r2,128
  801b38:	10bfe004 	addi	r2,r2,-128
  801b3c:	1005003a 	cmpeq	r2,r2,zero
  801b40:	1000091e 	bne	r2,zero,801b68 <tick+0xae4>
  801b44:	d0a74c83 	ldbu	r2,-25294(gp)
  801b48:	10803fcc 	andi	r2,r2,255
  801b4c:	1080201c 	xori	r2,r2,128
  801b50:	10bfe004 	addi	r2,r2,-128
  801b54:	1005003a 	cmpeq	r2,r2,zero
  801b58:	1000031e 	bne	r2,zero,801b68 <tick+0xae4>
  801b5c:	00800044 	movi	r2,1
  801b60:	e0bfea15 	stw	r2,-88(fp)
  801b64:	00000106 	br	801b6c <tick+0xae8>
  801b68:	e03fea15 	stw	zero,-88(fp)
  801b6c:	e0ffea17 	ldw	r3,-88(fp)
  801b70:	1805883a 	mov	r2,r3
  801b74:	d0a74e45 	stb	r2,-25287(gp)
      g26 = g1;
  801b78:	d0a74003 	ldbu	r2,-25344(gp)
  801b7c:	d0a77d05 	stb	r2,-25100(gp)
      g28 =(PRE_g27);
  801b80:	d0a73843 	ldbu	r2,-25375(gp)
  801b84:	d0a771c5 	stb	r2,-25145(gp)
      _cg28 = VSense;
  801b88:	d0a75883 	ldbu	r2,-25246(gp)
  801b8c:	d0a74dc5 	stb	r2,-25289(gp)
      g32 =(g28&&(!(_cg28)));
  801b90:	d0a771c3 	ldbu	r2,-25145(gp)
  801b94:	10803fcc 	andi	r2,r2,255
  801b98:	1080201c 	xori	r2,r2,128
  801b9c:	10bfe004 	addi	r2,r2,-128
  801ba0:	1005003a 	cmpeq	r2,r2,zero
  801ba4:	1000091e 	bne	r2,zero,801bcc <tick+0xb48>
  801ba8:	d0a74dc3 	ldbu	r2,-25289(gp)
  801bac:	10803fcc 	andi	r2,r2,255
  801bb0:	1080201c 	xori	r2,r2,128
  801bb4:	10bfe004 	addi	r2,r2,-128
  801bb8:	1004c03a 	cmpne	r2,r2,zero
  801bbc:	1000031e 	bne	r2,zero,801bcc <tick+0xb48>
  801bc0:	00800044 	movi	r2,1
  801bc4:	e0bfe915 	stw	r2,-92(fp)
  801bc8:	00000106 	br	801bd0 <tick+0xb4c>
  801bcc:	e03fe915 	stw	zero,-92(fp)
  801bd0:	e0ffe917 	ldw	r3,-92(fp)
  801bd4:	1805883a 	mov	r2,r3
  801bd8:	d0a77345 	stb	r2,-25139(gp)
      _cg32 = VPace;
  801bdc:	d0a77803 	ldbu	r2,-25120(gp)
  801be0:	d0a77b05 	stb	r2,-25108(gp)
      g31 =(PRE_g30);
  801be4:	d0a77703 	ldbu	r2,-25124(gp)
  801be8:	d0a74485 	stb	r2,-25326(gp)
      g31b = g31;
  801bec:	d0a74483 	ldbu	r2,-25326(gp)
  801bf0:	d0a737c5 	stb	r2,-25377(gp)
      _cg31 = _compsys303_a2_local_VRP_ex;
  801bf4:	d0a774c3 	ldbu	r2,-25133(gp)
  801bf8:	d0a77bc5 	stb	r2,-25105(gp)
      g27 =(g26||(g32&&(!(_cg32)))||(g31b&&_cg31));
  801bfc:	d0a77d03 	ldbu	r2,-25100(gp)
  801c00:	10803fcc 	andi	r2,r2,255
  801c04:	1080201c 	xori	r2,r2,128
  801c08:	10bfe004 	addi	r2,r2,-128
  801c0c:	1004c03a 	cmpne	r2,r2,zero
  801c10:	1000181e 	bne	r2,zero,801c74 <tick+0xbf0>
  801c14:	d0a77343 	ldbu	r2,-25139(gp)
  801c18:	10803fcc 	andi	r2,r2,255
  801c1c:	1080201c 	xori	r2,r2,128
  801c20:	10bfe004 	addi	r2,r2,-128
  801c24:	1005003a 	cmpeq	r2,r2,zero
  801c28:	1000061e 	bne	r2,zero,801c44 <tick+0xbc0>
  801c2c:	d0a77b03 	ldbu	r2,-25108(gp)
  801c30:	10803fcc 	andi	r2,r2,255
  801c34:	1080201c 	xori	r2,r2,128
  801c38:	10bfe004 	addi	r2,r2,-128
  801c3c:	1005003a 	cmpeq	r2,r2,zero
  801c40:	10000c1e 	bne	r2,zero,801c74 <tick+0xbf0>
  801c44:	d0a737c3 	ldbu	r2,-25377(gp)
  801c48:	10803fcc 	andi	r2,r2,255
  801c4c:	1080201c 	xori	r2,r2,128
  801c50:	10bfe004 	addi	r2,r2,-128
  801c54:	1005003a 	cmpeq	r2,r2,zero
  801c58:	1000091e 	bne	r2,zero,801c80 <tick+0xbfc>
  801c5c:	d0a77bc3 	ldbu	r2,-25105(gp)
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1080201c 	xori	r2,r2,128
  801c68:	10bfe004 	addi	r2,r2,-128
  801c6c:	1005003a 	cmpeq	r2,r2,zero
  801c70:	1000031e 	bne	r2,zero,801c80 <tick+0xbfc>
  801c74:	00800044 	movi	r2,1
  801c78:	e0bfe815 	stw	r2,-96(fp)
  801c7c:	00000106 	br	801c84 <tick+0xc00>
  801c80:	e03fe815 	stw	zero,-96(fp)
  801c84:	e0ffe817 	ldw	r3,-96(fp)
  801c88:	1805883a 	mov	r2,r3
  801c8c:	d0a735c5 	stb	r2,-25385(gp)
      g29 =((g28&&_cg28)||(g32&&_cg32));
  801c90:	d0a771c3 	ldbu	r2,-25145(gp)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	1080201c 	xori	r2,r2,128
  801c9c:	10bfe004 	addi	r2,r2,-128
  801ca0:	1005003a 	cmpeq	r2,r2,zero
  801ca4:	1000061e 	bne	r2,zero,801cc0 <tick+0xc3c>
  801ca8:	d0a74dc3 	ldbu	r2,-25289(gp)
  801cac:	10803fcc 	andi	r2,r2,255
  801cb0:	1080201c 	xori	r2,r2,128
  801cb4:	10bfe004 	addi	r2,r2,-128
  801cb8:	1004c03a 	cmpne	r2,r2,zero
  801cbc:	10000c1e 	bne	r2,zero,801cf0 <tick+0xc6c>
  801cc0:	d0a77343 	ldbu	r2,-25139(gp)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	1005003a 	cmpeq	r2,r2,zero
  801cd4:	1000091e 	bne	r2,zero,801cfc <tick+0xc78>
  801cd8:	d0a77b03 	ldbu	r2,-25108(gp)
  801cdc:	10803fcc 	andi	r2,r2,255
  801ce0:	1080201c 	xori	r2,r2,128
  801ce4:	10bfe004 	addi	r2,r2,-128
  801ce8:	1005003a 	cmpeq	r2,r2,zero
  801cec:	1000031e 	bne	r2,zero,801cfc <tick+0xc78>
  801cf0:	00800044 	movi	r2,1
  801cf4:	e0bfe715 	stw	r2,-100(fp)
  801cf8:	00000106 	br	801d00 <tick+0xc7c>
  801cfc:	e03fe715 	stw	zero,-100(fp)
  801d00:	e0ffe717 	ldw	r3,-100(fp)
  801d04:	1805883a 	mov	r2,r3
  801d08:	d0a77985 	stb	r2,-25114(gp)
      if(g29){
  801d0c:	d0a77983 	ldbu	r2,-25114(gp)
  801d10:	10803fcc 	andi	r2,r2,255
  801d14:	1080201c 	xori	r2,r2,128
  801d18:	10bfe004 	addi	r2,r2,-128
  801d1c:	1005003a 	cmpeq	r2,r2,zero
  801d20:	1000021e 	bne	r2,zero,801d2c <tick+0xca8>
         _compsys303_a2_local_VRP_start =(_compsys303_a2_local_VRP_start||1);
  801d24:	00800044 	movi	r2,1
  801d28:	d0a77545 	stb	r2,-25131(gp)
      }
      g30 =(g29||(g31b&&(!(_cg31))));
  801d2c:	d0a77983 	ldbu	r2,-25114(gp)
  801d30:	10803fcc 	andi	r2,r2,255
  801d34:	1080201c 	xori	r2,r2,128
  801d38:	10bfe004 	addi	r2,r2,-128
  801d3c:	1004c03a 	cmpne	r2,r2,zero
  801d40:	10000c1e 	bne	r2,zero,801d74 <tick+0xcf0>
  801d44:	d0a737c3 	ldbu	r2,-25377(gp)
  801d48:	10803fcc 	andi	r2,r2,255
  801d4c:	1080201c 	xori	r2,r2,128
  801d50:	10bfe004 	addi	r2,r2,-128
  801d54:	1005003a 	cmpeq	r2,r2,zero
  801d58:	1000091e 	bne	r2,zero,801d80 <tick+0xcfc>
  801d5c:	d0a77bc3 	ldbu	r2,-25105(gp)
  801d60:	10803fcc 	andi	r2,r2,255
  801d64:	1080201c 	xori	r2,r2,128
  801d68:	10bfe004 	addi	r2,r2,-128
  801d6c:	1004c03a 	cmpne	r2,r2,zero
  801d70:	1000031e 	bne	r2,zero,801d80 <tick+0xcfc>
  801d74:	00800044 	movi	r2,1
  801d78:	e0bfe615 	stw	r2,-104(fp)
  801d7c:	00000106 	br	801d84 <tick+0xd00>
  801d80:	e03fe615 	stw	zero,-104(fp)
  801d84:	e0ffe617 	ldw	r3,-104(fp)
  801d88:	1805883a 	mov	r2,r3
  801d8c:	d0a76e45 	stb	r2,-25159(gp)
      g34 = g1;
  801d90:	d0a74003 	ldbu	r2,-25344(gp)
  801d94:	d0a75005 	stb	r2,-25280(gp)
      g36 =(PRE_g35);
  801d98:	d0a749c3 	ldbu	r2,-25305(gp)
  801d9c:	d0a76185 	stb	r2,-25210(gp)
      g36b = g36;
  801da0:	d0a76183 	ldbu	r2,-25210(gp)
  801da4:	d0a768c5 	stb	r2,-25181(gp)
      _cg36 = _compsys303_a2_local_VRP_start;
  801da8:	d0a77543 	ldbu	r2,-25131(gp)
  801dac:	d0a77b85 	stb	r2,-25106(gp)
      g35 =((g36b&&(!(_cg36)))||g34||g39);
  801db0:	d0a768c3 	ldbu	r2,-25181(gp)
  801db4:	10803fcc 	andi	r2,r2,255
  801db8:	1080201c 	xori	r2,r2,128
  801dbc:	10bfe004 	addi	r2,r2,-128
  801dc0:	1005003a 	cmpeq	r2,r2,zero
  801dc4:	1000061e 	bne	r2,zero,801de0 <tick+0xd5c>
  801dc8:	d0a77b83 	ldbu	r2,-25106(gp)
  801dcc:	10803fcc 	andi	r2,r2,255
  801dd0:	1080201c 	xori	r2,r2,128
  801dd4:	10bfe004 	addi	r2,r2,-128
  801dd8:	1005003a 	cmpeq	r2,r2,zero
  801ddc:	10000c1e 	bne	r2,zero,801e10 <tick+0xd8c>
  801de0:	d0a75003 	ldbu	r2,-25280(gp)
  801de4:	10803fcc 	andi	r2,r2,255
  801de8:	1080201c 	xori	r2,r2,128
  801dec:	10bfe004 	addi	r2,r2,-128
  801df0:	1004c03a 	cmpne	r2,r2,zero
  801df4:	1000061e 	bne	r2,zero,801e10 <tick+0xd8c>
  801df8:	d0a77883 	ldbu	r2,-25118(gp)
  801dfc:	10803fcc 	andi	r2,r2,255
  801e00:	1080201c 	xori	r2,r2,128
  801e04:	10bfe004 	addi	r2,r2,-128
  801e08:	1005003a 	cmpeq	r2,r2,zero
  801e0c:	1000031e 	bne	r2,zero,801e1c <tick+0xd98>
  801e10:	00800044 	movi	r2,1
  801e14:	e0bfe515 	stw	r2,-108(fp)
  801e18:	00000106 	br	801e20 <tick+0xd9c>
  801e1c:	e03fe515 	stw	zero,-108(fp)
  801e20:	e0ffe517 	ldw	r3,-108(fp)
  801e24:	1805883a 	mov	r2,r3
  801e28:	d0a75b85 	stb	r2,-25234(gp)
      g37 =((g38&&(!(_cg38)))||(g36b&&_cg36));
  801e2c:	d0a74ac3 	ldbu	r2,-25301(gp)
  801e30:	10803fcc 	andi	r2,r2,255
  801e34:	1080201c 	xori	r2,r2,128
  801e38:	10bfe004 	addi	r2,r2,-128
  801e3c:	1005003a 	cmpeq	r2,r2,zero
  801e40:	1000061e 	bne	r2,zero,801e5c <tick+0xdd8>
  801e44:	d0a75bc3 	ldbu	r2,-25233(gp)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	1005003a 	cmpeq	r2,r2,zero
  801e58:	10000c1e 	bne	r2,zero,801e8c <tick+0xe08>
  801e5c:	d0a768c3 	ldbu	r2,-25181(gp)
  801e60:	10803fcc 	andi	r2,r2,255
  801e64:	1080201c 	xori	r2,r2,128
  801e68:	10bfe004 	addi	r2,r2,-128
  801e6c:	1005003a 	cmpeq	r2,r2,zero
  801e70:	1000091e 	bne	r2,zero,801e98 <tick+0xe14>
  801e74:	d0a77b83 	ldbu	r2,-25106(gp)
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	1005003a 	cmpeq	r2,r2,zero
  801e88:	1000031e 	bne	r2,zero,801e98 <tick+0xe14>
  801e8c:	00800044 	movi	r2,1
  801e90:	e0bfe415 	stw	r2,-112(fp)
  801e94:	00000106 	br	801e9c <tick+0xe18>
  801e98:	e03fe415 	stw	zero,-112(fp)
  801e9c:	e0ffe417 	ldw	r3,-112(fp)
  801ea0:	1805883a 	mov	r2,r3
  801ea4:	d0a74505 	stb	r2,-25324(gp)
      g41 = g1;
  801ea8:	d0a74003 	ldbu	r2,-25344(gp)
  801eac:	d0a745c5 	stb	r2,-25321(gp)
      g102 =(PRE_g101);
  801eb0:	d0a75283 	ldbu	r2,-25270(gp)
  801eb4:	d0a73c85 	stb	r2,-25358(gp)
      _cg102 = ASense;
  801eb8:	d0a74883 	ldbu	r2,-25310(gp)
  801ebc:	d0a77c45 	stb	r2,-25103(gp)
      g108 =(g102&&(!(_cg102)));
  801ec0:	d0a73c83 	ldbu	r2,-25358(gp)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	1005003a 	cmpeq	r2,r2,zero
  801ed4:	1000091e 	bne	r2,zero,801efc <tick+0xe78>
  801ed8:	d0a77c43 	ldbu	r2,-25103(gp)
  801edc:	10803fcc 	andi	r2,r2,255
  801ee0:	1080201c 	xori	r2,r2,128
  801ee4:	10bfe004 	addi	r2,r2,-128
  801ee8:	1004c03a 	cmpne	r2,r2,zero
  801eec:	1000031e 	bne	r2,zero,801efc <tick+0xe78>
  801ef0:	00800044 	movi	r2,1
  801ef4:	e0bfe315 	stw	r2,-116(fp)
  801ef8:	00000106 	br	801f00 <tick+0xe7c>
  801efc:	e03fe315 	stw	zero,-116(fp)
  801f00:	e0ffe317 	ldw	r3,-116(fp)
  801f04:	1805883a 	mov	r2,r3
  801f08:	d0a73445 	stb	r2,-25391(gp)
      _cg108 = APace;
  801f0c:	d0a73383 	ldbu	r2,-25394(gp)
  801f10:	d0a76ac5 	stb	r2,-25173(gp)
      g103 =((g102&&_cg102)||(g108&&_cg108));
  801f14:	d0a73c83 	ldbu	r2,-25358(gp)
  801f18:	10803fcc 	andi	r2,r2,255
  801f1c:	1080201c 	xori	r2,r2,128
  801f20:	10bfe004 	addi	r2,r2,-128
  801f24:	1005003a 	cmpeq	r2,r2,zero
  801f28:	1000061e 	bne	r2,zero,801f44 <tick+0xec0>
  801f2c:	d0a77c43 	ldbu	r2,-25103(gp)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	1004c03a 	cmpne	r2,r2,zero
  801f40:	10000c1e 	bne	r2,zero,801f74 <tick+0xef0>
  801f44:	d0a73443 	ldbu	r2,-25391(gp)
  801f48:	10803fcc 	andi	r2,r2,255
  801f4c:	1080201c 	xori	r2,r2,128
  801f50:	10bfe004 	addi	r2,r2,-128
  801f54:	1005003a 	cmpeq	r2,r2,zero
  801f58:	1000091e 	bne	r2,zero,801f80 <tick+0xefc>
  801f5c:	d0a76ac3 	ldbu	r2,-25173(gp)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	1005003a 	cmpeq	r2,r2,zero
  801f70:	1000031e 	bne	r2,zero,801f80 <tick+0xefc>
  801f74:	00800044 	movi	r2,1
  801f78:	e0bfe215 	stw	r2,-120(fp)
  801f7c:	00000106 	br	801f84 <tick+0xf00>
  801f80:	e03fe215 	stw	zero,-120(fp)
  801f84:	e0ffe217 	ldw	r3,-120(fp)
  801f88:	1805883a 	mov	r2,r3
  801f8c:	d0a73805 	stb	r2,-25376(gp)
      if(g103){
  801f90:	d0a73803 	ldbu	r2,-25376(gp)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	1005003a 	cmpeq	r2,r2,zero
  801fa4:	1000021e 	bne	r2,zero,801fb0 <tick+0xf2c>
         _compsys303_a2_local_AEI_stop =(_compsys303_a2_local_AEI_stop||1);
  801fa8:	00800044 	movi	r2,1
  801fac:	d0a75245 	stb	r2,-25271(gp)
      }
      g91 =(PRE_g90);
  801fb0:	d0a73643 	ldbu	r2,-25383(gp)
  801fb4:	d0a73305 	stb	r2,-25396(gp)
      g91b = g91;
  801fb8:	d0a73303 	ldbu	r2,-25396(gp)
  801fbc:	d0a76845 	stb	r2,-25183(gp)
      _cg91 = _compsys303_a2_local_AEI_stop;
  801fc0:	d0a75243 	ldbu	r2,-25271(gp)
  801fc4:	d0a76dc5 	stb	r2,-25161(gp)
      g92 =(g91b&&(!(_cg91)));
  801fc8:	d0a76843 	ldbu	r2,-25183(gp)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	1005003a 	cmpeq	r2,r2,zero
  801fdc:	1000091e 	bne	r2,zero,802004 <tick+0xf80>
  801fe0:	d0a76dc3 	ldbu	r2,-25161(gp)
  801fe4:	10803fcc 	andi	r2,r2,255
  801fe8:	1080201c 	xori	r2,r2,128
  801fec:	10bfe004 	addi	r2,r2,-128
  801ff0:	1004c03a 	cmpne	r2,r2,zero
  801ff4:	1000031e 	bne	r2,zero,802004 <tick+0xf80>
  801ff8:	00800044 	movi	r2,1
  801ffc:	e0bfe115 	stw	r2,-124(fp)
  802000:	00000106 	br	802008 <tick+0xf84>
  802004:	e03fe115 	stw	zero,-124(fp)
  802008:	e0ffe117 	ldw	r3,-124(fp)
  80200c:	1805883a 	mov	r2,r3
  802010:	d0a73fc5 	stb	r2,-25345(gp)
      _cg92 = AEITO;
  802014:	d0a77c83 	ldbu	r2,-25102(gp)
  802018:	d0a775c5 	stb	r2,-25129(gp)
      g93 =(g92&&_cg92);
  80201c:	d0a73fc3 	ldbu	r2,-25345(gp)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	1005003a 	cmpeq	r2,r2,zero
  802030:	1000091e 	bne	r2,zero,802058 <tick+0xfd4>
  802034:	d0a775c3 	ldbu	r2,-25129(gp)
  802038:	10803fcc 	andi	r2,r2,255
  80203c:	1080201c 	xori	r2,r2,128
  802040:	10bfe004 	addi	r2,r2,-128
  802044:	1005003a 	cmpeq	r2,r2,zero
  802048:	1000031e 	bne	r2,zero,802058 <tick+0xfd4>
  80204c:	00800044 	movi	r2,1
  802050:	e0bfe015 	stw	r2,-128(fp)
  802054:	00000106 	br	80205c <tick+0xfd8>
  802058:	e03fe015 	stw	zero,-128(fp)
  80205c:	e0ffe017 	ldw	r3,-128(fp)
  802060:	1805883a 	mov	r2,r3
  802064:	d0a75f85 	stb	r2,-25218(gp)
      if(g93){
  802068:	d0a75f83 	ldbu	r2,-25218(gp)
  80206c:	10803fcc 	andi	r2,r2,255
  802070:	1080201c 	xori	r2,r2,128
  802074:	10bfe004 	addi	r2,r2,-128
  802078:	1005003a 	cmpeq	r2,r2,zero
  80207c:	1000021e 	bne	r2,zero,802088 <tick+0x1004>
         _compsys303_a2_local_AEI_ex =(_compsys303_a2_local_AEI_ex||1);
  802080:	00800044 	movi	r2,1
  802084:	d0a73c05 	stb	r2,-25360(gp)
      }
      g109 =(g108&&(!(_cg108)));
  802088:	d0a73443 	ldbu	r2,-25391(gp)
  80208c:	10803fcc 	andi	r2,r2,255
  802090:	1080201c 	xori	r2,r2,128
  802094:	10bfe004 	addi	r2,r2,-128
  802098:	1005003a 	cmpeq	r2,r2,zero
  80209c:	1000091e 	bne	r2,zero,8020c4 <tick+0x1040>
  8020a0:	d0a76ac3 	ldbu	r2,-25173(gp)
  8020a4:	10803fcc 	andi	r2,r2,255
  8020a8:	1080201c 	xori	r2,r2,128
  8020ac:	10bfe004 	addi	r2,r2,-128
  8020b0:	1004c03a 	cmpne	r2,r2,zero
  8020b4:	1000031e 	bne	r2,zero,8020c4 <tick+0x1040>
  8020b8:	00800044 	movi	r2,1
  8020bc:	e0bfdf15 	stw	r2,-132(fp)
  8020c0:	00000106 	br	8020c8 <tick+0x1044>
  8020c4:	e03fdf15 	stw	zero,-132(fp)
  8020c8:	e0ffdf17 	ldw	r3,-132(fp)
  8020cc:	1805883a 	mov	r2,r3
  8020d0:	d0a77ac5 	stb	r2,-25109(gp)
      _cg109 = _compsys303_a2_local_AEI_ex;
  8020d4:	d0a73c03 	ldbu	r2,-25360(gp)
  8020d8:	d0a777c5 	stb	r2,-25121(gp)
      g110 =(g109&&_cg109);
  8020dc:	d0a77ac3 	ldbu	r2,-25109(gp)
  8020e0:	10803fcc 	andi	r2,r2,255
  8020e4:	1080201c 	xori	r2,r2,128
  8020e8:	10bfe004 	addi	r2,r2,-128
  8020ec:	1005003a 	cmpeq	r2,r2,zero
  8020f0:	1000091e 	bne	r2,zero,802118 <tick+0x1094>
  8020f4:	d0a777c3 	ldbu	r2,-25121(gp)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	1005003a 	cmpeq	r2,r2,zero
  802108:	1000031e 	bne	r2,zero,802118 <tick+0x1094>
  80210c:	00800044 	movi	r2,1
  802110:	e0bfde15 	stw	r2,-136(fp)
  802114:	00000106 	br	80211c <tick+0x1098>
  802118:	e03fde15 	stw	zero,-136(fp)
  80211c:	e0ffde17 	ldw	r3,-136(fp)
  802120:	1805883a 	mov	r2,r3
  802124:	d0a750c5 	stb	r2,-25277(gp)
      if(g110){
  802128:	d0a750c3 	ldbu	r2,-25277(gp)
  80212c:	10803fcc 	andi	r2,r2,255
  802130:	1080201c 	xori	r2,r2,128
  802134:	10bfe004 	addi	r2,r2,-128
  802138:	1005003a 	cmpeq	r2,r2,zero
  80213c:	1000021e 	bne	r2,zero,802148 <tick+0x10c4>
         APace =(APace||1);
  802140:	00800044 	movi	r2,1
  802144:	d0a73385 	stb	r2,-25394(gp)
      }
      g43 =(PRE_g42);
  802148:	d0a74c03 	ldbu	r2,-25296(gp)
  80214c:	d0a760c5 	stb	r2,-25213(gp)
      _cg43 = ASense;
  802150:	d0a74883 	ldbu	r2,-25310(gp)
  802154:	d0a74d05 	stb	r2,-25292(gp)
      g61 =(g43&&(!(_cg43)));
  802158:	d0a760c3 	ldbu	r2,-25213(gp)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	1005003a 	cmpeq	r2,r2,zero
  80216c:	1000091e 	bne	r2,zero,802194 <tick+0x1110>
  802170:	d0a74d03 	ldbu	r2,-25292(gp)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	1080201c 	xori	r2,r2,128
  80217c:	10bfe004 	addi	r2,r2,-128
  802180:	1004c03a 	cmpne	r2,r2,zero
  802184:	1000031e 	bne	r2,zero,802194 <tick+0x1110>
  802188:	00800044 	movi	r2,1
  80218c:	e0bfdd15 	stw	r2,-140(fp)
  802190:	00000106 	br	802198 <tick+0x1114>
  802194:	e03fdd15 	stw	zero,-140(fp)
  802198:	e0ffdd17 	ldw	r3,-140(fp)
  80219c:	1805883a 	mov	r2,r3
  8021a0:	d0a74045 	stb	r2,-25343(gp)
      _cg61 = APace;
  8021a4:	d0a73383 	ldbu	r2,-25394(gp)
  8021a8:	d0a74605 	stb	r2,-25320(gp)
      g42 =((g61&&(!(_cg61)))||g41);
  8021ac:	d0a74043 	ldbu	r2,-25343(gp)
  8021b0:	10803fcc 	andi	r2,r2,255
  8021b4:	1080201c 	xori	r2,r2,128
  8021b8:	10bfe004 	addi	r2,r2,-128
  8021bc:	1005003a 	cmpeq	r2,r2,zero
  8021c0:	1000061e 	bne	r2,zero,8021dc <tick+0x1158>
  8021c4:	d0a74603 	ldbu	r2,-25320(gp)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	1005003a 	cmpeq	r2,r2,zero
  8021d8:	1000061e 	bne	r2,zero,8021f4 <tick+0x1170>
  8021dc:	d0a745c3 	ldbu	r2,-25321(gp)
  8021e0:	10803fcc 	andi	r2,r2,255
  8021e4:	1080201c 	xori	r2,r2,128
  8021e8:	10bfe004 	addi	r2,r2,-128
  8021ec:	1005003a 	cmpeq	r2,r2,zero
  8021f0:	1000031e 	bne	r2,zero,802200 <tick+0x117c>
  8021f4:	00800044 	movi	r2,1
  8021f8:	e0bfdc15 	stw	r2,-144(fp)
  8021fc:	00000106 	br	802204 <tick+0x1180>
  802200:	e03fdc15 	stw	zero,-144(fp)
  802204:	e0ffdc17 	ldw	r3,-144(fp)
  802208:	1805883a 	mov	r2,r3
  80220c:	d0a73945 	stb	r2,-25371(gp)
      g44 =(g43&&_cg43);
  802210:	d0a760c3 	ldbu	r2,-25213(gp)
  802214:	10803fcc 	andi	r2,r2,255
  802218:	1080201c 	xori	r2,r2,128
  80221c:	10bfe004 	addi	r2,r2,-128
  802220:	1005003a 	cmpeq	r2,r2,zero
  802224:	1000091e 	bne	r2,zero,80224c <tick+0x11c8>
  802228:	d0a74d03 	ldbu	r2,-25292(gp)
  80222c:	10803fcc 	andi	r2,r2,255
  802230:	1080201c 	xori	r2,r2,128
  802234:	10bfe004 	addi	r2,r2,-128
  802238:	1005003a 	cmpeq	r2,r2,zero
  80223c:	1000031e 	bne	r2,zero,80224c <tick+0x11c8>
  802240:	00800044 	movi	r2,1
  802244:	e0bfdb15 	stw	r2,-148(fp)
  802248:	00000106 	br	802250 <tick+0x11cc>
  80224c:	e03fdb15 	stw	zero,-148(fp)
  802250:	e0ffdb17 	ldw	r3,-148(fp)
  802254:	1805883a 	mov	r2,r3
  802258:	d0a73ec5 	stb	r2,-25349(gp)
      if(g44){
  80225c:	d0a73ec3 	ldbu	r2,-25349(gp)
  802260:	10803fcc 	andi	r2,r2,255
  802264:	1080201c 	xori	r2,r2,128
  802268:	10bfe004 	addi	r2,r2,-128
  80226c:	1005003a 	cmpeq	r2,r2,zero
  802270:	1000021e 	bne	r2,zero,80227c <tick+0x11f8>
         _compsys303_a2_local_AVI_start =(_compsys303_a2_local_AVI_start||1);
  802274:	00800044 	movi	r2,1
  802278:	d0a76745 	stb	r2,-25187(gp)
      }
      g46 =(PRE_g45);
  80227c:	d0a77603 	ldbu	r2,-25128(gp)
  802280:	d0a76205 	stb	r2,-25208(gp)
      _cg46 = VSense;
  802284:	d0a75883 	ldbu	r2,-25246(gp)
  802288:	d0a74345 	stb	r2,-25331(gp)
      g54 =(g46&&(!(_cg46)));
  80228c:	d0a76203 	ldbu	r2,-25208(gp)
  802290:	10803fcc 	andi	r2,r2,255
  802294:	1080201c 	xori	r2,r2,128
  802298:	10bfe004 	addi	r2,r2,-128
  80229c:	1005003a 	cmpeq	r2,r2,zero
  8022a0:	1000091e 	bne	r2,zero,8022c8 <tick+0x1244>
  8022a4:	d0a74343 	ldbu	r2,-25331(gp)
  8022a8:	10803fcc 	andi	r2,r2,255
  8022ac:	1080201c 	xori	r2,r2,128
  8022b0:	10bfe004 	addi	r2,r2,-128
  8022b4:	1004c03a 	cmpne	r2,r2,zero
  8022b8:	1000031e 	bne	r2,zero,8022c8 <tick+0x1244>
  8022bc:	00800044 	movi	r2,1
  8022c0:	e0bfda15 	stw	r2,-152(fp)
  8022c4:	00000106 	br	8022cc <tick+0x1248>
  8022c8:	e03fda15 	stw	zero,-152(fp)
  8022cc:	e0ffda17 	ldw	r3,-152(fp)
  8022d0:	1805883a 	mov	r2,r3
  8022d4:	d0a75505 	stb	r2,-25260(gp)
      _cg54 = VPace;
  8022d8:	d0a77803 	ldbu	r2,-25120(gp)
  8022dc:	d0a76d85 	stb	r2,-25162(gp)
      g47 =((g46&&_cg46)||(g54&&_cg54));
  8022e0:	d0a76203 	ldbu	r2,-25208(gp)
  8022e4:	10803fcc 	andi	r2,r2,255
  8022e8:	1080201c 	xori	r2,r2,128
  8022ec:	10bfe004 	addi	r2,r2,-128
  8022f0:	1005003a 	cmpeq	r2,r2,zero
  8022f4:	1000061e 	bne	r2,zero,802310 <tick+0x128c>
  8022f8:	d0a74343 	ldbu	r2,-25331(gp)
  8022fc:	10803fcc 	andi	r2,r2,255
  802300:	1080201c 	xori	r2,r2,128
  802304:	10bfe004 	addi	r2,r2,-128
  802308:	1004c03a 	cmpne	r2,r2,zero
  80230c:	10000c1e 	bne	r2,zero,802340 <tick+0x12bc>
  802310:	d0a75503 	ldbu	r2,-25260(gp)
  802314:	10803fcc 	andi	r2,r2,255
  802318:	1080201c 	xori	r2,r2,128
  80231c:	10bfe004 	addi	r2,r2,-128
  802320:	1005003a 	cmpeq	r2,r2,zero
  802324:	1000091e 	bne	r2,zero,80234c <tick+0x12c8>
  802328:	d0a76d83 	ldbu	r2,-25162(gp)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	1005003a 	cmpeq	r2,r2,zero
  80233c:	1000031e 	bne	r2,zero,80234c <tick+0x12c8>
  802340:	00800044 	movi	r2,1
  802344:	e0bfd915 	stw	r2,-156(fp)
  802348:	00000106 	br	802350 <tick+0x12cc>
  80234c:	e03fd915 	stw	zero,-156(fp)
  802350:	e0ffd917 	ldw	r3,-156(fp)
  802354:	1805883a 	mov	r2,r3
  802358:	d0a73885 	stb	r2,-25374(gp)
      if(g47){
  80235c:	d0a73883 	ldbu	r2,-25374(gp)
  802360:	10803fcc 	andi	r2,r2,255
  802364:	1080201c 	xori	r2,r2,128
  802368:	10bfe004 	addi	r2,r2,-128
  80236c:	1005003a 	cmpeq	r2,r2,zero
  802370:	1000021e 	bne	r2,zero,80237c <tick+0x12f8>
         _compsys303_a2_local_AVI_stop =(_compsys303_a2_local_AVI_stop||1);
  802374:	00800044 	movi	r2,1
  802378:	d0a743c5 	stb	r2,-25329(gp)
      }
      g68 =(PRE_g67);
  80237c:	d0a75a83 	ldbu	r2,-25238(gp)
  802380:	d0a77045 	stb	r2,-25151(gp)
      g68b = g68;
  802384:	d0a77043 	ldbu	r2,-25151(gp)
  802388:	d0a75ec5 	stb	r2,-25221(gp)
      _cg68 = _compsys303_a2_local_AVI_stop;
  80238c:	d0a743c3 	ldbu	r2,-25329(gp)
  802390:	d0a74f85 	stb	r2,-25282(gp)
      g69 =(g68b&&(!(_cg68)));
  802394:	d0a75ec3 	ldbu	r2,-25221(gp)
  802398:	10803fcc 	andi	r2,r2,255
  80239c:	1080201c 	xori	r2,r2,128
  8023a0:	10bfe004 	addi	r2,r2,-128
  8023a4:	1005003a 	cmpeq	r2,r2,zero
  8023a8:	1000091e 	bne	r2,zero,8023d0 <tick+0x134c>
  8023ac:	d0a74f83 	ldbu	r2,-25282(gp)
  8023b0:	10803fcc 	andi	r2,r2,255
  8023b4:	1080201c 	xori	r2,r2,128
  8023b8:	10bfe004 	addi	r2,r2,-128
  8023bc:	1004c03a 	cmpne	r2,r2,zero
  8023c0:	1000031e 	bne	r2,zero,8023d0 <tick+0x134c>
  8023c4:	00800044 	movi	r2,1
  8023c8:	e0bfd815 	stw	r2,-160(fp)
  8023cc:	00000106 	br	8023d4 <tick+0x1350>
  8023d0:	e03fd815 	stw	zero,-160(fp)
  8023d4:	e0ffd817 	ldw	r3,-160(fp)
  8023d8:	1805883a 	mov	r2,r3
  8023dc:	d0a77cc5 	stb	r2,-25101(gp)
      _cg69 = AVITO;
  8023e0:	d0a75e43 	ldbu	r2,-25223(gp)
  8023e4:	d0a74745 	stb	r2,-25315(gp)
      g70 =(g69&&_cg69);
  8023e8:	d0a77cc3 	ldbu	r2,-25101(gp)
  8023ec:	10803fcc 	andi	r2,r2,255
  8023f0:	1080201c 	xori	r2,r2,128
  8023f4:	10bfe004 	addi	r2,r2,-128
  8023f8:	1005003a 	cmpeq	r2,r2,zero
  8023fc:	1000091e 	bne	r2,zero,802424 <tick+0x13a0>
  802400:	d0a74743 	ldbu	r2,-25315(gp)
  802404:	10803fcc 	andi	r2,r2,255
  802408:	1080201c 	xori	r2,r2,128
  80240c:	10bfe004 	addi	r2,r2,-128
  802410:	1005003a 	cmpeq	r2,r2,zero
  802414:	1000031e 	bne	r2,zero,802424 <tick+0x13a0>
  802418:	00800044 	movi	r2,1
  80241c:	e0bfd715 	stw	r2,-164(fp)
  802420:	00000106 	br	802428 <tick+0x13a4>
  802424:	e03fd715 	stw	zero,-164(fp)
  802428:	e0ffd717 	ldw	r3,-164(fp)
  80242c:	1805883a 	mov	r2,r3
  802430:	d0a76785 	stb	r2,-25186(gp)
      if(g70){
  802434:	d0a76783 	ldbu	r2,-25186(gp)
  802438:	10803fcc 	andi	r2,r2,255
  80243c:	1080201c 	xori	r2,r2,128
  802440:	10bfe004 	addi	r2,r2,-128
  802444:	1005003a 	cmpeq	r2,r2,zero
  802448:	1000021e 	bne	r2,zero,802454 <tick+0x13d0>
         _compsys303_a2_local_AVI_ex =(_compsys303_a2_local_AVI_ex||1);
  80244c:	00800044 	movi	r2,1
  802450:	d0a747c5 	stb	r2,-25313(gp)
      }
      g55 =(g54&&(!(_cg54)));
  802454:	d0a75503 	ldbu	r2,-25260(gp)
  802458:	10803fcc 	andi	r2,r2,255
  80245c:	1080201c 	xori	r2,r2,128
  802460:	10bfe004 	addi	r2,r2,-128
  802464:	1005003a 	cmpeq	r2,r2,zero
  802468:	1000091e 	bne	r2,zero,802490 <tick+0x140c>
  80246c:	d0a76d83 	ldbu	r2,-25162(gp)
  802470:	10803fcc 	andi	r2,r2,255
  802474:	1080201c 	xori	r2,r2,128
  802478:	10bfe004 	addi	r2,r2,-128
  80247c:	1004c03a 	cmpne	r2,r2,zero
  802480:	1000031e 	bne	r2,zero,802490 <tick+0x140c>
  802484:	00800044 	movi	r2,1
  802488:	e0bfd615 	stw	r2,-168(fp)
  80248c:	00000106 	br	802494 <tick+0x1410>
  802490:	e03fd615 	stw	zero,-168(fp)
  802494:	e0ffd617 	ldw	r3,-168(fp)
  802498:	1805883a 	mov	r2,r3
  80249c:	d0a73545 	stb	r2,-25387(gp)
      _cg55 = _compsys303_a2_local_AVI_ex;
  8024a0:	d0a747c3 	ldbu	r2,-25313(gp)
  8024a4:	d0a77585 	stb	r2,-25130(gp)
      g62 =(g61&&_cg61);
  8024a8:	d0a74043 	ldbu	r2,-25343(gp)
  8024ac:	10803fcc 	andi	r2,r2,255
  8024b0:	1080201c 	xori	r2,r2,128
  8024b4:	10bfe004 	addi	r2,r2,-128
  8024b8:	1005003a 	cmpeq	r2,r2,zero
  8024bc:	1000091e 	bne	r2,zero,8024e4 <tick+0x1460>
  8024c0:	d0a74603 	ldbu	r2,-25320(gp)
  8024c4:	10803fcc 	andi	r2,r2,255
  8024c8:	1080201c 	xori	r2,r2,128
  8024cc:	10bfe004 	addi	r2,r2,-128
  8024d0:	1005003a 	cmpeq	r2,r2,zero
  8024d4:	1000031e 	bne	r2,zero,8024e4 <tick+0x1460>
  8024d8:	00800044 	movi	r2,1
  8024dc:	e0bfd515 	stw	r2,-172(fp)
  8024e0:	00000106 	br	8024e8 <tick+0x1464>
  8024e4:	e03fd515 	stw	zero,-172(fp)
  8024e8:	e0ffd517 	ldw	r3,-172(fp)
  8024ec:	1805883a 	mov	r2,r3
  8024f0:	d0a74545 	stb	r2,-25323(gp)
      if(g62){
  8024f4:	d0a74543 	ldbu	r2,-25323(gp)
  8024f8:	10803fcc 	andi	r2,r2,255
  8024fc:	1080201c 	xori	r2,r2,128
  802500:	10bfe004 	addi	r2,r2,-128
  802504:	1005003a 	cmpeq	r2,r2,zero
  802508:	1000021e 	bne	r2,zero,802514 <tick+0x1490>
         _compsys303_a2_local_AVI_start =(_compsys303_a2_local_AVI_start||1);
  80250c:	00800044 	movi	r2,1
  802510:	d0a76745 	stb	r2,-25187(gp)
      }
      g51 =(PRE_g50);
  802514:	d0a748c3 	ldbu	r2,-25309(gp)
  802518:	d0a76385 	stb	r2,-25202(gp)
      _cg51 = ASense;
  80251c:	d0a74883 	ldbu	r2,-25310(gp)
  802520:	d0a74f05 	stb	r2,-25284(gp)
      g53 =(g51&&(!(_cg51)));
  802524:	d0a76383 	ldbu	r2,-25202(gp)
  802528:	10803fcc 	andi	r2,r2,255
  80252c:	1080201c 	xori	r2,r2,128
  802530:	10bfe004 	addi	r2,r2,-128
  802534:	1005003a 	cmpeq	r2,r2,zero
  802538:	1000091e 	bne	r2,zero,802560 <tick+0x14dc>
  80253c:	d0a74f03 	ldbu	r2,-25284(gp)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	1004c03a 	cmpne	r2,r2,zero
  802550:	1000031e 	bne	r2,zero,802560 <tick+0x14dc>
  802554:	00800044 	movi	r2,1
  802558:	e0bfd415 	stw	r2,-176(fp)
  80255c:	00000106 	br	802564 <tick+0x14e0>
  802560:	e03fd415 	stw	zero,-176(fp)
  802564:	e0ffd417 	ldw	r3,-176(fp)
  802568:	1805883a 	mov	r2,r3
  80256c:	d0a76685 	stb	r2,-25190(gp)
      _cg53 = APace;
  802570:	d0a73383 	ldbu	r2,-25394(gp)
  802574:	d0a751c5 	stb	r2,-25273(gp)
      g52 =((g51&&_cg51)||(g53&&_cg53));
  802578:	d0a76383 	ldbu	r2,-25202(gp)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	1080201c 	xori	r2,r2,128
  802584:	10bfe004 	addi	r2,r2,-128
  802588:	1005003a 	cmpeq	r2,r2,zero
  80258c:	1000061e 	bne	r2,zero,8025a8 <tick+0x1524>
  802590:	d0a74f03 	ldbu	r2,-25284(gp)
  802594:	10803fcc 	andi	r2,r2,255
  802598:	1080201c 	xori	r2,r2,128
  80259c:	10bfe004 	addi	r2,r2,-128
  8025a0:	1004c03a 	cmpne	r2,r2,zero
  8025a4:	10000c1e 	bne	r2,zero,8025d8 <tick+0x1554>
  8025a8:	d0a76683 	ldbu	r2,-25190(gp)
  8025ac:	10803fcc 	andi	r2,r2,255
  8025b0:	1080201c 	xori	r2,r2,128
  8025b4:	10bfe004 	addi	r2,r2,-128
  8025b8:	1005003a 	cmpeq	r2,r2,zero
  8025bc:	1000091e 	bne	r2,zero,8025e4 <tick+0x1560>
  8025c0:	d0a751c3 	ldbu	r2,-25273(gp)
  8025c4:	10803fcc 	andi	r2,r2,255
  8025c8:	1080201c 	xori	r2,r2,128
  8025cc:	10bfe004 	addi	r2,r2,-128
  8025d0:	1005003a 	cmpeq	r2,r2,zero
  8025d4:	1000031e 	bne	r2,zero,8025e4 <tick+0x1560>
  8025d8:	00800044 	movi	r2,1
  8025dc:	e0bfd315 	stw	r2,-180(fp)
  8025e0:	00000106 	br	8025e8 <tick+0x1564>
  8025e4:	e03fd315 	stw	zero,-180(fp)
  8025e8:	e0ffd317 	ldw	r3,-180(fp)
  8025ec:	1805883a 	mov	r2,r3
  8025f0:	d0a742c5 	stb	r2,-25333(gp)
      if(g52){
  8025f4:	d0a742c3 	ldbu	r2,-25333(gp)
  8025f8:	10803fcc 	andi	r2,r2,255
  8025fc:	1080201c 	xori	r2,r2,128
  802600:	10bfe004 	addi	r2,r2,-128
  802604:	1005003a 	cmpeq	r2,r2,zero
  802608:	1000021e 	bne	r2,zero,802614 <tick+0x1590>
         _compsys303_a2_local_AVI_start =(_compsys303_a2_local_AVI_start||1);
  80260c:	00800044 	movi	r2,1
  802610:	d0a76745 	stb	r2,-25187(gp)
      }
      g45 =((g55&&(!(_cg55)))||g62||g44||g52);
  802614:	d0a73543 	ldbu	r2,-25387(gp)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	1080201c 	xori	r2,r2,128
  802620:	10bfe004 	addi	r2,r2,-128
  802624:	1005003a 	cmpeq	r2,r2,zero
  802628:	1000061e 	bne	r2,zero,802644 <tick+0x15c0>
  80262c:	d0a77583 	ldbu	r2,-25130(gp)
  802630:	10803fcc 	andi	r2,r2,255
  802634:	1080201c 	xori	r2,r2,128
  802638:	10bfe004 	addi	r2,r2,-128
  80263c:	1005003a 	cmpeq	r2,r2,zero
  802640:	1000121e 	bne	r2,zero,80268c <tick+0x1608>
  802644:	d0a74543 	ldbu	r2,-25323(gp)
  802648:	10803fcc 	andi	r2,r2,255
  80264c:	1080201c 	xori	r2,r2,128
  802650:	10bfe004 	addi	r2,r2,-128
  802654:	1004c03a 	cmpne	r2,r2,zero
  802658:	10000c1e 	bne	r2,zero,80268c <tick+0x1608>
  80265c:	d0a73ec3 	ldbu	r2,-25349(gp)
  802660:	10803fcc 	andi	r2,r2,255
  802664:	1080201c 	xori	r2,r2,128
  802668:	10bfe004 	addi	r2,r2,-128
  80266c:	1004c03a 	cmpne	r2,r2,zero
  802670:	1000061e 	bne	r2,zero,80268c <tick+0x1608>
  802674:	d0a742c3 	ldbu	r2,-25333(gp)
  802678:	10803fcc 	andi	r2,r2,255
  80267c:	1080201c 	xori	r2,r2,128
  802680:	10bfe004 	addi	r2,r2,-128
  802684:	1005003a 	cmpeq	r2,r2,zero
  802688:	1000031e 	bne	r2,zero,802698 <tick+0x1614>
  80268c:	00800044 	movi	r2,1
  802690:	e0bfd215 	stw	r2,-184(fp)
  802694:	00000106 	br	80269c <tick+0x1618>
  802698:	e03fd215 	stw	zero,-184(fp)
  80269c:	e0ffd217 	ldw	r3,-184(fp)
  8026a0:	1805883a 	mov	r2,r3
  8026a4:	d0a77445 	stb	r2,-25135(gp)
      g76 =(PRE_g75);
  8026a8:	d0a73e43 	ldbu	r2,-25351(gp)
  8026ac:	d0a74445 	stb	r2,-25327(gp)
      _cg76 = PVARPTO;
  8026b0:	d0a76143 	ldbu	r2,-25211(gp)
  8026b4:	d0a74cc5 	stb	r2,-25293(gp)
      g77 =(g76&&_cg76);
  8026b8:	d0a74443 	ldbu	r2,-25327(gp)
  8026bc:	10803fcc 	andi	r2,r2,255
  8026c0:	1080201c 	xori	r2,r2,128
  8026c4:	10bfe004 	addi	r2,r2,-128
  8026c8:	1005003a 	cmpeq	r2,r2,zero
  8026cc:	1000091e 	bne	r2,zero,8026f4 <tick+0x1670>
  8026d0:	d0a74cc3 	ldbu	r2,-25293(gp)
  8026d4:	10803fcc 	andi	r2,r2,255
  8026d8:	1080201c 	xori	r2,r2,128
  8026dc:	10bfe004 	addi	r2,r2,-128
  8026e0:	1005003a 	cmpeq	r2,r2,zero
  8026e4:	1000031e 	bne	r2,zero,8026f4 <tick+0x1670>
  8026e8:	00800044 	movi	r2,1
  8026ec:	e0bfd115 	stw	r2,-188(fp)
  8026f0:	00000106 	br	8026f8 <tick+0x1674>
  8026f4:	e03fd115 	stw	zero,-188(fp)
  8026f8:	e0ffd117 	ldw	r3,-188(fp)
  8026fc:	1805883a 	mov	r2,r3
  802700:	d0a77305 	stb	r2,-25140(gp)
      if(g77){
  802704:	d0a77303 	ldbu	r2,-25140(gp)
  802708:	10803fcc 	andi	r2,r2,255
  80270c:	1080201c 	xori	r2,r2,128
  802710:	10bfe004 	addi	r2,r2,-128
  802714:	1005003a 	cmpeq	r2,r2,zero
  802718:	1000021e 	bne	r2,zero,802724 <tick+0x16a0>
         _compsys303_a2_local_PVARP_ex =(_compsys303_a2_local_PVARP_ex||1);
  80271c:	00800044 	movi	r2,1
  802720:	d0a77385 	stb	r2,-25138(gp)
      }
      g49 =(PRE_g48);
  802724:	d0a76503 	ldbu	r2,-25196(gp)
  802728:	d0a75105 	stb	r2,-25276(gp)
      g49b = g49;
  80272c:	d0a75103 	ldbu	r2,-25276(gp)
  802730:	d0a77685 	stb	r2,-25126(gp)
      _cg49 = _compsys303_a2_local_PVARP_ex;
  802734:	d0a77383 	ldbu	r2,-25138(gp)
  802738:	d0a778c5 	stb	r2,-25117(gp)
      g48 =(g58||g60||(g49b&&(!(_cg49)))||g47);
  80273c:	d0a76f03 	ldbu	r2,-25156(gp)
  802740:	10803fcc 	andi	r2,r2,255
  802744:	1080201c 	xori	r2,r2,128
  802748:	10bfe004 	addi	r2,r2,-128
  80274c:	1004c03a 	cmpne	r2,r2,zero
  802750:	1000181e 	bne	r2,zero,8027b4 <tick+0x1730>
  802754:	d0a75e83 	ldbu	r2,-25222(gp)
  802758:	10803fcc 	andi	r2,r2,255
  80275c:	1080201c 	xori	r2,r2,128
  802760:	10bfe004 	addi	r2,r2,-128
  802764:	1004c03a 	cmpne	r2,r2,zero
  802768:	1000121e 	bne	r2,zero,8027b4 <tick+0x1730>
  80276c:	d0a77683 	ldbu	r2,-25126(gp)
  802770:	10803fcc 	andi	r2,r2,255
  802774:	1080201c 	xori	r2,r2,128
  802778:	10bfe004 	addi	r2,r2,-128
  80277c:	1005003a 	cmpeq	r2,r2,zero
  802780:	1000061e 	bne	r2,zero,80279c <tick+0x1718>
  802784:	d0a778c3 	ldbu	r2,-25117(gp)
  802788:	10803fcc 	andi	r2,r2,255
  80278c:	1080201c 	xori	r2,r2,128
  802790:	10bfe004 	addi	r2,r2,-128
  802794:	1005003a 	cmpeq	r2,r2,zero
  802798:	1000061e 	bne	r2,zero,8027b4 <tick+0x1730>
  80279c:	d0a73883 	ldbu	r2,-25374(gp)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	1005003a 	cmpeq	r2,r2,zero
  8027b0:	1000031e 	bne	r2,zero,8027c0 <tick+0x173c>
  8027b4:	00800044 	movi	r2,1
  8027b8:	e0bfd015 	stw	r2,-192(fp)
  8027bc:	00000106 	br	8027c4 <tick+0x1740>
  8027c0:	e03fd015 	stw	zero,-192(fp)
  8027c4:	e0ffd017 	ldw	r3,-192(fp)
  8027c8:	1805883a 	mov	r2,r3
  8027cc:	d0a74985 	stb	r2,-25306(gp)
      g50 =((g49b&&_cg49)||(g53&&(!(_cg53))));
  8027d0:	d0a77683 	ldbu	r2,-25126(gp)
  8027d4:	10803fcc 	andi	r2,r2,255
  8027d8:	1080201c 	xori	r2,r2,128
  8027dc:	10bfe004 	addi	r2,r2,-128
  8027e0:	1005003a 	cmpeq	r2,r2,zero
  8027e4:	1000061e 	bne	r2,zero,802800 <tick+0x177c>
  8027e8:	d0a778c3 	ldbu	r2,-25117(gp)
  8027ec:	10803fcc 	andi	r2,r2,255
  8027f0:	1080201c 	xori	r2,r2,128
  8027f4:	10bfe004 	addi	r2,r2,-128
  8027f8:	1004c03a 	cmpne	r2,r2,zero
  8027fc:	10000c1e 	bne	r2,zero,802830 <tick+0x17ac>
  802800:	d0a76683 	ldbu	r2,-25190(gp)
  802804:	10803fcc 	andi	r2,r2,255
  802808:	1080201c 	xori	r2,r2,128
  80280c:	10bfe004 	addi	r2,r2,-128
  802810:	1005003a 	cmpeq	r2,r2,zero
  802814:	1000091e 	bne	r2,zero,80283c <tick+0x17b8>
  802818:	d0a751c3 	ldbu	r2,-25273(gp)
  80281c:	10803fcc 	andi	r2,r2,255
  802820:	1080201c 	xori	r2,r2,128
  802824:	10bfe004 	addi	r2,r2,-128
  802828:	1004c03a 	cmpne	r2,r2,zero
  80282c:	1000031e 	bne	r2,zero,80283c <tick+0x17b8>
  802830:	00800044 	movi	r2,1
  802834:	e0bfcf15 	stw	r2,-196(fp)
  802838:	00000106 	br	802840 <tick+0x17bc>
  80283c:	e03fcf15 	stw	zero,-196(fp)
  802840:	e0ffcf17 	ldw	r3,-196(fp)
  802844:	1805883a 	mov	r2,r3
  802848:	d0a76305 	stb	r2,-25204(gp)
      g56 =((g59&&(!(_cg59)))||(g55&&_cg55));
  80284c:	d0a75483 	ldbu	r2,-25262(gp)
  802850:	10803fcc 	andi	r2,r2,255
  802854:	1080201c 	xori	r2,r2,128
  802858:	10bfe004 	addi	r2,r2,-128
  80285c:	1005003a 	cmpeq	r2,r2,zero
  802860:	1000061e 	bne	r2,zero,80287c <tick+0x17f8>
  802864:	d0a73583 	ldbu	r2,-25386(gp)
  802868:	10803fcc 	andi	r2,r2,255
  80286c:	1080201c 	xori	r2,r2,128
  802870:	10bfe004 	addi	r2,r2,-128
  802874:	1005003a 	cmpeq	r2,r2,zero
  802878:	10000c1e 	bne	r2,zero,8028ac <tick+0x1828>
  80287c:	d0a73543 	ldbu	r2,-25387(gp)
  802880:	10803fcc 	andi	r2,r2,255
  802884:	1080201c 	xori	r2,r2,128
  802888:	10bfe004 	addi	r2,r2,-128
  80288c:	1005003a 	cmpeq	r2,r2,zero
  802890:	1000091e 	bne	r2,zero,8028b8 <tick+0x1834>
  802894:	d0a77583 	ldbu	r2,-25130(gp)
  802898:	10803fcc 	andi	r2,r2,255
  80289c:	1080201c 	xori	r2,r2,128
  8028a0:	10bfe004 	addi	r2,r2,-128
  8028a4:	1005003a 	cmpeq	r2,r2,zero
  8028a8:	1000031e 	bne	r2,zero,8028b8 <tick+0x1834>
  8028ac:	00800044 	movi	r2,1
  8028b0:	e0bfce15 	stw	r2,-200(fp)
  8028b4:	00000106 	br	8028bc <tick+0x1838>
  8028b8:	e03fce15 	stw	zero,-200(fp)
  8028bc:	e0ffce17 	ldw	r3,-200(fp)
  8028c0:	1805883a 	mov	r2,r3
  8028c4:	d0a757c5 	stb	r2,-25249(gp)
      g64 = g1;
  8028c8:	d0a74003 	ldbu	r2,-25344(gp)
  8028cc:	d0a74e05 	stb	r2,-25288(gp)
      g66 =(PRE_g65);
  8028d0:	d0a73f83 	ldbu	r2,-25346(gp)
  8028d4:	d0a75545 	stb	r2,-25259(gp)
      g66b = g66;
  8028d8:	d0a75543 	ldbu	r2,-25259(gp)
  8028dc:	d0a75f45 	stb	r2,-25219(gp)
      _cg66 = _compsys303_a2_local_AVI_start;
  8028e0:	d0a76743 	ldbu	r2,-25187(gp)
  8028e4:	d0a767c5 	stb	r2,-25185(gp)
      g65 =((g66b&&(!(_cg66)))||(g68b&&_cg68)||g64||g70);
  8028e8:	d0a75f43 	ldbu	r2,-25219(gp)
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	1080201c 	xori	r2,r2,128
  8028f4:	10bfe004 	addi	r2,r2,-128
  8028f8:	1005003a 	cmpeq	r2,r2,zero
  8028fc:	1000061e 	bne	r2,zero,802918 <tick+0x1894>
  802900:	d0a767c3 	ldbu	r2,-25185(gp)
  802904:	10803fcc 	andi	r2,r2,255
  802908:	1080201c 	xori	r2,r2,128
  80290c:	10bfe004 	addi	r2,r2,-128
  802910:	1005003a 	cmpeq	r2,r2,zero
  802914:	1000181e 	bne	r2,zero,802978 <tick+0x18f4>
  802918:	d0a75ec3 	ldbu	r2,-25221(gp)
  80291c:	10803fcc 	andi	r2,r2,255
  802920:	1080201c 	xori	r2,r2,128
  802924:	10bfe004 	addi	r2,r2,-128
  802928:	1005003a 	cmpeq	r2,r2,zero
  80292c:	1000061e 	bne	r2,zero,802948 <tick+0x18c4>
  802930:	d0a74f83 	ldbu	r2,-25282(gp)
  802934:	10803fcc 	andi	r2,r2,255
  802938:	1080201c 	xori	r2,r2,128
  80293c:	10bfe004 	addi	r2,r2,-128
  802940:	1004c03a 	cmpne	r2,r2,zero
  802944:	10000c1e 	bne	r2,zero,802978 <tick+0x18f4>
  802948:	d0a74e03 	ldbu	r2,-25288(gp)
  80294c:	10803fcc 	andi	r2,r2,255
  802950:	1080201c 	xori	r2,r2,128
  802954:	10bfe004 	addi	r2,r2,-128
  802958:	1004c03a 	cmpne	r2,r2,zero
  80295c:	1000061e 	bne	r2,zero,802978 <tick+0x18f4>
  802960:	d0a76783 	ldbu	r2,-25186(gp)
  802964:	10803fcc 	andi	r2,r2,255
  802968:	1080201c 	xori	r2,r2,128
  80296c:	10bfe004 	addi	r2,r2,-128
  802970:	1005003a 	cmpeq	r2,r2,zero
  802974:	1000031e 	bne	r2,zero,802984 <tick+0x1900>
  802978:	00800044 	movi	r2,1
  80297c:	e0bfcd15 	stw	r2,-204(fp)
  802980:	00000106 	br	802988 <tick+0x1904>
  802984:	e03fcd15 	stw	zero,-204(fp)
  802988:	e0ffcd17 	ldw	r3,-204(fp)
  80298c:	1805883a 	mov	r2,r3
  802990:	d0a77145 	stb	r2,-25147(gp)
      g67 =((g66b&&_cg66)||(g69&&(!(_cg69))));
  802994:	d0a75f43 	ldbu	r2,-25219(gp)
  802998:	10803fcc 	andi	r2,r2,255
  80299c:	1080201c 	xori	r2,r2,128
  8029a0:	10bfe004 	addi	r2,r2,-128
  8029a4:	1005003a 	cmpeq	r2,r2,zero
  8029a8:	1000061e 	bne	r2,zero,8029c4 <tick+0x1940>
  8029ac:	d0a767c3 	ldbu	r2,-25185(gp)
  8029b0:	10803fcc 	andi	r2,r2,255
  8029b4:	1080201c 	xori	r2,r2,128
  8029b8:	10bfe004 	addi	r2,r2,-128
  8029bc:	1004c03a 	cmpne	r2,r2,zero
  8029c0:	10000c1e 	bne	r2,zero,8029f4 <tick+0x1970>
  8029c4:	d0a77cc3 	ldbu	r2,-25101(gp)
  8029c8:	10803fcc 	andi	r2,r2,255
  8029cc:	1080201c 	xori	r2,r2,128
  8029d0:	10bfe004 	addi	r2,r2,-128
  8029d4:	1005003a 	cmpeq	r2,r2,zero
  8029d8:	1000091e 	bne	r2,zero,802a00 <tick+0x197c>
  8029dc:	d0a74743 	ldbu	r2,-25315(gp)
  8029e0:	10803fcc 	andi	r2,r2,255
  8029e4:	1080201c 	xori	r2,r2,128
  8029e8:	10bfe004 	addi	r2,r2,-128
  8029ec:	1004c03a 	cmpne	r2,r2,zero
  8029f0:	1000031e 	bne	r2,zero,802a00 <tick+0x197c>
  8029f4:	00800044 	movi	r2,1
  8029f8:	e0bfcc15 	stw	r2,-208(fp)
  8029fc:	00000106 	br	802a04 <tick+0x1980>
  802a00:	e03fcc15 	stw	zero,-208(fp)
  802a04:	e0ffcc17 	ldw	r3,-208(fp)
  802a08:	1805883a 	mov	r2,r3
  802a0c:	d0a779c5 	stb	r2,-25113(gp)
      g72 = g1;
  802a10:	d0a74003 	ldbu	r2,-25344(gp)
  802a14:	d0a76985 	stb	r2,-25178(gp)
      g81 =(PRE_g80);
  802a18:	d0a75303 	ldbu	r2,-25268(gp)
  802a1c:	d0a769c5 	stb	r2,-25177(gp)
      _cg81 = VSense;
  802a20:	d0a75883 	ldbu	r2,-25246(gp)
  802a24:	d0a73205 	stb	r2,-25400(gp)
      g85 =(g81&&(!(_cg81)));
  802a28:	d0a769c3 	ldbu	r2,-25177(gp)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	1005003a 	cmpeq	r2,r2,zero
  802a3c:	1000091e 	bne	r2,zero,802a64 <tick+0x19e0>
  802a40:	d0a73203 	ldbu	r2,-25400(gp)
  802a44:	10803fcc 	andi	r2,r2,255
  802a48:	1080201c 	xori	r2,r2,128
  802a4c:	10bfe004 	addi	r2,r2,-128
  802a50:	1004c03a 	cmpne	r2,r2,zero
  802a54:	1000031e 	bne	r2,zero,802a64 <tick+0x19e0>
  802a58:	00800044 	movi	r2,1
  802a5c:	e0bfcb15 	stw	r2,-212(fp)
  802a60:	00000106 	br	802a68 <tick+0x19e4>
  802a64:	e03fcb15 	stw	zero,-212(fp)
  802a68:	e0ffcb17 	ldw	r3,-212(fp)
  802a6c:	1805883a 	mov	r2,r3
  802a70:	d0a73905 	stb	r2,-25372(gp)
      _cg85 = VPace;
  802a74:	d0a77803 	ldbu	r2,-25120(gp)
  802a78:	d0a74305 	stb	r2,-25332(gp)
      g82 =((g85&&_cg85)||(g81&&_cg81));
  802a7c:	d0a73903 	ldbu	r2,-25372(gp)
  802a80:	10803fcc 	andi	r2,r2,255
  802a84:	1080201c 	xori	r2,r2,128
  802a88:	10bfe004 	addi	r2,r2,-128
  802a8c:	1005003a 	cmpeq	r2,r2,zero
  802a90:	1000061e 	bne	r2,zero,802aac <tick+0x1a28>
  802a94:	d0a74303 	ldbu	r2,-25332(gp)
  802a98:	10803fcc 	andi	r2,r2,255
  802a9c:	1080201c 	xori	r2,r2,128
  802aa0:	10bfe004 	addi	r2,r2,-128
  802aa4:	1004c03a 	cmpne	r2,r2,zero
  802aa8:	10000c1e 	bne	r2,zero,802adc <tick+0x1a58>
  802aac:	d0a769c3 	ldbu	r2,-25177(gp)
  802ab0:	10803fcc 	andi	r2,r2,255
  802ab4:	1080201c 	xori	r2,r2,128
  802ab8:	10bfe004 	addi	r2,r2,-128
  802abc:	1005003a 	cmpeq	r2,r2,zero
  802ac0:	1000091e 	bne	r2,zero,802ae8 <tick+0x1a64>
  802ac4:	d0a73203 	ldbu	r2,-25400(gp)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	1005003a 	cmpeq	r2,r2,zero
  802ad8:	1000031e 	bne	r2,zero,802ae8 <tick+0x1a64>
  802adc:	00800044 	movi	r2,1
  802ae0:	e0bfca15 	stw	r2,-216(fp)
  802ae4:	00000106 	br	802aec <tick+0x1a68>
  802ae8:	e03fca15 	stw	zero,-216(fp)
  802aec:	e0ffca17 	ldw	r3,-216(fp)
  802af0:	1805883a 	mov	r2,r3
  802af4:	d0a74205 	stb	r2,-25336(gp)
      if(g82){
  802af8:	d0a74203 	ldbu	r2,-25336(gp)
  802afc:	10803fcc 	andi	r2,r2,255
  802b00:	1080201c 	xori	r2,r2,128
  802b04:	10bfe004 	addi	r2,r2,-128
  802b08:	1005003a 	cmpeq	r2,r2,zero
  802b0c:	1000021e 	bne	r2,zero,802b18 <tick+0x1a94>
         _compsys303_a2_local_PVARP_start =(_compsys303_a2_local_PVARP_start||1);
  802b10:	00800044 	movi	r2,1
  802b14:	d0a76a45 	stb	r2,-25175(gp)
      }
      g74 =(PRE_g73);
  802b18:	d0a776c3 	ldbu	r2,-25125(gp)
  802b1c:	d0a77e05 	stb	r2,-25096(gp)
      g74b = g74;
  802b20:	d0a77e03 	ldbu	r2,-25096(gp)
  802b24:	d0a74e85 	stb	r2,-25286(gp)
      _cg74 = _compsys303_a2_local_PVARP_start;
  802b28:	d0a76a43 	ldbu	r2,-25175(gp)
  802b2c:	d0a74385 	stb	r2,-25330(gp)
      g73 =(g72||(g74b&&(!(_cg74)))||g77);
  802b30:	d0a76983 	ldbu	r2,-25178(gp)
  802b34:	10803fcc 	andi	r2,r2,255
  802b38:	1080201c 	xori	r2,r2,128
  802b3c:	10bfe004 	addi	r2,r2,-128
  802b40:	1004c03a 	cmpne	r2,r2,zero
  802b44:	1000121e 	bne	r2,zero,802b90 <tick+0x1b0c>
  802b48:	d0a74e83 	ldbu	r2,-25286(gp)
  802b4c:	10803fcc 	andi	r2,r2,255
  802b50:	1080201c 	xori	r2,r2,128
  802b54:	10bfe004 	addi	r2,r2,-128
  802b58:	1005003a 	cmpeq	r2,r2,zero
  802b5c:	1000061e 	bne	r2,zero,802b78 <tick+0x1af4>
  802b60:	d0a74383 	ldbu	r2,-25330(gp)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	1005003a 	cmpeq	r2,r2,zero
  802b74:	1000061e 	bne	r2,zero,802b90 <tick+0x1b0c>
  802b78:	d0a77303 	ldbu	r2,-25140(gp)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	1005003a 	cmpeq	r2,r2,zero
  802b8c:	1000031e 	bne	r2,zero,802b9c <tick+0x1b18>
  802b90:	00800044 	movi	r2,1
  802b94:	e0bfc915 	stw	r2,-220(fp)
  802b98:	00000106 	br	802ba0 <tick+0x1b1c>
  802b9c:	e03fc915 	stw	zero,-220(fp)
  802ba0:	e0ffc917 	ldw	r3,-220(fp)
  802ba4:	1805883a 	mov	r2,r3
  802ba8:	d0a77205 	stb	r2,-25144(gp)
      g75 =((g74b&&_cg74)||(g76&&(!(_cg76))));
  802bac:	d0a74e83 	ldbu	r2,-25286(gp)
  802bb0:	10803fcc 	andi	r2,r2,255
  802bb4:	1080201c 	xori	r2,r2,128
  802bb8:	10bfe004 	addi	r2,r2,-128
  802bbc:	1005003a 	cmpeq	r2,r2,zero
  802bc0:	1000061e 	bne	r2,zero,802bdc <tick+0x1b58>
  802bc4:	d0a74383 	ldbu	r2,-25330(gp)
  802bc8:	10803fcc 	andi	r2,r2,255
  802bcc:	1080201c 	xori	r2,r2,128
  802bd0:	10bfe004 	addi	r2,r2,-128
  802bd4:	1004c03a 	cmpne	r2,r2,zero
  802bd8:	10000c1e 	bne	r2,zero,802c0c <tick+0x1b88>
  802bdc:	d0a74443 	ldbu	r2,-25327(gp)
  802be0:	10803fcc 	andi	r2,r2,255
  802be4:	1080201c 	xori	r2,r2,128
  802be8:	10bfe004 	addi	r2,r2,-128
  802bec:	1005003a 	cmpeq	r2,r2,zero
  802bf0:	1000091e 	bne	r2,zero,802c18 <tick+0x1b94>
  802bf4:	d0a74cc3 	ldbu	r2,-25293(gp)
  802bf8:	10803fcc 	andi	r2,r2,255
  802bfc:	1080201c 	xori	r2,r2,128
  802c00:	10bfe004 	addi	r2,r2,-128
  802c04:	1004c03a 	cmpne	r2,r2,zero
  802c08:	1000031e 	bne	r2,zero,802c18 <tick+0x1b94>
  802c0c:	00800044 	movi	r2,1
  802c10:	e0bfc815 	stw	r2,-224(fp)
  802c14:	00000106 	br	802c1c <tick+0x1b98>
  802c18:	e03fc815 	stw	zero,-224(fp)
  802c1c:	e0ffc817 	ldw	r3,-224(fp)
  802c20:	1805883a 	mov	r2,r3
  802c24:	d0a76e05 	stb	r2,-25160(gp)
      g79 = g1;
  802c28:	d0a74003 	ldbu	r2,-25344(gp)
  802c2c:	d0a74fc5 	stb	r2,-25281(gp)
      g84 =(PRE_g83);
  802c30:	d0a75ac3 	ldbu	r2,-25237(gp)
  802c34:	d0a74585 	stb	r2,-25322(gp)
      g84b = g84;
  802c38:	d0a74583 	ldbu	r2,-25322(gp)
  802c3c:	d0a76045 	stb	r2,-25215(gp)
      _cg84 = _compsys303_a2_local_PVARP_ex;
  802c40:	d0a77383 	ldbu	r2,-25138(gp)
  802c44:	d0a73f45 	stb	r2,-25347(gp)
      g80 =(g79||(g85&&(!(_cg85)))||(g84b&&_cg84));
  802c48:	d0a74fc3 	ldbu	r2,-25281(gp)
  802c4c:	10803fcc 	andi	r2,r2,255
  802c50:	1080201c 	xori	r2,r2,128
  802c54:	10bfe004 	addi	r2,r2,-128
  802c58:	1004c03a 	cmpne	r2,r2,zero
  802c5c:	1000181e 	bne	r2,zero,802cc0 <tick+0x1c3c>
  802c60:	d0a73903 	ldbu	r2,-25372(gp)
  802c64:	10803fcc 	andi	r2,r2,255
  802c68:	1080201c 	xori	r2,r2,128
  802c6c:	10bfe004 	addi	r2,r2,-128
  802c70:	1005003a 	cmpeq	r2,r2,zero
  802c74:	1000061e 	bne	r2,zero,802c90 <tick+0x1c0c>
  802c78:	d0a74303 	ldbu	r2,-25332(gp)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	1005003a 	cmpeq	r2,r2,zero
  802c8c:	10000c1e 	bne	r2,zero,802cc0 <tick+0x1c3c>
  802c90:	d0a76043 	ldbu	r2,-25215(gp)
  802c94:	10803fcc 	andi	r2,r2,255
  802c98:	1080201c 	xori	r2,r2,128
  802c9c:	10bfe004 	addi	r2,r2,-128
  802ca0:	1005003a 	cmpeq	r2,r2,zero
  802ca4:	1000091e 	bne	r2,zero,802ccc <tick+0x1c48>
  802ca8:	d0a73f43 	ldbu	r2,-25347(gp)
  802cac:	10803fcc 	andi	r2,r2,255
  802cb0:	1080201c 	xori	r2,r2,128
  802cb4:	10bfe004 	addi	r2,r2,-128
  802cb8:	1005003a 	cmpeq	r2,r2,zero
  802cbc:	1000031e 	bne	r2,zero,802ccc <tick+0x1c48>
  802cc0:	00800044 	movi	r2,1
  802cc4:	e0bfc715 	stw	r2,-228(fp)
  802cc8:	00000106 	br	802cd0 <tick+0x1c4c>
  802ccc:	e03fc715 	stw	zero,-228(fp)
  802cd0:	e0ffc717 	ldw	r3,-228(fp)
  802cd4:	1805883a 	mov	r2,r3
  802cd8:	d0a752c5 	stb	r2,-25269(gp)
      g83 =(g82||(g84b&&(!(_cg84))));
  802cdc:	d0a74203 	ldbu	r2,-25336(gp)
  802ce0:	10803fcc 	andi	r2,r2,255
  802ce4:	1080201c 	xori	r2,r2,128
  802ce8:	10bfe004 	addi	r2,r2,-128
  802cec:	1004c03a 	cmpne	r2,r2,zero
  802cf0:	10000c1e 	bne	r2,zero,802d24 <tick+0x1ca0>
  802cf4:	d0a76043 	ldbu	r2,-25215(gp)
  802cf8:	10803fcc 	andi	r2,r2,255
  802cfc:	1080201c 	xori	r2,r2,128
  802d00:	10bfe004 	addi	r2,r2,-128
  802d04:	1005003a 	cmpeq	r2,r2,zero
  802d08:	1000091e 	bne	r2,zero,802d30 <tick+0x1cac>
  802d0c:	d0a73f43 	ldbu	r2,-25347(gp)
  802d10:	10803fcc 	andi	r2,r2,255
  802d14:	1080201c 	xori	r2,r2,128
  802d18:	10bfe004 	addi	r2,r2,-128
  802d1c:	1004c03a 	cmpne	r2,r2,zero
  802d20:	1000031e 	bne	r2,zero,802d30 <tick+0x1cac>
  802d24:	00800044 	movi	r2,1
  802d28:	e0bfc615 	stw	r2,-232(fp)
  802d2c:	00000106 	br	802d34 <tick+0x1cb0>
  802d30:	e03fc615 	stw	zero,-232(fp)
  802d34:	e0ffc617 	ldw	r3,-232(fp)
  802d38:	1805883a 	mov	r2,r3
  802d3c:	d0a73285 	stb	r2,-25398(gp)
      g87 = g1;
  802d40:	d0a74003 	ldbu	r2,-25344(gp)
  802d44:	d0a73e85 	stb	r2,-25350(gp)
      g97 =(PRE_g96);
  802d48:	d0a75a43 	ldbu	r2,-25239(gp)
  802d4c:	d0a74285 	stb	r2,-25334(gp)
      _cg97 = VSense;
  802d50:	d0a75883 	ldbu	r2,-25246(gp)
  802d54:	d0a74b45 	stb	r2,-25299(gp)
      g113 =(g97&&(!(_cg97)));
  802d58:	d0a74283 	ldbu	r2,-25334(gp)
  802d5c:	10803fcc 	andi	r2,r2,255
  802d60:	1080201c 	xori	r2,r2,128
  802d64:	10bfe004 	addi	r2,r2,-128
  802d68:	1005003a 	cmpeq	r2,r2,zero
  802d6c:	1000091e 	bne	r2,zero,802d94 <tick+0x1d10>
  802d70:	d0a74b43 	ldbu	r2,-25299(gp)
  802d74:	10803fcc 	andi	r2,r2,255
  802d78:	1080201c 	xori	r2,r2,128
  802d7c:	10bfe004 	addi	r2,r2,-128
  802d80:	1004c03a 	cmpne	r2,r2,zero
  802d84:	1000031e 	bne	r2,zero,802d94 <tick+0x1d10>
  802d88:	00800044 	movi	r2,1
  802d8c:	e0bfc515 	stw	r2,-236(fp)
  802d90:	00000106 	br	802d98 <tick+0x1d14>
  802d94:	e03fc515 	stw	zero,-236(fp)
  802d98:	e0ffc517 	ldw	r3,-236(fp)
  802d9c:	1805883a 	mov	r2,r3
  802da0:	d0a76445 	stb	r2,-25199(gp)
      _cg113 = VPace;
  802da4:	d0a77803 	ldbu	r2,-25120(gp)
  802da8:	d0a77245 	stb	r2,-25143(gp)
      g98 =((g113&&_cg113)||(g97&&_cg97));
  802dac:	d0a76443 	ldbu	r2,-25199(gp)
  802db0:	10803fcc 	andi	r2,r2,255
  802db4:	1080201c 	xori	r2,r2,128
  802db8:	10bfe004 	addi	r2,r2,-128
  802dbc:	1005003a 	cmpeq	r2,r2,zero
  802dc0:	1000061e 	bne	r2,zero,802ddc <tick+0x1d58>
  802dc4:	d0a77243 	ldbu	r2,-25143(gp)
  802dc8:	10803fcc 	andi	r2,r2,255
  802dcc:	1080201c 	xori	r2,r2,128
  802dd0:	10bfe004 	addi	r2,r2,-128
  802dd4:	1004c03a 	cmpne	r2,r2,zero
  802dd8:	10000c1e 	bne	r2,zero,802e0c <tick+0x1d88>
  802ddc:	d0a74283 	ldbu	r2,-25334(gp)
  802de0:	10803fcc 	andi	r2,r2,255
  802de4:	1080201c 	xori	r2,r2,128
  802de8:	10bfe004 	addi	r2,r2,-128
  802dec:	1005003a 	cmpeq	r2,r2,zero
  802df0:	1000091e 	bne	r2,zero,802e18 <tick+0x1d94>
  802df4:	d0a74b43 	ldbu	r2,-25299(gp)
  802df8:	10803fcc 	andi	r2,r2,255
  802dfc:	1080201c 	xori	r2,r2,128
  802e00:	10bfe004 	addi	r2,r2,-128
  802e04:	1005003a 	cmpeq	r2,r2,zero
  802e08:	1000031e 	bne	r2,zero,802e18 <tick+0x1d94>
  802e0c:	00800044 	movi	r2,1
  802e10:	e0bfc415 	stw	r2,-240(fp)
  802e14:	00000106 	br	802e1c <tick+0x1d98>
  802e18:	e03fc415 	stw	zero,-240(fp)
  802e1c:	e0ffc417 	ldw	r3,-240(fp)
  802e20:	1805883a 	mov	r2,r3
  802e24:	d0a76645 	stb	r2,-25191(gp)
      if(g98){
  802e28:	d0a76643 	ldbu	r2,-25191(gp)
  802e2c:	10803fcc 	andi	r2,r2,255
  802e30:	1080201c 	xori	r2,r2,128
  802e34:	10bfe004 	addi	r2,r2,-128
  802e38:	1005003a 	cmpeq	r2,r2,zero
  802e3c:	1000021e 	bne	r2,zero,802e48 <tick+0x1dc4>
         _compsys303_a2_local_AEI_start =(_compsys303_a2_local_AEI_start||1);
  802e40:	00800044 	movi	r2,1
  802e44:	d0a73685 	stb	r2,-25382(gp)
      }
      g111 =(g109&&(!(_cg109)));
  802e48:	d0a77ac3 	ldbu	r2,-25109(gp)
  802e4c:	10803fcc 	andi	r2,r2,255
  802e50:	1080201c 	xori	r2,r2,128
  802e54:	10bfe004 	addi	r2,r2,-128
  802e58:	1005003a 	cmpeq	r2,r2,zero
  802e5c:	1000091e 	bne	r2,zero,802e84 <tick+0x1e00>
  802e60:	d0a777c3 	ldbu	r2,-25121(gp)
  802e64:	10803fcc 	andi	r2,r2,255
  802e68:	1080201c 	xori	r2,r2,128
  802e6c:	10bfe004 	addi	r2,r2,-128
  802e70:	1004c03a 	cmpne	r2,r2,zero
  802e74:	1000031e 	bne	r2,zero,802e84 <tick+0x1e00>
  802e78:	00800044 	movi	r2,1
  802e7c:	e0bfc315 	stw	r2,-244(fp)
  802e80:	00000106 	br	802e88 <tick+0x1e04>
  802e84:	e03fc315 	stw	zero,-244(fp)
  802e88:	e0ffc317 	ldw	r3,-244(fp)
  802e8c:	1805883a 	mov	r2,r3
  802e90:	d0a734c5 	stb	r2,-25389(gp)
      _cg111 = VPace;
  802e94:	d0a77803 	ldbu	r2,-25120(gp)
  802e98:	d0a74a85 	stb	r2,-25302(gp)
      g112 =(g111&&(!(_cg111)));
  802e9c:	d0a734c3 	ldbu	r2,-25389(gp)
  802ea0:	10803fcc 	andi	r2,r2,255
  802ea4:	1080201c 	xori	r2,r2,128
  802ea8:	10bfe004 	addi	r2,r2,-128
  802eac:	1005003a 	cmpeq	r2,r2,zero
  802eb0:	1000091e 	bne	r2,zero,802ed8 <tick+0x1e54>
  802eb4:	d0a74a83 	ldbu	r2,-25302(gp)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	1080201c 	xori	r2,r2,128
  802ec0:	10bfe004 	addi	r2,r2,-128
  802ec4:	1004c03a 	cmpne	r2,r2,zero
  802ec8:	1000031e 	bne	r2,zero,802ed8 <tick+0x1e54>
  802ecc:	00800044 	movi	r2,1
  802ed0:	e0bfc215 	stw	r2,-248(fp)
  802ed4:	00000106 	br	802edc <tick+0x1e58>
  802ed8:	e03fc215 	stw	zero,-248(fp)
  802edc:	e0ffc217 	ldw	r3,-248(fp)
  802ee0:	1805883a 	mov	r2,r3
  802ee4:	d0a736c5 	stb	r2,-25381(gp)
      _cg112 = VSense;
  802ee8:	d0a75883 	ldbu	r2,-25246(gp)
  802eec:	d0a76545 	stb	r2,-25195(gp)
      g105 =(PRE_g104);
  802ef0:	d0a74903 	ldbu	r2,-25308(gp)
  802ef4:	d0a74b05 	stb	r2,-25300(gp)
      _cg105 = VSense;
  802ef8:	d0a75883 	ldbu	r2,-25246(gp)
  802efc:	d0a77dc5 	stb	r2,-25097(gp)
      g107 =(g105&&(!(_cg105)));
  802f00:	d0a74b03 	ldbu	r2,-25300(gp)
  802f04:	10803fcc 	andi	r2,r2,255
  802f08:	1080201c 	xori	r2,r2,128
  802f0c:	10bfe004 	addi	r2,r2,-128
  802f10:	1005003a 	cmpeq	r2,r2,zero
  802f14:	1000091e 	bne	r2,zero,802f3c <tick+0x1eb8>
  802f18:	d0a77dc3 	ldbu	r2,-25097(gp)
  802f1c:	10803fcc 	andi	r2,r2,255
  802f20:	1080201c 	xori	r2,r2,128
  802f24:	10bfe004 	addi	r2,r2,-128
  802f28:	1004c03a 	cmpne	r2,r2,zero
  802f2c:	1000031e 	bne	r2,zero,802f3c <tick+0x1eb8>
  802f30:	00800044 	movi	r2,1
  802f34:	e0bfc115 	stw	r2,-252(fp)
  802f38:	00000106 	br	802f40 <tick+0x1ebc>
  802f3c:	e03fc115 	stw	zero,-252(fp)
  802f40:	e0ffc117 	ldw	r3,-252(fp)
  802f44:	1805883a 	mov	r2,r3
  802f48:	d0a76405 	stb	r2,-25200(gp)
      _cg107 = VPace;
  802f4c:	d0a77803 	ldbu	r2,-25120(gp)
  802f50:	d0a74ec5 	stb	r2,-25285(gp)
      g106 =((g111&&_cg111)||(g112&&_cg112)||(g105&&_cg105)||(g107&&_cg107));
  802f54:	d0a734c3 	ldbu	r2,-25389(gp)
  802f58:	10803fcc 	andi	r2,r2,255
  802f5c:	1080201c 	xori	r2,r2,128
  802f60:	10bfe004 	addi	r2,r2,-128
  802f64:	1005003a 	cmpeq	r2,r2,zero
  802f68:	1000061e 	bne	r2,zero,802f84 <tick+0x1f00>
  802f6c:	d0a74a83 	ldbu	r2,-25302(gp)
  802f70:	10803fcc 	andi	r2,r2,255
  802f74:	1080201c 	xori	r2,r2,128
  802f78:	10bfe004 	addi	r2,r2,-128
  802f7c:	1004c03a 	cmpne	r2,r2,zero
  802f80:	1000241e 	bne	r2,zero,803014 <tick+0x1f90>
  802f84:	d0a736c3 	ldbu	r2,-25381(gp)
  802f88:	10803fcc 	andi	r2,r2,255
  802f8c:	1080201c 	xori	r2,r2,128
  802f90:	10bfe004 	addi	r2,r2,-128
  802f94:	1005003a 	cmpeq	r2,r2,zero
  802f98:	1000061e 	bne	r2,zero,802fb4 <tick+0x1f30>
  802f9c:	d0a76543 	ldbu	r2,-25195(gp)
  802fa0:	10803fcc 	andi	r2,r2,255
  802fa4:	1080201c 	xori	r2,r2,128
  802fa8:	10bfe004 	addi	r2,r2,-128
  802fac:	1004c03a 	cmpne	r2,r2,zero
  802fb0:	1000181e 	bne	r2,zero,803014 <tick+0x1f90>
  802fb4:	d0a74b03 	ldbu	r2,-25300(gp)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	1005003a 	cmpeq	r2,r2,zero
  802fc8:	1000061e 	bne	r2,zero,802fe4 <tick+0x1f60>
  802fcc:	d0a77dc3 	ldbu	r2,-25097(gp)
  802fd0:	10803fcc 	andi	r2,r2,255
  802fd4:	1080201c 	xori	r2,r2,128
  802fd8:	10bfe004 	addi	r2,r2,-128
  802fdc:	1004c03a 	cmpne	r2,r2,zero
  802fe0:	10000c1e 	bne	r2,zero,803014 <tick+0x1f90>
  802fe4:	d0a76403 	ldbu	r2,-25200(gp)
  802fe8:	10803fcc 	andi	r2,r2,255
  802fec:	1080201c 	xori	r2,r2,128
  802ff0:	10bfe004 	addi	r2,r2,-128
  802ff4:	1005003a 	cmpeq	r2,r2,zero
  802ff8:	1000091e 	bne	r2,zero,803020 <tick+0x1f9c>
  802ffc:	d0a74ec3 	ldbu	r2,-25285(gp)
  803000:	10803fcc 	andi	r2,r2,255
  803004:	1080201c 	xori	r2,r2,128
  803008:	10bfe004 	addi	r2,r2,-128
  80300c:	1005003a 	cmpeq	r2,r2,zero
  803010:	1000031e 	bne	r2,zero,803020 <tick+0x1f9c>
  803014:	00800044 	movi	r2,1
  803018:	e0bfc015 	stw	r2,-256(fp)
  80301c:	00000106 	br	803024 <tick+0x1fa0>
  803020:	e03fc015 	stw	zero,-256(fp)
  803024:	e0ffc017 	ldw	r3,-256(fp)
  803028:	1805883a 	mov	r2,r3
  80302c:	d0a77b45 	stb	r2,-25107(gp)
      if(g106){
  803030:	d0a77b43 	ldbu	r2,-25107(gp)
  803034:	10803fcc 	andi	r2,r2,255
  803038:	1080201c 	xori	r2,r2,128
  80303c:	10bfe004 	addi	r2,r2,-128
  803040:	1005003a 	cmpeq	r2,r2,zero
  803044:	1000021e 	bne	r2,zero,803050 <tick+0x1fcc>
         _compsys303_a2_local_AEI_start =(_compsys303_a2_local_AEI_start||1);
  803048:	00800044 	movi	r2,1
  80304c:	d0a73685 	stb	r2,-25382(gp)
      }
      g89 =(PRE_g88);
  803050:	d0a76103 	ldbu	r2,-25212(gp)
  803054:	d0a761c5 	stb	r2,-25209(gp)
      g89b = g89;
  803058:	d0a761c3 	ldbu	r2,-25209(gp)
  80305c:	d0a75cc5 	stb	r2,-25229(gp)
      _cg89 = _compsys303_a2_local_AEI_start;
  803060:	d0a73683 	ldbu	r2,-25382(gp)
  803064:	d0a76cc5 	stb	r2,-25165(gp)
      g88 =((g89b&&(!(_cg89)))||g93||g87||(g91b&&_cg91));
  803068:	d0a75cc3 	ldbu	r2,-25229(gp)
  80306c:	10803fcc 	andi	r2,r2,255
  803070:	1080201c 	xori	r2,r2,128
  803074:	10bfe004 	addi	r2,r2,-128
  803078:	1005003a 	cmpeq	r2,r2,zero
  80307c:	1000061e 	bne	r2,zero,803098 <tick+0x2014>
  803080:	d0a76cc3 	ldbu	r2,-25165(gp)
  803084:	10803fcc 	andi	r2,r2,255
  803088:	1080201c 	xori	r2,r2,128
  80308c:	10bfe004 	addi	r2,r2,-128
  803090:	1005003a 	cmpeq	r2,r2,zero
  803094:	1000181e 	bne	r2,zero,8030f8 <tick+0x2074>
  803098:	d0a75f83 	ldbu	r2,-25218(gp)
  80309c:	10803fcc 	andi	r2,r2,255
  8030a0:	1080201c 	xori	r2,r2,128
  8030a4:	10bfe004 	addi	r2,r2,-128
  8030a8:	1004c03a 	cmpne	r2,r2,zero
  8030ac:	1000121e 	bne	r2,zero,8030f8 <tick+0x2074>
  8030b0:	d0a73e83 	ldbu	r2,-25350(gp)
  8030b4:	10803fcc 	andi	r2,r2,255
  8030b8:	1080201c 	xori	r2,r2,128
  8030bc:	10bfe004 	addi	r2,r2,-128
  8030c0:	1004c03a 	cmpne	r2,r2,zero
  8030c4:	10000c1e 	bne	r2,zero,8030f8 <tick+0x2074>
  8030c8:	d0a76843 	ldbu	r2,-25183(gp)
  8030cc:	10803fcc 	andi	r2,r2,255
  8030d0:	1080201c 	xori	r2,r2,128
  8030d4:	10bfe004 	addi	r2,r2,-128
  8030d8:	1005003a 	cmpeq	r2,r2,zero
  8030dc:	1000091e 	bne	r2,zero,803104 <tick+0x2080>
  8030e0:	d0a76dc3 	ldbu	r2,-25161(gp)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1005003a 	cmpeq	r2,r2,zero
  8030f4:	1000031e 	bne	r2,zero,803104 <tick+0x2080>
  8030f8:	00800044 	movi	r2,1
  8030fc:	e0bfbf15 	stw	r2,-260(fp)
  803100:	00000106 	br	803108 <tick+0x2084>
  803104:	e03fbf15 	stw	zero,-260(fp)
  803108:	e0ffbf17 	ldw	r3,-260(fp)
  80310c:	1805883a 	mov	r2,r3
  803110:	d0a77405 	stb	r2,-25136(gp)
      g90 =((g89b&&_cg89)||(g92&&(!(_cg92))));
  803114:	d0a75cc3 	ldbu	r2,-25229(gp)
  803118:	10803fcc 	andi	r2,r2,255
  80311c:	1080201c 	xori	r2,r2,128
  803120:	10bfe004 	addi	r2,r2,-128
  803124:	1005003a 	cmpeq	r2,r2,zero
  803128:	1000061e 	bne	r2,zero,803144 <tick+0x20c0>
  80312c:	d0a76cc3 	ldbu	r2,-25165(gp)
  803130:	10803fcc 	andi	r2,r2,255
  803134:	1080201c 	xori	r2,r2,128
  803138:	10bfe004 	addi	r2,r2,-128
  80313c:	1004c03a 	cmpne	r2,r2,zero
  803140:	10000c1e 	bne	r2,zero,803174 <tick+0x20f0>
  803144:	d0a73fc3 	ldbu	r2,-25345(gp)
  803148:	10803fcc 	andi	r2,r2,255
  80314c:	1080201c 	xori	r2,r2,128
  803150:	10bfe004 	addi	r2,r2,-128
  803154:	1005003a 	cmpeq	r2,r2,zero
  803158:	1000091e 	bne	r2,zero,803180 <tick+0x20fc>
  80315c:	d0a775c3 	ldbu	r2,-25129(gp)
  803160:	10803fcc 	andi	r2,r2,255
  803164:	1080201c 	xori	r2,r2,128
  803168:	10bfe004 	addi	r2,r2,-128
  80316c:	1004c03a 	cmpne	r2,r2,zero
  803170:	1000031e 	bne	r2,zero,803180 <tick+0x20fc>
  803174:	00800044 	movi	r2,1
  803178:	e0bfbe15 	stw	r2,-264(fp)
  80317c:	00000106 	br	803184 <tick+0x2100>
  803180:	e03fbe15 	stw	zero,-264(fp)
  803184:	e0ffbe17 	ldw	r3,-264(fp)
  803188:	1805883a 	mov	r2,r3
  80318c:	d0a75c45 	stb	r2,-25231(gp)
      g95 = g1;
  803190:	d0a74003 	ldbu	r2,-25344(gp)
  803194:	d0a762c5 	stb	r2,-25205(gp)
      g96 =(g95||(g113&&(!(_cg113))));
  803198:	d0a762c3 	ldbu	r2,-25205(gp)
  80319c:	10803fcc 	andi	r2,r2,255
  8031a0:	1080201c 	xori	r2,r2,128
  8031a4:	10bfe004 	addi	r2,r2,-128
  8031a8:	1004c03a 	cmpne	r2,r2,zero
  8031ac:	10000c1e 	bne	r2,zero,8031e0 <tick+0x215c>
  8031b0:	d0a76443 	ldbu	r2,-25199(gp)
  8031b4:	10803fcc 	andi	r2,r2,255
  8031b8:	1080201c 	xori	r2,r2,128
  8031bc:	10bfe004 	addi	r2,r2,-128
  8031c0:	1005003a 	cmpeq	r2,r2,zero
  8031c4:	1000091e 	bne	r2,zero,8031ec <tick+0x2168>
  8031c8:	d0a77243 	ldbu	r2,-25143(gp)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	1004c03a 	cmpne	r2,r2,zero
  8031dc:	1000031e 	bne	r2,zero,8031ec <tick+0x2168>
  8031e0:	00800044 	movi	r2,1
  8031e4:	e0bfbd15 	stw	r2,-268(fp)
  8031e8:	00000106 	br	8031f0 <tick+0x216c>
  8031ec:	e03fbd15 	stw	zero,-268(fp)
  8031f0:	e0ffbd17 	ldw	r3,-268(fp)
  8031f4:	1805883a 	mov	r2,r3
  8031f8:	d0a76345 	stb	r2,-25203(gp)
      g100 =(PRE_g99);
  8031fc:	d0a76b83 	ldbu	r2,-25170(gp)
  803200:	d0a75445 	stb	r2,-25263(gp)
      g100b = g100;
  803204:	d0a75443 	ldbu	r2,-25263(gp)
  803208:	d0a77785 	stb	r2,-25122(gp)
      _cg100 = _compsys303_a2_local_PVARP_ex;
  80320c:	d0a77383 	ldbu	r2,-25138(gp)
  803210:	d0a75745 	stb	r2,-25251(gp)
      g99 =(g98||g106||(g100b&&(!(_cg100))));
  803214:	d0a76643 	ldbu	r2,-25191(gp)
  803218:	10803fcc 	andi	r2,r2,255
  80321c:	1080201c 	xori	r2,r2,128
  803220:	10bfe004 	addi	r2,r2,-128
  803224:	1004c03a 	cmpne	r2,r2,zero
  803228:	1000121e 	bne	r2,zero,803274 <tick+0x21f0>
  80322c:	d0a77b43 	ldbu	r2,-25107(gp)
  803230:	10803fcc 	andi	r2,r2,255
  803234:	1080201c 	xori	r2,r2,128
  803238:	10bfe004 	addi	r2,r2,-128
  80323c:	1004c03a 	cmpne	r2,r2,zero
  803240:	10000c1e 	bne	r2,zero,803274 <tick+0x21f0>
  803244:	d0a77783 	ldbu	r2,-25122(gp)
  803248:	10803fcc 	andi	r2,r2,255
  80324c:	1080201c 	xori	r2,r2,128
  803250:	10bfe004 	addi	r2,r2,-128
  803254:	1005003a 	cmpeq	r2,r2,zero
  803258:	1000091e 	bne	r2,zero,803280 <tick+0x21fc>
  80325c:	d0a75743 	ldbu	r2,-25251(gp)
  803260:	10803fcc 	andi	r2,r2,255
  803264:	1080201c 	xori	r2,r2,128
  803268:	10bfe004 	addi	r2,r2,-128
  80326c:	1004c03a 	cmpne	r2,r2,zero
  803270:	1000031e 	bne	r2,zero,803280 <tick+0x21fc>
  803274:	00800044 	movi	r2,1
  803278:	e0bfbc15 	stw	r2,-272(fp)
  80327c:	00000106 	br	803284 <tick+0x2200>
  803280:	e03fbc15 	stw	zero,-272(fp)
  803284:	e0ffbc17 	ldw	r3,-272(fp)
  803288:	1805883a 	mov	r2,r3
  80328c:	d0a754c5 	stb	r2,-25261(gp)
      g101 =((g100b&&_cg100)||(g112&&(!(_cg112))));
  803290:	d0a77783 	ldbu	r2,-25122(gp)
  803294:	10803fcc 	andi	r2,r2,255
  803298:	1080201c 	xori	r2,r2,128
  80329c:	10bfe004 	addi	r2,r2,-128
  8032a0:	1005003a 	cmpeq	r2,r2,zero
  8032a4:	1000061e 	bne	r2,zero,8032c0 <tick+0x223c>
  8032a8:	d0a75743 	ldbu	r2,-25251(gp)
  8032ac:	10803fcc 	andi	r2,r2,255
  8032b0:	1080201c 	xori	r2,r2,128
  8032b4:	10bfe004 	addi	r2,r2,-128
  8032b8:	1004c03a 	cmpne	r2,r2,zero
  8032bc:	10000c1e 	bne	r2,zero,8032f0 <tick+0x226c>
  8032c0:	d0a736c3 	ldbu	r2,-25381(gp)
  8032c4:	10803fcc 	andi	r2,r2,255
  8032c8:	1080201c 	xori	r2,r2,128
  8032cc:	10bfe004 	addi	r2,r2,-128
  8032d0:	1005003a 	cmpeq	r2,r2,zero
  8032d4:	1000091e 	bne	r2,zero,8032fc <tick+0x2278>
  8032d8:	d0a76543 	ldbu	r2,-25195(gp)
  8032dc:	10803fcc 	andi	r2,r2,255
  8032e0:	1080201c 	xori	r2,r2,128
  8032e4:	10bfe004 	addi	r2,r2,-128
  8032e8:	1004c03a 	cmpne	r2,r2,zero
  8032ec:	1000031e 	bne	r2,zero,8032fc <tick+0x2278>
  8032f0:	00800044 	movi	r2,1
  8032f4:	e0bfbb15 	stw	r2,-276(fp)
  8032f8:	00000106 	br	803300 <tick+0x227c>
  8032fc:	e03fbb15 	stw	zero,-276(fp)
  803300:	e0ffbb17 	ldw	r3,-276(fp)
  803304:	1805883a 	mov	r2,r3
  803308:	d0a756c5 	stb	r2,-25253(gp)
      g104 =((g107&&(!(_cg107)))||g103||g110);
  80330c:	d0a76403 	ldbu	r2,-25200(gp)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	1005003a 	cmpeq	r2,r2,zero
  803320:	1000061e 	bne	r2,zero,80333c <tick+0x22b8>
  803324:	d0a74ec3 	ldbu	r2,-25285(gp)
  803328:	10803fcc 	andi	r2,r2,255
  80332c:	1080201c 	xori	r2,r2,128
  803330:	10bfe004 	addi	r2,r2,-128
  803334:	1005003a 	cmpeq	r2,r2,zero
  803338:	10000c1e 	bne	r2,zero,80336c <tick+0x22e8>
  80333c:	d0a73803 	ldbu	r2,-25376(gp)
  803340:	10803fcc 	andi	r2,r2,255
  803344:	1080201c 	xori	r2,r2,128
  803348:	10bfe004 	addi	r2,r2,-128
  80334c:	1004c03a 	cmpne	r2,r2,zero
  803350:	1000061e 	bne	r2,zero,80336c <tick+0x22e8>
  803354:	d0a750c3 	ldbu	r2,-25277(gp)
  803358:	10803fcc 	andi	r2,r2,255
  80335c:	1080201c 	xori	r2,r2,128
  803360:	10bfe004 	addi	r2,r2,-128
  803364:	1005003a 	cmpeq	r2,r2,zero
  803368:	1000031e 	bne	r2,zero,803378 <tick+0x22f4>
  80336c:	00800044 	movi	r2,1
  803370:	e0bfba15 	stw	r2,-280(fp)
  803374:	00000106 	br	80337c <tick+0x22f8>
  803378:	e03fba15 	stw	zero,-280(fp)
  80337c:	e0ffba17 	ldw	r3,-280(fp)
  803380:	1805883a 	mov	r2,r3
  803384:	d0a76585 	stb	r2,-25194(gp)
      g115 = g1;
  803388:	d0a74003 	ldbu	r2,-25344(gp)
  80338c:	d0a73d45 	stb	r2,-25355(gp)
      g125 =(PRE_g124);
  803390:	d0a74843 	ldbu	r2,-25311(gp)
  803394:	d0a772c5 	stb	r2,-25141(gp)
      _cg125 = VSense;
  803398:	d0a75883 	ldbu	r2,-25246(gp)
  80339c:	d0a73a05 	stb	r2,-25368(gp)
      g133 =(g125&&(!(_cg125)));
  8033a0:	d0a772c3 	ldbu	r2,-25141(gp)
  8033a4:	10803fcc 	andi	r2,r2,255
  8033a8:	1080201c 	xori	r2,r2,128
  8033ac:	10bfe004 	addi	r2,r2,-128
  8033b0:	1005003a 	cmpeq	r2,r2,zero
  8033b4:	1000091e 	bne	r2,zero,8033dc <tick+0x2358>
  8033b8:	d0a73a03 	ldbu	r2,-25368(gp)
  8033bc:	10803fcc 	andi	r2,r2,255
  8033c0:	1080201c 	xori	r2,r2,128
  8033c4:	10bfe004 	addi	r2,r2,-128
  8033c8:	1004c03a 	cmpne	r2,r2,zero
  8033cc:	1000031e 	bne	r2,zero,8033dc <tick+0x2358>
  8033d0:	00800044 	movi	r2,1
  8033d4:	e0bfb915 	stw	r2,-284(fp)
  8033d8:	00000106 	br	8033e0 <tick+0x235c>
  8033dc:	e03fb915 	stw	zero,-284(fp)
  8033e0:	e0ffb917 	ldw	r3,-284(fp)
  8033e4:	1805883a 	mov	r2,r3
  8033e8:	d0a77a85 	stb	r2,-25110(gp)
      _cg133 = VPace;
  8033ec:	d0a77803 	ldbu	r2,-25120(gp)
  8033f0:	d0a75985 	stb	r2,-25242(gp)
      g126 =((g125&&_cg125)||(g133&&_cg133));
  8033f4:	d0a772c3 	ldbu	r2,-25141(gp)
  8033f8:	10803fcc 	andi	r2,r2,255
  8033fc:	1080201c 	xori	r2,r2,128
  803400:	10bfe004 	addi	r2,r2,-128
  803404:	1005003a 	cmpeq	r2,r2,zero
  803408:	1000061e 	bne	r2,zero,803424 <tick+0x23a0>
  80340c:	d0a73a03 	ldbu	r2,-25368(gp)
  803410:	10803fcc 	andi	r2,r2,255
  803414:	1080201c 	xori	r2,r2,128
  803418:	10bfe004 	addi	r2,r2,-128
  80341c:	1004c03a 	cmpne	r2,r2,zero
  803420:	10000c1e 	bne	r2,zero,803454 <tick+0x23d0>
  803424:	d0a77a83 	ldbu	r2,-25110(gp)
  803428:	10803fcc 	andi	r2,r2,255
  80342c:	1080201c 	xori	r2,r2,128
  803430:	10bfe004 	addi	r2,r2,-128
  803434:	1005003a 	cmpeq	r2,r2,zero
  803438:	1000091e 	bne	r2,zero,803460 <tick+0x23dc>
  80343c:	d0a75983 	ldbu	r2,-25242(gp)
  803440:	10803fcc 	andi	r2,r2,255
  803444:	1080201c 	xori	r2,r2,128
  803448:	10bfe004 	addi	r2,r2,-128
  80344c:	1005003a 	cmpeq	r2,r2,zero
  803450:	1000031e 	bne	r2,zero,803460 <tick+0x23dc>
  803454:	00800044 	movi	r2,1
  803458:	e0bfb815 	stw	r2,-288(fp)
  80345c:	00000106 	br	803464 <tick+0x23e0>
  803460:	e03fb815 	stw	zero,-288(fp)
  803464:	e0ffb817 	ldw	r3,-288(fp)
  803468:	1805883a 	mov	r2,r3
  80346c:	d0a741c5 	stb	r2,-25337(gp)
      if(g126){
  803470:	d0a741c3 	ldbu	r2,-25337(gp)
  803474:	10803fcc 	andi	r2,r2,255
  803478:	1080201c 	xori	r2,r2,128
  80347c:	10bfe004 	addi	r2,r2,-128
  803480:	1005003a 	cmpeq	r2,r2,zero
  803484:	1000021e 	bne	r2,zero,803490 <tick+0x240c>
         _compsys303_a2_local_URI_start =(_compsys303_a2_local_URI_start||1);
  803488:	00800044 	movi	r2,1
  80348c:	d0a75605 	stb	r2,-25256(gp)
      }
      g130 =(PRE_g129);
  803490:	d0a764c3 	ldbu	r2,-25197(gp)
  803494:	d0a77645 	stb	r2,-25127(gp)
      _cg130 = VSense;
  803498:	d0a75883 	ldbu	r2,-25246(gp)
  80349c:	d0a75b05 	stb	r2,-25236(gp)
      g132 =(g130&&(!(_cg130)));
  8034a0:	d0a77643 	ldbu	r2,-25127(gp)
  8034a4:	10803fcc 	andi	r2,r2,255
  8034a8:	1080201c 	xori	r2,r2,128
  8034ac:	10bfe004 	addi	r2,r2,-128
  8034b0:	1005003a 	cmpeq	r2,r2,zero
  8034b4:	1000091e 	bne	r2,zero,8034dc <tick+0x2458>
  8034b8:	d0a75b03 	ldbu	r2,-25236(gp)
  8034bc:	10803fcc 	andi	r2,r2,255
  8034c0:	1080201c 	xori	r2,r2,128
  8034c4:	10bfe004 	addi	r2,r2,-128
  8034c8:	1004c03a 	cmpne	r2,r2,zero
  8034cc:	1000031e 	bne	r2,zero,8034dc <tick+0x2458>
  8034d0:	00800044 	movi	r2,1
  8034d4:	e0bfb715 	stw	r2,-292(fp)
  8034d8:	00000106 	br	8034e0 <tick+0x245c>
  8034dc:	e03fb715 	stw	zero,-292(fp)
  8034e0:	e0ffb717 	ldw	r3,-292(fp)
  8034e4:	1805883a 	mov	r2,r3
  8034e8:	d0a74945 	stb	r2,-25307(gp)
      _cg132 = VPace;
  8034ec:	d0a77803 	ldbu	r2,-25120(gp)
  8034f0:	d0a74bc5 	stb	r2,-25297(gp)
      g131 =((g130&&_cg130)||(g132&&_cg132));
  8034f4:	d0a77643 	ldbu	r2,-25127(gp)
  8034f8:	10803fcc 	andi	r2,r2,255
  8034fc:	1080201c 	xori	r2,r2,128
  803500:	10bfe004 	addi	r2,r2,-128
  803504:	1005003a 	cmpeq	r2,r2,zero
  803508:	1000061e 	bne	r2,zero,803524 <tick+0x24a0>
  80350c:	d0a75b03 	ldbu	r2,-25236(gp)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	1004c03a 	cmpne	r2,r2,zero
  803520:	10000c1e 	bne	r2,zero,803554 <tick+0x24d0>
  803524:	d0a74943 	ldbu	r2,-25307(gp)
  803528:	10803fcc 	andi	r2,r2,255
  80352c:	1080201c 	xori	r2,r2,128
  803530:	10bfe004 	addi	r2,r2,-128
  803534:	1005003a 	cmpeq	r2,r2,zero
  803538:	1000091e 	bne	r2,zero,803560 <tick+0x24dc>
  80353c:	d0a74bc3 	ldbu	r2,-25297(gp)
  803540:	10803fcc 	andi	r2,r2,255
  803544:	1080201c 	xori	r2,r2,128
  803548:	10bfe004 	addi	r2,r2,-128
  80354c:	1005003a 	cmpeq	r2,r2,zero
  803550:	1000031e 	bne	r2,zero,803560 <tick+0x24dc>
  803554:	00800044 	movi	r2,1
  803558:	e0bfb615 	stw	r2,-296(fp)
  80355c:	00000106 	br	803564 <tick+0x24e0>
  803560:	e03fb615 	stw	zero,-296(fp)
  803564:	e0ffb617 	ldw	r3,-296(fp)
  803568:	1805883a 	mov	r2,r3
  80356c:	d0a75845 	stb	r2,-25247(gp)
      if(g131){
  803570:	d0a75843 	ldbu	r2,-25247(gp)
  803574:	10803fcc 	andi	r2,r2,255
  803578:	1080201c 	xori	r2,r2,128
  80357c:	10bfe004 	addi	r2,r2,-128
  803580:	1005003a 	cmpeq	r2,r2,zero
  803584:	1000021e 	bne	r2,zero,803590 <tick+0x250c>
         _compsys303_a2_local_URI_start =(_compsys303_a2_local_URI_start||1);
  803588:	00800044 	movi	r2,1
  80358c:	d0a75605 	stb	r2,-25256(gp)
      }
      g117 =(PRE_g116);
  803590:	d0a74b83 	ldbu	r2,-25298(gp)
  803594:	d0a74c45 	stb	r2,-25295(gp)
      g117b = g117;
  803598:	d0a74c43 	ldbu	r2,-25295(gp)
  80359c:	d0a76a05 	stb	r2,-25176(gp)
      _cg117 = _compsys303_a2_local_URI_start;
  8035a0:	d0a75603 	ldbu	r2,-25256(gp)
  8035a4:	d0a76485 	stb	r2,-25198(gp)
      g116 =(g115||(g119b&&_cg119)||(g117b&&(!(_cg117)))||g121);
  8035a8:	d0a73d43 	ldbu	r2,-25355(gp)
  8035ac:	10803fcc 	andi	r2,r2,255
  8035b0:	1080201c 	xori	r2,r2,128
  8035b4:	10bfe004 	addi	r2,r2,-128
  8035b8:	1004c03a 	cmpne	r2,r2,zero
  8035bc:	10001e1e 	bne	r2,zero,803638 <tick+0x25b4>
  8035c0:	d0a746c3 	ldbu	r2,-25317(gp)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	1005003a 	cmpeq	r2,r2,zero
  8035d4:	1000061e 	bne	r2,zero,8035f0 <tick+0x256c>
  8035d8:	d0a74643 	ldbu	r2,-25319(gp)
  8035dc:	10803fcc 	andi	r2,r2,255
  8035e0:	1080201c 	xori	r2,r2,128
  8035e4:	10bfe004 	addi	r2,r2,-128
  8035e8:	1004c03a 	cmpne	r2,r2,zero
  8035ec:	1000121e 	bne	r2,zero,803638 <tick+0x25b4>
  8035f0:	d0a76a03 	ldbu	r2,-25176(gp)
  8035f4:	10803fcc 	andi	r2,r2,255
  8035f8:	1080201c 	xori	r2,r2,128
  8035fc:	10bfe004 	addi	r2,r2,-128
  803600:	1005003a 	cmpeq	r2,r2,zero
  803604:	1000061e 	bne	r2,zero,803620 <tick+0x259c>
  803608:	d0a76483 	ldbu	r2,-25198(gp)
  80360c:	10803fcc 	andi	r2,r2,255
  803610:	1080201c 	xori	r2,r2,128
  803614:	10bfe004 	addi	r2,r2,-128
  803618:	1005003a 	cmpeq	r2,r2,zero
  80361c:	1000061e 	bne	r2,zero,803638 <tick+0x25b4>
  803620:	d0a77743 	ldbu	r2,-25123(gp)
  803624:	10803fcc 	andi	r2,r2,255
  803628:	1080201c 	xori	r2,r2,128
  80362c:	10bfe004 	addi	r2,r2,-128
  803630:	1005003a 	cmpeq	r2,r2,zero
  803634:	1000031e 	bne	r2,zero,803644 <tick+0x25c0>
  803638:	00800044 	movi	r2,1
  80363c:	e0bfb515 	stw	r2,-300(fp)
  803640:	00000106 	br	803648 <tick+0x25c4>
  803644:	e03fb515 	stw	zero,-300(fp)
  803648:	e0ffb517 	ldw	r3,-300(fp)
  80364c:	1805883a 	mov	r2,r3
  803650:	d0a76905 	stb	r2,-25180(gp)
      g118 =((g117b&&_cg117)||(g120&&(!(_cg120))));
  803654:	d0a76a03 	ldbu	r2,-25176(gp)
  803658:	10803fcc 	andi	r2,r2,255
  80365c:	1080201c 	xori	r2,r2,128
  803660:	10bfe004 	addi	r2,r2,-128
  803664:	1005003a 	cmpeq	r2,r2,zero
  803668:	1000061e 	bne	r2,zero,803684 <tick+0x2600>
  80366c:	d0a76483 	ldbu	r2,-25198(gp)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	1004c03a 	cmpne	r2,r2,zero
  803680:	10000c1e 	bne	r2,zero,8036b4 <tick+0x2630>
  803684:	d0a77903 	ldbu	r2,-25116(gp)
  803688:	10803fcc 	andi	r2,r2,255
  80368c:	1080201c 	xori	r2,r2,128
  803690:	10bfe004 	addi	r2,r2,-128
  803694:	1005003a 	cmpeq	r2,r2,zero
  803698:	1000091e 	bne	r2,zero,8036c0 <tick+0x263c>
  80369c:	d0a77943 	ldbu	r2,-25115(gp)
  8036a0:	10803fcc 	andi	r2,r2,255
  8036a4:	1080201c 	xori	r2,r2,128
  8036a8:	10bfe004 	addi	r2,r2,-128
  8036ac:	1004c03a 	cmpne	r2,r2,zero
  8036b0:	1000031e 	bne	r2,zero,8036c0 <tick+0x263c>
  8036b4:	00800044 	movi	r2,1
  8036b8:	e0bfb415 	stw	r2,-304(fp)
  8036bc:	00000106 	br	8036c4 <tick+0x2640>
  8036c0:	e03fb415 	stw	zero,-304(fp)
  8036c4:	e0ffb417 	ldw	r3,-304(fp)
  8036c8:	1805883a 	mov	r2,r3
  8036cc:	d0a74685 	stb	r2,-25318(gp)
      g123 = g1;
  8036d0:	d0a74003 	ldbu	r2,-25344(gp)
  8036d4:	d0a73f05 	stb	r2,-25348(gp)
      g124 =(g123||(g133&&(!(_cg133))));
  8036d8:	d0a73f03 	ldbu	r2,-25348(gp)
  8036dc:	10803fcc 	andi	r2,r2,255
  8036e0:	1080201c 	xori	r2,r2,128
  8036e4:	10bfe004 	addi	r2,r2,-128
  8036e8:	1004c03a 	cmpne	r2,r2,zero
  8036ec:	10000c1e 	bne	r2,zero,803720 <tick+0x269c>
  8036f0:	d0a77a83 	ldbu	r2,-25110(gp)
  8036f4:	10803fcc 	andi	r2,r2,255
  8036f8:	1080201c 	xori	r2,r2,128
  8036fc:	10bfe004 	addi	r2,r2,-128
  803700:	1005003a 	cmpeq	r2,r2,zero
  803704:	1000091e 	bne	r2,zero,80372c <tick+0x26a8>
  803708:	d0a75983 	ldbu	r2,-25242(gp)
  80370c:	10803fcc 	andi	r2,r2,255
  803710:	1080201c 	xori	r2,r2,128
  803714:	10bfe004 	addi	r2,r2,-128
  803718:	1004c03a 	cmpne	r2,r2,zero
  80371c:	1000031e 	bne	r2,zero,80372c <tick+0x26a8>
  803720:	00800044 	movi	r2,1
  803724:	e0bfb315 	stw	r2,-308(fp)
  803728:	00000106 	br	803730 <tick+0x26ac>
  80372c:	e03fb315 	stw	zero,-308(fp)
  803730:	e0ffb317 	ldw	r3,-308(fp)
  803734:	1805883a 	mov	r2,r3
  803738:	d0a76a85 	stb	r2,-25174(gp)
      g128 =(PRE_g127);
  80373c:	d0a77503 	ldbu	r2,-25132(gp)
  803740:	d0a75385 	stb	r2,-25266(gp)
      g128b = g128;
  803744:	d0a75383 	ldbu	r2,-25266(gp)
  803748:	d0a76d05 	stb	r2,-25164(gp)
      _cg128 = _compsys303_a2_local_URI_ex;
  80374c:	d0a76c43 	ldbu	r2,-25167(gp)
  803750:	d0a73d05 	stb	r2,-25356(gp)
      g127 =(g126||g131||(g128b&&(!(_cg128))));
  803754:	d0a741c3 	ldbu	r2,-25337(gp)
  803758:	10803fcc 	andi	r2,r2,255
  80375c:	1080201c 	xori	r2,r2,128
  803760:	10bfe004 	addi	r2,r2,-128
  803764:	1004c03a 	cmpne	r2,r2,zero
  803768:	1000121e 	bne	r2,zero,8037b4 <tick+0x2730>
  80376c:	d0a75843 	ldbu	r2,-25247(gp)
  803770:	10803fcc 	andi	r2,r2,255
  803774:	1080201c 	xori	r2,r2,128
  803778:	10bfe004 	addi	r2,r2,-128
  80377c:	1004c03a 	cmpne	r2,r2,zero
  803780:	10000c1e 	bne	r2,zero,8037b4 <tick+0x2730>
  803784:	d0a76d03 	ldbu	r2,-25164(gp)
  803788:	10803fcc 	andi	r2,r2,255
  80378c:	1080201c 	xori	r2,r2,128
  803790:	10bfe004 	addi	r2,r2,-128
  803794:	1005003a 	cmpeq	r2,r2,zero
  803798:	1000091e 	bne	r2,zero,8037c0 <tick+0x273c>
  80379c:	d0a73d03 	ldbu	r2,-25356(gp)
  8037a0:	10803fcc 	andi	r2,r2,255
  8037a4:	1080201c 	xori	r2,r2,128
  8037a8:	10bfe004 	addi	r2,r2,-128
  8037ac:	1004c03a 	cmpne	r2,r2,zero
  8037b0:	1000031e 	bne	r2,zero,8037c0 <tick+0x273c>
  8037b4:	00800044 	movi	r2,1
  8037b8:	e0bfb215 	stw	r2,-312(fp)
  8037bc:	00000106 	br	8037c4 <tick+0x2740>
  8037c0:	e03fb215 	stw	zero,-312(fp)
  8037c4:	e0ffb217 	ldw	r3,-312(fp)
  8037c8:	1805883a 	mov	r2,r3
  8037cc:	d0a739c5 	stb	r2,-25369(gp)
      g129 =((g132&&(!(_cg132)))||(g128b&&_cg128));
  8037d0:	d0a74943 	ldbu	r2,-25307(gp)
  8037d4:	10803fcc 	andi	r2,r2,255
  8037d8:	1080201c 	xori	r2,r2,128
  8037dc:	10bfe004 	addi	r2,r2,-128
  8037e0:	1005003a 	cmpeq	r2,r2,zero
  8037e4:	1000061e 	bne	r2,zero,803800 <tick+0x277c>
  8037e8:	d0a74bc3 	ldbu	r2,-25297(gp)
  8037ec:	10803fcc 	andi	r2,r2,255
  8037f0:	1080201c 	xori	r2,r2,128
  8037f4:	10bfe004 	addi	r2,r2,-128
  8037f8:	1005003a 	cmpeq	r2,r2,zero
  8037fc:	10000c1e 	bne	r2,zero,803830 <tick+0x27ac>
  803800:	d0a76d03 	ldbu	r2,-25164(gp)
  803804:	10803fcc 	andi	r2,r2,255
  803808:	1080201c 	xori	r2,r2,128
  80380c:	10bfe004 	addi	r2,r2,-128
  803810:	1005003a 	cmpeq	r2,r2,zero
  803814:	1000091e 	bne	r2,zero,80383c <tick+0x27b8>
  803818:	d0a73d03 	ldbu	r2,-25356(gp)
  80381c:	10803fcc 	andi	r2,r2,255
  803820:	1080201c 	xori	r2,r2,128
  803824:	10bfe004 	addi	r2,r2,-128
  803828:	1005003a 	cmpeq	r2,r2,zero
  80382c:	1000031e 	bne	r2,zero,80383c <tick+0x27b8>
  803830:	00800044 	movi	r2,1
  803834:	e0bfb115 	stw	r2,-316(fp)
  803838:	00000106 	br	803840 <tick+0x27bc>
  80383c:	e03fb115 	stw	zero,-316(fp)
  803840:	e0ffb117 	ldw	r3,-316(fp)
  803844:	1805883a 	mov	r2,r3
  803848:	d0a75805 	stb	r2,-25248(gp)
      g17_e1 =(!((g4||g7||g9||g12)));
  80384c:	d0a73403 	ldbu	r2,-25392(gp)
  803850:	10803fcc 	andi	r2,r2,255
  803854:	1080201c 	xori	r2,r2,128
  803858:	10bfe004 	addi	r2,r2,-128
  80385c:	1004c03a 	cmpne	r2,r2,zero
  803860:	1000151e 	bne	r2,zero,8038b8 <tick+0x2834>
  803864:	d0a75183 	ldbu	r2,-25274(gp)
  803868:	10803fcc 	andi	r2,r2,255
  80386c:	1080201c 	xori	r2,r2,128
  803870:	10bfe004 	addi	r2,r2,-128
  803874:	1004c03a 	cmpne	r2,r2,zero
  803878:	10000f1e 	bne	r2,zero,8038b8 <tick+0x2834>
  80387c:	d0a73983 	ldbu	r2,-25370(gp)
  803880:	10803fcc 	andi	r2,r2,255
  803884:	1080201c 	xori	r2,r2,128
  803888:	10bfe004 	addi	r2,r2,-128
  80388c:	1004c03a 	cmpne	r2,r2,zero
  803890:	1000091e 	bne	r2,zero,8038b8 <tick+0x2834>
  803894:	d0a74243 	ldbu	r2,-25335(gp)
  803898:	10803fcc 	andi	r2,r2,255
  80389c:	1080201c 	xori	r2,r2,128
  8038a0:	10bfe004 	addi	r2,r2,-128
  8038a4:	1004c03a 	cmpne	r2,r2,zero
  8038a8:	1000031e 	bne	r2,zero,8038b8 <tick+0x2834>
  8038ac:	00800044 	movi	r2,1
  8038b0:	e0bfb015 	stw	r2,-320(fp)
  8038b4:	00000106 	br	8038bc <tick+0x2838>
  8038b8:	e03fb015 	stw	zero,-320(fp)
  8038bc:	e0ffb017 	ldw	r3,-320(fp)
  8038c0:	1805883a 	mov	r2,r3
  8038c4:	d0a76c05 	stb	r2,-25168(gp)
      g25_e2 =(!((g20||g22)));
  8038c8:	d0a75e03 	ldbu	r2,-25224(gp)
  8038cc:	10803fcc 	andi	r2,r2,255
  8038d0:	1080201c 	xori	r2,r2,128
  8038d4:	10bfe004 	addi	r2,r2,-128
  8038d8:	1004c03a 	cmpne	r2,r2,zero
  8038dc:	1000091e 	bne	r2,zero,803904 <tick+0x2880>
  8038e0:	d0a77183 	ldbu	r2,-25146(gp)
  8038e4:	10803fcc 	andi	r2,r2,255
  8038e8:	1080201c 	xori	r2,r2,128
  8038ec:	10bfe004 	addi	r2,r2,-128
  8038f0:	1004c03a 	cmpne	r2,r2,zero
  8038f4:	1000031e 	bne	r2,zero,803904 <tick+0x2880>
  8038f8:	00800044 	movi	r2,1
  8038fc:	e0bfaf15 	stw	r2,-324(fp)
  803900:	00000106 	br	803908 <tick+0x2884>
  803904:	e03faf15 	stw	zero,-324(fp)
  803908:	e0ffaf17 	ldw	r3,-324(fp)
  80390c:	1805883a 	mov	r2,r3
  803910:	d0a75705 	stb	r2,-25252(gp)
      g33_e3 =(!((g28||g31)));
  803914:	d0a771c3 	ldbu	r2,-25145(gp)
  803918:	10803fcc 	andi	r2,r2,255
  80391c:	1080201c 	xori	r2,r2,128
  803920:	10bfe004 	addi	r2,r2,-128
  803924:	1004c03a 	cmpne	r2,r2,zero
  803928:	1000091e 	bne	r2,zero,803950 <tick+0x28cc>
  80392c:	d0a74483 	ldbu	r2,-25326(gp)
  803930:	10803fcc 	andi	r2,r2,255
  803934:	1080201c 	xori	r2,r2,128
  803938:	10bfe004 	addi	r2,r2,-128
  80393c:	1004c03a 	cmpne	r2,r2,zero
  803940:	1000031e 	bne	r2,zero,803950 <tick+0x28cc>
  803944:	00800044 	movi	r2,1
  803948:	e0bfae15 	stw	r2,-328(fp)
  80394c:	00000106 	br	803954 <tick+0x28d0>
  803950:	e03fae15 	stw	zero,-328(fp)
  803954:	e0ffae17 	ldw	r3,-328(fp)
  803958:	1805883a 	mov	r2,r3
  80395c:	d0a77e45 	stb	r2,-25095(gp)
      g40_e4 =(!((g36||g38)));
  803960:	d0a76183 	ldbu	r2,-25210(gp)
  803964:	10803fcc 	andi	r2,r2,255
  803968:	1080201c 	xori	r2,r2,128
  80396c:	10bfe004 	addi	r2,r2,-128
  803970:	1004c03a 	cmpne	r2,r2,zero
  803974:	1000091e 	bne	r2,zero,80399c <tick+0x2918>
  803978:	d0a74ac3 	ldbu	r2,-25301(gp)
  80397c:	10803fcc 	andi	r2,r2,255
  803980:	1080201c 	xori	r2,r2,128
  803984:	10bfe004 	addi	r2,r2,-128
  803988:	1004c03a 	cmpne	r2,r2,zero
  80398c:	1000031e 	bne	r2,zero,80399c <tick+0x2918>
  803990:	00800044 	movi	r2,1
  803994:	e0bfad15 	stw	r2,-332(fp)
  803998:	00000106 	br	8039a0 <tick+0x291c>
  80399c:	e03fad15 	stw	zero,-332(fp)
  8039a0:	e0ffad17 	ldw	r3,-332(fp)
  8039a4:	1805883a 	mov	r2,r3
  8039a8:	d0a77285 	stb	r2,-25142(gp)
      g63_e5 =(!((g43||g46||g49||g57||g51)));
  8039ac:	d0a760c3 	ldbu	r2,-25213(gp)
  8039b0:	10803fcc 	andi	r2,r2,255
  8039b4:	1080201c 	xori	r2,r2,128
  8039b8:	10bfe004 	addi	r2,r2,-128
  8039bc:	1004c03a 	cmpne	r2,r2,zero
  8039c0:	10001b1e 	bne	r2,zero,803a30 <tick+0x29ac>
  8039c4:	d0a76203 	ldbu	r2,-25208(gp)
  8039c8:	10803fcc 	andi	r2,r2,255
  8039cc:	1080201c 	xori	r2,r2,128
  8039d0:	10bfe004 	addi	r2,r2,-128
  8039d4:	1004c03a 	cmpne	r2,r2,zero
  8039d8:	1000151e 	bne	r2,zero,803a30 <tick+0x29ac>
  8039dc:	d0a75103 	ldbu	r2,-25276(gp)
  8039e0:	10803fcc 	andi	r2,r2,255
  8039e4:	1080201c 	xori	r2,r2,128
  8039e8:	10bfe004 	addi	r2,r2,-128
  8039ec:	1004c03a 	cmpne	r2,r2,zero
  8039f0:	10000f1e 	bne	r2,zero,803a30 <tick+0x29ac>
  8039f4:	d0a76703 	ldbu	r2,-25188(gp)
  8039f8:	10803fcc 	andi	r2,r2,255
  8039fc:	1080201c 	xori	r2,r2,128
  803a00:	10bfe004 	addi	r2,r2,-128
  803a04:	1004c03a 	cmpne	r2,r2,zero
  803a08:	1000091e 	bne	r2,zero,803a30 <tick+0x29ac>
  803a0c:	d0a76383 	ldbu	r2,-25202(gp)
  803a10:	10803fcc 	andi	r2,r2,255
  803a14:	1080201c 	xori	r2,r2,128
  803a18:	10bfe004 	addi	r2,r2,-128
  803a1c:	1004c03a 	cmpne	r2,r2,zero
  803a20:	1000031e 	bne	r2,zero,803a30 <tick+0x29ac>
  803a24:	00800044 	movi	r2,1
  803a28:	e0bfac15 	stw	r2,-336(fp)
  803a2c:	00000106 	br	803a34 <tick+0x29b0>
  803a30:	e03fac15 	stw	zero,-336(fp)
  803a34:	e0ffac17 	ldw	r3,-336(fp)
  803a38:	1805883a 	mov	r2,r3
  803a3c:	d0a76f45 	stb	r2,-25155(gp)
      g71_e6 =(!((g66||g68)));
  803a40:	d0a75543 	ldbu	r2,-25259(gp)
  803a44:	10803fcc 	andi	r2,r2,255
  803a48:	1080201c 	xori	r2,r2,128
  803a4c:	10bfe004 	addi	r2,r2,-128
  803a50:	1004c03a 	cmpne	r2,r2,zero
  803a54:	1000091e 	bne	r2,zero,803a7c <tick+0x29f8>
  803a58:	d0a77043 	ldbu	r2,-25151(gp)
  803a5c:	10803fcc 	andi	r2,r2,255
  803a60:	1080201c 	xori	r2,r2,128
  803a64:	10bfe004 	addi	r2,r2,-128
  803a68:	1004c03a 	cmpne	r2,r2,zero
  803a6c:	1000031e 	bne	r2,zero,803a7c <tick+0x29f8>
  803a70:	00800044 	movi	r2,1
  803a74:	e0bfab15 	stw	r2,-340(fp)
  803a78:	00000106 	br	803a80 <tick+0x29fc>
  803a7c:	e03fab15 	stw	zero,-340(fp)
  803a80:	e0ffab17 	ldw	r3,-340(fp)
  803a84:	1805883a 	mov	r2,r3
  803a88:	d0a75a05 	stb	r2,-25240(gp)
      g78_e7 =(!((g74||g76)));
  803a8c:	d0a77e03 	ldbu	r2,-25096(gp)
  803a90:	10803fcc 	andi	r2,r2,255
  803a94:	1080201c 	xori	r2,r2,128
  803a98:	10bfe004 	addi	r2,r2,-128
  803a9c:	1004c03a 	cmpne	r2,r2,zero
  803aa0:	1000091e 	bne	r2,zero,803ac8 <tick+0x2a44>
  803aa4:	d0a74443 	ldbu	r2,-25327(gp)
  803aa8:	10803fcc 	andi	r2,r2,255
  803aac:	1080201c 	xori	r2,r2,128
  803ab0:	10bfe004 	addi	r2,r2,-128
  803ab4:	1004c03a 	cmpne	r2,r2,zero
  803ab8:	1000031e 	bne	r2,zero,803ac8 <tick+0x2a44>
  803abc:	00800044 	movi	r2,1
  803ac0:	e0bfaa15 	stw	r2,-344(fp)
  803ac4:	00000106 	br	803acc <tick+0x2a48>
  803ac8:	e03faa15 	stw	zero,-344(fp)
  803acc:	e0ffaa17 	ldw	r3,-344(fp)
  803ad0:	1805883a 	mov	r2,r3
  803ad4:	d0a74a45 	stb	r2,-25303(gp)
      g86_e8 =(!((g81||g84)));
  803ad8:	d0a769c3 	ldbu	r2,-25177(gp)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	1080201c 	xori	r2,r2,128
  803ae4:	10bfe004 	addi	r2,r2,-128
  803ae8:	1004c03a 	cmpne	r2,r2,zero
  803aec:	1000091e 	bne	r2,zero,803b14 <tick+0x2a90>
  803af0:	d0a74583 	ldbu	r2,-25322(gp)
  803af4:	10803fcc 	andi	r2,r2,255
  803af8:	1080201c 	xori	r2,r2,128
  803afc:	10bfe004 	addi	r2,r2,-128
  803b00:	1004c03a 	cmpne	r2,r2,zero
  803b04:	1000031e 	bne	r2,zero,803b14 <tick+0x2a90>
  803b08:	00800044 	movi	r2,1
  803b0c:	e0bfa915 	stw	r2,-348(fp)
  803b10:	00000106 	br	803b18 <tick+0x2a94>
  803b14:	e03fa915 	stw	zero,-348(fp)
  803b18:	e0ffa917 	ldw	r3,-348(fp)
  803b1c:	1805883a 	mov	r2,r3
  803b20:	d0a738c5 	stb	r2,-25373(gp)
      g94_e9 =(!((g89||g91)));
  803b24:	d0a761c3 	ldbu	r2,-25209(gp)
  803b28:	10803fcc 	andi	r2,r2,255
  803b2c:	1080201c 	xori	r2,r2,128
  803b30:	10bfe004 	addi	r2,r2,-128
  803b34:	1004c03a 	cmpne	r2,r2,zero
  803b38:	1000091e 	bne	r2,zero,803b60 <tick+0x2adc>
  803b3c:	d0a73303 	ldbu	r2,-25396(gp)
  803b40:	10803fcc 	andi	r2,r2,255
  803b44:	1080201c 	xori	r2,r2,128
  803b48:	10bfe004 	addi	r2,r2,-128
  803b4c:	1004c03a 	cmpne	r2,r2,zero
  803b50:	1000031e 	bne	r2,zero,803b60 <tick+0x2adc>
  803b54:	00800044 	movi	r2,1
  803b58:	e0bfa815 	stw	r2,-352(fp)
  803b5c:	00000106 	br	803b64 <tick+0x2ae0>
  803b60:	e03fa815 	stw	zero,-352(fp)
  803b64:	e0ffa817 	ldw	r3,-352(fp)
  803b68:	1805883a 	mov	r2,r3
  803b6c:	d0a73605 	stb	r2,-25384(gp)
      g114_e10 =(!((g97||g100||g102||g105)));
  803b70:	d0a74283 	ldbu	r2,-25334(gp)
  803b74:	10803fcc 	andi	r2,r2,255
  803b78:	1080201c 	xori	r2,r2,128
  803b7c:	10bfe004 	addi	r2,r2,-128
  803b80:	1004c03a 	cmpne	r2,r2,zero
  803b84:	1000151e 	bne	r2,zero,803bdc <tick+0x2b58>
  803b88:	d0a75443 	ldbu	r2,-25263(gp)
  803b8c:	10803fcc 	andi	r2,r2,255
  803b90:	1080201c 	xori	r2,r2,128
  803b94:	10bfe004 	addi	r2,r2,-128
  803b98:	1004c03a 	cmpne	r2,r2,zero
  803b9c:	10000f1e 	bne	r2,zero,803bdc <tick+0x2b58>
  803ba0:	d0a73c83 	ldbu	r2,-25358(gp)
  803ba4:	10803fcc 	andi	r2,r2,255
  803ba8:	1080201c 	xori	r2,r2,128
  803bac:	10bfe004 	addi	r2,r2,-128
  803bb0:	1004c03a 	cmpne	r2,r2,zero
  803bb4:	1000091e 	bne	r2,zero,803bdc <tick+0x2b58>
  803bb8:	d0a74b03 	ldbu	r2,-25300(gp)
  803bbc:	10803fcc 	andi	r2,r2,255
  803bc0:	1080201c 	xori	r2,r2,128
  803bc4:	10bfe004 	addi	r2,r2,-128
  803bc8:	1004c03a 	cmpne	r2,r2,zero
  803bcc:	1000031e 	bne	r2,zero,803bdc <tick+0x2b58>
  803bd0:	00800044 	movi	r2,1
  803bd4:	e0bfa715 	stw	r2,-356(fp)
  803bd8:	00000106 	br	803be0 <tick+0x2b5c>
  803bdc:	e03fa715 	stw	zero,-356(fp)
  803be0:	e0ffa717 	ldw	r3,-356(fp)
  803be4:	1805883a 	mov	r2,r3
  803be8:	d0a73d85 	stb	r2,-25354(gp)
      g122_e11 =(!((g117||g119)));
  803bec:	d0a74c43 	ldbu	r2,-25295(gp)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	1004c03a 	cmpne	r2,r2,zero
  803c00:	1000091e 	bne	r2,zero,803c28 <tick+0x2ba4>
  803c04:	d0a76003 	ldbu	r2,-25216(gp)
  803c08:	10803fcc 	andi	r2,r2,255
  803c0c:	1080201c 	xori	r2,r2,128
  803c10:	10bfe004 	addi	r2,r2,-128
  803c14:	1004c03a 	cmpne	r2,r2,zero
  803c18:	1000031e 	bne	r2,zero,803c28 <tick+0x2ba4>
  803c1c:	00800044 	movi	r2,1
  803c20:	e0bfa615 	stw	r2,-360(fp)
  803c24:	00000106 	br	803c2c <tick+0x2ba8>
  803c28:	e03fa615 	stw	zero,-360(fp)
  803c2c:	e0ffa617 	ldw	r3,-360(fp)
  803c30:	1805883a 	mov	r2,r3
  803c34:	d0a77d85 	stb	r2,-25098(gp)
      g134_e12 =(!((g125||g128||g130)));
  803c38:	d0a772c3 	ldbu	r2,-25141(gp)
  803c3c:	10803fcc 	andi	r2,r2,255
  803c40:	1080201c 	xori	r2,r2,128
  803c44:	10bfe004 	addi	r2,r2,-128
  803c48:	1004c03a 	cmpne	r2,r2,zero
  803c4c:	10000f1e 	bne	r2,zero,803c8c <tick+0x2c08>
  803c50:	d0a75383 	ldbu	r2,-25266(gp)
  803c54:	10803fcc 	andi	r2,r2,255
  803c58:	1080201c 	xori	r2,r2,128
  803c5c:	10bfe004 	addi	r2,r2,-128
  803c60:	1004c03a 	cmpne	r2,r2,zero
  803c64:	1000091e 	bne	r2,zero,803c8c <tick+0x2c08>
  803c68:	d0a77643 	ldbu	r2,-25127(gp)
  803c6c:	10803fcc 	andi	r2,r2,255
  803c70:	1080201c 	xori	r2,r2,128
  803c74:	10bfe004 	addi	r2,r2,-128
  803c78:	1004c03a 	cmpne	r2,r2,zero
  803c7c:	1000031e 	bne	r2,zero,803c8c <tick+0x2c08>
  803c80:	00800044 	movi	r2,1
  803c84:	e0bfa515 	stw	r2,-364(fp)
  803c88:	00000106 	br	803c90 <tick+0x2c0c>
  803c8c:	e03fa515 	stw	zero,-364(fp)
  803c90:	e0ffa517 	ldw	r3,-364(fp)
  803c94:	1805883a 	mov	r2,r3
  803c98:	d0a74a05 	stb	r2,-25304(gp)
      g138_e13 =(!(g137));
  803c9c:	d0a76bc3 	ldbu	r2,-25169(gp)
  803ca0:	10803fcc 	andi	r2,r2,255
  803ca4:	1080201c 	xori	r2,r2,128
  803ca8:	10bfe004 	addi	r2,r2,-128
  803cac:	1005003a 	cmpeq	r2,r2,zero
  803cb0:	d0a76285 	stb	r2,-25206(gp)
      g139_fix0 =((g17_e1||g17)&&(g25_e2||g25)&&(g33_e3||g33)&&(g40_e4||g40));
  803cb4:	d0a76c03 	ldbu	r2,-25168(gp)
  803cb8:	10803fcc 	andi	r2,r2,255
  803cbc:	1080201c 	xori	r2,r2,128
  803cc0:	10bfe004 	addi	r2,r2,-128
  803cc4:	1004c03a 	cmpne	r2,r2,zero
  803cc8:	1000061e 	bne	r2,zero,803ce4 <tick+0x2c60>
  803ccc:	d0a74403 	ldbu	r2,-25328(gp)
  803cd0:	10803fcc 	andi	r2,r2,255
  803cd4:	1080201c 	xori	r2,r2,128
  803cd8:	10bfe004 	addi	r2,r2,-128
  803cdc:	1005003a 	cmpeq	r2,r2,zero
  803ce0:	1000271e 	bne	r2,zero,803d80 <tick+0x2cfc>
  803ce4:	d0a75703 	ldbu	r2,-25252(gp)
  803ce8:	10803fcc 	andi	r2,r2,255
  803cec:	1080201c 	xori	r2,r2,128
  803cf0:	10bfe004 	addi	r2,r2,-128
  803cf4:	1004c03a 	cmpne	r2,r2,zero
  803cf8:	1000061e 	bne	r2,zero,803d14 <tick+0x2c90>
  803cfc:	d0a77003 	ldbu	r2,-25152(gp)
  803d00:	10803fcc 	andi	r2,r2,255
  803d04:	1080201c 	xori	r2,r2,128
  803d08:	10bfe004 	addi	r2,r2,-128
  803d0c:	1005003a 	cmpeq	r2,r2,zero
  803d10:	10001b1e 	bne	r2,zero,803d80 <tick+0x2cfc>
  803d14:	d0a77e43 	ldbu	r2,-25095(gp)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1080201c 	xori	r2,r2,128
  803d20:	10bfe004 	addi	r2,r2,-128
  803d24:	1004c03a 	cmpne	r2,r2,zero
  803d28:	1000061e 	bne	r2,zero,803d44 <tick+0x2cc0>
  803d2c:	d0a75943 	ldbu	r2,-25243(gp)
  803d30:	10803fcc 	andi	r2,r2,255
  803d34:	1080201c 	xori	r2,r2,128
  803d38:	10bfe004 	addi	r2,r2,-128
  803d3c:	1005003a 	cmpeq	r2,r2,zero
  803d40:	10000f1e 	bne	r2,zero,803d80 <tick+0x2cfc>
  803d44:	d0a77283 	ldbu	r2,-25142(gp)
  803d48:	10803fcc 	andi	r2,r2,255
  803d4c:	1080201c 	xori	r2,r2,128
  803d50:	10bfe004 	addi	r2,r2,-128
  803d54:	1004c03a 	cmpne	r2,r2,zero
  803d58:	1000061e 	bne	r2,zero,803d74 <tick+0x2cf0>
  803d5c:	d0a73243 	ldbu	r2,-25399(gp)
  803d60:	10803fcc 	andi	r2,r2,255
  803d64:	1080201c 	xori	r2,r2,128
  803d68:	10bfe004 	addi	r2,r2,-128
  803d6c:	1005003a 	cmpeq	r2,r2,zero
  803d70:	1000031e 	bne	r2,zero,803d80 <tick+0x2cfc>
  803d74:	00800044 	movi	r2,1
  803d78:	e0bfa415 	stw	r2,-368(fp)
  803d7c:	00000106 	br	803d84 <tick+0x2d00>
  803d80:	e03fa415 	stw	zero,-368(fp)
  803d84:	e0ffa417 	ldw	r3,-368(fp)
  803d88:	1805883a 	mov	r2,r3
  803d8c:	d0a744c5 	stb	r2,-25325(gp)
      g139_fix1 =(g139_fix0&&(g63_e5||g63)&&(g71_e6||g71)&&(g78_e7||g78));
  803d90:	d0a744c3 	ldbu	r2,-25325(gp)
  803d94:	10803fcc 	andi	r2,r2,255
  803d98:	1080201c 	xori	r2,r2,128
  803d9c:	10bfe004 	addi	r2,r2,-128
  803da0:	1005003a 	cmpeq	r2,r2,zero
  803da4:	1000271e 	bne	r2,zero,803e44 <tick+0x2dc0>
  803da8:	d0a76f43 	ldbu	r2,-25155(gp)
  803dac:	10803fcc 	andi	r2,r2,255
  803db0:	1080201c 	xori	r2,r2,128
  803db4:	10bfe004 	addi	r2,r2,-128
  803db8:	1004c03a 	cmpne	r2,r2,zero
  803dbc:	1000061e 	bne	r2,zero,803dd8 <tick+0x2d54>
  803dc0:	d0a75dc3 	ldbu	r2,-25225(gp)
  803dc4:	10803fcc 	andi	r2,r2,255
  803dc8:	1080201c 	xori	r2,r2,128
  803dcc:	10bfe004 	addi	r2,r2,-128
  803dd0:	1005003a 	cmpeq	r2,r2,zero
  803dd4:	10001b1e 	bne	r2,zero,803e44 <tick+0x2dc0>
  803dd8:	d0a75a03 	ldbu	r2,-25240(gp)
  803ddc:	10803fcc 	andi	r2,r2,255
  803de0:	1080201c 	xori	r2,r2,128
  803de4:	10bfe004 	addi	r2,r2,-128
  803de8:	1004c03a 	cmpne	r2,r2,zero
  803dec:	1000061e 	bne	r2,zero,803e08 <tick+0x2d84>
  803df0:	d0a740c3 	ldbu	r2,-25341(gp)
  803df4:	10803fcc 	andi	r2,r2,255
  803df8:	1080201c 	xori	r2,r2,128
  803dfc:	10bfe004 	addi	r2,r2,-128
  803e00:	1005003a 	cmpeq	r2,r2,zero
  803e04:	10000f1e 	bne	r2,zero,803e44 <tick+0x2dc0>
  803e08:	d0a74a43 	ldbu	r2,-25303(gp)
  803e0c:	10803fcc 	andi	r2,r2,255
  803e10:	1080201c 	xori	r2,r2,128
  803e14:	10bfe004 	addi	r2,r2,-128
  803e18:	1004c03a 	cmpne	r2,r2,zero
  803e1c:	1000061e 	bne	r2,zero,803e38 <tick+0x2db4>
  803e20:	d0a75903 	ldbu	r2,-25244(gp)
  803e24:	10803fcc 	andi	r2,r2,255
  803e28:	1080201c 	xori	r2,r2,128
  803e2c:	10bfe004 	addi	r2,r2,-128
  803e30:	1005003a 	cmpeq	r2,r2,zero
  803e34:	1000031e 	bne	r2,zero,803e44 <tick+0x2dc0>
  803e38:	00800044 	movi	r2,1
  803e3c:	e0bfa315 	stw	r2,-372(fp)
  803e40:	00000106 	br	803e48 <tick+0x2dc4>
  803e44:	e03fa315 	stw	zero,-372(fp)
  803e48:	e0ffa317 	ldw	r3,-372(fp)
  803e4c:	1805883a 	mov	r2,r3
  803e50:	d0a73505 	stb	r2,-25388(gp)
      g139_fix2 =(g17||g25||g33||g40);
  803e54:	d0a74403 	ldbu	r2,-25328(gp)
  803e58:	10803fcc 	andi	r2,r2,255
  803e5c:	1080201c 	xori	r2,r2,128
  803e60:	10bfe004 	addi	r2,r2,-128
  803e64:	1004c03a 	cmpne	r2,r2,zero
  803e68:	1000121e 	bne	r2,zero,803eb4 <tick+0x2e30>
  803e6c:	d0a77003 	ldbu	r2,-25152(gp)
  803e70:	10803fcc 	andi	r2,r2,255
  803e74:	1080201c 	xori	r2,r2,128
  803e78:	10bfe004 	addi	r2,r2,-128
  803e7c:	1004c03a 	cmpne	r2,r2,zero
  803e80:	10000c1e 	bne	r2,zero,803eb4 <tick+0x2e30>
  803e84:	d0a75943 	ldbu	r2,-25243(gp)
  803e88:	10803fcc 	andi	r2,r2,255
  803e8c:	1080201c 	xori	r2,r2,128
  803e90:	10bfe004 	addi	r2,r2,-128
  803e94:	1004c03a 	cmpne	r2,r2,zero
  803e98:	1000061e 	bne	r2,zero,803eb4 <tick+0x2e30>
  803e9c:	d0a73243 	ldbu	r2,-25399(gp)
  803ea0:	10803fcc 	andi	r2,r2,255
  803ea4:	1080201c 	xori	r2,r2,128
  803ea8:	10bfe004 	addi	r2,r2,-128
  803eac:	1005003a 	cmpeq	r2,r2,zero
  803eb0:	1000031e 	bne	r2,zero,803ec0 <tick+0x2e3c>
  803eb4:	00800044 	movi	r2,1
  803eb8:	e0bfa215 	stw	r2,-376(fp)
  803ebc:	00000106 	br	803ec4 <tick+0x2e40>
  803ec0:	e03fa215 	stw	zero,-376(fp)
  803ec4:	e0ffa217 	ldw	r3,-376(fp)
  803ec8:	1805883a 	mov	r2,r3
  803ecc:	d0a76d45 	stb	r2,-25163(gp)
      g139_fix3 =(g139_fix2||g63||g71||g78);
  803ed0:	d0a76d43 	ldbu	r2,-25163(gp)
  803ed4:	10803fcc 	andi	r2,r2,255
  803ed8:	1080201c 	xori	r2,r2,128
  803edc:	10bfe004 	addi	r2,r2,-128
  803ee0:	1004c03a 	cmpne	r2,r2,zero
  803ee4:	1000121e 	bne	r2,zero,803f30 <tick+0x2eac>
  803ee8:	d0a75dc3 	ldbu	r2,-25225(gp)
  803eec:	10803fcc 	andi	r2,r2,255
  803ef0:	1080201c 	xori	r2,r2,128
  803ef4:	10bfe004 	addi	r2,r2,-128
  803ef8:	1004c03a 	cmpne	r2,r2,zero
  803efc:	10000c1e 	bne	r2,zero,803f30 <tick+0x2eac>
  803f00:	d0a740c3 	ldbu	r2,-25341(gp)
  803f04:	10803fcc 	andi	r2,r2,255
  803f08:	1080201c 	xori	r2,r2,128
  803f0c:	10bfe004 	addi	r2,r2,-128
  803f10:	1004c03a 	cmpne	r2,r2,zero
  803f14:	1000061e 	bne	r2,zero,803f30 <tick+0x2eac>
  803f18:	d0a75903 	ldbu	r2,-25244(gp)
  803f1c:	10803fcc 	andi	r2,r2,255
  803f20:	1080201c 	xori	r2,r2,128
  803f24:	10bfe004 	addi	r2,r2,-128
  803f28:	1005003a 	cmpeq	r2,r2,zero
  803f2c:	1000031e 	bne	r2,zero,803f3c <tick+0x2eb8>
  803f30:	00800044 	movi	r2,1
  803f34:	e0bfa115 	stw	r2,-380(fp)
  803f38:	00000106 	br	803f40 <tick+0x2ebc>
  803f3c:	e03fa115 	stw	zero,-380(fp)
  803f40:	e0ffa117 	ldw	r3,-380(fp)
  803f44:	1805883a 	mov	r2,r3
  803f48:	d0a75345 	stb	r2,-25267(gp)
      g139_e1_fix_fix =(g91||g119||g7||g31||g46||g84||g100||g128||g9||g102||g130||g49||g57||g12||g51);
  803f4c:	d0a73303 	ldbu	r2,-25396(gp)
  803f50:	10803fcc 	andi	r2,r2,255
  803f54:	1080201c 	xori	r2,r2,128
  803f58:	10bfe004 	addi	r2,r2,-128
  803f5c:	1004c03a 	cmpne	r2,r2,zero
  803f60:	1000541e 	bne	r2,zero,8040b4 <tick+0x3030>
  803f64:	d0a76003 	ldbu	r2,-25216(gp)
  803f68:	10803fcc 	andi	r2,r2,255
  803f6c:	1080201c 	xori	r2,r2,128
  803f70:	10bfe004 	addi	r2,r2,-128
  803f74:	1004c03a 	cmpne	r2,r2,zero
  803f78:	10004e1e 	bne	r2,zero,8040b4 <tick+0x3030>
  803f7c:	d0a75183 	ldbu	r2,-25274(gp)
  803f80:	10803fcc 	andi	r2,r2,255
  803f84:	1080201c 	xori	r2,r2,128
  803f88:	10bfe004 	addi	r2,r2,-128
  803f8c:	1004c03a 	cmpne	r2,r2,zero
  803f90:	1000481e 	bne	r2,zero,8040b4 <tick+0x3030>
  803f94:	d0a74483 	ldbu	r2,-25326(gp)
  803f98:	10803fcc 	andi	r2,r2,255
  803f9c:	1080201c 	xori	r2,r2,128
  803fa0:	10bfe004 	addi	r2,r2,-128
  803fa4:	1004c03a 	cmpne	r2,r2,zero
  803fa8:	1000421e 	bne	r2,zero,8040b4 <tick+0x3030>
  803fac:	d0a76203 	ldbu	r2,-25208(gp)
  803fb0:	10803fcc 	andi	r2,r2,255
  803fb4:	1080201c 	xori	r2,r2,128
  803fb8:	10bfe004 	addi	r2,r2,-128
  803fbc:	1004c03a 	cmpne	r2,r2,zero
  803fc0:	10003c1e 	bne	r2,zero,8040b4 <tick+0x3030>
  803fc4:	d0a74583 	ldbu	r2,-25322(gp)
  803fc8:	10803fcc 	andi	r2,r2,255
  803fcc:	1080201c 	xori	r2,r2,128
  803fd0:	10bfe004 	addi	r2,r2,-128
  803fd4:	1004c03a 	cmpne	r2,r2,zero
  803fd8:	1000361e 	bne	r2,zero,8040b4 <tick+0x3030>
  803fdc:	d0a75443 	ldbu	r2,-25263(gp)
  803fe0:	10803fcc 	andi	r2,r2,255
  803fe4:	1080201c 	xori	r2,r2,128
  803fe8:	10bfe004 	addi	r2,r2,-128
  803fec:	1004c03a 	cmpne	r2,r2,zero
  803ff0:	1000301e 	bne	r2,zero,8040b4 <tick+0x3030>
  803ff4:	d0a75383 	ldbu	r2,-25266(gp)
  803ff8:	10803fcc 	andi	r2,r2,255
  803ffc:	1080201c 	xori	r2,r2,128
  804000:	10bfe004 	addi	r2,r2,-128
  804004:	1004c03a 	cmpne	r2,r2,zero
  804008:	10002a1e 	bne	r2,zero,8040b4 <tick+0x3030>
  80400c:	d0a73983 	ldbu	r2,-25370(gp)
  804010:	10803fcc 	andi	r2,r2,255
  804014:	1080201c 	xori	r2,r2,128
  804018:	10bfe004 	addi	r2,r2,-128
  80401c:	1004c03a 	cmpne	r2,r2,zero
  804020:	1000241e 	bne	r2,zero,8040b4 <tick+0x3030>
  804024:	d0a73c83 	ldbu	r2,-25358(gp)
  804028:	10803fcc 	andi	r2,r2,255
  80402c:	1080201c 	xori	r2,r2,128
  804030:	10bfe004 	addi	r2,r2,-128
  804034:	1004c03a 	cmpne	r2,r2,zero
  804038:	10001e1e 	bne	r2,zero,8040b4 <tick+0x3030>
  80403c:	d0a77643 	ldbu	r2,-25127(gp)
  804040:	10803fcc 	andi	r2,r2,255
  804044:	1080201c 	xori	r2,r2,128
  804048:	10bfe004 	addi	r2,r2,-128
  80404c:	1004c03a 	cmpne	r2,r2,zero
  804050:	1000181e 	bne	r2,zero,8040b4 <tick+0x3030>
  804054:	d0a75103 	ldbu	r2,-25276(gp)
  804058:	10803fcc 	andi	r2,r2,255
  80405c:	1080201c 	xori	r2,r2,128
  804060:	10bfe004 	addi	r2,r2,-128
  804064:	1004c03a 	cmpne	r2,r2,zero
  804068:	1000121e 	bne	r2,zero,8040b4 <tick+0x3030>
  80406c:	d0a76703 	ldbu	r2,-25188(gp)
  804070:	10803fcc 	andi	r2,r2,255
  804074:	1080201c 	xori	r2,r2,128
  804078:	10bfe004 	addi	r2,r2,-128
  80407c:	1004c03a 	cmpne	r2,r2,zero
  804080:	10000c1e 	bne	r2,zero,8040b4 <tick+0x3030>
  804084:	d0a74243 	ldbu	r2,-25335(gp)
  804088:	10803fcc 	andi	r2,r2,255
  80408c:	1080201c 	xori	r2,r2,128
  804090:	10bfe004 	addi	r2,r2,-128
  804094:	1004c03a 	cmpne	r2,r2,zero
  804098:	1000061e 	bne	r2,zero,8040b4 <tick+0x3030>
  80409c:	d0a76383 	ldbu	r2,-25202(gp)
  8040a0:	10803fcc 	andi	r2,r2,255
  8040a4:	1080201c 	xori	r2,r2,128
  8040a8:	10bfe004 	addi	r2,r2,-128
  8040ac:	1005003a 	cmpeq	r2,r2,zero
  8040b0:	1000031e 	bne	r2,zero,8040c0 <tick+0x303c>
  8040b4:	00800044 	movi	r2,1
  8040b8:	e0bfa015 	stw	r2,-384(fp)
  8040bc:	00000106 	br	8040c4 <tick+0x3040>
  8040c0:	e03fa015 	stw	zero,-384(fp)
  8040c4:	e0ffa017 	ldw	r3,-384(fp)
  8040c8:	1805883a 	mov	r2,r3
  8040cc:	d0a73705 	stb	r2,-25380(gp)
      g139_e1_fix =(g89||g97||g117||g125||g22||g38||g68||g76||g105||g139_e1_fix_fix);
  8040d0:	d0a761c3 	ldbu	r2,-25209(gp)
  8040d4:	10803fcc 	andi	r2,r2,255
  8040d8:	1080201c 	xori	r2,r2,128
  8040dc:	10bfe004 	addi	r2,r2,-128
  8040e0:	1004c03a 	cmpne	r2,r2,zero
  8040e4:	1000361e 	bne	r2,zero,8041c0 <tick+0x313c>
  8040e8:	d0a74283 	ldbu	r2,-25334(gp)
  8040ec:	10803fcc 	andi	r2,r2,255
  8040f0:	1080201c 	xori	r2,r2,128
  8040f4:	10bfe004 	addi	r2,r2,-128
  8040f8:	1004c03a 	cmpne	r2,r2,zero
  8040fc:	1000301e 	bne	r2,zero,8041c0 <tick+0x313c>
  804100:	d0a74c43 	ldbu	r2,-25295(gp)
  804104:	10803fcc 	andi	r2,r2,255
  804108:	1080201c 	xori	r2,r2,128
  80410c:	10bfe004 	addi	r2,r2,-128
  804110:	1004c03a 	cmpne	r2,r2,zero
  804114:	10002a1e 	bne	r2,zero,8041c0 <tick+0x313c>
  804118:	d0a772c3 	ldbu	r2,-25141(gp)
  80411c:	10803fcc 	andi	r2,r2,255
  804120:	1080201c 	xori	r2,r2,128
  804124:	10bfe004 	addi	r2,r2,-128
  804128:	1004c03a 	cmpne	r2,r2,zero
  80412c:	1000241e 	bne	r2,zero,8041c0 <tick+0x313c>
  804130:	d0a77183 	ldbu	r2,-25146(gp)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	1004c03a 	cmpne	r2,r2,zero
  804144:	10001e1e 	bne	r2,zero,8041c0 <tick+0x313c>
  804148:	d0a74ac3 	ldbu	r2,-25301(gp)
  80414c:	10803fcc 	andi	r2,r2,255
  804150:	1080201c 	xori	r2,r2,128
  804154:	10bfe004 	addi	r2,r2,-128
  804158:	1004c03a 	cmpne	r2,r2,zero
  80415c:	1000181e 	bne	r2,zero,8041c0 <tick+0x313c>
  804160:	d0a77043 	ldbu	r2,-25151(gp)
  804164:	10803fcc 	andi	r2,r2,255
  804168:	1080201c 	xori	r2,r2,128
  80416c:	10bfe004 	addi	r2,r2,-128
  804170:	1004c03a 	cmpne	r2,r2,zero
  804174:	1000121e 	bne	r2,zero,8041c0 <tick+0x313c>
  804178:	d0a74443 	ldbu	r2,-25327(gp)
  80417c:	10803fcc 	andi	r2,r2,255
  804180:	1080201c 	xori	r2,r2,128
  804184:	10bfe004 	addi	r2,r2,-128
  804188:	1004c03a 	cmpne	r2,r2,zero
  80418c:	10000c1e 	bne	r2,zero,8041c0 <tick+0x313c>
  804190:	d0a74b03 	ldbu	r2,-25300(gp)
  804194:	10803fcc 	andi	r2,r2,255
  804198:	1080201c 	xori	r2,r2,128
  80419c:	10bfe004 	addi	r2,r2,-128
  8041a0:	1004c03a 	cmpne	r2,r2,zero
  8041a4:	1000061e 	bne	r2,zero,8041c0 <tick+0x313c>
  8041a8:	d0a73703 	ldbu	r2,-25380(gp)
  8041ac:	10803fcc 	andi	r2,r2,255
  8041b0:	1080201c 	xori	r2,r2,128
  8041b4:	10bfe004 	addi	r2,r2,-128
  8041b8:	1005003a 	cmpeq	r2,r2,zero
  8041bc:	1000031e 	bne	r2,zero,8041cc <tick+0x3148>
  8041c0:	00800044 	movi	r2,1
  8041c4:	e0bf9f15 	stw	r2,-388(fp)
  8041c8:	00000106 	br	8041d0 <tick+0x314c>
  8041cc:	e03f9f15 	stw	zero,-388(fp)
  8041d0:	e0ff9f17 	ldw	r3,-388(fp)
  8041d4:	1805883a 	mov	r2,r3
  8041d8:	d0a765c5 	stb	r2,-25193(gp)
      g139_e1 =(!((g4||g20||g28||g36||g43||g66||g74||g81||g137||g139_e1_fix)));
  8041dc:	d0a73403 	ldbu	r2,-25392(gp)
  8041e0:	10803fcc 	andi	r2,r2,255
  8041e4:	1080201c 	xori	r2,r2,128
  8041e8:	10bfe004 	addi	r2,r2,-128
  8041ec:	1004c03a 	cmpne	r2,r2,zero
  8041f0:	1000391e 	bne	r2,zero,8042d8 <tick+0x3254>
  8041f4:	d0a75e03 	ldbu	r2,-25224(gp)
  8041f8:	10803fcc 	andi	r2,r2,255
  8041fc:	1080201c 	xori	r2,r2,128
  804200:	10bfe004 	addi	r2,r2,-128
  804204:	1004c03a 	cmpne	r2,r2,zero
  804208:	1000331e 	bne	r2,zero,8042d8 <tick+0x3254>
  80420c:	d0a771c3 	ldbu	r2,-25145(gp)
  804210:	10803fcc 	andi	r2,r2,255
  804214:	1080201c 	xori	r2,r2,128
  804218:	10bfe004 	addi	r2,r2,-128
  80421c:	1004c03a 	cmpne	r2,r2,zero
  804220:	10002d1e 	bne	r2,zero,8042d8 <tick+0x3254>
  804224:	d0a76183 	ldbu	r2,-25210(gp)
  804228:	10803fcc 	andi	r2,r2,255
  80422c:	1080201c 	xori	r2,r2,128
  804230:	10bfe004 	addi	r2,r2,-128
  804234:	1004c03a 	cmpne	r2,r2,zero
  804238:	1000271e 	bne	r2,zero,8042d8 <tick+0x3254>
  80423c:	d0a760c3 	ldbu	r2,-25213(gp)
  804240:	10803fcc 	andi	r2,r2,255
  804244:	1080201c 	xori	r2,r2,128
  804248:	10bfe004 	addi	r2,r2,-128
  80424c:	1004c03a 	cmpne	r2,r2,zero
  804250:	1000211e 	bne	r2,zero,8042d8 <tick+0x3254>
  804254:	d0a75543 	ldbu	r2,-25259(gp)
  804258:	10803fcc 	andi	r2,r2,255
  80425c:	1080201c 	xori	r2,r2,128
  804260:	10bfe004 	addi	r2,r2,-128
  804264:	1004c03a 	cmpne	r2,r2,zero
  804268:	10001b1e 	bne	r2,zero,8042d8 <tick+0x3254>
  80426c:	d0a77e03 	ldbu	r2,-25096(gp)
  804270:	10803fcc 	andi	r2,r2,255
  804274:	1080201c 	xori	r2,r2,128
  804278:	10bfe004 	addi	r2,r2,-128
  80427c:	1004c03a 	cmpne	r2,r2,zero
  804280:	1000151e 	bne	r2,zero,8042d8 <tick+0x3254>
  804284:	d0a769c3 	ldbu	r2,-25177(gp)
  804288:	10803fcc 	andi	r2,r2,255
  80428c:	1080201c 	xori	r2,r2,128
  804290:	10bfe004 	addi	r2,r2,-128
  804294:	1004c03a 	cmpne	r2,r2,zero
  804298:	10000f1e 	bne	r2,zero,8042d8 <tick+0x3254>
  80429c:	d0a76bc3 	ldbu	r2,-25169(gp)
  8042a0:	10803fcc 	andi	r2,r2,255
  8042a4:	1080201c 	xori	r2,r2,128
  8042a8:	10bfe004 	addi	r2,r2,-128
  8042ac:	1004c03a 	cmpne	r2,r2,zero
  8042b0:	1000091e 	bne	r2,zero,8042d8 <tick+0x3254>
  8042b4:	d0a765c3 	ldbu	r2,-25193(gp)
  8042b8:	10803fcc 	andi	r2,r2,255
  8042bc:	1080201c 	xori	r2,r2,128
  8042c0:	10bfe004 	addi	r2,r2,-128
  8042c4:	1004c03a 	cmpne	r2,r2,zero
  8042c8:	1000031e 	bne	r2,zero,8042d8 <tick+0x3254>
  8042cc:	00800044 	movi	r2,1
  8042d0:	e0bf9e15 	stw	r2,-392(fp)
  8042d4:	00000106 	br	8042dc <tick+0x3258>
  8042d8:	e03f9e15 	stw	zero,-392(fp)
  8042dc:	e0ff9e17 	ldw	r3,-392(fp)
  8042e0:	1805883a 	mov	r2,r3
  8042e4:	d0a76805 	stb	r2,-25184(gp)
      g143_e2 =(!(g142));
  8042e8:	d0a77083 	ldbu	r2,-25150(gp)
  8042ec:	10803fcc 	andi	r2,r2,255
  8042f0:	1080201c 	xori	r2,r2,128
  8042f4:	10bfe004 	addi	r2,r2,-128
  8042f8:	1005003a 	cmpeq	r2,r2,zero
  8042fc:	d0a732c5 	stb	r2,-25397(gp)
   }
   PRE_g3 = g3;
  804300:	d0a73743 	ldbu	r2,-25379(gp)
  804304:	d0a73c45 	stb	r2,-25359(gp)
   PRE_g6 = g6;
  804308:	d0a76943 	ldbu	r2,-25179(gp)
  80430c:	d0a758c5 	stb	r2,-25245(gp)
   PRE_g8 = g8;
  804310:	d0a766c3 	ldbu	r2,-25189(gp)
  804314:	d0a74705 	stb	r2,-25316(gp)
   PRE_g11 = g11;
  804318:	d0a77103 	ldbu	r2,-25148(gp)
  80431c:	d0a75d85 	stb	r2,-25226(gp)
   PRE_g19 = g19;
  804320:	d0a73483 	ldbu	r2,-25390(gp)
  804324:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g21 = g21;
  804328:	d0a74e43 	ldbu	r2,-25287(gp)
  80432c:	d0a76e85 	stb	r2,-25158(gp)
   PRE_g27 = g27;
  804330:	d0a735c3 	ldbu	r2,-25385(gp)
  804334:	d0a73845 	stb	r2,-25375(gp)
   PRE_g30 = g30;
  804338:	d0a76e43 	ldbu	r2,-25159(gp)
  80433c:	d0a77705 	stb	r2,-25124(gp)
   PRE_g35 = g35;
  804340:	d0a75b83 	ldbu	r2,-25234(gp)
  804344:	d0a749c5 	stb	r2,-25305(gp)
   PRE_g37 = g37;
  804348:	d0a74503 	ldbu	r2,-25324(gp)
  80434c:	d0a77d45 	stb	r2,-25099(gp)
   PRE_g42 = g42;
  804350:	d0a73943 	ldbu	r2,-25371(gp)
  804354:	d0a74c05 	stb	r2,-25296(gp)
   PRE_g45 = g45;
  804358:	d0a77443 	ldbu	r2,-25135(gp)
  80435c:	d0a77605 	stb	r2,-25128(gp)
   PRE_g48 = g48;
  804360:	d0a74983 	ldbu	r2,-25306(gp)
  804364:	d0a76505 	stb	r2,-25196(gp)
   PRE_g50 = g50;
  804368:	d0a76303 	ldbu	r2,-25204(gp)
  80436c:	d0a748c5 	stb	r2,-25309(gp)
   PRE_g56 = g56;
  804370:	d0a757c3 	ldbu	r2,-25249(gp)
  804374:	d0a73dc5 	stb	r2,-25353(gp)
   PRE_g65 = g65;
  804378:	d0a77143 	ldbu	r2,-25147(gp)
  80437c:	d0a73f85 	stb	r2,-25346(gp)
   PRE_g67 = g67;
  804380:	d0a779c3 	ldbu	r2,-25113(gp)
  804384:	d0a75a85 	stb	r2,-25238(gp)
   PRE_g73 = g73;
  804388:	d0a77203 	ldbu	r2,-25144(gp)
  80438c:	d0a776c5 	stb	r2,-25125(gp)
   PRE_g75 = g75;
  804390:	d0a76e03 	ldbu	r2,-25160(gp)
  804394:	d0a73e45 	stb	r2,-25351(gp)
   PRE_g80 = g80;
  804398:	d0a752c3 	ldbu	r2,-25269(gp)
  80439c:	d0a75305 	stb	r2,-25268(gp)
   PRE_g83 = g83;
  8043a0:	d0a73283 	ldbu	r2,-25398(gp)
  8043a4:	d0a75ac5 	stb	r2,-25237(gp)
   PRE_g88 = g88;
  8043a8:	d0a77403 	ldbu	r2,-25136(gp)
  8043ac:	d0a76105 	stb	r2,-25212(gp)
   PRE_g90 = g90;
  8043b0:	d0a75c43 	ldbu	r2,-25231(gp)
  8043b4:	d0a73645 	stb	r2,-25383(gp)
   PRE_g96 = g96;
  8043b8:	d0a76343 	ldbu	r2,-25203(gp)
  8043bc:	d0a75a45 	stb	r2,-25239(gp)
   PRE_g99 = g99;
  8043c0:	d0a754c3 	ldbu	r2,-25261(gp)
  8043c4:	d0a76b85 	stb	r2,-25170(gp)
   PRE_g101 = g101;
  8043c8:	d0a756c3 	ldbu	r2,-25253(gp)
  8043cc:	d0a75285 	stb	r2,-25270(gp)
   PRE_g104 = g104;
  8043d0:	d0a76583 	ldbu	r2,-25194(gp)
  8043d4:	d0a74905 	stb	r2,-25308(gp)
   PRE_g116 = g116;
  8043d8:	d0a76903 	ldbu	r2,-25180(gp)
  8043dc:	d0a74b85 	stb	r2,-25298(gp)
   PRE_g118 = g118;
  8043e0:	d0a74683 	ldbu	r2,-25318(gp)
  8043e4:	d0a74185 	stb	r2,-25338(gp)
   PRE_g124 = g124;
  8043e8:	d0a76a83 	ldbu	r2,-25174(gp)
  8043ec:	d0a74845 	stb	r2,-25311(gp)
   PRE_g127 = g127;
  8043f0:	d0a739c3 	ldbu	r2,-25369(gp)
  8043f4:	d0a77505 	stb	r2,-25132(gp)
   PRE_g129 = g129;
  8043f8:	d0a75803 	ldbu	r2,-25248(gp)
  8043fc:	d0a764c5 	stb	r2,-25197(gp)
   PRE_g136 = g136;
  804400:	d0a753c3 	ldbu	r2,-25265(gp)
  804404:	d0a74785 	stb	r2,-25314(gp)
   PRE_g141 = g141;
  804408:	d0a76883 	ldbu	r2,-25182(gp)
  80440c:	d0a74105 	stb	r2,-25340(gp)
   _PRE_GO = _GO;
  804410:	d0a75c83 	ldbu	r2,-25230(gp)
  804414:	10803fcc 	andi	r2,r2,255
  804418:	1080201c 	xori	r2,r2,128
  80441c:	10bfe004 	addi	r2,r2,-128
  804420:	d0a73b15 	stw	r2,-25364(gp)
   return;
}
  804424:	e037883a 	mov	sp,fp
  804428:	df000017 	ldw	fp,0(sp)
  80442c:	dec00104 	addi	sp,sp,4
  804430:	f800283a 	ret

00804434 <_puts_r>:
  804434:	defff604 	addi	sp,sp,-40
  804438:	dc400715 	stw	r17,28(sp)
  80443c:	2023883a 	mov	r17,r4
  804440:	2809883a 	mov	r4,r5
  804444:	dfc00915 	stw	ra,36(sp)
  804448:	dcc00815 	stw	r19,32(sp)
  80444c:	2827883a 	mov	r19,r5
  804450:	08044e80 	call	8044e8 <strlen>
  804454:	89400217 	ldw	r5,8(r17)
  804458:	00c02074 	movhi	r3,129
  80445c:	18edc504 	addi	r3,r3,-18668
  804460:	01c00044 	movi	r7,1
  804464:	12000044 	addi	r8,r2,1
  804468:	d8c00515 	stw	r3,20(sp)
  80446c:	d9c00615 	stw	r7,24(sp)
  804470:	d8c00304 	addi	r3,sp,12
  804474:	01c00084 	movi	r7,2
  804478:	8809883a 	mov	r4,r17
  80447c:	d80d883a 	mov	r6,sp
  804480:	d8c00015 	stw	r3,0(sp)
  804484:	dcc00315 	stw	r19,12(sp)
  804488:	da000215 	stw	r8,8(sp)
  80448c:	d9c00115 	stw	r7,4(sp)
  804490:	d8800415 	stw	r2,16(sp)
  804494:	080455c0 	call	80455c <__sfvwrite_r>
  804498:	00ffffc4 	movi	r3,-1
  80449c:	10000626 	beq	r2,zero,8044b8 <_puts_r+0x84>
  8044a0:	1805883a 	mov	r2,r3
  8044a4:	dfc00917 	ldw	ra,36(sp)
  8044a8:	dcc00817 	ldw	r19,32(sp)
  8044ac:	dc400717 	ldw	r17,28(sp)
  8044b0:	dec00a04 	addi	sp,sp,40
  8044b4:	f800283a 	ret
  8044b8:	00c00284 	movi	r3,10
  8044bc:	1805883a 	mov	r2,r3
  8044c0:	dfc00917 	ldw	ra,36(sp)
  8044c4:	dcc00817 	ldw	r19,32(sp)
  8044c8:	dc400717 	ldw	r17,28(sp)
  8044cc:	dec00a04 	addi	sp,sp,40
  8044d0:	f800283a 	ret

008044d4 <puts>:
  8044d4:	00802074 	movhi	r2,129
  8044d8:	10b57804 	addi	r2,r2,-10784
  8044dc:	200b883a 	mov	r5,r4
  8044e0:	11000017 	ldw	r4,0(r2)
  8044e4:	08044341 	jmpi	804434 <_puts_r>

008044e8 <strlen>:
  8044e8:	208000cc 	andi	r2,r4,3
  8044ec:	2011883a 	mov	r8,r4
  8044f0:	1000161e 	bne	r2,zero,80454c <strlen+0x64>
  8044f4:	20c00017 	ldw	r3,0(r4)
  8044f8:	017fbff4 	movhi	r5,65279
  8044fc:	297fbfc4 	addi	r5,r5,-257
  804500:	01e02074 	movhi	r7,32897
  804504:	39e02004 	addi	r7,r7,-32640
  804508:	1945883a 	add	r2,r3,r5
  80450c:	11c4703a 	and	r2,r2,r7
  804510:	00c6303a 	nor	r3,zero,r3
  804514:	1886703a 	and	r3,r3,r2
  804518:	18000c1e 	bne	r3,zero,80454c <strlen+0x64>
  80451c:	280d883a 	mov	r6,r5
  804520:	380b883a 	mov	r5,r7
  804524:	21000104 	addi	r4,r4,4
  804528:	20800017 	ldw	r2,0(r4)
  80452c:	1187883a 	add	r3,r2,r6
  804530:	1946703a 	and	r3,r3,r5
  804534:	0084303a 	nor	r2,zero,r2
  804538:	10c4703a 	and	r2,r2,r3
  80453c:	103ff926 	beq	r2,zero,804524 <strlen+0x3c>
  804540:	20800007 	ldb	r2,0(r4)
  804544:	10000326 	beq	r2,zero,804554 <strlen+0x6c>
  804548:	21000044 	addi	r4,r4,1
  80454c:	20800007 	ldb	r2,0(r4)
  804550:	103ffd1e 	bne	r2,zero,804548 <strlen+0x60>
  804554:	2205c83a 	sub	r2,r4,r8
  804558:	f800283a 	ret

0080455c <__sfvwrite_r>:
  80455c:	30800217 	ldw	r2,8(r6)
  804560:	defff504 	addi	sp,sp,-44
  804564:	df000915 	stw	fp,36(sp)
  804568:	dd800715 	stw	r22,28(sp)
  80456c:	dc800315 	stw	r18,12(sp)
  804570:	dfc00a15 	stw	ra,40(sp)
  804574:	ddc00815 	stw	r23,32(sp)
  804578:	dd400615 	stw	r21,24(sp)
  80457c:	dd000515 	stw	r20,20(sp)
  804580:	dcc00415 	stw	r19,16(sp)
  804584:	dc400215 	stw	r17,8(sp)
  804588:	dc000115 	stw	r16,4(sp)
  80458c:	302d883a 	mov	r22,r6
  804590:	2039883a 	mov	fp,r4
  804594:	2825883a 	mov	r18,r5
  804598:	10001c26 	beq	r2,zero,80460c <__sfvwrite_r+0xb0>
  80459c:	29c0030b 	ldhu	r7,12(r5)
  8045a0:	3880020c 	andi	r2,r7,8
  8045a4:	10002726 	beq	r2,zero,804644 <__sfvwrite_r+0xe8>
  8045a8:	28800417 	ldw	r2,16(r5)
  8045ac:	10002526 	beq	r2,zero,804644 <__sfvwrite_r+0xe8>
  8045b0:	3880008c 	andi	r2,r7,2
  8045b4:	b5400017 	ldw	r21,0(r22)
  8045b8:	10002826 	beq	r2,zero,80465c <__sfvwrite_r+0x100>
  8045bc:	0021883a 	mov	r16,zero
  8045c0:	0023883a 	mov	r17,zero
  8045c4:	880d883a 	mov	r6,r17
  8045c8:	e009883a 	mov	r4,fp
  8045cc:	00810004 	movi	r2,1024
  8045d0:	80006e26 	beq	r16,zero,80478c <__sfvwrite_r+0x230>
  8045d4:	800f883a 	mov	r7,r16
  8045d8:	91400717 	ldw	r5,28(r18)
  8045dc:	1400012e 	bgeu	r2,r16,8045e4 <__sfvwrite_r+0x88>
  8045e0:	100f883a 	mov	r7,r2
  8045e4:	90c00917 	ldw	r3,36(r18)
  8045e8:	183ee83a 	callr	r3
  8045ec:	1007883a 	mov	r3,r2
  8045f0:	80a1c83a 	sub	r16,r16,r2
  8045f4:	88a3883a 	add	r17,r17,r2
  8045f8:	00806d0e 	bge	zero,r2,8047b0 <__sfvwrite_r+0x254>
  8045fc:	b0800217 	ldw	r2,8(r22)
  804600:	10c5c83a 	sub	r2,r2,r3
  804604:	b0800215 	stw	r2,8(r22)
  804608:	103fee1e 	bne	r2,zero,8045c4 <__sfvwrite_r+0x68>
  80460c:	0009883a 	mov	r4,zero
  804610:	2005883a 	mov	r2,r4
  804614:	dfc00a17 	ldw	ra,40(sp)
  804618:	df000917 	ldw	fp,36(sp)
  80461c:	ddc00817 	ldw	r23,32(sp)
  804620:	dd800717 	ldw	r22,28(sp)
  804624:	dd400617 	ldw	r21,24(sp)
  804628:	dd000517 	ldw	r20,20(sp)
  80462c:	dcc00417 	ldw	r19,16(sp)
  804630:	dc800317 	ldw	r18,12(sp)
  804634:	dc400217 	ldw	r17,8(sp)
  804638:	dc000117 	ldw	r16,4(sp)
  80463c:	dec00b04 	addi	sp,sp,44
  804640:	f800283a 	ret
  804644:	0805a000 	call	805a00 <__swsetup_r>
  804648:	1000e41e 	bne	r2,zero,8049dc <__sfvwrite_r+0x480>
  80464c:	91c0030b 	ldhu	r7,12(r18)
  804650:	b5400017 	ldw	r21,0(r22)
  804654:	3880008c 	andi	r2,r7,2
  804658:	103fd81e 	bne	r2,zero,8045bc <__sfvwrite_r+0x60>
  80465c:	3880004c 	andi	r2,r7,1
  804660:	1005003a 	cmpeq	r2,r2,zero
  804664:	10005726 	beq	r2,zero,8047c4 <__sfvwrite_r+0x268>
  804668:	0029883a 	mov	r20,zero
  80466c:	002f883a 	mov	r23,zero
  804670:	a0004226 	beq	r20,zero,80477c <__sfvwrite_r+0x220>
  804674:	3880800c 	andi	r2,r7,512
  804678:	94000217 	ldw	r16,8(r18)
  80467c:	10008b26 	beq	r2,zero,8048ac <__sfvwrite_r+0x350>
  804680:	800d883a 	mov	r6,r16
  804684:	a400a536 	bltu	r20,r16,80491c <__sfvwrite_r+0x3c0>
  804688:	3881200c 	andi	r2,r7,1152
  80468c:	10002726 	beq	r2,zero,80472c <__sfvwrite_r+0x1d0>
  804690:	90800517 	ldw	r2,20(r18)
  804694:	92000417 	ldw	r8,16(r18)
  804698:	91400017 	ldw	r5,0(r18)
  80469c:	1087883a 	add	r3,r2,r2
  8046a0:	1887883a 	add	r3,r3,r2
  8046a4:	1808d7fa 	srli	r4,r3,31
  8046a8:	2a21c83a 	sub	r16,r5,r8
  8046ac:	80800044 	addi	r2,r16,1
  8046b0:	20c9883a 	add	r4,r4,r3
  8046b4:	2027d07a 	srai	r19,r4,1
  8046b8:	a085883a 	add	r2,r20,r2
  8046bc:	980d883a 	mov	r6,r19
  8046c0:	9880022e 	bgeu	r19,r2,8046cc <__sfvwrite_r+0x170>
  8046c4:	1027883a 	mov	r19,r2
  8046c8:	100d883a 	mov	r6,r2
  8046cc:	3881000c 	andi	r2,r7,1024
  8046d0:	1000b826 	beq	r2,zero,8049b4 <__sfvwrite_r+0x458>
  8046d4:	300b883a 	mov	r5,r6
  8046d8:	e009883a 	mov	r4,fp
  8046dc:	08049f80 	call	8049f8 <_malloc_r>
  8046e0:	10003126 	beq	r2,zero,8047a8 <__sfvwrite_r+0x24c>
  8046e4:	91400417 	ldw	r5,16(r18)
  8046e8:	1009883a 	mov	r4,r2
  8046ec:	800d883a 	mov	r6,r16
  8046f0:	1023883a 	mov	r17,r2
  8046f4:	080521c0 	call	80521c <memcpy>
  8046f8:	90c0030b 	ldhu	r3,12(r18)
  8046fc:	00beffc4 	movi	r2,-1025
  804700:	1886703a 	and	r3,r3,r2
  804704:	18c02014 	ori	r3,r3,128
  804708:	90c0030d 	sth	r3,12(r18)
  80470c:	9c07c83a 	sub	r3,r19,r16
  804710:	8c05883a 	add	r2,r17,r16
  804714:	a00d883a 	mov	r6,r20
  804718:	a021883a 	mov	r16,r20
  80471c:	90800015 	stw	r2,0(r18)
  804720:	90c00215 	stw	r3,8(r18)
  804724:	94400415 	stw	r17,16(r18)
  804728:	94c00515 	stw	r19,20(r18)
  80472c:	91000017 	ldw	r4,0(r18)
  804730:	b80b883a 	mov	r5,r23
  804734:	a023883a 	mov	r17,r20
  804738:	08052bc0 	call	8052bc <memmove>
  80473c:	90c00217 	ldw	r3,8(r18)
  804740:	90800017 	ldw	r2,0(r18)
  804744:	a027883a 	mov	r19,r20
  804748:	1c07c83a 	sub	r3,r3,r16
  80474c:	1405883a 	add	r2,r2,r16
  804750:	90c00215 	stw	r3,8(r18)
  804754:	a021883a 	mov	r16,r20
  804758:	90800015 	stw	r2,0(r18)
  80475c:	b0800217 	ldw	r2,8(r22)
  804760:	1405c83a 	sub	r2,r2,r16
  804764:	b0800215 	stw	r2,8(r22)
  804768:	103fa826 	beq	r2,zero,80460c <__sfvwrite_r+0xb0>
  80476c:	a469c83a 	sub	r20,r20,r17
  804770:	91c0030b 	ldhu	r7,12(r18)
  804774:	bcef883a 	add	r23,r23,r19
  804778:	a03fbe1e 	bne	r20,zero,804674 <__sfvwrite_r+0x118>
  80477c:	adc00017 	ldw	r23,0(r21)
  804780:	ad000117 	ldw	r20,4(r21)
  804784:	ad400204 	addi	r21,r21,8
  804788:	003fb906 	br	804670 <__sfvwrite_r+0x114>
  80478c:	ac400017 	ldw	r17,0(r21)
  804790:	ac000117 	ldw	r16,4(r21)
  804794:	ad400204 	addi	r21,r21,8
  804798:	003f8a06 	br	8045c4 <__sfvwrite_r+0x68>
  80479c:	91400417 	ldw	r5,16(r18)
  8047a0:	e009883a 	mov	r4,fp
  8047a4:	08061580 	call	806158 <_free_r>
  8047a8:	00800304 	movi	r2,12
  8047ac:	e0800015 	stw	r2,0(fp)
  8047b0:	9080030b 	ldhu	r2,12(r18)
  8047b4:	013fffc4 	movi	r4,-1
  8047b8:	10801014 	ori	r2,r2,64
  8047bc:	9080030d 	sth	r2,12(r18)
  8047c0:	003f9306 	br	804610 <__sfvwrite_r+0xb4>
  8047c4:	0027883a 	mov	r19,zero
  8047c8:	002f883a 	mov	r23,zero
  8047cc:	d8000015 	stw	zero,0(sp)
  8047d0:	0029883a 	mov	r20,zero
  8047d4:	98001e26 	beq	r19,zero,804850 <__sfvwrite_r+0x2f4>
  8047d8:	d8c00017 	ldw	r3,0(sp)
  8047dc:	1804c03a 	cmpne	r2,r3,zero
  8047e0:	10005e26 	beq	r2,zero,80495c <__sfvwrite_r+0x400>
  8047e4:	9821883a 	mov	r16,r19
  8047e8:	a4c0012e 	bgeu	r20,r19,8047f0 <__sfvwrite_r+0x294>
  8047ec:	a021883a 	mov	r16,r20
  8047f0:	91000017 	ldw	r4,0(r18)
  8047f4:	90800417 	ldw	r2,16(r18)
  8047f8:	91800217 	ldw	r6,8(r18)
  8047fc:	91c00517 	ldw	r7,20(r18)
  804800:	1100022e 	bgeu	r2,r4,80480c <__sfvwrite_r+0x2b0>
  804804:	31e3883a 	add	r17,r6,r7
  804808:	8c001616 	blt	r17,r16,804864 <__sfvwrite_r+0x308>
  80480c:	81c03816 	blt	r16,r7,8048f0 <__sfvwrite_r+0x394>
  804810:	90c00917 	ldw	r3,36(r18)
  804814:	91400717 	ldw	r5,28(r18)
  804818:	e009883a 	mov	r4,fp
  80481c:	b80d883a 	mov	r6,r23
  804820:	183ee83a 	callr	r3
  804824:	1023883a 	mov	r17,r2
  804828:	00bfe10e 	bge	zero,r2,8047b0 <__sfvwrite_r+0x254>
  80482c:	a469c83a 	sub	r20,r20,r17
  804830:	a0001826 	beq	r20,zero,804894 <__sfvwrite_r+0x338>
  804834:	b0800217 	ldw	r2,8(r22)
  804838:	1445c83a 	sub	r2,r2,r17
  80483c:	b0800215 	stw	r2,8(r22)
  804840:	103f7226 	beq	r2,zero,80460c <__sfvwrite_r+0xb0>
  804844:	9c67c83a 	sub	r19,r19,r17
  804848:	bc6f883a 	add	r23,r23,r17
  80484c:	983fe21e 	bne	r19,zero,8047d8 <__sfvwrite_r+0x27c>
  804850:	adc00017 	ldw	r23,0(r21)
  804854:	acc00117 	ldw	r19,4(r21)
  804858:	ad400204 	addi	r21,r21,8
  80485c:	d8000015 	stw	zero,0(sp)
  804860:	003fdc06 	br	8047d4 <__sfvwrite_r+0x278>
  804864:	b80b883a 	mov	r5,r23
  804868:	880d883a 	mov	r6,r17
  80486c:	08052bc0 	call	8052bc <memmove>
  804870:	90c00017 	ldw	r3,0(r18)
  804874:	e009883a 	mov	r4,fp
  804878:	900b883a 	mov	r5,r18
  80487c:	1c47883a 	add	r3,r3,r17
  804880:	90c00015 	stw	r3,0(r18)
  804884:	0805b3c0 	call	805b3c <_fflush_r>
  804888:	103fc91e 	bne	r2,zero,8047b0 <__sfvwrite_r+0x254>
  80488c:	a469c83a 	sub	r20,r20,r17
  804890:	a03fe81e 	bne	r20,zero,804834 <__sfvwrite_r+0x2d8>
  804894:	e009883a 	mov	r4,fp
  804898:	900b883a 	mov	r5,r18
  80489c:	0805b3c0 	call	805b3c <_fflush_r>
  8048a0:	103fc31e 	bne	r2,zero,8047b0 <__sfvwrite_r+0x254>
  8048a4:	d8000015 	stw	zero,0(sp)
  8048a8:	003fe206 	br	804834 <__sfvwrite_r+0x2d8>
  8048ac:	91000017 	ldw	r4,0(r18)
  8048b0:	90800417 	ldw	r2,16(r18)
  8048b4:	1100022e 	bgeu	r2,r4,8048c0 <__sfvwrite_r+0x364>
  8048b8:	8023883a 	mov	r17,r16
  8048bc:	85003136 	bltu	r16,r20,804984 <__sfvwrite_r+0x428>
  8048c0:	91c00517 	ldw	r7,20(r18)
  8048c4:	a1c01836 	bltu	r20,r7,804928 <__sfvwrite_r+0x3cc>
  8048c8:	90c00917 	ldw	r3,36(r18)
  8048cc:	91400717 	ldw	r5,28(r18)
  8048d0:	e009883a 	mov	r4,fp
  8048d4:	b80d883a 	mov	r6,r23
  8048d8:	183ee83a 	callr	r3
  8048dc:	1021883a 	mov	r16,r2
  8048e0:	00bfb30e 	bge	zero,r2,8047b0 <__sfvwrite_r+0x254>
  8048e4:	1023883a 	mov	r17,r2
  8048e8:	1027883a 	mov	r19,r2
  8048ec:	003f9b06 	br	80475c <__sfvwrite_r+0x200>
  8048f0:	b80b883a 	mov	r5,r23
  8048f4:	800d883a 	mov	r6,r16
  8048f8:	08052bc0 	call	8052bc <memmove>
  8048fc:	90c00217 	ldw	r3,8(r18)
  804900:	90800017 	ldw	r2,0(r18)
  804904:	8023883a 	mov	r17,r16
  804908:	1c07c83a 	sub	r3,r3,r16
  80490c:	1405883a 	add	r2,r2,r16
  804910:	90c00215 	stw	r3,8(r18)
  804914:	90800015 	stw	r2,0(r18)
  804918:	003fc406 	br	80482c <__sfvwrite_r+0x2d0>
  80491c:	a00d883a 	mov	r6,r20
  804920:	a021883a 	mov	r16,r20
  804924:	003f8106 	br	80472c <__sfvwrite_r+0x1d0>
  804928:	b80b883a 	mov	r5,r23
  80492c:	a00d883a 	mov	r6,r20
  804930:	08052bc0 	call	8052bc <memmove>
  804934:	90c00217 	ldw	r3,8(r18)
  804938:	90800017 	ldw	r2,0(r18)
  80493c:	a021883a 	mov	r16,r20
  804940:	1d07c83a 	sub	r3,r3,r20
  804944:	1505883a 	add	r2,r2,r20
  804948:	a023883a 	mov	r17,r20
  80494c:	a027883a 	mov	r19,r20
  804950:	90c00215 	stw	r3,8(r18)
  804954:	90800015 	stw	r2,0(r18)
  804958:	003f8006 	br	80475c <__sfvwrite_r+0x200>
  80495c:	b809883a 	mov	r4,r23
  804960:	01400284 	movi	r5,10
  804964:	980d883a 	mov	r6,r19
  804968:	08051380 	call	805138 <memchr>
  80496c:	10001726 	beq	r2,zero,8049cc <__sfvwrite_r+0x470>
  804970:	15c5c83a 	sub	r2,r2,r23
  804974:	15000044 	addi	r20,r2,1
  804978:	00800044 	movi	r2,1
  80497c:	d8800015 	stw	r2,0(sp)
  804980:	003f9806 	br	8047e4 <__sfvwrite_r+0x288>
  804984:	b80b883a 	mov	r5,r23
  804988:	800d883a 	mov	r6,r16
  80498c:	08052bc0 	call	8052bc <memmove>
  804990:	90c00017 	ldw	r3,0(r18)
  804994:	e009883a 	mov	r4,fp
  804998:	900b883a 	mov	r5,r18
  80499c:	1c07883a 	add	r3,r3,r16
  8049a0:	90c00015 	stw	r3,0(r18)
  8049a4:	8027883a 	mov	r19,r16
  8049a8:	0805b3c0 	call	805b3c <_fflush_r>
  8049ac:	103f6b26 	beq	r2,zero,80475c <__sfvwrite_r+0x200>
  8049b0:	003f7f06 	br	8047b0 <__sfvwrite_r+0x254>
  8049b4:	400b883a 	mov	r5,r8
  8049b8:	e009883a 	mov	r4,fp
  8049bc:	080539c0 	call	80539c <_realloc_r>
  8049c0:	103f7626 	beq	r2,zero,80479c <__sfvwrite_r+0x240>
  8049c4:	1023883a 	mov	r17,r2
  8049c8:	003f5006 	br	80470c <__sfvwrite_r+0x1b0>
  8049cc:	00c00044 	movi	r3,1
  8049d0:	9d000044 	addi	r20,r19,1
  8049d4:	d8c00015 	stw	r3,0(sp)
  8049d8:	003f8206 	br	8047e4 <__sfvwrite_r+0x288>
  8049dc:	9080030b 	ldhu	r2,12(r18)
  8049e0:	00c00244 	movi	r3,9
  8049e4:	013fffc4 	movi	r4,-1
  8049e8:	10801014 	ori	r2,r2,64
  8049ec:	9080030d 	sth	r2,12(r18)
  8049f0:	e0c00015 	stw	r3,0(fp)
  8049f4:	003f0606 	br	804610 <__sfvwrite_r+0xb4>

008049f8 <_malloc_r>:
  8049f8:	defff604 	addi	sp,sp,-40
  8049fc:	28c002c4 	addi	r3,r5,11
  804a00:	00800584 	movi	r2,22
  804a04:	dc800215 	stw	r18,8(sp)
  804a08:	dfc00915 	stw	ra,36(sp)
  804a0c:	df000815 	stw	fp,32(sp)
  804a10:	ddc00715 	stw	r23,28(sp)
  804a14:	dd800615 	stw	r22,24(sp)
  804a18:	dd400515 	stw	r21,20(sp)
  804a1c:	dd000415 	stw	r20,16(sp)
  804a20:	dcc00315 	stw	r19,12(sp)
  804a24:	dc400115 	stw	r17,4(sp)
  804a28:	dc000015 	stw	r16,0(sp)
  804a2c:	2025883a 	mov	r18,r4
  804a30:	10c01236 	bltu	r2,r3,804a7c <_malloc_r+0x84>
  804a34:	04400404 	movi	r17,16
  804a38:	8940142e 	bgeu	r17,r5,804a8c <_malloc_r+0x94>
  804a3c:	00800304 	movi	r2,12
  804a40:	0007883a 	mov	r3,zero
  804a44:	90800015 	stw	r2,0(r18)
  804a48:	1805883a 	mov	r2,r3
  804a4c:	dfc00917 	ldw	ra,36(sp)
  804a50:	df000817 	ldw	fp,32(sp)
  804a54:	ddc00717 	ldw	r23,28(sp)
  804a58:	dd800617 	ldw	r22,24(sp)
  804a5c:	dd400517 	ldw	r21,20(sp)
  804a60:	dd000417 	ldw	r20,16(sp)
  804a64:	dcc00317 	ldw	r19,12(sp)
  804a68:	dc800217 	ldw	r18,8(sp)
  804a6c:	dc400117 	ldw	r17,4(sp)
  804a70:	dc000017 	ldw	r16,0(sp)
  804a74:	dec00a04 	addi	sp,sp,40
  804a78:	f800283a 	ret
  804a7c:	00bffe04 	movi	r2,-8
  804a80:	18a2703a 	and	r17,r3,r2
  804a84:	883fed16 	blt	r17,zero,804a3c <_malloc_r+0x44>
  804a88:	897fec36 	bltu	r17,r5,804a3c <_malloc_r+0x44>
  804a8c:	9009883a 	mov	r4,r18
  804a90:	08076dc0 	call	8076dc <__malloc_lock>
  804a94:	00807dc4 	movi	r2,503
  804a98:	14402b2e 	bgeu	r2,r17,804b48 <_malloc_r+0x150>
  804a9c:	8806d27a 	srli	r3,r17,9
  804aa0:	18003f1e 	bne	r3,zero,804ba0 <_malloc_r+0x1a8>
  804aa4:	880cd0fa 	srli	r6,r17,3
  804aa8:	300490fa 	slli	r2,r6,3
  804aac:	02c02074 	movhi	r11,129
  804ab0:	5aef7904 	addi	r11,r11,-16924
  804ab4:	12cb883a 	add	r5,r2,r11
  804ab8:	2c000317 	ldw	r16,12(r5)
  804abc:	580f883a 	mov	r7,r11
  804ac0:	2c00041e 	bne	r5,r16,804ad4 <_malloc_r+0xdc>
  804ac4:	00000a06 	br	804af0 <_malloc_r+0xf8>
  804ac8:	1800860e 	bge	r3,zero,804ce4 <_malloc_r+0x2ec>
  804acc:	84000317 	ldw	r16,12(r16)
  804ad0:	2c000726 	beq	r5,r16,804af0 <_malloc_r+0xf8>
  804ad4:	80800117 	ldw	r2,4(r16)
  804ad8:	00ffff04 	movi	r3,-4
  804adc:	10c8703a 	and	r4,r2,r3
  804ae0:	2447c83a 	sub	r3,r4,r17
  804ae4:	008003c4 	movi	r2,15
  804ae8:	10fff70e 	bge	r2,r3,804ac8 <_malloc_r+0xd0>
  804aec:	31bfffc4 	addi	r6,r6,-1
  804af0:	32400044 	addi	r9,r6,1
  804af4:	02802074 	movhi	r10,129
  804af8:	52af7b04 	addi	r10,r10,-16916
  804afc:	54000217 	ldw	r16,8(r10)
  804b00:	8280a026 	beq	r16,r10,804d84 <_malloc_r+0x38c>
  804b04:	80800117 	ldw	r2,4(r16)
  804b08:	00ffff04 	movi	r3,-4
  804b0c:	10ca703a 	and	r5,r2,r3
  804b10:	2c4dc83a 	sub	r6,r5,r17
  804b14:	008003c4 	movi	r2,15
  804b18:	11808316 	blt	r2,r6,804d28 <_malloc_r+0x330>
  804b1c:	52800315 	stw	r10,12(r10)
  804b20:	52800215 	stw	r10,8(r10)
  804b24:	30002916 	blt	r6,zero,804bcc <_malloc_r+0x1d4>
  804b28:	8147883a 	add	r3,r16,r5
  804b2c:	18800117 	ldw	r2,4(r3)
  804b30:	9009883a 	mov	r4,r18
  804b34:	10800054 	ori	r2,r2,1
  804b38:	18800115 	stw	r2,4(r3)
  804b3c:	08076fc0 	call	8076fc <__malloc_unlock>
  804b40:	80c00204 	addi	r3,r16,8
  804b44:	003fc006 	br	804a48 <_malloc_r+0x50>
  804b48:	02c02074 	movhi	r11,129
  804b4c:	5aef7904 	addi	r11,r11,-16924
  804b50:	8ac5883a 	add	r2,r17,r11
  804b54:	14000317 	ldw	r16,12(r2)
  804b58:	580f883a 	mov	r7,r11
  804b5c:	8806d0fa 	srli	r3,r17,3
  804b60:	14006c26 	beq	r2,r16,804d14 <_malloc_r+0x31c>
  804b64:	80c00117 	ldw	r3,4(r16)
  804b68:	00bfff04 	movi	r2,-4
  804b6c:	81800317 	ldw	r6,12(r16)
  804b70:	1886703a 	and	r3,r3,r2
  804b74:	80c7883a 	add	r3,r16,r3
  804b78:	18800117 	ldw	r2,4(r3)
  804b7c:	81400217 	ldw	r5,8(r16)
  804b80:	9009883a 	mov	r4,r18
  804b84:	10800054 	ori	r2,r2,1
  804b88:	18800115 	stw	r2,4(r3)
  804b8c:	31400215 	stw	r5,8(r6)
  804b90:	29800315 	stw	r6,12(r5)
  804b94:	08076fc0 	call	8076fc <__malloc_unlock>
  804b98:	80c00204 	addi	r3,r16,8
  804b9c:	003faa06 	br	804a48 <_malloc_r+0x50>
  804ba0:	00800104 	movi	r2,4
  804ba4:	10c0052e 	bgeu	r2,r3,804bbc <_malloc_r+0x1c4>
  804ba8:	00800504 	movi	r2,20
  804bac:	10c07836 	bltu	r2,r3,804d90 <_malloc_r+0x398>
  804bb0:	198016c4 	addi	r6,r3,91
  804bb4:	300490fa 	slli	r2,r6,3
  804bb8:	003fbc06 	br	804aac <_malloc_r+0xb4>
  804bbc:	8804d1ba 	srli	r2,r17,6
  804bc0:	11800e04 	addi	r6,r2,56
  804bc4:	300490fa 	slli	r2,r6,3
  804bc8:	003fb806 	br	804aac <_malloc_r+0xb4>
  804bcc:	00807fc4 	movi	r2,511
  804bd0:	1140bb36 	bltu	r2,r5,804ec0 <_malloc_r+0x4c8>
  804bd4:	2806d0fa 	srli	r3,r5,3
  804bd8:	573ffe04 	addi	fp,r10,-8
  804bdc:	00800044 	movi	r2,1
  804be0:	180890fa 	slli	r4,r3,3
  804be4:	1807d0ba 	srai	r3,r3,2
  804be8:	e1c00117 	ldw	r7,4(fp)
  804bec:	5909883a 	add	r4,r11,r4
  804bf0:	21400217 	ldw	r5,8(r4)
  804bf4:	10c4983a 	sll	r2,r2,r3
  804bf8:	81000315 	stw	r4,12(r16)
  804bfc:	81400215 	stw	r5,8(r16)
  804c00:	388eb03a 	or	r7,r7,r2
  804c04:	2c000315 	stw	r16,12(r5)
  804c08:	24000215 	stw	r16,8(r4)
  804c0c:	e1c00115 	stw	r7,4(fp)
  804c10:	4807883a 	mov	r3,r9
  804c14:	4800cd16 	blt	r9,zero,804f4c <_malloc_r+0x554>
  804c18:	1807d0ba 	srai	r3,r3,2
  804c1c:	00800044 	movi	r2,1
  804c20:	10c8983a 	sll	r4,r2,r3
  804c24:	39004436 	bltu	r7,r4,804d38 <_malloc_r+0x340>
  804c28:	21c4703a 	and	r2,r4,r7
  804c2c:	10000a1e 	bne	r2,zero,804c58 <_malloc_r+0x260>
  804c30:	2109883a 	add	r4,r4,r4
  804c34:	00bfff04 	movi	r2,-4
  804c38:	4884703a 	and	r2,r9,r2
  804c3c:	3906703a 	and	r3,r7,r4
  804c40:	12400104 	addi	r9,r2,4
  804c44:	1800041e 	bne	r3,zero,804c58 <_malloc_r+0x260>
  804c48:	2109883a 	add	r4,r4,r4
  804c4c:	3904703a 	and	r2,r7,r4
  804c50:	4a400104 	addi	r9,r9,4
  804c54:	103ffc26 	beq	r2,zero,804c48 <_malloc_r+0x250>
  804c58:	480490fa 	slli	r2,r9,3
  804c5c:	4819883a 	mov	r12,r9
  804c60:	023fff04 	movi	r8,-4
  804c64:	589b883a 	add	r13,r11,r2
  804c68:	6807883a 	mov	r3,r13
  804c6c:	014003c4 	movi	r5,15
  804c70:	1c000317 	ldw	r16,12(r3)
  804c74:	1c00041e 	bne	r3,r16,804c88 <_malloc_r+0x290>
  804c78:	0000a706 	br	804f18 <_malloc_r+0x520>
  804c7c:	3000ab0e 	bge	r6,zero,804f2c <_malloc_r+0x534>
  804c80:	84000317 	ldw	r16,12(r16)
  804c84:	1c00a426 	beq	r3,r16,804f18 <_malloc_r+0x520>
  804c88:	80800117 	ldw	r2,4(r16)
  804c8c:	1204703a 	and	r2,r2,r8
  804c90:	144dc83a 	sub	r6,r2,r17
  804c94:	29bff90e 	bge	r5,r6,804c7c <_malloc_r+0x284>
  804c98:	81000317 	ldw	r4,12(r16)
  804c9c:	80c00217 	ldw	r3,8(r16)
  804ca0:	89400054 	ori	r5,r17,1
  804ca4:	8445883a 	add	r2,r16,r17
  804ca8:	20c00215 	stw	r3,8(r4)
  804cac:	19000315 	stw	r4,12(r3)
  804cb0:	81400115 	stw	r5,4(r16)
  804cb4:	1187883a 	add	r3,r2,r6
  804cb8:	31000054 	ori	r4,r6,1
  804cbc:	50800315 	stw	r2,12(r10)
  804cc0:	50800215 	stw	r2,8(r10)
  804cc4:	19800015 	stw	r6,0(r3)
  804cc8:	11000115 	stw	r4,4(r2)
  804ccc:	12800215 	stw	r10,8(r2)
  804cd0:	12800315 	stw	r10,12(r2)
  804cd4:	9009883a 	mov	r4,r18
  804cd8:	08076fc0 	call	8076fc <__malloc_unlock>
  804cdc:	80c00204 	addi	r3,r16,8
  804ce0:	003f5906 	br	804a48 <_malloc_r+0x50>
  804ce4:	8109883a 	add	r4,r16,r4
  804ce8:	20800117 	ldw	r2,4(r4)
  804cec:	80c00217 	ldw	r3,8(r16)
  804cf0:	81400317 	ldw	r5,12(r16)
  804cf4:	10800054 	ori	r2,r2,1
  804cf8:	20800115 	stw	r2,4(r4)
  804cfc:	28c00215 	stw	r3,8(r5)
  804d00:	19400315 	stw	r5,12(r3)
  804d04:	9009883a 	mov	r4,r18
  804d08:	08076fc0 	call	8076fc <__malloc_unlock>
  804d0c:	80c00204 	addi	r3,r16,8
  804d10:	003f4d06 	br	804a48 <_malloc_r+0x50>
  804d14:	80800204 	addi	r2,r16,8
  804d18:	14000317 	ldw	r16,12(r2)
  804d1c:	143f911e 	bne	r2,r16,804b64 <_malloc_r+0x16c>
  804d20:	1a400084 	addi	r9,r3,2
  804d24:	003f7306 	br	804af4 <_malloc_r+0xfc>
  804d28:	88c00054 	ori	r3,r17,1
  804d2c:	8445883a 	add	r2,r16,r17
  804d30:	80c00115 	stw	r3,4(r16)
  804d34:	003fdf06 	br	804cb4 <_malloc_r+0x2bc>
  804d38:	e4000217 	ldw	r16,8(fp)
  804d3c:	00bfff04 	movi	r2,-4
  804d40:	80c00117 	ldw	r3,4(r16)
  804d44:	802d883a 	mov	r22,r16
  804d48:	18aa703a 	and	r21,r3,r2
  804d4c:	ac401636 	bltu	r21,r17,804da8 <_malloc_r+0x3b0>
  804d50:	ac49c83a 	sub	r4,r21,r17
  804d54:	008003c4 	movi	r2,15
  804d58:	1100130e 	bge	r2,r4,804da8 <_malloc_r+0x3b0>
  804d5c:	88800054 	ori	r2,r17,1
  804d60:	8447883a 	add	r3,r16,r17
  804d64:	80800115 	stw	r2,4(r16)
  804d68:	20800054 	ori	r2,r4,1
  804d6c:	18800115 	stw	r2,4(r3)
  804d70:	e0c00215 	stw	r3,8(fp)
  804d74:	9009883a 	mov	r4,r18
  804d78:	08076fc0 	call	8076fc <__malloc_unlock>
  804d7c:	80c00204 	addi	r3,r16,8
  804d80:	003f3106 	br	804a48 <_malloc_r+0x50>
  804d84:	39c00117 	ldw	r7,4(r7)
  804d88:	573ffe04 	addi	fp,r10,-8
  804d8c:	003fa006 	br	804c10 <_malloc_r+0x218>
  804d90:	00801504 	movi	r2,84
  804d94:	10c06736 	bltu	r2,r3,804f34 <_malloc_r+0x53c>
  804d98:	8804d33a 	srli	r2,r17,12
  804d9c:	11801b84 	addi	r6,r2,110
  804da0:	300490fa 	slli	r2,r6,3
  804da4:	003f4106 	br	804aac <_malloc_r+0xb4>
  804da8:	d0a77f17 	ldw	r2,-25092(gp)
  804dac:	d0e00517 	ldw	r3,-32748(gp)
  804db0:	053fffc4 	movi	r20,-1
  804db4:	10800404 	addi	r2,r2,16
  804db8:	88a7883a 	add	r19,r17,r2
  804dbc:	1d000326 	beq	r3,r20,804dcc <_malloc_r+0x3d4>
  804dc0:	98c3ffc4 	addi	r3,r19,4095
  804dc4:	00bc0004 	movi	r2,-4096
  804dc8:	18a6703a 	and	r19,r3,r2
  804dcc:	9009883a 	mov	r4,r18
  804dd0:	980b883a 	mov	r5,r19
  804dd4:	08059900 	call	805990 <_sbrk_r>
  804dd8:	1009883a 	mov	r4,r2
  804ddc:	15000426 	beq	r2,r20,804df0 <_malloc_r+0x3f8>
  804de0:	854b883a 	add	r5,r16,r21
  804de4:	1029883a 	mov	r20,r2
  804de8:	11405a2e 	bgeu	r2,r5,804f54 <_malloc_r+0x55c>
  804dec:	87000c26 	beq	r16,fp,804e20 <_malloc_r+0x428>
  804df0:	e4000217 	ldw	r16,8(fp)
  804df4:	80c00117 	ldw	r3,4(r16)
  804df8:	00bfff04 	movi	r2,-4
  804dfc:	1884703a 	and	r2,r3,r2
  804e00:	14400336 	bltu	r2,r17,804e10 <_malloc_r+0x418>
  804e04:	1449c83a 	sub	r4,r2,r17
  804e08:	008003c4 	movi	r2,15
  804e0c:	113fd316 	blt	r2,r4,804d5c <_malloc_r+0x364>
  804e10:	9009883a 	mov	r4,r18
  804e14:	08076fc0 	call	8076fc <__malloc_unlock>
  804e18:	0007883a 	mov	r3,zero
  804e1c:	003f0a06 	br	804a48 <_malloc_r+0x50>
  804e20:	05c02074 	movhi	r23,129
  804e24:	bdfd2f04 	addi	r23,r23,-2884
  804e28:	b8800017 	ldw	r2,0(r23)
  804e2c:	988d883a 	add	r6,r19,r2
  804e30:	b9800015 	stw	r6,0(r23)
  804e34:	d0e00517 	ldw	r3,-32748(gp)
  804e38:	00bfffc4 	movi	r2,-1
  804e3c:	18808e26 	beq	r3,r2,805078 <_malloc_r+0x680>
  804e40:	2145c83a 	sub	r2,r4,r5
  804e44:	3085883a 	add	r2,r6,r2
  804e48:	b8800015 	stw	r2,0(r23)
  804e4c:	20c001cc 	andi	r3,r4,7
  804e50:	18005f1e 	bne	r3,zero,804fd0 <_malloc_r+0x5d8>
  804e54:	000b883a 	mov	r5,zero
  804e58:	a4c5883a 	add	r2,r20,r19
  804e5c:	1083ffcc 	andi	r2,r2,4095
  804e60:	00c40004 	movi	r3,4096
  804e64:	1887c83a 	sub	r3,r3,r2
  804e68:	28e7883a 	add	r19,r5,r3
  804e6c:	9009883a 	mov	r4,r18
  804e70:	980b883a 	mov	r5,r19
  804e74:	08059900 	call	805990 <_sbrk_r>
  804e78:	1007883a 	mov	r3,r2
  804e7c:	00bfffc4 	movi	r2,-1
  804e80:	18807a26 	beq	r3,r2,80506c <_malloc_r+0x674>
  804e84:	1d05c83a 	sub	r2,r3,r20
  804e88:	9885883a 	add	r2,r19,r2
  804e8c:	10c00054 	ori	r3,r2,1
  804e90:	b8800017 	ldw	r2,0(r23)
  804e94:	a021883a 	mov	r16,r20
  804e98:	a0c00115 	stw	r3,4(r20)
  804e9c:	9885883a 	add	r2,r19,r2
  804ea0:	b8800015 	stw	r2,0(r23)
  804ea4:	e5000215 	stw	r20,8(fp)
  804ea8:	b7003626 	beq	r22,fp,804f84 <_malloc_r+0x58c>
  804eac:	018003c4 	movi	r6,15
  804eb0:	35404b36 	bltu	r6,r21,804fe0 <_malloc_r+0x5e8>
  804eb4:	00800044 	movi	r2,1
  804eb8:	a0800115 	stw	r2,4(r20)
  804ebc:	003fcd06 	br	804df4 <_malloc_r+0x3fc>
  804ec0:	2808d27a 	srli	r4,r5,9
  804ec4:	2000371e 	bne	r4,zero,804fa4 <_malloc_r+0x5ac>
  804ec8:	2808d0fa 	srli	r4,r5,3
  804ecc:	200690fa 	slli	r3,r4,3
  804ed0:	1ad1883a 	add	r8,r3,r11
  804ed4:	41800217 	ldw	r6,8(r8)
  804ed8:	41805b26 	beq	r8,r6,805048 <_malloc_r+0x650>
  804edc:	30800117 	ldw	r2,4(r6)
  804ee0:	00ffff04 	movi	r3,-4
  804ee4:	10c4703a 	and	r2,r2,r3
  804ee8:	2880022e 	bgeu	r5,r2,804ef4 <_malloc_r+0x4fc>
  804eec:	31800217 	ldw	r6,8(r6)
  804ef0:	41bffa1e 	bne	r8,r6,804edc <_malloc_r+0x4e4>
  804ef4:	32000317 	ldw	r8,12(r6)
  804ef8:	39c00117 	ldw	r7,4(r7)
  804efc:	82000315 	stw	r8,12(r16)
  804f00:	81800215 	stw	r6,8(r16)
  804f04:	07002074 	movhi	fp,129
  804f08:	e72f7904 	addi	fp,fp,-16924
  804f0c:	34000315 	stw	r16,12(r6)
  804f10:	44000215 	stw	r16,8(r8)
  804f14:	003f3e06 	br	804c10 <_malloc_r+0x218>
  804f18:	63000044 	addi	r12,r12,1
  804f1c:	608000cc 	andi	r2,r12,3
  804f20:	10005d26 	beq	r2,zero,805098 <_malloc_r+0x6a0>
  804f24:	18c00204 	addi	r3,r3,8
  804f28:	003f5106 	br	804c70 <_malloc_r+0x278>
  804f2c:	8089883a 	add	r4,r16,r2
  804f30:	003f6d06 	br	804ce8 <_malloc_r+0x2f0>
  804f34:	00805504 	movi	r2,340
  804f38:	10c02036 	bltu	r2,r3,804fbc <_malloc_r+0x5c4>
  804f3c:	8804d3fa 	srli	r2,r17,15
  804f40:	11801dc4 	addi	r6,r2,119
  804f44:	300490fa 	slli	r2,r6,3
  804f48:	003ed806 	br	804aac <_malloc_r+0xb4>
  804f4c:	48c000c4 	addi	r3,r9,3
  804f50:	003f3106 	br	804c18 <_malloc_r+0x220>
  804f54:	05c02074 	movhi	r23,129
  804f58:	bdfd2f04 	addi	r23,r23,-2884
  804f5c:	b8800017 	ldw	r2,0(r23)
  804f60:	988d883a 	add	r6,r19,r2
  804f64:	b9800015 	stw	r6,0(r23)
  804f68:	293fb21e 	bne	r5,r4,804e34 <_malloc_r+0x43c>
  804f6c:	2083ffcc 	andi	r2,r4,4095
  804f70:	103fb01e 	bne	r2,zero,804e34 <_malloc_r+0x43c>
  804f74:	e4000217 	ldw	r16,8(fp)
  804f78:	9d45883a 	add	r2,r19,r21
  804f7c:	10800054 	ori	r2,r2,1
  804f80:	80800115 	stw	r2,4(r16)
  804f84:	b8c00017 	ldw	r3,0(r23)
  804f88:	d0a78017 	ldw	r2,-25088(gp)
  804f8c:	10c0012e 	bgeu	r2,r3,804f94 <_malloc_r+0x59c>
  804f90:	d0e78015 	stw	r3,-25088(gp)
  804f94:	d0a78117 	ldw	r2,-25084(gp)
  804f98:	10ff962e 	bgeu	r2,r3,804df4 <_malloc_r+0x3fc>
  804f9c:	d0e78115 	stw	r3,-25084(gp)
  804fa0:	003f9406 	br	804df4 <_malloc_r+0x3fc>
  804fa4:	00800104 	movi	r2,4
  804fa8:	11001e36 	bltu	r2,r4,805024 <_malloc_r+0x62c>
  804fac:	2804d1ba 	srli	r2,r5,6
  804fb0:	11000e04 	addi	r4,r2,56
  804fb4:	200690fa 	slli	r3,r4,3
  804fb8:	003fc506 	br	804ed0 <_malloc_r+0x4d8>
  804fbc:	00815504 	movi	r2,1364
  804fc0:	10c01d2e 	bgeu	r2,r3,805038 <_malloc_r+0x640>
  804fc4:	01801f84 	movi	r6,126
  804fc8:	0080fc04 	movi	r2,1008
  804fcc:	003eb706 	br	804aac <_malloc_r+0xb4>
  804fd0:	00800204 	movi	r2,8
  804fd4:	10cbc83a 	sub	r5,r2,r3
  804fd8:	2169883a 	add	r20,r4,r5
  804fdc:	003f9e06 	br	804e58 <_malloc_r+0x460>
  804fe0:	00bffe04 	movi	r2,-8
  804fe4:	a93ffd04 	addi	r4,r21,-12
  804fe8:	2088703a 	and	r4,r4,r2
  804fec:	b10b883a 	add	r5,r22,r4
  804ff0:	00c00144 	movi	r3,5
  804ff4:	28c00215 	stw	r3,8(r5)
  804ff8:	28c00115 	stw	r3,4(r5)
  804ffc:	b0800117 	ldw	r2,4(r22)
  805000:	1080004c 	andi	r2,r2,1
  805004:	2084b03a 	or	r2,r4,r2
  805008:	b0800115 	stw	r2,4(r22)
  80500c:	313fdd2e 	bgeu	r6,r4,804f84 <_malloc_r+0x58c>
  805010:	b1400204 	addi	r5,r22,8
  805014:	9009883a 	mov	r4,r18
  805018:	08061580 	call	806158 <_free_r>
  80501c:	e4000217 	ldw	r16,8(fp)
  805020:	003fd806 	br	804f84 <_malloc_r+0x58c>
  805024:	00800504 	movi	r2,20
  805028:	11001536 	bltu	r2,r4,805080 <_malloc_r+0x688>
  80502c:	210016c4 	addi	r4,r4,91
  805030:	200690fa 	slli	r3,r4,3
  805034:	003fa606 	br	804ed0 <_malloc_r+0x4d8>
  805038:	8804d4ba 	srli	r2,r17,18
  80503c:	11801f04 	addi	r6,r2,124
  805040:	300490fa 	slli	r2,r6,3
  805044:	003e9906 	br	804aac <_malloc_r+0xb4>
  805048:	2009d0ba 	srai	r4,r4,2
  80504c:	01402074 	movhi	r5,129
  805050:	296f7904 	addi	r5,r5,-16924
  805054:	00c00044 	movi	r3,1
  805058:	28800117 	ldw	r2,4(r5)
  80505c:	1906983a 	sll	r3,r3,r4
  805060:	10c4b03a 	or	r2,r2,r3
  805064:	28800115 	stw	r2,4(r5)
  805068:	003fa306 	br	804ef8 <_malloc_r+0x500>
  80506c:	0027883a 	mov	r19,zero
  805070:	00c00044 	movi	r3,1
  805074:	003f8606 	br	804e90 <_malloc_r+0x498>
  805078:	d1200515 	stw	r4,-32748(gp)
  80507c:	003f7306 	br	804e4c <_malloc_r+0x454>
  805080:	00801504 	movi	r2,84
  805084:	11001936 	bltu	r2,r4,8050ec <_malloc_r+0x6f4>
  805088:	2804d33a 	srli	r2,r5,12
  80508c:	11001b84 	addi	r4,r2,110
  805090:	200690fa 	slli	r3,r4,3
  805094:	003f8e06 	br	804ed0 <_malloc_r+0x4d8>
  805098:	480b883a 	mov	r5,r9
  80509c:	6807883a 	mov	r3,r13
  8050a0:	288000cc 	andi	r2,r5,3
  8050a4:	18fffe04 	addi	r3,r3,-8
  8050a8:	297fffc4 	addi	r5,r5,-1
  8050ac:	10001526 	beq	r2,zero,805104 <_malloc_r+0x70c>
  8050b0:	18800217 	ldw	r2,8(r3)
  8050b4:	10fffa26 	beq	r2,r3,8050a0 <_malloc_r+0x6a8>
  8050b8:	2109883a 	add	r4,r4,r4
  8050bc:	393f1e36 	bltu	r7,r4,804d38 <_malloc_r+0x340>
  8050c0:	203f1d26 	beq	r4,zero,804d38 <_malloc_r+0x340>
  8050c4:	21c4703a 	and	r2,r4,r7
  8050c8:	10000226 	beq	r2,zero,8050d4 <_malloc_r+0x6dc>
  8050cc:	6013883a 	mov	r9,r12
  8050d0:	003ee106 	br	804c58 <_malloc_r+0x260>
  8050d4:	2109883a 	add	r4,r4,r4
  8050d8:	3904703a 	and	r2,r7,r4
  8050dc:	63000104 	addi	r12,r12,4
  8050e0:	103ffc26 	beq	r2,zero,8050d4 <_malloc_r+0x6dc>
  8050e4:	6013883a 	mov	r9,r12
  8050e8:	003edb06 	br	804c58 <_malloc_r+0x260>
  8050ec:	00805504 	movi	r2,340
  8050f0:	11000836 	bltu	r2,r4,805114 <_malloc_r+0x71c>
  8050f4:	2804d3fa 	srli	r2,r5,15
  8050f8:	11001dc4 	addi	r4,r2,119
  8050fc:	200690fa 	slli	r3,r4,3
  805100:	003f7306 	br	804ed0 <_malloc_r+0x4d8>
  805104:	0104303a 	nor	r2,zero,r4
  805108:	388e703a 	and	r7,r7,r2
  80510c:	e1c00115 	stw	r7,4(fp)
  805110:	003fe906 	br	8050b8 <_malloc_r+0x6c0>
  805114:	00815504 	movi	r2,1364
  805118:	1100032e 	bgeu	r2,r4,805128 <_malloc_r+0x730>
  80511c:	01001f84 	movi	r4,126
  805120:	00c0fc04 	movi	r3,1008
  805124:	003f6a06 	br	804ed0 <_malloc_r+0x4d8>
  805128:	2804d4ba 	srli	r2,r5,18
  80512c:	11001f04 	addi	r4,r2,124
  805130:	200690fa 	slli	r3,r4,3
  805134:	003f6606 	br	804ed0 <_malloc_r+0x4d8>

00805138 <memchr>:
  805138:	008000c4 	movi	r2,3
  80513c:	29403fcc 	andi	r5,r5,255
  805140:	2007883a 	mov	r3,r4
  805144:	1180022e 	bgeu	r2,r6,805150 <memchr+0x18>
  805148:	2084703a 	and	r2,r4,r2
  80514c:	10000b26 	beq	r2,zero,80517c <memchr+0x44>
  805150:	313fffc4 	addi	r4,r6,-1
  805154:	3000051e 	bne	r6,zero,80516c <memchr+0x34>
  805158:	00002c06 	br	80520c <memchr+0xd4>
  80515c:	213fffc4 	addi	r4,r4,-1
  805160:	00bfffc4 	movi	r2,-1
  805164:	18c00044 	addi	r3,r3,1
  805168:	20802826 	beq	r4,r2,80520c <memchr+0xd4>
  80516c:	18800003 	ldbu	r2,0(r3)
  805170:	28bffa1e 	bne	r5,r2,80515c <memchr+0x24>
  805174:	1805883a 	mov	r2,r3
  805178:	f800283a 	ret
  80517c:	0011883a 	mov	r8,zero
  805180:	0007883a 	mov	r3,zero
  805184:	01c00104 	movi	r7,4
  805188:	4004923a 	slli	r2,r8,8
  80518c:	18c00044 	addi	r3,r3,1
  805190:	1151883a 	add	r8,r2,r5
  805194:	19fffc1e 	bne	r3,r7,805188 <memchr+0x50>
  805198:	02bfbff4 	movhi	r10,65279
  80519c:	52bfbfc4 	addi	r10,r10,-257
  8051a0:	02602074 	movhi	r9,32897
  8051a4:	4a602004 	addi	r9,r9,-32640
  8051a8:	02c000c4 	movi	r11,3
  8051ac:	20800017 	ldw	r2,0(r4)
  8051b0:	31bfff04 	addi	r6,r6,-4
  8051b4:	200f883a 	mov	r7,r4
  8051b8:	1204f03a 	xor	r2,r2,r8
  8051bc:	1287883a 	add	r3,r2,r10
  8051c0:	1a46703a 	and	r3,r3,r9
  8051c4:	0084303a 	nor	r2,zero,r2
  8051c8:	10c4703a 	and	r2,r2,r3
  8051cc:	10000b26 	beq	r2,zero,8051fc <memchr+0xc4>
  8051d0:	20800003 	ldbu	r2,0(r4)
  8051d4:	28800f26 	beq	r5,r2,805214 <memchr+0xdc>
  8051d8:	20800043 	ldbu	r2,1(r4)
  8051dc:	21c00044 	addi	r7,r4,1
  8051e0:	28800c26 	beq	r5,r2,805214 <memchr+0xdc>
  8051e4:	20800083 	ldbu	r2,2(r4)
  8051e8:	21c00084 	addi	r7,r4,2
  8051ec:	28800926 	beq	r5,r2,805214 <memchr+0xdc>
  8051f0:	208000c3 	ldbu	r2,3(r4)
  8051f4:	21c000c4 	addi	r7,r4,3
  8051f8:	28800626 	beq	r5,r2,805214 <memchr+0xdc>
  8051fc:	21000104 	addi	r4,r4,4
  805200:	59bfea36 	bltu	r11,r6,8051ac <memchr+0x74>
  805204:	2007883a 	mov	r3,r4
  805208:	003fd106 	br	805150 <memchr+0x18>
  80520c:	0005883a 	mov	r2,zero
  805210:	f800283a 	ret
  805214:	3805883a 	mov	r2,r7
  805218:	f800283a 	ret

0080521c <memcpy>:
  80521c:	01c003c4 	movi	r7,15
  805220:	2007883a 	mov	r3,r4
  805224:	3980032e 	bgeu	r7,r6,805234 <memcpy+0x18>
  805228:	2904b03a 	or	r2,r5,r4
  80522c:	108000cc 	andi	r2,r2,3
  805230:	10000926 	beq	r2,zero,805258 <memcpy+0x3c>
  805234:	30000626 	beq	r6,zero,805250 <memcpy+0x34>
  805238:	30cd883a 	add	r6,r6,r3
  80523c:	28800003 	ldbu	r2,0(r5)
  805240:	29400044 	addi	r5,r5,1
  805244:	18800005 	stb	r2,0(r3)
  805248:	18c00044 	addi	r3,r3,1
  80524c:	30fffb1e 	bne	r6,r3,80523c <memcpy+0x20>
  805250:	2005883a 	mov	r2,r4
  805254:	f800283a 	ret
  805258:	3811883a 	mov	r8,r7
  80525c:	200f883a 	mov	r7,r4
  805260:	28c00017 	ldw	r3,0(r5)
  805264:	31bffc04 	addi	r6,r6,-16
  805268:	38c00015 	stw	r3,0(r7)
  80526c:	28800117 	ldw	r2,4(r5)
  805270:	38800115 	stw	r2,4(r7)
  805274:	28c00217 	ldw	r3,8(r5)
  805278:	38c00215 	stw	r3,8(r7)
  80527c:	28800317 	ldw	r2,12(r5)
  805280:	29400404 	addi	r5,r5,16
  805284:	38800315 	stw	r2,12(r7)
  805288:	39c00404 	addi	r7,r7,16
  80528c:	41bff436 	bltu	r8,r6,805260 <memcpy+0x44>
  805290:	008000c4 	movi	r2,3
  805294:	1180072e 	bgeu	r2,r6,8052b4 <memcpy+0x98>
  805298:	1007883a 	mov	r3,r2
  80529c:	28800017 	ldw	r2,0(r5)
  8052a0:	31bfff04 	addi	r6,r6,-4
  8052a4:	29400104 	addi	r5,r5,4
  8052a8:	38800015 	stw	r2,0(r7)
  8052ac:	39c00104 	addi	r7,r7,4
  8052b0:	19bffa36 	bltu	r3,r6,80529c <memcpy+0x80>
  8052b4:	3807883a 	mov	r3,r7
  8052b8:	003fde06 	br	805234 <memcpy+0x18>

008052bc <memmove>:
  8052bc:	2807883a 	mov	r3,r5
  8052c0:	2011883a 	mov	r8,r4
  8052c4:	29000c2e 	bgeu	r5,r4,8052f8 <memmove+0x3c>
  8052c8:	298f883a 	add	r7,r5,r6
  8052cc:	21c00a2e 	bgeu	r4,r7,8052f8 <memmove+0x3c>
  8052d0:	30000726 	beq	r6,zero,8052f0 <memmove+0x34>
  8052d4:	2187883a 	add	r3,r4,r6
  8052d8:	198dc83a 	sub	r6,r3,r6
  8052dc:	39ffffc4 	addi	r7,r7,-1
  8052e0:	38800003 	ldbu	r2,0(r7)
  8052e4:	18ffffc4 	addi	r3,r3,-1
  8052e8:	18800005 	stb	r2,0(r3)
  8052ec:	19bffb1e 	bne	r3,r6,8052dc <memmove+0x20>
  8052f0:	2005883a 	mov	r2,r4
  8052f4:	f800283a 	ret
  8052f8:	01c003c4 	movi	r7,15
  8052fc:	39800a36 	bltu	r7,r6,805328 <memmove+0x6c>
  805300:	303ffb26 	beq	r6,zero,8052f0 <memmove+0x34>
  805304:	400f883a 	mov	r7,r8
  805308:	320d883a 	add	r6,r6,r8
  80530c:	28800003 	ldbu	r2,0(r5)
  805310:	29400044 	addi	r5,r5,1
  805314:	38800005 	stb	r2,0(r7)
  805318:	39c00044 	addi	r7,r7,1
  80531c:	39bffb1e 	bne	r7,r6,80530c <memmove+0x50>
  805320:	2005883a 	mov	r2,r4
  805324:	f800283a 	ret
  805328:	1904b03a 	or	r2,r3,r4
  80532c:	108000cc 	andi	r2,r2,3
  805330:	103ff31e 	bne	r2,zero,805300 <memmove+0x44>
  805334:	3811883a 	mov	r8,r7
  805338:	180b883a 	mov	r5,r3
  80533c:	200f883a 	mov	r7,r4
  805340:	28c00017 	ldw	r3,0(r5)
  805344:	31bffc04 	addi	r6,r6,-16
  805348:	38c00015 	stw	r3,0(r7)
  80534c:	28800117 	ldw	r2,4(r5)
  805350:	38800115 	stw	r2,4(r7)
  805354:	28c00217 	ldw	r3,8(r5)
  805358:	38c00215 	stw	r3,8(r7)
  80535c:	28800317 	ldw	r2,12(r5)
  805360:	29400404 	addi	r5,r5,16
  805364:	38800315 	stw	r2,12(r7)
  805368:	39c00404 	addi	r7,r7,16
  80536c:	41bff436 	bltu	r8,r6,805340 <memmove+0x84>
  805370:	008000c4 	movi	r2,3
  805374:	1180072e 	bgeu	r2,r6,805394 <memmove+0xd8>
  805378:	1007883a 	mov	r3,r2
  80537c:	28800017 	ldw	r2,0(r5)
  805380:	31bfff04 	addi	r6,r6,-4
  805384:	29400104 	addi	r5,r5,4
  805388:	38800015 	stw	r2,0(r7)
  80538c:	39c00104 	addi	r7,r7,4
  805390:	19bffa36 	bltu	r3,r6,80537c <memmove+0xc0>
  805394:	3811883a 	mov	r8,r7
  805398:	003fd906 	br	805300 <memmove+0x44>

0080539c <_realloc_r>:
  80539c:	defff404 	addi	sp,sp,-48
  8053a0:	dd800815 	stw	r22,32(sp)
  8053a4:	dc800415 	stw	r18,16(sp)
  8053a8:	dc400315 	stw	r17,12(sp)
  8053ac:	dfc00b15 	stw	ra,44(sp)
  8053b0:	df000a15 	stw	fp,40(sp)
  8053b4:	ddc00915 	stw	r23,36(sp)
  8053b8:	dd400715 	stw	r21,28(sp)
  8053bc:	dd000615 	stw	r20,24(sp)
  8053c0:	dcc00515 	stw	r19,20(sp)
  8053c4:	dc000215 	stw	r16,8(sp)
  8053c8:	2825883a 	mov	r18,r5
  8053cc:	3023883a 	mov	r17,r6
  8053d0:	202d883a 	mov	r22,r4
  8053d4:	2800c926 	beq	r5,zero,8056fc <_realloc_r+0x360>
  8053d8:	08076dc0 	call	8076dc <__malloc_lock>
  8053dc:	943ffe04 	addi	r16,r18,-8
  8053e0:	88c002c4 	addi	r3,r17,11
  8053e4:	00800584 	movi	r2,22
  8053e8:	82000117 	ldw	r8,4(r16)
  8053ec:	10c01b2e 	bgeu	r2,r3,80545c <_realloc_r+0xc0>
  8053f0:	00bffe04 	movi	r2,-8
  8053f4:	188e703a 	and	r7,r3,r2
  8053f8:	3839883a 	mov	fp,r7
  8053fc:	38001a16 	blt	r7,zero,805468 <_realloc_r+0xcc>
  805400:	e4401936 	bltu	fp,r17,805468 <_realloc_r+0xcc>
  805404:	013fff04 	movi	r4,-4
  805408:	4126703a 	and	r19,r8,r4
  80540c:	99c02616 	blt	r19,r7,8054a8 <_realloc_r+0x10c>
  805410:	802b883a 	mov	r21,r16
  805414:	9829883a 	mov	r20,r19
  805418:	84000204 	addi	r16,r16,8
  80541c:	a80f883a 	mov	r7,r21
  805420:	a70dc83a 	sub	r6,r20,fp
  805424:	008003c4 	movi	r2,15
  805428:	1180c136 	bltu	r2,r6,805730 <_realloc_r+0x394>
  80542c:	38800117 	ldw	r2,4(r7)
  805430:	a549883a 	add	r4,r20,r21
  805434:	1080004c 	andi	r2,r2,1
  805438:	a084b03a 	or	r2,r20,r2
  80543c:	38800115 	stw	r2,4(r7)
  805440:	20c00117 	ldw	r3,4(r4)
  805444:	18c00054 	ori	r3,r3,1
  805448:	20c00115 	stw	r3,4(r4)
  80544c:	b009883a 	mov	r4,r22
  805450:	08076fc0 	call	8076fc <__malloc_unlock>
  805454:	8023883a 	mov	r17,r16
  805458:	00000606 	br	805474 <_realloc_r+0xd8>
  80545c:	01c00404 	movi	r7,16
  805460:	3839883a 	mov	fp,r7
  805464:	e47fe72e 	bgeu	fp,r17,805404 <_realloc_r+0x68>
  805468:	00800304 	movi	r2,12
  80546c:	0023883a 	mov	r17,zero
  805470:	b0800015 	stw	r2,0(r22)
  805474:	8805883a 	mov	r2,r17
  805478:	dfc00b17 	ldw	ra,44(sp)
  80547c:	df000a17 	ldw	fp,40(sp)
  805480:	ddc00917 	ldw	r23,36(sp)
  805484:	dd800817 	ldw	r22,32(sp)
  805488:	dd400717 	ldw	r21,28(sp)
  80548c:	dd000617 	ldw	r20,24(sp)
  805490:	dcc00517 	ldw	r19,20(sp)
  805494:	dc800417 	ldw	r18,16(sp)
  805498:	dc400317 	ldw	r17,12(sp)
  80549c:	dc000217 	ldw	r16,8(sp)
  8054a0:	dec00c04 	addi	sp,sp,48
  8054a4:	f800283a 	ret
  8054a8:	00802074 	movhi	r2,129
  8054ac:	10af7904 	addi	r2,r2,-16924
  8054b0:	12400217 	ldw	r9,8(r2)
  8054b4:	84cd883a 	add	r6,r16,r19
  8054b8:	802b883a 	mov	r21,r16
  8054bc:	3240b926 	beq	r6,r9,8057a4 <_realloc_r+0x408>
  8054c0:	31400117 	ldw	r5,4(r6)
  8054c4:	00bfff84 	movi	r2,-2
  8054c8:	2884703a 	and	r2,r5,r2
  8054cc:	1185883a 	add	r2,r2,r6
  8054d0:	10c00117 	ldw	r3,4(r2)
  8054d4:	18c0004c 	andi	r3,r3,1
  8054d8:	1807003a 	cmpeq	r3,r3,zero
  8054dc:	1800a326 	beq	r3,zero,80576c <_realloc_r+0x3d0>
  8054e0:	2908703a 	and	r4,r5,r4
  8054e4:	9929883a 	add	r20,r19,r4
  8054e8:	a1c0a30e 	bge	r20,r7,805778 <_realloc_r+0x3dc>
  8054ec:	4080004c 	andi	r2,r8,1
  8054f0:	1000551e 	bne	r2,zero,805648 <_realloc_r+0x2ac>
  8054f4:	80800017 	ldw	r2,0(r16)
  8054f8:	80afc83a 	sub	r23,r16,r2
  8054fc:	b8c00117 	ldw	r3,4(r23)
  805500:	00bfff04 	movi	r2,-4
  805504:	1884703a 	and	r2,r3,r2
  805508:	30002e26 	beq	r6,zero,8055c4 <_realloc_r+0x228>
  80550c:	3240b926 	beq	r6,r9,8057f4 <_realloc_r+0x458>
  805510:	98a9883a 	add	r20,r19,r2
  805514:	2509883a 	add	r4,r4,r20
  805518:	d9000015 	stw	r4,0(sp)
  80551c:	21c02a16 	blt	r4,r7,8055c8 <_realloc_r+0x22c>
  805520:	30800317 	ldw	r2,12(r6)
  805524:	30c00217 	ldw	r3,8(r6)
  805528:	01400904 	movi	r5,36
  80552c:	99bfff04 	addi	r6,r19,-4
  805530:	18800315 	stw	r2,12(r3)
  805534:	10c00215 	stw	r3,8(r2)
  805538:	b9000317 	ldw	r4,12(r23)
  80553c:	b8800217 	ldw	r2,8(r23)
  805540:	b82b883a 	mov	r21,r23
  805544:	bc000204 	addi	r16,r23,8
  805548:	20800215 	stw	r2,8(r4)
  80554c:	11000315 	stw	r4,12(r2)
  805550:	2980e436 	bltu	r5,r6,8058e4 <_realloc_r+0x548>
  805554:	008004c4 	movi	r2,19
  805558:	9009883a 	mov	r4,r18
  80555c:	8011883a 	mov	r8,r16
  805560:	11800f2e 	bgeu	r2,r6,8055a0 <_realloc_r+0x204>
  805564:	90800017 	ldw	r2,0(r18)
  805568:	ba000404 	addi	r8,r23,16
  80556c:	91000204 	addi	r4,r18,8
  805570:	b8800215 	stw	r2,8(r23)
  805574:	90c00117 	ldw	r3,4(r18)
  805578:	008006c4 	movi	r2,27
  80557c:	b8c00315 	stw	r3,12(r23)
  805580:	1180072e 	bgeu	r2,r6,8055a0 <_realloc_r+0x204>
  805584:	90c00217 	ldw	r3,8(r18)
  805588:	ba000604 	addi	r8,r23,24
  80558c:	91000404 	addi	r4,r18,16
  805590:	b8c00415 	stw	r3,16(r23)
  805594:	90800317 	ldw	r2,12(r18)
  805598:	b8800515 	stw	r2,20(r23)
  80559c:	3140e726 	beq	r6,r5,80593c <_realloc_r+0x5a0>
  8055a0:	20800017 	ldw	r2,0(r4)
  8055a4:	dd000017 	ldw	r20,0(sp)
  8055a8:	b80f883a 	mov	r7,r23
  8055ac:	40800015 	stw	r2,0(r8)
  8055b0:	20c00117 	ldw	r3,4(r4)
  8055b4:	40c00115 	stw	r3,4(r8)
  8055b8:	20800217 	ldw	r2,8(r4)
  8055bc:	40800215 	stw	r2,8(r8)
  8055c0:	003f9706 	br	805420 <_realloc_r+0x84>
  8055c4:	98a9883a 	add	r20,r19,r2
  8055c8:	a1c01f16 	blt	r20,r7,805648 <_realloc_r+0x2ac>
  8055cc:	b8c00317 	ldw	r3,12(r23)
  8055d0:	b8800217 	ldw	r2,8(r23)
  8055d4:	99bfff04 	addi	r6,r19,-4
  8055d8:	01400904 	movi	r5,36
  8055dc:	b82b883a 	mov	r21,r23
  8055e0:	18800215 	stw	r2,8(r3)
  8055e4:	10c00315 	stw	r3,12(r2)
  8055e8:	bc000204 	addi	r16,r23,8
  8055ec:	2980c336 	bltu	r5,r6,8058fc <_realloc_r+0x560>
  8055f0:	008004c4 	movi	r2,19
  8055f4:	9009883a 	mov	r4,r18
  8055f8:	8011883a 	mov	r8,r16
  8055fc:	11800f2e 	bgeu	r2,r6,80563c <_realloc_r+0x2a0>
  805600:	90800017 	ldw	r2,0(r18)
  805604:	ba000404 	addi	r8,r23,16
  805608:	91000204 	addi	r4,r18,8
  80560c:	b8800215 	stw	r2,8(r23)
  805610:	90c00117 	ldw	r3,4(r18)
  805614:	008006c4 	movi	r2,27
  805618:	b8c00315 	stw	r3,12(r23)
  80561c:	1180072e 	bgeu	r2,r6,80563c <_realloc_r+0x2a0>
  805620:	90c00217 	ldw	r3,8(r18)
  805624:	ba000604 	addi	r8,r23,24
  805628:	91000404 	addi	r4,r18,16
  80562c:	b8c00415 	stw	r3,16(r23)
  805630:	90800317 	ldw	r2,12(r18)
  805634:	b8800515 	stw	r2,20(r23)
  805638:	3140c726 	beq	r6,r5,805958 <_realloc_r+0x5bc>
  80563c:	20800017 	ldw	r2,0(r4)
  805640:	b80f883a 	mov	r7,r23
  805644:	003fd906 	br	8055ac <_realloc_r+0x210>
  805648:	880b883a 	mov	r5,r17
  80564c:	b009883a 	mov	r4,r22
  805650:	08049f80 	call	8049f8 <_malloc_r>
  805654:	1023883a 	mov	r17,r2
  805658:	10002526 	beq	r2,zero,8056f0 <_realloc_r+0x354>
  80565c:	80800117 	ldw	r2,4(r16)
  805660:	00ffff84 	movi	r3,-2
  805664:	893ffe04 	addi	r4,r17,-8
  805668:	10c4703a 	and	r2,r2,r3
  80566c:	8085883a 	add	r2,r16,r2
  805670:	20809526 	beq	r4,r2,8058c8 <_realloc_r+0x52c>
  805674:	99bfff04 	addi	r6,r19,-4
  805678:	01c00904 	movi	r7,36
  80567c:	39804536 	bltu	r7,r6,805794 <_realloc_r+0x3f8>
  805680:	008004c4 	movi	r2,19
  805684:	9009883a 	mov	r4,r18
  805688:	880b883a 	mov	r5,r17
  80568c:	11800f2e 	bgeu	r2,r6,8056cc <_realloc_r+0x330>
  805690:	90800017 	ldw	r2,0(r18)
  805694:	89400204 	addi	r5,r17,8
  805698:	91000204 	addi	r4,r18,8
  80569c:	88800015 	stw	r2,0(r17)
  8056a0:	90c00117 	ldw	r3,4(r18)
  8056a4:	008006c4 	movi	r2,27
  8056a8:	88c00115 	stw	r3,4(r17)
  8056ac:	1180072e 	bgeu	r2,r6,8056cc <_realloc_r+0x330>
  8056b0:	90c00217 	ldw	r3,8(r18)
  8056b4:	89400404 	addi	r5,r17,16
  8056b8:	91000404 	addi	r4,r18,16
  8056bc:	88c00215 	stw	r3,8(r17)
  8056c0:	90800317 	ldw	r2,12(r18)
  8056c4:	88800315 	stw	r2,12(r17)
  8056c8:	31c09126 	beq	r6,r7,805910 <_realloc_r+0x574>
  8056cc:	20800017 	ldw	r2,0(r4)
  8056d0:	28800015 	stw	r2,0(r5)
  8056d4:	20c00117 	ldw	r3,4(r4)
  8056d8:	28c00115 	stw	r3,4(r5)
  8056dc:	20800217 	ldw	r2,8(r4)
  8056e0:	28800215 	stw	r2,8(r5)
  8056e4:	900b883a 	mov	r5,r18
  8056e8:	b009883a 	mov	r4,r22
  8056ec:	08061580 	call	806158 <_free_r>
  8056f0:	b009883a 	mov	r4,r22
  8056f4:	08076fc0 	call	8076fc <__malloc_unlock>
  8056f8:	003f5e06 	br	805474 <_realloc_r+0xd8>
  8056fc:	300b883a 	mov	r5,r6
  805700:	dfc00b17 	ldw	ra,44(sp)
  805704:	df000a17 	ldw	fp,40(sp)
  805708:	ddc00917 	ldw	r23,36(sp)
  80570c:	dd800817 	ldw	r22,32(sp)
  805710:	dd400717 	ldw	r21,28(sp)
  805714:	dd000617 	ldw	r20,24(sp)
  805718:	dcc00517 	ldw	r19,20(sp)
  80571c:	dc800417 	ldw	r18,16(sp)
  805720:	dc400317 	ldw	r17,12(sp)
  805724:	dc000217 	ldw	r16,8(sp)
  805728:	dec00c04 	addi	sp,sp,48
  80572c:	08049f81 	jmpi	8049f8 <_malloc_r>
  805730:	38800117 	ldw	r2,4(r7)
  805734:	e54b883a 	add	r5,fp,r21
  805738:	31000054 	ori	r4,r6,1
  80573c:	1080004c 	andi	r2,r2,1
  805740:	1704b03a 	or	r2,r2,fp
  805744:	38800115 	stw	r2,4(r7)
  805748:	29000115 	stw	r4,4(r5)
  80574c:	2987883a 	add	r3,r5,r6
  805750:	18800117 	ldw	r2,4(r3)
  805754:	29400204 	addi	r5,r5,8
  805758:	b009883a 	mov	r4,r22
  80575c:	10800054 	ori	r2,r2,1
  805760:	18800115 	stw	r2,4(r3)
  805764:	08061580 	call	806158 <_free_r>
  805768:	003f3806 	br	80544c <_realloc_r+0xb0>
  80576c:	000d883a 	mov	r6,zero
  805770:	0009883a 	mov	r4,zero
  805774:	003f5d06 	br	8054ec <_realloc_r+0x150>
  805778:	30c00217 	ldw	r3,8(r6)
  80577c:	30800317 	ldw	r2,12(r6)
  805780:	800f883a 	mov	r7,r16
  805784:	84000204 	addi	r16,r16,8
  805788:	10c00215 	stw	r3,8(r2)
  80578c:	18800315 	stw	r2,12(r3)
  805790:	003f2306 	br	805420 <_realloc_r+0x84>
  805794:	8809883a 	mov	r4,r17
  805798:	900b883a 	mov	r5,r18
  80579c:	08052bc0 	call	8052bc <memmove>
  8057a0:	003fd006 	br	8056e4 <_realloc_r+0x348>
  8057a4:	30800117 	ldw	r2,4(r6)
  8057a8:	e0c00404 	addi	r3,fp,16
  8057ac:	1108703a 	and	r4,r2,r4
  8057b0:	9905883a 	add	r2,r19,r4
  8057b4:	10ff4d16 	blt	r2,r3,8054ec <_realloc_r+0x150>
  8057b8:	1705c83a 	sub	r2,r2,fp
  8057bc:	870b883a 	add	r5,r16,fp
  8057c0:	10800054 	ori	r2,r2,1
  8057c4:	28800115 	stw	r2,4(r5)
  8057c8:	80c00117 	ldw	r3,4(r16)
  8057cc:	00802074 	movhi	r2,129
  8057d0:	10af7904 	addi	r2,r2,-16924
  8057d4:	b009883a 	mov	r4,r22
  8057d8:	18c0004c 	andi	r3,r3,1
  8057dc:	e0c6b03a 	or	r3,fp,r3
  8057e0:	11400215 	stw	r5,8(r2)
  8057e4:	80c00115 	stw	r3,4(r16)
  8057e8:	08076fc0 	call	8076fc <__malloc_unlock>
  8057ec:	84400204 	addi	r17,r16,8
  8057f0:	003f2006 	br	805474 <_realloc_r+0xd8>
  8057f4:	98a9883a 	add	r20,r19,r2
  8057f8:	2509883a 	add	r4,r4,r20
  8057fc:	e0800404 	addi	r2,fp,16
  805800:	d9000115 	stw	r4,4(sp)
  805804:	20bf7016 	blt	r4,r2,8055c8 <_realloc_r+0x22c>
  805808:	b8c00317 	ldw	r3,12(r23)
  80580c:	b8800217 	ldw	r2,8(r23)
  805810:	99bfff04 	addi	r6,r19,-4
  805814:	01400904 	movi	r5,36
  805818:	18800215 	stw	r2,8(r3)
  80581c:	10c00315 	stw	r3,12(r2)
  805820:	bc400204 	addi	r17,r23,8
  805824:	29804136 	bltu	r5,r6,80592c <_realloc_r+0x590>
  805828:	008004c4 	movi	r2,19
  80582c:	9009883a 	mov	r4,r18
  805830:	880f883a 	mov	r7,r17
  805834:	11800f2e 	bgeu	r2,r6,805874 <_realloc_r+0x4d8>
  805838:	90800017 	ldw	r2,0(r18)
  80583c:	b9c00404 	addi	r7,r23,16
  805840:	91000204 	addi	r4,r18,8
  805844:	b8800215 	stw	r2,8(r23)
  805848:	90c00117 	ldw	r3,4(r18)
  80584c:	008006c4 	movi	r2,27
  805850:	b8c00315 	stw	r3,12(r23)
  805854:	1180072e 	bgeu	r2,r6,805874 <_realloc_r+0x4d8>
  805858:	90c00217 	ldw	r3,8(r18)
  80585c:	b9c00604 	addi	r7,r23,24
  805860:	91000404 	addi	r4,r18,16
  805864:	b8c00415 	stw	r3,16(r23)
  805868:	90800317 	ldw	r2,12(r18)
  80586c:	b8800515 	stw	r2,20(r23)
  805870:	31404026 	beq	r6,r5,805974 <_realloc_r+0x5d8>
  805874:	20800017 	ldw	r2,0(r4)
  805878:	38800015 	stw	r2,0(r7)
  80587c:	20c00117 	ldw	r3,4(r4)
  805880:	38c00115 	stw	r3,4(r7)
  805884:	20800217 	ldw	r2,8(r4)
  805888:	38800215 	stw	r2,8(r7)
  80588c:	d8c00117 	ldw	r3,4(sp)
  805890:	bf0b883a 	add	r5,r23,fp
  805894:	b009883a 	mov	r4,r22
  805898:	1f05c83a 	sub	r2,r3,fp
  80589c:	10800054 	ori	r2,r2,1
  8058a0:	28800115 	stw	r2,4(r5)
  8058a4:	b8c00117 	ldw	r3,4(r23)
  8058a8:	00802074 	movhi	r2,129
  8058ac:	10af7904 	addi	r2,r2,-16924
  8058b0:	11400215 	stw	r5,8(r2)
  8058b4:	18c0004c 	andi	r3,r3,1
  8058b8:	e0c6b03a 	or	r3,fp,r3
  8058bc:	b8c00115 	stw	r3,4(r23)
  8058c0:	08076fc0 	call	8076fc <__malloc_unlock>
  8058c4:	003eeb06 	br	805474 <_realloc_r+0xd8>
  8058c8:	20800117 	ldw	r2,4(r4)
  8058cc:	00ffff04 	movi	r3,-4
  8058d0:	800f883a 	mov	r7,r16
  8058d4:	10c4703a 	and	r2,r2,r3
  8058d8:	98a9883a 	add	r20,r19,r2
  8058dc:	84000204 	addi	r16,r16,8
  8058e0:	003ecf06 	br	805420 <_realloc_r+0x84>
  8058e4:	900b883a 	mov	r5,r18
  8058e8:	8009883a 	mov	r4,r16
  8058ec:	08052bc0 	call	8052bc <memmove>
  8058f0:	dd000017 	ldw	r20,0(sp)
  8058f4:	b80f883a 	mov	r7,r23
  8058f8:	003ec906 	br	805420 <_realloc_r+0x84>
  8058fc:	900b883a 	mov	r5,r18
  805900:	8009883a 	mov	r4,r16
  805904:	08052bc0 	call	8052bc <memmove>
  805908:	b80f883a 	mov	r7,r23
  80590c:	003ec406 	br	805420 <_realloc_r+0x84>
  805910:	90c00417 	ldw	r3,16(r18)
  805914:	89400604 	addi	r5,r17,24
  805918:	91000604 	addi	r4,r18,24
  80591c:	88c00415 	stw	r3,16(r17)
  805920:	90800517 	ldw	r2,20(r18)
  805924:	88800515 	stw	r2,20(r17)
  805928:	003f6806 	br	8056cc <_realloc_r+0x330>
  80592c:	900b883a 	mov	r5,r18
  805930:	8809883a 	mov	r4,r17
  805934:	08052bc0 	call	8052bc <memmove>
  805938:	003fd406 	br	80588c <_realloc_r+0x4f0>
  80593c:	90c00417 	ldw	r3,16(r18)
  805940:	91000604 	addi	r4,r18,24
  805944:	ba000804 	addi	r8,r23,32
  805948:	b8c00615 	stw	r3,24(r23)
  80594c:	90800517 	ldw	r2,20(r18)
  805950:	b8800715 	stw	r2,28(r23)
  805954:	003f1206 	br	8055a0 <_realloc_r+0x204>
  805958:	90c00417 	ldw	r3,16(r18)
  80595c:	91000604 	addi	r4,r18,24
  805960:	ba000804 	addi	r8,r23,32
  805964:	b8c00615 	stw	r3,24(r23)
  805968:	90800517 	ldw	r2,20(r18)
  80596c:	b8800715 	stw	r2,28(r23)
  805970:	003f3206 	br	80563c <_realloc_r+0x2a0>
  805974:	90c00417 	ldw	r3,16(r18)
  805978:	91000604 	addi	r4,r18,24
  80597c:	b9c00804 	addi	r7,r23,32
  805980:	b8c00615 	stw	r3,24(r23)
  805984:	90800517 	ldw	r2,20(r18)
  805988:	b8800715 	stw	r2,28(r23)
  80598c:	003fb906 	br	805874 <_realloc_r+0x4d8>

00805990 <_sbrk_r>:
  805990:	defffd04 	addi	sp,sp,-12
  805994:	dc000015 	stw	r16,0(sp)
  805998:	04002074 	movhi	r16,129
  80599c:	843cf804 	addi	r16,r16,-3104
  8059a0:	dc400115 	stw	r17,4(sp)
  8059a4:	80000015 	stw	zero,0(r16)
  8059a8:	2023883a 	mov	r17,r4
  8059ac:	2809883a 	mov	r4,r5
  8059b0:	dfc00215 	stw	ra,8(sp)
  8059b4:	0807bc00 	call	807bc0 <sbrk>
  8059b8:	1007883a 	mov	r3,r2
  8059bc:	00bfffc4 	movi	r2,-1
  8059c0:	18800626 	beq	r3,r2,8059dc <_sbrk_r+0x4c>
  8059c4:	1805883a 	mov	r2,r3
  8059c8:	dfc00217 	ldw	ra,8(sp)
  8059cc:	dc400117 	ldw	r17,4(sp)
  8059d0:	dc000017 	ldw	r16,0(sp)
  8059d4:	dec00304 	addi	sp,sp,12
  8059d8:	f800283a 	ret
  8059dc:	80800017 	ldw	r2,0(r16)
  8059e0:	103ff826 	beq	r2,zero,8059c4 <_sbrk_r+0x34>
  8059e4:	88800015 	stw	r2,0(r17)
  8059e8:	1805883a 	mov	r2,r3
  8059ec:	dfc00217 	ldw	ra,8(sp)
  8059f0:	dc400117 	ldw	r17,4(sp)
  8059f4:	dc000017 	ldw	r16,0(sp)
  8059f8:	dec00304 	addi	sp,sp,12
  8059fc:	f800283a 	ret

00805a00 <__swsetup_r>:
  805a00:	00802074 	movhi	r2,129
  805a04:	10b57804 	addi	r2,r2,-10784
  805a08:	10c00017 	ldw	r3,0(r2)
  805a0c:	defffd04 	addi	sp,sp,-12
  805a10:	dc400115 	stw	r17,4(sp)
  805a14:	dc000015 	stw	r16,0(sp)
  805a18:	dfc00215 	stw	ra,8(sp)
  805a1c:	2023883a 	mov	r17,r4
  805a20:	2821883a 	mov	r16,r5
  805a24:	18000226 	beq	r3,zero,805a30 <__swsetup_r+0x30>
  805a28:	18800e17 	ldw	r2,56(r3)
  805a2c:	10001f26 	beq	r2,zero,805aac <__swsetup_r+0xac>
  805a30:	8100030b 	ldhu	r4,12(r16)
  805a34:	2080020c 	andi	r2,r4,8
  805a38:	10002826 	beq	r2,zero,805adc <__swsetup_r+0xdc>
  805a3c:	81400417 	ldw	r5,16(r16)
  805a40:	28001d26 	beq	r5,zero,805ab8 <__swsetup_r+0xb8>
  805a44:	2080004c 	andi	r2,r4,1
  805a48:	1005003a 	cmpeq	r2,r2,zero
  805a4c:	10000b26 	beq	r2,zero,805a7c <__swsetup_r+0x7c>
  805a50:	2080008c 	andi	r2,r4,2
  805a54:	10001226 	beq	r2,zero,805aa0 <__swsetup_r+0xa0>
  805a58:	0005883a 	mov	r2,zero
  805a5c:	80800215 	stw	r2,8(r16)
  805a60:	28000b26 	beq	r5,zero,805a90 <__swsetup_r+0x90>
  805a64:	0005883a 	mov	r2,zero
  805a68:	dfc00217 	ldw	ra,8(sp)
  805a6c:	dc400117 	ldw	r17,4(sp)
  805a70:	dc000017 	ldw	r16,0(sp)
  805a74:	dec00304 	addi	sp,sp,12
  805a78:	f800283a 	ret
  805a7c:	80800517 	ldw	r2,20(r16)
  805a80:	80000215 	stw	zero,8(r16)
  805a84:	0085c83a 	sub	r2,zero,r2
  805a88:	80800615 	stw	r2,24(r16)
  805a8c:	283ff51e 	bne	r5,zero,805a64 <__swsetup_r+0x64>
  805a90:	2080200c 	andi	r2,r4,128
  805a94:	103ff326 	beq	r2,zero,805a64 <__swsetup_r+0x64>
  805a98:	00bfffc4 	movi	r2,-1
  805a9c:	003ff206 	br	805a68 <__swsetup_r+0x68>
  805aa0:	80800517 	ldw	r2,20(r16)
  805aa4:	80800215 	stw	r2,8(r16)
  805aa8:	003fed06 	br	805a60 <__swsetup_r+0x60>
  805aac:	1809883a 	mov	r4,r3
  805ab0:	0805dd40 	call	805dd4 <__sinit>
  805ab4:	003fde06 	br	805a30 <__swsetup_r+0x30>
  805ab8:	20c0a00c 	andi	r3,r4,640
  805abc:	00808004 	movi	r2,512
  805ac0:	18bfe026 	beq	r3,r2,805a44 <__swsetup_r+0x44>
  805ac4:	8809883a 	mov	r4,r17
  805ac8:	800b883a 	mov	r5,r16
  805acc:	08065ec0 	call	8065ec <__smakebuf_r>
  805ad0:	8100030b 	ldhu	r4,12(r16)
  805ad4:	81400417 	ldw	r5,16(r16)
  805ad8:	003fda06 	br	805a44 <__swsetup_r+0x44>
  805adc:	2080040c 	andi	r2,r4,16
  805ae0:	103fed26 	beq	r2,zero,805a98 <__swsetup_r+0x98>
  805ae4:	2080010c 	andi	r2,r4,4
  805ae8:	10001226 	beq	r2,zero,805b34 <__swsetup_r+0x134>
  805aec:	81400c17 	ldw	r5,48(r16)
  805af0:	28000526 	beq	r5,zero,805b08 <__swsetup_r+0x108>
  805af4:	80801004 	addi	r2,r16,64
  805af8:	28800226 	beq	r5,r2,805b04 <__swsetup_r+0x104>
  805afc:	8809883a 	mov	r4,r17
  805b00:	08061580 	call	806158 <_free_r>
  805b04:	80000c15 	stw	zero,48(r16)
  805b08:	8080030b 	ldhu	r2,12(r16)
  805b0c:	81400417 	ldw	r5,16(r16)
  805b10:	80000115 	stw	zero,4(r16)
  805b14:	10bff6cc 	andi	r2,r2,65499
  805b18:	8080030d 	sth	r2,12(r16)
  805b1c:	81400015 	stw	r5,0(r16)
  805b20:	8080030b 	ldhu	r2,12(r16)
  805b24:	10800214 	ori	r2,r2,8
  805b28:	113fffcc 	andi	r4,r2,65535
  805b2c:	8080030d 	sth	r2,12(r16)
  805b30:	003fc306 	br	805a40 <__swsetup_r+0x40>
  805b34:	81400417 	ldw	r5,16(r16)
  805b38:	003ff906 	br	805b20 <__swsetup_r+0x120>

00805b3c <_fflush_r>:
  805b3c:	defffb04 	addi	sp,sp,-20
  805b40:	dcc00315 	stw	r19,12(sp)
  805b44:	dc800215 	stw	r18,8(sp)
  805b48:	dfc00415 	stw	ra,16(sp)
  805b4c:	dc400115 	stw	r17,4(sp)
  805b50:	dc000015 	stw	r16,0(sp)
  805b54:	2027883a 	mov	r19,r4
  805b58:	2825883a 	mov	r18,r5
  805b5c:	20000226 	beq	r4,zero,805b68 <_fflush_r+0x2c>
  805b60:	20800e17 	ldw	r2,56(r4)
  805b64:	10005626 	beq	r2,zero,805cc0 <_fflush_r+0x184>
  805b68:	9100030b 	ldhu	r4,12(r18)
  805b6c:	20ffffcc 	andi	r3,r4,65535
  805b70:	18e0001c 	xori	r3,r3,32768
  805b74:	18e00004 	addi	r3,r3,-32768
  805b78:	1880020c 	andi	r2,r3,8
  805b7c:	1000261e 	bne	r2,zero,805c18 <_fflush_r+0xdc>
  805b80:	90c00117 	ldw	r3,4(r18)
  805b84:	20820014 	ori	r2,r4,2048
  805b88:	9080030d 	sth	r2,12(r18)
  805b8c:	1009883a 	mov	r4,r2
  805b90:	00c0400e 	bge	zero,r3,805c94 <_fflush_r+0x158>
  805b94:	92000a17 	ldw	r8,40(r18)
  805b98:	40004026 	beq	r8,zero,805c9c <_fflush_r+0x160>
  805b9c:	2084000c 	andi	r2,r4,4096
  805ba0:	10005326 	beq	r2,zero,805cf0 <_fflush_r+0x1b4>
  805ba4:	94001417 	ldw	r16,80(r18)
  805ba8:	9080030b 	ldhu	r2,12(r18)
  805bac:	1080010c 	andi	r2,r2,4
  805bb0:	1000481e 	bne	r2,zero,805cd4 <_fflush_r+0x198>
  805bb4:	91400717 	ldw	r5,28(r18)
  805bb8:	9809883a 	mov	r4,r19
  805bbc:	800d883a 	mov	r6,r16
  805bc0:	000f883a 	mov	r7,zero
  805bc4:	403ee83a 	callr	r8
  805bc8:	8080261e 	bne	r16,r2,805c64 <_fflush_r+0x128>
  805bcc:	9080030b 	ldhu	r2,12(r18)
  805bd0:	91000417 	ldw	r4,16(r18)
  805bd4:	90000115 	stw	zero,4(r18)
  805bd8:	10bdffcc 	andi	r2,r2,63487
  805bdc:	10ffffcc 	andi	r3,r2,65535
  805be0:	18c4000c 	andi	r3,r3,4096
  805be4:	9080030d 	sth	r2,12(r18)
  805be8:	91000015 	stw	r4,0(r18)
  805bec:	18002b26 	beq	r3,zero,805c9c <_fflush_r+0x160>
  805bf0:	0007883a 	mov	r3,zero
  805bf4:	1805883a 	mov	r2,r3
  805bf8:	94001415 	stw	r16,80(r18)
  805bfc:	dfc00417 	ldw	ra,16(sp)
  805c00:	dcc00317 	ldw	r19,12(sp)
  805c04:	dc800217 	ldw	r18,8(sp)
  805c08:	dc400117 	ldw	r17,4(sp)
  805c0c:	dc000017 	ldw	r16,0(sp)
  805c10:	dec00504 	addi	sp,sp,20
  805c14:	f800283a 	ret
  805c18:	94400417 	ldw	r17,16(r18)
  805c1c:	88001f26 	beq	r17,zero,805c9c <_fflush_r+0x160>
  805c20:	90800017 	ldw	r2,0(r18)
  805c24:	18c000cc 	andi	r3,r3,3
  805c28:	94400015 	stw	r17,0(r18)
  805c2c:	1461c83a 	sub	r16,r2,r17
  805c30:	18002526 	beq	r3,zero,805cc8 <_fflush_r+0x18c>
  805c34:	0005883a 	mov	r2,zero
  805c38:	90800215 	stw	r2,8(r18)
  805c3c:	0400170e 	bge	zero,r16,805c9c <_fflush_r+0x160>
  805c40:	90c00917 	ldw	r3,36(r18)
  805c44:	91400717 	ldw	r5,28(r18)
  805c48:	880d883a 	mov	r6,r17
  805c4c:	800f883a 	mov	r7,r16
  805c50:	9809883a 	mov	r4,r19
  805c54:	183ee83a 	callr	r3
  805c58:	88a3883a 	add	r17,r17,r2
  805c5c:	80a1c83a 	sub	r16,r16,r2
  805c60:	00bff616 	blt	zero,r2,805c3c <_fflush_r+0x100>
  805c64:	9080030b 	ldhu	r2,12(r18)
  805c68:	00ffffc4 	movi	r3,-1
  805c6c:	10801014 	ori	r2,r2,64
  805c70:	9080030d 	sth	r2,12(r18)
  805c74:	1805883a 	mov	r2,r3
  805c78:	dfc00417 	ldw	ra,16(sp)
  805c7c:	dcc00317 	ldw	r19,12(sp)
  805c80:	dc800217 	ldw	r18,8(sp)
  805c84:	dc400117 	ldw	r17,4(sp)
  805c88:	dc000017 	ldw	r16,0(sp)
  805c8c:	dec00504 	addi	sp,sp,20
  805c90:	f800283a 	ret
  805c94:	90800f17 	ldw	r2,60(r18)
  805c98:	00bfbe16 	blt	zero,r2,805b94 <_fflush_r+0x58>
  805c9c:	0007883a 	mov	r3,zero
  805ca0:	1805883a 	mov	r2,r3
  805ca4:	dfc00417 	ldw	ra,16(sp)
  805ca8:	dcc00317 	ldw	r19,12(sp)
  805cac:	dc800217 	ldw	r18,8(sp)
  805cb0:	dc400117 	ldw	r17,4(sp)
  805cb4:	dc000017 	ldw	r16,0(sp)
  805cb8:	dec00504 	addi	sp,sp,20
  805cbc:	f800283a 	ret
  805cc0:	0805dd40 	call	805dd4 <__sinit>
  805cc4:	003fa806 	br	805b68 <_fflush_r+0x2c>
  805cc8:	90800517 	ldw	r2,20(r18)
  805ccc:	90800215 	stw	r2,8(r18)
  805cd0:	003fda06 	br	805c3c <_fflush_r+0x100>
  805cd4:	90800117 	ldw	r2,4(r18)
  805cd8:	90c00c17 	ldw	r3,48(r18)
  805cdc:	80a1c83a 	sub	r16,r16,r2
  805ce0:	183fb426 	beq	r3,zero,805bb4 <_fflush_r+0x78>
  805ce4:	90800f17 	ldw	r2,60(r18)
  805ce8:	80a1c83a 	sub	r16,r16,r2
  805cec:	003fb106 	br	805bb4 <_fflush_r+0x78>
  805cf0:	91400717 	ldw	r5,28(r18)
  805cf4:	9809883a 	mov	r4,r19
  805cf8:	000d883a 	mov	r6,zero
  805cfc:	01c00044 	movi	r7,1
  805d00:	403ee83a 	callr	r8
  805d04:	1021883a 	mov	r16,r2
  805d08:	00bfffc4 	movi	r2,-1
  805d0c:	80800226 	beq	r16,r2,805d18 <_fflush_r+0x1dc>
  805d10:	92000a17 	ldw	r8,40(r18)
  805d14:	003fa406 	br	805ba8 <_fflush_r+0x6c>
  805d18:	98c00017 	ldw	r3,0(r19)
  805d1c:	00800744 	movi	r2,29
  805d20:	18bfde26 	beq	r3,r2,805c9c <_fflush_r+0x160>
  805d24:	9080030b 	ldhu	r2,12(r18)
  805d28:	8007883a 	mov	r3,r16
  805d2c:	10801014 	ori	r2,r2,64
  805d30:	9080030d 	sth	r2,12(r18)
  805d34:	003fcf06 	br	805c74 <_fflush_r+0x138>

00805d38 <fflush>:
  805d38:	01402034 	movhi	r5,128
  805d3c:	2956cf04 	addi	r5,r5,23356
  805d40:	2007883a 	mov	r3,r4
  805d44:	20000526 	beq	r4,zero,805d5c <fflush+0x24>
  805d48:	00802074 	movhi	r2,129
  805d4c:	10b57804 	addi	r2,r2,-10784
  805d50:	11000017 	ldw	r4,0(r2)
  805d54:	180b883a 	mov	r5,r3
  805d58:	0805b3c1 	jmpi	805b3c <_fflush_r>
  805d5c:	00802074 	movhi	r2,129
  805d60:	10b57904 	addi	r2,r2,-10780
  805d64:	11000017 	ldw	r4,0(r2)
  805d68:	080646c1 	jmpi	80646c <_fwalk_reent>

00805d6c <std>:
  805d6c:	00802034 	movhi	r2,128
  805d70:	109a0604 	addi	r2,r2,26648
  805d74:	20800b15 	stw	r2,44(r4)
  805d78:	00802034 	movhi	r2,128
  805d7c:	109a4104 	addi	r2,r2,26884
  805d80:	20800815 	stw	r2,32(r4)
  805d84:	00c02034 	movhi	r3,128
  805d88:	18da2204 	addi	r3,r3,26760
  805d8c:	00802034 	movhi	r2,128
  805d90:	109a0804 	addi	r2,r2,26656
  805d94:	2140030d 	sth	r5,12(r4)
  805d98:	2180038d 	sth	r6,14(r4)
  805d9c:	20c00915 	stw	r3,36(r4)
  805da0:	20800a15 	stw	r2,40(r4)
  805da4:	20000015 	stw	zero,0(r4)
  805da8:	20000115 	stw	zero,4(r4)
  805dac:	20000215 	stw	zero,8(r4)
  805db0:	20000415 	stw	zero,16(r4)
  805db4:	20000515 	stw	zero,20(r4)
  805db8:	20000615 	stw	zero,24(r4)
  805dbc:	21000715 	stw	r4,28(r4)
  805dc0:	f800283a 	ret

00805dc4 <__sfp_lock_acquire>:
  805dc4:	f800283a 	ret

00805dc8 <__sfp_lock_release>:
  805dc8:	f800283a 	ret

00805dcc <__sinit_lock_acquire>:
  805dcc:	f800283a 	ret

00805dd0 <__sinit_lock_release>:
  805dd0:	f800283a 	ret

00805dd4 <__sinit>:
  805dd4:	20800e17 	ldw	r2,56(r4)
  805dd8:	defffd04 	addi	sp,sp,-12
  805ddc:	dc400115 	stw	r17,4(sp)
  805de0:	dc000015 	stw	r16,0(sp)
  805de4:	dfc00215 	stw	ra,8(sp)
  805de8:	04400044 	movi	r17,1
  805dec:	01400104 	movi	r5,4
  805df0:	000d883a 	mov	r6,zero
  805df4:	2021883a 	mov	r16,r4
  805df8:	2200bb04 	addi	r8,r4,748
  805dfc:	200f883a 	mov	r7,r4
  805e00:	10000526 	beq	r2,zero,805e18 <__sinit+0x44>
  805e04:	dfc00217 	ldw	ra,8(sp)
  805e08:	dc400117 	ldw	r17,4(sp)
  805e0c:	dc000017 	ldw	r16,0(sp)
  805e10:	dec00304 	addi	sp,sp,12
  805e14:	f800283a 	ret
  805e18:	21000117 	ldw	r4,4(r4)
  805e1c:	00802034 	movhi	r2,128
  805e20:	1097ae04 	addi	r2,r2,24248
  805e24:	00c000c4 	movi	r3,3
  805e28:	80800f15 	stw	r2,60(r16)
  805e2c:	80c0b915 	stw	r3,740(r16)
  805e30:	8200ba15 	stw	r8,744(r16)
  805e34:	84400e15 	stw	r17,56(r16)
  805e38:	8000b815 	stw	zero,736(r16)
  805e3c:	0805d6c0 	call	805d6c <std>
  805e40:	81000217 	ldw	r4,8(r16)
  805e44:	880d883a 	mov	r6,r17
  805e48:	800f883a 	mov	r7,r16
  805e4c:	01400284 	movi	r5,10
  805e50:	0805d6c0 	call	805d6c <std>
  805e54:	81000317 	ldw	r4,12(r16)
  805e58:	800f883a 	mov	r7,r16
  805e5c:	01400484 	movi	r5,18
  805e60:	01800084 	movi	r6,2
  805e64:	dfc00217 	ldw	ra,8(sp)
  805e68:	dc400117 	ldw	r17,4(sp)
  805e6c:	dc000017 	ldw	r16,0(sp)
  805e70:	dec00304 	addi	sp,sp,12
  805e74:	0805d6c1 	jmpi	805d6c <std>

00805e78 <__fp_lock>:
  805e78:	0005883a 	mov	r2,zero
  805e7c:	f800283a 	ret

00805e80 <__fp_unlock>:
  805e80:	0005883a 	mov	r2,zero
  805e84:	f800283a 	ret

00805e88 <__fp_unlock_all>:
  805e88:	00802074 	movhi	r2,129
  805e8c:	10b57804 	addi	r2,r2,-10784
  805e90:	11000017 	ldw	r4,0(r2)
  805e94:	01402034 	movhi	r5,128
  805e98:	2957a004 	addi	r5,r5,24192
  805e9c:	08065341 	jmpi	806534 <_fwalk>

00805ea0 <__fp_lock_all>:
  805ea0:	00802074 	movhi	r2,129
  805ea4:	10b57804 	addi	r2,r2,-10784
  805ea8:	11000017 	ldw	r4,0(r2)
  805eac:	01402034 	movhi	r5,128
  805eb0:	29579e04 	addi	r5,r5,24184
  805eb4:	08065341 	jmpi	806534 <_fwalk>

00805eb8 <_cleanup_r>:
  805eb8:	01402034 	movhi	r5,128
  805ebc:	295ad704 	addi	r5,r5,27484
  805ec0:	08065341 	jmpi	806534 <_fwalk>

00805ec4 <_cleanup>:
  805ec4:	00802074 	movhi	r2,129
  805ec8:	10b57904 	addi	r2,r2,-10780
  805ecc:	11000017 	ldw	r4,0(r2)
  805ed0:	0805eb81 	jmpi	805eb8 <_cleanup_r>

00805ed4 <__sfmoreglue>:
  805ed4:	defffc04 	addi	sp,sp,-16
  805ed8:	dc400115 	stw	r17,4(sp)
  805edc:	2c401724 	muli	r17,r5,92
  805ee0:	dc800215 	stw	r18,8(sp)
  805ee4:	2825883a 	mov	r18,r5
  805ee8:	89400304 	addi	r5,r17,12
  805eec:	dc000015 	stw	r16,0(sp)
  805ef0:	dfc00315 	stw	ra,12(sp)
  805ef4:	08049f80 	call	8049f8 <_malloc_r>
  805ef8:	0021883a 	mov	r16,zero
  805efc:	880d883a 	mov	r6,r17
  805f00:	000b883a 	mov	r5,zero
  805f04:	10000626 	beq	r2,zero,805f20 <__sfmoreglue+0x4c>
  805f08:	11000304 	addi	r4,r2,12
  805f0c:	14800115 	stw	r18,4(r2)
  805f10:	10000015 	stw	zero,0(r2)
  805f14:	11000215 	stw	r4,8(r2)
  805f18:	1021883a 	mov	r16,r2
  805f1c:	08067800 	call	806780 <memset>
  805f20:	8005883a 	mov	r2,r16
  805f24:	dfc00317 	ldw	ra,12(sp)
  805f28:	dc800217 	ldw	r18,8(sp)
  805f2c:	dc400117 	ldw	r17,4(sp)
  805f30:	dc000017 	ldw	r16,0(sp)
  805f34:	dec00404 	addi	sp,sp,16
  805f38:	f800283a 	ret

00805f3c <__sfp>:
  805f3c:	defffd04 	addi	sp,sp,-12
  805f40:	00802074 	movhi	r2,129
  805f44:	10b57904 	addi	r2,r2,-10780
  805f48:	dc000015 	stw	r16,0(sp)
  805f4c:	14000017 	ldw	r16,0(r2)
  805f50:	dc400115 	stw	r17,4(sp)
  805f54:	dfc00215 	stw	ra,8(sp)
  805f58:	80800e17 	ldw	r2,56(r16)
  805f5c:	2023883a 	mov	r17,r4
  805f60:	10002626 	beq	r2,zero,805ffc <__sfp+0xc0>
  805f64:	8400b804 	addi	r16,r16,736
  805f68:	80800117 	ldw	r2,4(r16)
  805f6c:	81000217 	ldw	r4,8(r16)
  805f70:	10ffffc4 	addi	r3,r2,-1
  805f74:	18000916 	blt	r3,zero,805f9c <__sfp+0x60>
  805f78:	2080030f 	ldh	r2,12(r4)
  805f7c:	10000b26 	beq	r2,zero,805fac <__sfp+0x70>
  805f80:	017fffc4 	movi	r5,-1
  805f84:	00000206 	br	805f90 <__sfp+0x54>
  805f88:	2080030f 	ldh	r2,12(r4)
  805f8c:	10000726 	beq	r2,zero,805fac <__sfp+0x70>
  805f90:	18ffffc4 	addi	r3,r3,-1
  805f94:	21001704 	addi	r4,r4,92
  805f98:	197ffb1e 	bne	r3,r5,805f88 <__sfp+0x4c>
  805f9c:	80800017 	ldw	r2,0(r16)
  805fa0:	10001926 	beq	r2,zero,806008 <__sfp+0xcc>
  805fa4:	1021883a 	mov	r16,r2
  805fa8:	003fef06 	br	805f68 <__sfp+0x2c>
  805fac:	00bfffc4 	movi	r2,-1
  805fb0:	00c00044 	movi	r3,1
  805fb4:	2080038d 	sth	r2,14(r4)
  805fb8:	20c0030d 	sth	r3,12(r4)
  805fbc:	20000015 	stw	zero,0(r4)
  805fc0:	20000215 	stw	zero,8(r4)
  805fc4:	20000115 	stw	zero,4(r4)
  805fc8:	20000415 	stw	zero,16(r4)
  805fcc:	20000515 	stw	zero,20(r4)
  805fd0:	20000615 	stw	zero,24(r4)
  805fd4:	20000c15 	stw	zero,48(r4)
  805fd8:	20000d15 	stw	zero,52(r4)
  805fdc:	20001115 	stw	zero,68(r4)
  805fe0:	20001215 	stw	zero,72(r4)
  805fe4:	2005883a 	mov	r2,r4
  805fe8:	dfc00217 	ldw	ra,8(sp)
  805fec:	dc400117 	ldw	r17,4(sp)
  805ff0:	dc000017 	ldw	r16,0(sp)
  805ff4:	dec00304 	addi	sp,sp,12
  805ff8:	f800283a 	ret
  805ffc:	8009883a 	mov	r4,r16
  806000:	0805dd40 	call	805dd4 <__sinit>
  806004:	003fd706 	br	805f64 <__sfp+0x28>
  806008:	8809883a 	mov	r4,r17
  80600c:	01400104 	movi	r5,4
  806010:	0805ed40 	call	805ed4 <__sfmoreglue>
  806014:	80800015 	stw	r2,0(r16)
  806018:	103fe21e 	bne	r2,zero,805fa4 <__sfp+0x68>
  80601c:	00800304 	movi	r2,12
  806020:	0009883a 	mov	r4,zero
  806024:	88800015 	stw	r2,0(r17)
  806028:	003fee06 	br	805fe4 <__sfp+0xa8>

0080602c <_malloc_trim_r>:
  80602c:	defffb04 	addi	sp,sp,-20
  806030:	dcc00315 	stw	r19,12(sp)
  806034:	04c02074 	movhi	r19,129
  806038:	9cef7904 	addi	r19,r19,-16924
  80603c:	dc800215 	stw	r18,8(sp)
  806040:	dc400115 	stw	r17,4(sp)
  806044:	dc000015 	stw	r16,0(sp)
  806048:	2823883a 	mov	r17,r5
  80604c:	2025883a 	mov	r18,r4
  806050:	dfc00415 	stw	ra,16(sp)
  806054:	08076dc0 	call	8076dc <__malloc_lock>
  806058:	98800217 	ldw	r2,8(r19)
  80605c:	9009883a 	mov	r4,r18
  806060:	000b883a 	mov	r5,zero
  806064:	10c00117 	ldw	r3,4(r2)
  806068:	00bfff04 	movi	r2,-4
  80606c:	18a0703a 	and	r16,r3,r2
  806070:	8463c83a 	sub	r17,r16,r17
  806074:	8c43fbc4 	addi	r17,r17,4079
  806078:	8822d33a 	srli	r17,r17,12
  80607c:	0083ffc4 	movi	r2,4095
  806080:	8c7fffc4 	addi	r17,r17,-1
  806084:	8822933a 	slli	r17,r17,12
  806088:	1440060e 	bge	r2,r17,8060a4 <_malloc_trim_r+0x78>
  80608c:	08059900 	call	805990 <_sbrk_r>
  806090:	98c00217 	ldw	r3,8(r19)
  806094:	9009883a 	mov	r4,r18
  806098:	044bc83a 	sub	r5,zero,r17
  80609c:	80c7883a 	add	r3,r16,r3
  8060a0:	10c00926 	beq	r2,r3,8060c8 <_malloc_trim_r+0x9c>
  8060a4:	08076fc0 	call	8076fc <__malloc_unlock>
  8060a8:	0005883a 	mov	r2,zero
  8060ac:	dfc00417 	ldw	ra,16(sp)
  8060b0:	dcc00317 	ldw	r19,12(sp)
  8060b4:	dc800217 	ldw	r18,8(sp)
  8060b8:	dc400117 	ldw	r17,4(sp)
  8060bc:	dc000017 	ldw	r16,0(sp)
  8060c0:	dec00504 	addi	sp,sp,20
  8060c4:	f800283a 	ret
  8060c8:	9009883a 	mov	r4,r18
  8060cc:	08059900 	call	805990 <_sbrk_r>
  8060d0:	844dc83a 	sub	r6,r16,r17
  8060d4:	00ffffc4 	movi	r3,-1
  8060d8:	9009883a 	mov	r4,r18
  8060dc:	000b883a 	mov	r5,zero
  8060e0:	01c02074 	movhi	r7,129
  8060e4:	39fd2f04 	addi	r7,r7,-2884
  8060e8:	31800054 	ori	r6,r6,1
  8060ec:	10c00926 	beq	r2,r3,806114 <_malloc_trim_r+0xe8>
  8060f0:	38800017 	ldw	r2,0(r7)
  8060f4:	98c00217 	ldw	r3,8(r19)
  8060f8:	9009883a 	mov	r4,r18
  8060fc:	1445c83a 	sub	r2,r2,r17
  806100:	38800015 	stw	r2,0(r7)
  806104:	19800115 	stw	r6,4(r3)
  806108:	08076fc0 	call	8076fc <__malloc_unlock>
  80610c:	00800044 	movi	r2,1
  806110:	003fe606 	br	8060ac <_malloc_trim_r+0x80>
  806114:	08059900 	call	805990 <_sbrk_r>
  806118:	99800217 	ldw	r6,8(r19)
  80611c:	100f883a 	mov	r7,r2
  806120:	9009883a 	mov	r4,r18
  806124:	1187c83a 	sub	r3,r2,r6
  806128:	008003c4 	movi	r2,15
  80612c:	19400054 	ori	r5,r3,1
  806130:	10ffdc0e 	bge	r2,r3,8060a4 <_malloc_trim_r+0x78>
  806134:	00802074 	movhi	r2,129
  806138:	10b57b04 	addi	r2,r2,-10772
  80613c:	10c00017 	ldw	r3,0(r2)
  806140:	00802074 	movhi	r2,129
  806144:	10bd2f04 	addi	r2,r2,-2884
  806148:	31400115 	stw	r5,4(r6)
  80614c:	38c7c83a 	sub	r3,r7,r3
  806150:	10c00015 	stw	r3,0(r2)
  806154:	003fd306 	br	8060a4 <_malloc_trim_r+0x78>

00806158 <_free_r>:
  806158:	defffd04 	addi	sp,sp,-12
  80615c:	dc400115 	stw	r17,4(sp)
  806160:	dc000015 	stw	r16,0(sp)
  806164:	dfc00215 	stw	ra,8(sp)
  806168:	2821883a 	mov	r16,r5
  80616c:	2023883a 	mov	r17,r4
  806170:	28005a26 	beq	r5,zero,8062dc <_free_r+0x184>
  806174:	08076dc0 	call	8076dc <__malloc_lock>
  806178:	823ffe04 	addi	r8,r16,-8
  80617c:	41400117 	ldw	r5,4(r8)
  806180:	00bfff84 	movi	r2,-2
  806184:	02802074 	movhi	r10,129
  806188:	52af7904 	addi	r10,r10,-16924
  80618c:	288e703a 	and	r7,r5,r2
  806190:	41cd883a 	add	r6,r8,r7
  806194:	30c00117 	ldw	r3,4(r6)
  806198:	51000217 	ldw	r4,8(r10)
  80619c:	00bfff04 	movi	r2,-4
  8061a0:	1892703a 	and	r9,r3,r2
  8061a4:	5017883a 	mov	r11,r10
  8061a8:	31006726 	beq	r6,r4,806348 <_free_r+0x1f0>
  8061ac:	2880004c 	andi	r2,r5,1
  8061b0:	1005003a 	cmpeq	r2,r2,zero
  8061b4:	32400115 	stw	r9,4(r6)
  8061b8:	10001a1e 	bne	r2,zero,806224 <_free_r+0xcc>
  8061bc:	000b883a 	mov	r5,zero
  8061c0:	3247883a 	add	r3,r6,r9
  8061c4:	18800117 	ldw	r2,4(r3)
  8061c8:	1080004c 	andi	r2,r2,1
  8061cc:	1000231e 	bne	r2,zero,80625c <_free_r+0x104>
  8061d0:	280ac03a 	cmpne	r5,r5,zero
  8061d4:	3a4f883a 	add	r7,r7,r9
  8061d8:	2800451e 	bne	r5,zero,8062f0 <_free_r+0x198>
  8061dc:	31000217 	ldw	r4,8(r6)
  8061e0:	00802074 	movhi	r2,129
  8061e4:	10af7b04 	addi	r2,r2,-16916
  8061e8:	20807b26 	beq	r4,r2,8063d8 <_free_r+0x280>
  8061ec:	30800317 	ldw	r2,12(r6)
  8061f0:	3a07883a 	add	r3,r7,r8
  8061f4:	19c00015 	stw	r7,0(r3)
  8061f8:	11000215 	stw	r4,8(r2)
  8061fc:	20800315 	stw	r2,12(r4)
  806200:	38800054 	ori	r2,r7,1
  806204:	40800115 	stw	r2,4(r8)
  806208:	28001a26 	beq	r5,zero,806274 <_free_r+0x11c>
  80620c:	8809883a 	mov	r4,r17
  806210:	dfc00217 	ldw	ra,8(sp)
  806214:	dc400117 	ldw	r17,4(sp)
  806218:	dc000017 	ldw	r16,0(sp)
  80621c:	dec00304 	addi	sp,sp,12
  806220:	08076fc1 	jmpi	8076fc <__malloc_unlock>
  806224:	80bffe17 	ldw	r2,-8(r16)
  806228:	50c00204 	addi	r3,r10,8
  80622c:	4091c83a 	sub	r8,r8,r2
  806230:	41000217 	ldw	r4,8(r8)
  806234:	388f883a 	add	r7,r7,r2
  806238:	20c06126 	beq	r4,r3,8063c0 <_free_r+0x268>
  80623c:	40800317 	ldw	r2,12(r8)
  806240:	3247883a 	add	r3,r6,r9
  806244:	000b883a 	mov	r5,zero
  806248:	11000215 	stw	r4,8(r2)
  80624c:	20800315 	stw	r2,12(r4)
  806250:	18800117 	ldw	r2,4(r3)
  806254:	1080004c 	andi	r2,r2,1
  806258:	103fdd26 	beq	r2,zero,8061d0 <_free_r+0x78>
  80625c:	38800054 	ori	r2,r7,1
  806260:	3a07883a 	add	r3,r7,r8
  806264:	280ac03a 	cmpne	r5,r5,zero
  806268:	40800115 	stw	r2,4(r8)
  80626c:	19c00015 	stw	r7,0(r3)
  806270:	283fe61e 	bne	r5,zero,80620c <_free_r+0xb4>
  806274:	00807fc4 	movi	r2,511
  806278:	11c01f2e 	bgeu	r2,r7,8062f8 <_free_r+0x1a0>
  80627c:	3806d27a 	srli	r3,r7,9
  806280:	1800481e 	bne	r3,zero,8063a4 <_free_r+0x24c>
  806284:	3804d0fa 	srli	r2,r7,3
  806288:	100690fa 	slli	r3,r2,3
  80628c:	1acd883a 	add	r6,r3,r11
  806290:	31400217 	ldw	r5,8(r6)
  806294:	31405926 	beq	r6,r5,8063fc <_free_r+0x2a4>
  806298:	28800117 	ldw	r2,4(r5)
  80629c:	00ffff04 	movi	r3,-4
  8062a0:	10c4703a 	and	r2,r2,r3
  8062a4:	3880022e 	bgeu	r7,r2,8062b0 <_free_r+0x158>
  8062a8:	29400217 	ldw	r5,8(r5)
  8062ac:	317ffa1e 	bne	r6,r5,806298 <_free_r+0x140>
  8062b0:	29800317 	ldw	r6,12(r5)
  8062b4:	41800315 	stw	r6,12(r8)
  8062b8:	41400215 	stw	r5,8(r8)
  8062bc:	8809883a 	mov	r4,r17
  8062c0:	2a000315 	stw	r8,12(r5)
  8062c4:	32000215 	stw	r8,8(r6)
  8062c8:	dfc00217 	ldw	ra,8(sp)
  8062cc:	dc400117 	ldw	r17,4(sp)
  8062d0:	dc000017 	ldw	r16,0(sp)
  8062d4:	dec00304 	addi	sp,sp,12
  8062d8:	08076fc1 	jmpi	8076fc <__malloc_unlock>
  8062dc:	dfc00217 	ldw	ra,8(sp)
  8062e0:	dc400117 	ldw	r17,4(sp)
  8062e4:	dc000017 	ldw	r16,0(sp)
  8062e8:	dec00304 	addi	sp,sp,12
  8062ec:	f800283a 	ret
  8062f0:	31000217 	ldw	r4,8(r6)
  8062f4:	003fbd06 	br	8061ec <_free_r+0x94>
  8062f8:	3806d0fa 	srli	r3,r7,3
  8062fc:	00800044 	movi	r2,1
  806300:	51400117 	ldw	r5,4(r10)
  806304:	180890fa 	slli	r4,r3,3
  806308:	1807d0ba 	srai	r3,r3,2
  80630c:	22c9883a 	add	r4,r4,r11
  806310:	21800217 	ldw	r6,8(r4)
  806314:	10c4983a 	sll	r2,r2,r3
  806318:	41000315 	stw	r4,12(r8)
  80631c:	41800215 	stw	r6,8(r8)
  806320:	288ab03a 	or	r5,r5,r2
  806324:	22000215 	stw	r8,8(r4)
  806328:	8809883a 	mov	r4,r17
  80632c:	51400115 	stw	r5,4(r10)
  806330:	32000315 	stw	r8,12(r6)
  806334:	dfc00217 	ldw	ra,8(sp)
  806338:	dc400117 	ldw	r17,4(sp)
  80633c:	dc000017 	ldw	r16,0(sp)
  806340:	dec00304 	addi	sp,sp,12
  806344:	08076fc1 	jmpi	8076fc <__malloc_unlock>
  806348:	2880004c 	andi	r2,r5,1
  80634c:	3a4d883a 	add	r6,r7,r9
  806350:	1000071e 	bne	r2,zero,806370 <_free_r+0x218>
  806354:	80bffe17 	ldw	r2,-8(r16)
  806358:	4091c83a 	sub	r8,r8,r2
  80635c:	41000317 	ldw	r4,12(r8)
  806360:	40c00217 	ldw	r3,8(r8)
  806364:	308d883a 	add	r6,r6,r2
  806368:	20c00215 	stw	r3,8(r4)
  80636c:	19000315 	stw	r4,12(r3)
  806370:	00802074 	movhi	r2,129
  806374:	10b57a04 	addi	r2,r2,-10776
  806378:	11000017 	ldw	r4,0(r2)
  80637c:	30c00054 	ori	r3,r6,1
  806380:	52000215 	stw	r8,8(r10)
  806384:	40c00115 	stw	r3,4(r8)
  806388:	313fa036 	bltu	r6,r4,80620c <_free_r+0xb4>
  80638c:	00802074 	movhi	r2,129
  806390:	10bcf504 	addi	r2,r2,-3116
  806394:	11400017 	ldw	r5,0(r2)
  806398:	8809883a 	mov	r4,r17
  80639c:	080602c0 	call	80602c <_malloc_trim_r>
  8063a0:	003f9a06 	br	80620c <_free_r+0xb4>
  8063a4:	00800104 	movi	r2,4
  8063a8:	10c0072e 	bgeu	r2,r3,8063c8 <_free_r+0x270>
  8063ac:	00800504 	movi	r2,20
  8063b0:	10c01936 	bltu	r2,r3,806418 <_free_r+0x2c0>
  8063b4:	188016c4 	addi	r2,r3,91
  8063b8:	100690fa 	slli	r3,r2,3
  8063bc:	003fb306 	br	80628c <_free_r+0x134>
  8063c0:	01400044 	movi	r5,1
  8063c4:	003f7e06 	br	8061c0 <_free_r+0x68>
  8063c8:	3804d1ba 	srli	r2,r7,6
  8063cc:	10800e04 	addi	r2,r2,56
  8063d0:	100690fa 	slli	r3,r2,3
  8063d4:	003fad06 	br	80628c <_free_r+0x134>
  8063d8:	22000315 	stw	r8,12(r4)
  8063dc:	22000215 	stw	r8,8(r4)
  8063e0:	3a05883a 	add	r2,r7,r8
  8063e4:	38c00054 	ori	r3,r7,1
  8063e8:	11c00015 	stw	r7,0(r2)
  8063ec:	41000215 	stw	r4,8(r8)
  8063f0:	40c00115 	stw	r3,4(r8)
  8063f4:	41000315 	stw	r4,12(r8)
  8063f8:	003f8406 	br	80620c <_free_r+0xb4>
  8063fc:	1005d0ba 	srai	r2,r2,2
  806400:	00c00044 	movi	r3,1
  806404:	51000117 	ldw	r4,4(r10)
  806408:	1886983a 	sll	r3,r3,r2
  80640c:	20c8b03a 	or	r4,r4,r3
  806410:	51000115 	stw	r4,4(r10)
  806414:	003fa706 	br	8062b4 <_free_r+0x15c>
  806418:	00801504 	movi	r2,84
  80641c:	10c00436 	bltu	r2,r3,806430 <_free_r+0x2d8>
  806420:	3804d33a 	srli	r2,r7,12
  806424:	10801b84 	addi	r2,r2,110
  806428:	100690fa 	slli	r3,r2,3
  80642c:	003f9706 	br	80628c <_free_r+0x134>
  806430:	00805504 	movi	r2,340
  806434:	10c00436 	bltu	r2,r3,806448 <_free_r+0x2f0>
  806438:	3804d3fa 	srli	r2,r7,15
  80643c:	10801dc4 	addi	r2,r2,119
  806440:	100690fa 	slli	r3,r2,3
  806444:	003f9106 	br	80628c <_free_r+0x134>
  806448:	00815504 	movi	r2,1364
  80644c:	10c0032e 	bgeu	r2,r3,80645c <_free_r+0x304>
  806450:	00801f84 	movi	r2,126
  806454:	00c0fc04 	movi	r3,1008
  806458:	003f8c06 	br	80628c <_free_r+0x134>
  80645c:	3804d4ba 	srli	r2,r7,18
  806460:	10801f04 	addi	r2,r2,124
  806464:	100690fa 	slli	r3,r2,3
  806468:	003f8806 	br	80628c <_free_r+0x134>

0080646c <_fwalk_reent>:
  80646c:	defff704 	addi	sp,sp,-36
  806470:	dcc00315 	stw	r19,12(sp)
  806474:	24c0b804 	addi	r19,r4,736
  806478:	dd800615 	stw	r22,24(sp)
  80647c:	dd400515 	stw	r21,20(sp)
  806480:	dfc00815 	stw	ra,32(sp)
  806484:	ddc00715 	stw	r23,28(sp)
  806488:	dd000415 	stw	r20,16(sp)
  80648c:	dc800215 	stw	r18,8(sp)
  806490:	dc400115 	stw	r17,4(sp)
  806494:	dc000015 	stw	r16,0(sp)
  806498:	202b883a 	mov	r21,r4
  80649c:	282d883a 	mov	r22,r5
  8064a0:	0805dc40 	call	805dc4 <__sfp_lock_acquire>
  8064a4:	98002126 	beq	r19,zero,80652c <_fwalk_reent+0xc0>
  8064a8:	002f883a 	mov	r23,zero
  8064ac:	9c800117 	ldw	r18,4(r19)
  8064b0:	9c000217 	ldw	r16,8(r19)
  8064b4:	90bfffc4 	addi	r2,r18,-1
  8064b8:	10000d16 	blt	r2,zero,8064f0 <_fwalk_reent+0x84>
  8064bc:	0023883a 	mov	r17,zero
  8064c0:	053fffc4 	movi	r20,-1
  8064c4:	8080030f 	ldh	r2,12(r16)
  8064c8:	8c400044 	addi	r17,r17,1
  8064cc:	10000626 	beq	r2,zero,8064e8 <_fwalk_reent+0x7c>
  8064d0:	8080038f 	ldh	r2,14(r16)
  8064d4:	800b883a 	mov	r5,r16
  8064d8:	a809883a 	mov	r4,r21
  8064dc:	15000226 	beq	r2,r20,8064e8 <_fwalk_reent+0x7c>
  8064e0:	b03ee83a 	callr	r22
  8064e4:	b8aeb03a 	or	r23,r23,r2
  8064e8:	84001704 	addi	r16,r16,92
  8064ec:	947ff51e 	bne	r18,r17,8064c4 <_fwalk_reent+0x58>
  8064f0:	9cc00017 	ldw	r19,0(r19)
  8064f4:	983fed1e 	bne	r19,zero,8064ac <_fwalk_reent+0x40>
  8064f8:	0805dc80 	call	805dc8 <__sfp_lock_release>
  8064fc:	b805883a 	mov	r2,r23
  806500:	dfc00817 	ldw	ra,32(sp)
  806504:	ddc00717 	ldw	r23,28(sp)
  806508:	dd800617 	ldw	r22,24(sp)
  80650c:	dd400517 	ldw	r21,20(sp)
  806510:	dd000417 	ldw	r20,16(sp)
  806514:	dcc00317 	ldw	r19,12(sp)
  806518:	dc800217 	ldw	r18,8(sp)
  80651c:	dc400117 	ldw	r17,4(sp)
  806520:	dc000017 	ldw	r16,0(sp)
  806524:	dec00904 	addi	sp,sp,36
  806528:	f800283a 	ret
  80652c:	002f883a 	mov	r23,zero
  806530:	003ff106 	br	8064f8 <_fwalk_reent+0x8c>

00806534 <_fwalk>:
  806534:	defff804 	addi	sp,sp,-32
  806538:	dcc00315 	stw	r19,12(sp)
  80653c:	24c0b804 	addi	r19,r4,736
  806540:	dd400515 	stw	r21,20(sp)
  806544:	dfc00715 	stw	ra,28(sp)
  806548:	dd800615 	stw	r22,24(sp)
  80654c:	dd000415 	stw	r20,16(sp)
  806550:	dc800215 	stw	r18,8(sp)
  806554:	dc400115 	stw	r17,4(sp)
  806558:	dc000015 	stw	r16,0(sp)
  80655c:	282b883a 	mov	r21,r5
  806560:	0805dc40 	call	805dc4 <__sfp_lock_acquire>
  806564:	98001f26 	beq	r19,zero,8065e4 <_fwalk+0xb0>
  806568:	002d883a 	mov	r22,zero
  80656c:	9c800117 	ldw	r18,4(r19)
  806570:	9c000217 	ldw	r16,8(r19)
  806574:	90bfffc4 	addi	r2,r18,-1
  806578:	10000c16 	blt	r2,zero,8065ac <_fwalk+0x78>
  80657c:	0023883a 	mov	r17,zero
  806580:	053fffc4 	movi	r20,-1
  806584:	8080030f 	ldh	r2,12(r16)
  806588:	8c400044 	addi	r17,r17,1
  80658c:	10000526 	beq	r2,zero,8065a4 <_fwalk+0x70>
  806590:	8080038f 	ldh	r2,14(r16)
  806594:	8009883a 	mov	r4,r16
  806598:	15000226 	beq	r2,r20,8065a4 <_fwalk+0x70>
  80659c:	a83ee83a 	callr	r21
  8065a0:	b0acb03a 	or	r22,r22,r2
  8065a4:	84001704 	addi	r16,r16,92
  8065a8:	947ff61e 	bne	r18,r17,806584 <_fwalk+0x50>
  8065ac:	9cc00017 	ldw	r19,0(r19)
  8065b0:	983fee1e 	bne	r19,zero,80656c <_fwalk+0x38>
  8065b4:	0805dc80 	call	805dc8 <__sfp_lock_release>
  8065b8:	b005883a 	mov	r2,r22
  8065bc:	dfc00717 	ldw	ra,28(sp)
  8065c0:	dd800617 	ldw	r22,24(sp)
  8065c4:	dd400517 	ldw	r21,20(sp)
  8065c8:	dd000417 	ldw	r20,16(sp)
  8065cc:	dcc00317 	ldw	r19,12(sp)
  8065d0:	dc800217 	ldw	r18,8(sp)
  8065d4:	dc400117 	ldw	r17,4(sp)
  8065d8:	dc000017 	ldw	r16,0(sp)
  8065dc:	dec00804 	addi	sp,sp,32
  8065e0:	f800283a 	ret
  8065e4:	002d883a 	mov	r22,zero
  8065e8:	003ff206 	br	8065b4 <_fwalk+0x80>

008065ec <__smakebuf_r>:
  8065ec:	2880030b 	ldhu	r2,12(r5)
  8065f0:	deffed04 	addi	sp,sp,-76
  8065f4:	dc401015 	stw	r17,64(sp)
  8065f8:	1080008c 	andi	r2,r2,2
  8065fc:	dc000f15 	stw	r16,60(sp)
  806600:	dfc01215 	stw	ra,72(sp)
  806604:	dc801115 	stw	r18,68(sp)
  806608:	2821883a 	mov	r16,r5
  80660c:	2023883a 	mov	r17,r4
  806610:	10000b26 	beq	r2,zero,806640 <__smakebuf_r+0x54>
  806614:	28c010c4 	addi	r3,r5,67
  806618:	00800044 	movi	r2,1
  80661c:	28800515 	stw	r2,20(r5)
  806620:	28c00415 	stw	r3,16(r5)
  806624:	28c00015 	stw	r3,0(r5)
  806628:	dfc01217 	ldw	ra,72(sp)
  80662c:	dc801117 	ldw	r18,68(sp)
  806630:	dc401017 	ldw	r17,64(sp)
  806634:	dc000f17 	ldw	r16,60(sp)
  806638:	dec01304 	addi	sp,sp,76
  80663c:	f800283a 	ret
  806640:	2940038f 	ldh	r5,14(r5)
  806644:	28002116 	blt	r5,zero,8066cc <__smakebuf_r+0xe0>
  806648:	d80d883a 	mov	r6,sp
  80664c:	0806b700 	call	806b70 <_fstat_r>
  806650:	10001e16 	blt	r2,zero,8066cc <__smakebuf_r+0xe0>
  806654:	d8800117 	ldw	r2,4(sp)
  806658:	00e00014 	movui	r3,32768
  80665c:	113c000c 	andi	r4,r2,61440
  806660:	20c03126 	beq	r4,r3,806728 <__smakebuf_r+0x13c>
  806664:	8080030b 	ldhu	r2,12(r16)
  806668:	00c80004 	movi	r3,8192
  80666c:	10820014 	ori	r2,r2,2048
  806670:	8080030d 	sth	r2,12(r16)
  806674:	20c01e26 	beq	r4,r3,8066f0 <__smakebuf_r+0x104>
  806678:	04810004 	movi	r18,1024
  80667c:	8809883a 	mov	r4,r17
  806680:	900b883a 	mov	r5,r18
  806684:	08049f80 	call	8049f8 <_malloc_r>
  806688:	1009883a 	mov	r4,r2
  80668c:	10003126 	beq	r2,zero,806754 <__smakebuf_r+0x168>
  806690:	80c0030b 	ldhu	r3,12(r16)
  806694:	00802034 	movhi	r2,128
  806698:	1097ae04 	addi	r2,r2,24248
  80669c:	88800f15 	stw	r2,60(r17)
  8066a0:	18c02014 	ori	r3,r3,128
  8066a4:	84800515 	stw	r18,20(r16)
  8066a8:	80c0030d 	sth	r3,12(r16)
  8066ac:	81000415 	stw	r4,16(r16)
  8066b0:	81000015 	stw	r4,0(r16)
  8066b4:	dfc01217 	ldw	ra,72(sp)
  8066b8:	dc801117 	ldw	r18,68(sp)
  8066bc:	dc401017 	ldw	r17,64(sp)
  8066c0:	dc000f17 	ldw	r16,60(sp)
  8066c4:	dec01304 	addi	sp,sp,76
  8066c8:	f800283a 	ret
  8066cc:	80c0030b 	ldhu	r3,12(r16)
  8066d0:	1880200c 	andi	r2,r3,128
  8066d4:	10000426 	beq	r2,zero,8066e8 <__smakebuf_r+0xfc>
  8066d8:	04801004 	movi	r18,64
  8066dc:	18820014 	ori	r2,r3,2048
  8066e0:	8080030d 	sth	r2,12(r16)
  8066e4:	003fe506 	br	80667c <__smakebuf_r+0x90>
  8066e8:	04810004 	movi	r18,1024
  8066ec:	003ffb06 	br	8066dc <__smakebuf_r+0xf0>
  8066f0:	8140038f 	ldh	r5,14(r16)
  8066f4:	8809883a 	mov	r4,r17
  8066f8:	0806be40 	call	806be4 <_isatty_r>
  8066fc:	103fde26 	beq	r2,zero,806678 <__smakebuf_r+0x8c>
  806700:	8080030b 	ldhu	r2,12(r16)
  806704:	80c010c4 	addi	r3,r16,67
  806708:	04810004 	movi	r18,1024
  80670c:	10800054 	ori	r2,r2,1
  806710:	8080030d 	sth	r2,12(r16)
  806714:	00800044 	movi	r2,1
  806718:	80c00415 	stw	r3,16(r16)
  80671c:	80800515 	stw	r2,20(r16)
  806720:	80c00015 	stw	r3,0(r16)
  806724:	003fd506 	br	80667c <__smakebuf_r+0x90>
  806728:	80c00a17 	ldw	r3,40(r16)
  80672c:	00802034 	movhi	r2,128
  806730:	109a0804 	addi	r2,r2,26656
  806734:	18bfcb1e 	bne	r3,r2,806664 <__smakebuf_r+0x78>
  806738:	8080030b 	ldhu	r2,12(r16)
  80673c:	00c10004 	movi	r3,1024
  806740:	1825883a 	mov	r18,r3
  806744:	10c4b03a 	or	r2,r2,r3
  806748:	8080030d 	sth	r2,12(r16)
  80674c:	80c01315 	stw	r3,76(r16)
  806750:	003fca06 	br	80667c <__smakebuf_r+0x90>
  806754:	8100030b 	ldhu	r4,12(r16)
  806758:	2080800c 	andi	r2,r4,512
  80675c:	103fb21e 	bne	r2,zero,806628 <__smakebuf_r+0x3c>
  806760:	80c010c4 	addi	r3,r16,67
  806764:	21000094 	ori	r4,r4,2
  806768:	00800044 	movi	r2,1
  80676c:	80800515 	stw	r2,20(r16)
  806770:	8100030d 	sth	r4,12(r16)
  806774:	80c00415 	stw	r3,16(r16)
  806778:	80c00015 	stw	r3,0(r16)
  80677c:	003faa06 	br	806628 <__smakebuf_r+0x3c>

00806780 <memset>:
  806780:	008000c4 	movi	r2,3
  806784:	29403fcc 	andi	r5,r5,255
  806788:	2007883a 	mov	r3,r4
  80678c:	1180022e 	bgeu	r2,r6,806798 <memset+0x18>
  806790:	2084703a 	and	r2,r4,r2
  806794:	10000826 	beq	r2,zero,8067b8 <memset+0x38>
  806798:	30000526 	beq	r6,zero,8067b0 <memset+0x30>
  80679c:	2805883a 	mov	r2,r5
  8067a0:	30cd883a 	add	r6,r6,r3
  8067a4:	18800005 	stb	r2,0(r3)
  8067a8:	18c00044 	addi	r3,r3,1
  8067ac:	19bffd1e 	bne	r3,r6,8067a4 <memset+0x24>
  8067b0:	2005883a 	mov	r2,r4
  8067b4:	f800283a 	ret
  8067b8:	2804923a 	slli	r2,r5,8
  8067bc:	020003c4 	movi	r8,15
  8067c0:	200f883a 	mov	r7,r4
  8067c4:	2884b03a 	or	r2,r5,r2
  8067c8:	1006943a 	slli	r3,r2,16
  8067cc:	10c6b03a 	or	r3,r2,r3
  8067d0:	41800a2e 	bgeu	r8,r6,8067fc <memset+0x7c>
  8067d4:	4005883a 	mov	r2,r8
  8067d8:	31bffc04 	addi	r6,r6,-16
  8067dc:	38c00015 	stw	r3,0(r7)
  8067e0:	38c00115 	stw	r3,4(r7)
  8067e4:	38c00215 	stw	r3,8(r7)
  8067e8:	38c00315 	stw	r3,12(r7)
  8067ec:	39c00404 	addi	r7,r7,16
  8067f0:	11bff936 	bltu	r2,r6,8067d8 <memset+0x58>
  8067f4:	008000c4 	movi	r2,3
  8067f8:	1180052e 	bgeu	r2,r6,806810 <memset+0x90>
  8067fc:	31bfff04 	addi	r6,r6,-4
  806800:	008000c4 	movi	r2,3
  806804:	38c00015 	stw	r3,0(r7)
  806808:	39c00104 	addi	r7,r7,4
  80680c:	11bffb36 	bltu	r2,r6,8067fc <memset+0x7c>
  806810:	3807883a 	mov	r3,r7
  806814:	003fe006 	br	806798 <memset+0x18>

00806818 <__sclose>:
  806818:	2940038f 	ldh	r5,14(r5)
  80681c:	08069dc1 	jmpi	8069dc <_close_r>

00806820 <__sseek>:
  806820:	defffe04 	addi	sp,sp,-8
  806824:	dc000015 	stw	r16,0(sp)
  806828:	2821883a 	mov	r16,r5
  80682c:	2940038f 	ldh	r5,14(r5)
  806830:	dfc00115 	stw	ra,4(sp)
  806834:	0806c540 	call	806c54 <_lseek_r>
  806838:	1007883a 	mov	r3,r2
  80683c:	00bfffc4 	movi	r2,-1
  806840:	18800926 	beq	r3,r2,806868 <__sseek+0x48>
  806844:	8080030b 	ldhu	r2,12(r16)
  806848:	80c01415 	stw	r3,80(r16)
  80684c:	10840014 	ori	r2,r2,4096
  806850:	8080030d 	sth	r2,12(r16)
  806854:	1805883a 	mov	r2,r3
  806858:	dfc00117 	ldw	ra,4(sp)
  80685c:	dc000017 	ldw	r16,0(sp)
  806860:	dec00204 	addi	sp,sp,8
  806864:	f800283a 	ret
  806868:	8080030b 	ldhu	r2,12(r16)
  80686c:	10bbffcc 	andi	r2,r2,61439
  806870:	8080030d 	sth	r2,12(r16)
  806874:	1805883a 	mov	r2,r3
  806878:	dfc00117 	ldw	ra,4(sp)
  80687c:	dc000017 	ldw	r16,0(sp)
  806880:	dec00204 	addi	sp,sp,8
  806884:	f800283a 	ret

00806888 <__swrite>:
  806888:	2880030b 	ldhu	r2,12(r5)
  80688c:	defffb04 	addi	sp,sp,-20
  806890:	dcc00315 	stw	r19,12(sp)
  806894:	1080400c 	andi	r2,r2,256
  806898:	dc800215 	stw	r18,8(sp)
  80689c:	dc400115 	stw	r17,4(sp)
  8068a0:	dc000015 	stw	r16,0(sp)
  8068a4:	3027883a 	mov	r19,r6
  8068a8:	3825883a 	mov	r18,r7
  8068ac:	dfc00415 	stw	ra,16(sp)
  8068b0:	2821883a 	mov	r16,r5
  8068b4:	000d883a 	mov	r6,zero
  8068b8:	01c00084 	movi	r7,2
  8068bc:	2023883a 	mov	r17,r4
  8068c0:	10000226 	beq	r2,zero,8068cc <__swrite+0x44>
  8068c4:	2940038f 	ldh	r5,14(r5)
  8068c8:	0806c540 	call	806c54 <_lseek_r>
  8068cc:	8080030b 	ldhu	r2,12(r16)
  8068d0:	8140038f 	ldh	r5,14(r16)
  8068d4:	8809883a 	mov	r4,r17
  8068d8:	10bbffcc 	andi	r2,r2,61439
  8068dc:	980d883a 	mov	r6,r19
  8068e0:	900f883a 	mov	r7,r18
  8068e4:	8080030d 	sth	r2,12(r16)
  8068e8:	dfc00417 	ldw	ra,16(sp)
  8068ec:	dcc00317 	ldw	r19,12(sp)
  8068f0:	dc800217 	ldw	r18,8(sp)
  8068f4:	dc400117 	ldw	r17,4(sp)
  8068f8:	dc000017 	ldw	r16,0(sp)
  8068fc:	dec00504 	addi	sp,sp,20
  806900:	08069641 	jmpi	806964 <_write_r>

00806904 <__sread>:
  806904:	defffe04 	addi	sp,sp,-8
  806908:	dc000015 	stw	r16,0(sp)
  80690c:	2821883a 	mov	r16,r5
  806910:	2940038f 	ldh	r5,14(r5)
  806914:	dfc00115 	stw	ra,4(sp)
  806918:	0806ccc0 	call	806ccc <_read_r>
  80691c:	1007883a 	mov	r3,r2
  806920:	10000816 	blt	r2,zero,806944 <__sread+0x40>
  806924:	80801417 	ldw	r2,80(r16)
  806928:	10c5883a 	add	r2,r2,r3
  80692c:	80801415 	stw	r2,80(r16)
  806930:	1805883a 	mov	r2,r3
  806934:	dfc00117 	ldw	ra,4(sp)
  806938:	dc000017 	ldw	r16,0(sp)
  80693c:	dec00204 	addi	sp,sp,8
  806940:	f800283a 	ret
  806944:	8080030b 	ldhu	r2,12(r16)
  806948:	10bbffcc 	andi	r2,r2,61439
  80694c:	8080030d 	sth	r2,12(r16)
  806950:	1805883a 	mov	r2,r3
  806954:	dfc00117 	ldw	ra,4(sp)
  806958:	dc000017 	ldw	r16,0(sp)
  80695c:	dec00204 	addi	sp,sp,8
  806960:	f800283a 	ret

00806964 <_write_r>:
  806964:	defffd04 	addi	sp,sp,-12
  806968:	dc000015 	stw	r16,0(sp)
  80696c:	04002074 	movhi	r16,129
  806970:	843cf804 	addi	r16,r16,-3104
  806974:	dc400115 	stw	r17,4(sp)
  806978:	80000015 	stw	zero,0(r16)
  80697c:	2023883a 	mov	r17,r4
  806980:	2809883a 	mov	r4,r5
  806984:	300b883a 	mov	r5,r6
  806988:	380d883a 	mov	r6,r7
  80698c:	dfc00215 	stw	ra,8(sp)
  806990:	0807e200 	call	807e20 <write>
  806994:	1007883a 	mov	r3,r2
  806998:	00bfffc4 	movi	r2,-1
  80699c:	18800626 	beq	r3,r2,8069b8 <_write_r+0x54>
  8069a0:	1805883a 	mov	r2,r3
  8069a4:	dfc00217 	ldw	ra,8(sp)
  8069a8:	dc400117 	ldw	r17,4(sp)
  8069ac:	dc000017 	ldw	r16,0(sp)
  8069b0:	dec00304 	addi	sp,sp,12
  8069b4:	f800283a 	ret
  8069b8:	80800017 	ldw	r2,0(r16)
  8069bc:	103ff826 	beq	r2,zero,8069a0 <_write_r+0x3c>
  8069c0:	88800015 	stw	r2,0(r17)
  8069c4:	1805883a 	mov	r2,r3
  8069c8:	dfc00217 	ldw	ra,8(sp)
  8069cc:	dc400117 	ldw	r17,4(sp)
  8069d0:	dc000017 	ldw	r16,0(sp)
  8069d4:	dec00304 	addi	sp,sp,12
  8069d8:	f800283a 	ret

008069dc <_close_r>:
  8069dc:	defffd04 	addi	sp,sp,-12
  8069e0:	dc000015 	stw	r16,0(sp)
  8069e4:	04002074 	movhi	r16,129
  8069e8:	843cf804 	addi	r16,r16,-3104
  8069ec:	dc400115 	stw	r17,4(sp)
  8069f0:	80000015 	stw	zero,0(r16)
  8069f4:	2023883a 	mov	r17,r4
  8069f8:	2809883a 	mov	r4,r5
  8069fc:	dfc00215 	stw	ra,8(sp)
  806a00:	0806e980 	call	806e98 <close>
  806a04:	1007883a 	mov	r3,r2
  806a08:	00bfffc4 	movi	r2,-1
  806a0c:	18800626 	beq	r3,r2,806a28 <_close_r+0x4c>
  806a10:	1805883a 	mov	r2,r3
  806a14:	dfc00217 	ldw	ra,8(sp)
  806a18:	dc400117 	ldw	r17,4(sp)
  806a1c:	dc000017 	ldw	r16,0(sp)
  806a20:	dec00304 	addi	sp,sp,12
  806a24:	f800283a 	ret
  806a28:	80800017 	ldw	r2,0(r16)
  806a2c:	103ff826 	beq	r2,zero,806a10 <_close_r+0x34>
  806a30:	88800015 	stw	r2,0(r17)
  806a34:	1805883a 	mov	r2,r3
  806a38:	dfc00217 	ldw	ra,8(sp)
  806a3c:	dc400117 	ldw	r17,4(sp)
  806a40:	dc000017 	ldw	r16,0(sp)
  806a44:	dec00304 	addi	sp,sp,12
  806a48:	f800283a 	ret

00806a4c <_fclose_r>:
  806a4c:	defffc04 	addi	sp,sp,-16
  806a50:	dc400115 	stw	r17,4(sp)
  806a54:	dc000015 	stw	r16,0(sp)
  806a58:	dfc00315 	stw	ra,12(sp)
  806a5c:	dc800215 	stw	r18,8(sp)
  806a60:	2821883a 	mov	r16,r5
  806a64:	2023883a 	mov	r17,r4
  806a68:	28002926 	beq	r5,zero,806b10 <_fclose_r+0xc4>
  806a6c:	0805dc40 	call	805dc4 <__sfp_lock_acquire>
  806a70:	88000226 	beq	r17,zero,806a7c <_fclose_r+0x30>
  806a74:	88800e17 	ldw	r2,56(r17)
  806a78:	10002d26 	beq	r2,zero,806b30 <_fclose_r+0xe4>
  806a7c:	8080030f 	ldh	r2,12(r16)
  806a80:	10002226 	beq	r2,zero,806b0c <_fclose_r+0xc0>
  806a84:	8809883a 	mov	r4,r17
  806a88:	800b883a 	mov	r5,r16
  806a8c:	0805b3c0 	call	805b3c <_fflush_r>
  806a90:	1025883a 	mov	r18,r2
  806a94:	80800b17 	ldw	r2,44(r16)
  806a98:	10000426 	beq	r2,zero,806aac <_fclose_r+0x60>
  806a9c:	81400717 	ldw	r5,28(r16)
  806aa0:	8809883a 	mov	r4,r17
  806aa4:	103ee83a 	callr	r2
  806aa8:	10002a16 	blt	r2,zero,806b54 <_fclose_r+0x108>
  806aac:	8080030b 	ldhu	r2,12(r16)
  806ab0:	1080200c 	andi	r2,r2,128
  806ab4:	1000231e 	bne	r2,zero,806b44 <_fclose_r+0xf8>
  806ab8:	81400c17 	ldw	r5,48(r16)
  806abc:	28000526 	beq	r5,zero,806ad4 <_fclose_r+0x88>
  806ac0:	80801004 	addi	r2,r16,64
  806ac4:	28800226 	beq	r5,r2,806ad0 <_fclose_r+0x84>
  806ac8:	8809883a 	mov	r4,r17
  806acc:	08061580 	call	806158 <_free_r>
  806ad0:	80000c15 	stw	zero,48(r16)
  806ad4:	81401117 	ldw	r5,68(r16)
  806ad8:	28000326 	beq	r5,zero,806ae8 <_fclose_r+0x9c>
  806adc:	8809883a 	mov	r4,r17
  806ae0:	08061580 	call	806158 <_free_r>
  806ae4:	80001115 	stw	zero,68(r16)
  806ae8:	8000030d 	sth	zero,12(r16)
  806aec:	0805dc80 	call	805dc8 <__sfp_lock_release>
  806af0:	9005883a 	mov	r2,r18
  806af4:	dfc00317 	ldw	ra,12(sp)
  806af8:	dc800217 	ldw	r18,8(sp)
  806afc:	dc400117 	ldw	r17,4(sp)
  806b00:	dc000017 	ldw	r16,0(sp)
  806b04:	dec00404 	addi	sp,sp,16
  806b08:	f800283a 	ret
  806b0c:	0805dc80 	call	805dc8 <__sfp_lock_release>
  806b10:	0025883a 	mov	r18,zero
  806b14:	9005883a 	mov	r2,r18
  806b18:	dfc00317 	ldw	ra,12(sp)
  806b1c:	dc800217 	ldw	r18,8(sp)
  806b20:	dc400117 	ldw	r17,4(sp)
  806b24:	dc000017 	ldw	r16,0(sp)
  806b28:	dec00404 	addi	sp,sp,16
  806b2c:	f800283a 	ret
  806b30:	8809883a 	mov	r4,r17
  806b34:	0805dd40 	call	805dd4 <__sinit>
  806b38:	8080030f 	ldh	r2,12(r16)
  806b3c:	103fd11e 	bne	r2,zero,806a84 <_fclose_r+0x38>
  806b40:	003ff206 	br	806b0c <_fclose_r+0xc0>
  806b44:	81400417 	ldw	r5,16(r16)
  806b48:	8809883a 	mov	r4,r17
  806b4c:	08061580 	call	806158 <_free_r>
  806b50:	003fd906 	br	806ab8 <_fclose_r+0x6c>
  806b54:	04bfffc4 	movi	r18,-1
  806b58:	003fd406 	br	806aac <_fclose_r+0x60>

00806b5c <fclose>:
  806b5c:	00802074 	movhi	r2,129
  806b60:	10b57804 	addi	r2,r2,-10784
  806b64:	200b883a 	mov	r5,r4
  806b68:	11000017 	ldw	r4,0(r2)
  806b6c:	0806a4c1 	jmpi	806a4c <_fclose_r>

00806b70 <_fstat_r>:
  806b70:	defffd04 	addi	sp,sp,-12
  806b74:	dc000015 	stw	r16,0(sp)
  806b78:	04002074 	movhi	r16,129
  806b7c:	843cf804 	addi	r16,r16,-3104
  806b80:	dc400115 	stw	r17,4(sp)
  806b84:	80000015 	stw	zero,0(r16)
  806b88:	2023883a 	mov	r17,r4
  806b8c:	2809883a 	mov	r4,r5
  806b90:	300b883a 	mov	r5,r6
  806b94:	dfc00215 	stw	ra,8(sp)
  806b98:	08070200 	call	807020 <fstat>
  806b9c:	1007883a 	mov	r3,r2
  806ba0:	00bfffc4 	movi	r2,-1
  806ba4:	18800626 	beq	r3,r2,806bc0 <_fstat_r+0x50>
  806ba8:	1805883a 	mov	r2,r3
  806bac:	dfc00217 	ldw	ra,8(sp)
  806bb0:	dc400117 	ldw	r17,4(sp)
  806bb4:	dc000017 	ldw	r16,0(sp)
  806bb8:	dec00304 	addi	sp,sp,12
  806bbc:	f800283a 	ret
  806bc0:	80800017 	ldw	r2,0(r16)
  806bc4:	103ff826 	beq	r2,zero,806ba8 <_fstat_r+0x38>
  806bc8:	88800015 	stw	r2,0(r17)
  806bcc:	1805883a 	mov	r2,r3
  806bd0:	dfc00217 	ldw	ra,8(sp)
  806bd4:	dc400117 	ldw	r17,4(sp)
  806bd8:	dc000017 	ldw	r16,0(sp)
  806bdc:	dec00304 	addi	sp,sp,12
  806be0:	f800283a 	ret

00806be4 <_isatty_r>:
  806be4:	defffd04 	addi	sp,sp,-12
  806be8:	dc000015 	stw	r16,0(sp)
  806bec:	04002074 	movhi	r16,129
  806bf0:	843cf804 	addi	r16,r16,-3104
  806bf4:	dc400115 	stw	r17,4(sp)
  806bf8:	80000015 	stw	zero,0(r16)
  806bfc:	2023883a 	mov	r17,r4
  806c00:	2809883a 	mov	r4,r5
  806c04:	dfc00215 	stw	ra,8(sp)
  806c08:	08073140 	call	807314 <isatty>
  806c0c:	1007883a 	mov	r3,r2
  806c10:	00bfffc4 	movi	r2,-1
  806c14:	18800626 	beq	r3,r2,806c30 <_isatty_r+0x4c>
  806c18:	1805883a 	mov	r2,r3
  806c1c:	dfc00217 	ldw	ra,8(sp)
  806c20:	dc400117 	ldw	r17,4(sp)
  806c24:	dc000017 	ldw	r16,0(sp)
  806c28:	dec00304 	addi	sp,sp,12
  806c2c:	f800283a 	ret
  806c30:	80800017 	ldw	r2,0(r16)
  806c34:	103ff826 	beq	r2,zero,806c18 <_isatty_r+0x34>
  806c38:	88800015 	stw	r2,0(r17)
  806c3c:	1805883a 	mov	r2,r3
  806c40:	dfc00217 	ldw	ra,8(sp)
  806c44:	dc400117 	ldw	r17,4(sp)
  806c48:	dc000017 	ldw	r16,0(sp)
  806c4c:	dec00304 	addi	sp,sp,12
  806c50:	f800283a 	ret

00806c54 <_lseek_r>:
  806c54:	defffd04 	addi	sp,sp,-12
  806c58:	dc000015 	stw	r16,0(sp)
  806c5c:	04002074 	movhi	r16,129
  806c60:	843cf804 	addi	r16,r16,-3104
  806c64:	dc400115 	stw	r17,4(sp)
  806c68:	80000015 	stw	zero,0(r16)
  806c6c:	2023883a 	mov	r17,r4
  806c70:	2809883a 	mov	r4,r5
  806c74:	300b883a 	mov	r5,r6
  806c78:	380d883a 	mov	r6,r7
  806c7c:	dfc00215 	stw	ra,8(sp)
  806c80:	08075200 	call	807520 <lseek>
  806c84:	1007883a 	mov	r3,r2
  806c88:	00bfffc4 	movi	r2,-1
  806c8c:	18800626 	beq	r3,r2,806ca8 <_lseek_r+0x54>
  806c90:	1805883a 	mov	r2,r3
  806c94:	dfc00217 	ldw	ra,8(sp)
  806c98:	dc400117 	ldw	r17,4(sp)
  806c9c:	dc000017 	ldw	r16,0(sp)
  806ca0:	dec00304 	addi	sp,sp,12
  806ca4:	f800283a 	ret
  806ca8:	80800017 	ldw	r2,0(r16)
  806cac:	103ff826 	beq	r2,zero,806c90 <_lseek_r+0x3c>
  806cb0:	88800015 	stw	r2,0(r17)
  806cb4:	1805883a 	mov	r2,r3
  806cb8:	dfc00217 	ldw	ra,8(sp)
  806cbc:	dc400117 	ldw	r17,4(sp)
  806cc0:	dc000017 	ldw	r16,0(sp)
  806cc4:	dec00304 	addi	sp,sp,12
  806cc8:	f800283a 	ret

00806ccc <_read_r>:
  806ccc:	defffd04 	addi	sp,sp,-12
  806cd0:	dc000015 	stw	r16,0(sp)
  806cd4:	04002074 	movhi	r16,129
  806cd8:	843cf804 	addi	r16,r16,-3104
  806cdc:	dc400115 	stw	r17,4(sp)
  806ce0:	80000015 	stw	zero,0(r16)
  806ce4:	2023883a 	mov	r17,r4
  806ce8:	2809883a 	mov	r4,r5
  806cec:	300b883a 	mov	r5,r6
  806cf0:	380d883a 	mov	r6,r7
  806cf4:	dfc00215 	stw	ra,8(sp)
  806cf8:	08079e00 	call	8079e0 <read>
  806cfc:	1007883a 	mov	r3,r2
  806d00:	00bfffc4 	movi	r2,-1
  806d04:	18800626 	beq	r3,r2,806d20 <_read_r+0x54>
  806d08:	1805883a 	mov	r2,r3
  806d0c:	dfc00217 	ldw	ra,8(sp)
  806d10:	dc400117 	ldw	r17,4(sp)
  806d14:	dc000017 	ldw	r16,0(sp)
  806d18:	dec00304 	addi	sp,sp,12
  806d1c:	f800283a 	ret
  806d20:	80800017 	ldw	r2,0(r16)
  806d24:	103ff826 	beq	r2,zero,806d08 <_read_r+0x3c>
  806d28:	88800015 	stw	r2,0(r17)
  806d2c:	1805883a 	mov	r2,r3
  806d30:	dfc00217 	ldw	ra,8(sp)
  806d34:	dc400117 	ldw	r17,4(sp)
  806d38:	dc000017 	ldw	r16,0(sp)
  806d3c:	dec00304 	addi	sp,sp,12
  806d40:	f800283a 	ret

00806d44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  806d44:	defff404 	addi	sp,sp,-48
  806d48:	df000b15 	stw	fp,44(sp)
  806d4c:	df000b04 	addi	fp,sp,44
  806d50:	e13ffb15 	stw	r4,-20(fp)
  806d54:	e17ffc15 	stw	r5,-16(fp)
  806d58:	e1bffd15 	stw	r6,-12(fp)
  806d5c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  806d60:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  806d64:	00802074 	movhi	r2,129
  806d68:	10bcfd04 	addi	r2,r2,-3084
  806d6c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  806d70:	1005003a 	cmpeq	r2,r2,zero
  806d74:	1000411e 	bne	r2,zero,806e7c <alt_alarm_start+0x138>
  {
    if (alarm)
  806d78:	e0bffb17 	ldw	r2,-20(fp)
  806d7c:	1005003a 	cmpeq	r2,r2,zero
  806d80:	10003b1e 	bne	r2,zero,806e70 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  806d84:	e0fffb17 	ldw	r3,-20(fp)
  806d88:	e0bffd17 	ldw	r2,-12(fp)
  806d8c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  806d90:	e0fffb17 	ldw	r3,-20(fp)
  806d94:	e0bffe17 	ldw	r2,-8(fp)
  806d98:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d9c:	0005303a 	rdctl	r2,status
  806da0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806da4:	e0fff817 	ldw	r3,-32(fp)
  806da8:	00bfff84 	movi	r2,-2
  806dac:	1884703a 	and	r2,r3,r2
  806db0:	1001703a 	wrctl	status,r2
  
  return context;
  806db4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  806db8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  806dbc:	00802074 	movhi	r2,129
  806dc0:	10bcfe04 	addi	r2,r2,-3080
  806dc4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  806dc8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  806dcc:	e0fffc17 	ldw	r3,-16(fp)
  806dd0:	e0bff917 	ldw	r2,-28(fp)
  806dd4:	1885883a 	add	r2,r3,r2
  806dd8:	10c00044 	addi	r3,r2,1
  806ddc:	e0bffb17 	ldw	r2,-20(fp)
  806de0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  806de4:	e0bffb17 	ldw	r2,-20(fp)
  806de8:	10c00217 	ldw	r3,8(r2)
  806dec:	e0bff917 	ldw	r2,-28(fp)
  806df0:	1880042e 	bgeu	r3,r2,806e04 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  806df4:	e0fffb17 	ldw	r3,-20(fp)
  806df8:	00800044 	movi	r2,1
  806dfc:	18800405 	stb	r2,16(r3)
  806e00:	00000206 	br	806e0c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  806e04:	e0bffb17 	ldw	r2,-20(fp)
  806e08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  806e0c:	e0fffb17 	ldw	r3,-20(fp)
  806e10:	00802074 	movhi	r2,129
  806e14:	10b58404 	addi	r2,r2,-10736
  806e18:	e0bff615 	stw	r2,-40(fp)
  806e1c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  806e20:	e0fff717 	ldw	r3,-36(fp)
  806e24:	e0bff617 	ldw	r2,-40(fp)
  806e28:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  806e2c:	e0bff617 	ldw	r2,-40(fp)
  806e30:	10c00017 	ldw	r3,0(r2)
  806e34:	e0bff717 	ldw	r2,-36(fp)
  806e38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  806e3c:	e0bff617 	ldw	r2,-40(fp)
  806e40:	10c00017 	ldw	r3,0(r2)
  806e44:	e0bff717 	ldw	r2,-36(fp)
  806e48:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  806e4c:	e0fff617 	ldw	r3,-40(fp)
  806e50:	e0bff717 	ldw	r2,-36(fp)
  806e54:	18800015 	stw	r2,0(r3)
  806e58:	e0bffa17 	ldw	r2,-24(fp)
  806e5c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806e60:	e0bff517 	ldw	r2,-44(fp)
  806e64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  806e68:	e03fff15 	stw	zero,-4(fp)
  806e6c:	00000506 	br	806e84 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  806e70:	00bffa84 	movi	r2,-22
  806e74:	e0bfff15 	stw	r2,-4(fp)
  806e78:	00000206 	br	806e84 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  806e7c:	00bfde84 	movi	r2,-134
  806e80:	e0bfff15 	stw	r2,-4(fp)
  806e84:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  806e88:	e037883a 	mov	sp,fp
  806e8c:	df000017 	ldw	fp,0(sp)
  806e90:	dec00104 	addi	sp,sp,4
  806e94:	f800283a 	ret

00806e98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  806e98:	defff804 	addi	sp,sp,-32
  806e9c:	dfc00715 	stw	ra,28(sp)
  806ea0:	df000615 	stw	fp,24(sp)
  806ea4:	df000604 	addi	fp,sp,24
  806ea8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  806eac:	e0bffc17 	ldw	r2,-16(fp)
  806eb0:	1004803a 	cmplt	r2,r2,zero
  806eb4:	1000081e 	bne	r2,zero,806ed8 <close+0x40>
  806eb8:	e0bffc17 	ldw	r2,-16(fp)
  806ebc:	10800324 	muli	r2,r2,12
  806ec0:	1007883a 	mov	r3,r2
  806ec4:	00802074 	movhi	r2,129
  806ec8:	10b08504 	addi	r2,r2,-15852
  806ecc:	1887883a 	add	r3,r3,r2
  806ed0:	e0ffff15 	stw	r3,-4(fp)
  806ed4:	00000106 	br	806edc <close+0x44>
  806ed8:	e03fff15 	stw	zero,-4(fp)
  806edc:	e0bfff17 	ldw	r2,-4(fp)
  806ee0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  806ee4:	e0bffb17 	ldw	r2,-20(fp)
  806ee8:	1005003a 	cmpeq	r2,r2,zero
  806eec:	10001d1e 	bne	r2,zero,806f64 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  806ef0:	e0bffb17 	ldw	r2,-20(fp)
  806ef4:	10800017 	ldw	r2,0(r2)
  806ef8:	10800417 	ldw	r2,16(r2)
  806efc:	1005003a 	cmpeq	r2,r2,zero
  806f00:	1000071e 	bne	r2,zero,806f20 <close+0x88>
  806f04:	e0bffb17 	ldw	r2,-20(fp)
  806f08:	10800017 	ldw	r2,0(r2)
  806f0c:	10800417 	ldw	r2,16(r2)
  806f10:	e13ffb17 	ldw	r4,-20(fp)
  806f14:	103ee83a 	callr	r2
  806f18:	e0bffe15 	stw	r2,-8(fp)
  806f1c:	00000106 	br	806f24 <close+0x8c>
  806f20:	e03ffe15 	stw	zero,-8(fp)
  806f24:	e0bffe17 	ldw	r2,-8(fp)
  806f28:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  806f2c:	e13ffc17 	ldw	r4,-16(fp)
  806f30:	0807b600 	call	807b60 <alt_release_fd>
    if (rval < 0)
  806f34:	e0bffa17 	ldw	r2,-24(fp)
  806f38:	1004403a 	cmpge	r2,r2,zero
  806f3c:	1000071e 	bne	r2,zero,806f5c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  806f40:	0806f940 	call	806f94 <alt_get_errno>
  806f44:	e0fffa17 	ldw	r3,-24(fp)
  806f48:	00c7c83a 	sub	r3,zero,r3
  806f4c:	10c00015 	stw	r3,0(r2)
      return -1;
  806f50:	00bfffc4 	movi	r2,-1
  806f54:	e0bffd15 	stw	r2,-12(fp)
  806f58:	00000806 	br	806f7c <close+0xe4>
    }
    return 0;
  806f5c:	e03ffd15 	stw	zero,-12(fp)
  806f60:	00000606 	br	806f7c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  806f64:	0806f940 	call	806f94 <alt_get_errno>
  806f68:	1007883a 	mov	r3,r2
  806f6c:	00801444 	movi	r2,81
  806f70:	18800015 	stw	r2,0(r3)
    return -1;
  806f74:	00bfffc4 	movi	r2,-1
  806f78:	e0bffd15 	stw	r2,-12(fp)
  806f7c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  806f80:	e037883a 	mov	sp,fp
  806f84:	dfc00117 	ldw	ra,4(sp)
  806f88:	df000017 	ldw	fp,0(sp)
  806f8c:	dec00204 	addi	sp,sp,8
  806f90:	f800283a 	ret

00806f94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806f94:	defffd04 	addi	sp,sp,-12
  806f98:	dfc00215 	stw	ra,8(sp)
  806f9c:	df000115 	stw	fp,4(sp)
  806fa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  806fa4:	00802074 	movhi	r2,129
  806fa8:	10b58104 	addi	r2,r2,-10748
  806fac:	10800017 	ldw	r2,0(r2)
  806fb0:	1005003a 	cmpeq	r2,r2,zero
  806fb4:	1000061e 	bne	r2,zero,806fd0 <alt_get_errno+0x3c>
  806fb8:	00802074 	movhi	r2,129
  806fbc:	10b58104 	addi	r2,r2,-10748
  806fc0:	10800017 	ldw	r2,0(r2)
  806fc4:	103ee83a 	callr	r2
  806fc8:	e0bfff15 	stw	r2,-4(fp)
  806fcc:	00000306 	br	806fdc <alt_get_errno+0x48>
  806fd0:	00802074 	movhi	r2,129
  806fd4:	10bcf804 	addi	r2,r2,-3104
  806fd8:	e0bfff15 	stw	r2,-4(fp)
  806fdc:	e0bfff17 	ldw	r2,-4(fp)
}
  806fe0:	e037883a 	mov	sp,fp
  806fe4:	dfc00117 	ldw	ra,4(sp)
  806fe8:	df000017 	ldw	fp,0(sp)
  806fec:	dec00204 	addi	sp,sp,8
  806ff0:	f800283a 	ret

00806ff4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  806ff4:	defffc04 	addi	sp,sp,-16
  806ff8:	df000315 	stw	fp,12(sp)
  806ffc:	df000304 	addi	fp,sp,12
  807000:	e13ffd15 	stw	r4,-12(fp)
  807004:	e17ffe15 	stw	r5,-8(fp)
  807008:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80700c:	e0bfff17 	ldw	r2,-4(fp)
}
  807010:	e037883a 	mov	sp,fp
  807014:	df000017 	ldw	fp,0(sp)
  807018:	dec00104 	addi	sp,sp,4
  80701c:	f800283a 	ret

00807020 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  807020:	defff904 	addi	sp,sp,-28
  807024:	dfc00615 	stw	ra,24(sp)
  807028:	df000515 	stw	fp,20(sp)
  80702c:	df000504 	addi	fp,sp,20
  807030:	e13ffc15 	stw	r4,-16(fp)
  807034:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807038:	e0bffc17 	ldw	r2,-16(fp)
  80703c:	1004803a 	cmplt	r2,r2,zero
  807040:	1000081e 	bne	r2,zero,807064 <fstat+0x44>
  807044:	e0bffc17 	ldw	r2,-16(fp)
  807048:	10800324 	muli	r2,r2,12
  80704c:	1007883a 	mov	r3,r2
  807050:	00802074 	movhi	r2,129
  807054:	10b08504 	addi	r2,r2,-15852
  807058:	1887883a 	add	r3,r3,r2
  80705c:	e0ffff15 	stw	r3,-4(fp)
  807060:	00000106 	br	807068 <fstat+0x48>
  807064:	e03fff15 	stw	zero,-4(fp)
  807068:	e0bfff17 	ldw	r2,-4(fp)
  80706c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  807070:	e0bffb17 	ldw	r2,-20(fp)
  807074:	1005003a 	cmpeq	r2,r2,zero
  807078:	1000121e 	bne	r2,zero,8070c4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80707c:	e0bffb17 	ldw	r2,-20(fp)
  807080:	10800017 	ldw	r2,0(r2)
  807084:	10800817 	ldw	r2,32(r2)
  807088:	1005003a 	cmpeq	r2,r2,zero
  80708c:	1000081e 	bne	r2,zero,8070b0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  807090:	e0bffb17 	ldw	r2,-20(fp)
  807094:	10800017 	ldw	r2,0(r2)
  807098:	10800817 	ldw	r2,32(r2)
  80709c:	e13ffb17 	ldw	r4,-20(fp)
  8070a0:	e17ffd17 	ldw	r5,-12(fp)
  8070a4:	103ee83a 	callr	r2
  8070a8:	e0bffe15 	stw	r2,-8(fp)
  8070ac:	00000b06 	br	8070dc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8070b0:	e0fffd17 	ldw	r3,-12(fp)
  8070b4:	00880004 	movi	r2,8192
  8070b8:	18800115 	stw	r2,4(r3)
      return 0;
  8070bc:	e03ffe15 	stw	zero,-8(fp)
  8070c0:	00000606 	br	8070dc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8070c4:	08070f40 	call	8070f4 <alt_get_errno>
  8070c8:	1007883a 	mov	r3,r2
  8070cc:	00801444 	movi	r2,81
  8070d0:	18800015 	stw	r2,0(r3)
    return -1;
  8070d4:	00bfffc4 	movi	r2,-1
  8070d8:	e0bffe15 	stw	r2,-8(fp)
  8070dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8070e0:	e037883a 	mov	sp,fp
  8070e4:	dfc00117 	ldw	ra,4(sp)
  8070e8:	df000017 	ldw	fp,0(sp)
  8070ec:	dec00204 	addi	sp,sp,8
  8070f0:	f800283a 	ret

008070f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8070f4:	defffd04 	addi	sp,sp,-12
  8070f8:	dfc00215 	stw	ra,8(sp)
  8070fc:	df000115 	stw	fp,4(sp)
  807100:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807104:	00802074 	movhi	r2,129
  807108:	10b58104 	addi	r2,r2,-10748
  80710c:	10800017 	ldw	r2,0(r2)
  807110:	1005003a 	cmpeq	r2,r2,zero
  807114:	1000061e 	bne	r2,zero,807130 <alt_get_errno+0x3c>
  807118:	00802074 	movhi	r2,129
  80711c:	10b58104 	addi	r2,r2,-10748
  807120:	10800017 	ldw	r2,0(r2)
  807124:	103ee83a 	callr	r2
  807128:	e0bfff15 	stw	r2,-4(fp)
  80712c:	00000306 	br	80713c <alt_get_errno+0x48>
  807130:	00802074 	movhi	r2,129
  807134:	10bcf804 	addi	r2,r2,-3104
  807138:	e0bfff15 	stw	r2,-4(fp)
  80713c:	e0bfff17 	ldw	r2,-4(fp)
}
  807140:	e037883a 	mov	sp,fp
  807144:	dfc00117 	ldw	ra,4(sp)
  807148:	df000017 	ldw	fp,0(sp)
  80714c:	dec00204 	addi	sp,sp,8
  807150:	f800283a 	ret

00807154 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  807154:	deffef04 	addi	sp,sp,-68
  807158:	df001015 	stw	fp,64(sp)
  80715c:	df001004 	addi	fp,sp,64
  807160:	e13ffc15 	stw	r4,-16(fp)
  807164:	e17ffd15 	stw	r5,-12(fp)
  807168:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80716c:	00bffa84 	movi	r2,-22
  807170:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807174:	e0bffc17 	ldw	r2,-16(fp)
  807178:	10800828 	cmpgeui	r2,r2,32
  80717c:	1000601e 	bne	r2,zero,807300 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807180:	0005303a 	rdctl	r2,status
  807184:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807188:	e0fff917 	ldw	r3,-28(fp)
  80718c:	00bfff84 	movi	r2,-2
  807190:	1884703a 	and	r2,r3,r2
  807194:	1001703a 	wrctl	status,r2
  
  return context;
  807198:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80719c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8071a0:	e0bffc17 	ldw	r2,-16(fp)
  8071a4:	00c02074 	movhi	r3,129
  8071a8:	18fd3904 	addi	r3,r3,-2844
  8071ac:	100490fa 	slli	r2,r2,3
  8071b0:	10c7883a 	add	r3,r2,r3
  8071b4:	e0bffe17 	ldw	r2,-8(fp)
  8071b8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8071bc:	e0bffc17 	ldw	r2,-16(fp)
  8071c0:	00c02074 	movhi	r3,129
  8071c4:	18fd3904 	addi	r3,r3,-2844
  8071c8:	100490fa 	slli	r2,r2,3
  8071cc:	10c5883a 	add	r2,r2,r3
  8071d0:	10c00104 	addi	r3,r2,4
  8071d4:	e0bffd17 	ldw	r2,-12(fp)
  8071d8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8071dc:	e0bffe17 	ldw	r2,-8(fp)
  8071e0:	1005003a 	cmpeq	r2,r2,zero
  8071e4:	1000201e 	bne	r2,zero,807268 <alt_irq_register+0x114>
  8071e8:	e0bffc17 	ldw	r2,-16(fp)
  8071ec:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8071f0:	0005303a 	rdctl	r2,status
  8071f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8071f8:	e0fff617 	ldw	r3,-40(fp)
  8071fc:	00bfff84 	movi	r2,-2
  807200:	1884703a 	and	r2,r3,r2
  807204:	1001703a 	wrctl	status,r2
  
  return context;
  807208:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80720c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  807210:	e0fff717 	ldw	r3,-36(fp)
  807214:	00800044 	movi	r2,1
  807218:	10c4983a 	sll	r2,r2,r3
  80721c:	1007883a 	mov	r3,r2
  807220:	00802074 	movhi	r2,129
  807224:	10bcf904 	addi	r2,r2,-3100
  807228:	10800017 	ldw	r2,0(r2)
  80722c:	1886b03a 	or	r3,r3,r2
  807230:	00802074 	movhi	r2,129
  807234:	10bcf904 	addi	r2,r2,-3100
  807238:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80723c:	00802074 	movhi	r2,129
  807240:	10bcf904 	addi	r2,r2,-3100
  807244:	10800017 	ldw	r2,0(r2)
  807248:	100170fa 	wrctl	ienable,r2
  80724c:	e0bff817 	ldw	r2,-32(fp)
  807250:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807254:	e0bff517 	ldw	r2,-44(fp)
  807258:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80725c:	0005883a 	mov	r2,zero
  807260:	e0bfff15 	stw	r2,-4(fp)
  807264:	00002006 	br	8072e8 <alt_irq_register+0x194>
  807268:	e0bffc17 	ldw	r2,-16(fp)
  80726c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807270:	0005303a 	rdctl	r2,status
  807274:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807278:	e0fff217 	ldw	r3,-56(fp)
  80727c:	00bfff84 	movi	r2,-2
  807280:	1884703a 	and	r2,r3,r2
  807284:	1001703a 	wrctl	status,r2
  
  return context;
  807288:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80728c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  807290:	e0fff317 	ldw	r3,-52(fp)
  807294:	00800044 	movi	r2,1
  807298:	10c4983a 	sll	r2,r2,r3
  80729c:	0084303a 	nor	r2,zero,r2
  8072a0:	1007883a 	mov	r3,r2
  8072a4:	00802074 	movhi	r2,129
  8072a8:	10bcf904 	addi	r2,r2,-3100
  8072ac:	10800017 	ldw	r2,0(r2)
  8072b0:	1886703a 	and	r3,r3,r2
  8072b4:	00802074 	movhi	r2,129
  8072b8:	10bcf904 	addi	r2,r2,-3100
  8072bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8072c0:	00802074 	movhi	r2,129
  8072c4:	10bcf904 	addi	r2,r2,-3100
  8072c8:	10800017 	ldw	r2,0(r2)
  8072cc:	100170fa 	wrctl	ienable,r2
  8072d0:	e0bff417 	ldw	r2,-48(fp)
  8072d4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8072d8:	e0bff117 	ldw	r2,-60(fp)
  8072dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8072e0:	0005883a 	mov	r2,zero
  8072e4:	e0bfff15 	stw	r2,-4(fp)
  8072e8:	e0bfff17 	ldw	r2,-4(fp)
  8072ec:	e0bffb15 	stw	r2,-20(fp)
  8072f0:	e0bffa17 	ldw	r2,-24(fp)
  8072f4:	e0bff015 	stw	r2,-64(fp)
  8072f8:	e0bff017 	ldw	r2,-64(fp)
  8072fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  807300:	e0bffb17 	ldw	r2,-20(fp)
}
  807304:	e037883a 	mov	sp,fp
  807308:	df000017 	ldw	fp,0(sp)
  80730c:	dec00104 	addi	sp,sp,4
  807310:	f800283a 	ret

00807314 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  807314:	deffeb04 	addi	sp,sp,-84
  807318:	dfc01415 	stw	ra,80(sp)
  80731c:	df001315 	stw	fp,76(sp)
  807320:	df001304 	addi	fp,sp,76
  807324:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807328:	e0bffd17 	ldw	r2,-12(fp)
  80732c:	1004803a 	cmplt	r2,r2,zero
  807330:	1000081e 	bne	r2,zero,807354 <isatty+0x40>
  807334:	e0bffd17 	ldw	r2,-12(fp)
  807338:	10800324 	muli	r2,r2,12
  80733c:	1007883a 	mov	r3,r2
  807340:	00802074 	movhi	r2,129
  807344:	10b08504 	addi	r2,r2,-15852
  807348:	1887883a 	add	r3,r3,r2
  80734c:	e0ffff15 	stw	r3,-4(fp)
  807350:	00000106 	br	807358 <isatty+0x44>
  807354:	e03fff15 	stw	zero,-4(fp)
  807358:	e0bfff17 	ldw	r2,-4(fp)
  80735c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  807360:	e0bfed17 	ldw	r2,-76(fp)
  807364:	1005003a 	cmpeq	r2,r2,zero
  807368:	10000f1e 	bne	r2,zero,8073a8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80736c:	e0bfed17 	ldw	r2,-76(fp)
  807370:	10800017 	ldw	r2,0(r2)
  807374:	10800817 	ldw	r2,32(r2)
  807378:	1004c03a 	cmpne	r2,r2,zero
  80737c:	1000031e 	bne	r2,zero,80738c <isatty+0x78>
    {
      return 1;
  807380:	00800044 	movi	r2,1
  807384:	e0bffe15 	stw	r2,-8(fp)
  807388:	00000c06 	br	8073bc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80738c:	e17fee04 	addi	r5,fp,-72
  807390:	e13ffd17 	ldw	r4,-12(fp)
  807394:	08070200 	call	807020 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  807398:	e0bfef17 	ldw	r2,-68(fp)
  80739c:	10880020 	cmpeqi	r2,r2,8192
  8073a0:	e0bffe15 	stw	r2,-8(fp)
  8073a4:	00000506 	br	8073bc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8073a8:	08073d40 	call	8073d4 <alt_get_errno>
  8073ac:	1007883a 	mov	r3,r2
  8073b0:	00801444 	movi	r2,81
  8073b4:	18800015 	stw	r2,0(r3)
    return 0;
  8073b8:	e03ffe15 	stw	zero,-8(fp)
  8073bc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8073c0:	e037883a 	mov	sp,fp
  8073c4:	dfc00117 	ldw	ra,4(sp)
  8073c8:	df000017 	ldw	fp,0(sp)
  8073cc:	dec00204 	addi	sp,sp,8
  8073d0:	f800283a 	ret

008073d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8073d4:	defffd04 	addi	sp,sp,-12
  8073d8:	dfc00215 	stw	ra,8(sp)
  8073dc:	df000115 	stw	fp,4(sp)
  8073e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8073e4:	00802074 	movhi	r2,129
  8073e8:	10b58104 	addi	r2,r2,-10748
  8073ec:	10800017 	ldw	r2,0(r2)
  8073f0:	1005003a 	cmpeq	r2,r2,zero
  8073f4:	1000061e 	bne	r2,zero,807410 <alt_get_errno+0x3c>
  8073f8:	00802074 	movhi	r2,129
  8073fc:	10b58104 	addi	r2,r2,-10748
  807400:	10800017 	ldw	r2,0(r2)
  807404:	103ee83a 	callr	r2
  807408:	e0bfff15 	stw	r2,-4(fp)
  80740c:	00000306 	br	80741c <alt_get_errno+0x48>
  807410:	00802074 	movhi	r2,129
  807414:	10bcf804 	addi	r2,r2,-3104
  807418:	e0bfff15 	stw	r2,-4(fp)
  80741c:	e0bfff17 	ldw	r2,-4(fp)
}
  807420:	e037883a 	mov	sp,fp
  807424:	dfc00117 	ldw	ra,4(sp)
  807428:	df000017 	ldw	fp,0(sp)
  80742c:	dec00204 	addi	sp,sp,8
  807430:	f800283a 	ret

00807434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  807434:	defffe04 	addi	sp,sp,-8
  807438:	dfc00115 	stw	ra,4(sp)
  80743c:	df000015 	stw	fp,0(sp)
  807440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807444:	01002074 	movhi	r4,129
  807448:	21358804 	addi	r4,r4,-10720
  80744c:	01402074 	movhi	r5,129
  807450:	296e7904 	addi	r5,r5,-17948
  807454:	01802074 	movhi	r6,129
  807458:	31b58804 	addi	r6,r6,-10720
  80745c:	08074b40 	call	8074b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807460:	01002034 	movhi	r4,128
  807464:	21000804 	addi	r4,r4,32
  807468:	01402034 	movhi	r5,128
  80746c:	29400804 	addi	r5,r5,32
  807470:	01802034 	movhi	r6,128
  807474:	31806d04 	addi	r6,r6,436
  807478:	08074b40 	call	8074b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80747c:	01002074 	movhi	r4,129
  807480:	212d6104 	addi	r4,r4,-19068
  807484:	01402074 	movhi	r5,129
  807488:	296d6104 	addi	r5,r5,-19068
  80748c:	01802074 	movhi	r6,129
  807490:	31ae7904 	addi	r6,r6,-17948
  807494:	08074b40 	call	8074b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  807498:	080a53c0 	call	80a53c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80749c:	080a9c80 	call	80a9c8 <alt_icache_flush_all>
}
  8074a0:	e037883a 	mov	sp,fp
  8074a4:	dfc00117 	ldw	ra,4(sp)
  8074a8:	df000017 	ldw	fp,0(sp)
  8074ac:	dec00204 	addi	sp,sp,8
  8074b0:	f800283a 	ret

008074b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8074b4:	defffc04 	addi	sp,sp,-16
  8074b8:	df000315 	stw	fp,12(sp)
  8074bc:	df000304 	addi	fp,sp,12
  8074c0:	e13ffd15 	stw	r4,-12(fp)
  8074c4:	e17ffe15 	stw	r5,-8(fp)
  8074c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8074cc:	e0fffe17 	ldw	r3,-8(fp)
  8074d0:	e0bffd17 	ldw	r2,-12(fp)
  8074d4:	18800e26 	beq	r3,r2,807510 <alt_load_section+0x5c>
  {
    while( to != end )
  8074d8:	00000a06 	br	807504 <alt_load_section+0x50>
    {
      *to++ = *from++;
  8074dc:	e0bffd17 	ldw	r2,-12(fp)
  8074e0:	10c00017 	ldw	r3,0(r2)
  8074e4:	e0bffe17 	ldw	r2,-8(fp)
  8074e8:	10c00015 	stw	r3,0(r2)
  8074ec:	e0bffe17 	ldw	r2,-8(fp)
  8074f0:	10800104 	addi	r2,r2,4
  8074f4:	e0bffe15 	stw	r2,-8(fp)
  8074f8:	e0bffd17 	ldw	r2,-12(fp)
  8074fc:	10800104 	addi	r2,r2,4
  807500:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807504:	e0fffe17 	ldw	r3,-8(fp)
  807508:	e0bfff17 	ldw	r2,-4(fp)
  80750c:	18bff31e 	bne	r3,r2,8074dc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  807510:	e037883a 	mov	sp,fp
  807514:	df000017 	ldw	fp,0(sp)
  807518:	dec00104 	addi	sp,sp,4
  80751c:	f800283a 	ret

00807520 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  807520:	defff804 	addi	sp,sp,-32
  807524:	dfc00715 	stw	ra,28(sp)
  807528:	df000615 	stw	fp,24(sp)
  80752c:	df000604 	addi	fp,sp,24
  807530:	e13ffc15 	stw	r4,-16(fp)
  807534:	e17ffd15 	stw	r5,-12(fp)
  807538:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80753c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807540:	e0bffc17 	ldw	r2,-16(fp)
  807544:	1004803a 	cmplt	r2,r2,zero
  807548:	1000081e 	bne	r2,zero,80756c <lseek+0x4c>
  80754c:	e0bffc17 	ldw	r2,-16(fp)
  807550:	10800324 	muli	r2,r2,12
  807554:	1007883a 	mov	r3,r2
  807558:	00802074 	movhi	r2,129
  80755c:	10b08504 	addi	r2,r2,-15852
  807560:	1887883a 	add	r3,r3,r2
  807564:	e0ffff15 	stw	r3,-4(fp)
  807568:	00000106 	br	807570 <lseek+0x50>
  80756c:	e03fff15 	stw	zero,-4(fp)
  807570:	e0bfff17 	ldw	r2,-4(fp)
  807574:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  807578:	e0bffb17 	ldw	r2,-20(fp)
  80757c:	1005003a 	cmpeq	r2,r2,zero
  807580:	1000111e 	bne	r2,zero,8075c8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  807584:	e0bffb17 	ldw	r2,-20(fp)
  807588:	10800017 	ldw	r2,0(r2)
  80758c:	10800717 	ldw	r2,28(r2)
  807590:	1005003a 	cmpeq	r2,r2,zero
  807594:	1000091e 	bne	r2,zero,8075bc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  807598:	e0bffb17 	ldw	r2,-20(fp)
  80759c:	10800017 	ldw	r2,0(r2)
  8075a0:	10800717 	ldw	r2,28(r2)
  8075a4:	e13ffb17 	ldw	r4,-20(fp)
  8075a8:	e17ffd17 	ldw	r5,-12(fp)
  8075ac:	e1bffe17 	ldw	r6,-8(fp)
  8075b0:	103ee83a 	callr	r2
  8075b4:	e0bffa15 	stw	r2,-24(fp)
  8075b8:	00000506 	br	8075d0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8075bc:	00bfde84 	movi	r2,-134
  8075c0:	e0bffa15 	stw	r2,-24(fp)
  8075c4:	00000206 	br	8075d0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8075c8:	00bfebc4 	movi	r2,-81
  8075cc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8075d0:	e0bffa17 	ldw	r2,-24(fp)
  8075d4:	1004403a 	cmpge	r2,r2,zero
  8075d8:	1000071e 	bne	r2,zero,8075f8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8075dc:	08076100 	call	807610 <alt_get_errno>
  8075e0:	1007883a 	mov	r3,r2
  8075e4:	e0bffa17 	ldw	r2,-24(fp)
  8075e8:	0085c83a 	sub	r2,zero,r2
  8075ec:	18800015 	stw	r2,0(r3)
    rc = -1;
  8075f0:	00bfffc4 	movi	r2,-1
  8075f4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8075f8:	e0bffa17 	ldw	r2,-24(fp)
}
  8075fc:	e037883a 	mov	sp,fp
  807600:	dfc00117 	ldw	ra,4(sp)
  807604:	df000017 	ldw	fp,0(sp)
  807608:	dec00204 	addi	sp,sp,8
  80760c:	f800283a 	ret

00807610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807610:	defffd04 	addi	sp,sp,-12
  807614:	dfc00215 	stw	ra,8(sp)
  807618:	df000115 	stw	fp,4(sp)
  80761c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807620:	00802074 	movhi	r2,129
  807624:	10b58104 	addi	r2,r2,-10748
  807628:	10800017 	ldw	r2,0(r2)
  80762c:	1005003a 	cmpeq	r2,r2,zero
  807630:	1000061e 	bne	r2,zero,80764c <alt_get_errno+0x3c>
  807634:	00802074 	movhi	r2,129
  807638:	10b58104 	addi	r2,r2,-10748
  80763c:	10800017 	ldw	r2,0(r2)
  807640:	103ee83a 	callr	r2
  807644:	e0bfff15 	stw	r2,-4(fp)
  807648:	00000306 	br	807658 <alt_get_errno+0x48>
  80764c:	00802074 	movhi	r2,129
  807650:	10bcf804 	addi	r2,r2,-3104
  807654:	e0bfff15 	stw	r2,-4(fp)
  807658:	e0bfff17 	ldw	r2,-4(fp)
}
  80765c:	e037883a 	mov	sp,fp
  807660:	dfc00117 	ldw	ra,4(sp)
  807664:	df000017 	ldw	fp,0(sp)
  807668:	dec00204 	addi	sp,sp,8
  80766c:	f800283a 	ret

00807670 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  807670:	defffd04 	addi	sp,sp,-12
  807674:	dfc00215 	stw	ra,8(sp)
  807678:	df000115 	stw	fp,4(sp)
  80767c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  807680:	0009883a 	mov	r4,zero
  807684:	0807fa00 	call	807fa0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  807688:	0807fd40 	call	807fd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80768c:	01002074 	movhi	r4,129
  807690:	212dca04 	addi	r4,r4,-18648
  807694:	01402074 	movhi	r5,129
  807698:	296dca04 	addi	r5,r5,-18648
  80769c:	01802074 	movhi	r6,129
  8076a0:	31adca04 	addi	r6,r6,-18648
  8076a4:	080ad880 	call	80ad88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8076a8:	080a6940 	call	80a694 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8076ac:	01002074 	movhi	r4,129
  8076b0:	2129be04 	addi	r4,r4,-22792
  8076b4:	080b02c0 	call	80b02c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8076b8:	d1278417 	ldw	r4,-25072(gp)
  8076bc:	d1678517 	ldw	r5,-25068(gp)
  8076c0:	d1a78617 	ldw	r6,-25064(gp)
  8076c4:	08002000 	call	800200 <main>
  8076c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8076cc:	01000044 	movi	r4,1
  8076d0:	0806e980 	call	806e98 <close>
  exit (result);
  8076d4:	e13fff17 	ldw	r4,-4(fp)
  8076d8:	080b0400 	call	80b040 <exit>

008076dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8076dc:	defffe04 	addi	sp,sp,-8
  8076e0:	df000115 	stw	fp,4(sp)
  8076e4:	df000104 	addi	fp,sp,4
  8076e8:	e13fff15 	stw	r4,-4(fp)
}
  8076ec:	e037883a 	mov	sp,fp
  8076f0:	df000017 	ldw	fp,0(sp)
  8076f4:	dec00104 	addi	sp,sp,4
  8076f8:	f800283a 	ret

008076fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8076fc:	defffe04 	addi	sp,sp,-8
  807700:	df000115 	stw	fp,4(sp)
  807704:	df000104 	addi	fp,sp,4
  807708:	e13fff15 	stw	r4,-4(fp)
}
  80770c:	e037883a 	mov	sp,fp
  807710:	df000017 	ldw	fp,0(sp)
  807714:	dec00104 	addi	sp,sp,4
  807718:	f800283a 	ret

0080771c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80771c:	defffc04 	addi	sp,sp,-16
  807720:	df000315 	stw	fp,12(sp)
  807724:	df000304 	addi	fp,sp,12
  807728:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80772c:	e0bffe17 	ldw	r2,-8(fp)
  807730:	10800217 	ldw	r2,8(r2)
  807734:	10d00034 	orhi	r3,r2,16384
  807738:	e0bffe17 	ldw	r2,-8(fp)
  80773c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807740:	e03ffd15 	stw	zero,-12(fp)
  807744:	00002006 	br	8077c8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  807748:	e0bffd17 	ldw	r2,-12(fp)
  80774c:	00c02074 	movhi	r3,129
  807750:	18f08504 	addi	r3,r3,-15852
  807754:	10800324 	muli	r2,r2,12
  807758:	10c5883a 	add	r2,r2,r3
  80775c:	10c00017 	ldw	r3,0(r2)
  807760:	e0bffe17 	ldw	r2,-8(fp)
  807764:	10800017 	ldw	r2,0(r2)
  807768:	1880141e 	bne	r3,r2,8077bc <alt_file_locked+0xa0>
  80776c:	e0bffd17 	ldw	r2,-12(fp)
  807770:	00c02074 	movhi	r3,129
  807774:	18f08504 	addi	r3,r3,-15852
  807778:	10800324 	muli	r2,r2,12
  80777c:	10c5883a 	add	r2,r2,r3
  807780:	10800204 	addi	r2,r2,8
  807784:	10800017 	ldw	r2,0(r2)
  807788:	1004403a 	cmpge	r2,r2,zero
  80778c:	10000b1e 	bne	r2,zero,8077bc <alt_file_locked+0xa0>
  807790:	e0bffd17 	ldw	r2,-12(fp)
  807794:	10800324 	muli	r2,r2,12
  807798:	1007883a 	mov	r3,r2
  80779c:	00802074 	movhi	r2,129
  8077a0:	10b08504 	addi	r2,r2,-15852
  8077a4:	1887883a 	add	r3,r3,r2
  8077a8:	e0bffe17 	ldw	r2,-8(fp)
  8077ac:	18800326 	beq	r3,r2,8077bc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8077b0:	00bffcc4 	movi	r2,-13
  8077b4:	e0bfff15 	stw	r2,-4(fp)
  8077b8:	00000a06 	br	8077e4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8077bc:	e0bffd17 	ldw	r2,-12(fp)
  8077c0:	10800044 	addi	r2,r2,1
  8077c4:	e0bffd15 	stw	r2,-12(fp)
  8077c8:	00802074 	movhi	r2,129
  8077cc:	10b58004 	addi	r2,r2,-10752
  8077d0:	10800017 	ldw	r2,0(r2)
  8077d4:	1007883a 	mov	r3,r2
  8077d8:	e0bffd17 	ldw	r2,-12(fp)
  8077dc:	18bfda2e 	bgeu	r3,r2,807748 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8077e0:	e03fff15 	stw	zero,-4(fp)
  8077e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8077e8:	e037883a 	mov	sp,fp
  8077ec:	df000017 	ldw	fp,0(sp)
  8077f0:	dec00104 	addi	sp,sp,4
  8077f4:	f800283a 	ret

008077f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8077f8:	defff404 	addi	sp,sp,-48
  8077fc:	dfc00b15 	stw	ra,44(sp)
  807800:	df000a15 	stw	fp,40(sp)
  807804:	df000a04 	addi	fp,sp,40
  807808:	e13ffb15 	stw	r4,-20(fp)
  80780c:	e17ffc15 	stw	r5,-16(fp)
  807810:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  807814:	00bfffc4 	movi	r2,-1
  807818:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80781c:	00bffb44 	movi	r2,-19
  807820:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  807824:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  807828:	e13ffb17 	ldw	r4,-20(fp)
  80782c:	01402074 	movhi	r5,129
  807830:	29757e04 	addi	r5,r5,-10760
  807834:	080a75c0 	call	80a75c <alt_find_dev>
  807838:	e0bffa15 	stw	r2,-24(fp)
  80783c:	e0bffa17 	ldw	r2,-24(fp)
  807840:	1004c03a 	cmpne	r2,r2,zero
  807844:	1000051e 	bne	r2,zero,80785c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  807848:	e13ffb17 	ldw	r4,-20(fp)
  80784c:	080a7f00 	call	80a7f0 <alt_find_file>
  807850:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  807854:	00800044 	movi	r2,1
  807858:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80785c:	e0bffa17 	ldw	r2,-24(fp)
  807860:	1005003a 	cmpeq	r2,r2,zero
  807864:	1000301e 	bne	r2,zero,807928 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  807868:	e13ffa17 	ldw	r4,-24(fp)
  80786c:	080a9100 	call	80a910 <alt_get_fd>
  807870:	e0bff815 	stw	r2,-32(fp)
  807874:	e0bff817 	ldw	r2,-32(fp)
  807878:	1004403a 	cmpge	r2,r2,zero
  80787c:	1000031e 	bne	r2,zero,80788c <open+0x94>
    {
      status = index;
  807880:	e0bff817 	ldw	r2,-32(fp)
  807884:	e0bff715 	stw	r2,-36(fp)
  807888:	00002906 	br	807930 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80788c:	e0bff817 	ldw	r2,-32(fp)
  807890:	10800324 	muli	r2,r2,12
  807894:	1007883a 	mov	r3,r2
  807898:	00802074 	movhi	r2,129
  80789c:	10b08504 	addi	r2,r2,-15852
  8078a0:	1885883a 	add	r2,r3,r2
  8078a4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8078a8:	e0fffc17 	ldw	r3,-16(fp)
  8078ac:	00900034 	movhi	r2,16384
  8078b0:	10bfffc4 	addi	r2,r2,-1
  8078b4:	1886703a 	and	r3,r3,r2
  8078b8:	e0bff917 	ldw	r2,-28(fp)
  8078bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8078c0:	e0bff617 	ldw	r2,-40(fp)
  8078c4:	1004c03a 	cmpne	r2,r2,zero
  8078c8:	1000061e 	bne	r2,zero,8078e4 <open+0xec>
  8078cc:	e13ff917 	ldw	r4,-28(fp)
  8078d0:	080771c0 	call	80771c <alt_file_locked>
  8078d4:	e0bff715 	stw	r2,-36(fp)
  8078d8:	e0bff717 	ldw	r2,-36(fp)
  8078dc:	1004803a 	cmplt	r2,r2,zero
  8078e0:	1000131e 	bne	r2,zero,807930 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8078e4:	e0bffa17 	ldw	r2,-24(fp)
  8078e8:	10800317 	ldw	r2,12(r2)
  8078ec:	1005003a 	cmpeq	r2,r2,zero
  8078f0:	1000091e 	bne	r2,zero,807918 <open+0x120>
  8078f4:	e0bffa17 	ldw	r2,-24(fp)
  8078f8:	10800317 	ldw	r2,12(r2)
  8078fc:	e13ff917 	ldw	r4,-28(fp)
  807900:	e17ffb17 	ldw	r5,-20(fp)
  807904:	e1bffc17 	ldw	r6,-16(fp)
  807908:	e1fffd17 	ldw	r7,-12(fp)
  80790c:	103ee83a 	callr	r2
  807910:	e0bfff15 	stw	r2,-4(fp)
  807914:	00000106 	br	80791c <open+0x124>
  807918:	e03fff15 	stw	zero,-4(fp)
  80791c:	e0bfff17 	ldw	r2,-4(fp)
  807920:	e0bff715 	stw	r2,-36(fp)
  807924:	00000206 	br	807930 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  807928:	00bffb44 	movi	r2,-19
  80792c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  807930:	e0bff717 	ldw	r2,-36(fp)
  807934:	1004403a 	cmpge	r2,r2,zero
  807938:	1000091e 	bne	r2,zero,807960 <open+0x168>
  {
    alt_release_fd (index);  
  80793c:	e13ff817 	ldw	r4,-32(fp)
  807940:	0807b600 	call	807b60 <alt_release_fd>
    ALT_ERRNO = -status;
  807944:	08079800 	call	807980 <alt_get_errno>
  807948:	e0fff717 	ldw	r3,-36(fp)
  80794c:	00c7c83a 	sub	r3,zero,r3
  807950:	10c00015 	stw	r3,0(r2)
    return -1;
  807954:	00bfffc4 	movi	r2,-1
  807958:	e0bffe15 	stw	r2,-8(fp)
  80795c:	00000206 	br	807968 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  807960:	e0bff817 	ldw	r2,-32(fp)
  807964:	e0bffe15 	stw	r2,-8(fp)
  807968:	e0bffe17 	ldw	r2,-8(fp)
}
  80796c:	e037883a 	mov	sp,fp
  807970:	dfc00117 	ldw	ra,4(sp)
  807974:	df000017 	ldw	fp,0(sp)
  807978:	dec00204 	addi	sp,sp,8
  80797c:	f800283a 	ret

00807980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807980:	defffd04 	addi	sp,sp,-12
  807984:	dfc00215 	stw	ra,8(sp)
  807988:	df000115 	stw	fp,4(sp)
  80798c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807990:	00802074 	movhi	r2,129
  807994:	10b58104 	addi	r2,r2,-10748
  807998:	10800017 	ldw	r2,0(r2)
  80799c:	1005003a 	cmpeq	r2,r2,zero
  8079a0:	1000061e 	bne	r2,zero,8079bc <alt_get_errno+0x3c>
  8079a4:	00802074 	movhi	r2,129
  8079a8:	10b58104 	addi	r2,r2,-10748
  8079ac:	10800017 	ldw	r2,0(r2)
  8079b0:	103ee83a 	callr	r2
  8079b4:	e0bfff15 	stw	r2,-4(fp)
  8079b8:	00000306 	br	8079c8 <alt_get_errno+0x48>
  8079bc:	00802074 	movhi	r2,129
  8079c0:	10bcf804 	addi	r2,r2,-3104
  8079c4:	e0bfff15 	stw	r2,-4(fp)
  8079c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8079cc:	e037883a 	mov	sp,fp
  8079d0:	dfc00117 	ldw	ra,4(sp)
  8079d4:	df000017 	ldw	fp,0(sp)
  8079d8:	dec00204 	addi	sp,sp,8
  8079dc:	f800283a 	ret

008079e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8079e0:	defff704 	addi	sp,sp,-36
  8079e4:	dfc00815 	stw	ra,32(sp)
  8079e8:	df000715 	stw	fp,28(sp)
  8079ec:	df000704 	addi	fp,sp,28
  8079f0:	e13ffb15 	stw	r4,-20(fp)
  8079f4:	e17ffc15 	stw	r5,-16(fp)
  8079f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8079fc:	e0bffb17 	ldw	r2,-20(fp)
  807a00:	1004803a 	cmplt	r2,r2,zero
  807a04:	1000081e 	bne	r2,zero,807a28 <read+0x48>
  807a08:	e0bffb17 	ldw	r2,-20(fp)
  807a0c:	10800324 	muli	r2,r2,12
  807a10:	1007883a 	mov	r3,r2
  807a14:	00802074 	movhi	r2,129
  807a18:	10b08504 	addi	r2,r2,-15852
  807a1c:	1887883a 	add	r3,r3,r2
  807a20:	e0ffff15 	stw	r3,-4(fp)
  807a24:	00000106 	br	807a2c <read+0x4c>
  807a28:	e03fff15 	stw	zero,-4(fp)
  807a2c:	e0bfff17 	ldw	r2,-4(fp)
  807a30:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  807a34:	e0bffa17 	ldw	r2,-24(fp)
  807a38:	1005003a 	cmpeq	r2,r2,zero
  807a3c:	1000241e 	bne	r2,zero,807ad0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  807a40:	e0bffa17 	ldw	r2,-24(fp)
  807a44:	10800217 	ldw	r2,8(r2)
  807a48:	108000cc 	andi	r2,r2,3
  807a4c:	10800060 	cmpeqi	r2,r2,1
  807a50:	10001a1e 	bne	r2,zero,807abc <read+0xdc>
  807a54:	e0bffa17 	ldw	r2,-24(fp)
  807a58:	10800017 	ldw	r2,0(r2)
  807a5c:	10800517 	ldw	r2,20(r2)
  807a60:	1005003a 	cmpeq	r2,r2,zero
  807a64:	1000151e 	bne	r2,zero,807abc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  807a68:	e0bffa17 	ldw	r2,-24(fp)
  807a6c:	10800017 	ldw	r2,0(r2)
  807a70:	10800517 	ldw	r2,20(r2)
  807a74:	e17ffc17 	ldw	r5,-16(fp)
  807a78:	e1bffd17 	ldw	r6,-12(fp)
  807a7c:	e13ffa17 	ldw	r4,-24(fp)
  807a80:	103ee83a 	callr	r2
  807a84:	e0bff915 	stw	r2,-28(fp)
  807a88:	e0bff917 	ldw	r2,-28(fp)
  807a8c:	1004403a 	cmpge	r2,r2,zero
  807a90:	1000071e 	bne	r2,zero,807ab0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  807a94:	0807b000 	call	807b00 <alt_get_errno>
  807a98:	e0fff917 	ldw	r3,-28(fp)
  807a9c:	00c7c83a 	sub	r3,zero,r3
  807aa0:	10c00015 	stw	r3,0(r2)
          return -1;
  807aa4:	00bfffc4 	movi	r2,-1
  807aa8:	e0bffe15 	stw	r2,-8(fp)
  807aac:	00000e06 	br	807ae8 <read+0x108>
        }
        return rval;
  807ab0:	e0bff917 	ldw	r2,-28(fp)
  807ab4:	e0bffe15 	stw	r2,-8(fp)
  807ab8:	00000b06 	br	807ae8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  807abc:	0807b000 	call	807b00 <alt_get_errno>
  807ac0:	1007883a 	mov	r3,r2
  807ac4:	00800344 	movi	r2,13
  807ac8:	18800015 	stw	r2,0(r3)
  807acc:	00000406 	br	807ae0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  807ad0:	0807b000 	call	807b00 <alt_get_errno>
  807ad4:	1007883a 	mov	r3,r2
  807ad8:	00801444 	movi	r2,81
  807adc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  807ae0:	00bfffc4 	movi	r2,-1
  807ae4:	e0bffe15 	stw	r2,-8(fp)
  807ae8:	e0bffe17 	ldw	r2,-8(fp)
}
  807aec:	e037883a 	mov	sp,fp
  807af0:	dfc00117 	ldw	ra,4(sp)
  807af4:	df000017 	ldw	fp,0(sp)
  807af8:	dec00204 	addi	sp,sp,8
  807afc:	f800283a 	ret

00807b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807b00:	defffd04 	addi	sp,sp,-12
  807b04:	dfc00215 	stw	ra,8(sp)
  807b08:	df000115 	stw	fp,4(sp)
  807b0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807b10:	00802074 	movhi	r2,129
  807b14:	10b58104 	addi	r2,r2,-10748
  807b18:	10800017 	ldw	r2,0(r2)
  807b1c:	1005003a 	cmpeq	r2,r2,zero
  807b20:	1000061e 	bne	r2,zero,807b3c <alt_get_errno+0x3c>
  807b24:	00802074 	movhi	r2,129
  807b28:	10b58104 	addi	r2,r2,-10748
  807b2c:	10800017 	ldw	r2,0(r2)
  807b30:	103ee83a 	callr	r2
  807b34:	e0bfff15 	stw	r2,-4(fp)
  807b38:	00000306 	br	807b48 <alt_get_errno+0x48>
  807b3c:	00802074 	movhi	r2,129
  807b40:	10bcf804 	addi	r2,r2,-3104
  807b44:	e0bfff15 	stw	r2,-4(fp)
  807b48:	e0bfff17 	ldw	r2,-4(fp)
}
  807b4c:	e037883a 	mov	sp,fp
  807b50:	dfc00117 	ldw	ra,4(sp)
  807b54:	df000017 	ldw	fp,0(sp)
  807b58:	dec00204 	addi	sp,sp,8
  807b5c:	f800283a 	ret

00807b60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  807b60:	defffe04 	addi	sp,sp,-8
  807b64:	df000115 	stw	fp,4(sp)
  807b68:	df000104 	addi	fp,sp,4
  807b6c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  807b70:	e0bfff17 	ldw	r2,-4(fp)
  807b74:	108000d0 	cmplti	r2,r2,3
  807b78:	10000d1e 	bne	r2,zero,807bb0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  807b7c:	e0bfff17 	ldw	r2,-4(fp)
  807b80:	00c02074 	movhi	r3,129
  807b84:	18f08504 	addi	r3,r3,-15852
  807b88:	10800324 	muli	r2,r2,12
  807b8c:	10c5883a 	add	r2,r2,r3
  807b90:	10800204 	addi	r2,r2,8
  807b94:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  807b98:	e0bfff17 	ldw	r2,-4(fp)
  807b9c:	00c02074 	movhi	r3,129
  807ba0:	18f08504 	addi	r3,r3,-15852
  807ba4:	10800324 	muli	r2,r2,12
  807ba8:	10c5883a 	add	r2,r2,r3
  807bac:	10000015 	stw	zero,0(r2)
  }
}
  807bb0:	e037883a 	mov	sp,fp
  807bb4:	df000017 	ldw	fp,0(sp)
  807bb8:	dec00104 	addi	sp,sp,4
  807bbc:	f800283a 	ret

00807bc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  807bc0:	defff804 	addi	sp,sp,-32
  807bc4:	df000715 	stw	fp,28(sp)
  807bc8:	df000704 	addi	fp,sp,28
  807bcc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807bd0:	0005303a 	rdctl	r2,status
  807bd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807bd8:	e0fffb17 	ldw	r3,-20(fp)
  807bdc:	00bfff84 	movi	r2,-2
  807be0:	1884703a 	and	r2,r3,r2
  807be4:	1001703a 	wrctl	status,r2
  
  return context;
  807be8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  807bec:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807bf0:	d0a00d17 	ldw	r2,-32716(gp)
  807bf4:	10c000c4 	addi	r3,r2,3
  807bf8:	00bfff04 	movi	r2,-4
  807bfc:	1884703a 	and	r2,r3,r2
  807c00:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807c04:	d0e00d17 	ldw	r3,-32716(gp)
  807c08:	e0bffe17 	ldw	r2,-8(fp)
  807c0c:	1887883a 	add	r3,r3,r2
  807c10:	00804034 	movhi	r2,256
  807c14:	10800004 	addi	r2,r2,0
  807c18:	10c0072e 	bgeu	r2,r3,807c38 <sbrk+0x78>
  807c1c:	e0bffd17 	ldw	r2,-12(fp)
  807c20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c24:	e0bffa17 	ldw	r2,-24(fp)
  807c28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  807c2c:	00bfffc4 	movi	r2,-1
  807c30:	e0bfff15 	stw	r2,-4(fp)
  807c34:	00000c06 	br	807c68 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  807c38:	d0a00d17 	ldw	r2,-32716(gp)
  807c3c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  807c40:	d0e00d17 	ldw	r3,-32716(gp)
  807c44:	e0bffe17 	ldw	r2,-8(fp)
  807c48:	1885883a 	add	r2,r3,r2
  807c4c:	d0a00d15 	stw	r2,-32716(gp)
  807c50:	e0bffd17 	ldw	r2,-12(fp)
  807c54:	e0bff915 	stw	r2,-28(fp)
  807c58:	e0bff917 	ldw	r2,-28(fp)
  807c5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  807c60:	e0bffc17 	ldw	r2,-16(fp)
  807c64:	e0bfff15 	stw	r2,-4(fp)
  807c68:	e0bfff17 	ldw	r2,-4(fp)
} 
  807c6c:	e037883a 	mov	sp,fp
  807c70:	df000017 	ldw	fp,0(sp)
  807c74:	dec00104 	addi	sp,sp,4
  807c78:	f800283a 	ret

00807c7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  807c7c:	defffa04 	addi	sp,sp,-24
  807c80:	df000515 	stw	fp,20(sp)
  807c84:	df000504 	addi	fp,sp,20
  807c88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c8c:	0005303a 	rdctl	r2,status
  807c90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c94:	e0fffd17 	ldw	r3,-12(fp)
  807c98:	00bfff84 	movi	r2,-2
  807c9c:	1884703a 	and	r2,r3,r2
  807ca0:	1001703a 	wrctl	status,r2
  
  return context;
  807ca4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  807ca8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  807cac:	e0bfff17 	ldw	r2,-4(fp)
  807cb0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  807cb4:	e0bffc17 	ldw	r2,-16(fp)
  807cb8:	10c00017 	ldw	r3,0(r2)
  807cbc:	e0bffc17 	ldw	r2,-16(fp)
  807cc0:	10800117 	ldw	r2,4(r2)
  807cc4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  807cc8:	e0bffc17 	ldw	r2,-16(fp)
  807ccc:	10c00117 	ldw	r3,4(r2)
  807cd0:	e0bffc17 	ldw	r2,-16(fp)
  807cd4:	10800017 	ldw	r2,0(r2)
  807cd8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  807cdc:	e0fffc17 	ldw	r3,-16(fp)
  807ce0:	e0bffc17 	ldw	r2,-16(fp)
  807ce4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  807ce8:	e0fffc17 	ldw	r3,-16(fp)
  807cec:	e0bffc17 	ldw	r2,-16(fp)
  807cf0:	18800015 	stw	r2,0(r3)
  807cf4:	e0bffe17 	ldw	r2,-8(fp)
  807cf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807cfc:	e0bffb17 	ldw	r2,-20(fp)
  807d00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  807d04:	e037883a 	mov	sp,fp
  807d08:	df000017 	ldw	fp,0(sp)
  807d0c:	dec00104 	addi	sp,sp,4
  807d10:	f800283a 	ret

00807d14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  807d14:	defffb04 	addi	sp,sp,-20
  807d18:	dfc00415 	stw	ra,16(sp)
  807d1c:	df000315 	stw	fp,12(sp)
  807d20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  807d24:	d0a00e17 	ldw	r2,-32712(gp)
  807d28:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  807d2c:	d0a78817 	ldw	r2,-25056(gp)
  807d30:	10800044 	addi	r2,r2,1
  807d34:	d0a78815 	stw	r2,-25056(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  807d38:	00003106 	br	807e00 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  807d3c:	e0bffe17 	ldw	r2,-8(fp)
  807d40:	10800017 	ldw	r2,0(r2)
  807d44:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  807d48:	e0bffe17 	ldw	r2,-8(fp)
  807d4c:	10800403 	ldbu	r2,16(r2)
  807d50:	10803fcc 	andi	r2,r2,255
  807d54:	1005003a 	cmpeq	r2,r2,zero
  807d58:	1000051e 	bne	r2,zero,807d70 <alt_tick+0x5c>
  807d5c:	d0a78817 	ldw	r2,-25056(gp)
  807d60:	1004c03a 	cmpne	r2,r2,zero
  807d64:	1000021e 	bne	r2,zero,807d70 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  807d68:	e0bffe17 	ldw	r2,-8(fp)
  807d6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  807d70:	e0bffe17 	ldw	r2,-8(fp)
  807d74:	10c00217 	ldw	r3,8(r2)
  807d78:	d0a78817 	ldw	r2,-25056(gp)
  807d7c:	10c01e36 	bltu	r2,r3,807df8 <alt_tick+0xe4>
  807d80:	e0bffe17 	ldw	r2,-8(fp)
  807d84:	10800403 	ldbu	r2,16(r2)
  807d88:	10803fcc 	andi	r2,r2,255
  807d8c:	1004c03a 	cmpne	r2,r2,zero
  807d90:	1000191e 	bne	r2,zero,807df8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  807d94:	e0bffe17 	ldw	r2,-8(fp)
  807d98:	10c00317 	ldw	r3,12(r2)
  807d9c:	e0bffe17 	ldw	r2,-8(fp)
  807da0:	11000517 	ldw	r4,20(r2)
  807da4:	183ee83a 	callr	r3
  807da8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  807dac:	e0bffd17 	ldw	r2,-12(fp)
  807db0:	1004c03a 	cmpne	r2,r2,zero
  807db4:	1000031e 	bne	r2,zero,807dc4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  807db8:	e13ffe17 	ldw	r4,-8(fp)
  807dbc:	0807c7c0 	call	807c7c <alt_alarm_stop>
  807dc0:	00000d06 	br	807df8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  807dc4:	e0bffe17 	ldw	r2,-8(fp)
  807dc8:	10c00217 	ldw	r3,8(r2)
  807dcc:	e0bffd17 	ldw	r2,-12(fp)
  807dd0:	1887883a 	add	r3,r3,r2
  807dd4:	e0bffe17 	ldw	r2,-8(fp)
  807dd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807ddc:	e0bffe17 	ldw	r2,-8(fp)
  807de0:	10c00217 	ldw	r3,8(r2)
  807de4:	d0a78817 	ldw	r2,-25056(gp)
  807de8:	1880032e 	bgeu	r3,r2,807df8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  807dec:	e0fffe17 	ldw	r3,-8(fp)
  807df0:	00800044 	movi	r2,1
  807df4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  807df8:	e0bfff17 	ldw	r2,-4(fp)
  807dfc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  807e00:	d0e00e04 	addi	r3,gp,-32712
  807e04:	e0bffe17 	ldw	r2,-8(fp)
  807e08:	10ffcc1e 	bne	r2,r3,807d3c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  807e0c:	e037883a 	mov	sp,fp
  807e10:	dfc00117 	ldw	ra,4(sp)
  807e14:	df000017 	ldw	fp,0(sp)
  807e18:	dec00204 	addi	sp,sp,8
  807e1c:	f800283a 	ret

00807e20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  807e20:	defff704 	addi	sp,sp,-36
  807e24:	dfc00815 	stw	ra,32(sp)
  807e28:	df000715 	stw	fp,28(sp)
  807e2c:	df000704 	addi	fp,sp,28
  807e30:	e13ffb15 	stw	r4,-20(fp)
  807e34:	e17ffc15 	stw	r5,-16(fp)
  807e38:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807e3c:	e0bffb17 	ldw	r2,-20(fp)
  807e40:	1004803a 	cmplt	r2,r2,zero
  807e44:	1000081e 	bne	r2,zero,807e68 <write+0x48>
  807e48:	e0bffb17 	ldw	r2,-20(fp)
  807e4c:	10800324 	muli	r2,r2,12
  807e50:	1007883a 	mov	r3,r2
  807e54:	00802074 	movhi	r2,129
  807e58:	10b08504 	addi	r2,r2,-15852
  807e5c:	1887883a 	add	r3,r3,r2
  807e60:	e0ffff15 	stw	r3,-4(fp)
  807e64:	00000106 	br	807e6c <write+0x4c>
  807e68:	e03fff15 	stw	zero,-4(fp)
  807e6c:	e0bfff17 	ldw	r2,-4(fp)
  807e70:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  807e74:	e0bffa17 	ldw	r2,-24(fp)
  807e78:	1005003a 	cmpeq	r2,r2,zero
  807e7c:	1000241e 	bne	r2,zero,807f10 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  807e80:	e0bffa17 	ldw	r2,-24(fp)
  807e84:	10800217 	ldw	r2,8(r2)
  807e88:	108000cc 	andi	r2,r2,3
  807e8c:	1005003a 	cmpeq	r2,r2,zero
  807e90:	10001a1e 	bne	r2,zero,807efc <write+0xdc>
  807e94:	e0bffa17 	ldw	r2,-24(fp)
  807e98:	10800017 	ldw	r2,0(r2)
  807e9c:	10800617 	ldw	r2,24(r2)
  807ea0:	1005003a 	cmpeq	r2,r2,zero
  807ea4:	1000151e 	bne	r2,zero,807efc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  807ea8:	e0bffa17 	ldw	r2,-24(fp)
  807eac:	10800017 	ldw	r2,0(r2)
  807eb0:	10800617 	ldw	r2,24(r2)
  807eb4:	e17ffc17 	ldw	r5,-16(fp)
  807eb8:	e1bffd17 	ldw	r6,-12(fp)
  807ebc:	e13ffa17 	ldw	r4,-24(fp)
  807ec0:	103ee83a 	callr	r2
  807ec4:	e0bff915 	stw	r2,-28(fp)
  807ec8:	e0bff917 	ldw	r2,-28(fp)
  807ecc:	1004403a 	cmpge	r2,r2,zero
  807ed0:	1000071e 	bne	r2,zero,807ef0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  807ed4:	0807f400 	call	807f40 <alt_get_errno>
  807ed8:	e0fff917 	ldw	r3,-28(fp)
  807edc:	00c7c83a 	sub	r3,zero,r3
  807ee0:	10c00015 	stw	r3,0(r2)
        return -1;
  807ee4:	00bfffc4 	movi	r2,-1
  807ee8:	e0bffe15 	stw	r2,-8(fp)
  807eec:	00000e06 	br	807f28 <write+0x108>
      }
      return rval;
  807ef0:	e0bff917 	ldw	r2,-28(fp)
  807ef4:	e0bffe15 	stw	r2,-8(fp)
  807ef8:	00000b06 	br	807f28 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  807efc:	0807f400 	call	807f40 <alt_get_errno>
  807f00:	1007883a 	mov	r3,r2
  807f04:	00800344 	movi	r2,13
  807f08:	18800015 	stw	r2,0(r3)
  807f0c:	00000406 	br	807f20 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  807f10:	0807f400 	call	807f40 <alt_get_errno>
  807f14:	1007883a 	mov	r3,r2
  807f18:	00801444 	movi	r2,81
  807f1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  807f20:	00bfffc4 	movi	r2,-1
  807f24:	e0bffe15 	stw	r2,-8(fp)
  807f28:	e0bffe17 	ldw	r2,-8(fp)
}
  807f2c:	e037883a 	mov	sp,fp
  807f30:	dfc00117 	ldw	ra,4(sp)
  807f34:	df000017 	ldw	fp,0(sp)
  807f38:	dec00204 	addi	sp,sp,8
  807f3c:	f800283a 	ret

00807f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807f40:	defffd04 	addi	sp,sp,-12
  807f44:	dfc00215 	stw	ra,8(sp)
  807f48:	df000115 	stw	fp,4(sp)
  807f4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807f50:	00802074 	movhi	r2,129
  807f54:	10b58104 	addi	r2,r2,-10748
  807f58:	10800017 	ldw	r2,0(r2)
  807f5c:	1005003a 	cmpeq	r2,r2,zero
  807f60:	1000061e 	bne	r2,zero,807f7c <alt_get_errno+0x3c>
  807f64:	00802074 	movhi	r2,129
  807f68:	10b58104 	addi	r2,r2,-10748
  807f6c:	10800017 	ldw	r2,0(r2)
  807f70:	103ee83a 	callr	r2
  807f74:	e0bfff15 	stw	r2,-4(fp)
  807f78:	00000306 	br	807f88 <alt_get_errno+0x48>
  807f7c:	00802074 	movhi	r2,129
  807f80:	10bcf804 	addi	r2,r2,-3104
  807f84:	e0bfff15 	stw	r2,-4(fp)
  807f88:	e0bfff17 	ldw	r2,-4(fp)
}
  807f8c:	e037883a 	mov	sp,fp
  807f90:	dfc00117 	ldw	ra,4(sp)
  807f94:	df000017 	ldw	fp,0(sp)
  807f98:	dec00204 	addi	sp,sp,8
  807f9c:	f800283a 	ret

00807fa0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807fa0:	defffd04 	addi	sp,sp,-12
  807fa4:	dfc00215 	stw	ra,8(sp)
  807fa8:	df000115 	stw	fp,4(sp)
  807fac:	df000104 	addi	fp,sp,4
  807fb0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  807fb4:	080ae300 	call	80ae30 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807fb8:	00800044 	movi	r2,1
  807fbc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807fc0:	e037883a 	mov	sp,fp
  807fc4:	dfc00117 	ldw	ra,4(sp)
  807fc8:	df000017 	ldw	fp,0(sp)
  807fcc:	dec00204 	addi	sp,sp,8
  807fd0:	f800283a 	ret

00807fd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807fd4:	defffe04 	addi	sp,sp,-8
  807fd8:	dfc00115 	stw	ra,4(sp)
  807fdc:	df000015 	stw	fp,0(sp)
  807fe0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  807fe4:	01004074 	movhi	r4,257
  807fe8:	21040804 	addi	r4,r4,4128
  807fec:	000b883a 	mov	r5,zero
  807ff0:	01800084 	movi	r6,2
  807ff4:	01c0fa04 	movi	r7,1000
  807ff8:	0809afc0 	call	809afc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807ffc:	01002074 	movhi	r4,129
  808000:	2130ef04 	addi	r4,r4,-15428
  808004:	000b883a 	mov	r5,zero
  808008:	01800044 	movi	r6,1
  80800c:	08081e80 	call	8081e8 <altera_avalon_jtag_uart_init>
  808010:	01002074 	movhi	r4,129
  808014:	2130e504 	addi	r4,r4,-15468
  808018:	08080680 	call	808068 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80801c:	01002074 	movhi	r4,129
  808020:	21350704 	addi	r4,r4,-11236
  808024:	08098f80 	call	8098f8 <altera_avalon_lcd_16207_init>
  808028:	01002074 	movhi	r4,129
  80802c:	2134fd04 	addi	r4,r4,-11276
  808030:	08080680 	call	808068 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  808034:	01002074 	movhi	r4,129
  808038:	21354f04 	addi	r4,r4,-10948
  80803c:	000b883a 	mov	r5,zero
  808040:	000d883a 	mov	r6,zero
  808044:	0809c840 	call	809c84 <altera_avalon_uart_init>
  808048:	01002074 	movhi	r4,129
  80804c:	21354504 	addi	r4,r4,-10988
  808050:	08080680 	call	808068 <alt_dev_reg>
}
  808054:	e037883a 	mov	sp,fp
  808058:	dfc00117 	ldw	ra,4(sp)
  80805c:	df000017 	ldw	fp,0(sp)
  808060:	dec00204 	addi	sp,sp,8
  808064:	f800283a 	ret

00808068 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  808068:	defffd04 	addi	sp,sp,-12
  80806c:	dfc00215 	stw	ra,8(sp)
  808070:	df000115 	stw	fp,4(sp)
  808074:	df000104 	addi	fp,sp,4
  808078:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80807c:	e13fff17 	ldw	r4,-4(fp)
  808080:	01402074 	movhi	r5,129
  808084:	29757e04 	addi	r5,r5,-10760
  808088:	080a5800 	call	80a580 <alt_dev_llist_insert>
}
  80808c:	e037883a 	mov	sp,fp
  808090:	dfc00117 	ldw	ra,4(sp)
  808094:	df000017 	ldw	fp,0(sp)
  808098:	dec00204 	addi	sp,sp,8
  80809c:	f800283a 	ret

008080a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8080a0:	defffa04 	addi	sp,sp,-24
  8080a4:	dfc00515 	stw	ra,20(sp)
  8080a8:	df000415 	stw	fp,16(sp)
  8080ac:	df000404 	addi	fp,sp,16
  8080b0:	e13ffd15 	stw	r4,-12(fp)
  8080b4:	e17ffe15 	stw	r5,-8(fp)
  8080b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8080bc:	e0bffd17 	ldw	r2,-12(fp)
  8080c0:	10800017 	ldw	r2,0(r2)
  8080c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8080c8:	e0bffc17 	ldw	r2,-16(fp)
  8080cc:	11000a04 	addi	r4,r2,40
  8080d0:	e0bffd17 	ldw	r2,-12(fp)
  8080d4:	11c00217 	ldw	r7,8(r2)
  8080d8:	e17ffe17 	ldw	r5,-8(fp)
  8080dc:	e1bfff17 	ldw	r6,-4(fp)
  8080e0:	08086e80 	call	8086e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8080e4:	e037883a 	mov	sp,fp
  8080e8:	dfc00117 	ldw	ra,4(sp)
  8080ec:	df000017 	ldw	fp,0(sp)
  8080f0:	dec00204 	addi	sp,sp,8
  8080f4:	f800283a 	ret

008080f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8080f8:	defffa04 	addi	sp,sp,-24
  8080fc:	dfc00515 	stw	ra,20(sp)
  808100:	df000415 	stw	fp,16(sp)
  808104:	df000404 	addi	fp,sp,16
  808108:	e13ffd15 	stw	r4,-12(fp)
  80810c:	e17ffe15 	stw	r5,-8(fp)
  808110:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808114:	e0bffd17 	ldw	r2,-12(fp)
  808118:	10800017 	ldw	r2,0(r2)
  80811c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  808120:	e0bffc17 	ldw	r2,-16(fp)
  808124:	11000a04 	addi	r4,r2,40
  808128:	e0bffd17 	ldw	r2,-12(fp)
  80812c:	11c00217 	ldw	r7,8(r2)
  808130:	e17ffe17 	ldw	r5,-8(fp)
  808134:	e1bfff17 	ldw	r6,-4(fp)
  808138:	080890c0 	call	80890c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80813c:	e037883a 	mov	sp,fp
  808140:	dfc00117 	ldw	ra,4(sp)
  808144:	df000017 	ldw	fp,0(sp)
  808148:	dec00204 	addi	sp,sp,8
  80814c:	f800283a 	ret

00808150 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  808150:	defffc04 	addi	sp,sp,-16
  808154:	dfc00315 	stw	ra,12(sp)
  808158:	df000215 	stw	fp,8(sp)
  80815c:	df000204 	addi	fp,sp,8
  808160:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808164:	e0bfff17 	ldw	r2,-4(fp)
  808168:	10800017 	ldw	r2,0(r2)
  80816c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  808170:	e0bffe17 	ldw	r2,-8(fp)
  808174:	11000a04 	addi	r4,r2,40
  808178:	e0bfff17 	ldw	r2,-4(fp)
  80817c:	11400217 	ldw	r5,8(r2)
  808180:	08085800 	call	808580 <altera_avalon_jtag_uart_close>
}
  808184:	e037883a 	mov	sp,fp
  808188:	dfc00117 	ldw	ra,4(sp)
  80818c:	df000017 	ldw	fp,0(sp)
  808190:	dec00204 	addi	sp,sp,8
  808194:	f800283a 	ret

00808198 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  808198:	defffa04 	addi	sp,sp,-24
  80819c:	dfc00515 	stw	ra,20(sp)
  8081a0:	df000415 	stw	fp,16(sp)
  8081a4:	df000404 	addi	fp,sp,16
  8081a8:	e13ffd15 	stw	r4,-12(fp)
  8081ac:	e17ffe15 	stw	r5,-8(fp)
  8081b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8081b4:	e0bffd17 	ldw	r2,-12(fp)
  8081b8:	10800017 	ldw	r2,0(r2)
  8081bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8081c0:	e0bffc17 	ldw	r2,-16(fp)
  8081c4:	11000a04 	addi	r4,r2,40
  8081c8:	e17ffe17 	ldw	r5,-8(fp)
  8081cc:	e1bfff17 	ldw	r6,-4(fp)
  8081d0:	08085f40 	call	8085f4 <altera_avalon_jtag_uart_ioctl>
}
  8081d4:	e037883a 	mov	sp,fp
  8081d8:	dfc00117 	ldw	ra,4(sp)
  8081dc:	df000017 	ldw	fp,0(sp)
  8081e0:	dec00204 	addi	sp,sp,8
  8081e4:	f800283a 	ret

008081e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8081e8:	defffa04 	addi	sp,sp,-24
  8081ec:	dfc00515 	stw	ra,20(sp)
  8081f0:	df000415 	stw	fp,16(sp)
  8081f4:	df000404 	addi	fp,sp,16
  8081f8:	e13ffd15 	stw	r4,-12(fp)
  8081fc:	e17ffe15 	stw	r5,-8(fp)
  808200:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808204:	e0fffd17 	ldw	r3,-12(fp)
  808208:	00800044 	movi	r2,1
  80820c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  808210:	e0bffd17 	ldw	r2,-12(fp)
  808214:	10800017 	ldw	r2,0(r2)
  808218:	11000104 	addi	r4,r2,4
  80821c:	e0bffd17 	ldw	r2,-12(fp)
  808220:	10800817 	ldw	r2,32(r2)
  808224:	1007883a 	mov	r3,r2
  808228:	2005883a 	mov	r2,r4
  80822c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  808230:	e13ffe17 	ldw	r4,-8(fp)
  808234:	e17fff17 	ldw	r5,-4(fp)
  808238:	d8000015 	stw	zero,0(sp)
  80823c:	01802074 	movhi	r6,129
  808240:	31a0aa04 	addi	r6,r6,-32088
  808244:	e1fffd17 	ldw	r7,-12(fp)
  808248:	080a9f80 	call	80a9f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80824c:	e0bffd17 	ldw	r2,-12(fp)
  808250:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  808254:	e0bffd17 	ldw	r2,-12(fp)
  808258:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80825c:	00802074 	movhi	r2,129
  808260:	10bcfd04 	addi	r2,r2,-3084
  808264:	10800017 	ldw	r2,0(r2)
  808268:	100b883a 	mov	r5,r2
  80826c:	01802074 	movhi	r6,129
  808270:	31a13404 	addi	r6,r6,-31536
  808274:	e1fffd17 	ldw	r7,-12(fp)
  808278:	0806d440 	call	806d44 <alt_alarm_start>
  80827c:	1004403a 	cmpge	r2,r2,zero
  808280:	1000041e 	bne	r2,zero,808294 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  808284:	e0fffd17 	ldw	r3,-12(fp)
  808288:	00a00034 	movhi	r2,32768
  80828c:	10bfffc4 	addi	r2,r2,-1
  808290:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  808294:	e037883a 	mov	sp,fp
  808298:	dfc00117 	ldw	ra,4(sp)
  80829c:	df000017 	ldw	fp,0(sp)
  8082a0:	dec00204 	addi	sp,sp,8
  8082a4:	f800283a 	ret

008082a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8082a8:	defff804 	addi	sp,sp,-32
  8082ac:	df000715 	stw	fp,28(sp)
  8082b0:	df000704 	addi	fp,sp,28
  8082b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8082b8:	e0bfff17 	ldw	r2,-4(fp)
  8082bc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  8082c0:	e0bffe17 	ldw	r2,-8(fp)
  8082c4:	10800017 	ldw	r2,0(r2)
  8082c8:	e0bffd15 	stw	r2,-12(fp)
  8082cc:	00000006 	br	8082d0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8082d0:	e0bffd17 	ldw	r2,-12(fp)
  8082d4:	10800104 	addi	r2,r2,4
  8082d8:	10800037 	ldwio	r2,0(r2)
  8082dc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8082e0:	e0bffc17 	ldw	r2,-16(fp)
  8082e4:	1080c00c 	andi	r2,r2,768
  8082e8:	1005003a 	cmpeq	r2,r2,zero
  8082ec:	1000741e 	bne	r2,zero,8084c0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8082f0:	e0bffc17 	ldw	r2,-16(fp)
  8082f4:	1080400c 	andi	r2,r2,256
  8082f8:	1005003a 	cmpeq	r2,r2,zero
  8082fc:	1000351e 	bne	r2,zero,8083d4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  808300:	00800074 	movhi	r2,1
  808304:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808308:	e0bffe17 	ldw	r2,-8(fp)
  80830c:	10800a17 	ldw	r2,40(r2)
  808310:	10800044 	addi	r2,r2,1
  808314:	1081ffcc 	andi	r2,r2,2047
  808318:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80831c:	e0bffe17 	ldw	r2,-8(fp)
  808320:	10c00b17 	ldw	r3,44(r2)
  808324:	e0bffa17 	ldw	r2,-24(fp)
  808328:	18801626 	beq	r3,r2,808384 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80832c:	e0bffd17 	ldw	r2,-12(fp)
  808330:	10800037 	ldwio	r2,0(r2)
  808334:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  808338:	e0bffb17 	ldw	r2,-20(fp)
  80833c:	10a0000c 	andi	r2,r2,32768
  808340:	1005003a 	cmpeq	r2,r2,zero
  808344:	10000f1e 	bne	r2,zero,808384 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  808348:	e0bffe17 	ldw	r2,-8(fp)
  80834c:	10c00a17 	ldw	r3,40(r2)
  808350:	e0bffb17 	ldw	r2,-20(fp)
  808354:	1009883a 	mov	r4,r2
  808358:	e0bffe17 	ldw	r2,-8(fp)
  80835c:	1885883a 	add	r2,r3,r2
  808360:	10800e04 	addi	r2,r2,56
  808364:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808368:	e0bffe17 	ldw	r2,-8(fp)
  80836c:	10800a17 	ldw	r2,40(r2)
  808370:	10800044 	addi	r2,r2,1
  808374:	10c1ffcc 	andi	r3,r2,2047
  808378:	e0bffe17 	ldw	r2,-8(fp)
  80837c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  808380:	003fe106 	br	808308 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  808384:	e0bffb17 	ldw	r2,-20(fp)
  808388:	10bfffec 	andhi	r2,r2,65535
  80838c:	1005003a 	cmpeq	r2,r2,zero
  808390:	1000101e 	bne	r2,zero,8083d4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808394:	e0bffe17 	ldw	r2,-8(fp)
  808398:	10c00817 	ldw	r3,32(r2)
  80839c:	00bfff84 	movi	r2,-2
  8083a0:	1886703a 	and	r3,r3,r2
  8083a4:	e0bffe17 	ldw	r2,-8(fp)
  8083a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8083ac:	e0bffd17 	ldw	r2,-12(fp)
  8083b0:	11000104 	addi	r4,r2,4
  8083b4:	e0bffe17 	ldw	r2,-8(fp)
  8083b8:	10800817 	ldw	r2,32(r2)
  8083bc:	1007883a 	mov	r3,r2
  8083c0:	2005883a 	mov	r2,r4
  8083c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8083c8:	e0bffd17 	ldw	r2,-12(fp)
  8083cc:	10800104 	addi	r2,r2,4
  8083d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8083d4:	e0bffc17 	ldw	r2,-16(fp)
  8083d8:	1080800c 	andi	r2,r2,512
  8083dc:	1005003a 	cmpeq	r2,r2,zero
  8083e0:	103fbb1e 	bne	r2,zero,8082d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8083e4:	e0bffc17 	ldw	r2,-16(fp)
  8083e8:	10bfffec 	andhi	r2,r2,65535
  8083ec:	1004d43a 	srli	r2,r2,16
  8083f0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8083f4:	00001506 	br	80844c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8083f8:	e13ffd17 	ldw	r4,-12(fp)
  8083fc:	e0bffe17 	ldw	r2,-8(fp)
  808400:	10c00d17 	ldw	r3,52(r2)
  808404:	e0bffe17 	ldw	r2,-8(fp)
  808408:	1885883a 	add	r2,r3,r2
  80840c:	10820e04 	addi	r2,r2,2104
  808410:	10800003 	ldbu	r2,0(r2)
  808414:	10c03fcc 	andi	r3,r2,255
  808418:	18c0201c 	xori	r3,r3,128
  80841c:	18ffe004 	addi	r3,r3,-128
  808420:	2005883a 	mov	r2,r4
  808424:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808428:	e0bffe17 	ldw	r2,-8(fp)
  80842c:	10800d17 	ldw	r2,52(r2)
  808430:	10800044 	addi	r2,r2,1
  808434:	10c1ffcc 	andi	r3,r2,2047
  808438:	e0bffe17 	ldw	r2,-8(fp)
  80843c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  808440:	e0bff917 	ldw	r2,-28(fp)
  808444:	10bfffc4 	addi	r2,r2,-1
  808448:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80844c:	e0bff917 	ldw	r2,-28(fp)
  808450:	1005003a 	cmpeq	r2,r2,zero
  808454:	1000051e 	bne	r2,zero,80846c <altera_avalon_jtag_uart_irq+0x1c4>
  808458:	e0bffe17 	ldw	r2,-8(fp)
  80845c:	10c00d17 	ldw	r3,52(r2)
  808460:	e0bffe17 	ldw	r2,-8(fp)
  808464:	10800c17 	ldw	r2,48(r2)
  808468:	18bfe31e 	bne	r3,r2,8083f8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80846c:	e0bff917 	ldw	r2,-28(fp)
  808470:	1005003a 	cmpeq	r2,r2,zero
  808474:	103f961e 	bne	r2,zero,8082d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  808478:	e0bffe17 	ldw	r2,-8(fp)
  80847c:	10c00817 	ldw	r3,32(r2)
  808480:	00bfff44 	movi	r2,-3
  808484:	1886703a 	and	r3,r3,r2
  808488:	e0bffe17 	ldw	r2,-8(fp)
  80848c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  808490:	e0bffe17 	ldw	r2,-8(fp)
  808494:	10800017 	ldw	r2,0(r2)
  808498:	11000104 	addi	r4,r2,4
  80849c:	e0bffe17 	ldw	r2,-8(fp)
  8084a0:	10800817 	ldw	r2,32(r2)
  8084a4:	1007883a 	mov	r3,r2
  8084a8:	2005883a 	mov	r2,r4
  8084ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8084b0:	e0bffd17 	ldw	r2,-12(fp)
  8084b4:	10800104 	addi	r2,r2,4
  8084b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8084bc:	003f8406 	br	8082d0 <altera_avalon_jtag_uart_irq+0x28>
}
  8084c0:	e037883a 	mov	sp,fp
  8084c4:	df000017 	ldw	fp,0(sp)
  8084c8:	dec00104 	addi	sp,sp,4
  8084cc:	f800283a 	ret

008084d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8084d0:	defffc04 	addi	sp,sp,-16
  8084d4:	df000315 	stw	fp,12(sp)
  8084d8:	df000304 	addi	fp,sp,12
  8084dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8084e0:	e0bfff17 	ldw	r2,-4(fp)
  8084e4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8084e8:	e0bffe17 	ldw	r2,-8(fp)
  8084ec:	10800017 	ldw	r2,0(r2)
  8084f0:	10800104 	addi	r2,r2,4
  8084f4:	10800037 	ldwio	r2,0(r2)
  8084f8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8084fc:	e0bffd17 	ldw	r2,-12(fp)
  808500:	1081000c 	andi	r2,r2,1024
  808504:	1005003a 	cmpeq	r2,r2,zero
  808508:	10000c1e 	bne	r2,zero,80853c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80850c:	e0bffe17 	ldw	r2,-8(fp)
  808510:	10800017 	ldw	r2,0(r2)
  808514:	11000104 	addi	r4,r2,4
  808518:	e0bffe17 	ldw	r2,-8(fp)
  80851c:	10800817 	ldw	r2,32(r2)
  808520:	10810014 	ori	r2,r2,1024
  808524:	1007883a 	mov	r3,r2
  808528:	2005883a 	mov	r2,r4
  80852c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  808530:	e0bffe17 	ldw	r2,-8(fp)
  808534:	10000915 	stw	zero,36(r2)
  808538:	00000a06 	br	808564 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80853c:	e0bffe17 	ldw	r2,-8(fp)
  808540:	10c00917 	ldw	r3,36(r2)
  808544:	00a00034 	movhi	r2,32768
  808548:	10bfff04 	addi	r2,r2,-4
  80854c:	10c00536 	bltu	r2,r3,808564 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  808550:	e0bffe17 	ldw	r2,-8(fp)
  808554:	10800917 	ldw	r2,36(r2)
  808558:	10c00044 	addi	r3,r2,1
  80855c:	e0bffe17 	ldw	r2,-8(fp)
  808560:	10c00915 	stw	r3,36(r2)
  808564:	00802074 	movhi	r2,129
  808568:	10bcfd04 	addi	r2,r2,-3084
  80856c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  808570:	e037883a 	mov	sp,fp
  808574:	df000017 	ldw	fp,0(sp)
  808578:	dec00104 	addi	sp,sp,4
  80857c:	f800283a 	ret

00808580 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  808580:	defffc04 	addi	sp,sp,-16
  808584:	df000315 	stw	fp,12(sp)
  808588:	df000304 	addi	fp,sp,12
  80858c:	e13ffd15 	stw	r4,-12(fp)
  808590:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  808594:	00000706 	br	8085b4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  808598:	e0bffe17 	ldw	r2,-8(fp)
  80859c:	1090000c 	andi	r2,r2,16384
  8085a0:	1005003a 	cmpeq	r2,r2,zero
  8085a4:	1000031e 	bne	r2,zero,8085b4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8085a8:	00bffd44 	movi	r2,-11
  8085ac:	e0bfff15 	stw	r2,-4(fp)
  8085b0:	00000b06 	br	8085e0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8085b4:	e0bffd17 	ldw	r2,-12(fp)
  8085b8:	10c00d17 	ldw	r3,52(r2)
  8085bc:	e0bffd17 	ldw	r2,-12(fp)
  8085c0:	10800c17 	ldw	r2,48(r2)
  8085c4:	18800526 	beq	r3,r2,8085dc <altera_avalon_jtag_uart_close+0x5c>
  8085c8:	e0bffd17 	ldw	r2,-12(fp)
  8085cc:	10c00917 	ldw	r3,36(r2)
  8085d0:	e0bffd17 	ldw	r2,-12(fp)
  8085d4:	10800117 	ldw	r2,4(r2)
  8085d8:	18bfef36 	bltu	r3,r2,808598 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8085dc:	e03fff15 	stw	zero,-4(fp)
  8085e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8085e4:	e037883a 	mov	sp,fp
  8085e8:	df000017 	ldw	fp,0(sp)
  8085ec:	dec00104 	addi	sp,sp,4
  8085f0:	f800283a 	ret

008085f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8085f4:	defff804 	addi	sp,sp,-32
  8085f8:	df000715 	stw	fp,28(sp)
  8085fc:	df000704 	addi	fp,sp,28
  808600:	e13ffb15 	stw	r4,-20(fp)
  808604:	e17ffc15 	stw	r5,-16(fp)
  808608:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80860c:	00bff9c4 	movi	r2,-25
  808610:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  808614:	e0bffc17 	ldw	r2,-16(fp)
  808618:	e0bfff15 	stw	r2,-4(fp)
  80861c:	e0ffff17 	ldw	r3,-4(fp)
  808620:	189a8060 	cmpeqi	r2,r3,27137
  808624:	1000041e 	bne	r2,zero,808638 <altera_avalon_jtag_uart_ioctl+0x44>
  808628:	e0ffff17 	ldw	r3,-4(fp)
  80862c:	189a80a0 	cmpeqi	r2,r3,27138
  808630:	10001b1e 	bne	r2,zero,8086a0 <altera_avalon_jtag_uart_ioctl+0xac>
  808634:	00002706 	br	8086d4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  808638:	e0bffb17 	ldw	r2,-20(fp)
  80863c:	10c00117 	ldw	r3,4(r2)
  808640:	00a00034 	movhi	r2,32768
  808644:	10bfffc4 	addi	r2,r2,-1
  808648:	18802226 	beq	r3,r2,8086d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80864c:	e0bffd17 	ldw	r2,-12(fp)
  808650:	10800017 	ldw	r2,0(r2)
  808654:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  808658:	e0bff917 	ldw	r2,-28(fp)
  80865c:	10800090 	cmplti	r2,r2,2
  808660:	1000071e 	bne	r2,zero,808680 <altera_avalon_jtag_uart_ioctl+0x8c>
  808664:	e0fff917 	ldw	r3,-28(fp)
  808668:	00a00034 	movhi	r2,32768
  80866c:	10bfffc4 	addi	r2,r2,-1
  808670:	18800326 	beq	r3,r2,808680 <altera_avalon_jtag_uart_ioctl+0x8c>
  808674:	e0bff917 	ldw	r2,-28(fp)
  808678:	e0bffe15 	stw	r2,-8(fp)
  80867c:	00000306 	br	80868c <altera_avalon_jtag_uart_ioctl+0x98>
  808680:	00e00034 	movhi	r3,32768
  808684:	18ffff84 	addi	r3,r3,-2
  808688:	e0fffe15 	stw	r3,-8(fp)
  80868c:	e0bffb17 	ldw	r2,-20(fp)
  808690:	e0fffe17 	ldw	r3,-8(fp)
  808694:	10c00115 	stw	r3,4(r2)
      rc = 0;
  808698:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80869c:	00000d06 	br	8086d4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8086a0:	e0bffb17 	ldw	r2,-20(fp)
  8086a4:	10c00117 	ldw	r3,4(r2)
  8086a8:	00a00034 	movhi	r2,32768
  8086ac:	10bfffc4 	addi	r2,r2,-1
  8086b0:	18800826 	beq	r3,r2,8086d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8086b4:	e13ffd17 	ldw	r4,-12(fp)
  8086b8:	e0bffb17 	ldw	r2,-20(fp)
  8086bc:	10c00917 	ldw	r3,36(r2)
  8086c0:	e0bffb17 	ldw	r2,-20(fp)
  8086c4:	10800117 	ldw	r2,4(r2)
  8086c8:	1885803a 	cmpltu	r2,r3,r2
  8086cc:	20800015 	stw	r2,0(r4)
      rc = 0;
  8086d0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8086d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8086d8:	e037883a 	mov	sp,fp
  8086dc:	df000017 	ldw	fp,0(sp)
  8086e0:	dec00104 	addi	sp,sp,4
  8086e4:	f800283a 	ret

008086e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8086e8:	defff204 	addi	sp,sp,-56
  8086ec:	dfc00d15 	stw	ra,52(sp)
  8086f0:	df000c15 	stw	fp,48(sp)
  8086f4:	df000c04 	addi	fp,sp,48
  8086f8:	e13ffb15 	stw	r4,-20(fp)
  8086fc:	e17ffc15 	stw	r5,-16(fp)
  808700:	e1bffd15 	stw	r6,-12(fp)
  808704:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  808708:	e0bffc17 	ldw	r2,-16(fp)
  80870c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  808710:	00004806 	br	808834 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  808714:	e0bffb17 	ldw	r2,-20(fp)
  808718:	10800a17 	ldw	r2,40(r2)
  80871c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  808720:	e0bffb17 	ldw	r2,-20(fp)
  808724:	10800b17 	ldw	r2,44(r2)
  808728:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80872c:	e0fff717 	ldw	r3,-36(fp)
  808730:	e0bff617 	ldw	r2,-40(fp)
  808734:	18800536 	bltu	r3,r2,80874c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  808738:	e0bff717 	ldw	r2,-36(fp)
  80873c:	e0fff617 	ldw	r3,-40(fp)
  808740:	10c5c83a 	sub	r2,r2,r3
  808744:	e0bff815 	stw	r2,-32(fp)
  808748:	00000406 	br	80875c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80874c:	00820004 	movi	r2,2048
  808750:	e0fff617 	ldw	r3,-40(fp)
  808754:	10c5c83a 	sub	r2,r2,r3
  808758:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80875c:	e0bff817 	ldw	r2,-32(fp)
  808760:	1005003a 	cmpeq	r2,r2,zero
  808764:	10001f1e 	bne	r2,zero,8087e4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  808768:	e0fffd17 	ldw	r3,-12(fp)
  80876c:	e0bff817 	ldw	r2,-32(fp)
  808770:	1880022e 	bgeu	r3,r2,80877c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  808774:	e0bffd17 	ldw	r2,-12(fp)
  808778:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80877c:	e0bffb17 	ldw	r2,-20(fp)
  808780:	10c00e04 	addi	r3,r2,56
  808784:	e0bff617 	ldw	r2,-40(fp)
  808788:	1887883a 	add	r3,r3,r2
  80878c:	e0bffa17 	ldw	r2,-24(fp)
  808790:	1009883a 	mov	r4,r2
  808794:	180b883a 	mov	r5,r3
  808798:	e1bff817 	ldw	r6,-32(fp)
  80879c:	080521c0 	call	80521c <memcpy>
      ptr   += n;
  8087a0:	e0fff817 	ldw	r3,-32(fp)
  8087a4:	e0bffa17 	ldw	r2,-24(fp)
  8087a8:	10c5883a 	add	r2,r2,r3
  8087ac:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  8087b0:	e0fffd17 	ldw	r3,-12(fp)
  8087b4:	e0bff817 	ldw	r2,-32(fp)
  8087b8:	1885c83a 	sub	r2,r3,r2
  8087bc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8087c0:	e0fff617 	ldw	r3,-40(fp)
  8087c4:	e0bff817 	ldw	r2,-32(fp)
  8087c8:	1885883a 	add	r2,r3,r2
  8087cc:	10c1ffcc 	andi	r3,r2,2047
  8087d0:	e0bffb17 	ldw	r2,-20(fp)
  8087d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8087d8:	e0bffd17 	ldw	r2,-12(fp)
  8087dc:	10800048 	cmpgei	r2,r2,1
  8087e0:	103fcc1e 	bne	r2,zero,808714 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8087e4:	e0fffa17 	ldw	r3,-24(fp)
  8087e8:	e0bffc17 	ldw	r2,-16(fp)
  8087ec:	1880141e 	bne	r3,r2,808840 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8087f0:	e0bffe17 	ldw	r2,-8(fp)
  8087f4:	1090000c 	andi	r2,r2,16384
  8087f8:	1004c03a 	cmpne	r2,r2,zero
  8087fc:	1000101e 	bne	r2,zero,808840 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  808800:	e0bffb17 	ldw	r2,-20(fp)
  808804:	10c00a17 	ldw	r3,40(r2)
  808808:	e0bff717 	ldw	r2,-36(fp)
  80880c:	1880051e 	bne	r3,r2,808824 <altera_avalon_jtag_uart_read+0x13c>
  808810:	e0bffb17 	ldw	r2,-20(fp)
  808814:	10c00917 	ldw	r3,36(r2)
  808818:	e0bffb17 	ldw	r2,-20(fp)
  80881c:	10800117 	ldw	r2,4(r2)
  808820:	18bff736 	bltu	r3,r2,808800 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  808824:	e0bffb17 	ldw	r2,-20(fp)
  808828:	10c00a17 	ldw	r3,40(r2)
  80882c:	e0bff717 	ldw	r2,-36(fp)
  808830:	18800326 	beq	r3,r2,808840 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  808834:	e0bffd17 	ldw	r2,-12(fp)
  808838:	10800048 	cmpgei	r2,r2,1
  80883c:	103fb51e 	bne	r2,zero,808714 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  808840:	e0fffa17 	ldw	r3,-24(fp)
  808844:	e0bffc17 	ldw	r2,-16(fp)
  808848:	18801926 	beq	r3,r2,8088b0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80884c:	0005303a 	rdctl	r2,status
  808850:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808854:	e0fff517 	ldw	r3,-44(fp)
  808858:	00bfff84 	movi	r2,-2
  80885c:	1884703a 	and	r2,r3,r2
  808860:	1001703a 	wrctl	status,r2
  
  return context;
  808864:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  808868:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80886c:	e0bffb17 	ldw	r2,-20(fp)
  808870:	10800817 	ldw	r2,32(r2)
  808874:	10c00054 	ori	r3,r2,1
  808878:	e0bffb17 	ldw	r2,-20(fp)
  80887c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  808880:	e0bffb17 	ldw	r2,-20(fp)
  808884:	10800017 	ldw	r2,0(r2)
  808888:	11000104 	addi	r4,r2,4
  80888c:	e0bffb17 	ldw	r2,-20(fp)
  808890:	10800817 	ldw	r2,32(r2)
  808894:	1007883a 	mov	r3,r2
  808898:	2005883a 	mov	r2,r4
  80889c:	10c00035 	stwio	r3,0(r2)
  8088a0:	e0bff917 	ldw	r2,-28(fp)
  8088a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088a8:	e0bff417 	ldw	r2,-48(fp)
  8088ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8088b0:	e0fffa17 	ldw	r3,-24(fp)
  8088b4:	e0bffc17 	ldw	r2,-16(fp)
  8088b8:	18800526 	beq	r3,r2,8088d0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8088bc:	e0fffa17 	ldw	r3,-24(fp)
  8088c0:	e0bffc17 	ldw	r2,-16(fp)
  8088c4:	1887c83a 	sub	r3,r3,r2
  8088c8:	e0ffff15 	stw	r3,-4(fp)
  8088cc:	00000906 	br	8088f4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8088d0:	e0bffe17 	ldw	r2,-8(fp)
  8088d4:	1090000c 	andi	r2,r2,16384
  8088d8:	1005003a 	cmpeq	r2,r2,zero
  8088dc:	1000031e 	bne	r2,zero,8088ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8088e0:	00bffd44 	movi	r2,-11
  8088e4:	e0bfff15 	stw	r2,-4(fp)
  8088e8:	00000206 	br	8088f4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8088ec:	00bffec4 	movi	r2,-5
  8088f0:	e0bfff15 	stw	r2,-4(fp)
  8088f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8088f8:	e037883a 	mov	sp,fp
  8088fc:	dfc00117 	ldw	ra,4(sp)
  808900:	df000017 	ldw	fp,0(sp)
  808904:	dec00204 	addi	sp,sp,8
  808908:	f800283a 	ret

0080890c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80890c:	defff204 	addi	sp,sp,-56
  808910:	dfc00d15 	stw	ra,52(sp)
  808914:	df000c15 	stw	fp,48(sp)
  808918:	df000c04 	addi	fp,sp,48
  80891c:	e13ffb15 	stw	r4,-20(fp)
  808920:	e17ffc15 	stw	r5,-16(fp)
  808924:	e1bffd15 	stw	r6,-12(fp)
  808928:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80892c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  808930:	e0bffc17 	ldw	r2,-16(fp)
  808934:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  808938:	00003a06 	br	808a24 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80893c:	e0bffb17 	ldw	r2,-20(fp)
  808940:	10800c17 	ldw	r2,48(r2)
  808944:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  808948:	e0bffb17 	ldw	r2,-20(fp)
  80894c:	10800d17 	ldw	r2,52(r2)
  808950:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  808954:	e0fffa17 	ldw	r3,-24(fp)
  808958:	e0bff917 	ldw	r2,-28(fp)
  80895c:	1880062e 	bgeu	r3,r2,808978 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  808960:	e0fff917 	ldw	r3,-28(fp)
  808964:	e0bffa17 	ldw	r2,-24(fp)
  808968:	1885c83a 	sub	r2,r3,r2
  80896c:	10bfffc4 	addi	r2,r2,-1
  808970:	e0bff815 	stw	r2,-32(fp)
  808974:	00000c06 	br	8089a8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  808978:	e0bff917 	ldw	r2,-28(fp)
  80897c:	1005003a 	cmpeq	r2,r2,zero
  808980:	1000051e 	bne	r2,zero,808998 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  808984:	00820004 	movi	r2,2048
  808988:	e0fffa17 	ldw	r3,-24(fp)
  80898c:	10c5c83a 	sub	r2,r2,r3
  808990:	e0bff815 	stw	r2,-32(fp)
  808994:	00000406 	br	8089a8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  808998:	0081ffc4 	movi	r2,2047
  80899c:	e0fffa17 	ldw	r3,-24(fp)
  8089a0:	10c5c83a 	sub	r2,r2,r3
  8089a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8089a8:	e0bff817 	ldw	r2,-32(fp)
  8089ac:	1005003a 	cmpeq	r2,r2,zero
  8089b0:	10001f1e 	bne	r2,zero,808a30 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8089b4:	e0fffd17 	ldw	r3,-12(fp)
  8089b8:	e0bff817 	ldw	r2,-32(fp)
  8089bc:	1880022e 	bgeu	r3,r2,8089c8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8089c0:	e0bffd17 	ldw	r2,-12(fp)
  8089c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8089c8:	e0bffb17 	ldw	r2,-20(fp)
  8089cc:	10c20e04 	addi	r3,r2,2104
  8089d0:	e0bffa17 	ldw	r2,-24(fp)
  8089d4:	1885883a 	add	r2,r3,r2
  8089d8:	e0fffc17 	ldw	r3,-16(fp)
  8089dc:	1009883a 	mov	r4,r2
  8089e0:	180b883a 	mov	r5,r3
  8089e4:	e1bff817 	ldw	r6,-32(fp)
  8089e8:	080521c0 	call	80521c <memcpy>
      ptr   += n;
  8089ec:	e0fff817 	ldw	r3,-32(fp)
  8089f0:	e0bffc17 	ldw	r2,-16(fp)
  8089f4:	10c5883a 	add	r2,r2,r3
  8089f8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8089fc:	e0fffd17 	ldw	r3,-12(fp)
  808a00:	e0bff817 	ldw	r2,-32(fp)
  808a04:	1885c83a 	sub	r2,r3,r2
  808a08:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808a0c:	e0fffa17 	ldw	r3,-24(fp)
  808a10:	e0bff817 	ldw	r2,-32(fp)
  808a14:	1885883a 	add	r2,r3,r2
  808a18:	10c1ffcc 	andi	r3,r2,2047
  808a1c:	e0bffb17 	ldw	r2,-20(fp)
  808a20:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  808a24:	e0bffd17 	ldw	r2,-12(fp)
  808a28:	10800048 	cmpgei	r2,r2,1
  808a2c:	103fc31e 	bne	r2,zero,80893c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a30:	0005303a 	rdctl	r2,status
  808a34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a38:	e0fff517 	ldw	r3,-44(fp)
  808a3c:	00bfff84 	movi	r2,-2
  808a40:	1884703a 	and	r2,r3,r2
  808a44:	1001703a 	wrctl	status,r2
  
  return context;
  808a48:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  808a4c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  808a50:	e0bffb17 	ldw	r2,-20(fp)
  808a54:	10800817 	ldw	r2,32(r2)
  808a58:	10c00094 	ori	r3,r2,2
  808a5c:	e0bffb17 	ldw	r2,-20(fp)
  808a60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  808a64:	e0bffb17 	ldw	r2,-20(fp)
  808a68:	10800017 	ldw	r2,0(r2)
  808a6c:	11000104 	addi	r4,r2,4
  808a70:	e0bffb17 	ldw	r2,-20(fp)
  808a74:	10800817 	ldw	r2,32(r2)
  808a78:	1007883a 	mov	r3,r2
  808a7c:	2005883a 	mov	r2,r4
  808a80:	10c00035 	stwio	r3,0(r2)
  808a84:	e0bff717 	ldw	r2,-36(fp)
  808a88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a8c:	e0bff417 	ldw	r2,-48(fp)
  808a90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  808a94:	e0bffd17 	ldw	r2,-12(fp)
  808a98:	10800050 	cmplti	r2,r2,1
  808a9c:	1000111e 	bne	r2,zero,808ae4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  808aa0:	e0bffe17 	ldw	r2,-8(fp)
  808aa4:	1090000c 	andi	r2,r2,16384
  808aa8:	1004c03a 	cmpne	r2,r2,zero
  808aac:	1000101e 	bne	r2,zero,808af0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  808ab0:	e0bffb17 	ldw	r2,-20(fp)
  808ab4:	10c00d17 	ldw	r3,52(r2)
  808ab8:	e0bff917 	ldw	r2,-28(fp)
  808abc:	1880051e 	bne	r3,r2,808ad4 <altera_avalon_jtag_uart_write+0x1c8>
  808ac0:	e0bffb17 	ldw	r2,-20(fp)
  808ac4:	10c00917 	ldw	r3,36(r2)
  808ac8:	e0bffb17 	ldw	r2,-20(fp)
  808acc:	10800117 	ldw	r2,4(r2)
  808ad0:	18bff736 	bltu	r3,r2,808ab0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  808ad4:	e0bffb17 	ldw	r2,-20(fp)
  808ad8:	10c00d17 	ldw	r3,52(r2)
  808adc:	e0bff917 	ldw	r2,-28(fp)
  808ae0:	18800326 	beq	r3,r2,808af0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  808ae4:	e0bffd17 	ldw	r2,-12(fp)
  808ae8:	10800048 	cmpgei	r2,r2,1
  808aec:	103fcd1e 	bne	r2,zero,808a24 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  808af0:	e0fffc17 	ldw	r3,-16(fp)
  808af4:	e0bff617 	ldw	r2,-40(fp)
  808af8:	18800526 	beq	r3,r2,808b10 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  808afc:	e0fffc17 	ldw	r3,-16(fp)
  808b00:	e0bff617 	ldw	r2,-40(fp)
  808b04:	1887c83a 	sub	r3,r3,r2
  808b08:	e0ffff15 	stw	r3,-4(fp)
  808b0c:	00000906 	br	808b34 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  808b10:	e0bffe17 	ldw	r2,-8(fp)
  808b14:	1090000c 	andi	r2,r2,16384
  808b18:	1005003a 	cmpeq	r2,r2,zero
  808b1c:	1000031e 	bne	r2,zero,808b2c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  808b20:	00bffd44 	movi	r2,-11
  808b24:	e0bfff15 	stw	r2,-4(fp)
  808b28:	00000206 	br	808b34 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  808b2c:	00bffec4 	movi	r2,-5
  808b30:	e0bfff15 	stw	r2,-4(fp)
  808b34:	e0bfff17 	ldw	r2,-4(fp)
}
  808b38:	e037883a 	mov	sp,fp
  808b3c:	dfc00117 	ldw	ra,4(sp)
  808b40:	df000017 	ldw	fp,0(sp)
  808b44:	dec00204 	addi	sp,sp,8
  808b48:	f800283a 	ret

00808b4c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  808b4c:	defffa04 	addi	sp,sp,-24
  808b50:	dfc00515 	stw	ra,20(sp)
  808b54:	df000415 	stw	fp,16(sp)
  808b58:	df000404 	addi	fp,sp,16
  808b5c:	e13ffe15 	stw	r4,-8(fp)
  808b60:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  808b64:	e0bffe17 	ldw	r2,-8(fp)
  808b68:	10800017 	ldw	r2,0(r2)
  808b6c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  808b70:	008003f4 	movhi	r2,15
  808b74:	10909004 	addi	r2,r2,16960
  808b78:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  808b7c:	e0bffe17 	ldw	r2,-8(fp)
  808b80:	10800803 	ldbu	r2,32(r2)
  808b84:	10803fcc 	andi	r2,r2,255
  808b88:	1080201c 	xori	r2,r2,128
  808b8c:	10bfe004 	addi	r2,r2,-128
  808b90:	1004c03a 	cmpne	r2,r2,zero
  808b94:	1000161e 	bne	r2,zero,808bf0 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  808b98:	00000a06 	br	808bc4 <lcd_write_command+0x78>
    if (--i == 0)
  808b9c:	e0bffc17 	ldw	r2,-16(fp)
  808ba0:	10bfffc4 	addi	r2,r2,-1
  808ba4:	e0bffc15 	stw	r2,-16(fp)
  808ba8:	e0bffc17 	ldw	r2,-16(fp)
  808bac:	1004c03a 	cmpne	r2,r2,zero
  808bb0:	1000041e 	bne	r2,zero,808bc4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  808bb4:	e0fffe17 	ldw	r3,-8(fp)
  808bb8:	00800044 	movi	r2,1
  808bbc:	18800805 	stb	r2,32(r3)
      return;
  808bc0:	00000b06 	br	808bf0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  808bc4:	e0bffd17 	ldw	r2,-12(fp)
  808bc8:	10800104 	addi	r2,r2,4
  808bcc:	10800037 	ldwio	r2,0(r2)
  808bd0:	1080200c 	andi	r2,r2,128
  808bd4:	1004c03a 	cmpne	r2,r2,zero
  808bd8:	103ff01e 	bne	r2,zero,808b9c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  808bdc:	01001904 	movi	r4,100
  808be0:	080ae000 	call	80ae00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  808be4:	e0bffd17 	ldw	r2,-12(fp)
  808be8:	e0ffff03 	ldbu	r3,-4(fp)
  808bec:	10c00035 	stwio	r3,0(r2)
}
  808bf0:	e037883a 	mov	sp,fp
  808bf4:	dfc00117 	ldw	ra,4(sp)
  808bf8:	df000017 	ldw	fp,0(sp)
  808bfc:	dec00204 	addi	sp,sp,8
  808c00:	f800283a 	ret

00808c04 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  808c04:	defffa04 	addi	sp,sp,-24
  808c08:	dfc00515 	stw	ra,20(sp)
  808c0c:	df000415 	stw	fp,16(sp)
  808c10:	df000404 	addi	fp,sp,16
  808c14:	e13ffe15 	stw	r4,-8(fp)
  808c18:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  808c1c:	e0bffe17 	ldw	r2,-8(fp)
  808c20:	10800017 	ldw	r2,0(r2)
  808c24:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  808c28:	008003f4 	movhi	r2,15
  808c2c:	10909004 	addi	r2,r2,16960
  808c30:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  808c34:	e0bffe17 	ldw	r2,-8(fp)
  808c38:	10800803 	ldbu	r2,32(r2)
  808c3c:	10803fcc 	andi	r2,r2,255
  808c40:	1080201c 	xori	r2,r2,128
  808c44:	10bfe004 	addi	r2,r2,-128
  808c48:	1004c03a 	cmpne	r2,r2,zero
  808c4c:	10001d1e 	bne	r2,zero,808cc4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  808c50:	00000a06 	br	808c7c <lcd_write_data+0x78>
    if (--i == 0)
  808c54:	e0bffc17 	ldw	r2,-16(fp)
  808c58:	10bfffc4 	addi	r2,r2,-1
  808c5c:	e0bffc15 	stw	r2,-16(fp)
  808c60:	e0bffc17 	ldw	r2,-16(fp)
  808c64:	1004c03a 	cmpne	r2,r2,zero
  808c68:	1000041e 	bne	r2,zero,808c7c <lcd_write_data+0x78>
    {
      sp->broken = 1;
  808c6c:	e0fffe17 	ldw	r3,-8(fp)
  808c70:	00800044 	movi	r2,1
  808c74:	18800805 	stb	r2,32(r3)
      return;
  808c78:	00001206 	br	808cc4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  808c7c:	e0bffd17 	ldw	r2,-12(fp)
  808c80:	10800104 	addi	r2,r2,4
  808c84:	10800037 	ldwio	r2,0(r2)
  808c88:	1080200c 	andi	r2,r2,128
  808c8c:	1004c03a 	cmpne	r2,r2,zero
  808c90:	103ff01e 	bne	r2,zero,808c54 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  808c94:	01001904 	movi	r4,100
  808c98:	080ae000 	call	80ae00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  808c9c:	e0bffd17 	ldw	r2,-12(fp)
  808ca0:	10800204 	addi	r2,r2,8
  808ca4:	e0ffff03 	ldbu	r3,-4(fp)
  808ca8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  808cac:	e0bffe17 	ldw	r2,-8(fp)
  808cb0:	108008c3 	ldbu	r2,35(r2)
  808cb4:	10800044 	addi	r2,r2,1
  808cb8:	1007883a 	mov	r3,r2
  808cbc:	e0bffe17 	ldw	r2,-8(fp)
  808cc0:	10c008c5 	stb	r3,35(r2)
}
  808cc4:	e037883a 	mov	sp,fp
  808cc8:	dfc00117 	ldw	ra,4(sp)
  808ccc:	df000017 	ldw	fp,0(sp)
  808cd0:	dec00204 	addi	sp,sp,8
  808cd4:	f800283a 	ret

00808cd8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  808cd8:	defffc04 	addi	sp,sp,-16
  808cdc:	dfc00315 	stw	ra,12(sp)
  808ce0:	df000215 	stw	fp,8(sp)
  808ce4:	df000204 	addi	fp,sp,8
  808ce8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  808cec:	e13fff17 	ldw	r4,-4(fp)
  808cf0:	01400044 	movi	r5,1
  808cf4:	0808b4c0 	call	808b4c <lcd_write_command>

  sp->x = 0;
  808cf8:	e0bfff17 	ldw	r2,-4(fp)
  808cfc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  808d00:	e0bfff17 	ldw	r2,-4(fp)
  808d04:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  808d08:	e0bfff17 	ldw	r2,-4(fp)
  808d0c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808d10:	e03ffe15 	stw	zero,-8(fp)
  808d14:	00001906 	br	808d7c <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  808d18:	e0bffe17 	ldw	r2,-8(fp)
  808d1c:	10801924 	muli	r2,r2,100
  808d20:	10c01004 	addi	r3,r2,64
  808d24:	e0bfff17 	ldw	r2,-4(fp)
  808d28:	1889883a 	add	r4,r3,r2
  808d2c:	01400804 	movi	r5,32
  808d30:	01801444 	movi	r6,81
  808d34:	08067800 	call	806780 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  808d38:	e0bffe17 	ldw	r2,-8(fp)
  808d3c:	10801924 	muli	r2,r2,100
  808d40:	10c00c04 	addi	r3,r2,48
  808d44:	e0bfff17 	ldw	r2,-4(fp)
  808d48:	1889883a 	add	r4,r3,r2
  808d4c:	01400804 	movi	r5,32
  808d50:	01800404 	movi	r6,16
  808d54:	08067800 	call	806780 <memset>
    sp->line[y].width = 0;
  808d58:	e0bffe17 	ldw	r2,-8(fp)
  808d5c:	e0ffff17 	ldw	r3,-4(fp)
  808d60:	10801924 	muli	r2,r2,100
  808d64:	10c5883a 	add	r2,r2,r3
  808d68:	10802404 	addi	r2,r2,144
  808d6c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808d70:	e0bffe17 	ldw	r2,-8(fp)
  808d74:	10800044 	addi	r2,r2,1
  808d78:	e0bffe15 	stw	r2,-8(fp)
  808d7c:	e0bffe17 	ldw	r2,-8(fp)
  808d80:	10800090 	cmplti	r2,r2,2
  808d84:	103fe41e 	bne	r2,zero,808d18 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  808d88:	e037883a 	mov	sp,fp
  808d8c:	dfc00117 	ldw	ra,4(sp)
  808d90:	df000017 	ldw	fp,0(sp)
  808d94:	dec00204 	addi	sp,sp,8
  808d98:	f800283a 	ret

00808d9c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  808d9c:	defff604 	addi	sp,sp,-40
  808da0:	dfc00915 	stw	ra,36(sp)
  808da4:	df000815 	stw	fp,32(sp)
  808da8:	dc000715 	stw	r16,28(sp)
  808dac:	df000704 	addi	fp,sp,28
  808db0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  808db4:	e0bfff17 	ldw	r2,-4(fp)
  808db8:	10800943 	ldbu	r2,37(r2)
  808dbc:	10803fcc 	andi	r2,r2,255
  808dc0:	1080201c 	xori	r2,r2,128
  808dc4:	10bfe004 	addi	r2,r2,-128
  808dc8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808dcc:	e03ffe15 	stw	zero,-8(fp)
  808dd0:	00006406 	br	808f64 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  808dd4:	e0bffe17 	ldw	r2,-8(fp)
  808dd8:	e0ffff17 	ldw	r3,-4(fp)
  808ddc:	10801924 	muli	r2,r2,100
  808de0:	10c5883a 	add	r2,r2,r3
  808de4:	10802404 	addi	r2,r2,144
  808de8:	10800043 	ldbu	r2,1(r2)
  808dec:	10803fcc 	andi	r2,r2,255
  808df0:	1080201c 	xori	r2,r2,128
  808df4:	10bfe004 	addi	r2,r2,-128
  808df8:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  808dfc:	e0bffe17 	ldw	r2,-8(fp)
  808e00:	e0ffff17 	ldw	r3,-4(fp)
  808e04:	10801924 	muli	r2,r2,100
  808e08:	10c5883a 	add	r2,r2,r3
  808e0c:	10802404 	addi	r2,r2,144
  808e10:	10800083 	ldbu	r2,2(r2)
  808e14:	10c03fcc 	andi	r3,r2,255
  808e18:	e0bffc17 	ldw	r2,-16(fp)
  808e1c:	1885383a 	mul	r2,r3,r2
  808e20:	1005d23a 	srai	r2,r2,8
  808e24:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  808e28:	e0fffa17 	ldw	r3,-24(fp)
  808e2c:	e0bffb17 	ldw	r2,-20(fp)
  808e30:	18800116 	blt	r3,r2,808e38 <lcd_repaint_screen+0x9c>
      offset = 0;
  808e34:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  808e38:	e03ffd15 	stw	zero,-12(fp)
  808e3c:	00004306 	br	808f4c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  808e40:	e43ffe17 	ldw	r16,-8(fp)
  808e44:	e0fffd17 	ldw	r3,-12(fp)
  808e48:	e0bffa17 	ldw	r2,-24(fp)
  808e4c:	1889883a 	add	r4,r3,r2
  808e50:	e17ffb17 	ldw	r5,-20(fp)
  808e54:	080b4b00 	call	80b4b0 <__modsi3>
  808e58:	1009883a 	mov	r4,r2
  808e5c:	e0ffff17 	ldw	r3,-4(fp)
  808e60:	80801924 	muli	r2,r16,100
  808e64:	10c5883a 	add	r2,r2,r3
  808e68:	1105883a 	add	r2,r2,r4
  808e6c:	10801004 	addi	r2,r2,64
  808e70:	10800003 	ldbu	r2,0(r2)
  808e74:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  808e78:	e0bffe17 	ldw	r2,-8(fp)
  808e7c:	e13ffd17 	ldw	r4,-12(fp)
  808e80:	e0ffff17 	ldw	r3,-4(fp)
  808e84:	10801924 	muli	r2,r2,100
  808e88:	10c5883a 	add	r2,r2,r3
  808e8c:	1105883a 	add	r2,r2,r4
  808e90:	10800c04 	addi	r2,r2,48
  808e94:	10800003 	ldbu	r2,0(r2)
  808e98:	10c03fcc 	andi	r3,r2,255
  808e9c:	18c0201c 	xori	r3,r3,128
  808ea0:	18ffe004 	addi	r3,r3,-128
  808ea4:	e0bff947 	ldb	r2,-27(fp)
  808ea8:	18802526 	beq	r3,r2,808f40 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  808eac:	e0fffe17 	ldw	r3,-8(fp)
  808eb0:	d0a01004 	addi	r2,gp,-32704
  808eb4:	1885883a 	add	r2,r3,r2
  808eb8:	10800003 	ldbu	r2,0(r2)
  808ebc:	1007883a 	mov	r3,r2
  808ec0:	e0bffd17 	ldw	r2,-12(fp)
  808ec4:	1885883a 	add	r2,r3,r2
  808ec8:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  808ecc:	e0fff903 	ldbu	r3,-28(fp)
  808ed0:	e0bfff17 	ldw	r2,-4(fp)
  808ed4:	108008c3 	ldbu	r2,35(r2)
  808ed8:	10803fcc 	andi	r2,r2,255
  808edc:	1080201c 	xori	r2,r2,128
  808ee0:	10bfe004 	addi	r2,r2,-128
  808ee4:	18800926 	beq	r3,r2,808f0c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  808ee8:	e0fff903 	ldbu	r3,-28(fp)
  808eec:	00bfe004 	movi	r2,-128
  808ef0:	1884b03a 	or	r2,r3,r2
  808ef4:	11403fcc 	andi	r5,r2,255
  808ef8:	e13fff17 	ldw	r4,-4(fp)
  808efc:	0808b4c0 	call	808b4c <lcd_write_command>
          sp->address = address;
  808f00:	e0fff903 	ldbu	r3,-28(fp)
  808f04:	e0bfff17 	ldw	r2,-4(fp)
  808f08:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  808f0c:	e0bff943 	ldbu	r2,-27(fp)
  808f10:	11403fcc 	andi	r5,r2,255
  808f14:	e13fff17 	ldw	r4,-4(fp)
  808f18:	0808c040 	call	808c04 <lcd_write_data>
        sp->line[y].visible[x] = c;
  808f1c:	e0bffe17 	ldw	r2,-8(fp)
  808f20:	e13ffd17 	ldw	r4,-12(fp)
  808f24:	e0ffff17 	ldw	r3,-4(fp)
  808f28:	10801924 	muli	r2,r2,100
  808f2c:	10c5883a 	add	r2,r2,r3
  808f30:	1105883a 	add	r2,r2,r4
  808f34:	10c00c04 	addi	r3,r2,48
  808f38:	e0bff943 	ldbu	r2,-27(fp)
  808f3c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  808f40:	e0bffd17 	ldw	r2,-12(fp)
  808f44:	10800044 	addi	r2,r2,1
  808f48:	e0bffd15 	stw	r2,-12(fp)
  808f4c:	e0bffd17 	ldw	r2,-12(fp)
  808f50:	10800410 	cmplti	r2,r2,16
  808f54:	103fba1e 	bne	r2,zero,808e40 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808f58:	e0bffe17 	ldw	r2,-8(fp)
  808f5c:	10800044 	addi	r2,r2,1
  808f60:	e0bffe15 	stw	r2,-8(fp)
  808f64:	e0bffe17 	ldw	r2,-8(fp)
  808f68:	10800090 	cmplti	r2,r2,2
  808f6c:	103f991e 	bne	r2,zero,808dd4 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  808f70:	e037883a 	mov	sp,fp
  808f74:	dfc00217 	ldw	ra,8(sp)
  808f78:	df000117 	ldw	fp,4(sp)
  808f7c:	dc000017 	ldw	r16,0(sp)
  808f80:	dec00304 	addi	sp,sp,12
  808f84:	f800283a 	ret

00808f88 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  808f88:	defffc04 	addi	sp,sp,-16
  808f8c:	dfc00315 	stw	ra,12(sp)
  808f90:	df000215 	stw	fp,8(sp)
  808f94:	df000204 	addi	fp,sp,8
  808f98:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808f9c:	e03ffe15 	stw	zero,-8(fp)
  808fa0:	00001d06 	br	809018 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  808fa4:	e0bffe17 	ldw	r2,-8(fp)
  808fa8:	10800048 	cmpgei	r2,r2,1
  808fac:	10000f1e 	bne	r2,zero,808fec <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  808fb0:	e0bffe17 	ldw	r2,-8(fp)
  808fb4:	10801924 	muli	r2,r2,100
  808fb8:	10c01004 	addi	r3,r2,64
  808fbc:	e0bfff17 	ldw	r2,-4(fp)
  808fc0:	1889883a 	add	r4,r3,r2
  808fc4:	e0bffe17 	ldw	r2,-8(fp)
  808fc8:	10800044 	addi	r2,r2,1
  808fcc:	10801924 	muli	r2,r2,100
  808fd0:	10c01004 	addi	r3,r2,64
  808fd4:	e0bfff17 	ldw	r2,-4(fp)
  808fd8:	1885883a 	add	r2,r3,r2
  808fdc:	100b883a 	mov	r5,r2
  808fe0:	01801404 	movi	r6,80
  808fe4:	080521c0 	call	80521c <memcpy>
  808fe8:	00000806 	br	80900c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  808fec:	e0bffe17 	ldw	r2,-8(fp)
  808ff0:	10801924 	muli	r2,r2,100
  808ff4:	10c01004 	addi	r3,r2,64
  808ff8:	e0bfff17 	ldw	r2,-4(fp)
  808ffc:	1889883a 	add	r4,r3,r2
  809000:	01400804 	movi	r5,32
  809004:	01801404 	movi	r6,80
  809008:	08067800 	call	806780 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80900c:	e0bffe17 	ldw	r2,-8(fp)
  809010:	10800044 	addi	r2,r2,1
  809014:	e0bffe15 	stw	r2,-8(fp)
  809018:	e0bffe17 	ldw	r2,-8(fp)
  80901c:	10800090 	cmplti	r2,r2,2
  809020:	103fe01e 	bne	r2,zero,808fa4 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  809024:	e0bfff17 	ldw	r2,-4(fp)
  809028:	10800883 	ldbu	r2,34(r2)
  80902c:	10bfffc4 	addi	r2,r2,-1
  809030:	1007883a 	mov	r3,r2
  809034:	e0bfff17 	ldw	r2,-4(fp)
  809038:	10c00885 	stb	r3,34(r2)
}
  80903c:	e037883a 	mov	sp,fp
  809040:	dfc00117 	ldw	ra,4(sp)
  809044:	df000017 	ldw	fp,0(sp)
  809048:	dec00204 	addi	sp,sp,8
  80904c:	f800283a 	ret

00809050 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  809050:	defff804 	addi	sp,sp,-32
  809054:	dfc00715 	stw	ra,28(sp)
  809058:	df000615 	stw	fp,24(sp)
  80905c:	df000604 	addi	fp,sp,24
  809060:	e13ffd15 	stw	r4,-12(fp)
  809064:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  809068:	e03ffc15 	stw	zero,-16(fp)
  80906c:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  809070:	e0bffd17 	ldw	r2,-12(fp)
  809074:	10800a03 	ldbu	r2,40(r2)
  809078:	10803fcc 	andi	r2,r2,255
  80907c:	1080201c 	xori	r2,r2,128
  809080:	10bfe004 	addi	r2,r2,-128
  809084:	108016d8 	cmpnei	r2,r2,91
  809088:	1000491e 	bne	r2,zero,8091b0 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80908c:	e0bffd17 	ldw	r2,-12(fp)
  809090:	10800a04 	addi	r2,r2,40
  809094:	10800044 	addi	r2,r2,1
  809098:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80909c:	00000d06 	br	8090d4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8090a0:	e0bffc17 	ldw	r2,-16(fp)
  8090a4:	10c002a4 	muli	r3,r2,10
  8090a8:	e0bffa17 	ldw	r2,-24(fp)
  8090ac:	10800003 	ldbu	r2,0(r2)
  8090b0:	10803fcc 	andi	r2,r2,255
  8090b4:	1080201c 	xori	r2,r2,128
  8090b8:	10bfe004 	addi	r2,r2,-128
  8090bc:	1885883a 	add	r2,r3,r2
  8090c0:	10bff404 	addi	r2,r2,-48
  8090c4:	e0bffc15 	stw	r2,-16(fp)
  8090c8:	e0bffa17 	ldw	r2,-24(fp)
  8090cc:	10800044 	addi	r2,r2,1
  8090d0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8090d4:	e0bffa17 	ldw	r2,-24(fp)
  8090d8:	10800003 	ldbu	r2,0(r2)
  8090dc:	10803fcc 	andi	r2,r2,255
  8090e0:	1080201c 	xori	r2,r2,128
  8090e4:	10bfe004 	addi	r2,r2,-128
  8090e8:	1007883a 	mov	r3,r2
  8090ec:	00802074 	movhi	r2,129
  8090f0:	10b58704 	addi	r2,r2,-10724
  8090f4:	10800017 	ldw	r2,0(r2)
  8090f8:	1885883a 	add	r2,r3,r2
  8090fc:	10800003 	ldbu	r2,0(r2)
  809100:	10803fcc 	andi	r2,r2,255
  809104:	1080010c 	andi	r2,r2,4
  809108:	1004c03a 	cmpne	r2,r2,zero
  80910c:	103fe41e 	bne	r2,zero,8090a0 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  809110:	e0bffa17 	ldw	r2,-24(fp)
  809114:	10800003 	ldbu	r2,0(r2)
  809118:	10803fcc 	andi	r2,r2,255
  80911c:	1080201c 	xori	r2,r2,128
  809120:	10bfe004 	addi	r2,r2,-128
  809124:	10800ed8 	cmpnei	r2,r2,59
  809128:	1000231e 	bne	r2,zero,8091b8 <lcd_handle_escape+0x168>
    {
      ptr++;
  80912c:	e0bffa17 	ldw	r2,-24(fp)
  809130:	10800044 	addi	r2,r2,1
  809134:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  809138:	00000d06 	br	809170 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80913c:	e0bffb17 	ldw	r2,-20(fp)
  809140:	10c002a4 	muli	r3,r2,10
  809144:	e0bffa17 	ldw	r2,-24(fp)
  809148:	10800003 	ldbu	r2,0(r2)
  80914c:	10803fcc 	andi	r2,r2,255
  809150:	1080201c 	xori	r2,r2,128
  809154:	10bfe004 	addi	r2,r2,-128
  809158:	1885883a 	add	r2,r3,r2
  80915c:	10bff404 	addi	r2,r2,-48
  809160:	e0bffb15 	stw	r2,-20(fp)
  809164:	e0bffa17 	ldw	r2,-24(fp)
  809168:	10800044 	addi	r2,r2,1
  80916c:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  809170:	e0bffa17 	ldw	r2,-24(fp)
  809174:	10800003 	ldbu	r2,0(r2)
  809178:	10803fcc 	andi	r2,r2,255
  80917c:	1080201c 	xori	r2,r2,128
  809180:	10bfe004 	addi	r2,r2,-128
  809184:	1007883a 	mov	r3,r2
  809188:	00802074 	movhi	r2,129
  80918c:	10b58704 	addi	r2,r2,-10724
  809190:	10800017 	ldw	r2,0(r2)
  809194:	1885883a 	add	r2,r3,r2
  809198:	10800003 	ldbu	r2,0(r2)
  80919c:	10803fcc 	andi	r2,r2,255
  8091a0:	1080010c 	andi	r2,r2,4
  8091a4:	1004c03a 	cmpne	r2,r2,zero
  8091a8:	103fe41e 	bne	r2,zero,80913c <lcd_handle_escape+0xec>
  8091ac:	00000206 	br	8091b8 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8091b0:	00bfffc4 	movi	r2,-1
  8091b4:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  8091b8:	e0bffe07 	ldb	r2,-8(fp)
  8091bc:	e0bfff15 	stw	r2,-4(fp)
  8091c0:	e0ffff17 	ldw	r3,-4(fp)
  8091c4:	188012a0 	cmpeqi	r2,r3,74
  8091c8:	10002f1e 	bne	r2,zero,809288 <lcd_handle_escape+0x238>
  8091cc:	e0ffff17 	ldw	r3,-4(fp)
  8091d0:	188012c8 	cmpgei	r2,r3,75
  8091d4:	1000041e 	bne	r2,zero,8091e8 <lcd_handle_escape+0x198>
  8091d8:	e0ffff17 	ldw	r3,-4(fp)
  8091dc:	18801220 	cmpeqi	r2,r3,72
  8091e0:	1000081e 	bne	r2,zero,809204 <lcd_handle_escape+0x1b4>
  8091e4:	00004906 	br	80930c <lcd_handle_escape+0x2bc>
  8091e8:	e0ffff17 	ldw	r3,-4(fp)
  8091ec:	188012e0 	cmpeqi	r2,r3,75
  8091f0:	10002b1e 	bne	r2,zero,8092a0 <lcd_handle_escape+0x250>
  8091f4:	e0ffff17 	ldw	r3,-4(fp)
  8091f8:	188019a0 	cmpeqi	r2,r3,102
  8091fc:	1000011e 	bne	r2,zero,809204 <lcd_handle_escape+0x1b4>
  809200:	00004206 	br	80930c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  809204:	e0bffb17 	ldw	r2,-20(fp)
  809208:	10800050 	cmplti	r2,r2,1
  80920c:	1000051e 	bne	r2,zero,809224 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  809210:	e0bffb17 	ldw	r2,-20(fp)
  809214:	10bfffc4 	addi	r2,r2,-1
  809218:	1007883a 	mov	r3,r2
  80921c:	e0bffd17 	ldw	r2,-12(fp)
  809220:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  809224:	e0bffc17 	ldw	r2,-16(fp)
  809228:	10800050 	cmplti	r2,r2,1
  80922c:	1000371e 	bne	r2,zero,80930c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  809230:	e0bffc17 	ldw	r2,-16(fp)
  809234:	10bfffc4 	addi	r2,r2,-1
  809238:	1007883a 	mov	r3,r2
  80923c:	e0bffd17 	ldw	r2,-12(fp)
  809240:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  809244:	e0bffd17 	ldw	r2,-12(fp)
  809248:	10800883 	ldbu	r2,34(r2)
  80924c:	10803fcc 	andi	r2,r2,255
  809250:	10800170 	cmpltui	r2,r2,5
  809254:	1000061e 	bne	r2,zero,809270 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  809258:	e0fffd17 	ldw	r3,-12(fp)
  80925c:	00800104 	movi	r2,4
  809260:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  809264:	00000206 	br	809270 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  809268:	e13ffd17 	ldw	r4,-12(fp)
  80926c:	0808f880 	call	808f88 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  809270:	e0bffd17 	ldw	r2,-12(fp)
  809274:	10800883 	ldbu	r2,34(r2)
  809278:	10803fcc 	andi	r2,r2,255
  80927c:	108000e8 	cmpgeui	r2,r2,3
  809280:	103ff91e 	bne	r2,zero,809268 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  809284:	00002106 	br	80930c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  809288:	e0bffc17 	ldw	r2,-16(fp)
  80928c:	10800098 	cmpnei	r2,r2,2
  809290:	10001e1e 	bne	r2,zero,80930c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  809294:	e13ffd17 	ldw	r4,-12(fp)
  809298:	0808cd80 	call	808cd8 <lcd_clear_screen>
    break;
  80929c:	00001b06 	br	80930c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8092a0:	e0bffc17 	ldw	r2,-16(fp)
  8092a4:	10800048 	cmpgei	r2,r2,1
  8092a8:	1000181e 	bne	r2,zero,80930c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8092ac:	e0bffd17 	ldw	r2,-12(fp)
  8092b0:	10800843 	ldbu	r2,33(r2)
  8092b4:	10803fcc 	andi	r2,r2,255
  8092b8:	10801428 	cmpgeui	r2,r2,80
  8092bc:	1000131e 	bne	r2,zero,80930c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8092c0:	e0bffd17 	ldw	r2,-12(fp)
  8092c4:	10800883 	ldbu	r2,34(r2)
  8092c8:	10803fcc 	andi	r2,r2,255
  8092cc:	10801924 	muli	r2,r2,100
  8092d0:	10c01004 	addi	r3,r2,64
  8092d4:	e0bffd17 	ldw	r2,-12(fp)
  8092d8:	1887883a 	add	r3,r3,r2
  8092dc:	e0bffd17 	ldw	r2,-12(fp)
  8092e0:	10800843 	ldbu	r2,33(r2)
  8092e4:	10803fcc 	andi	r2,r2,255
  8092e8:	1889883a 	add	r4,r3,r2
  8092ec:	e0bffd17 	ldw	r2,-12(fp)
  8092f0:	10800843 	ldbu	r2,33(r2)
  8092f4:	10c03fcc 	andi	r3,r2,255
  8092f8:	00801404 	movi	r2,80
  8092fc:	10c5c83a 	sub	r2,r2,r3
  809300:	100d883a 	mov	r6,r2
  809304:	01400804 	movi	r5,32
  809308:	08067800 	call	806780 <memset>
    }
    break;
  }
}
  80930c:	e037883a 	mov	sp,fp
  809310:	dfc00117 	ldw	ra,4(sp)
  809314:	df000017 	ldw	fp,0(sp)
  809318:	dec00204 	addi	sp,sp,8
  80931c:	f800283a 	ret

00809320 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  809320:	defff204 	addi	sp,sp,-56
  809324:	dfc00d15 	stw	ra,52(sp)
  809328:	df000c15 	stw	fp,48(sp)
  80932c:	dc000b15 	stw	r16,44(sp)
  809330:	df000b04 	addi	fp,sp,44
  809334:	e13ffc15 	stw	r4,-16(fp)
  809338:	e17ffd15 	stw	r5,-12(fp)
  80933c:	e1bffe15 	stw	r6,-8(fp)
  809340:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  809344:	e0bffe17 	ldw	r2,-8(fp)
  809348:	1007883a 	mov	r3,r2
  80934c:	e0bffd17 	ldw	r2,-12(fp)
  809350:	10c5883a 	add	r2,r2,r3
  809354:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  809358:	e0fffc17 	ldw	r3,-16(fp)
  80935c:	00800044 	movi	r2,1
  809360:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  809364:	0000a206 	br	8095f0 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  809368:	e0bffd17 	ldw	r2,-12(fp)
  80936c:	10800003 	ldbu	r2,0(r2)
  809370:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  809374:	e0bffc17 	ldw	r2,-16(fp)
  809378:	10800903 	ldbu	r2,36(r2)
  80937c:	10803fcc 	andi	r2,r2,255
  809380:	1080201c 	xori	r2,r2,128
  809384:	10bfe004 	addi	r2,r2,-128
  809388:	1004803a 	cmplt	r2,r2,zero
  80938c:	10003b1e 	bne	r2,zero,80947c <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  809390:	e0bffc17 	ldw	r2,-16(fp)
  809394:	10800903 	ldbu	r2,36(r2)
  809398:	10803fcc 	andi	r2,r2,255
  80939c:	1080201c 	xori	r2,r2,128
  8093a0:	10bfe004 	addi	r2,r2,-128
  8093a4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8093a8:	e0bff717 	ldw	r2,-36(fp)
  8093ac:	1004c03a 	cmpne	r2,r2,zero
  8093b0:	1000031e 	bne	r2,zero,8093c0 <altera_avalon_lcd_16207_write+0xa0>
  8093b4:	e0bff807 	ldb	r2,-32(fp)
  8093b8:	108016d8 	cmpnei	r2,r2,91
  8093bc:	1000111e 	bne	r2,zero,809404 <altera_avalon_lcd_16207_write+0xe4>
  8093c0:	e0bff717 	ldw	r2,-36(fp)
  8093c4:	1005003a 	cmpeq	r2,r2,zero
  8093c8:	10001a1e 	bne	r2,zero,809434 <altera_avalon_lcd_16207_write+0x114>
  8093cc:	e0bff807 	ldb	r2,-32(fp)
  8093d0:	1007883a 	mov	r3,r2
  8093d4:	00802074 	movhi	r2,129
  8093d8:	10b58704 	addi	r2,r2,-10724
  8093dc:	10800017 	ldw	r2,0(r2)
  8093e0:	1885883a 	add	r2,r3,r2
  8093e4:	10800003 	ldbu	r2,0(r2)
  8093e8:	10803fcc 	andi	r2,r2,255
  8093ec:	1080010c 	andi	r2,r2,4
  8093f0:	1004c03a 	cmpne	r2,r2,zero
  8093f4:	10000f1e 	bne	r2,zero,809434 <altera_avalon_lcd_16207_write+0x114>
  8093f8:	e0bff807 	ldb	r2,-32(fp)
  8093fc:	10800ee0 	cmpeqi	r2,r2,59
  809400:	10000c1e 	bne	r2,zero,809434 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  809404:	e0fff717 	ldw	r3,-36(fp)
  809408:	e0bffc17 	ldw	r2,-16(fp)
  80940c:	1885883a 	add	r2,r3,r2
  809410:	10800a04 	addi	r2,r2,40
  809414:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  809418:	e17ff807 	ldb	r5,-32(fp)
  80941c:	e13ffc17 	ldw	r4,-16(fp)
  809420:	08090500 	call	809050 <lcd_handle_escape>

        sp->esccount = -1;
  809424:	e0fffc17 	ldw	r3,-16(fp)
  809428:	00bfffc4 	movi	r2,-1
  80942c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  809430:	00006c06 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  809434:	e0bffc17 	ldw	r2,-16(fp)
  809438:	10800903 	ldbu	r2,36(r2)
  80943c:	10803fcc 	andi	r2,r2,255
  809440:	108001e8 	cmpgeui	r2,r2,7
  809444:	1000671e 	bne	r2,zero,8095e4 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  809448:	e0fff717 	ldw	r3,-36(fp)
  80944c:	e0bffc17 	ldw	r2,-16(fp)
  809450:	1885883a 	add	r2,r3,r2
  809454:	10c00a04 	addi	r3,r2,40
  809458:	e0bff803 	ldbu	r2,-32(fp)
  80945c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  809460:	e0bffc17 	ldw	r2,-16(fp)
  809464:	10800903 	ldbu	r2,36(r2)
  809468:	10800044 	addi	r2,r2,1
  80946c:	1007883a 	mov	r3,r2
  809470:	e0bffc17 	ldw	r2,-16(fp)
  809474:	10c00905 	stb	r3,36(r2)
  809478:	00005a06 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80947c:	e0bff807 	ldb	r2,-32(fp)
  809480:	108006d8 	cmpnei	r2,r2,27
  809484:	1000031e 	bne	r2,zero,809494 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  809488:	e0bffc17 	ldw	r2,-16(fp)
  80948c:	10000905 	stb	zero,36(r2)
  809490:	00005406 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  809494:	e0bff807 	ldb	r2,-32(fp)
  809498:	10800358 	cmpnei	r2,r2,13
  80949c:	1000031e 	bne	r2,zero,8094ac <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  8094a0:	e0bffc17 	ldw	r2,-16(fp)
  8094a4:	10000845 	stb	zero,33(r2)
  8094a8:	00004e06 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  8094ac:	e0bff807 	ldb	r2,-32(fp)
  8094b0:	10800298 	cmpnei	r2,r2,10
  8094b4:	1000101e 	bne	r2,zero,8094f8 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  8094b8:	e0bffc17 	ldw	r2,-16(fp)
  8094bc:	10000845 	stb	zero,33(r2)
      sp->y++;
  8094c0:	e0bffc17 	ldw	r2,-16(fp)
  8094c4:	10800883 	ldbu	r2,34(r2)
  8094c8:	10800044 	addi	r2,r2,1
  8094cc:	1007883a 	mov	r3,r2
  8094d0:	e0bffc17 	ldw	r2,-16(fp)
  8094d4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8094d8:	e0bffc17 	ldw	r2,-16(fp)
  8094dc:	10800883 	ldbu	r2,34(r2)
  8094e0:	10803fcc 	andi	r2,r2,255
  8094e4:	108000f0 	cmpltui	r2,r2,3
  8094e8:	10003e1e 	bne	r2,zero,8095e4 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  8094ec:	e13ffc17 	ldw	r4,-16(fp)
  8094f0:	0808f880 	call	808f88 <lcd_scroll_up>
  8094f4:	00003b06 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  8094f8:	e0bff807 	ldb	r2,-32(fp)
  8094fc:	10800218 	cmpnei	r2,r2,8
  809500:	10000c1e 	bne	r2,zero,809534 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  809504:	e0bffc17 	ldw	r2,-16(fp)
  809508:	10800843 	ldbu	r2,33(r2)
  80950c:	10803fcc 	andi	r2,r2,255
  809510:	1005003a 	cmpeq	r2,r2,zero
  809514:	1000331e 	bne	r2,zero,8095e4 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  809518:	e0bffc17 	ldw	r2,-16(fp)
  80951c:	10800843 	ldbu	r2,33(r2)
  809520:	10bfffc4 	addi	r2,r2,-1
  809524:	1007883a 	mov	r3,r2
  809528:	e0bffc17 	ldw	r2,-16(fp)
  80952c:	10c00845 	stb	r3,33(r2)
  809530:	00002c06 	br	8095e4 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  809534:	e0bff807 	ldb	r2,-32(fp)
  809538:	1007883a 	mov	r3,r2
  80953c:	00802074 	movhi	r2,129
  809540:	10b58704 	addi	r2,r2,-10724
  809544:	10800017 	ldw	r2,0(r2)
  809548:	1885883a 	add	r2,r3,r2
  80954c:	10800003 	ldbu	r2,0(r2)
  809550:	10803fcc 	andi	r2,r2,255
  809554:	1080201c 	xori	r2,r2,128
  809558:	10bfe004 	addi	r2,r2,-128
  80955c:	108025cc 	andi	r2,r2,151
  809560:	1005003a 	cmpeq	r2,r2,zero
  809564:	10001f1e 	bne	r2,zero,8095e4 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  809568:	e0bffc17 	ldw	r2,-16(fp)
  80956c:	10800883 	ldbu	r2,34(r2)
  809570:	10803fcc 	andi	r2,r2,255
  809574:	108000b0 	cmpltui	r2,r2,2
  809578:	1000021e 	bne	r2,zero,809584 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80957c:	e13ffc17 	ldw	r4,-16(fp)
  809580:	0808f880 	call	808f88 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  809584:	e0bffc17 	ldw	r2,-16(fp)
  809588:	10800843 	ldbu	r2,33(r2)
  80958c:	10803fcc 	andi	r2,r2,255
  809590:	10801428 	cmpgeui	r2,r2,80
  809594:	10000d1e 	bne	r2,zero,8095cc <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  809598:	e0bffc17 	ldw	r2,-16(fp)
  80959c:	10800883 	ldbu	r2,34(r2)
  8095a0:	11003fcc 	andi	r4,r2,255
  8095a4:	e0bffc17 	ldw	r2,-16(fp)
  8095a8:	10800843 	ldbu	r2,33(r2)
  8095ac:	11403fcc 	andi	r5,r2,255
  8095b0:	e0fffc17 	ldw	r3,-16(fp)
  8095b4:	20801924 	muli	r2,r4,100
  8095b8:	10c5883a 	add	r2,r2,r3
  8095bc:	1145883a 	add	r2,r2,r5
  8095c0:	10c01004 	addi	r3,r2,64
  8095c4:	e0bff803 	ldbu	r2,-32(fp)
  8095c8:	18800005 	stb	r2,0(r3)

      sp->x++;
  8095cc:	e0bffc17 	ldw	r2,-16(fp)
  8095d0:	10800843 	ldbu	r2,33(r2)
  8095d4:	10800044 	addi	r2,r2,1
  8095d8:	1007883a 	mov	r3,r2
  8095dc:	e0bffc17 	ldw	r2,-16(fp)
  8095e0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8095e4:	e0bffd17 	ldw	r2,-12(fp)
  8095e8:	10800044 	addi	r2,r2,1
  8095ec:	e0bffd15 	stw	r2,-12(fp)
  8095f0:	e0fffd17 	ldw	r3,-12(fp)
  8095f4:	e0bffb17 	ldw	r2,-20(fp)
  8095f8:	18bf5b36 	bltu	r3,r2,809368 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8095fc:	00800404 	movi	r2,16
  809600:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  809604:	e03ffa15 	stw	zero,-24(fp)
  809608:	00003606 	br	8096e4 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80960c:	00801404 	movi	r2,80
  809610:	e0bff615 	stw	r2,-40(fp)
  809614:	00001106 	br	80965c <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  809618:	e13ffa17 	ldw	r4,-24(fp)
  80961c:	e0bff617 	ldw	r2,-40(fp)
  809620:	117fffc4 	addi	r5,r2,-1
  809624:	e0fffc17 	ldw	r3,-16(fp)
  809628:	20801924 	muli	r2,r4,100
  80962c:	10c5883a 	add	r2,r2,r3
  809630:	1145883a 	add	r2,r2,r5
  809634:	10801004 	addi	r2,r2,64
  809638:	10800003 	ldbu	r2,0(r2)
  80963c:	10803fcc 	andi	r2,r2,255
  809640:	1080201c 	xori	r2,r2,128
  809644:	10bfe004 	addi	r2,r2,-128
  809648:	10800818 	cmpnei	r2,r2,32
  80964c:	1000061e 	bne	r2,zero,809668 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  809650:	e0bff617 	ldw	r2,-40(fp)
  809654:	10bfffc4 	addi	r2,r2,-1
  809658:	e0bff615 	stw	r2,-40(fp)
  80965c:	e0bff617 	ldw	r2,-40(fp)
  809660:	10800048 	cmpgei	r2,r2,1
  809664:	103fec1e 	bne	r2,zero,809618 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  809668:	e0bff617 	ldw	r2,-40(fp)
  80966c:	10800448 	cmpgei	r2,r2,17
  809670:	1000031e 	bne	r2,zero,809680 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  809674:	00800404 	movi	r2,16
  809678:	e0bff615 	stw	r2,-40(fp)
  80967c:	00000306 	br	80968c <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  809680:	e0bff617 	ldw	r2,-40(fp)
  809684:	10800044 	addi	r2,r2,1
  809688:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80968c:	e13ffa17 	ldw	r4,-24(fp)
  809690:	e0bff617 	ldw	r2,-40(fp)
  809694:	100b883a 	mov	r5,r2
  809698:	e0fffc17 	ldw	r3,-16(fp)
  80969c:	20801924 	muli	r2,r4,100
  8096a0:	10c5883a 	add	r2,r2,r3
  8096a4:	10802404 	addi	r2,r2,144
  8096a8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  8096ac:	e0fff917 	ldw	r3,-28(fp)
  8096b0:	e0bff617 	ldw	r2,-40(fp)
  8096b4:	1880020e 	bge	r3,r2,8096c0 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  8096b8:	e0bff617 	ldw	r2,-40(fp)
  8096bc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8096c0:	e0bffa17 	ldw	r2,-24(fp)
  8096c4:	e0fffc17 	ldw	r3,-16(fp)
  8096c8:	10801924 	muli	r2,r2,100
  8096cc:	10c5883a 	add	r2,r2,r3
  8096d0:	10802404 	addi	r2,r2,144
  8096d4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8096d8:	e0bffa17 	ldw	r2,-24(fp)
  8096dc:	10800044 	addi	r2,r2,1
  8096e0:	e0bffa15 	stw	r2,-24(fp)
  8096e4:	e0bffa17 	ldw	r2,-24(fp)
  8096e8:	10800090 	cmplti	r2,r2,2
  8096ec:	103fc71e 	bne	r2,zero,80960c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8096f0:	e0bff917 	ldw	r2,-28(fp)
  8096f4:	10800448 	cmpgei	r2,r2,17
  8096f8:	1000031e 	bne	r2,zero,809708 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  8096fc:	e0bffc17 	ldw	r2,-16(fp)
  809700:	10000985 	stb	zero,38(r2)
  809704:	00002d06 	br	8097bc <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  809708:	e0bff917 	ldw	r2,-28(fp)
  80970c:	1085883a 	add	r2,r2,r2
  809710:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  809714:	e0bff917 	ldw	r2,-28(fp)
  809718:	1007883a 	mov	r3,r2
  80971c:	e0bffc17 	ldw	r2,-16(fp)
  809720:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  809724:	e03ffa15 	stw	zero,-24(fp)
  809728:	00002106 	br	8097b0 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80972c:	e0bffa17 	ldw	r2,-24(fp)
  809730:	e0fffc17 	ldw	r3,-16(fp)
  809734:	10801924 	muli	r2,r2,100
  809738:	10c5883a 	add	r2,r2,r3
  80973c:	10802404 	addi	r2,r2,144
  809740:	10800043 	ldbu	r2,1(r2)
  809744:	10803fcc 	andi	r2,r2,255
  809748:	1080201c 	xori	r2,r2,128
  80974c:	10bfe004 	addi	r2,r2,-128
  809750:	10800450 	cmplti	r2,r2,17
  809754:	1000131e 	bne	r2,zero,8097a4 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  809758:	e43ffa17 	ldw	r16,-24(fp)
  80975c:	e0bffa17 	ldw	r2,-24(fp)
  809760:	e0fffc17 	ldw	r3,-16(fp)
  809764:	10801924 	muli	r2,r2,100
  809768:	10c5883a 	add	r2,r2,r3
  80976c:	10802404 	addi	r2,r2,144
  809770:	10800043 	ldbu	r2,1(r2)
  809774:	10803fcc 	andi	r2,r2,255
  809778:	1080201c 	xori	r2,r2,128
  80977c:	10bfe004 	addi	r2,r2,-128
  809780:	1008923a 	slli	r4,r2,8
  809784:	e17ff917 	ldw	r5,-28(fp)
  809788:	080b4500 	call	80b450 <__divsi3>
  80978c:	1009883a 	mov	r4,r2
  809790:	e0fffc17 	ldw	r3,-16(fp)
  809794:	80801924 	muli	r2,r16,100
  809798:	10c5883a 	add	r2,r2,r3
  80979c:	10802404 	addi	r2,r2,144
  8097a0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8097a4:	e0bffa17 	ldw	r2,-24(fp)
  8097a8:	10800044 	addi	r2,r2,1
  8097ac:	e0bffa15 	stw	r2,-24(fp)
  8097b0:	e0bffa17 	ldw	r2,-24(fp)
  8097b4:	10800090 	cmplti	r2,r2,2
  8097b8:	103fdc1e 	bne	r2,zero,80972c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8097bc:	e0bffc17 	ldw	r2,-16(fp)
  8097c0:	10800943 	ldbu	r2,37(r2)
  8097c4:	10803fcc 	andi	r2,r2,255
  8097c8:	1080201c 	xori	r2,r2,128
  8097cc:	10bfe004 	addi	r2,r2,-128
  8097d0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8097d4:	e13ffc17 	ldw	r4,-16(fp)
  8097d8:	0808d9c0 	call	808d9c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8097dc:	e0bffc17 	ldw	r2,-16(fp)
  8097e0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8097e4:	e0bffc17 	ldw	r2,-16(fp)
  8097e8:	10800943 	ldbu	r2,37(r2)
  8097ec:	10c03fcc 	andi	r3,r2,255
  8097f0:	18c0201c 	xori	r3,r3,128
  8097f4:	18ffe004 	addi	r3,r3,-128
  8097f8:	e0bff517 	ldw	r2,-44(fp)
  8097fc:	18800426 	beq	r3,r2,809810 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  809800:	e0fffc17 	ldw	r3,-16(fp)
  809804:	00800044 	movi	r2,1
  809808:	188009c5 	stb	r2,39(r3)
  }
  80980c:	003feb06 	br	8097bc <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  809810:	e0bffe17 	ldw	r2,-8(fp)
}
  809814:	e037883a 	mov	sp,fp
  809818:	dfc00217 	ldw	ra,8(sp)
  80981c:	df000117 	ldw	fp,4(sp)
  809820:	dc000017 	ldw	r16,0(sp)
  809824:	dec00304 	addi	sp,sp,12
  809828:	f800283a 	ret

0080982c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80982c:	defffc04 	addi	sp,sp,-16
  809830:	dfc00315 	stw	ra,12(sp)
  809834:	df000215 	stw	fp,8(sp)
  809838:	df000204 	addi	fp,sp,8
  80983c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  809840:	e0bfff17 	ldw	r2,-4(fp)
  809844:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  809848:	e0bffe17 	ldw	r2,-8(fp)
  80984c:	10800943 	ldbu	r2,37(r2)
  809850:	10803fcc 	andi	r2,r2,255
  809854:	1080201c 	xori	r2,r2,128
  809858:	10bfe004 	addi	r2,r2,-128
  80985c:	10c00044 	addi	r3,r2,1
  809860:	e0bffe17 	ldw	r2,-8(fp)
  809864:	10800983 	ldbu	r2,38(r2)
  809868:	10803fcc 	andi	r2,r2,255
  80986c:	1080201c 	xori	r2,r2,128
  809870:	10bfe004 	addi	r2,r2,-128
  809874:	18800316 	blt	r3,r2,809884 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  809878:	e0bffe17 	ldw	r2,-8(fp)
  80987c:	10000945 	stb	zero,37(r2)
  809880:	00000606 	br	80989c <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  809884:	e0bffe17 	ldw	r2,-8(fp)
  809888:	10800943 	ldbu	r2,37(r2)
  80988c:	10800044 	addi	r2,r2,1
  809890:	1007883a 	mov	r3,r2
  809894:	e0bffe17 	ldw	r2,-8(fp)
  809898:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80989c:	e0bffe17 	ldw	r2,-8(fp)
  8098a0:	10800983 	ldbu	r2,38(r2)
  8098a4:	10803fcc 	andi	r2,r2,255
  8098a8:	1080201c 	xori	r2,r2,128
  8098ac:	10bfe004 	addi	r2,r2,-128
  8098b0:	10800050 	cmplti	r2,r2,1
  8098b4:	1000091e 	bne	r2,zero,8098dc <alt_lcd_16207_timeout+0xb0>
  8098b8:	e0bffe17 	ldw	r2,-8(fp)
  8098bc:	108009c3 	ldbu	r2,39(r2)
  8098c0:	10803fcc 	andi	r2,r2,255
  8098c4:	1080201c 	xori	r2,r2,128
  8098c8:	10bfe004 	addi	r2,r2,-128
  8098cc:	1004c03a 	cmpne	r2,r2,zero
  8098d0:	1000021e 	bne	r2,zero,8098dc <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8098d4:	e13ffe17 	ldw	r4,-8(fp)
  8098d8:	0808d9c0 	call	808d9c <lcd_repaint_screen>

  return sp->period;
  8098dc:	e0bffe17 	ldw	r2,-8(fp)
  8098e0:	10800717 	ldw	r2,28(r2)
}
  8098e4:	e037883a 	mov	sp,fp
  8098e8:	dfc00117 	ldw	ra,4(sp)
  8098ec:	df000017 	ldw	fp,0(sp)
  8098f0:	dec00204 	addi	sp,sp,8
  8098f4:	f800283a 	ret

008098f8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8098f8:	defffc04 	addi	sp,sp,-16
  8098fc:	dfc00315 	stw	ra,12(sp)
  809900:	df000215 	stw	fp,8(sp)
  809904:	df000204 	addi	fp,sp,8
  809908:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80990c:	e0bfff17 	ldw	r2,-4(fp)
  809910:	10800017 	ldw	r2,0(r2)
  809914:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  809918:	e0bfff17 	ldw	r2,-4(fp)
  80991c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  809920:	010ea604 	movi	r4,15000
  809924:	080ae000 	call	80ae00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  809928:	e0bffe17 	ldw	r2,-8(fp)
  80992c:	1007883a 	mov	r3,r2
  809930:	00800c04 	movi	r2,48
  809934:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  809938:	01040104 	movi	r4,4100
  80993c:	080ae000 	call	80ae00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  809940:	e0bffe17 	ldw	r2,-8(fp)
  809944:	1007883a 	mov	r3,r2
  809948:	00800c04 	movi	r2,48
  80994c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  809950:	0100fa04 	movi	r4,1000
  809954:	080ae000 	call	80ae00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  809958:	e0bffe17 	ldw	r2,-8(fp)
  80995c:	1007883a 	mov	r3,r2
  809960:	00800c04 	movi	r2,48
  809964:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  809968:	e13fff17 	ldw	r4,-4(fp)
  80996c:	01400e04 	movi	r5,56
  809970:	0808b4c0 	call	808b4c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  809974:	e13fff17 	ldw	r4,-4(fp)
  809978:	01400204 	movi	r5,8
  80997c:	0808b4c0 	call	808b4c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  809980:	e13fff17 	ldw	r4,-4(fp)
  809984:	0808cd80 	call	808cd8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  809988:	e13fff17 	ldw	r4,-4(fp)
  80998c:	01400184 	movi	r5,6
  809990:	0808b4c0 	call	808b4c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  809994:	e13fff17 	ldw	r4,-4(fp)
  809998:	01400304 	movi	r5,12
  80999c:	0808b4c0 	call	808b4c <lcd_write_command>

  sp->esccount = -1;
  8099a0:	e0ffff17 	ldw	r3,-4(fp)
  8099a4:	00bfffc4 	movi	r2,-1
  8099a8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8099ac:	e0bfff17 	ldw	r2,-4(fp)
  8099b0:	11000a04 	addi	r4,r2,40
  8099b4:	000b883a 	mov	r5,zero
  8099b8:	01800204 	movi	r6,8
  8099bc:	08067800 	call	806780 <memset>

  sp->scrollpos = 0;
  8099c0:	e0bfff17 	ldw	r2,-4(fp)
  8099c4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8099c8:	e0bfff17 	ldw	r2,-4(fp)
  8099cc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8099d0:	e0bfff17 	ldw	r2,-4(fp)
  8099d4:	100009c5 	stb	zero,39(r2)
  8099d8:	00802074 	movhi	r2,129
  8099dc:	10bcfd04 	addi	r2,r2,-3084
  8099e0:	10800017 	ldw	r2,0(r2)
  8099e4:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8099e8:	01400284 	movi	r5,10
  8099ec:	080b5100 	call	80b510 <__udivsi3>
  8099f0:	1007883a 	mov	r3,r2
  8099f4:	e0bfff17 	ldw	r2,-4(fp)
  8099f8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8099fc:	e0bfff17 	ldw	r2,-4(fp)
  809a00:	11000104 	addi	r4,r2,4
  809a04:	e0bfff17 	ldw	r2,-4(fp)
  809a08:	10800717 	ldw	r2,28(r2)
  809a0c:	100b883a 	mov	r5,r2
  809a10:	01802074 	movhi	r6,129
  809a14:	31a60b04 	addi	r6,r6,-26580
  809a18:	e1ffff17 	ldw	r7,-4(fp)
  809a1c:	0806d440 	call	806d44 <alt_alarm_start>
}
  809a20:	e037883a 	mov	sp,fp
  809a24:	dfc00117 	ldw	ra,4(sp)
  809a28:	df000017 	ldw	fp,0(sp)
  809a2c:	dec00204 	addi	sp,sp,8
  809a30:	f800283a 	ret

00809a34 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  809a34:	defffa04 	addi	sp,sp,-24
  809a38:	dfc00515 	stw	ra,20(sp)
  809a3c:	df000415 	stw	fp,16(sp)
  809a40:	df000404 	addi	fp,sp,16
  809a44:	e13ffd15 	stw	r4,-12(fp)
  809a48:	e17ffe15 	stw	r5,-8(fp)
  809a4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  809a50:	e0bffd17 	ldw	r2,-12(fp)
  809a54:	10800017 	ldw	r2,0(r2)
  809a58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  809a5c:	e0bffc17 	ldw	r2,-16(fp)
  809a60:	11000a04 	addi	r4,r2,40
  809a64:	e0bffd17 	ldw	r2,-12(fp)
  809a68:	11c00217 	ldw	r7,8(r2)
  809a6c:	e17ffe17 	ldw	r5,-8(fp)
  809a70:	e1bfff17 	ldw	r6,-4(fp)
  809a74:	08093200 	call	809320 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  809a78:	e037883a 	mov	sp,fp
  809a7c:	dfc00117 	ldw	ra,4(sp)
  809a80:	df000017 	ldw	fp,0(sp)
  809a84:	dec00204 	addi	sp,sp,8
  809a88:	f800283a 	ret

00809a8c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  809a8c:	defffa04 	addi	sp,sp,-24
  809a90:	dfc00515 	stw	ra,20(sp)
  809a94:	df000415 	stw	fp,16(sp)
  809a98:	df000404 	addi	fp,sp,16
  809a9c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  809aa0:	e0bfff17 	ldw	r2,-4(fp)
  809aa4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  809aa8:	e0bfff17 	ldw	r2,-4(fp)
  809aac:	10800104 	addi	r2,r2,4
  809ab0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ab4:	0005303a 	rdctl	r2,status
  809ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809abc:	e0fffd17 	ldw	r3,-12(fp)
  809ac0:	00bfff84 	movi	r2,-2
  809ac4:	1884703a 	and	r2,r3,r2
  809ac8:	1001703a 	wrctl	status,r2
  
  return context;
  809acc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  809ad0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  809ad4:	0807d140 	call	807d14 <alt_tick>
  809ad8:	e0bffe17 	ldw	r2,-8(fp)
  809adc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ae0:	e0bffc17 	ldw	r2,-16(fp)
  809ae4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  809ae8:	e037883a 	mov	sp,fp
  809aec:	dfc00117 	ldw	ra,4(sp)
  809af0:	df000017 	ldw	fp,0(sp)
  809af4:	dec00204 	addi	sp,sp,8
  809af8:	f800283a 	ret

00809afc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  809afc:	defff804 	addi	sp,sp,-32
  809b00:	dfc00715 	stw	ra,28(sp)
  809b04:	df000615 	stw	fp,24(sp)
  809b08:	df000604 	addi	fp,sp,24
  809b0c:	e13ffc15 	stw	r4,-16(fp)
  809b10:	e17ffd15 	stw	r5,-12(fp)
  809b14:	e1bffe15 	stw	r6,-8(fp)
  809b18:	e1ffff15 	stw	r7,-4(fp)
  809b1c:	e0bfff17 	ldw	r2,-4(fp)
  809b20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  809b24:	00802074 	movhi	r2,129
  809b28:	10bcfd04 	addi	r2,r2,-3084
  809b2c:	10800017 	ldw	r2,0(r2)
  809b30:	1004c03a 	cmpne	r2,r2,zero
  809b34:	1000041e 	bne	r2,zero,809b48 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  809b38:	00c02074 	movhi	r3,129
  809b3c:	18fcfd04 	addi	r3,r3,-3084
  809b40:	e0bffb17 	ldw	r2,-20(fp)
  809b44:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  809b48:	e0bffc17 	ldw	r2,-16(fp)
  809b4c:	10800104 	addi	r2,r2,4
  809b50:	1007883a 	mov	r3,r2
  809b54:	008001c4 	movi	r2,7
  809b58:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  809b5c:	d8000015 	stw	zero,0(sp)
  809b60:	e13ffd17 	ldw	r4,-12(fp)
  809b64:	e17ffe17 	ldw	r5,-8(fp)
  809b68:	01802074 	movhi	r6,129
  809b6c:	31a6a304 	addi	r6,r6,-25972
  809b70:	e1fffc17 	ldw	r7,-16(fp)
  809b74:	080a9f80 	call	80a9f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  809b78:	e037883a 	mov	sp,fp
  809b7c:	dfc00117 	ldw	ra,4(sp)
  809b80:	df000017 	ldw	fp,0(sp)
  809b84:	dec00204 	addi	sp,sp,8
  809b88:	f800283a 	ret

00809b8c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  809b8c:	defffa04 	addi	sp,sp,-24
  809b90:	dfc00515 	stw	ra,20(sp)
  809b94:	df000415 	stw	fp,16(sp)
  809b98:	df000404 	addi	fp,sp,16
  809b9c:	e13ffd15 	stw	r4,-12(fp)
  809ba0:	e17ffe15 	stw	r5,-8(fp)
  809ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809ba8:	e0bffd17 	ldw	r2,-12(fp)
  809bac:	10800017 	ldw	r2,0(r2)
  809bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  809bb4:	e0bffc17 	ldw	r2,-16(fp)
  809bb8:	11000a04 	addi	r4,r2,40
  809bbc:	e0bffd17 	ldw	r2,-12(fp)
  809bc0:	11c00217 	ldw	r7,8(r2)
  809bc4:	e17ffe17 	ldw	r5,-8(fp)
  809bc8:	e1bfff17 	ldw	r6,-4(fp)
  809bcc:	080a0840 	call	80a084 <altera_avalon_uart_read>
      fd->fd_flags);
}
  809bd0:	e037883a 	mov	sp,fp
  809bd4:	dfc00117 	ldw	ra,4(sp)
  809bd8:	df000017 	ldw	fp,0(sp)
  809bdc:	dec00204 	addi	sp,sp,8
  809be0:	f800283a 	ret

00809be4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  809be4:	defffa04 	addi	sp,sp,-24
  809be8:	dfc00515 	stw	ra,20(sp)
  809bec:	df000415 	stw	fp,16(sp)
  809bf0:	df000404 	addi	fp,sp,16
  809bf4:	e13ffd15 	stw	r4,-12(fp)
  809bf8:	e17ffe15 	stw	r5,-8(fp)
  809bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809c00:	e0bffd17 	ldw	r2,-12(fp)
  809c04:	10800017 	ldw	r2,0(r2)
  809c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  809c0c:	e0bffc17 	ldw	r2,-16(fp)
  809c10:	11000a04 	addi	r4,r2,40
  809c14:	e0bffd17 	ldw	r2,-12(fp)
  809c18:	11c00217 	ldw	r7,8(r2)
  809c1c:	e17ffe17 	ldw	r5,-8(fp)
  809c20:	e1bfff17 	ldw	r6,-4(fp)
  809c24:	080a3140 	call	80a314 <altera_avalon_uart_write>
      fd->fd_flags);
}
  809c28:	e037883a 	mov	sp,fp
  809c2c:	dfc00117 	ldw	ra,4(sp)
  809c30:	df000017 	ldw	fp,0(sp)
  809c34:	dec00204 	addi	sp,sp,8
  809c38:	f800283a 	ret

00809c3c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  809c3c:	defffc04 	addi	sp,sp,-16
  809c40:	dfc00315 	stw	ra,12(sp)
  809c44:	df000215 	stw	fp,8(sp)
  809c48:	df000204 	addi	fp,sp,8
  809c4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809c50:	e0bfff17 	ldw	r2,-4(fp)
  809c54:	10800017 	ldw	r2,0(r2)
  809c58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  809c5c:	e0bffe17 	ldw	r2,-8(fp)
  809c60:	11000a04 	addi	r4,r2,40
  809c64:	e0bfff17 	ldw	r2,-4(fp)
  809c68:	11400217 	ldw	r5,8(r2)
  809c6c:	080a0240 	call	80a024 <altera_avalon_uart_close>
}
  809c70:	e037883a 	mov	sp,fp
  809c74:	dfc00117 	ldw	ra,4(sp)
  809c78:	df000017 	ldw	fp,0(sp)
  809c7c:	dec00204 	addi	sp,sp,8
  809c80:	f800283a 	ret

00809c84 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  809c84:	defff704 	addi	sp,sp,-36
  809c88:	dfc00815 	stw	ra,32(sp)
  809c8c:	df000715 	stw	fp,28(sp)
  809c90:	df000704 	addi	fp,sp,28
  809c94:	e13ffc15 	stw	r4,-16(fp)
  809c98:	e17ffd15 	stw	r5,-12(fp)
  809c9c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  809ca0:	e0bffc17 	ldw	r2,-16(fp)
  809ca4:	10800017 	ldw	r2,0(r2)
  809ca8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  809cac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  809cb0:	1004c03a 	cmpne	r2,r2,zero
  809cb4:	1000061e 	bne	r2,zero,809cd0 <altera_avalon_uart_init+0x4c>
  809cb8:	0005883a 	mov	r2,zero
  809cbc:	1004c03a 	cmpne	r2,r2,zero
  809cc0:	1000031e 	bne	r2,zero,809cd0 <altera_avalon_uart_init+0x4c>
  809cc4:	0005883a 	mov	r2,zero
  809cc8:	1005003a 	cmpeq	r2,r2,zero
  809ccc:	1000031e 	bne	r2,zero,809cdc <altera_avalon_uart_init+0x58>
  809cd0:	00800044 	movi	r2,1
  809cd4:	e0bfff15 	stw	r2,-4(fp)
  809cd8:	00000106 	br	809ce0 <altera_avalon_uart_init+0x5c>
  809cdc:	e03fff15 	stw	zero,-4(fp)
  809ce0:	e0bfff17 	ldw	r2,-4(fp)
  809ce4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  809ce8:	e0bffa17 	ldw	r2,-24(fp)
  809cec:	1004c03a 	cmpne	r2,r2,zero
  809cf0:	1000111e 	bne	r2,zero,809d38 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  809cf4:	e0fffc17 	ldw	r3,-16(fp)
  809cf8:	00832004 	movi	r2,3200
  809cfc:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  809d00:	e0bffb17 	ldw	r2,-20(fp)
  809d04:	11000304 	addi	r4,r2,12
  809d08:	e0bffc17 	ldw	r2,-16(fp)
  809d0c:	10800117 	ldw	r2,4(r2)
  809d10:	1007883a 	mov	r3,r2
  809d14:	2005883a 	mov	r2,r4
  809d18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  809d1c:	d8000015 	stw	zero,0(sp)
  809d20:	e13ffd17 	ldw	r4,-12(fp)
  809d24:	e17ffe17 	ldw	r5,-8(fp)
  809d28:	01802074 	movhi	r6,129
  809d2c:	31a75304 	addi	r6,r6,-25268
  809d30:	e1fffc17 	ldw	r7,-16(fp)
  809d34:	080a9f80 	call	80a9f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  809d38:	e037883a 	mov	sp,fp
  809d3c:	dfc00117 	ldw	ra,4(sp)
  809d40:	df000017 	ldw	fp,0(sp)
  809d44:	dec00204 	addi	sp,sp,8
  809d48:	f800283a 	ret

00809d4c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  809d4c:	defffa04 	addi	sp,sp,-24
  809d50:	dfc00515 	stw	ra,20(sp)
  809d54:	df000415 	stw	fp,16(sp)
  809d58:	df000404 	addi	fp,sp,16
  809d5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  809d60:	e0bfff17 	ldw	r2,-4(fp)
  809d64:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  809d68:	e0bffd17 	ldw	r2,-12(fp)
  809d6c:	10800017 	ldw	r2,0(r2)
  809d70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  809d74:	e0bffc17 	ldw	r2,-16(fp)
  809d78:	10800204 	addi	r2,r2,8
  809d7c:	10800037 	ldwio	r2,0(r2)
  809d80:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  809d84:	e0bffc17 	ldw	r2,-16(fp)
  809d88:	10800204 	addi	r2,r2,8
  809d8c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  809d90:	e0bffc17 	ldw	r2,-16(fp)
  809d94:	10800204 	addi	r2,r2,8
  809d98:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  809d9c:	e0bffe17 	ldw	r2,-8(fp)
  809da0:	1080200c 	andi	r2,r2,128
  809da4:	1005003a 	cmpeq	r2,r2,zero
  809da8:	1000031e 	bne	r2,zero,809db8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  809dac:	e13ffd17 	ldw	r4,-12(fp)
  809db0:	e17ffe17 	ldw	r5,-8(fp)
  809db4:	0809de80 	call	809de8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  809db8:	e0bffe17 	ldw	r2,-8(fp)
  809dbc:	1081100c 	andi	r2,r2,1088
  809dc0:	1005003a 	cmpeq	r2,r2,zero
  809dc4:	1000031e 	bne	r2,zero,809dd4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  809dc8:	e13ffd17 	ldw	r4,-12(fp)
  809dcc:	e17ffe17 	ldw	r5,-8(fp)
  809dd0:	0809ec80 	call	809ec8 <altera_avalon_uart_txirq>
  }
  

}
  809dd4:	e037883a 	mov	sp,fp
  809dd8:	dfc00117 	ldw	ra,4(sp)
  809ddc:	df000017 	ldw	fp,0(sp)
  809de0:	dec00204 	addi	sp,sp,8
  809de4:	f800283a 	ret

00809de8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809de8:	defffc04 	addi	sp,sp,-16
  809dec:	df000315 	stw	fp,12(sp)
  809df0:	df000304 	addi	fp,sp,12
  809df4:	e13ffe15 	stw	r4,-8(fp)
  809df8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  809dfc:	e0bfff17 	ldw	r2,-4(fp)
  809e00:	108000cc 	andi	r2,r2,3
  809e04:	1004c03a 	cmpne	r2,r2,zero
  809e08:	10002b1e 	bne	r2,zero,809eb8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  809e0c:	e0bffe17 	ldw	r2,-8(fp)
  809e10:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809e14:	e0bffe17 	ldw	r2,-8(fp)
  809e18:	10800317 	ldw	r2,12(r2)
  809e1c:	10800044 	addi	r2,r2,1
  809e20:	10800fcc 	andi	r2,r2,63
  809e24:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  809e28:	e0bffe17 	ldw	r2,-8(fp)
  809e2c:	11000317 	ldw	r4,12(r2)
  809e30:	e0bffe17 	ldw	r2,-8(fp)
  809e34:	10800017 	ldw	r2,0(r2)
  809e38:	10800037 	ldwio	r2,0(r2)
  809e3c:	1007883a 	mov	r3,r2
  809e40:	e0bffe17 	ldw	r2,-8(fp)
  809e44:	2085883a 	add	r2,r4,r2
  809e48:	10800704 	addi	r2,r2,28
  809e4c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  809e50:	e0fffe17 	ldw	r3,-8(fp)
  809e54:	e0bffd17 	ldw	r2,-12(fp)
  809e58:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809e5c:	e0bffe17 	ldw	r2,-8(fp)
  809e60:	10800317 	ldw	r2,12(r2)
  809e64:	10800044 	addi	r2,r2,1
  809e68:	10800fcc 	andi	r2,r2,63
  809e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  809e70:	e0bffe17 	ldw	r2,-8(fp)
  809e74:	10c00217 	ldw	r3,8(r2)
  809e78:	e0bffd17 	ldw	r2,-12(fp)
  809e7c:	18800e1e 	bne	r3,r2,809eb8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809e80:	e0bffe17 	ldw	r2,-8(fp)
  809e84:	10c00117 	ldw	r3,4(r2)
  809e88:	00bfdfc4 	movi	r2,-129
  809e8c:	1886703a 	and	r3,r3,r2
  809e90:	e0bffe17 	ldw	r2,-8(fp)
  809e94:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  809e98:	e0bffe17 	ldw	r2,-8(fp)
  809e9c:	10800017 	ldw	r2,0(r2)
  809ea0:	11000304 	addi	r4,r2,12
  809ea4:	e0bffe17 	ldw	r2,-8(fp)
  809ea8:	10800117 	ldw	r2,4(r2)
  809eac:	1007883a 	mov	r3,r2
  809eb0:	2005883a 	mov	r2,r4
  809eb4:	10c00035 	stwio	r3,0(r2)
  }   
}
  809eb8:	e037883a 	mov	sp,fp
  809ebc:	df000017 	ldw	fp,0(sp)
  809ec0:	dec00104 	addi	sp,sp,4
  809ec4:	f800283a 	ret

00809ec8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809ec8:	defffd04 	addi	sp,sp,-12
  809ecc:	df000215 	stw	fp,8(sp)
  809ed0:	df000204 	addi	fp,sp,8
  809ed4:	e13ffe15 	stw	r4,-8(fp)
  809ed8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  809edc:	e0bffe17 	ldw	r2,-8(fp)
  809ee0:	10c00417 	ldw	r3,16(r2)
  809ee4:	e0bffe17 	ldw	r2,-8(fp)
  809ee8:	10800517 	ldw	r2,20(r2)
  809eec:	18803626 	beq	r3,r2,809fc8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809ef0:	e0bffe17 	ldw	r2,-8(fp)
  809ef4:	10800617 	ldw	r2,24(r2)
  809ef8:	1080008c 	andi	r2,r2,2
  809efc:	1005003a 	cmpeq	r2,r2,zero
  809f00:	1000041e 	bne	r2,zero,809f14 <altera_avalon_uart_txirq+0x4c>
  809f04:	e0bfff17 	ldw	r2,-4(fp)
  809f08:	1082000c 	andi	r2,r2,2048
  809f0c:	1005003a 	cmpeq	r2,r2,zero
  809f10:	10001e1e 	bne	r2,zero,809f8c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  809f14:	e0bffe17 	ldw	r2,-8(fp)
  809f18:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  809f1c:	e0bffe17 	ldw	r2,-8(fp)
  809f20:	10800017 	ldw	r2,0(r2)
  809f24:	11000104 	addi	r4,r2,4
  809f28:	e0bffe17 	ldw	r2,-8(fp)
  809f2c:	10c00417 	ldw	r3,16(r2)
  809f30:	e0bffe17 	ldw	r2,-8(fp)
  809f34:	1885883a 	add	r2,r3,r2
  809f38:	10801704 	addi	r2,r2,92
  809f3c:	10800003 	ldbu	r2,0(r2)
  809f40:	10c03fcc 	andi	r3,r2,255
  809f44:	2005883a 	mov	r2,r4
  809f48:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  809f4c:	e0bffe17 	ldw	r2,-8(fp)
  809f50:	10800417 	ldw	r2,16(r2)
  809f54:	10c00044 	addi	r3,r2,1
  809f58:	e0bffe17 	ldw	r2,-8(fp)
  809f5c:	10c00415 	stw	r3,16(r2)
  809f60:	e0bffe17 	ldw	r2,-8(fp)
  809f64:	10800417 	ldw	r2,16(r2)
  809f68:	10c00fcc 	andi	r3,r2,63
  809f6c:	e0bffe17 	ldw	r2,-8(fp)
  809f70:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809f74:	e0bffe17 	ldw	r2,-8(fp)
  809f78:	10800117 	ldw	r2,4(r2)
  809f7c:	10c01014 	ori	r3,r2,64
  809f80:	e0bffe17 	ldw	r2,-8(fp)
  809f84:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809f88:	00000f06 	br	809fc8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  809f8c:	e0bffe17 	ldw	r2,-8(fp)
  809f90:	10800017 	ldw	r2,0(r2)
  809f94:	10800204 	addi	r2,r2,8
  809f98:	10800037 	ldwio	r2,0(r2)
  809f9c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809fa0:	e0bfff17 	ldw	r2,-4(fp)
  809fa4:	1082000c 	andi	r2,r2,2048
  809fa8:	1004c03a 	cmpne	r2,r2,zero
  809fac:	1000061e 	bne	r2,zero,809fc8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809fb0:	e0bffe17 	ldw	r2,-8(fp)
  809fb4:	10c00117 	ldw	r3,4(r2)
  809fb8:	00bfefc4 	movi	r2,-65
  809fbc:	1886703a 	and	r3,r3,r2
  809fc0:	e0bffe17 	ldw	r2,-8(fp)
  809fc4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  809fc8:	e0bffe17 	ldw	r2,-8(fp)
  809fcc:	10c00417 	ldw	r3,16(r2)
  809fd0:	e0bffe17 	ldw	r2,-8(fp)
  809fd4:	10800517 	ldw	r2,20(r2)
  809fd8:	1880061e 	bne	r3,r2,809ff4 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  809fdc:	e0bffe17 	ldw	r2,-8(fp)
  809fe0:	10c00117 	ldw	r3,4(r2)
  809fe4:	00beefc4 	movi	r2,-1089
  809fe8:	1886703a 	and	r3,r3,r2
  809fec:	e0bffe17 	ldw	r2,-8(fp)
  809ff0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809ff4:	e0bffe17 	ldw	r2,-8(fp)
  809ff8:	10800017 	ldw	r2,0(r2)
  809ffc:	11000304 	addi	r4,r2,12
  80a000:	e0bffe17 	ldw	r2,-8(fp)
  80a004:	10800117 	ldw	r2,4(r2)
  80a008:	1007883a 	mov	r3,r2
  80a00c:	2005883a 	mov	r2,r4
  80a010:	10c00035 	stwio	r3,0(r2)
}
  80a014:	e037883a 	mov	sp,fp
  80a018:	df000017 	ldw	fp,0(sp)
  80a01c:	dec00104 	addi	sp,sp,4
  80a020:	f800283a 	ret

0080a024 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80a024:	defffc04 	addi	sp,sp,-16
  80a028:	df000315 	stw	fp,12(sp)
  80a02c:	df000304 	addi	fp,sp,12
  80a030:	e13ffd15 	stw	r4,-12(fp)
  80a034:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80a038:	00000706 	br	80a058 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80a03c:	e0bffe17 	ldw	r2,-8(fp)
  80a040:	1090000c 	andi	r2,r2,16384
  80a044:	1005003a 	cmpeq	r2,r2,zero
  80a048:	1000031e 	bne	r2,zero,80a058 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80a04c:	00bffd44 	movi	r2,-11
  80a050:	e0bfff15 	stw	r2,-4(fp)
  80a054:	00000606 	br	80a070 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80a058:	e0bffd17 	ldw	r2,-12(fp)
  80a05c:	10c00417 	ldw	r3,16(r2)
  80a060:	e0bffd17 	ldw	r2,-12(fp)
  80a064:	10800517 	ldw	r2,20(r2)
  80a068:	18bff41e 	bne	r3,r2,80a03c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80a06c:	e03fff15 	stw	zero,-4(fp)
  80a070:	e0bfff17 	ldw	r2,-4(fp)
}
  80a074:	e037883a 	mov	sp,fp
  80a078:	df000017 	ldw	fp,0(sp)
  80a07c:	dec00104 	addi	sp,sp,4
  80a080:	f800283a 	ret

0080a084 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80a084:	defff004 	addi	sp,sp,-64
  80a088:	dfc00f15 	stw	ra,60(sp)
  80a08c:	df000e15 	stw	fp,56(sp)
  80a090:	df000e04 	addi	fp,sp,56
  80a094:	e13ffb15 	stw	r4,-20(fp)
  80a098:	e17ffc15 	stw	r5,-16(fp)
  80a09c:	e1bffd15 	stw	r6,-12(fp)
  80a0a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80a0a4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80a0a8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80a0ac:	e0bffe17 	ldw	r2,-8(fp)
  80a0b0:	1090000c 	andi	r2,r2,16384
  80a0b4:	1005003a 	cmpeq	r2,r2,zero
  80a0b8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80a0bc:	e0bffb17 	ldw	r2,-20(fp)
  80a0c0:	10800217 	ldw	r2,8(r2)
  80a0c4:	10800044 	addi	r2,r2,1
  80a0c8:	10800fcc 	andi	r2,r2,63
  80a0cc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80a0d0:	00001906 	br	80a138 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80a0d4:	e0bff617 	ldw	r2,-40(fp)
  80a0d8:	10800044 	addi	r2,r2,1
  80a0dc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80a0e0:	e0bffb17 	ldw	r2,-20(fp)
  80a0e4:	10c00217 	ldw	r3,8(r2)
  80a0e8:	e0bffb17 	ldw	r2,-20(fp)
  80a0ec:	1885883a 	add	r2,r3,r2
  80a0f0:	10800704 	addi	r2,r2,28
  80a0f4:	10800003 	ldbu	r2,0(r2)
  80a0f8:	1007883a 	mov	r3,r2
  80a0fc:	e0bffc17 	ldw	r2,-16(fp)
  80a100:	10c00005 	stb	r3,0(r2)
  80a104:	e0bffc17 	ldw	r2,-16(fp)
  80a108:	10800044 	addi	r2,r2,1
  80a10c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80a110:	e0bffb17 	ldw	r2,-20(fp)
  80a114:	10800217 	ldw	r2,8(r2)
  80a118:	10c00044 	addi	r3,r2,1
  80a11c:	e0bffb17 	ldw	r2,-20(fp)
  80a120:	10c00215 	stw	r3,8(r2)
  80a124:	e0bffb17 	ldw	r2,-20(fp)
  80a128:	10800217 	ldw	r2,8(r2)
  80a12c:	10c00fcc 	andi	r3,r2,63
  80a130:	e0bffb17 	ldw	r2,-20(fp)
  80a134:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80a138:	e0fff617 	ldw	r3,-40(fp)
  80a13c:	e0bffd17 	ldw	r2,-12(fp)
  80a140:	1880050e 	bge	r3,r2,80a158 <altera_avalon_uart_read+0xd4>
  80a144:	e0bffb17 	ldw	r2,-20(fp)
  80a148:	10c00217 	ldw	r3,8(r2)
  80a14c:	e0bffb17 	ldw	r2,-20(fp)
  80a150:	10800317 	ldw	r2,12(r2)
  80a154:	18bfdf1e 	bne	r3,r2,80a0d4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80a158:	e0bff617 	ldw	r2,-40(fp)
  80a15c:	1004c03a 	cmpne	r2,r2,zero
  80a160:	1000271e 	bne	r2,zero,80a200 <altera_avalon_uart_read+0x17c>
  80a164:	e0bffb17 	ldw	r2,-20(fp)
  80a168:	10c00217 	ldw	r3,8(r2)
  80a16c:	e0bffb17 	ldw	r2,-20(fp)
  80a170:	10800317 	ldw	r2,12(r2)
  80a174:	1880221e 	bne	r3,r2,80a200 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80a178:	e0bff917 	ldw	r2,-28(fp)
  80a17c:	1004c03a 	cmpne	r2,r2,zero
  80a180:	1000061e 	bne	r2,zero,80a19c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80a184:	080a2b40 	call	80a2b4 <alt_get_errno>
  80a188:	00c002c4 	movi	r3,11
  80a18c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80a190:	00800044 	movi	r2,1
  80a194:	e0bff705 	stb	r2,-36(fp)
        break;
  80a198:	00001f06 	br	80a218 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a19c:	0005303a 	rdctl	r2,status
  80a1a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a1a4:	e0fff517 	ldw	r3,-44(fp)
  80a1a8:	00bfff84 	movi	r2,-2
  80a1ac:	1884703a 	and	r2,r3,r2
  80a1b0:	1001703a 	wrctl	status,r2
  
  return context;
  80a1b4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80a1b8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80a1bc:	e0bffb17 	ldw	r2,-20(fp)
  80a1c0:	10800117 	ldw	r2,4(r2)
  80a1c4:	10c02014 	ori	r3,r2,128
  80a1c8:	e0bffb17 	ldw	r2,-20(fp)
  80a1cc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a1d0:	e0bffb17 	ldw	r2,-20(fp)
  80a1d4:	10800017 	ldw	r2,0(r2)
  80a1d8:	11000304 	addi	r4,r2,12
  80a1dc:	e0bffb17 	ldw	r2,-20(fp)
  80a1e0:	10800117 	ldw	r2,4(r2)
  80a1e4:	1007883a 	mov	r3,r2
  80a1e8:	2005883a 	mov	r2,r4
  80a1ec:	10c00035 	stwio	r3,0(r2)
  80a1f0:	e0bffa17 	ldw	r2,-24(fp)
  80a1f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a1f8:	e0bff417 	ldw	r2,-48(fp)
  80a1fc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80a200:	e0bff617 	ldw	r2,-40(fp)
  80a204:	1004c03a 	cmpne	r2,r2,zero
  80a208:	1000031e 	bne	r2,zero,80a218 <altera_avalon_uart_read+0x194>
  80a20c:	e0bffd17 	ldw	r2,-12(fp)
  80a210:	1004c03a 	cmpne	r2,r2,zero
  80a214:	103fc81e 	bne	r2,zero,80a138 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a218:	0005303a 	rdctl	r2,status
  80a21c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a220:	e0fff317 	ldw	r3,-52(fp)
  80a224:	00bfff84 	movi	r2,-2
  80a228:	1884703a 	and	r2,r3,r2
  80a22c:	1001703a 	wrctl	status,r2
  
  return context;
  80a230:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80a234:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80a238:	e0bffb17 	ldw	r2,-20(fp)
  80a23c:	10800117 	ldw	r2,4(r2)
  80a240:	10c02014 	ori	r3,r2,128
  80a244:	e0bffb17 	ldw	r2,-20(fp)
  80a248:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a24c:	e0bffb17 	ldw	r2,-20(fp)
  80a250:	10800017 	ldw	r2,0(r2)
  80a254:	11000304 	addi	r4,r2,12
  80a258:	e0bffb17 	ldw	r2,-20(fp)
  80a25c:	10800117 	ldw	r2,4(r2)
  80a260:	1007883a 	mov	r3,r2
  80a264:	2005883a 	mov	r2,r4
  80a268:	10c00035 	stwio	r3,0(r2)
  80a26c:	e0bffa17 	ldw	r2,-24(fp)
  80a270:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a274:	e0bff217 	ldw	r2,-56(fp)
  80a278:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80a27c:	e0bff703 	ldbu	r2,-36(fp)
  80a280:	1005003a 	cmpeq	r2,r2,zero
  80a284:	1000031e 	bne	r2,zero,80a294 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80a288:	00bffd04 	movi	r2,-12
  80a28c:	e0bfff15 	stw	r2,-4(fp)
  80a290:	00000206 	br	80a29c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80a294:	e0bff617 	ldw	r2,-40(fp)
  80a298:	e0bfff15 	stw	r2,-4(fp)
  80a29c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80a2a0:	e037883a 	mov	sp,fp
  80a2a4:	dfc00117 	ldw	ra,4(sp)
  80a2a8:	df000017 	ldw	fp,0(sp)
  80a2ac:	dec00204 	addi	sp,sp,8
  80a2b0:	f800283a 	ret

0080a2b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a2b4:	defffd04 	addi	sp,sp,-12
  80a2b8:	dfc00215 	stw	ra,8(sp)
  80a2bc:	df000115 	stw	fp,4(sp)
  80a2c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a2c4:	00802074 	movhi	r2,129
  80a2c8:	10b58104 	addi	r2,r2,-10748
  80a2cc:	10800017 	ldw	r2,0(r2)
  80a2d0:	1005003a 	cmpeq	r2,r2,zero
  80a2d4:	1000061e 	bne	r2,zero,80a2f0 <alt_get_errno+0x3c>
  80a2d8:	00802074 	movhi	r2,129
  80a2dc:	10b58104 	addi	r2,r2,-10748
  80a2e0:	10800017 	ldw	r2,0(r2)
  80a2e4:	103ee83a 	callr	r2
  80a2e8:	e0bfff15 	stw	r2,-4(fp)
  80a2ec:	00000306 	br	80a2fc <alt_get_errno+0x48>
  80a2f0:	00802074 	movhi	r2,129
  80a2f4:	10bcf804 	addi	r2,r2,-3104
  80a2f8:	e0bfff15 	stw	r2,-4(fp)
  80a2fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a300:	e037883a 	mov	sp,fp
  80a304:	dfc00117 	ldw	ra,4(sp)
  80a308:	df000017 	ldw	fp,0(sp)
  80a30c:	dec00204 	addi	sp,sp,8
  80a310:	f800283a 	ret

0080a314 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80a314:	defff204 	addi	sp,sp,-56
  80a318:	dfc00d15 	stw	ra,52(sp)
  80a31c:	df000c15 	stw	fp,48(sp)
  80a320:	df000c04 	addi	fp,sp,48
  80a324:	e13ffc15 	stw	r4,-16(fp)
  80a328:	e17ffd15 	stw	r5,-12(fp)
  80a32c:	e1bffe15 	stw	r6,-8(fp)
  80a330:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80a334:	e0bffe17 	ldw	r2,-8(fp)
  80a338:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80a33c:	e0bfff17 	ldw	r2,-4(fp)
  80a340:	1090000c 	andi	r2,r2,16384
  80a344:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a348:	00004006 	br	80a44c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80a34c:	e0bffc17 	ldw	r2,-16(fp)
  80a350:	10800517 	ldw	r2,20(r2)
  80a354:	10800044 	addi	r2,r2,1
  80a358:	10800fcc 	andi	r2,r2,63
  80a35c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80a360:	e0bffc17 	ldw	r2,-16(fp)
  80a364:	10c00417 	ldw	r3,16(r2)
  80a368:	e0bff917 	ldw	r2,-28(fp)
  80a36c:	1880251e 	bne	r3,r2,80a404 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80a370:	e0bffa17 	ldw	r2,-24(fp)
  80a374:	1005003a 	cmpeq	r2,r2,zero
  80a378:	1000051e 	bne	r2,zero,80a390 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80a37c:	080a4dc0 	call	80a4dc <alt_get_errno>
  80a380:	1007883a 	mov	r3,r2
  80a384:	008002c4 	movi	r2,11
  80a388:	18800015 	stw	r2,0(r3)
        break;
  80a38c:	00003206 	br	80a458 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a390:	0005303a 	rdctl	r2,status
  80a394:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a398:	e0fff717 	ldw	r3,-36(fp)
  80a39c:	00bfff84 	movi	r2,-2
  80a3a0:	1884703a 	and	r2,r3,r2
  80a3a4:	1001703a 	wrctl	status,r2
  
  return context;
  80a3a8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80a3ac:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a3b0:	e0bffc17 	ldw	r2,-16(fp)
  80a3b4:	10800117 	ldw	r2,4(r2)
  80a3b8:	10c11014 	ori	r3,r2,1088
  80a3bc:	e0bffc17 	ldw	r2,-16(fp)
  80a3c0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a3c4:	e0bffc17 	ldw	r2,-16(fp)
  80a3c8:	10800017 	ldw	r2,0(r2)
  80a3cc:	11000304 	addi	r4,r2,12
  80a3d0:	e0bffc17 	ldw	r2,-16(fp)
  80a3d4:	10800117 	ldw	r2,4(r2)
  80a3d8:	1007883a 	mov	r3,r2
  80a3dc:	2005883a 	mov	r2,r4
  80a3e0:	10c00035 	stwio	r3,0(r2)
  80a3e4:	e0bffb17 	ldw	r2,-20(fp)
  80a3e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a3ec:	e0bff617 	ldw	r2,-40(fp)
  80a3f0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80a3f4:	e0bffc17 	ldw	r2,-16(fp)
  80a3f8:	10c00417 	ldw	r3,16(r2)
  80a3fc:	e0bff917 	ldw	r2,-28(fp)
  80a400:	18bffc26 	beq	r3,r2,80a3f4 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80a404:	e0bff817 	ldw	r2,-32(fp)
  80a408:	10bfffc4 	addi	r2,r2,-1
  80a40c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80a410:	e0bffc17 	ldw	r2,-16(fp)
  80a414:	10c00517 	ldw	r3,20(r2)
  80a418:	e0bffd17 	ldw	r2,-12(fp)
  80a41c:	10800003 	ldbu	r2,0(r2)
  80a420:	1009883a 	mov	r4,r2
  80a424:	e0bffc17 	ldw	r2,-16(fp)
  80a428:	1885883a 	add	r2,r3,r2
  80a42c:	10801704 	addi	r2,r2,92
  80a430:	11000005 	stb	r4,0(r2)
  80a434:	e0bffd17 	ldw	r2,-12(fp)
  80a438:	10800044 	addi	r2,r2,1
  80a43c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80a440:	e0fffc17 	ldw	r3,-16(fp)
  80a444:	e0bff917 	ldw	r2,-28(fp)
  80a448:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a44c:	e0bff817 	ldw	r2,-32(fp)
  80a450:	1004c03a 	cmpne	r2,r2,zero
  80a454:	103fbd1e 	bne	r2,zero,80a34c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a458:	0005303a 	rdctl	r2,status
  80a45c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a460:	e0fff517 	ldw	r3,-44(fp)
  80a464:	00bfff84 	movi	r2,-2
  80a468:	1884703a 	and	r2,r3,r2
  80a46c:	1001703a 	wrctl	status,r2
  
  return context;
  80a470:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80a474:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a478:	e0bffc17 	ldw	r2,-16(fp)
  80a47c:	10800117 	ldw	r2,4(r2)
  80a480:	10c11014 	ori	r3,r2,1088
  80a484:	e0bffc17 	ldw	r2,-16(fp)
  80a488:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a48c:	e0bffc17 	ldw	r2,-16(fp)
  80a490:	10800017 	ldw	r2,0(r2)
  80a494:	11000304 	addi	r4,r2,12
  80a498:	e0bffc17 	ldw	r2,-16(fp)
  80a49c:	10800117 	ldw	r2,4(r2)
  80a4a0:	1007883a 	mov	r3,r2
  80a4a4:	2005883a 	mov	r2,r4
  80a4a8:	10c00035 	stwio	r3,0(r2)
  80a4ac:	e0bffb17 	ldw	r2,-20(fp)
  80a4b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a4b4:	e0bff417 	ldw	r2,-48(fp)
  80a4b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80a4bc:	e0fffe17 	ldw	r3,-8(fp)
  80a4c0:	e0bff817 	ldw	r2,-32(fp)
  80a4c4:	1885c83a 	sub	r2,r3,r2
}
  80a4c8:	e037883a 	mov	sp,fp
  80a4cc:	dfc00117 	ldw	ra,4(sp)
  80a4d0:	df000017 	ldw	fp,0(sp)
  80a4d4:	dec00204 	addi	sp,sp,8
  80a4d8:	f800283a 	ret

0080a4dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a4dc:	defffd04 	addi	sp,sp,-12
  80a4e0:	dfc00215 	stw	ra,8(sp)
  80a4e4:	df000115 	stw	fp,4(sp)
  80a4e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a4ec:	00802074 	movhi	r2,129
  80a4f0:	10b58104 	addi	r2,r2,-10748
  80a4f4:	10800017 	ldw	r2,0(r2)
  80a4f8:	1005003a 	cmpeq	r2,r2,zero
  80a4fc:	1000061e 	bne	r2,zero,80a518 <alt_get_errno+0x3c>
  80a500:	00802074 	movhi	r2,129
  80a504:	10b58104 	addi	r2,r2,-10748
  80a508:	10800017 	ldw	r2,0(r2)
  80a50c:	103ee83a 	callr	r2
  80a510:	e0bfff15 	stw	r2,-4(fp)
  80a514:	00000306 	br	80a524 <alt_get_errno+0x48>
  80a518:	00802074 	movhi	r2,129
  80a51c:	10bcf804 	addi	r2,r2,-3104
  80a520:	e0bfff15 	stw	r2,-4(fp)
  80a524:	e0bfff17 	ldw	r2,-4(fp)
}
  80a528:	e037883a 	mov	sp,fp
  80a52c:	dfc00117 	ldw	ra,4(sp)
  80a530:	df000017 	ldw	fp,0(sp)
  80a534:	dec00204 	addi	sp,sp,8
  80a538:	f800283a 	ret

0080a53c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80a53c:	defffe04 	addi	sp,sp,-8
  80a540:	df000115 	stw	fp,4(sp)
  80a544:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80a548:	e03fff15 	stw	zero,-4(fp)
  80a54c:	00000506 	br	80a564 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80a550:	e0bfff17 	ldw	r2,-4(fp)
  80a554:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80a558:	e0bfff17 	ldw	r2,-4(fp)
  80a55c:	10800804 	addi	r2,r2,32
  80a560:	e0bfff15 	stw	r2,-4(fp)
  80a564:	e0bfff17 	ldw	r2,-4(fp)
  80a568:	10820030 	cmpltui	r2,r2,2048
  80a56c:	103ff81e 	bne	r2,zero,80a550 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80a570:	e037883a 	mov	sp,fp
  80a574:	df000017 	ldw	fp,0(sp)
  80a578:	dec00104 	addi	sp,sp,4
  80a57c:	f800283a 	ret

0080a580 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80a580:	defff904 	addi	sp,sp,-28
  80a584:	dfc00615 	stw	ra,24(sp)
  80a588:	df000515 	stw	fp,20(sp)
  80a58c:	df000504 	addi	fp,sp,20
  80a590:	e13ffd15 	stw	r4,-12(fp)
  80a594:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80a598:	e0bffd17 	ldw	r2,-12(fp)
  80a59c:	1005003a 	cmpeq	r2,r2,zero
  80a5a0:	1000041e 	bne	r2,zero,80a5b4 <alt_dev_llist_insert+0x34>
  80a5a4:	e0bffd17 	ldw	r2,-12(fp)
  80a5a8:	10800217 	ldw	r2,8(r2)
  80a5ac:	1004c03a 	cmpne	r2,r2,zero
  80a5b0:	1000071e 	bne	r2,zero,80a5d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80a5b4:	080a6340 	call	80a634 <alt_get_errno>
  80a5b8:	1007883a 	mov	r3,r2
  80a5bc:	00800584 	movi	r2,22
  80a5c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80a5c4:	00bffa84 	movi	r2,-22
  80a5c8:	e0bfff15 	stw	r2,-4(fp)
  80a5cc:	00001306 	br	80a61c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80a5d0:	e0fffd17 	ldw	r3,-12(fp)
  80a5d4:	e0bffe17 	ldw	r2,-8(fp)
  80a5d8:	e0bffb15 	stw	r2,-20(fp)
  80a5dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80a5e0:	e0fffc17 	ldw	r3,-16(fp)
  80a5e4:	e0bffb17 	ldw	r2,-20(fp)
  80a5e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80a5ec:	e0bffb17 	ldw	r2,-20(fp)
  80a5f0:	10c00017 	ldw	r3,0(r2)
  80a5f4:	e0bffc17 	ldw	r2,-16(fp)
  80a5f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80a5fc:	e0bffb17 	ldw	r2,-20(fp)
  80a600:	10c00017 	ldw	r3,0(r2)
  80a604:	e0bffc17 	ldw	r2,-16(fp)
  80a608:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80a60c:	e0fffb17 	ldw	r3,-20(fp)
  80a610:	e0bffc17 	ldw	r2,-16(fp)
  80a614:	18800015 	stw	r2,0(r3)

  return 0;  
  80a618:	e03fff15 	stw	zero,-4(fp)
  80a61c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a620:	e037883a 	mov	sp,fp
  80a624:	dfc00117 	ldw	ra,4(sp)
  80a628:	df000017 	ldw	fp,0(sp)
  80a62c:	dec00204 	addi	sp,sp,8
  80a630:	f800283a 	ret

0080a634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a634:	defffd04 	addi	sp,sp,-12
  80a638:	dfc00215 	stw	ra,8(sp)
  80a63c:	df000115 	stw	fp,4(sp)
  80a640:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a644:	00802074 	movhi	r2,129
  80a648:	10b58104 	addi	r2,r2,-10748
  80a64c:	10800017 	ldw	r2,0(r2)
  80a650:	1005003a 	cmpeq	r2,r2,zero
  80a654:	1000061e 	bne	r2,zero,80a670 <alt_get_errno+0x3c>
  80a658:	00802074 	movhi	r2,129
  80a65c:	10b58104 	addi	r2,r2,-10748
  80a660:	10800017 	ldw	r2,0(r2)
  80a664:	103ee83a 	callr	r2
  80a668:	e0bfff15 	stw	r2,-4(fp)
  80a66c:	00000306 	br	80a67c <alt_get_errno+0x48>
  80a670:	00802074 	movhi	r2,129
  80a674:	10bcf804 	addi	r2,r2,-3104
  80a678:	e0bfff15 	stw	r2,-4(fp)
  80a67c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a680:	e037883a 	mov	sp,fp
  80a684:	dfc00117 	ldw	ra,4(sp)
  80a688:	df000017 	ldw	fp,0(sp)
  80a68c:	dec00204 	addi	sp,sp,8
  80a690:	f800283a 	ret

0080a694 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80a694:	defffd04 	addi	sp,sp,-12
  80a698:	dfc00215 	stw	ra,8(sp)
  80a69c:	df000115 	stw	fp,4(sp)
  80a6a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80a6a4:	00bfff04 	movi	r2,-4
  80a6a8:	00c02074 	movhi	r3,129
  80a6ac:	18ed6104 	addi	r3,r3,-19068
  80a6b0:	1885883a 	add	r2,r3,r2
  80a6b4:	e0bfff15 	stw	r2,-4(fp)
  80a6b8:	00000606 	br	80a6d4 <_do_ctors+0x40>
        (*ctor) (); 
  80a6bc:	e0bfff17 	ldw	r2,-4(fp)
  80a6c0:	10800017 	ldw	r2,0(r2)
  80a6c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80a6c8:	e0bfff17 	ldw	r2,-4(fp)
  80a6cc:	10bfff04 	addi	r2,r2,-4
  80a6d0:	e0bfff15 	stw	r2,-4(fp)
  80a6d4:	e0ffff17 	ldw	r3,-4(fp)
  80a6d8:	00802074 	movhi	r2,129
  80a6dc:	10ad6004 	addi	r2,r2,-19072
  80a6e0:	18bff62e 	bgeu	r3,r2,80a6bc <_do_ctors+0x28>
        (*ctor) (); 
}
  80a6e4:	e037883a 	mov	sp,fp
  80a6e8:	dfc00117 	ldw	ra,4(sp)
  80a6ec:	df000017 	ldw	fp,0(sp)
  80a6f0:	dec00204 	addi	sp,sp,8
  80a6f4:	f800283a 	ret

0080a6f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80a6f8:	defffd04 	addi	sp,sp,-12
  80a6fc:	dfc00215 	stw	ra,8(sp)
  80a700:	df000115 	stw	fp,4(sp)
  80a704:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80a708:	00bfff04 	movi	r2,-4
  80a70c:	00c02074 	movhi	r3,129
  80a710:	18ed6104 	addi	r3,r3,-19068
  80a714:	1885883a 	add	r2,r3,r2
  80a718:	e0bfff15 	stw	r2,-4(fp)
  80a71c:	00000606 	br	80a738 <_do_dtors+0x40>
        (*dtor) (); 
  80a720:	e0bfff17 	ldw	r2,-4(fp)
  80a724:	10800017 	ldw	r2,0(r2)
  80a728:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80a72c:	e0bfff17 	ldw	r2,-4(fp)
  80a730:	10bfff04 	addi	r2,r2,-4
  80a734:	e0bfff15 	stw	r2,-4(fp)
  80a738:	e0ffff17 	ldw	r3,-4(fp)
  80a73c:	00802074 	movhi	r2,129
  80a740:	10ad6104 	addi	r2,r2,-19068
  80a744:	18bff62e 	bgeu	r3,r2,80a720 <_do_dtors+0x28>
        (*dtor) (); 
}
  80a748:	e037883a 	mov	sp,fp
  80a74c:	dfc00117 	ldw	ra,4(sp)
  80a750:	df000017 	ldw	fp,0(sp)
  80a754:	dec00204 	addi	sp,sp,8
  80a758:	f800283a 	ret

0080a75c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80a75c:	defff904 	addi	sp,sp,-28
  80a760:	dfc00615 	stw	ra,24(sp)
  80a764:	df000515 	stw	fp,20(sp)
  80a768:	df000504 	addi	fp,sp,20
  80a76c:	e13ffd15 	stw	r4,-12(fp)
  80a770:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80a774:	e0bffe17 	ldw	r2,-8(fp)
  80a778:	10800017 	ldw	r2,0(r2)
  80a77c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80a780:	e13ffd17 	ldw	r4,-12(fp)
  80a784:	08044e80 	call	8044e8 <strlen>
  80a788:	10800044 	addi	r2,r2,1
  80a78c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80a790:	00000d06 	br	80a7c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80a794:	e0bffc17 	ldw	r2,-16(fp)
  80a798:	11000217 	ldw	r4,8(r2)
  80a79c:	e1bffb17 	ldw	r6,-20(fp)
  80a7a0:	e17ffd17 	ldw	r5,-12(fp)
  80a7a4:	080b0780 	call	80b078 <memcmp>
  80a7a8:	1004c03a 	cmpne	r2,r2,zero
  80a7ac:	1000031e 	bne	r2,zero,80a7bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80a7b0:	e0bffc17 	ldw	r2,-16(fp)
  80a7b4:	e0bfff15 	stw	r2,-4(fp)
  80a7b8:	00000706 	br	80a7d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80a7bc:	e0bffc17 	ldw	r2,-16(fp)
  80a7c0:	10800017 	ldw	r2,0(r2)
  80a7c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80a7c8:	e0fffe17 	ldw	r3,-8(fp)
  80a7cc:	e0bffc17 	ldw	r2,-16(fp)
  80a7d0:	10fff01e 	bne	r2,r3,80a794 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80a7d4:	e03fff15 	stw	zero,-4(fp)
  80a7d8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a7dc:	e037883a 	mov	sp,fp
  80a7e0:	dfc00117 	ldw	ra,4(sp)
  80a7e4:	df000017 	ldw	fp,0(sp)
  80a7e8:	dec00204 	addi	sp,sp,8
  80a7ec:	f800283a 	ret

0080a7f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80a7f0:	defffa04 	addi	sp,sp,-24
  80a7f4:	dfc00515 	stw	ra,20(sp)
  80a7f8:	df000415 	stw	fp,16(sp)
  80a7fc:	df000404 	addi	fp,sp,16
  80a800:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80a804:	00802074 	movhi	r2,129
  80a808:	10b57c04 	addi	r2,r2,-10768
  80a80c:	10800017 	ldw	r2,0(r2)
  80a810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80a814:	00003306 	br	80a8e4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80a818:	e0bffd17 	ldw	r2,-12(fp)
  80a81c:	11000217 	ldw	r4,8(r2)
  80a820:	08044e80 	call	8044e8 <strlen>
  80a824:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80a828:	e0bffd17 	ldw	r2,-12(fp)
  80a82c:	10c00217 	ldw	r3,8(r2)
  80a830:	e0bffc17 	ldw	r2,-16(fp)
  80a834:	1885883a 	add	r2,r3,r2
  80a838:	10bfffc4 	addi	r2,r2,-1
  80a83c:	10800003 	ldbu	r2,0(r2)
  80a840:	10803fcc 	andi	r2,r2,255
  80a844:	1080201c 	xori	r2,r2,128
  80a848:	10bfe004 	addi	r2,r2,-128
  80a84c:	10800bd8 	cmpnei	r2,r2,47
  80a850:	1000031e 	bne	r2,zero,80a860 <alt_find_file+0x70>
    {
      len -= 1;
  80a854:	e0bffc17 	ldw	r2,-16(fp)
  80a858:	10bfffc4 	addi	r2,r2,-1
  80a85c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80a860:	e0bffc17 	ldw	r2,-16(fp)
  80a864:	1007883a 	mov	r3,r2
  80a868:	e0bffe17 	ldw	r2,-8(fp)
  80a86c:	1885883a 	add	r2,r3,r2
  80a870:	10800003 	ldbu	r2,0(r2)
  80a874:	10803fcc 	andi	r2,r2,255
  80a878:	1080201c 	xori	r2,r2,128
  80a87c:	10bfe004 	addi	r2,r2,-128
  80a880:	10800be0 	cmpeqi	r2,r2,47
  80a884:	10000a1e 	bne	r2,zero,80a8b0 <alt_find_file+0xc0>
  80a888:	e0bffc17 	ldw	r2,-16(fp)
  80a88c:	1007883a 	mov	r3,r2
  80a890:	e0bffe17 	ldw	r2,-8(fp)
  80a894:	1885883a 	add	r2,r3,r2
  80a898:	10800003 	ldbu	r2,0(r2)
  80a89c:	10803fcc 	andi	r2,r2,255
  80a8a0:	1080201c 	xori	r2,r2,128
  80a8a4:	10bfe004 	addi	r2,r2,-128
  80a8a8:	1004c03a 	cmpne	r2,r2,zero
  80a8ac:	10000a1e 	bne	r2,zero,80a8d8 <alt_find_file+0xe8>
  80a8b0:	e0bffd17 	ldw	r2,-12(fp)
  80a8b4:	11000217 	ldw	r4,8(r2)
  80a8b8:	e1bffc17 	ldw	r6,-16(fp)
  80a8bc:	e17ffe17 	ldw	r5,-8(fp)
  80a8c0:	080b0780 	call	80b078 <memcmp>
  80a8c4:	1004c03a 	cmpne	r2,r2,zero
  80a8c8:	1000031e 	bne	r2,zero,80a8d8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80a8cc:	e0bffd17 	ldw	r2,-12(fp)
  80a8d0:	e0bfff15 	stw	r2,-4(fp)
  80a8d4:	00000806 	br	80a8f8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80a8d8:	e0bffd17 	ldw	r2,-12(fp)
  80a8dc:	10800017 	ldw	r2,0(r2)
  80a8e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80a8e4:	00c02074 	movhi	r3,129
  80a8e8:	18f57c04 	addi	r3,r3,-10768
  80a8ec:	e0bffd17 	ldw	r2,-12(fp)
  80a8f0:	10ffc91e 	bne	r2,r3,80a818 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80a8f4:	e03fff15 	stw	zero,-4(fp)
  80a8f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a8fc:	e037883a 	mov	sp,fp
  80a900:	dfc00117 	ldw	ra,4(sp)
  80a904:	df000017 	ldw	fp,0(sp)
  80a908:	dec00204 	addi	sp,sp,8
  80a90c:	f800283a 	ret

0080a910 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80a910:	defffc04 	addi	sp,sp,-16
  80a914:	df000315 	stw	fp,12(sp)
  80a918:	df000304 	addi	fp,sp,12
  80a91c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80a920:	00bffa04 	movi	r2,-24
  80a924:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80a928:	e03ffe15 	stw	zero,-8(fp)
  80a92c:	00001e06 	br	80a9a8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80a930:	e0bffe17 	ldw	r2,-8(fp)
  80a934:	00c02074 	movhi	r3,129
  80a938:	18f08504 	addi	r3,r3,-15852
  80a93c:	10800324 	muli	r2,r2,12
  80a940:	10c5883a 	add	r2,r2,r3
  80a944:	10800017 	ldw	r2,0(r2)
  80a948:	1004c03a 	cmpne	r2,r2,zero
  80a94c:	1000131e 	bne	r2,zero,80a99c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80a950:	e0bffe17 	ldw	r2,-8(fp)
  80a954:	00c02074 	movhi	r3,129
  80a958:	18f08504 	addi	r3,r3,-15852
  80a95c:	10800324 	muli	r2,r2,12
  80a960:	10c7883a 	add	r3,r2,r3
  80a964:	e0bfff17 	ldw	r2,-4(fp)
  80a968:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80a96c:	00802074 	movhi	r2,129
  80a970:	10b58004 	addi	r2,r2,-10752
  80a974:	10c00017 	ldw	r3,0(r2)
  80a978:	e0bffe17 	ldw	r2,-8(fp)
  80a97c:	1880040e 	bge	r3,r2,80a990 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80a980:	00c02074 	movhi	r3,129
  80a984:	18f58004 	addi	r3,r3,-10752
  80a988:	e0bffe17 	ldw	r2,-8(fp)
  80a98c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80a990:	e0bffe17 	ldw	r2,-8(fp)
  80a994:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80a998:	00000606 	br	80a9b4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80a99c:	e0bffe17 	ldw	r2,-8(fp)
  80a9a0:	10800044 	addi	r2,r2,1
  80a9a4:	e0bffe15 	stw	r2,-8(fp)
  80a9a8:	e0bffe17 	ldw	r2,-8(fp)
  80a9ac:	10800810 	cmplti	r2,r2,32
  80a9b0:	103fdf1e 	bne	r2,zero,80a930 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80a9b4:	e0bffd17 	ldw	r2,-12(fp)
}
  80a9b8:	e037883a 	mov	sp,fp
  80a9bc:	df000017 	ldw	fp,0(sp)
  80a9c0:	dec00104 	addi	sp,sp,4
  80a9c4:	f800283a 	ret

0080a9c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80a9c8:	defffe04 	addi	sp,sp,-8
  80a9cc:	dfc00115 	stw	ra,4(sp)
  80a9d0:	df000015 	stw	fp,0(sp)
  80a9d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80a9d8:	0009883a 	mov	r4,zero
  80a9dc:	01440004 	movi	r5,4096
  80a9e0:	080af9c0 	call	80af9c <alt_icache_flush>
#endif
}
  80a9e4:	e037883a 	mov	sp,fp
  80a9e8:	dfc00117 	ldw	ra,4(sp)
  80a9ec:	df000017 	ldw	fp,0(sp)
  80a9f0:	dec00204 	addi	sp,sp,8
  80a9f4:	f800283a 	ret

0080a9f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80a9f8:	defff904 	addi	sp,sp,-28
  80a9fc:	dfc00615 	stw	ra,24(sp)
  80aa00:	df000515 	stw	fp,20(sp)
  80aa04:	df000504 	addi	fp,sp,20
  80aa08:	e13ffc15 	stw	r4,-16(fp)
  80aa0c:	e17ffd15 	stw	r5,-12(fp)
  80aa10:	e1bffe15 	stw	r6,-8(fp)
  80aa14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80aa18:	e0800217 	ldw	r2,8(fp)
  80aa1c:	d8800015 	stw	r2,0(sp)
  80aa20:	e13ffc17 	ldw	r4,-16(fp)
  80aa24:	e17ffd17 	ldw	r5,-12(fp)
  80aa28:	e1bffe17 	ldw	r6,-8(fp)
  80aa2c:	e1ffff17 	ldw	r7,-4(fp)
  80aa30:	080abcc0 	call	80abcc <alt_iic_isr_register>
}  
  80aa34:	e037883a 	mov	sp,fp
  80aa38:	dfc00117 	ldw	ra,4(sp)
  80aa3c:	df000017 	ldw	fp,0(sp)
  80aa40:	dec00204 	addi	sp,sp,8
  80aa44:	f800283a 	ret

0080aa48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80aa48:	defff904 	addi	sp,sp,-28
  80aa4c:	df000615 	stw	fp,24(sp)
  80aa50:	df000604 	addi	fp,sp,24
  80aa54:	e13ffe15 	stw	r4,-8(fp)
  80aa58:	e17fff15 	stw	r5,-4(fp)
  80aa5c:	e0bfff17 	ldw	r2,-4(fp)
  80aa60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa64:	0005303a 	rdctl	r2,status
  80aa68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa6c:	e0fffb17 	ldw	r3,-20(fp)
  80aa70:	00bfff84 	movi	r2,-2
  80aa74:	1884703a 	and	r2,r3,r2
  80aa78:	1001703a 	wrctl	status,r2
  
  return context;
  80aa7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80aa80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80aa84:	e0fffc17 	ldw	r3,-16(fp)
  80aa88:	00800044 	movi	r2,1
  80aa8c:	10c4983a 	sll	r2,r2,r3
  80aa90:	1007883a 	mov	r3,r2
  80aa94:	00802074 	movhi	r2,129
  80aa98:	10bcf904 	addi	r2,r2,-3100
  80aa9c:	10800017 	ldw	r2,0(r2)
  80aaa0:	1886b03a 	or	r3,r3,r2
  80aaa4:	00802074 	movhi	r2,129
  80aaa8:	10bcf904 	addi	r2,r2,-3100
  80aaac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80aab0:	00802074 	movhi	r2,129
  80aab4:	10bcf904 	addi	r2,r2,-3100
  80aab8:	10800017 	ldw	r2,0(r2)
  80aabc:	100170fa 	wrctl	ienable,r2
  80aac0:	e0bffd17 	ldw	r2,-12(fp)
  80aac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aac8:	e0bffa17 	ldw	r2,-24(fp)
  80aacc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80aad0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80aad4:	e037883a 	mov	sp,fp
  80aad8:	df000017 	ldw	fp,0(sp)
  80aadc:	dec00104 	addi	sp,sp,4
  80aae0:	f800283a 	ret

0080aae4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80aae4:	defff904 	addi	sp,sp,-28
  80aae8:	df000615 	stw	fp,24(sp)
  80aaec:	df000604 	addi	fp,sp,24
  80aaf0:	e13ffe15 	stw	r4,-8(fp)
  80aaf4:	e17fff15 	stw	r5,-4(fp)
  80aaf8:	e0bfff17 	ldw	r2,-4(fp)
  80aafc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ab00:	0005303a 	rdctl	r2,status
  80ab04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ab08:	e0fffb17 	ldw	r3,-20(fp)
  80ab0c:	00bfff84 	movi	r2,-2
  80ab10:	1884703a 	and	r2,r3,r2
  80ab14:	1001703a 	wrctl	status,r2
  
  return context;
  80ab18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ab1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80ab20:	e0fffc17 	ldw	r3,-16(fp)
  80ab24:	00800044 	movi	r2,1
  80ab28:	10c4983a 	sll	r2,r2,r3
  80ab2c:	0084303a 	nor	r2,zero,r2
  80ab30:	1007883a 	mov	r3,r2
  80ab34:	00802074 	movhi	r2,129
  80ab38:	10bcf904 	addi	r2,r2,-3100
  80ab3c:	10800017 	ldw	r2,0(r2)
  80ab40:	1886703a 	and	r3,r3,r2
  80ab44:	00802074 	movhi	r2,129
  80ab48:	10bcf904 	addi	r2,r2,-3100
  80ab4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ab50:	00802074 	movhi	r2,129
  80ab54:	10bcf904 	addi	r2,r2,-3100
  80ab58:	10800017 	ldw	r2,0(r2)
  80ab5c:	100170fa 	wrctl	ienable,r2
  80ab60:	e0bffd17 	ldw	r2,-12(fp)
  80ab64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab68:	e0bffa17 	ldw	r2,-24(fp)
  80ab6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ab70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80ab74:	e037883a 	mov	sp,fp
  80ab78:	df000017 	ldw	fp,0(sp)
  80ab7c:	dec00104 	addi	sp,sp,4
  80ab80:	f800283a 	ret

0080ab84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80ab84:	defffc04 	addi	sp,sp,-16
  80ab88:	df000315 	stw	fp,12(sp)
  80ab8c:	df000304 	addi	fp,sp,12
  80ab90:	e13ffe15 	stw	r4,-8(fp)
  80ab94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ab98:	000530fa 	rdctl	r2,ienable
  80ab9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80aba0:	e0ffff17 	ldw	r3,-4(fp)
  80aba4:	00800044 	movi	r2,1
  80aba8:	10c4983a 	sll	r2,r2,r3
  80abac:	1007883a 	mov	r3,r2
  80abb0:	e0bffd17 	ldw	r2,-12(fp)
  80abb4:	1884703a 	and	r2,r3,r2
  80abb8:	1004c03a 	cmpne	r2,r2,zero
}
  80abbc:	e037883a 	mov	sp,fp
  80abc0:	df000017 	ldw	fp,0(sp)
  80abc4:	dec00104 	addi	sp,sp,4
  80abc8:	f800283a 	ret

0080abcc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80abcc:	defff404 	addi	sp,sp,-48
  80abd0:	dfc00b15 	stw	ra,44(sp)
  80abd4:	df000a15 	stw	fp,40(sp)
  80abd8:	df000a04 	addi	fp,sp,40
  80abdc:	e13ffb15 	stw	r4,-20(fp)
  80abe0:	e17ffc15 	stw	r5,-16(fp)
  80abe4:	e1bffd15 	stw	r6,-12(fp)
  80abe8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80abec:	00bffa84 	movi	r2,-22
  80abf0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80abf4:	e0bffc17 	ldw	r2,-16(fp)
  80abf8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80abfc:	e0bff917 	ldw	r2,-28(fp)
  80ac00:	10800808 	cmpgei	r2,r2,32
  80ac04:	1000291e 	bne	r2,zero,80acac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ac08:	0005303a 	rdctl	r2,status
  80ac0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ac10:	e0fff717 	ldw	r3,-36(fp)
  80ac14:	00bfff84 	movi	r2,-2
  80ac18:	1884703a 	and	r2,r3,r2
  80ac1c:	1001703a 	wrctl	status,r2
  
  return context;
  80ac20:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ac24:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80ac28:	e0bff917 	ldw	r2,-28(fp)
  80ac2c:	00c02074 	movhi	r3,129
  80ac30:	18fd3904 	addi	r3,r3,-2844
  80ac34:	100490fa 	slli	r2,r2,3
  80ac38:	10c7883a 	add	r3,r2,r3
  80ac3c:	e0bffd17 	ldw	r2,-12(fp)
  80ac40:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80ac44:	e0bff917 	ldw	r2,-28(fp)
  80ac48:	00c02074 	movhi	r3,129
  80ac4c:	18fd3904 	addi	r3,r3,-2844
  80ac50:	100490fa 	slli	r2,r2,3
  80ac54:	10c5883a 	add	r2,r2,r3
  80ac58:	10c00104 	addi	r3,r2,4
  80ac5c:	e0bffe17 	ldw	r2,-8(fp)
  80ac60:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ac64:	e0bffd17 	ldw	r2,-12(fp)
  80ac68:	1005003a 	cmpeq	r2,r2,zero
  80ac6c:	1000051e 	bne	r2,zero,80ac84 <alt_iic_isr_register+0xb8>
  80ac70:	e17ff917 	ldw	r5,-28(fp)
  80ac74:	e13ffb17 	ldw	r4,-20(fp)
  80ac78:	080aa480 	call	80aa48 <alt_ic_irq_enable>
  80ac7c:	e0bfff15 	stw	r2,-4(fp)
  80ac80:	00000406 	br	80ac94 <alt_iic_isr_register+0xc8>
  80ac84:	e17ff917 	ldw	r5,-28(fp)
  80ac88:	e13ffb17 	ldw	r4,-20(fp)
  80ac8c:	080aae40 	call	80aae4 <alt_ic_irq_disable>
  80ac90:	e0bfff15 	stw	r2,-4(fp)
  80ac94:	e0bfff17 	ldw	r2,-4(fp)
  80ac98:	e0bffa15 	stw	r2,-24(fp)
  80ac9c:	e0bff817 	ldw	r2,-32(fp)
  80aca0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aca4:	e0bff617 	ldw	r2,-40(fp)
  80aca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80acac:	e0bffa17 	ldw	r2,-24(fp)
}
  80acb0:	e037883a 	mov	sp,fp
  80acb4:	dfc00117 	ldw	ra,4(sp)
  80acb8:	df000017 	ldw	fp,0(sp)
  80acbc:	dec00204 	addi	sp,sp,8
  80acc0:	f800283a 	ret

0080acc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80acc4:	defff904 	addi	sp,sp,-28
  80acc8:	dfc00615 	stw	ra,24(sp)
  80accc:	df000515 	stw	fp,20(sp)
  80acd0:	df000504 	addi	fp,sp,20
  80acd4:	e13ffc15 	stw	r4,-16(fp)
  80acd8:	e17ffd15 	stw	r5,-12(fp)
  80acdc:	e1bffe15 	stw	r6,-8(fp)
  80ace0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80ace4:	e13ffd17 	ldw	r4,-12(fp)
  80ace8:	e17ffe17 	ldw	r5,-8(fp)
  80acec:	e1bfff17 	ldw	r6,-4(fp)
  80acf0:	08077f80 	call	8077f8 <open>
  80acf4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80acf8:	e0bffb17 	ldw	r2,-20(fp)
  80acfc:	1004803a 	cmplt	r2,r2,zero
  80ad00:	10001c1e 	bne	r2,zero,80ad74 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80ad04:	e0bffb17 	ldw	r2,-20(fp)
  80ad08:	00c02074 	movhi	r3,129
  80ad0c:	18f08504 	addi	r3,r3,-15852
  80ad10:	10800324 	muli	r2,r2,12
  80ad14:	10c5883a 	add	r2,r2,r3
  80ad18:	10c00017 	ldw	r3,0(r2)
  80ad1c:	e0bffc17 	ldw	r2,-16(fp)
  80ad20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80ad24:	e0bffb17 	ldw	r2,-20(fp)
  80ad28:	00c02074 	movhi	r3,129
  80ad2c:	18f08504 	addi	r3,r3,-15852
  80ad30:	10800324 	muli	r2,r2,12
  80ad34:	10c5883a 	add	r2,r2,r3
  80ad38:	10800104 	addi	r2,r2,4
  80ad3c:	10c00017 	ldw	r3,0(r2)
  80ad40:	e0bffc17 	ldw	r2,-16(fp)
  80ad44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80ad48:	e0bffb17 	ldw	r2,-20(fp)
  80ad4c:	00c02074 	movhi	r3,129
  80ad50:	18f08504 	addi	r3,r3,-15852
  80ad54:	10800324 	muli	r2,r2,12
  80ad58:	10c5883a 	add	r2,r2,r3
  80ad5c:	10800204 	addi	r2,r2,8
  80ad60:	10c00017 	ldw	r3,0(r2)
  80ad64:	e0bffc17 	ldw	r2,-16(fp)
  80ad68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80ad6c:	e13ffb17 	ldw	r4,-20(fp)
  80ad70:	0807b600 	call	807b60 <alt_release_fd>
  }
} 
  80ad74:	e037883a 	mov	sp,fp
  80ad78:	dfc00117 	ldw	ra,4(sp)
  80ad7c:	df000017 	ldw	fp,0(sp)
  80ad80:	dec00204 	addi	sp,sp,8
  80ad84:	f800283a 	ret

0080ad88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80ad88:	defffb04 	addi	sp,sp,-20
  80ad8c:	dfc00415 	stw	ra,16(sp)
  80ad90:	df000315 	stw	fp,12(sp)
  80ad94:	df000304 	addi	fp,sp,12
  80ad98:	e13ffd15 	stw	r4,-12(fp)
  80ad9c:	e17ffe15 	stw	r5,-8(fp)
  80ada0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80ada4:	01002074 	movhi	r4,129
  80ada8:	21308804 	addi	r4,r4,-15840
  80adac:	e17ffd17 	ldw	r5,-12(fp)
  80adb0:	01800044 	movi	r6,1
  80adb4:	01c07fc4 	movi	r7,511
  80adb8:	080acc40 	call	80acc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80adbc:	01002074 	movhi	r4,129
  80adc0:	21308504 	addi	r4,r4,-15852
  80adc4:	e17ffe17 	ldw	r5,-8(fp)
  80adc8:	000d883a 	mov	r6,zero
  80adcc:	01c07fc4 	movi	r7,511
  80add0:	080acc40 	call	80acc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80add4:	01002074 	movhi	r4,129
  80add8:	21308b04 	addi	r4,r4,-15828
  80addc:	e17fff17 	ldw	r5,-4(fp)
  80ade0:	01800044 	movi	r6,1
  80ade4:	01c07fc4 	movi	r7,511
  80ade8:	080acc40 	call	80acc4 <alt_open_fd>
}  
  80adec:	e037883a 	mov	sp,fp
  80adf0:	dfc00117 	ldw	ra,4(sp)
  80adf4:	df000017 	ldw	fp,0(sp)
  80adf8:	dec00204 	addi	sp,sp,8
  80adfc:	f800283a 	ret

0080ae00 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80ae00:	defffd04 	addi	sp,sp,-12
  80ae04:	dfc00215 	stw	ra,8(sp)
  80ae08:	df000115 	stw	fp,4(sp)
  80ae0c:	df000104 	addi	fp,sp,4
  80ae10:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80ae14:	e13fff17 	ldw	r4,-4(fp)
  80ae18:	080ae500 	call	80ae50 <alt_busy_sleep>
}
  80ae1c:	e037883a 	mov	sp,fp
  80ae20:	dfc00117 	ldw	ra,4(sp)
  80ae24:	df000017 	ldw	fp,0(sp)
  80ae28:	dec00204 	addi	sp,sp,8
  80ae2c:	f800283a 	ret

0080ae30 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80ae30:	deffff04 	addi	sp,sp,-4
  80ae34:	df000015 	stw	fp,0(sp)
  80ae38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80ae3c:	000170fa 	wrctl	ienable,zero
}
  80ae40:	e037883a 	mov	sp,fp
  80ae44:	df000017 	ldw	fp,0(sp)
  80ae48:	dec00104 	addi	sp,sp,4
  80ae4c:	f800283a 	ret

0080ae50 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80ae50:	defffa04 	addi	sp,sp,-24
  80ae54:	dfc00515 	stw	ra,20(sp)
  80ae58:	df000415 	stw	fp,16(sp)
  80ae5c:	df000404 	addi	fp,sp,16
  80ae60:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80ae64:	008000c4 	movi	r2,3
  80ae68:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80ae6c:	e0fffc17 	ldw	r3,-16(fp)
  80ae70:	008003f4 	movhi	r2,15
  80ae74:	10909004 	addi	r2,r2,16960
  80ae78:	188b383a 	mul	r5,r3,r2
  80ae7c:	0100bef4 	movhi	r4,763
  80ae80:	213c2004 	addi	r4,r4,-3968
  80ae84:	080b5100 	call	80b510 <__udivsi3>
  80ae88:	100b883a 	mov	r5,r2
  80ae8c:	01200034 	movhi	r4,32768
  80ae90:	213fffc4 	addi	r4,r4,-1
  80ae94:	080b5100 	call	80b510 <__udivsi3>
  80ae98:	100b883a 	mov	r5,r2
  80ae9c:	e13fff17 	ldw	r4,-4(fp)
  80aea0:	080b5100 	call	80b510 <__udivsi3>
  80aea4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80aea8:	e0bffd17 	ldw	r2,-12(fp)
  80aeac:	1005003a 	cmpeq	r2,r2,zero
  80aeb0:	1000281e 	bne	r2,zero,80af54 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80aeb4:	e03ffe15 	stw	zero,-8(fp)
  80aeb8:	00001606 	br	80af14 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80aebc:	00a00034 	movhi	r2,32768
  80aec0:	10bfffc4 	addi	r2,r2,-1
  80aec4:	10bfffc4 	addi	r2,r2,-1
  80aec8:	103ffe1e 	bne	r2,zero,80aec4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80aecc:	e0fffc17 	ldw	r3,-16(fp)
  80aed0:	008003f4 	movhi	r2,15
  80aed4:	10909004 	addi	r2,r2,16960
  80aed8:	188b383a 	mul	r5,r3,r2
  80aedc:	0100bef4 	movhi	r4,763
  80aee0:	213c2004 	addi	r4,r4,-3968
  80aee4:	080b5100 	call	80b510 <__udivsi3>
  80aee8:	100b883a 	mov	r5,r2
  80aeec:	01200034 	movhi	r4,32768
  80aef0:	213fffc4 	addi	r4,r4,-1
  80aef4:	080b5100 	call	80b510 <__udivsi3>
  80aef8:	1007883a 	mov	r3,r2
  80aefc:	e0bfff17 	ldw	r2,-4(fp)
  80af00:	10c5c83a 	sub	r2,r2,r3
  80af04:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80af08:	e0bffe17 	ldw	r2,-8(fp)
  80af0c:	10800044 	addi	r2,r2,1
  80af10:	e0bffe15 	stw	r2,-8(fp)
  80af14:	e0fffe17 	ldw	r3,-8(fp)
  80af18:	e0bffd17 	ldw	r2,-12(fp)
  80af1c:	18bfe716 	blt	r3,r2,80aebc <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80af20:	e0fffc17 	ldw	r3,-16(fp)
  80af24:	008003f4 	movhi	r2,15
  80af28:	10909004 	addi	r2,r2,16960
  80af2c:	188b383a 	mul	r5,r3,r2
  80af30:	0100bef4 	movhi	r4,763
  80af34:	213c2004 	addi	r4,r4,-3968
  80af38:	080b5100 	call	80b510 <__udivsi3>
  80af3c:	1007883a 	mov	r3,r2
  80af40:	e0bfff17 	ldw	r2,-4(fp)
  80af44:	1885383a 	mul	r2,r3,r2
  80af48:	10bfffc4 	addi	r2,r2,-1
  80af4c:	103ffe1e 	bne	r2,zero,80af48 <alt_busy_sleep+0xf8>
  80af50:	00000c06 	br	80af84 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80af54:	e0fffc17 	ldw	r3,-16(fp)
  80af58:	008003f4 	movhi	r2,15
  80af5c:	10909004 	addi	r2,r2,16960
  80af60:	188b383a 	mul	r5,r3,r2
  80af64:	0100bef4 	movhi	r4,763
  80af68:	213c2004 	addi	r4,r4,-3968
  80af6c:	080b5100 	call	80b510 <__udivsi3>
  80af70:	1007883a 	mov	r3,r2
  80af74:	e0bfff17 	ldw	r2,-4(fp)
  80af78:	1885383a 	mul	r2,r3,r2
  80af7c:	10bfffc4 	addi	r2,r2,-1
  80af80:	00bffe16 	blt	zero,r2,80af7c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80af84:	0005883a 	mov	r2,zero
}
  80af88:	e037883a 	mov	sp,fp
  80af8c:	dfc00117 	ldw	ra,4(sp)
  80af90:	df000017 	ldw	fp,0(sp)
  80af94:	dec00204 	addi	sp,sp,8
  80af98:	f800283a 	ret

0080af9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80af9c:	defffb04 	addi	sp,sp,-20
  80afa0:	df000415 	stw	fp,16(sp)
  80afa4:	df000404 	addi	fp,sp,16
  80afa8:	e13ffe15 	stw	r4,-8(fp)
  80afac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80afb0:	e0bfff17 	ldw	r2,-4(fp)
  80afb4:	10840070 	cmpltui	r2,r2,4097
  80afb8:	1000021e 	bne	r2,zero,80afc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80afbc:	00840004 	movi	r2,4096
  80afc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80afc4:	e0fffe17 	ldw	r3,-8(fp)
  80afc8:	e0bfff17 	ldw	r2,-4(fp)
  80afcc:	1885883a 	add	r2,r3,r2
  80afd0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80afd4:	e0bffe17 	ldw	r2,-8(fp)
  80afd8:	e0bffd15 	stw	r2,-12(fp)
  80afdc:	00000506 	br	80aff4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80afe0:	e0bffd17 	ldw	r2,-12(fp)
  80afe4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80afe8:	e0bffd17 	ldw	r2,-12(fp)
  80afec:	10800804 	addi	r2,r2,32
  80aff0:	e0bffd15 	stw	r2,-12(fp)
  80aff4:	e0fffd17 	ldw	r3,-12(fp)
  80aff8:	e0bffc17 	ldw	r2,-16(fp)
  80affc:	18bff836 	bltu	r3,r2,80afe0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80b000:	e0bffe17 	ldw	r2,-8(fp)
  80b004:	108007cc 	andi	r2,r2,31
  80b008:	1005003a 	cmpeq	r2,r2,zero
  80b00c:	1000021e 	bne	r2,zero,80b018 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80b010:	e0bffd17 	ldw	r2,-12(fp)
  80b014:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80b018:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80b01c:	e037883a 	mov	sp,fp
  80b020:	df000017 	ldw	fp,0(sp)
  80b024:	dec00104 	addi	sp,sp,4
  80b028:	f800283a 	ret

0080b02c <atexit>:
  80b02c:	200b883a 	mov	r5,r4
  80b030:	000d883a 	mov	r6,zero
  80b034:	0009883a 	mov	r4,zero
  80b038:	000f883a 	mov	r7,zero
  80b03c:	080b0ec1 	jmpi	80b0ec <__register_exitproc>

0080b040 <exit>:
  80b040:	defffe04 	addi	sp,sp,-8
  80b044:	000b883a 	mov	r5,zero
  80b048:	dc000015 	stw	r16,0(sp)
  80b04c:	dfc00115 	stw	ra,4(sp)
  80b050:	2021883a 	mov	r16,r4
  80b054:	080b2240 	call	80b224 <__call_exitprocs>
  80b058:	00802074 	movhi	r2,129
  80b05c:	10b57904 	addi	r2,r2,-10780
  80b060:	11000017 	ldw	r4,0(r2)
  80b064:	20800f17 	ldw	r2,60(r4)
  80b068:	10000126 	beq	r2,zero,80b070 <exit+0x30>
  80b06c:	103ee83a 	callr	r2
  80b070:	8009883a 	mov	r4,r16
  80b074:	080b5600 	call	80b560 <_exit>

0080b078 <memcmp>:
  80b078:	00c000c4 	movi	r3,3
  80b07c:	1980032e 	bgeu	r3,r6,80b08c <memcmp+0x14>
  80b080:	2144b03a 	or	r2,r4,r5
  80b084:	10c4703a 	and	r2,r2,r3
  80b088:	10000f26 	beq	r2,zero,80b0c8 <memcmp+0x50>
  80b08c:	31ffffc4 	addi	r7,r6,-1
  80b090:	3000061e 	bne	r6,zero,80b0ac <memcmp+0x34>
  80b094:	00000a06 	br	80b0c0 <memcmp+0x48>
  80b098:	39ffffc4 	addi	r7,r7,-1
  80b09c:	00bfffc4 	movi	r2,-1
  80b0a0:	21000044 	addi	r4,r4,1
  80b0a4:	29400044 	addi	r5,r5,1
  80b0a8:	38800526 	beq	r7,r2,80b0c0 <memcmp+0x48>
  80b0ac:	20c00003 	ldbu	r3,0(r4)
  80b0b0:	28800003 	ldbu	r2,0(r5)
  80b0b4:	18bff826 	beq	r3,r2,80b098 <memcmp+0x20>
  80b0b8:	1885c83a 	sub	r2,r3,r2
  80b0bc:	f800283a 	ret
  80b0c0:	0005883a 	mov	r2,zero
  80b0c4:	f800283a 	ret
  80b0c8:	180f883a 	mov	r7,r3
  80b0cc:	20c00017 	ldw	r3,0(r4)
  80b0d0:	28800017 	ldw	r2,0(r5)
  80b0d4:	18bfed1e 	bne	r3,r2,80b08c <memcmp+0x14>
  80b0d8:	31bfff04 	addi	r6,r6,-4
  80b0dc:	21000104 	addi	r4,r4,4
  80b0e0:	29400104 	addi	r5,r5,4
  80b0e4:	39bff936 	bltu	r7,r6,80b0cc <memcmp+0x54>
  80b0e8:	003fe806 	br	80b08c <memcmp+0x14>

0080b0ec <__register_exitproc>:
  80b0ec:	defffa04 	addi	sp,sp,-24
  80b0f0:	00802074 	movhi	r2,129
  80b0f4:	10b57904 	addi	r2,r2,-10780
  80b0f8:	dc000015 	stw	r16,0(sp)
  80b0fc:	14000017 	ldw	r16,0(r2)
  80b100:	dd000415 	stw	r20,16(sp)
  80b104:	2829883a 	mov	r20,r5
  80b108:	81405217 	ldw	r5,328(r16)
  80b10c:	dcc00315 	stw	r19,12(sp)
  80b110:	dc800215 	stw	r18,8(sp)
  80b114:	dc400115 	stw	r17,4(sp)
  80b118:	dfc00515 	stw	ra,20(sp)
  80b11c:	2023883a 	mov	r17,r4
  80b120:	3027883a 	mov	r19,r6
  80b124:	3825883a 	mov	r18,r7
  80b128:	28002526 	beq	r5,zero,80b1c0 <__register_exitproc+0xd4>
  80b12c:	29000117 	ldw	r4,4(r5)
  80b130:	008007c4 	movi	r2,31
  80b134:	11002716 	blt	r2,r4,80b1d4 <__register_exitproc+0xe8>
  80b138:	8800101e 	bne	r17,zero,80b17c <__register_exitproc+0x90>
  80b13c:	2105883a 	add	r2,r4,r4
  80b140:	1085883a 	add	r2,r2,r2
  80b144:	20c00044 	addi	r3,r4,1
  80b148:	1145883a 	add	r2,r2,r5
  80b14c:	0009883a 	mov	r4,zero
  80b150:	15000215 	stw	r20,8(r2)
  80b154:	28c00115 	stw	r3,4(r5)
  80b158:	2005883a 	mov	r2,r4
  80b15c:	dfc00517 	ldw	ra,20(sp)
  80b160:	dd000417 	ldw	r20,16(sp)
  80b164:	dcc00317 	ldw	r19,12(sp)
  80b168:	dc800217 	ldw	r18,8(sp)
  80b16c:	dc400117 	ldw	r17,4(sp)
  80b170:	dc000017 	ldw	r16,0(sp)
  80b174:	dec00604 	addi	sp,sp,24
  80b178:	f800283a 	ret
  80b17c:	29802204 	addi	r6,r5,136
  80b180:	00800044 	movi	r2,1
  80b184:	110e983a 	sll	r7,r2,r4
  80b188:	30c04017 	ldw	r3,256(r6)
  80b18c:	2105883a 	add	r2,r4,r4
  80b190:	1085883a 	add	r2,r2,r2
  80b194:	1185883a 	add	r2,r2,r6
  80b198:	19c6b03a 	or	r3,r3,r7
  80b19c:	14802015 	stw	r18,128(r2)
  80b1a0:	14c00015 	stw	r19,0(r2)
  80b1a4:	00800084 	movi	r2,2
  80b1a8:	30c04015 	stw	r3,256(r6)
  80b1ac:	88bfe31e 	bne	r17,r2,80b13c <__register_exitproc+0x50>
  80b1b0:	30804117 	ldw	r2,260(r6)
  80b1b4:	11c4b03a 	or	r2,r2,r7
  80b1b8:	30804115 	stw	r2,260(r6)
  80b1bc:	003fdf06 	br	80b13c <__register_exitproc+0x50>
  80b1c0:	00802074 	movhi	r2,129
  80b1c4:	10bd7904 	addi	r2,r2,-2588
  80b1c8:	100b883a 	mov	r5,r2
  80b1cc:	80805215 	stw	r2,328(r16)
  80b1d0:	003fd606 	br	80b12c <__register_exitproc+0x40>
  80b1d4:	00800034 	movhi	r2,0
  80b1d8:	10800004 	addi	r2,r2,0
  80b1dc:	1000021e 	bne	r2,zero,80b1e8 <__register_exitproc+0xfc>
  80b1e0:	013fffc4 	movi	r4,-1
  80b1e4:	003fdc06 	br	80b158 <__register_exitproc+0x6c>
  80b1e8:	01006404 	movi	r4,400
  80b1ec:	103ee83a 	callr	r2
  80b1f0:	1007883a 	mov	r3,r2
  80b1f4:	103ffa26 	beq	r2,zero,80b1e0 <__register_exitproc+0xf4>
  80b1f8:	80805217 	ldw	r2,328(r16)
  80b1fc:	180b883a 	mov	r5,r3
  80b200:	18000115 	stw	zero,4(r3)
  80b204:	18800015 	stw	r2,0(r3)
  80b208:	80c05215 	stw	r3,328(r16)
  80b20c:	18006215 	stw	zero,392(r3)
  80b210:	18006315 	stw	zero,396(r3)
  80b214:	0009883a 	mov	r4,zero
  80b218:	883fc826 	beq	r17,zero,80b13c <__register_exitproc+0x50>
  80b21c:	003fd706 	br	80b17c <__register_exitproc+0x90>

0080b220 <register_fini>:
  80b220:	f800283a 	ret

0080b224 <__call_exitprocs>:
  80b224:	00802074 	movhi	r2,129
  80b228:	10b57904 	addi	r2,r2,-10780
  80b22c:	10800017 	ldw	r2,0(r2)
  80b230:	defff304 	addi	sp,sp,-52
  80b234:	df000b15 	stw	fp,44(sp)
  80b238:	d8800115 	stw	r2,4(sp)
  80b23c:	00800034 	movhi	r2,0
  80b240:	10800004 	addi	r2,r2,0
  80b244:	1005003a 	cmpeq	r2,r2,zero
  80b248:	d8800215 	stw	r2,8(sp)
  80b24c:	d8800117 	ldw	r2,4(sp)
  80b250:	dd400815 	stw	r21,32(sp)
  80b254:	dd000715 	stw	r20,28(sp)
  80b258:	10805204 	addi	r2,r2,328
  80b25c:	dfc00c15 	stw	ra,48(sp)
  80b260:	ddc00a15 	stw	r23,40(sp)
  80b264:	dd800915 	stw	r22,36(sp)
  80b268:	dcc00615 	stw	r19,24(sp)
  80b26c:	dc800515 	stw	r18,20(sp)
  80b270:	dc400415 	stw	r17,16(sp)
  80b274:	dc000315 	stw	r16,12(sp)
  80b278:	282b883a 	mov	r21,r5
  80b27c:	2039883a 	mov	fp,r4
  80b280:	d8800015 	stw	r2,0(sp)
  80b284:	2829003a 	cmpeq	r20,r5,zero
  80b288:	d8800117 	ldw	r2,4(sp)
  80b28c:	14405217 	ldw	r17,328(r2)
  80b290:	88001026 	beq	r17,zero,80b2d4 <__call_exitprocs+0xb0>
  80b294:	ddc00017 	ldw	r23,0(sp)
  80b298:	88800117 	ldw	r2,4(r17)
  80b29c:	8c802204 	addi	r18,r17,136
  80b2a0:	143fffc4 	addi	r16,r2,-1
  80b2a4:	80000916 	blt	r16,zero,80b2cc <__call_exitprocs+0xa8>
  80b2a8:	05bfffc4 	movi	r22,-1
  80b2ac:	a000151e 	bne	r20,zero,80b304 <__call_exitprocs+0xe0>
  80b2b0:	8409883a 	add	r4,r16,r16
  80b2b4:	2105883a 	add	r2,r4,r4
  80b2b8:	1485883a 	add	r2,r2,r18
  80b2bc:	10c02017 	ldw	r3,128(r2)
  80b2c0:	a8c01126 	beq	r21,r3,80b308 <__call_exitprocs+0xe4>
  80b2c4:	843fffc4 	addi	r16,r16,-1
  80b2c8:	85bff81e 	bne	r16,r22,80b2ac <__call_exitprocs+0x88>
  80b2cc:	d8800217 	ldw	r2,8(sp)
  80b2d0:	10003126 	beq	r2,zero,80b398 <__call_exitprocs+0x174>
  80b2d4:	dfc00c17 	ldw	ra,48(sp)
  80b2d8:	df000b17 	ldw	fp,44(sp)
  80b2dc:	ddc00a17 	ldw	r23,40(sp)
  80b2e0:	dd800917 	ldw	r22,36(sp)
  80b2e4:	dd400817 	ldw	r21,32(sp)
  80b2e8:	dd000717 	ldw	r20,28(sp)
  80b2ec:	dcc00617 	ldw	r19,24(sp)
  80b2f0:	dc800517 	ldw	r18,20(sp)
  80b2f4:	dc400417 	ldw	r17,16(sp)
  80b2f8:	dc000317 	ldw	r16,12(sp)
  80b2fc:	dec00d04 	addi	sp,sp,52
  80b300:	f800283a 	ret
  80b304:	8409883a 	add	r4,r16,r16
  80b308:	88c00117 	ldw	r3,4(r17)
  80b30c:	2105883a 	add	r2,r4,r4
  80b310:	1445883a 	add	r2,r2,r17
  80b314:	18ffffc4 	addi	r3,r3,-1
  80b318:	11800217 	ldw	r6,8(r2)
  80b31c:	1c001526 	beq	r3,r16,80b374 <__call_exitprocs+0x150>
  80b320:	10000215 	stw	zero,8(r2)
  80b324:	303fe726 	beq	r6,zero,80b2c4 <__call_exitprocs+0xa0>
  80b328:	00c00044 	movi	r3,1
  80b32c:	1c06983a 	sll	r3,r3,r16
  80b330:	90804017 	ldw	r2,256(r18)
  80b334:	8cc00117 	ldw	r19,4(r17)
  80b338:	1884703a 	and	r2,r3,r2
  80b33c:	10001426 	beq	r2,zero,80b390 <__call_exitprocs+0x16c>
  80b340:	90804117 	ldw	r2,260(r18)
  80b344:	1884703a 	and	r2,r3,r2
  80b348:	10000c1e 	bne	r2,zero,80b37c <__call_exitprocs+0x158>
  80b34c:	2105883a 	add	r2,r4,r4
  80b350:	1485883a 	add	r2,r2,r18
  80b354:	11400017 	ldw	r5,0(r2)
  80b358:	e009883a 	mov	r4,fp
  80b35c:	303ee83a 	callr	r6
  80b360:	88800117 	ldw	r2,4(r17)
  80b364:	98bfc81e 	bne	r19,r2,80b288 <__call_exitprocs+0x64>
  80b368:	b8800017 	ldw	r2,0(r23)
  80b36c:	147fd526 	beq	r2,r17,80b2c4 <__call_exitprocs+0xa0>
  80b370:	003fc506 	br	80b288 <__call_exitprocs+0x64>
  80b374:	8c000115 	stw	r16,4(r17)
  80b378:	003fea06 	br	80b324 <__call_exitprocs+0x100>
  80b37c:	2105883a 	add	r2,r4,r4
  80b380:	1485883a 	add	r2,r2,r18
  80b384:	11000017 	ldw	r4,0(r2)
  80b388:	303ee83a 	callr	r6
  80b38c:	003ff406 	br	80b360 <__call_exitprocs+0x13c>
  80b390:	303ee83a 	callr	r6
  80b394:	003ff206 	br	80b360 <__call_exitprocs+0x13c>
  80b398:	88800117 	ldw	r2,4(r17)
  80b39c:	1000081e 	bne	r2,zero,80b3c0 <__call_exitprocs+0x19c>
  80b3a0:	89000017 	ldw	r4,0(r17)
  80b3a4:	20000726 	beq	r4,zero,80b3c4 <__call_exitprocs+0x1a0>
  80b3a8:	b9000015 	stw	r4,0(r23)
  80b3ac:	8809883a 	mov	r4,r17
  80b3b0:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  80b3b4:	bc400017 	ldw	r17,0(r23)
  80b3b8:	883fb71e 	bne	r17,zero,80b298 <__call_exitprocs+0x74>
  80b3bc:	003fc506 	br	80b2d4 <__call_exitprocs+0xb0>
  80b3c0:	89000017 	ldw	r4,0(r17)
  80b3c4:	882f883a 	mov	r23,r17
  80b3c8:	2023883a 	mov	r17,r4
  80b3cc:	883fb21e 	bne	r17,zero,80b298 <__call_exitprocs+0x74>
  80b3d0:	003fc006 	br	80b2d4 <__call_exitprocs+0xb0>

0080b3d4 <udivmodsi4>:
  80b3d4:	29001b2e 	bgeu	r5,r4,80b444 <udivmodsi4+0x70>
  80b3d8:	28001a16 	blt	r5,zero,80b444 <udivmodsi4+0x70>
  80b3dc:	00800044 	movi	r2,1
  80b3e0:	0007883a 	mov	r3,zero
  80b3e4:	01c007c4 	movi	r7,31
  80b3e8:	00000306 	br	80b3f8 <udivmodsi4+0x24>
  80b3ec:	19c01326 	beq	r3,r7,80b43c <udivmodsi4+0x68>
  80b3f0:	18c00044 	addi	r3,r3,1
  80b3f4:	28000416 	blt	r5,zero,80b408 <udivmodsi4+0x34>
  80b3f8:	294b883a 	add	r5,r5,r5
  80b3fc:	1085883a 	add	r2,r2,r2
  80b400:	293ffa36 	bltu	r5,r4,80b3ec <udivmodsi4+0x18>
  80b404:	10000d26 	beq	r2,zero,80b43c <udivmodsi4+0x68>
  80b408:	0007883a 	mov	r3,zero
  80b40c:	21400236 	bltu	r4,r5,80b418 <udivmodsi4+0x44>
  80b410:	2149c83a 	sub	r4,r4,r5
  80b414:	1886b03a 	or	r3,r3,r2
  80b418:	1004d07a 	srli	r2,r2,1
  80b41c:	280ad07a 	srli	r5,r5,1
  80b420:	103ffa1e 	bne	r2,zero,80b40c <udivmodsi4+0x38>
  80b424:	30000226 	beq	r6,zero,80b430 <udivmodsi4+0x5c>
  80b428:	2005883a 	mov	r2,r4
  80b42c:	f800283a 	ret
  80b430:	1809883a 	mov	r4,r3
  80b434:	2005883a 	mov	r2,r4
  80b438:	f800283a 	ret
  80b43c:	0007883a 	mov	r3,zero
  80b440:	003ff806 	br	80b424 <udivmodsi4+0x50>
  80b444:	00800044 	movi	r2,1
  80b448:	0007883a 	mov	r3,zero
  80b44c:	003fef06 	br	80b40c <udivmodsi4+0x38>

0080b450 <__divsi3>:
  80b450:	defffe04 	addi	sp,sp,-8
  80b454:	dc000015 	stw	r16,0(sp)
  80b458:	dfc00115 	stw	ra,4(sp)
  80b45c:	0021883a 	mov	r16,zero
  80b460:	20000c16 	blt	r4,zero,80b494 <__divsi3+0x44>
  80b464:	000d883a 	mov	r6,zero
  80b468:	28000e16 	blt	r5,zero,80b4a4 <__divsi3+0x54>
  80b46c:	080b3d40 	call	80b3d4 <udivmodsi4>
  80b470:	1007883a 	mov	r3,r2
  80b474:	8005003a 	cmpeq	r2,r16,zero
  80b478:	1000011e 	bne	r2,zero,80b480 <__divsi3+0x30>
  80b47c:	00c7c83a 	sub	r3,zero,r3
  80b480:	1805883a 	mov	r2,r3
  80b484:	dfc00117 	ldw	ra,4(sp)
  80b488:	dc000017 	ldw	r16,0(sp)
  80b48c:	dec00204 	addi	sp,sp,8
  80b490:	f800283a 	ret
  80b494:	0109c83a 	sub	r4,zero,r4
  80b498:	04000044 	movi	r16,1
  80b49c:	000d883a 	mov	r6,zero
  80b4a0:	283ff20e 	bge	r5,zero,80b46c <__divsi3+0x1c>
  80b4a4:	014bc83a 	sub	r5,zero,r5
  80b4a8:	8021003a 	cmpeq	r16,r16,zero
  80b4ac:	003fef06 	br	80b46c <__divsi3+0x1c>

0080b4b0 <__modsi3>:
  80b4b0:	deffff04 	addi	sp,sp,-4
  80b4b4:	dfc00015 	stw	ra,0(sp)
  80b4b8:	01800044 	movi	r6,1
  80b4bc:	2807883a 	mov	r3,r5
  80b4c0:	20000416 	blt	r4,zero,80b4d4 <__modsi3+0x24>
  80b4c4:	28000c16 	blt	r5,zero,80b4f8 <__modsi3+0x48>
  80b4c8:	dfc00017 	ldw	ra,0(sp)
  80b4cc:	dec00104 	addi	sp,sp,4
  80b4d0:	080b3d41 	jmpi	80b3d4 <udivmodsi4>
  80b4d4:	0109c83a 	sub	r4,zero,r4
  80b4d8:	28000b16 	blt	r5,zero,80b508 <__modsi3+0x58>
  80b4dc:	180b883a 	mov	r5,r3
  80b4e0:	01800044 	movi	r6,1
  80b4e4:	080b3d40 	call	80b3d4 <udivmodsi4>
  80b4e8:	0085c83a 	sub	r2,zero,r2
  80b4ec:	dfc00017 	ldw	ra,0(sp)
  80b4f0:	dec00104 	addi	sp,sp,4
  80b4f4:	f800283a 	ret
  80b4f8:	014bc83a 	sub	r5,zero,r5
  80b4fc:	dfc00017 	ldw	ra,0(sp)
  80b500:	dec00104 	addi	sp,sp,4
  80b504:	080b3d41 	jmpi	80b3d4 <udivmodsi4>
  80b508:	0147c83a 	sub	r3,zero,r5
  80b50c:	003ff306 	br	80b4dc <__modsi3+0x2c>

0080b510 <__udivsi3>:
  80b510:	000d883a 	mov	r6,zero
  80b514:	080b3d41 	jmpi	80b3d4 <udivmodsi4>

0080b518 <__umodsi3>:
  80b518:	01800044 	movi	r6,1
  80b51c:	080b3d41 	jmpi	80b3d4 <udivmodsi4>

0080b520 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80b520:	defffd04 	addi	sp,sp,-12
  80b524:	df000215 	stw	fp,8(sp)
  80b528:	df000204 	addi	fp,sp,8
  80b52c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80b530:	e0bfff17 	ldw	r2,-4(fp)
  80b534:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80b538:	e0bffe17 	ldw	r2,-8(fp)
  80b53c:	1005003a 	cmpeq	r2,r2,zero
  80b540:	1000021e 	bne	r2,zero,80b54c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80b544:	002af070 	cmpltui	zero,zero,43969
  80b548:	00000106 	br	80b550 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80b54c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80b550:	e037883a 	mov	sp,fp
  80b554:	df000017 	ldw	fp,0(sp)
  80b558:	dec00104 	addi	sp,sp,4
  80b55c:	f800283a 	ret

0080b560 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80b560:	defffd04 	addi	sp,sp,-12
  80b564:	dfc00215 	stw	ra,8(sp)
  80b568:	df000115 	stw	fp,4(sp)
  80b56c:	df000104 	addi	fp,sp,4
  80b570:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80b574:	e13fff17 	ldw	r4,-4(fp)
  80b578:	080b5200 	call	80b520 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80b57c:	003fff06 	br	80b57c <_exit+0x1c>
  80b580:	0080b220 	cmpeqi	r2,zero,712
