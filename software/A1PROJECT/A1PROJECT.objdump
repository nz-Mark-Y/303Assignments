
A1PROJECT.elf:     file format elf32-littlenios2
A1PROJECT.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001528c memsz 0x0001528c flags r-x
    LOAD off    0x000162ac vaddr 0x008152ac paddr 0x00816f88 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00018c64 vaddr 0x00818c64 paddr 0x00818c64 align 2**12
         filesz 0x00000000 memsz 0x00000450 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000149c8  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000730  00814b7c  00814b7c  00015b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  008152ac  00816f88  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000450  00818c64  00818c64  00018c64  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017f88  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00017fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c0a  00000000  00000000  000191a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036be2  00000000  00000000  0001adb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b9f2  00000000  00000000  00051994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d7a8  00000000  00000000  0005d386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002584  00000000  00000000  0007ab30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d36  00000000  00000000  0007d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012bf5  00000000  00000000  0007fdea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000929e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00092a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00097794  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00097797  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009779a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009779b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009779c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000977a0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000977a4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000977a8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000977b1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000977ba  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000977c3  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000054  00000000  00000000  000977c9  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  0009781d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814b7c l    d  .rodata	00000000 .rodata
008152ac l    d  .rwdata	00000000 .rwdata
00818c64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00818c64 l     O .bss	00000004 tlc_timer_event
00818c68 l     O .bss	00000004 camera_timer_event
00818c6c l     O .bss	00000004 pedestrianNS
00818c70 l     O .bss	00000004 pedestrianEW
00818c74 l     O .bss	00000004 newTimeoutValues
00818c78 l     O .bss	00000004 vehicle_detected
008152ac l     O .rwdata	00000018 timeout
008152c4 l     O .rwdata	0000001c timeout_buf
00818c7c l     O .bss	00000004 valueCount
008152e0 l     O .rwdata	00000018 tempBuffer
00816f38 l     O .rwdata	00000006 traffic_lights
00818c80 l     O .bss	00000004 mode
008152f8 l     O .rwdata	00000010 proc_state
00818c84 l     O .bss	00000004 camera_count
00818ccc l     O .bss	00000018 tlc_timer
00818c88 l     O .bss	00000004 state.3054
00818c8c l     O .bss	00000004 c
00818c90 l     O .bss	00000004 timeoutValue
00818ce4 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
008014ac l     F .text	00000058 std
008015b8 l     F .text	00000008 __fp_lock
008015c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815308 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803d14 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00803ed4 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008041a8 l     F .text	00000058 __sprint_r
00814ccc l     O .rodata	00000010 blanks.3452
00814cbc l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814ce4 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814e0c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807a74 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816f58 l     O .rwdata	00000004 charset
00814fac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
008150f4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080aa54 l     F .text	00000048 match
00815b30 l     O .rwdata	00000014 fpi.1950
00815110 l     O .rodata	00000028 tinytens
00815b1c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080cecc l     F .text	00000024 htinit
0080cf58 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d7c0 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080e884 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080faac l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008106d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810738 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810838 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810b18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810bf8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810d54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810e60 l     F .text	000000dc alt_file_locked
008110c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00811244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816f78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811684 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815cec l     O .rwdata	00001060 jtag_uart
00816d4c l     O .rwdata	00000120 lcd
00816e6c l     O .rwdata	000000c4 uart
008117ac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008119ec l     F .text	00000228 altera_avalon_jtag_uart_irq
00811c14 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816f84 l     O .rwdata	00000004 colstart
00812290 l     F .text	000000b8 lcd_write_command
00812348 l     F .text	000000d4 lcd_write_data
0081241c l     F .text	000000c4 lcd_clear_screen
008124e0 l     F .text	000001ec lcd_repaint_screen
008126cc l     F .text	000000c8 lcd_scroll_up
00812794 l     F .text	000002d0 lcd_handle_escape
00812f70 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008131d0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00813490 l     F .text	0000009c altera_avalon_uart_irq
0081352c l     F .text	000000e0 altera_avalon_uart_rxirq
0081360c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008139f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813d78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814408 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814964 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814b18 l     F .text	00000040 alt_sim_halt
00809c00 g     F .text	00000094 _mprec_log10
0080025c g     F .text	00000068 lcd_set_mode
00809cec g     F .text	00000088 __any_on
0080951c g     F .text	00000070 _isatty_r
008150cc g     O .rodata	00000028 __mprec_tinytens
00810db4 g     F .text	0000006c alt_main
00818e24 g     O .bss	00000100 alt_irq
0080967c g     F .text	00000078 _lseek_r
00816f88 g       *ABS*	00000000 __flash_rwdata_start
00809240 g     F .text	000000a0 __sflags
0080f3a4 g     F .text	00000088 __eqdf2
008190b4 g       *ABS*	00000000 __alt_heap_start
00800d40 g     F .text	00000060 printToUART
008034e4 g     F .text	00000044 printf
00803ff0 g     F .text	00000068 __sseek
00801514 g     F .text	000000a4 __sinit
008095dc g     F .text	00000084 _setlocale_r
00801614 g     F .text	00000068 __sfmoreglue
0080cdfc g     F .text	0000001c ungetc
00810e40 g     F .text	00000020 __malloc_unlock
0080aa9c g     F .text	000014e4 _strtod_r
00818c94 g     O .bss	00000004 fp
008032f4 g     F .text	000000e0 memmove
00801604 g     F .text	00000010 _cleanup
00809d74 g     F .text	000000bc _Balloc
00800b30 g     F .text	00000020 buffer_timeout
0080f4b4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080220c g     F .text	00000074 _fstat_r
00818c98 g     O .bss	00000004 errno
00803d7c g     F .text	00000014 __srget
00807750 g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080fde8 g     F .text	0000002c __make_fp
00818cbc g     O .bss	00000004 alt_argv
0081ef30 g       *ABS*	00000000 _gp
00814544 g     F .text	00000030 usleep
00800484 g     F .text	000000bc tlc_timer_isr
00815b6c g     O .rwdata	00000180 alt_fd_list
00813ea0 g     F .text	00000094 alt_find_dev
00803254 g     F .text	000000a0 memcpy
0080d80c g     F .text	00000248 __hexnan
00800b70 g     F .text	000000b8 camera_timer_isr
008015f8 g     F .text	0000000c _cleanup_r
0080f6d4 g     F .text	000000f8 __floatsidf
008144cc g     F .text	00000078 alt_io_redirect
0080f5c4 g     F .text	00000088 __ltdf2
00814b7c g       *ABS*	00000000 __DTOR_END__
00809774 g     F .text	00000040 mbrtowc
00807774 g     F .text	00000068 _vfscanf_r
00809b50 g     F .text	000000b0 __ratio
00800688 g     F .text	00000204 pedestrian_tlc
00811e2c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803528 g     F .text	00000034 _printf_r
0080fbe8 g     F .text	00000008 __udivsi3
00810a58 g     F .text	000000c0 isatty
0080958c g     F .text	0000002c iswspace
00814fdc g     O .rodata	000000c8 __mprec_tens
008095b8 g     F .text	00000008 __locale_charset
0080daec g     F .text	000000a4 __fixunsdfsi
008146e0 g     F .text	00000090 alt_icache_flush
00818c9c g     O .bss	00000004 __malloc_top_pad
0080c870 g     F .text	00000024 strtoul
00816f54 g     O .rwdata	00000004 __mb_cur_max
008095c0 g     F .text	0000000c _localeconv_r
0080c894 g     F .text	000002f0 _strtoull_r
0080a46c g     F .text	0000003c __i2b
00802280 g     F .text	0000049c __sfvwrite_r
00803d90 g     F .text	00000070 _sbrk_r
0080088c g     F .text	000000b4 configurable_tlc
0080a7e8 g     F .text	00000078 _read_r
00815b10 g     O .rwdata	0000000c __lc_ctype
00816f6c g     O .rwdata	00000004 alt_max_fd
00810128 g     F .text	00000138 __unpack_d
00801030 g     F .text	00000110 _fclose_r
00801350 g     F .text	00000034 fflush
00800da0 g     F .text	0000003c handle_vehicle_button
00818ca0 g     O .bss	00000004 __malloc_max_sbrked_mem
00810898 g     F .text	000001c0 alt_irq_register
0080141c g     F .text	00000090 _fgetc_r
0080ed14 g     F .text	00000074 __adddf3
0080e71c g     F .text	00000078 __nesf2
00809a30 g     F .text	00000120 __b2d
0080e16c g     F .text	000005b0 __umoddi3
00810c64 g     F .text	000000f0 lseek
00816f44 g     O .rwdata	00000004 _global_impure_ptr
0080355c g     F .text	000005f4 _realloc_r
008190b4 g       *ABS*	00000000 __bss_end
00814310 g     F .text	000000f8 alt_iic_isr_register
00811458 g     F .text	0000010c alt_tick
00818d24 g     O .bss	00000100 __hexdig
0080db90 g     F .text	000005dc __udivdi3
008150a4 g     O .rodata	00000028 __mprec_bigtens
0080a6c8 g     F .text	00000120 __s2b
0080f918 g     F .text	00000194 __floatunsidf
00809950 g     F .text	00000060 __mcmp
008133c8 g     F .text	000000c8 altera_avalon_uart_init
00816f50 g     O .rwdata	00000004 __ctype_ptr
008015e0 g     F .text	00000018 __fp_lock_all
008142c8 g     F .text	00000048 alt_ic_irq_enabled
008113c0 g     F .text	00000098 alt_alarm_stop
00800c28 g     F .text	00000118 camera_tlc
0080c304 g     F .text	00000024 strtol
00818cb4 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815b44 g     O .rwdata	00000028 alt_dev_null
0080fc78 g     F .text	000000c8 __unpack_f
00813c80 g     F .text	00000044 alt_dcache_flush_all
0080981c g     F .text	00000070 __hi0bits
0080f7cc g     F .text	000000d8 __fixdfsi
0080c0a4 g     F .text	0000001c strtod
00816f88 g       *ABS*	00000000 __ram_rwdata_end
00816f64 g     O .rwdata	00000008 alt_dev_list
00811564 g     F .text	00000120 write
0080e794 g     F .text	00000078 __gtsf2
008152ac g       *ABS*	00000000 __ram_rodata_end
00810764 g     F .text	000000d4 fstat
0080187c g     F .text	0000002c fprintf
0080f64c g     F .text	00000088 __ledf2
0080a5a8 g     F .text	00000120 __pow5mult
00818ca8 g     O .bss	00000004 __nlocale_changed
0080fbf0 g     F .text	00000008 __umodsi3
008190b4 g       *ABS*	00000000 end
00810328 g     F .text	00000160 __pack_f
00812a64 g     F .text	0000050c altera_avalon_lcd_16207_write
00813a58 g     F .text	000001c8 altera_avalon_uart_write
008021e8 g     F .text	00000024 fseek
0081192c g     F .text	000000c0 altera_avalon_jtag_uart_init
00814b78 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813240 g     F .text	00000090 alt_avalon_timer_sc_init
00813328 g     F .text	00000058 altera_avalon_uart_write_fd
0080fbf8 g     F .text	00000080 __clzsi2
00813380 g     F .text	00000048 altera_avalon_uart_close_fd
00812050 g     F .text	00000240 altera_avalon_jtag_uart_write
00801504 g     F .text	00000004 __sfp_lock_acquire
00803170 g     F .text	000000e4 memchr
00804200 g     F .text	00001eac ___vfprintf_internal_r
00803e74 g     F .text	00000060 _sprintf_r
00801a98 g     F .text	00000314 _free_r
00814968 g     F .text	000001b0 __call_exitprocs
00803d30 g     F .text	0000004c __srget_r
00818cac g     O .bss	00000004 __mlocale_changed
00816f4c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818cc4 g     O .bss	00000004 _alt_tick_rate
0080c328 g     F .text	00000318 _strtoll_r
00816f30 g     O .rwdata	00000005 chararray
0080a138 g     F .text	0000014c __lshift
00818cc8 g     O .bss	00000004 _alt_nticks
00811124 g     F .text	00000120 read
00811718 g     F .text	00000094 alt_sys_init
0080346c g     F .text	00000078 _open_r
00814830 g     F .text	00000134 __register_exitproc
0080a284 g     F .text	000001e8 __multiply
00811cc4 g     F .text	00000074 altera_avalon_jtag_uart_close
008152ac g       *ABS*	00000000 __ram_rwdata_start
00814b7c g       *ABS*	00000000 __ram_rodata_start
00818cfc g     O .bss	00000028 __malloc_current_mallinfo
00809e30 g     F .text	0000017c __d2b
008117e4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c640 g     F .text	00000230 _strtoul_r
00814054 g     F .text	000000b8 alt_get_fd
00814594 g     F .text	0000014c alt_busy_sleep
00810260 g     F .text	000000c8 __fpcmp_parts_d
00807a04 g     F .text	00000070 _close_r
008147bc g     F .text	00000074 memcmp
00811894 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008190b4 g       *ABS*	00000000 __alt_stack_base
008118dc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803f64 g     F .text	00000084 sscanf
008078c8 g     F .text	0000013c __swsetup_r
0080f14c g     F .text	00000258 __divdf3
0080167c g     F .text	000000f0 __sfp
00809c94 g     F .text	00000058 __copybits
00815708 g     O .rwdata	00000408 __malloc_av_
00801510 g     F .text	00000004 __sinit_lock_release
0080ed88 g     F .text	000003c4 __muldf3
008040d4 g     F .text	00000060 __sread
008094dc g     F .text	00000040 fread
00813f34 g     F .text	00000120 alt_find_file
00813cc4 g     F .text	000000b4 alt_dev_llist_insert
00810e20 g     F .text	00000020 __malloc_lock
008018a8 g     F .text	00000034 _fprintf_r
00811304 g     F .text	000000bc sbrk
00801154 g     F .text	000001fc _fflush_r
0080ce18 g     F .text	000000b4 _calloc_r
00801860 g     F .text	0000001c fopen
00818c64 g       *ABS*	00000000 __bss_start
008033d4 g     F .text	00000098 memset
00800ddc g     F .text	00000254 main
00818cc0 g     O .bss	00000004 alt_envp
00818ca4 g     O .bss	00000004 __malloc_max_total_mem
0081183c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e80c g     F .text	00000078 __ltsf2
008092e0 g     F .text	000001fc _fread_r
0081303c g     F .text	0000013c altera_avalon_lcd_16207_init
00800940 g     F .text	00000048 config_tlc
00803fe8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00801140 g     F .text	00000014 fclose
0080c0c0 g     F .text	00000244 _strtol_r
0080f8a4 g     F .text	00000074 __truncdfsf2
00818f24 g     O .bss	00000190 _atexit0
008002c4 g     F .text	00000044 buttons_driver
00807c8c g     F .text	000015b4 _dtoa_r
00802a30 g     F .text	00000740 _malloc_r
00816f70 g     O .rwdata	00000004 alt_errno
0080cb84 g     F .text	000000dc __submore
00800540 g     F .text	000000e4 NSEW_ped_isr
008027e4 g     F .text	000000b8 _fwalk
008097b4 g     F .text	00000040 _mbtowc_r
0080fb28 g     F .text	00000060 __divsi3
00815154 g     O .rodata	00000014 __thenan_df
0080196c g     F .text	0000012c _malloc_trim_r
00800b50 g     F .text	00000020 update_timeout
00814b7c g       *ABS*	00000000 __CTOR_END__
0080a998 g     F .text	000000bc strcmp
00814b7c g       *ABS*	00000000 __flash_rodata_start
00814b7c g       *ABS*	00000000 __DTOR_LIST__
0080f42c g     F .text	00000088 __nedf2
008116e4 g     F .text	00000034 alt_irq_init
008112a4 g     F .text	00000060 alt_release_fd
00801384 g     F .text	00000098 fgetc
00803e00 g     F .text	00000074 sprintf
00815168 g     O .rodata	00000100 __clz_tab
00818cb0 g     O .bss	00000004 _PathLocale
0080bf80 g     F .text	00000124 strtof
00814770 g     F .text	00000014 atexit
00807850 g     F .text	00000078 _write_r
00809660 g     F .text	0000001c setlocale
0080a990 g     F .text	00000008 nanf
00816f40 g     O .rwdata	00000004 _impure_ptr
00818cb8 g     O .bss	00000004 alt_argc
008096f4 g     F .text	00000080 _mbrtowc_r
00813e3c g     F .text	00000064 _do_dtors
00801dac g     F .text	0000043c _fseek_r
00800988 g     F .text	000001a8 timeout_data_handler
00803b50 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
008099b0 g     F .text	00000080 __ulp
0080a860 g     F .text	00000040 __isinfd
008015c8 g     F .text	00000018 __fp_unlock_all
00813178 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00816f5c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008095cc g     F .text	00000010 localeconv
0081413c g     F .text	00000050 alt_ic_isr_register
0080cef0 g     F .text	00000068 __hexdig_init
00803edc g     F .text	00000088 _sscanf_r
00816f88 g       *ABS*	00000000 _edata
008132d0 g     F .text	00000058 altera_avalon_uart_read_fd
008190b4 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008077dc g     F .text	00000074 vfscanf
00811d38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008018dc g     F .text	00000074 _fputs_r
00814228 g     F .text	000000a0 alt_ic_irq_disable
00804058 g     F .text	0000007c __swrite
00816f48 g     O .rwdata	00000004 __malloc_trim_threshold
00814574 g     F .text	00000020 altera_nios2_qsys_irq_init
00814784 g     F .text	00000038 exit
0080271c g     F .text	000000c8 _fwalk_reent
00809fac g     F .text	0000018c __mdiff
00800308 g     F .text	0000017c simple_tlc
0080fb88 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801508 g     F .text	00000004 __sfp_lock_release
0080a8d0 g     F .text	000000c0 __sccl
00800200 g     F .text	0000005c init_tlc
00814d08 g     O .rodata	00000101 _ctype_
00813768 g     F .text	00000060 altera_avalon_uart_close
0080fd40 g     F .text	000000a8 __fpcmp_parts_f
0080176c g     F .text	000000f4 _fopen_r
00814b58 g     F .text	00000020 _exit
0080a8a0 g     F .text	00000030 __isnand
00810488 g     F .text	00000154 alt_alarm_start
0080da54 g     F .text	00000098 __muldi3
0080289c g     F .text	00000194 __smakebuf_r
00804134 g     F .text	00000074 strlen
00810f3c g     F .text	00000188 open
0080f53c g     F .text	00000088 __gedf2
0080d008 g     F .text	000007b8 __gethex
0081410c g     F .text	00000030 alt_icache_flush_all
00801950 g     F .text	0000001c fputs
00816f74 g     O .rwdata	00000004 alt_priority_mask
0081418c g     F .text	0000009c alt_ic_irq_enable
008060ac g     F .text	00000024 __vfprintf_internal
008137c8 g     F .text	00000230 altera_avalon_uart_read
0080ec94 g     F .text	00000080 __subdf3
0080988c g     F .text	000000c4 __lo0bits
008060d0 g     F .text	00001680 __svfscanf_r
00816f7c g     O .rwdata	00000008 alt_alarm_list
0080cc60 g     F .text	0000019c _ungetc_r
00813dd8 g     F .text	00000064 _do_ctors
008105dc g     F .text	000000fc close
00800624 g     F .text	00000064 init_buttons_pio
00810b78 g     F .text	00000080 alt_load
0080fe14 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080150c g     F .text	00000004 __sinit_lock_acquire
0080a4a8 g     F .text	00000100 __multadd
008097f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e38904 	addi	r3,r3,-29148
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e38904 	addi	r3,r3,-29148
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bbcc14 	ori	gp,gp,61232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a31914 	ori	r2,r2,35940

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e42d14 	ori	r3,r3,37044

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810b780 	call	810b78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810db40 	call	810db4 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1}; // Process states: use -1 as initialisation state
static int camera_count = 0;

// Code =======================================
// Initialise the traffic light controller for all modes
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a75417 	ldw	r2,-25264(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	printf("started timer");
  800218:	01002074 	movhi	r4,129
  80021c:	2112df04 	addi	r4,r4,19324
  800220:	08034e40 	call	8034e4 <printf>
	alt_alarm_start(&tlc_timer, timeout[0], tlc_timer_isr, timerContext);
  800224:	00802074 	movhi	r2,129
  800228:	1094ab04 	addi	r2,r2,21164
  80022c:	11400017 	ldw	r5,0(r2)
  800230:	010020b4 	movhi	r4,130
  800234:	21233304 	addi	r4,r4,-29492
  800238:	01802034 	movhi	r6,128
  80023c:	31812104 	addi	r6,r6,1156
  800240:	e1ffff17 	ldw	r7,-4(fp)
  800244:	08104880 	call	810488 <alt_alarm_start>
}
  800248:	e037883a 	mov	sp,fp
  80024c:	dfc00117 	ldw	ra,4(sp)
  800250:	df000017 	ldw	fp,0(sp)
  800254:	dec00204 	addi	sp,sp,8
  800258:	f800283a 	ret

0080025c <lcd_set_mode>:

/* DESCRIPTION: Writes the mode to the LCD screen
 * PARAMETER:   mode - the current mode
 * RETURNS:     none
 */
void lcd_set_mode(unsigned int mode, FILE* lcd) {
  80025c:	defffc04 	addi	sp,sp,-16
  800260:	dfc00315 	stw	ra,12(sp)
  800264:	df000215 	stw	fp,8(sp)
  800268:	df000204 	addi	fp,sp,8
  80026c:	e13ffe15 	stw	r4,-8(fp)
  800270:	e17fff15 	stw	r5,-4(fp)
	if(lcd != NULL) {
  800274:	e0bfff17 	ldw	r2,-4(fp)
  800278:	1005003a 	cmpeq	r2,r2,zero
  80027c:	10000c1e 	bne	r2,zero,8002b0 <lcd_set_mode+0x54>
		#define ESC 27
		#define CLEAR_LCD_STRING "[2J"
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800280:	e13fff17 	ldw	r4,-4(fp)
  800284:	01402074 	movhi	r5,129
  800288:	2952e304 	addi	r5,r5,19340
  80028c:	018006c4 	movi	r6,27
  800290:	01c02074 	movhi	r7,129
  800294:	39d2e504 	addi	r7,r7,19348
  800298:	080187c0 	call	80187c <fprintf>
		fprintf(lcd, "Mode: %d\n",mode);
  80029c:	e13fff17 	ldw	r4,-4(fp)
  8002a0:	01402074 	movhi	r5,129
  8002a4:	2952e604 	addi	r5,r5,19352
  8002a8:	e1bffe17 	ldw	r6,-8(fp)
  8002ac:	080187c0 	call	80187c <fprintf>
	}
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	dfc00117 	ldw	ra,4(sp)
  8002b8:	df000017 	ldw	fp,0(sp)
  8002bc:	dec00204 	addi	sp,sp,8
  8002c0:	f800283a 	ret

008002c4 <buttons_driver>:

/* DESCRIPTION: Performs button-press detection and debouncing
 * PARAMETER:   button - referenced argument to indicate the state of the button
 * RETURNS:     none
 */
void buttons_driver(unsigned int* button) {
  8002c4:	defffd04 	addi	sp,sp,-12
  8002c8:	dfc00215 	stw	ra,8(sp)
  8002cc:	df000115 	stw	fp,4(sp)
  8002d0:	df000104 	addi	fp,sp,4
  8002d4:	e13fff15 	stw	r4,-4(fp)
			handle_mode_button(button);
		}
	}
	*/

	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x04) == 0) { // KEY 2
  8002d8:	00804074 	movhi	r2,257
  8002dc:	10842804 	addi	r2,r2,4256
  8002e0:	10800037 	ldwio	r2,0(r2)
  8002e4:	1080010c 	andi	r2,r2,4
  8002e8:	1004c03a 	cmpne	r2,r2,zero
  8002ec:	1000011e 	bne	r2,zero,8002f4 <buttons_driver+0x30>
		handle_vehicle_button();
  8002f0:	0800da00 	call	800da0 <handle_vehicle_button>
	}
}
  8002f4:	e037883a 	mov	sp,fp
  8002f8:	dfc00117 	ldw	ra,4(sp)
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00204 	addi	sp,sp,8
  800304:	f800283a 	ret

00800308 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  800308:	defffd04 	addi	sp,sp,-12
  80030c:	dfc00215 	stw	ra,8(sp)
  800310:	df000115 	stw	fp,4(sp)
  800314:	df000104 	addi	fp,sp,4
  800318:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	10800017 	ldw	r2,0(r2)
  800324:	10bfffd8 	cmpnei	r2,r2,-1
  800328:	10000b1e 	bne	r2,zero,800358 <simple_tlc+0x50>
		// Process initialisation state
		init_tlc();
  80032c:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800330:	e0bfff17 	ldw	r2,-4(fp)
  800334:	10800017 	ldw	r2,0(r2)
  800338:	10c00044 	addi	r3,r2,1
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);//both traffic lights will be red by default
  800344:	00c04074 	movhi	r3,257
  800348:	18c41804 	addi	r3,r3,4192
  80034c:	00800904 	movi	r2,36
  800350:	18800035 	stwio	r2,0(r3)
		return;
  800354:	00004606 	br	800470 <simple_tlc+0x168>
	// If the timeout has occurred
	/*
		// Increase state number (within bounds)
		// Restart timer with new timeout value
	*/
	if (tlc_timer_event == 1) {
  800358:	d0a74d17 	ldw	r2,-25292(gp)
  80035c:	10800058 	cmpnei	r2,r2,1
  800360:	1000431e 	bne	r2,zero,800470 <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  800364:	e0bfff17 	ldw	r2,-4(fp)
  800368:	10800017 	ldw	r2,0(r2)
  80036c:	1004c03a 	cmpne	r2,r2,zero
  800370:	1000081e 	bne	r2,zero,800394 <simple_tlc+0x8c>
			*state = 1; // G, R
  800374:	e0ffff17 	ldw	r3,-4(fp)
  800378:	00800044 	movi	r2,1
  80037c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800380:	00c04074 	movhi	r3,257
  800384:	18c41804 	addi	r3,r3,4192
  800388:	00800304 	movi	r2,12
  80038c:	18800035 	stwio	r2,0(r3)
  800390:	00003606 	br	80046c <simple_tlc+0x164>
		} else if (*state == 1) {
  800394:	e0bfff17 	ldw	r2,-4(fp)
  800398:	10800017 	ldw	r2,0(r2)
  80039c:	10800058 	cmpnei	r2,r2,1
  8003a0:	1000081e 	bne	r2,zero,8003c4 <simple_tlc+0xbc>
			*state = 2; // Y, R
  8003a4:	e0ffff17 	ldw	r3,-4(fp)
  8003a8:	00800084 	movi	r2,2
  8003ac:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8003b0:	00c04074 	movhi	r3,257
  8003b4:	18c41804 	addi	r3,r3,4192
  8003b8:	00800504 	movi	r2,20
  8003bc:	18800035 	stwio	r2,0(r3)
  8003c0:	00002a06 	br	80046c <simple_tlc+0x164>
		} else if (*state == 2) {
  8003c4:	e0bfff17 	ldw	r2,-4(fp)
  8003c8:	10800017 	ldw	r2,0(r2)
  8003cc:	10800098 	cmpnei	r2,r2,2
  8003d0:	1000081e 	bne	r2,zero,8003f4 <simple_tlc+0xec>
			*state = 3; // R, R
  8003d4:	e0ffff17 	ldw	r3,-4(fp)
  8003d8:	008000c4 	movi	r2,3
  8003dc:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8003e0:	00c04074 	movhi	r3,257
  8003e4:	18c41804 	addi	r3,r3,4192
  8003e8:	00800904 	movi	r2,36
  8003ec:	18800035 	stwio	r2,0(r3)
  8003f0:	00001e06 	br	80046c <simple_tlc+0x164>
		} else if (*state == 3) {
  8003f4:	e0bfff17 	ldw	r2,-4(fp)
  8003f8:	10800017 	ldw	r2,0(r2)
  8003fc:	108000d8 	cmpnei	r2,r2,3
  800400:	1000081e 	bne	r2,zero,800424 <simple_tlc+0x11c>
			*state = 4; // R, G
  800404:	e0ffff17 	ldw	r3,-4(fp)
  800408:	00800104 	movi	r2,4
  80040c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800410:	00c04074 	movhi	r3,257
  800414:	18c41804 	addi	r3,r3,4192
  800418:	00800844 	movi	r2,33
  80041c:	18800035 	stwio	r2,0(r3)
  800420:	00001206 	br	80046c <simple_tlc+0x164>
		} else if (*state == 4) {
  800424:	e0bfff17 	ldw	r2,-4(fp)
  800428:	10800017 	ldw	r2,0(r2)
  80042c:	10800118 	cmpnei	r2,r2,4
  800430:	1000081e 	bne	r2,zero,800454 <simple_tlc+0x14c>
			*state = 5; // R, Y
  800434:	e0ffff17 	ldw	r3,-4(fp)
  800438:	00800144 	movi	r2,5
  80043c:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800440:	00c04074 	movhi	r3,257
  800444:	18c41804 	addi	r3,r3,4192
  800448:	00800884 	movi	r2,34
  80044c:	18800035 	stwio	r2,0(r3)
  800450:	00000606 	br	80046c <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  800454:	e0bfff17 	ldw	r2,-4(fp)
  800458:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  80045c:	00c04074 	movhi	r3,257
  800460:	18c41804 	addi	r3,r3,4192
  800464:	00800904 	movi	r2,36
  800468:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  80046c:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  800470:	e037883a 	mov	sp,fp
  800474:	dfc00117 	ldw	ra,4(sp)
  800478:	df000017 	ldw	fp,0(sp)
  80047c:	dec00204 	addi	sp,sp,8
  800480:	f800283a 	ret

00800484 <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  800484:	defffa04 	addi	sp,sp,-24
  800488:	dfc00515 	stw	ra,20(sp)
  80048c:	df000415 	stw	fp,16(sp)
  800490:	df000404 	addi	fp,sp,16
  800494:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  800498:	e0bfff17 	ldw	r2,-4(fp)
  80049c:	e0bffe15 	stw	r2,-8(fp)
	*trigger = trigger;
  8004a0:	e0fffe17 	ldw	r3,-8(fp)
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	10c00015 	stw	r3,0(r2)
	int currentState = proc_state[*trigger];
  8004ac:	e0bffe17 	ldw	r2,-8(fp)
  8004b0:	10800017 	ldw	r2,0(r2)
  8004b4:	00c02074 	movhi	r3,129
  8004b8:	18d4be04 	addi	r3,r3,21240
  8004bc:	1085883a 	add	r2,r2,r2
  8004c0:	1085883a 	add	r2,r2,r2
  8004c4:	10c5883a 	add	r2,r2,r3
  8004c8:	10800017 	ldw	r2,0(r2)
  8004cc:	e0bffd15 	stw	r2,-12(fp)
	if (currentState != 5) {
  8004d0:	e0bffd17 	ldw	r2,-12(fp)
  8004d4:	10800160 	cmpeqi	r2,r2,5
  8004d8:	1000041e 	bne	r2,zero,8004ec <tlc_timer_isr+0x68>
		currentState++;
  8004dc:	e0bffd17 	ldw	r2,-12(fp)
  8004e0:	10800044 	addi	r2,r2,1
  8004e4:	e0bffd15 	stw	r2,-12(fp)
  8004e8:	00000106 	br	8004f0 <tlc_timer_isr+0x6c>
	} else {
		currentState = 0;
  8004ec:	e03ffd15 	stw	zero,-12(fp)
	}
	int	nextTimeout = timeout[currentState];
  8004f0:	e0bffd17 	ldw	r2,-12(fp)
  8004f4:	00c02074 	movhi	r3,129
  8004f8:	18d4ab04 	addi	r3,r3,21164
  8004fc:	1085883a 	add	r2,r2,r2
  800500:	1085883a 	add	r2,r2,r2
  800504:	10c5883a 	add	r2,r2,r3
  800508:	10800017 	ldw	r2,0(r2)
  80050c:	e0bffc15 	stw	r2,-16(fp)
	printf("next timeout:%d\n", nextTimeout);
  800510:	01002074 	movhi	r4,129
  800514:	2112e904 	addi	r4,r4,19364
  800518:	e17ffc17 	ldw	r5,-16(fp)
  80051c:	08034e40 	call	8034e4 <printf>
	tlc_timer_event = 1;
  800520:	00800044 	movi	r2,1
  800524:	d0a74d15 	stw	r2,-25292(gp)
	return nextTimeout;
  800528:	e0bffc17 	ldw	r2,-16(fp)
}
  80052c:	e037883a 	mov	sp,fp
  800530:	dfc00117 	ldw	ra,4(sp)
  800534:	df000017 	ldw	fp,0(sp)
  800538:	dec00204 	addi	sp,sp,8
  80053c:	f800283a 	ret

00800540 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  800540:	defffa04 	addi	sp,sp,-24
  800544:	dfc00515 	stw	ra,20(sp)
  800548:	df000415 	stw	fp,16(sp)
  80054c:	df000404 	addi	fp,sp,16
  800550:	e13ffe15 	stw	r4,-8(fp)
  800554:	e17fff15 	stw	r5,-4(fp)
	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x01) == 0) { // KEY 0 = NS Pedestrian button
  800558:	00804074 	movhi	r2,257
  80055c:	10842804 	addi	r2,r2,4256
  800560:	10800037 	ldwio	r2,0(r2)
  800564:	1080004c 	andi	r2,r2,1
  800568:	1004c03a 	cmpne	r2,r2,zero
  80056c:	1000111e 	bne	r2,zero,8005b4 <NSEW_ped_isr+0x74>
		volatile int* temp = (volatile int*) context;
  800570:	e0bffe17 	ldw	r2,-8(fp)
  800574:	e0bffd15 	stw	r2,-12(fp)
		(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800578:	00804074 	movhi	r2,257
  80057c:	10842b04 	addi	r2,r2,4268
  800580:	10c00037 	ldwio	r3,0(r2)
  800584:	e0bffd17 	ldw	r2,-12(fp)
  800588:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  80058c:	00804074 	movhi	r2,257
  800590:	10842b04 	addi	r2,r2,4268
  800594:	10000035 	stwio	zero,0(r2)
		pedestrianNS = 1;
  800598:	00800044 	movi	r2,1
  80059c:	d0a74f15 	stw	r2,-25284(gp)
		printf("button: %i\n", *temp);
  8005a0:	e0bffd17 	ldw	r2,-12(fp)
  8005a4:	11400017 	ldw	r5,0(r2)
  8005a8:	01002074 	movhi	r4,129
  8005ac:	2112ee04 	addi	r4,r4,19384
  8005b0:	08034e40 	call	8034e4 <printf>
	}

	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x02) == 0) {
  8005b4:	00804074 	movhi	r2,257
  8005b8:	10842804 	addi	r2,r2,4256
  8005bc:	10800037 	ldwio	r2,0(r2)
  8005c0:	1080008c 	andi	r2,r2,2
  8005c4:	1004c03a 	cmpne	r2,r2,zero
  8005c8:	1000111e 	bne	r2,zero,800610 <NSEW_ped_isr+0xd0>
		volatile int* temp = (volatile int*) context;
  8005cc:	e0bffe17 	ldw	r2,-8(fp)
  8005d0:	e0bffc15 	stw	r2,-16(fp)
		(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE); // KEY 1 = EW Pedestrian button
  8005d4:	00804074 	movhi	r2,257
  8005d8:	10842b04 	addi	r2,r2,4268
  8005dc:	10c00037 	ldwio	r3,0(r2)
  8005e0:	e0bffc17 	ldw	r2,-16(fp)
  8005e4:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  8005e8:	00804074 	movhi	r2,257
  8005ec:	10842b04 	addi	r2,r2,4268
  8005f0:	10000035 	stwio	zero,0(r2)
		pedestrianEW = 1;
  8005f4:	00800044 	movi	r2,1
  8005f8:	d0a75015 	stw	r2,-25280(gp)
		printf("button: %i\n", *temp);
  8005fc:	e0bffc17 	ldw	r2,-16(fp)
  800600:	11400017 	ldw	r5,0(r2)
  800604:	01002074 	movhi	r4,129
  800608:	2112ee04 	addi	r4,r4,19384
  80060c:	08034e40 	call	8034e4 <printf>
	}

	return;
}
  800610:	e037883a 	mov	sp,fp
  800614:	dfc00117 	ldw	ra,4(sp)
  800618:	df000017 	ldw	fp,0(sp)
  80061c:	dec00204 	addi	sp,sp,8
  800620:	f800283a 	ret

00800624 <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  800624:	defffc04 	addi	sp,sp,-16
  800628:	dfc00315 	stw	ra,12(sp)
  80062c:	df000215 	stw	fp,8(sp)
  800630:	df000204 	addi	fp,sp,8
	int buttonValue = 1;
  800634:	00800044 	movi	r2,1
  800638:	e0bfff15 	stw	r2,-4(fp)

	void* context_going_to_be_passed = (void*) &buttonValue; 								// cast before passing to ISR
  80063c:	e0bfff04 	addi	r2,fp,-4
  800640:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// clears the edge capture register
  800644:	00804074 	movhi	r2,257
  800648:	10842b04 	addi	r2,r2,4268
  80064c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3); 									// enable interrupts for all buttons
  800650:	00c04074 	movhi	r3,257
  800654:	18c42a04 	addi	r3,r3,4264
  800658:	008000c4 	movi	r2,3
  80065c:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// register the ISR
  800660:	01000104 	movi	r4,4
  800664:	e17ffe17 	ldw	r5,-8(fp)
  800668:	01802034 	movhi	r6,128
  80066c:	31815004 	addi	r6,r6,1344
  800670:	08108980 	call	810898 <alt_irq_register>
}
  800674:	e037883a 	mov	sp,fp
  800678:	dfc00117 	ldw	ra,4(sp)
  80067c:	df000017 	ldw	fp,0(sp)
  800680:	dec00204 	addi	sp,sp,8
  800684:	f800283a 	ret

00800688 <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  800688:	defffd04 	addi	sp,sp,-12
  80068c:	dfc00215 	stw	ra,8(sp)
  800690:	df000115 	stw	fp,4(sp)
  800694:	df000104 	addi	fp,sp,4
  800698:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  80069c:	e0bfff17 	ldw	r2,-4(fp)
  8006a0:	10800017 	ldw	r2,0(r2)
  8006a4:	10bfffd8 	cmpnei	r2,r2,-1
  8006a8:	1000101e 	bne	r2,zero,8006ec <pedestrian_tlc+0x64>
		(*state)++;
  8006ac:	e0bfff17 	ldw	r2,-4(fp)
  8006b0:	10800017 	ldw	r2,0(r2)
  8006b4:	10c00044 	addi	r3,r2,1
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	10c00015 	stw	r3,0(r2)
		printf("current state:%d\n", *state);
  8006c0:	e0bfff17 	ldw	r2,-4(fp)
  8006c4:	11400017 	ldw	r5,0(r2)
  8006c8:	01002074 	movhi	r4,129
  8006cc:	2112f104 	addi	r4,r4,19396
  8006d0:	08034e40 	call	8034e4 <printf>
		init_tlc();
  8006d4:	08002000 	call	800200 <init_tlc>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8006d8:	00c04074 	movhi	r3,257
  8006dc:	18c41804 	addi	r3,r3,4192
  8006e0:	00800904 	movi	r2,36
  8006e4:	18800035 	stwio	r2,0(r3)
		return;
  8006e8:	00006306 	br	800878 <pedestrian_tlc+0x1f0>
	}

	if (tlc_timer_event == 1) {
  8006ec:	d0a74d17 	ldw	r2,-25292(gp)
  8006f0:	10800058 	cmpnei	r2,r2,1
  8006f4:	1000601e 	bne	r2,zero,800878 <pedestrian_tlc+0x1f0>
		printf("current state test:%d\n", *state);
  8006f8:	e0bfff17 	ldw	r2,-4(fp)
  8006fc:	11400017 	ldw	r5,0(r2)
  800700:	01002074 	movhi	r4,129
  800704:	2112f604 	addi	r4,r4,19416
  800708:	08034e40 	call	8034e4 <printf>
		if (*state == 0) { // R, R state
  80070c:	e0bfff17 	ldw	r2,-4(fp)
  800710:	10800017 	ldw	r2,0(r2)
  800714:	1004c03a 	cmpne	r2,r2,zero
  800718:	1000141e 	bne	r2,zero,80076c <pedestrian_tlc+0xe4>
			if (pedestrianNS == 0) {
  80071c:	d0a74f17 	ldw	r2,-25284(gp)
  800720:	1004c03a 	cmpne	r2,r2,zero
  800724:	1000081e 	bne	r2,zero,800748 <pedestrian_tlc+0xc0>
				*state = 1; // G, R
  800728:	e0ffff17 	ldw	r3,-4(fp)
  80072c:	00800044 	movi	r2,1
  800730:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800734:	00c04074 	movhi	r3,257
  800738:	18c41804 	addi	r3,r3,4192
  80073c:	00800304 	movi	r2,12
  800740:	18800035 	stwio	r2,0(r3)
  800744:	00004b06 	br	800874 <pedestrian_tlc+0x1ec>
			} else {
				*state = 1; // G, R
  800748:	e0ffff17 	ldw	r3,-4(fp)
  80074c:	00800044 	movi	r2,1
  800750:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
  800754:	00c04074 	movhi	r3,257
  800758:	18c41804 	addi	r3,r3,4192
  80075c:	00801304 	movi	r2,76
  800760:	18800035 	stwio	r2,0(r3)
				pedestrianNS = 0;
  800764:	d0274f15 	stw	zero,-25284(gp)
  800768:	00004206 	br	800874 <pedestrian_tlc+0x1ec>
			}
		} else if (*state == 1) {
  80076c:	e0bfff17 	ldw	r2,-4(fp)
  800770:	10800017 	ldw	r2,0(r2)
  800774:	10800058 	cmpnei	r2,r2,1
  800778:	1000081e 	bne	r2,zero,80079c <pedestrian_tlc+0x114>
			*state = 2; // Y, R
  80077c:	e0ffff17 	ldw	r3,-4(fp)
  800780:	00800084 	movi	r2,2
  800784:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  800788:	00c04074 	movhi	r3,257
  80078c:	18c41804 	addi	r3,r3,4192
  800790:	00800504 	movi	r2,20
  800794:	18800035 	stwio	r2,0(r3)
  800798:	00003606 	br	800874 <pedestrian_tlc+0x1ec>
		} else if (*state == 2) {
  80079c:	e0bfff17 	ldw	r2,-4(fp)
  8007a0:	10800017 	ldw	r2,0(r2)
  8007a4:	10800098 	cmpnei	r2,r2,2
  8007a8:	1000081e 	bne	r2,zero,8007cc <pedestrian_tlc+0x144>
			*state = 3; // R, R
  8007ac:	e0ffff17 	ldw	r3,-4(fp)
  8007b0:	008000c4 	movi	r2,3
  8007b4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8007b8:	00c04074 	movhi	r3,257
  8007bc:	18c41804 	addi	r3,r3,4192
  8007c0:	00800904 	movi	r2,36
  8007c4:	18800035 	stwio	r2,0(r3)
  8007c8:	00002a06 	br	800874 <pedestrian_tlc+0x1ec>
		} else if (*state == 3) {
  8007cc:	e0bfff17 	ldw	r2,-4(fp)
  8007d0:	10800017 	ldw	r2,0(r2)
  8007d4:	108000d8 	cmpnei	r2,r2,3
  8007d8:	1000141e 	bne	r2,zero,80082c <pedestrian_tlc+0x1a4>
			if (pedestrianEW == 0) {
  8007dc:	d0a75017 	ldw	r2,-25280(gp)
  8007e0:	1004c03a 	cmpne	r2,r2,zero
  8007e4:	1000081e 	bne	r2,zero,800808 <pedestrian_tlc+0x180>
				*state = 4; // R, G
  8007e8:	e0ffff17 	ldw	r3,-4(fp)
  8007ec:	00800104 	movi	r2,4
  8007f0:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  8007f4:	00c04074 	movhi	r3,257
  8007f8:	18c41804 	addi	r3,r3,4192
  8007fc:	00800844 	movi	r2,33
  800800:	18800035 	stwio	r2,0(r3)
  800804:	00001b06 	br	800874 <pedestrian_tlc+0x1ec>
			} else {
				*state = 4; // R, G, P2
  800808:	e0ffff17 	ldw	r3,-4(fp)
  80080c:	00800104 	movi	r2,4
  800810:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
  800814:	00c04074 	movhi	r3,257
  800818:	18c41804 	addi	r3,r3,4192
  80081c:	00802844 	movi	r2,161
  800820:	18800035 	stwio	r2,0(r3)
				pedestrianEW = 0;
  800824:	d0275015 	stw	zero,-25280(gp)
  800828:	00001206 	br	800874 <pedestrian_tlc+0x1ec>
			}
		} else if (*state == 4) {
  80082c:	e0bfff17 	ldw	r2,-4(fp)
  800830:	10800017 	ldw	r2,0(r2)
  800834:	10800118 	cmpnei	r2,r2,4
  800838:	1000081e 	bne	r2,zero,80085c <pedestrian_tlc+0x1d4>
			*state = 5; // R, Y
  80083c:	e0ffff17 	ldw	r3,-4(fp)
  800840:	00800144 	movi	r2,5
  800844:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800848:	00c04074 	movhi	r3,257
  80084c:	18c41804 	addi	r3,r3,4192
  800850:	00800884 	movi	r2,34
  800854:	18800035 	stwio	r2,0(r3)
  800858:	00000606 	br	800874 <pedestrian_tlc+0x1ec>
		} else {	// this accounts for state 5
			*state = 0; // R, R
  80085c:	e0bfff17 	ldw	r2,-4(fp)
  800860:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800864:	00c04074 	movhi	r3,257
  800868:	18c41804 	addi	r3,r3,4192
  80086c:	00800904 	movi	r2,36
  800870:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  800874:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  800878:	e037883a 	mov	sp,fp
  80087c:	dfc00117 	ldw	ra,4(sp)
  800880:	df000017 	ldw	fp,0(sp)
  800884:	dec00204 	addi	sp,sp,8
  800888:	f800283a 	ret

0080088c <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  80088c:	defffd04 	addi	sp,sp,-12
  800890:	dfc00215 	stw	ra,8(sp)
  800894:	df000115 	stw	fp,4(sp)
  800898:	df000104 	addi	fp,sp,4
  80089c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8008a0:	e0bfff17 	ldw	r2,-4(fp)
  8008a4:	10800017 	ldw	r2,0(r2)
  8008a8:	10bfffd8 	cmpnei	r2,r2,-1
  8008ac:	10000b1e 	bne	r2,zero,8008dc <configurable_tlc+0x50>
		init_tlc();
  8008b0:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8008b4:	e0bfff17 	ldw	r2,-4(fp)
  8008b8:	10800017 	ldw	r2,0(r2)
  8008bc:	10c00044 	addi	r3,r2,1
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8008c8:	00c04074 	movhi	r3,257
  8008cc:	18c41804 	addi	r3,r3,4192
  8008d0:	00800904 	movi	r2,36
  8008d4:	18800035 	stwio	r2,0(r3)
		return;
  8008d8:	00001406 	br	80092c <configurable_tlc+0xa0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8008dc:	00804074 	movhi	r2,257
  8008e0:	10842404 	addi	r2,r2,4240
  8008e4:	10800037 	ldwio	r2,0(r2)
  8008e8:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  8008ec:	e0bfff17 	ldw	r2,-4(fp)
  8008f0:	10800017 	ldw	r2,0(r2)
  8008f4:	1005003a 	cmpeq	r2,r2,zero
  8008f8:	1000041e 	bne	r2,zero,80090c <configurable_tlc+0x80>
  8008fc:	e0bfff17 	ldw	r2,-4(fp)
  800900:	10800017 	ldw	r2,0(r2)
  800904:	108000d8 	cmpnei	r2,r2,3
  800908:	1000061e 	bne	r2,zero,800924 <configurable_tlc+0x98>
  80090c:	d0a75117 	ldw	r2,-25276(gp)
  800910:	10800050 	cmplti	r2,r2,1
  800914:	1000031e 	bne	r2,zero,800924 <configurable_tlc+0x98>
		timeout_data_handler();
  800918:	08009880 	call	800988 <timeout_data_handler>
		newTimeoutValues = 0;
  80091c:	d0275115 	stw	zero,-25276(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800920:	00000206 	br	80092c <configurable_tlc+0xa0>
		timeout_data_handler();
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  800924:	e13fff17 	ldw	r4,-4(fp)
  800928:	08006880 	call	800688 <pedestrian_tlc>
	}
}
  80092c:	e037883a 	mov	sp,fp
  800930:	dfc00117 	ldw	ra,4(sp)
  800934:	df000017 	ldw	fp,0(sp)
  800938:	dec00204 	addi	sp,sp,8
  80093c:	f800283a 	ret

00800940 <config_tlc>:
 * RETURNS:     Returns the state of the configuration phase
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state) {
  800940:	defffd04 	addi	sp,sp,-12
  800944:	df000215 	stw	fp,8(sp)
  800948:	df000204 	addi	fp,sp,8
  80094c:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  800950:	e0bffe17 	ldw	r2,-8(fp)
  800954:	10800017 	ldw	r2,0(r2)
  800958:	10bfffd8 	cmpnei	r2,r2,-1
  80095c:	1000031e 	bne	r2,zero,80096c <config_tlc+0x2c>
		// Process initialisation state
		state = 0;
  800960:	d0275615 	stw	zero,-25256(gp)
		return 0;
  800964:	e03fff15 	stw	zero,-4(fp)
  800968:	00000206 	br	800974 <config_tlc+0x34>
	}

	return state;
  80096c:	d0a75617 	ldw	r2,-25256(gp)
  800970:	e0bfff15 	stw	r2,-4(fp)
  800974:	e0bfff17 	ldw	r2,-4(fp)
}
  800978:	e037883a 	mov	sp,fp
  80097c:	df000017 	ldw	fp,0(sp)
  800980:	dec00104 	addi	sp,sp,4
  800984:	f800283a 	ret

00800988 <timeout_data_handler>:
 * RETURNS:     none
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void) {
  800988:	defffc04 	addi	sp,sp,-16
  80098c:	dfc00315 	stw	ra,12(sp)
  800990:	df000215 	stw	fp,8(sp)
  800994:	df000204 	addi	fp,sp,8
	fp = fopen(UART_NAME, "rw"); // open up UART with read and write access
  800998:	01002074 	movhi	r4,129
  80099c:	2112fc04 	addi	r4,r4,19440
  8009a0:	01402074 	movhi	r5,129
  8009a4:	2952ff04 	addi	r5,r5,19452
  8009a8:	08018600 	call	801860 <fopen>
  8009ac:	d0a75915 	stw	r2,-25244(gp)
	if (fp != NULL) {// check if the UART is open successfully
  8009b0:	d0a75917 	ldw	r2,-25244(gp)
  8009b4:	1005003a 	cmpeq	r2,r2,zero
  8009b8:	10003e1e 	bne	r2,zero,800ab4 <timeout_data_handler+0x12c>
		int k = 0;
  8009bc:	e03fff15 	stw	zero,-4(fp)
  8009c0:	00000006 	br	8009c4 <timeout_data_handler+0x3c>
		while(1) {
			c = fgetc(fp);
  8009c4:	d1275917 	ldw	r4,-25244(gp)
  8009c8:	08013840 	call	801384 <fgetc>
  8009cc:	d0a75715 	stw	r2,-25252(gp)
			if (c== '\n') {
  8009d0:	d0a75717 	ldw	r2,-25252(gp)
  8009d4:	108002a0 	cmpeqi	r2,r2,10
  8009d8:	1000341e 	bne	r2,zero,800aac <timeout_data_handler+0x124>
				break;
			}
			if (c == '\r') {
  8009dc:	d0a75717 	ldw	r2,-25252(gp)
  8009e0:	10800360 	cmpeqi	r2,r2,13
  8009e4:	1000311e 	bne	r2,zero,800aac <timeout_data_handler+0x124>
				break;
			}
			if (c == ',') {
  8009e8:	d0a75717 	ldw	r2,-25252(gp)
  8009ec:	10800b18 	cmpnei	r2,r2,44
  8009f0:	1000241e 	bne	r2,zero,800a84 <timeout_data_handler+0xfc>
				sscanf(chararray, "%d", &timeoutValue);
  8009f4:	d1200004 	addi	r4,gp,-32768
  8009f8:	01402074 	movhi	r5,129
  8009fc:	29530004 	addi	r5,r5,19456
  800a00:	d1a75804 	addi	r6,gp,-25248
  800a04:	0803f640 	call	803f64 <sscanf>
				tempBuffer[valueCount] = timeoutValue;
  800a08:	d0e75317 	ldw	r3,-25268(gp)
  800a0c:	d0a75817 	ldw	r2,-25248(gp)
  800a10:	100b883a 	mov	r5,r2
  800a14:	01002074 	movhi	r4,129
  800a18:	2114b804 	addi	r4,r4,21216
  800a1c:	18c5883a 	add	r2,r3,r3
  800a20:	1085883a 	add	r2,r2,r2
  800a24:	1105883a 	add	r2,r2,r4
  800a28:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  800a2c:	00800c04 	movi	r2,48
  800a30:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  800a34:	00c02074 	movhi	r3,129
  800a38:	18dbcc44 	addi	r3,r3,28465
  800a3c:	00800c04 	movi	r2,48
  800a40:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  800a44:	00c02074 	movhi	r3,129
  800a48:	18dbcc84 	addi	r3,r3,28466
  800a4c:	00800c04 	movi	r2,48
  800a50:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  800a54:	00c02074 	movhi	r3,129
  800a58:	18dbccc4 	addi	r3,r3,28467
  800a5c:	00800c04 	movi	r2,48
  800a60:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  800a64:	00802074 	movhi	r2,129
  800a68:	109bcd04 	addi	r2,r2,28468
  800a6c:	10000005 	stb	zero,0(r2)
				k = 0;
  800a70:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  800a74:	d0a75317 	ldw	r2,-25268(gp)
  800a78:	10800044 	addi	r2,r2,1
  800a7c:	d0a75315 	stw	r2,-25268(gp)
  800a80:	003fd006 	br	8009c4 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  800a84:	e13fff17 	ldw	r4,-4(fp)
  800a88:	d0a75717 	ldw	r2,-25252(gp)
  800a8c:	1007883a 	mov	r3,r2
  800a90:	d0a00004 	addi	r2,gp,-32768
  800a94:	2085883a 	add	r2,r4,r2
  800a98:	10c00005 	stb	r3,0(r2)
				k += 1;
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
  800aa0:	10800044 	addi	r2,r2,1
  800aa4:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  800aa8:	003fc606 	br	8009c4 <timeout_data_handler+0x3c>
		fclose(fp); // remember to close the file
  800aac:	d1275917 	ldw	r4,-25244(gp)
  800ab0:	08011400 	call	801140 <fclose>
	}
	if (valueCount == 6) {
  800ab4:	d0a75317 	ldw	r2,-25268(gp)
  800ab8:	10800198 	cmpnei	r2,r2,6
  800abc:	1000161e 	bne	r2,zero,800b18 <timeout_data_handler+0x190>
		int j;
		for (j=0; j<6; j++) {
  800ac0:	e03ffe15 	stw	zero,-8(fp)
  800ac4:	00001106 	br	800b0c <timeout_data_handler+0x184>
			timeout[j]=tempBuffer[j];
  800ac8:	e17ffe17 	ldw	r5,-8(fp)
  800acc:	e0bffe17 	ldw	r2,-8(fp)
  800ad0:	00c02074 	movhi	r3,129
  800ad4:	18d4b804 	addi	r3,r3,21216
  800ad8:	1085883a 	add	r2,r2,r2
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	10c5883a 	add	r2,r2,r3
  800ae4:	11000017 	ldw	r4,0(r2)
  800ae8:	00c02074 	movhi	r3,129
  800aec:	18d4ab04 	addi	r3,r3,21164
  800af0:	2945883a 	add	r2,r5,r5
  800af4:	1085883a 	add	r2,r2,r2
  800af8:	10c5883a 	add	r2,r2,r3
  800afc:	11000015 	stw	r4,0(r2)
		}
		fclose(fp); // remember to close the file
	}
	if (valueCount == 6) {
		int j;
		for (j=0; j<6; j++) {
  800b00:	e0bffe17 	ldw	r2,-8(fp)
  800b04:	10800044 	addi	r2,r2,1
  800b08:	e0bffe15 	stw	r2,-8(fp)
  800b0c:	e0bffe17 	ldw	r2,-8(fp)
  800b10:	10800190 	cmplti	r2,r2,6
  800b14:	103fec1e 	bne	r2,zero,800ac8 <timeout_data_handler+0x140>
			timeout[j]=tempBuffer[j];
		}
	}
	valueCount = 0;
  800b18:	d0275315 	stw	zero,-25268(gp)
}
  800b1c:	e037883a 	mov	sp,fp
  800b20:	dfc00117 	ldw	ra,4(sp)
  800b24:	df000017 	ldw	fp,0(sp)
  800b28:	dec00204 	addi	sp,sp,8
  800b2c:	f800283a 	ret

00800b30 <buffer_timeout>:
/* DESCRIPTION: Stores the new timeout values in a secondary buffer for atomic
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(int value) {
  800b30:	defffe04 	addi	sp,sp,-8
  800b34:	df000115 	stw	fp,4(sp)
  800b38:	df000104 	addi	fp,sp,4
  800b3c:	e13fff15 	stw	r4,-4(fp)

}
  800b40:	e037883a 	mov	sp,fp
  800b44:	df000017 	ldw	fp,0(sp)
  800b48:	dec00104 	addi	sp,sp,4
  800b4c:	f800283a 	ret

00800b50 <update_timeout>:
 *              section by ensuring that timeouts are fully received before
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void) {
  800b50:	deffff04 	addi	sp,sp,-4
  800b54:	df000015 	stw	fp,0(sp)
  800b58:	d839883a 	mov	fp,sp

	return 0;
  800b5c:	0005883a 	mov	r2,zero
}
  800b60:	e037883a 	mov	sp,fp
  800b64:	df000017 	ldw	fp,0(sp)
  800b68:	dec00104 	addi	sp,sp,4
  800b6c:	f800283a 	ret

00800b70 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800b70:	defff804 	addi	sp,sp,-32
  800b74:	dfc00715 	stw	ra,28(sp)
  800b78:	df000615 	stw	fp,24(sp)
  800b7c:	df000604 	addi	fp,sp,24
  800b80:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800b84:	e0bffe17 	ldw	r2,-8(fp)
  800b88:	e0bffa15 	stw	r2,-24(fp)
	(*trigger)++;
  800b8c:	e0bffa17 	ldw	r2,-24(fp)
  800b90:	10800017 	ldw	r2,0(r2)
  800b94:	10c00044 	addi	r3,r2,1
  800b98:	e0bffa17 	ldw	r2,-24(fp)
  800b9c:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {
  800ba0:	e0bffa17 	ldw	r2,-24(fp)
  800ba4:	10800017 	ldw	r2,0(r2)
  800ba8:	1081f418 	cmpnei	r2,r2,2000
  800bac:	1000051e 	bne	r2,zero,800bc4 <camera_timer_isr+0x54>
		printToUART("Snapshot Taken");
  800bb0:	01002074 	movhi	r4,129
  800bb4:	21130104 	addi	r4,r4,19460
  800bb8:	0800d400 	call	800d40 <printToUART>
		return 0;
  800bbc:	e03fff15 	stw	zero,-4(fp)
  800bc0:	00001306 	br	800c10 <camera_timer_isr+0xa0>
	}
	if (vehicle_detected != 2) {
  800bc4:	d0a75217 	ldw	r2,-25272(gp)
  800bc8:	108000a0 	cmpeqi	r2,r2,2
  800bcc:	10000e1e 	bne	r2,zero,800c08 <camera_timer_isr+0x98>
		char countString[10];
		sprintf(countString, "%d", *trigger);
  800bd0:	e0bffa17 	ldw	r2,-24(fp)
  800bd4:	11800017 	ldw	r6,0(r2)
  800bd8:	e13ffb04 	addi	r4,fp,-20
  800bdc:	01402074 	movhi	r5,129
  800be0:	29530004 	addi	r5,r5,19456
  800be4:	0803e000 	call	803e00 <sprintf>
		printToUART("Vehicle left at: ");
  800be8:	01002074 	movhi	r4,129
  800bec:	21130504 	addi	r4,r4,19476
  800bf0:	0800d400 	call	800d40 <printToUART>
		printToUART(countString);
  800bf4:	e13ffb04 	addi	r4,fp,-20
  800bf8:	0800d400 	call	800d40 <printToUART>
		vehicle_detected = 0;
  800bfc:	d0275215 	stw	zero,-25272(gp)
		return 0;
  800c00:	e03fff15 	stw	zero,-4(fp)
  800c04:	00000206 	br	800c10 <camera_timer_isr+0xa0>
	}
	return 1;
  800c08:	00800044 	movi	r2,1
  800c0c:	e0bfff15 	stw	r2,-4(fp)
  800c10:	e0bfff17 	ldw	r2,-4(fp)
}
  800c14:	e037883a 	mov	sp,fp
  800c18:	dfc00117 	ldw	ra,4(sp)
  800c1c:	df000017 	ldw	fp,0(sp)
  800c20:	dec00204 	addi	sp,sp,8
  800c24:	f800283a 	ret

00800c28 <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800c28:	defffc04 	addi	sp,sp,-16
  800c2c:	dfc00315 	stw	ra,12(sp)
  800c30:	df000215 	stw	fp,8(sp)
  800c34:	df000204 	addi	fp,sp,8
  800c38:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800c3c:	e0bfff17 	ldw	r2,-4(fp)
  800c40:	10800017 	ldw	r2,0(r2)
  800c44:	10bfffd8 	cmpnei	r2,r2,-1
  800c48:	10000b1e 	bne	r2,zero,800c78 <camera_tlc+0x50>
		init_tlc();
  800c4c:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800c50:	e0bfff17 	ldw	r2,-4(fp)
  800c54:	10800017 	ldw	r2,0(r2)
  800c58:	10c00044 	addi	r3,r2,1
  800c5c:	e0bfff17 	ldw	r2,-4(fp)
  800c60:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800c64:	00c04074 	movhi	r3,257
  800c68:	18c41804 	addi	r3,r3,4192
  800c6c:	00800904 	movi	r2,36
  800c70:	18800035 	stwio	r2,0(r3)
		return;
  800c74:	00002d06 	br	800d2c <camera_tlc+0x104>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800c78:	00804074 	movhi	r2,257
  800c7c:	10842404 	addi	r2,r2,4240
  800c80:	10800037 	ldwio	r2,0(r2)
  800c84:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800c88:	e0bfff17 	ldw	r2,-4(fp)
  800c8c:	10800017 	ldw	r2,0(r2)
  800c90:	1005003a 	cmpeq	r2,r2,zero
  800c94:	1000041e 	bne	r2,zero,800ca8 <camera_tlc+0x80>
  800c98:	e0bfff17 	ldw	r2,-4(fp)
  800c9c:	10800017 	ldw	r2,0(r2)
  800ca0:	108000d8 	cmpnei	r2,r2,3
  800ca4:	1000061e 	bne	r2,zero,800cc0 <camera_tlc+0x98>
  800ca8:	d0a75117 	ldw	r2,-25276(gp)
  800cac:	10800050 	cmplti	r2,r2,1
  800cb0:	1000031e 	bne	r2,zero,800cc0 <camera_tlc+0x98>
		timeout_data_handler();
  800cb4:	08009880 	call	800988 <timeout_data_handler>
		newTimeoutValues = 0;
  800cb8:	d0275115 	stw	zero,-25276(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800cbc:	00000206 	br	800cc8 <camera_tlc+0xa0>
		timeout_data_handler();
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  800cc0:	e13fff17 	ldw	r4,-4(fp)
  800cc4:	08006880 	call	800688 <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { // One light yellow and vehicle enters
  800cc8:	e0bfff17 	ldw	r2,-4(fp)
  800ccc:	10800017 	ldw	r2,0(r2)
  800cd0:	108000a0 	cmpeqi	r2,r2,2
  800cd4:	1000041e 	bne	r2,zero,800ce8 <camera_tlc+0xc0>
  800cd8:	e0bfff17 	ldw	r2,-4(fp)
  800cdc:	10800017 	ldw	r2,0(r2)
  800ce0:	10800158 	cmpnei	r2,r2,5
  800ce4:	1000111e 	bne	r2,zero,800d2c <camera_tlc+0x104>
  800ce8:	d0a75217 	ldw	r2,-25272(gp)
  800cec:	10800058 	cmpnei	r2,r2,1
  800cf0:	10000e1e 	bne	r2,zero,800d2c <camera_tlc+0x104>
		printToUART("Camera Activated");
  800cf4:	01002074 	movhi	r4,129
  800cf8:	21130a04 	addi	r4,r4,19496
  800cfc:	0800d400 	call	800d40 <printToUART>
		vehicle_detected = 2;
  800d00:	00800084 	movi	r2,2
  800d04:	d0a75215 	stw	r2,-25272(gp)
		void* cameraContext = (void*) camera_count;
  800d08:	d0a75517 	ldw	r2,-25260(gp)
  800d0c:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800d10:	010020b4 	movhi	r4,130
  800d14:	21233904 	addi	r4,r4,-29468
  800d18:	01400044 	movi	r5,1
  800d1c:	01802034 	movhi	r6,128
  800d20:	3182dc04 	addi	r6,r6,2928
  800d24:	e1fffe17 	ldw	r7,-8(fp)
  800d28:	08104880 	call	810488 <alt_alarm_start>
	}
}
  800d2c:	e037883a 	mov	sp,fp
  800d30:	dfc00117 	ldw	ra,4(sp)
  800d34:	df000017 	ldw	fp,0(sp)
  800d38:	dec00204 	addi	sp,sp,8
  800d3c:	f800283a 	ret

00800d40 <printToUART>:

void printToUART(char* stringToPrint) {
  800d40:	defffd04 	addi	sp,sp,-12
  800d44:	dfc00215 	stw	ra,8(sp)
  800d48:	df000115 	stw	fp,4(sp)
  800d4c:	df000104 	addi	fp,sp,4
  800d50:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800d54:	01002074 	movhi	r4,129
  800d58:	2112fc04 	addi	r4,r4,19440
  800d5c:	01402074 	movhi	r5,129
  800d60:	29530f04 	addi	r5,r5,19516
  800d64:	08018600 	call	801860 <fopen>
  800d68:	d0a75915 	stw	r2,-25244(gp)
	if (fp != NULL) {
  800d6c:	d0a75917 	ldw	r2,-25244(gp)
  800d70:	1005003a 	cmpeq	r2,r2,zero
  800d74:	1000051e 	bne	r2,zero,800d8c <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800d78:	d1675917 	ldw	r5,-25244(gp)
  800d7c:	e13fff17 	ldw	r4,-4(fp)
  800d80:	08019500 	call	801950 <fputs>
		fclose(fp);
  800d84:	d1275917 	ldw	r4,-25244(gp)
  800d88:	08011400 	call	801140 <fclose>
	}
}
  800d8c:	e037883a 	mov	sp,fp
  800d90:	dfc00117 	ldw	ra,4(sp)
  800d94:	df000017 	ldw	fp,0(sp)
  800d98:	dec00204 	addi	sp,sp,8
  800d9c:	f800283a 	ret

00800da0 <handle_vehicle_button>:

/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button(void) {
  800da0:	deffff04 	addi	sp,sp,-4
  800da4:	df000015 	stw	fp,0(sp)
  800da8:	d839883a 	mov	fp,sp
	if (vehicle_detected == 0) {
  800dac:	d0a75217 	ldw	r2,-25272(gp)
  800db0:	1004c03a 	cmpne	r2,r2,zero
  800db4:	1000031e 	bne	r2,zero,800dc4 <handle_vehicle_button+0x24>
		vehicle_detected = 1; // If vehicle absent, button press means vehicle has entered intersection
  800db8:	00800044 	movi	r2,1
  800dbc:	d0a75215 	stw	r2,-25272(gp)
  800dc0:	00000206 	br	800dcc <handle_vehicle_button+0x2c>
	} else {
		vehicle_detected = 3; // If at any other time, button press means vehicle has left intersection
  800dc4:	008000c4 	movi	r2,3
  800dc8:	d0a75215 	stw	r2,-25272(gp)
	}
}
  800dcc:	e037883a 	mov	sp,fp
  800dd0:	df000017 	ldw	fp,0(sp)
  800dd4:	dec00104 	addi	sp,sp,4
  800dd8:	f800283a 	ret

00800ddc <main>:

int main(void) {
  800ddc:	defffb04 	addi	sp,sp,-20
  800de0:	dfc00415 	stw	ra,16(sp)
  800de4:	df000315 	stw	fp,12(sp)
  800de8:	df000304 	addi	fp,sp,12
	unsigned int buttons = 0;			// status of mode button
  800dec:	e03ffe15 	stw	zero,-8(fp)
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800df0:	01002074 	movhi	r4,129
  800df4:	21131004 	addi	r4,r4,19520
  800df8:	01402074 	movhi	r5,129
  800dfc:	29530f04 	addi	r5,r5,19516
  800e00:	08018600 	call	801860 <fopen>
  800e04:	e0bffd15 	stw	r2,-12(fp)

	lcd_set_mode(0, lcd);		// initialise lcd
  800e08:	0009883a 	mov	r4,zero
  800e0c:	e17ffd17 	ldw	r5,-12(fp)
  800e10:	080025c0 	call	80025c <lcd_set_mode>
	init_buttons_pio();			// initialise buttons
  800e14:	08006240 	call	800624 <init_buttons_pio>
  800e18:	00000006 	br	800e1c <main+0x40>

	while (1) {
		// Button detection & debouncing
		buttons_driver(&buttons);
  800e1c:	e13ffe04 	addi	r4,fp,-8
  800e20:	08002c40 	call	8002c4 <buttons_driver>

		if ((proc_state[mode] == -1) || (proc_state[mode] == 0) || (proc_state[mode] == 3)) {
  800e24:	d0a75417 	ldw	r2,-25264(gp)
  800e28:	00c02074 	movhi	r3,129
  800e2c:	18d4be04 	addi	r3,r3,21240
  800e30:	1085883a 	add	r2,r2,r2
  800e34:	1085883a 	add	r2,r2,r2
  800e38:	10c5883a 	add	r2,r2,r3
  800e3c:	10800017 	ldw	r2,0(r2)
  800e40:	10bfffe0 	cmpeqi	r2,r2,-1
  800e44:	1000121e 	bne	r2,zero,800e90 <main+0xb4>
  800e48:	d0a75417 	ldw	r2,-25264(gp)
  800e4c:	00c02074 	movhi	r3,129
  800e50:	18d4be04 	addi	r3,r3,21240
  800e54:	1085883a 	add	r2,r2,r2
  800e58:	1085883a 	add	r2,r2,r2
  800e5c:	10c5883a 	add	r2,r2,r3
  800e60:	10800017 	ldw	r2,0(r2)
  800e64:	1005003a 	cmpeq	r2,r2,zero
  800e68:	1000091e 	bne	r2,zero,800e90 <main+0xb4>
  800e6c:	d0a75417 	ldw	r2,-25264(gp)
  800e70:	00c02074 	movhi	r3,129
  800e74:	18d4be04 	addi	r3,r3,21240
  800e78:	1085883a 	add	r2,r2,r2
  800e7c:	1085883a 	add	r2,r2,r2
  800e80:	10c5883a 	add	r2,r2,r3
  800e84:	10800017 	ldw	r2,0(r2)
  800e88:	108000d8 	cmpnei	r2,r2,3
  800e8c:	10002f1e 	bne	r2,zero,800f4c <main+0x170>
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 0) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 4)) {
  800e90:	00804074 	movhi	r2,257
  800e94:	10842404 	addi	r2,r2,4240
  800e98:	10800037 	ldwio	r2,0(r2)
  800e9c:	1005003a 	cmpeq	r2,r2,zero
  800ea0:	1000051e 	bne	r2,zero,800eb8 <main+0xdc>
  800ea4:	00804074 	movhi	r2,257
  800ea8:	10842404 	addi	r2,r2,4240
  800eac:	10800037 	ldwio	r2,0(r2)
  800eb0:	10800118 	cmpnei	r2,r2,4
  800eb4:	1000011e 	bne	r2,zero,800ebc <main+0xe0>
				mode = 0;
  800eb8:	d0275415 	stw	zero,-25264(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 1) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 5)) {
  800ebc:	00804074 	movhi	r2,257
  800ec0:	10842404 	addi	r2,r2,4240
  800ec4:	10800037 	ldwio	r2,0(r2)
  800ec8:	10800060 	cmpeqi	r2,r2,1
  800ecc:	1000051e 	bne	r2,zero,800ee4 <main+0x108>
  800ed0:	00804074 	movhi	r2,257
  800ed4:	10842404 	addi	r2,r2,4240
  800ed8:	10800037 	ldwio	r2,0(r2)
  800edc:	10800158 	cmpnei	r2,r2,5
  800ee0:	1000021e 	bne	r2,zero,800eec <main+0x110>
				mode = 1;
  800ee4:	00800044 	movi	r2,1
  800ee8:	d0a75415 	stw	r2,-25264(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 2) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6)) {
  800eec:	00804074 	movhi	r2,257
  800ef0:	10842404 	addi	r2,r2,4240
  800ef4:	10800037 	ldwio	r2,0(r2)
  800ef8:	108000a0 	cmpeqi	r2,r2,2
  800efc:	1000051e 	bne	r2,zero,800f14 <main+0x138>
  800f00:	00804074 	movhi	r2,257
  800f04:	10842404 	addi	r2,r2,4240
  800f08:	10800037 	ldwio	r2,0(r2)
  800f0c:	10800198 	cmpnei	r2,r2,6
  800f10:	1000021e 	bne	r2,zero,800f1c <main+0x140>
				mode = 2;
  800f14:	00800084 	movi	r2,2
  800f18:	d0a75415 	stw	r2,-25264(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 3) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 7)) {
  800f1c:	00804074 	movhi	r2,257
  800f20:	10842404 	addi	r2,r2,4240
  800f24:	10800037 	ldwio	r2,0(r2)
  800f28:	108000e0 	cmpeqi	r2,r2,3
  800f2c:	1000051e 	bne	r2,zero,800f44 <main+0x168>
  800f30:	00804074 	movhi	r2,257
  800f34:	10842404 	addi	r2,r2,4240
  800f38:	10800037 	ldwio	r2,0(r2)
  800f3c:	108001d8 	cmpnei	r2,r2,7
  800f40:	1000021e 	bne	r2,zero,800f4c <main+0x170>
				mode = 3;
  800f44:	008000c4 	movi	r2,3
  800f48:	d0a75415 	stw	r2,-25264(gp)
			}
		}

    	if(lcd != NULL) {
  800f4c:	e0bffd17 	ldw	r2,-12(fp)
  800f50:	1005003a 	cmpeq	r2,r2,zero
  800f54:	1000171e 	bne	r2,zero,800fb4 <main+0x1d8>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800f58:	e13ffd17 	ldw	r4,-12(fp)
  800f5c:	01402074 	movhi	r5,129
  800f60:	2952e304 	addi	r5,r5,19340
  800f64:	018006c4 	movi	r6,27
  800f68:	01c02074 	movhi	r7,129
  800f6c:	39d2e504 	addi	r7,r7,19348
  800f70:	080187c0 	call	80187c <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  800f74:	d1a75417 	ldw	r6,-25264(gp)
  800f78:	e13ffd17 	ldw	r4,-12(fp)
  800f7c:	01402074 	movhi	r5,129
  800f80:	2952e604 	addi	r5,r5,19352
  800f84:	080187c0 	call	80187c <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  800f88:	d0a75417 	ldw	r2,-25264(gp)
  800f8c:	00c02074 	movhi	r3,129
  800f90:	18d4be04 	addi	r3,r3,21240
  800f94:	1085883a 	add	r2,r2,r2
  800f98:	1085883a 	add	r2,r2,r2
  800f9c:	10c5883a 	add	r2,r2,r3
  800fa0:	11800017 	ldw	r6,0(r2)
  800fa4:	e13ffd17 	ldw	r4,-12(fp)
  800fa8:	01402074 	movhi	r5,129
  800fac:	29531304 	addi	r5,r5,19532
  800fb0:	080187c0 	call	80187c <fprintf>
    	}

		// Execute the correct TLC
    	switch (mode) {
  800fb4:	d0a75417 	ldw	r2,-25264(gp)
  800fb8:	e0bfff15 	stw	r2,-4(fp)
  800fbc:	e0ffff17 	ldw	r3,-4(fp)
  800fc0:	18800060 	cmpeqi	r2,r3,1
  800fc4:	10000e1e 	bne	r2,zero,801000 <main+0x224>
  800fc8:	e0ffff17 	ldw	r3,-4(fp)
  800fcc:	18800070 	cmpltui	r2,r3,1
  800fd0:	1000071e 	bne	r2,zero,800ff0 <main+0x214>
  800fd4:	e0ffff17 	ldw	r3,-4(fp)
  800fd8:	188000a0 	cmpeqi	r2,r3,2
  800fdc:	10000c1e 	bne	r2,zero,801010 <main+0x234>
  800fe0:	e0ffff17 	ldw	r3,-4(fp)
  800fe4:	188000e0 	cmpeqi	r2,r3,3
  800fe8:	10000d1e 	bne	r2,zero,801020 <main+0x244>
  800fec:	003f8b06 	br	800e1c <main+0x40>
			case 0:
				simple_tlc(&proc_state[0]);
  800ff0:	01002074 	movhi	r4,129
  800ff4:	2114be04 	addi	r4,r4,21240
  800ff8:	08003080 	call	800308 <simple_tlc>
				break;
  800ffc:	003f8706 	br	800e1c <main+0x40>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  801000:	01002074 	movhi	r4,129
  801004:	2114bf04 	addi	r4,r4,21244
  801008:	08006880 	call	800688 <pedestrian_tlc>
				break;
  80100c:	003f8306 	br	800e1c <main+0x40>
			case 2:
				configurable_tlc(&proc_state[2]);
  801010:	01002074 	movhi	r4,129
  801014:	2114c004 	addi	r4,r4,21248
  801018:	080088c0 	call	80088c <configurable_tlc>
				break;
  80101c:	003f7f06 	br	800e1c <main+0x40>
			case 3:
				camera_tlc(&proc_state[3]);
  801020:	01002074 	movhi	r4,129
  801024:	2114c104 	addi	r4,r4,21252
  801028:	0800c280 	call	800c28 <camera_tlc>
				break;
		}
	}
  80102c:	003f7b06 	br	800e1c <main+0x40>

00801030 <_fclose_r>:
  801030:	defffc04 	addi	sp,sp,-16
  801034:	dc400115 	stw	r17,4(sp)
  801038:	dc000015 	stw	r16,0(sp)
  80103c:	dfc00315 	stw	ra,12(sp)
  801040:	dc800215 	stw	r18,8(sp)
  801044:	2821883a 	mov	r16,r5
  801048:	2023883a 	mov	r17,r4
  80104c:	28002926 	beq	r5,zero,8010f4 <_fclose_r+0xc4>
  801050:	08015040 	call	801504 <__sfp_lock_acquire>
  801054:	88000226 	beq	r17,zero,801060 <_fclose_r+0x30>
  801058:	88800e17 	ldw	r2,56(r17)
  80105c:	10002d26 	beq	r2,zero,801114 <_fclose_r+0xe4>
  801060:	8080030f 	ldh	r2,12(r16)
  801064:	10002226 	beq	r2,zero,8010f0 <_fclose_r+0xc0>
  801068:	8809883a 	mov	r4,r17
  80106c:	800b883a 	mov	r5,r16
  801070:	08011540 	call	801154 <_fflush_r>
  801074:	1025883a 	mov	r18,r2
  801078:	80800b17 	ldw	r2,44(r16)
  80107c:	10000426 	beq	r2,zero,801090 <_fclose_r+0x60>
  801080:	81400717 	ldw	r5,28(r16)
  801084:	8809883a 	mov	r4,r17
  801088:	103ee83a 	callr	r2
  80108c:	10002a16 	blt	r2,zero,801138 <_fclose_r+0x108>
  801090:	8080030b 	ldhu	r2,12(r16)
  801094:	1080200c 	andi	r2,r2,128
  801098:	1000231e 	bne	r2,zero,801128 <_fclose_r+0xf8>
  80109c:	81400c17 	ldw	r5,48(r16)
  8010a0:	28000526 	beq	r5,zero,8010b8 <_fclose_r+0x88>
  8010a4:	80801004 	addi	r2,r16,64
  8010a8:	28800226 	beq	r5,r2,8010b4 <_fclose_r+0x84>
  8010ac:	8809883a 	mov	r4,r17
  8010b0:	0801a980 	call	801a98 <_free_r>
  8010b4:	80000c15 	stw	zero,48(r16)
  8010b8:	81401117 	ldw	r5,68(r16)
  8010bc:	28000326 	beq	r5,zero,8010cc <_fclose_r+0x9c>
  8010c0:	8809883a 	mov	r4,r17
  8010c4:	0801a980 	call	801a98 <_free_r>
  8010c8:	80001115 	stw	zero,68(r16)
  8010cc:	8000030d 	sth	zero,12(r16)
  8010d0:	08015080 	call	801508 <__sfp_lock_release>
  8010d4:	9005883a 	mov	r2,r18
  8010d8:	dfc00317 	ldw	ra,12(sp)
  8010dc:	dc800217 	ldw	r18,8(sp)
  8010e0:	dc400117 	ldw	r17,4(sp)
  8010e4:	dc000017 	ldw	r16,0(sp)
  8010e8:	dec00404 	addi	sp,sp,16
  8010ec:	f800283a 	ret
  8010f0:	08015080 	call	801508 <__sfp_lock_release>
  8010f4:	0025883a 	mov	r18,zero
  8010f8:	9005883a 	mov	r2,r18
  8010fc:	dfc00317 	ldw	ra,12(sp)
  801100:	dc800217 	ldw	r18,8(sp)
  801104:	dc400117 	ldw	r17,4(sp)
  801108:	dc000017 	ldw	r16,0(sp)
  80110c:	dec00404 	addi	sp,sp,16
  801110:	f800283a 	ret
  801114:	8809883a 	mov	r4,r17
  801118:	08015140 	call	801514 <__sinit>
  80111c:	8080030f 	ldh	r2,12(r16)
  801120:	103fd11e 	bne	r2,zero,801068 <_fclose_r+0x38>
  801124:	003ff206 	br	8010f0 <_fclose_r+0xc0>
  801128:	81400417 	ldw	r5,16(r16)
  80112c:	8809883a 	mov	r4,r17
  801130:	0801a980 	call	801a98 <_free_r>
  801134:	003fd906 	br	80109c <_fclose_r+0x6c>
  801138:	04bfffc4 	movi	r18,-1
  80113c:	003fd406 	br	801090 <_fclose_r+0x60>

00801140 <fclose>:
  801140:	00802074 	movhi	r2,129
  801144:	109bd004 	addi	r2,r2,28480
  801148:	200b883a 	mov	r5,r4
  80114c:	11000017 	ldw	r4,0(r2)
  801150:	08010301 	jmpi	801030 <_fclose_r>

00801154 <_fflush_r>:
  801154:	defffb04 	addi	sp,sp,-20
  801158:	dcc00315 	stw	r19,12(sp)
  80115c:	dc800215 	stw	r18,8(sp)
  801160:	dfc00415 	stw	ra,16(sp)
  801164:	dc400115 	stw	r17,4(sp)
  801168:	dc000015 	stw	r16,0(sp)
  80116c:	2027883a 	mov	r19,r4
  801170:	2825883a 	mov	r18,r5
  801174:	20000226 	beq	r4,zero,801180 <_fflush_r+0x2c>
  801178:	20800e17 	ldw	r2,56(r4)
  80117c:	10005626 	beq	r2,zero,8012d8 <_fflush_r+0x184>
  801180:	9100030b 	ldhu	r4,12(r18)
  801184:	20ffffcc 	andi	r3,r4,65535
  801188:	18e0001c 	xori	r3,r3,32768
  80118c:	18e00004 	addi	r3,r3,-32768
  801190:	1880020c 	andi	r2,r3,8
  801194:	1000261e 	bne	r2,zero,801230 <_fflush_r+0xdc>
  801198:	90c00117 	ldw	r3,4(r18)
  80119c:	20820014 	ori	r2,r4,2048
  8011a0:	9080030d 	sth	r2,12(r18)
  8011a4:	1009883a 	mov	r4,r2
  8011a8:	00c0400e 	bge	zero,r3,8012ac <_fflush_r+0x158>
  8011ac:	92000a17 	ldw	r8,40(r18)
  8011b0:	40004026 	beq	r8,zero,8012b4 <_fflush_r+0x160>
  8011b4:	2084000c 	andi	r2,r4,4096
  8011b8:	10005326 	beq	r2,zero,801308 <_fflush_r+0x1b4>
  8011bc:	94001417 	ldw	r16,80(r18)
  8011c0:	9080030b 	ldhu	r2,12(r18)
  8011c4:	1080010c 	andi	r2,r2,4
  8011c8:	1000481e 	bne	r2,zero,8012ec <_fflush_r+0x198>
  8011cc:	91400717 	ldw	r5,28(r18)
  8011d0:	9809883a 	mov	r4,r19
  8011d4:	800d883a 	mov	r6,r16
  8011d8:	000f883a 	mov	r7,zero
  8011dc:	403ee83a 	callr	r8
  8011e0:	8080261e 	bne	r16,r2,80127c <_fflush_r+0x128>
  8011e4:	9080030b 	ldhu	r2,12(r18)
  8011e8:	91000417 	ldw	r4,16(r18)
  8011ec:	90000115 	stw	zero,4(r18)
  8011f0:	10bdffcc 	andi	r2,r2,63487
  8011f4:	10ffffcc 	andi	r3,r2,65535
  8011f8:	18c4000c 	andi	r3,r3,4096
  8011fc:	9080030d 	sth	r2,12(r18)
  801200:	91000015 	stw	r4,0(r18)
  801204:	18002b26 	beq	r3,zero,8012b4 <_fflush_r+0x160>
  801208:	0007883a 	mov	r3,zero
  80120c:	1805883a 	mov	r2,r3
  801210:	94001415 	stw	r16,80(r18)
  801214:	dfc00417 	ldw	ra,16(sp)
  801218:	dcc00317 	ldw	r19,12(sp)
  80121c:	dc800217 	ldw	r18,8(sp)
  801220:	dc400117 	ldw	r17,4(sp)
  801224:	dc000017 	ldw	r16,0(sp)
  801228:	dec00504 	addi	sp,sp,20
  80122c:	f800283a 	ret
  801230:	94400417 	ldw	r17,16(r18)
  801234:	88001f26 	beq	r17,zero,8012b4 <_fflush_r+0x160>
  801238:	90800017 	ldw	r2,0(r18)
  80123c:	18c000cc 	andi	r3,r3,3
  801240:	94400015 	stw	r17,0(r18)
  801244:	1461c83a 	sub	r16,r2,r17
  801248:	18002526 	beq	r3,zero,8012e0 <_fflush_r+0x18c>
  80124c:	0005883a 	mov	r2,zero
  801250:	90800215 	stw	r2,8(r18)
  801254:	0400170e 	bge	zero,r16,8012b4 <_fflush_r+0x160>
  801258:	90c00917 	ldw	r3,36(r18)
  80125c:	91400717 	ldw	r5,28(r18)
  801260:	880d883a 	mov	r6,r17
  801264:	800f883a 	mov	r7,r16
  801268:	9809883a 	mov	r4,r19
  80126c:	183ee83a 	callr	r3
  801270:	88a3883a 	add	r17,r17,r2
  801274:	80a1c83a 	sub	r16,r16,r2
  801278:	00bff616 	blt	zero,r2,801254 <_fflush_r+0x100>
  80127c:	9080030b 	ldhu	r2,12(r18)
  801280:	00ffffc4 	movi	r3,-1
  801284:	10801014 	ori	r2,r2,64
  801288:	9080030d 	sth	r2,12(r18)
  80128c:	1805883a 	mov	r2,r3
  801290:	dfc00417 	ldw	ra,16(sp)
  801294:	dcc00317 	ldw	r19,12(sp)
  801298:	dc800217 	ldw	r18,8(sp)
  80129c:	dc400117 	ldw	r17,4(sp)
  8012a0:	dc000017 	ldw	r16,0(sp)
  8012a4:	dec00504 	addi	sp,sp,20
  8012a8:	f800283a 	ret
  8012ac:	90800f17 	ldw	r2,60(r18)
  8012b0:	00bfbe16 	blt	zero,r2,8011ac <_fflush_r+0x58>
  8012b4:	0007883a 	mov	r3,zero
  8012b8:	1805883a 	mov	r2,r3
  8012bc:	dfc00417 	ldw	ra,16(sp)
  8012c0:	dcc00317 	ldw	r19,12(sp)
  8012c4:	dc800217 	ldw	r18,8(sp)
  8012c8:	dc400117 	ldw	r17,4(sp)
  8012cc:	dc000017 	ldw	r16,0(sp)
  8012d0:	dec00504 	addi	sp,sp,20
  8012d4:	f800283a 	ret
  8012d8:	08015140 	call	801514 <__sinit>
  8012dc:	003fa806 	br	801180 <_fflush_r+0x2c>
  8012e0:	90800517 	ldw	r2,20(r18)
  8012e4:	90800215 	stw	r2,8(r18)
  8012e8:	003fda06 	br	801254 <_fflush_r+0x100>
  8012ec:	90800117 	ldw	r2,4(r18)
  8012f0:	90c00c17 	ldw	r3,48(r18)
  8012f4:	80a1c83a 	sub	r16,r16,r2
  8012f8:	183fb426 	beq	r3,zero,8011cc <_fflush_r+0x78>
  8012fc:	90800f17 	ldw	r2,60(r18)
  801300:	80a1c83a 	sub	r16,r16,r2
  801304:	003fb106 	br	8011cc <_fflush_r+0x78>
  801308:	91400717 	ldw	r5,28(r18)
  80130c:	9809883a 	mov	r4,r19
  801310:	000d883a 	mov	r6,zero
  801314:	01c00044 	movi	r7,1
  801318:	403ee83a 	callr	r8
  80131c:	1021883a 	mov	r16,r2
  801320:	00bfffc4 	movi	r2,-1
  801324:	80800226 	beq	r16,r2,801330 <_fflush_r+0x1dc>
  801328:	92000a17 	ldw	r8,40(r18)
  80132c:	003fa406 	br	8011c0 <_fflush_r+0x6c>
  801330:	98c00017 	ldw	r3,0(r19)
  801334:	00800744 	movi	r2,29
  801338:	18bfde26 	beq	r3,r2,8012b4 <_fflush_r+0x160>
  80133c:	9080030b 	ldhu	r2,12(r18)
  801340:	8007883a 	mov	r3,r16
  801344:	10801014 	ori	r2,r2,64
  801348:	9080030d 	sth	r2,12(r18)
  80134c:	003fcf06 	br	80128c <_fflush_r+0x138>

00801350 <fflush>:
  801350:	01402034 	movhi	r5,128
  801354:	29445504 	addi	r5,r5,4436
  801358:	2007883a 	mov	r3,r4
  80135c:	20000526 	beq	r4,zero,801374 <fflush+0x24>
  801360:	00802074 	movhi	r2,129
  801364:	109bd004 	addi	r2,r2,28480
  801368:	11000017 	ldw	r4,0(r2)
  80136c:	180b883a 	mov	r5,r3
  801370:	08011541 	jmpi	801154 <_fflush_r>
  801374:	00802074 	movhi	r2,129
  801378:	109bd104 	addi	r2,r2,28484
  80137c:	11000017 	ldw	r4,0(r2)
  801380:	080271c1 	jmpi	80271c <_fwalk_reent>

00801384 <fgetc>:
  801384:	defffd04 	addi	sp,sp,-12
  801388:	dc400115 	stw	r17,4(sp)
  80138c:	04402074 	movhi	r17,129
  801390:	8c5bd004 	addi	r17,r17,28480
  801394:	88c00017 	ldw	r3,0(r17)
  801398:	dc000015 	stw	r16,0(sp)
  80139c:	dfc00215 	stw	ra,8(sp)
  8013a0:	2021883a 	mov	r16,r4
  8013a4:	18000326 	beq	r3,zero,8013b4 <fgetc+0x30>
  8013a8:	18800e17 	ldw	r2,56(r3)
  8013ac:	1809883a 	mov	r4,r3
  8013b0:	10000e26 	beq	r2,zero,8013ec <fgetc+0x68>
  8013b4:	80800117 	ldw	r2,4(r16)
  8013b8:	800b883a 	mov	r5,r16
  8013bc:	10bfffc4 	addi	r2,r2,-1
  8013c0:	80800115 	stw	r2,4(r16)
  8013c4:	10000f16 	blt	r2,zero,801404 <fgetc+0x80>
  8013c8:	80c00017 	ldw	r3,0(r16)
  8013cc:	18800003 	ldbu	r2,0(r3)
  8013d0:	18c00044 	addi	r3,r3,1
  8013d4:	80c00015 	stw	r3,0(r16)
  8013d8:	dfc00217 	ldw	ra,8(sp)
  8013dc:	dc400117 	ldw	r17,4(sp)
  8013e0:	dc000017 	ldw	r16,0(sp)
  8013e4:	dec00304 	addi	sp,sp,12
  8013e8:	f800283a 	ret
  8013ec:	08015140 	call	801514 <__sinit>
  8013f0:	80800117 	ldw	r2,4(r16)
  8013f4:	800b883a 	mov	r5,r16
  8013f8:	10bfffc4 	addi	r2,r2,-1
  8013fc:	80800115 	stw	r2,4(r16)
  801400:	103ff10e 	bge	r2,zero,8013c8 <fgetc+0x44>
  801404:	89000017 	ldw	r4,0(r17)
  801408:	dfc00217 	ldw	ra,8(sp)
  80140c:	dc400117 	ldw	r17,4(sp)
  801410:	dc000017 	ldw	r16,0(sp)
  801414:	dec00304 	addi	sp,sp,12
  801418:	0803d301 	jmpi	803d30 <__srget_r>

0080141c <_fgetc_r>:
  80141c:	defffd04 	addi	sp,sp,-12
  801420:	dc400115 	stw	r17,4(sp)
  801424:	dc000015 	stw	r16,0(sp)
  801428:	dfc00215 	stw	ra,8(sp)
  80142c:	2021883a 	mov	r16,r4
  801430:	2823883a 	mov	r17,r5
  801434:	20000226 	beq	r4,zero,801440 <_fgetc_r+0x24>
  801438:	20800e17 	ldw	r2,56(r4)
  80143c:	10000f26 	beq	r2,zero,80147c <_fgetc_r+0x60>
  801440:	88800117 	ldw	r2,4(r17)
  801444:	8009883a 	mov	r4,r16
  801448:	880b883a 	mov	r5,r17
  80144c:	10bfffc4 	addi	r2,r2,-1
  801450:	88800115 	stw	r2,4(r17)
  801454:	10001016 	blt	r2,zero,801498 <_fgetc_r+0x7c>
  801458:	88c00017 	ldw	r3,0(r17)
  80145c:	18800003 	ldbu	r2,0(r3)
  801460:	18c00044 	addi	r3,r3,1
  801464:	88c00015 	stw	r3,0(r17)
  801468:	dfc00217 	ldw	ra,8(sp)
  80146c:	dc400117 	ldw	r17,4(sp)
  801470:	dc000017 	ldw	r16,0(sp)
  801474:	dec00304 	addi	sp,sp,12
  801478:	f800283a 	ret
  80147c:	08015140 	call	801514 <__sinit>
  801480:	88800117 	ldw	r2,4(r17)
  801484:	8009883a 	mov	r4,r16
  801488:	880b883a 	mov	r5,r17
  80148c:	10bfffc4 	addi	r2,r2,-1
  801490:	88800115 	stw	r2,4(r17)
  801494:	103ff00e 	bge	r2,zero,801458 <_fgetc_r+0x3c>
  801498:	dfc00217 	ldw	ra,8(sp)
  80149c:	dc400117 	ldw	r17,4(sp)
  8014a0:	dc000017 	ldw	r16,0(sp)
  8014a4:	dec00304 	addi	sp,sp,12
  8014a8:	0803d301 	jmpi	803d30 <__srget_r>

008014ac <std>:
  8014ac:	00802034 	movhi	r2,128
  8014b0:	108ffa04 	addi	r2,r2,16360
  8014b4:	20800b15 	stw	r2,44(r4)
  8014b8:	00802034 	movhi	r2,128
  8014bc:	10903504 	addi	r2,r2,16596
  8014c0:	20800815 	stw	r2,32(r4)
  8014c4:	00c02034 	movhi	r3,128
  8014c8:	18d01604 	addi	r3,r3,16472
  8014cc:	00802034 	movhi	r2,128
  8014d0:	108ffc04 	addi	r2,r2,16368
  8014d4:	2140030d 	sth	r5,12(r4)
  8014d8:	2180038d 	sth	r6,14(r4)
  8014dc:	20c00915 	stw	r3,36(r4)
  8014e0:	20800a15 	stw	r2,40(r4)
  8014e4:	20000015 	stw	zero,0(r4)
  8014e8:	20000115 	stw	zero,4(r4)
  8014ec:	20000215 	stw	zero,8(r4)
  8014f0:	20000415 	stw	zero,16(r4)
  8014f4:	20000515 	stw	zero,20(r4)
  8014f8:	20000615 	stw	zero,24(r4)
  8014fc:	21000715 	stw	r4,28(r4)
  801500:	f800283a 	ret

00801504 <__sfp_lock_acquire>:
  801504:	f800283a 	ret

00801508 <__sfp_lock_release>:
  801508:	f800283a 	ret

0080150c <__sinit_lock_acquire>:
  80150c:	f800283a 	ret

00801510 <__sinit_lock_release>:
  801510:	f800283a 	ret

00801514 <__sinit>:
  801514:	20800e17 	ldw	r2,56(r4)
  801518:	defffd04 	addi	sp,sp,-12
  80151c:	dc400115 	stw	r17,4(sp)
  801520:	dc000015 	stw	r16,0(sp)
  801524:	dfc00215 	stw	ra,8(sp)
  801528:	04400044 	movi	r17,1
  80152c:	01400104 	movi	r5,4
  801530:	000d883a 	mov	r6,zero
  801534:	2021883a 	mov	r16,r4
  801538:	2200bb04 	addi	r8,r4,748
  80153c:	200f883a 	mov	r7,r4
  801540:	10000526 	beq	r2,zero,801558 <__sinit+0x44>
  801544:	dfc00217 	ldw	ra,8(sp)
  801548:	dc400117 	ldw	r17,4(sp)
  80154c:	dc000017 	ldw	r16,0(sp)
  801550:	dec00304 	addi	sp,sp,12
  801554:	f800283a 	ret
  801558:	21000117 	ldw	r4,4(r4)
  80155c:	00802034 	movhi	r2,128
  801560:	10857e04 	addi	r2,r2,5624
  801564:	00c000c4 	movi	r3,3
  801568:	80800f15 	stw	r2,60(r16)
  80156c:	80c0b915 	stw	r3,740(r16)
  801570:	8200ba15 	stw	r8,744(r16)
  801574:	84400e15 	stw	r17,56(r16)
  801578:	8000b815 	stw	zero,736(r16)
  80157c:	08014ac0 	call	8014ac <std>
  801580:	81000217 	ldw	r4,8(r16)
  801584:	880d883a 	mov	r6,r17
  801588:	800f883a 	mov	r7,r16
  80158c:	01400284 	movi	r5,10
  801590:	08014ac0 	call	8014ac <std>
  801594:	81000317 	ldw	r4,12(r16)
  801598:	800f883a 	mov	r7,r16
  80159c:	01400484 	movi	r5,18
  8015a0:	01800084 	movi	r6,2
  8015a4:	dfc00217 	ldw	ra,8(sp)
  8015a8:	dc400117 	ldw	r17,4(sp)
  8015ac:	dc000017 	ldw	r16,0(sp)
  8015b0:	dec00304 	addi	sp,sp,12
  8015b4:	08014ac1 	jmpi	8014ac <std>

008015b8 <__fp_lock>:
  8015b8:	0005883a 	mov	r2,zero
  8015bc:	f800283a 	ret

008015c0 <__fp_unlock>:
  8015c0:	0005883a 	mov	r2,zero
  8015c4:	f800283a 	ret

008015c8 <__fp_unlock_all>:
  8015c8:	00802074 	movhi	r2,129
  8015cc:	109bd004 	addi	r2,r2,28480
  8015d0:	11000017 	ldw	r4,0(r2)
  8015d4:	01402034 	movhi	r5,128
  8015d8:	29457004 	addi	r5,r5,5568
  8015dc:	08027e41 	jmpi	8027e4 <_fwalk>

008015e0 <__fp_lock_all>:
  8015e0:	00802074 	movhi	r2,129
  8015e4:	109bd004 	addi	r2,r2,28480
  8015e8:	11000017 	ldw	r4,0(r2)
  8015ec:	01402034 	movhi	r5,128
  8015f0:	29456e04 	addi	r5,r5,5560
  8015f4:	08027e41 	jmpi	8027e4 <_fwalk>

008015f8 <_cleanup_r>:
  8015f8:	01402034 	movhi	r5,128
  8015fc:	29445004 	addi	r5,r5,4416
  801600:	08027e41 	jmpi	8027e4 <_fwalk>

00801604 <_cleanup>:
  801604:	00802074 	movhi	r2,129
  801608:	109bd104 	addi	r2,r2,28484
  80160c:	11000017 	ldw	r4,0(r2)
  801610:	08015f81 	jmpi	8015f8 <_cleanup_r>

00801614 <__sfmoreglue>:
  801614:	defffc04 	addi	sp,sp,-16
  801618:	dc400115 	stw	r17,4(sp)
  80161c:	2c401724 	muli	r17,r5,92
  801620:	dc800215 	stw	r18,8(sp)
  801624:	2825883a 	mov	r18,r5
  801628:	89400304 	addi	r5,r17,12
  80162c:	dc000015 	stw	r16,0(sp)
  801630:	dfc00315 	stw	ra,12(sp)
  801634:	0802a300 	call	802a30 <_malloc_r>
  801638:	0021883a 	mov	r16,zero
  80163c:	880d883a 	mov	r6,r17
  801640:	000b883a 	mov	r5,zero
  801644:	10000626 	beq	r2,zero,801660 <__sfmoreglue+0x4c>
  801648:	11000304 	addi	r4,r2,12
  80164c:	14800115 	stw	r18,4(r2)
  801650:	10000015 	stw	zero,0(r2)
  801654:	11000215 	stw	r4,8(r2)
  801658:	1021883a 	mov	r16,r2
  80165c:	08033d40 	call	8033d4 <memset>
  801660:	8005883a 	mov	r2,r16
  801664:	dfc00317 	ldw	ra,12(sp)
  801668:	dc800217 	ldw	r18,8(sp)
  80166c:	dc400117 	ldw	r17,4(sp)
  801670:	dc000017 	ldw	r16,0(sp)
  801674:	dec00404 	addi	sp,sp,16
  801678:	f800283a 	ret

0080167c <__sfp>:
  80167c:	defffd04 	addi	sp,sp,-12
  801680:	00802074 	movhi	r2,129
  801684:	109bd104 	addi	r2,r2,28484
  801688:	dc000015 	stw	r16,0(sp)
  80168c:	14000017 	ldw	r16,0(r2)
  801690:	dc400115 	stw	r17,4(sp)
  801694:	dfc00215 	stw	ra,8(sp)
  801698:	80800e17 	ldw	r2,56(r16)
  80169c:	2023883a 	mov	r17,r4
  8016a0:	10002626 	beq	r2,zero,80173c <__sfp+0xc0>
  8016a4:	8400b804 	addi	r16,r16,736
  8016a8:	80800117 	ldw	r2,4(r16)
  8016ac:	81000217 	ldw	r4,8(r16)
  8016b0:	10ffffc4 	addi	r3,r2,-1
  8016b4:	18000916 	blt	r3,zero,8016dc <__sfp+0x60>
  8016b8:	2080030f 	ldh	r2,12(r4)
  8016bc:	10000b26 	beq	r2,zero,8016ec <__sfp+0x70>
  8016c0:	017fffc4 	movi	r5,-1
  8016c4:	00000206 	br	8016d0 <__sfp+0x54>
  8016c8:	2080030f 	ldh	r2,12(r4)
  8016cc:	10000726 	beq	r2,zero,8016ec <__sfp+0x70>
  8016d0:	18ffffc4 	addi	r3,r3,-1
  8016d4:	21001704 	addi	r4,r4,92
  8016d8:	197ffb1e 	bne	r3,r5,8016c8 <__sfp+0x4c>
  8016dc:	80800017 	ldw	r2,0(r16)
  8016e0:	10001926 	beq	r2,zero,801748 <__sfp+0xcc>
  8016e4:	1021883a 	mov	r16,r2
  8016e8:	003fef06 	br	8016a8 <__sfp+0x2c>
  8016ec:	00bfffc4 	movi	r2,-1
  8016f0:	00c00044 	movi	r3,1
  8016f4:	2080038d 	sth	r2,14(r4)
  8016f8:	20c0030d 	sth	r3,12(r4)
  8016fc:	20000015 	stw	zero,0(r4)
  801700:	20000215 	stw	zero,8(r4)
  801704:	20000115 	stw	zero,4(r4)
  801708:	20000415 	stw	zero,16(r4)
  80170c:	20000515 	stw	zero,20(r4)
  801710:	20000615 	stw	zero,24(r4)
  801714:	20000c15 	stw	zero,48(r4)
  801718:	20000d15 	stw	zero,52(r4)
  80171c:	20001115 	stw	zero,68(r4)
  801720:	20001215 	stw	zero,72(r4)
  801724:	2005883a 	mov	r2,r4
  801728:	dfc00217 	ldw	ra,8(sp)
  80172c:	dc400117 	ldw	r17,4(sp)
  801730:	dc000017 	ldw	r16,0(sp)
  801734:	dec00304 	addi	sp,sp,12
  801738:	f800283a 	ret
  80173c:	8009883a 	mov	r4,r16
  801740:	08015140 	call	801514 <__sinit>
  801744:	003fd706 	br	8016a4 <__sfp+0x28>
  801748:	8809883a 	mov	r4,r17
  80174c:	01400104 	movi	r5,4
  801750:	08016140 	call	801614 <__sfmoreglue>
  801754:	80800015 	stw	r2,0(r16)
  801758:	103fe21e 	bne	r2,zero,8016e4 <__sfp+0x68>
  80175c:	00800304 	movi	r2,12
  801760:	0009883a 	mov	r4,zero
  801764:	88800015 	stw	r2,0(r17)
  801768:	003fee06 	br	801724 <__sfp+0xa8>

0080176c <_fopen_r>:
  80176c:	defffa04 	addi	sp,sp,-24
  801770:	dcc00415 	stw	r19,16(sp)
  801774:	2827883a 	mov	r19,r5
  801778:	300b883a 	mov	r5,r6
  80177c:	d80d883a 	mov	r6,sp
  801780:	dc800315 	stw	r18,12(sp)
  801784:	dc400215 	stw	r17,8(sp)
  801788:	dc000115 	stw	r16,4(sp)
  80178c:	dfc00515 	stw	ra,20(sp)
  801790:	2021883a 	mov	r16,r4
  801794:	08092400 	call	809240 <__sflags>
  801798:	1025883a 	mov	r18,r2
  80179c:	8009883a 	mov	r4,r16
  8017a0:	0023883a 	mov	r17,zero
  8017a4:	1000081e 	bne	r2,zero,8017c8 <_fopen_r+0x5c>
  8017a8:	8805883a 	mov	r2,r17
  8017ac:	dfc00517 	ldw	ra,20(sp)
  8017b0:	dcc00417 	ldw	r19,16(sp)
  8017b4:	dc800317 	ldw	r18,12(sp)
  8017b8:	dc400217 	ldw	r17,8(sp)
  8017bc:	dc000117 	ldw	r16,4(sp)
  8017c0:	dec00604 	addi	sp,sp,24
  8017c4:	f800283a 	ret
  8017c8:	080167c0 	call	80167c <__sfp>
  8017cc:	1023883a 	mov	r17,r2
  8017d0:	980b883a 	mov	r5,r19
  8017d4:	8009883a 	mov	r4,r16
  8017d8:	01c06d84 	movi	r7,438
  8017dc:	103ff226 	beq	r2,zero,8017a8 <_fopen_r+0x3c>
  8017e0:	d9800017 	ldw	r6,0(sp)
  8017e4:	080346c0 	call	80346c <_open_r>
  8017e8:	10001816 	blt	r2,zero,80184c <_fopen_r+0xe0>
  8017ec:	00c02034 	movhi	r3,128
  8017f0:	18d01604 	addi	r3,r3,16472
  8017f4:	923fffcc 	andi	r8,r18,65535
  8017f8:	8880038d 	sth	r2,14(r17)
  8017fc:	00802034 	movhi	r2,128
  801800:	10903504 	addi	r2,r2,16596
  801804:	88800815 	stw	r2,32(r17)
  801808:	88c00915 	stw	r3,36(r17)
  80180c:	00802034 	movhi	r2,128
  801810:	108ffc04 	addi	r2,r2,16368
  801814:	00c02034 	movhi	r3,128
  801818:	18cffa04 	addi	r3,r3,16360
  80181c:	4200400c 	andi	r8,r8,256
  801820:	8c80030d 	sth	r18,12(r17)
  801824:	8009883a 	mov	r4,r16
  801828:	880b883a 	mov	r5,r17
  80182c:	000d883a 	mov	r6,zero
  801830:	01c00084 	movi	r7,2
  801834:	88800a15 	stw	r2,40(r17)
  801838:	88c00b15 	stw	r3,44(r17)
  80183c:	8c400715 	stw	r17,28(r17)
  801840:	403fd926 	beq	r8,zero,8017a8 <_fopen_r+0x3c>
  801844:	0801dac0 	call	801dac <_fseek_r>
  801848:	003fd706 	br	8017a8 <_fopen_r+0x3c>
  80184c:	08015040 	call	801504 <__sfp_lock_acquire>
  801850:	8800030d 	sth	zero,12(r17)
  801854:	08015080 	call	801508 <__sfp_lock_release>
  801858:	0023883a 	mov	r17,zero
  80185c:	003fd206 	br	8017a8 <_fopen_r+0x3c>

00801860 <fopen>:
  801860:	01802074 	movhi	r6,129
  801864:	319bd004 	addi	r6,r6,28480
  801868:	2007883a 	mov	r3,r4
  80186c:	31000017 	ldw	r4,0(r6)
  801870:	280d883a 	mov	r6,r5
  801874:	180b883a 	mov	r5,r3
  801878:	080176c1 	jmpi	80176c <_fopen_r>

0080187c <fprintf>:
  80187c:	defffc04 	addi	sp,sp,-16
  801880:	dfc00115 	stw	ra,4(sp)
  801884:	d9800215 	stw	r6,8(sp)
  801888:	d9c00315 	stw	r7,12(sp)
  80188c:	d8800204 	addi	r2,sp,8
  801890:	100d883a 	mov	r6,r2
  801894:	d8800015 	stw	r2,0(sp)
  801898:	08060ac0 	call	8060ac <__vfprintf_internal>
  80189c:	dfc00117 	ldw	ra,4(sp)
  8018a0:	dec00404 	addi	sp,sp,16
  8018a4:	f800283a 	ret

008018a8 <_fprintf_r>:
  8018a8:	defffd04 	addi	sp,sp,-12
  8018ac:	2807883a 	mov	r3,r5
  8018b0:	dfc00115 	stw	ra,4(sp)
  8018b4:	d9c00215 	stw	r7,8(sp)
  8018b8:	d8800204 	addi	r2,sp,8
  8018bc:	300b883a 	mov	r5,r6
  8018c0:	1809883a 	mov	r4,r3
  8018c4:	100d883a 	mov	r6,r2
  8018c8:	d8800015 	stw	r2,0(sp)
  8018cc:	08060ac0 	call	8060ac <__vfprintf_internal>
  8018d0:	dfc00117 	ldw	ra,4(sp)
  8018d4:	dec00304 	addi	sp,sp,12
  8018d8:	f800283a 	ret

008018dc <_fputs_r>:
  8018dc:	defff804 	addi	sp,sp,-32
  8018e0:	dc000515 	stw	r16,20(sp)
  8018e4:	2021883a 	mov	r16,r4
  8018e8:	2809883a 	mov	r4,r5
  8018ec:	dc400615 	stw	r17,24(sp)
  8018f0:	dfc00715 	stw	ra,28(sp)
  8018f4:	3023883a 	mov	r17,r6
  8018f8:	d9400015 	stw	r5,0(sp)
  8018fc:	08041340 	call	804134 <strlen>
  801900:	00c00044 	movi	r3,1
  801904:	d8800115 	stw	r2,4(sp)
  801908:	d8c00315 	stw	r3,12(sp)
  80190c:	d8800415 	stw	r2,16(sp)
  801910:	dec00215 	stw	sp,8(sp)
  801914:	80000326 	beq	r16,zero,801924 <_fputs_r+0x48>
  801918:	80800e17 	ldw	r2,56(r16)
  80191c:	8009883a 	mov	r4,r16
  801920:	10000926 	beq	r2,zero,801948 <_fputs_r+0x6c>
  801924:	8009883a 	mov	r4,r16
  801928:	880b883a 	mov	r5,r17
  80192c:	d9800204 	addi	r6,sp,8
  801930:	08022800 	call	802280 <__sfvwrite_r>
  801934:	dfc00717 	ldw	ra,28(sp)
  801938:	dc400617 	ldw	r17,24(sp)
  80193c:	dc000517 	ldw	r16,20(sp)
  801940:	dec00804 	addi	sp,sp,32
  801944:	f800283a 	ret
  801948:	08015140 	call	801514 <__sinit>
  80194c:	003ff506 	br	801924 <_fputs_r+0x48>

00801950 <fputs>:
  801950:	01802074 	movhi	r6,129
  801954:	319bd004 	addi	r6,r6,28480
  801958:	2007883a 	mov	r3,r4
  80195c:	31000017 	ldw	r4,0(r6)
  801960:	280d883a 	mov	r6,r5
  801964:	180b883a 	mov	r5,r3
  801968:	08018dc1 	jmpi	8018dc <_fputs_r>

0080196c <_malloc_trim_r>:
  80196c:	defffb04 	addi	sp,sp,-20
  801970:	dcc00315 	stw	r19,12(sp)
  801974:	04c02074 	movhi	r19,129
  801978:	9cd5c204 	addi	r19,r19,22280
  80197c:	dc800215 	stw	r18,8(sp)
  801980:	dc400115 	stw	r17,4(sp)
  801984:	dc000015 	stw	r16,0(sp)
  801988:	2823883a 	mov	r17,r5
  80198c:	2025883a 	mov	r18,r4
  801990:	dfc00415 	stw	ra,16(sp)
  801994:	0810e200 	call	810e20 <__malloc_lock>
  801998:	98800217 	ldw	r2,8(r19)
  80199c:	9009883a 	mov	r4,r18
  8019a0:	000b883a 	mov	r5,zero
  8019a4:	10c00117 	ldw	r3,4(r2)
  8019a8:	00bfff04 	movi	r2,-4
  8019ac:	18a0703a 	and	r16,r3,r2
  8019b0:	8463c83a 	sub	r17,r16,r17
  8019b4:	8c43fbc4 	addi	r17,r17,4079
  8019b8:	8822d33a 	srli	r17,r17,12
  8019bc:	0083ffc4 	movi	r2,4095
  8019c0:	8c7fffc4 	addi	r17,r17,-1
  8019c4:	8822933a 	slli	r17,r17,12
  8019c8:	1440060e 	bge	r2,r17,8019e4 <_malloc_trim_r+0x78>
  8019cc:	0803d900 	call	803d90 <_sbrk_r>
  8019d0:	98c00217 	ldw	r3,8(r19)
  8019d4:	9009883a 	mov	r4,r18
  8019d8:	044bc83a 	sub	r5,zero,r17
  8019dc:	80c7883a 	add	r3,r16,r3
  8019e0:	10c00926 	beq	r2,r3,801a08 <_malloc_trim_r+0x9c>
  8019e4:	0810e400 	call	810e40 <__malloc_unlock>
  8019e8:	0005883a 	mov	r2,zero
  8019ec:	dfc00417 	ldw	ra,16(sp)
  8019f0:	dcc00317 	ldw	r19,12(sp)
  8019f4:	dc800217 	ldw	r18,8(sp)
  8019f8:	dc400117 	ldw	r17,4(sp)
  8019fc:	dc000017 	ldw	r16,0(sp)
  801a00:	dec00504 	addi	sp,sp,20
  801a04:	f800283a 	ret
  801a08:	9009883a 	mov	r4,r18
  801a0c:	0803d900 	call	803d90 <_sbrk_r>
  801a10:	844dc83a 	sub	r6,r16,r17
  801a14:	00ffffc4 	movi	r3,-1
  801a18:	9009883a 	mov	r4,r18
  801a1c:	000b883a 	mov	r5,zero
  801a20:	01c020b4 	movhi	r7,130
  801a24:	39e33f04 	addi	r7,r7,-29444
  801a28:	31800054 	ori	r6,r6,1
  801a2c:	10c00926 	beq	r2,r3,801a54 <_malloc_trim_r+0xe8>
  801a30:	38800017 	ldw	r2,0(r7)
  801a34:	98c00217 	ldw	r3,8(r19)
  801a38:	9009883a 	mov	r4,r18
  801a3c:	1445c83a 	sub	r2,r2,r17
  801a40:	38800015 	stw	r2,0(r7)
  801a44:	19800115 	stw	r6,4(r3)
  801a48:	0810e400 	call	810e40 <__malloc_unlock>
  801a4c:	00800044 	movi	r2,1
  801a50:	003fe606 	br	8019ec <_malloc_trim_r+0x80>
  801a54:	0803d900 	call	803d90 <_sbrk_r>
  801a58:	99800217 	ldw	r6,8(r19)
  801a5c:	100f883a 	mov	r7,r2
  801a60:	9009883a 	mov	r4,r18
  801a64:	1187c83a 	sub	r3,r2,r6
  801a68:	008003c4 	movi	r2,15
  801a6c:	19400054 	ori	r5,r3,1
  801a70:	10ffdc0e 	bge	r2,r3,8019e4 <_malloc_trim_r+0x78>
  801a74:	00802074 	movhi	r2,129
  801a78:	109bd304 	addi	r2,r2,28492
  801a7c:	10c00017 	ldw	r3,0(r2)
  801a80:	008020b4 	movhi	r2,130
  801a84:	10a33f04 	addi	r2,r2,-29444
  801a88:	31400115 	stw	r5,4(r6)
  801a8c:	38c7c83a 	sub	r3,r7,r3
  801a90:	10c00015 	stw	r3,0(r2)
  801a94:	003fd306 	br	8019e4 <_malloc_trim_r+0x78>

00801a98 <_free_r>:
  801a98:	defffd04 	addi	sp,sp,-12
  801a9c:	dc400115 	stw	r17,4(sp)
  801aa0:	dc000015 	stw	r16,0(sp)
  801aa4:	dfc00215 	stw	ra,8(sp)
  801aa8:	2821883a 	mov	r16,r5
  801aac:	2023883a 	mov	r17,r4
  801ab0:	28005a26 	beq	r5,zero,801c1c <_free_r+0x184>
  801ab4:	0810e200 	call	810e20 <__malloc_lock>
  801ab8:	823ffe04 	addi	r8,r16,-8
  801abc:	41400117 	ldw	r5,4(r8)
  801ac0:	00bfff84 	movi	r2,-2
  801ac4:	02802074 	movhi	r10,129
  801ac8:	5295c204 	addi	r10,r10,22280
  801acc:	288e703a 	and	r7,r5,r2
  801ad0:	41cd883a 	add	r6,r8,r7
  801ad4:	30c00117 	ldw	r3,4(r6)
  801ad8:	51000217 	ldw	r4,8(r10)
  801adc:	00bfff04 	movi	r2,-4
  801ae0:	1892703a 	and	r9,r3,r2
  801ae4:	5017883a 	mov	r11,r10
  801ae8:	31006726 	beq	r6,r4,801c88 <_free_r+0x1f0>
  801aec:	2880004c 	andi	r2,r5,1
  801af0:	1005003a 	cmpeq	r2,r2,zero
  801af4:	32400115 	stw	r9,4(r6)
  801af8:	10001a1e 	bne	r2,zero,801b64 <_free_r+0xcc>
  801afc:	000b883a 	mov	r5,zero
  801b00:	3247883a 	add	r3,r6,r9
  801b04:	18800117 	ldw	r2,4(r3)
  801b08:	1080004c 	andi	r2,r2,1
  801b0c:	1000231e 	bne	r2,zero,801b9c <_free_r+0x104>
  801b10:	280ac03a 	cmpne	r5,r5,zero
  801b14:	3a4f883a 	add	r7,r7,r9
  801b18:	2800451e 	bne	r5,zero,801c30 <_free_r+0x198>
  801b1c:	31000217 	ldw	r4,8(r6)
  801b20:	00802074 	movhi	r2,129
  801b24:	1095c404 	addi	r2,r2,22288
  801b28:	20807b26 	beq	r4,r2,801d18 <_free_r+0x280>
  801b2c:	30800317 	ldw	r2,12(r6)
  801b30:	3a07883a 	add	r3,r7,r8
  801b34:	19c00015 	stw	r7,0(r3)
  801b38:	11000215 	stw	r4,8(r2)
  801b3c:	20800315 	stw	r2,12(r4)
  801b40:	38800054 	ori	r2,r7,1
  801b44:	40800115 	stw	r2,4(r8)
  801b48:	28001a26 	beq	r5,zero,801bb4 <_free_r+0x11c>
  801b4c:	8809883a 	mov	r4,r17
  801b50:	dfc00217 	ldw	ra,8(sp)
  801b54:	dc400117 	ldw	r17,4(sp)
  801b58:	dc000017 	ldw	r16,0(sp)
  801b5c:	dec00304 	addi	sp,sp,12
  801b60:	0810e401 	jmpi	810e40 <__malloc_unlock>
  801b64:	80bffe17 	ldw	r2,-8(r16)
  801b68:	50c00204 	addi	r3,r10,8
  801b6c:	4091c83a 	sub	r8,r8,r2
  801b70:	41000217 	ldw	r4,8(r8)
  801b74:	388f883a 	add	r7,r7,r2
  801b78:	20c06126 	beq	r4,r3,801d00 <_free_r+0x268>
  801b7c:	40800317 	ldw	r2,12(r8)
  801b80:	3247883a 	add	r3,r6,r9
  801b84:	000b883a 	mov	r5,zero
  801b88:	11000215 	stw	r4,8(r2)
  801b8c:	20800315 	stw	r2,12(r4)
  801b90:	18800117 	ldw	r2,4(r3)
  801b94:	1080004c 	andi	r2,r2,1
  801b98:	103fdd26 	beq	r2,zero,801b10 <_free_r+0x78>
  801b9c:	38800054 	ori	r2,r7,1
  801ba0:	3a07883a 	add	r3,r7,r8
  801ba4:	280ac03a 	cmpne	r5,r5,zero
  801ba8:	40800115 	stw	r2,4(r8)
  801bac:	19c00015 	stw	r7,0(r3)
  801bb0:	283fe61e 	bne	r5,zero,801b4c <_free_r+0xb4>
  801bb4:	00807fc4 	movi	r2,511
  801bb8:	11c01f2e 	bgeu	r2,r7,801c38 <_free_r+0x1a0>
  801bbc:	3806d27a 	srli	r3,r7,9
  801bc0:	1800481e 	bne	r3,zero,801ce4 <_free_r+0x24c>
  801bc4:	3804d0fa 	srli	r2,r7,3
  801bc8:	100690fa 	slli	r3,r2,3
  801bcc:	1acd883a 	add	r6,r3,r11
  801bd0:	31400217 	ldw	r5,8(r6)
  801bd4:	31405926 	beq	r6,r5,801d3c <_free_r+0x2a4>
  801bd8:	28800117 	ldw	r2,4(r5)
  801bdc:	00ffff04 	movi	r3,-4
  801be0:	10c4703a 	and	r2,r2,r3
  801be4:	3880022e 	bgeu	r7,r2,801bf0 <_free_r+0x158>
  801be8:	29400217 	ldw	r5,8(r5)
  801bec:	317ffa1e 	bne	r6,r5,801bd8 <_free_r+0x140>
  801bf0:	29800317 	ldw	r6,12(r5)
  801bf4:	41800315 	stw	r6,12(r8)
  801bf8:	41400215 	stw	r5,8(r8)
  801bfc:	8809883a 	mov	r4,r17
  801c00:	2a000315 	stw	r8,12(r5)
  801c04:	32000215 	stw	r8,8(r6)
  801c08:	dfc00217 	ldw	ra,8(sp)
  801c0c:	dc400117 	ldw	r17,4(sp)
  801c10:	dc000017 	ldw	r16,0(sp)
  801c14:	dec00304 	addi	sp,sp,12
  801c18:	0810e401 	jmpi	810e40 <__malloc_unlock>
  801c1c:	dfc00217 	ldw	ra,8(sp)
  801c20:	dc400117 	ldw	r17,4(sp)
  801c24:	dc000017 	ldw	r16,0(sp)
  801c28:	dec00304 	addi	sp,sp,12
  801c2c:	f800283a 	ret
  801c30:	31000217 	ldw	r4,8(r6)
  801c34:	003fbd06 	br	801b2c <_free_r+0x94>
  801c38:	3806d0fa 	srli	r3,r7,3
  801c3c:	00800044 	movi	r2,1
  801c40:	51400117 	ldw	r5,4(r10)
  801c44:	180890fa 	slli	r4,r3,3
  801c48:	1807d0ba 	srai	r3,r3,2
  801c4c:	22c9883a 	add	r4,r4,r11
  801c50:	21800217 	ldw	r6,8(r4)
  801c54:	10c4983a 	sll	r2,r2,r3
  801c58:	41000315 	stw	r4,12(r8)
  801c5c:	41800215 	stw	r6,8(r8)
  801c60:	288ab03a 	or	r5,r5,r2
  801c64:	22000215 	stw	r8,8(r4)
  801c68:	8809883a 	mov	r4,r17
  801c6c:	51400115 	stw	r5,4(r10)
  801c70:	32000315 	stw	r8,12(r6)
  801c74:	dfc00217 	ldw	ra,8(sp)
  801c78:	dc400117 	ldw	r17,4(sp)
  801c7c:	dc000017 	ldw	r16,0(sp)
  801c80:	dec00304 	addi	sp,sp,12
  801c84:	0810e401 	jmpi	810e40 <__malloc_unlock>
  801c88:	2880004c 	andi	r2,r5,1
  801c8c:	3a4d883a 	add	r6,r7,r9
  801c90:	1000071e 	bne	r2,zero,801cb0 <_free_r+0x218>
  801c94:	80bffe17 	ldw	r2,-8(r16)
  801c98:	4091c83a 	sub	r8,r8,r2
  801c9c:	41000317 	ldw	r4,12(r8)
  801ca0:	40c00217 	ldw	r3,8(r8)
  801ca4:	308d883a 	add	r6,r6,r2
  801ca8:	20c00215 	stw	r3,8(r4)
  801cac:	19000315 	stw	r4,12(r3)
  801cb0:	00802074 	movhi	r2,129
  801cb4:	109bd204 	addi	r2,r2,28488
  801cb8:	11000017 	ldw	r4,0(r2)
  801cbc:	30c00054 	ori	r3,r6,1
  801cc0:	52000215 	stw	r8,8(r10)
  801cc4:	40c00115 	stw	r3,4(r8)
  801cc8:	313fa036 	bltu	r6,r4,801b4c <_free_r+0xb4>
  801ccc:	008020b4 	movhi	r2,130
  801cd0:	10a32704 	addi	r2,r2,-29540
  801cd4:	11400017 	ldw	r5,0(r2)
  801cd8:	8809883a 	mov	r4,r17
  801cdc:	080196c0 	call	80196c <_malloc_trim_r>
  801ce0:	003f9a06 	br	801b4c <_free_r+0xb4>
  801ce4:	00800104 	movi	r2,4
  801ce8:	10c0072e 	bgeu	r2,r3,801d08 <_free_r+0x270>
  801cec:	00800504 	movi	r2,20
  801cf0:	10c01936 	bltu	r2,r3,801d58 <_free_r+0x2c0>
  801cf4:	188016c4 	addi	r2,r3,91
  801cf8:	100690fa 	slli	r3,r2,3
  801cfc:	003fb306 	br	801bcc <_free_r+0x134>
  801d00:	01400044 	movi	r5,1
  801d04:	003f7e06 	br	801b00 <_free_r+0x68>
  801d08:	3804d1ba 	srli	r2,r7,6
  801d0c:	10800e04 	addi	r2,r2,56
  801d10:	100690fa 	slli	r3,r2,3
  801d14:	003fad06 	br	801bcc <_free_r+0x134>
  801d18:	22000315 	stw	r8,12(r4)
  801d1c:	22000215 	stw	r8,8(r4)
  801d20:	3a05883a 	add	r2,r7,r8
  801d24:	38c00054 	ori	r3,r7,1
  801d28:	11c00015 	stw	r7,0(r2)
  801d2c:	41000215 	stw	r4,8(r8)
  801d30:	40c00115 	stw	r3,4(r8)
  801d34:	41000315 	stw	r4,12(r8)
  801d38:	003f8406 	br	801b4c <_free_r+0xb4>
  801d3c:	1005d0ba 	srai	r2,r2,2
  801d40:	00c00044 	movi	r3,1
  801d44:	51000117 	ldw	r4,4(r10)
  801d48:	1886983a 	sll	r3,r3,r2
  801d4c:	20c8b03a 	or	r4,r4,r3
  801d50:	51000115 	stw	r4,4(r10)
  801d54:	003fa706 	br	801bf4 <_free_r+0x15c>
  801d58:	00801504 	movi	r2,84
  801d5c:	10c00436 	bltu	r2,r3,801d70 <_free_r+0x2d8>
  801d60:	3804d33a 	srli	r2,r7,12
  801d64:	10801b84 	addi	r2,r2,110
  801d68:	100690fa 	slli	r3,r2,3
  801d6c:	003f9706 	br	801bcc <_free_r+0x134>
  801d70:	00805504 	movi	r2,340
  801d74:	10c00436 	bltu	r2,r3,801d88 <_free_r+0x2f0>
  801d78:	3804d3fa 	srli	r2,r7,15
  801d7c:	10801dc4 	addi	r2,r2,119
  801d80:	100690fa 	slli	r3,r2,3
  801d84:	003f9106 	br	801bcc <_free_r+0x134>
  801d88:	00815504 	movi	r2,1364
  801d8c:	10c0032e 	bgeu	r2,r3,801d9c <_free_r+0x304>
  801d90:	00801f84 	movi	r2,126
  801d94:	00c0fc04 	movi	r3,1008
  801d98:	003f8c06 	br	801bcc <_free_r+0x134>
  801d9c:	3804d4ba 	srli	r2,r7,18
  801da0:	10801f04 	addi	r2,r2,124
  801da4:	100690fa 	slli	r3,r2,3
  801da8:	003f8806 	br	801bcc <_free_r+0x134>

00801dac <_fseek_r>:
  801dac:	deffe804 	addi	sp,sp,-96
  801db0:	dd801515 	stw	r22,84(sp)
  801db4:	dcc01215 	stw	r19,72(sp)
  801db8:	dc801115 	stw	r18,68(sp)
  801dbc:	dc000f15 	stw	r16,60(sp)
  801dc0:	dfc01715 	stw	ra,92(sp)
  801dc4:	ddc01615 	stw	r23,88(sp)
  801dc8:	dd401415 	stw	r21,80(sp)
  801dcc:	dd001315 	stw	r20,76(sp)
  801dd0:	dc401015 	stw	r17,64(sp)
  801dd4:	2025883a 	mov	r18,r4
  801dd8:	2821883a 	mov	r16,r5
  801ddc:	302d883a 	mov	r22,r6
  801de0:	3827883a 	mov	r19,r7
  801de4:	20000226 	beq	r4,zero,801df0 <_fseek_r+0x44>
  801de8:	20800e17 	ldw	r2,56(r4)
  801dec:	10007826 	beq	r2,zero,801fd0 <_fseek_r+0x224>
  801df0:	8080030b 	ldhu	r2,12(r16)
  801df4:	00c04204 	movi	r3,264
  801df8:	1080420c 	andi	r2,r2,264
  801dfc:	10c07926 	beq	r2,r3,801fe4 <_fseek_r+0x238>
  801e00:	85400a17 	ldw	r21,40(r16)
  801e04:	a800ea26 	beq	r21,zero,8021b0 <_fseek_r+0x404>
  801e08:	00800044 	movi	r2,1
  801e0c:	98805f26 	beq	r19,r2,801f8c <_fseek_r+0x1e0>
  801e10:	00800084 	movi	r2,2
  801e14:	98801026 	beq	r19,r2,801e58 <_fseek_r+0xac>
  801e18:	98000f26 	beq	r19,zero,801e58 <_fseek_r+0xac>
  801e1c:	00800584 	movi	r2,22
  801e20:	013fffc4 	movi	r4,-1
  801e24:	90800015 	stw	r2,0(r18)
  801e28:	2005883a 	mov	r2,r4
  801e2c:	dfc01717 	ldw	ra,92(sp)
  801e30:	ddc01617 	ldw	r23,88(sp)
  801e34:	dd801517 	ldw	r22,84(sp)
  801e38:	dd401417 	ldw	r21,80(sp)
  801e3c:	dd001317 	ldw	r20,76(sp)
  801e40:	dcc01217 	ldw	r19,72(sp)
  801e44:	dc801117 	ldw	r18,68(sp)
  801e48:	dc401017 	ldw	r17,64(sp)
  801e4c:	dc000f17 	ldw	r16,60(sp)
  801e50:	dec01804 	addi	sp,sp,96
  801e54:	f800283a 	ret
  801e58:	81800417 	ldw	r6,16(r16)
  801e5c:	0023883a 	mov	r17,zero
  801e60:	002f883a 	mov	r23,zero
  801e64:	3000a626 	beq	r6,zero,802100 <_fseek_r+0x354>
  801e68:	8100030b 	ldhu	r4,12(r16)
  801e6c:	2082068c 	andi	r2,r4,2074
  801e70:	1000081e 	bne	r2,zero,801e94 <_fseek_r+0xe8>
  801e74:	2081000c 	andi	r2,r4,1024
  801e78:	10001b1e 	bne	r2,zero,801ee8 <_fseek_r+0x13c>
  801e7c:	00802034 	movhi	r2,128
  801e80:	108ffc04 	addi	r2,r2,16368
  801e84:	a8800926 	beq	r21,r2,801eac <_fseek_r+0x100>
  801e88:	8080030b 	ldhu	r2,12(r16)
  801e8c:	10820014 	ori	r2,r2,2048
  801e90:	8080030d 	sth	r2,12(r16)
  801e94:	9009883a 	mov	r4,r18
  801e98:	800b883a 	mov	r5,r16
  801e9c:	08011540 	call	801154 <_fflush_r>
  801ea0:	1000a326 	beq	r2,zero,802130 <_fseek_r+0x384>
  801ea4:	013fffc4 	movi	r4,-1
  801ea8:	003fdf06 	br	801e28 <_fseek_r+0x7c>
  801eac:	8140038f 	ldh	r5,14(r16)
  801eb0:	283ff516 	blt	r5,zero,801e88 <_fseek_r+0xdc>
  801eb4:	9009883a 	mov	r4,r18
  801eb8:	d80d883a 	mov	r6,sp
  801ebc:	080220c0 	call	80220c <_fstat_r>
  801ec0:	103ff11e 	bne	r2,zero,801e88 <_fseek_r+0xdc>
  801ec4:	d8800117 	ldw	r2,4(sp)
  801ec8:	00e00014 	movui	r3,32768
  801ecc:	10bc000c 	andi	r2,r2,61440
  801ed0:	10ffed1e 	bne	r2,r3,801e88 <_fseek_r+0xdc>
  801ed4:	80c0030b 	ldhu	r3,12(r16)
  801ed8:	00810004 	movi	r2,1024
  801edc:	80801315 	stw	r2,76(r16)
  801ee0:	1886b03a 	or	r3,r3,r2
  801ee4:	80c0030d 	sth	r3,12(r16)
  801ee8:	9800701e 	bne	r19,zero,8020ac <_fseek_r+0x300>
  801eec:	b029883a 	mov	r20,r22
  801ef0:	b804c03a 	cmpne	r2,r23,zero
  801ef4:	10003f1e 	bne	r2,zero,801ff4 <_fseek_r+0x248>
  801ef8:	8100030b 	ldhu	r4,12(r16)
  801efc:	2084000c 	andi	r2,r4,4096
  801f00:	1000a126 	beq	r2,zero,802188 <_fseek_r+0x3dc>
  801f04:	81801417 	ldw	r6,80(r16)
  801f08:	80c00117 	ldw	r3,4(r16)
  801f0c:	81400c17 	ldw	r5,48(r16)
  801f10:	30e3c83a 	sub	r17,r6,r3
  801f14:	28008026 	beq	r5,zero,802118 <_fseek_r+0x36c>
  801f18:	81c00f17 	ldw	r7,60(r16)
  801f1c:	89e3c83a 	sub	r17,r17,r7
  801f20:	80800e17 	ldw	r2,56(r16)
  801f24:	81800417 	ldw	r6,16(r16)
  801f28:	88c7883a 	add	r3,r17,r3
  801f2c:	1185c83a 	sub	r2,r2,r6
  801f30:	11cf883a 	add	r7,r2,r7
  801f34:	1887c83a 	sub	r3,r3,r2
  801f38:	2088000c 	andi	r2,r4,8192
  801f3c:	10003e1e 	bne	r2,zero,802038 <_fseek_r+0x28c>
  801f40:	a0c03d16 	blt	r20,r3,802038 <_fseek_r+0x28c>
  801f44:	38c5883a 	add	r2,r7,r3
  801f48:	a0803b2e 	bgeu	r20,r2,802038 <_fseek_r+0x28c>
  801f4c:	a0c5c83a 	sub	r2,r20,r3
  801f50:	3887c83a 	sub	r3,r7,r2
  801f54:	3085883a 	add	r2,r6,r2
  801f58:	80800015 	stw	r2,0(r16)
  801f5c:	80c00115 	stw	r3,4(r16)
  801f60:	28000526 	beq	r5,zero,801f78 <_fseek_r+0x1cc>
  801f64:	80801004 	addi	r2,r16,64
  801f68:	28800226 	beq	r5,r2,801f74 <_fseek_r+0x1c8>
  801f6c:	9009883a 	mov	r4,r18
  801f70:	0801a980 	call	801a98 <_free_r>
  801f74:	80000c15 	stw	zero,48(r16)
  801f78:	8080030b 	ldhu	r2,12(r16)
  801f7c:	0009883a 	mov	r4,zero
  801f80:	10bff7cc 	andi	r2,r2,65503
  801f84:	8080030d 	sth	r2,12(r16)
  801f88:	003fa706 	br	801e28 <_fseek_r+0x7c>
  801f8c:	9009883a 	mov	r4,r18
  801f90:	800b883a 	mov	r5,r16
  801f94:	08011540 	call	801154 <_fflush_r>
  801f98:	8100030b 	ldhu	r4,12(r16)
  801f9c:	2084000c 	andi	r2,r4,4096
  801fa0:	10008726 	beq	r2,zero,8021c0 <_fseek_r+0x414>
  801fa4:	84401417 	ldw	r17,80(r16)
  801fa8:	2080010c 	andi	r2,r4,4
  801fac:	1000171e 	bne	r2,zero,80200c <_fseek_r+0x260>
  801fb0:	2080020c 	andi	r2,r4,8
  801fb4:	10003b26 	beq	r2,zero,8020a4 <_fseek_r+0x2f8>
  801fb8:	80800017 	ldw	r2,0(r16)
  801fbc:	10003926 	beq	r2,zero,8020a4 <_fseek_r+0x2f8>
  801fc0:	81800417 	ldw	r6,16(r16)
  801fc4:	1185c83a 	sub	r2,r2,r6
  801fc8:	88a3883a 	add	r17,r17,r2
  801fcc:	00001606 	br	802028 <_fseek_r+0x27c>
  801fd0:	08015140 	call	801514 <__sinit>
  801fd4:	8080030b 	ldhu	r2,12(r16)
  801fd8:	00c04204 	movi	r3,264
  801fdc:	1080420c 	andi	r2,r2,264
  801fe0:	10ff871e 	bne	r2,r3,801e00 <_fseek_r+0x54>
  801fe4:	9009883a 	mov	r4,r18
  801fe8:	800b883a 	mov	r5,r16
  801fec:	08011540 	call	801154 <_fflush_r>
  801ff0:	003f8306 	br	801e00 <_fseek_r+0x54>
  801ff4:	81400c17 	ldw	r5,48(r16)
  801ff8:	28004526 	beq	r5,zero,802110 <_fseek_r+0x364>
  801ffc:	8100030b 	ldhu	r4,12(r16)
  802000:	80c00117 	ldw	r3,4(r16)
  802004:	81c00f17 	ldw	r7,60(r16)
  802008:	003fc506 	br	801f20 <_fseek_r+0x174>
  80200c:	80c00117 	ldw	r3,4(r16)
  802010:	80800c17 	ldw	r2,48(r16)
  802014:	88e3c83a 	sub	r17,r17,r3
  802018:	10002226 	beq	r2,zero,8020a4 <_fseek_r+0x2f8>
  80201c:	81c00f17 	ldw	r7,60(r16)
  802020:	81800417 	ldw	r6,16(r16)
  802024:	89e3c83a 	sub	r17,r17,r7
  802028:	b46d883a 	add	r22,r22,r17
  80202c:	0027883a 	mov	r19,zero
  802030:	05c00044 	movi	r23,1
  802034:	003f8b06 	br	801e64 <_fseek_r+0xb8>
  802038:	80801317 	ldw	r2,76(r16)
  80203c:	81400717 	ldw	r5,28(r16)
  802040:	9009883a 	mov	r4,r18
  802044:	0085c83a 	sub	r2,zero,r2
  802048:	a0a2703a 	and	r17,r20,r2
  80204c:	880d883a 	mov	r6,r17
  802050:	000f883a 	mov	r7,zero
  802054:	a83ee83a 	callr	r21
  802058:	00ffffc4 	movi	r3,-1
  80205c:	10ff8d26 	beq	r2,r3,801e94 <_fseek_r+0xe8>
  802060:	80800417 	ldw	r2,16(r16)
  802064:	81400c17 	ldw	r5,48(r16)
  802068:	80000115 	stw	zero,4(r16)
  80206c:	80800015 	stw	r2,0(r16)
  802070:	28000526 	beq	r5,zero,802088 <_fseek_r+0x2dc>
  802074:	80801004 	addi	r2,r16,64
  802078:	28800226 	beq	r5,r2,802084 <_fseek_r+0x2d8>
  80207c:	9009883a 	mov	r4,r18
  802080:	0801a980 	call	801a98 <_free_r>
  802084:	80000c15 	stw	zero,48(r16)
  802088:	8080030b 	ldhu	r2,12(r16)
  80208c:	a463c83a 	sub	r17,r20,r17
  802090:	10bff7cc 	andi	r2,r2,65503
  802094:	8080030d 	sth	r2,12(r16)
  802098:	88000c1e 	bne	r17,zero,8020cc <_fseek_r+0x320>
  80209c:	0009883a 	mov	r4,zero
  8020a0:	003f6106 	br	801e28 <_fseek_r+0x7c>
  8020a4:	81800417 	ldw	r6,16(r16)
  8020a8:	003fdf06 	br	802028 <_fseek_r+0x27c>
  8020ac:	8140038f 	ldh	r5,14(r16)
  8020b0:	9009883a 	mov	r4,r18
  8020b4:	d80d883a 	mov	r6,sp
  8020b8:	080220c0 	call	80220c <_fstat_r>
  8020bc:	103f751e 	bne	r2,zero,801e94 <_fseek_r+0xe8>
  8020c0:	d8800417 	ldw	r2,16(sp)
  8020c4:	b0a9883a 	add	r20,r22,r2
  8020c8:	003f8906 	br	801ef0 <_fseek_r+0x144>
  8020cc:	9009883a 	mov	r4,r18
  8020d0:	800b883a 	mov	r5,r16
  8020d4:	0803b500 	call	803b50 <__srefill_r>
  8020d8:	103f6e1e 	bne	r2,zero,801e94 <_fseek_r+0xe8>
  8020dc:	80c00117 	ldw	r3,4(r16)
  8020e0:	1c7f6c36 	bltu	r3,r17,801e94 <_fseek_r+0xe8>
  8020e4:	80800017 	ldw	r2,0(r16)
  8020e8:	1c47c83a 	sub	r3,r3,r17
  8020ec:	0009883a 	mov	r4,zero
  8020f0:	1445883a 	add	r2,r2,r17
  8020f4:	80c00115 	stw	r3,4(r16)
  8020f8:	80800015 	stw	r2,0(r16)
  8020fc:	003f4a06 	br	801e28 <_fseek_r+0x7c>
  802100:	9009883a 	mov	r4,r18
  802104:	800b883a 	mov	r5,r16
  802108:	080289c0 	call	80289c <__smakebuf_r>
  80210c:	003f5606 	br	801e68 <_fseek_r+0xbc>
  802110:	8100030b 	ldhu	r4,12(r16)
  802114:	80c00117 	ldw	r3,4(r16)
  802118:	80800017 	ldw	r2,0(r16)
  80211c:	81800417 	ldw	r6,16(r16)
  802120:	1185c83a 	sub	r2,r2,r6
  802124:	10cf883a 	add	r7,r2,r3
  802128:	8887c83a 	sub	r3,r17,r2
  80212c:	003f8206 	br	801f38 <_fseek_r+0x18c>
  802130:	81400717 	ldw	r5,28(r16)
  802134:	b00d883a 	mov	r6,r22
  802138:	980f883a 	mov	r7,r19
  80213c:	9009883a 	mov	r4,r18
  802140:	a83ee83a 	callr	r21
  802144:	00ffffc4 	movi	r3,-1
  802148:	10ff5626 	beq	r2,r3,801ea4 <_fseek_r+0xf8>
  80214c:	81400c17 	ldw	r5,48(r16)
  802150:	28000526 	beq	r5,zero,802168 <_fseek_r+0x3bc>
  802154:	80801004 	addi	r2,r16,64
  802158:	28800226 	beq	r5,r2,802164 <_fseek_r+0x3b8>
  80215c:	9009883a 	mov	r4,r18
  802160:	0801a980 	call	801a98 <_free_r>
  802164:	80000c15 	stw	zero,48(r16)
  802168:	8080030b 	ldhu	r2,12(r16)
  80216c:	80c00417 	ldw	r3,16(r16)
  802170:	0009883a 	mov	r4,zero
  802174:	10bdf7cc 	andi	r2,r2,63455
  802178:	8080030d 	sth	r2,12(r16)
  80217c:	80c00015 	stw	r3,0(r16)
  802180:	80000115 	stw	zero,4(r16)
  802184:	003f2806 	br	801e28 <_fseek_r+0x7c>
  802188:	81400717 	ldw	r5,28(r16)
  80218c:	000d883a 	mov	r6,zero
  802190:	9009883a 	mov	r4,r18
  802194:	01c00044 	movi	r7,1
  802198:	a83ee83a 	callr	r21
  80219c:	100d883a 	mov	r6,r2
  8021a0:	00bfffc4 	movi	r2,-1
  8021a4:	30bf3b26 	beq	r6,r2,801e94 <_fseek_r+0xe8>
  8021a8:	8100030b 	ldhu	r4,12(r16)
  8021ac:	003f5606 	br	801f08 <_fseek_r+0x15c>
  8021b0:	00800744 	movi	r2,29
  8021b4:	013fffc4 	movi	r4,-1
  8021b8:	90800015 	stw	r2,0(r18)
  8021bc:	003f1a06 	br	801e28 <_fseek_r+0x7c>
  8021c0:	81400717 	ldw	r5,28(r16)
  8021c4:	980f883a 	mov	r7,r19
  8021c8:	9009883a 	mov	r4,r18
  8021cc:	000d883a 	mov	r6,zero
  8021d0:	a83ee83a 	callr	r21
  8021d4:	1023883a 	mov	r17,r2
  8021d8:	00bfffc4 	movi	r2,-1
  8021dc:	88bf3126 	beq	r17,r2,801ea4 <_fseek_r+0xf8>
  8021e0:	8100030b 	ldhu	r4,12(r16)
  8021e4:	003f7006 	br	801fa8 <_fseek_r+0x1fc>

008021e8 <fseek>:
  8021e8:	00802074 	movhi	r2,129
  8021ec:	109bd004 	addi	r2,r2,28480
  8021f0:	2013883a 	mov	r9,r4
  8021f4:	11000017 	ldw	r4,0(r2)
  8021f8:	2805883a 	mov	r2,r5
  8021fc:	300f883a 	mov	r7,r6
  802200:	480b883a 	mov	r5,r9
  802204:	100d883a 	mov	r6,r2
  802208:	0801dac1 	jmpi	801dac <_fseek_r>

0080220c <_fstat_r>:
  80220c:	defffd04 	addi	sp,sp,-12
  802210:	dc000015 	stw	r16,0(sp)
  802214:	040020b4 	movhi	r16,130
  802218:	84232604 	addi	r16,r16,-29544
  80221c:	dc400115 	stw	r17,4(sp)
  802220:	80000015 	stw	zero,0(r16)
  802224:	2023883a 	mov	r17,r4
  802228:	2809883a 	mov	r4,r5
  80222c:	300b883a 	mov	r5,r6
  802230:	dfc00215 	stw	ra,8(sp)
  802234:	08107640 	call	810764 <fstat>
  802238:	1007883a 	mov	r3,r2
  80223c:	00bfffc4 	movi	r2,-1
  802240:	18800626 	beq	r3,r2,80225c <_fstat_r+0x50>
  802244:	1805883a 	mov	r2,r3
  802248:	dfc00217 	ldw	ra,8(sp)
  80224c:	dc400117 	ldw	r17,4(sp)
  802250:	dc000017 	ldw	r16,0(sp)
  802254:	dec00304 	addi	sp,sp,12
  802258:	f800283a 	ret
  80225c:	80800017 	ldw	r2,0(r16)
  802260:	103ff826 	beq	r2,zero,802244 <_fstat_r+0x38>
  802264:	88800015 	stw	r2,0(r17)
  802268:	1805883a 	mov	r2,r3
  80226c:	dfc00217 	ldw	ra,8(sp)
  802270:	dc400117 	ldw	r17,4(sp)
  802274:	dc000017 	ldw	r16,0(sp)
  802278:	dec00304 	addi	sp,sp,12
  80227c:	f800283a 	ret

00802280 <__sfvwrite_r>:
  802280:	30800217 	ldw	r2,8(r6)
  802284:	defff504 	addi	sp,sp,-44
  802288:	df000915 	stw	fp,36(sp)
  80228c:	dd800715 	stw	r22,28(sp)
  802290:	dc800315 	stw	r18,12(sp)
  802294:	dfc00a15 	stw	ra,40(sp)
  802298:	ddc00815 	stw	r23,32(sp)
  80229c:	dd400615 	stw	r21,24(sp)
  8022a0:	dd000515 	stw	r20,20(sp)
  8022a4:	dcc00415 	stw	r19,16(sp)
  8022a8:	dc400215 	stw	r17,8(sp)
  8022ac:	dc000115 	stw	r16,4(sp)
  8022b0:	302d883a 	mov	r22,r6
  8022b4:	2039883a 	mov	fp,r4
  8022b8:	2825883a 	mov	r18,r5
  8022bc:	10001c26 	beq	r2,zero,802330 <__sfvwrite_r+0xb0>
  8022c0:	29c0030b 	ldhu	r7,12(r5)
  8022c4:	3880020c 	andi	r2,r7,8
  8022c8:	10002726 	beq	r2,zero,802368 <__sfvwrite_r+0xe8>
  8022cc:	28800417 	ldw	r2,16(r5)
  8022d0:	10002526 	beq	r2,zero,802368 <__sfvwrite_r+0xe8>
  8022d4:	3880008c 	andi	r2,r7,2
  8022d8:	b5400017 	ldw	r21,0(r22)
  8022dc:	10002826 	beq	r2,zero,802380 <__sfvwrite_r+0x100>
  8022e0:	0021883a 	mov	r16,zero
  8022e4:	0023883a 	mov	r17,zero
  8022e8:	880d883a 	mov	r6,r17
  8022ec:	e009883a 	mov	r4,fp
  8022f0:	00810004 	movi	r2,1024
  8022f4:	80006e26 	beq	r16,zero,8024b0 <__sfvwrite_r+0x230>
  8022f8:	800f883a 	mov	r7,r16
  8022fc:	91400717 	ldw	r5,28(r18)
  802300:	1400012e 	bgeu	r2,r16,802308 <__sfvwrite_r+0x88>
  802304:	100f883a 	mov	r7,r2
  802308:	90c00917 	ldw	r3,36(r18)
  80230c:	183ee83a 	callr	r3
  802310:	1007883a 	mov	r3,r2
  802314:	80a1c83a 	sub	r16,r16,r2
  802318:	88a3883a 	add	r17,r17,r2
  80231c:	00806d0e 	bge	zero,r2,8024d4 <__sfvwrite_r+0x254>
  802320:	b0800217 	ldw	r2,8(r22)
  802324:	10c5c83a 	sub	r2,r2,r3
  802328:	b0800215 	stw	r2,8(r22)
  80232c:	103fee1e 	bne	r2,zero,8022e8 <__sfvwrite_r+0x68>
  802330:	0009883a 	mov	r4,zero
  802334:	2005883a 	mov	r2,r4
  802338:	dfc00a17 	ldw	ra,40(sp)
  80233c:	df000917 	ldw	fp,36(sp)
  802340:	ddc00817 	ldw	r23,32(sp)
  802344:	dd800717 	ldw	r22,28(sp)
  802348:	dd400617 	ldw	r21,24(sp)
  80234c:	dd000517 	ldw	r20,20(sp)
  802350:	dcc00417 	ldw	r19,16(sp)
  802354:	dc800317 	ldw	r18,12(sp)
  802358:	dc400217 	ldw	r17,8(sp)
  80235c:	dc000117 	ldw	r16,4(sp)
  802360:	dec00b04 	addi	sp,sp,44
  802364:	f800283a 	ret
  802368:	08078c80 	call	8078c8 <__swsetup_r>
  80236c:	1000e41e 	bne	r2,zero,802700 <__sfvwrite_r+0x480>
  802370:	91c0030b 	ldhu	r7,12(r18)
  802374:	b5400017 	ldw	r21,0(r22)
  802378:	3880008c 	andi	r2,r7,2
  80237c:	103fd81e 	bne	r2,zero,8022e0 <__sfvwrite_r+0x60>
  802380:	3880004c 	andi	r2,r7,1
  802384:	1005003a 	cmpeq	r2,r2,zero
  802388:	10005726 	beq	r2,zero,8024e8 <__sfvwrite_r+0x268>
  80238c:	0029883a 	mov	r20,zero
  802390:	002f883a 	mov	r23,zero
  802394:	a0004226 	beq	r20,zero,8024a0 <__sfvwrite_r+0x220>
  802398:	3880800c 	andi	r2,r7,512
  80239c:	94000217 	ldw	r16,8(r18)
  8023a0:	10008b26 	beq	r2,zero,8025d0 <__sfvwrite_r+0x350>
  8023a4:	800d883a 	mov	r6,r16
  8023a8:	a400a536 	bltu	r20,r16,802640 <__sfvwrite_r+0x3c0>
  8023ac:	3881200c 	andi	r2,r7,1152
  8023b0:	10002726 	beq	r2,zero,802450 <__sfvwrite_r+0x1d0>
  8023b4:	90800517 	ldw	r2,20(r18)
  8023b8:	92000417 	ldw	r8,16(r18)
  8023bc:	91400017 	ldw	r5,0(r18)
  8023c0:	1087883a 	add	r3,r2,r2
  8023c4:	1887883a 	add	r3,r3,r2
  8023c8:	1808d7fa 	srli	r4,r3,31
  8023cc:	2a21c83a 	sub	r16,r5,r8
  8023d0:	80800044 	addi	r2,r16,1
  8023d4:	20c9883a 	add	r4,r4,r3
  8023d8:	2027d07a 	srai	r19,r4,1
  8023dc:	a085883a 	add	r2,r20,r2
  8023e0:	980d883a 	mov	r6,r19
  8023e4:	9880022e 	bgeu	r19,r2,8023f0 <__sfvwrite_r+0x170>
  8023e8:	1027883a 	mov	r19,r2
  8023ec:	100d883a 	mov	r6,r2
  8023f0:	3881000c 	andi	r2,r7,1024
  8023f4:	1000b826 	beq	r2,zero,8026d8 <__sfvwrite_r+0x458>
  8023f8:	300b883a 	mov	r5,r6
  8023fc:	e009883a 	mov	r4,fp
  802400:	0802a300 	call	802a30 <_malloc_r>
  802404:	10003126 	beq	r2,zero,8024cc <__sfvwrite_r+0x24c>
  802408:	91400417 	ldw	r5,16(r18)
  80240c:	1009883a 	mov	r4,r2
  802410:	800d883a 	mov	r6,r16
  802414:	1023883a 	mov	r17,r2
  802418:	08032540 	call	803254 <memcpy>
  80241c:	90c0030b 	ldhu	r3,12(r18)
  802420:	00beffc4 	movi	r2,-1025
  802424:	1886703a 	and	r3,r3,r2
  802428:	18c02014 	ori	r3,r3,128
  80242c:	90c0030d 	sth	r3,12(r18)
  802430:	9c07c83a 	sub	r3,r19,r16
  802434:	8c05883a 	add	r2,r17,r16
  802438:	a00d883a 	mov	r6,r20
  80243c:	a021883a 	mov	r16,r20
  802440:	90800015 	stw	r2,0(r18)
  802444:	90c00215 	stw	r3,8(r18)
  802448:	94400415 	stw	r17,16(r18)
  80244c:	94c00515 	stw	r19,20(r18)
  802450:	91000017 	ldw	r4,0(r18)
  802454:	b80b883a 	mov	r5,r23
  802458:	a023883a 	mov	r17,r20
  80245c:	08032f40 	call	8032f4 <memmove>
  802460:	90c00217 	ldw	r3,8(r18)
  802464:	90800017 	ldw	r2,0(r18)
  802468:	a027883a 	mov	r19,r20
  80246c:	1c07c83a 	sub	r3,r3,r16
  802470:	1405883a 	add	r2,r2,r16
  802474:	90c00215 	stw	r3,8(r18)
  802478:	a021883a 	mov	r16,r20
  80247c:	90800015 	stw	r2,0(r18)
  802480:	b0800217 	ldw	r2,8(r22)
  802484:	1405c83a 	sub	r2,r2,r16
  802488:	b0800215 	stw	r2,8(r22)
  80248c:	103fa826 	beq	r2,zero,802330 <__sfvwrite_r+0xb0>
  802490:	a469c83a 	sub	r20,r20,r17
  802494:	91c0030b 	ldhu	r7,12(r18)
  802498:	bcef883a 	add	r23,r23,r19
  80249c:	a03fbe1e 	bne	r20,zero,802398 <__sfvwrite_r+0x118>
  8024a0:	adc00017 	ldw	r23,0(r21)
  8024a4:	ad000117 	ldw	r20,4(r21)
  8024a8:	ad400204 	addi	r21,r21,8
  8024ac:	003fb906 	br	802394 <__sfvwrite_r+0x114>
  8024b0:	ac400017 	ldw	r17,0(r21)
  8024b4:	ac000117 	ldw	r16,4(r21)
  8024b8:	ad400204 	addi	r21,r21,8
  8024bc:	003f8a06 	br	8022e8 <__sfvwrite_r+0x68>
  8024c0:	91400417 	ldw	r5,16(r18)
  8024c4:	e009883a 	mov	r4,fp
  8024c8:	0801a980 	call	801a98 <_free_r>
  8024cc:	00800304 	movi	r2,12
  8024d0:	e0800015 	stw	r2,0(fp)
  8024d4:	9080030b 	ldhu	r2,12(r18)
  8024d8:	013fffc4 	movi	r4,-1
  8024dc:	10801014 	ori	r2,r2,64
  8024e0:	9080030d 	sth	r2,12(r18)
  8024e4:	003f9306 	br	802334 <__sfvwrite_r+0xb4>
  8024e8:	0027883a 	mov	r19,zero
  8024ec:	002f883a 	mov	r23,zero
  8024f0:	d8000015 	stw	zero,0(sp)
  8024f4:	0029883a 	mov	r20,zero
  8024f8:	98001e26 	beq	r19,zero,802574 <__sfvwrite_r+0x2f4>
  8024fc:	d8c00017 	ldw	r3,0(sp)
  802500:	1804c03a 	cmpne	r2,r3,zero
  802504:	10005e26 	beq	r2,zero,802680 <__sfvwrite_r+0x400>
  802508:	9821883a 	mov	r16,r19
  80250c:	a4c0012e 	bgeu	r20,r19,802514 <__sfvwrite_r+0x294>
  802510:	a021883a 	mov	r16,r20
  802514:	91000017 	ldw	r4,0(r18)
  802518:	90800417 	ldw	r2,16(r18)
  80251c:	91800217 	ldw	r6,8(r18)
  802520:	91c00517 	ldw	r7,20(r18)
  802524:	1100022e 	bgeu	r2,r4,802530 <__sfvwrite_r+0x2b0>
  802528:	31e3883a 	add	r17,r6,r7
  80252c:	8c001616 	blt	r17,r16,802588 <__sfvwrite_r+0x308>
  802530:	81c03816 	blt	r16,r7,802614 <__sfvwrite_r+0x394>
  802534:	90c00917 	ldw	r3,36(r18)
  802538:	91400717 	ldw	r5,28(r18)
  80253c:	e009883a 	mov	r4,fp
  802540:	b80d883a 	mov	r6,r23
  802544:	183ee83a 	callr	r3
  802548:	1023883a 	mov	r17,r2
  80254c:	00bfe10e 	bge	zero,r2,8024d4 <__sfvwrite_r+0x254>
  802550:	a469c83a 	sub	r20,r20,r17
  802554:	a0001826 	beq	r20,zero,8025b8 <__sfvwrite_r+0x338>
  802558:	b0800217 	ldw	r2,8(r22)
  80255c:	1445c83a 	sub	r2,r2,r17
  802560:	b0800215 	stw	r2,8(r22)
  802564:	103f7226 	beq	r2,zero,802330 <__sfvwrite_r+0xb0>
  802568:	9c67c83a 	sub	r19,r19,r17
  80256c:	bc6f883a 	add	r23,r23,r17
  802570:	983fe21e 	bne	r19,zero,8024fc <__sfvwrite_r+0x27c>
  802574:	adc00017 	ldw	r23,0(r21)
  802578:	acc00117 	ldw	r19,4(r21)
  80257c:	ad400204 	addi	r21,r21,8
  802580:	d8000015 	stw	zero,0(sp)
  802584:	003fdc06 	br	8024f8 <__sfvwrite_r+0x278>
  802588:	b80b883a 	mov	r5,r23
  80258c:	880d883a 	mov	r6,r17
  802590:	08032f40 	call	8032f4 <memmove>
  802594:	90c00017 	ldw	r3,0(r18)
  802598:	e009883a 	mov	r4,fp
  80259c:	900b883a 	mov	r5,r18
  8025a0:	1c47883a 	add	r3,r3,r17
  8025a4:	90c00015 	stw	r3,0(r18)
  8025a8:	08011540 	call	801154 <_fflush_r>
  8025ac:	103fc91e 	bne	r2,zero,8024d4 <__sfvwrite_r+0x254>
  8025b0:	a469c83a 	sub	r20,r20,r17
  8025b4:	a03fe81e 	bne	r20,zero,802558 <__sfvwrite_r+0x2d8>
  8025b8:	e009883a 	mov	r4,fp
  8025bc:	900b883a 	mov	r5,r18
  8025c0:	08011540 	call	801154 <_fflush_r>
  8025c4:	103fc31e 	bne	r2,zero,8024d4 <__sfvwrite_r+0x254>
  8025c8:	d8000015 	stw	zero,0(sp)
  8025cc:	003fe206 	br	802558 <__sfvwrite_r+0x2d8>
  8025d0:	91000017 	ldw	r4,0(r18)
  8025d4:	90800417 	ldw	r2,16(r18)
  8025d8:	1100022e 	bgeu	r2,r4,8025e4 <__sfvwrite_r+0x364>
  8025dc:	8023883a 	mov	r17,r16
  8025e0:	85003136 	bltu	r16,r20,8026a8 <__sfvwrite_r+0x428>
  8025e4:	91c00517 	ldw	r7,20(r18)
  8025e8:	a1c01836 	bltu	r20,r7,80264c <__sfvwrite_r+0x3cc>
  8025ec:	90c00917 	ldw	r3,36(r18)
  8025f0:	91400717 	ldw	r5,28(r18)
  8025f4:	e009883a 	mov	r4,fp
  8025f8:	b80d883a 	mov	r6,r23
  8025fc:	183ee83a 	callr	r3
  802600:	1021883a 	mov	r16,r2
  802604:	00bfb30e 	bge	zero,r2,8024d4 <__sfvwrite_r+0x254>
  802608:	1023883a 	mov	r17,r2
  80260c:	1027883a 	mov	r19,r2
  802610:	003f9b06 	br	802480 <__sfvwrite_r+0x200>
  802614:	b80b883a 	mov	r5,r23
  802618:	800d883a 	mov	r6,r16
  80261c:	08032f40 	call	8032f4 <memmove>
  802620:	90c00217 	ldw	r3,8(r18)
  802624:	90800017 	ldw	r2,0(r18)
  802628:	8023883a 	mov	r17,r16
  80262c:	1c07c83a 	sub	r3,r3,r16
  802630:	1405883a 	add	r2,r2,r16
  802634:	90c00215 	stw	r3,8(r18)
  802638:	90800015 	stw	r2,0(r18)
  80263c:	003fc406 	br	802550 <__sfvwrite_r+0x2d0>
  802640:	a00d883a 	mov	r6,r20
  802644:	a021883a 	mov	r16,r20
  802648:	003f8106 	br	802450 <__sfvwrite_r+0x1d0>
  80264c:	b80b883a 	mov	r5,r23
  802650:	a00d883a 	mov	r6,r20
  802654:	08032f40 	call	8032f4 <memmove>
  802658:	90c00217 	ldw	r3,8(r18)
  80265c:	90800017 	ldw	r2,0(r18)
  802660:	a021883a 	mov	r16,r20
  802664:	1d07c83a 	sub	r3,r3,r20
  802668:	1505883a 	add	r2,r2,r20
  80266c:	a023883a 	mov	r17,r20
  802670:	a027883a 	mov	r19,r20
  802674:	90c00215 	stw	r3,8(r18)
  802678:	90800015 	stw	r2,0(r18)
  80267c:	003f8006 	br	802480 <__sfvwrite_r+0x200>
  802680:	b809883a 	mov	r4,r23
  802684:	01400284 	movi	r5,10
  802688:	980d883a 	mov	r6,r19
  80268c:	08031700 	call	803170 <memchr>
  802690:	10001726 	beq	r2,zero,8026f0 <__sfvwrite_r+0x470>
  802694:	15c5c83a 	sub	r2,r2,r23
  802698:	15000044 	addi	r20,r2,1
  80269c:	00800044 	movi	r2,1
  8026a0:	d8800015 	stw	r2,0(sp)
  8026a4:	003f9806 	br	802508 <__sfvwrite_r+0x288>
  8026a8:	b80b883a 	mov	r5,r23
  8026ac:	800d883a 	mov	r6,r16
  8026b0:	08032f40 	call	8032f4 <memmove>
  8026b4:	90c00017 	ldw	r3,0(r18)
  8026b8:	e009883a 	mov	r4,fp
  8026bc:	900b883a 	mov	r5,r18
  8026c0:	1c07883a 	add	r3,r3,r16
  8026c4:	90c00015 	stw	r3,0(r18)
  8026c8:	8027883a 	mov	r19,r16
  8026cc:	08011540 	call	801154 <_fflush_r>
  8026d0:	103f6b26 	beq	r2,zero,802480 <__sfvwrite_r+0x200>
  8026d4:	003f7f06 	br	8024d4 <__sfvwrite_r+0x254>
  8026d8:	400b883a 	mov	r5,r8
  8026dc:	e009883a 	mov	r4,fp
  8026e0:	080355c0 	call	80355c <_realloc_r>
  8026e4:	103f7626 	beq	r2,zero,8024c0 <__sfvwrite_r+0x240>
  8026e8:	1023883a 	mov	r17,r2
  8026ec:	003f5006 	br	802430 <__sfvwrite_r+0x1b0>
  8026f0:	00c00044 	movi	r3,1
  8026f4:	9d000044 	addi	r20,r19,1
  8026f8:	d8c00015 	stw	r3,0(sp)
  8026fc:	003f8206 	br	802508 <__sfvwrite_r+0x288>
  802700:	9080030b 	ldhu	r2,12(r18)
  802704:	00c00244 	movi	r3,9
  802708:	013fffc4 	movi	r4,-1
  80270c:	10801014 	ori	r2,r2,64
  802710:	9080030d 	sth	r2,12(r18)
  802714:	e0c00015 	stw	r3,0(fp)
  802718:	003f0606 	br	802334 <__sfvwrite_r+0xb4>

0080271c <_fwalk_reent>:
  80271c:	defff704 	addi	sp,sp,-36
  802720:	dcc00315 	stw	r19,12(sp)
  802724:	24c0b804 	addi	r19,r4,736
  802728:	dd800615 	stw	r22,24(sp)
  80272c:	dd400515 	stw	r21,20(sp)
  802730:	dfc00815 	stw	ra,32(sp)
  802734:	ddc00715 	stw	r23,28(sp)
  802738:	dd000415 	stw	r20,16(sp)
  80273c:	dc800215 	stw	r18,8(sp)
  802740:	dc400115 	stw	r17,4(sp)
  802744:	dc000015 	stw	r16,0(sp)
  802748:	202b883a 	mov	r21,r4
  80274c:	282d883a 	mov	r22,r5
  802750:	08015040 	call	801504 <__sfp_lock_acquire>
  802754:	98002126 	beq	r19,zero,8027dc <_fwalk_reent+0xc0>
  802758:	002f883a 	mov	r23,zero
  80275c:	9c800117 	ldw	r18,4(r19)
  802760:	9c000217 	ldw	r16,8(r19)
  802764:	90bfffc4 	addi	r2,r18,-1
  802768:	10000d16 	blt	r2,zero,8027a0 <_fwalk_reent+0x84>
  80276c:	0023883a 	mov	r17,zero
  802770:	053fffc4 	movi	r20,-1
  802774:	8080030f 	ldh	r2,12(r16)
  802778:	8c400044 	addi	r17,r17,1
  80277c:	10000626 	beq	r2,zero,802798 <_fwalk_reent+0x7c>
  802780:	8080038f 	ldh	r2,14(r16)
  802784:	800b883a 	mov	r5,r16
  802788:	a809883a 	mov	r4,r21
  80278c:	15000226 	beq	r2,r20,802798 <_fwalk_reent+0x7c>
  802790:	b03ee83a 	callr	r22
  802794:	b8aeb03a 	or	r23,r23,r2
  802798:	84001704 	addi	r16,r16,92
  80279c:	947ff51e 	bne	r18,r17,802774 <_fwalk_reent+0x58>
  8027a0:	9cc00017 	ldw	r19,0(r19)
  8027a4:	983fed1e 	bne	r19,zero,80275c <_fwalk_reent+0x40>
  8027a8:	08015080 	call	801508 <__sfp_lock_release>
  8027ac:	b805883a 	mov	r2,r23
  8027b0:	dfc00817 	ldw	ra,32(sp)
  8027b4:	ddc00717 	ldw	r23,28(sp)
  8027b8:	dd800617 	ldw	r22,24(sp)
  8027bc:	dd400517 	ldw	r21,20(sp)
  8027c0:	dd000417 	ldw	r20,16(sp)
  8027c4:	dcc00317 	ldw	r19,12(sp)
  8027c8:	dc800217 	ldw	r18,8(sp)
  8027cc:	dc400117 	ldw	r17,4(sp)
  8027d0:	dc000017 	ldw	r16,0(sp)
  8027d4:	dec00904 	addi	sp,sp,36
  8027d8:	f800283a 	ret
  8027dc:	002f883a 	mov	r23,zero
  8027e0:	003ff106 	br	8027a8 <_fwalk_reent+0x8c>

008027e4 <_fwalk>:
  8027e4:	defff804 	addi	sp,sp,-32
  8027e8:	dcc00315 	stw	r19,12(sp)
  8027ec:	24c0b804 	addi	r19,r4,736
  8027f0:	dd400515 	stw	r21,20(sp)
  8027f4:	dfc00715 	stw	ra,28(sp)
  8027f8:	dd800615 	stw	r22,24(sp)
  8027fc:	dd000415 	stw	r20,16(sp)
  802800:	dc800215 	stw	r18,8(sp)
  802804:	dc400115 	stw	r17,4(sp)
  802808:	dc000015 	stw	r16,0(sp)
  80280c:	282b883a 	mov	r21,r5
  802810:	08015040 	call	801504 <__sfp_lock_acquire>
  802814:	98001f26 	beq	r19,zero,802894 <_fwalk+0xb0>
  802818:	002d883a 	mov	r22,zero
  80281c:	9c800117 	ldw	r18,4(r19)
  802820:	9c000217 	ldw	r16,8(r19)
  802824:	90bfffc4 	addi	r2,r18,-1
  802828:	10000c16 	blt	r2,zero,80285c <_fwalk+0x78>
  80282c:	0023883a 	mov	r17,zero
  802830:	053fffc4 	movi	r20,-1
  802834:	8080030f 	ldh	r2,12(r16)
  802838:	8c400044 	addi	r17,r17,1
  80283c:	10000526 	beq	r2,zero,802854 <_fwalk+0x70>
  802840:	8080038f 	ldh	r2,14(r16)
  802844:	8009883a 	mov	r4,r16
  802848:	15000226 	beq	r2,r20,802854 <_fwalk+0x70>
  80284c:	a83ee83a 	callr	r21
  802850:	b0acb03a 	or	r22,r22,r2
  802854:	84001704 	addi	r16,r16,92
  802858:	947ff61e 	bne	r18,r17,802834 <_fwalk+0x50>
  80285c:	9cc00017 	ldw	r19,0(r19)
  802860:	983fee1e 	bne	r19,zero,80281c <_fwalk+0x38>
  802864:	08015080 	call	801508 <__sfp_lock_release>
  802868:	b005883a 	mov	r2,r22
  80286c:	dfc00717 	ldw	ra,28(sp)
  802870:	dd800617 	ldw	r22,24(sp)
  802874:	dd400517 	ldw	r21,20(sp)
  802878:	dd000417 	ldw	r20,16(sp)
  80287c:	dcc00317 	ldw	r19,12(sp)
  802880:	dc800217 	ldw	r18,8(sp)
  802884:	dc400117 	ldw	r17,4(sp)
  802888:	dc000017 	ldw	r16,0(sp)
  80288c:	dec00804 	addi	sp,sp,32
  802890:	f800283a 	ret
  802894:	002d883a 	mov	r22,zero
  802898:	003ff206 	br	802864 <_fwalk+0x80>

0080289c <__smakebuf_r>:
  80289c:	2880030b 	ldhu	r2,12(r5)
  8028a0:	deffed04 	addi	sp,sp,-76
  8028a4:	dc401015 	stw	r17,64(sp)
  8028a8:	1080008c 	andi	r2,r2,2
  8028ac:	dc000f15 	stw	r16,60(sp)
  8028b0:	dfc01215 	stw	ra,72(sp)
  8028b4:	dc801115 	stw	r18,68(sp)
  8028b8:	2821883a 	mov	r16,r5
  8028bc:	2023883a 	mov	r17,r4
  8028c0:	10000b26 	beq	r2,zero,8028f0 <__smakebuf_r+0x54>
  8028c4:	28c010c4 	addi	r3,r5,67
  8028c8:	00800044 	movi	r2,1
  8028cc:	28800515 	stw	r2,20(r5)
  8028d0:	28c00415 	stw	r3,16(r5)
  8028d4:	28c00015 	stw	r3,0(r5)
  8028d8:	dfc01217 	ldw	ra,72(sp)
  8028dc:	dc801117 	ldw	r18,68(sp)
  8028e0:	dc401017 	ldw	r17,64(sp)
  8028e4:	dc000f17 	ldw	r16,60(sp)
  8028e8:	dec01304 	addi	sp,sp,76
  8028ec:	f800283a 	ret
  8028f0:	2940038f 	ldh	r5,14(r5)
  8028f4:	28002116 	blt	r5,zero,80297c <__smakebuf_r+0xe0>
  8028f8:	d80d883a 	mov	r6,sp
  8028fc:	080220c0 	call	80220c <_fstat_r>
  802900:	10001e16 	blt	r2,zero,80297c <__smakebuf_r+0xe0>
  802904:	d8800117 	ldw	r2,4(sp)
  802908:	00e00014 	movui	r3,32768
  80290c:	113c000c 	andi	r4,r2,61440
  802910:	20c03126 	beq	r4,r3,8029d8 <__smakebuf_r+0x13c>
  802914:	8080030b 	ldhu	r2,12(r16)
  802918:	00c80004 	movi	r3,8192
  80291c:	10820014 	ori	r2,r2,2048
  802920:	8080030d 	sth	r2,12(r16)
  802924:	20c01e26 	beq	r4,r3,8029a0 <__smakebuf_r+0x104>
  802928:	04810004 	movi	r18,1024
  80292c:	8809883a 	mov	r4,r17
  802930:	900b883a 	mov	r5,r18
  802934:	0802a300 	call	802a30 <_malloc_r>
  802938:	1009883a 	mov	r4,r2
  80293c:	10003126 	beq	r2,zero,802a04 <__smakebuf_r+0x168>
  802940:	80c0030b 	ldhu	r3,12(r16)
  802944:	00802034 	movhi	r2,128
  802948:	10857e04 	addi	r2,r2,5624
  80294c:	88800f15 	stw	r2,60(r17)
  802950:	18c02014 	ori	r3,r3,128
  802954:	84800515 	stw	r18,20(r16)
  802958:	80c0030d 	sth	r3,12(r16)
  80295c:	81000415 	stw	r4,16(r16)
  802960:	81000015 	stw	r4,0(r16)
  802964:	dfc01217 	ldw	ra,72(sp)
  802968:	dc801117 	ldw	r18,68(sp)
  80296c:	dc401017 	ldw	r17,64(sp)
  802970:	dc000f17 	ldw	r16,60(sp)
  802974:	dec01304 	addi	sp,sp,76
  802978:	f800283a 	ret
  80297c:	80c0030b 	ldhu	r3,12(r16)
  802980:	1880200c 	andi	r2,r3,128
  802984:	10000426 	beq	r2,zero,802998 <__smakebuf_r+0xfc>
  802988:	04801004 	movi	r18,64
  80298c:	18820014 	ori	r2,r3,2048
  802990:	8080030d 	sth	r2,12(r16)
  802994:	003fe506 	br	80292c <__smakebuf_r+0x90>
  802998:	04810004 	movi	r18,1024
  80299c:	003ffb06 	br	80298c <__smakebuf_r+0xf0>
  8029a0:	8140038f 	ldh	r5,14(r16)
  8029a4:	8809883a 	mov	r4,r17
  8029a8:	080951c0 	call	80951c <_isatty_r>
  8029ac:	103fde26 	beq	r2,zero,802928 <__smakebuf_r+0x8c>
  8029b0:	8080030b 	ldhu	r2,12(r16)
  8029b4:	80c010c4 	addi	r3,r16,67
  8029b8:	04810004 	movi	r18,1024
  8029bc:	10800054 	ori	r2,r2,1
  8029c0:	8080030d 	sth	r2,12(r16)
  8029c4:	00800044 	movi	r2,1
  8029c8:	80c00415 	stw	r3,16(r16)
  8029cc:	80800515 	stw	r2,20(r16)
  8029d0:	80c00015 	stw	r3,0(r16)
  8029d4:	003fd506 	br	80292c <__smakebuf_r+0x90>
  8029d8:	80c00a17 	ldw	r3,40(r16)
  8029dc:	00802034 	movhi	r2,128
  8029e0:	108ffc04 	addi	r2,r2,16368
  8029e4:	18bfcb1e 	bne	r3,r2,802914 <__smakebuf_r+0x78>
  8029e8:	8080030b 	ldhu	r2,12(r16)
  8029ec:	00c10004 	movi	r3,1024
  8029f0:	1825883a 	mov	r18,r3
  8029f4:	10c4b03a 	or	r2,r2,r3
  8029f8:	8080030d 	sth	r2,12(r16)
  8029fc:	80c01315 	stw	r3,76(r16)
  802a00:	003fca06 	br	80292c <__smakebuf_r+0x90>
  802a04:	8100030b 	ldhu	r4,12(r16)
  802a08:	2080800c 	andi	r2,r4,512
  802a0c:	103fb21e 	bne	r2,zero,8028d8 <__smakebuf_r+0x3c>
  802a10:	80c010c4 	addi	r3,r16,67
  802a14:	21000094 	ori	r4,r4,2
  802a18:	00800044 	movi	r2,1
  802a1c:	80800515 	stw	r2,20(r16)
  802a20:	8100030d 	sth	r4,12(r16)
  802a24:	80c00415 	stw	r3,16(r16)
  802a28:	80c00015 	stw	r3,0(r16)
  802a2c:	003faa06 	br	8028d8 <__smakebuf_r+0x3c>

00802a30 <_malloc_r>:
  802a30:	defff604 	addi	sp,sp,-40
  802a34:	28c002c4 	addi	r3,r5,11
  802a38:	00800584 	movi	r2,22
  802a3c:	dc800215 	stw	r18,8(sp)
  802a40:	dfc00915 	stw	ra,36(sp)
  802a44:	df000815 	stw	fp,32(sp)
  802a48:	ddc00715 	stw	r23,28(sp)
  802a4c:	dd800615 	stw	r22,24(sp)
  802a50:	dd400515 	stw	r21,20(sp)
  802a54:	dd000415 	stw	r20,16(sp)
  802a58:	dcc00315 	stw	r19,12(sp)
  802a5c:	dc400115 	stw	r17,4(sp)
  802a60:	dc000015 	stw	r16,0(sp)
  802a64:	2025883a 	mov	r18,r4
  802a68:	10c01236 	bltu	r2,r3,802ab4 <_malloc_r+0x84>
  802a6c:	04400404 	movi	r17,16
  802a70:	8940142e 	bgeu	r17,r5,802ac4 <_malloc_r+0x94>
  802a74:	00800304 	movi	r2,12
  802a78:	0007883a 	mov	r3,zero
  802a7c:	90800015 	stw	r2,0(r18)
  802a80:	1805883a 	mov	r2,r3
  802a84:	dfc00917 	ldw	ra,36(sp)
  802a88:	df000817 	ldw	fp,32(sp)
  802a8c:	ddc00717 	ldw	r23,28(sp)
  802a90:	dd800617 	ldw	r22,24(sp)
  802a94:	dd400517 	ldw	r21,20(sp)
  802a98:	dd000417 	ldw	r20,16(sp)
  802a9c:	dcc00317 	ldw	r19,12(sp)
  802aa0:	dc800217 	ldw	r18,8(sp)
  802aa4:	dc400117 	ldw	r17,4(sp)
  802aa8:	dc000017 	ldw	r16,0(sp)
  802aac:	dec00a04 	addi	sp,sp,40
  802ab0:	f800283a 	ret
  802ab4:	00bffe04 	movi	r2,-8
  802ab8:	18a2703a 	and	r17,r3,r2
  802abc:	883fed16 	blt	r17,zero,802a74 <_malloc_r+0x44>
  802ac0:	897fec36 	bltu	r17,r5,802a74 <_malloc_r+0x44>
  802ac4:	9009883a 	mov	r4,r18
  802ac8:	0810e200 	call	810e20 <__malloc_lock>
  802acc:	00807dc4 	movi	r2,503
  802ad0:	14402b2e 	bgeu	r2,r17,802b80 <_malloc_r+0x150>
  802ad4:	8806d27a 	srli	r3,r17,9
  802ad8:	18003f1e 	bne	r3,zero,802bd8 <_malloc_r+0x1a8>
  802adc:	880cd0fa 	srli	r6,r17,3
  802ae0:	300490fa 	slli	r2,r6,3
  802ae4:	02c02074 	movhi	r11,129
  802ae8:	5ad5c204 	addi	r11,r11,22280
  802aec:	12cb883a 	add	r5,r2,r11
  802af0:	2c000317 	ldw	r16,12(r5)
  802af4:	580f883a 	mov	r7,r11
  802af8:	2c00041e 	bne	r5,r16,802b0c <_malloc_r+0xdc>
  802afc:	00000a06 	br	802b28 <_malloc_r+0xf8>
  802b00:	1800860e 	bge	r3,zero,802d1c <_malloc_r+0x2ec>
  802b04:	84000317 	ldw	r16,12(r16)
  802b08:	2c000726 	beq	r5,r16,802b28 <_malloc_r+0xf8>
  802b0c:	80800117 	ldw	r2,4(r16)
  802b10:	00ffff04 	movi	r3,-4
  802b14:	10c8703a 	and	r4,r2,r3
  802b18:	2447c83a 	sub	r3,r4,r17
  802b1c:	008003c4 	movi	r2,15
  802b20:	10fff70e 	bge	r2,r3,802b00 <_malloc_r+0xd0>
  802b24:	31bfffc4 	addi	r6,r6,-1
  802b28:	32400044 	addi	r9,r6,1
  802b2c:	02802074 	movhi	r10,129
  802b30:	5295c404 	addi	r10,r10,22288
  802b34:	54000217 	ldw	r16,8(r10)
  802b38:	8280a026 	beq	r16,r10,802dbc <_malloc_r+0x38c>
  802b3c:	80800117 	ldw	r2,4(r16)
  802b40:	00ffff04 	movi	r3,-4
  802b44:	10ca703a 	and	r5,r2,r3
  802b48:	2c4dc83a 	sub	r6,r5,r17
  802b4c:	008003c4 	movi	r2,15
  802b50:	11808316 	blt	r2,r6,802d60 <_malloc_r+0x330>
  802b54:	52800315 	stw	r10,12(r10)
  802b58:	52800215 	stw	r10,8(r10)
  802b5c:	30002916 	blt	r6,zero,802c04 <_malloc_r+0x1d4>
  802b60:	8147883a 	add	r3,r16,r5
  802b64:	18800117 	ldw	r2,4(r3)
  802b68:	9009883a 	mov	r4,r18
  802b6c:	10800054 	ori	r2,r2,1
  802b70:	18800115 	stw	r2,4(r3)
  802b74:	0810e400 	call	810e40 <__malloc_unlock>
  802b78:	80c00204 	addi	r3,r16,8
  802b7c:	003fc006 	br	802a80 <_malloc_r+0x50>
  802b80:	02c02074 	movhi	r11,129
  802b84:	5ad5c204 	addi	r11,r11,22280
  802b88:	8ac5883a 	add	r2,r17,r11
  802b8c:	14000317 	ldw	r16,12(r2)
  802b90:	580f883a 	mov	r7,r11
  802b94:	8806d0fa 	srli	r3,r17,3
  802b98:	14006c26 	beq	r2,r16,802d4c <_malloc_r+0x31c>
  802b9c:	80c00117 	ldw	r3,4(r16)
  802ba0:	00bfff04 	movi	r2,-4
  802ba4:	81800317 	ldw	r6,12(r16)
  802ba8:	1886703a 	and	r3,r3,r2
  802bac:	80c7883a 	add	r3,r16,r3
  802bb0:	18800117 	ldw	r2,4(r3)
  802bb4:	81400217 	ldw	r5,8(r16)
  802bb8:	9009883a 	mov	r4,r18
  802bbc:	10800054 	ori	r2,r2,1
  802bc0:	18800115 	stw	r2,4(r3)
  802bc4:	31400215 	stw	r5,8(r6)
  802bc8:	29800315 	stw	r6,12(r5)
  802bcc:	0810e400 	call	810e40 <__malloc_unlock>
  802bd0:	80c00204 	addi	r3,r16,8
  802bd4:	003faa06 	br	802a80 <_malloc_r+0x50>
  802bd8:	00800104 	movi	r2,4
  802bdc:	10c0052e 	bgeu	r2,r3,802bf4 <_malloc_r+0x1c4>
  802be0:	00800504 	movi	r2,20
  802be4:	10c07836 	bltu	r2,r3,802dc8 <_malloc_r+0x398>
  802be8:	198016c4 	addi	r6,r3,91
  802bec:	300490fa 	slli	r2,r6,3
  802bf0:	003fbc06 	br	802ae4 <_malloc_r+0xb4>
  802bf4:	8804d1ba 	srli	r2,r17,6
  802bf8:	11800e04 	addi	r6,r2,56
  802bfc:	300490fa 	slli	r2,r6,3
  802c00:	003fb806 	br	802ae4 <_malloc_r+0xb4>
  802c04:	00807fc4 	movi	r2,511
  802c08:	1140bb36 	bltu	r2,r5,802ef8 <_malloc_r+0x4c8>
  802c0c:	2806d0fa 	srli	r3,r5,3
  802c10:	573ffe04 	addi	fp,r10,-8
  802c14:	00800044 	movi	r2,1
  802c18:	180890fa 	slli	r4,r3,3
  802c1c:	1807d0ba 	srai	r3,r3,2
  802c20:	e1c00117 	ldw	r7,4(fp)
  802c24:	5909883a 	add	r4,r11,r4
  802c28:	21400217 	ldw	r5,8(r4)
  802c2c:	10c4983a 	sll	r2,r2,r3
  802c30:	81000315 	stw	r4,12(r16)
  802c34:	81400215 	stw	r5,8(r16)
  802c38:	388eb03a 	or	r7,r7,r2
  802c3c:	2c000315 	stw	r16,12(r5)
  802c40:	24000215 	stw	r16,8(r4)
  802c44:	e1c00115 	stw	r7,4(fp)
  802c48:	4807883a 	mov	r3,r9
  802c4c:	4800cd16 	blt	r9,zero,802f84 <_malloc_r+0x554>
  802c50:	1807d0ba 	srai	r3,r3,2
  802c54:	00800044 	movi	r2,1
  802c58:	10c8983a 	sll	r4,r2,r3
  802c5c:	39004436 	bltu	r7,r4,802d70 <_malloc_r+0x340>
  802c60:	21c4703a 	and	r2,r4,r7
  802c64:	10000a1e 	bne	r2,zero,802c90 <_malloc_r+0x260>
  802c68:	2109883a 	add	r4,r4,r4
  802c6c:	00bfff04 	movi	r2,-4
  802c70:	4884703a 	and	r2,r9,r2
  802c74:	3906703a 	and	r3,r7,r4
  802c78:	12400104 	addi	r9,r2,4
  802c7c:	1800041e 	bne	r3,zero,802c90 <_malloc_r+0x260>
  802c80:	2109883a 	add	r4,r4,r4
  802c84:	3904703a 	and	r2,r7,r4
  802c88:	4a400104 	addi	r9,r9,4
  802c8c:	103ffc26 	beq	r2,zero,802c80 <_malloc_r+0x250>
  802c90:	480490fa 	slli	r2,r9,3
  802c94:	4819883a 	mov	r12,r9
  802c98:	023fff04 	movi	r8,-4
  802c9c:	589b883a 	add	r13,r11,r2
  802ca0:	6807883a 	mov	r3,r13
  802ca4:	014003c4 	movi	r5,15
  802ca8:	1c000317 	ldw	r16,12(r3)
  802cac:	1c00041e 	bne	r3,r16,802cc0 <_malloc_r+0x290>
  802cb0:	0000a706 	br	802f50 <_malloc_r+0x520>
  802cb4:	3000ab0e 	bge	r6,zero,802f64 <_malloc_r+0x534>
  802cb8:	84000317 	ldw	r16,12(r16)
  802cbc:	1c00a426 	beq	r3,r16,802f50 <_malloc_r+0x520>
  802cc0:	80800117 	ldw	r2,4(r16)
  802cc4:	1204703a 	and	r2,r2,r8
  802cc8:	144dc83a 	sub	r6,r2,r17
  802ccc:	29bff90e 	bge	r5,r6,802cb4 <_malloc_r+0x284>
  802cd0:	81000317 	ldw	r4,12(r16)
  802cd4:	80c00217 	ldw	r3,8(r16)
  802cd8:	89400054 	ori	r5,r17,1
  802cdc:	8445883a 	add	r2,r16,r17
  802ce0:	20c00215 	stw	r3,8(r4)
  802ce4:	19000315 	stw	r4,12(r3)
  802ce8:	81400115 	stw	r5,4(r16)
  802cec:	1187883a 	add	r3,r2,r6
  802cf0:	31000054 	ori	r4,r6,1
  802cf4:	50800315 	stw	r2,12(r10)
  802cf8:	50800215 	stw	r2,8(r10)
  802cfc:	19800015 	stw	r6,0(r3)
  802d00:	11000115 	stw	r4,4(r2)
  802d04:	12800215 	stw	r10,8(r2)
  802d08:	12800315 	stw	r10,12(r2)
  802d0c:	9009883a 	mov	r4,r18
  802d10:	0810e400 	call	810e40 <__malloc_unlock>
  802d14:	80c00204 	addi	r3,r16,8
  802d18:	003f5906 	br	802a80 <_malloc_r+0x50>
  802d1c:	8109883a 	add	r4,r16,r4
  802d20:	20800117 	ldw	r2,4(r4)
  802d24:	80c00217 	ldw	r3,8(r16)
  802d28:	81400317 	ldw	r5,12(r16)
  802d2c:	10800054 	ori	r2,r2,1
  802d30:	20800115 	stw	r2,4(r4)
  802d34:	28c00215 	stw	r3,8(r5)
  802d38:	19400315 	stw	r5,12(r3)
  802d3c:	9009883a 	mov	r4,r18
  802d40:	0810e400 	call	810e40 <__malloc_unlock>
  802d44:	80c00204 	addi	r3,r16,8
  802d48:	003f4d06 	br	802a80 <_malloc_r+0x50>
  802d4c:	80800204 	addi	r2,r16,8
  802d50:	14000317 	ldw	r16,12(r2)
  802d54:	143f911e 	bne	r2,r16,802b9c <_malloc_r+0x16c>
  802d58:	1a400084 	addi	r9,r3,2
  802d5c:	003f7306 	br	802b2c <_malloc_r+0xfc>
  802d60:	88c00054 	ori	r3,r17,1
  802d64:	8445883a 	add	r2,r16,r17
  802d68:	80c00115 	stw	r3,4(r16)
  802d6c:	003fdf06 	br	802cec <_malloc_r+0x2bc>
  802d70:	e4000217 	ldw	r16,8(fp)
  802d74:	00bfff04 	movi	r2,-4
  802d78:	80c00117 	ldw	r3,4(r16)
  802d7c:	802d883a 	mov	r22,r16
  802d80:	18aa703a 	and	r21,r3,r2
  802d84:	ac401636 	bltu	r21,r17,802de0 <_malloc_r+0x3b0>
  802d88:	ac49c83a 	sub	r4,r21,r17
  802d8c:	008003c4 	movi	r2,15
  802d90:	1100130e 	bge	r2,r4,802de0 <_malloc_r+0x3b0>
  802d94:	88800054 	ori	r2,r17,1
  802d98:	8447883a 	add	r3,r16,r17
  802d9c:	80800115 	stw	r2,4(r16)
  802da0:	20800054 	ori	r2,r4,1
  802da4:	18800115 	stw	r2,4(r3)
  802da8:	e0c00215 	stw	r3,8(fp)
  802dac:	9009883a 	mov	r4,r18
  802db0:	0810e400 	call	810e40 <__malloc_unlock>
  802db4:	80c00204 	addi	r3,r16,8
  802db8:	003f3106 	br	802a80 <_malloc_r+0x50>
  802dbc:	39c00117 	ldw	r7,4(r7)
  802dc0:	573ffe04 	addi	fp,r10,-8
  802dc4:	003fa006 	br	802c48 <_malloc_r+0x218>
  802dc8:	00801504 	movi	r2,84
  802dcc:	10c06736 	bltu	r2,r3,802f6c <_malloc_r+0x53c>
  802dd0:	8804d33a 	srli	r2,r17,12
  802dd4:	11801b84 	addi	r6,r2,110
  802dd8:	300490fa 	slli	r2,r6,3
  802ddc:	003f4106 	br	802ae4 <_malloc_r+0xb4>
  802de0:	d0a75b17 	ldw	r2,-25236(gp)
  802de4:	d0e00717 	ldw	r3,-32740(gp)
  802de8:	053fffc4 	movi	r20,-1
  802dec:	10800404 	addi	r2,r2,16
  802df0:	88a7883a 	add	r19,r17,r2
  802df4:	1d000326 	beq	r3,r20,802e04 <_malloc_r+0x3d4>
  802df8:	98c3ffc4 	addi	r3,r19,4095
  802dfc:	00bc0004 	movi	r2,-4096
  802e00:	18a6703a 	and	r19,r3,r2
  802e04:	9009883a 	mov	r4,r18
  802e08:	980b883a 	mov	r5,r19
  802e0c:	0803d900 	call	803d90 <_sbrk_r>
  802e10:	1009883a 	mov	r4,r2
  802e14:	15000426 	beq	r2,r20,802e28 <_malloc_r+0x3f8>
  802e18:	854b883a 	add	r5,r16,r21
  802e1c:	1029883a 	mov	r20,r2
  802e20:	11405a2e 	bgeu	r2,r5,802f8c <_malloc_r+0x55c>
  802e24:	87000c26 	beq	r16,fp,802e58 <_malloc_r+0x428>
  802e28:	e4000217 	ldw	r16,8(fp)
  802e2c:	80c00117 	ldw	r3,4(r16)
  802e30:	00bfff04 	movi	r2,-4
  802e34:	1884703a 	and	r2,r3,r2
  802e38:	14400336 	bltu	r2,r17,802e48 <_malloc_r+0x418>
  802e3c:	1449c83a 	sub	r4,r2,r17
  802e40:	008003c4 	movi	r2,15
  802e44:	113fd316 	blt	r2,r4,802d94 <_malloc_r+0x364>
  802e48:	9009883a 	mov	r4,r18
  802e4c:	0810e400 	call	810e40 <__malloc_unlock>
  802e50:	0007883a 	mov	r3,zero
  802e54:	003f0a06 	br	802a80 <_malloc_r+0x50>
  802e58:	05c020b4 	movhi	r23,130
  802e5c:	bde33f04 	addi	r23,r23,-29444
  802e60:	b8800017 	ldw	r2,0(r23)
  802e64:	988d883a 	add	r6,r19,r2
  802e68:	b9800015 	stw	r6,0(r23)
  802e6c:	d0e00717 	ldw	r3,-32740(gp)
  802e70:	00bfffc4 	movi	r2,-1
  802e74:	18808e26 	beq	r3,r2,8030b0 <_malloc_r+0x680>
  802e78:	2145c83a 	sub	r2,r4,r5
  802e7c:	3085883a 	add	r2,r6,r2
  802e80:	b8800015 	stw	r2,0(r23)
  802e84:	20c001cc 	andi	r3,r4,7
  802e88:	18005f1e 	bne	r3,zero,803008 <_malloc_r+0x5d8>
  802e8c:	000b883a 	mov	r5,zero
  802e90:	a4c5883a 	add	r2,r20,r19
  802e94:	1083ffcc 	andi	r2,r2,4095
  802e98:	00c40004 	movi	r3,4096
  802e9c:	1887c83a 	sub	r3,r3,r2
  802ea0:	28e7883a 	add	r19,r5,r3
  802ea4:	9009883a 	mov	r4,r18
  802ea8:	980b883a 	mov	r5,r19
  802eac:	0803d900 	call	803d90 <_sbrk_r>
  802eb0:	1007883a 	mov	r3,r2
  802eb4:	00bfffc4 	movi	r2,-1
  802eb8:	18807a26 	beq	r3,r2,8030a4 <_malloc_r+0x674>
  802ebc:	1d05c83a 	sub	r2,r3,r20
  802ec0:	9885883a 	add	r2,r19,r2
  802ec4:	10c00054 	ori	r3,r2,1
  802ec8:	b8800017 	ldw	r2,0(r23)
  802ecc:	a021883a 	mov	r16,r20
  802ed0:	a0c00115 	stw	r3,4(r20)
  802ed4:	9885883a 	add	r2,r19,r2
  802ed8:	b8800015 	stw	r2,0(r23)
  802edc:	e5000215 	stw	r20,8(fp)
  802ee0:	b7003626 	beq	r22,fp,802fbc <_malloc_r+0x58c>
  802ee4:	018003c4 	movi	r6,15
  802ee8:	35404b36 	bltu	r6,r21,803018 <_malloc_r+0x5e8>
  802eec:	00800044 	movi	r2,1
  802ef0:	a0800115 	stw	r2,4(r20)
  802ef4:	003fcd06 	br	802e2c <_malloc_r+0x3fc>
  802ef8:	2808d27a 	srli	r4,r5,9
  802efc:	2000371e 	bne	r4,zero,802fdc <_malloc_r+0x5ac>
  802f00:	2808d0fa 	srli	r4,r5,3
  802f04:	200690fa 	slli	r3,r4,3
  802f08:	1ad1883a 	add	r8,r3,r11
  802f0c:	41800217 	ldw	r6,8(r8)
  802f10:	41805b26 	beq	r8,r6,803080 <_malloc_r+0x650>
  802f14:	30800117 	ldw	r2,4(r6)
  802f18:	00ffff04 	movi	r3,-4
  802f1c:	10c4703a 	and	r2,r2,r3
  802f20:	2880022e 	bgeu	r5,r2,802f2c <_malloc_r+0x4fc>
  802f24:	31800217 	ldw	r6,8(r6)
  802f28:	41bffa1e 	bne	r8,r6,802f14 <_malloc_r+0x4e4>
  802f2c:	32000317 	ldw	r8,12(r6)
  802f30:	39c00117 	ldw	r7,4(r7)
  802f34:	82000315 	stw	r8,12(r16)
  802f38:	81800215 	stw	r6,8(r16)
  802f3c:	07002074 	movhi	fp,129
  802f40:	e715c204 	addi	fp,fp,22280
  802f44:	34000315 	stw	r16,12(r6)
  802f48:	44000215 	stw	r16,8(r8)
  802f4c:	003f3e06 	br	802c48 <_malloc_r+0x218>
  802f50:	63000044 	addi	r12,r12,1
  802f54:	608000cc 	andi	r2,r12,3
  802f58:	10005d26 	beq	r2,zero,8030d0 <_malloc_r+0x6a0>
  802f5c:	18c00204 	addi	r3,r3,8
  802f60:	003f5106 	br	802ca8 <_malloc_r+0x278>
  802f64:	8089883a 	add	r4,r16,r2
  802f68:	003f6d06 	br	802d20 <_malloc_r+0x2f0>
  802f6c:	00805504 	movi	r2,340
  802f70:	10c02036 	bltu	r2,r3,802ff4 <_malloc_r+0x5c4>
  802f74:	8804d3fa 	srli	r2,r17,15
  802f78:	11801dc4 	addi	r6,r2,119
  802f7c:	300490fa 	slli	r2,r6,3
  802f80:	003ed806 	br	802ae4 <_malloc_r+0xb4>
  802f84:	48c000c4 	addi	r3,r9,3
  802f88:	003f3106 	br	802c50 <_malloc_r+0x220>
  802f8c:	05c020b4 	movhi	r23,130
  802f90:	bde33f04 	addi	r23,r23,-29444
  802f94:	b8800017 	ldw	r2,0(r23)
  802f98:	988d883a 	add	r6,r19,r2
  802f9c:	b9800015 	stw	r6,0(r23)
  802fa0:	293fb21e 	bne	r5,r4,802e6c <_malloc_r+0x43c>
  802fa4:	2083ffcc 	andi	r2,r4,4095
  802fa8:	103fb01e 	bne	r2,zero,802e6c <_malloc_r+0x43c>
  802fac:	e4000217 	ldw	r16,8(fp)
  802fb0:	9d45883a 	add	r2,r19,r21
  802fb4:	10800054 	ori	r2,r2,1
  802fb8:	80800115 	stw	r2,4(r16)
  802fbc:	b8c00017 	ldw	r3,0(r23)
  802fc0:	d0a75c17 	ldw	r2,-25232(gp)
  802fc4:	10c0012e 	bgeu	r2,r3,802fcc <_malloc_r+0x59c>
  802fc8:	d0e75c15 	stw	r3,-25232(gp)
  802fcc:	d0a75d17 	ldw	r2,-25228(gp)
  802fd0:	10ff962e 	bgeu	r2,r3,802e2c <_malloc_r+0x3fc>
  802fd4:	d0e75d15 	stw	r3,-25228(gp)
  802fd8:	003f9406 	br	802e2c <_malloc_r+0x3fc>
  802fdc:	00800104 	movi	r2,4
  802fe0:	11001e36 	bltu	r2,r4,80305c <_malloc_r+0x62c>
  802fe4:	2804d1ba 	srli	r2,r5,6
  802fe8:	11000e04 	addi	r4,r2,56
  802fec:	200690fa 	slli	r3,r4,3
  802ff0:	003fc506 	br	802f08 <_malloc_r+0x4d8>
  802ff4:	00815504 	movi	r2,1364
  802ff8:	10c01d2e 	bgeu	r2,r3,803070 <_malloc_r+0x640>
  802ffc:	01801f84 	movi	r6,126
  803000:	0080fc04 	movi	r2,1008
  803004:	003eb706 	br	802ae4 <_malloc_r+0xb4>
  803008:	00800204 	movi	r2,8
  80300c:	10cbc83a 	sub	r5,r2,r3
  803010:	2169883a 	add	r20,r4,r5
  803014:	003f9e06 	br	802e90 <_malloc_r+0x460>
  803018:	00bffe04 	movi	r2,-8
  80301c:	a93ffd04 	addi	r4,r21,-12
  803020:	2088703a 	and	r4,r4,r2
  803024:	b10b883a 	add	r5,r22,r4
  803028:	00c00144 	movi	r3,5
  80302c:	28c00215 	stw	r3,8(r5)
  803030:	28c00115 	stw	r3,4(r5)
  803034:	b0800117 	ldw	r2,4(r22)
  803038:	1080004c 	andi	r2,r2,1
  80303c:	2084b03a 	or	r2,r4,r2
  803040:	b0800115 	stw	r2,4(r22)
  803044:	313fdd2e 	bgeu	r6,r4,802fbc <_malloc_r+0x58c>
  803048:	b1400204 	addi	r5,r22,8
  80304c:	9009883a 	mov	r4,r18
  803050:	0801a980 	call	801a98 <_free_r>
  803054:	e4000217 	ldw	r16,8(fp)
  803058:	003fd806 	br	802fbc <_malloc_r+0x58c>
  80305c:	00800504 	movi	r2,20
  803060:	11001536 	bltu	r2,r4,8030b8 <_malloc_r+0x688>
  803064:	210016c4 	addi	r4,r4,91
  803068:	200690fa 	slli	r3,r4,3
  80306c:	003fa606 	br	802f08 <_malloc_r+0x4d8>
  803070:	8804d4ba 	srli	r2,r17,18
  803074:	11801f04 	addi	r6,r2,124
  803078:	300490fa 	slli	r2,r6,3
  80307c:	003e9906 	br	802ae4 <_malloc_r+0xb4>
  803080:	2009d0ba 	srai	r4,r4,2
  803084:	01402074 	movhi	r5,129
  803088:	2955c204 	addi	r5,r5,22280
  80308c:	00c00044 	movi	r3,1
  803090:	28800117 	ldw	r2,4(r5)
  803094:	1906983a 	sll	r3,r3,r4
  803098:	10c4b03a 	or	r2,r2,r3
  80309c:	28800115 	stw	r2,4(r5)
  8030a0:	003fa306 	br	802f30 <_malloc_r+0x500>
  8030a4:	0027883a 	mov	r19,zero
  8030a8:	00c00044 	movi	r3,1
  8030ac:	003f8606 	br	802ec8 <_malloc_r+0x498>
  8030b0:	d1200715 	stw	r4,-32740(gp)
  8030b4:	003f7306 	br	802e84 <_malloc_r+0x454>
  8030b8:	00801504 	movi	r2,84
  8030bc:	11001936 	bltu	r2,r4,803124 <_malloc_r+0x6f4>
  8030c0:	2804d33a 	srli	r2,r5,12
  8030c4:	11001b84 	addi	r4,r2,110
  8030c8:	200690fa 	slli	r3,r4,3
  8030cc:	003f8e06 	br	802f08 <_malloc_r+0x4d8>
  8030d0:	480b883a 	mov	r5,r9
  8030d4:	6807883a 	mov	r3,r13
  8030d8:	288000cc 	andi	r2,r5,3
  8030dc:	18fffe04 	addi	r3,r3,-8
  8030e0:	297fffc4 	addi	r5,r5,-1
  8030e4:	10001526 	beq	r2,zero,80313c <_malloc_r+0x70c>
  8030e8:	18800217 	ldw	r2,8(r3)
  8030ec:	10fffa26 	beq	r2,r3,8030d8 <_malloc_r+0x6a8>
  8030f0:	2109883a 	add	r4,r4,r4
  8030f4:	393f1e36 	bltu	r7,r4,802d70 <_malloc_r+0x340>
  8030f8:	203f1d26 	beq	r4,zero,802d70 <_malloc_r+0x340>
  8030fc:	21c4703a 	and	r2,r4,r7
  803100:	10000226 	beq	r2,zero,80310c <_malloc_r+0x6dc>
  803104:	6013883a 	mov	r9,r12
  803108:	003ee106 	br	802c90 <_malloc_r+0x260>
  80310c:	2109883a 	add	r4,r4,r4
  803110:	3904703a 	and	r2,r7,r4
  803114:	63000104 	addi	r12,r12,4
  803118:	103ffc26 	beq	r2,zero,80310c <_malloc_r+0x6dc>
  80311c:	6013883a 	mov	r9,r12
  803120:	003edb06 	br	802c90 <_malloc_r+0x260>
  803124:	00805504 	movi	r2,340
  803128:	11000836 	bltu	r2,r4,80314c <_malloc_r+0x71c>
  80312c:	2804d3fa 	srli	r2,r5,15
  803130:	11001dc4 	addi	r4,r2,119
  803134:	200690fa 	slli	r3,r4,3
  803138:	003f7306 	br	802f08 <_malloc_r+0x4d8>
  80313c:	0104303a 	nor	r2,zero,r4
  803140:	388e703a 	and	r7,r7,r2
  803144:	e1c00115 	stw	r7,4(fp)
  803148:	003fe906 	br	8030f0 <_malloc_r+0x6c0>
  80314c:	00815504 	movi	r2,1364
  803150:	1100032e 	bgeu	r2,r4,803160 <_malloc_r+0x730>
  803154:	01001f84 	movi	r4,126
  803158:	00c0fc04 	movi	r3,1008
  80315c:	003f6a06 	br	802f08 <_malloc_r+0x4d8>
  803160:	2804d4ba 	srli	r2,r5,18
  803164:	11001f04 	addi	r4,r2,124
  803168:	200690fa 	slli	r3,r4,3
  80316c:	003f6606 	br	802f08 <_malloc_r+0x4d8>

00803170 <memchr>:
  803170:	008000c4 	movi	r2,3
  803174:	29403fcc 	andi	r5,r5,255
  803178:	2007883a 	mov	r3,r4
  80317c:	1180022e 	bgeu	r2,r6,803188 <memchr+0x18>
  803180:	2084703a 	and	r2,r4,r2
  803184:	10000b26 	beq	r2,zero,8031b4 <memchr+0x44>
  803188:	313fffc4 	addi	r4,r6,-1
  80318c:	3000051e 	bne	r6,zero,8031a4 <memchr+0x34>
  803190:	00002c06 	br	803244 <memchr+0xd4>
  803194:	213fffc4 	addi	r4,r4,-1
  803198:	00bfffc4 	movi	r2,-1
  80319c:	18c00044 	addi	r3,r3,1
  8031a0:	20802826 	beq	r4,r2,803244 <memchr+0xd4>
  8031a4:	18800003 	ldbu	r2,0(r3)
  8031a8:	28bffa1e 	bne	r5,r2,803194 <memchr+0x24>
  8031ac:	1805883a 	mov	r2,r3
  8031b0:	f800283a 	ret
  8031b4:	0011883a 	mov	r8,zero
  8031b8:	0007883a 	mov	r3,zero
  8031bc:	01c00104 	movi	r7,4
  8031c0:	4004923a 	slli	r2,r8,8
  8031c4:	18c00044 	addi	r3,r3,1
  8031c8:	1151883a 	add	r8,r2,r5
  8031cc:	19fffc1e 	bne	r3,r7,8031c0 <memchr+0x50>
  8031d0:	02bfbff4 	movhi	r10,65279
  8031d4:	52bfbfc4 	addi	r10,r10,-257
  8031d8:	02602074 	movhi	r9,32897
  8031dc:	4a602004 	addi	r9,r9,-32640
  8031e0:	02c000c4 	movi	r11,3
  8031e4:	20800017 	ldw	r2,0(r4)
  8031e8:	31bfff04 	addi	r6,r6,-4
  8031ec:	200f883a 	mov	r7,r4
  8031f0:	1204f03a 	xor	r2,r2,r8
  8031f4:	1287883a 	add	r3,r2,r10
  8031f8:	1a46703a 	and	r3,r3,r9
  8031fc:	0084303a 	nor	r2,zero,r2
  803200:	10c4703a 	and	r2,r2,r3
  803204:	10000b26 	beq	r2,zero,803234 <memchr+0xc4>
  803208:	20800003 	ldbu	r2,0(r4)
  80320c:	28800f26 	beq	r5,r2,80324c <memchr+0xdc>
  803210:	20800043 	ldbu	r2,1(r4)
  803214:	21c00044 	addi	r7,r4,1
  803218:	28800c26 	beq	r5,r2,80324c <memchr+0xdc>
  80321c:	20800083 	ldbu	r2,2(r4)
  803220:	21c00084 	addi	r7,r4,2
  803224:	28800926 	beq	r5,r2,80324c <memchr+0xdc>
  803228:	208000c3 	ldbu	r2,3(r4)
  80322c:	21c000c4 	addi	r7,r4,3
  803230:	28800626 	beq	r5,r2,80324c <memchr+0xdc>
  803234:	21000104 	addi	r4,r4,4
  803238:	59bfea36 	bltu	r11,r6,8031e4 <memchr+0x74>
  80323c:	2007883a 	mov	r3,r4
  803240:	003fd106 	br	803188 <memchr+0x18>
  803244:	0005883a 	mov	r2,zero
  803248:	f800283a 	ret
  80324c:	3805883a 	mov	r2,r7
  803250:	f800283a 	ret

00803254 <memcpy>:
  803254:	01c003c4 	movi	r7,15
  803258:	2007883a 	mov	r3,r4
  80325c:	3980032e 	bgeu	r7,r6,80326c <memcpy+0x18>
  803260:	2904b03a 	or	r2,r5,r4
  803264:	108000cc 	andi	r2,r2,3
  803268:	10000926 	beq	r2,zero,803290 <memcpy+0x3c>
  80326c:	30000626 	beq	r6,zero,803288 <memcpy+0x34>
  803270:	30cd883a 	add	r6,r6,r3
  803274:	28800003 	ldbu	r2,0(r5)
  803278:	29400044 	addi	r5,r5,1
  80327c:	18800005 	stb	r2,0(r3)
  803280:	18c00044 	addi	r3,r3,1
  803284:	30fffb1e 	bne	r6,r3,803274 <memcpy+0x20>
  803288:	2005883a 	mov	r2,r4
  80328c:	f800283a 	ret
  803290:	3811883a 	mov	r8,r7
  803294:	200f883a 	mov	r7,r4
  803298:	28c00017 	ldw	r3,0(r5)
  80329c:	31bffc04 	addi	r6,r6,-16
  8032a0:	38c00015 	stw	r3,0(r7)
  8032a4:	28800117 	ldw	r2,4(r5)
  8032a8:	38800115 	stw	r2,4(r7)
  8032ac:	28c00217 	ldw	r3,8(r5)
  8032b0:	38c00215 	stw	r3,8(r7)
  8032b4:	28800317 	ldw	r2,12(r5)
  8032b8:	29400404 	addi	r5,r5,16
  8032bc:	38800315 	stw	r2,12(r7)
  8032c0:	39c00404 	addi	r7,r7,16
  8032c4:	41bff436 	bltu	r8,r6,803298 <memcpy+0x44>
  8032c8:	008000c4 	movi	r2,3
  8032cc:	1180072e 	bgeu	r2,r6,8032ec <memcpy+0x98>
  8032d0:	1007883a 	mov	r3,r2
  8032d4:	28800017 	ldw	r2,0(r5)
  8032d8:	31bfff04 	addi	r6,r6,-4
  8032dc:	29400104 	addi	r5,r5,4
  8032e0:	38800015 	stw	r2,0(r7)
  8032e4:	39c00104 	addi	r7,r7,4
  8032e8:	19bffa36 	bltu	r3,r6,8032d4 <memcpy+0x80>
  8032ec:	3807883a 	mov	r3,r7
  8032f0:	003fde06 	br	80326c <memcpy+0x18>

008032f4 <memmove>:
  8032f4:	2807883a 	mov	r3,r5
  8032f8:	2011883a 	mov	r8,r4
  8032fc:	29000c2e 	bgeu	r5,r4,803330 <memmove+0x3c>
  803300:	298f883a 	add	r7,r5,r6
  803304:	21c00a2e 	bgeu	r4,r7,803330 <memmove+0x3c>
  803308:	30000726 	beq	r6,zero,803328 <memmove+0x34>
  80330c:	2187883a 	add	r3,r4,r6
  803310:	198dc83a 	sub	r6,r3,r6
  803314:	39ffffc4 	addi	r7,r7,-1
  803318:	38800003 	ldbu	r2,0(r7)
  80331c:	18ffffc4 	addi	r3,r3,-1
  803320:	18800005 	stb	r2,0(r3)
  803324:	19bffb1e 	bne	r3,r6,803314 <memmove+0x20>
  803328:	2005883a 	mov	r2,r4
  80332c:	f800283a 	ret
  803330:	01c003c4 	movi	r7,15
  803334:	39800a36 	bltu	r7,r6,803360 <memmove+0x6c>
  803338:	303ffb26 	beq	r6,zero,803328 <memmove+0x34>
  80333c:	400f883a 	mov	r7,r8
  803340:	320d883a 	add	r6,r6,r8
  803344:	28800003 	ldbu	r2,0(r5)
  803348:	29400044 	addi	r5,r5,1
  80334c:	38800005 	stb	r2,0(r7)
  803350:	39c00044 	addi	r7,r7,1
  803354:	39bffb1e 	bne	r7,r6,803344 <memmove+0x50>
  803358:	2005883a 	mov	r2,r4
  80335c:	f800283a 	ret
  803360:	1904b03a 	or	r2,r3,r4
  803364:	108000cc 	andi	r2,r2,3
  803368:	103ff31e 	bne	r2,zero,803338 <memmove+0x44>
  80336c:	3811883a 	mov	r8,r7
  803370:	180b883a 	mov	r5,r3
  803374:	200f883a 	mov	r7,r4
  803378:	28c00017 	ldw	r3,0(r5)
  80337c:	31bffc04 	addi	r6,r6,-16
  803380:	38c00015 	stw	r3,0(r7)
  803384:	28800117 	ldw	r2,4(r5)
  803388:	38800115 	stw	r2,4(r7)
  80338c:	28c00217 	ldw	r3,8(r5)
  803390:	38c00215 	stw	r3,8(r7)
  803394:	28800317 	ldw	r2,12(r5)
  803398:	29400404 	addi	r5,r5,16
  80339c:	38800315 	stw	r2,12(r7)
  8033a0:	39c00404 	addi	r7,r7,16
  8033a4:	41bff436 	bltu	r8,r6,803378 <memmove+0x84>
  8033a8:	008000c4 	movi	r2,3
  8033ac:	1180072e 	bgeu	r2,r6,8033cc <memmove+0xd8>
  8033b0:	1007883a 	mov	r3,r2
  8033b4:	28800017 	ldw	r2,0(r5)
  8033b8:	31bfff04 	addi	r6,r6,-4
  8033bc:	29400104 	addi	r5,r5,4
  8033c0:	38800015 	stw	r2,0(r7)
  8033c4:	39c00104 	addi	r7,r7,4
  8033c8:	19bffa36 	bltu	r3,r6,8033b4 <memmove+0xc0>
  8033cc:	3811883a 	mov	r8,r7
  8033d0:	003fd906 	br	803338 <memmove+0x44>

008033d4 <memset>:
  8033d4:	008000c4 	movi	r2,3
  8033d8:	29403fcc 	andi	r5,r5,255
  8033dc:	2007883a 	mov	r3,r4
  8033e0:	1180022e 	bgeu	r2,r6,8033ec <memset+0x18>
  8033e4:	2084703a 	and	r2,r4,r2
  8033e8:	10000826 	beq	r2,zero,80340c <memset+0x38>
  8033ec:	30000526 	beq	r6,zero,803404 <memset+0x30>
  8033f0:	2805883a 	mov	r2,r5
  8033f4:	30cd883a 	add	r6,r6,r3
  8033f8:	18800005 	stb	r2,0(r3)
  8033fc:	18c00044 	addi	r3,r3,1
  803400:	19bffd1e 	bne	r3,r6,8033f8 <memset+0x24>
  803404:	2005883a 	mov	r2,r4
  803408:	f800283a 	ret
  80340c:	2804923a 	slli	r2,r5,8
  803410:	020003c4 	movi	r8,15
  803414:	200f883a 	mov	r7,r4
  803418:	2884b03a 	or	r2,r5,r2
  80341c:	1006943a 	slli	r3,r2,16
  803420:	10c6b03a 	or	r3,r2,r3
  803424:	41800a2e 	bgeu	r8,r6,803450 <memset+0x7c>
  803428:	4005883a 	mov	r2,r8
  80342c:	31bffc04 	addi	r6,r6,-16
  803430:	38c00015 	stw	r3,0(r7)
  803434:	38c00115 	stw	r3,4(r7)
  803438:	38c00215 	stw	r3,8(r7)
  80343c:	38c00315 	stw	r3,12(r7)
  803440:	39c00404 	addi	r7,r7,16
  803444:	11bff936 	bltu	r2,r6,80342c <memset+0x58>
  803448:	008000c4 	movi	r2,3
  80344c:	1180052e 	bgeu	r2,r6,803464 <memset+0x90>
  803450:	31bfff04 	addi	r6,r6,-4
  803454:	008000c4 	movi	r2,3
  803458:	38c00015 	stw	r3,0(r7)
  80345c:	39c00104 	addi	r7,r7,4
  803460:	11bffb36 	bltu	r2,r6,803450 <memset+0x7c>
  803464:	3807883a 	mov	r3,r7
  803468:	003fe006 	br	8033ec <memset+0x18>

0080346c <_open_r>:
  80346c:	defffd04 	addi	sp,sp,-12
  803470:	dc000015 	stw	r16,0(sp)
  803474:	040020b4 	movhi	r16,130
  803478:	84232604 	addi	r16,r16,-29544
  80347c:	dc400115 	stw	r17,4(sp)
  803480:	80000015 	stw	zero,0(r16)
  803484:	2023883a 	mov	r17,r4
  803488:	2809883a 	mov	r4,r5
  80348c:	300b883a 	mov	r5,r6
  803490:	380d883a 	mov	r6,r7
  803494:	dfc00215 	stw	ra,8(sp)
  803498:	0810f3c0 	call	810f3c <open>
  80349c:	1007883a 	mov	r3,r2
  8034a0:	00bfffc4 	movi	r2,-1
  8034a4:	18800626 	beq	r3,r2,8034c0 <_open_r+0x54>
  8034a8:	1805883a 	mov	r2,r3
  8034ac:	dfc00217 	ldw	ra,8(sp)
  8034b0:	dc400117 	ldw	r17,4(sp)
  8034b4:	dc000017 	ldw	r16,0(sp)
  8034b8:	dec00304 	addi	sp,sp,12
  8034bc:	f800283a 	ret
  8034c0:	80800017 	ldw	r2,0(r16)
  8034c4:	103ff826 	beq	r2,zero,8034a8 <_open_r+0x3c>
  8034c8:	88800015 	stw	r2,0(r17)
  8034cc:	1805883a 	mov	r2,r3
  8034d0:	dfc00217 	ldw	ra,8(sp)
  8034d4:	dc400117 	ldw	r17,4(sp)
  8034d8:	dc000017 	ldw	r16,0(sp)
  8034dc:	dec00304 	addi	sp,sp,12
  8034e0:	f800283a 	ret

008034e4 <printf>:
  8034e4:	defffb04 	addi	sp,sp,-20
  8034e8:	dfc00115 	stw	ra,4(sp)
  8034ec:	d9400215 	stw	r5,8(sp)
  8034f0:	d9800315 	stw	r6,12(sp)
  8034f4:	d9c00415 	stw	r7,16(sp)
  8034f8:	00802074 	movhi	r2,129
  8034fc:	109bd004 	addi	r2,r2,28480
  803500:	10c00017 	ldw	r3,0(r2)
  803504:	200b883a 	mov	r5,r4
  803508:	d8800204 	addi	r2,sp,8
  80350c:	19000217 	ldw	r4,8(r3)
  803510:	100d883a 	mov	r6,r2
  803514:	d8800015 	stw	r2,0(sp)
  803518:	08060ac0 	call	8060ac <__vfprintf_internal>
  80351c:	dfc00117 	ldw	ra,4(sp)
  803520:	dec00504 	addi	sp,sp,20
  803524:	f800283a 	ret

00803528 <_printf_r>:
  803528:	defffc04 	addi	sp,sp,-16
  80352c:	dfc00115 	stw	ra,4(sp)
  803530:	d9800215 	stw	r6,8(sp)
  803534:	d9c00315 	stw	r7,12(sp)
  803538:	280d883a 	mov	r6,r5
  80353c:	21400217 	ldw	r5,8(r4)
  803540:	d8c00204 	addi	r3,sp,8
  803544:	180f883a 	mov	r7,r3
  803548:	d8c00015 	stw	r3,0(sp)
  80354c:	08042000 	call	804200 <___vfprintf_internal_r>
  803550:	dfc00117 	ldw	ra,4(sp)
  803554:	dec00404 	addi	sp,sp,16
  803558:	f800283a 	ret

0080355c <_realloc_r>:
  80355c:	defff404 	addi	sp,sp,-48
  803560:	dd800815 	stw	r22,32(sp)
  803564:	dc800415 	stw	r18,16(sp)
  803568:	dc400315 	stw	r17,12(sp)
  80356c:	dfc00b15 	stw	ra,44(sp)
  803570:	df000a15 	stw	fp,40(sp)
  803574:	ddc00915 	stw	r23,36(sp)
  803578:	dd400715 	stw	r21,28(sp)
  80357c:	dd000615 	stw	r20,24(sp)
  803580:	dcc00515 	stw	r19,20(sp)
  803584:	dc000215 	stw	r16,8(sp)
  803588:	2825883a 	mov	r18,r5
  80358c:	3023883a 	mov	r17,r6
  803590:	202d883a 	mov	r22,r4
  803594:	2800c926 	beq	r5,zero,8038bc <_realloc_r+0x360>
  803598:	0810e200 	call	810e20 <__malloc_lock>
  80359c:	943ffe04 	addi	r16,r18,-8
  8035a0:	88c002c4 	addi	r3,r17,11
  8035a4:	00800584 	movi	r2,22
  8035a8:	82000117 	ldw	r8,4(r16)
  8035ac:	10c01b2e 	bgeu	r2,r3,80361c <_realloc_r+0xc0>
  8035b0:	00bffe04 	movi	r2,-8
  8035b4:	188e703a 	and	r7,r3,r2
  8035b8:	3839883a 	mov	fp,r7
  8035bc:	38001a16 	blt	r7,zero,803628 <_realloc_r+0xcc>
  8035c0:	e4401936 	bltu	fp,r17,803628 <_realloc_r+0xcc>
  8035c4:	013fff04 	movi	r4,-4
  8035c8:	4126703a 	and	r19,r8,r4
  8035cc:	99c02616 	blt	r19,r7,803668 <_realloc_r+0x10c>
  8035d0:	802b883a 	mov	r21,r16
  8035d4:	9829883a 	mov	r20,r19
  8035d8:	84000204 	addi	r16,r16,8
  8035dc:	a80f883a 	mov	r7,r21
  8035e0:	a70dc83a 	sub	r6,r20,fp
  8035e4:	008003c4 	movi	r2,15
  8035e8:	1180c136 	bltu	r2,r6,8038f0 <_realloc_r+0x394>
  8035ec:	38800117 	ldw	r2,4(r7)
  8035f0:	a549883a 	add	r4,r20,r21
  8035f4:	1080004c 	andi	r2,r2,1
  8035f8:	a084b03a 	or	r2,r20,r2
  8035fc:	38800115 	stw	r2,4(r7)
  803600:	20c00117 	ldw	r3,4(r4)
  803604:	18c00054 	ori	r3,r3,1
  803608:	20c00115 	stw	r3,4(r4)
  80360c:	b009883a 	mov	r4,r22
  803610:	0810e400 	call	810e40 <__malloc_unlock>
  803614:	8023883a 	mov	r17,r16
  803618:	00000606 	br	803634 <_realloc_r+0xd8>
  80361c:	01c00404 	movi	r7,16
  803620:	3839883a 	mov	fp,r7
  803624:	e47fe72e 	bgeu	fp,r17,8035c4 <_realloc_r+0x68>
  803628:	00800304 	movi	r2,12
  80362c:	0023883a 	mov	r17,zero
  803630:	b0800015 	stw	r2,0(r22)
  803634:	8805883a 	mov	r2,r17
  803638:	dfc00b17 	ldw	ra,44(sp)
  80363c:	df000a17 	ldw	fp,40(sp)
  803640:	ddc00917 	ldw	r23,36(sp)
  803644:	dd800817 	ldw	r22,32(sp)
  803648:	dd400717 	ldw	r21,28(sp)
  80364c:	dd000617 	ldw	r20,24(sp)
  803650:	dcc00517 	ldw	r19,20(sp)
  803654:	dc800417 	ldw	r18,16(sp)
  803658:	dc400317 	ldw	r17,12(sp)
  80365c:	dc000217 	ldw	r16,8(sp)
  803660:	dec00c04 	addi	sp,sp,48
  803664:	f800283a 	ret
  803668:	00802074 	movhi	r2,129
  80366c:	1095c204 	addi	r2,r2,22280
  803670:	12400217 	ldw	r9,8(r2)
  803674:	84cd883a 	add	r6,r16,r19
  803678:	802b883a 	mov	r21,r16
  80367c:	3240b926 	beq	r6,r9,803964 <_realloc_r+0x408>
  803680:	31400117 	ldw	r5,4(r6)
  803684:	00bfff84 	movi	r2,-2
  803688:	2884703a 	and	r2,r5,r2
  80368c:	1185883a 	add	r2,r2,r6
  803690:	10c00117 	ldw	r3,4(r2)
  803694:	18c0004c 	andi	r3,r3,1
  803698:	1807003a 	cmpeq	r3,r3,zero
  80369c:	1800a326 	beq	r3,zero,80392c <_realloc_r+0x3d0>
  8036a0:	2908703a 	and	r4,r5,r4
  8036a4:	9929883a 	add	r20,r19,r4
  8036a8:	a1c0a30e 	bge	r20,r7,803938 <_realloc_r+0x3dc>
  8036ac:	4080004c 	andi	r2,r8,1
  8036b0:	1000551e 	bne	r2,zero,803808 <_realloc_r+0x2ac>
  8036b4:	80800017 	ldw	r2,0(r16)
  8036b8:	80afc83a 	sub	r23,r16,r2
  8036bc:	b8c00117 	ldw	r3,4(r23)
  8036c0:	00bfff04 	movi	r2,-4
  8036c4:	1884703a 	and	r2,r3,r2
  8036c8:	30002e26 	beq	r6,zero,803784 <_realloc_r+0x228>
  8036cc:	3240b926 	beq	r6,r9,8039b4 <_realloc_r+0x458>
  8036d0:	98a9883a 	add	r20,r19,r2
  8036d4:	2509883a 	add	r4,r4,r20
  8036d8:	d9000015 	stw	r4,0(sp)
  8036dc:	21c02a16 	blt	r4,r7,803788 <_realloc_r+0x22c>
  8036e0:	30800317 	ldw	r2,12(r6)
  8036e4:	30c00217 	ldw	r3,8(r6)
  8036e8:	01400904 	movi	r5,36
  8036ec:	99bfff04 	addi	r6,r19,-4
  8036f0:	18800315 	stw	r2,12(r3)
  8036f4:	10c00215 	stw	r3,8(r2)
  8036f8:	b9000317 	ldw	r4,12(r23)
  8036fc:	b8800217 	ldw	r2,8(r23)
  803700:	b82b883a 	mov	r21,r23
  803704:	bc000204 	addi	r16,r23,8
  803708:	20800215 	stw	r2,8(r4)
  80370c:	11000315 	stw	r4,12(r2)
  803710:	2980e436 	bltu	r5,r6,803aa4 <_realloc_r+0x548>
  803714:	008004c4 	movi	r2,19
  803718:	9009883a 	mov	r4,r18
  80371c:	8011883a 	mov	r8,r16
  803720:	11800f2e 	bgeu	r2,r6,803760 <_realloc_r+0x204>
  803724:	90800017 	ldw	r2,0(r18)
  803728:	ba000404 	addi	r8,r23,16
  80372c:	91000204 	addi	r4,r18,8
  803730:	b8800215 	stw	r2,8(r23)
  803734:	90c00117 	ldw	r3,4(r18)
  803738:	008006c4 	movi	r2,27
  80373c:	b8c00315 	stw	r3,12(r23)
  803740:	1180072e 	bgeu	r2,r6,803760 <_realloc_r+0x204>
  803744:	90c00217 	ldw	r3,8(r18)
  803748:	ba000604 	addi	r8,r23,24
  80374c:	91000404 	addi	r4,r18,16
  803750:	b8c00415 	stw	r3,16(r23)
  803754:	90800317 	ldw	r2,12(r18)
  803758:	b8800515 	stw	r2,20(r23)
  80375c:	3140e726 	beq	r6,r5,803afc <_realloc_r+0x5a0>
  803760:	20800017 	ldw	r2,0(r4)
  803764:	dd000017 	ldw	r20,0(sp)
  803768:	b80f883a 	mov	r7,r23
  80376c:	40800015 	stw	r2,0(r8)
  803770:	20c00117 	ldw	r3,4(r4)
  803774:	40c00115 	stw	r3,4(r8)
  803778:	20800217 	ldw	r2,8(r4)
  80377c:	40800215 	stw	r2,8(r8)
  803780:	003f9706 	br	8035e0 <_realloc_r+0x84>
  803784:	98a9883a 	add	r20,r19,r2
  803788:	a1c01f16 	blt	r20,r7,803808 <_realloc_r+0x2ac>
  80378c:	b8c00317 	ldw	r3,12(r23)
  803790:	b8800217 	ldw	r2,8(r23)
  803794:	99bfff04 	addi	r6,r19,-4
  803798:	01400904 	movi	r5,36
  80379c:	b82b883a 	mov	r21,r23
  8037a0:	18800215 	stw	r2,8(r3)
  8037a4:	10c00315 	stw	r3,12(r2)
  8037a8:	bc000204 	addi	r16,r23,8
  8037ac:	2980c336 	bltu	r5,r6,803abc <_realloc_r+0x560>
  8037b0:	008004c4 	movi	r2,19
  8037b4:	9009883a 	mov	r4,r18
  8037b8:	8011883a 	mov	r8,r16
  8037bc:	11800f2e 	bgeu	r2,r6,8037fc <_realloc_r+0x2a0>
  8037c0:	90800017 	ldw	r2,0(r18)
  8037c4:	ba000404 	addi	r8,r23,16
  8037c8:	91000204 	addi	r4,r18,8
  8037cc:	b8800215 	stw	r2,8(r23)
  8037d0:	90c00117 	ldw	r3,4(r18)
  8037d4:	008006c4 	movi	r2,27
  8037d8:	b8c00315 	stw	r3,12(r23)
  8037dc:	1180072e 	bgeu	r2,r6,8037fc <_realloc_r+0x2a0>
  8037e0:	90c00217 	ldw	r3,8(r18)
  8037e4:	ba000604 	addi	r8,r23,24
  8037e8:	91000404 	addi	r4,r18,16
  8037ec:	b8c00415 	stw	r3,16(r23)
  8037f0:	90800317 	ldw	r2,12(r18)
  8037f4:	b8800515 	stw	r2,20(r23)
  8037f8:	3140c726 	beq	r6,r5,803b18 <_realloc_r+0x5bc>
  8037fc:	20800017 	ldw	r2,0(r4)
  803800:	b80f883a 	mov	r7,r23
  803804:	003fd906 	br	80376c <_realloc_r+0x210>
  803808:	880b883a 	mov	r5,r17
  80380c:	b009883a 	mov	r4,r22
  803810:	0802a300 	call	802a30 <_malloc_r>
  803814:	1023883a 	mov	r17,r2
  803818:	10002526 	beq	r2,zero,8038b0 <_realloc_r+0x354>
  80381c:	80800117 	ldw	r2,4(r16)
  803820:	00ffff84 	movi	r3,-2
  803824:	893ffe04 	addi	r4,r17,-8
  803828:	10c4703a 	and	r2,r2,r3
  80382c:	8085883a 	add	r2,r16,r2
  803830:	20809526 	beq	r4,r2,803a88 <_realloc_r+0x52c>
  803834:	99bfff04 	addi	r6,r19,-4
  803838:	01c00904 	movi	r7,36
  80383c:	39804536 	bltu	r7,r6,803954 <_realloc_r+0x3f8>
  803840:	008004c4 	movi	r2,19
  803844:	9009883a 	mov	r4,r18
  803848:	880b883a 	mov	r5,r17
  80384c:	11800f2e 	bgeu	r2,r6,80388c <_realloc_r+0x330>
  803850:	90800017 	ldw	r2,0(r18)
  803854:	89400204 	addi	r5,r17,8
  803858:	91000204 	addi	r4,r18,8
  80385c:	88800015 	stw	r2,0(r17)
  803860:	90c00117 	ldw	r3,4(r18)
  803864:	008006c4 	movi	r2,27
  803868:	88c00115 	stw	r3,4(r17)
  80386c:	1180072e 	bgeu	r2,r6,80388c <_realloc_r+0x330>
  803870:	90c00217 	ldw	r3,8(r18)
  803874:	89400404 	addi	r5,r17,16
  803878:	91000404 	addi	r4,r18,16
  80387c:	88c00215 	stw	r3,8(r17)
  803880:	90800317 	ldw	r2,12(r18)
  803884:	88800315 	stw	r2,12(r17)
  803888:	31c09126 	beq	r6,r7,803ad0 <_realloc_r+0x574>
  80388c:	20800017 	ldw	r2,0(r4)
  803890:	28800015 	stw	r2,0(r5)
  803894:	20c00117 	ldw	r3,4(r4)
  803898:	28c00115 	stw	r3,4(r5)
  80389c:	20800217 	ldw	r2,8(r4)
  8038a0:	28800215 	stw	r2,8(r5)
  8038a4:	900b883a 	mov	r5,r18
  8038a8:	b009883a 	mov	r4,r22
  8038ac:	0801a980 	call	801a98 <_free_r>
  8038b0:	b009883a 	mov	r4,r22
  8038b4:	0810e400 	call	810e40 <__malloc_unlock>
  8038b8:	003f5e06 	br	803634 <_realloc_r+0xd8>
  8038bc:	300b883a 	mov	r5,r6
  8038c0:	dfc00b17 	ldw	ra,44(sp)
  8038c4:	df000a17 	ldw	fp,40(sp)
  8038c8:	ddc00917 	ldw	r23,36(sp)
  8038cc:	dd800817 	ldw	r22,32(sp)
  8038d0:	dd400717 	ldw	r21,28(sp)
  8038d4:	dd000617 	ldw	r20,24(sp)
  8038d8:	dcc00517 	ldw	r19,20(sp)
  8038dc:	dc800417 	ldw	r18,16(sp)
  8038e0:	dc400317 	ldw	r17,12(sp)
  8038e4:	dc000217 	ldw	r16,8(sp)
  8038e8:	dec00c04 	addi	sp,sp,48
  8038ec:	0802a301 	jmpi	802a30 <_malloc_r>
  8038f0:	38800117 	ldw	r2,4(r7)
  8038f4:	e54b883a 	add	r5,fp,r21
  8038f8:	31000054 	ori	r4,r6,1
  8038fc:	1080004c 	andi	r2,r2,1
  803900:	1704b03a 	or	r2,r2,fp
  803904:	38800115 	stw	r2,4(r7)
  803908:	29000115 	stw	r4,4(r5)
  80390c:	2987883a 	add	r3,r5,r6
  803910:	18800117 	ldw	r2,4(r3)
  803914:	29400204 	addi	r5,r5,8
  803918:	b009883a 	mov	r4,r22
  80391c:	10800054 	ori	r2,r2,1
  803920:	18800115 	stw	r2,4(r3)
  803924:	0801a980 	call	801a98 <_free_r>
  803928:	003f3806 	br	80360c <_realloc_r+0xb0>
  80392c:	000d883a 	mov	r6,zero
  803930:	0009883a 	mov	r4,zero
  803934:	003f5d06 	br	8036ac <_realloc_r+0x150>
  803938:	30c00217 	ldw	r3,8(r6)
  80393c:	30800317 	ldw	r2,12(r6)
  803940:	800f883a 	mov	r7,r16
  803944:	84000204 	addi	r16,r16,8
  803948:	10c00215 	stw	r3,8(r2)
  80394c:	18800315 	stw	r2,12(r3)
  803950:	003f2306 	br	8035e0 <_realloc_r+0x84>
  803954:	8809883a 	mov	r4,r17
  803958:	900b883a 	mov	r5,r18
  80395c:	08032f40 	call	8032f4 <memmove>
  803960:	003fd006 	br	8038a4 <_realloc_r+0x348>
  803964:	30800117 	ldw	r2,4(r6)
  803968:	e0c00404 	addi	r3,fp,16
  80396c:	1108703a 	and	r4,r2,r4
  803970:	9905883a 	add	r2,r19,r4
  803974:	10ff4d16 	blt	r2,r3,8036ac <_realloc_r+0x150>
  803978:	1705c83a 	sub	r2,r2,fp
  80397c:	870b883a 	add	r5,r16,fp
  803980:	10800054 	ori	r2,r2,1
  803984:	28800115 	stw	r2,4(r5)
  803988:	80c00117 	ldw	r3,4(r16)
  80398c:	00802074 	movhi	r2,129
  803990:	1095c204 	addi	r2,r2,22280
  803994:	b009883a 	mov	r4,r22
  803998:	18c0004c 	andi	r3,r3,1
  80399c:	e0c6b03a 	or	r3,fp,r3
  8039a0:	11400215 	stw	r5,8(r2)
  8039a4:	80c00115 	stw	r3,4(r16)
  8039a8:	0810e400 	call	810e40 <__malloc_unlock>
  8039ac:	84400204 	addi	r17,r16,8
  8039b0:	003f2006 	br	803634 <_realloc_r+0xd8>
  8039b4:	98a9883a 	add	r20,r19,r2
  8039b8:	2509883a 	add	r4,r4,r20
  8039bc:	e0800404 	addi	r2,fp,16
  8039c0:	d9000115 	stw	r4,4(sp)
  8039c4:	20bf7016 	blt	r4,r2,803788 <_realloc_r+0x22c>
  8039c8:	b8c00317 	ldw	r3,12(r23)
  8039cc:	b8800217 	ldw	r2,8(r23)
  8039d0:	99bfff04 	addi	r6,r19,-4
  8039d4:	01400904 	movi	r5,36
  8039d8:	18800215 	stw	r2,8(r3)
  8039dc:	10c00315 	stw	r3,12(r2)
  8039e0:	bc400204 	addi	r17,r23,8
  8039e4:	29804136 	bltu	r5,r6,803aec <_realloc_r+0x590>
  8039e8:	008004c4 	movi	r2,19
  8039ec:	9009883a 	mov	r4,r18
  8039f0:	880f883a 	mov	r7,r17
  8039f4:	11800f2e 	bgeu	r2,r6,803a34 <_realloc_r+0x4d8>
  8039f8:	90800017 	ldw	r2,0(r18)
  8039fc:	b9c00404 	addi	r7,r23,16
  803a00:	91000204 	addi	r4,r18,8
  803a04:	b8800215 	stw	r2,8(r23)
  803a08:	90c00117 	ldw	r3,4(r18)
  803a0c:	008006c4 	movi	r2,27
  803a10:	b8c00315 	stw	r3,12(r23)
  803a14:	1180072e 	bgeu	r2,r6,803a34 <_realloc_r+0x4d8>
  803a18:	90c00217 	ldw	r3,8(r18)
  803a1c:	b9c00604 	addi	r7,r23,24
  803a20:	91000404 	addi	r4,r18,16
  803a24:	b8c00415 	stw	r3,16(r23)
  803a28:	90800317 	ldw	r2,12(r18)
  803a2c:	b8800515 	stw	r2,20(r23)
  803a30:	31404026 	beq	r6,r5,803b34 <_realloc_r+0x5d8>
  803a34:	20800017 	ldw	r2,0(r4)
  803a38:	38800015 	stw	r2,0(r7)
  803a3c:	20c00117 	ldw	r3,4(r4)
  803a40:	38c00115 	stw	r3,4(r7)
  803a44:	20800217 	ldw	r2,8(r4)
  803a48:	38800215 	stw	r2,8(r7)
  803a4c:	d8c00117 	ldw	r3,4(sp)
  803a50:	bf0b883a 	add	r5,r23,fp
  803a54:	b009883a 	mov	r4,r22
  803a58:	1f05c83a 	sub	r2,r3,fp
  803a5c:	10800054 	ori	r2,r2,1
  803a60:	28800115 	stw	r2,4(r5)
  803a64:	b8c00117 	ldw	r3,4(r23)
  803a68:	00802074 	movhi	r2,129
  803a6c:	1095c204 	addi	r2,r2,22280
  803a70:	11400215 	stw	r5,8(r2)
  803a74:	18c0004c 	andi	r3,r3,1
  803a78:	e0c6b03a 	or	r3,fp,r3
  803a7c:	b8c00115 	stw	r3,4(r23)
  803a80:	0810e400 	call	810e40 <__malloc_unlock>
  803a84:	003eeb06 	br	803634 <_realloc_r+0xd8>
  803a88:	20800117 	ldw	r2,4(r4)
  803a8c:	00ffff04 	movi	r3,-4
  803a90:	800f883a 	mov	r7,r16
  803a94:	10c4703a 	and	r2,r2,r3
  803a98:	98a9883a 	add	r20,r19,r2
  803a9c:	84000204 	addi	r16,r16,8
  803aa0:	003ecf06 	br	8035e0 <_realloc_r+0x84>
  803aa4:	900b883a 	mov	r5,r18
  803aa8:	8009883a 	mov	r4,r16
  803aac:	08032f40 	call	8032f4 <memmove>
  803ab0:	dd000017 	ldw	r20,0(sp)
  803ab4:	b80f883a 	mov	r7,r23
  803ab8:	003ec906 	br	8035e0 <_realloc_r+0x84>
  803abc:	900b883a 	mov	r5,r18
  803ac0:	8009883a 	mov	r4,r16
  803ac4:	08032f40 	call	8032f4 <memmove>
  803ac8:	b80f883a 	mov	r7,r23
  803acc:	003ec406 	br	8035e0 <_realloc_r+0x84>
  803ad0:	90c00417 	ldw	r3,16(r18)
  803ad4:	89400604 	addi	r5,r17,24
  803ad8:	91000604 	addi	r4,r18,24
  803adc:	88c00415 	stw	r3,16(r17)
  803ae0:	90800517 	ldw	r2,20(r18)
  803ae4:	88800515 	stw	r2,20(r17)
  803ae8:	003f6806 	br	80388c <_realloc_r+0x330>
  803aec:	900b883a 	mov	r5,r18
  803af0:	8809883a 	mov	r4,r17
  803af4:	08032f40 	call	8032f4 <memmove>
  803af8:	003fd406 	br	803a4c <_realloc_r+0x4f0>
  803afc:	90c00417 	ldw	r3,16(r18)
  803b00:	91000604 	addi	r4,r18,24
  803b04:	ba000804 	addi	r8,r23,32
  803b08:	b8c00615 	stw	r3,24(r23)
  803b0c:	90800517 	ldw	r2,20(r18)
  803b10:	b8800715 	stw	r2,28(r23)
  803b14:	003f1206 	br	803760 <_realloc_r+0x204>
  803b18:	90c00417 	ldw	r3,16(r18)
  803b1c:	91000604 	addi	r4,r18,24
  803b20:	ba000804 	addi	r8,r23,32
  803b24:	b8c00615 	stw	r3,24(r23)
  803b28:	90800517 	ldw	r2,20(r18)
  803b2c:	b8800715 	stw	r2,28(r23)
  803b30:	003f3206 	br	8037fc <_realloc_r+0x2a0>
  803b34:	90c00417 	ldw	r3,16(r18)
  803b38:	91000604 	addi	r4,r18,24
  803b3c:	b9c00804 	addi	r7,r23,32
  803b40:	b8c00615 	stw	r3,24(r23)
  803b44:	90800517 	ldw	r2,20(r18)
  803b48:	b8800715 	stw	r2,28(r23)
  803b4c:	003fb906 	br	803a34 <_realloc_r+0x4d8>

00803b50 <__srefill_r>:
  803b50:	defffd04 	addi	sp,sp,-12
  803b54:	dc400115 	stw	r17,4(sp)
  803b58:	dc000015 	stw	r16,0(sp)
  803b5c:	dfc00215 	stw	ra,8(sp)
  803b60:	2023883a 	mov	r17,r4
  803b64:	2821883a 	mov	r16,r5
  803b68:	20000226 	beq	r4,zero,803b74 <__srefill_r+0x24>
  803b6c:	20800e17 	ldw	r2,56(r4)
  803b70:	10004126 	beq	r2,zero,803c78 <__srefill_r+0x128>
  803b74:	80c0030b 	ldhu	r3,12(r16)
  803b78:	80000115 	stw	zero,4(r16)
  803b7c:	1880080c 	andi	r2,r3,32
  803b80:	1000361e 	bne	r2,zero,803c5c <__srefill_r+0x10c>
  803b84:	1880010c 	andi	r2,r3,4
  803b88:	1000211e 	bne	r2,zero,803c10 <__srefill_r+0xc0>
  803b8c:	1880040c 	andi	r2,r3,16
  803b90:	10005026 	beq	r2,zero,803cd4 <__srefill_r+0x184>
  803b94:	1880020c 	andi	r2,r3,8
  803b98:	1000541e 	bne	r2,zero,803cec <__srefill_r+0x19c>
  803b9c:	8080030b 	ldhu	r2,12(r16)
  803ba0:	10800114 	ori	r2,r2,4
  803ba4:	8080030d 	sth	r2,12(r16)
  803ba8:	80800417 	ldw	r2,16(r16)
  803bac:	10004526 	beq	r2,zero,803cc4 <__srefill_r+0x174>
  803bb0:	8080030b 	ldhu	r2,12(r16)
  803bb4:	108000cc 	andi	r2,r2,3
  803bb8:	1000361e 	bne	r2,zero,803c94 <__srefill_r+0x144>
  803bbc:	81800417 	ldw	r6,16(r16)
  803bc0:	80c00817 	ldw	r3,32(r16)
  803bc4:	81400717 	ldw	r5,28(r16)
  803bc8:	81c00517 	ldw	r7,20(r16)
  803bcc:	8809883a 	mov	r4,r17
  803bd0:	81800015 	stw	r6,0(r16)
  803bd4:	183ee83a 	callr	r3
  803bd8:	80c0030b 	ldhu	r3,12(r16)
  803bdc:	1009883a 	mov	r4,r2
  803be0:	80800115 	stw	r2,4(r16)
  803be4:	00b7ffc4 	movi	r2,-8193
  803be8:	1884703a 	and	r2,r3,r2
  803bec:	8080030d 	sth	r2,12(r16)
  803bf0:	0100230e 	bge	zero,r4,803c80 <__srefill_r+0x130>
  803bf4:	0009883a 	mov	r4,zero
  803bf8:	2005883a 	mov	r2,r4
  803bfc:	dfc00217 	ldw	ra,8(sp)
  803c00:	dc400117 	ldw	r17,4(sp)
  803c04:	dc000017 	ldw	r16,0(sp)
  803c08:	dec00304 	addi	sp,sp,12
  803c0c:	f800283a 	ret
  803c10:	81400c17 	ldw	r5,48(r16)
  803c14:	283fe426 	beq	r5,zero,803ba8 <__srefill_r+0x58>
  803c18:	80801004 	addi	r2,r16,64
  803c1c:	28800226 	beq	r5,r2,803c28 <__srefill_r+0xd8>
  803c20:	8809883a 	mov	r4,r17
  803c24:	0801a980 	call	801a98 <_free_r>
  803c28:	80800f17 	ldw	r2,60(r16)
  803c2c:	80000c15 	stw	zero,48(r16)
  803c30:	80800115 	stw	r2,4(r16)
  803c34:	103fdc26 	beq	r2,zero,803ba8 <__srefill_r+0x58>
  803c38:	80800e17 	ldw	r2,56(r16)
  803c3c:	0009883a 	mov	r4,zero
  803c40:	80800015 	stw	r2,0(r16)
  803c44:	2005883a 	mov	r2,r4
  803c48:	dfc00217 	ldw	ra,8(sp)
  803c4c:	dc400117 	ldw	r17,4(sp)
  803c50:	dc000017 	ldw	r16,0(sp)
  803c54:	dec00304 	addi	sp,sp,12
  803c58:	f800283a 	ret
  803c5c:	013fffc4 	movi	r4,-1
  803c60:	2005883a 	mov	r2,r4
  803c64:	dfc00217 	ldw	ra,8(sp)
  803c68:	dc400117 	ldw	r17,4(sp)
  803c6c:	dc000017 	ldw	r16,0(sp)
  803c70:	dec00304 	addi	sp,sp,12
  803c74:	f800283a 	ret
  803c78:	08015140 	call	801514 <__sinit>
  803c7c:	003fbd06 	br	803b74 <__srefill_r+0x24>
  803c80:	20000b1e 	bne	r4,zero,803cb0 <__srefill_r+0x160>
  803c84:	10800814 	ori	r2,r2,32
  803c88:	013fffc4 	movi	r4,-1
  803c8c:	8080030d 	sth	r2,12(r16)
  803c90:	003fd906 	br	803bf8 <__srefill_r+0xa8>
  803c94:	00802074 	movhi	r2,129
  803c98:	109bd104 	addi	r2,r2,28484
  803c9c:	11000017 	ldw	r4,0(r2)
  803ca0:	01402034 	movhi	r5,128
  803ca4:	294f4504 	addi	r5,r5,15636
  803ca8:	08027e40 	call	8027e4 <_fwalk>
  803cac:	003fc306 	br	803bbc <__srefill_r+0x6c>
  803cb0:	10801014 	ori	r2,r2,64
  803cb4:	013fffc4 	movi	r4,-1
  803cb8:	8080030d 	sth	r2,12(r16)
  803cbc:	80000115 	stw	zero,4(r16)
  803cc0:	003fcd06 	br	803bf8 <__srefill_r+0xa8>
  803cc4:	8809883a 	mov	r4,r17
  803cc8:	800b883a 	mov	r5,r16
  803ccc:	080289c0 	call	80289c <__smakebuf_r>
  803cd0:	003fb706 	br	803bb0 <__srefill_r+0x60>
  803cd4:	18c01014 	ori	r3,r3,64
  803cd8:	00800244 	movi	r2,9
  803cdc:	013fffc4 	movi	r4,-1
  803ce0:	88800015 	stw	r2,0(r17)
  803ce4:	80c0030d 	sth	r3,12(r16)
  803ce8:	003fc306 	br	803bf8 <__srefill_r+0xa8>
  803cec:	8809883a 	mov	r4,r17
  803cf0:	800b883a 	mov	r5,r16
  803cf4:	08011540 	call	801154 <_fflush_r>
  803cf8:	103fd81e 	bne	r2,zero,803c5c <__srefill_r+0x10c>
  803cfc:	8080030b 	ldhu	r2,12(r16)
  803d00:	80000215 	stw	zero,8(r16)
  803d04:	80000615 	stw	zero,24(r16)
  803d08:	10bffdcc 	andi	r2,r2,65527
  803d0c:	8080030d 	sth	r2,12(r16)
  803d10:	003fa206 	br	803b9c <__srefill_r+0x4c>

00803d14 <lflush>:
  803d14:	20c0030b 	ldhu	r3,12(r4)
  803d18:	01400244 	movi	r5,9
  803d1c:	0005883a 	mov	r2,zero
  803d20:	18c0024c 	andi	r3,r3,9
  803d24:	19400126 	beq	r3,r5,803d2c <lflush+0x18>
  803d28:	f800283a 	ret
  803d2c:	08013501 	jmpi	801350 <fflush>

00803d30 <__srget_r>:
  803d30:	defffe04 	addi	sp,sp,-8
  803d34:	dc000015 	stw	r16,0(sp)
  803d38:	dfc00115 	stw	ra,4(sp)
  803d3c:	2821883a 	mov	r16,r5
  803d40:	0803b500 	call	803b50 <__srefill_r>
  803d44:	013fffc4 	movi	r4,-1
  803d48:	1000071e 	bne	r2,zero,803d68 <__srget_r+0x38>
  803d4c:	80800117 	ldw	r2,4(r16)
  803d50:	81000017 	ldw	r4,0(r16)
  803d54:	10bfffc4 	addi	r2,r2,-1
  803d58:	20c00044 	addi	r3,r4,1
  803d5c:	80800115 	stw	r2,4(r16)
  803d60:	21000003 	ldbu	r4,0(r4)
  803d64:	80c00015 	stw	r3,0(r16)
  803d68:	2005883a 	mov	r2,r4
  803d6c:	dfc00117 	ldw	ra,4(sp)
  803d70:	dc000017 	ldw	r16,0(sp)
  803d74:	dec00204 	addi	sp,sp,8
  803d78:	f800283a 	ret

00803d7c <__srget>:
  803d7c:	00802074 	movhi	r2,129
  803d80:	109bd004 	addi	r2,r2,28480
  803d84:	200b883a 	mov	r5,r4
  803d88:	11000017 	ldw	r4,0(r2)
  803d8c:	0803d301 	jmpi	803d30 <__srget_r>

00803d90 <_sbrk_r>:
  803d90:	defffd04 	addi	sp,sp,-12
  803d94:	dc000015 	stw	r16,0(sp)
  803d98:	040020b4 	movhi	r16,130
  803d9c:	84232604 	addi	r16,r16,-29544
  803da0:	dc400115 	stw	r17,4(sp)
  803da4:	80000015 	stw	zero,0(r16)
  803da8:	2023883a 	mov	r17,r4
  803dac:	2809883a 	mov	r4,r5
  803db0:	dfc00215 	stw	ra,8(sp)
  803db4:	08113040 	call	811304 <sbrk>
  803db8:	1007883a 	mov	r3,r2
  803dbc:	00bfffc4 	movi	r2,-1
  803dc0:	18800626 	beq	r3,r2,803ddc <_sbrk_r+0x4c>
  803dc4:	1805883a 	mov	r2,r3
  803dc8:	dfc00217 	ldw	ra,8(sp)
  803dcc:	dc400117 	ldw	r17,4(sp)
  803dd0:	dc000017 	ldw	r16,0(sp)
  803dd4:	dec00304 	addi	sp,sp,12
  803dd8:	f800283a 	ret
  803ddc:	80800017 	ldw	r2,0(r16)
  803de0:	103ff826 	beq	r2,zero,803dc4 <_sbrk_r+0x34>
  803de4:	88800015 	stw	r2,0(r17)
  803de8:	1805883a 	mov	r2,r3
  803dec:	dfc00217 	ldw	ra,8(sp)
  803df0:	dc400117 	ldw	r17,4(sp)
  803df4:	dc000017 	ldw	r16,0(sp)
  803df8:	dec00304 	addi	sp,sp,12
  803dfc:	f800283a 	ret

00803e00 <sprintf>:
  803e00:	deffe504 	addi	sp,sp,-108
  803e04:	2013883a 	mov	r9,r4
  803e08:	dfc01815 	stw	ra,96(sp)
  803e0c:	d9801915 	stw	r6,100(sp)
  803e10:	d9c01a15 	stw	r7,104(sp)
  803e14:	d8801904 	addi	r2,sp,100
  803e18:	d8800015 	stw	r2,0(sp)
  803e1c:	00802074 	movhi	r2,129
  803e20:	109bd004 	addi	r2,r2,28480
  803e24:	11000017 	ldw	r4,0(r2)
  803e28:	d9c00017 	ldw	r7,0(sp)
  803e2c:	00808204 	movi	r2,520
  803e30:	00e00034 	movhi	r3,32768
  803e34:	18ffffc4 	addi	r3,r3,-1
  803e38:	280d883a 	mov	r6,r5
  803e3c:	d880040d 	sth	r2,16(sp)
  803e40:	d9400104 	addi	r5,sp,4
  803e44:	00bfffc4 	movi	r2,-1
  803e48:	d8c00615 	stw	r3,24(sp)
  803e4c:	d8c00315 	stw	r3,12(sp)
  803e50:	da400515 	stw	r9,20(sp)
  803e54:	d880048d 	sth	r2,18(sp)
  803e58:	da400115 	stw	r9,4(sp)
  803e5c:	08042000 	call	804200 <___vfprintf_internal_r>
  803e60:	d8c00117 	ldw	r3,4(sp)
  803e64:	18000005 	stb	zero,0(r3)
  803e68:	dfc01817 	ldw	ra,96(sp)
  803e6c:	dec01b04 	addi	sp,sp,108
  803e70:	f800283a 	ret

00803e74 <_sprintf_r>:
  803e74:	deffe604 	addi	sp,sp,-104
  803e78:	2813883a 	mov	r9,r5
  803e7c:	dfc01815 	stw	ra,96(sp)
  803e80:	d9c01915 	stw	r7,100(sp)
  803e84:	d8801904 	addi	r2,sp,100
  803e88:	d8800015 	stw	r2,0(sp)
  803e8c:	100f883a 	mov	r7,r2
  803e90:	00808204 	movi	r2,520
  803e94:	00e00034 	movhi	r3,32768
  803e98:	18ffffc4 	addi	r3,r3,-1
  803e9c:	d880040d 	sth	r2,16(sp)
  803ea0:	d9400104 	addi	r5,sp,4
  803ea4:	00bfffc4 	movi	r2,-1
  803ea8:	d8c00615 	stw	r3,24(sp)
  803eac:	d8c00315 	stw	r3,12(sp)
  803eb0:	da400515 	stw	r9,20(sp)
  803eb4:	d880048d 	sth	r2,18(sp)
  803eb8:	da400115 	stw	r9,4(sp)
  803ebc:	08042000 	call	804200 <___vfprintf_internal_r>
  803ec0:	d8c00117 	ldw	r3,4(sp)
  803ec4:	18000005 	stb	zero,0(r3)
  803ec8:	dfc01817 	ldw	ra,96(sp)
  803ecc:	dec01a04 	addi	sp,sp,104
  803ed0:	f800283a 	ret

00803ed4 <eofread>:
  803ed4:	0005883a 	mov	r2,zero
  803ed8:	f800283a 	ret

00803edc <_sscanf_r>:
  803edc:	deffe404 	addi	sp,sp,-112
  803ee0:	dcc01915 	stw	r19,100(sp)
  803ee4:	2027883a 	mov	r19,r4
  803ee8:	dfc01a15 	stw	ra,104(sp)
  803eec:	dc401815 	stw	r17,96(sp)
  803ef0:	d9c01b15 	stw	r7,108(sp)
  803ef4:	00808104 	movi	r2,516
  803ef8:	2809883a 	mov	r4,r5
  803efc:	3023883a 	mov	r17,r6
  803f00:	d9400115 	stw	r5,4(sp)
  803f04:	d9400515 	stw	r5,20(sp)
  803f08:	d880040d 	sth	r2,16(sp)
  803f0c:	08041340 	call	804134 <strlen>
  803f10:	d8c01b04 	addi	r3,sp,108
  803f14:	d8c00015 	stw	r3,0(sp)
  803f18:	180f883a 	mov	r7,r3
  803f1c:	023fffc4 	movi	r8,-1
  803f20:	00c02034 	movhi	r3,128
  803f24:	18cfb504 	addi	r3,r3,16084
  803f28:	9809883a 	mov	r4,r19
  803f2c:	880d883a 	mov	r6,r17
  803f30:	d9400104 	addi	r5,sp,4
  803f34:	d8800615 	stw	r2,24(sp)
  803f38:	d8c00915 	stw	r3,36(sp)
  803f3c:	da00048d 	sth	r8,18(sp)
  803f40:	d8800215 	stw	r2,8(sp)
  803f44:	d8000d15 	stw	zero,52(sp)
  803f48:	d8001215 	stw	zero,72(sp)
  803f4c:	08060d00 	call	8060d0 <__svfscanf_r>
  803f50:	dfc01a17 	ldw	ra,104(sp)
  803f54:	dcc01917 	ldw	r19,100(sp)
  803f58:	dc401817 	ldw	r17,96(sp)
  803f5c:	dec01c04 	addi	sp,sp,112
  803f60:	f800283a 	ret

00803f64 <sscanf>:
  803f64:	deffe404 	addi	sp,sp,-112
  803f68:	dfc01915 	stw	ra,100(sp)
  803f6c:	dc401815 	stw	r17,96(sp)
  803f70:	d9801a15 	stw	r6,104(sp)
  803f74:	d9c01b15 	stw	r7,108(sp)
  803f78:	00808104 	movi	r2,516
  803f7c:	2823883a 	mov	r17,r5
  803f80:	d9000515 	stw	r4,20(sp)
  803f84:	d9000115 	stw	r4,4(sp)
  803f88:	d880040d 	sth	r2,16(sp)
  803f8c:	08041340 	call	804134 <strlen>
  803f90:	d8c01a04 	addi	r3,sp,104
  803f94:	d8c00015 	stw	r3,0(sp)
  803f98:	00c02074 	movhi	r3,129
  803f9c:	18dbd004 	addi	r3,r3,28480
  803fa0:	19000017 	ldw	r4,0(r3)
  803fa4:	d9c00017 	ldw	r7,0(sp)
  803fa8:	00c02034 	movhi	r3,128
  803fac:	18cfb504 	addi	r3,r3,16084
  803fb0:	023fffc4 	movi	r8,-1
  803fb4:	880d883a 	mov	r6,r17
  803fb8:	d9400104 	addi	r5,sp,4
  803fbc:	d8800615 	stw	r2,24(sp)
  803fc0:	d8c00915 	stw	r3,36(sp)
  803fc4:	da00048d 	sth	r8,18(sp)
  803fc8:	d8800215 	stw	r2,8(sp)
  803fcc:	d8000d15 	stw	zero,52(sp)
  803fd0:	d8001215 	stw	zero,72(sp)
  803fd4:	08060d00 	call	8060d0 <__svfscanf_r>
  803fd8:	dfc01917 	ldw	ra,100(sp)
  803fdc:	dc401817 	ldw	r17,96(sp)
  803fe0:	dec01c04 	addi	sp,sp,112
  803fe4:	f800283a 	ret

00803fe8 <__sclose>:
  803fe8:	2940038f 	ldh	r5,14(r5)
  803fec:	0807a041 	jmpi	807a04 <_close_r>

00803ff0 <__sseek>:
  803ff0:	defffe04 	addi	sp,sp,-8
  803ff4:	dc000015 	stw	r16,0(sp)
  803ff8:	2821883a 	mov	r16,r5
  803ffc:	2940038f 	ldh	r5,14(r5)
  804000:	dfc00115 	stw	ra,4(sp)
  804004:	080967c0 	call	80967c <_lseek_r>
  804008:	1007883a 	mov	r3,r2
  80400c:	00bfffc4 	movi	r2,-1
  804010:	18800926 	beq	r3,r2,804038 <__sseek+0x48>
  804014:	8080030b 	ldhu	r2,12(r16)
  804018:	80c01415 	stw	r3,80(r16)
  80401c:	10840014 	ori	r2,r2,4096
  804020:	8080030d 	sth	r2,12(r16)
  804024:	1805883a 	mov	r2,r3
  804028:	dfc00117 	ldw	ra,4(sp)
  80402c:	dc000017 	ldw	r16,0(sp)
  804030:	dec00204 	addi	sp,sp,8
  804034:	f800283a 	ret
  804038:	8080030b 	ldhu	r2,12(r16)
  80403c:	10bbffcc 	andi	r2,r2,61439
  804040:	8080030d 	sth	r2,12(r16)
  804044:	1805883a 	mov	r2,r3
  804048:	dfc00117 	ldw	ra,4(sp)
  80404c:	dc000017 	ldw	r16,0(sp)
  804050:	dec00204 	addi	sp,sp,8
  804054:	f800283a 	ret

00804058 <__swrite>:
  804058:	2880030b 	ldhu	r2,12(r5)
  80405c:	defffb04 	addi	sp,sp,-20
  804060:	dcc00315 	stw	r19,12(sp)
  804064:	1080400c 	andi	r2,r2,256
  804068:	dc800215 	stw	r18,8(sp)
  80406c:	dc400115 	stw	r17,4(sp)
  804070:	dc000015 	stw	r16,0(sp)
  804074:	3027883a 	mov	r19,r6
  804078:	3825883a 	mov	r18,r7
  80407c:	dfc00415 	stw	ra,16(sp)
  804080:	2821883a 	mov	r16,r5
  804084:	000d883a 	mov	r6,zero
  804088:	01c00084 	movi	r7,2
  80408c:	2023883a 	mov	r17,r4
  804090:	10000226 	beq	r2,zero,80409c <__swrite+0x44>
  804094:	2940038f 	ldh	r5,14(r5)
  804098:	080967c0 	call	80967c <_lseek_r>
  80409c:	8080030b 	ldhu	r2,12(r16)
  8040a0:	8140038f 	ldh	r5,14(r16)
  8040a4:	8809883a 	mov	r4,r17
  8040a8:	10bbffcc 	andi	r2,r2,61439
  8040ac:	980d883a 	mov	r6,r19
  8040b0:	900f883a 	mov	r7,r18
  8040b4:	8080030d 	sth	r2,12(r16)
  8040b8:	dfc00417 	ldw	ra,16(sp)
  8040bc:	dcc00317 	ldw	r19,12(sp)
  8040c0:	dc800217 	ldw	r18,8(sp)
  8040c4:	dc400117 	ldw	r17,4(sp)
  8040c8:	dc000017 	ldw	r16,0(sp)
  8040cc:	dec00504 	addi	sp,sp,20
  8040d0:	08078501 	jmpi	807850 <_write_r>

008040d4 <__sread>:
  8040d4:	defffe04 	addi	sp,sp,-8
  8040d8:	dc000015 	stw	r16,0(sp)
  8040dc:	2821883a 	mov	r16,r5
  8040e0:	2940038f 	ldh	r5,14(r5)
  8040e4:	dfc00115 	stw	ra,4(sp)
  8040e8:	080a7e80 	call	80a7e8 <_read_r>
  8040ec:	1007883a 	mov	r3,r2
  8040f0:	10000816 	blt	r2,zero,804114 <__sread+0x40>
  8040f4:	80801417 	ldw	r2,80(r16)
  8040f8:	10c5883a 	add	r2,r2,r3
  8040fc:	80801415 	stw	r2,80(r16)
  804100:	1805883a 	mov	r2,r3
  804104:	dfc00117 	ldw	ra,4(sp)
  804108:	dc000017 	ldw	r16,0(sp)
  80410c:	dec00204 	addi	sp,sp,8
  804110:	f800283a 	ret
  804114:	8080030b 	ldhu	r2,12(r16)
  804118:	10bbffcc 	andi	r2,r2,61439
  80411c:	8080030d 	sth	r2,12(r16)
  804120:	1805883a 	mov	r2,r3
  804124:	dfc00117 	ldw	ra,4(sp)
  804128:	dc000017 	ldw	r16,0(sp)
  80412c:	dec00204 	addi	sp,sp,8
  804130:	f800283a 	ret

00804134 <strlen>:
  804134:	208000cc 	andi	r2,r4,3
  804138:	2011883a 	mov	r8,r4
  80413c:	1000161e 	bne	r2,zero,804198 <strlen+0x64>
  804140:	20c00017 	ldw	r3,0(r4)
  804144:	017fbff4 	movhi	r5,65279
  804148:	297fbfc4 	addi	r5,r5,-257
  80414c:	01e02074 	movhi	r7,32897
  804150:	39e02004 	addi	r7,r7,-32640
  804154:	1945883a 	add	r2,r3,r5
  804158:	11c4703a 	and	r2,r2,r7
  80415c:	00c6303a 	nor	r3,zero,r3
  804160:	1886703a 	and	r3,r3,r2
  804164:	18000c1e 	bne	r3,zero,804198 <strlen+0x64>
  804168:	280d883a 	mov	r6,r5
  80416c:	380b883a 	mov	r5,r7
  804170:	21000104 	addi	r4,r4,4
  804174:	20800017 	ldw	r2,0(r4)
  804178:	1187883a 	add	r3,r2,r6
  80417c:	1946703a 	and	r3,r3,r5
  804180:	0084303a 	nor	r2,zero,r2
  804184:	10c4703a 	and	r2,r2,r3
  804188:	103ff926 	beq	r2,zero,804170 <strlen+0x3c>
  80418c:	20800007 	ldb	r2,0(r4)
  804190:	10000326 	beq	r2,zero,8041a0 <strlen+0x6c>
  804194:	21000044 	addi	r4,r4,1
  804198:	20800007 	ldb	r2,0(r4)
  80419c:	103ffd1e 	bne	r2,zero,804194 <strlen+0x60>
  8041a0:	2205c83a 	sub	r2,r4,r8
  8041a4:	f800283a 	ret

008041a8 <__sprint_r>:
  8041a8:	30800217 	ldw	r2,8(r6)
  8041ac:	defffe04 	addi	sp,sp,-8
  8041b0:	dc000015 	stw	r16,0(sp)
  8041b4:	dfc00115 	stw	ra,4(sp)
  8041b8:	3021883a 	mov	r16,r6
  8041bc:	0007883a 	mov	r3,zero
  8041c0:	1000061e 	bne	r2,zero,8041dc <__sprint_r+0x34>
  8041c4:	1805883a 	mov	r2,r3
  8041c8:	30000115 	stw	zero,4(r6)
  8041cc:	dfc00117 	ldw	ra,4(sp)
  8041d0:	dc000017 	ldw	r16,0(sp)
  8041d4:	dec00204 	addi	sp,sp,8
  8041d8:	f800283a 	ret
  8041dc:	08022800 	call	802280 <__sfvwrite_r>
  8041e0:	1007883a 	mov	r3,r2
  8041e4:	1805883a 	mov	r2,r3
  8041e8:	80000115 	stw	zero,4(r16)
  8041ec:	80000215 	stw	zero,8(r16)
  8041f0:	dfc00117 	ldw	ra,4(sp)
  8041f4:	dc000017 	ldw	r16,0(sp)
  8041f8:	dec00204 	addi	sp,sp,8
  8041fc:	f800283a 	ret

00804200 <___vfprintf_internal_r>:
  804200:	defea304 	addi	sp,sp,-1396
  804204:	dd815915 	stw	r22,1380(sp)
  804208:	dc015315 	stw	r16,1356(sp)
  80420c:	d9c15215 	stw	r7,1352(sp)
  804210:	dfc15c15 	stw	ra,1392(sp)
  804214:	df015b15 	stw	fp,1388(sp)
  804218:	ddc15a15 	stw	r23,1384(sp)
  80421c:	dd415815 	stw	r21,1376(sp)
  804220:	dd015715 	stw	r20,1372(sp)
  804224:	dcc15615 	stw	r19,1368(sp)
  804228:	dc815515 	stw	r18,1364(sp)
  80422c:	dc415415 	stw	r17,1360(sp)
  804230:	282d883a 	mov	r22,r5
  804234:	3021883a 	mov	r16,r6
  804238:	d9015015 	stw	r4,1344(sp)
  80423c:	08095c00 	call	8095c0 <_localeconv_r>
  804240:	10800017 	ldw	r2,0(r2)
  804244:	d9c15217 	ldw	r7,1352(sp)
  804248:	d8814a15 	stw	r2,1320(sp)
  80424c:	d8815017 	ldw	r2,1344(sp)
  804250:	10000226 	beq	r2,zero,80425c <___vfprintf_internal_r+0x5c>
  804254:	10800e17 	ldw	r2,56(r2)
  804258:	10020d26 	beq	r2,zero,804a90 <___vfprintf_internal_r+0x890>
  80425c:	b080030b 	ldhu	r2,12(r22)
  804260:	1080020c 	andi	r2,r2,8
  804264:	10020e26 	beq	r2,zero,804aa0 <___vfprintf_internal_r+0x8a0>
  804268:	b0800417 	ldw	r2,16(r22)
  80426c:	10020c26 	beq	r2,zero,804aa0 <___vfprintf_internal_r+0x8a0>
  804270:	b200030b 	ldhu	r8,12(r22)
  804274:	00800284 	movi	r2,10
  804278:	40c0068c 	andi	r3,r8,26
  80427c:	18802f1e 	bne	r3,r2,80433c <___vfprintf_internal_r+0x13c>
  804280:	b080038f 	ldh	r2,14(r22)
  804284:	10002d16 	blt	r2,zero,80433c <___vfprintf_internal_r+0x13c>
  804288:	b240038b 	ldhu	r9,14(r22)
  80428c:	b2800717 	ldw	r10,28(r22)
  804290:	b2c00917 	ldw	r11,36(r22)
  804294:	d9015017 	ldw	r4,1344(sp)
  804298:	dc402a04 	addi	r17,sp,168
  80429c:	d8804104 	addi	r2,sp,260
  8042a0:	00c10004 	movi	r3,1024
  8042a4:	423fff4c 	andi	r8,r8,65533
  8042a8:	800d883a 	mov	r6,r16
  8042ac:	880b883a 	mov	r5,r17
  8042b0:	da002d0d 	sth	r8,180(sp)
  8042b4:	da402d8d 	sth	r9,182(sp)
  8042b8:	da803115 	stw	r10,196(sp)
  8042bc:	dac03315 	stw	r11,204(sp)
  8042c0:	d8802e15 	stw	r2,184(sp)
  8042c4:	d8c02f15 	stw	r3,188(sp)
  8042c8:	d8802a15 	stw	r2,168(sp)
  8042cc:	d8c02c15 	stw	r3,176(sp)
  8042d0:	d8003015 	stw	zero,192(sp)
  8042d4:	08042000 	call	804200 <___vfprintf_internal_r>
  8042d8:	d8814c15 	stw	r2,1328(sp)
  8042dc:	10000416 	blt	r2,zero,8042f0 <___vfprintf_internal_r+0xf0>
  8042e0:	d9015017 	ldw	r4,1344(sp)
  8042e4:	880b883a 	mov	r5,r17
  8042e8:	08011540 	call	801154 <_fflush_r>
  8042ec:	1002321e 	bne	r2,zero,804bb8 <___vfprintf_internal_r+0x9b8>
  8042f0:	d8802d0b 	ldhu	r2,180(sp)
  8042f4:	1080100c 	andi	r2,r2,64
  8042f8:	10000326 	beq	r2,zero,804308 <___vfprintf_internal_r+0x108>
  8042fc:	b080030b 	ldhu	r2,12(r22)
  804300:	10801014 	ori	r2,r2,64
  804304:	b080030d 	sth	r2,12(r22)
  804308:	d8814c17 	ldw	r2,1328(sp)
  80430c:	dfc15c17 	ldw	ra,1392(sp)
  804310:	df015b17 	ldw	fp,1388(sp)
  804314:	ddc15a17 	ldw	r23,1384(sp)
  804318:	dd815917 	ldw	r22,1380(sp)
  80431c:	dd415817 	ldw	r21,1376(sp)
  804320:	dd015717 	ldw	r20,1372(sp)
  804324:	dcc15617 	ldw	r19,1368(sp)
  804328:	dc815517 	ldw	r18,1364(sp)
  80432c:	dc415417 	ldw	r17,1360(sp)
  804330:	dc015317 	ldw	r16,1356(sp)
  804334:	dec15d04 	addi	sp,sp,1396
  804338:	f800283a 	ret
  80433c:	0005883a 	mov	r2,zero
  804340:	0007883a 	mov	r3,zero
  804344:	dd401a04 	addi	r21,sp,104
  804348:	d8814315 	stw	r2,1292(sp)
  80434c:	802f883a 	mov	r23,r16
  804350:	d8c14415 	stw	r3,1296(sp)
  804354:	d8014c15 	stw	zero,1328(sp)
  804358:	d8014915 	stw	zero,1316(sp)
  80435c:	d8014515 	stw	zero,1300(sp)
  804360:	d8014815 	stw	zero,1312(sp)
  804364:	dd400d15 	stw	r21,52(sp)
  804368:	d8000f15 	stw	zero,60(sp)
  80436c:	d8000e15 	stw	zero,56(sp)
  804370:	b8800007 	ldb	r2,0(r23)
  804374:	10001926 	beq	r2,zero,8043dc <___vfprintf_internal_r+0x1dc>
  804378:	00c00944 	movi	r3,37
  80437c:	10c01726 	beq	r2,r3,8043dc <___vfprintf_internal_r+0x1dc>
  804380:	b821883a 	mov	r16,r23
  804384:	00000106 	br	80438c <___vfprintf_internal_r+0x18c>
  804388:	10c00326 	beq	r2,r3,804398 <___vfprintf_internal_r+0x198>
  80438c:	84000044 	addi	r16,r16,1
  804390:	80800007 	ldb	r2,0(r16)
  804394:	103ffc1e 	bne	r2,zero,804388 <___vfprintf_internal_r+0x188>
  804398:	85e7c83a 	sub	r19,r16,r23
  80439c:	98000e26 	beq	r19,zero,8043d8 <___vfprintf_internal_r+0x1d8>
  8043a0:	dc800f17 	ldw	r18,60(sp)
  8043a4:	dc400e17 	ldw	r17,56(sp)
  8043a8:	008001c4 	movi	r2,7
  8043ac:	94e5883a 	add	r18,r18,r19
  8043b0:	8c400044 	addi	r17,r17,1
  8043b4:	adc00015 	stw	r23,0(r21)
  8043b8:	dc800f15 	stw	r18,60(sp)
  8043bc:	acc00115 	stw	r19,4(r21)
  8043c0:	dc400e15 	stw	r17,56(sp)
  8043c4:	14428b16 	blt	r2,r17,804df4 <___vfprintf_internal_r+0xbf4>
  8043c8:	ad400204 	addi	r21,r21,8
  8043cc:	d9014c17 	ldw	r4,1328(sp)
  8043d0:	24c9883a 	add	r4,r4,r19
  8043d4:	d9014c15 	stw	r4,1328(sp)
  8043d8:	802f883a 	mov	r23,r16
  8043dc:	b8800007 	ldb	r2,0(r23)
  8043e0:	10013c26 	beq	r2,zero,8048d4 <___vfprintf_internal_r+0x6d4>
  8043e4:	bdc00044 	addi	r23,r23,1
  8043e8:	d8000405 	stb	zero,16(sp)
  8043ec:	b8c00007 	ldb	r3,0(r23)
  8043f0:	04ffffc4 	movi	r19,-1
  8043f4:	d8014d15 	stw	zero,1332(sp)
  8043f8:	d8014b15 	stw	zero,1324(sp)
  8043fc:	d8c14e15 	stw	r3,1336(sp)
  804400:	bdc00044 	addi	r23,r23,1
  804404:	d9414e17 	ldw	r5,1336(sp)
  804408:	00801604 	movi	r2,88
  80440c:	28fff804 	addi	r3,r5,-32
  804410:	10c06036 	bltu	r2,r3,804594 <___vfprintf_internal_r+0x394>
  804414:	18c5883a 	add	r2,r3,r3
  804418:	1085883a 	add	r2,r2,r2
  80441c:	00c02034 	movhi	r3,128
  804420:	18d10c04 	addi	r3,r3,17456
  804424:	10c5883a 	add	r2,r2,r3
  804428:	11000017 	ldw	r4,0(r2)
  80442c:	2000683a 	jmp	r4
  804430:	008053a4 	muli	r2,zero,334
  804434:	00804594 	movui	r2,278
  804438:	00804594 	movui	r2,278
  80443c:	00805390 	cmplti	r2,zero,334
  804440:	00804594 	movui	r2,278
  804444:	00804594 	movui	r2,278
  804448:	00804594 	movui	r2,278
  80444c:	00804594 	movui	r2,278
  804450:	00804594 	movui	r2,278
  804454:	00804594 	movui	r2,278
  804458:	00805170 	cmpltui	r2,zero,325
  80445c:	00805380 	call	80538 <__reset-0x77fac8>
  804460:	00804594 	movui	r2,278
  804464:	00805188 	cmpgei	r2,zero,326
  804468:	0080541c 	xori	r2,zero,336
  80446c:	00804594 	movui	r2,278
  804470:	00805408 	cmpgei	r2,zero,336
  804474:	008053d0 	cmplti	r2,zero,335
  804478:	008053d0 	cmplti	r2,zero,335
  80447c:	008053d0 	cmplti	r2,zero,335
  804480:	008053d0 	cmplti	r2,zero,335
  804484:	008053d0 	cmplti	r2,zero,335
  804488:	008053d0 	cmplti	r2,zero,335
  80448c:	008053d0 	cmplti	r2,zero,335
  804490:	008053d0 	cmplti	r2,zero,335
  804494:	008053d0 	cmplti	r2,zero,335
  804498:	00804594 	movui	r2,278
  80449c:	00804594 	movui	r2,278
  8044a0:	00804594 	movui	r2,278
  8044a4:	00804594 	movui	r2,278
  8044a8:	00804594 	movui	r2,278
  8044ac:	00804594 	movui	r2,278
  8044b0:	00804594 	movui	r2,278
  8044b4:	00804594 	movui	r2,278
  8044b8:	00804594 	movui	r2,278
  8044bc:	00804594 	movui	r2,278
  8044c0:	00804bec 	andhi	r2,zero,303
  8044c4:	00805258 	cmpnei	r2,zero,329
  8044c8:	00804594 	movui	r2,278
  8044cc:	00805258 	cmpnei	r2,zero,329
  8044d0:	00804594 	movui	r2,278
  8044d4:	00804594 	movui	r2,278
  8044d8:	00804594 	movui	r2,278
  8044dc:	00804594 	movui	r2,278
  8044e0:	008053bc 	xorhi	r2,zero,334
  8044e4:	00804594 	movui	r2,278
  8044e8:	00804594 	movui	r2,278
  8044ec:	00804ca0 	cmpeqi	r2,zero,306
  8044f0:	00804594 	movui	r2,278
  8044f4:	00804594 	movui	r2,278
  8044f8:	00804594 	movui	r2,278
  8044fc:	00804594 	movui	r2,278
  804500:	00804594 	movui	r2,278
  804504:	00804cec 	andhi	r2,zero,307
  804508:	00804594 	movui	r2,278
  80450c:	00804594 	movui	r2,278
  804510:	0080530c 	andi	r2,zero,332
  804514:	00804594 	movui	r2,278
  804518:	00804594 	movui	r2,278
  80451c:	00804594 	movui	r2,278
  804520:	00804594 	movui	r2,278
  804524:	00804594 	movui	r2,278
  804528:	00804594 	movui	r2,278
  80452c:	00804594 	movui	r2,278
  804530:	00804594 	movui	r2,278
  804534:	00804594 	movui	r2,278
  804538:	00804594 	movui	r2,278
  80453c:	008052e0 	cmpeqi	r2,zero,331
  804540:	00804bf8 	rdprs	r2,zero,303
  804544:	00805258 	cmpnei	r2,zero,329
  804548:	00805258 	cmpnei	r2,zero,329
  80454c:	00805258 	cmpnei	r2,zero,329
  804550:	00805244 	movi	r2,329
  804554:	00804bf8 	rdprs	r2,zero,303
  804558:	00804594 	movui	r2,278
  80455c:	00804594 	movui	r2,278
  804560:	008051cc 	andi	r2,zero,327
  804564:	00804594 	movui	r2,278
  804568:	0080519c 	xori	r2,zero,326
  80456c:	00804cac 	andhi	r2,zero,306
  804570:	008051fc 	xorhi	r2,zero,327
  804574:	008051e8 	cmpgeui	r2,zero,327
  804578:	00804594 	movui	r2,278
  80457c:	00805478 	rdprs	r2,zero,337
  804580:	00804594 	movui	r2,278
  804584:	00804cf8 	rdprs	r2,zero,307
  804588:	00804594 	movui	r2,278
  80458c:	00804594 	movui	r2,278
  804590:	00805370 	cmpltui	r2,zero,333
  804594:	d9014e17 	ldw	r4,1336(sp)
  804598:	2000ce26 	beq	r4,zero,8048d4 <___vfprintf_internal_r+0x6d4>
  80459c:	01400044 	movi	r5,1
  8045a0:	d9801004 	addi	r6,sp,64
  8045a4:	d9c14115 	stw	r7,1284(sp)
  8045a8:	d9414615 	stw	r5,1304(sp)
  8045ac:	d9814215 	stw	r6,1288(sp)
  8045b0:	280f883a 	mov	r7,r5
  8045b4:	d9001005 	stb	r4,64(sp)
  8045b8:	d8000405 	stb	zero,16(sp)
  8045bc:	d8014715 	stw	zero,1308(sp)
  8045c0:	d8c14d17 	ldw	r3,1332(sp)
  8045c4:	1880008c 	andi	r2,r3,2
  8045c8:	1005003a 	cmpeq	r2,r2,zero
  8045cc:	d8815115 	stw	r2,1348(sp)
  8045d0:	1000031e 	bne	r2,zero,8045e0 <___vfprintf_internal_r+0x3e0>
  8045d4:	d9014617 	ldw	r4,1304(sp)
  8045d8:	21000084 	addi	r4,r4,2
  8045dc:	d9014615 	stw	r4,1304(sp)
  8045e0:	d9414d17 	ldw	r5,1332(sp)
  8045e4:	2940210c 	andi	r5,r5,132
  8045e8:	d9414f15 	stw	r5,1340(sp)
  8045ec:	28002d1e 	bne	r5,zero,8046a4 <___vfprintf_internal_r+0x4a4>
  8045f0:	d9814b17 	ldw	r6,1324(sp)
  8045f4:	d8814617 	ldw	r2,1304(sp)
  8045f8:	30a1c83a 	sub	r16,r6,r2
  8045fc:	0400290e 	bge	zero,r16,8046a4 <___vfprintf_internal_r+0x4a4>
  804600:	00800404 	movi	r2,16
  804604:	1404580e 	bge	r2,r16,805768 <___vfprintf_internal_r+0x1568>
  804608:	dc800f17 	ldw	r18,60(sp)
  80460c:	dc400e17 	ldw	r17,56(sp)
  804610:	1027883a 	mov	r19,r2
  804614:	07002074 	movhi	fp,129
  804618:	e7133304 	addi	fp,fp,19660
  80461c:	050001c4 	movi	r20,7
  804620:	00000306 	br	804630 <___vfprintf_internal_r+0x430>
  804624:	843ffc04 	addi	r16,r16,-16
  804628:	ad400204 	addi	r21,r21,8
  80462c:	9c00130e 	bge	r19,r16,80467c <___vfprintf_internal_r+0x47c>
  804630:	94800404 	addi	r18,r18,16
  804634:	8c400044 	addi	r17,r17,1
  804638:	af000015 	stw	fp,0(r21)
  80463c:	acc00115 	stw	r19,4(r21)
  804640:	dc800f15 	stw	r18,60(sp)
  804644:	dc400e15 	stw	r17,56(sp)
  804648:	a47ff60e 	bge	r20,r17,804624 <___vfprintf_internal_r+0x424>
  80464c:	d9015017 	ldw	r4,1344(sp)
  804650:	b00b883a 	mov	r5,r22
  804654:	d9800d04 	addi	r6,sp,52
  804658:	d9c15215 	stw	r7,1352(sp)
  80465c:	08041a80 	call	8041a8 <__sprint_r>
  804660:	d9c15217 	ldw	r7,1352(sp)
  804664:	10009e1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804668:	843ffc04 	addi	r16,r16,-16
  80466c:	dc800f17 	ldw	r18,60(sp)
  804670:	dc400e17 	ldw	r17,56(sp)
  804674:	dd401a04 	addi	r21,sp,104
  804678:	9c3fed16 	blt	r19,r16,804630 <___vfprintf_internal_r+0x430>
  80467c:	9425883a 	add	r18,r18,r16
  804680:	8c400044 	addi	r17,r17,1
  804684:	008001c4 	movi	r2,7
  804688:	af000015 	stw	fp,0(r21)
  80468c:	ac000115 	stw	r16,4(r21)
  804690:	dc800f15 	stw	r18,60(sp)
  804694:	dc400e15 	stw	r17,56(sp)
  804698:	1441f516 	blt	r2,r17,804e70 <___vfprintf_internal_r+0xc70>
  80469c:	ad400204 	addi	r21,r21,8
  8046a0:	00000206 	br	8046ac <___vfprintf_internal_r+0x4ac>
  8046a4:	dc800f17 	ldw	r18,60(sp)
  8046a8:	dc400e17 	ldw	r17,56(sp)
  8046ac:	d8800407 	ldb	r2,16(sp)
  8046b0:	10000b26 	beq	r2,zero,8046e0 <___vfprintf_internal_r+0x4e0>
  8046b4:	00800044 	movi	r2,1
  8046b8:	94800044 	addi	r18,r18,1
  8046bc:	8c400044 	addi	r17,r17,1
  8046c0:	a8800115 	stw	r2,4(r21)
  8046c4:	d8c00404 	addi	r3,sp,16
  8046c8:	008001c4 	movi	r2,7
  8046cc:	a8c00015 	stw	r3,0(r21)
  8046d0:	dc800f15 	stw	r18,60(sp)
  8046d4:	dc400e15 	stw	r17,56(sp)
  8046d8:	1441da16 	blt	r2,r17,804e44 <___vfprintf_internal_r+0xc44>
  8046dc:	ad400204 	addi	r21,r21,8
  8046e0:	d9015117 	ldw	r4,1348(sp)
  8046e4:	20000b1e 	bne	r4,zero,804714 <___vfprintf_internal_r+0x514>
  8046e8:	d8800504 	addi	r2,sp,20
  8046ec:	94800084 	addi	r18,r18,2
  8046f0:	8c400044 	addi	r17,r17,1
  8046f4:	a8800015 	stw	r2,0(r21)
  8046f8:	00c00084 	movi	r3,2
  8046fc:	008001c4 	movi	r2,7
  804700:	a8c00115 	stw	r3,4(r21)
  804704:	dc800f15 	stw	r18,60(sp)
  804708:	dc400e15 	stw	r17,56(sp)
  80470c:	1441c216 	blt	r2,r17,804e18 <___vfprintf_internal_r+0xc18>
  804710:	ad400204 	addi	r21,r21,8
  804714:	d9414f17 	ldw	r5,1340(sp)
  804718:	00802004 	movi	r2,128
  80471c:	2880b126 	beq	r5,r2,8049e4 <___vfprintf_internal_r+0x7e4>
  804720:	d8c14717 	ldw	r3,1308(sp)
  804724:	19e1c83a 	sub	r16,r3,r7
  804728:	0400260e 	bge	zero,r16,8047c4 <___vfprintf_internal_r+0x5c4>
  80472c:	00800404 	movi	r2,16
  804730:	1403c90e 	bge	r2,r16,805658 <___vfprintf_internal_r+0x1458>
  804734:	1027883a 	mov	r19,r2
  804738:	07002074 	movhi	fp,129
  80473c:	e7132f04 	addi	fp,fp,19644
  804740:	050001c4 	movi	r20,7
  804744:	00000306 	br	804754 <___vfprintf_internal_r+0x554>
  804748:	843ffc04 	addi	r16,r16,-16
  80474c:	ad400204 	addi	r21,r21,8
  804750:	9c00130e 	bge	r19,r16,8047a0 <___vfprintf_internal_r+0x5a0>
  804754:	94800404 	addi	r18,r18,16
  804758:	8c400044 	addi	r17,r17,1
  80475c:	af000015 	stw	fp,0(r21)
  804760:	acc00115 	stw	r19,4(r21)
  804764:	dc800f15 	stw	r18,60(sp)
  804768:	dc400e15 	stw	r17,56(sp)
  80476c:	a47ff60e 	bge	r20,r17,804748 <___vfprintf_internal_r+0x548>
  804770:	d9015017 	ldw	r4,1344(sp)
  804774:	b00b883a 	mov	r5,r22
  804778:	d9800d04 	addi	r6,sp,52
  80477c:	d9c15215 	stw	r7,1352(sp)
  804780:	08041a80 	call	8041a8 <__sprint_r>
  804784:	d9c15217 	ldw	r7,1352(sp)
  804788:	1000551e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  80478c:	843ffc04 	addi	r16,r16,-16
  804790:	dc800f17 	ldw	r18,60(sp)
  804794:	dc400e17 	ldw	r17,56(sp)
  804798:	dd401a04 	addi	r21,sp,104
  80479c:	9c3fed16 	blt	r19,r16,804754 <___vfprintf_internal_r+0x554>
  8047a0:	9425883a 	add	r18,r18,r16
  8047a4:	8c400044 	addi	r17,r17,1
  8047a8:	008001c4 	movi	r2,7
  8047ac:	af000015 	stw	fp,0(r21)
  8047b0:	ac000115 	stw	r16,4(r21)
  8047b4:	dc800f15 	stw	r18,60(sp)
  8047b8:	dc400e15 	stw	r17,56(sp)
  8047bc:	14418216 	blt	r2,r17,804dc8 <___vfprintf_internal_r+0xbc8>
  8047c0:	ad400204 	addi	r21,r21,8
  8047c4:	d9014d17 	ldw	r4,1332(sp)
  8047c8:	2080400c 	andi	r2,r4,256
  8047cc:	10004a1e 	bne	r2,zero,8048f8 <___vfprintf_internal_r+0x6f8>
  8047d0:	d9414217 	ldw	r5,1288(sp)
  8047d4:	91e5883a 	add	r18,r18,r7
  8047d8:	8c400044 	addi	r17,r17,1
  8047dc:	008001c4 	movi	r2,7
  8047e0:	a9400015 	stw	r5,0(r21)
  8047e4:	a9c00115 	stw	r7,4(r21)
  8047e8:	dc800f15 	stw	r18,60(sp)
  8047ec:	dc400e15 	stw	r17,56(sp)
  8047f0:	14416716 	blt	r2,r17,804d90 <___vfprintf_internal_r+0xb90>
  8047f4:	a8c00204 	addi	r3,r21,8
  8047f8:	d9814d17 	ldw	r6,1332(sp)
  8047fc:	3080010c 	andi	r2,r6,4
  804800:	10002826 	beq	r2,zero,8048a4 <___vfprintf_internal_r+0x6a4>
  804804:	d8814b17 	ldw	r2,1324(sp)
  804808:	d9014617 	ldw	r4,1304(sp)
  80480c:	1121c83a 	sub	r16,r2,r4
  804810:	0400240e 	bge	zero,r16,8048a4 <___vfprintf_internal_r+0x6a4>
  804814:	00800404 	movi	r2,16
  804818:	14044f0e 	bge	r2,r16,805958 <___vfprintf_internal_r+0x1758>
  80481c:	dc400e17 	ldw	r17,56(sp)
  804820:	1027883a 	mov	r19,r2
  804824:	07002074 	movhi	fp,129
  804828:	e7133304 	addi	fp,fp,19660
  80482c:	050001c4 	movi	r20,7
  804830:	00000306 	br	804840 <___vfprintf_internal_r+0x640>
  804834:	843ffc04 	addi	r16,r16,-16
  804838:	18c00204 	addi	r3,r3,8
  80483c:	9c00110e 	bge	r19,r16,804884 <___vfprintf_internal_r+0x684>
  804840:	94800404 	addi	r18,r18,16
  804844:	8c400044 	addi	r17,r17,1
  804848:	1f000015 	stw	fp,0(r3)
  80484c:	1cc00115 	stw	r19,4(r3)
  804850:	dc800f15 	stw	r18,60(sp)
  804854:	dc400e15 	stw	r17,56(sp)
  804858:	a47ff60e 	bge	r20,r17,804834 <___vfprintf_internal_r+0x634>
  80485c:	d9015017 	ldw	r4,1344(sp)
  804860:	b00b883a 	mov	r5,r22
  804864:	d9800d04 	addi	r6,sp,52
  804868:	08041a80 	call	8041a8 <__sprint_r>
  80486c:	10001c1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804870:	843ffc04 	addi	r16,r16,-16
  804874:	dc800f17 	ldw	r18,60(sp)
  804878:	dc400e17 	ldw	r17,56(sp)
  80487c:	d8c01a04 	addi	r3,sp,104
  804880:	9c3fef16 	blt	r19,r16,804840 <___vfprintf_internal_r+0x640>
  804884:	9425883a 	add	r18,r18,r16
  804888:	8c400044 	addi	r17,r17,1
  80488c:	008001c4 	movi	r2,7
  804890:	1f000015 	stw	fp,0(r3)
  804894:	1c000115 	stw	r16,4(r3)
  804898:	dc800f15 	stw	r18,60(sp)
  80489c:	dc400e15 	stw	r17,56(sp)
  8048a0:	1440cb16 	blt	r2,r17,804bd0 <___vfprintf_internal_r+0x9d0>
  8048a4:	d8814b17 	ldw	r2,1324(sp)
  8048a8:	d9414617 	ldw	r5,1304(sp)
  8048ac:	1140010e 	bge	r2,r5,8048b4 <___vfprintf_internal_r+0x6b4>
  8048b0:	2805883a 	mov	r2,r5
  8048b4:	d9814c17 	ldw	r6,1328(sp)
  8048b8:	308d883a 	add	r6,r6,r2
  8048bc:	d9814c15 	stw	r6,1328(sp)
  8048c0:	90013b1e 	bne	r18,zero,804db0 <___vfprintf_internal_r+0xbb0>
  8048c4:	d9c14117 	ldw	r7,1284(sp)
  8048c8:	dd401a04 	addi	r21,sp,104
  8048cc:	d8000e15 	stw	zero,56(sp)
  8048d0:	003ea706 	br	804370 <___vfprintf_internal_r+0x170>
  8048d4:	d8800f17 	ldw	r2,60(sp)
  8048d8:	10053f1e 	bne	r2,zero,805dd8 <___vfprintf_internal_r+0x1bd8>
  8048dc:	d8000e15 	stw	zero,56(sp)
  8048e0:	b080030b 	ldhu	r2,12(r22)
  8048e4:	1080100c 	andi	r2,r2,64
  8048e8:	103e8726 	beq	r2,zero,804308 <___vfprintf_internal_r+0x108>
  8048ec:	00bfffc4 	movi	r2,-1
  8048f0:	d8814c15 	stw	r2,1328(sp)
  8048f4:	003e8406 	br	804308 <___vfprintf_internal_r+0x108>
  8048f8:	d9814e17 	ldw	r6,1336(sp)
  8048fc:	00801944 	movi	r2,101
  804900:	11806e16 	blt	r2,r6,804abc <___vfprintf_internal_r+0x8bc>
  804904:	d9414817 	ldw	r5,1312(sp)
  804908:	00c00044 	movi	r3,1
  80490c:	1943430e 	bge	r3,r5,80561c <___vfprintf_internal_r+0x141c>
  804910:	d8814217 	ldw	r2,1288(sp)
  804914:	94800044 	addi	r18,r18,1
  804918:	8c400044 	addi	r17,r17,1
  80491c:	a8800015 	stw	r2,0(r21)
  804920:	008001c4 	movi	r2,7
  804924:	a8c00115 	stw	r3,4(r21)
  804928:	dc800f15 	stw	r18,60(sp)
  80492c:	dc400e15 	stw	r17,56(sp)
  804930:	1441ca16 	blt	r2,r17,80505c <___vfprintf_internal_r+0xe5c>
  804934:	a8c00204 	addi	r3,r21,8
  804938:	d9014a17 	ldw	r4,1320(sp)
  80493c:	00800044 	movi	r2,1
  804940:	94800044 	addi	r18,r18,1
  804944:	8c400044 	addi	r17,r17,1
  804948:	18800115 	stw	r2,4(r3)
  80494c:	008001c4 	movi	r2,7
  804950:	19000015 	stw	r4,0(r3)
  804954:	dc800f15 	stw	r18,60(sp)
  804958:	dc400e15 	stw	r17,56(sp)
  80495c:	1441b616 	blt	r2,r17,805038 <___vfprintf_internal_r+0xe38>
  804960:	1cc00204 	addi	r19,r3,8
  804964:	d9014317 	ldw	r4,1292(sp)
  804968:	d9414417 	ldw	r5,1296(sp)
  80496c:	000d883a 	mov	r6,zero
  804970:	000f883a 	mov	r7,zero
  804974:	080f42c0 	call	80f42c <__nedf2>
  804978:	10017426 	beq	r2,zero,804f4c <___vfprintf_internal_r+0xd4c>
  80497c:	d9414817 	ldw	r5,1312(sp)
  804980:	d9814217 	ldw	r6,1288(sp)
  804984:	8c400044 	addi	r17,r17,1
  804988:	2c85883a 	add	r2,r5,r18
  80498c:	14bfffc4 	addi	r18,r2,-1
  804990:	28bfffc4 	addi	r2,r5,-1
  804994:	30c00044 	addi	r3,r6,1
  804998:	98800115 	stw	r2,4(r19)
  80499c:	008001c4 	movi	r2,7
  8049a0:	98c00015 	stw	r3,0(r19)
  8049a4:	dc800f15 	stw	r18,60(sp)
  8049a8:	dc400e15 	stw	r17,56(sp)
  8049ac:	14418e16 	blt	r2,r17,804fe8 <___vfprintf_internal_r+0xde8>
  8049b0:	9cc00204 	addi	r19,r19,8
  8049b4:	d9414917 	ldw	r5,1316(sp)
  8049b8:	d8800904 	addi	r2,sp,36
  8049bc:	8c400044 	addi	r17,r17,1
  8049c0:	9165883a 	add	r18,r18,r5
  8049c4:	98800015 	stw	r2,0(r19)
  8049c8:	008001c4 	movi	r2,7
  8049cc:	99400115 	stw	r5,4(r19)
  8049d0:	dc800f15 	stw	r18,60(sp)
  8049d4:	dc400e15 	stw	r17,56(sp)
  8049d8:	1440ed16 	blt	r2,r17,804d90 <___vfprintf_internal_r+0xb90>
  8049dc:	98c00204 	addi	r3,r19,8
  8049e0:	003f8506 	br	8047f8 <___vfprintf_internal_r+0x5f8>
  8049e4:	d9814b17 	ldw	r6,1324(sp)
  8049e8:	d8814617 	ldw	r2,1304(sp)
  8049ec:	30a1c83a 	sub	r16,r6,r2
  8049f0:	043f4b0e 	bge	zero,r16,804720 <___vfprintf_internal_r+0x520>
  8049f4:	00800404 	movi	r2,16
  8049f8:	1404340e 	bge	r2,r16,805acc <___vfprintf_internal_r+0x18cc>
  8049fc:	1027883a 	mov	r19,r2
  804a00:	07002074 	movhi	fp,129
  804a04:	e7132f04 	addi	fp,fp,19644
  804a08:	050001c4 	movi	r20,7
  804a0c:	00000306 	br	804a1c <___vfprintf_internal_r+0x81c>
  804a10:	843ffc04 	addi	r16,r16,-16
  804a14:	ad400204 	addi	r21,r21,8
  804a18:	9c00130e 	bge	r19,r16,804a68 <___vfprintf_internal_r+0x868>
  804a1c:	94800404 	addi	r18,r18,16
  804a20:	8c400044 	addi	r17,r17,1
  804a24:	af000015 	stw	fp,0(r21)
  804a28:	acc00115 	stw	r19,4(r21)
  804a2c:	dc800f15 	stw	r18,60(sp)
  804a30:	dc400e15 	stw	r17,56(sp)
  804a34:	a47ff60e 	bge	r20,r17,804a10 <___vfprintf_internal_r+0x810>
  804a38:	d9015017 	ldw	r4,1344(sp)
  804a3c:	b00b883a 	mov	r5,r22
  804a40:	d9800d04 	addi	r6,sp,52
  804a44:	d9c15215 	stw	r7,1352(sp)
  804a48:	08041a80 	call	8041a8 <__sprint_r>
  804a4c:	d9c15217 	ldw	r7,1352(sp)
  804a50:	103fa31e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804a54:	843ffc04 	addi	r16,r16,-16
  804a58:	dc800f17 	ldw	r18,60(sp)
  804a5c:	dc400e17 	ldw	r17,56(sp)
  804a60:	dd401a04 	addi	r21,sp,104
  804a64:	9c3fed16 	blt	r19,r16,804a1c <___vfprintf_internal_r+0x81c>
  804a68:	9425883a 	add	r18,r18,r16
  804a6c:	8c400044 	addi	r17,r17,1
  804a70:	008001c4 	movi	r2,7
  804a74:	af000015 	stw	fp,0(r21)
  804a78:	ac000115 	stw	r16,4(r21)
  804a7c:	dc800f15 	stw	r18,60(sp)
  804a80:	dc400e15 	stw	r17,56(sp)
  804a84:	14416116 	blt	r2,r17,80500c <___vfprintf_internal_r+0xe0c>
  804a88:	ad400204 	addi	r21,r21,8
  804a8c:	003f2406 	br	804720 <___vfprintf_internal_r+0x520>
  804a90:	d9015017 	ldw	r4,1344(sp)
  804a94:	08015140 	call	801514 <__sinit>
  804a98:	d9c15217 	ldw	r7,1352(sp)
  804a9c:	003def06 	br	80425c <___vfprintf_internal_r+0x5c>
  804aa0:	d9015017 	ldw	r4,1344(sp)
  804aa4:	b00b883a 	mov	r5,r22
  804aa8:	d9c15215 	stw	r7,1352(sp)
  804aac:	08078c80 	call	8078c8 <__swsetup_r>
  804ab0:	d9c15217 	ldw	r7,1352(sp)
  804ab4:	103dee26 	beq	r2,zero,804270 <___vfprintf_internal_r+0x70>
  804ab8:	003f8c06 	br	8048ec <___vfprintf_internal_r+0x6ec>
  804abc:	d9014317 	ldw	r4,1292(sp)
  804ac0:	d9414417 	ldw	r5,1296(sp)
  804ac4:	000d883a 	mov	r6,zero
  804ac8:	000f883a 	mov	r7,zero
  804acc:	080f3a40 	call	80f3a4 <__eqdf2>
  804ad0:	1000f21e 	bne	r2,zero,804e9c <___vfprintf_internal_r+0xc9c>
  804ad4:	00802074 	movhi	r2,129
  804ad8:	10932e04 	addi	r2,r2,19640
  804adc:	94800044 	addi	r18,r18,1
  804ae0:	8c400044 	addi	r17,r17,1
  804ae4:	a8800015 	stw	r2,0(r21)
  804ae8:	00c00044 	movi	r3,1
  804aec:	008001c4 	movi	r2,7
  804af0:	a8c00115 	stw	r3,4(r21)
  804af4:	dc800f15 	stw	r18,60(sp)
  804af8:	dc400e15 	stw	r17,56(sp)
  804afc:	1442fa16 	blt	r2,r17,8056e8 <___vfprintf_internal_r+0x14e8>
  804b00:	a8c00204 	addi	r3,r21,8
  804b04:	d8800617 	ldw	r2,24(sp)
  804b08:	d9014817 	ldw	r4,1312(sp)
  804b0c:	11015c0e 	bge	r2,r4,805080 <___vfprintf_internal_r+0xe80>
  804b10:	dc400e17 	ldw	r17,56(sp)
  804b14:	d9814a17 	ldw	r6,1320(sp)
  804b18:	00800044 	movi	r2,1
  804b1c:	94800044 	addi	r18,r18,1
  804b20:	8c400044 	addi	r17,r17,1
  804b24:	18800115 	stw	r2,4(r3)
  804b28:	008001c4 	movi	r2,7
  804b2c:	19800015 	stw	r6,0(r3)
  804b30:	dc800f15 	stw	r18,60(sp)
  804b34:	dc400e15 	stw	r17,56(sp)
  804b38:	14431016 	blt	r2,r17,80577c <___vfprintf_internal_r+0x157c>
  804b3c:	18c00204 	addi	r3,r3,8
  804b40:	d8814817 	ldw	r2,1312(sp)
  804b44:	143fffc4 	addi	r16,r2,-1
  804b48:	043f2b0e 	bge	zero,r16,8047f8 <___vfprintf_internal_r+0x5f8>
  804b4c:	00800404 	movi	r2,16
  804b50:	1402a20e 	bge	r2,r16,8055dc <___vfprintf_internal_r+0x13dc>
  804b54:	dc400e17 	ldw	r17,56(sp)
  804b58:	1027883a 	mov	r19,r2
  804b5c:	07002074 	movhi	fp,129
  804b60:	e7132f04 	addi	fp,fp,19644
  804b64:	050001c4 	movi	r20,7
  804b68:	00000306 	br	804b78 <___vfprintf_internal_r+0x978>
  804b6c:	18c00204 	addi	r3,r3,8
  804b70:	843ffc04 	addi	r16,r16,-16
  804b74:	9c029c0e 	bge	r19,r16,8055e8 <___vfprintf_internal_r+0x13e8>
  804b78:	94800404 	addi	r18,r18,16
  804b7c:	8c400044 	addi	r17,r17,1
  804b80:	1f000015 	stw	fp,0(r3)
  804b84:	1cc00115 	stw	r19,4(r3)
  804b88:	dc800f15 	stw	r18,60(sp)
  804b8c:	dc400e15 	stw	r17,56(sp)
  804b90:	a47ff60e 	bge	r20,r17,804b6c <___vfprintf_internal_r+0x96c>
  804b94:	d9015017 	ldw	r4,1344(sp)
  804b98:	b00b883a 	mov	r5,r22
  804b9c:	d9800d04 	addi	r6,sp,52
  804ba0:	08041a80 	call	8041a8 <__sprint_r>
  804ba4:	103f4e1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804ba8:	dc800f17 	ldw	r18,60(sp)
  804bac:	dc400e17 	ldw	r17,56(sp)
  804bb0:	d8c01a04 	addi	r3,sp,104
  804bb4:	003fee06 	br	804b70 <___vfprintf_internal_r+0x970>
  804bb8:	d8802d0b 	ldhu	r2,180(sp)
  804bbc:	00ffffc4 	movi	r3,-1
  804bc0:	d8c14c15 	stw	r3,1328(sp)
  804bc4:	1080100c 	andi	r2,r2,64
  804bc8:	103dcc1e 	bne	r2,zero,8042fc <___vfprintf_internal_r+0xfc>
  804bcc:	003dce06 	br	804308 <___vfprintf_internal_r+0x108>
  804bd0:	d9015017 	ldw	r4,1344(sp)
  804bd4:	b00b883a 	mov	r5,r22
  804bd8:	d9800d04 	addi	r6,sp,52
  804bdc:	08041a80 	call	8041a8 <__sprint_r>
  804be0:	103f3f1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804be4:	dc800f17 	ldw	r18,60(sp)
  804be8:	003f2e06 	br	8048a4 <___vfprintf_internal_r+0x6a4>
  804bec:	d9414d17 	ldw	r5,1332(sp)
  804bf0:	29400414 	ori	r5,r5,16
  804bf4:	d9414d15 	stw	r5,1332(sp)
  804bf8:	d9814d17 	ldw	r6,1332(sp)
  804bfc:	3080080c 	andi	r2,r6,32
  804c00:	10014f1e 	bne	r2,zero,805140 <___vfprintf_internal_r+0xf40>
  804c04:	d8c14d17 	ldw	r3,1332(sp)
  804c08:	1880040c 	andi	r2,r3,16
  804c0c:	1002ea1e 	bne	r2,zero,8057b8 <___vfprintf_internal_r+0x15b8>
  804c10:	d9014d17 	ldw	r4,1332(sp)
  804c14:	2080100c 	andi	r2,r4,64
  804c18:	1002e726 	beq	r2,zero,8057b8 <___vfprintf_internal_r+0x15b8>
  804c1c:	3880000f 	ldh	r2,0(r7)
  804c20:	39c00104 	addi	r7,r7,4
  804c24:	d9c14115 	stw	r7,1284(sp)
  804c28:	1023d7fa 	srai	r17,r2,31
  804c2c:	1021883a 	mov	r16,r2
  804c30:	88037216 	blt	r17,zero,8059fc <___vfprintf_internal_r+0x17fc>
  804c34:	01000044 	movi	r4,1
  804c38:	98000416 	blt	r19,zero,804c4c <___vfprintf_internal_r+0xa4c>
  804c3c:	d8c14d17 	ldw	r3,1332(sp)
  804c40:	00bfdfc4 	movi	r2,-129
  804c44:	1886703a 	and	r3,r3,r2
  804c48:	d8c14d15 	stw	r3,1332(sp)
  804c4c:	8444b03a 	or	r2,r16,r17
  804c50:	1002261e 	bne	r2,zero,8054ec <___vfprintf_internal_r+0x12ec>
  804c54:	9802251e 	bne	r19,zero,8054ec <___vfprintf_internal_r+0x12ec>
  804c58:	20803fcc 	andi	r2,r4,255
  804c5c:	10029b26 	beq	r2,zero,8056cc <___vfprintf_internal_r+0x14cc>
  804c60:	d8c01a04 	addi	r3,sp,104
  804c64:	dd001004 	addi	r20,sp,64
  804c68:	d8c14215 	stw	r3,1288(sp)
  804c6c:	d8c14217 	ldw	r3,1288(sp)
  804c70:	dcc14615 	stw	r19,1304(sp)
  804c74:	a0c5c83a 	sub	r2,r20,r3
  804c78:	11c00a04 	addi	r7,r2,40
  804c7c:	99c0010e 	bge	r19,r7,804c84 <___vfprintf_internal_r+0xa84>
  804c80:	d9c14615 	stw	r7,1304(sp)
  804c84:	dcc14715 	stw	r19,1308(sp)
  804c88:	d8800407 	ldb	r2,16(sp)
  804c8c:	103e4c26 	beq	r2,zero,8045c0 <___vfprintf_internal_r+0x3c0>
  804c90:	d8814617 	ldw	r2,1304(sp)
  804c94:	10800044 	addi	r2,r2,1
  804c98:	d8814615 	stw	r2,1304(sp)
  804c9c:	003e4806 	br	8045c0 <___vfprintf_internal_r+0x3c0>
  804ca0:	d9814d17 	ldw	r6,1332(sp)
  804ca4:	31800414 	ori	r6,r6,16
  804ca8:	d9814d15 	stw	r6,1332(sp)
  804cac:	d8c14d17 	ldw	r3,1332(sp)
  804cb0:	1880080c 	andi	r2,r3,32
  804cb4:	1001271e 	bne	r2,zero,805154 <___vfprintf_internal_r+0xf54>
  804cb8:	d9414d17 	ldw	r5,1332(sp)
  804cbc:	2880040c 	andi	r2,r5,16
  804cc0:	1002b61e 	bne	r2,zero,80579c <___vfprintf_internal_r+0x159c>
  804cc4:	d9814d17 	ldw	r6,1332(sp)
  804cc8:	3080100c 	andi	r2,r6,64
  804ccc:	1002b326 	beq	r2,zero,80579c <___vfprintf_internal_r+0x159c>
  804cd0:	3c00000b 	ldhu	r16,0(r7)
  804cd4:	0009883a 	mov	r4,zero
  804cd8:	39c00104 	addi	r7,r7,4
  804cdc:	0023883a 	mov	r17,zero
  804ce0:	d9c14115 	stw	r7,1284(sp)
  804ce4:	d8000405 	stb	zero,16(sp)
  804ce8:	003fd306 	br	804c38 <___vfprintf_internal_r+0xa38>
  804cec:	d9014d17 	ldw	r4,1332(sp)
  804cf0:	21000414 	ori	r4,r4,16
  804cf4:	d9014d15 	stw	r4,1332(sp)
  804cf8:	d9414d17 	ldw	r5,1332(sp)
  804cfc:	2880080c 	andi	r2,r5,32
  804d00:	1001081e 	bne	r2,zero,805124 <___vfprintf_internal_r+0xf24>
  804d04:	d8c14d17 	ldw	r3,1332(sp)
  804d08:	1880040c 	andi	r2,r3,16
  804d0c:	1002b01e 	bne	r2,zero,8057d0 <___vfprintf_internal_r+0x15d0>
  804d10:	d9014d17 	ldw	r4,1332(sp)
  804d14:	2080100c 	andi	r2,r4,64
  804d18:	1002ad26 	beq	r2,zero,8057d0 <___vfprintf_internal_r+0x15d0>
  804d1c:	3c00000b 	ldhu	r16,0(r7)
  804d20:	01000044 	movi	r4,1
  804d24:	39c00104 	addi	r7,r7,4
  804d28:	0023883a 	mov	r17,zero
  804d2c:	d9c14115 	stw	r7,1284(sp)
  804d30:	d8000405 	stb	zero,16(sp)
  804d34:	003fc006 	br	804c38 <___vfprintf_internal_r+0xa38>
  804d38:	d9015017 	ldw	r4,1344(sp)
  804d3c:	b00b883a 	mov	r5,r22
  804d40:	d9800d04 	addi	r6,sp,52
  804d44:	08041a80 	call	8041a8 <__sprint_r>
  804d48:	103ee51e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804d4c:	dc800f17 	ldw	r18,60(sp)
  804d50:	d8c01a04 	addi	r3,sp,104
  804d54:	d9814d17 	ldw	r6,1332(sp)
  804d58:	3080004c 	andi	r2,r6,1
  804d5c:	1005003a 	cmpeq	r2,r2,zero
  804d60:	103ea51e 	bne	r2,zero,8047f8 <___vfprintf_internal_r+0x5f8>
  804d64:	00800044 	movi	r2,1
  804d68:	dc400e17 	ldw	r17,56(sp)
  804d6c:	18800115 	stw	r2,4(r3)
  804d70:	d8814a17 	ldw	r2,1320(sp)
  804d74:	94800044 	addi	r18,r18,1
  804d78:	8c400044 	addi	r17,r17,1
  804d7c:	18800015 	stw	r2,0(r3)
  804d80:	008001c4 	movi	r2,7
  804d84:	dc800f15 	stw	r18,60(sp)
  804d88:	dc400e15 	stw	r17,56(sp)
  804d8c:	14421e0e 	bge	r2,r17,805608 <___vfprintf_internal_r+0x1408>
  804d90:	d9015017 	ldw	r4,1344(sp)
  804d94:	b00b883a 	mov	r5,r22
  804d98:	d9800d04 	addi	r6,sp,52
  804d9c:	08041a80 	call	8041a8 <__sprint_r>
  804da0:	103ecf1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804da4:	dc800f17 	ldw	r18,60(sp)
  804da8:	d8c01a04 	addi	r3,sp,104
  804dac:	003e9206 	br	8047f8 <___vfprintf_internal_r+0x5f8>
  804db0:	d9015017 	ldw	r4,1344(sp)
  804db4:	b00b883a 	mov	r5,r22
  804db8:	d9800d04 	addi	r6,sp,52
  804dbc:	08041a80 	call	8041a8 <__sprint_r>
  804dc0:	103ec026 	beq	r2,zero,8048c4 <___vfprintf_internal_r+0x6c4>
  804dc4:	003ec606 	br	8048e0 <___vfprintf_internal_r+0x6e0>
  804dc8:	d9015017 	ldw	r4,1344(sp)
  804dcc:	b00b883a 	mov	r5,r22
  804dd0:	d9800d04 	addi	r6,sp,52
  804dd4:	d9c15215 	stw	r7,1352(sp)
  804dd8:	08041a80 	call	8041a8 <__sprint_r>
  804ddc:	d9c15217 	ldw	r7,1352(sp)
  804de0:	103ebf1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804de4:	dc800f17 	ldw	r18,60(sp)
  804de8:	dc400e17 	ldw	r17,56(sp)
  804dec:	dd401a04 	addi	r21,sp,104
  804df0:	003e7406 	br	8047c4 <___vfprintf_internal_r+0x5c4>
  804df4:	d9015017 	ldw	r4,1344(sp)
  804df8:	b00b883a 	mov	r5,r22
  804dfc:	d9800d04 	addi	r6,sp,52
  804e00:	d9c15215 	stw	r7,1352(sp)
  804e04:	08041a80 	call	8041a8 <__sprint_r>
  804e08:	d9c15217 	ldw	r7,1352(sp)
  804e0c:	103eb41e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804e10:	dd401a04 	addi	r21,sp,104
  804e14:	003d6d06 	br	8043cc <___vfprintf_internal_r+0x1cc>
  804e18:	d9015017 	ldw	r4,1344(sp)
  804e1c:	b00b883a 	mov	r5,r22
  804e20:	d9800d04 	addi	r6,sp,52
  804e24:	d9c15215 	stw	r7,1352(sp)
  804e28:	08041a80 	call	8041a8 <__sprint_r>
  804e2c:	d9c15217 	ldw	r7,1352(sp)
  804e30:	103eab1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804e34:	dc800f17 	ldw	r18,60(sp)
  804e38:	dc400e17 	ldw	r17,56(sp)
  804e3c:	dd401a04 	addi	r21,sp,104
  804e40:	003e3406 	br	804714 <___vfprintf_internal_r+0x514>
  804e44:	d9015017 	ldw	r4,1344(sp)
  804e48:	b00b883a 	mov	r5,r22
  804e4c:	d9800d04 	addi	r6,sp,52
  804e50:	d9c15215 	stw	r7,1352(sp)
  804e54:	08041a80 	call	8041a8 <__sprint_r>
  804e58:	d9c15217 	ldw	r7,1352(sp)
  804e5c:	103ea01e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804e60:	dc800f17 	ldw	r18,60(sp)
  804e64:	dc400e17 	ldw	r17,56(sp)
  804e68:	dd401a04 	addi	r21,sp,104
  804e6c:	003e1c06 	br	8046e0 <___vfprintf_internal_r+0x4e0>
  804e70:	d9015017 	ldw	r4,1344(sp)
  804e74:	b00b883a 	mov	r5,r22
  804e78:	d9800d04 	addi	r6,sp,52
  804e7c:	d9c15215 	stw	r7,1352(sp)
  804e80:	08041a80 	call	8041a8 <__sprint_r>
  804e84:	d9c15217 	ldw	r7,1352(sp)
  804e88:	103e951e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804e8c:	dc800f17 	ldw	r18,60(sp)
  804e90:	dc400e17 	ldw	r17,56(sp)
  804e94:	dd401a04 	addi	r21,sp,104
  804e98:	003e0406 	br	8046ac <___vfprintf_internal_r+0x4ac>
  804e9c:	d9000617 	ldw	r4,24(sp)
  804ea0:	0102520e 	bge	zero,r4,8057ec <___vfprintf_internal_r+0x15ec>
  804ea4:	d9814817 	ldw	r6,1312(sp)
  804ea8:	21807a16 	blt	r4,r6,805094 <___vfprintf_internal_r+0xe94>
  804eac:	d8814217 	ldw	r2,1288(sp)
  804eb0:	91a5883a 	add	r18,r18,r6
  804eb4:	8c400044 	addi	r17,r17,1
  804eb8:	a8800015 	stw	r2,0(r21)
  804ebc:	008001c4 	movi	r2,7
  804ec0:	a9800115 	stw	r6,4(r21)
  804ec4:	dc800f15 	stw	r18,60(sp)
  804ec8:	dc400e15 	stw	r17,56(sp)
  804ecc:	1442f616 	blt	r2,r17,805aa8 <___vfprintf_internal_r+0x18a8>
  804ed0:	a8c00204 	addi	r3,r21,8
  804ed4:	d9414817 	ldw	r5,1312(sp)
  804ed8:	2161c83a 	sub	r16,r4,r5
  804edc:	043f9d0e 	bge	zero,r16,804d54 <___vfprintf_internal_r+0xb54>
  804ee0:	00800404 	movi	r2,16
  804ee4:	1402130e 	bge	r2,r16,805734 <___vfprintf_internal_r+0x1534>
  804ee8:	dc400e17 	ldw	r17,56(sp)
  804eec:	1027883a 	mov	r19,r2
  804ef0:	07002074 	movhi	fp,129
  804ef4:	e7132f04 	addi	fp,fp,19644
  804ef8:	050001c4 	movi	r20,7
  804efc:	00000306 	br	804f0c <___vfprintf_internal_r+0xd0c>
  804f00:	18c00204 	addi	r3,r3,8
  804f04:	843ffc04 	addi	r16,r16,-16
  804f08:	9c020d0e 	bge	r19,r16,805740 <___vfprintf_internal_r+0x1540>
  804f0c:	94800404 	addi	r18,r18,16
  804f10:	8c400044 	addi	r17,r17,1
  804f14:	1f000015 	stw	fp,0(r3)
  804f18:	1cc00115 	stw	r19,4(r3)
  804f1c:	dc800f15 	stw	r18,60(sp)
  804f20:	dc400e15 	stw	r17,56(sp)
  804f24:	a47ff60e 	bge	r20,r17,804f00 <___vfprintf_internal_r+0xd00>
  804f28:	d9015017 	ldw	r4,1344(sp)
  804f2c:	b00b883a 	mov	r5,r22
  804f30:	d9800d04 	addi	r6,sp,52
  804f34:	08041a80 	call	8041a8 <__sprint_r>
  804f38:	103e691e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804f3c:	dc800f17 	ldw	r18,60(sp)
  804f40:	dc400e17 	ldw	r17,56(sp)
  804f44:	d8c01a04 	addi	r3,sp,104
  804f48:	003fee06 	br	804f04 <___vfprintf_internal_r+0xd04>
  804f4c:	d8814817 	ldw	r2,1312(sp)
  804f50:	143fffc4 	addi	r16,r2,-1
  804f54:	043e970e 	bge	zero,r16,8049b4 <___vfprintf_internal_r+0x7b4>
  804f58:	00800404 	movi	r2,16
  804f5c:	1400180e 	bge	r2,r16,804fc0 <___vfprintf_internal_r+0xdc0>
  804f60:	1029883a 	mov	r20,r2
  804f64:	07002074 	movhi	fp,129
  804f68:	e7132f04 	addi	fp,fp,19644
  804f6c:	054001c4 	movi	r21,7
  804f70:	00000306 	br	804f80 <___vfprintf_internal_r+0xd80>
  804f74:	9cc00204 	addi	r19,r19,8
  804f78:	843ffc04 	addi	r16,r16,-16
  804f7c:	a400120e 	bge	r20,r16,804fc8 <___vfprintf_internal_r+0xdc8>
  804f80:	94800404 	addi	r18,r18,16
  804f84:	8c400044 	addi	r17,r17,1
  804f88:	9f000015 	stw	fp,0(r19)
  804f8c:	9d000115 	stw	r20,4(r19)
  804f90:	dc800f15 	stw	r18,60(sp)
  804f94:	dc400e15 	stw	r17,56(sp)
  804f98:	ac7ff60e 	bge	r21,r17,804f74 <___vfprintf_internal_r+0xd74>
  804f9c:	d9015017 	ldw	r4,1344(sp)
  804fa0:	b00b883a 	mov	r5,r22
  804fa4:	d9800d04 	addi	r6,sp,52
  804fa8:	08041a80 	call	8041a8 <__sprint_r>
  804fac:	103e4c1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804fb0:	dc800f17 	ldw	r18,60(sp)
  804fb4:	dc400e17 	ldw	r17,56(sp)
  804fb8:	dcc01a04 	addi	r19,sp,104
  804fbc:	003fee06 	br	804f78 <___vfprintf_internal_r+0xd78>
  804fc0:	07002074 	movhi	fp,129
  804fc4:	e7132f04 	addi	fp,fp,19644
  804fc8:	9425883a 	add	r18,r18,r16
  804fcc:	8c400044 	addi	r17,r17,1
  804fd0:	008001c4 	movi	r2,7
  804fd4:	9f000015 	stw	fp,0(r19)
  804fd8:	9c000115 	stw	r16,4(r19)
  804fdc:	dc800f15 	stw	r18,60(sp)
  804fe0:	dc400e15 	stw	r17,56(sp)
  804fe4:	147e720e 	bge	r2,r17,8049b0 <___vfprintf_internal_r+0x7b0>
  804fe8:	d9015017 	ldw	r4,1344(sp)
  804fec:	b00b883a 	mov	r5,r22
  804ff0:	d9800d04 	addi	r6,sp,52
  804ff4:	08041a80 	call	8041a8 <__sprint_r>
  804ff8:	103e391e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  804ffc:	dc800f17 	ldw	r18,60(sp)
  805000:	dc400e17 	ldw	r17,56(sp)
  805004:	dcc01a04 	addi	r19,sp,104
  805008:	003e6a06 	br	8049b4 <___vfprintf_internal_r+0x7b4>
  80500c:	d9015017 	ldw	r4,1344(sp)
  805010:	b00b883a 	mov	r5,r22
  805014:	d9800d04 	addi	r6,sp,52
  805018:	d9c15215 	stw	r7,1352(sp)
  80501c:	08041a80 	call	8041a8 <__sprint_r>
  805020:	d9c15217 	ldw	r7,1352(sp)
  805024:	103e2e1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805028:	dc800f17 	ldw	r18,60(sp)
  80502c:	dc400e17 	ldw	r17,56(sp)
  805030:	dd401a04 	addi	r21,sp,104
  805034:	003dba06 	br	804720 <___vfprintf_internal_r+0x520>
  805038:	d9015017 	ldw	r4,1344(sp)
  80503c:	b00b883a 	mov	r5,r22
  805040:	d9800d04 	addi	r6,sp,52
  805044:	08041a80 	call	8041a8 <__sprint_r>
  805048:	103e251e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  80504c:	dc800f17 	ldw	r18,60(sp)
  805050:	dc400e17 	ldw	r17,56(sp)
  805054:	dcc01a04 	addi	r19,sp,104
  805058:	003e4206 	br	804964 <___vfprintf_internal_r+0x764>
  80505c:	d9015017 	ldw	r4,1344(sp)
  805060:	b00b883a 	mov	r5,r22
  805064:	d9800d04 	addi	r6,sp,52
  805068:	08041a80 	call	8041a8 <__sprint_r>
  80506c:	103e1c1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805070:	dc800f17 	ldw	r18,60(sp)
  805074:	dc400e17 	ldw	r17,56(sp)
  805078:	d8c01a04 	addi	r3,sp,104
  80507c:	003e2e06 	br	804938 <___vfprintf_internal_r+0x738>
  805080:	d9414d17 	ldw	r5,1332(sp)
  805084:	2880004c 	andi	r2,r5,1
  805088:	1005003a 	cmpeq	r2,r2,zero
  80508c:	103dda1e 	bne	r2,zero,8047f8 <___vfprintf_internal_r+0x5f8>
  805090:	003e9f06 	br	804b10 <___vfprintf_internal_r+0x910>
  805094:	d8c14217 	ldw	r3,1288(sp)
  805098:	9125883a 	add	r18,r18,r4
  80509c:	8c400044 	addi	r17,r17,1
  8050a0:	008001c4 	movi	r2,7
  8050a4:	a8c00015 	stw	r3,0(r21)
  8050a8:	a9000115 	stw	r4,4(r21)
  8050ac:	dc800f15 	stw	r18,60(sp)
  8050b0:	dc400e15 	stw	r17,56(sp)
  8050b4:	14426616 	blt	r2,r17,805a50 <___vfprintf_internal_r+0x1850>
  8050b8:	a8c00204 	addi	r3,r21,8
  8050bc:	d9414a17 	ldw	r5,1320(sp)
  8050c0:	00800044 	movi	r2,1
  8050c4:	94800044 	addi	r18,r18,1
  8050c8:	8c400044 	addi	r17,r17,1
  8050cc:	18800115 	stw	r2,4(r3)
  8050d0:	008001c4 	movi	r2,7
  8050d4:	19400015 	stw	r5,0(r3)
  8050d8:	dc800f15 	stw	r18,60(sp)
  8050dc:	dc400e15 	stw	r17,56(sp)
  8050e0:	2021883a 	mov	r16,r4
  8050e4:	14425016 	blt	r2,r17,805a28 <___vfprintf_internal_r+0x1828>
  8050e8:	19400204 	addi	r5,r3,8
  8050ec:	d9814817 	ldw	r6,1312(sp)
  8050f0:	8c400044 	addi	r17,r17,1
  8050f4:	dc400e15 	stw	r17,56(sp)
  8050f8:	3107c83a 	sub	r3,r6,r4
  8050fc:	d9014217 	ldw	r4,1288(sp)
  805100:	90e5883a 	add	r18,r18,r3
  805104:	28c00115 	stw	r3,4(r5)
  805108:	8105883a 	add	r2,r16,r4
  80510c:	28800015 	stw	r2,0(r5)
  805110:	008001c4 	movi	r2,7
  805114:	dc800f15 	stw	r18,60(sp)
  805118:	147f1d16 	blt	r2,r17,804d90 <___vfprintf_internal_r+0xb90>
  80511c:	28c00204 	addi	r3,r5,8
  805120:	003db506 	br	8047f8 <___vfprintf_internal_r+0x5f8>
  805124:	3c000017 	ldw	r16,0(r7)
  805128:	3c400117 	ldw	r17,4(r7)
  80512c:	39800204 	addi	r6,r7,8
  805130:	01000044 	movi	r4,1
  805134:	d9814115 	stw	r6,1284(sp)
  805138:	d8000405 	stb	zero,16(sp)
  80513c:	003ebe06 	br	804c38 <___vfprintf_internal_r+0xa38>
  805140:	3c000017 	ldw	r16,0(r7)
  805144:	3c400117 	ldw	r17,4(r7)
  805148:	38800204 	addi	r2,r7,8
  80514c:	d8814115 	stw	r2,1284(sp)
  805150:	003eb706 	br	804c30 <___vfprintf_internal_r+0xa30>
  805154:	3c000017 	ldw	r16,0(r7)
  805158:	3c400117 	ldw	r17,4(r7)
  80515c:	39000204 	addi	r4,r7,8
  805160:	d9014115 	stw	r4,1284(sp)
  805164:	0009883a 	mov	r4,zero
  805168:	d8000405 	stb	zero,16(sp)
  80516c:	003eb206 	br	804c38 <___vfprintf_internal_r+0xa38>
  805170:	38c00017 	ldw	r3,0(r7)
  805174:	39c00104 	addi	r7,r7,4
  805178:	d8c14b15 	stw	r3,1324(sp)
  80517c:	1800d10e 	bge	r3,zero,8054c4 <___vfprintf_internal_r+0x12c4>
  805180:	00c7c83a 	sub	r3,zero,r3
  805184:	d8c14b15 	stw	r3,1324(sp)
  805188:	d9014d17 	ldw	r4,1332(sp)
  80518c:	b8c00007 	ldb	r3,0(r23)
  805190:	21000114 	ori	r4,r4,4
  805194:	d9014d15 	stw	r4,1332(sp)
  805198:	003c9806 	br	8043fc <___vfprintf_internal_r+0x1fc>
  80519c:	d9814d17 	ldw	r6,1332(sp)
  8051a0:	3080080c 	andi	r2,r6,32
  8051a4:	1001f026 	beq	r2,zero,805968 <___vfprintf_internal_r+0x1768>
  8051a8:	d9014c17 	ldw	r4,1328(sp)
  8051ac:	38800017 	ldw	r2,0(r7)
  8051b0:	39c00104 	addi	r7,r7,4
  8051b4:	d9c14115 	stw	r7,1284(sp)
  8051b8:	2007d7fa 	srai	r3,r4,31
  8051bc:	d9c14117 	ldw	r7,1284(sp)
  8051c0:	11000015 	stw	r4,0(r2)
  8051c4:	10c00115 	stw	r3,4(r2)
  8051c8:	003c6906 	br	804370 <___vfprintf_internal_r+0x170>
  8051cc:	b8c00007 	ldb	r3,0(r23)
  8051d0:	00801b04 	movi	r2,108
  8051d4:	18824f26 	beq	r3,r2,805b14 <___vfprintf_internal_r+0x1914>
  8051d8:	d9414d17 	ldw	r5,1332(sp)
  8051dc:	29400414 	ori	r5,r5,16
  8051e0:	d9414d15 	stw	r5,1332(sp)
  8051e4:	003c8506 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8051e8:	d9814d17 	ldw	r6,1332(sp)
  8051ec:	b8c00007 	ldb	r3,0(r23)
  8051f0:	31800814 	ori	r6,r6,32
  8051f4:	d9814d15 	stw	r6,1332(sp)
  8051f8:	003c8006 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8051fc:	d8814d17 	ldw	r2,1332(sp)
  805200:	3c000017 	ldw	r16,0(r7)
  805204:	00c01e04 	movi	r3,120
  805208:	10800094 	ori	r2,r2,2
  80520c:	d8814d15 	stw	r2,1332(sp)
  805210:	39c00104 	addi	r7,r7,4
  805214:	01402074 	movhi	r5,129
  805218:	29531704 	addi	r5,r5,19548
  80521c:	00800c04 	movi	r2,48
  805220:	0023883a 	mov	r17,zero
  805224:	01000084 	movi	r4,2
  805228:	d9c14115 	stw	r7,1284(sp)
  80522c:	d8c14e15 	stw	r3,1336(sp)
  805230:	d9414515 	stw	r5,1300(sp)
  805234:	d8800505 	stb	r2,20(sp)
  805238:	d8c00545 	stb	r3,21(sp)
  80523c:	d8000405 	stb	zero,16(sp)
  805240:	003e7d06 	br	804c38 <___vfprintf_internal_r+0xa38>
  805244:	d8814d17 	ldw	r2,1332(sp)
  805248:	b8c00007 	ldb	r3,0(r23)
  80524c:	10801014 	ori	r2,r2,64
  805250:	d8814d15 	stw	r2,1332(sp)
  805254:	003c6906 	br	8043fc <___vfprintf_internal_r+0x1fc>
  805258:	d9414d17 	ldw	r5,1332(sp)
  80525c:	2880020c 	andi	r2,r5,8
  805260:	1001df26 	beq	r2,zero,8059e0 <___vfprintf_internal_r+0x17e0>
  805264:	39800017 	ldw	r6,0(r7)
  805268:	38800204 	addi	r2,r7,8
  80526c:	d8814115 	stw	r2,1284(sp)
  805270:	d9814315 	stw	r6,1292(sp)
  805274:	39c00117 	ldw	r7,4(r7)
  805278:	d9c14415 	stw	r7,1296(sp)
  80527c:	d9014317 	ldw	r4,1292(sp)
  805280:	d9414417 	ldw	r5,1296(sp)
  805284:	080a8600 	call	80a860 <__isinfd>
  805288:	10021726 	beq	r2,zero,805ae8 <___vfprintf_internal_r+0x18e8>
  80528c:	d9014317 	ldw	r4,1292(sp)
  805290:	d9414417 	ldw	r5,1296(sp)
  805294:	000d883a 	mov	r6,zero
  805298:	000f883a 	mov	r7,zero
  80529c:	080f5c40 	call	80f5c4 <__ltdf2>
  8052a0:	1002ca16 	blt	r2,zero,805dcc <___vfprintf_internal_r+0x1bcc>
  8052a4:	d9414e17 	ldw	r5,1336(sp)
  8052a8:	008011c4 	movi	r2,71
  8052ac:	11420a16 	blt	r2,r5,805ad8 <___vfprintf_internal_r+0x18d8>
  8052b0:	01802074 	movhi	r6,129
  8052b4:	31931c04 	addi	r6,r6,19568
  8052b8:	d9814215 	stw	r6,1288(sp)
  8052bc:	d9014d17 	ldw	r4,1332(sp)
  8052c0:	00c000c4 	movi	r3,3
  8052c4:	00bfdfc4 	movi	r2,-129
  8052c8:	2088703a 	and	r4,r4,r2
  8052cc:	180f883a 	mov	r7,r3
  8052d0:	d8c14615 	stw	r3,1304(sp)
  8052d4:	d9014d15 	stw	r4,1332(sp)
  8052d8:	d8014715 	stw	zero,1308(sp)
  8052dc:	003e6a06 	br	804c88 <___vfprintf_internal_r+0xa88>
  8052e0:	38800017 	ldw	r2,0(r7)
  8052e4:	00c00044 	movi	r3,1
  8052e8:	39c00104 	addi	r7,r7,4
  8052ec:	d9c14115 	stw	r7,1284(sp)
  8052f0:	d9001004 	addi	r4,sp,64
  8052f4:	180f883a 	mov	r7,r3
  8052f8:	d8c14615 	stw	r3,1304(sp)
  8052fc:	d9014215 	stw	r4,1288(sp)
  805300:	d8801005 	stb	r2,64(sp)
  805304:	d8000405 	stb	zero,16(sp)
  805308:	003cac06 	br	8045bc <___vfprintf_internal_r+0x3bc>
  80530c:	01402074 	movhi	r5,129
  805310:	29532204 	addi	r5,r5,19592
  805314:	d9414515 	stw	r5,1300(sp)
  805318:	d9814d17 	ldw	r6,1332(sp)
  80531c:	3080080c 	andi	r2,r6,32
  805320:	1000f926 	beq	r2,zero,805708 <___vfprintf_internal_r+0x1508>
  805324:	3c000017 	ldw	r16,0(r7)
  805328:	3c400117 	ldw	r17,4(r7)
  80532c:	38800204 	addi	r2,r7,8
  805330:	d8814115 	stw	r2,1284(sp)
  805334:	d9414d17 	ldw	r5,1332(sp)
  805338:	2880004c 	andi	r2,r5,1
  80533c:	1005003a 	cmpeq	r2,r2,zero
  805340:	1000b31e 	bne	r2,zero,805610 <___vfprintf_internal_r+0x1410>
  805344:	8444b03a 	or	r2,r16,r17
  805348:	1000b126 	beq	r2,zero,805610 <___vfprintf_internal_r+0x1410>
  80534c:	d9814e17 	ldw	r6,1336(sp)
  805350:	29400094 	ori	r5,r5,2
  805354:	00800c04 	movi	r2,48
  805358:	01000084 	movi	r4,2
  80535c:	d9414d15 	stw	r5,1332(sp)
  805360:	d8800505 	stb	r2,20(sp)
  805364:	d9800545 	stb	r6,21(sp)
  805368:	d8000405 	stb	zero,16(sp)
  80536c:	003e3206 	br	804c38 <___vfprintf_internal_r+0xa38>
  805370:	01802074 	movhi	r6,129
  805374:	31931704 	addi	r6,r6,19548
  805378:	d9814515 	stw	r6,1300(sp)
  80537c:	003fe606 	br	805318 <___vfprintf_internal_r+0x1118>
  805380:	00800ac4 	movi	r2,43
  805384:	d8800405 	stb	r2,16(sp)
  805388:	b8c00007 	ldb	r3,0(r23)
  80538c:	003c1b06 	br	8043fc <___vfprintf_internal_r+0x1fc>
  805390:	d8814d17 	ldw	r2,1332(sp)
  805394:	b8c00007 	ldb	r3,0(r23)
  805398:	10800054 	ori	r2,r2,1
  80539c:	d8814d15 	stw	r2,1332(sp)
  8053a0:	003c1606 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8053a4:	d8800407 	ldb	r2,16(sp)
  8053a8:	1000461e 	bne	r2,zero,8054c4 <___vfprintf_internal_r+0x12c4>
  8053ac:	00800804 	movi	r2,32
  8053b0:	d8800405 	stb	r2,16(sp)
  8053b4:	b8c00007 	ldb	r3,0(r23)
  8053b8:	003c1006 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8053bc:	d9814d17 	ldw	r6,1332(sp)
  8053c0:	b8c00007 	ldb	r3,0(r23)
  8053c4:	31800214 	ori	r6,r6,8
  8053c8:	d9814d15 	stw	r6,1332(sp)
  8053cc:	003c0b06 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8053d0:	0007883a 	mov	r3,zero
  8053d4:	01000244 	movi	r4,9
  8053d8:	188002a4 	muli	r2,r3,10
  8053dc:	b8c00007 	ldb	r3,0(r23)
  8053e0:	d9814e17 	ldw	r6,1336(sp)
  8053e4:	bdc00044 	addi	r23,r23,1
  8053e8:	d8c14e15 	stw	r3,1336(sp)
  8053ec:	d9414e17 	ldw	r5,1336(sp)
  8053f0:	3085883a 	add	r2,r6,r2
  8053f4:	10fff404 	addi	r3,r2,-48
  8053f8:	28bff404 	addi	r2,r5,-48
  8053fc:	20bff62e 	bgeu	r4,r2,8053d8 <___vfprintf_internal_r+0x11d8>
  805400:	d8c14b15 	stw	r3,1324(sp)
  805404:	003bff06 	br	804404 <___vfprintf_internal_r+0x204>
  805408:	d9414d17 	ldw	r5,1332(sp)
  80540c:	b8c00007 	ldb	r3,0(r23)
  805410:	29402014 	ori	r5,r5,128
  805414:	d9414d15 	stw	r5,1332(sp)
  805418:	003bf806 	br	8043fc <___vfprintf_internal_r+0x1fc>
  80541c:	b8c00007 	ldb	r3,0(r23)
  805420:	00800a84 	movi	r2,42
  805424:	bdc00044 	addi	r23,r23,1
  805428:	18831526 	beq	r3,r2,806080 <___vfprintf_internal_r+0x1e80>
  80542c:	d8c14e15 	stw	r3,1336(sp)
  805430:	18bff404 	addi	r2,r3,-48
  805434:	00c00244 	movi	r3,9
  805438:	18827836 	bltu	r3,r2,805e1c <___vfprintf_internal_r+0x1c1c>
  80543c:	000d883a 	mov	r6,zero
  805440:	308002a4 	muli	r2,r6,10
  805444:	b9800007 	ldb	r6,0(r23)
  805448:	d9414e17 	ldw	r5,1336(sp)
  80544c:	bdc00044 	addi	r23,r23,1
  805450:	d9814e15 	stw	r6,1336(sp)
  805454:	d9014e17 	ldw	r4,1336(sp)
  805458:	1145883a 	add	r2,r2,r5
  80545c:	11bff404 	addi	r6,r2,-48
  805460:	20bff404 	addi	r2,r4,-48
  805464:	18bff62e 	bgeu	r3,r2,805440 <___vfprintf_internal_r+0x1240>
  805468:	3027883a 	mov	r19,r6
  80546c:	303be50e 	bge	r6,zero,804404 <___vfprintf_internal_r+0x204>
  805470:	04ffffc4 	movi	r19,-1
  805474:	003be306 	br	804404 <___vfprintf_internal_r+0x204>
  805478:	d8000405 	stb	zero,16(sp)
  80547c:	39800017 	ldw	r6,0(r7)
  805480:	39c00104 	addi	r7,r7,4
  805484:	d9c14115 	stw	r7,1284(sp)
  805488:	d9814215 	stw	r6,1288(sp)
  80548c:	3001c926 	beq	r6,zero,805bb4 <___vfprintf_internal_r+0x19b4>
  805490:	98000e16 	blt	r19,zero,8054cc <___vfprintf_internal_r+0x12cc>
  805494:	d9014217 	ldw	r4,1288(sp)
  805498:	000b883a 	mov	r5,zero
  80549c:	980d883a 	mov	r6,r19
  8054a0:	08031700 	call	803170 <memchr>
  8054a4:	10025926 	beq	r2,zero,805e0c <___vfprintf_internal_r+0x1c0c>
  8054a8:	d8c14217 	ldw	r3,1288(sp)
  8054ac:	10cfc83a 	sub	r7,r2,r3
  8054b0:	99c19e16 	blt	r19,r7,805b2c <___vfprintf_internal_r+0x192c>
  8054b4:	d9c14615 	stw	r7,1304(sp)
  8054b8:	38000916 	blt	r7,zero,8054e0 <___vfprintf_internal_r+0x12e0>
  8054bc:	d8014715 	stw	zero,1308(sp)
  8054c0:	003df106 	br	804c88 <___vfprintf_internal_r+0xa88>
  8054c4:	b8c00007 	ldb	r3,0(r23)
  8054c8:	003bcc06 	br	8043fc <___vfprintf_internal_r+0x1fc>
  8054cc:	d9014217 	ldw	r4,1288(sp)
  8054d0:	08041340 	call	804134 <strlen>
  8054d4:	d8814615 	stw	r2,1304(sp)
  8054d8:	100f883a 	mov	r7,r2
  8054dc:	103ff70e 	bge	r2,zero,8054bc <___vfprintf_internal_r+0x12bc>
  8054e0:	d8014615 	stw	zero,1304(sp)
  8054e4:	d8014715 	stw	zero,1308(sp)
  8054e8:	003de706 	br	804c88 <___vfprintf_internal_r+0xa88>
  8054ec:	20c03fcc 	andi	r3,r4,255
  8054f0:	00800044 	movi	r2,1
  8054f4:	18802d26 	beq	r3,r2,8055ac <___vfprintf_internal_r+0x13ac>
  8054f8:	18800e36 	bltu	r3,r2,805534 <___vfprintf_internal_r+0x1334>
  8054fc:	00800084 	movi	r2,2
  805500:	1880fa26 	beq	r3,r2,8058ec <___vfprintf_internal_r+0x16ec>
  805504:	01002074 	movhi	r4,129
  805508:	21132704 	addi	r4,r4,19612
  80550c:	08041340 	call	804134 <strlen>
  805510:	100f883a 	mov	r7,r2
  805514:	dcc14615 	stw	r19,1304(sp)
  805518:	9880010e 	bge	r19,r2,805520 <___vfprintf_internal_r+0x1320>
  80551c:	d8814615 	stw	r2,1304(sp)
  805520:	00802074 	movhi	r2,129
  805524:	10932704 	addi	r2,r2,19612
  805528:	dcc14715 	stw	r19,1308(sp)
  80552c:	d8814215 	stw	r2,1288(sp)
  805530:	003dd506 	br	804c88 <___vfprintf_internal_r+0xa88>
  805534:	d9401a04 	addi	r5,sp,104
  805538:	dd001004 	addi	r20,sp,64
  80553c:	d9414215 	stw	r5,1288(sp)
  805540:	880a977a 	slli	r5,r17,29
  805544:	d9814217 	ldw	r6,1288(sp)
  805548:	8004d0fa 	srli	r2,r16,3
  80554c:	8806d0fa 	srli	r3,r17,3
  805550:	810001cc 	andi	r4,r16,7
  805554:	2884b03a 	or	r2,r5,r2
  805558:	31bfffc4 	addi	r6,r6,-1
  80555c:	21000c04 	addi	r4,r4,48
  805560:	d9814215 	stw	r6,1288(sp)
  805564:	10cab03a 	or	r5,r2,r3
  805568:	31000005 	stb	r4,0(r6)
  80556c:	1021883a 	mov	r16,r2
  805570:	1823883a 	mov	r17,r3
  805574:	283ff21e 	bne	r5,zero,805540 <___vfprintf_internal_r+0x1340>
  805578:	d8c14d17 	ldw	r3,1332(sp)
  80557c:	1880004c 	andi	r2,r3,1
  805580:	1005003a 	cmpeq	r2,r2,zero
  805584:	103db91e 	bne	r2,zero,804c6c <___vfprintf_internal_r+0xa6c>
  805588:	20803fcc 	andi	r2,r4,255
  80558c:	1080201c 	xori	r2,r2,128
  805590:	10bfe004 	addi	r2,r2,-128
  805594:	00c00c04 	movi	r3,48
  805598:	10fdb426 	beq	r2,r3,804c6c <___vfprintf_internal_r+0xa6c>
  80559c:	31bfffc4 	addi	r6,r6,-1
  8055a0:	d9814215 	stw	r6,1288(sp)
  8055a4:	30c00005 	stb	r3,0(r6)
  8055a8:	003db006 	br	804c6c <___vfprintf_internal_r+0xa6c>
  8055ac:	88800068 	cmpgeui	r2,r17,1
  8055b0:	10002c1e 	bne	r2,zero,805664 <___vfprintf_internal_r+0x1464>
  8055b4:	8800021e 	bne	r17,zero,8055c0 <___vfprintf_internal_r+0x13c0>
  8055b8:	00800244 	movi	r2,9
  8055bc:	14002936 	bltu	r2,r16,805664 <___vfprintf_internal_r+0x1464>
  8055c0:	d90019c4 	addi	r4,sp,103
  8055c4:	dd001004 	addi	r20,sp,64
  8055c8:	d9014215 	stw	r4,1288(sp)
  8055cc:	d9014217 	ldw	r4,1288(sp)
  8055d0:	80800c04 	addi	r2,r16,48
  8055d4:	20800005 	stb	r2,0(r4)
  8055d8:	003da406 	br	804c6c <___vfprintf_internal_r+0xa6c>
  8055dc:	dc400e17 	ldw	r17,56(sp)
  8055e0:	07002074 	movhi	fp,129
  8055e4:	e7132f04 	addi	fp,fp,19644
  8055e8:	9425883a 	add	r18,r18,r16
  8055ec:	8c400044 	addi	r17,r17,1
  8055f0:	008001c4 	movi	r2,7
  8055f4:	1f000015 	stw	fp,0(r3)
  8055f8:	1c000115 	stw	r16,4(r3)
  8055fc:	dc800f15 	stw	r18,60(sp)
  805600:	dc400e15 	stw	r17,56(sp)
  805604:	147de216 	blt	r2,r17,804d90 <___vfprintf_internal_r+0xb90>
  805608:	18c00204 	addi	r3,r3,8
  80560c:	003c7a06 	br	8047f8 <___vfprintf_internal_r+0x5f8>
  805610:	01000084 	movi	r4,2
  805614:	d8000405 	stb	zero,16(sp)
  805618:	003d8706 	br	804c38 <___vfprintf_internal_r+0xa38>
  80561c:	d9814d17 	ldw	r6,1332(sp)
  805620:	30c4703a 	and	r2,r6,r3
  805624:	1005003a 	cmpeq	r2,r2,zero
  805628:	103cb926 	beq	r2,zero,804910 <___vfprintf_internal_r+0x710>
  80562c:	d9014217 	ldw	r4,1288(sp)
  805630:	94800044 	addi	r18,r18,1
  805634:	8c400044 	addi	r17,r17,1
  805638:	008001c4 	movi	r2,7
  80563c:	a9000015 	stw	r4,0(r21)
  805640:	a8c00115 	stw	r3,4(r21)
  805644:	dc800f15 	stw	r18,60(sp)
  805648:	dc400e15 	stw	r17,56(sp)
  80564c:	147e6616 	blt	r2,r17,804fe8 <___vfprintf_internal_r+0xde8>
  805650:	acc00204 	addi	r19,r21,8
  805654:	003cd706 	br	8049b4 <___vfprintf_internal_r+0x7b4>
  805658:	07002074 	movhi	fp,129
  80565c:	e7132f04 	addi	fp,fp,19644
  805660:	003c4f06 	br	8047a0 <___vfprintf_internal_r+0x5a0>
  805664:	dd001004 	addi	r20,sp,64
  805668:	dc801a04 	addi	r18,sp,104
  80566c:	8009883a 	mov	r4,r16
  805670:	880b883a 	mov	r5,r17
  805674:	01800284 	movi	r6,10
  805678:	000f883a 	mov	r7,zero
  80567c:	080e16c0 	call	80e16c <__umoddi3>
  805680:	12000c04 	addi	r8,r2,48
  805684:	94bfffc4 	addi	r18,r18,-1
  805688:	8009883a 	mov	r4,r16
  80568c:	880b883a 	mov	r5,r17
  805690:	01800284 	movi	r6,10
  805694:	000f883a 	mov	r7,zero
  805698:	92000005 	stb	r8,0(r18)
  80569c:	080db900 	call	80db90 <__udivdi3>
  8056a0:	1009883a 	mov	r4,r2
  8056a4:	1021883a 	mov	r16,r2
  8056a8:	18800068 	cmpgeui	r2,r3,1
  8056ac:	1823883a 	mov	r17,r3
  8056b0:	103fee1e 	bne	r2,zero,80566c <___vfprintf_internal_r+0x146c>
  8056b4:	1800021e 	bne	r3,zero,8056c0 <___vfprintf_internal_r+0x14c0>
  8056b8:	00800244 	movi	r2,9
  8056bc:	113feb36 	bltu	r2,r4,80566c <___vfprintf_internal_r+0x146c>
  8056c0:	94bfffc4 	addi	r18,r18,-1
  8056c4:	dc814215 	stw	r18,1288(sp)
  8056c8:	003fc006 	br	8055cc <___vfprintf_internal_r+0x13cc>
  8056cc:	d9014d17 	ldw	r4,1332(sp)
  8056d0:	2080004c 	andi	r2,r4,1
  8056d4:	10009a1e 	bne	r2,zero,805940 <___vfprintf_internal_r+0x1740>
  8056d8:	d9401a04 	addi	r5,sp,104
  8056dc:	dd001004 	addi	r20,sp,64
  8056e0:	d9414215 	stw	r5,1288(sp)
  8056e4:	003d6106 	br	804c6c <___vfprintf_internal_r+0xa6c>
  8056e8:	d9015017 	ldw	r4,1344(sp)
  8056ec:	b00b883a 	mov	r5,r22
  8056f0:	d9800d04 	addi	r6,sp,52
  8056f4:	08041a80 	call	8041a8 <__sprint_r>
  8056f8:	103c791e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  8056fc:	dc800f17 	ldw	r18,60(sp)
  805700:	d8c01a04 	addi	r3,sp,104
  805704:	003cff06 	br	804b04 <___vfprintf_internal_r+0x904>
  805708:	d8c14d17 	ldw	r3,1332(sp)
  80570c:	1880040c 	andi	r2,r3,16
  805710:	1000711e 	bne	r2,zero,8058d8 <___vfprintf_internal_r+0x16d8>
  805714:	d9014d17 	ldw	r4,1332(sp)
  805718:	2080100c 	andi	r2,r4,64
  80571c:	10006e26 	beq	r2,zero,8058d8 <___vfprintf_internal_r+0x16d8>
  805720:	3c00000b 	ldhu	r16,0(r7)
  805724:	0023883a 	mov	r17,zero
  805728:	39c00104 	addi	r7,r7,4
  80572c:	d9c14115 	stw	r7,1284(sp)
  805730:	003f0006 	br	805334 <___vfprintf_internal_r+0x1134>
  805734:	dc400e17 	ldw	r17,56(sp)
  805738:	07002074 	movhi	fp,129
  80573c:	e7132f04 	addi	fp,fp,19644
  805740:	9425883a 	add	r18,r18,r16
  805744:	8c400044 	addi	r17,r17,1
  805748:	008001c4 	movi	r2,7
  80574c:	1f000015 	stw	fp,0(r3)
  805750:	1c000115 	stw	r16,4(r3)
  805754:	dc800f15 	stw	r18,60(sp)
  805758:	dc400e15 	stw	r17,56(sp)
  80575c:	147d7616 	blt	r2,r17,804d38 <___vfprintf_internal_r+0xb38>
  805760:	18c00204 	addi	r3,r3,8
  805764:	003d7b06 	br	804d54 <___vfprintf_internal_r+0xb54>
  805768:	dc800f17 	ldw	r18,60(sp)
  80576c:	dc400e17 	ldw	r17,56(sp)
  805770:	07002074 	movhi	fp,129
  805774:	e7133304 	addi	fp,fp,19660
  805778:	003bc006 	br	80467c <___vfprintf_internal_r+0x47c>
  80577c:	d9015017 	ldw	r4,1344(sp)
  805780:	b00b883a 	mov	r5,r22
  805784:	d9800d04 	addi	r6,sp,52
  805788:	08041a80 	call	8041a8 <__sprint_r>
  80578c:	103c541e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805790:	dc800f17 	ldw	r18,60(sp)
  805794:	d8c01a04 	addi	r3,sp,104
  805798:	003ce906 	br	804b40 <___vfprintf_internal_r+0x940>
  80579c:	3c000017 	ldw	r16,0(r7)
  8057a0:	0009883a 	mov	r4,zero
  8057a4:	39c00104 	addi	r7,r7,4
  8057a8:	0023883a 	mov	r17,zero
  8057ac:	d9c14115 	stw	r7,1284(sp)
  8057b0:	d8000405 	stb	zero,16(sp)
  8057b4:	003d2006 	br	804c38 <___vfprintf_internal_r+0xa38>
  8057b8:	38800017 	ldw	r2,0(r7)
  8057bc:	39c00104 	addi	r7,r7,4
  8057c0:	d9c14115 	stw	r7,1284(sp)
  8057c4:	1023d7fa 	srai	r17,r2,31
  8057c8:	1021883a 	mov	r16,r2
  8057cc:	003d1806 	br	804c30 <___vfprintf_internal_r+0xa30>
  8057d0:	3c000017 	ldw	r16,0(r7)
  8057d4:	01000044 	movi	r4,1
  8057d8:	39c00104 	addi	r7,r7,4
  8057dc:	0023883a 	mov	r17,zero
  8057e0:	d9c14115 	stw	r7,1284(sp)
  8057e4:	d8000405 	stb	zero,16(sp)
  8057e8:	003d1306 	br	804c38 <___vfprintf_internal_r+0xa38>
  8057ec:	00802074 	movhi	r2,129
  8057f0:	10932e04 	addi	r2,r2,19640
  8057f4:	94800044 	addi	r18,r18,1
  8057f8:	8c400044 	addi	r17,r17,1
  8057fc:	a8800015 	stw	r2,0(r21)
  805800:	00c00044 	movi	r3,1
  805804:	008001c4 	movi	r2,7
  805808:	a8c00115 	stw	r3,4(r21)
  80580c:	dc800f15 	stw	r18,60(sp)
  805810:	dc400e15 	stw	r17,56(sp)
  805814:	1440ca16 	blt	r2,r17,805b40 <___vfprintf_internal_r+0x1940>
  805818:	a8c00204 	addi	r3,r21,8
  80581c:	2000061e 	bne	r4,zero,805838 <___vfprintf_internal_r+0x1638>
  805820:	d9414817 	ldw	r5,1312(sp)
  805824:	2800041e 	bne	r5,zero,805838 <___vfprintf_internal_r+0x1638>
  805828:	d9814d17 	ldw	r6,1332(sp)
  80582c:	3080004c 	andi	r2,r6,1
  805830:	1005003a 	cmpeq	r2,r2,zero
  805834:	103bf01e 	bne	r2,zero,8047f8 <___vfprintf_internal_r+0x5f8>
  805838:	00800044 	movi	r2,1
  80583c:	dc400e17 	ldw	r17,56(sp)
  805840:	18800115 	stw	r2,4(r3)
  805844:	d8814a17 	ldw	r2,1320(sp)
  805848:	94800044 	addi	r18,r18,1
  80584c:	8c400044 	addi	r17,r17,1
  805850:	18800015 	stw	r2,0(r3)
  805854:	008001c4 	movi	r2,7
  805858:	dc800f15 	stw	r18,60(sp)
  80585c:	dc400e15 	stw	r17,56(sp)
  805860:	1440ca16 	blt	r2,r17,805b8c <___vfprintf_internal_r+0x198c>
  805864:	18c00204 	addi	r3,r3,8
  805868:	0121c83a 	sub	r16,zero,r4
  80586c:	0400500e 	bge	zero,r16,8059b0 <___vfprintf_internal_r+0x17b0>
  805870:	00800404 	movi	r2,16
  805874:	1400800e 	bge	r2,r16,805a78 <___vfprintf_internal_r+0x1878>
  805878:	1027883a 	mov	r19,r2
  80587c:	07002074 	movhi	fp,129
  805880:	e7132f04 	addi	fp,fp,19644
  805884:	050001c4 	movi	r20,7
  805888:	00000306 	br	805898 <___vfprintf_internal_r+0x1698>
  80588c:	18c00204 	addi	r3,r3,8
  805890:	843ffc04 	addi	r16,r16,-16
  805894:	9c007a0e 	bge	r19,r16,805a80 <___vfprintf_internal_r+0x1880>
  805898:	94800404 	addi	r18,r18,16
  80589c:	8c400044 	addi	r17,r17,1
  8058a0:	1f000015 	stw	fp,0(r3)
  8058a4:	1cc00115 	stw	r19,4(r3)
  8058a8:	dc800f15 	stw	r18,60(sp)
  8058ac:	dc400e15 	stw	r17,56(sp)
  8058b0:	a47ff60e 	bge	r20,r17,80588c <___vfprintf_internal_r+0x168c>
  8058b4:	d9015017 	ldw	r4,1344(sp)
  8058b8:	b00b883a 	mov	r5,r22
  8058bc:	d9800d04 	addi	r6,sp,52
  8058c0:	08041a80 	call	8041a8 <__sprint_r>
  8058c4:	103c061e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  8058c8:	dc800f17 	ldw	r18,60(sp)
  8058cc:	dc400e17 	ldw	r17,56(sp)
  8058d0:	d8c01a04 	addi	r3,sp,104
  8058d4:	003fee06 	br	805890 <___vfprintf_internal_r+0x1690>
  8058d8:	3c000017 	ldw	r16,0(r7)
  8058dc:	0023883a 	mov	r17,zero
  8058e0:	39c00104 	addi	r7,r7,4
  8058e4:	d9c14115 	stw	r7,1284(sp)
  8058e8:	003e9206 	br	805334 <___vfprintf_internal_r+0x1134>
  8058ec:	d9401a04 	addi	r5,sp,104
  8058f0:	dd001004 	addi	r20,sp,64
  8058f4:	d9414215 	stw	r5,1288(sp)
  8058f8:	d9814517 	ldw	r6,1300(sp)
  8058fc:	880a973a 	slli	r5,r17,28
  805900:	8004d13a 	srli	r2,r16,4
  805904:	810003cc 	andi	r4,r16,15
  805908:	3109883a 	add	r4,r6,r4
  80590c:	2884b03a 	or	r2,r5,r2
  805910:	21400003 	ldbu	r5,0(r4)
  805914:	d9014217 	ldw	r4,1288(sp)
  805918:	8806d13a 	srli	r3,r17,4
  80591c:	1021883a 	mov	r16,r2
  805920:	213fffc4 	addi	r4,r4,-1
  805924:	d9014215 	stw	r4,1288(sp)
  805928:	d9814217 	ldw	r6,1288(sp)
  80592c:	10c8b03a 	or	r4,r2,r3
  805930:	1823883a 	mov	r17,r3
  805934:	31400005 	stb	r5,0(r6)
  805938:	203fef1e 	bne	r4,zero,8058f8 <___vfprintf_internal_r+0x16f8>
  80593c:	003ccb06 	br	804c6c <___vfprintf_internal_r+0xa6c>
  805940:	00800c04 	movi	r2,48
  805944:	d98019c4 	addi	r6,sp,103
  805948:	dd001004 	addi	r20,sp,64
  80594c:	d88019c5 	stb	r2,103(sp)
  805950:	d9814215 	stw	r6,1288(sp)
  805954:	003cc506 	br	804c6c <___vfprintf_internal_r+0xa6c>
  805958:	dc400e17 	ldw	r17,56(sp)
  80595c:	07002074 	movhi	fp,129
  805960:	e7133304 	addi	fp,fp,19660
  805964:	003bc706 	br	804884 <___vfprintf_internal_r+0x684>
  805968:	d9414d17 	ldw	r5,1332(sp)
  80596c:	2880040c 	andi	r2,r5,16
  805970:	10007c26 	beq	r2,zero,805b64 <___vfprintf_internal_r+0x1964>
  805974:	38800017 	ldw	r2,0(r7)
  805978:	39c00104 	addi	r7,r7,4
  80597c:	d9c14115 	stw	r7,1284(sp)
  805980:	d9814c17 	ldw	r6,1328(sp)
  805984:	d9c14117 	ldw	r7,1284(sp)
  805988:	11800015 	stw	r6,0(r2)
  80598c:	003a7806 	br	804370 <___vfprintf_internal_r+0x170>
  805990:	d9015017 	ldw	r4,1344(sp)
  805994:	b00b883a 	mov	r5,r22
  805998:	d9800d04 	addi	r6,sp,52
  80599c:	08041a80 	call	8041a8 <__sprint_r>
  8059a0:	103bcf1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  8059a4:	dc800f17 	ldw	r18,60(sp)
  8059a8:	dc400e17 	ldw	r17,56(sp)
  8059ac:	d8c01a04 	addi	r3,sp,104
  8059b0:	d9014817 	ldw	r4,1312(sp)
  8059b4:	d9414217 	ldw	r5,1288(sp)
  8059b8:	8c400044 	addi	r17,r17,1
  8059bc:	9125883a 	add	r18,r18,r4
  8059c0:	008001c4 	movi	r2,7
  8059c4:	19400015 	stw	r5,0(r3)
  8059c8:	19000115 	stw	r4,4(r3)
  8059cc:	dc800f15 	stw	r18,60(sp)
  8059d0:	dc400e15 	stw	r17,56(sp)
  8059d4:	147cee16 	blt	r2,r17,804d90 <___vfprintf_internal_r+0xb90>
  8059d8:	18c00204 	addi	r3,r3,8
  8059dc:	003b8606 	br	8047f8 <___vfprintf_internal_r+0x5f8>
  8059e0:	38c00017 	ldw	r3,0(r7)
  8059e4:	39000204 	addi	r4,r7,8
  8059e8:	d9014115 	stw	r4,1284(sp)
  8059ec:	d8c14315 	stw	r3,1292(sp)
  8059f0:	39c00117 	ldw	r7,4(r7)
  8059f4:	d9c14415 	stw	r7,1296(sp)
  8059f8:	003e2006 	br	80527c <___vfprintf_internal_r+0x107c>
  8059fc:	0005883a 	mov	r2,zero
  805a00:	1409c83a 	sub	r4,r2,r16
  805a04:	1105803a 	cmpltu	r2,r2,r4
  805a08:	044bc83a 	sub	r5,zero,r17
  805a0c:	2885c83a 	sub	r2,r5,r2
  805a10:	2021883a 	mov	r16,r4
  805a14:	1023883a 	mov	r17,r2
  805a18:	01000044 	movi	r4,1
  805a1c:	00800b44 	movi	r2,45
  805a20:	d8800405 	stb	r2,16(sp)
  805a24:	003c8406 	br	804c38 <___vfprintf_internal_r+0xa38>
  805a28:	d9015017 	ldw	r4,1344(sp)
  805a2c:	b00b883a 	mov	r5,r22
  805a30:	d9800d04 	addi	r6,sp,52
  805a34:	08041a80 	call	8041a8 <__sprint_r>
  805a38:	103ba91e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805a3c:	dc800f17 	ldw	r18,60(sp)
  805a40:	dc400e17 	ldw	r17,56(sp)
  805a44:	d9000617 	ldw	r4,24(sp)
  805a48:	d9401a04 	addi	r5,sp,104
  805a4c:	003da706 	br	8050ec <___vfprintf_internal_r+0xeec>
  805a50:	d9015017 	ldw	r4,1344(sp)
  805a54:	b00b883a 	mov	r5,r22
  805a58:	d9800d04 	addi	r6,sp,52
  805a5c:	08041a80 	call	8041a8 <__sprint_r>
  805a60:	103b9f1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805a64:	dc800f17 	ldw	r18,60(sp)
  805a68:	dc400e17 	ldw	r17,56(sp)
  805a6c:	d9000617 	ldw	r4,24(sp)
  805a70:	d8c01a04 	addi	r3,sp,104
  805a74:	003d9106 	br	8050bc <___vfprintf_internal_r+0xebc>
  805a78:	07002074 	movhi	fp,129
  805a7c:	e7132f04 	addi	fp,fp,19644
  805a80:	9425883a 	add	r18,r18,r16
  805a84:	8c400044 	addi	r17,r17,1
  805a88:	008001c4 	movi	r2,7
  805a8c:	1f000015 	stw	fp,0(r3)
  805a90:	1c000115 	stw	r16,4(r3)
  805a94:	dc800f15 	stw	r18,60(sp)
  805a98:	dc400e15 	stw	r17,56(sp)
  805a9c:	147fbc16 	blt	r2,r17,805990 <___vfprintf_internal_r+0x1790>
  805aa0:	18c00204 	addi	r3,r3,8
  805aa4:	003fc206 	br	8059b0 <___vfprintf_internal_r+0x17b0>
  805aa8:	d9015017 	ldw	r4,1344(sp)
  805aac:	b00b883a 	mov	r5,r22
  805ab0:	d9800d04 	addi	r6,sp,52
  805ab4:	08041a80 	call	8041a8 <__sprint_r>
  805ab8:	103b891e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805abc:	dc800f17 	ldw	r18,60(sp)
  805ac0:	d9000617 	ldw	r4,24(sp)
  805ac4:	d8c01a04 	addi	r3,sp,104
  805ac8:	003d0206 	br	804ed4 <___vfprintf_internal_r+0xcd4>
  805acc:	07002074 	movhi	fp,129
  805ad0:	e7132f04 	addi	fp,fp,19644
  805ad4:	003be406 	br	804a68 <___vfprintf_internal_r+0x868>
  805ad8:	00802074 	movhi	r2,129
  805adc:	10931d04 	addi	r2,r2,19572
  805ae0:	d8814215 	stw	r2,1288(sp)
  805ae4:	003df506 	br	8052bc <___vfprintf_internal_r+0x10bc>
  805ae8:	d9014317 	ldw	r4,1292(sp)
  805aec:	d9414417 	ldw	r5,1296(sp)
  805af0:	080a8a00 	call	80a8a0 <__isnand>
  805af4:	10003926 	beq	r2,zero,805bdc <___vfprintf_internal_r+0x19dc>
  805af8:	d9414e17 	ldw	r5,1336(sp)
  805afc:	008011c4 	movi	r2,71
  805b00:	1140ce16 	blt	r2,r5,805e3c <___vfprintf_internal_r+0x1c3c>
  805b04:	01802074 	movhi	r6,129
  805b08:	31931e04 	addi	r6,r6,19576
  805b0c:	d9814215 	stw	r6,1288(sp)
  805b10:	003dea06 	br	8052bc <___vfprintf_internal_r+0x10bc>
  805b14:	d9014d17 	ldw	r4,1332(sp)
  805b18:	bdc00044 	addi	r23,r23,1
  805b1c:	b8c00007 	ldb	r3,0(r23)
  805b20:	21000814 	ori	r4,r4,32
  805b24:	d9014d15 	stw	r4,1332(sp)
  805b28:	003a3406 	br	8043fc <___vfprintf_internal_r+0x1fc>
  805b2c:	dcc14615 	stw	r19,1304(sp)
  805b30:	98011016 	blt	r19,zero,805f74 <___vfprintf_internal_r+0x1d74>
  805b34:	980f883a 	mov	r7,r19
  805b38:	d8014715 	stw	zero,1308(sp)
  805b3c:	003c5206 	br	804c88 <___vfprintf_internal_r+0xa88>
  805b40:	d9015017 	ldw	r4,1344(sp)
  805b44:	b00b883a 	mov	r5,r22
  805b48:	d9800d04 	addi	r6,sp,52
  805b4c:	08041a80 	call	8041a8 <__sprint_r>
  805b50:	103b631e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805b54:	dc800f17 	ldw	r18,60(sp)
  805b58:	d9000617 	ldw	r4,24(sp)
  805b5c:	d8c01a04 	addi	r3,sp,104
  805b60:	003f2e06 	br	80581c <___vfprintf_internal_r+0x161c>
  805b64:	d8c14d17 	ldw	r3,1332(sp)
  805b68:	1880100c 	andi	r2,r3,64
  805b6c:	1000a026 	beq	r2,zero,805df0 <___vfprintf_internal_r+0x1bf0>
  805b70:	38800017 	ldw	r2,0(r7)
  805b74:	39c00104 	addi	r7,r7,4
  805b78:	d9c14115 	stw	r7,1284(sp)
  805b7c:	d9014c17 	ldw	r4,1328(sp)
  805b80:	d9c14117 	ldw	r7,1284(sp)
  805b84:	1100000d 	sth	r4,0(r2)
  805b88:	0039f906 	br	804370 <___vfprintf_internal_r+0x170>
  805b8c:	d9015017 	ldw	r4,1344(sp)
  805b90:	b00b883a 	mov	r5,r22
  805b94:	d9800d04 	addi	r6,sp,52
  805b98:	08041a80 	call	8041a8 <__sprint_r>
  805b9c:	103b501e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805ba0:	dc800f17 	ldw	r18,60(sp)
  805ba4:	dc400e17 	ldw	r17,56(sp)
  805ba8:	d9000617 	ldw	r4,24(sp)
  805bac:	d8c01a04 	addi	r3,sp,104
  805bb0:	003f2d06 	br	805868 <___vfprintf_internal_r+0x1668>
  805bb4:	00800184 	movi	r2,6
  805bb8:	14c09a36 	bltu	r2,r19,805e24 <___vfprintf_internal_r+0x1c24>
  805bbc:	dcc14615 	stw	r19,1304(sp)
  805bc0:	9800010e 	bge	r19,zero,805bc8 <___vfprintf_internal_r+0x19c8>
  805bc4:	d8014615 	stw	zero,1304(sp)
  805bc8:	00802074 	movhi	r2,129
  805bcc:	10932004 	addi	r2,r2,19584
  805bd0:	980f883a 	mov	r7,r19
  805bd4:	d8814215 	stw	r2,1288(sp)
  805bd8:	003a7806 	br	8045bc <___vfprintf_internal_r+0x3bc>
  805bdc:	00bfffc4 	movi	r2,-1
  805be0:	9880e226 	beq	r19,r2,805f6c <___vfprintf_internal_r+0x1d6c>
  805be4:	d9414e17 	ldw	r5,1336(sp)
  805be8:	008019c4 	movi	r2,103
  805bec:	2880dc26 	beq	r5,r2,805f60 <___vfprintf_internal_r+0x1d60>
  805bf0:	008011c4 	movi	r2,71
  805bf4:	2880da26 	beq	r5,r2,805f60 <___vfprintf_internal_r+0x1d60>
  805bf8:	d9414d17 	ldw	r5,1332(sp)
  805bfc:	d9014417 	ldw	r4,1296(sp)
  805c00:	d9814317 	ldw	r6,1292(sp)
  805c04:	29404014 	ori	r5,r5,256
  805c08:	d9414d15 	stw	r5,1332(sp)
  805c0c:	2000cc16 	blt	r4,zero,805f40 <___vfprintf_internal_r+0x1d40>
  805c10:	3021883a 	mov	r16,r6
  805c14:	2023883a 	mov	r17,r4
  805c18:	0039883a 	mov	fp,zero
  805c1c:	d9414e17 	ldw	r5,1336(sp)
  805c20:	00801984 	movi	r2,102
  805c24:	2880b726 	beq	r5,r2,805f04 <___vfprintf_internal_r+0x1d04>
  805c28:	00801184 	movi	r2,70
  805c2c:	2880b526 	beq	r5,r2,805f04 <___vfprintf_internal_r+0x1d04>
  805c30:	00801944 	movi	r2,101
  805c34:	2880c826 	beq	r5,r2,805f58 <___vfprintf_internal_r+0x1d58>
  805c38:	00801144 	movi	r2,69
  805c3c:	2880c626 	beq	r5,r2,805f58 <___vfprintf_internal_r+0x1d58>
  805c40:	9829883a 	mov	r20,r19
  805c44:	d9015017 	ldw	r4,1344(sp)
  805c48:	d8800604 	addi	r2,sp,24
  805c4c:	880d883a 	mov	r6,r17
  805c50:	d8800115 	stw	r2,4(sp)
  805c54:	d8c00704 	addi	r3,sp,28
  805c58:	d8800804 	addi	r2,sp,32
  805c5c:	800b883a 	mov	r5,r16
  805c60:	01c00084 	movi	r7,2
  805c64:	d8c00215 	stw	r3,8(sp)
  805c68:	d8800315 	stw	r2,12(sp)
  805c6c:	dd000015 	stw	r20,0(sp)
  805c70:	0807c8c0 	call	807c8c <_dtoa_r>
  805c74:	d9814e17 	ldw	r6,1336(sp)
  805c78:	d8814215 	stw	r2,1288(sp)
  805c7c:	008019c4 	movi	r2,103
  805c80:	30809526 	beq	r6,r2,805ed8 <___vfprintf_internal_r+0x1cd8>
  805c84:	d8c14e17 	ldw	r3,1336(sp)
  805c88:	008011c4 	movi	r2,71
  805c8c:	18809226 	beq	r3,r2,805ed8 <___vfprintf_internal_r+0x1cd8>
  805c90:	d9414217 	ldw	r5,1288(sp)
  805c94:	d9814e17 	ldw	r6,1336(sp)
  805c98:	00801984 	movi	r2,102
  805c9c:	2d25883a 	add	r18,r5,r20
  805ca0:	30808626 	beq	r6,r2,805ebc <___vfprintf_internal_r+0x1cbc>
  805ca4:	00801184 	movi	r2,70
  805ca8:	30808426 	beq	r6,r2,805ebc <___vfprintf_internal_r+0x1cbc>
  805cac:	000d883a 	mov	r6,zero
  805cb0:	000f883a 	mov	r7,zero
  805cb4:	880b883a 	mov	r5,r17
  805cb8:	8009883a 	mov	r4,r16
  805cbc:	080f3a40 	call	80f3a4 <__eqdf2>
  805cc0:	1000751e 	bne	r2,zero,805e98 <___vfprintf_internal_r+0x1c98>
  805cc4:	9005883a 	mov	r2,r18
  805cc8:	dc800815 	stw	r18,32(sp)
  805ccc:	d9014217 	ldw	r4,1288(sp)
  805cd0:	d9414e17 	ldw	r5,1336(sp)
  805cd4:	00c019c4 	movi	r3,103
  805cd8:	1125c83a 	sub	r18,r2,r4
  805cdc:	28c06826 	beq	r5,r3,805e80 <___vfprintf_internal_r+0x1c80>
  805ce0:	008011c4 	movi	r2,71
  805ce4:	28806626 	beq	r5,r2,805e80 <___vfprintf_internal_r+0x1c80>
  805ce8:	d9000617 	ldw	r4,24(sp)
  805cec:	d8c14e17 	ldw	r3,1336(sp)
  805cf0:	00801944 	movi	r2,101
  805cf4:	10c05516 	blt	r2,r3,805e4c <___vfprintf_internal_r+0x1c4c>
  805cf8:	213fffc4 	addi	r4,r4,-1
  805cfc:	d9000615 	stw	r4,24(sp)
  805d00:	d8c00905 	stb	r3,36(sp)
  805d04:	2021883a 	mov	r16,r4
  805d08:	2000c116 	blt	r4,zero,806010 <___vfprintf_internal_r+0x1e10>
  805d0c:	00800ac4 	movi	r2,43
  805d10:	d8800945 	stb	r2,37(sp)
  805d14:	00800244 	movi	r2,9
  805d18:	1400af0e 	bge	r2,r16,805fd8 <___vfprintf_internal_r+0x1dd8>
  805d1c:	1027883a 	mov	r19,r2
  805d20:	dc400cc4 	addi	r17,sp,51
  805d24:	8009883a 	mov	r4,r16
  805d28:	01400284 	movi	r5,10
  805d2c:	080fb880 	call	80fb88 <__modsi3>
  805d30:	10800c04 	addi	r2,r2,48
  805d34:	8c7fffc4 	addi	r17,r17,-1
  805d38:	8009883a 	mov	r4,r16
  805d3c:	01400284 	movi	r5,10
  805d40:	88800005 	stb	r2,0(r17)
  805d44:	080fb280 	call	80fb28 <__divsi3>
  805d48:	1021883a 	mov	r16,r2
  805d4c:	98bff516 	blt	r19,r2,805d24 <___vfprintf_internal_r+0x1b24>
  805d50:	10c00c04 	addi	r3,r2,48
  805d54:	d8800b04 	addi	r2,sp,44
  805d58:	108001c4 	addi	r2,r2,7
  805d5c:	897fffc4 	addi	r5,r17,-1
  805d60:	88ffffc5 	stb	r3,-1(r17)
  805d64:	2880a72e 	bgeu	r5,r2,806004 <___vfprintf_internal_r+0x1e04>
  805d68:	1009883a 	mov	r4,r2
  805d6c:	d9800904 	addi	r6,sp,36
  805d70:	d8c00984 	addi	r3,sp,38
  805d74:	28800003 	ldbu	r2,0(r5)
  805d78:	29400044 	addi	r5,r5,1
  805d7c:	18800005 	stb	r2,0(r3)
  805d80:	18c00044 	addi	r3,r3,1
  805d84:	293ffb36 	bltu	r5,r4,805d74 <___vfprintf_internal_r+0x1b74>
  805d88:	1987c83a 	sub	r3,r3,r6
  805d8c:	00800044 	movi	r2,1
  805d90:	d8c14915 	stw	r3,1316(sp)
  805d94:	90cf883a 	add	r7,r18,r3
  805d98:	1480960e 	bge	r2,r18,805ff4 <___vfprintf_internal_r+0x1df4>
  805d9c:	39c00044 	addi	r7,r7,1
  805da0:	d9c14615 	stw	r7,1304(sp)
  805da4:	38003416 	blt	r7,zero,805e78 <___vfprintf_internal_r+0x1c78>
  805da8:	e0803fcc 	andi	r2,fp,255
  805dac:	1080201c 	xori	r2,r2,128
  805db0:	10bfe004 	addi	r2,r2,-128
  805db4:	10004e26 	beq	r2,zero,805ef0 <___vfprintf_internal_r+0x1cf0>
  805db8:	00800b44 	movi	r2,45
  805dbc:	dc814815 	stw	r18,1312(sp)
  805dc0:	d8014715 	stw	zero,1308(sp)
  805dc4:	d8800405 	stb	r2,16(sp)
  805dc8:	003bb106 	br	804c90 <___vfprintf_internal_r+0xa90>
  805dcc:	00800b44 	movi	r2,45
  805dd0:	d8800405 	stb	r2,16(sp)
  805dd4:	003d3306 	br	8052a4 <___vfprintf_internal_r+0x10a4>
  805dd8:	d9015017 	ldw	r4,1344(sp)
  805ddc:	b00b883a 	mov	r5,r22
  805de0:	d9800d04 	addi	r6,sp,52
  805de4:	08041a80 	call	8041a8 <__sprint_r>
  805de8:	103abd1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x6e0>
  805dec:	003abb06 	br	8048dc <___vfprintf_internal_r+0x6dc>
  805df0:	38800017 	ldw	r2,0(r7)
  805df4:	39c00104 	addi	r7,r7,4
  805df8:	d9c14115 	stw	r7,1284(sp)
  805dfc:	d9414c17 	ldw	r5,1328(sp)
  805e00:	d9c14117 	ldw	r7,1284(sp)
  805e04:	11400015 	stw	r5,0(r2)
  805e08:	00395906 	br	804370 <___vfprintf_internal_r+0x170>
  805e0c:	980f883a 	mov	r7,r19
  805e10:	dcc14615 	stw	r19,1304(sp)
  805e14:	d8014715 	stw	zero,1308(sp)
  805e18:	003b9b06 	br	804c88 <___vfprintf_internal_r+0xa88>
  805e1c:	0027883a 	mov	r19,zero
  805e20:	00397806 	br	804404 <___vfprintf_internal_r+0x204>
  805e24:	00c02074 	movhi	r3,129
  805e28:	18d32004 	addi	r3,r3,19584
  805e2c:	100f883a 	mov	r7,r2
  805e30:	d8814615 	stw	r2,1304(sp)
  805e34:	d8c14215 	stw	r3,1288(sp)
  805e38:	0039e006 	br	8045bc <___vfprintf_internal_r+0x3bc>
  805e3c:	00802074 	movhi	r2,129
  805e40:	10931f04 	addi	r2,r2,19580
  805e44:	d8814215 	stw	r2,1288(sp)
  805e48:	003d1c06 	br	8052bc <___vfprintf_internal_r+0x10bc>
  805e4c:	d9414e17 	ldw	r5,1336(sp)
  805e50:	00801984 	movi	r2,102
  805e54:	28804926 	beq	r5,r2,805f7c <___vfprintf_internal_r+0x1d7c>
  805e58:	200f883a 	mov	r7,r4
  805e5c:	24805716 	blt	r4,r18,805fbc <___vfprintf_internal_r+0x1dbc>
  805e60:	d9414d17 	ldw	r5,1332(sp)
  805e64:	2880004c 	andi	r2,r5,1
  805e68:	10000126 	beq	r2,zero,805e70 <___vfprintf_internal_r+0x1c70>
  805e6c:	21c00044 	addi	r7,r4,1
  805e70:	d9c14615 	stw	r7,1304(sp)
  805e74:	383fcc0e 	bge	r7,zero,805da8 <___vfprintf_internal_r+0x1ba8>
  805e78:	d8014615 	stw	zero,1304(sp)
  805e7c:	003fca06 	br	805da8 <___vfprintf_internal_r+0x1ba8>
  805e80:	d9000617 	ldw	r4,24(sp)
  805e84:	00bfff04 	movi	r2,-4
  805e88:	1100480e 	bge	r2,r4,805fac <___vfprintf_internal_r+0x1dac>
  805e8c:	99004716 	blt	r19,r4,805fac <___vfprintf_internal_r+0x1dac>
  805e90:	d8c14e15 	stw	r3,1336(sp)
  805e94:	003ff006 	br	805e58 <___vfprintf_internal_r+0x1c58>
  805e98:	d8800817 	ldw	r2,32(sp)
  805e9c:	14bf8b2e 	bgeu	r2,r18,805ccc <___vfprintf_internal_r+0x1acc>
  805ea0:	9007883a 	mov	r3,r18
  805ea4:	01000c04 	movi	r4,48
  805ea8:	11000005 	stb	r4,0(r2)
  805eac:	10800044 	addi	r2,r2,1
  805eb0:	d8800815 	stw	r2,32(sp)
  805eb4:	18bffc1e 	bne	r3,r2,805ea8 <___vfprintf_internal_r+0x1ca8>
  805eb8:	003f8406 	br	805ccc <___vfprintf_internal_r+0x1acc>
  805ebc:	d8814217 	ldw	r2,1288(sp)
  805ec0:	10c00007 	ldb	r3,0(r2)
  805ec4:	00800c04 	movi	r2,48
  805ec8:	18805b26 	beq	r3,r2,806038 <___vfprintf_internal_r+0x1e38>
  805ecc:	d9000617 	ldw	r4,24(sp)
  805ed0:	9125883a 	add	r18,r18,r4
  805ed4:	003f7506 	br	805cac <___vfprintf_internal_r+0x1aac>
  805ed8:	d9014d17 	ldw	r4,1332(sp)
  805edc:	2080004c 	andi	r2,r4,1
  805ee0:	1005003a 	cmpeq	r2,r2,zero
  805ee4:	103f6a26 	beq	r2,zero,805c90 <___vfprintf_internal_r+0x1a90>
  805ee8:	d8800817 	ldw	r2,32(sp)
  805eec:	003f7706 	br	805ccc <___vfprintf_internal_r+0x1acc>
  805ef0:	d9c14615 	stw	r7,1304(sp)
  805ef4:	38004d16 	blt	r7,zero,80602c <___vfprintf_internal_r+0x1e2c>
  805ef8:	dc814815 	stw	r18,1312(sp)
  805efc:	d8014715 	stw	zero,1308(sp)
  805f00:	003b6106 	br	804c88 <___vfprintf_internal_r+0xa88>
  805f04:	d9015017 	ldw	r4,1344(sp)
  805f08:	d8800604 	addi	r2,sp,24
  805f0c:	d8800115 	stw	r2,4(sp)
  805f10:	d8c00704 	addi	r3,sp,28
  805f14:	d8800804 	addi	r2,sp,32
  805f18:	800b883a 	mov	r5,r16
  805f1c:	880d883a 	mov	r6,r17
  805f20:	01c000c4 	movi	r7,3
  805f24:	d8c00215 	stw	r3,8(sp)
  805f28:	d8800315 	stw	r2,12(sp)
  805f2c:	dcc00015 	stw	r19,0(sp)
  805f30:	9829883a 	mov	r20,r19
  805f34:	0807c8c0 	call	807c8c <_dtoa_r>
  805f38:	d8814215 	stw	r2,1288(sp)
  805f3c:	003f5106 	br	805c84 <___vfprintf_internal_r+0x1a84>
  805f40:	d8c14317 	ldw	r3,1292(sp)
  805f44:	d9014417 	ldw	r4,1296(sp)
  805f48:	07000b44 	movi	fp,45
  805f4c:	1821883a 	mov	r16,r3
  805f50:	2460003c 	xorhi	r17,r4,32768
  805f54:	003f3106 	br	805c1c <___vfprintf_internal_r+0x1a1c>
  805f58:	9d000044 	addi	r20,r19,1
  805f5c:	003f3906 	br	805c44 <___vfprintf_internal_r+0x1a44>
  805f60:	983f251e 	bne	r19,zero,805bf8 <___vfprintf_internal_r+0x19f8>
  805f64:	04c00044 	movi	r19,1
  805f68:	003f2306 	br	805bf8 <___vfprintf_internal_r+0x19f8>
  805f6c:	04c00184 	movi	r19,6
  805f70:	003f2106 	br	805bf8 <___vfprintf_internal_r+0x19f8>
  805f74:	d8014615 	stw	zero,1304(sp)
  805f78:	003eee06 	br	805b34 <___vfprintf_internal_r+0x1934>
  805f7c:	200f883a 	mov	r7,r4
  805f80:	0100370e 	bge	zero,r4,806060 <___vfprintf_internal_r+0x1e60>
  805f84:	9800031e 	bne	r19,zero,805f94 <___vfprintf_internal_r+0x1d94>
  805f88:	d9814d17 	ldw	r6,1332(sp)
  805f8c:	3080004c 	andi	r2,r6,1
  805f90:	103fb726 	beq	r2,zero,805e70 <___vfprintf_internal_r+0x1c70>
  805f94:	20800044 	addi	r2,r4,1
  805f98:	98a7883a 	add	r19,r19,r2
  805f9c:	dcc14615 	stw	r19,1304(sp)
  805fa0:	980f883a 	mov	r7,r19
  805fa4:	983f800e 	bge	r19,zero,805da8 <___vfprintf_internal_r+0x1ba8>
  805fa8:	003fb306 	br	805e78 <___vfprintf_internal_r+0x1c78>
  805fac:	d9814e17 	ldw	r6,1336(sp)
  805fb0:	31bfff84 	addi	r6,r6,-2
  805fb4:	d9814e15 	stw	r6,1336(sp)
  805fb8:	003f4c06 	br	805cec <___vfprintf_internal_r+0x1aec>
  805fbc:	0100180e 	bge	zero,r4,806020 <___vfprintf_internal_r+0x1e20>
  805fc0:	00800044 	movi	r2,1
  805fc4:	1485883a 	add	r2,r2,r18
  805fc8:	d8814615 	stw	r2,1304(sp)
  805fcc:	100f883a 	mov	r7,r2
  805fd0:	103f750e 	bge	r2,zero,805da8 <___vfprintf_internal_r+0x1ba8>
  805fd4:	003fa806 	br	805e78 <___vfprintf_internal_r+0x1c78>
  805fd8:	80c00c04 	addi	r3,r16,48
  805fdc:	00800c04 	movi	r2,48
  805fe0:	d8c009c5 	stb	r3,39(sp)
  805fe4:	d9800904 	addi	r6,sp,36
  805fe8:	d8c00a04 	addi	r3,sp,40
  805fec:	d8800985 	stb	r2,38(sp)
  805ff0:	003f6506 	br	805d88 <___vfprintf_internal_r+0x1b88>
  805ff4:	d9014d17 	ldw	r4,1332(sp)
  805ff8:	2084703a 	and	r2,r4,r2
  805ffc:	103f9c26 	beq	r2,zero,805e70 <___vfprintf_internal_r+0x1c70>
  806000:	003f6606 	br	805d9c <___vfprintf_internal_r+0x1b9c>
  806004:	d9800904 	addi	r6,sp,36
  806008:	d8c00984 	addi	r3,sp,38
  80600c:	003f5e06 	br	805d88 <___vfprintf_internal_r+0x1b88>
  806010:	00800b44 	movi	r2,45
  806014:	0121c83a 	sub	r16,zero,r4
  806018:	d8800945 	stb	r2,37(sp)
  80601c:	003f3d06 	br	805d14 <___vfprintf_internal_r+0x1b14>
  806020:	00800084 	movi	r2,2
  806024:	1105c83a 	sub	r2,r2,r4
  806028:	003fe606 	br	805fc4 <___vfprintf_internal_r+0x1dc4>
  80602c:	d8014615 	stw	zero,1304(sp)
  806030:	dc814815 	stw	r18,1312(sp)
  806034:	003fb106 	br	805efc <___vfprintf_internal_r+0x1cfc>
  806038:	000d883a 	mov	r6,zero
  80603c:	000f883a 	mov	r7,zero
  806040:	8009883a 	mov	r4,r16
  806044:	880b883a 	mov	r5,r17
  806048:	080f42c0 	call	80f42c <__nedf2>
  80604c:	103f9f26 	beq	r2,zero,805ecc <___vfprintf_internal_r+0x1ccc>
  806050:	00800044 	movi	r2,1
  806054:	1509c83a 	sub	r4,r2,r20
  806058:	d9000615 	stw	r4,24(sp)
  80605c:	003f9b06 	br	805ecc <___vfprintf_internal_r+0x1ccc>
  806060:	98000d1e 	bne	r19,zero,806098 <___vfprintf_internal_r+0x1e98>
  806064:	d8c14d17 	ldw	r3,1332(sp)
  806068:	1880004c 	andi	r2,r3,1
  80606c:	10000a1e 	bne	r2,zero,806098 <___vfprintf_internal_r+0x1e98>
  806070:	01000044 	movi	r4,1
  806074:	200f883a 	mov	r7,r4
  806078:	d9014615 	stw	r4,1304(sp)
  80607c:	003f4a06 	br	805da8 <___vfprintf_internal_r+0x1ba8>
  806080:	3cc00017 	ldw	r19,0(r7)
  806084:	39c00104 	addi	r7,r7,4
  806088:	983d0e0e 	bge	r19,zero,8054c4 <___vfprintf_internal_r+0x12c4>
  80608c:	b8c00007 	ldb	r3,0(r23)
  806090:	04ffffc4 	movi	r19,-1
  806094:	0038d906 	br	8043fc <___vfprintf_internal_r+0x1fc>
  806098:	9cc00084 	addi	r19,r19,2
  80609c:	dcc14615 	stw	r19,1304(sp)
  8060a0:	980f883a 	mov	r7,r19
  8060a4:	983f400e 	bge	r19,zero,805da8 <___vfprintf_internal_r+0x1ba8>
  8060a8:	003f7306 	br	805e78 <___vfprintf_internal_r+0x1c78>

008060ac <__vfprintf_internal>:
  8060ac:	00802074 	movhi	r2,129
  8060b0:	109bd004 	addi	r2,r2,28480
  8060b4:	2013883a 	mov	r9,r4
  8060b8:	11000017 	ldw	r4,0(r2)
  8060bc:	2805883a 	mov	r2,r5
  8060c0:	300f883a 	mov	r7,r6
  8060c4:	480b883a 	mov	r5,r9
  8060c8:	100d883a 	mov	r6,r2
  8060cc:	08042001 	jmpi	804200 <___vfprintf_internal_r>

008060d0 <__svfscanf_r>:
  8060d0:	deff4e04 	addi	sp,sp,-712
  8060d4:	dd80ae15 	stw	r22,696(sp)
  8060d8:	dd00ac15 	stw	r20,688(sp)
  8060dc:	dc40a915 	stw	r17,676(sp)
  8060e0:	dc00a815 	stw	r16,672(sp)
  8060e4:	dfc0b115 	stw	ra,708(sp)
  8060e8:	df00b015 	stw	fp,704(sp)
  8060ec:	ddc0af15 	stw	r23,700(sp)
  8060f0:	dd40ad15 	stw	r21,692(sp)
  8060f4:	dcc0ab15 	stw	r19,684(sp)
  8060f8:	dc80aa15 	stw	r18,680(sp)
  8060fc:	202d883a 	mov	r22,r4
  806100:	2821883a 	mov	r16,r5
  806104:	d9c0a415 	stw	r7,656(sp)
  806108:	3029883a 	mov	r20,r6
  80610c:	d800a215 	stw	zero,648(sp)
  806110:	0023883a 	mov	r17,zero
  806114:	d800a115 	stw	zero,644(sp)
  806118:	d800a015 	stw	zero,640(sp)
  80611c:	a1000007 	ldb	r4,0(r20)
  806120:	d9000115 	stw	r4,4(sp)
  806124:	20001f26 	beq	r4,zero,8061a4 <__svfscanf_r+0xd4>
  806128:	04802074 	movhi	r18,129
  80612c:	949bd404 	addi	r18,r18,28496
  806130:	91800017 	ldw	r6,0(r18)
  806134:	a5000044 	addi	r20,r20,1
  806138:	3107883a 	add	r3,r6,r4
  80613c:	18800003 	ldbu	r2,0(r3)
  806140:	1080020c 	andi	r2,r2,8
  806144:	10002426 	beq	r2,zero,8061d8 <__svfscanf_r+0x108>
  806148:	80c00117 	ldw	r3,4(r16)
  80614c:	00c00e0e 	bge	zero,r3,806188 <__svfscanf_r+0xb8>
  806150:	81400017 	ldw	r5,0(r16)
  806154:	90800017 	ldw	r2,0(r18)
  806158:	28c00003 	ldbu	r3,0(r5)
  80615c:	1887883a 	add	r3,r3,r2
  806160:	19000003 	ldbu	r4,0(r3)
  806164:	2100020c 	andi	r4,r4,8
  806168:	203fec26 	beq	r4,zero,80611c <__svfscanf_r+0x4c>
  80616c:	80c00117 	ldw	r3,4(r16)
  806170:	29800044 	addi	r6,r5,1
  806174:	8c400044 	addi	r17,r17,1
  806178:	18ffffc4 	addi	r3,r3,-1
  80617c:	81800015 	stw	r6,0(r16)
  806180:	80c00115 	stw	r3,4(r16)
  806184:	00fff216 	blt	zero,r3,806150 <__svfscanf_r+0x80>
  806188:	b009883a 	mov	r4,r22
  80618c:	800b883a 	mov	r5,r16
  806190:	0803b500 	call	803b50 <__srefill_r>
  806194:	103fee26 	beq	r2,zero,806150 <__svfscanf_r+0x80>
  806198:	a1000007 	ldb	r4,0(r20)
  80619c:	d9000115 	stw	r4,4(sp)
  8061a0:	203fe11e 	bne	r4,zero,806128 <__svfscanf_r+0x58>
  8061a4:	d880a217 	ldw	r2,648(sp)
  8061a8:	dfc0b117 	ldw	ra,708(sp)
  8061ac:	df00b017 	ldw	fp,704(sp)
  8061b0:	ddc0af17 	ldw	r23,700(sp)
  8061b4:	dd80ae17 	ldw	r22,696(sp)
  8061b8:	dd40ad17 	ldw	r21,692(sp)
  8061bc:	dd00ac17 	ldw	r20,688(sp)
  8061c0:	dcc0ab17 	ldw	r19,684(sp)
  8061c4:	dc80aa17 	ldw	r18,680(sp)
  8061c8:	dc40a917 	ldw	r17,676(sp)
  8061cc:	dc00a817 	ldw	r16,672(sp)
  8061d0:	dec0b204 	addi	sp,sp,712
  8061d4:	f800283a 	ret
  8061d8:	00800944 	movi	r2,37
  8061dc:	20801626 	beq	r4,r2,806238 <__svfscanf_r+0x168>
  8061e0:	80800117 	ldw	r2,4(r16)
  8061e4:	00800b0e 	bge	zero,r2,806214 <__svfscanf_r+0x144>
  8061e8:	81000017 	ldw	r4,0(r16)
  8061ec:	a0ffffc7 	ldb	r3,-1(r20)
  8061f0:	20800003 	ldbu	r2,0(r4)
  8061f4:	10ffeb1e 	bne	r2,r3,8061a4 <__svfscanf_r+0xd4>
  8061f8:	80c00117 	ldw	r3,4(r16)
  8061fc:	21800044 	addi	r6,r4,1
  806200:	8c400044 	addi	r17,r17,1
  806204:	18ffffc4 	addi	r3,r3,-1
  806208:	80c00115 	stw	r3,4(r16)
  80620c:	81800015 	stw	r6,0(r16)
  806210:	003fc206 	br	80611c <__svfscanf_r+0x4c>
  806214:	b009883a 	mov	r4,r22
  806218:	800b883a 	mov	r5,r16
  80621c:	0803b500 	call	803b50 <__srefill_r>
  806220:	103ff126 	beq	r2,zero,8061e8 <__svfscanf_r+0x118>
  806224:	d900a217 	ldw	r4,648(sp)
  806228:	2004c91e 	bne	r4,zero,807550 <__svfscanf_r+0x1480>
  80622c:	00bfffc4 	movi	r2,-1
  806230:	d880a215 	stw	r2,648(sp)
  806234:	003fdb06 	br	8061a4 <__svfscanf_r+0xd4>
  806238:	d800a315 	stw	zero,652(sp)
  80623c:	0027883a 	mov	r19,zero
  806240:	a0c00003 	ldbu	r3,0(r20)
  806244:	00801e04 	movi	r2,120
  806248:	a5000044 	addi	r20,r20,1
  80624c:	19403fcc 	andi	r5,r3,255
  806250:	2940201c 	xori	r5,r5,128
  806254:	297fe004 	addi	r5,r5,-128
  806258:	10c08036 	bltu	r2,r3,80645c <__svfscanf_r+0x38c>
  80625c:	18c5883a 	add	r2,r3,r3
  806260:	1085883a 	add	r2,r2,r2
  806264:	00c02034 	movhi	r3,128
  806268:	18d89e04 	addi	r3,r3,25208
  80626c:	10c5883a 	add	r2,r2,r3
  806270:	11000017 	ldw	r4,0(r2)
  806274:	2000683a 	jmp	r4
  806278:	0080622c 	andhi	r2,zero,392
  80627c:	0080645c 	xori	r2,zero,401
  806280:	0080645c 	xori	r2,zero,401
  806284:	0080645c 	xori	r2,zero,401
  806288:	0080645c 	xori	r2,zero,401
  80628c:	0080645c 	xori	r2,zero,401
  806290:	0080645c 	xori	r2,zero,401
  806294:	0080645c 	xori	r2,zero,401
  806298:	0080645c 	xori	r2,zero,401
  80629c:	0080645c 	xori	r2,zero,401
  8062a0:	0080645c 	xori	r2,zero,401
  8062a4:	0080645c 	xori	r2,zero,401
  8062a8:	0080645c 	xori	r2,zero,401
  8062ac:	0080645c 	xori	r2,zero,401
  8062b0:	0080645c 	xori	r2,zero,401
  8062b4:	0080645c 	xori	r2,zero,401
  8062b8:	0080645c 	xori	r2,zero,401
  8062bc:	0080645c 	xori	r2,zero,401
  8062c0:	0080645c 	xori	r2,zero,401
  8062c4:	0080645c 	xori	r2,zero,401
  8062c8:	0080645c 	xori	r2,zero,401
  8062cc:	0080645c 	xori	r2,zero,401
  8062d0:	0080645c 	xori	r2,zero,401
  8062d4:	0080645c 	xori	r2,zero,401
  8062d8:	0080645c 	xori	r2,zero,401
  8062dc:	0080645c 	xori	r2,zero,401
  8062e0:	0080645c 	xori	r2,zero,401
  8062e4:	0080645c 	xori	r2,zero,401
  8062e8:	0080645c 	xori	r2,zero,401
  8062ec:	0080645c 	xori	r2,zero,401
  8062f0:	0080645c 	xori	r2,zero,401
  8062f4:	0080645c 	xori	r2,zero,401
  8062f8:	0080645c 	xori	r2,zero,401
  8062fc:	0080645c 	xori	r2,zero,401
  806300:	0080645c 	xori	r2,zero,401
  806304:	0080645c 	xori	r2,zero,401
  806308:	0080645c 	xori	r2,zero,401
  80630c:	008061e0 	cmpeqi	r2,zero,391
  806310:	0080645c 	xori	r2,zero,401
  806314:	0080645c 	xori	r2,zero,401
  806318:	0080645c 	xori	r2,zero,401
  80631c:	0080645c 	xori	r2,zero,401
  806320:	00807480 	call	80748 <__reset-0x77f8b8>
  806324:	0080645c 	xori	r2,zero,401
  806328:	0080645c 	xori	r2,zero,401
  80632c:	0080645c 	xori	r2,zero,401
  806330:	0080645c 	xori	r2,zero,401
  806334:	0080645c 	xori	r2,zero,401
  806338:	00806e7c 	xorhi	r2,zero,441
  80633c:	00806e7c 	xorhi	r2,zero,441
  806340:	00806e7c 	xorhi	r2,zero,441
  806344:	00806e7c 	xorhi	r2,zero,441
  806348:	00806e7c 	xorhi	r2,zero,441
  80634c:	00806e7c 	xorhi	r2,zero,441
  806350:	00806e7c 	xorhi	r2,zero,441
  806354:	00806e7c 	xorhi	r2,zero,441
  806358:	00806e7c 	xorhi	r2,zero,441
  80635c:	00806e7c 	xorhi	r2,zero,441
  806360:	0080645c 	xori	r2,zero,401
  806364:	0080645c 	xori	r2,zero,401
  806368:	0080645c 	xori	r2,zero,401
  80636c:	0080645c 	xori	r2,zero,401
  806370:	0080645c 	xori	r2,zero,401
  806374:	0080645c 	xori	r2,zero,401
  806378:	0080645c 	xori	r2,zero,401
  80637c:	0080645c 	xori	r2,zero,401
  806380:	0080645c 	xori	r2,zero,401
  806384:	0080645c 	xori	r2,zero,401
  806388:	008075fc 	xorhi	r2,zero,471
  80638c:	008075f4 	movhi	r2,471
  806390:	0080645c 	xori	r2,zero,401
  806394:	008075f4 	movhi	r2,471
  806398:	0080645c 	xori	r2,zero,401
  80639c:	0080645c 	xori	r2,zero,401
  8063a0:	0080645c 	xori	r2,zero,401
  8063a4:	0080645c 	xori	r2,zero,401
  8063a8:	0080768c 	andi	r2,zero,474
  8063ac:	0080645c 	xori	r2,zero,401
  8063b0:	0080645c 	xori	r2,zero,401
  8063b4:	00807644 	movi	r2,473
  8063b8:	0080645c 	xori	r2,zero,401
  8063bc:	0080645c 	xori	r2,zero,401
  8063c0:	0080645c 	xori	r2,zero,401
  8063c4:	0080645c 	xori	r2,zero,401
  8063c8:	0080645c 	xori	r2,zero,401
  8063cc:	0080645c 	xori	r2,zero,401
  8063d0:	0080645c 	xori	r2,zero,401
  8063d4:	0080645c 	xori	r2,zero,401
  8063d8:	00807488 	cmpgei	r2,zero,466
  8063dc:	0080645c 	xori	r2,zero,401
  8063e0:	0080645c 	xori	r2,zero,401
  8063e4:	00807628 	cmpgeui	r2,zero,472
  8063e8:	0080645c 	xori	r2,zero,401
  8063ec:	0080645c 	xori	r2,zero,401
  8063f0:	0080645c 	xori	r2,zero,401
  8063f4:	0080645c 	xori	r2,zero,401
  8063f8:	0080645c 	xori	r2,zero,401
  8063fc:	0080645c 	xori	r2,zero,401
  806400:	0080645c 	xori	r2,zero,401
  806404:	0080761c 	xori	r2,zero,472
  806408:	00807600 	call	80760 <__reset-0x77f8a0>
  80640c:	008075f4 	movhi	r2,471
  806410:	008075f4 	movhi	r2,471
  806414:	008075f4 	movhi	r2,471
  806418:	008075ec 	andhi	r2,zero,471
  80641c:	008076e0 	cmpeqi	r2,zero,475
  806420:	0080645c 	xori	r2,zero,401
  806424:	0080645c 	xori	r2,zero,401
  806428:	008076cc 	andi	r2,zero,475
  80642c:	0080645c 	xori	r2,zero,401
  806430:	00807664 	muli	r2,zero,473
  806434:	00807648 	cmpgei	r2,zero,473
  806438:	0080769c 	xori	r2,zero,474
  80643c:	0080645c 	xori	r2,zero,401
  806440:	0080645c 	xori	r2,zero,401
  806444:	00807694 	movui	r2,474
  806448:	0080645c 	xori	r2,zero,401
  80644c:	008069cc 	andi	r2,zero,423
  806450:	0080645c 	xori	r2,zero,401
  806454:	0080645c 	xori	r2,zero,401
  806458:	00807488 	cmpgei	r2,zero,466
  80645c:	2987883a 	add	r3,r5,r6
  806460:	18800003 	ldbu	r2,0(r3)
  806464:	1080004c 	andi	r2,r2,1
  806468:	1005003a 	cmpeq	r2,r2,zero
  80646c:	10002c26 	beq	r2,zero,806520 <__svfscanf_r+0x450>
  806470:	01002074 	movhi	r4,129
  806474:	21303004 	addi	r4,r4,-16192
  806478:	00800284 	movi	r2,10
  80647c:	d900a015 	stw	r4,640(sp)
  806480:	054000c4 	movi	r21,3
  806484:	d880a115 	stw	r2,644(sp)
  806488:	80c00117 	ldw	r3,4(r16)
  80648c:	00c14a0e 	bge	zero,r3,8069b8 <__svfscanf_r+0x8e8>
  806490:	9880100c 	andi	r2,r19,64
  806494:	10001326 	beq	r2,zero,8064e4 <__svfscanf_r+0x414>
  806498:	00800104 	movi	r2,4
  80649c:	157f1f36 	bltu	r2,r21,80611c <__svfscanf_r+0x4c>
  8064a0:	ad45883a 	add	r2,r21,r21
  8064a4:	1085883a 	add	r2,r2,r2
  8064a8:	00c02034 	movhi	r3,128
  8064ac:	18d92f04 	addi	r3,r3,25788
  8064b0:	10c5883a 	add	r2,r2,r3
  8064b4:	11000017 	ldw	r4,0(r2)
  8064b8:	2000683a 	jmp	r4
  8064bc:	00806528 	cmpgeui	r2,zero,404
  8064c0:	00806634 	movhi	r2,408
  8064c4:	008066a8 	cmpgeui	r2,zero,410
  8064c8:	00806994 	movui	r2,422
  8064cc:	008067e0 	cmpeqi	r2,zero,415
  8064d0:	b009883a 	mov	r4,r22
  8064d4:	800b883a 	mov	r5,r16
  8064d8:	0803b500 	call	803b50 <__srefill_r>
  8064dc:	103f511e 	bne	r2,zero,806224 <__svfscanf_r+0x154>
  8064e0:	8c400044 	addi	r17,r17,1
  8064e4:	81400017 	ldw	r5,0(r16)
  8064e8:	90800017 	ldw	r2,0(r18)
  8064ec:	28c00003 	ldbu	r3,0(r5)
  8064f0:	1887883a 	add	r3,r3,r2
  8064f4:	19000003 	ldbu	r4,0(r3)
  8064f8:	2100020c 	andi	r4,r4,8
  8064fc:	203fe626 	beq	r4,zero,806498 <__svfscanf_r+0x3c8>
  806500:	80c00117 	ldw	r3,4(r16)
  806504:	18ffffc4 	addi	r3,r3,-1
  806508:	80c00115 	stw	r3,4(r16)
  80650c:	00fff00e 	bge	zero,r3,8064d0 <__svfscanf_r+0x400>
  806510:	29800044 	addi	r6,r5,1
  806514:	8c400044 	addi	r17,r17,1
  806518:	81800015 	stw	r6,0(r16)
  80651c:	003ff106 	br	8064e4 <__svfscanf_r+0x414>
  806520:	9cc00054 	ori	r19,r19,1
  806524:	003fd206 	br	806470 <__svfscanf_r+0x3a0>
  806528:	d8c0a317 	ldw	r3,652(sp)
  80652c:	1800021e 	bne	r3,zero,806538 <__svfscanf_r+0x468>
  806530:	01000044 	movi	r4,1
  806534:	d900a315 	stw	r4,652(sp)
  806538:	9880004c 	andi	r2,r19,1
  80653c:	1005003a 	cmpeq	r2,r2,zero
  806540:	1003d91e 	bne	r2,zero,8074a8 <__svfscanf_r+0x13d8>
  806544:	9d40040c 	andi	r21,r19,16
  806548:	a839003a 	cmpeq	fp,r21,zero
  80654c:	e0042526 	beq	fp,zero,8075e4 <__svfscanf_r+0x1514>
  806550:	d880a417 	ldw	r2,656(sp)
  806554:	14c00017 	ldw	r19,0(r2)
  806558:	10800104 	addi	r2,r2,4
  80655c:	d880a415 	stw	r2,656(sp)
  806560:	d8c0a317 	ldw	r3,652(sp)
  806564:	18041a26 	beq	r3,zero,8075d0 <__svfscanf_r+0x1500>
  806568:	01002074 	movhi	r4,129
  80656c:	211bd504 	addi	r4,r4,28500
  806570:	20800017 	ldw	r2,0(r4)
  806574:	103f2b26 	beq	r2,zero,806224 <__svfscanf_r+0x154>
  806578:	d8804404 	addi	r2,sp,272
  80657c:	0025883a 	mov	r18,zero
  806580:	d880a615 	stw	r2,664(sp)
  806584:	05ffffc4 	movi	r23,-1
  806588:	80800017 	ldw	r2,0(r16)
  80658c:	80c00117 	ldw	r3,4(r16)
  806590:	d900a617 	ldw	r4,664(sp)
  806594:	12000003 	ldbu	r8,0(r2)
  806598:	18ffffc4 	addi	r3,r3,-1
  80659c:	11800044 	addi	r6,r2,1
  8065a0:	248f883a 	add	r7,r4,r18
  8065a4:	80c00115 	stw	r3,4(r16)
  8065a8:	81800015 	stw	r6,0(r16)
  8065ac:	3a000005 	stb	r8,0(r7)
  8065b0:	d9000204 	addi	r4,sp,8
  8065b4:	000b883a 	mov	r5,zero
  8065b8:	01800204 	movi	r6,8
  8065bc:	08033d40 	call	8033d4 <memset>
  8065c0:	d980a617 	ldw	r6,664(sp)
  8065c4:	94800044 	addi	r18,r18,1
  8065c8:	d8800204 	addi	r2,sp,8
  8065cc:	b009883a 	mov	r4,r22
  8065d0:	980b883a 	mov	r5,r19
  8065d4:	900f883a 	mov	r7,r18
  8065d8:	d8800015 	stw	r2,0(sp)
  8065dc:	08096f40 	call	8096f4 <_mbrtowc_r>
  8065e0:	1007883a 	mov	r3,r2
  8065e4:	15ff0f26 	beq	r2,r23,806224 <__svfscanf_r+0x154>
  8065e8:	1003f11e 	bne	r2,zero,8075b0 <__svfscanf_r+0x14e0>
  8065ec:	a800011e 	bne	r21,zero,8065f4 <__svfscanf_r+0x524>
  8065f0:	98000015 	stw	zero,0(r19)
  8065f4:	d8c0a317 	ldw	r3,652(sp)
  8065f8:	8ca3883a 	add	r17,r17,r18
  8065fc:	18ffffc4 	addi	r3,r3,-1
  806600:	d8c0a315 	stw	r3,652(sp)
  806604:	e0000126 	beq	fp,zero,80660c <__svfscanf_r+0x53c>
  806608:	9cc00104 	addi	r19,r19,4
  80660c:	0025883a 	mov	r18,zero
  806610:	80c00117 	ldw	r3,4(r16)
  806614:	00c3e90e 	bge	zero,r3,8075bc <__svfscanf_r+0x14ec>
  806618:	d900a317 	ldw	r4,652(sp)
  80661c:	2003ec26 	beq	r4,zero,8075d0 <__svfscanf_r+0x1500>
  806620:	00c02074 	movhi	r3,129
  806624:	18dbd504 	addi	r3,r3,28500
  806628:	18800017 	ldw	r2,0(r3)
  80662c:	90bfd61e 	bne	r18,r2,806588 <__svfscanf_r+0x4b8>
  806630:	003efc06 	br	806224 <__svfscanf_r+0x154>
  806634:	d880a317 	ldw	r2,652(sp)
  806638:	1000021e 	bne	r2,zero,806644 <__svfscanf_r+0x574>
  80663c:	00ffffc4 	movi	r3,-1
  806640:	d8c0a315 	stw	r3,652(sp)
  806644:	9880040c 	andi	r2,r19,16
  806648:	10036526 	beq	r2,zero,8073e0 <__svfscanf_r+0x1310>
  80664c:	0027883a 	mov	r19,zero
  806650:	dd400404 	addi	r21,sp,16
  806654:	81000017 	ldw	r4,0(r16)
  806658:	20800003 	ldbu	r2,0(r4)
  80665c:	a885883a 	add	r2,r21,r2
  806660:	10c00007 	ldb	r3,0(r2)
  806664:	1803be26 	beq	r3,zero,807560 <__svfscanf_r+0x1490>
  806668:	80c00117 	ldw	r3,4(r16)
  80666c:	21800044 	addi	r6,r4,1
  806670:	d900a317 	ldw	r4,652(sp)
  806674:	18ffffc4 	addi	r3,r3,-1
  806678:	9cc00044 	addi	r19,r19,1
  80667c:	81800015 	stw	r6,0(r16)
  806680:	80c00115 	stw	r3,4(r16)
  806684:	24c3b626 	beq	r4,r19,807560 <__svfscanf_r+0x1490>
  806688:	00fff216 	blt	zero,r3,806654 <__svfscanf_r+0x584>
  80668c:	b009883a 	mov	r4,r22
  806690:	800b883a 	mov	r5,r16
  806694:	0803b500 	call	803b50 <__srefill_r>
  806698:	103fee26 	beq	r2,zero,806654 <__svfscanf_r+0x584>
  80669c:	983ee126 	beq	r19,zero,806224 <__svfscanf_r+0x154>
  8066a0:	8ce3883a 	add	r17,r17,r19
  8066a4:	003e9d06 	br	80611c <__svfscanf_r+0x4c>
  8066a8:	d900a317 	ldw	r4,652(sp)
  8066ac:	2000021e 	bne	r4,zero,8066b8 <__svfscanf_r+0x5e8>
  8066b0:	00bfffc4 	movi	r2,-1
  8066b4:	d880a315 	stw	r2,652(sp)
  8066b8:	9880004c 	andi	r2,r19,1
  8066bc:	1005003a 	cmpeq	r2,r2,zero
  8066c0:	1001f41e 	bne	r2,zero,806e94 <__svfscanf_r+0xdc4>
  8066c4:	9dc0040c 	andi	r23,r19,16
  8066c8:	b807003a 	cmpeq	r3,r23,zero
  8066cc:	d8c0a515 	stw	r3,660(sp)
  8066d0:	1803b21e 	bne	r3,zero,80759c <__svfscanf_r+0x14cc>
  8066d4:	dd400104 	addi	r21,sp,4
  8066d8:	0027883a 	mov	r19,zero
  8066dc:	073fffc4 	movi	fp,-1
  8066e0:	81400017 	ldw	r5,0(r16)
  8066e4:	90800017 	ldw	r2,0(r18)
  8066e8:	29c00003 	ldbu	r7,0(r5)
  8066ec:	38c03fcc 	andi	r3,r7,255
  8066f0:	1887883a 	add	r3,r3,r2
  8066f4:	19000003 	ldbu	r4,0(r3)
  8066f8:	2100020c 	andi	r4,r4,8
  8066fc:	2000321e 	bne	r4,zero,8067c8 <__svfscanf_r+0x6f8>
  806700:	d8c0a317 	ldw	r3,652(sp)
  806704:	18003026 	beq	r3,zero,8067c8 <__svfscanf_r+0x6f8>
  806708:	00802074 	movhi	r2,129
  80670c:	109bd504 	addi	r2,r2,28500
  806710:	10c00017 	ldw	r3,0(r2)
  806714:	98fec326 	beq	r19,r3,806224 <__svfscanf_r+0x154>
  806718:	d8c04404 	addi	r3,sp,272
  80671c:	80800117 	ldw	r2,4(r16)
  806720:	d8c0a615 	stw	r3,664(sp)
  806724:	d900a617 	ldw	r4,664(sp)
  806728:	10ffffc4 	addi	r3,r2,-1
  80672c:	29800044 	addi	r6,r5,1
  806730:	80c00115 	stw	r3,4(r16)
  806734:	24c5883a 	add	r2,r4,r19
  806738:	81800015 	stw	r6,0(r16)
  80673c:	d9000204 	addi	r4,sp,8
  806740:	000b883a 	mov	r5,zero
  806744:	01800204 	movi	r6,8
  806748:	11c00005 	stb	r7,0(r2)
  80674c:	08033d40 	call	8033d4 <memset>
  806750:	d980a617 	ldw	r6,664(sp)
  806754:	9cc00044 	addi	r19,r19,1
  806758:	d8800204 	addi	r2,sp,8
  80675c:	b009883a 	mov	r4,r22
  806760:	a80b883a 	mov	r5,r21
  806764:	980f883a 	mov	r7,r19
  806768:	d8800015 	stw	r2,0(sp)
  80676c:	08096f40 	call	8096f4 <_mbrtowc_r>
  806770:	1007883a 	mov	r3,r2
  806774:	173eab26 	beq	r2,fp,806224 <__svfscanf_r+0x154>
  806778:	1003851e 	bne	r2,zero,807590 <__svfscanf_r+0x14c0>
  80677c:	a8000015 	stw	zero,0(r21)
  806780:	a9000017 	ldw	r4,0(r21)
  806784:	080958c0 	call	80958c <iswspace>
  806788:	1003781e 	bne	r2,zero,80756c <__svfscanf_r+0x149c>
  80678c:	d900a317 	ldw	r4,652(sp)
  806790:	d880a517 	ldw	r2,660(sp)
  806794:	8ce3883a 	add	r17,r17,r19
  806798:	213fffc4 	addi	r4,r4,-1
  80679c:	d900a315 	stw	r4,652(sp)
  8067a0:	10000126 	beq	r2,zero,8067a8 <__svfscanf_r+0x6d8>
  8067a4:	ad400104 	addi	r21,r21,4
  8067a8:	0027883a 	mov	r19,zero
  8067ac:	80c00117 	ldw	r3,4(r16)
  8067b0:	00ffcb16 	blt	zero,r3,8066e0 <__svfscanf_r+0x610>
  8067b4:	b009883a 	mov	r4,r22
  8067b8:	800b883a 	mov	r5,r16
  8067bc:	0803b500 	call	803b50 <__srefill_r>
  8067c0:	103fc726 	beq	r2,zero,8066e0 <__svfscanf_r+0x610>
  8067c4:	983e971e 	bne	r19,zero,806224 <__svfscanf_r+0x154>
  8067c8:	b83e541e 	bne	r23,zero,80611c <__svfscanf_r+0x4c>
  8067cc:	d900a217 	ldw	r4,648(sp)
  8067d0:	a8000015 	stw	zero,0(r21)
  8067d4:	21000044 	addi	r4,r4,1
  8067d8:	d900a215 	stw	r4,648(sp)
  8067dc:	003e4f06 	br	80611c <__svfscanf_r+0x4c>
  8067e0:	d900a317 	ldw	r4,652(sp)
  8067e4:	00805704 	movi	r2,348
  8067e8:	20ffffc4 	addi	r3,r4,-1
  8067ec:	10c1ed2e 	bgeu	r2,r3,806fa4 <__svfscanf_r+0xed4>
  8067f0:	00805744 	movi	r2,349
  8067f4:	21bfa8c4 	addi	r6,r4,-349
  8067f8:	9d41e014 	ori	r21,r19,1920
  8067fc:	d880a315 	stw	r2,652(sp)
  806800:	d8c04404 	addi	r3,sp,272
  806804:	d8c0a615 	stw	r3,664(sp)
  806808:	182f883a 	mov	r23,r3
  80680c:	d8009f15 	stw	zero,636(sp)
  806810:	d8009e15 	stw	zero,632(sp)
  806814:	d8009d15 	stw	zero,628(sp)
  806818:	d8009c15 	stw	zero,624(sp)
  80681c:	0039883a 	mov	fp,zero
  806820:	0025883a 	mov	r18,zero
  806824:	80800017 	ldw	r2,0(r16)
  806828:	11400003 	ldbu	r5,0(r2)
  80682c:	00801384 	movi	r2,78
  806830:	28fff544 	addi	r3,r5,-43
  806834:	18c03fcc 	andi	r3,r3,255
  806838:	10c07d36 	bltu	r2,r3,806a30 <__svfscanf_r+0x960>
  80683c:	18c5883a 	add	r2,r3,r3
  806840:	1085883a 	add	r2,r2,r2
  806844:	00c02034 	movhi	r3,128
  806848:	18da1604 	addi	r3,r3,26712
  80684c:	10c5883a 	add	r2,r2,r3
  806850:	11000017 	ldw	r4,0(r2)
  806854:	2000683a 	jmp	r4
  806858:	008069e8 	cmpgeui	r2,zero,423
  80685c:	00806a30 	cmpltui	r2,zero,424
  806860:	008069e8 	cmpgeui	r2,zero,423
  806864:	00806b7c 	xorhi	r2,zero,429
  806868:	00806a30 	cmpltui	r2,zero,424
  80686c:	00806bb4 	movhi	r2,430
  806870:	00806be8 	cmpgeui	r2,zero,431
  806874:	00806be8 	cmpgeui	r2,zero,431
  806878:	00806be8 	cmpgeui	r2,zero,431
  80687c:	00806be8 	cmpgeui	r2,zero,431
  806880:	00806be8 	cmpgeui	r2,zero,431
  806884:	00806be8 	cmpgeui	r2,zero,431
  806888:	00806be8 	cmpgeui	r2,zero,431
  80688c:	00806be8 	cmpgeui	r2,zero,431
  806890:	00806be8 	cmpgeui	r2,zero,431
  806894:	00806a30 	cmpltui	r2,zero,424
  806898:	00806a30 	cmpltui	r2,zero,424
  80689c:	00806a30 	cmpltui	r2,zero,424
  8068a0:	00806a30 	cmpltui	r2,zero,424
  8068a4:	00806a30 	cmpltui	r2,zero,424
  8068a8:	00806a30 	cmpltui	r2,zero,424
  8068ac:	00806a30 	cmpltui	r2,zero,424
  8068b0:	00806c08 	cmpgei	r2,zero,432
  8068b4:	00806a30 	cmpltui	r2,zero,424
  8068b8:	00806a30 	cmpltui	r2,zero,424
  8068bc:	00806a30 	cmpltui	r2,zero,424
  8068c0:	00806c18 	cmpnei	r2,zero,432
  8068c4:	00806cb4 	movhi	r2,434
  8068c8:	00806a30 	cmpltui	r2,zero,424
  8068cc:	00806a30 	cmpltui	r2,zero,424
  8068d0:	00806cd0 	cmplti	r2,zero,435
  8068d4:	00806a30 	cmpltui	r2,zero,424
  8068d8:	00806a30 	cmpltui	r2,zero,424
  8068dc:	00806a30 	cmpltui	r2,zero,424
  8068e0:	00806a30 	cmpltui	r2,zero,424
  8068e4:	00806cfc 	xorhi	r2,zero,435
  8068e8:	00806a30 	cmpltui	r2,zero,424
  8068ec:	00806a30 	cmpltui	r2,zero,424
  8068f0:	00806a30 	cmpltui	r2,zero,424
  8068f4:	00806a30 	cmpltui	r2,zero,424
  8068f8:	00806a30 	cmpltui	r2,zero,424
  8068fc:	00806d50 	cmplti	r2,zero,437
  806900:	00806a30 	cmpltui	r2,zero,424
  806904:	00806a30 	cmpltui	r2,zero,424
  806908:	00806a30 	cmpltui	r2,zero,424
  80690c:	00806a30 	cmpltui	r2,zero,424
  806910:	00806e60 	cmpeqi	r2,zero,441
  806914:	00806a30 	cmpltui	r2,zero,424
  806918:	00806a30 	cmpltui	r2,zero,424
  80691c:	00806a30 	cmpltui	r2,zero,424
  806920:	00806a30 	cmpltui	r2,zero,424
  806924:	00806a30 	cmpltui	r2,zero,424
  806928:	00806a30 	cmpltui	r2,zero,424
  80692c:	00806a30 	cmpltui	r2,zero,424
  806930:	00806c08 	cmpgei	r2,zero,432
  806934:	00806a30 	cmpltui	r2,zero,424
  806938:	00806a30 	cmpltui	r2,zero,424
  80693c:	00806a30 	cmpltui	r2,zero,424
  806940:	00806c18 	cmpnei	r2,zero,432
  806944:	00806cb4 	movhi	r2,434
  806948:	00806a30 	cmpltui	r2,zero,424
  80694c:	00806a30 	cmpltui	r2,zero,424
  806950:	00806cd0 	cmplti	r2,zero,435
  806954:	00806a30 	cmpltui	r2,zero,424
  806958:	00806a30 	cmpltui	r2,zero,424
  80695c:	00806a30 	cmpltui	r2,zero,424
  806960:	00806a30 	cmpltui	r2,zero,424
  806964:	00806cfc 	xorhi	r2,zero,435
  806968:	00806a30 	cmpltui	r2,zero,424
  80696c:	00806a30 	cmpltui	r2,zero,424
  806970:	00806a30 	cmpltui	r2,zero,424
  806974:	00806a30 	cmpltui	r2,zero,424
  806978:	00806a30 	cmpltui	r2,zero,424
  80697c:	00806d50 	cmplti	r2,zero,437
  806980:	00806a30 	cmpltui	r2,zero,424
  806984:	00806a30 	cmpltui	r2,zero,424
  806988:	00806a30 	cmpltui	r2,zero,424
  80698c:	00806a30 	cmpltui	r2,zero,424
  806990:	00806e60 	cmpeqi	r2,zero,441
  806994:	d900a317 	ldw	r4,652(sp)
  806998:	00805704 	movi	r2,348
  80699c:	20ffffc4 	addi	r3,r4,-1
  8069a0:	10c18c2e 	bgeu	r2,r3,806fd4 <__svfscanf_r+0xf04>
  8069a4:	00805744 	movi	r2,349
  8069a8:	257fa8c4 	addi	r21,r4,-349
  8069ac:	9c836014 	ori	r18,r19,3456
  8069b0:	d880a315 	stw	r2,652(sp)
  8069b4:	0001a106 	br	80703c <__svfscanf_r+0xf6c>
  8069b8:	b009883a 	mov	r4,r22
  8069bc:	800b883a 	mov	r5,r16
  8069c0:	0803b500 	call	803b50 <__srefill_r>
  8069c4:	103eb226 	beq	r2,zero,806490 <__svfscanf_r+0x3c0>
  8069c8:	003e1606 	br	806224 <__svfscanf_r+0x154>
  8069cc:	01000284 	movi	r4,10
  8069d0:	00802074 	movhi	r2,129
  8069d4:	10b19004 	addi	r2,r2,-14784
  8069d8:	054000c4 	movi	r21,3
  8069dc:	d900a115 	stw	r4,644(sp)
  8069e0:	d880a015 	stw	r2,640(sp)
  8069e4:	003ea806 	br	806488 <__svfscanf_r+0x3b8>
  8069e8:	a880200c 	andi	r2,r21,128
  8069ec:	10001026 	beq	r2,zero,806a30 <__svfscanf_r+0x960>
  8069f0:	00bfdfc4 	movi	r2,-129
  8069f4:	a8aa703a 	and	r21,r21,r2
  8069f8:	b9400005 	stb	r5,0(r23)
  8069fc:	bdc00044 	addi	r23,r23,1
  806a00:	80c00117 	ldw	r3,4(r16)
  806a04:	8c400044 	addi	r17,r17,1
  806a08:	18bfffc4 	addi	r2,r3,-1
  806a0c:	80800115 	stw	r2,4(r16)
  806a10:	0080610e 	bge	zero,r2,806b98 <__svfscanf_r+0xac8>
  806a14:	80800017 	ldw	r2,0(r16)
  806a18:	10800044 	addi	r2,r2,1
  806a1c:	80800015 	stw	r2,0(r16)
  806a20:	d880a317 	ldw	r2,652(sp)
  806a24:	10bfffc4 	addi	r2,r2,-1
  806a28:	d880a315 	stw	r2,652(sp)
  806a2c:	103f7d1e 	bne	r2,zero,806824 <__svfscanf_r+0x754>
  806a30:	d8c09e17 	ldw	r3,632(sp)
  806a34:	18000226 	beq	r3,zero,806a40 <__svfscanf_r+0x970>
  806a38:	00bfbfc4 	movi	r2,-257
  806a3c:	a8aa703a 	and	r21,r21,r2
  806a40:	90ffffc4 	addi	r3,r18,-1
  806a44:	00800044 	movi	r2,1
  806a48:	10c0cd2e 	bgeu	r2,r3,806d80 <__svfscanf_r+0xcb0>
  806a4c:	e1003fcc 	andi	r4,fp,255
  806a50:	2100201c 	xori	r4,r4,128
  806a54:	213fe004 	addi	r4,r4,-128
  806a58:	20ffffc4 	addi	r3,r4,-1
  806a5c:	00800184 	movi	r2,6
  806a60:	10c01736 	bltu	r2,r3,806ac0 <__svfscanf_r+0x9f0>
  806a64:	00c00084 	movi	r3,2
  806a68:	1900880e 	bge	r3,r4,806c8c <__svfscanf_r+0xbbc>
  806a6c:	008000c4 	movi	r2,3
  806a70:	1100130e 	bge	r2,r4,806ac0 <__svfscanf_r+0x9f0>
  806a74:	e4ffffc4 	addi	r19,fp,-1
  806a78:	b825883a 	mov	r18,r23
  806a7c:	94bfffc4 	addi	r18,r18,-1
  806a80:	91400007 	ldb	r5,0(r18)
  806a84:	b009883a 	mov	r4,r22
  806a88:	800d883a 	mov	r6,r16
  806a8c:	080cc600 	call	80cc60 <_ungetc_r>
  806a90:	9cffffc4 	addi	r19,r19,-1
  806a94:	98c03fcc 	andi	r3,r19,255
  806a98:	18c0201c 	xori	r3,r3,128
  806a9c:	18ffe004 	addi	r3,r3,-128
  806aa0:	00800084 	movi	r2,2
  806aa4:	18bff51e 	bne	r3,r2,806a7c <__svfscanf_r+0x9ac>
  806aa8:	e0bfff04 	addi	r2,fp,-4
  806aac:	10803fcc 	andi	r2,r2,255
  806ab0:	b887c83a 	sub	r3,r23,r2
  806ab4:	8885c83a 	sub	r2,r17,r2
  806ab8:	147fffc4 	addi	r17,r2,-1
  806abc:	1dffffc4 	addi	r23,r3,-1
  806ac0:	a880400c 	andi	r2,r21,256
  806ac4:	10001226 	beq	r2,zero,806b10 <__svfscanf_r+0xa40>
  806ac8:	a881000c 	andi	r2,r21,1024
  806acc:	1000651e 	bne	r2,zero,806c64 <__svfscanf_r+0xb94>
  806ad0:	bdffffc4 	addi	r23,r23,-1
  806ad4:	b9400007 	ldb	r5,0(r23)
  806ad8:	00801944 	movi	r2,101
  806adc:	8c7fffc4 	addi	r17,r17,-1
  806ae0:	28800826 	beq	r5,r2,806b04 <__svfscanf_r+0xa34>
  806ae4:	00801144 	movi	r2,69
  806ae8:	28800626 	beq	r5,r2,806b04 <__svfscanf_r+0xa34>
  806aec:	bdffffc4 	addi	r23,r23,-1
  806af0:	b009883a 	mov	r4,r22
  806af4:	800d883a 	mov	r6,r16
  806af8:	080cc600 	call	80cc60 <_ungetc_r>
  806afc:	b9400007 	ldb	r5,0(r23)
  806b00:	8c7fffc4 	addi	r17,r17,-1
  806b04:	b009883a 	mov	r4,r22
  806b08:	800d883a 	mov	r6,r16
  806b0c:	080cc600 	call	80cc60 <_ungetc_r>
  806b10:	a880040c 	andi	r2,r21,16
  806b14:	103d811e 	bne	r2,zero,80611c <__svfscanf_r+0x4c>
  806b18:	a8c1800c 	andi	r3,r21,1536
  806b1c:	00810004 	movi	r2,1024
  806b20:	b8000005 	stb	zero,0(r23)
  806b24:	1880bb26 	beq	r3,r2,806e14 <__svfscanf_r+0xd44>
  806b28:	d8809d17 	ldw	r2,628(sp)
  806b2c:	1000a61e 	bne	r2,zero,806dc8 <__svfscanf_r+0xcf8>
  806b30:	d940a617 	ldw	r5,664(sp)
  806b34:	b009883a 	mov	r4,r22
  806b38:	000d883a 	mov	r6,zero
  806b3c:	080aa9c0 	call	80aa9c <_strtod_r>
  806b40:	a900004c 	andi	r4,r21,1
  806b44:	2009003a 	cmpeq	r4,r4,zero
  806b48:	1025883a 	mov	r18,r2
  806b4c:	1827883a 	mov	r19,r3
  806b50:	2000951e 	bne	r4,zero,806da8 <__svfscanf_r+0xcd8>
  806b54:	d8c0a417 	ldw	r3,656(sp)
  806b58:	18800017 	ldw	r2,0(r3)
  806b5c:	1d400104 	addi	r21,r3,4
  806b60:	14c00115 	stw	r19,4(r2)
  806b64:	14800015 	stw	r18,0(r2)
  806b68:	d8c0a217 	ldw	r3,648(sp)
  806b6c:	dd40a415 	stw	r21,656(sp)
  806b70:	18c00044 	addi	r3,r3,1
  806b74:	d8c0a215 	stw	r3,648(sp)
  806b78:	003d6806 	br	80611c <__svfscanf_r+0x4c>
  806b7c:	a880800c 	andi	r2,r21,512
  806b80:	103fab26 	beq	r2,zero,806a30 <__svfscanf_r+0x960>
  806b84:	d9009e17 	ldw	r4,632(sp)
  806b88:	00bf5fc4 	movi	r2,-641
  806b8c:	a8aa703a 	and	r21,r21,r2
  806b90:	d9009f15 	stw	r4,636(sp)
  806b94:	003f9806 	br	8069f8 <__svfscanf_r+0x928>
  806b98:	b009883a 	mov	r4,r22
  806b9c:	800b883a 	mov	r5,r16
  806ba0:	d980a715 	stw	r6,668(sp)
  806ba4:	0803b500 	call	803b50 <__srefill_r>
  806ba8:	d980a717 	ldw	r6,668(sp)
  806bac:	103f9c26 	beq	r2,zero,806a20 <__svfscanf_r+0x950>
  806bb0:	003f9f06 	br	806a30 <__svfscanf_r+0x960>
  806bb4:	a880400c 	andi	r2,r21,256
  806bb8:	10000b26 	beq	r2,zero,806be8 <__svfscanf_r+0xb18>
  806bbc:	00bfdfc4 	movi	r2,-129
  806bc0:	a8aa703a 	and	r21,r21,r2
  806bc4:	d8809e17 	ldw	r2,632(sp)
  806bc8:	10800044 	addi	r2,r2,1
  806bcc:	d8809e15 	stw	r2,632(sp)
  806bd0:	303f8b26 	beq	r6,zero,806a00 <__svfscanf_r+0x930>
  806bd4:	d8c0a317 	ldw	r3,652(sp)
  806bd8:	31bfffc4 	addi	r6,r6,-1
  806bdc:	18c00044 	addi	r3,r3,1
  806be0:	d8c0a315 	stw	r3,652(sp)
  806be4:	003f8606 	br	806a00 <__svfscanf_r+0x930>
  806be8:	e0803fcc 	andi	r2,fp,255
  806bec:	1080201c 	xori	r2,r2,128
  806bf0:	10bfe004 	addi	r2,r2,-128
  806bf4:	9085883a 	add	r2,r18,r2
  806bf8:	103f8d1e 	bne	r2,zero,806a30 <__svfscanf_r+0x960>
  806bfc:	00bf9fc4 	movi	r2,-385
  806c00:	a8aa703a 	and	r21,r21,r2
  806c04:	003f7c06 	br	8069f8 <__svfscanf_r+0x928>
  806c08:	00800044 	movi	r2,1
  806c0c:	90bf881e 	bne	r18,r2,806a30 <__svfscanf_r+0x960>
  806c10:	04800084 	movi	r18,2
  806c14:	003f7806 	br	8069f8 <__svfscanf_r+0x928>
  806c18:	a8c1400c 	andi	r3,r21,1280
  806c1c:	00810004 	movi	r2,1024
  806c20:	18800426 	beq	r3,r2,806c34 <__svfscanf_r+0xb64>
  806c24:	a884703a 	and	r2,r21,r2
  806c28:	103f8126 	beq	r2,zero,806a30 <__svfscanf_r+0x960>
  806c2c:	d8809e17 	ldw	r2,632(sp)
  806c30:	103f8326 	beq	r2,zero,806a40 <__svfscanf_r+0x970>
  806c34:	a880800c 	andi	r2,r21,512
  806c38:	1000051e 	bne	r2,zero,806c50 <__svfscanf_r+0xb80>
  806c3c:	d8c09e17 	ldw	r3,632(sp)
  806c40:	d9009f17 	ldw	r4,636(sp)
  806c44:	ddc09c15 	stw	r23,624(sp)
  806c48:	1907c83a 	sub	r3,r3,r4
  806c4c:	d8c09d15 	stw	r3,628(sp)
  806c50:	00be7fc4 	movi	r2,-1537
  806c54:	a884703a 	and	r2,r21,r2
  806c58:	15406014 	ori	r21,r2,384
  806c5c:	d8009e15 	stw	zero,632(sp)
  806c60:	003f6506 	br	8069f8 <__svfscanf_r+0x928>
  806c64:	d900a617 	ldw	r4,664(sp)
  806c68:	25fd4e2e 	bgeu	r4,r23,8061a4 <__svfscanf_r+0xd4>
  806c6c:	bdffffc4 	addi	r23,r23,-1
  806c70:	b9400007 	ldb	r5,0(r23)
  806c74:	b009883a 	mov	r4,r22
  806c78:	800d883a 	mov	r6,r16
  806c7c:	080cc600 	call	80cc60 <_ungetc_r>
  806c80:	d880a617 	ldw	r2,664(sp)
  806c84:	15fff936 	bltu	r2,r23,806c6c <__svfscanf_r+0xb9c>
  806c88:	003d4606 	br	8061a4 <__svfscanf_r+0xd4>
  806c8c:	d900a617 	ldw	r4,664(sp)
  806c90:	25fd442e 	bgeu	r4,r23,8061a4 <__svfscanf_r+0xd4>
  806c94:	bdffffc4 	addi	r23,r23,-1
  806c98:	b9400007 	ldb	r5,0(r23)
  806c9c:	b009883a 	mov	r4,r22
  806ca0:	800d883a 	mov	r6,r16
  806ca4:	080cc600 	call	80cc60 <_ungetc_r>
  806ca8:	d8c0a617 	ldw	r3,664(sp)
  806cac:	1dfff936 	bltu	r3,r23,806c94 <__svfscanf_r+0xbc4>
  806cb0:	003d3c06 	br	8061a4 <__svfscanf_r+0xd4>
  806cb4:	e0c03fcc 	andi	r3,fp,255
  806cb8:	18c0201c 	xori	r3,r3,128
  806cbc:	18ffe004 	addi	r3,r3,-128
  806cc0:	00800084 	movi	r2,2
  806cc4:	18bf5a1e 	bne	r3,r2,806a30 <__svfscanf_r+0x960>
  806cc8:	070000c4 	movi	fp,3
  806ccc:	003f4a06 	br	8069f8 <__svfscanf_r+0x928>
  806cd0:	e0c03fcc 	andi	r3,fp,255
  806cd4:	18c0201c 	xori	r3,r3,128
  806cd8:	18ffe004 	addi	r3,r3,-128
  806cdc:	1800231e 	bne	r3,zero,806d6c <__svfscanf_r+0xc9c>
  806ce0:	a8c1c00c 	andi	r3,r21,1792
  806ce4:	0081c004 	movi	r2,1792
  806ce8:	18bf511e 	bne	r3,r2,806a30 <__svfscanf_r+0x960>
  806cec:	00be1fc4 	movi	r2,-1921
  806cf0:	a8aa703a 	and	r21,r21,r2
  806cf4:	07000044 	movi	fp,1
  806cf8:	003f3f06 	br	8069f8 <__svfscanf_r+0x928>
  806cfc:	9000101e 	bne	r18,zero,806d40 <__svfscanf_r+0xc70>
  806d00:	a8c1c00c 	andi	r3,r21,1792
  806d04:	0081c004 	movi	r2,1792
  806d08:	18800926 	beq	r3,r2,806d30 <__svfscanf_r+0xc60>
  806d0c:	e0c03fcc 	andi	r3,fp,255
  806d10:	18c0201c 	xori	r3,r3,128
  806d14:	18ffe004 	addi	r3,r3,-128
  806d18:	00800044 	movi	r2,1
  806d1c:	18800226 	beq	r3,r2,806d28 <__svfscanf_r+0xc58>
  806d20:	00800104 	movi	r2,4
  806d24:	18bf421e 	bne	r3,r2,806a30 <__svfscanf_r+0x960>
  806d28:	e7000044 	addi	fp,fp,1
  806d2c:	003f3206 	br	8069f8 <__svfscanf_r+0x928>
  806d30:	00be1fc4 	movi	r2,-1921
  806d34:	a8aa703a 	and	r21,r21,r2
  806d38:	04800044 	movi	r18,1
  806d3c:	003f2e06 	br	8069f8 <__svfscanf_r+0x928>
  806d40:	00800084 	movi	r2,2
  806d44:	90bff11e 	bne	r18,r2,806d0c <__svfscanf_r+0xc3c>
  806d48:	048000c4 	movi	r18,3
  806d4c:	003f2a06 	br	8069f8 <__svfscanf_r+0x928>
  806d50:	e0c03fcc 	andi	r3,fp,255
  806d54:	18c0201c 	xori	r3,r3,128
  806d58:	18ffe004 	addi	r3,r3,-128
  806d5c:	00800184 	movi	r2,6
  806d60:	18bf331e 	bne	r3,r2,806a30 <__svfscanf_r+0x960>
  806d64:	070001c4 	movi	fp,7
  806d68:	003f2306 	br	8069f8 <__svfscanf_r+0x928>
  806d6c:	008000c4 	movi	r2,3
  806d70:	18bfed26 	beq	r3,r2,806d28 <__svfscanf_r+0xc58>
  806d74:	00800144 	movi	r2,5
  806d78:	18bfeb26 	beq	r3,r2,806d28 <__svfscanf_r+0xc58>
  806d7c:	003f2c06 	br	806a30 <__svfscanf_r+0x960>
  806d80:	d900a617 	ldw	r4,664(sp)
  806d84:	25fd072e 	bgeu	r4,r23,8061a4 <__svfscanf_r+0xd4>
  806d88:	bdffffc4 	addi	r23,r23,-1
  806d8c:	b9400007 	ldb	r5,0(r23)
  806d90:	b009883a 	mov	r4,r22
  806d94:	800d883a 	mov	r6,r16
  806d98:	080cc600 	call	80cc60 <_ungetc_r>
  806d9c:	d880a617 	ldw	r2,664(sp)
  806da0:	15fff936 	bltu	r2,r23,806d88 <__svfscanf_r+0xcb8>
  806da4:	003cff06 	br	8061a4 <__svfscanf_r+0xd4>
  806da8:	a880008c 	andi	r2,r21,2
  806dac:	10002026 	beq	r2,zero,806e30 <__svfscanf_r+0xd60>
  806db0:	d900a417 	ldw	r4,656(sp)
  806db4:	20800017 	ldw	r2,0(r4)
  806db8:	25400104 	addi	r21,r4,4
  806dbc:	10c00115 	stw	r3,4(r2)
  806dc0:	14800015 	stw	r18,0(r2)
  806dc4:	003f6806 	br	806b68 <__svfscanf_r+0xa98>
  806dc8:	d8c09c17 	ldw	r3,624(sp)
  806dcc:	b009883a 	mov	r4,r22
  806dd0:	000d883a 	mov	r6,zero
  806dd4:	19400044 	addi	r5,r3,1
  806dd8:	01c00284 	movi	r7,10
  806ddc:	080c0c00 	call	80c0c0 <_strtol_r>
  806de0:	d9009d17 	ldw	r4,628(sp)
  806de4:	110dc83a 	sub	r6,r2,r4
  806de8:	d8c0a617 	ldw	r3,664(sp)
  806dec:	d9009c17 	ldw	r4,624(sp)
  806df0:	188054c4 	addi	r2,r3,339
  806df4:	20800236 	bltu	r4,r2,806e00 <__svfscanf_r+0xd30>
  806df8:	18805484 	addi	r2,r3,338
  806dfc:	d8809c15 	stw	r2,624(sp)
  806e00:	d9009c17 	ldw	r4,624(sp)
  806e04:	01402074 	movhi	r5,129
  806e08:	29533704 	addi	r5,r5,19676
  806e0c:	0803e000 	call	803e00 <sprintf>
  806e10:	003f4706 	br	806b30 <__svfscanf_r+0xa60>
  806e14:	d8c09e17 	ldw	r3,632(sp)
  806e18:	d9009f17 	ldw	r4,636(sp)
  806e1c:	1905c83a 	sub	r2,r3,r4
  806e20:	103f4326 	beq	r2,zero,806b30 <__svfscanf_r+0xa60>
  806e24:	008dc83a 	sub	r6,zero,r2
  806e28:	ddc09c15 	stw	r23,624(sp)
  806e2c:	003fee06 	br	806de8 <__svfscanf_r+0xd18>
  806e30:	d880a417 	ldw	r2,656(sp)
  806e34:	9009883a 	mov	r4,r18
  806e38:	180b883a 	mov	r5,r3
  806e3c:	15c00017 	ldw	r23,0(r2)
  806e40:	15400104 	addi	r21,r2,4
  806e44:	080a8a00 	call	80a8a0 <__isnand>
  806e48:	10021c1e 	bne	r2,zero,8076bc <__svfscanf_r+0x15ec>
  806e4c:	980b883a 	mov	r5,r19
  806e50:	9009883a 	mov	r4,r18
  806e54:	080f8a40 	call	80f8a4 <__truncdfsf2>
  806e58:	b8800015 	stw	r2,0(r23)
  806e5c:	003f4206 	br	806b68 <__svfscanf_r+0xa98>
  806e60:	e0c03fcc 	andi	r3,fp,255
  806e64:	18c0201c 	xori	r3,r3,128
  806e68:	18ffe004 	addi	r3,r3,-128
  806e6c:	008001c4 	movi	r2,7
  806e70:	18beef1e 	bne	r3,r2,806a30 <__svfscanf_r+0x960>
  806e74:	07000204 	movi	fp,8
  806e78:	003edf06 	br	8069f8 <__svfscanf_r+0x928>
  806e7c:	d900a317 	ldw	r4,652(sp)
  806e80:	208002a4 	muli	r2,r4,10
  806e84:	1145883a 	add	r2,r2,r5
  806e88:	10bff404 	addi	r2,r2,-48
  806e8c:	d880a315 	stw	r2,652(sp)
  806e90:	003ceb06 	br	806240 <__svfscanf_r+0x170>
  806e94:	9880040c 	andi	r2,r19,16
  806e98:	10001426 	beq	r2,zero,806eec <__svfscanf_r+0xe1c>
  806e9c:	0027883a 	mov	r19,zero
  806ea0:	00000906 	br	806ec8 <__svfscanf_r+0xdf8>
  806ea4:	80c00117 	ldw	r3,4(r16)
  806ea8:	d880a317 	ldw	r2,652(sp)
  806eac:	29800044 	addi	r6,r5,1
  806eb0:	18ffffc4 	addi	r3,r3,-1
  806eb4:	9cc00044 	addi	r19,r19,1
  806eb8:	81800015 	stw	r6,0(r16)
  806ebc:	80c00115 	stw	r3,4(r16)
  806ec0:	14fdf726 	beq	r2,r19,8066a0 <__svfscanf_r+0x5d0>
  806ec4:	00c02c0e 	bge	zero,r3,806f78 <__svfscanf_r+0xea8>
  806ec8:	81400017 	ldw	r5,0(r16)
  806ecc:	90800017 	ldw	r2,0(r18)
  806ed0:	28c00003 	ldbu	r3,0(r5)
  806ed4:	1887883a 	add	r3,r3,r2
  806ed8:	19000003 	ldbu	r4,0(r3)
  806edc:	2100020c 	andi	r4,r4,8
  806ee0:	203ff026 	beq	r4,zero,806ea4 <__svfscanf_r+0xdd4>
  806ee4:	8ce3883a 	add	r17,r17,r19
  806ee8:	003c8c06 	br	80611c <__svfscanf_r+0x4c>
  806eec:	d8c0a417 	ldw	r3,656(sp)
  806ef0:	1d400017 	ldw	r21,0(r3)
  806ef4:	a827883a 	mov	r19,r21
  806ef8:	00000e06 	br	806f34 <__svfscanf_r+0xe64>
  806efc:	80800117 	ldw	r2,4(r16)
  806f00:	d900a317 	ldw	r4,652(sp)
  806f04:	29800044 	addi	r6,r5,1
  806f08:	10ffffc4 	addi	r3,r2,-1
  806f0c:	213fffc4 	addi	r4,r4,-1
  806f10:	d900a315 	stw	r4,652(sp)
  806f14:	80c00115 	stw	r3,4(r16)
  806f18:	28800003 	ldbu	r2,0(r5)
  806f1c:	98800005 	stb	r2,0(r19)
  806f20:	81800015 	stw	r6,0(r16)
  806f24:	9cc00044 	addi	r19,r19,1
  806f28:	20000926 	beq	r4,zero,806f50 <__svfscanf_r+0xe80>
  806f2c:	80800117 	ldw	r2,4(r16)
  806f30:	0080170e 	bge	zero,r2,806f90 <__svfscanf_r+0xec0>
  806f34:	81400017 	ldw	r5,0(r16)
  806f38:	90800017 	ldw	r2,0(r18)
  806f3c:	28c00003 	ldbu	r3,0(r5)
  806f40:	1887883a 	add	r3,r3,r2
  806f44:	19000003 	ldbu	r4,0(r3)
  806f48:	2100020c 	andi	r4,r4,8
  806f4c:	203feb26 	beq	r4,zero,806efc <__svfscanf_r+0xe2c>
  806f50:	9d45c83a 	sub	r2,r19,r21
  806f54:	d8c0a217 	ldw	r3,648(sp)
  806f58:	88a3883a 	add	r17,r17,r2
  806f5c:	d880a417 	ldw	r2,656(sp)
  806f60:	18c00044 	addi	r3,r3,1
  806f64:	d8c0a215 	stw	r3,648(sp)
  806f68:	10800104 	addi	r2,r2,4
  806f6c:	d880a415 	stw	r2,656(sp)
  806f70:	98000005 	stb	zero,0(r19)
  806f74:	003c6906 	br	80611c <__svfscanf_r+0x4c>
  806f78:	b009883a 	mov	r4,r22
  806f7c:	800b883a 	mov	r5,r16
  806f80:	0803b500 	call	803b50 <__srefill_r>
  806f84:	103fd026 	beq	r2,zero,806ec8 <__svfscanf_r+0xdf8>
  806f88:	8ce3883a 	add	r17,r17,r19
  806f8c:	003c6306 	br	80611c <__svfscanf_r+0x4c>
  806f90:	b009883a 	mov	r4,r22
  806f94:	800b883a 	mov	r5,r16
  806f98:	0803b500 	call	803b50 <__srefill_r>
  806f9c:	103fe526 	beq	r2,zero,806f34 <__svfscanf_r+0xe64>
  806fa0:	003feb06 	br	806f50 <__svfscanf_r+0xe80>
  806fa4:	d900a317 	ldw	r4,652(sp)
  806fa8:	9d41e014 	ori	r21,r19,1920
  806fac:	2000821e 	bne	r4,zero,8071b8 <__svfscanf_r+0x10e8>
  806fb0:	d8c04404 	addi	r3,sp,272
  806fb4:	182f883a 	mov	r23,r3
  806fb8:	0039883a 	mov	fp,zero
  806fbc:	d8c0a615 	stw	r3,664(sp)
  806fc0:	d8009c15 	stw	zero,624(sp)
  806fc4:	d8009d15 	stw	zero,628(sp)
  806fc8:	d8009f15 	stw	zero,636(sp)
  806fcc:	d8009e15 	stw	zero,632(sp)
  806fd0:	003e9e06 	br	806a4c <__svfscanf_r+0x97c>
  806fd4:	d900a317 	ldw	r4,652(sp)
  806fd8:	9c836014 	ori	r18,r19,3456
  806fdc:	2000161e 	bne	r4,zero,807038 <__svfscanf_r+0xf68>
  806fe0:	d8804404 	addi	r2,sp,272
  806fe4:	d880a615 	stw	r2,664(sp)
  806fe8:	002f883a 	mov	r23,zero
  806fec:	1027883a 	mov	r19,r2
  806ff0:	9080400c 	andi	r2,r18,256
  806ff4:	10000926 	beq	r2,zero,80701c <__svfscanf_r+0xf4c>
  806ff8:	d8c0a617 	ldw	r3,664(sp)
  806ffc:	1cc0052e 	bgeu	r3,r19,807014 <__svfscanf_r+0xf44>
  807000:	9cffffc4 	addi	r19,r19,-1
  807004:	99400007 	ldb	r5,0(r19)
  807008:	b009883a 	mov	r4,r22
  80700c:	800d883a 	mov	r6,r16
  807010:	080cc600 	call	80cc60 <_ungetc_r>
  807014:	d900a617 	ldw	r4,664(sp)
  807018:	24fc6226 	beq	r4,r19,8061a4 <__svfscanf_r+0xd4>
  80701c:	9080040c 	andi	r2,r18,16
  807020:	10006726 	beq	r2,zero,8071c0 <__svfscanf_r+0x10f0>
  807024:	d8c0a617 	ldw	r3,664(sp)
  807028:	98c5c83a 	sub	r2,r19,r3
  80702c:	b885883a 	add	r2,r23,r2
  807030:	88a3883a 	add	r17,r17,r2
  807034:	003c3906 	br	80611c <__svfscanf_r+0x4c>
  807038:	002b883a 	mov	r21,zero
  80703c:	d8c04404 	addi	r3,sp,272
  807040:	d8c0a615 	stw	r3,664(sp)
  807044:	002f883a 	mov	r23,zero
  807048:	1827883a 	mov	r19,r3
  80704c:	81800017 	ldw	r6,0(r16)
  807050:	00c01344 	movi	r3,77
  807054:	31400003 	ldbu	r5,0(r6)
  807058:	28bff544 	addi	r2,r5,-43
  80705c:	10803fcc 	andi	r2,r2,255
  807060:	18bfe336 	bltu	r3,r2,806ff0 <__svfscanf_r+0xf20>
  807064:	1085883a 	add	r2,r2,r2
  807068:	1085883a 	add	r2,r2,r2
  80706c:	00c02034 	movhi	r3,128
  807070:	18dc2004 	addi	r3,r3,28800
  807074:	10c5883a 	add	r2,r2,r3
  807078:	11000017 	ldw	r4,0(r2)
  80707c:	2000683a 	jmp	r4
  807080:	00807214 	movui	r2,456
  807084:	00806ff0 	cmpltui	r2,zero,447
  807088:	00807214 	movui	r2,456
  80708c:	00806ff0 	cmpltui	r2,zero,447
  807090:	00806ff0 	cmpltui	r2,zero,447
  807094:	00807258 	cmpnei	r2,zero,457
  807098:	00807354 	movui	r2,461
  80709c:	00807354 	movui	r2,461
  8070a0:	00807354 	movui	r2,461
  8070a4:	00807354 	movui	r2,461
  8070a8:	00807354 	movui	r2,461
  8070ac:	00807354 	movui	r2,461
  8070b0:	00807354 	movui	r2,461
  8070b4:	0080737c 	xorhi	r2,zero,461
  8070b8:	0080737c 	xorhi	r2,zero,461
  8070bc:	00806ff0 	cmpltui	r2,zero,447
  8070c0:	00806ff0 	cmpltui	r2,zero,447
  8070c4:	00806ff0 	cmpltui	r2,zero,447
  8070c8:	00806ff0 	cmpltui	r2,zero,447
  8070cc:	00806ff0 	cmpltui	r2,zero,447
  8070d0:	00806ff0 	cmpltui	r2,zero,447
  8070d4:	00806ff0 	cmpltui	r2,zero,447
  8070d8:	008073ac 	andhi	r2,zero,462
  8070dc:	008073ac 	andhi	r2,zero,462
  8070e0:	008073ac 	andhi	r2,zero,462
  8070e4:	008073ac 	andhi	r2,zero,462
  8070e8:	008073ac 	andhi	r2,zero,462
  8070ec:	008073ac 	andhi	r2,zero,462
  8070f0:	00806ff0 	cmpltui	r2,zero,447
  8070f4:	00806ff0 	cmpltui	r2,zero,447
  8070f8:	00806ff0 	cmpltui	r2,zero,447
  8070fc:	00806ff0 	cmpltui	r2,zero,447
  807100:	00806ff0 	cmpltui	r2,zero,447
  807104:	00806ff0 	cmpltui	r2,zero,447
  807108:	00806ff0 	cmpltui	r2,zero,447
  80710c:	00806ff0 	cmpltui	r2,zero,447
  807110:	00806ff0 	cmpltui	r2,zero,447
  807114:	00806ff0 	cmpltui	r2,zero,447
  807118:	00806ff0 	cmpltui	r2,zero,447
  80711c:	00806ff0 	cmpltui	r2,zero,447
  807120:	00806ff0 	cmpltui	r2,zero,447
  807124:	00806ff0 	cmpltui	r2,zero,447
  807128:	00806ff0 	cmpltui	r2,zero,447
  80712c:	00806ff0 	cmpltui	r2,zero,447
  807130:	00806ff0 	cmpltui	r2,zero,447
  807134:	008073bc 	xorhi	r2,zero,462
  807138:	00806ff0 	cmpltui	r2,zero,447
  80713c:	00806ff0 	cmpltui	r2,zero,447
  807140:	00806ff0 	cmpltui	r2,zero,447
  807144:	00806ff0 	cmpltui	r2,zero,447
  807148:	00806ff0 	cmpltui	r2,zero,447
  80714c:	00806ff0 	cmpltui	r2,zero,447
  807150:	00806ff0 	cmpltui	r2,zero,447
  807154:	00806ff0 	cmpltui	r2,zero,447
  807158:	008073ac 	andhi	r2,zero,462
  80715c:	008073ac 	andhi	r2,zero,462
  807160:	008073ac 	andhi	r2,zero,462
  807164:	008073ac 	andhi	r2,zero,462
  807168:	008073ac 	andhi	r2,zero,462
  80716c:	008073ac 	andhi	r2,zero,462
  807170:	00806ff0 	cmpltui	r2,zero,447
  807174:	00806ff0 	cmpltui	r2,zero,447
  807178:	00806ff0 	cmpltui	r2,zero,447
  80717c:	00806ff0 	cmpltui	r2,zero,447
  807180:	00806ff0 	cmpltui	r2,zero,447
  807184:	00806ff0 	cmpltui	r2,zero,447
  807188:	00806ff0 	cmpltui	r2,zero,447
  80718c:	00806ff0 	cmpltui	r2,zero,447
  807190:	00806ff0 	cmpltui	r2,zero,447
  807194:	00806ff0 	cmpltui	r2,zero,447
  807198:	00806ff0 	cmpltui	r2,zero,447
  80719c:	00806ff0 	cmpltui	r2,zero,447
  8071a0:	00806ff0 	cmpltui	r2,zero,447
  8071a4:	00806ff0 	cmpltui	r2,zero,447
  8071a8:	00806ff0 	cmpltui	r2,zero,447
  8071ac:	00806ff0 	cmpltui	r2,zero,447
  8071b0:	00806ff0 	cmpltui	r2,zero,447
  8071b4:	008073bc 	xorhi	r2,zero,462
  8071b8:	000d883a 	mov	r6,zero
  8071bc:	003d9006 	br	806800 <__svfscanf_r+0x730>
  8071c0:	98000005 	stb	zero,0(r19)
  8071c4:	d8c0a017 	ldw	r3,640(sp)
  8071c8:	d940a617 	ldw	r5,664(sp)
  8071cc:	d9c0a117 	ldw	r7,644(sp)
  8071d0:	b009883a 	mov	r4,r22
  8071d4:	000d883a 	mov	r6,zero
  8071d8:	183ee83a 	callr	r3
  8071dc:	1007883a 	mov	r3,r2
  8071e0:	9080080c 	andi	r2,r18,32
  8071e4:	10004d1e 	bne	r2,zero,80731c <__svfscanf_r+0x124c>
  8071e8:	9080010c 	andi	r2,r18,4
  8071ec:	10003426 	beq	r2,zero,8072c0 <__svfscanf_r+0x11f0>
  8071f0:	d900a417 	ldw	r4,656(sp)
  8071f4:	20800017 	ldw	r2,0(r4)
  8071f8:	21000104 	addi	r4,r4,4
  8071fc:	d900a415 	stw	r4,656(sp)
  807200:	10c0000d 	sth	r3,0(r2)
  807204:	d880a217 	ldw	r2,648(sp)
  807208:	10800044 	addi	r2,r2,1
  80720c:	d880a215 	stw	r2,648(sp)
  807210:	003f8406 	br	807024 <__svfscanf_r+0xf54>
  807214:	9080200c 	andi	r2,r18,128
  807218:	103f7526 	beq	r2,zero,806ff0 <__svfscanf_r+0xf20>
  80721c:	00bfdfc4 	movi	r2,-129
  807220:	90a4703a 	and	r18,r18,r2
  807224:	99400005 	stb	r5,0(r19)
  807228:	9cc00044 	addi	r19,r19,1
  80722c:	80c00117 	ldw	r3,4(r16)
  807230:	18ffffc4 	addi	r3,r3,-1
  807234:	80c00115 	stw	r3,4(r16)
  807238:	00c0130e 	bge	zero,r3,807288 <__svfscanf_r+0x11b8>
  80723c:	31800044 	addi	r6,r6,1
  807240:	81800015 	stw	r6,0(r16)
  807244:	d880a317 	ldw	r2,652(sp)
  807248:	10bfffc4 	addi	r2,r2,-1
  80724c:	d880a315 	stw	r2,652(sp)
  807250:	103f7e1e 	bne	r2,zero,80704c <__svfscanf_r+0xf7c>
  807254:	003f6606 	br	806ff0 <__svfscanf_r+0xf20>
  807258:	9082000c 	andi	r2,r18,2048
  80725c:	103ff126 	beq	r2,zero,807224 <__svfscanf_r+0x1154>
  807260:	d8c0a117 	ldw	r3,644(sp)
  807264:	1800031e 	bne	r3,zero,807274 <__svfscanf_r+0x11a4>
  807268:	01000204 	movi	r4,8
  80726c:	94808014 	ori	r18,r18,512
  807270:	d900a115 	stw	r4,644(sp)
  807274:	9081000c 	andi	r2,r18,1024
  807278:	10000826 	beq	r2,zero,80729c <__svfscanf_r+0x11cc>
  80727c:	00be9fc4 	movi	r2,-1409
  807280:	90a4703a 	and	r18,r18,r2
  807284:	003fe706 	br	807224 <__svfscanf_r+0x1154>
  807288:	b009883a 	mov	r4,r22
  80728c:	800b883a 	mov	r5,r16
  807290:	0803b500 	call	803b50 <__srefill_r>
  807294:	103feb26 	beq	r2,zero,807244 <__svfscanf_r+0x1174>
  807298:	003f5506 	br	806ff0 <__svfscanf_r+0xf20>
  80729c:	a8000426 	beq	r21,zero,8072b0 <__svfscanf_r+0x11e0>
  8072a0:	d880a317 	ldw	r2,652(sp)
  8072a4:	ad7fffc4 	addi	r21,r21,-1
  8072a8:	10800044 	addi	r2,r2,1
  8072ac:	d880a315 	stw	r2,652(sp)
  8072b0:	00bf1fc4 	movi	r2,-897
  8072b4:	90a4703a 	and	r18,r18,r2
  8072b8:	bdc00044 	addi	r23,r23,1
  8072bc:	003fdb06 	br	80722c <__svfscanf_r+0x115c>
  8072c0:	9080004c 	andi	r2,r18,1
  8072c4:	1005003a 	cmpeq	r2,r2,zero
  8072c8:	10001426 	beq	r2,zero,80731c <__svfscanf_r+0x124c>
  8072cc:	9080008c 	andi	r2,r18,2
  8072d0:	10001226 	beq	r2,zero,80731c <__svfscanf_r+0x124c>
  8072d4:	d8c0a017 	ldw	r3,640(sp)
  8072d8:	00802074 	movhi	r2,129
  8072dc:	10b19004 	addi	r2,r2,-14784
  8072e0:	18801426 	beq	r3,r2,807334 <__svfscanf_r+0x1264>
  8072e4:	d9c0a117 	ldw	r7,644(sp)
  8072e8:	d940a617 	ldw	r5,664(sp)
  8072ec:	000d883a 	mov	r6,zero
  8072f0:	b009883a 	mov	r4,r22
  8072f4:	080c3280 	call	80c328 <_strtoll_r>
  8072f8:	100d883a 	mov	r6,r2
  8072fc:	180f883a 	mov	r7,r3
  807300:	d900a417 	ldw	r4,656(sp)
  807304:	20800017 	ldw	r2,0(r4)
  807308:	21000104 	addi	r4,r4,4
  80730c:	d900a415 	stw	r4,656(sp)
  807310:	11c00115 	stw	r7,4(r2)
  807314:	11800015 	stw	r6,0(r2)
  807318:	003fba06 	br	807204 <__svfscanf_r+0x1134>
  80731c:	d900a417 	ldw	r4,656(sp)
  807320:	20800017 	ldw	r2,0(r4)
  807324:	21000104 	addi	r4,r4,4
  807328:	d900a415 	stw	r4,656(sp)
  80732c:	10c00015 	stw	r3,0(r2)
  807330:	003fb406 	br	807204 <__svfscanf_r+0x1134>
  807334:	d9c0a117 	ldw	r7,644(sp)
  807338:	d940a617 	ldw	r5,664(sp)
  80733c:	000d883a 	mov	r6,zero
  807340:	b009883a 	mov	r4,r22
  807344:	080c8940 	call	80c894 <_strtoull_r>
  807348:	100d883a 	mov	r6,r2
  80734c:	180f883a 	mov	r7,r3
  807350:	003feb06 	br	807300 <__svfscanf_r+0x1230>
  807354:	d8c0a117 	ldw	r3,644(sp)
  807358:	18c5883a 	add	r2,r3,r3
  80735c:	00c02074 	movhi	r3,129
  807360:	18d33904 	addi	r3,r3,19684
  807364:	10c5883a 	add	r2,r2,r3
  807368:	1080000f 	ldh	r2,0(r2)
  80736c:	00fd1fc4 	movi	r3,-2945
  807370:	90e4703a 	and	r18,r18,r3
  807374:	d880a115 	stw	r2,644(sp)
  807378:	003faa06 	br	807224 <__svfscanf_r+0x1154>
  80737c:	d900a117 	ldw	r4,644(sp)
  807380:	00c02074 	movhi	r3,129
  807384:	18d33904 	addi	r3,r3,19684
  807388:	2105883a 	add	r2,r4,r4
  80738c:	10c5883a 	add	r2,r2,r3
  807390:	1080000f 	ldh	r2,0(r2)
  807394:	00c00204 	movi	r3,8
  807398:	d880a115 	stw	r2,644(sp)
  80739c:	18bf140e 	bge	r3,r2,806ff0 <__svfscanf_r+0xf20>
  8073a0:	00bd1fc4 	movi	r2,-2945
  8073a4:	90a4703a 	and	r18,r18,r2
  8073a8:	003f9e06 	br	807224 <__svfscanf_r+0x1154>
  8073ac:	d8c0a117 	ldw	r3,644(sp)
  8073b0:	00800284 	movi	r2,10
  8073b4:	10fffa16 	blt	r2,r3,8073a0 <__svfscanf_r+0x12d0>
  8073b8:	003f0d06 	br	806ff0 <__svfscanf_r+0xf20>
  8073bc:	90c1800c 	andi	r3,r18,1536
  8073c0:	00808004 	movi	r2,512
  8073c4:	18bf0a1e 	bne	r3,r2,806ff0 <__svfscanf_r+0xf20>
  8073c8:	00bf7fc4 	movi	r2,-513
  8073cc:	9084703a 	and	r2,r18,r2
  8073d0:	01000404 	movi	r4,16
  8073d4:	14814014 	ori	r18,r2,1280
  8073d8:	d900a115 	stw	r4,644(sp)
  8073dc:	003f9106 	br	807224 <__svfscanf_r+0x1154>
  8073e0:	d880a417 	ldw	r2,656(sp)
  8073e4:	dd400404 	addi	r21,sp,16
  8073e8:	14800017 	ldw	r18,0(r2)
  8073ec:	9027883a 	mov	r19,r18
  8073f0:	81000017 	ldw	r4,0(r16)
  8073f4:	20800003 	ldbu	r2,0(r4)
  8073f8:	a885883a 	add	r2,r21,r2
  8073fc:	10c00007 	ldb	r3,0(r2)
  807400:	18001426 	beq	r3,zero,807454 <__svfscanf_r+0x1384>
  807404:	d8c0a317 	ldw	r3,652(sp)
  807408:	80800117 	ldw	r2,4(r16)
  80740c:	21800044 	addi	r6,r4,1
  807410:	18ffffc4 	addi	r3,r3,-1
  807414:	d8c0a315 	stw	r3,652(sp)
  807418:	10ffffc4 	addi	r3,r2,-1
  80741c:	80c00115 	stw	r3,4(r16)
  807420:	20800003 	ldbu	r2,0(r4)
  807424:	90800005 	stb	r2,0(r18)
  807428:	d900a317 	ldw	r4,652(sp)
  80742c:	81800015 	stw	r6,0(r16)
  807430:	94800044 	addi	r18,r18,1
  807434:	20000726 	beq	r4,zero,807454 <__svfscanf_r+0x1384>
  807438:	80800117 	ldw	r2,4(r16)
  80743c:	00bfec16 	blt	zero,r2,8073f0 <__svfscanf_r+0x1320>
  807440:	b009883a 	mov	r4,r22
  807444:	800b883a 	mov	r5,r16
  807448:	0803b500 	call	803b50 <__srefill_r>
  80744c:	103fe826 	beq	r2,zero,8073f0 <__svfscanf_r+0x1320>
  807450:	9cbb7426 	beq	r19,r18,806224 <__svfscanf_r+0x154>
  807454:	94e7c83a 	sub	r19,r18,r19
  807458:	983b5226 	beq	r19,zero,8061a4 <__svfscanf_r+0xd4>
  80745c:	90000005 	stb	zero,0(r18)
  807460:	d880a417 	ldw	r2,656(sp)
  807464:	d8c0a217 	ldw	r3,648(sp)
  807468:	8ce3883a 	add	r17,r17,r19
  80746c:	10800104 	addi	r2,r2,4
  807470:	18c00044 	addi	r3,r3,1
  807474:	d880a415 	stw	r2,656(sp)
  807478:	d8c0a215 	stw	r3,648(sp)
  80747c:	003b2706 	br	80611c <__svfscanf_r+0x4c>
  807480:	9cc00414 	ori	r19,r19,16
  807484:	003b6e06 	br	806240 <__svfscanf_r+0x170>
  807488:	00c00404 	movi	r3,16
  80748c:	01002074 	movhi	r4,129
  807490:	21319004 	addi	r4,r4,-14784
  807494:	9cc08014 	ori	r19,r19,512
  807498:	054000c4 	movi	r21,3
  80749c:	d8c0a115 	stw	r3,644(sp)
  8074a0:	d900a015 	stw	r4,640(sp)
  8074a4:	003bf806 	br	806488 <__svfscanf_r+0x3b8>
  8074a8:	9880040c 	andi	r2,r19,16
  8074ac:	10001926 	beq	r2,zero,807514 <__svfscanf_r+0x1444>
  8074b0:	0027883a 	mov	r19,zero
  8074b4:	00000b06 	br	8074e4 <__svfscanf_r+0x1414>
  8074b8:	80800017 	ldw	r2,0(r16)
  8074bc:	b009883a 	mov	r4,r22
  8074c0:	800b883a 	mov	r5,r16
  8074c4:	148d883a 	add	r6,r2,r18
  8074c8:	81800015 	stw	r6,0(r16)
  8074cc:	9ca7883a 	add	r19,r19,r18
  8074d0:	0803b500 	call	803b50 <__srefill_r>
  8074d4:	103c711e 	bne	r2,zero,80669c <__svfscanf_r+0x5cc>
  8074d8:	d900a317 	ldw	r4,652(sp)
  8074dc:	2489c83a 	sub	r4,r4,r18
  8074e0:	d900a315 	stw	r4,652(sp)
  8074e4:	84800117 	ldw	r18,4(r16)
  8074e8:	d8c0a317 	ldw	r3,652(sp)
  8074ec:	90fff216 	blt	r18,r3,8074b8 <__svfscanf_r+0x13e8>
  8074f0:	d900a317 	ldw	r4,652(sp)
  8074f4:	80800017 	ldw	r2,0(r16)
  8074f8:	9927883a 	add	r19,r19,r4
  8074fc:	9107c83a 	sub	r3,r18,r4
  807500:	110d883a 	add	r6,r2,r4
  807504:	8ce3883a 	add	r17,r17,r19
  807508:	80c00115 	stw	r3,4(r16)
  80750c:	81800015 	stw	r6,0(r16)
  807510:	003b0206 	br	80611c <__svfscanf_r+0x4c>
  807514:	d880a417 	ldw	r2,656(sp)
  807518:	d980a317 	ldw	r6,652(sp)
  80751c:	01400044 	movi	r5,1
  807520:	11000017 	ldw	r4,0(r2)
  807524:	800f883a 	mov	r7,r16
  807528:	08094dc0 	call	8094dc <fread>
  80752c:	103b3d26 	beq	r2,zero,806224 <__svfscanf_r+0x154>
  807530:	d8c0a417 	ldw	r3,656(sp)
  807534:	d900a217 	ldw	r4,648(sp)
  807538:	88a3883a 	add	r17,r17,r2
  80753c:	18c00104 	addi	r3,r3,4
  807540:	21000044 	addi	r4,r4,1
  807544:	d8c0a415 	stw	r3,656(sp)
  807548:	d900a215 	stw	r4,648(sp)
  80754c:	003af306 	br	80611c <__svfscanf_r+0x4c>
  807550:	8080030b 	ldhu	r2,12(r16)
  807554:	1080100c 	andi	r2,r2,64
  807558:	103b1226 	beq	r2,zero,8061a4 <__svfscanf_r+0xd4>
  80755c:	003b3306 	br	80622c <__svfscanf_r+0x15c>
  807560:	983b1026 	beq	r19,zero,8061a4 <__svfscanf_r+0xd4>
  807564:	8ce3883a 	add	r17,r17,r19
  807568:	003aec06 	br	80611c <__svfscanf_r+0x4c>
  80756c:	983c9626 	beq	r19,zero,8067c8 <__svfscanf_r+0x6f8>
  807570:	9cffffc4 	addi	r19,r19,-1
  807574:	d8c04404 	addi	r3,sp,272
  807578:	1cc5883a 	add	r2,r3,r19
  80757c:	11400003 	ldbu	r5,0(r2)
  807580:	b009883a 	mov	r4,r22
  807584:	800d883a 	mov	r6,r16
  807588:	080cc600 	call	80cc60 <_ungetc_r>
  80758c:	003ff706 	br	80756c <__svfscanf_r+0x149c>
  807590:	00bfff84 	movi	r2,-2
  807594:	18bc7a1e 	bne	r3,r2,806780 <__svfscanf_r+0x6b0>
  807598:	003c8406 	br	8067ac <__svfscanf_r+0x6dc>
  80759c:	d900a417 	ldw	r4,656(sp)
  8075a0:	25400017 	ldw	r21,0(r4)
  8075a4:	21000104 	addi	r4,r4,4
  8075a8:	d900a415 	stw	r4,656(sp)
  8075ac:	003c4a06 	br	8066d8 <__svfscanf_r+0x608>
  8075b0:	00bfff84 	movi	r2,-2
  8075b4:	18bc0f1e 	bne	r3,r2,8065f4 <__svfscanf_r+0x524>
  8075b8:	003c1506 	br	806610 <__svfscanf_r+0x540>
  8075bc:	b009883a 	mov	r4,r22
  8075c0:	800b883a 	mov	r5,r16
  8075c4:	0803b500 	call	803b50 <__srefill_r>
  8075c8:	103c1326 	beq	r2,zero,806618 <__svfscanf_r+0x548>
  8075cc:	903b151e 	bne	r18,zero,806224 <__svfscanf_r+0x154>
  8075d0:	a83ad21e 	bne	r21,zero,80611c <__svfscanf_r+0x4c>
  8075d4:	d880a217 	ldw	r2,648(sp)
  8075d8:	10800044 	addi	r2,r2,1
  8075dc:	d880a215 	stw	r2,648(sp)
  8075e0:	003ace06 	br	80611c <__svfscanf_r+0x4c>
  8075e4:	0027883a 	mov	r19,zero
  8075e8:	003bdd06 	br	806560 <__svfscanf_r+0x490>
  8075ec:	9cc00114 	ori	r19,r19,4
  8075f0:	003b1306 	br	806240 <__svfscanf_r+0x170>
  8075f4:	05400104 	movi	r21,4
  8075f8:	003ba306 	br	806488 <__svfscanf_r+0x3b8>
  8075fc:	9cc00054 	ori	r19,r19,1
  807600:	00802074 	movhi	r2,129
  807604:	10b03004 	addi	r2,r2,-16192
  807608:	00c00284 	movi	r3,10
  80760c:	054000c4 	movi	r21,3
  807610:	d880a015 	stw	r2,640(sp)
  807614:	d8c0a115 	stw	r3,644(sp)
  807618:	003b9b06 	br	806488 <__svfscanf_r+0x3b8>
  80761c:	9cc01014 	ori	r19,r19,64
  807620:	002b883a 	mov	r21,zero
  807624:	003b9806 	br	806488 <__svfscanf_r+0x3b8>
  807628:	a00b883a 	mov	r5,r20
  80762c:	d9000404 	addi	r4,sp,16
  807630:	080a8d00 	call	80a8d0 <__sccl>
  807634:	1029883a 	mov	r20,r2
  807638:	9cc01014 	ori	r19,r19,64
  80763c:	05400044 	movi	r21,1
  807640:	003b9106 	br	806488 <__svfscanf_r+0x3b8>
  807644:	9cc00054 	ori	r19,r19,1
  807648:	00800204 	movi	r2,8
  80764c:	00c02074 	movhi	r3,129
  807650:	18f19004 	addi	r3,r3,-14784
  807654:	054000c4 	movi	r21,3
  807658:	d880a115 	stw	r2,644(sp)
  80765c:	d8c0a015 	stw	r3,640(sp)
  807660:	003b8906 	br	806488 <__svfscanf_r+0x3b8>
  807664:	9880040c 	andi	r2,r19,16
  807668:	103aac1e 	bne	r2,zero,80611c <__svfscanf_r+0x4c>
  80766c:	9880010c 	andi	r2,r19,4
  807670:	10002426 	beq	r2,zero,807704 <__svfscanf_r+0x1634>
  807674:	d900a417 	ldw	r4,656(sp)
  807678:	20800017 	ldw	r2,0(r4)
  80767c:	21000104 	addi	r4,r4,4
  807680:	d900a415 	stw	r4,656(sp)
  807684:	1440000d 	sth	r17,0(r2)
  807688:	003aa406 	br	80611c <__svfscanf_r+0x4c>
  80768c:	9cc00094 	ori	r19,r19,2
  807690:	003aeb06 	br	806240 <__svfscanf_r+0x170>
  807694:	05400084 	movi	r21,2
  807698:	003b7b06 	br	806488 <__svfscanf_r+0x3b8>
  80769c:	00800404 	movi	r2,16
  8076a0:	00c02074 	movhi	r3,129
  8076a4:	18f19004 	addi	r3,r3,-14784
  8076a8:	9cc08814 	ori	r19,r19,544
  8076ac:	054000c4 	movi	r21,3
  8076b0:	d880a115 	stw	r2,644(sp)
  8076b4:	d8c0a015 	stw	r3,640(sp)
  8076b8:	003b7306 	br	806488 <__svfscanf_r+0x3b8>
  8076bc:	0009883a 	mov	r4,zero
  8076c0:	080a9900 	call	80a990 <nanf>
  8076c4:	b8800015 	stw	r2,0(r23)
  8076c8:	003d2706 	br	806b68 <__svfscanf_r+0xa98>
  8076cc:	a0c00007 	ldb	r3,0(r20)
  8076d0:	00801b04 	movi	r2,108
  8076d4:	18800826 	beq	r3,r2,8076f8 <__svfscanf_r+0x1628>
  8076d8:	9cc00054 	ori	r19,r19,1
  8076dc:	003ad806 	br	806240 <__svfscanf_r+0x170>
  8076e0:	01002074 	movhi	r4,129
  8076e4:	21303004 	addi	r4,r4,-16192
  8076e8:	054000c4 	movi	r21,3
  8076ec:	d900a015 	stw	r4,640(sp)
  8076f0:	d800a115 	stw	zero,644(sp)
  8076f4:	003b6406 	br	806488 <__svfscanf_r+0x3b8>
  8076f8:	a5000044 	addi	r20,r20,1
  8076fc:	9cc00094 	ori	r19,r19,2
  807700:	003acf06 	br	806240 <__svfscanf_r+0x170>
  807704:	9880004c 	andi	r2,r19,1
  807708:	1005003a 	cmpeq	r2,r2,zero
  80770c:	10000a26 	beq	r2,zero,807738 <__svfscanf_r+0x1668>
  807710:	9880008c 	andi	r2,r19,2
  807714:	10000826 	beq	r2,zero,807738 <__svfscanf_r+0x1668>
  807718:	d900a417 	ldw	r4,656(sp)
  80771c:	8807d7fa 	srai	r3,r17,31
  807720:	20800017 	ldw	r2,0(r4)
  807724:	21000104 	addi	r4,r4,4
  807728:	d900a415 	stw	r4,656(sp)
  80772c:	14400015 	stw	r17,0(r2)
  807730:	10c00115 	stw	r3,4(r2)
  807734:	003a7906 	br	80611c <__svfscanf_r+0x4c>
  807738:	d8c0a417 	ldw	r3,656(sp)
  80773c:	18800017 	ldw	r2,0(r3)
  807740:	18c00104 	addi	r3,r3,4
  807744:	d8c0a415 	stw	r3,656(sp)
  807748:	14400015 	stw	r17,0(r2)
  80774c:	003a7306 	br	80611c <__svfscanf_r+0x4c>

00807750 <__svfscanf>:
  807750:	00802074 	movhi	r2,129
  807754:	109bd004 	addi	r2,r2,28480
  807758:	2013883a 	mov	r9,r4
  80775c:	11000017 	ldw	r4,0(r2)
  807760:	2805883a 	mov	r2,r5
  807764:	300f883a 	mov	r7,r6
  807768:	480b883a 	mov	r5,r9
  80776c:	100d883a 	mov	r6,r2
  807770:	08060d01 	jmpi	8060d0 <__svfscanf_r>

00807774 <_vfscanf_r>:
  807774:	defffb04 	addi	sp,sp,-20
  807778:	dcc00315 	stw	r19,12(sp)
  80777c:	dc800215 	stw	r18,8(sp)
  807780:	dc400115 	stw	r17,4(sp)
  807784:	dc000015 	stw	r16,0(sp)
  807788:	dfc00415 	stw	ra,16(sp)
  80778c:	2021883a 	mov	r16,r4
  807790:	2823883a 	mov	r17,r5
  807794:	3025883a 	mov	r18,r6
  807798:	3827883a 	mov	r19,r7
  80779c:	20000226 	beq	r4,zero,8077a8 <_vfscanf_r+0x34>
  8077a0:	20800e17 	ldw	r2,56(r4)
  8077a4:	10000b26 	beq	r2,zero,8077d4 <_vfscanf_r+0x60>
  8077a8:	8009883a 	mov	r4,r16
  8077ac:	880b883a 	mov	r5,r17
  8077b0:	900d883a 	mov	r6,r18
  8077b4:	980f883a 	mov	r7,r19
  8077b8:	dfc00417 	ldw	ra,16(sp)
  8077bc:	dcc00317 	ldw	r19,12(sp)
  8077c0:	dc800217 	ldw	r18,8(sp)
  8077c4:	dc400117 	ldw	r17,4(sp)
  8077c8:	dc000017 	ldw	r16,0(sp)
  8077cc:	dec00504 	addi	sp,sp,20
  8077d0:	08060d01 	jmpi	8060d0 <__svfscanf_r>
  8077d4:	08015140 	call	801514 <__sinit>
  8077d8:	003ff306 	br	8077a8 <_vfscanf_r+0x34>

008077dc <vfscanf>:
  8077dc:	defffb04 	addi	sp,sp,-20
  8077e0:	dcc00315 	stw	r19,12(sp)
  8077e4:	04c02074 	movhi	r19,129
  8077e8:	9cdbd004 	addi	r19,r19,28480
  8077ec:	98c00017 	ldw	r3,0(r19)
  8077f0:	dc800215 	stw	r18,8(sp)
  8077f4:	dc400115 	stw	r17,4(sp)
  8077f8:	dc000015 	stw	r16,0(sp)
  8077fc:	dfc00415 	stw	ra,16(sp)
  807800:	2021883a 	mov	r16,r4
  807804:	2823883a 	mov	r17,r5
  807808:	3025883a 	mov	r18,r6
  80780c:	18000326 	beq	r3,zero,80781c <vfscanf+0x40>
  807810:	18800e17 	ldw	r2,56(r3)
  807814:	1809883a 	mov	r4,r3
  807818:	10000b26 	beq	r2,zero,807848 <vfscanf+0x6c>
  80781c:	99000017 	ldw	r4,0(r19)
  807820:	800b883a 	mov	r5,r16
  807824:	880d883a 	mov	r6,r17
  807828:	900f883a 	mov	r7,r18
  80782c:	dfc00417 	ldw	ra,16(sp)
  807830:	dcc00317 	ldw	r19,12(sp)
  807834:	dc800217 	ldw	r18,8(sp)
  807838:	dc400117 	ldw	r17,4(sp)
  80783c:	dc000017 	ldw	r16,0(sp)
  807840:	dec00504 	addi	sp,sp,20
  807844:	08060d01 	jmpi	8060d0 <__svfscanf_r>
  807848:	08015140 	call	801514 <__sinit>
  80784c:	003ff306 	br	80781c <vfscanf+0x40>

00807850 <_write_r>:
  807850:	defffd04 	addi	sp,sp,-12
  807854:	dc000015 	stw	r16,0(sp)
  807858:	040020b4 	movhi	r16,130
  80785c:	84232604 	addi	r16,r16,-29544
  807860:	dc400115 	stw	r17,4(sp)
  807864:	80000015 	stw	zero,0(r16)
  807868:	2023883a 	mov	r17,r4
  80786c:	2809883a 	mov	r4,r5
  807870:	300b883a 	mov	r5,r6
  807874:	380d883a 	mov	r6,r7
  807878:	dfc00215 	stw	ra,8(sp)
  80787c:	08115640 	call	811564 <write>
  807880:	1007883a 	mov	r3,r2
  807884:	00bfffc4 	movi	r2,-1
  807888:	18800626 	beq	r3,r2,8078a4 <_write_r+0x54>
  80788c:	1805883a 	mov	r2,r3
  807890:	dfc00217 	ldw	ra,8(sp)
  807894:	dc400117 	ldw	r17,4(sp)
  807898:	dc000017 	ldw	r16,0(sp)
  80789c:	dec00304 	addi	sp,sp,12
  8078a0:	f800283a 	ret
  8078a4:	80800017 	ldw	r2,0(r16)
  8078a8:	103ff826 	beq	r2,zero,80788c <_write_r+0x3c>
  8078ac:	88800015 	stw	r2,0(r17)
  8078b0:	1805883a 	mov	r2,r3
  8078b4:	dfc00217 	ldw	ra,8(sp)
  8078b8:	dc400117 	ldw	r17,4(sp)
  8078bc:	dc000017 	ldw	r16,0(sp)
  8078c0:	dec00304 	addi	sp,sp,12
  8078c4:	f800283a 	ret

008078c8 <__swsetup_r>:
  8078c8:	00802074 	movhi	r2,129
  8078cc:	109bd004 	addi	r2,r2,28480
  8078d0:	10c00017 	ldw	r3,0(r2)
  8078d4:	defffd04 	addi	sp,sp,-12
  8078d8:	dc400115 	stw	r17,4(sp)
  8078dc:	dc000015 	stw	r16,0(sp)
  8078e0:	dfc00215 	stw	ra,8(sp)
  8078e4:	2023883a 	mov	r17,r4
  8078e8:	2821883a 	mov	r16,r5
  8078ec:	18000226 	beq	r3,zero,8078f8 <__swsetup_r+0x30>
  8078f0:	18800e17 	ldw	r2,56(r3)
  8078f4:	10001f26 	beq	r2,zero,807974 <__swsetup_r+0xac>
  8078f8:	8100030b 	ldhu	r4,12(r16)
  8078fc:	2080020c 	andi	r2,r4,8
  807900:	10002826 	beq	r2,zero,8079a4 <__swsetup_r+0xdc>
  807904:	81400417 	ldw	r5,16(r16)
  807908:	28001d26 	beq	r5,zero,807980 <__swsetup_r+0xb8>
  80790c:	2080004c 	andi	r2,r4,1
  807910:	1005003a 	cmpeq	r2,r2,zero
  807914:	10000b26 	beq	r2,zero,807944 <__swsetup_r+0x7c>
  807918:	2080008c 	andi	r2,r4,2
  80791c:	10001226 	beq	r2,zero,807968 <__swsetup_r+0xa0>
  807920:	0005883a 	mov	r2,zero
  807924:	80800215 	stw	r2,8(r16)
  807928:	28000b26 	beq	r5,zero,807958 <__swsetup_r+0x90>
  80792c:	0005883a 	mov	r2,zero
  807930:	dfc00217 	ldw	ra,8(sp)
  807934:	dc400117 	ldw	r17,4(sp)
  807938:	dc000017 	ldw	r16,0(sp)
  80793c:	dec00304 	addi	sp,sp,12
  807940:	f800283a 	ret
  807944:	80800517 	ldw	r2,20(r16)
  807948:	80000215 	stw	zero,8(r16)
  80794c:	0085c83a 	sub	r2,zero,r2
  807950:	80800615 	stw	r2,24(r16)
  807954:	283ff51e 	bne	r5,zero,80792c <__swsetup_r+0x64>
  807958:	2080200c 	andi	r2,r4,128
  80795c:	103ff326 	beq	r2,zero,80792c <__swsetup_r+0x64>
  807960:	00bfffc4 	movi	r2,-1
  807964:	003ff206 	br	807930 <__swsetup_r+0x68>
  807968:	80800517 	ldw	r2,20(r16)
  80796c:	80800215 	stw	r2,8(r16)
  807970:	003fed06 	br	807928 <__swsetup_r+0x60>
  807974:	1809883a 	mov	r4,r3
  807978:	08015140 	call	801514 <__sinit>
  80797c:	003fde06 	br	8078f8 <__swsetup_r+0x30>
  807980:	20c0a00c 	andi	r3,r4,640
  807984:	00808004 	movi	r2,512
  807988:	18bfe026 	beq	r3,r2,80790c <__swsetup_r+0x44>
  80798c:	8809883a 	mov	r4,r17
  807990:	800b883a 	mov	r5,r16
  807994:	080289c0 	call	80289c <__smakebuf_r>
  807998:	8100030b 	ldhu	r4,12(r16)
  80799c:	81400417 	ldw	r5,16(r16)
  8079a0:	003fda06 	br	80790c <__swsetup_r+0x44>
  8079a4:	2080040c 	andi	r2,r4,16
  8079a8:	103fed26 	beq	r2,zero,807960 <__swsetup_r+0x98>
  8079ac:	2080010c 	andi	r2,r4,4
  8079b0:	10001226 	beq	r2,zero,8079fc <__swsetup_r+0x134>
  8079b4:	81400c17 	ldw	r5,48(r16)
  8079b8:	28000526 	beq	r5,zero,8079d0 <__swsetup_r+0x108>
  8079bc:	80801004 	addi	r2,r16,64
  8079c0:	28800226 	beq	r5,r2,8079cc <__swsetup_r+0x104>
  8079c4:	8809883a 	mov	r4,r17
  8079c8:	0801a980 	call	801a98 <_free_r>
  8079cc:	80000c15 	stw	zero,48(r16)
  8079d0:	8080030b 	ldhu	r2,12(r16)
  8079d4:	81400417 	ldw	r5,16(r16)
  8079d8:	80000115 	stw	zero,4(r16)
  8079dc:	10bff6cc 	andi	r2,r2,65499
  8079e0:	8080030d 	sth	r2,12(r16)
  8079e4:	81400015 	stw	r5,0(r16)
  8079e8:	8080030b 	ldhu	r2,12(r16)
  8079ec:	10800214 	ori	r2,r2,8
  8079f0:	113fffcc 	andi	r4,r2,65535
  8079f4:	8080030d 	sth	r2,12(r16)
  8079f8:	003fc306 	br	807908 <__swsetup_r+0x40>
  8079fc:	81400417 	ldw	r5,16(r16)
  807a00:	003ff906 	br	8079e8 <__swsetup_r+0x120>

00807a04 <_close_r>:
  807a04:	defffd04 	addi	sp,sp,-12
  807a08:	dc000015 	stw	r16,0(sp)
  807a0c:	040020b4 	movhi	r16,130
  807a10:	84232604 	addi	r16,r16,-29544
  807a14:	dc400115 	stw	r17,4(sp)
  807a18:	80000015 	stw	zero,0(r16)
  807a1c:	2023883a 	mov	r17,r4
  807a20:	2809883a 	mov	r4,r5
  807a24:	dfc00215 	stw	ra,8(sp)
  807a28:	08105dc0 	call	8105dc <close>
  807a2c:	1007883a 	mov	r3,r2
  807a30:	00bfffc4 	movi	r2,-1
  807a34:	18800626 	beq	r3,r2,807a50 <_close_r+0x4c>
  807a38:	1805883a 	mov	r2,r3
  807a3c:	dfc00217 	ldw	ra,8(sp)
  807a40:	dc400117 	ldw	r17,4(sp)
  807a44:	dc000017 	ldw	r16,0(sp)
  807a48:	dec00304 	addi	sp,sp,12
  807a4c:	f800283a 	ret
  807a50:	80800017 	ldw	r2,0(r16)
  807a54:	103ff826 	beq	r2,zero,807a38 <_close_r+0x34>
  807a58:	88800015 	stw	r2,0(r17)
  807a5c:	1805883a 	mov	r2,r3
  807a60:	dfc00217 	ldw	ra,8(sp)
  807a64:	dc400117 	ldw	r17,4(sp)
  807a68:	dc000017 	ldw	r16,0(sp)
  807a6c:	dec00304 	addi	sp,sp,12
  807a70:	f800283a 	ret

00807a74 <quorem>:
  807a74:	28c00417 	ldw	r3,16(r5)
  807a78:	20800417 	ldw	r2,16(r4)
  807a7c:	defff604 	addi	sp,sp,-40
  807a80:	ddc00715 	stw	r23,28(sp)
  807a84:	dd400515 	stw	r21,20(sp)
  807a88:	dfc00915 	stw	ra,36(sp)
  807a8c:	df000815 	stw	fp,32(sp)
  807a90:	dd800615 	stw	r22,24(sp)
  807a94:	dd000415 	stw	r20,16(sp)
  807a98:	dcc00315 	stw	r19,12(sp)
  807a9c:	dc800215 	stw	r18,8(sp)
  807aa0:	dc400115 	stw	r17,4(sp)
  807aa4:	dc000015 	stw	r16,0(sp)
  807aa8:	202f883a 	mov	r23,r4
  807aac:	282b883a 	mov	r21,r5
  807ab0:	10c07416 	blt	r2,r3,807c84 <quorem+0x210>
  807ab4:	1c7fffc4 	addi	r17,r3,-1
  807ab8:	8c45883a 	add	r2,r17,r17
  807abc:	1085883a 	add	r2,r2,r2
  807ac0:	2c000504 	addi	r16,r5,20
  807ac4:	24c00504 	addi	r19,r4,20
  807ac8:	14ed883a 	add	r22,r2,r19
  807acc:	80a5883a 	add	r18,r16,r2
  807ad0:	b7000017 	ldw	fp,0(r22)
  807ad4:	91400017 	ldw	r5,0(r18)
  807ad8:	e009883a 	mov	r4,fp
  807adc:	29400044 	addi	r5,r5,1
  807ae0:	080fbe80 	call	80fbe8 <__udivsi3>
  807ae4:	1029883a 	mov	r20,r2
  807ae8:	10003c1e 	bne	r2,zero,807bdc <quorem+0x168>
  807aec:	a80b883a 	mov	r5,r21
  807af0:	b809883a 	mov	r4,r23
  807af4:	08099500 	call	809950 <__mcmp>
  807af8:	10002b16 	blt	r2,zero,807ba8 <quorem+0x134>
  807afc:	a5000044 	addi	r20,r20,1
  807b00:	980f883a 	mov	r7,r19
  807b04:	0011883a 	mov	r8,zero
  807b08:	0009883a 	mov	r4,zero
  807b0c:	81400017 	ldw	r5,0(r16)
  807b10:	38c00017 	ldw	r3,0(r7)
  807b14:	84000104 	addi	r16,r16,4
  807b18:	28bfffcc 	andi	r2,r5,65535
  807b1c:	2085883a 	add	r2,r4,r2
  807b20:	11bfffcc 	andi	r6,r2,65535
  807b24:	193fffcc 	andi	r4,r3,65535
  807b28:	1004d43a 	srli	r2,r2,16
  807b2c:	280ad43a 	srli	r5,r5,16
  807b30:	2189c83a 	sub	r4,r4,r6
  807b34:	2209883a 	add	r4,r4,r8
  807b38:	1806d43a 	srli	r3,r3,16
  807b3c:	288b883a 	add	r5,r5,r2
  807b40:	200dd43a 	srai	r6,r4,16
  807b44:	28bfffcc 	andi	r2,r5,65535
  807b48:	1887c83a 	sub	r3,r3,r2
  807b4c:	1987883a 	add	r3,r3,r6
  807b50:	3900000d 	sth	r4,0(r7)
  807b54:	38c0008d 	sth	r3,2(r7)
  807b58:	2808d43a 	srli	r4,r5,16
  807b5c:	39c00104 	addi	r7,r7,4
  807b60:	1811d43a 	srai	r8,r3,16
  807b64:	943fe92e 	bgeu	r18,r16,807b0c <quorem+0x98>
  807b68:	8c45883a 	add	r2,r17,r17
  807b6c:	1085883a 	add	r2,r2,r2
  807b70:	9885883a 	add	r2,r19,r2
  807b74:	10c00017 	ldw	r3,0(r2)
  807b78:	18000b1e 	bne	r3,zero,807ba8 <quorem+0x134>
  807b7c:	113fff04 	addi	r4,r2,-4
  807b80:	9900082e 	bgeu	r19,r4,807ba4 <quorem+0x130>
  807b84:	10bfff17 	ldw	r2,-4(r2)
  807b88:	10000326 	beq	r2,zero,807b98 <quorem+0x124>
  807b8c:	00000506 	br	807ba4 <quorem+0x130>
  807b90:	20800017 	ldw	r2,0(r4)
  807b94:	1000031e 	bne	r2,zero,807ba4 <quorem+0x130>
  807b98:	213fff04 	addi	r4,r4,-4
  807b9c:	8c7fffc4 	addi	r17,r17,-1
  807ba0:	993ffb36 	bltu	r19,r4,807b90 <quorem+0x11c>
  807ba4:	bc400415 	stw	r17,16(r23)
  807ba8:	a005883a 	mov	r2,r20
  807bac:	dfc00917 	ldw	ra,36(sp)
  807bb0:	df000817 	ldw	fp,32(sp)
  807bb4:	ddc00717 	ldw	r23,28(sp)
  807bb8:	dd800617 	ldw	r22,24(sp)
  807bbc:	dd400517 	ldw	r21,20(sp)
  807bc0:	dd000417 	ldw	r20,16(sp)
  807bc4:	dcc00317 	ldw	r19,12(sp)
  807bc8:	dc800217 	ldw	r18,8(sp)
  807bcc:	dc400117 	ldw	r17,4(sp)
  807bd0:	dc000017 	ldw	r16,0(sp)
  807bd4:	dec00a04 	addi	sp,sp,40
  807bd8:	f800283a 	ret
  807bdc:	980f883a 	mov	r7,r19
  807be0:	8011883a 	mov	r8,r16
  807be4:	0013883a 	mov	r9,zero
  807be8:	000d883a 	mov	r6,zero
  807bec:	40c00017 	ldw	r3,0(r8)
  807bf0:	39000017 	ldw	r4,0(r7)
  807bf4:	42000104 	addi	r8,r8,4
  807bf8:	18bfffcc 	andi	r2,r3,65535
  807bfc:	a085383a 	mul	r2,r20,r2
  807c00:	1806d43a 	srli	r3,r3,16
  807c04:	217fffcc 	andi	r5,r4,65535
  807c08:	3085883a 	add	r2,r6,r2
  807c0c:	11bfffcc 	andi	r6,r2,65535
  807c10:	a0c7383a 	mul	r3,r20,r3
  807c14:	1004d43a 	srli	r2,r2,16
  807c18:	298bc83a 	sub	r5,r5,r6
  807c1c:	2a4b883a 	add	r5,r5,r9
  807c20:	2008d43a 	srli	r4,r4,16
  807c24:	1887883a 	add	r3,r3,r2
  807c28:	280dd43a 	srai	r6,r5,16
  807c2c:	18bfffcc 	andi	r2,r3,65535
  807c30:	2089c83a 	sub	r4,r4,r2
  807c34:	2189883a 	add	r4,r4,r6
  807c38:	3900008d 	sth	r4,2(r7)
  807c3c:	3940000d 	sth	r5,0(r7)
  807c40:	180cd43a 	srli	r6,r3,16
  807c44:	39c00104 	addi	r7,r7,4
  807c48:	2013d43a 	srai	r9,r4,16
  807c4c:	923fe72e 	bgeu	r18,r8,807bec <quorem+0x178>
  807c50:	e03fa61e 	bne	fp,zero,807aec <quorem+0x78>
  807c54:	b0ffff04 	addi	r3,r22,-4
  807c58:	98c0082e 	bgeu	r19,r3,807c7c <quorem+0x208>
  807c5c:	b0bfff17 	ldw	r2,-4(r22)
  807c60:	10000326 	beq	r2,zero,807c70 <quorem+0x1fc>
  807c64:	00000506 	br	807c7c <quorem+0x208>
  807c68:	18800017 	ldw	r2,0(r3)
  807c6c:	1000031e 	bne	r2,zero,807c7c <quorem+0x208>
  807c70:	18ffff04 	addi	r3,r3,-4
  807c74:	8c7fffc4 	addi	r17,r17,-1
  807c78:	98fffb36 	bltu	r19,r3,807c68 <quorem+0x1f4>
  807c7c:	bc400415 	stw	r17,16(r23)
  807c80:	003f9a06 	br	807aec <quorem+0x78>
  807c84:	0005883a 	mov	r2,zero
  807c88:	003fc806 	br	807bac <quorem+0x138>

00807c8c <_dtoa_r>:
  807c8c:	22001017 	ldw	r8,64(r4)
  807c90:	deffda04 	addi	sp,sp,-152
  807c94:	dd402115 	stw	r21,132(sp)
  807c98:	dd002015 	stw	r20,128(sp)
  807c9c:	dc801e15 	stw	r18,120(sp)
  807ca0:	dc401d15 	stw	r17,116(sp)
  807ca4:	dfc02515 	stw	ra,148(sp)
  807ca8:	df002415 	stw	fp,144(sp)
  807cac:	ddc02315 	stw	r23,140(sp)
  807cb0:	dd802215 	stw	r22,136(sp)
  807cb4:	dcc01f15 	stw	r19,124(sp)
  807cb8:	dc001c15 	stw	r16,112(sp)
  807cbc:	d9001615 	stw	r4,88(sp)
  807cc0:	3023883a 	mov	r17,r6
  807cc4:	2829883a 	mov	r20,r5
  807cc8:	d9c01715 	stw	r7,92(sp)
  807ccc:	dc802817 	ldw	r18,160(sp)
  807cd0:	302b883a 	mov	r21,r6
  807cd4:	40000a26 	beq	r8,zero,807d00 <_dtoa_r+0x74>
  807cd8:	20801117 	ldw	r2,68(r4)
  807cdc:	400b883a 	mov	r5,r8
  807ce0:	40800115 	stw	r2,4(r8)
  807ce4:	20c01117 	ldw	r3,68(r4)
  807ce8:	00800044 	movi	r2,1
  807cec:	10c4983a 	sll	r2,r2,r3
  807cf0:	40800215 	stw	r2,8(r8)
  807cf4:	08097f40 	call	8097f4 <_Bfree>
  807cf8:	d8c01617 	ldw	r3,88(sp)
  807cfc:	18001015 	stw	zero,64(r3)
  807d00:	8800a316 	blt	r17,zero,807f90 <_dtoa_r+0x304>
  807d04:	90000015 	stw	zero,0(r18)
  807d08:	a8dffc2c 	andhi	r3,r21,32752
  807d0c:	009ffc34 	movhi	r2,32752
  807d10:	18809126 	beq	r3,r2,807f58 <_dtoa_r+0x2cc>
  807d14:	000d883a 	mov	r6,zero
  807d18:	000f883a 	mov	r7,zero
  807d1c:	a009883a 	mov	r4,r20
  807d20:	a80b883a 	mov	r5,r21
  807d24:	dd001215 	stw	r20,72(sp)
  807d28:	dd401315 	stw	r21,76(sp)
  807d2c:	080f42c0 	call	80f42c <__nedf2>
  807d30:	1000171e 	bne	r2,zero,807d90 <_dtoa_r+0x104>
  807d34:	d9802717 	ldw	r6,156(sp)
  807d38:	00800044 	movi	r2,1
  807d3c:	30800015 	stw	r2,0(r6)
  807d40:	d8802917 	ldw	r2,164(sp)
  807d44:	10029b26 	beq	r2,zero,8087b4 <_dtoa_r+0xb28>
  807d48:	d9002917 	ldw	r4,164(sp)
  807d4c:	00802074 	movhi	r2,129
  807d50:	10932e44 	addi	r2,r2,19641
  807d54:	10ffffc4 	addi	r3,r2,-1
  807d58:	20800015 	stw	r2,0(r4)
  807d5c:	1805883a 	mov	r2,r3
  807d60:	dfc02517 	ldw	ra,148(sp)
  807d64:	df002417 	ldw	fp,144(sp)
  807d68:	ddc02317 	ldw	r23,140(sp)
  807d6c:	dd802217 	ldw	r22,136(sp)
  807d70:	dd402117 	ldw	r21,132(sp)
  807d74:	dd002017 	ldw	r20,128(sp)
  807d78:	dcc01f17 	ldw	r19,124(sp)
  807d7c:	dc801e17 	ldw	r18,120(sp)
  807d80:	dc401d17 	ldw	r17,116(sp)
  807d84:	dc001c17 	ldw	r16,112(sp)
  807d88:	dec02604 	addi	sp,sp,152
  807d8c:	f800283a 	ret
  807d90:	d9001617 	ldw	r4,88(sp)
  807d94:	d9401217 	ldw	r5,72(sp)
  807d98:	d8800104 	addi	r2,sp,4
  807d9c:	a80d883a 	mov	r6,r21
  807da0:	d9c00204 	addi	r7,sp,8
  807da4:	d8800015 	stw	r2,0(sp)
  807da8:	0809e300 	call	809e30 <__d2b>
  807dac:	d8800715 	stw	r2,28(sp)
  807db0:	a804d53a 	srli	r2,r21,20
  807db4:	1101ffcc 	andi	r4,r2,2047
  807db8:	20008626 	beq	r4,zero,807fd4 <_dtoa_r+0x348>
  807dbc:	d8c01217 	ldw	r3,72(sp)
  807dc0:	00800434 	movhi	r2,16
  807dc4:	10bfffc4 	addi	r2,r2,-1
  807dc8:	ddc00117 	ldw	r23,4(sp)
  807dcc:	a884703a 	and	r2,r21,r2
  807dd0:	1811883a 	mov	r8,r3
  807dd4:	124ffc34 	orhi	r9,r2,16368
  807dd8:	25bf0044 	addi	r22,r4,-1023
  807ddc:	d8000815 	stw	zero,32(sp)
  807de0:	0005883a 	mov	r2,zero
  807de4:	00cffe34 	movhi	r3,16376
  807de8:	480b883a 	mov	r5,r9
  807dec:	4009883a 	mov	r4,r8
  807df0:	180f883a 	mov	r7,r3
  807df4:	100d883a 	mov	r6,r2
  807df8:	080ec940 	call	80ec94 <__subdf3>
  807dfc:	0218dbf4 	movhi	r8,25455
  807e00:	4210d844 	addi	r8,r8,17249
  807e04:	024ff4f4 	movhi	r9,16339
  807e08:	4a61e9c4 	addi	r9,r9,-30809
  807e0c:	480f883a 	mov	r7,r9
  807e10:	400d883a 	mov	r6,r8
  807e14:	180b883a 	mov	r5,r3
  807e18:	1009883a 	mov	r4,r2
  807e1c:	080ed880 	call	80ed88 <__muldf3>
  807e20:	0222d874 	movhi	r8,35681
  807e24:	42322cc4 	addi	r8,r8,-14157
  807e28:	024ff1f4 	movhi	r9,16327
  807e2c:	4a628a04 	addi	r9,r9,-30168
  807e30:	480f883a 	mov	r7,r9
  807e34:	400d883a 	mov	r6,r8
  807e38:	180b883a 	mov	r5,r3
  807e3c:	1009883a 	mov	r4,r2
  807e40:	080ed140 	call	80ed14 <__adddf3>
  807e44:	b009883a 	mov	r4,r22
  807e48:	1021883a 	mov	r16,r2
  807e4c:	1823883a 	mov	r17,r3
  807e50:	080f6d40 	call	80f6d4 <__floatsidf>
  807e54:	021427f4 	movhi	r8,20639
  807e58:	421e7ec4 	addi	r8,r8,31227
  807e5c:	024ff4f4 	movhi	r9,16339
  807e60:	4a5104c4 	addi	r9,r9,17427
  807e64:	480f883a 	mov	r7,r9
  807e68:	400d883a 	mov	r6,r8
  807e6c:	180b883a 	mov	r5,r3
  807e70:	1009883a 	mov	r4,r2
  807e74:	080ed880 	call	80ed88 <__muldf3>
  807e78:	180f883a 	mov	r7,r3
  807e7c:	880b883a 	mov	r5,r17
  807e80:	100d883a 	mov	r6,r2
  807e84:	8009883a 	mov	r4,r16
  807e88:	080ed140 	call	80ed14 <__adddf3>
  807e8c:	1009883a 	mov	r4,r2
  807e90:	180b883a 	mov	r5,r3
  807e94:	1021883a 	mov	r16,r2
  807e98:	1823883a 	mov	r17,r3
  807e9c:	080f7cc0 	call	80f7cc <__fixdfsi>
  807ea0:	000d883a 	mov	r6,zero
  807ea4:	000f883a 	mov	r7,zero
  807ea8:	8009883a 	mov	r4,r16
  807eac:	880b883a 	mov	r5,r17
  807eb0:	d8800d15 	stw	r2,52(sp)
  807eb4:	080f5c40 	call	80f5c4 <__ltdf2>
  807eb8:	10031716 	blt	r2,zero,808b18 <_dtoa_r+0xe8c>
  807ebc:	d8c00d17 	ldw	r3,52(sp)
  807ec0:	00800584 	movi	r2,22
  807ec4:	10c1482e 	bgeu	r2,r3,8083e8 <_dtoa_r+0x75c>
  807ec8:	01000044 	movi	r4,1
  807ecc:	d9000c15 	stw	r4,48(sp)
  807ed0:	bd85c83a 	sub	r2,r23,r22
  807ed4:	11bfffc4 	addi	r6,r2,-1
  807ed8:	30030b16 	blt	r6,zero,808b08 <_dtoa_r+0xe7c>
  807edc:	d9800a15 	stw	r6,40(sp)
  807ee0:	d8001115 	stw	zero,68(sp)
  807ee4:	d8c00d17 	ldw	r3,52(sp)
  807ee8:	1802ff16 	blt	r3,zero,808ae8 <_dtoa_r+0xe5c>
  807eec:	d9000a17 	ldw	r4,40(sp)
  807ef0:	d8c00915 	stw	r3,36(sp)
  807ef4:	d8001015 	stw	zero,64(sp)
  807ef8:	20c9883a 	add	r4,r4,r3
  807efc:	d9000a15 	stw	r4,40(sp)
  807f00:	d9001717 	ldw	r4,92(sp)
  807f04:	00800244 	movi	r2,9
  807f08:	11004636 	bltu	r2,r4,808024 <_dtoa_r+0x398>
  807f0c:	00800144 	movi	r2,5
  807f10:	11020416 	blt	r2,r4,808724 <_dtoa_r+0xa98>
  807f14:	04400044 	movi	r17,1
  807f18:	d8c01717 	ldw	r3,92(sp)
  807f1c:	00800144 	movi	r2,5
  807f20:	10c1ed36 	bltu	r2,r3,8086d8 <_dtoa_r+0xa4c>
  807f24:	18c5883a 	add	r2,r3,r3
  807f28:	1085883a 	add	r2,r2,r2
  807f2c:	00c02034 	movhi	r3,128
  807f30:	18dfd004 	addi	r3,r3,32576
  807f34:	10c5883a 	add	r2,r2,r3
  807f38:	11000017 	ldw	r4,0(r2)
  807f3c:	2000683a 	jmp	r4
  807f40:	0080802c 	andhi	r2,zero,512
  807f44:	0080802c 	andhi	r2,zero,512
  807f48:	00808a2c 	andhi	r2,zero,552
  807f4c:	00808a04 	movi	r2,552
  807f50:	00808a48 	cmpgei	r2,zero,553
  807f54:	00808a54 	movui	r2,553
  807f58:	d9002717 	ldw	r4,156(sp)
  807f5c:	0089c3c4 	movi	r2,9999
  807f60:	20800015 	stw	r2,0(r4)
  807f64:	a0001026 	beq	r20,zero,807fa8 <_dtoa_r+0x31c>
  807f68:	00c02074 	movhi	r3,129
  807f6c:	18d3e604 	addi	r3,r3,20376
  807f70:	d9802917 	ldw	r6,164(sp)
  807f74:	303f7926 	beq	r6,zero,807d5c <_dtoa_r+0xd0>
  807f78:	188000c7 	ldb	r2,3(r3)
  807f7c:	190000c4 	addi	r4,r3,3
  807f80:	1000101e 	bne	r2,zero,807fc4 <_dtoa_r+0x338>
  807f84:	d8802917 	ldw	r2,164(sp)
  807f88:	11000015 	stw	r4,0(r2)
  807f8c:	003f7306 	br	807d5c <_dtoa_r+0xd0>
  807f90:	00a00034 	movhi	r2,32768
  807f94:	10bfffc4 	addi	r2,r2,-1
  807f98:	00c00044 	movi	r3,1
  807f9c:	88aa703a 	and	r21,r17,r2
  807fa0:	90c00015 	stw	r3,0(r18)
  807fa4:	003f5806 	br	807d08 <_dtoa_r+0x7c>
  807fa8:	00800434 	movhi	r2,16
  807fac:	10bfffc4 	addi	r2,r2,-1
  807fb0:	a884703a 	and	r2,r21,r2
  807fb4:	103fec1e 	bne	r2,zero,807f68 <_dtoa_r+0x2dc>
  807fb8:	00c02074 	movhi	r3,129
  807fbc:	18d3e304 	addi	r3,r3,20364
  807fc0:	003feb06 	br	807f70 <_dtoa_r+0x2e4>
  807fc4:	d8802917 	ldw	r2,164(sp)
  807fc8:	19000204 	addi	r4,r3,8
  807fcc:	11000015 	stw	r4,0(r2)
  807fd0:	003f6206 	br	807d5c <_dtoa_r+0xd0>
  807fd4:	ddc00117 	ldw	r23,4(sp)
  807fd8:	d8800217 	ldw	r2,8(sp)
  807fdc:	01000804 	movi	r4,32
  807fe0:	b8c10c84 	addi	r3,r23,1074
  807fe4:	18a3883a 	add	r17,r3,r2
  807fe8:	2441b80e 	bge	r4,r17,8086cc <_dtoa_r+0xa40>
  807fec:	00c01004 	movi	r3,64
  807ff0:	1c47c83a 	sub	r3,r3,r17
  807ff4:	88bff804 	addi	r2,r17,-32
  807ff8:	a8c6983a 	sll	r3,r21,r3
  807ffc:	a084d83a 	srl	r2,r20,r2
  808000:	1888b03a 	or	r4,r3,r2
  808004:	080f9180 	call	80f918 <__floatunsidf>
  808008:	1011883a 	mov	r8,r2
  80800c:	00bf8434 	movhi	r2,65040
  808010:	01000044 	movi	r4,1
  808014:	10d3883a 	add	r9,r2,r3
  808018:	8dbef344 	addi	r22,r17,-1075
  80801c:	d9000815 	stw	r4,32(sp)
  808020:	003f6f06 	br	807de0 <_dtoa_r+0x154>
  808024:	d8001715 	stw	zero,92(sp)
  808028:	04400044 	movi	r17,1
  80802c:	00bfffc4 	movi	r2,-1
  808030:	00c00044 	movi	r3,1
  808034:	d8800e15 	stw	r2,56(sp)
  808038:	d8002615 	stw	zero,152(sp)
  80803c:	d8800f15 	stw	r2,60(sp)
  808040:	d8c00b15 	stw	r3,44(sp)
  808044:	1021883a 	mov	r16,r2
  808048:	d8801617 	ldw	r2,88(sp)
  80804c:	10001115 	stw	zero,68(r2)
  808050:	d8801617 	ldw	r2,88(sp)
  808054:	11401117 	ldw	r5,68(r2)
  808058:	1009883a 	mov	r4,r2
  80805c:	0809d740 	call	809d74 <_Balloc>
  808060:	d8c01617 	ldw	r3,88(sp)
  808064:	d8800515 	stw	r2,20(sp)
  808068:	18801015 	stw	r2,64(r3)
  80806c:	00800384 	movi	r2,14
  808070:	14006836 	bltu	r2,r16,808214 <_dtoa_r+0x588>
  808074:	8805003a 	cmpeq	r2,r17,zero
  808078:	1000661e 	bne	r2,zero,808214 <_dtoa_r+0x588>
  80807c:	d9000d17 	ldw	r4,52(sp)
  808080:	0102300e 	bge	zero,r4,808944 <_dtoa_r+0xcb8>
  808084:	208003cc 	andi	r2,r4,15
  808088:	100490fa 	slli	r2,r2,3
  80808c:	2025d13a 	srai	r18,r4,4
  808090:	00c02074 	movhi	r3,129
  808094:	18d3f704 	addi	r3,r3,20444
  808098:	10c5883a 	add	r2,r2,r3
  80809c:	90c0040c 	andi	r3,r18,16
  8080a0:	14000017 	ldw	r16,0(r2)
  8080a4:	14400117 	ldw	r17,4(r2)
  8080a8:	18036a1e 	bne	r3,zero,808e54 <_dtoa_r+0x11c8>
  8080ac:	05800084 	movi	r22,2
  8080b0:	90001026 	beq	r18,zero,8080f4 <_dtoa_r+0x468>
  8080b4:	04c02074 	movhi	r19,129
  8080b8:	9cd42904 	addi	r19,r19,20644
  8080bc:	9080004c 	andi	r2,r18,1
  8080c0:	1005003a 	cmpeq	r2,r2,zero
  8080c4:	1000081e 	bne	r2,zero,8080e8 <_dtoa_r+0x45c>
  8080c8:	99800017 	ldw	r6,0(r19)
  8080cc:	99c00117 	ldw	r7,4(r19)
  8080d0:	880b883a 	mov	r5,r17
  8080d4:	8009883a 	mov	r4,r16
  8080d8:	080ed880 	call	80ed88 <__muldf3>
  8080dc:	1021883a 	mov	r16,r2
  8080e0:	b5800044 	addi	r22,r22,1
  8080e4:	1823883a 	mov	r17,r3
  8080e8:	9025d07a 	srai	r18,r18,1
  8080ec:	9cc00204 	addi	r19,r19,8
  8080f0:	903ff21e 	bne	r18,zero,8080bc <_dtoa_r+0x430>
  8080f4:	a80b883a 	mov	r5,r21
  8080f8:	a009883a 	mov	r4,r20
  8080fc:	880f883a 	mov	r7,r17
  808100:	800d883a 	mov	r6,r16
  808104:	080f14c0 	call	80f14c <__divdf3>
  808108:	1029883a 	mov	r20,r2
  80810c:	182b883a 	mov	r21,r3
  808110:	d8c00c17 	ldw	r3,48(sp)
  808114:	1805003a 	cmpeq	r2,r3,zero
  808118:	1000081e 	bne	r2,zero,80813c <_dtoa_r+0x4b0>
  80811c:	0005883a 	mov	r2,zero
  808120:	00cffc34 	movhi	r3,16368
  808124:	180f883a 	mov	r7,r3
  808128:	a009883a 	mov	r4,r20
  80812c:	a80b883a 	mov	r5,r21
  808130:	100d883a 	mov	r6,r2
  808134:	080f5c40 	call	80f5c4 <__ltdf2>
  808138:	1003fe16 	blt	r2,zero,809134 <_dtoa_r+0x14a8>
  80813c:	b009883a 	mov	r4,r22
  808140:	080f6d40 	call	80f6d4 <__floatsidf>
  808144:	180b883a 	mov	r5,r3
  808148:	1009883a 	mov	r4,r2
  80814c:	a00d883a 	mov	r6,r20
  808150:	a80f883a 	mov	r7,r21
  808154:	080ed880 	call	80ed88 <__muldf3>
  808158:	0011883a 	mov	r8,zero
  80815c:	02500734 	movhi	r9,16412
  808160:	1009883a 	mov	r4,r2
  808164:	180b883a 	mov	r5,r3
  808168:	480f883a 	mov	r7,r9
  80816c:	400d883a 	mov	r6,r8
  808170:	080ed140 	call	80ed14 <__adddf3>
  808174:	d9000f17 	ldw	r4,60(sp)
  808178:	102d883a 	mov	r22,r2
  80817c:	00bf3034 	movhi	r2,64704
  808180:	18b9883a 	add	fp,r3,r2
  808184:	e02f883a 	mov	r23,fp
  808188:	20028f1e 	bne	r4,zero,808bc8 <_dtoa_r+0xf3c>
  80818c:	0005883a 	mov	r2,zero
  808190:	00d00534 	movhi	r3,16404
  808194:	a009883a 	mov	r4,r20
  808198:	a80b883a 	mov	r5,r21
  80819c:	180f883a 	mov	r7,r3
  8081a0:	100d883a 	mov	r6,r2
  8081a4:	080ec940 	call	80ec94 <__subdf3>
  8081a8:	1009883a 	mov	r4,r2
  8081ac:	e00f883a 	mov	r7,fp
  8081b0:	180b883a 	mov	r5,r3
  8081b4:	b00d883a 	mov	r6,r22
  8081b8:	1025883a 	mov	r18,r2
  8081bc:	1827883a 	mov	r19,r3
  8081c0:	080f4b40 	call	80f4b4 <__gtdf2>
  8081c4:	00834f16 	blt	zero,r2,808f04 <_dtoa_r+0x1278>
  8081c8:	e0e0003c 	xorhi	r3,fp,32768
  8081cc:	9009883a 	mov	r4,r18
  8081d0:	980b883a 	mov	r5,r19
  8081d4:	180f883a 	mov	r7,r3
  8081d8:	b00d883a 	mov	r6,r22
  8081dc:	080f5c40 	call	80f5c4 <__ltdf2>
  8081e0:	1000080e 	bge	r2,zero,808204 <_dtoa_r+0x578>
  8081e4:	0027883a 	mov	r19,zero
  8081e8:	0025883a 	mov	r18,zero
  8081ec:	d8802617 	ldw	r2,152(sp)
  8081f0:	df000517 	ldw	fp,20(sp)
  8081f4:	d8000615 	stw	zero,24(sp)
  8081f8:	0084303a 	nor	r2,zero,r2
  8081fc:	d8800d15 	stw	r2,52(sp)
  808200:	00019b06 	br	808870 <_dtoa_r+0xbe4>
  808204:	d9801217 	ldw	r6,72(sp)
  808208:	d8801317 	ldw	r2,76(sp)
  80820c:	3029883a 	mov	r20,r6
  808210:	102b883a 	mov	r21,r2
  808214:	d8c00217 	ldw	r3,8(sp)
  808218:	18008516 	blt	r3,zero,808430 <_dtoa_r+0x7a4>
  80821c:	d9000d17 	ldw	r4,52(sp)
  808220:	00800384 	movi	r2,14
  808224:	11008216 	blt	r2,r4,808430 <_dtoa_r+0x7a4>
  808228:	200490fa 	slli	r2,r4,3
  80822c:	d9802617 	ldw	r6,152(sp)
  808230:	00c02074 	movhi	r3,129
  808234:	18d3f704 	addi	r3,r3,20444
  808238:	10c5883a 	add	r2,r2,r3
  80823c:	14800017 	ldw	r18,0(r2)
  808240:	14c00117 	ldw	r19,4(r2)
  808244:	30031e16 	blt	r6,zero,808ec0 <_dtoa_r+0x1234>
  808248:	d9000517 	ldw	r4,20(sp)
  80824c:	d8c00f17 	ldw	r3,60(sp)
  808250:	a823883a 	mov	r17,r21
  808254:	a021883a 	mov	r16,r20
  808258:	192b883a 	add	r21,r3,r4
  80825c:	2039883a 	mov	fp,r4
  808260:	00000f06 	br	8082a0 <_dtoa_r+0x614>
  808264:	0005883a 	mov	r2,zero
  808268:	00d00934 	movhi	r3,16420
  80826c:	5009883a 	mov	r4,r10
  808270:	580b883a 	mov	r5,r11
  808274:	180f883a 	mov	r7,r3
  808278:	100d883a 	mov	r6,r2
  80827c:	080ed880 	call	80ed88 <__muldf3>
  808280:	180b883a 	mov	r5,r3
  808284:	000d883a 	mov	r6,zero
  808288:	000f883a 	mov	r7,zero
  80828c:	1009883a 	mov	r4,r2
  808290:	1021883a 	mov	r16,r2
  808294:	1823883a 	mov	r17,r3
  808298:	080f42c0 	call	80f42c <__nedf2>
  80829c:	10004526 	beq	r2,zero,8083b4 <_dtoa_r+0x728>
  8082a0:	900d883a 	mov	r6,r18
  8082a4:	980f883a 	mov	r7,r19
  8082a8:	8009883a 	mov	r4,r16
  8082ac:	880b883a 	mov	r5,r17
  8082b0:	080f14c0 	call	80f14c <__divdf3>
  8082b4:	180b883a 	mov	r5,r3
  8082b8:	1009883a 	mov	r4,r2
  8082bc:	080f7cc0 	call	80f7cc <__fixdfsi>
  8082c0:	1009883a 	mov	r4,r2
  8082c4:	1029883a 	mov	r20,r2
  8082c8:	080f6d40 	call	80f6d4 <__floatsidf>
  8082cc:	180f883a 	mov	r7,r3
  8082d0:	9009883a 	mov	r4,r18
  8082d4:	980b883a 	mov	r5,r19
  8082d8:	100d883a 	mov	r6,r2
  8082dc:	080ed880 	call	80ed88 <__muldf3>
  8082e0:	180f883a 	mov	r7,r3
  8082e4:	880b883a 	mov	r5,r17
  8082e8:	8009883a 	mov	r4,r16
  8082ec:	100d883a 	mov	r6,r2
  8082f0:	080ec940 	call	80ec94 <__subdf3>
  8082f4:	1015883a 	mov	r10,r2
  8082f8:	a0800c04 	addi	r2,r20,48
  8082fc:	e0800005 	stb	r2,0(fp)
  808300:	e7000044 	addi	fp,fp,1
  808304:	1817883a 	mov	r11,r3
  808308:	e57fd61e 	bne	fp,r21,808264 <_dtoa_r+0x5d8>
  80830c:	500d883a 	mov	r6,r10
  808310:	180f883a 	mov	r7,r3
  808314:	5009883a 	mov	r4,r10
  808318:	180b883a 	mov	r5,r3
  80831c:	080ed140 	call	80ed14 <__adddf3>
  808320:	100d883a 	mov	r6,r2
  808324:	9009883a 	mov	r4,r18
  808328:	980b883a 	mov	r5,r19
  80832c:	180f883a 	mov	r7,r3
  808330:	1021883a 	mov	r16,r2
  808334:	1823883a 	mov	r17,r3
  808338:	080f5c40 	call	80f5c4 <__ltdf2>
  80833c:	10000816 	blt	r2,zero,808360 <_dtoa_r+0x6d4>
  808340:	980b883a 	mov	r5,r19
  808344:	800d883a 	mov	r6,r16
  808348:	880f883a 	mov	r7,r17
  80834c:	9009883a 	mov	r4,r18
  808350:	080f3a40 	call	80f3a4 <__eqdf2>
  808354:	1000171e 	bne	r2,zero,8083b4 <_dtoa_r+0x728>
  808358:	a080004c 	andi	r2,r20,1
  80835c:	10001526 	beq	r2,zero,8083b4 <_dtoa_r+0x728>
  808360:	d8800d17 	ldw	r2,52(sp)
  808364:	d8800415 	stw	r2,16(sp)
  808368:	e009883a 	mov	r4,fp
  80836c:	213fffc4 	addi	r4,r4,-1
  808370:	20c00007 	ldb	r3,0(r4)
  808374:	00800e44 	movi	r2,57
  808378:	1880081e 	bne	r3,r2,80839c <_dtoa_r+0x710>
  80837c:	d8800517 	ldw	r2,20(sp)
  808380:	113ffa1e 	bne	r2,r4,80836c <_dtoa_r+0x6e0>
  808384:	d8c00417 	ldw	r3,16(sp)
  808388:	d9800517 	ldw	r6,20(sp)
  80838c:	00800c04 	movi	r2,48
  808390:	18c00044 	addi	r3,r3,1
  808394:	d8c00415 	stw	r3,16(sp)
  808398:	30800005 	stb	r2,0(r6)
  80839c:	20800003 	ldbu	r2,0(r4)
  8083a0:	d8c00417 	ldw	r3,16(sp)
  8083a4:	27000044 	addi	fp,r4,1
  8083a8:	10800044 	addi	r2,r2,1
  8083ac:	d8c00d15 	stw	r3,52(sp)
  8083b0:	20800005 	stb	r2,0(r4)
  8083b4:	d9001617 	ldw	r4,88(sp)
  8083b8:	d9400717 	ldw	r5,28(sp)
  8083bc:	08097f40 	call	8097f4 <_Bfree>
  8083c0:	e0000005 	stb	zero,0(fp)
  8083c4:	d9800d17 	ldw	r6,52(sp)
  8083c8:	d8c02717 	ldw	r3,156(sp)
  8083cc:	d9002917 	ldw	r4,164(sp)
  8083d0:	30800044 	addi	r2,r6,1
  8083d4:	18800015 	stw	r2,0(r3)
  8083d8:	20029c26 	beq	r4,zero,808e4c <_dtoa_r+0x11c0>
  8083dc:	d8c00517 	ldw	r3,20(sp)
  8083e0:	27000015 	stw	fp,0(r4)
  8083e4:	003e5d06 	br	807d5c <_dtoa_r+0xd0>
  8083e8:	d9800d17 	ldw	r6,52(sp)
  8083ec:	00c02074 	movhi	r3,129
  8083f0:	18d3f704 	addi	r3,r3,20444
  8083f4:	d9001217 	ldw	r4,72(sp)
  8083f8:	300490fa 	slli	r2,r6,3
  8083fc:	d9401317 	ldw	r5,76(sp)
  808400:	10c5883a 	add	r2,r2,r3
  808404:	12000017 	ldw	r8,0(r2)
  808408:	12400117 	ldw	r9,4(r2)
  80840c:	400d883a 	mov	r6,r8
  808410:	480f883a 	mov	r7,r9
  808414:	080f5c40 	call	80f5c4 <__ltdf2>
  808418:	1000030e 	bge	r2,zero,808428 <_dtoa_r+0x79c>
  80841c:	d8800d17 	ldw	r2,52(sp)
  808420:	10bfffc4 	addi	r2,r2,-1
  808424:	d8800d15 	stw	r2,52(sp)
  808428:	d8000c15 	stw	zero,48(sp)
  80842c:	003ea806 	br	807ed0 <_dtoa_r+0x244>
  808430:	d9000b17 	ldw	r4,44(sp)
  808434:	202cc03a 	cmpne	r22,r4,zero
  808438:	b000c71e 	bne	r22,zero,808758 <_dtoa_r+0xacc>
  80843c:	dc001117 	ldw	r16,68(sp)
  808440:	dc801017 	ldw	r18,64(sp)
  808444:	0027883a 	mov	r19,zero
  808448:	04000b0e 	bge	zero,r16,808478 <_dtoa_r+0x7ec>
  80844c:	d8c00a17 	ldw	r3,40(sp)
  808450:	00c0090e 	bge	zero,r3,808478 <_dtoa_r+0x7ec>
  808454:	8005883a 	mov	r2,r16
  808458:	1c011316 	blt	r3,r16,8088a8 <_dtoa_r+0xc1c>
  80845c:	d9000a17 	ldw	r4,40(sp)
  808460:	d9801117 	ldw	r6,68(sp)
  808464:	80a1c83a 	sub	r16,r16,r2
  808468:	2089c83a 	sub	r4,r4,r2
  80846c:	308dc83a 	sub	r6,r6,r2
  808470:	d9000a15 	stw	r4,40(sp)
  808474:	d9801115 	stw	r6,68(sp)
  808478:	d8801017 	ldw	r2,64(sp)
  80847c:	0080150e 	bge	zero,r2,8084d4 <_dtoa_r+0x848>
  808480:	d8c00b17 	ldw	r3,44(sp)
  808484:	1805003a 	cmpeq	r2,r3,zero
  808488:	1001c91e 	bne	r2,zero,808bb0 <_dtoa_r+0xf24>
  80848c:	04800e0e 	bge	zero,r18,8084c8 <_dtoa_r+0x83c>
  808490:	d9001617 	ldw	r4,88(sp)
  808494:	980b883a 	mov	r5,r19
  808498:	900d883a 	mov	r6,r18
  80849c:	080a5a80 	call	80a5a8 <__pow5mult>
  8084a0:	d9001617 	ldw	r4,88(sp)
  8084a4:	d9800717 	ldw	r6,28(sp)
  8084a8:	100b883a 	mov	r5,r2
  8084ac:	1027883a 	mov	r19,r2
  8084b0:	080a2840 	call	80a284 <__multiply>
  8084b4:	d9001617 	ldw	r4,88(sp)
  8084b8:	d9400717 	ldw	r5,28(sp)
  8084bc:	1023883a 	mov	r17,r2
  8084c0:	08097f40 	call	8097f4 <_Bfree>
  8084c4:	dc400715 	stw	r17,28(sp)
  8084c8:	d9001017 	ldw	r4,64(sp)
  8084cc:	248dc83a 	sub	r6,r4,r18
  8084d0:	30010e1e 	bne	r6,zero,80890c <_dtoa_r+0xc80>
  8084d4:	d9001617 	ldw	r4,88(sp)
  8084d8:	04400044 	movi	r17,1
  8084dc:	880b883a 	mov	r5,r17
  8084e0:	080a46c0 	call	80a46c <__i2b>
  8084e4:	d9800917 	ldw	r6,36(sp)
  8084e8:	1025883a 	mov	r18,r2
  8084ec:	0180040e 	bge	zero,r6,808500 <_dtoa_r+0x874>
  8084f0:	d9001617 	ldw	r4,88(sp)
  8084f4:	100b883a 	mov	r5,r2
  8084f8:	080a5a80 	call	80a5a8 <__pow5mult>
  8084fc:	1025883a 	mov	r18,r2
  808500:	d8801717 	ldw	r2,92(sp)
  808504:	8880f30e 	bge	r17,r2,8088d4 <_dtoa_r+0xc48>
  808508:	0023883a 	mov	r17,zero
  80850c:	d9800917 	ldw	r6,36(sp)
  808510:	30019e1e 	bne	r6,zero,808b8c <_dtoa_r+0xf00>
  808514:	00c00044 	movi	r3,1
  808518:	d9000a17 	ldw	r4,40(sp)
  80851c:	20c5883a 	add	r2,r4,r3
  808520:	10c007cc 	andi	r3,r2,31
  808524:	1800841e 	bne	r3,zero,808738 <_dtoa_r+0xaac>
  808528:	00800704 	movi	r2,28
  80852c:	d9000a17 	ldw	r4,40(sp)
  808530:	d9801117 	ldw	r6,68(sp)
  808534:	80a1883a 	add	r16,r16,r2
  808538:	2089883a 	add	r4,r4,r2
  80853c:	308d883a 	add	r6,r6,r2
  808540:	d9000a15 	stw	r4,40(sp)
  808544:	d9801115 	stw	r6,68(sp)
  808548:	d8801117 	ldw	r2,68(sp)
  80854c:	0080050e 	bge	zero,r2,808564 <_dtoa_r+0x8d8>
  808550:	d9400717 	ldw	r5,28(sp)
  808554:	d9001617 	ldw	r4,88(sp)
  808558:	100d883a 	mov	r6,r2
  80855c:	080a1380 	call	80a138 <__lshift>
  808560:	d8800715 	stw	r2,28(sp)
  808564:	d8c00a17 	ldw	r3,40(sp)
  808568:	00c0050e 	bge	zero,r3,808580 <_dtoa_r+0x8f4>
  80856c:	d9001617 	ldw	r4,88(sp)
  808570:	900b883a 	mov	r5,r18
  808574:	180d883a 	mov	r6,r3
  808578:	080a1380 	call	80a138 <__lshift>
  80857c:	1025883a 	mov	r18,r2
  808580:	d9000c17 	ldw	r4,48(sp)
  808584:	2005003a 	cmpeq	r2,r4,zero
  808588:	10016f26 	beq	r2,zero,808b48 <_dtoa_r+0xebc>
  80858c:	d9000f17 	ldw	r4,60(sp)
  808590:	0102170e 	bge	zero,r4,808df0 <_dtoa_r+0x1164>
  808594:	d9800b17 	ldw	r6,44(sp)
  808598:	3005003a 	cmpeq	r2,r6,zero
  80859c:	1000881e 	bne	r2,zero,8087c0 <_dtoa_r+0xb34>
  8085a0:	0400050e 	bge	zero,r16,8085b8 <_dtoa_r+0x92c>
  8085a4:	d9001617 	ldw	r4,88(sp)
  8085a8:	980b883a 	mov	r5,r19
  8085ac:	800d883a 	mov	r6,r16
  8085b0:	080a1380 	call	80a138 <__lshift>
  8085b4:	1027883a 	mov	r19,r2
  8085b8:	8804c03a 	cmpne	r2,r17,zero
  8085bc:	1002541e 	bne	r2,zero,808f10 <_dtoa_r+0x1284>
  8085c0:	980b883a 	mov	r5,r19
  8085c4:	dd800517 	ldw	r22,20(sp)
  8085c8:	dcc00615 	stw	r19,24(sp)
  8085cc:	a700004c 	andi	fp,r20,1
  8085d0:	2827883a 	mov	r19,r5
  8085d4:	d9000717 	ldw	r4,28(sp)
  8085d8:	900b883a 	mov	r5,r18
  8085dc:	0807a740 	call	807a74 <quorem>
  8085e0:	d9000717 	ldw	r4,28(sp)
  8085e4:	d9400617 	ldw	r5,24(sp)
  8085e8:	1023883a 	mov	r17,r2
  8085ec:	8dc00c04 	addi	r23,r17,48
  8085f0:	08099500 	call	809950 <__mcmp>
  8085f4:	d9001617 	ldw	r4,88(sp)
  8085f8:	900b883a 	mov	r5,r18
  8085fc:	980d883a 	mov	r6,r19
  808600:	1029883a 	mov	r20,r2
  808604:	0809fac0 	call	809fac <__mdiff>
  808608:	102b883a 	mov	r21,r2
  80860c:	10800317 	ldw	r2,12(r2)
  808610:	1001281e 	bne	r2,zero,808ab4 <_dtoa_r+0xe28>
  808614:	d9000717 	ldw	r4,28(sp)
  808618:	a80b883a 	mov	r5,r21
  80861c:	08099500 	call	809950 <__mcmp>
  808620:	d9001617 	ldw	r4,88(sp)
  808624:	1021883a 	mov	r16,r2
  808628:	a80b883a 	mov	r5,r21
  80862c:	08097f40 	call	8097f4 <_Bfree>
  808630:	8000041e 	bne	r16,zero,808644 <_dtoa_r+0x9b8>
  808634:	d8801717 	ldw	r2,92(sp)
  808638:	1000021e 	bne	r2,zero,808644 <_dtoa_r+0x9b8>
  80863c:	e004c03a 	cmpne	r2,fp,zero
  808640:	10011726 	beq	r2,zero,808aa0 <_dtoa_r+0xe14>
  808644:	a0010616 	blt	r20,zero,808a60 <_dtoa_r+0xdd4>
  808648:	a000041e 	bne	r20,zero,80865c <_dtoa_r+0x9d0>
  80864c:	d8c01717 	ldw	r3,92(sp)
  808650:	1800021e 	bne	r3,zero,80865c <_dtoa_r+0x9d0>
  808654:	e004c03a 	cmpne	r2,fp,zero
  808658:	10010126 	beq	r2,zero,808a60 <_dtoa_r+0xdd4>
  80865c:	04023d16 	blt	zero,r16,808f54 <_dtoa_r+0x12c8>
  808660:	b5c00005 	stb	r23,0(r22)
  808664:	d9800517 	ldw	r6,20(sp)
  808668:	d9000f17 	ldw	r4,60(sp)
  80866c:	b5800044 	addi	r22,r22,1
  808670:	3105883a 	add	r2,r6,r4
  808674:	b0806526 	beq	r22,r2,80880c <_dtoa_r+0xb80>
  808678:	d9400717 	ldw	r5,28(sp)
  80867c:	d9001617 	ldw	r4,88(sp)
  808680:	01800284 	movi	r6,10
  808684:	000f883a 	mov	r7,zero
  808688:	080a4a80 	call	80a4a8 <__multadd>
  80868c:	d8800715 	stw	r2,28(sp)
  808690:	d8800617 	ldw	r2,24(sp)
  808694:	14c10c26 	beq	r2,r19,808ac8 <_dtoa_r+0xe3c>
  808698:	d9400617 	ldw	r5,24(sp)
  80869c:	d9001617 	ldw	r4,88(sp)
  8086a0:	01800284 	movi	r6,10
  8086a4:	000f883a 	mov	r7,zero
  8086a8:	080a4a80 	call	80a4a8 <__multadd>
  8086ac:	d9001617 	ldw	r4,88(sp)
  8086b0:	980b883a 	mov	r5,r19
  8086b4:	01800284 	movi	r6,10
  8086b8:	000f883a 	mov	r7,zero
  8086bc:	d8800615 	stw	r2,24(sp)
  8086c0:	080a4a80 	call	80a4a8 <__multadd>
  8086c4:	1027883a 	mov	r19,r2
  8086c8:	003fc206 	br	8085d4 <_dtoa_r+0x948>
  8086cc:	2445c83a 	sub	r2,r4,r17
  8086d0:	a088983a 	sll	r4,r20,r2
  8086d4:	003e4b06 	br	808004 <_dtoa_r+0x378>
  8086d8:	01bfffc4 	movi	r6,-1
  8086dc:	00800044 	movi	r2,1
  8086e0:	d9800e15 	stw	r6,56(sp)
  8086e4:	d9800f15 	stw	r6,60(sp)
  8086e8:	d8800b15 	stw	r2,44(sp)
  8086ec:	d8c01617 	ldw	r3,88(sp)
  8086f0:	008005c4 	movi	r2,23
  8086f4:	18001115 	stw	zero,68(r3)
  8086f8:	1580082e 	bgeu	r2,r22,80871c <_dtoa_r+0xa90>
  8086fc:	00c00104 	movi	r3,4
  808700:	0009883a 	mov	r4,zero
  808704:	18c7883a 	add	r3,r3,r3
  808708:	18800504 	addi	r2,r3,20
  80870c:	21000044 	addi	r4,r4,1
  808710:	b0bffc2e 	bgeu	r22,r2,808704 <_dtoa_r+0xa78>
  808714:	d9801617 	ldw	r6,88(sp)
  808718:	31001115 	stw	r4,68(r6)
  80871c:	dc000f17 	ldw	r16,60(sp)
  808720:	003e4b06 	br	808050 <_dtoa_r+0x3c4>
  808724:	d9801717 	ldw	r6,92(sp)
  808728:	0023883a 	mov	r17,zero
  80872c:	31bfff04 	addi	r6,r6,-4
  808730:	d9801715 	stw	r6,92(sp)
  808734:	003df806 	br	807f18 <_dtoa_r+0x28c>
  808738:	00800804 	movi	r2,32
  80873c:	10c9c83a 	sub	r4,r2,r3
  808740:	00c00104 	movi	r3,4
  808744:	19005a16 	blt	r3,r4,8088b0 <_dtoa_r+0xc24>
  808748:	008000c4 	movi	r2,3
  80874c:	113f7e16 	blt	r2,r4,808548 <_dtoa_r+0x8bc>
  808750:	20800704 	addi	r2,r4,28
  808754:	003f7506 	br	80852c <_dtoa_r+0x8a0>
  808758:	d9801717 	ldw	r6,92(sp)
  80875c:	00800044 	movi	r2,1
  808760:	1180a10e 	bge	r2,r6,8089e8 <_dtoa_r+0xd5c>
  808764:	d9800f17 	ldw	r6,60(sp)
  808768:	d8c01017 	ldw	r3,64(sp)
  80876c:	30bfffc4 	addi	r2,r6,-1
  808770:	1881c616 	blt	r3,r2,808e8c <_dtoa_r+0x1200>
  808774:	18a5c83a 	sub	r18,r3,r2
  808778:	d8800f17 	ldw	r2,60(sp)
  80877c:	10026216 	blt	r2,zero,809108 <_dtoa_r+0x147c>
  808780:	dc001117 	ldw	r16,68(sp)
  808784:	1007883a 	mov	r3,r2
  808788:	d9800a17 	ldw	r6,40(sp)
  80878c:	d8801117 	ldw	r2,68(sp)
  808790:	d9001617 	ldw	r4,88(sp)
  808794:	30cd883a 	add	r6,r6,r3
  808798:	10c5883a 	add	r2,r2,r3
  80879c:	01400044 	movi	r5,1
  8087a0:	d9800a15 	stw	r6,40(sp)
  8087a4:	d8801115 	stw	r2,68(sp)
  8087a8:	080a46c0 	call	80a46c <__i2b>
  8087ac:	1027883a 	mov	r19,r2
  8087b0:	003f2506 	br	808448 <_dtoa_r+0x7bc>
  8087b4:	00c02074 	movhi	r3,129
  8087b8:	18d32e04 	addi	r3,r3,19640
  8087bc:	003d6706 	br	807d5c <_dtoa_r+0xd0>
  8087c0:	dd800517 	ldw	r22,20(sp)
  8087c4:	04000044 	movi	r16,1
  8087c8:	00000706 	br	8087e8 <_dtoa_r+0xb5c>
  8087cc:	d9400717 	ldw	r5,28(sp)
  8087d0:	d9001617 	ldw	r4,88(sp)
  8087d4:	01800284 	movi	r6,10
  8087d8:	000f883a 	mov	r7,zero
  8087dc:	080a4a80 	call	80a4a8 <__multadd>
  8087e0:	d8800715 	stw	r2,28(sp)
  8087e4:	84000044 	addi	r16,r16,1
  8087e8:	d9000717 	ldw	r4,28(sp)
  8087ec:	900b883a 	mov	r5,r18
  8087f0:	0807a740 	call	807a74 <quorem>
  8087f4:	15c00c04 	addi	r23,r2,48
  8087f8:	b5c00005 	stb	r23,0(r22)
  8087fc:	d8c00f17 	ldw	r3,60(sp)
  808800:	b5800044 	addi	r22,r22,1
  808804:	80fff116 	blt	r16,r3,8087cc <_dtoa_r+0xb40>
  808808:	d8000615 	stw	zero,24(sp)
  80880c:	d9400717 	ldw	r5,28(sp)
  808810:	d9001617 	ldw	r4,88(sp)
  808814:	01800044 	movi	r6,1
  808818:	080a1380 	call	80a138 <__lshift>
  80881c:	1009883a 	mov	r4,r2
  808820:	900b883a 	mov	r5,r18
  808824:	d8800715 	stw	r2,28(sp)
  808828:	08099500 	call	809950 <__mcmp>
  80882c:	00803c0e 	bge	zero,r2,808920 <_dtoa_r+0xc94>
  808830:	b009883a 	mov	r4,r22
  808834:	213fffc4 	addi	r4,r4,-1
  808838:	21400003 	ldbu	r5,0(r4)
  80883c:	00800e44 	movi	r2,57
  808840:	28c03fcc 	andi	r3,r5,255
  808844:	18c0201c 	xori	r3,r3,128
  808848:	18ffe004 	addi	r3,r3,-128
  80884c:	1881981e 	bne	r3,r2,808eb0 <_dtoa_r+0x1224>
  808850:	d9800517 	ldw	r6,20(sp)
  808854:	21bff71e 	bne	r4,r6,808834 <_dtoa_r+0xba8>
  808858:	d8800d17 	ldw	r2,52(sp)
  80885c:	37000044 	addi	fp,r6,1
  808860:	10800044 	addi	r2,r2,1
  808864:	d8800d15 	stw	r2,52(sp)
  808868:	00800c44 	movi	r2,49
  80886c:	30800005 	stb	r2,0(r6)
  808870:	d9001617 	ldw	r4,88(sp)
  808874:	900b883a 	mov	r5,r18
  808878:	08097f40 	call	8097f4 <_Bfree>
  80887c:	983ecd26 	beq	r19,zero,8083b4 <_dtoa_r+0x728>
  808880:	d8c00617 	ldw	r3,24(sp)
  808884:	18000426 	beq	r3,zero,808898 <_dtoa_r+0xc0c>
  808888:	1cc00326 	beq	r3,r19,808898 <_dtoa_r+0xc0c>
  80888c:	d9001617 	ldw	r4,88(sp)
  808890:	180b883a 	mov	r5,r3
  808894:	08097f40 	call	8097f4 <_Bfree>
  808898:	d9001617 	ldw	r4,88(sp)
  80889c:	980b883a 	mov	r5,r19
  8088a0:	08097f40 	call	8097f4 <_Bfree>
  8088a4:	003ec306 	br	8083b4 <_dtoa_r+0x728>
  8088a8:	1805883a 	mov	r2,r3
  8088ac:	003eeb06 	br	80845c <_dtoa_r+0x7d0>
  8088b0:	d9800a17 	ldw	r6,40(sp)
  8088b4:	d8c01117 	ldw	r3,68(sp)
  8088b8:	20bfff04 	addi	r2,r4,-4
  8088bc:	308d883a 	add	r6,r6,r2
  8088c0:	1887883a 	add	r3,r3,r2
  8088c4:	80a1883a 	add	r16,r16,r2
  8088c8:	d9800a15 	stw	r6,40(sp)
  8088cc:	d8c01115 	stw	r3,68(sp)
  8088d0:	003f1d06 	br	808548 <_dtoa_r+0x8bc>
  8088d4:	a03f0c1e 	bne	r20,zero,808508 <_dtoa_r+0x87c>
  8088d8:	00800434 	movhi	r2,16
  8088dc:	10bfffc4 	addi	r2,r2,-1
  8088e0:	a884703a 	and	r2,r21,r2
  8088e4:	103f081e 	bne	r2,zero,808508 <_dtoa_r+0x87c>
  8088e8:	a89ffc2c 	andhi	r2,r21,32752
  8088ec:	103f0626 	beq	r2,zero,808508 <_dtoa_r+0x87c>
  8088f0:	d8c01117 	ldw	r3,68(sp)
  8088f4:	d9000a17 	ldw	r4,40(sp)
  8088f8:	18c00044 	addi	r3,r3,1
  8088fc:	21000044 	addi	r4,r4,1
  808900:	d8c01115 	stw	r3,68(sp)
  808904:	d9000a15 	stw	r4,40(sp)
  808908:	003f0006 	br	80850c <_dtoa_r+0x880>
  80890c:	d9400717 	ldw	r5,28(sp)
  808910:	d9001617 	ldw	r4,88(sp)
  808914:	080a5a80 	call	80a5a8 <__pow5mult>
  808918:	d8800715 	stw	r2,28(sp)
  80891c:	003eed06 	br	8084d4 <_dtoa_r+0x848>
  808920:	1000021e 	bne	r2,zero,80892c <_dtoa_r+0xca0>
  808924:	b880004c 	andi	r2,r23,1
  808928:	103fc11e 	bne	r2,zero,808830 <_dtoa_r+0xba4>
  80892c:	b5bfffc4 	addi	r22,r22,-1
  808930:	b0c00007 	ldb	r3,0(r22)
  808934:	00800c04 	movi	r2,48
  808938:	18bffc26 	beq	r3,r2,80892c <_dtoa_r+0xca0>
  80893c:	b7000044 	addi	fp,r22,1
  808940:	003fcb06 	br	808870 <_dtoa_r+0xbe4>
  808944:	d9800d17 	ldw	r6,52(sp)
  808948:	018fc83a 	sub	r7,zero,r6
  80894c:	3801f726 	beq	r7,zero,80912c <_dtoa_r+0x14a0>
  808950:	398003cc 	andi	r6,r7,15
  808954:	300c90fa 	slli	r6,r6,3
  808958:	01402074 	movhi	r5,129
  80895c:	2953f704 	addi	r5,r5,20444
  808960:	d9001217 	ldw	r4,72(sp)
  808964:	314d883a 	add	r6,r6,r5
  808968:	30c00117 	ldw	r3,4(r6)
  80896c:	30800017 	ldw	r2,0(r6)
  808970:	d9401317 	ldw	r5,76(sp)
  808974:	3821d13a 	srai	r16,r7,4
  808978:	100d883a 	mov	r6,r2
  80897c:	180f883a 	mov	r7,r3
  808980:	080ed880 	call	80ed88 <__muldf3>
  808984:	1011883a 	mov	r8,r2
  808988:	1813883a 	mov	r9,r3
  80898c:	1029883a 	mov	r20,r2
  808990:	182b883a 	mov	r21,r3
  808994:	8001e526 	beq	r16,zero,80912c <_dtoa_r+0x14a0>
  808998:	05800084 	movi	r22,2
  80899c:	04402074 	movhi	r17,129
  8089a0:	8c542904 	addi	r17,r17,20644
  8089a4:	8080004c 	andi	r2,r16,1
  8089a8:	1005003a 	cmpeq	r2,r2,zero
  8089ac:	1000081e 	bne	r2,zero,8089d0 <_dtoa_r+0xd44>
  8089b0:	89800017 	ldw	r6,0(r17)
  8089b4:	89c00117 	ldw	r7,4(r17)
  8089b8:	480b883a 	mov	r5,r9
  8089bc:	4009883a 	mov	r4,r8
  8089c0:	080ed880 	call	80ed88 <__muldf3>
  8089c4:	1011883a 	mov	r8,r2
  8089c8:	b5800044 	addi	r22,r22,1
  8089cc:	1813883a 	mov	r9,r3
  8089d0:	8021d07a 	srai	r16,r16,1
  8089d4:	8c400204 	addi	r17,r17,8
  8089d8:	803ff21e 	bne	r16,zero,8089a4 <_dtoa_r+0xd18>
  8089dc:	4029883a 	mov	r20,r8
  8089e0:	482b883a 	mov	r21,r9
  8089e4:	003dca06 	br	808110 <_dtoa_r+0x484>
  8089e8:	d9000817 	ldw	r4,32(sp)
  8089ec:	2005003a 	cmpeq	r2,r4,zero
  8089f0:	1001f61e 	bne	r2,zero,8091cc <_dtoa_r+0x1540>
  8089f4:	dc001117 	ldw	r16,68(sp)
  8089f8:	dc801017 	ldw	r18,64(sp)
  8089fc:	18c10cc4 	addi	r3,r3,1075
  808a00:	003f6106 	br	808788 <_dtoa_r+0xafc>
  808a04:	d8000b15 	stw	zero,44(sp)
  808a08:	d9802617 	ldw	r6,152(sp)
  808a0c:	d8c00d17 	ldw	r3,52(sp)
  808a10:	30800044 	addi	r2,r6,1
  808a14:	18ad883a 	add	r22,r3,r2
  808a18:	b13fffc4 	addi	r4,r22,-1
  808a1c:	d9000e15 	stw	r4,56(sp)
  808a20:	0581f60e 	bge	zero,r22,8091fc <_dtoa_r+0x1570>
  808a24:	dd800f15 	stw	r22,60(sp)
  808a28:	003f3006 	br	8086ec <_dtoa_r+0xa60>
  808a2c:	d8000b15 	stw	zero,44(sp)
  808a30:	d9002617 	ldw	r4,152(sp)
  808a34:	0101eb0e 	bge	zero,r4,8091e4 <_dtoa_r+0x1558>
  808a38:	202d883a 	mov	r22,r4
  808a3c:	d9000e15 	stw	r4,56(sp)
  808a40:	d9000f15 	stw	r4,60(sp)
  808a44:	003f2906 	br	8086ec <_dtoa_r+0xa60>
  808a48:	01800044 	movi	r6,1
  808a4c:	d9800b15 	stw	r6,44(sp)
  808a50:	003ff706 	br	808a30 <_dtoa_r+0xda4>
  808a54:	01000044 	movi	r4,1
  808a58:	d9000b15 	stw	r4,44(sp)
  808a5c:	003fea06 	br	808a08 <_dtoa_r+0xd7c>
  808a60:	04000c0e 	bge	zero,r16,808a94 <_dtoa_r+0xe08>
  808a64:	d9400717 	ldw	r5,28(sp)
  808a68:	d9001617 	ldw	r4,88(sp)
  808a6c:	01800044 	movi	r6,1
  808a70:	080a1380 	call	80a138 <__lshift>
  808a74:	1009883a 	mov	r4,r2
  808a78:	900b883a 	mov	r5,r18
  808a7c:	d8800715 	stw	r2,28(sp)
  808a80:	08099500 	call	809950 <__mcmp>
  808a84:	0081e00e 	bge	zero,r2,809208 <_dtoa_r+0x157c>
  808a88:	bdc00044 	addi	r23,r23,1
  808a8c:	00800e84 	movi	r2,58
  808a90:	b881a226 	beq	r23,r2,80911c <_dtoa_r+0x1490>
  808a94:	b7000044 	addi	fp,r22,1
  808a98:	b5c00005 	stb	r23,0(r22)
  808a9c:	003f7406 	br	808870 <_dtoa_r+0xbe4>
  808aa0:	00800e44 	movi	r2,57
  808aa4:	b8819d26 	beq	r23,r2,80911c <_dtoa_r+0x1490>
  808aa8:	053ffa0e 	bge	zero,r20,808a94 <_dtoa_r+0xe08>
  808aac:	8dc00c44 	addi	r23,r17,49
  808ab0:	003ff806 	br	808a94 <_dtoa_r+0xe08>
  808ab4:	d9001617 	ldw	r4,88(sp)
  808ab8:	a80b883a 	mov	r5,r21
  808abc:	04000044 	movi	r16,1
  808ac0:	08097f40 	call	8097f4 <_Bfree>
  808ac4:	003edf06 	br	808644 <_dtoa_r+0x9b8>
  808ac8:	d9001617 	ldw	r4,88(sp)
  808acc:	980b883a 	mov	r5,r19
  808ad0:	01800284 	movi	r6,10
  808ad4:	000f883a 	mov	r7,zero
  808ad8:	080a4a80 	call	80a4a8 <__multadd>
  808adc:	1027883a 	mov	r19,r2
  808ae0:	d8800615 	stw	r2,24(sp)
  808ae4:	003ebb06 	br	8085d4 <_dtoa_r+0x948>
  808ae8:	d9801117 	ldw	r6,68(sp)
  808aec:	d8800d17 	ldw	r2,52(sp)
  808af0:	d8000915 	stw	zero,36(sp)
  808af4:	308dc83a 	sub	r6,r6,r2
  808af8:	0087c83a 	sub	r3,zero,r2
  808afc:	d9801115 	stw	r6,68(sp)
  808b00:	d8c01015 	stw	r3,64(sp)
  808b04:	003cfe06 	br	807f00 <_dtoa_r+0x274>
  808b08:	018dc83a 	sub	r6,zero,r6
  808b0c:	d9801115 	stw	r6,68(sp)
  808b10:	d8000a15 	stw	zero,40(sp)
  808b14:	003cf306 	br	807ee4 <_dtoa_r+0x258>
  808b18:	d9000d17 	ldw	r4,52(sp)
  808b1c:	080f6d40 	call	80f6d4 <__floatsidf>
  808b20:	880b883a 	mov	r5,r17
  808b24:	8009883a 	mov	r4,r16
  808b28:	180f883a 	mov	r7,r3
  808b2c:	100d883a 	mov	r6,r2
  808b30:	080f42c0 	call	80f42c <__nedf2>
  808b34:	103ce126 	beq	r2,zero,807ebc <_dtoa_r+0x230>
  808b38:	d9800d17 	ldw	r6,52(sp)
  808b3c:	31bfffc4 	addi	r6,r6,-1
  808b40:	d9800d15 	stw	r6,52(sp)
  808b44:	003cdd06 	br	807ebc <_dtoa_r+0x230>
  808b48:	d9000717 	ldw	r4,28(sp)
  808b4c:	900b883a 	mov	r5,r18
  808b50:	08099500 	call	809950 <__mcmp>
  808b54:	103e8d0e 	bge	r2,zero,80858c <_dtoa_r+0x900>
  808b58:	d9400717 	ldw	r5,28(sp)
  808b5c:	d9001617 	ldw	r4,88(sp)
  808b60:	01800284 	movi	r6,10
  808b64:	000f883a 	mov	r7,zero
  808b68:	080a4a80 	call	80a4a8 <__multadd>
  808b6c:	d9800d17 	ldw	r6,52(sp)
  808b70:	d8800715 	stw	r2,28(sp)
  808b74:	31bfffc4 	addi	r6,r6,-1
  808b78:	d9800d15 	stw	r6,52(sp)
  808b7c:	b001a71e 	bne	r22,zero,80921c <_dtoa_r+0x1590>
  808b80:	d8800e17 	ldw	r2,56(sp)
  808b84:	d8800f15 	stw	r2,60(sp)
  808b88:	003e8006 	br	80858c <_dtoa_r+0x900>
  808b8c:	90800417 	ldw	r2,16(r18)
  808b90:	1085883a 	add	r2,r2,r2
  808b94:	1085883a 	add	r2,r2,r2
  808b98:	1485883a 	add	r2,r2,r18
  808b9c:	11000417 	ldw	r4,16(r2)
  808ba0:	080981c0 	call	80981c <__hi0bits>
  808ba4:	00c00804 	movi	r3,32
  808ba8:	1887c83a 	sub	r3,r3,r2
  808bac:	003e5a06 	br	808518 <_dtoa_r+0x88c>
  808bb0:	d9400717 	ldw	r5,28(sp)
  808bb4:	d9801017 	ldw	r6,64(sp)
  808bb8:	d9001617 	ldw	r4,88(sp)
  808bbc:	080a5a80 	call	80a5a8 <__pow5mult>
  808bc0:	d8800715 	stw	r2,28(sp)
  808bc4:	003e4306 	br	8084d4 <_dtoa_r+0x848>
  808bc8:	d9800f17 	ldw	r6,60(sp)
  808bcc:	d8800d17 	ldw	r2,52(sp)
  808bd0:	d9800315 	stw	r6,12(sp)
  808bd4:	d8800415 	stw	r2,16(sp)
  808bd8:	d8c00b17 	ldw	r3,44(sp)
  808bdc:	1805003a 	cmpeq	r2,r3,zero
  808be0:	1000e21e 	bne	r2,zero,808f6c <_dtoa_r+0x12e0>
  808be4:	d9000317 	ldw	r4,12(sp)
  808be8:	0005883a 	mov	r2,zero
  808bec:	00cff834 	movhi	r3,16352
  808bf0:	200c90fa 	slli	r6,r4,3
  808bf4:	01002074 	movhi	r4,129
  808bf8:	2113f704 	addi	r4,r4,20444
  808bfc:	180b883a 	mov	r5,r3
  808c00:	310d883a 	add	r6,r6,r4
  808c04:	327fff17 	ldw	r9,-4(r6)
  808c08:	323ffe17 	ldw	r8,-8(r6)
  808c0c:	1009883a 	mov	r4,r2
  808c10:	480f883a 	mov	r7,r9
  808c14:	400d883a 	mov	r6,r8
  808c18:	080f14c0 	call	80f14c <__divdf3>
  808c1c:	180b883a 	mov	r5,r3
  808c20:	b00d883a 	mov	r6,r22
  808c24:	b80f883a 	mov	r7,r23
  808c28:	1009883a 	mov	r4,r2
  808c2c:	080ec940 	call	80ec94 <__subdf3>
  808c30:	a80b883a 	mov	r5,r21
  808c34:	a009883a 	mov	r4,r20
  808c38:	d8c01915 	stw	r3,100(sp)
  808c3c:	d8801815 	stw	r2,96(sp)
  808c40:	080f7cc0 	call	80f7cc <__fixdfsi>
  808c44:	1009883a 	mov	r4,r2
  808c48:	1027883a 	mov	r19,r2
  808c4c:	080f6d40 	call	80f6d4 <__floatsidf>
  808c50:	a80b883a 	mov	r5,r21
  808c54:	a009883a 	mov	r4,r20
  808c58:	180f883a 	mov	r7,r3
  808c5c:	100d883a 	mov	r6,r2
  808c60:	080ec940 	call	80ec94 <__subdf3>
  808c64:	d9801817 	ldw	r6,96(sp)
  808c68:	1823883a 	mov	r17,r3
  808c6c:	d8801415 	stw	r2,80(sp)
  808c70:	302d883a 	mov	r22,r6
  808c74:	d9800517 	ldw	r6,20(sp)
  808c78:	9cc00c04 	addi	r19,r19,48
  808c7c:	dc401515 	stw	r17,84(sp)
  808c80:	d8c01917 	ldw	r3,100(sp)
  808c84:	34c00005 	stb	r19,0(r6)
  808c88:	d8800517 	ldw	r2,20(sp)
  808c8c:	d9401917 	ldw	r5,100(sp)
  808c90:	d9801417 	ldw	r6,80(sp)
  808c94:	b009883a 	mov	r4,r22
  808c98:	880f883a 	mov	r7,r17
  808c9c:	182f883a 	mov	r23,r3
  808ca0:	17000044 	addi	fp,r2,1
  808ca4:	080f4b40 	call	80f4b4 <__gtdf2>
  808ca8:	00804e16 	blt	zero,r2,808de4 <_dtoa_r+0x1158>
  808cac:	d9801417 	ldw	r6,80(sp)
  808cb0:	0005883a 	mov	r2,zero
  808cb4:	00cffc34 	movhi	r3,16368
  808cb8:	180b883a 	mov	r5,r3
  808cbc:	880f883a 	mov	r7,r17
  808cc0:	1009883a 	mov	r4,r2
  808cc4:	080ec940 	call	80ec94 <__subdf3>
  808cc8:	d9401917 	ldw	r5,100(sp)
  808ccc:	180f883a 	mov	r7,r3
  808cd0:	b009883a 	mov	r4,r22
  808cd4:	100d883a 	mov	r6,r2
  808cd8:	080f4b40 	call	80f4b4 <__gtdf2>
  808cdc:	00bda216 	blt	zero,r2,808368 <_dtoa_r+0x6dc>
  808ce0:	d8c00317 	ldw	r3,12(sp)
  808ce4:	00800044 	movi	r2,1
  808ce8:	10c01216 	blt	r2,r3,808d34 <_dtoa_r+0x10a8>
  808cec:	003d4506 	br	808204 <_dtoa_r+0x578>
  808cf0:	d9801417 	ldw	r6,80(sp)
  808cf4:	0005883a 	mov	r2,zero
  808cf8:	00cffc34 	movhi	r3,16368
  808cfc:	180b883a 	mov	r5,r3
  808d00:	880f883a 	mov	r7,r17
  808d04:	1009883a 	mov	r4,r2
  808d08:	080ec940 	call	80ec94 <__subdf3>
  808d0c:	d9c01b17 	ldw	r7,108(sp)
  808d10:	180b883a 	mov	r5,r3
  808d14:	1009883a 	mov	r4,r2
  808d18:	b00d883a 	mov	r6,r22
  808d1c:	080f5c40 	call	80f5c4 <__ltdf2>
  808d20:	103d9116 	blt	r2,zero,808368 <_dtoa_r+0x6dc>
  808d24:	d9800517 	ldw	r6,20(sp)
  808d28:	d9000317 	ldw	r4,12(sp)
  808d2c:	3105883a 	add	r2,r6,r4
  808d30:	e0bd3426 	beq	fp,r2,808204 <_dtoa_r+0x578>
  808d34:	04500934 	movhi	r17,16420
  808d38:	0021883a 	mov	r16,zero
  808d3c:	b80b883a 	mov	r5,r23
  808d40:	b009883a 	mov	r4,r22
  808d44:	800d883a 	mov	r6,r16
  808d48:	880f883a 	mov	r7,r17
  808d4c:	080ed880 	call	80ed88 <__muldf3>
  808d50:	d9401517 	ldw	r5,84(sp)
  808d54:	d9001417 	ldw	r4,80(sp)
  808d58:	880f883a 	mov	r7,r17
  808d5c:	000d883a 	mov	r6,zero
  808d60:	d8801a15 	stw	r2,104(sp)
  808d64:	d8c01b15 	stw	r3,108(sp)
  808d68:	080ed880 	call	80ed88 <__muldf3>
  808d6c:	180b883a 	mov	r5,r3
  808d70:	1009883a 	mov	r4,r2
  808d74:	1823883a 	mov	r17,r3
  808d78:	1021883a 	mov	r16,r2
  808d7c:	080f7cc0 	call	80f7cc <__fixdfsi>
  808d80:	1009883a 	mov	r4,r2
  808d84:	102b883a 	mov	r21,r2
  808d88:	080f6d40 	call	80f6d4 <__floatsidf>
  808d8c:	880b883a 	mov	r5,r17
  808d90:	8009883a 	mov	r4,r16
  808d94:	180f883a 	mov	r7,r3
  808d98:	100d883a 	mov	r6,r2
  808d9c:	080ec940 	call	80ec94 <__subdf3>
  808da0:	1021883a 	mov	r16,r2
  808da4:	d9001b17 	ldw	r4,108(sp)
  808da8:	1823883a 	mov	r17,r3
  808dac:	dc001415 	stw	r16,80(sp)
  808db0:	ad400c04 	addi	r21,r21,48
  808db4:	dc401515 	stw	r17,84(sp)
  808db8:	d8801a17 	ldw	r2,104(sp)
  808dbc:	e5400005 	stb	r21,0(fp)
  808dc0:	202f883a 	mov	r23,r4
  808dc4:	d9c01b17 	ldw	r7,108(sp)
  808dc8:	d9001417 	ldw	r4,80(sp)
  808dcc:	880b883a 	mov	r5,r17
  808dd0:	100d883a 	mov	r6,r2
  808dd4:	102d883a 	mov	r22,r2
  808dd8:	e7000044 	addi	fp,fp,1
  808ddc:	080f5c40 	call	80f5c4 <__ltdf2>
  808de0:	103fc30e 	bge	r2,zero,808cf0 <_dtoa_r+0x1064>
  808de4:	d9000417 	ldw	r4,16(sp)
  808de8:	d9000d15 	stw	r4,52(sp)
  808dec:	003d7106 	br	8083b4 <_dtoa_r+0x728>
  808df0:	d9801717 	ldw	r6,92(sp)
  808df4:	00800084 	movi	r2,2
  808df8:	11bde60e 	bge	r2,r6,808594 <_dtoa_r+0x908>
  808dfc:	203cfb1e 	bne	r4,zero,8081ec <_dtoa_r+0x560>
  808e00:	d9001617 	ldw	r4,88(sp)
  808e04:	900b883a 	mov	r5,r18
  808e08:	01800144 	movi	r6,5
  808e0c:	000f883a 	mov	r7,zero
  808e10:	080a4a80 	call	80a4a8 <__multadd>
  808e14:	d9000717 	ldw	r4,28(sp)
  808e18:	100b883a 	mov	r5,r2
  808e1c:	1025883a 	mov	r18,r2
  808e20:	08099500 	call	809950 <__mcmp>
  808e24:	00bcf10e 	bge	zero,r2,8081ec <_dtoa_r+0x560>
  808e28:	d8c00d17 	ldw	r3,52(sp)
  808e2c:	d9000517 	ldw	r4,20(sp)
  808e30:	d8000615 	stw	zero,24(sp)
  808e34:	18c00044 	addi	r3,r3,1
  808e38:	d8c00d15 	stw	r3,52(sp)
  808e3c:	00800c44 	movi	r2,49
  808e40:	27000044 	addi	fp,r4,1
  808e44:	20800005 	stb	r2,0(r4)
  808e48:	003e8906 	br	808870 <_dtoa_r+0xbe4>
  808e4c:	d8c00517 	ldw	r3,20(sp)
  808e50:	003bc206 	br	807d5c <_dtoa_r+0xd0>
  808e54:	01802074 	movhi	r6,129
  808e58:	31942904 	addi	r6,r6,20644
  808e5c:	30c00917 	ldw	r3,36(r6)
  808e60:	30800817 	ldw	r2,32(r6)
  808e64:	d9001217 	ldw	r4,72(sp)
  808e68:	d9401317 	ldw	r5,76(sp)
  808e6c:	180f883a 	mov	r7,r3
  808e70:	100d883a 	mov	r6,r2
  808e74:	080f14c0 	call	80f14c <__divdf3>
  808e78:	948003cc 	andi	r18,r18,15
  808e7c:	058000c4 	movi	r22,3
  808e80:	1029883a 	mov	r20,r2
  808e84:	182b883a 	mov	r21,r3
  808e88:	003c8906 	br	8080b0 <_dtoa_r+0x424>
  808e8c:	d9001017 	ldw	r4,64(sp)
  808e90:	d9800917 	ldw	r6,36(sp)
  808e94:	0025883a 	mov	r18,zero
  808e98:	1105c83a 	sub	r2,r2,r4
  808e9c:	2089883a 	add	r4,r4,r2
  808ea0:	308d883a 	add	r6,r6,r2
  808ea4:	d9001015 	stw	r4,64(sp)
  808ea8:	d9800915 	stw	r6,36(sp)
  808eac:	003e3206 	br	808778 <_dtoa_r+0xaec>
  808eb0:	28800044 	addi	r2,r5,1
  808eb4:	27000044 	addi	fp,r4,1
  808eb8:	20800005 	stb	r2,0(r4)
  808ebc:	003e6c06 	br	808870 <_dtoa_r+0xbe4>
  808ec0:	d8800f17 	ldw	r2,60(sp)
  808ec4:	00bce016 	blt	zero,r2,808248 <_dtoa_r+0x5bc>
  808ec8:	d9800f17 	ldw	r6,60(sp)
  808ecc:	303cc51e 	bne	r6,zero,8081e4 <_dtoa_r+0x558>
  808ed0:	0005883a 	mov	r2,zero
  808ed4:	00d00534 	movhi	r3,16404
  808ed8:	980b883a 	mov	r5,r19
  808edc:	180f883a 	mov	r7,r3
  808ee0:	9009883a 	mov	r4,r18
  808ee4:	100d883a 	mov	r6,r2
  808ee8:	080ed880 	call	80ed88 <__muldf3>
  808eec:	180b883a 	mov	r5,r3
  808ef0:	a80f883a 	mov	r7,r21
  808ef4:	1009883a 	mov	r4,r2
  808ef8:	a00d883a 	mov	r6,r20
  808efc:	080f53c0 	call	80f53c <__gedf2>
  808f00:	103cb80e 	bge	r2,zero,8081e4 <_dtoa_r+0x558>
  808f04:	0027883a 	mov	r19,zero
  808f08:	0025883a 	mov	r18,zero
  808f0c:	003fc606 	br	808e28 <_dtoa_r+0x119c>
  808f10:	99400117 	ldw	r5,4(r19)
  808f14:	d9001617 	ldw	r4,88(sp)
  808f18:	0809d740 	call	809d74 <_Balloc>
  808f1c:	99800417 	ldw	r6,16(r19)
  808f20:	11000304 	addi	r4,r2,12
  808f24:	99400304 	addi	r5,r19,12
  808f28:	318d883a 	add	r6,r6,r6
  808f2c:	318d883a 	add	r6,r6,r6
  808f30:	31800204 	addi	r6,r6,8
  808f34:	1023883a 	mov	r17,r2
  808f38:	08032540 	call	803254 <memcpy>
  808f3c:	d9001617 	ldw	r4,88(sp)
  808f40:	880b883a 	mov	r5,r17
  808f44:	01800044 	movi	r6,1
  808f48:	080a1380 	call	80a138 <__lshift>
  808f4c:	100b883a 	mov	r5,r2
  808f50:	003d9c06 	br	8085c4 <_dtoa_r+0x938>
  808f54:	00800e44 	movi	r2,57
  808f58:	b8807026 	beq	r23,r2,80911c <_dtoa_r+0x1490>
  808f5c:	b8800044 	addi	r2,r23,1
  808f60:	b7000044 	addi	fp,r22,1
  808f64:	b0800005 	stb	r2,0(r22)
  808f68:	003e4106 	br	808870 <_dtoa_r+0xbe4>
  808f6c:	d8800317 	ldw	r2,12(sp)
  808f70:	01802074 	movhi	r6,129
  808f74:	3193f704 	addi	r6,r6,20444
  808f78:	b009883a 	mov	r4,r22
  808f7c:	100e90fa 	slli	r7,r2,3
  808f80:	b80b883a 	mov	r5,r23
  808f84:	398f883a 	add	r7,r7,r6
  808f88:	38bffe17 	ldw	r2,-8(r7)
  808f8c:	d9800517 	ldw	r6,20(sp)
  808f90:	38ffff17 	ldw	r3,-4(r7)
  808f94:	37000044 	addi	fp,r6,1
  808f98:	180f883a 	mov	r7,r3
  808f9c:	100d883a 	mov	r6,r2
  808fa0:	080ed880 	call	80ed88 <__muldf3>
  808fa4:	a80b883a 	mov	r5,r21
  808fa8:	a009883a 	mov	r4,r20
  808fac:	182f883a 	mov	r23,r3
  808fb0:	102d883a 	mov	r22,r2
  808fb4:	080f7cc0 	call	80f7cc <__fixdfsi>
  808fb8:	1009883a 	mov	r4,r2
  808fbc:	1027883a 	mov	r19,r2
  808fc0:	080f6d40 	call	80f6d4 <__floatsidf>
  808fc4:	a80b883a 	mov	r5,r21
  808fc8:	a009883a 	mov	r4,r20
  808fcc:	180f883a 	mov	r7,r3
  808fd0:	100d883a 	mov	r6,r2
  808fd4:	080ec940 	call	80ec94 <__subdf3>
  808fd8:	180b883a 	mov	r5,r3
  808fdc:	d8c00517 	ldw	r3,20(sp)
  808fe0:	9cc00c04 	addi	r19,r19,48
  808fe4:	1009883a 	mov	r4,r2
  808fe8:	1cc00005 	stb	r19,0(r3)
  808fec:	2021883a 	mov	r16,r4
  808ff0:	d9000317 	ldw	r4,12(sp)
  808ff4:	00800044 	movi	r2,1
  808ff8:	2823883a 	mov	r17,r5
  808ffc:	20802226 	beq	r4,r2,809088 <_dtoa_r+0x13fc>
  809000:	1029883a 	mov	r20,r2
  809004:	0005883a 	mov	r2,zero
  809008:	00d00934 	movhi	r3,16420
  80900c:	180f883a 	mov	r7,r3
  809010:	100d883a 	mov	r6,r2
  809014:	880b883a 	mov	r5,r17
  809018:	8009883a 	mov	r4,r16
  80901c:	080ed880 	call	80ed88 <__muldf3>
  809020:	180b883a 	mov	r5,r3
  809024:	1009883a 	mov	r4,r2
  809028:	1823883a 	mov	r17,r3
  80902c:	1021883a 	mov	r16,r2
  809030:	080f7cc0 	call	80f7cc <__fixdfsi>
  809034:	1009883a 	mov	r4,r2
  809038:	102b883a 	mov	r21,r2
  80903c:	080f6d40 	call	80f6d4 <__floatsidf>
  809040:	880b883a 	mov	r5,r17
  809044:	8009883a 	mov	r4,r16
  809048:	180f883a 	mov	r7,r3
  80904c:	100d883a 	mov	r6,r2
  809050:	080ec940 	call	80ec94 <__subdf3>
  809054:	180b883a 	mov	r5,r3
  809058:	d8c00517 	ldw	r3,20(sp)
  80905c:	1009883a 	mov	r4,r2
  809060:	ad400c04 	addi	r21,r21,48
  809064:	1d05883a 	add	r2,r3,r20
  809068:	15400005 	stb	r21,0(r2)
  80906c:	2021883a 	mov	r16,r4
  809070:	d9000317 	ldw	r4,12(sp)
  809074:	a5000044 	addi	r20,r20,1
  809078:	2823883a 	mov	r17,r5
  80907c:	a13fe11e 	bne	r20,r4,809004 <_dtoa_r+0x1378>
  809080:	e505883a 	add	r2,fp,r20
  809084:	173fffc4 	addi	fp,r2,-1
  809088:	0025883a 	mov	r18,zero
  80908c:	04cff834 	movhi	r19,16352
  809090:	b009883a 	mov	r4,r22
  809094:	b80b883a 	mov	r5,r23
  809098:	900d883a 	mov	r6,r18
  80909c:	980f883a 	mov	r7,r19
  8090a0:	080ed140 	call	80ed14 <__adddf3>
  8090a4:	180b883a 	mov	r5,r3
  8090a8:	1009883a 	mov	r4,r2
  8090ac:	800d883a 	mov	r6,r16
  8090b0:	880f883a 	mov	r7,r17
  8090b4:	080f5c40 	call	80f5c4 <__ltdf2>
  8090b8:	103cab16 	blt	r2,zero,808368 <_dtoa_r+0x6dc>
  8090bc:	0009883a 	mov	r4,zero
  8090c0:	980b883a 	mov	r5,r19
  8090c4:	b80f883a 	mov	r7,r23
  8090c8:	b00d883a 	mov	r6,r22
  8090cc:	080ec940 	call	80ec94 <__subdf3>
  8090d0:	180b883a 	mov	r5,r3
  8090d4:	880f883a 	mov	r7,r17
  8090d8:	1009883a 	mov	r4,r2
  8090dc:	800d883a 	mov	r6,r16
  8090e0:	080f4b40 	call	80f4b4 <__gtdf2>
  8090e4:	00bc470e 	bge	zero,r2,808204 <_dtoa_r+0x578>
  8090e8:	00c00c04 	movi	r3,48
  8090ec:	e73fffc4 	addi	fp,fp,-1
  8090f0:	e0800007 	ldb	r2,0(fp)
  8090f4:	10fffd26 	beq	r2,r3,8090ec <_dtoa_r+0x1460>
  8090f8:	d9800417 	ldw	r6,16(sp)
  8090fc:	e7000044 	addi	fp,fp,1
  809100:	d9800d15 	stw	r6,52(sp)
  809104:	003cab06 	br	8083b4 <_dtoa_r+0x728>
  809108:	d8c00f17 	ldw	r3,60(sp)
  80910c:	d9001117 	ldw	r4,68(sp)
  809110:	20e1c83a 	sub	r16,r4,r3
  809114:	0007883a 	mov	r3,zero
  809118:	003d9b06 	br	808788 <_dtoa_r+0xafc>
  80911c:	00800e44 	movi	r2,57
  809120:	b0800005 	stb	r2,0(r22)
  809124:	b5800044 	addi	r22,r22,1
  809128:	003dc106 	br	808830 <_dtoa_r+0xba4>
  80912c:	05800084 	movi	r22,2
  809130:	003bf706 	br	808110 <_dtoa_r+0x484>
  809134:	d9000f17 	ldw	r4,60(sp)
  809138:	013c000e 	bge	zero,r4,80813c <_dtoa_r+0x4b0>
  80913c:	d9800e17 	ldw	r6,56(sp)
  809140:	01bc300e 	bge	zero,r6,808204 <_dtoa_r+0x578>
  809144:	0005883a 	mov	r2,zero
  809148:	00d00934 	movhi	r3,16420
  80914c:	a80b883a 	mov	r5,r21
  809150:	180f883a 	mov	r7,r3
  809154:	a009883a 	mov	r4,r20
  809158:	100d883a 	mov	r6,r2
  80915c:	080ed880 	call	80ed88 <__muldf3>
  809160:	b1000044 	addi	r4,r22,1
  809164:	1021883a 	mov	r16,r2
  809168:	1823883a 	mov	r17,r3
  80916c:	080f6d40 	call	80f6d4 <__floatsidf>
  809170:	880b883a 	mov	r5,r17
  809174:	8009883a 	mov	r4,r16
  809178:	180f883a 	mov	r7,r3
  80917c:	100d883a 	mov	r6,r2
  809180:	080ed880 	call	80ed88 <__muldf3>
  809184:	0011883a 	mov	r8,zero
  809188:	02500734 	movhi	r9,16412
  80918c:	180b883a 	mov	r5,r3
  809190:	480f883a 	mov	r7,r9
  809194:	1009883a 	mov	r4,r2
  809198:	400d883a 	mov	r6,r8
  80919c:	080ed140 	call	80ed14 <__adddf3>
  8091a0:	102d883a 	mov	r22,r2
  8091a4:	00bf3034 	movhi	r2,64704
  8091a8:	10ef883a 	add	r23,r2,r3
  8091ac:	d8800d17 	ldw	r2,52(sp)
  8091b0:	d8c00e17 	ldw	r3,56(sp)
  8091b4:	8029883a 	mov	r20,r16
  8091b8:	10bfffc4 	addi	r2,r2,-1
  8091bc:	882b883a 	mov	r21,r17
  8091c0:	d8800415 	stw	r2,16(sp)
  8091c4:	d8c00315 	stw	r3,12(sp)
  8091c8:	003e8306 	br	808bd8 <_dtoa_r+0xf4c>
  8091cc:	d8800117 	ldw	r2,4(sp)
  8091d0:	dc001117 	ldw	r16,68(sp)
  8091d4:	dc801017 	ldw	r18,64(sp)
  8091d8:	00c00d84 	movi	r3,54
  8091dc:	1887c83a 	sub	r3,r3,r2
  8091e0:	003d6906 	br	808788 <_dtoa_r+0xafc>
  8091e4:	01800044 	movi	r6,1
  8091e8:	3021883a 	mov	r16,r6
  8091ec:	d9800f15 	stw	r6,60(sp)
  8091f0:	d9802615 	stw	r6,152(sp)
  8091f4:	d9800e15 	stw	r6,56(sp)
  8091f8:	003b9306 	br	808048 <_dtoa_r+0x3bc>
  8091fc:	b021883a 	mov	r16,r22
  809200:	dd800f15 	stw	r22,60(sp)
  809204:	003b9006 	br	808048 <_dtoa_r+0x3bc>
  809208:	103e221e 	bne	r2,zero,808a94 <_dtoa_r+0xe08>
  80920c:	b880004c 	andi	r2,r23,1
  809210:	1005003a 	cmpeq	r2,r2,zero
  809214:	103e1f1e 	bne	r2,zero,808a94 <_dtoa_r+0xe08>
  809218:	003e1b06 	br	808a88 <_dtoa_r+0xdfc>
  80921c:	d9001617 	ldw	r4,88(sp)
  809220:	980b883a 	mov	r5,r19
  809224:	01800284 	movi	r6,10
  809228:	000f883a 	mov	r7,zero
  80922c:	080a4a80 	call	80a4a8 <__multadd>
  809230:	d8c00e17 	ldw	r3,56(sp)
  809234:	1027883a 	mov	r19,r2
  809238:	d8c00f15 	stw	r3,60(sp)
  80923c:	003cd306 	br	80858c <_dtoa_r+0x900>

00809240 <__sflags>:
  809240:	28c00007 	ldb	r3,0(r5)
  809244:	00801c84 	movi	r2,114
  809248:	18800926 	beq	r3,r2,809270 <__sflags+0x30>
  80924c:	00801dc4 	movi	r2,119
  809250:	18801426 	beq	r3,r2,8092a4 <__sflags+0x64>
  809254:	00801844 	movi	r2,97
  809258:	18801626 	beq	r3,r2,8092b4 <__sflags+0x74>
  80925c:	0007883a 	mov	r3,zero
  809260:	00800584 	movi	r2,22
  809264:	20800015 	stw	r2,0(r4)
  809268:	1805883a 	mov	r2,r3
  80926c:	f800283a 	ret
  809270:	000f883a 	mov	r7,zero
  809274:	0011883a 	mov	r8,zero
  809278:	00c00104 	movi	r3,4
  80927c:	28800047 	ldb	r2,1(r5)
  809280:	10000426 	beq	r2,zero,809294 <__sflags+0x54>
  809284:	01000ac4 	movi	r4,43
  809288:	11000e26 	beq	r2,r4,8092c4 <__sflags+0x84>
  80928c:	28800087 	ldb	r2,2(r5)
  809290:	11000c26 	beq	r2,r4,8092c4 <__sflags+0x84>
  809294:	3a04b03a 	or	r2,r7,r8
  809298:	30800015 	stw	r2,0(r6)
  80929c:	1805883a 	mov	r2,r3
  8092a0:	f800283a 	ret
  8092a4:	01c00044 	movi	r7,1
  8092a8:	02018004 	movi	r8,1536
  8092ac:	00c00204 	movi	r3,8
  8092b0:	003ff206 	br	80927c <__sflags+0x3c>
  8092b4:	01c00044 	movi	r7,1
  8092b8:	02008204 	movi	r8,520
  8092bc:	00c04204 	movi	r3,264
  8092c0:	003fee06 	br	80927c <__sflags+0x3c>
  8092c4:	00bffcc4 	movi	r2,-13
  8092c8:	1884703a 	and	r2,r3,r2
  8092cc:	01c00084 	movi	r7,2
  8092d0:	10c00414 	ori	r3,r2,16
  8092d4:	3a04b03a 	or	r2,r7,r8
  8092d8:	30800015 	stw	r2,0(r6)
  8092dc:	003fef06 	br	80929c <__sflags+0x5c>

008092e0 <_fread_r>:
  8092e0:	defff504 	addi	sp,sp,-44
  8092e4:	ddc00815 	stw	r23,32(sp)
  8092e8:	39af383a 	mul	r23,r7,r6
  8092ec:	df000915 	stw	fp,36(sp)
  8092f0:	dd800715 	stw	r22,28(sp)
  8092f4:	dcc00415 	stw	r19,16(sp)
  8092f8:	dc000115 	stw	r16,4(sp)
  8092fc:	dfc00a15 	stw	ra,40(sp)
  809300:	dd400615 	stw	r21,24(sp)
  809304:	dd000515 	stw	r20,20(sp)
  809308:	dc800315 	stw	r18,12(sp)
  80930c:	dc400215 	stw	r17,8(sp)
  809310:	d9800015 	stw	r6,0(sp)
  809314:	3839883a 	mov	fp,r7
  809318:	2821883a 	mov	r16,r5
  80931c:	202d883a 	mov	r22,r4
  809320:	dcc00b17 	ldw	r19,44(sp)
  809324:	b8005926 	beq	r23,zero,80948c <_fread_r+0x1ac>
  809328:	20000226 	beq	r4,zero,809334 <_fread_r+0x54>
  80932c:	20800e17 	ldw	r2,56(r4)
  809330:	10005826 	beq	r2,zero,809494 <_fread_r+0x1b4>
  809334:	9c400117 	ldw	r17,4(r19)
  809338:	88005916 	blt	r17,zero,8094a0 <_fread_r+0x1c0>
  80933c:	9880030b 	ldhu	r2,12(r19)
  809340:	8029883a 	mov	r20,r16
  809344:	1080008c 	andi	r2,r2,2
  809348:	1000221e 	bne	r2,zero,8093d4 <_fread_r+0xf4>
  80934c:	b825883a 	mov	r18,r23
  809350:	00000106 	br	809358 <_fread_r+0x78>
  809354:	9c400117 	ldw	r17,4(r19)
  809358:	a009883a 	mov	r4,r20
  80935c:	880d883a 	mov	r6,r17
  809360:	8c80542e 	bgeu	r17,r18,8094b4 <_fread_r+0x1d4>
  809364:	99400017 	ldw	r5,0(r19)
  809368:	a469883a 	add	r20,r20,r17
  80936c:	9465c83a 	sub	r18,r18,r17
  809370:	08032540 	call	803254 <memcpy>
  809374:	98800017 	ldw	r2,0(r19)
  809378:	b009883a 	mov	r4,r22
  80937c:	980b883a 	mov	r5,r19
  809380:	1461883a 	add	r16,r2,r17
  809384:	9c000015 	stw	r16,0(r19)
  809388:	0803b500 	call	803b50 <__srefill_r>
  80938c:	103ff126 	beq	r2,zero,809354 <_fread_r+0x74>
  809390:	d9400017 	ldw	r5,0(sp)
  809394:	bc89c83a 	sub	r4,r23,r18
  809398:	080fbe80 	call	80fbe8 <__udivsi3>
  80939c:	1039883a 	mov	fp,r2
  8093a0:	e005883a 	mov	r2,fp
  8093a4:	dfc00a17 	ldw	ra,40(sp)
  8093a8:	df000917 	ldw	fp,36(sp)
  8093ac:	ddc00817 	ldw	r23,32(sp)
  8093b0:	dd800717 	ldw	r22,28(sp)
  8093b4:	dd400617 	ldw	r21,24(sp)
  8093b8:	dd000517 	ldw	r20,20(sp)
  8093bc:	dcc00417 	ldw	r19,16(sp)
  8093c0:	dc800317 	ldw	r18,12(sp)
  8093c4:	dc400217 	ldw	r17,8(sp)
  8093c8:	dc000117 	ldw	r16,4(sp)
  8093cc:	dec00b04 	addi	sp,sp,44
  8093d0:	f800283a 	ret
  8093d4:	b825883a 	mov	r18,r23
  8093d8:	8dc03436 	bltu	r17,r23,8094ac <_fread_r+0x1cc>
  8093dc:	99400017 	ldw	r5,0(r19)
  8093e0:	a009883a 	mov	r4,r20
  8093e4:	900d883a 	mov	r6,r18
  8093e8:	08032540 	call	803254 <memcpy>
  8093ec:	9c000017 	ldw	r16,0(r19)
  8093f0:	98800117 	ldw	r2,4(r19)
  8093f4:	99400c17 	ldw	r5,48(r19)
  8093f8:	84a1883a 	add	r16,r16,r18
  8093fc:	14a3c83a 	sub	r17,r2,r18
  809400:	a4ab883a 	add	r21,r20,r18
  809404:	9c400115 	stw	r17,4(r19)
  809408:	9c000015 	stw	r16,0(r19)
  80940c:	bca9c83a 	sub	r20,r23,r18
  809410:	28000826 	beq	r5,zero,809434 <_fread_r+0x154>
  809414:	a03fe226 	beq	r20,zero,8093a0 <_fread_r+0xc0>
  809418:	98801004 	addi	r2,r19,64
  80941c:	28800326 	beq	r5,r2,80942c <_fread_r+0x14c>
  809420:	b009883a 	mov	r4,r22
  809424:	0801a980 	call	801a98 <_free_r>
  809428:	9c000017 	ldw	r16,0(r19)
  80942c:	98000c15 	stw	zero,48(r19)
  809430:	00000106 	br	809438 <_fread_r+0x158>
  809434:	a03fda26 	beq	r20,zero,8093a0 <_fread_r+0xc0>
  809438:	9c800417 	ldw	r18,16(r19)
  80943c:	9c400517 	ldw	r17,20(r19)
  809440:	9d400015 	stw	r21,0(r19)
  809444:	9d400415 	stw	r21,16(r19)
  809448:	9d000515 	stw	r20,20(r19)
  80944c:	b009883a 	mov	r4,r22
  809450:	980b883a 	mov	r5,r19
  809454:	0803b500 	call	803b50 <__srefill_r>
  809458:	98c00117 	ldw	r3,4(r19)
  80945c:	9c800415 	stw	r18,16(r19)
  809460:	9c400515 	stw	r17,20(r19)
  809464:	a8eb883a 	add	r21,r21,r3
  809468:	9c000015 	stw	r16,0(r19)
  80946c:	a0e9c83a 	sub	r20,r20,r3
  809470:	98000115 	stw	zero,4(r19)
  809474:	103fef26 	beq	r2,zero,809434 <_fread_r+0x154>
  809478:	d9400017 	ldw	r5,0(sp)
  80947c:	bd09c83a 	sub	r4,r23,r20
  809480:	080fbe80 	call	80fbe8 <__udivsi3>
  809484:	1039883a 	mov	fp,r2
  809488:	003fc506 	br	8093a0 <_fread_r+0xc0>
  80948c:	0039883a 	mov	fp,zero
  809490:	003fc306 	br	8093a0 <_fread_r+0xc0>
  809494:	08015140 	call	801514 <__sinit>
  809498:	9c400117 	ldw	r17,4(r19)
  80949c:	883fa70e 	bge	r17,zero,80933c <_fread_r+0x5c>
  8094a0:	0023883a 	mov	r17,zero
  8094a4:	98000115 	stw	zero,4(r19)
  8094a8:	003fa406 	br	80933c <_fread_r+0x5c>
  8094ac:	8825883a 	mov	r18,r17
  8094b0:	003fca06 	br	8093dc <_fread_r+0xfc>
  8094b4:	99400017 	ldw	r5,0(r19)
  8094b8:	900d883a 	mov	r6,r18
  8094bc:	08032540 	call	803254 <memcpy>
  8094c0:	98c00117 	ldw	r3,4(r19)
  8094c4:	98800017 	ldw	r2,0(r19)
  8094c8:	1c87c83a 	sub	r3,r3,r18
  8094cc:	1485883a 	add	r2,r2,r18
  8094d0:	98800015 	stw	r2,0(r19)
  8094d4:	98c00115 	stw	r3,4(r19)
  8094d8:	003fb106 	br	8093a0 <_fread_r+0xc0>

008094dc <fread>:
  8094dc:	00802074 	movhi	r2,129
  8094e0:	109bd004 	addi	r2,r2,28480
  8094e4:	2017883a 	mov	r11,r4
  8094e8:	11000017 	ldw	r4,0(r2)
  8094ec:	defffe04 	addi	sp,sp,-8
  8094f0:	3013883a 	mov	r9,r6
  8094f4:	2805883a 	mov	r2,r5
  8094f8:	d9c00015 	stw	r7,0(sp)
  8094fc:	580b883a 	mov	r5,r11
  809500:	100d883a 	mov	r6,r2
  809504:	480f883a 	mov	r7,r9
  809508:	dfc00115 	stw	ra,4(sp)
  80950c:	08092e00 	call	8092e0 <_fread_r>
  809510:	dfc00117 	ldw	ra,4(sp)
  809514:	dec00204 	addi	sp,sp,8
  809518:	f800283a 	ret

0080951c <_isatty_r>:
  80951c:	defffd04 	addi	sp,sp,-12
  809520:	dc000015 	stw	r16,0(sp)
  809524:	040020b4 	movhi	r16,130
  809528:	84232604 	addi	r16,r16,-29544
  80952c:	dc400115 	stw	r17,4(sp)
  809530:	80000015 	stw	zero,0(r16)
  809534:	2023883a 	mov	r17,r4
  809538:	2809883a 	mov	r4,r5
  80953c:	dfc00215 	stw	ra,8(sp)
  809540:	0810a580 	call	810a58 <isatty>
  809544:	1007883a 	mov	r3,r2
  809548:	00bfffc4 	movi	r2,-1
  80954c:	18800626 	beq	r3,r2,809568 <_isatty_r+0x4c>
  809550:	1805883a 	mov	r2,r3
  809554:	dfc00217 	ldw	ra,8(sp)
  809558:	dc400117 	ldw	r17,4(sp)
  80955c:	dc000017 	ldw	r16,0(sp)
  809560:	dec00304 	addi	sp,sp,12
  809564:	f800283a 	ret
  809568:	80800017 	ldw	r2,0(r16)
  80956c:	103ff826 	beq	r2,zero,809550 <_isatty_r+0x34>
  809570:	88800015 	stw	r2,0(r17)
  809574:	1805883a 	mov	r2,r3
  809578:	dfc00217 	ldw	ra,8(sp)
  80957c:	dc400117 	ldw	r17,4(sp)
  809580:	dc000017 	ldw	r16,0(sp)
  809584:	dec00304 	addi	sp,sp,12
  809588:	f800283a 	ret

0080958c <iswspace>:
  80958c:	00803fc4 	movi	r2,255
  809590:	0007883a 	mov	r3,zero
  809594:	11000636 	bltu	r2,r4,8095b0 <iswspace+0x24>
  809598:	00802074 	movhi	r2,129
  80959c:	109bd404 	addi	r2,r2,28496
  8095a0:	10c00017 	ldw	r3,0(r2)
  8095a4:	1907883a 	add	r3,r3,r4
  8095a8:	18800003 	ldbu	r2,0(r3)
  8095ac:	10c0020c 	andi	r3,r2,8
  8095b0:	1805883a 	mov	r2,r3
  8095b4:	f800283a 	ret

008095b8 <__locale_charset>:
  8095b8:	d0a00a17 	ldw	r2,-32728(gp)
  8095bc:	f800283a 	ret

008095c0 <_localeconv_r>:
  8095c0:	00802074 	movhi	r2,129
  8095c4:	1093eb04 	addi	r2,r2,20396
  8095c8:	f800283a 	ret

008095cc <localeconv>:
  8095cc:	00802074 	movhi	r2,129
  8095d0:	109bd004 	addi	r2,r2,28480
  8095d4:	11000017 	ldw	r4,0(r2)
  8095d8:	08095c01 	jmpi	8095c0 <_localeconv_r>

008095dc <_setlocale_r>:
  8095dc:	defffc04 	addi	sp,sp,-16
  8095e0:	00c02074 	movhi	r3,129
  8095e4:	18d31604 	addi	r3,r3,19544
  8095e8:	dc800215 	stw	r18,8(sp)
  8095ec:	dc400115 	stw	r17,4(sp)
  8095f0:	dc000015 	stw	r16,0(sp)
  8095f4:	2023883a 	mov	r17,r4
  8095f8:	2825883a 	mov	r18,r5
  8095fc:	dfc00315 	stw	ra,12(sp)
  809600:	3021883a 	mov	r16,r6
  809604:	3009883a 	mov	r4,r6
  809608:	180b883a 	mov	r5,r3
  80960c:	30000926 	beq	r6,zero,809634 <_setlocale_r+0x58>
  809610:	080a9980 	call	80a998 <strcmp>
  809614:	8009883a 	mov	r4,r16
  809618:	01402074 	movhi	r5,129
  80961c:	29532604 	addi	r5,r5,19608
  809620:	10000b1e 	bne	r2,zero,809650 <_setlocale_r+0x74>
  809624:	8c000d15 	stw	r16,52(r17)
  809628:	8c800c15 	stw	r18,48(r17)
  80962c:	00c02074 	movhi	r3,129
  809630:	18d31604 	addi	r3,r3,19544
  809634:	1805883a 	mov	r2,r3
  809638:	dfc00317 	ldw	ra,12(sp)
  80963c:	dc800217 	ldw	r18,8(sp)
  809640:	dc400117 	ldw	r17,4(sp)
  809644:	dc000017 	ldw	r16,0(sp)
  809648:	dec00404 	addi	sp,sp,16
  80964c:	f800283a 	ret
  809650:	080a9980 	call	80a998 <strcmp>
  809654:	0007883a 	mov	r3,zero
  809658:	103ff226 	beq	r2,zero,809624 <_setlocale_r+0x48>
  80965c:	003ff506 	br	809634 <_setlocale_r+0x58>

00809660 <setlocale>:
  809660:	01802074 	movhi	r6,129
  809664:	319bd004 	addi	r6,r6,28480
  809668:	2007883a 	mov	r3,r4
  80966c:	31000017 	ldw	r4,0(r6)
  809670:	280d883a 	mov	r6,r5
  809674:	180b883a 	mov	r5,r3
  809678:	08095dc1 	jmpi	8095dc <_setlocale_r>

0080967c <_lseek_r>:
  80967c:	defffd04 	addi	sp,sp,-12
  809680:	dc000015 	stw	r16,0(sp)
  809684:	040020b4 	movhi	r16,130
  809688:	84232604 	addi	r16,r16,-29544
  80968c:	dc400115 	stw	r17,4(sp)
  809690:	80000015 	stw	zero,0(r16)
  809694:	2023883a 	mov	r17,r4
  809698:	2809883a 	mov	r4,r5
  80969c:	300b883a 	mov	r5,r6
  8096a0:	380d883a 	mov	r6,r7
  8096a4:	dfc00215 	stw	ra,8(sp)
  8096a8:	0810c640 	call	810c64 <lseek>
  8096ac:	1007883a 	mov	r3,r2
  8096b0:	00bfffc4 	movi	r2,-1
  8096b4:	18800626 	beq	r3,r2,8096d0 <_lseek_r+0x54>
  8096b8:	1805883a 	mov	r2,r3
  8096bc:	dfc00217 	ldw	ra,8(sp)
  8096c0:	dc400117 	ldw	r17,4(sp)
  8096c4:	dc000017 	ldw	r16,0(sp)
  8096c8:	dec00304 	addi	sp,sp,12
  8096cc:	f800283a 	ret
  8096d0:	80800017 	ldw	r2,0(r16)
  8096d4:	103ff826 	beq	r2,zero,8096b8 <_lseek_r+0x3c>
  8096d8:	88800015 	stw	r2,0(r17)
  8096dc:	1805883a 	mov	r2,r3
  8096e0:	dfc00217 	ldw	ra,8(sp)
  8096e4:	dc400117 	ldw	r17,4(sp)
  8096e8:	dc000017 	ldw	r16,0(sp)
  8096ec:	dec00304 	addi	sp,sp,12
  8096f0:	f800283a 	ret

008096f4 <_mbrtowc_r>:
  8096f4:	defffc04 	addi	sp,sp,-16
  8096f8:	dc400215 	stw	r17,8(sp)
  8096fc:	dc000115 	stw	r16,4(sp)
  809700:	dfc00315 	stw	ra,12(sp)
  809704:	dc000417 	ldw	r16,16(sp)
  809708:	2023883a 	mov	r17,r4
  80970c:	30000f26 	beq	r6,zero,80974c <_mbrtowc_r+0x58>
  809710:	dc000015 	stw	r16,0(sp)
  809714:	08097b40 	call	8097b4 <_mbtowc_r>
  809718:	1007883a 	mov	r3,r2
  80971c:	00bfffc4 	movi	r2,-1
  809720:	1809883a 	mov	r4,r3
  809724:	1880111e 	bne	r3,r2,80976c <_mbrtowc_r+0x78>
  809728:	80000015 	stw	zero,0(r16)
  80972c:	00802284 	movi	r2,138
  809730:	88800015 	stw	r2,0(r17)
  809734:	2005883a 	mov	r2,r4
  809738:	dfc00317 	ldw	ra,12(sp)
  80973c:	dc400217 	ldw	r17,8(sp)
  809740:	dc000117 	ldw	r16,4(sp)
  809744:	dec00404 	addi	sp,sp,16
  809748:	f800283a 	ret
  80974c:	000b883a 	mov	r5,zero
  809750:	01802074 	movhi	r6,129
  809754:	31932604 	addi	r6,r6,19608
  809758:	01c00044 	movi	r7,1
  80975c:	dc000015 	stw	r16,0(sp)
  809760:	08097b40 	call	8097b4 <_mbtowc_r>
  809764:	1007883a 	mov	r3,r2
  809768:	003fec06 	br	80971c <_mbrtowc_r+0x28>
  80976c:	1809883a 	mov	r4,r3
  809770:	003ff006 	br	809734 <_mbrtowc_r+0x40>

00809774 <mbrtowc>:
  809774:	00802074 	movhi	r2,129
  809778:	109bd004 	addi	r2,r2,28480
  80977c:	2017883a 	mov	r11,r4
  809780:	11000017 	ldw	r4,0(r2)
  809784:	defffe04 	addi	sp,sp,-8
  809788:	3013883a 	mov	r9,r6
  80978c:	2805883a 	mov	r2,r5
  809790:	d9c00015 	stw	r7,0(sp)
  809794:	580b883a 	mov	r5,r11
  809798:	100d883a 	mov	r6,r2
  80979c:	480f883a 	mov	r7,r9
  8097a0:	dfc00115 	stw	ra,4(sp)
  8097a4:	08096f40 	call	8096f4 <_mbrtowc_r>
  8097a8:	dfc00117 	ldw	ra,4(sp)
  8097ac:	dec00204 	addi	sp,sp,8
  8097b0:	f800283a 	ret

008097b4 <_mbtowc_r>:
  8097b4:	deffff04 	addi	sp,sp,-4
  8097b8:	0005883a 	mov	r2,zero
  8097bc:	28000326 	beq	r5,zero,8097cc <_mbtowc_r+0x18>
  8097c0:	3000041e 	bne	r6,zero,8097d4 <_mbtowc_r+0x20>
  8097c4:	dec00104 	addi	sp,sp,4
  8097c8:	f800283a 	ret
  8097cc:	d80b883a 	mov	r5,sp
  8097d0:	303ffc26 	beq	r6,zero,8097c4 <_mbtowc_r+0x10>
  8097d4:	00bfff84 	movi	r2,-2
  8097d8:	383ffa26 	beq	r7,zero,8097c4 <_mbtowc_r+0x10>
  8097dc:	30800003 	ldbu	r2,0(r6)
  8097e0:	28800015 	stw	r2,0(r5)
  8097e4:	30c00003 	ldbu	r3,0(r6)
  8097e8:	1804c03a 	cmpne	r2,r3,zero
  8097ec:	dec00104 	addi	sp,sp,4
  8097f0:	f800283a 	ret

008097f4 <_Bfree>:
  8097f4:	28000826 	beq	r5,zero,809818 <_Bfree+0x24>
  8097f8:	28800117 	ldw	r2,4(r5)
  8097fc:	21001317 	ldw	r4,76(r4)
  809800:	1085883a 	add	r2,r2,r2
  809804:	1085883a 	add	r2,r2,r2
  809808:	1105883a 	add	r2,r2,r4
  80980c:	10c00017 	ldw	r3,0(r2)
  809810:	28c00015 	stw	r3,0(r5)
  809814:	11400015 	stw	r5,0(r2)
  809818:	f800283a 	ret

0080981c <__hi0bits>:
  80981c:	20bfffec 	andhi	r2,r4,65535
  809820:	10001426 	beq	r2,zero,809874 <__hi0bits+0x58>
  809824:	0007883a 	mov	r3,zero
  809828:	20bfc02c 	andhi	r2,r4,65280
  80982c:	1000021e 	bne	r2,zero,809838 <__hi0bits+0x1c>
  809830:	2008923a 	slli	r4,r4,8
  809834:	18c00204 	addi	r3,r3,8
  809838:	20bc002c 	andhi	r2,r4,61440
  80983c:	1000021e 	bne	r2,zero,809848 <__hi0bits+0x2c>
  809840:	2008913a 	slli	r4,r4,4
  809844:	18c00104 	addi	r3,r3,4
  809848:	20b0002c 	andhi	r2,r4,49152
  80984c:	1000031e 	bne	r2,zero,80985c <__hi0bits+0x40>
  809850:	2105883a 	add	r2,r4,r4
  809854:	18c00084 	addi	r3,r3,2
  809858:	1089883a 	add	r4,r2,r2
  80985c:	20000316 	blt	r4,zero,80986c <__hi0bits+0x50>
  809860:	2090002c 	andhi	r2,r4,16384
  809864:	10000626 	beq	r2,zero,809880 <__hi0bits+0x64>
  809868:	18c00044 	addi	r3,r3,1
  80986c:	1805883a 	mov	r2,r3
  809870:	f800283a 	ret
  809874:	2008943a 	slli	r4,r4,16
  809878:	00c00404 	movi	r3,16
  80987c:	003fea06 	br	809828 <__hi0bits+0xc>
  809880:	00c00804 	movi	r3,32
  809884:	1805883a 	mov	r2,r3
  809888:	f800283a 	ret

0080988c <__lo0bits>:
  80988c:	20c00017 	ldw	r3,0(r4)
  809890:	188001cc 	andi	r2,r3,7
  809894:	10000a26 	beq	r2,zero,8098c0 <__lo0bits+0x34>
  809898:	1880004c 	andi	r2,r3,1
  80989c:	1005003a 	cmpeq	r2,r2,zero
  8098a0:	10002126 	beq	r2,zero,809928 <__lo0bits+0x9c>
  8098a4:	1880008c 	andi	r2,r3,2
  8098a8:	1000251e 	bne	r2,zero,809940 <__lo0bits+0xb4>
  8098ac:	1804d0ba 	srli	r2,r3,2
  8098b0:	01400084 	movi	r5,2
  8098b4:	20800015 	stw	r2,0(r4)
  8098b8:	2805883a 	mov	r2,r5
  8098bc:	f800283a 	ret
  8098c0:	18bfffcc 	andi	r2,r3,65535
  8098c4:	10001526 	beq	r2,zero,80991c <__lo0bits+0x90>
  8098c8:	000b883a 	mov	r5,zero
  8098cc:	18803fcc 	andi	r2,r3,255
  8098d0:	1000021e 	bne	r2,zero,8098dc <__lo0bits+0x50>
  8098d4:	1806d23a 	srli	r3,r3,8
  8098d8:	29400204 	addi	r5,r5,8
  8098dc:	188003cc 	andi	r2,r3,15
  8098e0:	1000021e 	bne	r2,zero,8098ec <__lo0bits+0x60>
  8098e4:	1806d13a 	srli	r3,r3,4
  8098e8:	29400104 	addi	r5,r5,4
  8098ec:	188000cc 	andi	r2,r3,3
  8098f0:	1000021e 	bne	r2,zero,8098fc <__lo0bits+0x70>
  8098f4:	1806d0ba 	srli	r3,r3,2
  8098f8:	29400084 	addi	r5,r5,2
  8098fc:	1880004c 	andi	r2,r3,1
  809900:	1000031e 	bne	r2,zero,809910 <__lo0bits+0x84>
  809904:	1806d07a 	srli	r3,r3,1
  809908:	18000a26 	beq	r3,zero,809934 <__lo0bits+0xa8>
  80990c:	29400044 	addi	r5,r5,1
  809910:	2805883a 	mov	r2,r5
  809914:	20c00015 	stw	r3,0(r4)
  809918:	f800283a 	ret
  80991c:	1806d43a 	srli	r3,r3,16
  809920:	01400404 	movi	r5,16
  809924:	003fe906 	br	8098cc <__lo0bits+0x40>
  809928:	000b883a 	mov	r5,zero
  80992c:	2805883a 	mov	r2,r5
  809930:	f800283a 	ret
  809934:	01400804 	movi	r5,32
  809938:	2805883a 	mov	r2,r5
  80993c:	f800283a 	ret
  809940:	1804d07a 	srli	r2,r3,1
  809944:	01400044 	movi	r5,1
  809948:	20800015 	stw	r2,0(r4)
  80994c:	003fda06 	br	8098b8 <__lo0bits+0x2c>

00809950 <__mcmp>:
  809950:	20800417 	ldw	r2,16(r4)
  809954:	28c00417 	ldw	r3,16(r5)
  809958:	10cfc83a 	sub	r7,r2,r3
  80995c:	38000c1e 	bne	r7,zero,809990 <__mcmp+0x40>
  809960:	18c5883a 	add	r2,r3,r3
  809964:	1085883a 	add	r2,r2,r2
  809968:	10c00504 	addi	r3,r2,20
  80996c:	21000504 	addi	r4,r4,20
  809970:	28cb883a 	add	r5,r5,r3
  809974:	2085883a 	add	r2,r4,r2
  809978:	10bfff04 	addi	r2,r2,-4
  80997c:	297fff04 	addi	r5,r5,-4
  809980:	11800017 	ldw	r6,0(r2)
  809984:	28c00017 	ldw	r3,0(r5)
  809988:	30c0031e 	bne	r6,r3,809998 <__mcmp+0x48>
  80998c:	20bffa36 	bltu	r4,r2,809978 <__mcmp+0x28>
  809990:	3805883a 	mov	r2,r7
  809994:	f800283a 	ret
  809998:	30c00336 	bltu	r6,r3,8099a8 <__mcmp+0x58>
  80999c:	01c00044 	movi	r7,1
  8099a0:	3805883a 	mov	r2,r7
  8099a4:	f800283a 	ret
  8099a8:	01ffffc4 	movi	r7,-1
  8099ac:	003ff806 	br	809990 <__mcmp+0x40>

008099b0 <__ulp>:
  8099b0:	295ffc2c 	andhi	r5,r5,32752
  8099b4:	013f3034 	movhi	r4,64704
  8099b8:	290b883a 	add	r5,r5,r4
  8099bc:	0145c83a 	sub	r2,zero,r5
  8099c0:	1007d53a 	srai	r3,r2,20
  8099c4:	000d883a 	mov	r6,zero
  8099c8:	0140040e 	bge	zero,r5,8099dc <__ulp+0x2c>
  8099cc:	280f883a 	mov	r7,r5
  8099d0:	3807883a 	mov	r3,r7
  8099d4:	3005883a 	mov	r2,r6
  8099d8:	f800283a 	ret
  8099dc:	008004c4 	movi	r2,19
  8099e0:	193ffb04 	addi	r4,r3,-20
  8099e4:	10c00c0e 	bge	r2,r3,809a18 <__ulp+0x68>
  8099e8:	008007c4 	movi	r2,31
  8099ec:	1107c83a 	sub	r3,r2,r4
  8099f0:	00800784 	movi	r2,30
  8099f4:	01400044 	movi	r5,1
  8099f8:	11000216 	blt	r2,r4,809a04 <__ulp+0x54>
  8099fc:	00800044 	movi	r2,1
  809a00:	10ca983a 	sll	r5,r2,r3
  809a04:	000f883a 	mov	r7,zero
  809a08:	280d883a 	mov	r6,r5
  809a0c:	3807883a 	mov	r3,r7
  809a10:	3005883a 	mov	r2,r6
  809a14:	f800283a 	ret
  809a18:	00800234 	movhi	r2,8
  809a1c:	10cfd83a 	sra	r7,r2,r3
  809a20:	000d883a 	mov	r6,zero
  809a24:	3005883a 	mov	r2,r6
  809a28:	3807883a 	mov	r3,r7
  809a2c:	f800283a 	ret

00809a30 <__b2d>:
  809a30:	20800417 	ldw	r2,16(r4)
  809a34:	defff904 	addi	sp,sp,-28
  809a38:	dd000415 	stw	r20,16(sp)
  809a3c:	1085883a 	add	r2,r2,r2
  809a40:	25000504 	addi	r20,r4,20
  809a44:	1085883a 	add	r2,r2,r2
  809a48:	dc000015 	stw	r16,0(sp)
  809a4c:	a0a1883a 	add	r16,r20,r2
  809a50:	dd400515 	stw	r21,20(sp)
  809a54:	857fff17 	ldw	r21,-4(r16)
  809a58:	dc400115 	stw	r17,4(sp)
  809a5c:	dfc00615 	stw	ra,24(sp)
  809a60:	a809883a 	mov	r4,r21
  809a64:	2823883a 	mov	r17,r5
  809a68:	dcc00315 	stw	r19,12(sp)
  809a6c:	dc800215 	stw	r18,8(sp)
  809a70:	080981c0 	call	80981c <__hi0bits>
  809a74:	100b883a 	mov	r5,r2
  809a78:	00800804 	movi	r2,32
  809a7c:	1145c83a 	sub	r2,r2,r5
  809a80:	88800015 	stw	r2,0(r17)
  809a84:	00800284 	movi	r2,10
  809a88:	80ffff04 	addi	r3,r16,-4
  809a8c:	11401416 	blt	r2,r5,809ae0 <__b2d+0xb0>
  809a90:	008002c4 	movi	r2,11
  809a94:	1149c83a 	sub	r4,r2,r5
  809a98:	a0c02736 	bltu	r20,r3,809b38 <__b2d+0x108>
  809a9c:	000d883a 	mov	r6,zero
  809aa0:	28800544 	addi	r2,r5,21
  809aa4:	a906d83a 	srl	r3,r21,r4
  809aa8:	a884983a 	sll	r2,r21,r2
  809aac:	1ccffc34 	orhi	r19,r3,16368
  809ab0:	11a4b03a 	or	r18,r2,r6
  809ab4:	9005883a 	mov	r2,r18
  809ab8:	9807883a 	mov	r3,r19
  809abc:	dfc00617 	ldw	ra,24(sp)
  809ac0:	dd400517 	ldw	r21,20(sp)
  809ac4:	dd000417 	ldw	r20,16(sp)
  809ac8:	dcc00317 	ldw	r19,12(sp)
  809acc:	dc800217 	ldw	r18,8(sp)
  809ad0:	dc400117 	ldw	r17,4(sp)
  809ad4:	dc000017 	ldw	r16,0(sp)
  809ad8:	dec00704 	addi	sp,sp,28
  809adc:	f800283a 	ret
  809ae0:	a0c00e36 	bltu	r20,r3,809b1c <__b2d+0xec>
  809ae4:	293ffd44 	addi	r4,r5,-11
  809ae8:	000d883a 	mov	r6,zero
  809aec:	20000f26 	beq	r4,zero,809b2c <__b2d+0xfc>
  809af0:	00800804 	movi	r2,32
  809af4:	110bc83a 	sub	r5,r2,r4
  809af8:	a0c01236 	bltu	r20,r3,809b44 <__b2d+0x114>
  809afc:	000f883a 	mov	r7,zero
  809b00:	a904983a 	sll	r2,r21,r4
  809b04:	3146d83a 	srl	r3,r6,r5
  809b08:	3108983a 	sll	r4,r6,r4
  809b0c:	108ffc34 	orhi	r2,r2,16368
  809b10:	18a6b03a 	or	r19,r3,r2
  809b14:	3924b03a 	or	r18,r7,r4
  809b18:	003fe606 	br	809ab4 <__b2d+0x84>
  809b1c:	293ffd44 	addi	r4,r5,-11
  809b20:	81bffe17 	ldw	r6,-8(r16)
  809b24:	80fffe04 	addi	r3,r16,-8
  809b28:	203ff11e 	bne	r4,zero,809af0 <__b2d+0xc0>
  809b2c:	accffc34 	orhi	r19,r21,16368
  809b30:	3025883a 	mov	r18,r6
  809b34:	003fdf06 	br	809ab4 <__b2d+0x84>
  809b38:	18bfff17 	ldw	r2,-4(r3)
  809b3c:	110cd83a 	srl	r6,r2,r4
  809b40:	003fd706 	br	809aa0 <__b2d+0x70>
  809b44:	18bfff17 	ldw	r2,-4(r3)
  809b48:	114ed83a 	srl	r7,r2,r5
  809b4c:	003fec06 	br	809b00 <__b2d+0xd0>

00809b50 <__ratio>:
  809b50:	defff904 	addi	sp,sp,-28
  809b54:	dc400215 	stw	r17,8(sp)
  809b58:	2823883a 	mov	r17,r5
  809b5c:	d80b883a 	mov	r5,sp
  809b60:	dfc00615 	stw	ra,24(sp)
  809b64:	dd000515 	stw	r20,20(sp)
  809b68:	dcc00415 	stw	r19,16(sp)
  809b6c:	dc800315 	stw	r18,12(sp)
  809b70:	2025883a 	mov	r18,r4
  809b74:	0809a300 	call	809a30 <__b2d>
  809b78:	8809883a 	mov	r4,r17
  809b7c:	d9400104 	addi	r5,sp,4
  809b80:	1027883a 	mov	r19,r2
  809b84:	1829883a 	mov	r20,r3
  809b88:	0809a300 	call	809a30 <__b2d>
  809b8c:	89000417 	ldw	r4,16(r17)
  809b90:	91c00417 	ldw	r7,16(r18)
  809b94:	d9800117 	ldw	r6,4(sp)
  809b98:	180b883a 	mov	r5,r3
  809b9c:	390fc83a 	sub	r7,r7,r4
  809ba0:	1009883a 	mov	r4,r2
  809ba4:	d8800017 	ldw	r2,0(sp)
  809ba8:	380e917a 	slli	r7,r7,5
  809bac:	2011883a 	mov	r8,r4
  809bb0:	1185c83a 	sub	r2,r2,r6
  809bb4:	11c5883a 	add	r2,r2,r7
  809bb8:	1006953a 	slli	r3,r2,20
  809bbc:	2813883a 	mov	r9,r5
  809bc0:	00800d0e 	bge	zero,r2,809bf8 <__ratio+0xa8>
  809bc4:	1d29883a 	add	r20,r3,r20
  809bc8:	a00b883a 	mov	r5,r20
  809bcc:	480f883a 	mov	r7,r9
  809bd0:	9809883a 	mov	r4,r19
  809bd4:	400d883a 	mov	r6,r8
  809bd8:	080f14c0 	call	80f14c <__divdf3>
  809bdc:	dfc00617 	ldw	ra,24(sp)
  809be0:	dd000517 	ldw	r20,20(sp)
  809be4:	dcc00417 	ldw	r19,16(sp)
  809be8:	dc800317 	ldw	r18,12(sp)
  809bec:	dc400217 	ldw	r17,8(sp)
  809bf0:	dec00704 	addi	sp,sp,28
  809bf4:	f800283a 	ret
  809bf8:	28d3c83a 	sub	r9,r5,r3
  809bfc:	003ff206 	br	809bc8 <__ratio+0x78>

00809c00 <_mprec_log10>:
  809c00:	defffe04 	addi	sp,sp,-8
  809c04:	008005c4 	movi	r2,23
  809c08:	dc000015 	stw	r16,0(sp)
  809c0c:	dfc00115 	stw	ra,4(sp)
  809c10:	2021883a 	mov	r16,r4
  809c14:	11000c16 	blt	r2,r4,809c48 <_mprec_log10+0x48>
  809c18:	200490fa 	slli	r2,r4,3
  809c1c:	00c02074 	movhi	r3,129
  809c20:	18d3f704 	addi	r3,r3,20444
  809c24:	10c5883a 	add	r2,r2,r3
  809c28:	12400117 	ldw	r9,4(r2)
  809c2c:	12000017 	ldw	r8,0(r2)
  809c30:	4807883a 	mov	r3,r9
  809c34:	4005883a 	mov	r2,r8
  809c38:	dfc00117 	ldw	ra,4(sp)
  809c3c:	dc000017 	ldw	r16,0(sp)
  809c40:	dec00204 	addi	sp,sp,8
  809c44:	f800283a 	ret
  809c48:	0011883a 	mov	r8,zero
  809c4c:	024ffc34 	movhi	r9,16368
  809c50:	0005883a 	mov	r2,zero
  809c54:	00d00934 	movhi	r3,16420
  809c58:	480b883a 	mov	r5,r9
  809c5c:	4009883a 	mov	r4,r8
  809c60:	180f883a 	mov	r7,r3
  809c64:	100d883a 	mov	r6,r2
  809c68:	080ed880 	call	80ed88 <__muldf3>
  809c6c:	843fffc4 	addi	r16,r16,-1
  809c70:	1011883a 	mov	r8,r2
  809c74:	1813883a 	mov	r9,r3
  809c78:	803ff51e 	bne	r16,zero,809c50 <_mprec_log10+0x50>
  809c7c:	4005883a 	mov	r2,r8
  809c80:	4807883a 	mov	r3,r9
  809c84:	dfc00117 	ldw	ra,4(sp)
  809c88:	dc000017 	ldw	r16,0(sp)
  809c8c:	dec00204 	addi	sp,sp,8
  809c90:	f800283a 	ret

00809c94 <__copybits>:
  809c94:	297fffc4 	addi	r5,r5,-1
  809c98:	30800417 	ldw	r2,16(r6)
  809c9c:	280bd17a 	srai	r5,r5,5
  809ca0:	31800504 	addi	r6,r6,20
  809ca4:	1085883a 	add	r2,r2,r2
  809ca8:	294b883a 	add	r5,r5,r5
  809cac:	294b883a 	add	r5,r5,r5
  809cb0:	1085883a 	add	r2,r2,r2
  809cb4:	290b883a 	add	r5,r5,r4
  809cb8:	3087883a 	add	r3,r6,r2
  809cbc:	29400104 	addi	r5,r5,4
  809cc0:	30c0052e 	bgeu	r6,r3,809cd8 <__copybits+0x44>
  809cc4:	30800017 	ldw	r2,0(r6)
  809cc8:	31800104 	addi	r6,r6,4
  809ccc:	20800015 	stw	r2,0(r4)
  809cd0:	21000104 	addi	r4,r4,4
  809cd4:	30fffb36 	bltu	r6,r3,809cc4 <__copybits+0x30>
  809cd8:	2140032e 	bgeu	r4,r5,809ce8 <__copybits+0x54>
  809cdc:	20000015 	stw	zero,0(r4)
  809ce0:	21000104 	addi	r4,r4,4
  809ce4:	217ffd36 	bltu	r4,r5,809cdc <__copybits+0x48>
  809ce8:	f800283a 	ret

00809cec <__any_on>:
  809cec:	20800417 	ldw	r2,16(r4)
  809cf0:	2807d17a 	srai	r3,r5,5
  809cf4:	21000504 	addi	r4,r4,20
  809cf8:	10c00d0e 	bge	r2,r3,809d30 <__any_on+0x44>
  809cfc:	1085883a 	add	r2,r2,r2
  809d00:	1085883a 	add	r2,r2,r2
  809d04:	208d883a 	add	r6,r4,r2
  809d08:	2180182e 	bgeu	r4,r6,809d6c <__any_on+0x80>
  809d0c:	30bfff17 	ldw	r2,-4(r6)
  809d10:	30ffff04 	addi	r3,r6,-4
  809d14:	1000041e 	bne	r2,zero,809d28 <__any_on+0x3c>
  809d18:	20c0142e 	bgeu	r4,r3,809d6c <__any_on+0x80>
  809d1c:	18ffff04 	addi	r3,r3,-4
  809d20:	18800017 	ldw	r2,0(r3)
  809d24:	103ffc26 	beq	r2,zero,809d18 <__any_on+0x2c>
  809d28:	00800044 	movi	r2,1
  809d2c:	f800283a 	ret
  809d30:	18800a0e 	bge	r3,r2,809d5c <__any_on+0x70>
  809d34:	294007cc 	andi	r5,r5,31
  809d38:	28000826 	beq	r5,zero,809d5c <__any_on+0x70>
  809d3c:	18c5883a 	add	r2,r3,r3
  809d40:	1085883a 	add	r2,r2,r2
  809d44:	208d883a 	add	r6,r4,r2
  809d48:	30c00017 	ldw	r3,0(r6)
  809d4c:	1944d83a 	srl	r2,r3,r5
  809d50:	1144983a 	sll	r2,r2,r5
  809d54:	18bff41e 	bne	r3,r2,809d28 <__any_on+0x3c>
  809d58:	003feb06 	br	809d08 <__any_on+0x1c>
  809d5c:	18c5883a 	add	r2,r3,r3
  809d60:	1085883a 	add	r2,r2,r2
  809d64:	208d883a 	add	r6,r4,r2
  809d68:	003fe706 	br	809d08 <__any_on+0x1c>
  809d6c:	0005883a 	mov	r2,zero
  809d70:	f800283a 	ret

00809d74 <_Balloc>:
  809d74:	20c01317 	ldw	r3,76(r4)
  809d78:	defffb04 	addi	sp,sp,-20
  809d7c:	dcc00315 	stw	r19,12(sp)
  809d80:	dc800215 	stw	r18,8(sp)
  809d84:	dfc00415 	stw	ra,16(sp)
  809d88:	2825883a 	mov	r18,r5
  809d8c:	dc400115 	stw	r17,4(sp)
  809d90:	dc000015 	stw	r16,0(sp)
  809d94:	2027883a 	mov	r19,r4
  809d98:	01800404 	movi	r6,16
  809d9c:	01400104 	movi	r5,4
  809da0:	18001726 	beq	r3,zero,809e00 <_Balloc+0x8c>
  809da4:	01400044 	movi	r5,1
  809da8:	9485883a 	add	r2,r18,r18
  809dac:	2ca2983a 	sll	r17,r5,r18
  809db0:	1085883a 	add	r2,r2,r2
  809db4:	10c7883a 	add	r3,r2,r3
  809db8:	1c000017 	ldw	r16,0(r3)
  809dbc:	8c4d883a 	add	r6,r17,r17
  809dc0:	318d883a 	add	r6,r6,r6
  809dc4:	9809883a 	mov	r4,r19
  809dc8:	31800504 	addi	r6,r6,20
  809dcc:	80001226 	beq	r16,zero,809e18 <_Balloc+0xa4>
  809dd0:	80800017 	ldw	r2,0(r16)
  809dd4:	18800015 	stw	r2,0(r3)
  809dd8:	80000415 	stw	zero,16(r16)
  809ddc:	80000315 	stw	zero,12(r16)
  809de0:	8005883a 	mov	r2,r16
  809de4:	dfc00417 	ldw	ra,16(sp)
  809de8:	dcc00317 	ldw	r19,12(sp)
  809dec:	dc800217 	ldw	r18,8(sp)
  809df0:	dc400117 	ldw	r17,4(sp)
  809df4:	dc000017 	ldw	r16,0(sp)
  809df8:	dec00504 	addi	sp,sp,20
  809dfc:	f800283a 	ret
  809e00:	080ce180 	call	80ce18 <_calloc_r>
  809e04:	1007883a 	mov	r3,r2
  809e08:	0021883a 	mov	r16,zero
  809e0c:	98801315 	stw	r2,76(r19)
  809e10:	103fe41e 	bne	r2,zero,809da4 <_Balloc+0x30>
  809e14:	003ff206 	br	809de0 <_Balloc+0x6c>
  809e18:	080ce180 	call	80ce18 <_calloc_r>
  809e1c:	103ff026 	beq	r2,zero,809de0 <_Balloc+0x6c>
  809e20:	1021883a 	mov	r16,r2
  809e24:	14800115 	stw	r18,4(r2)
  809e28:	14400215 	stw	r17,8(r2)
  809e2c:	003fea06 	br	809dd8 <_Balloc+0x64>

00809e30 <__d2b>:
  809e30:	defff504 	addi	sp,sp,-44
  809e34:	dcc00515 	stw	r19,20(sp)
  809e38:	04c00044 	movi	r19,1
  809e3c:	dc000215 	stw	r16,8(sp)
  809e40:	2821883a 	mov	r16,r5
  809e44:	980b883a 	mov	r5,r19
  809e48:	ddc00915 	stw	r23,36(sp)
  809e4c:	dd800815 	stw	r22,32(sp)
  809e50:	dd400715 	stw	r21,28(sp)
  809e54:	dd000615 	stw	r20,24(sp)
  809e58:	dc800415 	stw	r18,16(sp)
  809e5c:	dc400315 	stw	r17,12(sp)
  809e60:	dfc00a15 	stw	ra,40(sp)
  809e64:	3023883a 	mov	r17,r6
  809e68:	382d883a 	mov	r22,r7
  809e6c:	ddc00b17 	ldw	r23,44(sp)
  809e70:	0809d740 	call	809d74 <_Balloc>
  809e74:	1025883a 	mov	r18,r2
  809e78:	00a00034 	movhi	r2,32768
  809e7c:	10bfffc4 	addi	r2,r2,-1
  809e80:	8888703a 	and	r4,r17,r2
  809e84:	202ad53a 	srli	r21,r4,20
  809e88:	00800434 	movhi	r2,16
  809e8c:	10bfffc4 	addi	r2,r2,-1
  809e90:	8886703a 	and	r3,r17,r2
  809e94:	a829003a 	cmpeq	r20,r21,zero
  809e98:	800b883a 	mov	r5,r16
  809e9c:	d8c00115 	stw	r3,4(sp)
  809ea0:	94000504 	addi	r16,r18,20
  809ea4:	a000021e 	bne	r20,zero,809eb0 <__d2b+0x80>
  809ea8:	18c00434 	orhi	r3,r3,16
  809eac:	d8c00115 	stw	r3,4(sp)
  809eb0:	28002726 	beq	r5,zero,809f50 <__d2b+0x120>
  809eb4:	d809883a 	mov	r4,sp
  809eb8:	d9400015 	stw	r5,0(sp)
  809ebc:	080988c0 	call	80988c <__lo0bits>
  809ec0:	100d883a 	mov	r6,r2
  809ec4:	10003526 	beq	r2,zero,809f9c <__d2b+0x16c>
  809ec8:	d8c00117 	ldw	r3,4(sp)
  809ecc:	00800804 	movi	r2,32
  809ed0:	1185c83a 	sub	r2,r2,r6
  809ed4:	d9000017 	ldw	r4,0(sp)
  809ed8:	1886983a 	sll	r3,r3,r2
  809edc:	1906b03a 	or	r3,r3,r4
  809ee0:	90c00515 	stw	r3,20(r18)
  809ee4:	d8c00117 	ldw	r3,4(sp)
  809ee8:	1986d83a 	srl	r3,r3,r6
  809eec:	d8c00115 	stw	r3,4(sp)
  809ef0:	180b003a 	cmpeq	r5,r3,zero
  809ef4:	00800084 	movi	r2,2
  809ef8:	114bc83a 	sub	r5,r2,r5
  809efc:	80c00115 	stw	r3,4(r16)
  809f00:	91400415 	stw	r5,16(r18)
  809f04:	a0001a1e 	bne	r20,zero,809f70 <__d2b+0x140>
  809f08:	3545883a 	add	r2,r6,r21
  809f0c:	10bef344 	addi	r2,r2,-1075
  809f10:	00c00d44 	movi	r3,53
  809f14:	b0800015 	stw	r2,0(r22)
  809f18:	1987c83a 	sub	r3,r3,r6
  809f1c:	b8c00015 	stw	r3,0(r23)
  809f20:	9005883a 	mov	r2,r18
  809f24:	dfc00a17 	ldw	ra,40(sp)
  809f28:	ddc00917 	ldw	r23,36(sp)
  809f2c:	dd800817 	ldw	r22,32(sp)
  809f30:	dd400717 	ldw	r21,28(sp)
  809f34:	dd000617 	ldw	r20,24(sp)
  809f38:	dcc00517 	ldw	r19,20(sp)
  809f3c:	dc800417 	ldw	r18,16(sp)
  809f40:	dc400317 	ldw	r17,12(sp)
  809f44:	dc000217 	ldw	r16,8(sp)
  809f48:	dec00b04 	addi	sp,sp,44
  809f4c:	f800283a 	ret
  809f50:	d9000104 	addi	r4,sp,4
  809f54:	080988c0 	call	80988c <__lo0bits>
  809f58:	11800804 	addi	r6,r2,32
  809f5c:	d8800117 	ldw	r2,4(sp)
  809f60:	94c00415 	stw	r19,16(r18)
  809f64:	980b883a 	mov	r5,r19
  809f68:	90800515 	stw	r2,20(r18)
  809f6c:	a03fe626 	beq	r20,zero,809f08 <__d2b+0xd8>
  809f70:	2945883a 	add	r2,r5,r5
  809f74:	1085883a 	add	r2,r2,r2
  809f78:	1405883a 	add	r2,r2,r16
  809f7c:	113fff17 	ldw	r4,-4(r2)
  809f80:	30fef384 	addi	r3,r6,-1074
  809f84:	2820917a 	slli	r16,r5,5
  809f88:	b0c00015 	stw	r3,0(r22)
  809f8c:	080981c0 	call	80981c <__hi0bits>
  809f90:	80a1c83a 	sub	r16,r16,r2
  809f94:	bc000015 	stw	r16,0(r23)
  809f98:	003fe106 	br	809f20 <__d2b+0xf0>
  809f9c:	d8800017 	ldw	r2,0(sp)
  809fa0:	90800515 	stw	r2,20(r18)
  809fa4:	d8c00117 	ldw	r3,4(sp)
  809fa8:	003fd106 	br	809ef0 <__d2b+0xc0>

00809fac <__mdiff>:
  809fac:	defffb04 	addi	sp,sp,-20
  809fb0:	dc000015 	stw	r16,0(sp)
  809fb4:	2821883a 	mov	r16,r5
  809fb8:	dc800215 	stw	r18,8(sp)
  809fbc:	300b883a 	mov	r5,r6
  809fc0:	2025883a 	mov	r18,r4
  809fc4:	8009883a 	mov	r4,r16
  809fc8:	dc400115 	stw	r17,4(sp)
  809fcc:	dfc00415 	stw	ra,16(sp)
  809fd0:	dcc00315 	stw	r19,12(sp)
  809fd4:	3023883a 	mov	r17,r6
  809fd8:	08099500 	call	809950 <__mcmp>
  809fdc:	10004226 	beq	r2,zero,80a0e8 <__mdiff+0x13c>
  809fe0:	10005016 	blt	r2,zero,80a124 <__mdiff+0x178>
  809fe4:	0027883a 	mov	r19,zero
  809fe8:	81400117 	ldw	r5,4(r16)
  809fec:	9009883a 	mov	r4,r18
  809ff0:	0809d740 	call	809d74 <_Balloc>
  809ff4:	1019883a 	mov	r12,r2
  809ff8:	82800417 	ldw	r10,16(r16)
  809ffc:	88800417 	ldw	r2,16(r17)
  80a000:	81800504 	addi	r6,r16,20
  80a004:	5287883a 	add	r3,r10,r10
  80a008:	1085883a 	add	r2,r2,r2
  80a00c:	18c7883a 	add	r3,r3,r3
  80a010:	1085883a 	add	r2,r2,r2
  80a014:	8a000504 	addi	r8,r17,20
  80a018:	64c00315 	stw	r19,12(r12)
  80a01c:	30db883a 	add	r13,r6,r3
  80a020:	4097883a 	add	r11,r8,r2
  80a024:	61c00504 	addi	r7,r12,20
  80a028:	0013883a 	mov	r9,zero
  80a02c:	31000017 	ldw	r4,0(r6)
  80a030:	41400017 	ldw	r5,0(r8)
  80a034:	42000104 	addi	r8,r8,4
  80a038:	20bfffcc 	andi	r2,r4,65535
  80a03c:	28ffffcc 	andi	r3,r5,65535
  80a040:	10c5c83a 	sub	r2,r2,r3
  80a044:	1245883a 	add	r2,r2,r9
  80a048:	2008d43a 	srli	r4,r4,16
  80a04c:	280ad43a 	srli	r5,r5,16
  80a050:	1007d43a 	srai	r3,r2,16
  80a054:	3880000d 	sth	r2,0(r7)
  80a058:	2149c83a 	sub	r4,r4,r5
  80a05c:	20c9883a 	add	r4,r4,r3
  80a060:	3900008d 	sth	r4,2(r7)
  80a064:	31800104 	addi	r6,r6,4
  80a068:	39c00104 	addi	r7,r7,4
  80a06c:	2013d43a 	srai	r9,r4,16
  80a070:	42ffee36 	bltu	r8,r11,80a02c <__mdiff+0x80>
  80a074:	33400c2e 	bgeu	r6,r13,80a0a8 <__mdiff+0xfc>
  80a078:	30800017 	ldw	r2,0(r6)
  80a07c:	31800104 	addi	r6,r6,4
  80a080:	10ffffcc 	andi	r3,r2,65535
  80a084:	1a47883a 	add	r3,r3,r9
  80a088:	1004d43a 	srli	r2,r2,16
  80a08c:	1809d43a 	srai	r4,r3,16
  80a090:	38c0000d 	sth	r3,0(r7)
  80a094:	1105883a 	add	r2,r2,r4
  80a098:	3880008d 	sth	r2,2(r7)
  80a09c:	1013d43a 	srai	r9,r2,16
  80a0a0:	39c00104 	addi	r7,r7,4
  80a0a4:	337ff436 	bltu	r6,r13,80a078 <__mdiff+0xcc>
  80a0a8:	38bfff17 	ldw	r2,-4(r7)
  80a0ac:	38ffff04 	addi	r3,r7,-4
  80a0b0:	1000041e 	bne	r2,zero,80a0c4 <__mdiff+0x118>
  80a0b4:	18ffff04 	addi	r3,r3,-4
  80a0b8:	18800017 	ldw	r2,0(r3)
  80a0bc:	52bfffc4 	addi	r10,r10,-1
  80a0c0:	103ffc26 	beq	r2,zero,80a0b4 <__mdiff+0x108>
  80a0c4:	6005883a 	mov	r2,r12
  80a0c8:	62800415 	stw	r10,16(r12)
  80a0cc:	dfc00417 	ldw	ra,16(sp)
  80a0d0:	dcc00317 	ldw	r19,12(sp)
  80a0d4:	dc800217 	ldw	r18,8(sp)
  80a0d8:	dc400117 	ldw	r17,4(sp)
  80a0dc:	dc000017 	ldw	r16,0(sp)
  80a0e0:	dec00504 	addi	sp,sp,20
  80a0e4:	f800283a 	ret
  80a0e8:	9009883a 	mov	r4,r18
  80a0ec:	000b883a 	mov	r5,zero
  80a0f0:	0809d740 	call	809d74 <_Balloc>
  80a0f4:	1019883a 	mov	r12,r2
  80a0f8:	00800044 	movi	r2,1
  80a0fc:	60800415 	stw	r2,16(r12)
  80a100:	6005883a 	mov	r2,r12
  80a104:	60000515 	stw	zero,20(r12)
  80a108:	dfc00417 	ldw	ra,16(sp)
  80a10c:	dcc00317 	ldw	r19,12(sp)
  80a110:	dc800217 	ldw	r18,8(sp)
  80a114:	dc400117 	ldw	r17,4(sp)
  80a118:	dc000017 	ldw	r16,0(sp)
  80a11c:	dec00504 	addi	sp,sp,20
  80a120:	f800283a 	ret
  80a124:	880d883a 	mov	r6,r17
  80a128:	04c00044 	movi	r19,1
  80a12c:	8023883a 	mov	r17,r16
  80a130:	3021883a 	mov	r16,r6
  80a134:	003fac06 	br	809fe8 <__mdiff+0x3c>

0080a138 <__lshift>:
  80a138:	defff904 	addi	sp,sp,-28
  80a13c:	28800417 	ldw	r2,16(r5)
  80a140:	dc000015 	stw	r16,0(sp)
  80a144:	3021d17a 	srai	r16,r6,5
  80a148:	28c00217 	ldw	r3,8(r5)
  80a14c:	10800044 	addi	r2,r2,1
  80a150:	dc400115 	stw	r17,4(sp)
  80a154:	80a3883a 	add	r17,r16,r2
  80a158:	dd400515 	stw	r21,20(sp)
  80a15c:	dd000415 	stw	r20,16(sp)
  80a160:	dc800215 	stw	r18,8(sp)
  80a164:	dfc00615 	stw	ra,24(sp)
  80a168:	2825883a 	mov	r18,r5
  80a16c:	dcc00315 	stw	r19,12(sp)
  80a170:	3029883a 	mov	r20,r6
  80a174:	202b883a 	mov	r21,r4
  80a178:	29400117 	ldw	r5,4(r5)
  80a17c:	1c40030e 	bge	r3,r17,80a18c <__lshift+0x54>
  80a180:	18c7883a 	add	r3,r3,r3
  80a184:	29400044 	addi	r5,r5,1
  80a188:	1c7ffd16 	blt	r3,r17,80a180 <__lshift+0x48>
  80a18c:	a809883a 	mov	r4,r21
  80a190:	0809d740 	call	809d74 <_Balloc>
  80a194:	1027883a 	mov	r19,r2
  80a198:	11400504 	addi	r5,r2,20
  80a19c:	0400090e 	bge	zero,r16,80a1c4 <__lshift+0x8c>
  80a1a0:	2805883a 	mov	r2,r5
  80a1a4:	0007883a 	mov	r3,zero
  80a1a8:	18c00044 	addi	r3,r3,1
  80a1ac:	10000015 	stw	zero,0(r2)
  80a1b0:	10800104 	addi	r2,r2,4
  80a1b4:	80fffc1e 	bne	r16,r3,80a1a8 <__lshift+0x70>
  80a1b8:	8405883a 	add	r2,r16,r16
  80a1bc:	1085883a 	add	r2,r2,r2
  80a1c0:	288b883a 	add	r5,r5,r2
  80a1c4:	90800417 	ldw	r2,16(r18)
  80a1c8:	91000504 	addi	r4,r18,20
  80a1cc:	a18007cc 	andi	r6,r20,31
  80a1d0:	1085883a 	add	r2,r2,r2
  80a1d4:	1085883a 	add	r2,r2,r2
  80a1d8:	208f883a 	add	r7,r4,r2
  80a1dc:	30001e26 	beq	r6,zero,80a258 <__lshift+0x120>
  80a1e0:	00800804 	movi	r2,32
  80a1e4:	1191c83a 	sub	r8,r2,r6
  80a1e8:	0007883a 	mov	r3,zero
  80a1ec:	20800017 	ldw	r2,0(r4)
  80a1f0:	1184983a 	sll	r2,r2,r6
  80a1f4:	1884b03a 	or	r2,r3,r2
  80a1f8:	28800015 	stw	r2,0(r5)
  80a1fc:	20c00017 	ldw	r3,0(r4)
  80a200:	21000104 	addi	r4,r4,4
  80a204:	29400104 	addi	r5,r5,4
  80a208:	1a06d83a 	srl	r3,r3,r8
  80a20c:	21fff736 	bltu	r4,r7,80a1ec <__lshift+0xb4>
  80a210:	28c00015 	stw	r3,0(r5)
  80a214:	18000126 	beq	r3,zero,80a21c <__lshift+0xe4>
  80a218:	8c400044 	addi	r17,r17,1
  80a21c:	88bfffc4 	addi	r2,r17,-1
  80a220:	98800415 	stw	r2,16(r19)
  80a224:	a809883a 	mov	r4,r21
  80a228:	900b883a 	mov	r5,r18
  80a22c:	08097f40 	call	8097f4 <_Bfree>
  80a230:	9805883a 	mov	r2,r19
  80a234:	dfc00617 	ldw	ra,24(sp)
  80a238:	dd400517 	ldw	r21,20(sp)
  80a23c:	dd000417 	ldw	r20,16(sp)
  80a240:	dcc00317 	ldw	r19,12(sp)
  80a244:	dc800217 	ldw	r18,8(sp)
  80a248:	dc400117 	ldw	r17,4(sp)
  80a24c:	dc000017 	ldw	r16,0(sp)
  80a250:	dec00704 	addi	sp,sp,28
  80a254:	f800283a 	ret
  80a258:	20800017 	ldw	r2,0(r4)
  80a25c:	21000104 	addi	r4,r4,4
  80a260:	28800015 	stw	r2,0(r5)
  80a264:	29400104 	addi	r5,r5,4
  80a268:	21ffec2e 	bgeu	r4,r7,80a21c <__lshift+0xe4>
  80a26c:	20800017 	ldw	r2,0(r4)
  80a270:	21000104 	addi	r4,r4,4
  80a274:	28800015 	stw	r2,0(r5)
  80a278:	29400104 	addi	r5,r5,4
  80a27c:	21fff636 	bltu	r4,r7,80a258 <__lshift+0x120>
  80a280:	003fe606 	br	80a21c <__lshift+0xe4>

0080a284 <__multiply>:
  80a284:	defff904 	addi	sp,sp,-28
  80a288:	dcc00315 	stw	r19,12(sp)
  80a28c:	dc800215 	stw	r18,8(sp)
  80a290:	2cc00417 	ldw	r19,16(r5)
  80a294:	34800417 	ldw	r18,16(r6)
  80a298:	dd000415 	stw	r20,16(sp)
  80a29c:	dc400115 	stw	r17,4(sp)
  80a2a0:	dfc00615 	stw	ra,24(sp)
  80a2a4:	dd400515 	stw	r21,20(sp)
  80a2a8:	dc000015 	stw	r16,0(sp)
  80a2ac:	2823883a 	mov	r17,r5
  80a2b0:	3029883a 	mov	r20,r6
  80a2b4:	9c80040e 	bge	r19,r18,80a2c8 <__multiply+0x44>
  80a2b8:	9027883a 	mov	r19,r18
  80a2bc:	2c800417 	ldw	r18,16(r5)
  80a2c0:	2829883a 	mov	r20,r5
  80a2c4:	3023883a 	mov	r17,r6
  80a2c8:	88800217 	ldw	r2,8(r17)
  80a2cc:	9ca1883a 	add	r16,r19,r18
  80a2d0:	89400117 	ldw	r5,4(r17)
  80a2d4:	1400010e 	bge	r2,r16,80a2dc <__multiply+0x58>
  80a2d8:	29400044 	addi	r5,r5,1
  80a2dc:	0809d740 	call	809d74 <_Balloc>
  80a2e0:	102b883a 	mov	r21,r2
  80a2e4:	8405883a 	add	r2,r16,r16
  80a2e8:	1085883a 	add	r2,r2,r2
  80a2ec:	a9000504 	addi	r4,r21,20
  80a2f0:	209d883a 	add	r14,r4,r2
  80a2f4:	2380042e 	bgeu	r4,r14,80a308 <__multiply+0x84>
  80a2f8:	2005883a 	mov	r2,r4
  80a2fc:	10000015 	stw	zero,0(r2)
  80a300:	10800104 	addi	r2,r2,4
  80a304:	13bffd36 	bltu	r2,r14,80a2fc <__multiply+0x78>
  80a308:	9485883a 	add	r2,r18,r18
  80a30c:	9cc7883a 	add	r3,r19,r19
  80a310:	a1800504 	addi	r6,r20,20
  80a314:	1085883a 	add	r2,r2,r2
  80a318:	8b400504 	addi	r13,r17,20
  80a31c:	18c7883a 	add	r3,r3,r3
  80a320:	309f883a 	add	r15,r6,r2
  80a324:	68d7883a 	add	r11,r13,r3
  80a328:	33c03b2e 	bgeu	r6,r15,80a418 <__multiply+0x194>
  80a32c:	2019883a 	mov	r12,r4
  80a330:	30800017 	ldw	r2,0(r6)
  80a334:	127fffcc 	andi	r9,r2,65535
  80a338:	48001826 	beq	r9,zero,80a39c <__multiply+0x118>
  80a33c:	6811883a 	mov	r8,r13
  80a340:	600f883a 	mov	r7,r12
  80a344:	0015883a 	mov	r10,zero
  80a348:	40c00017 	ldw	r3,0(r8)
  80a34c:	39400017 	ldw	r5,0(r7)
  80a350:	42000104 	addi	r8,r8,4
  80a354:	193fffcc 	andi	r4,r3,65535
  80a358:	4909383a 	mul	r4,r9,r4
  80a35c:	1806d43a 	srli	r3,r3,16
  80a360:	28bfffcc 	andi	r2,r5,65535
  80a364:	5085883a 	add	r2,r10,r2
  80a368:	2089883a 	add	r4,r4,r2
  80a36c:	48c7383a 	mul	r3,r9,r3
  80a370:	280ad43a 	srli	r5,r5,16
  80a374:	2004d43a 	srli	r2,r4,16
  80a378:	3900000d 	sth	r4,0(r7)
  80a37c:	1947883a 	add	r3,r3,r5
  80a380:	10c5883a 	add	r2,r2,r3
  80a384:	3880008d 	sth	r2,2(r7)
  80a388:	1014d43a 	srli	r10,r2,16
  80a38c:	39c00104 	addi	r7,r7,4
  80a390:	42ffed36 	bltu	r8,r11,80a348 <__multiply+0xc4>
  80a394:	3a800015 	stw	r10,0(r7)
  80a398:	30800017 	ldw	r2,0(r6)
  80a39c:	1012d43a 	srli	r9,r2,16
  80a3a0:	48001926 	beq	r9,zero,80a408 <__multiply+0x184>
  80a3a4:	60800017 	ldw	r2,0(r12)
  80a3a8:	6811883a 	mov	r8,r13
  80a3ac:	600f883a 	mov	r7,r12
  80a3b0:	0015883a 	mov	r10,zero
  80a3b4:	100b883a 	mov	r5,r2
  80a3b8:	41000017 	ldw	r4,0(r8)
  80a3bc:	2806d43a 	srli	r3,r5,16
  80a3c0:	3880000d 	sth	r2,0(r7)
  80a3c4:	20bfffcc 	andi	r2,r4,65535
  80a3c8:	4885383a 	mul	r2,r9,r2
  80a3cc:	50c7883a 	add	r3,r10,r3
  80a3d0:	2008d43a 	srli	r4,r4,16
  80a3d4:	10c5883a 	add	r2,r2,r3
  80a3d8:	3880008d 	sth	r2,2(r7)
  80a3dc:	39c00104 	addi	r7,r7,4
  80a3e0:	39400017 	ldw	r5,0(r7)
  80a3e4:	4909383a 	mul	r4,r9,r4
  80a3e8:	1004d43a 	srli	r2,r2,16
  80a3ec:	28ffffcc 	andi	r3,r5,65535
  80a3f0:	20c9883a 	add	r4,r4,r3
  80a3f4:	1105883a 	add	r2,r2,r4
  80a3f8:	42000104 	addi	r8,r8,4
  80a3fc:	1014d43a 	srli	r10,r2,16
  80a400:	42ffed36 	bltu	r8,r11,80a3b8 <__multiply+0x134>
  80a404:	38800015 	stw	r2,0(r7)
  80a408:	31800104 	addi	r6,r6,4
  80a40c:	33c0022e 	bgeu	r6,r15,80a418 <__multiply+0x194>
  80a410:	63000104 	addi	r12,r12,4
  80a414:	003fc606 	br	80a330 <__multiply+0xac>
  80a418:	0400090e 	bge	zero,r16,80a440 <__multiply+0x1bc>
  80a41c:	70bfff17 	ldw	r2,-4(r14)
  80a420:	70ffff04 	addi	r3,r14,-4
  80a424:	10000326 	beq	r2,zero,80a434 <__multiply+0x1b0>
  80a428:	00000506 	br	80a440 <__multiply+0x1bc>
  80a42c:	18800017 	ldw	r2,0(r3)
  80a430:	1000031e 	bne	r2,zero,80a440 <__multiply+0x1bc>
  80a434:	843fffc4 	addi	r16,r16,-1
  80a438:	18ffff04 	addi	r3,r3,-4
  80a43c:	803ffb1e 	bne	r16,zero,80a42c <__multiply+0x1a8>
  80a440:	a805883a 	mov	r2,r21
  80a444:	ac000415 	stw	r16,16(r21)
  80a448:	dfc00617 	ldw	ra,24(sp)
  80a44c:	dd400517 	ldw	r21,20(sp)
  80a450:	dd000417 	ldw	r20,16(sp)
  80a454:	dcc00317 	ldw	r19,12(sp)
  80a458:	dc800217 	ldw	r18,8(sp)
  80a45c:	dc400117 	ldw	r17,4(sp)
  80a460:	dc000017 	ldw	r16,0(sp)
  80a464:	dec00704 	addi	sp,sp,28
  80a468:	f800283a 	ret

0080a46c <__i2b>:
  80a46c:	defffd04 	addi	sp,sp,-12
  80a470:	dc000015 	stw	r16,0(sp)
  80a474:	04000044 	movi	r16,1
  80a478:	dc800115 	stw	r18,4(sp)
  80a47c:	2825883a 	mov	r18,r5
  80a480:	800b883a 	mov	r5,r16
  80a484:	dfc00215 	stw	ra,8(sp)
  80a488:	0809d740 	call	809d74 <_Balloc>
  80a48c:	14000415 	stw	r16,16(r2)
  80a490:	14800515 	stw	r18,20(r2)
  80a494:	dfc00217 	ldw	ra,8(sp)
  80a498:	dc800117 	ldw	r18,4(sp)
  80a49c:	dc000017 	ldw	r16,0(sp)
  80a4a0:	dec00304 	addi	sp,sp,12
  80a4a4:	f800283a 	ret

0080a4a8 <__multadd>:
  80a4a8:	defffa04 	addi	sp,sp,-24
  80a4ac:	dc800215 	stw	r18,8(sp)
  80a4b0:	2c800417 	ldw	r18,16(r5)
  80a4b4:	dd000415 	stw	r20,16(sp)
  80a4b8:	dcc00315 	stw	r19,12(sp)
  80a4bc:	dc000015 	stw	r16,0(sp)
  80a4c0:	dfc00515 	stw	ra,20(sp)
  80a4c4:	3821883a 	mov	r16,r7
  80a4c8:	dc400115 	stw	r17,4(sp)
  80a4cc:	2827883a 	mov	r19,r5
  80a4d0:	2029883a 	mov	r20,r4
  80a4d4:	2a000504 	addi	r8,r5,20
  80a4d8:	000f883a 	mov	r7,zero
  80a4dc:	40800017 	ldw	r2,0(r8)
  80a4e0:	39c00044 	addi	r7,r7,1
  80a4e4:	10ffffcc 	andi	r3,r2,65535
  80a4e8:	1987383a 	mul	r3,r3,r6
  80a4ec:	1004d43a 	srli	r2,r2,16
  80a4f0:	1c07883a 	add	r3,r3,r16
  80a4f4:	180ad43a 	srli	r5,r3,16
  80a4f8:	1185383a 	mul	r2,r2,r6
  80a4fc:	18ffffcc 	andi	r3,r3,65535
  80a500:	1145883a 	add	r2,r2,r5
  80a504:	1008943a 	slli	r4,r2,16
  80a508:	1020d43a 	srli	r16,r2,16
  80a50c:	20c9883a 	add	r4,r4,r3
  80a510:	41000015 	stw	r4,0(r8)
  80a514:	42000104 	addi	r8,r8,4
  80a518:	3cbff016 	blt	r7,r18,80a4dc <__multadd+0x34>
  80a51c:	80000826 	beq	r16,zero,80a540 <__multadd+0x98>
  80a520:	98800217 	ldw	r2,8(r19)
  80a524:	90800f0e 	bge	r18,r2,80a564 <__multadd+0xbc>
  80a528:	9485883a 	add	r2,r18,r18
  80a52c:	1085883a 	add	r2,r2,r2
  80a530:	14c5883a 	add	r2,r2,r19
  80a534:	90c00044 	addi	r3,r18,1
  80a538:	14000515 	stw	r16,20(r2)
  80a53c:	98c00415 	stw	r3,16(r19)
  80a540:	9805883a 	mov	r2,r19
  80a544:	dfc00517 	ldw	ra,20(sp)
  80a548:	dd000417 	ldw	r20,16(sp)
  80a54c:	dcc00317 	ldw	r19,12(sp)
  80a550:	dc800217 	ldw	r18,8(sp)
  80a554:	dc400117 	ldw	r17,4(sp)
  80a558:	dc000017 	ldw	r16,0(sp)
  80a55c:	dec00604 	addi	sp,sp,24
  80a560:	f800283a 	ret
  80a564:	99400117 	ldw	r5,4(r19)
  80a568:	a009883a 	mov	r4,r20
  80a56c:	29400044 	addi	r5,r5,1
  80a570:	0809d740 	call	809d74 <_Balloc>
  80a574:	99800417 	ldw	r6,16(r19)
  80a578:	99400304 	addi	r5,r19,12
  80a57c:	11000304 	addi	r4,r2,12
  80a580:	318d883a 	add	r6,r6,r6
  80a584:	318d883a 	add	r6,r6,r6
  80a588:	31800204 	addi	r6,r6,8
  80a58c:	1023883a 	mov	r17,r2
  80a590:	08032540 	call	803254 <memcpy>
  80a594:	980b883a 	mov	r5,r19
  80a598:	a009883a 	mov	r4,r20
  80a59c:	08097f40 	call	8097f4 <_Bfree>
  80a5a0:	8827883a 	mov	r19,r17
  80a5a4:	003fe006 	br	80a528 <__multadd+0x80>

0080a5a8 <__pow5mult>:
  80a5a8:	defffa04 	addi	sp,sp,-24
  80a5ac:	308000cc 	andi	r2,r6,3
  80a5b0:	dd000415 	stw	r20,16(sp)
  80a5b4:	dcc00315 	stw	r19,12(sp)
  80a5b8:	dc000015 	stw	r16,0(sp)
  80a5bc:	dfc00515 	stw	ra,20(sp)
  80a5c0:	dc800215 	stw	r18,8(sp)
  80a5c4:	dc400115 	stw	r17,4(sp)
  80a5c8:	3021883a 	mov	r16,r6
  80a5cc:	2027883a 	mov	r19,r4
  80a5d0:	2829883a 	mov	r20,r5
  80a5d4:	10002b1e 	bne	r2,zero,80a684 <__pow5mult+0xdc>
  80a5d8:	8025d0ba 	srai	r18,r16,2
  80a5dc:	90001b26 	beq	r18,zero,80a64c <__pow5mult+0xa4>
  80a5e0:	9c001217 	ldw	r16,72(r19)
  80a5e4:	8000081e 	bne	r16,zero,80a608 <__pow5mult+0x60>
  80a5e8:	00003006 	br	80a6ac <__pow5mult+0x104>
  80a5ec:	800b883a 	mov	r5,r16
  80a5f0:	800d883a 	mov	r6,r16
  80a5f4:	9809883a 	mov	r4,r19
  80a5f8:	90001426 	beq	r18,zero,80a64c <__pow5mult+0xa4>
  80a5fc:	80800017 	ldw	r2,0(r16)
  80a600:	10001b26 	beq	r2,zero,80a670 <__pow5mult+0xc8>
  80a604:	1021883a 	mov	r16,r2
  80a608:	9080004c 	andi	r2,r18,1
  80a60c:	1005003a 	cmpeq	r2,r2,zero
  80a610:	9025d07a 	srai	r18,r18,1
  80a614:	800d883a 	mov	r6,r16
  80a618:	9809883a 	mov	r4,r19
  80a61c:	a00b883a 	mov	r5,r20
  80a620:	103ff21e 	bne	r2,zero,80a5ec <__pow5mult+0x44>
  80a624:	080a2840 	call	80a284 <__multiply>
  80a628:	a00b883a 	mov	r5,r20
  80a62c:	9809883a 	mov	r4,r19
  80a630:	1023883a 	mov	r17,r2
  80a634:	08097f40 	call	8097f4 <_Bfree>
  80a638:	8829883a 	mov	r20,r17
  80a63c:	800b883a 	mov	r5,r16
  80a640:	800d883a 	mov	r6,r16
  80a644:	9809883a 	mov	r4,r19
  80a648:	903fec1e 	bne	r18,zero,80a5fc <__pow5mult+0x54>
  80a64c:	a005883a 	mov	r2,r20
  80a650:	dfc00517 	ldw	ra,20(sp)
  80a654:	dd000417 	ldw	r20,16(sp)
  80a658:	dcc00317 	ldw	r19,12(sp)
  80a65c:	dc800217 	ldw	r18,8(sp)
  80a660:	dc400117 	ldw	r17,4(sp)
  80a664:	dc000017 	ldw	r16,0(sp)
  80a668:	dec00604 	addi	sp,sp,24
  80a66c:	f800283a 	ret
  80a670:	080a2840 	call	80a284 <__multiply>
  80a674:	80800015 	stw	r2,0(r16)
  80a678:	1021883a 	mov	r16,r2
  80a67c:	10000015 	stw	zero,0(r2)
  80a680:	003fe106 	br	80a608 <__pow5mult+0x60>
  80a684:	1085883a 	add	r2,r2,r2
  80a688:	00c02074 	movhi	r3,129
  80a68c:	18d43d04 	addi	r3,r3,20724
  80a690:	1085883a 	add	r2,r2,r2
  80a694:	10c5883a 	add	r2,r2,r3
  80a698:	11bfff17 	ldw	r6,-4(r2)
  80a69c:	000f883a 	mov	r7,zero
  80a6a0:	080a4a80 	call	80a4a8 <__multadd>
  80a6a4:	1029883a 	mov	r20,r2
  80a6a8:	003fcb06 	br	80a5d8 <__pow5mult+0x30>
  80a6ac:	9809883a 	mov	r4,r19
  80a6b0:	01409c44 	movi	r5,625
  80a6b4:	080a46c0 	call	80a46c <__i2b>
  80a6b8:	98801215 	stw	r2,72(r19)
  80a6bc:	1021883a 	mov	r16,r2
  80a6c0:	10000015 	stw	zero,0(r2)
  80a6c4:	003fd006 	br	80a608 <__pow5mult+0x60>

0080a6c8 <__s2b>:
  80a6c8:	defff904 	addi	sp,sp,-28
  80a6cc:	dcc00315 	stw	r19,12(sp)
  80a6d0:	dc800215 	stw	r18,8(sp)
  80a6d4:	2827883a 	mov	r19,r5
  80a6d8:	2025883a 	mov	r18,r4
  80a6dc:	01400244 	movi	r5,9
  80a6e0:	39000204 	addi	r4,r7,8
  80a6e4:	dd000415 	stw	r20,16(sp)
  80a6e8:	dc400115 	stw	r17,4(sp)
  80a6ec:	dfc00615 	stw	ra,24(sp)
  80a6f0:	dd400515 	stw	r21,20(sp)
  80a6f4:	dc000015 	stw	r16,0(sp)
  80a6f8:	3829883a 	mov	r20,r7
  80a6fc:	3023883a 	mov	r17,r6
  80a700:	080fb280 	call	80fb28 <__divsi3>
  80a704:	00c00044 	movi	r3,1
  80a708:	1880350e 	bge	r3,r2,80a7e0 <__s2b+0x118>
  80a70c:	000b883a 	mov	r5,zero
  80a710:	18c7883a 	add	r3,r3,r3
  80a714:	29400044 	addi	r5,r5,1
  80a718:	18bffd16 	blt	r3,r2,80a710 <__s2b+0x48>
  80a71c:	9009883a 	mov	r4,r18
  80a720:	0809d740 	call	809d74 <_Balloc>
  80a724:	1011883a 	mov	r8,r2
  80a728:	d8800717 	ldw	r2,28(sp)
  80a72c:	00c00044 	movi	r3,1
  80a730:	01800244 	movi	r6,9
  80a734:	40800515 	stw	r2,20(r8)
  80a738:	40c00415 	stw	r3,16(r8)
  80a73c:	3440260e 	bge	r6,r17,80a7d8 <__s2b+0x110>
  80a740:	3021883a 	mov	r16,r6
  80a744:	99ab883a 	add	r21,r19,r6
  80a748:	9c05883a 	add	r2,r19,r16
  80a74c:	11c00007 	ldb	r7,0(r2)
  80a750:	400b883a 	mov	r5,r8
  80a754:	9009883a 	mov	r4,r18
  80a758:	39fff404 	addi	r7,r7,-48
  80a75c:	01800284 	movi	r6,10
  80a760:	080a4a80 	call	80a4a8 <__multadd>
  80a764:	84000044 	addi	r16,r16,1
  80a768:	1011883a 	mov	r8,r2
  80a76c:	8c3ff61e 	bne	r17,r16,80a748 <__s2b+0x80>
  80a770:	ac45883a 	add	r2,r21,r17
  80a774:	117ffe04 	addi	r5,r2,-8
  80a778:	880d883a 	mov	r6,r17
  80a77c:	35000c0e 	bge	r6,r20,80a7b0 <__s2b+0xe8>
  80a780:	a185c83a 	sub	r2,r20,r6
  80a784:	2821883a 	mov	r16,r5
  80a788:	28a3883a 	add	r17,r5,r2
  80a78c:	81c00007 	ldb	r7,0(r16)
  80a790:	400b883a 	mov	r5,r8
  80a794:	9009883a 	mov	r4,r18
  80a798:	39fff404 	addi	r7,r7,-48
  80a79c:	01800284 	movi	r6,10
  80a7a0:	080a4a80 	call	80a4a8 <__multadd>
  80a7a4:	84000044 	addi	r16,r16,1
  80a7a8:	1011883a 	mov	r8,r2
  80a7ac:	847ff71e 	bne	r16,r17,80a78c <__s2b+0xc4>
  80a7b0:	4005883a 	mov	r2,r8
  80a7b4:	dfc00617 	ldw	ra,24(sp)
  80a7b8:	dd400517 	ldw	r21,20(sp)
  80a7bc:	dd000417 	ldw	r20,16(sp)
  80a7c0:	dcc00317 	ldw	r19,12(sp)
  80a7c4:	dc800217 	ldw	r18,8(sp)
  80a7c8:	dc400117 	ldw	r17,4(sp)
  80a7cc:	dc000017 	ldw	r16,0(sp)
  80a7d0:	dec00704 	addi	sp,sp,28
  80a7d4:	f800283a 	ret
  80a7d8:	99400284 	addi	r5,r19,10
  80a7dc:	003fe706 	br	80a77c <__s2b+0xb4>
  80a7e0:	000b883a 	mov	r5,zero
  80a7e4:	003fcd06 	br	80a71c <__s2b+0x54>

0080a7e8 <_read_r>:
  80a7e8:	defffd04 	addi	sp,sp,-12
  80a7ec:	dc000015 	stw	r16,0(sp)
  80a7f0:	040020b4 	movhi	r16,130
  80a7f4:	84232604 	addi	r16,r16,-29544
  80a7f8:	dc400115 	stw	r17,4(sp)
  80a7fc:	80000015 	stw	zero,0(r16)
  80a800:	2023883a 	mov	r17,r4
  80a804:	2809883a 	mov	r4,r5
  80a808:	300b883a 	mov	r5,r6
  80a80c:	380d883a 	mov	r6,r7
  80a810:	dfc00215 	stw	ra,8(sp)
  80a814:	08111240 	call	811124 <read>
  80a818:	1007883a 	mov	r3,r2
  80a81c:	00bfffc4 	movi	r2,-1
  80a820:	18800626 	beq	r3,r2,80a83c <_read_r+0x54>
  80a824:	1805883a 	mov	r2,r3
  80a828:	dfc00217 	ldw	ra,8(sp)
  80a82c:	dc400117 	ldw	r17,4(sp)
  80a830:	dc000017 	ldw	r16,0(sp)
  80a834:	dec00304 	addi	sp,sp,12
  80a838:	f800283a 	ret
  80a83c:	80800017 	ldw	r2,0(r16)
  80a840:	103ff826 	beq	r2,zero,80a824 <_read_r+0x3c>
  80a844:	88800015 	stw	r2,0(r17)
  80a848:	1805883a 	mov	r2,r3
  80a84c:	dfc00217 	ldw	ra,8(sp)
  80a850:	dc400117 	ldw	r17,4(sp)
  80a854:	dc000017 	ldw	r16,0(sp)
  80a858:	dec00304 	addi	sp,sp,12
  80a85c:	f800283a 	ret

0080a860 <__isinfd>:
  80a860:	200d883a 	mov	r6,r4
  80a864:	0109c83a 	sub	r4,zero,r4
  80a868:	2188b03a 	or	r4,r4,r6
  80a86c:	2008d7fa 	srli	r4,r4,31
  80a870:	00a00034 	movhi	r2,32768
  80a874:	10bfffc4 	addi	r2,r2,-1
  80a878:	1144703a 	and	r2,r2,r5
  80a87c:	2088b03a 	or	r4,r4,r2
  80a880:	009ffc34 	movhi	r2,32752
  80a884:	1105c83a 	sub	r2,r2,r4
  80a888:	0087c83a 	sub	r3,zero,r2
  80a88c:	10c4b03a 	or	r2,r2,r3
  80a890:	1004d7fa 	srli	r2,r2,31
  80a894:	00c00044 	movi	r3,1
  80a898:	1885c83a 	sub	r2,r3,r2
  80a89c:	f800283a 	ret

0080a8a0 <__isnand>:
  80a8a0:	200d883a 	mov	r6,r4
  80a8a4:	0109c83a 	sub	r4,zero,r4
  80a8a8:	2188b03a 	or	r4,r4,r6
  80a8ac:	2008d7fa 	srli	r4,r4,31
  80a8b0:	00a00034 	movhi	r2,32768
  80a8b4:	10bfffc4 	addi	r2,r2,-1
  80a8b8:	1144703a 	and	r2,r2,r5
  80a8bc:	2088b03a 	or	r4,r4,r2
  80a8c0:	009ffc34 	movhi	r2,32752
  80a8c4:	1105c83a 	sub	r2,r2,r4
  80a8c8:	1004d7fa 	srli	r2,r2,31
  80a8cc:	f800283a 	ret

0080a8d0 <__sccl>:
  80a8d0:	28c00003 	ldbu	r3,0(r5)
  80a8d4:	00801784 	movi	r2,94
  80a8d8:	2a000044 	addi	r8,r5,1
  80a8dc:	18802526 	beq	r3,r2,80a974 <__sccl+0xa4>
  80a8e0:	180f883a 	mov	r7,r3
  80a8e4:	0013883a 	mov	r9,zero
  80a8e8:	000d883a 	mov	r6,zero
  80a8ec:	0007883a 	mov	r3,zero
  80a8f0:	01404004 	movi	r5,256
  80a8f4:	1905883a 	add	r2,r3,r4
  80a8f8:	18c00044 	addi	r3,r3,1
  80a8fc:	11800005 	stb	r6,0(r2)
  80a900:	197ffc1e 	bne	r3,r5,80a8f4 <__sccl+0x24>
  80a904:	38000c26 	beq	r7,zero,80a938 <__sccl+0x68>
  80a908:	00800044 	movi	r2,1
  80a90c:	124dc83a 	sub	r6,r2,r9
  80a910:	3905883a 	add	r2,r7,r4
  80a914:	11800005 	stb	r6,0(r2)
  80a918:	41400044 	addi	r5,r8,1
  80a91c:	02400b44 	movi	r9,45
  80a920:	02801744 	movi	r10,93
  80a924:	28bfffc3 	ldbu	r2,-1(r5)
  80a928:	2811883a 	mov	r8,r5
  80a92c:	12400726 	beq	r2,r9,80a94c <__sccl+0x7c>
  80a930:	12800226 	beq	r2,r10,80a93c <__sccl+0x6c>
  80a934:	1000031e 	bne	r2,zero,80a944 <__sccl+0x74>
  80a938:	423fffc4 	addi	r8,r8,-1
  80a93c:	4005883a 	mov	r2,r8
  80a940:	f800283a 	ret
  80a944:	100f883a 	mov	r7,r2
  80a948:	003ff106 	br	80a910 <__sccl+0x40>
  80a94c:	28c00003 	ldbu	r3,0(r5)
  80a950:	1a800d26 	beq	r3,r10,80a988 <__sccl+0xb8>
  80a954:	19c00c16 	blt	r3,r7,80a988 <__sccl+0xb8>
  80a958:	21c5883a 	add	r2,r4,r7
  80a95c:	39c00044 	addi	r7,r7,1
  80a960:	11800045 	stb	r6,1(r2)
  80a964:	10800044 	addi	r2,r2,1
  80a968:	38fffc16 	blt	r7,r3,80a95c <__sccl+0x8c>
  80a96c:	29400084 	addi	r5,r5,2
  80a970:	003fec06 	br	80a924 <__sccl+0x54>
  80a974:	29c00043 	ldbu	r7,1(r5)
  80a978:	02400044 	movi	r9,1
  80a97c:	2a000084 	addi	r8,r5,2
  80a980:	480d883a 	mov	r6,r9
  80a984:	003fd906 	br	80a8ec <__sccl+0x1c>
  80a988:	01c00b44 	movi	r7,45
  80a98c:	003fe006 	br	80a910 <__sccl+0x40>

0080a990 <nanf>:
  80a990:	009ff034 	movhi	r2,32704
  80a994:	f800283a 	ret

0080a998 <strcmp>:
  80a998:	2144b03a 	or	r2,r4,r5
  80a99c:	108000cc 	andi	r2,r2,3
  80a9a0:	10001d1e 	bne	r2,zero,80aa18 <strcmp+0x80>
  80a9a4:	200f883a 	mov	r7,r4
  80a9a8:	28800017 	ldw	r2,0(r5)
  80a9ac:	21000017 	ldw	r4,0(r4)
  80a9b0:	280d883a 	mov	r6,r5
  80a9b4:	2080161e 	bne	r4,r2,80aa10 <strcmp+0x78>
  80a9b8:	023fbff4 	movhi	r8,65279
  80a9bc:	423fbfc4 	addi	r8,r8,-257
  80a9c0:	2207883a 	add	r3,r4,r8
  80a9c4:	01602074 	movhi	r5,32897
  80a9c8:	29602004 	addi	r5,r5,-32640
  80a9cc:	1946703a 	and	r3,r3,r5
  80a9d0:	0104303a 	nor	r2,zero,r4
  80a9d4:	10c4703a 	and	r2,r2,r3
  80a9d8:	10001c1e 	bne	r2,zero,80aa4c <strcmp+0xb4>
  80a9dc:	4013883a 	mov	r9,r8
  80a9e0:	2811883a 	mov	r8,r5
  80a9e4:	00000106 	br	80a9ec <strcmp+0x54>
  80a9e8:	1800181e 	bne	r3,zero,80aa4c <strcmp+0xb4>
  80a9ec:	39c00104 	addi	r7,r7,4
  80a9f0:	39000017 	ldw	r4,0(r7)
  80a9f4:	31800104 	addi	r6,r6,4
  80a9f8:	31400017 	ldw	r5,0(r6)
  80a9fc:	2245883a 	add	r2,r4,r9
  80aa00:	1204703a 	and	r2,r2,r8
  80aa04:	0106303a 	nor	r3,zero,r4
  80aa08:	1886703a 	and	r3,r3,r2
  80aa0c:	217ff626 	beq	r4,r5,80a9e8 <strcmp+0x50>
  80aa10:	3809883a 	mov	r4,r7
  80aa14:	300b883a 	mov	r5,r6
  80aa18:	20c00007 	ldb	r3,0(r4)
  80aa1c:	1800051e 	bne	r3,zero,80aa34 <strcmp+0x9c>
  80aa20:	00000606 	br	80aa3c <strcmp+0xa4>
  80aa24:	21000044 	addi	r4,r4,1
  80aa28:	20c00007 	ldb	r3,0(r4)
  80aa2c:	29400044 	addi	r5,r5,1
  80aa30:	18000226 	beq	r3,zero,80aa3c <strcmp+0xa4>
  80aa34:	28800007 	ldb	r2,0(r5)
  80aa38:	18bffa26 	beq	r3,r2,80aa24 <strcmp+0x8c>
  80aa3c:	20c00003 	ldbu	r3,0(r4)
  80aa40:	28800003 	ldbu	r2,0(r5)
  80aa44:	1885c83a 	sub	r2,r3,r2
  80aa48:	f800283a 	ret
  80aa4c:	0005883a 	mov	r2,zero
  80aa50:	f800283a 	ret

0080aa54 <match>:
  80aa54:	21800017 	ldw	r6,0(r4)
  80aa58:	01c01004 	movi	r7,64
  80aa5c:	02001684 	movi	r8,90
  80aa60:	28800007 	ldb	r2,0(r5)
  80aa64:	29400044 	addi	r5,r5,1
  80aa68:	10000826 	beq	r2,zero,80aa8c <match+0x38>
  80aa6c:	31800044 	addi	r6,r6,1
  80aa70:	30c00007 	ldb	r3,0(r6)
  80aa74:	38c0020e 	bge	r7,r3,80aa80 <match+0x2c>
  80aa78:	40c00116 	blt	r8,r3,80aa80 <match+0x2c>
  80aa7c:	18c00804 	addi	r3,r3,32
  80aa80:	18bff726 	beq	r3,r2,80aa60 <match+0xc>
  80aa84:	0005883a 	mov	r2,zero
  80aa88:	f800283a 	ret
  80aa8c:	30800044 	addi	r2,r6,1
  80aa90:	20800015 	stw	r2,0(r4)
  80aa94:	00800044 	movi	r2,1
  80aa98:	f800283a 	ret

0080aa9c <_strtod_r>:
  80aa9c:	deffde04 	addi	sp,sp,-136
  80aaa0:	df002015 	stw	fp,128(sp)
  80aaa4:	dd401d15 	stw	r21,116(sp)
  80aaa8:	dc401915 	stw	r17,100(sp)
  80aaac:	dfc02115 	stw	ra,132(sp)
  80aab0:	ddc01f15 	stw	r23,124(sp)
  80aab4:	dd801e15 	stw	r22,120(sp)
  80aab8:	dd001c15 	stw	r20,112(sp)
  80aabc:	dcc01b15 	stw	r19,108(sp)
  80aac0:	dc801a15 	stw	r18,104(sp)
  80aac4:	dc001815 	stw	r16,96(sp)
  80aac8:	2823883a 	mov	r17,r5
  80aacc:	202b883a 	mov	r21,r4
  80aad0:	d9801515 	stw	r6,84(sp)
  80aad4:	d8000915 	stw	zero,36(sp)
  80aad8:	d8000a15 	stw	zero,40(sp)
  80aadc:	d9400415 	stw	r5,16(sp)
  80aae0:	df000904 	addi	fp,sp,36
  80aae4:	da000417 	ldw	r8,16(sp)
  80aae8:	00800b44 	movi	r2,45
  80aaec:	40c00003 	ldbu	r3,0(r8)
  80aaf0:	10c03536 	bltu	r2,r3,80abc8 <_strtod_r+0x12c>
  80aaf4:	18c5883a 	add	r2,r3,r3
  80aaf8:	1085883a 	add	r2,r2,r2
  80aafc:	00c02074 	movhi	r3,129
  80ab00:	18eac404 	addi	r3,r3,-21744
  80ab04:	10c5883a 	add	r2,r2,r3
  80ab08:	11000017 	ldw	r4,0(r2)
  80ab0c:	2000683a 	jmp	r4
  80ab10:	0080ad04 	movi	r2,692
  80ab14:	0080abc8 	cmpgei	r2,zero,687
  80ab18:	0080abc8 	cmpgei	r2,zero,687
  80ab1c:	0080abc8 	cmpgei	r2,zero,687
  80ab20:	0080abc8 	cmpgei	r2,zero,687
  80ab24:	0080abc8 	cmpgei	r2,zero,687
  80ab28:	0080abc8 	cmpgei	r2,zero,687
  80ab2c:	0080abc8 	cmpgei	r2,zero,687
  80ab30:	0080abc8 	cmpgei	r2,zero,687
  80ab34:	0080b01c 	xori	r2,zero,704
  80ab38:	0080b01c 	xori	r2,zero,704
  80ab3c:	0080b01c 	xori	r2,zero,704
  80ab40:	0080b01c 	xori	r2,zero,704
  80ab44:	0080b01c 	xori	r2,zero,704
  80ab48:	0080abc8 	cmpgei	r2,zero,687
  80ab4c:	0080abc8 	cmpgei	r2,zero,687
  80ab50:	0080abc8 	cmpgei	r2,zero,687
  80ab54:	0080abc8 	cmpgei	r2,zero,687
  80ab58:	0080abc8 	cmpgei	r2,zero,687
  80ab5c:	0080abc8 	cmpgei	r2,zero,687
  80ab60:	0080abc8 	cmpgei	r2,zero,687
  80ab64:	0080abc8 	cmpgei	r2,zero,687
  80ab68:	0080abc8 	cmpgei	r2,zero,687
  80ab6c:	0080abc8 	cmpgei	r2,zero,687
  80ab70:	0080abc8 	cmpgei	r2,zero,687
  80ab74:	0080abc8 	cmpgei	r2,zero,687
  80ab78:	0080abc8 	cmpgei	r2,zero,687
  80ab7c:	0080abc8 	cmpgei	r2,zero,687
  80ab80:	0080abc8 	cmpgei	r2,zero,687
  80ab84:	0080abc8 	cmpgei	r2,zero,687
  80ab88:	0080abc8 	cmpgei	r2,zero,687
  80ab8c:	0080abc8 	cmpgei	r2,zero,687
  80ab90:	0080b01c 	xori	r2,zero,704
  80ab94:	0080abc8 	cmpgei	r2,zero,687
  80ab98:	0080abc8 	cmpgei	r2,zero,687
  80ab9c:	0080abc8 	cmpgei	r2,zero,687
  80aba0:	0080abc8 	cmpgei	r2,zero,687
  80aba4:	0080abc8 	cmpgei	r2,zero,687
  80aba8:	0080abc8 	cmpgei	r2,zero,687
  80abac:	0080abc8 	cmpgei	r2,zero,687
  80abb0:	0080abc8 	cmpgei	r2,zero,687
  80abb4:	0080abc8 	cmpgei	r2,zero,687
  80abb8:	0080abc8 	cmpgei	r2,zero,687
  80abbc:	0080affc 	xorhi	r2,zero,703
  80abc0:	0080abc8 	cmpgei	r2,zero,687
  80abc4:	0080b028 	cmpgeui	r2,zero,704
  80abc8:	d8001115 	stw	zero,68(sp)
  80abcc:	40c00007 	ldb	r3,0(r8)
  80abd0:	00800c04 	movi	r2,48
  80abd4:	1880d026 	beq	r3,r2,80af18 <_strtod_r+0x47c>
  80abd8:	001f883a 	mov	r15,zero
  80abdc:	41000007 	ldb	r4,0(r8)
  80abe0:	00c00bc4 	movi	r3,47
  80abe4:	402d883a 	mov	r22,r8
  80abe8:	1903470e 	bge	r3,r4,80b908 <_strtod_r+0xe6c>
  80abec:	00800e44 	movi	r2,57
  80abf0:	11034516 	blt	r2,r4,80b908 <_strtod_r+0xe6c>
  80abf4:	180f883a 	mov	r7,r3
  80abf8:	1013883a 	mov	r9,r2
  80abfc:	4007883a 	mov	r3,r8
  80ac00:	000d883a 	mov	r6,zero
  80ac04:	0029883a 	mov	r20,zero
  80ac08:	0021883a 	mov	r16,zero
  80ac0c:	01400204 	movi	r5,8
  80ac10:	028003c4 	movi	r10,15
  80ac14:	29803116 	blt	r5,r6,80acdc <_strtod_r+0x240>
  80ac18:	a08002a4 	muli	r2,r20,10
  80ac1c:	1105883a 	add	r2,r2,r4
  80ac20:	153ff404 	addi	r20,r2,-48
  80ac24:	1a000044 	addi	r8,r3,1
  80ac28:	da000415 	stw	r8,16(sp)
  80ac2c:	41000007 	ldb	r4,0(r8)
  80ac30:	31800044 	addi	r6,r6,1
  80ac34:	4007883a 	mov	r3,r8
  80ac38:	3900010e 	bge	r7,r4,80ac40 <_strtod_r+0x1a4>
  80ac3c:	493ff50e 	bge	r9,r4,80ac14 <_strtod_r+0x178>
  80ac40:	00800b84 	movi	r2,46
  80ac44:	2080c126 	beq	r4,r2,80af4c <_strtod_r+0x4b0>
  80ac48:	3027883a 	mov	r19,r6
  80ac4c:	0025883a 	mov	r18,zero
  80ac50:	0015883a 	mov	r10,zero
  80ac54:	000f883a 	mov	r7,zero
  80ac58:	00801944 	movi	r2,101
  80ac5c:	20802426 	beq	r4,r2,80acf0 <_strtod_r+0x254>
  80ac60:	00801144 	movi	r2,69
  80ac64:	20802226 	beq	r4,r2,80acf0 <_strtod_r+0x254>
  80ac68:	9816c03a 	cmpne	r11,r19,zero
  80ac6c:	000b883a 	mov	r5,zero
  80ac70:	5800631e 	bne	r11,zero,80ae00 <_strtod_r+0x364>
  80ac74:	3800c126 	beq	r7,zero,80af7c <_strtod_r+0x4e0>
  80ac78:	d8c01517 	ldw	r3,84(sp)
  80ac7c:	18000226 	beq	r3,zero,80ac88 <_strtod_r+0x1ec>
  80ac80:	d8800417 	ldw	r2,16(sp)
  80ac84:	18800015 	stw	r2,0(r3)
  80ac88:	d9001117 	ldw	r4,68(sp)
  80ac8c:	2005003a 	cmpeq	r2,r4,zero
  80ac90:	10001f1e 	bne	r2,zero,80ad10 <_strtod_r+0x274>
  80ac94:	e0800017 	ldw	r2,0(fp)
  80ac98:	e0c00117 	ldw	r3,4(fp)
  80ac9c:	1009883a 	mov	r4,r2
  80aca0:	1960003c 	xorhi	r5,r3,32768
  80aca4:	2005883a 	mov	r2,r4
  80aca8:	2807883a 	mov	r3,r5
  80acac:	dfc02117 	ldw	ra,132(sp)
  80acb0:	df002017 	ldw	fp,128(sp)
  80acb4:	ddc01f17 	ldw	r23,124(sp)
  80acb8:	dd801e17 	ldw	r22,120(sp)
  80acbc:	dd401d17 	ldw	r21,116(sp)
  80acc0:	dd001c17 	ldw	r20,112(sp)
  80acc4:	dcc01b17 	ldw	r19,108(sp)
  80acc8:	dc801a17 	ldw	r18,104(sp)
  80accc:	dc401917 	ldw	r17,100(sp)
  80acd0:	dc001817 	ldw	r16,96(sp)
  80acd4:	dec02204 	addi	sp,sp,136
  80acd8:	f800283a 	ret
  80acdc:	51bfd116 	blt	r10,r6,80ac24 <_strtod_r+0x188>
  80ace0:	808002a4 	muli	r2,r16,10
  80ace4:	1105883a 	add	r2,r2,r4
  80ace8:	143ff404 	addi	r16,r2,-48
  80acec:	003fcd06 	br	80ac24 <_strtod_r+0x188>
  80acf0:	9816c03a 	cmpne	r11,r19,zero
  80acf4:	5800091e 	bne	r11,zero,80ad1c <_strtod_r+0x280>
  80acf8:	3800081e 	bne	r7,zero,80ad1c <_strtod_r+0x280>
  80acfc:	7805003a 	cmpeq	r2,r15,zero
  80ad00:	10000626 	beq	r2,zero,80ad1c <_strtod_r+0x280>
  80ad04:	d8001115 	stw	zero,68(sp)
  80ad08:	dc400415 	stw	r17,16(sp)
  80ad0c:	003fda06 	br	80ac78 <_strtod_r+0x1dc>
  80ad10:	e1000017 	ldw	r4,0(fp)
  80ad14:	e1400117 	ldw	r5,4(fp)
  80ad18:	003fe206 	br	80aca4 <_strtod_r+0x208>
  80ad1c:	dc400417 	ldw	r17,16(sp)
  80ad20:	00800ac4 	movi	r2,43
  80ad24:	8a000044 	addi	r8,r17,1
  80ad28:	da000415 	stw	r8,16(sp)
  80ad2c:	88c00047 	ldb	r3,1(r17)
  80ad30:	4009883a 	mov	r4,r8
  80ad34:	1880bf26 	beq	r3,r2,80b034 <_strtod_r+0x598>
  80ad38:	00800b44 	movi	r2,45
  80ad3c:	18834526 	beq	r3,r2,80ba54 <_strtod_r+0xfb8>
  80ad40:	1809883a 	mov	r4,r3
  80ad44:	20fff404 	addi	r3,r4,-48
  80ad48:	00800244 	movi	r2,9
  80ad4c:	001d883a 	mov	r14,zero
  80ad50:	10c0bf36 	bltu	r2,r3,80b050 <_strtod_r+0x5b4>
  80ad54:	00800c04 	movi	r2,48
  80ad58:	2080061e 	bne	r4,r2,80ad74 <_strtod_r+0x2d8>
  80ad5c:	da000417 	ldw	r8,16(sp)
  80ad60:	2005883a 	mov	r2,r4
  80ad64:	42000044 	addi	r8,r8,1
  80ad68:	da000415 	stw	r8,16(sp)
  80ad6c:	41000007 	ldb	r4,0(r8)
  80ad70:	20bffc26 	beq	r4,r2,80ad64 <_strtod_r+0x2c8>
  80ad74:	20fff3c4 	addi	r3,r4,-49
  80ad78:	00800204 	movi	r2,8
  80ad7c:	10ffbb36 	bltu	r2,r3,80ac6c <_strtod_r+0x1d0>
  80ad80:	da000417 	ldw	r8,16(sp)
  80ad84:	227ff404 	addi	r9,r4,-48
  80ad88:	03000bc4 	movi	r12,47
  80ad8c:	4007883a 	mov	r3,r8
  80ad90:	42000044 	addi	r8,r8,1
  80ad94:	da000415 	stw	r8,16(sp)
  80ad98:	41000007 	ldb	r4,0(r8)
  80ad9c:	61000d0e 	bge	r12,r4,80add4 <_strtod_r+0x338>
  80ada0:	00800e44 	movi	r2,57
  80ada4:	11000b16 	blt	r2,r4,80add4 <_strtod_r+0x338>
  80ada8:	601b883a 	mov	r13,r12
  80adac:	1019883a 	mov	r12,r2
  80adb0:	00000106 	br	80adb8 <_strtod_r+0x31c>
  80adb4:	61000716 	blt	r12,r4,80add4 <_strtod_r+0x338>
  80adb8:	488002a4 	muli	r2,r9,10
  80adbc:	42000044 	addi	r8,r8,1
  80adc0:	da000415 	stw	r8,16(sp)
  80adc4:	2085883a 	add	r2,r4,r2
  80adc8:	41000007 	ldb	r4,0(r8)
  80adcc:	127ff404 	addi	r9,r2,-48
  80add0:	693ff816 	blt	r13,r4,80adb4 <_strtod_r+0x318>
  80add4:	40c7c83a 	sub	r3,r8,r3
  80add8:	00800204 	movi	r2,8
  80addc:	10c2e416 	blt	r2,r3,80b970 <_strtod_r+0xed4>
  80ade0:	009387c4 	movi	r2,19999
  80ade4:	480b883a 	mov	r5,r9
  80ade8:	1240010e 	bge	r2,r9,80adf0 <_strtod_r+0x354>
  80adec:	100b883a 	mov	r5,r2
  80adf0:	7005003a 	cmpeq	r2,r14,zero
  80adf4:	103f9e1e 	bne	r2,zero,80ac70 <_strtod_r+0x1d4>
  80adf8:	014bc83a 	sub	r5,zero,r5
  80adfc:	583f9d26 	beq	r11,zero,80ac74 <_strtod_r+0x1d8>
  80ae00:	2a8bc83a 	sub	r5,r5,r10
  80ae04:	d9400f15 	stw	r5,60(sp)
  80ae08:	30007a1e 	bne	r6,zero,80aff4 <_strtod_r+0x558>
  80ae0c:	dcc01215 	stw	r19,72(sp)
  80ae10:	00800404 	movi	r2,16
  80ae14:	9825883a 	mov	r18,r19
  80ae18:	14c0010e 	bge	r2,r19,80ae20 <_strtod_r+0x384>
  80ae1c:	1025883a 	mov	r18,r2
  80ae20:	a009883a 	mov	r4,r20
  80ae24:	080f9180 	call	80f918 <__floatunsidf>
  80ae28:	100f883a 	mov	r7,r2
  80ae2c:	e0800015 	stw	r2,0(fp)
  80ae30:	00800244 	movi	r2,9
  80ae34:	e0c00115 	stw	r3,4(fp)
  80ae38:	1480160e 	bge	r2,r18,80ae94 <_strtod_r+0x3f8>
  80ae3c:	900c90fa 	slli	r6,r18,3
  80ae40:	01002074 	movhi	r4,129
  80ae44:	2113f704 	addi	r4,r4,20444
  80ae48:	180b883a 	mov	r5,r3
  80ae4c:	310d883a 	add	r6,r6,r4
  80ae50:	30ffef17 	ldw	r3,-68(r6)
  80ae54:	30bfee17 	ldw	r2,-72(r6)
  80ae58:	3809883a 	mov	r4,r7
  80ae5c:	180f883a 	mov	r7,r3
  80ae60:	100d883a 	mov	r6,r2
  80ae64:	080ed880 	call	80ed88 <__muldf3>
  80ae68:	8009883a 	mov	r4,r16
  80ae6c:	1823883a 	mov	r17,r3
  80ae70:	1021883a 	mov	r16,r2
  80ae74:	080f9180 	call	80f918 <__floatunsidf>
  80ae78:	880b883a 	mov	r5,r17
  80ae7c:	180f883a 	mov	r7,r3
  80ae80:	8009883a 	mov	r4,r16
  80ae84:	100d883a 	mov	r6,r2
  80ae88:	080ed140 	call	80ed14 <__adddf3>
  80ae8c:	e0c00115 	stw	r3,4(fp)
  80ae90:	e0800015 	stw	r2,0(fp)
  80ae94:	010003c4 	movi	r4,15
  80ae98:	24c09816 	blt	r4,r19,80b0fc <_strtod_r+0x660>
  80ae9c:	d9800f17 	ldw	r6,60(sp)
  80aea0:	303f7526 	beq	r6,zero,80ac78 <_strtod_r+0x1dc>
  80aea4:	0183be0e 	bge	zero,r6,80bda0 <_strtod_r+0x1304>
  80aea8:	00800584 	movi	r2,22
  80aeac:	1182b20e 	bge	r2,r6,80b978 <_strtod_r+0xedc>
  80aeb0:	d8c00f17 	ldw	r3,60(sp)
  80aeb4:	24e3c83a 	sub	r17,r4,r19
  80aeb8:	88800584 	addi	r2,r17,22
  80aebc:	10c08f16 	blt	r2,r3,80b0fc <_strtod_r+0x660>
  80aec0:	880890fa 	slli	r4,r17,3
  80aec4:	04002074 	movhi	r16,129
  80aec8:	8413f704 	addi	r16,r16,20444
  80aecc:	e0800017 	ldw	r2,0(fp)
  80aed0:	2409883a 	add	r4,r4,r16
  80aed4:	22000017 	ldw	r8,0(r4)
  80aed8:	22400117 	ldw	r9,4(r4)
  80aedc:	e0c00117 	ldw	r3,4(fp)
  80aee0:	1009883a 	mov	r4,r2
  80aee4:	480f883a 	mov	r7,r9
  80aee8:	180b883a 	mov	r5,r3
  80aeec:	400d883a 	mov	r6,r8
  80aef0:	080ed880 	call	80ed88 <__muldf3>
  80aef4:	d9000f17 	ldw	r4,60(sp)
  80aef8:	180b883a 	mov	r5,r3
  80aefc:	2455c83a 	sub	r10,r4,r17
  80af00:	501490fa 	slli	r10,r10,3
  80af04:	1009883a 	mov	r4,r2
  80af08:	5415883a 	add	r10,r10,r16
  80af0c:	52000017 	ldw	r8,0(r10)
  80af10:	52400117 	ldw	r9,4(r10)
  80af14:	0002a206 	br	80b9a0 <_strtod_r+0xf04>
  80af18:	40c00047 	ldb	r3,1(r8)
  80af1c:	00801604 	movi	r2,88
  80af20:	18804e26 	beq	r3,r2,80b05c <_strtod_r+0x5c0>
  80af24:	00801e04 	movi	r2,120
  80af28:	18804c26 	beq	r3,r2,80b05c <_strtod_r+0x5c0>
  80af2c:	42000044 	addi	r8,r8,1
  80af30:	da000415 	stw	r8,16(sp)
  80af34:	40c00007 	ldb	r3,0(r8)
  80af38:	00800c04 	movi	r2,48
  80af3c:	18bffb26 	beq	r3,r2,80af2c <_strtod_r+0x490>
  80af40:	183f4d26 	beq	r3,zero,80ac78 <_strtod_r+0x1dc>
  80af44:	03c00044 	movi	r15,1
  80af48:	003f2406 	br	80abdc <_strtod_r+0x140>
  80af4c:	42000044 	addi	r8,r8,1
  80af50:	da000415 	stw	r8,16(sp)
  80af54:	19000047 	ldb	r4,1(r3)
  80af58:	3000b726 	beq	r6,zero,80b238 <_strtod_r+0x79c>
  80af5c:	3027883a 	mov	r19,r6
  80af60:	0015883a 	mov	r10,zero
  80af64:	000f883a 	mov	r7,zero
  80af68:	227ff404 	addi	r9,r4,-48
  80af6c:	00800244 	movi	r2,9
  80af70:	1242592e 	bgeu	r2,r9,80b8d8 <_strtod_r+0xe3c>
  80af74:	04800044 	movi	r18,1
  80af78:	003f3706 	br	80ac58 <_strtod_r+0x1bc>
  80af7c:	7804c03a 	cmpne	r2,r15,zero
  80af80:	103f3d1e 	bne	r2,zero,80ac78 <_strtod_r+0x1dc>
  80af84:	9004c03a 	cmpne	r2,r18,zero
  80af88:	103f5e1e 	bne	r2,zero,80ad04 <_strtod_r+0x268>
  80af8c:	00801384 	movi	r2,78
  80af90:	2083a226 	beq	r4,r2,80be1c <_strtod_r+0x1380>
  80af94:	11039d16 	blt	r2,r4,80be0c <_strtod_r+0x1370>
  80af98:	00801244 	movi	r2,73
  80af9c:	20bf591e 	bne	r4,r2,80ad04 <_strtod_r+0x268>
  80afa0:	dc000404 	addi	r16,sp,16
  80afa4:	8009883a 	mov	r4,r16
  80afa8:	01402074 	movhi	r5,129
  80afac:	29544004 	addi	r5,r5,20736
  80afb0:	080aa540 	call	80aa54 <match>
  80afb4:	103f5326 	beq	r2,zero,80ad04 <_strtod_r+0x268>
  80afb8:	d8800417 	ldw	r2,16(sp)
  80afbc:	8009883a 	mov	r4,r16
  80afc0:	01402074 	movhi	r5,129
  80afc4:	29544104 	addi	r5,r5,20740
  80afc8:	123fffc4 	addi	r8,r2,-1
  80afcc:	da000415 	stw	r8,16(sp)
  80afd0:	080aa540 	call	80aa54 <match>
  80afd4:	1000031e 	bne	r2,zero,80afe4 <_strtod_r+0x548>
  80afd8:	d8800417 	ldw	r2,16(sp)
  80afdc:	12000044 	addi	r8,r2,1
  80afe0:	da000415 	stw	r8,16(sp)
  80afe4:	019ffc34 	movhi	r6,32752
  80afe8:	e1800115 	stw	r6,4(fp)
  80afec:	e0000015 	stw	zero,0(fp)
  80aff0:	003f2106 	br	80ac78 <_strtod_r+0x1dc>
  80aff4:	d9801215 	stw	r6,72(sp)
  80aff8:	003f8506 	br	80ae10 <_strtod_r+0x374>
  80affc:	d8001115 	stw	zero,68(sp)
  80b000:	42000044 	addi	r8,r8,1
  80b004:	da000415 	stw	r8,16(sp)
  80b008:	40800007 	ldb	r2,0(r8)
  80b00c:	103eef1e 	bne	r2,zero,80abcc <_strtod_r+0x130>
  80b010:	d8001115 	stw	zero,68(sp)
  80b014:	dc400415 	stw	r17,16(sp)
  80b018:	003f1706 	br	80ac78 <_strtod_r+0x1dc>
  80b01c:	42000044 	addi	r8,r8,1
  80b020:	da000415 	stw	r8,16(sp)
  80b024:	003eaf06 	br	80aae4 <_strtod_r+0x48>
  80b028:	00800044 	movi	r2,1
  80b02c:	d8801115 	stw	r2,68(sp)
  80b030:	003ff306 	br	80b000 <_strtod_r+0x564>
  80b034:	001d883a 	mov	r14,zero
  80b038:	42000044 	addi	r8,r8,1
  80b03c:	da000415 	stw	r8,16(sp)
  80b040:	21000047 	ldb	r4,1(r4)
  80b044:	00800244 	movi	r2,9
  80b048:	20fff404 	addi	r3,r4,-48
  80b04c:	10ff412e 	bgeu	r2,r3,80ad54 <_strtod_r+0x2b8>
  80b050:	000b883a 	mov	r5,zero
  80b054:	dc400415 	stw	r17,16(sp)
  80b058:	003f0506 	br	80ac70 <_strtod_r+0x1d4>
  80b05c:	d8c01117 	ldw	r3,68(sp)
  80b060:	04802074 	movhi	r18,129
  80b064:	9496cc04 	addi	r18,r18,23344
  80b068:	d8800504 	addi	r2,sp,20
  80b06c:	a809883a 	mov	r4,r21
  80b070:	d9400404 	addi	r5,sp,16
  80b074:	900d883a 	mov	r6,r18
  80b078:	d9c00604 	addi	r7,sp,24
  80b07c:	d8800015 	stw	r2,0(sp)
  80b080:	d8c00115 	stw	r3,4(sp)
  80b084:	080d0080 	call	80d008 <__gethex>
  80b088:	140001cc 	andi	r16,r2,7
  80b08c:	1027883a 	mov	r19,r2
  80b090:	803ef926 	beq	r16,zero,80ac78 <_strtod_r+0x1dc>
  80b094:	05000184 	movi	r20,6
  80b098:	853f1a26 	beq	r16,r20,80ad04 <_strtod_r+0x268>
  80b09c:	d9800517 	ldw	r6,20(sp)
  80b0a0:	30000626 	beq	r6,zero,80b0bc <_strtod_r+0x620>
  80b0a4:	91400017 	ldw	r5,0(r18)
  80b0a8:	d9000d04 	addi	r4,sp,52
  80b0ac:	0809c940 	call	809c94 <__copybits>
  80b0b0:	d9400517 	ldw	r5,20(sp)
  80b0b4:	a809883a 	mov	r4,r21
  80b0b8:	08097f40 	call	8097f4 <_Bfree>
  80b0bc:	d9400617 	ldw	r5,24(sp)
  80b0c0:	a4024136 	bltu	r20,r16,80b9c8 <_strtod_r+0xf2c>
  80b0c4:	8405883a 	add	r2,r16,r16
  80b0c8:	1085883a 	add	r2,r2,r2
  80b0cc:	00c02074 	movhi	r3,129
  80b0d0:	18ec3804 	addi	r3,r3,-20256
  80b0d4:	10c5883a 	add	r2,r2,r3
  80b0d8:	11000017 	ldw	r4,0(r2)
  80b0dc:	2000683a 	jmp	r4
  80b0e0:	0080ba08 	cmpgei	r2,zero,744
  80b0e4:	0080ba14 	movui	r2,744
  80b0e8:	0080b9b8 	rdprs	r2,zero,742
  80b0ec:	0080b9e0 	cmpeqi	r2,zero,743
  80b0f0:	0080b9f0 	cmpltui	r2,zero,743
  80b0f4:	0080ba14 	movui	r2,744
  80b0f8:	0080ba08 	cmpgei	r2,zero,744
  80b0fc:	d8c00f17 	ldw	r3,60(sp)
  80b100:	9c85c83a 	sub	r2,r19,r18
  80b104:	18a1883a 	add	r16,r3,r2
  80b108:	0402d00e 	bge	zero,r16,80bc4c <_strtod_r+0x11b0>
  80b10c:	814003cc 	andi	r5,r16,15
  80b110:	28000f26 	beq	r5,zero,80b150 <_strtod_r+0x6b4>
  80b114:	280a90fa 	slli	r5,r5,3
  80b118:	01002074 	movhi	r4,129
  80b11c:	2113f704 	addi	r4,r4,20444
  80b120:	e0800017 	ldw	r2,0(fp)
  80b124:	290b883a 	add	r5,r5,r4
  80b128:	2a000017 	ldw	r8,0(r5)
  80b12c:	e0c00117 	ldw	r3,4(fp)
  80b130:	2a400117 	ldw	r9,4(r5)
  80b134:	1009883a 	mov	r4,r2
  80b138:	180b883a 	mov	r5,r3
  80b13c:	480f883a 	mov	r7,r9
  80b140:	400d883a 	mov	r6,r8
  80b144:	080ed880 	call	80ed88 <__muldf3>
  80b148:	e0c00115 	stw	r3,4(fp)
  80b14c:	e0800015 	stw	r2,0(fp)
  80b150:	00bffc04 	movi	r2,-16
  80b154:	808c703a 	and	r6,r16,r2
  80b158:	30005b26 	beq	r6,zero,80b2c8 <_strtod_r+0x82c>
  80b15c:	00804d04 	movi	r2,308
  80b160:	1181fd16 	blt	r2,r6,80b958 <_strtod_r+0xebc>
  80b164:	3021d13a 	srai	r16,r6,4
  80b168:	00800044 	movi	r2,1
  80b16c:	1403610e 	bge	r2,r16,80bef4 <_strtod_r+0x1458>
  80b170:	102f883a 	mov	r23,r2
  80b174:	0025883a 	mov	r18,zero
  80b178:	04402074 	movhi	r17,129
  80b17c:	8c542904 	addi	r17,r17,20644
  80b180:	8080004c 	andi	r2,r16,1
  80b184:	1005003a 	cmpeq	r2,r2,zero
  80b188:	1000091e 	bne	r2,zero,80b1b0 <_strtod_r+0x714>
  80b18c:	e0800017 	ldw	r2,0(fp)
  80b190:	e0c00117 	ldw	r3,4(fp)
  80b194:	89800017 	ldw	r6,0(r17)
  80b198:	89c00117 	ldw	r7,4(r17)
  80b19c:	180b883a 	mov	r5,r3
  80b1a0:	1009883a 	mov	r4,r2
  80b1a4:	080ed880 	call	80ed88 <__muldf3>
  80b1a8:	e0c00115 	stw	r3,4(fp)
  80b1ac:	e0800015 	stw	r2,0(fp)
  80b1b0:	8021d07a 	srai	r16,r16,1
  80b1b4:	94800044 	addi	r18,r18,1
  80b1b8:	8c400204 	addi	r17,r17,8
  80b1bc:	bc3ff016 	blt	r23,r16,80b180 <_strtod_r+0x6e4>
  80b1c0:	900e90fa 	slli	r7,r18,3
  80b1c4:	01802074 	movhi	r6,129
  80b1c8:	31942904 	addi	r6,r6,20644
  80b1cc:	e2000117 	ldw	r8,4(fp)
  80b1d0:	398f883a 	add	r7,r7,r6
  80b1d4:	38800017 	ldw	r2,0(r7)
  80b1d8:	38c00117 	ldw	r3,4(r7)
  80b1dc:	e1000017 	ldw	r4,0(fp)
  80b1e0:	01bf2c34 	movhi	r6,64688
  80b1e4:	418d883a 	add	r6,r8,r6
  80b1e8:	300b883a 	mov	r5,r6
  80b1ec:	180f883a 	mov	r7,r3
  80b1f0:	100d883a 	mov	r6,r2
  80b1f4:	080ed880 	call	80ed88 <__muldf3>
  80b1f8:	1009883a 	mov	r4,r2
  80b1fc:	180b883a 	mov	r5,r3
  80b200:	199ffc2c 	andhi	r6,r3,32752
  80b204:	009f2834 	movhi	r2,31904
  80b208:	e1000015 	stw	r4,0(fp)
  80b20c:	e1400115 	stw	r5,4(fp)
  80b210:	1181d136 	bltu	r2,r6,80b958 <_strtod_r+0xebc>
  80b214:	009f2434 	movhi	r2,31888
  80b218:	1183202e 	bgeu	r2,r6,80be9c <_strtod_r+0x1400>
  80b21c:	d8001415 	stw	zero,80(sp)
  80b220:	019ffc34 	movhi	r6,32752
  80b224:	31bfffc4 	addi	r6,r6,-1
  80b228:	01ffffc4 	movi	r7,-1
  80b22c:	e1800115 	stw	r6,4(fp)
  80b230:	e1c00015 	stw	r7,0(fp)
  80b234:	00002506 	br	80b2cc <_strtod_r+0x830>
  80b238:	00800c04 	movi	r2,48
  80b23c:	2083151e 	bne	r4,r2,80be94 <_strtod_r+0x13f8>
  80b240:	2005883a 	mov	r2,r4
  80b244:	000f883a 	mov	r7,zero
  80b248:	42000044 	addi	r8,r8,1
  80b24c:	da000415 	stw	r8,16(sp)
  80b250:	41000007 	ldb	r4,0(r8)
  80b254:	39c00044 	addi	r7,r7,1
  80b258:	20bffb26 	beq	r4,r2,80b248 <_strtod_r+0x7ac>
  80b25c:	20fff3c4 	addi	r3,r4,-49
  80b260:	00800204 	movi	r2,8
  80b264:	10c1b836 	bltu	r2,r3,80b948 <_strtod_r+0xeac>
  80b268:	dd800417 	ldw	r22,16(sp)
  80b26c:	3815883a 	mov	r10,r7
  80b270:	227ff404 	addi	r9,r4,-48
  80b274:	b011883a 	mov	r8,r22
  80b278:	0027883a 	mov	r19,zero
  80b27c:	01c00044 	movi	r7,1
  80b280:	4801fe26 	beq	r9,zero,80ba7c <_strtod_r+0xfe0>
  80b284:	00800044 	movi	r2,1
  80b288:	51d5883a 	add	r10,r10,r7
  80b28c:	11c31f0e 	bge	r2,r7,80bf0c <_strtod_r+0x1470>
  80b290:	1009883a 	mov	r4,r2
  80b294:	9807883a 	mov	r3,r19
  80b298:	02c00204 	movi	r11,8
  80b29c:	03000404 	movi	r12,16
  80b2a0:	00000306 	br	80b2b0 <_strtod_r+0x814>
  80b2a4:	a50002a4 	muli	r20,r20,10
  80b2a8:	21000044 	addi	r4,r4,1
  80b2ac:	21c1eb26 	beq	r4,r7,80ba5c <_strtod_r+0xfc0>
  80b2b0:	18c00044 	addi	r3,r3,1
  80b2b4:	18bfffc4 	addi	r2,r3,-1
  80b2b8:	58bffa0e 	bge	r11,r2,80b2a4 <_strtod_r+0x808>
  80b2bc:	60fffa16 	blt	r12,r3,80b2a8 <_strtod_r+0x80c>
  80b2c0:	840002a4 	muli	r16,r16,10
  80b2c4:	003ff806 	br	80b2a8 <_strtod_r+0x80c>
  80b2c8:	d8001415 	stw	zero,80(sp)
  80b2cc:	d9801217 	ldw	r6,72(sp)
  80b2d0:	a809883a 	mov	r4,r21
  80b2d4:	b00b883a 	mov	r5,r22
  80b2d8:	980f883a 	mov	r7,r19
  80b2dc:	dd000015 	stw	r20,0(sp)
  80b2e0:	080a6c80 	call	80a6c8 <__s2b>
  80b2e4:	d9800f17 	ldw	r6,60(sp)
  80b2e8:	11000304 	addi	r4,r2,12
  80b2ec:	d8801015 	stw	r2,64(sp)
  80b2f0:	300c803a 	cmplt	r6,r6,zero
  80b2f4:	d9001715 	stw	r4,92(sp)
  80b2f8:	d9801615 	stw	r6,88(sp)
  80b2fc:	d8801017 	ldw	r2,64(sp)
  80b300:	a809883a 	mov	r4,r21
  80b304:	11400117 	ldw	r5,4(r2)
  80b308:	0809d740 	call	809d74 <_Balloc>
  80b30c:	d8c01017 	ldw	r3,64(sp)
  80b310:	d9401717 	ldw	r5,92(sp)
  80b314:	11000304 	addi	r4,r2,12
  80b318:	19800417 	ldw	r6,16(r3)
  80b31c:	102f883a 	mov	r23,r2
  80b320:	318d883a 	add	r6,r6,r6
  80b324:	318d883a 	add	r6,r6,r6
  80b328:	31800204 	addi	r6,r6,8
  80b32c:	08032540 	call	803254 <memcpy>
  80b330:	e2000017 	ldw	r8,0(fp)
  80b334:	e2400117 	ldw	r9,4(fp)
  80b338:	d9800304 	addi	r6,sp,12
  80b33c:	400b883a 	mov	r5,r8
  80b340:	a809883a 	mov	r4,r21
  80b344:	d9c00204 	addi	r7,sp,8
  80b348:	d9800015 	stw	r6,0(sp)
  80b34c:	480d883a 	mov	r6,r9
  80b350:	0809e300 	call	809e30 <__d2b>
  80b354:	a809883a 	mov	r4,r21
  80b358:	01400044 	movi	r5,1
  80b35c:	d8800515 	stw	r2,20(sp)
  80b360:	080a46c0 	call	80a46c <__i2b>
  80b364:	102d883a 	mov	r22,r2
  80b368:	d8801617 	ldw	r2,88(sp)
  80b36c:	1001051e 	bne	r2,zero,80b784 <_strtod_r+0xce8>
  80b370:	dd000f17 	ldw	r20,60(sp)
  80b374:	000f883a 	mov	r7,zero
  80b378:	0013883a 	mov	r9,zero
  80b37c:	a011883a 	mov	r8,r20
  80b380:	d8800217 	ldw	r2,8(sp)
  80b384:	1000fd16 	blt	r2,zero,80b77c <_strtod_r+0xce0>
  80b388:	388f883a 	add	r7,r7,r2
  80b38c:	d9801417 	ldw	r6,80(sp)
  80b390:	d9400317 	ldw	r5,12(sp)
  80b394:	00ff0084 	movi	r3,-1022
  80b398:	1189c83a 	sub	r4,r2,r6
  80b39c:	2145883a 	add	r2,r4,r5
  80b3a0:	10bfffc4 	addi	r2,r2,-1
  80b3a4:	10c09f0e 	bge	r2,r3,80b624 <_strtod_r+0xb88>
  80b3a8:	21810cc4 	addi	r6,r4,1075
  80b3ac:	d8c01417 	ldw	r3,80(sp)
  80b3b0:	4185883a 	add	r2,r8,r6
  80b3b4:	39a1883a 	add	r16,r7,r6
  80b3b8:	18a5883a 	add	r18,r3,r2
  80b3bc:	3807883a 	mov	r3,r7
  80b3c0:	81c0010e 	bge	r16,r7,80b3c8 <_strtod_r+0x92c>
  80b3c4:	8007883a 	mov	r3,r16
  80b3c8:	9005883a 	mov	r2,r18
  80b3cc:	1c80010e 	bge	r3,r18,80b3d4 <_strtod_r+0x938>
  80b3d0:	1805883a 	mov	r2,r3
  80b3d4:	0080e70e 	bge	zero,r2,80b774 <_strtod_r+0xcd8>
  80b3d8:	38a7c83a 	sub	r19,r7,r2
  80b3dc:	80a1c83a 	sub	r16,r16,r2
  80b3e0:	90a5c83a 	sub	r18,r18,r2
  80b3e4:	02400e0e 	bge	zero,r9,80b420 <_strtod_r+0x984>
  80b3e8:	480d883a 	mov	r6,r9
  80b3ec:	b00b883a 	mov	r5,r22
  80b3f0:	a809883a 	mov	r4,r21
  80b3f4:	080a5a80 	call	80a5a8 <__pow5mult>
  80b3f8:	d9800517 	ldw	r6,20(sp)
  80b3fc:	a809883a 	mov	r4,r21
  80b400:	100b883a 	mov	r5,r2
  80b404:	102d883a 	mov	r22,r2
  80b408:	080a2840 	call	80a284 <__multiply>
  80b40c:	d9400517 	ldw	r5,20(sp)
  80b410:	1023883a 	mov	r17,r2
  80b414:	a809883a 	mov	r4,r21
  80b418:	08097f40 	call	8097f4 <_Bfree>
  80b41c:	dc400515 	stw	r17,20(sp)
  80b420:	0400050e 	bge	zero,r16,80b438 <_strtod_r+0x99c>
  80b424:	d9400517 	ldw	r5,20(sp)
  80b428:	800d883a 	mov	r6,r16
  80b42c:	a809883a 	mov	r4,r21
  80b430:	080a1380 	call	80a138 <__lshift>
  80b434:	d8800515 	stw	r2,20(sp)
  80b438:	a000741e 	bne	r20,zero,80b60c <_strtod_r+0xb70>
  80b43c:	0480050e 	bge	zero,r18,80b454 <_strtod_r+0x9b8>
  80b440:	b80b883a 	mov	r5,r23
  80b444:	900d883a 	mov	r6,r18
  80b448:	a809883a 	mov	r4,r21
  80b44c:	080a1380 	call	80a138 <__lshift>
  80b450:	102f883a 	mov	r23,r2
  80b454:	04c0050e 	bge	zero,r19,80b46c <_strtod_r+0x9d0>
  80b458:	b00b883a 	mov	r5,r22
  80b45c:	980d883a 	mov	r6,r19
  80b460:	a809883a 	mov	r4,r21
  80b464:	080a1380 	call	80a138 <__lshift>
  80b468:	102d883a 	mov	r22,r2
  80b46c:	d9400517 	ldw	r5,20(sp)
  80b470:	a809883a 	mov	r4,r21
  80b474:	b80d883a 	mov	r6,r23
  80b478:	0809fac0 	call	809fac <__mdiff>
  80b47c:	11000317 	ldw	r4,12(r2)
  80b480:	b00b883a 	mov	r5,r22
  80b484:	10000315 	stw	zero,12(r2)
  80b488:	d9001315 	stw	r4,76(sp)
  80b48c:	1009883a 	mov	r4,r2
  80b490:	1029883a 	mov	r20,r2
  80b494:	08099500 	call	809950 <__mcmp>
  80b498:	10017c16 	blt	r2,zero,80ba8c <_strtod_r+0xff0>
  80b49c:	1001af26 	beq	r2,zero,80bb5c <_strtod_r+0x10c0>
  80b4a0:	a009883a 	mov	r4,r20
  80b4a4:	b00b883a 	mov	r5,r22
  80b4a8:	0809b500 	call	809b50 <__ratio>
  80b4ac:	0011883a 	mov	r8,zero
  80b4b0:	02500034 	movhi	r9,16384
  80b4b4:	480f883a 	mov	r7,r9
  80b4b8:	1009883a 	mov	r4,r2
  80b4bc:	180b883a 	mov	r5,r3
  80b4c0:	400d883a 	mov	r6,r8
  80b4c4:	1021883a 	mov	r16,r2
  80b4c8:	1823883a 	mov	r17,r3
  80b4cc:	080f64c0 	call	80f64c <__ledf2>
  80b4d0:	00805716 	blt	zero,r2,80b630 <_strtod_r+0xb94>
  80b4d4:	d9801317 	ldw	r6,76(sp)
  80b4d8:	3025003a 	cmpeq	r18,r6,zero
  80b4dc:	90008b1e 	bne	r18,zero,80b70c <_strtod_r+0xc70>
  80b4e0:	008ffc34 	movhi	r2,16368
  80b4e4:	0021883a 	mov	r16,zero
  80b4e8:	1023883a 	mov	r17,r2
  80b4ec:	d8000715 	stw	zero,28(sp)
  80b4f0:	d8800815 	stw	r2,32(sp)
  80b4f4:	e1c00117 	ldw	r7,4(fp)
  80b4f8:	009ff834 	movhi	r2,32736
  80b4fc:	3cdffc2c 	andhi	r19,r7,32752
  80b500:	98805e26 	beq	r19,r2,80b67c <_strtod_r+0xbe0>
  80b504:	d8801417 	ldw	r2,80(sp)
  80b508:	10001b26 	beq	r2,zero,80b578 <_strtod_r+0xadc>
  80b50c:	0081a834 	movhi	r2,1696
  80b510:	14c01936 	bltu	r2,r19,80b578 <_strtod_r+0xadc>
  80b514:	00bff034 	movhi	r2,65472
  80b518:	00d07834 	movhi	r3,16864
  80b51c:	18ffffc4 	addi	r3,r3,-1
  80b520:	180f883a 	mov	r7,r3
  80b524:	8009883a 	mov	r4,r16
  80b528:	880b883a 	mov	r5,r17
  80b52c:	100d883a 	mov	r6,r2
  80b530:	080f64c0 	call	80f64c <__ledf2>
  80b534:	00800b16 	blt	zero,r2,80b564 <_strtod_r+0xac8>
  80b538:	880b883a 	mov	r5,r17
  80b53c:	8009883a 	mov	r4,r16
  80b540:	080daec0 	call	80daec <__fixunsdfsi>
  80b544:	1000df1e 	bne	r2,zero,80b8c4 <_strtod_r+0xe28>
  80b548:	0021883a 	mov	r16,zero
  80b54c:	044ffc34 	movhi	r17,16368
  80b550:	9000d91e 	bne	r18,zero,80b8b8 <_strtod_r+0xe1c>
  80b554:	8005883a 	mov	r2,r16
  80b558:	8807883a 	mov	r3,r17
  80b55c:	d8c00815 	stw	r3,32(sp)
  80b560:	d8800715 	stw	r2,28(sp)
  80b564:	d8800817 	ldw	r2,32(sp)
  80b568:	00c1ac34 	movhi	r3,1712
  80b56c:	14c5c83a 	sub	r2,r2,r19
  80b570:	10c5883a 	add	r2,r2,r3
  80b574:	d8800815 	stw	r2,32(sp)
  80b578:	e0800017 	ldw	r2,0(fp)
  80b57c:	e0c00117 	ldw	r3,4(fp)
  80b580:	1009883a 	mov	r4,r2
  80b584:	180b883a 	mov	r5,r3
  80b588:	08099b00 	call	8099b0 <__ulp>
  80b58c:	d9800717 	ldw	r6,28(sp)
  80b590:	d9c00817 	ldw	r7,32(sp)
  80b594:	180b883a 	mov	r5,r3
  80b598:	1009883a 	mov	r4,r2
  80b59c:	080ed880 	call	80ed88 <__muldf3>
  80b5a0:	e2000017 	ldw	r8,0(fp)
  80b5a4:	e2400117 	ldw	r9,4(fp)
  80b5a8:	180b883a 	mov	r5,r3
  80b5ac:	1009883a 	mov	r4,r2
  80b5b0:	480f883a 	mov	r7,r9
  80b5b4:	400d883a 	mov	r6,r8
  80b5b8:	080ed140 	call	80ed14 <__adddf3>
  80b5bc:	e0c00115 	stw	r3,4(fp)
  80b5c0:	e0800015 	stw	r2,0(fp)
  80b5c4:	d8c01417 	ldw	r3,80(sp)
  80b5c8:	e4800117 	ldw	r18,4(fp)
  80b5cc:	1800021e 	bne	r3,zero,80b5d8 <_strtod_r+0xb3c>
  80b5d0:	909ffc2c 	andhi	r2,r18,32752
  80b5d4:	98807b26 	beq	r19,r2,80b7c4 <_strtod_r+0xd28>
  80b5d8:	d9400517 	ldw	r5,20(sp)
  80b5dc:	a809883a 	mov	r4,r21
  80b5e0:	08097f40 	call	8097f4 <_Bfree>
  80b5e4:	a809883a 	mov	r4,r21
  80b5e8:	b80b883a 	mov	r5,r23
  80b5ec:	08097f40 	call	8097f4 <_Bfree>
  80b5f0:	a809883a 	mov	r4,r21
  80b5f4:	b00b883a 	mov	r5,r22
  80b5f8:	08097f40 	call	8097f4 <_Bfree>
  80b5fc:	a809883a 	mov	r4,r21
  80b600:	a00b883a 	mov	r5,r20
  80b604:	08097f40 	call	8097f4 <_Bfree>
  80b608:	003f3c06 	br	80b2fc <_strtod_r+0x860>
  80b60c:	b80b883a 	mov	r5,r23
  80b610:	a00d883a 	mov	r6,r20
  80b614:	a809883a 	mov	r4,r21
  80b618:	080a5a80 	call	80a5a8 <__pow5mult>
  80b61c:	102f883a 	mov	r23,r2
  80b620:	003f8606 	br	80b43c <_strtod_r+0x9a0>
  80b624:	00800d84 	movi	r2,54
  80b628:	114dc83a 	sub	r6,r2,r5
  80b62c:	003f5f06 	br	80b3ac <_strtod_r+0x910>
  80b630:	0005883a 	mov	r2,zero
  80b634:	00cff834 	movhi	r3,16352
  80b638:	880b883a 	mov	r5,r17
  80b63c:	8009883a 	mov	r4,r16
  80b640:	100d883a 	mov	r6,r2
  80b644:	180f883a 	mov	r7,r3
  80b648:	080ed880 	call	80ed88 <__muldf3>
  80b64c:	d9801317 	ldw	r6,76(sp)
  80b650:	1021883a 	mov	r16,r2
  80b654:	1823883a 	mov	r17,r3
  80b658:	3025003a 	cmpeq	r18,r6,zero
  80b65c:	90000126 	beq	r18,zero,80b664 <_strtod_r+0xbc8>
  80b660:	18e0003c 	xorhi	r3,r3,32768
  80b664:	d8800715 	stw	r2,28(sp)
  80b668:	d8c00815 	stw	r3,32(sp)
  80b66c:	e1c00117 	ldw	r7,4(fp)
  80b670:	009ff834 	movhi	r2,32736
  80b674:	3cdffc2c 	andhi	r19,r7,32752
  80b678:	98bfa21e 	bne	r19,r2,80b504 <_strtod_r+0xa68>
  80b67c:	e1000017 	ldw	r4,0(fp)
  80b680:	01bf2c34 	movhi	r6,64688
  80b684:	398d883a 	add	r6,r7,r6
  80b688:	d9000b15 	stw	r4,44(sp)
  80b68c:	d9c00c15 	stw	r7,48(sp)
  80b690:	300b883a 	mov	r5,r6
  80b694:	e1800115 	stw	r6,4(fp)
  80b698:	08099b00 	call	8099b0 <__ulp>
  80b69c:	d9800717 	ldw	r6,28(sp)
  80b6a0:	d9c00817 	ldw	r7,32(sp)
  80b6a4:	180b883a 	mov	r5,r3
  80b6a8:	1009883a 	mov	r4,r2
  80b6ac:	080ed880 	call	80ed88 <__muldf3>
  80b6b0:	e2000017 	ldw	r8,0(fp)
  80b6b4:	e2400117 	ldw	r9,4(fp)
  80b6b8:	180b883a 	mov	r5,r3
  80b6bc:	1009883a 	mov	r4,r2
  80b6c0:	480f883a 	mov	r7,r9
  80b6c4:	400d883a 	mov	r6,r8
  80b6c8:	080ed140 	call	80ed14 <__adddf3>
  80b6cc:	1009883a 	mov	r4,r2
  80b6d0:	180b883a 	mov	r5,r3
  80b6d4:	009f2834 	movhi	r2,31904
  80b6d8:	10bfffc4 	addi	r2,r2,-1
  80b6dc:	18dffc2c 	andhi	r3,r3,32752
  80b6e0:	e1000015 	stw	r4,0(fp)
  80b6e4:	e1400115 	stw	r5,4(fp)
  80b6e8:	10c06f2e 	bgeu	r2,r3,80b8a8 <_strtod_r+0xe0c>
  80b6ec:	d8800c17 	ldw	r2,48(sp)
  80b6f0:	011ffc34 	movhi	r4,32752
  80b6f4:	213fffc4 	addi	r4,r4,-1
  80b6f8:	11007a26 	beq	r2,r4,80b8e4 <_strtod_r+0xe48>
  80b6fc:	01ffffc4 	movi	r7,-1
  80b700:	e1000115 	stw	r4,4(fp)
  80b704:	e1c00015 	stw	r7,0(fp)
  80b708:	003fb306 	br	80b5d8 <_strtod_r+0xb3c>
  80b70c:	e0c00017 	ldw	r3,0(fp)
  80b710:	1800221e 	bne	r3,zero,80b79c <_strtod_r+0xd00>
  80b714:	e0800117 	ldw	r2,4(fp)
  80b718:	00c00434 	movhi	r3,16
  80b71c:	18ffffc4 	addi	r3,r3,-1
  80b720:	10c4703a 	and	r2,r2,r3
  80b724:	1000211e 	bne	r2,zero,80b7ac <_strtod_r+0xd10>
  80b728:	0005883a 	mov	r2,zero
  80b72c:	00cffc34 	movhi	r3,16368
  80b730:	180f883a 	mov	r7,r3
  80b734:	8009883a 	mov	r4,r16
  80b738:	880b883a 	mov	r5,r17
  80b73c:	100d883a 	mov	r6,r2
  80b740:	080f5c40 	call	80f5c4 <__ltdf2>
  80b744:	10013c16 	blt	r2,zero,80bc38 <_strtod_r+0x119c>
  80b748:	0005883a 	mov	r2,zero
  80b74c:	00cff834 	movhi	r3,16352
  80b750:	880b883a 	mov	r5,r17
  80b754:	8009883a 	mov	r4,r16
  80b758:	180f883a 	mov	r7,r3
  80b75c:	100d883a 	mov	r6,r2
  80b760:	080ed880 	call	80ed88 <__muldf3>
  80b764:	1823883a 	mov	r17,r3
  80b768:	1021883a 	mov	r16,r2
  80b76c:	18e0003c 	xorhi	r3,r3,32768
  80b770:	003fbc06 	br	80b664 <_strtod_r+0xbc8>
  80b774:	3827883a 	mov	r19,r7
  80b778:	003f1a06 	br	80b3e4 <_strtod_r+0x948>
  80b77c:	4091c83a 	sub	r8,r8,r2
  80b780:	003f0206 	br	80b38c <_strtod_r+0x8f0>
  80b784:	d8c00f17 	ldw	r3,60(sp)
  80b788:	0011883a 	mov	r8,zero
  80b78c:	0029883a 	mov	r20,zero
  80b790:	00d3c83a 	sub	r9,zero,r3
  80b794:	480f883a 	mov	r7,r9
  80b798:	003ef906 	br	80b380 <_strtod_r+0x8e4>
  80b79c:	00800044 	movi	r2,1
  80b7a0:	1880021e 	bne	r3,r2,80b7ac <_strtod_r+0xd10>
  80b7a4:	e0800117 	ldw	r2,4(fp)
  80b7a8:	1000a526 	beq	r2,zero,80ba40 <_strtod_r+0xfa4>
  80b7ac:	00affc34 	movhi	r2,49136
  80b7b0:	0021883a 	mov	r16,zero
  80b7b4:	044ffc34 	movhi	r17,16368
  80b7b8:	d8800815 	stw	r2,32(sp)
  80b7bc:	d8000715 	stw	zero,28(sp)
  80b7c0:	003f4c06 	br	80b4f4 <_strtod_r+0xa58>
  80b7c4:	880b883a 	mov	r5,r17
  80b7c8:	8009883a 	mov	r4,r16
  80b7cc:	080f7cc0 	call	80f7cc <__fixdfsi>
  80b7d0:	1009883a 	mov	r4,r2
  80b7d4:	080f6d40 	call	80f6d4 <__floatsidf>
  80b7d8:	880b883a 	mov	r5,r17
  80b7dc:	8009883a 	mov	r4,r16
  80b7e0:	100d883a 	mov	r6,r2
  80b7e4:	180f883a 	mov	r7,r3
  80b7e8:	080ec940 	call	80ec94 <__subdf3>
  80b7ec:	d9001317 	ldw	r4,76(sp)
  80b7f0:	100b883a 	mov	r5,r2
  80b7f4:	180d883a 	mov	r6,r3
  80b7f8:	1021883a 	mov	r16,r2
  80b7fc:	1823883a 	mov	r17,r3
  80b800:	2000061e 	bne	r4,zero,80b81c <_strtod_r+0xd80>
  80b804:	e0800017 	ldw	r2,0(fp)
  80b808:	1000041e 	bne	r2,zero,80b81c <_strtod_r+0xd80>
  80b80c:	00c00434 	movhi	r3,16
  80b810:	18ffffc4 	addi	r3,r3,-1
  80b814:	90c4703a 	and	r2,r18,r3
  80b818:	10004026 	beq	r2,zero,80b91c <_strtod_r+0xe80>
  80b81c:	00a52834 	movhi	r2,38048
  80b820:	108d6544 	addi	r2,r2,13717
  80b824:	00cff834 	movhi	r3,16352
  80b828:	18ffffc4 	addi	r3,r3,-1
  80b82c:	180f883a 	mov	r7,r3
  80b830:	8009883a 	mov	r4,r16
  80b834:	880b883a 	mov	r5,r17
  80b838:	100d883a 	mov	r6,r2
  80b83c:	080f5c40 	call	80f5c4 <__ltdf2>
  80b840:	10000916 	blt	r2,zero,80b868 <_strtod_r+0xdcc>
  80b844:	008d6c34 	movhi	r2,13744
  80b848:	10b94d44 	addi	r2,r2,-6859
  80b84c:	00cff834 	movhi	r3,16352
  80b850:	880b883a 	mov	r5,r17
  80b854:	180f883a 	mov	r7,r3
  80b858:	8009883a 	mov	r4,r16
  80b85c:	100d883a 	mov	r6,r2
  80b860:	080f4b40 	call	80f4b4 <__gtdf2>
  80b864:	00bf5c0e 	bge	zero,r2,80b5d8 <_strtod_r+0xb3c>
  80b868:	d9400517 	ldw	r5,20(sp)
  80b86c:	a809883a 	mov	r4,r21
  80b870:	08097f40 	call	8097f4 <_Bfree>
  80b874:	a809883a 	mov	r4,r21
  80b878:	b80b883a 	mov	r5,r23
  80b87c:	08097f40 	call	8097f4 <_Bfree>
  80b880:	a809883a 	mov	r4,r21
  80b884:	b00b883a 	mov	r5,r22
  80b888:	08097f40 	call	8097f4 <_Bfree>
  80b88c:	d9401017 	ldw	r5,64(sp)
  80b890:	a809883a 	mov	r4,r21
  80b894:	08097f40 	call	8097f4 <_Bfree>
  80b898:	a809883a 	mov	r4,r21
  80b89c:	a00b883a 	mov	r5,r20
  80b8a0:	08097f40 	call	8097f4 <_Bfree>
  80b8a4:	003cf406 	br	80ac78 <_strtod_r+0x1dc>
  80b8a8:	0080d434 	movhi	r2,848
  80b8ac:	288d883a 	add	r6,r5,r2
  80b8b0:	e1800115 	stw	r6,4(fp)
  80b8b4:	003f4306 	br	80b5c4 <_strtod_r+0xb28>
  80b8b8:	8005883a 	mov	r2,r16
  80b8bc:	88e0003c 	xorhi	r3,r17,32768
  80b8c0:	003f2606 	br	80b55c <_strtod_r+0xac0>
  80b8c4:	1009883a 	mov	r4,r2
  80b8c8:	080f9180 	call	80f918 <__floatunsidf>
  80b8cc:	1021883a 	mov	r16,r2
  80b8d0:	1823883a 	mov	r17,r3
  80b8d4:	003f1e06 	br	80b550 <_strtod_r+0xab4>
  80b8d8:	da000417 	ldw	r8,16(sp)
  80b8dc:	39c00044 	addi	r7,r7,1
  80b8e0:	003e6706 	br	80b280 <_strtod_r+0x7e4>
  80b8e4:	d8c00b17 	ldw	r3,44(sp)
  80b8e8:	00bfffc4 	movi	r2,-1
  80b8ec:	18bf831e 	bne	r3,r2,80b6fc <_strtod_r+0xc60>
  80b8f0:	00c00884 	movi	r3,34
  80b8f4:	a8c00015 	stw	r3,0(r21)
  80b8f8:	009ffc34 	movhi	r2,32752
  80b8fc:	e0800115 	stw	r2,4(fp)
  80b900:	e0000015 	stw	zero,0(fp)
  80b904:	003fd806 	br	80b868 <_strtod_r+0xdcc>
  80b908:	4007883a 	mov	r3,r8
  80b90c:	000d883a 	mov	r6,zero
  80b910:	0029883a 	mov	r20,zero
  80b914:	0021883a 	mov	r16,zero
  80b918:	003cc906 	br	80ac40 <_strtod_r+0x1a4>
  80b91c:	00a52834 	movhi	r2,38048
  80b920:	108d6544 	addi	r2,r2,13717
  80b924:	00cff434 	movhi	r3,16336
  80b928:	18ffffc4 	addi	r3,r3,-1
  80b92c:	2809883a 	mov	r4,r5
  80b930:	180f883a 	mov	r7,r3
  80b934:	300b883a 	mov	r5,r6
  80b938:	100d883a 	mov	r6,r2
  80b93c:	080f5c40 	call	80f5c4 <__ltdf2>
  80b940:	103f250e 	bge	r2,zero,80b5d8 <_strtod_r+0xb3c>
  80b944:	003fc806 	br	80b868 <_strtod_r+0xdcc>
  80b948:	0027883a 	mov	r19,zero
  80b94c:	04800044 	movi	r18,1
  80b950:	0015883a 	mov	r10,zero
  80b954:	003cc006 	br	80ac58 <_strtod_r+0x1bc>
  80b958:	00800884 	movi	r2,34
  80b95c:	a8800015 	stw	r2,0(r21)
  80b960:	019ffc34 	movhi	r6,32752
  80b964:	e1800115 	stw	r6,4(fp)
  80b968:	e0000015 	stw	zero,0(fp)
  80b96c:	003cc206 	br	80ac78 <_strtod_r+0x1dc>
  80b970:	015387c4 	movi	r5,19999
  80b974:	003d1e06 	br	80adf0 <_strtod_r+0x354>
  80b978:	300a90fa 	slli	r5,r6,3
  80b97c:	e0800017 	ldw	r2,0(fp)
  80b980:	e0c00117 	ldw	r3,4(fp)
  80b984:	01002074 	movhi	r4,129
  80b988:	2113f704 	addi	r4,r4,20444
  80b98c:	290b883a 	add	r5,r5,r4
  80b990:	2a000017 	ldw	r8,0(r5)
  80b994:	2a400117 	ldw	r9,4(r5)
  80b998:	1009883a 	mov	r4,r2
  80b99c:	180b883a 	mov	r5,r3
  80b9a0:	480f883a 	mov	r7,r9
  80b9a4:	400d883a 	mov	r6,r8
  80b9a8:	080ed880 	call	80ed88 <__muldf3>
  80b9ac:	e0c00115 	stw	r3,4(fp)
  80b9b0:	e0800015 	stw	r2,0(fp)
  80b9b4:	003cb006 	br	80ac78 <_strtod_r+0x1dc>
  80b9b8:	d8800d17 	ldw	r2,52(sp)
  80b9bc:	e0800015 	stw	r2,0(fp)
  80b9c0:	d8c00e17 	ldw	r3,56(sp)
  80b9c4:	e0c00115 	stw	r3,4(fp)
  80b9c8:	9880020c 	andi	r2,r19,8
  80b9cc:	103caa26 	beq	r2,zero,80ac78 <_strtod_r+0x1dc>
  80b9d0:	e0800117 	ldw	r2,4(fp)
  80b9d4:	10a00034 	orhi	r2,r2,32768
  80b9d8:	e0800115 	stw	r2,4(fp)
  80b9dc:	003ca606 	br	80ac78 <_strtod_r+0x1dc>
  80b9e0:	009ffc34 	movhi	r2,32752
  80b9e4:	e0800115 	stw	r2,4(fp)
  80b9e8:	e0000015 	stw	zero,0(fp)
  80b9ec:	003ff606 	br	80b9c8 <_strtod_r+0xf2c>
  80b9f0:	00a00034 	movhi	r2,32768
  80b9f4:	10bfffc4 	addi	r2,r2,-1
  80b9f8:	00ffffc4 	movi	r3,-1
  80b9fc:	e0800115 	stw	r2,4(fp)
  80ba00:	e0c00015 	stw	r3,0(fp)
  80ba04:	003ff006 	br	80b9c8 <_strtod_r+0xf2c>
  80ba08:	e0000115 	stw	zero,4(fp)
  80ba0c:	e0000015 	stw	zero,0(fp)
  80ba10:	003fed06 	br	80b9c8 <_strtod_r+0xf2c>
  80ba14:	d8800e17 	ldw	r2,56(sp)
  80ba18:	29010cc4 	addi	r4,r5,1075
  80ba1c:	00fffc34 	movhi	r3,65520
  80ba20:	18ffffc4 	addi	r3,r3,-1
  80ba24:	2008953a 	slli	r4,r4,20
  80ba28:	10c4703a 	and	r2,r2,r3
  80ba2c:	d8c00d17 	ldw	r3,52(sp)
  80ba30:	1104b03a 	or	r2,r2,r4
  80ba34:	e0800115 	stw	r2,4(fp)
  80ba38:	e0c00015 	stw	r3,0(fp)
  80ba3c:	003fe206 	br	80b9c8 <_strtod_r+0xf2c>
  80ba40:	00800884 	movi	r2,34
  80ba44:	a8800015 	stw	r2,0(r21)
  80ba48:	e0000015 	stw	zero,0(fp)
  80ba4c:	e0000115 	stw	zero,4(fp)
  80ba50:	003f8506 	br	80b868 <_strtod_r+0xdcc>
  80ba54:	03800044 	movi	r14,1
  80ba58:	003d7706 	br	80b038 <_strtod_r+0x59c>
  80ba5c:	99c5883a 	add	r2,r19,r7
  80ba60:	11ffffc4 	addi	r7,r2,-1
  80ba64:	00800204 	movi	r2,8
  80ba68:	3cc00044 	addi	r19,r7,1
  80ba6c:	11c0df16 	blt	r2,r7,80bdec <_strtod_r+0x1350>
  80ba70:	a08002a4 	muli	r2,r20,10
  80ba74:	000f883a 	mov	r7,zero
  80ba78:	1269883a 	add	r20,r2,r9
  80ba7c:	42000044 	addi	r8,r8,1
  80ba80:	da000415 	stw	r8,16(sp)
  80ba84:	41000007 	ldb	r4,0(r8)
  80ba88:	003d3706 	br	80af68 <_strtod_r+0x4cc>
  80ba8c:	d9801317 	ldw	r6,76(sp)
  80ba90:	3000511e 	bne	r6,zero,80bbd8 <_strtod_r+0x113c>
  80ba94:	e0800017 	ldw	r2,0(fp)
  80ba98:	1000d81e 	bne	r2,zero,80bdfc <_strtod_r+0x1360>
  80ba9c:	e0c00117 	ldw	r3,4(fp)
  80baa0:	01000434 	movhi	r4,16
  80baa4:	213fffc4 	addi	r4,r4,-1
  80baa8:	1904703a 	and	r2,r3,r4
  80baac:	1000b01e 	bne	r2,zero,80bd70 <_strtod_r+0x12d4>
  80bab0:	18dffc2c 	andhi	r3,r3,32752
  80bab4:	0081ac34 	movhi	r2,1712
  80bab8:	10c1102e 	bgeu	r2,r3,80befc <_strtod_r+0x1460>
  80babc:	a0800517 	ldw	r2,20(r20)
  80bac0:	1000031e 	bne	r2,zero,80bad0 <_strtod_r+0x1034>
  80bac4:	a0c00417 	ldw	r3,16(r20)
  80bac8:	00800044 	movi	r2,1
  80bacc:	10c0420e 	bge	r2,r3,80bbd8 <_strtod_r+0x113c>
  80bad0:	a00b883a 	mov	r5,r20
  80bad4:	a809883a 	mov	r4,r21
  80bad8:	01800044 	movi	r6,1
  80badc:	080a1380 	call	80a138 <__lshift>
  80bae0:	1009883a 	mov	r4,r2
  80bae4:	b00b883a 	mov	r5,r22
  80bae8:	1029883a 	mov	r20,r2
  80baec:	08099500 	call	809950 <__mcmp>
  80baf0:	0080c20e 	bge	zero,r2,80bdfc <_strtod_r+0x1360>
  80baf4:	e1800117 	ldw	r6,4(fp)
  80baf8:	d9001417 	ldw	r4,80(sp)
  80bafc:	2013003a 	cmpeq	r9,r4,zero
  80bb00:	4800ef1e 	bne	r9,zero,80bec0 <_strtod_r+0x1424>
  80bb04:	30dffc2c 	andhi	r3,r6,32752
  80bb08:	0081ac34 	movhi	r2,1712
  80bb0c:	10c0ec36 	bltu	r2,r3,80bec0 <_strtod_r+0x1424>
  80bb10:	0080dc34 	movhi	r2,880
  80bb14:	10ffca2e 	bgeu	r2,r3,80ba40 <_strtod_r+0xfa4>
  80bb18:	e0800017 	ldw	r2,0(fp)
  80bb1c:	e0c00117 	ldw	r3,4(fp)
  80bb20:	020e5434 	movhi	r8,14672
  80bb24:	000d883a 	mov	r6,zero
  80bb28:	400f883a 	mov	r7,r8
  80bb2c:	180b883a 	mov	r5,r3
  80bb30:	1009883a 	mov	r4,r2
  80bb34:	da000c15 	stw	r8,48(sp)
  80bb38:	d8000b15 	stw	zero,44(sp)
  80bb3c:	080ed880 	call	80ed88 <__muldf3>
  80bb40:	e0800015 	stw	r2,0(fp)
  80bb44:	e0c00115 	stw	r3,4(fp)
  80bb48:	183f471e 	bne	r3,zero,80b868 <_strtod_r+0xdcc>
  80bb4c:	103f461e 	bne	r2,zero,80b868 <_strtod_r+0xdcc>
  80bb50:	00800884 	movi	r2,34
  80bb54:	a8800015 	stw	r2,0(r21)
  80bb58:	003f4306 	br	80b868 <_strtod_r+0xdcc>
  80bb5c:	d8801317 	ldw	r2,76(sp)
  80bb60:	1025003a 	cmpeq	r18,r2,zero
  80bb64:	9000861e 	bne	r18,zero,80bd80 <_strtod_r+0x12e4>
  80bb68:	e1400117 	ldw	r5,4(fp)
  80bb6c:	00c00434 	movhi	r3,16
  80bb70:	18ffffc4 	addi	r3,r3,-1
  80bb74:	28c4703a 	and	r2,r5,r3
  80bb78:	10c01b26 	beq	r2,r3,80bbe8 <_strtod_r+0x114c>
  80bb7c:	e1c00017 	ldw	r7,0(fp)
  80bb80:	3880004c 	andi	r2,r7,1
  80bb84:	1005003a 	cmpeq	r2,r2,zero
  80bb88:	1000791e 	bne	r2,zero,80bd70 <_strtod_r+0x12d4>
  80bb8c:	9000b126 	beq	r18,zero,80be54 <_strtod_r+0x13b8>
  80bb90:	e4400117 	ldw	r17,4(fp)
  80bb94:	3809883a 	mov	r4,r7
  80bb98:	3821883a 	mov	r16,r7
  80bb9c:	880b883a 	mov	r5,r17
  80bba0:	08099b00 	call	8099b0 <__ulp>
  80bba4:	180f883a 	mov	r7,r3
  80bba8:	880b883a 	mov	r5,r17
  80bbac:	8009883a 	mov	r4,r16
  80bbb0:	100d883a 	mov	r6,r2
  80bbb4:	080ec940 	call	80ec94 <__subdf3>
  80bbb8:	1009883a 	mov	r4,r2
  80bbbc:	000d883a 	mov	r6,zero
  80bbc0:	000f883a 	mov	r7,zero
  80bbc4:	180b883a 	mov	r5,r3
  80bbc8:	e0800015 	stw	r2,0(fp)
  80bbcc:	e0c00115 	stw	r3,4(fp)
  80bbd0:	080f42c0 	call	80f42c <__nedf2>
  80bbd4:	103f9a26 	beq	r2,zero,80ba40 <_strtod_r+0xfa4>
  80bbd8:	d9001417 	ldw	r4,80(sp)
  80bbdc:	2013003a 	cmpeq	r9,r4,zero
  80bbe0:	483f211e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80bbe4:	003fcc06 	br	80bb18 <_strtod_r+0x107c>
  80bbe8:	d9001417 	ldw	r4,80(sp)
  80bbec:	e1c00017 	ldw	r7,0(fp)
  80bbf0:	2013003a 	cmpeq	r9,r4,zero
  80bbf4:	4800bd1e 	bne	r9,zero,80beec <_strtod_r+0x1450>
  80bbf8:	28dffc2c 	andhi	r3,r5,32752
  80bbfc:	0081a834 	movhi	r2,1696
  80bc00:	10c0ba36 	bltu	r2,r3,80beec <_strtod_r+0x1450>
  80bc04:	1804d53a 	srli	r2,r3,20
  80bc08:	00c01ac4 	movi	r3,107
  80bc0c:	013fffc4 	movi	r4,-1
  80bc10:	1887c83a 	sub	r3,r3,r2
  80bc14:	20c4983a 	sll	r2,r4,r3
  80bc18:	11ffd91e 	bne	r2,r7,80bb80 <_strtod_r+0x10e4>
  80bc1c:	28dffc2c 	andhi	r3,r5,32752
  80bc20:	00800434 	movhi	r2,16
  80bc24:	188d883a 	add	r6,r3,r2
  80bc28:	e1800115 	stw	r6,4(fp)
  80bc2c:	e0000015 	stw	zero,0(fp)
  80bc30:	483f0d1e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80bc34:	003fb806 	br	80bb18 <_strtod_r+0x107c>
  80bc38:	0021883a 	mov	r16,zero
  80bc3c:	0005883a 	mov	r2,zero
  80bc40:	044ff834 	movhi	r17,16352
  80bc44:	00eff834 	movhi	r3,49120
  80bc48:	003e8606 	br	80b664 <_strtod_r+0xbc8>
  80bc4c:	803d9e26 	beq	r16,zero,80b2c8 <_strtod_r+0x82c>
  80bc50:	0421c83a 	sub	r16,zero,r16
  80bc54:	814003cc 	andi	r5,r16,15
  80bc58:	28000f26 	beq	r5,zero,80bc98 <_strtod_r+0x11fc>
  80bc5c:	280a90fa 	slli	r5,r5,3
  80bc60:	01002074 	movhi	r4,129
  80bc64:	2113f704 	addi	r4,r4,20444
  80bc68:	e0800017 	ldw	r2,0(fp)
  80bc6c:	290b883a 	add	r5,r5,r4
  80bc70:	2a000017 	ldw	r8,0(r5)
  80bc74:	e0c00117 	ldw	r3,4(fp)
  80bc78:	2a400117 	ldw	r9,4(r5)
  80bc7c:	1009883a 	mov	r4,r2
  80bc80:	180b883a 	mov	r5,r3
  80bc84:	480f883a 	mov	r7,r9
  80bc88:	400d883a 	mov	r6,r8
  80bc8c:	080f14c0 	call	80f14c <__divdf3>
  80bc90:	e0c00115 	stw	r3,4(fp)
  80bc94:	e0800015 	stw	r2,0(fp)
  80bc98:	8021d13a 	srai	r16,r16,4
  80bc9c:	803d8a26 	beq	r16,zero,80b2c8 <_strtod_r+0x82c>
  80bca0:	008007c4 	movi	r2,31
  80bca4:	14002d16 	blt	r2,r16,80bd5c <_strtod_r+0x12c0>
  80bca8:	8080040c 	andi	r2,r16,16
  80bcac:	10009926 	beq	r2,zero,80bf14 <_strtod_r+0x1478>
  80bcb0:	00801a84 	movi	r2,106
  80bcb4:	d8801415 	stw	r2,80(sp)
  80bcb8:	0400110e 	bge	zero,r16,80bd00 <_strtod_r+0x1264>
  80bcbc:	04402074 	movhi	r17,129
  80bcc0:	8c544404 	addi	r17,r17,20752
  80bcc4:	8080004c 	andi	r2,r16,1
  80bcc8:	1005003a 	cmpeq	r2,r2,zero
  80bccc:	1000091e 	bne	r2,zero,80bcf4 <_strtod_r+0x1258>
  80bcd0:	e0800017 	ldw	r2,0(fp)
  80bcd4:	e0c00117 	ldw	r3,4(fp)
  80bcd8:	89800017 	ldw	r6,0(r17)
  80bcdc:	89c00117 	ldw	r7,4(r17)
  80bce0:	180b883a 	mov	r5,r3
  80bce4:	1009883a 	mov	r4,r2
  80bce8:	080ed880 	call	80ed88 <__muldf3>
  80bcec:	e0c00115 	stw	r3,4(fp)
  80bcf0:	e0800015 	stw	r2,0(fp)
  80bcf4:	8021d07a 	srai	r16,r16,1
  80bcf8:	8c400204 	addi	r17,r17,8
  80bcfc:	043ff116 	blt	zero,r16,80bcc4 <_strtod_r+0x1228>
  80bd00:	d8c01417 	ldw	r3,80(sp)
  80bd04:	18000d26 	beq	r3,zero,80bd3c <_strtod_r+0x12a0>
  80bd08:	e1000117 	ldw	r4,4(fp)
  80bd0c:	00c01ac4 	movi	r3,107
  80bd10:	209ffc2c 	andhi	r2,r4,32752
  80bd14:	1004d53a 	srli	r2,r2,20
  80bd18:	1887c83a 	sub	r3,r3,r2
  80bd1c:	00c0070e 	bge	zero,r3,80bd3c <_strtod_r+0x12a0>
  80bd20:	008007c4 	movi	r2,31
  80bd24:	10c0900e 	bge	r2,r3,80bf68 <_strtod_r+0x14cc>
  80bd28:	00800d04 	movi	r2,52
  80bd2c:	e0000015 	stw	zero,0(fp)
  80bd30:	10c0870e 	bge	r2,r3,80bf50 <_strtod_r+0x14b4>
  80bd34:	0180dc34 	movhi	r6,880
  80bd38:	e1800115 	stw	r6,4(fp)
  80bd3c:	e0800017 	ldw	r2,0(fp)
  80bd40:	e0c00117 	ldw	r3,4(fp)
  80bd44:	000d883a 	mov	r6,zero
  80bd48:	000f883a 	mov	r7,zero
  80bd4c:	180b883a 	mov	r5,r3
  80bd50:	1009883a 	mov	r4,r2
  80bd54:	080f42c0 	call	80f42c <__nedf2>
  80bd58:	103d5c1e 	bne	r2,zero,80b2cc <_strtod_r+0x830>
  80bd5c:	00800884 	movi	r2,34
  80bd60:	a8800015 	stw	r2,0(r21)
  80bd64:	e0000015 	stw	zero,0(fp)
  80bd68:	e0000115 	stw	zero,4(fp)
  80bd6c:	003bc206 	br	80ac78 <_strtod_r+0x1dc>
  80bd70:	d8801417 	ldw	r2,80(sp)
  80bd74:	1013003a 	cmpeq	r9,r2,zero
  80bd78:	483ebb1e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80bd7c:	003f6606 	br	80bb18 <_strtod_r+0x107c>
  80bd80:	e1800117 	ldw	r6,4(fp)
  80bd84:	00c00434 	movhi	r3,16
  80bd88:	18ffffc4 	addi	r3,r3,-1
  80bd8c:	30c4703a 	and	r2,r6,r3
  80bd90:	103f7a1e 	bne	r2,zero,80bb7c <_strtod_r+0x10e0>
  80bd94:	e1c00017 	ldw	r7,0(fp)
  80bd98:	383f791e 	bne	r7,zero,80bb80 <_strtod_r+0x10e4>
  80bd9c:	003f5606 	br	80baf8 <_strtod_r+0x105c>
  80bda0:	d9800f17 	ldw	r6,60(sp)
  80bda4:	00bffa84 	movi	r2,-22
  80bda8:	30bcd416 	blt	r6,r2,80b0fc <_strtod_r+0x660>
  80bdac:	317ffe24 	muli	r5,r6,-8
  80bdb0:	01002074 	movhi	r4,129
  80bdb4:	2113f704 	addi	r4,r4,20444
  80bdb8:	e0800017 	ldw	r2,0(fp)
  80bdbc:	290b883a 	add	r5,r5,r4
  80bdc0:	2a000017 	ldw	r8,0(r5)
  80bdc4:	e0c00117 	ldw	r3,4(fp)
  80bdc8:	2a400117 	ldw	r9,4(r5)
  80bdcc:	1009883a 	mov	r4,r2
  80bdd0:	180b883a 	mov	r5,r3
  80bdd4:	480f883a 	mov	r7,r9
  80bdd8:	400d883a 	mov	r6,r8
  80bddc:	080f14c0 	call	80f14c <__divdf3>
  80bde0:	e0c00115 	stw	r3,4(fp)
  80bde4:	e0800015 	stw	r2,0(fp)
  80bde8:	003ba306 	br	80ac78 <_strtod_r+0x1dc>
  80bdec:	00800404 	movi	r2,16
  80bdf0:	14c02f0e 	bge	r2,r19,80beb0 <_strtod_r+0x1414>
  80bdf4:	000f883a 	mov	r7,zero
  80bdf8:	003f2006 	br	80ba7c <_strtod_r+0xfe0>
  80bdfc:	d9801417 	ldw	r6,80(sp)
  80be00:	3013003a 	cmpeq	r9,r6,zero
  80be04:	483e981e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80be08:	003f4306 	br	80bb18 <_strtod_r+0x107c>
  80be0c:	00801a44 	movi	r2,105
  80be10:	20bc6326 	beq	r4,r2,80afa0 <_strtod_r+0x504>
  80be14:	00801b84 	movi	r2,110
  80be18:	20bbba1e 	bne	r4,r2,80ad04 <_strtod_r+0x268>
  80be1c:	dc000404 	addi	r16,sp,16
  80be20:	8009883a 	mov	r4,r16
  80be24:	01402074 	movhi	r5,129
  80be28:	29544304 	addi	r5,r5,20748
  80be2c:	080aa540 	call	80aa54 <match>
  80be30:	103bb426 	beq	r2,zero,80ad04 <_strtod_r+0x268>
  80be34:	d8800417 	ldw	r2,16(sp)
  80be38:	00c00a04 	movi	r3,40
  80be3c:	11000007 	ldb	r4,0(r2)
  80be40:	20c03626 	beq	r4,r3,80bf1c <_strtod_r+0x1480>
  80be44:	01bffe34 	movhi	r6,65528
  80be48:	e1800115 	stw	r6,4(fp)
  80be4c:	e0000015 	stw	zero,0(fp)
  80be50:	003b8906 	br	80ac78 <_strtod_r+0x1dc>
  80be54:	e4400117 	ldw	r17,4(fp)
  80be58:	3809883a 	mov	r4,r7
  80be5c:	3821883a 	mov	r16,r7
  80be60:	880b883a 	mov	r5,r17
  80be64:	08099b00 	call	8099b0 <__ulp>
  80be68:	100d883a 	mov	r6,r2
  80be6c:	880b883a 	mov	r5,r17
  80be70:	180f883a 	mov	r7,r3
  80be74:	8009883a 	mov	r4,r16
  80be78:	080ed140 	call	80ed14 <__adddf3>
  80be7c:	d9801417 	ldw	r6,80(sp)
  80be80:	e0c00115 	stw	r3,4(fp)
  80be84:	e0800015 	stw	r2,0(fp)
  80be88:	3013003a 	cmpeq	r9,r6,zero
  80be8c:	483e761e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80be90:	003f2106 	br	80bb18 <_strtod_r+0x107c>
  80be94:	000f883a 	mov	r7,zero
  80be98:	003cf006 	br	80b25c <_strtod_r+0x7c0>
  80be9c:	0080d434 	movhi	r2,848
  80bea0:	188d883a 	add	r6,r3,r2
  80bea4:	d8001415 	stw	zero,80(sp)
  80bea8:	e1800115 	stw	r6,4(fp)
  80beac:	003d0706 	br	80b2cc <_strtod_r+0x830>
  80beb0:	808002a4 	muli	r2,r16,10
  80beb4:	000f883a 	mov	r7,zero
  80beb8:	1261883a 	add	r16,r2,r9
  80bebc:	003eef06 	br	80ba7c <_strtod_r+0xfe0>
  80bec0:	309ffc2c 	andhi	r2,r6,32752
  80bec4:	00fffc34 	movhi	r3,65520
  80bec8:	10c5883a 	add	r2,r2,r3
  80becc:	00c00434 	movhi	r3,16
  80bed0:	18ffffc4 	addi	r3,r3,-1
  80bed4:	10ccb03a 	or	r6,r2,r3
  80bed8:	01ffffc4 	movi	r7,-1
  80bedc:	e1800115 	stw	r6,4(fp)
  80bee0:	e1c00015 	stw	r7,0(fp)
  80bee4:	483e601e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80bee8:	003f0b06 	br	80bb18 <_strtod_r+0x107c>
  80beec:	00bfffc4 	movi	r2,-1
  80bef0:	003f4906 	br	80bc18 <_strtod_r+0x117c>
  80bef4:	0025883a 	mov	r18,zero
  80bef8:	003cb106 	br	80b1c0 <_strtod_r+0x724>
  80befc:	d8c01417 	ldw	r3,80(sp)
  80bf00:	1813003a 	cmpeq	r9,r3,zero
  80bf04:	483e581e 	bne	r9,zero,80b868 <_strtod_r+0xdcc>
  80bf08:	003f0306 	br	80bb18 <_strtod_r+0x107c>
  80bf0c:	980f883a 	mov	r7,r19
  80bf10:	003ed406 	br	80ba64 <_strtod_r+0xfc8>
  80bf14:	d8001415 	stw	zero,80(sp)
  80bf18:	003f6706 	br	80bcb8 <_strtod_r+0x121c>
  80bf1c:	8009883a 	mov	r4,r16
  80bf20:	01402074 	movhi	r5,129
  80bf24:	2956c704 	addi	r5,r5,23324
  80bf28:	d9800d04 	addi	r6,sp,52
  80bf2c:	080d80c0 	call	80d80c <__hexnan>
  80bf30:	00c00144 	movi	r3,5
  80bf34:	10ffc31e 	bne	r2,r3,80be44 <_strtod_r+0x13a8>
  80bf38:	d8800e17 	ldw	r2,56(sp)
  80bf3c:	d9c00d17 	ldw	r7,52(sp)
  80bf40:	119ffc34 	orhi	r6,r2,32752
  80bf44:	e1800115 	stw	r6,4(fp)
  80bf48:	e1c00015 	stw	r7,0(fp)
  80bf4c:	003b4a06 	br	80ac78 <_strtod_r+0x1dc>
  80bf50:	18fff804 	addi	r3,r3,-32
  80bf54:	00bfffc4 	movi	r2,-1
  80bf58:	10c4983a 	sll	r2,r2,r3
  80bf5c:	208c703a 	and	r6,r4,r2
  80bf60:	e1800115 	stw	r6,4(fp)
  80bf64:	003f7506 	br	80bd3c <_strtod_r+0x12a0>
  80bf68:	00bfffc4 	movi	r2,-1
  80bf6c:	10c4983a 	sll	r2,r2,r3
  80bf70:	e0c00017 	ldw	r3,0(fp)
  80bf74:	188e703a 	and	r7,r3,r2
  80bf78:	e1c00015 	stw	r7,0(fp)
  80bf7c:	003f6f06 	br	80bd3c <_strtod_r+0x12a0>

0080bf80 <strtof>:
  80bf80:	defffa04 	addi	sp,sp,-24
  80bf84:	dd000415 	stw	r20,16(sp)
  80bf88:	05002074 	movhi	r20,129
  80bf8c:	a51bd004 	addi	r20,r20,28480
  80bf90:	2007883a 	mov	r3,r4
  80bf94:	a1000017 	ldw	r4,0(r20)
  80bf98:	280d883a 	mov	r6,r5
  80bf9c:	180b883a 	mov	r5,r3
  80bfa0:	dfc00515 	stw	ra,20(sp)
  80bfa4:	dcc00315 	stw	r19,12(sp)
  80bfa8:	dc800215 	stw	r18,8(sp)
  80bfac:	dc400115 	stw	r17,4(sp)
  80bfb0:	dc000015 	stw	r16,0(sp)
  80bfb4:	080aa9c0 	call	80aa9c <_strtod_r>
  80bfb8:	180b883a 	mov	r5,r3
  80bfbc:	1009883a 	mov	r4,r2
  80bfc0:	1823883a 	mov	r17,r3
  80bfc4:	1021883a 	mov	r16,r2
  80bfc8:	080f8a40 	call	80f8a4 <__truncdfsf2>
  80bfcc:	1009883a 	mov	r4,r2
  80bfd0:	000b883a 	mov	r5,zero
  80bfd4:	1025883a 	mov	r18,r2
  80bfd8:	1027883a 	mov	r19,r2
  80bfdc:	080e71c0 	call	80e71c <__nesf2>
  80bfe0:	000d883a 	mov	r6,zero
  80bfe4:	000f883a 	mov	r7,zero
  80bfe8:	8009883a 	mov	r4,r16
  80bfec:	880b883a 	mov	r5,r17
  80bff0:	10000e1e 	bne	r2,zero,80c02c <strtof+0xac>
  80bff4:	080f42c0 	call	80f42c <__nedf2>
  80bff8:	10000c26 	beq	r2,zero,80c02c <strtof+0xac>
  80bffc:	a0c00017 	ldw	r3,0(r20)
  80c000:	00800884 	movi	r2,34
  80c004:	18800015 	stw	r2,0(r3)
  80c008:	9805883a 	mov	r2,r19
  80c00c:	dfc00517 	ldw	ra,20(sp)
  80c010:	dd000417 	ldw	r20,16(sp)
  80c014:	dcc00317 	ldw	r19,12(sp)
  80c018:	dc800217 	ldw	r18,8(sp)
  80c01c:	dc400117 	ldw	r17,4(sp)
  80c020:	dc000017 	ldw	r16,0(sp)
  80c024:	dec00604 	addi	sp,sp,24
  80c028:	f800283a 	ret
  80c02c:	9009883a 	mov	r4,r18
  80c030:	015fe034 	movhi	r5,32640
  80c034:	297fffc4 	addi	r5,r5,-1
  80c038:	080e7940 	call	80e794 <__gtsf2>
  80c03c:	00ffffc4 	movi	r3,-1
  80c040:	011ffc34 	movhi	r4,32752
  80c044:	213fffc4 	addi	r4,r4,-1
  80c048:	200f883a 	mov	r7,r4
  80c04c:	180d883a 	mov	r6,r3
  80c050:	8009883a 	mov	r4,r16
  80c054:	880b883a 	mov	r5,r17
  80c058:	00800f16 	blt	zero,r2,80c098 <strtof+0x118>
  80c05c:	9009883a 	mov	r4,r18
  80c060:	017fe034 	movhi	r5,65408
  80c064:	297fffc4 	addi	r5,r5,-1
  80c068:	080e80c0 	call	80e80c <__ltsf2>
  80c06c:	023fffc4 	movi	r8,-1
  80c070:	027ffc34 	movhi	r9,65520
  80c074:	4a7fffc4 	addi	r9,r9,-1
  80c078:	880b883a 	mov	r5,r17
  80c07c:	480f883a 	mov	r7,r9
  80c080:	8009883a 	mov	r4,r16
  80c084:	400d883a 	mov	r6,r8
  80c088:	103fdf0e 	bge	r2,zero,80c008 <strtof+0x88>
  80c08c:	080f5c40 	call	80f5c4 <__ltdf2>
  80c090:	103fda0e 	bge	r2,zero,80bffc <strtof+0x7c>
  80c094:	003fdc06 	br	80c008 <strtof+0x88>
  80c098:	080f4b40 	call	80f4b4 <__gtdf2>
  80c09c:	00bfd70e 	bge	zero,r2,80bffc <strtof+0x7c>
  80c0a0:	003fee06 	br	80c05c <strtof+0xdc>

0080c0a4 <strtod>:
  80c0a4:	01802074 	movhi	r6,129
  80c0a8:	319bd004 	addi	r6,r6,28480
  80c0ac:	2007883a 	mov	r3,r4
  80c0b0:	31000017 	ldw	r4,0(r6)
  80c0b4:	280d883a 	mov	r6,r5
  80c0b8:	180b883a 	mov	r5,r3
  80c0bc:	080aa9c1 	jmpi	80aa9c <_strtod_r>

0080c0c0 <_strtol_r>:
  80c0c0:	defff304 	addi	sp,sp,-52
  80c0c4:	00802074 	movhi	r2,129
  80c0c8:	109bd404 	addi	r2,r2,28496
  80c0cc:	dcc00615 	stw	r19,24(sp)
  80c0d0:	14c00017 	ldw	r19,0(r2)
  80c0d4:	ddc00a15 	stw	r23,40(sp)
  80c0d8:	dc000315 	stw	r16,12(sp)
  80c0dc:	dfc00c15 	stw	ra,48(sp)
  80c0e0:	df000b15 	stw	fp,44(sp)
  80c0e4:	dd800915 	stw	r22,36(sp)
  80c0e8:	dd400815 	stw	r21,32(sp)
  80c0ec:	dd000715 	stw	r20,28(sp)
  80c0f0:	dc800515 	stw	r18,20(sp)
  80c0f4:	dc400415 	stw	r17,16(sp)
  80c0f8:	282f883a 	mov	r23,r5
  80c0fc:	d9000015 	stw	r4,0(sp)
  80c100:	d9800115 	stw	r6,4(sp)
  80c104:	2821883a 	mov	r16,r5
  80c108:	84400007 	ldb	r17,0(r16)
  80c10c:	84000044 	addi	r16,r16,1
  80c110:	9c47883a 	add	r3,r19,r17
  80c114:	18800003 	ldbu	r2,0(r3)
  80c118:	1080020c 	andi	r2,r2,8
  80c11c:	103ffa1e 	bne	r2,zero,80c108 <_strtol_r+0x48>
  80c120:	00800b44 	movi	r2,45
  80c124:	88805c26 	beq	r17,r2,80c298 <_strtol_r+0x1d8>
  80c128:	00800ac4 	movi	r2,43
  80c12c:	88805726 	beq	r17,r2,80c28c <_strtol_r+0x1cc>
  80c130:	0039883a 	mov	fp,zero
  80c134:	3807003a 	cmpeq	r3,r7,zero
  80c138:	1800431e 	bne	r3,zero,80c248 <_strtol_r+0x188>
  80c13c:	00800404 	movi	r2,16
  80c140:	38804126 	beq	r7,r2,80c248 <_strtol_r+0x188>
  80c144:	3829883a 	mov	r20,r7
  80c148:	e02cc03a 	cmpne	r22,fp,zero
  80c14c:	b0004b1e 	bne	r22,zero,80c27c <_strtol_r+0x1bc>
  80c150:	04a00034 	movhi	r18,32768
  80c154:	94bfffc4 	addi	r18,r18,-1
  80c158:	9009883a 	mov	r4,r18
  80c15c:	a00b883a 	mov	r5,r20
  80c160:	d9c00215 	stw	r7,8(sp)
  80c164:	080fbf00 	call	80fbf0 <__umodsi3>
  80c168:	9009883a 	mov	r4,r18
  80c16c:	a00b883a 	mov	r5,r20
  80c170:	102b883a 	mov	r21,r2
  80c174:	080fbe80 	call	80fbe8 <__udivsi3>
  80c178:	1011883a 	mov	r8,r2
  80c17c:	9c45883a 	add	r2,r19,r17
  80c180:	11000003 	ldbu	r4,0(r2)
  80c184:	000b883a 	mov	r5,zero
  80c188:	000d883a 	mov	r6,zero
  80c18c:	20c0010c 	andi	r3,r4,4
  80c190:	d9c00217 	ldw	r7,8(sp)
  80c194:	18000e26 	beq	r3,zero,80c1d0 <_strtol_r+0x110>
  80c198:	88fff404 	addi	r3,r17,-48
  80c19c:	19c0140e 	bge	r3,r7,80c1f0 <_strtol_r+0x130>
  80c1a0:	30003116 	blt	r6,zero,80c268 <_strtol_r+0x1a8>
  80c1a4:	41403036 	bltu	r8,r5,80c268 <_strtol_r+0x1a8>
  80c1a8:	2a002e26 	beq	r5,r8,80c264 <_strtol_r+0x1a4>
  80c1ac:	2d05383a 	mul	r2,r5,r20
  80c1b0:	01800044 	movi	r6,1
  80c1b4:	10cb883a 	add	r5,r2,r3
  80c1b8:	84400007 	ldb	r17,0(r16)
  80c1bc:	84000044 	addi	r16,r16,1
  80c1c0:	9c45883a 	add	r2,r19,r17
  80c1c4:	11000003 	ldbu	r4,0(r2)
  80c1c8:	20c0010c 	andi	r3,r4,4
  80c1cc:	183ff21e 	bne	r3,zero,80c198 <_strtol_r+0xd8>
  80c1d0:	208000cc 	andi	r2,r4,3
  80c1d4:	10000626 	beq	r2,zero,80c1f0 <_strtol_r+0x130>
  80c1d8:	2080004c 	andi	r2,r4,1
  80c1dc:	1005003a 	cmpeq	r2,r2,zero
  80c1e0:	1000231e 	bne	r2,zero,80c270 <_strtol_r+0x1b0>
  80c1e4:	00800dc4 	movi	r2,55
  80c1e8:	8887c83a 	sub	r3,r17,r2
  80c1ec:	19ffec16 	blt	r3,r7,80c1a0 <_strtol_r+0xe0>
  80c1f0:	30002d16 	blt	r6,zero,80c2a8 <_strtol_r+0x1e8>
  80c1f4:	b000231e 	bne	r22,zero,80c284 <_strtol_r+0x1c4>
  80c1f8:	2807883a 	mov	r3,r5
  80c1fc:	d8800117 	ldw	r2,4(sp)
  80c200:	10000426 	beq	r2,zero,80c214 <_strtol_r+0x154>
  80c204:	30000126 	beq	r6,zero,80c20c <_strtol_r+0x14c>
  80c208:	85ffffc4 	addi	r23,r16,-1
  80c20c:	d9000117 	ldw	r4,4(sp)
  80c210:	25c00015 	stw	r23,0(r4)
  80c214:	1805883a 	mov	r2,r3
  80c218:	dfc00c17 	ldw	ra,48(sp)
  80c21c:	df000b17 	ldw	fp,44(sp)
  80c220:	ddc00a17 	ldw	r23,40(sp)
  80c224:	dd800917 	ldw	r22,36(sp)
  80c228:	dd400817 	ldw	r21,32(sp)
  80c22c:	dd000717 	ldw	r20,28(sp)
  80c230:	dcc00617 	ldw	r19,24(sp)
  80c234:	dc800517 	ldw	r18,20(sp)
  80c238:	dc400417 	ldw	r17,16(sp)
  80c23c:	dc000317 	ldw	r16,12(sp)
  80c240:	dec00d04 	addi	sp,sp,52
  80c244:	f800283a 	ret
  80c248:	00800c04 	movi	r2,48
  80c24c:	88801d26 	beq	r17,r2,80c2c4 <_strtol_r+0x204>
  80c250:	183fbc26 	beq	r3,zero,80c144 <_strtol_r+0x84>
  80c254:	00800c04 	movi	r2,48
  80c258:	88802726 	beq	r17,r2,80c2f8 <_strtol_r+0x238>
  80c25c:	01c00284 	movi	r7,10
  80c260:	003fb806 	br	80c144 <_strtol_r+0x84>
  80c264:	a8ffd10e 	bge	r21,r3,80c1ac <_strtol_r+0xec>
  80c268:	01bfffc4 	movi	r6,-1
  80c26c:	003fd206 	br	80c1b8 <_strtol_r+0xf8>
  80c270:	008015c4 	movi	r2,87
  80c274:	8887c83a 	sub	r3,r17,r2
  80c278:	003fdc06 	br	80c1ec <_strtol_r+0x12c>
  80c27c:	04a00034 	movhi	r18,32768
  80c280:	003fb506 	br	80c158 <_strtol_r+0x98>
  80c284:	0147c83a 	sub	r3,zero,r5
  80c288:	003fdc06 	br	80c1fc <_strtol_r+0x13c>
  80c28c:	84400007 	ldb	r17,0(r16)
  80c290:	84000044 	addi	r16,r16,1
  80c294:	003fa606 	br	80c130 <_strtol_r+0x70>
  80c298:	84400007 	ldb	r17,0(r16)
  80c29c:	07000044 	movi	fp,1
  80c2a0:	84000044 	addi	r16,r16,1
  80c2a4:	003fa306 	br	80c134 <_strtol_r+0x74>
  80c2a8:	e005003a 	cmpeq	r2,fp,zero
  80c2ac:	10000f1e 	bne	r2,zero,80c2ec <_strtol_r+0x22c>
  80c2b0:	00e00034 	movhi	r3,32768
  80c2b4:	d9000017 	ldw	r4,0(sp)
  80c2b8:	00800884 	movi	r2,34
  80c2bc:	20800015 	stw	r2,0(r4)
  80c2c0:	003fce06 	br	80c1fc <_strtol_r+0x13c>
  80c2c4:	81000007 	ldb	r4,0(r16)
  80c2c8:	00801e04 	movi	r2,120
  80c2cc:	20800226 	beq	r4,r2,80c2d8 <_strtol_r+0x218>
  80c2d0:	00801604 	movi	r2,88
  80c2d4:	20bfde1e 	bne	r4,r2,80c250 <_strtol_r+0x190>
  80c2d8:	84400047 	ldb	r17,1(r16)
  80c2dc:	01c00404 	movi	r7,16
  80c2e0:	84000084 	addi	r16,r16,2
  80c2e4:	3829883a 	mov	r20,r7
  80c2e8:	003f9706 	br	80c148 <_strtol_r+0x88>
  80c2ec:	00e00034 	movhi	r3,32768
  80c2f0:	18ffffc4 	addi	r3,r3,-1
  80c2f4:	003fef06 	br	80c2b4 <_strtol_r+0x1f4>
  80c2f8:	01c00204 	movi	r7,8
  80c2fc:	3829883a 	mov	r20,r7
  80c300:	003f9106 	br	80c148 <_strtol_r+0x88>

0080c304 <strtol>:
  80c304:	00802074 	movhi	r2,129
  80c308:	109bd004 	addi	r2,r2,28480
  80c30c:	2013883a 	mov	r9,r4
  80c310:	11000017 	ldw	r4,0(r2)
  80c314:	2805883a 	mov	r2,r5
  80c318:	300f883a 	mov	r7,r6
  80c31c:	480b883a 	mov	r5,r9
  80c320:	100d883a 	mov	r6,r2
  80c324:	080c0c01 	jmpi	80c0c0 <_strtol_r>

0080c328 <_strtoll_r>:
  80c328:	defff004 	addi	sp,sp,-64
  80c32c:	00802074 	movhi	r2,129
  80c330:	109bd404 	addi	r2,r2,28496
  80c334:	df000e15 	stw	fp,56(sp)
  80c338:	17000017 	ldw	fp,0(r2)
  80c33c:	ddc00d15 	stw	r23,52(sp)
  80c340:	dd000a15 	stw	r20,40(sp)
  80c344:	dfc00f15 	stw	ra,60(sp)
  80c348:	dd800c15 	stw	r22,48(sp)
  80c34c:	dd400b15 	stw	r21,44(sp)
  80c350:	dcc00915 	stw	r19,36(sp)
  80c354:	dc800815 	stw	r18,32(sp)
  80c358:	dc400715 	stw	r17,28(sp)
  80c35c:	dc000615 	stw	r16,24(sp)
  80c360:	d9400315 	stw	r5,12(sp)
  80c364:	d9000215 	stw	r4,8(sp)
  80c368:	d9800415 	stw	r6,16(sp)
  80c36c:	382f883a 	mov	r23,r7
  80c370:	2829883a 	mov	r20,r5
  80c374:	a4c00007 	ldb	r19,0(r20)
  80c378:	a5000044 	addi	r20,r20,1
  80c37c:	e4c7883a 	add	r3,fp,r19
  80c380:	18800003 	ldbu	r2,0(r3)
  80c384:	1080020c 	andi	r2,r2,8
  80c388:	103ffa1e 	bne	r2,zero,80c374 <_strtoll_r+0x4c>
  80c38c:	00800b44 	movi	r2,45
  80c390:	98808826 	beq	r19,r2,80c5b4 <_strtoll_r+0x28c>
  80c394:	00800ac4 	movi	r2,43
  80c398:	98808326 	beq	r19,r2,80c5a8 <_strtoll_r+0x280>
  80c39c:	d8000115 	stw	zero,4(sp)
  80c3a0:	b807003a 	cmpeq	r3,r23,zero
  80c3a4:	18005f1e 	bne	r3,zero,80c524 <_strtoll_r+0x1fc>
  80c3a8:	00800404 	movi	r2,16
  80c3ac:	b8805d26 	beq	r23,r2,80c524 <_strtoll_r+0x1fc>
  80c3b0:	b82dd7fa 	srai	r22,r23,31
  80c3b4:	b82b883a 	mov	r21,r23
  80c3b8:	d8c00117 	ldw	r3,4(sp)
  80c3bc:	1806c03a 	cmpne	r3,r3,zero
  80c3c0:	d8c00515 	stw	r3,20(sp)
  80c3c4:	1800631e 	bne	r3,zero,80c554 <_strtoll_r+0x22c>
  80c3c8:	043fffc4 	movi	r16,-1
  80c3cc:	04600034 	movhi	r17,32768
  80c3d0:	8c7fffc4 	addi	r17,r17,-1
  80c3d4:	880b883a 	mov	r5,r17
  80c3d8:	8009883a 	mov	r4,r16
  80c3dc:	a80d883a 	mov	r6,r21
  80c3e0:	b00f883a 	mov	r7,r22
  80c3e4:	080e16c0 	call	80e16c <__umoddi3>
  80c3e8:	880b883a 	mov	r5,r17
  80c3ec:	8009883a 	mov	r4,r16
  80c3f0:	b00f883a 	mov	r7,r22
  80c3f4:	a80d883a 	mov	r6,r21
  80c3f8:	d8800015 	stw	r2,0(sp)
  80c3fc:	080db900 	call	80db90 <__udivdi3>
  80c400:	1023883a 	mov	r17,r2
  80c404:	e4c5883a 	add	r2,fp,r19
  80c408:	11000003 	ldbu	r4,0(r2)
  80c40c:	1825883a 	mov	r18,r3
  80c410:	0015883a 	mov	r10,zero
  80c414:	20c0010c 	andi	r3,r4,4
  80c418:	0017883a 	mov	r11,zero
  80c41c:	000f883a 	mov	r7,zero
  80c420:	18001a26 	beq	r3,zero,80c48c <_strtoll_r+0x164>
  80c424:	9c3ff404 	addi	r16,r19,-48
  80c428:	85c0200e 	bge	r16,r23,80c4ac <_strtoll_r+0x184>
  80c42c:	38003b16 	blt	r7,zero,80c51c <_strtoll_r+0x1f4>
  80c430:	92c03a36 	bltu	r18,r11,80c51c <_strtoll_r+0x1f4>
  80c434:	5c803826 	beq	r11,r18,80c518 <_strtoll_r+0x1f0>
  80c438:	54404c26 	beq	r10,r17,80c56c <_strtoll_r+0x244>
  80c43c:	580b883a 	mov	r5,r11
  80c440:	5009883a 	mov	r4,r10
  80c444:	a80d883a 	mov	r6,r21
  80c448:	b00f883a 	mov	r7,r22
  80c44c:	080da540 	call	80da54 <__muldi3>
  80c450:	8013d7fa 	srai	r9,r16,31
  80c454:	100d883a 	mov	r6,r2
  80c458:	1405883a 	add	r2,r2,r16
  80c45c:	118d803a 	cmpltu	r6,r2,r6
  80c460:	1a47883a 	add	r3,r3,r9
  80c464:	30cd883a 	add	r6,r6,r3
  80c468:	1015883a 	mov	r10,r2
  80c46c:	3017883a 	mov	r11,r6
  80c470:	01c00044 	movi	r7,1
  80c474:	a4c00007 	ldb	r19,0(r20)
  80c478:	a5000044 	addi	r20,r20,1
  80c47c:	e4c5883a 	add	r2,fp,r19
  80c480:	11000003 	ldbu	r4,0(r2)
  80c484:	20c0010c 	andi	r3,r4,4
  80c488:	183fe61e 	bne	r3,zero,80c424 <_strtoll_r+0xfc>
  80c48c:	208000cc 	andi	r2,r4,3
  80c490:	10000626 	beq	r2,zero,80c4ac <_strtoll_r+0x184>
  80c494:	2080004c 	andi	r2,r4,1
  80c498:	1005003a 	cmpeq	r2,r2,zero
  80c49c:	1000301e 	bne	r2,zero,80c560 <_strtoll_r+0x238>
  80c4a0:	02000dc4 	movi	r8,55
  80c4a4:	9a21c83a 	sub	r16,r19,r8
  80c4a8:	85ffe016 	blt	r16,r23,80c42c <_strtoll_r+0x104>
  80c4ac:	38004616 	blt	r7,zero,80c5c8 <_strtoll_r+0x2a0>
  80c4b0:	d8800517 	ldw	r2,20(sp)
  80c4b4:	1000341e 	bne	r2,zero,80c588 <_strtoll_r+0x260>
  80c4b8:	500b883a 	mov	r5,r10
  80c4bc:	580d883a 	mov	r6,r11
  80c4c0:	d8c00417 	ldw	r3,16(sp)
  80c4c4:	18000626 	beq	r3,zero,80c4e0 <_strtoll_r+0x1b8>
  80c4c8:	38000226 	beq	r7,zero,80c4d4 <_strtoll_r+0x1ac>
  80c4cc:	a53fffc4 	addi	r20,r20,-1
  80c4d0:	dd000315 	stw	r20,12(sp)
  80c4d4:	d8c00317 	ldw	r3,12(sp)
  80c4d8:	d8800417 	ldw	r2,16(sp)
  80c4dc:	10c00015 	stw	r3,0(r2)
  80c4e0:	2805883a 	mov	r2,r5
  80c4e4:	3007883a 	mov	r3,r6
  80c4e8:	dfc00f17 	ldw	ra,60(sp)
  80c4ec:	df000e17 	ldw	fp,56(sp)
  80c4f0:	ddc00d17 	ldw	r23,52(sp)
  80c4f4:	dd800c17 	ldw	r22,48(sp)
  80c4f8:	dd400b17 	ldw	r21,44(sp)
  80c4fc:	dd000a17 	ldw	r20,40(sp)
  80c500:	dcc00917 	ldw	r19,36(sp)
  80c504:	dc800817 	ldw	r18,32(sp)
  80c508:	dc400717 	ldw	r17,28(sp)
  80c50c:	dc000617 	ldw	r16,24(sp)
  80c510:	dec01004 	addi	sp,sp,64
  80c514:	f800283a 	ret
  80c518:	8abfc72e 	bgeu	r17,r10,80c438 <_strtoll_r+0x110>
  80c51c:	01ffffc4 	movi	r7,-1
  80c520:	003fd406 	br	80c474 <_strtoll_r+0x14c>
  80c524:	00800c04 	movi	r2,48
  80c528:	98803226 	beq	r19,r2,80c5f4 <_strtoll_r+0x2cc>
  80c52c:	183fa026 	beq	r3,zero,80c3b0 <_strtoll_r+0x88>
  80c530:	00800c04 	movi	r2,48
  80c534:	98803e26 	beq	r19,r2,80c630 <_strtoll_r+0x308>
  80c538:	d8c00117 	ldw	r3,4(sp)
  80c53c:	05c00284 	movi	r23,10
  80c540:	b82b883a 	mov	r21,r23
  80c544:	1806c03a 	cmpne	r3,r3,zero
  80c548:	002d883a 	mov	r22,zero
  80c54c:	d8c00515 	stw	r3,20(sp)
  80c550:	183f9d26 	beq	r3,zero,80c3c8 <_strtoll_r+0xa0>
  80c554:	0021883a 	mov	r16,zero
  80c558:	04600034 	movhi	r17,32768
  80c55c:	003f9d06 	br	80c3d4 <_strtoll_r+0xac>
  80c560:	020015c4 	movi	r8,87
  80c564:	9a21c83a 	sub	r16,r19,r8
  80c568:	003fcf06 	br	80c4a8 <_strtoll_r+0x180>
  80c56c:	5cbfb31e 	bne	r11,r18,80c43c <_strtoll_r+0x114>
  80c570:	d8800017 	ldw	r2,0(sp)
  80c574:	143fb10e 	bge	r2,r16,80c43c <_strtoll_r+0x114>
  80c578:	8815883a 	mov	r10,r17
  80c57c:	9017883a 	mov	r11,r18
  80c580:	01ffffc4 	movi	r7,-1
  80c584:	003fbb06 	br	80c474 <_strtoll_r+0x14c>
  80c588:	0009883a 	mov	r4,zero
  80c58c:	2285c83a 	sub	r2,r4,r10
  80c590:	2089803a 	cmpltu	r4,r4,r2
  80c594:	02c7c83a 	sub	r3,zero,r11
  80c598:	1909c83a 	sub	r4,r3,r4
  80c59c:	100b883a 	mov	r5,r2
  80c5a0:	200d883a 	mov	r6,r4
  80c5a4:	003fc606 	br	80c4c0 <_strtoll_r+0x198>
  80c5a8:	a4c00007 	ldb	r19,0(r20)
  80c5ac:	a5000044 	addi	r20,r20,1
  80c5b0:	003f7a06 	br	80c39c <_strtoll_r+0x74>
  80c5b4:	a4c00007 	ldb	r19,0(r20)
  80c5b8:	00800044 	movi	r2,1
  80c5bc:	a5000044 	addi	r20,r20,1
  80c5c0:	d8800115 	stw	r2,4(sp)
  80c5c4:	003f7606 	br	80c3a0 <_strtoll_r+0x78>
  80c5c8:	d8c00117 	ldw	r3,4(sp)
  80c5cc:	1805003a 	cmpeq	r2,r3,zero
  80c5d0:	1000131e 	bne	r2,zero,80c620 <_strtoll_r+0x2f8>
  80c5d4:	0005883a 	mov	r2,zero
  80c5d8:	00e00034 	movhi	r3,32768
  80c5dc:	100b883a 	mov	r5,r2
  80c5e0:	180d883a 	mov	r6,r3
  80c5e4:	d8c00217 	ldw	r3,8(sp)
  80c5e8:	00800884 	movi	r2,34
  80c5ec:	18800015 	stw	r2,0(r3)
  80c5f0:	003fb306 	br	80c4c0 <_strtoll_r+0x198>
  80c5f4:	a1000007 	ldb	r4,0(r20)
  80c5f8:	00801e04 	movi	r2,120
  80c5fc:	20800226 	beq	r4,r2,80c608 <_strtoll_r+0x2e0>
  80c600:	00801604 	movi	r2,88
  80c604:	20bfc91e 	bne	r4,r2,80c52c <_strtoll_r+0x204>
  80c608:	a4c00047 	ldb	r19,1(r20)
  80c60c:	05c00404 	movi	r23,16
  80c610:	b82b883a 	mov	r21,r23
  80c614:	a5000084 	addi	r20,r20,2
  80c618:	002d883a 	mov	r22,zero
  80c61c:	003f6606 	br	80c3b8 <_strtoll_r+0x90>
  80c620:	017fffc4 	movi	r5,-1
  80c624:	01a00034 	movhi	r6,32768
  80c628:	31bfffc4 	addi	r6,r6,-1
  80c62c:	003fed06 	br	80c5e4 <_strtoll_r+0x2bc>
  80c630:	05c00204 	movi	r23,8
  80c634:	b82b883a 	mov	r21,r23
  80c638:	002d883a 	mov	r22,zero
  80c63c:	003f5e06 	br	80c3b8 <_strtoll_r+0x90>

0080c640 <_strtoul_r>:
  80c640:	defff604 	addi	sp,sp,-40
  80c644:	00802074 	movhi	r2,129
  80c648:	109bd404 	addi	r2,r2,28496
  80c64c:	dd000415 	stw	r20,16(sp)
  80c650:	15000017 	ldw	r20,0(r2)
  80c654:	ddc00715 	stw	r23,28(sp)
  80c658:	dd800615 	stw	r22,24(sp)
  80c65c:	dd400515 	stw	r21,20(sp)
  80c660:	dc800215 	stw	r18,8(sp)
  80c664:	dc000015 	stw	r16,0(sp)
  80c668:	dfc00915 	stw	ra,36(sp)
  80c66c:	df000815 	stw	fp,32(sp)
  80c670:	dcc00315 	stw	r19,12(sp)
  80c674:	dc400115 	stw	r17,4(sp)
  80c678:	282b883a 	mov	r21,r5
  80c67c:	202f883a 	mov	r23,r4
  80c680:	302d883a 	mov	r22,r6
  80c684:	3825883a 	mov	r18,r7
  80c688:	2821883a 	mov	r16,r5
  80c68c:	84400007 	ldb	r17,0(r16)
  80c690:	84000044 	addi	r16,r16,1
  80c694:	a447883a 	add	r3,r20,r17
  80c698:	18800003 	ldbu	r2,0(r3)
  80c69c:	1080020c 	andi	r2,r2,8
  80c6a0:	103ffa1e 	bne	r2,zero,80c68c <_strtoul_r+0x4c>
  80c6a4:	00800b44 	movi	r2,45
  80c6a8:	88805626 	beq	r17,r2,80c804 <_strtoul_r+0x1c4>
  80c6ac:	00800ac4 	movi	r2,43
  80c6b0:	88805126 	beq	r17,r2,80c7f8 <_strtoul_r+0x1b8>
  80c6b4:	0039883a 	mov	fp,zero
  80c6b8:	9007003a 	cmpeq	r3,r18,zero
  80c6bc:	18003b1e 	bne	r3,zero,80c7ac <_strtoul_r+0x16c>
  80c6c0:	00800404 	movi	r2,16
  80c6c4:	90803926 	beq	r18,r2,80c7ac <_strtoul_r+0x16c>
  80c6c8:	013fffc4 	movi	r4,-1
  80c6cc:	900b883a 	mov	r5,r18
  80c6d0:	080fbe80 	call	80fbe8 <__udivsi3>
  80c6d4:	013fffc4 	movi	r4,-1
  80c6d8:	900b883a 	mov	r5,r18
  80c6dc:	1027883a 	mov	r19,r2
  80c6e0:	080fbf00 	call	80fbf0 <__umodsi3>
  80c6e4:	1011883a 	mov	r8,r2
  80c6e8:	900f883a 	mov	r7,r18
  80c6ec:	a445883a 	add	r2,r20,r17
  80c6f0:	11000003 	ldbu	r4,0(r2)
  80c6f4:	000b883a 	mov	r5,zero
  80c6f8:	000d883a 	mov	r6,zero
  80c6fc:	20c0010c 	andi	r3,r4,4
  80c700:	18000e26 	beq	r3,zero,80c73c <_strtoul_r+0xfc>
  80c704:	88fff404 	addi	r3,r17,-48
  80c708:	1c80140e 	bge	r3,r18,80c75c <_strtoul_r+0x11c>
  80c70c:	30003316 	blt	r6,zero,80c7dc <_strtoul_r+0x19c>
  80c710:	99403236 	bltu	r19,r5,80c7dc <_strtoul_r+0x19c>
  80c714:	2cc03026 	beq	r5,r19,80c7d8 <_strtoul_r+0x198>
  80c718:	29c5383a 	mul	r2,r5,r7
  80c71c:	01800044 	movi	r6,1
  80c720:	10cb883a 	add	r5,r2,r3
  80c724:	84400007 	ldb	r17,0(r16)
  80c728:	84000044 	addi	r16,r16,1
  80c72c:	a445883a 	add	r2,r20,r17
  80c730:	11000003 	ldbu	r4,0(r2)
  80c734:	20c0010c 	andi	r3,r4,4
  80c738:	183ff21e 	bne	r3,zero,80c704 <_strtoul_r+0xc4>
  80c73c:	208000cc 	andi	r2,r4,3
  80c740:	10000626 	beq	r2,zero,80c75c <_strtoul_r+0x11c>
  80c744:	2080004c 	andi	r2,r4,1
  80c748:	1005003a 	cmpeq	r2,r2,zero
  80c74c:	1000251e 	bne	r2,zero,80c7e4 <_strtoul_r+0x1a4>
  80c750:	00800dc4 	movi	r2,55
  80c754:	8887c83a 	sub	r3,r17,r2
  80c758:	1cbfec16 	blt	r3,r18,80c70c <_strtoul_r+0xcc>
  80c75c:	3000400e 	bge	r6,zero,80c860 <_strtoul_r+0x220>
  80c760:	00800884 	movi	r2,34
  80c764:	017fffc4 	movi	r5,-1
  80c768:	b8800015 	stw	r2,0(r23)
  80c76c:	b0000226 	beq	r22,zero,80c778 <_strtoul_r+0x138>
  80c770:	30001f1e 	bne	r6,zero,80c7f0 <_strtoul_r+0x1b0>
  80c774:	b5400015 	stw	r21,0(r22)
  80c778:	2805883a 	mov	r2,r5
  80c77c:	dfc00917 	ldw	ra,36(sp)
  80c780:	df000817 	ldw	fp,32(sp)
  80c784:	ddc00717 	ldw	r23,28(sp)
  80c788:	dd800617 	ldw	r22,24(sp)
  80c78c:	dd400517 	ldw	r21,20(sp)
  80c790:	dd000417 	ldw	r20,16(sp)
  80c794:	dcc00317 	ldw	r19,12(sp)
  80c798:	dc800217 	ldw	r18,8(sp)
  80c79c:	dc400117 	ldw	r17,4(sp)
  80c7a0:	dc000017 	ldw	r16,0(sp)
  80c7a4:	dec00a04 	addi	sp,sp,40
  80c7a8:	f800283a 	ret
  80c7ac:	00800c04 	movi	r2,48
  80c7b0:	88801826 	beq	r17,r2,80c814 <_strtoul_r+0x1d4>
  80c7b4:	183fc426 	beq	r3,zero,80c6c8 <_strtoul_r+0x88>
  80c7b8:	00800c04 	movi	r2,48
  80c7bc:	88802226 	beq	r17,r2,80c848 <_strtoul_r+0x208>
  80c7c0:	04800284 	movi	r18,10
  80c7c4:	900f883a 	mov	r7,r18
  80c7c8:	04c666b4 	movhi	r19,6554
  80c7cc:	9ce66644 	addi	r19,r19,-26215
  80c7d0:	02000144 	movi	r8,5
  80c7d4:	003fc506 	br	80c6ec <_strtoul_r+0xac>
  80c7d8:	40ffcf0e 	bge	r8,r3,80c718 <_strtoul_r+0xd8>
  80c7dc:	01bfffc4 	movi	r6,-1
  80c7e0:	003fd006 	br	80c724 <_strtoul_r+0xe4>
  80c7e4:	008015c4 	movi	r2,87
  80c7e8:	8887c83a 	sub	r3,r17,r2
  80c7ec:	003fda06 	br	80c758 <_strtoul_r+0x118>
  80c7f0:	857fffc4 	addi	r21,r16,-1
  80c7f4:	003fdf06 	br	80c774 <_strtoul_r+0x134>
  80c7f8:	84400007 	ldb	r17,0(r16)
  80c7fc:	84000044 	addi	r16,r16,1
  80c800:	003fac06 	br	80c6b4 <_strtoul_r+0x74>
  80c804:	84400007 	ldb	r17,0(r16)
  80c808:	07000044 	movi	fp,1
  80c80c:	84000044 	addi	r16,r16,1
  80c810:	003fa906 	br	80c6b8 <_strtoul_r+0x78>
  80c814:	81000007 	ldb	r4,0(r16)
  80c818:	00801e04 	movi	r2,120
  80c81c:	20800226 	beq	r4,r2,80c828 <_strtoul_r+0x1e8>
  80c820:	00801604 	movi	r2,88
  80c824:	20bfe31e 	bne	r4,r2,80c7b4 <_strtoul_r+0x174>
  80c828:	84400047 	ldb	r17,1(r16)
  80c82c:	04800404 	movi	r18,16
  80c830:	84000084 	addi	r16,r16,2
  80c834:	900f883a 	mov	r7,r18
  80c838:	04c40034 	movhi	r19,4096
  80c83c:	9cffffc4 	addi	r19,r19,-1
  80c840:	020003c4 	movi	r8,15
  80c844:	003fa906 	br	80c6ec <_strtoul_r+0xac>
  80c848:	04800204 	movi	r18,8
  80c84c:	900f883a 	mov	r7,r18
  80c850:	04c80034 	movhi	r19,8192
  80c854:	9cffffc4 	addi	r19,r19,-1
  80c858:	020001c4 	movi	r8,7
  80c85c:	003fa306 	br	80c6ec <_strtoul_r+0xac>
  80c860:	e005003a 	cmpeq	r2,fp,zero
  80c864:	103fc11e 	bne	r2,zero,80c76c <_strtoul_r+0x12c>
  80c868:	014bc83a 	sub	r5,zero,r5
  80c86c:	003fbf06 	br	80c76c <_strtoul_r+0x12c>

0080c870 <strtoul>:
  80c870:	00802074 	movhi	r2,129
  80c874:	109bd004 	addi	r2,r2,28480
  80c878:	2013883a 	mov	r9,r4
  80c87c:	11000017 	ldw	r4,0(r2)
  80c880:	2805883a 	mov	r2,r5
  80c884:	300f883a 	mov	r7,r6
  80c888:	480b883a 	mov	r5,r9
  80c88c:	100d883a 	mov	r6,r2
  80c890:	080c6401 	jmpi	80c640 <_strtoul_r>

0080c894 <_strtoull_r>:
  80c894:	defff104 	addi	sp,sp,-60
  80c898:	00802074 	movhi	r2,129
  80c89c:	109bd404 	addi	r2,r2,28496
  80c8a0:	df000d15 	stw	fp,52(sp)
  80c8a4:	17000017 	ldw	fp,0(r2)
  80c8a8:	ddc00c15 	stw	r23,48(sp)
  80c8ac:	dcc00815 	stw	r19,32(sp)
  80c8b0:	dfc00e15 	stw	ra,56(sp)
  80c8b4:	dd800b15 	stw	r22,44(sp)
  80c8b8:	dd400a15 	stw	r21,40(sp)
  80c8bc:	dd000915 	stw	r20,36(sp)
  80c8c0:	dc800715 	stw	r18,28(sp)
  80c8c4:	dc400615 	stw	r17,24(sp)
  80c8c8:	dc000515 	stw	r16,20(sp)
  80c8cc:	d9400215 	stw	r5,8(sp)
  80c8d0:	d9000115 	stw	r4,4(sp)
  80c8d4:	d9800315 	stw	r6,12(sp)
  80c8d8:	382f883a 	mov	r23,r7
  80c8dc:	2827883a 	mov	r19,r5
  80c8e0:	9d000007 	ldb	r20,0(r19)
  80c8e4:	9cc00044 	addi	r19,r19,1
  80c8e8:	e507883a 	add	r3,fp,r20
  80c8ec:	18800003 	ldbu	r2,0(r3)
  80c8f0:	1080020c 	andi	r2,r2,8
  80c8f4:	103ffa1e 	bne	r2,zero,80c8e0 <_strtoull_r+0x4c>
  80c8f8:	00800b44 	movi	r2,45
  80c8fc:	a0807a26 	beq	r20,r2,80cae8 <_strtoull_r+0x254>
  80c900:	00800ac4 	movi	r2,43
  80c904:	a0807526 	beq	r20,r2,80cadc <_strtoull_r+0x248>
  80c908:	d8000015 	stw	zero,0(sp)
  80c90c:	b807003a 	cmpeq	r3,r23,zero
  80c910:	18005a1e 	bne	r3,zero,80ca7c <_strtoull_r+0x1e8>
  80c914:	00800404 	movi	r2,16
  80c918:	b8805826 	beq	r23,r2,80ca7c <_strtoull_r+0x1e8>
  80c91c:	b82dd7fa 	srai	r22,r23,31
  80c920:	043fffc4 	movi	r16,-1
  80c924:	8009883a 	mov	r4,r16
  80c928:	800b883a 	mov	r5,r16
  80c92c:	b80d883a 	mov	r6,r23
  80c930:	b00f883a 	mov	r7,r22
  80c934:	080db900 	call	80db90 <__udivdi3>
  80c938:	8009883a 	mov	r4,r16
  80c93c:	800b883a 	mov	r5,r16
  80c940:	b80d883a 	mov	r6,r23
  80c944:	b00f883a 	mov	r7,r22
  80c948:	1023883a 	mov	r17,r2
  80c94c:	1825883a 	mov	r18,r3
  80c950:	080e16c0 	call	80e16c <__umoddi3>
  80c954:	b82b883a 	mov	r21,r23
  80c958:	1019883a 	mov	r12,r2
  80c95c:	e505883a 	add	r2,fp,r20
  80c960:	11000003 	ldbu	r4,0(r2)
  80c964:	0015883a 	mov	r10,zero
  80c968:	0017883a 	mov	r11,zero
  80c96c:	20c0010c 	andi	r3,r4,4
  80c970:	000d883a 	mov	r6,zero
  80c974:	18001c26 	beq	r3,zero,80c9e8 <_strtoull_r+0x154>
  80c978:	a43ff404 	addi	r16,r20,-48
  80c97c:	85c0220e 	bge	r16,r23,80ca08 <_strtoull_r+0x174>
  80c980:	30003c16 	blt	r6,zero,80ca74 <_strtoull_r+0x1e0>
  80c984:	92c03b36 	bltu	r18,r11,80ca74 <_strtoull_r+0x1e0>
  80c988:	5c803926 	beq	r11,r18,80ca70 <_strtoull_r+0x1dc>
  80c98c:	54404c26 	beq	r10,r17,80cac0 <_strtoull_r+0x22c>
  80c990:	580b883a 	mov	r5,r11
  80c994:	5009883a 	mov	r4,r10
  80c998:	a80d883a 	mov	r6,r21
  80c99c:	b00f883a 	mov	r7,r22
  80c9a0:	db000415 	stw	r12,16(sp)
  80c9a4:	080da540 	call	80da54 <__muldi3>
  80c9a8:	8013d7fa 	srai	r9,r16,31
  80c9ac:	100d883a 	mov	r6,r2
  80c9b0:	1405883a 	add	r2,r2,r16
  80c9b4:	118d803a 	cmpltu	r6,r2,r6
  80c9b8:	1a47883a 	add	r3,r3,r9
  80c9bc:	db000417 	ldw	r12,16(sp)
  80c9c0:	30cd883a 	add	r6,r6,r3
  80c9c4:	3017883a 	mov	r11,r6
  80c9c8:	1015883a 	mov	r10,r2
  80c9cc:	01800044 	movi	r6,1
  80c9d0:	9d000007 	ldb	r20,0(r19)
  80c9d4:	9cc00044 	addi	r19,r19,1
  80c9d8:	e505883a 	add	r2,fp,r20
  80c9dc:	11000003 	ldbu	r4,0(r2)
  80c9e0:	20c0010c 	andi	r3,r4,4
  80c9e4:	183fe41e 	bne	r3,zero,80c978 <_strtoull_r+0xe4>
  80c9e8:	208000cc 	andi	r2,r4,3
  80c9ec:	10000626 	beq	r2,zero,80ca08 <_strtoull_r+0x174>
  80c9f0:	2080004c 	andi	r2,r4,1
  80c9f4:	1005003a 	cmpeq	r2,r2,zero
  80c9f8:	10002e1e 	bne	r2,zero,80cab4 <_strtoull_r+0x220>
  80c9fc:	02000dc4 	movi	r8,55
  80ca00:	a221c83a 	sub	r16,r20,r8
  80ca04:	85ffde16 	blt	r16,r23,80c980 <_strtoull_r+0xec>
  80ca08:	3000530e 	bge	r6,zero,80cb58 <_strtoull_r+0x2c4>
  80ca0c:	d8c00117 	ldw	r3,4(sp)
  80ca10:	02bfffc4 	movi	r10,-1
  80ca14:	00800884 	movi	r2,34
  80ca18:	5017883a 	mov	r11,r10
  80ca1c:	18800015 	stw	r2,0(r3)
  80ca20:	d8800317 	ldw	r2,12(sp)
  80ca24:	10000426 	beq	r2,zero,80ca38 <_strtoull_r+0x1a4>
  80ca28:	3000291e 	bne	r6,zero,80cad0 <_strtoull_r+0x23c>
  80ca2c:	d8800217 	ldw	r2,8(sp)
  80ca30:	d8c00317 	ldw	r3,12(sp)
  80ca34:	18800015 	stw	r2,0(r3)
  80ca38:	5005883a 	mov	r2,r10
  80ca3c:	5807883a 	mov	r3,r11
  80ca40:	dfc00e17 	ldw	ra,56(sp)
  80ca44:	df000d17 	ldw	fp,52(sp)
  80ca48:	ddc00c17 	ldw	r23,48(sp)
  80ca4c:	dd800b17 	ldw	r22,44(sp)
  80ca50:	dd400a17 	ldw	r21,40(sp)
  80ca54:	dd000917 	ldw	r20,36(sp)
  80ca58:	dcc00817 	ldw	r19,32(sp)
  80ca5c:	dc800717 	ldw	r18,28(sp)
  80ca60:	dc400617 	ldw	r17,24(sp)
  80ca64:	dc000517 	ldw	r16,20(sp)
  80ca68:	dec00f04 	addi	sp,sp,60
  80ca6c:	f800283a 	ret
  80ca70:	8abfc62e 	bgeu	r17,r10,80c98c <_strtoull_r+0xf8>
  80ca74:	01bfffc4 	movi	r6,-1
  80ca78:	003fd506 	br	80c9d0 <_strtoull_r+0x13c>
  80ca7c:	00800c04 	movi	r2,48
  80ca80:	a0801e26 	beq	r20,r2,80cafc <_strtoull_r+0x268>
  80ca84:	183fa526 	beq	r3,zero,80c91c <_strtoull_r+0x88>
  80ca88:	00800c04 	movi	r2,48
  80ca8c:	a0802a26 	beq	r20,r2,80cb38 <_strtoull_r+0x2a4>
  80ca90:	05c00284 	movi	r23,10
  80ca94:	b82b883a 	mov	r21,r23
  80ca98:	046666b4 	movhi	r17,39322
  80ca9c:	8c666644 	addi	r17,r17,-26215
  80caa0:	002d883a 	mov	r22,zero
  80caa4:	048666b4 	movhi	r18,6554
  80caa8:	94a66644 	addi	r18,r18,-26215
  80caac:	03000144 	movi	r12,5
  80cab0:	003faa06 	br	80c95c <_strtoull_r+0xc8>
  80cab4:	020015c4 	movi	r8,87
  80cab8:	a221c83a 	sub	r16,r20,r8
  80cabc:	003fd106 	br	80ca04 <_strtoull_r+0x170>
  80cac0:	5cbfb31e 	bne	r11,r18,80c990 <_strtoull_r+0xfc>
  80cac4:	643fb20e 	bge	r12,r16,80c990 <_strtoull_r+0xfc>
  80cac8:	01bfffc4 	movi	r6,-1
  80cacc:	003fc006 	br	80c9d0 <_strtoull_r+0x13c>
  80cad0:	9cffffc4 	addi	r19,r19,-1
  80cad4:	dcc00215 	stw	r19,8(sp)
  80cad8:	003fd406 	br	80ca2c <_strtoull_r+0x198>
  80cadc:	9d000007 	ldb	r20,0(r19)
  80cae0:	9cc00044 	addi	r19,r19,1
  80cae4:	003f8806 	br	80c908 <_strtoull_r+0x74>
  80cae8:	9d000007 	ldb	r20,0(r19)
  80caec:	00800044 	movi	r2,1
  80caf0:	9cc00044 	addi	r19,r19,1
  80caf4:	d8800015 	stw	r2,0(sp)
  80caf8:	003f8406 	br	80c90c <_strtoull_r+0x78>
  80cafc:	99000007 	ldb	r4,0(r19)
  80cb00:	00801e04 	movi	r2,120
  80cb04:	20800226 	beq	r4,r2,80cb10 <_strtoull_r+0x27c>
  80cb08:	00801604 	movi	r2,88
  80cb0c:	20bfdd1e 	bne	r4,r2,80ca84 <_strtoull_r+0x1f0>
  80cb10:	9d000047 	ldb	r20,1(r19)
  80cb14:	05c00404 	movi	r23,16
  80cb18:	b82b883a 	mov	r21,r23
  80cb1c:	047fffc4 	movi	r17,-1
  80cb20:	9cc00084 	addi	r19,r19,2
  80cb24:	002d883a 	mov	r22,zero
  80cb28:	04840034 	movhi	r18,4096
  80cb2c:	94bfffc4 	addi	r18,r18,-1
  80cb30:	030003c4 	movi	r12,15
  80cb34:	003f8906 	br	80c95c <_strtoull_r+0xc8>
  80cb38:	05c00204 	movi	r23,8
  80cb3c:	b82b883a 	mov	r21,r23
  80cb40:	047fffc4 	movi	r17,-1
  80cb44:	002d883a 	mov	r22,zero
  80cb48:	04880034 	movhi	r18,8192
  80cb4c:	94bfffc4 	addi	r18,r18,-1
  80cb50:	030001c4 	movi	r12,7
  80cb54:	003f8106 	br	80c95c <_strtoull_r+0xc8>
  80cb58:	d8c00017 	ldw	r3,0(sp)
  80cb5c:	1805003a 	cmpeq	r2,r3,zero
  80cb60:	103faf1e 	bne	r2,zero,80ca20 <_strtoull_r+0x18c>
  80cb64:	0009883a 	mov	r4,zero
  80cb68:	2285c83a 	sub	r2,r4,r10
  80cb6c:	02c7c83a 	sub	r3,zero,r11
  80cb70:	2089803a 	cmpltu	r4,r4,r2
  80cb74:	1909c83a 	sub	r4,r3,r4
  80cb78:	1015883a 	mov	r10,r2
  80cb7c:	2017883a 	mov	r11,r4
  80cb80:	003fa706 	br	80ca20 <_strtoull_r+0x18c>

0080cb84 <__submore>:
  80cb84:	defffa04 	addi	sp,sp,-24
  80cb88:	28c00c17 	ldw	r3,48(r5)
  80cb8c:	dc800215 	stw	r18,8(sp)
  80cb90:	2825883a 	mov	r18,r5
  80cb94:	dc000015 	stw	r16,0(sp)
  80cb98:	90801004 	addi	r2,r18,64
  80cb9c:	04010004 	movi	r16,1024
  80cba0:	dfc00515 	stw	ra,20(sp)
  80cba4:	dd000415 	stw	r20,16(sp)
  80cba8:	dcc00315 	stw	r19,12(sp)
  80cbac:	dc400115 	stw	r17,4(sp)
  80cbb0:	800b883a 	mov	r5,r16
  80cbb4:	18801b26 	beq	r3,r2,80cc24 <__submore+0xa0>
  80cbb8:	94400d17 	ldw	r17,52(r18)
  80cbbc:	180b883a 	mov	r5,r3
  80cbc0:	8c69883a 	add	r20,r17,r17
  80cbc4:	a00d883a 	mov	r6,r20
  80cbc8:	080355c0 	call	80355c <_realloc_r>
  80cbcc:	1467883a 	add	r19,r2,r17
  80cbd0:	1021883a 	mov	r16,r2
  80cbd4:	880d883a 	mov	r6,r17
  80cbd8:	9809883a 	mov	r4,r19
  80cbdc:	100b883a 	mov	r5,r2
  80cbe0:	10000e26 	beq	r2,zero,80cc1c <__submore+0x98>
  80cbe4:	08032540 	call	803254 <memcpy>
  80cbe8:	000d883a 	mov	r6,zero
  80cbec:	95000d15 	stw	r20,52(r18)
  80cbf0:	94c00015 	stw	r19,0(r18)
  80cbf4:	94000c15 	stw	r16,48(r18)
  80cbf8:	3005883a 	mov	r2,r6
  80cbfc:	dfc00517 	ldw	ra,20(sp)
  80cc00:	dd000417 	ldw	r20,16(sp)
  80cc04:	dcc00317 	ldw	r19,12(sp)
  80cc08:	dc800217 	ldw	r18,8(sp)
  80cc0c:	dc400117 	ldw	r17,4(sp)
  80cc10:	dc000017 	ldw	r16,0(sp)
  80cc14:	dec00604 	addi	sp,sp,24
  80cc18:	f800283a 	ret
  80cc1c:	01bfffc4 	movi	r6,-1
  80cc20:	003ff506 	br	80cbf8 <__submore+0x74>
  80cc24:	0802a300 	call	802a30 <_malloc_r>
  80cc28:	1009883a 	mov	r4,r2
  80cc2c:	1140ff44 	addi	r5,r2,1021
  80cc30:	000d883a 	mov	r6,zero
  80cc34:	103ff926 	beq	r2,zero,80cc1c <__submore+0x98>
  80cc38:	90801083 	ldbu	r2,66(r18)
  80cc3c:	94000d15 	stw	r16,52(r18)
  80cc40:	91000c15 	stw	r4,48(r18)
  80cc44:	28800085 	stb	r2,2(r5)
  80cc48:	90c01043 	ldbu	r3,65(r18)
  80cc4c:	28c00045 	stb	r3,1(r5)
  80cc50:	90801003 	ldbu	r2,64(r18)
  80cc54:	2080ff45 	stb	r2,1021(r4)
  80cc58:	91400015 	stw	r5,0(r18)
  80cc5c:	003fe606 	br	80cbf8 <__submore+0x74>

0080cc60 <_ungetc_r>:
  80cc60:	defffc04 	addi	sp,sp,-16
  80cc64:	00bfffc4 	movi	r2,-1
  80cc68:	dc400215 	stw	r17,8(sp)
  80cc6c:	dc000115 	stw	r16,4(sp)
  80cc70:	dfc00315 	stw	ra,12(sp)
  80cc74:	2821883a 	mov	r16,r5
  80cc78:	2023883a 	mov	r17,r4
  80cc7c:	28801826 	beq	r5,r2,80cce0 <_ungetc_r+0x80>
  80cc80:	20000226 	beq	r4,zero,80cc8c <_ungetc_r+0x2c>
  80cc84:	20800e17 	ldw	r2,56(r4)
  80cc88:	10001b26 	beq	r2,zero,80ccf8 <_ungetc_r+0x98>
  80cc8c:	3100030b 	ldhu	r4,12(r6)
  80cc90:	00bff7c4 	movi	r2,-33
  80cc94:	2084703a 	and	r2,r4,r2
  80cc98:	117fffcc 	andi	r5,r2,65535
  80cc9c:	28c0010c 	andi	r3,r5,4
  80cca0:	1009883a 	mov	r4,r2
  80cca4:	3080030d 	sth	r2,12(r6)
  80cca8:	18003526 	beq	r3,zero,80cd80 <_ungetc_r+0x120>
  80ccac:	30800c17 	ldw	r2,48(r6)
  80ccb0:	84003fcc 	andi	r16,r16,255
  80ccb4:	10001426 	beq	r2,zero,80cd08 <_ungetc_r+0xa8>
  80ccb8:	30c00117 	ldw	r3,4(r6)
  80ccbc:	30800d17 	ldw	r2,52(r6)
  80ccc0:	1880380e 	bge	r3,r2,80cda4 <_ungetc_r+0x144>
  80ccc4:	30c00017 	ldw	r3,0(r6)
  80ccc8:	19ffffc4 	addi	r7,r3,-1
  80cccc:	31c00015 	stw	r7,0(r6)
  80ccd0:	1c3fffc5 	stb	r16,-1(r3)
  80ccd4:	30800117 	ldw	r2,4(r6)
  80ccd8:	10800044 	addi	r2,r2,1
  80ccdc:	30800115 	stw	r2,4(r6)
  80cce0:	8005883a 	mov	r2,r16
  80cce4:	dfc00317 	ldw	ra,12(sp)
  80cce8:	dc400217 	ldw	r17,8(sp)
  80ccec:	dc000117 	ldw	r16,4(sp)
  80ccf0:	dec00404 	addi	sp,sp,16
  80ccf4:	f800283a 	ret
  80ccf8:	d9800015 	stw	r6,0(sp)
  80ccfc:	08015140 	call	801514 <__sinit>
  80cd00:	d9800017 	ldw	r6,0(sp)
  80cd04:	003fe106 	br	80cc8c <_ungetc_r+0x2c>
  80cd08:	30800417 	ldw	r2,16(r6)
  80cd0c:	10002326 	beq	r2,zero,80cd9c <_ungetc_r+0x13c>
  80cd10:	31c00017 	ldw	r7,0(r6)
  80cd14:	11c0022e 	bgeu	r2,r7,80cd20 <_ungetc_r+0xc0>
  80cd18:	38bfffc3 	ldbu	r2,-1(r7)
  80cd1c:	80801226 	beq	r16,r2,80cd68 <_ungetc_r+0x108>
  80cd20:	30c00117 	ldw	r3,4(r6)
  80cd24:	00800044 	movi	r2,1
  80cd28:	30800115 	stw	r2,4(r6)
  80cd2c:	008000c4 	movi	r2,3
  80cd30:	31001004 	addi	r4,r6,64
  80cd34:	31401084 	addi	r5,r6,66
  80cd38:	30800d15 	stw	r2,52(r6)
  80cd3c:	8005883a 	mov	r2,r16
  80cd40:	30c00f15 	stw	r3,60(r6)
  80cd44:	31c00e15 	stw	r7,56(r6)
  80cd48:	31000c15 	stw	r4,48(r6)
  80cd4c:	31400015 	stw	r5,0(r6)
  80cd50:	34001085 	stb	r16,66(r6)
  80cd54:	dfc00317 	ldw	ra,12(sp)
  80cd58:	dc400217 	ldw	r17,8(sp)
  80cd5c:	dc000117 	ldw	r16,4(sp)
  80cd60:	dec00404 	addi	sp,sp,16
  80cd64:	f800283a 	ret
  80cd68:	30800117 	ldw	r2,4(r6)
  80cd6c:	39ffffc4 	addi	r7,r7,-1
  80cd70:	31c00015 	stw	r7,0(r6)
  80cd74:	10800044 	addi	r2,r2,1
  80cd78:	30800115 	stw	r2,4(r6)
  80cd7c:	003fd806 	br	80cce0 <_ungetc_r+0x80>
  80cd80:	2880040c 	andi	r2,r5,16
  80cd84:	10000d26 	beq	r2,zero,80cdbc <_ungetc_r+0x15c>
  80cd88:	2880020c 	andi	r2,r5,8
  80cd8c:	10000d1e 	bne	r2,zero,80cdc4 <_ungetc_r+0x164>
  80cd90:	20800114 	ori	r2,r4,4
  80cd94:	3080030d 	sth	r2,12(r6)
  80cd98:	003fc406 	br	80ccac <_ungetc_r+0x4c>
  80cd9c:	31c00017 	ldw	r7,0(r6)
  80cda0:	003fdf06 	br	80cd20 <_ungetc_r+0xc0>
  80cda4:	300b883a 	mov	r5,r6
  80cda8:	8809883a 	mov	r4,r17
  80cdac:	d9800015 	stw	r6,0(sp)
  80cdb0:	080cb840 	call	80cb84 <__submore>
  80cdb4:	d9800017 	ldw	r6,0(sp)
  80cdb8:	103fc226 	beq	r2,zero,80ccc4 <_ungetc_r+0x64>
  80cdbc:	043fffc4 	movi	r16,-1
  80cdc0:	003fc706 	br	80cce0 <_ungetc_r+0x80>
  80cdc4:	300b883a 	mov	r5,r6
  80cdc8:	8809883a 	mov	r4,r17
  80cdcc:	d9800015 	stw	r6,0(sp)
  80cdd0:	08011540 	call	801154 <_fflush_r>
  80cdd4:	d9800017 	ldw	r6,0(sp)
  80cdd8:	103ff81e 	bne	r2,zero,80cdbc <_ungetc_r+0x15c>
  80cddc:	3100030b 	ldhu	r4,12(r6)
  80cde0:	00bffdc4 	movi	r2,-9
  80cde4:	30000215 	stw	zero,8(r6)
  80cde8:	2084703a 	and	r2,r4,r2
  80cdec:	1009883a 	mov	r4,r2
  80cdf0:	3080030d 	sth	r2,12(r6)
  80cdf4:	30000615 	stw	zero,24(r6)
  80cdf8:	003fe506 	br	80cd90 <_ungetc_r+0x130>

0080cdfc <ungetc>:
  80cdfc:	01802074 	movhi	r6,129
  80ce00:	319bd004 	addi	r6,r6,28480
  80ce04:	2007883a 	mov	r3,r4
  80ce08:	31000017 	ldw	r4,0(r6)
  80ce0c:	280d883a 	mov	r6,r5
  80ce10:	180b883a 	mov	r5,r3
  80ce14:	080cc601 	jmpi	80cc60 <_ungetc_r>

0080ce18 <_calloc_r>:
  80ce18:	298b383a 	mul	r5,r5,r6
  80ce1c:	defffe04 	addi	sp,sp,-8
  80ce20:	dc000015 	stw	r16,0(sp)
  80ce24:	dfc00115 	stw	ra,4(sp)
  80ce28:	0802a300 	call	802a30 <_malloc_r>
  80ce2c:	1021883a 	mov	r16,r2
  80ce30:	01c00904 	movi	r7,36
  80ce34:	10000d26 	beq	r2,zero,80ce6c <_calloc_r+0x54>
  80ce38:	10ffff17 	ldw	r3,-4(r2)
  80ce3c:	1009883a 	mov	r4,r2
  80ce40:	00bfff04 	movi	r2,-4
  80ce44:	1886703a 	and	r3,r3,r2
  80ce48:	1887883a 	add	r3,r3,r2
  80ce4c:	180d883a 	mov	r6,r3
  80ce50:	000b883a 	mov	r5,zero
  80ce54:	38c01736 	bltu	r7,r3,80ceb4 <_calloc_r+0x9c>
  80ce58:	008004c4 	movi	r2,19
  80ce5c:	10c00836 	bltu	r2,r3,80ce80 <_calloc_r+0x68>
  80ce60:	20000215 	stw	zero,8(r4)
  80ce64:	20000015 	stw	zero,0(r4)
  80ce68:	20000115 	stw	zero,4(r4)
  80ce6c:	8005883a 	mov	r2,r16
  80ce70:	dfc00117 	ldw	ra,4(sp)
  80ce74:	dc000017 	ldw	r16,0(sp)
  80ce78:	dec00204 	addi	sp,sp,8
  80ce7c:	f800283a 	ret
  80ce80:	008006c4 	movi	r2,27
  80ce84:	80000015 	stw	zero,0(r16)
  80ce88:	80000115 	stw	zero,4(r16)
  80ce8c:	81000204 	addi	r4,r16,8
  80ce90:	10fff32e 	bgeu	r2,r3,80ce60 <_calloc_r+0x48>
  80ce94:	80000215 	stw	zero,8(r16)
  80ce98:	80000315 	stw	zero,12(r16)
  80ce9c:	81000404 	addi	r4,r16,16
  80cea0:	19ffef1e 	bne	r3,r7,80ce60 <_calloc_r+0x48>
  80cea4:	81000604 	addi	r4,r16,24
  80cea8:	80000415 	stw	zero,16(r16)
  80ceac:	80000515 	stw	zero,20(r16)
  80ceb0:	003feb06 	br	80ce60 <_calloc_r+0x48>
  80ceb4:	08033d40 	call	8033d4 <memset>
  80ceb8:	8005883a 	mov	r2,r16
  80cebc:	dfc00117 	ldw	ra,4(sp)
  80cec0:	dc000017 	ldw	r16,0(sp)
  80cec4:	dec00204 	addi	sp,sp,8
  80cec8:	f800283a 	ret

0080cecc <htinit>:
  80cecc:	28800003 	ldbu	r2,0(r5)
  80ced0:	10000626 	beq	r2,zero,80ceec <htinit+0x20>
  80ced4:	1105883a 	add	r2,r2,r4
  80ced8:	11800005 	stb	r6,0(r2)
  80cedc:	28800043 	ldbu	r2,1(r5)
  80cee0:	31800044 	addi	r6,r6,1
  80cee4:	29400044 	addi	r5,r5,1
  80cee8:	103ffa1e 	bne	r2,zero,80ced4 <htinit+0x8>
  80ceec:	f800283a 	ret

0080cef0 <__hexdig_init>:
  80cef0:	defffd04 	addi	sp,sp,-12
  80cef4:	dc400015 	stw	r17,0(sp)
  80cef8:	044020b4 	movhi	r17,130
  80cefc:	8c634904 	addi	r17,r17,-29404
  80cf00:	dcc00115 	stw	r19,4(sp)
  80cf04:	8809883a 	mov	r4,r17
  80cf08:	04c00684 	movi	r19,26
  80cf0c:	01402074 	movhi	r5,129
  80cf10:	29544e04 	addi	r5,r5,20792
  80cf14:	01800404 	movi	r6,16
  80cf18:	dfc00215 	stw	ra,8(sp)
  80cf1c:	080cecc0 	call	80cecc <htinit>
  80cf20:	980d883a 	mov	r6,r19
  80cf24:	8809883a 	mov	r4,r17
  80cf28:	01402074 	movhi	r5,129
  80cf2c:	29545104 	addi	r5,r5,20804
  80cf30:	080cecc0 	call	80cecc <htinit>
  80cf34:	8809883a 	mov	r4,r17
  80cf38:	980d883a 	mov	r6,r19
  80cf3c:	01402074 	movhi	r5,129
  80cf40:	29545304 	addi	r5,r5,20812
  80cf44:	dfc00217 	ldw	ra,8(sp)
  80cf48:	dcc00117 	ldw	r19,4(sp)
  80cf4c:	dc400017 	ldw	r17,0(sp)
  80cf50:	dec00304 	addi	sp,sp,12
  80cf54:	080cecc1 	jmpi	80cecc <htinit>

0080cf58 <rshift>:
  80cf58:	2807d17a 	srai	r3,r5,5
  80cf5c:	20800417 	ldw	r2,16(r4)
  80cf60:	22400504 	addi	r9,r4,20
  80cf64:	480f883a 	mov	r7,r9
  80cf68:	1880190e 	bge	r3,r2,80cfd0 <rshift+0x78>
  80cf6c:	1085883a 	add	r2,r2,r2
  80cf70:	18c7883a 	add	r3,r3,r3
  80cf74:	1085883a 	add	r2,r2,r2
  80cf78:	18c7883a 	add	r3,r3,r3
  80cf7c:	294007cc 	andi	r5,r5,31
  80cf80:	4891883a 	add	r8,r9,r2
  80cf84:	48cd883a 	add	r6,r9,r3
  80cf88:	28001726 	beq	r5,zero,80cfe8 <rshift+0x90>
  80cf8c:	30c00017 	ldw	r3,0(r6)
  80cf90:	00800804 	movi	r2,32
  80cf94:	31800104 	addi	r6,r6,4
  80cf98:	1155c83a 	sub	r10,r2,r5
  80cf9c:	1946d83a 	srl	r3,r3,r5
  80cfa0:	3200092e 	bgeu	r6,r8,80cfc8 <rshift+0x70>
  80cfa4:	30800017 	ldw	r2,0(r6)
  80cfa8:	1284983a 	sll	r2,r2,r10
  80cfac:	10c4b03a 	or	r2,r2,r3
  80cfb0:	38800015 	stw	r2,0(r7)
  80cfb4:	30c00017 	ldw	r3,0(r6)
  80cfb8:	31800104 	addi	r6,r6,4
  80cfbc:	39c00104 	addi	r7,r7,4
  80cfc0:	1946d83a 	srl	r3,r3,r5
  80cfc4:	323ff736 	bltu	r6,r8,80cfa4 <rshift+0x4c>
  80cfc8:	38c00015 	stw	r3,0(r7)
  80cfcc:	18000c1e 	bne	r3,zero,80d000 <rshift+0xa8>
  80cfd0:	3a45c83a 	sub	r2,r7,r9
  80cfd4:	1005d0ba 	srai	r2,r2,2
  80cfd8:	20800415 	stw	r2,16(r4)
  80cfdc:	1000011e 	bne	r2,zero,80cfe4 <rshift+0x8c>
  80cfe0:	20000515 	stw	zero,20(r4)
  80cfe4:	f800283a 	ret
  80cfe8:	323ff92e 	bgeu	r6,r8,80cfd0 <rshift+0x78>
  80cfec:	30800017 	ldw	r2,0(r6)
  80cff0:	31800104 	addi	r6,r6,4
  80cff4:	38800015 	stw	r2,0(r7)
  80cff8:	39c00104 	addi	r7,r7,4
  80cffc:	003ffa06 	br	80cfe8 <rshift+0x90>
  80d000:	39c00104 	addi	r7,r7,4
  80d004:	003ff206 	br	80cfd0 <rshift+0x78>

0080d008 <__gethex>:
  80d008:	defff304 	addi	sp,sp,-52
  80d00c:	dd400815 	stw	r21,32(sp)
  80d010:	dd000715 	stw	r20,28(sp)
  80d014:	dcc00615 	stw	r19,24(sp)
  80d018:	dc400415 	stw	r17,16(sp)
  80d01c:	dfc00c15 	stw	ra,48(sp)
  80d020:	df000b15 	stw	fp,44(sp)
  80d024:	ddc00a15 	stw	r23,40(sp)
  80d028:	dd800915 	stw	r22,36(sp)
  80d02c:	dc800515 	stw	r18,20(sp)
  80d030:	dc000315 	stw	r16,12(sp)
  80d034:	044020b4 	movhi	r17,130
  80d038:	8c634904 	addi	r17,r17,-29404
  80d03c:	88800c03 	ldbu	r2,48(r17)
  80d040:	202b883a 	mov	r21,r4
  80d044:	2827883a 	mov	r19,r5
  80d048:	3029883a 	mov	r20,r6
  80d04c:	d9c00115 	stw	r7,4(sp)
  80d050:	10006e26 	beq	r2,zero,80d20c <__gethex+0x204>
  80d054:	99800017 	ldw	r6,0(r19)
  80d058:	00800c04 	movi	r2,48
  80d05c:	31000083 	ldbu	r4,2(r6)
  80d060:	30c00084 	addi	r3,r6,2
  80d064:	20806f1e 	bne	r4,r2,80d224 <__gethex+0x21c>
  80d068:	200b883a 	mov	r5,r4
  80d06c:	3007883a 	mov	r3,r6
  80d070:	188000c3 	ldbu	r2,3(r3)
  80d074:	18c00044 	addi	r3,r3,1
  80d078:	1009883a 	mov	r4,r2
  80d07c:	117ffc26 	beq	r2,r5,80d070 <__gethex+0x68>
  80d080:	1997c83a 	sub	r11,r3,r6
  80d084:	19400084 	addi	r5,r3,2
  80d088:	2445883a 	add	r2,r4,r17
  80d08c:	10c00003 	ldbu	r3,0(r2)
  80d090:	18002d26 	beq	r3,zero,80d148 <__gethex+0x140>
  80d094:	29000003 	ldbu	r4,0(r5)
  80d098:	2825883a 	mov	r18,r5
  80d09c:	000d883a 	mov	r6,zero
  80d0a0:	0013883a 	mov	r9,zero
  80d0a4:	21003fcc 	andi	r4,r4,255
  80d0a8:	2445883a 	add	r2,r4,r17
  80d0ac:	10c00003 	ldbu	r3,0(r2)
  80d0b0:	18000526 	beq	r3,zero,80d0c8 <__gethex+0xc0>
  80d0b4:	29400044 	addi	r5,r5,1
  80d0b8:	29000003 	ldbu	r4,0(r5)
  80d0bc:	2445883a 	add	r2,r4,r17
  80d0c0:	10c00003 	ldbu	r3,0(r2)
  80d0c4:	183ffb1e 	bne	r3,zero,80d0b4 <__gethex+0xac>
  80d0c8:	00800b84 	movi	r2,46
  80d0cc:	20805826 	beq	r4,r2,80d230 <__gethex+0x228>
  80d0d0:	30007a26 	beq	r6,zero,80d2bc <__gethex+0x2b4>
  80d0d4:	2985c83a 	sub	r2,r5,r6
  80d0d8:	1085883a 	add	r2,r2,r2
  80d0dc:	1085883a 	add	r2,r2,r2
  80d0e0:	00adc83a 	sub	r22,zero,r2
  80d0e4:	2821883a 	mov	r16,r5
  80d0e8:	80c00003 	ldbu	r3,0(r16)
  80d0ec:	00801404 	movi	r2,80
  80d0f0:	18801e26 	beq	r3,r2,80d16c <__gethex+0x164>
  80d0f4:	00801c04 	movi	r2,112
  80d0f8:	18801c26 	beq	r3,r2,80d16c <__gethex+0x164>
  80d0fc:	800d883a 	mov	r6,r16
  80d100:	4805003a 	cmpeq	r2,r9,zero
  80d104:	99800015 	stw	r6,0(r19)
  80d108:	1000861e 	bne	r2,zero,80d324 <__gethex+0x31c>
  80d10c:	58003d26 	beq	r11,zero,80d204 <__gethex+0x1fc>
  80d110:	0025883a 	mov	r18,zero
  80d114:	9005883a 	mov	r2,r18
  80d118:	dfc00c17 	ldw	ra,48(sp)
  80d11c:	df000b17 	ldw	fp,44(sp)
  80d120:	ddc00a17 	ldw	r23,40(sp)
  80d124:	dd800917 	ldw	r22,36(sp)
  80d128:	dd400817 	ldw	r21,32(sp)
  80d12c:	dd000717 	ldw	r20,28(sp)
  80d130:	dcc00617 	ldw	r19,24(sp)
  80d134:	dc800517 	ldw	r18,20(sp)
  80d138:	dc400417 	ldw	r17,16(sp)
  80d13c:	dc000317 	ldw	r16,12(sp)
  80d140:	dec00d04 	addi	sp,sp,52
  80d144:	f800283a 	ret
  80d148:	00800b84 	movi	r2,46
  80d14c:	20804a26 	beq	r4,r2,80d278 <__gethex+0x270>
  80d150:	2821883a 	mov	r16,r5
  80d154:	80c00003 	ldbu	r3,0(r16)
  80d158:	00801404 	movi	r2,80
  80d15c:	2825883a 	mov	r18,r5
  80d160:	02400044 	movi	r9,1
  80d164:	002d883a 	mov	r22,zero
  80d168:	18bfe21e 	bne	r3,r2,80d0f4 <__gethex+0xec>
  80d16c:	80c00043 	ldbu	r3,1(r16)
  80d170:	00800ac4 	movi	r2,43
  80d174:	81000044 	addi	r4,r16,1
  80d178:	18804a26 	beq	r3,r2,80d2a4 <__gethex+0x29c>
  80d17c:	00800b44 	movi	r2,45
  80d180:	18804c26 	beq	r3,r2,80d2b4 <__gethex+0x2ac>
  80d184:	0015883a 	mov	r10,zero
  80d188:	1c45883a 	add	r2,r3,r17
  80d18c:	10800003 	ldbu	r2,0(r2)
  80d190:	103fda26 	beq	r2,zero,80d0fc <__gethex+0xf4>
  80d194:	02000644 	movi	r8,25
  80d198:	40bfd816 	blt	r8,r2,80d0fc <__gethex+0xf4>
  80d19c:	20c00043 	ldbu	r3,1(r4)
  80d1a0:	11fffc04 	addi	r7,r2,-16
  80d1a4:	008020b4 	movhi	r2,130
  80d1a8:	10a34904 	addi	r2,r2,-29404
  80d1ac:	1887883a 	add	r3,r3,r2
  80d1b0:	18800003 	ldbu	r2,0(r3)
  80d1b4:	21800044 	addi	r6,r4,1
  80d1b8:	10000d26 	beq	r2,zero,80d1f0 <__gethex+0x1e8>
  80d1bc:	100b883a 	mov	r5,r2
  80d1c0:	4080020e 	bge	r8,r2,80d1cc <__gethex+0x1c4>
  80d1c4:	00000a06 	br	80d1f0 <__gethex+0x1e8>
  80d1c8:	41000916 	blt	r8,r4,80d1f0 <__gethex+0x1e8>
  80d1cc:	31800044 	addi	r6,r6,1
  80d1d0:	30800003 	ldbu	r2,0(r6)
  80d1d4:	38c002a4 	muli	r3,r7,10
  80d1d8:	1445883a 	add	r2,r2,r17
  80d1dc:	11000003 	ldbu	r4,0(r2)
  80d1e0:	1947883a 	add	r3,r3,r5
  80d1e4:	19fffc04 	addi	r7,r3,-16
  80d1e8:	200b883a 	mov	r5,r4
  80d1ec:	203ff61e 	bne	r4,zero,80d1c8 <__gethex+0x1c0>
  80d1f0:	5005003a 	cmpeq	r2,r10,zero
  80d1f4:	1000011e 	bne	r2,zero,80d1fc <__gethex+0x1f4>
  80d1f8:	01cfc83a 	sub	r7,zero,r7
  80d1fc:	b1ed883a 	add	r22,r22,r7
  80d200:	003fbf06 	br	80d100 <__gethex+0xf8>
  80d204:	04800184 	movi	r18,6
  80d208:	003fc206 	br	80d114 <__gethex+0x10c>
  80d20c:	080cef00 	call	80cef0 <__hexdig_init>
  80d210:	99800017 	ldw	r6,0(r19)
  80d214:	00800c04 	movi	r2,48
  80d218:	31000083 	ldbu	r4,2(r6)
  80d21c:	30c00084 	addi	r3,r6,2
  80d220:	20bf9126 	beq	r4,r2,80d068 <__gethex+0x60>
  80d224:	180b883a 	mov	r5,r3
  80d228:	0017883a 	mov	r11,zero
  80d22c:	003f9606 	br	80d088 <__gethex+0x80>
  80d230:	303fa81e 	bne	r6,zero,80d0d4 <__gethex+0xcc>
  80d234:	29400044 	addi	r5,r5,1
  80d238:	28800003 	ldbu	r2,0(r5)
  80d23c:	1445883a 	add	r2,r2,r17
  80d240:	10c00003 	ldbu	r3,0(r2)
  80d244:	1800ad26 	beq	r3,zero,80d4fc <__gethex+0x4f4>
  80d248:	2809883a 	mov	r4,r5
  80d24c:	21000044 	addi	r4,r4,1
  80d250:	20800003 	ldbu	r2,0(r4)
  80d254:	1445883a 	add	r2,r2,r17
  80d258:	10c00003 	ldbu	r3,0(r2)
  80d25c:	183ffb1e 	bne	r3,zero,80d24c <__gethex+0x244>
  80d260:	2145c83a 	sub	r2,r4,r5
  80d264:	1085883a 	add	r2,r2,r2
  80d268:	1085883a 	add	r2,r2,r2
  80d26c:	00adc83a 	sub	r22,zero,r2
  80d270:	200b883a 	mov	r5,r4
  80d274:	003f9b06 	br	80d0e4 <__gethex+0xdc>
  80d278:	29000043 	ldbu	r4,1(r5)
  80d27c:	008020b4 	movhi	r2,130
  80d280:	10a34904 	addi	r2,r2,-29404
  80d284:	2c000044 	addi	r16,r5,1
  80d288:	2085883a 	add	r2,r4,r2
  80d28c:	10c00003 	ldbu	r3,0(r2)
  80d290:	18000d1e 	bne	r3,zero,80d2c8 <__gethex+0x2c0>
  80d294:	2825883a 	mov	r18,r5
  80d298:	02400044 	movi	r9,1
  80d29c:	002d883a 	mov	r22,zero
  80d2a0:	003f9106 	br	80d0e8 <__gethex+0xe0>
  80d2a4:	0015883a 	mov	r10,zero
  80d2a8:	21000044 	addi	r4,r4,1
  80d2ac:	20c00003 	ldbu	r3,0(r4)
  80d2b0:	003fb506 	br	80d188 <__gethex+0x180>
  80d2b4:	02800044 	movi	r10,1
  80d2b8:	003ffb06 	br	80d2a8 <__gethex+0x2a0>
  80d2bc:	2821883a 	mov	r16,r5
  80d2c0:	002d883a 	mov	r22,zero
  80d2c4:	003f8806 	br	80d0e8 <__gethex+0xe0>
  80d2c8:	00800c04 	movi	r2,48
  80d2cc:	20800e1e 	bne	r4,r2,80d308 <__gethex+0x300>
  80d2d0:	2007883a 	mov	r3,r4
  80d2d4:	800b883a 	mov	r5,r16
  80d2d8:	29400044 	addi	r5,r5,1
  80d2dc:	29000003 	ldbu	r4,0(r5)
  80d2e0:	20803fcc 	andi	r2,r4,255
  80d2e4:	10fffc26 	beq	r2,r3,80d2d8 <__gethex+0x2d0>
  80d2e8:	1445883a 	add	r2,r2,r17
  80d2ec:	10c00003 	ldbu	r3,0(r2)
  80d2f0:	1800071e 	bne	r3,zero,80d310 <__gethex+0x308>
  80d2f4:	02c00044 	movi	r11,1
  80d2f8:	800d883a 	mov	r6,r16
  80d2fc:	2825883a 	mov	r18,r5
  80d300:	5813883a 	mov	r9,r11
  80d304:	003f6706 	br	80d0a4 <__gethex+0x9c>
  80d308:	81000003 	ldbu	r4,0(r16)
  80d30c:	800b883a 	mov	r5,r16
  80d310:	800d883a 	mov	r6,r16
  80d314:	2825883a 	mov	r18,r5
  80d318:	02c00044 	movi	r11,1
  80d31c:	0013883a 	mov	r9,zero
  80d320:	003f6006 	br	80d0a4 <__gethex+0x9c>
  80d324:	8485c83a 	sub	r2,r16,r18
  80d328:	10bfffc4 	addi	r2,r2,-1
  80d32c:	00c001c4 	movi	r3,7
  80d330:	1880700e 	bge	r3,r2,80d4f4 <__gethex+0x4ec>
  80d334:	000b883a 	mov	r5,zero
  80d338:	1005d07a 	srai	r2,r2,1
  80d33c:	29400044 	addi	r5,r5,1
  80d340:	18bffd16 	blt	r3,r2,80d338 <__gethex+0x330>
  80d344:	a809883a 	mov	r4,r21
  80d348:	0809d740 	call	809d74 <_Balloc>
  80d34c:	1027883a 	mov	r19,r2
  80d350:	10800504 	addi	r2,r2,20
  80d354:	d8800215 	stw	r2,8(sp)
  80d358:	9400522e 	bgeu	r18,r16,80d4a4 <__gethex+0x49c>
  80d35c:	da000217 	ldw	r8,8(sp)
  80d360:	800b883a 	mov	r5,r16
  80d364:	000f883a 	mov	r7,zero
  80d368:	0009883a 	mov	r4,zero
  80d36c:	02400b84 	movi	r9,46
  80d370:	02800804 	movi	r10,32
  80d374:	297fffc4 	addi	r5,r5,-1
  80d378:	28c00003 	ldbu	r3,0(r5)
  80d37c:	1a400826 	beq	r3,r9,80d3a0 <__gethex+0x398>
  80d380:	380d883a 	mov	r6,r7
  80d384:	3a802726 	beq	r7,r10,80d424 <__gethex+0x41c>
  80d388:	39c00104 	addi	r7,r7,4
  80d38c:	1c47883a 	add	r3,r3,r17
  80d390:	18800003 	ldbu	r2,0(r3)
  80d394:	108003cc 	andi	r2,r2,15
  80d398:	1184983a 	sll	r2,r2,r6
  80d39c:	2088b03a 	or	r4,r4,r2
  80d3a0:	917ff436 	bltu	r18,r5,80d374 <__gethex+0x36c>
  80d3a4:	d8c00217 	ldw	r3,8(sp)
  80d3a8:	40800104 	addi	r2,r8,4
  80d3ac:	41000015 	stw	r4,0(r8)
  80d3b0:	10c5c83a 	sub	r2,r2,r3
  80d3b4:	1021d0ba 	srai	r16,r2,2
  80d3b8:	9c000415 	stw	r16,16(r19)
  80d3bc:	080981c0 	call	80981c <__hi0bits>
  80d3c0:	8006917a 	slli	r3,r16,5
  80d3c4:	a5c00017 	ldw	r23,0(r20)
  80d3c8:	1885c83a 	sub	r2,r3,r2
  80d3cc:	b8801c16 	blt	r23,r2,80d440 <__gethex+0x438>
  80d3d0:	15c00a16 	blt	r2,r23,80d3fc <__gethex+0x3f4>
  80d3d4:	0039883a 	mov	fp,zero
  80d3d8:	a0800217 	ldw	r2,8(r20)
  80d3dc:	1580340e 	bge	r2,r22,80d4b0 <__gethex+0x4a8>
  80d3e0:	a809883a 	mov	r4,r21
  80d3e4:	980b883a 	mov	r5,r19
  80d3e8:	08097f40 	call	8097f4 <_Bfree>
  80d3ec:	d8c00d17 	ldw	r3,52(sp)
  80d3f0:	048028c4 	movi	r18,163
  80d3f4:	18000015 	stw	zero,0(r3)
  80d3f8:	003f4606 	br	80d114 <__gethex+0x10c>
  80d3fc:	b8a1c83a 	sub	r16,r23,r2
  80d400:	980b883a 	mov	r5,r19
  80d404:	a809883a 	mov	r4,r21
  80d408:	800d883a 	mov	r6,r16
  80d40c:	080a1380 	call	80a138 <__lshift>
  80d410:	1027883a 	mov	r19,r2
  80d414:	b42dc83a 	sub	r22,r22,r16
  80d418:	10800504 	addi	r2,r2,20
  80d41c:	d8800215 	stw	r2,8(sp)
  80d420:	003fec06 	br	80d3d4 <__gethex+0x3cc>
  80d424:	41000015 	stw	r4,0(r8)
  80d428:	28c00003 	ldbu	r3,0(r5)
  80d42c:	01c00104 	movi	r7,4
  80d430:	000d883a 	mov	r6,zero
  80d434:	41d1883a 	add	r8,r8,r7
  80d438:	0009883a 	mov	r4,zero
  80d43c:	003fd306 	br	80d38c <__gethex+0x384>
  80d440:	15e1c83a 	sub	r16,r2,r23
  80d444:	9809883a 	mov	r4,r19
  80d448:	800b883a 	mov	r5,r16
  80d44c:	0809cec0 	call	809cec <__any_on>
  80d450:	1000061e 	bne	r2,zero,80d46c <__gethex+0x464>
  80d454:	0039883a 	mov	fp,zero
  80d458:	9809883a 	mov	r4,r19
  80d45c:	800b883a 	mov	r5,r16
  80d460:	080cf580 	call	80cf58 <rshift>
  80d464:	b42d883a 	add	r22,r22,r16
  80d468:	003fdb06 	br	80d3d8 <__gethex+0x3d0>
  80d46c:	817fffc4 	addi	r5,r16,-1
  80d470:	2805d17a 	srai	r2,r5,5
  80d474:	d8c00217 	ldw	r3,8(sp)
  80d478:	290007cc 	andi	r4,r5,31
  80d47c:	1085883a 	add	r2,r2,r2
  80d480:	1085883a 	add	r2,r2,r2
  80d484:	01800044 	movi	r6,1
  80d488:	10c5883a 	add	r2,r2,r3
  80d48c:	3108983a 	sll	r4,r6,r4
  80d490:	10c00017 	ldw	r3,0(r2)
  80d494:	20c8703a 	and	r4,r4,r3
  80d498:	20001a1e 	bne	r4,zero,80d504 <__gethex+0x4fc>
  80d49c:	3039883a 	mov	fp,r6
  80d4a0:	003fed06 	br	80d458 <__gethex+0x450>
  80d4a4:	1011883a 	mov	r8,r2
  80d4a8:	0009883a 	mov	r4,zero
  80d4ac:	003fbd06 	br	80d3a4 <__gethex+0x39c>
  80d4b0:	a1000117 	ldw	r4,4(r20)
  80d4b4:	b1001a16 	blt	r22,r4,80d520 <__gethex+0x518>
  80d4b8:	04800044 	movi	r18,1
  80d4bc:	e0000826 	beq	fp,zero,80d4e0 <__gethex+0x4d8>
  80d4c0:	a1000317 	ldw	r4,12(r20)
  80d4c4:	00800084 	movi	r2,2
  80d4c8:	20809426 	beq	r4,r2,80d71c <__gethex+0x714>
  80d4cc:	008000c4 	movi	r2,3
  80d4d0:	20805826 	beq	r4,r2,80d634 <__gethex+0x62c>
  80d4d4:	00800044 	movi	r2,1
  80d4d8:	20803f26 	beq	r4,r2,80d5d8 <__gethex+0x5d0>
  80d4dc:	94800414 	ori	r18,r18,16
  80d4e0:	d8800d17 	ldw	r2,52(sp)
  80d4e4:	d8c00117 	ldw	r3,4(sp)
  80d4e8:	14c00015 	stw	r19,0(r2)
  80d4ec:	1d800015 	stw	r22,0(r3)
  80d4f0:	003f0806 	br	80d114 <__gethex+0x10c>
  80d4f4:	000b883a 	mov	r5,zero
  80d4f8:	003f9206 	br	80d344 <__gethex+0x33c>
  80d4fc:	002d883a 	mov	r22,zero
  80d500:	003ef806 	br	80d0e4 <__gethex+0xdc>
  80d504:	3140160e 	bge	r6,r5,80d560 <__gethex+0x558>
  80d508:	9809883a 	mov	r4,r19
  80d50c:	817fff84 	addi	r5,r16,-2
  80d510:	0809cec0 	call	809cec <__any_on>
  80d514:	10001226 	beq	r2,zero,80d560 <__gethex+0x558>
  80d518:	070000c4 	movi	fp,3
  80d51c:	003fce06 	br	80d458 <__gethex+0x450>
  80d520:	25a3c83a 	sub	r17,r4,r22
  80d524:	8dc01016 	blt	r17,r23,80d568 <__gethex+0x560>
  80d528:	a0c00317 	ldw	r3,12(r20)
  80d52c:	00800084 	movi	r2,2
  80d530:	18809326 	beq	r3,r2,80d780 <__gethex+0x778>
  80d534:	008000c4 	movi	r2,3
  80d538:	18808e26 	beq	r3,r2,80d774 <__gethex+0x76c>
  80d53c:	00800044 	movi	r2,1
  80d540:	18807b26 	beq	r3,r2,80d730 <__gethex+0x728>
  80d544:	a809883a 	mov	r4,r21
  80d548:	980b883a 	mov	r5,r19
  80d54c:	08097f40 	call	8097f4 <_Bfree>
  80d550:	d8c00d17 	ldw	r3,52(sp)
  80d554:	04801404 	movi	r18,80
  80d558:	18000015 	stw	zero,0(r3)
  80d55c:	003eed06 	br	80d114 <__gethex+0x10c>
  80d560:	07000084 	movi	fp,2
  80d564:	003fbc06 	br	80d458 <__gethex+0x450>
  80d568:	8c3fffc4 	addi	r16,r17,-1
  80d56c:	e0001426 	beq	fp,zero,80d5c0 <__gethex+0x5b8>
  80d570:	07000044 	movi	fp,1
  80d574:	8005d17a 	srai	r2,r16,5
  80d578:	d8c00217 	ldw	r3,8(sp)
  80d57c:	814007cc 	andi	r5,r16,31
  80d580:	1085883a 	add	r2,r2,r2
  80d584:	1085883a 	add	r2,r2,r2
  80d588:	10c5883a 	add	r2,r2,r3
  80d58c:	00c00044 	movi	r3,1
  80d590:	1946983a 	sll	r3,r3,r5
  80d594:	11000017 	ldw	r4,0(r2)
  80d598:	1906703a 	and	r3,r3,r4
  80d59c:	18000126 	beq	r3,zero,80d5a4 <__gethex+0x59c>
  80d5a0:	e7000094 	ori	fp,fp,2
  80d5a4:	880b883a 	mov	r5,r17
  80d5a8:	9809883a 	mov	r4,r19
  80d5ac:	080cf580 	call	80cf58 <rshift>
  80d5b0:	a5800117 	ldw	r22,4(r20)
  80d5b4:	bc6fc83a 	sub	r23,r23,r17
  80d5b8:	04800084 	movi	r18,2
  80d5bc:	003fbf06 	br	80d4bc <__gethex+0x4b4>
  80d5c0:	043fec0e 	bge	zero,r16,80d574 <__gethex+0x56c>
  80d5c4:	9809883a 	mov	r4,r19
  80d5c8:	800b883a 	mov	r5,r16
  80d5cc:	0809cec0 	call	809cec <__any_on>
  80d5d0:	1039883a 	mov	fp,r2
  80d5d4:	003fe706 	br	80d574 <__gethex+0x56c>
  80d5d8:	e080008c 	andi	r2,fp,2
  80d5dc:	103fbf26 	beq	r2,zero,80d4dc <__gethex+0x4d4>
  80d5e0:	d8c00217 	ldw	r3,8(sp)
  80d5e4:	18800017 	ldw	r2,0(r3)
  80d5e8:	e084b03a 	or	r2,fp,r2
  80d5ec:	1104703a 	and	r2,r2,r4
  80d5f0:	103fba26 	beq	r2,zero,80d4dc <__gethex+0x4d4>
  80d5f4:	9c000417 	ldw	r16,16(r19)
  80d5f8:	d8c00217 	ldw	r3,8(sp)
  80d5fc:	017fffc4 	movi	r5,-1
  80d600:	8405883a 	add	r2,r16,r16
  80d604:	10b9883a 	add	fp,r2,r2
  80d608:	1f09883a 	add	r4,r3,fp
  80d60c:	dc000015 	stw	r16,0(sp)
  80d610:	00000306 	br	80d620 <__gethex+0x618>
  80d614:	18000015 	stw	zero,0(r3)
  80d618:	18c00104 	addi	r3,r3,4
  80d61c:	1900082e 	bgeu	r3,r4,80d640 <__gethex+0x638>
  80d620:	18800017 	ldw	r2,0(r3)
  80d624:	117ffb26 	beq	r2,r5,80d614 <__gethex+0x60c>
  80d628:	10800044 	addi	r2,r2,1
  80d62c:	18800015 	stw	r2,0(r3)
  80d630:	00001f06 	br	80d6b0 <__gethex+0x6a8>
  80d634:	d8800e17 	ldw	r2,56(sp)
  80d638:	103fa826 	beq	r2,zero,80d4dc <__gethex+0x4d4>
  80d63c:	003fed06 	br	80d5f4 <__gethex+0x5ec>
  80d640:	98800217 	ldw	r2,8(r19)
  80d644:	80801316 	blt	r16,r2,80d694 <__gethex+0x68c>
  80d648:	99400117 	ldw	r5,4(r19)
  80d64c:	a809883a 	mov	r4,r21
  80d650:	29400044 	addi	r5,r5,1
  80d654:	0809d740 	call	809d74 <_Balloc>
  80d658:	99800417 	ldw	r6,16(r19)
  80d65c:	99400304 	addi	r5,r19,12
  80d660:	11000304 	addi	r4,r2,12
  80d664:	318d883a 	add	r6,r6,r6
  80d668:	318d883a 	add	r6,r6,r6
  80d66c:	31800204 	addi	r6,r6,8
  80d670:	1023883a 	mov	r17,r2
  80d674:	08032540 	call	803254 <memcpy>
  80d678:	980b883a 	mov	r5,r19
  80d67c:	a809883a 	mov	r4,r21
  80d680:	08097f40 	call	8097f4 <_Bfree>
  80d684:	8c000417 	ldw	r16,16(r17)
  80d688:	88800504 	addi	r2,r17,20
  80d68c:	8827883a 	mov	r19,r17
  80d690:	d8800215 	stw	r2,8(sp)
  80d694:	8405883a 	add	r2,r16,r16
  80d698:	1085883a 	add	r2,r2,r2
  80d69c:	14c5883a 	add	r2,r2,r19
  80d6a0:	84000044 	addi	r16,r16,1
  80d6a4:	00c00044 	movi	r3,1
  80d6a8:	10c00515 	stw	r3,20(r2)
  80d6ac:	9c000415 	stw	r16,16(r19)
  80d6b0:	00800084 	movi	r2,2
  80d6b4:	90801426 	beq	r18,r2,80d708 <__gethex+0x700>
  80d6b8:	d8800017 	ldw	r2,0(sp)
  80d6bc:	14000b16 	blt	r2,r16,80d6ec <__gethex+0x6e4>
  80d6c0:	bc0007cc 	andi	r16,r23,31
  80d6c4:	8000021e 	bne	r16,zero,80d6d0 <__gethex+0x6c8>
  80d6c8:	94800814 	ori	r18,r18,32
  80d6cc:	003f8406 	br	80d4e0 <__gethex+0x4d8>
  80d6d0:	d8c00217 	ldw	r3,8(sp)
  80d6d4:	1f05883a 	add	r2,r3,fp
  80d6d8:	113fff17 	ldw	r4,-4(r2)
  80d6dc:	080981c0 	call	80981c <__hi0bits>
  80d6e0:	00c00804 	movi	r3,32
  80d6e4:	1c07c83a 	sub	r3,r3,r16
  80d6e8:	10fff70e 	bge	r2,r3,80d6c8 <__gethex+0x6c0>
  80d6ec:	9809883a 	mov	r4,r19
  80d6f0:	01400044 	movi	r5,1
  80d6f4:	080cf580 	call	80cf58 <rshift>
  80d6f8:	a0800217 	ldw	r2,8(r20)
  80d6fc:	b5800044 	addi	r22,r22,1
  80d700:	15bf3716 	blt	r2,r22,80d3e0 <__gethex+0x3d8>
  80d704:	003ff006 	br	80d6c8 <__gethex+0x6c0>
  80d708:	a0800017 	ldw	r2,0(r20)
  80d70c:	10bfffc4 	addi	r2,r2,-1
  80d710:	b8801e26 	beq	r23,r2,80d78c <__gethex+0x784>
  80d714:	04800884 	movi	r18,34
  80d718:	003f7106 	br	80d4e0 <__gethex+0x4d8>
  80d71c:	d8c00e17 	ldw	r3,56(sp)
  80d720:	00800044 	movi	r2,1
  80d724:	10c5c83a 	sub	r2,r2,r3
  80d728:	103f6c26 	beq	r2,zero,80d4dc <__gethex+0x4d4>
  80d72c:	003fb106 	br	80d5f4 <__gethex+0x5ec>
  80d730:	bc7f841e 	bne	r23,r17,80d544 <__gethex+0x53c>
  80d734:	1dc0050e 	bge	r3,r23,80d74c <__gethex+0x744>
  80d738:	b8cbc83a 	sub	r5,r23,r3
  80d73c:	9809883a 	mov	r4,r19
  80d740:	0809cec0 	call	809cec <__any_on>
  80d744:	103f7f26 	beq	r2,zero,80d544 <__gethex+0x53c>
  80d748:	a1000117 	ldw	r4,4(r20)
  80d74c:	d8800117 	ldw	r2,4(sp)
  80d750:	d8c00217 	ldw	r3,8(sp)
  80d754:	04000044 	movi	r16,1
  80d758:	11000015 	stw	r4,0(r2)
  80d75c:	d8800d17 	ldw	r2,52(sp)
  80d760:	04801884 	movi	r18,98
  80d764:	1c000015 	stw	r16,0(r3)
  80d768:	14c00015 	stw	r19,0(r2)
  80d76c:	9c000415 	stw	r16,16(r19)
  80d770:	003e6806 	br	80d114 <__gethex+0x10c>
  80d774:	d8c00e17 	ldw	r3,56(sp)
  80d778:	183f7226 	beq	r3,zero,80d544 <__gethex+0x53c>
  80d77c:	003ff306 	br	80d74c <__gethex+0x744>
  80d780:	d8800e17 	ldw	r2,56(sp)
  80d784:	103ff126 	beq	r2,zero,80d74c <__gethex+0x744>
  80d788:	003f6e06 	br	80d544 <__gethex+0x53c>
  80d78c:	b805d17a 	srai	r2,r23,5
  80d790:	d8c00217 	ldw	r3,8(sp)
  80d794:	b94007cc 	andi	r5,r23,31
  80d798:	1085883a 	add	r2,r2,r2
  80d79c:	1085883a 	add	r2,r2,r2
  80d7a0:	10c5883a 	add	r2,r2,r3
  80d7a4:	00c00044 	movi	r3,1
  80d7a8:	1946983a 	sll	r3,r3,r5
  80d7ac:	11000017 	ldw	r4,0(r2)
  80d7b0:	1906703a 	and	r3,r3,r4
  80d7b4:	183fd726 	beq	r3,zero,80d714 <__gethex+0x70c>
  80d7b8:	04800844 	movi	r18,33
  80d7bc:	003f4806 	br	80d4e0 <__gethex+0x4d8>

0080d7c0 <L_shift>:
  80d7c0:	00800204 	movi	r2,8
  80d7c4:	1185c83a 	sub	r2,r2,r6
  80d7c8:	1085883a 	add	r2,r2,r2
  80d7cc:	21c00017 	ldw	r7,0(r4)
  80d7d0:	1093883a 	add	r9,r2,r2
  80d7d4:	00800804 	movi	r2,32
  80d7d8:	200d883a 	mov	r6,r4
  80d7dc:	1251c83a 	sub	r8,r2,r9
  80d7e0:	31800104 	addi	r6,r6,4
  80d7e4:	3805883a 	mov	r2,r7
  80d7e8:	31c00017 	ldw	r7,0(r6)
  80d7ec:	3a08983a 	sll	r4,r7,r8
  80d7f0:	3a46d83a 	srl	r3,r7,r9
  80d7f4:	1104b03a 	or	r2,r2,r4
  80d7f8:	180f883a 	mov	r7,r3
  80d7fc:	30bfff15 	stw	r2,-4(r6)
  80d800:	30c00015 	stw	r3,0(r6)
  80d804:	317ff636 	bltu	r6,r5,80d7e0 <L_shift+0x20>
  80d808:	f800283a 	ret

0080d80c <__hexnan>:
  80d80c:	defff404 	addi	sp,sp,-48
  80d810:	dd800815 	stw	r22,32(sp)
  80d814:	058020b4 	movhi	r22,130
  80d818:	b5a34904 	addi	r22,r22,-29404
  80d81c:	b0800c03 	ldbu	r2,48(r22)
  80d820:	dcc00515 	stw	r19,20(sp)
  80d824:	dc000215 	stw	r16,8(sp)
  80d828:	dfc00b15 	stw	ra,44(sp)
  80d82c:	df000a15 	stw	fp,40(sp)
  80d830:	ddc00915 	stw	r23,36(sp)
  80d834:	dd400715 	stw	r21,28(sp)
  80d838:	dd000615 	stw	r20,24(sp)
  80d83c:	dc800415 	stw	r18,16(sp)
  80d840:	dc400315 	stw	r17,12(sp)
  80d844:	d9000115 	stw	r4,4(sp)
  80d848:	2821883a 	mov	r16,r5
  80d84c:	3027883a 	mov	r19,r6
  80d850:	10007426 	beq	r2,zero,80da24 <__hexnan+0x218>
  80d854:	80c00017 	ldw	r3,0(r16)
  80d858:	1805d17a 	srai	r2,r3,5
  80d85c:	18c007cc 	andi	r3,r3,31
  80d860:	1839003a 	cmpeq	fp,r3,zero
  80d864:	1085883a 	add	r2,r2,r2
  80d868:	1085883a 	add	r2,r2,r2
  80d86c:	d8c00015 	stw	r3,0(sp)
  80d870:	14c5883a 	add	r2,r2,r19
  80d874:	e000011e 	bne	fp,zero,80d87c <__hexnan+0x70>
  80d878:	10800104 	addi	r2,r2,4
  80d87c:	d8c00117 	ldw	r3,4(sp)
  80d880:	153fff04 	addi	r20,r2,-4
  80d884:	a021883a 	mov	r16,r20
  80d888:	1c400017 	ldw	r17,0(r3)
  80d88c:	a02b883a 	mov	r21,r20
  80d890:	0025883a 	mov	r18,zero
  80d894:	002f883a 	mov	r23,zero
  80d898:	000d883a 	mov	r6,zero
  80d89c:	103fff15 	stw	zero,-4(r2)
  80d8a0:	8c400044 	addi	r17,r17,1
  80d8a4:	89000003 	ldbu	r4,0(r17)
  80d8a8:	20000e26 	beq	r4,zero,80d8e4 <__hexnan+0xd8>
  80d8ac:	2585883a 	add	r2,r4,r22
  80d8b0:	10c00003 	ldbu	r3,0(r2)
  80d8b4:	18002e1e 	bne	r3,zero,80d970 <__hexnan+0x164>
  80d8b8:	00800804 	movi	r2,32
  80d8bc:	11005536 	bltu	r2,r4,80da14 <__hexnan+0x208>
  80d8c0:	bcbff70e 	bge	r23,r18,80d8a0 <__hexnan+0x94>
  80d8c4:	8540022e 	bgeu	r16,r21,80d8d0 <__hexnan+0xc4>
  80d8c8:	008001c4 	movi	r2,7
  80d8cc:	11803c0e 	bge	r2,r6,80d9c0 <__hexnan+0x1b4>
  80d8d0:	9c003536 	bltu	r19,r16,80d9a8 <__hexnan+0x19c>
  80d8d4:	8c400044 	addi	r17,r17,1
  80d8d8:	89000003 	ldbu	r4,0(r17)
  80d8dc:	01800204 	movi	r6,8
  80d8e0:	203ff21e 	bne	r4,zero,80d8ac <__hexnan+0xa0>
  80d8e4:	90004d26 	beq	r18,zero,80da1c <__hexnan+0x210>
  80d8e8:	85404336 	bltu	r16,r21,80d9f8 <__hexnan+0x1ec>
  80d8ec:	9c00382e 	bgeu	r19,r16,80d9d0 <__hexnan+0x1c4>
  80d8f0:	9807883a 	mov	r3,r19
  80d8f4:	80800017 	ldw	r2,0(r16)
  80d8f8:	84000104 	addi	r16,r16,4
  80d8fc:	18800015 	stw	r2,0(r3)
  80d900:	18c00104 	addi	r3,r3,4
  80d904:	a43ffb2e 	bgeu	r20,r16,80d8f4 <__hexnan+0xe8>
  80d908:	18000015 	stw	zero,0(r3)
  80d90c:	18c00104 	addi	r3,r3,4
  80d910:	a0fffd2e 	bgeu	r20,r3,80d908 <__hexnan+0xfc>
  80d914:	a0800017 	ldw	r2,0(r20)
  80d918:	1000071e 	bne	r2,zero,80d938 <__hexnan+0x12c>
  80d91c:	9d004326 	beq	r19,r20,80da2c <__hexnan+0x220>
  80d920:	a007883a 	mov	r3,r20
  80d924:	00000106 	br	80d92c <__hexnan+0x120>
  80d928:	98c04026 	beq	r19,r3,80da2c <__hexnan+0x220>
  80d92c:	18ffff04 	addi	r3,r3,-4
  80d930:	18800017 	ldw	r2,0(r3)
  80d934:	103ffc26 	beq	r2,zero,80d928 <__hexnan+0x11c>
  80d938:	00c00144 	movi	r3,5
  80d93c:	1805883a 	mov	r2,r3
  80d940:	dfc00b17 	ldw	ra,44(sp)
  80d944:	df000a17 	ldw	fp,40(sp)
  80d948:	ddc00917 	ldw	r23,36(sp)
  80d94c:	dd800817 	ldw	r22,32(sp)
  80d950:	dd400717 	ldw	r21,28(sp)
  80d954:	dd000617 	ldw	r20,24(sp)
  80d958:	dcc00517 	ldw	r19,20(sp)
  80d95c:	dc800417 	ldw	r18,16(sp)
  80d960:	dc400317 	ldw	r17,12(sp)
  80d964:	dc000217 	ldw	r16,8(sp)
  80d968:	dec00c04 	addi	sp,sp,48
  80d96c:	f800283a 	ret
  80d970:	31800044 	addi	r6,r6,1
  80d974:	00800204 	movi	r2,8
  80d978:	94800044 	addi	r18,r18,1
  80d97c:	1180040e 	bge	r2,r6,80d990 <__hexnan+0x184>
  80d980:	9c3fc72e 	bgeu	r19,r16,80d8a0 <__hexnan+0x94>
  80d984:	843fff04 	addi	r16,r16,-4
  80d988:	80000015 	stw	zero,0(r16)
  80d98c:	01800044 	movi	r6,1
  80d990:	80800017 	ldw	r2,0(r16)
  80d994:	18c003cc 	andi	r3,r3,15
  80d998:	1004913a 	slli	r2,r2,4
  80d99c:	10c4b03a 	or	r2,r2,r3
  80d9a0:	80800015 	stw	r2,0(r16)
  80d9a4:	003fbe06 	br	80d8a0 <__hexnan+0x94>
  80d9a8:	843fff04 	addi	r16,r16,-4
  80d9ac:	802b883a 	mov	r21,r16
  80d9b0:	902f883a 	mov	r23,r18
  80d9b4:	000d883a 	mov	r6,zero
  80d9b8:	80000015 	stw	zero,0(r16)
  80d9bc:	003fb806 	br	80d8a0 <__hexnan+0x94>
  80d9c0:	8009883a 	mov	r4,r16
  80d9c4:	a80b883a 	mov	r5,r21
  80d9c8:	080d7c00 	call	80d7c0 <L_shift>
  80d9cc:	003fc006 	br	80d8d0 <__hexnan+0xc4>
  80d9d0:	e03fd01e 	bne	fp,zero,80d914 <__hexnan+0x108>
  80d9d4:	d8c00017 	ldw	r3,0(sp)
  80d9d8:	00800804 	movi	r2,32
  80d9dc:	10c5c83a 	sub	r2,r2,r3
  80d9e0:	00ffffc4 	movi	r3,-1
  80d9e4:	1886d83a 	srl	r3,r3,r2
  80d9e8:	a0800017 	ldw	r2,0(r20)
  80d9ec:	10c4703a 	and	r2,r2,r3
  80d9f0:	a0800015 	stw	r2,0(r20)
  80d9f4:	003fc806 	br	80d918 <__hexnan+0x10c>
  80d9f8:	008001c4 	movi	r2,7
  80d9fc:	11bfbb16 	blt	r2,r6,80d8ec <__hexnan+0xe0>
  80da00:	a80b883a 	mov	r5,r21
  80da04:	8009883a 	mov	r4,r16
  80da08:	080d7c00 	call	80d7c0 <L_shift>
  80da0c:	9c3ff02e 	bgeu	r19,r16,80d9d0 <__hexnan+0x1c4>
  80da10:	003fb706 	br	80d8f0 <__hexnan+0xe4>
  80da14:	00800a44 	movi	r2,41
  80da18:	20800826 	beq	r4,r2,80da3c <__hexnan+0x230>
  80da1c:	00c00104 	movi	r3,4
  80da20:	003fc606 	br	80d93c <__hexnan+0x130>
  80da24:	080cef00 	call	80cef0 <__hexdig_init>
  80da28:	003f8a06 	br	80d854 <__hexnan+0x48>
  80da2c:	00800044 	movi	r2,1
  80da30:	00c00144 	movi	r3,5
  80da34:	98800015 	stw	r2,0(r19)
  80da38:	003fc006 	br	80d93c <__hexnan+0x130>
  80da3c:	903ff726 	beq	r18,zero,80da1c <__hexnan+0x210>
  80da40:	d8c00117 	ldw	r3,4(sp)
  80da44:	88800044 	addi	r2,r17,1
  80da48:	18800015 	stw	r2,0(r3)
  80da4c:	857fa72e 	bgeu	r16,r21,80d8ec <__hexnan+0xe0>
  80da50:	003fe906 	br	80d9f8 <__hexnan+0x1ec>

0080da54 <__muldi3>:
  80da54:	2011883a 	mov	r8,r4
  80da58:	427fffcc 	andi	r9,r8,65535
  80da5c:	4018d43a 	srli	r12,r8,16
  80da60:	32bfffcc 	andi	r10,r6,65535
  80da64:	3016d43a 	srli	r11,r6,16
  80da68:	4a85383a 	mul	r2,r9,r10
  80da6c:	6295383a 	mul	r10,r12,r10
  80da70:	4ad3383a 	mul	r9,r9,r11
  80da74:	113fffcc 	andi	r4,r2,65535
  80da78:	1004d43a 	srli	r2,r2,16
  80da7c:	4a93883a 	add	r9,r9,r10
  80da80:	3807883a 	mov	r3,r7
  80da84:	1245883a 	add	r2,r2,r9
  80da88:	280f883a 	mov	r7,r5
  80da8c:	180b883a 	mov	r5,r3
  80da90:	1006943a 	slli	r3,r2,16
  80da94:	defffd04 	addi	sp,sp,-12
  80da98:	dc800215 	stw	r18,8(sp)
  80da9c:	1907883a 	add	r3,r3,r4
  80daa0:	dc400115 	stw	r17,4(sp)
  80daa4:	dc000015 	stw	r16,0(sp)
  80daa8:	4165383a 	mul	r18,r8,r5
  80daac:	31e3383a 	mul	r17,r6,r7
  80dab0:	1012d43a 	srli	r9,r2,16
  80dab4:	62d9383a 	mul	r12,r12,r11
  80dab8:	181f883a 	mov	r15,r3
  80dabc:	1280022e 	bgeu	r2,r10,80dac8 <__muldi3+0x74>
  80dac0:	00800074 	movhi	r2,1
  80dac4:	6099883a 	add	r12,r12,r2
  80dac8:	624d883a 	add	r6,r12,r9
  80dacc:	9187883a 	add	r3,r18,r6
  80dad0:	88c7883a 	add	r3,r17,r3
  80dad4:	7805883a 	mov	r2,r15
  80dad8:	dc800217 	ldw	r18,8(sp)
  80dadc:	dc400117 	ldw	r17,4(sp)
  80dae0:	dc000017 	ldw	r16,0(sp)
  80dae4:	dec00304 	addi	sp,sp,12
  80dae8:	f800283a 	ret

0080daec <__fixunsdfsi>:
  80daec:	defffb04 	addi	sp,sp,-20
  80daf0:	dc400115 	stw	r17,4(sp)
  80daf4:	dc000015 	stw	r16,0(sp)
  80daf8:	04507834 	movhi	r17,16864
  80dafc:	0021883a 	mov	r16,zero
  80db00:	800d883a 	mov	r6,r16
  80db04:	880f883a 	mov	r7,r17
  80db08:	dcc00315 	stw	r19,12(sp)
  80db0c:	dc800215 	stw	r18,8(sp)
  80db10:	2827883a 	mov	r19,r5
  80db14:	2025883a 	mov	r18,r4
  80db18:	dfc00415 	stw	ra,16(sp)
  80db1c:	080f53c0 	call	80f53c <__gedf2>
  80db20:	000d883a 	mov	r6,zero
  80db24:	880f883a 	mov	r7,r17
  80db28:	980b883a 	mov	r5,r19
  80db2c:	9009883a 	mov	r4,r18
  80db30:	10000d16 	blt	r2,zero,80db68 <__fixunsdfsi+0x7c>
  80db34:	080ec940 	call	80ec94 <__subdf3>
  80db38:	180b883a 	mov	r5,r3
  80db3c:	1009883a 	mov	r4,r2
  80db40:	080f7cc0 	call	80f7cc <__fixdfsi>
  80db44:	00e00034 	movhi	r3,32768
  80db48:	10c5883a 	add	r2,r2,r3
  80db4c:	dfc00417 	ldw	ra,16(sp)
  80db50:	dcc00317 	ldw	r19,12(sp)
  80db54:	dc800217 	ldw	r18,8(sp)
  80db58:	dc400117 	ldw	r17,4(sp)
  80db5c:	dc000017 	ldw	r16,0(sp)
  80db60:	dec00504 	addi	sp,sp,20
  80db64:	f800283a 	ret
  80db68:	980b883a 	mov	r5,r19
  80db6c:	9009883a 	mov	r4,r18
  80db70:	080f7cc0 	call	80f7cc <__fixdfsi>
  80db74:	dfc00417 	ldw	ra,16(sp)
  80db78:	dcc00317 	ldw	r19,12(sp)
  80db7c:	dc800217 	ldw	r18,8(sp)
  80db80:	dc400117 	ldw	r17,4(sp)
  80db84:	dc000017 	ldw	r16,0(sp)
  80db88:	dec00504 	addi	sp,sp,20
  80db8c:	f800283a 	ret

0080db90 <__udivdi3>:
  80db90:	defff004 	addi	sp,sp,-64
  80db94:	2005883a 	mov	r2,r4
  80db98:	3011883a 	mov	r8,r6
  80db9c:	df000e15 	stw	fp,56(sp)
  80dba0:	dd000a15 	stw	r20,40(sp)
  80dba4:	dc000615 	stw	r16,24(sp)
  80dba8:	dfc00f15 	stw	ra,60(sp)
  80dbac:	ddc00d15 	stw	r23,52(sp)
  80dbb0:	dd800c15 	stw	r22,48(sp)
  80dbb4:	dd400b15 	stw	r21,44(sp)
  80dbb8:	dcc00915 	stw	r19,36(sp)
  80dbbc:	dc800815 	stw	r18,32(sp)
  80dbc0:	dc400715 	stw	r17,28(sp)
  80dbc4:	4021883a 	mov	r16,r8
  80dbc8:	1039883a 	mov	fp,r2
  80dbcc:	2829883a 	mov	r20,r5
  80dbd0:	38003b1e 	bne	r7,zero,80dcc0 <__udivdi3+0x130>
  80dbd4:	2a005c36 	bltu	r5,r8,80dd48 <__udivdi3+0x1b8>
  80dbd8:	4000a626 	beq	r8,zero,80de74 <__udivdi3+0x2e4>
  80dbdc:	00bfffd4 	movui	r2,65535
  80dbe0:	14009e36 	bltu	r2,r16,80de5c <__udivdi3+0x2cc>
  80dbe4:	00803fc4 	movi	r2,255
  80dbe8:	14013d36 	bltu	r2,r16,80e0e0 <__udivdi3+0x550>
  80dbec:	000b883a 	mov	r5,zero
  80dbf0:	0005883a 	mov	r2,zero
  80dbf4:	8084d83a 	srl	r2,r16,r2
  80dbf8:	01002074 	movhi	r4,129
  80dbfc:	21145a04 	addi	r4,r4,20840
  80dc00:	01800804 	movi	r6,32
  80dc04:	1105883a 	add	r2,r2,r4
  80dc08:	10c00003 	ldbu	r3,0(r2)
  80dc0c:	28c7883a 	add	r3,r5,r3
  80dc10:	30edc83a 	sub	r22,r6,r3
  80dc14:	b000ee1e 	bne	r22,zero,80dfd0 <__udivdi3+0x440>
  80dc18:	802ad43a 	srli	r21,r16,16
  80dc1c:	00800044 	movi	r2,1
  80dc20:	a423c83a 	sub	r17,r20,r16
  80dc24:	85ffffcc 	andi	r23,r16,65535
  80dc28:	d8800315 	stw	r2,12(sp)
  80dc2c:	8809883a 	mov	r4,r17
  80dc30:	a80b883a 	mov	r5,r21
  80dc34:	080fbe80 	call	80fbe8 <__udivsi3>
  80dc38:	8809883a 	mov	r4,r17
  80dc3c:	a80b883a 	mov	r5,r21
  80dc40:	102d883a 	mov	r22,r2
  80dc44:	080fbf00 	call	80fbf0 <__umodsi3>
  80dc48:	1004943a 	slli	r2,r2,16
  80dc4c:	e006d43a 	srli	r3,fp,16
  80dc50:	bda3383a 	mul	r17,r23,r22
  80dc54:	10c4b03a 	or	r2,r2,r3
  80dc58:	1440042e 	bgeu	r2,r17,80dc6c <__udivdi3+0xdc>
  80dc5c:	1405883a 	add	r2,r2,r16
  80dc60:	b5bfffc4 	addi	r22,r22,-1
  80dc64:	14000136 	bltu	r2,r16,80dc6c <__udivdi3+0xdc>
  80dc68:	14413d36 	bltu	r2,r17,80e160 <__udivdi3+0x5d0>
  80dc6c:	1463c83a 	sub	r17,r2,r17
  80dc70:	8809883a 	mov	r4,r17
  80dc74:	a80b883a 	mov	r5,r21
  80dc78:	080fbe80 	call	80fbe8 <__udivsi3>
  80dc7c:	8809883a 	mov	r4,r17
  80dc80:	a80b883a 	mov	r5,r21
  80dc84:	1029883a 	mov	r20,r2
  80dc88:	080fbf00 	call	80fbf0 <__umodsi3>
  80dc8c:	1004943a 	slli	r2,r2,16
  80dc90:	bd09383a 	mul	r4,r23,r20
  80dc94:	e0ffffcc 	andi	r3,fp,65535
  80dc98:	10c4b03a 	or	r2,r2,r3
  80dc9c:	1100042e 	bgeu	r2,r4,80dcb0 <__udivdi3+0x120>
  80dca0:	8085883a 	add	r2,r16,r2
  80dca4:	a53fffc4 	addi	r20,r20,-1
  80dca8:	14000136 	bltu	r2,r16,80dcb0 <__udivdi3+0x120>
  80dcac:	11012036 	bltu	r2,r4,80e130 <__udivdi3+0x5a0>
  80dcb0:	b004943a 	slli	r2,r22,16
  80dcb4:	d9000317 	ldw	r4,12(sp)
  80dcb8:	a084b03a 	or	r2,r20,r2
  80dcbc:	00001506 	br	80dd14 <__udivdi3+0x184>
  80dcc0:	380d883a 	mov	r6,r7
  80dcc4:	29c06236 	bltu	r5,r7,80de50 <__udivdi3+0x2c0>
  80dcc8:	00bfffd4 	movui	r2,65535
  80dccc:	11c05a36 	bltu	r2,r7,80de38 <__udivdi3+0x2a8>
  80dcd0:	00803fc4 	movi	r2,255
  80dcd4:	11c0fc36 	bltu	r2,r7,80e0c8 <__udivdi3+0x538>
  80dcd8:	000b883a 	mov	r5,zero
  80dcdc:	0005883a 	mov	r2,zero
  80dce0:	3084d83a 	srl	r2,r6,r2
  80dce4:	01002074 	movhi	r4,129
  80dce8:	21145a04 	addi	r4,r4,20840
  80dcec:	01c00804 	movi	r7,32
  80dcf0:	1105883a 	add	r2,r2,r4
  80dcf4:	10c00003 	ldbu	r3,0(r2)
  80dcf8:	28c7883a 	add	r3,r5,r3
  80dcfc:	38efc83a 	sub	r23,r7,r3
  80dd00:	b800691e 	bne	r23,zero,80dea8 <__udivdi3+0x318>
  80dd04:	35000136 	bltu	r6,r20,80dd0c <__udivdi3+0x17c>
  80dd08:	e4005136 	bltu	fp,r16,80de50 <__udivdi3+0x2c0>
  80dd0c:	00800044 	movi	r2,1
  80dd10:	0009883a 	mov	r4,zero
  80dd14:	2007883a 	mov	r3,r4
  80dd18:	dfc00f17 	ldw	ra,60(sp)
  80dd1c:	df000e17 	ldw	fp,56(sp)
  80dd20:	ddc00d17 	ldw	r23,52(sp)
  80dd24:	dd800c17 	ldw	r22,48(sp)
  80dd28:	dd400b17 	ldw	r21,44(sp)
  80dd2c:	dd000a17 	ldw	r20,40(sp)
  80dd30:	dcc00917 	ldw	r19,36(sp)
  80dd34:	dc800817 	ldw	r18,32(sp)
  80dd38:	dc400717 	ldw	r17,28(sp)
  80dd3c:	dc000617 	ldw	r16,24(sp)
  80dd40:	dec01004 	addi	sp,sp,64
  80dd44:	f800283a 	ret
  80dd48:	00bfffd4 	movui	r2,65535
  80dd4c:	12005036 	bltu	r2,r8,80de90 <__udivdi3+0x300>
  80dd50:	00803fc4 	movi	r2,255
  80dd54:	1200e836 	bltu	r2,r8,80e0f8 <__udivdi3+0x568>
  80dd58:	000b883a 	mov	r5,zero
  80dd5c:	0005883a 	mov	r2,zero
  80dd60:	8084d83a 	srl	r2,r16,r2
  80dd64:	01002074 	movhi	r4,129
  80dd68:	21145a04 	addi	r4,r4,20840
  80dd6c:	01800804 	movi	r6,32
  80dd70:	1105883a 	add	r2,r2,r4
  80dd74:	10c00003 	ldbu	r3,0(r2)
  80dd78:	28c7883a 	add	r3,r5,r3
  80dd7c:	30cbc83a 	sub	r5,r6,r3
  80dd80:	28000626 	beq	r5,zero,80dd9c <__udivdi3+0x20c>
  80dd84:	3145c83a 	sub	r2,r6,r5
  80dd88:	e084d83a 	srl	r2,fp,r2
  80dd8c:	a146983a 	sll	r3,r20,r5
  80dd90:	e178983a 	sll	fp,fp,r5
  80dd94:	8160983a 	sll	r16,r16,r5
  80dd98:	18a8b03a 	or	r20,r3,r2
  80dd9c:	802ad43a 	srli	r21,r16,16
  80dda0:	a009883a 	mov	r4,r20
  80dda4:	85ffffcc 	andi	r23,r16,65535
  80dda8:	a80b883a 	mov	r5,r21
  80ddac:	080fbe80 	call	80fbe8 <__udivsi3>
  80ddb0:	a009883a 	mov	r4,r20
  80ddb4:	a80b883a 	mov	r5,r21
  80ddb8:	102d883a 	mov	r22,r2
  80ddbc:	080fbf00 	call	80fbf0 <__umodsi3>
  80ddc0:	1004943a 	slli	r2,r2,16
  80ddc4:	e006d43a 	srli	r3,fp,16
  80ddc8:	bda3383a 	mul	r17,r23,r22
  80ddcc:	10c4b03a 	or	r2,r2,r3
  80ddd0:	1440042e 	bgeu	r2,r17,80dde4 <__udivdi3+0x254>
  80ddd4:	1405883a 	add	r2,r2,r16
  80ddd8:	b5bfffc4 	addi	r22,r22,-1
  80dddc:	14000136 	bltu	r2,r16,80dde4 <__udivdi3+0x254>
  80dde0:	1440d536 	bltu	r2,r17,80e138 <__udivdi3+0x5a8>
  80dde4:	1463c83a 	sub	r17,r2,r17
  80dde8:	8809883a 	mov	r4,r17
  80ddec:	a80b883a 	mov	r5,r21
  80ddf0:	080fbe80 	call	80fbe8 <__udivsi3>
  80ddf4:	8809883a 	mov	r4,r17
  80ddf8:	a80b883a 	mov	r5,r21
  80ddfc:	1029883a 	mov	r20,r2
  80de00:	080fbf00 	call	80fbf0 <__umodsi3>
  80de04:	1004943a 	slli	r2,r2,16
  80de08:	bd09383a 	mul	r4,r23,r20
  80de0c:	e0ffffcc 	andi	r3,fp,65535
  80de10:	10c4b03a 	or	r2,r2,r3
  80de14:	1100042e 	bgeu	r2,r4,80de28 <__udivdi3+0x298>
  80de18:	8085883a 	add	r2,r16,r2
  80de1c:	a53fffc4 	addi	r20,r20,-1
  80de20:	14000136 	bltu	r2,r16,80de28 <__udivdi3+0x298>
  80de24:	1100c736 	bltu	r2,r4,80e144 <__udivdi3+0x5b4>
  80de28:	b004943a 	slli	r2,r22,16
  80de2c:	0009883a 	mov	r4,zero
  80de30:	a084b03a 	or	r2,r20,r2
  80de34:	003fb706 	br	80dd14 <__udivdi3+0x184>
  80de38:	00804034 	movhi	r2,256
  80de3c:	10bfffc4 	addi	r2,r2,-1
  80de40:	11c0a436 	bltu	r2,r7,80e0d4 <__udivdi3+0x544>
  80de44:	01400404 	movi	r5,16
  80de48:	2805883a 	mov	r2,r5
  80de4c:	003fa406 	br	80dce0 <__udivdi3+0x150>
  80de50:	0005883a 	mov	r2,zero
  80de54:	0009883a 	mov	r4,zero
  80de58:	003fae06 	br	80dd14 <__udivdi3+0x184>
  80de5c:	00804034 	movhi	r2,256
  80de60:	10bfffc4 	addi	r2,r2,-1
  80de64:	1400a136 	bltu	r2,r16,80e0ec <__udivdi3+0x55c>
  80de68:	01400404 	movi	r5,16
  80de6c:	2805883a 	mov	r2,r5
  80de70:	003f6006 	br	80dbf4 <__udivdi3+0x64>
  80de74:	01000044 	movi	r4,1
  80de78:	000b883a 	mov	r5,zero
  80de7c:	080fbe80 	call	80fbe8 <__udivsi3>
  80de80:	1021883a 	mov	r16,r2
  80de84:	00bfffd4 	movui	r2,65535
  80de88:	143ff436 	bltu	r2,r16,80de5c <__udivdi3+0x2cc>
  80de8c:	003f5506 	br	80dbe4 <__udivdi3+0x54>
  80de90:	00804034 	movhi	r2,256
  80de94:	10bfffc4 	addi	r2,r2,-1
  80de98:	12009a36 	bltu	r2,r8,80e104 <__udivdi3+0x574>
  80de9c:	01400404 	movi	r5,16
  80dea0:	2805883a 	mov	r2,r5
  80dea4:	003fae06 	br	80dd60 <__udivdi3+0x1d0>
  80dea8:	3dc5c83a 	sub	r2,r7,r23
  80deac:	35c8983a 	sll	r4,r6,r23
  80deb0:	8086d83a 	srl	r3,r16,r2
  80deb4:	a0a2d83a 	srl	r17,r20,r2
  80deb8:	e084d83a 	srl	r2,fp,r2
  80debc:	20eab03a 	or	r21,r4,r3
  80dec0:	a82cd43a 	srli	r22,r21,16
  80dec4:	a5c6983a 	sll	r3,r20,r23
  80dec8:	8809883a 	mov	r4,r17
  80decc:	b00b883a 	mov	r5,r22
  80ded0:	1886b03a 	or	r3,r3,r2
  80ded4:	d8c00215 	stw	r3,8(sp)
  80ded8:	080fbe80 	call	80fbe8 <__udivsi3>
  80dedc:	8809883a 	mov	r4,r17
  80dee0:	b00b883a 	mov	r5,r22
  80dee4:	1029883a 	mov	r20,r2
  80dee8:	080fbf00 	call	80fbf0 <__umodsi3>
  80deec:	a8ffffcc 	andi	r3,r21,65535
  80def0:	d8c00515 	stw	r3,20(sp)
  80def4:	d9000217 	ldw	r4,8(sp)
  80def8:	d9400517 	ldw	r5,20(sp)
  80defc:	1004943a 	slli	r2,r2,16
  80df00:	2006d43a 	srli	r3,r4,16
  80df04:	85e0983a 	sll	r16,r16,r23
  80df08:	2d23383a 	mul	r17,r5,r20
  80df0c:	10c4b03a 	or	r2,r2,r3
  80df10:	dc000015 	stw	r16,0(sp)
  80df14:	1440032e 	bgeu	r2,r17,80df24 <__udivdi3+0x394>
  80df18:	1545883a 	add	r2,r2,r21
  80df1c:	a53fffc4 	addi	r20,r20,-1
  80df20:	15407f2e 	bgeu	r2,r21,80e120 <__udivdi3+0x590>
  80df24:	1463c83a 	sub	r17,r2,r17
  80df28:	8809883a 	mov	r4,r17
  80df2c:	b00b883a 	mov	r5,r22
  80df30:	080fbe80 	call	80fbe8 <__udivsi3>
  80df34:	8809883a 	mov	r4,r17
  80df38:	b00b883a 	mov	r5,r22
  80df3c:	1021883a 	mov	r16,r2
  80df40:	080fbf00 	call	80fbf0 <__umodsi3>
  80df44:	d8c00517 	ldw	r3,20(sp)
  80df48:	d9000217 	ldw	r4,8(sp)
  80df4c:	1004943a 	slli	r2,r2,16
  80df50:	1c0f383a 	mul	r7,r3,r16
  80df54:	20ffffcc 	andi	r3,r4,65535
  80df58:	10e2b03a 	or	r17,r2,r3
  80df5c:	89c0032e 	bgeu	r17,r7,80df6c <__udivdi3+0x3dc>
  80df60:	8d63883a 	add	r17,r17,r21
  80df64:	843fffc4 	addi	r16,r16,-1
  80df68:	8d40692e 	bgeu	r17,r21,80e110 <__udivdi3+0x580>
  80df6c:	a008943a 	slli	r4,r20,16
  80df70:	d9400017 	ldw	r5,0(sp)
  80df74:	89e3c83a 	sub	r17,r17,r7
  80df78:	8110b03a 	or	r8,r16,r4
  80df7c:	280cd43a 	srli	r6,r5,16
  80df80:	28ffffcc 	andi	r3,r5,65535
  80df84:	40bfffcc 	andi	r2,r8,65535
  80df88:	400ad43a 	srli	r5,r8,16
  80df8c:	10d3383a 	mul	r9,r2,r3
  80df90:	1185383a 	mul	r2,r2,r6
  80df94:	28c7383a 	mul	r3,r5,r3
  80df98:	4808d43a 	srli	r4,r9,16
  80df9c:	298b383a 	mul	r5,r5,r6
  80dfa0:	10c5883a 	add	r2,r2,r3
  80dfa4:	2089883a 	add	r4,r4,r2
  80dfa8:	20c0022e 	bgeu	r4,r3,80dfb4 <__udivdi3+0x424>
  80dfac:	00800074 	movhi	r2,1
  80dfb0:	288b883a 	add	r5,r5,r2
  80dfb4:	2004d43a 	srli	r2,r4,16
  80dfb8:	288b883a 	add	r5,r5,r2
  80dfbc:	89403f36 	bltu	r17,r5,80e0bc <__udivdi3+0x52c>
  80dfc0:	89403926 	beq	r17,r5,80e0a8 <__udivdi3+0x518>
  80dfc4:	4005883a 	mov	r2,r8
  80dfc8:	0009883a 	mov	r4,zero
  80dfcc:	003f5106 	br	80dd14 <__udivdi3+0x184>
  80dfd0:	85a0983a 	sll	r16,r16,r22
  80dfd4:	3585c83a 	sub	r2,r6,r22
  80dfd8:	a0a2d83a 	srl	r17,r20,r2
  80dfdc:	802ad43a 	srli	r21,r16,16
  80dfe0:	e084d83a 	srl	r2,fp,r2
  80dfe4:	a586983a 	sll	r3,r20,r22
  80dfe8:	8809883a 	mov	r4,r17
  80dfec:	a80b883a 	mov	r5,r21
  80dff0:	1886b03a 	or	r3,r3,r2
  80dff4:	d8c00115 	stw	r3,4(sp)
  80dff8:	080fbe80 	call	80fbe8 <__udivsi3>
  80dffc:	8809883a 	mov	r4,r17
  80e000:	a80b883a 	mov	r5,r21
  80e004:	d8800415 	stw	r2,16(sp)
  80e008:	080fbf00 	call	80fbf0 <__umodsi3>
  80e00c:	d9000117 	ldw	r4,4(sp)
  80e010:	d9400417 	ldw	r5,16(sp)
  80e014:	1004943a 	slli	r2,r2,16
  80e018:	85ffffcc 	andi	r23,r16,65535
  80e01c:	2006d43a 	srli	r3,r4,16
  80e020:	b963383a 	mul	r17,r23,r5
  80e024:	10c4b03a 	or	r2,r2,r3
  80e028:	1440042e 	bgeu	r2,r17,80e03c <__udivdi3+0x4ac>
  80e02c:	297fffc4 	addi	r5,r5,-1
  80e030:	1405883a 	add	r2,r2,r16
  80e034:	d9400415 	stw	r5,16(sp)
  80e038:	1400442e 	bgeu	r2,r16,80e14c <__udivdi3+0x5bc>
  80e03c:	1463c83a 	sub	r17,r2,r17
  80e040:	8809883a 	mov	r4,r17
  80e044:	a80b883a 	mov	r5,r21
  80e048:	080fbe80 	call	80fbe8 <__udivsi3>
  80e04c:	8809883a 	mov	r4,r17
  80e050:	a80b883a 	mov	r5,r21
  80e054:	1029883a 	mov	r20,r2
  80e058:	080fbf00 	call	80fbf0 <__umodsi3>
  80e05c:	d9400117 	ldw	r5,4(sp)
  80e060:	1004943a 	slli	r2,r2,16
  80e064:	bd09383a 	mul	r4,r23,r20
  80e068:	28ffffcc 	andi	r3,r5,65535
  80e06c:	10c6b03a 	or	r3,r2,r3
  80e070:	1900062e 	bgeu	r3,r4,80e08c <__udivdi3+0x4fc>
  80e074:	1c07883a 	add	r3,r3,r16
  80e078:	a53fffc4 	addi	r20,r20,-1
  80e07c:	1c000336 	bltu	r3,r16,80e08c <__udivdi3+0x4fc>
  80e080:	1900022e 	bgeu	r3,r4,80e08c <__udivdi3+0x4fc>
  80e084:	a53fffc4 	addi	r20,r20,-1
  80e088:	1c07883a 	add	r3,r3,r16
  80e08c:	d9400417 	ldw	r5,16(sp)
  80e090:	e5b8983a 	sll	fp,fp,r22
  80e094:	1923c83a 	sub	r17,r3,r4
  80e098:	2804943a 	slli	r2,r5,16
  80e09c:	a0a8b03a 	or	r20,r20,r2
  80e0a0:	dd000315 	stw	r20,12(sp)
  80e0a4:	003ee106 	br	80dc2c <__udivdi3+0x9c>
  80e0a8:	2004943a 	slli	r2,r4,16
  80e0ac:	e5c8983a 	sll	r4,fp,r23
  80e0b0:	48ffffcc 	andi	r3,r9,65535
  80e0b4:	10c5883a 	add	r2,r2,r3
  80e0b8:	20bfc22e 	bgeu	r4,r2,80dfc4 <__udivdi3+0x434>
  80e0bc:	40bfffc4 	addi	r2,r8,-1
  80e0c0:	0009883a 	mov	r4,zero
  80e0c4:	003f1306 	br	80dd14 <__udivdi3+0x184>
  80e0c8:	01400204 	movi	r5,8
  80e0cc:	2805883a 	mov	r2,r5
  80e0d0:	003f0306 	br	80dce0 <__udivdi3+0x150>
  80e0d4:	01400604 	movi	r5,24
  80e0d8:	2805883a 	mov	r2,r5
  80e0dc:	003f0006 	br	80dce0 <__udivdi3+0x150>
  80e0e0:	01400204 	movi	r5,8
  80e0e4:	2805883a 	mov	r2,r5
  80e0e8:	003ec206 	br	80dbf4 <__udivdi3+0x64>
  80e0ec:	01400604 	movi	r5,24
  80e0f0:	2805883a 	mov	r2,r5
  80e0f4:	003ebf06 	br	80dbf4 <__udivdi3+0x64>
  80e0f8:	01400204 	movi	r5,8
  80e0fc:	2805883a 	mov	r2,r5
  80e100:	003f1706 	br	80dd60 <__udivdi3+0x1d0>
  80e104:	01400604 	movi	r5,24
  80e108:	2805883a 	mov	r2,r5
  80e10c:	003f1406 	br	80dd60 <__udivdi3+0x1d0>
  80e110:	89ff962e 	bgeu	r17,r7,80df6c <__udivdi3+0x3dc>
  80e114:	8d63883a 	add	r17,r17,r21
  80e118:	843fffc4 	addi	r16,r16,-1
  80e11c:	003f9306 	br	80df6c <__udivdi3+0x3dc>
  80e120:	147f802e 	bgeu	r2,r17,80df24 <__udivdi3+0x394>
  80e124:	a53fffc4 	addi	r20,r20,-1
  80e128:	1545883a 	add	r2,r2,r21
  80e12c:	003f7d06 	br	80df24 <__udivdi3+0x394>
  80e130:	a53fffc4 	addi	r20,r20,-1
  80e134:	003ede06 	br	80dcb0 <__udivdi3+0x120>
  80e138:	b5bfffc4 	addi	r22,r22,-1
  80e13c:	1405883a 	add	r2,r2,r16
  80e140:	003f2806 	br	80dde4 <__udivdi3+0x254>
  80e144:	a53fffc4 	addi	r20,r20,-1
  80e148:	003f3706 	br	80de28 <__udivdi3+0x298>
  80e14c:	147fbb2e 	bgeu	r2,r17,80e03c <__udivdi3+0x4ac>
  80e150:	297fffc4 	addi	r5,r5,-1
  80e154:	1405883a 	add	r2,r2,r16
  80e158:	d9400415 	stw	r5,16(sp)
  80e15c:	003fb706 	br	80e03c <__udivdi3+0x4ac>
  80e160:	b5bfffc4 	addi	r22,r22,-1
  80e164:	1405883a 	add	r2,r2,r16
  80e168:	003ec006 	br	80dc6c <__udivdi3+0xdc>

0080e16c <__umoddi3>:
  80e16c:	defff104 	addi	sp,sp,-60
  80e170:	dd800b15 	stw	r22,44(sp)
  80e174:	dd000915 	stw	r20,36(sp)
  80e178:	dc000515 	stw	r16,20(sp)
  80e17c:	dfc00e15 	stw	ra,56(sp)
  80e180:	df000d15 	stw	fp,52(sp)
  80e184:	ddc00c15 	stw	r23,48(sp)
  80e188:	dd400a15 	stw	r21,40(sp)
  80e18c:	dcc00815 	stw	r19,32(sp)
  80e190:	dc800715 	stw	r18,28(sp)
  80e194:	dc400615 	stw	r17,24(sp)
  80e198:	3021883a 	mov	r16,r6
  80e19c:	202d883a 	mov	r22,r4
  80e1a0:	2829883a 	mov	r20,r5
  80e1a4:	38002b1e 	bne	r7,zero,80e254 <__umoddi3+0xe8>
  80e1a8:	29805036 	bltu	r5,r6,80e2ec <__umoddi3+0x180>
  80e1ac:	30008a26 	beq	r6,zero,80e3d8 <__umoddi3+0x26c>
  80e1b0:	00bfffd4 	movui	r2,65535
  80e1b4:	14008236 	bltu	r2,r16,80e3c0 <__umoddi3+0x254>
  80e1b8:	00803fc4 	movi	r2,255
  80e1bc:	14013636 	bltu	r2,r16,80e698 <__umoddi3+0x52c>
  80e1c0:	000b883a 	mov	r5,zero
  80e1c4:	0005883a 	mov	r2,zero
  80e1c8:	8084d83a 	srl	r2,r16,r2
  80e1cc:	01002074 	movhi	r4,129
  80e1d0:	21145a04 	addi	r4,r4,20840
  80e1d4:	01800804 	movi	r6,32
  80e1d8:	1105883a 	add	r2,r2,r4
  80e1dc:	10c00003 	ldbu	r3,0(r2)
  80e1e0:	28c7883a 	add	r3,r5,r3
  80e1e4:	30efc83a 	sub	r23,r6,r3
  80e1e8:	b800941e 	bne	r23,zero,80e43c <__umoddi3+0x2d0>
  80e1ec:	802ad43a 	srli	r21,r16,16
  80e1f0:	a423c83a 	sub	r17,r20,r16
  80e1f4:	0039883a 	mov	fp,zero
  80e1f8:	853fffcc 	andi	r20,r16,65535
  80e1fc:	8809883a 	mov	r4,r17
  80e200:	a80b883a 	mov	r5,r21
  80e204:	080fbe80 	call	80fbe8 <__udivsi3>
  80e208:	8809883a 	mov	r4,r17
  80e20c:	a80b883a 	mov	r5,r21
  80e210:	a0a3383a 	mul	r17,r20,r2
  80e214:	080fbf00 	call	80fbf0 <__umodsi3>
  80e218:	1004943a 	slli	r2,r2,16
  80e21c:	b006d43a 	srli	r3,r22,16
  80e220:	10c4b03a 	or	r2,r2,r3
  80e224:	1440032e 	bgeu	r2,r17,80e234 <__umoddi3+0xc8>
  80e228:	1405883a 	add	r2,r2,r16
  80e22c:	14000136 	bltu	r2,r16,80e234 <__umoddi3+0xc8>
  80e230:	14413536 	bltu	r2,r17,80e708 <__umoddi3+0x59c>
  80e234:	1463c83a 	sub	r17,r2,r17
  80e238:	8809883a 	mov	r4,r17
  80e23c:	a80b883a 	mov	r5,r21
  80e240:	080fbe80 	call	80fbe8 <__udivsi3>
  80e244:	8809883a 	mov	r4,r17
  80e248:	a0a3383a 	mul	r17,r20,r2
  80e24c:	a80b883a 	mov	r5,r21
  80e250:	00004d06 	br	80e388 <__umoddi3+0x21c>
  80e254:	380d883a 	mov	r6,r7
  80e258:	29c0102e 	bgeu	r5,r7,80e29c <__umoddi3+0x130>
  80e25c:	2011883a 	mov	r8,r4
  80e260:	2813883a 	mov	r9,r5
  80e264:	4005883a 	mov	r2,r8
  80e268:	4807883a 	mov	r3,r9
  80e26c:	dfc00e17 	ldw	ra,56(sp)
  80e270:	df000d17 	ldw	fp,52(sp)
  80e274:	ddc00c17 	ldw	r23,48(sp)
  80e278:	dd800b17 	ldw	r22,44(sp)
  80e27c:	dd400a17 	ldw	r21,40(sp)
  80e280:	dd000917 	ldw	r20,36(sp)
  80e284:	dcc00817 	ldw	r19,32(sp)
  80e288:	dc800717 	ldw	r18,28(sp)
  80e28c:	dc400617 	ldw	r17,24(sp)
  80e290:	dc000517 	ldw	r16,20(sp)
  80e294:	dec00f04 	addi	sp,sp,60
  80e298:	f800283a 	ret
  80e29c:	00bfffd4 	movui	r2,65535
  80e2a0:	11c05a36 	bltu	r2,r7,80e40c <__umoddi3+0x2a0>
  80e2a4:	00803fc4 	movi	r2,255
  80e2a8:	11c0fe36 	bltu	r2,r7,80e6a4 <__umoddi3+0x538>
  80e2ac:	000b883a 	mov	r5,zero
  80e2b0:	0005883a 	mov	r2,zero
  80e2b4:	3084d83a 	srl	r2,r6,r2
  80e2b8:	01002074 	movhi	r4,129
  80e2bc:	21145a04 	addi	r4,r4,20840
  80e2c0:	01c00804 	movi	r7,32
  80e2c4:	1105883a 	add	r2,r2,r4
  80e2c8:	10c00003 	ldbu	r3,0(r2)
  80e2cc:	28c7883a 	add	r3,r5,r3
  80e2d0:	38ebc83a 	sub	r21,r7,r3
  80e2d4:	a800851e 	bne	r21,zero,80e4ec <__umoddi3+0x380>
  80e2d8:	35005236 	bltu	r6,r20,80e424 <__umoddi3+0x2b8>
  80e2dc:	b400512e 	bgeu	r22,r16,80e424 <__umoddi3+0x2b8>
  80e2e0:	b011883a 	mov	r8,r22
  80e2e4:	a013883a 	mov	r9,r20
  80e2e8:	003fde06 	br	80e264 <__umoddi3+0xf8>
  80e2ec:	00bfffd4 	movui	r2,65535
  80e2f0:	11804036 	bltu	r2,r6,80e3f4 <__umoddi3+0x288>
  80e2f4:	00803fc4 	movi	r2,255
  80e2f8:	1180ed36 	bltu	r2,r6,80e6b0 <__umoddi3+0x544>
  80e2fc:	000b883a 	mov	r5,zero
  80e300:	0005883a 	mov	r2,zero
  80e304:	8084d83a 	srl	r2,r16,r2
  80e308:	01002074 	movhi	r4,129
  80e30c:	21145a04 	addi	r4,r4,20840
  80e310:	01800804 	movi	r6,32
  80e314:	1105883a 	add	r2,r2,r4
  80e318:	10c00003 	ldbu	r3,0(r2)
  80e31c:	28c7883a 	add	r3,r5,r3
  80e320:	30c7c83a 	sub	r3,r6,r3
  80e324:	1800bf1e 	bne	r3,zero,80e624 <__umoddi3+0x4b8>
  80e328:	0039883a 	mov	fp,zero
  80e32c:	802ad43a 	srli	r21,r16,16
  80e330:	a009883a 	mov	r4,r20
  80e334:	85ffffcc 	andi	r23,r16,65535
  80e338:	a80b883a 	mov	r5,r21
  80e33c:	080fbe80 	call	80fbe8 <__udivsi3>
  80e340:	a009883a 	mov	r4,r20
  80e344:	a80b883a 	mov	r5,r21
  80e348:	b8a3383a 	mul	r17,r23,r2
  80e34c:	080fbf00 	call	80fbf0 <__umodsi3>
  80e350:	1004943a 	slli	r2,r2,16
  80e354:	b006d43a 	srli	r3,r22,16
  80e358:	10c4b03a 	or	r2,r2,r3
  80e35c:	1440032e 	bgeu	r2,r17,80e36c <__umoddi3+0x200>
  80e360:	1405883a 	add	r2,r2,r16
  80e364:	14000136 	bltu	r2,r16,80e36c <__umoddi3+0x200>
  80e368:	1440e536 	bltu	r2,r17,80e700 <__umoddi3+0x594>
  80e36c:	1463c83a 	sub	r17,r2,r17
  80e370:	8809883a 	mov	r4,r17
  80e374:	a80b883a 	mov	r5,r21
  80e378:	080fbe80 	call	80fbe8 <__udivsi3>
  80e37c:	8809883a 	mov	r4,r17
  80e380:	b8a3383a 	mul	r17,r23,r2
  80e384:	a80b883a 	mov	r5,r21
  80e388:	080fbf00 	call	80fbf0 <__umodsi3>
  80e38c:	1004943a 	slli	r2,r2,16
  80e390:	b0ffffcc 	andi	r3,r22,65535
  80e394:	10c4b03a 	or	r2,r2,r3
  80e398:	1440042e 	bgeu	r2,r17,80e3ac <__umoddi3+0x240>
  80e39c:	1405883a 	add	r2,r2,r16
  80e3a0:	14000236 	bltu	r2,r16,80e3ac <__umoddi3+0x240>
  80e3a4:	1440012e 	bgeu	r2,r17,80e3ac <__umoddi3+0x240>
  80e3a8:	1405883a 	add	r2,r2,r16
  80e3ac:	1445c83a 	sub	r2,r2,r17
  80e3b0:	1724d83a 	srl	r18,r2,fp
  80e3b4:	0013883a 	mov	r9,zero
  80e3b8:	9011883a 	mov	r8,r18
  80e3bc:	003fa906 	br	80e264 <__umoddi3+0xf8>
  80e3c0:	00804034 	movhi	r2,256
  80e3c4:	10bfffc4 	addi	r2,r2,-1
  80e3c8:	1400b036 	bltu	r2,r16,80e68c <__umoddi3+0x520>
  80e3cc:	01400404 	movi	r5,16
  80e3d0:	2805883a 	mov	r2,r5
  80e3d4:	003f7c06 	br	80e1c8 <__umoddi3+0x5c>
  80e3d8:	01000044 	movi	r4,1
  80e3dc:	000b883a 	mov	r5,zero
  80e3e0:	080fbe80 	call	80fbe8 <__udivsi3>
  80e3e4:	1021883a 	mov	r16,r2
  80e3e8:	00bfffd4 	movui	r2,65535
  80e3ec:	143ff436 	bltu	r2,r16,80e3c0 <__umoddi3+0x254>
  80e3f0:	003f7106 	br	80e1b8 <__umoddi3+0x4c>
  80e3f4:	00804034 	movhi	r2,256
  80e3f8:	10bfffc4 	addi	r2,r2,-1
  80e3fc:	1180af36 	bltu	r2,r6,80e6bc <__umoddi3+0x550>
  80e400:	01400404 	movi	r5,16
  80e404:	2805883a 	mov	r2,r5
  80e408:	003fbe06 	br	80e304 <__umoddi3+0x198>
  80e40c:	00804034 	movhi	r2,256
  80e410:	10bfffc4 	addi	r2,r2,-1
  80e414:	11c0ac36 	bltu	r2,r7,80e6c8 <__umoddi3+0x55c>
  80e418:	01400404 	movi	r5,16
  80e41c:	2805883a 	mov	r2,r5
  80e420:	003fa406 	br	80e2b4 <__umoddi3+0x148>
  80e424:	b409c83a 	sub	r4,r22,r16
  80e428:	b105803a 	cmpltu	r2,r22,r4
  80e42c:	a187c83a 	sub	r3,r20,r6
  80e430:	18a9c83a 	sub	r20,r3,r2
  80e434:	202d883a 	mov	r22,r4
  80e438:	003fa906 	br	80e2e0 <__umoddi3+0x174>
  80e43c:	85e0983a 	sll	r16,r16,r23
  80e440:	35c5c83a 	sub	r2,r6,r23
  80e444:	a0a2d83a 	srl	r17,r20,r2
  80e448:	802ad43a 	srli	r21,r16,16
  80e44c:	b084d83a 	srl	r2,r22,r2
  80e450:	a5c6983a 	sll	r3,r20,r23
  80e454:	8809883a 	mov	r4,r17
  80e458:	a80b883a 	mov	r5,r21
  80e45c:	1886b03a 	or	r3,r3,r2
  80e460:	d8c00115 	stw	r3,4(sp)
  80e464:	853fffcc 	andi	r20,r16,65535
  80e468:	080fbe80 	call	80fbe8 <__udivsi3>
  80e46c:	8809883a 	mov	r4,r17
  80e470:	a80b883a 	mov	r5,r21
  80e474:	a0a3383a 	mul	r17,r20,r2
  80e478:	080fbf00 	call	80fbf0 <__umodsi3>
  80e47c:	d9000117 	ldw	r4,4(sp)
  80e480:	1004943a 	slli	r2,r2,16
  80e484:	b839883a 	mov	fp,r23
  80e488:	2006d43a 	srli	r3,r4,16
  80e48c:	10c4b03a 	or	r2,r2,r3
  80e490:	1440022e 	bgeu	r2,r17,80e49c <__umoddi3+0x330>
  80e494:	1405883a 	add	r2,r2,r16
  80e498:	1400962e 	bgeu	r2,r16,80e6f4 <__umoddi3+0x588>
  80e49c:	1463c83a 	sub	r17,r2,r17
  80e4a0:	8809883a 	mov	r4,r17
  80e4a4:	a80b883a 	mov	r5,r21
  80e4a8:	080fbe80 	call	80fbe8 <__udivsi3>
  80e4ac:	8809883a 	mov	r4,r17
  80e4b0:	a80b883a 	mov	r5,r21
  80e4b4:	a0a3383a 	mul	r17,r20,r2
  80e4b8:	080fbf00 	call	80fbf0 <__umodsi3>
  80e4bc:	d9400117 	ldw	r5,4(sp)
  80e4c0:	1004943a 	slli	r2,r2,16
  80e4c4:	28ffffcc 	andi	r3,r5,65535
  80e4c8:	10c4b03a 	or	r2,r2,r3
  80e4cc:	1440042e 	bgeu	r2,r17,80e4e0 <__umoddi3+0x374>
  80e4d0:	1405883a 	add	r2,r2,r16
  80e4d4:	14000236 	bltu	r2,r16,80e4e0 <__umoddi3+0x374>
  80e4d8:	1440012e 	bgeu	r2,r17,80e4e0 <__umoddi3+0x374>
  80e4dc:	1405883a 	add	r2,r2,r16
  80e4e0:	b5ec983a 	sll	r22,r22,r23
  80e4e4:	1463c83a 	sub	r17,r2,r17
  80e4e8:	003f4406 	br	80e1fc <__umoddi3+0x90>
  80e4ec:	3d4fc83a 	sub	r7,r7,r21
  80e4f0:	3546983a 	sll	r3,r6,r21
  80e4f4:	81c4d83a 	srl	r2,r16,r7
  80e4f8:	a1e2d83a 	srl	r17,r20,r7
  80e4fc:	a54c983a 	sll	r6,r20,r21
  80e500:	18aeb03a 	or	r23,r3,r2
  80e504:	b828d43a 	srli	r20,r23,16
  80e508:	b1c4d83a 	srl	r2,r22,r7
  80e50c:	8809883a 	mov	r4,r17
  80e510:	a00b883a 	mov	r5,r20
  80e514:	308cb03a 	or	r6,r6,r2
  80e518:	d9c00315 	stw	r7,12(sp)
  80e51c:	d9800215 	stw	r6,8(sp)
  80e520:	080fbe80 	call	80fbe8 <__udivsi3>
  80e524:	8809883a 	mov	r4,r17
  80e528:	a00b883a 	mov	r5,r20
  80e52c:	1039883a 	mov	fp,r2
  80e530:	080fbf00 	call	80fbf0 <__umodsi3>
  80e534:	b8ffffcc 	andi	r3,r23,65535
  80e538:	d8c00415 	stw	r3,16(sp)
  80e53c:	d9000217 	ldw	r4,8(sp)
  80e540:	d9400417 	ldw	r5,16(sp)
  80e544:	1004943a 	slli	r2,r2,16
  80e548:	2006d43a 	srli	r3,r4,16
  80e54c:	8560983a 	sll	r16,r16,r21
  80e550:	2f23383a 	mul	r17,r5,fp
  80e554:	10c4b03a 	or	r2,r2,r3
  80e558:	dc000015 	stw	r16,0(sp)
  80e55c:	b56c983a 	sll	r22,r22,r21
  80e560:	1440032e 	bgeu	r2,r17,80e570 <__umoddi3+0x404>
  80e564:	15c5883a 	add	r2,r2,r23
  80e568:	e73fffc4 	addi	fp,fp,-1
  80e56c:	15c05d2e 	bgeu	r2,r23,80e6e4 <__umoddi3+0x578>
  80e570:	1463c83a 	sub	r17,r2,r17
  80e574:	8809883a 	mov	r4,r17
  80e578:	a00b883a 	mov	r5,r20
  80e57c:	080fbe80 	call	80fbe8 <__udivsi3>
  80e580:	8809883a 	mov	r4,r17
  80e584:	a00b883a 	mov	r5,r20
  80e588:	1021883a 	mov	r16,r2
  80e58c:	080fbf00 	call	80fbf0 <__umodsi3>
  80e590:	d8c00417 	ldw	r3,16(sp)
  80e594:	d9000217 	ldw	r4,8(sp)
  80e598:	1004943a 	slli	r2,r2,16
  80e59c:	1c23383a 	mul	r17,r3,r16
  80e5a0:	20ffffcc 	andi	r3,r4,65535
  80e5a4:	10ceb03a 	or	r7,r2,r3
  80e5a8:	3c40032e 	bgeu	r7,r17,80e5b8 <__umoddi3+0x44c>
  80e5ac:	3dcf883a 	add	r7,r7,r23
  80e5b0:	843fffc4 	addi	r16,r16,-1
  80e5b4:	3dc0472e 	bgeu	r7,r23,80e6d4 <__umoddi3+0x568>
  80e5b8:	e004943a 	slli	r2,fp,16
  80e5bc:	d9400017 	ldw	r5,0(sp)
  80e5c0:	3c4fc83a 	sub	r7,r7,r17
  80e5c4:	8084b03a 	or	r2,r16,r2
  80e5c8:	28ffffcc 	andi	r3,r5,65535
  80e5cc:	280cd43a 	srli	r6,r5,16
  80e5d0:	100ad43a 	srli	r5,r2,16
  80e5d4:	10bfffcc 	andi	r2,r2,65535
  80e5d8:	10d1383a 	mul	r8,r2,r3
  80e5dc:	28c7383a 	mul	r3,r5,r3
  80e5e0:	1185383a 	mul	r2,r2,r6
  80e5e4:	4008d43a 	srli	r4,r8,16
  80e5e8:	298b383a 	mul	r5,r5,r6
  80e5ec:	10c5883a 	add	r2,r2,r3
  80e5f0:	2089883a 	add	r4,r4,r2
  80e5f4:	20c0022e 	bgeu	r4,r3,80e600 <__umoddi3+0x494>
  80e5f8:	00800074 	movhi	r2,1
  80e5fc:	288b883a 	add	r5,r5,r2
  80e600:	2004d43a 	srli	r2,r4,16
  80e604:	2008943a 	slli	r4,r4,16
  80e608:	40ffffcc 	andi	r3,r8,65535
  80e60c:	288b883a 	add	r5,r5,r2
  80e610:	20c9883a 	add	r4,r4,r3
  80e614:	39400b36 	bltu	r7,r5,80e644 <__umoddi3+0x4d8>
  80e618:	39403d26 	beq	r7,r5,80e710 <__umoddi3+0x5a4>
  80e61c:	394bc83a 	sub	r5,r7,r5
  80e620:	00000f06 	br	80e660 <__umoddi3+0x4f4>
  80e624:	30c5c83a 	sub	r2,r6,r3
  80e628:	1839883a 	mov	fp,r3
  80e62c:	b084d83a 	srl	r2,r22,r2
  80e630:	a0c6983a 	sll	r3,r20,r3
  80e634:	8720983a 	sll	r16,r16,fp
  80e638:	b72c983a 	sll	r22,r22,fp
  80e63c:	18a8b03a 	or	r20,r3,r2
  80e640:	003f3a06 	br	80e32c <__umoddi3+0x1c0>
  80e644:	d8c00017 	ldw	r3,0(sp)
  80e648:	20c5c83a 	sub	r2,r4,r3
  80e64c:	2089803a 	cmpltu	r4,r4,r2
  80e650:	2dc7c83a 	sub	r3,r5,r23
  80e654:	1907c83a 	sub	r3,r3,r4
  80e658:	38cbc83a 	sub	r5,r7,r3
  80e65c:	1009883a 	mov	r4,r2
  80e660:	b105c83a 	sub	r2,r22,r4
  80e664:	b087803a 	cmpltu	r3,r22,r2
  80e668:	28c7c83a 	sub	r3,r5,r3
  80e66c:	d9400317 	ldw	r5,12(sp)
  80e670:	1544d83a 	srl	r2,r2,r21
  80e674:	1948983a 	sll	r4,r3,r5
  80e678:	1d46d83a 	srl	r3,r3,r21
  80e67c:	20a4b03a 	or	r18,r4,r2
  80e680:	9011883a 	mov	r8,r18
  80e684:	1813883a 	mov	r9,r3
  80e688:	003ef606 	br	80e264 <__umoddi3+0xf8>
  80e68c:	01400604 	movi	r5,24
  80e690:	2805883a 	mov	r2,r5
  80e694:	003ecc06 	br	80e1c8 <__umoddi3+0x5c>
  80e698:	01400204 	movi	r5,8
  80e69c:	2805883a 	mov	r2,r5
  80e6a0:	003ec906 	br	80e1c8 <__umoddi3+0x5c>
  80e6a4:	01400204 	movi	r5,8
  80e6a8:	2805883a 	mov	r2,r5
  80e6ac:	003f0106 	br	80e2b4 <__umoddi3+0x148>
  80e6b0:	01400204 	movi	r5,8
  80e6b4:	2805883a 	mov	r2,r5
  80e6b8:	003f1206 	br	80e304 <__umoddi3+0x198>
  80e6bc:	01400604 	movi	r5,24
  80e6c0:	2805883a 	mov	r2,r5
  80e6c4:	003f0f06 	br	80e304 <__umoddi3+0x198>
  80e6c8:	01400604 	movi	r5,24
  80e6cc:	2805883a 	mov	r2,r5
  80e6d0:	003ef806 	br	80e2b4 <__umoddi3+0x148>
  80e6d4:	3c7fb82e 	bgeu	r7,r17,80e5b8 <__umoddi3+0x44c>
  80e6d8:	843fffc4 	addi	r16,r16,-1
  80e6dc:	3dcf883a 	add	r7,r7,r23
  80e6e0:	003fb506 	br	80e5b8 <__umoddi3+0x44c>
  80e6e4:	147fa22e 	bgeu	r2,r17,80e570 <__umoddi3+0x404>
  80e6e8:	e73fffc4 	addi	fp,fp,-1
  80e6ec:	15c5883a 	add	r2,r2,r23
  80e6f0:	003f9f06 	br	80e570 <__umoddi3+0x404>
  80e6f4:	147f692e 	bgeu	r2,r17,80e49c <__umoddi3+0x330>
  80e6f8:	1405883a 	add	r2,r2,r16
  80e6fc:	003f6706 	br	80e49c <__umoddi3+0x330>
  80e700:	1405883a 	add	r2,r2,r16
  80e704:	003f1906 	br	80e36c <__umoddi3+0x200>
  80e708:	1405883a 	add	r2,r2,r16
  80e70c:	003ec906 	br	80e234 <__umoddi3+0xc8>
  80e710:	b13fcc36 	bltu	r22,r4,80e644 <__umoddi3+0x4d8>
  80e714:	000b883a 	mov	r5,zero
  80e718:	003fd106 	br	80e660 <__umoddi3+0x4f4>

0080e71c <__nesf2>:
  80e71c:	defff304 	addi	sp,sp,-52
  80e720:	dc400b15 	stw	r17,44(sp)
  80e724:	dc400204 	addi	r17,sp,8
  80e728:	dc000a15 	stw	r16,40(sp)
  80e72c:	d9000015 	stw	r4,0(sp)
  80e730:	d9400115 	stw	r5,4(sp)
  80e734:	d809883a 	mov	r4,sp
  80e738:	880b883a 	mov	r5,r17
  80e73c:	dc000604 	addi	r16,sp,24
  80e740:	dfc00c15 	stw	ra,48(sp)
  80e744:	080fc780 	call	80fc78 <__unpack_f>
  80e748:	d9000104 	addi	r4,sp,4
  80e74c:	800b883a 	mov	r5,r16
  80e750:	080fc780 	call	80fc78 <__unpack_f>
  80e754:	d8800217 	ldw	r2,8(sp)
  80e758:	00c00044 	movi	r3,1
  80e75c:	180d883a 	mov	r6,r3
  80e760:	1880062e 	bgeu	r3,r2,80e77c <__nesf2+0x60>
  80e764:	d8800617 	ldw	r2,24(sp)
  80e768:	8809883a 	mov	r4,r17
  80e76c:	800b883a 	mov	r5,r16
  80e770:	1880022e 	bgeu	r3,r2,80e77c <__nesf2+0x60>
  80e774:	080fd400 	call	80fd40 <__fpcmp_parts_f>
  80e778:	100d883a 	mov	r6,r2
  80e77c:	3005883a 	mov	r2,r6
  80e780:	dfc00c17 	ldw	ra,48(sp)
  80e784:	dc400b17 	ldw	r17,44(sp)
  80e788:	dc000a17 	ldw	r16,40(sp)
  80e78c:	dec00d04 	addi	sp,sp,52
  80e790:	f800283a 	ret

0080e794 <__gtsf2>:
  80e794:	defff304 	addi	sp,sp,-52
  80e798:	dc400b15 	stw	r17,44(sp)
  80e79c:	dc400204 	addi	r17,sp,8
  80e7a0:	dc000a15 	stw	r16,40(sp)
  80e7a4:	d9000015 	stw	r4,0(sp)
  80e7a8:	d9400115 	stw	r5,4(sp)
  80e7ac:	d809883a 	mov	r4,sp
  80e7b0:	880b883a 	mov	r5,r17
  80e7b4:	dc000604 	addi	r16,sp,24
  80e7b8:	dfc00c15 	stw	ra,48(sp)
  80e7bc:	080fc780 	call	80fc78 <__unpack_f>
  80e7c0:	d9000104 	addi	r4,sp,4
  80e7c4:	800b883a 	mov	r5,r16
  80e7c8:	080fc780 	call	80fc78 <__unpack_f>
  80e7cc:	d8800217 	ldw	r2,8(sp)
  80e7d0:	00c00044 	movi	r3,1
  80e7d4:	01bfffc4 	movi	r6,-1
  80e7d8:	1880062e 	bgeu	r3,r2,80e7f4 <__gtsf2+0x60>
  80e7dc:	d8800617 	ldw	r2,24(sp)
  80e7e0:	8809883a 	mov	r4,r17
  80e7e4:	800b883a 	mov	r5,r16
  80e7e8:	1880022e 	bgeu	r3,r2,80e7f4 <__gtsf2+0x60>
  80e7ec:	080fd400 	call	80fd40 <__fpcmp_parts_f>
  80e7f0:	100d883a 	mov	r6,r2
  80e7f4:	3005883a 	mov	r2,r6
  80e7f8:	dfc00c17 	ldw	ra,48(sp)
  80e7fc:	dc400b17 	ldw	r17,44(sp)
  80e800:	dc000a17 	ldw	r16,40(sp)
  80e804:	dec00d04 	addi	sp,sp,52
  80e808:	f800283a 	ret

0080e80c <__ltsf2>:
  80e80c:	defff304 	addi	sp,sp,-52
  80e810:	dc400b15 	stw	r17,44(sp)
  80e814:	dc400204 	addi	r17,sp,8
  80e818:	dc000a15 	stw	r16,40(sp)
  80e81c:	d9000015 	stw	r4,0(sp)
  80e820:	d9400115 	stw	r5,4(sp)
  80e824:	d809883a 	mov	r4,sp
  80e828:	880b883a 	mov	r5,r17
  80e82c:	dc000604 	addi	r16,sp,24
  80e830:	dfc00c15 	stw	ra,48(sp)
  80e834:	080fc780 	call	80fc78 <__unpack_f>
  80e838:	d9000104 	addi	r4,sp,4
  80e83c:	800b883a 	mov	r5,r16
  80e840:	080fc780 	call	80fc78 <__unpack_f>
  80e844:	d8800217 	ldw	r2,8(sp)
  80e848:	00c00044 	movi	r3,1
  80e84c:	180d883a 	mov	r6,r3
  80e850:	1880062e 	bgeu	r3,r2,80e86c <__ltsf2+0x60>
  80e854:	d8800617 	ldw	r2,24(sp)
  80e858:	8809883a 	mov	r4,r17
  80e85c:	800b883a 	mov	r5,r16
  80e860:	1880022e 	bgeu	r3,r2,80e86c <__ltsf2+0x60>
  80e864:	080fd400 	call	80fd40 <__fpcmp_parts_f>
  80e868:	100d883a 	mov	r6,r2
  80e86c:	3005883a 	mov	r2,r6
  80e870:	dfc00c17 	ldw	ra,48(sp)
  80e874:	dc400b17 	ldw	r17,44(sp)
  80e878:	dc000a17 	ldw	r16,40(sp)
  80e87c:	dec00d04 	addi	sp,sp,52
  80e880:	f800283a 	ret

0080e884 <_fpadd_parts>:
  80e884:	defff804 	addi	sp,sp,-32
  80e888:	dcc00315 	stw	r19,12(sp)
  80e88c:	2027883a 	mov	r19,r4
  80e890:	21000017 	ldw	r4,0(r4)
  80e894:	00c00044 	movi	r3,1
  80e898:	dd400515 	stw	r21,20(sp)
  80e89c:	dd000415 	stw	r20,16(sp)
  80e8a0:	ddc00715 	stw	r23,28(sp)
  80e8a4:	dd800615 	stw	r22,24(sp)
  80e8a8:	dc800215 	stw	r18,8(sp)
  80e8ac:	dc400115 	stw	r17,4(sp)
  80e8b0:	dc000015 	stw	r16,0(sp)
  80e8b4:	282b883a 	mov	r21,r5
  80e8b8:	3029883a 	mov	r20,r6
  80e8bc:	1900632e 	bgeu	r3,r4,80ea4c <_fpadd_parts+0x1c8>
  80e8c0:	28800017 	ldw	r2,0(r5)
  80e8c4:	1880812e 	bgeu	r3,r2,80eacc <_fpadd_parts+0x248>
  80e8c8:	00c00104 	movi	r3,4
  80e8cc:	20c0dc26 	beq	r4,r3,80ec40 <_fpadd_parts+0x3bc>
  80e8d0:	10c07e26 	beq	r2,r3,80eacc <_fpadd_parts+0x248>
  80e8d4:	00c00084 	movi	r3,2
  80e8d8:	10c06726 	beq	r2,r3,80ea78 <_fpadd_parts+0x1f4>
  80e8dc:	20c07b26 	beq	r4,r3,80eacc <_fpadd_parts+0x248>
  80e8e0:	9dc00217 	ldw	r23,8(r19)
  80e8e4:	28c00217 	ldw	r3,8(r5)
  80e8e8:	9c400317 	ldw	r17,12(r19)
  80e8ec:	2bc00317 	ldw	r15,12(r5)
  80e8f0:	b8cdc83a 	sub	r6,r23,r3
  80e8f4:	9c800417 	ldw	r18,16(r19)
  80e8f8:	2c000417 	ldw	r16,16(r5)
  80e8fc:	3009883a 	mov	r4,r6
  80e900:	30009716 	blt	r6,zero,80eb60 <_fpadd_parts+0x2dc>
  80e904:	00800fc4 	movi	r2,63
  80e908:	11806b16 	blt	r2,r6,80eab8 <_fpadd_parts+0x234>
  80e90c:	0100a40e 	bge	zero,r4,80eba0 <_fpadd_parts+0x31c>
  80e910:	35bff804 	addi	r22,r6,-32
  80e914:	b000bc16 	blt	r22,zero,80ec08 <_fpadd_parts+0x384>
  80e918:	8596d83a 	srl	r11,r16,r22
  80e91c:	0019883a 	mov	r12,zero
  80e920:	0013883a 	mov	r9,zero
  80e924:	01000044 	movi	r4,1
  80e928:	0015883a 	mov	r10,zero
  80e92c:	b000be16 	blt	r22,zero,80ec28 <_fpadd_parts+0x3a4>
  80e930:	2590983a 	sll	r8,r4,r22
  80e934:	000f883a 	mov	r7,zero
  80e938:	00bfffc4 	movi	r2,-1
  80e93c:	3889883a 	add	r4,r7,r2
  80e940:	408b883a 	add	r5,r8,r2
  80e944:	21cd803a 	cmpltu	r6,r4,r7
  80e948:	314b883a 	add	r5,r6,r5
  80e94c:	7904703a 	and	r2,r15,r4
  80e950:	8146703a 	and	r3,r16,r5
  80e954:	10c4b03a 	or	r2,r2,r3
  80e958:	10000226 	beq	r2,zero,80e964 <_fpadd_parts+0xe0>
  80e95c:	02400044 	movi	r9,1
  80e960:	0015883a 	mov	r10,zero
  80e964:	5a5eb03a 	or	r15,r11,r9
  80e968:	62a0b03a 	or	r16,r12,r10
  80e96c:	99400117 	ldw	r5,4(r19)
  80e970:	a8800117 	ldw	r2,4(r21)
  80e974:	28806e26 	beq	r5,r2,80eb30 <_fpadd_parts+0x2ac>
  80e978:	28006626 	beq	r5,zero,80eb14 <_fpadd_parts+0x290>
  80e97c:	7c45c83a 	sub	r2,r15,r17
  80e980:	7889803a 	cmpltu	r4,r15,r2
  80e984:	8487c83a 	sub	r3,r16,r18
  80e988:	1909c83a 	sub	r4,r3,r4
  80e98c:	100d883a 	mov	r6,r2
  80e990:	200f883a 	mov	r7,r4
  80e994:	38007716 	blt	r7,zero,80eb74 <_fpadd_parts+0x2f0>
  80e998:	a5c00215 	stw	r23,8(r20)
  80e99c:	a1c00415 	stw	r7,16(r20)
  80e9a0:	a0000115 	stw	zero,4(r20)
  80e9a4:	a1800315 	stw	r6,12(r20)
  80e9a8:	a2000317 	ldw	r8,12(r20)
  80e9ac:	a2400417 	ldw	r9,16(r20)
  80e9b0:	00bfffc4 	movi	r2,-1
  80e9b4:	408b883a 	add	r5,r8,r2
  80e9b8:	2a09803a 	cmpltu	r4,r5,r8
  80e9bc:	488d883a 	add	r6,r9,r2
  80e9c0:	01c40034 	movhi	r7,4096
  80e9c4:	39ffffc4 	addi	r7,r7,-1
  80e9c8:	218d883a 	add	r6,r4,r6
  80e9cc:	39801736 	bltu	r7,r6,80ea2c <_fpadd_parts+0x1a8>
  80e9d0:	31c06526 	beq	r6,r7,80eb68 <_fpadd_parts+0x2e4>
  80e9d4:	a3000217 	ldw	r12,8(r20)
  80e9d8:	4209883a 	add	r4,r8,r8
  80e9dc:	00bfffc4 	movi	r2,-1
  80e9e0:	220f803a 	cmpltu	r7,r4,r8
  80e9e4:	4a4b883a 	add	r5,r9,r9
  80e9e8:	394f883a 	add	r7,r7,r5
  80e9ec:	2095883a 	add	r10,r4,r2
  80e9f0:	3897883a 	add	r11,r7,r2
  80e9f4:	510d803a 	cmpltu	r6,r10,r4
  80e9f8:	6099883a 	add	r12,r12,r2
  80e9fc:	32d7883a 	add	r11,r6,r11
  80ea00:	00840034 	movhi	r2,4096
  80ea04:	10bfffc4 	addi	r2,r2,-1
  80ea08:	2011883a 	mov	r8,r4
  80ea0c:	3813883a 	mov	r9,r7
  80ea10:	a1000315 	stw	r4,12(r20)
  80ea14:	a1c00415 	stw	r7,16(r20)
  80ea18:	a3000215 	stw	r12,8(r20)
  80ea1c:	12c00336 	bltu	r2,r11,80ea2c <_fpadd_parts+0x1a8>
  80ea20:	58bfed1e 	bne	r11,r2,80e9d8 <_fpadd_parts+0x154>
  80ea24:	00bfff84 	movi	r2,-2
  80ea28:	12bfeb2e 	bgeu	r2,r10,80e9d8 <_fpadd_parts+0x154>
  80ea2c:	a2800417 	ldw	r10,16(r20)
  80ea30:	008000c4 	movi	r2,3
  80ea34:	00c80034 	movhi	r3,8192
  80ea38:	18ffffc4 	addi	r3,r3,-1
  80ea3c:	a2400317 	ldw	r9,12(r20)
  80ea40:	a0800015 	stw	r2,0(r20)
  80ea44:	1a802336 	bltu	r3,r10,80ead4 <_fpadd_parts+0x250>
  80ea48:	a027883a 	mov	r19,r20
  80ea4c:	9805883a 	mov	r2,r19
  80ea50:	ddc00717 	ldw	r23,28(sp)
  80ea54:	dd800617 	ldw	r22,24(sp)
  80ea58:	dd400517 	ldw	r21,20(sp)
  80ea5c:	dd000417 	ldw	r20,16(sp)
  80ea60:	dcc00317 	ldw	r19,12(sp)
  80ea64:	dc800217 	ldw	r18,8(sp)
  80ea68:	dc400117 	ldw	r17,4(sp)
  80ea6c:	dc000017 	ldw	r16,0(sp)
  80ea70:	dec00804 	addi	sp,sp,32
  80ea74:	f800283a 	ret
  80ea78:	20fff41e 	bne	r4,r3,80ea4c <_fpadd_parts+0x1c8>
  80ea7c:	31000015 	stw	r4,0(r6)
  80ea80:	98800117 	ldw	r2,4(r19)
  80ea84:	30800115 	stw	r2,4(r6)
  80ea88:	98c00217 	ldw	r3,8(r19)
  80ea8c:	30c00215 	stw	r3,8(r6)
  80ea90:	98800317 	ldw	r2,12(r19)
  80ea94:	30800315 	stw	r2,12(r6)
  80ea98:	98c00417 	ldw	r3,16(r19)
  80ea9c:	30c00415 	stw	r3,16(r6)
  80eaa0:	98800117 	ldw	r2,4(r19)
  80eaa4:	28c00117 	ldw	r3,4(r5)
  80eaa8:	3027883a 	mov	r19,r6
  80eaac:	10c4703a 	and	r2,r2,r3
  80eab0:	30800115 	stw	r2,4(r6)
  80eab4:	003fe506 	br	80ea4c <_fpadd_parts+0x1c8>
  80eab8:	1dc02616 	blt	r3,r23,80eb54 <_fpadd_parts+0x2d0>
  80eabc:	0023883a 	mov	r17,zero
  80eac0:	182f883a 	mov	r23,r3
  80eac4:	0025883a 	mov	r18,zero
  80eac8:	003fa806 	br	80e96c <_fpadd_parts+0xe8>
  80eacc:	a827883a 	mov	r19,r21
  80ead0:	003fde06 	br	80ea4c <_fpadd_parts+0x1c8>
  80ead4:	01800044 	movi	r6,1
  80ead8:	500497fa 	slli	r2,r10,31
  80eadc:	4808d07a 	srli	r4,r9,1
  80eae0:	518ad83a 	srl	r5,r10,r6
  80eae4:	a2000217 	ldw	r8,8(r20)
  80eae8:	1108b03a 	or	r4,r2,r4
  80eaec:	0007883a 	mov	r3,zero
  80eaf0:	4984703a 	and	r2,r9,r6
  80eaf4:	208cb03a 	or	r6,r4,r2
  80eaf8:	28ceb03a 	or	r7,r5,r3
  80eafc:	42000044 	addi	r8,r8,1
  80eb00:	a027883a 	mov	r19,r20
  80eb04:	a1c00415 	stw	r7,16(r20)
  80eb08:	a2000215 	stw	r8,8(r20)
  80eb0c:	a1800315 	stw	r6,12(r20)
  80eb10:	003fce06 	br	80ea4c <_fpadd_parts+0x1c8>
  80eb14:	8bc5c83a 	sub	r2,r17,r15
  80eb18:	8889803a 	cmpltu	r4,r17,r2
  80eb1c:	9407c83a 	sub	r3,r18,r16
  80eb20:	1909c83a 	sub	r4,r3,r4
  80eb24:	100d883a 	mov	r6,r2
  80eb28:	200f883a 	mov	r7,r4
  80eb2c:	003f9906 	br	80e994 <_fpadd_parts+0x110>
  80eb30:	7c45883a 	add	r2,r15,r17
  80eb34:	13c9803a 	cmpltu	r4,r2,r15
  80eb38:	8487883a 	add	r3,r16,r18
  80eb3c:	20c9883a 	add	r4,r4,r3
  80eb40:	a1400115 	stw	r5,4(r20)
  80eb44:	a5c00215 	stw	r23,8(r20)
  80eb48:	a0800315 	stw	r2,12(r20)
  80eb4c:	a1000415 	stw	r4,16(r20)
  80eb50:	003fb606 	br	80ea2c <_fpadd_parts+0x1a8>
  80eb54:	001f883a 	mov	r15,zero
  80eb58:	0021883a 	mov	r16,zero
  80eb5c:	003f8306 	br	80e96c <_fpadd_parts+0xe8>
  80eb60:	018dc83a 	sub	r6,zero,r6
  80eb64:	003f6706 	br	80e904 <_fpadd_parts+0x80>
  80eb68:	00bfff84 	movi	r2,-2
  80eb6c:	117faf36 	bltu	r2,r5,80ea2c <_fpadd_parts+0x1a8>
  80eb70:	003f9806 	br	80e9d4 <_fpadd_parts+0x150>
  80eb74:	0005883a 	mov	r2,zero
  80eb78:	1189c83a 	sub	r4,r2,r6
  80eb7c:	1105803a 	cmpltu	r2,r2,r4
  80eb80:	01cbc83a 	sub	r5,zero,r7
  80eb84:	2885c83a 	sub	r2,r5,r2
  80eb88:	01800044 	movi	r6,1
  80eb8c:	a1800115 	stw	r6,4(r20)
  80eb90:	a5c00215 	stw	r23,8(r20)
  80eb94:	a1000315 	stw	r4,12(r20)
  80eb98:	a0800415 	stw	r2,16(r20)
  80eb9c:	003f8206 	br	80e9a8 <_fpadd_parts+0x124>
  80eba0:	203f7226 	beq	r4,zero,80e96c <_fpadd_parts+0xe8>
  80eba4:	35bff804 	addi	r22,r6,-32
  80eba8:	b9af883a 	add	r23,r23,r6
  80ebac:	b0003116 	blt	r22,zero,80ec74 <_fpadd_parts+0x3f0>
  80ebb0:	959ad83a 	srl	r13,r18,r22
  80ebb4:	001d883a 	mov	r14,zero
  80ebb8:	000f883a 	mov	r7,zero
  80ebbc:	01000044 	movi	r4,1
  80ebc0:	0011883a 	mov	r8,zero
  80ebc4:	b0002516 	blt	r22,zero,80ec5c <_fpadd_parts+0x3d8>
  80ebc8:	2594983a 	sll	r10,r4,r22
  80ebcc:	0013883a 	mov	r9,zero
  80ebd0:	00bfffc4 	movi	r2,-1
  80ebd4:	4889883a 	add	r4,r9,r2
  80ebd8:	508b883a 	add	r5,r10,r2
  80ebdc:	224d803a 	cmpltu	r6,r4,r9
  80ebe0:	314b883a 	add	r5,r6,r5
  80ebe4:	8904703a 	and	r2,r17,r4
  80ebe8:	9146703a 	and	r3,r18,r5
  80ebec:	10c4b03a 	or	r2,r2,r3
  80ebf0:	10000226 	beq	r2,zero,80ebfc <_fpadd_parts+0x378>
  80ebf4:	01c00044 	movi	r7,1
  80ebf8:	0011883a 	mov	r8,zero
  80ebfc:	69e2b03a 	or	r17,r13,r7
  80ec00:	7224b03a 	or	r18,r14,r8
  80ec04:	003f5906 	br	80e96c <_fpadd_parts+0xe8>
  80ec08:	8407883a 	add	r3,r16,r16
  80ec0c:	008007c4 	movi	r2,31
  80ec10:	1185c83a 	sub	r2,r2,r6
  80ec14:	1886983a 	sll	r3,r3,r2
  80ec18:	7996d83a 	srl	r11,r15,r6
  80ec1c:	8198d83a 	srl	r12,r16,r6
  80ec20:	1ad6b03a 	or	r11,r3,r11
  80ec24:	003f3e06 	br	80e920 <_fpadd_parts+0x9c>
  80ec28:	2006d07a 	srli	r3,r4,1
  80ec2c:	008007c4 	movi	r2,31
  80ec30:	1185c83a 	sub	r2,r2,r6
  80ec34:	1890d83a 	srl	r8,r3,r2
  80ec38:	218e983a 	sll	r7,r4,r6
  80ec3c:	003f3e06 	br	80e938 <_fpadd_parts+0xb4>
  80ec40:	113f821e 	bne	r2,r4,80ea4c <_fpadd_parts+0x1c8>
  80ec44:	28c00117 	ldw	r3,4(r5)
  80ec48:	98800117 	ldw	r2,4(r19)
  80ec4c:	10ff7f26 	beq	r2,r3,80ea4c <_fpadd_parts+0x1c8>
  80ec50:	04c02074 	movhi	r19,129
  80ec54:	9cd45504 	addi	r19,r19,20820
  80ec58:	003f7c06 	br	80ea4c <_fpadd_parts+0x1c8>
  80ec5c:	2006d07a 	srli	r3,r4,1
  80ec60:	008007c4 	movi	r2,31
  80ec64:	1185c83a 	sub	r2,r2,r6
  80ec68:	1894d83a 	srl	r10,r3,r2
  80ec6c:	2192983a 	sll	r9,r4,r6
  80ec70:	003fd706 	br	80ebd0 <_fpadd_parts+0x34c>
  80ec74:	9487883a 	add	r3,r18,r18
  80ec78:	008007c4 	movi	r2,31
  80ec7c:	1185c83a 	sub	r2,r2,r6
  80ec80:	1886983a 	sll	r3,r3,r2
  80ec84:	899ad83a 	srl	r13,r17,r6
  80ec88:	919cd83a 	srl	r14,r18,r6
  80ec8c:	1b5ab03a 	or	r13,r3,r13
  80ec90:	003fc906 	br	80ebb8 <_fpadd_parts+0x334>

0080ec94 <__subdf3>:
  80ec94:	deffea04 	addi	sp,sp,-88
  80ec98:	dcc01415 	stw	r19,80(sp)
  80ec9c:	dcc00404 	addi	r19,sp,16
  80eca0:	2011883a 	mov	r8,r4
  80eca4:	2813883a 	mov	r9,r5
  80eca8:	dc401315 	stw	r17,76(sp)
  80ecac:	d809883a 	mov	r4,sp
  80ecb0:	980b883a 	mov	r5,r19
  80ecb4:	dc400904 	addi	r17,sp,36
  80ecb8:	dfc01515 	stw	ra,84(sp)
  80ecbc:	da400115 	stw	r9,4(sp)
  80ecc0:	d9c00315 	stw	r7,12(sp)
  80ecc4:	da000015 	stw	r8,0(sp)
  80ecc8:	d9800215 	stw	r6,8(sp)
  80eccc:	08101280 	call	810128 <__unpack_d>
  80ecd0:	d9000204 	addi	r4,sp,8
  80ecd4:	880b883a 	mov	r5,r17
  80ecd8:	08101280 	call	810128 <__unpack_d>
  80ecdc:	d8800a17 	ldw	r2,40(sp)
  80ece0:	880b883a 	mov	r5,r17
  80ece4:	9809883a 	mov	r4,r19
  80ece8:	d9800e04 	addi	r6,sp,56
  80ecec:	1080005c 	xori	r2,r2,1
  80ecf0:	d8800a15 	stw	r2,40(sp)
  80ecf4:	080e8840 	call	80e884 <_fpadd_parts>
  80ecf8:	1009883a 	mov	r4,r2
  80ecfc:	080fe140 	call	80fe14 <__pack_d>
  80ed00:	dfc01517 	ldw	ra,84(sp)
  80ed04:	dcc01417 	ldw	r19,80(sp)
  80ed08:	dc401317 	ldw	r17,76(sp)
  80ed0c:	dec01604 	addi	sp,sp,88
  80ed10:	f800283a 	ret

0080ed14 <__adddf3>:
  80ed14:	deffea04 	addi	sp,sp,-88
  80ed18:	dcc01415 	stw	r19,80(sp)
  80ed1c:	dcc00404 	addi	r19,sp,16
  80ed20:	2011883a 	mov	r8,r4
  80ed24:	2813883a 	mov	r9,r5
  80ed28:	dc401315 	stw	r17,76(sp)
  80ed2c:	d809883a 	mov	r4,sp
  80ed30:	980b883a 	mov	r5,r19
  80ed34:	dc400904 	addi	r17,sp,36
  80ed38:	dfc01515 	stw	ra,84(sp)
  80ed3c:	da400115 	stw	r9,4(sp)
  80ed40:	d9c00315 	stw	r7,12(sp)
  80ed44:	da000015 	stw	r8,0(sp)
  80ed48:	d9800215 	stw	r6,8(sp)
  80ed4c:	08101280 	call	810128 <__unpack_d>
  80ed50:	d9000204 	addi	r4,sp,8
  80ed54:	880b883a 	mov	r5,r17
  80ed58:	08101280 	call	810128 <__unpack_d>
  80ed5c:	d9800e04 	addi	r6,sp,56
  80ed60:	9809883a 	mov	r4,r19
  80ed64:	880b883a 	mov	r5,r17
  80ed68:	080e8840 	call	80e884 <_fpadd_parts>
  80ed6c:	1009883a 	mov	r4,r2
  80ed70:	080fe140 	call	80fe14 <__pack_d>
  80ed74:	dfc01517 	ldw	ra,84(sp)
  80ed78:	dcc01417 	ldw	r19,80(sp)
  80ed7c:	dc401317 	ldw	r17,76(sp)
  80ed80:	dec01604 	addi	sp,sp,88
  80ed84:	f800283a 	ret

0080ed88 <__muldf3>:
  80ed88:	deffe004 	addi	sp,sp,-128
  80ed8c:	dc401815 	stw	r17,96(sp)
  80ed90:	dc400404 	addi	r17,sp,16
  80ed94:	2011883a 	mov	r8,r4
  80ed98:	2813883a 	mov	r9,r5
  80ed9c:	dc001715 	stw	r16,92(sp)
  80eda0:	d809883a 	mov	r4,sp
  80eda4:	880b883a 	mov	r5,r17
  80eda8:	dc000904 	addi	r16,sp,36
  80edac:	dfc01f15 	stw	ra,124(sp)
  80edb0:	da400115 	stw	r9,4(sp)
  80edb4:	d9c00315 	stw	r7,12(sp)
  80edb8:	da000015 	stw	r8,0(sp)
  80edbc:	d9800215 	stw	r6,8(sp)
  80edc0:	ddc01e15 	stw	r23,120(sp)
  80edc4:	dd801d15 	stw	r22,116(sp)
  80edc8:	dd401c15 	stw	r21,112(sp)
  80edcc:	dd001b15 	stw	r20,108(sp)
  80edd0:	dcc01a15 	stw	r19,104(sp)
  80edd4:	dc801915 	stw	r18,100(sp)
  80edd8:	08101280 	call	810128 <__unpack_d>
  80eddc:	d9000204 	addi	r4,sp,8
  80ede0:	800b883a 	mov	r5,r16
  80ede4:	08101280 	call	810128 <__unpack_d>
  80ede8:	d9000417 	ldw	r4,16(sp)
  80edec:	00800044 	movi	r2,1
  80edf0:	1100102e 	bgeu	r2,r4,80ee34 <__muldf3+0xac>
  80edf4:	d8c00917 	ldw	r3,36(sp)
  80edf8:	10c0062e 	bgeu	r2,r3,80ee14 <__muldf3+0x8c>
  80edfc:	00800104 	movi	r2,4
  80ee00:	20800a26 	beq	r4,r2,80ee2c <__muldf3+0xa4>
  80ee04:	1880cc26 	beq	r3,r2,80f138 <__muldf3+0x3b0>
  80ee08:	00800084 	movi	r2,2
  80ee0c:	20800926 	beq	r4,r2,80ee34 <__muldf3+0xac>
  80ee10:	1880191e 	bne	r3,r2,80ee78 <__muldf3+0xf0>
  80ee14:	d8c00a17 	ldw	r3,40(sp)
  80ee18:	d8800517 	ldw	r2,20(sp)
  80ee1c:	8009883a 	mov	r4,r16
  80ee20:	10c4c03a 	cmpne	r2,r2,r3
  80ee24:	d8800a15 	stw	r2,40(sp)
  80ee28:	00000706 	br	80ee48 <__muldf3+0xc0>
  80ee2c:	00800084 	movi	r2,2
  80ee30:	1880c326 	beq	r3,r2,80f140 <__muldf3+0x3b8>
  80ee34:	d8800517 	ldw	r2,20(sp)
  80ee38:	d8c00a17 	ldw	r3,40(sp)
  80ee3c:	8809883a 	mov	r4,r17
  80ee40:	10c4c03a 	cmpne	r2,r2,r3
  80ee44:	d8800515 	stw	r2,20(sp)
  80ee48:	080fe140 	call	80fe14 <__pack_d>
  80ee4c:	dfc01f17 	ldw	ra,124(sp)
  80ee50:	ddc01e17 	ldw	r23,120(sp)
  80ee54:	dd801d17 	ldw	r22,116(sp)
  80ee58:	dd401c17 	ldw	r21,112(sp)
  80ee5c:	dd001b17 	ldw	r20,108(sp)
  80ee60:	dcc01a17 	ldw	r19,104(sp)
  80ee64:	dc801917 	ldw	r18,100(sp)
  80ee68:	dc401817 	ldw	r17,96(sp)
  80ee6c:	dc001717 	ldw	r16,92(sp)
  80ee70:	dec02004 	addi	sp,sp,128
  80ee74:	f800283a 	ret
  80ee78:	dd800717 	ldw	r22,28(sp)
  80ee7c:	dc800c17 	ldw	r18,48(sp)
  80ee80:	002b883a 	mov	r21,zero
  80ee84:	0023883a 	mov	r17,zero
  80ee88:	a80b883a 	mov	r5,r21
  80ee8c:	b00d883a 	mov	r6,r22
  80ee90:	880f883a 	mov	r7,r17
  80ee94:	ddc00817 	ldw	r23,32(sp)
  80ee98:	dcc00d17 	ldw	r19,52(sp)
  80ee9c:	9009883a 	mov	r4,r18
  80eea0:	080da540 	call	80da54 <__muldi3>
  80eea4:	001b883a 	mov	r13,zero
  80eea8:	680f883a 	mov	r7,r13
  80eeac:	b009883a 	mov	r4,r22
  80eeb0:	000b883a 	mov	r5,zero
  80eeb4:	980d883a 	mov	r6,r19
  80eeb8:	b82d883a 	mov	r22,r23
  80eebc:	002f883a 	mov	r23,zero
  80eec0:	db401615 	stw	r13,88(sp)
  80eec4:	d8801315 	stw	r2,76(sp)
  80eec8:	d8c01415 	stw	r3,80(sp)
  80eecc:	dcc01515 	stw	r19,84(sp)
  80eed0:	080da540 	call	80da54 <__muldi3>
  80eed4:	b00d883a 	mov	r6,r22
  80eed8:	000b883a 	mov	r5,zero
  80eedc:	9009883a 	mov	r4,r18
  80eee0:	b80f883a 	mov	r7,r23
  80eee4:	1021883a 	mov	r16,r2
  80eee8:	1823883a 	mov	r17,r3
  80eeec:	080da540 	call	80da54 <__muldi3>
  80eef0:	8085883a 	add	r2,r16,r2
  80eef4:	140d803a 	cmpltu	r6,r2,r16
  80eef8:	88c7883a 	add	r3,r17,r3
  80eefc:	30cd883a 	add	r6,r6,r3
  80ef00:	1029883a 	mov	r20,r2
  80ef04:	302b883a 	mov	r21,r6
  80ef08:	da801317 	ldw	r10,76(sp)
  80ef0c:	dac01417 	ldw	r11,80(sp)
  80ef10:	db001517 	ldw	r12,84(sp)
  80ef14:	db401617 	ldw	r13,88(sp)
  80ef18:	3440612e 	bgeu	r6,r17,80f0a0 <__muldf3+0x318>
  80ef1c:	0009883a 	mov	r4,zero
  80ef20:	5105883a 	add	r2,r10,r4
  80ef24:	128d803a 	cmpltu	r6,r2,r10
  80ef28:	5d07883a 	add	r3,r11,r20
  80ef2c:	30cd883a 	add	r6,r6,r3
  80ef30:	0021883a 	mov	r16,zero
  80ef34:	04400044 	movi	r17,1
  80ef38:	1025883a 	mov	r18,r2
  80ef3c:	3027883a 	mov	r19,r6
  80ef40:	32c06236 	bltu	r6,r11,80f0cc <__muldf3+0x344>
  80ef44:	59807a26 	beq	r11,r6,80f130 <__muldf3+0x3a8>
  80ef48:	680b883a 	mov	r5,r13
  80ef4c:	b80f883a 	mov	r7,r23
  80ef50:	6009883a 	mov	r4,r12
  80ef54:	b00d883a 	mov	r6,r22
  80ef58:	080da540 	call	80da54 <__muldi3>
  80ef5c:	1009883a 	mov	r4,r2
  80ef60:	000f883a 	mov	r7,zero
  80ef64:	1545883a 	add	r2,r2,r21
  80ef68:	1111803a 	cmpltu	r8,r2,r4
  80ef6c:	19c7883a 	add	r3,r3,r7
  80ef70:	40c7883a 	add	r3,r8,r3
  80ef74:	88cb883a 	add	r5,r17,r3
  80ef78:	d8c00617 	ldw	r3,24(sp)
  80ef7c:	8089883a 	add	r4,r16,r2
  80ef80:	d8800b17 	ldw	r2,44(sp)
  80ef84:	18c00104 	addi	r3,r3,4
  80ef88:	240d803a 	cmpltu	r6,r4,r16
  80ef8c:	10c7883a 	add	r3,r2,r3
  80ef90:	2013883a 	mov	r9,r4
  80ef94:	d8800a17 	ldw	r2,40(sp)
  80ef98:	d9000517 	ldw	r4,20(sp)
  80ef9c:	314d883a 	add	r6,r6,r5
  80efa0:	3015883a 	mov	r10,r6
  80efa4:	2088c03a 	cmpne	r4,r4,r2
  80efa8:	00880034 	movhi	r2,8192
  80efac:	10bfffc4 	addi	r2,r2,-1
  80efb0:	d9000f15 	stw	r4,60(sp)
  80efb4:	d8c01015 	stw	r3,64(sp)
  80efb8:	1180162e 	bgeu	r2,r6,80f014 <__muldf3+0x28c>
  80efbc:	1811883a 	mov	r8,r3
  80efc0:	101f883a 	mov	r15,r2
  80efc4:	980497fa 	slli	r2,r19,31
  80efc8:	9016d07a 	srli	r11,r18,1
  80efcc:	500697fa 	slli	r3,r10,31
  80efd0:	480cd07a 	srli	r6,r9,1
  80efd4:	500ed07a 	srli	r7,r10,1
  80efd8:	12d6b03a 	or	r11,r2,r11
  80efdc:	00800044 	movi	r2,1
  80efe0:	198cb03a 	or	r6,r3,r6
  80efe4:	4888703a 	and	r4,r9,r2
  80efe8:	9818d07a 	srli	r12,r19,1
  80efec:	001b883a 	mov	r13,zero
  80eff0:	03a00034 	movhi	r14,32768
  80eff4:	3013883a 	mov	r9,r6
  80eff8:	3815883a 	mov	r10,r7
  80effc:	4091883a 	add	r8,r8,r2
  80f000:	20000226 	beq	r4,zero,80f00c <__muldf3+0x284>
  80f004:	5b64b03a 	or	r18,r11,r13
  80f008:	63a6b03a 	or	r19,r12,r14
  80f00c:	7abfed36 	bltu	r15,r10,80efc4 <__muldf3+0x23c>
  80f010:	da001015 	stw	r8,64(sp)
  80f014:	00840034 	movhi	r2,4096
  80f018:	10bfffc4 	addi	r2,r2,-1
  80f01c:	12801436 	bltu	r2,r10,80f070 <__muldf3+0x2e8>
  80f020:	da001017 	ldw	r8,64(sp)
  80f024:	101f883a 	mov	r15,r2
  80f028:	4a45883a 	add	r2,r9,r9
  80f02c:	124d803a 	cmpltu	r6,r2,r9
  80f030:	5287883a 	add	r3,r10,r10
  80f034:	9497883a 	add	r11,r18,r18
  80f038:	5c8f803a 	cmpltu	r7,r11,r18
  80f03c:	9cd9883a 	add	r12,r19,r19
  80f040:	01000044 	movi	r4,1
  80f044:	30cd883a 	add	r6,r6,r3
  80f048:	3b0f883a 	add	r7,r7,r12
  80f04c:	423fffc4 	addi	r8,r8,-1
  80f050:	1013883a 	mov	r9,r2
  80f054:	3015883a 	mov	r10,r6
  80f058:	111ab03a 	or	r13,r2,r4
  80f05c:	98003016 	blt	r19,zero,80f120 <__muldf3+0x398>
  80f060:	5825883a 	mov	r18,r11
  80f064:	3827883a 	mov	r19,r7
  80f068:	7abfef2e 	bgeu	r15,r10,80f028 <__muldf3+0x2a0>
  80f06c:	da001015 	stw	r8,64(sp)
  80f070:	00803fc4 	movi	r2,255
  80f074:	488e703a 	and	r7,r9,r2
  80f078:	00802004 	movi	r2,128
  80f07c:	0007883a 	mov	r3,zero
  80f080:	0011883a 	mov	r8,zero
  80f084:	38801826 	beq	r7,r2,80f0e8 <__muldf3+0x360>
  80f088:	008000c4 	movi	r2,3
  80f08c:	d9000e04 	addi	r4,sp,56
  80f090:	da801215 	stw	r10,72(sp)
  80f094:	d8800e15 	stw	r2,56(sp)
  80f098:	da401115 	stw	r9,68(sp)
  80f09c:	003f6a06 	br	80ee48 <__muldf3+0xc0>
  80f0a0:	89802126 	beq	r17,r6,80f128 <__muldf3+0x3a0>
  80f0a4:	0009883a 	mov	r4,zero
  80f0a8:	5105883a 	add	r2,r10,r4
  80f0ac:	128d803a 	cmpltu	r6,r2,r10
  80f0b0:	5d07883a 	add	r3,r11,r20
  80f0b4:	30cd883a 	add	r6,r6,r3
  80f0b8:	0021883a 	mov	r16,zero
  80f0bc:	0023883a 	mov	r17,zero
  80f0c0:	1025883a 	mov	r18,r2
  80f0c4:	3027883a 	mov	r19,r6
  80f0c8:	32ff9e2e 	bgeu	r6,r11,80ef44 <__muldf3+0x1bc>
  80f0cc:	00800044 	movi	r2,1
  80f0d0:	8089883a 	add	r4,r16,r2
  80f0d4:	240d803a 	cmpltu	r6,r4,r16
  80f0d8:	344d883a 	add	r6,r6,r17
  80f0dc:	2021883a 	mov	r16,r4
  80f0e0:	3023883a 	mov	r17,r6
  80f0e4:	003f9806 	br	80ef48 <__muldf3+0x1c0>
  80f0e8:	403fe71e 	bne	r8,zero,80f088 <__muldf3+0x300>
  80f0ec:	01004004 	movi	r4,256
  80f0f0:	4904703a 	and	r2,r9,r4
  80f0f4:	10c4b03a 	or	r2,r2,r3
  80f0f8:	103fe31e 	bne	r2,zero,80f088 <__muldf3+0x300>
  80f0fc:	94c4b03a 	or	r2,r18,r19
  80f100:	103fe126 	beq	r2,zero,80f088 <__muldf3+0x300>
  80f104:	49c5883a 	add	r2,r9,r7
  80f108:	1251803a 	cmpltu	r8,r2,r9
  80f10c:	4291883a 	add	r8,r8,r10
  80f110:	013fc004 	movi	r4,-256
  80f114:	1112703a 	and	r9,r2,r4
  80f118:	4015883a 	mov	r10,r8
  80f11c:	003fda06 	br	80f088 <__muldf3+0x300>
  80f120:	6813883a 	mov	r9,r13
  80f124:	003fce06 	br	80f060 <__muldf3+0x2d8>
  80f128:	143f7c36 	bltu	r2,r16,80ef1c <__muldf3+0x194>
  80f12c:	003fdd06 	br	80f0a4 <__muldf3+0x31c>
  80f130:	12bf852e 	bgeu	r2,r10,80ef48 <__muldf3+0x1c0>
  80f134:	003fe506 	br	80f0cc <__muldf3+0x344>
  80f138:	00800084 	movi	r2,2
  80f13c:	20bf351e 	bne	r4,r2,80ee14 <__muldf3+0x8c>
  80f140:	01002074 	movhi	r4,129
  80f144:	21145504 	addi	r4,r4,20820
  80f148:	003f3f06 	br	80ee48 <__muldf3+0xc0>

0080f14c <__divdf3>:
  80f14c:	deffed04 	addi	sp,sp,-76
  80f150:	dcc01115 	stw	r19,68(sp)
  80f154:	dcc00404 	addi	r19,sp,16
  80f158:	2011883a 	mov	r8,r4
  80f15c:	2813883a 	mov	r9,r5
  80f160:	dc000e15 	stw	r16,56(sp)
  80f164:	d809883a 	mov	r4,sp
  80f168:	980b883a 	mov	r5,r19
  80f16c:	dc000904 	addi	r16,sp,36
  80f170:	dfc01215 	stw	ra,72(sp)
  80f174:	da400115 	stw	r9,4(sp)
  80f178:	d9c00315 	stw	r7,12(sp)
  80f17c:	da000015 	stw	r8,0(sp)
  80f180:	d9800215 	stw	r6,8(sp)
  80f184:	dc801015 	stw	r18,64(sp)
  80f188:	dc400f15 	stw	r17,60(sp)
  80f18c:	08101280 	call	810128 <__unpack_d>
  80f190:	d9000204 	addi	r4,sp,8
  80f194:	800b883a 	mov	r5,r16
  80f198:	08101280 	call	810128 <__unpack_d>
  80f19c:	d9000417 	ldw	r4,16(sp)
  80f1a0:	00800044 	movi	r2,1
  80f1a4:	11000b2e 	bgeu	r2,r4,80f1d4 <__divdf3+0x88>
  80f1a8:	d9400917 	ldw	r5,36(sp)
  80f1ac:	1140762e 	bgeu	r2,r5,80f388 <__divdf3+0x23c>
  80f1b0:	d8800517 	ldw	r2,20(sp)
  80f1b4:	d8c00a17 	ldw	r3,40(sp)
  80f1b8:	01800104 	movi	r6,4
  80f1bc:	10c4f03a 	xor	r2,r2,r3
  80f1c0:	d8800515 	stw	r2,20(sp)
  80f1c4:	21800226 	beq	r4,r6,80f1d0 <__divdf3+0x84>
  80f1c8:	00800084 	movi	r2,2
  80f1cc:	2080141e 	bne	r4,r2,80f220 <__divdf3+0xd4>
  80f1d0:	29000926 	beq	r5,r4,80f1f8 <__divdf3+0xac>
  80f1d4:	9809883a 	mov	r4,r19
  80f1d8:	080fe140 	call	80fe14 <__pack_d>
  80f1dc:	dfc01217 	ldw	ra,72(sp)
  80f1e0:	dcc01117 	ldw	r19,68(sp)
  80f1e4:	dc801017 	ldw	r18,64(sp)
  80f1e8:	dc400f17 	ldw	r17,60(sp)
  80f1ec:	dc000e17 	ldw	r16,56(sp)
  80f1f0:	dec01304 	addi	sp,sp,76
  80f1f4:	f800283a 	ret
  80f1f8:	01002074 	movhi	r4,129
  80f1fc:	21145504 	addi	r4,r4,20820
  80f200:	080fe140 	call	80fe14 <__pack_d>
  80f204:	dfc01217 	ldw	ra,72(sp)
  80f208:	dcc01117 	ldw	r19,68(sp)
  80f20c:	dc801017 	ldw	r18,64(sp)
  80f210:	dc400f17 	ldw	r17,60(sp)
  80f214:	dc000e17 	ldw	r16,56(sp)
  80f218:	dec01304 	addi	sp,sp,76
  80f21c:	f800283a 	ret
  80f220:	29805b26 	beq	r5,r6,80f390 <__divdf3+0x244>
  80f224:	28802d26 	beq	r5,r2,80f2dc <__divdf3+0x190>
  80f228:	d8c00617 	ldw	r3,24(sp)
  80f22c:	d8800b17 	ldw	r2,44(sp)
  80f230:	d9c00817 	ldw	r7,32(sp)
  80f234:	dc400d17 	ldw	r17,52(sp)
  80f238:	188bc83a 	sub	r5,r3,r2
  80f23c:	d9800717 	ldw	r6,28(sp)
  80f240:	dc000c17 	ldw	r16,48(sp)
  80f244:	d9400615 	stw	r5,24(sp)
  80f248:	3c403836 	bltu	r7,r17,80f32c <__divdf3+0x1e0>
  80f24c:	89c03626 	beq	r17,r7,80f328 <__divdf3+0x1dc>
  80f250:	0015883a 	mov	r10,zero
  80f254:	001d883a 	mov	r14,zero
  80f258:	02c40034 	movhi	r11,4096
  80f25c:	001f883a 	mov	r15,zero
  80f260:	003f883a 	mov	ra,zero
  80f264:	04800f44 	movi	r18,61
  80f268:	00000f06 	br	80f2a8 <__divdf3+0x15c>
  80f26c:	601d883a 	mov	r14,r12
  80f270:	681f883a 	mov	r15,r13
  80f274:	400d883a 	mov	r6,r8
  80f278:	100f883a 	mov	r7,r2
  80f27c:	3191883a 	add	r8,r6,r6
  80f280:	5808d07a 	srli	r4,r11,1
  80f284:	4185803a 	cmpltu	r2,r8,r6
  80f288:	39d3883a 	add	r9,r7,r7
  80f28c:	28c6b03a 	or	r3,r5,r3
  80f290:	1245883a 	add	r2,r2,r9
  80f294:	1815883a 	mov	r10,r3
  80f298:	2017883a 	mov	r11,r4
  80f29c:	400d883a 	mov	r6,r8
  80f2a0:	100f883a 	mov	r7,r2
  80f2a4:	fc801726 	beq	ra,r18,80f304 <__divdf3+0x1b8>
  80f2a8:	580a97fa 	slli	r5,r11,31
  80f2ac:	5006d07a 	srli	r3,r10,1
  80f2b0:	ffc00044 	addi	ra,ra,1
  80f2b4:	3c7ff136 	bltu	r7,r17,80f27c <__divdf3+0x130>
  80f2b8:	3411c83a 	sub	r8,r6,r16
  80f2bc:	3205803a 	cmpltu	r2,r6,r8
  80f2c0:	3c53c83a 	sub	r9,r7,r17
  80f2c4:	7298b03a 	or	r12,r14,r10
  80f2c8:	7adab03a 	or	r13,r15,r11
  80f2cc:	4885c83a 	sub	r2,r9,r2
  80f2d0:	89ffe61e 	bne	r17,r7,80f26c <__divdf3+0x120>
  80f2d4:	343fe936 	bltu	r6,r16,80f27c <__divdf3+0x130>
  80f2d8:	003fe406 	br	80f26c <__divdf3+0x120>
  80f2dc:	9809883a 	mov	r4,r19
  80f2e0:	d9800415 	stw	r6,16(sp)
  80f2e4:	080fe140 	call	80fe14 <__pack_d>
  80f2e8:	dfc01217 	ldw	ra,72(sp)
  80f2ec:	dcc01117 	ldw	r19,68(sp)
  80f2f0:	dc801017 	ldw	r18,64(sp)
  80f2f4:	dc400f17 	ldw	r17,60(sp)
  80f2f8:	dc000e17 	ldw	r16,56(sp)
  80f2fc:	dec01304 	addi	sp,sp,76
  80f300:	f800283a 	ret
  80f304:	00803fc4 	movi	r2,255
  80f308:	7090703a 	and	r8,r14,r2
  80f30c:	00802004 	movi	r2,128
  80f310:	0007883a 	mov	r3,zero
  80f314:	0013883a 	mov	r9,zero
  80f318:	40800d26 	beq	r8,r2,80f350 <__divdf3+0x204>
  80f31c:	dbc00815 	stw	r15,32(sp)
  80f320:	db800715 	stw	r14,28(sp)
  80f324:	003fab06 	br	80f1d4 <__divdf3+0x88>
  80f328:	343fc92e 	bgeu	r6,r16,80f250 <__divdf3+0x104>
  80f32c:	3185883a 	add	r2,r6,r6
  80f330:	1189803a 	cmpltu	r4,r2,r6
  80f334:	39c7883a 	add	r3,r7,r7
  80f338:	20c9883a 	add	r4,r4,r3
  80f33c:	297fffc4 	addi	r5,r5,-1
  80f340:	100d883a 	mov	r6,r2
  80f344:	200f883a 	mov	r7,r4
  80f348:	d9400615 	stw	r5,24(sp)
  80f34c:	003fc006 	br	80f250 <__divdf3+0x104>
  80f350:	483ff21e 	bne	r9,zero,80f31c <__divdf3+0x1d0>
  80f354:	01004004 	movi	r4,256
  80f358:	7104703a 	and	r2,r14,r4
  80f35c:	10c4b03a 	or	r2,r2,r3
  80f360:	103fee1e 	bne	r2,zero,80f31c <__divdf3+0x1d0>
  80f364:	31c4b03a 	or	r2,r6,r7
  80f368:	103fec26 	beq	r2,zero,80f31c <__divdf3+0x1d0>
  80f36c:	7205883a 	add	r2,r14,r8
  80f370:	1391803a 	cmpltu	r8,r2,r14
  80f374:	43d1883a 	add	r8,r8,r15
  80f378:	013fc004 	movi	r4,-256
  80f37c:	111c703a 	and	r14,r2,r4
  80f380:	401f883a 	mov	r15,r8
  80f384:	003fe506 	br	80f31c <__divdf3+0x1d0>
  80f388:	8009883a 	mov	r4,r16
  80f38c:	003f9206 	br	80f1d8 <__divdf3+0x8c>
  80f390:	9809883a 	mov	r4,r19
  80f394:	d8000715 	stw	zero,28(sp)
  80f398:	d8000815 	stw	zero,32(sp)
  80f39c:	d8000615 	stw	zero,24(sp)
  80f3a0:	003f8d06 	br	80f1d8 <__divdf3+0x8c>

0080f3a4 <__eqdf2>:
  80f3a4:	deffef04 	addi	sp,sp,-68
  80f3a8:	dc400f15 	stw	r17,60(sp)
  80f3ac:	dc400404 	addi	r17,sp,16
  80f3b0:	2005883a 	mov	r2,r4
  80f3b4:	2807883a 	mov	r3,r5
  80f3b8:	dc000e15 	stw	r16,56(sp)
  80f3bc:	d809883a 	mov	r4,sp
  80f3c0:	880b883a 	mov	r5,r17
  80f3c4:	dc000904 	addi	r16,sp,36
  80f3c8:	d8c00115 	stw	r3,4(sp)
  80f3cc:	d8800015 	stw	r2,0(sp)
  80f3d0:	d9800215 	stw	r6,8(sp)
  80f3d4:	dfc01015 	stw	ra,64(sp)
  80f3d8:	d9c00315 	stw	r7,12(sp)
  80f3dc:	08101280 	call	810128 <__unpack_d>
  80f3e0:	d9000204 	addi	r4,sp,8
  80f3e4:	800b883a 	mov	r5,r16
  80f3e8:	08101280 	call	810128 <__unpack_d>
  80f3ec:	d8800417 	ldw	r2,16(sp)
  80f3f0:	00c00044 	movi	r3,1
  80f3f4:	180d883a 	mov	r6,r3
  80f3f8:	1880062e 	bgeu	r3,r2,80f414 <__eqdf2+0x70>
  80f3fc:	d8800917 	ldw	r2,36(sp)
  80f400:	8809883a 	mov	r4,r17
  80f404:	800b883a 	mov	r5,r16
  80f408:	1880022e 	bgeu	r3,r2,80f414 <__eqdf2+0x70>
  80f40c:	08102600 	call	810260 <__fpcmp_parts_d>
  80f410:	100d883a 	mov	r6,r2
  80f414:	3005883a 	mov	r2,r6
  80f418:	dfc01017 	ldw	ra,64(sp)
  80f41c:	dc400f17 	ldw	r17,60(sp)
  80f420:	dc000e17 	ldw	r16,56(sp)
  80f424:	dec01104 	addi	sp,sp,68
  80f428:	f800283a 	ret

0080f42c <__nedf2>:
  80f42c:	deffef04 	addi	sp,sp,-68
  80f430:	dc400f15 	stw	r17,60(sp)
  80f434:	dc400404 	addi	r17,sp,16
  80f438:	2005883a 	mov	r2,r4
  80f43c:	2807883a 	mov	r3,r5
  80f440:	dc000e15 	stw	r16,56(sp)
  80f444:	d809883a 	mov	r4,sp
  80f448:	880b883a 	mov	r5,r17
  80f44c:	dc000904 	addi	r16,sp,36
  80f450:	d8c00115 	stw	r3,4(sp)
  80f454:	d8800015 	stw	r2,0(sp)
  80f458:	d9800215 	stw	r6,8(sp)
  80f45c:	dfc01015 	stw	ra,64(sp)
  80f460:	d9c00315 	stw	r7,12(sp)
  80f464:	08101280 	call	810128 <__unpack_d>
  80f468:	d9000204 	addi	r4,sp,8
  80f46c:	800b883a 	mov	r5,r16
  80f470:	08101280 	call	810128 <__unpack_d>
  80f474:	d8800417 	ldw	r2,16(sp)
  80f478:	00c00044 	movi	r3,1
  80f47c:	180d883a 	mov	r6,r3
  80f480:	1880062e 	bgeu	r3,r2,80f49c <__nedf2+0x70>
  80f484:	d8800917 	ldw	r2,36(sp)
  80f488:	8809883a 	mov	r4,r17
  80f48c:	800b883a 	mov	r5,r16
  80f490:	1880022e 	bgeu	r3,r2,80f49c <__nedf2+0x70>
  80f494:	08102600 	call	810260 <__fpcmp_parts_d>
  80f498:	100d883a 	mov	r6,r2
  80f49c:	3005883a 	mov	r2,r6
  80f4a0:	dfc01017 	ldw	ra,64(sp)
  80f4a4:	dc400f17 	ldw	r17,60(sp)
  80f4a8:	dc000e17 	ldw	r16,56(sp)
  80f4ac:	dec01104 	addi	sp,sp,68
  80f4b0:	f800283a 	ret

0080f4b4 <__gtdf2>:
  80f4b4:	deffef04 	addi	sp,sp,-68
  80f4b8:	dc400f15 	stw	r17,60(sp)
  80f4bc:	dc400404 	addi	r17,sp,16
  80f4c0:	2005883a 	mov	r2,r4
  80f4c4:	2807883a 	mov	r3,r5
  80f4c8:	dc000e15 	stw	r16,56(sp)
  80f4cc:	d809883a 	mov	r4,sp
  80f4d0:	880b883a 	mov	r5,r17
  80f4d4:	dc000904 	addi	r16,sp,36
  80f4d8:	d8c00115 	stw	r3,4(sp)
  80f4dc:	d8800015 	stw	r2,0(sp)
  80f4e0:	d9800215 	stw	r6,8(sp)
  80f4e4:	dfc01015 	stw	ra,64(sp)
  80f4e8:	d9c00315 	stw	r7,12(sp)
  80f4ec:	08101280 	call	810128 <__unpack_d>
  80f4f0:	d9000204 	addi	r4,sp,8
  80f4f4:	800b883a 	mov	r5,r16
  80f4f8:	08101280 	call	810128 <__unpack_d>
  80f4fc:	d8800417 	ldw	r2,16(sp)
  80f500:	00c00044 	movi	r3,1
  80f504:	01bfffc4 	movi	r6,-1
  80f508:	1880062e 	bgeu	r3,r2,80f524 <__gtdf2+0x70>
  80f50c:	d8800917 	ldw	r2,36(sp)
  80f510:	8809883a 	mov	r4,r17
  80f514:	800b883a 	mov	r5,r16
  80f518:	1880022e 	bgeu	r3,r2,80f524 <__gtdf2+0x70>
  80f51c:	08102600 	call	810260 <__fpcmp_parts_d>
  80f520:	100d883a 	mov	r6,r2
  80f524:	3005883a 	mov	r2,r6
  80f528:	dfc01017 	ldw	ra,64(sp)
  80f52c:	dc400f17 	ldw	r17,60(sp)
  80f530:	dc000e17 	ldw	r16,56(sp)
  80f534:	dec01104 	addi	sp,sp,68
  80f538:	f800283a 	ret

0080f53c <__gedf2>:
  80f53c:	deffef04 	addi	sp,sp,-68
  80f540:	dc400f15 	stw	r17,60(sp)
  80f544:	dc400404 	addi	r17,sp,16
  80f548:	2005883a 	mov	r2,r4
  80f54c:	2807883a 	mov	r3,r5
  80f550:	dc000e15 	stw	r16,56(sp)
  80f554:	d809883a 	mov	r4,sp
  80f558:	880b883a 	mov	r5,r17
  80f55c:	dc000904 	addi	r16,sp,36
  80f560:	d8c00115 	stw	r3,4(sp)
  80f564:	d8800015 	stw	r2,0(sp)
  80f568:	d9800215 	stw	r6,8(sp)
  80f56c:	dfc01015 	stw	ra,64(sp)
  80f570:	d9c00315 	stw	r7,12(sp)
  80f574:	08101280 	call	810128 <__unpack_d>
  80f578:	d9000204 	addi	r4,sp,8
  80f57c:	800b883a 	mov	r5,r16
  80f580:	08101280 	call	810128 <__unpack_d>
  80f584:	d8800417 	ldw	r2,16(sp)
  80f588:	00c00044 	movi	r3,1
  80f58c:	01bfffc4 	movi	r6,-1
  80f590:	1880062e 	bgeu	r3,r2,80f5ac <__gedf2+0x70>
  80f594:	d8800917 	ldw	r2,36(sp)
  80f598:	8809883a 	mov	r4,r17
  80f59c:	800b883a 	mov	r5,r16
  80f5a0:	1880022e 	bgeu	r3,r2,80f5ac <__gedf2+0x70>
  80f5a4:	08102600 	call	810260 <__fpcmp_parts_d>
  80f5a8:	100d883a 	mov	r6,r2
  80f5ac:	3005883a 	mov	r2,r6
  80f5b0:	dfc01017 	ldw	ra,64(sp)
  80f5b4:	dc400f17 	ldw	r17,60(sp)
  80f5b8:	dc000e17 	ldw	r16,56(sp)
  80f5bc:	dec01104 	addi	sp,sp,68
  80f5c0:	f800283a 	ret

0080f5c4 <__ltdf2>:
  80f5c4:	deffef04 	addi	sp,sp,-68
  80f5c8:	dc400f15 	stw	r17,60(sp)
  80f5cc:	dc400404 	addi	r17,sp,16
  80f5d0:	2005883a 	mov	r2,r4
  80f5d4:	2807883a 	mov	r3,r5
  80f5d8:	dc000e15 	stw	r16,56(sp)
  80f5dc:	d809883a 	mov	r4,sp
  80f5e0:	880b883a 	mov	r5,r17
  80f5e4:	dc000904 	addi	r16,sp,36
  80f5e8:	d8c00115 	stw	r3,4(sp)
  80f5ec:	d8800015 	stw	r2,0(sp)
  80f5f0:	d9800215 	stw	r6,8(sp)
  80f5f4:	dfc01015 	stw	ra,64(sp)
  80f5f8:	d9c00315 	stw	r7,12(sp)
  80f5fc:	08101280 	call	810128 <__unpack_d>
  80f600:	d9000204 	addi	r4,sp,8
  80f604:	800b883a 	mov	r5,r16
  80f608:	08101280 	call	810128 <__unpack_d>
  80f60c:	d8800417 	ldw	r2,16(sp)
  80f610:	00c00044 	movi	r3,1
  80f614:	180d883a 	mov	r6,r3
  80f618:	1880062e 	bgeu	r3,r2,80f634 <__ltdf2+0x70>
  80f61c:	d8800917 	ldw	r2,36(sp)
  80f620:	8809883a 	mov	r4,r17
  80f624:	800b883a 	mov	r5,r16
  80f628:	1880022e 	bgeu	r3,r2,80f634 <__ltdf2+0x70>
  80f62c:	08102600 	call	810260 <__fpcmp_parts_d>
  80f630:	100d883a 	mov	r6,r2
  80f634:	3005883a 	mov	r2,r6
  80f638:	dfc01017 	ldw	ra,64(sp)
  80f63c:	dc400f17 	ldw	r17,60(sp)
  80f640:	dc000e17 	ldw	r16,56(sp)
  80f644:	dec01104 	addi	sp,sp,68
  80f648:	f800283a 	ret

0080f64c <__ledf2>:
  80f64c:	deffef04 	addi	sp,sp,-68
  80f650:	dc400f15 	stw	r17,60(sp)
  80f654:	dc400404 	addi	r17,sp,16
  80f658:	2005883a 	mov	r2,r4
  80f65c:	2807883a 	mov	r3,r5
  80f660:	dc000e15 	stw	r16,56(sp)
  80f664:	d809883a 	mov	r4,sp
  80f668:	880b883a 	mov	r5,r17
  80f66c:	dc000904 	addi	r16,sp,36
  80f670:	d8c00115 	stw	r3,4(sp)
  80f674:	d8800015 	stw	r2,0(sp)
  80f678:	d9800215 	stw	r6,8(sp)
  80f67c:	dfc01015 	stw	ra,64(sp)
  80f680:	d9c00315 	stw	r7,12(sp)
  80f684:	08101280 	call	810128 <__unpack_d>
  80f688:	d9000204 	addi	r4,sp,8
  80f68c:	800b883a 	mov	r5,r16
  80f690:	08101280 	call	810128 <__unpack_d>
  80f694:	d8800417 	ldw	r2,16(sp)
  80f698:	00c00044 	movi	r3,1
  80f69c:	180d883a 	mov	r6,r3
  80f6a0:	1880062e 	bgeu	r3,r2,80f6bc <__ledf2+0x70>
  80f6a4:	d8800917 	ldw	r2,36(sp)
  80f6a8:	8809883a 	mov	r4,r17
  80f6ac:	800b883a 	mov	r5,r16
  80f6b0:	1880022e 	bgeu	r3,r2,80f6bc <__ledf2+0x70>
  80f6b4:	08102600 	call	810260 <__fpcmp_parts_d>
  80f6b8:	100d883a 	mov	r6,r2
  80f6bc:	3005883a 	mov	r2,r6
  80f6c0:	dfc01017 	ldw	ra,64(sp)
  80f6c4:	dc400f17 	ldw	r17,60(sp)
  80f6c8:	dc000e17 	ldw	r16,56(sp)
  80f6cc:	dec01104 	addi	sp,sp,68
  80f6d0:	f800283a 	ret

0080f6d4 <__floatsidf>:
  80f6d4:	2006d7fa 	srli	r3,r4,31
  80f6d8:	defff604 	addi	sp,sp,-40
  80f6dc:	008000c4 	movi	r2,3
  80f6e0:	dfc00915 	stw	ra,36(sp)
  80f6e4:	dcc00815 	stw	r19,32(sp)
  80f6e8:	dc800715 	stw	r18,28(sp)
  80f6ec:	dc400615 	stw	r17,24(sp)
  80f6f0:	dc000515 	stw	r16,20(sp)
  80f6f4:	d8800015 	stw	r2,0(sp)
  80f6f8:	d8c00115 	stw	r3,4(sp)
  80f6fc:	20000f1e 	bne	r4,zero,80f73c <__floatsidf+0x68>
  80f700:	00800084 	movi	r2,2
  80f704:	d8800015 	stw	r2,0(sp)
  80f708:	d809883a 	mov	r4,sp
  80f70c:	080fe140 	call	80fe14 <__pack_d>
  80f710:	1009883a 	mov	r4,r2
  80f714:	180b883a 	mov	r5,r3
  80f718:	2005883a 	mov	r2,r4
  80f71c:	2807883a 	mov	r3,r5
  80f720:	dfc00917 	ldw	ra,36(sp)
  80f724:	dcc00817 	ldw	r19,32(sp)
  80f728:	dc800717 	ldw	r18,28(sp)
  80f72c:	dc400617 	ldw	r17,24(sp)
  80f730:	dc000517 	ldw	r16,20(sp)
  80f734:	dec00a04 	addi	sp,sp,40
  80f738:	f800283a 	ret
  80f73c:	00800f04 	movi	r2,60
  80f740:	1807003a 	cmpeq	r3,r3,zero
  80f744:	d8800215 	stw	r2,8(sp)
  80f748:	18001126 	beq	r3,zero,80f790 <__floatsidf+0xbc>
  80f74c:	0027883a 	mov	r19,zero
  80f750:	2025883a 	mov	r18,r4
  80f754:	d9000315 	stw	r4,12(sp)
  80f758:	dcc00415 	stw	r19,16(sp)
  80f75c:	080fbf80 	call	80fbf8 <__clzsi2>
  80f760:	11000744 	addi	r4,r2,29
  80f764:	013fe80e 	bge	zero,r4,80f708 <__floatsidf+0x34>
  80f768:	10bfff44 	addi	r2,r2,-3
  80f76c:	10000c16 	blt	r2,zero,80f7a0 <__floatsidf+0xcc>
  80f770:	90a2983a 	sll	r17,r18,r2
  80f774:	0021883a 	mov	r16,zero
  80f778:	d8800217 	ldw	r2,8(sp)
  80f77c:	dc400415 	stw	r17,16(sp)
  80f780:	dc000315 	stw	r16,12(sp)
  80f784:	1105c83a 	sub	r2,r2,r4
  80f788:	d8800215 	stw	r2,8(sp)
  80f78c:	003fde06 	br	80f708 <__floatsidf+0x34>
  80f790:	00a00034 	movhi	r2,32768
  80f794:	20800a26 	beq	r4,r2,80f7c0 <__floatsidf+0xec>
  80f798:	0109c83a 	sub	r4,zero,r4
  80f79c:	003feb06 	br	80f74c <__floatsidf+0x78>
  80f7a0:	9006d07a 	srli	r3,r18,1
  80f7a4:	008007c4 	movi	r2,31
  80f7a8:	1105c83a 	sub	r2,r2,r4
  80f7ac:	1886d83a 	srl	r3,r3,r2
  80f7b0:	9922983a 	sll	r17,r19,r4
  80f7b4:	9120983a 	sll	r16,r18,r4
  80f7b8:	1c62b03a 	or	r17,r3,r17
  80f7bc:	003fee06 	br	80f778 <__floatsidf+0xa4>
  80f7c0:	0009883a 	mov	r4,zero
  80f7c4:	01707834 	movhi	r5,49632
  80f7c8:	003fd306 	br	80f718 <__floatsidf+0x44>

0080f7cc <__fixdfsi>:
  80f7cc:	defff804 	addi	sp,sp,-32
  80f7d0:	2005883a 	mov	r2,r4
  80f7d4:	2807883a 	mov	r3,r5
  80f7d8:	d809883a 	mov	r4,sp
  80f7dc:	d9400204 	addi	r5,sp,8
  80f7e0:	d8c00115 	stw	r3,4(sp)
  80f7e4:	d8800015 	stw	r2,0(sp)
  80f7e8:	dfc00715 	stw	ra,28(sp)
  80f7ec:	08101280 	call	810128 <__unpack_d>
  80f7f0:	d8c00217 	ldw	r3,8(sp)
  80f7f4:	00800084 	movi	r2,2
  80f7f8:	1880051e 	bne	r3,r2,80f810 <__fixdfsi+0x44>
  80f7fc:	0007883a 	mov	r3,zero
  80f800:	1805883a 	mov	r2,r3
  80f804:	dfc00717 	ldw	ra,28(sp)
  80f808:	dec00804 	addi	sp,sp,32
  80f80c:	f800283a 	ret
  80f810:	00800044 	movi	r2,1
  80f814:	10fff92e 	bgeu	r2,r3,80f7fc <__fixdfsi+0x30>
  80f818:	00800104 	movi	r2,4
  80f81c:	18800426 	beq	r3,r2,80f830 <__fixdfsi+0x64>
  80f820:	d8c00417 	ldw	r3,16(sp)
  80f824:	183ff516 	blt	r3,zero,80f7fc <__fixdfsi+0x30>
  80f828:	00800784 	movi	r2,30
  80f82c:	10c0080e 	bge	r2,r3,80f850 <__fixdfsi+0x84>
  80f830:	d8800317 	ldw	r2,12(sp)
  80f834:	1000121e 	bne	r2,zero,80f880 <__fixdfsi+0xb4>
  80f838:	00e00034 	movhi	r3,32768
  80f83c:	18ffffc4 	addi	r3,r3,-1
  80f840:	1805883a 	mov	r2,r3
  80f844:	dfc00717 	ldw	ra,28(sp)
  80f848:	dec00804 	addi	sp,sp,32
  80f84c:	f800283a 	ret
  80f850:	00800f04 	movi	r2,60
  80f854:	10d1c83a 	sub	r8,r2,r3
  80f858:	40bff804 	addi	r2,r8,-32
  80f85c:	d9800517 	ldw	r6,20(sp)
  80f860:	d9c00617 	ldw	r7,24(sp)
  80f864:	10000816 	blt	r2,zero,80f888 <__fixdfsi+0xbc>
  80f868:	3888d83a 	srl	r4,r7,r2
  80f86c:	d8800317 	ldw	r2,12(sp)
  80f870:	2007883a 	mov	r3,r4
  80f874:	103fe226 	beq	r2,zero,80f800 <__fixdfsi+0x34>
  80f878:	0107c83a 	sub	r3,zero,r4
  80f87c:	003fe006 	br	80f800 <__fixdfsi+0x34>
  80f880:	00e00034 	movhi	r3,32768
  80f884:	003fde06 	br	80f800 <__fixdfsi+0x34>
  80f888:	39c7883a 	add	r3,r7,r7
  80f88c:	008007c4 	movi	r2,31
  80f890:	1205c83a 	sub	r2,r2,r8
  80f894:	1886983a 	sll	r3,r3,r2
  80f898:	3208d83a 	srl	r4,r6,r8
  80f89c:	1908b03a 	or	r4,r3,r4
  80f8a0:	003ff206 	br	80f86c <__fixdfsi+0xa0>

0080f8a4 <__truncdfsf2>:
  80f8a4:	defff804 	addi	sp,sp,-32
  80f8a8:	2005883a 	mov	r2,r4
  80f8ac:	2807883a 	mov	r3,r5
  80f8b0:	d809883a 	mov	r4,sp
  80f8b4:	d9400204 	addi	r5,sp,8
  80f8b8:	d8c00115 	stw	r3,4(sp)
  80f8bc:	d8800015 	stw	r2,0(sp)
  80f8c0:	dfc00715 	stw	ra,28(sp)
  80f8c4:	08101280 	call	810128 <__unpack_d>
  80f8c8:	d9c00517 	ldw	r7,20(sp)
  80f8cc:	da000617 	ldw	r8,24(sp)
  80f8d0:	02d00034 	movhi	r11,16384
  80f8d4:	5affffc4 	addi	r11,r11,-1
  80f8d8:	3812d7ba 	srli	r9,r7,30
  80f8dc:	401a90ba 	slli	r13,r8,2
  80f8e0:	3ac4703a 	and	r2,r7,r11
  80f8e4:	0007883a 	mov	r3,zero
  80f8e8:	6a52b03a 	or	r9,r13,r9
  80f8ec:	10c4b03a 	or	r2,r2,r3
  80f8f0:	d9000217 	ldw	r4,8(sp)
  80f8f4:	d9400317 	ldw	r5,12(sp)
  80f8f8:	d9800417 	ldw	r6,16(sp)
  80f8fc:	480f883a 	mov	r7,r9
  80f900:	10000126 	beq	r2,zero,80f908 <__truncdfsf2+0x64>
  80f904:	49c00054 	ori	r7,r9,1
  80f908:	080fde80 	call	80fde8 <__make_fp>
  80f90c:	dfc00717 	ldw	ra,28(sp)
  80f910:	dec00804 	addi	sp,sp,32
  80f914:	f800283a 	ret

0080f918 <__floatunsidf>:
  80f918:	defff204 	addi	sp,sp,-56
  80f91c:	dfc00d15 	stw	ra,52(sp)
  80f920:	ddc00c15 	stw	r23,48(sp)
  80f924:	dd800b15 	stw	r22,44(sp)
  80f928:	dd400a15 	stw	r21,40(sp)
  80f92c:	dd000915 	stw	r20,36(sp)
  80f930:	dcc00815 	stw	r19,32(sp)
  80f934:	dc800715 	stw	r18,28(sp)
  80f938:	dc400615 	stw	r17,24(sp)
  80f93c:	dc000515 	stw	r16,20(sp)
  80f940:	d8000115 	stw	zero,4(sp)
  80f944:	20000f1e 	bne	r4,zero,80f984 <__floatunsidf+0x6c>
  80f948:	00800084 	movi	r2,2
  80f94c:	d8800015 	stw	r2,0(sp)
  80f950:	d809883a 	mov	r4,sp
  80f954:	080fe140 	call	80fe14 <__pack_d>
  80f958:	dfc00d17 	ldw	ra,52(sp)
  80f95c:	ddc00c17 	ldw	r23,48(sp)
  80f960:	dd800b17 	ldw	r22,44(sp)
  80f964:	dd400a17 	ldw	r21,40(sp)
  80f968:	dd000917 	ldw	r20,36(sp)
  80f96c:	dcc00817 	ldw	r19,32(sp)
  80f970:	dc800717 	ldw	r18,28(sp)
  80f974:	dc400617 	ldw	r17,24(sp)
  80f978:	dc000517 	ldw	r16,20(sp)
  80f97c:	dec00e04 	addi	sp,sp,56
  80f980:	f800283a 	ret
  80f984:	008000c4 	movi	r2,3
  80f988:	00c00f04 	movi	r3,60
  80f98c:	002f883a 	mov	r23,zero
  80f990:	202d883a 	mov	r22,r4
  80f994:	d8800015 	stw	r2,0(sp)
  80f998:	d8c00215 	stw	r3,8(sp)
  80f99c:	d9000315 	stw	r4,12(sp)
  80f9a0:	ddc00415 	stw	r23,16(sp)
  80f9a4:	080fbf80 	call	80fbf8 <__clzsi2>
  80f9a8:	12400744 	addi	r9,r2,29
  80f9ac:	48000b16 	blt	r9,zero,80f9dc <__floatunsidf+0xc4>
  80f9b0:	483fe726 	beq	r9,zero,80f950 <__floatunsidf+0x38>
  80f9b4:	10bfff44 	addi	r2,r2,-3
  80f9b8:	10002e16 	blt	r2,zero,80fa74 <__floatunsidf+0x15c>
  80f9bc:	b0a2983a 	sll	r17,r22,r2
  80f9c0:	0021883a 	mov	r16,zero
  80f9c4:	d8800217 	ldw	r2,8(sp)
  80f9c8:	dc400415 	stw	r17,16(sp)
  80f9cc:	dc000315 	stw	r16,12(sp)
  80f9d0:	1245c83a 	sub	r2,r2,r9
  80f9d4:	d8800215 	stw	r2,8(sp)
  80f9d8:	003fdd06 	br	80f950 <__floatunsidf+0x38>
  80f9dc:	0255c83a 	sub	r10,zero,r9
  80f9e0:	51bff804 	addi	r6,r10,-32
  80f9e4:	30001b16 	blt	r6,zero,80fa54 <__floatunsidf+0x13c>
  80f9e8:	b9a8d83a 	srl	r20,r23,r6
  80f9ec:	002b883a 	mov	r21,zero
  80f9f0:	000f883a 	mov	r7,zero
  80f9f4:	01000044 	movi	r4,1
  80f9f8:	0011883a 	mov	r8,zero
  80f9fc:	30002516 	blt	r6,zero,80fa94 <__floatunsidf+0x17c>
  80fa00:	21a6983a 	sll	r19,r4,r6
  80fa04:	0025883a 	mov	r18,zero
  80fa08:	00bfffc4 	movi	r2,-1
  80fa0c:	9089883a 	add	r4,r18,r2
  80fa10:	988b883a 	add	r5,r19,r2
  80fa14:	248d803a 	cmpltu	r6,r4,r18
  80fa18:	314b883a 	add	r5,r6,r5
  80fa1c:	b104703a 	and	r2,r22,r4
  80fa20:	b946703a 	and	r3,r23,r5
  80fa24:	10c4b03a 	or	r2,r2,r3
  80fa28:	10000226 	beq	r2,zero,80fa34 <__floatunsidf+0x11c>
  80fa2c:	01c00044 	movi	r7,1
  80fa30:	0011883a 	mov	r8,zero
  80fa34:	d9000217 	ldw	r4,8(sp)
  80fa38:	a1c4b03a 	or	r2,r20,r7
  80fa3c:	aa06b03a 	or	r3,r21,r8
  80fa40:	2249c83a 	sub	r4,r4,r9
  80fa44:	d8c00415 	stw	r3,16(sp)
  80fa48:	d9000215 	stw	r4,8(sp)
  80fa4c:	d8800315 	stw	r2,12(sp)
  80fa50:	003fbf06 	br	80f950 <__floatunsidf+0x38>
  80fa54:	bdc7883a 	add	r3,r23,r23
  80fa58:	008007c4 	movi	r2,31
  80fa5c:	1285c83a 	sub	r2,r2,r10
  80fa60:	1886983a 	sll	r3,r3,r2
  80fa64:	b2a8d83a 	srl	r20,r22,r10
  80fa68:	baaad83a 	srl	r21,r23,r10
  80fa6c:	1d28b03a 	or	r20,r3,r20
  80fa70:	003fdf06 	br	80f9f0 <__floatunsidf+0xd8>
  80fa74:	b006d07a 	srli	r3,r22,1
  80fa78:	008007c4 	movi	r2,31
  80fa7c:	1245c83a 	sub	r2,r2,r9
  80fa80:	1886d83a 	srl	r3,r3,r2
  80fa84:	ba62983a 	sll	r17,r23,r9
  80fa88:	b260983a 	sll	r16,r22,r9
  80fa8c:	1c62b03a 	or	r17,r3,r17
  80fa90:	003fcc06 	br	80f9c4 <__floatunsidf+0xac>
  80fa94:	2006d07a 	srli	r3,r4,1
  80fa98:	008007c4 	movi	r2,31
  80fa9c:	1285c83a 	sub	r2,r2,r10
  80faa0:	18a6d83a 	srl	r19,r3,r2
  80faa4:	22a4983a 	sll	r18,r4,r10
  80faa8:	003fd706 	br	80fa08 <__floatunsidf+0xf0>

0080faac <udivmodsi4>:
  80faac:	29001b2e 	bgeu	r5,r4,80fb1c <udivmodsi4+0x70>
  80fab0:	28001a16 	blt	r5,zero,80fb1c <udivmodsi4+0x70>
  80fab4:	00800044 	movi	r2,1
  80fab8:	0007883a 	mov	r3,zero
  80fabc:	01c007c4 	movi	r7,31
  80fac0:	00000306 	br	80fad0 <udivmodsi4+0x24>
  80fac4:	19c01326 	beq	r3,r7,80fb14 <udivmodsi4+0x68>
  80fac8:	18c00044 	addi	r3,r3,1
  80facc:	28000416 	blt	r5,zero,80fae0 <udivmodsi4+0x34>
  80fad0:	294b883a 	add	r5,r5,r5
  80fad4:	1085883a 	add	r2,r2,r2
  80fad8:	293ffa36 	bltu	r5,r4,80fac4 <udivmodsi4+0x18>
  80fadc:	10000d26 	beq	r2,zero,80fb14 <udivmodsi4+0x68>
  80fae0:	0007883a 	mov	r3,zero
  80fae4:	21400236 	bltu	r4,r5,80faf0 <udivmodsi4+0x44>
  80fae8:	2149c83a 	sub	r4,r4,r5
  80faec:	1886b03a 	or	r3,r3,r2
  80faf0:	1004d07a 	srli	r2,r2,1
  80faf4:	280ad07a 	srli	r5,r5,1
  80faf8:	103ffa1e 	bne	r2,zero,80fae4 <udivmodsi4+0x38>
  80fafc:	30000226 	beq	r6,zero,80fb08 <udivmodsi4+0x5c>
  80fb00:	2005883a 	mov	r2,r4
  80fb04:	f800283a 	ret
  80fb08:	1809883a 	mov	r4,r3
  80fb0c:	2005883a 	mov	r2,r4
  80fb10:	f800283a 	ret
  80fb14:	0007883a 	mov	r3,zero
  80fb18:	003ff806 	br	80fafc <udivmodsi4+0x50>
  80fb1c:	00800044 	movi	r2,1
  80fb20:	0007883a 	mov	r3,zero
  80fb24:	003fef06 	br	80fae4 <udivmodsi4+0x38>

0080fb28 <__divsi3>:
  80fb28:	defffe04 	addi	sp,sp,-8
  80fb2c:	dc000015 	stw	r16,0(sp)
  80fb30:	dfc00115 	stw	ra,4(sp)
  80fb34:	0021883a 	mov	r16,zero
  80fb38:	20000c16 	blt	r4,zero,80fb6c <__divsi3+0x44>
  80fb3c:	000d883a 	mov	r6,zero
  80fb40:	28000e16 	blt	r5,zero,80fb7c <__divsi3+0x54>
  80fb44:	080faac0 	call	80faac <udivmodsi4>
  80fb48:	1007883a 	mov	r3,r2
  80fb4c:	8005003a 	cmpeq	r2,r16,zero
  80fb50:	1000011e 	bne	r2,zero,80fb58 <__divsi3+0x30>
  80fb54:	00c7c83a 	sub	r3,zero,r3
  80fb58:	1805883a 	mov	r2,r3
  80fb5c:	dfc00117 	ldw	ra,4(sp)
  80fb60:	dc000017 	ldw	r16,0(sp)
  80fb64:	dec00204 	addi	sp,sp,8
  80fb68:	f800283a 	ret
  80fb6c:	0109c83a 	sub	r4,zero,r4
  80fb70:	04000044 	movi	r16,1
  80fb74:	000d883a 	mov	r6,zero
  80fb78:	283ff20e 	bge	r5,zero,80fb44 <__divsi3+0x1c>
  80fb7c:	014bc83a 	sub	r5,zero,r5
  80fb80:	8021003a 	cmpeq	r16,r16,zero
  80fb84:	003fef06 	br	80fb44 <__divsi3+0x1c>

0080fb88 <__modsi3>:
  80fb88:	deffff04 	addi	sp,sp,-4
  80fb8c:	dfc00015 	stw	ra,0(sp)
  80fb90:	01800044 	movi	r6,1
  80fb94:	2807883a 	mov	r3,r5
  80fb98:	20000416 	blt	r4,zero,80fbac <__modsi3+0x24>
  80fb9c:	28000c16 	blt	r5,zero,80fbd0 <__modsi3+0x48>
  80fba0:	dfc00017 	ldw	ra,0(sp)
  80fba4:	dec00104 	addi	sp,sp,4
  80fba8:	080faac1 	jmpi	80faac <udivmodsi4>
  80fbac:	0109c83a 	sub	r4,zero,r4
  80fbb0:	28000b16 	blt	r5,zero,80fbe0 <__modsi3+0x58>
  80fbb4:	180b883a 	mov	r5,r3
  80fbb8:	01800044 	movi	r6,1
  80fbbc:	080faac0 	call	80faac <udivmodsi4>
  80fbc0:	0085c83a 	sub	r2,zero,r2
  80fbc4:	dfc00017 	ldw	ra,0(sp)
  80fbc8:	dec00104 	addi	sp,sp,4
  80fbcc:	f800283a 	ret
  80fbd0:	014bc83a 	sub	r5,zero,r5
  80fbd4:	dfc00017 	ldw	ra,0(sp)
  80fbd8:	dec00104 	addi	sp,sp,4
  80fbdc:	080faac1 	jmpi	80faac <udivmodsi4>
  80fbe0:	0147c83a 	sub	r3,zero,r5
  80fbe4:	003ff306 	br	80fbb4 <__modsi3+0x2c>

0080fbe8 <__udivsi3>:
  80fbe8:	000d883a 	mov	r6,zero
  80fbec:	080faac1 	jmpi	80faac <udivmodsi4>

0080fbf0 <__umodsi3>:
  80fbf0:	01800044 	movi	r6,1
  80fbf4:	080faac1 	jmpi	80faac <udivmodsi4>

0080fbf8 <__clzsi2>:
  80fbf8:	00bfffd4 	movui	r2,65535
  80fbfc:	11000e36 	bltu	r2,r4,80fc38 <__clzsi2+0x40>
  80fc00:	00803fc4 	movi	r2,255
  80fc04:	01400204 	movi	r5,8
  80fc08:	0007883a 	mov	r3,zero
  80fc0c:	11001036 	bltu	r2,r4,80fc50 <__clzsi2+0x58>
  80fc10:	000b883a 	mov	r5,zero
  80fc14:	20c6d83a 	srl	r3,r4,r3
  80fc18:	00802074 	movhi	r2,129
  80fc1c:	10945a04 	addi	r2,r2,20840
  80fc20:	1887883a 	add	r3,r3,r2
  80fc24:	18800003 	ldbu	r2,0(r3)
  80fc28:	00c00804 	movi	r3,32
  80fc2c:	2885883a 	add	r2,r5,r2
  80fc30:	1885c83a 	sub	r2,r3,r2
  80fc34:	f800283a 	ret
  80fc38:	01400404 	movi	r5,16
  80fc3c:	00804034 	movhi	r2,256
  80fc40:	10bfffc4 	addi	r2,r2,-1
  80fc44:	2807883a 	mov	r3,r5
  80fc48:	113ff22e 	bgeu	r2,r4,80fc14 <__clzsi2+0x1c>
  80fc4c:	01400604 	movi	r5,24
  80fc50:	2807883a 	mov	r3,r5
  80fc54:	20c6d83a 	srl	r3,r4,r3
  80fc58:	00802074 	movhi	r2,129
  80fc5c:	10945a04 	addi	r2,r2,20840
  80fc60:	1887883a 	add	r3,r3,r2
  80fc64:	18800003 	ldbu	r2,0(r3)
  80fc68:	00c00804 	movi	r3,32
  80fc6c:	2885883a 	add	r2,r5,r2
  80fc70:	1885c83a 	sub	r2,r3,r2
  80fc74:	f800283a 	ret

0080fc78 <__unpack_f>:
  80fc78:	21800017 	ldw	r6,0(r4)
  80fc7c:	00c02034 	movhi	r3,128
  80fc80:	18ffffc4 	addi	r3,r3,-1
  80fc84:	3004d5fa 	srli	r2,r6,23
  80fc88:	3008d7fa 	srli	r4,r6,31
  80fc8c:	30ce703a 	and	r7,r6,r3
  80fc90:	10c03fcc 	andi	r3,r2,255
  80fc94:	29000115 	stw	r4,4(r5)
  80fc98:	1800131e 	bne	r3,zero,80fce8 <__unpack_f+0x70>
  80fc9c:	38000f26 	beq	r7,zero,80fcdc <__unpack_f+0x64>
  80fca0:	380691fa 	slli	r3,r7,7
  80fca4:	01bfe084 	movi	r6,-126
  80fca8:	008000c4 	movi	r2,3
  80fcac:	01100034 	movhi	r4,16384
  80fcb0:	213fffc4 	addi	r4,r4,-1
  80fcb4:	28800015 	stw	r2,0(r5)
  80fcb8:	29800215 	stw	r6,8(r5)
  80fcbc:	20c00536 	bltu	r4,r3,80fcd4 <__unpack_f+0x5c>
  80fcc0:	3005883a 	mov	r2,r6
  80fcc4:	18c7883a 	add	r3,r3,r3
  80fcc8:	10bfffc4 	addi	r2,r2,-1
  80fccc:	20fffd2e 	bgeu	r4,r3,80fcc4 <__unpack_f+0x4c>
  80fcd0:	28800215 	stw	r2,8(r5)
  80fcd4:	28c00315 	stw	r3,12(r5)
  80fcd8:	f800283a 	ret
  80fcdc:	00800084 	movi	r2,2
  80fce0:	28800015 	stw	r2,0(r5)
  80fce4:	f800283a 	ret
  80fce8:	00803fc4 	movi	r2,255
  80fcec:	18800826 	beq	r3,r2,80fd10 <__unpack_f+0x98>
  80fcf0:	380491fa 	slli	r2,r7,7
  80fcf4:	18ffe044 	addi	r3,r3,-127
  80fcf8:	28c00215 	stw	r3,8(r5)
  80fcfc:	10900034 	orhi	r2,r2,16384
  80fd00:	28800315 	stw	r2,12(r5)
  80fd04:	008000c4 	movi	r2,3
  80fd08:	28800015 	stw	r2,0(r5)
  80fd0c:	f800283a 	ret
  80fd10:	3800031e 	bne	r7,zero,80fd20 <__unpack_f+0xa8>
  80fd14:	00800104 	movi	r2,4
  80fd18:	28800015 	stw	r2,0(r5)
  80fd1c:	f800283a 	ret
  80fd20:	3080042c 	andhi	r2,r6,16
  80fd24:	10000426 	beq	r2,zero,80fd38 <__unpack_f+0xc0>
  80fd28:	00800044 	movi	r2,1
  80fd2c:	28800015 	stw	r2,0(r5)
  80fd30:	29c00315 	stw	r7,12(r5)
  80fd34:	f800283a 	ret
  80fd38:	28000015 	stw	zero,0(r5)
  80fd3c:	003ffc06 	br	80fd30 <__unpack_f+0xb8>

0080fd40 <__fpcmp_parts_f>:
  80fd40:	21800017 	ldw	r6,0(r4)
  80fd44:	00c00044 	movi	r3,1
  80fd48:	19800a2e 	bgeu	r3,r6,80fd74 <__fpcmp_parts_f+0x34>
  80fd4c:	28800017 	ldw	r2,0(r5)
  80fd50:	1880082e 	bgeu	r3,r2,80fd74 <__fpcmp_parts_f+0x34>
  80fd54:	00c00104 	movi	r3,4
  80fd58:	30c01e26 	beq	r6,r3,80fdd4 <__fpcmp_parts_f+0x94>
  80fd5c:	10c01a26 	beq	r2,r3,80fdc8 <__fpcmp_parts_f+0x88>
  80fd60:	00c00084 	movi	r3,2
  80fd64:	30c00526 	beq	r6,r3,80fd7c <__fpcmp_parts_f+0x3c>
  80fd68:	10c0071e 	bne	r2,r3,80fd88 <__fpcmp_parts_f+0x48>
  80fd6c:	20800117 	ldw	r2,4(r4)
  80fd70:	1000091e 	bne	r2,zero,80fd98 <__fpcmp_parts_f+0x58>
  80fd74:	00800044 	movi	r2,1
  80fd78:	f800283a 	ret
  80fd7c:	10c0121e 	bne	r2,r3,80fdc8 <__fpcmp_parts_f+0x88>
  80fd80:	0005883a 	mov	r2,zero
  80fd84:	f800283a 	ret
  80fd88:	20c00117 	ldw	r3,4(r4)
  80fd8c:	28800117 	ldw	r2,4(r5)
  80fd90:	18800326 	beq	r3,r2,80fda0 <__fpcmp_parts_f+0x60>
  80fd94:	183ff726 	beq	r3,zero,80fd74 <__fpcmp_parts_f+0x34>
  80fd98:	00bfffc4 	movi	r2,-1
  80fd9c:	f800283a 	ret
  80fda0:	21800217 	ldw	r6,8(r4)
  80fda4:	28800217 	ldw	r2,8(r5)
  80fda8:	11bffa16 	blt	r2,r6,80fd94 <__fpcmp_parts_f+0x54>
  80fdac:	30800416 	blt	r6,r2,80fdc0 <__fpcmp_parts_f+0x80>
  80fdb0:	21000317 	ldw	r4,12(r4)
  80fdb4:	29400317 	ldw	r5,12(r5)
  80fdb8:	293ff636 	bltu	r5,r4,80fd94 <__fpcmp_parts_f+0x54>
  80fdbc:	217ff02e 	bgeu	r4,r5,80fd80 <__fpcmp_parts_f+0x40>
  80fdc0:	183fec1e 	bne	r3,zero,80fd74 <__fpcmp_parts_f+0x34>
  80fdc4:	003ff406 	br	80fd98 <__fpcmp_parts_f+0x58>
  80fdc8:	28800117 	ldw	r2,4(r5)
  80fdcc:	103fe91e 	bne	r2,zero,80fd74 <__fpcmp_parts_f+0x34>
  80fdd0:	003ff106 	br	80fd98 <__fpcmp_parts_f+0x58>
  80fdd4:	11bfe51e 	bne	r2,r6,80fd6c <__fpcmp_parts_f+0x2c>
  80fdd8:	28c00117 	ldw	r3,4(r5)
  80fddc:	20800117 	ldw	r2,4(r4)
  80fde0:	1885c83a 	sub	r2,r3,r2
  80fde4:	f800283a 	ret

0080fde8 <__make_fp>:
  80fde8:	defffb04 	addi	sp,sp,-20
  80fdec:	d9000015 	stw	r4,0(sp)
  80fdf0:	d809883a 	mov	r4,sp
  80fdf4:	dfc00415 	stw	ra,16(sp)
  80fdf8:	d9400115 	stw	r5,4(sp)
  80fdfc:	d9800215 	stw	r6,8(sp)
  80fe00:	d9c00315 	stw	r7,12(sp)
  80fe04:	08103280 	call	810328 <__pack_f>
  80fe08:	dfc00417 	ldw	ra,16(sp)
  80fe0c:	dec00504 	addi	sp,sp,20
  80fe10:	f800283a 	ret

0080fe14 <__pack_d>:
  80fe14:	20c00017 	ldw	r3,0(r4)
  80fe18:	defffd04 	addi	sp,sp,-12
  80fe1c:	dc000015 	stw	r16,0(sp)
  80fe20:	dc800215 	stw	r18,8(sp)
  80fe24:	dc400115 	stw	r17,4(sp)
  80fe28:	00800044 	movi	r2,1
  80fe2c:	22000317 	ldw	r8,12(r4)
  80fe30:	001f883a 	mov	r15,zero
  80fe34:	22400417 	ldw	r9,16(r4)
  80fe38:	24000117 	ldw	r16,4(r4)
  80fe3c:	10c0552e 	bgeu	r2,r3,80ff94 <__pack_d+0x180>
  80fe40:	00800104 	movi	r2,4
  80fe44:	18804f26 	beq	r3,r2,80ff84 <__pack_d+0x170>
  80fe48:	00800084 	movi	r2,2
  80fe4c:	18800226 	beq	r3,r2,80fe58 <__pack_d+0x44>
  80fe50:	4244b03a 	or	r2,r8,r9
  80fe54:	10001a1e 	bne	r2,zero,80fec0 <__pack_d+0xac>
  80fe58:	000d883a 	mov	r6,zero
  80fe5c:	000f883a 	mov	r7,zero
  80fe60:	0011883a 	mov	r8,zero
  80fe64:	00800434 	movhi	r2,16
  80fe68:	10bfffc4 	addi	r2,r2,-1
  80fe6c:	301d883a 	mov	r14,r6
  80fe70:	3884703a 	and	r2,r7,r2
  80fe74:	400a953a 	slli	r5,r8,20
  80fe78:	79bffc2c 	andhi	r6,r15,65520
  80fe7c:	308cb03a 	or	r6,r6,r2
  80fe80:	00e00434 	movhi	r3,32784
  80fe84:	18ffffc4 	addi	r3,r3,-1
  80fe88:	800497fa 	slli	r2,r16,31
  80fe8c:	30c6703a 	and	r3,r6,r3
  80fe90:	1946b03a 	or	r3,r3,r5
  80fe94:	01600034 	movhi	r5,32768
  80fe98:	297fffc4 	addi	r5,r5,-1
  80fe9c:	194a703a 	and	r5,r3,r5
  80fea0:	288ab03a 	or	r5,r5,r2
  80fea4:	2807883a 	mov	r3,r5
  80fea8:	7005883a 	mov	r2,r14
  80feac:	dc800217 	ldw	r18,8(sp)
  80feb0:	dc400117 	ldw	r17,4(sp)
  80feb4:	dc000017 	ldw	r16,0(sp)
  80feb8:	dec00304 	addi	sp,sp,12
  80febc:	f800283a 	ret
  80fec0:	21000217 	ldw	r4,8(r4)
  80fec4:	00bf0084 	movi	r2,-1022
  80fec8:	20803f16 	blt	r4,r2,80ffc8 <__pack_d+0x1b4>
  80fecc:	0080ffc4 	movi	r2,1023
  80fed0:	11002c16 	blt	r2,r4,80ff84 <__pack_d+0x170>
  80fed4:	00803fc4 	movi	r2,255
  80fed8:	408c703a 	and	r6,r8,r2
  80fedc:	00802004 	movi	r2,128
  80fee0:	0007883a 	mov	r3,zero
  80fee4:	000f883a 	mov	r7,zero
  80fee8:	2280ffc4 	addi	r10,r4,1023
  80feec:	30801e26 	beq	r6,r2,80ff68 <__pack_d+0x154>
  80fef0:	00801fc4 	movi	r2,127
  80fef4:	4089883a 	add	r4,r8,r2
  80fef8:	220d803a 	cmpltu	r6,r4,r8
  80fefc:	324d883a 	add	r6,r6,r9
  80ff00:	2011883a 	mov	r8,r4
  80ff04:	3013883a 	mov	r9,r6
  80ff08:	00880034 	movhi	r2,8192
  80ff0c:	10bfffc4 	addi	r2,r2,-1
  80ff10:	12400d36 	bltu	r2,r9,80ff48 <__pack_d+0x134>
  80ff14:	4804963a 	slli	r2,r9,24
  80ff18:	400cd23a 	srli	r6,r8,8
  80ff1c:	480ed23a 	srli	r7,r9,8
  80ff20:	013fffc4 	movi	r4,-1
  80ff24:	118cb03a 	or	r6,r2,r6
  80ff28:	01400434 	movhi	r5,16
  80ff2c:	297fffc4 	addi	r5,r5,-1
  80ff30:	3104703a 	and	r2,r6,r4
  80ff34:	3946703a 	and	r3,r7,r5
  80ff38:	5201ffcc 	andi	r8,r10,2047
  80ff3c:	100d883a 	mov	r6,r2
  80ff40:	180f883a 	mov	r7,r3
  80ff44:	003fc706 	br	80fe64 <__pack_d+0x50>
  80ff48:	480897fa 	slli	r4,r9,31
  80ff4c:	4004d07a 	srli	r2,r8,1
  80ff50:	4806d07a 	srli	r3,r9,1
  80ff54:	52800044 	addi	r10,r10,1
  80ff58:	2084b03a 	or	r2,r4,r2
  80ff5c:	1011883a 	mov	r8,r2
  80ff60:	1813883a 	mov	r9,r3
  80ff64:	003feb06 	br	80ff14 <__pack_d+0x100>
  80ff68:	383fe11e 	bne	r7,zero,80fef0 <__pack_d+0xdc>
  80ff6c:	01004004 	movi	r4,256
  80ff70:	4104703a 	and	r2,r8,r4
  80ff74:	10c4b03a 	or	r2,r2,r3
  80ff78:	103fe326 	beq	r2,zero,80ff08 <__pack_d+0xf4>
  80ff7c:	3005883a 	mov	r2,r6
  80ff80:	003fdc06 	br	80fef4 <__pack_d+0xe0>
  80ff84:	000d883a 	mov	r6,zero
  80ff88:	000f883a 	mov	r7,zero
  80ff8c:	0201ffc4 	movi	r8,2047
  80ff90:	003fb406 	br	80fe64 <__pack_d+0x50>
  80ff94:	0005883a 	mov	r2,zero
  80ff98:	00c00234 	movhi	r3,8
  80ff9c:	408cb03a 	or	r6,r8,r2
  80ffa0:	48ceb03a 	or	r7,r9,r3
  80ffa4:	013fffc4 	movi	r4,-1
  80ffa8:	01400434 	movhi	r5,16
  80ffac:	297fffc4 	addi	r5,r5,-1
  80ffb0:	3104703a 	and	r2,r6,r4
  80ffb4:	3946703a 	and	r3,r7,r5
  80ffb8:	100d883a 	mov	r6,r2
  80ffbc:	180f883a 	mov	r7,r3
  80ffc0:	0201ffc4 	movi	r8,2047
  80ffc4:	003fa706 	br	80fe64 <__pack_d+0x50>
  80ffc8:	1109c83a 	sub	r4,r2,r4
  80ffcc:	00800e04 	movi	r2,56
  80ffd0:	11004316 	blt	r2,r4,8100e0 <__pack_d+0x2cc>
  80ffd4:	21fff804 	addi	r7,r4,-32
  80ffd8:	38004516 	blt	r7,zero,8100f0 <__pack_d+0x2dc>
  80ffdc:	49d8d83a 	srl	r12,r9,r7
  80ffe0:	001b883a 	mov	r13,zero
  80ffe4:	0023883a 	mov	r17,zero
  80ffe8:	01400044 	movi	r5,1
  80ffec:	0025883a 	mov	r18,zero
  80fff0:	38004716 	blt	r7,zero,810110 <__pack_d+0x2fc>
  80fff4:	29d6983a 	sll	r11,r5,r7
  80fff8:	0015883a 	mov	r10,zero
  80fffc:	00bfffc4 	movi	r2,-1
  810000:	5089883a 	add	r4,r10,r2
  810004:	588b883a 	add	r5,r11,r2
  810008:	228d803a 	cmpltu	r6,r4,r10
  81000c:	314b883a 	add	r5,r6,r5
  810010:	4104703a 	and	r2,r8,r4
  810014:	4946703a 	and	r3,r9,r5
  810018:	10c4b03a 	or	r2,r2,r3
  81001c:	10000226 	beq	r2,zero,810028 <__pack_d+0x214>
  810020:	04400044 	movi	r17,1
  810024:	0025883a 	mov	r18,zero
  810028:	00803fc4 	movi	r2,255
  81002c:	644eb03a 	or	r7,r12,r17
  810030:	3892703a 	and	r9,r7,r2
  810034:	00802004 	movi	r2,128
  810038:	6c90b03a 	or	r8,r13,r18
  81003c:	0015883a 	mov	r10,zero
  810040:	48801626 	beq	r9,r2,81009c <__pack_d+0x288>
  810044:	01001fc4 	movi	r4,127
  810048:	3905883a 	add	r2,r7,r4
  81004c:	11cd803a 	cmpltu	r6,r2,r7
  810050:	320d883a 	add	r6,r6,r8
  810054:	100f883a 	mov	r7,r2
  810058:	00840034 	movhi	r2,4096
  81005c:	10bfffc4 	addi	r2,r2,-1
  810060:	3011883a 	mov	r8,r6
  810064:	0007883a 	mov	r3,zero
  810068:	11801b36 	bltu	r2,r6,8100d8 <__pack_d+0x2c4>
  81006c:	4004963a 	slli	r2,r8,24
  810070:	3808d23a 	srli	r4,r7,8
  810074:	400ad23a 	srli	r5,r8,8
  810078:	1813883a 	mov	r9,r3
  81007c:	1108b03a 	or	r4,r2,r4
  810080:	00bfffc4 	movi	r2,-1
  810084:	00c00434 	movhi	r3,16
  810088:	18ffffc4 	addi	r3,r3,-1
  81008c:	208c703a 	and	r6,r4,r2
  810090:	28ce703a 	and	r7,r5,r3
  810094:	4a01ffcc 	andi	r8,r9,2047
  810098:	003f7206 	br	80fe64 <__pack_d+0x50>
  81009c:	503fe91e 	bne	r10,zero,810044 <__pack_d+0x230>
  8100a0:	01004004 	movi	r4,256
  8100a4:	3904703a 	and	r2,r7,r4
  8100a8:	0007883a 	mov	r3,zero
  8100ac:	10c4b03a 	or	r2,r2,r3
  8100b0:	10000626 	beq	r2,zero,8100cc <__pack_d+0x2b8>
  8100b4:	3a45883a 	add	r2,r7,r9
  8100b8:	11cd803a 	cmpltu	r6,r2,r7
  8100bc:	320d883a 	add	r6,r6,r8
  8100c0:	100f883a 	mov	r7,r2
  8100c4:	3011883a 	mov	r8,r6
  8100c8:	0007883a 	mov	r3,zero
  8100cc:	00840034 	movhi	r2,4096
  8100d0:	10bfffc4 	addi	r2,r2,-1
  8100d4:	123fe52e 	bgeu	r2,r8,81006c <__pack_d+0x258>
  8100d8:	00c00044 	movi	r3,1
  8100dc:	003fe306 	br	81006c <__pack_d+0x258>
  8100e0:	0009883a 	mov	r4,zero
  8100e4:	0013883a 	mov	r9,zero
  8100e8:	000b883a 	mov	r5,zero
  8100ec:	003fe406 	br	810080 <__pack_d+0x26c>
  8100f0:	4a47883a 	add	r3,r9,r9
  8100f4:	008007c4 	movi	r2,31
  8100f8:	1105c83a 	sub	r2,r2,r4
  8100fc:	1886983a 	sll	r3,r3,r2
  810100:	4118d83a 	srl	r12,r8,r4
  810104:	491ad83a 	srl	r13,r9,r4
  810108:	1b18b03a 	or	r12,r3,r12
  81010c:	003fb506 	br	80ffe4 <__pack_d+0x1d0>
  810110:	2806d07a 	srli	r3,r5,1
  810114:	008007c4 	movi	r2,31
  810118:	1105c83a 	sub	r2,r2,r4
  81011c:	1896d83a 	srl	r11,r3,r2
  810120:	2914983a 	sll	r10,r5,r4
  810124:	003fb506 	br	80fffc <__pack_d+0x1e8>

00810128 <__unpack_d>:
  810128:	20c00117 	ldw	r3,4(r4)
  81012c:	22400017 	ldw	r9,0(r4)
  810130:	00800434 	movhi	r2,16
  810134:	10bfffc4 	addi	r2,r2,-1
  810138:	1808d53a 	srli	r4,r3,20
  81013c:	180cd7fa 	srli	r6,r3,31
  810140:	1894703a 	and	r10,r3,r2
  810144:	2201ffcc 	andi	r8,r4,2047
  810148:	281b883a 	mov	r13,r5
  81014c:	4817883a 	mov	r11,r9
  810150:	29800115 	stw	r6,4(r5)
  810154:	5019883a 	mov	r12,r10
  810158:	40001e1e 	bne	r8,zero,8101d4 <__unpack_d+0xac>
  81015c:	4a84b03a 	or	r2,r9,r10
  810160:	10001926 	beq	r2,zero,8101c8 <__unpack_d+0xa0>
  810164:	4804d63a 	srli	r2,r9,24
  810168:	500c923a 	slli	r6,r10,8
  81016c:	013f0084 	movi	r4,-1022
  810170:	00c40034 	movhi	r3,4096
  810174:	18ffffc4 	addi	r3,r3,-1
  810178:	118cb03a 	or	r6,r2,r6
  81017c:	008000c4 	movi	r2,3
  810180:	480a923a 	slli	r5,r9,8
  810184:	68800015 	stw	r2,0(r13)
  810188:	69000215 	stw	r4,8(r13)
  81018c:	19800b36 	bltu	r3,r6,8101bc <__unpack_d+0x94>
  810190:	200f883a 	mov	r7,r4
  810194:	1811883a 	mov	r8,r3
  810198:	2945883a 	add	r2,r5,r5
  81019c:	1149803a 	cmpltu	r4,r2,r5
  8101a0:	3187883a 	add	r3,r6,r6
  8101a4:	20c9883a 	add	r4,r4,r3
  8101a8:	100b883a 	mov	r5,r2
  8101ac:	200d883a 	mov	r6,r4
  8101b0:	39ffffc4 	addi	r7,r7,-1
  8101b4:	413ff82e 	bgeu	r8,r4,810198 <__unpack_d+0x70>
  8101b8:	69c00215 	stw	r7,8(r13)
  8101bc:	69800415 	stw	r6,16(r13)
  8101c0:	69400315 	stw	r5,12(r13)
  8101c4:	f800283a 	ret
  8101c8:	00800084 	movi	r2,2
  8101cc:	28800015 	stw	r2,0(r5)
  8101d0:	f800283a 	ret
  8101d4:	0081ffc4 	movi	r2,2047
  8101d8:	40800f26 	beq	r8,r2,810218 <__unpack_d+0xf0>
  8101dc:	480cd63a 	srli	r6,r9,24
  8101e0:	5006923a 	slli	r3,r10,8
  8101e4:	4804923a 	slli	r2,r9,8
  8101e8:	0009883a 	mov	r4,zero
  8101ec:	30c6b03a 	or	r3,r6,r3
  8101f0:	01440034 	movhi	r5,4096
  8101f4:	110cb03a 	or	r6,r2,r4
  8101f8:	423f0044 	addi	r8,r8,-1023
  8101fc:	194eb03a 	or	r7,r3,r5
  810200:	008000c4 	movi	r2,3
  810204:	69c00415 	stw	r7,16(r13)
  810208:	6a000215 	stw	r8,8(r13)
  81020c:	68800015 	stw	r2,0(r13)
  810210:	69800315 	stw	r6,12(r13)
  810214:	f800283a 	ret
  810218:	4a84b03a 	or	r2,r9,r10
  81021c:	1000031e 	bne	r2,zero,81022c <__unpack_d+0x104>
  810220:	00800104 	movi	r2,4
  810224:	28800015 	stw	r2,0(r5)
  810228:	f800283a 	ret
  81022c:	0009883a 	mov	r4,zero
  810230:	01400234 	movhi	r5,8
  810234:	4904703a 	and	r2,r9,r4
  810238:	5146703a 	and	r3,r10,r5
  81023c:	10c4b03a 	or	r2,r2,r3
  810240:	10000526 	beq	r2,zero,810258 <__unpack_d+0x130>
  810244:	00800044 	movi	r2,1
  810248:	68800015 	stw	r2,0(r13)
  81024c:	6b000415 	stw	r12,16(r13)
  810250:	6ac00315 	stw	r11,12(r13)
  810254:	f800283a 	ret
  810258:	68000015 	stw	zero,0(r13)
  81025c:	003ffb06 	br	81024c <__unpack_d+0x124>

00810260 <__fpcmp_parts_d>:
  810260:	21800017 	ldw	r6,0(r4)
  810264:	00c00044 	movi	r3,1
  810268:	19800a2e 	bgeu	r3,r6,810294 <__fpcmp_parts_d+0x34>
  81026c:	28800017 	ldw	r2,0(r5)
  810270:	1880082e 	bgeu	r3,r2,810294 <__fpcmp_parts_d+0x34>
  810274:	00c00104 	movi	r3,4
  810278:	30c02626 	beq	r6,r3,810314 <__fpcmp_parts_d+0xb4>
  81027c:	10c02226 	beq	r2,r3,810308 <__fpcmp_parts_d+0xa8>
  810280:	00c00084 	movi	r3,2
  810284:	30c00526 	beq	r6,r3,81029c <__fpcmp_parts_d+0x3c>
  810288:	10c0071e 	bne	r2,r3,8102a8 <__fpcmp_parts_d+0x48>
  81028c:	20800117 	ldw	r2,4(r4)
  810290:	1000091e 	bne	r2,zero,8102b8 <__fpcmp_parts_d+0x58>
  810294:	00800044 	movi	r2,1
  810298:	f800283a 	ret
  81029c:	10c01a1e 	bne	r2,r3,810308 <__fpcmp_parts_d+0xa8>
  8102a0:	0005883a 	mov	r2,zero
  8102a4:	f800283a 	ret
  8102a8:	22000117 	ldw	r8,4(r4)
  8102ac:	28800117 	ldw	r2,4(r5)
  8102b0:	40800326 	beq	r8,r2,8102c0 <__fpcmp_parts_d+0x60>
  8102b4:	403ff726 	beq	r8,zero,810294 <__fpcmp_parts_d+0x34>
  8102b8:	00bfffc4 	movi	r2,-1
  8102bc:	f800283a 	ret
  8102c0:	20c00217 	ldw	r3,8(r4)
  8102c4:	28800217 	ldw	r2,8(r5)
  8102c8:	10fffa16 	blt	r2,r3,8102b4 <__fpcmp_parts_d+0x54>
  8102cc:	18800916 	blt	r3,r2,8102f4 <__fpcmp_parts_d+0x94>
  8102d0:	21c00417 	ldw	r7,16(r4)
  8102d4:	28c00417 	ldw	r3,16(r5)
  8102d8:	21800317 	ldw	r6,12(r4)
  8102dc:	28800317 	ldw	r2,12(r5)
  8102e0:	19fff436 	bltu	r3,r7,8102b4 <__fpcmp_parts_d+0x54>
  8102e4:	38c00526 	beq	r7,r3,8102fc <__fpcmp_parts_d+0x9c>
  8102e8:	38c00236 	bltu	r7,r3,8102f4 <__fpcmp_parts_d+0x94>
  8102ec:	19ffec1e 	bne	r3,r7,8102a0 <__fpcmp_parts_d+0x40>
  8102f0:	30bfeb2e 	bgeu	r6,r2,8102a0 <__fpcmp_parts_d+0x40>
  8102f4:	403fe71e 	bne	r8,zero,810294 <__fpcmp_parts_d+0x34>
  8102f8:	003fef06 	br	8102b8 <__fpcmp_parts_d+0x58>
  8102fc:	11bffa2e 	bgeu	r2,r6,8102e8 <__fpcmp_parts_d+0x88>
  810300:	403fe426 	beq	r8,zero,810294 <__fpcmp_parts_d+0x34>
  810304:	003fec06 	br	8102b8 <__fpcmp_parts_d+0x58>
  810308:	28800117 	ldw	r2,4(r5)
  81030c:	103fe11e 	bne	r2,zero,810294 <__fpcmp_parts_d+0x34>
  810310:	003fe906 	br	8102b8 <__fpcmp_parts_d+0x58>
  810314:	11bfdd1e 	bne	r2,r6,81028c <__fpcmp_parts_d+0x2c>
  810318:	28c00117 	ldw	r3,4(r5)
  81031c:	20800117 	ldw	r2,4(r4)
  810320:	1885c83a 	sub	r2,r3,r2
  810324:	f800283a 	ret

00810328 <__pack_f>:
  810328:	20c00017 	ldw	r3,0(r4)
  81032c:	01c00044 	movi	r7,1
  810330:	21800317 	ldw	r6,12(r4)
  810334:	21400117 	ldw	r5,4(r4)
  810338:	38c02d2e 	bgeu	r7,r3,8103f0 <__pack_f+0xc8>
  81033c:	00800104 	movi	r2,4
  810340:	18802826 	beq	r3,r2,8103e4 <__pack_f+0xbc>
  810344:	00800084 	movi	r2,2
  810348:	18800126 	beq	r3,r2,810350 <__pack_f+0x28>
  81034c:	3000101e 	bne	r6,zero,810390 <__pack_f+0x68>
  810350:	000d883a 	mov	r6,zero
  810354:	0007883a 	mov	r3,zero
  810358:	19003fcc 	andi	r4,r3,255
  81035c:	200895fa 	slli	r4,r4,23
  810360:	00c02034 	movhi	r3,128
  810364:	18ffffc4 	addi	r3,r3,-1
  810368:	30c6703a 	and	r3,r6,r3
  81036c:	10a0002c 	andhi	r2,r2,32768
  810370:	10c4b03a 	or	r2,r2,r3
  810374:	280a97fa 	slli	r5,r5,31
  810378:	1104b03a 	or	r2,r2,r4
  81037c:	00e00034 	movhi	r3,32768
  810380:	18ffffc4 	addi	r3,r3,-1
  810384:	10c4703a 	and	r2,r2,r3
  810388:	1144b03a 	or	r2,r2,r5
  81038c:	f800283a 	ret
  810390:	21000217 	ldw	r4,8(r4)
  810394:	00bfe084 	movi	r2,-126
  810398:	20801b16 	blt	r4,r2,810408 <__pack_f+0xe0>
  81039c:	00801fc4 	movi	r2,127
  8103a0:	11001016 	blt	r2,r4,8103e4 <__pack_f+0xbc>
  8103a4:	308e703a 	and	r7,r6,r2
  8103a8:	2087883a 	add	r3,r4,r2
  8103ac:	00801004 	movi	r2,64
  8103b0:	38800526 	beq	r7,r2,8103c8 <__pack_f+0xa0>
  8103b4:	31800fc4 	addi	r6,r6,63
  8103b8:	30000716 	blt	r6,zero,8103d8 <__pack_f+0xb0>
  8103bc:	300490ba 	slli	r2,r6,2
  8103c0:	100cd27a 	srli	r6,r2,9
  8103c4:	003fe406 	br	810358 <__pack_f+0x30>
  8103c8:	3080200c 	andi	r2,r6,128
  8103cc:	103ffa26 	beq	r2,zero,8103b8 <__pack_f+0x90>
  8103d0:	31cd883a 	add	r6,r6,r7
  8103d4:	003ff806 	br	8103b8 <__pack_f+0x90>
  8103d8:	300cd07a 	srli	r6,r6,1
  8103dc:	18c00044 	addi	r3,r3,1
  8103e0:	003ff606 	br	8103bc <__pack_f+0x94>
  8103e4:	000d883a 	mov	r6,zero
  8103e8:	00ffffc4 	movi	r3,-1
  8103ec:	003fda06 	br	810358 <__pack_f+0x30>
  8103f0:	31800434 	orhi	r6,r6,16
  8103f4:	00802034 	movhi	r2,128
  8103f8:	10bfffc4 	addi	r2,r2,-1
  8103fc:	308c703a 	and	r6,r6,r2
  810400:	00ffffc4 	movi	r3,-1
  810404:	003fd406 	br	810358 <__pack_f+0x30>
  810408:	1109c83a 	sub	r4,r2,r4
  81040c:	00800644 	movi	r2,25
  810410:	11001216 	blt	r2,r4,81045c <__pack_f+0x134>
  810414:	3904983a 	sll	r2,r7,r4
  810418:	3106d83a 	srl	r3,r6,r4
  81041c:	10bfffc4 	addi	r2,r2,-1
  810420:	3084703a 	and	r2,r6,r2
  810424:	1004c03a 	cmpne	r2,r2,zero
  810428:	1886b03a 	or	r3,r3,r2
  81042c:	19001fcc 	andi	r4,r3,127
  810430:	00801004 	movi	r2,64
  810434:	20800c26 	beq	r4,r2,810468 <__pack_f+0x140>
  810438:	18c00fc4 	addi	r3,r3,63
  81043c:	00900034 	movhi	r2,16384
  810440:	10bfffc4 	addi	r2,r2,-1
  810444:	180cd1fa 	srli	r6,r3,7
  810448:	10c7803a 	cmpltu	r3,r2,r3
  81044c:	00802034 	movhi	r2,128
  810450:	10bfffc4 	addi	r2,r2,-1
  810454:	308c703a 	and	r6,r6,r2
  810458:	003fbf06 	br	810358 <__pack_f+0x30>
  81045c:	0007883a 	mov	r3,zero
  810460:	000d883a 	mov	r6,zero
  810464:	003ff906 	br	81044c <__pack_f+0x124>
  810468:	1880200c 	andi	r2,r3,128
  81046c:	10000126 	beq	r2,zero,810474 <__pack_f+0x14c>
  810470:	1907883a 	add	r3,r3,r4
  810474:	180cd1fa 	srli	r6,r3,7
  810478:	00900034 	movhi	r2,16384
  81047c:	10bfffc4 	addi	r2,r2,-1
  810480:	10c7803a 	cmpltu	r3,r2,r3
  810484:	003ff106 	br	81044c <__pack_f+0x124>

00810488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810488:	defff404 	addi	sp,sp,-48
  81048c:	df000b15 	stw	fp,44(sp)
  810490:	df000b04 	addi	fp,sp,44
  810494:	e13ffb15 	stw	r4,-20(fp)
  810498:	e17ffc15 	stw	r5,-16(fp)
  81049c:	e1bffd15 	stw	r6,-12(fp)
  8104a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8104a4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8104a8:	008020b4 	movhi	r2,130
  8104ac:	10a33104 	addi	r2,r2,-29500
  8104b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8104b4:	1005003a 	cmpeq	r2,r2,zero
  8104b8:	1000411e 	bne	r2,zero,8105c0 <alt_alarm_start+0x138>
  {
    if (alarm)
  8104bc:	e0bffb17 	ldw	r2,-20(fp)
  8104c0:	1005003a 	cmpeq	r2,r2,zero
  8104c4:	10003b1e 	bne	r2,zero,8105b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8104c8:	e0fffb17 	ldw	r3,-20(fp)
  8104cc:	e0bffd17 	ldw	r2,-12(fp)
  8104d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8104d4:	e0fffb17 	ldw	r3,-20(fp)
  8104d8:	e0bffe17 	ldw	r2,-8(fp)
  8104dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104e0:	0005303a 	rdctl	r2,status
  8104e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104e8:	e0fff817 	ldw	r3,-32(fp)
  8104ec:	00bfff84 	movi	r2,-2
  8104f0:	1884703a 	and	r2,r3,r2
  8104f4:	1001703a 	wrctl	status,r2
  
  return context;
  8104f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8104fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810500:	008020b4 	movhi	r2,130
  810504:	10a33204 	addi	r2,r2,-29496
  810508:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81050c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810510:	e0fffc17 	ldw	r3,-16(fp)
  810514:	e0bff917 	ldw	r2,-28(fp)
  810518:	1885883a 	add	r2,r3,r2
  81051c:	10c00044 	addi	r3,r2,1
  810520:	e0bffb17 	ldw	r2,-20(fp)
  810524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810528:	e0bffb17 	ldw	r2,-20(fp)
  81052c:	10c00217 	ldw	r3,8(r2)
  810530:	e0bff917 	ldw	r2,-28(fp)
  810534:	1880042e 	bgeu	r3,r2,810548 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810538:	e0fffb17 	ldw	r3,-20(fp)
  81053c:	00800044 	movi	r2,1
  810540:	18800405 	stb	r2,16(r3)
  810544:	00000206 	br	810550 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810548:	e0bffb17 	ldw	r2,-20(fp)
  81054c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810550:	e0fffb17 	ldw	r3,-20(fp)
  810554:	00802074 	movhi	r2,129
  810558:	109bdf04 	addi	r2,r2,28540
  81055c:	e0bff615 	stw	r2,-40(fp)
  810560:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810564:	e0fff717 	ldw	r3,-36(fp)
  810568:	e0bff617 	ldw	r2,-40(fp)
  81056c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810570:	e0bff617 	ldw	r2,-40(fp)
  810574:	10c00017 	ldw	r3,0(r2)
  810578:	e0bff717 	ldw	r2,-36(fp)
  81057c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810580:	e0bff617 	ldw	r2,-40(fp)
  810584:	10c00017 	ldw	r3,0(r2)
  810588:	e0bff717 	ldw	r2,-36(fp)
  81058c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810590:	e0fff617 	ldw	r3,-40(fp)
  810594:	e0bff717 	ldw	r2,-36(fp)
  810598:	18800015 	stw	r2,0(r3)
  81059c:	e0bffa17 	ldw	r2,-24(fp)
  8105a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105a4:	e0bff517 	ldw	r2,-44(fp)
  8105a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8105ac:	e03fff15 	stw	zero,-4(fp)
  8105b0:	00000506 	br	8105c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8105b4:	00bffa84 	movi	r2,-22
  8105b8:	e0bfff15 	stw	r2,-4(fp)
  8105bc:	00000206 	br	8105c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8105c0:	00bfde84 	movi	r2,-134
  8105c4:	e0bfff15 	stw	r2,-4(fp)
  8105c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8105cc:	e037883a 	mov	sp,fp
  8105d0:	df000017 	ldw	fp,0(sp)
  8105d4:	dec00104 	addi	sp,sp,4
  8105d8:	f800283a 	ret

008105dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8105dc:	defff804 	addi	sp,sp,-32
  8105e0:	dfc00715 	stw	ra,28(sp)
  8105e4:	df000615 	stw	fp,24(sp)
  8105e8:	df000604 	addi	fp,sp,24
  8105ec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8105f0:	e0bffc17 	ldw	r2,-16(fp)
  8105f4:	1004803a 	cmplt	r2,r2,zero
  8105f8:	1000081e 	bne	r2,zero,81061c <close+0x40>
  8105fc:	e0bffc17 	ldw	r2,-16(fp)
  810600:	10800324 	muli	r2,r2,12
  810604:	1007883a 	mov	r3,r2
  810608:	00802074 	movhi	r2,129
  81060c:	1096db04 	addi	r2,r2,23404
  810610:	1887883a 	add	r3,r3,r2
  810614:	e0ffff15 	stw	r3,-4(fp)
  810618:	00000106 	br	810620 <close+0x44>
  81061c:	e03fff15 	stw	zero,-4(fp)
  810620:	e0bfff17 	ldw	r2,-4(fp)
  810624:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  810628:	e0bffb17 	ldw	r2,-20(fp)
  81062c:	1005003a 	cmpeq	r2,r2,zero
  810630:	10001d1e 	bne	r2,zero,8106a8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810634:	e0bffb17 	ldw	r2,-20(fp)
  810638:	10800017 	ldw	r2,0(r2)
  81063c:	10800417 	ldw	r2,16(r2)
  810640:	1005003a 	cmpeq	r2,r2,zero
  810644:	1000071e 	bne	r2,zero,810664 <close+0x88>
  810648:	e0bffb17 	ldw	r2,-20(fp)
  81064c:	10800017 	ldw	r2,0(r2)
  810650:	10800417 	ldw	r2,16(r2)
  810654:	e13ffb17 	ldw	r4,-20(fp)
  810658:	103ee83a 	callr	r2
  81065c:	e0bffe15 	stw	r2,-8(fp)
  810660:	00000106 	br	810668 <close+0x8c>
  810664:	e03ffe15 	stw	zero,-8(fp)
  810668:	e0bffe17 	ldw	r2,-8(fp)
  81066c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810670:	e13ffc17 	ldw	r4,-16(fp)
  810674:	08112a40 	call	8112a4 <alt_release_fd>
    if (rval < 0)
  810678:	e0bffa17 	ldw	r2,-24(fp)
  81067c:	1004403a 	cmpge	r2,r2,zero
  810680:	1000071e 	bne	r2,zero,8106a0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  810684:	08106d80 	call	8106d8 <alt_get_errno>
  810688:	e0fffa17 	ldw	r3,-24(fp)
  81068c:	00c7c83a 	sub	r3,zero,r3
  810690:	10c00015 	stw	r3,0(r2)
      return -1;
  810694:	00bfffc4 	movi	r2,-1
  810698:	e0bffd15 	stw	r2,-12(fp)
  81069c:	00000806 	br	8106c0 <close+0xe4>
    }
    return 0;
  8106a0:	e03ffd15 	stw	zero,-12(fp)
  8106a4:	00000606 	br	8106c0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8106a8:	08106d80 	call	8106d8 <alt_get_errno>
  8106ac:	1007883a 	mov	r3,r2
  8106b0:	00801444 	movi	r2,81
  8106b4:	18800015 	stw	r2,0(r3)
    return -1;
  8106b8:	00bfffc4 	movi	r2,-1
  8106bc:	e0bffd15 	stw	r2,-12(fp)
  8106c0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8106c4:	e037883a 	mov	sp,fp
  8106c8:	dfc00117 	ldw	ra,4(sp)
  8106cc:	df000017 	ldw	fp,0(sp)
  8106d0:	dec00204 	addi	sp,sp,8
  8106d4:	f800283a 	ret

008106d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8106d8:	defffd04 	addi	sp,sp,-12
  8106dc:	dfc00215 	stw	ra,8(sp)
  8106e0:	df000115 	stw	fp,4(sp)
  8106e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8106e8:	00802074 	movhi	r2,129
  8106ec:	109bdc04 	addi	r2,r2,28528
  8106f0:	10800017 	ldw	r2,0(r2)
  8106f4:	1005003a 	cmpeq	r2,r2,zero
  8106f8:	1000061e 	bne	r2,zero,810714 <alt_get_errno+0x3c>
  8106fc:	00802074 	movhi	r2,129
  810700:	109bdc04 	addi	r2,r2,28528
  810704:	10800017 	ldw	r2,0(r2)
  810708:	103ee83a 	callr	r2
  81070c:	e0bfff15 	stw	r2,-4(fp)
  810710:	00000306 	br	810720 <alt_get_errno+0x48>
  810714:	008020b4 	movhi	r2,130
  810718:	10a32604 	addi	r2,r2,-29544
  81071c:	e0bfff15 	stw	r2,-4(fp)
  810720:	e0bfff17 	ldw	r2,-4(fp)
}
  810724:	e037883a 	mov	sp,fp
  810728:	dfc00117 	ldw	ra,4(sp)
  81072c:	df000017 	ldw	fp,0(sp)
  810730:	dec00204 	addi	sp,sp,8
  810734:	f800283a 	ret

00810738 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810738:	defffc04 	addi	sp,sp,-16
  81073c:	df000315 	stw	fp,12(sp)
  810740:	df000304 	addi	fp,sp,12
  810744:	e13ffd15 	stw	r4,-12(fp)
  810748:	e17ffe15 	stw	r5,-8(fp)
  81074c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810750:	e0bfff17 	ldw	r2,-4(fp)
}
  810754:	e037883a 	mov	sp,fp
  810758:	df000017 	ldw	fp,0(sp)
  81075c:	dec00104 	addi	sp,sp,4
  810760:	f800283a 	ret

00810764 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810764:	defff904 	addi	sp,sp,-28
  810768:	dfc00615 	stw	ra,24(sp)
  81076c:	df000515 	stw	fp,20(sp)
  810770:	df000504 	addi	fp,sp,20
  810774:	e13ffc15 	stw	r4,-16(fp)
  810778:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81077c:	e0bffc17 	ldw	r2,-16(fp)
  810780:	1004803a 	cmplt	r2,r2,zero
  810784:	1000081e 	bne	r2,zero,8107a8 <fstat+0x44>
  810788:	e0bffc17 	ldw	r2,-16(fp)
  81078c:	10800324 	muli	r2,r2,12
  810790:	1007883a 	mov	r3,r2
  810794:	00802074 	movhi	r2,129
  810798:	1096db04 	addi	r2,r2,23404
  81079c:	1887883a 	add	r3,r3,r2
  8107a0:	e0ffff15 	stw	r3,-4(fp)
  8107a4:	00000106 	br	8107ac <fstat+0x48>
  8107a8:	e03fff15 	stw	zero,-4(fp)
  8107ac:	e0bfff17 	ldw	r2,-4(fp)
  8107b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8107b4:	e0bffb17 	ldw	r2,-20(fp)
  8107b8:	1005003a 	cmpeq	r2,r2,zero
  8107bc:	1000121e 	bne	r2,zero,810808 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8107c0:	e0bffb17 	ldw	r2,-20(fp)
  8107c4:	10800017 	ldw	r2,0(r2)
  8107c8:	10800817 	ldw	r2,32(r2)
  8107cc:	1005003a 	cmpeq	r2,r2,zero
  8107d0:	1000081e 	bne	r2,zero,8107f4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8107d4:	e0bffb17 	ldw	r2,-20(fp)
  8107d8:	10800017 	ldw	r2,0(r2)
  8107dc:	10800817 	ldw	r2,32(r2)
  8107e0:	e13ffb17 	ldw	r4,-20(fp)
  8107e4:	e17ffd17 	ldw	r5,-12(fp)
  8107e8:	103ee83a 	callr	r2
  8107ec:	e0bffe15 	stw	r2,-8(fp)
  8107f0:	00000b06 	br	810820 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8107f4:	e0fffd17 	ldw	r3,-12(fp)
  8107f8:	00880004 	movi	r2,8192
  8107fc:	18800115 	stw	r2,4(r3)
      return 0;
  810800:	e03ffe15 	stw	zero,-8(fp)
  810804:	00000606 	br	810820 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810808:	08108380 	call	810838 <alt_get_errno>
  81080c:	1007883a 	mov	r3,r2
  810810:	00801444 	movi	r2,81
  810814:	18800015 	stw	r2,0(r3)
    return -1;
  810818:	00bfffc4 	movi	r2,-1
  81081c:	e0bffe15 	stw	r2,-8(fp)
  810820:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810824:	e037883a 	mov	sp,fp
  810828:	dfc00117 	ldw	ra,4(sp)
  81082c:	df000017 	ldw	fp,0(sp)
  810830:	dec00204 	addi	sp,sp,8
  810834:	f800283a 	ret

00810838 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810838:	defffd04 	addi	sp,sp,-12
  81083c:	dfc00215 	stw	ra,8(sp)
  810840:	df000115 	stw	fp,4(sp)
  810844:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810848:	00802074 	movhi	r2,129
  81084c:	109bdc04 	addi	r2,r2,28528
  810850:	10800017 	ldw	r2,0(r2)
  810854:	1005003a 	cmpeq	r2,r2,zero
  810858:	1000061e 	bne	r2,zero,810874 <alt_get_errno+0x3c>
  81085c:	00802074 	movhi	r2,129
  810860:	109bdc04 	addi	r2,r2,28528
  810864:	10800017 	ldw	r2,0(r2)
  810868:	103ee83a 	callr	r2
  81086c:	e0bfff15 	stw	r2,-4(fp)
  810870:	00000306 	br	810880 <alt_get_errno+0x48>
  810874:	008020b4 	movhi	r2,130
  810878:	10a32604 	addi	r2,r2,-29544
  81087c:	e0bfff15 	stw	r2,-4(fp)
  810880:	e0bfff17 	ldw	r2,-4(fp)
}
  810884:	e037883a 	mov	sp,fp
  810888:	dfc00117 	ldw	ra,4(sp)
  81088c:	df000017 	ldw	fp,0(sp)
  810890:	dec00204 	addi	sp,sp,8
  810894:	f800283a 	ret

00810898 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  810898:	deffef04 	addi	sp,sp,-68
  81089c:	df001015 	stw	fp,64(sp)
  8108a0:	df001004 	addi	fp,sp,64
  8108a4:	e13ffc15 	stw	r4,-16(fp)
  8108a8:	e17ffd15 	stw	r5,-12(fp)
  8108ac:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8108b0:	00bffa84 	movi	r2,-22
  8108b4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8108b8:	e0bffc17 	ldw	r2,-16(fp)
  8108bc:	10800828 	cmpgeui	r2,r2,32
  8108c0:	1000601e 	bne	r2,zero,810a44 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108c4:	0005303a 	rdctl	r2,status
  8108c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8108cc:	e0fff917 	ldw	r3,-28(fp)
  8108d0:	00bfff84 	movi	r2,-2
  8108d4:	1884703a 	and	r2,r3,r2
  8108d8:	1001703a 	wrctl	status,r2
  
  return context;
  8108dc:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8108e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8108e4:	e0bffc17 	ldw	r2,-16(fp)
  8108e8:	00c020b4 	movhi	r3,130
  8108ec:	18e38904 	addi	r3,r3,-29148
  8108f0:	100490fa 	slli	r2,r2,3
  8108f4:	10c7883a 	add	r3,r2,r3
  8108f8:	e0bffe17 	ldw	r2,-8(fp)
  8108fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  810900:	e0bffc17 	ldw	r2,-16(fp)
  810904:	00c020b4 	movhi	r3,130
  810908:	18e38904 	addi	r3,r3,-29148
  81090c:	100490fa 	slli	r2,r2,3
  810910:	10c5883a 	add	r2,r2,r3
  810914:	10c00104 	addi	r3,r2,4
  810918:	e0bffd17 	ldw	r2,-12(fp)
  81091c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810920:	e0bffe17 	ldw	r2,-8(fp)
  810924:	1005003a 	cmpeq	r2,r2,zero
  810928:	1000201e 	bne	r2,zero,8109ac <alt_irq_register+0x114>
  81092c:	e0bffc17 	ldw	r2,-16(fp)
  810930:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810934:	0005303a 	rdctl	r2,status
  810938:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81093c:	e0fff617 	ldw	r3,-40(fp)
  810940:	00bfff84 	movi	r2,-2
  810944:	1884703a 	and	r2,r3,r2
  810948:	1001703a 	wrctl	status,r2
  
  return context;
  81094c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810950:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810954:	e0fff717 	ldw	r3,-36(fp)
  810958:	00800044 	movi	r2,1
  81095c:	10c4983a 	sll	r2,r2,r3
  810960:	1007883a 	mov	r3,r2
  810964:	008020b4 	movhi	r2,130
  810968:	10a32d04 	addi	r2,r2,-29516
  81096c:	10800017 	ldw	r2,0(r2)
  810970:	1886b03a 	or	r3,r3,r2
  810974:	008020b4 	movhi	r2,130
  810978:	10a32d04 	addi	r2,r2,-29516
  81097c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810980:	008020b4 	movhi	r2,130
  810984:	10a32d04 	addi	r2,r2,-29516
  810988:	10800017 	ldw	r2,0(r2)
  81098c:	100170fa 	wrctl	ienable,r2
  810990:	e0bff817 	ldw	r2,-32(fp)
  810994:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810998:	e0bff517 	ldw	r2,-44(fp)
  81099c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8109a0:	0005883a 	mov	r2,zero
  8109a4:	e0bfff15 	stw	r2,-4(fp)
  8109a8:	00002006 	br	810a2c <alt_irq_register+0x194>
  8109ac:	e0bffc17 	ldw	r2,-16(fp)
  8109b0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109b4:	0005303a 	rdctl	r2,status
  8109b8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109bc:	e0fff217 	ldw	r3,-56(fp)
  8109c0:	00bfff84 	movi	r2,-2
  8109c4:	1884703a 	and	r2,r3,r2
  8109c8:	1001703a 	wrctl	status,r2
  
  return context;
  8109cc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8109d0:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  8109d4:	e0fff317 	ldw	r3,-52(fp)
  8109d8:	00800044 	movi	r2,1
  8109dc:	10c4983a 	sll	r2,r2,r3
  8109e0:	0084303a 	nor	r2,zero,r2
  8109e4:	1007883a 	mov	r3,r2
  8109e8:	008020b4 	movhi	r2,130
  8109ec:	10a32d04 	addi	r2,r2,-29516
  8109f0:	10800017 	ldw	r2,0(r2)
  8109f4:	1886703a 	and	r3,r3,r2
  8109f8:	008020b4 	movhi	r2,130
  8109fc:	10a32d04 	addi	r2,r2,-29516
  810a00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810a04:	008020b4 	movhi	r2,130
  810a08:	10a32d04 	addi	r2,r2,-29516
  810a0c:	10800017 	ldw	r2,0(r2)
  810a10:	100170fa 	wrctl	ienable,r2
  810a14:	e0bff417 	ldw	r2,-48(fp)
  810a18:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a1c:	e0bff117 	ldw	r2,-60(fp)
  810a20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810a24:	0005883a 	mov	r2,zero
  810a28:	e0bfff15 	stw	r2,-4(fp)
  810a2c:	e0bfff17 	ldw	r2,-4(fp)
  810a30:	e0bffb15 	stw	r2,-20(fp)
  810a34:	e0bffa17 	ldw	r2,-24(fp)
  810a38:	e0bff015 	stw	r2,-64(fp)
  810a3c:	e0bff017 	ldw	r2,-64(fp)
  810a40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810a44:	e0bffb17 	ldw	r2,-20(fp)
}
  810a48:	e037883a 	mov	sp,fp
  810a4c:	df000017 	ldw	fp,0(sp)
  810a50:	dec00104 	addi	sp,sp,4
  810a54:	f800283a 	ret

00810a58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810a58:	deffeb04 	addi	sp,sp,-84
  810a5c:	dfc01415 	stw	ra,80(sp)
  810a60:	df001315 	stw	fp,76(sp)
  810a64:	df001304 	addi	fp,sp,76
  810a68:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810a6c:	e0bffd17 	ldw	r2,-12(fp)
  810a70:	1004803a 	cmplt	r2,r2,zero
  810a74:	1000081e 	bne	r2,zero,810a98 <isatty+0x40>
  810a78:	e0bffd17 	ldw	r2,-12(fp)
  810a7c:	10800324 	muli	r2,r2,12
  810a80:	1007883a 	mov	r3,r2
  810a84:	00802074 	movhi	r2,129
  810a88:	1096db04 	addi	r2,r2,23404
  810a8c:	1887883a 	add	r3,r3,r2
  810a90:	e0ffff15 	stw	r3,-4(fp)
  810a94:	00000106 	br	810a9c <isatty+0x44>
  810a98:	e03fff15 	stw	zero,-4(fp)
  810a9c:	e0bfff17 	ldw	r2,-4(fp)
  810aa0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810aa4:	e0bfed17 	ldw	r2,-76(fp)
  810aa8:	1005003a 	cmpeq	r2,r2,zero
  810aac:	10000f1e 	bne	r2,zero,810aec <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810ab0:	e0bfed17 	ldw	r2,-76(fp)
  810ab4:	10800017 	ldw	r2,0(r2)
  810ab8:	10800817 	ldw	r2,32(r2)
  810abc:	1004c03a 	cmpne	r2,r2,zero
  810ac0:	1000031e 	bne	r2,zero,810ad0 <isatty+0x78>
    {
      return 1;
  810ac4:	00800044 	movi	r2,1
  810ac8:	e0bffe15 	stw	r2,-8(fp)
  810acc:	00000c06 	br	810b00 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810ad0:	e17fee04 	addi	r5,fp,-72
  810ad4:	e13ffd17 	ldw	r4,-12(fp)
  810ad8:	08107640 	call	810764 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810adc:	e0bfef17 	ldw	r2,-68(fp)
  810ae0:	10880020 	cmpeqi	r2,r2,8192
  810ae4:	e0bffe15 	stw	r2,-8(fp)
  810ae8:	00000506 	br	810b00 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810aec:	0810b180 	call	810b18 <alt_get_errno>
  810af0:	1007883a 	mov	r3,r2
  810af4:	00801444 	movi	r2,81
  810af8:	18800015 	stw	r2,0(r3)
    return 0;
  810afc:	e03ffe15 	stw	zero,-8(fp)
  810b00:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810b04:	e037883a 	mov	sp,fp
  810b08:	dfc00117 	ldw	ra,4(sp)
  810b0c:	df000017 	ldw	fp,0(sp)
  810b10:	dec00204 	addi	sp,sp,8
  810b14:	f800283a 	ret

00810b18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810b18:	defffd04 	addi	sp,sp,-12
  810b1c:	dfc00215 	stw	ra,8(sp)
  810b20:	df000115 	stw	fp,4(sp)
  810b24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810b28:	00802074 	movhi	r2,129
  810b2c:	109bdc04 	addi	r2,r2,28528
  810b30:	10800017 	ldw	r2,0(r2)
  810b34:	1005003a 	cmpeq	r2,r2,zero
  810b38:	1000061e 	bne	r2,zero,810b54 <alt_get_errno+0x3c>
  810b3c:	00802074 	movhi	r2,129
  810b40:	109bdc04 	addi	r2,r2,28528
  810b44:	10800017 	ldw	r2,0(r2)
  810b48:	103ee83a 	callr	r2
  810b4c:	e0bfff15 	stw	r2,-4(fp)
  810b50:	00000306 	br	810b60 <alt_get_errno+0x48>
  810b54:	008020b4 	movhi	r2,130
  810b58:	10a32604 	addi	r2,r2,-29544
  810b5c:	e0bfff15 	stw	r2,-4(fp)
  810b60:	e0bfff17 	ldw	r2,-4(fp)
}
  810b64:	e037883a 	mov	sp,fp
  810b68:	dfc00117 	ldw	ra,4(sp)
  810b6c:	df000017 	ldw	fp,0(sp)
  810b70:	dec00204 	addi	sp,sp,8
  810b74:	f800283a 	ret

00810b78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810b78:	defffe04 	addi	sp,sp,-8
  810b7c:	dfc00115 	stw	ra,4(sp)
  810b80:	df000015 	stw	fp,0(sp)
  810b84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810b88:	01002074 	movhi	r4,129
  810b8c:	211be204 	addi	r4,r4,28552
  810b90:	01402074 	movhi	r5,129
  810b94:	2954ab04 	addi	r5,r5,21164
  810b98:	01802074 	movhi	r6,129
  810b9c:	319be204 	addi	r6,r6,28552
  810ba0:	0810bf80 	call	810bf8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810ba4:	01002034 	movhi	r4,128
  810ba8:	21000804 	addi	r4,r4,32
  810bac:	01402034 	movhi	r5,128
  810bb0:	29400804 	addi	r5,r5,32
  810bb4:	01802034 	movhi	r6,128
  810bb8:	31806d04 	addi	r6,r6,436
  810bbc:	0810bf80 	call	810bf8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810bc0:	01002074 	movhi	r4,129
  810bc4:	2112df04 	addi	r4,r4,19324
  810bc8:	01402074 	movhi	r5,129
  810bcc:	2952df04 	addi	r5,r5,19324
  810bd0:	01802074 	movhi	r6,129
  810bd4:	3194ab04 	addi	r6,r6,21164
  810bd8:	0810bf80 	call	810bf8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810bdc:	0813c800 	call	813c80 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810be0:	081410c0 	call	81410c <alt_icache_flush_all>
}
  810be4:	e037883a 	mov	sp,fp
  810be8:	dfc00117 	ldw	ra,4(sp)
  810bec:	df000017 	ldw	fp,0(sp)
  810bf0:	dec00204 	addi	sp,sp,8
  810bf4:	f800283a 	ret

00810bf8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810bf8:	defffc04 	addi	sp,sp,-16
  810bfc:	df000315 	stw	fp,12(sp)
  810c00:	df000304 	addi	fp,sp,12
  810c04:	e13ffd15 	stw	r4,-12(fp)
  810c08:	e17ffe15 	stw	r5,-8(fp)
  810c0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810c10:	e0fffe17 	ldw	r3,-8(fp)
  810c14:	e0bffd17 	ldw	r2,-12(fp)
  810c18:	18800e26 	beq	r3,r2,810c54 <alt_load_section+0x5c>
  {
    while( to != end )
  810c1c:	00000a06 	br	810c48 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810c20:	e0bffd17 	ldw	r2,-12(fp)
  810c24:	10c00017 	ldw	r3,0(r2)
  810c28:	e0bffe17 	ldw	r2,-8(fp)
  810c2c:	10c00015 	stw	r3,0(r2)
  810c30:	e0bffe17 	ldw	r2,-8(fp)
  810c34:	10800104 	addi	r2,r2,4
  810c38:	e0bffe15 	stw	r2,-8(fp)
  810c3c:	e0bffd17 	ldw	r2,-12(fp)
  810c40:	10800104 	addi	r2,r2,4
  810c44:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810c48:	e0fffe17 	ldw	r3,-8(fp)
  810c4c:	e0bfff17 	ldw	r2,-4(fp)
  810c50:	18bff31e 	bne	r3,r2,810c20 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810c54:	e037883a 	mov	sp,fp
  810c58:	df000017 	ldw	fp,0(sp)
  810c5c:	dec00104 	addi	sp,sp,4
  810c60:	f800283a 	ret

00810c64 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810c64:	defff804 	addi	sp,sp,-32
  810c68:	dfc00715 	stw	ra,28(sp)
  810c6c:	df000615 	stw	fp,24(sp)
  810c70:	df000604 	addi	fp,sp,24
  810c74:	e13ffc15 	stw	r4,-16(fp)
  810c78:	e17ffd15 	stw	r5,-12(fp)
  810c7c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810c80:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810c84:	e0bffc17 	ldw	r2,-16(fp)
  810c88:	1004803a 	cmplt	r2,r2,zero
  810c8c:	1000081e 	bne	r2,zero,810cb0 <lseek+0x4c>
  810c90:	e0bffc17 	ldw	r2,-16(fp)
  810c94:	10800324 	muli	r2,r2,12
  810c98:	1007883a 	mov	r3,r2
  810c9c:	00802074 	movhi	r2,129
  810ca0:	1096db04 	addi	r2,r2,23404
  810ca4:	1887883a 	add	r3,r3,r2
  810ca8:	e0ffff15 	stw	r3,-4(fp)
  810cac:	00000106 	br	810cb4 <lseek+0x50>
  810cb0:	e03fff15 	stw	zero,-4(fp)
  810cb4:	e0bfff17 	ldw	r2,-4(fp)
  810cb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810cbc:	e0bffb17 	ldw	r2,-20(fp)
  810cc0:	1005003a 	cmpeq	r2,r2,zero
  810cc4:	1000111e 	bne	r2,zero,810d0c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810cc8:	e0bffb17 	ldw	r2,-20(fp)
  810ccc:	10800017 	ldw	r2,0(r2)
  810cd0:	10800717 	ldw	r2,28(r2)
  810cd4:	1005003a 	cmpeq	r2,r2,zero
  810cd8:	1000091e 	bne	r2,zero,810d00 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810cdc:	e0bffb17 	ldw	r2,-20(fp)
  810ce0:	10800017 	ldw	r2,0(r2)
  810ce4:	10800717 	ldw	r2,28(r2)
  810ce8:	e13ffb17 	ldw	r4,-20(fp)
  810cec:	e17ffd17 	ldw	r5,-12(fp)
  810cf0:	e1bffe17 	ldw	r6,-8(fp)
  810cf4:	103ee83a 	callr	r2
  810cf8:	e0bffa15 	stw	r2,-24(fp)
  810cfc:	00000506 	br	810d14 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810d00:	00bfde84 	movi	r2,-134
  810d04:	e0bffa15 	stw	r2,-24(fp)
  810d08:	00000206 	br	810d14 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810d0c:	00bfebc4 	movi	r2,-81
  810d10:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810d14:	e0bffa17 	ldw	r2,-24(fp)
  810d18:	1004403a 	cmpge	r2,r2,zero
  810d1c:	1000071e 	bne	r2,zero,810d3c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810d20:	0810d540 	call	810d54 <alt_get_errno>
  810d24:	1007883a 	mov	r3,r2
  810d28:	e0bffa17 	ldw	r2,-24(fp)
  810d2c:	0085c83a 	sub	r2,zero,r2
  810d30:	18800015 	stw	r2,0(r3)
    rc = -1;
  810d34:	00bfffc4 	movi	r2,-1
  810d38:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810d3c:	e0bffa17 	ldw	r2,-24(fp)
}
  810d40:	e037883a 	mov	sp,fp
  810d44:	dfc00117 	ldw	ra,4(sp)
  810d48:	df000017 	ldw	fp,0(sp)
  810d4c:	dec00204 	addi	sp,sp,8
  810d50:	f800283a 	ret

00810d54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810d54:	defffd04 	addi	sp,sp,-12
  810d58:	dfc00215 	stw	ra,8(sp)
  810d5c:	df000115 	stw	fp,4(sp)
  810d60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810d64:	00802074 	movhi	r2,129
  810d68:	109bdc04 	addi	r2,r2,28528
  810d6c:	10800017 	ldw	r2,0(r2)
  810d70:	1005003a 	cmpeq	r2,r2,zero
  810d74:	1000061e 	bne	r2,zero,810d90 <alt_get_errno+0x3c>
  810d78:	00802074 	movhi	r2,129
  810d7c:	109bdc04 	addi	r2,r2,28528
  810d80:	10800017 	ldw	r2,0(r2)
  810d84:	103ee83a 	callr	r2
  810d88:	e0bfff15 	stw	r2,-4(fp)
  810d8c:	00000306 	br	810d9c <alt_get_errno+0x48>
  810d90:	008020b4 	movhi	r2,130
  810d94:	10a32604 	addi	r2,r2,-29544
  810d98:	e0bfff15 	stw	r2,-4(fp)
  810d9c:	e0bfff17 	ldw	r2,-4(fp)
}
  810da0:	e037883a 	mov	sp,fp
  810da4:	dfc00117 	ldw	ra,4(sp)
  810da8:	df000017 	ldw	fp,0(sp)
  810dac:	dec00204 	addi	sp,sp,8
  810db0:	f800283a 	ret

00810db4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810db4:	defffd04 	addi	sp,sp,-12
  810db8:	dfc00215 	stw	ra,8(sp)
  810dbc:	df000115 	stw	fp,4(sp)
  810dc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810dc4:	0009883a 	mov	r4,zero
  810dc8:	08116e40 	call	8116e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810dcc:	08117180 	call	811718 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810dd0:	01002074 	movhi	r4,129
  810dd4:	21149d04 	addi	r4,r4,21108
  810dd8:	01402074 	movhi	r5,129
  810ddc:	29549d04 	addi	r5,r5,21108
  810de0:	01802074 	movhi	r6,129
  810de4:	31949d04 	addi	r6,r6,21108
  810de8:	08144cc0 	call	8144cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810dec:	0813dd80 	call	813dd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810df0:	01002074 	movhi	r4,129
  810df4:	210f8f04 	addi	r4,r4,15932
  810df8:	08147700 	call	814770 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810dfc:	d1276217 	ldw	r4,-25208(gp)
  810e00:	d1676317 	ldw	r5,-25204(gp)
  810e04:	d1a76417 	ldw	r6,-25200(gp)
  810e08:	0800ddc0 	call	800ddc <main>
  810e0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810e10:	01000044 	movi	r4,1
  810e14:	08105dc0 	call	8105dc <close>
  exit (result);
  810e18:	e13fff17 	ldw	r4,-4(fp)
  810e1c:	08147840 	call	814784 <exit>

00810e20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810e20:	defffe04 	addi	sp,sp,-8
  810e24:	df000115 	stw	fp,4(sp)
  810e28:	df000104 	addi	fp,sp,4
  810e2c:	e13fff15 	stw	r4,-4(fp)
}
  810e30:	e037883a 	mov	sp,fp
  810e34:	df000017 	ldw	fp,0(sp)
  810e38:	dec00104 	addi	sp,sp,4
  810e3c:	f800283a 	ret

00810e40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810e40:	defffe04 	addi	sp,sp,-8
  810e44:	df000115 	stw	fp,4(sp)
  810e48:	df000104 	addi	fp,sp,4
  810e4c:	e13fff15 	stw	r4,-4(fp)
}
  810e50:	e037883a 	mov	sp,fp
  810e54:	df000017 	ldw	fp,0(sp)
  810e58:	dec00104 	addi	sp,sp,4
  810e5c:	f800283a 	ret

00810e60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810e60:	defffc04 	addi	sp,sp,-16
  810e64:	df000315 	stw	fp,12(sp)
  810e68:	df000304 	addi	fp,sp,12
  810e6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810e70:	e0bffe17 	ldw	r2,-8(fp)
  810e74:	10800217 	ldw	r2,8(r2)
  810e78:	10d00034 	orhi	r3,r2,16384
  810e7c:	e0bffe17 	ldw	r2,-8(fp)
  810e80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810e84:	e03ffd15 	stw	zero,-12(fp)
  810e88:	00002006 	br	810f0c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810e8c:	e0bffd17 	ldw	r2,-12(fp)
  810e90:	00c02074 	movhi	r3,129
  810e94:	18d6db04 	addi	r3,r3,23404
  810e98:	10800324 	muli	r2,r2,12
  810e9c:	10c5883a 	add	r2,r2,r3
  810ea0:	10c00017 	ldw	r3,0(r2)
  810ea4:	e0bffe17 	ldw	r2,-8(fp)
  810ea8:	10800017 	ldw	r2,0(r2)
  810eac:	1880141e 	bne	r3,r2,810f00 <alt_file_locked+0xa0>
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	00c02074 	movhi	r3,129
  810eb8:	18d6db04 	addi	r3,r3,23404
  810ebc:	10800324 	muli	r2,r2,12
  810ec0:	10c5883a 	add	r2,r2,r3
  810ec4:	10800204 	addi	r2,r2,8
  810ec8:	10800017 	ldw	r2,0(r2)
  810ecc:	1004403a 	cmpge	r2,r2,zero
  810ed0:	10000b1e 	bne	r2,zero,810f00 <alt_file_locked+0xa0>
  810ed4:	e0bffd17 	ldw	r2,-12(fp)
  810ed8:	10800324 	muli	r2,r2,12
  810edc:	1007883a 	mov	r3,r2
  810ee0:	00802074 	movhi	r2,129
  810ee4:	1096db04 	addi	r2,r2,23404
  810ee8:	1887883a 	add	r3,r3,r2
  810eec:	e0bffe17 	ldw	r2,-8(fp)
  810ef0:	18800326 	beq	r3,r2,810f00 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810ef4:	00bffcc4 	movi	r2,-13
  810ef8:	e0bfff15 	stw	r2,-4(fp)
  810efc:	00000a06 	br	810f28 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810f00:	e0bffd17 	ldw	r2,-12(fp)
  810f04:	10800044 	addi	r2,r2,1
  810f08:	e0bffd15 	stw	r2,-12(fp)
  810f0c:	00802074 	movhi	r2,129
  810f10:	109bdb04 	addi	r2,r2,28524
  810f14:	10800017 	ldw	r2,0(r2)
  810f18:	1007883a 	mov	r3,r2
  810f1c:	e0bffd17 	ldw	r2,-12(fp)
  810f20:	18bfda2e 	bgeu	r3,r2,810e8c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810f24:	e03fff15 	stw	zero,-4(fp)
  810f28:	e0bfff17 	ldw	r2,-4(fp)
}
  810f2c:	e037883a 	mov	sp,fp
  810f30:	df000017 	ldw	fp,0(sp)
  810f34:	dec00104 	addi	sp,sp,4
  810f38:	f800283a 	ret

00810f3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810f3c:	defff404 	addi	sp,sp,-48
  810f40:	dfc00b15 	stw	ra,44(sp)
  810f44:	df000a15 	stw	fp,40(sp)
  810f48:	df000a04 	addi	fp,sp,40
  810f4c:	e13ffb15 	stw	r4,-20(fp)
  810f50:	e17ffc15 	stw	r5,-16(fp)
  810f54:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810f58:	00bfffc4 	movi	r2,-1
  810f5c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  810f60:	00bffb44 	movi	r2,-19
  810f64:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  810f68:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810f6c:	e13ffb17 	ldw	r4,-20(fp)
  810f70:	01402074 	movhi	r5,129
  810f74:	295bd904 	addi	r5,r5,28516
  810f78:	0813ea00 	call	813ea0 <alt_find_dev>
  810f7c:	e0bffa15 	stw	r2,-24(fp)
  810f80:	e0bffa17 	ldw	r2,-24(fp)
  810f84:	1004c03a 	cmpne	r2,r2,zero
  810f88:	1000051e 	bne	r2,zero,810fa0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810f8c:	e13ffb17 	ldw	r4,-20(fp)
  810f90:	0813f340 	call	813f34 <alt_find_file>
  810f94:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  810f98:	00800044 	movi	r2,1
  810f9c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810fa0:	e0bffa17 	ldw	r2,-24(fp)
  810fa4:	1005003a 	cmpeq	r2,r2,zero
  810fa8:	1000301e 	bne	r2,zero,81106c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810fac:	e13ffa17 	ldw	r4,-24(fp)
  810fb0:	08140540 	call	814054 <alt_get_fd>
  810fb4:	e0bff815 	stw	r2,-32(fp)
  810fb8:	e0bff817 	ldw	r2,-32(fp)
  810fbc:	1004403a 	cmpge	r2,r2,zero
  810fc0:	1000031e 	bne	r2,zero,810fd0 <open+0x94>
    {
      status = index;
  810fc4:	e0bff817 	ldw	r2,-32(fp)
  810fc8:	e0bff715 	stw	r2,-36(fp)
  810fcc:	00002906 	br	811074 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  810fd0:	e0bff817 	ldw	r2,-32(fp)
  810fd4:	10800324 	muli	r2,r2,12
  810fd8:	1007883a 	mov	r3,r2
  810fdc:	00802074 	movhi	r2,129
  810fe0:	1096db04 	addi	r2,r2,23404
  810fe4:	1885883a 	add	r2,r3,r2
  810fe8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810fec:	e0fffc17 	ldw	r3,-16(fp)
  810ff0:	00900034 	movhi	r2,16384
  810ff4:	10bfffc4 	addi	r2,r2,-1
  810ff8:	1886703a 	and	r3,r3,r2
  810ffc:	e0bff917 	ldw	r2,-28(fp)
  811000:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811004:	e0bff617 	ldw	r2,-40(fp)
  811008:	1004c03a 	cmpne	r2,r2,zero
  81100c:	1000061e 	bne	r2,zero,811028 <open+0xec>
  811010:	e13ff917 	ldw	r4,-28(fp)
  811014:	0810e600 	call	810e60 <alt_file_locked>
  811018:	e0bff715 	stw	r2,-36(fp)
  81101c:	e0bff717 	ldw	r2,-36(fp)
  811020:	1004803a 	cmplt	r2,r2,zero
  811024:	1000131e 	bne	r2,zero,811074 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811028:	e0bffa17 	ldw	r2,-24(fp)
  81102c:	10800317 	ldw	r2,12(r2)
  811030:	1005003a 	cmpeq	r2,r2,zero
  811034:	1000091e 	bne	r2,zero,81105c <open+0x120>
  811038:	e0bffa17 	ldw	r2,-24(fp)
  81103c:	10800317 	ldw	r2,12(r2)
  811040:	e13ff917 	ldw	r4,-28(fp)
  811044:	e17ffb17 	ldw	r5,-20(fp)
  811048:	e1bffc17 	ldw	r6,-16(fp)
  81104c:	e1fffd17 	ldw	r7,-12(fp)
  811050:	103ee83a 	callr	r2
  811054:	e0bfff15 	stw	r2,-4(fp)
  811058:	00000106 	br	811060 <open+0x124>
  81105c:	e03fff15 	stw	zero,-4(fp)
  811060:	e0bfff17 	ldw	r2,-4(fp)
  811064:	e0bff715 	stw	r2,-36(fp)
  811068:	00000206 	br	811074 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81106c:	00bffb44 	movi	r2,-19
  811070:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811074:	e0bff717 	ldw	r2,-36(fp)
  811078:	1004403a 	cmpge	r2,r2,zero
  81107c:	1000091e 	bne	r2,zero,8110a4 <open+0x168>
  {
    alt_release_fd (index);  
  811080:	e13ff817 	ldw	r4,-32(fp)
  811084:	08112a40 	call	8112a4 <alt_release_fd>
    ALT_ERRNO = -status;
  811088:	08110c40 	call	8110c4 <alt_get_errno>
  81108c:	e0fff717 	ldw	r3,-36(fp)
  811090:	00c7c83a 	sub	r3,zero,r3
  811094:	10c00015 	stw	r3,0(r2)
    return -1;
  811098:	00bfffc4 	movi	r2,-1
  81109c:	e0bffe15 	stw	r2,-8(fp)
  8110a0:	00000206 	br	8110ac <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  8110a4:	e0bff817 	ldw	r2,-32(fp)
  8110a8:	e0bffe15 	stw	r2,-8(fp)
  8110ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8110b0:	e037883a 	mov	sp,fp
  8110b4:	dfc00117 	ldw	ra,4(sp)
  8110b8:	df000017 	ldw	fp,0(sp)
  8110bc:	dec00204 	addi	sp,sp,8
  8110c0:	f800283a 	ret

008110c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8110c4:	defffd04 	addi	sp,sp,-12
  8110c8:	dfc00215 	stw	ra,8(sp)
  8110cc:	df000115 	stw	fp,4(sp)
  8110d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8110d4:	00802074 	movhi	r2,129
  8110d8:	109bdc04 	addi	r2,r2,28528
  8110dc:	10800017 	ldw	r2,0(r2)
  8110e0:	1005003a 	cmpeq	r2,r2,zero
  8110e4:	1000061e 	bne	r2,zero,811100 <alt_get_errno+0x3c>
  8110e8:	00802074 	movhi	r2,129
  8110ec:	109bdc04 	addi	r2,r2,28528
  8110f0:	10800017 	ldw	r2,0(r2)
  8110f4:	103ee83a 	callr	r2
  8110f8:	e0bfff15 	stw	r2,-4(fp)
  8110fc:	00000306 	br	81110c <alt_get_errno+0x48>
  811100:	008020b4 	movhi	r2,130
  811104:	10a32604 	addi	r2,r2,-29544
  811108:	e0bfff15 	stw	r2,-4(fp)
  81110c:	e0bfff17 	ldw	r2,-4(fp)
}
  811110:	e037883a 	mov	sp,fp
  811114:	dfc00117 	ldw	ra,4(sp)
  811118:	df000017 	ldw	fp,0(sp)
  81111c:	dec00204 	addi	sp,sp,8
  811120:	f800283a 	ret

00811124 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  811124:	defff704 	addi	sp,sp,-36
  811128:	dfc00815 	stw	ra,32(sp)
  81112c:	df000715 	stw	fp,28(sp)
  811130:	df000704 	addi	fp,sp,28
  811134:	e13ffb15 	stw	r4,-20(fp)
  811138:	e17ffc15 	stw	r5,-16(fp)
  81113c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811140:	e0bffb17 	ldw	r2,-20(fp)
  811144:	1004803a 	cmplt	r2,r2,zero
  811148:	1000081e 	bne	r2,zero,81116c <read+0x48>
  81114c:	e0bffb17 	ldw	r2,-20(fp)
  811150:	10800324 	muli	r2,r2,12
  811154:	1007883a 	mov	r3,r2
  811158:	00802074 	movhi	r2,129
  81115c:	1096db04 	addi	r2,r2,23404
  811160:	1887883a 	add	r3,r3,r2
  811164:	e0ffff15 	stw	r3,-4(fp)
  811168:	00000106 	br	811170 <read+0x4c>
  81116c:	e03fff15 	stw	zero,-4(fp)
  811170:	e0bfff17 	ldw	r2,-4(fp)
  811174:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811178:	e0bffa17 	ldw	r2,-24(fp)
  81117c:	1005003a 	cmpeq	r2,r2,zero
  811180:	1000241e 	bne	r2,zero,811214 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811184:	e0bffa17 	ldw	r2,-24(fp)
  811188:	10800217 	ldw	r2,8(r2)
  81118c:	108000cc 	andi	r2,r2,3
  811190:	10800060 	cmpeqi	r2,r2,1
  811194:	10001a1e 	bne	r2,zero,811200 <read+0xdc>
  811198:	e0bffa17 	ldw	r2,-24(fp)
  81119c:	10800017 	ldw	r2,0(r2)
  8111a0:	10800517 	ldw	r2,20(r2)
  8111a4:	1005003a 	cmpeq	r2,r2,zero
  8111a8:	1000151e 	bne	r2,zero,811200 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8111ac:	e0bffa17 	ldw	r2,-24(fp)
  8111b0:	10800017 	ldw	r2,0(r2)
  8111b4:	10800517 	ldw	r2,20(r2)
  8111b8:	e17ffc17 	ldw	r5,-16(fp)
  8111bc:	e1bffd17 	ldw	r6,-12(fp)
  8111c0:	e13ffa17 	ldw	r4,-24(fp)
  8111c4:	103ee83a 	callr	r2
  8111c8:	e0bff915 	stw	r2,-28(fp)
  8111cc:	e0bff917 	ldw	r2,-28(fp)
  8111d0:	1004403a 	cmpge	r2,r2,zero
  8111d4:	1000071e 	bne	r2,zero,8111f4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  8111d8:	08112440 	call	811244 <alt_get_errno>
  8111dc:	e0fff917 	ldw	r3,-28(fp)
  8111e0:	00c7c83a 	sub	r3,zero,r3
  8111e4:	10c00015 	stw	r3,0(r2)
          return -1;
  8111e8:	00bfffc4 	movi	r2,-1
  8111ec:	e0bffe15 	stw	r2,-8(fp)
  8111f0:	00000e06 	br	81122c <read+0x108>
        }
        return rval;
  8111f4:	e0bff917 	ldw	r2,-28(fp)
  8111f8:	e0bffe15 	stw	r2,-8(fp)
  8111fc:	00000b06 	br	81122c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811200:	08112440 	call	811244 <alt_get_errno>
  811204:	1007883a 	mov	r3,r2
  811208:	00800344 	movi	r2,13
  81120c:	18800015 	stw	r2,0(r3)
  811210:	00000406 	br	811224 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811214:	08112440 	call	811244 <alt_get_errno>
  811218:	1007883a 	mov	r3,r2
  81121c:	00801444 	movi	r2,81
  811220:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811224:	00bfffc4 	movi	r2,-1
  811228:	e0bffe15 	stw	r2,-8(fp)
  81122c:	e0bffe17 	ldw	r2,-8(fp)
}
  811230:	e037883a 	mov	sp,fp
  811234:	dfc00117 	ldw	ra,4(sp)
  811238:	df000017 	ldw	fp,0(sp)
  81123c:	dec00204 	addi	sp,sp,8
  811240:	f800283a 	ret

00811244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811244:	defffd04 	addi	sp,sp,-12
  811248:	dfc00215 	stw	ra,8(sp)
  81124c:	df000115 	stw	fp,4(sp)
  811250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811254:	00802074 	movhi	r2,129
  811258:	109bdc04 	addi	r2,r2,28528
  81125c:	10800017 	ldw	r2,0(r2)
  811260:	1005003a 	cmpeq	r2,r2,zero
  811264:	1000061e 	bne	r2,zero,811280 <alt_get_errno+0x3c>
  811268:	00802074 	movhi	r2,129
  81126c:	109bdc04 	addi	r2,r2,28528
  811270:	10800017 	ldw	r2,0(r2)
  811274:	103ee83a 	callr	r2
  811278:	e0bfff15 	stw	r2,-4(fp)
  81127c:	00000306 	br	81128c <alt_get_errno+0x48>
  811280:	008020b4 	movhi	r2,130
  811284:	10a32604 	addi	r2,r2,-29544
  811288:	e0bfff15 	stw	r2,-4(fp)
  81128c:	e0bfff17 	ldw	r2,-4(fp)
}
  811290:	e037883a 	mov	sp,fp
  811294:	dfc00117 	ldw	ra,4(sp)
  811298:	df000017 	ldw	fp,0(sp)
  81129c:	dec00204 	addi	sp,sp,8
  8112a0:	f800283a 	ret

008112a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8112a4:	defffe04 	addi	sp,sp,-8
  8112a8:	df000115 	stw	fp,4(sp)
  8112ac:	df000104 	addi	fp,sp,4
  8112b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8112b4:	e0bfff17 	ldw	r2,-4(fp)
  8112b8:	108000d0 	cmplti	r2,r2,3
  8112bc:	10000d1e 	bne	r2,zero,8112f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8112c0:	e0bfff17 	ldw	r2,-4(fp)
  8112c4:	00c02074 	movhi	r3,129
  8112c8:	18d6db04 	addi	r3,r3,23404
  8112cc:	10800324 	muli	r2,r2,12
  8112d0:	10c5883a 	add	r2,r2,r3
  8112d4:	10800204 	addi	r2,r2,8
  8112d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8112dc:	e0bfff17 	ldw	r2,-4(fp)
  8112e0:	00c02074 	movhi	r3,129
  8112e4:	18d6db04 	addi	r3,r3,23404
  8112e8:	10800324 	muli	r2,r2,12
  8112ec:	10c5883a 	add	r2,r2,r3
  8112f0:	10000015 	stw	zero,0(r2)
  }
}
  8112f4:	e037883a 	mov	sp,fp
  8112f8:	df000017 	ldw	fp,0(sp)
  8112fc:	dec00104 	addi	sp,sp,4
  811300:	f800283a 	ret

00811304 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  811304:	defff804 	addi	sp,sp,-32
  811308:	df000715 	stw	fp,28(sp)
  81130c:	df000704 	addi	fp,sp,28
  811310:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811314:	0005303a 	rdctl	r2,status
  811318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81131c:	e0fffb17 	ldw	r3,-20(fp)
  811320:	00bfff84 	movi	r2,-2
  811324:	1884703a 	and	r2,r3,r2
  811328:	1001703a 	wrctl	status,r2
  
  return context;
  81132c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811330:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811334:	d0a01217 	ldw	r2,-32696(gp)
  811338:	10c000c4 	addi	r3,r2,3
  81133c:	00bfff04 	movi	r2,-4
  811340:	1884703a 	and	r2,r3,r2
  811344:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811348:	d0e01217 	ldw	r3,-32696(gp)
  81134c:	e0bffe17 	ldw	r2,-8(fp)
  811350:	1887883a 	add	r3,r3,r2
  811354:	00804034 	movhi	r2,256
  811358:	10800004 	addi	r2,r2,0
  81135c:	10c0072e 	bgeu	r2,r3,81137c <sbrk+0x78>
  811360:	e0bffd17 	ldw	r2,-12(fp)
  811364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811368:	e0bffa17 	ldw	r2,-24(fp)
  81136c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811370:	00bfffc4 	movi	r2,-1
  811374:	e0bfff15 	stw	r2,-4(fp)
  811378:	00000c06 	br	8113ac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  81137c:	d0a01217 	ldw	r2,-32696(gp)
  811380:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811384:	d0e01217 	ldw	r3,-32696(gp)
  811388:	e0bffe17 	ldw	r2,-8(fp)
  81138c:	1885883a 	add	r2,r3,r2
  811390:	d0a01215 	stw	r2,-32696(gp)
  811394:	e0bffd17 	ldw	r2,-12(fp)
  811398:	e0bff915 	stw	r2,-28(fp)
  81139c:	e0bff917 	ldw	r2,-28(fp)
  8113a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8113a4:	e0bffc17 	ldw	r2,-16(fp)
  8113a8:	e0bfff15 	stw	r2,-4(fp)
  8113ac:	e0bfff17 	ldw	r2,-4(fp)
} 
  8113b0:	e037883a 	mov	sp,fp
  8113b4:	df000017 	ldw	fp,0(sp)
  8113b8:	dec00104 	addi	sp,sp,4
  8113bc:	f800283a 	ret

008113c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8113c0:	defffa04 	addi	sp,sp,-24
  8113c4:	df000515 	stw	fp,20(sp)
  8113c8:	df000504 	addi	fp,sp,20
  8113cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113d0:	0005303a 	rdctl	r2,status
  8113d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113d8:	e0fffd17 	ldw	r3,-12(fp)
  8113dc:	00bfff84 	movi	r2,-2
  8113e0:	1884703a 	and	r2,r3,r2
  8113e4:	1001703a 	wrctl	status,r2
  
  return context;
  8113e8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8113ec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8113f0:	e0bfff17 	ldw	r2,-4(fp)
  8113f4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8113f8:	e0bffc17 	ldw	r2,-16(fp)
  8113fc:	10c00017 	ldw	r3,0(r2)
  811400:	e0bffc17 	ldw	r2,-16(fp)
  811404:	10800117 	ldw	r2,4(r2)
  811408:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81140c:	e0bffc17 	ldw	r2,-16(fp)
  811410:	10c00117 	ldw	r3,4(r2)
  811414:	e0bffc17 	ldw	r2,-16(fp)
  811418:	10800017 	ldw	r2,0(r2)
  81141c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811420:	e0fffc17 	ldw	r3,-16(fp)
  811424:	e0bffc17 	ldw	r2,-16(fp)
  811428:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81142c:	e0fffc17 	ldw	r3,-16(fp)
  811430:	e0bffc17 	ldw	r2,-16(fp)
  811434:	18800015 	stw	r2,0(r3)
  811438:	e0bffe17 	ldw	r2,-8(fp)
  81143c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811440:	e0bffb17 	ldw	r2,-20(fp)
  811444:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811448:	e037883a 	mov	sp,fp
  81144c:	df000017 	ldw	fp,0(sp)
  811450:	dec00104 	addi	sp,sp,4
  811454:	f800283a 	ret

00811458 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811458:	defffb04 	addi	sp,sp,-20
  81145c:	dfc00415 	stw	ra,16(sp)
  811460:	df000315 	stw	fp,12(sp)
  811464:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811468:	d0a01317 	ldw	r2,-32692(gp)
  81146c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811470:	d0a76617 	ldw	r2,-25192(gp)
  811474:	10800044 	addi	r2,r2,1
  811478:	d0a76615 	stw	r2,-25192(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81147c:	00003106 	br	811544 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  811480:	e0bffe17 	ldw	r2,-8(fp)
  811484:	10800017 	ldw	r2,0(r2)
  811488:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81148c:	e0bffe17 	ldw	r2,-8(fp)
  811490:	10800403 	ldbu	r2,16(r2)
  811494:	10803fcc 	andi	r2,r2,255
  811498:	1005003a 	cmpeq	r2,r2,zero
  81149c:	1000051e 	bne	r2,zero,8114b4 <alt_tick+0x5c>
  8114a0:	d0a76617 	ldw	r2,-25192(gp)
  8114a4:	1004c03a 	cmpne	r2,r2,zero
  8114a8:	1000021e 	bne	r2,zero,8114b4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8114ac:	e0bffe17 	ldw	r2,-8(fp)
  8114b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8114b4:	e0bffe17 	ldw	r2,-8(fp)
  8114b8:	10c00217 	ldw	r3,8(r2)
  8114bc:	d0a76617 	ldw	r2,-25192(gp)
  8114c0:	10c01e36 	bltu	r2,r3,81153c <alt_tick+0xe4>
  8114c4:	e0bffe17 	ldw	r2,-8(fp)
  8114c8:	10800403 	ldbu	r2,16(r2)
  8114cc:	10803fcc 	andi	r2,r2,255
  8114d0:	1004c03a 	cmpne	r2,r2,zero
  8114d4:	1000191e 	bne	r2,zero,81153c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8114d8:	e0bffe17 	ldw	r2,-8(fp)
  8114dc:	10c00317 	ldw	r3,12(r2)
  8114e0:	e0bffe17 	ldw	r2,-8(fp)
  8114e4:	11000517 	ldw	r4,20(r2)
  8114e8:	183ee83a 	callr	r3
  8114ec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8114f0:	e0bffd17 	ldw	r2,-12(fp)
  8114f4:	1004c03a 	cmpne	r2,r2,zero
  8114f8:	1000031e 	bne	r2,zero,811508 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8114fc:	e13ffe17 	ldw	r4,-8(fp)
  811500:	08113c00 	call	8113c0 <alt_alarm_stop>
  811504:	00000d06 	br	81153c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811508:	e0bffe17 	ldw	r2,-8(fp)
  81150c:	10c00217 	ldw	r3,8(r2)
  811510:	e0bffd17 	ldw	r2,-12(fp)
  811514:	1887883a 	add	r3,r3,r2
  811518:	e0bffe17 	ldw	r2,-8(fp)
  81151c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811520:	e0bffe17 	ldw	r2,-8(fp)
  811524:	10c00217 	ldw	r3,8(r2)
  811528:	d0a76617 	ldw	r2,-25192(gp)
  81152c:	1880032e 	bgeu	r3,r2,81153c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811530:	e0fffe17 	ldw	r3,-8(fp)
  811534:	00800044 	movi	r2,1
  811538:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81153c:	e0bfff17 	ldw	r2,-4(fp)
  811540:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811544:	d0e01304 	addi	r3,gp,-32692
  811548:	e0bffe17 	ldw	r2,-8(fp)
  81154c:	10ffcc1e 	bne	r2,r3,811480 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  811550:	e037883a 	mov	sp,fp
  811554:	dfc00117 	ldw	ra,4(sp)
  811558:	df000017 	ldw	fp,0(sp)
  81155c:	dec00204 	addi	sp,sp,8
  811560:	f800283a 	ret

00811564 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811564:	defff704 	addi	sp,sp,-36
  811568:	dfc00815 	stw	ra,32(sp)
  81156c:	df000715 	stw	fp,28(sp)
  811570:	df000704 	addi	fp,sp,28
  811574:	e13ffb15 	stw	r4,-20(fp)
  811578:	e17ffc15 	stw	r5,-16(fp)
  81157c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811580:	e0bffb17 	ldw	r2,-20(fp)
  811584:	1004803a 	cmplt	r2,r2,zero
  811588:	1000081e 	bne	r2,zero,8115ac <write+0x48>
  81158c:	e0bffb17 	ldw	r2,-20(fp)
  811590:	10800324 	muli	r2,r2,12
  811594:	1007883a 	mov	r3,r2
  811598:	00802074 	movhi	r2,129
  81159c:	1096db04 	addi	r2,r2,23404
  8115a0:	1887883a 	add	r3,r3,r2
  8115a4:	e0ffff15 	stw	r3,-4(fp)
  8115a8:	00000106 	br	8115b0 <write+0x4c>
  8115ac:	e03fff15 	stw	zero,-4(fp)
  8115b0:	e0bfff17 	ldw	r2,-4(fp)
  8115b4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8115b8:	e0bffa17 	ldw	r2,-24(fp)
  8115bc:	1005003a 	cmpeq	r2,r2,zero
  8115c0:	1000241e 	bne	r2,zero,811654 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8115c4:	e0bffa17 	ldw	r2,-24(fp)
  8115c8:	10800217 	ldw	r2,8(r2)
  8115cc:	108000cc 	andi	r2,r2,3
  8115d0:	1005003a 	cmpeq	r2,r2,zero
  8115d4:	10001a1e 	bne	r2,zero,811640 <write+0xdc>
  8115d8:	e0bffa17 	ldw	r2,-24(fp)
  8115dc:	10800017 	ldw	r2,0(r2)
  8115e0:	10800617 	ldw	r2,24(r2)
  8115e4:	1005003a 	cmpeq	r2,r2,zero
  8115e8:	1000151e 	bne	r2,zero,811640 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8115ec:	e0bffa17 	ldw	r2,-24(fp)
  8115f0:	10800017 	ldw	r2,0(r2)
  8115f4:	10800617 	ldw	r2,24(r2)
  8115f8:	e17ffc17 	ldw	r5,-16(fp)
  8115fc:	e1bffd17 	ldw	r6,-12(fp)
  811600:	e13ffa17 	ldw	r4,-24(fp)
  811604:	103ee83a 	callr	r2
  811608:	e0bff915 	stw	r2,-28(fp)
  81160c:	e0bff917 	ldw	r2,-28(fp)
  811610:	1004403a 	cmpge	r2,r2,zero
  811614:	1000071e 	bne	r2,zero,811634 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  811618:	08116840 	call	811684 <alt_get_errno>
  81161c:	e0fff917 	ldw	r3,-28(fp)
  811620:	00c7c83a 	sub	r3,zero,r3
  811624:	10c00015 	stw	r3,0(r2)
        return -1;
  811628:	00bfffc4 	movi	r2,-1
  81162c:	e0bffe15 	stw	r2,-8(fp)
  811630:	00000e06 	br	81166c <write+0x108>
      }
      return rval;
  811634:	e0bff917 	ldw	r2,-28(fp)
  811638:	e0bffe15 	stw	r2,-8(fp)
  81163c:	00000b06 	br	81166c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811640:	08116840 	call	811684 <alt_get_errno>
  811644:	1007883a 	mov	r3,r2
  811648:	00800344 	movi	r2,13
  81164c:	18800015 	stw	r2,0(r3)
  811650:	00000406 	br	811664 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811654:	08116840 	call	811684 <alt_get_errno>
  811658:	1007883a 	mov	r3,r2
  81165c:	00801444 	movi	r2,81
  811660:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811664:	00bfffc4 	movi	r2,-1
  811668:	e0bffe15 	stw	r2,-8(fp)
  81166c:	e0bffe17 	ldw	r2,-8(fp)
}
  811670:	e037883a 	mov	sp,fp
  811674:	dfc00117 	ldw	ra,4(sp)
  811678:	df000017 	ldw	fp,0(sp)
  81167c:	dec00204 	addi	sp,sp,8
  811680:	f800283a 	ret

00811684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811684:	defffd04 	addi	sp,sp,-12
  811688:	dfc00215 	stw	ra,8(sp)
  81168c:	df000115 	stw	fp,4(sp)
  811690:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811694:	00802074 	movhi	r2,129
  811698:	109bdc04 	addi	r2,r2,28528
  81169c:	10800017 	ldw	r2,0(r2)
  8116a0:	1005003a 	cmpeq	r2,r2,zero
  8116a4:	1000061e 	bne	r2,zero,8116c0 <alt_get_errno+0x3c>
  8116a8:	00802074 	movhi	r2,129
  8116ac:	109bdc04 	addi	r2,r2,28528
  8116b0:	10800017 	ldw	r2,0(r2)
  8116b4:	103ee83a 	callr	r2
  8116b8:	e0bfff15 	stw	r2,-4(fp)
  8116bc:	00000306 	br	8116cc <alt_get_errno+0x48>
  8116c0:	008020b4 	movhi	r2,130
  8116c4:	10a32604 	addi	r2,r2,-29544
  8116c8:	e0bfff15 	stw	r2,-4(fp)
  8116cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8116d0:	e037883a 	mov	sp,fp
  8116d4:	dfc00117 	ldw	ra,4(sp)
  8116d8:	df000017 	ldw	fp,0(sp)
  8116dc:	dec00204 	addi	sp,sp,8
  8116e0:	f800283a 	ret

008116e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8116e4:	defffd04 	addi	sp,sp,-12
  8116e8:	dfc00215 	stw	ra,8(sp)
  8116ec:	df000115 	stw	fp,4(sp)
  8116f0:	df000104 	addi	fp,sp,4
  8116f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8116f8:	08145740 	call	814574 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8116fc:	00800044 	movi	r2,1
  811700:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811704:	e037883a 	mov	sp,fp
  811708:	dfc00117 	ldw	ra,4(sp)
  81170c:	df000017 	ldw	fp,0(sp)
  811710:	dec00204 	addi	sp,sp,8
  811714:	f800283a 	ret

00811718 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811718:	defffe04 	addi	sp,sp,-8
  81171c:	dfc00115 	stw	ra,4(sp)
  811720:	df000015 	stw	fp,0(sp)
  811724:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811728:	01004074 	movhi	r4,257
  81172c:	21040804 	addi	r4,r4,4128
  811730:	000b883a 	mov	r5,zero
  811734:	01800084 	movi	r6,2
  811738:	01c0fa04 	movi	r7,1000
  81173c:	08132400 	call	813240 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811740:	01002074 	movhi	r4,129
  811744:	21174504 	addi	r4,r4,23828
  811748:	000b883a 	mov	r5,zero
  81174c:	01800044 	movi	r6,1
  811750:	081192c0 	call	81192c <altera_avalon_jtag_uart_init>
  811754:	01002074 	movhi	r4,129
  811758:	21173b04 	addi	r4,r4,23788
  81175c:	08117ac0 	call	8117ac <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811760:	01002074 	movhi	r4,129
  811764:	211b5d04 	addi	r4,r4,28020
  811768:	081303c0 	call	81303c <altera_avalon_lcd_16207_init>
  81176c:	01002074 	movhi	r4,129
  811770:	211b5304 	addi	r4,r4,27980
  811774:	08117ac0 	call	8117ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811778:	01002074 	movhi	r4,129
  81177c:	211ba504 	addi	r4,r4,28308
  811780:	000b883a 	mov	r5,zero
  811784:	000d883a 	mov	r6,zero
  811788:	08133c80 	call	8133c8 <altera_avalon_uart_init>
  81178c:	01002074 	movhi	r4,129
  811790:	211b9b04 	addi	r4,r4,28268
  811794:	08117ac0 	call	8117ac <alt_dev_reg>
}
  811798:	e037883a 	mov	sp,fp
  81179c:	dfc00117 	ldw	ra,4(sp)
  8117a0:	df000017 	ldw	fp,0(sp)
  8117a4:	dec00204 	addi	sp,sp,8
  8117a8:	f800283a 	ret

008117ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8117ac:	defffd04 	addi	sp,sp,-12
  8117b0:	dfc00215 	stw	ra,8(sp)
  8117b4:	df000115 	stw	fp,4(sp)
  8117b8:	df000104 	addi	fp,sp,4
  8117bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8117c0:	e13fff17 	ldw	r4,-4(fp)
  8117c4:	01402074 	movhi	r5,129
  8117c8:	295bd904 	addi	r5,r5,28516
  8117cc:	0813cc40 	call	813cc4 <alt_dev_llist_insert>
}
  8117d0:	e037883a 	mov	sp,fp
  8117d4:	dfc00117 	ldw	ra,4(sp)
  8117d8:	df000017 	ldw	fp,0(sp)
  8117dc:	dec00204 	addi	sp,sp,8
  8117e0:	f800283a 	ret

008117e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8117e4:	defffa04 	addi	sp,sp,-24
  8117e8:	dfc00515 	stw	ra,20(sp)
  8117ec:	df000415 	stw	fp,16(sp)
  8117f0:	df000404 	addi	fp,sp,16
  8117f4:	e13ffd15 	stw	r4,-12(fp)
  8117f8:	e17ffe15 	stw	r5,-8(fp)
  8117fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811800:	e0bffd17 	ldw	r2,-12(fp)
  811804:	10800017 	ldw	r2,0(r2)
  811808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81180c:	e0bffc17 	ldw	r2,-16(fp)
  811810:	11000a04 	addi	r4,r2,40
  811814:	e0bffd17 	ldw	r2,-12(fp)
  811818:	11c00217 	ldw	r7,8(r2)
  81181c:	e17ffe17 	ldw	r5,-8(fp)
  811820:	e1bfff17 	ldw	r6,-4(fp)
  811824:	0811e2c0 	call	811e2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811828:	e037883a 	mov	sp,fp
  81182c:	dfc00117 	ldw	ra,4(sp)
  811830:	df000017 	ldw	fp,0(sp)
  811834:	dec00204 	addi	sp,sp,8
  811838:	f800283a 	ret

0081183c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81183c:	defffa04 	addi	sp,sp,-24
  811840:	dfc00515 	stw	ra,20(sp)
  811844:	df000415 	stw	fp,16(sp)
  811848:	df000404 	addi	fp,sp,16
  81184c:	e13ffd15 	stw	r4,-12(fp)
  811850:	e17ffe15 	stw	r5,-8(fp)
  811854:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811858:	e0bffd17 	ldw	r2,-12(fp)
  81185c:	10800017 	ldw	r2,0(r2)
  811860:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811864:	e0bffc17 	ldw	r2,-16(fp)
  811868:	11000a04 	addi	r4,r2,40
  81186c:	e0bffd17 	ldw	r2,-12(fp)
  811870:	11c00217 	ldw	r7,8(r2)
  811874:	e17ffe17 	ldw	r5,-8(fp)
  811878:	e1bfff17 	ldw	r6,-4(fp)
  81187c:	08120500 	call	812050 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811880:	e037883a 	mov	sp,fp
  811884:	dfc00117 	ldw	ra,4(sp)
  811888:	df000017 	ldw	fp,0(sp)
  81188c:	dec00204 	addi	sp,sp,8
  811890:	f800283a 	ret

00811894 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811894:	defffc04 	addi	sp,sp,-16
  811898:	dfc00315 	stw	ra,12(sp)
  81189c:	df000215 	stw	fp,8(sp)
  8118a0:	df000204 	addi	fp,sp,8
  8118a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8118a8:	e0bfff17 	ldw	r2,-4(fp)
  8118ac:	10800017 	ldw	r2,0(r2)
  8118b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8118b4:	e0bffe17 	ldw	r2,-8(fp)
  8118b8:	11000a04 	addi	r4,r2,40
  8118bc:	e0bfff17 	ldw	r2,-4(fp)
  8118c0:	11400217 	ldw	r5,8(r2)
  8118c4:	0811cc40 	call	811cc4 <altera_avalon_jtag_uart_close>
}
  8118c8:	e037883a 	mov	sp,fp
  8118cc:	dfc00117 	ldw	ra,4(sp)
  8118d0:	df000017 	ldw	fp,0(sp)
  8118d4:	dec00204 	addi	sp,sp,8
  8118d8:	f800283a 	ret

008118dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8118dc:	defffa04 	addi	sp,sp,-24
  8118e0:	dfc00515 	stw	ra,20(sp)
  8118e4:	df000415 	stw	fp,16(sp)
  8118e8:	df000404 	addi	fp,sp,16
  8118ec:	e13ffd15 	stw	r4,-12(fp)
  8118f0:	e17ffe15 	stw	r5,-8(fp)
  8118f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8118f8:	e0bffd17 	ldw	r2,-12(fp)
  8118fc:	10800017 	ldw	r2,0(r2)
  811900:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811904:	e0bffc17 	ldw	r2,-16(fp)
  811908:	11000a04 	addi	r4,r2,40
  81190c:	e17ffe17 	ldw	r5,-8(fp)
  811910:	e1bfff17 	ldw	r6,-4(fp)
  811914:	0811d380 	call	811d38 <altera_avalon_jtag_uart_ioctl>
}
  811918:	e037883a 	mov	sp,fp
  81191c:	dfc00117 	ldw	ra,4(sp)
  811920:	df000017 	ldw	fp,0(sp)
  811924:	dec00204 	addi	sp,sp,8
  811928:	f800283a 	ret

0081192c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81192c:	defffa04 	addi	sp,sp,-24
  811930:	dfc00515 	stw	ra,20(sp)
  811934:	df000415 	stw	fp,16(sp)
  811938:	df000404 	addi	fp,sp,16
  81193c:	e13ffd15 	stw	r4,-12(fp)
  811940:	e17ffe15 	stw	r5,-8(fp)
  811944:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811948:	e0fffd17 	ldw	r3,-12(fp)
  81194c:	00800044 	movi	r2,1
  811950:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811954:	e0bffd17 	ldw	r2,-12(fp)
  811958:	10800017 	ldw	r2,0(r2)
  81195c:	11000104 	addi	r4,r2,4
  811960:	e0bffd17 	ldw	r2,-12(fp)
  811964:	10800817 	ldw	r2,32(r2)
  811968:	1007883a 	mov	r3,r2
  81196c:	2005883a 	mov	r2,r4
  811970:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811974:	e13ffe17 	ldw	r4,-8(fp)
  811978:	e17fff17 	ldw	r5,-4(fp)
  81197c:	d8000015 	stw	zero,0(sp)
  811980:	01802074 	movhi	r6,129
  811984:	31867b04 	addi	r6,r6,6636
  811988:	e1fffd17 	ldw	r7,-12(fp)
  81198c:	081413c0 	call	81413c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811990:	e0bffd17 	ldw	r2,-12(fp)
  811994:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811998:	e0bffd17 	ldw	r2,-12(fp)
  81199c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8119a0:	008020b4 	movhi	r2,130
  8119a4:	10a33104 	addi	r2,r2,-29500
  8119a8:	10800017 	ldw	r2,0(r2)
  8119ac:	100b883a 	mov	r5,r2
  8119b0:	01802074 	movhi	r6,129
  8119b4:	31870504 	addi	r6,r6,7188
  8119b8:	e1fffd17 	ldw	r7,-12(fp)
  8119bc:	08104880 	call	810488 <alt_alarm_start>
  8119c0:	1004403a 	cmpge	r2,r2,zero
  8119c4:	1000041e 	bne	r2,zero,8119d8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8119c8:	e0fffd17 	ldw	r3,-12(fp)
  8119cc:	00a00034 	movhi	r2,32768
  8119d0:	10bfffc4 	addi	r2,r2,-1
  8119d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8119d8:	e037883a 	mov	sp,fp
  8119dc:	dfc00117 	ldw	ra,4(sp)
  8119e0:	df000017 	ldw	fp,0(sp)
  8119e4:	dec00204 	addi	sp,sp,8
  8119e8:	f800283a 	ret

008119ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8119ec:	defff804 	addi	sp,sp,-32
  8119f0:	df000715 	stw	fp,28(sp)
  8119f4:	df000704 	addi	fp,sp,28
  8119f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8119fc:	e0bfff17 	ldw	r2,-4(fp)
  811a00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811a04:	e0bffe17 	ldw	r2,-8(fp)
  811a08:	10800017 	ldw	r2,0(r2)
  811a0c:	e0bffd15 	stw	r2,-12(fp)
  811a10:	00000006 	br	811a14 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811a14:	e0bffd17 	ldw	r2,-12(fp)
  811a18:	10800104 	addi	r2,r2,4
  811a1c:	10800037 	ldwio	r2,0(r2)
  811a20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811a24:	e0bffc17 	ldw	r2,-16(fp)
  811a28:	1080c00c 	andi	r2,r2,768
  811a2c:	1005003a 	cmpeq	r2,r2,zero
  811a30:	1000741e 	bne	r2,zero,811c04 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811a34:	e0bffc17 	ldw	r2,-16(fp)
  811a38:	1080400c 	andi	r2,r2,256
  811a3c:	1005003a 	cmpeq	r2,r2,zero
  811a40:	1000351e 	bne	r2,zero,811b18 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811a44:	00800074 	movhi	r2,1
  811a48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811a4c:	e0bffe17 	ldw	r2,-8(fp)
  811a50:	10800a17 	ldw	r2,40(r2)
  811a54:	10800044 	addi	r2,r2,1
  811a58:	1081ffcc 	andi	r2,r2,2047
  811a5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811a60:	e0bffe17 	ldw	r2,-8(fp)
  811a64:	10c00b17 	ldw	r3,44(r2)
  811a68:	e0bffa17 	ldw	r2,-24(fp)
  811a6c:	18801626 	beq	r3,r2,811ac8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811a70:	e0bffd17 	ldw	r2,-12(fp)
  811a74:	10800037 	ldwio	r2,0(r2)
  811a78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811a7c:	e0bffb17 	ldw	r2,-20(fp)
  811a80:	10a0000c 	andi	r2,r2,32768
  811a84:	1005003a 	cmpeq	r2,r2,zero
  811a88:	10000f1e 	bne	r2,zero,811ac8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811a8c:	e0bffe17 	ldw	r2,-8(fp)
  811a90:	10c00a17 	ldw	r3,40(r2)
  811a94:	e0bffb17 	ldw	r2,-20(fp)
  811a98:	1009883a 	mov	r4,r2
  811a9c:	e0bffe17 	ldw	r2,-8(fp)
  811aa0:	1885883a 	add	r2,r3,r2
  811aa4:	10800e04 	addi	r2,r2,56
  811aa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811aac:	e0bffe17 	ldw	r2,-8(fp)
  811ab0:	10800a17 	ldw	r2,40(r2)
  811ab4:	10800044 	addi	r2,r2,1
  811ab8:	10c1ffcc 	andi	r3,r2,2047
  811abc:	e0bffe17 	ldw	r2,-8(fp)
  811ac0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811ac4:	003fe106 	br	811a4c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811ac8:	e0bffb17 	ldw	r2,-20(fp)
  811acc:	10bfffec 	andhi	r2,r2,65535
  811ad0:	1005003a 	cmpeq	r2,r2,zero
  811ad4:	1000101e 	bne	r2,zero,811b18 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811ad8:	e0bffe17 	ldw	r2,-8(fp)
  811adc:	10c00817 	ldw	r3,32(r2)
  811ae0:	00bfff84 	movi	r2,-2
  811ae4:	1886703a 	and	r3,r3,r2
  811ae8:	e0bffe17 	ldw	r2,-8(fp)
  811aec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811af0:	e0bffd17 	ldw	r2,-12(fp)
  811af4:	11000104 	addi	r4,r2,4
  811af8:	e0bffe17 	ldw	r2,-8(fp)
  811afc:	10800817 	ldw	r2,32(r2)
  811b00:	1007883a 	mov	r3,r2
  811b04:	2005883a 	mov	r2,r4
  811b08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811b0c:	e0bffd17 	ldw	r2,-12(fp)
  811b10:	10800104 	addi	r2,r2,4
  811b14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811b18:	e0bffc17 	ldw	r2,-16(fp)
  811b1c:	1080800c 	andi	r2,r2,512
  811b20:	1005003a 	cmpeq	r2,r2,zero
  811b24:	103fbb1e 	bne	r2,zero,811a14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811b28:	e0bffc17 	ldw	r2,-16(fp)
  811b2c:	10bfffec 	andhi	r2,r2,65535
  811b30:	1004d43a 	srli	r2,r2,16
  811b34:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811b38:	00001506 	br	811b90 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811b3c:	e13ffd17 	ldw	r4,-12(fp)
  811b40:	e0bffe17 	ldw	r2,-8(fp)
  811b44:	10c00d17 	ldw	r3,52(r2)
  811b48:	e0bffe17 	ldw	r2,-8(fp)
  811b4c:	1885883a 	add	r2,r3,r2
  811b50:	10820e04 	addi	r2,r2,2104
  811b54:	10800003 	ldbu	r2,0(r2)
  811b58:	10c03fcc 	andi	r3,r2,255
  811b5c:	18c0201c 	xori	r3,r3,128
  811b60:	18ffe004 	addi	r3,r3,-128
  811b64:	2005883a 	mov	r2,r4
  811b68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b6c:	e0bffe17 	ldw	r2,-8(fp)
  811b70:	10800d17 	ldw	r2,52(r2)
  811b74:	10800044 	addi	r2,r2,1
  811b78:	10c1ffcc 	andi	r3,r2,2047
  811b7c:	e0bffe17 	ldw	r2,-8(fp)
  811b80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811b84:	e0bff917 	ldw	r2,-28(fp)
  811b88:	10bfffc4 	addi	r2,r2,-1
  811b8c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811b90:	e0bff917 	ldw	r2,-28(fp)
  811b94:	1005003a 	cmpeq	r2,r2,zero
  811b98:	1000051e 	bne	r2,zero,811bb0 <altera_avalon_jtag_uart_irq+0x1c4>
  811b9c:	e0bffe17 	ldw	r2,-8(fp)
  811ba0:	10c00d17 	ldw	r3,52(r2)
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	10800c17 	ldw	r2,48(r2)
  811bac:	18bfe31e 	bne	r3,r2,811b3c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811bb0:	e0bff917 	ldw	r2,-28(fp)
  811bb4:	1005003a 	cmpeq	r2,r2,zero
  811bb8:	103f961e 	bne	r2,zero,811a14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811bbc:	e0bffe17 	ldw	r2,-8(fp)
  811bc0:	10c00817 	ldw	r3,32(r2)
  811bc4:	00bfff44 	movi	r2,-3
  811bc8:	1886703a 	and	r3,r3,r2
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811bd4:	e0bffe17 	ldw	r2,-8(fp)
  811bd8:	10800017 	ldw	r2,0(r2)
  811bdc:	11000104 	addi	r4,r2,4
  811be0:	e0bffe17 	ldw	r2,-8(fp)
  811be4:	10800817 	ldw	r2,32(r2)
  811be8:	1007883a 	mov	r3,r2
  811bec:	2005883a 	mov	r2,r4
  811bf0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811bf4:	e0bffd17 	ldw	r2,-12(fp)
  811bf8:	10800104 	addi	r2,r2,4
  811bfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811c00:	003f8406 	br	811a14 <altera_avalon_jtag_uart_irq+0x28>
}
  811c04:	e037883a 	mov	sp,fp
  811c08:	df000017 	ldw	fp,0(sp)
  811c0c:	dec00104 	addi	sp,sp,4
  811c10:	f800283a 	ret

00811c14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811c14:	defffc04 	addi	sp,sp,-16
  811c18:	df000315 	stw	fp,12(sp)
  811c1c:	df000304 	addi	fp,sp,12
  811c20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811c24:	e0bfff17 	ldw	r2,-4(fp)
  811c28:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811c2c:	e0bffe17 	ldw	r2,-8(fp)
  811c30:	10800017 	ldw	r2,0(r2)
  811c34:	10800104 	addi	r2,r2,4
  811c38:	10800037 	ldwio	r2,0(r2)
  811c3c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811c40:	e0bffd17 	ldw	r2,-12(fp)
  811c44:	1081000c 	andi	r2,r2,1024
  811c48:	1005003a 	cmpeq	r2,r2,zero
  811c4c:	10000c1e 	bne	r2,zero,811c80 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	10800017 	ldw	r2,0(r2)
  811c58:	11000104 	addi	r4,r2,4
  811c5c:	e0bffe17 	ldw	r2,-8(fp)
  811c60:	10800817 	ldw	r2,32(r2)
  811c64:	10810014 	ori	r2,r2,1024
  811c68:	1007883a 	mov	r3,r2
  811c6c:	2005883a 	mov	r2,r4
  811c70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811c74:	e0bffe17 	ldw	r2,-8(fp)
  811c78:	10000915 	stw	zero,36(r2)
  811c7c:	00000a06 	br	811ca8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811c80:	e0bffe17 	ldw	r2,-8(fp)
  811c84:	10c00917 	ldw	r3,36(r2)
  811c88:	00a00034 	movhi	r2,32768
  811c8c:	10bfff04 	addi	r2,r2,-4
  811c90:	10c00536 	bltu	r2,r3,811ca8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811c94:	e0bffe17 	ldw	r2,-8(fp)
  811c98:	10800917 	ldw	r2,36(r2)
  811c9c:	10c00044 	addi	r3,r2,1
  811ca0:	e0bffe17 	ldw	r2,-8(fp)
  811ca4:	10c00915 	stw	r3,36(r2)
  811ca8:	008020b4 	movhi	r2,130
  811cac:	10a33104 	addi	r2,r2,-29500
  811cb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811cb4:	e037883a 	mov	sp,fp
  811cb8:	df000017 	ldw	fp,0(sp)
  811cbc:	dec00104 	addi	sp,sp,4
  811cc0:	f800283a 	ret

00811cc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811cc4:	defffc04 	addi	sp,sp,-16
  811cc8:	df000315 	stw	fp,12(sp)
  811ccc:	df000304 	addi	fp,sp,12
  811cd0:	e13ffd15 	stw	r4,-12(fp)
  811cd4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811cd8:	00000706 	br	811cf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811cdc:	e0bffe17 	ldw	r2,-8(fp)
  811ce0:	1090000c 	andi	r2,r2,16384
  811ce4:	1005003a 	cmpeq	r2,r2,zero
  811ce8:	1000031e 	bne	r2,zero,811cf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811cec:	00bffd44 	movi	r2,-11
  811cf0:	e0bfff15 	stw	r2,-4(fp)
  811cf4:	00000b06 	br	811d24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811cf8:	e0bffd17 	ldw	r2,-12(fp)
  811cfc:	10c00d17 	ldw	r3,52(r2)
  811d00:	e0bffd17 	ldw	r2,-12(fp)
  811d04:	10800c17 	ldw	r2,48(r2)
  811d08:	18800526 	beq	r3,r2,811d20 <altera_avalon_jtag_uart_close+0x5c>
  811d0c:	e0bffd17 	ldw	r2,-12(fp)
  811d10:	10c00917 	ldw	r3,36(r2)
  811d14:	e0bffd17 	ldw	r2,-12(fp)
  811d18:	10800117 	ldw	r2,4(r2)
  811d1c:	18bfef36 	bltu	r3,r2,811cdc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811d20:	e03fff15 	stw	zero,-4(fp)
  811d24:	e0bfff17 	ldw	r2,-4(fp)
}
  811d28:	e037883a 	mov	sp,fp
  811d2c:	df000017 	ldw	fp,0(sp)
  811d30:	dec00104 	addi	sp,sp,4
  811d34:	f800283a 	ret

00811d38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811d38:	defff804 	addi	sp,sp,-32
  811d3c:	df000715 	stw	fp,28(sp)
  811d40:	df000704 	addi	fp,sp,28
  811d44:	e13ffb15 	stw	r4,-20(fp)
  811d48:	e17ffc15 	stw	r5,-16(fp)
  811d4c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811d50:	00bff9c4 	movi	r2,-25
  811d54:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811d58:	e0bffc17 	ldw	r2,-16(fp)
  811d5c:	e0bfff15 	stw	r2,-4(fp)
  811d60:	e0ffff17 	ldw	r3,-4(fp)
  811d64:	189a8060 	cmpeqi	r2,r3,27137
  811d68:	1000041e 	bne	r2,zero,811d7c <altera_avalon_jtag_uart_ioctl+0x44>
  811d6c:	e0ffff17 	ldw	r3,-4(fp)
  811d70:	189a80a0 	cmpeqi	r2,r3,27138
  811d74:	10001b1e 	bne	r2,zero,811de4 <altera_avalon_jtag_uart_ioctl+0xac>
  811d78:	00002706 	br	811e18 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811d7c:	e0bffb17 	ldw	r2,-20(fp)
  811d80:	10c00117 	ldw	r3,4(r2)
  811d84:	00a00034 	movhi	r2,32768
  811d88:	10bfffc4 	addi	r2,r2,-1
  811d8c:	18802226 	beq	r3,r2,811e18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811d90:	e0bffd17 	ldw	r2,-12(fp)
  811d94:	10800017 	ldw	r2,0(r2)
  811d98:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811d9c:	e0bff917 	ldw	r2,-28(fp)
  811da0:	10800090 	cmplti	r2,r2,2
  811da4:	1000071e 	bne	r2,zero,811dc4 <altera_avalon_jtag_uart_ioctl+0x8c>
  811da8:	e0fff917 	ldw	r3,-28(fp)
  811dac:	00a00034 	movhi	r2,32768
  811db0:	10bfffc4 	addi	r2,r2,-1
  811db4:	18800326 	beq	r3,r2,811dc4 <altera_avalon_jtag_uart_ioctl+0x8c>
  811db8:	e0bff917 	ldw	r2,-28(fp)
  811dbc:	e0bffe15 	stw	r2,-8(fp)
  811dc0:	00000306 	br	811dd0 <altera_avalon_jtag_uart_ioctl+0x98>
  811dc4:	00e00034 	movhi	r3,32768
  811dc8:	18ffff84 	addi	r3,r3,-2
  811dcc:	e0fffe15 	stw	r3,-8(fp)
  811dd0:	e0bffb17 	ldw	r2,-20(fp)
  811dd4:	e0fffe17 	ldw	r3,-8(fp)
  811dd8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811ddc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811de0:	00000d06 	br	811e18 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811de4:	e0bffb17 	ldw	r2,-20(fp)
  811de8:	10c00117 	ldw	r3,4(r2)
  811dec:	00a00034 	movhi	r2,32768
  811df0:	10bfffc4 	addi	r2,r2,-1
  811df4:	18800826 	beq	r3,r2,811e18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811df8:	e13ffd17 	ldw	r4,-12(fp)
  811dfc:	e0bffb17 	ldw	r2,-20(fp)
  811e00:	10c00917 	ldw	r3,36(r2)
  811e04:	e0bffb17 	ldw	r2,-20(fp)
  811e08:	10800117 	ldw	r2,4(r2)
  811e0c:	1885803a 	cmpltu	r2,r3,r2
  811e10:	20800015 	stw	r2,0(r4)
      rc = 0;
  811e14:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811e18:	e0bffa17 	ldw	r2,-24(fp)
}
  811e1c:	e037883a 	mov	sp,fp
  811e20:	df000017 	ldw	fp,0(sp)
  811e24:	dec00104 	addi	sp,sp,4
  811e28:	f800283a 	ret

00811e2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811e2c:	defff204 	addi	sp,sp,-56
  811e30:	dfc00d15 	stw	ra,52(sp)
  811e34:	df000c15 	stw	fp,48(sp)
  811e38:	df000c04 	addi	fp,sp,48
  811e3c:	e13ffb15 	stw	r4,-20(fp)
  811e40:	e17ffc15 	stw	r5,-16(fp)
  811e44:	e1bffd15 	stw	r6,-12(fp)
  811e48:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811e4c:	e0bffc17 	ldw	r2,-16(fp)
  811e50:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811e54:	00004806 	br	811f78 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811e58:	e0bffb17 	ldw	r2,-20(fp)
  811e5c:	10800a17 	ldw	r2,40(r2)
  811e60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811e64:	e0bffb17 	ldw	r2,-20(fp)
  811e68:	10800b17 	ldw	r2,44(r2)
  811e6c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  811e70:	e0fff717 	ldw	r3,-36(fp)
  811e74:	e0bff617 	ldw	r2,-40(fp)
  811e78:	18800536 	bltu	r3,r2,811e90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811e7c:	e0bff717 	ldw	r2,-36(fp)
  811e80:	e0fff617 	ldw	r3,-40(fp)
  811e84:	10c5c83a 	sub	r2,r2,r3
  811e88:	e0bff815 	stw	r2,-32(fp)
  811e8c:	00000406 	br	811ea0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811e90:	00820004 	movi	r2,2048
  811e94:	e0fff617 	ldw	r3,-40(fp)
  811e98:	10c5c83a 	sub	r2,r2,r3
  811e9c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  811ea0:	e0bff817 	ldw	r2,-32(fp)
  811ea4:	1005003a 	cmpeq	r2,r2,zero
  811ea8:	10001f1e 	bne	r2,zero,811f28 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  811eac:	e0fffd17 	ldw	r3,-12(fp)
  811eb0:	e0bff817 	ldw	r2,-32(fp)
  811eb4:	1880022e 	bgeu	r3,r2,811ec0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  811eb8:	e0bffd17 	ldw	r2,-12(fp)
  811ebc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811ec0:	e0bffb17 	ldw	r2,-20(fp)
  811ec4:	10c00e04 	addi	r3,r2,56
  811ec8:	e0bff617 	ldw	r2,-40(fp)
  811ecc:	1887883a 	add	r3,r3,r2
  811ed0:	e0bffa17 	ldw	r2,-24(fp)
  811ed4:	1009883a 	mov	r4,r2
  811ed8:	180b883a 	mov	r5,r3
  811edc:	e1bff817 	ldw	r6,-32(fp)
  811ee0:	08032540 	call	803254 <memcpy>
      ptr   += n;
  811ee4:	e0fff817 	ldw	r3,-32(fp)
  811ee8:	e0bffa17 	ldw	r2,-24(fp)
  811eec:	10c5883a 	add	r2,r2,r3
  811ef0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  811ef4:	e0fffd17 	ldw	r3,-12(fp)
  811ef8:	e0bff817 	ldw	r2,-32(fp)
  811efc:	1885c83a 	sub	r2,r3,r2
  811f00:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f04:	e0fff617 	ldw	r3,-40(fp)
  811f08:	e0bff817 	ldw	r2,-32(fp)
  811f0c:	1885883a 	add	r2,r3,r2
  811f10:	10c1ffcc 	andi	r3,r2,2047
  811f14:	e0bffb17 	ldw	r2,-20(fp)
  811f18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811f1c:	e0bffd17 	ldw	r2,-12(fp)
  811f20:	10800048 	cmpgei	r2,r2,1
  811f24:	103fcc1e 	bne	r2,zero,811e58 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  811f28:	e0fffa17 	ldw	r3,-24(fp)
  811f2c:	e0bffc17 	ldw	r2,-16(fp)
  811f30:	1880141e 	bne	r3,r2,811f84 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811f34:	e0bffe17 	ldw	r2,-8(fp)
  811f38:	1090000c 	andi	r2,r2,16384
  811f3c:	1004c03a 	cmpne	r2,r2,zero
  811f40:	1000101e 	bne	r2,zero,811f84 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811f44:	e0bffb17 	ldw	r2,-20(fp)
  811f48:	10c00a17 	ldw	r3,40(r2)
  811f4c:	e0bff717 	ldw	r2,-36(fp)
  811f50:	1880051e 	bne	r3,r2,811f68 <altera_avalon_jtag_uart_read+0x13c>
  811f54:	e0bffb17 	ldw	r2,-20(fp)
  811f58:	10c00917 	ldw	r3,36(r2)
  811f5c:	e0bffb17 	ldw	r2,-20(fp)
  811f60:	10800117 	ldw	r2,4(r2)
  811f64:	18bff736 	bltu	r3,r2,811f44 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811f68:	e0bffb17 	ldw	r2,-20(fp)
  811f6c:	10c00a17 	ldw	r3,40(r2)
  811f70:	e0bff717 	ldw	r2,-36(fp)
  811f74:	18800326 	beq	r3,r2,811f84 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811f78:	e0bffd17 	ldw	r2,-12(fp)
  811f7c:	10800048 	cmpgei	r2,r2,1
  811f80:	103fb51e 	bne	r2,zero,811e58 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811f84:	e0fffa17 	ldw	r3,-24(fp)
  811f88:	e0bffc17 	ldw	r2,-16(fp)
  811f8c:	18801926 	beq	r3,r2,811ff4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f90:	0005303a 	rdctl	r2,status
  811f94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f98:	e0fff517 	ldw	r3,-44(fp)
  811f9c:	00bfff84 	movi	r2,-2
  811fa0:	1884703a 	and	r2,r3,r2
  811fa4:	1001703a 	wrctl	status,r2
  
  return context;
  811fa8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811fac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811fb0:	e0bffb17 	ldw	r2,-20(fp)
  811fb4:	10800817 	ldw	r2,32(r2)
  811fb8:	10c00054 	ori	r3,r2,1
  811fbc:	e0bffb17 	ldw	r2,-20(fp)
  811fc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811fc4:	e0bffb17 	ldw	r2,-20(fp)
  811fc8:	10800017 	ldw	r2,0(r2)
  811fcc:	11000104 	addi	r4,r2,4
  811fd0:	e0bffb17 	ldw	r2,-20(fp)
  811fd4:	10800817 	ldw	r2,32(r2)
  811fd8:	1007883a 	mov	r3,r2
  811fdc:	2005883a 	mov	r2,r4
  811fe0:	10c00035 	stwio	r3,0(r2)
  811fe4:	e0bff917 	ldw	r2,-28(fp)
  811fe8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fec:	e0bff417 	ldw	r2,-48(fp)
  811ff0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811ff4:	e0fffa17 	ldw	r3,-24(fp)
  811ff8:	e0bffc17 	ldw	r2,-16(fp)
  811ffc:	18800526 	beq	r3,r2,812014 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812000:	e0fffa17 	ldw	r3,-24(fp)
  812004:	e0bffc17 	ldw	r2,-16(fp)
  812008:	1887c83a 	sub	r3,r3,r2
  81200c:	e0ffff15 	stw	r3,-4(fp)
  812010:	00000906 	br	812038 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812014:	e0bffe17 	ldw	r2,-8(fp)
  812018:	1090000c 	andi	r2,r2,16384
  81201c:	1005003a 	cmpeq	r2,r2,zero
  812020:	1000031e 	bne	r2,zero,812030 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812024:	00bffd44 	movi	r2,-11
  812028:	e0bfff15 	stw	r2,-4(fp)
  81202c:	00000206 	br	812038 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812030:	00bffec4 	movi	r2,-5
  812034:	e0bfff15 	stw	r2,-4(fp)
  812038:	e0bfff17 	ldw	r2,-4(fp)
}
  81203c:	e037883a 	mov	sp,fp
  812040:	dfc00117 	ldw	ra,4(sp)
  812044:	df000017 	ldw	fp,0(sp)
  812048:	dec00204 	addi	sp,sp,8
  81204c:	f800283a 	ret

00812050 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812050:	defff204 	addi	sp,sp,-56
  812054:	dfc00d15 	stw	ra,52(sp)
  812058:	df000c15 	stw	fp,48(sp)
  81205c:	df000c04 	addi	fp,sp,48
  812060:	e13ffb15 	stw	r4,-20(fp)
  812064:	e17ffc15 	stw	r5,-16(fp)
  812068:	e1bffd15 	stw	r6,-12(fp)
  81206c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812070:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812074:	e0bffc17 	ldw	r2,-16(fp)
  812078:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81207c:	00003a06 	br	812168 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812080:	e0bffb17 	ldw	r2,-20(fp)
  812084:	10800c17 	ldw	r2,48(r2)
  812088:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  81208c:	e0bffb17 	ldw	r2,-20(fp)
  812090:	10800d17 	ldw	r2,52(r2)
  812094:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  812098:	e0fffa17 	ldw	r3,-24(fp)
  81209c:	e0bff917 	ldw	r2,-28(fp)
  8120a0:	1880062e 	bgeu	r3,r2,8120bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8120a4:	e0fff917 	ldw	r3,-28(fp)
  8120a8:	e0bffa17 	ldw	r2,-24(fp)
  8120ac:	1885c83a 	sub	r2,r3,r2
  8120b0:	10bfffc4 	addi	r2,r2,-1
  8120b4:	e0bff815 	stw	r2,-32(fp)
  8120b8:	00000c06 	br	8120ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  8120bc:	e0bff917 	ldw	r2,-28(fp)
  8120c0:	1005003a 	cmpeq	r2,r2,zero
  8120c4:	1000051e 	bne	r2,zero,8120dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8120c8:	00820004 	movi	r2,2048
  8120cc:	e0fffa17 	ldw	r3,-24(fp)
  8120d0:	10c5c83a 	sub	r2,r2,r3
  8120d4:	e0bff815 	stw	r2,-32(fp)
  8120d8:	00000406 	br	8120ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8120dc:	0081ffc4 	movi	r2,2047
  8120e0:	e0fffa17 	ldw	r3,-24(fp)
  8120e4:	10c5c83a 	sub	r2,r2,r3
  8120e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8120ec:	e0bff817 	ldw	r2,-32(fp)
  8120f0:	1005003a 	cmpeq	r2,r2,zero
  8120f4:	10001f1e 	bne	r2,zero,812174 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8120f8:	e0fffd17 	ldw	r3,-12(fp)
  8120fc:	e0bff817 	ldw	r2,-32(fp)
  812100:	1880022e 	bgeu	r3,r2,81210c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  812104:	e0bffd17 	ldw	r2,-12(fp)
  812108:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81210c:	e0bffb17 	ldw	r2,-20(fp)
  812110:	10c20e04 	addi	r3,r2,2104
  812114:	e0bffa17 	ldw	r2,-24(fp)
  812118:	1885883a 	add	r2,r3,r2
  81211c:	e0fffc17 	ldw	r3,-16(fp)
  812120:	1009883a 	mov	r4,r2
  812124:	180b883a 	mov	r5,r3
  812128:	e1bff817 	ldw	r6,-32(fp)
  81212c:	08032540 	call	803254 <memcpy>
      ptr   += n;
  812130:	e0fff817 	ldw	r3,-32(fp)
  812134:	e0bffc17 	ldw	r2,-16(fp)
  812138:	10c5883a 	add	r2,r2,r3
  81213c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812140:	e0fffd17 	ldw	r3,-12(fp)
  812144:	e0bff817 	ldw	r2,-32(fp)
  812148:	1885c83a 	sub	r2,r3,r2
  81214c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812150:	e0fffa17 	ldw	r3,-24(fp)
  812154:	e0bff817 	ldw	r2,-32(fp)
  812158:	1885883a 	add	r2,r3,r2
  81215c:	10c1ffcc 	andi	r3,r2,2047
  812160:	e0bffb17 	ldw	r2,-20(fp)
  812164:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812168:	e0bffd17 	ldw	r2,-12(fp)
  81216c:	10800048 	cmpgei	r2,r2,1
  812170:	103fc31e 	bne	r2,zero,812080 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812174:	0005303a 	rdctl	r2,status
  812178:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81217c:	e0fff517 	ldw	r3,-44(fp)
  812180:	00bfff84 	movi	r2,-2
  812184:	1884703a 	and	r2,r3,r2
  812188:	1001703a 	wrctl	status,r2
  
  return context;
  81218c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812190:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812194:	e0bffb17 	ldw	r2,-20(fp)
  812198:	10800817 	ldw	r2,32(r2)
  81219c:	10c00094 	ori	r3,r2,2
  8121a0:	e0bffb17 	ldw	r2,-20(fp)
  8121a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8121a8:	e0bffb17 	ldw	r2,-20(fp)
  8121ac:	10800017 	ldw	r2,0(r2)
  8121b0:	11000104 	addi	r4,r2,4
  8121b4:	e0bffb17 	ldw	r2,-20(fp)
  8121b8:	10800817 	ldw	r2,32(r2)
  8121bc:	1007883a 	mov	r3,r2
  8121c0:	2005883a 	mov	r2,r4
  8121c4:	10c00035 	stwio	r3,0(r2)
  8121c8:	e0bff717 	ldw	r2,-36(fp)
  8121cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121d0:	e0bff417 	ldw	r2,-48(fp)
  8121d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8121d8:	e0bffd17 	ldw	r2,-12(fp)
  8121dc:	10800050 	cmplti	r2,r2,1
  8121e0:	1000111e 	bne	r2,zero,812228 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8121e4:	e0bffe17 	ldw	r2,-8(fp)
  8121e8:	1090000c 	andi	r2,r2,16384
  8121ec:	1004c03a 	cmpne	r2,r2,zero
  8121f0:	1000101e 	bne	r2,zero,812234 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8121f4:	e0bffb17 	ldw	r2,-20(fp)
  8121f8:	10c00d17 	ldw	r3,52(r2)
  8121fc:	e0bff917 	ldw	r2,-28(fp)
  812200:	1880051e 	bne	r3,r2,812218 <altera_avalon_jtag_uart_write+0x1c8>
  812204:	e0bffb17 	ldw	r2,-20(fp)
  812208:	10c00917 	ldw	r3,36(r2)
  81220c:	e0bffb17 	ldw	r2,-20(fp)
  812210:	10800117 	ldw	r2,4(r2)
  812214:	18bff736 	bltu	r3,r2,8121f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812218:	e0bffb17 	ldw	r2,-20(fp)
  81221c:	10c00d17 	ldw	r3,52(r2)
  812220:	e0bff917 	ldw	r2,-28(fp)
  812224:	18800326 	beq	r3,r2,812234 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  812228:	e0bffd17 	ldw	r2,-12(fp)
  81222c:	10800048 	cmpgei	r2,r2,1
  812230:	103fcd1e 	bne	r2,zero,812168 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812234:	e0fffc17 	ldw	r3,-16(fp)
  812238:	e0bff617 	ldw	r2,-40(fp)
  81223c:	18800526 	beq	r3,r2,812254 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812240:	e0fffc17 	ldw	r3,-16(fp)
  812244:	e0bff617 	ldw	r2,-40(fp)
  812248:	1887c83a 	sub	r3,r3,r2
  81224c:	e0ffff15 	stw	r3,-4(fp)
  812250:	00000906 	br	812278 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812254:	e0bffe17 	ldw	r2,-8(fp)
  812258:	1090000c 	andi	r2,r2,16384
  81225c:	1005003a 	cmpeq	r2,r2,zero
  812260:	1000031e 	bne	r2,zero,812270 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  812264:	00bffd44 	movi	r2,-11
  812268:	e0bfff15 	stw	r2,-4(fp)
  81226c:	00000206 	br	812278 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  812270:	00bffec4 	movi	r2,-5
  812274:	e0bfff15 	stw	r2,-4(fp)
  812278:	e0bfff17 	ldw	r2,-4(fp)
}
  81227c:	e037883a 	mov	sp,fp
  812280:	dfc00117 	ldw	ra,4(sp)
  812284:	df000017 	ldw	fp,0(sp)
  812288:	dec00204 	addi	sp,sp,8
  81228c:	f800283a 	ret

00812290 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  812290:	defffa04 	addi	sp,sp,-24
  812294:	dfc00515 	stw	ra,20(sp)
  812298:	df000415 	stw	fp,16(sp)
  81229c:	df000404 	addi	fp,sp,16
  8122a0:	e13ffe15 	stw	r4,-8(fp)
  8122a4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8122a8:	e0bffe17 	ldw	r2,-8(fp)
  8122ac:	10800017 	ldw	r2,0(r2)
  8122b0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8122b4:	008003f4 	movhi	r2,15
  8122b8:	10909004 	addi	r2,r2,16960
  8122bc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8122c0:	e0bffe17 	ldw	r2,-8(fp)
  8122c4:	10800803 	ldbu	r2,32(r2)
  8122c8:	10803fcc 	andi	r2,r2,255
  8122cc:	1080201c 	xori	r2,r2,128
  8122d0:	10bfe004 	addi	r2,r2,-128
  8122d4:	1004c03a 	cmpne	r2,r2,zero
  8122d8:	1000161e 	bne	r2,zero,812334 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8122dc:	00000a06 	br	812308 <lcd_write_command+0x78>
    if (--i == 0)
  8122e0:	e0bffc17 	ldw	r2,-16(fp)
  8122e4:	10bfffc4 	addi	r2,r2,-1
  8122e8:	e0bffc15 	stw	r2,-16(fp)
  8122ec:	e0bffc17 	ldw	r2,-16(fp)
  8122f0:	1004c03a 	cmpne	r2,r2,zero
  8122f4:	1000041e 	bne	r2,zero,812308 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  8122f8:	e0fffe17 	ldw	r3,-8(fp)
  8122fc:	00800044 	movi	r2,1
  812300:	18800805 	stb	r2,32(r3)
      return;
  812304:	00000b06 	br	812334 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812308:	e0bffd17 	ldw	r2,-12(fp)
  81230c:	10800104 	addi	r2,r2,4
  812310:	10800037 	ldwio	r2,0(r2)
  812314:	1080200c 	andi	r2,r2,128
  812318:	1004c03a 	cmpne	r2,r2,zero
  81231c:	103ff01e 	bne	r2,zero,8122e0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812320:	01001904 	movi	r4,100
  812324:	08145440 	call	814544 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  812328:	e0bffd17 	ldw	r2,-12(fp)
  81232c:	e0ffff03 	ldbu	r3,-4(fp)
  812330:	10c00035 	stwio	r3,0(r2)
}
  812334:	e037883a 	mov	sp,fp
  812338:	dfc00117 	ldw	ra,4(sp)
  81233c:	df000017 	ldw	fp,0(sp)
  812340:	dec00204 	addi	sp,sp,8
  812344:	f800283a 	ret

00812348 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  812348:	defffa04 	addi	sp,sp,-24
  81234c:	dfc00515 	stw	ra,20(sp)
  812350:	df000415 	stw	fp,16(sp)
  812354:	df000404 	addi	fp,sp,16
  812358:	e13ffe15 	stw	r4,-8(fp)
  81235c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812360:	e0bffe17 	ldw	r2,-8(fp)
  812364:	10800017 	ldw	r2,0(r2)
  812368:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81236c:	008003f4 	movhi	r2,15
  812370:	10909004 	addi	r2,r2,16960
  812374:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812378:	e0bffe17 	ldw	r2,-8(fp)
  81237c:	10800803 	ldbu	r2,32(r2)
  812380:	10803fcc 	andi	r2,r2,255
  812384:	1080201c 	xori	r2,r2,128
  812388:	10bfe004 	addi	r2,r2,-128
  81238c:	1004c03a 	cmpne	r2,r2,zero
  812390:	10001d1e 	bne	r2,zero,812408 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812394:	00000a06 	br	8123c0 <lcd_write_data+0x78>
    if (--i == 0)
  812398:	e0bffc17 	ldw	r2,-16(fp)
  81239c:	10bfffc4 	addi	r2,r2,-1
  8123a0:	e0bffc15 	stw	r2,-16(fp)
  8123a4:	e0bffc17 	ldw	r2,-16(fp)
  8123a8:	1004c03a 	cmpne	r2,r2,zero
  8123ac:	1000041e 	bne	r2,zero,8123c0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8123b0:	e0fffe17 	ldw	r3,-8(fp)
  8123b4:	00800044 	movi	r2,1
  8123b8:	18800805 	stb	r2,32(r3)
      return;
  8123bc:	00001206 	br	812408 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8123c0:	e0bffd17 	ldw	r2,-12(fp)
  8123c4:	10800104 	addi	r2,r2,4
  8123c8:	10800037 	ldwio	r2,0(r2)
  8123cc:	1080200c 	andi	r2,r2,128
  8123d0:	1004c03a 	cmpne	r2,r2,zero
  8123d4:	103ff01e 	bne	r2,zero,812398 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8123d8:	01001904 	movi	r4,100
  8123dc:	08145440 	call	814544 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8123e0:	e0bffd17 	ldw	r2,-12(fp)
  8123e4:	10800204 	addi	r2,r2,8
  8123e8:	e0ffff03 	ldbu	r3,-4(fp)
  8123ec:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  8123f0:	e0bffe17 	ldw	r2,-8(fp)
  8123f4:	108008c3 	ldbu	r2,35(r2)
  8123f8:	10800044 	addi	r2,r2,1
  8123fc:	1007883a 	mov	r3,r2
  812400:	e0bffe17 	ldw	r2,-8(fp)
  812404:	10c008c5 	stb	r3,35(r2)
}
  812408:	e037883a 	mov	sp,fp
  81240c:	dfc00117 	ldw	ra,4(sp)
  812410:	df000017 	ldw	fp,0(sp)
  812414:	dec00204 	addi	sp,sp,8
  812418:	f800283a 	ret

0081241c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81241c:	defffc04 	addi	sp,sp,-16
  812420:	dfc00315 	stw	ra,12(sp)
  812424:	df000215 	stw	fp,8(sp)
  812428:	df000204 	addi	fp,sp,8
  81242c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812430:	e13fff17 	ldw	r4,-4(fp)
  812434:	01400044 	movi	r5,1
  812438:	08122900 	call	812290 <lcd_write_command>

  sp->x = 0;
  81243c:	e0bfff17 	ldw	r2,-4(fp)
  812440:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  812444:	e0bfff17 	ldw	r2,-4(fp)
  812448:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  81244c:	e0bfff17 	ldw	r2,-4(fp)
  812450:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812454:	e03ffe15 	stw	zero,-8(fp)
  812458:	00001906 	br	8124c0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  81245c:	e0bffe17 	ldw	r2,-8(fp)
  812460:	10801924 	muli	r2,r2,100
  812464:	10c01004 	addi	r3,r2,64
  812468:	e0bfff17 	ldw	r2,-4(fp)
  81246c:	1889883a 	add	r4,r3,r2
  812470:	01400804 	movi	r5,32
  812474:	01801444 	movi	r6,81
  812478:	08033d40 	call	8033d4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  81247c:	e0bffe17 	ldw	r2,-8(fp)
  812480:	10801924 	muli	r2,r2,100
  812484:	10c00c04 	addi	r3,r2,48
  812488:	e0bfff17 	ldw	r2,-4(fp)
  81248c:	1889883a 	add	r4,r3,r2
  812490:	01400804 	movi	r5,32
  812494:	01800404 	movi	r6,16
  812498:	08033d40 	call	8033d4 <memset>
    sp->line[y].width = 0;
  81249c:	e0bffe17 	ldw	r2,-8(fp)
  8124a0:	e0ffff17 	ldw	r3,-4(fp)
  8124a4:	10801924 	muli	r2,r2,100
  8124a8:	10c5883a 	add	r2,r2,r3
  8124ac:	10802404 	addi	r2,r2,144
  8124b0:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8124b4:	e0bffe17 	ldw	r2,-8(fp)
  8124b8:	10800044 	addi	r2,r2,1
  8124bc:	e0bffe15 	stw	r2,-8(fp)
  8124c0:	e0bffe17 	ldw	r2,-8(fp)
  8124c4:	10800090 	cmplti	r2,r2,2
  8124c8:	103fe41e 	bne	r2,zero,81245c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8124cc:	e037883a 	mov	sp,fp
  8124d0:	dfc00117 	ldw	ra,4(sp)
  8124d4:	df000017 	ldw	fp,0(sp)
  8124d8:	dec00204 	addi	sp,sp,8
  8124dc:	f800283a 	ret

008124e0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8124e0:	defff604 	addi	sp,sp,-40
  8124e4:	dfc00915 	stw	ra,36(sp)
  8124e8:	df000815 	stw	fp,32(sp)
  8124ec:	dc000715 	stw	r16,28(sp)
  8124f0:	df000704 	addi	fp,sp,28
  8124f4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8124f8:	e0bfff17 	ldw	r2,-4(fp)
  8124fc:	10800943 	ldbu	r2,37(r2)
  812500:	10803fcc 	andi	r2,r2,255
  812504:	1080201c 	xori	r2,r2,128
  812508:	10bfe004 	addi	r2,r2,-128
  81250c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812510:	e03ffe15 	stw	zero,-8(fp)
  812514:	00006406 	br	8126a8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  812518:	e0bffe17 	ldw	r2,-8(fp)
  81251c:	e0ffff17 	ldw	r3,-4(fp)
  812520:	10801924 	muli	r2,r2,100
  812524:	10c5883a 	add	r2,r2,r3
  812528:	10802404 	addi	r2,r2,144
  81252c:	10800043 	ldbu	r2,1(r2)
  812530:	10803fcc 	andi	r2,r2,255
  812534:	1080201c 	xori	r2,r2,128
  812538:	10bfe004 	addi	r2,r2,-128
  81253c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812540:	e0bffe17 	ldw	r2,-8(fp)
  812544:	e0ffff17 	ldw	r3,-4(fp)
  812548:	10801924 	muli	r2,r2,100
  81254c:	10c5883a 	add	r2,r2,r3
  812550:	10802404 	addi	r2,r2,144
  812554:	10800083 	ldbu	r2,2(r2)
  812558:	10c03fcc 	andi	r3,r2,255
  81255c:	e0bffc17 	ldw	r2,-16(fp)
  812560:	1885383a 	mul	r2,r3,r2
  812564:	1005d23a 	srai	r2,r2,8
  812568:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  81256c:	e0fffa17 	ldw	r3,-24(fp)
  812570:	e0bffb17 	ldw	r2,-20(fp)
  812574:	18800116 	blt	r3,r2,81257c <lcd_repaint_screen+0x9c>
      offset = 0;
  812578:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81257c:	e03ffd15 	stw	zero,-12(fp)
  812580:	00004306 	br	812690 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812584:	e43ffe17 	ldw	r16,-8(fp)
  812588:	e0fffd17 	ldw	r3,-12(fp)
  81258c:	e0bffa17 	ldw	r2,-24(fp)
  812590:	1889883a 	add	r4,r3,r2
  812594:	e17ffb17 	ldw	r5,-20(fp)
  812598:	080fb880 	call	80fb88 <__modsi3>
  81259c:	1009883a 	mov	r4,r2
  8125a0:	e0ffff17 	ldw	r3,-4(fp)
  8125a4:	80801924 	muli	r2,r16,100
  8125a8:	10c5883a 	add	r2,r2,r3
  8125ac:	1105883a 	add	r2,r2,r4
  8125b0:	10801004 	addi	r2,r2,64
  8125b4:	10800003 	ldbu	r2,0(r2)
  8125b8:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8125bc:	e0bffe17 	ldw	r2,-8(fp)
  8125c0:	e13ffd17 	ldw	r4,-12(fp)
  8125c4:	e0ffff17 	ldw	r3,-4(fp)
  8125c8:	10801924 	muli	r2,r2,100
  8125cc:	10c5883a 	add	r2,r2,r3
  8125d0:	1105883a 	add	r2,r2,r4
  8125d4:	10800c04 	addi	r2,r2,48
  8125d8:	10800003 	ldbu	r2,0(r2)
  8125dc:	10c03fcc 	andi	r3,r2,255
  8125e0:	18c0201c 	xori	r3,r3,128
  8125e4:	18ffe004 	addi	r3,r3,-128
  8125e8:	e0bff947 	ldb	r2,-27(fp)
  8125ec:	18802526 	beq	r3,r2,812684 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8125f0:	e0fffe17 	ldw	r3,-8(fp)
  8125f4:	d0a01504 	addi	r2,gp,-32684
  8125f8:	1885883a 	add	r2,r3,r2
  8125fc:	10800003 	ldbu	r2,0(r2)
  812600:	1007883a 	mov	r3,r2
  812604:	e0bffd17 	ldw	r2,-12(fp)
  812608:	1885883a 	add	r2,r3,r2
  81260c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812610:	e0fff903 	ldbu	r3,-28(fp)
  812614:	e0bfff17 	ldw	r2,-4(fp)
  812618:	108008c3 	ldbu	r2,35(r2)
  81261c:	10803fcc 	andi	r2,r2,255
  812620:	1080201c 	xori	r2,r2,128
  812624:	10bfe004 	addi	r2,r2,-128
  812628:	18800926 	beq	r3,r2,812650 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81262c:	e0fff903 	ldbu	r3,-28(fp)
  812630:	00bfe004 	movi	r2,-128
  812634:	1884b03a 	or	r2,r3,r2
  812638:	11403fcc 	andi	r5,r2,255
  81263c:	e13fff17 	ldw	r4,-4(fp)
  812640:	08122900 	call	812290 <lcd_write_command>
          sp->address = address;
  812644:	e0fff903 	ldbu	r3,-28(fp)
  812648:	e0bfff17 	ldw	r2,-4(fp)
  81264c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812650:	e0bff943 	ldbu	r2,-27(fp)
  812654:	11403fcc 	andi	r5,r2,255
  812658:	e13fff17 	ldw	r4,-4(fp)
  81265c:	08123480 	call	812348 <lcd_write_data>
        sp->line[y].visible[x] = c;
  812660:	e0bffe17 	ldw	r2,-8(fp)
  812664:	e13ffd17 	ldw	r4,-12(fp)
  812668:	e0ffff17 	ldw	r3,-4(fp)
  81266c:	10801924 	muli	r2,r2,100
  812670:	10c5883a 	add	r2,r2,r3
  812674:	1105883a 	add	r2,r2,r4
  812678:	10c00c04 	addi	r3,r2,48
  81267c:	e0bff943 	ldbu	r2,-27(fp)
  812680:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812684:	e0bffd17 	ldw	r2,-12(fp)
  812688:	10800044 	addi	r2,r2,1
  81268c:	e0bffd15 	stw	r2,-12(fp)
  812690:	e0bffd17 	ldw	r2,-12(fp)
  812694:	10800410 	cmplti	r2,r2,16
  812698:	103fba1e 	bne	r2,zero,812584 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81269c:	e0bffe17 	ldw	r2,-8(fp)
  8126a0:	10800044 	addi	r2,r2,1
  8126a4:	e0bffe15 	stw	r2,-8(fp)
  8126a8:	e0bffe17 	ldw	r2,-8(fp)
  8126ac:	10800090 	cmplti	r2,r2,2
  8126b0:	103f991e 	bne	r2,zero,812518 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8126b4:	e037883a 	mov	sp,fp
  8126b8:	dfc00217 	ldw	ra,8(sp)
  8126bc:	df000117 	ldw	fp,4(sp)
  8126c0:	dc000017 	ldw	r16,0(sp)
  8126c4:	dec00304 	addi	sp,sp,12
  8126c8:	f800283a 	ret

008126cc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8126cc:	defffc04 	addi	sp,sp,-16
  8126d0:	dfc00315 	stw	ra,12(sp)
  8126d4:	df000215 	stw	fp,8(sp)
  8126d8:	df000204 	addi	fp,sp,8
  8126dc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126e0:	e03ffe15 	stw	zero,-8(fp)
  8126e4:	00001d06 	br	81275c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8126e8:	e0bffe17 	ldw	r2,-8(fp)
  8126ec:	10800048 	cmpgei	r2,r2,1
  8126f0:	10000f1e 	bne	r2,zero,812730 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8126f4:	e0bffe17 	ldw	r2,-8(fp)
  8126f8:	10801924 	muli	r2,r2,100
  8126fc:	10c01004 	addi	r3,r2,64
  812700:	e0bfff17 	ldw	r2,-4(fp)
  812704:	1889883a 	add	r4,r3,r2
  812708:	e0bffe17 	ldw	r2,-8(fp)
  81270c:	10800044 	addi	r2,r2,1
  812710:	10801924 	muli	r2,r2,100
  812714:	10c01004 	addi	r3,r2,64
  812718:	e0bfff17 	ldw	r2,-4(fp)
  81271c:	1885883a 	add	r2,r3,r2
  812720:	100b883a 	mov	r5,r2
  812724:	01801404 	movi	r6,80
  812728:	08032540 	call	803254 <memcpy>
  81272c:	00000806 	br	812750 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	10801924 	muli	r2,r2,100
  812738:	10c01004 	addi	r3,r2,64
  81273c:	e0bfff17 	ldw	r2,-4(fp)
  812740:	1889883a 	add	r4,r3,r2
  812744:	01400804 	movi	r5,32
  812748:	01801404 	movi	r6,80
  81274c:	08033d40 	call	8033d4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812750:	e0bffe17 	ldw	r2,-8(fp)
  812754:	10800044 	addi	r2,r2,1
  812758:	e0bffe15 	stw	r2,-8(fp)
  81275c:	e0bffe17 	ldw	r2,-8(fp)
  812760:	10800090 	cmplti	r2,r2,2
  812764:	103fe01e 	bne	r2,zero,8126e8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812768:	e0bfff17 	ldw	r2,-4(fp)
  81276c:	10800883 	ldbu	r2,34(r2)
  812770:	10bfffc4 	addi	r2,r2,-1
  812774:	1007883a 	mov	r3,r2
  812778:	e0bfff17 	ldw	r2,-4(fp)
  81277c:	10c00885 	stb	r3,34(r2)
}
  812780:	e037883a 	mov	sp,fp
  812784:	dfc00117 	ldw	ra,4(sp)
  812788:	df000017 	ldw	fp,0(sp)
  81278c:	dec00204 	addi	sp,sp,8
  812790:	f800283a 	ret

00812794 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812794:	defff804 	addi	sp,sp,-32
  812798:	dfc00715 	stw	ra,28(sp)
  81279c:	df000615 	stw	fp,24(sp)
  8127a0:	df000604 	addi	fp,sp,24
  8127a4:	e13ffd15 	stw	r4,-12(fp)
  8127a8:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  8127ac:	e03ffc15 	stw	zero,-16(fp)
  8127b0:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  8127b4:	e0bffd17 	ldw	r2,-12(fp)
  8127b8:	10800a03 	ldbu	r2,40(r2)
  8127bc:	10803fcc 	andi	r2,r2,255
  8127c0:	1080201c 	xori	r2,r2,128
  8127c4:	10bfe004 	addi	r2,r2,-128
  8127c8:	108016d8 	cmpnei	r2,r2,91
  8127cc:	1000491e 	bne	r2,zero,8128f4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  8127d0:	e0bffd17 	ldw	r2,-12(fp)
  8127d4:	10800a04 	addi	r2,r2,40
  8127d8:	10800044 	addi	r2,r2,1
  8127dc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  8127e0:	00000d06 	br	812818 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8127e4:	e0bffc17 	ldw	r2,-16(fp)
  8127e8:	10c002a4 	muli	r3,r2,10
  8127ec:	e0bffa17 	ldw	r2,-24(fp)
  8127f0:	10800003 	ldbu	r2,0(r2)
  8127f4:	10803fcc 	andi	r2,r2,255
  8127f8:	1080201c 	xori	r2,r2,128
  8127fc:	10bfe004 	addi	r2,r2,-128
  812800:	1885883a 	add	r2,r3,r2
  812804:	10bff404 	addi	r2,r2,-48
  812808:	e0bffc15 	stw	r2,-16(fp)
  81280c:	e0bffa17 	ldw	r2,-24(fp)
  812810:	10800044 	addi	r2,r2,1
  812814:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812818:	e0bffa17 	ldw	r2,-24(fp)
  81281c:	10800003 	ldbu	r2,0(r2)
  812820:	10803fcc 	andi	r2,r2,255
  812824:	1080201c 	xori	r2,r2,128
  812828:	10bfe004 	addi	r2,r2,-128
  81282c:	1007883a 	mov	r3,r2
  812830:	00802074 	movhi	r2,129
  812834:	109bd404 	addi	r2,r2,28496
  812838:	10800017 	ldw	r2,0(r2)
  81283c:	1885883a 	add	r2,r3,r2
  812840:	10800003 	ldbu	r2,0(r2)
  812844:	10803fcc 	andi	r2,r2,255
  812848:	1080010c 	andi	r2,r2,4
  81284c:	1004c03a 	cmpne	r2,r2,zero
  812850:	103fe41e 	bne	r2,zero,8127e4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812854:	e0bffa17 	ldw	r2,-24(fp)
  812858:	10800003 	ldbu	r2,0(r2)
  81285c:	10803fcc 	andi	r2,r2,255
  812860:	1080201c 	xori	r2,r2,128
  812864:	10bfe004 	addi	r2,r2,-128
  812868:	10800ed8 	cmpnei	r2,r2,59
  81286c:	1000231e 	bne	r2,zero,8128fc <lcd_handle_escape+0x168>
    {
      ptr++;
  812870:	e0bffa17 	ldw	r2,-24(fp)
  812874:	10800044 	addi	r2,r2,1
  812878:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  81287c:	00000d06 	br	8128b4 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812880:	e0bffb17 	ldw	r2,-20(fp)
  812884:	10c002a4 	muli	r3,r2,10
  812888:	e0bffa17 	ldw	r2,-24(fp)
  81288c:	10800003 	ldbu	r2,0(r2)
  812890:	10803fcc 	andi	r2,r2,255
  812894:	1080201c 	xori	r2,r2,128
  812898:	10bfe004 	addi	r2,r2,-128
  81289c:	1885883a 	add	r2,r3,r2
  8128a0:	10bff404 	addi	r2,r2,-48
  8128a4:	e0bffb15 	stw	r2,-20(fp)
  8128a8:	e0bffa17 	ldw	r2,-24(fp)
  8128ac:	10800044 	addi	r2,r2,1
  8128b0:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8128b4:	e0bffa17 	ldw	r2,-24(fp)
  8128b8:	10800003 	ldbu	r2,0(r2)
  8128bc:	10803fcc 	andi	r2,r2,255
  8128c0:	1080201c 	xori	r2,r2,128
  8128c4:	10bfe004 	addi	r2,r2,-128
  8128c8:	1007883a 	mov	r3,r2
  8128cc:	00802074 	movhi	r2,129
  8128d0:	109bd404 	addi	r2,r2,28496
  8128d4:	10800017 	ldw	r2,0(r2)
  8128d8:	1885883a 	add	r2,r3,r2
  8128dc:	10800003 	ldbu	r2,0(r2)
  8128e0:	10803fcc 	andi	r2,r2,255
  8128e4:	1080010c 	andi	r2,r2,4
  8128e8:	1004c03a 	cmpne	r2,r2,zero
  8128ec:	103fe41e 	bne	r2,zero,812880 <lcd_handle_escape+0xec>
  8128f0:	00000206 	br	8128fc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8128f4:	00bfffc4 	movi	r2,-1
  8128f8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  8128fc:	e0bffe07 	ldb	r2,-8(fp)
  812900:	e0bfff15 	stw	r2,-4(fp)
  812904:	e0ffff17 	ldw	r3,-4(fp)
  812908:	188012a0 	cmpeqi	r2,r3,74
  81290c:	10002f1e 	bne	r2,zero,8129cc <lcd_handle_escape+0x238>
  812910:	e0ffff17 	ldw	r3,-4(fp)
  812914:	188012c8 	cmpgei	r2,r3,75
  812918:	1000041e 	bne	r2,zero,81292c <lcd_handle_escape+0x198>
  81291c:	e0ffff17 	ldw	r3,-4(fp)
  812920:	18801220 	cmpeqi	r2,r3,72
  812924:	1000081e 	bne	r2,zero,812948 <lcd_handle_escape+0x1b4>
  812928:	00004906 	br	812a50 <lcd_handle_escape+0x2bc>
  81292c:	e0ffff17 	ldw	r3,-4(fp)
  812930:	188012e0 	cmpeqi	r2,r3,75
  812934:	10002b1e 	bne	r2,zero,8129e4 <lcd_handle_escape+0x250>
  812938:	e0ffff17 	ldw	r3,-4(fp)
  81293c:	188019a0 	cmpeqi	r2,r3,102
  812940:	1000011e 	bne	r2,zero,812948 <lcd_handle_escape+0x1b4>
  812944:	00004206 	br	812a50 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812948:	e0bffb17 	ldw	r2,-20(fp)
  81294c:	10800050 	cmplti	r2,r2,1
  812950:	1000051e 	bne	r2,zero,812968 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  812954:	e0bffb17 	ldw	r2,-20(fp)
  812958:	10bfffc4 	addi	r2,r2,-1
  81295c:	1007883a 	mov	r3,r2
  812960:	e0bffd17 	ldw	r2,-12(fp)
  812964:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812968:	e0bffc17 	ldw	r2,-16(fp)
  81296c:	10800050 	cmplti	r2,r2,1
  812970:	1000371e 	bne	r2,zero,812a50 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  812974:	e0bffc17 	ldw	r2,-16(fp)
  812978:	10bfffc4 	addi	r2,r2,-1
  81297c:	1007883a 	mov	r3,r2
  812980:	e0bffd17 	ldw	r2,-12(fp)
  812984:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10800883 	ldbu	r2,34(r2)
  812990:	10803fcc 	andi	r2,r2,255
  812994:	10800170 	cmpltui	r2,r2,5
  812998:	1000061e 	bne	r2,zero,8129b4 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  81299c:	e0fffd17 	ldw	r3,-12(fp)
  8129a0:	00800104 	movi	r2,4
  8129a4:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  8129a8:	00000206 	br	8129b4 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  8129ac:	e13ffd17 	ldw	r4,-12(fp)
  8129b0:	08126cc0 	call	8126cc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8129b4:	e0bffd17 	ldw	r2,-12(fp)
  8129b8:	10800883 	ldbu	r2,34(r2)
  8129bc:	10803fcc 	andi	r2,r2,255
  8129c0:	108000e8 	cmpgeui	r2,r2,3
  8129c4:	103ff91e 	bne	r2,zero,8129ac <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  8129c8:	00002106 	br	812a50 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8129cc:	e0bffc17 	ldw	r2,-16(fp)
  8129d0:	10800098 	cmpnei	r2,r2,2
  8129d4:	10001e1e 	bne	r2,zero,812a50 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  8129d8:	e13ffd17 	ldw	r4,-12(fp)
  8129dc:	081241c0 	call	81241c <lcd_clear_screen>
    break;
  8129e0:	00001b06 	br	812a50 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8129e4:	e0bffc17 	ldw	r2,-16(fp)
  8129e8:	10800048 	cmpgei	r2,r2,1
  8129ec:	1000181e 	bne	r2,zero,812a50 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8129f0:	e0bffd17 	ldw	r2,-12(fp)
  8129f4:	10800843 	ldbu	r2,33(r2)
  8129f8:	10803fcc 	andi	r2,r2,255
  8129fc:	10801428 	cmpgeui	r2,r2,80
  812a00:	1000131e 	bne	r2,zero,812a50 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812a04:	e0bffd17 	ldw	r2,-12(fp)
  812a08:	10800883 	ldbu	r2,34(r2)
  812a0c:	10803fcc 	andi	r2,r2,255
  812a10:	10801924 	muli	r2,r2,100
  812a14:	10c01004 	addi	r3,r2,64
  812a18:	e0bffd17 	ldw	r2,-12(fp)
  812a1c:	1887883a 	add	r3,r3,r2
  812a20:	e0bffd17 	ldw	r2,-12(fp)
  812a24:	10800843 	ldbu	r2,33(r2)
  812a28:	10803fcc 	andi	r2,r2,255
  812a2c:	1889883a 	add	r4,r3,r2
  812a30:	e0bffd17 	ldw	r2,-12(fp)
  812a34:	10800843 	ldbu	r2,33(r2)
  812a38:	10c03fcc 	andi	r3,r2,255
  812a3c:	00801404 	movi	r2,80
  812a40:	10c5c83a 	sub	r2,r2,r3
  812a44:	100d883a 	mov	r6,r2
  812a48:	01400804 	movi	r5,32
  812a4c:	08033d40 	call	8033d4 <memset>
    }
    break;
  }
}
  812a50:	e037883a 	mov	sp,fp
  812a54:	dfc00117 	ldw	ra,4(sp)
  812a58:	df000017 	ldw	fp,0(sp)
  812a5c:	dec00204 	addi	sp,sp,8
  812a60:	f800283a 	ret

00812a64 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812a64:	defff204 	addi	sp,sp,-56
  812a68:	dfc00d15 	stw	ra,52(sp)
  812a6c:	df000c15 	stw	fp,48(sp)
  812a70:	dc000b15 	stw	r16,44(sp)
  812a74:	df000b04 	addi	fp,sp,44
  812a78:	e13ffc15 	stw	r4,-16(fp)
  812a7c:	e17ffd15 	stw	r5,-12(fp)
  812a80:	e1bffe15 	stw	r6,-8(fp)
  812a84:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812a88:	e0bffe17 	ldw	r2,-8(fp)
  812a8c:	1007883a 	mov	r3,r2
  812a90:	e0bffd17 	ldw	r2,-12(fp)
  812a94:	10c5883a 	add	r2,r2,r3
  812a98:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812a9c:	e0fffc17 	ldw	r3,-16(fp)
  812aa0:	00800044 	movi	r2,1
  812aa4:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812aa8:	0000a206 	br	812d34 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812aac:	e0bffd17 	ldw	r2,-12(fp)
  812ab0:	10800003 	ldbu	r2,0(r2)
  812ab4:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812ab8:	e0bffc17 	ldw	r2,-16(fp)
  812abc:	10800903 	ldbu	r2,36(r2)
  812ac0:	10803fcc 	andi	r2,r2,255
  812ac4:	1080201c 	xori	r2,r2,128
  812ac8:	10bfe004 	addi	r2,r2,-128
  812acc:	1004803a 	cmplt	r2,r2,zero
  812ad0:	10003b1e 	bne	r2,zero,812bc0 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812ad4:	e0bffc17 	ldw	r2,-16(fp)
  812ad8:	10800903 	ldbu	r2,36(r2)
  812adc:	10803fcc 	andi	r2,r2,255
  812ae0:	1080201c 	xori	r2,r2,128
  812ae4:	10bfe004 	addi	r2,r2,-128
  812ae8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812aec:	e0bff717 	ldw	r2,-36(fp)
  812af0:	1004c03a 	cmpne	r2,r2,zero
  812af4:	1000031e 	bne	r2,zero,812b04 <altera_avalon_lcd_16207_write+0xa0>
  812af8:	e0bff807 	ldb	r2,-32(fp)
  812afc:	108016d8 	cmpnei	r2,r2,91
  812b00:	1000111e 	bne	r2,zero,812b48 <altera_avalon_lcd_16207_write+0xe4>
  812b04:	e0bff717 	ldw	r2,-36(fp)
  812b08:	1005003a 	cmpeq	r2,r2,zero
  812b0c:	10001a1e 	bne	r2,zero,812b78 <altera_avalon_lcd_16207_write+0x114>
  812b10:	e0bff807 	ldb	r2,-32(fp)
  812b14:	1007883a 	mov	r3,r2
  812b18:	00802074 	movhi	r2,129
  812b1c:	109bd404 	addi	r2,r2,28496
  812b20:	10800017 	ldw	r2,0(r2)
  812b24:	1885883a 	add	r2,r3,r2
  812b28:	10800003 	ldbu	r2,0(r2)
  812b2c:	10803fcc 	andi	r2,r2,255
  812b30:	1080010c 	andi	r2,r2,4
  812b34:	1004c03a 	cmpne	r2,r2,zero
  812b38:	10000f1e 	bne	r2,zero,812b78 <altera_avalon_lcd_16207_write+0x114>
  812b3c:	e0bff807 	ldb	r2,-32(fp)
  812b40:	10800ee0 	cmpeqi	r2,r2,59
  812b44:	10000c1e 	bne	r2,zero,812b78 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812b48:	e0fff717 	ldw	r3,-36(fp)
  812b4c:	e0bffc17 	ldw	r2,-16(fp)
  812b50:	1885883a 	add	r2,r3,r2
  812b54:	10800a04 	addi	r2,r2,40
  812b58:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812b5c:	e17ff807 	ldb	r5,-32(fp)
  812b60:	e13ffc17 	ldw	r4,-16(fp)
  812b64:	08127940 	call	812794 <lcd_handle_escape>

        sp->esccount = -1;
  812b68:	e0fffc17 	ldw	r3,-16(fp)
  812b6c:	00bfffc4 	movi	r2,-1
  812b70:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812b74:	00006c06 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812b78:	e0bffc17 	ldw	r2,-16(fp)
  812b7c:	10800903 	ldbu	r2,36(r2)
  812b80:	10803fcc 	andi	r2,r2,255
  812b84:	108001e8 	cmpgeui	r2,r2,7
  812b88:	1000671e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812b8c:	e0fff717 	ldw	r3,-36(fp)
  812b90:	e0bffc17 	ldw	r2,-16(fp)
  812b94:	1885883a 	add	r2,r3,r2
  812b98:	10c00a04 	addi	r3,r2,40
  812b9c:	e0bff803 	ldbu	r2,-32(fp)
  812ba0:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812ba4:	e0bffc17 	ldw	r2,-16(fp)
  812ba8:	10800903 	ldbu	r2,36(r2)
  812bac:	10800044 	addi	r2,r2,1
  812bb0:	1007883a 	mov	r3,r2
  812bb4:	e0bffc17 	ldw	r2,-16(fp)
  812bb8:	10c00905 	stb	r3,36(r2)
  812bbc:	00005a06 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812bc0:	e0bff807 	ldb	r2,-32(fp)
  812bc4:	108006d8 	cmpnei	r2,r2,27
  812bc8:	1000031e 	bne	r2,zero,812bd8 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812bcc:	e0bffc17 	ldw	r2,-16(fp)
  812bd0:	10000905 	stb	zero,36(r2)
  812bd4:	00005406 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812bd8:	e0bff807 	ldb	r2,-32(fp)
  812bdc:	10800358 	cmpnei	r2,r2,13
  812be0:	1000031e 	bne	r2,zero,812bf0 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812be4:	e0bffc17 	ldw	r2,-16(fp)
  812be8:	10000845 	stb	zero,33(r2)
  812bec:	00004e06 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812bf0:	e0bff807 	ldb	r2,-32(fp)
  812bf4:	10800298 	cmpnei	r2,r2,10
  812bf8:	1000101e 	bne	r2,zero,812c3c <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812bfc:	e0bffc17 	ldw	r2,-16(fp)
  812c00:	10000845 	stb	zero,33(r2)
      sp->y++;
  812c04:	e0bffc17 	ldw	r2,-16(fp)
  812c08:	10800883 	ldbu	r2,34(r2)
  812c0c:	10800044 	addi	r2,r2,1
  812c10:	1007883a 	mov	r3,r2
  812c14:	e0bffc17 	ldw	r2,-16(fp)
  812c18:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812c1c:	e0bffc17 	ldw	r2,-16(fp)
  812c20:	10800883 	ldbu	r2,34(r2)
  812c24:	10803fcc 	andi	r2,r2,255
  812c28:	108000f0 	cmpltui	r2,r2,3
  812c2c:	10003e1e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812c30:	e13ffc17 	ldw	r4,-16(fp)
  812c34:	08126cc0 	call	8126cc <lcd_scroll_up>
  812c38:	00003b06 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812c3c:	e0bff807 	ldb	r2,-32(fp)
  812c40:	10800218 	cmpnei	r2,r2,8
  812c44:	10000c1e 	bne	r2,zero,812c78 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812c48:	e0bffc17 	ldw	r2,-16(fp)
  812c4c:	10800843 	ldbu	r2,33(r2)
  812c50:	10803fcc 	andi	r2,r2,255
  812c54:	1005003a 	cmpeq	r2,r2,zero
  812c58:	1000331e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812c5c:	e0bffc17 	ldw	r2,-16(fp)
  812c60:	10800843 	ldbu	r2,33(r2)
  812c64:	10bfffc4 	addi	r2,r2,-1
  812c68:	1007883a 	mov	r3,r2
  812c6c:	e0bffc17 	ldw	r2,-16(fp)
  812c70:	10c00845 	stb	r3,33(r2)
  812c74:	00002c06 	br	812d28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812c78:	e0bff807 	ldb	r2,-32(fp)
  812c7c:	1007883a 	mov	r3,r2
  812c80:	00802074 	movhi	r2,129
  812c84:	109bd404 	addi	r2,r2,28496
  812c88:	10800017 	ldw	r2,0(r2)
  812c8c:	1885883a 	add	r2,r3,r2
  812c90:	10800003 	ldbu	r2,0(r2)
  812c94:	10803fcc 	andi	r2,r2,255
  812c98:	1080201c 	xori	r2,r2,128
  812c9c:	10bfe004 	addi	r2,r2,-128
  812ca0:	108025cc 	andi	r2,r2,151
  812ca4:	1005003a 	cmpeq	r2,r2,zero
  812ca8:	10001f1e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812cac:	e0bffc17 	ldw	r2,-16(fp)
  812cb0:	10800883 	ldbu	r2,34(r2)
  812cb4:	10803fcc 	andi	r2,r2,255
  812cb8:	108000b0 	cmpltui	r2,r2,2
  812cbc:	1000021e 	bne	r2,zero,812cc8 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812cc0:	e13ffc17 	ldw	r4,-16(fp)
  812cc4:	08126cc0 	call	8126cc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812cc8:	e0bffc17 	ldw	r2,-16(fp)
  812ccc:	10800843 	ldbu	r2,33(r2)
  812cd0:	10803fcc 	andi	r2,r2,255
  812cd4:	10801428 	cmpgeui	r2,r2,80
  812cd8:	10000d1e 	bne	r2,zero,812d10 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812cdc:	e0bffc17 	ldw	r2,-16(fp)
  812ce0:	10800883 	ldbu	r2,34(r2)
  812ce4:	11003fcc 	andi	r4,r2,255
  812ce8:	e0bffc17 	ldw	r2,-16(fp)
  812cec:	10800843 	ldbu	r2,33(r2)
  812cf0:	11403fcc 	andi	r5,r2,255
  812cf4:	e0fffc17 	ldw	r3,-16(fp)
  812cf8:	20801924 	muli	r2,r4,100
  812cfc:	10c5883a 	add	r2,r2,r3
  812d00:	1145883a 	add	r2,r2,r5
  812d04:	10c01004 	addi	r3,r2,64
  812d08:	e0bff803 	ldbu	r2,-32(fp)
  812d0c:	18800005 	stb	r2,0(r3)

      sp->x++;
  812d10:	e0bffc17 	ldw	r2,-16(fp)
  812d14:	10800843 	ldbu	r2,33(r2)
  812d18:	10800044 	addi	r2,r2,1
  812d1c:	1007883a 	mov	r3,r2
  812d20:	e0bffc17 	ldw	r2,-16(fp)
  812d24:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812d28:	e0bffd17 	ldw	r2,-12(fp)
  812d2c:	10800044 	addi	r2,r2,1
  812d30:	e0bffd15 	stw	r2,-12(fp)
  812d34:	e0fffd17 	ldw	r3,-12(fp)
  812d38:	e0bffb17 	ldw	r2,-20(fp)
  812d3c:	18bf5b36 	bltu	r3,r2,812aac <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812d40:	00800404 	movi	r2,16
  812d44:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812d48:	e03ffa15 	stw	zero,-24(fp)
  812d4c:	00003606 	br	812e28 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812d50:	00801404 	movi	r2,80
  812d54:	e0bff615 	stw	r2,-40(fp)
  812d58:	00001106 	br	812da0 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812d5c:	e13ffa17 	ldw	r4,-24(fp)
  812d60:	e0bff617 	ldw	r2,-40(fp)
  812d64:	117fffc4 	addi	r5,r2,-1
  812d68:	e0fffc17 	ldw	r3,-16(fp)
  812d6c:	20801924 	muli	r2,r4,100
  812d70:	10c5883a 	add	r2,r2,r3
  812d74:	1145883a 	add	r2,r2,r5
  812d78:	10801004 	addi	r2,r2,64
  812d7c:	10800003 	ldbu	r2,0(r2)
  812d80:	10803fcc 	andi	r2,r2,255
  812d84:	1080201c 	xori	r2,r2,128
  812d88:	10bfe004 	addi	r2,r2,-128
  812d8c:	10800818 	cmpnei	r2,r2,32
  812d90:	1000061e 	bne	r2,zero,812dac <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812d94:	e0bff617 	ldw	r2,-40(fp)
  812d98:	10bfffc4 	addi	r2,r2,-1
  812d9c:	e0bff615 	stw	r2,-40(fp)
  812da0:	e0bff617 	ldw	r2,-40(fp)
  812da4:	10800048 	cmpgei	r2,r2,1
  812da8:	103fec1e 	bne	r2,zero,812d5c <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812dac:	e0bff617 	ldw	r2,-40(fp)
  812db0:	10800448 	cmpgei	r2,r2,17
  812db4:	1000031e 	bne	r2,zero,812dc4 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812db8:	00800404 	movi	r2,16
  812dbc:	e0bff615 	stw	r2,-40(fp)
  812dc0:	00000306 	br	812dd0 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812dc4:	e0bff617 	ldw	r2,-40(fp)
  812dc8:	10800044 	addi	r2,r2,1
  812dcc:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812dd0:	e13ffa17 	ldw	r4,-24(fp)
  812dd4:	e0bff617 	ldw	r2,-40(fp)
  812dd8:	100b883a 	mov	r5,r2
  812ddc:	e0fffc17 	ldw	r3,-16(fp)
  812de0:	20801924 	muli	r2,r4,100
  812de4:	10c5883a 	add	r2,r2,r3
  812de8:	10802404 	addi	r2,r2,144
  812dec:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812df0:	e0fff917 	ldw	r3,-28(fp)
  812df4:	e0bff617 	ldw	r2,-40(fp)
  812df8:	1880020e 	bge	r3,r2,812e04 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812dfc:	e0bff617 	ldw	r2,-40(fp)
  812e00:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812e04:	e0bffa17 	ldw	r2,-24(fp)
  812e08:	e0fffc17 	ldw	r3,-16(fp)
  812e0c:	10801924 	muli	r2,r2,100
  812e10:	10c5883a 	add	r2,r2,r3
  812e14:	10802404 	addi	r2,r2,144
  812e18:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e1c:	e0bffa17 	ldw	r2,-24(fp)
  812e20:	10800044 	addi	r2,r2,1
  812e24:	e0bffa15 	stw	r2,-24(fp)
  812e28:	e0bffa17 	ldw	r2,-24(fp)
  812e2c:	10800090 	cmplti	r2,r2,2
  812e30:	103fc71e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812e34:	e0bff917 	ldw	r2,-28(fp)
  812e38:	10800448 	cmpgei	r2,r2,17
  812e3c:	1000031e 	bne	r2,zero,812e4c <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  812e40:	e0bffc17 	ldw	r2,-16(fp)
  812e44:	10000985 	stb	zero,38(r2)
  812e48:	00002d06 	br	812f00 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  812e4c:	e0bff917 	ldw	r2,-28(fp)
  812e50:	1085883a 	add	r2,r2,r2
  812e54:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  812e58:	e0bff917 	ldw	r2,-28(fp)
  812e5c:	1007883a 	mov	r3,r2
  812e60:	e0bffc17 	ldw	r2,-16(fp)
  812e64:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e68:	e03ffa15 	stw	zero,-24(fp)
  812e6c:	00002106 	br	812ef4 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812e70:	e0bffa17 	ldw	r2,-24(fp)
  812e74:	e0fffc17 	ldw	r3,-16(fp)
  812e78:	10801924 	muli	r2,r2,100
  812e7c:	10c5883a 	add	r2,r2,r3
  812e80:	10802404 	addi	r2,r2,144
  812e84:	10800043 	ldbu	r2,1(r2)
  812e88:	10803fcc 	andi	r2,r2,255
  812e8c:	1080201c 	xori	r2,r2,128
  812e90:	10bfe004 	addi	r2,r2,-128
  812e94:	10800450 	cmplti	r2,r2,17
  812e98:	1000131e 	bne	r2,zero,812ee8 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812e9c:	e43ffa17 	ldw	r16,-24(fp)
  812ea0:	e0bffa17 	ldw	r2,-24(fp)
  812ea4:	e0fffc17 	ldw	r3,-16(fp)
  812ea8:	10801924 	muli	r2,r2,100
  812eac:	10c5883a 	add	r2,r2,r3
  812eb0:	10802404 	addi	r2,r2,144
  812eb4:	10800043 	ldbu	r2,1(r2)
  812eb8:	10803fcc 	andi	r2,r2,255
  812ebc:	1080201c 	xori	r2,r2,128
  812ec0:	10bfe004 	addi	r2,r2,-128
  812ec4:	1008923a 	slli	r4,r2,8
  812ec8:	e17ff917 	ldw	r5,-28(fp)
  812ecc:	080fb280 	call	80fb28 <__divsi3>
  812ed0:	1009883a 	mov	r4,r2
  812ed4:	e0fffc17 	ldw	r3,-16(fp)
  812ed8:	80801924 	muli	r2,r16,100
  812edc:	10c5883a 	add	r2,r2,r3
  812ee0:	10802404 	addi	r2,r2,144
  812ee4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ee8:	e0bffa17 	ldw	r2,-24(fp)
  812eec:	10800044 	addi	r2,r2,1
  812ef0:	e0bffa15 	stw	r2,-24(fp)
  812ef4:	e0bffa17 	ldw	r2,-24(fp)
  812ef8:	10800090 	cmplti	r2,r2,2
  812efc:	103fdc1e 	bne	r2,zero,812e70 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812f00:	e0bffc17 	ldw	r2,-16(fp)
  812f04:	10800943 	ldbu	r2,37(r2)
  812f08:	10803fcc 	andi	r2,r2,255
  812f0c:	1080201c 	xori	r2,r2,128
  812f10:	10bfe004 	addi	r2,r2,-128
  812f14:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  812f18:	e13ffc17 	ldw	r4,-16(fp)
  812f1c:	08124e00 	call	8124e0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812f20:	e0bffc17 	ldw	r2,-16(fp)
  812f24:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812f28:	e0bffc17 	ldw	r2,-16(fp)
  812f2c:	10800943 	ldbu	r2,37(r2)
  812f30:	10c03fcc 	andi	r3,r2,255
  812f34:	18c0201c 	xori	r3,r3,128
  812f38:	18ffe004 	addi	r3,r3,-128
  812f3c:	e0bff517 	ldw	r2,-44(fp)
  812f40:	18800426 	beq	r3,r2,812f54 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812f44:	e0fffc17 	ldw	r3,-16(fp)
  812f48:	00800044 	movi	r2,1
  812f4c:	188009c5 	stb	r2,39(r3)
  }
  812f50:	003feb06 	br	812f00 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812f54:	e0bffe17 	ldw	r2,-8(fp)
}
  812f58:	e037883a 	mov	sp,fp
  812f5c:	dfc00217 	ldw	ra,8(sp)
  812f60:	df000117 	ldw	fp,4(sp)
  812f64:	dc000017 	ldw	r16,0(sp)
  812f68:	dec00304 	addi	sp,sp,12
  812f6c:	f800283a 	ret

00812f70 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812f70:	defffc04 	addi	sp,sp,-16
  812f74:	dfc00315 	stw	ra,12(sp)
  812f78:	df000215 	stw	fp,8(sp)
  812f7c:	df000204 	addi	fp,sp,8
  812f80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812f84:	e0bfff17 	ldw	r2,-4(fp)
  812f88:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812f8c:	e0bffe17 	ldw	r2,-8(fp)
  812f90:	10800943 	ldbu	r2,37(r2)
  812f94:	10803fcc 	andi	r2,r2,255
  812f98:	1080201c 	xori	r2,r2,128
  812f9c:	10bfe004 	addi	r2,r2,-128
  812fa0:	10c00044 	addi	r3,r2,1
  812fa4:	e0bffe17 	ldw	r2,-8(fp)
  812fa8:	10800983 	ldbu	r2,38(r2)
  812fac:	10803fcc 	andi	r2,r2,255
  812fb0:	1080201c 	xori	r2,r2,128
  812fb4:	10bfe004 	addi	r2,r2,-128
  812fb8:	18800316 	blt	r3,r2,812fc8 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  812fbc:	e0bffe17 	ldw	r2,-8(fp)
  812fc0:	10000945 	stb	zero,37(r2)
  812fc4:	00000606 	br	812fe0 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812fc8:	e0bffe17 	ldw	r2,-8(fp)
  812fcc:	10800943 	ldbu	r2,37(r2)
  812fd0:	10800044 	addi	r2,r2,1
  812fd4:	1007883a 	mov	r3,r2
  812fd8:	e0bffe17 	ldw	r2,-8(fp)
  812fdc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  812fe0:	e0bffe17 	ldw	r2,-8(fp)
  812fe4:	10800983 	ldbu	r2,38(r2)
  812fe8:	10803fcc 	andi	r2,r2,255
  812fec:	1080201c 	xori	r2,r2,128
  812ff0:	10bfe004 	addi	r2,r2,-128
  812ff4:	10800050 	cmplti	r2,r2,1
  812ff8:	1000091e 	bne	r2,zero,813020 <alt_lcd_16207_timeout+0xb0>
  812ffc:	e0bffe17 	ldw	r2,-8(fp)
  813000:	108009c3 	ldbu	r2,39(r2)
  813004:	10803fcc 	andi	r2,r2,255
  813008:	1080201c 	xori	r2,r2,128
  81300c:	10bfe004 	addi	r2,r2,-128
  813010:	1004c03a 	cmpne	r2,r2,zero
  813014:	1000021e 	bne	r2,zero,813020 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  813018:	e13ffe17 	ldw	r4,-8(fp)
  81301c:	08124e00 	call	8124e0 <lcd_repaint_screen>

  return sp->period;
  813020:	e0bffe17 	ldw	r2,-8(fp)
  813024:	10800717 	ldw	r2,28(r2)
}
  813028:	e037883a 	mov	sp,fp
  81302c:	dfc00117 	ldw	ra,4(sp)
  813030:	df000017 	ldw	fp,0(sp)
  813034:	dec00204 	addi	sp,sp,8
  813038:	f800283a 	ret

0081303c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81303c:	defffc04 	addi	sp,sp,-16
  813040:	dfc00315 	stw	ra,12(sp)
  813044:	df000215 	stw	fp,8(sp)
  813048:	df000204 	addi	fp,sp,8
  81304c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813050:	e0bfff17 	ldw	r2,-4(fp)
  813054:	10800017 	ldw	r2,0(r2)
  813058:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81305c:	e0bfff17 	ldw	r2,-4(fp)
  813060:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813064:	010ea604 	movi	r4,15000
  813068:	08145440 	call	814544 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81306c:	e0bffe17 	ldw	r2,-8(fp)
  813070:	1007883a 	mov	r3,r2
  813074:	00800c04 	movi	r2,48
  813078:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81307c:	01040104 	movi	r4,4100
  813080:	08145440 	call	814544 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813084:	e0bffe17 	ldw	r2,-8(fp)
  813088:	1007883a 	mov	r3,r2
  81308c:	00800c04 	movi	r2,48
  813090:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813094:	0100fa04 	movi	r4,1000
  813098:	08145440 	call	814544 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81309c:	e0bffe17 	ldw	r2,-8(fp)
  8130a0:	1007883a 	mov	r3,r2
  8130a4:	00800c04 	movi	r2,48
  8130a8:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8130ac:	e13fff17 	ldw	r4,-4(fp)
  8130b0:	01400e04 	movi	r5,56
  8130b4:	08122900 	call	812290 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8130b8:	e13fff17 	ldw	r4,-4(fp)
  8130bc:	01400204 	movi	r5,8
  8130c0:	08122900 	call	812290 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8130c4:	e13fff17 	ldw	r4,-4(fp)
  8130c8:	081241c0 	call	81241c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8130cc:	e13fff17 	ldw	r4,-4(fp)
  8130d0:	01400184 	movi	r5,6
  8130d4:	08122900 	call	812290 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8130d8:	e13fff17 	ldw	r4,-4(fp)
  8130dc:	01400304 	movi	r5,12
  8130e0:	08122900 	call	812290 <lcd_write_command>

  sp->esccount = -1;
  8130e4:	e0ffff17 	ldw	r3,-4(fp)
  8130e8:	00bfffc4 	movi	r2,-1
  8130ec:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8130f0:	e0bfff17 	ldw	r2,-4(fp)
  8130f4:	11000a04 	addi	r4,r2,40
  8130f8:	000b883a 	mov	r5,zero
  8130fc:	01800204 	movi	r6,8
  813100:	08033d40 	call	8033d4 <memset>

  sp->scrollpos = 0;
  813104:	e0bfff17 	ldw	r2,-4(fp)
  813108:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81310c:	e0bfff17 	ldw	r2,-4(fp)
  813110:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  813114:	e0bfff17 	ldw	r2,-4(fp)
  813118:	100009c5 	stb	zero,39(r2)
  81311c:	008020b4 	movhi	r2,130
  813120:	10a33104 	addi	r2,r2,-29500
  813124:	10800017 	ldw	r2,0(r2)
  813128:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81312c:	01400284 	movi	r5,10
  813130:	080fbe80 	call	80fbe8 <__udivsi3>
  813134:	1007883a 	mov	r3,r2
  813138:	e0bfff17 	ldw	r2,-4(fp)
  81313c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813140:	e0bfff17 	ldw	r2,-4(fp)
  813144:	11000104 	addi	r4,r2,4
  813148:	e0bfff17 	ldw	r2,-4(fp)
  81314c:	10800717 	ldw	r2,28(r2)
  813150:	100b883a 	mov	r5,r2
  813154:	01802074 	movhi	r6,129
  813158:	318bdc04 	addi	r6,r6,12144
  81315c:	e1ffff17 	ldw	r7,-4(fp)
  813160:	08104880 	call	810488 <alt_alarm_start>
}
  813164:	e037883a 	mov	sp,fp
  813168:	dfc00117 	ldw	ra,4(sp)
  81316c:	df000017 	ldw	fp,0(sp)
  813170:	dec00204 	addi	sp,sp,8
  813174:	f800283a 	ret

00813178 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813178:	defffa04 	addi	sp,sp,-24
  81317c:	dfc00515 	stw	ra,20(sp)
  813180:	df000415 	stw	fp,16(sp)
  813184:	df000404 	addi	fp,sp,16
  813188:	e13ffd15 	stw	r4,-12(fp)
  81318c:	e17ffe15 	stw	r5,-8(fp)
  813190:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813194:	e0bffd17 	ldw	r2,-12(fp)
  813198:	10800017 	ldw	r2,0(r2)
  81319c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8131a0:	e0bffc17 	ldw	r2,-16(fp)
  8131a4:	11000a04 	addi	r4,r2,40
  8131a8:	e0bffd17 	ldw	r2,-12(fp)
  8131ac:	11c00217 	ldw	r7,8(r2)
  8131b0:	e17ffe17 	ldw	r5,-8(fp)
  8131b4:	e1bfff17 	ldw	r6,-4(fp)
  8131b8:	0812a640 	call	812a64 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8131bc:	e037883a 	mov	sp,fp
  8131c0:	dfc00117 	ldw	ra,4(sp)
  8131c4:	df000017 	ldw	fp,0(sp)
  8131c8:	dec00204 	addi	sp,sp,8
  8131cc:	f800283a 	ret

008131d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8131d0:	defffa04 	addi	sp,sp,-24
  8131d4:	dfc00515 	stw	ra,20(sp)
  8131d8:	df000415 	stw	fp,16(sp)
  8131dc:	df000404 	addi	fp,sp,16
  8131e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8131e4:	e0bfff17 	ldw	r2,-4(fp)
  8131e8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8131ec:	e0bfff17 	ldw	r2,-4(fp)
  8131f0:	10800104 	addi	r2,r2,4
  8131f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8131f8:	0005303a 	rdctl	r2,status
  8131fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813200:	e0fffd17 	ldw	r3,-12(fp)
  813204:	00bfff84 	movi	r2,-2
  813208:	1884703a 	and	r2,r3,r2
  81320c:	1001703a 	wrctl	status,r2
  
  return context;
  813210:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813214:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  813218:	08114580 	call	811458 <alt_tick>
  81321c:	e0bffe17 	ldw	r2,-8(fp)
  813220:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813224:	e0bffc17 	ldw	r2,-16(fp)
  813228:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81322c:	e037883a 	mov	sp,fp
  813230:	dfc00117 	ldw	ra,4(sp)
  813234:	df000017 	ldw	fp,0(sp)
  813238:	dec00204 	addi	sp,sp,8
  81323c:	f800283a 	ret

00813240 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813240:	defff804 	addi	sp,sp,-32
  813244:	dfc00715 	stw	ra,28(sp)
  813248:	df000615 	stw	fp,24(sp)
  81324c:	df000604 	addi	fp,sp,24
  813250:	e13ffc15 	stw	r4,-16(fp)
  813254:	e17ffd15 	stw	r5,-12(fp)
  813258:	e1bffe15 	stw	r6,-8(fp)
  81325c:	e1ffff15 	stw	r7,-4(fp)
  813260:	e0bfff17 	ldw	r2,-4(fp)
  813264:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813268:	008020b4 	movhi	r2,130
  81326c:	10a33104 	addi	r2,r2,-29500
  813270:	10800017 	ldw	r2,0(r2)
  813274:	1004c03a 	cmpne	r2,r2,zero
  813278:	1000041e 	bne	r2,zero,81328c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81327c:	00c020b4 	movhi	r3,130
  813280:	18e33104 	addi	r3,r3,-29500
  813284:	e0bffb17 	ldw	r2,-20(fp)
  813288:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81328c:	e0bffc17 	ldw	r2,-16(fp)
  813290:	10800104 	addi	r2,r2,4
  813294:	1007883a 	mov	r3,r2
  813298:	008001c4 	movi	r2,7
  81329c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8132a0:	d8000015 	stw	zero,0(sp)
  8132a4:	e13ffd17 	ldw	r4,-12(fp)
  8132a8:	e17ffe17 	ldw	r5,-8(fp)
  8132ac:	01802074 	movhi	r6,129
  8132b0:	318c7404 	addi	r6,r6,12752
  8132b4:	e1fffc17 	ldw	r7,-16(fp)
  8132b8:	081413c0 	call	81413c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8132bc:	e037883a 	mov	sp,fp
  8132c0:	dfc00117 	ldw	ra,4(sp)
  8132c4:	df000017 	ldw	fp,0(sp)
  8132c8:	dec00204 	addi	sp,sp,8
  8132cc:	f800283a 	ret

008132d0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8132d0:	defffa04 	addi	sp,sp,-24
  8132d4:	dfc00515 	stw	ra,20(sp)
  8132d8:	df000415 	stw	fp,16(sp)
  8132dc:	df000404 	addi	fp,sp,16
  8132e0:	e13ffd15 	stw	r4,-12(fp)
  8132e4:	e17ffe15 	stw	r5,-8(fp)
  8132e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8132ec:	e0bffd17 	ldw	r2,-12(fp)
  8132f0:	10800017 	ldw	r2,0(r2)
  8132f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8132f8:	e0bffc17 	ldw	r2,-16(fp)
  8132fc:	11000a04 	addi	r4,r2,40
  813300:	e0bffd17 	ldw	r2,-12(fp)
  813304:	11c00217 	ldw	r7,8(r2)
  813308:	e17ffe17 	ldw	r5,-8(fp)
  81330c:	e1bfff17 	ldw	r6,-4(fp)
  813310:	08137c80 	call	8137c8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  813314:	e037883a 	mov	sp,fp
  813318:	dfc00117 	ldw	ra,4(sp)
  81331c:	df000017 	ldw	fp,0(sp)
  813320:	dec00204 	addi	sp,sp,8
  813324:	f800283a 	ret

00813328 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813328:	defffa04 	addi	sp,sp,-24
  81332c:	dfc00515 	stw	ra,20(sp)
  813330:	df000415 	stw	fp,16(sp)
  813334:	df000404 	addi	fp,sp,16
  813338:	e13ffd15 	stw	r4,-12(fp)
  81333c:	e17ffe15 	stw	r5,-8(fp)
  813340:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813344:	e0bffd17 	ldw	r2,-12(fp)
  813348:	10800017 	ldw	r2,0(r2)
  81334c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  813350:	e0bffc17 	ldw	r2,-16(fp)
  813354:	11000a04 	addi	r4,r2,40
  813358:	e0bffd17 	ldw	r2,-12(fp)
  81335c:	11c00217 	ldw	r7,8(r2)
  813360:	e17ffe17 	ldw	r5,-8(fp)
  813364:	e1bfff17 	ldw	r6,-4(fp)
  813368:	0813a580 	call	813a58 <altera_avalon_uart_write>
      fd->fd_flags);
}
  81336c:	e037883a 	mov	sp,fp
  813370:	dfc00117 	ldw	ra,4(sp)
  813374:	df000017 	ldw	fp,0(sp)
  813378:	dec00204 	addi	sp,sp,8
  81337c:	f800283a 	ret

00813380 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  813380:	defffc04 	addi	sp,sp,-16
  813384:	dfc00315 	stw	ra,12(sp)
  813388:	df000215 	stw	fp,8(sp)
  81338c:	df000204 	addi	fp,sp,8
  813390:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813394:	e0bfff17 	ldw	r2,-4(fp)
  813398:	10800017 	ldw	r2,0(r2)
  81339c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8133a0:	e0bffe17 	ldw	r2,-8(fp)
  8133a4:	11000a04 	addi	r4,r2,40
  8133a8:	e0bfff17 	ldw	r2,-4(fp)
  8133ac:	11400217 	ldw	r5,8(r2)
  8133b0:	08137680 	call	813768 <altera_avalon_uart_close>
}
  8133b4:	e037883a 	mov	sp,fp
  8133b8:	dfc00117 	ldw	ra,4(sp)
  8133bc:	df000017 	ldw	fp,0(sp)
  8133c0:	dec00204 	addi	sp,sp,8
  8133c4:	f800283a 	ret

008133c8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8133c8:	defff704 	addi	sp,sp,-36
  8133cc:	dfc00815 	stw	ra,32(sp)
  8133d0:	df000715 	stw	fp,28(sp)
  8133d4:	df000704 	addi	fp,sp,28
  8133d8:	e13ffc15 	stw	r4,-16(fp)
  8133dc:	e17ffd15 	stw	r5,-12(fp)
  8133e0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  8133e4:	e0bffc17 	ldw	r2,-16(fp)
  8133e8:	10800017 	ldw	r2,0(r2)
  8133ec:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8133f0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8133f4:	1004c03a 	cmpne	r2,r2,zero
  8133f8:	1000061e 	bne	r2,zero,813414 <altera_avalon_uart_init+0x4c>
  8133fc:	0005883a 	mov	r2,zero
  813400:	1004c03a 	cmpne	r2,r2,zero
  813404:	1000031e 	bne	r2,zero,813414 <altera_avalon_uart_init+0x4c>
  813408:	0005883a 	mov	r2,zero
  81340c:	1005003a 	cmpeq	r2,r2,zero
  813410:	1000031e 	bne	r2,zero,813420 <altera_avalon_uart_init+0x58>
  813414:	00800044 	movi	r2,1
  813418:	e0bfff15 	stw	r2,-4(fp)
  81341c:	00000106 	br	813424 <altera_avalon_uart_init+0x5c>
  813420:	e03fff15 	stw	zero,-4(fp)
  813424:	e0bfff17 	ldw	r2,-4(fp)
  813428:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81342c:	e0bffa17 	ldw	r2,-24(fp)
  813430:	1004c03a 	cmpne	r2,r2,zero
  813434:	1000111e 	bne	r2,zero,81347c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  813438:	e0fffc17 	ldw	r3,-16(fp)
  81343c:	00832004 	movi	r2,3200
  813440:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813444:	e0bffb17 	ldw	r2,-20(fp)
  813448:	11000304 	addi	r4,r2,12
  81344c:	e0bffc17 	ldw	r2,-16(fp)
  813450:	10800117 	ldw	r2,4(r2)
  813454:	1007883a 	mov	r3,r2
  813458:	2005883a 	mov	r2,r4
  81345c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  813460:	d8000015 	stw	zero,0(sp)
  813464:	e13ffd17 	ldw	r4,-12(fp)
  813468:	e17ffe17 	ldw	r5,-8(fp)
  81346c:	01802074 	movhi	r6,129
  813470:	318d2404 	addi	r6,r6,13456
  813474:	e1fffc17 	ldw	r7,-16(fp)
  813478:	081413c0 	call	81413c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81347c:	e037883a 	mov	sp,fp
  813480:	dfc00117 	ldw	ra,4(sp)
  813484:	df000017 	ldw	fp,0(sp)
  813488:	dec00204 	addi	sp,sp,8
  81348c:	f800283a 	ret

00813490 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  813490:	defffa04 	addi	sp,sp,-24
  813494:	dfc00515 	stw	ra,20(sp)
  813498:	df000415 	stw	fp,16(sp)
  81349c:	df000404 	addi	fp,sp,16
  8134a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8134a4:	e0bfff17 	ldw	r2,-4(fp)
  8134a8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8134ac:	e0bffd17 	ldw	r2,-12(fp)
  8134b0:	10800017 	ldw	r2,0(r2)
  8134b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8134b8:	e0bffc17 	ldw	r2,-16(fp)
  8134bc:	10800204 	addi	r2,r2,8
  8134c0:	10800037 	ldwio	r2,0(r2)
  8134c4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8134c8:	e0bffc17 	ldw	r2,-16(fp)
  8134cc:	10800204 	addi	r2,r2,8
  8134d0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8134d4:	e0bffc17 	ldw	r2,-16(fp)
  8134d8:	10800204 	addi	r2,r2,8
  8134dc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8134e0:	e0bffe17 	ldw	r2,-8(fp)
  8134e4:	1080200c 	andi	r2,r2,128
  8134e8:	1005003a 	cmpeq	r2,r2,zero
  8134ec:	1000031e 	bne	r2,zero,8134fc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8134f0:	e13ffd17 	ldw	r4,-12(fp)
  8134f4:	e17ffe17 	ldw	r5,-8(fp)
  8134f8:	081352c0 	call	81352c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8134fc:	e0bffe17 	ldw	r2,-8(fp)
  813500:	1081100c 	andi	r2,r2,1088
  813504:	1005003a 	cmpeq	r2,r2,zero
  813508:	1000031e 	bne	r2,zero,813518 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  81350c:	e13ffd17 	ldw	r4,-12(fp)
  813510:	e17ffe17 	ldw	r5,-8(fp)
  813514:	081360c0 	call	81360c <altera_avalon_uart_txirq>
  }
  

}
  813518:	e037883a 	mov	sp,fp
  81351c:	dfc00117 	ldw	ra,4(sp)
  813520:	df000017 	ldw	fp,0(sp)
  813524:	dec00204 	addi	sp,sp,8
  813528:	f800283a 	ret

0081352c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81352c:	defffc04 	addi	sp,sp,-16
  813530:	df000315 	stw	fp,12(sp)
  813534:	df000304 	addi	fp,sp,12
  813538:	e13ffe15 	stw	r4,-8(fp)
  81353c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813540:	e0bfff17 	ldw	r2,-4(fp)
  813544:	108000cc 	andi	r2,r2,3
  813548:	1004c03a 	cmpne	r2,r2,zero
  81354c:	10002b1e 	bne	r2,zero,8135fc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  813550:	e0bffe17 	ldw	r2,-8(fp)
  813554:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813558:	e0bffe17 	ldw	r2,-8(fp)
  81355c:	10800317 	ldw	r2,12(r2)
  813560:	10800044 	addi	r2,r2,1
  813564:	10800fcc 	andi	r2,r2,63
  813568:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81356c:	e0bffe17 	ldw	r2,-8(fp)
  813570:	11000317 	ldw	r4,12(r2)
  813574:	e0bffe17 	ldw	r2,-8(fp)
  813578:	10800017 	ldw	r2,0(r2)
  81357c:	10800037 	ldwio	r2,0(r2)
  813580:	1007883a 	mov	r3,r2
  813584:	e0bffe17 	ldw	r2,-8(fp)
  813588:	2085883a 	add	r2,r4,r2
  81358c:	10800704 	addi	r2,r2,28
  813590:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  813594:	e0fffe17 	ldw	r3,-8(fp)
  813598:	e0bffd17 	ldw	r2,-12(fp)
  81359c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8135a0:	e0bffe17 	ldw	r2,-8(fp)
  8135a4:	10800317 	ldw	r2,12(r2)
  8135a8:	10800044 	addi	r2,r2,1
  8135ac:	10800fcc 	andi	r2,r2,63
  8135b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8135b4:	e0bffe17 	ldw	r2,-8(fp)
  8135b8:	10c00217 	ldw	r3,8(r2)
  8135bc:	e0bffd17 	ldw	r2,-12(fp)
  8135c0:	18800e1e 	bne	r3,r2,8135fc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8135c4:	e0bffe17 	ldw	r2,-8(fp)
  8135c8:	10c00117 	ldw	r3,4(r2)
  8135cc:	00bfdfc4 	movi	r2,-129
  8135d0:	1886703a 	and	r3,r3,r2
  8135d4:	e0bffe17 	ldw	r2,-8(fp)
  8135d8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8135dc:	e0bffe17 	ldw	r2,-8(fp)
  8135e0:	10800017 	ldw	r2,0(r2)
  8135e4:	11000304 	addi	r4,r2,12
  8135e8:	e0bffe17 	ldw	r2,-8(fp)
  8135ec:	10800117 	ldw	r2,4(r2)
  8135f0:	1007883a 	mov	r3,r2
  8135f4:	2005883a 	mov	r2,r4
  8135f8:	10c00035 	stwio	r3,0(r2)
  }   
}
  8135fc:	e037883a 	mov	sp,fp
  813600:	df000017 	ldw	fp,0(sp)
  813604:	dec00104 	addi	sp,sp,4
  813608:	f800283a 	ret

0081360c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81360c:	defffd04 	addi	sp,sp,-12
  813610:	df000215 	stw	fp,8(sp)
  813614:	df000204 	addi	fp,sp,8
  813618:	e13ffe15 	stw	r4,-8(fp)
  81361c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813620:	e0bffe17 	ldw	r2,-8(fp)
  813624:	10c00417 	ldw	r3,16(r2)
  813628:	e0bffe17 	ldw	r2,-8(fp)
  81362c:	10800517 	ldw	r2,20(r2)
  813630:	18803626 	beq	r3,r2,81370c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813634:	e0bffe17 	ldw	r2,-8(fp)
  813638:	10800617 	ldw	r2,24(r2)
  81363c:	1080008c 	andi	r2,r2,2
  813640:	1005003a 	cmpeq	r2,r2,zero
  813644:	1000041e 	bne	r2,zero,813658 <altera_avalon_uart_txirq+0x4c>
  813648:	e0bfff17 	ldw	r2,-4(fp)
  81364c:	1082000c 	andi	r2,r2,2048
  813650:	1005003a 	cmpeq	r2,r2,zero
  813654:	10001e1e 	bne	r2,zero,8136d0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  813658:	e0bffe17 	ldw	r2,-8(fp)
  81365c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	10800017 	ldw	r2,0(r2)
  813668:	11000104 	addi	r4,r2,4
  81366c:	e0bffe17 	ldw	r2,-8(fp)
  813670:	10c00417 	ldw	r3,16(r2)
  813674:	e0bffe17 	ldw	r2,-8(fp)
  813678:	1885883a 	add	r2,r3,r2
  81367c:	10801704 	addi	r2,r2,92
  813680:	10800003 	ldbu	r2,0(r2)
  813684:	10c03fcc 	andi	r3,r2,255
  813688:	2005883a 	mov	r2,r4
  81368c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  813690:	e0bffe17 	ldw	r2,-8(fp)
  813694:	10800417 	ldw	r2,16(r2)
  813698:	10c00044 	addi	r3,r2,1
  81369c:	e0bffe17 	ldw	r2,-8(fp)
  8136a0:	10c00415 	stw	r3,16(r2)
  8136a4:	e0bffe17 	ldw	r2,-8(fp)
  8136a8:	10800417 	ldw	r2,16(r2)
  8136ac:	10c00fcc 	andi	r3,r2,63
  8136b0:	e0bffe17 	ldw	r2,-8(fp)
  8136b4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8136b8:	e0bffe17 	ldw	r2,-8(fp)
  8136bc:	10800117 	ldw	r2,4(r2)
  8136c0:	10c01014 	ori	r3,r2,64
  8136c4:	e0bffe17 	ldw	r2,-8(fp)
  8136c8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8136cc:	00000f06 	br	81370c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8136d0:	e0bffe17 	ldw	r2,-8(fp)
  8136d4:	10800017 	ldw	r2,0(r2)
  8136d8:	10800204 	addi	r2,r2,8
  8136dc:	10800037 	ldwio	r2,0(r2)
  8136e0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8136e4:	e0bfff17 	ldw	r2,-4(fp)
  8136e8:	1082000c 	andi	r2,r2,2048
  8136ec:	1004c03a 	cmpne	r2,r2,zero
  8136f0:	1000061e 	bne	r2,zero,81370c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8136f4:	e0bffe17 	ldw	r2,-8(fp)
  8136f8:	10c00117 	ldw	r3,4(r2)
  8136fc:	00bfefc4 	movi	r2,-65
  813700:	1886703a 	and	r3,r3,r2
  813704:	e0bffe17 	ldw	r2,-8(fp)
  813708:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81370c:	e0bffe17 	ldw	r2,-8(fp)
  813710:	10c00417 	ldw	r3,16(r2)
  813714:	e0bffe17 	ldw	r2,-8(fp)
  813718:	10800517 	ldw	r2,20(r2)
  81371c:	1880061e 	bne	r3,r2,813738 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813720:	e0bffe17 	ldw	r2,-8(fp)
  813724:	10c00117 	ldw	r3,4(r2)
  813728:	00beefc4 	movi	r2,-1089
  81372c:	1886703a 	and	r3,r3,r2
  813730:	e0bffe17 	ldw	r2,-8(fp)
  813734:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813738:	e0bffe17 	ldw	r2,-8(fp)
  81373c:	10800017 	ldw	r2,0(r2)
  813740:	11000304 	addi	r4,r2,12
  813744:	e0bffe17 	ldw	r2,-8(fp)
  813748:	10800117 	ldw	r2,4(r2)
  81374c:	1007883a 	mov	r3,r2
  813750:	2005883a 	mov	r2,r4
  813754:	10c00035 	stwio	r3,0(r2)
}
  813758:	e037883a 	mov	sp,fp
  81375c:	df000017 	ldw	fp,0(sp)
  813760:	dec00104 	addi	sp,sp,4
  813764:	f800283a 	ret

00813768 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813768:	defffc04 	addi	sp,sp,-16
  81376c:	df000315 	stw	fp,12(sp)
  813770:	df000304 	addi	fp,sp,12
  813774:	e13ffd15 	stw	r4,-12(fp)
  813778:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81377c:	00000706 	br	81379c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813780:	e0bffe17 	ldw	r2,-8(fp)
  813784:	1090000c 	andi	r2,r2,16384
  813788:	1005003a 	cmpeq	r2,r2,zero
  81378c:	1000031e 	bne	r2,zero,81379c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  813790:	00bffd44 	movi	r2,-11
  813794:	e0bfff15 	stw	r2,-4(fp)
  813798:	00000606 	br	8137b4 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81379c:	e0bffd17 	ldw	r2,-12(fp)
  8137a0:	10c00417 	ldw	r3,16(r2)
  8137a4:	e0bffd17 	ldw	r2,-12(fp)
  8137a8:	10800517 	ldw	r2,20(r2)
  8137ac:	18bff41e 	bne	r3,r2,813780 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8137b0:	e03fff15 	stw	zero,-4(fp)
  8137b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8137b8:	e037883a 	mov	sp,fp
  8137bc:	df000017 	ldw	fp,0(sp)
  8137c0:	dec00104 	addi	sp,sp,4
  8137c4:	f800283a 	ret

008137c8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8137c8:	defff004 	addi	sp,sp,-64
  8137cc:	dfc00f15 	stw	ra,60(sp)
  8137d0:	df000e15 	stw	fp,56(sp)
  8137d4:	df000e04 	addi	fp,sp,56
  8137d8:	e13ffb15 	stw	r4,-20(fp)
  8137dc:	e17ffc15 	stw	r5,-16(fp)
  8137e0:	e1bffd15 	stw	r6,-12(fp)
  8137e4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  8137e8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  8137ec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8137f0:	e0bffe17 	ldw	r2,-8(fp)
  8137f4:	1090000c 	andi	r2,r2,16384
  8137f8:	1005003a 	cmpeq	r2,r2,zero
  8137fc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  813800:	e0bffb17 	ldw	r2,-20(fp)
  813804:	10800217 	ldw	r2,8(r2)
  813808:	10800044 	addi	r2,r2,1
  81380c:	10800fcc 	andi	r2,r2,63
  813810:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813814:	00001906 	br	81387c <altera_avalon_uart_read+0xb4>
    {
      count++;
  813818:	e0bff617 	ldw	r2,-40(fp)
  81381c:	10800044 	addi	r2,r2,1
  813820:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  813824:	e0bffb17 	ldw	r2,-20(fp)
  813828:	10c00217 	ldw	r3,8(r2)
  81382c:	e0bffb17 	ldw	r2,-20(fp)
  813830:	1885883a 	add	r2,r3,r2
  813834:	10800704 	addi	r2,r2,28
  813838:	10800003 	ldbu	r2,0(r2)
  81383c:	1007883a 	mov	r3,r2
  813840:	e0bffc17 	ldw	r2,-16(fp)
  813844:	10c00005 	stb	r3,0(r2)
  813848:	e0bffc17 	ldw	r2,-16(fp)
  81384c:	10800044 	addi	r2,r2,1
  813850:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  813854:	e0bffb17 	ldw	r2,-20(fp)
  813858:	10800217 	ldw	r2,8(r2)
  81385c:	10c00044 	addi	r3,r2,1
  813860:	e0bffb17 	ldw	r2,-20(fp)
  813864:	10c00215 	stw	r3,8(r2)
  813868:	e0bffb17 	ldw	r2,-20(fp)
  81386c:	10800217 	ldw	r2,8(r2)
  813870:	10c00fcc 	andi	r3,r2,63
  813874:	e0bffb17 	ldw	r2,-20(fp)
  813878:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81387c:	e0fff617 	ldw	r3,-40(fp)
  813880:	e0bffd17 	ldw	r2,-12(fp)
  813884:	1880050e 	bge	r3,r2,81389c <altera_avalon_uart_read+0xd4>
  813888:	e0bffb17 	ldw	r2,-20(fp)
  81388c:	10c00217 	ldw	r3,8(r2)
  813890:	e0bffb17 	ldw	r2,-20(fp)
  813894:	10800317 	ldw	r2,12(r2)
  813898:	18bfdf1e 	bne	r3,r2,813818 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  81389c:	e0bff617 	ldw	r2,-40(fp)
  8138a0:	1004c03a 	cmpne	r2,r2,zero
  8138a4:	1000271e 	bne	r2,zero,813944 <altera_avalon_uart_read+0x17c>
  8138a8:	e0bffb17 	ldw	r2,-20(fp)
  8138ac:	10c00217 	ldw	r3,8(r2)
  8138b0:	e0bffb17 	ldw	r2,-20(fp)
  8138b4:	10800317 	ldw	r2,12(r2)
  8138b8:	1880221e 	bne	r3,r2,813944 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  8138bc:	e0bff917 	ldw	r2,-28(fp)
  8138c0:	1004c03a 	cmpne	r2,r2,zero
  8138c4:	1000061e 	bne	r2,zero,8138e0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8138c8:	08139f80 	call	8139f8 <alt_get_errno>
  8138cc:	00c002c4 	movi	r3,11
  8138d0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8138d4:	00800044 	movi	r2,1
  8138d8:	e0bff705 	stb	r2,-36(fp)
        break;
  8138dc:	00001f06 	br	81395c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8138e0:	0005303a 	rdctl	r2,status
  8138e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8138e8:	e0fff517 	ldw	r3,-44(fp)
  8138ec:	00bfff84 	movi	r2,-2
  8138f0:	1884703a 	and	r2,r3,r2
  8138f4:	1001703a 	wrctl	status,r2
  
  return context;
  8138f8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8138fc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813900:	e0bffb17 	ldw	r2,-20(fp)
  813904:	10800117 	ldw	r2,4(r2)
  813908:	10c02014 	ori	r3,r2,128
  81390c:	e0bffb17 	ldw	r2,-20(fp)
  813910:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813914:	e0bffb17 	ldw	r2,-20(fp)
  813918:	10800017 	ldw	r2,0(r2)
  81391c:	11000304 	addi	r4,r2,12
  813920:	e0bffb17 	ldw	r2,-20(fp)
  813924:	10800117 	ldw	r2,4(r2)
  813928:	1007883a 	mov	r3,r2
  81392c:	2005883a 	mov	r2,r4
  813930:	10c00035 	stwio	r3,0(r2)
  813934:	e0bffa17 	ldw	r2,-24(fp)
  813938:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81393c:	e0bff417 	ldw	r2,-48(fp)
  813940:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813944:	e0bff617 	ldw	r2,-40(fp)
  813948:	1004c03a 	cmpne	r2,r2,zero
  81394c:	1000031e 	bne	r2,zero,81395c <altera_avalon_uart_read+0x194>
  813950:	e0bffd17 	ldw	r2,-12(fp)
  813954:	1004c03a 	cmpne	r2,r2,zero
  813958:	103fc81e 	bne	r2,zero,81387c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81395c:	0005303a 	rdctl	r2,status
  813960:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813964:	e0fff317 	ldw	r3,-52(fp)
  813968:	00bfff84 	movi	r2,-2
  81396c:	1884703a 	and	r2,r3,r2
  813970:	1001703a 	wrctl	status,r2
  
  return context;
  813974:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813978:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81397c:	e0bffb17 	ldw	r2,-20(fp)
  813980:	10800117 	ldw	r2,4(r2)
  813984:	10c02014 	ori	r3,r2,128
  813988:	e0bffb17 	ldw	r2,-20(fp)
  81398c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813990:	e0bffb17 	ldw	r2,-20(fp)
  813994:	10800017 	ldw	r2,0(r2)
  813998:	11000304 	addi	r4,r2,12
  81399c:	e0bffb17 	ldw	r2,-20(fp)
  8139a0:	10800117 	ldw	r2,4(r2)
  8139a4:	1007883a 	mov	r3,r2
  8139a8:	2005883a 	mov	r2,r4
  8139ac:	10c00035 	stwio	r3,0(r2)
  8139b0:	e0bffa17 	ldw	r2,-24(fp)
  8139b4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139b8:	e0bff217 	ldw	r2,-56(fp)
  8139bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8139c0:	e0bff703 	ldbu	r2,-36(fp)
  8139c4:	1005003a 	cmpeq	r2,r2,zero
  8139c8:	1000031e 	bne	r2,zero,8139d8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  8139cc:	00bffd04 	movi	r2,-12
  8139d0:	e0bfff15 	stw	r2,-4(fp)
  8139d4:	00000206 	br	8139e0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  8139d8:	e0bff617 	ldw	r2,-40(fp)
  8139dc:	e0bfff15 	stw	r2,-4(fp)
  8139e0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8139e4:	e037883a 	mov	sp,fp
  8139e8:	dfc00117 	ldw	ra,4(sp)
  8139ec:	df000017 	ldw	fp,0(sp)
  8139f0:	dec00204 	addi	sp,sp,8
  8139f4:	f800283a 	ret

008139f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8139f8:	defffd04 	addi	sp,sp,-12
  8139fc:	dfc00215 	stw	ra,8(sp)
  813a00:	df000115 	stw	fp,4(sp)
  813a04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813a08:	00802074 	movhi	r2,129
  813a0c:	109bdc04 	addi	r2,r2,28528
  813a10:	10800017 	ldw	r2,0(r2)
  813a14:	1005003a 	cmpeq	r2,r2,zero
  813a18:	1000061e 	bne	r2,zero,813a34 <alt_get_errno+0x3c>
  813a1c:	00802074 	movhi	r2,129
  813a20:	109bdc04 	addi	r2,r2,28528
  813a24:	10800017 	ldw	r2,0(r2)
  813a28:	103ee83a 	callr	r2
  813a2c:	e0bfff15 	stw	r2,-4(fp)
  813a30:	00000306 	br	813a40 <alt_get_errno+0x48>
  813a34:	008020b4 	movhi	r2,130
  813a38:	10a32604 	addi	r2,r2,-29544
  813a3c:	e0bfff15 	stw	r2,-4(fp)
  813a40:	e0bfff17 	ldw	r2,-4(fp)
}
  813a44:	e037883a 	mov	sp,fp
  813a48:	dfc00117 	ldw	ra,4(sp)
  813a4c:	df000017 	ldw	fp,0(sp)
  813a50:	dec00204 	addi	sp,sp,8
  813a54:	f800283a 	ret

00813a58 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813a58:	defff204 	addi	sp,sp,-56
  813a5c:	dfc00d15 	stw	ra,52(sp)
  813a60:	df000c15 	stw	fp,48(sp)
  813a64:	df000c04 	addi	fp,sp,48
  813a68:	e13ffc15 	stw	r4,-16(fp)
  813a6c:	e17ffd15 	stw	r5,-12(fp)
  813a70:	e1bffe15 	stw	r6,-8(fp)
  813a74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813a78:	e0bffe17 	ldw	r2,-8(fp)
  813a7c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813a80:	e0bfff17 	ldw	r2,-4(fp)
  813a84:	1090000c 	andi	r2,r2,16384
  813a88:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813a8c:	00004006 	br	813b90 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813a90:	e0bffc17 	ldw	r2,-16(fp)
  813a94:	10800517 	ldw	r2,20(r2)
  813a98:	10800044 	addi	r2,r2,1
  813a9c:	10800fcc 	andi	r2,r2,63
  813aa0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813aa4:	e0bffc17 	ldw	r2,-16(fp)
  813aa8:	10c00417 	ldw	r3,16(r2)
  813aac:	e0bff917 	ldw	r2,-28(fp)
  813ab0:	1880251e 	bne	r3,r2,813b48 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813ab4:	e0bffa17 	ldw	r2,-24(fp)
  813ab8:	1005003a 	cmpeq	r2,r2,zero
  813abc:	1000051e 	bne	r2,zero,813ad4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813ac0:	0813c200 	call	813c20 <alt_get_errno>
  813ac4:	1007883a 	mov	r3,r2
  813ac8:	008002c4 	movi	r2,11
  813acc:	18800015 	stw	r2,0(r3)
        break;
  813ad0:	00003206 	br	813b9c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ad4:	0005303a 	rdctl	r2,status
  813ad8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813adc:	e0fff717 	ldw	r3,-36(fp)
  813ae0:	00bfff84 	movi	r2,-2
  813ae4:	1884703a 	and	r2,r3,r2
  813ae8:	1001703a 	wrctl	status,r2
  
  return context;
  813aec:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813af0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813af4:	e0bffc17 	ldw	r2,-16(fp)
  813af8:	10800117 	ldw	r2,4(r2)
  813afc:	10c11014 	ori	r3,r2,1088
  813b00:	e0bffc17 	ldw	r2,-16(fp)
  813b04:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b08:	e0bffc17 	ldw	r2,-16(fp)
  813b0c:	10800017 	ldw	r2,0(r2)
  813b10:	11000304 	addi	r4,r2,12
  813b14:	e0bffc17 	ldw	r2,-16(fp)
  813b18:	10800117 	ldw	r2,4(r2)
  813b1c:	1007883a 	mov	r3,r2
  813b20:	2005883a 	mov	r2,r4
  813b24:	10c00035 	stwio	r3,0(r2)
  813b28:	e0bffb17 	ldw	r2,-20(fp)
  813b2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b30:	e0bff617 	ldw	r2,-40(fp)
  813b34:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813b38:	e0bffc17 	ldw	r2,-16(fp)
  813b3c:	10c00417 	ldw	r3,16(r2)
  813b40:	e0bff917 	ldw	r2,-28(fp)
  813b44:	18bffc26 	beq	r3,r2,813b38 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813b48:	e0bff817 	ldw	r2,-32(fp)
  813b4c:	10bfffc4 	addi	r2,r2,-1
  813b50:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813b54:	e0bffc17 	ldw	r2,-16(fp)
  813b58:	10c00517 	ldw	r3,20(r2)
  813b5c:	e0bffd17 	ldw	r2,-12(fp)
  813b60:	10800003 	ldbu	r2,0(r2)
  813b64:	1009883a 	mov	r4,r2
  813b68:	e0bffc17 	ldw	r2,-16(fp)
  813b6c:	1885883a 	add	r2,r3,r2
  813b70:	10801704 	addi	r2,r2,92
  813b74:	11000005 	stb	r4,0(r2)
  813b78:	e0bffd17 	ldw	r2,-12(fp)
  813b7c:	10800044 	addi	r2,r2,1
  813b80:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813b84:	e0fffc17 	ldw	r3,-16(fp)
  813b88:	e0bff917 	ldw	r2,-28(fp)
  813b8c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813b90:	e0bff817 	ldw	r2,-32(fp)
  813b94:	1004c03a 	cmpne	r2,r2,zero
  813b98:	103fbd1e 	bne	r2,zero,813a90 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b9c:	0005303a 	rdctl	r2,status
  813ba0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ba4:	e0fff517 	ldw	r3,-44(fp)
  813ba8:	00bfff84 	movi	r2,-2
  813bac:	1884703a 	and	r2,r3,r2
  813bb0:	1001703a 	wrctl	status,r2
  
  return context;
  813bb4:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813bb8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813bbc:	e0bffc17 	ldw	r2,-16(fp)
  813bc0:	10800117 	ldw	r2,4(r2)
  813bc4:	10c11014 	ori	r3,r2,1088
  813bc8:	e0bffc17 	ldw	r2,-16(fp)
  813bcc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813bd0:	e0bffc17 	ldw	r2,-16(fp)
  813bd4:	10800017 	ldw	r2,0(r2)
  813bd8:	11000304 	addi	r4,r2,12
  813bdc:	e0bffc17 	ldw	r2,-16(fp)
  813be0:	10800117 	ldw	r2,4(r2)
  813be4:	1007883a 	mov	r3,r2
  813be8:	2005883a 	mov	r2,r4
  813bec:	10c00035 	stwio	r3,0(r2)
  813bf0:	e0bffb17 	ldw	r2,-20(fp)
  813bf4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813bf8:	e0bff417 	ldw	r2,-48(fp)
  813bfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813c00:	e0fffe17 	ldw	r3,-8(fp)
  813c04:	e0bff817 	ldw	r2,-32(fp)
  813c08:	1885c83a 	sub	r2,r3,r2
}
  813c0c:	e037883a 	mov	sp,fp
  813c10:	dfc00117 	ldw	ra,4(sp)
  813c14:	df000017 	ldw	fp,0(sp)
  813c18:	dec00204 	addi	sp,sp,8
  813c1c:	f800283a 	ret

00813c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813c20:	defffd04 	addi	sp,sp,-12
  813c24:	dfc00215 	stw	ra,8(sp)
  813c28:	df000115 	stw	fp,4(sp)
  813c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813c30:	00802074 	movhi	r2,129
  813c34:	109bdc04 	addi	r2,r2,28528
  813c38:	10800017 	ldw	r2,0(r2)
  813c3c:	1005003a 	cmpeq	r2,r2,zero
  813c40:	1000061e 	bne	r2,zero,813c5c <alt_get_errno+0x3c>
  813c44:	00802074 	movhi	r2,129
  813c48:	109bdc04 	addi	r2,r2,28528
  813c4c:	10800017 	ldw	r2,0(r2)
  813c50:	103ee83a 	callr	r2
  813c54:	e0bfff15 	stw	r2,-4(fp)
  813c58:	00000306 	br	813c68 <alt_get_errno+0x48>
  813c5c:	008020b4 	movhi	r2,130
  813c60:	10a32604 	addi	r2,r2,-29544
  813c64:	e0bfff15 	stw	r2,-4(fp)
  813c68:	e0bfff17 	ldw	r2,-4(fp)
}
  813c6c:	e037883a 	mov	sp,fp
  813c70:	dfc00117 	ldw	ra,4(sp)
  813c74:	df000017 	ldw	fp,0(sp)
  813c78:	dec00204 	addi	sp,sp,8
  813c7c:	f800283a 	ret

00813c80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813c80:	defffe04 	addi	sp,sp,-8
  813c84:	df000115 	stw	fp,4(sp)
  813c88:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813c8c:	e03fff15 	stw	zero,-4(fp)
  813c90:	00000506 	br	813ca8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813c94:	e0bfff17 	ldw	r2,-4(fp)
  813c98:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813c9c:	e0bfff17 	ldw	r2,-4(fp)
  813ca0:	10800804 	addi	r2,r2,32
  813ca4:	e0bfff15 	stw	r2,-4(fp)
  813ca8:	e0bfff17 	ldw	r2,-4(fp)
  813cac:	10820030 	cmpltui	r2,r2,2048
  813cb0:	103ff81e 	bne	r2,zero,813c94 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813cb4:	e037883a 	mov	sp,fp
  813cb8:	df000017 	ldw	fp,0(sp)
  813cbc:	dec00104 	addi	sp,sp,4
  813cc0:	f800283a 	ret

00813cc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813cc4:	defff904 	addi	sp,sp,-28
  813cc8:	dfc00615 	stw	ra,24(sp)
  813ccc:	df000515 	stw	fp,20(sp)
  813cd0:	df000504 	addi	fp,sp,20
  813cd4:	e13ffd15 	stw	r4,-12(fp)
  813cd8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813cdc:	e0bffd17 	ldw	r2,-12(fp)
  813ce0:	1005003a 	cmpeq	r2,r2,zero
  813ce4:	1000041e 	bne	r2,zero,813cf8 <alt_dev_llist_insert+0x34>
  813ce8:	e0bffd17 	ldw	r2,-12(fp)
  813cec:	10800217 	ldw	r2,8(r2)
  813cf0:	1004c03a 	cmpne	r2,r2,zero
  813cf4:	1000071e 	bne	r2,zero,813d14 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813cf8:	0813d780 	call	813d78 <alt_get_errno>
  813cfc:	1007883a 	mov	r3,r2
  813d00:	00800584 	movi	r2,22
  813d04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813d08:	00bffa84 	movi	r2,-22
  813d0c:	e0bfff15 	stw	r2,-4(fp)
  813d10:	00001306 	br	813d60 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813d14:	e0fffd17 	ldw	r3,-12(fp)
  813d18:	e0bffe17 	ldw	r2,-8(fp)
  813d1c:	e0bffb15 	stw	r2,-20(fp)
  813d20:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813d24:	e0fffc17 	ldw	r3,-16(fp)
  813d28:	e0bffb17 	ldw	r2,-20(fp)
  813d2c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813d30:	e0bffb17 	ldw	r2,-20(fp)
  813d34:	10c00017 	ldw	r3,0(r2)
  813d38:	e0bffc17 	ldw	r2,-16(fp)
  813d3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813d40:	e0bffb17 	ldw	r2,-20(fp)
  813d44:	10c00017 	ldw	r3,0(r2)
  813d48:	e0bffc17 	ldw	r2,-16(fp)
  813d4c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813d50:	e0fffb17 	ldw	r3,-20(fp)
  813d54:	e0bffc17 	ldw	r2,-16(fp)
  813d58:	18800015 	stw	r2,0(r3)

  return 0;  
  813d5c:	e03fff15 	stw	zero,-4(fp)
  813d60:	e0bfff17 	ldw	r2,-4(fp)
}
  813d64:	e037883a 	mov	sp,fp
  813d68:	dfc00117 	ldw	ra,4(sp)
  813d6c:	df000017 	ldw	fp,0(sp)
  813d70:	dec00204 	addi	sp,sp,8
  813d74:	f800283a 	ret

00813d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813d78:	defffd04 	addi	sp,sp,-12
  813d7c:	dfc00215 	stw	ra,8(sp)
  813d80:	df000115 	stw	fp,4(sp)
  813d84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813d88:	00802074 	movhi	r2,129
  813d8c:	109bdc04 	addi	r2,r2,28528
  813d90:	10800017 	ldw	r2,0(r2)
  813d94:	1005003a 	cmpeq	r2,r2,zero
  813d98:	1000061e 	bne	r2,zero,813db4 <alt_get_errno+0x3c>
  813d9c:	00802074 	movhi	r2,129
  813da0:	109bdc04 	addi	r2,r2,28528
  813da4:	10800017 	ldw	r2,0(r2)
  813da8:	103ee83a 	callr	r2
  813dac:	e0bfff15 	stw	r2,-4(fp)
  813db0:	00000306 	br	813dc0 <alt_get_errno+0x48>
  813db4:	008020b4 	movhi	r2,130
  813db8:	10a32604 	addi	r2,r2,-29544
  813dbc:	e0bfff15 	stw	r2,-4(fp)
  813dc0:	e0bfff17 	ldw	r2,-4(fp)
}
  813dc4:	e037883a 	mov	sp,fp
  813dc8:	dfc00117 	ldw	ra,4(sp)
  813dcc:	df000017 	ldw	fp,0(sp)
  813dd0:	dec00204 	addi	sp,sp,8
  813dd4:	f800283a 	ret

00813dd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813dd8:	defffd04 	addi	sp,sp,-12
  813ddc:	dfc00215 	stw	ra,8(sp)
  813de0:	df000115 	stw	fp,4(sp)
  813de4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813de8:	00bfff04 	movi	r2,-4
  813dec:	00c02074 	movhi	r3,129
  813df0:	18d2df04 	addi	r3,r3,19324
  813df4:	1885883a 	add	r2,r3,r2
  813df8:	e0bfff15 	stw	r2,-4(fp)
  813dfc:	00000606 	br	813e18 <_do_ctors+0x40>
        (*ctor) (); 
  813e00:	e0bfff17 	ldw	r2,-4(fp)
  813e04:	10800017 	ldw	r2,0(r2)
  813e08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813e0c:	e0bfff17 	ldw	r2,-4(fp)
  813e10:	10bfff04 	addi	r2,r2,-4
  813e14:	e0bfff15 	stw	r2,-4(fp)
  813e18:	e0ffff17 	ldw	r3,-4(fp)
  813e1c:	00802074 	movhi	r2,129
  813e20:	1092de04 	addi	r2,r2,19320
  813e24:	18bff62e 	bgeu	r3,r2,813e00 <_do_ctors+0x28>
        (*ctor) (); 
}
  813e28:	e037883a 	mov	sp,fp
  813e2c:	dfc00117 	ldw	ra,4(sp)
  813e30:	df000017 	ldw	fp,0(sp)
  813e34:	dec00204 	addi	sp,sp,8
  813e38:	f800283a 	ret

00813e3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813e3c:	defffd04 	addi	sp,sp,-12
  813e40:	dfc00215 	stw	ra,8(sp)
  813e44:	df000115 	stw	fp,4(sp)
  813e48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813e4c:	00bfff04 	movi	r2,-4
  813e50:	00c02074 	movhi	r3,129
  813e54:	18d2df04 	addi	r3,r3,19324
  813e58:	1885883a 	add	r2,r3,r2
  813e5c:	e0bfff15 	stw	r2,-4(fp)
  813e60:	00000606 	br	813e7c <_do_dtors+0x40>
        (*dtor) (); 
  813e64:	e0bfff17 	ldw	r2,-4(fp)
  813e68:	10800017 	ldw	r2,0(r2)
  813e6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813e70:	e0bfff17 	ldw	r2,-4(fp)
  813e74:	10bfff04 	addi	r2,r2,-4
  813e78:	e0bfff15 	stw	r2,-4(fp)
  813e7c:	e0ffff17 	ldw	r3,-4(fp)
  813e80:	00802074 	movhi	r2,129
  813e84:	1092df04 	addi	r2,r2,19324
  813e88:	18bff62e 	bgeu	r3,r2,813e64 <_do_dtors+0x28>
        (*dtor) (); 
}
  813e8c:	e037883a 	mov	sp,fp
  813e90:	dfc00117 	ldw	ra,4(sp)
  813e94:	df000017 	ldw	fp,0(sp)
  813e98:	dec00204 	addi	sp,sp,8
  813e9c:	f800283a 	ret

00813ea0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813ea0:	defff904 	addi	sp,sp,-28
  813ea4:	dfc00615 	stw	ra,24(sp)
  813ea8:	df000515 	stw	fp,20(sp)
  813eac:	df000504 	addi	fp,sp,20
  813eb0:	e13ffd15 	stw	r4,-12(fp)
  813eb4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813eb8:	e0bffe17 	ldw	r2,-8(fp)
  813ebc:	10800017 	ldw	r2,0(r2)
  813ec0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813ec4:	e13ffd17 	ldw	r4,-12(fp)
  813ec8:	08041340 	call	804134 <strlen>
  813ecc:	10800044 	addi	r2,r2,1
  813ed0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813ed4:	00000d06 	br	813f0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813ed8:	e0bffc17 	ldw	r2,-16(fp)
  813edc:	11000217 	ldw	r4,8(r2)
  813ee0:	e1bffb17 	ldw	r6,-20(fp)
  813ee4:	e17ffd17 	ldw	r5,-12(fp)
  813ee8:	08147bc0 	call	8147bc <memcmp>
  813eec:	1004c03a 	cmpne	r2,r2,zero
  813ef0:	1000031e 	bne	r2,zero,813f00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813ef4:	e0bffc17 	ldw	r2,-16(fp)
  813ef8:	e0bfff15 	stw	r2,-4(fp)
  813efc:	00000706 	br	813f1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813f00:	e0bffc17 	ldw	r2,-16(fp)
  813f04:	10800017 	ldw	r2,0(r2)
  813f08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813f0c:	e0fffe17 	ldw	r3,-8(fp)
  813f10:	e0bffc17 	ldw	r2,-16(fp)
  813f14:	10fff01e 	bne	r2,r3,813ed8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813f18:	e03fff15 	stw	zero,-4(fp)
  813f1c:	e0bfff17 	ldw	r2,-4(fp)
}
  813f20:	e037883a 	mov	sp,fp
  813f24:	dfc00117 	ldw	ra,4(sp)
  813f28:	df000017 	ldw	fp,0(sp)
  813f2c:	dec00204 	addi	sp,sp,8
  813f30:	f800283a 	ret

00813f34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813f34:	defffa04 	addi	sp,sp,-24
  813f38:	dfc00515 	stw	ra,20(sp)
  813f3c:	df000415 	stw	fp,16(sp)
  813f40:	df000404 	addi	fp,sp,16
  813f44:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813f48:	00802074 	movhi	r2,129
  813f4c:	109bd704 	addi	r2,r2,28508
  813f50:	10800017 	ldw	r2,0(r2)
  813f54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813f58:	00003306 	br	814028 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813f5c:	e0bffd17 	ldw	r2,-12(fp)
  813f60:	11000217 	ldw	r4,8(r2)
  813f64:	08041340 	call	804134 <strlen>
  813f68:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813f6c:	e0bffd17 	ldw	r2,-12(fp)
  813f70:	10c00217 	ldw	r3,8(r2)
  813f74:	e0bffc17 	ldw	r2,-16(fp)
  813f78:	1885883a 	add	r2,r3,r2
  813f7c:	10bfffc4 	addi	r2,r2,-1
  813f80:	10800003 	ldbu	r2,0(r2)
  813f84:	10803fcc 	andi	r2,r2,255
  813f88:	1080201c 	xori	r2,r2,128
  813f8c:	10bfe004 	addi	r2,r2,-128
  813f90:	10800bd8 	cmpnei	r2,r2,47
  813f94:	1000031e 	bne	r2,zero,813fa4 <alt_find_file+0x70>
    {
      len -= 1;
  813f98:	e0bffc17 	ldw	r2,-16(fp)
  813f9c:	10bfffc4 	addi	r2,r2,-1
  813fa0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813fa4:	e0bffc17 	ldw	r2,-16(fp)
  813fa8:	1007883a 	mov	r3,r2
  813fac:	e0bffe17 	ldw	r2,-8(fp)
  813fb0:	1885883a 	add	r2,r3,r2
  813fb4:	10800003 	ldbu	r2,0(r2)
  813fb8:	10803fcc 	andi	r2,r2,255
  813fbc:	1080201c 	xori	r2,r2,128
  813fc0:	10bfe004 	addi	r2,r2,-128
  813fc4:	10800be0 	cmpeqi	r2,r2,47
  813fc8:	10000a1e 	bne	r2,zero,813ff4 <alt_find_file+0xc0>
  813fcc:	e0bffc17 	ldw	r2,-16(fp)
  813fd0:	1007883a 	mov	r3,r2
  813fd4:	e0bffe17 	ldw	r2,-8(fp)
  813fd8:	1885883a 	add	r2,r3,r2
  813fdc:	10800003 	ldbu	r2,0(r2)
  813fe0:	10803fcc 	andi	r2,r2,255
  813fe4:	1080201c 	xori	r2,r2,128
  813fe8:	10bfe004 	addi	r2,r2,-128
  813fec:	1004c03a 	cmpne	r2,r2,zero
  813ff0:	10000a1e 	bne	r2,zero,81401c <alt_find_file+0xe8>
  813ff4:	e0bffd17 	ldw	r2,-12(fp)
  813ff8:	11000217 	ldw	r4,8(r2)
  813ffc:	e1bffc17 	ldw	r6,-16(fp)
  814000:	e17ffe17 	ldw	r5,-8(fp)
  814004:	08147bc0 	call	8147bc <memcmp>
  814008:	1004c03a 	cmpne	r2,r2,zero
  81400c:	1000031e 	bne	r2,zero,81401c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814010:	e0bffd17 	ldw	r2,-12(fp)
  814014:	e0bfff15 	stw	r2,-4(fp)
  814018:	00000806 	br	81403c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81401c:	e0bffd17 	ldw	r2,-12(fp)
  814020:	10800017 	ldw	r2,0(r2)
  814024:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814028:	00c02074 	movhi	r3,129
  81402c:	18dbd704 	addi	r3,r3,28508
  814030:	e0bffd17 	ldw	r2,-12(fp)
  814034:	10ffc91e 	bne	r2,r3,813f5c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814038:	e03fff15 	stw	zero,-4(fp)
  81403c:	e0bfff17 	ldw	r2,-4(fp)
}
  814040:	e037883a 	mov	sp,fp
  814044:	dfc00117 	ldw	ra,4(sp)
  814048:	df000017 	ldw	fp,0(sp)
  81404c:	dec00204 	addi	sp,sp,8
  814050:	f800283a 	ret

00814054 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814054:	defffc04 	addi	sp,sp,-16
  814058:	df000315 	stw	fp,12(sp)
  81405c:	df000304 	addi	fp,sp,12
  814060:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814064:	00bffa04 	movi	r2,-24
  814068:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81406c:	e03ffe15 	stw	zero,-8(fp)
  814070:	00001e06 	br	8140ec <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  814074:	e0bffe17 	ldw	r2,-8(fp)
  814078:	00c02074 	movhi	r3,129
  81407c:	18d6db04 	addi	r3,r3,23404
  814080:	10800324 	muli	r2,r2,12
  814084:	10c5883a 	add	r2,r2,r3
  814088:	10800017 	ldw	r2,0(r2)
  81408c:	1004c03a 	cmpne	r2,r2,zero
  814090:	1000131e 	bne	r2,zero,8140e0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  814094:	e0bffe17 	ldw	r2,-8(fp)
  814098:	00c02074 	movhi	r3,129
  81409c:	18d6db04 	addi	r3,r3,23404
  8140a0:	10800324 	muli	r2,r2,12
  8140a4:	10c7883a 	add	r3,r2,r3
  8140a8:	e0bfff17 	ldw	r2,-4(fp)
  8140ac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8140b0:	00802074 	movhi	r2,129
  8140b4:	109bdb04 	addi	r2,r2,28524
  8140b8:	10c00017 	ldw	r3,0(r2)
  8140bc:	e0bffe17 	ldw	r2,-8(fp)
  8140c0:	1880040e 	bge	r3,r2,8140d4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8140c4:	00c02074 	movhi	r3,129
  8140c8:	18dbdb04 	addi	r3,r3,28524
  8140cc:	e0bffe17 	ldw	r2,-8(fp)
  8140d0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8140d4:	e0bffe17 	ldw	r2,-8(fp)
  8140d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8140dc:	00000606 	br	8140f8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8140e0:	e0bffe17 	ldw	r2,-8(fp)
  8140e4:	10800044 	addi	r2,r2,1
  8140e8:	e0bffe15 	stw	r2,-8(fp)
  8140ec:	e0bffe17 	ldw	r2,-8(fp)
  8140f0:	10800810 	cmplti	r2,r2,32
  8140f4:	103fdf1e 	bne	r2,zero,814074 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8140f8:	e0bffd17 	ldw	r2,-12(fp)
}
  8140fc:	e037883a 	mov	sp,fp
  814100:	df000017 	ldw	fp,0(sp)
  814104:	dec00104 	addi	sp,sp,4
  814108:	f800283a 	ret

0081410c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81410c:	defffe04 	addi	sp,sp,-8
  814110:	dfc00115 	stw	ra,4(sp)
  814114:	df000015 	stw	fp,0(sp)
  814118:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81411c:	0009883a 	mov	r4,zero
  814120:	01440004 	movi	r5,4096
  814124:	08146e00 	call	8146e0 <alt_icache_flush>
#endif
}
  814128:	e037883a 	mov	sp,fp
  81412c:	dfc00117 	ldw	ra,4(sp)
  814130:	df000017 	ldw	fp,0(sp)
  814134:	dec00204 	addi	sp,sp,8
  814138:	f800283a 	ret

0081413c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81413c:	defff904 	addi	sp,sp,-28
  814140:	dfc00615 	stw	ra,24(sp)
  814144:	df000515 	stw	fp,20(sp)
  814148:	df000504 	addi	fp,sp,20
  81414c:	e13ffc15 	stw	r4,-16(fp)
  814150:	e17ffd15 	stw	r5,-12(fp)
  814154:	e1bffe15 	stw	r6,-8(fp)
  814158:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81415c:	e0800217 	ldw	r2,8(fp)
  814160:	d8800015 	stw	r2,0(sp)
  814164:	e13ffc17 	ldw	r4,-16(fp)
  814168:	e17ffd17 	ldw	r5,-12(fp)
  81416c:	e1bffe17 	ldw	r6,-8(fp)
  814170:	e1ffff17 	ldw	r7,-4(fp)
  814174:	08143100 	call	814310 <alt_iic_isr_register>
}  
  814178:	e037883a 	mov	sp,fp
  81417c:	dfc00117 	ldw	ra,4(sp)
  814180:	df000017 	ldw	fp,0(sp)
  814184:	dec00204 	addi	sp,sp,8
  814188:	f800283a 	ret

0081418c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81418c:	defff904 	addi	sp,sp,-28
  814190:	df000615 	stw	fp,24(sp)
  814194:	df000604 	addi	fp,sp,24
  814198:	e13ffe15 	stw	r4,-8(fp)
  81419c:	e17fff15 	stw	r5,-4(fp)
  8141a0:	e0bfff17 	ldw	r2,-4(fp)
  8141a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8141a8:	0005303a 	rdctl	r2,status
  8141ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8141b0:	e0fffb17 	ldw	r3,-20(fp)
  8141b4:	00bfff84 	movi	r2,-2
  8141b8:	1884703a 	and	r2,r3,r2
  8141bc:	1001703a 	wrctl	status,r2
  
  return context;
  8141c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8141c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8141c8:	e0fffc17 	ldw	r3,-16(fp)
  8141cc:	00800044 	movi	r2,1
  8141d0:	10c4983a 	sll	r2,r2,r3
  8141d4:	1007883a 	mov	r3,r2
  8141d8:	008020b4 	movhi	r2,130
  8141dc:	10a32d04 	addi	r2,r2,-29516
  8141e0:	10800017 	ldw	r2,0(r2)
  8141e4:	1886b03a 	or	r3,r3,r2
  8141e8:	008020b4 	movhi	r2,130
  8141ec:	10a32d04 	addi	r2,r2,-29516
  8141f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8141f4:	008020b4 	movhi	r2,130
  8141f8:	10a32d04 	addi	r2,r2,-29516
  8141fc:	10800017 	ldw	r2,0(r2)
  814200:	100170fa 	wrctl	ienable,r2
  814204:	e0bffd17 	ldw	r2,-12(fp)
  814208:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81420c:	e0bffa17 	ldw	r2,-24(fp)
  814210:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814214:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814218:	e037883a 	mov	sp,fp
  81421c:	df000017 	ldw	fp,0(sp)
  814220:	dec00104 	addi	sp,sp,4
  814224:	f800283a 	ret

00814228 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814228:	defff904 	addi	sp,sp,-28
  81422c:	df000615 	stw	fp,24(sp)
  814230:	df000604 	addi	fp,sp,24
  814234:	e13ffe15 	stw	r4,-8(fp)
  814238:	e17fff15 	stw	r5,-4(fp)
  81423c:	e0bfff17 	ldw	r2,-4(fp)
  814240:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814244:	0005303a 	rdctl	r2,status
  814248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81424c:	e0fffb17 	ldw	r3,-20(fp)
  814250:	00bfff84 	movi	r2,-2
  814254:	1884703a 	and	r2,r3,r2
  814258:	1001703a 	wrctl	status,r2
  
  return context;
  81425c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814260:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814264:	e0fffc17 	ldw	r3,-16(fp)
  814268:	00800044 	movi	r2,1
  81426c:	10c4983a 	sll	r2,r2,r3
  814270:	0084303a 	nor	r2,zero,r2
  814274:	1007883a 	mov	r3,r2
  814278:	008020b4 	movhi	r2,130
  81427c:	10a32d04 	addi	r2,r2,-29516
  814280:	10800017 	ldw	r2,0(r2)
  814284:	1886703a 	and	r3,r3,r2
  814288:	008020b4 	movhi	r2,130
  81428c:	10a32d04 	addi	r2,r2,-29516
  814290:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814294:	008020b4 	movhi	r2,130
  814298:	10a32d04 	addi	r2,r2,-29516
  81429c:	10800017 	ldw	r2,0(r2)
  8142a0:	100170fa 	wrctl	ienable,r2
  8142a4:	e0bffd17 	ldw	r2,-12(fp)
  8142a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8142ac:	e0bffa17 	ldw	r2,-24(fp)
  8142b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8142b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8142b8:	e037883a 	mov	sp,fp
  8142bc:	df000017 	ldw	fp,0(sp)
  8142c0:	dec00104 	addi	sp,sp,4
  8142c4:	f800283a 	ret

008142c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8142c8:	defffc04 	addi	sp,sp,-16
  8142cc:	df000315 	stw	fp,12(sp)
  8142d0:	df000304 	addi	fp,sp,12
  8142d4:	e13ffe15 	stw	r4,-8(fp)
  8142d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8142dc:	000530fa 	rdctl	r2,ienable
  8142e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8142e4:	e0ffff17 	ldw	r3,-4(fp)
  8142e8:	00800044 	movi	r2,1
  8142ec:	10c4983a 	sll	r2,r2,r3
  8142f0:	1007883a 	mov	r3,r2
  8142f4:	e0bffd17 	ldw	r2,-12(fp)
  8142f8:	1884703a 	and	r2,r3,r2
  8142fc:	1004c03a 	cmpne	r2,r2,zero
}
  814300:	e037883a 	mov	sp,fp
  814304:	df000017 	ldw	fp,0(sp)
  814308:	dec00104 	addi	sp,sp,4
  81430c:	f800283a 	ret

00814310 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814310:	defff404 	addi	sp,sp,-48
  814314:	dfc00b15 	stw	ra,44(sp)
  814318:	df000a15 	stw	fp,40(sp)
  81431c:	df000a04 	addi	fp,sp,40
  814320:	e13ffb15 	stw	r4,-20(fp)
  814324:	e17ffc15 	stw	r5,-16(fp)
  814328:	e1bffd15 	stw	r6,-12(fp)
  81432c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814330:	00bffa84 	movi	r2,-22
  814334:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814338:	e0bffc17 	ldw	r2,-16(fp)
  81433c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814340:	e0bff917 	ldw	r2,-28(fp)
  814344:	10800808 	cmpgei	r2,r2,32
  814348:	1000291e 	bne	r2,zero,8143f0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81434c:	0005303a 	rdctl	r2,status
  814350:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814354:	e0fff717 	ldw	r3,-36(fp)
  814358:	00bfff84 	movi	r2,-2
  81435c:	1884703a 	and	r2,r3,r2
  814360:	1001703a 	wrctl	status,r2
  
  return context;
  814364:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814368:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81436c:	e0bff917 	ldw	r2,-28(fp)
  814370:	00c020b4 	movhi	r3,130
  814374:	18e38904 	addi	r3,r3,-29148
  814378:	100490fa 	slli	r2,r2,3
  81437c:	10c7883a 	add	r3,r2,r3
  814380:	e0bffd17 	ldw	r2,-12(fp)
  814384:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814388:	e0bff917 	ldw	r2,-28(fp)
  81438c:	00c020b4 	movhi	r3,130
  814390:	18e38904 	addi	r3,r3,-29148
  814394:	100490fa 	slli	r2,r2,3
  814398:	10c5883a 	add	r2,r2,r3
  81439c:	10c00104 	addi	r3,r2,4
  8143a0:	e0bffe17 	ldw	r2,-8(fp)
  8143a4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8143a8:	e0bffd17 	ldw	r2,-12(fp)
  8143ac:	1005003a 	cmpeq	r2,r2,zero
  8143b0:	1000051e 	bne	r2,zero,8143c8 <alt_iic_isr_register+0xb8>
  8143b4:	e17ff917 	ldw	r5,-28(fp)
  8143b8:	e13ffb17 	ldw	r4,-20(fp)
  8143bc:	081418c0 	call	81418c <alt_ic_irq_enable>
  8143c0:	e0bfff15 	stw	r2,-4(fp)
  8143c4:	00000406 	br	8143d8 <alt_iic_isr_register+0xc8>
  8143c8:	e17ff917 	ldw	r5,-28(fp)
  8143cc:	e13ffb17 	ldw	r4,-20(fp)
  8143d0:	08142280 	call	814228 <alt_ic_irq_disable>
  8143d4:	e0bfff15 	stw	r2,-4(fp)
  8143d8:	e0bfff17 	ldw	r2,-4(fp)
  8143dc:	e0bffa15 	stw	r2,-24(fp)
  8143e0:	e0bff817 	ldw	r2,-32(fp)
  8143e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143e8:	e0bff617 	ldw	r2,-40(fp)
  8143ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8143f0:	e0bffa17 	ldw	r2,-24(fp)
}
  8143f4:	e037883a 	mov	sp,fp
  8143f8:	dfc00117 	ldw	ra,4(sp)
  8143fc:	df000017 	ldw	fp,0(sp)
  814400:	dec00204 	addi	sp,sp,8
  814404:	f800283a 	ret

00814408 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814408:	defff904 	addi	sp,sp,-28
  81440c:	dfc00615 	stw	ra,24(sp)
  814410:	df000515 	stw	fp,20(sp)
  814414:	df000504 	addi	fp,sp,20
  814418:	e13ffc15 	stw	r4,-16(fp)
  81441c:	e17ffd15 	stw	r5,-12(fp)
  814420:	e1bffe15 	stw	r6,-8(fp)
  814424:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814428:	e13ffd17 	ldw	r4,-12(fp)
  81442c:	e17ffe17 	ldw	r5,-8(fp)
  814430:	e1bfff17 	ldw	r6,-4(fp)
  814434:	0810f3c0 	call	810f3c <open>
  814438:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81443c:	e0bffb17 	ldw	r2,-20(fp)
  814440:	1004803a 	cmplt	r2,r2,zero
  814444:	10001c1e 	bne	r2,zero,8144b8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814448:	e0bffb17 	ldw	r2,-20(fp)
  81444c:	00c02074 	movhi	r3,129
  814450:	18d6db04 	addi	r3,r3,23404
  814454:	10800324 	muli	r2,r2,12
  814458:	10c5883a 	add	r2,r2,r3
  81445c:	10c00017 	ldw	r3,0(r2)
  814460:	e0bffc17 	ldw	r2,-16(fp)
  814464:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814468:	e0bffb17 	ldw	r2,-20(fp)
  81446c:	00c02074 	movhi	r3,129
  814470:	18d6db04 	addi	r3,r3,23404
  814474:	10800324 	muli	r2,r2,12
  814478:	10c5883a 	add	r2,r2,r3
  81447c:	10800104 	addi	r2,r2,4
  814480:	10c00017 	ldw	r3,0(r2)
  814484:	e0bffc17 	ldw	r2,-16(fp)
  814488:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81448c:	e0bffb17 	ldw	r2,-20(fp)
  814490:	00c02074 	movhi	r3,129
  814494:	18d6db04 	addi	r3,r3,23404
  814498:	10800324 	muli	r2,r2,12
  81449c:	10c5883a 	add	r2,r2,r3
  8144a0:	10800204 	addi	r2,r2,8
  8144a4:	10c00017 	ldw	r3,0(r2)
  8144a8:	e0bffc17 	ldw	r2,-16(fp)
  8144ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8144b0:	e13ffb17 	ldw	r4,-20(fp)
  8144b4:	08112a40 	call	8112a4 <alt_release_fd>
  }
} 
  8144b8:	e037883a 	mov	sp,fp
  8144bc:	dfc00117 	ldw	ra,4(sp)
  8144c0:	df000017 	ldw	fp,0(sp)
  8144c4:	dec00204 	addi	sp,sp,8
  8144c8:	f800283a 	ret

008144cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8144cc:	defffb04 	addi	sp,sp,-20
  8144d0:	dfc00415 	stw	ra,16(sp)
  8144d4:	df000315 	stw	fp,12(sp)
  8144d8:	df000304 	addi	fp,sp,12
  8144dc:	e13ffd15 	stw	r4,-12(fp)
  8144e0:	e17ffe15 	stw	r5,-8(fp)
  8144e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8144e8:	01002074 	movhi	r4,129
  8144ec:	2116de04 	addi	r4,r4,23416
  8144f0:	e17ffd17 	ldw	r5,-12(fp)
  8144f4:	01800044 	movi	r6,1
  8144f8:	01c07fc4 	movi	r7,511
  8144fc:	08144080 	call	814408 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814500:	01002074 	movhi	r4,129
  814504:	2116db04 	addi	r4,r4,23404
  814508:	e17ffe17 	ldw	r5,-8(fp)
  81450c:	000d883a 	mov	r6,zero
  814510:	01c07fc4 	movi	r7,511
  814514:	08144080 	call	814408 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814518:	01002074 	movhi	r4,129
  81451c:	2116e104 	addi	r4,r4,23428
  814520:	e17fff17 	ldw	r5,-4(fp)
  814524:	01800044 	movi	r6,1
  814528:	01c07fc4 	movi	r7,511
  81452c:	08144080 	call	814408 <alt_open_fd>
}  
  814530:	e037883a 	mov	sp,fp
  814534:	dfc00117 	ldw	ra,4(sp)
  814538:	df000017 	ldw	fp,0(sp)
  81453c:	dec00204 	addi	sp,sp,8
  814540:	f800283a 	ret

00814544 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  814544:	defffd04 	addi	sp,sp,-12
  814548:	dfc00215 	stw	ra,8(sp)
  81454c:	df000115 	stw	fp,4(sp)
  814550:	df000104 	addi	fp,sp,4
  814554:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  814558:	e13fff17 	ldw	r4,-4(fp)
  81455c:	08145940 	call	814594 <alt_busy_sleep>
}
  814560:	e037883a 	mov	sp,fp
  814564:	dfc00117 	ldw	ra,4(sp)
  814568:	df000017 	ldw	fp,0(sp)
  81456c:	dec00204 	addi	sp,sp,8
  814570:	f800283a 	ret

00814574 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814574:	deffff04 	addi	sp,sp,-4
  814578:	df000015 	stw	fp,0(sp)
  81457c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814580:	000170fa 	wrctl	ienable,zero
}
  814584:	e037883a 	mov	sp,fp
  814588:	df000017 	ldw	fp,0(sp)
  81458c:	dec00104 	addi	sp,sp,4
  814590:	f800283a 	ret

00814594 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  814594:	defffa04 	addi	sp,sp,-24
  814598:	dfc00515 	stw	ra,20(sp)
  81459c:	df000415 	stw	fp,16(sp)
  8145a0:	df000404 	addi	fp,sp,16
  8145a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8145a8:	008000c4 	movi	r2,3
  8145ac:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  8145b0:	e0fffc17 	ldw	r3,-16(fp)
  8145b4:	008003f4 	movhi	r2,15
  8145b8:	10909004 	addi	r2,r2,16960
  8145bc:	188b383a 	mul	r5,r3,r2
  8145c0:	0100bef4 	movhi	r4,763
  8145c4:	213c2004 	addi	r4,r4,-3968
  8145c8:	080fbe80 	call	80fbe8 <__udivsi3>
  8145cc:	100b883a 	mov	r5,r2
  8145d0:	01200034 	movhi	r4,32768
  8145d4:	213fffc4 	addi	r4,r4,-1
  8145d8:	080fbe80 	call	80fbe8 <__udivsi3>
  8145dc:	100b883a 	mov	r5,r2
  8145e0:	e13fff17 	ldw	r4,-4(fp)
  8145e4:	080fbe80 	call	80fbe8 <__udivsi3>
  8145e8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8145ec:	e0bffd17 	ldw	r2,-12(fp)
  8145f0:	1005003a 	cmpeq	r2,r2,zero
  8145f4:	1000281e 	bne	r2,zero,814698 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8145f8:	e03ffe15 	stw	zero,-8(fp)
  8145fc:	00001606 	br	814658 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  814600:	00a00034 	movhi	r2,32768
  814604:	10bfffc4 	addi	r2,r2,-1
  814608:	10bfffc4 	addi	r2,r2,-1
  81460c:	103ffe1e 	bne	r2,zero,814608 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814610:	e0fffc17 	ldw	r3,-16(fp)
  814614:	008003f4 	movhi	r2,15
  814618:	10909004 	addi	r2,r2,16960
  81461c:	188b383a 	mul	r5,r3,r2
  814620:	0100bef4 	movhi	r4,763
  814624:	213c2004 	addi	r4,r4,-3968
  814628:	080fbe80 	call	80fbe8 <__udivsi3>
  81462c:	100b883a 	mov	r5,r2
  814630:	01200034 	movhi	r4,32768
  814634:	213fffc4 	addi	r4,r4,-1
  814638:	080fbe80 	call	80fbe8 <__udivsi3>
  81463c:	1007883a 	mov	r3,r2
  814640:	e0bfff17 	ldw	r2,-4(fp)
  814644:	10c5c83a 	sub	r2,r2,r3
  814648:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81464c:	e0bffe17 	ldw	r2,-8(fp)
  814650:	10800044 	addi	r2,r2,1
  814654:	e0bffe15 	stw	r2,-8(fp)
  814658:	e0fffe17 	ldw	r3,-8(fp)
  81465c:	e0bffd17 	ldw	r2,-12(fp)
  814660:	18bfe716 	blt	r3,r2,814600 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814664:	e0fffc17 	ldw	r3,-16(fp)
  814668:	008003f4 	movhi	r2,15
  81466c:	10909004 	addi	r2,r2,16960
  814670:	188b383a 	mul	r5,r3,r2
  814674:	0100bef4 	movhi	r4,763
  814678:	213c2004 	addi	r4,r4,-3968
  81467c:	080fbe80 	call	80fbe8 <__udivsi3>
  814680:	1007883a 	mov	r3,r2
  814684:	e0bfff17 	ldw	r2,-4(fp)
  814688:	1885383a 	mul	r2,r3,r2
  81468c:	10bfffc4 	addi	r2,r2,-1
  814690:	103ffe1e 	bne	r2,zero,81468c <alt_busy_sleep+0xf8>
  814694:	00000c06 	br	8146c8 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814698:	e0fffc17 	ldw	r3,-16(fp)
  81469c:	008003f4 	movhi	r2,15
  8146a0:	10909004 	addi	r2,r2,16960
  8146a4:	188b383a 	mul	r5,r3,r2
  8146a8:	0100bef4 	movhi	r4,763
  8146ac:	213c2004 	addi	r4,r4,-3968
  8146b0:	080fbe80 	call	80fbe8 <__udivsi3>
  8146b4:	1007883a 	mov	r3,r2
  8146b8:	e0bfff17 	ldw	r2,-4(fp)
  8146bc:	1885383a 	mul	r2,r3,r2
  8146c0:	10bfffc4 	addi	r2,r2,-1
  8146c4:	00bffe16 	blt	zero,r2,8146c0 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8146c8:	0005883a 	mov	r2,zero
}
  8146cc:	e037883a 	mov	sp,fp
  8146d0:	dfc00117 	ldw	ra,4(sp)
  8146d4:	df000017 	ldw	fp,0(sp)
  8146d8:	dec00204 	addi	sp,sp,8
  8146dc:	f800283a 	ret

008146e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8146e0:	defffb04 	addi	sp,sp,-20
  8146e4:	df000415 	stw	fp,16(sp)
  8146e8:	df000404 	addi	fp,sp,16
  8146ec:	e13ffe15 	stw	r4,-8(fp)
  8146f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8146f4:	e0bfff17 	ldw	r2,-4(fp)
  8146f8:	10840070 	cmpltui	r2,r2,4097
  8146fc:	1000021e 	bne	r2,zero,814708 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814700:	00840004 	movi	r2,4096
  814704:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814708:	e0fffe17 	ldw	r3,-8(fp)
  81470c:	e0bfff17 	ldw	r2,-4(fp)
  814710:	1885883a 	add	r2,r3,r2
  814714:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814718:	e0bffe17 	ldw	r2,-8(fp)
  81471c:	e0bffd15 	stw	r2,-12(fp)
  814720:	00000506 	br	814738 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814724:	e0bffd17 	ldw	r2,-12(fp)
  814728:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81472c:	e0bffd17 	ldw	r2,-12(fp)
  814730:	10800804 	addi	r2,r2,32
  814734:	e0bffd15 	stw	r2,-12(fp)
  814738:	e0fffd17 	ldw	r3,-12(fp)
  81473c:	e0bffc17 	ldw	r2,-16(fp)
  814740:	18bff836 	bltu	r3,r2,814724 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814744:	e0bffe17 	ldw	r2,-8(fp)
  814748:	108007cc 	andi	r2,r2,31
  81474c:	1005003a 	cmpeq	r2,r2,zero
  814750:	1000021e 	bne	r2,zero,81475c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814754:	e0bffd17 	ldw	r2,-12(fp)
  814758:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81475c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814760:	e037883a 	mov	sp,fp
  814764:	df000017 	ldw	fp,0(sp)
  814768:	dec00104 	addi	sp,sp,4
  81476c:	f800283a 	ret

00814770 <atexit>:
  814770:	200b883a 	mov	r5,r4
  814774:	000d883a 	mov	r6,zero
  814778:	0009883a 	mov	r4,zero
  81477c:	000f883a 	mov	r7,zero
  814780:	08148301 	jmpi	814830 <__register_exitproc>

00814784 <exit>:
  814784:	defffe04 	addi	sp,sp,-8
  814788:	000b883a 	mov	r5,zero
  81478c:	dc000015 	stw	r16,0(sp)
  814790:	dfc00115 	stw	ra,4(sp)
  814794:	2021883a 	mov	r16,r4
  814798:	08149680 	call	814968 <__call_exitprocs>
  81479c:	00802074 	movhi	r2,129
  8147a0:	109bd104 	addi	r2,r2,28484
  8147a4:	11000017 	ldw	r4,0(r2)
  8147a8:	20800f17 	ldw	r2,60(r4)
  8147ac:	10000126 	beq	r2,zero,8147b4 <exit+0x30>
  8147b0:	103ee83a 	callr	r2
  8147b4:	8009883a 	mov	r4,r16
  8147b8:	0814b580 	call	814b58 <_exit>

008147bc <memcmp>:
  8147bc:	00c000c4 	movi	r3,3
  8147c0:	1980032e 	bgeu	r3,r6,8147d0 <memcmp+0x14>
  8147c4:	2144b03a 	or	r2,r4,r5
  8147c8:	10c4703a 	and	r2,r2,r3
  8147cc:	10000f26 	beq	r2,zero,81480c <memcmp+0x50>
  8147d0:	31ffffc4 	addi	r7,r6,-1
  8147d4:	3000061e 	bne	r6,zero,8147f0 <memcmp+0x34>
  8147d8:	00000a06 	br	814804 <memcmp+0x48>
  8147dc:	39ffffc4 	addi	r7,r7,-1
  8147e0:	00bfffc4 	movi	r2,-1
  8147e4:	21000044 	addi	r4,r4,1
  8147e8:	29400044 	addi	r5,r5,1
  8147ec:	38800526 	beq	r7,r2,814804 <memcmp+0x48>
  8147f0:	20c00003 	ldbu	r3,0(r4)
  8147f4:	28800003 	ldbu	r2,0(r5)
  8147f8:	18bff826 	beq	r3,r2,8147dc <memcmp+0x20>
  8147fc:	1885c83a 	sub	r2,r3,r2
  814800:	f800283a 	ret
  814804:	0005883a 	mov	r2,zero
  814808:	f800283a 	ret
  81480c:	180f883a 	mov	r7,r3
  814810:	20c00017 	ldw	r3,0(r4)
  814814:	28800017 	ldw	r2,0(r5)
  814818:	18bfed1e 	bne	r3,r2,8147d0 <memcmp+0x14>
  81481c:	31bfff04 	addi	r6,r6,-4
  814820:	21000104 	addi	r4,r4,4
  814824:	29400104 	addi	r5,r5,4
  814828:	39bff936 	bltu	r7,r6,814810 <memcmp+0x54>
  81482c:	003fe806 	br	8147d0 <memcmp+0x14>

00814830 <__register_exitproc>:
  814830:	defffa04 	addi	sp,sp,-24
  814834:	00802074 	movhi	r2,129
  814838:	109bd104 	addi	r2,r2,28484
  81483c:	dc000015 	stw	r16,0(sp)
  814840:	14000017 	ldw	r16,0(r2)
  814844:	dd000415 	stw	r20,16(sp)
  814848:	2829883a 	mov	r20,r5
  81484c:	81405217 	ldw	r5,328(r16)
  814850:	dcc00315 	stw	r19,12(sp)
  814854:	dc800215 	stw	r18,8(sp)
  814858:	dc400115 	stw	r17,4(sp)
  81485c:	dfc00515 	stw	ra,20(sp)
  814860:	2023883a 	mov	r17,r4
  814864:	3027883a 	mov	r19,r6
  814868:	3825883a 	mov	r18,r7
  81486c:	28002526 	beq	r5,zero,814904 <__register_exitproc+0xd4>
  814870:	29000117 	ldw	r4,4(r5)
  814874:	008007c4 	movi	r2,31
  814878:	11002716 	blt	r2,r4,814918 <__register_exitproc+0xe8>
  81487c:	8800101e 	bne	r17,zero,8148c0 <__register_exitproc+0x90>
  814880:	2105883a 	add	r2,r4,r4
  814884:	1085883a 	add	r2,r2,r2
  814888:	20c00044 	addi	r3,r4,1
  81488c:	1145883a 	add	r2,r2,r5
  814890:	0009883a 	mov	r4,zero
  814894:	15000215 	stw	r20,8(r2)
  814898:	28c00115 	stw	r3,4(r5)
  81489c:	2005883a 	mov	r2,r4
  8148a0:	dfc00517 	ldw	ra,20(sp)
  8148a4:	dd000417 	ldw	r20,16(sp)
  8148a8:	dcc00317 	ldw	r19,12(sp)
  8148ac:	dc800217 	ldw	r18,8(sp)
  8148b0:	dc400117 	ldw	r17,4(sp)
  8148b4:	dc000017 	ldw	r16,0(sp)
  8148b8:	dec00604 	addi	sp,sp,24
  8148bc:	f800283a 	ret
  8148c0:	29802204 	addi	r6,r5,136
  8148c4:	00800044 	movi	r2,1
  8148c8:	110e983a 	sll	r7,r2,r4
  8148cc:	30c04017 	ldw	r3,256(r6)
  8148d0:	2105883a 	add	r2,r4,r4
  8148d4:	1085883a 	add	r2,r2,r2
  8148d8:	1185883a 	add	r2,r2,r6
  8148dc:	19c6b03a 	or	r3,r3,r7
  8148e0:	14802015 	stw	r18,128(r2)
  8148e4:	14c00015 	stw	r19,0(r2)
  8148e8:	00800084 	movi	r2,2
  8148ec:	30c04015 	stw	r3,256(r6)
  8148f0:	88bfe31e 	bne	r17,r2,814880 <__register_exitproc+0x50>
  8148f4:	30804117 	ldw	r2,260(r6)
  8148f8:	11c4b03a 	or	r2,r2,r7
  8148fc:	30804115 	stw	r2,260(r6)
  814900:	003fdf06 	br	814880 <__register_exitproc+0x50>
  814904:	008020b4 	movhi	r2,130
  814908:	10a3c904 	addi	r2,r2,-28892
  81490c:	100b883a 	mov	r5,r2
  814910:	80805215 	stw	r2,328(r16)
  814914:	003fd606 	br	814870 <__register_exitproc+0x40>
  814918:	00800034 	movhi	r2,0
  81491c:	10800004 	addi	r2,r2,0
  814920:	1000021e 	bne	r2,zero,81492c <__register_exitproc+0xfc>
  814924:	013fffc4 	movi	r4,-1
  814928:	003fdc06 	br	81489c <__register_exitproc+0x6c>
  81492c:	01006404 	movi	r4,400
  814930:	103ee83a 	callr	r2
  814934:	1007883a 	mov	r3,r2
  814938:	103ffa26 	beq	r2,zero,814924 <__register_exitproc+0xf4>
  81493c:	80805217 	ldw	r2,328(r16)
  814940:	180b883a 	mov	r5,r3
  814944:	18000115 	stw	zero,4(r3)
  814948:	18800015 	stw	r2,0(r3)
  81494c:	80c05215 	stw	r3,328(r16)
  814950:	18006215 	stw	zero,392(r3)
  814954:	18006315 	stw	zero,396(r3)
  814958:	0009883a 	mov	r4,zero
  81495c:	883fc826 	beq	r17,zero,814880 <__register_exitproc+0x50>
  814960:	003fd706 	br	8148c0 <__register_exitproc+0x90>

00814964 <register_fini>:
  814964:	f800283a 	ret

00814968 <__call_exitprocs>:
  814968:	00802074 	movhi	r2,129
  81496c:	109bd104 	addi	r2,r2,28484
  814970:	10800017 	ldw	r2,0(r2)
  814974:	defff304 	addi	sp,sp,-52
  814978:	df000b15 	stw	fp,44(sp)
  81497c:	d8800115 	stw	r2,4(sp)
  814980:	00800034 	movhi	r2,0
  814984:	10800004 	addi	r2,r2,0
  814988:	1005003a 	cmpeq	r2,r2,zero
  81498c:	d8800215 	stw	r2,8(sp)
  814990:	d8800117 	ldw	r2,4(sp)
  814994:	dd400815 	stw	r21,32(sp)
  814998:	dd000715 	stw	r20,28(sp)
  81499c:	10805204 	addi	r2,r2,328
  8149a0:	dfc00c15 	stw	ra,48(sp)
  8149a4:	ddc00a15 	stw	r23,40(sp)
  8149a8:	dd800915 	stw	r22,36(sp)
  8149ac:	dcc00615 	stw	r19,24(sp)
  8149b0:	dc800515 	stw	r18,20(sp)
  8149b4:	dc400415 	stw	r17,16(sp)
  8149b8:	dc000315 	stw	r16,12(sp)
  8149bc:	282b883a 	mov	r21,r5
  8149c0:	2039883a 	mov	fp,r4
  8149c4:	d8800015 	stw	r2,0(sp)
  8149c8:	2829003a 	cmpeq	r20,r5,zero
  8149cc:	d8800117 	ldw	r2,4(sp)
  8149d0:	14405217 	ldw	r17,328(r2)
  8149d4:	88001026 	beq	r17,zero,814a18 <__call_exitprocs+0xb0>
  8149d8:	ddc00017 	ldw	r23,0(sp)
  8149dc:	88800117 	ldw	r2,4(r17)
  8149e0:	8c802204 	addi	r18,r17,136
  8149e4:	143fffc4 	addi	r16,r2,-1
  8149e8:	80000916 	blt	r16,zero,814a10 <__call_exitprocs+0xa8>
  8149ec:	05bfffc4 	movi	r22,-1
  8149f0:	a000151e 	bne	r20,zero,814a48 <__call_exitprocs+0xe0>
  8149f4:	8409883a 	add	r4,r16,r16
  8149f8:	2105883a 	add	r2,r4,r4
  8149fc:	1485883a 	add	r2,r2,r18
  814a00:	10c02017 	ldw	r3,128(r2)
  814a04:	a8c01126 	beq	r21,r3,814a4c <__call_exitprocs+0xe4>
  814a08:	843fffc4 	addi	r16,r16,-1
  814a0c:	85bff81e 	bne	r16,r22,8149f0 <__call_exitprocs+0x88>
  814a10:	d8800217 	ldw	r2,8(sp)
  814a14:	10003126 	beq	r2,zero,814adc <__call_exitprocs+0x174>
  814a18:	dfc00c17 	ldw	ra,48(sp)
  814a1c:	df000b17 	ldw	fp,44(sp)
  814a20:	ddc00a17 	ldw	r23,40(sp)
  814a24:	dd800917 	ldw	r22,36(sp)
  814a28:	dd400817 	ldw	r21,32(sp)
  814a2c:	dd000717 	ldw	r20,28(sp)
  814a30:	dcc00617 	ldw	r19,24(sp)
  814a34:	dc800517 	ldw	r18,20(sp)
  814a38:	dc400417 	ldw	r17,16(sp)
  814a3c:	dc000317 	ldw	r16,12(sp)
  814a40:	dec00d04 	addi	sp,sp,52
  814a44:	f800283a 	ret
  814a48:	8409883a 	add	r4,r16,r16
  814a4c:	88c00117 	ldw	r3,4(r17)
  814a50:	2105883a 	add	r2,r4,r4
  814a54:	1445883a 	add	r2,r2,r17
  814a58:	18ffffc4 	addi	r3,r3,-1
  814a5c:	11800217 	ldw	r6,8(r2)
  814a60:	1c001526 	beq	r3,r16,814ab8 <__call_exitprocs+0x150>
  814a64:	10000215 	stw	zero,8(r2)
  814a68:	303fe726 	beq	r6,zero,814a08 <__call_exitprocs+0xa0>
  814a6c:	00c00044 	movi	r3,1
  814a70:	1c06983a 	sll	r3,r3,r16
  814a74:	90804017 	ldw	r2,256(r18)
  814a78:	8cc00117 	ldw	r19,4(r17)
  814a7c:	1884703a 	and	r2,r3,r2
  814a80:	10001426 	beq	r2,zero,814ad4 <__call_exitprocs+0x16c>
  814a84:	90804117 	ldw	r2,260(r18)
  814a88:	1884703a 	and	r2,r3,r2
  814a8c:	10000c1e 	bne	r2,zero,814ac0 <__call_exitprocs+0x158>
  814a90:	2105883a 	add	r2,r4,r4
  814a94:	1485883a 	add	r2,r2,r18
  814a98:	11400017 	ldw	r5,0(r2)
  814a9c:	e009883a 	mov	r4,fp
  814aa0:	303ee83a 	callr	r6
  814aa4:	88800117 	ldw	r2,4(r17)
  814aa8:	98bfc81e 	bne	r19,r2,8149cc <__call_exitprocs+0x64>
  814aac:	b8800017 	ldw	r2,0(r23)
  814ab0:	147fd526 	beq	r2,r17,814a08 <__call_exitprocs+0xa0>
  814ab4:	003fc506 	br	8149cc <__call_exitprocs+0x64>
  814ab8:	8c000115 	stw	r16,4(r17)
  814abc:	003fea06 	br	814a68 <__call_exitprocs+0x100>
  814ac0:	2105883a 	add	r2,r4,r4
  814ac4:	1485883a 	add	r2,r2,r18
  814ac8:	11000017 	ldw	r4,0(r2)
  814acc:	303ee83a 	callr	r6
  814ad0:	003ff406 	br	814aa4 <__call_exitprocs+0x13c>
  814ad4:	303ee83a 	callr	r6
  814ad8:	003ff206 	br	814aa4 <__call_exitprocs+0x13c>
  814adc:	88800117 	ldw	r2,4(r17)
  814ae0:	1000081e 	bne	r2,zero,814b04 <__call_exitprocs+0x19c>
  814ae4:	89000017 	ldw	r4,0(r17)
  814ae8:	20000726 	beq	r4,zero,814b08 <__call_exitprocs+0x1a0>
  814aec:	b9000015 	stw	r4,0(r23)
  814af0:	8809883a 	mov	r4,r17
  814af4:	00000000 	call	0 <__reset-0x800000>
  814af8:	bc400017 	ldw	r17,0(r23)
  814afc:	883fb71e 	bne	r17,zero,8149dc <__call_exitprocs+0x74>
  814b00:	003fc506 	br	814a18 <__call_exitprocs+0xb0>
  814b04:	89000017 	ldw	r4,0(r17)
  814b08:	882f883a 	mov	r23,r17
  814b0c:	2023883a 	mov	r17,r4
  814b10:	883fb21e 	bne	r17,zero,8149dc <__call_exitprocs+0x74>
  814b14:	003fc006 	br	814a18 <__call_exitprocs+0xb0>

00814b18 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814b18:	defffd04 	addi	sp,sp,-12
  814b1c:	df000215 	stw	fp,8(sp)
  814b20:	df000204 	addi	fp,sp,8
  814b24:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814b28:	e0bfff17 	ldw	r2,-4(fp)
  814b2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814b30:	e0bffe17 	ldw	r2,-8(fp)
  814b34:	1005003a 	cmpeq	r2,r2,zero
  814b38:	1000021e 	bne	r2,zero,814b44 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814b3c:	002af070 	cmpltui	zero,zero,43969
  814b40:	00000106 	br	814b48 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814b44:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814b48:	e037883a 	mov	sp,fp
  814b4c:	df000017 	ldw	fp,0(sp)
  814b50:	dec00104 	addi	sp,sp,4
  814b54:	f800283a 	ret

00814b58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814b58:	defffd04 	addi	sp,sp,-12
  814b5c:	dfc00215 	stw	ra,8(sp)
  814b60:	df000115 	stw	fp,4(sp)
  814b64:	df000104 	addi	fp,sp,4
  814b68:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814b6c:	e13fff17 	ldw	r4,-4(fp)
  814b70:	0814b180 	call	814b18 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814b74:	003fff06 	br	814b74 <_exit+0x1c>
  814b78:	00814964 	muli	r2,zero,1317
