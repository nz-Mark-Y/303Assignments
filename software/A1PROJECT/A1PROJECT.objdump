
A1PROJECT.elf:     file format elf32-littlenios2
A1PROJECT.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000152e8 memsz 0x000152e8 flags r-x
    LOAD off    0x00016308 vaddr 0x00815308 paddr 0x00816fdc align 2**12
         filesz 0x00001cd4 memsz 0x00001cd4 flags rw-
    LOAD off    0x00018cb0 vaddr 0x00818cb0 paddr 0x00818cb0 align 2**12
         filesz 0x00000000 memsz 0x00000458 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000149f0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000764  00814ba4  00814ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd4  00815308  00816fdc  00016308  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000458  00818cb0  00818cb0  00018cb0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017fdc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  00018000  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c0d  00000000  00000000  00019218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003754d  00000000  00000000  0001ae25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bb9e  00000000  00000000  00052372  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001da71  00000000  00000000  0005df10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002588  00000000  00000000  0007b984  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d76  00000000  00000000  0007df0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012c41  00000000  00000000  00080c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000938c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00093928  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000986a5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000986a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000986ab  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000986ac  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000986ad  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000986b1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000986b5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000986b9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000986c2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000986cb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000986d4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000054  00000000  00000000  000986da  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  0009872e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814ba4 l    d  .rodata	00000000 .rodata
00815308 l    d  .rwdata	00000000 .rwdata
00818cb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00818cb0 l     O .bss	00000004 tlc_timer_event
00818cb4 l     O .bss	00000004 camera_timer_event
00818cb8 l     O .bss	00000004 pedestrianNS
00818cbc l     O .bss	00000004 pedestrianEW
00818cc0 l     O .bss	00000004 pedestrianNSOld
00818cc4 l     O .bss	00000004 pedestrianEWOld
00818cc8 l     O .bss	00000004 newTimeoutValues
00818ccc l     O .bss	00000004 vehicle_detected
00815308 l     O .rwdata	00000018 timeout
00815320 l     O .rwdata	0000001c timeout_buf
00818cd0 l     O .bss	00000004 valueCount
0081533c l     O .rwdata	00000018 tempBuffer
00818cd4 l     O .bss	00000004 mode
00815354 l     O .rwdata	00000010 proc_state
00818cd8 l     O .bss	00000004 camera_count
00818d20 l     O .bss	00000018 tlc_timer
00818cdc l     O .bss	00000004 state.3042
00818ce0 l     O .bss	00000004 c
00818ce4 l     O .bss	00000004 timeoutValue
00818d38 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801420 l     F .text	00000058 std
0080152c l     F .text	00000008 __fp_lock
00801534 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815364 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803d3c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00803efc l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008041d0 l     F .text	00000058 __sprint_r
00814d28 l     O .rodata	00000010 blanks.3452
00814d18 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814d40 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814e68 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807a9c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816fac l     O .rwdata	00000004 charset
00815008 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
00815150 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080aa7c l     F .text	00000048 match
00815b8c l     O .rwdata	00000014 fpi.1950
0081516c l     O .rodata	00000028 tinytens
00815b78 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080cef4 l     F .text	00000024 htinit
0080cf80 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d7e8 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080e8ac l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fad4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00810700 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810760 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810860 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810b40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810c20 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810d7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810e88 l     F .text	000000dc alt_file_locked
008110ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0081126c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816fcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008116ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815d48 l     O .rwdata	00001060 jtag_uart
00816da8 l     O .rwdata	00000120 lcd
00816ec8 l     O .rwdata	000000c4 uart
008117d4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811a14 l     F .text	00000228 altera_avalon_jtag_uart_irq
00811c3c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816fd8 l     O .rwdata	00000004 colstart
008122b8 l     F .text	000000b8 lcd_write_command
00812370 l     F .text	000000d4 lcd_write_data
00812444 l     F .text	000000c4 lcd_clear_screen
00812508 l     F .text	000001ec lcd_repaint_screen
008126f4 l     F .text	000000c8 lcd_scroll_up
008127bc l     F .text	000002d0 lcd_handle_escape
00812f98 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008131f8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008134b8 l     F .text	0000009c altera_avalon_uart_irq
00813554 l     F .text	000000e0 altera_avalon_uart_rxirq
00813634 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813a20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813c48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814430 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081498c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814b40 l     F .text	00000040 alt_sim_halt
00809c28 g     F .text	00000094 _mprec_log10
00809d14 g     F .text	00000088 __any_on
00809544 g     F .text	00000070 _isatty_r
00815128 g     O .rodata	00000028 __mprec_tinytens
00810ddc g     F .text	0000006c alt_main
008034d0 g     F .text	000000a0 _puts_r
00818e78 g     O .bss	00000100 alt_irq
008096a4 g     F .text	00000078 _lseek_r
00816fdc g       *ABS*	00000000 __flash_rwdata_start
00809268 g     F .text	000000a0 __sflags
0080f3cc g     F .text	00000088 __eqdf2
00819108 g       *ABS*	00000000 __alt_heap_start
00800ca4 g     F .text	00000060 printToUART
00803458 g     F .text	00000044 printf
00804018 g     F .text	00000068 __sseek
00801488 g     F .text	000000a4 __sinit
00809604 g     F .text	00000084 _setlocale_r
00801588 g     F .text	00000068 __sfmoreglue
0080ce24 g     F .text	0000001c ungetc
00810e68 g     F .text	00000020 __malloc_unlock
0080aac4 g     F .text	000014e4 _strtod_r
00818ce8 g     O .bss	00000004 fp
00803268 g     F .text	000000e0 memmove
00801578 g     F .text	00000010 _cleanup
00809d9c g     F .text	000000bc _Balloc
00800a94 g     F .text	00000020 buffer_timeout
0080f4dc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802180 g     F .text	00000074 _fstat_r
00818cec g     O .bss	00000004 errno
00803da4 g     F .text	00000014 __srget
00807778 g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080fe10 g     F .text	0000002c __make_fp
00818d10 g     O .bss	00000004 alt_argv
0081ef8c g       *ABS*	00000000 _gp
0081456c g     F .text	00000030 usleep
008003cc g     F .text	000000b4 tlc_timer_isr
00815bc8 g     O .rwdata	00000180 alt_fd_list
00813ec8 g     F .text	00000094 alt_find_dev
008031c8 g     F .text	000000a0 memcpy
0080d834 g     F .text	00000248 __hexnan
00800ad4 g     F .text	000000b8 camera_timer_isr
0080156c g     F .text	0000000c _cleanup_r
0080f6fc g     F .text	000000f8 __floatsidf
008144f4 g     F .text	00000078 alt_io_redirect
0080f5ec g     F .text	00000088 __ltdf2
00814ba4 g       *ABS*	00000000 __DTOR_END__
00803570 g     F .text	00000014 puts
0080979c g     F .text	00000040 mbrtowc
0080779c g     F .text	00000068 _vfscanf_r
00809b78 g     F .text	000000b0 __ratio
00800594 g     F .text	0000025c pedestrian_tlc
00811e54 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080349c g     F .text	00000034 _printf_r
0080fc10 g     F .text	00000008 __udivsi3
00810a80 g     F .text	000000c0 isatty
008095b4 g     F .text	0000002c iswspace
00815038 g     O .rodata	000000c8 __mprec_tens
008095e0 g     F .text	00000008 __locale_charset
0080db14 g     F .text	000000a4 __fixunsdfsi
00814708 g     F .text	00000090 alt_icache_flush
00818cf0 g     O .bss	00000004 __malloc_top_pad
0080c898 g     F .text	00000024 strtoul
00816fa8 g     O .rwdata	00000004 __mb_cur_max
008095e8 g     F .text	0000000c _localeconv_r
0080c8bc g     F .text	000002f0 _strtoull_r
0080a494 g     F .text	0000003c __i2b
008021f4 g     F .text	0000049c __sfvwrite_r
00803db8 g     F .text	00000070 _sbrk_r
008007f0 g     F .text	000000b4 configurable_tlc
0080a810 g     F .text	00000078 _read_r
00815b6c g     O .rwdata	0000000c __lc_ctype
00816fc0 g     O .rwdata	00000004 alt_max_fd
00810150 g     F .text	00000138 __unpack_d
00800fa4 g     F .text	00000110 _fclose_r
008012c4 g     F .text	00000034 fflush
00800d04 g     F .text	0000003c handle_vehicle_button
00818cf4 g     O .bss	00000004 __malloc_max_sbrked_mem
008108c0 g     F .text	000001c0 alt_irq_register
00801390 g     F .text	00000090 _fgetc_r
0080ed3c g     F .text	00000074 __adddf3
0080e744 g     F .text	00000078 __nesf2
00809a58 g     F .text	00000120 __b2d
0080e194 g     F .text	000005b0 __umoddi3
00810c8c g     F .text	000000f0 lseek
00816f98 g     O .rwdata	00000004 _global_impure_ptr
00803584 g     F .text	000005f4 _realloc_r
00819108 g       *ABS*	00000000 __bss_end
00814338 g     F .text	000000f8 alt_iic_isr_register
00811480 g     F .text	0000010c alt_tick
00818d78 g     O .bss	00000100 __hexdig
0080dbb8 g     F .text	000005dc __udivdi3
00815100 g     O .rodata	00000028 __mprec_bigtens
0080a6f0 g     F .text	00000120 __s2b
0080f940 g     F .text	00000194 __floatunsidf
00809978 g     F .text	00000060 __mcmp
008133f0 g     F .text	000000c8 altera_avalon_uart_init
00816fa4 g     O .rwdata	00000004 __ctype_ptr
00801554 g     F .text	00000018 __fp_lock_all
008142f0 g     F .text	00000048 alt_ic_irq_enabled
008113e8 g     F .text	00000098 alt_alarm_stop
00800b8c g     F .text	00000118 camera_tlc
0080c32c g     F .text	00000024 strtol
00818d08 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815ba0 g     O .rwdata	00000028 alt_dev_null
0080fca0 g     F .text	000000c8 __unpack_f
00813ca8 g     F .text	00000044 alt_dcache_flush_all
00809844 g     F .text	00000070 __hi0bits
0080f7f4 g     F .text	000000d8 __fixdfsi
0080c0cc g     F .text	0000001c strtod
00816fdc g       *ABS*	00000000 __ram_rwdata_end
00816fb8 g     O .rwdata	00000008 alt_dev_list
0081158c g     F .text	00000120 write
0080e7bc g     F .text	00000078 __gtsf2
00815308 g       *ABS*	00000000 __ram_rodata_end
0081078c g     F .text	000000d4 fstat
008017f0 g     F .text	0000002c fprintf
0080f674 g     F .text	00000088 __ledf2
0080a5d0 g     F .text	00000120 __pow5mult
00818cfc g     O .bss	00000004 __nlocale_changed
0080fc18 g     F .text	00000008 __umodsi3
00819108 g       *ABS*	00000000 end
00810350 g     F .text	00000160 __pack_f
00812a8c g     F .text	0000050c altera_avalon_lcd_16207_write
00813a80 g     F .text	000001c8 altera_avalon_uart_write
0080215c g     F .text	00000024 fseek
00811954 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814ba0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813268 g     F .text	00000090 alt_avalon_timer_sc_init
00813350 g     F .text	00000058 altera_avalon_uart_write_fd
0080fc20 g     F .text	00000080 __clzsi2
008133a8 g     F .text	00000048 altera_avalon_uart_close_fd
00812078 g     F .text	00000240 altera_avalon_jtag_uart_write
00801478 g     F .text	00000004 __sfp_lock_acquire
008030e4 g     F .text	000000e4 memchr
00804228 g     F .text	00001eac ___vfprintf_internal_r
00803e9c g     F .text	00000060 _sprintf_r
00801a0c g     F .text	00000314 _free_r
00814990 g     F .text	000001b0 __call_exitprocs
00803d58 g     F .text	0000004c __srget_r
00818d00 g     O .bss	00000004 __mlocale_changed
00816fa0 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818d18 g     O .bss	00000004 _alt_tick_rate
0080c350 g     F .text	00000318 _strtoll_r
00816f8c g     O .rwdata	00000005 chararray
0080a160 g     F .text	0000014c __lshift
00818d1c g     O .bss	00000004 _alt_nticks
0081114c g     F .text	00000120 read
00811740 g     F .text	00000094 alt_sys_init
008033e0 g     F .text	00000078 _open_r
00814858 g     F .text	00000134 __register_exitproc
0080a2ac g     F .text	000001e8 __multiply
00811cec g     F .text	00000074 altera_avalon_jtag_uart_close
00815308 g       *ABS*	00000000 __ram_rwdata_start
00814ba4 g       *ABS*	00000000 __ram_rodata_start
00818d50 g     O .bss	00000028 __malloc_current_mallinfo
00809e58 g     F .text	0000017c __d2b
0081180c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c668 g     F .text	00000230 _strtoul_r
0081407c g     F .text	000000b8 alt_get_fd
008145bc g     F .text	0000014c alt_busy_sleep
00810288 g     F .text	000000c8 __fpcmp_parts_d
00807a2c g     F .text	00000070 _close_r
008147e4 g     F .text	00000074 memcmp
008118bc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00819108 g       *ABS*	00000000 __alt_stack_base
00811904 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803f8c g     F .text	00000084 sscanf
008078f0 g     F .text	0000013c __swsetup_r
0080f174 g     F .text	00000258 __divdf3
008015f0 g     F .text	000000f0 __sfp
00809cbc g     F .text	00000058 __copybits
00815764 g     O .rwdata	00000408 __malloc_av_
00801484 g     F .text	00000004 __sinit_lock_release
0080edb0 g     F .text	000003c4 __muldf3
008040fc g     F .text	00000060 __sread
00809504 g     F .text	00000040 fread
00813f5c g     F .text	00000120 alt_find_file
00813cec g     F .text	000000b4 alt_dev_llist_insert
00810e48 g     F .text	00000020 __malloc_lock
0080181c g     F .text	00000034 _fprintf_r
0081132c g     F .text	000000bc sbrk
008010c8 g     F .text	000001fc _fflush_r
0080ce40 g     F .text	000000b4 _calloc_r
008017d4 g     F .text	0000001c fopen
00818cb0 g       *ABS*	00000000 __bss_start
00803348 g     F .text	00000098 memset
00800d40 g     F .text	00000264 main
00818d14 g     O .bss	00000004 alt_envp
00818cf8 g     O .bss	00000004 __malloc_max_total_mem
00811864 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e834 g     F .text	00000078 __ltsf2
00809308 g     F .text	000001fc _fread_r
00813064 g     F .text	0000013c altera_avalon_lcd_16207_init
008008a4 g     F .text	00000048 config_tlc
00804010 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008010b4 g     F .text	00000014 fclose
0080c0e8 g     F .text	00000244 _strtol_r
0080f8cc g     F .text	00000074 __truncdfsf2
00818f78 g     O .bss	00000190 _atexit0
00807cb4 g     F .text	000015b4 _dtoa_r
008029a4 g     F .text	00000740 _malloc_r
00816fc4 g     O .rwdata	00000004 alt_errno
0080cbac g     F .text	000000dc __submore
00800480 g     F .text	000000b0 NSEW_ped_isr
00802758 g     F .text	000000b8 _fwalk
008097dc g     F .text	00000040 _mbtowc_r
0080fb50 g     F .text	00000060 __divsi3
008151b0 g     O .rodata	00000014 __thenan_df
008018e0 g     F .text	0000012c _malloc_trim_r
00800ab4 g     F .text	00000020 update_timeout
00814ba4 g       *ABS*	00000000 __CTOR_END__
0080a9c0 g     F .text	000000bc strcmp
00814ba4 g       *ABS*	00000000 __flash_rodata_start
00814ba4 g       *ABS*	00000000 __DTOR_LIST__
0080f454 g     F .text	00000088 __nedf2
0081170c g     F .text	00000034 alt_irq_init
008112cc g     F .text	00000060 alt_release_fd
008012f8 g     F .text	00000098 fgetc
00803e28 g     F .text	00000074 sprintf
008151c4 g     O .rodata	00000100 __clz_tab
00818d04 g     O .bss	00000004 _PathLocale
0080bfa8 g     F .text	00000124 strtof
00814798 g     F .text	00000014 atexit
00807878 g     F .text	00000078 _write_r
00809688 g     F .text	0000001c setlocale
0080a9b8 g     F .text	00000008 nanf
00816f94 g     O .rwdata	00000004 _impure_ptr
00818d0c g     O .bss	00000004 alt_argc
0080971c g     F .text	00000080 _mbrtowc_r
00813e64 g     F .text	00000064 _do_dtors
00801d20 g     F .text	0000043c _fseek_r
008008ec g     F .text	000001a8 timeout_data_handler
00803b78 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
008099d8 g     F .text	00000080 __ulp
0080a888 g     F .text	00000040 __isinfd
0080153c g     F .text	00000018 __fp_unlock_all
008131a0 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00816fb0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008095f4 g     F .text	00000010 localeconv
00814164 g     F .text	00000050 alt_ic_isr_register
0080cf18 g     F .text	00000068 __hexdig_init
00803f04 g     F .text	00000088 _sscanf_r
00816fdc g       *ABS*	00000000 _edata
008132f8 g     F .text	00000058 altera_avalon_uart_read_fd
00819108 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00807804 g     F .text	00000074 vfscanf
00811d60 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00801850 g     F .text	00000074 _fputs_r
00814250 g     F .text	000000a0 alt_ic_irq_disable
00804080 g     F .text	0000007c __swrite
00816f9c g     O .rwdata	00000004 __malloc_trim_threshold
0081459c g     F .text	00000020 altera_nios2_qsys_irq_init
008147ac g     F .text	00000038 exit
00802690 g     F .text	000000c8 _fwalk_reent
00809fd4 g     F .text	0000018c __mdiff
00800250 g     F .text	0000017c simple_tlc
0080fbb0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080147c g     F .text	00000004 __sfp_lock_release
0080a8f8 g     F .text	000000c0 __sccl
00800200 g     F .text	00000050 init_tlc
00814d64 g     O .rodata	00000101 _ctype_
00813790 g     F .text	00000060 altera_avalon_uart_close
0080fd68 g     F .text	000000a8 __fpcmp_parts_f
008016e0 g     F .text	000000f4 _fopen_r
00814b80 g     F .text	00000020 _exit
0080a8c8 g     F .text	00000030 __isnand
008104b0 g     F .text	00000154 alt_alarm_start
0080da7c g     F .text	00000098 __muldi3
00802810 g     F .text	00000194 __smakebuf_r
0080415c g     F .text	00000074 strlen
00810f64 g     F .text	00000188 open
0080f564 g     F .text	00000088 __gedf2
0080d030 g     F .text	000007b8 __gethex
00814134 g     F .text	00000030 alt_icache_flush_all
008018c4 g     F .text	0000001c fputs
00816fc8 g     O .rwdata	00000004 alt_priority_mask
008141b4 g     F .text	0000009c alt_ic_irq_enable
008060d4 g     F .text	00000024 __vfprintf_internal
008137f0 g     F .text	00000230 altera_avalon_uart_read
0080ecbc g     F .text	00000080 __subdf3
008098b4 g     F .text	000000c4 __lo0bits
008060f8 g     F .text	00001680 __svfscanf_r
00816fd0 g     O .rwdata	00000008 alt_alarm_list
0080cc88 g     F .text	0000019c _ungetc_r
00813e00 g     F .text	00000064 _do_ctors
00810604 g     F .text	000000fc close
00800530 g     F .text	00000064 init_buttons_pio
00810ba0 g     F .text	00000080 alt_load
0080fe3c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00801480 g     F .text	00000004 __sinit_lock_acquire
0080a4d0 g     F .text	00000100 __multadd
0080981c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e39e04 	addi	r3,r3,-29064
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e39e04 	addi	r3,r3,-29064
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bbe314 	ori	gp,gp,61324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a32c14 	ori	r2,r2,36016

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e44214 	ori	r3,r3,37128

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810ba00 	call	810ba0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810ddc0 	call	810ddc <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1}; // Process states: use -1 as initialisation state
static int camera_count = 0;

// Code =======================================
// Initialise the traffic light controller for all modes
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a75217 	ldw	r2,-25272(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	alt_alarm_start(&tlc_timer, timeout[0], tlc_timer_isr, timerContext);
  800218:	00802074 	movhi	r2,129
  80021c:	1094c204 	addi	r2,r2,21256
  800220:	11400017 	ldw	r5,0(r2)
  800224:	010020b4 	movhi	r4,130
  800228:	21234804 	addi	r4,r4,-29408
  80022c:	01802034 	movhi	r6,128
  800230:	3180f304 	addi	r6,r6,972
  800234:	e1ffff17 	ldw	r7,-4(fp)
  800238:	08104b00 	call	8104b0 <alt_alarm_start>
}
  80023c:	e037883a 	mov	sp,fp
  800240:	dfc00117 	ldw	ra,4(sp)
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00204 	addi	sp,sp,8
  80024c:	f800283a 	ret

00800250 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	dfc00215 	stw	ra,8(sp)
  800258:	df000115 	stw	fp,4(sp)
  80025c:	df000104 	addi	fp,sp,4
  800260:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800264:	e0bfff17 	ldw	r2,-4(fp)
  800268:	10800017 	ldw	r2,0(r2)
  80026c:	10bfffd8 	cmpnei	r2,r2,-1
  800270:	10000b1e 	bne	r2,zero,8002a0 <simple_tlc+0x50>
		init_tlc();
  800274:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800278:	e0bfff17 	ldw	r2,-4(fp)
  80027c:	10800017 	ldw	r2,0(r2)
  800280:	10c00044 	addi	r3,r2,1
  800284:	e0bfff17 	ldw	r2,-4(fp)
  800288:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);	// both traffic lights will be red by default
  80028c:	00c04074 	movhi	r3,257
  800290:	18c41804 	addi	r3,r3,4192
  800294:	00800904 	movi	r2,36
  800298:	18800035 	stwio	r2,0(r3)
		return;
  80029c:	00004606 	br	8003b8 <simple_tlc+0x168>
	}

	if (tlc_timer_event == 1) {
  8002a0:	d0a74917 	ldw	r2,-25308(gp)
  8002a4:	10800058 	cmpnei	r2,r2,1
  8002a8:	1000431e 	bne	r2,zero,8003b8 <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	1004c03a 	cmpne	r2,r2,zero
  8002b8:	1000081e 	bne	r2,zero,8002dc <simple_tlc+0x8c>
			*state = 1; // G, R
  8002bc:	e0ffff17 	ldw	r3,-4(fp)
  8002c0:	00800044 	movi	r2,1
  8002c4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  8002c8:	00c04074 	movhi	r3,257
  8002cc:	18c41804 	addi	r3,r3,4192
  8002d0:	00800304 	movi	r2,12
  8002d4:	18800035 	stwio	r2,0(r3)
  8002d8:	00003606 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 1) {
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	10800058 	cmpnei	r2,r2,1
  8002e8:	1000081e 	bne	r2,zero,80030c <simple_tlc+0xbc>
			*state = 2; // Y, R
  8002ec:	e0ffff17 	ldw	r3,-4(fp)
  8002f0:	00800084 	movi	r2,2
  8002f4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8002f8:	00c04074 	movhi	r3,257
  8002fc:	18c41804 	addi	r3,r3,4192
  800300:	00800504 	movi	r2,20
  800304:	18800035 	stwio	r2,0(r3)
  800308:	00002a06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 2) {
  80030c:	e0bfff17 	ldw	r2,-4(fp)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800098 	cmpnei	r2,r2,2
  800318:	1000081e 	bne	r2,zero,80033c <simple_tlc+0xec>
			*state = 3; // R, R
  80031c:	e0ffff17 	ldw	r3,-4(fp)
  800320:	008000c4 	movi	r2,3
  800324:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800328:	00c04074 	movhi	r3,257
  80032c:	18c41804 	addi	r3,r3,4192
  800330:	00800904 	movi	r2,36
  800334:	18800035 	stwio	r2,0(r3)
  800338:	00001e06 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 3) {
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	108000d8 	cmpnei	r2,r2,3
  800348:	1000081e 	bne	r2,zero,80036c <simple_tlc+0x11c>
			*state = 4; // R, G
  80034c:	e0ffff17 	ldw	r3,-4(fp)
  800350:	00800104 	movi	r2,4
  800354:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800358:	00c04074 	movhi	r3,257
  80035c:	18c41804 	addi	r3,r3,4192
  800360:	00800844 	movi	r2,33
  800364:	18800035 	stwio	r2,0(r3)
  800368:	00001206 	br	8003b4 <simple_tlc+0x164>
		} else if (*state == 4) {
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10800118 	cmpnei	r2,r2,4
  800378:	1000081e 	bne	r2,zero,80039c <simple_tlc+0x14c>
			*state = 5; // R, Y
  80037c:	e0ffff17 	ldw	r3,-4(fp)
  800380:	00800144 	movi	r2,5
  800384:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800388:	00c04074 	movhi	r3,257
  80038c:	18c41804 	addi	r3,r3,4192
  800390:	00800884 	movi	r2,34
  800394:	18800035 	stwio	r2,0(r3)
  800398:	00000606 	br	8003b4 <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8003a4:	00c04074 	movhi	r3,257
  8003a8:	18c41804 	addi	r3,r3,4192
  8003ac:	00800904 	movi	r2,36
  8003b0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8003b4:	d0274915 	stw	zero,-25308(gp)
		return;
	}
}
  8003b8:	e037883a 	mov	sp,fp
  8003bc:	dfc00117 	ldw	ra,4(sp)
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00204 	addi	sp,sp,8
  8003c8:	f800283a 	ret

008003cc <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  8003cc:	defffb04 	addi	sp,sp,-20
  8003d0:	dfc00415 	stw	ra,16(sp)
  8003d4:	df000315 	stw	fp,12(sp)
  8003d8:	df000304 	addi	fp,sp,12
  8003dc:	e13fff15 	stw	r4,-4(fp)
	int currentState = proc_state[mode];
  8003e0:	d0a75217 	ldw	r2,-25272(gp)
  8003e4:	00c02074 	movhi	r3,129
  8003e8:	18d4d504 	addi	r3,r3,21332
  8003ec:	1085883a 	add	r2,r2,r2
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	10c5883a 	add	r2,r2,r3
  8003f8:	10800017 	ldw	r2,0(r2)
  8003fc:	e0bffe15 	stw	r2,-8(fp)
	if (currentState != 5) {
  800400:	e0bffe17 	ldw	r2,-8(fp)
  800404:	10800160 	cmpeqi	r2,r2,5
  800408:	1000041e 	bne	r2,zero,80041c <tlc_timer_isr+0x50>
		currentState++;
  80040c:	e0bffe17 	ldw	r2,-8(fp)
  800410:	10800044 	addi	r2,r2,1
  800414:	e0bffe15 	stw	r2,-8(fp)
  800418:	00000106 	br	800420 <tlc_timer_isr+0x54>
	} else {
		currentState = 0;
  80041c:	e03ffe15 	stw	zero,-8(fp)
	}
	int	nextTimeout = timeout[currentState];
  800420:	e0bffe17 	ldw	r2,-8(fp)
  800424:	00c02074 	movhi	r3,129
  800428:	18d4c204 	addi	r3,r3,21256
  80042c:	1085883a 	add	r2,r2,r2
  800430:	1085883a 	add	r2,r2,r2
  800434:	10c5883a 	add	r2,r2,r3
  800438:	10800017 	ldw	r2,0(r2)
  80043c:	e0bffd15 	stw	r2,-12(fp)
	printf("next timeout: %d\n", nextTimeout);
  800440:	01002074 	movhi	r4,129
  800444:	2112e904 	addi	r4,r4,19364
  800448:	e17ffd17 	ldw	r5,-12(fp)
  80044c:	08034580 	call	803458 <printf>
	printf("current state: %d\n", currentState);
  800450:	01002074 	movhi	r4,129
  800454:	2112ee04 	addi	r4,r4,19384
  800458:	e17ffe17 	ldw	r5,-8(fp)
  80045c:	08034580 	call	803458 <printf>
	tlc_timer_event = 1;
  800460:	00800044 	movi	r2,1
  800464:	d0a74915 	stw	r2,-25308(gp)
	return nextTimeout;
  800468:	e0bffd17 	ldw	r2,-12(fp)
}
  80046c:	e037883a 	mov	sp,fp
  800470:	dfc00117 	ldw	ra,4(sp)
  800474:	df000017 	ldw	fp,0(sp)
  800478:	dec00204 	addi	sp,sp,8
  80047c:	f800283a 	ret

00800480 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  800480:	defffb04 	addi	sp,sp,-20
  800484:	dfc00415 	stw	ra,16(sp)
  800488:	df000315 	stw	fp,12(sp)
  80048c:	df000304 	addi	fp,sp,12
  800490:	e13ffe15 	stw	r4,-8(fp)
  800494:	e17fff15 	stw	r5,-4(fp)
	volatile int* temp = (volatile int*) context;
  800498:	e0bffe17 	ldw	r2,-8(fp)
  80049c:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  8004a0:	00804074 	movhi	r2,257
  8004a4:	10842b04 	addi	r2,r2,4268
  8004a8:	10c00037 	ldwio	r3,0(r2)
  8004ac:	e0bffd17 	ldw	r2,-12(fp)
  8004b0:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  8004b4:	00804074 	movhi	r2,257
  8004b8:	10842b04 	addi	r2,r2,4268
  8004bc:	10000035 	stwio	zero,0(r2)
	if ((*temp & 0x01) > 0) {
  8004c0:	e0bffd17 	ldw	r2,-12(fp)
  8004c4:	10800017 	ldw	r2,0(r2)
  8004c8:	1080004c 	andi	r2,r2,1
  8004cc:	10800050 	cmplti	r2,r2,1
  8004d0:	1000031e 	bne	r2,zero,8004e0 <NSEW_ped_isr+0x60>
		pedestrianNS = 1;
  8004d4:	00800044 	movi	r2,1
  8004d8:	d0a74b15 	stw	r2,-25300(gp)
  8004dc:	00000106 	br	8004e4 <NSEW_ped_isr+0x64>
	} else {
		pedestrianNS = 0;
  8004e0:	d0274b15 	stw	zero,-25300(gp)
	}
	if ((*temp & 0x02) > 0) {
  8004e4:	e0bffd17 	ldw	r2,-12(fp)
  8004e8:	10800017 	ldw	r2,0(r2)
  8004ec:	1080008c 	andi	r2,r2,2
  8004f0:	10800050 	cmplti	r2,r2,1
  8004f4:	1000031e 	bne	r2,zero,800504 <NSEW_ped_isr+0x84>
		pedestrianEW = 1;
  8004f8:	00800044 	movi	r2,1
  8004fc:	d0a74c15 	stw	r2,-25296(gp)
  800500:	00000106 	br	800508 <NSEW_ped_isr+0x88>
	} else {
		pedestrianEW = 0;
  800504:	d0274c15 	stw	zero,-25296(gp)
	}
	printf("button: %i\n", *temp);
  800508:	e0bffd17 	ldw	r2,-12(fp)
  80050c:	11400017 	ldw	r5,0(r2)
  800510:	01002074 	movhi	r4,129
  800514:	2112f304 	addi	r4,r4,19404
  800518:	08034580 	call	803458 <printf>
}
  80051c:	e037883a 	mov	sp,fp
  800520:	dfc00117 	ldw	ra,4(sp)
  800524:	df000017 	ldw	fp,0(sp)
  800528:	dec00204 	addi	sp,sp,8
  80052c:	f800283a 	ret

00800530 <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  800530:	defffc04 	addi	sp,sp,-16
  800534:	dfc00315 	stw	ra,12(sp)
  800538:	df000215 	stw	fp,8(sp)
  80053c:	df000204 	addi	fp,sp,8
	int buttonValue = 1;
  800540:	00800044 	movi	r2,1
  800544:	e0bfff15 	stw	r2,-4(fp)

	void* context_going_to_be_passed = (void*) &buttonValue; 								// cast before passing to ISR
  800548:	e0bfff04 	addi	r2,fp,-4
  80054c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// clears the edge capture register
  800550:	00804074 	movhi	r2,257
  800554:	10842b04 	addi	r2,r2,4268
  800558:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7); 									// enable interrupts for all buttons
  80055c:	00c04074 	movhi	r3,257
  800560:	18c42a04 	addi	r3,r3,4264
  800564:	008001c4 	movi	r2,7
  800568:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// register the ISR
  80056c:	01000104 	movi	r4,4
  800570:	e17ffe17 	ldw	r5,-8(fp)
  800574:	01802034 	movhi	r6,128
  800578:	31812004 	addi	r6,r6,1152
  80057c:	08108c00 	call	8108c0 <alt_irq_register>
}
  800580:	e037883a 	mov	sp,fp
  800584:	dfc00117 	ldw	ra,4(sp)
  800588:	df000017 	ldw	fp,0(sp)
  80058c:	dec00204 	addi	sp,sp,8
  800590:	f800283a 	ret

00800594 <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  800594:	defffd04 	addi	sp,sp,-12
  800598:	dfc00215 	stw	ra,8(sp)
  80059c:	df000115 	stw	fp,4(sp)
  8005a0:	df000104 	addi	fp,sp,4
  8005a4:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8005a8:	e0bfff17 	ldw	r2,-4(fp)
  8005ac:	10800017 	ldw	r2,0(r2)
  8005b0:	10bfffd8 	cmpnei	r2,r2,-1
  8005b4:	10000e1e 	bne	r2,zero,8005f0 <pedestrian_tlc+0x5c>
		printf("initial state");
  8005b8:	01002074 	movhi	r4,129
  8005bc:	2112f604 	addi	r4,r4,19416
  8005c0:	08034580 	call	803458 <printf>
		init_tlc();
  8005c4:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8005c8:	e0bfff17 	ldw	r2,-4(fp)
  8005cc:	10800017 	ldw	r2,0(r2)
  8005d0:	10c00044 	addi	r3,r2,1
  8005d4:	e0bfff17 	ldw	r2,-4(fp)
  8005d8:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8005dc:	00c04074 	movhi	r3,257
  8005e0:	18c41804 	addi	r3,r3,4192
  8005e4:	00800904 	movi	r2,36
  8005e8:	18800035 	stwio	r2,0(r3)
		return;
  8005ec:	00007b06 	br	8007dc <pedestrian_tlc+0x248>
	}

	if (pedestrianNS == 1) {
  8005f0:	d0a74b17 	ldw	r2,-25300(gp)
  8005f4:	10800058 	cmpnei	r2,r2,1
  8005f8:	1000051e 	bne	r2,zero,800610 <pedestrian_tlc+0x7c>
		printf("pedestrian NS down, state: %d\n", *state);
  8005fc:	e0bfff17 	ldw	r2,-4(fp)
  800600:	11400017 	ldw	r5,0(r2)
  800604:	01002074 	movhi	r4,129
  800608:	2112fa04 	addi	r4,r4,19432
  80060c:	08034580 	call	803458 <printf>
	}
	if (pedestrianEW == 1) {
  800610:	d0a74c17 	ldw	r2,-25296(gp)
  800614:	10800058 	cmpnei	r2,r2,1
  800618:	1000051e 	bne	r2,zero,800630 <pedestrian_tlc+0x9c>
		printf("pedestrian EW down, state: %d\n", *state);
  80061c:	e0bfff17 	ldw	r2,-4(fp)
  800620:	11400017 	ldw	r5,0(r2)
  800624:	01002074 	movhi	r4,129
  800628:	21130204 	addi	r4,r4,19464
  80062c:	08034580 	call	803458 <printf>
	}

	if (tlc_timer_event == 1) {
  800630:	d0a74917 	ldw	r2,-25308(gp)
  800634:	10800058 	cmpnei	r2,r2,1
  800638:	1000641e 	bne	r2,zero,8007cc <pedestrian_tlc+0x238>
		if (*state == 0) { // R, R state
  80063c:	e0bfff17 	ldw	r2,-4(fp)
  800640:	10800017 	ldw	r2,0(r2)
  800644:	1004c03a 	cmpne	r2,r2,zero
  800648:	1000161e 	bne	r2,zero,8006a4 <pedestrian_tlc+0x110>
			if ((pedestrianNS == 1) && (pedestrianNSOld == 0)) {
  80064c:	d0a74b17 	ldw	r2,-25300(gp)
  800650:	10800058 	cmpnei	r2,r2,1
  800654:	10000b1e 	bne	r2,zero,800684 <pedestrian_tlc+0xf0>
  800658:	d0a74d17 	ldw	r2,-25292(gp)
  80065c:	1004c03a 	cmpne	r2,r2,zero
  800660:	1000081e 	bne	r2,zero,800684 <pedestrian_tlc+0xf0>
				*state = 1; // G, R
  800664:	e0ffff17 	ldw	r3,-4(fp)
  800668:	00800044 	movi	r2,1
  80066c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
  800670:	00c04074 	movhi	r3,257
  800674:	18c41804 	addi	r3,r3,4192
  800678:	00801304 	movi	r2,76
  80067c:	18800035 	stwio	r2,0(r3)
		printf("pedestrian EW down, state: %d\n", *state);
	}

	if (tlc_timer_event == 1) {
		if (*state == 0) { // R, R state
			if ((pedestrianNS == 1) && (pedestrianNSOld == 0)) {
  800680:	00004c06 	br	8007b4 <pedestrian_tlc+0x220>
				*state = 1; // G, R
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
			} else {
				*state = 1; // G, R
  800684:	e0ffff17 	ldw	r3,-4(fp)
  800688:	00800044 	movi	r2,1
  80068c:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  800690:	00c04074 	movhi	r3,257
  800694:	18c41804 	addi	r3,r3,4192
  800698:	00800304 	movi	r2,12
  80069c:	18800035 	stwio	r2,0(r3)
  8006a0:	00004406 	br	8007b4 <pedestrian_tlc+0x220>
			}
		} else if (*state == 1) {
  8006a4:	e0bfff17 	ldw	r2,-4(fp)
  8006a8:	10800017 	ldw	r2,0(r2)
  8006ac:	10800058 	cmpnei	r2,r2,1
  8006b0:	1000081e 	bne	r2,zero,8006d4 <pedestrian_tlc+0x140>
			*state = 2; // Y, R
  8006b4:	e0ffff17 	ldw	r3,-4(fp)
  8006b8:	00800084 	movi	r2,2
  8006bc:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  8006c0:	00c04074 	movhi	r3,257
  8006c4:	18c41804 	addi	r3,r3,4192
  8006c8:	00800504 	movi	r2,20
  8006cc:	18800035 	stwio	r2,0(r3)
  8006d0:	00003806 	br	8007b4 <pedestrian_tlc+0x220>
		} else if (*state == 2) {
  8006d4:	e0bfff17 	ldw	r2,-4(fp)
  8006d8:	10800017 	ldw	r2,0(r2)
  8006dc:	10800098 	cmpnei	r2,r2,2
  8006e0:	1000081e 	bne	r2,zero,800704 <pedestrian_tlc+0x170>
			*state = 3; // R, R
  8006e4:	e0ffff17 	ldw	r3,-4(fp)
  8006e8:	008000c4 	movi	r2,3
  8006ec:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8006f0:	00c04074 	movhi	r3,257
  8006f4:	18c41804 	addi	r3,r3,4192
  8006f8:	00800904 	movi	r2,36
  8006fc:	18800035 	stwio	r2,0(r3)
  800700:	00002c06 	br	8007b4 <pedestrian_tlc+0x220>
		} else if (*state == 3) {
  800704:	e0bfff17 	ldw	r2,-4(fp)
  800708:	10800017 	ldw	r2,0(r2)
  80070c:	108000d8 	cmpnei	r2,r2,3
  800710:	1000161e 	bne	r2,zero,80076c <pedestrian_tlc+0x1d8>
			if ((pedestrianEW == 1) && (pedestrianEWOld == 0)) {
  800714:	d0a74c17 	ldw	r2,-25296(gp)
  800718:	10800058 	cmpnei	r2,r2,1
  80071c:	10000b1e 	bne	r2,zero,80074c <pedestrian_tlc+0x1b8>
  800720:	d0a74e17 	ldw	r2,-25288(gp)
  800724:	1004c03a 	cmpne	r2,r2,zero
  800728:	1000081e 	bne	r2,zero,80074c <pedestrian_tlc+0x1b8>
				*state = 4; // R, G, P2
  80072c:	e0ffff17 	ldw	r3,-4(fp)
  800730:	00800104 	movi	r2,4
  800734:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
  800738:	00c04074 	movhi	r3,257
  80073c:	18c41804 	addi	r3,r3,4192
  800740:	00802844 	movi	r2,161
  800744:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
		} else if (*state == 2) {
			*state = 3; // R, R
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		} else if (*state == 3) {
			if ((pedestrianEW == 1) && (pedestrianEWOld == 0)) {
  800748:	00001a06 	br	8007b4 <pedestrian_tlc+0x220>
				*state = 4; // R, G, P2
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
			} else {
				*state = 4; // R, G
  80074c:	e0ffff17 	ldw	r3,-4(fp)
  800750:	00800104 	movi	r2,4
  800754:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800758:	00c04074 	movhi	r3,257
  80075c:	18c41804 	addi	r3,r3,4192
  800760:	00800844 	movi	r2,33
  800764:	18800035 	stwio	r2,0(r3)
  800768:	00001206 	br	8007b4 <pedestrian_tlc+0x220>
			}
		} else if (*state == 4) {
  80076c:	e0bfff17 	ldw	r2,-4(fp)
  800770:	10800017 	ldw	r2,0(r2)
  800774:	10800118 	cmpnei	r2,r2,4
  800778:	1000081e 	bne	r2,zero,80079c <pedestrian_tlc+0x208>
			*state = 5; // R, Y
  80077c:	e0ffff17 	ldw	r3,-4(fp)
  800780:	00800144 	movi	r2,5
  800784:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  800788:	00c04074 	movhi	r3,257
  80078c:	18c41804 	addi	r3,r3,4192
  800790:	00800884 	movi	r2,34
  800794:	18800035 	stwio	r2,0(r3)
  800798:	00000606 	br	8007b4 <pedestrian_tlc+0x220>
		} else {	// this accounts for state 5
			*state = 0; // R, R
  80079c:	e0bfff17 	ldw	r2,-4(fp)
  8007a0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8007a4:	00c04074 	movhi	r3,257
  8007a8:	18c41804 	addi	r3,r3,4192
  8007ac:	00800904 	movi	r2,36
  8007b0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8007b4:	d0274915 	stw	zero,-25308(gp)
		pedestrianNSOld = pedestrianNS;
  8007b8:	d0a74b17 	ldw	r2,-25300(gp)
  8007bc:	d0a74d15 	stw	r2,-25292(gp)
		pedestrianEWOld = pedestrianEW;
  8007c0:	d0a74c17 	ldw	r2,-25296(gp)
  8007c4:	d0a74e15 	stw	r2,-25288(gp)
		return;
  8007c8:	00000406 	br	8007dc <pedestrian_tlc+0x248>
	}
	pedestrianNSOld = pedestrianNS;
  8007cc:	d0a74b17 	ldw	r2,-25300(gp)
  8007d0:	d0a74d15 	stw	r2,-25292(gp)
	pedestrianEWOld = pedestrianEW;
  8007d4:	d0a74c17 	ldw	r2,-25296(gp)
  8007d8:	d0a74e15 	stw	r2,-25288(gp)
}
  8007dc:	e037883a 	mov	sp,fp
  8007e0:	dfc00117 	ldw	ra,4(sp)
  8007e4:	df000017 	ldw	fp,0(sp)
  8007e8:	dec00204 	addi	sp,sp,8
  8007ec:	f800283a 	ret

008007f0 <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  8007f0:	defffd04 	addi	sp,sp,-12
  8007f4:	dfc00215 	stw	ra,8(sp)
  8007f8:	df000115 	stw	fp,4(sp)
  8007fc:	df000104 	addi	fp,sp,4
  800800:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800804:	e0bfff17 	ldw	r2,-4(fp)
  800808:	10800017 	ldw	r2,0(r2)
  80080c:	10bfffd8 	cmpnei	r2,r2,-1
  800810:	10000b1e 	bne	r2,zero,800840 <configurable_tlc+0x50>
		init_tlc();
  800814:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800818:	e0bfff17 	ldw	r2,-4(fp)
  80081c:	10800017 	ldw	r2,0(r2)
  800820:	10c00044 	addi	r3,r2,1
  800824:	e0bfff17 	ldw	r2,-4(fp)
  800828:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  80082c:	00c04074 	movhi	r3,257
  800830:	18c41804 	addi	r3,r3,4192
  800834:	00800904 	movi	r2,36
  800838:	18800035 	stwio	r2,0(r3)
		return;
  80083c:	00001406 	br	800890 <configurable_tlc+0xa0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800840:	00804074 	movhi	r2,257
  800844:	10842404 	addi	r2,r2,4240
  800848:	10800037 	ldwio	r2,0(r2)
  80084c:	d0a74f15 	stw	r2,-25284(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800850:	e0bfff17 	ldw	r2,-4(fp)
  800854:	10800017 	ldw	r2,0(r2)
  800858:	1005003a 	cmpeq	r2,r2,zero
  80085c:	1000041e 	bne	r2,zero,800870 <configurable_tlc+0x80>
  800860:	e0bfff17 	ldw	r2,-4(fp)
  800864:	10800017 	ldw	r2,0(r2)
  800868:	108000d8 	cmpnei	r2,r2,3
  80086c:	1000061e 	bne	r2,zero,800888 <configurable_tlc+0x98>
  800870:	d0a74f17 	ldw	r2,-25284(gp)
  800874:	10800050 	cmplti	r2,r2,1
  800878:	1000031e 	bne	r2,zero,800888 <configurable_tlc+0x98>
		timeout_data_handler();
  80087c:	08008ec0 	call	8008ec <timeout_data_handler>
		newTimeoutValues = 0;
  800880:	d0274f15 	stw	zero,-25284(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800884:	00000206 	br	800890 <configurable_tlc+0xa0>
		timeout_data_handler();
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  800888:	e13fff17 	ldw	r4,-4(fp)
  80088c:	08005940 	call	800594 <pedestrian_tlc>
	}
}
  800890:	e037883a 	mov	sp,fp
  800894:	dfc00117 	ldw	ra,4(sp)
  800898:	df000017 	ldw	fp,0(sp)
  80089c:	dec00204 	addi	sp,sp,8
  8008a0:	f800283a 	ret

008008a4 <config_tlc>:
 * RETURNS:     Returns the state of the configuration phase
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state) {
  8008a4:	defffd04 	addi	sp,sp,-12
  8008a8:	df000215 	stw	fp,8(sp)
  8008ac:	df000204 	addi	fp,sp,8
  8008b0:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  8008b4:	e0bffe17 	ldw	r2,-8(fp)
  8008b8:	10800017 	ldw	r2,0(r2)
  8008bc:	10bfffd8 	cmpnei	r2,r2,-1
  8008c0:	1000031e 	bne	r2,zero,8008d0 <config_tlc+0x2c>
		// Process initialisation state
		state = 0;
  8008c4:	d0275415 	stw	zero,-25264(gp)
		return 0;
  8008c8:	e03fff15 	stw	zero,-4(fp)
  8008cc:	00000206 	br	8008d8 <config_tlc+0x34>
	}

	return state;
  8008d0:	d0a75417 	ldw	r2,-25264(gp)
  8008d4:	e0bfff15 	stw	r2,-4(fp)
  8008d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8008dc:	e037883a 	mov	sp,fp
  8008e0:	df000017 	ldw	fp,0(sp)
  8008e4:	dec00104 	addi	sp,sp,4
  8008e8:	f800283a 	ret

008008ec <timeout_data_handler>:
 * RETURNS:     none
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void) {
  8008ec:	defffc04 	addi	sp,sp,-16
  8008f0:	dfc00315 	stw	ra,12(sp)
  8008f4:	df000215 	stw	fp,8(sp)
  8008f8:	df000204 	addi	fp,sp,8
	fp = fopen(UART_NAME, "rw"); // open up UART with read and write access
  8008fc:	01002074 	movhi	r4,129
  800900:	21130a04 	addi	r4,r4,19496
  800904:	01402074 	movhi	r5,129
  800908:	29530d04 	addi	r5,r5,19508
  80090c:	08017d40 	call	8017d4 <fopen>
  800910:	d0a75715 	stw	r2,-25252(gp)
	if (fp != NULL) {// check if the UART is open successfully
  800914:	d0a75717 	ldw	r2,-25252(gp)
  800918:	1005003a 	cmpeq	r2,r2,zero
  80091c:	10003e1e 	bne	r2,zero,800a18 <timeout_data_handler+0x12c>
		int k = 0;
  800920:	e03fff15 	stw	zero,-4(fp)
  800924:	00000006 	br	800928 <timeout_data_handler+0x3c>
		while(1) {
			c = fgetc(fp);
  800928:	d1275717 	ldw	r4,-25252(gp)
  80092c:	08012f80 	call	8012f8 <fgetc>
  800930:	d0a75515 	stw	r2,-25260(gp)
			if (c== '\n') {
  800934:	d0a75517 	ldw	r2,-25260(gp)
  800938:	108002a0 	cmpeqi	r2,r2,10
  80093c:	1000341e 	bne	r2,zero,800a10 <timeout_data_handler+0x124>
				break;
			}
			if (c == '\r') {
  800940:	d0a75517 	ldw	r2,-25260(gp)
  800944:	10800360 	cmpeqi	r2,r2,13
  800948:	1000311e 	bne	r2,zero,800a10 <timeout_data_handler+0x124>
				break;
			}
			if (c == ',') {
  80094c:	d0a75517 	ldw	r2,-25260(gp)
  800950:	10800b18 	cmpnei	r2,r2,44
  800954:	1000241e 	bne	r2,zero,8009e8 <timeout_data_handler+0xfc>
				sscanf(chararray, "%d", &timeoutValue);
  800958:	d1200004 	addi	r4,gp,-32768
  80095c:	01402074 	movhi	r5,129
  800960:	29530e04 	addi	r5,r5,19512
  800964:	d1a75604 	addi	r6,gp,-25256
  800968:	0803f8c0 	call	803f8c <sscanf>
				tempBuffer[valueCount] = timeoutValue;
  80096c:	d0e75117 	ldw	r3,-25276(gp)
  800970:	d0a75617 	ldw	r2,-25256(gp)
  800974:	100b883a 	mov	r5,r2
  800978:	01002074 	movhi	r4,129
  80097c:	2114cf04 	addi	r4,r4,21308
  800980:	18c5883a 	add	r2,r3,r3
  800984:	1085883a 	add	r2,r2,r2
  800988:	1105883a 	add	r2,r2,r4
  80098c:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  800990:	00800c04 	movi	r2,48
  800994:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  800998:	00c02074 	movhi	r3,129
  80099c:	18dbe344 	addi	r3,r3,28557
  8009a0:	00800c04 	movi	r2,48
  8009a4:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  8009a8:	00c02074 	movhi	r3,129
  8009ac:	18dbe384 	addi	r3,r3,28558
  8009b0:	00800c04 	movi	r2,48
  8009b4:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  8009b8:	00c02074 	movhi	r3,129
  8009bc:	18dbe3c4 	addi	r3,r3,28559
  8009c0:	00800c04 	movi	r2,48
  8009c4:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  8009c8:	00802074 	movhi	r2,129
  8009cc:	109be404 	addi	r2,r2,28560
  8009d0:	10000005 	stb	zero,0(r2)
				k = 0;
  8009d4:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  8009d8:	d0a75117 	ldw	r2,-25276(gp)
  8009dc:	10800044 	addi	r2,r2,1
  8009e0:	d0a75115 	stw	r2,-25276(gp)
  8009e4:	003fd006 	br	800928 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  8009e8:	e13fff17 	ldw	r4,-4(fp)
  8009ec:	d0a75517 	ldw	r2,-25260(gp)
  8009f0:	1007883a 	mov	r3,r2
  8009f4:	d0a00004 	addi	r2,gp,-32768
  8009f8:	2085883a 	add	r2,r4,r2
  8009fc:	10c00005 	stb	r3,0(r2)
				k += 1;
  800a00:	e0bfff17 	ldw	r2,-4(fp)
  800a04:	10800044 	addi	r2,r2,1
  800a08:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  800a0c:	003fc606 	br	800928 <timeout_data_handler+0x3c>
		fclose(fp); // remember to close the file
  800a10:	d1275717 	ldw	r4,-25252(gp)
  800a14:	08010b40 	call	8010b4 <fclose>
	}
	if (valueCount == 6) {
  800a18:	d0a75117 	ldw	r2,-25276(gp)
  800a1c:	10800198 	cmpnei	r2,r2,6
  800a20:	1000161e 	bne	r2,zero,800a7c <timeout_data_handler+0x190>
		int j;
		for (j=0; j<6; j++) {
  800a24:	e03ffe15 	stw	zero,-8(fp)
  800a28:	00001106 	br	800a70 <timeout_data_handler+0x184>
			timeout[j]=tempBuffer[j];
  800a2c:	e17ffe17 	ldw	r5,-8(fp)
  800a30:	e0bffe17 	ldw	r2,-8(fp)
  800a34:	00c02074 	movhi	r3,129
  800a38:	18d4cf04 	addi	r3,r3,21308
  800a3c:	1085883a 	add	r2,r2,r2
  800a40:	1085883a 	add	r2,r2,r2
  800a44:	10c5883a 	add	r2,r2,r3
  800a48:	11000017 	ldw	r4,0(r2)
  800a4c:	00c02074 	movhi	r3,129
  800a50:	18d4c204 	addi	r3,r3,21256
  800a54:	2945883a 	add	r2,r5,r5
  800a58:	1085883a 	add	r2,r2,r2
  800a5c:	10c5883a 	add	r2,r2,r3
  800a60:	11000015 	stw	r4,0(r2)
		}
		fclose(fp); // remember to close the file
	}
	if (valueCount == 6) {
		int j;
		for (j=0; j<6; j++) {
  800a64:	e0bffe17 	ldw	r2,-8(fp)
  800a68:	10800044 	addi	r2,r2,1
  800a6c:	e0bffe15 	stw	r2,-8(fp)
  800a70:	e0bffe17 	ldw	r2,-8(fp)
  800a74:	10800190 	cmplti	r2,r2,6
  800a78:	103fec1e 	bne	r2,zero,800a2c <timeout_data_handler+0x140>
			timeout[j]=tempBuffer[j];
		}
	}
	valueCount = 0;
  800a7c:	d0275115 	stw	zero,-25276(gp)
}
  800a80:	e037883a 	mov	sp,fp
  800a84:	dfc00117 	ldw	ra,4(sp)
  800a88:	df000017 	ldw	fp,0(sp)
  800a8c:	dec00204 	addi	sp,sp,8
  800a90:	f800283a 	ret

00800a94 <buffer_timeout>:
/* DESCRIPTION: Stores the new timeout values in a secondary buffer for atomic
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(int value) {
  800a94:	defffe04 	addi	sp,sp,-8
  800a98:	df000115 	stw	fp,4(sp)
  800a9c:	df000104 	addi	fp,sp,4
  800aa0:	e13fff15 	stw	r4,-4(fp)

}
  800aa4:	e037883a 	mov	sp,fp
  800aa8:	df000017 	ldw	fp,0(sp)
  800aac:	dec00104 	addi	sp,sp,4
  800ab0:	f800283a 	ret

00800ab4 <update_timeout>:
 *              section by ensuring that timeouts are fully received before
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void) {
  800ab4:	deffff04 	addi	sp,sp,-4
  800ab8:	df000015 	stw	fp,0(sp)
  800abc:	d839883a 	mov	fp,sp

	return 0;
  800ac0:	0005883a 	mov	r2,zero
}
  800ac4:	e037883a 	mov	sp,fp
  800ac8:	df000017 	ldw	fp,0(sp)
  800acc:	dec00104 	addi	sp,sp,4
  800ad0:	f800283a 	ret

00800ad4 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800ad4:	defff804 	addi	sp,sp,-32
  800ad8:	dfc00715 	stw	ra,28(sp)
  800adc:	df000615 	stw	fp,24(sp)
  800ae0:	df000604 	addi	fp,sp,24
  800ae4:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800ae8:	e0bffe17 	ldw	r2,-8(fp)
  800aec:	e0bffa15 	stw	r2,-24(fp)
	(*trigger)++;
  800af0:	e0bffa17 	ldw	r2,-24(fp)
  800af4:	10800017 	ldw	r2,0(r2)
  800af8:	10c00044 	addi	r3,r2,1
  800afc:	e0bffa17 	ldw	r2,-24(fp)
  800b00:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {
  800b04:	e0bffa17 	ldw	r2,-24(fp)
  800b08:	10800017 	ldw	r2,0(r2)
  800b0c:	1081f418 	cmpnei	r2,r2,2000
  800b10:	1000051e 	bne	r2,zero,800b28 <camera_timer_isr+0x54>
		printToUART("Snapshot Taken");
  800b14:	01002074 	movhi	r4,129
  800b18:	21130f04 	addi	r4,r4,19516
  800b1c:	0800ca40 	call	800ca4 <printToUART>
		return 0;
  800b20:	e03fff15 	stw	zero,-4(fp)
  800b24:	00001306 	br	800b74 <camera_timer_isr+0xa0>
	}
	if (vehicle_detected != 2) {
  800b28:	d0a75017 	ldw	r2,-25280(gp)
  800b2c:	108000a0 	cmpeqi	r2,r2,2
  800b30:	10000e1e 	bne	r2,zero,800b6c <camera_timer_isr+0x98>
		char countString[10];
		sprintf(countString, "%d", *trigger);
  800b34:	e0bffa17 	ldw	r2,-24(fp)
  800b38:	11800017 	ldw	r6,0(r2)
  800b3c:	e13ffb04 	addi	r4,fp,-20
  800b40:	01402074 	movhi	r5,129
  800b44:	29530e04 	addi	r5,r5,19512
  800b48:	0803e280 	call	803e28 <sprintf>
		printToUART("Vehicle left at: ");
  800b4c:	01002074 	movhi	r4,129
  800b50:	21131304 	addi	r4,r4,19532
  800b54:	0800ca40 	call	800ca4 <printToUART>
		printToUART(countString);
  800b58:	e13ffb04 	addi	r4,fp,-20
  800b5c:	0800ca40 	call	800ca4 <printToUART>
		vehicle_detected = 0;
  800b60:	d0275015 	stw	zero,-25280(gp)
		return 0;
  800b64:	e03fff15 	stw	zero,-4(fp)
  800b68:	00000206 	br	800b74 <camera_timer_isr+0xa0>
	}
	return 1;
  800b6c:	00800044 	movi	r2,1
  800b70:	e0bfff15 	stw	r2,-4(fp)
  800b74:	e0bfff17 	ldw	r2,-4(fp)
}
  800b78:	e037883a 	mov	sp,fp
  800b7c:	dfc00117 	ldw	ra,4(sp)
  800b80:	df000017 	ldw	fp,0(sp)
  800b84:	dec00204 	addi	sp,sp,8
  800b88:	f800283a 	ret

00800b8c <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800b8c:	defffc04 	addi	sp,sp,-16
  800b90:	dfc00315 	stw	ra,12(sp)
  800b94:	df000215 	stw	fp,8(sp)
  800b98:	df000204 	addi	fp,sp,8
  800b9c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800ba0:	e0bfff17 	ldw	r2,-4(fp)
  800ba4:	10800017 	ldw	r2,0(r2)
  800ba8:	10bfffd8 	cmpnei	r2,r2,-1
  800bac:	10000b1e 	bne	r2,zero,800bdc <camera_tlc+0x50>
		init_tlc();
  800bb0:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800bb4:	e0bfff17 	ldw	r2,-4(fp)
  800bb8:	10800017 	ldw	r2,0(r2)
  800bbc:	10c00044 	addi	r3,r2,1
  800bc0:	e0bfff17 	ldw	r2,-4(fp)
  800bc4:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800bc8:	00c04074 	movhi	r3,257
  800bcc:	18c41804 	addi	r3,r3,4192
  800bd0:	00800904 	movi	r2,36
  800bd4:	18800035 	stwio	r2,0(r3)
		return;
  800bd8:	00002d06 	br	800c90 <camera_tlc+0x104>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800bdc:	00804074 	movhi	r2,257
  800be0:	10842404 	addi	r2,r2,4240
  800be4:	10800037 	ldwio	r2,0(r2)
  800be8:	d0a74f15 	stw	r2,-25284(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800bec:	e0bfff17 	ldw	r2,-4(fp)
  800bf0:	10800017 	ldw	r2,0(r2)
  800bf4:	1005003a 	cmpeq	r2,r2,zero
  800bf8:	1000041e 	bne	r2,zero,800c0c <camera_tlc+0x80>
  800bfc:	e0bfff17 	ldw	r2,-4(fp)
  800c00:	10800017 	ldw	r2,0(r2)
  800c04:	108000d8 	cmpnei	r2,r2,3
  800c08:	1000061e 	bne	r2,zero,800c24 <camera_tlc+0x98>
  800c0c:	d0a74f17 	ldw	r2,-25284(gp)
  800c10:	10800050 	cmplti	r2,r2,1
  800c14:	1000031e 	bne	r2,zero,800c24 <camera_tlc+0x98>
		timeout_data_handler();
  800c18:	08008ec0 	call	8008ec <timeout_data_handler>
		newTimeoutValues = 0;
  800c1c:	d0274f15 	stw	zero,-25284(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800c20:	00000206 	br	800c2c <camera_tlc+0xa0>
		timeout_data_handler();
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  800c24:	e13fff17 	ldw	r4,-4(fp)
  800c28:	08005940 	call	800594 <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { // One light yellow and vehicle enters
  800c2c:	e0bfff17 	ldw	r2,-4(fp)
  800c30:	10800017 	ldw	r2,0(r2)
  800c34:	108000a0 	cmpeqi	r2,r2,2
  800c38:	1000041e 	bne	r2,zero,800c4c <camera_tlc+0xc0>
  800c3c:	e0bfff17 	ldw	r2,-4(fp)
  800c40:	10800017 	ldw	r2,0(r2)
  800c44:	10800158 	cmpnei	r2,r2,5
  800c48:	1000111e 	bne	r2,zero,800c90 <camera_tlc+0x104>
  800c4c:	d0a75017 	ldw	r2,-25280(gp)
  800c50:	10800058 	cmpnei	r2,r2,1
  800c54:	10000e1e 	bne	r2,zero,800c90 <camera_tlc+0x104>
		printToUART("Camera Activated");
  800c58:	01002074 	movhi	r4,129
  800c5c:	21131804 	addi	r4,r4,19552
  800c60:	0800ca40 	call	800ca4 <printToUART>
		vehicle_detected = 2;
  800c64:	00800084 	movi	r2,2
  800c68:	d0a75015 	stw	r2,-25280(gp)
		void* cameraContext = (void*) camera_count;
  800c6c:	d0a75317 	ldw	r2,-25268(gp)
  800c70:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800c74:	010020b4 	movhi	r4,130
  800c78:	21234e04 	addi	r4,r4,-29384
  800c7c:	01400044 	movi	r5,1
  800c80:	01802034 	movhi	r6,128
  800c84:	3182b504 	addi	r6,r6,2772
  800c88:	e1fffe17 	ldw	r7,-8(fp)
  800c8c:	08104b00 	call	8104b0 <alt_alarm_start>
	}
}
  800c90:	e037883a 	mov	sp,fp
  800c94:	dfc00117 	ldw	ra,4(sp)
  800c98:	df000017 	ldw	fp,0(sp)
  800c9c:	dec00204 	addi	sp,sp,8
  800ca0:	f800283a 	ret

00800ca4 <printToUART>:

void printToUART(char* stringToPrint) {
  800ca4:	defffd04 	addi	sp,sp,-12
  800ca8:	dfc00215 	stw	ra,8(sp)
  800cac:	df000115 	stw	fp,4(sp)
  800cb0:	df000104 	addi	fp,sp,4
  800cb4:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800cb8:	01002074 	movhi	r4,129
  800cbc:	21130a04 	addi	r4,r4,19496
  800cc0:	01402074 	movhi	r5,129
  800cc4:	29531d04 	addi	r5,r5,19572
  800cc8:	08017d40 	call	8017d4 <fopen>
  800ccc:	d0a75715 	stw	r2,-25252(gp)
	if (fp != NULL) {
  800cd0:	d0a75717 	ldw	r2,-25252(gp)
  800cd4:	1005003a 	cmpeq	r2,r2,zero
  800cd8:	1000051e 	bne	r2,zero,800cf0 <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800cdc:	d1675717 	ldw	r5,-25252(gp)
  800ce0:	e13fff17 	ldw	r4,-4(fp)
  800ce4:	08018c40 	call	8018c4 <fputs>
		fclose(fp);
  800ce8:	d1275717 	ldw	r4,-25252(gp)
  800cec:	08010b40 	call	8010b4 <fclose>
	}
}
  800cf0:	e037883a 	mov	sp,fp
  800cf4:	dfc00117 	ldw	ra,4(sp)
  800cf8:	df000017 	ldw	fp,0(sp)
  800cfc:	dec00204 	addi	sp,sp,8
  800d00:	f800283a 	ret

00800d04 <handle_vehicle_button>:

/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button() {
  800d04:	deffff04 	addi	sp,sp,-4
  800d08:	df000015 	stw	fp,0(sp)
  800d0c:	d839883a 	mov	fp,sp
	if (vehicle_detected == 0) {
  800d10:	d0a75017 	ldw	r2,-25280(gp)
  800d14:	1004c03a 	cmpne	r2,r2,zero
  800d18:	1000031e 	bne	r2,zero,800d28 <handle_vehicle_button+0x24>
		vehicle_detected = 1; // If vehicle absent, button press means vehicle has entered intersection
  800d1c:	00800044 	movi	r2,1
  800d20:	d0a75015 	stw	r2,-25280(gp)
  800d24:	00000206 	br	800d30 <handle_vehicle_button+0x2c>
	} else {
		vehicle_detected = 3; // If at any other time, button press means vehicle has left intersection
  800d28:	008000c4 	movi	r2,3
  800d2c:	d0a75015 	stw	r2,-25280(gp)
	}
}
  800d30:	e037883a 	mov	sp,fp
  800d34:	df000017 	ldw	fp,0(sp)
  800d38:	dec00104 	addi	sp,sp,4
  800d3c:	f800283a 	ret

00800d40 <main>:

int main(void) {
  800d40:	defffc04 	addi	sp,sp,-16
  800d44:	dfc00315 	stw	ra,12(sp)
  800d48:	df000215 	stw	fp,8(sp)
  800d4c:	df000204 	addi	fp,sp,8
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800d50:	01002074 	movhi	r4,129
  800d54:	21131e04 	addi	r4,r4,19576
  800d58:	01402074 	movhi	r5,129
  800d5c:	29531d04 	addi	r5,r5,19572
  800d60:	08017d40 	call	8017d4 <fopen>
  800d64:	e0bffe15 	stw	r2,-8(fp)

	printf("Hello\n");
  800d68:	01002074 	movhi	r4,129
  800d6c:	21132104 	addi	r4,r4,19588
  800d70:	08035700 	call	803570 <puts>

	init_buttons_pio();			// initialise buttons
  800d74:	08005300 	call	800530 <init_buttons_pio>
  800d78:	00000006 	br	800d7c <main+0x3c>

	while (1) {
		if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x04) == 0) { // KEY 2
  800d7c:	00804074 	movhi	r2,257
  800d80:	10842804 	addi	r2,r2,4256
  800d84:	10800037 	ldwio	r2,0(r2)
  800d88:	1080010c 	andi	r2,r2,4
  800d8c:	1004c03a 	cmpne	r2,r2,zero
  800d90:	1000011e 	bne	r2,zero,800d98 <main+0x58>
			handle_vehicle_button();
  800d94:	0800d040 	call	800d04 <handle_vehicle_button>
		}

		if ((proc_state[mode] == -1) || (proc_state[mode] == 0) || (proc_state[mode] == 3)) {
  800d98:	d0a75217 	ldw	r2,-25272(gp)
  800d9c:	00c02074 	movhi	r3,129
  800da0:	18d4d504 	addi	r3,r3,21332
  800da4:	1085883a 	add	r2,r2,r2
  800da8:	1085883a 	add	r2,r2,r2
  800dac:	10c5883a 	add	r2,r2,r3
  800db0:	10800017 	ldw	r2,0(r2)
  800db4:	10bfffe0 	cmpeqi	r2,r2,-1
  800db8:	1000121e 	bne	r2,zero,800e04 <main+0xc4>
  800dbc:	d0a75217 	ldw	r2,-25272(gp)
  800dc0:	00c02074 	movhi	r3,129
  800dc4:	18d4d504 	addi	r3,r3,21332
  800dc8:	1085883a 	add	r2,r2,r2
  800dcc:	1085883a 	add	r2,r2,r2
  800dd0:	10c5883a 	add	r2,r2,r3
  800dd4:	10800017 	ldw	r2,0(r2)
  800dd8:	1005003a 	cmpeq	r2,r2,zero
  800ddc:	1000091e 	bne	r2,zero,800e04 <main+0xc4>
  800de0:	d0a75217 	ldw	r2,-25272(gp)
  800de4:	00c02074 	movhi	r3,129
  800de8:	18d4d504 	addi	r3,r3,21332
  800dec:	1085883a 	add	r2,r2,r2
  800df0:	1085883a 	add	r2,r2,r2
  800df4:	10c5883a 	add	r2,r2,r3
  800df8:	10800017 	ldw	r2,0(r2)
  800dfc:	108000d8 	cmpnei	r2,r2,3
  800e00:	10002f1e 	bne	r2,zero,800ec0 <main+0x180>
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 0) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 4)) {
  800e04:	00804074 	movhi	r2,257
  800e08:	10842404 	addi	r2,r2,4240
  800e0c:	10800037 	ldwio	r2,0(r2)
  800e10:	1005003a 	cmpeq	r2,r2,zero
  800e14:	1000051e 	bne	r2,zero,800e2c <main+0xec>
  800e18:	00804074 	movhi	r2,257
  800e1c:	10842404 	addi	r2,r2,4240
  800e20:	10800037 	ldwio	r2,0(r2)
  800e24:	10800118 	cmpnei	r2,r2,4
  800e28:	1000011e 	bne	r2,zero,800e30 <main+0xf0>
				mode = 0;
  800e2c:	d0275215 	stw	zero,-25272(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 1) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 5)) {
  800e30:	00804074 	movhi	r2,257
  800e34:	10842404 	addi	r2,r2,4240
  800e38:	10800037 	ldwio	r2,0(r2)
  800e3c:	10800060 	cmpeqi	r2,r2,1
  800e40:	1000051e 	bne	r2,zero,800e58 <main+0x118>
  800e44:	00804074 	movhi	r2,257
  800e48:	10842404 	addi	r2,r2,4240
  800e4c:	10800037 	ldwio	r2,0(r2)
  800e50:	10800158 	cmpnei	r2,r2,5
  800e54:	1000021e 	bne	r2,zero,800e60 <main+0x120>
				mode = 1;
  800e58:	00800044 	movi	r2,1
  800e5c:	d0a75215 	stw	r2,-25272(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 2) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 6)) {
  800e60:	00804074 	movhi	r2,257
  800e64:	10842404 	addi	r2,r2,4240
  800e68:	10800037 	ldwio	r2,0(r2)
  800e6c:	108000a0 	cmpeqi	r2,r2,2
  800e70:	1000051e 	bne	r2,zero,800e88 <main+0x148>
  800e74:	00804074 	movhi	r2,257
  800e78:	10842404 	addi	r2,r2,4240
  800e7c:	10800037 	ldwio	r2,0(r2)
  800e80:	10800198 	cmpnei	r2,r2,6
  800e84:	1000021e 	bne	r2,zero,800e90 <main+0x150>
				mode = 2;
  800e88:	00800084 	movi	r2,2
  800e8c:	d0a75215 	stw	r2,-25272(gp)
			}
			if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 3) || (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) == 7)) {
  800e90:	00804074 	movhi	r2,257
  800e94:	10842404 	addi	r2,r2,4240
  800e98:	10800037 	ldwio	r2,0(r2)
  800e9c:	108000e0 	cmpeqi	r2,r2,3
  800ea0:	1000051e 	bne	r2,zero,800eb8 <main+0x178>
  800ea4:	00804074 	movhi	r2,257
  800ea8:	10842404 	addi	r2,r2,4240
  800eac:	10800037 	ldwio	r2,0(r2)
  800eb0:	108001d8 	cmpnei	r2,r2,7
  800eb4:	1000021e 	bne	r2,zero,800ec0 <main+0x180>
				mode = 3;
  800eb8:	008000c4 	movi	r2,3
  800ebc:	d0a75215 	stw	r2,-25272(gp)
			}
		}

    	if(lcd != NULL) {
  800ec0:	e0bffe17 	ldw	r2,-8(fp)
  800ec4:	1005003a 	cmpeq	r2,r2,zero
  800ec8:	1000171e 	bne	r2,zero,800f28 <main+0x1e8>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800ecc:	e13ffe17 	ldw	r4,-8(fp)
  800ed0:	01402074 	movhi	r5,129
  800ed4:	29532304 	addi	r5,r5,19596
  800ed8:	018006c4 	movi	r6,27
  800edc:	01c02074 	movhi	r7,129
  800ee0:	39d32504 	addi	r7,r7,19604
  800ee4:	08017f00 	call	8017f0 <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  800ee8:	d1a75217 	ldw	r6,-25272(gp)
  800eec:	e13ffe17 	ldw	r4,-8(fp)
  800ef0:	01402074 	movhi	r5,129
  800ef4:	29532604 	addi	r5,r5,19608
  800ef8:	08017f00 	call	8017f0 <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  800efc:	d0a75217 	ldw	r2,-25272(gp)
  800f00:	00c02074 	movhi	r3,129
  800f04:	18d4d504 	addi	r3,r3,21332
  800f08:	1085883a 	add	r2,r2,r2
  800f0c:	1085883a 	add	r2,r2,r2
  800f10:	10c5883a 	add	r2,r2,r3
  800f14:	11800017 	ldw	r6,0(r2)
  800f18:	e13ffe17 	ldw	r4,-8(fp)
  800f1c:	01402074 	movhi	r5,129
  800f20:	29532904 	addi	r5,r5,19620
  800f24:	08017f00 	call	8017f0 <fprintf>
    	}

		// Execute the correct TLC
    	switch (mode) {
  800f28:	d0a75217 	ldw	r2,-25272(gp)
  800f2c:	e0bfff15 	stw	r2,-4(fp)
  800f30:	e0ffff17 	ldw	r3,-4(fp)
  800f34:	18800060 	cmpeqi	r2,r3,1
  800f38:	10000e1e 	bne	r2,zero,800f74 <main+0x234>
  800f3c:	e0ffff17 	ldw	r3,-4(fp)
  800f40:	18800070 	cmpltui	r2,r3,1
  800f44:	1000071e 	bne	r2,zero,800f64 <main+0x224>
  800f48:	e0ffff17 	ldw	r3,-4(fp)
  800f4c:	188000a0 	cmpeqi	r2,r3,2
  800f50:	10000c1e 	bne	r2,zero,800f84 <main+0x244>
  800f54:	e0ffff17 	ldw	r3,-4(fp)
  800f58:	188000e0 	cmpeqi	r2,r3,3
  800f5c:	10000d1e 	bne	r2,zero,800f94 <main+0x254>
  800f60:	003f8606 	br	800d7c <main+0x3c>
			case 0:
				simple_tlc(&proc_state[0]);
  800f64:	01002074 	movhi	r4,129
  800f68:	2114d504 	addi	r4,r4,21332
  800f6c:	08002500 	call	800250 <simple_tlc>
				break;
  800f70:	003f8206 	br	800d7c <main+0x3c>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  800f74:	01002074 	movhi	r4,129
  800f78:	2114d604 	addi	r4,r4,21336
  800f7c:	08005940 	call	800594 <pedestrian_tlc>
				break;
  800f80:	003f7e06 	br	800d7c <main+0x3c>
			case 2:
				configurable_tlc(&proc_state[2]);
  800f84:	01002074 	movhi	r4,129
  800f88:	2114d704 	addi	r4,r4,21340
  800f8c:	08007f00 	call	8007f0 <configurable_tlc>
				break;
  800f90:	003f7a06 	br	800d7c <main+0x3c>
			case 3:
				camera_tlc(&proc_state[3]);
  800f94:	01002074 	movhi	r4,129
  800f98:	2114d804 	addi	r4,r4,21344
  800f9c:	0800b8c0 	call	800b8c <camera_tlc>
				break;
		}
	}
  800fa0:	003f7606 	br	800d7c <main+0x3c>

00800fa4 <_fclose_r>:
  800fa4:	defffc04 	addi	sp,sp,-16
  800fa8:	dc400115 	stw	r17,4(sp)
  800fac:	dc000015 	stw	r16,0(sp)
  800fb0:	dfc00315 	stw	ra,12(sp)
  800fb4:	dc800215 	stw	r18,8(sp)
  800fb8:	2821883a 	mov	r16,r5
  800fbc:	2023883a 	mov	r17,r4
  800fc0:	28002926 	beq	r5,zero,801068 <_fclose_r+0xc4>
  800fc4:	08014780 	call	801478 <__sfp_lock_acquire>
  800fc8:	88000226 	beq	r17,zero,800fd4 <_fclose_r+0x30>
  800fcc:	88800e17 	ldw	r2,56(r17)
  800fd0:	10002d26 	beq	r2,zero,801088 <_fclose_r+0xe4>
  800fd4:	8080030f 	ldh	r2,12(r16)
  800fd8:	10002226 	beq	r2,zero,801064 <_fclose_r+0xc0>
  800fdc:	8809883a 	mov	r4,r17
  800fe0:	800b883a 	mov	r5,r16
  800fe4:	08010c80 	call	8010c8 <_fflush_r>
  800fe8:	1025883a 	mov	r18,r2
  800fec:	80800b17 	ldw	r2,44(r16)
  800ff0:	10000426 	beq	r2,zero,801004 <_fclose_r+0x60>
  800ff4:	81400717 	ldw	r5,28(r16)
  800ff8:	8809883a 	mov	r4,r17
  800ffc:	103ee83a 	callr	r2
  801000:	10002a16 	blt	r2,zero,8010ac <_fclose_r+0x108>
  801004:	8080030b 	ldhu	r2,12(r16)
  801008:	1080200c 	andi	r2,r2,128
  80100c:	1000231e 	bne	r2,zero,80109c <_fclose_r+0xf8>
  801010:	81400c17 	ldw	r5,48(r16)
  801014:	28000526 	beq	r5,zero,80102c <_fclose_r+0x88>
  801018:	80801004 	addi	r2,r16,64
  80101c:	28800226 	beq	r5,r2,801028 <_fclose_r+0x84>
  801020:	8809883a 	mov	r4,r17
  801024:	0801a0c0 	call	801a0c <_free_r>
  801028:	80000c15 	stw	zero,48(r16)
  80102c:	81401117 	ldw	r5,68(r16)
  801030:	28000326 	beq	r5,zero,801040 <_fclose_r+0x9c>
  801034:	8809883a 	mov	r4,r17
  801038:	0801a0c0 	call	801a0c <_free_r>
  80103c:	80001115 	stw	zero,68(r16)
  801040:	8000030d 	sth	zero,12(r16)
  801044:	080147c0 	call	80147c <__sfp_lock_release>
  801048:	9005883a 	mov	r2,r18
  80104c:	dfc00317 	ldw	ra,12(sp)
  801050:	dc800217 	ldw	r18,8(sp)
  801054:	dc400117 	ldw	r17,4(sp)
  801058:	dc000017 	ldw	r16,0(sp)
  80105c:	dec00404 	addi	sp,sp,16
  801060:	f800283a 	ret
  801064:	080147c0 	call	80147c <__sfp_lock_release>
  801068:	0025883a 	mov	r18,zero
  80106c:	9005883a 	mov	r2,r18
  801070:	dfc00317 	ldw	ra,12(sp)
  801074:	dc800217 	ldw	r18,8(sp)
  801078:	dc400117 	ldw	r17,4(sp)
  80107c:	dc000017 	ldw	r16,0(sp)
  801080:	dec00404 	addi	sp,sp,16
  801084:	f800283a 	ret
  801088:	8809883a 	mov	r4,r17
  80108c:	08014880 	call	801488 <__sinit>
  801090:	8080030f 	ldh	r2,12(r16)
  801094:	103fd11e 	bne	r2,zero,800fdc <_fclose_r+0x38>
  801098:	003ff206 	br	801064 <_fclose_r+0xc0>
  80109c:	81400417 	ldw	r5,16(r16)
  8010a0:	8809883a 	mov	r4,r17
  8010a4:	0801a0c0 	call	801a0c <_free_r>
  8010a8:	003fd906 	br	801010 <_fclose_r+0x6c>
  8010ac:	04bfffc4 	movi	r18,-1
  8010b0:	003fd406 	br	801004 <_fclose_r+0x60>

008010b4 <fclose>:
  8010b4:	00802074 	movhi	r2,129
  8010b8:	109be504 	addi	r2,r2,28564
  8010bc:	200b883a 	mov	r5,r4
  8010c0:	11000017 	ldw	r4,0(r2)
  8010c4:	0800fa41 	jmpi	800fa4 <_fclose_r>

008010c8 <_fflush_r>:
  8010c8:	defffb04 	addi	sp,sp,-20
  8010cc:	dcc00315 	stw	r19,12(sp)
  8010d0:	dc800215 	stw	r18,8(sp)
  8010d4:	dfc00415 	stw	ra,16(sp)
  8010d8:	dc400115 	stw	r17,4(sp)
  8010dc:	dc000015 	stw	r16,0(sp)
  8010e0:	2027883a 	mov	r19,r4
  8010e4:	2825883a 	mov	r18,r5
  8010e8:	20000226 	beq	r4,zero,8010f4 <_fflush_r+0x2c>
  8010ec:	20800e17 	ldw	r2,56(r4)
  8010f0:	10005626 	beq	r2,zero,80124c <_fflush_r+0x184>
  8010f4:	9100030b 	ldhu	r4,12(r18)
  8010f8:	20ffffcc 	andi	r3,r4,65535
  8010fc:	18e0001c 	xori	r3,r3,32768
  801100:	18e00004 	addi	r3,r3,-32768
  801104:	1880020c 	andi	r2,r3,8
  801108:	1000261e 	bne	r2,zero,8011a4 <_fflush_r+0xdc>
  80110c:	90c00117 	ldw	r3,4(r18)
  801110:	20820014 	ori	r2,r4,2048
  801114:	9080030d 	sth	r2,12(r18)
  801118:	1009883a 	mov	r4,r2
  80111c:	00c0400e 	bge	zero,r3,801220 <_fflush_r+0x158>
  801120:	92000a17 	ldw	r8,40(r18)
  801124:	40004026 	beq	r8,zero,801228 <_fflush_r+0x160>
  801128:	2084000c 	andi	r2,r4,4096
  80112c:	10005326 	beq	r2,zero,80127c <_fflush_r+0x1b4>
  801130:	94001417 	ldw	r16,80(r18)
  801134:	9080030b 	ldhu	r2,12(r18)
  801138:	1080010c 	andi	r2,r2,4
  80113c:	1000481e 	bne	r2,zero,801260 <_fflush_r+0x198>
  801140:	91400717 	ldw	r5,28(r18)
  801144:	9809883a 	mov	r4,r19
  801148:	800d883a 	mov	r6,r16
  80114c:	000f883a 	mov	r7,zero
  801150:	403ee83a 	callr	r8
  801154:	8080261e 	bne	r16,r2,8011f0 <_fflush_r+0x128>
  801158:	9080030b 	ldhu	r2,12(r18)
  80115c:	91000417 	ldw	r4,16(r18)
  801160:	90000115 	stw	zero,4(r18)
  801164:	10bdffcc 	andi	r2,r2,63487
  801168:	10ffffcc 	andi	r3,r2,65535
  80116c:	18c4000c 	andi	r3,r3,4096
  801170:	9080030d 	sth	r2,12(r18)
  801174:	91000015 	stw	r4,0(r18)
  801178:	18002b26 	beq	r3,zero,801228 <_fflush_r+0x160>
  80117c:	0007883a 	mov	r3,zero
  801180:	1805883a 	mov	r2,r3
  801184:	94001415 	stw	r16,80(r18)
  801188:	dfc00417 	ldw	ra,16(sp)
  80118c:	dcc00317 	ldw	r19,12(sp)
  801190:	dc800217 	ldw	r18,8(sp)
  801194:	dc400117 	ldw	r17,4(sp)
  801198:	dc000017 	ldw	r16,0(sp)
  80119c:	dec00504 	addi	sp,sp,20
  8011a0:	f800283a 	ret
  8011a4:	94400417 	ldw	r17,16(r18)
  8011a8:	88001f26 	beq	r17,zero,801228 <_fflush_r+0x160>
  8011ac:	90800017 	ldw	r2,0(r18)
  8011b0:	18c000cc 	andi	r3,r3,3
  8011b4:	94400015 	stw	r17,0(r18)
  8011b8:	1461c83a 	sub	r16,r2,r17
  8011bc:	18002526 	beq	r3,zero,801254 <_fflush_r+0x18c>
  8011c0:	0005883a 	mov	r2,zero
  8011c4:	90800215 	stw	r2,8(r18)
  8011c8:	0400170e 	bge	zero,r16,801228 <_fflush_r+0x160>
  8011cc:	90c00917 	ldw	r3,36(r18)
  8011d0:	91400717 	ldw	r5,28(r18)
  8011d4:	880d883a 	mov	r6,r17
  8011d8:	800f883a 	mov	r7,r16
  8011dc:	9809883a 	mov	r4,r19
  8011e0:	183ee83a 	callr	r3
  8011e4:	88a3883a 	add	r17,r17,r2
  8011e8:	80a1c83a 	sub	r16,r16,r2
  8011ec:	00bff616 	blt	zero,r2,8011c8 <_fflush_r+0x100>
  8011f0:	9080030b 	ldhu	r2,12(r18)
  8011f4:	00ffffc4 	movi	r3,-1
  8011f8:	10801014 	ori	r2,r2,64
  8011fc:	9080030d 	sth	r2,12(r18)
  801200:	1805883a 	mov	r2,r3
  801204:	dfc00417 	ldw	ra,16(sp)
  801208:	dcc00317 	ldw	r19,12(sp)
  80120c:	dc800217 	ldw	r18,8(sp)
  801210:	dc400117 	ldw	r17,4(sp)
  801214:	dc000017 	ldw	r16,0(sp)
  801218:	dec00504 	addi	sp,sp,20
  80121c:	f800283a 	ret
  801220:	90800f17 	ldw	r2,60(r18)
  801224:	00bfbe16 	blt	zero,r2,801120 <_fflush_r+0x58>
  801228:	0007883a 	mov	r3,zero
  80122c:	1805883a 	mov	r2,r3
  801230:	dfc00417 	ldw	ra,16(sp)
  801234:	dcc00317 	ldw	r19,12(sp)
  801238:	dc800217 	ldw	r18,8(sp)
  80123c:	dc400117 	ldw	r17,4(sp)
  801240:	dc000017 	ldw	r16,0(sp)
  801244:	dec00504 	addi	sp,sp,20
  801248:	f800283a 	ret
  80124c:	08014880 	call	801488 <__sinit>
  801250:	003fa806 	br	8010f4 <_fflush_r+0x2c>
  801254:	90800517 	ldw	r2,20(r18)
  801258:	90800215 	stw	r2,8(r18)
  80125c:	003fda06 	br	8011c8 <_fflush_r+0x100>
  801260:	90800117 	ldw	r2,4(r18)
  801264:	90c00c17 	ldw	r3,48(r18)
  801268:	80a1c83a 	sub	r16,r16,r2
  80126c:	183fb426 	beq	r3,zero,801140 <_fflush_r+0x78>
  801270:	90800f17 	ldw	r2,60(r18)
  801274:	80a1c83a 	sub	r16,r16,r2
  801278:	003fb106 	br	801140 <_fflush_r+0x78>
  80127c:	91400717 	ldw	r5,28(r18)
  801280:	9809883a 	mov	r4,r19
  801284:	000d883a 	mov	r6,zero
  801288:	01c00044 	movi	r7,1
  80128c:	403ee83a 	callr	r8
  801290:	1021883a 	mov	r16,r2
  801294:	00bfffc4 	movi	r2,-1
  801298:	80800226 	beq	r16,r2,8012a4 <_fflush_r+0x1dc>
  80129c:	92000a17 	ldw	r8,40(r18)
  8012a0:	003fa406 	br	801134 <_fflush_r+0x6c>
  8012a4:	98c00017 	ldw	r3,0(r19)
  8012a8:	00800744 	movi	r2,29
  8012ac:	18bfde26 	beq	r3,r2,801228 <_fflush_r+0x160>
  8012b0:	9080030b 	ldhu	r2,12(r18)
  8012b4:	8007883a 	mov	r3,r16
  8012b8:	10801014 	ori	r2,r2,64
  8012bc:	9080030d 	sth	r2,12(r18)
  8012c0:	003fcf06 	br	801200 <_fflush_r+0x138>

008012c4 <fflush>:
  8012c4:	01402034 	movhi	r5,128
  8012c8:	29443204 	addi	r5,r5,4296
  8012cc:	2007883a 	mov	r3,r4
  8012d0:	20000526 	beq	r4,zero,8012e8 <fflush+0x24>
  8012d4:	00802074 	movhi	r2,129
  8012d8:	109be504 	addi	r2,r2,28564
  8012dc:	11000017 	ldw	r4,0(r2)
  8012e0:	180b883a 	mov	r5,r3
  8012e4:	08010c81 	jmpi	8010c8 <_fflush_r>
  8012e8:	00802074 	movhi	r2,129
  8012ec:	109be604 	addi	r2,r2,28568
  8012f0:	11000017 	ldw	r4,0(r2)
  8012f4:	08026901 	jmpi	802690 <_fwalk_reent>

008012f8 <fgetc>:
  8012f8:	defffd04 	addi	sp,sp,-12
  8012fc:	dc400115 	stw	r17,4(sp)
  801300:	04402074 	movhi	r17,129
  801304:	8c5be504 	addi	r17,r17,28564
  801308:	88c00017 	ldw	r3,0(r17)
  80130c:	dc000015 	stw	r16,0(sp)
  801310:	dfc00215 	stw	ra,8(sp)
  801314:	2021883a 	mov	r16,r4
  801318:	18000326 	beq	r3,zero,801328 <fgetc+0x30>
  80131c:	18800e17 	ldw	r2,56(r3)
  801320:	1809883a 	mov	r4,r3
  801324:	10000e26 	beq	r2,zero,801360 <fgetc+0x68>
  801328:	80800117 	ldw	r2,4(r16)
  80132c:	800b883a 	mov	r5,r16
  801330:	10bfffc4 	addi	r2,r2,-1
  801334:	80800115 	stw	r2,4(r16)
  801338:	10000f16 	blt	r2,zero,801378 <fgetc+0x80>
  80133c:	80c00017 	ldw	r3,0(r16)
  801340:	18800003 	ldbu	r2,0(r3)
  801344:	18c00044 	addi	r3,r3,1
  801348:	80c00015 	stw	r3,0(r16)
  80134c:	dfc00217 	ldw	ra,8(sp)
  801350:	dc400117 	ldw	r17,4(sp)
  801354:	dc000017 	ldw	r16,0(sp)
  801358:	dec00304 	addi	sp,sp,12
  80135c:	f800283a 	ret
  801360:	08014880 	call	801488 <__sinit>
  801364:	80800117 	ldw	r2,4(r16)
  801368:	800b883a 	mov	r5,r16
  80136c:	10bfffc4 	addi	r2,r2,-1
  801370:	80800115 	stw	r2,4(r16)
  801374:	103ff10e 	bge	r2,zero,80133c <fgetc+0x44>
  801378:	89000017 	ldw	r4,0(r17)
  80137c:	dfc00217 	ldw	ra,8(sp)
  801380:	dc400117 	ldw	r17,4(sp)
  801384:	dc000017 	ldw	r16,0(sp)
  801388:	dec00304 	addi	sp,sp,12
  80138c:	0803d581 	jmpi	803d58 <__srget_r>

00801390 <_fgetc_r>:
  801390:	defffd04 	addi	sp,sp,-12
  801394:	dc400115 	stw	r17,4(sp)
  801398:	dc000015 	stw	r16,0(sp)
  80139c:	dfc00215 	stw	ra,8(sp)
  8013a0:	2021883a 	mov	r16,r4
  8013a4:	2823883a 	mov	r17,r5
  8013a8:	20000226 	beq	r4,zero,8013b4 <_fgetc_r+0x24>
  8013ac:	20800e17 	ldw	r2,56(r4)
  8013b0:	10000f26 	beq	r2,zero,8013f0 <_fgetc_r+0x60>
  8013b4:	88800117 	ldw	r2,4(r17)
  8013b8:	8009883a 	mov	r4,r16
  8013bc:	880b883a 	mov	r5,r17
  8013c0:	10bfffc4 	addi	r2,r2,-1
  8013c4:	88800115 	stw	r2,4(r17)
  8013c8:	10001016 	blt	r2,zero,80140c <_fgetc_r+0x7c>
  8013cc:	88c00017 	ldw	r3,0(r17)
  8013d0:	18800003 	ldbu	r2,0(r3)
  8013d4:	18c00044 	addi	r3,r3,1
  8013d8:	88c00015 	stw	r3,0(r17)
  8013dc:	dfc00217 	ldw	ra,8(sp)
  8013e0:	dc400117 	ldw	r17,4(sp)
  8013e4:	dc000017 	ldw	r16,0(sp)
  8013e8:	dec00304 	addi	sp,sp,12
  8013ec:	f800283a 	ret
  8013f0:	08014880 	call	801488 <__sinit>
  8013f4:	88800117 	ldw	r2,4(r17)
  8013f8:	8009883a 	mov	r4,r16
  8013fc:	880b883a 	mov	r5,r17
  801400:	10bfffc4 	addi	r2,r2,-1
  801404:	88800115 	stw	r2,4(r17)
  801408:	103ff00e 	bge	r2,zero,8013cc <_fgetc_r+0x3c>
  80140c:	dfc00217 	ldw	ra,8(sp)
  801410:	dc400117 	ldw	r17,4(sp)
  801414:	dc000017 	ldw	r16,0(sp)
  801418:	dec00304 	addi	sp,sp,12
  80141c:	0803d581 	jmpi	803d58 <__srget_r>

00801420 <std>:
  801420:	00802034 	movhi	r2,128
  801424:	10900404 	addi	r2,r2,16400
  801428:	20800b15 	stw	r2,44(r4)
  80142c:	00802034 	movhi	r2,128
  801430:	10903f04 	addi	r2,r2,16636
  801434:	20800815 	stw	r2,32(r4)
  801438:	00c02034 	movhi	r3,128
  80143c:	18d02004 	addi	r3,r3,16512
  801440:	00802034 	movhi	r2,128
  801444:	10900604 	addi	r2,r2,16408
  801448:	2140030d 	sth	r5,12(r4)
  80144c:	2180038d 	sth	r6,14(r4)
  801450:	20c00915 	stw	r3,36(r4)
  801454:	20800a15 	stw	r2,40(r4)
  801458:	20000015 	stw	zero,0(r4)
  80145c:	20000115 	stw	zero,4(r4)
  801460:	20000215 	stw	zero,8(r4)
  801464:	20000415 	stw	zero,16(r4)
  801468:	20000515 	stw	zero,20(r4)
  80146c:	20000615 	stw	zero,24(r4)
  801470:	21000715 	stw	r4,28(r4)
  801474:	f800283a 	ret

00801478 <__sfp_lock_acquire>:
  801478:	f800283a 	ret

0080147c <__sfp_lock_release>:
  80147c:	f800283a 	ret

00801480 <__sinit_lock_acquire>:
  801480:	f800283a 	ret

00801484 <__sinit_lock_release>:
  801484:	f800283a 	ret

00801488 <__sinit>:
  801488:	20800e17 	ldw	r2,56(r4)
  80148c:	defffd04 	addi	sp,sp,-12
  801490:	dc400115 	stw	r17,4(sp)
  801494:	dc000015 	stw	r16,0(sp)
  801498:	dfc00215 	stw	ra,8(sp)
  80149c:	04400044 	movi	r17,1
  8014a0:	01400104 	movi	r5,4
  8014a4:	000d883a 	mov	r6,zero
  8014a8:	2021883a 	mov	r16,r4
  8014ac:	2200bb04 	addi	r8,r4,748
  8014b0:	200f883a 	mov	r7,r4
  8014b4:	10000526 	beq	r2,zero,8014cc <__sinit+0x44>
  8014b8:	dfc00217 	ldw	ra,8(sp)
  8014bc:	dc400117 	ldw	r17,4(sp)
  8014c0:	dc000017 	ldw	r16,0(sp)
  8014c4:	dec00304 	addi	sp,sp,12
  8014c8:	f800283a 	ret
  8014cc:	21000117 	ldw	r4,4(r4)
  8014d0:	00802034 	movhi	r2,128
  8014d4:	10855b04 	addi	r2,r2,5484
  8014d8:	00c000c4 	movi	r3,3
  8014dc:	80800f15 	stw	r2,60(r16)
  8014e0:	80c0b915 	stw	r3,740(r16)
  8014e4:	8200ba15 	stw	r8,744(r16)
  8014e8:	84400e15 	stw	r17,56(r16)
  8014ec:	8000b815 	stw	zero,736(r16)
  8014f0:	08014200 	call	801420 <std>
  8014f4:	81000217 	ldw	r4,8(r16)
  8014f8:	880d883a 	mov	r6,r17
  8014fc:	800f883a 	mov	r7,r16
  801500:	01400284 	movi	r5,10
  801504:	08014200 	call	801420 <std>
  801508:	81000317 	ldw	r4,12(r16)
  80150c:	800f883a 	mov	r7,r16
  801510:	01400484 	movi	r5,18
  801514:	01800084 	movi	r6,2
  801518:	dfc00217 	ldw	ra,8(sp)
  80151c:	dc400117 	ldw	r17,4(sp)
  801520:	dc000017 	ldw	r16,0(sp)
  801524:	dec00304 	addi	sp,sp,12
  801528:	08014201 	jmpi	801420 <std>

0080152c <__fp_lock>:
  80152c:	0005883a 	mov	r2,zero
  801530:	f800283a 	ret

00801534 <__fp_unlock>:
  801534:	0005883a 	mov	r2,zero
  801538:	f800283a 	ret

0080153c <__fp_unlock_all>:
  80153c:	00802074 	movhi	r2,129
  801540:	109be504 	addi	r2,r2,28564
  801544:	11000017 	ldw	r4,0(r2)
  801548:	01402034 	movhi	r5,128
  80154c:	29454d04 	addi	r5,r5,5428
  801550:	08027581 	jmpi	802758 <_fwalk>

00801554 <__fp_lock_all>:
  801554:	00802074 	movhi	r2,129
  801558:	109be504 	addi	r2,r2,28564
  80155c:	11000017 	ldw	r4,0(r2)
  801560:	01402034 	movhi	r5,128
  801564:	29454b04 	addi	r5,r5,5420
  801568:	08027581 	jmpi	802758 <_fwalk>

0080156c <_cleanup_r>:
  80156c:	01402034 	movhi	r5,128
  801570:	29442d04 	addi	r5,r5,4276
  801574:	08027581 	jmpi	802758 <_fwalk>

00801578 <_cleanup>:
  801578:	00802074 	movhi	r2,129
  80157c:	109be604 	addi	r2,r2,28568
  801580:	11000017 	ldw	r4,0(r2)
  801584:	080156c1 	jmpi	80156c <_cleanup_r>

00801588 <__sfmoreglue>:
  801588:	defffc04 	addi	sp,sp,-16
  80158c:	dc400115 	stw	r17,4(sp)
  801590:	2c401724 	muli	r17,r5,92
  801594:	dc800215 	stw	r18,8(sp)
  801598:	2825883a 	mov	r18,r5
  80159c:	89400304 	addi	r5,r17,12
  8015a0:	dc000015 	stw	r16,0(sp)
  8015a4:	dfc00315 	stw	ra,12(sp)
  8015a8:	08029a40 	call	8029a4 <_malloc_r>
  8015ac:	0021883a 	mov	r16,zero
  8015b0:	880d883a 	mov	r6,r17
  8015b4:	000b883a 	mov	r5,zero
  8015b8:	10000626 	beq	r2,zero,8015d4 <__sfmoreglue+0x4c>
  8015bc:	11000304 	addi	r4,r2,12
  8015c0:	14800115 	stw	r18,4(r2)
  8015c4:	10000015 	stw	zero,0(r2)
  8015c8:	11000215 	stw	r4,8(r2)
  8015cc:	1021883a 	mov	r16,r2
  8015d0:	08033480 	call	803348 <memset>
  8015d4:	8005883a 	mov	r2,r16
  8015d8:	dfc00317 	ldw	ra,12(sp)
  8015dc:	dc800217 	ldw	r18,8(sp)
  8015e0:	dc400117 	ldw	r17,4(sp)
  8015e4:	dc000017 	ldw	r16,0(sp)
  8015e8:	dec00404 	addi	sp,sp,16
  8015ec:	f800283a 	ret

008015f0 <__sfp>:
  8015f0:	defffd04 	addi	sp,sp,-12
  8015f4:	00802074 	movhi	r2,129
  8015f8:	109be604 	addi	r2,r2,28568
  8015fc:	dc000015 	stw	r16,0(sp)
  801600:	14000017 	ldw	r16,0(r2)
  801604:	dc400115 	stw	r17,4(sp)
  801608:	dfc00215 	stw	ra,8(sp)
  80160c:	80800e17 	ldw	r2,56(r16)
  801610:	2023883a 	mov	r17,r4
  801614:	10002626 	beq	r2,zero,8016b0 <__sfp+0xc0>
  801618:	8400b804 	addi	r16,r16,736
  80161c:	80800117 	ldw	r2,4(r16)
  801620:	81000217 	ldw	r4,8(r16)
  801624:	10ffffc4 	addi	r3,r2,-1
  801628:	18000916 	blt	r3,zero,801650 <__sfp+0x60>
  80162c:	2080030f 	ldh	r2,12(r4)
  801630:	10000b26 	beq	r2,zero,801660 <__sfp+0x70>
  801634:	017fffc4 	movi	r5,-1
  801638:	00000206 	br	801644 <__sfp+0x54>
  80163c:	2080030f 	ldh	r2,12(r4)
  801640:	10000726 	beq	r2,zero,801660 <__sfp+0x70>
  801644:	18ffffc4 	addi	r3,r3,-1
  801648:	21001704 	addi	r4,r4,92
  80164c:	197ffb1e 	bne	r3,r5,80163c <__sfp+0x4c>
  801650:	80800017 	ldw	r2,0(r16)
  801654:	10001926 	beq	r2,zero,8016bc <__sfp+0xcc>
  801658:	1021883a 	mov	r16,r2
  80165c:	003fef06 	br	80161c <__sfp+0x2c>
  801660:	00bfffc4 	movi	r2,-1
  801664:	00c00044 	movi	r3,1
  801668:	2080038d 	sth	r2,14(r4)
  80166c:	20c0030d 	sth	r3,12(r4)
  801670:	20000015 	stw	zero,0(r4)
  801674:	20000215 	stw	zero,8(r4)
  801678:	20000115 	stw	zero,4(r4)
  80167c:	20000415 	stw	zero,16(r4)
  801680:	20000515 	stw	zero,20(r4)
  801684:	20000615 	stw	zero,24(r4)
  801688:	20000c15 	stw	zero,48(r4)
  80168c:	20000d15 	stw	zero,52(r4)
  801690:	20001115 	stw	zero,68(r4)
  801694:	20001215 	stw	zero,72(r4)
  801698:	2005883a 	mov	r2,r4
  80169c:	dfc00217 	ldw	ra,8(sp)
  8016a0:	dc400117 	ldw	r17,4(sp)
  8016a4:	dc000017 	ldw	r16,0(sp)
  8016a8:	dec00304 	addi	sp,sp,12
  8016ac:	f800283a 	ret
  8016b0:	8009883a 	mov	r4,r16
  8016b4:	08014880 	call	801488 <__sinit>
  8016b8:	003fd706 	br	801618 <__sfp+0x28>
  8016bc:	8809883a 	mov	r4,r17
  8016c0:	01400104 	movi	r5,4
  8016c4:	08015880 	call	801588 <__sfmoreglue>
  8016c8:	80800015 	stw	r2,0(r16)
  8016cc:	103fe21e 	bne	r2,zero,801658 <__sfp+0x68>
  8016d0:	00800304 	movi	r2,12
  8016d4:	0009883a 	mov	r4,zero
  8016d8:	88800015 	stw	r2,0(r17)
  8016dc:	003fee06 	br	801698 <__sfp+0xa8>

008016e0 <_fopen_r>:
  8016e0:	defffa04 	addi	sp,sp,-24
  8016e4:	dcc00415 	stw	r19,16(sp)
  8016e8:	2827883a 	mov	r19,r5
  8016ec:	300b883a 	mov	r5,r6
  8016f0:	d80d883a 	mov	r6,sp
  8016f4:	dc800315 	stw	r18,12(sp)
  8016f8:	dc400215 	stw	r17,8(sp)
  8016fc:	dc000115 	stw	r16,4(sp)
  801700:	dfc00515 	stw	ra,20(sp)
  801704:	2021883a 	mov	r16,r4
  801708:	08092680 	call	809268 <__sflags>
  80170c:	1025883a 	mov	r18,r2
  801710:	8009883a 	mov	r4,r16
  801714:	0023883a 	mov	r17,zero
  801718:	1000081e 	bne	r2,zero,80173c <_fopen_r+0x5c>
  80171c:	8805883a 	mov	r2,r17
  801720:	dfc00517 	ldw	ra,20(sp)
  801724:	dcc00417 	ldw	r19,16(sp)
  801728:	dc800317 	ldw	r18,12(sp)
  80172c:	dc400217 	ldw	r17,8(sp)
  801730:	dc000117 	ldw	r16,4(sp)
  801734:	dec00604 	addi	sp,sp,24
  801738:	f800283a 	ret
  80173c:	08015f00 	call	8015f0 <__sfp>
  801740:	1023883a 	mov	r17,r2
  801744:	980b883a 	mov	r5,r19
  801748:	8009883a 	mov	r4,r16
  80174c:	01c06d84 	movi	r7,438
  801750:	103ff226 	beq	r2,zero,80171c <_fopen_r+0x3c>
  801754:	d9800017 	ldw	r6,0(sp)
  801758:	08033e00 	call	8033e0 <_open_r>
  80175c:	10001816 	blt	r2,zero,8017c0 <_fopen_r+0xe0>
  801760:	00c02034 	movhi	r3,128
  801764:	18d02004 	addi	r3,r3,16512
  801768:	923fffcc 	andi	r8,r18,65535
  80176c:	8880038d 	sth	r2,14(r17)
  801770:	00802034 	movhi	r2,128
  801774:	10903f04 	addi	r2,r2,16636
  801778:	88800815 	stw	r2,32(r17)
  80177c:	88c00915 	stw	r3,36(r17)
  801780:	00802034 	movhi	r2,128
  801784:	10900604 	addi	r2,r2,16408
  801788:	00c02034 	movhi	r3,128
  80178c:	18d00404 	addi	r3,r3,16400
  801790:	4200400c 	andi	r8,r8,256
  801794:	8c80030d 	sth	r18,12(r17)
  801798:	8009883a 	mov	r4,r16
  80179c:	880b883a 	mov	r5,r17
  8017a0:	000d883a 	mov	r6,zero
  8017a4:	01c00084 	movi	r7,2
  8017a8:	88800a15 	stw	r2,40(r17)
  8017ac:	88c00b15 	stw	r3,44(r17)
  8017b0:	8c400715 	stw	r17,28(r17)
  8017b4:	403fd926 	beq	r8,zero,80171c <_fopen_r+0x3c>
  8017b8:	0801d200 	call	801d20 <_fseek_r>
  8017bc:	003fd706 	br	80171c <_fopen_r+0x3c>
  8017c0:	08014780 	call	801478 <__sfp_lock_acquire>
  8017c4:	8800030d 	sth	zero,12(r17)
  8017c8:	080147c0 	call	80147c <__sfp_lock_release>
  8017cc:	0023883a 	mov	r17,zero
  8017d0:	003fd206 	br	80171c <_fopen_r+0x3c>

008017d4 <fopen>:
  8017d4:	01802074 	movhi	r6,129
  8017d8:	319be504 	addi	r6,r6,28564
  8017dc:	2007883a 	mov	r3,r4
  8017e0:	31000017 	ldw	r4,0(r6)
  8017e4:	280d883a 	mov	r6,r5
  8017e8:	180b883a 	mov	r5,r3
  8017ec:	08016e01 	jmpi	8016e0 <_fopen_r>

008017f0 <fprintf>:
  8017f0:	defffc04 	addi	sp,sp,-16
  8017f4:	dfc00115 	stw	ra,4(sp)
  8017f8:	d9800215 	stw	r6,8(sp)
  8017fc:	d9c00315 	stw	r7,12(sp)
  801800:	d8800204 	addi	r2,sp,8
  801804:	100d883a 	mov	r6,r2
  801808:	d8800015 	stw	r2,0(sp)
  80180c:	08060d40 	call	8060d4 <__vfprintf_internal>
  801810:	dfc00117 	ldw	ra,4(sp)
  801814:	dec00404 	addi	sp,sp,16
  801818:	f800283a 	ret

0080181c <_fprintf_r>:
  80181c:	defffd04 	addi	sp,sp,-12
  801820:	2807883a 	mov	r3,r5
  801824:	dfc00115 	stw	ra,4(sp)
  801828:	d9c00215 	stw	r7,8(sp)
  80182c:	d8800204 	addi	r2,sp,8
  801830:	300b883a 	mov	r5,r6
  801834:	1809883a 	mov	r4,r3
  801838:	100d883a 	mov	r6,r2
  80183c:	d8800015 	stw	r2,0(sp)
  801840:	08060d40 	call	8060d4 <__vfprintf_internal>
  801844:	dfc00117 	ldw	ra,4(sp)
  801848:	dec00304 	addi	sp,sp,12
  80184c:	f800283a 	ret

00801850 <_fputs_r>:
  801850:	defff804 	addi	sp,sp,-32
  801854:	dc000515 	stw	r16,20(sp)
  801858:	2021883a 	mov	r16,r4
  80185c:	2809883a 	mov	r4,r5
  801860:	dc400615 	stw	r17,24(sp)
  801864:	dfc00715 	stw	ra,28(sp)
  801868:	3023883a 	mov	r17,r6
  80186c:	d9400015 	stw	r5,0(sp)
  801870:	080415c0 	call	80415c <strlen>
  801874:	00c00044 	movi	r3,1
  801878:	d8800115 	stw	r2,4(sp)
  80187c:	d8c00315 	stw	r3,12(sp)
  801880:	d8800415 	stw	r2,16(sp)
  801884:	dec00215 	stw	sp,8(sp)
  801888:	80000326 	beq	r16,zero,801898 <_fputs_r+0x48>
  80188c:	80800e17 	ldw	r2,56(r16)
  801890:	8009883a 	mov	r4,r16
  801894:	10000926 	beq	r2,zero,8018bc <_fputs_r+0x6c>
  801898:	8009883a 	mov	r4,r16
  80189c:	880b883a 	mov	r5,r17
  8018a0:	d9800204 	addi	r6,sp,8
  8018a4:	08021f40 	call	8021f4 <__sfvwrite_r>
  8018a8:	dfc00717 	ldw	ra,28(sp)
  8018ac:	dc400617 	ldw	r17,24(sp)
  8018b0:	dc000517 	ldw	r16,20(sp)
  8018b4:	dec00804 	addi	sp,sp,32
  8018b8:	f800283a 	ret
  8018bc:	08014880 	call	801488 <__sinit>
  8018c0:	003ff506 	br	801898 <_fputs_r+0x48>

008018c4 <fputs>:
  8018c4:	01802074 	movhi	r6,129
  8018c8:	319be504 	addi	r6,r6,28564
  8018cc:	2007883a 	mov	r3,r4
  8018d0:	31000017 	ldw	r4,0(r6)
  8018d4:	280d883a 	mov	r6,r5
  8018d8:	180b883a 	mov	r5,r3
  8018dc:	08018501 	jmpi	801850 <_fputs_r>

008018e0 <_malloc_trim_r>:
  8018e0:	defffb04 	addi	sp,sp,-20
  8018e4:	dcc00315 	stw	r19,12(sp)
  8018e8:	04c02074 	movhi	r19,129
  8018ec:	9cd5d904 	addi	r19,r19,22372
  8018f0:	dc800215 	stw	r18,8(sp)
  8018f4:	dc400115 	stw	r17,4(sp)
  8018f8:	dc000015 	stw	r16,0(sp)
  8018fc:	2823883a 	mov	r17,r5
  801900:	2025883a 	mov	r18,r4
  801904:	dfc00415 	stw	ra,16(sp)
  801908:	0810e480 	call	810e48 <__malloc_lock>
  80190c:	98800217 	ldw	r2,8(r19)
  801910:	9009883a 	mov	r4,r18
  801914:	000b883a 	mov	r5,zero
  801918:	10c00117 	ldw	r3,4(r2)
  80191c:	00bfff04 	movi	r2,-4
  801920:	18a0703a 	and	r16,r3,r2
  801924:	8463c83a 	sub	r17,r16,r17
  801928:	8c43fbc4 	addi	r17,r17,4079
  80192c:	8822d33a 	srli	r17,r17,12
  801930:	0083ffc4 	movi	r2,4095
  801934:	8c7fffc4 	addi	r17,r17,-1
  801938:	8822933a 	slli	r17,r17,12
  80193c:	1440060e 	bge	r2,r17,801958 <_malloc_trim_r+0x78>
  801940:	0803db80 	call	803db8 <_sbrk_r>
  801944:	98c00217 	ldw	r3,8(r19)
  801948:	9009883a 	mov	r4,r18
  80194c:	044bc83a 	sub	r5,zero,r17
  801950:	80c7883a 	add	r3,r16,r3
  801954:	10c00926 	beq	r2,r3,80197c <_malloc_trim_r+0x9c>
  801958:	0810e680 	call	810e68 <__malloc_unlock>
  80195c:	0005883a 	mov	r2,zero
  801960:	dfc00417 	ldw	ra,16(sp)
  801964:	dcc00317 	ldw	r19,12(sp)
  801968:	dc800217 	ldw	r18,8(sp)
  80196c:	dc400117 	ldw	r17,4(sp)
  801970:	dc000017 	ldw	r16,0(sp)
  801974:	dec00504 	addi	sp,sp,20
  801978:	f800283a 	ret
  80197c:	9009883a 	mov	r4,r18
  801980:	0803db80 	call	803db8 <_sbrk_r>
  801984:	844dc83a 	sub	r6,r16,r17
  801988:	00ffffc4 	movi	r3,-1
  80198c:	9009883a 	mov	r4,r18
  801990:	000b883a 	mov	r5,zero
  801994:	01c020b4 	movhi	r7,130
  801998:	39e35404 	addi	r7,r7,-29360
  80199c:	31800054 	ori	r6,r6,1
  8019a0:	10c00926 	beq	r2,r3,8019c8 <_malloc_trim_r+0xe8>
  8019a4:	38800017 	ldw	r2,0(r7)
  8019a8:	98c00217 	ldw	r3,8(r19)
  8019ac:	9009883a 	mov	r4,r18
  8019b0:	1445c83a 	sub	r2,r2,r17
  8019b4:	38800015 	stw	r2,0(r7)
  8019b8:	19800115 	stw	r6,4(r3)
  8019bc:	0810e680 	call	810e68 <__malloc_unlock>
  8019c0:	00800044 	movi	r2,1
  8019c4:	003fe606 	br	801960 <_malloc_trim_r+0x80>
  8019c8:	0803db80 	call	803db8 <_sbrk_r>
  8019cc:	99800217 	ldw	r6,8(r19)
  8019d0:	100f883a 	mov	r7,r2
  8019d4:	9009883a 	mov	r4,r18
  8019d8:	1187c83a 	sub	r3,r2,r6
  8019dc:	008003c4 	movi	r2,15
  8019e0:	19400054 	ori	r5,r3,1
  8019e4:	10ffdc0e 	bge	r2,r3,801958 <_malloc_trim_r+0x78>
  8019e8:	00802074 	movhi	r2,129
  8019ec:	109be804 	addi	r2,r2,28576
  8019f0:	10c00017 	ldw	r3,0(r2)
  8019f4:	008020b4 	movhi	r2,130
  8019f8:	10a35404 	addi	r2,r2,-29360
  8019fc:	31400115 	stw	r5,4(r6)
  801a00:	38c7c83a 	sub	r3,r7,r3
  801a04:	10c00015 	stw	r3,0(r2)
  801a08:	003fd306 	br	801958 <_malloc_trim_r+0x78>

00801a0c <_free_r>:
  801a0c:	defffd04 	addi	sp,sp,-12
  801a10:	dc400115 	stw	r17,4(sp)
  801a14:	dc000015 	stw	r16,0(sp)
  801a18:	dfc00215 	stw	ra,8(sp)
  801a1c:	2821883a 	mov	r16,r5
  801a20:	2023883a 	mov	r17,r4
  801a24:	28005a26 	beq	r5,zero,801b90 <_free_r+0x184>
  801a28:	0810e480 	call	810e48 <__malloc_lock>
  801a2c:	823ffe04 	addi	r8,r16,-8
  801a30:	41400117 	ldw	r5,4(r8)
  801a34:	00bfff84 	movi	r2,-2
  801a38:	02802074 	movhi	r10,129
  801a3c:	5295d904 	addi	r10,r10,22372
  801a40:	288e703a 	and	r7,r5,r2
  801a44:	41cd883a 	add	r6,r8,r7
  801a48:	30c00117 	ldw	r3,4(r6)
  801a4c:	51000217 	ldw	r4,8(r10)
  801a50:	00bfff04 	movi	r2,-4
  801a54:	1892703a 	and	r9,r3,r2
  801a58:	5017883a 	mov	r11,r10
  801a5c:	31006726 	beq	r6,r4,801bfc <_free_r+0x1f0>
  801a60:	2880004c 	andi	r2,r5,1
  801a64:	1005003a 	cmpeq	r2,r2,zero
  801a68:	32400115 	stw	r9,4(r6)
  801a6c:	10001a1e 	bne	r2,zero,801ad8 <_free_r+0xcc>
  801a70:	000b883a 	mov	r5,zero
  801a74:	3247883a 	add	r3,r6,r9
  801a78:	18800117 	ldw	r2,4(r3)
  801a7c:	1080004c 	andi	r2,r2,1
  801a80:	1000231e 	bne	r2,zero,801b10 <_free_r+0x104>
  801a84:	280ac03a 	cmpne	r5,r5,zero
  801a88:	3a4f883a 	add	r7,r7,r9
  801a8c:	2800451e 	bne	r5,zero,801ba4 <_free_r+0x198>
  801a90:	31000217 	ldw	r4,8(r6)
  801a94:	00802074 	movhi	r2,129
  801a98:	1095db04 	addi	r2,r2,22380
  801a9c:	20807b26 	beq	r4,r2,801c8c <_free_r+0x280>
  801aa0:	30800317 	ldw	r2,12(r6)
  801aa4:	3a07883a 	add	r3,r7,r8
  801aa8:	19c00015 	stw	r7,0(r3)
  801aac:	11000215 	stw	r4,8(r2)
  801ab0:	20800315 	stw	r2,12(r4)
  801ab4:	38800054 	ori	r2,r7,1
  801ab8:	40800115 	stw	r2,4(r8)
  801abc:	28001a26 	beq	r5,zero,801b28 <_free_r+0x11c>
  801ac0:	8809883a 	mov	r4,r17
  801ac4:	dfc00217 	ldw	ra,8(sp)
  801ac8:	dc400117 	ldw	r17,4(sp)
  801acc:	dc000017 	ldw	r16,0(sp)
  801ad0:	dec00304 	addi	sp,sp,12
  801ad4:	0810e681 	jmpi	810e68 <__malloc_unlock>
  801ad8:	80bffe17 	ldw	r2,-8(r16)
  801adc:	50c00204 	addi	r3,r10,8
  801ae0:	4091c83a 	sub	r8,r8,r2
  801ae4:	41000217 	ldw	r4,8(r8)
  801ae8:	388f883a 	add	r7,r7,r2
  801aec:	20c06126 	beq	r4,r3,801c74 <_free_r+0x268>
  801af0:	40800317 	ldw	r2,12(r8)
  801af4:	3247883a 	add	r3,r6,r9
  801af8:	000b883a 	mov	r5,zero
  801afc:	11000215 	stw	r4,8(r2)
  801b00:	20800315 	stw	r2,12(r4)
  801b04:	18800117 	ldw	r2,4(r3)
  801b08:	1080004c 	andi	r2,r2,1
  801b0c:	103fdd26 	beq	r2,zero,801a84 <_free_r+0x78>
  801b10:	38800054 	ori	r2,r7,1
  801b14:	3a07883a 	add	r3,r7,r8
  801b18:	280ac03a 	cmpne	r5,r5,zero
  801b1c:	40800115 	stw	r2,4(r8)
  801b20:	19c00015 	stw	r7,0(r3)
  801b24:	283fe61e 	bne	r5,zero,801ac0 <_free_r+0xb4>
  801b28:	00807fc4 	movi	r2,511
  801b2c:	11c01f2e 	bgeu	r2,r7,801bac <_free_r+0x1a0>
  801b30:	3806d27a 	srli	r3,r7,9
  801b34:	1800481e 	bne	r3,zero,801c58 <_free_r+0x24c>
  801b38:	3804d0fa 	srli	r2,r7,3
  801b3c:	100690fa 	slli	r3,r2,3
  801b40:	1acd883a 	add	r6,r3,r11
  801b44:	31400217 	ldw	r5,8(r6)
  801b48:	31405926 	beq	r6,r5,801cb0 <_free_r+0x2a4>
  801b4c:	28800117 	ldw	r2,4(r5)
  801b50:	00ffff04 	movi	r3,-4
  801b54:	10c4703a 	and	r2,r2,r3
  801b58:	3880022e 	bgeu	r7,r2,801b64 <_free_r+0x158>
  801b5c:	29400217 	ldw	r5,8(r5)
  801b60:	317ffa1e 	bne	r6,r5,801b4c <_free_r+0x140>
  801b64:	29800317 	ldw	r6,12(r5)
  801b68:	41800315 	stw	r6,12(r8)
  801b6c:	41400215 	stw	r5,8(r8)
  801b70:	8809883a 	mov	r4,r17
  801b74:	2a000315 	stw	r8,12(r5)
  801b78:	32000215 	stw	r8,8(r6)
  801b7c:	dfc00217 	ldw	ra,8(sp)
  801b80:	dc400117 	ldw	r17,4(sp)
  801b84:	dc000017 	ldw	r16,0(sp)
  801b88:	dec00304 	addi	sp,sp,12
  801b8c:	0810e681 	jmpi	810e68 <__malloc_unlock>
  801b90:	dfc00217 	ldw	ra,8(sp)
  801b94:	dc400117 	ldw	r17,4(sp)
  801b98:	dc000017 	ldw	r16,0(sp)
  801b9c:	dec00304 	addi	sp,sp,12
  801ba0:	f800283a 	ret
  801ba4:	31000217 	ldw	r4,8(r6)
  801ba8:	003fbd06 	br	801aa0 <_free_r+0x94>
  801bac:	3806d0fa 	srli	r3,r7,3
  801bb0:	00800044 	movi	r2,1
  801bb4:	51400117 	ldw	r5,4(r10)
  801bb8:	180890fa 	slli	r4,r3,3
  801bbc:	1807d0ba 	srai	r3,r3,2
  801bc0:	22c9883a 	add	r4,r4,r11
  801bc4:	21800217 	ldw	r6,8(r4)
  801bc8:	10c4983a 	sll	r2,r2,r3
  801bcc:	41000315 	stw	r4,12(r8)
  801bd0:	41800215 	stw	r6,8(r8)
  801bd4:	288ab03a 	or	r5,r5,r2
  801bd8:	22000215 	stw	r8,8(r4)
  801bdc:	8809883a 	mov	r4,r17
  801be0:	51400115 	stw	r5,4(r10)
  801be4:	32000315 	stw	r8,12(r6)
  801be8:	dfc00217 	ldw	ra,8(sp)
  801bec:	dc400117 	ldw	r17,4(sp)
  801bf0:	dc000017 	ldw	r16,0(sp)
  801bf4:	dec00304 	addi	sp,sp,12
  801bf8:	0810e681 	jmpi	810e68 <__malloc_unlock>
  801bfc:	2880004c 	andi	r2,r5,1
  801c00:	3a4d883a 	add	r6,r7,r9
  801c04:	1000071e 	bne	r2,zero,801c24 <_free_r+0x218>
  801c08:	80bffe17 	ldw	r2,-8(r16)
  801c0c:	4091c83a 	sub	r8,r8,r2
  801c10:	41000317 	ldw	r4,12(r8)
  801c14:	40c00217 	ldw	r3,8(r8)
  801c18:	308d883a 	add	r6,r6,r2
  801c1c:	20c00215 	stw	r3,8(r4)
  801c20:	19000315 	stw	r4,12(r3)
  801c24:	00802074 	movhi	r2,129
  801c28:	109be704 	addi	r2,r2,28572
  801c2c:	11000017 	ldw	r4,0(r2)
  801c30:	30c00054 	ori	r3,r6,1
  801c34:	52000215 	stw	r8,8(r10)
  801c38:	40c00115 	stw	r3,4(r8)
  801c3c:	313fa036 	bltu	r6,r4,801ac0 <_free_r+0xb4>
  801c40:	008020b4 	movhi	r2,130
  801c44:	10a33c04 	addi	r2,r2,-29456
  801c48:	11400017 	ldw	r5,0(r2)
  801c4c:	8809883a 	mov	r4,r17
  801c50:	08018e00 	call	8018e0 <_malloc_trim_r>
  801c54:	003f9a06 	br	801ac0 <_free_r+0xb4>
  801c58:	00800104 	movi	r2,4
  801c5c:	10c0072e 	bgeu	r2,r3,801c7c <_free_r+0x270>
  801c60:	00800504 	movi	r2,20
  801c64:	10c01936 	bltu	r2,r3,801ccc <_free_r+0x2c0>
  801c68:	188016c4 	addi	r2,r3,91
  801c6c:	100690fa 	slli	r3,r2,3
  801c70:	003fb306 	br	801b40 <_free_r+0x134>
  801c74:	01400044 	movi	r5,1
  801c78:	003f7e06 	br	801a74 <_free_r+0x68>
  801c7c:	3804d1ba 	srli	r2,r7,6
  801c80:	10800e04 	addi	r2,r2,56
  801c84:	100690fa 	slli	r3,r2,3
  801c88:	003fad06 	br	801b40 <_free_r+0x134>
  801c8c:	22000315 	stw	r8,12(r4)
  801c90:	22000215 	stw	r8,8(r4)
  801c94:	3a05883a 	add	r2,r7,r8
  801c98:	38c00054 	ori	r3,r7,1
  801c9c:	11c00015 	stw	r7,0(r2)
  801ca0:	41000215 	stw	r4,8(r8)
  801ca4:	40c00115 	stw	r3,4(r8)
  801ca8:	41000315 	stw	r4,12(r8)
  801cac:	003f8406 	br	801ac0 <_free_r+0xb4>
  801cb0:	1005d0ba 	srai	r2,r2,2
  801cb4:	00c00044 	movi	r3,1
  801cb8:	51000117 	ldw	r4,4(r10)
  801cbc:	1886983a 	sll	r3,r3,r2
  801cc0:	20c8b03a 	or	r4,r4,r3
  801cc4:	51000115 	stw	r4,4(r10)
  801cc8:	003fa706 	br	801b68 <_free_r+0x15c>
  801ccc:	00801504 	movi	r2,84
  801cd0:	10c00436 	bltu	r2,r3,801ce4 <_free_r+0x2d8>
  801cd4:	3804d33a 	srli	r2,r7,12
  801cd8:	10801b84 	addi	r2,r2,110
  801cdc:	100690fa 	slli	r3,r2,3
  801ce0:	003f9706 	br	801b40 <_free_r+0x134>
  801ce4:	00805504 	movi	r2,340
  801ce8:	10c00436 	bltu	r2,r3,801cfc <_free_r+0x2f0>
  801cec:	3804d3fa 	srli	r2,r7,15
  801cf0:	10801dc4 	addi	r2,r2,119
  801cf4:	100690fa 	slli	r3,r2,3
  801cf8:	003f9106 	br	801b40 <_free_r+0x134>
  801cfc:	00815504 	movi	r2,1364
  801d00:	10c0032e 	bgeu	r2,r3,801d10 <_free_r+0x304>
  801d04:	00801f84 	movi	r2,126
  801d08:	00c0fc04 	movi	r3,1008
  801d0c:	003f8c06 	br	801b40 <_free_r+0x134>
  801d10:	3804d4ba 	srli	r2,r7,18
  801d14:	10801f04 	addi	r2,r2,124
  801d18:	100690fa 	slli	r3,r2,3
  801d1c:	003f8806 	br	801b40 <_free_r+0x134>

00801d20 <_fseek_r>:
  801d20:	deffe804 	addi	sp,sp,-96
  801d24:	dd801515 	stw	r22,84(sp)
  801d28:	dcc01215 	stw	r19,72(sp)
  801d2c:	dc801115 	stw	r18,68(sp)
  801d30:	dc000f15 	stw	r16,60(sp)
  801d34:	dfc01715 	stw	ra,92(sp)
  801d38:	ddc01615 	stw	r23,88(sp)
  801d3c:	dd401415 	stw	r21,80(sp)
  801d40:	dd001315 	stw	r20,76(sp)
  801d44:	dc401015 	stw	r17,64(sp)
  801d48:	2025883a 	mov	r18,r4
  801d4c:	2821883a 	mov	r16,r5
  801d50:	302d883a 	mov	r22,r6
  801d54:	3827883a 	mov	r19,r7
  801d58:	20000226 	beq	r4,zero,801d64 <_fseek_r+0x44>
  801d5c:	20800e17 	ldw	r2,56(r4)
  801d60:	10007826 	beq	r2,zero,801f44 <_fseek_r+0x224>
  801d64:	8080030b 	ldhu	r2,12(r16)
  801d68:	00c04204 	movi	r3,264
  801d6c:	1080420c 	andi	r2,r2,264
  801d70:	10c07926 	beq	r2,r3,801f58 <_fseek_r+0x238>
  801d74:	85400a17 	ldw	r21,40(r16)
  801d78:	a800ea26 	beq	r21,zero,802124 <_fseek_r+0x404>
  801d7c:	00800044 	movi	r2,1
  801d80:	98805f26 	beq	r19,r2,801f00 <_fseek_r+0x1e0>
  801d84:	00800084 	movi	r2,2
  801d88:	98801026 	beq	r19,r2,801dcc <_fseek_r+0xac>
  801d8c:	98000f26 	beq	r19,zero,801dcc <_fseek_r+0xac>
  801d90:	00800584 	movi	r2,22
  801d94:	013fffc4 	movi	r4,-1
  801d98:	90800015 	stw	r2,0(r18)
  801d9c:	2005883a 	mov	r2,r4
  801da0:	dfc01717 	ldw	ra,92(sp)
  801da4:	ddc01617 	ldw	r23,88(sp)
  801da8:	dd801517 	ldw	r22,84(sp)
  801dac:	dd401417 	ldw	r21,80(sp)
  801db0:	dd001317 	ldw	r20,76(sp)
  801db4:	dcc01217 	ldw	r19,72(sp)
  801db8:	dc801117 	ldw	r18,68(sp)
  801dbc:	dc401017 	ldw	r17,64(sp)
  801dc0:	dc000f17 	ldw	r16,60(sp)
  801dc4:	dec01804 	addi	sp,sp,96
  801dc8:	f800283a 	ret
  801dcc:	81800417 	ldw	r6,16(r16)
  801dd0:	0023883a 	mov	r17,zero
  801dd4:	002f883a 	mov	r23,zero
  801dd8:	3000a626 	beq	r6,zero,802074 <_fseek_r+0x354>
  801ddc:	8100030b 	ldhu	r4,12(r16)
  801de0:	2082068c 	andi	r2,r4,2074
  801de4:	1000081e 	bne	r2,zero,801e08 <_fseek_r+0xe8>
  801de8:	2081000c 	andi	r2,r4,1024
  801dec:	10001b1e 	bne	r2,zero,801e5c <_fseek_r+0x13c>
  801df0:	00802034 	movhi	r2,128
  801df4:	10900604 	addi	r2,r2,16408
  801df8:	a8800926 	beq	r21,r2,801e20 <_fseek_r+0x100>
  801dfc:	8080030b 	ldhu	r2,12(r16)
  801e00:	10820014 	ori	r2,r2,2048
  801e04:	8080030d 	sth	r2,12(r16)
  801e08:	9009883a 	mov	r4,r18
  801e0c:	800b883a 	mov	r5,r16
  801e10:	08010c80 	call	8010c8 <_fflush_r>
  801e14:	1000a326 	beq	r2,zero,8020a4 <_fseek_r+0x384>
  801e18:	013fffc4 	movi	r4,-1
  801e1c:	003fdf06 	br	801d9c <_fseek_r+0x7c>
  801e20:	8140038f 	ldh	r5,14(r16)
  801e24:	283ff516 	blt	r5,zero,801dfc <_fseek_r+0xdc>
  801e28:	9009883a 	mov	r4,r18
  801e2c:	d80d883a 	mov	r6,sp
  801e30:	08021800 	call	802180 <_fstat_r>
  801e34:	103ff11e 	bne	r2,zero,801dfc <_fseek_r+0xdc>
  801e38:	d8800117 	ldw	r2,4(sp)
  801e3c:	00e00014 	movui	r3,32768
  801e40:	10bc000c 	andi	r2,r2,61440
  801e44:	10ffed1e 	bne	r2,r3,801dfc <_fseek_r+0xdc>
  801e48:	80c0030b 	ldhu	r3,12(r16)
  801e4c:	00810004 	movi	r2,1024
  801e50:	80801315 	stw	r2,76(r16)
  801e54:	1886b03a 	or	r3,r3,r2
  801e58:	80c0030d 	sth	r3,12(r16)
  801e5c:	9800701e 	bne	r19,zero,802020 <_fseek_r+0x300>
  801e60:	b029883a 	mov	r20,r22
  801e64:	b804c03a 	cmpne	r2,r23,zero
  801e68:	10003f1e 	bne	r2,zero,801f68 <_fseek_r+0x248>
  801e6c:	8100030b 	ldhu	r4,12(r16)
  801e70:	2084000c 	andi	r2,r4,4096
  801e74:	1000a126 	beq	r2,zero,8020fc <_fseek_r+0x3dc>
  801e78:	81801417 	ldw	r6,80(r16)
  801e7c:	80c00117 	ldw	r3,4(r16)
  801e80:	81400c17 	ldw	r5,48(r16)
  801e84:	30e3c83a 	sub	r17,r6,r3
  801e88:	28008026 	beq	r5,zero,80208c <_fseek_r+0x36c>
  801e8c:	81c00f17 	ldw	r7,60(r16)
  801e90:	89e3c83a 	sub	r17,r17,r7
  801e94:	80800e17 	ldw	r2,56(r16)
  801e98:	81800417 	ldw	r6,16(r16)
  801e9c:	88c7883a 	add	r3,r17,r3
  801ea0:	1185c83a 	sub	r2,r2,r6
  801ea4:	11cf883a 	add	r7,r2,r7
  801ea8:	1887c83a 	sub	r3,r3,r2
  801eac:	2088000c 	andi	r2,r4,8192
  801eb0:	10003e1e 	bne	r2,zero,801fac <_fseek_r+0x28c>
  801eb4:	a0c03d16 	blt	r20,r3,801fac <_fseek_r+0x28c>
  801eb8:	38c5883a 	add	r2,r7,r3
  801ebc:	a0803b2e 	bgeu	r20,r2,801fac <_fseek_r+0x28c>
  801ec0:	a0c5c83a 	sub	r2,r20,r3
  801ec4:	3887c83a 	sub	r3,r7,r2
  801ec8:	3085883a 	add	r2,r6,r2
  801ecc:	80800015 	stw	r2,0(r16)
  801ed0:	80c00115 	stw	r3,4(r16)
  801ed4:	28000526 	beq	r5,zero,801eec <_fseek_r+0x1cc>
  801ed8:	80801004 	addi	r2,r16,64
  801edc:	28800226 	beq	r5,r2,801ee8 <_fseek_r+0x1c8>
  801ee0:	9009883a 	mov	r4,r18
  801ee4:	0801a0c0 	call	801a0c <_free_r>
  801ee8:	80000c15 	stw	zero,48(r16)
  801eec:	8080030b 	ldhu	r2,12(r16)
  801ef0:	0009883a 	mov	r4,zero
  801ef4:	10bff7cc 	andi	r2,r2,65503
  801ef8:	8080030d 	sth	r2,12(r16)
  801efc:	003fa706 	br	801d9c <_fseek_r+0x7c>
  801f00:	9009883a 	mov	r4,r18
  801f04:	800b883a 	mov	r5,r16
  801f08:	08010c80 	call	8010c8 <_fflush_r>
  801f0c:	8100030b 	ldhu	r4,12(r16)
  801f10:	2084000c 	andi	r2,r4,4096
  801f14:	10008726 	beq	r2,zero,802134 <_fseek_r+0x414>
  801f18:	84401417 	ldw	r17,80(r16)
  801f1c:	2080010c 	andi	r2,r4,4
  801f20:	1000171e 	bne	r2,zero,801f80 <_fseek_r+0x260>
  801f24:	2080020c 	andi	r2,r4,8
  801f28:	10003b26 	beq	r2,zero,802018 <_fseek_r+0x2f8>
  801f2c:	80800017 	ldw	r2,0(r16)
  801f30:	10003926 	beq	r2,zero,802018 <_fseek_r+0x2f8>
  801f34:	81800417 	ldw	r6,16(r16)
  801f38:	1185c83a 	sub	r2,r2,r6
  801f3c:	88a3883a 	add	r17,r17,r2
  801f40:	00001606 	br	801f9c <_fseek_r+0x27c>
  801f44:	08014880 	call	801488 <__sinit>
  801f48:	8080030b 	ldhu	r2,12(r16)
  801f4c:	00c04204 	movi	r3,264
  801f50:	1080420c 	andi	r2,r2,264
  801f54:	10ff871e 	bne	r2,r3,801d74 <_fseek_r+0x54>
  801f58:	9009883a 	mov	r4,r18
  801f5c:	800b883a 	mov	r5,r16
  801f60:	08010c80 	call	8010c8 <_fflush_r>
  801f64:	003f8306 	br	801d74 <_fseek_r+0x54>
  801f68:	81400c17 	ldw	r5,48(r16)
  801f6c:	28004526 	beq	r5,zero,802084 <_fseek_r+0x364>
  801f70:	8100030b 	ldhu	r4,12(r16)
  801f74:	80c00117 	ldw	r3,4(r16)
  801f78:	81c00f17 	ldw	r7,60(r16)
  801f7c:	003fc506 	br	801e94 <_fseek_r+0x174>
  801f80:	80c00117 	ldw	r3,4(r16)
  801f84:	80800c17 	ldw	r2,48(r16)
  801f88:	88e3c83a 	sub	r17,r17,r3
  801f8c:	10002226 	beq	r2,zero,802018 <_fseek_r+0x2f8>
  801f90:	81c00f17 	ldw	r7,60(r16)
  801f94:	81800417 	ldw	r6,16(r16)
  801f98:	89e3c83a 	sub	r17,r17,r7
  801f9c:	b46d883a 	add	r22,r22,r17
  801fa0:	0027883a 	mov	r19,zero
  801fa4:	05c00044 	movi	r23,1
  801fa8:	003f8b06 	br	801dd8 <_fseek_r+0xb8>
  801fac:	80801317 	ldw	r2,76(r16)
  801fb0:	81400717 	ldw	r5,28(r16)
  801fb4:	9009883a 	mov	r4,r18
  801fb8:	0085c83a 	sub	r2,zero,r2
  801fbc:	a0a2703a 	and	r17,r20,r2
  801fc0:	880d883a 	mov	r6,r17
  801fc4:	000f883a 	mov	r7,zero
  801fc8:	a83ee83a 	callr	r21
  801fcc:	00ffffc4 	movi	r3,-1
  801fd0:	10ff8d26 	beq	r2,r3,801e08 <_fseek_r+0xe8>
  801fd4:	80800417 	ldw	r2,16(r16)
  801fd8:	81400c17 	ldw	r5,48(r16)
  801fdc:	80000115 	stw	zero,4(r16)
  801fe0:	80800015 	stw	r2,0(r16)
  801fe4:	28000526 	beq	r5,zero,801ffc <_fseek_r+0x2dc>
  801fe8:	80801004 	addi	r2,r16,64
  801fec:	28800226 	beq	r5,r2,801ff8 <_fseek_r+0x2d8>
  801ff0:	9009883a 	mov	r4,r18
  801ff4:	0801a0c0 	call	801a0c <_free_r>
  801ff8:	80000c15 	stw	zero,48(r16)
  801ffc:	8080030b 	ldhu	r2,12(r16)
  802000:	a463c83a 	sub	r17,r20,r17
  802004:	10bff7cc 	andi	r2,r2,65503
  802008:	8080030d 	sth	r2,12(r16)
  80200c:	88000c1e 	bne	r17,zero,802040 <_fseek_r+0x320>
  802010:	0009883a 	mov	r4,zero
  802014:	003f6106 	br	801d9c <_fseek_r+0x7c>
  802018:	81800417 	ldw	r6,16(r16)
  80201c:	003fdf06 	br	801f9c <_fseek_r+0x27c>
  802020:	8140038f 	ldh	r5,14(r16)
  802024:	9009883a 	mov	r4,r18
  802028:	d80d883a 	mov	r6,sp
  80202c:	08021800 	call	802180 <_fstat_r>
  802030:	103f751e 	bne	r2,zero,801e08 <_fseek_r+0xe8>
  802034:	d8800417 	ldw	r2,16(sp)
  802038:	b0a9883a 	add	r20,r22,r2
  80203c:	003f8906 	br	801e64 <_fseek_r+0x144>
  802040:	9009883a 	mov	r4,r18
  802044:	800b883a 	mov	r5,r16
  802048:	0803b780 	call	803b78 <__srefill_r>
  80204c:	103f6e1e 	bne	r2,zero,801e08 <_fseek_r+0xe8>
  802050:	80c00117 	ldw	r3,4(r16)
  802054:	1c7f6c36 	bltu	r3,r17,801e08 <_fseek_r+0xe8>
  802058:	80800017 	ldw	r2,0(r16)
  80205c:	1c47c83a 	sub	r3,r3,r17
  802060:	0009883a 	mov	r4,zero
  802064:	1445883a 	add	r2,r2,r17
  802068:	80c00115 	stw	r3,4(r16)
  80206c:	80800015 	stw	r2,0(r16)
  802070:	003f4a06 	br	801d9c <_fseek_r+0x7c>
  802074:	9009883a 	mov	r4,r18
  802078:	800b883a 	mov	r5,r16
  80207c:	08028100 	call	802810 <__smakebuf_r>
  802080:	003f5606 	br	801ddc <_fseek_r+0xbc>
  802084:	8100030b 	ldhu	r4,12(r16)
  802088:	80c00117 	ldw	r3,4(r16)
  80208c:	80800017 	ldw	r2,0(r16)
  802090:	81800417 	ldw	r6,16(r16)
  802094:	1185c83a 	sub	r2,r2,r6
  802098:	10cf883a 	add	r7,r2,r3
  80209c:	8887c83a 	sub	r3,r17,r2
  8020a0:	003f8206 	br	801eac <_fseek_r+0x18c>
  8020a4:	81400717 	ldw	r5,28(r16)
  8020a8:	b00d883a 	mov	r6,r22
  8020ac:	980f883a 	mov	r7,r19
  8020b0:	9009883a 	mov	r4,r18
  8020b4:	a83ee83a 	callr	r21
  8020b8:	00ffffc4 	movi	r3,-1
  8020bc:	10ff5626 	beq	r2,r3,801e18 <_fseek_r+0xf8>
  8020c0:	81400c17 	ldw	r5,48(r16)
  8020c4:	28000526 	beq	r5,zero,8020dc <_fseek_r+0x3bc>
  8020c8:	80801004 	addi	r2,r16,64
  8020cc:	28800226 	beq	r5,r2,8020d8 <_fseek_r+0x3b8>
  8020d0:	9009883a 	mov	r4,r18
  8020d4:	0801a0c0 	call	801a0c <_free_r>
  8020d8:	80000c15 	stw	zero,48(r16)
  8020dc:	8080030b 	ldhu	r2,12(r16)
  8020e0:	80c00417 	ldw	r3,16(r16)
  8020e4:	0009883a 	mov	r4,zero
  8020e8:	10bdf7cc 	andi	r2,r2,63455
  8020ec:	8080030d 	sth	r2,12(r16)
  8020f0:	80c00015 	stw	r3,0(r16)
  8020f4:	80000115 	stw	zero,4(r16)
  8020f8:	003f2806 	br	801d9c <_fseek_r+0x7c>
  8020fc:	81400717 	ldw	r5,28(r16)
  802100:	000d883a 	mov	r6,zero
  802104:	9009883a 	mov	r4,r18
  802108:	01c00044 	movi	r7,1
  80210c:	a83ee83a 	callr	r21
  802110:	100d883a 	mov	r6,r2
  802114:	00bfffc4 	movi	r2,-1
  802118:	30bf3b26 	beq	r6,r2,801e08 <_fseek_r+0xe8>
  80211c:	8100030b 	ldhu	r4,12(r16)
  802120:	003f5606 	br	801e7c <_fseek_r+0x15c>
  802124:	00800744 	movi	r2,29
  802128:	013fffc4 	movi	r4,-1
  80212c:	90800015 	stw	r2,0(r18)
  802130:	003f1a06 	br	801d9c <_fseek_r+0x7c>
  802134:	81400717 	ldw	r5,28(r16)
  802138:	980f883a 	mov	r7,r19
  80213c:	9009883a 	mov	r4,r18
  802140:	000d883a 	mov	r6,zero
  802144:	a83ee83a 	callr	r21
  802148:	1023883a 	mov	r17,r2
  80214c:	00bfffc4 	movi	r2,-1
  802150:	88bf3126 	beq	r17,r2,801e18 <_fseek_r+0xf8>
  802154:	8100030b 	ldhu	r4,12(r16)
  802158:	003f7006 	br	801f1c <_fseek_r+0x1fc>

0080215c <fseek>:
  80215c:	00802074 	movhi	r2,129
  802160:	109be504 	addi	r2,r2,28564
  802164:	2013883a 	mov	r9,r4
  802168:	11000017 	ldw	r4,0(r2)
  80216c:	2805883a 	mov	r2,r5
  802170:	300f883a 	mov	r7,r6
  802174:	480b883a 	mov	r5,r9
  802178:	100d883a 	mov	r6,r2
  80217c:	0801d201 	jmpi	801d20 <_fseek_r>

00802180 <_fstat_r>:
  802180:	defffd04 	addi	sp,sp,-12
  802184:	dc000015 	stw	r16,0(sp)
  802188:	040020b4 	movhi	r16,130
  80218c:	84233b04 	addi	r16,r16,-29460
  802190:	dc400115 	stw	r17,4(sp)
  802194:	80000015 	stw	zero,0(r16)
  802198:	2023883a 	mov	r17,r4
  80219c:	2809883a 	mov	r4,r5
  8021a0:	300b883a 	mov	r5,r6
  8021a4:	dfc00215 	stw	ra,8(sp)
  8021a8:	081078c0 	call	81078c <fstat>
  8021ac:	1007883a 	mov	r3,r2
  8021b0:	00bfffc4 	movi	r2,-1
  8021b4:	18800626 	beq	r3,r2,8021d0 <_fstat_r+0x50>
  8021b8:	1805883a 	mov	r2,r3
  8021bc:	dfc00217 	ldw	ra,8(sp)
  8021c0:	dc400117 	ldw	r17,4(sp)
  8021c4:	dc000017 	ldw	r16,0(sp)
  8021c8:	dec00304 	addi	sp,sp,12
  8021cc:	f800283a 	ret
  8021d0:	80800017 	ldw	r2,0(r16)
  8021d4:	103ff826 	beq	r2,zero,8021b8 <_fstat_r+0x38>
  8021d8:	88800015 	stw	r2,0(r17)
  8021dc:	1805883a 	mov	r2,r3
  8021e0:	dfc00217 	ldw	ra,8(sp)
  8021e4:	dc400117 	ldw	r17,4(sp)
  8021e8:	dc000017 	ldw	r16,0(sp)
  8021ec:	dec00304 	addi	sp,sp,12
  8021f0:	f800283a 	ret

008021f4 <__sfvwrite_r>:
  8021f4:	30800217 	ldw	r2,8(r6)
  8021f8:	defff504 	addi	sp,sp,-44
  8021fc:	df000915 	stw	fp,36(sp)
  802200:	dd800715 	stw	r22,28(sp)
  802204:	dc800315 	stw	r18,12(sp)
  802208:	dfc00a15 	stw	ra,40(sp)
  80220c:	ddc00815 	stw	r23,32(sp)
  802210:	dd400615 	stw	r21,24(sp)
  802214:	dd000515 	stw	r20,20(sp)
  802218:	dcc00415 	stw	r19,16(sp)
  80221c:	dc400215 	stw	r17,8(sp)
  802220:	dc000115 	stw	r16,4(sp)
  802224:	302d883a 	mov	r22,r6
  802228:	2039883a 	mov	fp,r4
  80222c:	2825883a 	mov	r18,r5
  802230:	10001c26 	beq	r2,zero,8022a4 <__sfvwrite_r+0xb0>
  802234:	29c0030b 	ldhu	r7,12(r5)
  802238:	3880020c 	andi	r2,r7,8
  80223c:	10002726 	beq	r2,zero,8022dc <__sfvwrite_r+0xe8>
  802240:	28800417 	ldw	r2,16(r5)
  802244:	10002526 	beq	r2,zero,8022dc <__sfvwrite_r+0xe8>
  802248:	3880008c 	andi	r2,r7,2
  80224c:	b5400017 	ldw	r21,0(r22)
  802250:	10002826 	beq	r2,zero,8022f4 <__sfvwrite_r+0x100>
  802254:	0021883a 	mov	r16,zero
  802258:	0023883a 	mov	r17,zero
  80225c:	880d883a 	mov	r6,r17
  802260:	e009883a 	mov	r4,fp
  802264:	00810004 	movi	r2,1024
  802268:	80006e26 	beq	r16,zero,802424 <__sfvwrite_r+0x230>
  80226c:	800f883a 	mov	r7,r16
  802270:	91400717 	ldw	r5,28(r18)
  802274:	1400012e 	bgeu	r2,r16,80227c <__sfvwrite_r+0x88>
  802278:	100f883a 	mov	r7,r2
  80227c:	90c00917 	ldw	r3,36(r18)
  802280:	183ee83a 	callr	r3
  802284:	1007883a 	mov	r3,r2
  802288:	80a1c83a 	sub	r16,r16,r2
  80228c:	88a3883a 	add	r17,r17,r2
  802290:	00806d0e 	bge	zero,r2,802448 <__sfvwrite_r+0x254>
  802294:	b0800217 	ldw	r2,8(r22)
  802298:	10c5c83a 	sub	r2,r2,r3
  80229c:	b0800215 	stw	r2,8(r22)
  8022a0:	103fee1e 	bne	r2,zero,80225c <__sfvwrite_r+0x68>
  8022a4:	0009883a 	mov	r4,zero
  8022a8:	2005883a 	mov	r2,r4
  8022ac:	dfc00a17 	ldw	ra,40(sp)
  8022b0:	df000917 	ldw	fp,36(sp)
  8022b4:	ddc00817 	ldw	r23,32(sp)
  8022b8:	dd800717 	ldw	r22,28(sp)
  8022bc:	dd400617 	ldw	r21,24(sp)
  8022c0:	dd000517 	ldw	r20,20(sp)
  8022c4:	dcc00417 	ldw	r19,16(sp)
  8022c8:	dc800317 	ldw	r18,12(sp)
  8022cc:	dc400217 	ldw	r17,8(sp)
  8022d0:	dc000117 	ldw	r16,4(sp)
  8022d4:	dec00b04 	addi	sp,sp,44
  8022d8:	f800283a 	ret
  8022dc:	08078f00 	call	8078f0 <__swsetup_r>
  8022e0:	1000e41e 	bne	r2,zero,802674 <__sfvwrite_r+0x480>
  8022e4:	91c0030b 	ldhu	r7,12(r18)
  8022e8:	b5400017 	ldw	r21,0(r22)
  8022ec:	3880008c 	andi	r2,r7,2
  8022f0:	103fd81e 	bne	r2,zero,802254 <__sfvwrite_r+0x60>
  8022f4:	3880004c 	andi	r2,r7,1
  8022f8:	1005003a 	cmpeq	r2,r2,zero
  8022fc:	10005726 	beq	r2,zero,80245c <__sfvwrite_r+0x268>
  802300:	0029883a 	mov	r20,zero
  802304:	002f883a 	mov	r23,zero
  802308:	a0004226 	beq	r20,zero,802414 <__sfvwrite_r+0x220>
  80230c:	3880800c 	andi	r2,r7,512
  802310:	94000217 	ldw	r16,8(r18)
  802314:	10008b26 	beq	r2,zero,802544 <__sfvwrite_r+0x350>
  802318:	800d883a 	mov	r6,r16
  80231c:	a400a536 	bltu	r20,r16,8025b4 <__sfvwrite_r+0x3c0>
  802320:	3881200c 	andi	r2,r7,1152
  802324:	10002726 	beq	r2,zero,8023c4 <__sfvwrite_r+0x1d0>
  802328:	90800517 	ldw	r2,20(r18)
  80232c:	92000417 	ldw	r8,16(r18)
  802330:	91400017 	ldw	r5,0(r18)
  802334:	1087883a 	add	r3,r2,r2
  802338:	1887883a 	add	r3,r3,r2
  80233c:	1808d7fa 	srli	r4,r3,31
  802340:	2a21c83a 	sub	r16,r5,r8
  802344:	80800044 	addi	r2,r16,1
  802348:	20c9883a 	add	r4,r4,r3
  80234c:	2027d07a 	srai	r19,r4,1
  802350:	a085883a 	add	r2,r20,r2
  802354:	980d883a 	mov	r6,r19
  802358:	9880022e 	bgeu	r19,r2,802364 <__sfvwrite_r+0x170>
  80235c:	1027883a 	mov	r19,r2
  802360:	100d883a 	mov	r6,r2
  802364:	3881000c 	andi	r2,r7,1024
  802368:	1000b826 	beq	r2,zero,80264c <__sfvwrite_r+0x458>
  80236c:	300b883a 	mov	r5,r6
  802370:	e009883a 	mov	r4,fp
  802374:	08029a40 	call	8029a4 <_malloc_r>
  802378:	10003126 	beq	r2,zero,802440 <__sfvwrite_r+0x24c>
  80237c:	91400417 	ldw	r5,16(r18)
  802380:	1009883a 	mov	r4,r2
  802384:	800d883a 	mov	r6,r16
  802388:	1023883a 	mov	r17,r2
  80238c:	08031c80 	call	8031c8 <memcpy>
  802390:	90c0030b 	ldhu	r3,12(r18)
  802394:	00beffc4 	movi	r2,-1025
  802398:	1886703a 	and	r3,r3,r2
  80239c:	18c02014 	ori	r3,r3,128
  8023a0:	90c0030d 	sth	r3,12(r18)
  8023a4:	9c07c83a 	sub	r3,r19,r16
  8023a8:	8c05883a 	add	r2,r17,r16
  8023ac:	a00d883a 	mov	r6,r20
  8023b0:	a021883a 	mov	r16,r20
  8023b4:	90800015 	stw	r2,0(r18)
  8023b8:	90c00215 	stw	r3,8(r18)
  8023bc:	94400415 	stw	r17,16(r18)
  8023c0:	94c00515 	stw	r19,20(r18)
  8023c4:	91000017 	ldw	r4,0(r18)
  8023c8:	b80b883a 	mov	r5,r23
  8023cc:	a023883a 	mov	r17,r20
  8023d0:	08032680 	call	803268 <memmove>
  8023d4:	90c00217 	ldw	r3,8(r18)
  8023d8:	90800017 	ldw	r2,0(r18)
  8023dc:	a027883a 	mov	r19,r20
  8023e0:	1c07c83a 	sub	r3,r3,r16
  8023e4:	1405883a 	add	r2,r2,r16
  8023e8:	90c00215 	stw	r3,8(r18)
  8023ec:	a021883a 	mov	r16,r20
  8023f0:	90800015 	stw	r2,0(r18)
  8023f4:	b0800217 	ldw	r2,8(r22)
  8023f8:	1405c83a 	sub	r2,r2,r16
  8023fc:	b0800215 	stw	r2,8(r22)
  802400:	103fa826 	beq	r2,zero,8022a4 <__sfvwrite_r+0xb0>
  802404:	a469c83a 	sub	r20,r20,r17
  802408:	91c0030b 	ldhu	r7,12(r18)
  80240c:	bcef883a 	add	r23,r23,r19
  802410:	a03fbe1e 	bne	r20,zero,80230c <__sfvwrite_r+0x118>
  802414:	adc00017 	ldw	r23,0(r21)
  802418:	ad000117 	ldw	r20,4(r21)
  80241c:	ad400204 	addi	r21,r21,8
  802420:	003fb906 	br	802308 <__sfvwrite_r+0x114>
  802424:	ac400017 	ldw	r17,0(r21)
  802428:	ac000117 	ldw	r16,4(r21)
  80242c:	ad400204 	addi	r21,r21,8
  802430:	003f8a06 	br	80225c <__sfvwrite_r+0x68>
  802434:	91400417 	ldw	r5,16(r18)
  802438:	e009883a 	mov	r4,fp
  80243c:	0801a0c0 	call	801a0c <_free_r>
  802440:	00800304 	movi	r2,12
  802444:	e0800015 	stw	r2,0(fp)
  802448:	9080030b 	ldhu	r2,12(r18)
  80244c:	013fffc4 	movi	r4,-1
  802450:	10801014 	ori	r2,r2,64
  802454:	9080030d 	sth	r2,12(r18)
  802458:	003f9306 	br	8022a8 <__sfvwrite_r+0xb4>
  80245c:	0027883a 	mov	r19,zero
  802460:	002f883a 	mov	r23,zero
  802464:	d8000015 	stw	zero,0(sp)
  802468:	0029883a 	mov	r20,zero
  80246c:	98001e26 	beq	r19,zero,8024e8 <__sfvwrite_r+0x2f4>
  802470:	d8c00017 	ldw	r3,0(sp)
  802474:	1804c03a 	cmpne	r2,r3,zero
  802478:	10005e26 	beq	r2,zero,8025f4 <__sfvwrite_r+0x400>
  80247c:	9821883a 	mov	r16,r19
  802480:	a4c0012e 	bgeu	r20,r19,802488 <__sfvwrite_r+0x294>
  802484:	a021883a 	mov	r16,r20
  802488:	91000017 	ldw	r4,0(r18)
  80248c:	90800417 	ldw	r2,16(r18)
  802490:	91800217 	ldw	r6,8(r18)
  802494:	91c00517 	ldw	r7,20(r18)
  802498:	1100022e 	bgeu	r2,r4,8024a4 <__sfvwrite_r+0x2b0>
  80249c:	31e3883a 	add	r17,r6,r7
  8024a0:	8c001616 	blt	r17,r16,8024fc <__sfvwrite_r+0x308>
  8024a4:	81c03816 	blt	r16,r7,802588 <__sfvwrite_r+0x394>
  8024a8:	90c00917 	ldw	r3,36(r18)
  8024ac:	91400717 	ldw	r5,28(r18)
  8024b0:	e009883a 	mov	r4,fp
  8024b4:	b80d883a 	mov	r6,r23
  8024b8:	183ee83a 	callr	r3
  8024bc:	1023883a 	mov	r17,r2
  8024c0:	00bfe10e 	bge	zero,r2,802448 <__sfvwrite_r+0x254>
  8024c4:	a469c83a 	sub	r20,r20,r17
  8024c8:	a0001826 	beq	r20,zero,80252c <__sfvwrite_r+0x338>
  8024cc:	b0800217 	ldw	r2,8(r22)
  8024d0:	1445c83a 	sub	r2,r2,r17
  8024d4:	b0800215 	stw	r2,8(r22)
  8024d8:	103f7226 	beq	r2,zero,8022a4 <__sfvwrite_r+0xb0>
  8024dc:	9c67c83a 	sub	r19,r19,r17
  8024e0:	bc6f883a 	add	r23,r23,r17
  8024e4:	983fe21e 	bne	r19,zero,802470 <__sfvwrite_r+0x27c>
  8024e8:	adc00017 	ldw	r23,0(r21)
  8024ec:	acc00117 	ldw	r19,4(r21)
  8024f0:	ad400204 	addi	r21,r21,8
  8024f4:	d8000015 	stw	zero,0(sp)
  8024f8:	003fdc06 	br	80246c <__sfvwrite_r+0x278>
  8024fc:	b80b883a 	mov	r5,r23
  802500:	880d883a 	mov	r6,r17
  802504:	08032680 	call	803268 <memmove>
  802508:	90c00017 	ldw	r3,0(r18)
  80250c:	e009883a 	mov	r4,fp
  802510:	900b883a 	mov	r5,r18
  802514:	1c47883a 	add	r3,r3,r17
  802518:	90c00015 	stw	r3,0(r18)
  80251c:	08010c80 	call	8010c8 <_fflush_r>
  802520:	103fc91e 	bne	r2,zero,802448 <__sfvwrite_r+0x254>
  802524:	a469c83a 	sub	r20,r20,r17
  802528:	a03fe81e 	bne	r20,zero,8024cc <__sfvwrite_r+0x2d8>
  80252c:	e009883a 	mov	r4,fp
  802530:	900b883a 	mov	r5,r18
  802534:	08010c80 	call	8010c8 <_fflush_r>
  802538:	103fc31e 	bne	r2,zero,802448 <__sfvwrite_r+0x254>
  80253c:	d8000015 	stw	zero,0(sp)
  802540:	003fe206 	br	8024cc <__sfvwrite_r+0x2d8>
  802544:	91000017 	ldw	r4,0(r18)
  802548:	90800417 	ldw	r2,16(r18)
  80254c:	1100022e 	bgeu	r2,r4,802558 <__sfvwrite_r+0x364>
  802550:	8023883a 	mov	r17,r16
  802554:	85003136 	bltu	r16,r20,80261c <__sfvwrite_r+0x428>
  802558:	91c00517 	ldw	r7,20(r18)
  80255c:	a1c01836 	bltu	r20,r7,8025c0 <__sfvwrite_r+0x3cc>
  802560:	90c00917 	ldw	r3,36(r18)
  802564:	91400717 	ldw	r5,28(r18)
  802568:	e009883a 	mov	r4,fp
  80256c:	b80d883a 	mov	r6,r23
  802570:	183ee83a 	callr	r3
  802574:	1021883a 	mov	r16,r2
  802578:	00bfb30e 	bge	zero,r2,802448 <__sfvwrite_r+0x254>
  80257c:	1023883a 	mov	r17,r2
  802580:	1027883a 	mov	r19,r2
  802584:	003f9b06 	br	8023f4 <__sfvwrite_r+0x200>
  802588:	b80b883a 	mov	r5,r23
  80258c:	800d883a 	mov	r6,r16
  802590:	08032680 	call	803268 <memmove>
  802594:	90c00217 	ldw	r3,8(r18)
  802598:	90800017 	ldw	r2,0(r18)
  80259c:	8023883a 	mov	r17,r16
  8025a0:	1c07c83a 	sub	r3,r3,r16
  8025a4:	1405883a 	add	r2,r2,r16
  8025a8:	90c00215 	stw	r3,8(r18)
  8025ac:	90800015 	stw	r2,0(r18)
  8025b0:	003fc406 	br	8024c4 <__sfvwrite_r+0x2d0>
  8025b4:	a00d883a 	mov	r6,r20
  8025b8:	a021883a 	mov	r16,r20
  8025bc:	003f8106 	br	8023c4 <__sfvwrite_r+0x1d0>
  8025c0:	b80b883a 	mov	r5,r23
  8025c4:	a00d883a 	mov	r6,r20
  8025c8:	08032680 	call	803268 <memmove>
  8025cc:	90c00217 	ldw	r3,8(r18)
  8025d0:	90800017 	ldw	r2,0(r18)
  8025d4:	a021883a 	mov	r16,r20
  8025d8:	1d07c83a 	sub	r3,r3,r20
  8025dc:	1505883a 	add	r2,r2,r20
  8025e0:	a023883a 	mov	r17,r20
  8025e4:	a027883a 	mov	r19,r20
  8025e8:	90c00215 	stw	r3,8(r18)
  8025ec:	90800015 	stw	r2,0(r18)
  8025f0:	003f8006 	br	8023f4 <__sfvwrite_r+0x200>
  8025f4:	b809883a 	mov	r4,r23
  8025f8:	01400284 	movi	r5,10
  8025fc:	980d883a 	mov	r6,r19
  802600:	08030e40 	call	8030e4 <memchr>
  802604:	10001726 	beq	r2,zero,802664 <__sfvwrite_r+0x470>
  802608:	15c5c83a 	sub	r2,r2,r23
  80260c:	15000044 	addi	r20,r2,1
  802610:	00800044 	movi	r2,1
  802614:	d8800015 	stw	r2,0(sp)
  802618:	003f9806 	br	80247c <__sfvwrite_r+0x288>
  80261c:	b80b883a 	mov	r5,r23
  802620:	800d883a 	mov	r6,r16
  802624:	08032680 	call	803268 <memmove>
  802628:	90c00017 	ldw	r3,0(r18)
  80262c:	e009883a 	mov	r4,fp
  802630:	900b883a 	mov	r5,r18
  802634:	1c07883a 	add	r3,r3,r16
  802638:	90c00015 	stw	r3,0(r18)
  80263c:	8027883a 	mov	r19,r16
  802640:	08010c80 	call	8010c8 <_fflush_r>
  802644:	103f6b26 	beq	r2,zero,8023f4 <__sfvwrite_r+0x200>
  802648:	003f7f06 	br	802448 <__sfvwrite_r+0x254>
  80264c:	400b883a 	mov	r5,r8
  802650:	e009883a 	mov	r4,fp
  802654:	08035840 	call	803584 <_realloc_r>
  802658:	103f7626 	beq	r2,zero,802434 <__sfvwrite_r+0x240>
  80265c:	1023883a 	mov	r17,r2
  802660:	003f5006 	br	8023a4 <__sfvwrite_r+0x1b0>
  802664:	00c00044 	movi	r3,1
  802668:	9d000044 	addi	r20,r19,1
  80266c:	d8c00015 	stw	r3,0(sp)
  802670:	003f8206 	br	80247c <__sfvwrite_r+0x288>
  802674:	9080030b 	ldhu	r2,12(r18)
  802678:	00c00244 	movi	r3,9
  80267c:	013fffc4 	movi	r4,-1
  802680:	10801014 	ori	r2,r2,64
  802684:	9080030d 	sth	r2,12(r18)
  802688:	e0c00015 	stw	r3,0(fp)
  80268c:	003f0606 	br	8022a8 <__sfvwrite_r+0xb4>

00802690 <_fwalk_reent>:
  802690:	defff704 	addi	sp,sp,-36
  802694:	dcc00315 	stw	r19,12(sp)
  802698:	24c0b804 	addi	r19,r4,736
  80269c:	dd800615 	stw	r22,24(sp)
  8026a0:	dd400515 	stw	r21,20(sp)
  8026a4:	dfc00815 	stw	ra,32(sp)
  8026a8:	ddc00715 	stw	r23,28(sp)
  8026ac:	dd000415 	stw	r20,16(sp)
  8026b0:	dc800215 	stw	r18,8(sp)
  8026b4:	dc400115 	stw	r17,4(sp)
  8026b8:	dc000015 	stw	r16,0(sp)
  8026bc:	202b883a 	mov	r21,r4
  8026c0:	282d883a 	mov	r22,r5
  8026c4:	08014780 	call	801478 <__sfp_lock_acquire>
  8026c8:	98002126 	beq	r19,zero,802750 <_fwalk_reent+0xc0>
  8026cc:	002f883a 	mov	r23,zero
  8026d0:	9c800117 	ldw	r18,4(r19)
  8026d4:	9c000217 	ldw	r16,8(r19)
  8026d8:	90bfffc4 	addi	r2,r18,-1
  8026dc:	10000d16 	blt	r2,zero,802714 <_fwalk_reent+0x84>
  8026e0:	0023883a 	mov	r17,zero
  8026e4:	053fffc4 	movi	r20,-1
  8026e8:	8080030f 	ldh	r2,12(r16)
  8026ec:	8c400044 	addi	r17,r17,1
  8026f0:	10000626 	beq	r2,zero,80270c <_fwalk_reent+0x7c>
  8026f4:	8080038f 	ldh	r2,14(r16)
  8026f8:	800b883a 	mov	r5,r16
  8026fc:	a809883a 	mov	r4,r21
  802700:	15000226 	beq	r2,r20,80270c <_fwalk_reent+0x7c>
  802704:	b03ee83a 	callr	r22
  802708:	b8aeb03a 	or	r23,r23,r2
  80270c:	84001704 	addi	r16,r16,92
  802710:	947ff51e 	bne	r18,r17,8026e8 <_fwalk_reent+0x58>
  802714:	9cc00017 	ldw	r19,0(r19)
  802718:	983fed1e 	bne	r19,zero,8026d0 <_fwalk_reent+0x40>
  80271c:	080147c0 	call	80147c <__sfp_lock_release>
  802720:	b805883a 	mov	r2,r23
  802724:	dfc00817 	ldw	ra,32(sp)
  802728:	ddc00717 	ldw	r23,28(sp)
  80272c:	dd800617 	ldw	r22,24(sp)
  802730:	dd400517 	ldw	r21,20(sp)
  802734:	dd000417 	ldw	r20,16(sp)
  802738:	dcc00317 	ldw	r19,12(sp)
  80273c:	dc800217 	ldw	r18,8(sp)
  802740:	dc400117 	ldw	r17,4(sp)
  802744:	dc000017 	ldw	r16,0(sp)
  802748:	dec00904 	addi	sp,sp,36
  80274c:	f800283a 	ret
  802750:	002f883a 	mov	r23,zero
  802754:	003ff106 	br	80271c <_fwalk_reent+0x8c>

00802758 <_fwalk>:
  802758:	defff804 	addi	sp,sp,-32
  80275c:	dcc00315 	stw	r19,12(sp)
  802760:	24c0b804 	addi	r19,r4,736
  802764:	dd400515 	stw	r21,20(sp)
  802768:	dfc00715 	stw	ra,28(sp)
  80276c:	dd800615 	stw	r22,24(sp)
  802770:	dd000415 	stw	r20,16(sp)
  802774:	dc800215 	stw	r18,8(sp)
  802778:	dc400115 	stw	r17,4(sp)
  80277c:	dc000015 	stw	r16,0(sp)
  802780:	282b883a 	mov	r21,r5
  802784:	08014780 	call	801478 <__sfp_lock_acquire>
  802788:	98001f26 	beq	r19,zero,802808 <_fwalk+0xb0>
  80278c:	002d883a 	mov	r22,zero
  802790:	9c800117 	ldw	r18,4(r19)
  802794:	9c000217 	ldw	r16,8(r19)
  802798:	90bfffc4 	addi	r2,r18,-1
  80279c:	10000c16 	blt	r2,zero,8027d0 <_fwalk+0x78>
  8027a0:	0023883a 	mov	r17,zero
  8027a4:	053fffc4 	movi	r20,-1
  8027a8:	8080030f 	ldh	r2,12(r16)
  8027ac:	8c400044 	addi	r17,r17,1
  8027b0:	10000526 	beq	r2,zero,8027c8 <_fwalk+0x70>
  8027b4:	8080038f 	ldh	r2,14(r16)
  8027b8:	8009883a 	mov	r4,r16
  8027bc:	15000226 	beq	r2,r20,8027c8 <_fwalk+0x70>
  8027c0:	a83ee83a 	callr	r21
  8027c4:	b0acb03a 	or	r22,r22,r2
  8027c8:	84001704 	addi	r16,r16,92
  8027cc:	947ff61e 	bne	r18,r17,8027a8 <_fwalk+0x50>
  8027d0:	9cc00017 	ldw	r19,0(r19)
  8027d4:	983fee1e 	bne	r19,zero,802790 <_fwalk+0x38>
  8027d8:	080147c0 	call	80147c <__sfp_lock_release>
  8027dc:	b005883a 	mov	r2,r22
  8027e0:	dfc00717 	ldw	ra,28(sp)
  8027e4:	dd800617 	ldw	r22,24(sp)
  8027e8:	dd400517 	ldw	r21,20(sp)
  8027ec:	dd000417 	ldw	r20,16(sp)
  8027f0:	dcc00317 	ldw	r19,12(sp)
  8027f4:	dc800217 	ldw	r18,8(sp)
  8027f8:	dc400117 	ldw	r17,4(sp)
  8027fc:	dc000017 	ldw	r16,0(sp)
  802800:	dec00804 	addi	sp,sp,32
  802804:	f800283a 	ret
  802808:	002d883a 	mov	r22,zero
  80280c:	003ff206 	br	8027d8 <_fwalk+0x80>

00802810 <__smakebuf_r>:
  802810:	2880030b 	ldhu	r2,12(r5)
  802814:	deffed04 	addi	sp,sp,-76
  802818:	dc401015 	stw	r17,64(sp)
  80281c:	1080008c 	andi	r2,r2,2
  802820:	dc000f15 	stw	r16,60(sp)
  802824:	dfc01215 	stw	ra,72(sp)
  802828:	dc801115 	stw	r18,68(sp)
  80282c:	2821883a 	mov	r16,r5
  802830:	2023883a 	mov	r17,r4
  802834:	10000b26 	beq	r2,zero,802864 <__smakebuf_r+0x54>
  802838:	28c010c4 	addi	r3,r5,67
  80283c:	00800044 	movi	r2,1
  802840:	28800515 	stw	r2,20(r5)
  802844:	28c00415 	stw	r3,16(r5)
  802848:	28c00015 	stw	r3,0(r5)
  80284c:	dfc01217 	ldw	ra,72(sp)
  802850:	dc801117 	ldw	r18,68(sp)
  802854:	dc401017 	ldw	r17,64(sp)
  802858:	dc000f17 	ldw	r16,60(sp)
  80285c:	dec01304 	addi	sp,sp,76
  802860:	f800283a 	ret
  802864:	2940038f 	ldh	r5,14(r5)
  802868:	28002116 	blt	r5,zero,8028f0 <__smakebuf_r+0xe0>
  80286c:	d80d883a 	mov	r6,sp
  802870:	08021800 	call	802180 <_fstat_r>
  802874:	10001e16 	blt	r2,zero,8028f0 <__smakebuf_r+0xe0>
  802878:	d8800117 	ldw	r2,4(sp)
  80287c:	00e00014 	movui	r3,32768
  802880:	113c000c 	andi	r4,r2,61440
  802884:	20c03126 	beq	r4,r3,80294c <__smakebuf_r+0x13c>
  802888:	8080030b 	ldhu	r2,12(r16)
  80288c:	00c80004 	movi	r3,8192
  802890:	10820014 	ori	r2,r2,2048
  802894:	8080030d 	sth	r2,12(r16)
  802898:	20c01e26 	beq	r4,r3,802914 <__smakebuf_r+0x104>
  80289c:	04810004 	movi	r18,1024
  8028a0:	8809883a 	mov	r4,r17
  8028a4:	900b883a 	mov	r5,r18
  8028a8:	08029a40 	call	8029a4 <_malloc_r>
  8028ac:	1009883a 	mov	r4,r2
  8028b0:	10003126 	beq	r2,zero,802978 <__smakebuf_r+0x168>
  8028b4:	80c0030b 	ldhu	r3,12(r16)
  8028b8:	00802034 	movhi	r2,128
  8028bc:	10855b04 	addi	r2,r2,5484
  8028c0:	88800f15 	stw	r2,60(r17)
  8028c4:	18c02014 	ori	r3,r3,128
  8028c8:	84800515 	stw	r18,20(r16)
  8028cc:	80c0030d 	sth	r3,12(r16)
  8028d0:	81000415 	stw	r4,16(r16)
  8028d4:	81000015 	stw	r4,0(r16)
  8028d8:	dfc01217 	ldw	ra,72(sp)
  8028dc:	dc801117 	ldw	r18,68(sp)
  8028e0:	dc401017 	ldw	r17,64(sp)
  8028e4:	dc000f17 	ldw	r16,60(sp)
  8028e8:	dec01304 	addi	sp,sp,76
  8028ec:	f800283a 	ret
  8028f0:	80c0030b 	ldhu	r3,12(r16)
  8028f4:	1880200c 	andi	r2,r3,128
  8028f8:	10000426 	beq	r2,zero,80290c <__smakebuf_r+0xfc>
  8028fc:	04801004 	movi	r18,64
  802900:	18820014 	ori	r2,r3,2048
  802904:	8080030d 	sth	r2,12(r16)
  802908:	003fe506 	br	8028a0 <__smakebuf_r+0x90>
  80290c:	04810004 	movi	r18,1024
  802910:	003ffb06 	br	802900 <__smakebuf_r+0xf0>
  802914:	8140038f 	ldh	r5,14(r16)
  802918:	8809883a 	mov	r4,r17
  80291c:	08095440 	call	809544 <_isatty_r>
  802920:	103fde26 	beq	r2,zero,80289c <__smakebuf_r+0x8c>
  802924:	8080030b 	ldhu	r2,12(r16)
  802928:	80c010c4 	addi	r3,r16,67
  80292c:	04810004 	movi	r18,1024
  802930:	10800054 	ori	r2,r2,1
  802934:	8080030d 	sth	r2,12(r16)
  802938:	00800044 	movi	r2,1
  80293c:	80c00415 	stw	r3,16(r16)
  802940:	80800515 	stw	r2,20(r16)
  802944:	80c00015 	stw	r3,0(r16)
  802948:	003fd506 	br	8028a0 <__smakebuf_r+0x90>
  80294c:	80c00a17 	ldw	r3,40(r16)
  802950:	00802034 	movhi	r2,128
  802954:	10900604 	addi	r2,r2,16408
  802958:	18bfcb1e 	bne	r3,r2,802888 <__smakebuf_r+0x78>
  80295c:	8080030b 	ldhu	r2,12(r16)
  802960:	00c10004 	movi	r3,1024
  802964:	1825883a 	mov	r18,r3
  802968:	10c4b03a 	or	r2,r2,r3
  80296c:	8080030d 	sth	r2,12(r16)
  802970:	80c01315 	stw	r3,76(r16)
  802974:	003fca06 	br	8028a0 <__smakebuf_r+0x90>
  802978:	8100030b 	ldhu	r4,12(r16)
  80297c:	2080800c 	andi	r2,r4,512
  802980:	103fb21e 	bne	r2,zero,80284c <__smakebuf_r+0x3c>
  802984:	80c010c4 	addi	r3,r16,67
  802988:	21000094 	ori	r4,r4,2
  80298c:	00800044 	movi	r2,1
  802990:	80800515 	stw	r2,20(r16)
  802994:	8100030d 	sth	r4,12(r16)
  802998:	80c00415 	stw	r3,16(r16)
  80299c:	80c00015 	stw	r3,0(r16)
  8029a0:	003faa06 	br	80284c <__smakebuf_r+0x3c>

008029a4 <_malloc_r>:
  8029a4:	defff604 	addi	sp,sp,-40
  8029a8:	28c002c4 	addi	r3,r5,11
  8029ac:	00800584 	movi	r2,22
  8029b0:	dc800215 	stw	r18,8(sp)
  8029b4:	dfc00915 	stw	ra,36(sp)
  8029b8:	df000815 	stw	fp,32(sp)
  8029bc:	ddc00715 	stw	r23,28(sp)
  8029c0:	dd800615 	stw	r22,24(sp)
  8029c4:	dd400515 	stw	r21,20(sp)
  8029c8:	dd000415 	stw	r20,16(sp)
  8029cc:	dcc00315 	stw	r19,12(sp)
  8029d0:	dc400115 	stw	r17,4(sp)
  8029d4:	dc000015 	stw	r16,0(sp)
  8029d8:	2025883a 	mov	r18,r4
  8029dc:	10c01236 	bltu	r2,r3,802a28 <_malloc_r+0x84>
  8029e0:	04400404 	movi	r17,16
  8029e4:	8940142e 	bgeu	r17,r5,802a38 <_malloc_r+0x94>
  8029e8:	00800304 	movi	r2,12
  8029ec:	0007883a 	mov	r3,zero
  8029f0:	90800015 	stw	r2,0(r18)
  8029f4:	1805883a 	mov	r2,r3
  8029f8:	dfc00917 	ldw	ra,36(sp)
  8029fc:	df000817 	ldw	fp,32(sp)
  802a00:	ddc00717 	ldw	r23,28(sp)
  802a04:	dd800617 	ldw	r22,24(sp)
  802a08:	dd400517 	ldw	r21,20(sp)
  802a0c:	dd000417 	ldw	r20,16(sp)
  802a10:	dcc00317 	ldw	r19,12(sp)
  802a14:	dc800217 	ldw	r18,8(sp)
  802a18:	dc400117 	ldw	r17,4(sp)
  802a1c:	dc000017 	ldw	r16,0(sp)
  802a20:	dec00a04 	addi	sp,sp,40
  802a24:	f800283a 	ret
  802a28:	00bffe04 	movi	r2,-8
  802a2c:	18a2703a 	and	r17,r3,r2
  802a30:	883fed16 	blt	r17,zero,8029e8 <_malloc_r+0x44>
  802a34:	897fec36 	bltu	r17,r5,8029e8 <_malloc_r+0x44>
  802a38:	9009883a 	mov	r4,r18
  802a3c:	0810e480 	call	810e48 <__malloc_lock>
  802a40:	00807dc4 	movi	r2,503
  802a44:	14402b2e 	bgeu	r2,r17,802af4 <_malloc_r+0x150>
  802a48:	8806d27a 	srli	r3,r17,9
  802a4c:	18003f1e 	bne	r3,zero,802b4c <_malloc_r+0x1a8>
  802a50:	880cd0fa 	srli	r6,r17,3
  802a54:	300490fa 	slli	r2,r6,3
  802a58:	02c02074 	movhi	r11,129
  802a5c:	5ad5d904 	addi	r11,r11,22372
  802a60:	12cb883a 	add	r5,r2,r11
  802a64:	2c000317 	ldw	r16,12(r5)
  802a68:	580f883a 	mov	r7,r11
  802a6c:	2c00041e 	bne	r5,r16,802a80 <_malloc_r+0xdc>
  802a70:	00000a06 	br	802a9c <_malloc_r+0xf8>
  802a74:	1800860e 	bge	r3,zero,802c90 <_malloc_r+0x2ec>
  802a78:	84000317 	ldw	r16,12(r16)
  802a7c:	2c000726 	beq	r5,r16,802a9c <_malloc_r+0xf8>
  802a80:	80800117 	ldw	r2,4(r16)
  802a84:	00ffff04 	movi	r3,-4
  802a88:	10c8703a 	and	r4,r2,r3
  802a8c:	2447c83a 	sub	r3,r4,r17
  802a90:	008003c4 	movi	r2,15
  802a94:	10fff70e 	bge	r2,r3,802a74 <_malloc_r+0xd0>
  802a98:	31bfffc4 	addi	r6,r6,-1
  802a9c:	32400044 	addi	r9,r6,1
  802aa0:	02802074 	movhi	r10,129
  802aa4:	5295db04 	addi	r10,r10,22380
  802aa8:	54000217 	ldw	r16,8(r10)
  802aac:	8280a026 	beq	r16,r10,802d30 <_malloc_r+0x38c>
  802ab0:	80800117 	ldw	r2,4(r16)
  802ab4:	00ffff04 	movi	r3,-4
  802ab8:	10ca703a 	and	r5,r2,r3
  802abc:	2c4dc83a 	sub	r6,r5,r17
  802ac0:	008003c4 	movi	r2,15
  802ac4:	11808316 	blt	r2,r6,802cd4 <_malloc_r+0x330>
  802ac8:	52800315 	stw	r10,12(r10)
  802acc:	52800215 	stw	r10,8(r10)
  802ad0:	30002916 	blt	r6,zero,802b78 <_malloc_r+0x1d4>
  802ad4:	8147883a 	add	r3,r16,r5
  802ad8:	18800117 	ldw	r2,4(r3)
  802adc:	9009883a 	mov	r4,r18
  802ae0:	10800054 	ori	r2,r2,1
  802ae4:	18800115 	stw	r2,4(r3)
  802ae8:	0810e680 	call	810e68 <__malloc_unlock>
  802aec:	80c00204 	addi	r3,r16,8
  802af0:	003fc006 	br	8029f4 <_malloc_r+0x50>
  802af4:	02c02074 	movhi	r11,129
  802af8:	5ad5d904 	addi	r11,r11,22372
  802afc:	8ac5883a 	add	r2,r17,r11
  802b00:	14000317 	ldw	r16,12(r2)
  802b04:	580f883a 	mov	r7,r11
  802b08:	8806d0fa 	srli	r3,r17,3
  802b0c:	14006c26 	beq	r2,r16,802cc0 <_malloc_r+0x31c>
  802b10:	80c00117 	ldw	r3,4(r16)
  802b14:	00bfff04 	movi	r2,-4
  802b18:	81800317 	ldw	r6,12(r16)
  802b1c:	1886703a 	and	r3,r3,r2
  802b20:	80c7883a 	add	r3,r16,r3
  802b24:	18800117 	ldw	r2,4(r3)
  802b28:	81400217 	ldw	r5,8(r16)
  802b2c:	9009883a 	mov	r4,r18
  802b30:	10800054 	ori	r2,r2,1
  802b34:	18800115 	stw	r2,4(r3)
  802b38:	31400215 	stw	r5,8(r6)
  802b3c:	29800315 	stw	r6,12(r5)
  802b40:	0810e680 	call	810e68 <__malloc_unlock>
  802b44:	80c00204 	addi	r3,r16,8
  802b48:	003faa06 	br	8029f4 <_malloc_r+0x50>
  802b4c:	00800104 	movi	r2,4
  802b50:	10c0052e 	bgeu	r2,r3,802b68 <_malloc_r+0x1c4>
  802b54:	00800504 	movi	r2,20
  802b58:	10c07836 	bltu	r2,r3,802d3c <_malloc_r+0x398>
  802b5c:	198016c4 	addi	r6,r3,91
  802b60:	300490fa 	slli	r2,r6,3
  802b64:	003fbc06 	br	802a58 <_malloc_r+0xb4>
  802b68:	8804d1ba 	srli	r2,r17,6
  802b6c:	11800e04 	addi	r6,r2,56
  802b70:	300490fa 	slli	r2,r6,3
  802b74:	003fb806 	br	802a58 <_malloc_r+0xb4>
  802b78:	00807fc4 	movi	r2,511
  802b7c:	1140bb36 	bltu	r2,r5,802e6c <_malloc_r+0x4c8>
  802b80:	2806d0fa 	srli	r3,r5,3
  802b84:	573ffe04 	addi	fp,r10,-8
  802b88:	00800044 	movi	r2,1
  802b8c:	180890fa 	slli	r4,r3,3
  802b90:	1807d0ba 	srai	r3,r3,2
  802b94:	e1c00117 	ldw	r7,4(fp)
  802b98:	5909883a 	add	r4,r11,r4
  802b9c:	21400217 	ldw	r5,8(r4)
  802ba0:	10c4983a 	sll	r2,r2,r3
  802ba4:	81000315 	stw	r4,12(r16)
  802ba8:	81400215 	stw	r5,8(r16)
  802bac:	388eb03a 	or	r7,r7,r2
  802bb0:	2c000315 	stw	r16,12(r5)
  802bb4:	24000215 	stw	r16,8(r4)
  802bb8:	e1c00115 	stw	r7,4(fp)
  802bbc:	4807883a 	mov	r3,r9
  802bc0:	4800cd16 	blt	r9,zero,802ef8 <_malloc_r+0x554>
  802bc4:	1807d0ba 	srai	r3,r3,2
  802bc8:	00800044 	movi	r2,1
  802bcc:	10c8983a 	sll	r4,r2,r3
  802bd0:	39004436 	bltu	r7,r4,802ce4 <_malloc_r+0x340>
  802bd4:	21c4703a 	and	r2,r4,r7
  802bd8:	10000a1e 	bne	r2,zero,802c04 <_malloc_r+0x260>
  802bdc:	2109883a 	add	r4,r4,r4
  802be0:	00bfff04 	movi	r2,-4
  802be4:	4884703a 	and	r2,r9,r2
  802be8:	3906703a 	and	r3,r7,r4
  802bec:	12400104 	addi	r9,r2,4
  802bf0:	1800041e 	bne	r3,zero,802c04 <_malloc_r+0x260>
  802bf4:	2109883a 	add	r4,r4,r4
  802bf8:	3904703a 	and	r2,r7,r4
  802bfc:	4a400104 	addi	r9,r9,4
  802c00:	103ffc26 	beq	r2,zero,802bf4 <_malloc_r+0x250>
  802c04:	480490fa 	slli	r2,r9,3
  802c08:	4819883a 	mov	r12,r9
  802c0c:	023fff04 	movi	r8,-4
  802c10:	589b883a 	add	r13,r11,r2
  802c14:	6807883a 	mov	r3,r13
  802c18:	014003c4 	movi	r5,15
  802c1c:	1c000317 	ldw	r16,12(r3)
  802c20:	1c00041e 	bne	r3,r16,802c34 <_malloc_r+0x290>
  802c24:	0000a706 	br	802ec4 <_malloc_r+0x520>
  802c28:	3000ab0e 	bge	r6,zero,802ed8 <_malloc_r+0x534>
  802c2c:	84000317 	ldw	r16,12(r16)
  802c30:	1c00a426 	beq	r3,r16,802ec4 <_malloc_r+0x520>
  802c34:	80800117 	ldw	r2,4(r16)
  802c38:	1204703a 	and	r2,r2,r8
  802c3c:	144dc83a 	sub	r6,r2,r17
  802c40:	29bff90e 	bge	r5,r6,802c28 <_malloc_r+0x284>
  802c44:	81000317 	ldw	r4,12(r16)
  802c48:	80c00217 	ldw	r3,8(r16)
  802c4c:	89400054 	ori	r5,r17,1
  802c50:	8445883a 	add	r2,r16,r17
  802c54:	20c00215 	stw	r3,8(r4)
  802c58:	19000315 	stw	r4,12(r3)
  802c5c:	81400115 	stw	r5,4(r16)
  802c60:	1187883a 	add	r3,r2,r6
  802c64:	31000054 	ori	r4,r6,1
  802c68:	50800315 	stw	r2,12(r10)
  802c6c:	50800215 	stw	r2,8(r10)
  802c70:	19800015 	stw	r6,0(r3)
  802c74:	11000115 	stw	r4,4(r2)
  802c78:	12800215 	stw	r10,8(r2)
  802c7c:	12800315 	stw	r10,12(r2)
  802c80:	9009883a 	mov	r4,r18
  802c84:	0810e680 	call	810e68 <__malloc_unlock>
  802c88:	80c00204 	addi	r3,r16,8
  802c8c:	003f5906 	br	8029f4 <_malloc_r+0x50>
  802c90:	8109883a 	add	r4,r16,r4
  802c94:	20800117 	ldw	r2,4(r4)
  802c98:	80c00217 	ldw	r3,8(r16)
  802c9c:	81400317 	ldw	r5,12(r16)
  802ca0:	10800054 	ori	r2,r2,1
  802ca4:	20800115 	stw	r2,4(r4)
  802ca8:	28c00215 	stw	r3,8(r5)
  802cac:	19400315 	stw	r5,12(r3)
  802cb0:	9009883a 	mov	r4,r18
  802cb4:	0810e680 	call	810e68 <__malloc_unlock>
  802cb8:	80c00204 	addi	r3,r16,8
  802cbc:	003f4d06 	br	8029f4 <_malloc_r+0x50>
  802cc0:	80800204 	addi	r2,r16,8
  802cc4:	14000317 	ldw	r16,12(r2)
  802cc8:	143f911e 	bne	r2,r16,802b10 <_malloc_r+0x16c>
  802ccc:	1a400084 	addi	r9,r3,2
  802cd0:	003f7306 	br	802aa0 <_malloc_r+0xfc>
  802cd4:	88c00054 	ori	r3,r17,1
  802cd8:	8445883a 	add	r2,r16,r17
  802cdc:	80c00115 	stw	r3,4(r16)
  802ce0:	003fdf06 	br	802c60 <_malloc_r+0x2bc>
  802ce4:	e4000217 	ldw	r16,8(fp)
  802ce8:	00bfff04 	movi	r2,-4
  802cec:	80c00117 	ldw	r3,4(r16)
  802cf0:	802d883a 	mov	r22,r16
  802cf4:	18aa703a 	and	r21,r3,r2
  802cf8:	ac401636 	bltu	r21,r17,802d54 <_malloc_r+0x3b0>
  802cfc:	ac49c83a 	sub	r4,r21,r17
  802d00:	008003c4 	movi	r2,15
  802d04:	1100130e 	bge	r2,r4,802d54 <_malloc_r+0x3b0>
  802d08:	88800054 	ori	r2,r17,1
  802d0c:	8447883a 	add	r3,r16,r17
  802d10:	80800115 	stw	r2,4(r16)
  802d14:	20800054 	ori	r2,r4,1
  802d18:	18800115 	stw	r2,4(r3)
  802d1c:	e0c00215 	stw	r3,8(fp)
  802d20:	9009883a 	mov	r4,r18
  802d24:	0810e680 	call	810e68 <__malloc_unlock>
  802d28:	80c00204 	addi	r3,r16,8
  802d2c:	003f3106 	br	8029f4 <_malloc_r+0x50>
  802d30:	39c00117 	ldw	r7,4(r7)
  802d34:	573ffe04 	addi	fp,r10,-8
  802d38:	003fa006 	br	802bbc <_malloc_r+0x218>
  802d3c:	00801504 	movi	r2,84
  802d40:	10c06736 	bltu	r2,r3,802ee0 <_malloc_r+0x53c>
  802d44:	8804d33a 	srli	r2,r17,12
  802d48:	11801b84 	addi	r6,r2,110
  802d4c:	300490fa 	slli	r2,r6,3
  802d50:	003f4106 	br	802a58 <_malloc_r+0xb4>
  802d54:	d0a75917 	ldw	r2,-25244(gp)
  802d58:	d0e00517 	ldw	r3,-32748(gp)
  802d5c:	053fffc4 	movi	r20,-1
  802d60:	10800404 	addi	r2,r2,16
  802d64:	88a7883a 	add	r19,r17,r2
  802d68:	1d000326 	beq	r3,r20,802d78 <_malloc_r+0x3d4>
  802d6c:	98c3ffc4 	addi	r3,r19,4095
  802d70:	00bc0004 	movi	r2,-4096
  802d74:	18a6703a 	and	r19,r3,r2
  802d78:	9009883a 	mov	r4,r18
  802d7c:	980b883a 	mov	r5,r19
  802d80:	0803db80 	call	803db8 <_sbrk_r>
  802d84:	1009883a 	mov	r4,r2
  802d88:	15000426 	beq	r2,r20,802d9c <_malloc_r+0x3f8>
  802d8c:	854b883a 	add	r5,r16,r21
  802d90:	1029883a 	mov	r20,r2
  802d94:	11405a2e 	bgeu	r2,r5,802f00 <_malloc_r+0x55c>
  802d98:	87000c26 	beq	r16,fp,802dcc <_malloc_r+0x428>
  802d9c:	e4000217 	ldw	r16,8(fp)
  802da0:	80c00117 	ldw	r3,4(r16)
  802da4:	00bfff04 	movi	r2,-4
  802da8:	1884703a 	and	r2,r3,r2
  802dac:	14400336 	bltu	r2,r17,802dbc <_malloc_r+0x418>
  802db0:	1449c83a 	sub	r4,r2,r17
  802db4:	008003c4 	movi	r2,15
  802db8:	113fd316 	blt	r2,r4,802d08 <_malloc_r+0x364>
  802dbc:	9009883a 	mov	r4,r18
  802dc0:	0810e680 	call	810e68 <__malloc_unlock>
  802dc4:	0007883a 	mov	r3,zero
  802dc8:	003f0a06 	br	8029f4 <_malloc_r+0x50>
  802dcc:	05c020b4 	movhi	r23,130
  802dd0:	bde35404 	addi	r23,r23,-29360
  802dd4:	b8800017 	ldw	r2,0(r23)
  802dd8:	988d883a 	add	r6,r19,r2
  802ddc:	b9800015 	stw	r6,0(r23)
  802de0:	d0e00517 	ldw	r3,-32748(gp)
  802de4:	00bfffc4 	movi	r2,-1
  802de8:	18808e26 	beq	r3,r2,803024 <_malloc_r+0x680>
  802dec:	2145c83a 	sub	r2,r4,r5
  802df0:	3085883a 	add	r2,r6,r2
  802df4:	b8800015 	stw	r2,0(r23)
  802df8:	20c001cc 	andi	r3,r4,7
  802dfc:	18005f1e 	bne	r3,zero,802f7c <_malloc_r+0x5d8>
  802e00:	000b883a 	mov	r5,zero
  802e04:	a4c5883a 	add	r2,r20,r19
  802e08:	1083ffcc 	andi	r2,r2,4095
  802e0c:	00c40004 	movi	r3,4096
  802e10:	1887c83a 	sub	r3,r3,r2
  802e14:	28e7883a 	add	r19,r5,r3
  802e18:	9009883a 	mov	r4,r18
  802e1c:	980b883a 	mov	r5,r19
  802e20:	0803db80 	call	803db8 <_sbrk_r>
  802e24:	1007883a 	mov	r3,r2
  802e28:	00bfffc4 	movi	r2,-1
  802e2c:	18807a26 	beq	r3,r2,803018 <_malloc_r+0x674>
  802e30:	1d05c83a 	sub	r2,r3,r20
  802e34:	9885883a 	add	r2,r19,r2
  802e38:	10c00054 	ori	r3,r2,1
  802e3c:	b8800017 	ldw	r2,0(r23)
  802e40:	a021883a 	mov	r16,r20
  802e44:	a0c00115 	stw	r3,4(r20)
  802e48:	9885883a 	add	r2,r19,r2
  802e4c:	b8800015 	stw	r2,0(r23)
  802e50:	e5000215 	stw	r20,8(fp)
  802e54:	b7003626 	beq	r22,fp,802f30 <_malloc_r+0x58c>
  802e58:	018003c4 	movi	r6,15
  802e5c:	35404b36 	bltu	r6,r21,802f8c <_malloc_r+0x5e8>
  802e60:	00800044 	movi	r2,1
  802e64:	a0800115 	stw	r2,4(r20)
  802e68:	003fcd06 	br	802da0 <_malloc_r+0x3fc>
  802e6c:	2808d27a 	srli	r4,r5,9
  802e70:	2000371e 	bne	r4,zero,802f50 <_malloc_r+0x5ac>
  802e74:	2808d0fa 	srli	r4,r5,3
  802e78:	200690fa 	slli	r3,r4,3
  802e7c:	1ad1883a 	add	r8,r3,r11
  802e80:	41800217 	ldw	r6,8(r8)
  802e84:	41805b26 	beq	r8,r6,802ff4 <_malloc_r+0x650>
  802e88:	30800117 	ldw	r2,4(r6)
  802e8c:	00ffff04 	movi	r3,-4
  802e90:	10c4703a 	and	r2,r2,r3
  802e94:	2880022e 	bgeu	r5,r2,802ea0 <_malloc_r+0x4fc>
  802e98:	31800217 	ldw	r6,8(r6)
  802e9c:	41bffa1e 	bne	r8,r6,802e88 <_malloc_r+0x4e4>
  802ea0:	32000317 	ldw	r8,12(r6)
  802ea4:	39c00117 	ldw	r7,4(r7)
  802ea8:	82000315 	stw	r8,12(r16)
  802eac:	81800215 	stw	r6,8(r16)
  802eb0:	07002074 	movhi	fp,129
  802eb4:	e715d904 	addi	fp,fp,22372
  802eb8:	34000315 	stw	r16,12(r6)
  802ebc:	44000215 	stw	r16,8(r8)
  802ec0:	003f3e06 	br	802bbc <_malloc_r+0x218>
  802ec4:	63000044 	addi	r12,r12,1
  802ec8:	608000cc 	andi	r2,r12,3
  802ecc:	10005d26 	beq	r2,zero,803044 <_malloc_r+0x6a0>
  802ed0:	18c00204 	addi	r3,r3,8
  802ed4:	003f5106 	br	802c1c <_malloc_r+0x278>
  802ed8:	8089883a 	add	r4,r16,r2
  802edc:	003f6d06 	br	802c94 <_malloc_r+0x2f0>
  802ee0:	00805504 	movi	r2,340
  802ee4:	10c02036 	bltu	r2,r3,802f68 <_malloc_r+0x5c4>
  802ee8:	8804d3fa 	srli	r2,r17,15
  802eec:	11801dc4 	addi	r6,r2,119
  802ef0:	300490fa 	slli	r2,r6,3
  802ef4:	003ed806 	br	802a58 <_malloc_r+0xb4>
  802ef8:	48c000c4 	addi	r3,r9,3
  802efc:	003f3106 	br	802bc4 <_malloc_r+0x220>
  802f00:	05c020b4 	movhi	r23,130
  802f04:	bde35404 	addi	r23,r23,-29360
  802f08:	b8800017 	ldw	r2,0(r23)
  802f0c:	988d883a 	add	r6,r19,r2
  802f10:	b9800015 	stw	r6,0(r23)
  802f14:	293fb21e 	bne	r5,r4,802de0 <_malloc_r+0x43c>
  802f18:	2083ffcc 	andi	r2,r4,4095
  802f1c:	103fb01e 	bne	r2,zero,802de0 <_malloc_r+0x43c>
  802f20:	e4000217 	ldw	r16,8(fp)
  802f24:	9d45883a 	add	r2,r19,r21
  802f28:	10800054 	ori	r2,r2,1
  802f2c:	80800115 	stw	r2,4(r16)
  802f30:	b8c00017 	ldw	r3,0(r23)
  802f34:	d0a75a17 	ldw	r2,-25240(gp)
  802f38:	10c0012e 	bgeu	r2,r3,802f40 <_malloc_r+0x59c>
  802f3c:	d0e75a15 	stw	r3,-25240(gp)
  802f40:	d0a75b17 	ldw	r2,-25236(gp)
  802f44:	10ff962e 	bgeu	r2,r3,802da0 <_malloc_r+0x3fc>
  802f48:	d0e75b15 	stw	r3,-25236(gp)
  802f4c:	003f9406 	br	802da0 <_malloc_r+0x3fc>
  802f50:	00800104 	movi	r2,4
  802f54:	11001e36 	bltu	r2,r4,802fd0 <_malloc_r+0x62c>
  802f58:	2804d1ba 	srli	r2,r5,6
  802f5c:	11000e04 	addi	r4,r2,56
  802f60:	200690fa 	slli	r3,r4,3
  802f64:	003fc506 	br	802e7c <_malloc_r+0x4d8>
  802f68:	00815504 	movi	r2,1364
  802f6c:	10c01d2e 	bgeu	r2,r3,802fe4 <_malloc_r+0x640>
  802f70:	01801f84 	movi	r6,126
  802f74:	0080fc04 	movi	r2,1008
  802f78:	003eb706 	br	802a58 <_malloc_r+0xb4>
  802f7c:	00800204 	movi	r2,8
  802f80:	10cbc83a 	sub	r5,r2,r3
  802f84:	2169883a 	add	r20,r4,r5
  802f88:	003f9e06 	br	802e04 <_malloc_r+0x460>
  802f8c:	00bffe04 	movi	r2,-8
  802f90:	a93ffd04 	addi	r4,r21,-12
  802f94:	2088703a 	and	r4,r4,r2
  802f98:	b10b883a 	add	r5,r22,r4
  802f9c:	00c00144 	movi	r3,5
  802fa0:	28c00215 	stw	r3,8(r5)
  802fa4:	28c00115 	stw	r3,4(r5)
  802fa8:	b0800117 	ldw	r2,4(r22)
  802fac:	1080004c 	andi	r2,r2,1
  802fb0:	2084b03a 	or	r2,r4,r2
  802fb4:	b0800115 	stw	r2,4(r22)
  802fb8:	313fdd2e 	bgeu	r6,r4,802f30 <_malloc_r+0x58c>
  802fbc:	b1400204 	addi	r5,r22,8
  802fc0:	9009883a 	mov	r4,r18
  802fc4:	0801a0c0 	call	801a0c <_free_r>
  802fc8:	e4000217 	ldw	r16,8(fp)
  802fcc:	003fd806 	br	802f30 <_malloc_r+0x58c>
  802fd0:	00800504 	movi	r2,20
  802fd4:	11001536 	bltu	r2,r4,80302c <_malloc_r+0x688>
  802fd8:	210016c4 	addi	r4,r4,91
  802fdc:	200690fa 	slli	r3,r4,3
  802fe0:	003fa606 	br	802e7c <_malloc_r+0x4d8>
  802fe4:	8804d4ba 	srli	r2,r17,18
  802fe8:	11801f04 	addi	r6,r2,124
  802fec:	300490fa 	slli	r2,r6,3
  802ff0:	003e9906 	br	802a58 <_malloc_r+0xb4>
  802ff4:	2009d0ba 	srai	r4,r4,2
  802ff8:	01402074 	movhi	r5,129
  802ffc:	2955d904 	addi	r5,r5,22372
  803000:	00c00044 	movi	r3,1
  803004:	28800117 	ldw	r2,4(r5)
  803008:	1906983a 	sll	r3,r3,r4
  80300c:	10c4b03a 	or	r2,r2,r3
  803010:	28800115 	stw	r2,4(r5)
  803014:	003fa306 	br	802ea4 <_malloc_r+0x500>
  803018:	0027883a 	mov	r19,zero
  80301c:	00c00044 	movi	r3,1
  803020:	003f8606 	br	802e3c <_malloc_r+0x498>
  803024:	d1200515 	stw	r4,-32748(gp)
  803028:	003f7306 	br	802df8 <_malloc_r+0x454>
  80302c:	00801504 	movi	r2,84
  803030:	11001936 	bltu	r2,r4,803098 <_malloc_r+0x6f4>
  803034:	2804d33a 	srli	r2,r5,12
  803038:	11001b84 	addi	r4,r2,110
  80303c:	200690fa 	slli	r3,r4,3
  803040:	003f8e06 	br	802e7c <_malloc_r+0x4d8>
  803044:	480b883a 	mov	r5,r9
  803048:	6807883a 	mov	r3,r13
  80304c:	288000cc 	andi	r2,r5,3
  803050:	18fffe04 	addi	r3,r3,-8
  803054:	297fffc4 	addi	r5,r5,-1
  803058:	10001526 	beq	r2,zero,8030b0 <_malloc_r+0x70c>
  80305c:	18800217 	ldw	r2,8(r3)
  803060:	10fffa26 	beq	r2,r3,80304c <_malloc_r+0x6a8>
  803064:	2109883a 	add	r4,r4,r4
  803068:	393f1e36 	bltu	r7,r4,802ce4 <_malloc_r+0x340>
  80306c:	203f1d26 	beq	r4,zero,802ce4 <_malloc_r+0x340>
  803070:	21c4703a 	and	r2,r4,r7
  803074:	10000226 	beq	r2,zero,803080 <_malloc_r+0x6dc>
  803078:	6013883a 	mov	r9,r12
  80307c:	003ee106 	br	802c04 <_malloc_r+0x260>
  803080:	2109883a 	add	r4,r4,r4
  803084:	3904703a 	and	r2,r7,r4
  803088:	63000104 	addi	r12,r12,4
  80308c:	103ffc26 	beq	r2,zero,803080 <_malloc_r+0x6dc>
  803090:	6013883a 	mov	r9,r12
  803094:	003edb06 	br	802c04 <_malloc_r+0x260>
  803098:	00805504 	movi	r2,340
  80309c:	11000836 	bltu	r2,r4,8030c0 <_malloc_r+0x71c>
  8030a0:	2804d3fa 	srli	r2,r5,15
  8030a4:	11001dc4 	addi	r4,r2,119
  8030a8:	200690fa 	slli	r3,r4,3
  8030ac:	003f7306 	br	802e7c <_malloc_r+0x4d8>
  8030b0:	0104303a 	nor	r2,zero,r4
  8030b4:	388e703a 	and	r7,r7,r2
  8030b8:	e1c00115 	stw	r7,4(fp)
  8030bc:	003fe906 	br	803064 <_malloc_r+0x6c0>
  8030c0:	00815504 	movi	r2,1364
  8030c4:	1100032e 	bgeu	r2,r4,8030d4 <_malloc_r+0x730>
  8030c8:	01001f84 	movi	r4,126
  8030cc:	00c0fc04 	movi	r3,1008
  8030d0:	003f6a06 	br	802e7c <_malloc_r+0x4d8>
  8030d4:	2804d4ba 	srli	r2,r5,18
  8030d8:	11001f04 	addi	r4,r2,124
  8030dc:	200690fa 	slli	r3,r4,3
  8030e0:	003f6606 	br	802e7c <_malloc_r+0x4d8>

008030e4 <memchr>:
  8030e4:	008000c4 	movi	r2,3
  8030e8:	29403fcc 	andi	r5,r5,255
  8030ec:	2007883a 	mov	r3,r4
  8030f0:	1180022e 	bgeu	r2,r6,8030fc <memchr+0x18>
  8030f4:	2084703a 	and	r2,r4,r2
  8030f8:	10000b26 	beq	r2,zero,803128 <memchr+0x44>
  8030fc:	313fffc4 	addi	r4,r6,-1
  803100:	3000051e 	bne	r6,zero,803118 <memchr+0x34>
  803104:	00002c06 	br	8031b8 <memchr+0xd4>
  803108:	213fffc4 	addi	r4,r4,-1
  80310c:	00bfffc4 	movi	r2,-1
  803110:	18c00044 	addi	r3,r3,1
  803114:	20802826 	beq	r4,r2,8031b8 <memchr+0xd4>
  803118:	18800003 	ldbu	r2,0(r3)
  80311c:	28bffa1e 	bne	r5,r2,803108 <memchr+0x24>
  803120:	1805883a 	mov	r2,r3
  803124:	f800283a 	ret
  803128:	0011883a 	mov	r8,zero
  80312c:	0007883a 	mov	r3,zero
  803130:	01c00104 	movi	r7,4
  803134:	4004923a 	slli	r2,r8,8
  803138:	18c00044 	addi	r3,r3,1
  80313c:	1151883a 	add	r8,r2,r5
  803140:	19fffc1e 	bne	r3,r7,803134 <memchr+0x50>
  803144:	02bfbff4 	movhi	r10,65279
  803148:	52bfbfc4 	addi	r10,r10,-257
  80314c:	02602074 	movhi	r9,32897
  803150:	4a602004 	addi	r9,r9,-32640
  803154:	02c000c4 	movi	r11,3
  803158:	20800017 	ldw	r2,0(r4)
  80315c:	31bfff04 	addi	r6,r6,-4
  803160:	200f883a 	mov	r7,r4
  803164:	1204f03a 	xor	r2,r2,r8
  803168:	1287883a 	add	r3,r2,r10
  80316c:	1a46703a 	and	r3,r3,r9
  803170:	0084303a 	nor	r2,zero,r2
  803174:	10c4703a 	and	r2,r2,r3
  803178:	10000b26 	beq	r2,zero,8031a8 <memchr+0xc4>
  80317c:	20800003 	ldbu	r2,0(r4)
  803180:	28800f26 	beq	r5,r2,8031c0 <memchr+0xdc>
  803184:	20800043 	ldbu	r2,1(r4)
  803188:	21c00044 	addi	r7,r4,1
  80318c:	28800c26 	beq	r5,r2,8031c0 <memchr+0xdc>
  803190:	20800083 	ldbu	r2,2(r4)
  803194:	21c00084 	addi	r7,r4,2
  803198:	28800926 	beq	r5,r2,8031c0 <memchr+0xdc>
  80319c:	208000c3 	ldbu	r2,3(r4)
  8031a0:	21c000c4 	addi	r7,r4,3
  8031a4:	28800626 	beq	r5,r2,8031c0 <memchr+0xdc>
  8031a8:	21000104 	addi	r4,r4,4
  8031ac:	59bfea36 	bltu	r11,r6,803158 <memchr+0x74>
  8031b0:	2007883a 	mov	r3,r4
  8031b4:	003fd106 	br	8030fc <memchr+0x18>
  8031b8:	0005883a 	mov	r2,zero
  8031bc:	f800283a 	ret
  8031c0:	3805883a 	mov	r2,r7
  8031c4:	f800283a 	ret

008031c8 <memcpy>:
  8031c8:	01c003c4 	movi	r7,15
  8031cc:	2007883a 	mov	r3,r4
  8031d0:	3980032e 	bgeu	r7,r6,8031e0 <memcpy+0x18>
  8031d4:	2904b03a 	or	r2,r5,r4
  8031d8:	108000cc 	andi	r2,r2,3
  8031dc:	10000926 	beq	r2,zero,803204 <memcpy+0x3c>
  8031e0:	30000626 	beq	r6,zero,8031fc <memcpy+0x34>
  8031e4:	30cd883a 	add	r6,r6,r3
  8031e8:	28800003 	ldbu	r2,0(r5)
  8031ec:	29400044 	addi	r5,r5,1
  8031f0:	18800005 	stb	r2,0(r3)
  8031f4:	18c00044 	addi	r3,r3,1
  8031f8:	30fffb1e 	bne	r6,r3,8031e8 <memcpy+0x20>
  8031fc:	2005883a 	mov	r2,r4
  803200:	f800283a 	ret
  803204:	3811883a 	mov	r8,r7
  803208:	200f883a 	mov	r7,r4
  80320c:	28c00017 	ldw	r3,0(r5)
  803210:	31bffc04 	addi	r6,r6,-16
  803214:	38c00015 	stw	r3,0(r7)
  803218:	28800117 	ldw	r2,4(r5)
  80321c:	38800115 	stw	r2,4(r7)
  803220:	28c00217 	ldw	r3,8(r5)
  803224:	38c00215 	stw	r3,8(r7)
  803228:	28800317 	ldw	r2,12(r5)
  80322c:	29400404 	addi	r5,r5,16
  803230:	38800315 	stw	r2,12(r7)
  803234:	39c00404 	addi	r7,r7,16
  803238:	41bff436 	bltu	r8,r6,80320c <memcpy+0x44>
  80323c:	008000c4 	movi	r2,3
  803240:	1180072e 	bgeu	r2,r6,803260 <memcpy+0x98>
  803244:	1007883a 	mov	r3,r2
  803248:	28800017 	ldw	r2,0(r5)
  80324c:	31bfff04 	addi	r6,r6,-4
  803250:	29400104 	addi	r5,r5,4
  803254:	38800015 	stw	r2,0(r7)
  803258:	39c00104 	addi	r7,r7,4
  80325c:	19bffa36 	bltu	r3,r6,803248 <memcpy+0x80>
  803260:	3807883a 	mov	r3,r7
  803264:	003fde06 	br	8031e0 <memcpy+0x18>

00803268 <memmove>:
  803268:	2807883a 	mov	r3,r5
  80326c:	2011883a 	mov	r8,r4
  803270:	29000c2e 	bgeu	r5,r4,8032a4 <memmove+0x3c>
  803274:	298f883a 	add	r7,r5,r6
  803278:	21c00a2e 	bgeu	r4,r7,8032a4 <memmove+0x3c>
  80327c:	30000726 	beq	r6,zero,80329c <memmove+0x34>
  803280:	2187883a 	add	r3,r4,r6
  803284:	198dc83a 	sub	r6,r3,r6
  803288:	39ffffc4 	addi	r7,r7,-1
  80328c:	38800003 	ldbu	r2,0(r7)
  803290:	18ffffc4 	addi	r3,r3,-1
  803294:	18800005 	stb	r2,0(r3)
  803298:	19bffb1e 	bne	r3,r6,803288 <memmove+0x20>
  80329c:	2005883a 	mov	r2,r4
  8032a0:	f800283a 	ret
  8032a4:	01c003c4 	movi	r7,15
  8032a8:	39800a36 	bltu	r7,r6,8032d4 <memmove+0x6c>
  8032ac:	303ffb26 	beq	r6,zero,80329c <memmove+0x34>
  8032b0:	400f883a 	mov	r7,r8
  8032b4:	320d883a 	add	r6,r6,r8
  8032b8:	28800003 	ldbu	r2,0(r5)
  8032bc:	29400044 	addi	r5,r5,1
  8032c0:	38800005 	stb	r2,0(r7)
  8032c4:	39c00044 	addi	r7,r7,1
  8032c8:	39bffb1e 	bne	r7,r6,8032b8 <memmove+0x50>
  8032cc:	2005883a 	mov	r2,r4
  8032d0:	f800283a 	ret
  8032d4:	1904b03a 	or	r2,r3,r4
  8032d8:	108000cc 	andi	r2,r2,3
  8032dc:	103ff31e 	bne	r2,zero,8032ac <memmove+0x44>
  8032e0:	3811883a 	mov	r8,r7
  8032e4:	180b883a 	mov	r5,r3
  8032e8:	200f883a 	mov	r7,r4
  8032ec:	28c00017 	ldw	r3,0(r5)
  8032f0:	31bffc04 	addi	r6,r6,-16
  8032f4:	38c00015 	stw	r3,0(r7)
  8032f8:	28800117 	ldw	r2,4(r5)
  8032fc:	38800115 	stw	r2,4(r7)
  803300:	28c00217 	ldw	r3,8(r5)
  803304:	38c00215 	stw	r3,8(r7)
  803308:	28800317 	ldw	r2,12(r5)
  80330c:	29400404 	addi	r5,r5,16
  803310:	38800315 	stw	r2,12(r7)
  803314:	39c00404 	addi	r7,r7,16
  803318:	41bff436 	bltu	r8,r6,8032ec <memmove+0x84>
  80331c:	008000c4 	movi	r2,3
  803320:	1180072e 	bgeu	r2,r6,803340 <memmove+0xd8>
  803324:	1007883a 	mov	r3,r2
  803328:	28800017 	ldw	r2,0(r5)
  80332c:	31bfff04 	addi	r6,r6,-4
  803330:	29400104 	addi	r5,r5,4
  803334:	38800015 	stw	r2,0(r7)
  803338:	39c00104 	addi	r7,r7,4
  80333c:	19bffa36 	bltu	r3,r6,803328 <memmove+0xc0>
  803340:	3811883a 	mov	r8,r7
  803344:	003fd906 	br	8032ac <memmove+0x44>

00803348 <memset>:
  803348:	008000c4 	movi	r2,3
  80334c:	29403fcc 	andi	r5,r5,255
  803350:	2007883a 	mov	r3,r4
  803354:	1180022e 	bgeu	r2,r6,803360 <memset+0x18>
  803358:	2084703a 	and	r2,r4,r2
  80335c:	10000826 	beq	r2,zero,803380 <memset+0x38>
  803360:	30000526 	beq	r6,zero,803378 <memset+0x30>
  803364:	2805883a 	mov	r2,r5
  803368:	30cd883a 	add	r6,r6,r3
  80336c:	18800005 	stb	r2,0(r3)
  803370:	18c00044 	addi	r3,r3,1
  803374:	19bffd1e 	bne	r3,r6,80336c <memset+0x24>
  803378:	2005883a 	mov	r2,r4
  80337c:	f800283a 	ret
  803380:	2804923a 	slli	r2,r5,8
  803384:	020003c4 	movi	r8,15
  803388:	200f883a 	mov	r7,r4
  80338c:	2884b03a 	or	r2,r5,r2
  803390:	1006943a 	slli	r3,r2,16
  803394:	10c6b03a 	or	r3,r2,r3
  803398:	41800a2e 	bgeu	r8,r6,8033c4 <memset+0x7c>
  80339c:	4005883a 	mov	r2,r8
  8033a0:	31bffc04 	addi	r6,r6,-16
  8033a4:	38c00015 	stw	r3,0(r7)
  8033a8:	38c00115 	stw	r3,4(r7)
  8033ac:	38c00215 	stw	r3,8(r7)
  8033b0:	38c00315 	stw	r3,12(r7)
  8033b4:	39c00404 	addi	r7,r7,16
  8033b8:	11bff936 	bltu	r2,r6,8033a0 <memset+0x58>
  8033bc:	008000c4 	movi	r2,3
  8033c0:	1180052e 	bgeu	r2,r6,8033d8 <memset+0x90>
  8033c4:	31bfff04 	addi	r6,r6,-4
  8033c8:	008000c4 	movi	r2,3
  8033cc:	38c00015 	stw	r3,0(r7)
  8033d0:	39c00104 	addi	r7,r7,4
  8033d4:	11bffb36 	bltu	r2,r6,8033c4 <memset+0x7c>
  8033d8:	3807883a 	mov	r3,r7
  8033dc:	003fe006 	br	803360 <memset+0x18>

008033e0 <_open_r>:
  8033e0:	defffd04 	addi	sp,sp,-12
  8033e4:	dc000015 	stw	r16,0(sp)
  8033e8:	040020b4 	movhi	r16,130
  8033ec:	84233b04 	addi	r16,r16,-29460
  8033f0:	dc400115 	stw	r17,4(sp)
  8033f4:	80000015 	stw	zero,0(r16)
  8033f8:	2023883a 	mov	r17,r4
  8033fc:	2809883a 	mov	r4,r5
  803400:	300b883a 	mov	r5,r6
  803404:	380d883a 	mov	r6,r7
  803408:	dfc00215 	stw	ra,8(sp)
  80340c:	0810f640 	call	810f64 <open>
  803410:	1007883a 	mov	r3,r2
  803414:	00bfffc4 	movi	r2,-1
  803418:	18800626 	beq	r3,r2,803434 <_open_r+0x54>
  80341c:	1805883a 	mov	r2,r3
  803420:	dfc00217 	ldw	ra,8(sp)
  803424:	dc400117 	ldw	r17,4(sp)
  803428:	dc000017 	ldw	r16,0(sp)
  80342c:	dec00304 	addi	sp,sp,12
  803430:	f800283a 	ret
  803434:	80800017 	ldw	r2,0(r16)
  803438:	103ff826 	beq	r2,zero,80341c <_open_r+0x3c>
  80343c:	88800015 	stw	r2,0(r17)
  803440:	1805883a 	mov	r2,r3
  803444:	dfc00217 	ldw	ra,8(sp)
  803448:	dc400117 	ldw	r17,4(sp)
  80344c:	dc000017 	ldw	r16,0(sp)
  803450:	dec00304 	addi	sp,sp,12
  803454:	f800283a 	ret

00803458 <printf>:
  803458:	defffb04 	addi	sp,sp,-20
  80345c:	dfc00115 	stw	ra,4(sp)
  803460:	d9400215 	stw	r5,8(sp)
  803464:	d9800315 	stw	r6,12(sp)
  803468:	d9c00415 	stw	r7,16(sp)
  80346c:	00802074 	movhi	r2,129
  803470:	109be504 	addi	r2,r2,28564
  803474:	10c00017 	ldw	r3,0(r2)
  803478:	200b883a 	mov	r5,r4
  80347c:	d8800204 	addi	r2,sp,8
  803480:	19000217 	ldw	r4,8(r3)
  803484:	100d883a 	mov	r6,r2
  803488:	d8800015 	stw	r2,0(sp)
  80348c:	08060d40 	call	8060d4 <__vfprintf_internal>
  803490:	dfc00117 	ldw	ra,4(sp)
  803494:	dec00504 	addi	sp,sp,20
  803498:	f800283a 	ret

0080349c <_printf_r>:
  80349c:	defffc04 	addi	sp,sp,-16
  8034a0:	dfc00115 	stw	ra,4(sp)
  8034a4:	d9800215 	stw	r6,8(sp)
  8034a8:	d9c00315 	stw	r7,12(sp)
  8034ac:	280d883a 	mov	r6,r5
  8034b0:	21400217 	ldw	r5,8(r4)
  8034b4:	d8c00204 	addi	r3,sp,8
  8034b8:	180f883a 	mov	r7,r3
  8034bc:	d8c00015 	stw	r3,0(sp)
  8034c0:	08042280 	call	804228 <___vfprintf_internal_r>
  8034c4:	dfc00117 	ldw	ra,4(sp)
  8034c8:	dec00404 	addi	sp,sp,16
  8034cc:	f800283a 	ret

008034d0 <_puts_r>:
  8034d0:	defff604 	addi	sp,sp,-40
  8034d4:	dc400715 	stw	r17,28(sp)
  8034d8:	2023883a 	mov	r17,r4
  8034dc:	2809883a 	mov	r4,r5
  8034e0:	dfc00915 	stw	ra,36(sp)
  8034e4:	dcc00815 	stw	r19,32(sp)
  8034e8:	2827883a 	mov	r19,r5
  8034ec:	080415c0 	call	80415c <strlen>
  8034f0:	89400217 	ldw	r5,8(r17)
  8034f4:	00c02074 	movhi	r3,129
  8034f8:	18d32d04 	addi	r3,r3,19636
  8034fc:	01c00044 	movi	r7,1
  803500:	12000044 	addi	r8,r2,1
  803504:	d8c00515 	stw	r3,20(sp)
  803508:	d9c00615 	stw	r7,24(sp)
  80350c:	d8c00304 	addi	r3,sp,12
  803510:	01c00084 	movi	r7,2
  803514:	8809883a 	mov	r4,r17
  803518:	d80d883a 	mov	r6,sp
  80351c:	d8c00015 	stw	r3,0(sp)
  803520:	dcc00315 	stw	r19,12(sp)
  803524:	da000215 	stw	r8,8(sp)
  803528:	d9c00115 	stw	r7,4(sp)
  80352c:	d8800415 	stw	r2,16(sp)
  803530:	08021f40 	call	8021f4 <__sfvwrite_r>
  803534:	00ffffc4 	movi	r3,-1
  803538:	10000626 	beq	r2,zero,803554 <_puts_r+0x84>
  80353c:	1805883a 	mov	r2,r3
  803540:	dfc00917 	ldw	ra,36(sp)
  803544:	dcc00817 	ldw	r19,32(sp)
  803548:	dc400717 	ldw	r17,28(sp)
  80354c:	dec00a04 	addi	sp,sp,40
  803550:	f800283a 	ret
  803554:	00c00284 	movi	r3,10
  803558:	1805883a 	mov	r2,r3
  80355c:	dfc00917 	ldw	ra,36(sp)
  803560:	dcc00817 	ldw	r19,32(sp)
  803564:	dc400717 	ldw	r17,28(sp)
  803568:	dec00a04 	addi	sp,sp,40
  80356c:	f800283a 	ret

00803570 <puts>:
  803570:	00802074 	movhi	r2,129
  803574:	109be504 	addi	r2,r2,28564
  803578:	200b883a 	mov	r5,r4
  80357c:	11000017 	ldw	r4,0(r2)
  803580:	08034d01 	jmpi	8034d0 <_puts_r>

00803584 <_realloc_r>:
  803584:	defff404 	addi	sp,sp,-48
  803588:	dd800815 	stw	r22,32(sp)
  80358c:	dc800415 	stw	r18,16(sp)
  803590:	dc400315 	stw	r17,12(sp)
  803594:	dfc00b15 	stw	ra,44(sp)
  803598:	df000a15 	stw	fp,40(sp)
  80359c:	ddc00915 	stw	r23,36(sp)
  8035a0:	dd400715 	stw	r21,28(sp)
  8035a4:	dd000615 	stw	r20,24(sp)
  8035a8:	dcc00515 	stw	r19,20(sp)
  8035ac:	dc000215 	stw	r16,8(sp)
  8035b0:	2825883a 	mov	r18,r5
  8035b4:	3023883a 	mov	r17,r6
  8035b8:	202d883a 	mov	r22,r4
  8035bc:	2800c926 	beq	r5,zero,8038e4 <_realloc_r+0x360>
  8035c0:	0810e480 	call	810e48 <__malloc_lock>
  8035c4:	943ffe04 	addi	r16,r18,-8
  8035c8:	88c002c4 	addi	r3,r17,11
  8035cc:	00800584 	movi	r2,22
  8035d0:	82000117 	ldw	r8,4(r16)
  8035d4:	10c01b2e 	bgeu	r2,r3,803644 <_realloc_r+0xc0>
  8035d8:	00bffe04 	movi	r2,-8
  8035dc:	188e703a 	and	r7,r3,r2
  8035e0:	3839883a 	mov	fp,r7
  8035e4:	38001a16 	blt	r7,zero,803650 <_realloc_r+0xcc>
  8035e8:	e4401936 	bltu	fp,r17,803650 <_realloc_r+0xcc>
  8035ec:	013fff04 	movi	r4,-4
  8035f0:	4126703a 	and	r19,r8,r4
  8035f4:	99c02616 	blt	r19,r7,803690 <_realloc_r+0x10c>
  8035f8:	802b883a 	mov	r21,r16
  8035fc:	9829883a 	mov	r20,r19
  803600:	84000204 	addi	r16,r16,8
  803604:	a80f883a 	mov	r7,r21
  803608:	a70dc83a 	sub	r6,r20,fp
  80360c:	008003c4 	movi	r2,15
  803610:	1180c136 	bltu	r2,r6,803918 <_realloc_r+0x394>
  803614:	38800117 	ldw	r2,4(r7)
  803618:	a549883a 	add	r4,r20,r21
  80361c:	1080004c 	andi	r2,r2,1
  803620:	a084b03a 	or	r2,r20,r2
  803624:	38800115 	stw	r2,4(r7)
  803628:	20c00117 	ldw	r3,4(r4)
  80362c:	18c00054 	ori	r3,r3,1
  803630:	20c00115 	stw	r3,4(r4)
  803634:	b009883a 	mov	r4,r22
  803638:	0810e680 	call	810e68 <__malloc_unlock>
  80363c:	8023883a 	mov	r17,r16
  803640:	00000606 	br	80365c <_realloc_r+0xd8>
  803644:	01c00404 	movi	r7,16
  803648:	3839883a 	mov	fp,r7
  80364c:	e47fe72e 	bgeu	fp,r17,8035ec <_realloc_r+0x68>
  803650:	00800304 	movi	r2,12
  803654:	0023883a 	mov	r17,zero
  803658:	b0800015 	stw	r2,0(r22)
  80365c:	8805883a 	mov	r2,r17
  803660:	dfc00b17 	ldw	ra,44(sp)
  803664:	df000a17 	ldw	fp,40(sp)
  803668:	ddc00917 	ldw	r23,36(sp)
  80366c:	dd800817 	ldw	r22,32(sp)
  803670:	dd400717 	ldw	r21,28(sp)
  803674:	dd000617 	ldw	r20,24(sp)
  803678:	dcc00517 	ldw	r19,20(sp)
  80367c:	dc800417 	ldw	r18,16(sp)
  803680:	dc400317 	ldw	r17,12(sp)
  803684:	dc000217 	ldw	r16,8(sp)
  803688:	dec00c04 	addi	sp,sp,48
  80368c:	f800283a 	ret
  803690:	00802074 	movhi	r2,129
  803694:	1095d904 	addi	r2,r2,22372
  803698:	12400217 	ldw	r9,8(r2)
  80369c:	84cd883a 	add	r6,r16,r19
  8036a0:	802b883a 	mov	r21,r16
  8036a4:	3240b926 	beq	r6,r9,80398c <_realloc_r+0x408>
  8036a8:	31400117 	ldw	r5,4(r6)
  8036ac:	00bfff84 	movi	r2,-2
  8036b0:	2884703a 	and	r2,r5,r2
  8036b4:	1185883a 	add	r2,r2,r6
  8036b8:	10c00117 	ldw	r3,4(r2)
  8036bc:	18c0004c 	andi	r3,r3,1
  8036c0:	1807003a 	cmpeq	r3,r3,zero
  8036c4:	1800a326 	beq	r3,zero,803954 <_realloc_r+0x3d0>
  8036c8:	2908703a 	and	r4,r5,r4
  8036cc:	9929883a 	add	r20,r19,r4
  8036d0:	a1c0a30e 	bge	r20,r7,803960 <_realloc_r+0x3dc>
  8036d4:	4080004c 	andi	r2,r8,1
  8036d8:	1000551e 	bne	r2,zero,803830 <_realloc_r+0x2ac>
  8036dc:	80800017 	ldw	r2,0(r16)
  8036e0:	80afc83a 	sub	r23,r16,r2
  8036e4:	b8c00117 	ldw	r3,4(r23)
  8036e8:	00bfff04 	movi	r2,-4
  8036ec:	1884703a 	and	r2,r3,r2
  8036f0:	30002e26 	beq	r6,zero,8037ac <_realloc_r+0x228>
  8036f4:	3240b926 	beq	r6,r9,8039dc <_realloc_r+0x458>
  8036f8:	98a9883a 	add	r20,r19,r2
  8036fc:	2509883a 	add	r4,r4,r20
  803700:	d9000015 	stw	r4,0(sp)
  803704:	21c02a16 	blt	r4,r7,8037b0 <_realloc_r+0x22c>
  803708:	30800317 	ldw	r2,12(r6)
  80370c:	30c00217 	ldw	r3,8(r6)
  803710:	01400904 	movi	r5,36
  803714:	99bfff04 	addi	r6,r19,-4
  803718:	18800315 	stw	r2,12(r3)
  80371c:	10c00215 	stw	r3,8(r2)
  803720:	b9000317 	ldw	r4,12(r23)
  803724:	b8800217 	ldw	r2,8(r23)
  803728:	b82b883a 	mov	r21,r23
  80372c:	bc000204 	addi	r16,r23,8
  803730:	20800215 	stw	r2,8(r4)
  803734:	11000315 	stw	r4,12(r2)
  803738:	2980e436 	bltu	r5,r6,803acc <_realloc_r+0x548>
  80373c:	008004c4 	movi	r2,19
  803740:	9009883a 	mov	r4,r18
  803744:	8011883a 	mov	r8,r16
  803748:	11800f2e 	bgeu	r2,r6,803788 <_realloc_r+0x204>
  80374c:	90800017 	ldw	r2,0(r18)
  803750:	ba000404 	addi	r8,r23,16
  803754:	91000204 	addi	r4,r18,8
  803758:	b8800215 	stw	r2,8(r23)
  80375c:	90c00117 	ldw	r3,4(r18)
  803760:	008006c4 	movi	r2,27
  803764:	b8c00315 	stw	r3,12(r23)
  803768:	1180072e 	bgeu	r2,r6,803788 <_realloc_r+0x204>
  80376c:	90c00217 	ldw	r3,8(r18)
  803770:	ba000604 	addi	r8,r23,24
  803774:	91000404 	addi	r4,r18,16
  803778:	b8c00415 	stw	r3,16(r23)
  80377c:	90800317 	ldw	r2,12(r18)
  803780:	b8800515 	stw	r2,20(r23)
  803784:	3140e726 	beq	r6,r5,803b24 <_realloc_r+0x5a0>
  803788:	20800017 	ldw	r2,0(r4)
  80378c:	dd000017 	ldw	r20,0(sp)
  803790:	b80f883a 	mov	r7,r23
  803794:	40800015 	stw	r2,0(r8)
  803798:	20c00117 	ldw	r3,4(r4)
  80379c:	40c00115 	stw	r3,4(r8)
  8037a0:	20800217 	ldw	r2,8(r4)
  8037a4:	40800215 	stw	r2,8(r8)
  8037a8:	003f9706 	br	803608 <_realloc_r+0x84>
  8037ac:	98a9883a 	add	r20,r19,r2
  8037b0:	a1c01f16 	blt	r20,r7,803830 <_realloc_r+0x2ac>
  8037b4:	b8c00317 	ldw	r3,12(r23)
  8037b8:	b8800217 	ldw	r2,8(r23)
  8037bc:	99bfff04 	addi	r6,r19,-4
  8037c0:	01400904 	movi	r5,36
  8037c4:	b82b883a 	mov	r21,r23
  8037c8:	18800215 	stw	r2,8(r3)
  8037cc:	10c00315 	stw	r3,12(r2)
  8037d0:	bc000204 	addi	r16,r23,8
  8037d4:	2980c336 	bltu	r5,r6,803ae4 <_realloc_r+0x560>
  8037d8:	008004c4 	movi	r2,19
  8037dc:	9009883a 	mov	r4,r18
  8037e0:	8011883a 	mov	r8,r16
  8037e4:	11800f2e 	bgeu	r2,r6,803824 <_realloc_r+0x2a0>
  8037e8:	90800017 	ldw	r2,0(r18)
  8037ec:	ba000404 	addi	r8,r23,16
  8037f0:	91000204 	addi	r4,r18,8
  8037f4:	b8800215 	stw	r2,8(r23)
  8037f8:	90c00117 	ldw	r3,4(r18)
  8037fc:	008006c4 	movi	r2,27
  803800:	b8c00315 	stw	r3,12(r23)
  803804:	1180072e 	bgeu	r2,r6,803824 <_realloc_r+0x2a0>
  803808:	90c00217 	ldw	r3,8(r18)
  80380c:	ba000604 	addi	r8,r23,24
  803810:	91000404 	addi	r4,r18,16
  803814:	b8c00415 	stw	r3,16(r23)
  803818:	90800317 	ldw	r2,12(r18)
  80381c:	b8800515 	stw	r2,20(r23)
  803820:	3140c726 	beq	r6,r5,803b40 <_realloc_r+0x5bc>
  803824:	20800017 	ldw	r2,0(r4)
  803828:	b80f883a 	mov	r7,r23
  80382c:	003fd906 	br	803794 <_realloc_r+0x210>
  803830:	880b883a 	mov	r5,r17
  803834:	b009883a 	mov	r4,r22
  803838:	08029a40 	call	8029a4 <_malloc_r>
  80383c:	1023883a 	mov	r17,r2
  803840:	10002526 	beq	r2,zero,8038d8 <_realloc_r+0x354>
  803844:	80800117 	ldw	r2,4(r16)
  803848:	00ffff84 	movi	r3,-2
  80384c:	893ffe04 	addi	r4,r17,-8
  803850:	10c4703a 	and	r2,r2,r3
  803854:	8085883a 	add	r2,r16,r2
  803858:	20809526 	beq	r4,r2,803ab0 <_realloc_r+0x52c>
  80385c:	99bfff04 	addi	r6,r19,-4
  803860:	01c00904 	movi	r7,36
  803864:	39804536 	bltu	r7,r6,80397c <_realloc_r+0x3f8>
  803868:	008004c4 	movi	r2,19
  80386c:	9009883a 	mov	r4,r18
  803870:	880b883a 	mov	r5,r17
  803874:	11800f2e 	bgeu	r2,r6,8038b4 <_realloc_r+0x330>
  803878:	90800017 	ldw	r2,0(r18)
  80387c:	89400204 	addi	r5,r17,8
  803880:	91000204 	addi	r4,r18,8
  803884:	88800015 	stw	r2,0(r17)
  803888:	90c00117 	ldw	r3,4(r18)
  80388c:	008006c4 	movi	r2,27
  803890:	88c00115 	stw	r3,4(r17)
  803894:	1180072e 	bgeu	r2,r6,8038b4 <_realloc_r+0x330>
  803898:	90c00217 	ldw	r3,8(r18)
  80389c:	89400404 	addi	r5,r17,16
  8038a0:	91000404 	addi	r4,r18,16
  8038a4:	88c00215 	stw	r3,8(r17)
  8038a8:	90800317 	ldw	r2,12(r18)
  8038ac:	88800315 	stw	r2,12(r17)
  8038b0:	31c09126 	beq	r6,r7,803af8 <_realloc_r+0x574>
  8038b4:	20800017 	ldw	r2,0(r4)
  8038b8:	28800015 	stw	r2,0(r5)
  8038bc:	20c00117 	ldw	r3,4(r4)
  8038c0:	28c00115 	stw	r3,4(r5)
  8038c4:	20800217 	ldw	r2,8(r4)
  8038c8:	28800215 	stw	r2,8(r5)
  8038cc:	900b883a 	mov	r5,r18
  8038d0:	b009883a 	mov	r4,r22
  8038d4:	0801a0c0 	call	801a0c <_free_r>
  8038d8:	b009883a 	mov	r4,r22
  8038dc:	0810e680 	call	810e68 <__malloc_unlock>
  8038e0:	003f5e06 	br	80365c <_realloc_r+0xd8>
  8038e4:	300b883a 	mov	r5,r6
  8038e8:	dfc00b17 	ldw	ra,44(sp)
  8038ec:	df000a17 	ldw	fp,40(sp)
  8038f0:	ddc00917 	ldw	r23,36(sp)
  8038f4:	dd800817 	ldw	r22,32(sp)
  8038f8:	dd400717 	ldw	r21,28(sp)
  8038fc:	dd000617 	ldw	r20,24(sp)
  803900:	dcc00517 	ldw	r19,20(sp)
  803904:	dc800417 	ldw	r18,16(sp)
  803908:	dc400317 	ldw	r17,12(sp)
  80390c:	dc000217 	ldw	r16,8(sp)
  803910:	dec00c04 	addi	sp,sp,48
  803914:	08029a41 	jmpi	8029a4 <_malloc_r>
  803918:	38800117 	ldw	r2,4(r7)
  80391c:	e54b883a 	add	r5,fp,r21
  803920:	31000054 	ori	r4,r6,1
  803924:	1080004c 	andi	r2,r2,1
  803928:	1704b03a 	or	r2,r2,fp
  80392c:	38800115 	stw	r2,4(r7)
  803930:	29000115 	stw	r4,4(r5)
  803934:	2987883a 	add	r3,r5,r6
  803938:	18800117 	ldw	r2,4(r3)
  80393c:	29400204 	addi	r5,r5,8
  803940:	b009883a 	mov	r4,r22
  803944:	10800054 	ori	r2,r2,1
  803948:	18800115 	stw	r2,4(r3)
  80394c:	0801a0c0 	call	801a0c <_free_r>
  803950:	003f3806 	br	803634 <_realloc_r+0xb0>
  803954:	000d883a 	mov	r6,zero
  803958:	0009883a 	mov	r4,zero
  80395c:	003f5d06 	br	8036d4 <_realloc_r+0x150>
  803960:	30c00217 	ldw	r3,8(r6)
  803964:	30800317 	ldw	r2,12(r6)
  803968:	800f883a 	mov	r7,r16
  80396c:	84000204 	addi	r16,r16,8
  803970:	10c00215 	stw	r3,8(r2)
  803974:	18800315 	stw	r2,12(r3)
  803978:	003f2306 	br	803608 <_realloc_r+0x84>
  80397c:	8809883a 	mov	r4,r17
  803980:	900b883a 	mov	r5,r18
  803984:	08032680 	call	803268 <memmove>
  803988:	003fd006 	br	8038cc <_realloc_r+0x348>
  80398c:	30800117 	ldw	r2,4(r6)
  803990:	e0c00404 	addi	r3,fp,16
  803994:	1108703a 	and	r4,r2,r4
  803998:	9905883a 	add	r2,r19,r4
  80399c:	10ff4d16 	blt	r2,r3,8036d4 <_realloc_r+0x150>
  8039a0:	1705c83a 	sub	r2,r2,fp
  8039a4:	870b883a 	add	r5,r16,fp
  8039a8:	10800054 	ori	r2,r2,1
  8039ac:	28800115 	stw	r2,4(r5)
  8039b0:	80c00117 	ldw	r3,4(r16)
  8039b4:	00802074 	movhi	r2,129
  8039b8:	1095d904 	addi	r2,r2,22372
  8039bc:	b009883a 	mov	r4,r22
  8039c0:	18c0004c 	andi	r3,r3,1
  8039c4:	e0c6b03a 	or	r3,fp,r3
  8039c8:	11400215 	stw	r5,8(r2)
  8039cc:	80c00115 	stw	r3,4(r16)
  8039d0:	0810e680 	call	810e68 <__malloc_unlock>
  8039d4:	84400204 	addi	r17,r16,8
  8039d8:	003f2006 	br	80365c <_realloc_r+0xd8>
  8039dc:	98a9883a 	add	r20,r19,r2
  8039e0:	2509883a 	add	r4,r4,r20
  8039e4:	e0800404 	addi	r2,fp,16
  8039e8:	d9000115 	stw	r4,4(sp)
  8039ec:	20bf7016 	blt	r4,r2,8037b0 <_realloc_r+0x22c>
  8039f0:	b8c00317 	ldw	r3,12(r23)
  8039f4:	b8800217 	ldw	r2,8(r23)
  8039f8:	99bfff04 	addi	r6,r19,-4
  8039fc:	01400904 	movi	r5,36
  803a00:	18800215 	stw	r2,8(r3)
  803a04:	10c00315 	stw	r3,12(r2)
  803a08:	bc400204 	addi	r17,r23,8
  803a0c:	29804136 	bltu	r5,r6,803b14 <_realloc_r+0x590>
  803a10:	008004c4 	movi	r2,19
  803a14:	9009883a 	mov	r4,r18
  803a18:	880f883a 	mov	r7,r17
  803a1c:	11800f2e 	bgeu	r2,r6,803a5c <_realloc_r+0x4d8>
  803a20:	90800017 	ldw	r2,0(r18)
  803a24:	b9c00404 	addi	r7,r23,16
  803a28:	91000204 	addi	r4,r18,8
  803a2c:	b8800215 	stw	r2,8(r23)
  803a30:	90c00117 	ldw	r3,4(r18)
  803a34:	008006c4 	movi	r2,27
  803a38:	b8c00315 	stw	r3,12(r23)
  803a3c:	1180072e 	bgeu	r2,r6,803a5c <_realloc_r+0x4d8>
  803a40:	90c00217 	ldw	r3,8(r18)
  803a44:	b9c00604 	addi	r7,r23,24
  803a48:	91000404 	addi	r4,r18,16
  803a4c:	b8c00415 	stw	r3,16(r23)
  803a50:	90800317 	ldw	r2,12(r18)
  803a54:	b8800515 	stw	r2,20(r23)
  803a58:	31404026 	beq	r6,r5,803b5c <_realloc_r+0x5d8>
  803a5c:	20800017 	ldw	r2,0(r4)
  803a60:	38800015 	stw	r2,0(r7)
  803a64:	20c00117 	ldw	r3,4(r4)
  803a68:	38c00115 	stw	r3,4(r7)
  803a6c:	20800217 	ldw	r2,8(r4)
  803a70:	38800215 	stw	r2,8(r7)
  803a74:	d8c00117 	ldw	r3,4(sp)
  803a78:	bf0b883a 	add	r5,r23,fp
  803a7c:	b009883a 	mov	r4,r22
  803a80:	1f05c83a 	sub	r2,r3,fp
  803a84:	10800054 	ori	r2,r2,1
  803a88:	28800115 	stw	r2,4(r5)
  803a8c:	b8c00117 	ldw	r3,4(r23)
  803a90:	00802074 	movhi	r2,129
  803a94:	1095d904 	addi	r2,r2,22372
  803a98:	11400215 	stw	r5,8(r2)
  803a9c:	18c0004c 	andi	r3,r3,1
  803aa0:	e0c6b03a 	or	r3,fp,r3
  803aa4:	b8c00115 	stw	r3,4(r23)
  803aa8:	0810e680 	call	810e68 <__malloc_unlock>
  803aac:	003eeb06 	br	80365c <_realloc_r+0xd8>
  803ab0:	20800117 	ldw	r2,4(r4)
  803ab4:	00ffff04 	movi	r3,-4
  803ab8:	800f883a 	mov	r7,r16
  803abc:	10c4703a 	and	r2,r2,r3
  803ac0:	98a9883a 	add	r20,r19,r2
  803ac4:	84000204 	addi	r16,r16,8
  803ac8:	003ecf06 	br	803608 <_realloc_r+0x84>
  803acc:	900b883a 	mov	r5,r18
  803ad0:	8009883a 	mov	r4,r16
  803ad4:	08032680 	call	803268 <memmove>
  803ad8:	dd000017 	ldw	r20,0(sp)
  803adc:	b80f883a 	mov	r7,r23
  803ae0:	003ec906 	br	803608 <_realloc_r+0x84>
  803ae4:	900b883a 	mov	r5,r18
  803ae8:	8009883a 	mov	r4,r16
  803aec:	08032680 	call	803268 <memmove>
  803af0:	b80f883a 	mov	r7,r23
  803af4:	003ec406 	br	803608 <_realloc_r+0x84>
  803af8:	90c00417 	ldw	r3,16(r18)
  803afc:	89400604 	addi	r5,r17,24
  803b00:	91000604 	addi	r4,r18,24
  803b04:	88c00415 	stw	r3,16(r17)
  803b08:	90800517 	ldw	r2,20(r18)
  803b0c:	88800515 	stw	r2,20(r17)
  803b10:	003f6806 	br	8038b4 <_realloc_r+0x330>
  803b14:	900b883a 	mov	r5,r18
  803b18:	8809883a 	mov	r4,r17
  803b1c:	08032680 	call	803268 <memmove>
  803b20:	003fd406 	br	803a74 <_realloc_r+0x4f0>
  803b24:	90c00417 	ldw	r3,16(r18)
  803b28:	91000604 	addi	r4,r18,24
  803b2c:	ba000804 	addi	r8,r23,32
  803b30:	b8c00615 	stw	r3,24(r23)
  803b34:	90800517 	ldw	r2,20(r18)
  803b38:	b8800715 	stw	r2,28(r23)
  803b3c:	003f1206 	br	803788 <_realloc_r+0x204>
  803b40:	90c00417 	ldw	r3,16(r18)
  803b44:	91000604 	addi	r4,r18,24
  803b48:	ba000804 	addi	r8,r23,32
  803b4c:	b8c00615 	stw	r3,24(r23)
  803b50:	90800517 	ldw	r2,20(r18)
  803b54:	b8800715 	stw	r2,28(r23)
  803b58:	003f3206 	br	803824 <_realloc_r+0x2a0>
  803b5c:	90c00417 	ldw	r3,16(r18)
  803b60:	91000604 	addi	r4,r18,24
  803b64:	b9c00804 	addi	r7,r23,32
  803b68:	b8c00615 	stw	r3,24(r23)
  803b6c:	90800517 	ldw	r2,20(r18)
  803b70:	b8800715 	stw	r2,28(r23)
  803b74:	003fb906 	br	803a5c <_realloc_r+0x4d8>

00803b78 <__srefill_r>:
  803b78:	defffd04 	addi	sp,sp,-12
  803b7c:	dc400115 	stw	r17,4(sp)
  803b80:	dc000015 	stw	r16,0(sp)
  803b84:	dfc00215 	stw	ra,8(sp)
  803b88:	2023883a 	mov	r17,r4
  803b8c:	2821883a 	mov	r16,r5
  803b90:	20000226 	beq	r4,zero,803b9c <__srefill_r+0x24>
  803b94:	20800e17 	ldw	r2,56(r4)
  803b98:	10004126 	beq	r2,zero,803ca0 <__srefill_r+0x128>
  803b9c:	80c0030b 	ldhu	r3,12(r16)
  803ba0:	80000115 	stw	zero,4(r16)
  803ba4:	1880080c 	andi	r2,r3,32
  803ba8:	1000361e 	bne	r2,zero,803c84 <__srefill_r+0x10c>
  803bac:	1880010c 	andi	r2,r3,4
  803bb0:	1000211e 	bne	r2,zero,803c38 <__srefill_r+0xc0>
  803bb4:	1880040c 	andi	r2,r3,16
  803bb8:	10005026 	beq	r2,zero,803cfc <__srefill_r+0x184>
  803bbc:	1880020c 	andi	r2,r3,8
  803bc0:	1000541e 	bne	r2,zero,803d14 <__srefill_r+0x19c>
  803bc4:	8080030b 	ldhu	r2,12(r16)
  803bc8:	10800114 	ori	r2,r2,4
  803bcc:	8080030d 	sth	r2,12(r16)
  803bd0:	80800417 	ldw	r2,16(r16)
  803bd4:	10004526 	beq	r2,zero,803cec <__srefill_r+0x174>
  803bd8:	8080030b 	ldhu	r2,12(r16)
  803bdc:	108000cc 	andi	r2,r2,3
  803be0:	1000361e 	bne	r2,zero,803cbc <__srefill_r+0x144>
  803be4:	81800417 	ldw	r6,16(r16)
  803be8:	80c00817 	ldw	r3,32(r16)
  803bec:	81400717 	ldw	r5,28(r16)
  803bf0:	81c00517 	ldw	r7,20(r16)
  803bf4:	8809883a 	mov	r4,r17
  803bf8:	81800015 	stw	r6,0(r16)
  803bfc:	183ee83a 	callr	r3
  803c00:	80c0030b 	ldhu	r3,12(r16)
  803c04:	1009883a 	mov	r4,r2
  803c08:	80800115 	stw	r2,4(r16)
  803c0c:	00b7ffc4 	movi	r2,-8193
  803c10:	1884703a 	and	r2,r3,r2
  803c14:	8080030d 	sth	r2,12(r16)
  803c18:	0100230e 	bge	zero,r4,803ca8 <__srefill_r+0x130>
  803c1c:	0009883a 	mov	r4,zero
  803c20:	2005883a 	mov	r2,r4
  803c24:	dfc00217 	ldw	ra,8(sp)
  803c28:	dc400117 	ldw	r17,4(sp)
  803c2c:	dc000017 	ldw	r16,0(sp)
  803c30:	dec00304 	addi	sp,sp,12
  803c34:	f800283a 	ret
  803c38:	81400c17 	ldw	r5,48(r16)
  803c3c:	283fe426 	beq	r5,zero,803bd0 <__srefill_r+0x58>
  803c40:	80801004 	addi	r2,r16,64
  803c44:	28800226 	beq	r5,r2,803c50 <__srefill_r+0xd8>
  803c48:	8809883a 	mov	r4,r17
  803c4c:	0801a0c0 	call	801a0c <_free_r>
  803c50:	80800f17 	ldw	r2,60(r16)
  803c54:	80000c15 	stw	zero,48(r16)
  803c58:	80800115 	stw	r2,4(r16)
  803c5c:	103fdc26 	beq	r2,zero,803bd0 <__srefill_r+0x58>
  803c60:	80800e17 	ldw	r2,56(r16)
  803c64:	0009883a 	mov	r4,zero
  803c68:	80800015 	stw	r2,0(r16)
  803c6c:	2005883a 	mov	r2,r4
  803c70:	dfc00217 	ldw	ra,8(sp)
  803c74:	dc400117 	ldw	r17,4(sp)
  803c78:	dc000017 	ldw	r16,0(sp)
  803c7c:	dec00304 	addi	sp,sp,12
  803c80:	f800283a 	ret
  803c84:	013fffc4 	movi	r4,-1
  803c88:	2005883a 	mov	r2,r4
  803c8c:	dfc00217 	ldw	ra,8(sp)
  803c90:	dc400117 	ldw	r17,4(sp)
  803c94:	dc000017 	ldw	r16,0(sp)
  803c98:	dec00304 	addi	sp,sp,12
  803c9c:	f800283a 	ret
  803ca0:	08014880 	call	801488 <__sinit>
  803ca4:	003fbd06 	br	803b9c <__srefill_r+0x24>
  803ca8:	20000b1e 	bne	r4,zero,803cd8 <__srefill_r+0x160>
  803cac:	10800814 	ori	r2,r2,32
  803cb0:	013fffc4 	movi	r4,-1
  803cb4:	8080030d 	sth	r2,12(r16)
  803cb8:	003fd906 	br	803c20 <__srefill_r+0xa8>
  803cbc:	00802074 	movhi	r2,129
  803cc0:	109be604 	addi	r2,r2,28568
  803cc4:	11000017 	ldw	r4,0(r2)
  803cc8:	01402034 	movhi	r5,128
  803ccc:	294f4f04 	addi	r5,r5,15676
  803cd0:	08027580 	call	802758 <_fwalk>
  803cd4:	003fc306 	br	803be4 <__srefill_r+0x6c>
  803cd8:	10801014 	ori	r2,r2,64
  803cdc:	013fffc4 	movi	r4,-1
  803ce0:	8080030d 	sth	r2,12(r16)
  803ce4:	80000115 	stw	zero,4(r16)
  803ce8:	003fcd06 	br	803c20 <__srefill_r+0xa8>
  803cec:	8809883a 	mov	r4,r17
  803cf0:	800b883a 	mov	r5,r16
  803cf4:	08028100 	call	802810 <__smakebuf_r>
  803cf8:	003fb706 	br	803bd8 <__srefill_r+0x60>
  803cfc:	18c01014 	ori	r3,r3,64
  803d00:	00800244 	movi	r2,9
  803d04:	013fffc4 	movi	r4,-1
  803d08:	88800015 	stw	r2,0(r17)
  803d0c:	80c0030d 	sth	r3,12(r16)
  803d10:	003fc306 	br	803c20 <__srefill_r+0xa8>
  803d14:	8809883a 	mov	r4,r17
  803d18:	800b883a 	mov	r5,r16
  803d1c:	08010c80 	call	8010c8 <_fflush_r>
  803d20:	103fd81e 	bne	r2,zero,803c84 <__srefill_r+0x10c>
  803d24:	8080030b 	ldhu	r2,12(r16)
  803d28:	80000215 	stw	zero,8(r16)
  803d2c:	80000615 	stw	zero,24(r16)
  803d30:	10bffdcc 	andi	r2,r2,65527
  803d34:	8080030d 	sth	r2,12(r16)
  803d38:	003fa206 	br	803bc4 <__srefill_r+0x4c>

00803d3c <lflush>:
  803d3c:	20c0030b 	ldhu	r3,12(r4)
  803d40:	01400244 	movi	r5,9
  803d44:	0005883a 	mov	r2,zero
  803d48:	18c0024c 	andi	r3,r3,9
  803d4c:	19400126 	beq	r3,r5,803d54 <lflush+0x18>
  803d50:	f800283a 	ret
  803d54:	08012c41 	jmpi	8012c4 <fflush>

00803d58 <__srget_r>:
  803d58:	defffe04 	addi	sp,sp,-8
  803d5c:	dc000015 	stw	r16,0(sp)
  803d60:	dfc00115 	stw	ra,4(sp)
  803d64:	2821883a 	mov	r16,r5
  803d68:	0803b780 	call	803b78 <__srefill_r>
  803d6c:	013fffc4 	movi	r4,-1
  803d70:	1000071e 	bne	r2,zero,803d90 <__srget_r+0x38>
  803d74:	80800117 	ldw	r2,4(r16)
  803d78:	81000017 	ldw	r4,0(r16)
  803d7c:	10bfffc4 	addi	r2,r2,-1
  803d80:	20c00044 	addi	r3,r4,1
  803d84:	80800115 	stw	r2,4(r16)
  803d88:	21000003 	ldbu	r4,0(r4)
  803d8c:	80c00015 	stw	r3,0(r16)
  803d90:	2005883a 	mov	r2,r4
  803d94:	dfc00117 	ldw	ra,4(sp)
  803d98:	dc000017 	ldw	r16,0(sp)
  803d9c:	dec00204 	addi	sp,sp,8
  803da0:	f800283a 	ret

00803da4 <__srget>:
  803da4:	00802074 	movhi	r2,129
  803da8:	109be504 	addi	r2,r2,28564
  803dac:	200b883a 	mov	r5,r4
  803db0:	11000017 	ldw	r4,0(r2)
  803db4:	0803d581 	jmpi	803d58 <__srget_r>

00803db8 <_sbrk_r>:
  803db8:	defffd04 	addi	sp,sp,-12
  803dbc:	dc000015 	stw	r16,0(sp)
  803dc0:	040020b4 	movhi	r16,130
  803dc4:	84233b04 	addi	r16,r16,-29460
  803dc8:	dc400115 	stw	r17,4(sp)
  803dcc:	80000015 	stw	zero,0(r16)
  803dd0:	2023883a 	mov	r17,r4
  803dd4:	2809883a 	mov	r4,r5
  803dd8:	dfc00215 	stw	ra,8(sp)
  803ddc:	081132c0 	call	81132c <sbrk>
  803de0:	1007883a 	mov	r3,r2
  803de4:	00bfffc4 	movi	r2,-1
  803de8:	18800626 	beq	r3,r2,803e04 <_sbrk_r+0x4c>
  803dec:	1805883a 	mov	r2,r3
  803df0:	dfc00217 	ldw	ra,8(sp)
  803df4:	dc400117 	ldw	r17,4(sp)
  803df8:	dc000017 	ldw	r16,0(sp)
  803dfc:	dec00304 	addi	sp,sp,12
  803e00:	f800283a 	ret
  803e04:	80800017 	ldw	r2,0(r16)
  803e08:	103ff826 	beq	r2,zero,803dec <_sbrk_r+0x34>
  803e0c:	88800015 	stw	r2,0(r17)
  803e10:	1805883a 	mov	r2,r3
  803e14:	dfc00217 	ldw	ra,8(sp)
  803e18:	dc400117 	ldw	r17,4(sp)
  803e1c:	dc000017 	ldw	r16,0(sp)
  803e20:	dec00304 	addi	sp,sp,12
  803e24:	f800283a 	ret

00803e28 <sprintf>:
  803e28:	deffe504 	addi	sp,sp,-108
  803e2c:	2013883a 	mov	r9,r4
  803e30:	dfc01815 	stw	ra,96(sp)
  803e34:	d9801915 	stw	r6,100(sp)
  803e38:	d9c01a15 	stw	r7,104(sp)
  803e3c:	d8801904 	addi	r2,sp,100
  803e40:	d8800015 	stw	r2,0(sp)
  803e44:	00802074 	movhi	r2,129
  803e48:	109be504 	addi	r2,r2,28564
  803e4c:	11000017 	ldw	r4,0(r2)
  803e50:	d9c00017 	ldw	r7,0(sp)
  803e54:	00808204 	movi	r2,520
  803e58:	00e00034 	movhi	r3,32768
  803e5c:	18ffffc4 	addi	r3,r3,-1
  803e60:	280d883a 	mov	r6,r5
  803e64:	d880040d 	sth	r2,16(sp)
  803e68:	d9400104 	addi	r5,sp,4
  803e6c:	00bfffc4 	movi	r2,-1
  803e70:	d8c00615 	stw	r3,24(sp)
  803e74:	d8c00315 	stw	r3,12(sp)
  803e78:	da400515 	stw	r9,20(sp)
  803e7c:	d880048d 	sth	r2,18(sp)
  803e80:	da400115 	stw	r9,4(sp)
  803e84:	08042280 	call	804228 <___vfprintf_internal_r>
  803e88:	d8c00117 	ldw	r3,4(sp)
  803e8c:	18000005 	stb	zero,0(r3)
  803e90:	dfc01817 	ldw	ra,96(sp)
  803e94:	dec01b04 	addi	sp,sp,108
  803e98:	f800283a 	ret

00803e9c <_sprintf_r>:
  803e9c:	deffe604 	addi	sp,sp,-104
  803ea0:	2813883a 	mov	r9,r5
  803ea4:	dfc01815 	stw	ra,96(sp)
  803ea8:	d9c01915 	stw	r7,100(sp)
  803eac:	d8801904 	addi	r2,sp,100
  803eb0:	d8800015 	stw	r2,0(sp)
  803eb4:	100f883a 	mov	r7,r2
  803eb8:	00808204 	movi	r2,520
  803ebc:	00e00034 	movhi	r3,32768
  803ec0:	18ffffc4 	addi	r3,r3,-1
  803ec4:	d880040d 	sth	r2,16(sp)
  803ec8:	d9400104 	addi	r5,sp,4
  803ecc:	00bfffc4 	movi	r2,-1
  803ed0:	d8c00615 	stw	r3,24(sp)
  803ed4:	d8c00315 	stw	r3,12(sp)
  803ed8:	da400515 	stw	r9,20(sp)
  803edc:	d880048d 	sth	r2,18(sp)
  803ee0:	da400115 	stw	r9,4(sp)
  803ee4:	08042280 	call	804228 <___vfprintf_internal_r>
  803ee8:	d8c00117 	ldw	r3,4(sp)
  803eec:	18000005 	stb	zero,0(r3)
  803ef0:	dfc01817 	ldw	ra,96(sp)
  803ef4:	dec01a04 	addi	sp,sp,104
  803ef8:	f800283a 	ret

00803efc <eofread>:
  803efc:	0005883a 	mov	r2,zero
  803f00:	f800283a 	ret

00803f04 <_sscanf_r>:
  803f04:	deffe404 	addi	sp,sp,-112
  803f08:	dcc01915 	stw	r19,100(sp)
  803f0c:	2027883a 	mov	r19,r4
  803f10:	dfc01a15 	stw	ra,104(sp)
  803f14:	dc401815 	stw	r17,96(sp)
  803f18:	d9c01b15 	stw	r7,108(sp)
  803f1c:	00808104 	movi	r2,516
  803f20:	2809883a 	mov	r4,r5
  803f24:	3023883a 	mov	r17,r6
  803f28:	d9400115 	stw	r5,4(sp)
  803f2c:	d9400515 	stw	r5,20(sp)
  803f30:	d880040d 	sth	r2,16(sp)
  803f34:	080415c0 	call	80415c <strlen>
  803f38:	d8c01b04 	addi	r3,sp,108
  803f3c:	d8c00015 	stw	r3,0(sp)
  803f40:	180f883a 	mov	r7,r3
  803f44:	023fffc4 	movi	r8,-1
  803f48:	00c02034 	movhi	r3,128
  803f4c:	18cfbf04 	addi	r3,r3,16124
  803f50:	9809883a 	mov	r4,r19
  803f54:	880d883a 	mov	r6,r17
  803f58:	d9400104 	addi	r5,sp,4
  803f5c:	d8800615 	stw	r2,24(sp)
  803f60:	d8c00915 	stw	r3,36(sp)
  803f64:	da00048d 	sth	r8,18(sp)
  803f68:	d8800215 	stw	r2,8(sp)
  803f6c:	d8000d15 	stw	zero,52(sp)
  803f70:	d8001215 	stw	zero,72(sp)
  803f74:	08060f80 	call	8060f8 <__svfscanf_r>
  803f78:	dfc01a17 	ldw	ra,104(sp)
  803f7c:	dcc01917 	ldw	r19,100(sp)
  803f80:	dc401817 	ldw	r17,96(sp)
  803f84:	dec01c04 	addi	sp,sp,112
  803f88:	f800283a 	ret

00803f8c <sscanf>:
  803f8c:	deffe404 	addi	sp,sp,-112
  803f90:	dfc01915 	stw	ra,100(sp)
  803f94:	dc401815 	stw	r17,96(sp)
  803f98:	d9801a15 	stw	r6,104(sp)
  803f9c:	d9c01b15 	stw	r7,108(sp)
  803fa0:	00808104 	movi	r2,516
  803fa4:	2823883a 	mov	r17,r5
  803fa8:	d9000515 	stw	r4,20(sp)
  803fac:	d9000115 	stw	r4,4(sp)
  803fb0:	d880040d 	sth	r2,16(sp)
  803fb4:	080415c0 	call	80415c <strlen>
  803fb8:	d8c01a04 	addi	r3,sp,104
  803fbc:	d8c00015 	stw	r3,0(sp)
  803fc0:	00c02074 	movhi	r3,129
  803fc4:	18dbe504 	addi	r3,r3,28564
  803fc8:	19000017 	ldw	r4,0(r3)
  803fcc:	d9c00017 	ldw	r7,0(sp)
  803fd0:	00c02034 	movhi	r3,128
  803fd4:	18cfbf04 	addi	r3,r3,16124
  803fd8:	023fffc4 	movi	r8,-1
  803fdc:	880d883a 	mov	r6,r17
  803fe0:	d9400104 	addi	r5,sp,4
  803fe4:	d8800615 	stw	r2,24(sp)
  803fe8:	d8c00915 	stw	r3,36(sp)
  803fec:	da00048d 	sth	r8,18(sp)
  803ff0:	d8800215 	stw	r2,8(sp)
  803ff4:	d8000d15 	stw	zero,52(sp)
  803ff8:	d8001215 	stw	zero,72(sp)
  803ffc:	08060f80 	call	8060f8 <__svfscanf_r>
  804000:	dfc01917 	ldw	ra,100(sp)
  804004:	dc401817 	ldw	r17,96(sp)
  804008:	dec01c04 	addi	sp,sp,112
  80400c:	f800283a 	ret

00804010 <__sclose>:
  804010:	2940038f 	ldh	r5,14(r5)
  804014:	0807a2c1 	jmpi	807a2c <_close_r>

00804018 <__sseek>:
  804018:	defffe04 	addi	sp,sp,-8
  80401c:	dc000015 	stw	r16,0(sp)
  804020:	2821883a 	mov	r16,r5
  804024:	2940038f 	ldh	r5,14(r5)
  804028:	dfc00115 	stw	ra,4(sp)
  80402c:	08096a40 	call	8096a4 <_lseek_r>
  804030:	1007883a 	mov	r3,r2
  804034:	00bfffc4 	movi	r2,-1
  804038:	18800926 	beq	r3,r2,804060 <__sseek+0x48>
  80403c:	8080030b 	ldhu	r2,12(r16)
  804040:	80c01415 	stw	r3,80(r16)
  804044:	10840014 	ori	r2,r2,4096
  804048:	8080030d 	sth	r2,12(r16)
  80404c:	1805883a 	mov	r2,r3
  804050:	dfc00117 	ldw	ra,4(sp)
  804054:	dc000017 	ldw	r16,0(sp)
  804058:	dec00204 	addi	sp,sp,8
  80405c:	f800283a 	ret
  804060:	8080030b 	ldhu	r2,12(r16)
  804064:	10bbffcc 	andi	r2,r2,61439
  804068:	8080030d 	sth	r2,12(r16)
  80406c:	1805883a 	mov	r2,r3
  804070:	dfc00117 	ldw	ra,4(sp)
  804074:	dc000017 	ldw	r16,0(sp)
  804078:	dec00204 	addi	sp,sp,8
  80407c:	f800283a 	ret

00804080 <__swrite>:
  804080:	2880030b 	ldhu	r2,12(r5)
  804084:	defffb04 	addi	sp,sp,-20
  804088:	dcc00315 	stw	r19,12(sp)
  80408c:	1080400c 	andi	r2,r2,256
  804090:	dc800215 	stw	r18,8(sp)
  804094:	dc400115 	stw	r17,4(sp)
  804098:	dc000015 	stw	r16,0(sp)
  80409c:	3027883a 	mov	r19,r6
  8040a0:	3825883a 	mov	r18,r7
  8040a4:	dfc00415 	stw	ra,16(sp)
  8040a8:	2821883a 	mov	r16,r5
  8040ac:	000d883a 	mov	r6,zero
  8040b0:	01c00084 	movi	r7,2
  8040b4:	2023883a 	mov	r17,r4
  8040b8:	10000226 	beq	r2,zero,8040c4 <__swrite+0x44>
  8040bc:	2940038f 	ldh	r5,14(r5)
  8040c0:	08096a40 	call	8096a4 <_lseek_r>
  8040c4:	8080030b 	ldhu	r2,12(r16)
  8040c8:	8140038f 	ldh	r5,14(r16)
  8040cc:	8809883a 	mov	r4,r17
  8040d0:	10bbffcc 	andi	r2,r2,61439
  8040d4:	980d883a 	mov	r6,r19
  8040d8:	900f883a 	mov	r7,r18
  8040dc:	8080030d 	sth	r2,12(r16)
  8040e0:	dfc00417 	ldw	ra,16(sp)
  8040e4:	dcc00317 	ldw	r19,12(sp)
  8040e8:	dc800217 	ldw	r18,8(sp)
  8040ec:	dc400117 	ldw	r17,4(sp)
  8040f0:	dc000017 	ldw	r16,0(sp)
  8040f4:	dec00504 	addi	sp,sp,20
  8040f8:	08078781 	jmpi	807878 <_write_r>

008040fc <__sread>:
  8040fc:	defffe04 	addi	sp,sp,-8
  804100:	dc000015 	stw	r16,0(sp)
  804104:	2821883a 	mov	r16,r5
  804108:	2940038f 	ldh	r5,14(r5)
  80410c:	dfc00115 	stw	ra,4(sp)
  804110:	080a8100 	call	80a810 <_read_r>
  804114:	1007883a 	mov	r3,r2
  804118:	10000816 	blt	r2,zero,80413c <__sread+0x40>
  80411c:	80801417 	ldw	r2,80(r16)
  804120:	10c5883a 	add	r2,r2,r3
  804124:	80801415 	stw	r2,80(r16)
  804128:	1805883a 	mov	r2,r3
  80412c:	dfc00117 	ldw	ra,4(sp)
  804130:	dc000017 	ldw	r16,0(sp)
  804134:	dec00204 	addi	sp,sp,8
  804138:	f800283a 	ret
  80413c:	8080030b 	ldhu	r2,12(r16)
  804140:	10bbffcc 	andi	r2,r2,61439
  804144:	8080030d 	sth	r2,12(r16)
  804148:	1805883a 	mov	r2,r3
  80414c:	dfc00117 	ldw	ra,4(sp)
  804150:	dc000017 	ldw	r16,0(sp)
  804154:	dec00204 	addi	sp,sp,8
  804158:	f800283a 	ret

0080415c <strlen>:
  80415c:	208000cc 	andi	r2,r4,3
  804160:	2011883a 	mov	r8,r4
  804164:	1000161e 	bne	r2,zero,8041c0 <strlen+0x64>
  804168:	20c00017 	ldw	r3,0(r4)
  80416c:	017fbff4 	movhi	r5,65279
  804170:	297fbfc4 	addi	r5,r5,-257
  804174:	01e02074 	movhi	r7,32897
  804178:	39e02004 	addi	r7,r7,-32640
  80417c:	1945883a 	add	r2,r3,r5
  804180:	11c4703a 	and	r2,r2,r7
  804184:	00c6303a 	nor	r3,zero,r3
  804188:	1886703a 	and	r3,r3,r2
  80418c:	18000c1e 	bne	r3,zero,8041c0 <strlen+0x64>
  804190:	280d883a 	mov	r6,r5
  804194:	380b883a 	mov	r5,r7
  804198:	21000104 	addi	r4,r4,4
  80419c:	20800017 	ldw	r2,0(r4)
  8041a0:	1187883a 	add	r3,r2,r6
  8041a4:	1946703a 	and	r3,r3,r5
  8041a8:	0084303a 	nor	r2,zero,r2
  8041ac:	10c4703a 	and	r2,r2,r3
  8041b0:	103ff926 	beq	r2,zero,804198 <strlen+0x3c>
  8041b4:	20800007 	ldb	r2,0(r4)
  8041b8:	10000326 	beq	r2,zero,8041c8 <strlen+0x6c>
  8041bc:	21000044 	addi	r4,r4,1
  8041c0:	20800007 	ldb	r2,0(r4)
  8041c4:	103ffd1e 	bne	r2,zero,8041bc <strlen+0x60>
  8041c8:	2205c83a 	sub	r2,r4,r8
  8041cc:	f800283a 	ret

008041d0 <__sprint_r>:
  8041d0:	30800217 	ldw	r2,8(r6)
  8041d4:	defffe04 	addi	sp,sp,-8
  8041d8:	dc000015 	stw	r16,0(sp)
  8041dc:	dfc00115 	stw	ra,4(sp)
  8041e0:	3021883a 	mov	r16,r6
  8041e4:	0007883a 	mov	r3,zero
  8041e8:	1000061e 	bne	r2,zero,804204 <__sprint_r+0x34>
  8041ec:	1805883a 	mov	r2,r3
  8041f0:	30000115 	stw	zero,4(r6)
  8041f4:	dfc00117 	ldw	ra,4(sp)
  8041f8:	dc000017 	ldw	r16,0(sp)
  8041fc:	dec00204 	addi	sp,sp,8
  804200:	f800283a 	ret
  804204:	08021f40 	call	8021f4 <__sfvwrite_r>
  804208:	1007883a 	mov	r3,r2
  80420c:	1805883a 	mov	r2,r3
  804210:	80000115 	stw	zero,4(r16)
  804214:	80000215 	stw	zero,8(r16)
  804218:	dfc00117 	ldw	ra,4(sp)
  80421c:	dc000017 	ldw	r16,0(sp)
  804220:	dec00204 	addi	sp,sp,8
  804224:	f800283a 	ret

00804228 <___vfprintf_internal_r>:
  804228:	defea304 	addi	sp,sp,-1396
  80422c:	dd815915 	stw	r22,1380(sp)
  804230:	dc015315 	stw	r16,1356(sp)
  804234:	d9c15215 	stw	r7,1352(sp)
  804238:	dfc15c15 	stw	ra,1392(sp)
  80423c:	df015b15 	stw	fp,1388(sp)
  804240:	ddc15a15 	stw	r23,1384(sp)
  804244:	dd415815 	stw	r21,1376(sp)
  804248:	dd015715 	stw	r20,1372(sp)
  80424c:	dcc15615 	stw	r19,1368(sp)
  804250:	dc815515 	stw	r18,1364(sp)
  804254:	dc415415 	stw	r17,1360(sp)
  804258:	282d883a 	mov	r22,r5
  80425c:	3021883a 	mov	r16,r6
  804260:	d9015015 	stw	r4,1344(sp)
  804264:	08095e80 	call	8095e8 <_localeconv_r>
  804268:	10800017 	ldw	r2,0(r2)
  80426c:	d9c15217 	ldw	r7,1352(sp)
  804270:	d8814a15 	stw	r2,1320(sp)
  804274:	d8815017 	ldw	r2,1344(sp)
  804278:	10000226 	beq	r2,zero,804284 <___vfprintf_internal_r+0x5c>
  80427c:	10800e17 	ldw	r2,56(r2)
  804280:	10020d26 	beq	r2,zero,804ab8 <___vfprintf_internal_r+0x890>
  804284:	b080030b 	ldhu	r2,12(r22)
  804288:	1080020c 	andi	r2,r2,8
  80428c:	10020e26 	beq	r2,zero,804ac8 <___vfprintf_internal_r+0x8a0>
  804290:	b0800417 	ldw	r2,16(r22)
  804294:	10020c26 	beq	r2,zero,804ac8 <___vfprintf_internal_r+0x8a0>
  804298:	b200030b 	ldhu	r8,12(r22)
  80429c:	00800284 	movi	r2,10
  8042a0:	40c0068c 	andi	r3,r8,26
  8042a4:	18802f1e 	bne	r3,r2,804364 <___vfprintf_internal_r+0x13c>
  8042a8:	b080038f 	ldh	r2,14(r22)
  8042ac:	10002d16 	blt	r2,zero,804364 <___vfprintf_internal_r+0x13c>
  8042b0:	b240038b 	ldhu	r9,14(r22)
  8042b4:	b2800717 	ldw	r10,28(r22)
  8042b8:	b2c00917 	ldw	r11,36(r22)
  8042bc:	d9015017 	ldw	r4,1344(sp)
  8042c0:	dc402a04 	addi	r17,sp,168
  8042c4:	d8804104 	addi	r2,sp,260
  8042c8:	00c10004 	movi	r3,1024
  8042cc:	423fff4c 	andi	r8,r8,65533
  8042d0:	800d883a 	mov	r6,r16
  8042d4:	880b883a 	mov	r5,r17
  8042d8:	da002d0d 	sth	r8,180(sp)
  8042dc:	da402d8d 	sth	r9,182(sp)
  8042e0:	da803115 	stw	r10,196(sp)
  8042e4:	dac03315 	stw	r11,204(sp)
  8042e8:	d8802e15 	stw	r2,184(sp)
  8042ec:	d8c02f15 	stw	r3,188(sp)
  8042f0:	d8802a15 	stw	r2,168(sp)
  8042f4:	d8c02c15 	stw	r3,176(sp)
  8042f8:	d8003015 	stw	zero,192(sp)
  8042fc:	08042280 	call	804228 <___vfprintf_internal_r>
  804300:	d8814c15 	stw	r2,1328(sp)
  804304:	10000416 	blt	r2,zero,804318 <___vfprintf_internal_r+0xf0>
  804308:	d9015017 	ldw	r4,1344(sp)
  80430c:	880b883a 	mov	r5,r17
  804310:	08010c80 	call	8010c8 <_fflush_r>
  804314:	1002321e 	bne	r2,zero,804be0 <___vfprintf_internal_r+0x9b8>
  804318:	d8802d0b 	ldhu	r2,180(sp)
  80431c:	1080100c 	andi	r2,r2,64
  804320:	10000326 	beq	r2,zero,804330 <___vfprintf_internal_r+0x108>
  804324:	b080030b 	ldhu	r2,12(r22)
  804328:	10801014 	ori	r2,r2,64
  80432c:	b080030d 	sth	r2,12(r22)
  804330:	d8814c17 	ldw	r2,1328(sp)
  804334:	dfc15c17 	ldw	ra,1392(sp)
  804338:	df015b17 	ldw	fp,1388(sp)
  80433c:	ddc15a17 	ldw	r23,1384(sp)
  804340:	dd815917 	ldw	r22,1380(sp)
  804344:	dd415817 	ldw	r21,1376(sp)
  804348:	dd015717 	ldw	r20,1372(sp)
  80434c:	dcc15617 	ldw	r19,1368(sp)
  804350:	dc815517 	ldw	r18,1364(sp)
  804354:	dc415417 	ldw	r17,1360(sp)
  804358:	dc015317 	ldw	r16,1356(sp)
  80435c:	dec15d04 	addi	sp,sp,1396
  804360:	f800283a 	ret
  804364:	0005883a 	mov	r2,zero
  804368:	0007883a 	mov	r3,zero
  80436c:	dd401a04 	addi	r21,sp,104
  804370:	d8814315 	stw	r2,1292(sp)
  804374:	802f883a 	mov	r23,r16
  804378:	d8c14415 	stw	r3,1296(sp)
  80437c:	d8014c15 	stw	zero,1328(sp)
  804380:	d8014915 	stw	zero,1316(sp)
  804384:	d8014515 	stw	zero,1300(sp)
  804388:	d8014815 	stw	zero,1312(sp)
  80438c:	dd400d15 	stw	r21,52(sp)
  804390:	d8000f15 	stw	zero,60(sp)
  804394:	d8000e15 	stw	zero,56(sp)
  804398:	b8800007 	ldb	r2,0(r23)
  80439c:	10001926 	beq	r2,zero,804404 <___vfprintf_internal_r+0x1dc>
  8043a0:	00c00944 	movi	r3,37
  8043a4:	10c01726 	beq	r2,r3,804404 <___vfprintf_internal_r+0x1dc>
  8043a8:	b821883a 	mov	r16,r23
  8043ac:	00000106 	br	8043b4 <___vfprintf_internal_r+0x18c>
  8043b0:	10c00326 	beq	r2,r3,8043c0 <___vfprintf_internal_r+0x198>
  8043b4:	84000044 	addi	r16,r16,1
  8043b8:	80800007 	ldb	r2,0(r16)
  8043bc:	103ffc1e 	bne	r2,zero,8043b0 <___vfprintf_internal_r+0x188>
  8043c0:	85e7c83a 	sub	r19,r16,r23
  8043c4:	98000e26 	beq	r19,zero,804400 <___vfprintf_internal_r+0x1d8>
  8043c8:	dc800f17 	ldw	r18,60(sp)
  8043cc:	dc400e17 	ldw	r17,56(sp)
  8043d0:	008001c4 	movi	r2,7
  8043d4:	94e5883a 	add	r18,r18,r19
  8043d8:	8c400044 	addi	r17,r17,1
  8043dc:	adc00015 	stw	r23,0(r21)
  8043e0:	dc800f15 	stw	r18,60(sp)
  8043e4:	acc00115 	stw	r19,4(r21)
  8043e8:	dc400e15 	stw	r17,56(sp)
  8043ec:	14428b16 	blt	r2,r17,804e1c <___vfprintf_internal_r+0xbf4>
  8043f0:	ad400204 	addi	r21,r21,8
  8043f4:	d9014c17 	ldw	r4,1328(sp)
  8043f8:	24c9883a 	add	r4,r4,r19
  8043fc:	d9014c15 	stw	r4,1328(sp)
  804400:	802f883a 	mov	r23,r16
  804404:	b8800007 	ldb	r2,0(r23)
  804408:	10013c26 	beq	r2,zero,8048fc <___vfprintf_internal_r+0x6d4>
  80440c:	bdc00044 	addi	r23,r23,1
  804410:	d8000405 	stb	zero,16(sp)
  804414:	b8c00007 	ldb	r3,0(r23)
  804418:	04ffffc4 	movi	r19,-1
  80441c:	d8014d15 	stw	zero,1332(sp)
  804420:	d8014b15 	stw	zero,1324(sp)
  804424:	d8c14e15 	stw	r3,1336(sp)
  804428:	bdc00044 	addi	r23,r23,1
  80442c:	d9414e17 	ldw	r5,1336(sp)
  804430:	00801604 	movi	r2,88
  804434:	28fff804 	addi	r3,r5,-32
  804438:	10c06036 	bltu	r2,r3,8045bc <___vfprintf_internal_r+0x394>
  80443c:	18c5883a 	add	r2,r3,r3
  804440:	1085883a 	add	r2,r2,r2
  804444:	00c02034 	movhi	r3,128
  804448:	18d11604 	addi	r3,r3,17496
  80444c:	10c5883a 	add	r2,r2,r3
  804450:	11000017 	ldw	r4,0(r2)
  804454:	2000683a 	jmp	r4
  804458:	008053cc 	andi	r2,zero,335
  80445c:	008045bc 	xorhi	r2,zero,278
  804460:	008045bc 	xorhi	r2,zero,278
  804464:	008053b8 	rdprs	r2,zero,334
  804468:	008045bc 	xorhi	r2,zero,278
  80446c:	008045bc 	xorhi	r2,zero,278
  804470:	008045bc 	xorhi	r2,zero,278
  804474:	008045bc 	xorhi	r2,zero,278
  804478:	008045bc 	xorhi	r2,zero,278
  80447c:	008045bc 	xorhi	r2,zero,278
  804480:	00805198 	cmpnei	r2,zero,326
  804484:	008053a8 	cmpgeui	r2,zero,334
  804488:	008045bc 	xorhi	r2,zero,278
  80448c:	008051b0 	cmpltui	r2,zero,326
  804490:	00805444 	movi	r2,337
  804494:	008045bc 	xorhi	r2,zero,278
  804498:	00805430 	cmpltui	r2,zero,336
  80449c:	008053f8 	rdprs	r2,zero,335
  8044a0:	008053f8 	rdprs	r2,zero,335
  8044a4:	008053f8 	rdprs	r2,zero,335
  8044a8:	008053f8 	rdprs	r2,zero,335
  8044ac:	008053f8 	rdprs	r2,zero,335
  8044b0:	008053f8 	rdprs	r2,zero,335
  8044b4:	008053f8 	rdprs	r2,zero,335
  8044b8:	008053f8 	rdprs	r2,zero,335
  8044bc:	008053f8 	rdprs	r2,zero,335
  8044c0:	008045bc 	xorhi	r2,zero,278
  8044c4:	008045bc 	xorhi	r2,zero,278
  8044c8:	008045bc 	xorhi	r2,zero,278
  8044cc:	008045bc 	xorhi	r2,zero,278
  8044d0:	008045bc 	xorhi	r2,zero,278
  8044d4:	008045bc 	xorhi	r2,zero,278
  8044d8:	008045bc 	xorhi	r2,zero,278
  8044dc:	008045bc 	xorhi	r2,zero,278
  8044e0:	008045bc 	xorhi	r2,zero,278
  8044e4:	008045bc 	xorhi	r2,zero,278
  8044e8:	00804c14 	movui	r2,304
  8044ec:	00805280 	call	80528 <__reset-0x77fad8>
  8044f0:	008045bc 	xorhi	r2,zero,278
  8044f4:	00805280 	call	80528 <__reset-0x77fad8>
  8044f8:	008045bc 	xorhi	r2,zero,278
  8044fc:	008045bc 	xorhi	r2,zero,278
  804500:	008045bc 	xorhi	r2,zero,278
  804504:	008045bc 	xorhi	r2,zero,278
  804508:	008053e4 	muli	r2,zero,335
  80450c:	008045bc 	xorhi	r2,zero,278
  804510:	008045bc 	xorhi	r2,zero,278
  804514:	00804cc8 	cmpgei	r2,zero,307
  804518:	008045bc 	xorhi	r2,zero,278
  80451c:	008045bc 	xorhi	r2,zero,278
  804520:	008045bc 	xorhi	r2,zero,278
  804524:	008045bc 	xorhi	r2,zero,278
  804528:	008045bc 	xorhi	r2,zero,278
  80452c:	00804d14 	movui	r2,308
  804530:	008045bc 	xorhi	r2,zero,278
  804534:	008045bc 	xorhi	r2,zero,278
  804538:	00805334 	movhi	r2,332
  80453c:	008045bc 	xorhi	r2,zero,278
  804540:	008045bc 	xorhi	r2,zero,278
  804544:	008045bc 	xorhi	r2,zero,278
  804548:	008045bc 	xorhi	r2,zero,278
  80454c:	008045bc 	xorhi	r2,zero,278
  804550:	008045bc 	xorhi	r2,zero,278
  804554:	008045bc 	xorhi	r2,zero,278
  804558:	008045bc 	xorhi	r2,zero,278
  80455c:	008045bc 	xorhi	r2,zero,278
  804560:	008045bc 	xorhi	r2,zero,278
  804564:	00805308 	cmpgei	r2,zero,332
  804568:	00804c20 	cmpeqi	r2,zero,304
  80456c:	00805280 	call	80528 <__reset-0x77fad8>
  804570:	00805280 	call	80528 <__reset-0x77fad8>
  804574:	00805280 	call	80528 <__reset-0x77fad8>
  804578:	0080526c 	andhi	r2,zero,329
  80457c:	00804c20 	cmpeqi	r2,zero,304
  804580:	008045bc 	xorhi	r2,zero,278
  804584:	008045bc 	xorhi	r2,zero,278
  804588:	008051f4 	movhi	r2,327
  80458c:	008045bc 	xorhi	r2,zero,278
  804590:	008051c4 	movi	r2,327
  804594:	00804cd4 	movui	r2,307
  804598:	00805224 	muli	r2,zero,328
  80459c:	00805210 	cmplti	r2,zero,328
  8045a0:	008045bc 	xorhi	r2,zero,278
  8045a4:	008054a0 	cmpeqi	r2,zero,338
  8045a8:	008045bc 	xorhi	r2,zero,278
  8045ac:	00804d20 	cmpeqi	r2,zero,308
  8045b0:	008045bc 	xorhi	r2,zero,278
  8045b4:	008045bc 	xorhi	r2,zero,278
  8045b8:	00805398 	cmpnei	r2,zero,334
  8045bc:	d9014e17 	ldw	r4,1336(sp)
  8045c0:	2000ce26 	beq	r4,zero,8048fc <___vfprintf_internal_r+0x6d4>
  8045c4:	01400044 	movi	r5,1
  8045c8:	d9801004 	addi	r6,sp,64
  8045cc:	d9c14115 	stw	r7,1284(sp)
  8045d0:	d9414615 	stw	r5,1304(sp)
  8045d4:	d9814215 	stw	r6,1288(sp)
  8045d8:	280f883a 	mov	r7,r5
  8045dc:	d9001005 	stb	r4,64(sp)
  8045e0:	d8000405 	stb	zero,16(sp)
  8045e4:	d8014715 	stw	zero,1308(sp)
  8045e8:	d8c14d17 	ldw	r3,1332(sp)
  8045ec:	1880008c 	andi	r2,r3,2
  8045f0:	1005003a 	cmpeq	r2,r2,zero
  8045f4:	d8815115 	stw	r2,1348(sp)
  8045f8:	1000031e 	bne	r2,zero,804608 <___vfprintf_internal_r+0x3e0>
  8045fc:	d9014617 	ldw	r4,1304(sp)
  804600:	21000084 	addi	r4,r4,2
  804604:	d9014615 	stw	r4,1304(sp)
  804608:	d9414d17 	ldw	r5,1332(sp)
  80460c:	2940210c 	andi	r5,r5,132
  804610:	d9414f15 	stw	r5,1340(sp)
  804614:	28002d1e 	bne	r5,zero,8046cc <___vfprintf_internal_r+0x4a4>
  804618:	d9814b17 	ldw	r6,1324(sp)
  80461c:	d8814617 	ldw	r2,1304(sp)
  804620:	30a1c83a 	sub	r16,r6,r2
  804624:	0400290e 	bge	zero,r16,8046cc <___vfprintf_internal_r+0x4a4>
  804628:	00800404 	movi	r2,16
  80462c:	1404580e 	bge	r2,r16,805790 <___vfprintf_internal_r+0x1568>
  804630:	dc800f17 	ldw	r18,60(sp)
  804634:	dc400e17 	ldw	r17,56(sp)
  804638:	1027883a 	mov	r19,r2
  80463c:	07002074 	movhi	fp,129
  804640:	e7134a04 	addi	fp,fp,19752
  804644:	050001c4 	movi	r20,7
  804648:	00000306 	br	804658 <___vfprintf_internal_r+0x430>
  80464c:	843ffc04 	addi	r16,r16,-16
  804650:	ad400204 	addi	r21,r21,8
  804654:	9c00130e 	bge	r19,r16,8046a4 <___vfprintf_internal_r+0x47c>
  804658:	94800404 	addi	r18,r18,16
  80465c:	8c400044 	addi	r17,r17,1
  804660:	af000015 	stw	fp,0(r21)
  804664:	acc00115 	stw	r19,4(r21)
  804668:	dc800f15 	stw	r18,60(sp)
  80466c:	dc400e15 	stw	r17,56(sp)
  804670:	a47ff60e 	bge	r20,r17,80464c <___vfprintf_internal_r+0x424>
  804674:	d9015017 	ldw	r4,1344(sp)
  804678:	b00b883a 	mov	r5,r22
  80467c:	d9800d04 	addi	r6,sp,52
  804680:	d9c15215 	stw	r7,1352(sp)
  804684:	08041d00 	call	8041d0 <__sprint_r>
  804688:	d9c15217 	ldw	r7,1352(sp)
  80468c:	10009e1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804690:	843ffc04 	addi	r16,r16,-16
  804694:	dc800f17 	ldw	r18,60(sp)
  804698:	dc400e17 	ldw	r17,56(sp)
  80469c:	dd401a04 	addi	r21,sp,104
  8046a0:	9c3fed16 	blt	r19,r16,804658 <___vfprintf_internal_r+0x430>
  8046a4:	9425883a 	add	r18,r18,r16
  8046a8:	8c400044 	addi	r17,r17,1
  8046ac:	008001c4 	movi	r2,7
  8046b0:	af000015 	stw	fp,0(r21)
  8046b4:	ac000115 	stw	r16,4(r21)
  8046b8:	dc800f15 	stw	r18,60(sp)
  8046bc:	dc400e15 	stw	r17,56(sp)
  8046c0:	1441f516 	blt	r2,r17,804e98 <___vfprintf_internal_r+0xc70>
  8046c4:	ad400204 	addi	r21,r21,8
  8046c8:	00000206 	br	8046d4 <___vfprintf_internal_r+0x4ac>
  8046cc:	dc800f17 	ldw	r18,60(sp)
  8046d0:	dc400e17 	ldw	r17,56(sp)
  8046d4:	d8800407 	ldb	r2,16(sp)
  8046d8:	10000b26 	beq	r2,zero,804708 <___vfprintf_internal_r+0x4e0>
  8046dc:	00800044 	movi	r2,1
  8046e0:	94800044 	addi	r18,r18,1
  8046e4:	8c400044 	addi	r17,r17,1
  8046e8:	a8800115 	stw	r2,4(r21)
  8046ec:	d8c00404 	addi	r3,sp,16
  8046f0:	008001c4 	movi	r2,7
  8046f4:	a8c00015 	stw	r3,0(r21)
  8046f8:	dc800f15 	stw	r18,60(sp)
  8046fc:	dc400e15 	stw	r17,56(sp)
  804700:	1441da16 	blt	r2,r17,804e6c <___vfprintf_internal_r+0xc44>
  804704:	ad400204 	addi	r21,r21,8
  804708:	d9015117 	ldw	r4,1348(sp)
  80470c:	20000b1e 	bne	r4,zero,80473c <___vfprintf_internal_r+0x514>
  804710:	d8800504 	addi	r2,sp,20
  804714:	94800084 	addi	r18,r18,2
  804718:	8c400044 	addi	r17,r17,1
  80471c:	a8800015 	stw	r2,0(r21)
  804720:	00c00084 	movi	r3,2
  804724:	008001c4 	movi	r2,7
  804728:	a8c00115 	stw	r3,4(r21)
  80472c:	dc800f15 	stw	r18,60(sp)
  804730:	dc400e15 	stw	r17,56(sp)
  804734:	1441c216 	blt	r2,r17,804e40 <___vfprintf_internal_r+0xc18>
  804738:	ad400204 	addi	r21,r21,8
  80473c:	d9414f17 	ldw	r5,1340(sp)
  804740:	00802004 	movi	r2,128
  804744:	2880b126 	beq	r5,r2,804a0c <___vfprintf_internal_r+0x7e4>
  804748:	d8c14717 	ldw	r3,1308(sp)
  80474c:	19e1c83a 	sub	r16,r3,r7
  804750:	0400260e 	bge	zero,r16,8047ec <___vfprintf_internal_r+0x5c4>
  804754:	00800404 	movi	r2,16
  804758:	1403c90e 	bge	r2,r16,805680 <___vfprintf_internal_r+0x1458>
  80475c:	1027883a 	mov	r19,r2
  804760:	07002074 	movhi	fp,129
  804764:	e7134604 	addi	fp,fp,19736
  804768:	050001c4 	movi	r20,7
  80476c:	00000306 	br	80477c <___vfprintf_internal_r+0x554>
  804770:	843ffc04 	addi	r16,r16,-16
  804774:	ad400204 	addi	r21,r21,8
  804778:	9c00130e 	bge	r19,r16,8047c8 <___vfprintf_internal_r+0x5a0>
  80477c:	94800404 	addi	r18,r18,16
  804780:	8c400044 	addi	r17,r17,1
  804784:	af000015 	stw	fp,0(r21)
  804788:	acc00115 	stw	r19,4(r21)
  80478c:	dc800f15 	stw	r18,60(sp)
  804790:	dc400e15 	stw	r17,56(sp)
  804794:	a47ff60e 	bge	r20,r17,804770 <___vfprintf_internal_r+0x548>
  804798:	d9015017 	ldw	r4,1344(sp)
  80479c:	b00b883a 	mov	r5,r22
  8047a0:	d9800d04 	addi	r6,sp,52
  8047a4:	d9c15215 	stw	r7,1352(sp)
  8047a8:	08041d00 	call	8041d0 <__sprint_r>
  8047ac:	d9c15217 	ldw	r7,1352(sp)
  8047b0:	1000551e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  8047b4:	843ffc04 	addi	r16,r16,-16
  8047b8:	dc800f17 	ldw	r18,60(sp)
  8047bc:	dc400e17 	ldw	r17,56(sp)
  8047c0:	dd401a04 	addi	r21,sp,104
  8047c4:	9c3fed16 	blt	r19,r16,80477c <___vfprintf_internal_r+0x554>
  8047c8:	9425883a 	add	r18,r18,r16
  8047cc:	8c400044 	addi	r17,r17,1
  8047d0:	008001c4 	movi	r2,7
  8047d4:	af000015 	stw	fp,0(r21)
  8047d8:	ac000115 	stw	r16,4(r21)
  8047dc:	dc800f15 	stw	r18,60(sp)
  8047e0:	dc400e15 	stw	r17,56(sp)
  8047e4:	14418216 	blt	r2,r17,804df0 <___vfprintf_internal_r+0xbc8>
  8047e8:	ad400204 	addi	r21,r21,8
  8047ec:	d9014d17 	ldw	r4,1332(sp)
  8047f0:	2080400c 	andi	r2,r4,256
  8047f4:	10004a1e 	bne	r2,zero,804920 <___vfprintf_internal_r+0x6f8>
  8047f8:	d9414217 	ldw	r5,1288(sp)
  8047fc:	91e5883a 	add	r18,r18,r7
  804800:	8c400044 	addi	r17,r17,1
  804804:	008001c4 	movi	r2,7
  804808:	a9400015 	stw	r5,0(r21)
  80480c:	a9c00115 	stw	r7,4(r21)
  804810:	dc800f15 	stw	r18,60(sp)
  804814:	dc400e15 	stw	r17,56(sp)
  804818:	14416716 	blt	r2,r17,804db8 <___vfprintf_internal_r+0xb90>
  80481c:	a8c00204 	addi	r3,r21,8
  804820:	d9814d17 	ldw	r6,1332(sp)
  804824:	3080010c 	andi	r2,r6,4
  804828:	10002826 	beq	r2,zero,8048cc <___vfprintf_internal_r+0x6a4>
  80482c:	d8814b17 	ldw	r2,1324(sp)
  804830:	d9014617 	ldw	r4,1304(sp)
  804834:	1121c83a 	sub	r16,r2,r4
  804838:	0400240e 	bge	zero,r16,8048cc <___vfprintf_internal_r+0x6a4>
  80483c:	00800404 	movi	r2,16
  804840:	14044f0e 	bge	r2,r16,805980 <___vfprintf_internal_r+0x1758>
  804844:	dc400e17 	ldw	r17,56(sp)
  804848:	1027883a 	mov	r19,r2
  80484c:	07002074 	movhi	fp,129
  804850:	e7134a04 	addi	fp,fp,19752
  804854:	050001c4 	movi	r20,7
  804858:	00000306 	br	804868 <___vfprintf_internal_r+0x640>
  80485c:	843ffc04 	addi	r16,r16,-16
  804860:	18c00204 	addi	r3,r3,8
  804864:	9c00110e 	bge	r19,r16,8048ac <___vfprintf_internal_r+0x684>
  804868:	94800404 	addi	r18,r18,16
  80486c:	8c400044 	addi	r17,r17,1
  804870:	1f000015 	stw	fp,0(r3)
  804874:	1cc00115 	stw	r19,4(r3)
  804878:	dc800f15 	stw	r18,60(sp)
  80487c:	dc400e15 	stw	r17,56(sp)
  804880:	a47ff60e 	bge	r20,r17,80485c <___vfprintf_internal_r+0x634>
  804884:	d9015017 	ldw	r4,1344(sp)
  804888:	b00b883a 	mov	r5,r22
  80488c:	d9800d04 	addi	r6,sp,52
  804890:	08041d00 	call	8041d0 <__sprint_r>
  804894:	10001c1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804898:	843ffc04 	addi	r16,r16,-16
  80489c:	dc800f17 	ldw	r18,60(sp)
  8048a0:	dc400e17 	ldw	r17,56(sp)
  8048a4:	d8c01a04 	addi	r3,sp,104
  8048a8:	9c3fef16 	blt	r19,r16,804868 <___vfprintf_internal_r+0x640>
  8048ac:	9425883a 	add	r18,r18,r16
  8048b0:	8c400044 	addi	r17,r17,1
  8048b4:	008001c4 	movi	r2,7
  8048b8:	1f000015 	stw	fp,0(r3)
  8048bc:	1c000115 	stw	r16,4(r3)
  8048c0:	dc800f15 	stw	r18,60(sp)
  8048c4:	dc400e15 	stw	r17,56(sp)
  8048c8:	1440cb16 	blt	r2,r17,804bf8 <___vfprintf_internal_r+0x9d0>
  8048cc:	d8814b17 	ldw	r2,1324(sp)
  8048d0:	d9414617 	ldw	r5,1304(sp)
  8048d4:	1140010e 	bge	r2,r5,8048dc <___vfprintf_internal_r+0x6b4>
  8048d8:	2805883a 	mov	r2,r5
  8048dc:	d9814c17 	ldw	r6,1328(sp)
  8048e0:	308d883a 	add	r6,r6,r2
  8048e4:	d9814c15 	stw	r6,1328(sp)
  8048e8:	90013b1e 	bne	r18,zero,804dd8 <___vfprintf_internal_r+0xbb0>
  8048ec:	d9c14117 	ldw	r7,1284(sp)
  8048f0:	dd401a04 	addi	r21,sp,104
  8048f4:	d8000e15 	stw	zero,56(sp)
  8048f8:	003ea706 	br	804398 <___vfprintf_internal_r+0x170>
  8048fc:	d8800f17 	ldw	r2,60(sp)
  804900:	10053f1e 	bne	r2,zero,805e00 <___vfprintf_internal_r+0x1bd8>
  804904:	d8000e15 	stw	zero,56(sp)
  804908:	b080030b 	ldhu	r2,12(r22)
  80490c:	1080100c 	andi	r2,r2,64
  804910:	103e8726 	beq	r2,zero,804330 <___vfprintf_internal_r+0x108>
  804914:	00bfffc4 	movi	r2,-1
  804918:	d8814c15 	stw	r2,1328(sp)
  80491c:	003e8406 	br	804330 <___vfprintf_internal_r+0x108>
  804920:	d9814e17 	ldw	r6,1336(sp)
  804924:	00801944 	movi	r2,101
  804928:	11806e16 	blt	r2,r6,804ae4 <___vfprintf_internal_r+0x8bc>
  80492c:	d9414817 	ldw	r5,1312(sp)
  804930:	00c00044 	movi	r3,1
  804934:	1943430e 	bge	r3,r5,805644 <___vfprintf_internal_r+0x141c>
  804938:	d8814217 	ldw	r2,1288(sp)
  80493c:	94800044 	addi	r18,r18,1
  804940:	8c400044 	addi	r17,r17,1
  804944:	a8800015 	stw	r2,0(r21)
  804948:	008001c4 	movi	r2,7
  80494c:	a8c00115 	stw	r3,4(r21)
  804950:	dc800f15 	stw	r18,60(sp)
  804954:	dc400e15 	stw	r17,56(sp)
  804958:	1441ca16 	blt	r2,r17,805084 <___vfprintf_internal_r+0xe5c>
  80495c:	a8c00204 	addi	r3,r21,8
  804960:	d9014a17 	ldw	r4,1320(sp)
  804964:	00800044 	movi	r2,1
  804968:	94800044 	addi	r18,r18,1
  80496c:	8c400044 	addi	r17,r17,1
  804970:	18800115 	stw	r2,4(r3)
  804974:	008001c4 	movi	r2,7
  804978:	19000015 	stw	r4,0(r3)
  80497c:	dc800f15 	stw	r18,60(sp)
  804980:	dc400e15 	stw	r17,56(sp)
  804984:	1441b616 	blt	r2,r17,805060 <___vfprintf_internal_r+0xe38>
  804988:	1cc00204 	addi	r19,r3,8
  80498c:	d9014317 	ldw	r4,1292(sp)
  804990:	d9414417 	ldw	r5,1296(sp)
  804994:	000d883a 	mov	r6,zero
  804998:	000f883a 	mov	r7,zero
  80499c:	080f4540 	call	80f454 <__nedf2>
  8049a0:	10017426 	beq	r2,zero,804f74 <___vfprintf_internal_r+0xd4c>
  8049a4:	d9414817 	ldw	r5,1312(sp)
  8049a8:	d9814217 	ldw	r6,1288(sp)
  8049ac:	8c400044 	addi	r17,r17,1
  8049b0:	2c85883a 	add	r2,r5,r18
  8049b4:	14bfffc4 	addi	r18,r2,-1
  8049b8:	28bfffc4 	addi	r2,r5,-1
  8049bc:	30c00044 	addi	r3,r6,1
  8049c0:	98800115 	stw	r2,4(r19)
  8049c4:	008001c4 	movi	r2,7
  8049c8:	98c00015 	stw	r3,0(r19)
  8049cc:	dc800f15 	stw	r18,60(sp)
  8049d0:	dc400e15 	stw	r17,56(sp)
  8049d4:	14418e16 	blt	r2,r17,805010 <___vfprintf_internal_r+0xde8>
  8049d8:	9cc00204 	addi	r19,r19,8
  8049dc:	d9414917 	ldw	r5,1316(sp)
  8049e0:	d8800904 	addi	r2,sp,36
  8049e4:	8c400044 	addi	r17,r17,1
  8049e8:	9165883a 	add	r18,r18,r5
  8049ec:	98800015 	stw	r2,0(r19)
  8049f0:	008001c4 	movi	r2,7
  8049f4:	99400115 	stw	r5,4(r19)
  8049f8:	dc800f15 	stw	r18,60(sp)
  8049fc:	dc400e15 	stw	r17,56(sp)
  804a00:	1440ed16 	blt	r2,r17,804db8 <___vfprintf_internal_r+0xb90>
  804a04:	98c00204 	addi	r3,r19,8
  804a08:	003f8506 	br	804820 <___vfprintf_internal_r+0x5f8>
  804a0c:	d9814b17 	ldw	r6,1324(sp)
  804a10:	d8814617 	ldw	r2,1304(sp)
  804a14:	30a1c83a 	sub	r16,r6,r2
  804a18:	043f4b0e 	bge	zero,r16,804748 <___vfprintf_internal_r+0x520>
  804a1c:	00800404 	movi	r2,16
  804a20:	1404340e 	bge	r2,r16,805af4 <___vfprintf_internal_r+0x18cc>
  804a24:	1027883a 	mov	r19,r2
  804a28:	07002074 	movhi	fp,129
  804a2c:	e7134604 	addi	fp,fp,19736
  804a30:	050001c4 	movi	r20,7
  804a34:	00000306 	br	804a44 <___vfprintf_internal_r+0x81c>
  804a38:	843ffc04 	addi	r16,r16,-16
  804a3c:	ad400204 	addi	r21,r21,8
  804a40:	9c00130e 	bge	r19,r16,804a90 <___vfprintf_internal_r+0x868>
  804a44:	94800404 	addi	r18,r18,16
  804a48:	8c400044 	addi	r17,r17,1
  804a4c:	af000015 	stw	fp,0(r21)
  804a50:	acc00115 	stw	r19,4(r21)
  804a54:	dc800f15 	stw	r18,60(sp)
  804a58:	dc400e15 	stw	r17,56(sp)
  804a5c:	a47ff60e 	bge	r20,r17,804a38 <___vfprintf_internal_r+0x810>
  804a60:	d9015017 	ldw	r4,1344(sp)
  804a64:	b00b883a 	mov	r5,r22
  804a68:	d9800d04 	addi	r6,sp,52
  804a6c:	d9c15215 	stw	r7,1352(sp)
  804a70:	08041d00 	call	8041d0 <__sprint_r>
  804a74:	d9c15217 	ldw	r7,1352(sp)
  804a78:	103fa31e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804a7c:	843ffc04 	addi	r16,r16,-16
  804a80:	dc800f17 	ldw	r18,60(sp)
  804a84:	dc400e17 	ldw	r17,56(sp)
  804a88:	dd401a04 	addi	r21,sp,104
  804a8c:	9c3fed16 	blt	r19,r16,804a44 <___vfprintf_internal_r+0x81c>
  804a90:	9425883a 	add	r18,r18,r16
  804a94:	8c400044 	addi	r17,r17,1
  804a98:	008001c4 	movi	r2,7
  804a9c:	af000015 	stw	fp,0(r21)
  804aa0:	ac000115 	stw	r16,4(r21)
  804aa4:	dc800f15 	stw	r18,60(sp)
  804aa8:	dc400e15 	stw	r17,56(sp)
  804aac:	14416116 	blt	r2,r17,805034 <___vfprintf_internal_r+0xe0c>
  804ab0:	ad400204 	addi	r21,r21,8
  804ab4:	003f2406 	br	804748 <___vfprintf_internal_r+0x520>
  804ab8:	d9015017 	ldw	r4,1344(sp)
  804abc:	08014880 	call	801488 <__sinit>
  804ac0:	d9c15217 	ldw	r7,1352(sp)
  804ac4:	003def06 	br	804284 <___vfprintf_internal_r+0x5c>
  804ac8:	d9015017 	ldw	r4,1344(sp)
  804acc:	b00b883a 	mov	r5,r22
  804ad0:	d9c15215 	stw	r7,1352(sp)
  804ad4:	08078f00 	call	8078f0 <__swsetup_r>
  804ad8:	d9c15217 	ldw	r7,1352(sp)
  804adc:	103dee26 	beq	r2,zero,804298 <___vfprintf_internal_r+0x70>
  804ae0:	003f8c06 	br	804914 <___vfprintf_internal_r+0x6ec>
  804ae4:	d9014317 	ldw	r4,1292(sp)
  804ae8:	d9414417 	ldw	r5,1296(sp)
  804aec:	000d883a 	mov	r6,zero
  804af0:	000f883a 	mov	r7,zero
  804af4:	080f3cc0 	call	80f3cc <__eqdf2>
  804af8:	1000f21e 	bne	r2,zero,804ec4 <___vfprintf_internal_r+0xc9c>
  804afc:	00802074 	movhi	r2,129
  804b00:	10934504 	addi	r2,r2,19732
  804b04:	94800044 	addi	r18,r18,1
  804b08:	8c400044 	addi	r17,r17,1
  804b0c:	a8800015 	stw	r2,0(r21)
  804b10:	00c00044 	movi	r3,1
  804b14:	008001c4 	movi	r2,7
  804b18:	a8c00115 	stw	r3,4(r21)
  804b1c:	dc800f15 	stw	r18,60(sp)
  804b20:	dc400e15 	stw	r17,56(sp)
  804b24:	1442fa16 	blt	r2,r17,805710 <___vfprintf_internal_r+0x14e8>
  804b28:	a8c00204 	addi	r3,r21,8
  804b2c:	d8800617 	ldw	r2,24(sp)
  804b30:	d9014817 	ldw	r4,1312(sp)
  804b34:	11015c0e 	bge	r2,r4,8050a8 <___vfprintf_internal_r+0xe80>
  804b38:	dc400e17 	ldw	r17,56(sp)
  804b3c:	d9814a17 	ldw	r6,1320(sp)
  804b40:	00800044 	movi	r2,1
  804b44:	94800044 	addi	r18,r18,1
  804b48:	8c400044 	addi	r17,r17,1
  804b4c:	18800115 	stw	r2,4(r3)
  804b50:	008001c4 	movi	r2,7
  804b54:	19800015 	stw	r6,0(r3)
  804b58:	dc800f15 	stw	r18,60(sp)
  804b5c:	dc400e15 	stw	r17,56(sp)
  804b60:	14431016 	blt	r2,r17,8057a4 <___vfprintf_internal_r+0x157c>
  804b64:	18c00204 	addi	r3,r3,8
  804b68:	d8814817 	ldw	r2,1312(sp)
  804b6c:	143fffc4 	addi	r16,r2,-1
  804b70:	043f2b0e 	bge	zero,r16,804820 <___vfprintf_internal_r+0x5f8>
  804b74:	00800404 	movi	r2,16
  804b78:	1402a20e 	bge	r2,r16,805604 <___vfprintf_internal_r+0x13dc>
  804b7c:	dc400e17 	ldw	r17,56(sp)
  804b80:	1027883a 	mov	r19,r2
  804b84:	07002074 	movhi	fp,129
  804b88:	e7134604 	addi	fp,fp,19736
  804b8c:	050001c4 	movi	r20,7
  804b90:	00000306 	br	804ba0 <___vfprintf_internal_r+0x978>
  804b94:	18c00204 	addi	r3,r3,8
  804b98:	843ffc04 	addi	r16,r16,-16
  804b9c:	9c029c0e 	bge	r19,r16,805610 <___vfprintf_internal_r+0x13e8>
  804ba0:	94800404 	addi	r18,r18,16
  804ba4:	8c400044 	addi	r17,r17,1
  804ba8:	1f000015 	stw	fp,0(r3)
  804bac:	1cc00115 	stw	r19,4(r3)
  804bb0:	dc800f15 	stw	r18,60(sp)
  804bb4:	dc400e15 	stw	r17,56(sp)
  804bb8:	a47ff60e 	bge	r20,r17,804b94 <___vfprintf_internal_r+0x96c>
  804bbc:	d9015017 	ldw	r4,1344(sp)
  804bc0:	b00b883a 	mov	r5,r22
  804bc4:	d9800d04 	addi	r6,sp,52
  804bc8:	08041d00 	call	8041d0 <__sprint_r>
  804bcc:	103f4e1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804bd0:	dc800f17 	ldw	r18,60(sp)
  804bd4:	dc400e17 	ldw	r17,56(sp)
  804bd8:	d8c01a04 	addi	r3,sp,104
  804bdc:	003fee06 	br	804b98 <___vfprintf_internal_r+0x970>
  804be0:	d8802d0b 	ldhu	r2,180(sp)
  804be4:	00ffffc4 	movi	r3,-1
  804be8:	d8c14c15 	stw	r3,1328(sp)
  804bec:	1080100c 	andi	r2,r2,64
  804bf0:	103dcc1e 	bne	r2,zero,804324 <___vfprintf_internal_r+0xfc>
  804bf4:	003dce06 	br	804330 <___vfprintf_internal_r+0x108>
  804bf8:	d9015017 	ldw	r4,1344(sp)
  804bfc:	b00b883a 	mov	r5,r22
  804c00:	d9800d04 	addi	r6,sp,52
  804c04:	08041d00 	call	8041d0 <__sprint_r>
  804c08:	103f3f1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804c0c:	dc800f17 	ldw	r18,60(sp)
  804c10:	003f2e06 	br	8048cc <___vfprintf_internal_r+0x6a4>
  804c14:	d9414d17 	ldw	r5,1332(sp)
  804c18:	29400414 	ori	r5,r5,16
  804c1c:	d9414d15 	stw	r5,1332(sp)
  804c20:	d9814d17 	ldw	r6,1332(sp)
  804c24:	3080080c 	andi	r2,r6,32
  804c28:	10014f1e 	bne	r2,zero,805168 <___vfprintf_internal_r+0xf40>
  804c2c:	d8c14d17 	ldw	r3,1332(sp)
  804c30:	1880040c 	andi	r2,r3,16
  804c34:	1002ea1e 	bne	r2,zero,8057e0 <___vfprintf_internal_r+0x15b8>
  804c38:	d9014d17 	ldw	r4,1332(sp)
  804c3c:	2080100c 	andi	r2,r4,64
  804c40:	1002e726 	beq	r2,zero,8057e0 <___vfprintf_internal_r+0x15b8>
  804c44:	3880000f 	ldh	r2,0(r7)
  804c48:	39c00104 	addi	r7,r7,4
  804c4c:	d9c14115 	stw	r7,1284(sp)
  804c50:	1023d7fa 	srai	r17,r2,31
  804c54:	1021883a 	mov	r16,r2
  804c58:	88037216 	blt	r17,zero,805a24 <___vfprintf_internal_r+0x17fc>
  804c5c:	01000044 	movi	r4,1
  804c60:	98000416 	blt	r19,zero,804c74 <___vfprintf_internal_r+0xa4c>
  804c64:	d8c14d17 	ldw	r3,1332(sp)
  804c68:	00bfdfc4 	movi	r2,-129
  804c6c:	1886703a 	and	r3,r3,r2
  804c70:	d8c14d15 	stw	r3,1332(sp)
  804c74:	8444b03a 	or	r2,r16,r17
  804c78:	1002261e 	bne	r2,zero,805514 <___vfprintf_internal_r+0x12ec>
  804c7c:	9802251e 	bne	r19,zero,805514 <___vfprintf_internal_r+0x12ec>
  804c80:	20803fcc 	andi	r2,r4,255
  804c84:	10029b26 	beq	r2,zero,8056f4 <___vfprintf_internal_r+0x14cc>
  804c88:	d8c01a04 	addi	r3,sp,104
  804c8c:	dd001004 	addi	r20,sp,64
  804c90:	d8c14215 	stw	r3,1288(sp)
  804c94:	d8c14217 	ldw	r3,1288(sp)
  804c98:	dcc14615 	stw	r19,1304(sp)
  804c9c:	a0c5c83a 	sub	r2,r20,r3
  804ca0:	11c00a04 	addi	r7,r2,40
  804ca4:	99c0010e 	bge	r19,r7,804cac <___vfprintf_internal_r+0xa84>
  804ca8:	d9c14615 	stw	r7,1304(sp)
  804cac:	dcc14715 	stw	r19,1308(sp)
  804cb0:	d8800407 	ldb	r2,16(sp)
  804cb4:	103e4c26 	beq	r2,zero,8045e8 <___vfprintf_internal_r+0x3c0>
  804cb8:	d8814617 	ldw	r2,1304(sp)
  804cbc:	10800044 	addi	r2,r2,1
  804cc0:	d8814615 	stw	r2,1304(sp)
  804cc4:	003e4806 	br	8045e8 <___vfprintf_internal_r+0x3c0>
  804cc8:	d9814d17 	ldw	r6,1332(sp)
  804ccc:	31800414 	ori	r6,r6,16
  804cd0:	d9814d15 	stw	r6,1332(sp)
  804cd4:	d8c14d17 	ldw	r3,1332(sp)
  804cd8:	1880080c 	andi	r2,r3,32
  804cdc:	1001271e 	bne	r2,zero,80517c <___vfprintf_internal_r+0xf54>
  804ce0:	d9414d17 	ldw	r5,1332(sp)
  804ce4:	2880040c 	andi	r2,r5,16
  804ce8:	1002b61e 	bne	r2,zero,8057c4 <___vfprintf_internal_r+0x159c>
  804cec:	d9814d17 	ldw	r6,1332(sp)
  804cf0:	3080100c 	andi	r2,r6,64
  804cf4:	1002b326 	beq	r2,zero,8057c4 <___vfprintf_internal_r+0x159c>
  804cf8:	3c00000b 	ldhu	r16,0(r7)
  804cfc:	0009883a 	mov	r4,zero
  804d00:	39c00104 	addi	r7,r7,4
  804d04:	0023883a 	mov	r17,zero
  804d08:	d9c14115 	stw	r7,1284(sp)
  804d0c:	d8000405 	stb	zero,16(sp)
  804d10:	003fd306 	br	804c60 <___vfprintf_internal_r+0xa38>
  804d14:	d9014d17 	ldw	r4,1332(sp)
  804d18:	21000414 	ori	r4,r4,16
  804d1c:	d9014d15 	stw	r4,1332(sp)
  804d20:	d9414d17 	ldw	r5,1332(sp)
  804d24:	2880080c 	andi	r2,r5,32
  804d28:	1001081e 	bne	r2,zero,80514c <___vfprintf_internal_r+0xf24>
  804d2c:	d8c14d17 	ldw	r3,1332(sp)
  804d30:	1880040c 	andi	r2,r3,16
  804d34:	1002b01e 	bne	r2,zero,8057f8 <___vfprintf_internal_r+0x15d0>
  804d38:	d9014d17 	ldw	r4,1332(sp)
  804d3c:	2080100c 	andi	r2,r4,64
  804d40:	1002ad26 	beq	r2,zero,8057f8 <___vfprintf_internal_r+0x15d0>
  804d44:	3c00000b 	ldhu	r16,0(r7)
  804d48:	01000044 	movi	r4,1
  804d4c:	39c00104 	addi	r7,r7,4
  804d50:	0023883a 	mov	r17,zero
  804d54:	d9c14115 	stw	r7,1284(sp)
  804d58:	d8000405 	stb	zero,16(sp)
  804d5c:	003fc006 	br	804c60 <___vfprintf_internal_r+0xa38>
  804d60:	d9015017 	ldw	r4,1344(sp)
  804d64:	b00b883a 	mov	r5,r22
  804d68:	d9800d04 	addi	r6,sp,52
  804d6c:	08041d00 	call	8041d0 <__sprint_r>
  804d70:	103ee51e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804d74:	dc800f17 	ldw	r18,60(sp)
  804d78:	d8c01a04 	addi	r3,sp,104
  804d7c:	d9814d17 	ldw	r6,1332(sp)
  804d80:	3080004c 	andi	r2,r6,1
  804d84:	1005003a 	cmpeq	r2,r2,zero
  804d88:	103ea51e 	bne	r2,zero,804820 <___vfprintf_internal_r+0x5f8>
  804d8c:	00800044 	movi	r2,1
  804d90:	dc400e17 	ldw	r17,56(sp)
  804d94:	18800115 	stw	r2,4(r3)
  804d98:	d8814a17 	ldw	r2,1320(sp)
  804d9c:	94800044 	addi	r18,r18,1
  804da0:	8c400044 	addi	r17,r17,1
  804da4:	18800015 	stw	r2,0(r3)
  804da8:	008001c4 	movi	r2,7
  804dac:	dc800f15 	stw	r18,60(sp)
  804db0:	dc400e15 	stw	r17,56(sp)
  804db4:	14421e0e 	bge	r2,r17,805630 <___vfprintf_internal_r+0x1408>
  804db8:	d9015017 	ldw	r4,1344(sp)
  804dbc:	b00b883a 	mov	r5,r22
  804dc0:	d9800d04 	addi	r6,sp,52
  804dc4:	08041d00 	call	8041d0 <__sprint_r>
  804dc8:	103ecf1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804dcc:	dc800f17 	ldw	r18,60(sp)
  804dd0:	d8c01a04 	addi	r3,sp,104
  804dd4:	003e9206 	br	804820 <___vfprintf_internal_r+0x5f8>
  804dd8:	d9015017 	ldw	r4,1344(sp)
  804ddc:	b00b883a 	mov	r5,r22
  804de0:	d9800d04 	addi	r6,sp,52
  804de4:	08041d00 	call	8041d0 <__sprint_r>
  804de8:	103ec026 	beq	r2,zero,8048ec <___vfprintf_internal_r+0x6c4>
  804dec:	003ec606 	br	804908 <___vfprintf_internal_r+0x6e0>
  804df0:	d9015017 	ldw	r4,1344(sp)
  804df4:	b00b883a 	mov	r5,r22
  804df8:	d9800d04 	addi	r6,sp,52
  804dfc:	d9c15215 	stw	r7,1352(sp)
  804e00:	08041d00 	call	8041d0 <__sprint_r>
  804e04:	d9c15217 	ldw	r7,1352(sp)
  804e08:	103ebf1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804e0c:	dc800f17 	ldw	r18,60(sp)
  804e10:	dc400e17 	ldw	r17,56(sp)
  804e14:	dd401a04 	addi	r21,sp,104
  804e18:	003e7406 	br	8047ec <___vfprintf_internal_r+0x5c4>
  804e1c:	d9015017 	ldw	r4,1344(sp)
  804e20:	b00b883a 	mov	r5,r22
  804e24:	d9800d04 	addi	r6,sp,52
  804e28:	d9c15215 	stw	r7,1352(sp)
  804e2c:	08041d00 	call	8041d0 <__sprint_r>
  804e30:	d9c15217 	ldw	r7,1352(sp)
  804e34:	103eb41e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804e38:	dd401a04 	addi	r21,sp,104
  804e3c:	003d6d06 	br	8043f4 <___vfprintf_internal_r+0x1cc>
  804e40:	d9015017 	ldw	r4,1344(sp)
  804e44:	b00b883a 	mov	r5,r22
  804e48:	d9800d04 	addi	r6,sp,52
  804e4c:	d9c15215 	stw	r7,1352(sp)
  804e50:	08041d00 	call	8041d0 <__sprint_r>
  804e54:	d9c15217 	ldw	r7,1352(sp)
  804e58:	103eab1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804e5c:	dc800f17 	ldw	r18,60(sp)
  804e60:	dc400e17 	ldw	r17,56(sp)
  804e64:	dd401a04 	addi	r21,sp,104
  804e68:	003e3406 	br	80473c <___vfprintf_internal_r+0x514>
  804e6c:	d9015017 	ldw	r4,1344(sp)
  804e70:	b00b883a 	mov	r5,r22
  804e74:	d9800d04 	addi	r6,sp,52
  804e78:	d9c15215 	stw	r7,1352(sp)
  804e7c:	08041d00 	call	8041d0 <__sprint_r>
  804e80:	d9c15217 	ldw	r7,1352(sp)
  804e84:	103ea01e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804e88:	dc800f17 	ldw	r18,60(sp)
  804e8c:	dc400e17 	ldw	r17,56(sp)
  804e90:	dd401a04 	addi	r21,sp,104
  804e94:	003e1c06 	br	804708 <___vfprintf_internal_r+0x4e0>
  804e98:	d9015017 	ldw	r4,1344(sp)
  804e9c:	b00b883a 	mov	r5,r22
  804ea0:	d9800d04 	addi	r6,sp,52
  804ea4:	d9c15215 	stw	r7,1352(sp)
  804ea8:	08041d00 	call	8041d0 <__sprint_r>
  804eac:	d9c15217 	ldw	r7,1352(sp)
  804eb0:	103e951e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804eb4:	dc800f17 	ldw	r18,60(sp)
  804eb8:	dc400e17 	ldw	r17,56(sp)
  804ebc:	dd401a04 	addi	r21,sp,104
  804ec0:	003e0406 	br	8046d4 <___vfprintf_internal_r+0x4ac>
  804ec4:	d9000617 	ldw	r4,24(sp)
  804ec8:	0102520e 	bge	zero,r4,805814 <___vfprintf_internal_r+0x15ec>
  804ecc:	d9814817 	ldw	r6,1312(sp)
  804ed0:	21807a16 	blt	r4,r6,8050bc <___vfprintf_internal_r+0xe94>
  804ed4:	d8814217 	ldw	r2,1288(sp)
  804ed8:	91a5883a 	add	r18,r18,r6
  804edc:	8c400044 	addi	r17,r17,1
  804ee0:	a8800015 	stw	r2,0(r21)
  804ee4:	008001c4 	movi	r2,7
  804ee8:	a9800115 	stw	r6,4(r21)
  804eec:	dc800f15 	stw	r18,60(sp)
  804ef0:	dc400e15 	stw	r17,56(sp)
  804ef4:	1442f616 	blt	r2,r17,805ad0 <___vfprintf_internal_r+0x18a8>
  804ef8:	a8c00204 	addi	r3,r21,8
  804efc:	d9414817 	ldw	r5,1312(sp)
  804f00:	2161c83a 	sub	r16,r4,r5
  804f04:	043f9d0e 	bge	zero,r16,804d7c <___vfprintf_internal_r+0xb54>
  804f08:	00800404 	movi	r2,16
  804f0c:	1402130e 	bge	r2,r16,80575c <___vfprintf_internal_r+0x1534>
  804f10:	dc400e17 	ldw	r17,56(sp)
  804f14:	1027883a 	mov	r19,r2
  804f18:	07002074 	movhi	fp,129
  804f1c:	e7134604 	addi	fp,fp,19736
  804f20:	050001c4 	movi	r20,7
  804f24:	00000306 	br	804f34 <___vfprintf_internal_r+0xd0c>
  804f28:	18c00204 	addi	r3,r3,8
  804f2c:	843ffc04 	addi	r16,r16,-16
  804f30:	9c020d0e 	bge	r19,r16,805768 <___vfprintf_internal_r+0x1540>
  804f34:	94800404 	addi	r18,r18,16
  804f38:	8c400044 	addi	r17,r17,1
  804f3c:	1f000015 	stw	fp,0(r3)
  804f40:	1cc00115 	stw	r19,4(r3)
  804f44:	dc800f15 	stw	r18,60(sp)
  804f48:	dc400e15 	stw	r17,56(sp)
  804f4c:	a47ff60e 	bge	r20,r17,804f28 <___vfprintf_internal_r+0xd00>
  804f50:	d9015017 	ldw	r4,1344(sp)
  804f54:	b00b883a 	mov	r5,r22
  804f58:	d9800d04 	addi	r6,sp,52
  804f5c:	08041d00 	call	8041d0 <__sprint_r>
  804f60:	103e691e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804f64:	dc800f17 	ldw	r18,60(sp)
  804f68:	dc400e17 	ldw	r17,56(sp)
  804f6c:	d8c01a04 	addi	r3,sp,104
  804f70:	003fee06 	br	804f2c <___vfprintf_internal_r+0xd04>
  804f74:	d8814817 	ldw	r2,1312(sp)
  804f78:	143fffc4 	addi	r16,r2,-1
  804f7c:	043e970e 	bge	zero,r16,8049dc <___vfprintf_internal_r+0x7b4>
  804f80:	00800404 	movi	r2,16
  804f84:	1400180e 	bge	r2,r16,804fe8 <___vfprintf_internal_r+0xdc0>
  804f88:	1029883a 	mov	r20,r2
  804f8c:	07002074 	movhi	fp,129
  804f90:	e7134604 	addi	fp,fp,19736
  804f94:	054001c4 	movi	r21,7
  804f98:	00000306 	br	804fa8 <___vfprintf_internal_r+0xd80>
  804f9c:	9cc00204 	addi	r19,r19,8
  804fa0:	843ffc04 	addi	r16,r16,-16
  804fa4:	a400120e 	bge	r20,r16,804ff0 <___vfprintf_internal_r+0xdc8>
  804fa8:	94800404 	addi	r18,r18,16
  804fac:	8c400044 	addi	r17,r17,1
  804fb0:	9f000015 	stw	fp,0(r19)
  804fb4:	9d000115 	stw	r20,4(r19)
  804fb8:	dc800f15 	stw	r18,60(sp)
  804fbc:	dc400e15 	stw	r17,56(sp)
  804fc0:	ac7ff60e 	bge	r21,r17,804f9c <___vfprintf_internal_r+0xd74>
  804fc4:	d9015017 	ldw	r4,1344(sp)
  804fc8:	b00b883a 	mov	r5,r22
  804fcc:	d9800d04 	addi	r6,sp,52
  804fd0:	08041d00 	call	8041d0 <__sprint_r>
  804fd4:	103e4c1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  804fd8:	dc800f17 	ldw	r18,60(sp)
  804fdc:	dc400e17 	ldw	r17,56(sp)
  804fe0:	dcc01a04 	addi	r19,sp,104
  804fe4:	003fee06 	br	804fa0 <___vfprintf_internal_r+0xd78>
  804fe8:	07002074 	movhi	fp,129
  804fec:	e7134604 	addi	fp,fp,19736
  804ff0:	9425883a 	add	r18,r18,r16
  804ff4:	8c400044 	addi	r17,r17,1
  804ff8:	008001c4 	movi	r2,7
  804ffc:	9f000015 	stw	fp,0(r19)
  805000:	9c000115 	stw	r16,4(r19)
  805004:	dc800f15 	stw	r18,60(sp)
  805008:	dc400e15 	stw	r17,56(sp)
  80500c:	147e720e 	bge	r2,r17,8049d8 <___vfprintf_internal_r+0x7b0>
  805010:	d9015017 	ldw	r4,1344(sp)
  805014:	b00b883a 	mov	r5,r22
  805018:	d9800d04 	addi	r6,sp,52
  80501c:	08041d00 	call	8041d0 <__sprint_r>
  805020:	103e391e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805024:	dc800f17 	ldw	r18,60(sp)
  805028:	dc400e17 	ldw	r17,56(sp)
  80502c:	dcc01a04 	addi	r19,sp,104
  805030:	003e6a06 	br	8049dc <___vfprintf_internal_r+0x7b4>
  805034:	d9015017 	ldw	r4,1344(sp)
  805038:	b00b883a 	mov	r5,r22
  80503c:	d9800d04 	addi	r6,sp,52
  805040:	d9c15215 	stw	r7,1352(sp)
  805044:	08041d00 	call	8041d0 <__sprint_r>
  805048:	d9c15217 	ldw	r7,1352(sp)
  80504c:	103e2e1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805050:	dc800f17 	ldw	r18,60(sp)
  805054:	dc400e17 	ldw	r17,56(sp)
  805058:	dd401a04 	addi	r21,sp,104
  80505c:	003dba06 	br	804748 <___vfprintf_internal_r+0x520>
  805060:	d9015017 	ldw	r4,1344(sp)
  805064:	b00b883a 	mov	r5,r22
  805068:	d9800d04 	addi	r6,sp,52
  80506c:	08041d00 	call	8041d0 <__sprint_r>
  805070:	103e251e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805074:	dc800f17 	ldw	r18,60(sp)
  805078:	dc400e17 	ldw	r17,56(sp)
  80507c:	dcc01a04 	addi	r19,sp,104
  805080:	003e4206 	br	80498c <___vfprintf_internal_r+0x764>
  805084:	d9015017 	ldw	r4,1344(sp)
  805088:	b00b883a 	mov	r5,r22
  80508c:	d9800d04 	addi	r6,sp,52
  805090:	08041d00 	call	8041d0 <__sprint_r>
  805094:	103e1c1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805098:	dc800f17 	ldw	r18,60(sp)
  80509c:	dc400e17 	ldw	r17,56(sp)
  8050a0:	d8c01a04 	addi	r3,sp,104
  8050a4:	003e2e06 	br	804960 <___vfprintf_internal_r+0x738>
  8050a8:	d9414d17 	ldw	r5,1332(sp)
  8050ac:	2880004c 	andi	r2,r5,1
  8050b0:	1005003a 	cmpeq	r2,r2,zero
  8050b4:	103dda1e 	bne	r2,zero,804820 <___vfprintf_internal_r+0x5f8>
  8050b8:	003e9f06 	br	804b38 <___vfprintf_internal_r+0x910>
  8050bc:	d8c14217 	ldw	r3,1288(sp)
  8050c0:	9125883a 	add	r18,r18,r4
  8050c4:	8c400044 	addi	r17,r17,1
  8050c8:	008001c4 	movi	r2,7
  8050cc:	a8c00015 	stw	r3,0(r21)
  8050d0:	a9000115 	stw	r4,4(r21)
  8050d4:	dc800f15 	stw	r18,60(sp)
  8050d8:	dc400e15 	stw	r17,56(sp)
  8050dc:	14426616 	blt	r2,r17,805a78 <___vfprintf_internal_r+0x1850>
  8050e0:	a8c00204 	addi	r3,r21,8
  8050e4:	d9414a17 	ldw	r5,1320(sp)
  8050e8:	00800044 	movi	r2,1
  8050ec:	94800044 	addi	r18,r18,1
  8050f0:	8c400044 	addi	r17,r17,1
  8050f4:	18800115 	stw	r2,4(r3)
  8050f8:	008001c4 	movi	r2,7
  8050fc:	19400015 	stw	r5,0(r3)
  805100:	dc800f15 	stw	r18,60(sp)
  805104:	dc400e15 	stw	r17,56(sp)
  805108:	2021883a 	mov	r16,r4
  80510c:	14425016 	blt	r2,r17,805a50 <___vfprintf_internal_r+0x1828>
  805110:	19400204 	addi	r5,r3,8
  805114:	d9814817 	ldw	r6,1312(sp)
  805118:	8c400044 	addi	r17,r17,1
  80511c:	dc400e15 	stw	r17,56(sp)
  805120:	3107c83a 	sub	r3,r6,r4
  805124:	d9014217 	ldw	r4,1288(sp)
  805128:	90e5883a 	add	r18,r18,r3
  80512c:	28c00115 	stw	r3,4(r5)
  805130:	8105883a 	add	r2,r16,r4
  805134:	28800015 	stw	r2,0(r5)
  805138:	008001c4 	movi	r2,7
  80513c:	dc800f15 	stw	r18,60(sp)
  805140:	147f1d16 	blt	r2,r17,804db8 <___vfprintf_internal_r+0xb90>
  805144:	28c00204 	addi	r3,r5,8
  805148:	003db506 	br	804820 <___vfprintf_internal_r+0x5f8>
  80514c:	3c000017 	ldw	r16,0(r7)
  805150:	3c400117 	ldw	r17,4(r7)
  805154:	39800204 	addi	r6,r7,8
  805158:	01000044 	movi	r4,1
  80515c:	d9814115 	stw	r6,1284(sp)
  805160:	d8000405 	stb	zero,16(sp)
  805164:	003ebe06 	br	804c60 <___vfprintf_internal_r+0xa38>
  805168:	3c000017 	ldw	r16,0(r7)
  80516c:	3c400117 	ldw	r17,4(r7)
  805170:	38800204 	addi	r2,r7,8
  805174:	d8814115 	stw	r2,1284(sp)
  805178:	003eb706 	br	804c58 <___vfprintf_internal_r+0xa30>
  80517c:	3c000017 	ldw	r16,0(r7)
  805180:	3c400117 	ldw	r17,4(r7)
  805184:	39000204 	addi	r4,r7,8
  805188:	d9014115 	stw	r4,1284(sp)
  80518c:	0009883a 	mov	r4,zero
  805190:	d8000405 	stb	zero,16(sp)
  805194:	003eb206 	br	804c60 <___vfprintf_internal_r+0xa38>
  805198:	38c00017 	ldw	r3,0(r7)
  80519c:	39c00104 	addi	r7,r7,4
  8051a0:	d8c14b15 	stw	r3,1324(sp)
  8051a4:	1800d10e 	bge	r3,zero,8054ec <___vfprintf_internal_r+0x12c4>
  8051a8:	00c7c83a 	sub	r3,zero,r3
  8051ac:	d8c14b15 	stw	r3,1324(sp)
  8051b0:	d9014d17 	ldw	r4,1332(sp)
  8051b4:	b8c00007 	ldb	r3,0(r23)
  8051b8:	21000114 	ori	r4,r4,4
  8051bc:	d9014d15 	stw	r4,1332(sp)
  8051c0:	003c9806 	br	804424 <___vfprintf_internal_r+0x1fc>
  8051c4:	d9814d17 	ldw	r6,1332(sp)
  8051c8:	3080080c 	andi	r2,r6,32
  8051cc:	1001f026 	beq	r2,zero,805990 <___vfprintf_internal_r+0x1768>
  8051d0:	d9014c17 	ldw	r4,1328(sp)
  8051d4:	38800017 	ldw	r2,0(r7)
  8051d8:	39c00104 	addi	r7,r7,4
  8051dc:	d9c14115 	stw	r7,1284(sp)
  8051e0:	2007d7fa 	srai	r3,r4,31
  8051e4:	d9c14117 	ldw	r7,1284(sp)
  8051e8:	11000015 	stw	r4,0(r2)
  8051ec:	10c00115 	stw	r3,4(r2)
  8051f0:	003c6906 	br	804398 <___vfprintf_internal_r+0x170>
  8051f4:	b8c00007 	ldb	r3,0(r23)
  8051f8:	00801b04 	movi	r2,108
  8051fc:	18824f26 	beq	r3,r2,805b3c <___vfprintf_internal_r+0x1914>
  805200:	d9414d17 	ldw	r5,1332(sp)
  805204:	29400414 	ori	r5,r5,16
  805208:	d9414d15 	stw	r5,1332(sp)
  80520c:	003c8506 	br	804424 <___vfprintf_internal_r+0x1fc>
  805210:	d9814d17 	ldw	r6,1332(sp)
  805214:	b8c00007 	ldb	r3,0(r23)
  805218:	31800814 	ori	r6,r6,32
  80521c:	d9814d15 	stw	r6,1332(sp)
  805220:	003c8006 	br	804424 <___vfprintf_internal_r+0x1fc>
  805224:	d8814d17 	ldw	r2,1332(sp)
  805228:	3c000017 	ldw	r16,0(r7)
  80522c:	00c01e04 	movi	r3,120
  805230:	10800094 	ori	r2,r2,2
  805234:	d8814d15 	stw	r2,1332(sp)
  805238:	39c00104 	addi	r7,r7,4
  80523c:	01402074 	movhi	r5,129
  805240:	29532e04 	addi	r5,r5,19640
  805244:	00800c04 	movi	r2,48
  805248:	0023883a 	mov	r17,zero
  80524c:	01000084 	movi	r4,2
  805250:	d9c14115 	stw	r7,1284(sp)
  805254:	d8c14e15 	stw	r3,1336(sp)
  805258:	d9414515 	stw	r5,1300(sp)
  80525c:	d8800505 	stb	r2,20(sp)
  805260:	d8c00545 	stb	r3,21(sp)
  805264:	d8000405 	stb	zero,16(sp)
  805268:	003e7d06 	br	804c60 <___vfprintf_internal_r+0xa38>
  80526c:	d8814d17 	ldw	r2,1332(sp)
  805270:	b8c00007 	ldb	r3,0(r23)
  805274:	10801014 	ori	r2,r2,64
  805278:	d8814d15 	stw	r2,1332(sp)
  80527c:	003c6906 	br	804424 <___vfprintf_internal_r+0x1fc>
  805280:	d9414d17 	ldw	r5,1332(sp)
  805284:	2880020c 	andi	r2,r5,8
  805288:	1001df26 	beq	r2,zero,805a08 <___vfprintf_internal_r+0x17e0>
  80528c:	39800017 	ldw	r6,0(r7)
  805290:	38800204 	addi	r2,r7,8
  805294:	d8814115 	stw	r2,1284(sp)
  805298:	d9814315 	stw	r6,1292(sp)
  80529c:	39c00117 	ldw	r7,4(r7)
  8052a0:	d9c14415 	stw	r7,1296(sp)
  8052a4:	d9014317 	ldw	r4,1292(sp)
  8052a8:	d9414417 	ldw	r5,1296(sp)
  8052ac:	080a8880 	call	80a888 <__isinfd>
  8052b0:	10021726 	beq	r2,zero,805b10 <___vfprintf_internal_r+0x18e8>
  8052b4:	d9014317 	ldw	r4,1292(sp)
  8052b8:	d9414417 	ldw	r5,1296(sp)
  8052bc:	000d883a 	mov	r6,zero
  8052c0:	000f883a 	mov	r7,zero
  8052c4:	080f5ec0 	call	80f5ec <__ltdf2>
  8052c8:	1002ca16 	blt	r2,zero,805df4 <___vfprintf_internal_r+0x1bcc>
  8052cc:	d9414e17 	ldw	r5,1336(sp)
  8052d0:	008011c4 	movi	r2,71
  8052d4:	11420a16 	blt	r2,r5,805b00 <___vfprintf_internal_r+0x18d8>
  8052d8:	01802074 	movhi	r6,129
  8052dc:	31933304 	addi	r6,r6,19660
  8052e0:	d9814215 	stw	r6,1288(sp)
  8052e4:	d9014d17 	ldw	r4,1332(sp)
  8052e8:	00c000c4 	movi	r3,3
  8052ec:	00bfdfc4 	movi	r2,-129
  8052f0:	2088703a 	and	r4,r4,r2
  8052f4:	180f883a 	mov	r7,r3
  8052f8:	d8c14615 	stw	r3,1304(sp)
  8052fc:	d9014d15 	stw	r4,1332(sp)
  805300:	d8014715 	stw	zero,1308(sp)
  805304:	003e6a06 	br	804cb0 <___vfprintf_internal_r+0xa88>
  805308:	38800017 	ldw	r2,0(r7)
  80530c:	00c00044 	movi	r3,1
  805310:	39c00104 	addi	r7,r7,4
  805314:	d9c14115 	stw	r7,1284(sp)
  805318:	d9001004 	addi	r4,sp,64
  80531c:	180f883a 	mov	r7,r3
  805320:	d8c14615 	stw	r3,1304(sp)
  805324:	d9014215 	stw	r4,1288(sp)
  805328:	d8801005 	stb	r2,64(sp)
  80532c:	d8000405 	stb	zero,16(sp)
  805330:	003cac06 	br	8045e4 <___vfprintf_internal_r+0x3bc>
  805334:	01402074 	movhi	r5,129
  805338:	29533904 	addi	r5,r5,19684
  80533c:	d9414515 	stw	r5,1300(sp)
  805340:	d9814d17 	ldw	r6,1332(sp)
  805344:	3080080c 	andi	r2,r6,32
  805348:	1000f926 	beq	r2,zero,805730 <___vfprintf_internal_r+0x1508>
  80534c:	3c000017 	ldw	r16,0(r7)
  805350:	3c400117 	ldw	r17,4(r7)
  805354:	38800204 	addi	r2,r7,8
  805358:	d8814115 	stw	r2,1284(sp)
  80535c:	d9414d17 	ldw	r5,1332(sp)
  805360:	2880004c 	andi	r2,r5,1
  805364:	1005003a 	cmpeq	r2,r2,zero
  805368:	1000b31e 	bne	r2,zero,805638 <___vfprintf_internal_r+0x1410>
  80536c:	8444b03a 	or	r2,r16,r17
  805370:	1000b126 	beq	r2,zero,805638 <___vfprintf_internal_r+0x1410>
  805374:	d9814e17 	ldw	r6,1336(sp)
  805378:	29400094 	ori	r5,r5,2
  80537c:	00800c04 	movi	r2,48
  805380:	01000084 	movi	r4,2
  805384:	d9414d15 	stw	r5,1332(sp)
  805388:	d8800505 	stb	r2,20(sp)
  80538c:	d9800545 	stb	r6,21(sp)
  805390:	d8000405 	stb	zero,16(sp)
  805394:	003e3206 	br	804c60 <___vfprintf_internal_r+0xa38>
  805398:	01802074 	movhi	r6,129
  80539c:	31932e04 	addi	r6,r6,19640
  8053a0:	d9814515 	stw	r6,1300(sp)
  8053a4:	003fe606 	br	805340 <___vfprintf_internal_r+0x1118>
  8053a8:	00800ac4 	movi	r2,43
  8053ac:	d8800405 	stb	r2,16(sp)
  8053b0:	b8c00007 	ldb	r3,0(r23)
  8053b4:	003c1b06 	br	804424 <___vfprintf_internal_r+0x1fc>
  8053b8:	d8814d17 	ldw	r2,1332(sp)
  8053bc:	b8c00007 	ldb	r3,0(r23)
  8053c0:	10800054 	ori	r2,r2,1
  8053c4:	d8814d15 	stw	r2,1332(sp)
  8053c8:	003c1606 	br	804424 <___vfprintf_internal_r+0x1fc>
  8053cc:	d8800407 	ldb	r2,16(sp)
  8053d0:	1000461e 	bne	r2,zero,8054ec <___vfprintf_internal_r+0x12c4>
  8053d4:	00800804 	movi	r2,32
  8053d8:	d8800405 	stb	r2,16(sp)
  8053dc:	b8c00007 	ldb	r3,0(r23)
  8053e0:	003c1006 	br	804424 <___vfprintf_internal_r+0x1fc>
  8053e4:	d9814d17 	ldw	r6,1332(sp)
  8053e8:	b8c00007 	ldb	r3,0(r23)
  8053ec:	31800214 	ori	r6,r6,8
  8053f0:	d9814d15 	stw	r6,1332(sp)
  8053f4:	003c0b06 	br	804424 <___vfprintf_internal_r+0x1fc>
  8053f8:	0007883a 	mov	r3,zero
  8053fc:	01000244 	movi	r4,9
  805400:	188002a4 	muli	r2,r3,10
  805404:	b8c00007 	ldb	r3,0(r23)
  805408:	d9814e17 	ldw	r6,1336(sp)
  80540c:	bdc00044 	addi	r23,r23,1
  805410:	d8c14e15 	stw	r3,1336(sp)
  805414:	d9414e17 	ldw	r5,1336(sp)
  805418:	3085883a 	add	r2,r6,r2
  80541c:	10fff404 	addi	r3,r2,-48
  805420:	28bff404 	addi	r2,r5,-48
  805424:	20bff62e 	bgeu	r4,r2,805400 <___vfprintf_internal_r+0x11d8>
  805428:	d8c14b15 	stw	r3,1324(sp)
  80542c:	003bff06 	br	80442c <___vfprintf_internal_r+0x204>
  805430:	d9414d17 	ldw	r5,1332(sp)
  805434:	b8c00007 	ldb	r3,0(r23)
  805438:	29402014 	ori	r5,r5,128
  80543c:	d9414d15 	stw	r5,1332(sp)
  805440:	003bf806 	br	804424 <___vfprintf_internal_r+0x1fc>
  805444:	b8c00007 	ldb	r3,0(r23)
  805448:	00800a84 	movi	r2,42
  80544c:	bdc00044 	addi	r23,r23,1
  805450:	18831526 	beq	r3,r2,8060a8 <___vfprintf_internal_r+0x1e80>
  805454:	d8c14e15 	stw	r3,1336(sp)
  805458:	18bff404 	addi	r2,r3,-48
  80545c:	00c00244 	movi	r3,9
  805460:	18827836 	bltu	r3,r2,805e44 <___vfprintf_internal_r+0x1c1c>
  805464:	000d883a 	mov	r6,zero
  805468:	308002a4 	muli	r2,r6,10
  80546c:	b9800007 	ldb	r6,0(r23)
  805470:	d9414e17 	ldw	r5,1336(sp)
  805474:	bdc00044 	addi	r23,r23,1
  805478:	d9814e15 	stw	r6,1336(sp)
  80547c:	d9014e17 	ldw	r4,1336(sp)
  805480:	1145883a 	add	r2,r2,r5
  805484:	11bff404 	addi	r6,r2,-48
  805488:	20bff404 	addi	r2,r4,-48
  80548c:	18bff62e 	bgeu	r3,r2,805468 <___vfprintf_internal_r+0x1240>
  805490:	3027883a 	mov	r19,r6
  805494:	303be50e 	bge	r6,zero,80442c <___vfprintf_internal_r+0x204>
  805498:	04ffffc4 	movi	r19,-1
  80549c:	003be306 	br	80442c <___vfprintf_internal_r+0x204>
  8054a0:	d8000405 	stb	zero,16(sp)
  8054a4:	39800017 	ldw	r6,0(r7)
  8054a8:	39c00104 	addi	r7,r7,4
  8054ac:	d9c14115 	stw	r7,1284(sp)
  8054b0:	d9814215 	stw	r6,1288(sp)
  8054b4:	3001c926 	beq	r6,zero,805bdc <___vfprintf_internal_r+0x19b4>
  8054b8:	98000e16 	blt	r19,zero,8054f4 <___vfprintf_internal_r+0x12cc>
  8054bc:	d9014217 	ldw	r4,1288(sp)
  8054c0:	000b883a 	mov	r5,zero
  8054c4:	980d883a 	mov	r6,r19
  8054c8:	08030e40 	call	8030e4 <memchr>
  8054cc:	10025926 	beq	r2,zero,805e34 <___vfprintf_internal_r+0x1c0c>
  8054d0:	d8c14217 	ldw	r3,1288(sp)
  8054d4:	10cfc83a 	sub	r7,r2,r3
  8054d8:	99c19e16 	blt	r19,r7,805b54 <___vfprintf_internal_r+0x192c>
  8054dc:	d9c14615 	stw	r7,1304(sp)
  8054e0:	38000916 	blt	r7,zero,805508 <___vfprintf_internal_r+0x12e0>
  8054e4:	d8014715 	stw	zero,1308(sp)
  8054e8:	003df106 	br	804cb0 <___vfprintf_internal_r+0xa88>
  8054ec:	b8c00007 	ldb	r3,0(r23)
  8054f0:	003bcc06 	br	804424 <___vfprintf_internal_r+0x1fc>
  8054f4:	d9014217 	ldw	r4,1288(sp)
  8054f8:	080415c0 	call	80415c <strlen>
  8054fc:	d8814615 	stw	r2,1304(sp)
  805500:	100f883a 	mov	r7,r2
  805504:	103ff70e 	bge	r2,zero,8054e4 <___vfprintf_internal_r+0x12bc>
  805508:	d8014615 	stw	zero,1304(sp)
  80550c:	d8014715 	stw	zero,1308(sp)
  805510:	003de706 	br	804cb0 <___vfprintf_internal_r+0xa88>
  805514:	20c03fcc 	andi	r3,r4,255
  805518:	00800044 	movi	r2,1
  80551c:	18802d26 	beq	r3,r2,8055d4 <___vfprintf_internal_r+0x13ac>
  805520:	18800e36 	bltu	r3,r2,80555c <___vfprintf_internal_r+0x1334>
  805524:	00800084 	movi	r2,2
  805528:	1880fa26 	beq	r3,r2,805914 <___vfprintf_internal_r+0x16ec>
  80552c:	01002074 	movhi	r4,129
  805530:	21133e04 	addi	r4,r4,19704
  805534:	080415c0 	call	80415c <strlen>
  805538:	100f883a 	mov	r7,r2
  80553c:	dcc14615 	stw	r19,1304(sp)
  805540:	9880010e 	bge	r19,r2,805548 <___vfprintf_internal_r+0x1320>
  805544:	d8814615 	stw	r2,1304(sp)
  805548:	00802074 	movhi	r2,129
  80554c:	10933e04 	addi	r2,r2,19704
  805550:	dcc14715 	stw	r19,1308(sp)
  805554:	d8814215 	stw	r2,1288(sp)
  805558:	003dd506 	br	804cb0 <___vfprintf_internal_r+0xa88>
  80555c:	d9401a04 	addi	r5,sp,104
  805560:	dd001004 	addi	r20,sp,64
  805564:	d9414215 	stw	r5,1288(sp)
  805568:	880a977a 	slli	r5,r17,29
  80556c:	d9814217 	ldw	r6,1288(sp)
  805570:	8004d0fa 	srli	r2,r16,3
  805574:	8806d0fa 	srli	r3,r17,3
  805578:	810001cc 	andi	r4,r16,7
  80557c:	2884b03a 	or	r2,r5,r2
  805580:	31bfffc4 	addi	r6,r6,-1
  805584:	21000c04 	addi	r4,r4,48
  805588:	d9814215 	stw	r6,1288(sp)
  80558c:	10cab03a 	or	r5,r2,r3
  805590:	31000005 	stb	r4,0(r6)
  805594:	1021883a 	mov	r16,r2
  805598:	1823883a 	mov	r17,r3
  80559c:	283ff21e 	bne	r5,zero,805568 <___vfprintf_internal_r+0x1340>
  8055a0:	d8c14d17 	ldw	r3,1332(sp)
  8055a4:	1880004c 	andi	r2,r3,1
  8055a8:	1005003a 	cmpeq	r2,r2,zero
  8055ac:	103db91e 	bne	r2,zero,804c94 <___vfprintf_internal_r+0xa6c>
  8055b0:	20803fcc 	andi	r2,r4,255
  8055b4:	1080201c 	xori	r2,r2,128
  8055b8:	10bfe004 	addi	r2,r2,-128
  8055bc:	00c00c04 	movi	r3,48
  8055c0:	10fdb426 	beq	r2,r3,804c94 <___vfprintf_internal_r+0xa6c>
  8055c4:	31bfffc4 	addi	r6,r6,-1
  8055c8:	d9814215 	stw	r6,1288(sp)
  8055cc:	30c00005 	stb	r3,0(r6)
  8055d0:	003db006 	br	804c94 <___vfprintf_internal_r+0xa6c>
  8055d4:	88800068 	cmpgeui	r2,r17,1
  8055d8:	10002c1e 	bne	r2,zero,80568c <___vfprintf_internal_r+0x1464>
  8055dc:	8800021e 	bne	r17,zero,8055e8 <___vfprintf_internal_r+0x13c0>
  8055e0:	00800244 	movi	r2,9
  8055e4:	14002936 	bltu	r2,r16,80568c <___vfprintf_internal_r+0x1464>
  8055e8:	d90019c4 	addi	r4,sp,103
  8055ec:	dd001004 	addi	r20,sp,64
  8055f0:	d9014215 	stw	r4,1288(sp)
  8055f4:	d9014217 	ldw	r4,1288(sp)
  8055f8:	80800c04 	addi	r2,r16,48
  8055fc:	20800005 	stb	r2,0(r4)
  805600:	003da406 	br	804c94 <___vfprintf_internal_r+0xa6c>
  805604:	dc400e17 	ldw	r17,56(sp)
  805608:	07002074 	movhi	fp,129
  80560c:	e7134604 	addi	fp,fp,19736
  805610:	9425883a 	add	r18,r18,r16
  805614:	8c400044 	addi	r17,r17,1
  805618:	008001c4 	movi	r2,7
  80561c:	1f000015 	stw	fp,0(r3)
  805620:	1c000115 	stw	r16,4(r3)
  805624:	dc800f15 	stw	r18,60(sp)
  805628:	dc400e15 	stw	r17,56(sp)
  80562c:	147de216 	blt	r2,r17,804db8 <___vfprintf_internal_r+0xb90>
  805630:	18c00204 	addi	r3,r3,8
  805634:	003c7a06 	br	804820 <___vfprintf_internal_r+0x5f8>
  805638:	01000084 	movi	r4,2
  80563c:	d8000405 	stb	zero,16(sp)
  805640:	003d8706 	br	804c60 <___vfprintf_internal_r+0xa38>
  805644:	d9814d17 	ldw	r6,1332(sp)
  805648:	30c4703a 	and	r2,r6,r3
  80564c:	1005003a 	cmpeq	r2,r2,zero
  805650:	103cb926 	beq	r2,zero,804938 <___vfprintf_internal_r+0x710>
  805654:	d9014217 	ldw	r4,1288(sp)
  805658:	94800044 	addi	r18,r18,1
  80565c:	8c400044 	addi	r17,r17,1
  805660:	008001c4 	movi	r2,7
  805664:	a9000015 	stw	r4,0(r21)
  805668:	a8c00115 	stw	r3,4(r21)
  80566c:	dc800f15 	stw	r18,60(sp)
  805670:	dc400e15 	stw	r17,56(sp)
  805674:	147e6616 	blt	r2,r17,805010 <___vfprintf_internal_r+0xde8>
  805678:	acc00204 	addi	r19,r21,8
  80567c:	003cd706 	br	8049dc <___vfprintf_internal_r+0x7b4>
  805680:	07002074 	movhi	fp,129
  805684:	e7134604 	addi	fp,fp,19736
  805688:	003c4f06 	br	8047c8 <___vfprintf_internal_r+0x5a0>
  80568c:	dd001004 	addi	r20,sp,64
  805690:	dc801a04 	addi	r18,sp,104
  805694:	8009883a 	mov	r4,r16
  805698:	880b883a 	mov	r5,r17
  80569c:	01800284 	movi	r6,10
  8056a0:	000f883a 	mov	r7,zero
  8056a4:	080e1940 	call	80e194 <__umoddi3>
  8056a8:	12000c04 	addi	r8,r2,48
  8056ac:	94bfffc4 	addi	r18,r18,-1
  8056b0:	8009883a 	mov	r4,r16
  8056b4:	880b883a 	mov	r5,r17
  8056b8:	01800284 	movi	r6,10
  8056bc:	000f883a 	mov	r7,zero
  8056c0:	92000005 	stb	r8,0(r18)
  8056c4:	080dbb80 	call	80dbb8 <__udivdi3>
  8056c8:	1009883a 	mov	r4,r2
  8056cc:	1021883a 	mov	r16,r2
  8056d0:	18800068 	cmpgeui	r2,r3,1
  8056d4:	1823883a 	mov	r17,r3
  8056d8:	103fee1e 	bne	r2,zero,805694 <___vfprintf_internal_r+0x146c>
  8056dc:	1800021e 	bne	r3,zero,8056e8 <___vfprintf_internal_r+0x14c0>
  8056e0:	00800244 	movi	r2,9
  8056e4:	113feb36 	bltu	r2,r4,805694 <___vfprintf_internal_r+0x146c>
  8056e8:	94bfffc4 	addi	r18,r18,-1
  8056ec:	dc814215 	stw	r18,1288(sp)
  8056f0:	003fc006 	br	8055f4 <___vfprintf_internal_r+0x13cc>
  8056f4:	d9014d17 	ldw	r4,1332(sp)
  8056f8:	2080004c 	andi	r2,r4,1
  8056fc:	10009a1e 	bne	r2,zero,805968 <___vfprintf_internal_r+0x1740>
  805700:	d9401a04 	addi	r5,sp,104
  805704:	dd001004 	addi	r20,sp,64
  805708:	d9414215 	stw	r5,1288(sp)
  80570c:	003d6106 	br	804c94 <___vfprintf_internal_r+0xa6c>
  805710:	d9015017 	ldw	r4,1344(sp)
  805714:	b00b883a 	mov	r5,r22
  805718:	d9800d04 	addi	r6,sp,52
  80571c:	08041d00 	call	8041d0 <__sprint_r>
  805720:	103c791e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805724:	dc800f17 	ldw	r18,60(sp)
  805728:	d8c01a04 	addi	r3,sp,104
  80572c:	003cff06 	br	804b2c <___vfprintf_internal_r+0x904>
  805730:	d8c14d17 	ldw	r3,1332(sp)
  805734:	1880040c 	andi	r2,r3,16
  805738:	1000711e 	bne	r2,zero,805900 <___vfprintf_internal_r+0x16d8>
  80573c:	d9014d17 	ldw	r4,1332(sp)
  805740:	2080100c 	andi	r2,r4,64
  805744:	10006e26 	beq	r2,zero,805900 <___vfprintf_internal_r+0x16d8>
  805748:	3c00000b 	ldhu	r16,0(r7)
  80574c:	0023883a 	mov	r17,zero
  805750:	39c00104 	addi	r7,r7,4
  805754:	d9c14115 	stw	r7,1284(sp)
  805758:	003f0006 	br	80535c <___vfprintf_internal_r+0x1134>
  80575c:	dc400e17 	ldw	r17,56(sp)
  805760:	07002074 	movhi	fp,129
  805764:	e7134604 	addi	fp,fp,19736
  805768:	9425883a 	add	r18,r18,r16
  80576c:	8c400044 	addi	r17,r17,1
  805770:	008001c4 	movi	r2,7
  805774:	1f000015 	stw	fp,0(r3)
  805778:	1c000115 	stw	r16,4(r3)
  80577c:	dc800f15 	stw	r18,60(sp)
  805780:	dc400e15 	stw	r17,56(sp)
  805784:	147d7616 	blt	r2,r17,804d60 <___vfprintf_internal_r+0xb38>
  805788:	18c00204 	addi	r3,r3,8
  80578c:	003d7b06 	br	804d7c <___vfprintf_internal_r+0xb54>
  805790:	dc800f17 	ldw	r18,60(sp)
  805794:	dc400e17 	ldw	r17,56(sp)
  805798:	07002074 	movhi	fp,129
  80579c:	e7134a04 	addi	fp,fp,19752
  8057a0:	003bc006 	br	8046a4 <___vfprintf_internal_r+0x47c>
  8057a4:	d9015017 	ldw	r4,1344(sp)
  8057a8:	b00b883a 	mov	r5,r22
  8057ac:	d9800d04 	addi	r6,sp,52
  8057b0:	08041d00 	call	8041d0 <__sprint_r>
  8057b4:	103c541e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  8057b8:	dc800f17 	ldw	r18,60(sp)
  8057bc:	d8c01a04 	addi	r3,sp,104
  8057c0:	003ce906 	br	804b68 <___vfprintf_internal_r+0x940>
  8057c4:	3c000017 	ldw	r16,0(r7)
  8057c8:	0009883a 	mov	r4,zero
  8057cc:	39c00104 	addi	r7,r7,4
  8057d0:	0023883a 	mov	r17,zero
  8057d4:	d9c14115 	stw	r7,1284(sp)
  8057d8:	d8000405 	stb	zero,16(sp)
  8057dc:	003d2006 	br	804c60 <___vfprintf_internal_r+0xa38>
  8057e0:	38800017 	ldw	r2,0(r7)
  8057e4:	39c00104 	addi	r7,r7,4
  8057e8:	d9c14115 	stw	r7,1284(sp)
  8057ec:	1023d7fa 	srai	r17,r2,31
  8057f0:	1021883a 	mov	r16,r2
  8057f4:	003d1806 	br	804c58 <___vfprintf_internal_r+0xa30>
  8057f8:	3c000017 	ldw	r16,0(r7)
  8057fc:	01000044 	movi	r4,1
  805800:	39c00104 	addi	r7,r7,4
  805804:	0023883a 	mov	r17,zero
  805808:	d9c14115 	stw	r7,1284(sp)
  80580c:	d8000405 	stb	zero,16(sp)
  805810:	003d1306 	br	804c60 <___vfprintf_internal_r+0xa38>
  805814:	00802074 	movhi	r2,129
  805818:	10934504 	addi	r2,r2,19732
  80581c:	94800044 	addi	r18,r18,1
  805820:	8c400044 	addi	r17,r17,1
  805824:	a8800015 	stw	r2,0(r21)
  805828:	00c00044 	movi	r3,1
  80582c:	008001c4 	movi	r2,7
  805830:	a8c00115 	stw	r3,4(r21)
  805834:	dc800f15 	stw	r18,60(sp)
  805838:	dc400e15 	stw	r17,56(sp)
  80583c:	1440ca16 	blt	r2,r17,805b68 <___vfprintf_internal_r+0x1940>
  805840:	a8c00204 	addi	r3,r21,8
  805844:	2000061e 	bne	r4,zero,805860 <___vfprintf_internal_r+0x1638>
  805848:	d9414817 	ldw	r5,1312(sp)
  80584c:	2800041e 	bne	r5,zero,805860 <___vfprintf_internal_r+0x1638>
  805850:	d9814d17 	ldw	r6,1332(sp)
  805854:	3080004c 	andi	r2,r6,1
  805858:	1005003a 	cmpeq	r2,r2,zero
  80585c:	103bf01e 	bne	r2,zero,804820 <___vfprintf_internal_r+0x5f8>
  805860:	00800044 	movi	r2,1
  805864:	dc400e17 	ldw	r17,56(sp)
  805868:	18800115 	stw	r2,4(r3)
  80586c:	d8814a17 	ldw	r2,1320(sp)
  805870:	94800044 	addi	r18,r18,1
  805874:	8c400044 	addi	r17,r17,1
  805878:	18800015 	stw	r2,0(r3)
  80587c:	008001c4 	movi	r2,7
  805880:	dc800f15 	stw	r18,60(sp)
  805884:	dc400e15 	stw	r17,56(sp)
  805888:	1440ca16 	blt	r2,r17,805bb4 <___vfprintf_internal_r+0x198c>
  80588c:	18c00204 	addi	r3,r3,8
  805890:	0121c83a 	sub	r16,zero,r4
  805894:	0400500e 	bge	zero,r16,8059d8 <___vfprintf_internal_r+0x17b0>
  805898:	00800404 	movi	r2,16
  80589c:	1400800e 	bge	r2,r16,805aa0 <___vfprintf_internal_r+0x1878>
  8058a0:	1027883a 	mov	r19,r2
  8058a4:	07002074 	movhi	fp,129
  8058a8:	e7134604 	addi	fp,fp,19736
  8058ac:	050001c4 	movi	r20,7
  8058b0:	00000306 	br	8058c0 <___vfprintf_internal_r+0x1698>
  8058b4:	18c00204 	addi	r3,r3,8
  8058b8:	843ffc04 	addi	r16,r16,-16
  8058bc:	9c007a0e 	bge	r19,r16,805aa8 <___vfprintf_internal_r+0x1880>
  8058c0:	94800404 	addi	r18,r18,16
  8058c4:	8c400044 	addi	r17,r17,1
  8058c8:	1f000015 	stw	fp,0(r3)
  8058cc:	1cc00115 	stw	r19,4(r3)
  8058d0:	dc800f15 	stw	r18,60(sp)
  8058d4:	dc400e15 	stw	r17,56(sp)
  8058d8:	a47ff60e 	bge	r20,r17,8058b4 <___vfprintf_internal_r+0x168c>
  8058dc:	d9015017 	ldw	r4,1344(sp)
  8058e0:	b00b883a 	mov	r5,r22
  8058e4:	d9800d04 	addi	r6,sp,52
  8058e8:	08041d00 	call	8041d0 <__sprint_r>
  8058ec:	103c061e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  8058f0:	dc800f17 	ldw	r18,60(sp)
  8058f4:	dc400e17 	ldw	r17,56(sp)
  8058f8:	d8c01a04 	addi	r3,sp,104
  8058fc:	003fee06 	br	8058b8 <___vfprintf_internal_r+0x1690>
  805900:	3c000017 	ldw	r16,0(r7)
  805904:	0023883a 	mov	r17,zero
  805908:	39c00104 	addi	r7,r7,4
  80590c:	d9c14115 	stw	r7,1284(sp)
  805910:	003e9206 	br	80535c <___vfprintf_internal_r+0x1134>
  805914:	d9401a04 	addi	r5,sp,104
  805918:	dd001004 	addi	r20,sp,64
  80591c:	d9414215 	stw	r5,1288(sp)
  805920:	d9814517 	ldw	r6,1300(sp)
  805924:	880a973a 	slli	r5,r17,28
  805928:	8004d13a 	srli	r2,r16,4
  80592c:	810003cc 	andi	r4,r16,15
  805930:	3109883a 	add	r4,r6,r4
  805934:	2884b03a 	or	r2,r5,r2
  805938:	21400003 	ldbu	r5,0(r4)
  80593c:	d9014217 	ldw	r4,1288(sp)
  805940:	8806d13a 	srli	r3,r17,4
  805944:	1021883a 	mov	r16,r2
  805948:	213fffc4 	addi	r4,r4,-1
  80594c:	d9014215 	stw	r4,1288(sp)
  805950:	d9814217 	ldw	r6,1288(sp)
  805954:	10c8b03a 	or	r4,r2,r3
  805958:	1823883a 	mov	r17,r3
  80595c:	31400005 	stb	r5,0(r6)
  805960:	203fef1e 	bne	r4,zero,805920 <___vfprintf_internal_r+0x16f8>
  805964:	003ccb06 	br	804c94 <___vfprintf_internal_r+0xa6c>
  805968:	00800c04 	movi	r2,48
  80596c:	d98019c4 	addi	r6,sp,103
  805970:	dd001004 	addi	r20,sp,64
  805974:	d88019c5 	stb	r2,103(sp)
  805978:	d9814215 	stw	r6,1288(sp)
  80597c:	003cc506 	br	804c94 <___vfprintf_internal_r+0xa6c>
  805980:	dc400e17 	ldw	r17,56(sp)
  805984:	07002074 	movhi	fp,129
  805988:	e7134a04 	addi	fp,fp,19752
  80598c:	003bc706 	br	8048ac <___vfprintf_internal_r+0x684>
  805990:	d9414d17 	ldw	r5,1332(sp)
  805994:	2880040c 	andi	r2,r5,16
  805998:	10007c26 	beq	r2,zero,805b8c <___vfprintf_internal_r+0x1964>
  80599c:	38800017 	ldw	r2,0(r7)
  8059a0:	39c00104 	addi	r7,r7,4
  8059a4:	d9c14115 	stw	r7,1284(sp)
  8059a8:	d9814c17 	ldw	r6,1328(sp)
  8059ac:	d9c14117 	ldw	r7,1284(sp)
  8059b0:	11800015 	stw	r6,0(r2)
  8059b4:	003a7806 	br	804398 <___vfprintf_internal_r+0x170>
  8059b8:	d9015017 	ldw	r4,1344(sp)
  8059bc:	b00b883a 	mov	r5,r22
  8059c0:	d9800d04 	addi	r6,sp,52
  8059c4:	08041d00 	call	8041d0 <__sprint_r>
  8059c8:	103bcf1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  8059cc:	dc800f17 	ldw	r18,60(sp)
  8059d0:	dc400e17 	ldw	r17,56(sp)
  8059d4:	d8c01a04 	addi	r3,sp,104
  8059d8:	d9014817 	ldw	r4,1312(sp)
  8059dc:	d9414217 	ldw	r5,1288(sp)
  8059e0:	8c400044 	addi	r17,r17,1
  8059e4:	9125883a 	add	r18,r18,r4
  8059e8:	008001c4 	movi	r2,7
  8059ec:	19400015 	stw	r5,0(r3)
  8059f0:	19000115 	stw	r4,4(r3)
  8059f4:	dc800f15 	stw	r18,60(sp)
  8059f8:	dc400e15 	stw	r17,56(sp)
  8059fc:	147cee16 	blt	r2,r17,804db8 <___vfprintf_internal_r+0xb90>
  805a00:	18c00204 	addi	r3,r3,8
  805a04:	003b8606 	br	804820 <___vfprintf_internal_r+0x5f8>
  805a08:	38c00017 	ldw	r3,0(r7)
  805a0c:	39000204 	addi	r4,r7,8
  805a10:	d9014115 	stw	r4,1284(sp)
  805a14:	d8c14315 	stw	r3,1292(sp)
  805a18:	39c00117 	ldw	r7,4(r7)
  805a1c:	d9c14415 	stw	r7,1296(sp)
  805a20:	003e2006 	br	8052a4 <___vfprintf_internal_r+0x107c>
  805a24:	0005883a 	mov	r2,zero
  805a28:	1409c83a 	sub	r4,r2,r16
  805a2c:	1105803a 	cmpltu	r2,r2,r4
  805a30:	044bc83a 	sub	r5,zero,r17
  805a34:	2885c83a 	sub	r2,r5,r2
  805a38:	2021883a 	mov	r16,r4
  805a3c:	1023883a 	mov	r17,r2
  805a40:	01000044 	movi	r4,1
  805a44:	00800b44 	movi	r2,45
  805a48:	d8800405 	stb	r2,16(sp)
  805a4c:	003c8406 	br	804c60 <___vfprintf_internal_r+0xa38>
  805a50:	d9015017 	ldw	r4,1344(sp)
  805a54:	b00b883a 	mov	r5,r22
  805a58:	d9800d04 	addi	r6,sp,52
  805a5c:	08041d00 	call	8041d0 <__sprint_r>
  805a60:	103ba91e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805a64:	dc800f17 	ldw	r18,60(sp)
  805a68:	dc400e17 	ldw	r17,56(sp)
  805a6c:	d9000617 	ldw	r4,24(sp)
  805a70:	d9401a04 	addi	r5,sp,104
  805a74:	003da706 	br	805114 <___vfprintf_internal_r+0xeec>
  805a78:	d9015017 	ldw	r4,1344(sp)
  805a7c:	b00b883a 	mov	r5,r22
  805a80:	d9800d04 	addi	r6,sp,52
  805a84:	08041d00 	call	8041d0 <__sprint_r>
  805a88:	103b9f1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805a8c:	dc800f17 	ldw	r18,60(sp)
  805a90:	dc400e17 	ldw	r17,56(sp)
  805a94:	d9000617 	ldw	r4,24(sp)
  805a98:	d8c01a04 	addi	r3,sp,104
  805a9c:	003d9106 	br	8050e4 <___vfprintf_internal_r+0xebc>
  805aa0:	07002074 	movhi	fp,129
  805aa4:	e7134604 	addi	fp,fp,19736
  805aa8:	9425883a 	add	r18,r18,r16
  805aac:	8c400044 	addi	r17,r17,1
  805ab0:	008001c4 	movi	r2,7
  805ab4:	1f000015 	stw	fp,0(r3)
  805ab8:	1c000115 	stw	r16,4(r3)
  805abc:	dc800f15 	stw	r18,60(sp)
  805ac0:	dc400e15 	stw	r17,56(sp)
  805ac4:	147fbc16 	blt	r2,r17,8059b8 <___vfprintf_internal_r+0x1790>
  805ac8:	18c00204 	addi	r3,r3,8
  805acc:	003fc206 	br	8059d8 <___vfprintf_internal_r+0x17b0>
  805ad0:	d9015017 	ldw	r4,1344(sp)
  805ad4:	b00b883a 	mov	r5,r22
  805ad8:	d9800d04 	addi	r6,sp,52
  805adc:	08041d00 	call	8041d0 <__sprint_r>
  805ae0:	103b891e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805ae4:	dc800f17 	ldw	r18,60(sp)
  805ae8:	d9000617 	ldw	r4,24(sp)
  805aec:	d8c01a04 	addi	r3,sp,104
  805af0:	003d0206 	br	804efc <___vfprintf_internal_r+0xcd4>
  805af4:	07002074 	movhi	fp,129
  805af8:	e7134604 	addi	fp,fp,19736
  805afc:	003be406 	br	804a90 <___vfprintf_internal_r+0x868>
  805b00:	00802074 	movhi	r2,129
  805b04:	10933404 	addi	r2,r2,19664
  805b08:	d8814215 	stw	r2,1288(sp)
  805b0c:	003df506 	br	8052e4 <___vfprintf_internal_r+0x10bc>
  805b10:	d9014317 	ldw	r4,1292(sp)
  805b14:	d9414417 	ldw	r5,1296(sp)
  805b18:	080a8c80 	call	80a8c8 <__isnand>
  805b1c:	10003926 	beq	r2,zero,805c04 <___vfprintf_internal_r+0x19dc>
  805b20:	d9414e17 	ldw	r5,1336(sp)
  805b24:	008011c4 	movi	r2,71
  805b28:	1140ce16 	blt	r2,r5,805e64 <___vfprintf_internal_r+0x1c3c>
  805b2c:	01802074 	movhi	r6,129
  805b30:	31933504 	addi	r6,r6,19668
  805b34:	d9814215 	stw	r6,1288(sp)
  805b38:	003dea06 	br	8052e4 <___vfprintf_internal_r+0x10bc>
  805b3c:	d9014d17 	ldw	r4,1332(sp)
  805b40:	bdc00044 	addi	r23,r23,1
  805b44:	b8c00007 	ldb	r3,0(r23)
  805b48:	21000814 	ori	r4,r4,32
  805b4c:	d9014d15 	stw	r4,1332(sp)
  805b50:	003a3406 	br	804424 <___vfprintf_internal_r+0x1fc>
  805b54:	dcc14615 	stw	r19,1304(sp)
  805b58:	98011016 	blt	r19,zero,805f9c <___vfprintf_internal_r+0x1d74>
  805b5c:	980f883a 	mov	r7,r19
  805b60:	d8014715 	stw	zero,1308(sp)
  805b64:	003c5206 	br	804cb0 <___vfprintf_internal_r+0xa88>
  805b68:	d9015017 	ldw	r4,1344(sp)
  805b6c:	b00b883a 	mov	r5,r22
  805b70:	d9800d04 	addi	r6,sp,52
  805b74:	08041d00 	call	8041d0 <__sprint_r>
  805b78:	103b631e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805b7c:	dc800f17 	ldw	r18,60(sp)
  805b80:	d9000617 	ldw	r4,24(sp)
  805b84:	d8c01a04 	addi	r3,sp,104
  805b88:	003f2e06 	br	805844 <___vfprintf_internal_r+0x161c>
  805b8c:	d8c14d17 	ldw	r3,1332(sp)
  805b90:	1880100c 	andi	r2,r3,64
  805b94:	1000a026 	beq	r2,zero,805e18 <___vfprintf_internal_r+0x1bf0>
  805b98:	38800017 	ldw	r2,0(r7)
  805b9c:	39c00104 	addi	r7,r7,4
  805ba0:	d9c14115 	stw	r7,1284(sp)
  805ba4:	d9014c17 	ldw	r4,1328(sp)
  805ba8:	d9c14117 	ldw	r7,1284(sp)
  805bac:	1100000d 	sth	r4,0(r2)
  805bb0:	0039f906 	br	804398 <___vfprintf_internal_r+0x170>
  805bb4:	d9015017 	ldw	r4,1344(sp)
  805bb8:	b00b883a 	mov	r5,r22
  805bbc:	d9800d04 	addi	r6,sp,52
  805bc0:	08041d00 	call	8041d0 <__sprint_r>
  805bc4:	103b501e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805bc8:	dc800f17 	ldw	r18,60(sp)
  805bcc:	dc400e17 	ldw	r17,56(sp)
  805bd0:	d9000617 	ldw	r4,24(sp)
  805bd4:	d8c01a04 	addi	r3,sp,104
  805bd8:	003f2d06 	br	805890 <___vfprintf_internal_r+0x1668>
  805bdc:	00800184 	movi	r2,6
  805be0:	14c09a36 	bltu	r2,r19,805e4c <___vfprintf_internal_r+0x1c24>
  805be4:	dcc14615 	stw	r19,1304(sp)
  805be8:	9800010e 	bge	r19,zero,805bf0 <___vfprintf_internal_r+0x19c8>
  805bec:	d8014615 	stw	zero,1304(sp)
  805bf0:	00802074 	movhi	r2,129
  805bf4:	10933704 	addi	r2,r2,19676
  805bf8:	980f883a 	mov	r7,r19
  805bfc:	d8814215 	stw	r2,1288(sp)
  805c00:	003a7806 	br	8045e4 <___vfprintf_internal_r+0x3bc>
  805c04:	00bfffc4 	movi	r2,-1
  805c08:	9880e226 	beq	r19,r2,805f94 <___vfprintf_internal_r+0x1d6c>
  805c0c:	d9414e17 	ldw	r5,1336(sp)
  805c10:	008019c4 	movi	r2,103
  805c14:	2880dc26 	beq	r5,r2,805f88 <___vfprintf_internal_r+0x1d60>
  805c18:	008011c4 	movi	r2,71
  805c1c:	2880da26 	beq	r5,r2,805f88 <___vfprintf_internal_r+0x1d60>
  805c20:	d9414d17 	ldw	r5,1332(sp)
  805c24:	d9014417 	ldw	r4,1296(sp)
  805c28:	d9814317 	ldw	r6,1292(sp)
  805c2c:	29404014 	ori	r5,r5,256
  805c30:	d9414d15 	stw	r5,1332(sp)
  805c34:	2000cc16 	blt	r4,zero,805f68 <___vfprintf_internal_r+0x1d40>
  805c38:	3021883a 	mov	r16,r6
  805c3c:	2023883a 	mov	r17,r4
  805c40:	0039883a 	mov	fp,zero
  805c44:	d9414e17 	ldw	r5,1336(sp)
  805c48:	00801984 	movi	r2,102
  805c4c:	2880b726 	beq	r5,r2,805f2c <___vfprintf_internal_r+0x1d04>
  805c50:	00801184 	movi	r2,70
  805c54:	2880b526 	beq	r5,r2,805f2c <___vfprintf_internal_r+0x1d04>
  805c58:	00801944 	movi	r2,101
  805c5c:	2880c826 	beq	r5,r2,805f80 <___vfprintf_internal_r+0x1d58>
  805c60:	00801144 	movi	r2,69
  805c64:	2880c626 	beq	r5,r2,805f80 <___vfprintf_internal_r+0x1d58>
  805c68:	9829883a 	mov	r20,r19
  805c6c:	d9015017 	ldw	r4,1344(sp)
  805c70:	d8800604 	addi	r2,sp,24
  805c74:	880d883a 	mov	r6,r17
  805c78:	d8800115 	stw	r2,4(sp)
  805c7c:	d8c00704 	addi	r3,sp,28
  805c80:	d8800804 	addi	r2,sp,32
  805c84:	800b883a 	mov	r5,r16
  805c88:	01c00084 	movi	r7,2
  805c8c:	d8c00215 	stw	r3,8(sp)
  805c90:	d8800315 	stw	r2,12(sp)
  805c94:	dd000015 	stw	r20,0(sp)
  805c98:	0807cb40 	call	807cb4 <_dtoa_r>
  805c9c:	d9814e17 	ldw	r6,1336(sp)
  805ca0:	d8814215 	stw	r2,1288(sp)
  805ca4:	008019c4 	movi	r2,103
  805ca8:	30809526 	beq	r6,r2,805f00 <___vfprintf_internal_r+0x1cd8>
  805cac:	d8c14e17 	ldw	r3,1336(sp)
  805cb0:	008011c4 	movi	r2,71
  805cb4:	18809226 	beq	r3,r2,805f00 <___vfprintf_internal_r+0x1cd8>
  805cb8:	d9414217 	ldw	r5,1288(sp)
  805cbc:	d9814e17 	ldw	r6,1336(sp)
  805cc0:	00801984 	movi	r2,102
  805cc4:	2d25883a 	add	r18,r5,r20
  805cc8:	30808626 	beq	r6,r2,805ee4 <___vfprintf_internal_r+0x1cbc>
  805ccc:	00801184 	movi	r2,70
  805cd0:	30808426 	beq	r6,r2,805ee4 <___vfprintf_internal_r+0x1cbc>
  805cd4:	000d883a 	mov	r6,zero
  805cd8:	000f883a 	mov	r7,zero
  805cdc:	880b883a 	mov	r5,r17
  805ce0:	8009883a 	mov	r4,r16
  805ce4:	080f3cc0 	call	80f3cc <__eqdf2>
  805ce8:	1000751e 	bne	r2,zero,805ec0 <___vfprintf_internal_r+0x1c98>
  805cec:	9005883a 	mov	r2,r18
  805cf0:	dc800815 	stw	r18,32(sp)
  805cf4:	d9014217 	ldw	r4,1288(sp)
  805cf8:	d9414e17 	ldw	r5,1336(sp)
  805cfc:	00c019c4 	movi	r3,103
  805d00:	1125c83a 	sub	r18,r2,r4
  805d04:	28c06826 	beq	r5,r3,805ea8 <___vfprintf_internal_r+0x1c80>
  805d08:	008011c4 	movi	r2,71
  805d0c:	28806626 	beq	r5,r2,805ea8 <___vfprintf_internal_r+0x1c80>
  805d10:	d9000617 	ldw	r4,24(sp)
  805d14:	d8c14e17 	ldw	r3,1336(sp)
  805d18:	00801944 	movi	r2,101
  805d1c:	10c05516 	blt	r2,r3,805e74 <___vfprintf_internal_r+0x1c4c>
  805d20:	213fffc4 	addi	r4,r4,-1
  805d24:	d9000615 	stw	r4,24(sp)
  805d28:	d8c00905 	stb	r3,36(sp)
  805d2c:	2021883a 	mov	r16,r4
  805d30:	2000c116 	blt	r4,zero,806038 <___vfprintf_internal_r+0x1e10>
  805d34:	00800ac4 	movi	r2,43
  805d38:	d8800945 	stb	r2,37(sp)
  805d3c:	00800244 	movi	r2,9
  805d40:	1400af0e 	bge	r2,r16,806000 <___vfprintf_internal_r+0x1dd8>
  805d44:	1027883a 	mov	r19,r2
  805d48:	dc400cc4 	addi	r17,sp,51
  805d4c:	8009883a 	mov	r4,r16
  805d50:	01400284 	movi	r5,10
  805d54:	080fbb00 	call	80fbb0 <__modsi3>
  805d58:	10800c04 	addi	r2,r2,48
  805d5c:	8c7fffc4 	addi	r17,r17,-1
  805d60:	8009883a 	mov	r4,r16
  805d64:	01400284 	movi	r5,10
  805d68:	88800005 	stb	r2,0(r17)
  805d6c:	080fb500 	call	80fb50 <__divsi3>
  805d70:	1021883a 	mov	r16,r2
  805d74:	98bff516 	blt	r19,r2,805d4c <___vfprintf_internal_r+0x1b24>
  805d78:	10c00c04 	addi	r3,r2,48
  805d7c:	d8800b04 	addi	r2,sp,44
  805d80:	108001c4 	addi	r2,r2,7
  805d84:	897fffc4 	addi	r5,r17,-1
  805d88:	88ffffc5 	stb	r3,-1(r17)
  805d8c:	2880a72e 	bgeu	r5,r2,80602c <___vfprintf_internal_r+0x1e04>
  805d90:	1009883a 	mov	r4,r2
  805d94:	d9800904 	addi	r6,sp,36
  805d98:	d8c00984 	addi	r3,sp,38
  805d9c:	28800003 	ldbu	r2,0(r5)
  805da0:	29400044 	addi	r5,r5,1
  805da4:	18800005 	stb	r2,0(r3)
  805da8:	18c00044 	addi	r3,r3,1
  805dac:	293ffb36 	bltu	r5,r4,805d9c <___vfprintf_internal_r+0x1b74>
  805db0:	1987c83a 	sub	r3,r3,r6
  805db4:	00800044 	movi	r2,1
  805db8:	d8c14915 	stw	r3,1316(sp)
  805dbc:	90cf883a 	add	r7,r18,r3
  805dc0:	1480960e 	bge	r2,r18,80601c <___vfprintf_internal_r+0x1df4>
  805dc4:	39c00044 	addi	r7,r7,1
  805dc8:	d9c14615 	stw	r7,1304(sp)
  805dcc:	38003416 	blt	r7,zero,805ea0 <___vfprintf_internal_r+0x1c78>
  805dd0:	e0803fcc 	andi	r2,fp,255
  805dd4:	1080201c 	xori	r2,r2,128
  805dd8:	10bfe004 	addi	r2,r2,-128
  805ddc:	10004e26 	beq	r2,zero,805f18 <___vfprintf_internal_r+0x1cf0>
  805de0:	00800b44 	movi	r2,45
  805de4:	dc814815 	stw	r18,1312(sp)
  805de8:	d8014715 	stw	zero,1308(sp)
  805dec:	d8800405 	stb	r2,16(sp)
  805df0:	003bb106 	br	804cb8 <___vfprintf_internal_r+0xa90>
  805df4:	00800b44 	movi	r2,45
  805df8:	d8800405 	stb	r2,16(sp)
  805dfc:	003d3306 	br	8052cc <___vfprintf_internal_r+0x10a4>
  805e00:	d9015017 	ldw	r4,1344(sp)
  805e04:	b00b883a 	mov	r5,r22
  805e08:	d9800d04 	addi	r6,sp,52
  805e0c:	08041d00 	call	8041d0 <__sprint_r>
  805e10:	103abd1e 	bne	r2,zero,804908 <___vfprintf_internal_r+0x6e0>
  805e14:	003abb06 	br	804904 <___vfprintf_internal_r+0x6dc>
  805e18:	38800017 	ldw	r2,0(r7)
  805e1c:	39c00104 	addi	r7,r7,4
  805e20:	d9c14115 	stw	r7,1284(sp)
  805e24:	d9414c17 	ldw	r5,1328(sp)
  805e28:	d9c14117 	ldw	r7,1284(sp)
  805e2c:	11400015 	stw	r5,0(r2)
  805e30:	00395906 	br	804398 <___vfprintf_internal_r+0x170>
  805e34:	980f883a 	mov	r7,r19
  805e38:	dcc14615 	stw	r19,1304(sp)
  805e3c:	d8014715 	stw	zero,1308(sp)
  805e40:	003b9b06 	br	804cb0 <___vfprintf_internal_r+0xa88>
  805e44:	0027883a 	mov	r19,zero
  805e48:	00397806 	br	80442c <___vfprintf_internal_r+0x204>
  805e4c:	00c02074 	movhi	r3,129
  805e50:	18d33704 	addi	r3,r3,19676
  805e54:	100f883a 	mov	r7,r2
  805e58:	d8814615 	stw	r2,1304(sp)
  805e5c:	d8c14215 	stw	r3,1288(sp)
  805e60:	0039e006 	br	8045e4 <___vfprintf_internal_r+0x3bc>
  805e64:	00802074 	movhi	r2,129
  805e68:	10933604 	addi	r2,r2,19672
  805e6c:	d8814215 	stw	r2,1288(sp)
  805e70:	003d1c06 	br	8052e4 <___vfprintf_internal_r+0x10bc>
  805e74:	d9414e17 	ldw	r5,1336(sp)
  805e78:	00801984 	movi	r2,102
  805e7c:	28804926 	beq	r5,r2,805fa4 <___vfprintf_internal_r+0x1d7c>
  805e80:	200f883a 	mov	r7,r4
  805e84:	24805716 	blt	r4,r18,805fe4 <___vfprintf_internal_r+0x1dbc>
  805e88:	d9414d17 	ldw	r5,1332(sp)
  805e8c:	2880004c 	andi	r2,r5,1
  805e90:	10000126 	beq	r2,zero,805e98 <___vfprintf_internal_r+0x1c70>
  805e94:	21c00044 	addi	r7,r4,1
  805e98:	d9c14615 	stw	r7,1304(sp)
  805e9c:	383fcc0e 	bge	r7,zero,805dd0 <___vfprintf_internal_r+0x1ba8>
  805ea0:	d8014615 	stw	zero,1304(sp)
  805ea4:	003fca06 	br	805dd0 <___vfprintf_internal_r+0x1ba8>
  805ea8:	d9000617 	ldw	r4,24(sp)
  805eac:	00bfff04 	movi	r2,-4
  805eb0:	1100480e 	bge	r2,r4,805fd4 <___vfprintf_internal_r+0x1dac>
  805eb4:	99004716 	blt	r19,r4,805fd4 <___vfprintf_internal_r+0x1dac>
  805eb8:	d8c14e15 	stw	r3,1336(sp)
  805ebc:	003ff006 	br	805e80 <___vfprintf_internal_r+0x1c58>
  805ec0:	d8800817 	ldw	r2,32(sp)
  805ec4:	14bf8b2e 	bgeu	r2,r18,805cf4 <___vfprintf_internal_r+0x1acc>
  805ec8:	9007883a 	mov	r3,r18
  805ecc:	01000c04 	movi	r4,48
  805ed0:	11000005 	stb	r4,0(r2)
  805ed4:	10800044 	addi	r2,r2,1
  805ed8:	d8800815 	stw	r2,32(sp)
  805edc:	18bffc1e 	bne	r3,r2,805ed0 <___vfprintf_internal_r+0x1ca8>
  805ee0:	003f8406 	br	805cf4 <___vfprintf_internal_r+0x1acc>
  805ee4:	d8814217 	ldw	r2,1288(sp)
  805ee8:	10c00007 	ldb	r3,0(r2)
  805eec:	00800c04 	movi	r2,48
  805ef0:	18805b26 	beq	r3,r2,806060 <___vfprintf_internal_r+0x1e38>
  805ef4:	d9000617 	ldw	r4,24(sp)
  805ef8:	9125883a 	add	r18,r18,r4
  805efc:	003f7506 	br	805cd4 <___vfprintf_internal_r+0x1aac>
  805f00:	d9014d17 	ldw	r4,1332(sp)
  805f04:	2080004c 	andi	r2,r4,1
  805f08:	1005003a 	cmpeq	r2,r2,zero
  805f0c:	103f6a26 	beq	r2,zero,805cb8 <___vfprintf_internal_r+0x1a90>
  805f10:	d8800817 	ldw	r2,32(sp)
  805f14:	003f7706 	br	805cf4 <___vfprintf_internal_r+0x1acc>
  805f18:	d9c14615 	stw	r7,1304(sp)
  805f1c:	38004d16 	blt	r7,zero,806054 <___vfprintf_internal_r+0x1e2c>
  805f20:	dc814815 	stw	r18,1312(sp)
  805f24:	d8014715 	stw	zero,1308(sp)
  805f28:	003b6106 	br	804cb0 <___vfprintf_internal_r+0xa88>
  805f2c:	d9015017 	ldw	r4,1344(sp)
  805f30:	d8800604 	addi	r2,sp,24
  805f34:	d8800115 	stw	r2,4(sp)
  805f38:	d8c00704 	addi	r3,sp,28
  805f3c:	d8800804 	addi	r2,sp,32
  805f40:	800b883a 	mov	r5,r16
  805f44:	880d883a 	mov	r6,r17
  805f48:	01c000c4 	movi	r7,3
  805f4c:	d8c00215 	stw	r3,8(sp)
  805f50:	d8800315 	stw	r2,12(sp)
  805f54:	dcc00015 	stw	r19,0(sp)
  805f58:	9829883a 	mov	r20,r19
  805f5c:	0807cb40 	call	807cb4 <_dtoa_r>
  805f60:	d8814215 	stw	r2,1288(sp)
  805f64:	003f5106 	br	805cac <___vfprintf_internal_r+0x1a84>
  805f68:	d8c14317 	ldw	r3,1292(sp)
  805f6c:	d9014417 	ldw	r4,1296(sp)
  805f70:	07000b44 	movi	fp,45
  805f74:	1821883a 	mov	r16,r3
  805f78:	2460003c 	xorhi	r17,r4,32768
  805f7c:	003f3106 	br	805c44 <___vfprintf_internal_r+0x1a1c>
  805f80:	9d000044 	addi	r20,r19,1
  805f84:	003f3906 	br	805c6c <___vfprintf_internal_r+0x1a44>
  805f88:	983f251e 	bne	r19,zero,805c20 <___vfprintf_internal_r+0x19f8>
  805f8c:	04c00044 	movi	r19,1
  805f90:	003f2306 	br	805c20 <___vfprintf_internal_r+0x19f8>
  805f94:	04c00184 	movi	r19,6
  805f98:	003f2106 	br	805c20 <___vfprintf_internal_r+0x19f8>
  805f9c:	d8014615 	stw	zero,1304(sp)
  805fa0:	003eee06 	br	805b5c <___vfprintf_internal_r+0x1934>
  805fa4:	200f883a 	mov	r7,r4
  805fa8:	0100370e 	bge	zero,r4,806088 <___vfprintf_internal_r+0x1e60>
  805fac:	9800031e 	bne	r19,zero,805fbc <___vfprintf_internal_r+0x1d94>
  805fb0:	d9814d17 	ldw	r6,1332(sp)
  805fb4:	3080004c 	andi	r2,r6,1
  805fb8:	103fb726 	beq	r2,zero,805e98 <___vfprintf_internal_r+0x1c70>
  805fbc:	20800044 	addi	r2,r4,1
  805fc0:	98a7883a 	add	r19,r19,r2
  805fc4:	dcc14615 	stw	r19,1304(sp)
  805fc8:	980f883a 	mov	r7,r19
  805fcc:	983f800e 	bge	r19,zero,805dd0 <___vfprintf_internal_r+0x1ba8>
  805fd0:	003fb306 	br	805ea0 <___vfprintf_internal_r+0x1c78>
  805fd4:	d9814e17 	ldw	r6,1336(sp)
  805fd8:	31bfff84 	addi	r6,r6,-2
  805fdc:	d9814e15 	stw	r6,1336(sp)
  805fe0:	003f4c06 	br	805d14 <___vfprintf_internal_r+0x1aec>
  805fe4:	0100180e 	bge	zero,r4,806048 <___vfprintf_internal_r+0x1e20>
  805fe8:	00800044 	movi	r2,1
  805fec:	1485883a 	add	r2,r2,r18
  805ff0:	d8814615 	stw	r2,1304(sp)
  805ff4:	100f883a 	mov	r7,r2
  805ff8:	103f750e 	bge	r2,zero,805dd0 <___vfprintf_internal_r+0x1ba8>
  805ffc:	003fa806 	br	805ea0 <___vfprintf_internal_r+0x1c78>
  806000:	80c00c04 	addi	r3,r16,48
  806004:	00800c04 	movi	r2,48
  806008:	d8c009c5 	stb	r3,39(sp)
  80600c:	d9800904 	addi	r6,sp,36
  806010:	d8c00a04 	addi	r3,sp,40
  806014:	d8800985 	stb	r2,38(sp)
  806018:	003f6506 	br	805db0 <___vfprintf_internal_r+0x1b88>
  80601c:	d9014d17 	ldw	r4,1332(sp)
  806020:	2084703a 	and	r2,r4,r2
  806024:	103f9c26 	beq	r2,zero,805e98 <___vfprintf_internal_r+0x1c70>
  806028:	003f6606 	br	805dc4 <___vfprintf_internal_r+0x1b9c>
  80602c:	d9800904 	addi	r6,sp,36
  806030:	d8c00984 	addi	r3,sp,38
  806034:	003f5e06 	br	805db0 <___vfprintf_internal_r+0x1b88>
  806038:	00800b44 	movi	r2,45
  80603c:	0121c83a 	sub	r16,zero,r4
  806040:	d8800945 	stb	r2,37(sp)
  806044:	003f3d06 	br	805d3c <___vfprintf_internal_r+0x1b14>
  806048:	00800084 	movi	r2,2
  80604c:	1105c83a 	sub	r2,r2,r4
  806050:	003fe606 	br	805fec <___vfprintf_internal_r+0x1dc4>
  806054:	d8014615 	stw	zero,1304(sp)
  806058:	dc814815 	stw	r18,1312(sp)
  80605c:	003fb106 	br	805f24 <___vfprintf_internal_r+0x1cfc>
  806060:	000d883a 	mov	r6,zero
  806064:	000f883a 	mov	r7,zero
  806068:	8009883a 	mov	r4,r16
  80606c:	880b883a 	mov	r5,r17
  806070:	080f4540 	call	80f454 <__nedf2>
  806074:	103f9f26 	beq	r2,zero,805ef4 <___vfprintf_internal_r+0x1ccc>
  806078:	00800044 	movi	r2,1
  80607c:	1509c83a 	sub	r4,r2,r20
  806080:	d9000615 	stw	r4,24(sp)
  806084:	003f9b06 	br	805ef4 <___vfprintf_internal_r+0x1ccc>
  806088:	98000d1e 	bne	r19,zero,8060c0 <___vfprintf_internal_r+0x1e98>
  80608c:	d8c14d17 	ldw	r3,1332(sp)
  806090:	1880004c 	andi	r2,r3,1
  806094:	10000a1e 	bne	r2,zero,8060c0 <___vfprintf_internal_r+0x1e98>
  806098:	01000044 	movi	r4,1
  80609c:	200f883a 	mov	r7,r4
  8060a0:	d9014615 	stw	r4,1304(sp)
  8060a4:	003f4a06 	br	805dd0 <___vfprintf_internal_r+0x1ba8>
  8060a8:	3cc00017 	ldw	r19,0(r7)
  8060ac:	39c00104 	addi	r7,r7,4
  8060b0:	983d0e0e 	bge	r19,zero,8054ec <___vfprintf_internal_r+0x12c4>
  8060b4:	b8c00007 	ldb	r3,0(r23)
  8060b8:	04ffffc4 	movi	r19,-1
  8060bc:	0038d906 	br	804424 <___vfprintf_internal_r+0x1fc>
  8060c0:	9cc00084 	addi	r19,r19,2
  8060c4:	dcc14615 	stw	r19,1304(sp)
  8060c8:	980f883a 	mov	r7,r19
  8060cc:	983f400e 	bge	r19,zero,805dd0 <___vfprintf_internal_r+0x1ba8>
  8060d0:	003f7306 	br	805ea0 <___vfprintf_internal_r+0x1c78>

008060d4 <__vfprintf_internal>:
  8060d4:	00802074 	movhi	r2,129
  8060d8:	109be504 	addi	r2,r2,28564
  8060dc:	2013883a 	mov	r9,r4
  8060e0:	11000017 	ldw	r4,0(r2)
  8060e4:	2805883a 	mov	r2,r5
  8060e8:	300f883a 	mov	r7,r6
  8060ec:	480b883a 	mov	r5,r9
  8060f0:	100d883a 	mov	r6,r2
  8060f4:	08042281 	jmpi	804228 <___vfprintf_internal_r>

008060f8 <__svfscanf_r>:
  8060f8:	deff4e04 	addi	sp,sp,-712
  8060fc:	dd80ae15 	stw	r22,696(sp)
  806100:	dd00ac15 	stw	r20,688(sp)
  806104:	dc40a915 	stw	r17,676(sp)
  806108:	dc00a815 	stw	r16,672(sp)
  80610c:	dfc0b115 	stw	ra,708(sp)
  806110:	df00b015 	stw	fp,704(sp)
  806114:	ddc0af15 	stw	r23,700(sp)
  806118:	dd40ad15 	stw	r21,692(sp)
  80611c:	dcc0ab15 	stw	r19,684(sp)
  806120:	dc80aa15 	stw	r18,680(sp)
  806124:	202d883a 	mov	r22,r4
  806128:	2821883a 	mov	r16,r5
  80612c:	d9c0a415 	stw	r7,656(sp)
  806130:	3029883a 	mov	r20,r6
  806134:	d800a215 	stw	zero,648(sp)
  806138:	0023883a 	mov	r17,zero
  80613c:	d800a115 	stw	zero,644(sp)
  806140:	d800a015 	stw	zero,640(sp)
  806144:	a1000007 	ldb	r4,0(r20)
  806148:	d9000115 	stw	r4,4(sp)
  80614c:	20001f26 	beq	r4,zero,8061cc <__svfscanf_r+0xd4>
  806150:	04802074 	movhi	r18,129
  806154:	949be904 	addi	r18,r18,28580
  806158:	91800017 	ldw	r6,0(r18)
  80615c:	a5000044 	addi	r20,r20,1
  806160:	3107883a 	add	r3,r6,r4
  806164:	18800003 	ldbu	r2,0(r3)
  806168:	1080020c 	andi	r2,r2,8
  80616c:	10002426 	beq	r2,zero,806200 <__svfscanf_r+0x108>
  806170:	80c00117 	ldw	r3,4(r16)
  806174:	00c00e0e 	bge	zero,r3,8061b0 <__svfscanf_r+0xb8>
  806178:	81400017 	ldw	r5,0(r16)
  80617c:	90800017 	ldw	r2,0(r18)
  806180:	28c00003 	ldbu	r3,0(r5)
  806184:	1887883a 	add	r3,r3,r2
  806188:	19000003 	ldbu	r4,0(r3)
  80618c:	2100020c 	andi	r4,r4,8
  806190:	203fec26 	beq	r4,zero,806144 <__svfscanf_r+0x4c>
  806194:	80c00117 	ldw	r3,4(r16)
  806198:	29800044 	addi	r6,r5,1
  80619c:	8c400044 	addi	r17,r17,1
  8061a0:	18ffffc4 	addi	r3,r3,-1
  8061a4:	81800015 	stw	r6,0(r16)
  8061a8:	80c00115 	stw	r3,4(r16)
  8061ac:	00fff216 	blt	zero,r3,806178 <__svfscanf_r+0x80>
  8061b0:	b009883a 	mov	r4,r22
  8061b4:	800b883a 	mov	r5,r16
  8061b8:	0803b780 	call	803b78 <__srefill_r>
  8061bc:	103fee26 	beq	r2,zero,806178 <__svfscanf_r+0x80>
  8061c0:	a1000007 	ldb	r4,0(r20)
  8061c4:	d9000115 	stw	r4,4(sp)
  8061c8:	203fe11e 	bne	r4,zero,806150 <__svfscanf_r+0x58>
  8061cc:	d880a217 	ldw	r2,648(sp)
  8061d0:	dfc0b117 	ldw	ra,708(sp)
  8061d4:	df00b017 	ldw	fp,704(sp)
  8061d8:	ddc0af17 	ldw	r23,700(sp)
  8061dc:	dd80ae17 	ldw	r22,696(sp)
  8061e0:	dd40ad17 	ldw	r21,692(sp)
  8061e4:	dd00ac17 	ldw	r20,688(sp)
  8061e8:	dcc0ab17 	ldw	r19,684(sp)
  8061ec:	dc80aa17 	ldw	r18,680(sp)
  8061f0:	dc40a917 	ldw	r17,676(sp)
  8061f4:	dc00a817 	ldw	r16,672(sp)
  8061f8:	dec0b204 	addi	sp,sp,712
  8061fc:	f800283a 	ret
  806200:	00800944 	movi	r2,37
  806204:	20801626 	beq	r4,r2,806260 <__svfscanf_r+0x168>
  806208:	80800117 	ldw	r2,4(r16)
  80620c:	00800b0e 	bge	zero,r2,80623c <__svfscanf_r+0x144>
  806210:	81000017 	ldw	r4,0(r16)
  806214:	a0ffffc7 	ldb	r3,-1(r20)
  806218:	20800003 	ldbu	r2,0(r4)
  80621c:	10ffeb1e 	bne	r2,r3,8061cc <__svfscanf_r+0xd4>
  806220:	80c00117 	ldw	r3,4(r16)
  806224:	21800044 	addi	r6,r4,1
  806228:	8c400044 	addi	r17,r17,1
  80622c:	18ffffc4 	addi	r3,r3,-1
  806230:	80c00115 	stw	r3,4(r16)
  806234:	81800015 	stw	r6,0(r16)
  806238:	003fc206 	br	806144 <__svfscanf_r+0x4c>
  80623c:	b009883a 	mov	r4,r22
  806240:	800b883a 	mov	r5,r16
  806244:	0803b780 	call	803b78 <__srefill_r>
  806248:	103ff126 	beq	r2,zero,806210 <__svfscanf_r+0x118>
  80624c:	d900a217 	ldw	r4,648(sp)
  806250:	2004c91e 	bne	r4,zero,807578 <__svfscanf_r+0x1480>
  806254:	00bfffc4 	movi	r2,-1
  806258:	d880a215 	stw	r2,648(sp)
  80625c:	003fdb06 	br	8061cc <__svfscanf_r+0xd4>
  806260:	d800a315 	stw	zero,652(sp)
  806264:	0027883a 	mov	r19,zero
  806268:	a0c00003 	ldbu	r3,0(r20)
  80626c:	00801e04 	movi	r2,120
  806270:	a5000044 	addi	r20,r20,1
  806274:	19403fcc 	andi	r5,r3,255
  806278:	2940201c 	xori	r5,r5,128
  80627c:	297fe004 	addi	r5,r5,-128
  806280:	10c08036 	bltu	r2,r3,806484 <__svfscanf_r+0x38c>
  806284:	18c5883a 	add	r2,r3,r3
  806288:	1085883a 	add	r2,r2,r2
  80628c:	00c02034 	movhi	r3,128
  806290:	18d8a804 	addi	r3,r3,25248
  806294:	10c5883a 	add	r2,r2,r3
  806298:	11000017 	ldw	r4,0(r2)
  80629c:	2000683a 	jmp	r4
  8062a0:	00806254 	movui	r2,393
  8062a4:	00806484 	movi	r2,402
  8062a8:	00806484 	movi	r2,402
  8062ac:	00806484 	movi	r2,402
  8062b0:	00806484 	movi	r2,402
  8062b4:	00806484 	movi	r2,402
  8062b8:	00806484 	movi	r2,402
  8062bc:	00806484 	movi	r2,402
  8062c0:	00806484 	movi	r2,402
  8062c4:	00806484 	movi	r2,402
  8062c8:	00806484 	movi	r2,402
  8062cc:	00806484 	movi	r2,402
  8062d0:	00806484 	movi	r2,402
  8062d4:	00806484 	movi	r2,402
  8062d8:	00806484 	movi	r2,402
  8062dc:	00806484 	movi	r2,402
  8062e0:	00806484 	movi	r2,402
  8062e4:	00806484 	movi	r2,402
  8062e8:	00806484 	movi	r2,402
  8062ec:	00806484 	movi	r2,402
  8062f0:	00806484 	movi	r2,402
  8062f4:	00806484 	movi	r2,402
  8062f8:	00806484 	movi	r2,402
  8062fc:	00806484 	movi	r2,402
  806300:	00806484 	movi	r2,402
  806304:	00806484 	movi	r2,402
  806308:	00806484 	movi	r2,402
  80630c:	00806484 	movi	r2,402
  806310:	00806484 	movi	r2,402
  806314:	00806484 	movi	r2,402
  806318:	00806484 	movi	r2,402
  80631c:	00806484 	movi	r2,402
  806320:	00806484 	movi	r2,402
  806324:	00806484 	movi	r2,402
  806328:	00806484 	movi	r2,402
  80632c:	00806484 	movi	r2,402
  806330:	00806484 	movi	r2,402
  806334:	00806208 	cmpgei	r2,zero,392
  806338:	00806484 	movi	r2,402
  80633c:	00806484 	movi	r2,402
  806340:	00806484 	movi	r2,402
  806344:	00806484 	movi	r2,402
  806348:	008074a8 	cmpgeui	r2,zero,466
  80634c:	00806484 	movi	r2,402
  806350:	00806484 	movi	r2,402
  806354:	00806484 	movi	r2,402
  806358:	00806484 	movi	r2,402
  80635c:	00806484 	movi	r2,402
  806360:	00806ea4 	muli	r2,zero,442
  806364:	00806ea4 	muli	r2,zero,442
  806368:	00806ea4 	muli	r2,zero,442
  80636c:	00806ea4 	muli	r2,zero,442
  806370:	00806ea4 	muli	r2,zero,442
  806374:	00806ea4 	muli	r2,zero,442
  806378:	00806ea4 	muli	r2,zero,442
  80637c:	00806ea4 	muli	r2,zero,442
  806380:	00806ea4 	muli	r2,zero,442
  806384:	00806ea4 	muli	r2,zero,442
  806388:	00806484 	movi	r2,402
  80638c:	00806484 	movi	r2,402
  806390:	00806484 	movi	r2,402
  806394:	00806484 	movi	r2,402
  806398:	00806484 	movi	r2,402
  80639c:	00806484 	movi	r2,402
  8063a0:	00806484 	movi	r2,402
  8063a4:	00806484 	movi	r2,402
  8063a8:	00806484 	movi	r2,402
  8063ac:	00806484 	movi	r2,402
  8063b0:	00807624 	muli	r2,zero,472
  8063b4:	0080761c 	xori	r2,zero,472
  8063b8:	00806484 	movi	r2,402
  8063bc:	0080761c 	xori	r2,zero,472
  8063c0:	00806484 	movi	r2,402
  8063c4:	00806484 	movi	r2,402
  8063c8:	00806484 	movi	r2,402
  8063cc:	00806484 	movi	r2,402
  8063d0:	008076b4 	movhi	r2,474
  8063d4:	00806484 	movi	r2,402
  8063d8:	00806484 	movi	r2,402
  8063dc:	0080766c 	andhi	r2,zero,473
  8063e0:	00806484 	movi	r2,402
  8063e4:	00806484 	movi	r2,402
  8063e8:	00806484 	movi	r2,402
  8063ec:	00806484 	movi	r2,402
  8063f0:	00806484 	movi	r2,402
  8063f4:	00806484 	movi	r2,402
  8063f8:	00806484 	movi	r2,402
  8063fc:	00806484 	movi	r2,402
  806400:	008074b0 	cmpltui	r2,zero,466
  806404:	00806484 	movi	r2,402
  806408:	00806484 	movi	r2,402
  80640c:	00807650 	cmplti	r2,zero,473
  806410:	00806484 	movi	r2,402
  806414:	00806484 	movi	r2,402
  806418:	00806484 	movi	r2,402
  80641c:	00806484 	movi	r2,402
  806420:	00806484 	movi	r2,402
  806424:	00806484 	movi	r2,402
  806428:	00806484 	movi	r2,402
  80642c:	00807644 	movi	r2,473
  806430:	00807628 	cmpgeui	r2,zero,472
  806434:	0080761c 	xori	r2,zero,472
  806438:	0080761c 	xori	r2,zero,472
  80643c:	0080761c 	xori	r2,zero,472
  806440:	00807614 	movui	r2,472
  806444:	00807708 	cmpgei	r2,zero,476
  806448:	00806484 	movi	r2,402
  80644c:	00806484 	movi	r2,402
  806450:	008076f4 	movhi	r2,475
  806454:	00806484 	movi	r2,402
  806458:	0080768c 	andi	r2,zero,474
  80645c:	00807670 	cmpltui	r2,zero,473
  806460:	008076c4 	movi	r2,475
  806464:	00806484 	movi	r2,402
  806468:	00806484 	movi	r2,402
  80646c:	008076bc 	xorhi	r2,zero,474
  806470:	00806484 	movi	r2,402
  806474:	008069f4 	movhi	r2,423
  806478:	00806484 	movi	r2,402
  80647c:	00806484 	movi	r2,402
  806480:	008074b0 	cmpltui	r2,zero,466
  806484:	2987883a 	add	r3,r5,r6
  806488:	18800003 	ldbu	r2,0(r3)
  80648c:	1080004c 	andi	r2,r2,1
  806490:	1005003a 	cmpeq	r2,r2,zero
  806494:	10002c26 	beq	r2,zero,806548 <__svfscanf_r+0x450>
  806498:	01002074 	movhi	r4,129
  80649c:	21303a04 	addi	r4,r4,-16152
  8064a0:	00800284 	movi	r2,10
  8064a4:	d900a015 	stw	r4,640(sp)
  8064a8:	054000c4 	movi	r21,3
  8064ac:	d880a115 	stw	r2,644(sp)
  8064b0:	80c00117 	ldw	r3,4(r16)
  8064b4:	00c14a0e 	bge	zero,r3,8069e0 <__svfscanf_r+0x8e8>
  8064b8:	9880100c 	andi	r2,r19,64
  8064bc:	10001326 	beq	r2,zero,80650c <__svfscanf_r+0x414>
  8064c0:	00800104 	movi	r2,4
  8064c4:	157f1f36 	bltu	r2,r21,806144 <__svfscanf_r+0x4c>
  8064c8:	ad45883a 	add	r2,r21,r21
  8064cc:	1085883a 	add	r2,r2,r2
  8064d0:	00c02034 	movhi	r3,128
  8064d4:	18d93904 	addi	r3,r3,25828
  8064d8:	10c5883a 	add	r2,r2,r3
  8064dc:	11000017 	ldw	r4,0(r2)
  8064e0:	2000683a 	jmp	r4
  8064e4:	00806550 	cmplti	r2,zero,405
  8064e8:	0080665c 	xori	r2,zero,409
  8064ec:	008066d0 	cmplti	r2,zero,411
  8064f0:	008069bc 	xorhi	r2,zero,422
  8064f4:	00806808 	cmpgei	r2,zero,416
  8064f8:	b009883a 	mov	r4,r22
  8064fc:	800b883a 	mov	r5,r16
  806500:	0803b780 	call	803b78 <__srefill_r>
  806504:	103f511e 	bne	r2,zero,80624c <__svfscanf_r+0x154>
  806508:	8c400044 	addi	r17,r17,1
  80650c:	81400017 	ldw	r5,0(r16)
  806510:	90800017 	ldw	r2,0(r18)
  806514:	28c00003 	ldbu	r3,0(r5)
  806518:	1887883a 	add	r3,r3,r2
  80651c:	19000003 	ldbu	r4,0(r3)
  806520:	2100020c 	andi	r4,r4,8
  806524:	203fe626 	beq	r4,zero,8064c0 <__svfscanf_r+0x3c8>
  806528:	80c00117 	ldw	r3,4(r16)
  80652c:	18ffffc4 	addi	r3,r3,-1
  806530:	80c00115 	stw	r3,4(r16)
  806534:	00fff00e 	bge	zero,r3,8064f8 <__svfscanf_r+0x400>
  806538:	29800044 	addi	r6,r5,1
  80653c:	8c400044 	addi	r17,r17,1
  806540:	81800015 	stw	r6,0(r16)
  806544:	003ff106 	br	80650c <__svfscanf_r+0x414>
  806548:	9cc00054 	ori	r19,r19,1
  80654c:	003fd206 	br	806498 <__svfscanf_r+0x3a0>
  806550:	d8c0a317 	ldw	r3,652(sp)
  806554:	1800021e 	bne	r3,zero,806560 <__svfscanf_r+0x468>
  806558:	01000044 	movi	r4,1
  80655c:	d900a315 	stw	r4,652(sp)
  806560:	9880004c 	andi	r2,r19,1
  806564:	1005003a 	cmpeq	r2,r2,zero
  806568:	1003d91e 	bne	r2,zero,8074d0 <__svfscanf_r+0x13d8>
  80656c:	9d40040c 	andi	r21,r19,16
  806570:	a839003a 	cmpeq	fp,r21,zero
  806574:	e0042526 	beq	fp,zero,80760c <__svfscanf_r+0x1514>
  806578:	d880a417 	ldw	r2,656(sp)
  80657c:	14c00017 	ldw	r19,0(r2)
  806580:	10800104 	addi	r2,r2,4
  806584:	d880a415 	stw	r2,656(sp)
  806588:	d8c0a317 	ldw	r3,652(sp)
  80658c:	18041a26 	beq	r3,zero,8075f8 <__svfscanf_r+0x1500>
  806590:	01002074 	movhi	r4,129
  806594:	211bea04 	addi	r4,r4,28584
  806598:	20800017 	ldw	r2,0(r4)
  80659c:	103f2b26 	beq	r2,zero,80624c <__svfscanf_r+0x154>
  8065a0:	d8804404 	addi	r2,sp,272
  8065a4:	0025883a 	mov	r18,zero
  8065a8:	d880a615 	stw	r2,664(sp)
  8065ac:	05ffffc4 	movi	r23,-1
  8065b0:	80800017 	ldw	r2,0(r16)
  8065b4:	80c00117 	ldw	r3,4(r16)
  8065b8:	d900a617 	ldw	r4,664(sp)
  8065bc:	12000003 	ldbu	r8,0(r2)
  8065c0:	18ffffc4 	addi	r3,r3,-1
  8065c4:	11800044 	addi	r6,r2,1
  8065c8:	248f883a 	add	r7,r4,r18
  8065cc:	80c00115 	stw	r3,4(r16)
  8065d0:	81800015 	stw	r6,0(r16)
  8065d4:	3a000005 	stb	r8,0(r7)
  8065d8:	d9000204 	addi	r4,sp,8
  8065dc:	000b883a 	mov	r5,zero
  8065e0:	01800204 	movi	r6,8
  8065e4:	08033480 	call	803348 <memset>
  8065e8:	d980a617 	ldw	r6,664(sp)
  8065ec:	94800044 	addi	r18,r18,1
  8065f0:	d8800204 	addi	r2,sp,8
  8065f4:	b009883a 	mov	r4,r22
  8065f8:	980b883a 	mov	r5,r19
  8065fc:	900f883a 	mov	r7,r18
  806600:	d8800015 	stw	r2,0(sp)
  806604:	080971c0 	call	80971c <_mbrtowc_r>
  806608:	1007883a 	mov	r3,r2
  80660c:	15ff0f26 	beq	r2,r23,80624c <__svfscanf_r+0x154>
  806610:	1003f11e 	bne	r2,zero,8075d8 <__svfscanf_r+0x14e0>
  806614:	a800011e 	bne	r21,zero,80661c <__svfscanf_r+0x524>
  806618:	98000015 	stw	zero,0(r19)
  80661c:	d8c0a317 	ldw	r3,652(sp)
  806620:	8ca3883a 	add	r17,r17,r18
  806624:	18ffffc4 	addi	r3,r3,-1
  806628:	d8c0a315 	stw	r3,652(sp)
  80662c:	e0000126 	beq	fp,zero,806634 <__svfscanf_r+0x53c>
  806630:	9cc00104 	addi	r19,r19,4
  806634:	0025883a 	mov	r18,zero
  806638:	80c00117 	ldw	r3,4(r16)
  80663c:	00c3e90e 	bge	zero,r3,8075e4 <__svfscanf_r+0x14ec>
  806640:	d900a317 	ldw	r4,652(sp)
  806644:	2003ec26 	beq	r4,zero,8075f8 <__svfscanf_r+0x1500>
  806648:	00c02074 	movhi	r3,129
  80664c:	18dbea04 	addi	r3,r3,28584
  806650:	18800017 	ldw	r2,0(r3)
  806654:	90bfd61e 	bne	r18,r2,8065b0 <__svfscanf_r+0x4b8>
  806658:	003efc06 	br	80624c <__svfscanf_r+0x154>
  80665c:	d880a317 	ldw	r2,652(sp)
  806660:	1000021e 	bne	r2,zero,80666c <__svfscanf_r+0x574>
  806664:	00ffffc4 	movi	r3,-1
  806668:	d8c0a315 	stw	r3,652(sp)
  80666c:	9880040c 	andi	r2,r19,16
  806670:	10036526 	beq	r2,zero,807408 <__svfscanf_r+0x1310>
  806674:	0027883a 	mov	r19,zero
  806678:	dd400404 	addi	r21,sp,16
  80667c:	81000017 	ldw	r4,0(r16)
  806680:	20800003 	ldbu	r2,0(r4)
  806684:	a885883a 	add	r2,r21,r2
  806688:	10c00007 	ldb	r3,0(r2)
  80668c:	1803be26 	beq	r3,zero,807588 <__svfscanf_r+0x1490>
  806690:	80c00117 	ldw	r3,4(r16)
  806694:	21800044 	addi	r6,r4,1
  806698:	d900a317 	ldw	r4,652(sp)
  80669c:	18ffffc4 	addi	r3,r3,-1
  8066a0:	9cc00044 	addi	r19,r19,1
  8066a4:	81800015 	stw	r6,0(r16)
  8066a8:	80c00115 	stw	r3,4(r16)
  8066ac:	24c3b626 	beq	r4,r19,807588 <__svfscanf_r+0x1490>
  8066b0:	00fff216 	blt	zero,r3,80667c <__svfscanf_r+0x584>
  8066b4:	b009883a 	mov	r4,r22
  8066b8:	800b883a 	mov	r5,r16
  8066bc:	0803b780 	call	803b78 <__srefill_r>
  8066c0:	103fee26 	beq	r2,zero,80667c <__svfscanf_r+0x584>
  8066c4:	983ee126 	beq	r19,zero,80624c <__svfscanf_r+0x154>
  8066c8:	8ce3883a 	add	r17,r17,r19
  8066cc:	003e9d06 	br	806144 <__svfscanf_r+0x4c>
  8066d0:	d900a317 	ldw	r4,652(sp)
  8066d4:	2000021e 	bne	r4,zero,8066e0 <__svfscanf_r+0x5e8>
  8066d8:	00bfffc4 	movi	r2,-1
  8066dc:	d880a315 	stw	r2,652(sp)
  8066e0:	9880004c 	andi	r2,r19,1
  8066e4:	1005003a 	cmpeq	r2,r2,zero
  8066e8:	1001f41e 	bne	r2,zero,806ebc <__svfscanf_r+0xdc4>
  8066ec:	9dc0040c 	andi	r23,r19,16
  8066f0:	b807003a 	cmpeq	r3,r23,zero
  8066f4:	d8c0a515 	stw	r3,660(sp)
  8066f8:	1803b21e 	bne	r3,zero,8075c4 <__svfscanf_r+0x14cc>
  8066fc:	dd400104 	addi	r21,sp,4
  806700:	0027883a 	mov	r19,zero
  806704:	073fffc4 	movi	fp,-1
  806708:	81400017 	ldw	r5,0(r16)
  80670c:	90800017 	ldw	r2,0(r18)
  806710:	29c00003 	ldbu	r7,0(r5)
  806714:	38c03fcc 	andi	r3,r7,255
  806718:	1887883a 	add	r3,r3,r2
  80671c:	19000003 	ldbu	r4,0(r3)
  806720:	2100020c 	andi	r4,r4,8
  806724:	2000321e 	bne	r4,zero,8067f0 <__svfscanf_r+0x6f8>
  806728:	d8c0a317 	ldw	r3,652(sp)
  80672c:	18003026 	beq	r3,zero,8067f0 <__svfscanf_r+0x6f8>
  806730:	00802074 	movhi	r2,129
  806734:	109bea04 	addi	r2,r2,28584
  806738:	10c00017 	ldw	r3,0(r2)
  80673c:	98fec326 	beq	r19,r3,80624c <__svfscanf_r+0x154>
  806740:	d8c04404 	addi	r3,sp,272
  806744:	80800117 	ldw	r2,4(r16)
  806748:	d8c0a615 	stw	r3,664(sp)
  80674c:	d900a617 	ldw	r4,664(sp)
  806750:	10ffffc4 	addi	r3,r2,-1
  806754:	29800044 	addi	r6,r5,1
  806758:	80c00115 	stw	r3,4(r16)
  80675c:	24c5883a 	add	r2,r4,r19
  806760:	81800015 	stw	r6,0(r16)
  806764:	d9000204 	addi	r4,sp,8
  806768:	000b883a 	mov	r5,zero
  80676c:	01800204 	movi	r6,8
  806770:	11c00005 	stb	r7,0(r2)
  806774:	08033480 	call	803348 <memset>
  806778:	d980a617 	ldw	r6,664(sp)
  80677c:	9cc00044 	addi	r19,r19,1
  806780:	d8800204 	addi	r2,sp,8
  806784:	b009883a 	mov	r4,r22
  806788:	a80b883a 	mov	r5,r21
  80678c:	980f883a 	mov	r7,r19
  806790:	d8800015 	stw	r2,0(sp)
  806794:	080971c0 	call	80971c <_mbrtowc_r>
  806798:	1007883a 	mov	r3,r2
  80679c:	173eab26 	beq	r2,fp,80624c <__svfscanf_r+0x154>
  8067a0:	1003851e 	bne	r2,zero,8075b8 <__svfscanf_r+0x14c0>
  8067a4:	a8000015 	stw	zero,0(r21)
  8067a8:	a9000017 	ldw	r4,0(r21)
  8067ac:	08095b40 	call	8095b4 <iswspace>
  8067b0:	1003781e 	bne	r2,zero,807594 <__svfscanf_r+0x149c>
  8067b4:	d900a317 	ldw	r4,652(sp)
  8067b8:	d880a517 	ldw	r2,660(sp)
  8067bc:	8ce3883a 	add	r17,r17,r19
  8067c0:	213fffc4 	addi	r4,r4,-1
  8067c4:	d900a315 	stw	r4,652(sp)
  8067c8:	10000126 	beq	r2,zero,8067d0 <__svfscanf_r+0x6d8>
  8067cc:	ad400104 	addi	r21,r21,4
  8067d0:	0027883a 	mov	r19,zero
  8067d4:	80c00117 	ldw	r3,4(r16)
  8067d8:	00ffcb16 	blt	zero,r3,806708 <__svfscanf_r+0x610>
  8067dc:	b009883a 	mov	r4,r22
  8067e0:	800b883a 	mov	r5,r16
  8067e4:	0803b780 	call	803b78 <__srefill_r>
  8067e8:	103fc726 	beq	r2,zero,806708 <__svfscanf_r+0x610>
  8067ec:	983e971e 	bne	r19,zero,80624c <__svfscanf_r+0x154>
  8067f0:	b83e541e 	bne	r23,zero,806144 <__svfscanf_r+0x4c>
  8067f4:	d900a217 	ldw	r4,648(sp)
  8067f8:	a8000015 	stw	zero,0(r21)
  8067fc:	21000044 	addi	r4,r4,1
  806800:	d900a215 	stw	r4,648(sp)
  806804:	003e4f06 	br	806144 <__svfscanf_r+0x4c>
  806808:	d900a317 	ldw	r4,652(sp)
  80680c:	00805704 	movi	r2,348
  806810:	20ffffc4 	addi	r3,r4,-1
  806814:	10c1ed2e 	bgeu	r2,r3,806fcc <__svfscanf_r+0xed4>
  806818:	00805744 	movi	r2,349
  80681c:	21bfa8c4 	addi	r6,r4,-349
  806820:	9d41e014 	ori	r21,r19,1920
  806824:	d880a315 	stw	r2,652(sp)
  806828:	d8c04404 	addi	r3,sp,272
  80682c:	d8c0a615 	stw	r3,664(sp)
  806830:	182f883a 	mov	r23,r3
  806834:	d8009f15 	stw	zero,636(sp)
  806838:	d8009e15 	stw	zero,632(sp)
  80683c:	d8009d15 	stw	zero,628(sp)
  806840:	d8009c15 	stw	zero,624(sp)
  806844:	0039883a 	mov	fp,zero
  806848:	0025883a 	mov	r18,zero
  80684c:	80800017 	ldw	r2,0(r16)
  806850:	11400003 	ldbu	r5,0(r2)
  806854:	00801384 	movi	r2,78
  806858:	28fff544 	addi	r3,r5,-43
  80685c:	18c03fcc 	andi	r3,r3,255
  806860:	10c07d36 	bltu	r2,r3,806a58 <__svfscanf_r+0x960>
  806864:	18c5883a 	add	r2,r3,r3
  806868:	1085883a 	add	r2,r2,r2
  80686c:	00c02034 	movhi	r3,128
  806870:	18da2004 	addi	r3,r3,26752
  806874:	10c5883a 	add	r2,r2,r3
  806878:	11000017 	ldw	r4,0(r2)
  80687c:	2000683a 	jmp	r4
  806880:	00806a10 	cmplti	r2,zero,424
  806884:	00806a58 	cmpnei	r2,zero,425
  806888:	00806a10 	cmplti	r2,zero,424
  80688c:	00806ba4 	muli	r2,zero,430
  806890:	00806a58 	cmpnei	r2,zero,425
  806894:	00806bdc 	xori	r2,zero,431
  806898:	00806c10 	cmplti	r2,zero,432
  80689c:	00806c10 	cmplti	r2,zero,432
  8068a0:	00806c10 	cmplti	r2,zero,432
  8068a4:	00806c10 	cmplti	r2,zero,432
  8068a8:	00806c10 	cmplti	r2,zero,432
  8068ac:	00806c10 	cmplti	r2,zero,432
  8068b0:	00806c10 	cmplti	r2,zero,432
  8068b4:	00806c10 	cmplti	r2,zero,432
  8068b8:	00806c10 	cmplti	r2,zero,432
  8068bc:	00806a58 	cmpnei	r2,zero,425
  8068c0:	00806a58 	cmpnei	r2,zero,425
  8068c4:	00806a58 	cmpnei	r2,zero,425
  8068c8:	00806a58 	cmpnei	r2,zero,425
  8068cc:	00806a58 	cmpnei	r2,zero,425
  8068d0:	00806a58 	cmpnei	r2,zero,425
  8068d4:	00806a58 	cmpnei	r2,zero,425
  8068d8:	00806c30 	cmpltui	r2,zero,432
  8068dc:	00806a58 	cmpnei	r2,zero,425
  8068e0:	00806a58 	cmpnei	r2,zero,425
  8068e4:	00806a58 	cmpnei	r2,zero,425
  8068e8:	00806c40 	call	806c4 <__reset-0x77f93c>
  8068ec:	00806cdc 	xori	r2,zero,435
  8068f0:	00806a58 	cmpnei	r2,zero,425
  8068f4:	00806a58 	cmpnei	r2,zero,425
  8068f8:	00806cf8 	rdprs	r2,zero,435
  8068fc:	00806a58 	cmpnei	r2,zero,425
  806900:	00806a58 	cmpnei	r2,zero,425
  806904:	00806a58 	cmpnei	r2,zero,425
  806908:	00806a58 	cmpnei	r2,zero,425
  80690c:	00806d24 	muli	r2,zero,436
  806910:	00806a58 	cmpnei	r2,zero,425
  806914:	00806a58 	cmpnei	r2,zero,425
  806918:	00806a58 	cmpnei	r2,zero,425
  80691c:	00806a58 	cmpnei	r2,zero,425
  806920:	00806a58 	cmpnei	r2,zero,425
  806924:	00806d78 	rdprs	r2,zero,437
  806928:	00806a58 	cmpnei	r2,zero,425
  80692c:	00806a58 	cmpnei	r2,zero,425
  806930:	00806a58 	cmpnei	r2,zero,425
  806934:	00806a58 	cmpnei	r2,zero,425
  806938:	00806e88 	cmpgei	r2,zero,442
  80693c:	00806a58 	cmpnei	r2,zero,425
  806940:	00806a58 	cmpnei	r2,zero,425
  806944:	00806a58 	cmpnei	r2,zero,425
  806948:	00806a58 	cmpnei	r2,zero,425
  80694c:	00806a58 	cmpnei	r2,zero,425
  806950:	00806a58 	cmpnei	r2,zero,425
  806954:	00806a58 	cmpnei	r2,zero,425
  806958:	00806c30 	cmpltui	r2,zero,432
  80695c:	00806a58 	cmpnei	r2,zero,425
  806960:	00806a58 	cmpnei	r2,zero,425
  806964:	00806a58 	cmpnei	r2,zero,425
  806968:	00806c40 	call	806c4 <__reset-0x77f93c>
  80696c:	00806cdc 	xori	r2,zero,435
  806970:	00806a58 	cmpnei	r2,zero,425
  806974:	00806a58 	cmpnei	r2,zero,425
  806978:	00806cf8 	rdprs	r2,zero,435
  80697c:	00806a58 	cmpnei	r2,zero,425
  806980:	00806a58 	cmpnei	r2,zero,425
  806984:	00806a58 	cmpnei	r2,zero,425
  806988:	00806a58 	cmpnei	r2,zero,425
  80698c:	00806d24 	muli	r2,zero,436
  806990:	00806a58 	cmpnei	r2,zero,425
  806994:	00806a58 	cmpnei	r2,zero,425
  806998:	00806a58 	cmpnei	r2,zero,425
  80699c:	00806a58 	cmpnei	r2,zero,425
  8069a0:	00806a58 	cmpnei	r2,zero,425
  8069a4:	00806d78 	rdprs	r2,zero,437
  8069a8:	00806a58 	cmpnei	r2,zero,425
  8069ac:	00806a58 	cmpnei	r2,zero,425
  8069b0:	00806a58 	cmpnei	r2,zero,425
  8069b4:	00806a58 	cmpnei	r2,zero,425
  8069b8:	00806e88 	cmpgei	r2,zero,442
  8069bc:	d900a317 	ldw	r4,652(sp)
  8069c0:	00805704 	movi	r2,348
  8069c4:	20ffffc4 	addi	r3,r4,-1
  8069c8:	10c18c2e 	bgeu	r2,r3,806ffc <__svfscanf_r+0xf04>
  8069cc:	00805744 	movi	r2,349
  8069d0:	257fa8c4 	addi	r21,r4,-349
  8069d4:	9c836014 	ori	r18,r19,3456
  8069d8:	d880a315 	stw	r2,652(sp)
  8069dc:	0001a106 	br	807064 <__svfscanf_r+0xf6c>
  8069e0:	b009883a 	mov	r4,r22
  8069e4:	800b883a 	mov	r5,r16
  8069e8:	0803b780 	call	803b78 <__srefill_r>
  8069ec:	103eb226 	beq	r2,zero,8064b8 <__svfscanf_r+0x3c0>
  8069f0:	003e1606 	br	80624c <__svfscanf_r+0x154>
  8069f4:	01000284 	movi	r4,10
  8069f8:	00802074 	movhi	r2,129
  8069fc:	10b19a04 	addi	r2,r2,-14744
  806a00:	054000c4 	movi	r21,3
  806a04:	d900a115 	stw	r4,644(sp)
  806a08:	d880a015 	stw	r2,640(sp)
  806a0c:	003ea806 	br	8064b0 <__svfscanf_r+0x3b8>
  806a10:	a880200c 	andi	r2,r21,128
  806a14:	10001026 	beq	r2,zero,806a58 <__svfscanf_r+0x960>
  806a18:	00bfdfc4 	movi	r2,-129
  806a1c:	a8aa703a 	and	r21,r21,r2
  806a20:	b9400005 	stb	r5,0(r23)
  806a24:	bdc00044 	addi	r23,r23,1
  806a28:	80c00117 	ldw	r3,4(r16)
  806a2c:	8c400044 	addi	r17,r17,1
  806a30:	18bfffc4 	addi	r2,r3,-1
  806a34:	80800115 	stw	r2,4(r16)
  806a38:	0080610e 	bge	zero,r2,806bc0 <__svfscanf_r+0xac8>
  806a3c:	80800017 	ldw	r2,0(r16)
  806a40:	10800044 	addi	r2,r2,1
  806a44:	80800015 	stw	r2,0(r16)
  806a48:	d880a317 	ldw	r2,652(sp)
  806a4c:	10bfffc4 	addi	r2,r2,-1
  806a50:	d880a315 	stw	r2,652(sp)
  806a54:	103f7d1e 	bne	r2,zero,80684c <__svfscanf_r+0x754>
  806a58:	d8c09e17 	ldw	r3,632(sp)
  806a5c:	18000226 	beq	r3,zero,806a68 <__svfscanf_r+0x970>
  806a60:	00bfbfc4 	movi	r2,-257
  806a64:	a8aa703a 	and	r21,r21,r2
  806a68:	90ffffc4 	addi	r3,r18,-1
  806a6c:	00800044 	movi	r2,1
  806a70:	10c0cd2e 	bgeu	r2,r3,806da8 <__svfscanf_r+0xcb0>
  806a74:	e1003fcc 	andi	r4,fp,255
  806a78:	2100201c 	xori	r4,r4,128
  806a7c:	213fe004 	addi	r4,r4,-128
  806a80:	20ffffc4 	addi	r3,r4,-1
  806a84:	00800184 	movi	r2,6
  806a88:	10c01736 	bltu	r2,r3,806ae8 <__svfscanf_r+0x9f0>
  806a8c:	00c00084 	movi	r3,2
  806a90:	1900880e 	bge	r3,r4,806cb4 <__svfscanf_r+0xbbc>
  806a94:	008000c4 	movi	r2,3
  806a98:	1100130e 	bge	r2,r4,806ae8 <__svfscanf_r+0x9f0>
  806a9c:	e4ffffc4 	addi	r19,fp,-1
  806aa0:	b825883a 	mov	r18,r23
  806aa4:	94bfffc4 	addi	r18,r18,-1
  806aa8:	91400007 	ldb	r5,0(r18)
  806aac:	b009883a 	mov	r4,r22
  806ab0:	800d883a 	mov	r6,r16
  806ab4:	080cc880 	call	80cc88 <_ungetc_r>
  806ab8:	9cffffc4 	addi	r19,r19,-1
  806abc:	98c03fcc 	andi	r3,r19,255
  806ac0:	18c0201c 	xori	r3,r3,128
  806ac4:	18ffe004 	addi	r3,r3,-128
  806ac8:	00800084 	movi	r2,2
  806acc:	18bff51e 	bne	r3,r2,806aa4 <__svfscanf_r+0x9ac>
  806ad0:	e0bfff04 	addi	r2,fp,-4
  806ad4:	10803fcc 	andi	r2,r2,255
  806ad8:	b887c83a 	sub	r3,r23,r2
  806adc:	8885c83a 	sub	r2,r17,r2
  806ae0:	147fffc4 	addi	r17,r2,-1
  806ae4:	1dffffc4 	addi	r23,r3,-1
  806ae8:	a880400c 	andi	r2,r21,256
  806aec:	10001226 	beq	r2,zero,806b38 <__svfscanf_r+0xa40>
  806af0:	a881000c 	andi	r2,r21,1024
  806af4:	1000651e 	bne	r2,zero,806c8c <__svfscanf_r+0xb94>
  806af8:	bdffffc4 	addi	r23,r23,-1
  806afc:	b9400007 	ldb	r5,0(r23)
  806b00:	00801944 	movi	r2,101
  806b04:	8c7fffc4 	addi	r17,r17,-1
  806b08:	28800826 	beq	r5,r2,806b2c <__svfscanf_r+0xa34>
  806b0c:	00801144 	movi	r2,69
  806b10:	28800626 	beq	r5,r2,806b2c <__svfscanf_r+0xa34>
  806b14:	bdffffc4 	addi	r23,r23,-1
  806b18:	b009883a 	mov	r4,r22
  806b1c:	800d883a 	mov	r6,r16
  806b20:	080cc880 	call	80cc88 <_ungetc_r>
  806b24:	b9400007 	ldb	r5,0(r23)
  806b28:	8c7fffc4 	addi	r17,r17,-1
  806b2c:	b009883a 	mov	r4,r22
  806b30:	800d883a 	mov	r6,r16
  806b34:	080cc880 	call	80cc88 <_ungetc_r>
  806b38:	a880040c 	andi	r2,r21,16
  806b3c:	103d811e 	bne	r2,zero,806144 <__svfscanf_r+0x4c>
  806b40:	a8c1800c 	andi	r3,r21,1536
  806b44:	00810004 	movi	r2,1024
  806b48:	b8000005 	stb	zero,0(r23)
  806b4c:	1880bb26 	beq	r3,r2,806e3c <__svfscanf_r+0xd44>
  806b50:	d8809d17 	ldw	r2,628(sp)
  806b54:	1000a61e 	bne	r2,zero,806df0 <__svfscanf_r+0xcf8>
  806b58:	d940a617 	ldw	r5,664(sp)
  806b5c:	b009883a 	mov	r4,r22
  806b60:	000d883a 	mov	r6,zero
  806b64:	080aac40 	call	80aac4 <_strtod_r>
  806b68:	a900004c 	andi	r4,r21,1
  806b6c:	2009003a 	cmpeq	r4,r4,zero
  806b70:	1025883a 	mov	r18,r2
  806b74:	1827883a 	mov	r19,r3
  806b78:	2000951e 	bne	r4,zero,806dd0 <__svfscanf_r+0xcd8>
  806b7c:	d8c0a417 	ldw	r3,656(sp)
  806b80:	18800017 	ldw	r2,0(r3)
  806b84:	1d400104 	addi	r21,r3,4
  806b88:	14c00115 	stw	r19,4(r2)
  806b8c:	14800015 	stw	r18,0(r2)
  806b90:	d8c0a217 	ldw	r3,648(sp)
  806b94:	dd40a415 	stw	r21,656(sp)
  806b98:	18c00044 	addi	r3,r3,1
  806b9c:	d8c0a215 	stw	r3,648(sp)
  806ba0:	003d6806 	br	806144 <__svfscanf_r+0x4c>
  806ba4:	a880800c 	andi	r2,r21,512
  806ba8:	103fab26 	beq	r2,zero,806a58 <__svfscanf_r+0x960>
  806bac:	d9009e17 	ldw	r4,632(sp)
  806bb0:	00bf5fc4 	movi	r2,-641
  806bb4:	a8aa703a 	and	r21,r21,r2
  806bb8:	d9009f15 	stw	r4,636(sp)
  806bbc:	003f9806 	br	806a20 <__svfscanf_r+0x928>
  806bc0:	b009883a 	mov	r4,r22
  806bc4:	800b883a 	mov	r5,r16
  806bc8:	d980a715 	stw	r6,668(sp)
  806bcc:	0803b780 	call	803b78 <__srefill_r>
  806bd0:	d980a717 	ldw	r6,668(sp)
  806bd4:	103f9c26 	beq	r2,zero,806a48 <__svfscanf_r+0x950>
  806bd8:	003f9f06 	br	806a58 <__svfscanf_r+0x960>
  806bdc:	a880400c 	andi	r2,r21,256
  806be0:	10000b26 	beq	r2,zero,806c10 <__svfscanf_r+0xb18>
  806be4:	00bfdfc4 	movi	r2,-129
  806be8:	a8aa703a 	and	r21,r21,r2
  806bec:	d8809e17 	ldw	r2,632(sp)
  806bf0:	10800044 	addi	r2,r2,1
  806bf4:	d8809e15 	stw	r2,632(sp)
  806bf8:	303f8b26 	beq	r6,zero,806a28 <__svfscanf_r+0x930>
  806bfc:	d8c0a317 	ldw	r3,652(sp)
  806c00:	31bfffc4 	addi	r6,r6,-1
  806c04:	18c00044 	addi	r3,r3,1
  806c08:	d8c0a315 	stw	r3,652(sp)
  806c0c:	003f8606 	br	806a28 <__svfscanf_r+0x930>
  806c10:	e0803fcc 	andi	r2,fp,255
  806c14:	1080201c 	xori	r2,r2,128
  806c18:	10bfe004 	addi	r2,r2,-128
  806c1c:	9085883a 	add	r2,r18,r2
  806c20:	103f8d1e 	bne	r2,zero,806a58 <__svfscanf_r+0x960>
  806c24:	00bf9fc4 	movi	r2,-385
  806c28:	a8aa703a 	and	r21,r21,r2
  806c2c:	003f7c06 	br	806a20 <__svfscanf_r+0x928>
  806c30:	00800044 	movi	r2,1
  806c34:	90bf881e 	bne	r18,r2,806a58 <__svfscanf_r+0x960>
  806c38:	04800084 	movi	r18,2
  806c3c:	003f7806 	br	806a20 <__svfscanf_r+0x928>
  806c40:	a8c1400c 	andi	r3,r21,1280
  806c44:	00810004 	movi	r2,1024
  806c48:	18800426 	beq	r3,r2,806c5c <__svfscanf_r+0xb64>
  806c4c:	a884703a 	and	r2,r21,r2
  806c50:	103f8126 	beq	r2,zero,806a58 <__svfscanf_r+0x960>
  806c54:	d8809e17 	ldw	r2,632(sp)
  806c58:	103f8326 	beq	r2,zero,806a68 <__svfscanf_r+0x970>
  806c5c:	a880800c 	andi	r2,r21,512
  806c60:	1000051e 	bne	r2,zero,806c78 <__svfscanf_r+0xb80>
  806c64:	d8c09e17 	ldw	r3,632(sp)
  806c68:	d9009f17 	ldw	r4,636(sp)
  806c6c:	ddc09c15 	stw	r23,624(sp)
  806c70:	1907c83a 	sub	r3,r3,r4
  806c74:	d8c09d15 	stw	r3,628(sp)
  806c78:	00be7fc4 	movi	r2,-1537
  806c7c:	a884703a 	and	r2,r21,r2
  806c80:	15406014 	ori	r21,r2,384
  806c84:	d8009e15 	stw	zero,632(sp)
  806c88:	003f6506 	br	806a20 <__svfscanf_r+0x928>
  806c8c:	d900a617 	ldw	r4,664(sp)
  806c90:	25fd4e2e 	bgeu	r4,r23,8061cc <__svfscanf_r+0xd4>
  806c94:	bdffffc4 	addi	r23,r23,-1
  806c98:	b9400007 	ldb	r5,0(r23)
  806c9c:	b009883a 	mov	r4,r22
  806ca0:	800d883a 	mov	r6,r16
  806ca4:	080cc880 	call	80cc88 <_ungetc_r>
  806ca8:	d880a617 	ldw	r2,664(sp)
  806cac:	15fff936 	bltu	r2,r23,806c94 <__svfscanf_r+0xb9c>
  806cb0:	003d4606 	br	8061cc <__svfscanf_r+0xd4>
  806cb4:	d900a617 	ldw	r4,664(sp)
  806cb8:	25fd442e 	bgeu	r4,r23,8061cc <__svfscanf_r+0xd4>
  806cbc:	bdffffc4 	addi	r23,r23,-1
  806cc0:	b9400007 	ldb	r5,0(r23)
  806cc4:	b009883a 	mov	r4,r22
  806cc8:	800d883a 	mov	r6,r16
  806ccc:	080cc880 	call	80cc88 <_ungetc_r>
  806cd0:	d8c0a617 	ldw	r3,664(sp)
  806cd4:	1dfff936 	bltu	r3,r23,806cbc <__svfscanf_r+0xbc4>
  806cd8:	003d3c06 	br	8061cc <__svfscanf_r+0xd4>
  806cdc:	e0c03fcc 	andi	r3,fp,255
  806ce0:	18c0201c 	xori	r3,r3,128
  806ce4:	18ffe004 	addi	r3,r3,-128
  806ce8:	00800084 	movi	r2,2
  806cec:	18bf5a1e 	bne	r3,r2,806a58 <__svfscanf_r+0x960>
  806cf0:	070000c4 	movi	fp,3
  806cf4:	003f4a06 	br	806a20 <__svfscanf_r+0x928>
  806cf8:	e0c03fcc 	andi	r3,fp,255
  806cfc:	18c0201c 	xori	r3,r3,128
  806d00:	18ffe004 	addi	r3,r3,-128
  806d04:	1800231e 	bne	r3,zero,806d94 <__svfscanf_r+0xc9c>
  806d08:	a8c1c00c 	andi	r3,r21,1792
  806d0c:	0081c004 	movi	r2,1792
  806d10:	18bf511e 	bne	r3,r2,806a58 <__svfscanf_r+0x960>
  806d14:	00be1fc4 	movi	r2,-1921
  806d18:	a8aa703a 	and	r21,r21,r2
  806d1c:	07000044 	movi	fp,1
  806d20:	003f3f06 	br	806a20 <__svfscanf_r+0x928>
  806d24:	9000101e 	bne	r18,zero,806d68 <__svfscanf_r+0xc70>
  806d28:	a8c1c00c 	andi	r3,r21,1792
  806d2c:	0081c004 	movi	r2,1792
  806d30:	18800926 	beq	r3,r2,806d58 <__svfscanf_r+0xc60>
  806d34:	e0c03fcc 	andi	r3,fp,255
  806d38:	18c0201c 	xori	r3,r3,128
  806d3c:	18ffe004 	addi	r3,r3,-128
  806d40:	00800044 	movi	r2,1
  806d44:	18800226 	beq	r3,r2,806d50 <__svfscanf_r+0xc58>
  806d48:	00800104 	movi	r2,4
  806d4c:	18bf421e 	bne	r3,r2,806a58 <__svfscanf_r+0x960>
  806d50:	e7000044 	addi	fp,fp,1
  806d54:	003f3206 	br	806a20 <__svfscanf_r+0x928>
  806d58:	00be1fc4 	movi	r2,-1921
  806d5c:	a8aa703a 	and	r21,r21,r2
  806d60:	04800044 	movi	r18,1
  806d64:	003f2e06 	br	806a20 <__svfscanf_r+0x928>
  806d68:	00800084 	movi	r2,2
  806d6c:	90bff11e 	bne	r18,r2,806d34 <__svfscanf_r+0xc3c>
  806d70:	048000c4 	movi	r18,3
  806d74:	003f2a06 	br	806a20 <__svfscanf_r+0x928>
  806d78:	e0c03fcc 	andi	r3,fp,255
  806d7c:	18c0201c 	xori	r3,r3,128
  806d80:	18ffe004 	addi	r3,r3,-128
  806d84:	00800184 	movi	r2,6
  806d88:	18bf331e 	bne	r3,r2,806a58 <__svfscanf_r+0x960>
  806d8c:	070001c4 	movi	fp,7
  806d90:	003f2306 	br	806a20 <__svfscanf_r+0x928>
  806d94:	008000c4 	movi	r2,3
  806d98:	18bfed26 	beq	r3,r2,806d50 <__svfscanf_r+0xc58>
  806d9c:	00800144 	movi	r2,5
  806da0:	18bfeb26 	beq	r3,r2,806d50 <__svfscanf_r+0xc58>
  806da4:	003f2c06 	br	806a58 <__svfscanf_r+0x960>
  806da8:	d900a617 	ldw	r4,664(sp)
  806dac:	25fd072e 	bgeu	r4,r23,8061cc <__svfscanf_r+0xd4>
  806db0:	bdffffc4 	addi	r23,r23,-1
  806db4:	b9400007 	ldb	r5,0(r23)
  806db8:	b009883a 	mov	r4,r22
  806dbc:	800d883a 	mov	r6,r16
  806dc0:	080cc880 	call	80cc88 <_ungetc_r>
  806dc4:	d880a617 	ldw	r2,664(sp)
  806dc8:	15fff936 	bltu	r2,r23,806db0 <__svfscanf_r+0xcb8>
  806dcc:	003cff06 	br	8061cc <__svfscanf_r+0xd4>
  806dd0:	a880008c 	andi	r2,r21,2
  806dd4:	10002026 	beq	r2,zero,806e58 <__svfscanf_r+0xd60>
  806dd8:	d900a417 	ldw	r4,656(sp)
  806ddc:	20800017 	ldw	r2,0(r4)
  806de0:	25400104 	addi	r21,r4,4
  806de4:	10c00115 	stw	r3,4(r2)
  806de8:	14800015 	stw	r18,0(r2)
  806dec:	003f6806 	br	806b90 <__svfscanf_r+0xa98>
  806df0:	d8c09c17 	ldw	r3,624(sp)
  806df4:	b009883a 	mov	r4,r22
  806df8:	000d883a 	mov	r6,zero
  806dfc:	19400044 	addi	r5,r3,1
  806e00:	01c00284 	movi	r7,10
  806e04:	080c0e80 	call	80c0e8 <_strtol_r>
  806e08:	d9009d17 	ldw	r4,628(sp)
  806e0c:	110dc83a 	sub	r6,r2,r4
  806e10:	d8c0a617 	ldw	r3,664(sp)
  806e14:	d9009c17 	ldw	r4,624(sp)
  806e18:	188054c4 	addi	r2,r3,339
  806e1c:	20800236 	bltu	r4,r2,806e28 <__svfscanf_r+0xd30>
  806e20:	18805484 	addi	r2,r3,338
  806e24:	d8809c15 	stw	r2,624(sp)
  806e28:	d9009c17 	ldw	r4,624(sp)
  806e2c:	01402074 	movhi	r5,129
  806e30:	29534e04 	addi	r5,r5,19768
  806e34:	0803e280 	call	803e28 <sprintf>
  806e38:	003f4706 	br	806b58 <__svfscanf_r+0xa60>
  806e3c:	d8c09e17 	ldw	r3,632(sp)
  806e40:	d9009f17 	ldw	r4,636(sp)
  806e44:	1905c83a 	sub	r2,r3,r4
  806e48:	103f4326 	beq	r2,zero,806b58 <__svfscanf_r+0xa60>
  806e4c:	008dc83a 	sub	r6,zero,r2
  806e50:	ddc09c15 	stw	r23,624(sp)
  806e54:	003fee06 	br	806e10 <__svfscanf_r+0xd18>
  806e58:	d880a417 	ldw	r2,656(sp)
  806e5c:	9009883a 	mov	r4,r18
  806e60:	180b883a 	mov	r5,r3
  806e64:	15c00017 	ldw	r23,0(r2)
  806e68:	15400104 	addi	r21,r2,4
  806e6c:	080a8c80 	call	80a8c8 <__isnand>
  806e70:	10021c1e 	bne	r2,zero,8076e4 <__svfscanf_r+0x15ec>
  806e74:	980b883a 	mov	r5,r19
  806e78:	9009883a 	mov	r4,r18
  806e7c:	080f8cc0 	call	80f8cc <__truncdfsf2>
  806e80:	b8800015 	stw	r2,0(r23)
  806e84:	003f4206 	br	806b90 <__svfscanf_r+0xa98>
  806e88:	e0c03fcc 	andi	r3,fp,255
  806e8c:	18c0201c 	xori	r3,r3,128
  806e90:	18ffe004 	addi	r3,r3,-128
  806e94:	008001c4 	movi	r2,7
  806e98:	18beef1e 	bne	r3,r2,806a58 <__svfscanf_r+0x960>
  806e9c:	07000204 	movi	fp,8
  806ea0:	003edf06 	br	806a20 <__svfscanf_r+0x928>
  806ea4:	d900a317 	ldw	r4,652(sp)
  806ea8:	208002a4 	muli	r2,r4,10
  806eac:	1145883a 	add	r2,r2,r5
  806eb0:	10bff404 	addi	r2,r2,-48
  806eb4:	d880a315 	stw	r2,652(sp)
  806eb8:	003ceb06 	br	806268 <__svfscanf_r+0x170>
  806ebc:	9880040c 	andi	r2,r19,16
  806ec0:	10001426 	beq	r2,zero,806f14 <__svfscanf_r+0xe1c>
  806ec4:	0027883a 	mov	r19,zero
  806ec8:	00000906 	br	806ef0 <__svfscanf_r+0xdf8>
  806ecc:	80c00117 	ldw	r3,4(r16)
  806ed0:	d880a317 	ldw	r2,652(sp)
  806ed4:	29800044 	addi	r6,r5,1
  806ed8:	18ffffc4 	addi	r3,r3,-1
  806edc:	9cc00044 	addi	r19,r19,1
  806ee0:	81800015 	stw	r6,0(r16)
  806ee4:	80c00115 	stw	r3,4(r16)
  806ee8:	14fdf726 	beq	r2,r19,8066c8 <__svfscanf_r+0x5d0>
  806eec:	00c02c0e 	bge	zero,r3,806fa0 <__svfscanf_r+0xea8>
  806ef0:	81400017 	ldw	r5,0(r16)
  806ef4:	90800017 	ldw	r2,0(r18)
  806ef8:	28c00003 	ldbu	r3,0(r5)
  806efc:	1887883a 	add	r3,r3,r2
  806f00:	19000003 	ldbu	r4,0(r3)
  806f04:	2100020c 	andi	r4,r4,8
  806f08:	203ff026 	beq	r4,zero,806ecc <__svfscanf_r+0xdd4>
  806f0c:	8ce3883a 	add	r17,r17,r19
  806f10:	003c8c06 	br	806144 <__svfscanf_r+0x4c>
  806f14:	d8c0a417 	ldw	r3,656(sp)
  806f18:	1d400017 	ldw	r21,0(r3)
  806f1c:	a827883a 	mov	r19,r21
  806f20:	00000e06 	br	806f5c <__svfscanf_r+0xe64>
  806f24:	80800117 	ldw	r2,4(r16)
  806f28:	d900a317 	ldw	r4,652(sp)
  806f2c:	29800044 	addi	r6,r5,1
  806f30:	10ffffc4 	addi	r3,r2,-1
  806f34:	213fffc4 	addi	r4,r4,-1
  806f38:	d900a315 	stw	r4,652(sp)
  806f3c:	80c00115 	stw	r3,4(r16)
  806f40:	28800003 	ldbu	r2,0(r5)
  806f44:	98800005 	stb	r2,0(r19)
  806f48:	81800015 	stw	r6,0(r16)
  806f4c:	9cc00044 	addi	r19,r19,1
  806f50:	20000926 	beq	r4,zero,806f78 <__svfscanf_r+0xe80>
  806f54:	80800117 	ldw	r2,4(r16)
  806f58:	0080170e 	bge	zero,r2,806fb8 <__svfscanf_r+0xec0>
  806f5c:	81400017 	ldw	r5,0(r16)
  806f60:	90800017 	ldw	r2,0(r18)
  806f64:	28c00003 	ldbu	r3,0(r5)
  806f68:	1887883a 	add	r3,r3,r2
  806f6c:	19000003 	ldbu	r4,0(r3)
  806f70:	2100020c 	andi	r4,r4,8
  806f74:	203feb26 	beq	r4,zero,806f24 <__svfscanf_r+0xe2c>
  806f78:	9d45c83a 	sub	r2,r19,r21
  806f7c:	d8c0a217 	ldw	r3,648(sp)
  806f80:	88a3883a 	add	r17,r17,r2
  806f84:	d880a417 	ldw	r2,656(sp)
  806f88:	18c00044 	addi	r3,r3,1
  806f8c:	d8c0a215 	stw	r3,648(sp)
  806f90:	10800104 	addi	r2,r2,4
  806f94:	d880a415 	stw	r2,656(sp)
  806f98:	98000005 	stb	zero,0(r19)
  806f9c:	003c6906 	br	806144 <__svfscanf_r+0x4c>
  806fa0:	b009883a 	mov	r4,r22
  806fa4:	800b883a 	mov	r5,r16
  806fa8:	0803b780 	call	803b78 <__srefill_r>
  806fac:	103fd026 	beq	r2,zero,806ef0 <__svfscanf_r+0xdf8>
  806fb0:	8ce3883a 	add	r17,r17,r19
  806fb4:	003c6306 	br	806144 <__svfscanf_r+0x4c>
  806fb8:	b009883a 	mov	r4,r22
  806fbc:	800b883a 	mov	r5,r16
  806fc0:	0803b780 	call	803b78 <__srefill_r>
  806fc4:	103fe526 	beq	r2,zero,806f5c <__svfscanf_r+0xe64>
  806fc8:	003feb06 	br	806f78 <__svfscanf_r+0xe80>
  806fcc:	d900a317 	ldw	r4,652(sp)
  806fd0:	9d41e014 	ori	r21,r19,1920
  806fd4:	2000821e 	bne	r4,zero,8071e0 <__svfscanf_r+0x10e8>
  806fd8:	d8c04404 	addi	r3,sp,272
  806fdc:	182f883a 	mov	r23,r3
  806fe0:	0039883a 	mov	fp,zero
  806fe4:	d8c0a615 	stw	r3,664(sp)
  806fe8:	d8009c15 	stw	zero,624(sp)
  806fec:	d8009d15 	stw	zero,628(sp)
  806ff0:	d8009f15 	stw	zero,636(sp)
  806ff4:	d8009e15 	stw	zero,632(sp)
  806ff8:	003e9e06 	br	806a74 <__svfscanf_r+0x97c>
  806ffc:	d900a317 	ldw	r4,652(sp)
  807000:	9c836014 	ori	r18,r19,3456
  807004:	2000161e 	bne	r4,zero,807060 <__svfscanf_r+0xf68>
  807008:	d8804404 	addi	r2,sp,272
  80700c:	d880a615 	stw	r2,664(sp)
  807010:	002f883a 	mov	r23,zero
  807014:	1027883a 	mov	r19,r2
  807018:	9080400c 	andi	r2,r18,256
  80701c:	10000926 	beq	r2,zero,807044 <__svfscanf_r+0xf4c>
  807020:	d8c0a617 	ldw	r3,664(sp)
  807024:	1cc0052e 	bgeu	r3,r19,80703c <__svfscanf_r+0xf44>
  807028:	9cffffc4 	addi	r19,r19,-1
  80702c:	99400007 	ldb	r5,0(r19)
  807030:	b009883a 	mov	r4,r22
  807034:	800d883a 	mov	r6,r16
  807038:	080cc880 	call	80cc88 <_ungetc_r>
  80703c:	d900a617 	ldw	r4,664(sp)
  807040:	24fc6226 	beq	r4,r19,8061cc <__svfscanf_r+0xd4>
  807044:	9080040c 	andi	r2,r18,16
  807048:	10006726 	beq	r2,zero,8071e8 <__svfscanf_r+0x10f0>
  80704c:	d8c0a617 	ldw	r3,664(sp)
  807050:	98c5c83a 	sub	r2,r19,r3
  807054:	b885883a 	add	r2,r23,r2
  807058:	88a3883a 	add	r17,r17,r2
  80705c:	003c3906 	br	806144 <__svfscanf_r+0x4c>
  807060:	002b883a 	mov	r21,zero
  807064:	d8c04404 	addi	r3,sp,272
  807068:	d8c0a615 	stw	r3,664(sp)
  80706c:	002f883a 	mov	r23,zero
  807070:	1827883a 	mov	r19,r3
  807074:	81800017 	ldw	r6,0(r16)
  807078:	00c01344 	movi	r3,77
  80707c:	31400003 	ldbu	r5,0(r6)
  807080:	28bff544 	addi	r2,r5,-43
  807084:	10803fcc 	andi	r2,r2,255
  807088:	18bfe336 	bltu	r3,r2,807018 <__svfscanf_r+0xf20>
  80708c:	1085883a 	add	r2,r2,r2
  807090:	1085883a 	add	r2,r2,r2
  807094:	00c02034 	movhi	r3,128
  807098:	18dc2a04 	addi	r3,r3,28840
  80709c:	10c5883a 	add	r2,r2,r3
  8070a0:	11000017 	ldw	r4,0(r2)
  8070a4:	2000683a 	jmp	r4
  8070a8:	0080723c 	xorhi	r2,zero,456
  8070ac:	00807018 	cmpnei	r2,zero,448
  8070b0:	0080723c 	xorhi	r2,zero,456
  8070b4:	00807018 	cmpnei	r2,zero,448
  8070b8:	00807018 	cmpnei	r2,zero,448
  8070bc:	00807280 	call	80728 <__reset-0x77f8d8>
  8070c0:	0080737c 	xorhi	r2,zero,461
  8070c4:	0080737c 	xorhi	r2,zero,461
  8070c8:	0080737c 	xorhi	r2,zero,461
  8070cc:	0080737c 	xorhi	r2,zero,461
  8070d0:	0080737c 	xorhi	r2,zero,461
  8070d4:	0080737c 	xorhi	r2,zero,461
  8070d8:	0080737c 	xorhi	r2,zero,461
  8070dc:	008073a4 	muli	r2,zero,462
  8070e0:	008073a4 	muli	r2,zero,462
  8070e4:	00807018 	cmpnei	r2,zero,448
  8070e8:	00807018 	cmpnei	r2,zero,448
  8070ec:	00807018 	cmpnei	r2,zero,448
  8070f0:	00807018 	cmpnei	r2,zero,448
  8070f4:	00807018 	cmpnei	r2,zero,448
  8070f8:	00807018 	cmpnei	r2,zero,448
  8070fc:	00807018 	cmpnei	r2,zero,448
  807100:	008073d4 	movui	r2,463
  807104:	008073d4 	movui	r2,463
  807108:	008073d4 	movui	r2,463
  80710c:	008073d4 	movui	r2,463
  807110:	008073d4 	movui	r2,463
  807114:	008073d4 	movui	r2,463
  807118:	00807018 	cmpnei	r2,zero,448
  80711c:	00807018 	cmpnei	r2,zero,448
  807120:	00807018 	cmpnei	r2,zero,448
  807124:	00807018 	cmpnei	r2,zero,448
  807128:	00807018 	cmpnei	r2,zero,448
  80712c:	00807018 	cmpnei	r2,zero,448
  807130:	00807018 	cmpnei	r2,zero,448
  807134:	00807018 	cmpnei	r2,zero,448
  807138:	00807018 	cmpnei	r2,zero,448
  80713c:	00807018 	cmpnei	r2,zero,448
  807140:	00807018 	cmpnei	r2,zero,448
  807144:	00807018 	cmpnei	r2,zero,448
  807148:	00807018 	cmpnei	r2,zero,448
  80714c:	00807018 	cmpnei	r2,zero,448
  807150:	00807018 	cmpnei	r2,zero,448
  807154:	00807018 	cmpnei	r2,zero,448
  807158:	00807018 	cmpnei	r2,zero,448
  80715c:	008073e4 	muli	r2,zero,463
  807160:	00807018 	cmpnei	r2,zero,448
  807164:	00807018 	cmpnei	r2,zero,448
  807168:	00807018 	cmpnei	r2,zero,448
  80716c:	00807018 	cmpnei	r2,zero,448
  807170:	00807018 	cmpnei	r2,zero,448
  807174:	00807018 	cmpnei	r2,zero,448
  807178:	00807018 	cmpnei	r2,zero,448
  80717c:	00807018 	cmpnei	r2,zero,448
  807180:	008073d4 	movui	r2,463
  807184:	008073d4 	movui	r2,463
  807188:	008073d4 	movui	r2,463
  80718c:	008073d4 	movui	r2,463
  807190:	008073d4 	movui	r2,463
  807194:	008073d4 	movui	r2,463
  807198:	00807018 	cmpnei	r2,zero,448
  80719c:	00807018 	cmpnei	r2,zero,448
  8071a0:	00807018 	cmpnei	r2,zero,448
  8071a4:	00807018 	cmpnei	r2,zero,448
  8071a8:	00807018 	cmpnei	r2,zero,448
  8071ac:	00807018 	cmpnei	r2,zero,448
  8071b0:	00807018 	cmpnei	r2,zero,448
  8071b4:	00807018 	cmpnei	r2,zero,448
  8071b8:	00807018 	cmpnei	r2,zero,448
  8071bc:	00807018 	cmpnei	r2,zero,448
  8071c0:	00807018 	cmpnei	r2,zero,448
  8071c4:	00807018 	cmpnei	r2,zero,448
  8071c8:	00807018 	cmpnei	r2,zero,448
  8071cc:	00807018 	cmpnei	r2,zero,448
  8071d0:	00807018 	cmpnei	r2,zero,448
  8071d4:	00807018 	cmpnei	r2,zero,448
  8071d8:	00807018 	cmpnei	r2,zero,448
  8071dc:	008073e4 	muli	r2,zero,463
  8071e0:	000d883a 	mov	r6,zero
  8071e4:	003d9006 	br	806828 <__svfscanf_r+0x730>
  8071e8:	98000005 	stb	zero,0(r19)
  8071ec:	d8c0a017 	ldw	r3,640(sp)
  8071f0:	d940a617 	ldw	r5,664(sp)
  8071f4:	d9c0a117 	ldw	r7,644(sp)
  8071f8:	b009883a 	mov	r4,r22
  8071fc:	000d883a 	mov	r6,zero
  807200:	183ee83a 	callr	r3
  807204:	1007883a 	mov	r3,r2
  807208:	9080080c 	andi	r2,r18,32
  80720c:	10004d1e 	bne	r2,zero,807344 <__svfscanf_r+0x124c>
  807210:	9080010c 	andi	r2,r18,4
  807214:	10003426 	beq	r2,zero,8072e8 <__svfscanf_r+0x11f0>
  807218:	d900a417 	ldw	r4,656(sp)
  80721c:	20800017 	ldw	r2,0(r4)
  807220:	21000104 	addi	r4,r4,4
  807224:	d900a415 	stw	r4,656(sp)
  807228:	10c0000d 	sth	r3,0(r2)
  80722c:	d880a217 	ldw	r2,648(sp)
  807230:	10800044 	addi	r2,r2,1
  807234:	d880a215 	stw	r2,648(sp)
  807238:	003f8406 	br	80704c <__svfscanf_r+0xf54>
  80723c:	9080200c 	andi	r2,r18,128
  807240:	103f7526 	beq	r2,zero,807018 <__svfscanf_r+0xf20>
  807244:	00bfdfc4 	movi	r2,-129
  807248:	90a4703a 	and	r18,r18,r2
  80724c:	99400005 	stb	r5,0(r19)
  807250:	9cc00044 	addi	r19,r19,1
  807254:	80c00117 	ldw	r3,4(r16)
  807258:	18ffffc4 	addi	r3,r3,-1
  80725c:	80c00115 	stw	r3,4(r16)
  807260:	00c0130e 	bge	zero,r3,8072b0 <__svfscanf_r+0x11b8>
  807264:	31800044 	addi	r6,r6,1
  807268:	81800015 	stw	r6,0(r16)
  80726c:	d880a317 	ldw	r2,652(sp)
  807270:	10bfffc4 	addi	r2,r2,-1
  807274:	d880a315 	stw	r2,652(sp)
  807278:	103f7e1e 	bne	r2,zero,807074 <__svfscanf_r+0xf7c>
  80727c:	003f6606 	br	807018 <__svfscanf_r+0xf20>
  807280:	9082000c 	andi	r2,r18,2048
  807284:	103ff126 	beq	r2,zero,80724c <__svfscanf_r+0x1154>
  807288:	d8c0a117 	ldw	r3,644(sp)
  80728c:	1800031e 	bne	r3,zero,80729c <__svfscanf_r+0x11a4>
  807290:	01000204 	movi	r4,8
  807294:	94808014 	ori	r18,r18,512
  807298:	d900a115 	stw	r4,644(sp)
  80729c:	9081000c 	andi	r2,r18,1024
  8072a0:	10000826 	beq	r2,zero,8072c4 <__svfscanf_r+0x11cc>
  8072a4:	00be9fc4 	movi	r2,-1409
  8072a8:	90a4703a 	and	r18,r18,r2
  8072ac:	003fe706 	br	80724c <__svfscanf_r+0x1154>
  8072b0:	b009883a 	mov	r4,r22
  8072b4:	800b883a 	mov	r5,r16
  8072b8:	0803b780 	call	803b78 <__srefill_r>
  8072bc:	103feb26 	beq	r2,zero,80726c <__svfscanf_r+0x1174>
  8072c0:	003f5506 	br	807018 <__svfscanf_r+0xf20>
  8072c4:	a8000426 	beq	r21,zero,8072d8 <__svfscanf_r+0x11e0>
  8072c8:	d880a317 	ldw	r2,652(sp)
  8072cc:	ad7fffc4 	addi	r21,r21,-1
  8072d0:	10800044 	addi	r2,r2,1
  8072d4:	d880a315 	stw	r2,652(sp)
  8072d8:	00bf1fc4 	movi	r2,-897
  8072dc:	90a4703a 	and	r18,r18,r2
  8072e0:	bdc00044 	addi	r23,r23,1
  8072e4:	003fdb06 	br	807254 <__svfscanf_r+0x115c>
  8072e8:	9080004c 	andi	r2,r18,1
  8072ec:	1005003a 	cmpeq	r2,r2,zero
  8072f0:	10001426 	beq	r2,zero,807344 <__svfscanf_r+0x124c>
  8072f4:	9080008c 	andi	r2,r18,2
  8072f8:	10001226 	beq	r2,zero,807344 <__svfscanf_r+0x124c>
  8072fc:	d8c0a017 	ldw	r3,640(sp)
  807300:	00802074 	movhi	r2,129
  807304:	10b19a04 	addi	r2,r2,-14744
  807308:	18801426 	beq	r3,r2,80735c <__svfscanf_r+0x1264>
  80730c:	d9c0a117 	ldw	r7,644(sp)
  807310:	d940a617 	ldw	r5,664(sp)
  807314:	000d883a 	mov	r6,zero
  807318:	b009883a 	mov	r4,r22
  80731c:	080c3500 	call	80c350 <_strtoll_r>
  807320:	100d883a 	mov	r6,r2
  807324:	180f883a 	mov	r7,r3
  807328:	d900a417 	ldw	r4,656(sp)
  80732c:	20800017 	ldw	r2,0(r4)
  807330:	21000104 	addi	r4,r4,4
  807334:	d900a415 	stw	r4,656(sp)
  807338:	11c00115 	stw	r7,4(r2)
  80733c:	11800015 	stw	r6,0(r2)
  807340:	003fba06 	br	80722c <__svfscanf_r+0x1134>
  807344:	d900a417 	ldw	r4,656(sp)
  807348:	20800017 	ldw	r2,0(r4)
  80734c:	21000104 	addi	r4,r4,4
  807350:	d900a415 	stw	r4,656(sp)
  807354:	10c00015 	stw	r3,0(r2)
  807358:	003fb406 	br	80722c <__svfscanf_r+0x1134>
  80735c:	d9c0a117 	ldw	r7,644(sp)
  807360:	d940a617 	ldw	r5,664(sp)
  807364:	000d883a 	mov	r6,zero
  807368:	b009883a 	mov	r4,r22
  80736c:	080c8bc0 	call	80c8bc <_strtoull_r>
  807370:	100d883a 	mov	r6,r2
  807374:	180f883a 	mov	r7,r3
  807378:	003feb06 	br	807328 <__svfscanf_r+0x1230>
  80737c:	d8c0a117 	ldw	r3,644(sp)
  807380:	18c5883a 	add	r2,r3,r3
  807384:	00c02074 	movhi	r3,129
  807388:	18d35004 	addi	r3,r3,19776
  80738c:	10c5883a 	add	r2,r2,r3
  807390:	1080000f 	ldh	r2,0(r2)
  807394:	00fd1fc4 	movi	r3,-2945
  807398:	90e4703a 	and	r18,r18,r3
  80739c:	d880a115 	stw	r2,644(sp)
  8073a0:	003faa06 	br	80724c <__svfscanf_r+0x1154>
  8073a4:	d900a117 	ldw	r4,644(sp)
  8073a8:	00c02074 	movhi	r3,129
  8073ac:	18d35004 	addi	r3,r3,19776
  8073b0:	2105883a 	add	r2,r4,r4
  8073b4:	10c5883a 	add	r2,r2,r3
  8073b8:	1080000f 	ldh	r2,0(r2)
  8073bc:	00c00204 	movi	r3,8
  8073c0:	d880a115 	stw	r2,644(sp)
  8073c4:	18bf140e 	bge	r3,r2,807018 <__svfscanf_r+0xf20>
  8073c8:	00bd1fc4 	movi	r2,-2945
  8073cc:	90a4703a 	and	r18,r18,r2
  8073d0:	003f9e06 	br	80724c <__svfscanf_r+0x1154>
  8073d4:	d8c0a117 	ldw	r3,644(sp)
  8073d8:	00800284 	movi	r2,10
  8073dc:	10fffa16 	blt	r2,r3,8073c8 <__svfscanf_r+0x12d0>
  8073e0:	003f0d06 	br	807018 <__svfscanf_r+0xf20>
  8073e4:	90c1800c 	andi	r3,r18,1536
  8073e8:	00808004 	movi	r2,512
  8073ec:	18bf0a1e 	bne	r3,r2,807018 <__svfscanf_r+0xf20>
  8073f0:	00bf7fc4 	movi	r2,-513
  8073f4:	9084703a 	and	r2,r18,r2
  8073f8:	01000404 	movi	r4,16
  8073fc:	14814014 	ori	r18,r2,1280
  807400:	d900a115 	stw	r4,644(sp)
  807404:	003f9106 	br	80724c <__svfscanf_r+0x1154>
  807408:	d880a417 	ldw	r2,656(sp)
  80740c:	dd400404 	addi	r21,sp,16
  807410:	14800017 	ldw	r18,0(r2)
  807414:	9027883a 	mov	r19,r18
  807418:	81000017 	ldw	r4,0(r16)
  80741c:	20800003 	ldbu	r2,0(r4)
  807420:	a885883a 	add	r2,r21,r2
  807424:	10c00007 	ldb	r3,0(r2)
  807428:	18001426 	beq	r3,zero,80747c <__svfscanf_r+0x1384>
  80742c:	d8c0a317 	ldw	r3,652(sp)
  807430:	80800117 	ldw	r2,4(r16)
  807434:	21800044 	addi	r6,r4,1
  807438:	18ffffc4 	addi	r3,r3,-1
  80743c:	d8c0a315 	stw	r3,652(sp)
  807440:	10ffffc4 	addi	r3,r2,-1
  807444:	80c00115 	stw	r3,4(r16)
  807448:	20800003 	ldbu	r2,0(r4)
  80744c:	90800005 	stb	r2,0(r18)
  807450:	d900a317 	ldw	r4,652(sp)
  807454:	81800015 	stw	r6,0(r16)
  807458:	94800044 	addi	r18,r18,1
  80745c:	20000726 	beq	r4,zero,80747c <__svfscanf_r+0x1384>
  807460:	80800117 	ldw	r2,4(r16)
  807464:	00bfec16 	blt	zero,r2,807418 <__svfscanf_r+0x1320>
  807468:	b009883a 	mov	r4,r22
  80746c:	800b883a 	mov	r5,r16
  807470:	0803b780 	call	803b78 <__srefill_r>
  807474:	103fe826 	beq	r2,zero,807418 <__svfscanf_r+0x1320>
  807478:	9cbb7426 	beq	r19,r18,80624c <__svfscanf_r+0x154>
  80747c:	94e7c83a 	sub	r19,r18,r19
  807480:	983b5226 	beq	r19,zero,8061cc <__svfscanf_r+0xd4>
  807484:	90000005 	stb	zero,0(r18)
  807488:	d880a417 	ldw	r2,656(sp)
  80748c:	d8c0a217 	ldw	r3,648(sp)
  807490:	8ce3883a 	add	r17,r17,r19
  807494:	10800104 	addi	r2,r2,4
  807498:	18c00044 	addi	r3,r3,1
  80749c:	d880a415 	stw	r2,656(sp)
  8074a0:	d8c0a215 	stw	r3,648(sp)
  8074a4:	003b2706 	br	806144 <__svfscanf_r+0x4c>
  8074a8:	9cc00414 	ori	r19,r19,16
  8074ac:	003b6e06 	br	806268 <__svfscanf_r+0x170>
  8074b0:	00c00404 	movi	r3,16
  8074b4:	01002074 	movhi	r4,129
  8074b8:	21319a04 	addi	r4,r4,-14744
  8074bc:	9cc08014 	ori	r19,r19,512
  8074c0:	054000c4 	movi	r21,3
  8074c4:	d8c0a115 	stw	r3,644(sp)
  8074c8:	d900a015 	stw	r4,640(sp)
  8074cc:	003bf806 	br	8064b0 <__svfscanf_r+0x3b8>
  8074d0:	9880040c 	andi	r2,r19,16
  8074d4:	10001926 	beq	r2,zero,80753c <__svfscanf_r+0x1444>
  8074d8:	0027883a 	mov	r19,zero
  8074dc:	00000b06 	br	80750c <__svfscanf_r+0x1414>
  8074e0:	80800017 	ldw	r2,0(r16)
  8074e4:	b009883a 	mov	r4,r22
  8074e8:	800b883a 	mov	r5,r16
  8074ec:	148d883a 	add	r6,r2,r18
  8074f0:	81800015 	stw	r6,0(r16)
  8074f4:	9ca7883a 	add	r19,r19,r18
  8074f8:	0803b780 	call	803b78 <__srefill_r>
  8074fc:	103c711e 	bne	r2,zero,8066c4 <__svfscanf_r+0x5cc>
  807500:	d900a317 	ldw	r4,652(sp)
  807504:	2489c83a 	sub	r4,r4,r18
  807508:	d900a315 	stw	r4,652(sp)
  80750c:	84800117 	ldw	r18,4(r16)
  807510:	d8c0a317 	ldw	r3,652(sp)
  807514:	90fff216 	blt	r18,r3,8074e0 <__svfscanf_r+0x13e8>
  807518:	d900a317 	ldw	r4,652(sp)
  80751c:	80800017 	ldw	r2,0(r16)
  807520:	9927883a 	add	r19,r19,r4
  807524:	9107c83a 	sub	r3,r18,r4
  807528:	110d883a 	add	r6,r2,r4
  80752c:	8ce3883a 	add	r17,r17,r19
  807530:	80c00115 	stw	r3,4(r16)
  807534:	81800015 	stw	r6,0(r16)
  807538:	003b0206 	br	806144 <__svfscanf_r+0x4c>
  80753c:	d880a417 	ldw	r2,656(sp)
  807540:	d980a317 	ldw	r6,652(sp)
  807544:	01400044 	movi	r5,1
  807548:	11000017 	ldw	r4,0(r2)
  80754c:	800f883a 	mov	r7,r16
  807550:	08095040 	call	809504 <fread>
  807554:	103b3d26 	beq	r2,zero,80624c <__svfscanf_r+0x154>
  807558:	d8c0a417 	ldw	r3,656(sp)
  80755c:	d900a217 	ldw	r4,648(sp)
  807560:	88a3883a 	add	r17,r17,r2
  807564:	18c00104 	addi	r3,r3,4
  807568:	21000044 	addi	r4,r4,1
  80756c:	d8c0a415 	stw	r3,656(sp)
  807570:	d900a215 	stw	r4,648(sp)
  807574:	003af306 	br	806144 <__svfscanf_r+0x4c>
  807578:	8080030b 	ldhu	r2,12(r16)
  80757c:	1080100c 	andi	r2,r2,64
  807580:	103b1226 	beq	r2,zero,8061cc <__svfscanf_r+0xd4>
  807584:	003b3306 	br	806254 <__svfscanf_r+0x15c>
  807588:	983b1026 	beq	r19,zero,8061cc <__svfscanf_r+0xd4>
  80758c:	8ce3883a 	add	r17,r17,r19
  807590:	003aec06 	br	806144 <__svfscanf_r+0x4c>
  807594:	983c9626 	beq	r19,zero,8067f0 <__svfscanf_r+0x6f8>
  807598:	9cffffc4 	addi	r19,r19,-1
  80759c:	d8c04404 	addi	r3,sp,272
  8075a0:	1cc5883a 	add	r2,r3,r19
  8075a4:	11400003 	ldbu	r5,0(r2)
  8075a8:	b009883a 	mov	r4,r22
  8075ac:	800d883a 	mov	r6,r16
  8075b0:	080cc880 	call	80cc88 <_ungetc_r>
  8075b4:	003ff706 	br	807594 <__svfscanf_r+0x149c>
  8075b8:	00bfff84 	movi	r2,-2
  8075bc:	18bc7a1e 	bne	r3,r2,8067a8 <__svfscanf_r+0x6b0>
  8075c0:	003c8406 	br	8067d4 <__svfscanf_r+0x6dc>
  8075c4:	d900a417 	ldw	r4,656(sp)
  8075c8:	25400017 	ldw	r21,0(r4)
  8075cc:	21000104 	addi	r4,r4,4
  8075d0:	d900a415 	stw	r4,656(sp)
  8075d4:	003c4a06 	br	806700 <__svfscanf_r+0x608>
  8075d8:	00bfff84 	movi	r2,-2
  8075dc:	18bc0f1e 	bne	r3,r2,80661c <__svfscanf_r+0x524>
  8075e0:	003c1506 	br	806638 <__svfscanf_r+0x540>
  8075e4:	b009883a 	mov	r4,r22
  8075e8:	800b883a 	mov	r5,r16
  8075ec:	0803b780 	call	803b78 <__srefill_r>
  8075f0:	103c1326 	beq	r2,zero,806640 <__svfscanf_r+0x548>
  8075f4:	903b151e 	bne	r18,zero,80624c <__svfscanf_r+0x154>
  8075f8:	a83ad21e 	bne	r21,zero,806144 <__svfscanf_r+0x4c>
  8075fc:	d880a217 	ldw	r2,648(sp)
  807600:	10800044 	addi	r2,r2,1
  807604:	d880a215 	stw	r2,648(sp)
  807608:	003ace06 	br	806144 <__svfscanf_r+0x4c>
  80760c:	0027883a 	mov	r19,zero
  807610:	003bdd06 	br	806588 <__svfscanf_r+0x490>
  807614:	9cc00114 	ori	r19,r19,4
  807618:	003b1306 	br	806268 <__svfscanf_r+0x170>
  80761c:	05400104 	movi	r21,4
  807620:	003ba306 	br	8064b0 <__svfscanf_r+0x3b8>
  807624:	9cc00054 	ori	r19,r19,1
  807628:	00802074 	movhi	r2,129
  80762c:	10b03a04 	addi	r2,r2,-16152
  807630:	00c00284 	movi	r3,10
  807634:	054000c4 	movi	r21,3
  807638:	d880a015 	stw	r2,640(sp)
  80763c:	d8c0a115 	stw	r3,644(sp)
  807640:	003b9b06 	br	8064b0 <__svfscanf_r+0x3b8>
  807644:	9cc01014 	ori	r19,r19,64
  807648:	002b883a 	mov	r21,zero
  80764c:	003b9806 	br	8064b0 <__svfscanf_r+0x3b8>
  807650:	a00b883a 	mov	r5,r20
  807654:	d9000404 	addi	r4,sp,16
  807658:	080a8f80 	call	80a8f8 <__sccl>
  80765c:	1029883a 	mov	r20,r2
  807660:	9cc01014 	ori	r19,r19,64
  807664:	05400044 	movi	r21,1
  807668:	003b9106 	br	8064b0 <__svfscanf_r+0x3b8>
  80766c:	9cc00054 	ori	r19,r19,1
  807670:	00800204 	movi	r2,8
  807674:	00c02074 	movhi	r3,129
  807678:	18f19a04 	addi	r3,r3,-14744
  80767c:	054000c4 	movi	r21,3
  807680:	d880a115 	stw	r2,644(sp)
  807684:	d8c0a015 	stw	r3,640(sp)
  807688:	003b8906 	br	8064b0 <__svfscanf_r+0x3b8>
  80768c:	9880040c 	andi	r2,r19,16
  807690:	103aac1e 	bne	r2,zero,806144 <__svfscanf_r+0x4c>
  807694:	9880010c 	andi	r2,r19,4
  807698:	10002426 	beq	r2,zero,80772c <__svfscanf_r+0x1634>
  80769c:	d900a417 	ldw	r4,656(sp)
  8076a0:	20800017 	ldw	r2,0(r4)
  8076a4:	21000104 	addi	r4,r4,4
  8076a8:	d900a415 	stw	r4,656(sp)
  8076ac:	1440000d 	sth	r17,0(r2)
  8076b0:	003aa406 	br	806144 <__svfscanf_r+0x4c>
  8076b4:	9cc00094 	ori	r19,r19,2
  8076b8:	003aeb06 	br	806268 <__svfscanf_r+0x170>
  8076bc:	05400084 	movi	r21,2
  8076c0:	003b7b06 	br	8064b0 <__svfscanf_r+0x3b8>
  8076c4:	00800404 	movi	r2,16
  8076c8:	00c02074 	movhi	r3,129
  8076cc:	18f19a04 	addi	r3,r3,-14744
  8076d0:	9cc08814 	ori	r19,r19,544
  8076d4:	054000c4 	movi	r21,3
  8076d8:	d880a115 	stw	r2,644(sp)
  8076dc:	d8c0a015 	stw	r3,640(sp)
  8076e0:	003b7306 	br	8064b0 <__svfscanf_r+0x3b8>
  8076e4:	0009883a 	mov	r4,zero
  8076e8:	080a9b80 	call	80a9b8 <nanf>
  8076ec:	b8800015 	stw	r2,0(r23)
  8076f0:	003d2706 	br	806b90 <__svfscanf_r+0xa98>
  8076f4:	a0c00007 	ldb	r3,0(r20)
  8076f8:	00801b04 	movi	r2,108
  8076fc:	18800826 	beq	r3,r2,807720 <__svfscanf_r+0x1628>
  807700:	9cc00054 	ori	r19,r19,1
  807704:	003ad806 	br	806268 <__svfscanf_r+0x170>
  807708:	01002074 	movhi	r4,129
  80770c:	21303a04 	addi	r4,r4,-16152
  807710:	054000c4 	movi	r21,3
  807714:	d900a015 	stw	r4,640(sp)
  807718:	d800a115 	stw	zero,644(sp)
  80771c:	003b6406 	br	8064b0 <__svfscanf_r+0x3b8>
  807720:	a5000044 	addi	r20,r20,1
  807724:	9cc00094 	ori	r19,r19,2
  807728:	003acf06 	br	806268 <__svfscanf_r+0x170>
  80772c:	9880004c 	andi	r2,r19,1
  807730:	1005003a 	cmpeq	r2,r2,zero
  807734:	10000a26 	beq	r2,zero,807760 <__svfscanf_r+0x1668>
  807738:	9880008c 	andi	r2,r19,2
  80773c:	10000826 	beq	r2,zero,807760 <__svfscanf_r+0x1668>
  807740:	d900a417 	ldw	r4,656(sp)
  807744:	8807d7fa 	srai	r3,r17,31
  807748:	20800017 	ldw	r2,0(r4)
  80774c:	21000104 	addi	r4,r4,4
  807750:	d900a415 	stw	r4,656(sp)
  807754:	14400015 	stw	r17,0(r2)
  807758:	10c00115 	stw	r3,4(r2)
  80775c:	003a7906 	br	806144 <__svfscanf_r+0x4c>
  807760:	d8c0a417 	ldw	r3,656(sp)
  807764:	18800017 	ldw	r2,0(r3)
  807768:	18c00104 	addi	r3,r3,4
  80776c:	d8c0a415 	stw	r3,656(sp)
  807770:	14400015 	stw	r17,0(r2)
  807774:	003a7306 	br	806144 <__svfscanf_r+0x4c>

00807778 <__svfscanf>:
  807778:	00802074 	movhi	r2,129
  80777c:	109be504 	addi	r2,r2,28564
  807780:	2013883a 	mov	r9,r4
  807784:	11000017 	ldw	r4,0(r2)
  807788:	2805883a 	mov	r2,r5
  80778c:	300f883a 	mov	r7,r6
  807790:	480b883a 	mov	r5,r9
  807794:	100d883a 	mov	r6,r2
  807798:	08060f81 	jmpi	8060f8 <__svfscanf_r>

0080779c <_vfscanf_r>:
  80779c:	defffb04 	addi	sp,sp,-20
  8077a0:	dcc00315 	stw	r19,12(sp)
  8077a4:	dc800215 	stw	r18,8(sp)
  8077a8:	dc400115 	stw	r17,4(sp)
  8077ac:	dc000015 	stw	r16,0(sp)
  8077b0:	dfc00415 	stw	ra,16(sp)
  8077b4:	2021883a 	mov	r16,r4
  8077b8:	2823883a 	mov	r17,r5
  8077bc:	3025883a 	mov	r18,r6
  8077c0:	3827883a 	mov	r19,r7
  8077c4:	20000226 	beq	r4,zero,8077d0 <_vfscanf_r+0x34>
  8077c8:	20800e17 	ldw	r2,56(r4)
  8077cc:	10000b26 	beq	r2,zero,8077fc <_vfscanf_r+0x60>
  8077d0:	8009883a 	mov	r4,r16
  8077d4:	880b883a 	mov	r5,r17
  8077d8:	900d883a 	mov	r6,r18
  8077dc:	980f883a 	mov	r7,r19
  8077e0:	dfc00417 	ldw	ra,16(sp)
  8077e4:	dcc00317 	ldw	r19,12(sp)
  8077e8:	dc800217 	ldw	r18,8(sp)
  8077ec:	dc400117 	ldw	r17,4(sp)
  8077f0:	dc000017 	ldw	r16,0(sp)
  8077f4:	dec00504 	addi	sp,sp,20
  8077f8:	08060f81 	jmpi	8060f8 <__svfscanf_r>
  8077fc:	08014880 	call	801488 <__sinit>
  807800:	003ff306 	br	8077d0 <_vfscanf_r+0x34>

00807804 <vfscanf>:
  807804:	defffb04 	addi	sp,sp,-20
  807808:	dcc00315 	stw	r19,12(sp)
  80780c:	04c02074 	movhi	r19,129
  807810:	9cdbe504 	addi	r19,r19,28564
  807814:	98c00017 	ldw	r3,0(r19)
  807818:	dc800215 	stw	r18,8(sp)
  80781c:	dc400115 	stw	r17,4(sp)
  807820:	dc000015 	stw	r16,0(sp)
  807824:	dfc00415 	stw	ra,16(sp)
  807828:	2021883a 	mov	r16,r4
  80782c:	2823883a 	mov	r17,r5
  807830:	3025883a 	mov	r18,r6
  807834:	18000326 	beq	r3,zero,807844 <vfscanf+0x40>
  807838:	18800e17 	ldw	r2,56(r3)
  80783c:	1809883a 	mov	r4,r3
  807840:	10000b26 	beq	r2,zero,807870 <vfscanf+0x6c>
  807844:	99000017 	ldw	r4,0(r19)
  807848:	800b883a 	mov	r5,r16
  80784c:	880d883a 	mov	r6,r17
  807850:	900f883a 	mov	r7,r18
  807854:	dfc00417 	ldw	ra,16(sp)
  807858:	dcc00317 	ldw	r19,12(sp)
  80785c:	dc800217 	ldw	r18,8(sp)
  807860:	dc400117 	ldw	r17,4(sp)
  807864:	dc000017 	ldw	r16,0(sp)
  807868:	dec00504 	addi	sp,sp,20
  80786c:	08060f81 	jmpi	8060f8 <__svfscanf_r>
  807870:	08014880 	call	801488 <__sinit>
  807874:	003ff306 	br	807844 <vfscanf+0x40>

00807878 <_write_r>:
  807878:	defffd04 	addi	sp,sp,-12
  80787c:	dc000015 	stw	r16,0(sp)
  807880:	040020b4 	movhi	r16,130
  807884:	84233b04 	addi	r16,r16,-29460
  807888:	dc400115 	stw	r17,4(sp)
  80788c:	80000015 	stw	zero,0(r16)
  807890:	2023883a 	mov	r17,r4
  807894:	2809883a 	mov	r4,r5
  807898:	300b883a 	mov	r5,r6
  80789c:	380d883a 	mov	r6,r7
  8078a0:	dfc00215 	stw	ra,8(sp)
  8078a4:	081158c0 	call	81158c <write>
  8078a8:	1007883a 	mov	r3,r2
  8078ac:	00bfffc4 	movi	r2,-1
  8078b0:	18800626 	beq	r3,r2,8078cc <_write_r+0x54>
  8078b4:	1805883a 	mov	r2,r3
  8078b8:	dfc00217 	ldw	ra,8(sp)
  8078bc:	dc400117 	ldw	r17,4(sp)
  8078c0:	dc000017 	ldw	r16,0(sp)
  8078c4:	dec00304 	addi	sp,sp,12
  8078c8:	f800283a 	ret
  8078cc:	80800017 	ldw	r2,0(r16)
  8078d0:	103ff826 	beq	r2,zero,8078b4 <_write_r+0x3c>
  8078d4:	88800015 	stw	r2,0(r17)
  8078d8:	1805883a 	mov	r2,r3
  8078dc:	dfc00217 	ldw	ra,8(sp)
  8078e0:	dc400117 	ldw	r17,4(sp)
  8078e4:	dc000017 	ldw	r16,0(sp)
  8078e8:	dec00304 	addi	sp,sp,12
  8078ec:	f800283a 	ret

008078f0 <__swsetup_r>:
  8078f0:	00802074 	movhi	r2,129
  8078f4:	109be504 	addi	r2,r2,28564
  8078f8:	10c00017 	ldw	r3,0(r2)
  8078fc:	defffd04 	addi	sp,sp,-12
  807900:	dc400115 	stw	r17,4(sp)
  807904:	dc000015 	stw	r16,0(sp)
  807908:	dfc00215 	stw	ra,8(sp)
  80790c:	2023883a 	mov	r17,r4
  807910:	2821883a 	mov	r16,r5
  807914:	18000226 	beq	r3,zero,807920 <__swsetup_r+0x30>
  807918:	18800e17 	ldw	r2,56(r3)
  80791c:	10001f26 	beq	r2,zero,80799c <__swsetup_r+0xac>
  807920:	8100030b 	ldhu	r4,12(r16)
  807924:	2080020c 	andi	r2,r4,8
  807928:	10002826 	beq	r2,zero,8079cc <__swsetup_r+0xdc>
  80792c:	81400417 	ldw	r5,16(r16)
  807930:	28001d26 	beq	r5,zero,8079a8 <__swsetup_r+0xb8>
  807934:	2080004c 	andi	r2,r4,1
  807938:	1005003a 	cmpeq	r2,r2,zero
  80793c:	10000b26 	beq	r2,zero,80796c <__swsetup_r+0x7c>
  807940:	2080008c 	andi	r2,r4,2
  807944:	10001226 	beq	r2,zero,807990 <__swsetup_r+0xa0>
  807948:	0005883a 	mov	r2,zero
  80794c:	80800215 	stw	r2,8(r16)
  807950:	28000b26 	beq	r5,zero,807980 <__swsetup_r+0x90>
  807954:	0005883a 	mov	r2,zero
  807958:	dfc00217 	ldw	ra,8(sp)
  80795c:	dc400117 	ldw	r17,4(sp)
  807960:	dc000017 	ldw	r16,0(sp)
  807964:	dec00304 	addi	sp,sp,12
  807968:	f800283a 	ret
  80796c:	80800517 	ldw	r2,20(r16)
  807970:	80000215 	stw	zero,8(r16)
  807974:	0085c83a 	sub	r2,zero,r2
  807978:	80800615 	stw	r2,24(r16)
  80797c:	283ff51e 	bne	r5,zero,807954 <__swsetup_r+0x64>
  807980:	2080200c 	andi	r2,r4,128
  807984:	103ff326 	beq	r2,zero,807954 <__swsetup_r+0x64>
  807988:	00bfffc4 	movi	r2,-1
  80798c:	003ff206 	br	807958 <__swsetup_r+0x68>
  807990:	80800517 	ldw	r2,20(r16)
  807994:	80800215 	stw	r2,8(r16)
  807998:	003fed06 	br	807950 <__swsetup_r+0x60>
  80799c:	1809883a 	mov	r4,r3
  8079a0:	08014880 	call	801488 <__sinit>
  8079a4:	003fde06 	br	807920 <__swsetup_r+0x30>
  8079a8:	20c0a00c 	andi	r3,r4,640
  8079ac:	00808004 	movi	r2,512
  8079b0:	18bfe026 	beq	r3,r2,807934 <__swsetup_r+0x44>
  8079b4:	8809883a 	mov	r4,r17
  8079b8:	800b883a 	mov	r5,r16
  8079bc:	08028100 	call	802810 <__smakebuf_r>
  8079c0:	8100030b 	ldhu	r4,12(r16)
  8079c4:	81400417 	ldw	r5,16(r16)
  8079c8:	003fda06 	br	807934 <__swsetup_r+0x44>
  8079cc:	2080040c 	andi	r2,r4,16
  8079d0:	103fed26 	beq	r2,zero,807988 <__swsetup_r+0x98>
  8079d4:	2080010c 	andi	r2,r4,4
  8079d8:	10001226 	beq	r2,zero,807a24 <__swsetup_r+0x134>
  8079dc:	81400c17 	ldw	r5,48(r16)
  8079e0:	28000526 	beq	r5,zero,8079f8 <__swsetup_r+0x108>
  8079e4:	80801004 	addi	r2,r16,64
  8079e8:	28800226 	beq	r5,r2,8079f4 <__swsetup_r+0x104>
  8079ec:	8809883a 	mov	r4,r17
  8079f0:	0801a0c0 	call	801a0c <_free_r>
  8079f4:	80000c15 	stw	zero,48(r16)
  8079f8:	8080030b 	ldhu	r2,12(r16)
  8079fc:	81400417 	ldw	r5,16(r16)
  807a00:	80000115 	stw	zero,4(r16)
  807a04:	10bff6cc 	andi	r2,r2,65499
  807a08:	8080030d 	sth	r2,12(r16)
  807a0c:	81400015 	stw	r5,0(r16)
  807a10:	8080030b 	ldhu	r2,12(r16)
  807a14:	10800214 	ori	r2,r2,8
  807a18:	113fffcc 	andi	r4,r2,65535
  807a1c:	8080030d 	sth	r2,12(r16)
  807a20:	003fc306 	br	807930 <__swsetup_r+0x40>
  807a24:	81400417 	ldw	r5,16(r16)
  807a28:	003ff906 	br	807a10 <__swsetup_r+0x120>

00807a2c <_close_r>:
  807a2c:	defffd04 	addi	sp,sp,-12
  807a30:	dc000015 	stw	r16,0(sp)
  807a34:	040020b4 	movhi	r16,130
  807a38:	84233b04 	addi	r16,r16,-29460
  807a3c:	dc400115 	stw	r17,4(sp)
  807a40:	80000015 	stw	zero,0(r16)
  807a44:	2023883a 	mov	r17,r4
  807a48:	2809883a 	mov	r4,r5
  807a4c:	dfc00215 	stw	ra,8(sp)
  807a50:	08106040 	call	810604 <close>
  807a54:	1007883a 	mov	r3,r2
  807a58:	00bfffc4 	movi	r2,-1
  807a5c:	18800626 	beq	r3,r2,807a78 <_close_r+0x4c>
  807a60:	1805883a 	mov	r2,r3
  807a64:	dfc00217 	ldw	ra,8(sp)
  807a68:	dc400117 	ldw	r17,4(sp)
  807a6c:	dc000017 	ldw	r16,0(sp)
  807a70:	dec00304 	addi	sp,sp,12
  807a74:	f800283a 	ret
  807a78:	80800017 	ldw	r2,0(r16)
  807a7c:	103ff826 	beq	r2,zero,807a60 <_close_r+0x34>
  807a80:	88800015 	stw	r2,0(r17)
  807a84:	1805883a 	mov	r2,r3
  807a88:	dfc00217 	ldw	ra,8(sp)
  807a8c:	dc400117 	ldw	r17,4(sp)
  807a90:	dc000017 	ldw	r16,0(sp)
  807a94:	dec00304 	addi	sp,sp,12
  807a98:	f800283a 	ret

00807a9c <quorem>:
  807a9c:	28c00417 	ldw	r3,16(r5)
  807aa0:	20800417 	ldw	r2,16(r4)
  807aa4:	defff604 	addi	sp,sp,-40
  807aa8:	ddc00715 	stw	r23,28(sp)
  807aac:	dd400515 	stw	r21,20(sp)
  807ab0:	dfc00915 	stw	ra,36(sp)
  807ab4:	df000815 	stw	fp,32(sp)
  807ab8:	dd800615 	stw	r22,24(sp)
  807abc:	dd000415 	stw	r20,16(sp)
  807ac0:	dcc00315 	stw	r19,12(sp)
  807ac4:	dc800215 	stw	r18,8(sp)
  807ac8:	dc400115 	stw	r17,4(sp)
  807acc:	dc000015 	stw	r16,0(sp)
  807ad0:	202f883a 	mov	r23,r4
  807ad4:	282b883a 	mov	r21,r5
  807ad8:	10c07416 	blt	r2,r3,807cac <quorem+0x210>
  807adc:	1c7fffc4 	addi	r17,r3,-1
  807ae0:	8c45883a 	add	r2,r17,r17
  807ae4:	1085883a 	add	r2,r2,r2
  807ae8:	2c000504 	addi	r16,r5,20
  807aec:	24c00504 	addi	r19,r4,20
  807af0:	14ed883a 	add	r22,r2,r19
  807af4:	80a5883a 	add	r18,r16,r2
  807af8:	b7000017 	ldw	fp,0(r22)
  807afc:	91400017 	ldw	r5,0(r18)
  807b00:	e009883a 	mov	r4,fp
  807b04:	29400044 	addi	r5,r5,1
  807b08:	080fc100 	call	80fc10 <__udivsi3>
  807b0c:	1029883a 	mov	r20,r2
  807b10:	10003c1e 	bne	r2,zero,807c04 <quorem+0x168>
  807b14:	a80b883a 	mov	r5,r21
  807b18:	b809883a 	mov	r4,r23
  807b1c:	08099780 	call	809978 <__mcmp>
  807b20:	10002b16 	blt	r2,zero,807bd0 <quorem+0x134>
  807b24:	a5000044 	addi	r20,r20,1
  807b28:	980f883a 	mov	r7,r19
  807b2c:	0011883a 	mov	r8,zero
  807b30:	0009883a 	mov	r4,zero
  807b34:	81400017 	ldw	r5,0(r16)
  807b38:	38c00017 	ldw	r3,0(r7)
  807b3c:	84000104 	addi	r16,r16,4
  807b40:	28bfffcc 	andi	r2,r5,65535
  807b44:	2085883a 	add	r2,r4,r2
  807b48:	11bfffcc 	andi	r6,r2,65535
  807b4c:	193fffcc 	andi	r4,r3,65535
  807b50:	1004d43a 	srli	r2,r2,16
  807b54:	280ad43a 	srli	r5,r5,16
  807b58:	2189c83a 	sub	r4,r4,r6
  807b5c:	2209883a 	add	r4,r4,r8
  807b60:	1806d43a 	srli	r3,r3,16
  807b64:	288b883a 	add	r5,r5,r2
  807b68:	200dd43a 	srai	r6,r4,16
  807b6c:	28bfffcc 	andi	r2,r5,65535
  807b70:	1887c83a 	sub	r3,r3,r2
  807b74:	1987883a 	add	r3,r3,r6
  807b78:	3900000d 	sth	r4,0(r7)
  807b7c:	38c0008d 	sth	r3,2(r7)
  807b80:	2808d43a 	srli	r4,r5,16
  807b84:	39c00104 	addi	r7,r7,4
  807b88:	1811d43a 	srai	r8,r3,16
  807b8c:	943fe92e 	bgeu	r18,r16,807b34 <quorem+0x98>
  807b90:	8c45883a 	add	r2,r17,r17
  807b94:	1085883a 	add	r2,r2,r2
  807b98:	9885883a 	add	r2,r19,r2
  807b9c:	10c00017 	ldw	r3,0(r2)
  807ba0:	18000b1e 	bne	r3,zero,807bd0 <quorem+0x134>
  807ba4:	113fff04 	addi	r4,r2,-4
  807ba8:	9900082e 	bgeu	r19,r4,807bcc <quorem+0x130>
  807bac:	10bfff17 	ldw	r2,-4(r2)
  807bb0:	10000326 	beq	r2,zero,807bc0 <quorem+0x124>
  807bb4:	00000506 	br	807bcc <quorem+0x130>
  807bb8:	20800017 	ldw	r2,0(r4)
  807bbc:	1000031e 	bne	r2,zero,807bcc <quorem+0x130>
  807bc0:	213fff04 	addi	r4,r4,-4
  807bc4:	8c7fffc4 	addi	r17,r17,-1
  807bc8:	993ffb36 	bltu	r19,r4,807bb8 <quorem+0x11c>
  807bcc:	bc400415 	stw	r17,16(r23)
  807bd0:	a005883a 	mov	r2,r20
  807bd4:	dfc00917 	ldw	ra,36(sp)
  807bd8:	df000817 	ldw	fp,32(sp)
  807bdc:	ddc00717 	ldw	r23,28(sp)
  807be0:	dd800617 	ldw	r22,24(sp)
  807be4:	dd400517 	ldw	r21,20(sp)
  807be8:	dd000417 	ldw	r20,16(sp)
  807bec:	dcc00317 	ldw	r19,12(sp)
  807bf0:	dc800217 	ldw	r18,8(sp)
  807bf4:	dc400117 	ldw	r17,4(sp)
  807bf8:	dc000017 	ldw	r16,0(sp)
  807bfc:	dec00a04 	addi	sp,sp,40
  807c00:	f800283a 	ret
  807c04:	980f883a 	mov	r7,r19
  807c08:	8011883a 	mov	r8,r16
  807c0c:	0013883a 	mov	r9,zero
  807c10:	000d883a 	mov	r6,zero
  807c14:	40c00017 	ldw	r3,0(r8)
  807c18:	39000017 	ldw	r4,0(r7)
  807c1c:	42000104 	addi	r8,r8,4
  807c20:	18bfffcc 	andi	r2,r3,65535
  807c24:	a085383a 	mul	r2,r20,r2
  807c28:	1806d43a 	srli	r3,r3,16
  807c2c:	217fffcc 	andi	r5,r4,65535
  807c30:	3085883a 	add	r2,r6,r2
  807c34:	11bfffcc 	andi	r6,r2,65535
  807c38:	a0c7383a 	mul	r3,r20,r3
  807c3c:	1004d43a 	srli	r2,r2,16
  807c40:	298bc83a 	sub	r5,r5,r6
  807c44:	2a4b883a 	add	r5,r5,r9
  807c48:	2008d43a 	srli	r4,r4,16
  807c4c:	1887883a 	add	r3,r3,r2
  807c50:	280dd43a 	srai	r6,r5,16
  807c54:	18bfffcc 	andi	r2,r3,65535
  807c58:	2089c83a 	sub	r4,r4,r2
  807c5c:	2189883a 	add	r4,r4,r6
  807c60:	3900008d 	sth	r4,2(r7)
  807c64:	3940000d 	sth	r5,0(r7)
  807c68:	180cd43a 	srli	r6,r3,16
  807c6c:	39c00104 	addi	r7,r7,4
  807c70:	2013d43a 	srai	r9,r4,16
  807c74:	923fe72e 	bgeu	r18,r8,807c14 <quorem+0x178>
  807c78:	e03fa61e 	bne	fp,zero,807b14 <quorem+0x78>
  807c7c:	b0ffff04 	addi	r3,r22,-4
  807c80:	98c0082e 	bgeu	r19,r3,807ca4 <quorem+0x208>
  807c84:	b0bfff17 	ldw	r2,-4(r22)
  807c88:	10000326 	beq	r2,zero,807c98 <quorem+0x1fc>
  807c8c:	00000506 	br	807ca4 <quorem+0x208>
  807c90:	18800017 	ldw	r2,0(r3)
  807c94:	1000031e 	bne	r2,zero,807ca4 <quorem+0x208>
  807c98:	18ffff04 	addi	r3,r3,-4
  807c9c:	8c7fffc4 	addi	r17,r17,-1
  807ca0:	98fffb36 	bltu	r19,r3,807c90 <quorem+0x1f4>
  807ca4:	bc400415 	stw	r17,16(r23)
  807ca8:	003f9a06 	br	807b14 <quorem+0x78>
  807cac:	0005883a 	mov	r2,zero
  807cb0:	003fc806 	br	807bd4 <quorem+0x138>

00807cb4 <_dtoa_r>:
  807cb4:	22001017 	ldw	r8,64(r4)
  807cb8:	deffda04 	addi	sp,sp,-152
  807cbc:	dd402115 	stw	r21,132(sp)
  807cc0:	dd002015 	stw	r20,128(sp)
  807cc4:	dc801e15 	stw	r18,120(sp)
  807cc8:	dc401d15 	stw	r17,116(sp)
  807ccc:	dfc02515 	stw	ra,148(sp)
  807cd0:	df002415 	stw	fp,144(sp)
  807cd4:	ddc02315 	stw	r23,140(sp)
  807cd8:	dd802215 	stw	r22,136(sp)
  807cdc:	dcc01f15 	stw	r19,124(sp)
  807ce0:	dc001c15 	stw	r16,112(sp)
  807ce4:	d9001615 	stw	r4,88(sp)
  807ce8:	3023883a 	mov	r17,r6
  807cec:	2829883a 	mov	r20,r5
  807cf0:	d9c01715 	stw	r7,92(sp)
  807cf4:	dc802817 	ldw	r18,160(sp)
  807cf8:	302b883a 	mov	r21,r6
  807cfc:	40000a26 	beq	r8,zero,807d28 <_dtoa_r+0x74>
  807d00:	20801117 	ldw	r2,68(r4)
  807d04:	400b883a 	mov	r5,r8
  807d08:	40800115 	stw	r2,4(r8)
  807d0c:	20c01117 	ldw	r3,68(r4)
  807d10:	00800044 	movi	r2,1
  807d14:	10c4983a 	sll	r2,r2,r3
  807d18:	40800215 	stw	r2,8(r8)
  807d1c:	080981c0 	call	80981c <_Bfree>
  807d20:	d8c01617 	ldw	r3,88(sp)
  807d24:	18001015 	stw	zero,64(r3)
  807d28:	8800a316 	blt	r17,zero,807fb8 <_dtoa_r+0x304>
  807d2c:	90000015 	stw	zero,0(r18)
  807d30:	a8dffc2c 	andhi	r3,r21,32752
  807d34:	009ffc34 	movhi	r2,32752
  807d38:	18809126 	beq	r3,r2,807f80 <_dtoa_r+0x2cc>
  807d3c:	000d883a 	mov	r6,zero
  807d40:	000f883a 	mov	r7,zero
  807d44:	a009883a 	mov	r4,r20
  807d48:	a80b883a 	mov	r5,r21
  807d4c:	dd001215 	stw	r20,72(sp)
  807d50:	dd401315 	stw	r21,76(sp)
  807d54:	080f4540 	call	80f454 <__nedf2>
  807d58:	1000171e 	bne	r2,zero,807db8 <_dtoa_r+0x104>
  807d5c:	d9802717 	ldw	r6,156(sp)
  807d60:	00800044 	movi	r2,1
  807d64:	30800015 	stw	r2,0(r6)
  807d68:	d8802917 	ldw	r2,164(sp)
  807d6c:	10029b26 	beq	r2,zero,8087dc <_dtoa_r+0xb28>
  807d70:	d9002917 	ldw	r4,164(sp)
  807d74:	00802074 	movhi	r2,129
  807d78:	10934544 	addi	r2,r2,19733
  807d7c:	10ffffc4 	addi	r3,r2,-1
  807d80:	20800015 	stw	r2,0(r4)
  807d84:	1805883a 	mov	r2,r3
  807d88:	dfc02517 	ldw	ra,148(sp)
  807d8c:	df002417 	ldw	fp,144(sp)
  807d90:	ddc02317 	ldw	r23,140(sp)
  807d94:	dd802217 	ldw	r22,136(sp)
  807d98:	dd402117 	ldw	r21,132(sp)
  807d9c:	dd002017 	ldw	r20,128(sp)
  807da0:	dcc01f17 	ldw	r19,124(sp)
  807da4:	dc801e17 	ldw	r18,120(sp)
  807da8:	dc401d17 	ldw	r17,116(sp)
  807dac:	dc001c17 	ldw	r16,112(sp)
  807db0:	dec02604 	addi	sp,sp,152
  807db4:	f800283a 	ret
  807db8:	d9001617 	ldw	r4,88(sp)
  807dbc:	d9401217 	ldw	r5,72(sp)
  807dc0:	d8800104 	addi	r2,sp,4
  807dc4:	a80d883a 	mov	r6,r21
  807dc8:	d9c00204 	addi	r7,sp,8
  807dcc:	d8800015 	stw	r2,0(sp)
  807dd0:	0809e580 	call	809e58 <__d2b>
  807dd4:	d8800715 	stw	r2,28(sp)
  807dd8:	a804d53a 	srli	r2,r21,20
  807ddc:	1101ffcc 	andi	r4,r2,2047
  807de0:	20008626 	beq	r4,zero,807ffc <_dtoa_r+0x348>
  807de4:	d8c01217 	ldw	r3,72(sp)
  807de8:	00800434 	movhi	r2,16
  807dec:	10bfffc4 	addi	r2,r2,-1
  807df0:	ddc00117 	ldw	r23,4(sp)
  807df4:	a884703a 	and	r2,r21,r2
  807df8:	1811883a 	mov	r8,r3
  807dfc:	124ffc34 	orhi	r9,r2,16368
  807e00:	25bf0044 	addi	r22,r4,-1023
  807e04:	d8000815 	stw	zero,32(sp)
  807e08:	0005883a 	mov	r2,zero
  807e0c:	00cffe34 	movhi	r3,16376
  807e10:	480b883a 	mov	r5,r9
  807e14:	4009883a 	mov	r4,r8
  807e18:	180f883a 	mov	r7,r3
  807e1c:	100d883a 	mov	r6,r2
  807e20:	080ecbc0 	call	80ecbc <__subdf3>
  807e24:	0218dbf4 	movhi	r8,25455
  807e28:	4210d844 	addi	r8,r8,17249
  807e2c:	024ff4f4 	movhi	r9,16339
  807e30:	4a61e9c4 	addi	r9,r9,-30809
  807e34:	480f883a 	mov	r7,r9
  807e38:	400d883a 	mov	r6,r8
  807e3c:	180b883a 	mov	r5,r3
  807e40:	1009883a 	mov	r4,r2
  807e44:	080edb00 	call	80edb0 <__muldf3>
  807e48:	0222d874 	movhi	r8,35681
  807e4c:	42322cc4 	addi	r8,r8,-14157
  807e50:	024ff1f4 	movhi	r9,16327
  807e54:	4a628a04 	addi	r9,r9,-30168
  807e58:	480f883a 	mov	r7,r9
  807e5c:	400d883a 	mov	r6,r8
  807e60:	180b883a 	mov	r5,r3
  807e64:	1009883a 	mov	r4,r2
  807e68:	080ed3c0 	call	80ed3c <__adddf3>
  807e6c:	b009883a 	mov	r4,r22
  807e70:	1021883a 	mov	r16,r2
  807e74:	1823883a 	mov	r17,r3
  807e78:	080f6fc0 	call	80f6fc <__floatsidf>
  807e7c:	021427f4 	movhi	r8,20639
  807e80:	421e7ec4 	addi	r8,r8,31227
  807e84:	024ff4f4 	movhi	r9,16339
  807e88:	4a5104c4 	addi	r9,r9,17427
  807e8c:	480f883a 	mov	r7,r9
  807e90:	400d883a 	mov	r6,r8
  807e94:	180b883a 	mov	r5,r3
  807e98:	1009883a 	mov	r4,r2
  807e9c:	080edb00 	call	80edb0 <__muldf3>
  807ea0:	180f883a 	mov	r7,r3
  807ea4:	880b883a 	mov	r5,r17
  807ea8:	100d883a 	mov	r6,r2
  807eac:	8009883a 	mov	r4,r16
  807eb0:	080ed3c0 	call	80ed3c <__adddf3>
  807eb4:	1009883a 	mov	r4,r2
  807eb8:	180b883a 	mov	r5,r3
  807ebc:	1021883a 	mov	r16,r2
  807ec0:	1823883a 	mov	r17,r3
  807ec4:	080f7f40 	call	80f7f4 <__fixdfsi>
  807ec8:	000d883a 	mov	r6,zero
  807ecc:	000f883a 	mov	r7,zero
  807ed0:	8009883a 	mov	r4,r16
  807ed4:	880b883a 	mov	r5,r17
  807ed8:	d8800d15 	stw	r2,52(sp)
  807edc:	080f5ec0 	call	80f5ec <__ltdf2>
  807ee0:	10031716 	blt	r2,zero,808b40 <_dtoa_r+0xe8c>
  807ee4:	d8c00d17 	ldw	r3,52(sp)
  807ee8:	00800584 	movi	r2,22
  807eec:	10c1482e 	bgeu	r2,r3,808410 <_dtoa_r+0x75c>
  807ef0:	01000044 	movi	r4,1
  807ef4:	d9000c15 	stw	r4,48(sp)
  807ef8:	bd85c83a 	sub	r2,r23,r22
  807efc:	11bfffc4 	addi	r6,r2,-1
  807f00:	30030b16 	blt	r6,zero,808b30 <_dtoa_r+0xe7c>
  807f04:	d9800a15 	stw	r6,40(sp)
  807f08:	d8001115 	stw	zero,68(sp)
  807f0c:	d8c00d17 	ldw	r3,52(sp)
  807f10:	1802ff16 	blt	r3,zero,808b10 <_dtoa_r+0xe5c>
  807f14:	d9000a17 	ldw	r4,40(sp)
  807f18:	d8c00915 	stw	r3,36(sp)
  807f1c:	d8001015 	stw	zero,64(sp)
  807f20:	20c9883a 	add	r4,r4,r3
  807f24:	d9000a15 	stw	r4,40(sp)
  807f28:	d9001717 	ldw	r4,92(sp)
  807f2c:	00800244 	movi	r2,9
  807f30:	11004636 	bltu	r2,r4,80804c <_dtoa_r+0x398>
  807f34:	00800144 	movi	r2,5
  807f38:	11020416 	blt	r2,r4,80874c <_dtoa_r+0xa98>
  807f3c:	04400044 	movi	r17,1
  807f40:	d8c01717 	ldw	r3,92(sp)
  807f44:	00800144 	movi	r2,5
  807f48:	10c1ed36 	bltu	r2,r3,808700 <_dtoa_r+0xa4c>
  807f4c:	18c5883a 	add	r2,r3,r3
  807f50:	1085883a 	add	r2,r2,r2
  807f54:	00c02034 	movhi	r3,128
  807f58:	18dfda04 	addi	r3,r3,32616
  807f5c:	10c5883a 	add	r2,r2,r3
  807f60:	11000017 	ldw	r4,0(r2)
  807f64:	2000683a 	jmp	r4
  807f68:	00808054 	movui	r2,513
  807f6c:	00808054 	movui	r2,513
  807f70:	00808a54 	movui	r2,553
  807f74:	00808a2c 	andhi	r2,zero,552
  807f78:	00808a70 	cmpltui	r2,zero,553
  807f7c:	00808a7c 	xorhi	r2,zero,553
  807f80:	d9002717 	ldw	r4,156(sp)
  807f84:	0089c3c4 	movi	r2,9999
  807f88:	20800015 	stw	r2,0(r4)
  807f8c:	a0001026 	beq	r20,zero,807fd0 <_dtoa_r+0x31c>
  807f90:	00c02074 	movhi	r3,129
  807f94:	18d3fd04 	addi	r3,r3,20468
  807f98:	d9802917 	ldw	r6,164(sp)
  807f9c:	303f7926 	beq	r6,zero,807d84 <_dtoa_r+0xd0>
  807fa0:	188000c7 	ldb	r2,3(r3)
  807fa4:	190000c4 	addi	r4,r3,3
  807fa8:	1000101e 	bne	r2,zero,807fec <_dtoa_r+0x338>
  807fac:	d8802917 	ldw	r2,164(sp)
  807fb0:	11000015 	stw	r4,0(r2)
  807fb4:	003f7306 	br	807d84 <_dtoa_r+0xd0>
  807fb8:	00a00034 	movhi	r2,32768
  807fbc:	10bfffc4 	addi	r2,r2,-1
  807fc0:	00c00044 	movi	r3,1
  807fc4:	88aa703a 	and	r21,r17,r2
  807fc8:	90c00015 	stw	r3,0(r18)
  807fcc:	003f5806 	br	807d30 <_dtoa_r+0x7c>
  807fd0:	00800434 	movhi	r2,16
  807fd4:	10bfffc4 	addi	r2,r2,-1
  807fd8:	a884703a 	and	r2,r21,r2
  807fdc:	103fec1e 	bne	r2,zero,807f90 <_dtoa_r+0x2dc>
  807fe0:	00c02074 	movhi	r3,129
  807fe4:	18d3fa04 	addi	r3,r3,20456
  807fe8:	003feb06 	br	807f98 <_dtoa_r+0x2e4>
  807fec:	d8802917 	ldw	r2,164(sp)
  807ff0:	19000204 	addi	r4,r3,8
  807ff4:	11000015 	stw	r4,0(r2)
  807ff8:	003f6206 	br	807d84 <_dtoa_r+0xd0>
  807ffc:	ddc00117 	ldw	r23,4(sp)
  808000:	d8800217 	ldw	r2,8(sp)
  808004:	01000804 	movi	r4,32
  808008:	b8c10c84 	addi	r3,r23,1074
  80800c:	18a3883a 	add	r17,r3,r2
  808010:	2441b80e 	bge	r4,r17,8086f4 <_dtoa_r+0xa40>
  808014:	00c01004 	movi	r3,64
  808018:	1c47c83a 	sub	r3,r3,r17
  80801c:	88bff804 	addi	r2,r17,-32
  808020:	a8c6983a 	sll	r3,r21,r3
  808024:	a084d83a 	srl	r2,r20,r2
  808028:	1888b03a 	or	r4,r3,r2
  80802c:	080f9400 	call	80f940 <__floatunsidf>
  808030:	1011883a 	mov	r8,r2
  808034:	00bf8434 	movhi	r2,65040
  808038:	01000044 	movi	r4,1
  80803c:	10d3883a 	add	r9,r2,r3
  808040:	8dbef344 	addi	r22,r17,-1075
  808044:	d9000815 	stw	r4,32(sp)
  808048:	003f6f06 	br	807e08 <_dtoa_r+0x154>
  80804c:	d8001715 	stw	zero,92(sp)
  808050:	04400044 	movi	r17,1
  808054:	00bfffc4 	movi	r2,-1
  808058:	00c00044 	movi	r3,1
  80805c:	d8800e15 	stw	r2,56(sp)
  808060:	d8002615 	stw	zero,152(sp)
  808064:	d8800f15 	stw	r2,60(sp)
  808068:	d8c00b15 	stw	r3,44(sp)
  80806c:	1021883a 	mov	r16,r2
  808070:	d8801617 	ldw	r2,88(sp)
  808074:	10001115 	stw	zero,68(r2)
  808078:	d8801617 	ldw	r2,88(sp)
  80807c:	11401117 	ldw	r5,68(r2)
  808080:	1009883a 	mov	r4,r2
  808084:	0809d9c0 	call	809d9c <_Balloc>
  808088:	d8c01617 	ldw	r3,88(sp)
  80808c:	d8800515 	stw	r2,20(sp)
  808090:	18801015 	stw	r2,64(r3)
  808094:	00800384 	movi	r2,14
  808098:	14006836 	bltu	r2,r16,80823c <_dtoa_r+0x588>
  80809c:	8805003a 	cmpeq	r2,r17,zero
  8080a0:	1000661e 	bne	r2,zero,80823c <_dtoa_r+0x588>
  8080a4:	d9000d17 	ldw	r4,52(sp)
  8080a8:	0102300e 	bge	zero,r4,80896c <_dtoa_r+0xcb8>
  8080ac:	208003cc 	andi	r2,r4,15
  8080b0:	100490fa 	slli	r2,r2,3
  8080b4:	2025d13a 	srai	r18,r4,4
  8080b8:	00c02074 	movhi	r3,129
  8080bc:	18d40e04 	addi	r3,r3,20536
  8080c0:	10c5883a 	add	r2,r2,r3
  8080c4:	90c0040c 	andi	r3,r18,16
  8080c8:	14000017 	ldw	r16,0(r2)
  8080cc:	14400117 	ldw	r17,4(r2)
  8080d0:	18036a1e 	bne	r3,zero,808e7c <_dtoa_r+0x11c8>
  8080d4:	05800084 	movi	r22,2
  8080d8:	90001026 	beq	r18,zero,80811c <_dtoa_r+0x468>
  8080dc:	04c02074 	movhi	r19,129
  8080e0:	9cd44004 	addi	r19,r19,20736
  8080e4:	9080004c 	andi	r2,r18,1
  8080e8:	1005003a 	cmpeq	r2,r2,zero
  8080ec:	1000081e 	bne	r2,zero,808110 <_dtoa_r+0x45c>
  8080f0:	99800017 	ldw	r6,0(r19)
  8080f4:	99c00117 	ldw	r7,4(r19)
  8080f8:	880b883a 	mov	r5,r17
  8080fc:	8009883a 	mov	r4,r16
  808100:	080edb00 	call	80edb0 <__muldf3>
  808104:	1021883a 	mov	r16,r2
  808108:	b5800044 	addi	r22,r22,1
  80810c:	1823883a 	mov	r17,r3
  808110:	9025d07a 	srai	r18,r18,1
  808114:	9cc00204 	addi	r19,r19,8
  808118:	903ff21e 	bne	r18,zero,8080e4 <_dtoa_r+0x430>
  80811c:	a80b883a 	mov	r5,r21
  808120:	a009883a 	mov	r4,r20
  808124:	880f883a 	mov	r7,r17
  808128:	800d883a 	mov	r6,r16
  80812c:	080f1740 	call	80f174 <__divdf3>
  808130:	1029883a 	mov	r20,r2
  808134:	182b883a 	mov	r21,r3
  808138:	d8c00c17 	ldw	r3,48(sp)
  80813c:	1805003a 	cmpeq	r2,r3,zero
  808140:	1000081e 	bne	r2,zero,808164 <_dtoa_r+0x4b0>
  808144:	0005883a 	mov	r2,zero
  808148:	00cffc34 	movhi	r3,16368
  80814c:	180f883a 	mov	r7,r3
  808150:	a009883a 	mov	r4,r20
  808154:	a80b883a 	mov	r5,r21
  808158:	100d883a 	mov	r6,r2
  80815c:	080f5ec0 	call	80f5ec <__ltdf2>
  808160:	1003fe16 	blt	r2,zero,80915c <_dtoa_r+0x14a8>
  808164:	b009883a 	mov	r4,r22
  808168:	080f6fc0 	call	80f6fc <__floatsidf>
  80816c:	180b883a 	mov	r5,r3
  808170:	1009883a 	mov	r4,r2
  808174:	a00d883a 	mov	r6,r20
  808178:	a80f883a 	mov	r7,r21
  80817c:	080edb00 	call	80edb0 <__muldf3>
  808180:	0011883a 	mov	r8,zero
  808184:	02500734 	movhi	r9,16412
  808188:	1009883a 	mov	r4,r2
  80818c:	180b883a 	mov	r5,r3
  808190:	480f883a 	mov	r7,r9
  808194:	400d883a 	mov	r6,r8
  808198:	080ed3c0 	call	80ed3c <__adddf3>
  80819c:	d9000f17 	ldw	r4,60(sp)
  8081a0:	102d883a 	mov	r22,r2
  8081a4:	00bf3034 	movhi	r2,64704
  8081a8:	18b9883a 	add	fp,r3,r2
  8081ac:	e02f883a 	mov	r23,fp
  8081b0:	20028f1e 	bne	r4,zero,808bf0 <_dtoa_r+0xf3c>
  8081b4:	0005883a 	mov	r2,zero
  8081b8:	00d00534 	movhi	r3,16404
  8081bc:	a009883a 	mov	r4,r20
  8081c0:	a80b883a 	mov	r5,r21
  8081c4:	180f883a 	mov	r7,r3
  8081c8:	100d883a 	mov	r6,r2
  8081cc:	080ecbc0 	call	80ecbc <__subdf3>
  8081d0:	1009883a 	mov	r4,r2
  8081d4:	e00f883a 	mov	r7,fp
  8081d8:	180b883a 	mov	r5,r3
  8081dc:	b00d883a 	mov	r6,r22
  8081e0:	1025883a 	mov	r18,r2
  8081e4:	1827883a 	mov	r19,r3
  8081e8:	080f4dc0 	call	80f4dc <__gtdf2>
  8081ec:	00834f16 	blt	zero,r2,808f2c <_dtoa_r+0x1278>
  8081f0:	e0e0003c 	xorhi	r3,fp,32768
  8081f4:	9009883a 	mov	r4,r18
  8081f8:	980b883a 	mov	r5,r19
  8081fc:	180f883a 	mov	r7,r3
  808200:	b00d883a 	mov	r6,r22
  808204:	080f5ec0 	call	80f5ec <__ltdf2>
  808208:	1000080e 	bge	r2,zero,80822c <_dtoa_r+0x578>
  80820c:	0027883a 	mov	r19,zero
  808210:	0025883a 	mov	r18,zero
  808214:	d8802617 	ldw	r2,152(sp)
  808218:	df000517 	ldw	fp,20(sp)
  80821c:	d8000615 	stw	zero,24(sp)
  808220:	0084303a 	nor	r2,zero,r2
  808224:	d8800d15 	stw	r2,52(sp)
  808228:	00019b06 	br	808898 <_dtoa_r+0xbe4>
  80822c:	d9801217 	ldw	r6,72(sp)
  808230:	d8801317 	ldw	r2,76(sp)
  808234:	3029883a 	mov	r20,r6
  808238:	102b883a 	mov	r21,r2
  80823c:	d8c00217 	ldw	r3,8(sp)
  808240:	18008516 	blt	r3,zero,808458 <_dtoa_r+0x7a4>
  808244:	d9000d17 	ldw	r4,52(sp)
  808248:	00800384 	movi	r2,14
  80824c:	11008216 	blt	r2,r4,808458 <_dtoa_r+0x7a4>
  808250:	200490fa 	slli	r2,r4,3
  808254:	d9802617 	ldw	r6,152(sp)
  808258:	00c02074 	movhi	r3,129
  80825c:	18d40e04 	addi	r3,r3,20536
  808260:	10c5883a 	add	r2,r2,r3
  808264:	14800017 	ldw	r18,0(r2)
  808268:	14c00117 	ldw	r19,4(r2)
  80826c:	30031e16 	blt	r6,zero,808ee8 <_dtoa_r+0x1234>
  808270:	d9000517 	ldw	r4,20(sp)
  808274:	d8c00f17 	ldw	r3,60(sp)
  808278:	a823883a 	mov	r17,r21
  80827c:	a021883a 	mov	r16,r20
  808280:	192b883a 	add	r21,r3,r4
  808284:	2039883a 	mov	fp,r4
  808288:	00000f06 	br	8082c8 <_dtoa_r+0x614>
  80828c:	0005883a 	mov	r2,zero
  808290:	00d00934 	movhi	r3,16420
  808294:	5009883a 	mov	r4,r10
  808298:	580b883a 	mov	r5,r11
  80829c:	180f883a 	mov	r7,r3
  8082a0:	100d883a 	mov	r6,r2
  8082a4:	080edb00 	call	80edb0 <__muldf3>
  8082a8:	180b883a 	mov	r5,r3
  8082ac:	000d883a 	mov	r6,zero
  8082b0:	000f883a 	mov	r7,zero
  8082b4:	1009883a 	mov	r4,r2
  8082b8:	1021883a 	mov	r16,r2
  8082bc:	1823883a 	mov	r17,r3
  8082c0:	080f4540 	call	80f454 <__nedf2>
  8082c4:	10004526 	beq	r2,zero,8083dc <_dtoa_r+0x728>
  8082c8:	900d883a 	mov	r6,r18
  8082cc:	980f883a 	mov	r7,r19
  8082d0:	8009883a 	mov	r4,r16
  8082d4:	880b883a 	mov	r5,r17
  8082d8:	080f1740 	call	80f174 <__divdf3>
  8082dc:	180b883a 	mov	r5,r3
  8082e0:	1009883a 	mov	r4,r2
  8082e4:	080f7f40 	call	80f7f4 <__fixdfsi>
  8082e8:	1009883a 	mov	r4,r2
  8082ec:	1029883a 	mov	r20,r2
  8082f0:	080f6fc0 	call	80f6fc <__floatsidf>
  8082f4:	180f883a 	mov	r7,r3
  8082f8:	9009883a 	mov	r4,r18
  8082fc:	980b883a 	mov	r5,r19
  808300:	100d883a 	mov	r6,r2
  808304:	080edb00 	call	80edb0 <__muldf3>
  808308:	180f883a 	mov	r7,r3
  80830c:	880b883a 	mov	r5,r17
  808310:	8009883a 	mov	r4,r16
  808314:	100d883a 	mov	r6,r2
  808318:	080ecbc0 	call	80ecbc <__subdf3>
  80831c:	1015883a 	mov	r10,r2
  808320:	a0800c04 	addi	r2,r20,48
  808324:	e0800005 	stb	r2,0(fp)
  808328:	e7000044 	addi	fp,fp,1
  80832c:	1817883a 	mov	r11,r3
  808330:	e57fd61e 	bne	fp,r21,80828c <_dtoa_r+0x5d8>
  808334:	500d883a 	mov	r6,r10
  808338:	180f883a 	mov	r7,r3
  80833c:	5009883a 	mov	r4,r10
  808340:	180b883a 	mov	r5,r3
  808344:	080ed3c0 	call	80ed3c <__adddf3>
  808348:	100d883a 	mov	r6,r2
  80834c:	9009883a 	mov	r4,r18
  808350:	980b883a 	mov	r5,r19
  808354:	180f883a 	mov	r7,r3
  808358:	1021883a 	mov	r16,r2
  80835c:	1823883a 	mov	r17,r3
  808360:	080f5ec0 	call	80f5ec <__ltdf2>
  808364:	10000816 	blt	r2,zero,808388 <_dtoa_r+0x6d4>
  808368:	980b883a 	mov	r5,r19
  80836c:	800d883a 	mov	r6,r16
  808370:	880f883a 	mov	r7,r17
  808374:	9009883a 	mov	r4,r18
  808378:	080f3cc0 	call	80f3cc <__eqdf2>
  80837c:	1000171e 	bne	r2,zero,8083dc <_dtoa_r+0x728>
  808380:	a080004c 	andi	r2,r20,1
  808384:	10001526 	beq	r2,zero,8083dc <_dtoa_r+0x728>
  808388:	d8800d17 	ldw	r2,52(sp)
  80838c:	d8800415 	stw	r2,16(sp)
  808390:	e009883a 	mov	r4,fp
  808394:	213fffc4 	addi	r4,r4,-1
  808398:	20c00007 	ldb	r3,0(r4)
  80839c:	00800e44 	movi	r2,57
  8083a0:	1880081e 	bne	r3,r2,8083c4 <_dtoa_r+0x710>
  8083a4:	d8800517 	ldw	r2,20(sp)
  8083a8:	113ffa1e 	bne	r2,r4,808394 <_dtoa_r+0x6e0>
  8083ac:	d8c00417 	ldw	r3,16(sp)
  8083b0:	d9800517 	ldw	r6,20(sp)
  8083b4:	00800c04 	movi	r2,48
  8083b8:	18c00044 	addi	r3,r3,1
  8083bc:	d8c00415 	stw	r3,16(sp)
  8083c0:	30800005 	stb	r2,0(r6)
  8083c4:	20800003 	ldbu	r2,0(r4)
  8083c8:	d8c00417 	ldw	r3,16(sp)
  8083cc:	27000044 	addi	fp,r4,1
  8083d0:	10800044 	addi	r2,r2,1
  8083d4:	d8c00d15 	stw	r3,52(sp)
  8083d8:	20800005 	stb	r2,0(r4)
  8083dc:	d9001617 	ldw	r4,88(sp)
  8083e0:	d9400717 	ldw	r5,28(sp)
  8083e4:	080981c0 	call	80981c <_Bfree>
  8083e8:	e0000005 	stb	zero,0(fp)
  8083ec:	d9800d17 	ldw	r6,52(sp)
  8083f0:	d8c02717 	ldw	r3,156(sp)
  8083f4:	d9002917 	ldw	r4,164(sp)
  8083f8:	30800044 	addi	r2,r6,1
  8083fc:	18800015 	stw	r2,0(r3)
  808400:	20029c26 	beq	r4,zero,808e74 <_dtoa_r+0x11c0>
  808404:	d8c00517 	ldw	r3,20(sp)
  808408:	27000015 	stw	fp,0(r4)
  80840c:	003e5d06 	br	807d84 <_dtoa_r+0xd0>
  808410:	d9800d17 	ldw	r6,52(sp)
  808414:	00c02074 	movhi	r3,129
  808418:	18d40e04 	addi	r3,r3,20536
  80841c:	d9001217 	ldw	r4,72(sp)
  808420:	300490fa 	slli	r2,r6,3
  808424:	d9401317 	ldw	r5,76(sp)
  808428:	10c5883a 	add	r2,r2,r3
  80842c:	12000017 	ldw	r8,0(r2)
  808430:	12400117 	ldw	r9,4(r2)
  808434:	400d883a 	mov	r6,r8
  808438:	480f883a 	mov	r7,r9
  80843c:	080f5ec0 	call	80f5ec <__ltdf2>
  808440:	1000030e 	bge	r2,zero,808450 <_dtoa_r+0x79c>
  808444:	d8800d17 	ldw	r2,52(sp)
  808448:	10bfffc4 	addi	r2,r2,-1
  80844c:	d8800d15 	stw	r2,52(sp)
  808450:	d8000c15 	stw	zero,48(sp)
  808454:	003ea806 	br	807ef8 <_dtoa_r+0x244>
  808458:	d9000b17 	ldw	r4,44(sp)
  80845c:	202cc03a 	cmpne	r22,r4,zero
  808460:	b000c71e 	bne	r22,zero,808780 <_dtoa_r+0xacc>
  808464:	dc001117 	ldw	r16,68(sp)
  808468:	dc801017 	ldw	r18,64(sp)
  80846c:	0027883a 	mov	r19,zero
  808470:	04000b0e 	bge	zero,r16,8084a0 <_dtoa_r+0x7ec>
  808474:	d8c00a17 	ldw	r3,40(sp)
  808478:	00c0090e 	bge	zero,r3,8084a0 <_dtoa_r+0x7ec>
  80847c:	8005883a 	mov	r2,r16
  808480:	1c011316 	blt	r3,r16,8088d0 <_dtoa_r+0xc1c>
  808484:	d9000a17 	ldw	r4,40(sp)
  808488:	d9801117 	ldw	r6,68(sp)
  80848c:	80a1c83a 	sub	r16,r16,r2
  808490:	2089c83a 	sub	r4,r4,r2
  808494:	308dc83a 	sub	r6,r6,r2
  808498:	d9000a15 	stw	r4,40(sp)
  80849c:	d9801115 	stw	r6,68(sp)
  8084a0:	d8801017 	ldw	r2,64(sp)
  8084a4:	0080150e 	bge	zero,r2,8084fc <_dtoa_r+0x848>
  8084a8:	d8c00b17 	ldw	r3,44(sp)
  8084ac:	1805003a 	cmpeq	r2,r3,zero
  8084b0:	1001c91e 	bne	r2,zero,808bd8 <_dtoa_r+0xf24>
  8084b4:	04800e0e 	bge	zero,r18,8084f0 <_dtoa_r+0x83c>
  8084b8:	d9001617 	ldw	r4,88(sp)
  8084bc:	980b883a 	mov	r5,r19
  8084c0:	900d883a 	mov	r6,r18
  8084c4:	080a5d00 	call	80a5d0 <__pow5mult>
  8084c8:	d9001617 	ldw	r4,88(sp)
  8084cc:	d9800717 	ldw	r6,28(sp)
  8084d0:	100b883a 	mov	r5,r2
  8084d4:	1027883a 	mov	r19,r2
  8084d8:	080a2ac0 	call	80a2ac <__multiply>
  8084dc:	d9001617 	ldw	r4,88(sp)
  8084e0:	d9400717 	ldw	r5,28(sp)
  8084e4:	1023883a 	mov	r17,r2
  8084e8:	080981c0 	call	80981c <_Bfree>
  8084ec:	dc400715 	stw	r17,28(sp)
  8084f0:	d9001017 	ldw	r4,64(sp)
  8084f4:	248dc83a 	sub	r6,r4,r18
  8084f8:	30010e1e 	bne	r6,zero,808934 <_dtoa_r+0xc80>
  8084fc:	d9001617 	ldw	r4,88(sp)
  808500:	04400044 	movi	r17,1
  808504:	880b883a 	mov	r5,r17
  808508:	080a4940 	call	80a494 <__i2b>
  80850c:	d9800917 	ldw	r6,36(sp)
  808510:	1025883a 	mov	r18,r2
  808514:	0180040e 	bge	zero,r6,808528 <_dtoa_r+0x874>
  808518:	d9001617 	ldw	r4,88(sp)
  80851c:	100b883a 	mov	r5,r2
  808520:	080a5d00 	call	80a5d0 <__pow5mult>
  808524:	1025883a 	mov	r18,r2
  808528:	d8801717 	ldw	r2,92(sp)
  80852c:	8880f30e 	bge	r17,r2,8088fc <_dtoa_r+0xc48>
  808530:	0023883a 	mov	r17,zero
  808534:	d9800917 	ldw	r6,36(sp)
  808538:	30019e1e 	bne	r6,zero,808bb4 <_dtoa_r+0xf00>
  80853c:	00c00044 	movi	r3,1
  808540:	d9000a17 	ldw	r4,40(sp)
  808544:	20c5883a 	add	r2,r4,r3
  808548:	10c007cc 	andi	r3,r2,31
  80854c:	1800841e 	bne	r3,zero,808760 <_dtoa_r+0xaac>
  808550:	00800704 	movi	r2,28
  808554:	d9000a17 	ldw	r4,40(sp)
  808558:	d9801117 	ldw	r6,68(sp)
  80855c:	80a1883a 	add	r16,r16,r2
  808560:	2089883a 	add	r4,r4,r2
  808564:	308d883a 	add	r6,r6,r2
  808568:	d9000a15 	stw	r4,40(sp)
  80856c:	d9801115 	stw	r6,68(sp)
  808570:	d8801117 	ldw	r2,68(sp)
  808574:	0080050e 	bge	zero,r2,80858c <_dtoa_r+0x8d8>
  808578:	d9400717 	ldw	r5,28(sp)
  80857c:	d9001617 	ldw	r4,88(sp)
  808580:	100d883a 	mov	r6,r2
  808584:	080a1600 	call	80a160 <__lshift>
  808588:	d8800715 	stw	r2,28(sp)
  80858c:	d8c00a17 	ldw	r3,40(sp)
  808590:	00c0050e 	bge	zero,r3,8085a8 <_dtoa_r+0x8f4>
  808594:	d9001617 	ldw	r4,88(sp)
  808598:	900b883a 	mov	r5,r18
  80859c:	180d883a 	mov	r6,r3
  8085a0:	080a1600 	call	80a160 <__lshift>
  8085a4:	1025883a 	mov	r18,r2
  8085a8:	d9000c17 	ldw	r4,48(sp)
  8085ac:	2005003a 	cmpeq	r2,r4,zero
  8085b0:	10016f26 	beq	r2,zero,808b70 <_dtoa_r+0xebc>
  8085b4:	d9000f17 	ldw	r4,60(sp)
  8085b8:	0102170e 	bge	zero,r4,808e18 <_dtoa_r+0x1164>
  8085bc:	d9800b17 	ldw	r6,44(sp)
  8085c0:	3005003a 	cmpeq	r2,r6,zero
  8085c4:	1000881e 	bne	r2,zero,8087e8 <_dtoa_r+0xb34>
  8085c8:	0400050e 	bge	zero,r16,8085e0 <_dtoa_r+0x92c>
  8085cc:	d9001617 	ldw	r4,88(sp)
  8085d0:	980b883a 	mov	r5,r19
  8085d4:	800d883a 	mov	r6,r16
  8085d8:	080a1600 	call	80a160 <__lshift>
  8085dc:	1027883a 	mov	r19,r2
  8085e0:	8804c03a 	cmpne	r2,r17,zero
  8085e4:	1002541e 	bne	r2,zero,808f38 <_dtoa_r+0x1284>
  8085e8:	980b883a 	mov	r5,r19
  8085ec:	dd800517 	ldw	r22,20(sp)
  8085f0:	dcc00615 	stw	r19,24(sp)
  8085f4:	a700004c 	andi	fp,r20,1
  8085f8:	2827883a 	mov	r19,r5
  8085fc:	d9000717 	ldw	r4,28(sp)
  808600:	900b883a 	mov	r5,r18
  808604:	0807a9c0 	call	807a9c <quorem>
  808608:	d9000717 	ldw	r4,28(sp)
  80860c:	d9400617 	ldw	r5,24(sp)
  808610:	1023883a 	mov	r17,r2
  808614:	8dc00c04 	addi	r23,r17,48
  808618:	08099780 	call	809978 <__mcmp>
  80861c:	d9001617 	ldw	r4,88(sp)
  808620:	900b883a 	mov	r5,r18
  808624:	980d883a 	mov	r6,r19
  808628:	1029883a 	mov	r20,r2
  80862c:	0809fd40 	call	809fd4 <__mdiff>
  808630:	102b883a 	mov	r21,r2
  808634:	10800317 	ldw	r2,12(r2)
  808638:	1001281e 	bne	r2,zero,808adc <_dtoa_r+0xe28>
  80863c:	d9000717 	ldw	r4,28(sp)
  808640:	a80b883a 	mov	r5,r21
  808644:	08099780 	call	809978 <__mcmp>
  808648:	d9001617 	ldw	r4,88(sp)
  80864c:	1021883a 	mov	r16,r2
  808650:	a80b883a 	mov	r5,r21
  808654:	080981c0 	call	80981c <_Bfree>
  808658:	8000041e 	bne	r16,zero,80866c <_dtoa_r+0x9b8>
  80865c:	d8801717 	ldw	r2,92(sp)
  808660:	1000021e 	bne	r2,zero,80866c <_dtoa_r+0x9b8>
  808664:	e004c03a 	cmpne	r2,fp,zero
  808668:	10011726 	beq	r2,zero,808ac8 <_dtoa_r+0xe14>
  80866c:	a0010616 	blt	r20,zero,808a88 <_dtoa_r+0xdd4>
  808670:	a000041e 	bne	r20,zero,808684 <_dtoa_r+0x9d0>
  808674:	d8c01717 	ldw	r3,92(sp)
  808678:	1800021e 	bne	r3,zero,808684 <_dtoa_r+0x9d0>
  80867c:	e004c03a 	cmpne	r2,fp,zero
  808680:	10010126 	beq	r2,zero,808a88 <_dtoa_r+0xdd4>
  808684:	04023d16 	blt	zero,r16,808f7c <_dtoa_r+0x12c8>
  808688:	b5c00005 	stb	r23,0(r22)
  80868c:	d9800517 	ldw	r6,20(sp)
  808690:	d9000f17 	ldw	r4,60(sp)
  808694:	b5800044 	addi	r22,r22,1
  808698:	3105883a 	add	r2,r6,r4
  80869c:	b0806526 	beq	r22,r2,808834 <_dtoa_r+0xb80>
  8086a0:	d9400717 	ldw	r5,28(sp)
  8086a4:	d9001617 	ldw	r4,88(sp)
  8086a8:	01800284 	movi	r6,10
  8086ac:	000f883a 	mov	r7,zero
  8086b0:	080a4d00 	call	80a4d0 <__multadd>
  8086b4:	d8800715 	stw	r2,28(sp)
  8086b8:	d8800617 	ldw	r2,24(sp)
  8086bc:	14c10c26 	beq	r2,r19,808af0 <_dtoa_r+0xe3c>
  8086c0:	d9400617 	ldw	r5,24(sp)
  8086c4:	d9001617 	ldw	r4,88(sp)
  8086c8:	01800284 	movi	r6,10
  8086cc:	000f883a 	mov	r7,zero
  8086d0:	080a4d00 	call	80a4d0 <__multadd>
  8086d4:	d9001617 	ldw	r4,88(sp)
  8086d8:	980b883a 	mov	r5,r19
  8086dc:	01800284 	movi	r6,10
  8086e0:	000f883a 	mov	r7,zero
  8086e4:	d8800615 	stw	r2,24(sp)
  8086e8:	080a4d00 	call	80a4d0 <__multadd>
  8086ec:	1027883a 	mov	r19,r2
  8086f0:	003fc206 	br	8085fc <_dtoa_r+0x948>
  8086f4:	2445c83a 	sub	r2,r4,r17
  8086f8:	a088983a 	sll	r4,r20,r2
  8086fc:	003e4b06 	br	80802c <_dtoa_r+0x378>
  808700:	01bfffc4 	movi	r6,-1
  808704:	00800044 	movi	r2,1
  808708:	d9800e15 	stw	r6,56(sp)
  80870c:	d9800f15 	stw	r6,60(sp)
  808710:	d8800b15 	stw	r2,44(sp)
  808714:	d8c01617 	ldw	r3,88(sp)
  808718:	008005c4 	movi	r2,23
  80871c:	18001115 	stw	zero,68(r3)
  808720:	1580082e 	bgeu	r2,r22,808744 <_dtoa_r+0xa90>
  808724:	00c00104 	movi	r3,4
  808728:	0009883a 	mov	r4,zero
  80872c:	18c7883a 	add	r3,r3,r3
  808730:	18800504 	addi	r2,r3,20
  808734:	21000044 	addi	r4,r4,1
  808738:	b0bffc2e 	bgeu	r22,r2,80872c <_dtoa_r+0xa78>
  80873c:	d9801617 	ldw	r6,88(sp)
  808740:	31001115 	stw	r4,68(r6)
  808744:	dc000f17 	ldw	r16,60(sp)
  808748:	003e4b06 	br	808078 <_dtoa_r+0x3c4>
  80874c:	d9801717 	ldw	r6,92(sp)
  808750:	0023883a 	mov	r17,zero
  808754:	31bfff04 	addi	r6,r6,-4
  808758:	d9801715 	stw	r6,92(sp)
  80875c:	003df806 	br	807f40 <_dtoa_r+0x28c>
  808760:	00800804 	movi	r2,32
  808764:	10c9c83a 	sub	r4,r2,r3
  808768:	00c00104 	movi	r3,4
  80876c:	19005a16 	blt	r3,r4,8088d8 <_dtoa_r+0xc24>
  808770:	008000c4 	movi	r2,3
  808774:	113f7e16 	blt	r2,r4,808570 <_dtoa_r+0x8bc>
  808778:	20800704 	addi	r2,r4,28
  80877c:	003f7506 	br	808554 <_dtoa_r+0x8a0>
  808780:	d9801717 	ldw	r6,92(sp)
  808784:	00800044 	movi	r2,1
  808788:	1180a10e 	bge	r2,r6,808a10 <_dtoa_r+0xd5c>
  80878c:	d9800f17 	ldw	r6,60(sp)
  808790:	d8c01017 	ldw	r3,64(sp)
  808794:	30bfffc4 	addi	r2,r6,-1
  808798:	1881c616 	blt	r3,r2,808eb4 <_dtoa_r+0x1200>
  80879c:	18a5c83a 	sub	r18,r3,r2
  8087a0:	d8800f17 	ldw	r2,60(sp)
  8087a4:	10026216 	blt	r2,zero,809130 <_dtoa_r+0x147c>
  8087a8:	dc001117 	ldw	r16,68(sp)
  8087ac:	1007883a 	mov	r3,r2
  8087b0:	d9800a17 	ldw	r6,40(sp)
  8087b4:	d8801117 	ldw	r2,68(sp)
  8087b8:	d9001617 	ldw	r4,88(sp)
  8087bc:	30cd883a 	add	r6,r6,r3
  8087c0:	10c5883a 	add	r2,r2,r3
  8087c4:	01400044 	movi	r5,1
  8087c8:	d9800a15 	stw	r6,40(sp)
  8087cc:	d8801115 	stw	r2,68(sp)
  8087d0:	080a4940 	call	80a494 <__i2b>
  8087d4:	1027883a 	mov	r19,r2
  8087d8:	003f2506 	br	808470 <_dtoa_r+0x7bc>
  8087dc:	00c02074 	movhi	r3,129
  8087e0:	18d34504 	addi	r3,r3,19732
  8087e4:	003d6706 	br	807d84 <_dtoa_r+0xd0>
  8087e8:	dd800517 	ldw	r22,20(sp)
  8087ec:	04000044 	movi	r16,1
  8087f0:	00000706 	br	808810 <_dtoa_r+0xb5c>
  8087f4:	d9400717 	ldw	r5,28(sp)
  8087f8:	d9001617 	ldw	r4,88(sp)
  8087fc:	01800284 	movi	r6,10
  808800:	000f883a 	mov	r7,zero
  808804:	080a4d00 	call	80a4d0 <__multadd>
  808808:	d8800715 	stw	r2,28(sp)
  80880c:	84000044 	addi	r16,r16,1
  808810:	d9000717 	ldw	r4,28(sp)
  808814:	900b883a 	mov	r5,r18
  808818:	0807a9c0 	call	807a9c <quorem>
  80881c:	15c00c04 	addi	r23,r2,48
  808820:	b5c00005 	stb	r23,0(r22)
  808824:	d8c00f17 	ldw	r3,60(sp)
  808828:	b5800044 	addi	r22,r22,1
  80882c:	80fff116 	blt	r16,r3,8087f4 <_dtoa_r+0xb40>
  808830:	d8000615 	stw	zero,24(sp)
  808834:	d9400717 	ldw	r5,28(sp)
  808838:	d9001617 	ldw	r4,88(sp)
  80883c:	01800044 	movi	r6,1
  808840:	080a1600 	call	80a160 <__lshift>
  808844:	1009883a 	mov	r4,r2
  808848:	900b883a 	mov	r5,r18
  80884c:	d8800715 	stw	r2,28(sp)
  808850:	08099780 	call	809978 <__mcmp>
  808854:	00803c0e 	bge	zero,r2,808948 <_dtoa_r+0xc94>
  808858:	b009883a 	mov	r4,r22
  80885c:	213fffc4 	addi	r4,r4,-1
  808860:	21400003 	ldbu	r5,0(r4)
  808864:	00800e44 	movi	r2,57
  808868:	28c03fcc 	andi	r3,r5,255
  80886c:	18c0201c 	xori	r3,r3,128
  808870:	18ffe004 	addi	r3,r3,-128
  808874:	1881981e 	bne	r3,r2,808ed8 <_dtoa_r+0x1224>
  808878:	d9800517 	ldw	r6,20(sp)
  80887c:	21bff71e 	bne	r4,r6,80885c <_dtoa_r+0xba8>
  808880:	d8800d17 	ldw	r2,52(sp)
  808884:	37000044 	addi	fp,r6,1
  808888:	10800044 	addi	r2,r2,1
  80888c:	d8800d15 	stw	r2,52(sp)
  808890:	00800c44 	movi	r2,49
  808894:	30800005 	stb	r2,0(r6)
  808898:	d9001617 	ldw	r4,88(sp)
  80889c:	900b883a 	mov	r5,r18
  8088a0:	080981c0 	call	80981c <_Bfree>
  8088a4:	983ecd26 	beq	r19,zero,8083dc <_dtoa_r+0x728>
  8088a8:	d8c00617 	ldw	r3,24(sp)
  8088ac:	18000426 	beq	r3,zero,8088c0 <_dtoa_r+0xc0c>
  8088b0:	1cc00326 	beq	r3,r19,8088c0 <_dtoa_r+0xc0c>
  8088b4:	d9001617 	ldw	r4,88(sp)
  8088b8:	180b883a 	mov	r5,r3
  8088bc:	080981c0 	call	80981c <_Bfree>
  8088c0:	d9001617 	ldw	r4,88(sp)
  8088c4:	980b883a 	mov	r5,r19
  8088c8:	080981c0 	call	80981c <_Bfree>
  8088cc:	003ec306 	br	8083dc <_dtoa_r+0x728>
  8088d0:	1805883a 	mov	r2,r3
  8088d4:	003eeb06 	br	808484 <_dtoa_r+0x7d0>
  8088d8:	d9800a17 	ldw	r6,40(sp)
  8088dc:	d8c01117 	ldw	r3,68(sp)
  8088e0:	20bfff04 	addi	r2,r4,-4
  8088e4:	308d883a 	add	r6,r6,r2
  8088e8:	1887883a 	add	r3,r3,r2
  8088ec:	80a1883a 	add	r16,r16,r2
  8088f0:	d9800a15 	stw	r6,40(sp)
  8088f4:	d8c01115 	stw	r3,68(sp)
  8088f8:	003f1d06 	br	808570 <_dtoa_r+0x8bc>
  8088fc:	a03f0c1e 	bne	r20,zero,808530 <_dtoa_r+0x87c>
  808900:	00800434 	movhi	r2,16
  808904:	10bfffc4 	addi	r2,r2,-1
  808908:	a884703a 	and	r2,r21,r2
  80890c:	103f081e 	bne	r2,zero,808530 <_dtoa_r+0x87c>
  808910:	a89ffc2c 	andhi	r2,r21,32752
  808914:	103f0626 	beq	r2,zero,808530 <_dtoa_r+0x87c>
  808918:	d8c01117 	ldw	r3,68(sp)
  80891c:	d9000a17 	ldw	r4,40(sp)
  808920:	18c00044 	addi	r3,r3,1
  808924:	21000044 	addi	r4,r4,1
  808928:	d8c01115 	stw	r3,68(sp)
  80892c:	d9000a15 	stw	r4,40(sp)
  808930:	003f0006 	br	808534 <_dtoa_r+0x880>
  808934:	d9400717 	ldw	r5,28(sp)
  808938:	d9001617 	ldw	r4,88(sp)
  80893c:	080a5d00 	call	80a5d0 <__pow5mult>
  808940:	d8800715 	stw	r2,28(sp)
  808944:	003eed06 	br	8084fc <_dtoa_r+0x848>
  808948:	1000021e 	bne	r2,zero,808954 <_dtoa_r+0xca0>
  80894c:	b880004c 	andi	r2,r23,1
  808950:	103fc11e 	bne	r2,zero,808858 <_dtoa_r+0xba4>
  808954:	b5bfffc4 	addi	r22,r22,-1
  808958:	b0c00007 	ldb	r3,0(r22)
  80895c:	00800c04 	movi	r2,48
  808960:	18bffc26 	beq	r3,r2,808954 <_dtoa_r+0xca0>
  808964:	b7000044 	addi	fp,r22,1
  808968:	003fcb06 	br	808898 <_dtoa_r+0xbe4>
  80896c:	d9800d17 	ldw	r6,52(sp)
  808970:	018fc83a 	sub	r7,zero,r6
  808974:	3801f726 	beq	r7,zero,809154 <_dtoa_r+0x14a0>
  808978:	398003cc 	andi	r6,r7,15
  80897c:	300c90fa 	slli	r6,r6,3
  808980:	01402074 	movhi	r5,129
  808984:	29540e04 	addi	r5,r5,20536
  808988:	d9001217 	ldw	r4,72(sp)
  80898c:	314d883a 	add	r6,r6,r5
  808990:	30c00117 	ldw	r3,4(r6)
  808994:	30800017 	ldw	r2,0(r6)
  808998:	d9401317 	ldw	r5,76(sp)
  80899c:	3821d13a 	srai	r16,r7,4
  8089a0:	100d883a 	mov	r6,r2
  8089a4:	180f883a 	mov	r7,r3
  8089a8:	080edb00 	call	80edb0 <__muldf3>
  8089ac:	1011883a 	mov	r8,r2
  8089b0:	1813883a 	mov	r9,r3
  8089b4:	1029883a 	mov	r20,r2
  8089b8:	182b883a 	mov	r21,r3
  8089bc:	8001e526 	beq	r16,zero,809154 <_dtoa_r+0x14a0>
  8089c0:	05800084 	movi	r22,2
  8089c4:	04402074 	movhi	r17,129
  8089c8:	8c544004 	addi	r17,r17,20736
  8089cc:	8080004c 	andi	r2,r16,1
  8089d0:	1005003a 	cmpeq	r2,r2,zero
  8089d4:	1000081e 	bne	r2,zero,8089f8 <_dtoa_r+0xd44>
  8089d8:	89800017 	ldw	r6,0(r17)
  8089dc:	89c00117 	ldw	r7,4(r17)
  8089e0:	480b883a 	mov	r5,r9
  8089e4:	4009883a 	mov	r4,r8
  8089e8:	080edb00 	call	80edb0 <__muldf3>
  8089ec:	1011883a 	mov	r8,r2
  8089f0:	b5800044 	addi	r22,r22,1
  8089f4:	1813883a 	mov	r9,r3
  8089f8:	8021d07a 	srai	r16,r16,1
  8089fc:	8c400204 	addi	r17,r17,8
  808a00:	803ff21e 	bne	r16,zero,8089cc <_dtoa_r+0xd18>
  808a04:	4029883a 	mov	r20,r8
  808a08:	482b883a 	mov	r21,r9
  808a0c:	003dca06 	br	808138 <_dtoa_r+0x484>
  808a10:	d9000817 	ldw	r4,32(sp)
  808a14:	2005003a 	cmpeq	r2,r4,zero
  808a18:	1001f61e 	bne	r2,zero,8091f4 <_dtoa_r+0x1540>
  808a1c:	dc001117 	ldw	r16,68(sp)
  808a20:	dc801017 	ldw	r18,64(sp)
  808a24:	18c10cc4 	addi	r3,r3,1075
  808a28:	003f6106 	br	8087b0 <_dtoa_r+0xafc>
  808a2c:	d8000b15 	stw	zero,44(sp)
  808a30:	d9802617 	ldw	r6,152(sp)
  808a34:	d8c00d17 	ldw	r3,52(sp)
  808a38:	30800044 	addi	r2,r6,1
  808a3c:	18ad883a 	add	r22,r3,r2
  808a40:	b13fffc4 	addi	r4,r22,-1
  808a44:	d9000e15 	stw	r4,56(sp)
  808a48:	0581f60e 	bge	zero,r22,809224 <_dtoa_r+0x1570>
  808a4c:	dd800f15 	stw	r22,60(sp)
  808a50:	003f3006 	br	808714 <_dtoa_r+0xa60>
  808a54:	d8000b15 	stw	zero,44(sp)
  808a58:	d9002617 	ldw	r4,152(sp)
  808a5c:	0101eb0e 	bge	zero,r4,80920c <_dtoa_r+0x1558>
  808a60:	202d883a 	mov	r22,r4
  808a64:	d9000e15 	stw	r4,56(sp)
  808a68:	d9000f15 	stw	r4,60(sp)
  808a6c:	003f2906 	br	808714 <_dtoa_r+0xa60>
  808a70:	01800044 	movi	r6,1
  808a74:	d9800b15 	stw	r6,44(sp)
  808a78:	003ff706 	br	808a58 <_dtoa_r+0xda4>
  808a7c:	01000044 	movi	r4,1
  808a80:	d9000b15 	stw	r4,44(sp)
  808a84:	003fea06 	br	808a30 <_dtoa_r+0xd7c>
  808a88:	04000c0e 	bge	zero,r16,808abc <_dtoa_r+0xe08>
  808a8c:	d9400717 	ldw	r5,28(sp)
  808a90:	d9001617 	ldw	r4,88(sp)
  808a94:	01800044 	movi	r6,1
  808a98:	080a1600 	call	80a160 <__lshift>
  808a9c:	1009883a 	mov	r4,r2
  808aa0:	900b883a 	mov	r5,r18
  808aa4:	d8800715 	stw	r2,28(sp)
  808aa8:	08099780 	call	809978 <__mcmp>
  808aac:	0081e00e 	bge	zero,r2,809230 <_dtoa_r+0x157c>
  808ab0:	bdc00044 	addi	r23,r23,1
  808ab4:	00800e84 	movi	r2,58
  808ab8:	b881a226 	beq	r23,r2,809144 <_dtoa_r+0x1490>
  808abc:	b7000044 	addi	fp,r22,1
  808ac0:	b5c00005 	stb	r23,0(r22)
  808ac4:	003f7406 	br	808898 <_dtoa_r+0xbe4>
  808ac8:	00800e44 	movi	r2,57
  808acc:	b8819d26 	beq	r23,r2,809144 <_dtoa_r+0x1490>
  808ad0:	053ffa0e 	bge	zero,r20,808abc <_dtoa_r+0xe08>
  808ad4:	8dc00c44 	addi	r23,r17,49
  808ad8:	003ff806 	br	808abc <_dtoa_r+0xe08>
  808adc:	d9001617 	ldw	r4,88(sp)
  808ae0:	a80b883a 	mov	r5,r21
  808ae4:	04000044 	movi	r16,1
  808ae8:	080981c0 	call	80981c <_Bfree>
  808aec:	003edf06 	br	80866c <_dtoa_r+0x9b8>
  808af0:	d9001617 	ldw	r4,88(sp)
  808af4:	980b883a 	mov	r5,r19
  808af8:	01800284 	movi	r6,10
  808afc:	000f883a 	mov	r7,zero
  808b00:	080a4d00 	call	80a4d0 <__multadd>
  808b04:	1027883a 	mov	r19,r2
  808b08:	d8800615 	stw	r2,24(sp)
  808b0c:	003ebb06 	br	8085fc <_dtoa_r+0x948>
  808b10:	d9801117 	ldw	r6,68(sp)
  808b14:	d8800d17 	ldw	r2,52(sp)
  808b18:	d8000915 	stw	zero,36(sp)
  808b1c:	308dc83a 	sub	r6,r6,r2
  808b20:	0087c83a 	sub	r3,zero,r2
  808b24:	d9801115 	stw	r6,68(sp)
  808b28:	d8c01015 	stw	r3,64(sp)
  808b2c:	003cfe06 	br	807f28 <_dtoa_r+0x274>
  808b30:	018dc83a 	sub	r6,zero,r6
  808b34:	d9801115 	stw	r6,68(sp)
  808b38:	d8000a15 	stw	zero,40(sp)
  808b3c:	003cf306 	br	807f0c <_dtoa_r+0x258>
  808b40:	d9000d17 	ldw	r4,52(sp)
  808b44:	080f6fc0 	call	80f6fc <__floatsidf>
  808b48:	880b883a 	mov	r5,r17
  808b4c:	8009883a 	mov	r4,r16
  808b50:	180f883a 	mov	r7,r3
  808b54:	100d883a 	mov	r6,r2
  808b58:	080f4540 	call	80f454 <__nedf2>
  808b5c:	103ce126 	beq	r2,zero,807ee4 <_dtoa_r+0x230>
  808b60:	d9800d17 	ldw	r6,52(sp)
  808b64:	31bfffc4 	addi	r6,r6,-1
  808b68:	d9800d15 	stw	r6,52(sp)
  808b6c:	003cdd06 	br	807ee4 <_dtoa_r+0x230>
  808b70:	d9000717 	ldw	r4,28(sp)
  808b74:	900b883a 	mov	r5,r18
  808b78:	08099780 	call	809978 <__mcmp>
  808b7c:	103e8d0e 	bge	r2,zero,8085b4 <_dtoa_r+0x900>
  808b80:	d9400717 	ldw	r5,28(sp)
  808b84:	d9001617 	ldw	r4,88(sp)
  808b88:	01800284 	movi	r6,10
  808b8c:	000f883a 	mov	r7,zero
  808b90:	080a4d00 	call	80a4d0 <__multadd>
  808b94:	d9800d17 	ldw	r6,52(sp)
  808b98:	d8800715 	stw	r2,28(sp)
  808b9c:	31bfffc4 	addi	r6,r6,-1
  808ba0:	d9800d15 	stw	r6,52(sp)
  808ba4:	b001a71e 	bne	r22,zero,809244 <_dtoa_r+0x1590>
  808ba8:	d8800e17 	ldw	r2,56(sp)
  808bac:	d8800f15 	stw	r2,60(sp)
  808bb0:	003e8006 	br	8085b4 <_dtoa_r+0x900>
  808bb4:	90800417 	ldw	r2,16(r18)
  808bb8:	1085883a 	add	r2,r2,r2
  808bbc:	1085883a 	add	r2,r2,r2
  808bc0:	1485883a 	add	r2,r2,r18
  808bc4:	11000417 	ldw	r4,16(r2)
  808bc8:	08098440 	call	809844 <__hi0bits>
  808bcc:	00c00804 	movi	r3,32
  808bd0:	1887c83a 	sub	r3,r3,r2
  808bd4:	003e5a06 	br	808540 <_dtoa_r+0x88c>
  808bd8:	d9400717 	ldw	r5,28(sp)
  808bdc:	d9801017 	ldw	r6,64(sp)
  808be0:	d9001617 	ldw	r4,88(sp)
  808be4:	080a5d00 	call	80a5d0 <__pow5mult>
  808be8:	d8800715 	stw	r2,28(sp)
  808bec:	003e4306 	br	8084fc <_dtoa_r+0x848>
  808bf0:	d9800f17 	ldw	r6,60(sp)
  808bf4:	d8800d17 	ldw	r2,52(sp)
  808bf8:	d9800315 	stw	r6,12(sp)
  808bfc:	d8800415 	stw	r2,16(sp)
  808c00:	d8c00b17 	ldw	r3,44(sp)
  808c04:	1805003a 	cmpeq	r2,r3,zero
  808c08:	1000e21e 	bne	r2,zero,808f94 <_dtoa_r+0x12e0>
  808c0c:	d9000317 	ldw	r4,12(sp)
  808c10:	0005883a 	mov	r2,zero
  808c14:	00cff834 	movhi	r3,16352
  808c18:	200c90fa 	slli	r6,r4,3
  808c1c:	01002074 	movhi	r4,129
  808c20:	21140e04 	addi	r4,r4,20536
  808c24:	180b883a 	mov	r5,r3
  808c28:	310d883a 	add	r6,r6,r4
  808c2c:	327fff17 	ldw	r9,-4(r6)
  808c30:	323ffe17 	ldw	r8,-8(r6)
  808c34:	1009883a 	mov	r4,r2
  808c38:	480f883a 	mov	r7,r9
  808c3c:	400d883a 	mov	r6,r8
  808c40:	080f1740 	call	80f174 <__divdf3>
  808c44:	180b883a 	mov	r5,r3
  808c48:	b00d883a 	mov	r6,r22
  808c4c:	b80f883a 	mov	r7,r23
  808c50:	1009883a 	mov	r4,r2
  808c54:	080ecbc0 	call	80ecbc <__subdf3>
  808c58:	a80b883a 	mov	r5,r21
  808c5c:	a009883a 	mov	r4,r20
  808c60:	d8c01915 	stw	r3,100(sp)
  808c64:	d8801815 	stw	r2,96(sp)
  808c68:	080f7f40 	call	80f7f4 <__fixdfsi>
  808c6c:	1009883a 	mov	r4,r2
  808c70:	1027883a 	mov	r19,r2
  808c74:	080f6fc0 	call	80f6fc <__floatsidf>
  808c78:	a80b883a 	mov	r5,r21
  808c7c:	a009883a 	mov	r4,r20
  808c80:	180f883a 	mov	r7,r3
  808c84:	100d883a 	mov	r6,r2
  808c88:	080ecbc0 	call	80ecbc <__subdf3>
  808c8c:	d9801817 	ldw	r6,96(sp)
  808c90:	1823883a 	mov	r17,r3
  808c94:	d8801415 	stw	r2,80(sp)
  808c98:	302d883a 	mov	r22,r6
  808c9c:	d9800517 	ldw	r6,20(sp)
  808ca0:	9cc00c04 	addi	r19,r19,48
  808ca4:	dc401515 	stw	r17,84(sp)
  808ca8:	d8c01917 	ldw	r3,100(sp)
  808cac:	34c00005 	stb	r19,0(r6)
  808cb0:	d8800517 	ldw	r2,20(sp)
  808cb4:	d9401917 	ldw	r5,100(sp)
  808cb8:	d9801417 	ldw	r6,80(sp)
  808cbc:	b009883a 	mov	r4,r22
  808cc0:	880f883a 	mov	r7,r17
  808cc4:	182f883a 	mov	r23,r3
  808cc8:	17000044 	addi	fp,r2,1
  808ccc:	080f4dc0 	call	80f4dc <__gtdf2>
  808cd0:	00804e16 	blt	zero,r2,808e0c <_dtoa_r+0x1158>
  808cd4:	d9801417 	ldw	r6,80(sp)
  808cd8:	0005883a 	mov	r2,zero
  808cdc:	00cffc34 	movhi	r3,16368
  808ce0:	180b883a 	mov	r5,r3
  808ce4:	880f883a 	mov	r7,r17
  808ce8:	1009883a 	mov	r4,r2
  808cec:	080ecbc0 	call	80ecbc <__subdf3>
  808cf0:	d9401917 	ldw	r5,100(sp)
  808cf4:	180f883a 	mov	r7,r3
  808cf8:	b009883a 	mov	r4,r22
  808cfc:	100d883a 	mov	r6,r2
  808d00:	080f4dc0 	call	80f4dc <__gtdf2>
  808d04:	00bda216 	blt	zero,r2,808390 <_dtoa_r+0x6dc>
  808d08:	d8c00317 	ldw	r3,12(sp)
  808d0c:	00800044 	movi	r2,1
  808d10:	10c01216 	blt	r2,r3,808d5c <_dtoa_r+0x10a8>
  808d14:	003d4506 	br	80822c <_dtoa_r+0x578>
  808d18:	d9801417 	ldw	r6,80(sp)
  808d1c:	0005883a 	mov	r2,zero
  808d20:	00cffc34 	movhi	r3,16368
  808d24:	180b883a 	mov	r5,r3
  808d28:	880f883a 	mov	r7,r17
  808d2c:	1009883a 	mov	r4,r2
  808d30:	080ecbc0 	call	80ecbc <__subdf3>
  808d34:	d9c01b17 	ldw	r7,108(sp)
  808d38:	180b883a 	mov	r5,r3
  808d3c:	1009883a 	mov	r4,r2
  808d40:	b00d883a 	mov	r6,r22
  808d44:	080f5ec0 	call	80f5ec <__ltdf2>
  808d48:	103d9116 	blt	r2,zero,808390 <_dtoa_r+0x6dc>
  808d4c:	d9800517 	ldw	r6,20(sp)
  808d50:	d9000317 	ldw	r4,12(sp)
  808d54:	3105883a 	add	r2,r6,r4
  808d58:	e0bd3426 	beq	fp,r2,80822c <_dtoa_r+0x578>
  808d5c:	04500934 	movhi	r17,16420
  808d60:	0021883a 	mov	r16,zero
  808d64:	b80b883a 	mov	r5,r23
  808d68:	b009883a 	mov	r4,r22
  808d6c:	800d883a 	mov	r6,r16
  808d70:	880f883a 	mov	r7,r17
  808d74:	080edb00 	call	80edb0 <__muldf3>
  808d78:	d9401517 	ldw	r5,84(sp)
  808d7c:	d9001417 	ldw	r4,80(sp)
  808d80:	880f883a 	mov	r7,r17
  808d84:	000d883a 	mov	r6,zero
  808d88:	d8801a15 	stw	r2,104(sp)
  808d8c:	d8c01b15 	stw	r3,108(sp)
  808d90:	080edb00 	call	80edb0 <__muldf3>
  808d94:	180b883a 	mov	r5,r3
  808d98:	1009883a 	mov	r4,r2
  808d9c:	1823883a 	mov	r17,r3
  808da0:	1021883a 	mov	r16,r2
  808da4:	080f7f40 	call	80f7f4 <__fixdfsi>
  808da8:	1009883a 	mov	r4,r2
  808dac:	102b883a 	mov	r21,r2
  808db0:	080f6fc0 	call	80f6fc <__floatsidf>
  808db4:	880b883a 	mov	r5,r17
  808db8:	8009883a 	mov	r4,r16
  808dbc:	180f883a 	mov	r7,r3
  808dc0:	100d883a 	mov	r6,r2
  808dc4:	080ecbc0 	call	80ecbc <__subdf3>
  808dc8:	1021883a 	mov	r16,r2
  808dcc:	d9001b17 	ldw	r4,108(sp)
  808dd0:	1823883a 	mov	r17,r3
  808dd4:	dc001415 	stw	r16,80(sp)
  808dd8:	ad400c04 	addi	r21,r21,48
  808ddc:	dc401515 	stw	r17,84(sp)
  808de0:	d8801a17 	ldw	r2,104(sp)
  808de4:	e5400005 	stb	r21,0(fp)
  808de8:	202f883a 	mov	r23,r4
  808dec:	d9c01b17 	ldw	r7,108(sp)
  808df0:	d9001417 	ldw	r4,80(sp)
  808df4:	880b883a 	mov	r5,r17
  808df8:	100d883a 	mov	r6,r2
  808dfc:	102d883a 	mov	r22,r2
  808e00:	e7000044 	addi	fp,fp,1
  808e04:	080f5ec0 	call	80f5ec <__ltdf2>
  808e08:	103fc30e 	bge	r2,zero,808d18 <_dtoa_r+0x1064>
  808e0c:	d9000417 	ldw	r4,16(sp)
  808e10:	d9000d15 	stw	r4,52(sp)
  808e14:	003d7106 	br	8083dc <_dtoa_r+0x728>
  808e18:	d9801717 	ldw	r6,92(sp)
  808e1c:	00800084 	movi	r2,2
  808e20:	11bde60e 	bge	r2,r6,8085bc <_dtoa_r+0x908>
  808e24:	203cfb1e 	bne	r4,zero,808214 <_dtoa_r+0x560>
  808e28:	d9001617 	ldw	r4,88(sp)
  808e2c:	900b883a 	mov	r5,r18
  808e30:	01800144 	movi	r6,5
  808e34:	000f883a 	mov	r7,zero
  808e38:	080a4d00 	call	80a4d0 <__multadd>
  808e3c:	d9000717 	ldw	r4,28(sp)
  808e40:	100b883a 	mov	r5,r2
  808e44:	1025883a 	mov	r18,r2
  808e48:	08099780 	call	809978 <__mcmp>
  808e4c:	00bcf10e 	bge	zero,r2,808214 <_dtoa_r+0x560>
  808e50:	d8c00d17 	ldw	r3,52(sp)
  808e54:	d9000517 	ldw	r4,20(sp)
  808e58:	d8000615 	stw	zero,24(sp)
  808e5c:	18c00044 	addi	r3,r3,1
  808e60:	d8c00d15 	stw	r3,52(sp)
  808e64:	00800c44 	movi	r2,49
  808e68:	27000044 	addi	fp,r4,1
  808e6c:	20800005 	stb	r2,0(r4)
  808e70:	003e8906 	br	808898 <_dtoa_r+0xbe4>
  808e74:	d8c00517 	ldw	r3,20(sp)
  808e78:	003bc206 	br	807d84 <_dtoa_r+0xd0>
  808e7c:	01802074 	movhi	r6,129
  808e80:	31944004 	addi	r6,r6,20736
  808e84:	30c00917 	ldw	r3,36(r6)
  808e88:	30800817 	ldw	r2,32(r6)
  808e8c:	d9001217 	ldw	r4,72(sp)
  808e90:	d9401317 	ldw	r5,76(sp)
  808e94:	180f883a 	mov	r7,r3
  808e98:	100d883a 	mov	r6,r2
  808e9c:	080f1740 	call	80f174 <__divdf3>
  808ea0:	948003cc 	andi	r18,r18,15
  808ea4:	058000c4 	movi	r22,3
  808ea8:	1029883a 	mov	r20,r2
  808eac:	182b883a 	mov	r21,r3
  808eb0:	003c8906 	br	8080d8 <_dtoa_r+0x424>
  808eb4:	d9001017 	ldw	r4,64(sp)
  808eb8:	d9800917 	ldw	r6,36(sp)
  808ebc:	0025883a 	mov	r18,zero
  808ec0:	1105c83a 	sub	r2,r2,r4
  808ec4:	2089883a 	add	r4,r4,r2
  808ec8:	308d883a 	add	r6,r6,r2
  808ecc:	d9001015 	stw	r4,64(sp)
  808ed0:	d9800915 	stw	r6,36(sp)
  808ed4:	003e3206 	br	8087a0 <_dtoa_r+0xaec>
  808ed8:	28800044 	addi	r2,r5,1
  808edc:	27000044 	addi	fp,r4,1
  808ee0:	20800005 	stb	r2,0(r4)
  808ee4:	003e6c06 	br	808898 <_dtoa_r+0xbe4>
  808ee8:	d8800f17 	ldw	r2,60(sp)
  808eec:	00bce016 	blt	zero,r2,808270 <_dtoa_r+0x5bc>
  808ef0:	d9800f17 	ldw	r6,60(sp)
  808ef4:	303cc51e 	bne	r6,zero,80820c <_dtoa_r+0x558>
  808ef8:	0005883a 	mov	r2,zero
  808efc:	00d00534 	movhi	r3,16404
  808f00:	980b883a 	mov	r5,r19
  808f04:	180f883a 	mov	r7,r3
  808f08:	9009883a 	mov	r4,r18
  808f0c:	100d883a 	mov	r6,r2
  808f10:	080edb00 	call	80edb0 <__muldf3>
  808f14:	180b883a 	mov	r5,r3
  808f18:	a80f883a 	mov	r7,r21
  808f1c:	1009883a 	mov	r4,r2
  808f20:	a00d883a 	mov	r6,r20
  808f24:	080f5640 	call	80f564 <__gedf2>
  808f28:	103cb80e 	bge	r2,zero,80820c <_dtoa_r+0x558>
  808f2c:	0027883a 	mov	r19,zero
  808f30:	0025883a 	mov	r18,zero
  808f34:	003fc606 	br	808e50 <_dtoa_r+0x119c>
  808f38:	99400117 	ldw	r5,4(r19)
  808f3c:	d9001617 	ldw	r4,88(sp)
  808f40:	0809d9c0 	call	809d9c <_Balloc>
  808f44:	99800417 	ldw	r6,16(r19)
  808f48:	11000304 	addi	r4,r2,12
  808f4c:	99400304 	addi	r5,r19,12
  808f50:	318d883a 	add	r6,r6,r6
  808f54:	318d883a 	add	r6,r6,r6
  808f58:	31800204 	addi	r6,r6,8
  808f5c:	1023883a 	mov	r17,r2
  808f60:	08031c80 	call	8031c8 <memcpy>
  808f64:	d9001617 	ldw	r4,88(sp)
  808f68:	880b883a 	mov	r5,r17
  808f6c:	01800044 	movi	r6,1
  808f70:	080a1600 	call	80a160 <__lshift>
  808f74:	100b883a 	mov	r5,r2
  808f78:	003d9c06 	br	8085ec <_dtoa_r+0x938>
  808f7c:	00800e44 	movi	r2,57
  808f80:	b8807026 	beq	r23,r2,809144 <_dtoa_r+0x1490>
  808f84:	b8800044 	addi	r2,r23,1
  808f88:	b7000044 	addi	fp,r22,1
  808f8c:	b0800005 	stb	r2,0(r22)
  808f90:	003e4106 	br	808898 <_dtoa_r+0xbe4>
  808f94:	d8800317 	ldw	r2,12(sp)
  808f98:	01802074 	movhi	r6,129
  808f9c:	31940e04 	addi	r6,r6,20536
  808fa0:	b009883a 	mov	r4,r22
  808fa4:	100e90fa 	slli	r7,r2,3
  808fa8:	b80b883a 	mov	r5,r23
  808fac:	398f883a 	add	r7,r7,r6
  808fb0:	38bffe17 	ldw	r2,-8(r7)
  808fb4:	d9800517 	ldw	r6,20(sp)
  808fb8:	38ffff17 	ldw	r3,-4(r7)
  808fbc:	37000044 	addi	fp,r6,1
  808fc0:	180f883a 	mov	r7,r3
  808fc4:	100d883a 	mov	r6,r2
  808fc8:	080edb00 	call	80edb0 <__muldf3>
  808fcc:	a80b883a 	mov	r5,r21
  808fd0:	a009883a 	mov	r4,r20
  808fd4:	182f883a 	mov	r23,r3
  808fd8:	102d883a 	mov	r22,r2
  808fdc:	080f7f40 	call	80f7f4 <__fixdfsi>
  808fe0:	1009883a 	mov	r4,r2
  808fe4:	1027883a 	mov	r19,r2
  808fe8:	080f6fc0 	call	80f6fc <__floatsidf>
  808fec:	a80b883a 	mov	r5,r21
  808ff0:	a009883a 	mov	r4,r20
  808ff4:	180f883a 	mov	r7,r3
  808ff8:	100d883a 	mov	r6,r2
  808ffc:	080ecbc0 	call	80ecbc <__subdf3>
  809000:	180b883a 	mov	r5,r3
  809004:	d8c00517 	ldw	r3,20(sp)
  809008:	9cc00c04 	addi	r19,r19,48
  80900c:	1009883a 	mov	r4,r2
  809010:	1cc00005 	stb	r19,0(r3)
  809014:	2021883a 	mov	r16,r4
  809018:	d9000317 	ldw	r4,12(sp)
  80901c:	00800044 	movi	r2,1
  809020:	2823883a 	mov	r17,r5
  809024:	20802226 	beq	r4,r2,8090b0 <_dtoa_r+0x13fc>
  809028:	1029883a 	mov	r20,r2
  80902c:	0005883a 	mov	r2,zero
  809030:	00d00934 	movhi	r3,16420
  809034:	180f883a 	mov	r7,r3
  809038:	100d883a 	mov	r6,r2
  80903c:	880b883a 	mov	r5,r17
  809040:	8009883a 	mov	r4,r16
  809044:	080edb00 	call	80edb0 <__muldf3>
  809048:	180b883a 	mov	r5,r3
  80904c:	1009883a 	mov	r4,r2
  809050:	1823883a 	mov	r17,r3
  809054:	1021883a 	mov	r16,r2
  809058:	080f7f40 	call	80f7f4 <__fixdfsi>
  80905c:	1009883a 	mov	r4,r2
  809060:	102b883a 	mov	r21,r2
  809064:	080f6fc0 	call	80f6fc <__floatsidf>
  809068:	880b883a 	mov	r5,r17
  80906c:	8009883a 	mov	r4,r16
  809070:	180f883a 	mov	r7,r3
  809074:	100d883a 	mov	r6,r2
  809078:	080ecbc0 	call	80ecbc <__subdf3>
  80907c:	180b883a 	mov	r5,r3
  809080:	d8c00517 	ldw	r3,20(sp)
  809084:	1009883a 	mov	r4,r2
  809088:	ad400c04 	addi	r21,r21,48
  80908c:	1d05883a 	add	r2,r3,r20
  809090:	15400005 	stb	r21,0(r2)
  809094:	2021883a 	mov	r16,r4
  809098:	d9000317 	ldw	r4,12(sp)
  80909c:	a5000044 	addi	r20,r20,1
  8090a0:	2823883a 	mov	r17,r5
  8090a4:	a13fe11e 	bne	r20,r4,80902c <_dtoa_r+0x1378>
  8090a8:	e505883a 	add	r2,fp,r20
  8090ac:	173fffc4 	addi	fp,r2,-1
  8090b0:	0025883a 	mov	r18,zero
  8090b4:	04cff834 	movhi	r19,16352
  8090b8:	b009883a 	mov	r4,r22
  8090bc:	b80b883a 	mov	r5,r23
  8090c0:	900d883a 	mov	r6,r18
  8090c4:	980f883a 	mov	r7,r19
  8090c8:	080ed3c0 	call	80ed3c <__adddf3>
  8090cc:	180b883a 	mov	r5,r3
  8090d0:	1009883a 	mov	r4,r2
  8090d4:	800d883a 	mov	r6,r16
  8090d8:	880f883a 	mov	r7,r17
  8090dc:	080f5ec0 	call	80f5ec <__ltdf2>
  8090e0:	103cab16 	blt	r2,zero,808390 <_dtoa_r+0x6dc>
  8090e4:	0009883a 	mov	r4,zero
  8090e8:	980b883a 	mov	r5,r19
  8090ec:	b80f883a 	mov	r7,r23
  8090f0:	b00d883a 	mov	r6,r22
  8090f4:	080ecbc0 	call	80ecbc <__subdf3>
  8090f8:	180b883a 	mov	r5,r3
  8090fc:	880f883a 	mov	r7,r17
  809100:	1009883a 	mov	r4,r2
  809104:	800d883a 	mov	r6,r16
  809108:	080f4dc0 	call	80f4dc <__gtdf2>
  80910c:	00bc470e 	bge	zero,r2,80822c <_dtoa_r+0x578>
  809110:	00c00c04 	movi	r3,48
  809114:	e73fffc4 	addi	fp,fp,-1
  809118:	e0800007 	ldb	r2,0(fp)
  80911c:	10fffd26 	beq	r2,r3,809114 <_dtoa_r+0x1460>
  809120:	d9800417 	ldw	r6,16(sp)
  809124:	e7000044 	addi	fp,fp,1
  809128:	d9800d15 	stw	r6,52(sp)
  80912c:	003cab06 	br	8083dc <_dtoa_r+0x728>
  809130:	d8c00f17 	ldw	r3,60(sp)
  809134:	d9001117 	ldw	r4,68(sp)
  809138:	20e1c83a 	sub	r16,r4,r3
  80913c:	0007883a 	mov	r3,zero
  809140:	003d9b06 	br	8087b0 <_dtoa_r+0xafc>
  809144:	00800e44 	movi	r2,57
  809148:	b0800005 	stb	r2,0(r22)
  80914c:	b5800044 	addi	r22,r22,1
  809150:	003dc106 	br	808858 <_dtoa_r+0xba4>
  809154:	05800084 	movi	r22,2
  809158:	003bf706 	br	808138 <_dtoa_r+0x484>
  80915c:	d9000f17 	ldw	r4,60(sp)
  809160:	013c000e 	bge	zero,r4,808164 <_dtoa_r+0x4b0>
  809164:	d9800e17 	ldw	r6,56(sp)
  809168:	01bc300e 	bge	zero,r6,80822c <_dtoa_r+0x578>
  80916c:	0005883a 	mov	r2,zero
  809170:	00d00934 	movhi	r3,16420
  809174:	a80b883a 	mov	r5,r21
  809178:	180f883a 	mov	r7,r3
  80917c:	a009883a 	mov	r4,r20
  809180:	100d883a 	mov	r6,r2
  809184:	080edb00 	call	80edb0 <__muldf3>
  809188:	b1000044 	addi	r4,r22,1
  80918c:	1021883a 	mov	r16,r2
  809190:	1823883a 	mov	r17,r3
  809194:	080f6fc0 	call	80f6fc <__floatsidf>
  809198:	880b883a 	mov	r5,r17
  80919c:	8009883a 	mov	r4,r16
  8091a0:	180f883a 	mov	r7,r3
  8091a4:	100d883a 	mov	r6,r2
  8091a8:	080edb00 	call	80edb0 <__muldf3>
  8091ac:	0011883a 	mov	r8,zero
  8091b0:	02500734 	movhi	r9,16412
  8091b4:	180b883a 	mov	r5,r3
  8091b8:	480f883a 	mov	r7,r9
  8091bc:	1009883a 	mov	r4,r2
  8091c0:	400d883a 	mov	r6,r8
  8091c4:	080ed3c0 	call	80ed3c <__adddf3>
  8091c8:	102d883a 	mov	r22,r2
  8091cc:	00bf3034 	movhi	r2,64704
  8091d0:	10ef883a 	add	r23,r2,r3
  8091d4:	d8800d17 	ldw	r2,52(sp)
  8091d8:	d8c00e17 	ldw	r3,56(sp)
  8091dc:	8029883a 	mov	r20,r16
  8091e0:	10bfffc4 	addi	r2,r2,-1
  8091e4:	882b883a 	mov	r21,r17
  8091e8:	d8800415 	stw	r2,16(sp)
  8091ec:	d8c00315 	stw	r3,12(sp)
  8091f0:	003e8306 	br	808c00 <_dtoa_r+0xf4c>
  8091f4:	d8800117 	ldw	r2,4(sp)
  8091f8:	dc001117 	ldw	r16,68(sp)
  8091fc:	dc801017 	ldw	r18,64(sp)
  809200:	00c00d84 	movi	r3,54
  809204:	1887c83a 	sub	r3,r3,r2
  809208:	003d6906 	br	8087b0 <_dtoa_r+0xafc>
  80920c:	01800044 	movi	r6,1
  809210:	3021883a 	mov	r16,r6
  809214:	d9800f15 	stw	r6,60(sp)
  809218:	d9802615 	stw	r6,152(sp)
  80921c:	d9800e15 	stw	r6,56(sp)
  809220:	003b9306 	br	808070 <_dtoa_r+0x3bc>
  809224:	b021883a 	mov	r16,r22
  809228:	dd800f15 	stw	r22,60(sp)
  80922c:	003b9006 	br	808070 <_dtoa_r+0x3bc>
  809230:	103e221e 	bne	r2,zero,808abc <_dtoa_r+0xe08>
  809234:	b880004c 	andi	r2,r23,1
  809238:	1005003a 	cmpeq	r2,r2,zero
  80923c:	103e1f1e 	bne	r2,zero,808abc <_dtoa_r+0xe08>
  809240:	003e1b06 	br	808ab0 <_dtoa_r+0xdfc>
  809244:	d9001617 	ldw	r4,88(sp)
  809248:	980b883a 	mov	r5,r19
  80924c:	01800284 	movi	r6,10
  809250:	000f883a 	mov	r7,zero
  809254:	080a4d00 	call	80a4d0 <__multadd>
  809258:	d8c00e17 	ldw	r3,56(sp)
  80925c:	1027883a 	mov	r19,r2
  809260:	d8c00f15 	stw	r3,60(sp)
  809264:	003cd306 	br	8085b4 <_dtoa_r+0x900>

00809268 <__sflags>:
  809268:	28c00007 	ldb	r3,0(r5)
  80926c:	00801c84 	movi	r2,114
  809270:	18800926 	beq	r3,r2,809298 <__sflags+0x30>
  809274:	00801dc4 	movi	r2,119
  809278:	18801426 	beq	r3,r2,8092cc <__sflags+0x64>
  80927c:	00801844 	movi	r2,97
  809280:	18801626 	beq	r3,r2,8092dc <__sflags+0x74>
  809284:	0007883a 	mov	r3,zero
  809288:	00800584 	movi	r2,22
  80928c:	20800015 	stw	r2,0(r4)
  809290:	1805883a 	mov	r2,r3
  809294:	f800283a 	ret
  809298:	000f883a 	mov	r7,zero
  80929c:	0011883a 	mov	r8,zero
  8092a0:	00c00104 	movi	r3,4
  8092a4:	28800047 	ldb	r2,1(r5)
  8092a8:	10000426 	beq	r2,zero,8092bc <__sflags+0x54>
  8092ac:	01000ac4 	movi	r4,43
  8092b0:	11000e26 	beq	r2,r4,8092ec <__sflags+0x84>
  8092b4:	28800087 	ldb	r2,2(r5)
  8092b8:	11000c26 	beq	r2,r4,8092ec <__sflags+0x84>
  8092bc:	3a04b03a 	or	r2,r7,r8
  8092c0:	30800015 	stw	r2,0(r6)
  8092c4:	1805883a 	mov	r2,r3
  8092c8:	f800283a 	ret
  8092cc:	01c00044 	movi	r7,1
  8092d0:	02018004 	movi	r8,1536
  8092d4:	00c00204 	movi	r3,8
  8092d8:	003ff206 	br	8092a4 <__sflags+0x3c>
  8092dc:	01c00044 	movi	r7,1
  8092e0:	02008204 	movi	r8,520
  8092e4:	00c04204 	movi	r3,264
  8092e8:	003fee06 	br	8092a4 <__sflags+0x3c>
  8092ec:	00bffcc4 	movi	r2,-13
  8092f0:	1884703a 	and	r2,r3,r2
  8092f4:	01c00084 	movi	r7,2
  8092f8:	10c00414 	ori	r3,r2,16
  8092fc:	3a04b03a 	or	r2,r7,r8
  809300:	30800015 	stw	r2,0(r6)
  809304:	003fef06 	br	8092c4 <__sflags+0x5c>

00809308 <_fread_r>:
  809308:	defff504 	addi	sp,sp,-44
  80930c:	ddc00815 	stw	r23,32(sp)
  809310:	39af383a 	mul	r23,r7,r6
  809314:	df000915 	stw	fp,36(sp)
  809318:	dd800715 	stw	r22,28(sp)
  80931c:	dcc00415 	stw	r19,16(sp)
  809320:	dc000115 	stw	r16,4(sp)
  809324:	dfc00a15 	stw	ra,40(sp)
  809328:	dd400615 	stw	r21,24(sp)
  80932c:	dd000515 	stw	r20,20(sp)
  809330:	dc800315 	stw	r18,12(sp)
  809334:	dc400215 	stw	r17,8(sp)
  809338:	d9800015 	stw	r6,0(sp)
  80933c:	3839883a 	mov	fp,r7
  809340:	2821883a 	mov	r16,r5
  809344:	202d883a 	mov	r22,r4
  809348:	dcc00b17 	ldw	r19,44(sp)
  80934c:	b8005926 	beq	r23,zero,8094b4 <_fread_r+0x1ac>
  809350:	20000226 	beq	r4,zero,80935c <_fread_r+0x54>
  809354:	20800e17 	ldw	r2,56(r4)
  809358:	10005826 	beq	r2,zero,8094bc <_fread_r+0x1b4>
  80935c:	9c400117 	ldw	r17,4(r19)
  809360:	88005916 	blt	r17,zero,8094c8 <_fread_r+0x1c0>
  809364:	9880030b 	ldhu	r2,12(r19)
  809368:	8029883a 	mov	r20,r16
  80936c:	1080008c 	andi	r2,r2,2
  809370:	1000221e 	bne	r2,zero,8093fc <_fread_r+0xf4>
  809374:	b825883a 	mov	r18,r23
  809378:	00000106 	br	809380 <_fread_r+0x78>
  80937c:	9c400117 	ldw	r17,4(r19)
  809380:	a009883a 	mov	r4,r20
  809384:	880d883a 	mov	r6,r17
  809388:	8c80542e 	bgeu	r17,r18,8094dc <_fread_r+0x1d4>
  80938c:	99400017 	ldw	r5,0(r19)
  809390:	a469883a 	add	r20,r20,r17
  809394:	9465c83a 	sub	r18,r18,r17
  809398:	08031c80 	call	8031c8 <memcpy>
  80939c:	98800017 	ldw	r2,0(r19)
  8093a0:	b009883a 	mov	r4,r22
  8093a4:	980b883a 	mov	r5,r19
  8093a8:	1461883a 	add	r16,r2,r17
  8093ac:	9c000015 	stw	r16,0(r19)
  8093b0:	0803b780 	call	803b78 <__srefill_r>
  8093b4:	103ff126 	beq	r2,zero,80937c <_fread_r+0x74>
  8093b8:	d9400017 	ldw	r5,0(sp)
  8093bc:	bc89c83a 	sub	r4,r23,r18
  8093c0:	080fc100 	call	80fc10 <__udivsi3>
  8093c4:	1039883a 	mov	fp,r2
  8093c8:	e005883a 	mov	r2,fp
  8093cc:	dfc00a17 	ldw	ra,40(sp)
  8093d0:	df000917 	ldw	fp,36(sp)
  8093d4:	ddc00817 	ldw	r23,32(sp)
  8093d8:	dd800717 	ldw	r22,28(sp)
  8093dc:	dd400617 	ldw	r21,24(sp)
  8093e0:	dd000517 	ldw	r20,20(sp)
  8093e4:	dcc00417 	ldw	r19,16(sp)
  8093e8:	dc800317 	ldw	r18,12(sp)
  8093ec:	dc400217 	ldw	r17,8(sp)
  8093f0:	dc000117 	ldw	r16,4(sp)
  8093f4:	dec00b04 	addi	sp,sp,44
  8093f8:	f800283a 	ret
  8093fc:	b825883a 	mov	r18,r23
  809400:	8dc03436 	bltu	r17,r23,8094d4 <_fread_r+0x1cc>
  809404:	99400017 	ldw	r5,0(r19)
  809408:	a009883a 	mov	r4,r20
  80940c:	900d883a 	mov	r6,r18
  809410:	08031c80 	call	8031c8 <memcpy>
  809414:	9c000017 	ldw	r16,0(r19)
  809418:	98800117 	ldw	r2,4(r19)
  80941c:	99400c17 	ldw	r5,48(r19)
  809420:	84a1883a 	add	r16,r16,r18
  809424:	14a3c83a 	sub	r17,r2,r18
  809428:	a4ab883a 	add	r21,r20,r18
  80942c:	9c400115 	stw	r17,4(r19)
  809430:	9c000015 	stw	r16,0(r19)
  809434:	bca9c83a 	sub	r20,r23,r18
  809438:	28000826 	beq	r5,zero,80945c <_fread_r+0x154>
  80943c:	a03fe226 	beq	r20,zero,8093c8 <_fread_r+0xc0>
  809440:	98801004 	addi	r2,r19,64
  809444:	28800326 	beq	r5,r2,809454 <_fread_r+0x14c>
  809448:	b009883a 	mov	r4,r22
  80944c:	0801a0c0 	call	801a0c <_free_r>
  809450:	9c000017 	ldw	r16,0(r19)
  809454:	98000c15 	stw	zero,48(r19)
  809458:	00000106 	br	809460 <_fread_r+0x158>
  80945c:	a03fda26 	beq	r20,zero,8093c8 <_fread_r+0xc0>
  809460:	9c800417 	ldw	r18,16(r19)
  809464:	9c400517 	ldw	r17,20(r19)
  809468:	9d400015 	stw	r21,0(r19)
  80946c:	9d400415 	stw	r21,16(r19)
  809470:	9d000515 	stw	r20,20(r19)
  809474:	b009883a 	mov	r4,r22
  809478:	980b883a 	mov	r5,r19
  80947c:	0803b780 	call	803b78 <__srefill_r>
  809480:	98c00117 	ldw	r3,4(r19)
  809484:	9c800415 	stw	r18,16(r19)
  809488:	9c400515 	stw	r17,20(r19)
  80948c:	a8eb883a 	add	r21,r21,r3
  809490:	9c000015 	stw	r16,0(r19)
  809494:	a0e9c83a 	sub	r20,r20,r3
  809498:	98000115 	stw	zero,4(r19)
  80949c:	103fef26 	beq	r2,zero,80945c <_fread_r+0x154>
  8094a0:	d9400017 	ldw	r5,0(sp)
  8094a4:	bd09c83a 	sub	r4,r23,r20
  8094a8:	080fc100 	call	80fc10 <__udivsi3>
  8094ac:	1039883a 	mov	fp,r2
  8094b0:	003fc506 	br	8093c8 <_fread_r+0xc0>
  8094b4:	0039883a 	mov	fp,zero
  8094b8:	003fc306 	br	8093c8 <_fread_r+0xc0>
  8094bc:	08014880 	call	801488 <__sinit>
  8094c0:	9c400117 	ldw	r17,4(r19)
  8094c4:	883fa70e 	bge	r17,zero,809364 <_fread_r+0x5c>
  8094c8:	0023883a 	mov	r17,zero
  8094cc:	98000115 	stw	zero,4(r19)
  8094d0:	003fa406 	br	809364 <_fread_r+0x5c>
  8094d4:	8825883a 	mov	r18,r17
  8094d8:	003fca06 	br	809404 <_fread_r+0xfc>
  8094dc:	99400017 	ldw	r5,0(r19)
  8094e0:	900d883a 	mov	r6,r18
  8094e4:	08031c80 	call	8031c8 <memcpy>
  8094e8:	98c00117 	ldw	r3,4(r19)
  8094ec:	98800017 	ldw	r2,0(r19)
  8094f0:	1c87c83a 	sub	r3,r3,r18
  8094f4:	1485883a 	add	r2,r2,r18
  8094f8:	98800015 	stw	r2,0(r19)
  8094fc:	98c00115 	stw	r3,4(r19)
  809500:	003fb106 	br	8093c8 <_fread_r+0xc0>

00809504 <fread>:
  809504:	00802074 	movhi	r2,129
  809508:	109be504 	addi	r2,r2,28564
  80950c:	2017883a 	mov	r11,r4
  809510:	11000017 	ldw	r4,0(r2)
  809514:	defffe04 	addi	sp,sp,-8
  809518:	3013883a 	mov	r9,r6
  80951c:	2805883a 	mov	r2,r5
  809520:	d9c00015 	stw	r7,0(sp)
  809524:	580b883a 	mov	r5,r11
  809528:	100d883a 	mov	r6,r2
  80952c:	480f883a 	mov	r7,r9
  809530:	dfc00115 	stw	ra,4(sp)
  809534:	08093080 	call	809308 <_fread_r>
  809538:	dfc00117 	ldw	ra,4(sp)
  80953c:	dec00204 	addi	sp,sp,8
  809540:	f800283a 	ret

00809544 <_isatty_r>:
  809544:	defffd04 	addi	sp,sp,-12
  809548:	dc000015 	stw	r16,0(sp)
  80954c:	040020b4 	movhi	r16,130
  809550:	84233b04 	addi	r16,r16,-29460
  809554:	dc400115 	stw	r17,4(sp)
  809558:	80000015 	stw	zero,0(r16)
  80955c:	2023883a 	mov	r17,r4
  809560:	2809883a 	mov	r4,r5
  809564:	dfc00215 	stw	ra,8(sp)
  809568:	0810a800 	call	810a80 <isatty>
  80956c:	1007883a 	mov	r3,r2
  809570:	00bfffc4 	movi	r2,-1
  809574:	18800626 	beq	r3,r2,809590 <_isatty_r+0x4c>
  809578:	1805883a 	mov	r2,r3
  80957c:	dfc00217 	ldw	ra,8(sp)
  809580:	dc400117 	ldw	r17,4(sp)
  809584:	dc000017 	ldw	r16,0(sp)
  809588:	dec00304 	addi	sp,sp,12
  80958c:	f800283a 	ret
  809590:	80800017 	ldw	r2,0(r16)
  809594:	103ff826 	beq	r2,zero,809578 <_isatty_r+0x34>
  809598:	88800015 	stw	r2,0(r17)
  80959c:	1805883a 	mov	r2,r3
  8095a0:	dfc00217 	ldw	ra,8(sp)
  8095a4:	dc400117 	ldw	r17,4(sp)
  8095a8:	dc000017 	ldw	r16,0(sp)
  8095ac:	dec00304 	addi	sp,sp,12
  8095b0:	f800283a 	ret

008095b4 <iswspace>:
  8095b4:	00803fc4 	movi	r2,255
  8095b8:	0007883a 	mov	r3,zero
  8095bc:	11000636 	bltu	r2,r4,8095d8 <iswspace+0x24>
  8095c0:	00802074 	movhi	r2,129
  8095c4:	109be904 	addi	r2,r2,28580
  8095c8:	10c00017 	ldw	r3,0(r2)
  8095cc:	1907883a 	add	r3,r3,r4
  8095d0:	18800003 	ldbu	r2,0(r3)
  8095d4:	10c0020c 	andi	r3,r2,8
  8095d8:	1805883a 	mov	r2,r3
  8095dc:	f800283a 	ret

008095e0 <__locale_charset>:
  8095e0:	d0a00817 	ldw	r2,-32736(gp)
  8095e4:	f800283a 	ret

008095e8 <_localeconv_r>:
  8095e8:	00802074 	movhi	r2,129
  8095ec:	10940204 	addi	r2,r2,20488
  8095f0:	f800283a 	ret

008095f4 <localeconv>:
  8095f4:	00802074 	movhi	r2,129
  8095f8:	109be504 	addi	r2,r2,28564
  8095fc:	11000017 	ldw	r4,0(r2)
  809600:	08095e81 	jmpi	8095e8 <_localeconv_r>

00809604 <_setlocale_r>:
  809604:	defffc04 	addi	sp,sp,-16
  809608:	00c02074 	movhi	r3,129
  80960c:	18d32c04 	addi	r3,r3,19632
  809610:	dc800215 	stw	r18,8(sp)
  809614:	dc400115 	stw	r17,4(sp)
  809618:	dc000015 	stw	r16,0(sp)
  80961c:	2023883a 	mov	r17,r4
  809620:	2825883a 	mov	r18,r5
  809624:	dfc00315 	stw	ra,12(sp)
  809628:	3021883a 	mov	r16,r6
  80962c:	3009883a 	mov	r4,r6
  809630:	180b883a 	mov	r5,r3
  809634:	30000926 	beq	r6,zero,80965c <_setlocale_r+0x58>
  809638:	080a9c00 	call	80a9c0 <strcmp>
  80963c:	8009883a 	mov	r4,r16
  809640:	01402074 	movhi	r5,129
  809644:	29533d04 	addi	r5,r5,19700
  809648:	10000b1e 	bne	r2,zero,809678 <_setlocale_r+0x74>
  80964c:	8c000d15 	stw	r16,52(r17)
  809650:	8c800c15 	stw	r18,48(r17)
  809654:	00c02074 	movhi	r3,129
  809658:	18d32c04 	addi	r3,r3,19632
  80965c:	1805883a 	mov	r2,r3
  809660:	dfc00317 	ldw	ra,12(sp)
  809664:	dc800217 	ldw	r18,8(sp)
  809668:	dc400117 	ldw	r17,4(sp)
  80966c:	dc000017 	ldw	r16,0(sp)
  809670:	dec00404 	addi	sp,sp,16
  809674:	f800283a 	ret
  809678:	080a9c00 	call	80a9c0 <strcmp>
  80967c:	0007883a 	mov	r3,zero
  809680:	103ff226 	beq	r2,zero,80964c <_setlocale_r+0x48>
  809684:	003ff506 	br	80965c <_setlocale_r+0x58>

00809688 <setlocale>:
  809688:	01802074 	movhi	r6,129
  80968c:	319be504 	addi	r6,r6,28564
  809690:	2007883a 	mov	r3,r4
  809694:	31000017 	ldw	r4,0(r6)
  809698:	280d883a 	mov	r6,r5
  80969c:	180b883a 	mov	r5,r3
  8096a0:	08096041 	jmpi	809604 <_setlocale_r>

008096a4 <_lseek_r>:
  8096a4:	defffd04 	addi	sp,sp,-12
  8096a8:	dc000015 	stw	r16,0(sp)
  8096ac:	040020b4 	movhi	r16,130
  8096b0:	84233b04 	addi	r16,r16,-29460
  8096b4:	dc400115 	stw	r17,4(sp)
  8096b8:	80000015 	stw	zero,0(r16)
  8096bc:	2023883a 	mov	r17,r4
  8096c0:	2809883a 	mov	r4,r5
  8096c4:	300b883a 	mov	r5,r6
  8096c8:	380d883a 	mov	r6,r7
  8096cc:	dfc00215 	stw	ra,8(sp)
  8096d0:	0810c8c0 	call	810c8c <lseek>
  8096d4:	1007883a 	mov	r3,r2
  8096d8:	00bfffc4 	movi	r2,-1
  8096dc:	18800626 	beq	r3,r2,8096f8 <_lseek_r+0x54>
  8096e0:	1805883a 	mov	r2,r3
  8096e4:	dfc00217 	ldw	ra,8(sp)
  8096e8:	dc400117 	ldw	r17,4(sp)
  8096ec:	dc000017 	ldw	r16,0(sp)
  8096f0:	dec00304 	addi	sp,sp,12
  8096f4:	f800283a 	ret
  8096f8:	80800017 	ldw	r2,0(r16)
  8096fc:	103ff826 	beq	r2,zero,8096e0 <_lseek_r+0x3c>
  809700:	88800015 	stw	r2,0(r17)
  809704:	1805883a 	mov	r2,r3
  809708:	dfc00217 	ldw	ra,8(sp)
  80970c:	dc400117 	ldw	r17,4(sp)
  809710:	dc000017 	ldw	r16,0(sp)
  809714:	dec00304 	addi	sp,sp,12
  809718:	f800283a 	ret

0080971c <_mbrtowc_r>:
  80971c:	defffc04 	addi	sp,sp,-16
  809720:	dc400215 	stw	r17,8(sp)
  809724:	dc000115 	stw	r16,4(sp)
  809728:	dfc00315 	stw	ra,12(sp)
  80972c:	dc000417 	ldw	r16,16(sp)
  809730:	2023883a 	mov	r17,r4
  809734:	30000f26 	beq	r6,zero,809774 <_mbrtowc_r+0x58>
  809738:	dc000015 	stw	r16,0(sp)
  80973c:	08097dc0 	call	8097dc <_mbtowc_r>
  809740:	1007883a 	mov	r3,r2
  809744:	00bfffc4 	movi	r2,-1
  809748:	1809883a 	mov	r4,r3
  80974c:	1880111e 	bne	r3,r2,809794 <_mbrtowc_r+0x78>
  809750:	80000015 	stw	zero,0(r16)
  809754:	00802284 	movi	r2,138
  809758:	88800015 	stw	r2,0(r17)
  80975c:	2005883a 	mov	r2,r4
  809760:	dfc00317 	ldw	ra,12(sp)
  809764:	dc400217 	ldw	r17,8(sp)
  809768:	dc000117 	ldw	r16,4(sp)
  80976c:	dec00404 	addi	sp,sp,16
  809770:	f800283a 	ret
  809774:	000b883a 	mov	r5,zero
  809778:	01802074 	movhi	r6,129
  80977c:	31933d04 	addi	r6,r6,19700
  809780:	01c00044 	movi	r7,1
  809784:	dc000015 	stw	r16,0(sp)
  809788:	08097dc0 	call	8097dc <_mbtowc_r>
  80978c:	1007883a 	mov	r3,r2
  809790:	003fec06 	br	809744 <_mbrtowc_r+0x28>
  809794:	1809883a 	mov	r4,r3
  809798:	003ff006 	br	80975c <_mbrtowc_r+0x40>

0080979c <mbrtowc>:
  80979c:	00802074 	movhi	r2,129
  8097a0:	109be504 	addi	r2,r2,28564
  8097a4:	2017883a 	mov	r11,r4
  8097a8:	11000017 	ldw	r4,0(r2)
  8097ac:	defffe04 	addi	sp,sp,-8
  8097b0:	3013883a 	mov	r9,r6
  8097b4:	2805883a 	mov	r2,r5
  8097b8:	d9c00015 	stw	r7,0(sp)
  8097bc:	580b883a 	mov	r5,r11
  8097c0:	100d883a 	mov	r6,r2
  8097c4:	480f883a 	mov	r7,r9
  8097c8:	dfc00115 	stw	ra,4(sp)
  8097cc:	080971c0 	call	80971c <_mbrtowc_r>
  8097d0:	dfc00117 	ldw	ra,4(sp)
  8097d4:	dec00204 	addi	sp,sp,8
  8097d8:	f800283a 	ret

008097dc <_mbtowc_r>:
  8097dc:	deffff04 	addi	sp,sp,-4
  8097e0:	0005883a 	mov	r2,zero
  8097e4:	28000326 	beq	r5,zero,8097f4 <_mbtowc_r+0x18>
  8097e8:	3000041e 	bne	r6,zero,8097fc <_mbtowc_r+0x20>
  8097ec:	dec00104 	addi	sp,sp,4
  8097f0:	f800283a 	ret
  8097f4:	d80b883a 	mov	r5,sp
  8097f8:	303ffc26 	beq	r6,zero,8097ec <_mbtowc_r+0x10>
  8097fc:	00bfff84 	movi	r2,-2
  809800:	383ffa26 	beq	r7,zero,8097ec <_mbtowc_r+0x10>
  809804:	30800003 	ldbu	r2,0(r6)
  809808:	28800015 	stw	r2,0(r5)
  80980c:	30c00003 	ldbu	r3,0(r6)
  809810:	1804c03a 	cmpne	r2,r3,zero
  809814:	dec00104 	addi	sp,sp,4
  809818:	f800283a 	ret

0080981c <_Bfree>:
  80981c:	28000826 	beq	r5,zero,809840 <_Bfree+0x24>
  809820:	28800117 	ldw	r2,4(r5)
  809824:	21001317 	ldw	r4,76(r4)
  809828:	1085883a 	add	r2,r2,r2
  80982c:	1085883a 	add	r2,r2,r2
  809830:	1105883a 	add	r2,r2,r4
  809834:	10c00017 	ldw	r3,0(r2)
  809838:	28c00015 	stw	r3,0(r5)
  80983c:	11400015 	stw	r5,0(r2)
  809840:	f800283a 	ret

00809844 <__hi0bits>:
  809844:	20bfffec 	andhi	r2,r4,65535
  809848:	10001426 	beq	r2,zero,80989c <__hi0bits+0x58>
  80984c:	0007883a 	mov	r3,zero
  809850:	20bfc02c 	andhi	r2,r4,65280
  809854:	1000021e 	bne	r2,zero,809860 <__hi0bits+0x1c>
  809858:	2008923a 	slli	r4,r4,8
  80985c:	18c00204 	addi	r3,r3,8
  809860:	20bc002c 	andhi	r2,r4,61440
  809864:	1000021e 	bne	r2,zero,809870 <__hi0bits+0x2c>
  809868:	2008913a 	slli	r4,r4,4
  80986c:	18c00104 	addi	r3,r3,4
  809870:	20b0002c 	andhi	r2,r4,49152
  809874:	1000031e 	bne	r2,zero,809884 <__hi0bits+0x40>
  809878:	2105883a 	add	r2,r4,r4
  80987c:	18c00084 	addi	r3,r3,2
  809880:	1089883a 	add	r4,r2,r2
  809884:	20000316 	blt	r4,zero,809894 <__hi0bits+0x50>
  809888:	2090002c 	andhi	r2,r4,16384
  80988c:	10000626 	beq	r2,zero,8098a8 <__hi0bits+0x64>
  809890:	18c00044 	addi	r3,r3,1
  809894:	1805883a 	mov	r2,r3
  809898:	f800283a 	ret
  80989c:	2008943a 	slli	r4,r4,16
  8098a0:	00c00404 	movi	r3,16
  8098a4:	003fea06 	br	809850 <__hi0bits+0xc>
  8098a8:	00c00804 	movi	r3,32
  8098ac:	1805883a 	mov	r2,r3
  8098b0:	f800283a 	ret

008098b4 <__lo0bits>:
  8098b4:	20c00017 	ldw	r3,0(r4)
  8098b8:	188001cc 	andi	r2,r3,7
  8098bc:	10000a26 	beq	r2,zero,8098e8 <__lo0bits+0x34>
  8098c0:	1880004c 	andi	r2,r3,1
  8098c4:	1005003a 	cmpeq	r2,r2,zero
  8098c8:	10002126 	beq	r2,zero,809950 <__lo0bits+0x9c>
  8098cc:	1880008c 	andi	r2,r3,2
  8098d0:	1000251e 	bne	r2,zero,809968 <__lo0bits+0xb4>
  8098d4:	1804d0ba 	srli	r2,r3,2
  8098d8:	01400084 	movi	r5,2
  8098dc:	20800015 	stw	r2,0(r4)
  8098e0:	2805883a 	mov	r2,r5
  8098e4:	f800283a 	ret
  8098e8:	18bfffcc 	andi	r2,r3,65535
  8098ec:	10001526 	beq	r2,zero,809944 <__lo0bits+0x90>
  8098f0:	000b883a 	mov	r5,zero
  8098f4:	18803fcc 	andi	r2,r3,255
  8098f8:	1000021e 	bne	r2,zero,809904 <__lo0bits+0x50>
  8098fc:	1806d23a 	srli	r3,r3,8
  809900:	29400204 	addi	r5,r5,8
  809904:	188003cc 	andi	r2,r3,15
  809908:	1000021e 	bne	r2,zero,809914 <__lo0bits+0x60>
  80990c:	1806d13a 	srli	r3,r3,4
  809910:	29400104 	addi	r5,r5,4
  809914:	188000cc 	andi	r2,r3,3
  809918:	1000021e 	bne	r2,zero,809924 <__lo0bits+0x70>
  80991c:	1806d0ba 	srli	r3,r3,2
  809920:	29400084 	addi	r5,r5,2
  809924:	1880004c 	andi	r2,r3,1
  809928:	1000031e 	bne	r2,zero,809938 <__lo0bits+0x84>
  80992c:	1806d07a 	srli	r3,r3,1
  809930:	18000a26 	beq	r3,zero,80995c <__lo0bits+0xa8>
  809934:	29400044 	addi	r5,r5,1
  809938:	2805883a 	mov	r2,r5
  80993c:	20c00015 	stw	r3,0(r4)
  809940:	f800283a 	ret
  809944:	1806d43a 	srli	r3,r3,16
  809948:	01400404 	movi	r5,16
  80994c:	003fe906 	br	8098f4 <__lo0bits+0x40>
  809950:	000b883a 	mov	r5,zero
  809954:	2805883a 	mov	r2,r5
  809958:	f800283a 	ret
  80995c:	01400804 	movi	r5,32
  809960:	2805883a 	mov	r2,r5
  809964:	f800283a 	ret
  809968:	1804d07a 	srli	r2,r3,1
  80996c:	01400044 	movi	r5,1
  809970:	20800015 	stw	r2,0(r4)
  809974:	003fda06 	br	8098e0 <__lo0bits+0x2c>

00809978 <__mcmp>:
  809978:	20800417 	ldw	r2,16(r4)
  80997c:	28c00417 	ldw	r3,16(r5)
  809980:	10cfc83a 	sub	r7,r2,r3
  809984:	38000c1e 	bne	r7,zero,8099b8 <__mcmp+0x40>
  809988:	18c5883a 	add	r2,r3,r3
  80998c:	1085883a 	add	r2,r2,r2
  809990:	10c00504 	addi	r3,r2,20
  809994:	21000504 	addi	r4,r4,20
  809998:	28cb883a 	add	r5,r5,r3
  80999c:	2085883a 	add	r2,r4,r2
  8099a0:	10bfff04 	addi	r2,r2,-4
  8099a4:	297fff04 	addi	r5,r5,-4
  8099a8:	11800017 	ldw	r6,0(r2)
  8099ac:	28c00017 	ldw	r3,0(r5)
  8099b0:	30c0031e 	bne	r6,r3,8099c0 <__mcmp+0x48>
  8099b4:	20bffa36 	bltu	r4,r2,8099a0 <__mcmp+0x28>
  8099b8:	3805883a 	mov	r2,r7
  8099bc:	f800283a 	ret
  8099c0:	30c00336 	bltu	r6,r3,8099d0 <__mcmp+0x58>
  8099c4:	01c00044 	movi	r7,1
  8099c8:	3805883a 	mov	r2,r7
  8099cc:	f800283a 	ret
  8099d0:	01ffffc4 	movi	r7,-1
  8099d4:	003ff806 	br	8099b8 <__mcmp+0x40>

008099d8 <__ulp>:
  8099d8:	295ffc2c 	andhi	r5,r5,32752
  8099dc:	013f3034 	movhi	r4,64704
  8099e0:	290b883a 	add	r5,r5,r4
  8099e4:	0145c83a 	sub	r2,zero,r5
  8099e8:	1007d53a 	srai	r3,r2,20
  8099ec:	000d883a 	mov	r6,zero
  8099f0:	0140040e 	bge	zero,r5,809a04 <__ulp+0x2c>
  8099f4:	280f883a 	mov	r7,r5
  8099f8:	3807883a 	mov	r3,r7
  8099fc:	3005883a 	mov	r2,r6
  809a00:	f800283a 	ret
  809a04:	008004c4 	movi	r2,19
  809a08:	193ffb04 	addi	r4,r3,-20
  809a0c:	10c00c0e 	bge	r2,r3,809a40 <__ulp+0x68>
  809a10:	008007c4 	movi	r2,31
  809a14:	1107c83a 	sub	r3,r2,r4
  809a18:	00800784 	movi	r2,30
  809a1c:	01400044 	movi	r5,1
  809a20:	11000216 	blt	r2,r4,809a2c <__ulp+0x54>
  809a24:	00800044 	movi	r2,1
  809a28:	10ca983a 	sll	r5,r2,r3
  809a2c:	000f883a 	mov	r7,zero
  809a30:	280d883a 	mov	r6,r5
  809a34:	3807883a 	mov	r3,r7
  809a38:	3005883a 	mov	r2,r6
  809a3c:	f800283a 	ret
  809a40:	00800234 	movhi	r2,8
  809a44:	10cfd83a 	sra	r7,r2,r3
  809a48:	000d883a 	mov	r6,zero
  809a4c:	3005883a 	mov	r2,r6
  809a50:	3807883a 	mov	r3,r7
  809a54:	f800283a 	ret

00809a58 <__b2d>:
  809a58:	20800417 	ldw	r2,16(r4)
  809a5c:	defff904 	addi	sp,sp,-28
  809a60:	dd000415 	stw	r20,16(sp)
  809a64:	1085883a 	add	r2,r2,r2
  809a68:	25000504 	addi	r20,r4,20
  809a6c:	1085883a 	add	r2,r2,r2
  809a70:	dc000015 	stw	r16,0(sp)
  809a74:	a0a1883a 	add	r16,r20,r2
  809a78:	dd400515 	stw	r21,20(sp)
  809a7c:	857fff17 	ldw	r21,-4(r16)
  809a80:	dc400115 	stw	r17,4(sp)
  809a84:	dfc00615 	stw	ra,24(sp)
  809a88:	a809883a 	mov	r4,r21
  809a8c:	2823883a 	mov	r17,r5
  809a90:	dcc00315 	stw	r19,12(sp)
  809a94:	dc800215 	stw	r18,8(sp)
  809a98:	08098440 	call	809844 <__hi0bits>
  809a9c:	100b883a 	mov	r5,r2
  809aa0:	00800804 	movi	r2,32
  809aa4:	1145c83a 	sub	r2,r2,r5
  809aa8:	88800015 	stw	r2,0(r17)
  809aac:	00800284 	movi	r2,10
  809ab0:	80ffff04 	addi	r3,r16,-4
  809ab4:	11401416 	blt	r2,r5,809b08 <__b2d+0xb0>
  809ab8:	008002c4 	movi	r2,11
  809abc:	1149c83a 	sub	r4,r2,r5
  809ac0:	a0c02736 	bltu	r20,r3,809b60 <__b2d+0x108>
  809ac4:	000d883a 	mov	r6,zero
  809ac8:	28800544 	addi	r2,r5,21
  809acc:	a906d83a 	srl	r3,r21,r4
  809ad0:	a884983a 	sll	r2,r21,r2
  809ad4:	1ccffc34 	orhi	r19,r3,16368
  809ad8:	11a4b03a 	or	r18,r2,r6
  809adc:	9005883a 	mov	r2,r18
  809ae0:	9807883a 	mov	r3,r19
  809ae4:	dfc00617 	ldw	ra,24(sp)
  809ae8:	dd400517 	ldw	r21,20(sp)
  809aec:	dd000417 	ldw	r20,16(sp)
  809af0:	dcc00317 	ldw	r19,12(sp)
  809af4:	dc800217 	ldw	r18,8(sp)
  809af8:	dc400117 	ldw	r17,4(sp)
  809afc:	dc000017 	ldw	r16,0(sp)
  809b00:	dec00704 	addi	sp,sp,28
  809b04:	f800283a 	ret
  809b08:	a0c00e36 	bltu	r20,r3,809b44 <__b2d+0xec>
  809b0c:	293ffd44 	addi	r4,r5,-11
  809b10:	000d883a 	mov	r6,zero
  809b14:	20000f26 	beq	r4,zero,809b54 <__b2d+0xfc>
  809b18:	00800804 	movi	r2,32
  809b1c:	110bc83a 	sub	r5,r2,r4
  809b20:	a0c01236 	bltu	r20,r3,809b6c <__b2d+0x114>
  809b24:	000f883a 	mov	r7,zero
  809b28:	a904983a 	sll	r2,r21,r4
  809b2c:	3146d83a 	srl	r3,r6,r5
  809b30:	3108983a 	sll	r4,r6,r4
  809b34:	108ffc34 	orhi	r2,r2,16368
  809b38:	18a6b03a 	or	r19,r3,r2
  809b3c:	3924b03a 	or	r18,r7,r4
  809b40:	003fe606 	br	809adc <__b2d+0x84>
  809b44:	293ffd44 	addi	r4,r5,-11
  809b48:	81bffe17 	ldw	r6,-8(r16)
  809b4c:	80fffe04 	addi	r3,r16,-8
  809b50:	203ff11e 	bne	r4,zero,809b18 <__b2d+0xc0>
  809b54:	accffc34 	orhi	r19,r21,16368
  809b58:	3025883a 	mov	r18,r6
  809b5c:	003fdf06 	br	809adc <__b2d+0x84>
  809b60:	18bfff17 	ldw	r2,-4(r3)
  809b64:	110cd83a 	srl	r6,r2,r4
  809b68:	003fd706 	br	809ac8 <__b2d+0x70>
  809b6c:	18bfff17 	ldw	r2,-4(r3)
  809b70:	114ed83a 	srl	r7,r2,r5
  809b74:	003fec06 	br	809b28 <__b2d+0xd0>

00809b78 <__ratio>:
  809b78:	defff904 	addi	sp,sp,-28
  809b7c:	dc400215 	stw	r17,8(sp)
  809b80:	2823883a 	mov	r17,r5
  809b84:	d80b883a 	mov	r5,sp
  809b88:	dfc00615 	stw	ra,24(sp)
  809b8c:	dd000515 	stw	r20,20(sp)
  809b90:	dcc00415 	stw	r19,16(sp)
  809b94:	dc800315 	stw	r18,12(sp)
  809b98:	2025883a 	mov	r18,r4
  809b9c:	0809a580 	call	809a58 <__b2d>
  809ba0:	8809883a 	mov	r4,r17
  809ba4:	d9400104 	addi	r5,sp,4
  809ba8:	1027883a 	mov	r19,r2
  809bac:	1829883a 	mov	r20,r3
  809bb0:	0809a580 	call	809a58 <__b2d>
  809bb4:	89000417 	ldw	r4,16(r17)
  809bb8:	91c00417 	ldw	r7,16(r18)
  809bbc:	d9800117 	ldw	r6,4(sp)
  809bc0:	180b883a 	mov	r5,r3
  809bc4:	390fc83a 	sub	r7,r7,r4
  809bc8:	1009883a 	mov	r4,r2
  809bcc:	d8800017 	ldw	r2,0(sp)
  809bd0:	380e917a 	slli	r7,r7,5
  809bd4:	2011883a 	mov	r8,r4
  809bd8:	1185c83a 	sub	r2,r2,r6
  809bdc:	11c5883a 	add	r2,r2,r7
  809be0:	1006953a 	slli	r3,r2,20
  809be4:	2813883a 	mov	r9,r5
  809be8:	00800d0e 	bge	zero,r2,809c20 <__ratio+0xa8>
  809bec:	1d29883a 	add	r20,r3,r20
  809bf0:	a00b883a 	mov	r5,r20
  809bf4:	480f883a 	mov	r7,r9
  809bf8:	9809883a 	mov	r4,r19
  809bfc:	400d883a 	mov	r6,r8
  809c00:	080f1740 	call	80f174 <__divdf3>
  809c04:	dfc00617 	ldw	ra,24(sp)
  809c08:	dd000517 	ldw	r20,20(sp)
  809c0c:	dcc00417 	ldw	r19,16(sp)
  809c10:	dc800317 	ldw	r18,12(sp)
  809c14:	dc400217 	ldw	r17,8(sp)
  809c18:	dec00704 	addi	sp,sp,28
  809c1c:	f800283a 	ret
  809c20:	28d3c83a 	sub	r9,r5,r3
  809c24:	003ff206 	br	809bf0 <__ratio+0x78>

00809c28 <_mprec_log10>:
  809c28:	defffe04 	addi	sp,sp,-8
  809c2c:	008005c4 	movi	r2,23
  809c30:	dc000015 	stw	r16,0(sp)
  809c34:	dfc00115 	stw	ra,4(sp)
  809c38:	2021883a 	mov	r16,r4
  809c3c:	11000c16 	blt	r2,r4,809c70 <_mprec_log10+0x48>
  809c40:	200490fa 	slli	r2,r4,3
  809c44:	00c02074 	movhi	r3,129
  809c48:	18d40e04 	addi	r3,r3,20536
  809c4c:	10c5883a 	add	r2,r2,r3
  809c50:	12400117 	ldw	r9,4(r2)
  809c54:	12000017 	ldw	r8,0(r2)
  809c58:	4807883a 	mov	r3,r9
  809c5c:	4005883a 	mov	r2,r8
  809c60:	dfc00117 	ldw	ra,4(sp)
  809c64:	dc000017 	ldw	r16,0(sp)
  809c68:	dec00204 	addi	sp,sp,8
  809c6c:	f800283a 	ret
  809c70:	0011883a 	mov	r8,zero
  809c74:	024ffc34 	movhi	r9,16368
  809c78:	0005883a 	mov	r2,zero
  809c7c:	00d00934 	movhi	r3,16420
  809c80:	480b883a 	mov	r5,r9
  809c84:	4009883a 	mov	r4,r8
  809c88:	180f883a 	mov	r7,r3
  809c8c:	100d883a 	mov	r6,r2
  809c90:	080edb00 	call	80edb0 <__muldf3>
  809c94:	843fffc4 	addi	r16,r16,-1
  809c98:	1011883a 	mov	r8,r2
  809c9c:	1813883a 	mov	r9,r3
  809ca0:	803ff51e 	bne	r16,zero,809c78 <_mprec_log10+0x50>
  809ca4:	4005883a 	mov	r2,r8
  809ca8:	4807883a 	mov	r3,r9
  809cac:	dfc00117 	ldw	ra,4(sp)
  809cb0:	dc000017 	ldw	r16,0(sp)
  809cb4:	dec00204 	addi	sp,sp,8
  809cb8:	f800283a 	ret

00809cbc <__copybits>:
  809cbc:	297fffc4 	addi	r5,r5,-1
  809cc0:	30800417 	ldw	r2,16(r6)
  809cc4:	280bd17a 	srai	r5,r5,5
  809cc8:	31800504 	addi	r6,r6,20
  809ccc:	1085883a 	add	r2,r2,r2
  809cd0:	294b883a 	add	r5,r5,r5
  809cd4:	294b883a 	add	r5,r5,r5
  809cd8:	1085883a 	add	r2,r2,r2
  809cdc:	290b883a 	add	r5,r5,r4
  809ce0:	3087883a 	add	r3,r6,r2
  809ce4:	29400104 	addi	r5,r5,4
  809ce8:	30c0052e 	bgeu	r6,r3,809d00 <__copybits+0x44>
  809cec:	30800017 	ldw	r2,0(r6)
  809cf0:	31800104 	addi	r6,r6,4
  809cf4:	20800015 	stw	r2,0(r4)
  809cf8:	21000104 	addi	r4,r4,4
  809cfc:	30fffb36 	bltu	r6,r3,809cec <__copybits+0x30>
  809d00:	2140032e 	bgeu	r4,r5,809d10 <__copybits+0x54>
  809d04:	20000015 	stw	zero,0(r4)
  809d08:	21000104 	addi	r4,r4,4
  809d0c:	217ffd36 	bltu	r4,r5,809d04 <__copybits+0x48>
  809d10:	f800283a 	ret

00809d14 <__any_on>:
  809d14:	20800417 	ldw	r2,16(r4)
  809d18:	2807d17a 	srai	r3,r5,5
  809d1c:	21000504 	addi	r4,r4,20
  809d20:	10c00d0e 	bge	r2,r3,809d58 <__any_on+0x44>
  809d24:	1085883a 	add	r2,r2,r2
  809d28:	1085883a 	add	r2,r2,r2
  809d2c:	208d883a 	add	r6,r4,r2
  809d30:	2180182e 	bgeu	r4,r6,809d94 <__any_on+0x80>
  809d34:	30bfff17 	ldw	r2,-4(r6)
  809d38:	30ffff04 	addi	r3,r6,-4
  809d3c:	1000041e 	bne	r2,zero,809d50 <__any_on+0x3c>
  809d40:	20c0142e 	bgeu	r4,r3,809d94 <__any_on+0x80>
  809d44:	18ffff04 	addi	r3,r3,-4
  809d48:	18800017 	ldw	r2,0(r3)
  809d4c:	103ffc26 	beq	r2,zero,809d40 <__any_on+0x2c>
  809d50:	00800044 	movi	r2,1
  809d54:	f800283a 	ret
  809d58:	18800a0e 	bge	r3,r2,809d84 <__any_on+0x70>
  809d5c:	294007cc 	andi	r5,r5,31
  809d60:	28000826 	beq	r5,zero,809d84 <__any_on+0x70>
  809d64:	18c5883a 	add	r2,r3,r3
  809d68:	1085883a 	add	r2,r2,r2
  809d6c:	208d883a 	add	r6,r4,r2
  809d70:	30c00017 	ldw	r3,0(r6)
  809d74:	1944d83a 	srl	r2,r3,r5
  809d78:	1144983a 	sll	r2,r2,r5
  809d7c:	18bff41e 	bne	r3,r2,809d50 <__any_on+0x3c>
  809d80:	003feb06 	br	809d30 <__any_on+0x1c>
  809d84:	18c5883a 	add	r2,r3,r3
  809d88:	1085883a 	add	r2,r2,r2
  809d8c:	208d883a 	add	r6,r4,r2
  809d90:	003fe706 	br	809d30 <__any_on+0x1c>
  809d94:	0005883a 	mov	r2,zero
  809d98:	f800283a 	ret

00809d9c <_Balloc>:
  809d9c:	20c01317 	ldw	r3,76(r4)
  809da0:	defffb04 	addi	sp,sp,-20
  809da4:	dcc00315 	stw	r19,12(sp)
  809da8:	dc800215 	stw	r18,8(sp)
  809dac:	dfc00415 	stw	ra,16(sp)
  809db0:	2825883a 	mov	r18,r5
  809db4:	dc400115 	stw	r17,4(sp)
  809db8:	dc000015 	stw	r16,0(sp)
  809dbc:	2027883a 	mov	r19,r4
  809dc0:	01800404 	movi	r6,16
  809dc4:	01400104 	movi	r5,4
  809dc8:	18001726 	beq	r3,zero,809e28 <_Balloc+0x8c>
  809dcc:	01400044 	movi	r5,1
  809dd0:	9485883a 	add	r2,r18,r18
  809dd4:	2ca2983a 	sll	r17,r5,r18
  809dd8:	1085883a 	add	r2,r2,r2
  809ddc:	10c7883a 	add	r3,r2,r3
  809de0:	1c000017 	ldw	r16,0(r3)
  809de4:	8c4d883a 	add	r6,r17,r17
  809de8:	318d883a 	add	r6,r6,r6
  809dec:	9809883a 	mov	r4,r19
  809df0:	31800504 	addi	r6,r6,20
  809df4:	80001226 	beq	r16,zero,809e40 <_Balloc+0xa4>
  809df8:	80800017 	ldw	r2,0(r16)
  809dfc:	18800015 	stw	r2,0(r3)
  809e00:	80000415 	stw	zero,16(r16)
  809e04:	80000315 	stw	zero,12(r16)
  809e08:	8005883a 	mov	r2,r16
  809e0c:	dfc00417 	ldw	ra,16(sp)
  809e10:	dcc00317 	ldw	r19,12(sp)
  809e14:	dc800217 	ldw	r18,8(sp)
  809e18:	dc400117 	ldw	r17,4(sp)
  809e1c:	dc000017 	ldw	r16,0(sp)
  809e20:	dec00504 	addi	sp,sp,20
  809e24:	f800283a 	ret
  809e28:	080ce400 	call	80ce40 <_calloc_r>
  809e2c:	1007883a 	mov	r3,r2
  809e30:	0021883a 	mov	r16,zero
  809e34:	98801315 	stw	r2,76(r19)
  809e38:	103fe41e 	bne	r2,zero,809dcc <_Balloc+0x30>
  809e3c:	003ff206 	br	809e08 <_Balloc+0x6c>
  809e40:	080ce400 	call	80ce40 <_calloc_r>
  809e44:	103ff026 	beq	r2,zero,809e08 <_Balloc+0x6c>
  809e48:	1021883a 	mov	r16,r2
  809e4c:	14800115 	stw	r18,4(r2)
  809e50:	14400215 	stw	r17,8(r2)
  809e54:	003fea06 	br	809e00 <_Balloc+0x64>

00809e58 <__d2b>:
  809e58:	defff504 	addi	sp,sp,-44
  809e5c:	dcc00515 	stw	r19,20(sp)
  809e60:	04c00044 	movi	r19,1
  809e64:	dc000215 	stw	r16,8(sp)
  809e68:	2821883a 	mov	r16,r5
  809e6c:	980b883a 	mov	r5,r19
  809e70:	ddc00915 	stw	r23,36(sp)
  809e74:	dd800815 	stw	r22,32(sp)
  809e78:	dd400715 	stw	r21,28(sp)
  809e7c:	dd000615 	stw	r20,24(sp)
  809e80:	dc800415 	stw	r18,16(sp)
  809e84:	dc400315 	stw	r17,12(sp)
  809e88:	dfc00a15 	stw	ra,40(sp)
  809e8c:	3023883a 	mov	r17,r6
  809e90:	382d883a 	mov	r22,r7
  809e94:	ddc00b17 	ldw	r23,44(sp)
  809e98:	0809d9c0 	call	809d9c <_Balloc>
  809e9c:	1025883a 	mov	r18,r2
  809ea0:	00a00034 	movhi	r2,32768
  809ea4:	10bfffc4 	addi	r2,r2,-1
  809ea8:	8888703a 	and	r4,r17,r2
  809eac:	202ad53a 	srli	r21,r4,20
  809eb0:	00800434 	movhi	r2,16
  809eb4:	10bfffc4 	addi	r2,r2,-1
  809eb8:	8886703a 	and	r3,r17,r2
  809ebc:	a829003a 	cmpeq	r20,r21,zero
  809ec0:	800b883a 	mov	r5,r16
  809ec4:	d8c00115 	stw	r3,4(sp)
  809ec8:	94000504 	addi	r16,r18,20
  809ecc:	a000021e 	bne	r20,zero,809ed8 <__d2b+0x80>
  809ed0:	18c00434 	orhi	r3,r3,16
  809ed4:	d8c00115 	stw	r3,4(sp)
  809ed8:	28002726 	beq	r5,zero,809f78 <__d2b+0x120>
  809edc:	d809883a 	mov	r4,sp
  809ee0:	d9400015 	stw	r5,0(sp)
  809ee4:	08098b40 	call	8098b4 <__lo0bits>
  809ee8:	100d883a 	mov	r6,r2
  809eec:	10003526 	beq	r2,zero,809fc4 <__d2b+0x16c>
  809ef0:	d8c00117 	ldw	r3,4(sp)
  809ef4:	00800804 	movi	r2,32
  809ef8:	1185c83a 	sub	r2,r2,r6
  809efc:	d9000017 	ldw	r4,0(sp)
  809f00:	1886983a 	sll	r3,r3,r2
  809f04:	1906b03a 	or	r3,r3,r4
  809f08:	90c00515 	stw	r3,20(r18)
  809f0c:	d8c00117 	ldw	r3,4(sp)
  809f10:	1986d83a 	srl	r3,r3,r6
  809f14:	d8c00115 	stw	r3,4(sp)
  809f18:	180b003a 	cmpeq	r5,r3,zero
  809f1c:	00800084 	movi	r2,2
  809f20:	114bc83a 	sub	r5,r2,r5
  809f24:	80c00115 	stw	r3,4(r16)
  809f28:	91400415 	stw	r5,16(r18)
  809f2c:	a0001a1e 	bne	r20,zero,809f98 <__d2b+0x140>
  809f30:	3545883a 	add	r2,r6,r21
  809f34:	10bef344 	addi	r2,r2,-1075
  809f38:	00c00d44 	movi	r3,53
  809f3c:	b0800015 	stw	r2,0(r22)
  809f40:	1987c83a 	sub	r3,r3,r6
  809f44:	b8c00015 	stw	r3,0(r23)
  809f48:	9005883a 	mov	r2,r18
  809f4c:	dfc00a17 	ldw	ra,40(sp)
  809f50:	ddc00917 	ldw	r23,36(sp)
  809f54:	dd800817 	ldw	r22,32(sp)
  809f58:	dd400717 	ldw	r21,28(sp)
  809f5c:	dd000617 	ldw	r20,24(sp)
  809f60:	dcc00517 	ldw	r19,20(sp)
  809f64:	dc800417 	ldw	r18,16(sp)
  809f68:	dc400317 	ldw	r17,12(sp)
  809f6c:	dc000217 	ldw	r16,8(sp)
  809f70:	dec00b04 	addi	sp,sp,44
  809f74:	f800283a 	ret
  809f78:	d9000104 	addi	r4,sp,4
  809f7c:	08098b40 	call	8098b4 <__lo0bits>
  809f80:	11800804 	addi	r6,r2,32
  809f84:	d8800117 	ldw	r2,4(sp)
  809f88:	94c00415 	stw	r19,16(r18)
  809f8c:	980b883a 	mov	r5,r19
  809f90:	90800515 	stw	r2,20(r18)
  809f94:	a03fe626 	beq	r20,zero,809f30 <__d2b+0xd8>
  809f98:	2945883a 	add	r2,r5,r5
  809f9c:	1085883a 	add	r2,r2,r2
  809fa0:	1405883a 	add	r2,r2,r16
  809fa4:	113fff17 	ldw	r4,-4(r2)
  809fa8:	30fef384 	addi	r3,r6,-1074
  809fac:	2820917a 	slli	r16,r5,5
  809fb0:	b0c00015 	stw	r3,0(r22)
  809fb4:	08098440 	call	809844 <__hi0bits>
  809fb8:	80a1c83a 	sub	r16,r16,r2
  809fbc:	bc000015 	stw	r16,0(r23)
  809fc0:	003fe106 	br	809f48 <__d2b+0xf0>
  809fc4:	d8800017 	ldw	r2,0(sp)
  809fc8:	90800515 	stw	r2,20(r18)
  809fcc:	d8c00117 	ldw	r3,4(sp)
  809fd0:	003fd106 	br	809f18 <__d2b+0xc0>

00809fd4 <__mdiff>:
  809fd4:	defffb04 	addi	sp,sp,-20
  809fd8:	dc000015 	stw	r16,0(sp)
  809fdc:	2821883a 	mov	r16,r5
  809fe0:	dc800215 	stw	r18,8(sp)
  809fe4:	300b883a 	mov	r5,r6
  809fe8:	2025883a 	mov	r18,r4
  809fec:	8009883a 	mov	r4,r16
  809ff0:	dc400115 	stw	r17,4(sp)
  809ff4:	dfc00415 	stw	ra,16(sp)
  809ff8:	dcc00315 	stw	r19,12(sp)
  809ffc:	3023883a 	mov	r17,r6
  80a000:	08099780 	call	809978 <__mcmp>
  80a004:	10004226 	beq	r2,zero,80a110 <__mdiff+0x13c>
  80a008:	10005016 	blt	r2,zero,80a14c <__mdiff+0x178>
  80a00c:	0027883a 	mov	r19,zero
  80a010:	81400117 	ldw	r5,4(r16)
  80a014:	9009883a 	mov	r4,r18
  80a018:	0809d9c0 	call	809d9c <_Balloc>
  80a01c:	1019883a 	mov	r12,r2
  80a020:	82800417 	ldw	r10,16(r16)
  80a024:	88800417 	ldw	r2,16(r17)
  80a028:	81800504 	addi	r6,r16,20
  80a02c:	5287883a 	add	r3,r10,r10
  80a030:	1085883a 	add	r2,r2,r2
  80a034:	18c7883a 	add	r3,r3,r3
  80a038:	1085883a 	add	r2,r2,r2
  80a03c:	8a000504 	addi	r8,r17,20
  80a040:	64c00315 	stw	r19,12(r12)
  80a044:	30db883a 	add	r13,r6,r3
  80a048:	4097883a 	add	r11,r8,r2
  80a04c:	61c00504 	addi	r7,r12,20
  80a050:	0013883a 	mov	r9,zero
  80a054:	31000017 	ldw	r4,0(r6)
  80a058:	41400017 	ldw	r5,0(r8)
  80a05c:	42000104 	addi	r8,r8,4
  80a060:	20bfffcc 	andi	r2,r4,65535
  80a064:	28ffffcc 	andi	r3,r5,65535
  80a068:	10c5c83a 	sub	r2,r2,r3
  80a06c:	1245883a 	add	r2,r2,r9
  80a070:	2008d43a 	srli	r4,r4,16
  80a074:	280ad43a 	srli	r5,r5,16
  80a078:	1007d43a 	srai	r3,r2,16
  80a07c:	3880000d 	sth	r2,0(r7)
  80a080:	2149c83a 	sub	r4,r4,r5
  80a084:	20c9883a 	add	r4,r4,r3
  80a088:	3900008d 	sth	r4,2(r7)
  80a08c:	31800104 	addi	r6,r6,4
  80a090:	39c00104 	addi	r7,r7,4
  80a094:	2013d43a 	srai	r9,r4,16
  80a098:	42ffee36 	bltu	r8,r11,80a054 <__mdiff+0x80>
  80a09c:	33400c2e 	bgeu	r6,r13,80a0d0 <__mdiff+0xfc>
  80a0a0:	30800017 	ldw	r2,0(r6)
  80a0a4:	31800104 	addi	r6,r6,4
  80a0a8:	10ffffcc 	andi	r3,r2,65535
  80a0ac:	1a47883a 	add	r3,r3,r9
  80a0b0:	1004d43a 	srli	r2,r2,16
  80a0b4:	1809d43a 	srai	r4,r3,16
  80a0b8:	38c0000d 	sth	r3,0(r7)
  80a0bc:	1105883a 	add	r2,r2,r4
  80a0c0:	3880008d 	sth	r2,2(r7)
  80a0c4:	1013d43a 	srai	r9,r2,16
  80a0c8:	39c00104 	addi	r7,r7,4
  80a0cc:	337ff436 	bltu	r6,r13,80a0a0 <__mdiff+0xcc>
  80a0d0:	38bfff17 	ldw	r2,-4(r7)
  80a0d4:	38ffff04 	addi	r3,r7,-4
  80a0d8:	1000041e 	bne	r2,zero,80a0ec <__mdiff+0x118>
  80a0dc:	18ffff04 	addi	r3,r3,-4
  80a0e0:	18800017 	ldw	r2,0(r3)
  80a0e4:	52bfffc4 	addi	r10,r10,-1
  80a0e8:	103ffc26 	beq	r2,zero,80a0dc <__mdiff+0x108>
  80a0ec:	6005883a 	mov	r2,r12
  80a0f0:	62800415 	stw	r10,16(r12)
  80a0f4:	dfc00417 	ldw	ra,16(sp)
  80a0f8:	dcc00317 	ldw	r19,12(sp)
  80a0fc:	dc800217 	ldw	r18,8(sp)
  80a100:	dc400117 	ldw	r17,4(sp)
  80a104:	dc000017 	ldw	r16,0(sp)
  80a108:	dec00504 	addi	sp,sp,20
  80a10c:	f800283a 	ret
  80a110:	9009883a 	mov	r4,r18
  80a114:	000b883a 	mov	r5,zero
  80a118:	0809d9c0 	call	809d9c <_Balloc>
  80a11c:	1019883a 	mov	r12,r2
  80a120:	00800044 	movi	r2,1
  80a124:	60800415 	stw	r2,16(r12)
  80a128:	6005883a 	mov	r2,r12
  80a12c:	60000515 	stw	zero,20(r12)
  80a130:	dfc00417 	ldw	ra,16(sp)
  80a134:	dcc00317 	ldw	r19,12(sp)
  80a138:	dc800217 	ldw	r18,8(sp)
  80a13c:	dc400117 	ldw	r17,4(sp)
  80a140:	dc000017 	ldw	r16,0(sp)
  80a144:	dec00504 	addi	sp,sp,20
  80a148:	f800283a 	ret
  80a14c:	880d883a 	mov	r6,r17
  80a150:	04c00044 	movi	r19,1
  80a154:	8023883a 	mov	r17,r16
  80a158:	3021883a 	mov	r16,r6
  80a15c:	003fac06 	br	80a010 <__mdiff+0x3c>

0080a160 <__lshift>:
  80a160:	defff904 	addi	sp,sp,-28
  80a164:	28800417 	ldw	r2,16(r5)
  80a168:	dc000015 	stw	r16,0(sp)
  80a16c:	3021d17a 	srai	r16,r6,5
  80a170:	28c00217 	ldw	r3,8(r5)
  80a174:	10800044 	addi	r2,r2,1
  80a178:	dc400115 	stw	r17,4(sp)
  80a17c:	80a3883a 	add	r17,r16,r2
  80a180:	dd400515 	stw	r21,20(sp)
  80a184:	dd000415 	stw	r20,16(sp)
  80a188:	dc800215 	stw	r18,8(sp)
  80a18c:	dfc00615 	stw	ra,24(sp)
  80a190:	2825883a 	mov	r18,r5
  80a194:	dcc00315 	stw	r19,12(sp)
  80a198:	3029883a 	mov	r20,r6
  80a19c:	202b883a 	mov	r21,r4
  80a1a0:	29400117 	ldw	r5,4(r5)
  80a1a4:	1c40030e 	bge	r3,r17,80a1b4 <__lshift+0x54>
  80a1a8:	18c7883a 	add	r3,r3,r3
  80a1ac:	29400044 	addi	r5,r5,1
  80a1b0:	1c7ffd16 	blt	r3,r17,80a1a8 <__lshift+0x48>
  80a1b4:	a809883a 	mov	r4,r21
  80a1b8:	0809d9c0 	call	809d9c <_Balloc>
  80a1bc:	1027883a 	mov	r19,r2
  80a1c0:	11400504 	addi	r5,r2,20
  80a1c4:	0400090e 	bge	zero,r16,80a1ec <__lshift+0x8c>
  80a1c8:	2805883a 	mov	r2,r5
  80a1cc:	0007883a 	mov	r3,zero
  80a1d0:	18c00044 	addi	r3,r3,1
  80a1d4:	10000015 	stw	zero,0(r2)
  80a1d8:	10800104 	addi	r2,r2,4
  80a1dc:	80fffc1e 	bne	r16,r3,80a1d0 <__lshift+0x70>
  80a1e0:	8405883a 	add	r2,r16,r16
  80a1e4:	1085883a 	add	r2,r2,r2
  80a1e8:	288b883a 	add	r5,r5,r2
  80a1ec:	90800417 	ldw	r2,16(r18)
  80a1f0:	91000504 	addi	r4,r18,20
  80a1f4:	a18007cc 	andi	r6,r20,31
  80a1f8:	1085883a 	add	r2,r2,r2
  80a1fc:	1085883a 	add	r2,r2,r2
  80a200:	208f883a 	add	r7,r4,r2
  80a204:	30001e26 	beq	r6,zero,80a280 <__lshift+0x120>
  80a208:	00800804 	movi	r2,32
  80a20c:	1191c83a 	sub	r8,r2,r6
  80a210:	0007883a 	mov	r3,zero
  80a214:	20800017 	ldw	r2,0(r4)
  80a218:	1184983a 	sll	r2,r2,r6
  80a21c:	1884b03a 	or	r2,r3,r2
  80a220:	28800015 	stw	r2,0(r5)
  80a224:	20c00017 	ldw	r3,0(r4)
  80a228:	21000104 	addi	r4,r4,4
  80a22c:	29400104 	addi	r5,r5,4
  80a230:	1a06d83a 	srl	r3,r3,r8
  80a234:	21fff736 	bltu	r4,r7,80a214 <__lshift+0xb4>
  80a238:	28c00015 	stw	r3,0(r5)
  80a23c:	18000126 	beq	r3,zero,80a244 <__lshift+0xe4>
  80a240:	8c400044 	addi	r17,r17,1
  80a244:	88bfffc4 	addi	r2,r17,-1
  80a248:	98800415 	stw	r2,16(r19)
  80a24c:	a809883a 	mov	r4,r21
  80a250:	900b883a 	mov	r5,r18
  80a254:	080981c0 	call	80981c <_Bfree>
  80a258:	9805883a 	mov	r2,r19
  80a25c:	dfc00617 	ldw	ra,24(sp)
  80a260:	dd400517 	ldw	r21,20(sp)
  80a264:	dd000417 	ldw	r20,16(sp)
  80a268:	dcc00317 	ldw	r19,12(sp)
  80a26c:	dc800217 	ldw	r18,8(sp)
  80a270:	dc400117 	ldw	r17,4(sp)
  80a274:	dc000017 	ldw	r16,0(sp)
  80a278:	dec00704 	addi	sp,sp,28
  80a27c:	f800283a 	ret
  80a280:	20800017 	ldw	r2,0(r4)
  80a284:	21000104 	addi	r4,r4,4
  80a288:	28800015 	stw	r2,0(r5)
  80a28c:	29400104 	addi	r5,r5,4
  80a290:	21ffec2e 	bgeu	r4,r7,80a244 <__lshift+0xe4>
  80a294:	20800017 	ldw	r2,0(r4)
  80a298:	21000104 	addi	r4,r4,4
  80a29c:	28800015 	stw	r2,0(r5)
  80a2a0:	29400104 	addi	r5,r5,4
  80a2a4:	21fff636 	bltu	r4,r7,80a280 <__lshift+0x120>
  80a2a8:	003fe606 	br	80a244 <__lshift+0xe4>

0080a2ac <__multiply>:
  80a2ac:	defff904 	addi	sp,sp,-28
  80a2b0:	dcc00315 	stw	r19,12(sp)
  80a2b4:	dc800215 	stw	r18,8(sp)
  80a2b8:	2cc00417 	ldw	r19,16(r5)
  80a2bc:	34800417 	ldw	r18,16(r6)
  80a2c0:	dd000415 	stw	r20,16(sp)
  80a2c4:	dc400115 	stw	r17,4(sp)
  80a2c8:	dfc00615 	stw	ra,24(sp)
  80a2cc:	dd400515 	stw	r21,20(sp)
  80a2d0:	dc000015 	stw	r16,0(sp)
  80a2d4:	2823883a 	mov	r17,r5
  80a2d8:	3029883a 	mov	r20,r6
  80a2dc:	9c80040e 	bge	r19,r18,80a2f0 <__multiply+0x44>
  80a2e0:	9027883a 	mov	r19,r18
  80a2e4:	2c800417 	ldw	r18,16(r5)
  80a2e8:	2829883a 	mov	r20,r5
  80a2ec:	3023883a 	mov	r17,r6
  80a2f0:	88800217 	ldw	r2,8(r17)
  80a2f4:	9ca1883a 	add	r16,r19,r18
  80a2f8:	89400117 	ldw	r5,4(r17)
  80a2fc:	1400010e 	bge	r2,r16,80a304 <__multiply+0x58>
  80a300:	29400044 	addi	r5,r5,1
  80a304:	0809d9c0 	call	809d9c <_Balloc>
  80a308:	102b883a 	mov	r21,r2
  80a30c:	8405883a 	add	r2,r16,r16
  80a310:	1085883a 	add	r2,r2,r2
  80a314:	a9000504 	addi	r4,r21,20
  80a318:	209d883a 	add	r14,r4,r2
  80a31c:	2380042e 	bgeu	r4,r14,80a330 <__multiply+0x84>
  80a320:	2005883a 	mov	r2,r4
  80a324:	10000015 	stw	zero,0(r2)
  80a328:	10800104 	addi	r2,r2,4
  80a32c:	13bffd36 	bltu	r2,r14,80a324 <__multiply+0x78>
  80a330:	9485883a 	add	r2,r18,r18
  80a334:	9cc7883a 	add	r3,r19,r19
  80a338:	a1800504 	addi	r6,r20,20
  80a33c:	1085883a 	add	r2,r2,r2
  80a340:	8b400504 	addi	r13,r17,20
  80a344:	18c7883a 	add	r3,r3,r3
  80a348:	309f883a 	add	r15,r6,r2
  80a34c:	68d7883a 	add	r11,r13,r3
  80a350:	33c03b2e 	bgeu	r6,r15,80a440 <__multiply+0x194>
  80a354:	2019883a 	mov	r12,r4
  80a358:	30800017 	ldw	r2,0(r6)
  80a35c:	127fffcc 	andi	r9,r2,65535
  80a360:	48001826 	beq	r9,zero,80a3c4 <__multiply+0x118>
  80a364:	6811883a 	mov	r8,r13
  80a368:	600f883a 	mov	r7,r12
  80a36c:	0015883a 	mov	r10,zero
  80a370:	40c00017 	ldw	r3,0(r8)
  80a374:	39400017 	ldw	r5,0(r7)
  80a378:	42000104 	addi	r8,r8,4
  80a37c:	193fffcc 	andi	r4,r3,65535
  80a380:	4909383a 	mul	r4,r9,r4
  80a384:	1806d43a 	srli	r3,r3,16
  80a388:	28bfffcc 	andi	r2,r5,65535
  80a38c:	5085883a 	add	r2,r10,r2
  80a390:	2089883a 	add	r4,r4,r2
  80a394:	48c7383a 	mul	r3,r9,r3
  80a398:	280ad43a 	srli	r5,r5,16
  80a39c:	2004d43a 	srli	r2,r4,16
  80a3a0:	3900000d 	sth	r4,0(r7)
  80a3a4:	1947883a 	add	r3,r3,r5
  80a3a8:	10c5883a 	add	r2,r2,r3
  80a3ac:	3880008d 	sth	r2,2(r7)
  80a3b0:	1014d43a 	srli	r10,r2,16
  80a3b4:	39c00104 	addi	r7,r7,4
  80a3b8:	42ffed36 	bltu	r8,r11,80a370 <__multiply+0xc4>
  80a3bc:	3a800015 	stw	r10,0(r7)
  80a3c0:	30800017 	ldw	r2,0(r6)
  80a3c4:	1012d43a 	srli	r9,r2,16
  80a3c8:	48001926 	beq	r9,zero,80a430 <__multiply+0x184>
  80a3cc:	60800017 	ldw	r2,0(r12)
  80a3d0:	6811883a 	mov	r8,r13
  80a3d4:	600f883a 	mov	r7,r12
  80a3d8:	0015883a 	mov	r10,zero
  80a3dc:	100b883a 	mov	r5,r2
  80a3e0:	41000017 	ldw	r4,0(r8)
  80a3e4:	2806d43a 	srli	r3,r5,16
  80a3e8:	3880000d 	sth	r2,0(r7)
  80a3ec:	20bfffcc 	andi	r2,r4,65535
  80a3f0:	4885383a 	mul	r2,r9,r2
  80a3f4:	50c7883a 	add	r3,r10,r3
  80a3f8:	2008d43a 	srli	r4,r4,16
  80a3fc:	10c5883a 	add	r2,r2,r3
  80a400:	3880008d 	sth	r2,2(r7)
  80a404:	39c00104 	addi	r7,r7,4
  80a408:	39400017 	ldw	r5,0(r7)
  80a40c:	4909383a 	mul	r4,r9,r4
  80a410:	1004d43a 	srli	r2,r2,16
  80a414:	28ffffcc 	andi	r3,r5,65535
  80a418:	20c9883a 	add	r4,r4,r3
  80a41c:	1105883a 	add	r2,r2,r4
  80a420:	42000104 	addi	r8,r8,4
  80a424:	1014d43a 	srli	r10,r2,16
  80a428:	42ffed36 	bltu	r8,r11,80a3e0 <__multiply+0x134>
  80a42c:	38800015 	stw	r2,0(r7)
  80a430:	31800104 	addi	r6,r6,4
  80a434:	33c0022e 	bgeu	r6,r15,80a440 <__multiply+0x194>
  80a438:	63000104 	addi	r12,r12,4
  80a43c:	003fc606 	br	80a358 <__multiply+0xac>
  80a440:	0400090e 	bge	zero,r16,80a468 <__multiply+0x1bc>
  80a444:	70bfff17 	ldw	r2,-4(r14)
  80a448:	70ffff04 	addi	r3,r14,-4
  80a44c:	10000326 	beq	r2,zero,80a45c <__multiply+0x1b0>
  80a450:	00000506 	br	80a468 <__multiply+0x1bc>
  80a454:	18800017 	ldw	r2,0(r3)
  80a458:	1000031e 	bne	r2,zero,80a468 <__multiply+0x1bc>
  80a45c:	843fffc4 	addi	r16,r16,-1
  80a460:	18ffff04 	addi	r3,r3,-4
  80a464:	803ffb1e 	bne	r16,zero,80a454 <__multiply+0x1a8>
  80a468:	a805883a 	mov	r2,r21
  80a46c:	ac000415 	stw	r16,16(r21)
  80a470:	dfc00617 	ldw	ra,24(sp)
  80a474:	dd400517 	ldw	r21,20(sp)
  80a478:	dd000417 	ldw	r20,16(sp)
  80a47c:	dcc00317 	ldw	r19,12(sp)
  80a480:	dc800217 	ldw	r18,8(sp)
  80a484:	dc400117 	ldw	r17,4(sp)
  80a488:	dc000017 	ldw	r16,0(sp)
  80a48c:	dec00704 	addi	sp,sp,28
  80a490:	f800283a 	ret

0080a494 <__i2b>:
  80a494:	defffd04 	addi	sp,sp,-12
  80a498:	dc000015 	stw	r16,0(sp)
  80a49c:	04000044 	movi	r16,1
  80a4a0:	dc800115 	stw	r18,4(sp)
  80a4a4:	2825883a 	mov	r18,r5
  80a4a8:	800b883a 	mov	r5,r16
  80a4ac:	dfc00215 	stw	ra,8(sp)
  80a4b0:	0809d9c0 	call	809d9c <_Balloc>
  80a4b4:	14000415 	stw	r16,16(r2)
  80a4b8:	14800515 	stw	r18,20(r2)
  80a4bc:	dfc00217 	ldw	ra,8(sp)
  80a4c0:	dc800117 	ldw	r18,4(sp)
  80a4c4:	dc000017 	ldw	r16,0(sp)
  80a4c8:	dec00304 	addi	sp,sp,12
  80a4cc:	f800283a 	ret

0080a4d0 <__multadd>:
  80a4d0:	defffa04 	addi	sp,sp,-24
  80a4d4:	dc800215 	stw	r18,8(sp)
  80a4d8:	2c800417 	ldw	r18,16(r5)
  80a4dc:	dd000415 	stw	r20,16(sp)
  80a4e0:	dcc00315 	stw	r19,12(sp)
  80a4e4:	dc000015 	stw	r16,0(sp)
  80a4e8:	dfc00515 	stw	ra,20(sp)
  80a4ec:	3821883a 	mov	r16,r7
  80a4f0:	dc400115 	stw	r17,4(sp)
  80a4f4:	2827883a 	mov	r19,r5
  80a4f8:	2029883a 	mov	r20,r4
  80a4fc:	2a000504 	addi	r8,r5,20
  80a500:	000f883a 	mov	r7,zero
  80a504:	40800017 	ldw	r2,0(r8)
  80a508:	39c00044 	addi	r7,r7,1
  80a50c:	10ffffcc 	andi	r3,r2,65535
  80a510:	1987383a 	mul	r3,r3,r6
  80a514:	1004d43a 	srli	r2,r2,16
  80a518:	1c07883a 	add	r3,r3,r16
  80a51c:	180ad43a 	srli	r5,r3,16
  80a520:	1185383a 	mul	r2,r2,r6
  80a524:	18ffffcc 	andi	r3,r3,65535
  80a528:	1145883a 	add	r2,r2,r5
  80a52c:	1008943a 	slli	r4,r2,16
  80a530:	1020d43a 	srli	r16,r2,16
  80a534:	20c9883a 	add	r4,r4,r3
  80a538:	41000015 	stw	r4,0(r8)
  80a53c:	42000104 	addi	r8,r8,4
  80a540:	3cbff016 	blt	r7,r18,80a504 <__multadd+0x34>
  80a544:	80000826 	beq	r16,zero,80a568 <__multadd+0x98>
  80a548:	98800217 	ldw	r2,8(r19)
  80a54c:	90800f0e 	bge	r18,r2,80a58c <__multadd+0xbc>
  80a550:	9485883a 	add	r2,r18,r18
  80a554:	1085883a 	add	r2,r2,r2
  80a558:	14c5883a 	add	r2,r2,r19
  80a55c:	90c00044 	addi	r3,r18,1
  80a560:	14000515 	stw	r16,20(r2)
  80a564:	98c00415 	stw	r3,16(r19)
  80a568:	9805883a 	mov	r2,r19
  80a56c:	dfc00517 	ldw	ra,20(sp)
  80a570:	dd000417 	ldw	r20,16(sp)
  80a574:	dcc00317 	ldw	r19,12(sp)
  80a578:	dc800217 	ldw	r18,8(sp)
  80a57c:	dc400117 	ldw	r17,4(sp)
  80a580:	dc000017 	ldw	r16,0(sp)
  80a584:	dec00604 	addi	sp,sp,24
  80a588:	f800283a 	ret
  80a58c:	99400117 	ldw	r5,4(r19)
  80a590:	a009883a 	mov	r4,r20
  80a594:	29400044 	addi	r5,r5,1
  80a598:	0809d9c0 	call	809d9c <_Balloc>
  80a59c:	99800417 	ldw	r6,16(r19)
  80a5a0:	99400304 	addi	r5,r19,12
  80a5a4:	11000304 	addi	r4,r2,12
  80a5a8:	318d883a 	add	r6,r6,r6
  80a5ac:	318d883a 	add	r6,r6,r6
  80a5b0:	31800204 	addi	r6,r6,8
  80a5b4:	1023883a 	mov	r17,r2
  80a5b8:	08031c80 	call	8031c8 <memcpy>
  80a5bc:	980b883a 	mov	r5,r19
  80a5c0:	a009883a 	mov	r4,r20
  80a5c4:	080981c0 	call	80981c <_Bfree>
  80a5c8:	8827883a 	mov	r19,r17
  80a5cc:	003fe006 	br	80a550 <__multadd+0x80>

0080a5d0 <__pow5mult>:
  80a5d0:	defffa04 	addi	sp,sp,-24
  80a5d4:	308000cc 	andi	r2,r6,3
  80a5d8:	dd000415 	stw	r20,16(sp)
  80a5dc:	dcc00315 	stw	r19,12(sp)
  80a5e0:	dc000015 	stw	r16,0(sp)
  80a5e4:	dfc00515 	stw	ra,20(sp)
  80a5e8:	dc800215 	stw	r18,8(sp)
  80a5ec:	dc400115 	stw	r17,4(sp)
  80a5f0:	3021883a 	mov	r16,r6
  80a5f4:	2027883a 	mov	r19,r4
  80a5f8:	2829883a 	mov	r20,r5
  80a5fc:	10002b1e 	bne	r2,zero,80a6ac <__pow5mult+0xdc>
  80a600:	8025d0ba 	srai	r18,r16,2
  80a604:	90001b26 	beq	r18,zero,80a674 <__pow5mult+0xa4>
  80a608:	9c001217 	ldw	r16,72(r19)
  80a60c:	8000081e 	bne	r16,zero,80a630 <__pow5mult+0x60>
  80a610:	00003006 	br	80a6d4 <__pow5mult+0x104>
  80a614:	800b883a 	mov	r5,r16
  80a618:	800d883a 	mov	r6,r16
  80a61c:	9809883a 	mov	r4,r19
  80a620:	90001426 	beq	r18,zero,80a674 <__pow5mult+0xa4>
  80a624:	80800017 	ldw	r2,0(r16)
  80a628:	10001b26 	beq	r2,zero,80a698 <__pow5mult+0xc8>
  80a62c:	1021883a 	mov	r16,r2
  80a630:	9080004c 	andi	r2,r18,1
  80a634:	1005003a 	cmpeq	r2,r2,zero
  80a638:	9025d07a 	srai	r18,r18,1
  80a63c:	800d883a 	mov	r6,r16
  80a640:	9809883a 	mov	r4,r19
  80a644:	a00b883a 	mov	r5,r20
  80a648:	103ff21e 	bne	r2,zero,80a614 <__pow5mult+0x44>
  80a64c:	080a2ac0 	call	80a2ac <__multiply>
  80a650:	a00b883a 	mov	r5,r20
  80a654:	9809883a 	mov	r4,r19
  80a658:	1023883a 	mov	r17,r2
  80a65c:	080981c0 	call	80981c <_Bfree>
  80a660:	8829883a 	mov	r20,r17
  80a664:	800b883a 	mov	r5,r16
  80a668:	800d883a 	mov	r6,r16
  80a66c:	9809883a 	mov	r4,r19
  80a670:	903fec1e 	bne	r18,zero,80a624 <__pow5mult+0x54>
  80a674:	a005883a 	mov	r2,r20
  80a678:	dfc00517 	ldw	ra,20(sp)
  80a67c:	dd000417 	ldw	r20,16(sp)
  80a680:	dcc00317 	ldw	r19,12(sp)
  80a684:	dc800217 	ldw	r18,8(sp)
  80a688:	dc400117 	ldw	r17,4(sp)
  80a68c:	dc000017 	ldw	r16,0(sp)
  80a690:	dec00604 	addi	sp,sp,24
  80a694:	f800283a 	ret
  80a698:	080a2ac0 	call	80a2ac <__multiply>
  80a69c:	80800015 	stw	r2,0(r16)
  80a6a0:	1021883a 	mov	r16,r2
  80a6a4:	10000015 	stw	zero,0(r2)
  80a6a8:	003fe106 	br	80a630 <__pow5mult+0x60>
  80a6ac:	1085883a 	add	r2,r2,r2
  80a6b0:	00c02074 	movhi	r3,129
  80a6b4:	18d45404 	addi	r3,r3,20816
  80a6b8:	1085883a 	add	r2,r2,r2
  80a6bc:	10c5883a 	add	r2,r2,r3
  80a6c0:	11bfff17 	ldw	r6,-4(r2)
  80a6c4:	000f883a 	mov	r7,zero
  80a6c8:	080a4d00 	call	80a4d0 <__multadd>
  80a6cc:	1029883a 	mov	r20,r2
  80a6d0:	003fcb06 	br	80a600 <__pow5mult+0x30>
  80a6d4:	9809883a 	mov	r4,r19
  80a6d8:	01409c44 	movi	r5,625
  80a6dc:	080a4940 	call	80a494 <__i2b>
  80a6e0:	98801215 	stw	r2,72(r19)
  80a6e4:	1021883a 	mov	r16,r2
  80a6e8:	10000015 	stw	zero,0(r2)
  80a6ec:	003fd006 	br	80a630 <__pow5mult+0x60>

0080a6f0 <__s2b>:
  80a6f0:	defff904 	addi	sp,sp,-28
  80a6f4:	dcc00315 	stw	r19,12(sp)
  80a6f8:	dc800215 	stw	r18,8(sp)
  80a6fc:	2827883a 	mov	r19,r5
  80a700:	2025883a 	mov	r18,r4
  80a704:	01400244 	movi	r5,9
  80a708:	39000204 	addi	r4,r7,8
  80a70c:	dd000415 	stw	r20,16(sp)
  80a710:	dc400115 	stw	r17,4(sp)
  80a714:	dfc00615 	stw	ra,24(sp)
  80a718:	dd400515 	stw	r21,20(sp)
  80a71c:	dc000015 	stw	r16,0(sp)
  80a720:	3829883a 	mov	r20,r7
  80a724:	3023883a 	mov	r17,r6
  80a728:	080fb500 	call	80fb50 <__divsi3>
  80a72c:	00c00044 	movi	r3,1
  80a730:	1880350e 	bge	r3,r2,80a808 <__s2b+0x118>
  80a734:	000b883a 	mov	r5,zero
  80a738:	18c7883a 	add	r3,r3,r3
  80a73c:	29400044 	addi	r5,r5,1
  80a740:	18bffd16 	blt	r3,r2,80a738 <__s2b+0x48>
  80a744:	9009883a 	mov	r4,r18
  80a748:	0809d9c0 	call	809d9c <_Balloc>
  80a74c:	1011883a 	mov	r8,r2
  80a750:	d8800717 	ldw	r2,28(sp)
  80a754:	00c00044 	movi	r3,1
  80a758:	01800244 	movi	r6,9
  80a75c:	40800515 	stw	r2,20(r8)
  80a760:	40c00415 	stw	r3,16(r8)
  80a764:	3440260e 	bge	r6,r17,80a800 <__s2b+0x110>
  80a768:	3021883a 	mov	r16,r6
  80a76c:	99ab883a 	add	r21,r19,r6
  80a770:	9c05883a 	add	r2,r19,r16
  80a774:	11c00007 	ldb	r7,0(r2)
  80a778:	400b883a 	mov	r5,r8
  80a77c:	9009883a 	mov	r4,r18
  80a780:	39fff404 	addi	r7,r7,-48
  80a784:	01800284 	movi	r6,10
  80a788:	080a4d00 	call	80a4d0 <__multadd>
  80a78c:	84000044 	addi	r16,r16,1
  80a790:	1011883a 	mov	r8,r2
  80a794:	8c3ff61e 	bne	r17,r16,80a770 <__s2b+0x80>
  80a798:	ac45883a 	add	r2,r21,r17
  80a79c:	117ffe04 	addi	r5,r2,-8
  80a7a0:	880d883a 	mov	r6,r17
  80a7a4:	35000c0e 	bge	r6,r20,80a7d8 <__s2b+0xe8>
  80a7a8:	a185c83a 	sub	r2,r20,r6
  80a7ac:	2821883a 	mov	r16,r5
  80a7b0:	28a3883a 	add	r17,r5,r2
  80a7b4:	81c00007 	ldb	r7,0(r16)
  80a7b8:	400b883a 	mov	r5,r8
  80a7bc:	9009883a 	mov	r4,r18
  80a7c0:	39fff404 	addi	r7,r7,-48
  80a7c4:	01800284 	movi	r6,10
  80a7c8:	080a4d00 	call	80a4d0 <__multadd>
  80a7cc:	84000044 	addi	r16,r16,1
  80a7d0:	1011883a 	mov	r8,r2
  80a7d4:	847ff71e 	bne	r16,r17,80a7b4 <__s2b+0xc4>
  80a7d8:	4005883a 	mov	r2,r8
  80a7dc:	dfc00617 	ldw	ra,24(sp)
  80a7e0:	dd400517 	ldw	r21,20(sp)
  80a7e4:	dd000417 	ldw	r20,16(sp)
  80a7e8:	dcc00317 	ldw	r19,12(sp)
  80a7ec:	dc800217 	ldw	r18,8(sp)
  80a7f0:	dc400117 	ldw	r17,4(sp)
  80a7f4:	dc000017 	ldw	r16,0(sp)
  80a7f8:	dec00704 	addi	sp,sp,28
  80a7fc:	f800283a 	ret
  80a800:	99400284 	addi	r5,r19,10
  80a804:	003fe706 	br	80a7a4 <__s2b+0xb4>
  80a808:	000b883a 	mov	r5,zero
  80a80c:	003fcd06 	br	80a744 <__s2b+0x54>

0080a810 <_read_r>:
  80a810:	defffd04 	addi	sp,sp,-12
  80a814:	dc000015 	stw	r16,0(sp)
  80a818:	040020b4 	movhi	r16,130
  80a81c:	84233b04 	addi	r16,r16,-29460
  80a820:	dc400115 	stw	r17,4(sp)
  80a824:	80000015 	stw	zero,0(r16)
  80a828:	2023883a 	mov	r17,r4
  80a82c:	2809883a 	mov	r4,r5
  80a830:	300b883a 	mov	r5,r6
  80a834:	380d883a 	mov	r6,r7
  80a838:	dfc00215 	stw	ra,8(sp)
  80a83c:	081114c0 	call	81114c <read>
  80a840:	1007883a 	mov	r3,r2
  80a844:	00bfffc4 	movi	r2,-1
  80a848:	18800626 	beq	r3,r2,80a864 <_read_r+0x54>
  80a84c:	1805883a 	mov	r2,r3
  80a850:	dfc00217 	ldw	ra,8(sp)
  80a854:	dc400117 	ldw	r17,4(sp)
  80a858:	dc000017 	ldw	r16,0(sp)
  80a85c:	dec00304 	addi	sp,sp,12
  80a860:	f800283a 	ret
  80a864:	80800017 	ldw	r2,0(r16)
  80a868:	103ff826 	beq	r2,zero,80a84c <_read_r+0x3c>
  80a86c:	88800015 	stw	r2,0(r17)
  80a870:	1805883a 	mov	r2,r3
  80a874:	dfc00217 	ldw	ra,8(sp)
  80a878:	dc400117 	ldw	r17,4(sp)
  80a87c:	dc000017 	ldw	r16,0(sp)
  80a880:	dec00304 	addi	sp,sp,12
  80a884:	f800283a 	ret

0080a888 <__isinfd>:
  80a888:	200d883a 	mov	r6,r4
  80a88c:	0109c83a 	sub	r4,zero,r4
  80a890:	2188b03a 	or	r4,r4,r6
  80a894:	2008d7fa 	srli	r4,r4,31
  80a898:	00a00034 	movhi	r2,32768
  80a89c:	10bfffc4 	addi	r2,r2,-1
  80a8a0:	1144703a 	and	r2,r2,r5
  80a8a4:	2088b03a 	or	r4,r4,r2
  80a8a8:	009ffc34 	movhi	r2,32752
  80a8ac:	1105c83a 	sub	r2,r2,r4
  80a8b0:	0087c83a 	sub	r3,zero,r2
  80a8b4:	10c4b03a 	or	r2,r2,r3
  80a8b8:	1004d7fa 	srli	r2,r2,31
  80a8bc:	00c00044 	movi	r3,1
  80a8c0:	1885c83a 	sub	r2,r3,r2
  80a8c4:	f800283a 	ret

0080a8c8 <__isnand>:
  80a8c8:	200d883a 	mov	r6,r4
  80a8cc:	0109c83a 	sub	r4,zero,r4
  80a8d0:	2188b03a 	or	r4,r4,r6
  80a8d4:	2008d7fa 	srli	r4,r4,31
  80a8d8:	00a00034 	movhi	r2,32768
  80a8dc:	10bfffc4 	addi	r2,r2,-1
  80a8e0:	1144703a 	and	r2,r2,r5
  80a8e4:	2088b03a 	or	r4,r4,r2
  80a8e8:	009ffc34 	movhi	r2,32752
  80a8ec:	1105c83a 	sub	r2,r2,r4
  80a8f0:	1004d7fa 	srli	r2,r2,31
  80a8f4:	f800283a 	ret

0080a8f8 <__sccl>:
  80a8f8:	28c00003 	ldbu	r3,0(r5)
  80a8fc:	00801784 	movi	r2,94
  80a900:	2a000044 	addi	r8,r5,1
  80a904:	18802526 	beq	r3,r2,80a99c <__sccl+0xa4>
  80a908:	180f883a 	mov	r7,r3
  80a90c:	0013883a 	mov	r9,zero
  80a910:	000d883a 	mov	r6,zero
  80a914:	0007883a 	mov	r3,zero
  80a918:	01404004 	movi	r5,256
  80a91c:	1905883a 	add	r2,r3,r4
  80a920:	18c00044 	addi	r3,r3,1
  80a924:	11800005 	stb	r6,0(r2)
  80a928:	197ffc1e 	bne	r3,r5,80a91c <__sccl+0x24>
  80a92c:	38000c26 	beq	r7,zero,80a960 <__sccl+0x68>
  80a930:	00800044 	movi	r2,1
  80a934:	124dc83a 	sub	r6,r2,r9
  80a938:	3905883a 	add	r2,r7,r4
  80a93c:	11800005 	stb	r6,0(r2)
  80a940:	41400044 	addi	r5,r8,1
  80a944:	02400b44 	movi	r9,45
  80a948:	02801744 	movi	r10,93
  80a94c:	28bfffc3 	ldbu	r2,-1(r5)
  80a950:	2811883a 	mov	r8,r5
  80a954:	12400726 	beq	r2,r9,80a974 <__sccl+0x7c>
  80a958:	12800226 	beq	r2,r10,80a964 <__sccl+0x6c>
  80a95c:	1000031e 	bne	r2,zero,80a96c <__sccl+0x74>
  80a960:	423fffc4 	addi	r8,r8,-1
  80a964:	4005883a 	mov	r2,r8
  80a968:	f800283a 	ret
  80a96c:	100f883a 	mov	r7,r2
  80a970:	003ff106 	br	80a938 <__sccl+0x40>
  80a974:	28c00003 	ldbu	r3,0(r5)
  80a978:	1a800d26 	beq	r3,r10,80a9b0 <__sccl+0xb8>
  80a97c:	19c00c16 	blt	r3,r7,80a9b0 <__sccl+0xb8>
  80a980:	21c5883a 	add	r2,r4,r7
  80a984:	39c00044 	addi	r7,r7,1
  80a988:	11800045 	stb	r6,1(r2)
  80a98c:	10800044 	addi	r2,r2,1
  80a990:	38fffc16 	blt	r7,r3,80a984 <__sccl+0x8c>
  80a994:	29400084 	addi	r5,r5,2
  80a998:	003fec06 	br	80a94c <__sccl+0x54>
  80a99c:	29c00043 	ldbu	r7,1(r5)
  80a9a0:	02400044 	movi	r9,1
  80a9a4:	2a000084 	addi	r8,r5,2
  80a9a8:	480d883a 	mov	r6,r9
  80a9ac:	003fd906 	br	80a914 <__sccl+0x1c>
  80a9b0:	01c00b44 	movi	r7,45
  80a9b4:	003fe006 	br	80a938 <__sccl+0x40>

0080a9b8 <nanf>:
  80a9b8:	009ff034 	movhi	r2,32704
  80a9bc:	f800283a 	ret

0080a9c0 <strcmp>:
  80a9c0:	2144b03a 	or	r2,r4,r5
  80a9c4:	108000cc 	andi	r2,r2,3
  80a9c8:	10001d1e 	bne	r2,zero,80aa40 <strcmp+0x80>
  80a9cc:	200f883a 	mov	r7,r4
  80a9d0:	28800017 	ldw	r2,0(r5)
  80a9d4:	21000017 	ldw	r4,0(r4)
  80a9d8:	280d883a 	mov	r6,r5
  80a9dc:	2080161e 	bne	r4,r2,80aa38 <strcmp+0x78>
  80a9e0:	023fbff4 	movhi	r8,65279
  80a9e4:	423fbfc4 	addi	r8,r8,-257
  80a9e8:	2207883a 	add	r3,r4,r8
  80a9ec:	01602074 	movhi	r5,32897
  80a9f0:	29602004 	addi	r5,r5,-32640
  80a9f4:	1946703a 	and	r3,r3,r5
  80a9f8:	0104303a 	nor	r2,zero,r4
  80a9fc:	10c4703a 	and	r2,r2,r3
  80aa00:	10001c1e 	bne	r2,zero,80aa74 <strcmp+0xb4>
  80aa04:	4013883a 	mov	r9,r8
  80aa08:	2811883a 	mov	r8,r5
  80aa0c:	00000106 	br	80aa14 <strcmp+0x54>
  80aa10:	1800181e 	bne	r3,zero,80aa74 <strcmp+0xb4>
  80aa14:	39c00104 	addi	r7,r7,4
  80aa18:	39000017 	ldw	r4,0(r7)
  80aa1c:	31800104 	addi	r6,r6,4
  80aa20:	31400017 	ldw	r5,0(r6)
  80aa24:	2245883a 	add	r2,r4,r9
  80aa28:	1204703a 	and	r2,r2,r8
  80aa2c:	0106303a 	nor	r3,zero,r4
  80aa30:	1886703a 	and	r3,r3,r2
  80aa34:	217ff626 	beq	r4,r5,80aa10 <strcmp+0x50>
  80aa38:	3809883a 	mov	r4,r7
  80aa3c:	300b883a 	mov	r5,r6
  80aa40:	20c00007 	ldb	r3,0(r4)
  80aa44:	1800051e 	bne	r3,zero,80aa5c <strcmp+0x9c>
  80aa48:	00000606 	br	80aa64 <strcmp+0xa4>
  80aa4c:	21000044 	addi	r4,r4,1
  80aa50:	20c00007 	ldb	r3,0(r4)
  80aa54:	29400044 	addi	r5,r5,1
  80aa58:	18000226 	beq	r3,zero,80aa64 <strcmp+0xa4>
  80aa5c:	28800007 	ldb	r2,0(r5)
  80aa60:	18bffa26 	beq	r3,r2,80aa4c <strcmp+0x8c>
  80aa64:	20c00003 	ldbu	r3,0(r4)
  80aa68:	28800003 	ldbu	r2,0(r5)
  80aa6c:	1885c83a 	sub	r2,r3,r2
  80aa70:	f800283a 	ret
  80aa74:	0005883a 	mov	r2,zero
  80aa78:	f800283a 	ret

0080aa7c <match>:
  80aa7c:	21800017 	ldw	r6,0(r4)
  80aa80:	01c01004 	movi	r7,64
  80aa84:	02001684 	movi	r8,90
  80aa88:	28800007 	ldb	r2,0(r5)
  80aa8c:	29400044 	addi	r5,r5,1
  80aa90:	10000826 	beq	r2,zero,80aab4 <match+0x38>
  80aa94:	31800044 	addi	r6,r6,1
  80aa98:	30c00007 	ldb	r3,0(r6)
  80aa9c:	38c0020e 	bge	r7,r3,80aaa8 <match+0x2c>
  80aaa0:	40c00116 	blt	r8,r3,80aaa8 <match+0x2c>
  80aaa4:	18c00804 	addi	r3,r3,32
  80aaa8:	18bff726 	beq	r3,r2,80aa88 <match+0xc>
  80aaac:	0005883a 	mov	r2,zero
  80aab0:	f800283a 	ret
  80aab4:	30800044 	addi	r2,r6,1
  80aab8:	20800015 	stw	r2,0(r4)
  80aabc:	00800044 	movi	r2,1
  80aac0:	f800283a 	ret

0080aac4 <_strtod_r>:
  80aac4:	deffde04 	addi	sp,sp,-136
  80aac8:	df002015 	stw	fp,128(sp)
  80aacc:	dd401d15 	stw	r21,116(sp)
  80aad0:	dc401915 	stw	r17,100(sp)
  80aad4:	dfc02115 	stw	ra,132(sp)
  80aad8:	ddc01f15 	stw	r23,124(sp)
  80aadc:	dd801e15 	stw	r22,120(sp)
  80aae0:	dd001c15 	stw	r20,112(sp)
  80aae4:	dcc01b15 	stw	r19,108(sp)
  80aae8:	dc801a15 	stw	r18,104(sp)
  80aaec:	dc001815 	stw	r16,96(sp)
  80aaf0:	2823883a 	mov	r17,r5
  80aaf4:	202b883a 	mov	r21,r4
  80aaf8:	d9801515 	stw	r6,84(sp)
  80aafc:	d8000915 	stw	zero,36(sp)
  80ab00:	d8000a15 	stw	zero,40(sp)
  80ab04:	d9400415 	stw	r5,16(sp)
  80ab08:	df000904 	addi	fp,sp,36
  80ab0c:	da000417 	ldw	r8,16(sp)
  80ab10:	00800b44 	movi	r2,45
  80ab14:	40c00003 	ldbu	r3,0(r8)
  80ab18:	10c03536 	bltu	r2,r3,80abf0 <_strtod_r+0x12c>
  80ab1c:	18c5883a 	add	r2,r3,r3
  80ab20:	1085883a 	add	r2,r2,r2
  80ab24:	00c02074 	movhi	r3,129
  80ab28:	18eace04 	addi	r3,r3,-21704
  80ab2c:	10c5883a 	add	r2,r2,r3
  80ab30:	11000017 	ldw	r4,0(r2)
  80ab34:	2000683a 	jmp	r4
  80ab38:	0080ad2c 	andhi	r2,zero,692
  80ab3c:	0080abf0 	cmpltui	r2,zero,687
  80ab40:	0080abf0 	cmpltui	r2,zero,687
  80ab44:	0080abf0 	cmpltui	r2,zero,687
  80ab48:	0080abf0 	cmpltui	r2,zero,687
  80ab4c:	0080abf0 	cmpltui	r2,zero,687
  80ab50:	0080abf0 	cmpltui	r2,zero,687
  80ab54:	0080abf0 	cmpltui	r2,zero,687
  80ab58:	0080abf0 	cmpltui	r2,zero,687
  80ab5c:	0080b044 	movi	r2,705
  80ab60:	0080b044 	movi	r2,705
  80ab64:	0080b044 	movi	r2,705
  80ab68:	0080b044 	movi	r2,705
  80ab6c:	0080b044 	movi	r2,705
  80ab70:	0080abf0 	cmpltui	r2,zero,687
  80ab74:	0080abf0 	cmpltui	r2,zero,687
  80ab78:	0080abf0 	cmpltui	r2,zero,687
  80ab7c:	0080abf0 	cmpltui	r2,zero,687
  80ab80:	0080abf0 	cmpltui	r2,zero,687
  80ab84:	0080abf0 	cmpltui	r2,zero,687
  80ab88:	0080abf0 	cmpltui	r2,zero,687
  80ab8c:	0080abf0 	cmpltui	r2,zero,687
  80ab90:	0080abf0 	cmpltui	r2,zero,687
  80ab94:	0080abf0 	cmpltui	r2,zero,687
  80ab98:	0080abf0 	cmpltui	r2,zero,687
  80ab9c:	0080abf0 	cmpltui	r2,zero,687
  80aba0:	0080abf0 	cmpltui	r2,zero,687
  80aba4:	0080abf0 	cmpltui	r2,zero,687
  80aba8:	0080abf0 	cmpltui	r2,zero,687
  80abac:	0080abf0 	cmpltui	r2,zero,687
  80abb0:	0080abf0 	cmpltui	r2,zero,687
  80abb4:	0080abf0 	cmpltui	r2,zero,687
  80abb8:	0080b044 	movi	r2,705
  80abbc:	0080abf0 	cmpltui	r2,zero,687
  80abc0:	0080abf0 	cmpltui	r2,zero,687
  80abc4:	0080abf0 	cmpltui	r2,zero,687
  80abc8:	0080abf0 	cmpltui	r2,zero,687
  80abcc:	0080abf0 	cmpltui	r2,zero,687
  80abd0:	0080abf0 	cmpltui	r2,zero,687
  80abd4:	0080abf0 	cmpltui	r2,zero,687
  80abd8:	0080abf0 	cmpltui	r2,zero,687
  80abdc:	0080abf0 	cmpltui	r2,zero,687
  80abe0:	0080abf0 	cmpltui	r2,zero,687
  80abe4:	0080b024 	muli	r2,zero,704
  80abe8:	0080abf0 	cmpltui	r2,zero,687
  80abec:	0080b050 	cmplti	r2,zero,705
  80abf0:	d8001115 	stw	zero,68(sp)
  80abf4:	40c00007 	ldb	r3,0(r8)
  80abf8:	00800c04 	movi	r2,48
  80abfc:	1880d026 	beq	r3,r2,80af40 <_strtod_r+0x47c>
  80ac00:	001f883a 	mov	r15,zero
  80ac04:	41000007 	ldb	r4,0(r8)
  80ac08:	00c00bc4 	movi	r3,47
  80ac0c:	402d883a 	mov	r22,r8
  80ac10:	1903470e 	bge	r3,r4,80b930 <_strtod_r+0xe6c>
  80ac14:	00800e44 	movi	r2,57
  80ac18:	11034516 	blt	r2,r4,80b930 <_strtod_r+0xe6c>
  80ac1c:	180f883a 	mov	r7,r3
  80ac20:	1013883a 	mov	r9,r2
  80ac24:	4007883a 	mov	r3,r8
  80ac28:	000d883a 	mov	r6,zero
  80ac2c:	0029883a 	mov	r20,zero
  80ac30:	0021883a 	mov	r16,zero
  80ac34:	01400204 	movi	r5,8
  80ac38:	028003c4 	movi	r10,15
  80ac3c:	29803116 	blt	r5,r6,80ad04 <_strtod_r+0x240>
  80ac40:	a08002a4 	muli	r2,r20,10
  80ac44:	1105883a 	add	r2,r2,r4
  80ac48:	153ff404 	addi	r20,r2,-48
  80ac4c:	1a000044 	addi	r8,r3,1
  80ac50:	da000415 	stw	r8,16(sp)
  80ac54:	41000007 	ldb	r4,0(r8)
  80ac58:	31800044 	addi	r6,r6,1
  80ac5c:	4007883a 	mov	r3,r8
  80ac60:	3900010e 	bge	r7,r4,80ac68 <_strtod_r+0x1a4>
  80ac64:	493ff50e 	bge	r9,r4,80ac3c <_strtod_r+0x178>
  80ac68:	00800b84 	movi	r2,46
  80ac6c:	2080c126 	beq	r4,r2,80af74 <_strtod_r+0x4b0>
  80ac70:	3027883a 	mov	r19,r6
  80ac74:	0025883a 	mov	r18,zero
  80ac78:	0015883a 	mov	r10,zero
  80ac7c:	000f883a 	mov	r7,zero
  80ac80:	00801944 	movi	r2,101
  80ac84:	20802426 	beq	r4,r2,80ad18 <_strtod_r+0x254>
  80ac88:	00801144 	movi	r2,69
  80ac8c:	20802226 	beq	r4,r2,80ad18 <_strtod_r+0x254>
  80ac90:	9816c03a 	cmpne	r11,r19,zero
  80ac94:	000b883a 	mov	r5,zero
  80ac98:	5800631e 	bne	r11,zero,80ae28 <_strtod_r+0x364>
  80ac9c:	3800c126 	beq	r7,zero,80afa4 <_strtod_r+0x4e0>
  80aca0:	d8c01517 	ldw	r3,84(sp)
  80aca4:	18000226 	beq	r3,zero,80acb0 <_strtod_r+0x1ec>
  80aca8:	d8800417 	ldw	r2,16(sp)
  80acac:	18800015 	stw	r2,0(r3)
  80acb0:	d9001117 	ldw	r4,68(sp)
  80acb4:	2005003a 	cmpeq	r2,r4,zero
  80acb8:	10001f1e 	bne	r2,zero,80ad38 <_strtod_r+0x274>
  80acbc:	e0800017 	ldw	r2,0(fp)
  80acc0:	e0c00117 	ldw	r3,4(fp)
  80acc4:	1009883a 	mov	r4,r2
  80acc8:	1960003c 	xorhi	r5,r3,32768
  80accc:	2005883a 	mov	r2,r4
  80acd0:	2807883a 	mov	r3,r5
  80acd4:	dfc02117 	ldw	ra,132(sp)
  80acd8:	df002017 	ldw	fp,128(sp)
  80acdc:	ddc01f17 	ldw	r23,124(sp)
  80ace0:	dd801e17 	ldw	r22,120(sp)
  80ace4:	dd401d17 	ldw	r21,116(sp)
  80ace8:	dd001c17 	ldw	r20,112(sp)
  80acec:	dcc01b17 	ldw	r19,108(sp)
  80acf0:	dc801a17 	ldw	r18,104(sp)
  80acf4:	dc401917 	ldw	r17,100(sp)
  80acf8:	dc001817 	ldw	r16,96(sp)
  80acfc:	dec02204 	addi	sp,sp,136
  80ad00:	f800283a 	ret
  80ad04:	51bfd116 	blt	r10,r6,80ac4c <_strtod_r+0x188>
  80ad08:	808002a4 	muli	r2,r16,10
  80ad0c:	1105883a 	add	r2,r2,r4
  80ad10:	143ff404 	addi	r16,r2,-48
  80ad14:	003fcd06 	br	80ac4c <_strtod_r+0x188>
  80ad18:	9816c03a 	cmpne	r11,r19,zero
  80ad1c:	5800091e 	bne	r11,zero,80ad44 <_strtod_r+0x280>
  80ad20:	3800081e 	bne	r7,zero,80ad44 <_strtod_r+0x280>
  80ad24:	7805003a 	cmpeq	r2,r15,zero
  80ad28:	10000626 	beq	r2,zero,80ad44 <_strtod_r+0x280>
  80ad2c:	d8001115 	stw	zero,68(sp)
  80ad30:	dc400415 	stw	r17,16(sp)
  80ad34:	003fda06 	br	80aca0 <_strtod_r+0x1dc>
  80ad38:	e1000017 	ldw	r4,0(fp)
  80ad3c:	e1400117 	ldw	r5,4(fp)
  80ad40:	003fe206 	br	80accc <_strtod_r+0x208>
  80ad44:	dc400417 	ldw	r17,16(sp)
  80ad48:	00800ac4 	movi	r2,43
  80ad4c:	8a000044 	addi	r8,r17,1
  80ad50:	da000415 	stw	r8,16(sp)
  80ad54:	88c00047 	ldb	r3,1(r17)
  80ad58:	4009883a 	mov	r4,r8
  80ad5c:	1880bf26 	beq	r3,r2,80b05c <_strtod_r+0x598>
  80ad60:	00800b44 	movi	r2,45
  80ad64:	18834526 	beq	r3,r2,80ba7c <_strtod_r+0xfb8>
  80ad68:	1809883a 	mov	r4,r3
  80ad6c:	20fff404 	addi	r3,r4,-48
  80ad70:	00800244 	movi	r2,9
  80ad74:	001d883a 	mov	r14,zero
  80ad78:	10c0bf36 	bltu	r2,r3,80b078 <_strtod_r+0x5b4>
  80ad7c:	00800c04 	movi	r2,48
  80ad80:	2080061e 	bne	r4,r2,80ad9c <_strtod_r+0x2d8>
  80ad84:	da000417 	ldw	r8,16(sp)
  80ad88:	2005883a 	mov	r2,r4
  80ad8c:	42000044 	addi	r8,r8,1
  80ad90:	da000415 	stw	r8,16(sp)
  80ad94:	41000007 	ldb	r4,0(r8)
  80ad98:	20bffc26 	beq	r4,r2,80ad8c <_strtod_r+0x2c8>
  80ad9c:	20fff3c4 	addi	r3,r4,-49
  80ada0:	00800204 	movi	r2,8
  80ada4:	10ffbb36 	bltu	r2,r3,80ac94 <_strtod_r+0x1d0>
  80ada8:	da000417 	ldw	r8,16(sp)
  80adac:	227ff404 	addi	r9,r4,-48
  80adb0:	03000bc4 	movi	r12,47
  80adb4:	4007883a 	mov	r3,r8
  80adb8:	42000044 	addi	r8,r8,1
  80adbc:	da000415 	stw	r8,16(sp)
  80adc0:	41000007 	ldb	r4,0(r8)
  80adc4:	61000d0e 	bge	r12,r4,80adfc <_strtod_r+0x338>
  80adc8:	00800e44 	movi	r2,57
  80adcc:	11000b16 	blt	r2,r4,80adfc <_strtod_r+0x338>
  80add0:	601b883a 	mov	r13,r12
  80add4:	1019883a 	mov	r12,r2
  80add8:	00000106 	br	80ade0 <_strtod_r+0x31c>
  80addc:	61000716 	blt	r12,r4,80adfc <_strtod_r+0x338>
  80ade0:	488002a4 	muli	r2,r9,10
  80ade4:	42000044 	addi	r8,r8,1
  80ade8:	da000415 	stw	r8,16(sp)
  80adec:	2085883a 	add	r2,r4,r2
  80adf0:	41000007 	ldb	r4,0(r8)
  80adf4:	127ff404 	addi	r9,r2,-48
  80adf8:	693ff816 	blt	r13,r4,80addc <_strtod_r+0x318>
  80adfc:	40c7c83a 	sub	r3,r8,r3
  80ae00:	00800204 	movi	r2,8
  80ae04:	10c2e416 	blt	r2,r3,80b998 <_strtod_r+0xed4>
  80ae08:	009387c4 	movi	r2,19999
  80ae0c:	480b883a 	mov	r5,r9
  80ae10:	1240010e 	bge	r2,r9,80ae18 <_strtod_r+0x354>
  80ae14:	100b883a 	mov	r5,r2
  80ae18:	7005003a 	cmpeq	r2,r14,zero
  80ae1c:	103f9e1e 	bne	r2,zero,80ac98 <_strtod_r+0x1d4>
  80ae20:	014bc83a 	sub	r5,zero,r5
  80ae24:	583f9d26 	beq	r11,zero,80ac9c <_strtod_r+0x1d8>
  80ae28:	2a8bc83a 	sub	r5,r5,r10
  80ae2c:	d9400f15 	stw	r5,60(sp)
  80ae30:	30007a1e 	bne	r6,zero,80b01c <_strtod_r+0x558>
  80ae34:	dcc01215 	stw	r19,72(sp)
  80ae38:	00800404 	movi	r2,16
  80ae3c:	9825883a 	mov	r18,r19
  80ae40:	14c0010e 	bge	r2,r19,80ae48 <_strtod_r+0x384>
  80ae44:	1025883a 	mov	r18,r2
  80ae48:	a009883a 	mov	r4,r20
  80ae4c:	080f9400 	call	80f940 <__floatunsidf>
  80ae50:	100f883a 	mov	r7,r2
  80ae54:	e0800015 	stw	r2,0(fp)
  80ae58:	00800244 	movi	r2,9
  80ae5c:	e0c00115 	stw	r3,4(fp)
  80ae60:	1480160e 	bge	r2,r18,80aebc <_strtod_r+0x3f8>
  80ae64:	900c90fa 	slli	r6,r18,3
  80ae68:	01002074 	movhi	r4,129
  80ae6c:	21140e04 	addi	r4,r4,20536
  80ae70:	180b883a 	mov	r5,r3
  80ae74:	310d883a 	add	r6,r6,r4
  80ae78:	30ffef17 	ldw	r3,-68(r6)
  80ae7c:	30bfee17 	ldw	r2,-72(r6)
  80ae80:	3809883a 	mov	r4,r7
  80ae84:	180f883a 	mov	r7,r3
  80ae88:	100d883a 	mov	r6,r2
  80ae8c:	080edb00 	call	80edb0 <__muldf3>
  80ae90:	8009883a 	mov	r4,r16
  80ae94:	1823883a 	mov	r17,r3
  80ae98:	1021883a 	mov	r16,r2
  80ae9c:	080f9400 	call	80f940 <__floatunsidf>
  80aea0:	880b883a 	mov	r5,r17
  80aea4:	180f883a 	mov	r7,r3
  80aea8:	8009883a 	mov	r4,r16
  80aeac:	100d883a 	mov	r6,r2
  80aeb0:	080ed3c0 	call	80ed3c <__adddf3>
  80aeb4:	e0c00115 	stw	r3,4(fp)
  80aeb8:	e0800015 	stw	r2,0(fp)
  80aebc:	010003c4 	movi	r4,15
  80aec0:	24c09816 	blt	r4,r19,80b124 <_strtod_r+0x660>
  80aec4:	d9800f17 	ldw	r6,60(sp)
  80aec8:	303f7526 	beq	r6,zero,80aca0 <_strtod_r+0x1dc>
  80aecc:	0183be0e 	bge	zero,r6,80bdc8 <_strtod_r+0x1304>
  80aed0:	00800584 	movi	r2,22
  80aed4:	1182b20e 	bge	r2,r6,80b9a0 <_strtod_r+0xedc>
  80aed8:	d8c00f17 	ldw	r3,60(sp)
  80aedc:	24e3c83a 	sub	r17,r4,r19
  80aee0:	88800584 	addi	r2,r17,22
  80aee4:	10c08f16 	blt	r2,r3,80b124 <_strtod_r+0x660>
  80aee8:	880890fa 	slli	r4,r17,3
  80aeec:	04002074 	movhi	r16,129
  80aef0:	84140e04 	addi	r16,r16,20536
  80aef4:	e0800017 	ldw	r2,0(fp)
  80aef8:	2409883a 	add	r4,r4,r16
  80aefc:	22000017 	ldw	r8,0(r4)
  80af00:	22400117 	ldw	r9,4(r4)
  80af04:	e0c00117 	ldw	r3,4(fp)
  80af08:	1009883a 	mov	r4,r2
  80af0c:	480f883a 	mov	r7,r9
  80af10:	180b883a 	mov	r5,r3
  80af14:	400d883a 	mov	r6,r8
  80af18:	080edb00 	call	80edb0 <__muldf3>
  80af1c:	d9000f17 	ldw	r4,60(sp)
  80af20:	180b883a 	mov	r5,r3
  80af24:	2455c83a 	sub	r10,r4,r17
  80af28:	501490fa 	slli	r10,r10,3
  80af2c:	1009883a 	mov	r4,r2
  80af30:	5415883a 	add	r10,r10,r16
  80af34:	52000017 	ldw	r8,0(r10)
  80af38:	52400117 	ldw	r9,4(r10)
  80af3c:	0002a206 	br	80b9c8 <_strtod_r+0xf04>
  80af40:	40c00047 	ldb	r3,1(r8)
  80af44:	00801604 	movi	r2,88
  80af48:	18804e26 	beq	r3,r2,80b084 <_strtod_r+0x5c0>
  80af4c:	00801e04 	movi	r2,120
  80af50:	18804c26 	beq	r3,r2,80b084 <_strtod_r+0x5c0>
  80af54:	42000044 	addi	r8,r8,1
  80af58:	da000415 	stw	r8,16(sp)
  80af5c:	40c00007 	ldb	r3,0(r8)
  80af60:	00800c04 	movi	r2,48
  80af64:	18bffb26 	beq	r3,r2,80af54 <_strtod_r+0x490>
  80af68:	183f4d26 	beq	r3,zero,80aca0 <_strtod_r+0x1dc>
  80af6c:	03c00044 	movi	r15,1
  80af70:	003f2406 	br	80ac04 <_strtod_r+0x140>
  80af74:	42000044 	addi	r8,r8,1
  80af78:	da000415 	stw	r8,16(sp)
  80af7c:	19000047 	ldb	r4,1(r3)
  80af80:	3000b726 	beq	r6,zero,80b260 <_strtod_r+0x79c>
  80af84:	3027883a 	mov	r19,r6
  80af88:	0015883a 	mov	r10,zero
  80af8c:	000f883a 	mov	r7,zero
  80af90:	227ff404 	addi	r9,r4,-48
  80af94:	00800244 	movi	r2,9
  80af98:	1242592e 	bgeu	r2,r9,80b900 <_strtod_r+0xe3c>
  80af9c:	04800044 	movi	r18,1
  80afa0:	003f3706 	br	80ac80 <_strtod_r+0x1bc>
  80afa4:	7804c03a 	cmpne	r2,r15,zero
  80afa8:	103f3d1e 	bne	r2,zero,80aca0 <_strtod_r+0x1dc>
  80afac:	9004c03a 	cmpne	r2,r18,zero
  80afb0:	103f5e1e 	bne	r2,zero,80ad2c <_strtod_r+0x268>
  80afb4:	00801384 	movi	r2,78
  80afb8:	2083a226 	beq	r4,r2,80be44 <_strtod_r+0x1380>
  80afbc:	11039d16 	blt	r2,r4,80be34 <_strtod_r+0x1370>
  80afc0:	00801244 	movi	r2,73
  80afc4:	20bf591e 	bne	r4,r2,80ad2c <_strtod_r+0x268>
  80afc8:	dc000404 	addi	r16,sp,16
  80afcc:	8009883a 	mov	r4,r16
  80afd0:	01402074 	movhi	r5,129
  80afd4:	29545704 	addi	r5,r5,20828
  80afd8:	080aa7c0 	call	80aa7c <match>
  80afdc:	103f5326 	beq	r2,zero,80ad2c <_strtod_r+0x268>
  80afe0:	d8800417 	ldw	r2,16(sp)
  80afe4:	8009883a 	mov	r4,r16
  80afe8:	01402074 	movhi	r5,129
  80afec:	29545804 	addi	r5,r5,20832
  80aff0:	123fffc4 	addi	r8,r2,-1
  80aff4:	da000415 	stw	r8,16(sp)
  80aff8:	080aa7c0 	call	80aa7c <match>
  80affc:	1000031e 	bne	r2,zero,80b00c <_strtod_r+0x548>
  80b000:	d8800417 	ldw	r2,16(sp)
  80b004:	12000044 	addi	r8,r2,1
  80b008:	da000415 	stw	r8,16(sp)
  80b00c:	019ffc34 	movhi	r6,32752
  80b010:	e1800115 	stw	r6,4(fp)
  80b014:	e0000015 	stw	zero,0(fp)
  80b018:	003f2106 	br	80aca0 <_strtod_r+0x1dc>
  80b01c:	d9801215 	stw	r6,72(sp)
  80b020:	003f8506 	br	80ae38 <_strtod_r+0x374>
  80b024:	d8001115 	stw	zero,68(sp)
  80b028:	42000044 	addi	r8,r8,1
  80b02c:	da000415 	stw	r8,16(sp)
  80b030:	40800007 	ldb	r2,0(r8)
  80b034:	103eef1e 	bne	r2,zero,80abf4 <_strtod_r+0x130>
  80b038:	d8001115 	stw	zero,68(sp)
  80b03c:	dc400415 	stw	r17,16(sp)
  80b040:	003f1706 	br	80aca0 <_strtod_r+0x1dc>
  80b044:	42000044 	addi	r8,r8,1
  80b048:	da000415 	stw	r8,16(sp)
  80b04c:	003eaf06 	br	80ab0c <_strtod_r+0x48>
  80b050:	00800044 	movi	r2,1
  80b054:	d8801115 	stw	r2,68(sp)
  80b058:	003ff306 	br	80b028 <_strtod_r+0x564>
  80b05c:	001d883a 	mov	r14,zero
  80b060:	42000044 	addi	r8,r8,1
  80b064:	da000415 	stw	r8,16(sp)
  80b068:	21000047 	ldb	r4,1(r4)
  80b06c:	00800244 	movi	r2,9
  80b070:	20fff404 	addi	r3,r4,-48
  80b074:	10ff412e 	bgeu	r2,r3,80ad7c <_strtod_r+0x2b8>
  80b078:	000b883a 	mov	r5,zero
  80b07c:	dc400415 	stw	r17,16(sp)
  80b080:	003f0506 	br	80ac98 <_strtod_r+0x1d4>
  80b084:	d8c01117 	ldw	r3,68(sp)
  80b088:	04802074 	movhi	r18,129
  80b08c:	9496e304 	addi	r18,r18,23436
  80b090:	d8800504 	addi	r2,sp,20
  80b094:	a809883a 	mov	r4,r21
  80b098:	d9400404 	addi	r5,sp,16
  80b09c:	900d883a 	mov	r6,r18
  80b0a0:	d9c00604 	addi	r7,sp,24
  80b0a4:	d8800015 	stw	r2,0(sp)
  80b0a8:	d8c00115 	stw	r3,4(sp)
  80b0ac:	080d0300 	call	80d030 <__gethex>
  80b0b0:	140001cc 	andi	r16,r2,7
  80b0b4:	1027883a 	mov	r19,r2
  80b0b8:	803ef926 	beq	r16,zero,80aca0 <_strtod_r+0x1dc>
  80b0bc:	05000184 	movi	r20,6
  80b0c0:	853f1a26 	beq	r16,r20,80ad2c <_strtod_r+0x268>
  80b0c4:	d9800517 	ldw	r6,20(sp)
  80b0c8:	30000626 	beq	r6,zero,80b0e4 <_strtod_r+0x620>
  80b0cc:	91400017 	ldw	r5,0(r18)
  80b0d0:	d9000d04 	addi	r4,sp,52
  80b0d4:	0809cbc0 	call	809cbc <__copybits>
  80b0d8:	d9400517 	ldw	r5,20(sp)
  80b0dc:	a809883a 	mov	r4,r21
  80b0e0:	080981c0 	call	80981c <_Bfree>
  80b0e4:	d9400617 	ldw	r5,24(sp)
  80b0e8:	a4024136 	bltu	r20,r16,80b9f0 <_strtod_r+0xf2c>
  80b0ec:	8405883a 	add	r2,r16,r16
  80b0f0:	1085883a 	add	r2,r2,r2
  80b0f4:	00c02074 	movhi	r3,129
  80b0f8:	18ec4204 	addi	r3,r3,-20216
  80b0fc:	10c5883a 	add	r2,r2,r3
  80b100:	11000017 	ldw	r4,0(r2)
  80b104:	2000683a 	jmp	r4
  80b108:	0080ba30 	cmpltui	r2,zero,744
  80b10c:	0080ba3c 	xorhi	r2,zero,744
  80b110:	0080b9e0 	cmpeqi	r2,zero,743
  80b114:	0080ba08 	cmpgei	r2,zero,744
  80b118:	0080ba18 	cmpnei	r2,zero,744
  80b11c:	0080ba3c 	xorhi	r2,zero,744
  80b120:	0080ba30 	cmpltui	r2,zero,744
  80b124:	d8c00f17 	ldw	r3,60(sp)
  80b128:	9c85c83a 	sub	r2,r19,r18
  80b12c:	18a1883a 	add	r16,r3,r2
  80b130:	0402d00e 	bge	zero,r16,80bc74 <_strtod_r+0x11b0>
  80b134:	814003cc 	andi	r5,r16,15
  80b138:	28000f26 	beq	r5,zero,80b178 <_strtod_r+0x6b4>
  80b13c:	280a90fa 	slli	r5,r5,3
  80b140:	01002074 	movhi	r4,129
  80b144:	21140e04 	addi	r4,r4,20536
  80b148:	e0800017 	ldw	r2,0(fp)
  80b14c:	290b883a 	add	r5,r5,r4
  80b150:	2a000017 	ldw	r8,0(r5)
  80b154:	e0c00117 	ldw	r3,4(fp)
  80b158:	2a400117 	ldw	r9,4(r5)
  80b15c:	1009883a 	mov	r4,r2
  80b160:	180b883a 	mov	r5,r3
  80b164:	480f883a 	mov	r7,r9
  80b168:	400d883a 	mov	r6,r8
  80b16c:	080edb00 	call	80edb0 <__muldf3>
  80b170:	e0c00115 	stw	r3,4(fp)
  80b174:	e0800015 	stw	r2,0(fp)
  80b178:	00bffc04 	movi	r2,-16
  80b17c:	808c703a 	and	r6,r16,r2
  80b180:	30005b26 	beq	r6,zero,80b2f0 <_strtod_r+0x82c>
  80b184:	00804d04 	movi	r2,308
  80b188:	1181fd16 	blt	r2,r6,80b980 <_strtod_r+0xebc>
  80b18c:	3021d13a 	srai	r16,r6,4
  80b190:	00800044 	movi	r2,1
  80b194:	1403610e 	bge	r2,r16,80bf1c <_strtod_r+0x1458>
  80b198:	102f883a 	mov	r23,r2
  80b19c:	0025883a 	mov	r18,zero
  80b1a0:	04402074 	movhi	r17,129
  80b1a4:	8c544004 	addi	r17,r17,20736
  80b1a8:	8080004c 	andi	r2,r16,1
  80b1ac:	1005003a 	cmpeq	r2,r2,zero
  80b1b0:	1000091e 	bne	r2,zero,80b1d8 <_strtod_r+0x714>
  80b1b4:	e0800017 	ldw	r2,0(fp)
  80b1b8:	e0c00117 	ldw	r3,4(fp)
  80b1bc:	89800017 	ldw	r6,0(r17)
  80b1c0:	89c00117 	ldw	r7,4(r17)
  80b1c4:	180b883a 	mov	r5,r3
  80b1c8:	1009883a 	mov	r4,r2
  80b1cc:	080edb00 	call	80edb0 <__muldf3>
  80b1d0:	e0c00115 	stw	r3,4(fp)
  80b1d4:	e0800015 	stw	r2,0(fp)
  80b1d8:	8021d07a 	srai	r16,r16,1
  80b1dc:	94800044 	addi	r18,r18,1
  80b1e0:	8c400204 	addi	r17,r17,8
  80b1e4:	bc3ff016 	blt	r23,r16,80b1a8 <_strtod_r+0x6e4>
  80b1e8:	900e90fa 	slli	r7,r18,3
  80b1ec:	01802074 	movhi	r6,129
  80b1f0:	31944004 	addi	r6,r6,20736
  80b1f4:	e2000117 	ldw	r8,4(fp)
  80b1f8:	398f883a 	add	r7,r7,r6
  80b1fc:	38800017 	ldw	r2,0(r7)
  80b200:	38c00117 	ldw	r3,4(r7)
  80b204:	e1000017 	ldw	r4,0(fp)
  80b208:	01bf2c34 	movhi	r6,64688
  80b20c:	418d883a 	add	r6,r8,r6
  80b210:	300b883a 	mov	r5,r6
  80b214:	180f883a 	mov	r7,r3
  80b218:	100d883a 	mov	r6,r2
  80b21c:	080edb00 	call	80edb0 <__muldf3>
  80b220:	1009883a 	mov	r4,r2
  80b224:	180b883a 	mov	r5,r3
  80b228:	199ffc2c 	andhi	r6,r3,32752
  80b22c:	009f2834 	movhi	r2,31904
  80b230:	e1000015 	stw	r4,0(fp)
  80b234:	e1400115 	stw	r5,4(fp)
  80b238:	1181d136 	bltu	r2,r6,80b980 <_strtod_r+0xebc>
  80b23c:	009f2434 	movhi	r2,31888
  80b240:	1183202e 	bgeu	r2,r6,80bec4 <_strtod_r+0x1400>
  80b244:	d8001415 	stw	zero,80(sp)
  80b248:	019ffc34 	movhi	r6,32752
  80b24c:	31bfffc4 	addi	r6,r6,-1
  80b250:	01ffffc4 	movi	r7,-1
  80b254:	e1800115 	stw	r6,4(fp)
  80b258:	e1c00015 	stw	r7,0(fp)
  80b25c:	00002506 	br	80b2f4 <_strtod_r+0x830>
  80b260:	00800c04 	movi	r2,48
  80b264:	2083151e 	bne	r4,r2,80bebc <_strtod_r+0x13f8>
  80b268:	2005883a 	mov	r2,r4
  80b26c:	000f883a 	mov	r7,zero
  80b270:	42000044 	addi	r8,r8,1
  80b274:	da000415 	stw	r8,16(sp)
  80b278:	41000007 	ldb	r4,0(r8)
  80b27c:	39c00044 	addi	r7,r7,1
  80b280:	20bffb26 	beq	r4,r2,80b270 <_strtod_r+0x7ac>
  80b284:	20fff3c4 	addi	r3,r4,-49
  80b288:	00800204 	movi	r2,8
  80b28c:	10c1b836 	bltu	r2,r3,80b970 <_strtod_r+0xeac>
  80b290:	dd800417 	ldw	r22,16(sp)
  80b294:	3815883a 	mov	r10,r7
  80b298:	227ff404 	addi	r9,r4,-48
  80b29c:	b011883a 	mov	r8,r22
  80b2a0:	0027883a 	mov	r19,zero
  80b2a4:	01c00044 	movi	r7,1
  80b2a8:	4801fe26 	beq	r9,zero,80baa4 <_strtod_r+0xfe0>
  80b2ac:	00800044 	movi	r2,1
  80b2b0:	51d5883a 	add	r10,r10,r7
  80b2b4:	11c31f0e 	bge	r2,r7,80bf34 <_strtod_r+0x1470>
  80b2b8:	1009883a 	mov	r4,r2
  80b2bc:	9807883a 	mov	r3,r19
  80b2c0:	02c00204 	movi	r11,8
  80b2c4:	03000404 	movi	r12,16
  80b2c8:	00000306 	br	80b2d8 <_strtod_r+0x814>
  80b2cc:	a50002a4 	muli	r20,r20,10
  80b2d0:	21000044 	addi	r4,r4,1
  80b2d4:	21c1eb26 	beq	r4,r7,80ba84 <_strtod_r+0xfc0>
  80b2d8:	18c00044 	addi	r3,r3,1
  80b2dc:	18bfffc4 	addi	r2,r3,-1
  80b2e0:	58bffa0e 	bge	r11,r2,80b2cc <_strtod_r+0x808>
  80b2e4:	60fffa16 	blt	r12,r3,80b2d0 <_strtod_r+0x80c>
  80b2e8:	840002a4 	muli	r16,r16,10
  80b2ec:	003ff806 	br	80b2d0 <_strtod_r+0x80c>
  80b2f0:	d8001415 	stw	zero,80(sp)
  80b2f4:	d9801217 	ldw	r6,72(sp)
  80b2f8:	a809883a 	mov	r4,r21
  80b2fc:	b00b883a 	mov	r5,r22
  80b300:	980f883a 	mov	r7,r19
  80b304:	dd000015 	stw	r20,0(sp)
  80b308:	080a6f00 	call	80a6f0 <__s2b>
  80b30c:	d9800f17 	ldw	r6,60(sp)
  80b310:	11000304 	addi	r4,r2,12
  80b314:	d8801015 	stw	r2,64(sp)
  80b318:	300c803a 	cmplt	r6,r6,zero
  80b31c:	d9001715 	stw	r4,92(sp)
  80b320:	d9801615 	stw	r6,88(sp)
  80b324:	d8801017 	ldw	r2,64(sp)
  80b328:	a809883a 	mov	r4,r21
  80b32c:	11400117 	ldw	r5,4(r2)
  80b330:	0809d9c0 	call	809d9c <_Balloc>
  80b334:	d8c01017 	ldw	r3,64(sp)
  80b338:	d9401717 	ldw	r5,92(sp)
  80b33c:	11000304 	addi	r4,r2,12
  80b340:	19800417 	ldw	r6,16(r3)
  80b344:	102f883a 	mov	r23,r2
  80b348:	318d883a 	add	r6,r6,r6
  80b34c:	318d883a 	add	r6,r6,r6
  80b350:	31800204 	addi	r6,r6,8
  80b354:	08031c80 	call	8031c8 <memcpy>
  80b358:	e2000017 	ldw	r8,0(fp)
  80b35c:	e2400117 	ldw	r9,4(fp)
  80b360:	d9800304 	addi	r6,sp,12
  80b364:	400b883a 	mov	r5,r8
  80b368:	a809883a 	mov	r4,r21
  80b36c:	d9c00204 	addi	r7,sp,8
  80b370:	d9800015 	stw	r6,0(sp)
  80b374:	480d883a 	mov	r6,r9
  80b378:	0809e580 	call	809e58 <__d2b>
  80b37c:	a809883a 	mov	r4,r21
  80b380:	01400044 	movi	r5,1
  80b384:	d8800515 	stw	r2,20(sp)
  80b388:	080a4940 	call	80a494 <__i2b>
  80b38c:	102d883a 	mov	r22,r2
  80b390:	d8801617 	ldw	r2,88(sp)
  80b394:	1001051e 	bne	r2,zero,80b7ac <_strtod_r+0xce8>
  80b398:	dd000f17 	ldw	r20,60(sp)
  80b39c:	000f883a 	mov	r7,zero
  80b3a0:	0013883a 	mov	r9,zero
  80b3a4:	a011883a 	mov	r8,r20
  80b3a8:	d8800217 	ldw	r2,8(sp)
  80b3ac:	1000fd16 	blt	r2,zero,80b7a4 <_strtod_r+0xce0>
  80b3b0:	388f883a 	add	r7,r7,r2
  80b3b4:	d9801417 	ldw	r6,80(sp)
  80b3b8:	d9400317 	ldw	r5,12(sp)
  80b3bc:	00ff0084 	movi	r3,-1022
  80b3c0:	1189c83a 	sub	r4,r2,r6
  80b3c4:	2145883a 	add	r2,r4,r5
  80b3c8:	10bfffc4 	addi	r2,r2,-1
  80b3cc:	10c09f0e 	bge	r2,r3,80b64c <_strtod_r+0xb88>
  80b3d0:	21810cc4 	addi	r6,r4,1075
  80b3d4:	d8c01417 	ldw	r3,80(sp)
  80b3d8:	4185883a 	add	r2,r8,r6
  80b3dc:	39a1883a 	add	r16,r7,r6
  80b3e0:	18a5883a 	add	r18,r3,r2
  80b3e4:	3807883a 	mov	r3,r7
  80b3e8:	81c0010e 	bge	r16,r7,80b3f0 <_strtod_r+0x92c>
  80b3ec:	8007883a 	mov	r3,r16
  80b3f0:	9005883a 	mov	r2,r18
  80b3f4:	1c80010e 	bge	r3,r18,80b3fc <_strtod_r+0x938>
  80b3f8:	1805883a 	mov	r2,r3
  80b3fc:	0080e70e 	bge	zero,r2,80b79c <_strtod_r+0xcd8>
  80b400:	38a7c83a 	sub	r19,r7,r2
  80b404:	80a1c83a 	sub	r16,r16,r2
  80b408:	90a5c83a 	sub	r18,r18,r2
  80b40c:	02400e0e 	bge	zero,r9,80b448 <_strtod_r+0x984>
  80b410:	480d883a 	mov	r6,r9
  80b414:	b00b883a 	mov	r5,r22
  80b418:	a809883a 	mov	r4,r21
  80b41c:	080a5d00 	call	80a5d0 <__pow5mult>
  80b420:	d9800517 	ldw	r6,20(sp)
  80b424:	a809883a 	mov	r4,r21
  80b428:	100b883a 	mov	r5,r2
  80b42c:	102d883a 	mov	r22,r2
  80b430:	080a2ac0 	call	80a2ac <__multiply>
  80b434:	d9400517 	ldw	r5,20(sp)
  80b438:	1023883a 	mov	r17,r2
  80b43c:	a809883a 	mov	r4,r21
  80b440:	080981c0 	call	80981c <_Bfree>
  80b444:	dc400515 	stw	r17,20(sp)
  80b448:	0400050e 	bge	zero,r16,80b460 <_strtod_r+0x99c>
  80b44c:	d9400517 	ldw	r5,20(sp)
  80b450:	800d883a 	mov	r6,r16
  80b454:	a809883a 	mov	r4,r21
  80b458:	080a1600 	call	80a160 <__lshift>
  80b45c:	d8800515 	stw	r2,20(sp)
  80b460:	a000741e 	bne	r20,zero,80b634 <_strtod_r+0xb70>
  80b464:	0480050e 	bge	zero,r18,80b47c <_strtod_r+0x9b8>
  80b468:	b80b883a 	mov	r5,r23
  80b46c:	900d883a 	mov	r6,r18
  80b470:	a809883a 	mov	r4,r21
  80b474:	080a1600 	call	80a160 <__lshift>
  80b478:	102f883a 	mov	r23,r2
  80b47c:	04c0050e 	bge	zero,r19,80b494 <_strtod_r+0x9d0>
  80b480:	b00b883a 	mov	r5,r22
  80b484:	980d883a 	mov	r6,r19
  80b488:	a809883a 	mov	r4,r21
  80b48c:	080a1600 	call	80a160 <__lshift>
  80b490:	102d883a 	mov	r22,r2
  80b494:	d9400517 	ldw	r5,20(sp)
  80b498:	a809883a 	mov	r4,r21
  80b49c:	b80d883a 	mov	r6,r23
  80b4a0:	0809fd40 	call	809fd4 <__mdiff>
  80b4a4:	11000317 	ldw	r4,12(r2)
  80b4a8:	b00b883a 	mov	r5,r22
  80b4ac:	10000315 	stw	zero,12(r2)
  80b4b0:	d9001315 	stw	r4,76(sp)
  80b4b4:	1009883a 	mov	r4,r2
  80b4b8:	1029883a 	mov	r20,r2
  80b4bc:	08099780 	call	809978 <__mcmp>
  80b4c0:	10017c16 	blt	r2,zero,80bab4 <_strtod_r+0xff0>
  80b4c4:	1001af26 	beq	r2,zero,80bb84 <_strtod_r+0x10c0>
  80b4c8:	a009883a 	mov	r4,r20
  80b4cc:	b00b883a 	mov	r5,r22
  80b4d0:	0809b780 	call	809b78 <__ratio>
  80b4d4:	0011883a 	mov	r8,zero
  80b4d8:	02500034 	movhi	r9,16384
  80b4dc:	480f883a 	mov	r7,r9
  80b4e0:	1009883a 	mov	r4,r2
  80b4e4:	180b883a 	mov	r5,r3
  80b4e8:	400d883a 	mov	r6,r8
  80b4ec:	1021883a 	mov	r16,r2
  80b4f0:	1823883a 	mov	r17,r3
  80b4f4:	080f6740 	call	80f674 <__ledf2>
  80b4f8:	00805716 	blt	zero,r2,80b658 <_strtod_r+0xb94>
  80b4fc:	d9801317 	ldw	r6,76(sp)
  80b500:	3025003a 	cmpeq	r18,r6,zero
  80b504:	90008b1e 	bne	r18,zero,80b734 <_strtod_r+0xc70>
  80b508:	008ffc34 	movhi	r2,16368
  80b50c:	0021883a 	mov	r16,zero
  80b510:	1023883a 	mov	r17,r2
  80b514:	d8000715 	stw	zero,28(sp)
  80b518:	d8800815 	stw	r2,32(sp)
  80b51c:	e1c00117 	ldw	r7,4(fp)
  80b520:	009ff834 	movhi	r2,32736
  80b524:	3cdffc2c 	andhi	r19,r7,32752
  80b528:	98805e26 	beq	r19,r2,80b6a4 <_strtod_r+0xbe0>
  80b52c:	d8801417 	ldw	r2,80(sp)
  80b530:	10001b26 	beq	r2,zero,80b5a0 <_strtod_r+0xadc>
  80b534:	0081a834 	movhi	r2,1696
  80b538:	14c01936 	bltu	r2,r19,80b5a0 <_strtod_r+0xadc>
  80b53c:	00bff034 	movhi	r2,65472
  80b540:	00d07834 	movhi	r3,16864
  80b544:	18ffffc4 	addi	r3,r3,-1
  80b548:	180f883a 	mov	r7,r3
  80b54c:	8009883a 	mov	r4,r16
  80b550:	880b883a 	mov	r5,r17
  80b554:	100d883a 	mov	r6,r2
  80b558:	080f6740 	call	80f674 <__ledf2>
  80b55c:	00800b16 	blt	zero,r2,80b58c <_strtod_r+0xac8>
  80b560:	880b883a 	mov	r5,r17
  80b564:	8009883a 	mov	r4,r16
  80b568:	080db140 	call	80db14 <__fixunsdfsi>
  80b56c:	1000df1e 	bne	r2,zero,80b8ec <_strtod_r+0xe28>
  80b570:	0021883a 	mov	r16,zero
  80b574:	044ffc34 	movhi	r17,16368
  80b578:	9000d91e 	bne	r18,zero,80b8e0 <_strtod_r+0xe1c>
  80b57c:	8005883a 	mov	r2,r16
  80b580:	8807883a 	mov	r3,r17
  80b584:	d8c00815 	stw	r3,32(sp)
  80b588:	d8800715 	stw	r2,28(sp)
  80b58c:	d8800817 	ldw	r2,32(sp)
  80b590:	00c1ac34 	movhi	r3,1712
  80b594:	14c5c83a 	sub	r2,r2,r19
  80b598:	10c5883a 	add	r2,r2,r3
  80b59c:	d8800815 	stw	r2,32(sp)
  80b5a0:	e0800017 	ldw	r2,0(fp)
  80b5a4:	e0c00117 	ldw	r3,4(fp)
  80b5a8:	1009883a 	mov	r4,r2
  80b5ac:	180b883a 	mov	r5,r3
  80b5b0:	08099d80 	call	8099d8 <__ulp>
  80b5b4:	d9800717 	ldw	r6,28(sp)
  80b5b8:	d9c00817 	ldw	r7,32(sp)
  80b5bc:	180b883a 	mov	r5,r3
  80b5c0:	1009883a 	mov	r4,r2
  80b5c4:	080edb00 	call	80edb0 <__muldf3>
  80b5c8:	e2000017 	ldw	r8,0(fp)
  80b5cc:	e2400117 	ldw	r9,4(fp)
  80b5d0:	180b883a 	mov	r5,r3
  80b5d4:	1009883a 	mov	r4,r2
  80b5d8:	480f883a 	mov	r7,r9
  80b5dc:	400d883a 	mov	r6,r8
  80b5e0:	080ed3c0 	call	80ed3c <__adddf3>
  80b5e4:	e0c00115 	stw	r3,4(fp)
  80b5e8:	e0800015 	stw	r2,0(fp)
  80b5ec:	d8c01417 	ldw	r3,80(sp)
  80b5f0:	e4800117 	ldw	r18,4(fp)
  80b5f4:	1800021e 	bne	r3,zero,80b600 <_strtod_r+0xb3c>
  80b5f8:	909ffc2c 	andhi	r2,r18,32752
  80b5fc:	98807b26 	beq	r19,r2,80b7ec <_strtod_r+0xd28>
  80b600:	d9400517 	ldw	r5,20(sp)
  80b604:	a809883a 	mov	r4,r21
  80b608:	080981c0 	call	80981c <_Bfree>
  80b60c:	a809883a 	mov	r4,r21
  80b610:	b80b883a 	mov	r5,r23
  80b614:	080981c0 	call	80981c <_Bfree>
  80b618:	a809883a 	mov	r4,r21
  80b61c:	b00b883a 	mov	r5,r22
  80b620:	080981c0 	call	80981c <_Bfree>
  80b624:	a809883a 	mov	r4,r21
  80b628:	a00b883a 	mov	r5,r20
  80b62c:	080981c0 	call	80981c <_Bfree>
  80b630:	003f3c06 	br	80b324 <_strtod_r+0x860>
  80b634:	b80b883a 	mov	r5,r23
  80b638:	a00d883a 	mov	r6,r20
  80b63c:	a809883a 	mov	r4,r21
  80b640:	080a5d00 	call	80a5d0 <__pow5mult>
  80b644:	102f883a 	mov	r23,r2
  80b648:	003f8606 	br	80b464 <_strtod_r+0x9a0>
  80b64c:	00800d84 	movi	r2,54
  80b650:	114dc83a 	sub	r6,r2,r5
  80b654:	003f5f06 	br	80b3d4 <_strtod_r+0x910>
  80b658:	0005883a 	mov	r2,zero
  80b65c:	00cff834 	movhi	r3,16352
  80b660:	880b883a 	mov	r5,r17
  80b664:	8009883a 	mov	r4,r16
  80b668:	100d883a 	mov	r6,r2
  80b66c:	180f883a 	mov	r7,r3
  80b670:	080edb00 	call	80edb0 <__muldf3>
  80b674:	d9801317 	ldw	r6,76(sp)
  80b678:	1021883a 	mov	r16,r2
  80b67c:	1823883a 	mov	r17,r3
  80b680:	3025003a 	cmpeq	r18,r6,zero
  80b684:	90000126 	beq	r18,zero,80b68c <_strtod_r+0xbc8>
  80b688:	18e0003c 	xorhi	r3,r3,32768
  80b68c:	d8800715 	stw	r2,28(sp)
  80b690:	d8c00815 	stw	r3,32(sp)
  80b694:	e1c00117 	ldw	r7,4(fp)
  80b698:	009ff834 	movhi	r2,32736
  80b69c:	3cdffc2c 	andhi	r19,r7,32752
  80b6a0:	98bfa21e 	bne	r19,r2,80b52c <_strtod_r+0xa68>
  80b6a4:	e1000017 	ldw	r4,0(fp)
  80b6a8:	01bf2c34 	movhi	r6,64688
  80b6ac:	398d883a 	add	r6,r7,r6
  80b6b0:	d9000b15 	stw	r4,44(sp)
  80b6b4:	d9c00c15 	stw	r7,48(sp)
  80b6b8:	300b883a 	mov	r5,r6
  80b6bc:	e1800115 	stw	r6,4(fp)
  80b6c0:	08099d80 	call	8099d8 <__ulp>
  80b6c4:	d9800717 	ldw	r6,28(sp)
  80b6c8:	d9c00817 	ldw	r7,32(sp)
  80b6cc:	180b883a 	mov	r5,r3
  80b6d0:	1009883a 	mov	r4,r2
  80b6d4:	080edb00 	call	80edb0 <__muldf3>
  80b6d8:	e2000017 	ldw	r8,0(fp)
  80b6dc:	e2400117 	ldw	r9,4(fp)
  80b6e0:	180b883a 	mov	r5,r3
  80b6e4:	1009883a 	mov	r4,r2
  80b6e8:	480f883a 	mov	r7,r9
  80b6ec:	400d883a 	mov	r6,r8
  80b6f0:	080ed3c0 	call	80ed3c <__adddf3>
  80b6f4:	1009883a 	mov	r4,r2
  80b6f8:	180b883a 	mov	r5,r3
  80b6fc:	009f2834 	movhi	r2,31904
  80b700:	10bfffc4 	addi	r2,r2,-1
  80b704:	18dffc2c 	andhi	r3,r3,32752
  80b708:	e1000015 	stw	r4,0(fp)
  80b70c:	e1400115 	stw	r5,4(fp)
  80b710:	10c06f2e 	bgeu	r2,r3,80b8d0 <_strtod_r+0xe0c>
  80b714:	d8800c17 	ldw	r2,48(sp)
  80b718:	011ffc34 	movhi	r4,32752
  80b71c:	213fffc4 	addi	r4,r4,-1
  80b720:	11007a26 	beq	r2,r4,80b90c <_strtod_r+0xe48>
  80b724:	01ffffc4 	movi	r7,-1
  80b728:	e1000115 	stw	r4,4(fp)
  80b72c:	e1c00015 	stw	r7,0(fp)
  80b730:	003fb306 	br	80b600 <_strtod_r+0xb3c>
  80b734:	e0c00017 	ldw	r3,0(fp)
  80b738:	1800221e 	bne	r3,zero,80b7c4 <_strtod_r+0xd00>
  80b73c:	e0800117 	ldw	r2,4(fp)
  80b740:	00c00434 	movhi	r3,16
  80b744:	18ffffc4 	addi	r3,r3,-1
  80b748:	10c4703a 	and	r2,r2,r3
  80b74c:	1000211e 	bne	r2,zero,80b7d4 <_strtod_r+0xd10>
  80b750:	0005883a 	mov	r2,zero
  80b754:	00cffc34 	movhi	r3,16368
  80b758:	180f883a 	mov	r7,r3
  80b75c:	8009883a 	mov	r4,r16
  80b760:	880b883a 	mov	r5,r17
  80b764:	100d883a 	mov	r6,r2
  80b768:	080f5ec0 	call	80f5ec <__ltdf2>
  80b76c:	10013c16 	blt	r2,zero,80bc60 <_strtod_r+0x119c>
  80b770:	0005883a 	mov	r2,zero
  80b774:	00cff834 	movhi	r3,16352
  80b778:	880b883a 	mov	r5,r17
  80b77c:	8009883a 	mov	r4,r16
  80b780:	180f883a 	mov	r7,r3
  80b784:	100d883a 	mov	r6,r2
  80b788:	080edb00 	call	80edb0 <__muldf3>
  80b78c:	1823883a 	mov	r17,r3
  80b790:	1021883a 	mov	r16,r2
  80b794:	18e0003c 	xorhi	r3,r3,32768
  80b798:	003fbc06 	br	80b68c <_strtod_r+0xbc8>
  80b79c:	3827883a 	mov	r19,r7
  80b7a0:	003f1a06 	br	80b40c <_strtod_r+0x948>
  80b7a4:	4091c83a 	sub	r8,r8,r2
  80b7a8:	003f0206 	br	80b3b4 <_strtod_r+0x8f0>
  80b7ac:	d8c00f17 	ldw	r3,60(sp)
  80b7b0:	0011883a 	mov	r8,zero
  80b7b4:	0029883a 	mov	r20,zero
  80b7b8:	00d3c83a 	sub	r9,zero,r3
  80b7bc:	480f883a 	mov	r7,r9
  80b7c0:	003ef906 	br	80b3a8 <_strtod_r+0x8e4>
  80b7c4:	00800044 	movi	r2,1
  80b7c8:	1880021e 	bne	r3,r2,80b7d4 <_strtod_r+0xd10>
  80b7cc:	e0800117 	ldw	r2,4(fp)
  80b7d0:	1000a526 	beq	r2,zero,80ba68 <_strtod_r+0xfa4>
  80b7d4:	00affc34 	movhi	r2,49136
  80b7d8:	0021883a 	mov	r16,zero
  80b7dc:	044ffc34 	movhi	r17,16368
  80b7e0:	d8800815 	stw	r2,32(sp)
  80b7e4:	d8000715 	stw	zero,28(sp)
  80b7e8:	003f4c06 	br	80b51c <_strtod_r+0xa58>
  80b7ec:	880b883a 	mov	r5,r17
  80b7f0:	8009883a 	mov	r4,r16
  80b7f4:	080f7f40 	call	80f7f4 <__fixdfsi>
  80b7f8:	1009883a 	mov	r4,r2
  80b7fc:	080f6fc0 	call	80f6fc <__floatsidf>
  80b800:	880b883a 	mov	r5,r17
  80b804:	8009883a 	mov	r4,r16
  80b808:	100d883a 	mov	r6,r2
  80b80c:	180f883a 	mov	r7,r3
  80b810:	080ecbc0 	call	80ecbc <__subdf3>
  80b814:	d9001317 	ldw	r4,76(sp)
  80b818:	100b883a 	mov	r5,r2
  80b81c:	180d883a 	mov	r6,r3
  80b820:	1021883a 	mov	r16,r2
  80b824:	1823883a 	mov	r17,r3
  80b828:	2000061e 	bne	r4,zero,80b844 <_strtod_r+0xd80>
  80b82c:	e0800017 	ldw	r2,0(fp)
  80b830:	1000041e 	bne	r2,zero,80b844 <_strtod_r+0xd80>
  80b834:	00c00434 	movhi	r3,16
  80b838:	18ffffc4 	addi	r3,r3,-1
  80b83c:	90c4703a 	and	r2,r18,r3
  80b840:	10004026 	beq	r2,zero,80b944 <_strtod_r+0xe80>
  80b844:	00a52834 	movhi	r2,38048
  80b848:	108d6544 	addi	r2,r2,13717
  80b84c:	00cff834 	movhi	r3,16352
  80b850:	18ffffc4 	addi	r3,r3,-1
  80b854:	180f883a 	mov	r7,r3
  80b858:	8009883a 	mov	r4,r16
  80b85c:	880b883a 	mov	r5,r17
  80b860:	100d883a 	mov	r6,r2
  80b864:	080f5ec0 	call	80f5ec <__ltdf2>
  80b868:	10000916 	blt	r2,zero,80b890 <_strtod_r+0xdcc>
  80b86c:	008d6c34 	movhi	r2,13744
  80b870:	10b94d44 	addi	r2,r2,-6859
  80b874:	00cff834 	movhi	r3,16352
  80b878:	880b883a 	mov	r5,r17
  80b87c:	180f883a 	mov	r7,r3
  80b880:	8009883a 	mov	r4,r16
  80b884:	100d883a 	mov	r6,r2
  80b888:	080f4dc0 	call	80f4dc <__gtdf2>
  80b88c:	00bf5c0e 	bge	zero,r2,80b600 <_strtod_r+0xb3c>
  80b890:	d9400517 	ldw	r5,20(sp)
  80b894:	a809883a 	mov	r4,r21
  80b898:	080981c0 	call	80981c <_Bfree>
  80b89c:	a809883a 	mov	r4,r21
  80b8a0:	b80b883a 	mov	r5,r23
  80b8a4:	080981c0 	call	80981c <_Bfree>
  80b8a8:	a809883a 	mov	r4,r21
  80b8ac:	b00b883a 	mov	r5,r22
  80b8b0:	080981c0 	call	80981c <_Bfree>
  80b8b4:	d9401017 	ldw	r5,64(sp)
  80b8b8:	a809883a 	mov	r4,r21
  80b8bc:	080981c0 	call	80981c <_Bfree>
  80b8c0:	a809883a 	mov	r4,r21
  80b8c4:	a00b883a 	mov	r5,r20
  80b8c8:	080981c0 	call	80981c <_Bfree>
  80b8cc:	003cf406 	br	80aca0 <_strtod_r+0x1dc>
  80b8d0:	0080d434 	movhi	r2,848
  80b8d4:	288d883a 	add	r6,r5,r2
  80b8d8:	e1800115 	stw	r6,4(fp)
  80b8dc:	003f4306 	br	80b5ec <_strtod_r+0xb28>
  80b8e0:	8005883a 	mov	r2,r16
  80b8e4:	88e0003c 	xorhi	r3,r17,32768
  80b8e8:	003f2606 	br	80b584 <_strtod_r+0xac0>
  80b8ec:	1009883a 	mov	r4,r2
  80b8f0:	080f9400 	call	80f940 <__floatunsidf>
  80b8f4:	1021883a 	mov	r16,r2
  80b8f8:	1823883a 	mov	r17,r3
  80b8fc:	003f1e06 	br	80b578 <_strtod_r+0xab4>
  80b900:	da000417 	ldw	r8,16(sp)
  80b904:	39c00044 	addi	r7,r7,1
  80b908:	003e6706 	br	80b2a8 <_strtod_r+0x7e4>
  80b90c:	d8c00b17 	ldw	r3,44(sp)
  80b910:	00bfffc4 	movi	r2,-1
  80b914:	18bf831e 	bne	r3,r2,80b724 <_strtod_r+0xc60>
  80b918:	00c00884 	movi	r3,34
  80b91c:	a8c00015 	stw	r3,0(r21)
  80b920:	009ffc34 	movhi	r2,32752
  80b924:	e0800115 	stw	r2,4(fp)
  80b928:	e0000015 	stw	zero,0(fp)
  80b92c:	003fd806 	br	80b890 <_strtod_r+0xdcc>
  80b930:	4007883a 	mov	r3,r8
  80b934:	000d883a 	mov	r6,zero
  80b938:	0029883a 	mov	r20,zero
  80b93c:	0021883a 	mov	r16,zero
  80b940:	003cc906 	br	80ac68 <_strtod_r+0x1a4>
  80b944:	00a52834 	movhi	r2,38048
  80b948:	108d6544 	addi	r2,r2,13717
  80b94c:	00cff434 	movhi	r3,16336
  80b950:	18ffffc4 	addi	r3,r3,-1
  80b954:	2809883a 	mov	r4,r5
  80b958:	180f883a 	mov	r7,r3
  80b95c:	300b883a 	mov	r5,r6
  80b960:	100d883a 	mov	r6,r2
  80b964:	080f5ec0 	call	80f5ec <__ltdf2>
  80b968:	103f250e 	bge	r2,zero,80b600 <_strtod_r+0xb3c>
  80b96c:	003fc806 	br	80b890 <_strtod_r+0xdcc>
  80b970:	0027883a 	mov	r19,zero
  80b974:	04800044 	movi	r18,1
  80b978:	0015883a 	mov	r10,zero
  80b97c:	003cc006 	br	80ac80 <_strtod_r+0x1bc>
  80b980:	00800884 	movi	r2,34
  80b984:	a8800015 	stw	r2,0(r21)
  80b988:	019ffc34 	movhi	r6,32752
  80b98c:	e1800115 	stw	r6,4(fp)
  80b990:	e0000015 	stw	zero,0(fp)
  80b994:	003cc206 	br	80aca0 <_strtod_r+0x1dc>
  80b998:	015387c4 	movi	r5,19999
  80b99c:	003d1e06 	br	80ae18 <_strtod_r+0x354>
  80b9a0:	300a90fa 	slli	r5,r6,3
  80b9a4:	e0800017 	ldw	r2,0(fp)
  80b9a8:	e0c00117 	ldw	r3,4(fp)
  80b9ac:	01002074 	movhi	r4,129
  80b9b0:	21140e04 	addi	r4,r4,20536
  80b9b4:	290b883a 	add	r5,r5,r4
  80b9b8:	2a000017 	ldw	r8,0(r5)
  80b9bc:	2a400117 	ldw	r9,4(r5)
  80b9c0:	1009883a 	mov	r4,r2
  80b9c4:	180b883a 	mov	r5,r3
  80b9c8:	480f883a 	mov	r7,r9
  80b9cc:	400d883a 	mov	r6,r8
  80b9d0:	080edb00 	call	80edb0 <__muldf3>
  80b9d4:	e0c00115 	stw	r3,4(fp)
  80b9d8:	e0800015 	stw	r2,0(fp)
  80b9dc:	003cb006 	br	80aca0 <_strtod_r+0x1dc>
  80b9e0:	d8800d17 	ldw	r2,52(sp)
  80b9e4:	e0800015 	stw	r2,0(fp)
  80b9e8:	d8c00e17 	ldw	r3,56(sp)
  80b9ec:	e0c00115 	stw	r3,4(fp)
  80b9f0:	9880020c 	andi	r2,r19,8
  80b9f4:	103caa26 	beq	r2,zero,80aca0 <_strtod_r+0x1dc>
  80b9f8:	e0800117 	ldw	r2,4(fp)
  80b9fc:	10a00034 	orhi	r2,r2,32768
  80ba00:	e0800115 	stw	r2,4(fp)
  80ba04:	003ca606 	br	80aca0 <_strtod_r+0x1dc>
  80ba08:	009ffc34 	movhi	r2,32752
  80ba0c:	e0800115 	stw	r2,4(fp)
  80ba10:	e0000015 	stw	zero,0(fp)
  80ba14:	003ff606 	br	80b9f0 <_strtod_r+0xf2c>
  80ba18:	00a00034 	movhi	r2,32768
  80ba1c:	10bfffc4 	addi	r2,r2,-1
  80ba20:	00ffffc4 	movi	r3,-1
  80ba24:	e0800115 	stw	r2,4(fp)
  80ba28:	e0c00015 	stw	r3,0(fp)
  80ba2c:	003ff006 	br	80b9f0 <_strtod_r+0xf2c>
  80ba30:	e0000115 	stw	zero,4(fp)
  80ba34:	e0000015 	stw	zero,0(fp)
  80ba38:	003fed06 	br	80b9f0 <_strtod_r+0xf2c>
  80ba3c:	d8800e17 	ldw	r2,56(sp)
  80ba40:	29010cc4 	addi	r4,r5,1075
  80ba44:	00fffc34 	movhi	r3,65520
  80ba48:	18ffffc4 	addi	r3,r3,-1
  80ba4c:	2008953a 	slli	r4,r4,20
  80ba50:	10c4703a 	and	r2,r2,r3
  80ba54:	d8c00d17 	ldw	r3,52(sp)
  80ba58:	1104b03a 	or	r2,r2,r4
  80ba5c:	e0800115 	stw	r2,4(fp)
  80ba60:	e0c00015 	stw	r3,0(fp)
  80ba64:	003fe206 	br	80b9f0 <_strtod_r+0xf2c>
  80ba68:	00800884 	movi	r2,34
  80ba6c:	a8800015 	stw	r2,0(r21)
  80ba70:	e0000015 	stw	zero,0(fp)
  80ba74:	e0000115 	stw	zero,4(fp)
  80ba78:	003f8506 	br	80b890 <_strtod_r+0xdcc>
  80ba7c:	03800044 	movi	r14,1
  80ba80:	003d7706 	br	80b060 <_strtod_r+0x59c>
  80ba84:	99c5883a 	add	r2,r19,r7
  80ba88:	11ffffc4 	addi	r7,r2,-1
  80ba8c:	00800204 	movi	r2,8
  80ba90:	3cc00044 	addi	r19,r7,1
  80ba94:	11c0df16 	blt	r2,r7,80be14 <_strtod_r+0x1350>
  80ba98:	a08002a4 	muli	r2,r20,10
  80ba9c:	000f883a 	mov	r7,zero
  80baa0:	1269883a 	add	r20,r2,r9
  80baa4:	42000044 	addi	r8,r8,1
  80baa8:	da000415 	stw	r8,16(sp)
  80baac:	41000007 	ldb	r4,0(r8)
  80bab0:	003d3706 	br	80af90 <_strtod_r+0x4cc>
  80bab4:	d9801317 	ldw	r6,76(sp)
  80bab8:	3000511e 	bne	r6,zero,80bc00 <_strtod_r+0x113c>
  80babc:	e0800017 	ldw	r2,0(fp)
  80bac0:	1000d81e 	bne	r2,zero,80be24 <_strtod_r+0x1360>
  80bac4:	e0c00117 	ldw	r3,4(fp)
  80bac8:	01000434 	movhi	r4,16
  80bacc:	213fffc4 	addi	r4,r4,-1
  80bad0:	1904703a 	and	r2,r3,r4
  80bad4:	1000b01e 	bne	r2,zero,80bd98 <_strtod_r+0x12d4>
  80bad8:	18dffc2c 	andhi	r3,r3,32752
  80badc:	0081ac34 	movhi	r2,1712
  80bae0:	10c1102e 	bgeu	r2,r3,80bf24 <_strtod_r+0x1460>
  80bae4:	a0800517 	ldw	r2,20(r20)
  80bae8:	1000031e 	bne	r2,zero,80baf8 <_strtod_r+0x1034>
  80baec:	a0c00417 	ldw	r3,16(r20)
  80baf0:	00800044 	movi	r2,1
  80baf4:	10c0420e 	bge	r2,r3,80bc00 <_strtod_r+0x113c>
  80baf8:	a00b883a 	mov	r5,r20
  80bafc:	a809883a 	mov	r4,r21
  80bb00:	01800044 	movi	r6,1
  80bb04:	080a1600 	call	80a160 <__lshift>
  80bb08:	1009883a 	mov	r4,r2
  80bb0c:	b00b883a 	mov	r5,r22
  80bb10:	1029883a 	mov	r20,r2
  80bb14:	08099780 	call	809978 <__mcmp>
  80bb18:	0080c20e 	bge	zero,r2,80be24 <_strtod_r+0x1360>
  80bb1c:	e1800117 	ldw	r6,4(fp)
  80bb20:	d9001417 	ldw	r4,80(sp)
  80bb24:	2013003a 	cmpeq	r9,r4,zero
  80bb28:	4800ef1e 	bne	r9,zero,80bee8 <_strtod_r+0x1424>
  80bb2c:	30dffc2c 	andhi	r3,r6,32752
  80bb30:	0081ac34 	movhi	r2,1712
  80bb34:	10c0ec36 	bltu	r2,r3,80bee8 <_strtod_r+0x1424>
  80bb38:	0080dc34 	movhi	r2,880
  80bb3c:	10ffca2e 	bgeu	r2,r3,80ba68 <_strtod_r+0xfa4>
  80bb40:	e0800017 	ldw	r2,0(fp)
  80bb44:	e0c00117 	ldw	r3,4(fp)
  80bb48:	020e5434 	movhi	r8,14672
  80bb4c:	000d883a 	mov	r6,zero
  80bb50:	400f883a 	mov	r7,r8
  80bb54:	180b883a 	mov	r5,r3
  80bb58:	1009883a 	mov	r4,r2
  80bb5c:	da000c15 	stw	r8,48(sp)
  80bb60:	d8000b15 	stw	zero,44(sp)
  80bb64:	080edb00 	call	80edb0 <__muldf3>
  80bb68:	e0800015 	stw	r2,0(fp)
  80bb6c:	e0c00115 	stw	r3,4(fp)
  80bb70:	183f471e 	bne	r3,zero,80b890 <_strtod_r+0xdcc>
  80bb74:	103f461e 	bne	r2,zero,80b890 <_strtod_r+0xdcc>
  80bb78:	00800884 	movi	r2,34
  80bb7c:	a8800015 	stw	r2,0(r21)
  80bb80:	003f4306 	br	80b890 <_strtod_r+0xdcc>
  80bb84:	d8801317 	ldw	r2,76(sp)
  80bb88:	1025003a 	cmpeq	r18,r2,zero
  80bb8c:	9000861e 	bne	r18,zero,80bda8 <_strtod_r+0x12e4>
  80bb90:	e1400117 	ldw	r5,4(fp)
  80bb94:	00c00434 	movhi	r3,16
  80bb98:	18ffffc4 	addi	r3,r3,-1
  80bb9c:	28c4703a 	and	r2,r5,r3
  80bba0:	10c01b26 	beq	r2,r3,80bc10 <_strtod_r+0x114c>
  80bba4:	e1c00017 	ldw	r7,0(fp)
  80bba8:	3880004c 	andi	r2,r7,1
  80bbac:	1005003a 	cmpeq	r2,r2,zero
  80bbb0:	1000791e 	bne	r2,zero,80bd98 <_strtod_r+0x12d4>
  80bbb4:	9000b126 	beq	r18,zero,80be7c <_strtod_r+0x13b8>
  80bbb8:	e4400117 	ldw	r17,4(fp)
  80bbbc:	3809883a 	mov	r4,r7
  80bbc0:	3821883a 	mov	r16,r7
  80bbc4:	880b883a 	mov	r5,r17
  80bbc8:	08099d80 	call	8099d8 <__ulp>
  80bbcc:	180f883a 	mov	r7,r3
  80bbd0:	880b883a 	mov	r5,r17
  80bbd4:	8009883a 	mov	r4,r16
  80bbd8:	100d883a 	mov	r6,r2
  80bbdc:	080ecbc0 	call	80ecbc <__subdf3>
  80bbe0:	1009883a 	mov	r4,r2
  80bbe4:	000d883a 	mov	r6,zero
  80bbe8:	000f883a 	mov	r7,zero
  80bbec:	180b883a 	mov	r5,r3
  80bbf0:	e0800015 	stw	r2,0(fp)
  80bbf4:	e0c00115 	stw	r3,4(fp)
  80bbf8:	080f4540 	call	80f454 <__nedf2>
  80bbfc:	103f9a26 	beq	r2,zero,80ba68 <_strtod_r+0xfa4>
  80bc00:	d9001417 	ldw	r4,80(sp)
  80bc04:	2013003a 	cmpeq	r9,r4,zero
  80bc08:	483f211e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80bc0c:	003fcc06 	br	80bb40 <_strtod_r+0x107c>
  80bc10:	d9001417 	ldw	r4,80(sp)
  80bc14:	e1c00017 	ldw	r7,0(fp)
  80bc18:	2013003a 	cmpeq	r9,r4,zero
  80bc1c:	4800bd1e 	bne	r9,zero,80bf14 <_strtod_r+0x1450>
  80bc20:	28dffc2c 	andhi	r3,r5,32752
  80bc24:	0081a834 	movhi	r2,1696
  80bc28:	10c0ba36 	bltu	r2,r3,80bf14 <_strtod_r+0x1450>
  80bc2c:	1804d53a 	srli	r2,r3,20
  80bc30:	00c01ac4 	movi	r3,107
  80bc34:	013fffc4 	movi	r4,-1
  80bc38:	1887c83a 	sub	r3,r3,r2
  80bc3c:	20c4983a 	sll	r2,r4,r3
  80bc40:	11ffd91e 	bne	r2,r7,80bba8 <_strtod_r+0x10e4>
  80bc44:	28dffc2c 	andhi	r3,r5,32752
  80bc48:	00800434 	movhi	r2,16
  80bc4c:	188d883a 	add	r6,r3,r2
  80bc50:	e1800115 	stw	r6,4(fp)
  80bc54:	e0000015 	stw	zero,0(fp)
  80bc58:	483f0d1e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80bc5c:	003fb806 	br	80bb40 <_strtod_r+0x107c>
  80bc60:	0021883a 	mov	r16,zero
  80bc64:	0005883a 	mov	r2,zero
  80bc68:	044ff834 	movhi	r17,16352
  80bc6c:	00eff834 	movhi	r3,49120
  80bc70:	003e8606 	br	80b68c <_strtod_r+0xbc8>
  80bc74:	803d9e26 	beq	r16,zero,80b2f0 <_strtod_r+0x82c>
  80bc78:	0421c83a 	sub	r16,zero,r16
  80bc7c:	814003cc 	andi	r5,r16,15
  80bc80:	28000f26 	beq	r5,zero,80bcc0 <_strtod_r+0x11fc>
  80bc84:	280a90fa 	slli	r5,r5,3
  80bc88:	01002074 	movhi	r4,129
  80bc8c:	21140e04 	addi	r4,r4,20536
  80bc90:	e0800017 	ldw	r2,0(fp)
  80bc94:	290b883a 	add	r5,r5,r4
  80bc98:	2a000017 	ldw	r8,0(r5)
  80bc9c:	e0c00117 	ldw	r3,4(fp)
  80bca0:	2a400117 	ldw	r9,4(r5)
  80bca4:	1009883a 	mov	r4,r2
  80bca8:	180b883a 	mov	r5,r3
  80bcac:	480f883a 	mov	r7,r9
  80bcb0:	400d883a 	mov	r6,r8
  80bcb4:	080f1740 	call	80f174 <__divdf3>
  80bcb8:	e0c00115 	stw	r3,4(fp)
  80bcbc:	e0800015 	stw	r2,0(fp)
  80bcc0:	8021d13a 	srai	r16,r16,4
  80bcc4:	803d8a26 	beq	r16,zero,80b2f0 <_strtod_r+0x82c>
  80bcc8:	008007c4 	movi	r2,31
  80bccc:	14002d16 	blt	r2,r16,80bd84 <_strtod_r+0x12c0>
  80bcd0:	8080040c 	andi	r2,r16,16
  80bcd4:	10009926 	beq	r2,zero,80bf3c <_strtod_r+0x1478>
  80bcd8:	00801a84 	movi	r2,106
  80bcdc:	d8801415 	stw	r2,80(sp)
  80bce0:	0400110e 	bge	zero,r16,80bd28 <_strtod_r+0x1264>
  80bce4:	04402074 	movhi	r17,129
  80bce8:	8c545b04 	addi	r17,r17,20844
  80bcec:	8080004c 	andi	r2,r16,1
  80bcf0:	1005003a 	cmpeq	r2,r2,zero
  80bcf4:	1000091e 	bne	r2,zero,80bd1c <_strtod_r+0x1258>
  80bcf8:	e0800017 	ldw	r2,0(fp)
  80bcfc:	e0c00117 	ldw	r3,4(fp)
  80bd00:	89800017 	ldw	r6,0(r17)
  80bd04:	89c00117 	ldw	r7,4(r17)
  80bd08:	180b883a 	mov	r5,r3
  80bd0c:	1009883a 	mov	r4,r2
  80bd10:	080edb00 	call	80edb0 <__muldf3>
  80bd14:	e0c00115 	stw	r3,4(fp)
  80bd18:	e0800015 	stw	r2,0(fp)
  80bd1c:	8021d07a 	srai	r16,r16,1
  80bd20:	8c400204 	addi	r17,r17,8
  80bd24:	043ff116 	blt	zero,r16,80bcec <_strtod_r+0x1228>
  80bd28:	d8c01417 	ldw	r3,80(sp)
  80bd2c:	18000d26 	beq	r3,zero,80bd64 <_strtod_r+0x12a0>
  80bd30:	e1000117 	ldw	r4,4(fp)
  80bd34:	00c01ac4 	movi	r3,107
  80bd38:	209ffc2c 	andhi	r2,r4,32752
  80bd3c:	1004d53a 	srli	r2,r2,20
  80bd40:	1887c83a 	sub	r3,r3,r2
  80bd44:	00c0070e 	bge	zero,r3,80bd64 <_strtod_r+0x12a0>
  80bd48:	008007c4 	movi	r2,31
  80bd4c:	10c0900e 	bge	r2,r3,80bf90 <_strtod_r+0x14cc>
  80bd50:	00800d04 	movi	r2,52
  80bd54:	e0000015 	stw	zero,0(fp)
  80bd58:	10c0870e 	bge	r2,r3,80bf78 <_strtod_r+0x14b4>
  80bd5c:	0180dc34 	movhi	r6,880
  80bd60:	e1800115 	stw	r6,4(fp)
  80bd64:	e0800017 	ldw	r2,0(fp)
  80bd68:	e0c00117 	ldw	r3,4(fp)
  80bd6c:	000d883a 	mov	r6,zero
  80bd70:	000f883a 	mov	r7,zero
  80bd74:	180b883a 	mov	r5,r3
  80bd78:	1009883a 	mov	r4,r2
  80bd7c:	080f4540 	call	80f454 <__nedf2>
  80bd80:	103d5c1e 	bne	r2,zero,80b2f4 <_strtod_r+0x830>
  80bd84:	00800884 	movi	r2,34
  80bd88:	a8800015 	stw	r2,0(r21)
  80bd8c:	e0000015 	stw	zero,0(fp)
  80bd90:	e0000115 	stw	zero,4(fp)
  80bd94:	003bc206 	br	80aca0 <_strtod_r+0x1dc>
  80bd98:	d8801417 	ldw	r2,80(sp)
  80bd9c:	1013003a 	cmpeq	r9,r2,zero
  80bda0:	483ebb1e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80bda4:	003f6606 	br	80bb40 <_strtod_r+0x107c>
  80bda8:	e1800117 	ldw	r6,4(fp)
  80bdac:	00c00434 	movhi	r3,16
  80bdb0:	18ffffc4 	addi	r3,r3,-1
  80bdb4:	30c4703a 	and	r2,r6,r3
  80bdb8:	103f7a1e 	bne	r2,zero,80bba4 <_strtod_r+0x10e0>
  80bdbc:	e1c00017 	ldw	r7,0(fp)
  80bdc0:	383f791e 	bne	r7,zero,80bba8 <_strtod_r+0x10e4>
  80bdc4:	003f5606 	br	80bb20 <_strtod_r+0x105c>
  80bdc8:	d9800f17 	ldw	r6,60(sp)
  80bdcc:	00bffa84 	movi	r2,-22
  80bdd0:	30bcd416 	blt	r6,r2,80b124 <_strtod_r+0x660>
  80bdd4:	317ffe24 	muli	r5,r6,-8
  80bdd8:	01002074 	movhi	r4,129
  80bddc:	21140e04 	addi	r4,r4,20536
  80bde0:	e0800017 	ldw	r2,0(fp)
  80bde4:	290b883a 	add	r5,r5,r4
  80bde8:	2a000017 	ldw	r8,0(r5)
  80bdec:	e0c00117 	ldw	r3,4(fp)
  80bdf0:	2a400117 	ldw	r9,4(r5)
  80bdf4:	1009883a 	mov	r4,r2
  80bdf8:	180b883a 	mov	r5,r3
  80bdfc:	480f883a 	mov	r7,r9
  80be00:	400d883a 	mov	r6,r8
  80be04:	080f1740 	call	80f174 <__divdf3>
  80be08:	e0c00115 	stw	r3,4(fp)
  80be0c:	e0800015 	stw	r2,0(fp)
  80be10:	003ba306 	br	80aca0 <_strtod_r+0x1dc>
  80be14:	00800404 	movi	r2,16
  80be18:	14c02f0e 	bge	r2,r19,80bed8 <_strtod_r+0x1414>
  80be1c:	000f883a 	mov	r7,zero
  80be20:	003f2006 	br	80baa4 <_strtod_r+0xfe0>
  80be24:	d9801417 	ldw	r6,80(sp)
  80be28:	3013003a 	cmpeq	r9,r6,zero
  80be2c:	483e981e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80be30:	003f4306 	br	80bb40 <_strtod_r+0x107c>
  80be34:	00801a44 	movi	r2,105
  80be38:	20bc6326 	beq	r4,r2,80afc8 <_strtod_r+0x504>
  80be3c:	00801b84 	movi	r2,110
  80be40:	20bbba1e 	bne	r4,r2,80ad2c <_strtod_r+0x268>
  80be44:	dc000404 	addi	r16,sp,16
  80be48:	8009883a 	mov	r4,r16
  80be4c:	01402074 	movhi	r5,129
  80be50:	29545a04 	addi	r5,r5,20840
  80be54:	080aa7c0 	call	80aa7c <match>
  80be58:	103bb426 	beq	r2,zero,80ad2c <_strtod_r+0x268>
  80be5c:	d8800417 	ldw	r2,16(sp)
  80be60:	00c00a04 	movi	r3,40
  80be64:	11000007 	ldb	r4,0(r2)
  80be68:	20c03626 	beq	r4,r3,80bf44 <_strtod_r+0x1480>
  80be6c:	01bffe34 	movhi	r6,65528
  80be70:	e1800115 	stw	r6,4(fp)
  80be74:	e0000015 	stw	zero,0(fp)
  80be78:	003b8906 	br	80aca0 <_strtod_r+0x1dc>
  80be7c:	e4400117 	ldw	r17,4(fp)
  80be80:	3809883a 	mov	r4,r7
  80be84:	3821883a 	mov	r16,r7
  80be88:	880b883a 	mov	r5,r17
  80be8c:	08099d80 	call	8099d8 <__ulp>
  80be90:	100d883a 	mov	r6,r2
  80be94:	880b883a 	mov	r5,r17
  80be98:	180f883a 	mov	r7,r3
  80be9c:	8009883a 	mov	r4,r16
  80bea0:	080ed3c0 	call	80ed3c <__adddf3>
  80bea4:	d9801417 	ldw	r6,80(sp)
  80bea8:	e0c00115 	stw	r3,4(fp)
  80beac:	e0800015 	stw	r2,0(fp)
  80beb0:	3013003a 	cmpeq	r9,r6,zero
  80beb4:	483e761e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80beb8:	003f2106 	br	80bb40 <_strtod_r+0x107c>
  80bebc:	000f883a 	mov	r7,zero
  80bec0:	003cf006 	br	80b284 <_strtod_r+0x7c0>
  80bec4:	0080d434 	movhi	r2,848
  80bec8:	188d883a 	add	r6,r3,r2
  80becc:	d8001415 	stw	zero,80(sp)
  80bed0:	e1800115 	stw	r6,4(fp)
  80bed4:	003d0706 	br	80b2f4 <_strtod_r+0x830>
  80bed8:	808002a4 	muli	r2,r16,10
  80bedc:	000f883a 	mov	r7,zero
  80bee0:	1261883a 	add	r16,r2,r9
  80bee4:	003eef06 	br	80baa4 <_strtod_r+0xfe0>
  80bee8:	309ffc2c 	andhi	r2,r6,32752
  80beec:	00fffc34 	movhi	r3,65520
  80bef0:	10c5883a 	add	r2,r2,r3
  80bef4:	00c00434 	movhi	r3,16
  80bef8:	18ffffc4 	addi	r3,r3,-1
  80befc:	10ccb03a 	or	r6,r2,r3
  80bf00:	01ffffc4 	movi	r7,-1
  80bf04:	e1800115 	stw	r6,4(fp)
  80bf08:	e1c00015 	stw	r7,0(fp)
  80bf0c:	483e601e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80bf10:	003f0b06 	br	80bb40 <_strtod_r+0x107c>
  80bf14:	00bfffc4 	movi	r2,-1
  80bf18:	003f4906 	br	80bc40 <_strtod_r+0x117c>
  80bf1c:	0025883a 	mov	r18,zero
  80bf20:	003cb106 	br	80b1e8 <_strtod_r+0x724>
  80bf24:	d8c01417 	ldw	r3,80(sp)
  80bf28:	1813003a 	cmpeq	r9,r3,zero
  80bf2c:	483e581e 	bne	r9,zero,80b890 <_strtod_r+0xdcc>
  80bf30:	003f0306 	br	80bb40 <_strtod_r+0x107c>
  80bf34:	980f883a 	mov	r7,r19
  80bf38:	003ed406 	br	80ba8c <_strtod_r+0xfc8>
  80bf3c:	d8001415 	stw	zero,80(sp)
  80bf40:	003f6706 	br	80bce0 <_strtod_r+0x121c>
  80bf44:	8009883a 	mov	r4,r16
  80bf48:	01402074 	movhi	r5,129
  80bf4c:	2956de04 	addi	r5,r5,23416
  80bf50:	d9800d04 	addi	r6,sp,52
  80bf54:	080d8340 	call	80d834 <__hexnan>
  80bf58:	00c00144 	movi	r3,5
  80bf5c:	10ffc31e 	bne	r2,r3,80be6c <_strtod_r+0x13a8>
  80bf60:	d8800e17 	ldw	r2,56(sp)
  80bf64:	d9c00d17 	ldw	r7,52(sp)
  80bf68:	119ffc34 	orhi	r6,r2,32752
  80bf6c:	e1800115 	stw	r6,4(fp)
  80bf70:	e1c00015 	stw	r7,0(fp)
  80bf74:	003b4a06 	br	80aca0 <_strtod_r+0x1dc>
  80bf78:	18fff804 	addi	r3,r3,-32
  80bf7c:	00bfffc4 	movi	r2,-1
  80bf80:	10c4983a 	sll	r2,r2,r3
  80bf84:	208c703a 	and	r6,r4,r2
  80bf88:	e1800115 	stw	r6,4(fp)
  80bf8c:	003f7506 	br	80bd64 <_strtod_r+0x12a0>
  80bf90:	00bfffc4 	movi	r2,-1
  80bf94:	10c4983a 	sll	r2,r2,r3
  80bf98:	e0c00017 	ldw	r3,0(fp)
  80bf9c:	188e703a 	and	r7,r3,r2
  80bfa0:	e1c00015 	stw	r7,0(fp)
  80bfa4:	003f6f06 	br	80bd64 <_strtod_r+0x12a0>

0080bfa8 <strtof>:
  80bfa8:	defffa04 	addi	sp,sp,-24
  80bfac:	dd000415 	stw	r20,16(sp)
  80bfb0:	05002074 	movhi	r20,129
  80bfb4:	a51be504 	addi	r20,r20,28564
  80bfb8:	2007883a 	mov	r3,r4
  80bfbc:	a1000017 	ldw	r4,0(r20)
  80bfc0:	280d883a 	mov	r6,r5
  80bfc4:	180b883a 	mov	r5,r3
  80bfc8:	dfc00515 	stw	ra,20(sp)
  80bfcc:	dcc00315 	stw	r19,12(sp)
  80bfd0:	dc800215 	stw	r18,8(sp)
  80bfd4:	dc400115 	stw	r17,4(sp)
  80bfd8:	dc000015 	stw	r16,0(sp)
  80bfdc:	080aac40 	call	80aac4 <_strtod_r>
  80bfe0:	180b883a 	mov	r5,r3
  80bfe4:	1009883a 	mov	r4,r2
  80bfe8:	1823883a 	mov	r17,r3
  80bfec:	1021883a 	mov	r16,r2
  80bff0:	080f8cc0 	call	80f8cc <__truncdfsf2>
  80bff4:	1009883a 	mov	r4,r2
  80bff8:	000b883a 	mov	r5,zero
  80bffc:	1025883a 	mov	r18,r2
  80c000:	1027883a 	mov	r19,r2
  80c004:	080e7440 	call	80e744 <__nesf2>
  80c008:	000d883a 	mov	r6,zero
  80c00c:	000f883a 	mov	r7,zero
  80c010:	8009883a 	mov	r4,r16
  80c014:	880b883a 	mov	r5,r17
  80c018:	10000e1e 	bne	r2,zero,80c054 <strtof+0xac>
  80c01c:	080f4540 	call	80f454 <__nedf2>
  80c020:	10000c26 	beq	r2,zero,80c054 <strtof+0xac>
  80c024:	a0c00017 	ldw	r3,0(r20)
  80c028:	00800884 	movi	r2,34
  80c02c:	18800015 	stw	r2,0(r3)
  80c030:	9805883a 	mov	r2,r19
  80c034:	dfc00517 	ldw	ra,20(sp)
  80c038:	dd000417 	ldw	r20,16(sp)
  80c03c:	dcc00317 	ldw	r19,12(sp)
  80c040:	dc800217 	ldw	r18,8(sp)
  80c044:	dc400117 	ldw	r17,4(sp)
  80c048:	dc000017 	ldw	r16,0(sp)
  80c04c:	dec00604 	addi	sp,sp,24
  80c050:	f800283a 	ret
  80c054:	9009883a 	mov	r4,r18
  80c058:	015fe034 	movhi	r5,32640
  80c05c:	297fffc4 	addi	r5,r5,-1
  80c060:	080e7bc0 	call	80e7bc <__gtsf2>
  80c064:	00ffffc4 	movi	r3,-1
  80c068:	011ffc34 	movhi	r4,32752
  80c06c:	213fffc4 	addi	r4,r4,-1
  80c070:	200f883a 	mov	r7,r4
  80c074:	180d883a 	mov	r6,r3
  80c078:	8009883a 	mov	r4,r16
  80c07c:	880b883a 	mov	r5,r17
  80c080:	00800f16 	blt	zero,r2,80c0c0 <strtof+0x118>
  80c084:	9009883a 	mov	r4,r18
  80c088:	017fe034 	movhi	r5,65408
  80c08c:	297fffc4 	addi	r5,r5,-1
  80c090:	080e8340 	call	80e834 <__ltsf2>
  80c094:	023fffc4 	movi	r8,-1
  80c098:	027ffc34 	movhi	r9,65520
  80c09c:	4a7fffc4 	addi	r9,r9,-1
  80c0a0:	880b883a 	mov	r5,r17
  80c0a4:	480f883a 	mov	r7,r9
  80c0a8:	8009883a 	mov	r4,r16
  80c0ac:	400d883a 	mov	r6,r8
  80c0b0:	103fdf0e 	bge	r2,zero,80c030 <strtof+0x88>
  80c0b4:	080f5ec0 	call	80f5ec <__ltdf2>
  80c0b8:	103fda0e 	bge	r2,zero,80c024 <strtof+0x7c>
  80c0bc:	003fdc06 	br	80c030 <strtof+0x88>
  80c0c0:	080f4dc0 	call	80f4dc <__gtdf2>
  80c0c4:	00bfd70e 	bge	zero,r2,80c024 <strtof+0x7c>
  80c0c8:	003fee06 	br	80c084 <strtof+0xdc>

0080c0cc <strtod>:
  80c0cc:	01802074 	movhi	r6,129
  80c0d0:	319be504 	addi	r6,r6,28564
  80c0d4:	2007883a 	mov	r3,r4
  80c0d8:	31000017 	ldw	r4,0(r6)
  80c0dc:	280d883a 	mov	r6,r5
  80c0e0:	180b883a 	mov	r5,r3
  80c0e4:	080aac41 	jmpi	80aac4 <_strtod_r>

0080c0e8 <_strtol_r>:
  80c0e8:	defff304 	addi	sp,sp,-52
  80c0ec:	00802074 	movhi	r2,129
  80c0f0:	109be904 	addi	r2,r2,28580
  80c0f4:	dcc00615 	stw	r19,24(sp)
  80c0f8:	14c00017 	ldw	r19,0(r2)
  80c0fc:	ddc00a15 	stw	r23,40(sp)
  80c100:	dc000315 	stw	r16,12(sp)
  80c104:	dfc00c15 	stw	ra,48(sp)
  80c108:	df000b15 	stw	fp,44(sp)
  80c10c:	dd800915 	stw	r22,36(sp)
  80c110:	dd400815 	stw	r21,32(sp)
  80c114:	dd000715 	stw	r20,28(sp)
  80c118:	dc800515 	stw	r18,20(sp)
  80c11c:	dc400415 	stw	r17,16(sp)
  80c120:	282f883a 	mov	r23,r5
  80c124:	d9000015 	stw	r4,0(sp)
  80c128:	d9800115 	stw	r6,4(sp)
  80c12c:	2821883a 	mov	r16,r5
  80c130:	84400007 	ldb	r17,0(r16)
  80c134:	84000044 	addi	r16,r16,1
  80c138:	9c47883a 	add	r3,r19,r17
  80c13c:	18800003 	ldbu	r2,0(r3)
  80c140:	1080020c 	andi	r2,r2,8
  80c144:	103ffa1e 	bne	r2,zero,80c130 <_strtol_r+0x48>
  80c148:	00800b44 	movi	r2,45
  80c14c:	88805c26 	beq	r17,r2,80c2c0 <_strtol_r+0x1d8>
  80c150:	00800ac4 	movi	r2,43
  80c154:	88805726 	beq	r17,r2,80c2b4 <_strtol_r+0x1cc>
  80c158:	0039883a 	mov	fp,zero
  80c15c:	3807003a 	cmpeq	r3,r7,zero
  80c160:	1800431e 	bne	r3,zero,80c270 <_strtol_r+0x188>
  80c164:	00800404 	movi	r2,16
  80c168:	38804126 	beq	r7,r2,80c270 <_strtol_r+0x188>
  80c16c:	3829883a 	mov	r20,r7
  80c170:	e02cc03a 	cmpne	r22,fp,zero
  80c174:	b0004b1e 	bne	r22,zero,80c2a4 <_strtol_r+0x1bc>
  80c178:	04a00034 	movhi	r18,32768
  80c17c:	94bfffc4 	addi	r18,r18,-1
  80c180:	9009883a 	mov	r4,r18
  80c184:	a00b883a 	mov	r5,r20
  80c188:	d9c00215 	stw	r7,8(sp)
  80c18c:	080fc180 	call	80fc18 <__umodsi3>
  80c190:	9009883a 	mov	r4,r18
  80c194:	a00b883a 	mov	r5,r20
  80c198:	102b883a 	mov	r21,r2
  80c19c:	080fc100 	call	80fc10 <__udivsi3>
  80c1a0:	1011883a 	mov	r8,r2
  80c1a4:	9c45883a 	add	r2,r19,r17
  80c1a8:	11000003 	ldbu	r4,0(r2)
  80c1ac:	000b883a 	mov	r5,zero
  80c1b0:	000d883a 	mov	r6,zero
  80c1b4:	20c0010c 	andi	r3,r4,4
  80c1b8:	d9c00217 	ldw	r7,8(sp)
  80c1bc:	18000e26 	beq	r3,zero,80c1f8 <_strtol_r+0x110>
  80c1c0:	88fff404 	addi	r3,r17,-48
  80c1c4:	19c0140e 	bge	r3,r7,80c218 <_strtol_r+0x130>
  80c1c8:	30003116 	blt	r6,zero,80c290 <_strtol_r+0x1a8>
  80c1cc:	41403036 	bltu	r8,r5,80c290 <_strtol_r+0x1a8>
  80c1d0:	2a002e26 	beq	r5,r8,80c28c <_strtol_r+0x1a4>
  80c1d4:	2d05383a 	mul	r2,r5,r20
  80c1d8:	01800044 	movi	r6,1
  80c1dc:	10cb883a 	add	r5,r2,r3
  80c1e0:	84400007 	ldb	r17,0(r16)
  80c1e4:	84000044 	addi	r16,r16,1
  80c1e8:	9c45883a 	add	r2,r19,r17
  80c1ec:	11000003 	ldbu	r4,0(r2)
  80c1f0:	20c0010c 	andi	r3,r4,4
  80c1f4:	183ff21e 	bne	r3,zero,80c1c0 <_strtol_r+0xd8>
  80c1f8:	208000cc 	andi	r2,r4,3
  80c1fc:	10000626 	beq	r2,zero,80c218 <_strtol_r+0x130>
  80c200:	2080004c 	andi	r2,r4,1
  80c204:	1005003a 	cmpeq	r2,r2,zero
  80c208:	1000231e 	bne	r2,zero,80c298 <_strtol_r+0x1b0>
  80c20c:	00800dc4 	movi	r2,55
  80c210:	8887c83a 	sub	r3,r17,r2
  80c214:	19ffec16 	blt	r3,r7,80c1c8 <_strtol_r+0xe0>
  80c218:	30002d16 	blt	r6,zero,80c2d0 <_strtol_r+0x1e8>
  80c21c:	b000231e 	bne	r22,zero,80c2ac <_strtol_r+0x1c4>
  80c220:	2807883a 	mov	r3,r5
  80c224:	d8800117 	ldw	r2,4(sp)
  80c228:	10000426 	beq	r2,zero,80c23c <_strtol_r+0x154>
  80c22c:	30000126 	beq	r6,zero,80c234 <_strtol_r+0x14c>
  80c230:	85ffffc4 	addi	r23,r16,-1
  80c234:	d9000117 	ldw	r4,4(sp)
  80c238:	25c00015 	stw	r23,0(r4)
  80c23c:	1805883a 	mov	r2,r3
  80c240:	dfc00c17 	ldw	ra,48(sp)
  80c244:	df000b17 	ldw	fp,44(sp)
  80c248:	ddc00a17 	ldw	r23,40(sp)
  80c24c:	dd800917 	ldw	r22,36(sp)
  80c250:	dd400817 	ldw	r21,32(sp)
  80c254:	dd000717 	ldw	r20,28(sp)
  80c258:	dcc00617 	ldw	r19,24(sp)
  80c25c:	dc800517 	ldw	r18,20(sp)
  80c260:	dc400417 	ldw	r17,16(sp)
  80c264:	dc000317 	ldw	r16,12(sp)
  80c268:	dec00d04 	addi	sp,sp,52
  80c26c:	f800283a 	ret
  80c270:	00800c04 	movi	r2,48
  80c274:	88801d26 	beq	r17,r2,80c2ec <_strtol_r+0x204>
  80c278:	183fbc26 	beq	r3,zero,80c16c <_strtol_r+0x84>
  80c27c:	00800c04 	movi	r2,48
  80c280:	88802726 	beq	r17,r2,80c320 <_strtol_r+0x238>
  80c284:	01c00284 	movi	r7,10
  80c288:	003fb806 	br	80c16c <_strtol_r+0x84>
  80c28c:	a8ffd10e 	bge	r21,r3,80c1d4 <_strtol_r+0xec>
  80c290:	01bfffc4 	movi	r6,-1
  80c294:	003fd206 	br	80c1e0 <_strtol_r+0xf8>
  80c298:	008015c4 	movi	r2,87
  80c29c:	8887c83a 	sub	r3,r17,r2
  80c2a0:	003fdc06 	br	80c214 <_strtol_r+0x12c>
  80c2a4:	04a00034 	movhi	r18,32768
  80c2a8:	003fb506 	br	80c180 <_strtol_r+0x98>
  80c2ac:	0147c83a 	sub	r3,zero,r5
  80c2b0:	003fdc06 	br	80c224 <_strtol_r+0x13c>
  80c2b4:	84400007 	ldb	r17,0(r16)
  80c2b8:	84000044 	addi	r16,r16,1
  80c2bc:	003fa606 	br	80c158 <_strtol_r+0x70>
  80c2c0:	84400007 	ldb	r17,0(r16)
  80c2c4:	07000044 	movi	fp,1
  80c2c8:	84000044 	addi	r16,r16,1
  80c2cc:	003fa306 	br	80c15c <_strtol_r+0x74>
  80c2d0:	e005003a 	cmpeq	r2,fp,zero
  80c2d4:	10000f1e 	bne	r2,zero,80c314 <_strtol_r+0x22c>
  80c2d8:	00e00034 	movhi	r3,32768
  80c2dc:	d9000017 	ldw	r4,0(sp)
  80c2e0:	00800884 	movi	r2,34
  80c2e4:	20800015 	stw	r2,0(r4)
  80c2e8:	003fce06 	br	80c224 <_strtol_r+0x13c>
  80c2ec:	81000007 	ldb	r4,0(r16)
  80c2f0:	00801e04 	movi	r2,120
  80c2f4:	20800226 	beq	r4,r2,80c300 <_strtol_r+0x218>
  80c2f8:	00801604 	movi	r2,88
  80c2fc:	20bfde1e 	bne	r4,r2,80c278 <_strtol_r+0x190>
  80c300:	84400047 	ldb	r17,1(r16)
  80c304:	01c00404 	movi	r7,16
  80c308:	84000084 	addi	r16,r16,2
  80c30c:	3829883a 	mov	r20,r7
  80c310:	003f9706 	br	80c170 <_strtol_r+0x88>
  80c314:	00e00034 	movhi	r3,32768
  80c318:	18ffffc4 	addi	r3,r3,-1
  80c31c:	003fef06 	br	80c2dc <_strtol_r+0x1f4>
  80c320:	01c00204 	movi	r7,8
  80c324:	3829883a 	mov	r20,r7
  80c328:	003f9106 	br	80c170 <_strtol_r+0x88>

0080c32c <strtol>:
  80c32c:	00802074 	movhi	r2,129
  80c330:	109be504 	addi	r2,r2,28564
  80c334:	2013883a 	mov	r9,r4
  80c338:	11000017 	ldw	r4,0(r2)
  80c33c:	2805883a 	mov	r2,r5
  80c340:	300f883a 	mov	r7,r6
  80c344:	480b883a 	mov	r5,r9
  80c348:	100d883a 	mov	r6,r2
  80c34c:	080c0e81 	jmpi	80c0e8 <_strtol_r>

0080c350 <_strtoll_r>:
  80c350:	defff004 	addi	sp,sp,-64
  80c354:	00802074 	movhi	r2,129
  80c358:	109be904 	addi	r2,r2,28580
  80c35c:	df000e15 	stw	fp,56(sp)
  80c360:	17000017 	ldw	fp,0(r2)
  80c364:	ddc00d15 	stw	r23,52(sp)
  80c368:	dd000a15 	stw	r20,40(sp)
  80c36c:	dfc00f15 	stw	ra,60(sp)
  80c370:	dd800c15 	stw	r22,48(sp)
  80c374:	dd400b15 	stw	r21,44(sp)
  80c378:	dcc00915 	stw	r19,36(sp)
  80c37c:	dc800815 	stw	r18,32(sp)
  80c380:	dc400715 	stw	r17,28(sp)
  80c384:	dc000615 	stw	r16,24(sp)
  80c388:	d9400315 	stw	r5,12(sp)
  80c38c:	d9000215 	stw	r4,8(sp)
  80c390:	d9800415 	stw	r6,16(sp)
  80c394:	382f883a 	mov	r23,r7
  80c398:	2829883a 	mov	r20,r5
  80c39c:	a4c00007 	ldb	r19,0(r20)
  80c3a0:	a5000044 	addi	r20,r20,1
  80c3a4:	e4c7883a 	add	r3,fp,r19
  80c3a8:	18800003 	ldbu	r2,0(r3)
  80c3ac:	1080020c 	andi	r2,r2,8
  80c3b0:	103ffa1e 	bne	r2,zero,80c39c <_strtoll_r+0x4c>
  80c3b4:	00800b44 	movi	r2,45
  80c3b8:	98808826 	beq	r19,r2,80c5dc <_strtoll_r+0x28c>
  80c3bc:	00800ac4 	movi	r2,43
  80c3c0:	98808326 	beq	r19,r2,80c5d0 <_strtoll_r+0x280>
  80c3c4:	d8000115 	stw	zero,4(sp)
  80c3c8:	b807003a 	cmpeq	r3,r23,zero
  80c3cc:	18005f1e 	bne	r3,zero,80c54c <_strtoll_r+0x1fc>
  80c3d0:	00800404 	movi	r2,16
  80c3d4:	b8805d26 	beq	r23,r2,80c54c <_strtoll_r+0x1fc>
  80c3d8:	b82dd7fa 	srai	r22,r23,31
  80c3dc:	b82b883a 	mov	r21,r23
  80c3e0:	d8c00117 	ldw	r3,4(sp)
  80c3e4:	1806c03a 	cmpne	r3,r3,zero
  80c3e8:	d8c00515 	stw	r3,20(sp)
  80c3ec:	1800631e 	bne	r3,zero,80c57c <_strtoll_r+0x22c>
  80c3f0:	043fffc4 	movi	r16,-1
  80c3f4:	04600034 	movhi	r17,32768
  80c3f8:	8c7fffc4 	addi	r17,r17,-1
  80c3fc:	880b883a 	mov	r5,r17
  80c400:	8009883a 	mov	r4,r16
  80c404:	a80d883a 	mov	r6,r21
  80c408:	b00f883a 	mov	r7,r22
  80c40c:	080e1940 	call	80e194 <__umoddi3>
  80c410:	880b883a 	mov	r5,r17
  80c414:	8009883a 	mov	r4,r16
  80c418:	b00f883a 	mov	r7,r22
  80c41c:	a80d883a 	mov	r6,r21
  80c420:	d8800015 	stw	r2,0(sp)
  80c424:	080dbb80 	call	80dbb8 <__udivdi3>
  80c428:	1023883a 	mov	r17,r2
  80c42c:	e4c5883a 	add	r2,fp,r19
  80c430:	11000003 	ldbu	r4,0(r2)
  80c434:	1825883a 	mov	r18,r3
  80c438:	0015883a 	mov	r10,zero
  80c43c:	20c0010c 	andi	r3,r4,4
  80c440:	0017883a 	mov	r11,zero
  80c444:	000f883a 	mov	r7,zero
  80c448:	18001a26 	beq	r3,zero,80c4b4 <_strtoll_r+0x164>
  80c44c:	9c3ff404 	addi	r16,r19,-48
  80c450:	85c0200e 	bge	r16,r23,80c4d4 <_strtoll_r+0x184>
  80c454:	38003b16 	blt	r7,zero,80c544 <_strtoll_r+0x1f4>
  80c458:	92c03a36 	bltu	r18,r11,80c544 <_strtoll_r+0x1f4>
  80c45c:	5c803826 	beq	r11,r18,80c540 <_strtoll_r+0x1f0>
  80c460:	54404c26 	beq	r10,r17,80c594 <_strtoll_r+0x244>
  80c464:	580b883a 	mov	r5,r11
  80c468:	5009883a 	mov	r4,r10
  80c46c:	a80d883a 	mov	r6,r21
  80c470:	b00f883a 	mov	r7,r22
  80c474:	080da7c0 	call	80da7c <__muldi3>
  80c478:	8013d7fa 	srai	r9,r16,31
  80c47c:	100d883a 	mov	r6,r2
  80c480:	1405883a 	add	r2,r2,r16
  80c484:	118d803a 	cmpltu	r6,r2,r6
  80c488:	1a47883a 	add	r3,r3,r9
  80c48c:	30cd883a 	add	r6,r6,r3
  80c490:	1015883a 	mov	r10,r2
  80c494:	3017883a 	mov	r11,r6
  80c498:	01c00044 	movi	r7,1
  80c49c:	a4c00007 	ldb	r19,0(r20)
  80c4a0:	a5000044 	addi	r20,r20,1
  80c4a4:	e4c5883a 	add	r2,fp,r19
  80c4a8:	11000003 	ldbu	r4,0(r2)
  80c4ac:	20c0010c 	andi	r3,r4,4
  80c4b0:	183fe61e 	bne	r3,zero,80c44c <_strtoll_r+0xfc>
  80c4b4:	208000cc 	andi	r2,r4,3
  80c4b8:	10000626 	beq	r2,zero,80c4d4 <_strtoll_r+0x184>
  80c4bc:	2080004c 	andi	r2,r4,1
  80c4c0:	1005003a 	cmpeq	r2,r2,zero
  80c4c4:	1000301e 	bne	r2,zero,80c588 <_strtoll_r+0x238>
  80c4c8:	02000dc4 	movi	r8,55
  80c4cc:	9a21c83a 	sub	r16,r19,r8
  80c4d0:	85ffe016 	blt	r16,r23,80c454 <_strtoll_r+0x104>
  80c4d4:	38004616 	blt	r7,zero,80c5f0 <_strtoll_r+0x2a0>
  80c4d8:	d8800517 	ldw	r2,20(sp)
  80c4dc:	1000341e 	bne	r2,zero,80c5b0 <_strtoll_r+0x260>
  80c4e0:	500b883a 	mov	r5,r10
  80c4e4:	580d883a 	mov	r6,r11
  80c4e8:	d8c00417 	ldw	r3,16(sp)
  80c4ec:	18000626 	beq	r3,zero,80c508 <_strtoll_r+0x1b8>
  80c4f0:	38000226 	beq	r7,zero,80c4fc <_strtoll_r+0x1ac>
  80c4f4:	a53fffc4 	addi	r20,r20,-1
  80c4f8:	dd000315 	stw	r20,12(sp)
  80c4fc:	d8c00317 	ldw	r3,12(sp)
  80c500:	d8800417 	ldw	r2,16(sp)
  80c504:	10c00015 	stw	r3,0(r2)
  80c508:	2805883a 	mov	r2,r5
  80c50c:	3007883a 	mov	r3,r6
  80c510:	dfc00f17 	ldw	ra,60(sp)
  80c514:	df000e17 	ldw	fp,56(sp)
  80c518:	ddc00d17 	ldw	r23,52(sp)
  80c51c:	dd800c17 	ldw	r22,48(sp)
  80c520:	dd400b17 	ldw	r21,44(sp)
  80c524:	dd000a17 	ldw	r20,40(sp)
  80c528:	dcc00917 	ldw	r19,36(sp)
  80c52c:	dc800817 	ldw	r18,32(sp)
  80c530:	dc400717 	ldw	r17,28(sp)
  80c534:	dc000617 	ldw	r16,24(sp)
  80c538:	dec01004 	addi	sp,sp,64
  80c53c:	f800283a 	ret
  80c540:	8abfc72e 	bgeu	r17,r10,80c460 <_strtoll_r+0x110>
  80c544:	01ffffc4 	movi	r7,-1
  80c548:	003fd406 	br	80c49c <_strtoll_r+0x14c>
  80c54c:	00800c04 	movi	r2,48
  80c550:	98803226 	beq	r19,r2,80c61c <_strtoll_r+0x2cc>
  80c554:	183fa026 	beq	r3,zero,80c3d8 <_strtoll_r+0x88>
  80c558:	00800c04 	movi	r2,48
  80c55c:	98803e26 	beq	r19,r2,80c658 <_strtoll_r+0x308>
  80c560:	d8c00117 	ldw	r3,4(sp)
  80c564:	05c00284 	movi	r23,10
  80c568:	b82b883a 	mov	r21,r23
  80c56c:	1806c03a 	cmpne	r3,r3,zero
  80c570:	002d883a 	mov	r22,zero
  80c574:	d8c00515 	stw	r3,20(sp)
  80c578:	183f9d26 	beq	r3,zero,80c3f0 <_strtoll_r+0xa0>
  80c57c:	0021883a 	mov	r16,zero
  80c580:	04600034 	movhi	r17,32768
  80c584:	003f9d06 	br	80c3fc <_strtoll_r+0xac>
  80c588:	020015c4 	movi	r8,87
  80c58c:	9a21c83a 	sub	r16,r19,r8
  80c590:	003fcf06 	br	80c4d0 <_strtoll_r+0x180>
  80c594:	5cbfb31e 	bne	r11,r18,80c464 <_strtoll_r+0x114>
  80c598:	d8800017 	ldw	r2,0(sp)
  80c59c:	143fb10e 	bge	r2,r16,80c464 <_strtoll_r+0x114>
  80c5a0:	8815883a 	mov	r10,r17
  80c5a4:	9017883a 	mov	r11,r18
  80c5a8:	01ffffc4 	movi	r7,-1
  80c5ac:	003fbb06 	br	80c49c <_strtoll_r+0x14c>
  80c5b0:	0009883a 	mov	r4,zero
  80c5b4:	2285c83a 	sub	r2,r4,r10
  80c5b8:	2089803a 	cmpltu	r4,r4,r2
  80c5bc:	02c7c83a 	sub	r3,zero,r11
  80c5c0:	1909c83a 	sub	r4,r3,r4
  80c5c4:	100b883a 	mov	r5,r2
  80c5c8:	200d883a 	mov	r6,r4
  80c5cc:	003fc606 	br	80c4e8 <_strtoll_r+0x198>
  80c5d0:	a4c00007 	ldb	r19,0(r20)
  80c5d4:	a5000044 	addi	r20,r20,1
  80c5d8:	003f7a06 	br	80c3c4 <_strtoll_r+0x74>
  80c5dc:	a4c00007 	ldb	r19,0(r20)
  80c5e0:	00800044 	movi	r2,1
  80c5e4:	a5000044 	addi	r20,r20,1
  80c5e8:	d8800115 	stw	r2,4(sp)
  80c5ec:	003f7606 	br	80c3c8 <_strtoll_r+0x78>
  80c5f0:	d8c00117 	ldw	r3,4(sp)
  80c5f4:	1805003a 	cmpeq	r2,r3,zero
  80c5f8:	1000131e 	bne	r2,zero,80c648 <_strtoll_r+0x2f8>
  80c5fc:	0005883a 	mov	r2,zero
  80c600:	00e00034 	movhi	r3,32768
  80c604:	100b883a 	mov	r5,r2
  80c608:	180d883a 	mov	r6,r3
  80c60c:	d8c00217 	ldw	r3,8(sp)
  80c610:	00800884 	movi	r2,34
  80c614:	18800015 	stw	r2,0(r3)
  80c618:	003fb306 	br	80c4e8 <_strtoll_r+0x198>
  80c61c:	a1000007 	ldb	r4,0(r20)
  80c620:	00801e04 	movi	r2,120
  80c624:	20800226 	beq	r4,r2,80c630 <_strtoll_r+0x2e0>
  80c628:	00801604 	movi	r2,88
  80c62c:	20bfc91e 	bne	r4,r2,80c554 <_strtoll_r+0x204>
  80c630:	a4c00047 	ldb	r19,1(r20)
  80c634:	05c00404 	movi	r23,16
  80c638:	b82b883a 	mov	r21,r23
  80c63c:	a5000084 	addi	r20,r20,2
  80c640:	002d883a 	mov	r22,zero
  80c644:	003f6606 	br	80c3e0 <_strtoll_r+0x90>
  80c648:	017fffc4 	movi	r5,-1
  80c64c:	01a00034 	movhi	r6,32768
  80c650:	31bfffc4 	addi	r6,r6,-1
  80c654:	003fed06 	br	80c60c <_strtoll_r+0x2bc>
  80c658:	05c00204 	movi	r23,8
  80c65c:	b82b883a 	mov	r21,r23
  80c660:	002d883a 	mov	r22,zero
  80c664:	003f5e06 	br	80c3e0 <_strtoll_r+0x90>

0080c668 <_strtoul_r>:
  80c668:	defff604 	addi	sp,sp,-40
  80c66c:	00802074 	movhi	r2,129
  80c670:	109be904 	addi	r2,r2,28580
  80c674:	dd000415 	stw	r20,16(sp)
  80c678:	15000017 	ldw	r20,0(r2)
  80c67c:	ddc00715 	stw	r23,28(sp)
  80c680:	dd800615 	stw	r22,24(sp)
  80c684:	dd400515 	stw	r21,20(sp)
  80c688:	dc800215 	stw	r18,8(sp)
  80c68c:	dc000015 	stw	r16,0(sp)
  80c690:	dfc00915 	stw	ra,36(sp)
  80c694:	df000815 	stw	fp,32(sp)
  80c698:	dcc00315 	stw	r19,12(sp)
  80c69c:	dc400115 	stw	r17,4(sp)
  80c6a0:	282b883a 	mov	r21,r5
  80c6a4:	202f883a 	mov	r23,r4
  80c6a8:	302d883a 	mov	r22,r6
  80c6ac:	3825883a 	mov	r18,r7
  80c6b0:	2821883a 	mov	r16,r5
  80c6b4:	84400007 	ldb	r17,0(r16)
  80c6b8:	84000044 	addi	r16,r16,1
  80c6bc:	a447883a 	add	r3,r20,r17
  80c6c0:	18800003 	ldbu	r2,0(r3)
  80c6c4:	1080020c 	andi	r2,r2,8
  80c6c8:	103ffa1e 	bne	r2,zero,80c6b4 <_strtoul_r+0x4c>
  80c6cc:	00800b44 	movi	r2,45
  80c6d0:	88805626 	beq	r17,r2,80c82c <_strtoul_r+0x1c4>
  80c6d4:	00800ac4 	movi	r2,43
  80c6d8:	88805126 	beq	r17,r2,80c820 <_strtoul_r+0x1b8>
  80c6dc:	0039883a 	mov	fp,zero
  80c6e0:	9007003a 	cmpeq	r3,r18,zero
  80c6e4:	18003b1e 	bne	r3,zero,80c7d4 <_strtoul_r+0x16c>
  80c6e8:	00800404 	movi	r2,16
  80c6ec:	90803926 	beq	r18,r2,80c7d4 <_strtoul_r+0x16c>
  80c6f0:	013fffc4 	movi	r4,-1
  80c6f4:	900b883a 	mov	r5,r18
  80c6f8:	080fc100 	call	80fc10 <__udivsi3>
  80c6fc:	013fffc4 	movi	r4,-1
  80c700:	900b883a 	mov	r5,r18
  80c704:	1027883a 	mov	r19,r2
  80c708:	080fc180 	call	80fc18 <__umodsi3>
  80c70c:	1011883a 	mov	r8,r2
  80c710:	900f883a 	mov	r7,r18
  80c714:	a445883a 	add	r2,r20,r17
  80c718:	11000003 	ldbu	r4,0(r2)
  80c71c:	000b883a 	mov	r5,zero
  80c720:	000d883a 	mov	r6,zero
  80c724:	20c0010c 	andi	r3,r4,4
  80c728:	18000e26 	beq	r3,zero,80c764 <_strtoul_r+0xfc>
  80c72c:	88fff404 	addi	r3,r17,-48
  80c730:	1c80140e 	bge	r3,r18,80c784 <_strtoul_r+0x11c>
  80c734:	30003316 	blt	r6,zero,80c804 <_strtoul_r+0x19c>
  80c738:	99403236 	bltu	r19,r5,80c804 <_strtoul_r+0x19c>
  80c73c:	2cc03026 	beq	r5,r19,80c800 <_strtoul_r+0x198>
  80c740:	29c5383a 	mul	r2,r5,r7
  80c744:	01800044 	movi	r6,1
  80c748:	10cb883a 	add	r5,r2,r3
  80c74c:	84400007 	ldb	r17,0(r16)
  80c750:	84000044 	addi	r16,r16,1
  80c754:	a445883a 	add	r2,r20,r17
  80c758:	11000003 	ldbu	r4,0(r2)
  80c75c:	20c0010c 	andi	r3,r4,4
  80c760:	183ff21e 	bne	r3,zero,80c72c <_strtoul_r+0xc4>
  80c764:	208000cc 	andi	r2,r4,3
  80c768:	10000626 	beq	r2,zero,80c784 <_strtoul_r+0x11c>
  80c76c:	2080004c 	andi	r2,r4,1
  80c770:	1005003a 	cmpeq	r2,r2,zero
  80c774:	1000251e 	bne	r2,zero,80c80c <_strtoul_r+0x1a4>
  80c778:	00800dc4 	movi	r2,55
  80c77c:	8887c83a 	sub	r3,r17,r2
  80c780:	1cbfec16 	blt	r3,r18,80c734 <_strtoul_r+0xcc>
  80c784:	3000400e 	bge	r6,zero,80c888 <_strtoul_r+0x220>
  80c788:	00800884 	movi	r2,34
  80c78c:	017fffc4 	movi	r5,-1
  80c790:	b8800015 	stw	r2,0(r23)
  80c794:	b0000226 	beq	r22,zero,80c7a0 <_strtoul_r+0x138>
  80c798:	30001f1e 	bne	r6,zero,80c818 <_strtoul_r+0x1b0>
  80c79c:	b5400015 	stw	r21,0(r22)
  80c7a0:	2805883a 	mov	r2,r5
  80c7a4:	dfc00917 	ldw	ra,36(sp)
  80c7a8:	df000817 	ldw	fp,32(sp)
  80c7ac:	ddc00717 	ldw	r23,28(sp)
  80c7b0:	dd800617 	ldw	r22,24(sp)
  80c7b4:	dd400517 	ldw	r21,20(sp)
  80c7b8:	dd000417 	ldw	r20,16(sp)
  80c7bc:	dcc00317 	ldw	r19,12(sp)
  80c7c0:	dc800217 	ldw	r18,8(sp)
  80c7c4:	dc400117 	ldw	r17,4(sp)
  80c7c8:	dc000017 	ldw	r16,0(sp)
  80c7cc:	dec00a04 	addi	sp,sp,40
  80c7d0:	f800283a 	ret
  80c7d4:	00800c04 	movi	r2,48
  80c7d8:	88801826 	beq	r17,r2,80c83c <_strtoul_r+0x1d4>
  80c7dc:	183fc426 	beq	r3,zero,80c6f0 <_strtoul_r+0x88>
  80c7e0:	00800c04 	movi	r2,48
  80c7e4:	88802226 	beq	r17,r2,80c870 <_strtoul_r+0x208>
  80c7e8:	04800284 	movi	r18,10
  80c7ec:	900f883a 	mov	r7,r18
  80c7f0:	04c666b4 	movhi	r19,6554
  80c7f4:	9ce66644 	addi	r19,r19,-26215
  80c7f8:	02000144 	movi	r8,5
  80c7fc:	003fc506 	br	80c714 <_strtoul_r+0xac>
  80c800:	40ffcf0e 	bge	r8,r3,80c740 <_strtoul_r+0xd8>
  80c804:	01bfffc4 	movi	r6,-1
  80c808:	003fd006 	br	80c74c <_strtoul_r+0xe4>
  80c80c:	008015c4 	movi	r2,87
  80c810:	8887c83a 	sub	r3,r17,r2
  80c814:	003fda06 	br	80c780 <_strtoul_r+0x118>
  80c818:	857fffc4 	addi	r21,r16,-1
  80c81c:	003fdf06 	br	80c79c <_strtoul_r+0x134>
  80c820:	84400007 	ldb	r17,0(r16)
  80c824:	84000044 	addi	r16,r16,1
  80c828:	003fac06 	br	80c6dc <_strtoul_r+0x74>
  80c82c:	84400007 	ldb	r17,0(r16)
  80c830:	07000044 	movi	fp,1
  80c834:	84000044 	addi	r16,r16,1
  80c838:	003fa906 	br	80c6e0 <_strtoul_r+0x78>
  80c83c:	81000007 	ldb	r4,0(r16)
  80c840:	00801e04 	movi	r2,120
  80c844:	20800226 	beq	r4,r2,80c850 <_strtoul_r+0x1e8>
  80c848:	00801604 	movi	r2,88
  80c84c:	20bfe31e 	bne	r4,r2,80c7dc <_strtoul_r+0x174>
  80c850:	84400047 	ldb	r17,1(r16)
  80c854:	04800404 	movi	r18,16
  80c858:	84000084 	addi	r16,r16,2
  80c85c:	900f883a 	mov	r7,r18
  80c860:	04c40034 	movhi	r19,4096
  80c864:	9cffffc4 	addi	r19,r19,-1
  80c868:	020003c4 	movi	r8,15
  80c86c:	003fa906 	br	80c714 <_strtoul_r+0xac>
  80c870:	04800204 	movi	r18,8
  80c874:	900f883a 	mov	r7,r18
  80c878:	04c80034 	movhi	r19,8192
  80c87c:	9cffffc4 	addi	r19,r19,-1
  80c880:	020001c4 	movi	r8,7
  80c884:	003fa306 	br	80c714 <_strtoul_r+0xac>
  80c888:	e005003a 	cmpeq	r2,fp,zero
  80c88c:	103fc11e 	bne	r2,zero,80c794 <_strtoul_r+0x12c>
  80c890:	014bc83a 	sub	r5,zero,r5
  80c894:	003fbf06 	br	80c794 <_strtoul_r+0x12c>

0080c898 <strtoul>:
  80c898:	00802074 	movhi	r2,129
  80c89c:	109be504 	addi	r2,r2,28564
  80c8a0:	2013883a 	mov	r9,r4
  80c8a4:	11000017 	ldw	r4,0(r2)
  80c8a8:	2805883a 	mov	r2,r5
  80c8ac:	300f883a 	mov	r7,r6
  80c8b0:	480b883a 	mov	r5,r9
  80c8b4:	100d883a 	mov	r6,r2
  80c8b8:	080c6681 	jmpi	80c668 <_strtoul_r>

0080c8bc <_strtoull_r>:
  80c8bc:	defff104 	addi	sp,sp,-60
  80c8c0:	00802074 	movhi	r2,129
  80c8c4:	109be904 	addi	r2,r2,28580
  80c8c8:	df000d15 	stw	fp,52(sp)
  80c8cc:	17000017 	ldw	fp,0(r2)
  80c8d0:	ddc00c15 	stw	r23,48(sp)
  80c8d4:	dcc00815 	stw	r19,32(sp)
  80c8d8:	dfc00e15 	stw	ra,56(sp)
  80c8dc:	dd800b15 	stw	r22,44(sp)
  80c8e0:	dd400a15 	stw	r21,40(sp)
  80c8e4:	dd000915 	stw	r20,36(sp)
  80c8e8:	dc800715 	stw	r18,28(sp)
  80c8ec:	dc400615 	stw	r17,24(sp)
  80c8f0:	dc000515 	stw	r16,20(sp)
  80c8f4:	d9400215 	stw	r5,8(sp)
  80c8f8:	d9000115 	stw	r4,4(sp)
  80c8fc:	d9800315 	stw	r6,12(sp)
  80c900:	382f883a 	mov	r23,r7
  80c904:	2827883a 	mov	r19,r5
  80c908:	9d000007 	ldb	r20,0(r19)
  80c90c:	9cc00044 	addi	r19,r19,1
  80c910:	e507883a 	add	r3,fp,r20
  80c914:	18800003 	ldbu	r2,0(r3)
  80c918:	1080020c 	andi	r2,r2,8
  80c91c:	103ffa1e 	bne	r2,zero,80c908 <_strtoull_r+0x4c>
  80c920:	00800b44 	movi	r2,45
  80c924:	a0807a26 	beq	r20,r2,80cb10 <_strtoull_r+0x254>
  80c928:	00800ac4 	movi	r2,43
  80c92c:	a0807526 	beq	r20,r2,80cb04 <_strtoull_r+0x248>
  80c930:	d8000015 	stw	zero,0(sp)
  80c934:	b807003a 	cmpeq	r3,r23,zero
  80c938:	18005a1e 	bne	r3,zero,80caa4 <_strtoull_r+0x1e8>
  80c93c:	00800404 	movi	r2,16
  80c940:	b8805826 	beq	r23,r2,80caa4 <_strtoull_r+0x1e8>
  80c944:	b82dd7fa 	srai	r22,r23,31
  80c948:	043fffc4 	movi	r16,-1
  80c94c:	8009883a 	mov	r4,r16
  80c950:	800b883a 	mov	r5,r16
  80c954:	b80d883a 	mov	r6,r23
  80c958:	b00f883a 	mov	r7,r22
  80c95c:	080dbb80 	call	80dbb8 <__udivdi3>
  80c960:	8009883a 	mov	r4,r16
  80c964:	800b883a 	mov	r5,r16
  80c968:	b80d883a 	mov	r6,r23
  80c96c:	b00f883a 	mov	r7,r22
  80c970:	1023883a 	mov	r17,r2
  80c974:	1825883a 	mov	r18,r3
  80c978:	080e1940 	call	80e194 <__umoddi3>
  80c97c:	b82b883a 	mov	r21,r23
  80c980:	1019883a 	mov	r12,r2
  80c984:	e505883a 	add	r2,fp,r20
  80c988:	11000003 	ldbu	r4,0(r2)
  80c98c:	0015883a 	mov	r10,zero
  80c990:	0017883a 	mov	r11,zero
  80c994:	20c0010c 	andi	r3,r4,4
  80c998:	000d883a 	mov	r6,zero
  80c99c:	18001c26 	beq	r3,zero,80ca10 <_strtoull_r+0x154>
  80c9a0:	a43ff404 	addi	r16,r20,-48
  80c9a4:	85c0220e 	bge	r16,r23,80ca30 <_strtoull_r+0x174>
  80c9a8:	30003c16 	blt	r6,zero,80ca9c <_strtoull_r+0x1e0>
  80c9ac:	92c03b36 	bltu	r18,r11,80ca9c <_strtoull_r+0x1e0>
  80c9b0:	5c803926 	beq	r11,r18,80ca98 <_strtoull_r+0x1dc>
  80c9b4:	54404c26 	beq	r10,r17,80cae8 <_strtoull_r+0x22c>
  80c9b8:	580b883a 	mov	r5,r11
  80c9bc:	5009883a 	mov	r4,r10
  80c9c0:	a80d883a 	mov	r6,r21
  80c9c4:	b00f883a 	mov	r7,r22
  80c9c8:	db000415 	stw	r12,16(sp)
  80c9cc:	080da7c0 	call	80da7c <__muldi3>
  80c9d0:	8013d7fa 	srai	r9,r16,31
  80c9d4:	100d883a 	mov	r6,r2
  80c9d8:	1405883a 	add	r2,r2,r16
  80c9dc:	118d803a 	cmpltu	r6,r2,r6
  80c9e0:	1a47883a 	add	r3,r3,r9
  80c9e4:	db000417 	ldw	r12,16(sp)
  80c9e8:	30cd883a 	add	r6,r6,r3
  80c9ec:	3017883a 	mov	r11,r6
  80c9f0:	1015883a 	mov	r10,r2
  80c9f4:	01800044 	movi	r6,1
  80c9f8:	9d000007 	ldb	r20,0(r19)
  80c9fc:	9cc00044 	addi	r19,r19,1
  80ca00:	e505883a 	add	r2,fp,r20
  80ca04:	11000003 	ldbu	r4,0(r2)
  80ca08:	20c0010c 	andi	r3,r4,4
  80ca0c:	183fe41e 	bne	r3,zero,80c9a0 <_strtoull_r+0xe4>
  80ca10:	208000cc 	andi	r2,r4,3
  80ca14:	10000626 	beq	r2,zero,80ca30 <_strtoull_r+0x174>
  80ca18:	2080004c 	andi	r2,r4,1
  80ca1c:	1005003a 	cmpeq	r2,r2,zero
  80ca20:	10002e1e 	bne	r2,zero,80cadc <_strtoull_r+0x220>
  80ca24:	02000dc4 	movi	r8,55
  80ca28:	a221c83a 	sub	r16,r20,r8
  80ca2c:	85ffde16 	blt	r16,r23,80c9a8 <_strtoull_r+0xec>
  80ca30:	3000530e 	bge	r6,zero,80cb80 <_strtoull_r+0x2c4>
  80ca34:	d8c00117 	ldw	r3,4(sp)
  80ca38:	02bfffc4 	movi	r10,-1
  80ca3c:	00800884 	movi	r2,34
  80ca40:	5017883a 	mov	r11,r10
  80ca44:	18800015 	stw	r2,0(r3)
  80ca48:	d8800317 	ldw	r2,12(sp)
  80ca4c:	10000426 	beq	r2,zero,80ca60 <_strtoull_r+0x1a4>
  80ca50:	3000291e 	bne	r6,zero,80caf8 <_strtoull_r+0x23c>
  80ca54:	d8800217 	ldw	r2,8(sp)
  80ca58:	d8c00317 	ldw	r3,12(sp)
  80ca5c:	18800015 	stw	r2,0(r3)
  80ca60:	5005883a 	mov	r2,r10
  80ca64:	5807883a 	mov	r3,r11
  80ca68:	dfc00e17 	ldw	ra,56(sp)
  80ca6c:	df000d17 	ldw	fp,52(sp)
  80ca70:	ddc00c17 	ldw	r23,48(sp)
  80ca74:	dd800b17 	ldw	r22,44(sp)
  80ca78:	dd400a17 	ldw	r21,40(sp)
  80ca7c:	dd000917 	ldw	r20,36(sp)
  80ca80:	dcc00817 	ldw	r19,32(sp)
  80ca84:	dc800717 	ldw	r18,28(sp)
  80ca88:	dc400617 	ldw	r17,24(sp)
  80ca8c:	dc000517 	ldw	r16,20(sp)
  80ca90:	dec00f04 	addi	sp,sp,60
  80ca94:	f800283a 	ret
  80ca98:	8abfc62e 	bgeu	r17,r10,80c9b4 <_strtoull_r+0xf8>
  80ca9c:	01bfffc4 	movi	r6,-1
  80caa0:	003fd506 	br	80c9f8 <_strtoull_r+0x13c>
  80caa4:	00800c04 	movi	r2,48
  80caa8:	a0801e26 	beq	r20,r2,80cb24 <_strtoull_r+0x268>
  80caac:	183fa526 	beq	r3,zero,80c944 <_strtoull_r+0x88>
  80cab0:	00800c04 	movi	r2,48
  80cab4:	a0802a26 	beq	r20,r2,80cb60 <_strtoull_r+0x2a4>
  80cab8:	05c00284 	movi	r23,10
  80cabc:	b82b883a 	mov	r21,r23
  80cac0:	046666b4 	movhi	r17,39322
  80cac4:	8c666644 	addi	r17,r17,-26215
  80cac8:	002d883a 	mov	r22,zero
  80cacc:	048666b4 	movhi	r18,6554
  80cad0:	94a66644 	addi	r18,r18,-26215
  80cad4:	03000144 	movi	r12,5
  80cad8:	003faa06 	br	80c984 <_strtoull_r+0xc8>
  80cadc:	020015c4 	movi	r8,87
  80cae0:	a221c83a 	sub	r16,r20,r8
  80cae4:	003fd106 	br	80ca2c <_strtoull_r+0x170>
  80cae8:	5cbfb31e 	bne	r11,r18,80c9b8 <_strtoull_r+0xfc>
  80caec:	643fb20e 	bge	r12,r16,80c9b8 <_strtoull_r+0xfc>
  80caf0:	01bfffc4 	movi	r6,-1
  80caf4:	003fc006 	br	80c9f8 <_strtoull_r+0x13c>
  80caf8:	9cffffc4 	addi	r19,r19,-1
  80cafc:	dcc00215 	stw	r19,8(sp)
  80cb00:	003fd406 	br	80ca54 <_strtoull_r+0x198>
  80cb04:	9d000007 	ldb	r20,0(r19)
  80cb08:	9cc00044 	addi	r19,r19,1
  80cb0c:	003f8806 	br	80c930 <_strtoull_r+0x74>
  80cb10:	9d000007 	ldb	r20,0(r19)
  80cb14:	00800044 	movi	r2,1
  80cb18:	9cc00044 	addi	r19,r19,1
  80cb1c:	d8800015 	stw	r2,0(sp)
  80cb20:	003f8406 	br	80c934 <_strtoull_r+0x78>
  80cb24:	99000007 	ldb	r4,0(r19)
  80cb28:	00801e04 	movi	r2,120
  80cb2c:	20800226 	beq	r4,r2,80cb38 <_strtoull_r+0x27c>
  80cb30:	00801604 	movi	r2,88
  80cb34:	20bfdd1e 	bne	r4,r2,80caac <_strtoull_r+0x1f0>
  80cb38:	9d000047 	ldb	r20,1(r19)
  80cb3c:	05c00404 	movi	r23,16
  80cb40:	b82b883a 	mov	r21,r23
  80cb44:	047fffc4 	movi	r17,-1
  80cb48:	9cc00084 	addi	r19,r19,2
  80cb4c:	002d883a 	mov	r22,zero
  80cb50:	04840034 	movhi	r18,4096
  80cb54:	94bfffc4 	addi	r18,r18,-1
  80cb58:	030003c4 	movi	r12,15
  80cb5c:	003f8906 	br	80c984 <_strtoull_r+0xc8>
  80cb60:	05c00204 	movi	r23,8
  80cb64:	b82b883a 	mov	r21,r23
  80cb68:	047fffc4 	movi	r17,-1
  80cb6c:	002d883a 	mov	r22,zero
  80cb70:	04880034 	movhi	r18,8192
  80cb74:	94bfffc4 	addi	r18,r18,-1
  80cb78:	030001c4 	movi	r12,7
  80cb7c:	003f8106 	br	80c984 <_strtoull_r+0xc8>
  80cb80:	d8c00017 	ldw	r3,0(sp)
  80cb84:	1805003a 	cmpeq	r2,r3,zero
  80cb88:	103faf1e 	bne	r2,zero,80ca48 <_strtoull_r+0x18c>
  80cb8c:	0009883a 	mov	r4,zero
  80cb90:	2285c83a 	sub	r2,r4,r10
  80cb94:	02c7c83a 	sub	r3,zero,r11
  80cb98:	2089803a 	cmpltu	r4,r4,r2
  80cb9c:	1909c83a 	sub	r4,r3,r4
  80cba0:	1015883a 	mov	r10,r2
  80cba4:	2017883a 	mov	r11,r4
  80cba8:	003fa706 	br	80ca48 <_strtoull_r+0x18c>

0080cbac <__submore>:
  80cbac:	defffa04 	addi	sp,sp,-24
  80cbb0:	28c00c17 	ldw	r3,48(r5)
  80cbb4:	dc800215 	stw	r18,8(sp)
  80cbb8:	2825883a 	mov	r18,r5
  80cbbc:	dc000015 	stw	r16,0(sp)
  80cbc0:	90801004 	addi	r2,r18,64
  80cbc4:	04010004 	movi	r16,1024
  80cbc8:	dfc00515 	stw	ra,20(sp)
  80cbcc:	dd000415 	stw	r20,16(sp)
  80cbd0:	dcc00315 	stw	r19,12(sp)
  80cbd4:	dc400115 	stw	r17,4(sp)
  80cbd8:	800b883a 	mov	r5,r16
  80cbdc:	18801b26 	beq	r3,r2,80cc4c <__submore+0xa0>
  80cbe0:	94400d17 	ldw	r17,52(r18)
  80cbe4:	180b883a 	mov	r5,r3
  80cbe8:	8c69883a 	add	r20,r17,r17
  80cbec:	a00d883a 	mov	r6,r20
  80cbf0:	08035840 	call	803584 <_realloc_r>
  80cbf4:	1467883a 	add	r19,r2,r17
  80cbf8:	1021883a 	mov	r16,r2
  80cbfc:	880d883a 	mov	r6,r17
  80cc00:	9809883a 	mov	r4,r19
  80cc04:	100b883a 	mov	r5,r2
  80cc08:	10000e26 	beq	r2,zero,80cc44 <__submore+0x98>
  80cc0c:	08031c80 	call	8031c8 <memcpy>
  80cc10:	000d883a 	mov	r6,zero
  80cc14:	95000d15 	stw	r20,52(r18)
  80cc18:	94c00015 	stw	r19,0(r18)
  80cc1c:	94000c15 	stw	r16,48(r18)
  80cc20:	3005883a 	mov	r2,r6
  80cc24:	dfc00517 	ldw	ra,20(sp)
  80cc28:	dd000417 	ldw	r20,16(sp)
  80cc2c:	dcc00317 	ldw	r19,12(sp)
  80cc30:	dc800217 	ldw	r18,8(sp)
  80cc34:	dc400117 	ldw	r17,4(sp)
  80cc38:	dc000017 	ldw	r16,0(sp)
  80cc3c:	dec00604 	addi	sp,sp,24
  80cc40:	f800283a 	ret
  80cc44:	01bfffc4 	movi	r6,-1
  80cc48:	003ff506 	br	80cc20 <__submore+0x74>
  80cc4c:	08029a40 	call	8029a4 <_malloc_r>
  80cc50:	1009883a 	mov	r4,r2
  80cc54:	1140ff44 	addi	r5,r2,1021
  80cc58:	000d883a 	mov	r6,zero
  80cc5c:	103ff926 	beq	r2,zero,80cc44 <__submore+0x98>
  80cc60:	90801083 	ldbu	r2,66(r18)
  80cc64:	94000d15 	stw	r16,52(r18)
  80cc68:	91000c15 	stw	r4,48(r18)
  80cc6c:	28800085 	stb	r2,2(r5)
  80cc70:	90c01043 	ldbu	r3,65(r18)
  80cc74:	28c00045 	stb	r3,1(r5)
  80cc78:	90801003 	ldbu	r2,64(r18)
  80cc7c:	2080ff45 	stb	r2,1021(r4)
  80cc80:	91400015 	stw	r5,0(r18)
  80cc84:	003fe606 	br	80cc20 <__submore+0x74>

0080cc88 <_ungetc_r>:
  80cc88:	defffc04 	addi	sp,sp,-16
  80cc8c:	00bfffc4 	movi	r2,-1
  80cc90:	dc400215 	stw	r17,8(sp)
  80cc94:	dc000115 	stw	r16,4(sp)
  80cc98:	dfc00315 	stw	ra,12(sp)
  80cc9c:	2821883a 	mov	r16,r5
  80cca0:	2023883a 	mov	r17,r4
  80cca4:	28801826 	beq	r5,r2,80cd08 <_ungetc_r+0x80>
  80cca8:	20000226 	beq	r4,zero,80ccb4 <_ungetc_r+0x2c>
  80ccac:	20800e17 	ldw	r2,56(r4)
  80ccb0:	10001b26 	beq	r2,zero,80cd20 <_ungetc_r+0x98>
  80ccb4:	3100030b 	ldhu	r4,12(r6)
  80ccb8:	00bff7c4 	movi	r2,-33
  80ccbc:	2084703a 	and	r2,r4,r2
  80ccc0:	117fffcc 	andi	r5,r2,65535
  80ccc4:	28c0010c 	andi	r3,r5,4
  80ccc8:	1009883a 	mov	r4,r2
  80cccc:	3080030d 	sth	r2,12(r6)
  80ccd0:	18003526 	beq	r3,zero,80cda8 <_ungetc_r+0x120>
  80ccd4:	30800c17 	ldw	r2,48(r6)
  80ccd8:	84003fcc 	andi	r16,r16,255
  80ccdc:	10001426 	beq	r2,zero,80cd30 <_ungetc_r+0xa8>
  80cce0:	30c00117 	ldw	r3,4(r6)
  80cce4:	30800d17 	ldw	r2,52(r6)
  80cce8:	1880380e 	bge	r3,r2,80cdcc <_ungetc_r+0x144>
  80ccec:	30c00017 	ldw	r3,0(r6)
  80ccf0:	19ffffc4 	addi	r7,r3,-1
  80ccf4:	31c00015 	stw	r7,0(r6)
  80ccf8:	1c3fffc5 	stb	r16,-1(r3)
  80ccfc:	30800117 	ldw	r2,4(r6)
  80cd00:	10800044 	addi	r2,r2,1
  80cd04:	30800115 	stw	r2,4(r6)
  80cd08:	8005883a 	mov	r2,r16
  80cd0c:	dfc00317 	ldw	ra,12(sp)
  80cd10:	dc400217 	ldw	r17,8(sp)
  80cd14:	dc000117 	ldw	r16,4(sp)
  80cd18:	dec00404 	addi	sp,sp,16
  80cd1c:	f800283a 	ret
  80cd20:	d9800015 	stw	r6,0(sp)
  80cd24:	08014880 	call	801488 <__sinit>
  80cd28:	d9800017 	ldw	r6,0(sp)
  80cd2c:	003fe106 	br	80ccb4 <_ungetc_r+0x2c>
  80cd30:	30800417 	ldw	r2,16(r6)
  80cd34:	10002326 	beq	r2,zero,80cdc4 <_ungetc_r+0x13c>
  80cd38:	31c00017 	ldw	r7,0(r6)
  80cd3c:	11c0022e 	bgeu	r2,r7,80cd48 <_ungetc_r+0xc0>
  80cd40:	38bfffc3 	ldbu	r2,-1(r7)
  80cd44:	80801226 	beq	r16,r2,80cd90 <_ungetc_r+0x108>
  80cd48:	30c00117 	ldw	r3,4(r6)
  80cd4c:	00800044 	movi	r2,1
  80cd50:	30800115 	stw	r2,4(r6)
  80cd54:	008000c4 	movi	r2,3
  80cd58:	31001004 	addi	r4,r6,64
  80cd5c:	31401084 	addi	r5,r6,66
  80cd60:	30800d15 	stw	r2,52(r6)
  80cd64:	8005883a 	mov	r2,r16
  80cd68:	30c00f15 	stw	r3,60(r6)
  80cd6c:	31c00e15 	stw	r7,56(r6)
  80cd70:	31000c15 	stw	r4,48(r6)
  80cd74:	31400015 	stw	r5,0(r6)
  80cd78:	34001085 	stb	r16,66(r6)
  80cd7c:	dfc00317 	ldw	ra,12(sp)
  80cd80:	dc400217 	ldw	r17,8(sp)
  80cd84:	dc000117 	ldw	r16,4(sp)
  80cd88:	dec00404 	addi	sp,sp,16
  80cd8c:	f800283a 	ret
  80cd90:	30800117 	ldw	r2,4(r6)
  80cd94:	39ffffc4 	addi	r7,r7,-1
  80cd98:	31c00015 	stw	r7,0(r6)
  80cd9c:	10800044 	addi	r2,r2,1
  80cda0:	30800115 	stw	r2,4(r6)
  80cda4:	003fd806 	br	80cd08 <_ungetc_r+0x80>
  80cda8:	2880040c 	andi	r2,r5,16
  80cdac:	10000d26 	beq	r2,zero,80cde4 <_ungetc_r+0x15c>
  80cdb0:	2880020c 	andi	r2,r5,8
  80cdb4:	10000d1e 	bne	r2,zero,80cdec <_ungetc_r+0x164>
  80cdb8:	20800114 	ori	r2,r4,4
  80cdbc:	3080030d 	sth	r2,12(r6)
  80cdc0:	003fc406 	br	80ccd4 <_ungetc_r+0x4c>
  80cdc4:	31c00017 	ldw	r7,0(r6)
  80cdc8:	003fdf06 	br	80cd48 <_ungetc_r+0xc0>
  80cdcc:	300b883a 	mov	r5,r6
  80cdd0:	8809883a 	mov	r4,r17
  80cdd4:	d9800015 	stw	r6,0(sp)
  80cdd8:	080cbac0 	call	80cbac <__submore>
  80cddc:	d9800017 	ldw	r6,0(sp)
  80cde0:	103fc226 	beq	r2,zero,80ccec <_ungetc_r+0x64>
  80cde4:	043fffc4 	movi	r16,-1
  80cde8:	003fc706 	br	80cd08 <_ungetc_r+0x80>
  80cdec:	300b883a 	mov	r5,r6
  80cdf0:	8809883a 	mov	r4,r17
  80cdf4:	d9800015 	stw	r6,0(sp)
  80cdf8:	08010c80 	call	8010c8 <_fflush_r>
  80cdfc:	d9800017 	ldw	r6,0(sp)
  80ce00:	103ff81e 	bne	r2,zero,80cde4 <_ungetc_r+0x15c>
  80ce04:	3100030b 	ldhu	r4,12(r6)
  80ce08:	00bffdc4 	movi	r2,-9
  80ce0c:	30000215 	stw	zero,8(r6)
  80ce10:	2084703a 	and	r2,r4,r2
  80ce14:	1009883a 	mov	r4,r2
  80ce18:	3080030d 	sth	r2,12(r6)
  80ce1c:	30000615 	stw	zero,24(r6)
  80ce20:	003fe506 	br	80cdb8 <_ungetc_r+0x130>

0080ce24 <ungetc>:
  80ce24:	01802074 	movhi	r6,129
  80ce28:	319be504 	addi	r6,r6,28564
  80ce2c:	2007883a 	mov	r3,r4
  80ce30:	31000017 	ldw	r4,0(r6)
  80ce34:	280d883a 	mov	r6,r5
  80ce38:	180b883a 	mov	r5,r3
  80ce3c:	080cc881 	jmpi	80cc88 <_ungetc_r>

0080ce40 <_calloc_r>:
  80ce40:	298b383a 	mul	r5,r5,r6
  80ce44:	defffe04 	addi	sp,sp,-8
  80ce48:	dc000015 	stw	r16,0(sp)
  80ce4c:	dfc00115 	stw	ra,4(sp)
  80ce50:	08029a40 	call	8029a4 <_malloc_r>
  80ce54:	1021883a 	mov	r16,r2
  80ce58:	01c00904 	movi	r7,36
  80ce5c:	10000d26 	beq	r2,zero,80ce94 <_calloc_r+0x54>
  80ce60:	10ffff17 	ldw	r3,-4(r2)
  80ce64:	1009883a 	mov	r4,r2
  80ce68:	00bfff04 	movi	r2,-4
  80ce6c:	1886703a 	and	r3,r3,r2
  80ce70:	1887883a 	add	r3,r3,r2
  80ce74:	180d883a 	mov	r6,r3
  80ce78:	000b883a 	mov	r5,zero
  80ce7c:	38c01736 	bltu	r7,r3,80cedc <_calloc_r+0x9c>
  80ce80:	008004c4 	movi	r2,19
  80ce84:	10c00836 	bltu	r2,r3,80cea8 <_calloc_r+0x68>
  80ce88:	20000215 	stw	zero,8(r4)
  80ce8c:	20000015 	stw	zero,0(r4)
  80ce90:	20000115 	stw	zero,4(r4)
  80ce94:	8005883a 	mov	r2,r16
  80ce98:	dfc00117 	ldw	ra,4(sp)
  80ce9c:	dc000017 	ldw	r16,0(sp)
  80cea0:	dec00204 	addi	sp,sp,8
  80cea4:	f800283a 	ret
  80cea8:	008006c4 	movi	r2,27
  80ceac:	80000015 	stw	zero,0(r16)
  80ceb0:	80000115 	stw	zero,4(r16)
  80ceb4:	81000204 	addi	r4,r16,8
  80ceb8:	10fff32e 	bgeu	r2,r3,80ce88 <_calloc_r+0x48>
  80cebc:	80000215 	stw	zero,8(r16)
  80cec0:	80000315 	stw	zero,12(r16)
  80cec4:	81000404 	addi	r4,r16,16
  80cec8:	19ffef1e 	bne	r3,r7,80ce88 <_calloc_r+0x48>
  80cecc:	81000604 	addi	r4,r16,24
  80ced0:	80000415 	stw	zero,16(r16)
  80ced4:	80000515 	stw	zero,20(r16)
  80ced8:	003feb06 	br	80ce88 <_calloc_r+0x48>
  80cedc:	08033480 	call	803348 <memset>
  80cee0:	8005883a 	mov	r2,r16
  80cee4:	dfc00117 	ldw	ra,4(sp)
  80cee8:	dc000017 	ldw	r16,0(sp)
  80ceec:	dec00204 	addi	sp,sp,8
  80cef0:	f800283a 	ret

0080cef4 <htinit>:
  80cef4:	28800003 	ldbu	r2,0(r5)
  80cef8:	10000626 	beq	r2,zero,80cf14 <htinit+0x20>
  80cefc:	1105883a 	add	r2,r2,r4
  80cf00:	11800005 	stb	r6,0(r2)
  80cf04:	28800043 	ldbu	r2,1(r5)
  80cf08:	31800044 	addi	r6,r6,1
  80cf0c:	29400044 	addi	r5,r5,1
  80cf10:	103ffa1e 	bne	r2,zero,80cefc <htinit+0x8>
  80cf14:	f800283a 	ret

0080cf18 <__hexdig_init>:
  80cf18:	defffd04 	addi	sp,sp,-12
  80cf1c:	dc400015 	stw	r17,0(sp)
  80cf20:	044020b4 	movhi	r17,130
  80cf24:	8c635e04 	addi	r17,r17,-29320
  80cf28:	dcc00115 	stw	r19,4(sp)
  80cf2c:	8809883a 	mov	r4,r17
  80cf30:	04c00684 	movi	r19,26
  80cf34:	01402074 	movhi	r5,129
  80cf38:	29546504 	addi	r5,r5,20884
  80cf3c:	01800404 	movi	r6,16
  80cf40:	dfc00215 	stw	ra,8(sp)
  80cf44:	080cef40 	call	80cef4 <htinit>
  80cf48:	980d883a 	mov	r6,r19
  80cf4c:	8809883a 	mov	r4,r17
  80cf50:	01402074 	movhi	r5,129
  80cf54:	29546804 	addi	r5,r5,20896
  80cf58:	080cef40 	call	80cef4 <htinit>
  80cf5c:	8809883a 	mov	r4,r17
  80cf60:	980d883a 	mov	r6,r19
  80cf64:	01402074 	movhi	r5,129
  80cf68:	29546a04 	addi	r5,r5,20904
  80cf6c:	dfc00217 	ldw	ra,8(sp)
  80cf70:	dcc00117 	ldw	r19,4(sp)
  80cf74:	dc400017 	ldw	r17,0(sp)
  80cf78:	dec00304 	addi	sp,sp,12
  80cf7c:	080cef41 	jmpi	80cef4 <htinit>

0080cf80 <rshift>:
  80cf80:	2807d17a 	srai	r3,r5,5
  80cf84:	20800417 	ldw	r2,16(r4)
  80cf88:	22400504 	addi	r9,r4,20
  80cf8c:	480f883a 	mov	r7,r9
  80cf90:	1880190e 	bge	r3,r2,80cff8 <rshift+0x78>
  80cf94:	1085883a 	add	r2,r2,r2
  80cf98:	18c7883a 	add	r3,r3,r3
  80cf9c:	1085883a 	add	r2,r2,r2
  80cfa0:	18c7883a 	add	r3,r3,r3
  80cfa4:	294007cc 	andi	r5,r5,31
  80cfa8:	4891883a 	add	r8,r9,r2
  80cfac:	48cd883a 	add	r6,r9,r3
  80cfb0:	28001726 	beq	r5,zero,80d010 <rshift+0x90>
  80cfb4:	30c00017 	ldw	r3,0(r6)
  80cfb8:	00800804 	movi	r2,32
  80cfbc:	31800104 	addi	r6,r6,4
  80cfc0:	1155c83a 	sub	r10,r2,r5
  80cfc4:	1946d83a 	srl	r3,r3,r5
  80cfc8:	3200092e 	bgeu	r6,r8,80cff0 <rshift+0x70>
  80cfcc:	30800017 	ldw	r2,0(r6)
  80cfd0:	1284983a 	sll	r2,r2,r10
  80cfd4:	10c4b03a 	or	r2,r2,r3
  80cfd8:	38800015 	stw	r2,0(r7)
  80cfdc:	30c00017 	ldw	r3,0(r6)
  80cfe0:	31800104 	addi	r6,r6,4
  80cfe4:	39c00104 	addi	r7,r7,4
  80cfe8:	1946d83a 	srl	r3,r3,r5
  80cfec:	323ff736 	bltu	r6,r8,80cfcc <rshift+0x4c>
  80cff0:	38c00015 	stw	r3,0(r7)
  80cff4:	18000c1e 	bne	r3,zero,80d028 <rshift+0xa8>
  80cff8:	3a45c83a 	sub	r2,r7,r9
  80cffc:	1005d0ba 	srai	r2,r2,2
  80d000:	20800415 	stw	r2,16(r4)
  80d004:	1000011e 	bne	r2,zero,80d00c <rshift+0x8c>
  80d008:	20000515 	stw	zero,20(r4)
  80d00c:	f800283a 	ret
  80d010:	323ff92e 	bgeu	r6,r8,80cff8 <rshift+0x78>
  80d014:	30800017 	ldw	r2,0(r6)
  80d018:	31800104 	addi	r6,r6,4
  80d01c:	38800015 	stw	r2,0(r7)
  80d020:	39c00104 	addi	r7,r7,4
  80d024:	003ffa06 	br	80d010 <rshift+0x90>
  80d028:	39c00104 	addi	r7,r7,4
  80d02c:	003ff206 	br	80cff8 <rshift+0x78>

0080d030 <__gethex>:
  80d030:	defff304 	addi	sp,sp,-52
  80d034:	dd400815 	stw	r21,32(sp)
  80d038:	dd000715 	stw	r20,28(sp)
  80d03c:	dcc00615 	stw	r19,24(sp)
  80d040:	dc400415 	stw	r17,16(sp)
  80d044:	dfc00c15 	stw	ra,48(sp)
  80d048:	df000b15 	stw	fp,44(sp)
  80d04c:	ddc00a15 	stw	r23,40(sp)
  80d050:	dd800915 	stw	r22,36(sp)
  80d054:	dc800515 	stw	r18,20(sp)
  80d058:	dc000315 	stw	r16,12(sp)
  80d05c:	044020b4 	movhi	r17,130
  80d060:	8c635e04 	addi	r17,r17,-29320
  80d064:	88800c03 	ldbu	r2,48(r17)
  80d068:	202b883a 	mov	r21,r4
  80d06c:	2827883a 	mov	r19,r5
  80d070:	3029883a 	mov	r20,r6
  80d074:	d9c00115 	stw	r7,4(sp)
  80d078:	10006e26 	beq	r2,zero,80d234 <__gethex+0x204>
  80d07c:	99800017 	ldw	r6,0(r19)
  80d080:	00800c04 	movi	r2,48
  80d084:	31000083 	ldbu	r4,2(r6)
  80d088:	30c00084 	addi	r3,r6,2
  80d08c:	20806f1e 	bne	r4,r2,80d24c <__gethex+0x21c>
  80d090:	200b883a 	mov	r5,r4
  80d094:	3007883a 	mov	r3,r6
  80d098:	188000c3 	ldbu	r2,3(r3)
  80d09c:	18c00044 	addi	r3,r3,1
  80d0a0:	1009883a 	mov	r4,r2
  80d0a4:	117ffc26 	beq	r2,r5,80d098 <__gethex+0x68>
  80d0a8:	1997c83a 	sub	r11,r3,r6
  80d0ac:	19400084 	addi	r5,r3,2
  80d0b0:	2445883a 	add	r2,r4,r17
  80d0b4:	10c00003 	ldbu	r3,0(r2)
  80d0b8:	18002d26 	beq	r3,zero,80d170 <__gethex+0x140>
  80d0bc:	29000003 	ldbu	r4,0(r5)
  80d0c0:	2825883a 	mov	r18,r5
  80d0c4:	000d883a 	mov	r6,zero
  80d0c8:	0013883a 	mov	r9,zero
  80d0cc:	21003fcc 	andi	r4,r4,255
  80d0d0:	2445883a 	add	r2,r4,r17
  80d0d4:	10c00003 	ldbu	r3,0(r2)
  80d0d8:	18000526 	beq	r3,zero,80d0f0 <__gethex+0xc0>
  80d0dc:	29400044 	addi	r5,r5,1
  80d0e0:	29000003 	ldbu	r4,0(r5)
  80d0e4:	2445883a 	add	r2,r4,r17
  80d0e8:	10c00003 	ldbu	r3,0(r2)
  80d0ec:	183ffb1e 	bne	r3,zero,80d0dc <__gethex+0xac>
  80d0f0:	00800b84 	movi	r2,46
  80d0f4:	20805826 	beq	r4,r2,80d258 <__gethex+0x228>
  80d0f8:	30007a26 	beq	r6,zero,80d2e4 <__gethex+0x2b4>
  80d0fc:	2985c83a 	sub	r2,r5,r6
  80d100:	1085883a 	add	r2,r2,r2
  80d104:	1085883a 	add	r2,r2,r2
  80d108:	00adc83a 	sub	r22,zero,r2
  80d10c:	2821883a 	mov	r16,r5
  80d110:	80c00003 	ldbu	r3,0(r16)
  80d114:	00801404 	movi	r2,80
  80d118:	18801e26 	beq	r3,r2,80d194 <__gethex+0x164>
  80d11c:	00801c04 	movi	r2,112
  80d120:	18801c26 	beq	r3,r2,80d194 <__gethex+0x164>
  80d124:	800d883a 	mov	r6,r16
  80d128:	4805003a 	cmpeq	r2,r9,zero
  80d12c:	99800015 	stw	r6,0(r19)
  80d130:	1000861e 	bne	r2,zero,80d34c <__gethex+0x31c>
  80d134:	58003d26 	beq	r11,zero,80d22c <__gethex+0x1fc>
  80d138:	0025883a 	mov	r18,zero
  80d13c:	9005883a 	mov	r2,r18
  80d140:	dfc00c17 	ldw	ra,48(sp)
  80d144:	df000b17 	ldw	fp,44(sp)
  80d148:	ddc00a17 	ldw	r23,40(sp)
  80d14c:	dd800917 	ldw	r22,36(sp)
  80d150:	dd400817 	ldw	r21,32(sp)
  80d154:	dd000717 	ldw	r20,28(sp)
  80d158:	dcc00617 	ldw	r19,24(sp)
  80d15c:	dc800517 	ldw	r18,20(sp)
  80d160:	dc400417 	ldw	r17,16(sp)
  80d164:	dc000317 	ldw	r16,12(sp)
  80d168:	dec00d04 	addi	sp,sp,52
  80d16c:	f800283a 	ret
  80d170:	00800b84 	movi	r2,46
  80d174:	20804a26 	beq	r4,r2,80d2a0 <__gethex+0x270>
  80d178:	2821883a 	mov	r16,r5
  80d17c:	80c00003 	ldbu	r3,0(r16)
  80d180:	00801404 	movi	r2,80
  80d184:	2825883a 	mov	r18,r5
  80d188:	02400044 	movi	r9,1
  80d18c:	002d883a 	mov	r22,zero
  80d190:	18bfe21e 	bne	r3,r2,80d11c <__gethex+0xec>
  80d194:	80c00043 	ldbu	r3,1(r16)
  80d198:	00800ac4 	movi	r2,43
  80d19c:	81000044 	addi	r4,r16,1
  80d1a0:	18804a26 	beq	r3,r2,80d2cc <__gethex+0x29c>
  80d1a4:	00800b44 	movi	r2,45
  80d1a8:	18804c26 	beq	r3,r2,80d2dc <__gethex+0x2ac>
  80d1ac:	0015883a 	mov	r10,zero
  80d1b0:	1c45883a 	add	r2,r3,r17
  80d1b4:	10800003 	ldbu	r2,0(r2)
  80d1b8:	103fda26 	beq	r2,zero,80d124 <__gethex+0xf4>
  80d1bc:	02000644 	movi	r8,25
  80d1c0:	40bfd816 	blt	r8,r2,80d124 <__gethex+0xf4>
  80d1c4:	20c00043 	ldbu	r3,1(r4)
  80d1c8:	11fffc04 	addi	r7,r2,-16
  80d1cc:	008020b4 	movhi	r2,130
  80d1d0:	10a35e04 	addi	r2,r2,-29320
  80d1d4:	1887883a 	add	r3,r3,r2
  80d1d8:	18800003 	ldbu	r2,0(r3)
  80d1dc:	21800044 	addi	r6,r4,1
  80d1e0:	10000d26 	beq	r2,zero,80d218 <__gethex+0x1e8>
  80d1e4:	100b883a 	mov	r5,r2
  80d1e8:	4080020e 	bge	r8,r2,80d1f4 <__gethex+0x1c4>
  80d1ec:	00000a06 	br	80d218 <__gethex+0x1e8>
  80d1f0:	41000916 	blt	r8,r4,80d218 <__gethex+0x1e8>
  80d1f4:	31800044 	addi	r6,r6,1
  80d1f8:	30800003 	ldbu	r2,0(r6)
  80d1fc:	38c002a4 	muli	r3,r7,10
  80d200:	1445883a 	add	r2,r2,r17
  80d204:	11000003 	ldbu	r4,0(r2)
  80d208:	1947883a 	add	r3,r3,r5
  80d20c:	19fffc04 	addi	r7,r3,-16
  80d210:	200b883a 	mov	r5,r4
  80d214:	203ff61e 	bne	r4,zero,80d1f0 <__gethex+0x1c0>
  80d218:	5005003a 	cmpeq	r2,r10,zero
  80d21c:	1000011e 	bne	r2,zero,80d224 <__gethex+0x1f4>
  80d220:	01cfc83a 	sub	r7,zero,r7
  80d224:	b1ed883a 	add	r22,r22,r7
  80d228:	003fbf06 	br	80d128 <__gethex+0xf8>
  80d22c:	04800184 	movi	r18,6
  80d230:	003fc206 	br	80d13c <__gethex+0x10c>
  80d234:	080cf180 	call	80cf18 <__hexdig_init>
  80d238:	99800017 	ldw	r6,0(r19)
  80d23c:	00800c04 	movi	r2,48
  80d240:	31000083 	ldbu	r4,2(r6)
  80d244:	30c00084 	addi	r3,r6,2
  80d248:	20bf9126 	beq	r4,r2,80d090 <__gethex+0x60>
  80d24c:	180b883a 	mov	r5,r3
  80d250:	0017883a 	mov	r11,zero
  80d254:	003f9606 	br	80d0b0 <__gethex+0x80>
  80d258:	303fa81e 	bne	r6,zero,80d0fc <__gethex+0xcc>
  80d25c:	29400044 	addi	r5,r5,1
  80d260:	28800003 	ldbu	r2,0(r5)
  80d264:	1445883a 	add	r2,r2,r17
  80d268:	10c00003 	ldbu	r3,0(r2)
  80d26c:	1800ad26 	beq	r3,zero,80d524 <__gethex+0x4f4>
  80d270:	2809883a 	mov	r4,r5
  80d274:	21000044 	addi	r4,r4,1
  80d278:	20800003 	ldbu	r2,0(r4)
  80d27c:	1445883a 	add	r2,r2,r17
  80d280:	10c00003 	ldbu	r3,0(r2)
  80d284:	183ffb1e 	bne	r3,zero,80d274 <__gethex+0x244>
  80d288:	2145c83a 	sub	r2,r4,r5
  80d28c:	1085883a 	add	r2,r2,r2
  80d290:	1085883a 	add	r2,r2,r2
  80d294:	00adc83a 	sub	r22,zero,r2
  80d298:	200b883a 	mov	r5,r4
  80d29c:	003f9b06 	br	80d10c <__gethex+0xdc>
  80d2a0:	29000043 	ldbu	r4,1(r5)
  80d2a4:	008020b4 	movhi	r2,130
  80d2a8:	10a35e04 	addi	r2,r2,-29320
  80d2ac:	2c000044 	addi	r16,r5,1
  80d2b0:	2085883a 	add	r2,r4,r2
  80d2b4:	10c00003 	ldbu	r3,0(r2)
  80d2b8:	18000d1e 	bne	r3,zero,80d2f0 <__gethex+0x2c0>
  80d2bc:	2825883a 	mov	r18,r5
  80d2c0:	02400044 	movi	r9,1
  80d2c4:	002d883a 	mov	r22,zero
  80d2c8:	003f9106 	br	80d110 <__gethex+0xe0>
  80d2cc:	0015883a 	mov	r10,zero
  80d2d0:	21000044 	addi	r4,r4,1
  80d2d4:	20c00003 	ldbu	r3,0(r4)
  80d2d8:	003fb506 	br	80d1b0 <__gethex+0x180>
  80d2dc:	02800044 	movi	r10,1
  80d2e0:	003ffb06 	br	80d2d0 <__gethex+0x2a0>
  80d2e4:	2821883a 	mov	r16,r5
  80d2e8:	002d883a 	mov	r22,zero
  80d2ec:	003f8806 	br	80d110 <__gethex+0xe0>
  80d2f0:	00800c04 	movi	r2,48
  80d2f4:	20800e1e 	bne	r4,r2,80d330 <__gethex+0x300>
  80d2f8:	2007883a 	mov	r3,r4
  80d2fc:	800b883a 	mov	r5,r16
  80d300:	29400044 	addi	r5,r5,1
  80d304:	29000003 	ldbu	r4,0(r5)
  80d308:	20803fcc 	andi	r2,r4,255
  80d30c:	10fffc26 	beq	r2,r3,80d300 <__gethex+0x2d0>
  80d310:	1445883a 	add	r2,r2,r17
  80d314:	10c00003 	ldbu	r3,0(r2)
  80d318:	1800071e 	bne	r3,zero,80d338 <__gethex+0x308>
  80d31c:	02c00044 	movi	r11,1
  80d320:	800d883a 	mov	r6,r16
  80d324:	2825883a 	mov	r18,r5
  80d328:	5813883a 	mov	r9,r11
  80d32c:	003f6706 	br	80d0cc <__gethex+0x9c>
  80d330:	81000003 	ldbu	r4,0(r16)
  80d334:	800b883a 	mov	r5,r16
  80d338:	800d883a 	mov	r6,r16
  80d33c:	2825883a 	mov	r18,r5
  80d340:	02c00044 	movi	r11,1
  80d344:	0013883a 	mov	r9,zero
  80d348:	003f6006 	br	80d0cc <__gethex+0x9c>
  80d34c:	8485c83a 	sub	r2,r16,r18
  80d350:	10bfffc4 	addi	r2,r2,-1
  80d354:	00c001c4 	movi	r3,7
  80d358:	1880700e 	bge	r3,r2,80d51c <__gethex+0x4ec>
  80d35c:	000b883a 	mov	r5,zero
  80d360:	1005d07a 	srai	r2,r2,1
  80d364:	29400044 	addi	r5,r5,1
  80d368:	18bffd16 	blt	r3,r2,80d360 <__gethex+0x330>
  80d36c:	a809883a 	mov	r4,r21
  80d370:	0809d9c0 	call	809d9c <_Balloc>
  80d374:	1027883a 	mov	r19,r2
  80d378:	10800504 	addi	r2,r2,20
  80d37c:	d8800215 	stw	r2,8(sp)
  80d380:	9400522e 	bgeu	r18,r16,80d4cc <__gethex+0x49c>
  80d384:	da000217 	ldw	r8,8(sp)
  80d388:	800b883a 	mov	r5,r16
  80d38c:	000f883a 	mov	r7,zero
  80d390:	0009883a 	mov	r4,zero
  80d394:	02400b84 	movi	r9,46
  80d398:	02800804 	movi	r10,32
  80d39c:	297fffc4 	addi	r5,r5,-1
  80d3a0:	28c00003 	ldbu	r3,0(r5)
  80d3a4:	1a400826 	beq	r3,r9,80d3c8 <__gethex+0x398>
  80d3a8:	380d883a 	mov	r6,r7
  80d3ac:	3a802726 	beq	r7,r10,80d44c <__gethex+0x41c>
  80d3b0:	39c00104 	addi	r7,r7,4
  80d3b4:	1c47883a 	add	r3,r3,r17
  80d3b8:	18800003 	ldbu	r2,0(r3)
  80d3bc:	108003cc 	andi	r2,r2,15
  80d3c0:	1184983a 	sll	r2,r2,r6
  80d3c4:	2088b03a 	or	r4,r4,r2
  80d3c8:	917ff436 	bltu	r18,r5,80d39c <__gethex+0x36c>
  80d3cc:	d8c00217 	ldw	r3,8(sp)
  80d3d0:	40800104 	addi	r2,r8,4
  80d3d4:	41000015 	stw	r4,0(r8)
  80d3d8:	10c5c83a 	sub	r2,r2,r3
  80d3dc:	1021d0ba 	srai	r16,r2,2
  80d3e0:	9c000415 	stw	r16,16(r19)
  80d3e4:	08098440 	call	809844 <__hi0bits>
  80d3e8:	8006917a 	slli	r3,r16,5
  80d3ec:	a5c00017 	ldw	r23,0(r20)
  80d3f0:	1885c83a 	sub	r2,r3,r2
  80d3f4:	b8801c16 	blt	r23,r2,80d468 <__gethex+0x438>
  80d3f8:	15c00a16 	blt	r2,r23,80d424 <__gethex+0x3f4>
  80d3fc:	0039883a 	mov	fp,zero
  80d400:	a0800217 	ldw	r2,8(r20)
  80d404:	1580340e 	bge	r2,r22,80d4d8 <__gethex+0x4a8>
  80d408:	a809883a 	mov	r4,r21
  80d40c:	980b883a 	mov	r5,r19
  80d410:	080981c0 	call	80981c <_Bfree>
  80d414:	d8c00d17 	ldw	r3,52(sp)
  80d418:	048028c4 	movi	r18,163
  80d41c:	18000015 	stw	zero,0(r3)
  80d420:	003f4606 	br	80d13c <__gethex+0x10c>
  80d424:	b8a1c83a 	sub	r16,r23,r2
  80d428:	980b883a 	mov	r5,r19
  80d42c:	a809883a 	mov	r4,r21
  80d430:	800d883a 	mov	r6,r16
  80d434:	080a1600 	call	80a160 <__lshift>
  80d438:	1027883a 	mov	r19,r2
  80d43c:	b42dc83a 	sub	r22,r22,r16
  80d440:	10800504 	addi	r2,r2,20
  80d444:	d8800215 	stw	r2,8(sp)
  80d448:	003fec06 	br	80d3fc <__gethex+0x3cc>
  80d44c:	41000015 	stw	r4,0(r8)
  80d450:	28c00003 	ldbu	r3,0(r5)
  80d454:	01c00104 	movi	r7,4
  80d458:	000d883a 	mov	r6,zero
  80d45c:	41d1883a 	add	r8,r8,r7
  80d460:	0009883a 	mov	r4,zero
  80d464:	003fd306 	br	80d3b4 <__gethex+0x384>
  80d468:	15e1c83a 	sub	r16,r2,r23
  80d46c:	9809883a 	mov	r4,r19
  80d470:	800b883a 	mov	r5,r16
  80d474:	0809d140 	call	809d14 <__any_on>
  80d478:	1000061e 	bne	r2,zero,80d494 <__gethex+0x464>
  80d47c:	0039883a 	mov	fp,zero
  80d480:	9809883a 	mov	r4,r19
  80d484:	800b883a 	mov	r5,r16
  80d488:	080cf800 	call	80cf80 <rshift>
  80d48c:	b42d883a 	add	r22,r22,r16
  80d490:	003fdb06 	br	80d400 <__gethex+0x3d0>
  80d494:	817fffc4 	addi	r5,r16,-1
  80d498:	2805d17a 	srai	r2,r5,5
  80d49c:	d8c00217 	ldw	r3,8(sp)
  80d4a0:	290007cc 	andi	r4,r5,31
  80d4a4:	1085883a 	add	r2,r2,r2
  80d4a8:	1085883a 	add	r2,r2,r2
  80d4ac:	01800044 	movi	r6,1
  80d4b0:	10c5883a 	add	r2,r2,r3
  80d4b4:	3108983a 	sll	r4,r6,r4
  80d4b8:	10c00017 	ldw	r3,0(r2)
  80d4bc:	20c8703a 	and	r4,r4,r3
  80d4c0:	20001a1e 	bne	r4,zero,80d52c <__gethex+0x4fc>
  80d4c4:	3039883a 	mov	fp,r6
  80d4c8:	003fed06 	br	80d480 <__gethex+0x450>
  80d4cc:	1011883a 	mov	r8,r2
  80d4d0:	0009883a 	mov	r4,zero
  80d4d4:	003fbd06 	br	80d3cc <__gethex+0x39c>
  80d4d8:	a1000117 	ldw	r4,4(r20)
  80d4dc:	b1001a16 	blt	r22,r4,80d548 <__gethex+0x518>
  80d4e0:	04800044 	movi	r18,1
  80d4e4:	e0000826 	beq	fp,zero,80d508 <__gethex+0x4d8>
  80d4e8:	a1000317 	ldw	r4,12(r20)
  80d4ec:	00800084 	movi	r2,2
  80d4f0:	20809426 	beq	r4,r2,80d744 <__gethex+0x714>
  80d4f4:	008000c4 	movi	r2,3
  80d4f8:	20805826 	beq	r4,r2,80d65c <__gethex+0x62c>
  80d4fc:	00800044 	movi	r2,1
  80d500:	20803f26 	beq	r4,r2,80d600 <__gethex+0x5d0>
  80d504:	94800414 	ori	r18,r18,16
  80d508:	d8800d17 	ldw	r2,52(sp)
  80d50c:	d8c00117 	ldw	r3,4(sp)
  80d510:	14c00015 	stw	r19,0(r2)
  80d514:	1d800015 	stw	r22,0(r3)
  80d518:	003f0806 	br	80d13c <__gethex+0x10c>
  80d51c:	000b883a 	mov	r5,zero
  80d520:	003f9206 	br	80d36c <__gethex+0x33c>
  80d524:	002d883a 	mov	r22,zero
  80d528:	003ef806 	br	80d10c <__gethex+0xdc>
  80d52c:	3140160e 	bge	r6,r5,80d588 <__gethex+0x558>
  80d530:	9809883a 	mov	r4,r19
  80d534:	817fff84 	addi	r5,r16,-2
  80d538:	0809d140 	call	809d14 <__any_on>
  80d53c:	10001226 	beq	r2,zero,80d588 <__gethex+0x558>
  80d540:	070000c4 	movi	fp,3
  80d544:	003fce06 	br	80d480 <__gethex+0x450>
  80d548:	25a3c83a 	sub	r17,r4,r22
  80d54c:	8dc01016 	blt	r17,r23,80d590 <__gethex+0x560>
  80d550:	a0c00317 	ldw	r3,12(r20)
  80d554:	00800084 	movi	r2,2
  80d558:	18809326 	beq	r3,r2,80d7a8 <__gethex+0x778>
  80d55c:	008000c4 	movi	r2,3
  80d560:	18808e26 	beq	r3,r2,80d79c <__gethex+0x76c>
  80d564:	00800044 	movi	r2,1
  80d568:	18807b26 	beq	r3,r2,80d758 <__gethex+0x728>
  80d56c:	a809883a 	mov	r4,r21
  80d570:	980b883a 	mov	r5,r19
  80d574:	080981c0 	call	80981c <_Bfree>
  80d578:	d8c00d17 	ldw	r3,52(sp)
  80d57c:	04801404 	movi	r18,80
  80d580:	18000015 	stw	zero,0(r3)
  80d584:	003eed06 	br	80d13c <__gethex+0x10c>
  80d588:	07000084 	movi	fp,2
  80d58c:	003fbc06 	br	80d480 <__gethex+0x450>
  80d590:	8c3fffc4 	addi	r16,r17,-1
  80d594:	e0001426 	beq	fp,zero,80d5e8 <__gethex+0x5b8>
  80d598:	07000044 	movi	fp,1
  80d59c:	8005d17a 	srai	r2,r16,5
  80d5a0:	d8c00217 	ldw	r3,8(sp)
  80d5a4:	814007cc 	andi	r5,r16,31
  80d5a8:	1085883a 	add	r2,r2,r2
  80d5ac:	1085883a 	add	r2,r2,r2
  80d5b0:	10c5883a 	add	r2,r2,r3
  80d5b4:	00c00044 	movi	r3,1
  80d5b8:	1946983a 	sll	r3,r3,r5
  80d5bc:	11000017 	ldw	r4,0(r2)
  80d5c0:	1906703a 	and	r3,r3,r4
  80d5c4:	18000126 	beq	r3,zero,80d5cc <__gethex+0x59c>
  80d5c8:	e7000094 	ori	fp,fp,2
  80d5cc:	880b883a 	mov	r5,r17
  80d5d0:	9809883a 	mov	r4,r19
  80d5d4:	080cf800 	call	80cf80 <rshift>
  80d5d8:	a5800117 	ldw	r22,4(r20)
  80d5dc:	bc6fc83a 	sub	r23,r23,r17
  80d5e0:	04800084 	movi	r18,2
  80d5e4:	003fbf06 	br	80d4e4 <__gethex+0x4b4>
  80d5e8:	043fec0e 	bge	zero,r16,80d59c <__gethex+0x56c>
  80d5ec:	9809883a 	mov	r4,r19
  80d5f0:	800b883a 	mov	r5,r16
  80d5f4:	0809d140 	call	809d14 <__any_on>
  80d5f8:	1039883a 	mov	fp,r2
  80d5fc:	003fe706 	br	80d59c <__gethex+0x56c>
  80d600:	e080008c 	andi	r2,fp,2
  80d604:	103fbf26 	beq	r2,zero,80d504 <__gethex+0x4d4>
  80d608:	d8c00217 	ldw	r3,8(sp)
  80d60c:	18800017 	ldw	r2,0(r3)
  80d610:	e084b03a 	or	r2,fp,r2
  80d614:	1104703a 	and	r2,r2,r4
  80d618:	103fba26 	beq	r2,zero,80d504 <__gethex+0x4d4>
  80d61c:	9c000417 	ldw	r16,16(r19)
  80d620:	d8c00217 	ldw	r3,8(sp)
  80d624:	017fffc4 	movi	r5,-1
  80d628:	8405883a 	add	r2,r16,r16
  80d62c:	10b9883a 	add	fp,r2,r2
  80d630:	1f09883a 	add	r4,r3,fp
  80d634:	dc000015 	stw	r16,0(sp)
  80d638:	00000306 	br	80d648 <__gethex+0x618>
  80d63c:	18000015 	stw	zero,0(r3)
  80d640:	18c00104 	addi	r3,r3,4
  80d644:	1900082e 	bgeu	r3,r4,80d668 <__gethex+0x638>
  80d648:	18800017 	ldw	r2,0(r3)
  80d64c:	117ffb26 	beq	r2,r5,80d63c <__gethex+0x60c>
  80d650:	10800044 	addi	r2,r2,1
  80d654:	18800015 	stw	r2,0(r3)
  80d658:	00001f06 	br	80d6d8 <__gethex+0x6a8>
  80d65c:	d8800e17 	ldw	r2,56(sp)
  80d660:	103fa826 	beq	r2,zero,80d504 <__gethex+0x4d4>
  80d664:	003fed06 	br	80d61c <__gethex+0x5ec>
  80d668:	98800217 	ldw	r2,8(r19)
  80d66c:	80801316 	blt	r16,r2,80d6bc <__gethex+0x68c>
  80d670:	99400117 	ldw	r5,4(r19)
  80d674:	a809883a 	mov	r4,r21
  80d678:	29400044 	addi	r5,r5,1
  80d67c:	0809d9c0 	call	809d9c <_Balloc>
  80d680:	99800417 	ldw	r6,16(r19)
  80d684:	99400304 	addi	r5,r19,12
  80d688:	11000304 	addi	r4,r2,12
  80d68c:	318d883a 	add	r6,r6,r6
  80d690:	318d883a 	add	r6,r6,r6
  80d694:	31800204 	addi	r6,r6,8
  80d698:	1023883a 	mov	r17,r2
  80d69c:	08031c80 	call	8031c8 <memcpy>
  80d6a0:	980b883a 	mov	r5,r19
  80d6a4:	a809883a 	mov	r4,r21
  80d6a8:	080981c0 	call	80981c <_Bfree>
  80d6ac:	8c000417 	ldw	r16,16(r17)
  80d6b0:	88800504 	addi	r2,r17,20
  80d6b4:	8827883a 	mov	r19,r17
  80d6b8:	d8800215 	stw	r2,8(sp)
  80d6bc:	8405883a 	add	r2,r16,r16
  80d6c0:	1085883a 	add	r2,r2,r2
  80d6c4:	14c5883a 	add	r2,r2,r19
  80d6c8:	84000044 	addi	r16,r16,1
  80d6cc:	00c00044 	movi	r3,1
  80d6d0:	10c00515 	stw	r3,20(r2)
  80d6d4:	9c000415 	stw	r16,16(r19)
  80d6d8:	00800084 	movi	r2,2
  80d6dc:	90801426 	beq	r18,r2,80d730 <__gethex+0x700>
  80d6e0:	d8800017 	ldw	r2,0(sp)
  80d6e4:	14000b16 	blt	r2,r16,80d714 <__gethex+0x6e4>
  80d6e8:	bc0007cc 	andi	r16,r23,31
  80d6ec:	8000021e 	bne	r16,zero,80d6f8 <__gethex+0x6c8>
  80d6f0:	94800814 	ori	r18,r18,32
  80d6f4:	003f8406 	br	80d508 <__gethex+0x4d8>
  80d6f8:	d8c00217 	ldw	r3,8(sp)
  80d6fc:	1f05883a 	add	r2,r3,fp
  80d700:	113fff17 	ldw	r4,-4(r2)
  80d704:	08098440 	call	809844 <__hi0bits>
  80d708:	00c00804 	movi	r3,32
  80d70c:	1c07c83a 	sub	r3,r3,r16
  80d710:	10fff70e 	bge	r2,r3,80d6f0 <__gethex+0x6c0>
  80d714:	9809883a 	mov	r4,r19
  80d718:	01400044 	movi	r5,1
  80d71c:	080cf800 	call	80cf80 <rshift>
  80d720:	a0800217 	ldw	r2,8(r20)
  80d724:	b5800044 	addi	r22,r22,1
  80d728:	15bf3716 	blt	r2,r22,80d408 <__gethex+0x3d8>
  80d72c:	003ff006 	br	80d6f0 <__gethex+0x6c0>
  80d730:	a0800017 	ldw	r2,0(r20)
  80d734:	10bfffc4 	addi	r2,r2,-1
  80d738:	b8801e26 	beq	r23,r2,80d7b4 <__gethex+0x784>
  80d73c:	04800884 	movi	r18,34
  80d740:	003f7106 	br	80d508 <__gethex+0x4d8>
  80d744:	d8c00e17 	ldw	r3,56(sp)
  80d748:	00800044 	movi	r2,1
  80d74c:	10c5c83a 	sub	r2,r2,r3
  80d750:	103f6c26 	beq	r2,zero,80d504 <__gethex+0x4d4>
  80d754:	003fb106 	br	80d61c <__gethex+0x5ec>
  80d758:	bc7f841e 	bne	r23,r17,80d56c <__gethex+0x53c>
  80d75c:	1dc0050e 	bge	r3,r23,80d774 <__gethex+0x744>
  80d760:	b8cbc83a 	sub	r5,r23,r3
  80d764:	9809883a 	mov	r4,r19
  80d768:	0809d140 	call	809d14 <__any_on>
  80d76c:	103f7f26 	beq	r2,zero,80d56c <__gethex+0x53c>
  80d770:	a1000117 	ldw	r4,4(r20)
  80d774:	d8800117 	ldw	r2,4(sp)
  80d778:	d8c00217 	ldw	r3,8(sp)
  80d77c:	04000044 	movi	r16,1
  80d780:	11000015 	stw	r4,0(r2)
  80d784:	d8800d17 	ldw	r2,52(sp)
  80d788:	04801884 	movi	r18,98
  80d78c:	1c000015 	stw	r16,0(r3)
  80d790:	14c00015 	stw	r19,0(r2)
  80d794:	9c000415 	stw	r16,16(r19)
  80d798:	003e6806 	br	80d13c <__gethex+0x10c>
  80d79c:	d8c00e17 	ldw	r3,56(sp)
  80d7a0:	183f7226 	beq	r3,zero,80d56c <__gethex+0x53c>
  80d7a4:	003ff306 	br	80d774 <__gethex+0x744>
  80d7a8:	d8800e17 	ldw	r2,56(sp)
  80d7ac:	103ff126 	beq	r2,zero,80d774 <__gethex+0x744>
  80d7b0:	003f6e06 	br	80d56c <__gethex+0x53c>
  80d7b4:	b805d17a 	srai	r2,r23,5
  80d7b8:	d8c00217 	ldw	r3,8(sp)
  80d7bc:	b94007cc 	andi	r5,r23,31
  80d7c0:	1085883a 	add	r2,r2,r2
  80d7c4:	1085883a 	add	r2,r2,r2
  80d7c8:	10c5883a 	add	r2,r2,r3
  80d7cc:	00c00044 	movi	r3,1
  80d7d0:	1946983a 	sll	r3,r3,r5
  80d7d4:	11000017 	ldw	r4,0(r2)
  80d7d8:	1906703a 	and	r3,r3,r4
  80d7dc:	183fd726 	beq	r3,zero,80d73c <__gethex+0x70c>
  80d7e0:	04800844 	movi	r18,33
  80d7e4:	003f4806 	br	80d508 <__gethex+0x4d8>

0080d7e8 <L_shift>:
  80d7e8:	00800204 	movi	r2,8
  80d7ec:	1185c83a 	sub	r2,r2,r6
  80d7f0:	1085883a 	add	r2,r2,r2
  80d7f4:	21c00017 	ldw	r7,0(r4)
  80d7f8:	1093883a 	add	r9,r2,r2
  80d7fc:	00800804 	movi	r2,32
  80d800:	200d883a 	mov	r6,r4
  80d804:	1251c83a 	sub	r8,r2,r9
  80d808:	31800104 	addi	r6,r6,4
  80d80c:	3805883a 	mov	r2,r7
  80d810:	31c00017 	ldw	r7,0(r6)
  80d814:	3a08983a 	sll	r4,r7,r8
  80d818:	3a46d83a 	srl	r3,r7,r9
  80d81c:	1104b03a 	or	r2,r2,r4
  80d820:	180f883a 	mov	r7,r3
  80d824:	30bfff15 	stw	r2,-4(r6)
  80d828:	30c00015 	stw	r3,0(r6)
  80d82c:	317ff636 	bltu	r6,r5,80d808 <L_shift+0x20>
  80d830:	f800283a 	ret

0080d834 <__hexnan>:
  80d834:	defff404 	addi	sp,sp,-48
  80d838:	dd800815 	stw	r22,32(sp)
  80d83c:	058020b4 	movhi	r22,130
  80d840:	b5a35e04 	addi	r22,r22,-29320
  80d844:	b0800c03 	ldbu	r2,48(r22)
  80d848:	dcc00515 	stw	r19,20(sp)
  80d84c:	dc000215 	stw	r16,8(sp)
  80d850:	dfc00b15 	stw	ra,44(sp)
  80d854:	df000a15 	stw	fp,40(sp)
  80d858:	ddc00915 	stw	r23,36(sp)
  80d85c:	dd400715 	stw	r21,28(sp)
  80d860:	dd000615 	stw	r20,24(sp)
  80d864:	dc800415 	stw	r18,16(sp)
  80d868:	dc400315 	stw	r17,12(sp)
  80d86c:	d9000115 	stw	r4,4(sp)
  80d870:	2821883a 	mov	r16,r5
  80d874:	3027883a 	mov	r19,r6
  80d878:	10007426 	beq	r2,zero,80da4c <__hexnan+0x218>
  80d87c:	80c00017 	ldw	r3,0(r16)
  80d880:	1805d17a 	srai	r2,r3,5
  80d884:	18c007cc 	andi	r3,r3,31
  80d888:	1839003a 	cmpeq	fp,r3,zero
  80d88c:	1085883a 	add	r2,r2,r2
  80d890:	1085883a 	add	r2,r2,r2
  80d894:	d8c00015 	stw	r3,0(sp)
  80d898:	14c5883a 	add	r2,r2,r19
  80d89c:	e000011e 	bne	fp,zero,80d8a4 <__hexnan+0x70>
  80d8a0:	10800104 	addi	r2,r2,4
  80d8a4:	d8c00117 	ldw	r3,4(sp)
  80d8a8:	153fff04 	addi	r20,r2,-4
  80d8ac:	a021883a 	mov	r16,r20
  80d8b0:	1c400017 	ldw	r17,0(r3)
  80d8b4:	a02b883a 	mov	r21,r20
  80d8b8:	0025883a 	mov	r18,zero
  80d8bc:	002f883a 	mov	r23,zero
  80d8c0:	000d883a 	mov	r6,zero
  80d8c4:	103fff15 	stw	zero,-4(r2)
  80d8c8:	8c400044 	addi	r17,r17,1
  80d8cc:	89000003 	ldbu	r4,0(r17)
  80d8d0:	20000e26 	beq	r4,zero,80d90c <__hexnan+0xd8>
  80d8d4:	2585883a 	add	r2,r4,r22
  80d8d8:	10c00003 	ldbu	r3,0(r2)
  80d8dc:	18002e1e 	bne	r3,zero,80d998 <__hexnan+0x164>
  80d8e0:	00800804 	movi	r2,32
  80d8e4:	11005536 	bltu	r2,r4,80da3c <__hexnan+0x208>
  80d8e8:	bcbff70e 	bge	r23,r18,80d8c8 <__hexnan+0x94>
  80d8ec:	8540022e 	bgeu	r16,r21,80d8f8 <__hexnan+0xc4>
  80d8f0:	008001c4 	movi	r2,7
  80d8f4:	11803c0e 	bge	r2,r6,80d9e8 <__hexnan+0x1b4>
  80d8f8:	9c003536 	bltu	r19,r16,80d9d0 <__hexnan+0x19c>
  80d8fc:	8c400044 	addi	r17,r17,1
  80d900:	89000003 	ldbu	r4,0(r17)
  80d904:	01800204 	movi	r6,8
  80d908:	203ff21e 	bne	r4,zero,80d8d4 <__hexnan+0xa0>
  80d90c:	90004d26 	beq	r18,zero,80da44 <__hexnan+0x210>
  80d910:	85404336 	bltu	r16,r21,80da20 <__hexnan+0x1ec>
  80d914:	9c00382e 	bgeu	r19,r16,80d9f8 <__hexnan+0x1c4>
  80d918:	9807883a 	mov	r3,r19
  80d91c:	80800017 	ldw	r2,0(r16)
  80d920:	84000104 	addi	r16,r16,4
  80d924:	18800015 	stw	r2,0(r3)
  80d928:	18c00104 	addi	r3,r3,4
  80d92c:	a43ffb2e 	bgeu	r20,r16,80d91c <__hexnan+0xe8>
  80d930:	18000015 	stw	zero,0(r3)
  80d934:	18c00104 	addi	r3,r3,4
  80d938:	a0fffd2e 	bgeu	r20,r3,80d930 <__hexnan+0xfc>
  80d93c:	a0800017 	ldw	r2,0(r20)
  80d940:	1000071e 	bne	r2,zero,80d960 <__hexnan+0x12c>
  80d944:	9d004326 	beq	r19,r20,80da54 <__hexnan+0x220>
  80d948:	a007883a 	mov	r3,r20
  80d94c:	00000106 	br	80d954 <__hexnan+0x120>
  80d950:	98c04026 	beq	r19,r3,80da54 <__hexnan+0x220>
  80d954:	18ffff04 	addi	r3,r3,-4
  80d958:	18800017 	ldw	r2,0(r3)
  80d95c:	103ffc26 	beq	r2,zero,80d950 <__hexnan+0x11c>
  80d960:	00c00144 	movi	r3,5
  80d964:	1805883a 	mov	r2,r3
  80d968:	dfc00b17 	ldw	ra,44(sp)
  80d96c:	df000a17 	ldw	fp,40(sp)
  80d970:	ddc00917 	ldw	r23,36(sp)
  80d974:	dd800817 	ldw	r22,32(sp)
  80d978:	dd400717 	ldw	r21,28(sp)
  80d97c:	dd000617 	ldw	r20,24(sp)
  80d980:	dcc00517 	ldw	r19,20(sp)
  80d984:	dc800417 	ldw	r18,16(sp)
  80d988:	dc400317 	ldw	r17,12(sp)
  80d98c:	dc000217 	ldw	r16,8(sp)
  80d990:	dec00c04 	addi	sp,sp,48
  80d994:	f800283a 	ret
  80d998:	31800044 	addi	r6,r6,1
  80d99c:	00800204 	movi	r2,8
  80d9a0:	94800044 	addi	r18,r18,1
  80d9a4:	1180040e 	bge	r2,r6,80d9b8 <__hexnan+0x184>
  80d9a8:	9c3fc72e 	bgeu	r19,r16,80d8c8 <__hexnan+0x94>
  80d9ac:	843fff04 	addi	r16,r16,-4
  80d9b0:	80000015 	stw	zero,0(r16)
  80d9b4:	01800044 	movi	r6,1
  80d9b8:	80800017 	ldw	r2,0(r16)
  80d9bc:	18c003cc 	andi	r3,r3,15
  80d9c0:	1004913a 	slli	r2,r2,4
  80d9c4:	10c4b03a 	or	r2,r2,r3
  80d9c8:	80800015 	stw	r2,0(r16)
  80d9cc:	003fbe06 	br	80d8c8 <__hexnan+0x94>
  80d9d0:	843fff04 	addi	r16,r16,-4
  80d9d4:	802b883a 	mov	r21,r16
  80d9d8:	902f883a 	mov	r23,r18
  80d9dc:	000d883a 	mov	r6,zero
  80d9e0:	80000015 	stw	zero,0(r16)
  80d9e4:	003fb806 	br	80d8c8 <__hexnan+0x94>
  80d9e8:	8009883a 	mov	r4,r16
  80d9ec:	a80b883a 	mov	r5,r21
  80d9f0:	080d7e80 	call	80d7e8 <L_shift>
  80d9f4:	003fc006 	br	80d8f8 <__hexnan+0xc4>
  80d9f8:	e03fd01e 	bne	fp,zero,80d93c <__hexnan+0x108>
  80d9fc:	d8c00017 	ldw	r3,0(sp)
  80da00:	00800804 	movi	r2,32
  80da04:	10c5c83a 	sub	r2,r2,r3
  80da08:	00ffffc4 	movi	r3,-1
  80da0c:	1886d83a 	srl	r3,r3,r2
  80da10:	a0800017 	ldw	r2,0(r20)
  80da14:	10c4703a 	and	r2,r2,r3
  80da18:	a0800015 	stw	r2,0(r20)
  80da1c:	003fc806 	br	80d940 <__hexnan+0x10c>
  80da20:	008001c4 	movi	r2,7
  80da24:	11bfbb16 	blt	r2,r6,80d914 <__hexnan+0xe0>
  80da28:	a80b883a 	mov	r5,r21
  80da2c:	8009883a 	mov	r4,r16
  80da30:	080d7e80 	call	80d7e8 <L_shift>
  80da34:	9c3ff02e 	bgeu	r19,r16,80d9f8 <__hexnan+0x1c4>
  80da38:	003fb706 	br	80d918 <__hexnan+0xe4>
  80da3c:	00800a44 	movi	r2,41
  80da40:	20800826 	beq	r4,r2,80da64 <__hexnan+0x230>
  80da44:	00c00104 	movi	r3,4
  80da48:	003fc606 	br	80d964 <__hexnan+0x130>
  80da4c:	080cf180 	call	80cf18 <__hexdig_init>
  80da50:	003f8a06 	br	80d87c <__hexnan+0x48>
  80da54:	00800044 	movi	r2,1
  80da58:	00c00144 	movi	r3,5
  80da5c:	98800015 	stw	r2,0(r19)
  80da60:	003fc006 	br	80d964 <__hexnan+0x130>
  80da64:	903ff726 	beq	r18,zero,80da44 <__hexnan+0x210>
  80da68:	d8c00117 	ldw	r3,4(sp)
  80da6c:	88800044 	addi	r2,r17,1
  80da70:	18800015 	stw	r2,0(r3)
  80da74:	857fa72e 	bgeu	r16,r21,80d914 <__hexnan+0xe0>
  80da78:	003fe906 	br	80da20 <__hexnan+0x1ec>

0080da7c <__muldi3>:
  80da7c:	2011883a 	mov	r8,r4
  80da80:	427fffcc 	andi	r9,r8,65535
  80da84:	4018d43a 	srli	r12,r8,16
  80da88:	32bfffcc 	andi	r10,r6,65535
  80da8c:	3016d43a 	srli	r11,r6,16
  80da90:	4a85383a 	mul	r2,r9,r10
  80da94:	6295383a 	mul	r10,r12,r10
  80da98:	4ad3383a 	mul	r9,r9,r11
  80da9c:	113fffcc 	andi	r4,r2,65535
  80daa0:	1004d43a 	srli	r2,r2,16
  80daa4:	4a93883a 	add	r9,r9,r10
  80daa8:	3807883a 	mov	r3,r7
  80daac:	1245883a 	add	r2,r2,r9
  80dab0:	280f883a 	mov	r7,r5
  80dab4:	180b883a 	mov	r5,r3
  80dab8:	1006943a 	slli	r3,r2,16
  80dabc:	defffd04 	addi	sp,sp,-12
  80dac0:	dc800215 	stw	r18,8(sp)
  80dac4:	1907883a 	add	r3,r3,r4
  80dac8:	dc400115 	stw	r17,4(sp)
  80dacc:	dc000015 	stw	r16,0(sp)
  80dad0:	4165383a 	mul	r18,r8,r5
  80dad4:	31e3383a 	mul	r17,r6,r7
  80dad8:	1012d43a 	srli	r9,r2,16
  80dadc:	62d9383a 	mul	r12,r12,r11
  80dae0:	181f883a 	mov	r15,r3
  80dae4:	1280022e 	bgeu	r2,r10,80daf0 <__muldi3+0x74>
  80dae8:	00800074 	movhi	r2,1
  80daec:	6099883a 	add	r12,r12,r2
  80daf0:	624d883a 	add	r6,r12,r9
  80daf4:	9187883a 	add	r3,r18,r6
  80daf8:	88c7883a 	add	r3,r17,r3
  80dafc:	7805883a 	mov	r2,r15
  80db00:	dc800217 	ldw	r18,8(sp)
  80db04:	dc400117 	ldw	r17,4(sp)
  80db08:	dc000017 	ldw	r16,0(sp)
  80db0c:	dec00304 	addi	sp,sp,12
  80db10:	f800283a 	ret

0080db14 <__fixunsdfsi>:
  80db14:	defffb04 	addi	sp,sp,-20
  80db18:	dc400115 	stw	r17,4(sp)
  80db1c:	dc000015 	stw	r16,0(sp)
  80db20:	04507834 	movhi	r17,16864
  80db24:	0021883a 	mov	r16,zero
  80db28:	800d883a 	mov	r6,r16
  80db2c:	880f883a 	mov	r7,r17
  80db30:	dcc00315 	stw	r19,12(sp)
  80db34:	dc800215 	stw	r18,8(sp)
  80db38:	2827883a 	mov	r19,r5
  80db3c:	2025883a 	mov	r18,r4
  80db40:	dfc00415 	stw	ra,16(sp)
  80db44:	080f5640 	call	80f564 <__gedf2>
  80db48:	000d883a 	mov	r6,zero
  80db4c:	880f883a 	mov	r7,r17
  80db50:	980b883a 	mov	r5,r19
  80db54:	9009883a 	mov	r4,r18
  80db58:	10000d16 	blt	r2,zero,80db90 <__fixunsdfsi+0x7c>
  80db5c:	080ecbc0 	call	80ecbc <__subdf3>
  80db60:	180b883a 	mov	r5,r3
  80db64:	1009883a 	mov	r4,r2
  80db68:	080f7f40 	call	80f7f4 <__fixdfsi>
  80db6c:	00e00034 	movhi	r3,32768
  80db70:	10c5883a 	add	r2,r2,r3
  80db74:	dfc00417 	ldw	ra,16(sp)
  80db78:	dcc00317 	ldw	r19,12(sp)
  80db7c:	dc800217 	ldw	r18,8(sp)
  80db80:	dc400117 	ldw	r17,4(sp)
  80db84:	dc000017 	ldw	r16,0(sp)
  80db88:	dec00504 	addi	sp,sp,20
  80db8c:	f800283a 	ret
  80db90:	980b883a 	mov	r5,r19
  80db94:	9009883a 	mov	r4,r18
  80db98:	080f7f40 	call	80f7f4 <__fixdfsi>
  80db9c:	dfc00417 	ldw	ra,16(sp)
  80dba0:	dcc00317 	ldw	r19,12(sp)
  80dba4:	dc800217 	ldw	r18,8(sp)
  80dba8:	dc400117 	ldw	r17,4(sp)
  80dbac:	dc000017 	ldw	r16,0(sp)
  80dbb0:	dec00504 	addi	sp,sp,20
  80dbb4:	f800283a 	ret

0080dbb8 <__udivdi3>:
  80dbb8:	defff004 	addi	sp,sp,-64
  80dbbc:	2005883a 	mov	r2,r4
  80dbc0:	3011883a 	mov	r8,r6
  80dbc4:	df000e15 	stw	fp,56(sp)
  80dbc8:	dd000a15 	stw	r20,40(sp)
  80dbcc:	dc000615 	stw	r16,24(sp)
  80dbd0:	dfc00f15 	stw	ra,60(sp)
  80dbd4:	ddc00d15 	stw	r23,52(sp)
  80dbd8:	dd800c15 	stw	r22,48(sp)
  80dbdc:	dd400b15 	stw	r21,44(sp)
  80dbe0:	dcc00915 	stw	r19,36(sp)
  80dbe4:	dc800815 	stw	r18,32(sp)
  80dbe8:	dc400715 	stw	r17,28(sp)
  80dbec:	4021883a 	mov	r16,r8
  80dbf0:	1039883a 	mov	fp,r2
  80dbf4:	2829883a 	mov	r20,r5
  80dbf8:	38003b1e 	bne	r7,zero,80dce8 <__udivdi3+0x130>
  80dbfc:	2a005c36 	bltu	r5,r8,80dd70 <__udivdi3+0x1b8>
  80dc00:	4000a626 	beq	r8,zero,80de9c <__udivdi3+0x2e4>
  80dc04:	00bfffd4 	movui	r2,65535
  80dc08:	14009e36 	bltu	r2,r16,80de84 <__udivdi3+0x2cc>
  80dc0c:	00803fc4 	movi	r2,255
  80dc10:	14013d36 	bltu	r2,r16,80e108 <__udivdi3+0x550>
  80dc14:	000b883a 	mov	r5,zero
  80dc18:	0005883a 	mov	r2,zero
  80dc1c:	8084d83a 	srl	r2,r16,r2
  80dc20:	01002074 	movhi	r4,129
  80dc24:	21147104 	addi	r4,r4,20932
  80dc28:	01800804 	movi	r6,32
  80dc2c:	1105883a 	add	r2,r2,r4
  80dc30:	10c00003 	ldbu	r3,0(r2)
  80dc34:	28c7883a 	add	r3,r5,r3
  80dc38:	30edc83a 	sub	r22,r6,r3
  80dc3c:	b000ee1e 	bne	r22,zero,80dff8 <__udivdi3+0x440>
  80dc40:	802ad43a 	srli	r21,r16,16
  80dc44:	00800044 	movi	r2,1
  80dc48:	a423c83a 	sub	r17,r20,r16
  80dc4c:	85ffffcc 	andi	r23,r16,65535
  80dc50:	d8800315 	stw	r2,12(sp)
  80dc54:	8809883a 	mov	r4,r17
  80dc58:	a80b883a 	mov	r5,r21
  80dc5c:	080fc100 	call	80fc10 <__udivsi3>
  80dc60:	8809883a 	mov	r4,r17
  80dc64:	a80b883a 	mov	r5,r21
  80dc68:	102d883a 	mov	r22,r2
  80dc6c:	080fc180 	call	80fc18 <__umodsi3>
  80dc70:	1004943a 	slli	r2,r2,16
  80dc74:	e006d43a 	srli	r3,fp,16
  80dc78:	bda3383a 	mul	r17,r23,r22
  80dc7c:	10c4b03a 	or	r2,r2,r3
  80dc80:	1440042e 	bgeu	r2,r17,80dc94 <__udivdi3+0xdc>
  80dc84:	1405883a 	add	r2,r2,r16
  80dc88:	b5bfffc4 	addi	r22,r22,-1
  80dc8c:	14000136 	bltu	r2,r16,80dc94 <__udivdi3+0xdc>
  80dc90:	14413d36 	bltu	r2,r17,80e188 <__udivdi3+0x5d0>
  80dc94:	1463c83a 	sub	r17,r2,r17
  80dc98:	8809883a 	mov	r4,r17
  80dc9c:	a80b883a 	mov	r5,r21
  80dca0:	080fc100 	call	80fc10 <__udivsi3>
  80dca4:	8809883a 	mov	r4,r17
  80dca8:	a80b883a 	mov	r5,r21
  80dcac:	1029883a 	mov	r20,r2
  80dcb0:	080fc180 	call	80fc18 <__umodsi3>
  80dcb4:	1004943a 	slli	r2,r2,16
  80dcb8:	bd09383a 	mul	r4,r23,r20
  80dcbc:	e0ffffcc 	andi	r3,fp,65535
  80dcc0:	10c4b03a 	or	r2,r2,r3
  80dcc4:	1100042e 	bgeu	r2,r4,80dcd8 <__udivdi3+0x120>
  80dcc8:	8085883a 	add	r2,r16,r2
  80dccc:	a53fffc4 	addi	r20,r20,-1
  80dcd0:	14000136 	bltu	r2,r16,80dcd8 <__udivdi3+0x120>
  80dcd4:	11012036 	bltu	r2,r4,80e158 <__udivdi3+0x5a0>
  80dcd8:	b004943a 	slli	r2,r22,16
  80dcdc:	d9000317 	ldw	r4,12(sp)
  80dce0:	a084b03a 	or	r2,r20,r2
  80dce4:	00001506 	br	80dd3c <__udivdi3+0x184>
  80dce8:	380d883a 	mov	r6,r7
  80dcec:	29c06236 	bltu	r5,r7,80de78 <__udivdi3+0x2c0>
  80dcf0:	00bfffd4 	movui	r2,65535
  80dcf4:	11c05a36 	bltu	r2,r7,80de60 <__udivdi3+0x2a8>
  80dcf8:	00803fc4 	movi	r2,255
  80dcfc:	11c0fc36 	bltu	r2,r7,80e0f0 <__udivdi3+0x538>
  80dd00:	000b883a 	mov	r5,zero
  80dd04:	0005883a 	mov	r2,zero
  80dd08:	3084d83a 	srl	r2,r6,r2
  80dd0c:	01002074 	movhi	r4,129
  80dd10:	21147104 	addi	r4,r4,20932
  80dd14:	01c00804 	movi	r7,32
  80dd18:	1105883a 	add	r2,r2,r4
  80dd1c:	10c00003 	ldbu	r3,0(r2)
  80dd20:	28c7883a 	add	r3,r5,r3
  80dd24:	38efc83a 	sub	r23,r7,r3
  80dd28:	b800691e 	bne	r23,zero,80ded0 <__udivdi3+0x318>
  80dd2c:	35000136 	bltu	r6,r20,80dd34 <__udivdi3+0x17c>
  80dd30:	e4005136 	bltu	fp,r16,80de78 <__udivdi3+0x2c0>
  80dd34:	00800044 	movi	r2,1
  80dd38:	0009883a 	mov	r4,zero
  80dd3c:	2007883a 	mov	r3,r4
  80dd40:	dfc00f17 	ldw	ra,60(sp)
  80dd44:	df000e17 	ldw	fp,56(sp)
  80dd48:	ddc00d17 	ldw	r23,52(sp)
  80dd4c:	dd800c17 	ldw	r22,48(sp)
  80dd50:	dd400b17 	ldw	r21,44(sp)
  80dd54:	dd000a17 	ldw	r20,40(sp)
  80dd58:	dcc00917 	ldw	r19,36(sp)
  80dd5c:	dc800817 	ldw	r18,32(sp)
  80dd60:	dc400717 	ldw	r17,28(sp)
  80dd64:	dc000617 	ldw	r16,24(sp)
  80dd68:	dec01004 	addi	sp,sp,64
  80dd6c:	f800283a 	ret
  80dd70:	00bfffd4 	movui	r2,65535
  80dd74:	12005036 	bltu	r2,r8,80deb8 <__udivdi3+0x300>
  80dd78:	00803fc4 	movi	r2,255
  80dd7c:	1200e836 	bltu	r2,r8,80e120 <__udivdi3+0x568>
  80dd80:	000b883a 	mov	r5,zero
  80dd84:	0005883a 	mov	r2,zero
  80dd88:	8084d83a 	srl	r2,r16,r2
  80dd8c:	01002074 	movhi	r4,129
  80dd90:	21147104 	addi	r4,r4,20932
  80dd94:	01800804 	movi	r6,32
  80dd98:	1105883a 	add	r2,r2,r4
  80dd9c:	10c00003 	ldbu	r3,0(r2)
  80dda0:	28c7883a 	add	r3,r5,r3
  80dda4:	30cbc83a 	sub	r5,r6,r3
  80dda8:	28000626 	beq	r5,zero,80ddc4 <__udivdi3+0x20c>
  80ddac:	3145c83a 	sub	r2,r6,r5
  80ddb0:	e084d83a 	srl	r2,fp,r2
  80ddb4:	a146983a 	sll	r3,r20,r5
  80ddb8:	e178983a 	sll	fp,fp,r5
  80ddbc:	8160983a 	sll	r16,r16,r5
  80ddc0:	18a8b03a 	or	r20,r3,r2
  80ddc4:	802ad43a 	srli	r21,r16,16
  80ddc8:	a009883a 	mov	r4,r20
  80ddcc:	85ffffcc 	andi	r23,r16,65535
  80ddd0:	a80b883a 	mov	r5,r21
  80ddd4:	080fc100 	call	80fc10 <__udivsi3>
  80ddd8:	a009883a 	mov	r4,r20
  80dddc:	a80b883a 	mov	r5,r21
  80dde0:	102d883a 	mov	r22,r2
  80dde4:	080fc180 	call	80fc18 <__umodsi3>
  80dde8:	1004943a 	slli	r2,r2,16
  80ddec:	e006d43a 	srli	r3,fp,16
  80ddf0:	bda3383a 	mul	r17,r23,r22
  80ddf4:	10c4b03a 	or	r2,r2,r3
  80ddf8:	1440042e 	bgeu	r2,r17,80de0c <__udivdi3+0x254>
  80ddfc:	1405883a 	add	r2,r2,r16
  80de00:	b5bfffc4 	addi	r22,r22,-1
  80de04:	14000136 	bltu	r2,r16,80de0c <__udivdi3+0x254>
  80de08:	1440d536 	bltu	r2,r17,80e160 <__udivdi3+0x5a8>
  80de0c:	1463c83a 	sub	r17,r2,r17
  80de10:	8809883a 	mov	r4,r17
  80de14:	a80b883a 	mov	r5,r21
  80de18:	080fc100 	call	80fc10 <__udivsi3>
  80de1c:	8809883a 	mov	r4,r17
  80de20:	a80b883a 	mov	r5,r21
  80de24:	1029883a 	mov	r20,r2
  80de28:	080fc180 	call	80fc18 <__umodsi3>
  80de2c:	1004943a 	slli	r2,r2,16
  80de30:	bd09383a 	mul	r4,r23,r20
  80de34:	e0ffffcc 	andi	r3,fp,65535
  80de38:	10c4b03a 	or	r2,r2,r3
  80de3c:	1100042e 	bgeu	r2,r4,80de50 <__udivdi3+0x298>
  80de40:	8085883a 	add	r2,r16,r2
  80de44:	a53fffc4 	addi	r20,r20,-1
  80de48:	14000136 	bltu	r2,r16,80de50 <__udivdi3+0x298>
  80de4c:	1100c736 	bltu	r2,r4,80e16c <__udivdi3+0x5b4>
  80de50:	b004943a 	slli	r2,r22,16
  80de54:	0009883a 	mov	r4,zero
  80de58:	a084b03a 	or	r2,r20,r2
  80de5c:	003fb706 	br	80dd3c <__udivdi3+0x184>
  80de60:	00804034 	movhi	r2,256
  80de64:	10bfffc4 	addi	r2,r2,-1
  80de68:	11c0a436 	bltu	r2,r7,80e0fc <__udivdi3+0x544>
  80de6c:	01400404 	movi	r5,16
  80de70:	2805883a 	mov	r2,r5
  80de74:	003fa406 	br	80dd08 <__udivdi3+0x150>
  80de78:	0005883a 	mov	r2,zero
  80de7c:	0009883a 	mov	r4,zero
  80de80:	003fae06 	br	80dd3c <__udivdi3+0x184>
  80de84:	00804034 	movhi	r2,256
  80de88:	10bfffc4 	addi	r2,r2,-1
  80de8c:	1400a136 	bltu	r2,r16,80e114 <__udivdi3+0x55c>
  80de90:	01400404 	movi	r5,16
  80de94:	2805883a 	mov	r2,r5
  80de98:	003f6006 	br	80dc1c <__udivdi3+0x64>
  80de9c:	01000044 	movi	r4,1
  80dea0:	000b883a 	mov	r5,zero
  80dea4:	080fc100 	call	80fc10 <__udivsi3>
  80dea8:	1021883a 	mov	r16,r2
  80deac:	00bfffd4 	movui	r2,65535
  80deb0:	143ff436 	bltu	r2,r16,80de84 <__udivdi3+0x2cc>
  80deb4:	003f5506 	br	80dc0c <__udivdi3+0x54>
  80deb8:	00804034 	movhi	r2,256
  80debc:	10bfffc4 	addi	r2,r2,-1
  80dec0:	12009a36 	bltu	r2,r8,80e12c <__udivdi3+0x574>
  80dec4:	01400404 	movi	r5,16
  80dec8:	2805883a 	mov	r2,r5
  80decc:	003fae06 	br	80dd88 <__udivdi3+0x1d0>
  80ded0:	3dc5c83a 	sub	r2,r7,r23
  80ded4:	35c8983a 	sll	r4,r6,r23
  80ded8:	8086d83a 	srl	r3,r16,r2
  80dedc:	a0a2d83a 	srl	r17,r20,r2
  80dee0:	e084d83a 	srl	r2,fp,r2
  80dee4:	20eab03a 	or	r21,r4,r3
  80dee8:	a82cd43a 	srli	r22,r21,16
  80deec:	a5c6983a 	sll	r3,r20,r23
  80def0:	8809883a 	mov	r4,r17
  80def4:	b00b883a 	mov	r5,r22
  80def8:	1886b03a 	or	r3,r3,r2
  80defc:	d8c00215 	stw	r3,8(sp)
  80df00:	080fc100 	call	80fc10 <__udivsi3>
  80df04:	8809883a 	mov	r4,r17
  80df08:	b00b883a 	mov	r5,r22
  80df0c:	1029883a 	mov	r20,r2
  80df10:	080fc180 	call	80fc18 <__umodsi3>
  80df14:	a8ffffcc 	andi	r3,r21,65535
  80df18:	d8c00515 	stw	r3,20(sp)
  80df1c:	d9000217 	ldw	r4,8(sp)
  80df20:	d9400517 	ldw	r5,20(sp)
  80df24:	1004943a 	slli	r2,r2,16
  80df28:	2006d43a 	srli	r3,r4,16
  80df2c:	85e0983a 	sll	r16,r16,r23
  80df30:	2d23383a 	mul	r17,r5,r20
  80df34:	10c4b03a 	or	r2,r2,r3
  80df38:	dc000015 	stw	r16,0(sp)
  80df3c:	1440032e 	bgeu	r2,r17,80df4c <__udivdi3+0x394>
  80df40:	1545883a 	add	r2,r2,r21
  80df44:	a53fffc4 	addi	r20,r20,-1
  80df48:	15407f2e 	bgeu	r2,r21,80e148 <__udivdi3+0x590>
  80df4c:	1463c83a 	sub	r17,r2,r17
  80df50:	8809883a 	mov	r4,r17
  80df54:	b00b883a 	mov	r5,r22
  80df58:	080fc100 	call	80fc10 <__udivsi3>
  80df5c:	8809883a 	mov	r4,r17
  80df60:	b00b883a 	mov	r5,r22
  80df64:	1021883a 	mov	r16,r2
  80df68:	080fc180 	call	80fc18 <__umodsi3>
  80df6c:	d8c00517 	ldw	r3,20(sp)
  80df70:	d9000217 	ldw	r4,8(sp)
  80df74:	1004943a 	slli	r2,r2,16
  80df78:	1c0f383a 	mul	r7,r3,r16
  80df7c:	20ffffcc 	andi	r3,r4,65535
  80df80:	10e2b03a 	or	r17,r2,r3
  80df84:	89c0032e 	bgeu	r17,r7,80df94 <__udivdi3+0x3dc>
  80df88:	8d63883a 	add	r17,r17,r21
  80df8c:	843fffc4 	addi	r16,r16,-1
  80df90:	8d40692e 	bgeu	r17,r21,80e138 <__udivdi3+0x580>
  80df94:	a008943a 	slli	r4,r20,16
  80df98:	d9400017 	ldw	r5,0(sp)
  80df9c:	89e3c83a 	sub	r17,r17,r7
  80dfa0:	8110b03a 	or	r8,r16,r4
  80dfa4:	280cd43a 	srli	r6,r5,16
  80dfa8:	28ffffcc 	andi	r3,r5,65535
  80dfac:	40bfffcc 	andi	r2,r8,65535
  80dfb0:	400ad43a 	srli	r5,r8,16
  80dfb4:	10d3383a 	mul	r9,r2,r3
  80dfb8:	1185383a 	mul	r2,r2,r6
  80dfbc:	28c7383a 	mul	r3,r5,r3
  80dfc0:	4808d43a 	srli	r4,r9,16
  80dfc4:	298b383a 	mul	r5,r5,r6
  80dfc8:	10c5883a 	add	r2,r2,r3
  80dfcc:	2089883a 	add	r4,r4,r2
  80dfd0:	20c0022e 	bgeu	r4,r3,80dfdc <__udivdi3+0x424>
  80dfd4:	00800074 	movhi	r2,1
  80dfd8:	288b883a 	add	r5,r5,r2
  80dfdc:	2004d43a 	srli	r2,r4,16
  80dfe0:	288b883a 	add	r5,r5,r2
  80dfe4:	89403f36 	bltu	r17,r5,80e0e4 <__udivdi3+0x52c>
  80dfe8:	89403926 	beq	r17,r5,80e0d0 <__udivdi3+0x518>
  80dfec:	4005883a 	mov	r2,r8
  80dff0:	0009883a 	mov	r4,zero
  80dff4:	003f5106 	br	80dd3c <__udivdi3+0x184>
  80dff8:	85a0983a 	sll	r16,r16,r22
  80dffc:	3585c83a 	sub	r2,r6,r22
  80e000:	a0a2d83a 	srl	r17,r20,r2
  80e004:	802ad43a 	srli	r21,r16,16
  80e008:	e084d83a 	srl	r2,fp,r2
  80e00c:	a586983a 	sll	r3,r20,r22
  80e010:	8809883a 	mov	r4,r17
  80e014:	a80b883a 	mov	r5,r21
  80e018:	1886b03a 	or	r3,r3,r2
  80e01c:	d8c00115 	stw	r3,4(sp)
  80e020:	080fc100 	call	80fc10 <__udivsi3>
  80e024:	8809883a 	mov	r4,r17
  80e028:	a80b883a 	mov	r5,r21
  80e02c:	d8800415 	stw	r2,16(sp)
  80e030:	080fc180 	call	80fc18 <__umodsi3>
  80e034:	d9000117 	ldw	r4,4(sp)
  80e038:	d9400417 	ldw	r5,16(sp)
  80e03c:	1004943a 	slli	r2,r2,16
  80e040:	85ffffcc 	andi	r23,r16,65535
  80e044:	2006d43a 	srli	r3,r4,16
  80e048:	b963383a 	mul	r17,r23,r5
  80e04c:	10c4b03a 	or	r2,r2,r3
  80e050:	1440042e 	bgeu	r2,r17,80e064 <__udivdi3+0x4ac>
  80e054:	297fffc4 	addi	r5,r5,-1
  80e058:	1405883a 	add	r2,r2,r16
  80e05c:	d9400415 	stw	r5,16(sp)
  80e060:	1400442e 	bgeu	r2,r16,80e174 <__udivdi3+0x5bc>
  80e064:	1463c83a 	sub	r17,r2,r17
  80e068:	8809883a 	mov	r4,r17
  80e06c:	a80b883a 	mov	r5,r21
  80e070:	080fc100 	call	80fc10 <__udivsi3>
  80e074:	8809883a 	mov	r4,r17
  80e078:	a80b883a 	mov	r5,r21
  80e07c:	1029883a 	mov	r20,r2
  80e080:	080fc180 	call	80fc18 <__umodsi3>
  80e084:	d9400117 	ldw	r5,4(sp)
  80e088:	1004943a 	slli	r2,r2,16
  80e08c:	bd09383a 	mul	r4,r23,r20
  80e090:	28ffffcc 	andi	r3,r5,65535
  80e094:	10c6b03a 	or	r3,r2,r3
  80e098:	1900062e 	bgeu	r3,r4,80e0b4 <__udivdi3+0x4fc>
  80e09c:	1c07883a 	add	r3,r3,r16
  80e0a0:	a53fffc4 	addi	r20,r20,-1
  80e0a4:	1c000336 	bltu	r3,r16,80e0b4 <__udivdi3+0x4fc>
  80e0a8:	1900022e 	bgeu	r3,r4,80e0b4 <__udivdi3+0x4fc>
  80e0ac:	a53fffc4 	addi	r20,r20,-1
  80e0b0:	1c07883a 	add	r3,r3,r16
  80e0b4:	d9400417 	ldw	r5,16(sp)
  80e0b8:	e5b8983a 	sll	fp,fp,r22
  80e0bc:	1923c83a 	sub	r17,r3,r4
  80e0c0:	2804943a 	slli	r2,r5,16
  80e0c4:	a0a8b03a 	or	r20,r20,r2
  80e0c8:	dd000315 	stw	r20,12(sp)
  80e0cc:	003ee106 	br	80dc54 <__udivdi3+0x9c>
  80e0d0:	2004943a 	slli	r2,r4,16
  80e0d4:	e5c8983a 	sll	r4,fp,r23
  80e0d8:	48ffffcc 	andi	r3,r9,65535
  80e0dc:	10c5883a 	add	r2,r2,r3
  80e0e0:	20bfc22e 	bgeu	r4,r2,80dfec <__udivdi3+0x434>
  80e0e4:	40bfffc4 	addi	r2,r8,-1
  80e0e8:	0009883a 	mov	r4,zero
  80e0ec:	003f1306 	br	80dd3c <__udivdi3+0x184>
  80e0f0:	01400204 	movi	r5,8
  80e0f4:	2805883a 	mov	r2,r5
  80e0f8:	003f0306 	br	80dd08 <__udivdi3+0x150>
  80e0fc:	01400604 	movi	r5,24
  80e100:	2805883a 	mov	r2,r5
  80e104:	003f0006 	br	80dd08 <__udivdi3+0x150>
  80e108:	01400204 	movi	r5,8
  80e10c:	2805883a 	mov	r2,r5
  80e110:	003ec206 	br	80dc1c <__udivdi3+0x64>
  80e114:	01400604 	movi	r5,24
  80e118:	2805883a 	mov	r2,r5
  80e11c:	003ebf06 	br	80dc1c <__udivdi3+0x64>
  80e120:	01400204 	movi	r5,8
  80e124:	2805883a 	mov	r2,r5
  80e128:	003f1706 	br	80dd88 <__udivdi3+0x1d0>
  80e12c:	01400604 	movi	r5,24
  80e130:	2805883a 	mov	r2,r5
  80e134:	003f1406 	br	80dd88 <__udivdi3+0x1d0>
  80e138:	89ff962e 	bgeu	r17,r7,80df94 <__udivdi3+0x3dc>
  80e13c:	8d63883a 	add	r17,r17,r21
  80e140:	843fffc4 	addi	r16,r16,-1
  80e144:	003f9306 	br	80df94 <__udivdi3+0x3dc>
  80e148:	147f802e 	bgeu	r2,r17,80df4c <__udivdi3+0x394>
  80e14c:	a53fffc4 	addi	r20,r20,-1
  80e150:	1545883a 	add	r2,r2,r21
  80e154:	003f7d06 	br	80df4c <__udivdi3+0x394>
  80e158:	a53fffc4 	addi	r20,r20,-1
  80e15c:	003ede06 	br	80dcd8 <__udivdi3+0x120>
  80e160:	b5bfffc4 	addi	r22,r22,-1
  80e164:	1405883a 	add	r2,r2,r16
  80e168:	003f2806 	br	80de0c <__udivdi3+0x254>
  80e16c:	a53fffc4 	addi	r20,r20,-1
  80e170:	003f3706 	br	80de50 <__udivdi3+0x298>
  80e174:	147fbb2e 	bgeu	r2,r17,80e064 <__udivdi3+0x4ac>
  80e178:	297fffc4 	addi	r5,r5,-1
  80e17c:	1405883a 	add	r2,r2,r16
  80e180:	d9400415 	stw	r5,16(sp)
  80e184:	003fb706 	br	80e064 <__udivdi3+0x4ac>
  80e188:	b5bfffc4 	addi	r22,r22,-1
  80e18c:	1405883a 	add	r2,r2,r16
  80e190:	003ec006 	br	80dc94 <__udivdi3+0xdc>

0080e194 <__umoddi3>:
  80e194:	defff104 	addi	sp,sp,-60
  80e198:	dd800b15 	stw	r22,44(sp)
  80e19c:	dd000915 	stw	r20,36(sp)
  80e1a0:	dc000515 	stw	r16,20(sp)
  80e1a4:	dfc00e15 	stw	ra,56(sp)
  80e1a8:	df000d15 	stw	fp,52(sp)
  80e1ac:	ddc00c15 	stw	r23,48(sp)
  80e1b0:	dd400a15 	stw	r21,40(sp)
  80e1b4:	dcc00815 	stw	r19,32(sp)
  80e1b8:	dc800715 	stw	r18,28(sp)
  80e1bc:	dc400615 	stw	r17,24(sp)
  80e1c0:	3021883a 	mov	r16,r6
  80e1c4:	202d883a 	mov	r22,r4
  80e1c8:	2829883a 	mov	r20,r5
  80e1cc:	38002b1e 	bne	r7,zero,80e27c <__umoddi3+0xe8>
  80e1d0:	29805036 	bltu	r5,r6,80e314 <__umoddi3+0x180>
  80e1d4:	30008a26 	beq	r6,zero,80e400 <__umoddi3+0x26c>
  80e1d8:	00bfffd4 	movui	r2,65535
  80e1dc:	14008236 	bltu	r2,r16,80e3e8 <__umoddi3+0x254>
  80e1e0:	00803fc4 	movi	r2,255
  80e1e4:	14013636 	bltu	r2,r16,80e6c0 <__umoddi3+0x52c>
  80e1e8:	000b883a 	mov	r5,zero
  80e1ec:	0005883a 	mov	r2,zero
  80e1f0:	8084d83a 	srl	r2,r16,r2
  80e1f4:	01002074 	movhi	r4,129
  80e1f8:	21147104 	addi	r4,r4,20932
  80e1fc:	01800804 	movi	r6,32
  80e200:	1105883a 	add	r2,r2,r4
  80e204:	10c00003 	ldbu	r3,0(r2)
  80e208:	28c7883a 	add	r3,r5,r3
  80e20c:	30efc83a 	sub	r23,r6,r3
  80e210:	b800941e 	bne	r23,zero,80e464 <__umoddi3+0x2d0>
  80e214:	802ad43a 	srli	r21,r16,16
  80e218:	a423c83a 	sub	r17,r20,r16
  80e21c:	0039883a 	mov	fp,zero
  80e220:	853fffcc 	andi	r20,r16,65535
  80e224:	8809883a 	mov	r4,r17
  80e228:	a80b883a 	mov	r5,r21
  80e22c:	080fc100 	call	80fc10 <__udivsi3>
  80e230:	8809883a 	mov	r4,r17
  80e234:	a80b883a 	mov	r5,r21
  80e238:	a0a3383a 	mul	r17,r20,r2
  80e23c:	080fc180 	call	80fc18 <__umodsi3>
  80e240:	1004943a 	slli	r2,r2,16
  80e244:	b006d43a 	srli	r3,r22,16
  80e248:	10c4b03a 	or	r2,r2,r3
  80e24c:	1440032e 	bgeu	r2,r17,80e25c <__umoddi3+0xc8>
  80e250:	1405883a 	add	r2,r2,r16
  80e254:	14000136 	bltu	r2,r16,80e25c <__umoddi3+0xc8>
  80e258:	14413536 	bltu	r2,r17,80e730 <__umoddi3+0x59c>
  80e25c:	1463c83a 	sub	r17,r2,r17
  80e260:	8809883a 	mov	r4,r17
  80e264:	a80b883a 	mov	r5,r21
  80e268:	080fc100 	call	80fc10 <__udivsi3>
  80e26c:	8809883a 	mov	r4,r17
  80e270:	a0a3383a 	mul	r17,r20,r2
  80e274:	a80b883a 	mov	r5,r21
  80e278:	00004d06 	br	80e3b0 <__umoddi3+0x21c>
  80e27c:	380d883a 	mov	r6,r7
  80e280:	29c0102e 	bgeu	r5,r7,80e2c4 <__umoddi3+0x130>
  80e284:	2011883a 	mov	r8,r4
  80e288:	2813883a 	mov	r9,r5
  80e28c:	4005883a 	mov	r2,r8
  80e290:	4807883a 	mov	r3,r9
  80e294:	dfc00e17 	ldw	ra,56(sp)
  80e298:	df000d17 	ldw	fp,52(sp)
  80e29c:	ddc00c17 	ldw	r23,48(sp)
  80e2a0:	dd800b17 	ldw	r22,44(sp)
  80e2a4:	dd400a17 	ldw	r21,40(sp)
  80e2a8:	dd000917 	ldw	r20,36(sp)
  80e2ac:	dcc00817 	ldw	r19,32(sp)
  80e2b0:	dc800717 	ldw	r18,28(sp)
  80e2b4:	dc400617 	ldw	r17,24(sp)
  80e2b8:	dc000517 	ldw	r16,20(sp)
  80e2bc:	dec00f04 	addi	sp,sp,60
  80e2c0:	f800283a 	ret
  80e2c4:	00bfffd4 	movui	r2,65535
  80e2c8:	11c05a36 	bltu	r2,r7,80e434 <__umoddi3+0x2a0>
  80e2cc:	00803fc4 	movi	r2,255
  80e2d0:	11c0fe36 	bltu	r2,r7,80e6cc <__umoddi3+0x538>
  80e2d4:	000b883a 	mov	r5,zero
  80e2d8:	0005883a 	mov	r2,zero
  80e2dc:	3084d83a 	srl	r2,r6,r2
  80e2e0:	01002074 	movhi	r4,129
  80e2e4:	21147104 	addi	r4,r4,20932
  80e2e8:	01c00804 	movi	r7,32
  80e2ec:	1105883a 	add	r2,r2,r4
  80e2f0:	10c00003 	ldbu	r3,0(r2)
  80e2f4:	28c7883a 	add	r3,r5,r3
  80e2f8:	38ebc83a 	sub	r21,r7,r3
  80e2fc:	a800851e 	bne	r21,zero,80e514 <__umoddi3+0x380>
  80e300:	35005236 	bltu	r6,r20,80e44c <__umoddi3+0x2b8>
  80e304:	b400512e 	bgeu	r22,r16,80e44c <__umoddi3+0x2b8>
  80e308:	b011883a 	mov	r8,r22
  80e30c:	a013883a 	mov	r9,r20
  80e310:	003fde06 	br	80e28c <__umoddi3+0xf8>
  80e314:	00bfffd4 	movui	r2,65535
  80e318:	11804036 	bltu	r2,r6,80e41c <__umoddi3+0x288>
  80e31c:	00803fc4 	movi	r2,255
  80e320:	1180ed36 	bltu	r2,r6,80e6d8 <__umoddi3+0x544>
  80e324:	000b883a 	mov	r5,zero
  80e328:	0005883a 	mov	r2,zero
  80e32c:	8084d83a 	srl	r2,r16,r2
  80e330:	01002074 	movhi	r4,129
  80e334:	21147104 	addi	r4,r4,20932
  80e338:	01800804 	movi	r6,32
  80e33c:	1105883a 	add	r2,r2,r4
  80e340:	10c00003 	ldbu	r3,0(r2)
  80e344:	28c7883a 	add	r3,r5,r3
  80e348:	30c7c83a 	sub	r3,r6,r3
  80e34c:	1800bf1e 	bne	r3,zero,80e64c <__umoddi3+0x4b8>
  80e350:	0039883a 	mov	fp,zero
  80e354:	802ad43a 	srli	r21,r16,16
  80e358:	a009883a 	mov	r4,r20
  80e35c:	85ffffcc 	andi	r23,r16,65535
  80e360:	a80b883a 	mov	r5,r21
  80e364:	080fc100 	call	80fc10 <__udivsi3>
  80e368:	a009883a 	mov	r4,r20
  80e36c:	a80b883a 	mov	r5,r21
  80e370:	b8a3383a 	mul	r17,r23,r2
  80e374:	080fc180 	call	80fc18 <__umodsi3>
  80e378:	1004943a 	slli	r2,r2,16
  80e37c:	b006d43a 	srli	r3,r22,16
  80e380:	10c4b03a 	or	r2,r2,r3
  80e384:	1440032e 	bgeu	r2,r17,80e394 <__umoddi3+0x200>
  80e388:	1405883a 	add	r2,r2,r16
  80e38c:	14000136 	bltu	r2,r16,80e394 <__umoddi3+0x200>
  80e390:	1440e536 	bltu	r2,r17,80e728 <__umoddi3+0x594>
  80e394:	1463c83a 	sub	r17,r2,r17
  80e398:	8809883a 	mov	r4,r17
  80e39c:	a80b883a 	mov	r5,r21
  80e3a0:	080fc100 	call	80fc10 <__udivsi3>
  80e3a4:	8809883a 	mov	r4,r17
  80e3a8:	b8a3383a 	mul	r17,r23,r2
  80e3ac:	a80b883a 	mov	r5,r21
  80e3b0:	080fc180 	call	80fc18 <__umodsi3>
  80e3b4:	1004943a 	slli	r2,r2,16
  80e3b8:	b0ffffcc 	andi	r3,r22,65535
  80e3bc:	10c4b03a 	or	r2,r2,r3
  80e3c0:	1440042e 	bgeu	r2,r17,80e3d4 <__umoddi3+0x240>
  80e3c4:	1405883a 	add	r2,r2,r16
  80e3c8:	14000236 	bltu	r2,r16,80e3d4 <__umoddi3+0x240>
  80e3cc:	1440012e 	bgeu	r2,r17,80e3d4 <__umoddi3+0x240>
  80e3d0:	1405883a 	add	r2,r2,r16
  80e3d4:	1445c83a 	sub	r2,r2,r17
  80e3d8:	1724d83a 	srl	r18,r2,fp
  80e3dc:	0013883a 	mov	r9,zero
  80e3e0:	9011883a 	mov	r8,r18
  80e3e4:	003fa906 	br	80e28c <__umoddi3+0xf8>
  80e3e8:	00804034 	movhi	r2,256
  80e3ec:	10bfffc4 	addi	r2,r2,-1
  80e3f0:	1400b036 	bltu	r2,r16,80e6b4 <__umoddi3+0x520>
  80e3f4:	01400404 	movi	r5,16
  80e3f8:	2805883a 	mov	r2,r5
  80e3fc:	003f7c06 	br	80e1f0 <__umoddi3+0x5c>
  80e400:	01000044 	movi	r4,1
  80e404:	000b883a 	mov	r5,zero
  80e408:	080fc100 	call	80fc10 <__udivsi3>
  80e40c:	1021883a 	mov	r16,r2
  80e410:	00bfffd4 	movui	r2,65535
  80e414:	143ff436 	bltu	r2,r16,80e3e8 <__umoddi3+0x254>
  80e418:	003f7106 	br	80e1e0 <__umoddi3+0x4c>
  80e41c:	00804034 	movhi	r2,256
  80e420:	10bfffc4 	addi	r2,r2,-1
  80e424:	1180af36 	bltu	r2,r6,80e6e4 <__umoddi3+0x550>
  80e428:	01400404 	movi	r5,16
  80e42c:	2805883a 	mov	r2,r5
  80e430:	003fbe06 	br	80e32c <__umoddi3+0x198>
  80e434:	00804034 	movhi	r2,256
  80e438:	10bfffc4 	addi	r2,r2,-1
  80e43c:	11c0ac36 	bltu	r2,r7,80e6f0 <__umoddi3+0x55c>
  80e440:	01400404 	movi	r5,16
  80e444:	2805883a 	mov	r2,r5
  80e448:	003fa406 	br	80e2dc <__umoddi3+0x148>
  80e44c:	b409c83a 	sub	r4,r22,r16
  80e450:	b105803a 	cmpltu	r2,r22,r4
  80e454:	a187c83a 	sub	r3,r20,r6
  80e458:	18a9c83a 	sub	r20,r3,r2
  80e45c:	202d883a 	mov	r22,r4
  80e460:	003fa906 	br	80e308 <__umoddi3+0x174>
  80e464:	85e0983a 	sll	r16,r16,r23
  80e468:	35c5c83a 	sub	r2,r6,r23
  80e46c:	a0a2d83a 	srl	r17,r20,r2
  80e470:	802ad43a 	srli	r21,r16,16
  80e474:	b084d83a 	srl	r2,r22,r2
  80e478:	a5c6983a 	sll	r3,r20,r23
  80e47c:	8809883a 	mov	r4,r17
  80e480:	a80b883a 	mov	r5,r21
  80e484:	1886b03a 	or	r3,r3,r2
  80e488:	d8c00115 	stw	r3,4(sp)
  80e48c:	853fffcc 	andi	r20,r16,65535
  80e490:	080fc100 	call	80fc10 <__udivsi3>
  80e494:	8809883a 	mov	r4,r17
  80e498:	a80b883a 	mov	r5,r21
  80e49c:	a0a3383a 	mul	r17,r20,r2
  80e4a0:	080fc180 	call	80fc18 <__umodsi3>
  80e4a4:	d9000117 	ldw	r4,4(sp)
  80e4a8:	1004943a 	slli	r2,r2,16
  80e4ac:	b839883a 	mov	fp,r23
  80e4b0:	2006d43a 	srli	r3,r4,16
  80e4b4:	10c4b03a 	or	r2,r2,r3
  80e4b8:	1440022e 	bgeu	r2,r17,80e4c4 <__umoddi3+0x330>
  80e4bc:	1405883a 	add	r2,r2,r16
  80e4c0:	1400962e 	bgeu	r2,r16,80e71c <__umoddi3+0x588>
  80e4c4:	1463c83a 	sub	r17,r2,r17
  80e4c8:	8809883a 	mov	r4,r17
  80e4cc:	a80b883a 	mov	r5,r21
  80e4d0:	080fc100 	call	80fc10 <__udivsi3>
  80e4d4:	8809883a 	mov	r4,r17
  80e4d8:	a80b883a 	mov	r5,r21
  80e4dc:	a0a3383a 	mul	r17,r20,r2
  80e4e0:	080fc180 	call	80fc18 <__umodsi3>
  80e4e4:	d9400117 	ldw	r5,4(sp)
  80e4e8:	1004943a 	slli	r2,r2,16
  80e4ec:	28ffffcc 	andi	r3,r5,65535
  80e4f0:	10c4b03a 	or	r2,r2,r3
  80e4f4:	1440042e 	bgeu	r2,r17,80e508 <__umoddi3+0x374>
  80e4f8:	1405883a 	add	r2,r2,r16
  80e4fc:	14000236 	bltu	r2,r16,80e508 <__umoddi3+0x374>
  80e500:	1440012e 	bgeu	r2,r17,80e508 <__umoddi3+0x374>
  80e504:	1405883a 	add	r2,r2,r16
  80e508:	b5ec983a 	sll	r22,r22,r23
  80e50c:	1463c83a 	sub	r17,r2,r17
  80e510:	003f4406 	br	80e224 <__umoddi3+0x90>
  80e514:	3d4fc83a 	sub	r7,r7,r21
  80e518:	3546983a 	sll	r3,r6,r21
  80e51c:	81c4d83a 	srl	r2,r16,r7
  80e520:	a1e2d83a 	srl	r17,r20,r7
  80e524:	a54c983a 	sll	r6,r20,r21
  80e528:	18aeb03a 	or	r23,r3,r2
  80e52c:	b828d43a 	srli	r20,r23,16
  80e530:	b1c4d83a 	srl	r2,r22,r7
  80e534:	8809883a 	mov	r4,r17
  80e538:	a00b883a 	mov	r5,r20
  80e53c:	308cb03a 	or	r6,r6,r2
  80e540:	d9c00315 	stw	r7,12(sp)
  80e544:	d9800215 	stw	r6,8(sp)
  80e548:	080fc100 	call	80fc10 <__udivsi3>
  80e54c:	8809883a 	mov	r4,r17
  80e550:	a00b883a 	mov	r5,r20
  80e554:	1039883a 	mov	fp,r2
  80e558:	080fc180 	call	80fc18 <__umodsi3>
  80e55c:	b8ffffcc 	andi	r3,r23,65535
  80e560:	d8c00415 	stw	r3,16(sp)
  80e564:	d9000217 	ldw	r4,8(sp)
  80e568:	d9400417 	ldw	r5,16(sp)
  80e56c:	1004943a 	slli	r2,r2,16
  80e570:	2006d43a 	srli	r3,r4,16
  80e574:	8560983a 	sll	r16,r16,r21
  80e578:	2f23383a 	mul	r17,r5,fp
  80e57c:	10c4b03a 	or	r2,r2,r3
  80e580:	dc000015 	stw	r16,0(sp)
  80e584:	b56c983a 	sll	r22,r22,r21
  80e588:	1440032e 	bgeu	r2,r17,80e598 <__umoddi3+0x404>
  80e58c:	15c5883a 	add	r2,r2,r23
  80e590:	e73fffc4 	addi	fp,fp,-1
  80e594:	15c05d2e 	bgeu	r2,r23,80e70c <__umoddi3+0x578>
  80e598:	1463c83a 	sub	r17,r2,r17
  80e59c:	8809883a 	mov	r4,r17
  80e5a0:	a00b883a 	mov	r5,r20
  80e5a4:	080fc100 	call	80fc10 <__udivsi3>
  80e5a8:	8809883a 	mov	r4,r17
  80e5ac:	a00b883a 	mov	r5,r20
  80e5b0:	1021883a 	mov	r16,r2
  80e5b4:	080fc180 	call	80fc18 <__umodsi3>
  80e5b8:	d8c00417 	ldw	r3,16(sp)
  80e5bc:	d9000217 	ldw	r4,8(sp)
  80e5c0:	1004943a 	slli	r2,r2,16
  80e5c4:	1c23383a 	mul	r17,r3,r16
  80e5c8:	20ffffcc 	andi	r3,r4,65535
  80e5cc:	10ceb03a 	or	r7,r2,r3
  80e5d0:	3c40032e 	bgeu	r7,r17,80e5e0 <__umoddi3+0x44c>
  80e5d4:	3dcf883a 	add	r7,r7,r23
  80e5d8:	843fffc4 	addi	r16,r16,-1
  80e5dc:	3dc0472e 	bgeu	r7,r23,80e6fc <__umoddi3+0x568>
  80e5e0:	e004943a 	slli	r2,fp,16
  80e5e4:	d9400017 	ldw	r5,0(sp)
  80e5e8:	3c4fc83a 	sub	r7,r7,r17
  80e5ec:	8084b03a 	or	r2,r16,r2
  80e5f0:	28ffffcc 	andi	r3,r5,65535
  80e5f4:	280cd43a 	srli	r6,r5,16
  80e5f8:	100ad43a 	srli	r5,r2,16
  80e5fc:	10bfffcc 	andi	r2,r2,65535
  80e600:	10d1383a 	mul	r8,r2,r3
  80e604:	28c7383a 	mul	r3,r5,r3
  80e608:	1185383a 	mul	r2,r2,r6
  80e60c:	4008d43a 	srli	r4,r8,16
  80e610:	298b383a 	mul	r5,r5,r6
  80e614:	10c5883a 	add	r2,r2,r3
  80e618:	2089883a 	add	r4,r4,r2
  80e61c:	20c0022e 	bgeu	r4,r3,80e628 <__umoddi3+0x494>
  80e620:	00800074 	movhi	r2,1
  80e624:	288b883a 	add	r5,r5,r2
  80e628:	2004d43a 	srli	r2,r4,16
  80e62c:	2008943a 	slli	r4,r4,16
  80e630:	40ffffcc 	andi	r3,r8,65535
  80e634:	288b883a 	add	r5,r5,r2
  80e638:	20c9883a 	add	r4,r4,r3
  80e63c:	39400b36 	bltu	r7,r5,80e66c <__umoddi3+0x4d8>
  80e640:	39403d26 	beq	r7,r5,80e738 <__umoddi3+0x5a4>
  80e644:	394bc83a 	sub	r5,r7,r5
  80e648:	00000f06 	br	80e688 <__umoddi3+0x4f4>
  80e64c:	30c5c83a 	sub	r2,r6,r3
  80e650:	1839883a 	mov	fp,r3
  80e654:	b084d83a 	srl	r2,r22,r2
  80e658:	a0c6983a 	sll	r3,r20,r3
  80e65c:	8720983a 	sll	r16,r16,fp
  80e660:	b72c983a 	sll	r22,r22,fp
  80e664:	18a8b03a 	or	r20,r3,r2
  80e668:	003f3a06 	br	80e354 <__umoddi3+0x1c0>
  80e66c:	d8c00017 	ldw	r3,0(sp)
  80e670:	20c5c83a 	sub	r2,r4,r3
  80e674:	2089803a 	cmpltu	r4,r4,r2
  80e678:	2dc7c83a 	sub	r3,r5,r23
  80e67c:	1907c83a 	sub	r3,r3,r4
  80e680:	38cbc83a 	sub	r5,r7,r3
  80e684:	1009883a 	mov	r4,r2
  80e688:	b105c83a 	sub	r2,r22,r4
  80e68c:	b087803a 	cmpltu	r3,r22,r2
  80e690:	28c7c83a 	sub	r3,r5,r3
  80e694:	d9400317 	ldw	r5,12(sp)
  80e698:	1544d83a 	srl	r2,r2,r21
  80e69c:	1948983a 	sll	r4,r3,r5
  80e6a0:	1d46d83a 	srl	r3,r3,r21
  80e6a4:	20a4b03a 	or	r18,r4,r2
  80e6a8:	9011883a 	mov	r8,r18
  80e6ac:	1813883a 	mov	r9,r3
  80e6b0:	003ef606 	br	80e28c <__umoddi3+0xf8>
  80e6b4:	01400604 	movi	r5,24
  80e6b8:	2805883a 	mov	r2,r5
  80e6bc:	003ecc06 	br	80e1f0 <__umoddi3+0x5c>
  80e6c0:	01400204 	movi	r5,8
  80e6c4:	2805883a 	mov	r2,r5
  80e6c8:	003ec906 	br	80e1f0 <__umoddi3+0x5c>
  80e6cc:	01400204 	movi	r5,8
  80e6d0:	2805883a 	mov	r2,r5
  80e6d4:	003f0106 	br	80e2dc <__umoddi3+0x148>
  80e6d8:	01400204 	movi	r5,8
  80e6dc:	2805883a 	mov	r2,r5
  80e6e0:	003f1206 	br	80e32c <__umoddi3+0x198>
  80e6e4:	01400604 	movi	r5,24
  80e6e8:	2805883a 	mov	r2,r5
  80e6ec:	003f0f06 	br	80e32c <__umoddi3+0x198>
  80e6f0:	01400604 	movi	r5,24
  80e6f4:	2805883a 	mov	r2,r5
  80e6f8:	003ef806 	br	80e2dc <__umoddi3+0x148>
  80e6fc:	3c7fb82e 	bgeu	r7,r17,80e5e0 <__umoddi3+0x44c>
  80e700:	843fffc4 	addi	r16,r16,-1
  80e704:	3dcf883a 	add	r7,r7,r23
  80e708:	003fb506 	br	80e5e0 <__umoddi3+0x44c>
  80e70c:	147fa22e 	bgeu	r2,r17,80e598 <__umoddi3+0x404>
  80e710:	e73fffc4 	addi	fp,fp,-1
  80e714:	15c5883a 	add	r2,r2,r23
  80e718:	003f9f06 	br	80e598 <__umoddi3+0x404>
  80e71c:	147f692e 	bgeu	r2,r17,80e4c4 <__umoddi3+0x330>
  80e720:	1405883a 	add	r2,r2,r16
  80e724:	003f6706 	br	80e4c4 <__umoddi3+0x330>
  80e728:	1405883a 	add	r2,r2,r16
  80e72c:	003f1906 	br	80e394 <__umoddi3+0x200>
  80e730:	1405883a 	add	r2,r2,r16
  80e734:	003ec906 	br	80e25c <__umoddi3+0xc8>
  80e738:	b13fcc36 	bltu	r22,r4,80e66c <__umoddi3+0x4d8>
  80e73c:	000b883a 	mov	r5,zero
  80e740:	003fd106 	br	80e688 <__umoddi3+0x4f4>

0080e744 <__nesf2>:
  80e744:	defff304 	addi	sp,sp,-52
  80e748:	dc400b15 	stw	r17,44(sp)
  80e74c:	dc400204 	addi	r17,sp,8
  80e750:	dc000a15 	stw	r16,40(sp)
  80e754:	d9000015 	stw	r4,0(sp)
  80e758:	d9400115 	stw	r5,4(sp)
  80e75c:	d809883a 	mov	r4,sp
  80e760:	880b883a 	mov	r5,r17
  80e764:	dc000604 	addi	r16,sp,24
  80e768:	dfc00c15 	stw	ra,48(sp)
  80e76c:	080fca00 	call	80fca0 <__unpack_f>
  80e770:	d9000104 	addi	r4,sp,4
  80e774:	800b883a 	mov	r5,r16
  80e778:	080fca00 	call	80fca0 <__unpack_f>
  80e77c:	d8800217 	ldw	r2,8(sp)
  80e780:	00c00044 	movi	r3,1
  80e784:	180d883a 	mov	r6,r3
  80e788:	1880062e 	bgeu	r3,r2,80e7a4 <__nesf2+0x60>
  80e78c:	d8800617 	ldw	r2,24(sp)
  80e790:	8809883a 	mov	r4,r17
  80e794:	800b883a 	mov	r5,r16
  80e798:	1880022e 	bgeu	r3,r2,80e7a4 <__nesf2+0x60>
  80e79c:	080fd680 	call	80fd68 <__fpcmp_parts_f>
  80e7a0:	100d883a 	mov	r6,r2
  80e7a4:	3005883a 	mov	r2,r6
  80e7a8:	dfc00c17 	ldw	ra,48(sp)
  80e7ac:	dc400b17 	ldw	r17,44(sp)
  80e7b0:	dc000a17 	ldw	r16,40(sp)
  80e7b4:	dec00d04 	addi	sp,sp,52
  80e7b8:	f800283a 	ret

0080e7bc <__gtsf2>:
  80e7bc:	defff304 	addi	sp,sp,-52
  80e7c0:	dc400b15 	stw	r17,44(sp)
  80e7c4:	dc400204 	addi	r17,sp,8
  80e7c8:	dc000a15 	stw	r16,40(sp)
  80e7cc:	d9000015 	stw	r4,0(sp)
  80e7d0:	d9400115 	stw	r5,4(sp)
  80e7d4:	d809883a 	mov	r4,sp
  80e7d8:	880b883a 	mov	r5,r17
  80e7dc:	dc000604 	addi	r16,sp,24
  80e7e0:	dfc00c15 	stw	ra,48(sp)
  80e7e4:	080fca00 	call	80fca0 <__unpack_f>
  80e7e8:	d9000104 	addi	r4,sp,4
  80e7ec:	800b883a 	mov	r5,r16
  80e7f0:	080fca00 	call	80fca0 <__unpack_f>
  80e7f4:	d8800217 	ldw	r2,8(sp)
  80e7f8:	00c00044 	movi	r3,1
  80e7fc:	01bfffc4 	movi	r6,-1
  80e800:	1880062e 	bgeu	r3,r2,80e81c <__gtsf2+0x60>
  80e804:	d8800617 	ldw	r2,24(sp)
  80e808:	8809883a 	mov	r4,r17
  80e80c:	800b883a 	mov	r5,r16
  80e810:	1880022e 	bgeu	r3,r2,80e81c <__gtsf2+0x60>
  80e814:	080fd680 	call	80fd68 <__fpcmp_parts_f>
  80e818:	100d883a 	mov	r6,r2
  80e81c:	3005883a 	mov	r2,r6
  80e820:	dfc00c17 	ldw	ra,48(sp)
  80e824:	dc400b17 	ldw	r17,44(sp)
  80e828:	dc000a17 	ldw	r16,40(sp)
  80e82c:	dec00d04 	addi	sp,sp,52
  80e830:	f800283a 	ret

0080e834 <__ltsf2>:
  80e834:	defff304 	addi	sp,sp,-52
  80e838:	dc400b15 	stw	r17,44(sp)
  80e83c:	dc400204 	addi	r17,sp,8
  80e840:	dc000a15 	stw	r16,40(sp)
  80e844:	d9000015 	stw	r4,0(sp)
  80e848:	d9400115 	stw	r5,4(sp)
  80e84c:	d809883a 	mov	r4,sp
  80e850:	880b883a 	mov	r5,r17
  80e854:	dc000604 	addi	r16,sp,24
  80e858:	dfc00c15 	stw	ra,48(sp)
  80e85c:	080fca00 	call	80fca0 <__unpack_f>
  80e860:	d9000104 	addi	r4,sp,4
  80e864:	800b883a 	mov	r5,r16
  80e868:	080fca00 	call	80fca0 <__unpack_f>
  80e86c:	d8800217 	ldw	r2,8(sp)
  80e870:	00c00044 	movi	r3,1
  80e874:	180d883a 	mov	r6,r3
  80e878:	1880062e 	bgeu	r3,r2,80e894 <__ltsf2+0x60>
  80e87c:	d8800617 	ldw	r2,24(sp)
  80e880:	8809883a 	mov	r4,r17
  80e884:	800b883a 	mov	r5,r16
  80e888:	1880022e 	bgeu	r3,r2,80e894 <__ltsf2+0x60>
  80e88c:	080fd680 	call	80fd68 <__fpcmp_parts_f>
  80e890:	100d883a 	mov	r6,r2
  80e894:	3005883a 	mov	r2,r6
  80e898:	dfc00c17 	ldw	ra,48(sp)
  80e89c:	dc400b17 	ldw	r17,44(sp)
  80e8a0:	dc000a17 	ldw	r16,40(sp)
  80e8a4:	dec00d04 	addi	sp,sp,52
  80e8a8:	f800283a 	ret

0080e8ac <_fpadd_parts>:
  80e8ac:	defff804 	addi	sp,sp,-32
  80e8b0:	dcc00315 	stw	r19,12(sp)
  80e8b4:	2027883a 	mov	r19,r4
  80e8b8:	21000017 	ldw	r4,0(r4)
  80e8bc:	00c00044 	movi	r3,1
  80e8c0:	dd400515 	stw	r21,20(sp)
  80e8c4:	dd000415 	stw	r20,16(sp)
  80e8c8:	ddc00715 	stw	r23,28(sp)
  80e8cc:	dd800615 	stw	r22,24(sp)
  80e8d0:	dc800215 	stw	r18,8(sp)
  80e8d4:	dc400115 	stw	r17,4(sp)
  80e8d8:	dc000015 	stw	r16,0(sp)
  80e8dc:	282b883a 	mov	r21,r5
  80e8e0:	3029883a 	mov	r20,r6
  80e8e4:	1900632e 	bgeu	r3,r4,80ea74 <_fpadd_parts+0x1c8>
  80e8e8:	28800017 	ldw	r2,0(r5)
  80e8ec:	1880812e 	bgeu	r3,r2,80eaf4 <_fpadd_parts+0x248>
  80e8f0:	00c00104 	movi	r3,4
  80e8f4:	20c0dc26 	beq	r4,r3,80ec68 <_fpadd_parts+0x3bc>
  80e8f8:	10c07e26 	beq	r2,r3,80eaf4 <_fpadd_parts+0x248>
  80e8fc:	00c00084 	movi	r3,2
  80e900:	10c06726 	beq	r2,r3,80eaa0 <_fpadd_parts+0x1f4>
  80e904:	20c07b26 	beq	r4,r3,80eaf4 <_fpadd_parts+0x248>
  80e908:	9dc00217 	ldw	r23,8(r19)
  80e90c:	28c00217 	ldw	r3,8(r5)
  80e910:	9c400317 	ldw	r17,12(r19)
  80e914:	2bc00317 	ldw	r15,12(r5)
  80e918:	b8cdc83a 	sub	r6,r23,r3
  80e91c:	9c800417 	ldw	r18,16(r19)
  80e920:	2c000417 	ldw	r16,16(r5)
  80e924:	3009883a 	mov	r4,r6
  80e928:	30009716 	blt	r6,zero,80eb88 <_fpadd_parts+0x2dc>
  80e92c:	00800fc4 	movi	r2,63
  80e930:	11806b16 	blt	r2,r6,80eae0 <_fpadd_parts+0x234>
  80e934:	0100a40e 	bge	zero,r4,80ebc8 <_fpadd_parts+0x31c>
  80e938:	35bff804 	addi	r22,r6,-32
  80e93c:	b000bc16 	blt	r22,zero,80ec30 <_fpadd_parts+0x384>
  80e940:	8596d83a 	srl	r11,r16,r22
  80e944:	0019883a 	mov	r12,zero
  80e948:	0013883a 	mov	r9,zero
  80e94c:	01000044 	movi	r4,1
  80e950:	0015883a 	mov	r10,zero
  80e954:	b000be16 	blt	r22,zero,80ec50 <_fpadd_parts+0x3a4>
  80e958:	2590983a 	sll	r8,r4,r22
  80e95c:	000f883a 	mov	r7,zero
  80e960:	00bfffc4 	movi	r2,-1
  80e964:	3889883a 	add	r4,r7,r2
  80e968:	408b883a 	add	r5,r8,r2
  80e96c:	21cd803a 	cmpltu	r6,r4,r7
  80e970:	314b883a 	add	r5,r6,r5
  80e974:	7904703a 	and	r2,r15,r4
  80e978:	8146703a 	and	r3,r16,r5
  80e97c:	10c4b03a 	or	r2,r2,r3
  80e980:	10000226 	beq	r2,zero,80e98c <_fpadd_parts+0xe0>
  80e984:	02400044 	movi	r9,1
  80e988:	0015883a 	mov	r10,zero
  80e98c:	5a5eb03a 	or	r15,r11,r9
  80e990:	62a0b03a 	or	r16,r12,r10
  80e994:	99400117 	ldw	r5,4(r19)
  80e998:	a8800117 	ldw	r2,4(r21)
  80e99c:	28806e26 	beq	r5,r2,80eb58 <_fpadd_parts+0x2ac>
  80e9a0:	28006626 	beq	r5,zero,80eb3c <_fpadd_parts+0x290>
  80e9a4:	7c45c83a 	sub	r2,r15,r17
  80e9a8:	7889803a 	cmpltu	r4,r15,r2
  80e9ac:	8487c83a 	sub	r3,r16,r18
  80e9b0:	1909c83a 	sub	r4,r3,r4
  80e9b4:	100d883a 	mov	r6,r2
  80e9b8:	200f883a 	mov	r7,r4
  80e9bc:	38007716 	blt	r7,zero,80eb9c <_fpadd_parts+0x2f0>
  80e9c0:	a5c00215 	stw	r23,8(r20)
  80e9c4:	a1c00415 	stw	r7,16(r20)
  80e9c8:	a0000115 	stw	zero,4(r20)
  80e9cc:	a1800315 	stw	r6,12(r20)
  80e9d0:	a2000317 	ldw	r8,12(r20)
  80e9d4:	a2400417 	ldw	r9,16(r20)
  80e9d8:	00bfffc4 	movi	r2,-1
  80e9dc:	408b883a 	add	r5,r8,r2
  80e9e0:	2a09803a 	cmpltu	r4,r5,r8
  80e9e4:	488d883a 	add	r6,r9,r2
  80e9e8:	01c40034 	movhi	r7,4096
  80e9ec:	39ffffc4 	addi	r7,r7,-1
  80e9f0:	218d883a 	add	r6,r4,r6
  80e9f4:	39801736 	bltu	r7,r6,80ea54 <_fpadd_parts+0x1a8>
  80e9f8:	31c06526 	beq	r6,r7,80eb90 <_fpadd_parts+0x2e4>
  80e9fc:	a3000217 	ldw	r12,8(r20)
  80ea00:	4209883a 	add	r4,r8,r8
  80ea04:	00bfffc4 	movi	r2,-1
  80ea08:	220f803a 	cmpltu	r7,r4,r8
  80ea0c:	4a4b883a 	add	r5,r9,r9
  80ea10:	394f883a 	add	r7,r7,r5
  80ea14:	2095883a 	add	r10,r4,r2
  80ea18:	3897883a 	add	r11,r7,r2
  80ea1c:	510d803a 	cmpltu	r6,r10,r4
  80ea20:	6099883a 	add	r12,r12,r2
  80ea24:	32d7883a 	add	r11,r6,r11
  80ea28:	00840034 	movhi	r2,4096
  80ea2c:	10bfffc4 	addi	r2,r2,-1
  80ea30:	2011883a 	mov	r8,r4
  80ea34:	3813883a 	mov	r9,r7
  80ea38:	a1000315 	stw	r4,12(r20)
  80ea3c:	a1c00415 	stw	r7,16(r20)
  80ea40:	a3000215 	stw	r12,8(r20)
  80ea44:	12c00336 	bltu	r2,r11,80ea54 <_fpadd_parts+0x1a8>
  80ea48:	58bfed1e 	bne	r11,r2,80ea00 <_fpadd_parts+0x154>
  80ea4c:	00bfff84 	movi	r2,-2
  80ea50:	12bfeb2e 	bgeu	r2,r10,80ea00 <_fpadd_parts+0x154>
  80ea54:	a2800417 	ldw	r10,16(r20)
  80ea58:	008000c4 	movi	r2,3
  80ea5c:	00c80034 	movhi	r3,8192
  80ea60:	18ffffc4 	addi	r3,r3,-1
  80ea64:	a2400317 	ldw	r9,12(r20)
  80ea68:	a0800015 	stw	r2,0(r20)
  80ea6c:	1a802336 	bltu	r3,r10,80eafc <_fpadd_parts+0x250>
  80ea70:	a027883a 	mov	r19,r20
  80ea74:	9805883a 	mov	r2,r19
  80ea78:	ddc00717 	ldw	r23,28(sp)
  80ea7c:	dd800617 	ldw	r22,24(sp)
  80ea80:	dd400517 	ldw	r21,20(sp)
  80ea84:	dd000417 	ldw	r20,16(sp)
  80ea88:	dcc00317 	ldw	r19,12(sp)
  80ea8c:	dc800217 	ldw	r18,8(sp)
  80ea90:	dc400117 	ldw	r17,4(sp)
  80ea94:	dc000017 	ldw	r16,0(sp)
  80ea98:	dec00804 	addi	sp,sp,32
  80ea9c:	f800283a 	ret
  80eaa0:	20fff41e 	bne	r4,r3,80ea74 <_fpadd_parts+0x1c8>
  80eaa4:	31000015 	stw	r4,0(r6)
  80eaa8:	98800117 	ldw	r2,4(r19)
  80eaac:	30800115 	stw	r2,4(r6)
  80eab0:	98c00217 	ldw	r3,8(r19)
  80eab4:	30c00215 	stw	r3,8(r6)
  80eab8:	98800317 	ldw	r2,12(r19)
  80eabc:	30800315 	stw	r2,12(r6)
  80eac0:	98c00417 	ldw	r3,16(r19)
  80eac4:	30c00415 	stw	r3,16(r6)
  80eac8:	98800117 	ldw	r2,4(r19)
  80eacc:	28c00117 	ldw	r3,4(r5)
  80ead0:	3027883a 	mov	r19,r6
  80ead4:	10c4703a 	and	r2,r2,r3
  80ead8:	30800115 	stw	r2,4(r6)
  80eadc:	003fe506 	br	80ea74 <_fpadd_parts+0x1c8>
  80eae0:	1dc02616 	blt	r3,r23,80eb7c <_fpadd_parts+0x2d0>
  80eae4:	0023883a 	mov	r17,zero
  80eae8:	182f883a 	mov	r23,r3
  80eaec:	0025883a 	mov	r18,zero
  80eaf0:	003fa806 	br	80e994 <_fpadd_parts+0xe8>
  80eaf4:	a827883a 	mov	r19,r21
  80eaf8:	003fde06 	br	80ea74 <_fpadd_parts+0x1c8>
  80eafc:	01800044 	movi	r6,1
  80eb00:	500497fa 	slli	r2,r10,31
  80eb04:	4808d07a 	srli	r4,r9,1
  80eb08:	518ad83a 	srl	r5,r10,r6
  80eb0c:	a2000217 	ldw	r8,8(r20)
  80eb10:	1108b03a 	or	r4,r2,r4
  80eb14:	0007883a 	mov	r3,zero
  80eb18:	4984703a 	and	r2,r9,r6
  80eb1c:	208cb03a 	or	r6,r4,r2
  80eb20:	28ceb03a 	or	r7,r5,r3
  80eb24:	42000044 	addi	r8,r8,1
  80eb28:	a027883a 	mov	r19,r20
  80eb2c:	a1c00415 	stw	r7,16(r20)
  80eb30:	a2000215 	stw	r8,8(r20)
  80eb34:	a1800315 	stw	r6,12(r20)
  80eb38:	003fce06 	br	80ea74 <_fpadd_parts+0x1c8>
  80eb3c:	8bc5c83a 	sub	r2,r17,r15
  80eb40:	8889803a 	cmpltu	r4,r17,r2
  80eb44:	9407c83a 	sub	r3,r18,r16
  80eb48:	1909c83a 	sub	r4,r3,r4
  80eb4c:	100d883a 	mov	r6,r2
  80eb50:	200f883a 	mov	r7,r4
  80eb54:	003f9906 	br	80e9bc <_fpadd_parts+0x110>
  80eb58:	7c45883a 	add	r2,r15,r17
  80eb5c:	13c9803a 	cmpltu	r4,r2,r15
  80eb60:	8487883a 	add	r3,r16,r18
  80eb64:	20c9883a 	add	r4,r4,r3
  80eb68:	a1400115 	stw	r5,4(r20)
  80eb6c:	a5c00215 	stw	r23,8(r20)
  80eb70:	a0800315 	stw	r2,12(r20)
  80eb74:	a1000415 	stw	r4,16(r20)
  80eb78:	003fb606 	br	80ea54 <_fpadd_parts+0x1a8>
  80eb7c:	001f883a 	mov	r15,zero
  80eb80:	0021883a 	mov	r16,zero
  80eb84:	003f8306 	br	80e994 <_fpadd_parts+0xe8>
  80eb88:	018dc83a 	sub	r6,zero,r6
  80eb8c:	003f6706 	br	80e92c <_fpadd_parts+0x80>
  80eb90:	00bfff84 	movi	r2,-2
  80eb94:	117faf36 	bltu	r2,r5,80ea54 <_fpadd_parts+0x1a8>
  80eb98:	003f9806 	br	80e9fc <_fpadd_parts+0x150>
  80eb9c:	0005883a 	mov	r2,zero
  80eba0:	1189c83a 	sub	r4,r2,r6
  80eba4:	1105803a 	cmpltu	r2,r2,r4
  80eba8:	01cbc83a 	sub	r5,zero,r7
  80ebac:	2885c83a 	sub	r2,r5,r2
  80ebb0:	01800044 	movi	r6,1
  80ebb4:	a1800115 	stw	r6,4(r20)
  80ebb8:	a5c00215 	stw	r23,8(r20)
  80ebbc:	a1000315 	stw	r4,12(r20)
  80ebc0:	a0800415 	stw	r2,16(r20)
  80ebc4:	003f8206 	br	80e9d0 <_fpadd_parts+0x124>
  80ebc8:	203f7226 	beq	r4,zero,80e994 <_fpadd_parts+0xe8>
  80ebcc:	35bff804 	addi	r22,r6,-32
  80ebd0:	b9af883a 	add	r23,r23,r6
  80ebd4:	b0003116 	blt	r22,zero,80ec9c <_fpadd_parts+0x3f0>
  80ebd8:	959ad83a 	srl	r13,r18,r22
  80ebdc:	001d883a 	mov	r14,zero
  80ebe0:	000f883a 	mov	r7,zero
  80ebe4:	01000044 	movi	r4,1
  80ebe8:	0011883a 	mov	r8,zero
  80ebec:	b0002516 	blt	r22,zero,80ec84 <_fpadd_parts+0x3d8>
  80ebf0:	2594983a 	sll	r10,r4,r22
  80ebf4:	0013883a 	mov	r9,zero
  80ebf8:	00bfffc4 	movi	r2,-1
  80ebfc:	4889883a 	add	r4,r9,r2
  80ec00:	508b883a 	add	r5,r10,r2
  80ec04:	224d803a 	cmpltu	r6,r4,r9
  80ec08:	314b883a 	add	r5,r6,r5
  80ec0c:	8904703a 	and	r2,r17,r4
  80ec10:	9146703a 	and	r3,r18,r5
  80ec14:	10c4b03a 	or	r2,r2,r3
  80ec18:	10000226 	beq	r2,zero,80ec24 <_fpadd_parts+0x378>
  80ec1c:	01c00044 	movi	r7,1
  80ec20:	0011883a 	mov	r8,zero
  80ec24:	69e2b03a 	or	r17,r13,r7
  80ec28:	7224b03a 	or	r18,r14,r8
  80ec2c:	003f5906 	br	80e994 <_fpadd_parts+0xe8>
  80ec30:	8407883a 	add	r3,r16,r16
  80ec34:	008007c4 	movi	r2,31
  80ec38:	1185c83a 	sub	r2,r2,r6
  80ec3c:	1886983a 	sll	r3,r3,r2
  80ec40:	7996d83a 	srl	r11,r15,r6
  80ec44:	8198d83a 	srl	r12,r16,r6
  80ec48:	1ad6b03a 	or	r11,r3,r11
  80ec4c:	003f3e06 	br	80e948 <_fpadd_parts+0x9c>
  80ec50:	2006d07a 	srli	r3,r4,1
  80ec54:	008007c4 	movi	r2,31
  80ec58:	1185c83a 	sub	r2,r2,r6
  80ec5c:	1890d83a 	srl	r8,r3,r2
  80ec60:	218e983a 	sll	r7,r4,r6
  80ec64:	003f3e06 	br	80e960 <_fpadd_parts+0xb4>
  80ec68:	113f821e 	bne	r2,r4,80ea74 <_fpadd_parts+0x1c8>
  80ec6c:	28c00117 	ldw	r3,4(r5)
  80ec70:	98800117 	ldw	r2,4(r19)
  80ec74:	10ff7f26 	beq	r2,r3,80ea74 <_fpadd_parts+0x1c8>
  80ec78:	04c02074 	movhi	r19,129
  80ec7c:	9cd46c04 	addi	r19,r19,20912
  80ec80:	003f7c06 	br	80ea74 <_fpadd_parts+0x1c8>
  80ec84:	2006d07a 	srli	r3,r4,1
  80ec88:	008007c4 	movi	r2,31
  80ec8c:	1185c83a 	sub	r2,r2,r6
  80ec90:	1894d83a 	srl	r10,r3,r2
  80ec94:	2192983a 	sll	r9,r4,r6
  80ec98:	003fd706 	br	80ebf8 <_fpadd_parts+0x34c>
  80ec9c:	9487883a 	add	r3,r18,r18
  80eca0:	008007c4 	movi	r2,31
  80eca4:	1185c83a 	sub	r2,r2,r6
  80eca8:	1886983a 	sll	r3,r3,r2
  80ecac:	899ad83a 	srl	r13,r17,r6
  80ecb0:	919cd83a 	srl	r14,r18,r6
  80ecb4:	1b5ab03a 	or	r13,r3,r13
  80ecb8:	003fc906 	br	80ebe0 <_fpadd_parts+0x334>

0080ecbc <__subdf3>:
  80ecbc:	deffea04 	addi	sp,sp,-88
  80ecc0:	dcc01415 	stw	r19,80(sp)
  80ecc4:	dcc00404 	addi	r19,sp,16
  80ecc8:	2011883a 	mov	r8,r4
  80eccc:	2813883a 	mov	r9,r5
  80ecd0:	dc401315 	stw	r17,76(sp)
  80ecd4:	d809883a 	mov	r4,sp
  80ecd8:	980b883a 	mov	r5,r19
  80ecdc:	dc400904 	addi	r17,sp,36
  80ece0:	dfc01515 	stw	ra,84(sp)
  80ece4:	da400115 	stw	r9,4(sp)
  80ece8:	d9c00315 	stw	r7,12(sp)
  80ecec:	da000015 	stw	r8,0(sp)
  80ecf0:	d9800215 	stw	r6,8(sp)
  80ecf4:	08101500 	call	810150 <__unpack_d>
  80ecf8:	d9000204 	addi	r4,sp,8
  80ecfc:	880b883a 	mov	r5,r17
  80ed00:	08101500 	call	810150 <__unpack_d>
  80ed04:	d8800a17 	ldw	r2,40(sp)
  80ed08:	880b883a 	mov	r5,r17
  80ed0c:	9809883a 	mov	r4,r19
  80ed10:	d9800e04 	addi	r6,sp,56
  80ed14:	1080005c 	xori	r2,r2,1
  80ed18:	d8800a15 	stw	r2,40(sp)
  80ed1c:	080e8ac0 	call	80e8ac <_fpadd_parts>
  80ed20:	1009883a 	mov	r4,r2
  80ed24:	080fe3c0 	call	80fe3c <__pack_d>
  80ed28:	dfc01517 	ldw	ra,84(sp)
  80ed2c:	dcc01417 	ldw	r19,80(sp)
  80ed30:	dc401317 	ldw	r17,76(sp)
  80ed34:	dec01604 	addi	sp,sp,88
  80ed38:	f800283a 	ret

0080ed3c <__adddf3>:
  80ed3c:	deffea04 	addi	sp,sp,-88
  80ed40:	dcc01415 	stw	r19,80(sp)
  80ed44:	dcc00404 	addi	r19,sp,16
  80ed48:	2011883a 	mov	r8,r4
  80ed4c:	2813883a 	mov	r9,r5
  80ed50:	dc401315 	stw	r17,76(sp)
  80ed54:	d809883a 	mov	r4,sp
  80ed58:	980b883a 	mov	r5,r19
  80ed5c:	dc400904 	addi	r17,sp,36
  80ed60:	dfc01515 	stw	ra,84(sp)
  80ed64:	da400115 	stw	r9,4(sp)
  80ed68:	d9c00315 	stw	r7,12(sp)
  80ed6c:	da000015 	stw	r8,0(sp)
  80ed70:	d9800215 	stw	r6,8(sp)
  80ed74:	08101500 	call	810150 <__unpack_d>
  80ed78:	d9000204 	addi	r4,sp,8
  80ed7c:	880b883a 	mov	r5,r17
  80ed80:	08101500 	call	810150 <__unpack_d>
  80ed84:	d9800e04 	addi	r6,sp,56
  80ed88:	9809883a 	mov	r4,r19
  80ed8c:	880b883a 	mov	r5,r17
  80ed90:	080e8ac0 	call	80e8ac <_fpadd_parts>
  80ed94:	1009883a 	mov	r4,r2
  80ed98:	080fe3c0 	call	80fe3c <__pack_d>
  80ed9c:	dfc01517 	ldw	ra,84(sp)
  80eda0:	dcc01417 	ldw	r19,80(sp)
  80eda4:	dc401317 	ldw	r17,76(sp)
  80eda8:	dec01604 	addi	sp,sp,88
  80edac:	f800283a 	ret

0080edb0 <__muldf3>:
  80edb0:	deffe004 	addi	sp,sp,-128
  80edb4:	dc401815 	stw	r17,96(sp)
  80edb8:	dc400404 	addi	r17,sp,16
  80edbc:	2011883a 	mov	r8,r4
  80edc0:	2813883a 	mov	r9,r5
  80edc4:	dc001715 	stw	r16,92(sp)
  80edc8:	d809883a 	mov	r4,sp
  80edcc:	880b883a 	mov	r5,r17
  80edd0:	dc000904 	addi	r16,sp,36
  80edd4:	dfc01f15 	stw	ra,124(sp)
  80edd8:	da400115 	stw	r9,4(sp)
  80eddc:	d9c00315 	stw	r7,12(sp)
  80ede0:	da000015 	stw	r8,0(sp)
  80ede4:	d9800215 	stw	r6,8(sp)
  80ede8:	ddc01e15 	stw	r23,120(sp)
  80edec:	dd801d15 	stw	r22,116(sp)
  80edf0:	dd401c15 	stw	r21,112(sp)
  80edf4:	dd001b15 	stw	r20,108(sp)
  80edf8:	dcc01a15 	stw	r19,104(sp)
  80edfc:	dc801915 	stw	r18,100(sp)
  80ee00:	08101500 	call	810150 <__unpack_d>
  80ee04:	d9000204 	addi	r4,sp,8
  80ee08:	800b883a 	mov	r5,r16
  80ee0c:	08101500 	call	810150 <__unpack_d>
  80ee10:	d9000417 	ldw	r4,16(sp)
  80ee14:	00800044 	movi	r2,1
  80ee18:	1100102e 	bgeu	r2,r4,80ee5c <__muldf3+0xac>
  80ee1c:	d8c00917 	ldw	r3,36(sp)
  80ee20:	10c0062e 	bgeu	r2,r3,80ee3c <__muldf3+0x8c>
  80ee24:	00800104 	movi	r2,4
  80ee28:	20800a26 	beq	r4,r2,80ee54 <__muldf3+0xa4>
  80ee2c:	1880cc26 	beq	r3,r2,80f160 <__muldf3+0x3b0>
  80ee30:	00800084 	movi	r2,2
  80ee34:	20800926 	beq	r4,r2,80ee5c <__muldf3+0xac>
  80ee38:	1880191e 	bne	r3,r2,80eea0 <__muldf3+0xf0>
  80ee3c:	d8c00a17 	ldw	r3,40(sp)
  80ee40:	d8800517 	ldw	r2,20(sp)
  80ee44:	8009883a 	mov	r4,r16
  80ee48:	10c4c03a 	cmpne	r2,r2,r3
  80ee4c:	d8800a15 	stw	r2,40(sp)
  80ee50:	00000706 	br	80ee70 <__muldf3+0xc0>
  80ee54:	00800084 	movi	r2,2
  80ee58:	1880c326 	beq	r3,r2,80f168 <__muldf3+0x3b8>
  80ee5c:	d8800517 	ldw	r2,20(sp)
  80ee60:	d8c00a17 	ldw	r3,40(sp)
  80ee64:	8809883a 	mov	r4,r17
  80ee68:	10c4c03a 	cmpne	r2,r2,r3
  80ee6c:	d8800515 	stw	r2,20(sp)
  80ee70:	080fe3c0 	call	80fe3c <__pack_d>
  80ee74:	dfc01f17 	ldw	ra,124(sp)
  80ee78:	ddc01e17 	ldw	r23,120(sp)
  80ee7c:	dd801d17 	ldw	r22,116(sp)
  80ee80:	dd401c17 	ldw	r21,112(sp)
  80ee84:	dd001b17 	ldw	r20,108(sp)
  80ee88:	dcc01a17 	ldw	r19,104(sp)
  80ee8c:	dc801917 	ldw	r18,100(sp)
  80ee90:	dc401817 	ldw	r17,96(sp)
  80ee94:	dc001717 	ldw	r16,92(sp)
  80ee98:	dec02004 	addi	sp,sp,128
  80ee9c:	f800283a 	ret
  80eea0:	dd800717 	ldw	r22,28(sp)
  80eea4:	dc800c17 	ldw	r18,48(sp)
  80eea8:	002b883a 	mov	r21,zero
  80eeac:	0023883a 	mov	r17,zero
  80eeb0:	a80b883a 	mov	r5,r21
  80eeb4:	b00d883a 	mov	r6,r22
  80eeb8:	880f883a 	mov	r7,r17
  80eebc:	ddc00817 	ldw	r23,32(sp)
  80eec0:	dcc00d17 	ldw	r19,52(sp)
  80eec4:	9009883a 	mov	r4,r18
  80eec8:	080da7c0 	call	80da7c <__muldi3>
  80eecc:	001b883a 	mov	r13,zero
  80eed0:	680f883a 	mov	r7,r13
  80eed4:	b009883a 	mov	r4,r22
  80eed8:	000b883a 	mov	r5,zero
  80eedc:	980d883a 	mov	r6,r19
  80eee0:	b82d883a 	mov	r22,r23
  80eee4:	002f883a 	mov	r23,zero
  80eee8:	db401615 	stw	r13,88(sp)
  80eeec:	d8801315 	stw	r2,76(sp)
  80eef0:	d8c01415 	stw	r3,80(sp)
  80eef4:	dcc01515 	stw	r19,84(sp)
  80eef8:	080da7c0 	call	80da7c <__muldi3>
  80eefc:	b00d883a 	mov	r6,r22
  80ef00:	000b883a 	mov	r5,zero
  80ef04:	9009883a 	mov	r4,r18
  80ef08:	b80f883a 	mov	r7,r23
  80ef0c:	1021883a 	mov	r16,r2
  80ef10:	1823883a 	mov	r17,r3
  80ef14:	080da7c0 	call	80da7c <__muldi3>
  80ef18:	8085883a 	add	r2,r16,r2
  80ef1c:	140d803a 	cmpltu	r6,r2,r16
  80ef20:	88c7883a 	add	r3,r17,r3
  80ef24:	30cd883a 	add	r6,r6,r3
  80ef28:	1029883a 	mov	r20,r2
  80ef2c:	302b883a 	mov	r21,r6
  80ef30:	da801317 	ldw	r10,76(sp)
  80ef34:	dac01417 	ldw	r11,80(sp)
  80ef38:	db001517 	ldw	r12,84(sp)
  80ef3c:	db401617 	ldw	r13,88(sp)
  80ef40:	3440612e 	bgeu	r6,r17,80f0c8 <__muldf3+0x318>
  80ef44:	0009883a 	mov	r4,zero
  80ef48:	5105883a 	add	r2,r10,r4
  80ef4c:	128d803a 	cmpltu	r6,r2,r10
  80ef50:	5d07883a 	add	r3,r11,r20
  80ef54:	30cd883a 	add	r6,r6,r3
  80ef58:	0021883a 	mov	r16,zero
  80ef5c:	04400044 	movi	r17,1
  80ef60:	1025883a 	mov	r18,r2
  80ef64:	3027883a 	mov	r19,r6
  80ef68:	32c06236 	bltu	r6,r11,80f0f4 <__muldf3+0x344>
  80ef6c:	59807a26 	beq	r11,r6,80f158 <__muldf3+0x3a8>
  80ef70:	680b883a 	mov	r5,r13
  80ef74:	b80f883a 	mov	r7,r23
  80ef78:	6009883a 	mov	r4,r12
  80ef7c:	b00d883a 	mov	r6,r22
  80ef80:	080da7c0 	call	80da7c <__muldi3>
  80ef84:	1009883a 	mov	r4,r2
  80ef88:	000f883a 	mov	r7,zero
  80ef8c:	1545883a 	add	r2,r2,r21
  80ef90:	1111803a 	cmpltu	r8,r2,r4
  80ef94:	19c7883a 	add	r3,r3,r7
  80ef98:	40c7883a 	add	r3,r8,r3
  80ef9c:	88cb883a 	add	r5,r17,r3
  80efa0:	d8c00617 	ldw	r3,24(sp)
  80efa4:	8089883a 	add	r4,r16,r2
  80efa8:	d8800b17 	ldw	r2,44(sp)
  80efac:	18c00104 	addi	r3,r3,4
  80efb0:	240d803a 	cmpltu	r6,r4,r16
  80efb4:	10c7883a 	add	r3,r2,r3
  80efb8:	2013883a 	mov	r9,r4
  80efbc:	d8800a17 	ldw	r2,40(sp)
  80efc0:	d9000517 	ldw	r4,20(sp)
  80efc4:	314d883a 	add	r6,r6,r5
  80efc8:	3015883a 	mov	r10,r6
  80efcc:	2088c03a 	cmpne	r4,r4,r2
  80efd0:	00880034 	movhi	r2,8192
  80efd4:	10bfffc4 	addi	r2,r2,-1
  80efd8:	d9000f15 	stw	r4,60(sp)
  80efdc:	d8c01015 	stw	r3,64(sp)
  80efe0:	1180162e 	bgeu	r2,r6,80f03c <__muldf3+0x28c>
  80efe4:	1811883a 	mov	r8,r3
  80efe8:	101f883a 	mov	r15,r2
  80efec:	980497fa 	slli	r2,r19,31
  80eff0:	9016d07a 	srli	r11,r18,1
  80eff4:	500697fa 	slli	r3,r10,31
  80eff8:	480cd07a 	srli	r6,r9,1
  80effc:	500ed07a 	srli	r7,r10,1
  80f000:	12d6b03a 	or	r11,r2,r11
  80f004:	00800044 	movi	r2,1
  80f008:	198cb03a 	or	r6,r3,r6
  80f00c:	4888703a 	and	r4,r9,r2
  80f010:	9818d07a 	srli	r12,r19,1
  80f014:	001b883a 	mov	r13,zero
  80f018:	03a00034 	movhi	r14,32768
  80f01c:	3013883a 	mov	r9,r6
  80f020:	3815883a 	mov	r10,r7
  80f024:	4091883a 	add	r8,r8,r2
  80f028:	20000226 	beq	r4,zero,80f034 <__muldf3+0x284>
  80f02c:	5b64b03a 	or	r18,r11,r13
  80f030:	63a6b03a 	or	r19,r12,r14
  80f034:	7abfed36 	bltu	r15,r10,80efec <__muldf3+0x23c>
  80f038:	da001015 	stw	r8,64(sp)
  80f03c:	00840034 	movhi	r2,4096
  80f040:	10bfffc4 	addi	r2,r2,-1
  80f044:	12801436 	bltu	r2,r10,80f098 <__muldf3+0x2e8>
  80f048:	da001017 	ldw	r8,64(sp)
  80f04c:	101f883a 	mov	r15,r2
  80f050:	4a45883a 	add	r2,r9,r9
  80f054:	124d803a 	cmpltu	r6,r2,r9
  80f058:	5287883a 	add	r3,r10,r10
  80f05c:	9497883a 	add	r11,r18,r18
  80f060:	5c8f803a 	cmpltu	r7,r11,r18
  80f064:	9cd9883a 	add	r12,r19,r19
  80f068:	01000044 	movi	r4,1
  80f06c:	30cd883a 	add	r6,r6,r3
  80f070:	3b0f883a 	add	r7,r7,r12
  80f074:	423fffc4 	addi	r8,r8,-1
  80f078:	1013883a 	mov	r9,r2
  80f07c:	3015883a 	mov	r10,r6
  80f080:	111ab03a 	or	r13,r2,r4
  80f084:	98003016 	blt	r19,zero,80f148 <__muldf3+0x398>
  80f088:	5825883a 	mov	r18,r11
  80f08c:	3827883a 	mov	r19,r7
  80f090:	7abfef2e 	bgeu	r15,r10,80f050 <__muldf3+0x2a0>
  80f094:	da001015 	stw	r8,64(sp)
  80f098:	00803fc4 	movi	r2,255
  80f09c:	488e703a 	and	r7,r9,r2
  80f0a0:	00802004 	movi	r2,128
  80f0a4:	0007883a 	mov	r3,zero
  80f0a8:	0011883a 	mov	r8,zero
  80f0ac:	38801826 	beq	r7,r2,80f110 <__muldf3+0x360>
  80f0b0:	008000c4 	movi	r2,3
  80f0b4:	d9000e04 	addi	r4,sp,56
  80f0b8:	da801215 	stw	r10,72(sp)
  80f0bc:	d8800e15 	stw	r2,56(sp)
  80f0c0:	da401115 	stw	r9,68(sp)
  80f0c4:	003f6a06 	br	80ee70 <__muldf3+0xc0>
  80f0c8:	89802126 	beq	r17,r6,80f150 <__muldf3+0x3a0>
  80f0cc:	0009883a 	mov	r4,zero
  80f0d0:	5105883a 	add	r2,r10,r4
  80f0d4:	128d803a 	cmpltu	r6,r2,r10
  80f0d8:	5d07883a 	add	r3,r11,r20
  80f0dc:	30cd883a 	add	r6,r6,r3
  80f0e0:	0021883a 	mov	r16,zero
  80f0e4:	0023883a 	mov	r17,zero
  80f0e8:	1025883a 	mov	r18,r2
  80f0ec:	3027883a 	mov	r19,r6
  80f0f0:	32ff9e2e 	bgeu	r6,r11,80ef6c <__muldf3+0x1bc>
  80f0f4:	00800044 	movi	r2,1
  80f0f8:	8089883a 	add	r4,r16,r2
  80f0fc:	240d803a 	cmpltu	r6,r4,r16
  80f100:	344d883a 	add	r6,r6,r17
  80f104:	2021883a 	mov	r16,r4
  80f108:	3023883a 	mov	r17,r6
  80f10c:	003f9806 	br	80ef70 <__muldf3+0x1c0>
  80f110:	403fe71e 	bne	r8,zero,80f0b0 <__muldf3+0x300>
  80f114:	01004004 	movi	r4,256
  80f118:	4904703a 	and	r2,r9,r4
  80f11c:	10c4b03a 	or	r2,r2,r3
  80f120:	103fe31e 	bne	r2,zero,80f0b0 <__muldf3+0x300>
  80f124:	94c4b03a 	or	r2,r18,r19
  80f128:	103fe126 	beq	r2,zero,80f0b0 <__muldf3+0x300>
  80f12c:	49c5883a 	add	r2,r9,r7
  80f130:	1251803a 	cmpltu	r8,r2,r9
  80f134:	4291883a 	add	r8,r8,r10
  80f138:	013fc004 	movi	r4,-256
  80f13c:	1112703a 	and	r9,r2,r4
  80f140:	4015883a 	mov	r10,r8
  80f144:	003fda06 	br	80f0b0 <__muldf3+0x300>
  80f148:	6813883a 	mov	r9,r13
  80f14c:	003fce06 	br	80f088 <__muldf3+0x2d8>
  80f150:	143f7c36 	bltu	r2,r16,80ef44 <__muldf3+0x194>
  80f154:	003fdd06 	br	80f0cc <__muldf3+0x31c>
  80f158:	12bf852e 	bgeu	r2,r10,80ef70 <__muldf3+0x1c0>
  80f15c:	003fe506 	br	80f0f4 <__muldf3+0x344>
  80f160:	00800084 	movi	r2,2
  80f164:	20bf351e 	bne	r4,r2,80ee3c <__muldf3+0x8c>
  80f168:	01002074 	movhi	r4,129
  80f16c:	21146c04 	addi	r4,r4,20912
  80f170:	003f3f06 	br	80ee70 <__muldf3+0xc0>

0080f174 <__divdf3>:
  80f174:	deffed04 	addi	sp,sp,-76
  80f178:	dcc01115 	stw	r19,68(sp)
  80f17c:	dcc00404 	addi	r19,sp,16
  80f180:	2011883a 	mov	r8,r4
  80f184:	2813883a 	mov	r9,r5
  80f188:	dc000e15 	stw	r16,56(sp)
  80f18c:	d809883a 	mov	r4,sp
  80f190:	980b883a 	mov	r5,r19
  80f194:	dc000904 	addi	r16,sp,36
  80f198:	dfc01215 	stw	ra,72(sp)
  80f19c:	da400115 	stw	r9,4(sp)
  80f1a0:	d9c00315 	stw	r7,12(sp)
  80f1a4:	da000015 	stw	r8,0(sp)
  80f1a8:	d9800215 	stw	r6,8(sp)
  80f1ac:	dc801015 	stw	r18,64(sp)
  80f1b0:	dc400f15 	stw	r17,60(sp)
  80f1b4:	08101500 	call	810150 <__unpack_d>
  80f1b8:	d9000204 	addi	r4,sp,8
  80f1bc:	800b883a 	mov	r5,r16
  80f1c0:	08101500 	call	810150 <__unpack_d>
  80f1c4:	d9000417 	ldw	r4,16(sp)
  80f1c8:	00800044 	movi	r2,1
  80f1cc:	11000b2e 	bgeu	r2,r4,80f1fc <__divdf3+0x88>
  80f1d0:	d9400917 	ldw	r5,36(sp)
  80f1d4:	1140762e 	bgeu	r2,r5,80f3b0 <__divdf3+0x23c>
  80f1d8:	d8800517 	ldw	r2,20(sp)
  80f1dc:	d8c00a17 	ldw	r3,40(sp)
  80f1e0:	01800104 	movi	r6,4
  80f1e4:	10c4f03a 	xor	r2,r2,r3
  80f1e8:	d8800515 	stw	r2,20(sp)
  80f1ec:	21800226 	beq	r4,r6,80f1f8 <__divdf3+0x84>
  80f1f0:	00800084 	movi	r2,2
  80f1f4:	2080141e 	bne	r4,r2,80f248 <__divdf3+0xd4>
  80f1f8:	29000926 	beq	r5,r4,80f220 <__divdf3+0xac>
  80f1fc:	9809883a 	mov	r4,r19
  80f200:	080fe3c0 	call	80fe3c <__pack_d>
  80f204:	dfc01217 	ldw	ra,72(sp)
  80f208:	dcc01117 	ldw	r19,68(sp)
  80f20c:	dc801017 	ldw	r18,64(sp)
  80f210:	dc400f17 	ldw	r17,60(sp)
  80f214:	dc000e17 	ldw	r16,56(sp)
  80f218:	dec01304 	addi	sp,sp,76
  80f21c:	f800283a 	ret
  80f220:	01002074 	movhi	r4,129
  80f224:	21146c04 	addi	r4,r4,20912
  80f228:	080fe3c0 	call	80fe3c <__pack_d>
  80f22c:	dfc01217 	ldw	ra,72(sp)
  80f230:	dcc01117 	ldw	r19,68(sp)
  80f234:	dc801017 	ldw	r18,64(sp)
  80f238:	dc400f17 	ldw	r17,60(sp)
  80f23c:	dc000e17 	ldw	r16,56(sp)
  80f240:	dec01304 	addi	sp,sp,76
  80f244:	f800283a 	ret
  80f248:	29805b26 	beq	r5,r6,80f3b8 <__divdf3+0x244>
  80f24c:	28802d26 	beq	r5,r2,80f304 <__divdf3+0x190>
  80f250:	d8c00617 	ldw	r3,24(sp)
  80f254:	d8800b17 	ldw	r2,44(sp)
  80f258:	d9c00817 	ldw	r7,32(sp)
  80f25c:	dc400d17 	ldw	r17,52(sp)
  80f260:	188bc83a 	sub	r5,r3,r2
  80f264:	d9800717 	ldw	r6,28(sp)
  80f268:	dc000c17 	ldw	r16,48(sp)
  80f26c:	d9400615 	stw	r5,24(sp)
  80f270:	3c403836 	bltu	r7,r17,80f354 <__divdf3+0x1e0>
  80f274:	89c03626 	beq	r17,r7,80f350 <__divdf3+0x1dc>
  80f278:	0015883a 	mov	r10,zero
  80f27c:	001d883a 	mov	r14,zero
  80f280:	02c40034 	movhi	r11,4096
  80f284:	001f883a 	mov	r15,zero
  80f288:	003f883a 	mov	ra,zero
  80f28c:	04800f44 	movi	r18,61
  80f290:	00000f06 	br	80f2d0 <__divdf3+0x15c>
  80f294:	601d883a 	mov	r14,r12
  80f298:	681f883a 	mov	r15,r13
  80f29c:	400d883a 	mov	r6,r8
  80f2a0:	100f883a 	mov	r7,r2
  80f2a4:	3191883a 	add	r8,r6,r6
  80f2a8:	5808d07a 	srli	r4,r11,1
  80f2ac:	4185803a 	cmpltu	r2,r8,r6
  80f2b0:	39d3883a 	add	r9,r7,r7
  80f2b4:	28c6b03a 	or	r3,r5,r3
  80f2b8:	1245883a 	add	r2,r2,r9
  80f2bc:	1815883a 	mov	r10,r3
  80f2c0:	2017883a 	mov	r11,r4
  80f2c4:	400d883a 	mov	r6,r8
  80f2c8:	100f883a 	mov	r7,r2
  80f2cc:	fc801726 	beq	ra,r18,80f32c <__divdf3+0x1b8>
  80f2d0:	580a97fa 	slli	r5,r11,31
  80f2d4:	5006d07a 	srli	r3,r10,1
  80f2d8:	ffc00044 	addi	ra,ra,1
  80f2dc:	3c7ff136 	bltu	r7,r17,80f2a4 <__divdf3+0x130>
  80f2e0:	3411c83a 	sub	r8,r6,r16
  80f2e4:	3205803a 	cmpltu	r2,r6,r8
  80f2e8:	3c53c83a 	sub	r9,r7,r17
  80f2ec:	7298b03a 	or	r12,r14,r10
  80f2f0:	7adab03a 	or	r13,r15,r11
  80f2f4:	4885c83a 	sub	r2,r9,r2
  80f2f8:	89ffe61e 	bne	r17,r7,80f294 <__divdf3+0x120>
  80f2fc:	343fe936 	bltu	r6,r16,80f2a4 <__divdf3+0x130>
  80f300:	003fe406 	br	80f294 <__divdf3+0x120>
  80f304:	9809883a 	mov	r4,r19
  80f308:	d9800415 	stw	r6,16(sp)
  80f30c:	080fe3c0 	call	80fe3c <__pack_d>
  80f310:	dfc01217 	ldw	ra,72(sp)
  80f314:	dcc01117 	ldw	r19,68(sp)
  80f318:	dc801017 	ldw	r18,64(sp)
  80f31c:	dc400f17 	ldw	r17,60(sp)
  80f320:	dc000e17 	ldw	r16,56(sp)
  80f324:	dec01304 	addi	sp,sp,76
  80f328:	f800283a 	ret
  80f32c:	00803fc4 	movi	r2,255
  80f330:	7090703a 	and	r8,r14,r2
  80f334:	00802004 	movi	r2,128
  80f338:	0007883a 	mov	r3,zero
  80f33c:	0013883a 	mov	r9,zero
  80f340:	40800d26 	beq	r8,r2,80f378 <__divdf3+0x204>
  80f344:	dbc00815 	stw	r15,32(sp)
  80f348:	db800715 	stw	r14,28(sp)
  80f34c:	003fab06 	br	80f1fc <__divdf3+0x88>
  80f350:	343fc92e 	bgeu	r6,r16,80f278 <__divdf3+0x104>
  80f354:	3185883a 	add	r2,r6,r6
  80f358:	1189803a 	cmpltu	r4,r2,r6
  80f35c:	39c7883a 	add	r3,r7,r7
  80f360:	20c9883a 	add	r4,r4,r3
  80f364:	297fffc4 	addi	r5,r5,-1
  80f368:	100d883a 	mov	r6,r2
  80f36c:	200f883a 	mov	r7,r4
  80f370:	d9400615 	stw	r5,24(sp)
  80f374:	003fc006 	br	80f278 <__divdf3+0x104>
  80f378:	483ff21e 	bne	r9,zero,80f344 <__divdf3+0x1d0>
  80f37c:	01004004 	movi	r4,256
  80f380:	7104703a 	and	r2,r14,r4
  80f384:	10c4b03a 	or	r2,r2,r3
  80f388:	103fee1e 	bne	r2,zero,80f344 <__divdf3+0x1d0>
  80f38c:	31c4b03a 	or	r2,r6,r7
  80f390:	103fec26 	beq	r2,zero,80f344 <__divdf3+0x1d0>
  80f394:	7205883a 	add	r2,r14,r8
  80f398:	1391803a 	cmpltu	r8,r2,r14
  80f39c:	43d1883a 	add	r8,r8,r15
  80f3a0:	013fc004 	movi	r4,-256
  80f3a4:	111c703a 	and	r14,r2,r4
  80f3a8:	401f883a 	mov	r15,r8
  80f3ac:	003fe506 	br	80f344 <__divdf3+0x1d0>
  80f3b0:	8009883a 	mov	r4,r16
  80f3b4:	003f9206 	br	80f200 <__divdf3+0x8c>
  80f3b8:	9809883a 	mov	r4,r19
  80f3bc:	d8000715 	stw	zero,28(sp)
  80f3c0:	d8000815 	stw	zero,32(sp)
  80f3c4:	d8000615 	stw	zero,24(sp)
  80f3c8:	003f8d06 	br	80f200 <__divdf3+0x8c>

0080f3cc <__eqdf2>:
  80f3cc:	deffef04 	addi	sp,sp,-68
  80f3d0:	dc400f15 	stw	r17,60(sp)
  80f3d4:	dc400404 	addi	r17,sp,16
  80f3d8:	2005883a 	mov	r2,r4
  80f3dc:	2807883a 	mov	r3,r5
  80f3e0:	dc000e15 	stw	r16,56(sp)
  80f3e4:	d809883a 	mov	r4,sp
  80f3e8:	880b883a 	mov	r5,r17
  80f3ec:	dc000904 	addi	r16,sp,36
  80f3f0:	d8c00115 	stw	r3,4(sp)
  80f3f4:	d8800015 	stw	r2,0(sp)
  80f3f8:	d9800215 	stw	r6,8(sp)
  80f3fc:	dfc01015 	stw	ra,64(sp)
  80f400:	d9c00315 	stw	r7,12(sp)
  80f404:	08101500 	call	810150 <__unpack_d>
  80f408:	d9000204 	addi	r4,sp,8
  80f40c:	800b883a 	mov	r5,r16
  80f410:	08101500 	call	810150 <__unpack_d>
  80f414:	d8800417 	ldw	r2,16(sp)
  80f418:	00c00044 	movi	r3,1
  80f41c:	180d883a 	mov	r6,r3
  80f420:	1880062e 	bgeu	r3,r2,80f43c <__eqdf2+0x70>
  80f424:	d8800917 	ldw	r2,36(sp)
  80f428:	8809883a 	mov	r4,r17
  80f42c:	800b883a 	mov	r5,r16
  80f430:	1880022e 	bgeu	r3,r2,80f43c <__eqdf2+0x70>
  80f434:	08102880 	call	810288 <__fpcmp_parts_d>
  80f438:	100d883a 	mov	r6,r2
  80f43c:	3005883a 	mov	r2,r6
  80f440:	dfc01017 	ldw	ra,64(sp)
  80f444:	dc400f17 	ldw	r17,60(sp)
  80f448:	dc000e17 	ldw	r16,56(sp)
  80f44c:	dec01104 	addi	sp,sp,68
  80f450:	f800283a 	ret

0080f454 <__nedf2>:
  80f454:	deffef04 	addi	sp,sp,-68
  80f458:	dc400f15 	stw	r17,60(sp)
  80f45c:	dc400404 	addi	r17,sp,16
  80f460:	2005883a 	mov	r2,r4
  80f464:	2807883a 	mov	r3,r5
  80f468:	dc000e15 	stw	r16,56(sp)
  80f46c:	d809883a 	mov	r4,sp
  80f470:	880b883a 	mov	r5,r17
  80f474:	dc000904 	addi	r16,sp,36
  80f478:	d8c00115 	stw	r3,4(sp)
  80f47c:	d8800015 	stw	r2,0(sp)
  80f480:	d9800215 	stw	r6,8(sp)
  80f484:	dfc01015 	stw	ra,64(sp)
  80f488:	d9c00315 	stw	r7,12(sp)
  80f48c:	08101500 	call	810150 <__unpack_d>
  80f490:	d9000204 	addi	r4,sp,8
  80f494:	800b883a 	mov	r5,r16
  80f498:	08101500 	call	810150 <__unpack_d>
  80f49c:	d8800417 	ldw	r2,16(sp)
  80f4a0:	00c00044 	movi	r3,1
  80f4a4:	180d883a 	mov	r6,r3
  80f4a8:	1880062e 	bgeu	r3,r2,80f4c4 <__nedf2+0x70>
  80f4ac:	d8800917 	ldw	r2,36(sp)
  80f4b0:	8809883a 	mov	r4,r17
  80f4b4:	800b883a 	mov	r5,r16
  80f4b8:	1880022e 	bgeu	r3,r2,80f4c4 <__nedf2+0x70>
  80f4bc:	08102880 	call	810288 <__fpcmp_parts_d>
  80f4c0:	100d883a 	mov	r6,r2
  80f4c4:	3005883a 	mov	r2,r6
  80f4c8:	dfc01017 	ldw	ra,64(sp)
  80f4cc:	dc400f17 	ldw	r17,60(sp)
  80f4d0:	dc000e17 	ldw	r16,56(sp)
  80f4d4:	dec01104 	addi	sp,sp,68
  80f4d8:	f800283a 	ret

0080f4dc <__gtdf2>:
  80f4dc:	deffef04 	addi	sp,sp,-68
  80f4e0:	dc400f15 	stw	r17,60(sp)
  80f4e4:	dc400404 	addi	r17,sp,16
  80f4e8:	2005883a 	mov	r2,r4
  80f4ec:	2807883a 	mov	r3,r5
  80f4f0:	dc000e15 	stw	r16,56(sp)
  80f4f4:	d809883a 	mov	r4,sp
  80f4f8:	880b883a 	mov	r5,r17
  80f4fc:	dc000904 	addi	r16,sp,36
  80f500:	d8c00115 	stw	r3,4(sp)
  80f504:	d8800015 	stw	r2,0(sp)
  80f508:	d9800215 	stw	r6,8(sp)
  80f50c:	dfc01015 	stw	ra,64(sp)
  80f510:	d9c00315 	stw	r7,12(sp)
  80f514:	08101500 	call	810150 <__unpack_d>
  80f518:	d9000204 	addi	r4,sp,8
  80f51c:	800b883a 	mov	r5,r16
  80f520:	08101500 	call	810150 <__unpack_d>
  80f524:	d8800417 	ldw	r2,16(sp)
  80f528:	00c00044 	movi	r3,1
  80f52c:	01bfffc4 	movi	r6,-1
  80f530:	1880062e 	bgeu	r3,r2,80f54c <__gtdf2+0x70>
  80f534:	d8800917 	ldw	r2,36(sp)
  80f538:	8809883a 	mov	r4,r17
  80f53c:	800b883a 	mov	r5,r16
  80f540:	1880022e 	bgeu	r3,r2,80f54c <__gtdf2+0x70>
  80f544:	08102880 	call	810288 <__fpcmp_parts_d>
  80f548:	100d883a 	mov	r6,r2
  80f54c:	3005883a 	mov	r2,r6
  80f550:	dfc01017 	ldw	ra,64(sp)
  80f554:	dc400f17 	ldw	r17,60(sp)
  80f558:	dc000e17 	ldw	r16,56(sp)
  80f55c:	dec01104 	addi	sp,sp,68
  80f560:	f800283a 	ret

0080f564 <__gedf2>:
  80f564:	deffef04 	addi	sp,sp,-68
  80f568:	dc400f15 	stw	r17,60(sp)
  80f56c:	dc400404 	addi	r17,sp,16
  80f570:	2005883a 	mov	r2,r4
  80f574:	2807883a 	mov	r3,r5
  80f578:	dc000e15 	stw	r16,56(sp)
  80f57c:	d809883a 	mov	r4,sp
  80f580:	880b883a 	mov	r5,r17
  80f584:	dc000904 	addi	r16,sp,36
  80f588:	d8c00115 	stw	r3,4(sp)
  80f58c:	d8800015 	stw	r2,0(sp)
  80f590:	d9800215 	stw	r6,8(sp)
  80f594:	dfc01015 	stw	ra,64(sp)
  80f598:	d9c00315 	stw	r7,12(sp)
  80f59c:	08101500 	call	810150 <__unpack_d>
  80f5a0:	d9000204 	addi	r4,sp,8
  80f5a4:	800b883a 	mov	r5,r16
  80f5a8:	08101500 	call	810150 <__unpack_d>
  80f5ac:	d8800417 	ldw	r2,16(sp)
  80f5b0:	00c00044 	movi	r3,1
  80f5b4:	01bfffc4 	movi	r6,-1
  80f5b8:	1880062e 	bgeu	r3,r2,80f5d4 <__gedf2+0x70>
  80f5bc:	d8800917 	ldw	r2,36(sp)
  80f5c0:	8809883a 	mov	r4,r17
  80f5c4:	800b883a 	mov	r5,r16
  80f5c8:	1880022e 	bgeu	r3,r2,80f5d4 <__gedf2+0x70>
  80f5cc:	08102880 	call	810288 <__fpcmp_parts_d>
  80f5d0:	100d883a 	mov	r6,r2
  80f5d4:	3005883a 	mov	r2,r6
  80f5d8:	dfc01017 	ldw	ra,64(sp)
  80f5dc:	dc400f17 	ldw	r17,60(sp)
  80f5e0:	dc000e17 	ldw	r16,56(sp)
  80f5e4:	dec01104 	addi	sp,sp,68
  80f5e8:	f800283a 	ret

0080f5ec <__ltdf2>:
  80f5ec:	deffef04 	addi	sp,sp,-68
  80f5f0:	dc400f15 	stw	r17,60(sp)
  80f5f4:	dc400404 	addi	r17,sp,16
  80f5f8:	2005883a 	mov	r2,r4
  80f5fc:	2807883a 	mov	r3,r5
  80f600:	dc000e15 	stw	r16,56(sp)
  80f604:	d809883a 	mov	r4,sp
  80f608:	880b883a 	mov	r5,r17
  80f60c:	dc000904 	addi	r16,sp,36
  80f610:	d8c00115 	stw	r3,4(sp)
  80f614:	d8800015 	stw	r2,0(sp)
  80f618:	d9800215 	stw	r6,8(sp)
  80f61c:	dfc01015 	stw	ra,64(sp)
  80f620:	d9c00315 	stw	r7,12(sp)
  80f624:	08101500 	call	810150 <__unpack_d>
  80f628:	d9000204 	addi	r4,sp,8
  80f62c:	800b883a 	mov	r5,r16
  80f630:	08101500 	call	810150 <__unpack_d>
  80f634:	d8800417 	ldw	r2,16(sp)
  80f638:	00c00044 	movi	r3,1
  80f63c:	180d883a 	mov	r6,r3
  80f640:	1880062e 	bgeu	r3,r2,80f65c <__ltdf2+0x70>
  80f644:	d8800917 	ldw	r2,36(sp)
  80f648:	8809883a 	mov	r4,r17
  80f64c:	800b883a 	mov	r5,r16
  80f650:	1880022e 	bgeu	r3,r2,80f65c <__ltdf2+0x70>
  80f654:	08102880 	call	810288 <__fpcmp_parts_d>
  80f658:	100d883a 	mov	r6,r2
  80f65c:	3005883a 	mov	r2,r6
  80f660:	dfc01017 	ldw	ra,64(sp)
  80f664:	dc400f17 	ldw	r17,60(sp)
  80f668:	dc000e17 	ldw	r16,56(sp)
  80f66c:	dec01104 	addi	sp,sp,68
  80f670:	f800283a 	ret

0080f674 <__ledf2>:
  80f674:	deffef04 	addi	sp,sp,-68
  80f678:	dc400f15 	stw	r17,60(sp)
  80f67c:	dc400404 	addi	r17,sp,16
  80f680:	2005883a 	mov	r2,r4
  80f684:	2807883a 	mov	r3,r5
  80f688:	dc000e15 	stw	r16,56(sp)
  80f68c:	d809883a 	mov	r4,sp
  80f690:	880b883a 	mov	r5,r17
  80f694:	dc000904 	addi	r16,sp,36
  80f698:	d8c00115 	stw	r3,4(sp)
  80f69c:	d8800015 	stw	r2,0(sp)
  80f6a0:	d9800215 	stw	r6,8(sp)
  80f6a4:	dfc01015 	stw	ra,64(sp)
  80f6a8:	d9c00315 	stw	r7,12(sp)
  80f6ac:	08101500 	call	810150 <__unpack_d>
  80f6b0:	d9000204 	addi	r4,sp,8
  80f6b4:	800b883a 	mov	r5,r16
  80f6b8:	08101500 	call	810150 <__unpack_d>
  80f6bc:	d8800417 	ldw	r2,16(sp)
  80f6c0:	00c00044 	movi	r3,1
  80f6c4:	180d883a 	mov	r6,r3
  80f6c8:	1880062e 	bgeu	r3,r2,80f6e4 <__ledf2+0x70>
  80f6cc:	d8800917 	ldw	r2,36(sp)
  80f6d0:	8809883a 	mov	r4,r17
  80f6d4:	800b883a 	mov	r5,r16
  80f6d8:	1880022e 	bgeu	r3,r2,80f6e4 <__ledf2+0x70>
  80f6dc:	08102880 	call	810288 <__fpcmp_parts_d>
  80f6e0:	100d883a 	mov	r6,r2
  80f6e4:	3005883a 	mov	r2,r6
  80f6e8:	dfc01017 	ldw	ra,64(sp)
  80f6ec:	dc400f17 	ldw	r17,60(sp)
  80f6f0:	dc000e17 	ldw	r16,56(sp)
  80f6f4:	dec01104 	addi	sp,sp,68
  80f6f8:	f800283a 	ret

0080f6fc <__floatsidf>:
  80f6fc:	2006d7fa 	srli	r3,r4,31
  80f700:	defff604 	addi	sp,sp,-40
  80f704:	008000c4 	movi	r2,3
  80f708:	dfc00915 	stw	ra,36(sp)
  80f70c:	dcc00815 	stw	r19,32(sp)
  80f710:	dc800715 	stw	r18,28(sp)
  80f714:	dc400615 	stw	r17,24(sp)
  80f718:	dc000515 	stw	r16,20(sp)
  80f71c:	d8800015 	stw	r2,0(sp)
  80f720:	d8c00115 	stw	r3,4(sp)
  80f724:	20000f1e 	bne	r4,zero,80f764 <__floatsidf+0x68>
  80f728:	00800084 	movi	r2,2
  80f72c:	d8800015 	stw	r2,0(sp)
  80f730:	d809883a 	mov	r4,sp
  80f734:	080fe3c0 	call	80fe3c <__pack_d>
  80f738:	1009883a 	mov	r4,r2
  80f73c:	180b883a 	mov	r5,r3
  80f740:	2005883a 	mov	r2,r4
  80f744:	2807883a 	mov	r3,r5
  80f748:	dfc00917 	ldw	ra,36(sp)
  80f74c:	dcc00817 	ldw	r19,32(sp)
  80f750:	dc800717 	ldw	r18,28(sp)
  80f754:	dc400617 	ldw	r17,24(sp)
  80f758:	dc000517 	ldw	r16,20(sp)
  80f75c:	dec00a04 	addi	sp,sp,40
  80f760:	f800283a 	ret
  80f764:	00800f04 	movi	r2,60
  80f768:	1807003a 	cmpeq	r3,r3,zero
  80f76c:	d8800215 	stw	r2,8(sp)
  80f770:	18001126 	beq	r3,zero,80f7b8 <__floatsidf+0xbc>
  80f774:	0027883a 	mov	r19,zero
  80f778:	2025883a 	mov	r18,r4
  80f77c:	d9000315 	stw	r4,12(sp)
  80f780:	dcc00415 	stw	r19,16(sp)
  80f784:	080fc200 	call	80fc20 <__clzsi2>
  80f788:	11000744 	addi	r4,r2,29
  80f78c:	013fe80e 	bge	zero,r4,80f730 <__floatsidf+0x34>
  80f790:	10bfff44 	addi	r2,r2,-3
  80f794:	10000c16 	blt	r2,zero,80f7c8 <__floatsidf+0xcc>
  80f798:	90a2983a 	sll	r17,r18,r2
  80f79c:	0021883a 	mov	r16,zero
  80f7a0:	d8800217 	ldw	r2,8(sp)
  80f7a4:	dc400415 	stw	r17,16(sp)
  80f7a8:	dc000315 	stw	r16,12(sp)
  80f7ac:	1105c83a 	sub	r2,r2,r4
  80f7b0:	d8800215 	stw	r2,8(sp)
  80f7b4:	003fde06 	br	80f730 <__floatsidf+0x34>
  80f7b8:	00a00034 	movhi	r2,32768
  80f7bc:	20800a26 	beq	r4,r2,80f7e8 <__floatsidf+0xec>
  80f7c0:	0109c83a 	sub	r4,zero,r4
  80f7c4:	003feb06 	br	80f774 <__floatsidf+0x78>
  80f7c8:	9006d07a 	srli	r3,r18,1
  80f7cc:	008007c4 	movi	r2,31
  80f7d0:	1105c83a 	sub	r2,r2,r4
  80f7d4:	1886d83a 	srl	r3,r3,r2
  80f7d8:	9922983a 	sll	r17,r19,r4
  80f7dc:	9120983a 	sll	r16,r18,r4
  80f7e0:	1c62b03a 	or	r17,r3,r17
  80f7e4:	003fee06 	br	80f7a0 <__floatsidf+0xa4>
  80f7e8:	0009883a 	mov	r4,zero
  80f7ec:	01707834 	movhi	r5,49632
  80f7f0:	003fd306 	br	80f740 <__floatsidf+0x44>

0080f7f4 <__fixdfsi>:
  80f7f4:	defff804 	addi	sp,sp,-32
  80f7f8:	2005883a 	mov	r2,r4
  80f7fc:	2807883a 	mov	r3,r5
  80f800:	d809883a 	mov	r4,sp
  80f804:	d9400204 	addi	r5,sp,8
  80f808:	d8c00115 	stw	r3,4(sp)
  80f80c:	d8800015 	stw	r2,0(sp)
  80f810:	dfc00715 	stw	ra,28(sp)
  80f814:	08101500 	call	810150 <__unpack_d>
  80f818:	d8c00217 	ldw	r3,8(sp)
  80f81c:	00800084 	movi	r2,2
  80f820:	1880051e 	bne	r3,r2,80f838 <__fixdfsi+0x44>
  80f824:	0007883a 	mov	r3,zero
  80f828:	1805883a 	mov	r2,r3
  80f82c:	dfc00717 	ldw	ra,28(sp)
  80f830:	dec00804 	addi	sp,sp,32
  80f834:	f800283a 	ret
  80f838:	00800044 	movi	r2,1
  80f83c:	10fff92e 	bgeu	r2,r3,80f824 <__fixdfsi+0x30>
  80f840:	00800104 	movi	r2,4
  80f844:	18800426 	beq	r3,r2,80f858 <__fixdfsi+0x64>
  80f848:	d8c00417 	ldw	r3,16(sp)
  80f84c:	183ff516 	blt	r3,zero,80f824 <__fixdfsi+0x30>
  80f850:	00800784 	movi	r2,30
  80f854:	10c0080e 	bge	r2,r3,80f878 <__fixdfsi+0x84>
  80f858:	d8800317 	ldw	r2,12(sp)
  80f85c:	1000121e 	bne	r2,zero,80f8a8 <__fixdfsi+0xb4>
  80f860:	00e00034 	movhi	r3,32768
  80f864:	18ffffc4 	addi	r3,r3,-1
  80f868:	1805883a 	mov	r2,r3
  80f86c:	dfc00717 	ldw	ra,28(sp)
  80f870:	dec00804 	addi	sp,sp,32
  80f874:	f800283a 	ret
  80f878:	00800f04 	movi	r2,60
  80f87c:	10d1c83a 	sub	r8,r2,r3
  80f880:	40bff804 	addi	r2,r8,-32
  80f884:	d9800517 	ldw	r6,20(sp)
  80f888:	d9c00617 	ldw	r7,24(sp)
  80f88c:	10000816 	blt	r2,zero,80f8b0 <__fixdfsi+0xbc>
  80f890:	3888d83a 	srl	r4,r7,r2
  80f894:	d8800317 	ldw	r2,12(sp)
  80f898:	2007883a 	mov	r3,r4
  80f89c:	103fe226 	beq	r2,zero,80f828 <__fixdfsi+0x34>
  80f8a0:	0107c83a 	sub	r3,zero,r4
  80f8a4:	003fe006 	br	80f828 <__fixdfsi+0x34>
  80f8a8:	00e00034 	movhi	r3,32768
  80f8ac:	003fde06 	br	80f828 <__fixdfsi+0x34>
  80f8b0:	39c7883a 	add	r3,r7,r7
  80f8b4:	008007c4 	movi	r2,31
  80f8b8:	1205c83a 	sub	r2,r2,r8
  80f8bc:	1886983a 	sll	r3,r3,r2
  80f8c0:	3208d83a 	srl	r4,r6,r8
  80f8c4:	1908b03a 	or	r4,r3,r4
  80f8c8:	003ff206 	br	80f894 <__fixdfsi+0xa0>

0080f8cc <__truncdfsf2>:
  80f8cc:	defff804 	addi	sp,sp,-32
  80f8d0:	2005883a 	mov	r2,r4
  80f8d4:	2807883a 	mov	r3,r5
  80f8d8:	d809883a 	mov	r4,sp
  80f8dc:	d9400204 	addi	r5,sp,8
  80f8e0:	d8c00115 	stw	r3,4(sp)
  80f8e4:	d8800015 	stw	r2,0(sp)
  80f8e8:	dfc00715 	stw	ra,28(sp)
  80f8ec:	08101500 	call	810150 <__unpack_d>
  80f8f0:	d9c00517 	ldw	r7,20(sp)
  80f8f4:	da000617 	ldw	r8,24(sp)
  80f8f8:	02d00034 	movhi	r11,16384
  80f8fc:	5affffc4 	addi	r11,r11,-1
  80f900:	3812d7ba 	srli	r9,r7,30
  80f904:	401a90ba 	slli	r13,r8,2
  80f908:	3ac4703a 	and	r2,r7,r11
  80f90c:	0007883a 	mov	r3,zero
  80f910:	6a52b03a 	or	r9,r13,r9
  80f914:	10c4b03a 	or	r2,r2,r3
  80f918:	d9000217 	ldw	r4,8(sp)
  80f91c:	d9400317 	ldw	r5,12(sp)
  80f920:	d9800417 	ldw	r6,16(sp)
  80f924:	480f883a 	mov	r7,r9
  80f928:	10000126 	beq	r2,zero,80f930 <__truncdfsf2+0x64>
  80f92c:	49c00054 	ori	r7,r9,1
  80f930:	080fe100 	call	80fe10 <__make_fp>
  80f934:	dfc00717 	ldw	ra,28(sp)
  80f938:	dec00804 	addi	sp,sp,32
  80f93c:	f800283a 	ret

0080f940 <__floatunsidf>:
  80f940:	defff204 	addi	sp,sp,-56
  80f944:	dfc00d15 	stw	ra,52(sp)
  80f948:	ddc00c15 	stw	r23,48(sp)
  80f94c:	dd800b15 	stw	r22,44(sp)
  80f950:	dd400a15 	stw	r21,40(sp)
  80f954:	dd000915 	stw	r20,36(sp)
  80f958:	dcc00815 	stw	r19,32(sp)
  80f95c:	dc800715 	stw	r18,28(sp)
  80f960:	dc400615 	stw	r17,24(sp)
  80f964:	dc000515 	stw	r16,20(sp)
  80f968:	d8000115 	stw	zero,4(sp)
  80f96c:	20000f1e 	bne	r4,zero,80f9ac <__floatunsidf+0x6c>
  80f970:	00800084 	movi	r2,2
  80f974:	d8800015 	stw	r2,0(sp)
  80f978:	d809883a 	mov	r4,sp
  80f97c:	080fe3c0 	call	80fe3c <__pack_d>
  80f980:	dfc00d17 	ldw	ra,52(sp)
  80f984:	ddc00c17 	ldw	r23,48(sp)
  80f988:	dd800b17 	ldw	r22,44(sp)
  80f98c:	dd400a17 	ldw	r21,40(sp)
  80f990:	dd000917 	ldw	r20,36(sp)
  80f994:	dcc00817 	ldw	r19,32(sp)
  80f998:	dc800717 	ldw	r18,28(sp)
  80f99c:	dc400617 	ldw	r17,24(sp)
  80f9a0:	dc000517 	ldw	r16,20(sp)
  80f9a4:	dec00e04 	addi	sp,sp,56
  80f9a8:	f800283a 	ret
  80f9ac:	008000c4 	movi	r2,3
  80f9b0:	00c00f04 	movi	r3,60
  80f9b4:	002f883a 	mov	r23,zero
  80f9b8:	202d883a 	mov	r22,r4
  80f9bc:	d8800015 	stw	r2,0(sp)
  80f9c0:	d8c00215 	stw	r3,8(sp)
  80f9c4:	d9000315 	stw	r4,12(sp)
  80f9c8:	ddc00415 	stw	r23,16(sp)
  80f9cc:	080fc200 	call	80fc20 <__clzsi2>
  80f9d0:	12400744 	addi	r9,r2,29
  80f9d4:	48000b16 	blt	r9,zero,80fa04 <__floatunsidf+0xc4>
  80f9d8:	483fe726 	beq	r9,zero,80f978 <__floatunsidf+0x38>
  80f9dc:	10bfff44 	addi	r2,r2,-3
  80f9e0:	10002e16 	blt	r2,zero,80fa9c <__floatunsidf+0x15c>
  80f9e4:	b0a2983a 	sll	r17,r22,r2
  80f9e8:	0021883a 	mov	r16,zero
  80f9ec:	d8800217 	ldw	r2,8(sp)
  80f9f0:	dc400415 	stw	r17,16(sp)
  80f9f4:	dc000315 	stw	r16,12(sp)
  80f9f8:	1245c83a 	sub	r2,r2,r9
  80f9fc:	d8800215 	stw	r2,8(sp)
  80fa00:	003fdd06 	br	80f978 <__floatunsidf+0x38>
  80fa04:	0255c83a 	sub	r10,zero,r9
  80fa08:	51bff804 	addi	r6,r10,-32
  80fa0c:	30001b16 	blt	r6,zero,80fa7c <__floatunsidf+0x13c>
  80fa10:	b9a8d83a 	srl	r20,r23,r6
  80fa14:	002b883a 	mov	r21,zero
  80fa18:	000f883a 	mov	r7,zero
  80fa1c:	01000044 	movi	r4,1
  80fa20:	0011883a 	mov	r8,zero
  80fa24:	30002516 	blt	r6,zero,80fabc <__floatunsidf+0x17c>
  80fa28:	21a6983a 	sll	r19,r4,r6
  80fa2c:	0025883a 	mov	r18,zero
  80fa30:	00bfffc4 	movi	r2,-1
  80fa34:	9089883a 	add	r4,r18,r2
  80fa38:	988b883a 	add	r5,r19,r2
  80fa3c:	248d803a 	cmpltu	r6,r4,r18
  80fa40:	314b883a 	add	r5,r6,r5
  80fa44:	b104703a 	and	r2,r22,r4
  80fa48:	b946703a 	and	r3,r23,r5
  80fa4c:	10c4b03a 	or	r2,r2,r3
  80fa50:	10000226 	beq	r2,zero,80fa5c <__floatunsidf+0x11c>
  80fa54:	01c00044 	movi	r7,1
  80fa58:	0011883a 	mov	r8,zero
  80fa5c:	d9000217 	ldw	r4,8(sp)
  80fa60:	a1c4b03a 	or	r2,r20,r7
  80fa64:	aa06b03a 	or	r3,r21,r8
  80fa68:	2249c83a 	sub	r4,r4,r9
  80fa6c:	d8c00415 	stw	r3,16(sp)
  80fa70:	d9000215 	stw	r4,8(sp)
  80fa74:	d8800315 	stw	r2,12(sp)
  80fa78:	003fbf06 	br	80f978 <__floatunsidf+0x38>
  80fa7c:	bdc7883a 	add	r3,r23,r23
  80fa80:	008007c4 	movi	r2,31
  80fa84:	1285c83a 	sub	r2,r2,r10
  80fa88:	1886983a 	sll	r3,r3,r2
  80fa8c:	b2a8d83a 	srl	r20,r22,r10
  80fa90:	baaad83a 	srl	r21,r23,r10
  80fa94:	1d28b03a 	or	r20,r3,r20
  80fa98:	003fdf06 	br	80fa18 <__floatunsidf+0xd8>
  80fa9c:	b006d07a 	srli	r3,r22,1
  80faa0:	008007c4 	movi	r2,31
  80faa4:	1245c83a 	sub	r2,r2,r9
  80faa8:	1886d83a 	srl	r3,r3,r2
  80faac:	ba62983a 	sll	r17,r23,r9
  80fab0:	b260983a 	sll	r16,r22,r9
  80fab4:	1c62b03a 	or	r17,r3,r17
  80fab8:	003fcc06 	br	80f9ec <__floatunsidf+0xac>
  80fabc:	2006d07a 	srli	r3,r4,1
  80fac0:	008007c4 	movi	r2,31
  80fac4:	1285c83a 	sub	r2,r2,r10
  80fac8:	18a6d83a 	srl	r19,r3,r2
  80facc:	22a4983a 	sll	r18,r4,r10
  80fad0:	003fd706 	br	80fa30 <__floatunsidf+0xf0>

0080fad4 <udivmodsi4>:
  80fad4:	29001b2e 	bgeu	r5,r4,80fb44 <udivmodsi4+0x70>
  80fad8:	28001a16 	blt	r5,zero,80fb44 <udivmodsi4+0x70>
  80fadc:	00800044 	movi	r2,1
  80fae0:	0007883a 	mov	r3,zero
  80fae4:	01c007c4 	movi	r7,31
  80fae8:	00000306 	br	80faf8 <udivmodsi4+0x24>
  80faec:	19c01326 	beq	r3,r7,80fb3c <udivmodsi4+0x68>
  80faf0:	18c00044 	addi	r3,r3,1
  80faf4:	28000416 	blt	r5,zero,80fb08 <udivmodsi4+0x34>
  80faf8:	294b883a 	add	r5,r5,r5
  80fafc:	1085883a 	add	r2,r2,r2
  80fb00:	293ffa36 	bltu	r5,r4,80faec <udivmodsi4+0x18>
  80fb04:	10000d26 	beq	r2,zero,80fb3c <udivmodsi4+0x68>
  80fb08:	0007883a 	mov	r3,zero
  80fb0c:	21400236 	bltu	r4,r5,80fb18 <udivmodsi4+0x44>
  80fb10:	2149c83a 	sub	r4,r4,r5
  80fb14:	1886b03a 	or	r3,r3,r2
  80fb18:	1004d07a 	srli	r2,r2,1
  80fb1c:	280ad07a 	srli	r5,r5,1
  80fb20:	103ffa1e 	bne	r2,zero,80fb0c <udivmodsi4+0x38>
  80fb24:	30000226 	beq	r6,zero,80fb30 <udivmodsi4+0x5c>
  80fb28:	2005883a 	mov	r2,r4
  80fb2c:	f800283a 	ret
  80fb30:	1809883a 	mov	r4,r3
  80fb34:	2005883a 	mov	r2,r4
  80fb38:	f800283a 	ret
  80fb3c:	0007883a 	mov	r3,zero
  80fb40:	003ff806 	br	80fb24 <udivmodsi4+0x50>
  80fb44:	00800044 	movi	r2,1
  80fb48:	0007883a 	mov	r3,zero
  80fb4c:	003fef06 	br	80fb0c <udivmodsi4+0x38>

0080fb50 <__divsi3>:
  80fb50:	defffe04 	addi	sp,sp,-8
  80fb54:	dc000015 	stw	r16,0(sp)
  80fb58:	dfc00115 	stw	ra,4(sp)
  80fb5c:	0021883a 	mov	r16,zero
  80fb60:	20000c16 	blt	r4,zero,80fb94 <__divsi3+0x44>
  80fb64:	000d883a 	mov	r6,zero
  80fb68:	28000e16 	blt	r5,zero,80fba4 <__divsi3+0x54>
  80fb6c:	080fad40 	call	80fad4 <udivmodsi4>
  80fb70:	1007883a 	mov	r3,r2
  80fb74:	8005003a 	cmpeq	r2,r16,zero
  80fb78:	1000011e 	bne	r2,zero,80fb80 <__divsi3+0x30>
  80fb7c:	00c7c83a 	sub	r3,zero,r3
  80fb80:	1805883a 	mov	r2,r3
  80fb84:	dfc00117 	ldw	ra,4(sp)
  80fb88:	dc000017 	ldw	r16,0(sp)
  80fb8c:	dec00204 	addi	sp,sp,8
  80fb90:	f800283a 	ret
  80fb94:	0109c83a 	sub	r4,zero,r4
  80fb98:	04000044 	movi	r16,1
  80fb9c:	000d883a 	mov	r6,zero
  80fba0:	283ff20e 	bge	r5,zero,80fb6c <__divsi3+0x1c>
  80fba4:	014bc83a 	sub	r5,zero,r5
  80fba8:	8021003a 	cmpeq	r16,r16,zero
  80fbac:	003fef06 	br	80fb6c <__divsi3+0x1c>

0080fbb0 <__modsi3>:
  80fbb0:	deffff04 	addi	sp,sp,-4
  80fbb4:	dfc00015 	stw	ra,0(sp)
  80fbb8:	01800044 	movi	r6,1
  80fbbc:	2807883a 	mov	r3,r5
  80fbc0:	20000416 	blt	r4,zero,80fbd4 <__modsi3+0x24>
  80fbc4:	28000c16 	blt	r5,zero,80fbf8 <__modsi3+0x48>
  80fbc8:	dfc00017 	ldw	ra,0(sp)
  80fbcc:	dec00104 	addi	sp,sp,4
  80fbd0:	080fad41 	jmpi	80fad4 <udivmodsi4>
  80fbd4:	0109c83a 	sub	r4,zero,r4
  80fbd8:	28000b16 	blt	r5,zero,80fc08 <__modsi3+0x58>
  80fbdc:	180b883a 	mov	r5,r3
  80fbe0:	01800044 	movi	r6,1
  80fbe4:	080fad40 	call	80fad4 <udivmodsi4>
  80fbe8:	0085c83a 	sub	r2,zero,r2
  80fbec:	dfc00017 	ldw	ra,0(sp)
  80fbf0:	dec00104 	addi	sp,sp,4
  80fbf4:	f800283a 	ret
  80fbf8:	014bc83a 	sub	r5,zero,r5
  80fbfc:	dfc00017 	ldw	ra,0(sp)
  80fc00:	dec00104 	addi	sp,sp,4
  80fc04:	080fad41 	jmpi	80fad4 <udivmodsi4>
  80fc08:	0147c83a 	sub	r3,zero,r5
  80fc0c:	003ff306 	br	80fbdc <__modsi3+0x2c>

0080fc10 <__udivsi3>:
  80fc10:	000d883a 	mov	r6,zero
  80fc14:	080fad41 	jmpi	80fad4 <udivmodsi4>

0080fc18 <__umodsi3>:
  80fc18:	01800044 	movi	r6,1
  80fc1c:	080fad41 	jmpi	80fad4 <udivmodsi4>

0080fc20 <__clzsi2>:
  80fc20:	00bfffd4 	movui	r2,65535
  80fc24:	11000e36 	bltu	r2,r4,80fc60 <__clzsi2+0x40>
  80fc28:	00803fc4 	movi	r2,255
  80fc2c:	01400204 	movi	r5,8
  80fc30:	0007883a 	mov	r3,zero
  80fc34:	11001036 	bltu	r2,r4,80fc78 <__clzsi2+0x58>
  80fc38:	000b883a 	mov	r5,zero
  80fc3c:	20c6d83a 	srl	r3,r4,r3
  80fc40:	00802074 	movhi	r2,129
  80fc44:	10947104 	addi	r2,r2,20932
  80fc48:	1887883a 	add	r3,r3,r2
  80fc4c:	18800003 	ldbu	r2,0(r3)
  80fc50:	00c00804 	movi	r3,32
  80fc54:	2885883a 	add	r2,r5,r2
  80fc58:	1885c83a 	sub	r2,r3,r2
  80fc5c:	f800283a 	ret
  80fc60:	01400404 	movi	r5,16
  80fc64:	00804034 	movhi	r2,256
  80fc68:	10bfffc4 	addi	r2,r2,-1
  80fc6c:	2807883a 	mov	r3,r5
  80fc70:	113ff22e 	bgeu	r2,r4,80fc3c <__clzsi2+0x1c>
  80fc74:	01400604 	movi	r5,24
  80fc78:	2807883a 	mov	r3,r5
  80fc7c:	20c6d83a 	srl	r3,r4,r3
  80fc80:	00802074 	movhi	r2,129
  80fc84:	10947104 	addi	r2,r2,20932
  80fc88:	1887883a 	add	r3,r3,r2
  80fc8c:	18800003 	ldbu	r2,0(r3)
  80fc90:	00c00804 	movi	r3,32
  80fc94:	2885883a 	add	r2,r5,r2
  80fc98:	1885c83a 	sub	r2,r3,r2
  80fc9c:	f800283a 	ret

0080fca0 <__unpack_f>:
  80fca0:	21800017 	ldw	r6,0(r4)
  80fca4:	00c02034 	movhi	r3,128
  80fca8:	18ffffc4 	addi	r3,r3,-1
  80fcac:	3004d5fa 	srli	r2,r6,23
  80fcb0:	3008d7fa 	srli	r4,r6,31
  80fcb4:	30ce703a 	and	r7,r6,r3
  80fcb8:	10c03fcc 	andi	r3,r2,255
  80fcbc:	29000115 	stw	r4,4(r5)
  80fcc0:	1800131e 	bne	r3,zero,80fd10 <__unpack_f+0x70>
  80fcc4:	38000f26 	beq	r7,zero,80fd04 <__unpack_f+0x64>
  80fcc8:	380691fa 	slli	r3,r7,7
  80fccc:	01bfe084 	movi	r6,-126
  80fcd0:	008000c4 	movi	r2,3
  80fcd4:	01100034 	movhi	r4,16384
  80fcd8:	213fffc4 	addi	r4,r4,-1
  80fcdc:	28800015 	stw	r2,0(r5)
  80fce0:	29800215 	stw	r6,8(r5)
  80fce4:	20c00536 	bltu	r4,r3,80fcfc <__unpack_f+0x5c>
  80fce8:	3005883a 	mov	r2,r6
  80fcec:	18c7883a 	add	r3,r3,r3
  80fcf0:	10bfffc4 	addi	r2,r2,-1
  80fcf4:	20fffd2e 	bgeu	r4,r3,80fcec <__unpack_f+0x4c>
  80fcf8:	28800215 	stw	r2,8(r5)
  80fcfc:	28c00315 	stw	r3,12(r5)
  80fd00:	f800283a 	ret
  80fd04:	00800084 	movi	r2,2
  80fd08:	28800015 	stw	r2,0(r5)
  80fd0c:	f800283a 	ret
  80fd10:	00803fc4 	movi	r2,255
  80fd14:	18800826 	beq	r3,r2,80fd38 <__unpack_f+0x98>
  80fd18:	380491fa 	slli	r2,r7,7
  80fd1c:	18ffe044 	addi	r3,r3,-127
  80fd20:	28c00215 	stw	r3,8(r5)
  80fd24:	10900034 	orhi	r2,r2,16384
  80fd28:	28800315 	stw	r2,12(r5)
  80fd2c:	008000c4 	movi	r2,3
  80fd30:	28800015 	stw	r2,0(r5)
  80fd34:	f800283a 	ret
  80fd38:	3800031e 	bne	r7,zero,80fd48 <__unpack_f+0xa8>
  80fd3c:	00800104 	movi	r2,4
  80fd40:	28800015 	stw	r2,0(r5)
  80fd44:	f800283a 	ret
  80fd48:	3080042c 	andhi	r2,r6,16
  80fd4c:	10000426 	beq	r2,zero,80fd60 <__unpack_f+0xc0>
  80fd50:	00800044 	movi	r2,1
  80fd54:	28800015 	stw	r2,0(r5)
  80fd58:	29c00315 	stw	r7,12(r5)
  80fd5c:	f800283a 	ret
  80fd60:	28000015 	stw	zero,0(r5)
  80fd64:	003ffc06 	br	80fd58 <__unpack_f+0xb8>

0080fd68 <__fpcmp_parts_f>:
  80fd68:	21800017 	ldw	r6,0(r4)
  80fd6c:	00c00044 	movi	r3,1
  80fd70:	19800a2e 	bgeu	r3,r6,80fd9c <__fpcmp_parts_f+0x34>
  80fd74:	28800017 	ldw	r2,0(r5)
  80fd78:	1880082e 	bgeu	r3,r2,80fd9c <__fpcmp_parts_f+0x34>
  80fd7c:	00c00104 	movi	r3,4
  80fd80:	30c01e26 	beq	r6,r3,80fdfc <__fpcmp_parts_f+0x94>
  80fd84:	10c01a26 	beq	r2,r3,80fdf0 <__fpcmp_parts_f+0x88>
  80fd88:	00c00084 	movi	r3,2
  80fd8c:	30c00526 	beq	r6,r3,80fda4 <__fpcmp_parts_f+0x3c>
  80fd90:	10c0071e 	bne	r2,r3,80fdb0 <__fpcmp_parts_f+0x48>
  80fd94:	20800117 	ldw	r2,4(r4)
  80fd98:	1000091e 	bne	r2,zero,80fdc0 <__fpcmp_parts_f+0x58>
  80fd9c:	00800044 	movi	r2,1
  80fda0:	f800283a 	ret
  80fda4:	10c0121e 	bne	r2,r3,80fdf0 <__fpcmp_parts_f+0x88>
  80fda8:	0005883a 	mov	r2,zero
  80fdac:	f800283a 	ret
  80fdb0:	20c00117 	ldw	r3,4(r4)
  80fdb4:	28800117 	ldw	r2,4(r5)
  80fdb8:	18800326 	beq	r3,r2,80fdc8 <__fpcmp_parts_f+0x60>
  80fdbc:	183ff726 	beq	r3,zero,80fd9c <__fpcmp_parts_f+0x34>
  80fdc0:	00bfffc4 	movi	r2,-1
  80fdc4:	f800283a 	ret
  80fdc8:	21800217 	ldw	r6,8(r4)
  80fdcc:	28800217 	ldw	r2,8(r5)
  80fdd0:	11bffa16 	blt	r2,r6,80fdbc <__fpcmp_parts_f+0x54>
  80fdd4:	30800416 	blt	r6,r2,80fde8 <__fpcmp_parts_f+0x80>
  80fdd8:	21000317 	ldw	r4,12(r4)
  80fddc:	29400317 	ldw	r5,12(r5)
  80fde0:	293ff636 	bltu	r5,r4,80fdbc <__fpcmp_parts_f+0x54>
  80fde4:	217ff02e 	bgeu	r4,r5,80fda8 <__fpcmp_parts_f+0x40>
  80fde8:	183fec1e 	bne	r3,zero,80fd9c <__fpcmp_parts_f+0x34>
  80fdec:	003ff406 	br	80fdc0 <__fpcmp_parts_f+0x58>
  80fdf0:	28800117 	ldw	r2,4(r5)
  80fdf4:	103fe91e 	bne	r2,zero,80fd9c <__fpcmp_parts_f+0x34>
  80fdf8:	003ff106 	br	80fdc0 <__fpcmp_parts_f+0x58>
  80fdfc:	11bfe51e 	bne	r2,r6,80fd94 <__fpcmp_parts_f+0x2c>
  80fe00:	28c00117 	ldw	r3,4(r5)
  80fe04:	20800117 	ldw	r2,4(r4)
  80fe08:	1885c83a 	sub	r2,r3,r2
  80fe0c:	f800283a 	ret

0080fe10 <__make_fp>:
  80fe10:	defffb04 	addi	sp,sp,-20
  80fe14:	d9000015 	stw	r4,0(sp)
  80fe18:	d809883a 	mov	r4,sp
  80fe1c:	dfc00415 	stw	ra,16(sp)
  80fe20:	d9400115 	stw	r5,4(sp)
  80fe24:	d9800215 	stw	r6,8(sp)
  80fe28:	d9c00315 	stw	r7,12(sp)
  80fe2c:	08103500 	call	810350 <__pack_f>
  80fe30:	dfc00417 	ldw	ra,16(sp)
  80fe34:	dec00504 	addi	sp,sp,20
  80fe38:	f800283a 	ret

0080fe3c <__pack_d>:
  80fe3c:	20c00017 	ldw	r3,0(r4)
  80fe40:	defffd04 	addi	sp,sp,-12
  80fe44:	dc000015 	stw	r16,0(sp)
  80fe48:	dc800215 	stw	r18,8(sp)
  80fe4c:	dc400115 	stw	r17,4(sp)
  80fe50:	00800044 	movi	r2,1
  80fe54:	22000317 	ldw	r8,12(r4)
  80fe58:	001f883a 	mov	r15,zero
  80fe5c:	22400417 	ldw	r9,16(r4)
  80fe60:	24000117 	ldw	r16,4(r4)
  80fe64:	10c0552e 	bgeu	r2,r3,80ffbc <__pack_d+0x180>
  80fe68:	00800104 	movi	r2,4
  80fe6c:	18804f26 	beq	r3,r2,80ffac <__pack_d+0x170>
  80fe70:	00800084 	movi	r2,2
  80fe74:	18800226 	beq	r3,r2,80fe80 <__pack_d+0x44>
  80fe78:	4244b03a 	or	r2,r8,r9
  80fe7c:	10001a1e 	bne	r2,zero,80fee8 <__pack_d+0xac>
  80fe80:	000d883a 	mov	r6,zero
  80fe84:	000f883a 	mov	r7,zero
  80fe88:	0011883a 	mov	r8,zero
  80fe8c:	00800434 	movhi	r2,16
  80fe90:	10bfffc4 	addi	r2,r2,-1
  80fe94:	301d883a 	mov	r14,r6
  80fe98:	3884703a 	and	r2,r7,r2
  80fe9c:	400a953a 	slli	r5,r8,20
  80fea0:	79bffc2c 	andhi	r6,r15,65520
  80fea4:	308cb03a 	or	r6,r6,r2
  80fea8:	00e00434 	movhi	r3,32784
  80feac:	18ffffc4 	addi	r3,r3,-1
  80feb0:	800497fa 	slli	r2,r16,31
  80feb4:	30c6703a 	and	r3,r6,r3
  80feb8:	1946b03a 	or	r3,r3,r5
  80febc:	01600034 	movhi	r5,32768
  80fec0:	297fffc4 	addi	r5,r5,-1
  80fec4:	194a703a 	and	r5,r3,r5
  80fec8:	288ab03a 	or	r5,r5,r2
  80fecc:	2807883a 	mov	r3,r5
  80fed0:	7005883a 	mov	r2,r14
  80fed4:	dc800217 	ldw	r18,8(sp)
  80fed8:	dc400117 	ldw	r17,4(sp)
  80fedc:	dc000017 	ldw	r16,0(sp)
  80fee0:	dec00304 	addi	sp,sp,12
  80fee4:	f800283a 	ret
  80fee8:	21000217 	ldw	r4,8(r4)
  80feec:	00bf0084 	movi	r2,-1022
  80fef0:	20803f16 	blt	r4,r2,80fff0 <__pack_d+0x1b4>
  80fef4:	0080ffc4 	movi	r2,1023
  80fef8:	11002c16 	blt	r2,r4,80ffac <__pack_d+0x170>
  80fefc:	00803fc4 	movi	r2,255
  80ff00:	408c703a 	and	r6,r8,r2
  80ff04:	00802004 	movi	r2,128
  80ff08:	0007883a 	mov	r3,zero
  80ff0c:	000f883a 	mov	r7,zero
  80ff10:	2280ffc4 	addi	r10,r4,1023
  80ff14:	30801e26 	beq	r6,r2,80ff90 <__pack_d+0x154>
  80ff18:	00801fc4 	movi	r2,127
  80ff1c:	4089883a 	add	r4,r8,r2
  80ff20:	220d803a 	cmpltu	r6,r4,r8
  80ff24:	324d883a 	add	r6,r6,r9
  80ff28:	2011883a 	mov	r8,r4
  80ff2c:	3013883a 	mov	r9,r6
  80ff30:	00880034 	movhi	r2,8192
  80ff34:	10bfffc4 	addi	r2,r2,-1
  80ff38:	12400d36 	bltu	r2,r9,80ff70 <__pack_d+0x134>
  80ff3c:	4804963a 	slli	r2,r9,24
  80ff40:	400cd23a 	srli	r6,r8,8
  80ff44:	480ed23a 	srli	r7,r9,8
  80ff48:	013fffc4 	movi	r4,-1
  80ff4c:	118cb03a 	or	r6,r2,r6
  80ff50:	01400434 	movhi	r5,16
  80ff54:	297fffc4 	addi	r5,r5,-1
  80ff58:	3104703a 	and	r2,r6,r4
  80ff5c:	3946703a 	and	r3,r7,r5
  80ff60:	5201ffcc 	andi	r8,r10,2047
  80ff64:	100d883a 	mov	r6,r2
  80ff68:	180f883a 	mov	r7,r3
  80ff6c:	003fc706 	br	80fe8c <__pack_d+0x50>
  80ff70:	480897fa 	slli	r4,r9,31
  80ff74:	4004d07a 	srli	r2,r8,1
  80ff78:	4806d07a 	srli	r3,r9,1
  80ff7c:	52800044 	addi	r10,r10,1
  80ff80:	2084b03a 	or	r2,r4,r2
  80ff84:	1011883a 	mov	r8,r2
  80ff88:	1813883a 	mov	r9,r3
  80ff8c:	003feb06 	br	80ff3c <__pack_d+0x100>
  80ff90:	383fe11e 	bne	r7,zero,80ff18 <__pack_d+0xdc>
  80ff94:	01004004 	movi	r4,256
  80ff98:	4104703a 	and	r2,r8,r4
  80ff9c:	10c4b03a 	or	r2,r2,r3
  80ffa0:	103fe326 	beq	r2,zero,80ff30 <__pack_d+0xf4>
  80ffa4:	3005883a 	mov	r2,r6
  80ffa8:	003fdc06 	br	80ff1c <__pack_d+0xe0>
  80ffac:	000d883a 	mov	r6,zero
  80ffb0:	000f883a 	mov	r7,zero
  80ffb4:	0201ffc4 	movi	r8,2047
  80ffb8:	003fb406 	br	80fe8c <__pack_d+0x50>
  80ffbc:	0005883a 	mov	r2,zero
  80ffc0:	00c00234 	movhi	r3,8
  80ffc4:	408cb03a 	or	r6,r8,r2
  80ffc8:	48ceb03a 	or	r7,r9,r3
  80ffcc:	013fffc4 	movi	r4,-1
  80ffd0:	01400434 	movhi	r5,16
  80ffd4:	297fffc4 	addi	r5,r5,-1
  80ffd8:	3104703a 	and	r2,r6,r4
  80ffdc:	3946703a 	and	r3,r7,r5
  80ffe0:	100d883a 	mov	r6,r2
  80ffe4:	180f883a 	mov	r7,r3
  80ffe8:	0201ffc4 	movi	r8,2047
  80ffec:	003fa706 	br	80fe8c <__pack_d+0x50>
  80fff0:	1109c83a 	sub	r4,r2,r4
  80fff4:	00800e04 	movi	r2,56
  80fff8:	11004316 	blt	r2,r4,810108 <__pack_d+0x2cc>
  80fffc:	21fff804 	addi	r7,r4,-32
  810000:	38004516 	blt	r7,zero,810118 <__pack_d+0x2dc>
  810004:	49d8d83a 	srl	r12,r9,r7
  810008:	001b883a 	mov	r13,zero
  81000c:	0023883a 	mov	r17,zero
  810010:	01400044 	movi	r5,1
  810014:	0025883a 	mov	r18,zero
  810018:	38004716 	blt	r7,zero,810138 <__pack_d+0x2fc>
  81001c:	29d6983a 	sll	r11,r5,r7
  810020:	0015883a 	mov	r10,zero
  810024:	00bfffc4 	movi	r2,-1
  810028:	5089883a 	add	r4,r10,r2
  81002c:	588b883a 	add	r5,r11,r2
  810030:	228d803a 	cmpltu	r6,r4,r10
  810034:	314b883a 	add	r5,r6,r5
  810038:	4104703a 	and	r2,r8,r4
  81003c:	4946703a 	and	r3,r9,r5
  810040:	10c4b03a 	or	r2,r2,r3
  810044:	10000226 	beq	r2,zero,810050 <__pack_d+0x214>
  810048:	04400044 	movi	r17,1
  81004c:	0025883a 	mov	r18,zero
  810050:	00803fc4 	movi	r2,255
  810054:	644eb03a 	or	r7,r12,r17
  810058:	3892703a 	and	r9,r7,r2
  81005c:	00802004 	movi	r2,128
  810060:	6c90b03a 	or	r8,r13,r18
  810064:	0015883a 	mov	r10,zero
  810068:	48801626 	beq	r9,r2,8100c4 <__pack_d+0x288>
  81006c:	01001fc4 	movi	r4,127
  810070:	3905883a 	add	r2,r7,r4
  810074:	11cd803a 	cmpltu	r6,r2,r7
  810078:	320d883a 	add	r6,r6,r8
  81007c:	100f883a 	mov	r7,r2
  810080:	00840034 	movhi	r2,4096
  810084:	10bfffc4 	addi	r2,r2,-1
  810088:	3011883a 	mov	r8,r6
  81008c:	0007883a 	mov	r3,zero
  810090:	11801b36 	bltu	r2,r6,810100 <__pack_d+0x2c4>
  810094:	4004963a 	slli	r2,r8,24
  810098:	3808d23a 	srli	r4,r7,8
  81009c:	400ad23a 	srli	r5,r8,8
  8100a0:	1813883a 	mov	r9,r3
  8100a4:	1108b03a 	or	r4,r2,r4
  8100a8:	00bfffc4 	movi	r2,-1
  8100ac:	00c00434 	movhi	r3,16
  8100b0:	18ffffc4 	addi	r3,r3,-1
  8100b4:	208c703a 	and	r6,r4,r2
  8100b8:	28ce703a 	and	r7,r5,r3
  8100bc:	4a01ffcc 	andi	r8,r9,2047
  8100c0:	003f7206 	br	80fe8c <__pack_d+0x50>
  8100c4:	503fe91e 	bne	r10,zero,81006c <__pack_d+0x230>
  8100c8:	01004004 	movi	r4,256
  8100cc:	3904703a 	and	r2,r7,r4
  8100d0:	0007883a 	mov	r3,zero
  8100d4:	10c4b03a 	or	r2,r2,r3
  8100d8:	10000626 	beq	r2,zero,8100f4 <__pack_d+0x2b8>
  8100dc:	3a45883a 	add	r2,r7,r9
  8100e0:	11cd803a 	cmpltu	r6,r2,r7
  8100e4:	320d883a 	add	r6,r6,r8
  8100e8:	100f883a 	mov	r7,r2
  8100ec:	3011883a 	mov	r8,r6
  8100f0:	0007883a 	mov	r3,zero
  8100f4:	00840034 	movhi	r2,4096
  8100f8:	10bfffc4 	addi	r2,r2,-1
  8100fc:	123fe52e 	bgeu	r2,r8,810094 <__pack_d+0x258>
  810100:	00c00044 	movi	r3,1
  810104:	003fe306 	br	810094 <__pack_d+0x258>
  810108:	0009883a 	mov	r4,zero
  81010c:	0013883a 	mov	r9,zero
  810110:	000b883a 	mov	r5,zero
  810114:	003fe406 	br	8100a8 <__pack_d+0x26c>
  810118:	4a47883a 	add	r3,r9,r9
  81011c:	008007c4 	movi	r2,31
  810120:	1105c83a 	sub	r2,r2,r4
  810124:	1886983a 	sll	r3,r3,r2
  810128:	4118d83a 	srl	r12,r8,r4
  81012c:	491ad83a 	srl	r13,r9,r4
  810130:	1b18b03a 	or	r12,r3,r12
  810134:	003fb506 	br	81000c <__pack_d+0x1d0>
  810138:	2806d07a 	srli	r3,r5,1
  81013c:	008007c4 	movi	r2,31
  810140:	1105c83a 	sub	r2,r2,r4
  810144:	1896d83a 	srl	r11,r3,r2
  810148:	2914983a 	sll	r10,r5,r4
  81014c:	003fb506 	br	810024 <__pack_d+0x1e8>

00810150 <__unpack_d>:
  810150:	20c00117 	ldw	r3,4(r4)
  810154:	22400017 	ldw	r9,0(r4)
  810158:	00800434 	movhi	r2,16
  81015c:	10bfffc4 	addi	r2,r2,-1
  810160:	1808d53a 	srli	r4,r3,20
  810164:	180cd7fa 	srli	r6,r3,31
  810168:	1894703a 	and	r10,r3,r2
  81016c:	2201ffcc 	andi	r8,r4,2047
  810170:	281b883a 	mov	r13,r5
  810174:	4817883a 	mov	r11,r9
  810178:	29800115 	stw	r6,4(r5)
  81017c:	5019883a 	mov	r12,r10
  810180:	40001e1e 	bne	r8,zero,8101fc <__unpack_d+0xac>
  810184:	4a84b03a 	or	r2,r9,r10
  810188:	10001926 	beq	r2,zero,8101f0 <__unpack_d+0xa0>
  81018c:	4804d63a 	srli	r2,r9,24
  810190:	500c923a 	slli	r6,r10,8
  810194:	013f0084 	movi	r4,-1022
  810198:	00c40034 	movhi	r3,4096
  81019c:	18ffffc4 	addi	r3,r3,-1
  8101a0:	118cb03a 	or	r6,r2,r6
  8101a4:	008000c4 	movi	r2,3
  8101a8:	480a923a 	slli	r5,r9,8
  8101ac:	68800015 	stw	r2,0(r13)
  8101b0:	69000215 	stw	r4,8(r13)
  8101b4:	19800b36 	bltu	r3,r6,8101e4 <__unpack_d+0x94>
  8101b8:	200f883a 	mov	r7,r4
  8101bc:	1811883a 	mov	r8,r3
  8101c0:	2945883a 	add	r2,r5,r5
  8101c4:	1149803a 	cmpltu	r4,r2,r5
  8101c8:	3187883a 	add	r3,r6,r6
  8101cc:	20c9883a 	add	r4,r4,r3
  8101d0:	100b883a 	mov	r5,r2
  8101d4:	200d883a 	mov	r6,r4
  8101d8:	39ffffc4 	addi	r7,r7,-1
  8101dc:	413ff82e 	bgeu	r8,r4,8101c0 <__unpack_d+0x70>
  8101e0:	69c00215 	stw	r7,8(r13)
  8101e4:	69800415 	stw	r6,16(r13)
  8101e8:	69400315 	stw	r5,12(r13)
  8101ec:	f800283a 	ret
  8101f0:	00800084 	movi	r2,2
  8101f4:	28800015 	stw	r2,0(r5)
  8101f8:	f800283a 	ret
  8101fc:	0081ffc4 	movi	r2,2047
  810200:	40800f26 	beq	r8,r2,810240 <__unpack_d+0xf0>
  810204:	480cd63a 	srli	r6,r9,24
  810208:	5006923a 	slli	r3,r10,8
  81020c:	4804923a 	slli	r2,r9,8
  810210:	0009883a 	mov	r4,zero
  810214:	30c6b03a 	or	r3,r6,r3
  810218:	01440034 	movhi	r5,4096
  81021c:	110cb03a 	or	r6,r2,r4
  810220:	423f0044 	addi	r8,r8,-1023
  810224:	194eb03a 	or	r7,r3,r5
  810228:	008000c4 	movi	r2,3
  81022c:	69c00415 	stw	r7,16(r13)
  810230:	6a000215 	stw	r8,8(r13)
  810234:	68800015 	stw	r2,0(r13)
  810238:	69800315 	stw	r6,12(r13)
  81023c:	f800283a 	ret
  810240:	4a84b03a 	or	r2,r9,r10
  810244:	1000031e 	bne	r2,zero,810254 <__unpack_d+0x104>
  810248:	00800104 	movi	r2,4
  81024c:	28800015 	stw	r2,0(r5)
  810250:	f800283a 	ret
  810254:	0009883a 	mov	r4,zero
  810258:	01400234 	movhi	r5,8
  81025c:	4904703a 	and	r2,r9,r4
  810260:	5146703a 	and	r3,r10,r5
  810264:	10c4b03a 	or	r2,r2,r3
  810268:	10000526 	beq	r2,zero,810280 <__unpack_d+0x130>
  81026c:	00800044 	movi	r2,1
  810270:	68800015 	stw	r2,0(r13)
  810274:	6b000415 	stw	r12,16(r13)
  810278:	6ac00315 	stw	r11,12(r13)
  81027c:	f800283a 	ret
  810280:	68000015 	stw	zero,0(r13)
  810284:	003ffb06 	br	810274 <__unpack_d+0x124>

00810288 <__fpcmp_parts_d>:
  810288:	21800017 	ldw	r6,0(r4)
  81028c:	00c00044 	movi	r3,1
  810290:	19800a2e 	bgeu	r3,r6,8102bc <__fpcmp_parts_d+0x34>
  810294:	28800017 	ldw	r2,0(r5)
  810298:	1880082e 	bgeu	r3,r2,8102bc <__fpcmp_parts_d+0x34>
  81029c:	00c00104 	movi	r3,4
  8102a0:	30c02626 	beq	r6,r3,81033c <__fpcmp_parts_d+0xb4>
  8102a4:	10c02226 	beq	r2,r3,810330 <__fpcmp_parts_d+0xa8>
  8102a8:	00c00084 	movi	r3,2
  8102ac:	30c00526 	beq	r6,r3,8102c4 <__fpcmp_parts_d+0x3c>
  8102b0:	10c0071e 	bne	r2,r3,8102d0 <__fpcmp_parts_d+0x48>
  8102b4:	20800117 	ldw	r2,4(r4)
  8102b8:	1000091e 	bne	r2,zero,8102e0 <__fpcmp_parts_d+0x58>
  8102bc:	00800044 	movi	r2,1
  8102c0:	f800283a 	ret
  8102c4:	10c01a1e 	bne	r2,r3,810330 <__fpcmp_parts_d+0xa8>
  8102c8:	0005883a 	mov	r2,zero
  8102cc:	f800283a 	ret
  8102d0:	22000117 	ldw	r8,4(r4)
  8102d4:	28800117 	ldw	r2,4(r5)
  8102d8:	40800326 	beq	r8,r2,8102e8 <__fpcmp_parts_d+0x60>
  8102dc:	403ff726 	beq	r8,zero,8102bc <__fpcmp_parts_d+0x34>
  8102e0:	00bfffc4 	movi	r2,-1
  8102e4:	f800283a 	ret
  8102e8:	20c00217 	ldw	r3,8(r4)
  8102ec:	28800217 	ldw	r2,8(r5)
  8102f0:	10fffa16 	blt	r2,r3,8102dc <__fpcmp_parts_d+0x54>
  8102f4:	18800916 	blt	r3,r2,81031c <__fpcmp_parts_d+0x94>
  8102f8:	21c00417 	ldw	r7,16(r4)
  8102fc:	28c00417 	ldw	r3,16(r5)
  810300:	21800317 	ldw	r6,12(r4)
  810304:	28800317 	ldw	r2,12(r5)
  810308:	19fff436 	bltu	r3,r7,8102dc <__fpcmp_parts_d+0x54>
  81030c:	38c00526 	beq	r7,r3,810324 <__fpcmp_parts_d+0x9c>
  810310:	38c00236 	bltu	r7,r3,81031c <__fpcmp_parts_d+0x94>
  810314:	19ffec1e 	bne	r3,r7,8102c8 <__fpcmp_parts_d+0x40>
  810318:	30bfeb2e 	bgeu	r6,r2,8102c8 <__fpcmp_parts_d+0x40>
  81031c:	403fe71e 	bne	r8,zero,8102bc <__fpcmp_parts_d+0x34>
  810320:	003fef06 	br	8102e0 <__fpcmp_parts_d+0x58>
  810324:	11bffa2e 	bgeu	r2,r6,810310 <__fpcmp_parts_d+0x88>
  810328:	403fe426 	beq	r8,zero,8102bc <__fpcmp_parts_d+0x34>
  81032c:	003fec06 	br	8102e0 <__fpcmp_parts_d+0x58>
  810330:	28800117 	ldw	r2,4(r5)
  810334:	103fe11e 	bne	r2,zero,8102bc <__fpcmp_parts_d+0x34>
  810338:	003fe906 	br	8102e0 <__fpcmp_parts_d+0x58>
  81033c:	11bfdd1e 	bne	r2,r6,8102b4 <__fpcmp_parts_d+0x2c>
  810340:	28c00117 	ldw	r3,4(r5)
  810344:	20800117 	ldw	r2,4(r4)
  810348:	1885c83a 	sub	r2,r3,r2
  81034c:	f800283a 	ret

00810350 <__pack_f>:
  810350:	20c00017 	ldw	r3,0(r4)
  810354:	01c00044 	movi	r7,1
  810358:	21800317 	ldw	r6,12(r4)
  81035c:	21400117 	ldw	r5,4(r4)
  810360:	38c02d2e 	bgeu	r7,r3,810418 <__pack_f+0xc8>
  810364:	00800104 	movi	r2,4
  810368:	18802826 	beq	r3,r2,81040c <__pack_f+0xbc>
  81036c:	00800084 	movi	r2,2
  810370:	18800126 	beq	r3,r2,810378 <__pack_f+0x28>
  810374:	3000101e 	bne	r6,zero,8103b8 <__pack_f+0x68>
  810378:	000d883a 	mov	r6,zero
  81037c:	0007883a 	mov	r3,zero
  810380:	19003fcc 	andi	r4,r3,255
  810384:	200895fa 	slli	r4,r4,23
  810388:	00c02034 	movhi	r3,128
  81038c:	18ffffc4 	addi	r3,r3,-1
  810390:	30c6703a 	and	r3,r6,r3
  810394:	10a0002c 	andhi	r2,r2,32768
  810398:	10c4b03a 	or	r2,r2,r3
  81039c:	280a97fa 	slli	r5,r5,31
  8103a0:	1104b03a 	or	r2,r2,r4
  8103a4:	00e00034 	movhi	r3,32768
  8103a8:	18ffffc4 	addi	r3,r3,-1
  8103ac:	10c4703a 	and	r2,r2,r3
  8103b0:	1144b03a 	or	r2,r2,r5
  8103b4:	f800283a 	ret
  8103b8:	21000217 	ldw	r4,8(r4)
  8103bc:	00bfe084 	movi	r2,-126
  8103c0:	20801b16 	blt	r4,r2,810430 <__pack_f+0xe0>
  8103c4:	00801fc4 	movi	r2,127
  8103c8:	11001016 	blt	r2,r4,81040c <__pack_f+0xbc>
  8103cc:	308e703a 	and	r7,r6,r2
  8103d0:	2087883a 	add	r3,r4,r2
  8103d4:	00801004 	movi	r2,64
  8103d8:	38800526 	beq	r7,r2,8103f0 <__pack_f+0xa0>
  8103dc:	31800fc4 	addi	r6,r6,63
  8103e0:	30000716 	blt	r6,zero,810400 <__pack_f+0xb0>
  8103e4:	300490ba 	slli	r2,r6,2
  8103e8:	100cd27a 	srli	r6,r2,9
  8103ec:	003fe406 	br	810380 <__pack_f+0x30>
  8103f0:	3080200c 	andi	r2,r6,128
  8103f4:	103ffa26 	beq	r2,zero,8103e0 <__pack_f+0x90>
  8103f8:	31cd883a 	add	r6,r6,r7
  8103fc:	003ff806 	br	8103e0 <__pack_f+0x90>
  810400:	300cd07a 	srli	r6,r6,1
  810404:	18c00044 	addi	r3,r3,1
  810408:	003ff606 	br	8103e4 <__pack_f+0x94>
  81040c:	000d883a 	mov	r6,zero
  810410:	00ffffc4 	movi	r3,-1
  810414:	003fda06 	br	810380 <__pack_f+0x30>
  810418:	31800434 	orhi	r6,r6,16
  81041c:	00802034 	movhi	r2,128
  810420:	10bfffc4 	addi	r2,r2,-1
  810424:	308c703a 	and	r6,r6,r2
  810428:	00ffffc4 	movi	r3,-1
  81042c:	003fd406 	br	810380 <__pack_f+0x30>
  810430:	1109c83a 	sub	r4,r2,r4
  810434:	00800644 	movi	r2,25
  810438:	11001216 	blt	r2,r4,810484 <__pack_f+0x134>
  81043c:	3904983a 	sll	r2,r7,r4
  810440:	3106d83a 	srl	r3,r6,r4
  810444:	10bfffc4 	addi	r2,r2,-1
  810448:	3084703a 	and	r2,r6,r2
  81044c:	1004c03a 	cmpne	r2,r2,zero
  810450:	1886b03a 	or	r3,r3,r2
  810454:	19001fcc 	andi	r4,r3,127
  810458:	00801004 	movi	r2,64
  81045c:	20800c26 	beq	r4,r2,810490 <__pack_f+0x140>
  810460:	18c00fc4 	addi	r3,r3,63
  810464:	00900034 	movhi	r2,16384
  810468:	10bfffc4 	addi	r2,r2,-1
  81046c:	180cd1fa 	srli	r6,r3,7
  810470:	10c7803a 	cmpltu	r3,r2,r3
  810474:	00802034 	movhi	r2,128
  810478:	10bfffc4 	addi	r2,r2,-1
  81047c:	308c703a 	and	r6,r6,r2
  810480:	003fbf06 	br	810380 <__pack_f+0x30>
  810484:	0007883a 	mov	r3,zero
  810488:	000d883a 	mov	r6,zero
  81048c:	003ff906 	br	810474 <__pack_f+0x124>
  810490:	1880200c 	andi	r2,r3,128
  810494:	10000126 	beq	r2,zero,81049c <__pack_f+0x14c>
  810498:	1907883a 	add	r3,r3,r4
  81049c:	180cd1fa 	srli	r6,r3,7
  8104a0:	00900034 	movhi	r2,16384
  8104a4:	10bfffc4 	addi	r2,r2,-1
  8104a8:	10c7803a 	cmpltu	r3,r2,r3
  8104ac:	003ff106 	br	810474 <__pack_f+0x124>

008104b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8104b0:	defff404 	addi	sp,sp,-48
  8104b4:	df000b15 	stw	fp,44(sp)
  8104b8:	df000b04 	addi	fp,sp,44
  8104bc:	e13ffb15 	stw	r4,-20(fp)
  8104c0:	e17ffc15 	stw	r5,-16(fp)
  8104c4:	e1bffd15 	stw	r6,-12(fp)
  8104c8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8104cc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8104d0:	008020b4 	movhi	r2,130
  8104d4:	10a34604 	addi	r2,r2,-29416
  8104d8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8104dc:	1005003a 	cmpeq	r2,r2,zero
  8104e0:	1000411e 	bne	r2,zero,8105e8 <alt_alarm_start+0x138>
  {
    if (alarm)
  8104e4:	e0bffb17 	ldw	r2,-20(fp)
  8104e8:	1005003a 	cmpeq	r2,r2,zero
  8104ec:	10003b1e 	bne	r2,zero,8105dc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8104f0:	e0fffb17 	ldw	r3,-20(fp)
  8104f4:	e0bffd17 	ldw	r2,-12(fp)
  8104f8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8104fc:	e0fffb17 	ldw	r3,-20(fp)
  810500:	e0bffe17 	ldw	r2,-8(fp)
  810504:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810508:	0005303a 	rdctl	r2,status
  81050c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810510:	e0fff817 	ldw	r3,-32(fp)
  810514:	00bfff84 	movi	r2,-2
  810518:	1884703a 	and	r2,r3,r2
  81051c:	1001703a 	wrctl	status,r2
  
  return context;
  810520:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810524:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810528:	008020b4 	movhi	r2,130
  81052c:	10a34704 	addi	r2,r2,-29412
  810530:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810534:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810538:	e0fffc17 	ldw	r3,-16(fp)
  81053c:	e0bff917 	ldw	r2,-28(fp)
  810540:	1885883a 	add	r2,r3,r2
  810544:	10c00044 	addi	r3,r2,1
  810548:	e0bffb17 	ldw	r2,-20(fp)
  81054c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810550:	e0bffb17 	ldw	r2,-20(fp)
  810554:	10c00217 	ldw	r3,8(r2)
  810558:	e0bff917 	ldw	r2,-28(fp)
  81055c:	1880042e 	bgeu	r3,r2,810570 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810560:	e0fffb17 	ldw	r3,-20(fp)
  810564:	00800044 	movi	r2,1
  810568:	18800405 	stb	r2,16(r3)
  81056c:	00000206 	br	810578 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810570:	e0bffb17 	ldw	r2,-20(fp)
  810574:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810578:	e0fffb17 	ldw	r3,-20(fp)
  81057c:	00802074 	movhi	r2,129
  810580:	109bf404 	addi	r2,r2,28624
  810584:	e0bff615 	stw	r2,-40(fp)
  810588:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81058c:	e0fff717 	ldw	r3,-36(fp)
  810590:	e0bff617 	ldw	r2,-40(fp)
  810594:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810598:	e0bff617 	ldw	r2,-40(fp)
  81059c:	10c00017 	ldw	r3,0(r2)
  8105a0:	e0bff717 	ldw	r2,-36(fp)
  8105a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8105a8:	e0bff617 	ldw	r2,-40(fp)
  8105ac:	10c00017 	ldw	r3,0(r2)
  8105b0:	e0bff717 	ldw	r2,-36(fp)
  8105b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8105b8:	e0fff617 	ldw	r3,-40(fp)
  8105bc:	e0bff717 	ldw	r2,-36(fp)
  8105c0:	18800015 	stw	r2,0(r3)
  8105c4:	e0bffa17 	ldw	r2,-24(fp)
  8105c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105cc:	e0bff517 	ldw	r2,-44(fp)
  8105d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8105d4:	e03fff15 	stw	zero,-4(fp)
  8105d8:	00000506 	br	8105f0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8105dc:	00bffa84 	movi	r2,-22
  8105e0:	e0bfff15 	stw	r2,-4(fp)
  8105e4:	00000206 	br	8105f0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8105e8:	00bfde84 	movi	r2,-134
  8105ec:	e0bfff15 	stw	r2,-4(fp)
  8105f0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8105f4:	e037883a 	mov	sp,fp
  8105f8:	df000017 	ldw	fp,0(sp)
  8105fc:	dec00104 	addi	sp,sp,4
  810600:	f800283a 	ret

00810604 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810604:	defff804 	addi	sp,sp,-32
  810608:	dfc00715 	stw	ra,28(sp)
  81060c:	df000615 	stw	fp,24(sp)
  810610:	df000604 	addi	fp,sp,24
  810614:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810618:	e0bffc17 	ldw	r2,-16(fp)
  81061c:	1004803a 	cmplt	r2,r2,zero
  810620:	1000081e 	bne	r2,zero,810644 <close+0x40>
  810624:	e0bffc17 	ldw	r2,-16(fp)
  810628:	10800324 	muli	r2,r2,12
  81062c:	1007883a 	mov	r3,r2
  810630:	00802074 	movhi	r2,129
  810634:	1096f204 	addi	r2,r2,23496
  810638:	1887883a 	add	r3,r3,r2
  81063c:	e0ffff15 	stw	r3,-4(fp)
  810640:	00000106 	br	810648 <close+0x44>
  810644:	e03fff15 	stw	zero,-4(fp)
  810648:	e0bfff17 	ldw	r2,-4(fp)
  81064c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  810650:	e0bffb17 	ldw	r2,-20(fp)
  810654:	1005003a 	cmpeq	r2,r2,zero
  810658:	10001d1e 	bne	r2,zero,8106d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81065c:	e0bffb17 	ldw	r2,-20(fp)
  810660:	10800017 	ldw	r2,0(r2)
  810664:	10800417 	ldw	r2,16(r2)
  810668:	1005003a 	cmpeq	r2,r2,zero
  81066c:	1000071e 	bne	r2,zero,81068c <close+0x88>
  810670:	e0bffb17 	ldw	r2,-20(fp)
  810674:	10800017 	ldw	r2,0(r2)
  810678:	10800417 	ldw	r2,16(r2)
  81067c:	e13ffb17 	ldw	r4,-20(fp)
  810680:	103ee83a 	callr	r2
  810684:	e0bffe15 	stw	r2,-8(fp)
  810688:	00000106 	br	810690 <close+0x8c>
  81068c:	e03ffe15 	stw	zero,-8(fp)
  810690:	e0bffe17 	ldw	r2,-8(fp)
  810694:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810698:	e13ffc17 	ldw	r4,-16(fp)
  81069c:	08112cc0 	call	8112cc <alt_release_fd>
    if (rval < 0)
  8106a0:	e0bffa17 	ldw	r2,-24(fp)
  8106a4:	1004403a 	cmpge	r2,r2,zero
  8106a8:	1000071e 	bne	r2,zero,8106c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8106ac:	08107000 	call	810700 <alt_get_errno>
  8106b0:	e0fffa17 	ldw	r3,-24(fp)
  8106b4:	00c7c83a 	sub	r3,zero,r3
  8106b8:	10c00015 	stw	r3,0(r2)
      return -1;
  8106bc:	00bfffc4 	movi	r2,-1
  8106c0:	e0bffd15 	stw	r2,-12(fp)
  8106c4:	00000806 	br	8106e8 <close+0xe4>
    }
    return 0;
  8106c8:	e03ffd15 	stw	zero,-12(fp)
  8106cc:	00000606 	br	8106e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8106d0:	08107000 	call	810700 <alt_get_errno>
  8106d4:	1007883a 	mov	r3,r2
  8106d8:	00801444 	movi	r2,81
  8106dc:	18800015 	stw	r2,0(r3)
    return -1;
  8106e0:	00bfffc4 	movi	r2,-1
  8106e4:	e0bffd15 	stw	r2,-12(fp)
  8106e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8106ec:	e037883a 	mov	sp,fp
  8106f0:	dfc00117 	ldw	ra,4(sp)
  8106f4:	df000017 	ldw	fp,0(sp)
  8106f8:	dec00204 	addi	sp,sp,8
  8106fc:	f800283a 	ret

00810700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810700:	defffd04 	addi	sp,sp,-12
  810704:	dfc00215 	stw	ra,8(sp)
  810708:	df000115 	stw	fp,4(sp)
  81070c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810710:	00802074 	movhi	r2,129
  810714:	109bf104 	addi	r2,r2,28612
  810718:	10800017 	ldw	r2,0(r2)
  81071c:	1005003a 	cmpeq	r2,r2,zero
  810720:	1000061e 	bne	r2,zero,81073c <alt_get_errno+0x3c>
  810724:	00802074 	movhi	r2,129
  810728:	109bf104 	addi	r2,r2,28612
  81072c:	10800017 	ldw	r2,0(r2)
  810730:	103ee83a 	callr	r2
  810734:	e0bfff15 	stw	r2,-4(fp)
  810738:	00000306 	br	810748 <alt_get_errno+0x48>
  81073c:	008020b4 	movhi	r2,130
  810740:	10a33b04 	addi	r2,r2,-29460
  810744:	e0bfff15 	stw	r2,-4(fp)
  810748:	e0bfff17 	ldw	r2,-4(fp)
}
  81074c:	e037883a 	mov	sp,fp
  810750:	dfc00117 	ldw	ra,4(sp)
  810754:	df000017 	ldw	fp,0(sp)
  810758:	dec00204 	addi	sp,sp,8
  81075c:	f800283a 	ret

00810760 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810760:	defffc04 	addi	sp,sp,-16
  810764:	df000315 	stw	fp,12(sp)
  810768:	df000304 	addi	fp,sp,12
  81076c:	e13ffd15 	stw	r4,-12(fp)
  810770:	e17ffe15 	stw	r5,-8(fp)
  810774:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810778:	e0bfff17 	ldw	r2,-4(fp)
}
  81077c:	e037883a 	mov	sp,fp
  810780:	df000017 	ldw	fp,0(sp)
  810784:	dec00104 	addi	sp,sp,4
  810788:	f800283a 	ret

0081078c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81078c:	defff904 	addi	sp,sp,-28
  810790:	dfc00615 	stw	ra,24(sp)
  810794:	df000515 	stw	fp,20(sp)
  810798:	df000504 	addi	fp,sp,20
  81079c:	e13ffc15 	stw	r4,-16(fp)
  8107a0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8107a4:	e0bffc17 	ldw	r2,-16(fp)
  8107a8:	1004803a 	cmplt	r2,r2,zero
  8107ac:	1000081e 	bne	r2,zero,8107d0 <fstat+0x44>
  8107b0:	e0bffc17 	ldw	r2,-16(fp)
  8107b4:	10800324 	muli	r2,r2,12
  8107b8:	1007883a 	mov	r3,r2
  8107bc:	00802074 	movhi	r2,129
  8107c0:	1096f204 	addi	r2,r2,23496
  8107c4:	1887883a 	add	r3,r3,r2
  8107c8:	e0ffff15 	stw	r3,-4(fp)
  8107cc:	00000106 	br	8107d4 <fstat+0x48>
  8107d0:	e03fff15 	stw	zero,-4(fp)
  8107d4:	e0bfff17 	ldw	r2,-4(fp)
  8107d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8107dc:	e0bffb17 	ldw	r2,-20(fp)
  8107e0:	1005003a 	cmpeq	r2,r2,zero
  8107e4:	1000121e 	bne	r2,zero,810830 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8107e8:	e0bffb17 	ldw	r2,-20(fp)
  8107ec:	10800017 	ldw	r2,0(r2)
  8107f0:	10800817 	ldw	r2,32(r2)
  8107f4:	1005003a 	cmpeq	r2,r2,zero
  8107f8:	1000081e 	bne	r2,zero,81081c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8107fc:	e0bffb17 	ldw	r2,-20(fp)
  810800:	10800017 	ldw	r2,0(r2)
  810804:	10800817 	ldw	r2,32(r2)
  810808:	e13ffb17 	ldw	r4,-20(fp)
  81080c:	e17ffd17 	ldw	r5,-12(fp)
  810810:	103ee83a 	callr	r2
  810814:	e0bffe15 	stw	r2,-8(fp)
  810818:	00000b06 	br	810848 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81081c:	e0fffd17 	ldw	r3,-12(fp)
  810820:	00880004 	movi	r2,8192
  810824:	18800115 	stw	r2,4(r3)
      return 0;
  810828:	e03ffe15 	stw	zero,-8(fp)
  81082c:	00000606 	br	810848 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810830:	08108600 	call	810860 <alt_get_errno>
  810834:	1007883a 	mov	r3,r2
  810838:	00801444 	movi	r2,81
  81083c:	18800015 	stw	r2,0(r3)
    return -1;
  810840:	00bfffc4 	movi	r2,-1
  810844:	e0bffe15 	stw	r2,-8(fp)
  810848:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81084c:	e037883a 	mov	sp,fp
  810850:	dfc00117 	ldw	ra,4(sp)
  810854:	df000017 	ldw	fp,0(sp)
  810858:	dec00204 	addi	sp,sp,8
  81085c:	f800283a 	ret

00810860 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810860:	defffd04 	addi	sp,sp,-12
  810864:	dfc00215 	stw	ra,8(sp)
  810868:	df000115 	stw	fp,4(sp)
  81086c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810870:	00802074 	movhi	r2,129
  810874:	109bf104 	addi	r2,r2,28612
  810878:	10800017 	ldw	r2,0(r2)
  81087c:	1005003a 	cmpeq	r2,r2,zero
  810880:	1000061e 	bne	r2,zero,81089c <alt_get_errno+0x3c>
  810884:	00802074 	movhi	r2,129
  810888:	109bf104 	addi	r2,r2,28612
  81088c:	10800017 	ldw	r2,0(r2)
  810890:	103ee83a 	callr	r2
  810894:	e0bfff15 	stw	r2,-4(fp)
  810898:	00000306 	br	8108a8 <alt_get_errno+0x48>
  81089c:	008020b4 	movhi	r2,130
  8108a0:	10a33b04 	addi	r2,r2,-29460
  8108a4:	e0bfff15 	stw	r2,-4(fp)
  8108a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8108ac:	e037883a 	mov	sp,fp
  8108b0:	dfc00117 	ldw	ra,4(sp)
  8108b4:	df000017 	ldw	fp,0(sp)
  8108b8:	dec00204 	addi	sp,sp,8
  8108bc:	f800283a 	ret

008108c0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8108c0:	deffef04 	addi	sp,sp,-68
  8108c4:	df001015 	stw	fp,64(sp)
  8108c8:	df001004 	addi	fp,sp,64
  8108cc:	e13ffc15 	stw	r4,-16(fp)
  8108d0:	e17ffd15 	stw	r5,-12(fp)
  8108d4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8108d8:	00bffa84 	movi	r2,-22
  8108dc:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8108e0:	e0bffc17 	ldw	r2,-16(fp)
  8108e4:	10800828 	cmpgeui	r2,r2,32
  8108e8:	1000601e 	bne	r2,zero,810a6c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108ec:	0005303a 	rdctl	r2,status
  8108f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8108f4:	e0fff917 	ldw	r3,-28(fp)
  8108f8:	00bfff84 	movi	r2,-2
  8108fc:	1884703a 	and	r2,r3,r2
  810900:	1001703a 	wrctl	status,r2
  
  return context;
  810904:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810908:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81090c:	e0bffc17 	ldw	r2,-16(fp)
  810910:	00c020b4 	movhi	r3,130
  810914:	18e39e04 	addi	r3,r3,-29064
  810918:	100490fa 	slli	r2,r2,3
  81091c:	10c7883a 	add	r3,r2,r3
  810920:	e0bffe17 	ldw	r2,-8(fp)
  810924:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  810928:	e0bffc17 	ldw	r2,-16(fp)
  81092c:	00c020b4 	movhi	r3,130
  810930:	18e39e04 	addi	r3,r3,-29064
  810934:	100490fa 	slli	r2,r2,3
  810938:	10c5883a 	add	r2,r2,r3
  81093c:	10c00104 	addi	r3,r2,4
  810940:	e0bffd17 	ldw	r2,-12(fp)
  810944:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810948:	e0bffe17 	ldw	r2,-8(fp)
  81094c:	1005003a 	cmpeq	r2,r2,zero
  810950:	1000201e 	bne	r2,zero,8109d4 <alt_irq_register+0x114>
  810954:	e0bffc17 	ldw	r2,-16(fp)
  810958:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81095c:	0005303a 	rdctl	r2,status
  810960:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810964:	e0fff617 	ldw	r3,-40(fp)
  810968:	00bfff84 	movi	r2,-2
  81096c:	1884703a 	and	r2,r3,r2
  810970:	1001703a 	wrctl	status,r2
  
  return context;
  810974:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810978:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81097c:	e0fff717 	ldw	r3,-36(fp)
  810980:	00800044 	movi	r2,1
  810984:	10c4983a 	sll	r2,r2,r3
  810988:	1007883a 	mov	r3,r2
  81098c:	008020b4 	movhi	r2,130
  810990:	10a34204 	addi	r2,r2,-29432
  810994:	10800017 	ldw	r2,0(r2)
  810998:	1886b03a 	or	r3,r3,r2
  81099c:	008020b4 	movhi	r2,130
  8109a0:	10a34204 	addi	r2,r2,-29432
  8109a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8109a8:	008020b4 	movhi	r2,130
  8109ac:	10a34204 	addi	r2,r2,-29432
  8109b0:	10800017 	ldw	r2,0(r2)
  8109b4:	100170fa 	wrctl	ienable,r2
  8109b8:	e0bff817 	ldw	r2,-32(fp)
  8109bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109c0:	e0bff517 	ldw	r2,-44(fp)
  8109c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8109c8:	0005883a 	mov	r2,zero
  8109cc:	e0bfff15 	stw	r2,-4(fp)
  8109d0:	00002006 	br	810a54 <alt_irq_register+0x194>
  8109d4:	e0bffc17 	ldw	r2,-16(fp)
  8109d8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109dc:	0005303a 	rdctl	r2,status
  8109e0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109e4:	e0fff217 	ldw	r3,-56(fp)
  8109e8:	00bfff84 	movi	r2,-2
  8109ec:	1884703a 	and	r2,r3,r2
  8109f0:	1001703a 	wrctl	status,r2
  
  return context;
  8109f4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8109f8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  8109fc:	e0fff317 	ldw	r3,-52(fp)
  810a00:	00800044 	movi	r2,1
  810a04:	10c4983a 	sll	r2,r2,r3
  810a08:	0084303a 	nor	r2,zero,r2
  810a0c:	1007883a 	mov	r3,r2
  810a10:	008020b4 	movhi	r2,130
  810a14:	10a34204 	addi	r2,r2,-29432
  810a18:	10800017 	ldw	r2,0(r2)
  810a1c:	1886703a 	and	r3,r3,r2
  810a20:	008020b4 	movhi	r2,130
  810a24:	10a34204 	addi	r2,r2,-29432
  810a28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810a2c:	008020b4 	movhi	r2,130
  810a30:	10a34204 	addi	r2,r2,-29432
  810a34:	10800017 	ldw	r2,0(r2)
  810a38:	100170fa 	wrctl	ienable,r2
  810a3c:	e0bff417 	ldw	r2,-48(fp)
  810a40:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a44:	e0bff117 	ldw	r2,-60(fp)
  810a48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810a4c:	0005883a 	mov	r2,zero
  810a50:	e0bfff15 	stw	r2,-4(fp)
  810a54:	e0bfff17 	ldw	r2,-4(fp)
  810a58:	e0bffb15 	stw	r2,-20(fp)
  810a5c:	e0bffa17 	ldw	r2,-24(fp)
  810a60:	e0bff015 	stw	r2,-64(fp)
  810a64:	e0bff017 	ldw	r2,-64(fp)
  810a68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810a6c:	e0bffb17 	ldw	r2,-20(fp)
}
  810a70:	e037883a 	mov	sp,fp
  810a74:	df000017 	ldw	fp,0(sp)
  810a78:	dec00104 	addi	sp,sp,4
  810a7c:	f800283a 	ret

00810a80 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810a80:	deffeb04 	addi	sp,sp,-84
  810a84:	dfc01415 	stw	ra,80(sp)
  810a88:	df001315 	stw	fp,76(sp)
  810a8c:	df001304 	addi	fp,sp,76
  810a90:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810a94:	e0bffd17 	ldw	r2,-12(fp)
  810a98:	1004803a 	cmplt	r2,r2,zero
  810a9c:	1000081e 	bne	r2,zero,810ac0 <isatty+0x40>
  810aa0:	e0bffd17 	ldw	r2,-12(fp)
  810aa4:	10800324 	muli	r2,r2,12
  810aa8:	1007883a 	mov	r3,r2
  810aac:	00802074 	movhi	r2,129
  810ab0:	1096f204 	addi	r2,r2,23496
  810ab4:	1887883a 	add	r3,r3,r2
  810ab8:	e0ffff15 	stw	r3,-4(fp)
  810abc:	00000106 	br	810ac4 <isatty+0x44>
  810ac0:	e03fff15 	stw	zero,-4(fp)
  810ac4:	e0bfff17 	ldw	r2,-4(fp)
  810ac8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810acc:	e0bfed17 	ldw	r2,-76(fp)
  810ad0:	1005003a 	cmpeq	r2,r2,zero
  810ad4:	10000f1e 	bne	r2,zero,810b14 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810ad8:	e0bfed17 	ldw	r2,-76(fp)
  810adc:	10800017 	ldw	r2,0(r2)
  810ae0:	10800817 	ldw	r2,32(r2)
  810ae4:	1004c03a 	cmpne	r2,r2,zero
  810ae8:	1000031e 	bne	r2,zero,810af8 <isatty+0x78>
    {
      return 1;
  810aec:	00800044 	movi	r2,1
  810af0:	e0bffe15 	stw	r2,-8(fp)
  810af4:	00000c06 	br	810b28 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810af8:	e17fee04 	addi	r5,fp,-72
  810afc:	e13ffd17 	ldw	r4,-12(fp)
  810b00:	081078c0 	call	81078c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810b04:	e0bfef17 	ldw	r2,-68(fp)
  810b08:	10880020 	cmpeqi	r2,r2,8192
  810b0c:	e0bffe15 	stw	r2,-8(fp)
  810b10:	00000506 	br	810b28 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810b14:	0810b400 	call	810b40 <alt_get_errno>
  810b18:	1007883a 	mov	r3,r2
  810b1c:	00801444 	movi	r2,81
  810b20:	18800015 	stw	r2,0(r3)
    return 0;
  810b24:	e03ffe15 	stw	zero,-8(fp)
  810b28:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810b2c:	e037883a 	mov	sp,fp
  810b30:	dfc00117 	ldw	ra,4(sp)
  810b34:	df000017 	ldw	fp,0(sp)
  810b38:	dec00204 	addi	sp,sp,8
  810b3c:	f800283a 	ret

00810b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810b40:	defffd04 	addi	sp,sp,-12
  810b44:	dfc00215 	stw	ra,8(sp)
  810b48:	df000115 	stw	fp,4(sp)
  810b4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810b50:	00802074 	movhi	r2,129
  810b54:	109bf104 	addi	r2,r2,28612
  810b58:	10800017 	ldw	r2,0(r2)
  810b5c:	1005003a 	cmpeq	r2,r2,zero
  810b60:	1000061e 	bne	r2,zero,810b7c <alt_get_errno+0x3c>
  810b64:	00802074 	movhi	r2,129
  810b68:	109bf104 	addi	r2,r2,28612
  810b6c:	10800017 	ldw	r2,0(r2)
  810b70:	103ee83a 	callr	r2
  810b74:	e0bfff15 	stw	r2,-4(fp)
  810b78:	00000306 	br	810b88 <alt_get_errno+0x48>
  810b7c:	008020b4 	movhi	r2,130
  810b80:	10a33b04 	addi	r2,r2,-29460
  810b84:	e0bfff15 	stw	r2,-4(fp)
  810b88:	e0bfff17 	ldw	r2,-4(fp)
}
  810b8c:	e037883a 	mov	sp,fp
  810b90:	dfc00117 	ldw	ra,4(sp)
  810b94:	df000017 	ldw	fp,0(sp)
  810b98:	dec00204 	addi	sp,sp,8
  810b9c:	f800283a 	ret

00810ba0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810ba0:	defffe04 	addi	sp,sp,-8
  810ba4:	dfc00115 	stw	ra,4(sp)
  810ba8:	df000015 	stw	fp,0(sp)
  810bac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810bb0:	01002074 	movhi	r4,129
  810bb4:	211bf704 	addi	r4,r4,28636
  810bb8:	01402074 	movhi	r5,129
  810bbc:	2954c204 	addi	r5,r5,21256
  810bc0:	01802074 	movhi	r6,129
  810bc4:	319bf704 	addi	r6,r6,28636
  810bc8:	0810c200 	call	810c20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810bcc:	01002034 	movhi	r4,128
  810bd0:	21000804 	addi	r4,r4,32
  810bd4:	01402034 	movhi	r5,128
  810bd8:	29400804 	addi	r5,r5,32
  810bdc:	01802034 	movhi	r6,128
  810be0:	31806d04 	addi	r6,r6,436
  810be4:	0810c200 	call	810c20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810be8:	01002074 	movhi	r4,129
  810bec:	2112e904 	addi	r4,r4,19364
  810bf0:	01402074 	movhi	r5,129
  810bf4:	2952e904 	addi	r5,r5,19364
  810bf8:	01802074 	movhi	r6,129
  810bfc:	3194c204 	addi	r6,r6,21256
  810c00:	0810c200 	call	810c20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810c04:	0813ca80 	call	813ca8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810c08:	08141340 	call	814134 <alt_icache_flush_all>
}
  810c0c:	e037883a 	mov	sp,fp
  810c10:	dfc00117 	ldw	ra,4(sp)
  810c14:	df000017 	ldw	fp,0(sp)
  810c18:	dec00204 	addi	sp,sp,8
  810c1c:	f800283a 	ret

00810c20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810c20:	defffc04 	addi	sp,sp,-16
  810c24:	df000315 	stw	fp,12(sp)
  810c28:	df000304 	addi	fp,sp,12
  810c2c:	e13ffd15 	stw	r4,-12(fp)
  810c30:	e17ffe15 	stw	r5,-8(fp)
  810c34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810c38:	e0fffe17 	ldw	r3,-8(fp)
  810c3c:	e0bffd17 	ldw	r2,-12(fp)
  810c40:	18800e26 	beq	r3,r2,810c7c <alt_load_section+0x5c>
  {
    while( to != end )
  810c44:	00000a06 	br	810c70 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810c48:	e0bffd17 	ldw	r2,-12(fp)
  810c4c:	10c00017 	ldw	r3,0(r2)
  810c50:	e0bffe17 	ldw	r2,-8(fp)
  810c54:	10c00015 	stw	r3,0(r2)
  810c58:	e0bffe17 	ldw	r2,-8(fp)
  810c5c:	10800104 	addi	r2,r2,4
  810c60:	e0bffe15 	stw	r2,-8(fp)
  810c64:	e0bffd17 	ldw	r2,-12(fp)
  810c68:	10800104 	addi	r2,r2,4
  810c6c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810c70:	e0fffe17 	ldw	r3,-8(fp)
  810c74:	e0bfff17 	ldw	r2,-4(fp)
  810c78:	18bff31e 	bne	r3,r2,810c48 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810c7c:	e037883a 	mov	sp,fp
  810c80:	df000017 	ldw	fp,0(sp)
  810c84:	dec00104 	addi	sp,sp,4
  810c88:	f800283a 	ret

00810c8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810c8c:	defff804 	addi	sp,sp,-32
  810c90:	dfc00715 	stw	ra,28(sp)
  810c94:	df000615 	stw	fp,24(sp)
  810c98:	df000604 	addi	fp,sp,24
  810c9c:	e13ffc15 	stw	r4,-16(fp)
  810ca0:	e17ffd15 	stw	r5,-12(fp)
  810ca4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810ca8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810cac:	e0bffc17 	ldw	r2,-16(fp)
  810cb0:	1004803a 	cmplt	r2,r2,zero
  810cb4:	1000081e 	bne	r2,zero,810cd8 <lseek+0x4c>
  810cb8:	e0bffc17 	ldw	r2,-16(fp)
  810cbc:	10800324 	muli	r2,r2,12
  810cc0:	1007883a 	mov	r3,r2
  810cc4:	00802074 	movhi	r2,129
  810cc8:	1096f204 	addi	r2,r2,23496
  810ccc:	1887883a 	add	r3,r3,r2
  810cd0:	e0ffff15 	stw	r3,-4(fp)
  810cd4:	00000106 	br	810cdc <lseek+0x50>
  810cd8:	e03fff15 	stw	zero,-4(fp)
  810cdc:	e0bfff17 	ldw	r2,-4(fp)
  810ce0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810ce4:	e0bffb17 	ldw	r2,-20(fp)
  810ce8:	1005003a 	cmpeq	r2,r2,zero
  810cec:	1000111e 	bne	r2,zero,810d34 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810cf0:	e0bffb17 	ldw	r2,-20(fp)
  810cf4:	10800017 	ldw	r2,0(r2)
  810cf8:	10800717 	ldw	r2,28(r2)
  810cfc:	1005003a 	cmpeq	r2,r2,zero
  810d00:	1000091e 	bne	r2,zero,810d28 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810d04:	e0bffb17 	ldw	r2,-20(fp)
  810d08:	10800017 	ldw	r2,0(r2)
  810d0c:	10800717 	ldw	r2,28(r2)
  810d10:	e13ffb17 	ldw	r4,-20(fp)
  810d14:	e17ffd17 	ldw	r5,-12(fp)
  810d18:	e1bffe17 	ldw	r6,-8(fp)
  810d1c:	103ee83a 	callr	r2
  810d20:	e0bffa15 	stw	r2,-24(fp)
  810d24:	00000506 	br	810d3c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810d28:	00bfde84 	movi	r2,-134
  810d2c:	e0bffa15 	stw	r2,-24(fp)
  810d30:	00000206 	br	810d3c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810d34:	00bfebc4 	movi	r2,-81
  810d38:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810d3c:	e0bffa17 	ldw	r2,-24(fp)
  810d40:	1004403a 	cmpge	r2,r2,zero
  810d44:	1000071e 	bne	r2,zero,810d64 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810d48:	0810d7c0 	call	810d7c <alt_get_errno>
  810d4c:	1007883a 	mov	r3,r2
  810d50:	e0bffa17 	ldw	r2,-24(fp)
  810d54:	0085c83a 	sub	r2,zero,r2
  810d58:	18800015 	stw	r2,0(r3)
    rc = -1;
  810d5c:	00bfffc4 	movi	r2,-1
  810d60:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810d64:	e0bffa17 	ldw	r2,-24(fp)
}
  810d68:	e037883a 	mov	sp,fp
  810d6c:	dfc00117 	ldw	ra,4(sp)
  810d70:	df000017 	ldw	fp,0(sp)
  810d74:	dec00204 	addi	sp,sp,8
  810d78:	f800283a 	ret

00810d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810d7c:	defffd04 	addi	sp,sp,-12
  810d80:	dfc00215 	stw	ra,8(sp)
  810d84:	df000115 	stw	fp,4(sp)
  810d88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810d8c:	00802074 	movhi	r2,129
  810d90:	109bf104 	addi	r2,r2,28612
  810d94:	10800017 	ldw	r2,0(r2)
  810d98:	1005003a 	cmpeq	r2,r2,zero
  810d9c:	1000061e 	bne	r2,zero,810db8 <alt_get_errno+0x3c>
  810da0:	00802074 	movhi	r2,129
  810da4:	109bf104 	addi	r2,r2,28612
  810da8:	10800017 	ldw	r2,0(r2)
  810dac:	103ee83a 	callr	r2
  810db0:	e0bfff15 	stw	r2,-4(fp)
  810db4:	00000306 	br	810dc4 <alt_get_errno+0x48>
  810db8:	008020b4 	movhi	r2,130
  810dbc:	10a33b04 	addi	r2,r2,-29460
  810dc0:	e0bfff15 	stw	r2,-4(fp)
  810dc4:	e0bfff17 	ldw	r2,-4(fp)
}
  810dc8:	e037883a 	mov	sp,fp
  810dcc:	dfc00117 	ldw	ra,4(sp)
  810dd0:	df000017 	ldw	fp,0(sp)
  810dd4:	dec00204 	addi	sp,sp,8
  810dd8:	f800283a 	ret

00810ddc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810ddc:	defffd04 	addi	sp,sp,-12
  810de0:	dfc00215 	stw	ra,8(sp)
  810de4:	df000115 	stw	fp,4(sp)
  810de8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810dec:	0009883a 	mov	r4,zero
  810df0:	081170c0 	call	81170c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810df4:	08117400 	call	811740 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810df8:	01002074 	movhi	r4,129
  810dfc:	2114b404 	addi	r4,r4,21200
  810e00:	01402074 	movhi	r5,129
  810e04:	2954b404 	addi	r5,r5,21200
  810e08:	01802074 	movhi	r6,129
  810e0c:	3194b404 	addi	r6,r6,21200
  810e10:	08144f40 	call	8144f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810e14:	0813e000 	call	813e00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810e18:	01002074 	movhi	r4,129
  810e1c:	210f9904 	addi	r4,r4,15972
  810e20:	08147980 	call	814798 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810e24:	d1276017 	ldw	r4,-25216(gp)
  810e28:	d1676117 	ldw	r5,-25212(gp)
  810e2c:	d1a76217 	ldw	r6,-25208(gp)
  810e30:	0800d400 	call	800d40 <main>
  810e34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810e38:	01000044 	movi	r4,1
  810e3c:	08106040 	call	810604 <close>
  exit (result);
  810e40:	e13fff17 	ldw	r4,-4(fp)
  810e44:	08147ac0 	call	8147ac <exit>

00810e48 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810e48:	defffe04 	addi	sp,sp,-8
  810e4c:	df000115 	stw	fp,4(sp)
  810e50:	df000104 	addi	fp,sp,4
  810e54:	e13fff15 	stw	r4,-4(fp)
}
  810e58:	e037883a 	mov	sp,fp
  810e5c:	df000017 	ldw	fp,0(sp)
  810e60:	dec00104 	addi	sp,sp,4
  810e64:	f800283a 	ret

00810e68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810e68:	defffe04 	addi	sp,sp,-8
  810e6c:	df000115 	stw	fp,4(sp)
  810e70:	df000104 	addi	fp,sp,4
  810e74:	e13fff15 	stw	r4,-4(fp)
}
  810e78:	e037883a 	mov	sp,fp
  810e7c:	df000017 	ldw	fp,0(sp)
  810e80:	dec00104 	addi	sp,sp,4
  810e84:	f800283a 	ret

00810e88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810e88:	defffc04 	addi	sp,sp,-16
  810e8c:	df000315 	stw	fp,12(sp)
  810e90:	df000304 	addi	fp,sp,12
  810e94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810e98:	e0bffe17 	ldw	r2,-8(fp)
  810e9c:	10800217 	ldw	r2,8(r2)
  810ea0:	10d00034 	orhi	r3,r2,16384
  810ea4:	e0bffe17 	ldw	r2,-8(fp)
  810ea8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810eac:	e03ffd15 	stw	zero,-12(fp)
  810eb0:	00002006 	br	810f34 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810eb4:	e0bffd17 	ldw	r2,-12(fp)
  810eb8:	00c02074 	movhi	r3,129
  810ebc:	18d6f204 	addi	r3,r3,23496
  810ec0:	10800324 	muli	r2,r2,12
  810ec4:	10c5883a 	add	r2,r2,r3
  810ec8:	10c00017 	ldw	r3,0(r2)
  810ecc:	e0bffe17 	ldw	r2,-8(fp)
  810ed0:	10800017 	ldw	r2,0(r2)
  810ed4:	1880141e 	bne	r3,r2,810f28 <alt_file_locked+0xa0>
  810ed8:	e0bffd17 	ldw	r2,-12(fp)
  810edc:	00c02074 	movhi	r3,129
  810ee0:	18d6f204 	addi	r3,r3,23496
  810ee4:	10800324 	muli	r2,r2,12
  810ee8:	10c5883a 	add	r2,r2,r3
  810eec:	10800204 	addi	r2,r2,8
  810ef0:	10800017 	ldw	r2,0(r2)
  810ef4:	1004403a 	cmpge	r2,r2,zero
  810ef8:	10000b1e 	bne	r2,zero,810f28 <alt_file_locked+0xa0>
  810efc:	e0bffd17 	ldw	r2,-12(fp)
  810f00:	10800324 	muli	r2,r2,12
  810f04:	1007883a 	mov	r3,r2
  810f08:	00802074 	movhi	r2,129
  810f0c:	1096f204 	addi	r2,r2,23496
  810f10:	1887883a 	add	r3,r3,r2
  810f14:	e0bffe17 	ldw	r2,-8(fp)
  810f18:	18800326 	beq	r3,r2,810f28 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810f1c:	00bffcc4 	movi	r2,-13
  810f20:	e0bfff15 	stw	r2,-4(fp)
  810f24:	00000a06 	br	810f50 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810f28:	e0bffd17 	ldw	r2,-12(fp)
  810f2c:	10800044 	addi	r2,r2,1
  810f30:	e0bffd15 	stw	r2,-12(fp)
  810f34:	00802074 	movhi	r2,129
  810f38:	109bf004 	addi	r2,r2,28608
  810f3c:	10800017 	ldw	r2,0(r2)
  810f40:	1007883a 	mov	r3,r2
  810f44:	e0bffd17 	ldw	r2,-12(fp)
  810f48:	18bfda2e 	bgeu	r3,r2,810eb4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810f4c:	e03fff15 	stw	zero,-4(fp)
  810f50:	e0bfff17 	ldw	r2,-4(fp)
}
  810f54:	e037883a 	mov	sp,fp
  810f58:	df000017 	ldw	fp,0(sp)
  810f5c:	dec00104 	addi	sp,sp,4
  810f60:	f800283a 	ret

00810f64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810f64:	defff404 	addi	sp,sp,-48
  810f68:	dfc00b15 	stw	ra,44(sp)
  810f6c:	df000a15 	stw	fp,40(sp)
  810f70:	df000a04 	addi	fp,sp,40
  810f74:	e13ffb15 	stw	r4,-20(fp)
  810f78:	e17ffc15 	stw	r5,-16(fp)
  810f7c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810f80:	00bfffc4 	movi	r2,-1
  810f84:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  810f88:	00bffb44 	movi	r2,-19
  810f8c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  810f90:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810f94:	e13ffb17 	ldw	r4,-20(fp)
  810f98:	01402074 	movhi	r5,129
  810f9c:	295bee04 	addi	r5,r5,28600
  810fa0:	0813ec80 	call	813ec8 <alt_find_dev>
  810fa4:	e0bffa15 	stw	r2,-24(fp)
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	1004c03a 	cmpne	r2,r2,zero
  810fb0:	1000051e 	bne	r2,zero,810fc8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810fb4:	e13ffb17 	ldw	r4,-20(fp)
  810fb8:	0813f5c0 	call	813f5c <alt_find_file>
  810fbc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  810fc0:	00800044 	movi	r2,1
  810fc4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810fc8:	e0bffa17 	ldw	r2,-24(fp)
  810fcc:	1005003a 	cmpeq	r2,r2,zero
  810fd0:	1000301e 	bne	r2,zero,811094 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810fd4:	e13ffa17 	ldw	r4,-24(fp)
  810fd8:	081407c0 	call	81407c <alt_get_fd>
  810fdc:	e0bff815 	stw	r2,-32(fp)
  810fe0:	e0bff817 	ldw	r2,-32(fp)
  810fe4:	1004403a 	cmpge	r2,r2,zero
  810fe8:	1000031e 	bne	r2,zero,810ff8 <open+0x94>
    {
      status = index;
  810fec:	e0bff817 	ldw	r2,-32(fp)
  810ff0:	e0bff715 	stw	r2,-36(fp)
  810ff4:	00002906 	br	81109c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  810ff8:	e0bff817 	ldw	r2,-32(fp)
  810ffc:	10800324 	muli	r2,r2,12
  811000:	1007883a 	mov	r3,r2
  811004:	00802074 	movhi	r2,129
  811008:	1096f204 	addi	r2,r2,23496
  81100c:	1885883a 	add	r2,r3,r2
  811010:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811014:	e0fffc17 	ldw	r3,-16(fp)
  811018:	00900034 	movhi	r2,16384
  81101c:	10bfffc4 	addi	r2,r2,-1
  811020:	1886703a 	and	r3,r3,r2
  811024:	e0bff917 	ldw	r2,-28(fp)
  811028:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81102c:	e0bff617 	ldw	r2,-40(fp)
  811030:	1004c03a 	cmpne	r2,r2,zero
  811034:	1000061e 	bne	r2,zero,811050 <open+0xec>
  811038:	e13ff917 	ldw	r4,-28(fp)
  81103c:	0810e880 	call	810e88 <alt_file_locked>
  811040:	e0bff715 	stw	r2,-36(fp)
  811044:	e0bff717 	ldw	r2,-36(fp)
  811048:	1004803a 	cmplt	r2,r2,zero
  81104c:	1000131e 	bne	r2,zero,81109c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811050:	e0bffa17 	ldw	r2,-24(fp)
  811054:	10800317 	ldw	r2,12(r2)
  811058:	1005003a 	cmpeq	r2,r2,zero
  81105c:	1000091e 	bne	r2,zero,811084 <open+0x120>
  811060:	e0bffa17 	ldw	r2,-24(fp)
  811064:	10800317 	ldw	r2,12(r2)
  811068:	e13ff917 	ldw	r4,-28(fp)
  81106c:	e17ffb17 	ldw	r5,-20(fp)
  811070:	e1bffc17 	ldw	r6,-16(fp)
  811074:	e1fffd17 	ldw	r7,-12(fp)
  811078:	103ee83a 	callr	r2
  81107c:	e0bfff15 	stw	r2,-4(fp)
  811080:	00000106 	br	811088 <open+0x124>
  811084:	e03fff15 	stw	zero,-4(fp)
  811088:	e0bfff17 	ldw	r2,-4(fp)
  81108c:	e0bff715 	stw	r2,-36(fp)
  811090:	00000206 	br	81109c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811094:	00bffb44 	movi	r2,-19
  811098:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81109c:	e0bff717 	ldw	r2,-36(fp)
  8110a0:	1004403a 	cmpge	r2,r2,zero
  8110a4:	1000091e 	bne	r2,zero,8110cc <open+0x168>
  {
    alt_release_fd (index);  
  8110a8:	e13ff817 	ldw	r4,-32(fp)
  8110ac:	08112cc0 	call	8112cc <alt_release_fd>
    ALT_ERRNO = -status;
  8110b0:	08110ec0 	call	8110ec <alt_get_errno>
  8110b4:	e0fff717 	ldw	r3,-36(fp)
  8110b8:	00c7c83a 	sub	r3,zero,r3
  8110bc:	10c00015 	stw	r3,0(r2)
    return -1;
  8110c0:	00bfffc4 	movi	r2,-1
  8110c4:	e0bffe15 	stw	r2,-8(fp)
  8110c8:	00000206 	br	8110d4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  8110cc:	e0bff817 	ldw	r2,-32(fp)
  8110d0:	e0bffe15 	stw	r2,-8(fp)
  8110d4:	e0bffe17 	ldw	r2,-8(fp)
}
  8110d8:	e037883a 	mov	sp,fp
  8110dc:	dfc00117 	ldw	ra,4(sp)
  8110e0:	df000017 	ldw	fp,0(sp)
  8110e4:	dec00204 	addi	sp,sp,8
  8110e8:	f800283a 	ret

008110ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8110ec:	defffd04 	addi	sp,sp,-12
  8110f0:	dfc00215 	stw	ra,8(sp)
  8110f4:	df000115 	stw	fp,4(sp)
  8110f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8110fc:	00802074 	movhi	r2,129
  811100:	109bf104 	addi	r2,r2,28612
  811104:	10800017 	ldw	r2,0(r2)
  811108:	1005003a 	cmpeq	r2,r2,zero
  81110c:	1000061e 	bne	r2,zero,811128 <alt_get_errno+0x3c>
  811110:	00802074 	movhi	r2,129
  811114:	109bf104 	addi	r2,r2,28612
  811118:	10800017 	ldw	r2,0(r2)
  81111c:	103ee83a 	callr	r2
  811120:	e0bfff15 	stw	r2,-4(fp)
  811124:	00000306 	br	811134 <alt_get_errno+0x48>
  811128:	008020b4 	movhi	r2,130
  81112c:	10a33b04 	addi	r2,r2,-29460
  811130:	e0bfff15 	stw	r2,-4(fp)
  811134:	e0bfff17 	ldw	r2,-4(fp)
}
  811138:	e037883a 	mov	sp,fp
  81113c:	dfc00117 	ldw	ra,4(sp)
  811140:	df000017 	ldw	fp,0(sp)
  811144:	dec00204 	addi	sp,sp,8
  811148:	f800283a 	ret

0081114c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81114c:	defff704 	addi	sp,sp,-36
  811150:	dfc00815 	stw	ra,32(sp)
  811154:	df000715 	stw	fp,28(sp)
  811158:	df000704 	addi	fp,sp,28
  81115c:	e13ffb15 	stw	r4,-20(fp)
  811160:	e17ffc15 	stw	r5,-16(fp)
  811164:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811168:	e0bffb17 	ldw	r2,-20(fp)
  81116c:	1004803a 	cmplt	r2,r2,zero
  811170:	1000081e 	bne	r2,zero,811194 <read+0x48>
  811174:	e0bffb17 	ldw	r2,-20(fp)
  811178:	10800324 	muli	r2,r2,12
  81117c:	1007883a 	mov	r3,r2
  811180:	00802074 	movhi	r2,129
  811184:	1096f204 	addi	r2,r2,23496
  811188:	1887883a 	add	r3,r3,r2
  81118c:	e0ffff15 	stw	r3,-4(fp)
  811190:	00000106 	br	811198 <read+0x4c>
  811194:	e03fff15 	stw	zero,-4(fp)
  811198:	e0bfff17 	ldw	r2,-4(fp)
  81119c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8111a0:	e0bffa17 	ldw	r2,-24(fp)
  8111a4:	1005003a 	cmpeq	r2,r2,zero
  8111a8:	1000241e 	bne	r2,zero,81123c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8111ac:	e0bffa17 	ldw	r2,-24(fp)
  8111b0:	10800217 	ldw	r2,8(r2)
  8111b4:	108000cc 	andi	r2,r2,3
  8111b8:	10800060 	cmpeqi	r2,r2,1
  8111bc:	10001a1e 	bne	r2,zero,811228 <read+0xdc>
  8111c0:	e0bffa17 	ldw	r2,-24(fp)
  8111c4:	10800017 	ldw	r2,0(r2)
  8111c8:	10800517 	ldw	r2,20(r2)
  8111cc:	1005003a 	cmpeq	r2,r2,zero
  8111d0:	1000151e 	bne	r2,zero,811228 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8111d4:	e0bffa17 	ldw	r2,-24(fp)
  8111d8:	10800017 	ldw	r2,0(r2)
  8111dc:	10800517 	ldw	r2,20(r2)
  8111e0:	e17ffc17 	ldw	r5,-16(fp)
  8111e4:	e1bffd17 	ldw	r6,-12(fp)
  8111e8:	e13ffa17 	ldw	r4,-24(fp)
  8111ec:	103ee83a 	callr	r2
  8111f0:	e0bff915 	stw	r2,-28(fp)
  8111f4:	e0bff917 	ldw	r2,-28(fp)
  8111f8:	1004403a 	cmpge	r2,r2,zero
  8111fc:	1000071e 	bne	r2,zero,81121c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  811200:	081126c0 	call	81126c <alt_get_errno>
  811204:	e0fff917 	ldw	r3,-28(fp)
  811208:	00c7c83a 	sub	r3,zero,r3
  81120c:	10c00015 	stw	r3,0(r2)
          return -1;
  811210:	00bfffc4 	movi	r2,-1
  811214:	e0bffe15 	stw	r2,-8(fp)
  811218:	00000e06 	br	811254 <read+0x108>
        }
        return rval;
  81121c:	e0bff917 	ldw	r2,-28(fp)
  811220:	e0bffe15 	stw	r2,-8(fp)
  811224:	00000b06 	br	811254 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811228:	081126c0 	call	81126c <alt_get_errno>
  81122c:	1007883a 	mov	r3,r2
  811230:	00800344 	movi	r2,13
  811234:	18800015 	stw	r2,0(r3)
  811238:	00000406 	br	81124c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81123c:	081126c0 	call	81126c <alt_get_errno>
  811240:	1007883a 	mov	r3,r2
  811244:	00801444 	movi	r2,81
  811248:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81124c:	00bfffc4 	movi	r2,-1
  811250:	e0bffe15 	stw	r2,-8(fp)
  811254:	e0bffe17 	ldw	r2,-8(fp)
}
  811258:	e037883a 	mov	sp,fp
  81125c:	dfc00117 	ldw	ra,4(sp)
  811260:	df000017 	ldw	fp,0(sp)
  811264:	dec00204 	addi	sp,sp,8
  811268:	f800283a 	ret

0081126c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81126c:	defffd04 	addi	sp,sp,-12
  811270:	dfc00215 	stw	ra,8(sp)
  811274:	df000115 	stw	fp,4(sp)
  811278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81127c:	00802074 	movhi	r2,129
  811280:	109bf104 	addi	r2,r2,28612
  811284:	10800017 	ldw	r2,0(r2)
  811288:	1005003a 	cmpeq	r2,r2,zero
  81128c:	1000061e 	bne	r2,zero,8112a8 <alt_get_errno+0x3c>
  811290:	00802074 	movhi	r2,129
  811294:	109bf104 	addi	r2,r2,28612
  811298:	10800017 	ldw	r2,0(r2)
  81129c:	103ee83a 	callr	r2
  8112a0:	e0bfff15 	stw	r2,-4(fp)
  8112a4:	00000306 	br	8112b4 <alt_get_errno+0x48>
  8112a8:	008020b4 	movhi	r2,130
  8112ac:	10a33b04 	addi	r2,r2,-29460
  8112b0:	e0bfff15 	stw	r2,-4(fp)
  8112b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8112b8:	e037883a 	mov	sp,fp
  8112bc:	dfc00117 	ldw	ra,4(sp)
  8112c0:	df000017 	ldw	fp,0(sp)
  8112c4:	dec00204 	addi	sp,sp,8
  8112c8:	f800283a 	ret

008112cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8112cc:	defffe04 	addi	sp,sp,-8
  8112d0:	df000115 	stw	fp,4(sp)
  8112d4:	df000104 	addi	fp,sp,4
  8112d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8112dc:	e0bfff17 	ldw	r2,-4(fp)
  8112e0:	108000d0 	cmplti	r2,r2,3
  8112e4:	10000d1e 	bne	r2,zero,81131c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8112e8:	e0bfff17 	ldw	r2,-4(fp)
  8112ec:	00c02074 	movhi	r3,129
  8112f0:	18d6f204 	addi	r3,r3,23496
  8112f4:	10800324 	muli	r2,r2,12
  8112f8:	10c5883a 	add	r2,r2,r3
  8112fc:	10800204 	addi	r2,r2,8
  811300:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  811304:	e0bfff17 	ldw	r2,-4(fp)
  811308:	00c02074 	movhi	r3,129
  81130c:	18d6f204 	addi	r3,r3,23496
  811310:	10800324 	muli	r2,r2,12
  811314:	10c5883a 	add	r2,r2,r3
  811318:	10000015 	stw	zero,0(r2)
  }
}
  81131c:	e037883a 	mov	sp,fp
  811320:	df000017 	ldw	fp,0(sp)
  811324:	dec00104 	addi	sp,sp,4
  811328:	f800283a 	ret

0081132c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81132c:	defff804 	addi	sp,sp,-32
  811330:	df000715 	stw	fp,28(sp)
  811334:	df000704 	addi	fp,sp,28
  811338:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81133c:	0005303a 	rdctl	r2,status
  811340:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811344:	e0fffb17 	ldw	r3,-20(fp)
  811348:	00bfff84 	movi	r2,-2
  81134c:	1884703a 	and	r2,r3,r2
  811350:	1001703a 	wrctl	status,r2
  
  return context;
  811354:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811358:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81135c:	d0a01017 	ldw	r2,-32704(gp)
  811360:	10c000c4 	addi	r3,r2,3
  811364:	00bfff04 	movi	r2,-4
  811368:	1884703a 	and	r2,r3,r2
  81136c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811370:	d0e01017 	ldw	r3,-32704(gp)
  811374:	e0bffe17 	ldw	r2,-8(fp)
  811378:	1887883a 	add	r3,r3,r2
  81137c:	00804034 	movhi	r2,256
  811380:	10800004 	addi	r2,r2,0
  811384:	10c0072e 	bgeu	r2,r3,8113a4 <sbrk+0x78>
  811388:	e0bffd17 	ldw	r2,-12(fp)
  81138c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811390:	e0bffa17 	ldw	r2,-24(fp)
  811394:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811398:	00bfffc4 	movi	r2,-1
  81139c:	e0bfff15 	stw	r2,-4(fp)
  8113a0:	00000c06 	br	8113d4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8113a4:	d0a01017 	ldw	r2,-32704(gp)
  8113a8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8113ac:	d0e01017 	ldw	r3,-32704(gp)
  8113b0:	e0bffe17 	ldw	r2,-8(fp)
  8113b4:	1885883a 	add	r2,r3,r2
  8113b8:	d0a01015 	stw	r2,-32704(gp)
  8113bc:	e0bffd17 	ldw	r2,-12(fp)
  8113c0:	e0bff915 	stw	r2,-28(fp)
  8113c4:	e0bff917 	ldw	r2,-28(fp)
  8113c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8113cc:	e0bffc17 	ldw	r2,-16(fp)
  8113d0:	e0bfff15 	stw	r2,-4(fp)
  8113d4:	e0bfff17 	ldw	r2,-4(fp)
} 
  8113d8:	e037883a 	mov	sp,fp
  8113dc:	df000017 	ldw	fp,0(sp)
  8113e0:	dec00104 	addi	sp,sp,4
  8113e4:	f800283a 	ret

008113e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8113e8:	defffa04 	addi	sp,sp,-24
  8113ec:	df000515 	stw	fp,20(sp)
  8113f0:	df000504 	addi	fp,sp,20
  8113f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113f8:	0005303a 	rdctl	r2,status
  8113fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811400:	e0fffd17 	ldw	r3,-12(fp)
  811404:	00bfff84 	movi	r2,-2
  811408:	1884703a 	and	r2,r3,r2
  81140c:	1001703a 	wrctl	status,r2
  
  return context;
  811410:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811414:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  811418:	e0bfff17 	ldw	r2,-4(fp)
  81141c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811420:	e0bffc17 	ldw	r2,-16(fp)
  811424:	10c00017 	ldw	r3,0(r2)
  811428:	e0bffc17 	ldw	r2,-16(fp)
  81142c:	10800117 	ldw	r2,4(r2)
  811430:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  811434:	e0bffc17 	ldw	r2,-16(fp)
  811438:	10c00117 	ldw	r3,4(r2)
  81143c:	e0bffc17 	ldw	r2,-16(fp)
  811440:	10800017 	ldw	r2,0(r2)
  811444:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811448:	e0fffc17 	ldw	r3,-16(fp)
  81144c:	e0bffc17 	ldw	r2,-16(fp)
  811450:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  811454:	e0fffc17 	ldw	r3,-16(fp)
  811458:	e0bffc17 	ldw	r2,-16(fp)
  81145c:	18800015 	stw	r2,0(r3)
  811460:	e0bffe17 	ldw	r2,-8(fp)
  811464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811468:	e0bffb17 	ldw	r2,-20(fp)
  81146c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811470:	e037883a 	mov	sp,fp
  811474:	df000017 	ldw	fp,0(sp)
  811478:	dec00104 	addi	sp,sp,4
  81147c:	f800283a 	ret

00811480 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811480:	defffb04 	addi	sp,sp,-20
  811484:	dfc00415 	stw	ra,16(sp)
  811488:	df000315 	stw	fp,12(sp)
  81148c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811490:	d0a01117 	ldw	r2,-32700(gp)
  811494:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811498:	d0a76417 	ldw	r2,-25200(gp)
  81149c:	10800044 	addi	r2,r2,1
  8114a0:	d0a76415 	stw	r2,-25200(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8114a4:	00003106 	br	81156c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8114a8:	e0bffe17 	ldw	r2,-8(fp)
  8114ac:	10800017 	ldw	r2,0(r2)
  8114b0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8114b4:	e0bffe17 	ldw	r2,-8(fp)
  8114b8:	10800403 	ldbu	r2,16(r2)
  8114bc:	10803fcc 	andi	r2,r2,255
  8114c0:	1005003a 	cmpeq	r2,r2,zero
  8114c4:	1000051e 	bne	r2,zero,8114dc <alt_tick+0x5c>
  8114c8:	d0a76417 	ldw	r2,-25200(gp)
  8114cc:	1004c03a 	cmpne	r2,r2,zero
  8114d0:	1000021e 	bne	r2,zero,8114dc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8114d4:	e0bffe17 	ldw	r2,-8(fp)
  8114d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8114dc:	e0bffe17 	ldw	r2,-8(fp)
  8114e0:	10c00217 	ldw	r3,8(r2)
  8114e4:	d0a76417 	ldw	r2,-25200(gp)
  8114e8:	10c01e36 	bltu	r2,r3,811564 <alt_tick+0xe4>
  8114ec:	e0bffe17 	ldw	r2,-8(fp)
  8114f0:	10800403 	ldbu	r2,16(r2)
  8114f4:	10803fcc 	andi	r2,r2,255
  8114f8:	1004c03a 	cmpne	r2,r2,zero
  8114fc:	1000191e 	bne	r2,zero,811564 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811500:	e0bffe17 	ldw	r2,-8(fp)
  811504:	10c00317 	ldw	r3,12(r2)
  811508:	e0bffe17 	ldw	r2,-8(fp)
  81150c:	11000517 	ldw	r4,20(r2)
  811510:	183ee83a 	callr	r3
  811514:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811518:	e0bffd17 	ldw	r2,-12(fp)
  81151c:	1004c03a 	cmpne	r2,r2,zero
  811520:	1000031e 	bne	r2,zero,811530 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  811524:	e13ffe17 	ldw	r4,-8(fp)
  811528:	08113e80 	call	8113e8 <alt_alarm_stop>
  81152c:	00000d06 	br	811564 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811530:	e0bffe17 	ldw	r2,-8(fp)
  811534:	10c00217 	ldw	r3,8(r2)
  811538:	e0bffd17 	ldw	r2,-12(fp)
  81153c:	1887883a 	add	r3,r3,r2
  811540:	e0bffe17 	ldw	r2,-8(fp)
  811544:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811548:	e0bffe17 	ldw	r2,-8(fp)
  81154c:	10c00217 	ldw	r3,8(r2)
  811550:	d0a76417 	ldw	r2,-25200(gp)
  811554:	1880032e 	bgeu	r3,r2,811564 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811558:	e0fffe17 	ldw	r3,-8(fp)
  81155c:	00800044 	movi	r2,1
  811560:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811564:	e0bfff17 	ldw	r2,-4(fp)
  811568:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81156c:	d0e01104 	addi	r3,gp,-32700
  811570:	e0bffe17 	ldw	r2,-8(fp)
  811574:	10ffcc1e 	bne	r2,r3,8114a8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  811578:	e037883a 	mov	sp,fp
  81157c:	dfc00117 	ldw	ra,4(sp)
  811580:	df000017 	ldw	fp,0(sp)
  811584:	dec00204 	addi	sp,sp,8
  811588:	f800283a 	ret

0081158c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81158c:	defff704 	addi	sp,sp,-36
  811590:	dfc00815 	stw	ra,32(sp)
  811594:	df000715 	stw	fp,28(sp)
  811598:	df000704 	addi	fp,sp,28
  81159c:	e13ffb15 	stw	r4,-20(fp)
  8115a0:	e17ffc15 	stw	r5,-16(fp)
  8115a4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8115a8:	e0bffb17 	ldw	r2,-20(fp)
  8115ac:	1004803a 	cmplt	r2,r2,zero
  8115b0:	1000081e 	bne	r2,zero,8115d4 <write+0x48>
  8115b4:	e0bffb17 	ldw	r2,-20(fp)
  8115b8:	10800324 	muli	r2,r2,12
  8115bc:	1007883a 	mov	r3,r2
  8115c0:	00802074 	movhi	r2,129
  8115c4:	1096f204 	addi	r2,r2,23496
  8115c8:	1887883a 	add	r3,r3,r2
  8115cc:	e0ffff15 	stw	r3,-4(fp)
  8115d0:	00000106 	br	8115d8 <write+0x4c>
  8115d4:	e03fff15 	stw	zero,-4(fp)
  8115d8:	e0bfff17 	ldw	r2,-4(fp)
  8115dc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8115e0:	e0bffa17 	ldw	r2,-24(fp)
  8115e4:	1005003a 	cmpeq	r2,r2,zero
  8115e8:	1000241e 	bne	r2,zero,81167c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8115ec:	e0bffa17 	ldw	r2,-24(fp)
  8115f0:	10800217 	ldw	r2,8(r2)
  8115f4:	108000cc 	andi	r2,r2,3
  8115f8:	1005003a 	cmpeq	r2,r2,zero
  8115fc:	10001a1e 	bne	r2,zero,811668 <write+0xdc>
  811600:	e0bffa17 	ldw	r2,-24(fp)
  811604:	10800017 	ldw	r2,0(r2)
  811608:	10800617 	ldw	r2,24(r2)
  81160c:	1005003a 	cmpeq	r2,r2,zero
  811610:	1000151e 	bne	r2,zero,811668 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811614:	e0bffa17 	ldw	r2,-24(fp)
  811618:	10800017 	ldw	r2,0(r2)
  81161c:	10800617 	ldw	r2,24(r2)
  811620:	e17ffc17 	ldw	r5,-16(fp)
  811624:	e1bffd17 	ldw	r6,-12(fp)
  811628:	e13ffa17 	ldw	r4,-24(fp)
  81162c:	103ee83a 	callr	r2
  811630:	e0bff915 	stw	r2,-28(fp)
  811634:	e0bff917 	ldw	r2,-28(fp)
  811638:	1004403a 	cmpge	r2,r2,zero
  81163c:	1000071e 	bne	r2,zero,81165c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  811640:	08116ac0 	call	8116ac <alt_get_errno>
  811644:	e0fff917 	ldw	r3,-28(fp)
  811648:	00c7c83a 	sub	r3,zero,r3
  81164c:	10c00015 	stw	r3,0(r2)
        return -1;
  811650:	00bfffc4 	movi	r2,-1
  811654:	e0bffe15 	stw	r2,-8(fp)
  811658:	00000e06 	br	811694 <write+0x108>
      }
      return rval;
  81165c:	e0bff917 	ldw	r2,-28(fp)
  811660:	e0bffe15 	stw	r2,-8(fp)
  811664:	00000b06 	br	811694 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811668:	08116ac0 	call	8116ac <alt_get_errno>
  81166c:	1007883a 	mov	r3,r2
  811670:	00800344 	movi	r2,13
  811674:	18800015 	stw	r2,0(r3)
  811678:	00000406 	br	81168c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81167c:	08116ac0 	call	8116ac <alt_get_errno>
  811680:	1007883a 	mov	r3,r2
  811684:	00801444 	movi	r2,81
  811688:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81168c:	00bfffc4 	movi	r2,-1
  811690:	e0bffe15 	stw	r2,-8(fp)
  811694:	e0bffe17 	ldw	r2,-8(fp)
}
  811698:	e037883a 	mov	sp,fp
  81169c:	dfc00117 	ldw	ra,4(sp)
  8116a0:	df000017 	ldw	fp,0(sp)
  8116a4:	dec00204 	addi	sp,sp,8
  8116a8:	f800283a 	ret

008116ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8116ac:	defffd04 	addi	sp,sp,-12
  8116b0:	dfc00215 	stw	ra,8(sp)
  8116b4:	df000115 	stw	fp,4(sp)
  8116b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8116bc:	00802074 	movhi	r2,129
  8116c0:	109bf104 	addi	r2,r2,28612
  8116c4:	10800017 	ldw	r2,0(r2)
  8116c8:	1005003a 	cmpeq	r2,r2,zero
  8116cc:	1000061e 	bne	r2,zero,8116e8 <alt_get_errno+0x3c>
  8116d0:	00802074 	movhi	r2,129
  8116d4:	109bf104 	addi	r2,r2,28612
  8116d8:	10800017 	ldw	r2,0(r2)
  8116dc:	103ee83a 	callr	r2
  8116e0:	e0bfff15 	stw	r2,-4(fp)
  8116e4:	00000306 	br	8116f4 <alt_get_errno+0x48>
  8116e8:	008020b4 	movhi	r2,130
  8116ec:	10a33b04 	addi	r2,r2,-29460
  8116f0:	e0bfff15 	stw	r2,-4(fp)
  8116f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8116f8:	e037883a 	mov	sp,fp
  8116fc:	dfc00117 	ldw	ra,4(sp)
  811700:	df000017 	ldw	fp,0(sp)
  811704:	dec00204 	addi	sp,sp,8
  811708:	f800283a 	ret

0081170c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81170c:	defffd04 	addi	sp,sp,-12
  811710:	dfc00215 	stw	ra,8(sp)
  811714:	df000115 	stw	fp,4(sp)
  811718:	df000104 	addi	fp,sp,4
  81171c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  811720:	081459c0 	call	81459c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  811724:	00800044 	movi	r2,1
  811728:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81172c:	e037883a 	mov	sp,fp
  811730:	dfc00117 	ldw	ra,4(sp)
  811734:	df000017 	ldw	fp,0(sp)
  811738:	dec00204 	addi	sp,sp,8
  81173c:	f800283a 	ret

00811740 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811740:	defffe04 	addi	sp,sp,-8
  811744:	dfc00115 	stw	ra,4(sp)
  811748:	df000015 	stw	fp,0(sp)
  81174c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811750:	01004074 	movhi	r4,257
  811754:	21040804 	addi	r4,r4,4128
  811758:	000b883a 	mov	r5,zero
  81175c:	01800084 	movi	r6,2
  811760:	01c0fa04 	movi	r7,1000
  811764:	08132680 	call	813268 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811768:	01002074 	movhi	r4,129
  81176c:	21175c04 	addi	r4,r4,23920
  811770:	000b883a 	mov	r5,zero
  811774:	01800044 	movi	r6,1
  811778:	08119540 	call	811954 <altera_avalon_jtag_uart_init>
  81177c:	01002074 	movhi	r4,129
  811780:	21175204 	addi	r4,r4,23880
  811784:	08117d40 	call	8117d4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811788:	01002074 	movhi	r4,129
  81178c:	211b7404 	addi	r4,r4,28112
  811790:	08130640 	call	813064 <altera_avalon_lcd_16207_init>
  811794:	01002074 	movhi	r4,129
  811798:	211b6a04 	addi	r4,r4,28072
  81179c:	08117d40 	call	8117d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8117a0:	01002074 	movhi	r4,129
  8117a4:	211bbc04 	addi	r4,r4,28400
  8117a8:	000b883a 	mov	r5,zero
  8117ac:	000d883a 	mov	r6,zero
  8117b0:	08133f00 	call	8133f0 <altera_avalon_uart_init>
  8117b4:	01002074 	movhi	r4,129
  8117b8:	211bb204 	addi	r4,r4,28360
  8117bc:	08117d40 	call	8117d4 <alt_dev_reg>
}
  8117c0:	e037883a 	mov	sp,fp
  8117c4:	dfc00117 	ldw	ra,4(sp)
  8117c8:	df000017 	ldw	fp,0(sp)
  8117cc:	dec00204 	addi	sp,sp,8
  8117d0:	f800283a 	ret

008117d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8117d4:	defffd04 	addi	sp,sp,-12
  8117d8:	dfc00215 	stw	ra,8(sp)
  8117dc:	df000115 	stw	fp,4(sp)
  8117e0:	df000104 	addi	fp,sp,4
  8117e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8117e8:	e13fff17 	ldw	r4,-4(fp)
  8117ec:	01402074 	movhi	r5,129
  8117f0:	295bee04 	addi	r5,r5,28600
  8117f4:	0813cec0 	call	813cec <alt_dev_llist_insert>
}
  8117f8:	e037883a 	mov	sp,fp
  8117fc:	dfc00117 	ldw	ra,4(sp)
  811800:	df000017 	ldw	fp,0(sp)
  811804:	dec00204 	addi	sp,sp,8
  811808:	f800283a 	ret

0081180c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81180c:	defffa04 	addi	sp,sp,-24
  811810:	dfc00515 	stw	ra,20(sp)
  811814:	df000415 	stw	fp,16(sp)
  811818:	df000404 	addi	fp,sp,16
  81181c:	e13ffd15 	stw	r4,-12(fp)
  811820:	e17ffe15 	stw	r5,-8(fp)
  811824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811828:	e0bffd17 	ldw	r2,-12(fp)
  81182c:	10800017 	ldw	r2,0(r2)
  811830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811834:	e0bffc17 	ldw	r2,-16(fp)
  811838:	11000a04 	addi	r4,r2,40
  81183c:	e0bffd17 	ldw	r2,-12(fp)
  811840:	11c00217 	ldw	r7,8(r2)
  811844:	e17ffe17 	ldw	r5,-8(fp)
  811848:	e1bfff17 	ldw	r6,-4(fp)
  81184c:	0811e540 	call	811e54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811850:	e037883a 	mov	sp,fp
  811854:	dfc00117 	ldw	ra,4(sp)
  811858:	df000017 	ldw	fp,0(sp)
  81185c:	dec00204 	addi	sp,sp,8
  811860:	f800283a 	ret

00811864 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811864:	defffa04 	addi	sp,sp,-24
  811868:	dfc00515 	stw	ra,20(sp)
  81186c:	df000415 	stw	fp,16(sp)
  811870:	df000404 	addi	fp,sp,16
  811874:	e13ffd15 	stw	r4,-12(fp)
  811878:	e17ffe15 	stw	r5,-8(fp)
  81187c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811880:	e0bffd17 	ldw	r2,-12(fp)
  811884:	10800017 	ldw	r2,0(r2)
  811888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81188c:	e0bffc17 	ldw	r2,-16(fp)
  811890:	11000a04 	addi	r4,r2,40
  811894:	e0bffd17 	ldw	r2,-12(fp)
  811898:	11c00217 	ldw	r7,8(r2)
  81189c:	e17ffe17 	ldw	r5,-8(fp)
  8118a0:	e1bfff17 	ldw	r6,-4(fp)
  8118a4:	08120780 	call	812078 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8118a8:	e037883a 	mov	sp,fp
  8118ac:	dfc00117 	ldw	ra,4(sp)
  8118b0:	df000017 	ldw	fp,0(sp)
  8118b4:	dec00204 	addi	sp,sp,8
  8118b8:	f800283a 	ret

008118bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8118bc:	defffc04 	addi	sp,sp,-16
  8118c0:	dfc00315 	stw	ra,12(sp)
  8118c4:	df000215 	stw	fp,8(sp)
  8118c8:	df000204 	addi	fp,sp,8
  8118cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8118d0:	e0bfff17 	ldw	r2,-4(fp)
  8118d4:	10800017 	ldw	r2,0(r2)
  8118d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8118dc:	e0bffe17 	ldw	r2,-8(fp)
  8118e0:	11000a04 	addi	r4,r2,40
  8118e4:	e0bfff17 	ldw	r2,-4(fp)
  8118e8:	11400217 	ldw	r5,8(r2)
  8118ec:	0811cec0 	call	811cec <altera_avalon_jtag_uart_close>
}
  8118f0:	e037883a 	mov	sp,fp
  8118f4:	dfc00117 	ldw	ra,4(sp)
  8118f8:	df000017 	ldw	fp,0(sp)
  8118fc:	dec00204 	addi	sp,sp,8
  811900:	f800283a 	ret

00811904 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811904:	defffa04 	addi	sp,sp,-24
  811908:	dfc00515 	stw	ra,20(sp)
  81190c:	df000415 	stw	fp,16(sp)
  811910:	df000404 	addi	fp,sp,16
  811914:	e13ffd15 	stw	r4,-12(fp)
  811918:	e17ffe15 	stw	r5,-8(fp)
  81191c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811920:	e0bffd17 	ldw	r2,-12(fp)
  811924:	10800017 	ldw	r2,0(r2)
  811928:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81192c:	e0bffc17 	ldw	r2,-16(fp)
  811930:	11000a04 	addi	r4,r2,40
  811934:	e17ffe17 	ldw	r5,-8(fp)
  811938:	e1bfff17 	ldw	r6,-4(fp)
  81193c:	0811d600 	call	811d60 <altera_avalon_jtag_uart_ioctl>
}
  811940:	e037883a 	mov	sp,fp
  811944:	dfc00117 	ldw	ra,4(sp)
  811948:	df000017 	ldw	fp,0(sp)
  81194c:	dec00204 	addi	sp,sp,8
  811950:	f800283a 	ret

00811954 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811954:	defffa04 	addi	sp,sp,-24
  811958:	dfc00515 	stw	ra,20(sp)
  81195c:	df000415 	stw	fp,16(sp)
  811960:	df000404 	addi	fp,sp,16
  811964:	e13ffd15 	stw	r4,-12(fp)
  811968:	e17ffe15 	stw	r5,-8(fp)
  81196c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811970:	e0fffd17 	ldw	r3,-12(fp)
  811974:	00800044 	movi	r2,1
  811978:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81197c:	e0bffd17 	ldw	r2,-12(fp)
  811980:	10800017 	ldw	r2,0(r2)
  811984:	11000104 	addi	r4,r2,4
  811988:	e0bffd17 	ldw	r2,-12(fp)
  81198c:	10800817 	ldw	r2,32(r2)
  811990:	1007883a 	mov	r3,r2
  811994:	2005883a 	mov	r2,r4
  811998:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  81199c:	e13ffe17 	ldw	r4,-8(fp)
  8119a0:	e17fff17 	ldw	r5,-4(fp)
  8119a4:	d8000015 	stw	zero,0(sp)
  8119a8:	01802074 	movhi	r6,129
  8119ac:	31868504 	addi	r6,r6,6676
  8119b0:	e1fffd17 	ldw	r7,-12(fp)
  8119b4:	08141640 	call	814164 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8119b8:	e0bffd17 	ldw	r2,-12(fp)
  8119bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8119c0:	e0bffd17 	ldw	r2,-12(fp)
  8119c4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8119c8:	008020b4 	movhi	r2,130
  8119cc:	10a34604 	addi	r2,r2,-29416
  8119d0:	10800017 	ldw	r2,0(r2)
  8119d4:	100b883a 	mov	r5,r2
  8119d8:	01802074 	movhi	r6,129
  8119dc:	31870f04 	addi	r6,r6,7228
  8119e0:	e1fffd17 	ldw	r7,-12(fp)
  8119e4:	08104b00 	call	8104b0 <alt_alarm_start>
  8119e8:	1004403a 	cmpge	r2,r2,zero
  8119ec:	1000041e 	bne	r2,zero,811a00 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8119f0:	e0fffd17 	ldw	r3,-12(fp)
  8119f4:	00a00034 	movhi	r2,32768
  8119f8:	10bfffc4 	addi	r2,r2,-1
  8119fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811a00:	e037883a 	mov	sp,fp
  811a04:	dfc00117 	ldw	ra,4(sp)
  811a08:	df000017 	ldw	fp,0(sp)
  811a0c:	dec00204 	addi	sp,sp,8
  811a10:	f800283a 	ret

00811a14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811a14:	defff804 	addi	sp,sp,-32
  811a18:	df000715 	stw	fp,28(sp)
  811a1c:	df000704 	addi	fp,sp,28
  811a20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811a24:	e0bfff17 	ldw	r2,-4(fp)
  811a28:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811a2c:	e0bffe17 	ldw	r2,-8(fp)
  811a30:	10800017 	ldw	r2,0(r2)
  811a34:	e0bffd15 	stw	r2,-12(fp)
  811a38:	00000006 	br	811a3c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811a3c:	e0bffd17 	ldw	r2,-12(fp)
  811a40:	10800104 	addi	r2,r2,4
  811a44:	10800037 	ldwio	r2,0(r2)
  811a48:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811a4c:	e0bffc17 	ldw	r2,-16(fp)
  811a50:	1080c00c 	andi	r2,r2,768
  811a54:	1005003a 	cmpeq	r2,r2,zero
  811a58:	1000741e 	bne	r2,zero,811c2c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811a5c:	e0bffc17 	ldw	r2,-16(fp)
  811a60:	1080400c 	andi	r2,r2,256
  811a64:	1005003a 	cmpeq	r2,r2,zero
  811a68:	1000351e 	bne	r2,zero,811b40 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811a6c:	00800074 	movhi	r2,1
  811a70:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811a74:	e0bffe17 	ldw	r2,-8(fp)
  811a78:	10800a17 	ldw	r2,40(r2)
  811a7c:	10800044 	addi	r2,r2,1
  811a80:	1081ffcc 	andi	r2,r2,2047
  811a84:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811a88:	e0bffe17 	ldw	r2,-8(fp)
  811a8c:	10c00b17 	ldw	r3,44(r2)
  811a90:	e0bffa17 	ldw	r2,-24(fp)
  811a94:	18801626 	beq	r3,r2,811af0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811a98:	e0bffd17 	ldw	r2,-12(fp)
  811a9c:	10800037 	ldwio	r2,0(r2)
  811aa0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811aa4:	e0bffb17 	ldw	r2,-20(fp)
  811aa8:	10a0000c 	andi	r2,r2,32768
  811aac:	1005003a 	cmpeq	r2,r2,zero
  811ab0:	10000f1e 	bne	r2,zero,811af0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811ab4:	e0bffe17 	ldw	r2,-8(fp)
  811ab8:	10c00a17 	ldw	r3,40(r2)
  811abc:	e0bffb17 	ldw	r2,-20(fp)
  811ac0:	1009883a 	mov	r4,r2
  811ac4:	e0bffe17 	ldw	r2,-8(fp)
  811ac8:	1885883a 	add	r2,r3,r2
  811acc:	10800e04 	addi	r2,r2,56
  811ad0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ad4:	e0bffe17 	ldw	r2,-8(fp)
  811ad8:	10800a17 	ldw	r2,40(r2)
  811adc:	10800044 	addi	r2,r2,1
  811ae0:	10c1ffcc 	andi	r3,r2,2047
  811ae4:	e0bffe17 	ldw	r2,-8(fp)
  811ae8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811aec:	003fe106 	br	811a74 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811af0:	e0bffb17 	ldw	r2,-20(fp)
  811af4:	10bfffec 	andhi	r2,r2,65535
  811af8:	1005003a 	cmpeq	r2,r2,zero
  811afc:	1000101e 	bne	r2,zero,811b40 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811b00:	e0bffe17 	ldw	r2,-8(fp)
  811b04:	10c00817 	ldw	r3,32(r2)
  811b08:	00bfff84 	movi	r2,-2
  811b0c:	1886703a 	and	r3,r3,r2
  811b10:	e0bffe17 	ldw	r2,-8(fp)
  811b14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811b18:	e0bffd17 	ldw	r2,-12(fp)
  811b1c:	11000104 	addi	r4,r2,4
  811b20:	e0bffe17 	ldw	r2,-8(fp)
  811b24:	10800817 	ldw	r2,32(r2)
  811b28:	1007883a 	mov	r3,r2
  811b2c:	2005883a 	mov	r2,r4
  811b30:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811b34:	e0bffd17 	ldw	r2,-12(fp)
  811b38:	10800104 	addi	r2,r2,4
  811b3c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811b40:	e0bffc17 	ldw	r2,-16(fp)
  811b44:	1080800c 	andi	r2,r2,512
  811b48:	1005003a 	cmpeq	r2,r2,zero
  811b4c:	103fbb1e 	bne	r2,zero,811a3c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	10bfffec 	andhi	r2,r2,65535
  811b58:	1004d43a 	srli	r2,r2,16
  811b5c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811b60:	00001506 	br	811bb8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811b64:	e13ffd17 	ldw	r4,-12(fp)
  811b68:	e0bffe17 	ldw	r2,-8(fp)
  811b6c:	10c00d17 	ldw	r3,52(r2)
  811b70:	e0bffe17 	ldw	r2,-8(fp)
  811b74:	1885883a 	add	r2,r3,r2
  811b78:	10820e04 	addi	r2,r2,2104
  811b7c:	10800003 	ldbu	r2,0(r2)
  811b80:	10c03fcc 	andi	r3,r2,255
  811b84:	18c0201c 	xori	r3,r3,128
  811b88:	18ffe004 	addi	r3,r3,-128
  811b8c:	2005883a 	mov	r2,r4
  811b90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b94:	e0bffe17 	ldw	r2,-8(fp)
  811b98:	10800d17 	ldw	r2,52(r2)
  811b9c:	10800044 	addi	r2,r2,1
  811ba0:	10c1ffcc 	andi	r3,r2,2047
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811bac:	e0bff917 	ldw	r2,-28(fp)
  811bb0:	10bfffc4 	addi	r2,r2,-1
  811bb4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811bb8:	e0bff917 	ldw	r2,-28(fp)
  811bbc:	1005003a 	cmpeq	r2,r2,zero
  811bc0:	1000051e 	bne	r2,zero,811bd8 <altera_avalon_jtag_uart_irq+0x1c4>
  811bc4:	e0bffe17 	ldw	r2,-8(fp)
  811bc8:	10c00d17 	ldw	r3,52(r2)
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10800c17 	ldw	r2,48(r2)
  811bd4:	18bfe31e 	bne	r3,r2,811b64 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811bd8:	e0bff917 	ldw	r2,-28(fp)
  811bdc:	1005003a 	cmpeq	r2,r2,zero
  811be0:	103f961e 	bne	r2,zero,811a3c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811be4:	e0bffe17 	ldw	r2,-8(fp)
  811be8:	10c00817 	ldw	r3,32(r2)
  811bec:	00bfff44 	movi	r2,-3
  811bf0:	1886703a 	and	r3,r3,r2
  811bf4:	e0bffe17 	ldw	r2,-8(fp)
  811bf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811bfc:	e0bffe17 	ldw	r2,-8(fp)
  811c00:	10800017 	ldw	r2,0(r2)
  811c04:	11000104 	addi	r4,r2,4
  811c08:	e0bffe17 	ldw	r2,-8(fp)
  811c0c:	10800817 	ldw	r2,32(r2)
  811c10:	1007883a 	mov	r3,r2
  811c14:	2005883a 	mov	r2,r4
  811c18:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811c1c:	e0bffd17 	ldw	r2,-12(fp)
  811c20:	10800104 	addi	r2,r2,4
  811c24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811c28:	003f8406 	br	811a3c <altera_avalon_jtag_uart_irq+0x28>
}
  811c2c:	e037883a 	mov	sp,fp
  811c30:	df000017 	ldw	fp,0(sp)
  811c34:	dec00104 	addi	sp,sp,4
  811c38:	f800283a 	ret

00811c3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811c3c:	defffc04 	addi	sp,sp,-16
  811c40:	df000315 	stw	fp,12(sp)
  811c44:	df000304 	addi	fp,sp,12
  811c48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811c4c:	e0bfff17 	ldw	r2,-4(fp)
  811c50:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811c54:	e0bffe17 	ldw	r2,-8(fp)
  811c58:	10800017 	ldw	r2,0(r2)
  811c5c:	10800104 	addi	r2,r2,4
  811c60:	10800037 	ldwio	r2,0(r2)
  811c64:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811c68:	e0bffd17 	ldw	r2,-12(fp)
  811c6c:	1081000c 	andi	r2,r2,1024
  811c70:	1005003a 	cmpeq	r2,r2,zero
  811c74:	10000c1e 	bne	r2,zero,811ca8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811c78:	e0bffe17 	ldw	r2,-8(fp)
  811c7c:	10800017 	ldw	r2,0(r2)
  811c80:	11000104 	addi	r4,r2,4
  811c84:	e0bffe17 	ldw	r2,-8(fp)
  811c88:	10800817 	ldw	r2,32(r2)
  811c8c:	10810014 	ori	r2,r2,1024
  811c90:	1007883a 	mov	r3,r2
  811c94:	2005883a 	mov	r2,r4
  811c98:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811c9c:	e0bffe17 	ldw	r2,-8(fp)
  811ca0:	10000915 	stw	zero,36(r2)
  811ca4:	00000a06 	br	811cd0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811ca8:	e0bffe17 	ldw	r2,-8(fp)
  811cac:	10c00917 	ldw	r3,36(r2)
  811cb0:	00a00034 	movhi	r2,32768
  811cb4:	10bfff04 	addi	r2,r2,-4
  811cb8:	10c00536 	bltu	r2,r3,811cd0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811cbc:	e0bffe17 	ldw	r2,-8(fp)
  811cc0:	10800917 	ldw	r2,36(r2)
  811cc4:	10c00044 	addi	r3,r2,1
  811cc8:	e0bffe17 	ldw	r2,-8(fp)
  811ccc:	10c00915 	stw	r3,36(r2)
  811cd0:	008020b4 	movhi	r2,130
  811cd4:	10a34604 	addi	r2,r2,-29416
  811cd8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811cdc:	e037883a 	mov	sp,fp
  811ce0:	df000017 	ldw	fp,0(sp)
  811ce4:	dec00104 	addi	sp,sp,4
  811ce8:	f800283a 	ret

00811cec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811cec:	defffc04 	addi	sp,sp,-16
  811cf0:	df000315 	stw	fp,12(sp)
  811cf4:	df000304 	addi	fp,sp,12
  811cf8:	e13ffd15 	stw	r4,-12(fp)
  811cfc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811d00:	00000706 	br	811d20 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811d04:	e0bffe17 	ldw	r2,-8(fp)
  811d08:	1090000c 	andi	r2,r2,16384
  811d0c:	1005003a 	cmpeq	r2,r2,zero
  811d10:	1000031e 	bne	r2,zero,811d20 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811d14:	00bffd44 	movi	r2,-11
  811d18:	e0bfff15 	stw	r2,-4(fp)
  811d1c:	00000b06 	br	811d4c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811d20:	e0bffd17 	ldw	r2,-12(fp)
  811d24:	10c00d17 	ldw	r3,52(r2)
  811d28:	e0bffd17 	ldw	r2,-12(fp)
  811d2c:	10800c17 	ldw	r2,48(r2)
  811d30:	18800526 	beq	r3,r2,811d48 <altera_avalon_jtag_uart_close+0x5c>
  811d34:	e0bffd17 	ldw	r2,-12(fp)
  811d38:	10c00917 	ldw	r3,36(r2)
  811d3c:	e0bffd17 	ldw	r2,-12(fp)
  811d40:	10800117 	ldw	r2,4(r2)
  811d44:	18bfef36 	bltu	r3,r2,811d04 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811d48:	e03fff15 	stw	zero,-4(fp)
  811d4c:	e0bfff17 	ldw	r2,-4(fp)
}
  811d50:	e037883a 	mov	sp,fp
  811d54:	df000017 	ldw	fp,0(sp)
  811d58:	dec00104 	addi	sp,sp,4
  811d5c:	f800283a 	ret

00811d60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811d60:	defff804 	addi	sp,sp,-32
  811d64:	df000715 	stw	fp,28(sp)
  811d68:	df000704 	addi	fp,sp,28
  811d6c:	e13ffb15 	stw	r4,-20(fp)
  811d70:	e17ffc15 	stw	r5,-16(fp)
  811d74:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811d78:	00bff9c4 	movi	r2,-25
  811d7c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	e0bfff15 	stw	r2,-4(fp)
  811d88:	e0ffff17 	ldw	r3,-4(fp)
  811d8c:	189a8060 	cmpeqi	r2,r3,27137
  811d90:	1000041e 	bne	r2,zero,811da4 <altera_avalon_jtag_uart_ioctl+0x44>
  811d94:	e0ffff17 	ldw	r3,-4(fp)
  811d98:	189a80a0 	cmpeqi	r2,r3,27138
  811d9c:	10001b1e 	bne	r2,zero,811e0c <altera_avalon_jtag_uart_ioctl+0xac>
  811da0:	00002706 	br	811e40 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811da4:	e0bffb17 	ldw	r2,-20(fp)
  811da8:	10c00117 	ldw	r3,4(r2)
  811dac:	00a00034 	movhi	r2,32768
  811db0:	10bfffc4 	addi	r2,r2,-1
  811db4:	18802226 	beq	r3,r2,811e40 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811db8:	e0bffd17 	ldw	r2,-12(fp)
  811dbc:	10800017 	ldw	r2,0(r2)
  811dc0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811dc4:	e0bff917 	ldw	r2,-28(fp)
  811dc8:	10800090 	cmplti	r2,r2,2
  811dcc:	1000071e 	bne	r2,zero,811dec <altera_avalon_jtag_uart_ioctl+0x8c>
  811dd0:	e0fff917 	ldw	r3,-28(fp)
  811dd4:	00a00034 	movhi	r2,32768
  811dd8:	10bfffc4 	addi	r2,r2,-1
  811ddc:	18800326 	beq	r3,r2,811dec <altera_avalon_jtag_uart_ioctl+0x8c>
  811de0:	e0bff917 	ldw	r2,-28(fp)
  811de4:	e0bffe15 	stw	r2,-8(fp)
  811de8:	00000306 	br	811df8 <altera_avalon_jtag_uart_ioctl+0x98>
  811dec:	00e00034 	movhi	r3,32768
  811df0:	18ffff84 	addi	r3,r3,-2
  811df4:	e0fffe15 	stw	r3,-8(fp)
  811df8:	e0bffb17 	ldw	r2,-20(fp)
  811dfc:	e0fffe17 	ldw	r3,-8(fp)
  811e00:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811e04:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811e08:	00000d06 	br	811e40 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811e0c:	e0bffb17 	ldw	r2,-20(fp)
  811e10:	10c00117 	ldw	r3,4(r2)
  811e14:	00a00034 	movhi	r2,32768
  811e18:	10bfffc4 	addi	r2,r2,-1
  811e1c:	18800826 	beq	r3,r2,811e40 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811e20:	e13ffd17 	ldw	r4,-12(fp)
  811e24:	e0bffb17 	ldw	r2,-20(fp)
  811e28:	10c00917 	ldw	r3,36(r2)
  811e2c:	e0bffb17 	ldw	r2,-20(fp)
  811e30:	10800117 	ldw	r2,4(r2)
  811e34:	1885803a 	cmpltu	r2,r3,r2
  811e38:	20800015 	stw	r2,0(r4)
      rc = 0;
  811e3c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811e40:	e0bffa17 	ldw	r2,-24(fp)
}
  811e44:	e037883a 	mov	sp,fp
  811e48:	df000017 	ldw	fp,0(sp)
  811e4c:	dec00104 	addi	sp,sp,4
  811e50:	f800283a 	ret

00811e54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811e54:	defff204 	addi	sp,sp,-56
  811e58:	dfc00d15 	stw	ra,52(sp)
  811e5c:	df000c15 	stw	fp,48(sp)
  811e60:	df000c04 	addi	fp,sp,48
  811e64:	e13ffb15 	stw	r4,-20(fp)
  811e68:	e17ffc15 	stw	r5,-16(fp)
  811e6c:	e1bffd15 	stw	r6,-12(fp)
  811e70:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811e74:	e0bffc17 	ldw	r2,-16(fp)
  811e78:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811e7c:	00004806 	br	811fa0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811e80:	e0bffb17 	ldw	r2,-20(fp)
  811e84:	10800a17 	ldw	r2,40(r2)
  811e88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811e8c:	e0bffb17 	ldw	r2,-20(fp)
  811e90:	10800b17 	ldw	r2,44(r2)
  811e94:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  811e98:	e0fff717 	ldw	r3,-36(fp)
  811e9c:	e0bff617 	ldw	r2,-40(fp)
  811ea0:	18800536 	bltu	r3,r2,811eb8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811ea4:	e0bff717 	ldw	r2,-36(fp)
  811ea8:	e0fff617 	ldw	r3,-40(fp)
  811eac:	10c5c83a 	sub	r2,r2,r3
  811eb0:	e0bff815 	stw	r2,-32(fp)
  811eb4:	00000406 	br	811ec8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811eb8:	00820004 	movi	r2,2048
  811ebc:	e0fff617 	ldw	r3,-40(fp)
  811ec0:	10c5c83a 	sub	r2,r2,r3
  811ec4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  811ec8:	e0bff817 	ldw	r2,-32(fp)
  811ecc:	1005003a 	cmpeq	r2,r2,zero
  811ed0:	10001f1e 	bne	r2,zero,811f50 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  811ed4:	e0fffd17 	ldw	r3,-12(fp)
  811ed8:	e0bff817 	ldw	r2,-32(fp)
  811edc:	1880022e 	bgeu	r3,r2,811ee8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  811ee0:	e0bffd17 	ldw	r2,-12(fp)
  811ee4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811ee8:	e0bffb17 	ldw	r2,-20(fp)
  811eec:	10c00e04 	addi	r3,r2,56
  811ef0:	e0bff617 	ldw	r2,-40(fp)
  811ef4:	1887883a 	add	r3,r3,r2
  811ef8:	e0bffa17 	ldw	r2,-24(fp)
  811efc:	1009883a 	mov	r4,r2
  811f00:	180b883a 	mov	r5,r3
  811f04:	e1bff817 	ldw	r6,-32(fp)
  811f08:	08031c80 	call	8031c8 <memcpy>
      ptr   += n;
  811f0c:	e0fff817 	ldw	r3,-32(fp)
  811f10:	e0bffa17 	ldw	r2,-24(fp)
  811f14:	10c5883a 	add	r2,r2,r3
  811f18:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  811f1c:	e0fffd17 	ldw	r3,-12(fp)
  811f20:	e0bff817 	ldw	r2,-32(fp)
  811f24:	1885c83a 	sub	r2,r3,r2
  811f28:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f2c:	e0fff617 	ldw	r3,-40(fp)
  811f30:	e0bff817 	ldw	r2,-32(fp)
  811f34:	1885883a 	add	r2,r3,r2
  811f38:	10c1ffcc 	andi	r3,r2,2047
  811f3c:	e0bffb17 	ldw	r2,-20(fp)
  811f40:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811f44:	e0bffd17 	ldw	r2,-12(fp)
  811f48:	10800048 	cmpgei	r2,r2,1
  811f4c:	103fcc1e 	bne	r2,zero,811e80 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  811f50:	e0fffa17 	ldw	r3,-24(fp)
  811f54:	e0bffc17 	ldw	r2,-16(fp)
  811f58:	1880141e 	bne	r3,r2,811fac <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811f5c:	e0bffe17 	ldw	r2,-8(fp)
  811f60:	1090000c 	andi	r2,r2,16384
  811f64:	1004c03a 	cmpne	r2,r2,zero
  811f68:	1000101e 	bne	r2,zero,811fac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811f6c:	e0bffb17 	ldw	r2,-20(fp)
  811f70:	10c00a17 	ldw	r3,40(r2)
  811f74:	e0bff717 	ldw	r2,-36(fp)
  811f78:	1880051e 	bne	r3,r2,811f90 <altera_avalon_jtag_uart_read+0x13c>
  811f7c:	e0bffb17 	ldw	r2,-20(fp)
  811f80:	10c00917 	ldw	r3,36(r2)
  811f84:	e0bffb17 	ldw	r2,-20(fp)
  811f88:	10800117 	ldw	r2,4(r2)
  811f8c:	18bff736 	bltu	r3,r2,811f6c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811f90:	e0bffb17 	ldw	r2,-20(fp)
  811f94:	10c00a17 	ldw	r3,40(r2)
  811f98:	e0bff717 	ldw	r2,-36(fp)
  811f9c:	18800326 	beq	r3,r2,811fac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811fa0:	e0bffd17 	ldw	r2,-12(fp)
  811fa4:	10800048 	cmpgei	r2,r2,1
  811fa8:	103fb51e 	bne	r2,zero,811e80 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811fac:	e0fffa17 	ldw	r3,-24(fp)
  811fb0:	e0bffc17 	ldw	r2,-16(fp)
  811fb4:	18801926 	beq	r3,r2,81201c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811fb8:	0005303a 	rdctl	r2,status
  811fbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811fc0:	e0fff517 	ldw	r3,-44(fp)
  811fc4:	00bfff84 	movi	r2,-2
  811fc8:	1884703a 	and	r2,r3,r2
  811fcc:	1001703a 	wrctl	status,r2
  
  return context;
  811fd0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811fd4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811fd8:	e0bffb17 	ldw	r2,-20(fp)
  811fdc:	10800817 	ldw	r2,32(r2)
  811fe0:	10c00054 	ori	r3,r2,1
  811fe4:	e0bffb17 	ldw	r2,-20(fp)
  811fe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811fec:	e0bffb17 	ldw	r2,-20(fp)
  811ff0:	10800017 	ldw	r2,0(r2)
  811ff4:	11000104 	addi	r4,r2,4
  811ff8:	e0bffb17 	ldw	r2,-20(fp)
  811ffc:	10800817 	ldw	r2,32(r2)
  812000:	1007883a 	mov	r3,r2
  812004:	2005883a 	mov	r2,r4
  812008:	10c00035 	stwio	r3,0(r2)
  81200c:	e0bff917 	ldw	r2,-28(fp)
  812010:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812014:	e0bff417 	ldw	r2,-48(fp)
  812018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81201c:	e0fffa17 	ldw	r3,-24(fp)
  812020:	e0bffc17 	ldw	r2,-16(fp)
  812024:	18800526 	beq	r3,r2,81203c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812028:	e0fffa17 	ldw	r3,-24(fp)
  81202c:	e0bffc17 	ldw	r2,-16(fp)
  812030:	1887c83a 	sub	r3,r3,r2
  812034:	e0ffff15 	stw	r3,-4(fp)
  812038:	00000906 	br	812060 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  81203c:	e0bffe17 	ldw	r2,-8(fp)
  812040:	1090000c 	andi	r2,r2,16384
  812044:	1005003a 	cmpeq	r2,r2,zero
  812048:	1000031e 	bne	r2,zero,812058 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  81204c:	00bffd44 	movi	r2,-11
  812050:	e0bfff15 	stw	r2,-4(fp)
  812054:	00000206 	br	812060 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812058:	00bffec4 	movi	r2,-5
  81205c:	e0bfff15 	stw	r2,-4(fp)
  812060:	e0bfff17 	ldw	r2,-4(fp)
}
  812064:	e037883a 	mov	sp,fp
  812068:	dfc00117 	ldw	ra,4(sp)
  81206c:	df000017 	ldw	fp,0(sp)
  812070:	dec00204 	addi	sp,sp,8
  812074:	f800283a 	ret

00812078 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812078:	defff204 	addi	sp,sp,-56
  81207c:	dfc00d15 	stw	ra,52(sp)
  812080:	df000c15 	stw	fp,48(sp)
  812084:	df000c04 	addi	fp,sp,48
  812088:	e13ffb15 	stw	r4,-20(fp)
  81208c:	e17ffc15 	stw	r5,-16(fp)
  812090:	e1bffd15 	stw	r6,-12(fp)
  812094:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812098:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81209c:	e0bffc17 	ldw	r2,-16(fp)
  8120a0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8120a4:	00003a06 	br	812190 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8120a8:	e0bffb17 	ldw	r2,-20(fp)
  8120ac:	10800c17 	ldw	r2,48(r2)
  8120b0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8120b4:	e0bffb17 	ldw	r2,-20(fp)
  8120b8:	10800d17 	ldw	r2,52(r2)
  8120bc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8120c0:	e0fffa17 	ldw	r3,-24(fp)
  8120c4:	e0bff917 	ldw	r2,-28(fp)
  8120c8:	1880062e 	bgeu	r3,r2,8120e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8120cc:	e0fff917 	ldw	r3,-28(fp)
  8120d0:	e0bffa17 	ldw	r2,-24(fp)
  8120d4:	1885c83a 	sub	r2,r3,r2
  8120d8:	10bfffc4 	addi	r2,r2,-1
  8120dc:	e0bff815 	stw	r2,-32(fp)
  8120e0:	00000c06 	br	812114 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  8120e4:	e0bff917 	ldw	r2,-28(fp)
  8120e8:	1005003a 	cmpeq	r2,r2,zero
  8120ec:	1000051e 	bne	r2,zero,812104 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8120f0:	00820004 	movi	r2,2048
  8120f4:	e0fffa17 	ldw	r3,-24(fp)
  8120f8:	10c5c83a 	sub	r2,r2,r3
  8120fc:	e0bff815 	stw	r2,-32(fp)
  812100:	00000406 	br	812114 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812104:	0081ffc4 	movi	r2,2047
  812108:	e0fffa17 	ldw	r3,-24(fp)
  81210c:	10c5c83a 	sub	r2,r2,r3
  812110:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812114:	e0bff817 	ldw	r2,-32(fp)
  812118:	1005003a 	cmpeq	r2,r2,zero
  81211c:	10001f1e 	bne	r2,zero,81219c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812120:	e0fffd17 	ldw	r3,-12(fp)
  812124:	e0bff817 	ldw	r2,-32(fp)
  812128:	1880022e 	bgeu	r3,r2,812134 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  81212c:	e0bffd17 	ldw	r2,-12(fp)
  812130:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812134:	e0bffb17 	ldw	r2,-20(fp)
  812138:	10c20e04 	addi	r3,r2,2104
  81213c:	e0bffa17 	ldw	r2,-24(fp)
  812140:	1885883a 	add	r2,r3,r2
  812144:	e0fffc17 	ldw	r3,-16(fp)
  812148:	1009883a 	mov	r4,r2
  81214c:	180b883a 	mov	r5,r3
  812150:	e1bff817 	ldw	r6,-32(fp)
  812154:	08031c80 	call	8031c8 <memcpy>
      ptr   += n;
  812158:	e0fff817 	ldw	r3,-32(fp)
  81215c:	e0bffc17 	ldw	r2,-16(fp)
  812160:	10c5883a 	add	r2,r2,r3
  812164:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812168:	e0fffd17 	ldw	r3,-12(fp)
  81216c:	e0bff817 	ldw	r2,-32(fp)
  812170:	1885c83a 	sub	r2,r3,r2
  812174:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812178:	e0fffa17 	ldw	r3,-24(fp)
  81217c:	e0bff817 	ldw	r2,-32(fp)
  812180:	1885883a 	add	r2,r3,r2
  812184:	10c1ffcc 	andi	r3,r2,2047
  812188:	e0bffb17 	ldw	r2,-20(fp)
  81218c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812190:	e0bffd17 	ldw	r2,-12(fp)
  812194:	10800048 	cmpgei	r2,r2,1
  812198:	103fc31e 	bne	r2,zero,8120a8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81219c:	0005303a 	rdctl	r2,status
  8121a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8121a4:	e0fff517 	ldw	r3,-44(fp)
  8121a8:	00bfff84 	movi	r2,-2
  8121ac:	1884703a 	and	r2,r3,r2
  8121b0:	1001703a 	wrctl	status,r2
  
  return context;
  8121b4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8121b8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8121bc:	e0bffb17 	ldw	r2,-20(fp)
  8121c0:	10800817 	ldw	r2,32(r2)
  8121c4:	10c00094 	ori	r3,r2,2
  8121c8:	e0bffb17 	ldw	r2,-20(fp)
  8121cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8121d0:	e0bffb17 	ldw	r2,-20(fp)
  8121d4:	10800017 	ldw	r2,0(r2)
  8121d8:	11000104 	addi	r4,r2,4
  8121dc:	e0bffb17 	ldw	r2,-20(fp)
  8121e0:	10800817 	ldw	r2,32(r2)
  8121e4:	1007883a 	mov	r3,r2
  8121e8:	2005883a 	mov	r2,r4
  8121ec:	10c00035 	stwio	r3,0(r2)
  8121f0:	e0bff717 	ldw	r2,-36(fp)
  8121f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121f8:	e0bff417 	ldw	r2,-48(fp)
  8121fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812200:	e0bffd17 	ldw	r2,-12(fp)
  812204:	10800050 	cmplti	r2,r2,1
  812208:	1000111e 	bne	r2,zero,812250 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  81220c:	e0bffe17 	ldw	r2,-8(fp)
  812210:	1090000c 	andi	r2,r2,16384
  812214:	1004c03a 	cmpne	r2,r2,zero
  812218:	1000101e 	bne	r2,zero,81225c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81221c:	e0bffb17 	ldw	r2,-20(fp)
  812220:	10c00d17 	ldw	r3,52(r2)
  812224:	e0bff917 	ldw	r2,-28(fp)
  812228:	1880051e 	bne	r3,r2,812240 <altera_avalon_jtag_uart_write+0x1c8>
  81222c:	e0bffb17 	ldw	r2,-20(fp)
  812230:	10c00917 	ldw	r3,36(r2)
  812234:	e0bffb17 	ldw	r2,-20(fp)
  812238:	10800117 	ldw	r2,4(r2)
  81223c:	18bff736 	bltu	r3,r2,81221c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812240:	e0bffb17 	ldw	r2,-20(fp)
  812244:	10c00d17 	ldw	r3,52(r2)
  812248:	e0bff917 	ldw	r2,-28(fp)
  81224c:	18800326 	beq	r3,r2,81225c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  812250:	e0bffd17 	ldw	r2,-12(fp)
  812254:	10800048 	cmpgei	r2,r2,1
  812258:	103fcd1e 	bne	r2,zero,812190 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81225c:	e0fffc17 	ldw	r3,-16(fp)
  812260:	e0bff617 	ldw	r2,-40(fp)
  812264:	18800526 	beq	r3,r2,81227c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812268:	e0fffc17 	ldw	r3,-16(fp)
  81226c:	e0bff617 	ldw	r2,-40(fp)
  812270:	1887c83a 	sub	r3,r3,r2
  812274:	e0ffff15 	stw	r3,-4(fp)
  812278:	00000906 	br	8122a0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  81227c:	e0bffe17 	ldw	r2,-8(fp)
  812280:	1090000c 	andi	r2,r2,16384
  812284:	1005003a 	cmpeq	r2,r2,zero
  812288:	1000031e 	bne	r2,zero,812298 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  81228c:	00bffd44 	movi	r2,-11
  812290:	e0bfff15 	stw	r2,-4(fp)
  812294:	00000206 	br	8122a0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  812298:	00bffec4 	movi	r2,-5
  81229c:	e0bfff15 	stw	r2,-4(fp)
  8122a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8122a4:	e037883a 	mov	sp,fp
  8122a8:	dfc00117 	ldw	ra,4(sp)
  8122ac:	df000017 	ldw	fp,0(sp)
  8122b0:	dec00204 	addi	sp,sp,8
  8122b4:	f800283a 	ret

008122b8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8122b8:	defffa04 	addi	sp,sp,-24
  8122bc:	dfc00515 	stw	ra,20(sp)
  8122c0:	df000415 	stw	fp,16(sp)
  8122c4:	df000404 	addi	fp,sp,16
  8122c8:	e13ffe15 	stw	r4,-8(fp)
  8122cc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8122d0:	e0bffe17 	ldw	r2,-8(fp)
  8122d4:	10800017 	ldw	r2,0(r2)
  8122d8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8122dc:	008003f4 	movhi	r2,15
  8122e0:	10909004 	addi	r2,r2,16960
  8122e4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8122e8:	e0bffe17 	ldw	r2,-8(fp)
  8122ec:	10800803 	ldbu	r2,32(r2)
  8122f0:	10803fcc 	andi	r2,r2,255
  8122f4:	1080201c 	xori	r2,r2,128
  8122f8:	10bfe004 	addi	r2,r2,-128
  8122fc:	1004c03a 	cmpne	r2,r2,zero
  812300:	1000161e 	bne	r2,zero,81235c <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812304:	00000a06 	br	812330 <lcd_write_command+0x78>
    if (--i == 0)
  812308:	e0bffc17 	ldw	r2,-16(fp)
  81230c:	10bfffc4 	addi	r2,r2,-1
  812310:	e0bffc15 	stw	r2,-16(fp)
  812314:	e0bffc17 	ldw	r2,-16(fp)
  812318:	1004c03a 	cmpne	r2,r2,zero
  81231c:	1000041e 	bne	r2,zero,812330 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  812320:	e0fffe17 	ldw	r3,-8(fp)
  812324:	00800044 	movi	r2,1
  812328:	18800805 	stb	r2,32(r3)
      return;
  81232c:	00000b06 	br	81235c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812330:	e0bffd17 	ldw	r2,-12(fp)
  812334:	10800104 	addi	r2,r2,4
  812338:	10800037 	ldwio	r2,0(r2)
  81233c:	1080200c 	andi	r2,r2,128
  812340:	1004c03a 	cmpne	r2,r2,zero
  812344:	103ff01e 	bne	r2,zero,812308 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812348:	01001904 	movi	r4,100
  81234c:	081456c0 	call	81456c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  812350:	e0bffd17 	ldw	r2,-12(fp)
  812354:	e0ffff03 	ldbu	r3,-4(fp)
  812358:	10c00035 	stwio	r3,0(r2)
}
  81235c:	e037883a 	mov	sp,fp
  812360:	dfc00117 	ldw	ra,4(sp)
  812364:	df000017 	ldw	fp,0(sp)
  812368:	dec00204 	addi	sp,sp,8
  81236c:	f800283a 	ret

00812370 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  812370:	defffa04 	addi	sp,sp,-24
  812374:	dfc00515 	stw	ra,20(sp)
  812378:	df000415 	stw	fp,16(sp)
  81237c:	df000404 	addi	fp,sp,16
  812380:	e13ffe15 	stw	r4,-8(fp)
  812384:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812388:	e0bffe17 	ldw	r2,-8(fp)
  81238c:	10800017 	ldw	r2,0(r2)
  812390:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812394:	008003f4 	movhi	r2,15
  812398:	10909004 	addi	r2,r2,16960
  81239c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8123a0:	e0bffe17 	ldw	r2,-8(fp)
  8123a4:	10800803 	ldbu	r2,32(r2)
  8123a8:	10803fcc 	andi	r2,r2,255
  8123ac:	1080201c 	xori	r2,r2,128
  8123b0:	10bfe004 	addi	r2,r2,-128
  8123b4:	1004c03a 	cmpne	r2,r2,zero
  8123b8:	10001d1e 	bne	r2,zero,812430 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8123bc:	00000a06 	br	8123e8 <lcd_write_data+0x78>
    if (--i == 0)
  8123c0:	e0bffc17 	ldw	r2,-16(fp)
  8123c4:	10bfffc4 	addi	r2,r2,-1
  8123c8:	e0bffc15 	stw	r2,-16(fp)
  8123cc:	e0bffc17 	ldw	r2,-16(fp)
  8123d0:	1004c03a 	cmpne	r2,r2,zero
  8123d4:	1000041e 	bne	r2,zero,8123e8 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8123d8:	e0fffe17 	ldw	r3,-8(fp)
  8123dc:	00800044 	movi	r2,1
  8123e0:	18800805 	stb	r2,32(r3)
      return;
  8123e4:	00001206 	br	812430 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8123e8:	e0bffd17 	ldw	r2,-12(fp)
  8123ec:	10800104 	addi	r2,r2,4
  8123f0:	10800037 	ldwio	r2,0(r2)
  8123f4:	1080200c 	andi	r2,r2,128
  8123f8:	1004c03a 	cmpne	r2,r2,zero
  8123fc:	103ff01e 	bne	r2,zero,8123c0 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812400:	01001904 	movi	r4,100
  812404:	081456c0 	call	81456c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812408:	e0bffd17 	ldw	r2,-12(fp)
  81240c:	10800204 	addi	r2,r2,8
  812410:	e0ffff03 	ldbu	r3,-4(fp)
  812414:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  812418:	e0bffe17 	ldw	r2,-8(fp)
  81241c:	108008c3 	ldbu	r2,35(r2)
  812420:	10800044 	addi	r2,r2,1
  812424:	1007883a 	mov	r3,r2
  812428:	e0bffe17 	ldw	r2,-8(fp)
  81242c:	10c008c5 	stb	r3,35(r2)
}
  812430:	e037883a 	mov	sp,fp
  812434:	dfc00117 	ldw	ra,4(sp)
  812438:	df000017 	ldw	fp,0(sp)
  81243c:	dec00204 	addi	sp,sp,8
  812440:	f800283a 	ret

00812444 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  812444:	defffc04 	addi	sp,sp,-16
  812448:	dfc00315 	stw	ra,12(sp)
  81244c:	df000215 	stw	fp,8(sp)
  812450:	df000204 	addi	fp,sp,8
  812454:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812458:	e13fff17 	ldw	r4,-4(fp)
  81245c:	01400044 	movi	r5,1
  812460:	08122b80 	call	8122b8 <lcd_write_command>

  sp->x = 0;
  812464:	e0bfff17 	ldw	r2,-4(fp)
  812468:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81246c:	e0bfff17 	ldw	r2,-4(fp)
  812470:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812474:	e0bfff17 	ldw	r2,-4(fp)
  812478:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81247c:	e03ffe15 	stw	zero,-8(fp)
  812480:	00001906 	br	8124e8 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  812484:	e0bffe17 	ldw	r2,-8(fp)
  812488:	10801924 	muli	r2,r2,100
  81248c:	10c01004 	addi	r3,r2,64
  812490:	e0bfff17 	ldw	r2,-4(fp)
  812494:	1889883a 	add	r4,r3,r2
  812498:	01400804 	movi	r5,32
  81249c:	01801444 	movi	r6,81
  8124a0:	08033480 	call	803348 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8124a4:	e0bffe17 	ldw	r2,-8(fp)
  8124a8:	10801924 	muli	r2,r2,100
  8124ac:	10c00c04 	addi	r3,r2,48
  8124b0:	e0bfff17 	ldw	r2,-4(fp)
  8124b4:	1889883a 	add	r4,r3,r2
  8124b8:	01400804 	movi	r5,32
  8124bc:	01800404 	movi	r6,16
  8124c0:	08033480 	call	803348 <memset>
    sp->line[y].width = 0;
  8124c4:	e0bffe17 	ldw	r2,-8(fp)
  8124c8:	e0ffff17 	ldw	r3,-4(fp)
  8124cc:	10801924 	muli	r2,r2,100
  8124d0:	10c5883a 	add	r2,r2,r3
  8124d4:	10802404 	addi	r2,r2,144
  8124d8:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8124dc:	e0bffe17 	ldw	r2,-8(fp)
  8124e0:	10800044 	addi	r2,r2,1
  8124e4:	e0bffe15 	stw	r2,-8(fp)
  8124e8:	e0bffe17 	ldw	r2,-8(fp)
  8124ec:	10800090 	cmplti	r2,r2,2
  8124f0:	103fe41e 	bne	r2,zero,812484 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8124f4:	e037883a 	mov	sp,fp
  8124f8:	dfc00117 	ldw	ra,4(sp)
  8124fc:	df000017 	ldw	fp,0(sp)
  812500:	dec00204 	addi	sp,sp,8
  812504:	f800283a 	ret

00812508 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812508:	defff604 	addi	sp,sp,-40
  81250c:	dfc00915 	stw	ra,36(sp)
  812510:	df000815 	stw	fp,32(sp)
  812514:	dc000715 	stw	r16,28(sp)
  812518:	df000704 	addi	fp,sp,28
  81251c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812520:	e0bfff17 	ldw	r2,-4(fp)
  812524:	10800943 	ldbu	r2,37(r2)
  812528:	10803fcc 	andi	r2,r2,255
  81252c:	1080201c 	xori	r2,r2,128
  812530:	10bfe004 	addi	r2,r2,-128
  812534:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812538:	e03ffe15 	stw	zero,-8(fp)
  81253c:	00006406 	br	8126d0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  812540:	e0bffe17 	ldw	r2,-8(fp)
  812544:	e0ffff17 	ldw	r3,-4(fp)
  812548:	10801924 	muli	r2,r2,100
  81254c:	10c5883a 	add	r2,r2,r3
  812550:	10802404 	addi	r2,r2,144
  812554:	10800043 	ldbu	r2,1(r2)
  812558:	10803fcc 	andi	r2,r2,255
  81255c:	1080201c 	xori	r2,r2,128
  812560:	10bfe004 	addi	r2,r2,-128
  812564:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812568:	e0bffe17 	ldw	r2,-8(fp)
  81256c:	e0ffff17 	ldw	r3,-4(fp)
  812570:	10801924 	muli	r2,r2,100
  812574:	10c5883a 	add	r2,r2,r3
  812578:	10802404 	addi	r2,r2,144
  81257c:	10800083 	ldbu	r2,2(r2)
  812580:	10c03fcc 	andi	r3,r2,255
  812584:	e0bffc17 	ldw	r2,-16(fp)
  812588:	1885383a 	mul	r2,r3,r2
  81258c:	1005d23a 	srai	r2,r2,8
  812590:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  812594:	e0fffa17 	ldw	r3,-24(fp)
  812598:	e0bffb17 	ldw	r2,-20(fp)
  81259c:	18800116 	blt	r3,r2,8125a4 <lcd_repaint_screen+0x9c>
      offset = 0;
  8125a0:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8125a4:	e03ffd15 	stw	zero,-12(fp)
  8125a8:	00004306 	br	8126b8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8125ac:	e43ffe17 	ldw	r16,-8(fp)
  8125b0:	e0fffd17 	ldw	r3,-12(fp)
  8125b4:	e0bffa17 	ldw	r2,-24(fp)
  8125b8:	1889883a 	add	r4,r3,r2
  8125bc:	e17ffb17 	ldw	r5,-20(fp)
  8125c0:	080fbb00 	call	80fbb0 <__modsi3>
  8125c4:	1009883a 	mov	r4,r2
  8125c8:	e0ffff17 	ldw	r3,-4(fp)
  8125cc:	80801924 	muli	r2,r16,100
  8125d0:	10c5883a 	add	r2,r2,r3
  8125d4:	1105883a 	add	r2,r2,r4
  8125d8:	10801004 	addi	r2,r2,64
  8125dc:	10800003 	ldbu	r2,0(r2)
  8125e0:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8125e4:	e0bffe17 	ldw	r2,-8(fp)
  8125e8:	e13ffd17 	ldw	r4,-12(fp)
  8125ec:	e0ffff17 	ldw	r3,-4(fp)
  8125f0:	10801924 	muli	r2,r2,100
  8125f4:	10c5883a 	add	r2,r2,r3
  8125f8:	1105883a 	add	r2,r2,r4
  8125fc:	10800c04 	addi	r2,r2,48
  812600:	10800003 	ldbu	r2,0(r2)
  812604:	10c03fcc 	andi	r3,r2,255
  812608:	18c0201c 	xori	r3,r3,128
  81260c:	18ffe004 	addi	r3,r3,-128
  812610:	e0bff947 	ldb	r2,-27(fp)
  812614:	18802526 	beq	r3,r2,8126ac <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812618:	e0fffe17 	ldw	r3,-8(fp)
  81261c:	d0a01304 	addi	r2,gp,-32692
  812620:	1885883a 	add	r2,r3,r2
  812624:	10800003 	ldbu	r2,0(r2)
  812628:	1007883a 	mov	r3,r2
  81262c:	e0bffd17 	ldw	r2,-12(fp)
  812630:	1885883a 	add	r2,r3,r2
  812634:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812638:	e0fff903 	ldbu	r3,-28(fp)
  81263c:	e0bfff17 	ldw	r2,-4(fp)
  812640:	108008c3 	ldbu	r2,35(r2)
  812644:	10803fcc 	andi	r2,r2,255
  812648:	1080201c 	xori	r2,r2,128
  81264c:	10bfe004 	addi	r2,r2,-128
  812650:	18800926 	beq	r3,r2,812678 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812654:	e0fff903 	ldbu	r3,-28(fp)
  812658:	00bfe004 	movi	r2,-128
  81265c:	1884b03a 	or	r2,r3,r2
  812660:	11403fcc 	andi	r5,r2,255
  812664:	e13fff17 	ldw	r4,-4(fp)
  812668:	08122b80 	call	8122b8 <lcd_write_command>
          sp->address = address;
  81266c:	e0fff903 	ldbu	r3,-28(fp)
  812670:	e0bfff17 	ldw	r2,-4(fp)
  812674:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812678:	e0bff943 	ldbu	r2,-27(fp)
  81267c:	11403fcc 	andi	r5,r2,255
  812680:	e13fff17 	ldw	r4,-4(fp)
  812684:	08123700 	call	812370 <lcd_write_data>
        sp->line[y].visible[x] = c;
  812688:	e0bffe17 	ldw	r2,-8(fp)
  81268c:	e13ffd17 	ldw	r4,-12(fp)
  812690:	e0ffff17 	ldw	r3,-4(fp)
  812694:	10801924 	muli	r2,r2,100
  812698:	10c5883a 	add	r2,r2,r3
  81269c:	1105883a 	add	r2,r2,r4
  8126a0:	10c00c04 	addi	r3,r2,48
  8126a4:	e0bff943 	ldbu	r2,-27(fp)
  8126a8:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8126ac:	e0bffd17 	ldw	r2,-12(fp)
  8126b0:	10800044 	addi	r2,r2,1
  8126b4:	e0bffd15 	stw	r2,-12(fp)
  8126b8:	e0bffd17 	ldw	r2,-12(fp)
  8126bc:	10800410 	cmplti	r2,r2,16
  8126c0:	103fba1e 	bne	r2,zero,8125ac <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126c4:	e0bffe17 	ldw	r2,-8(fp)
  8126c8:	10800044 	addi	r2,r2,1
  8126cc:	e0bffe15 	stw	r2,-8(fp)
  8126d0:	e0bffe17 	ldw	r2,-8(fp)
  8126d4:	10800090 	cmplti	r2,r2,2
  8126d8:	103f991e 	bne	r2,zero,812540 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8126dc:	e037883a 	mov	sp,fp
  8126e0:	dfc00217 	ldw	ra,8(sp)
  8126e4:	df000117 	ldw	fp,4(sp)
  8126e8:	dc000017 	ldw	r16,0(sp)
  8126ec:	dec00304 	addi	sp,sp,12
  8126f0:	f800283a 	ret

008126f4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8126f4:	defffc04 	addi	sp,sp,-16
  8126f8:	dfc00315 	stw	ra,12(sp)
  8126fc:	df000215 	stw	fp,8(sp)
  812700:	df000204 	addi	fp,sp,8
  812704:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812708:	e03ffe15 	stw	zero,-8(fp)
  81270c:	00001d06 	br	812784 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812710:	e0bffe17 	ldw	r2,-8(fp)
  812714:	10800048 	cmpgei	r2,r2,1
  812718:	10000f1e 	bne	r2,zero,812758 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81271c:	e0bffe17 	ldw	r2,-8(fp)
  812720:	10801924 	muli	r2,r2,100
  812724:	10c01004 	addi	r3,r2,64
  812728:	e0bfff17 	ldw	r2,-4(fp)
  81272c:	1889883a 	add	r4,r3,r2
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	10800044 	addi	r2,r2,1
  812738:	10801924 	muli	r2,r2,100
  81273c:	10c01004 	addi	r3,r2,64
  812740:	e0bfff17 	ldw	r2,-4(fp)
  812744:	1885883a 	add	r2,r3,r2
  812748:	100b883a 	mov	r5,r2
  81274c:	01801404 	movi	r6,80
  812750:	08031c80 	call	8031c8 <memcpy>
  812754:	00000806 	br	812778 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812758:	e0bffe17 	ldw	r2,-8(fp)
  81275c:	10801924 	muli	r2,r2,100
  812760:	10c01004 	addi	r3,r2,64
  812764:	e0bfff17 	ldw	r2,-4(fp)
  812768:	1889883a 	add	r4,r3,r2
  81276c:	01400804 	movi	r5,32
  812770:	01801404 	movi	r6,80
  812774:	08033480 	call	803348 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812778:	e0bffe17 	ldw	r2,-8(fp)
  81277c:	10800044 	addi	r2,r2,1
  812780:	e0bffe15 	stw	r2,-8(fp)
  812784:	e0bffe17 	ldw	r2,-8(fp)
  812788:	10800090 	cmplti	r2,r2,2
  81278c:	103fe01e 	bne	r2,zero,812710 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812790:	e0bfff17 	ldw	r2,-4(fp)
  812794:	10800883 	ldbu	r2,34(r2)
  812798:	10bfffc4 	addi	r2,r2,-1
  81279c:	1007883a 	mov	r3,r2
  8127a0:	e0bfff17 	ldw	r2,-4(fp)
  8127a4:	10c00885 	stb	r3,34(r2)
}
  8127a8:	e037883a 	mov	sp,fp
  8127ac:	dfc00117 	ldw	ra,4(sp)
  8127b0:	df000017 	ldw	fp,0(sp)
  8127b4:	dec00204 	addi	sp,sp,8
  8127b8:	f800283a 	ret

008127bc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8127bc:	defff804 	addi	sp,sp,-32
  8127c0:	dfc00715 	stw	ra,28(sp)
  8127c4:	df000615 	stw	fp,24(sp)
  8127c8:	df000604 	addi	fp,sp,24
  8127cc:	e13ffd15 	stw	r4,-12(fp)
  8127d0:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  8127d4:	e03ffc15 	stw	zero,-16(fp)
  8127d8:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  8127dc:	e0bffd17 	ldw	r2,-12(fp)
  8127e0:	10800a03 	ldbu	r2,40(r2)
  8127e4:	10803fcc 	andi	r2,r2,255
  8127e8:	1080201c 	xori	r2,r2,128
  8127ec:	10bfe004 	addi	r2,r2,-128
  8127f0:	108016d8 	cmpnei	r2,r2,91
  8127f4:	1000491e 	bne	r2,zero,81291c <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  8127f8:	e0bffd17 	ldw	r2,-12(fp)
  8127fc:	10800a04 	addi	r2,r2,40
  812800:	10800044 	addi	r2,r2,1
  812804:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  812808:	00000d06 	br	812840 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81280c:	e0bffc17 	ldw	r2,-16(fp)
  812810:	10c002a4 	muli	r3,r2,10
  812814:	e0bffa17 	ldw	r2,-24(fp)
  812818:	10800003 	ldbu	r2,0(r2)
  81281c:	10803fcc 	andi	r2,r2,255
  812820:	1080201c 	xori	r2,r2,128
  812824:	10bfe004 	addi	r2,r2,-128
  812828:	1885883a 	add	r2,r3,r2
  81282c:	10bff404 	addi	r2,r2,-48
  812830:	e0bffc15 	stw	r2,-16(fp)
  812834:	e0bffa17 	ldw	r2,-24(fp)
  812838:	10800044 	addi	r2,r2,1
  81283c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812840:	e0bffa17 	ldw	r2,-24(fp)
  812844:	10800003 	ldbu	r2,0(r2)
  812848:	10803fcc 	andi	r2,r2,255
  81284c:	1080201c 	xori	r2,r2,128
  812850:	10bfe004 	addi	r2,r2,-128
  812854:	1007883a 	mov	r3,r2
  812858:	00802074 	movhi	r2,129
  81285c:	109be904 	addi	r2,r2,28580
  812860:	10800017 	ldw	r2,0(r2)
  812864:	1885883a 	add	r2,r3,r2
  812868:	10800003 	ldbu	r2,0(r2)
  81286c:	10803fcc 	andi	r2,r2,255
  812870:	1080010c 	andi	r2,r2,4
  812874:	1004c03a 	cmpne	r2,r2,zero
  812878:	103fe41e 	bne	r2,zero,81280c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  81287c:	e0bffa17 	ldw	r2,-24(fp)
  812880:	10800003 	ldbu	r2,0(r2)
  812884:	10803fcc 	andi	r2,r2,255
  812888:	1080201c 	xori	r2,r2,128
  81288c:	10bfe004 	addi	r2,r2,-128
  812890:	10800ed8 	cmpnei	r2,r2,59
  812894:	1000231e 	bne	r2,zero,812924 <lcd_handle_escape+0x168>
    {
      ptr++;
  812898:	e0bffa17 	ldw	r2,-24(fp)
  81289c:	10800044 	addi	r2,r2,1
  8128a0:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  8128a4:	00000d06 	br	8128dc <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8128a8:	e0bffb17 	ldw	r2,-20(fp)
  8128ac:	10c002a4 	muli	r3,r2,10
  8128b0:	e0bffa17 	ldw	r2,-24(fp)
  8128b4:	10800003 	ldbu	r2,0(r2)
  8128b8:	10803fcc 	andi	r2,r2,255
  8128bc:	1080201c 	xori	r2,r2,128
  8128c0:	10bfe004 	addi	r2,r2,-128
  8128c4:	1885883a 	add	r2,r3,r2
  8128c8:	10bff404 	addi	r2,r2,-48
  8128cc:	e0bffb15 	stw	r2,-20(fp)
  8128d0:	e0bffa17 	ldw	r2,-24(fp)
  8128d4:	10800044 	addi	r2,r2,1
  8128d8:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8128dc:	e0bffa17 	ldw	r2,-24(fp)
  8128e0:	10800003 	ldbu	r2,0(r2)
  8128e4:	10803fcc 	andi	r2,r2,255
  8128e8:	1080201c 	xori	r2,r2,128
  8128ec:	10bfe004 	addi	r2,r2,-128
  8128f0:	1007883a 	mov	r3,r2
  8128f4:	00802074 	movhi	r2,129
  8128f8:	109be904 	addi	r2,r2,28580
  8128fc:	10800017 	ldw	r2,0(r2)
  812900:	1885883a 	add	r2,r3,r2
  812904:	10800003 	ldbu	r2,0(r2)
  812908:	10803fcc 	andi	r2,r2,255
  81290c:	1080010c 	andi	r2,r2,4
  812910:	1004c03a 	cmpne	r2,r2,zero
  812914:	103fe41e 	bne	r2,zero,8128a8 <lcd_handle_escape+0xec>
  812918:	00000206 	br	812924 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  81291c:	00bfffc4 	movi	r2,-1
  812920:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812924:	e0bffe07 	ldb	r2,-8(fp)
  812928:	e0bfff15 	stw	r2,-4(fp)
  81292c:	e0ffff17 	ldw	r3,-4(fp)
  812930:	188012a0 	cmpeqi	r2,r3,74
  812934:	10002f1e 	bne	r2,zero,8129f4 <lcd_handle_escape+0x238>
  812938:	e0ffff17 	ldw	r3,-4(fp)
  81293c:	188012c8 	cmpgei	r2,r3,75
  812940:	1000041e 	bne	r2,zero,812954 <lcd_handle_escape+0x198>
  812944:	e0ffff17 	ldw	r3,-4(fp)
  812948:	18801220 	cmpeqi	r2,r3,72
  81294c:	1000081e 	bne	r2,zero,812970 <lcd_handle_escape+0x1b4>
  812950:	00004906 	br	812a78 <lcd_handle_escape+0x2bc>
  812954:	e0ffff17 	ldw	r3,-4(fp)
  812958:	188012e0 	cmpeqi	r2,r3,75
  81295c:	10002b1e 	bne	r2,zero,812a0c <lcd_handle_escape+0x250>
  812960:	e0ffff17 	ldw	r3,-4(fp)
  812964:	188019a0 	cmpeqi	r2,r3,102
  812968:	1000011e 	bne	r2,zero,812970 <lcd_handle_escape+0x1b4>
  81296c:	00004206 	br	812a78 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812970:	e0bffb17 	ldw	r2,-20(fp)
  812974:	10800050 	cmplti	r2,r2,1
  812978:	1000051e 	bne	r2,zero,812990 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  81297c:	e0bffb17 	ldw	r2,-20(fp)
  812980:	10bfffc4 	addi	r2,r2,-1
  812984:	1007883a 	mov	r3,r2
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812990:	e0bffc17 	ldw	r2,-16(fp)
  812994:	10800050 	cmplti	r2,r2,1
  812998:	1000371e 	bne	r2,zero,812a78 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  81299c:	e0bffc17 	ldw	r2,-16(fp)
  8129a0:	10bfffc4 	addi	r2,r2,-1
  8129a4:	1007883a 	mov	r3,r2
  8129a8:	e0bffd17 	ldw	r2,-12(fp)
  8129ac:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8129b0:	e0bffd17 	ldw	r2,-12(fp)
  8129b4:	10800883 	ldbu	r2,34(r2)
  8129b8:	10803fcc 	andi	r2,r2,255
  8129bc:	10800170 	cmpltui	r2,r2,5
  8129c0:	1000061e 	bne	r2,zero,8129dc <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  8129c4:	e0fffd17 	ldw	r3,-12(fp)
  8129c8:	00800104 	movi	r2,4
  8129cc:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  8129d0:	00000206 	br	8129dc <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  8129d4:	e13ffd17 	ldw	r4,-12(fp)
  8129d8:	08126f40 	call	8126f4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8129dc:	e0bffd17 	ldw	r2,-12(fp)
  8129e0:	10800883 	ldbu	r2,34(r2)
  8129e4:	10803fcc 	andi	r2,r2,255
  8129e8:	108000e8 	cmpgeui	r2,r2,3
  8129ec:	103ff91e 	bne	r2,zero,8129d4 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  8129f0:	00002106 	br	812a78 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8129f4:	e0bffc17 	ldw	r2,-16(fp)
  8129f8:	10800098 	cmpnei	r2,r2,2
  8129fc:	10001e1e 	bne	r2,zero,812a78 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  812a00:	e13ffd17 	ldw	r4,-12(fp)
  812a04:	08124440 	call	812444 <lcd_clear_screen>
    break;
  812a08:	00001b06 	br	812a78 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812a0c:	e0bffc17 	ldw	r2,-16(fp)
  812a10:	10800048 	cmpgei	r2,r2,1
  812a14:	1000181e 	bne	r2,zero,812a78 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812a18:	e0bffd17 	ldw	r2,-12(fp)
  812a1c:	10800843 	ldbu	r2,33(r2)
  812a20:	10803fcc 	andi	r2,r2,255
  812a24:	10801428 	cmpgeui	r2,r2,80
  812a28:	1000131e 	bne	r2,zero,812a78 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812a2c:	e0bffd17 	ldw	r2,-12(fp)
  812a30:	10800883 	ldbu	r2,34(r2)
  812a34:	10803fcc 	andi	r2,r2,255
  812a38:	10801924 	muli	r2,r2,100
  812a3c:	10c01004 	addi	r3,r2,64
  812a40:	e0bffd17 	ldw	r2,-12(fp)
  812a44:	1887883a 	add	r3,r3,r2
  812a48:	e0bffd17 	ldw	r2,-12(fp)
  812a4c:	10800843 	ldbu	r2,33(r2)
  812a50:	10803fcc 	andi	r2,r2,255
  812a54:	1889883a 	add	r4,r3,r2
  812a58:	e0bffd17 	ldw	r2,-12(fp)
  812a5c:	10800843 	ldbu	r2,33(r2)
  812a60:	10c03fcc 	andi	r3,r2,255
  812a64:	00801404 	movi	r2,80
  812a68:	10c5c83a 	sub	r2,r2,r3
  812a6c:	100d883a 	mov	r6,r2
  812a70:	01400804 	movi	r5,32
  812a74:	08033480 	call	803348 <memset>
    }
    break;
  }
}
  812a78:	e037883a 	mov	sp,fp
  812a7c:	dfc00117 	ldw	ra,4(sp)
  812a80:	df000017 	ldw	fp,0(sp)
  812a84:	dec00204 	addi	sp,sp,8
  812a88:	f800283a 	ret

00812a8c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812a8c:	defff204 	addi	sp,sp,-56
  812a90:	dfc00d15 	stw	ra,52(sp)
  812a94:	df000c15 	stw	fp,48(sp)
  812a98:	dc000b15 	stw	r16,44(sp)
  812a9c:	df000b04 	addi	fp,sp,44
  812aa0:	e13ffc15 	stw	r4,-16(fp)
  812aa4:	e17ffd15 	stw	r5,-12(fp)
  812aa8:	e1bffe15 	stw	r6,-8(fp)
  812aac:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812ab0:	e0bffe17 	ldw	r2,-8(fp)
  812ab4:	1007883a 	mov	r3,r2
  812ab8:	e0bffd17 	ldw	r2,-12(fp)
  812abc:	10c5883a 	add	r2,r2,r3
  812ac0:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812ac4:	e0fffc17 	ldw	r3,-16(fp)
  812ac8:	00800044 	movi	r2,1
  812acc:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812ad0:	0000a206 	br	812d5c <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812ad4:	e0bffd17 	ldw	r2,-12(fp)
  812ad8:	10800003 	ldbu	r2,0(r2)
  812adc:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812ae0:	e0bffc17 	ldw	r2,-16(fp)
  812ae4:	10800903 	ldbu	r2,36(r2)
  812ae8:	10803fcc 	andi	r2,r2,255
  812aec:	1080201c 	xori	r2,r2,128
  812af0:	10bfe004 	addi	r2,r2,-128
  812af4:	1004803a 	cmplt	r2,r2,zero
  812af8:	10003b1e 	bne	r2,zero,812be8 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812afc:	e0bffc17 	ldw	r2,-16(fp)
  812b00:	10800903 	ldbu	r2,36(r2)
  812b04:	10803fcc 	andi	r2,r2,255
  812b08:	1080201c 	xori	r2,r2,128
  812b0c:	10bfe004 	addi	r2,r2,-128
  812b10:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812b14:	e0bff717 	ldw	r2,-36(fp)
  812b18:	1004c03a 	cmpne	r2,r2,zero
  812b1c:	1000031e 	bne	r2,zero,812b2c <altera_avalon_lcd_16207_write+0xa0>
  812b20:	e0bff807 	ldb	r2,-32(fp)
  812b24:	108016d8 	cmpnei	r2,r2,91
  812b28:	1000111e 	bne	r2,zero,812b70 <altera_avalon_lcd_16207_write+0xe4>
  812b2c:	e0bff717 	ldw	r2,-36(fp)
  812b30:	1005003a 	cmpeq	r2,r2,zero
  812b34:	10001a1e 	bne	r2,zero,812ba0 <altera_avalon_lcd_16207_write+0x114>
  812b38:	e0bff807 	ldb	r2,-32(fp)
  812b3c:	1007883a 	mov	r3,r2
  812b40:	00802074 	movhi	r2,129
  812b44:	109be904 	addi	r2,r2,28580
  812b48:	10800017 	ldw	r2,0(r2)
  812b4c:	1885883a 	add	r2,r3,r2
  812b50:	10800003 	ldbu	r2,0(r2)
  812b54:	10803fcc 	andi	r2,r2,255
  812b58:	1080010c 	andi	r2,r2,4
  812b5c:	1004c03a 	cmpne	r2,r2,zero
  812b60:	10000f1e 	bne	r2,zero,812ba0 <altera_avalon_lcd_16207_write+0x114>
  812b64:	e0bff807 	ldb	r2,-32(fp)
  812b68:	10800ee0 	cmpeqi	r2,r2,59
  812b6c:	10000c1e 	bne	r2,zero,812ba0 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812b70:	e0fff717 	ldw	r3,-36(fp)
  812b74:	e0bffc17 	ldw	r2,-16(fp)
  812b78:	1885883a 	add	r2,r3,r2
  812b7c:	10800a04 	addi	r2,r2,40
  812b80:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812b84:	e17ff807 	ldb	r5,-32(fp)
  812b88:	e13ffc17 	ldw	r4,-16(fp)
  812b8c:	08127bc0 	call	8127bc <lcd_handle_escape>

        sp->esccount = -1;
  812b90:	e0fffc17 	ldw	r3,-16(fp)
  812b94:	00bfffc4 	movi	r2,-1
  812b98:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812b9c:	00006c06 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812ba0:	e0bffc17 	ldw	r2,-16(fp)
  812ba4:	10800903 	ldbu	r2,36(r2)
  812ba8:	10803fcc 	andi	r2,r2,255
  812bac:	108001e8 	cmpgeui	r2,r2,7
  812bb0:	1000671e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812bb4:	e0fff717 	ldw	r3,-36(fp)
  812bb8:	e0bffc17 	ldw	r2,-16(fp)
  812bbc:	1885883a 	add	r2,r3,r2
  812bc0:	10c00a04 	addi	r3,r2,40
  812bc4:	e0bff803 	ldbu	r2,-32(fp)
  812bc8:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812bcc:	e0bffc17 	ldw	r2,-16(fp)
  812bd0:	10800903 	ldbu	r2,36(r2)
  812bd4:	10800044 	addi	r2,r2,1
  812bd8:	1007883a 	mov	r3,r2
  812bdc:	e0bffc17 	ldw	r2,-16(fp)
  812be0:	10c00905 	stb	r3,36(r2)
  812be4:	00005a06 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812be8:	e0bff807 	ldb	r2,-32(fp)
  812bec:	108006d8 	cmpnei	r2,r2,27
  812bf0:	1000031e 	bne	r2,zero,812c00 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812bf4:	e0bffc17 	ldw	r2,-16(fp)
  812bf8:	10000905 	stb	zero,36(r2)
  812bfc:	00005406 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812c00:	e0bff807 	ldb	r2,-32(fp)
  812c04:	10800358 	cmpnei	r2,r2,13
  812c08:	1000031e 	bne	r2,zero,812c18 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	10000845 	stb	zero,33(r2)
  812c14:	00004e06 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812c18:	e0bff807 	ldb	r2,-32(fp)
  812c1c:	10800298 	cmpnei	r2,r2,10
  812c20:	1000101e 	bne	r2,zero,812c64 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812c24:	e0bffc17 	ldw	r2,-16(fp)
  812c28:	10000845 	stb	zero,33(r2)
      sp->y++;
  812c2c:	e0bffc17 	ldw	r2,-16(fp)
  812c30:	10800883 	ldbu	r2,34(r2)
  812c34:	10800044 	addi	r2,r2,1
  812c38:	1007883a 	mov	r3,r2
  812c3c:	e0bffc17 	ldw	r2,-16(fp)
  812c40:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812c44:	e0bffc17 	ldw	r2,-16(fp)
  812c48:	10800883 	ldbu	r2,34(r2)
  812c4c:	10803fcc 	andi	r2,r2,255
  812c50:	108000f0 	cmpltui	r2,r2,3
  812c54:	10003e1e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812c58:	e13ffc17 	ldw	r4,-16(fp)
  812c5c:	08126f40 	call	8126f4 <lcd_scroll_up>
  812c60:	00003b06 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812c64:	e0bff807 	ldb	r2,-32(fp)
  812c68:	10800218 	cmpnei	r2,r2,8
  812c6c:	10000c1e 	bne	r2,zero,812ca0 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812c70:	e0bffc17 	ldw	r2,-16(fp)
  812c74:	10800843 	ldbu	r2,33(r2)
  812c78:	10803fcc 	andi	r2,r2,255
  812c7c:	1005003a 	cmpeq	r2,r2,zero
  812c80:	1000331e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812c84:	e0bffc17 	ldw	r2,-16(fp)
  812c88:	10800843 	ldbu	r2,33(r2)
  812c8c:	10bfffc4 	addi	r2,r2,-1
  812c90:	1007883a 	mov	r3,r2
  812c94:	e0bffc17 	ldw	r2,-16(fp)
  812c98:	10c00845 	stb	r3,33(r2)
  812c9c:	00002c06 	br	812d50 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812ca0:	e0bff807 	ldb	r2,-32(fp)
  812ca4:	1007883a 	mov	r3,r2
  812ca8:	00802074 	movhi	r2,129
  812cac:	109be904 	addi	r2,r2,28580
  812cb0:	10800017 	ldw	r2,0(r2)
  812cb4:	1885883a 	add	r2,r3,r2
  812cb8:	10800003 	ldbu	r2,0(r2)
  812cbc:	10803fcc 	andi	r2,r2,255
  812cc0:	1080201c 	xori	r2,r2,128
  812cc4:	10bfe004 	addi	r2,r2,-128
  812cc8:	108025cc 	andi	r2,r2,151
  812ccc:	1005003a 	cmpeq	r2,r2,zero
  812cd0:	10001f1e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812cd4:	e0bffc17 	ldw	r2,-16(fp)
  812cd8:	10800883 	ldbu	r2,34(r2)
  812cdc:	10803fcc 	andi	r2,r2,255
  812ce0:	108000b0 	cmpltui	r2,r2,2
  812ce4:	1000021e 	bne	r2,zero,812cf0 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812ce8:	e13ffc17 	ldw	r4,-16(fp)
  812cec:	08126f40 	call	8126f4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812cf0:	e0bffc17 	ldw	r2,-16(fp)
  812cf4:	10800843 	ldbu	r2,33(r2)
  812cf8:	10803fcc 	andi	r2,r2,255
  812cfc:	10801428 	cmpgeui	r2,r2,80
  812d00:	10000d1e 	bne	r2,zero,812d38 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812d04:	e0bffc17 	ldw	r2,-16(fp)
  812d08:	10800883 	ldbu	r2,34(r2)
  812d0c:	11003fcc 	andi	r4,r2,255
  812d10:	e0bffc17 	ldw	r2,-16(fp)
  812d14:	10800843 	ldbu	r2,33(r2)
  812d18:	11403fcc 	andi	r5,r2,255
  812d1c:	e0fffc17 	ldw	r3,-16(fp)
  812d20:	20801924 	muli	r2,r4,100
  812d24:	10c5883a 	add	r2,r2,r3
  812d28:	1145883a 	add	r2,r2,r5
  812d2c:	10c01004 	addi	r3,r2,64
  812d30:	e0bff803 	ldbu	r2,-32(fp)
  812d34:	18800005 	stb	r2,0(r3)

      sp->x++;
  812d38:	e0bffc17 	ldw	r2,-16(fp)
  812d3c:	10800843 	ldbu	r2,33(r2)
  812d40:	10800044 	addi	r2,r2,1
  812d44:	1007883a 	mov	r3,r2
  812d48:	e0bffc17 	ldw	r2,-16(fp)
  812d4c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812d50:	e0bffd17 	ldw	r2,-12(fp)
  812d54:	10800044 	addi	r2,r2,1
  812d58:	e0bffd15 	stw	r2,-12(fp)
  812d5c:	e0fffd17 	ldw	r3,-12(fp)
  812d60:	e0bffb17 	ldw	r2,-20(fp)
  812d64:	18bf5b36 	bltu	r3,r2,812ad4 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812d68:	00800404 	movi	r2,16
  812d6c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812d70:	e03ffa15 	stw	zero,-24(fp)
  812d74:	00003606 	br	812e50 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812d78:	00801404 	movi	r2,80
  812d7c:	e0bff615 	stw	r2,-40(fp)
  812d80:	00001106 	br	812dc8 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812d84:	e13ffa17 	ldw	r4,-24(fp)
  812d88:	e0bff617 	ldw	r2,-40(fp)
  812d8c:	117fffc4 	addi	r5,r2,-1
  812d90:	e0fffc17 	ldw	r3,-16(fp)
  812d94:	20801924 	muli	r2,r4,100
  812d98:	10c5883a 	add	r2,r2,r3
  812d9c:	1145883a 	add	r2,r2,r5
  812da0:	10801004 	addi	r2,r2,64
  812da4:	10800003 	ldbu	r2,0(r2)
  812da8:	10803fcc 	andi	r2,r2,255
  812dac:	1080201c 	xori	r2,r2,128
  812db0:	10bfe004 	addi	r2,r2,-128
  812db4:	10800818 	cmpnei	r2,r2,32
  812db8:	1000061e 	bne	r2,zero,812dd4 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812dbc:	e0bff617 	ldw	r2,-40(fp)
  812dc0:	10bfffc4 	addi	r2,r2,-1
  812dc4:	e0bff615 	stw	r2,-40(fp)
  812dc8:	e0bff617 	ldw	r2,-40(fp)
  812dcc:	10800048 	cmpgei	r2,r2,1
  812dd0:	103fec1e 	bne	r2,zero,812d84 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812dd4:	e0bff617 	ldw	r2,-40(fp)
  812dd8:	10800448 	cmpgei	r2,r2,17
  812ddc:	1000031e 	bne	r2,zero,812dec <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812de0:	00800404 	movi	r2,16
  812de4:	e0bff615 	stw	r2,-40(fp)
  812de8:	00000306 	br	812df8 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812dec:	e0bff617 	ldw	r2,-40(fp)
  812df0:	10800044 	addi	r2,r2,1
  812df4:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812df8:	e13ffa17 	ldw	r4,-24(fp)
  812dfc:	e0bff617 	ldw	r2,-40(fp)
  812e00:	100b883a 	mov	r5,r2
  812e04:	e0fffc17 	ldw	r3,-16(fp)
  812e08:	20801924 	muli	r2,r4,100
  812e0c:	10c5883a 	add	r2,r2,r3
  812e10:	10802404 	addi	r2,r2,144
  812e14:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812e18:	e0fff917 	ldw	r3,-28(fp)
  812e1c:	e0bff617 	ldw	r2,-40(fp)
  812e20:	1880020e 	bge	r3,r2,812e2c <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812e24:	e0bff617 	ldw	r2,-40(fp)
  812e28:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812e2c:	e0bffa17 	ldw	r2,-24(fp)
  812e30:	e0fffc17 	ldw	r3,-16(fp)
  812e34:	10801924 	muli	r2,r2,100
  812e38:	10c5883a 	add	r2,r2,r3
  812e3c:	10802404 	addi	r2,r2,144
  812e40:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e44:	e0bffa17 	ldw	r2,-24(fp)
  812e48:	10800044 	addi	r2,r2,1
  812e4c:	e0bffa15 	stw	r2,-24(fp)
  812e50:	e0bffa17 	ldw	r2,-24(fp)
  812e54:	10800090 	cmplti	r2,r2,2
  812e58:	103fc71e 	bne	r2,zero,812d78 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812e5c:	e0bff917 	ldw	r2,-28(fp)
  812e60:	10800448 	cmpgei	r2,r2,17
  812e64:	1000031e 	bne	r2,zero,812e74 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  812e68:	e0bffc17 	ldw	r2,-16(fp)
  812e6c:	10000985 	stb	zero,38(r2)
  812e70:	00002d06 	br	812f28 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  812e74:	e0bff917 	ldw	r2,-28(fp)
  812e78:	1085883a 	add	r2,r2,r2
  812e7c:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  812e80:	e0bff917 	ldw	r2,-28(fp)
  812e84:	1007883a 	mov	r3,r2
  812e88:	e0bffc17 	ldw	r2,-16(fp)
  812e8c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e90:	e03ffa15 	stw	zero,-24(fp)
  812e94:	00002106 	br	812f1c <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812e98:	e0bffa17 	ldw	r2,-24(fp)
  812e9c:	e0fffc17 	ldw	r3,-16(fp)
  812ea0:	10801924 	muli	r2,r2,100
  812ea4:	10c5883a 	add	r2,r2,r3
  812ea8:	10802404 	addi	r2,r2,144
  812eac:	10800043 	ldbu	r2,1(r2)
  812eb0:	10803fcc 	andi	r2,r2,255
  812eb4:	1080201c 	xori	r2,r2,128
  812eb8:	10bfe004 	addi	r2,r2,-128
  812ebc:	10800450 	cmplti	r2,r2,17
  812ec0:	1000131e 	bne	r2,zero,812f10 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812ec4:	e43ffa17 	ldw	r16,-24(fp)
  812ec8:	e0bffa17 	ldw	r2,-24(fp)
  812ecc:	e0fffc17 	ldw	r3,-16(fp)
  812ed0:	10801924 	muli	r2,r2,100
  812ed4:	10c5883a 	add	r2,r2,r3
  812ed8:	10802404 	addi	r2,r2,144
  812edc:	10800043 	ldbu	r2,1(r2)
  812ee0:	10803fcc 	andi	r2,r2,255
  812ee4:	1080201c 	xori	r2,r2,128
  812ee8:	10bfe004 	addi	r2,r2,-128
  812eec:	1008923a 	slli	r4,r2,8
  812ef0:	e17ff917 	ldw	r5,-28(fp)
  812ef4:	080fb500 	call	80fb50 <__divsi3>
  812ef8:	1009883a 	mov	r4,r2
  812efc:	e0fffc17 	ldw	r3,-16(fp)
  812f00:	80801924 	muli	r2,r16,100
  812f04:	10c5883a 	add	r2,r2,r3
  812f08:	10802404 	addi	r2,r2,144
  812f0c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812f10:	e0bffa17 	ldw	r2,-24(fp)
  812f14:	10800044 	addi	r2,r2,1
  812f18:	e0bffa15 	stw	r2,-24(fp)
  812f1c:	e0bffa17 	ldw	r2,-24(fp)
  812f20:	10800090 	cmplti	r2,r2,2
  812f24:	103fdc1e 	bne	r2,zero,812e98 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812f28:	e0bffc17 	ldw	r2,-16(fp)
  812f2c:	10800943 	ldbu	r2,37(r2)
  812f30:	10803fcc 	andi	r2,r2,255
  812f34:	1080201c 	xori	r2,r2,128
  812f38:	10bfe004 	addi	r2,r2,-128
  812f3c:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  812f40:	e13ffc17 	ldw	r4,-16(fp)
  812f44:	08125080 	call	812508 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812f48:	e0bffc17 	ldw	r2,-16(fp)
  812f4c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812f50:	e0bffc17 	ldw	r2,-16(fp)
  812f54:	10800943 	ldbu	r2,37(r2)
  812f58:	10c03fcc 	andi	r3,r2,255
  812f5c:	18c0201c 	xori	r3,r3,128
  812f60:	18ffe004 	addi	r3,r3,-128
  812f64:	e0bff517 	ldw	r2,-44(fp)
  812f68:	18800426 	beq	r3,r2,812f7c <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812f6c:	e0fffc17 	ldw	r3,-16(fp)
  812f70:	00800044 	movi	r2,1
  812f74:	188009c5 	stb	r2,39(r3)
  }
  812f78:	003feb06 	br	812f28 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812f7c:	e0bffe17 	ldw	r2,-8(fp)
}
  812f80:	e037883a 	mov	sp,fp
  812f84:	dfc00217 	ldw	ra,8(sp)
  812f88:	df000117 	ldw	fp,4(sp)
  812f8c:	dc000017 	ldw	r16,0(sp)
  812f90:	dec00304 	addi	sp,sp,12
  812f94:	f800283a 	ret

00812f98 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812f98:	defffc04 	addi	sp,sp,-16
  812f9c:	dfc00315 	stw	ra,12(sp)
  812fa0:	df000215 	stw	fp,8(sp)
  812fa4:	df000204 	addi	fp,sp,8
  812fa8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812fac:	e0bfff17 	ldw	r2,-4(fp)
  812fb0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812fb4:	e0bffe17 	ldw	r2,-8(fp)
  812fb8:	10800943 	ldbu	r2,37(r2)
  812fbc:	10803fcc 	andi	r2,r2,255
  812fc0:	1080201c 	xori	r2,r2,128
  812fc4:	10bfe004 	addi	r2,r2,-128
  812fc8:	10c00044 	addi	r3,r2,1
  812fcc:	e0bffe17 	ldw	r2,-8(fp)
  812fd0:	10800983 	ldbu	r2,38(r2)
  812fd4:	10803fcc 	andi	r2,r2,255
  812fd8:	1080201c 	xori	r2,r2,128
  812fdc:	10bfe004 	addi	r2,r2,-128
  812fe0:	18800316 	blt	r3,r2,812ff0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  812fe4:	e0bffe17 	ldw	r2,-8(fp)
  812fe8:	10000945 	stb	zero,37(r2)
  812fec:	00000606 	br	813008 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812ff0:	e0bffe17 	ldw	r2,-8(fp)
  812ff4:	10800943 	ldbu	r2,37(r2)
  812ff8:	10800044 	addi	r2,r2,1
  812ffc:	1007883a 	mov	r3,r2
  813000:	e0bffe17 	ldw	r2,-8(fp)
  813004:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  813008:	e0bffe17 	ldw	r2,-8(fp)
  81300c:	10800983 	ldbu	r2,38(r2)
  813010:	10803fcc 	andi	r2,r2,255
  813014:	1080201c 	xori	r2,r2,128
  813018:	10bfe004 	addi	r2,r2,-128
  81301c:	10800050 	cmplti	r2,r2,1
  813020:	1000091e 	bne	r2,zero,813048 <alt_lcd_16207_timeout+0xb0>
  813024:	e0bffe17 	ldw	r2,-8(fp)
  813028:	108009c3 	ldbu	r2,39(r2)
  81302c:	10803fcc 	andi	r2,r2,255
  813030:	1080201c 	xori	r2,r2,128
  813034:	10bfe004 	addi	r2,r2,-128
  813038:	1004c03a 	cmpne	r2,r2,zero
  81303c:	1000021e 	bne	r2,zero,813048 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  813040:	e13ffe17 	ldw	r4,-8(fp)
  813044:	08125080 	call	812508 <lcd_repaint_screen>

  return sp->period;
  813048:	e0bffe17 	ldw	r2,-8(fp)
  81304c:	10800717 	ldw	r2,28(r2)
}
  813050:	e037883a 	mov	sp,fp
  813054:	dfc00117 	ldw	ra,4(sp)
  813058:	df000017 	ldw	fp,0(sp)
  81305c:	dec00204 	addi	sp,sp,8
  813060:	f800283a 	ret

00813064 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813064:	defffc04 	addi	sp,sp,-16
  813068:	dfc00315 	stw	ra,12(sp)
  81306c:	df000215 	stw	fp,8(sp)
  813070:	df000204 	addi	fp,sp,8
  813074:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813078:	e0bfff17 	ldw	r2,-4(fp)
  81307c:	10800017 	ldw	r2,0(r2)
  813080:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813084:	e0bfff17 	ldw	r2,-4(fp)
  813088:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81308c:	010ea604 	movi	r4,15000
  813090:	081456c0 	call	81456c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813094:	e0bffe17 	ldw	r2,-8(fp)
  813098:	1007883a 	mov	r3,r2
  81309c:	00800c04 	movi	r2,48
  8130a0:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8130a4:	01040104 	movi	r4,4100
  8130a8:	081456c0 	call	81456c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8130ac:	e0bffe17 	ldw	r2,-8(fp)
  8130b0:	1007883a 	mov	r3,r2
  8130b4:	00800c04 	movi	r2,48
  8130b8:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8130bc:	0100fa04 	movi	r4,1000
  8130c0:	081456c0 	call	81456c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8130c4:	e0bffe17 	ldw	r2,-8(fp)
  8130c8:	1007883a 	mov	r3,r2
  8130cc:	00800c04 	movi	r2,48
  8130d0:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8130d4:	e13fff17 	ldw	r4,-4(fp)
  8130d8:	01400e04 	movi	r5,56
  8130dc:	08122b80 	call	8122b8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8130e0:	e13fff17 	ldw	r4,-4(fp)
  8130e4:	01400204 	movi	r5,8
  8130e8:	08122b80 	call	8122b8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8130ec:	e13fff17 	ldw	r4,-4(fp)
  8130f0:	08124440 	call	812444 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8130f4:	e13fff17 	ldw	r4,-4(fp)
  8130f8:	01400184 	movi	r5,6
  8130fc:	08122b80 	call	8122b8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  813100:	e13fff17 	ldw	r4,-4(fp)
  813104:	01400304 	movi	r5,12
  813108:	08122b80 	call	8122b8 <lcd_write_command>

  sp->esccount = -1;
  81310c:	e0ffff17 	ldw	r3,-4(fp)
  813110:	00bfffc4 	movi	r2,-1
  813114:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  813118:	e0bfff17 	ldw	r2,-4(fp)
  81311c:	11000a04 	addi	r4,r2,40
  813120:	000b883a 	mov	r5,zero
  813124:	01800204 	movi	r6,8
  813128:	08033480 	call	803348 <memset>

  sp->scrollpos = 0;
  81312c:	e0bfff17 	ldw	r2,-4(fp)
  813130:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  813134:	e0bfff17 	ldw	r2,-4(fp)
  813138:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81313c:	e0bfff17 	ldw	r2,-4(fp)
  813140:	100009c5 	stb	zero,39(r2)
  813144:	008020b4 	movhi	r2,130
  813148:	10a34604 	addi	r2,r2,-29416
  81314c:	10800017 	ldw	r2,0(r2)
  813150:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813154:	01400284 	movi	r5,10
  813158:	080fc100 	call	80fc10 <__udivsi3>
  81315c:	1007883a 	mov	r3,r2
  813160:	e0bfff17 	ldw	r2,-4(fp)
  813164:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813168:	e0bfff17 	ldw	r2,-4(fp)
  81316c:	11000104 	addi	r4,r2,4
  813170:	e0bfff17 	ldw	r2,-4(fp)
  813174:	10800717 	ldw	r2,28(r2)
  813178:	100b883a 	mov	r5,r2
  81317c:	01802074 	movhi	r6,129
  813180:	318be604 	addi	r6,r6,12184
  813184:	e1ffff17 	ldw	r7,-4(fp)
  813188:	08104b00 	call	8104b0 <alt_alarm_start>
}
  81318c:	e037883a 	mov	sp,fp
  813190:	dfc00117 	ldw	ra,4(sp)
  813194:	df000017 	ldw	fp,0(sp)
  813198:	dec00204 	addi	sp,sp,8
  81319c:	f800283a 	ret

008131a0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8131a0:	defffa04 	addi	sp,sp,-24
  8131a4:	dfc00515 	stw	ra,20(sp)
  8131a8:	df000415 	stw	fp,16(sp)
  8131ac:	df000404 	addi	fp,sp,16
  8131b0:	e13ffd15 	stw	r4,-12(fp)
  8131b4:	e17ffe15 	stw	r5,-8(fp)
  8131b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8131bc:	e0bffd17 	ldw	r2,-12(fp)
  8131c0:	10800017 	ldw	r2,0(r2)
  8131c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8131c8:	e0bffc17 	ldw	r2,-16(fp)
  8131cc:	11000a04 	addi	r4,r2,40
  8131d0:	e0bffd17 	ldw	r2,-12(fp)
  8131d4:	11c00217 	ldw	r7,8(r2)
  8131d8:	e17ffe17 	ldw	r5,-8(fp)
  8131dc:	e1bfff17 	ldw	r6,-4(fp)
  8131e0:	0812a8c0 	call	812a8c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8131e4:	e037883a 	mov	sp,fp
  8131e8:	dfc00117 	ldw	ra,4(sp)
  8131ec:	df000017 	ldw	fp,0(sp)
  8131f0:	dec00204 	addi	sp,sp,8
  8131f4:	f800283a 	ret

008131f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8131f8:	defffa04 	addi	sp,sp,-24
  8131fc:	dfc00515 	stw	ra,20(sp)
  813200:	df000415 	stw	fp,16(sp)
  813204:	df000404 	addi	fp,sp,16
  813208:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81320c:	e0bfff17 	ldw	r2,-4(fp)
  813210:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813214:	e0bfff17 	ldw	r2,-4(fp)
  813218:	10800104 	addi	r2,r2,4
  81321c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813220:	0005303a 	rdctl	r2,status
  813224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813228:	e0fffd17 	ldw	r3,-12(fp)
  81322c:	00bfff84 	movi	r2,-2
  813230:	1884703a 	and	r2,r3,r2
  813234:	1001703a 	wrctl	status,r2
  
  return context;
  813238:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81323c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  813240:	08114800 	call	811480 <alt_tick>
  813244:	e0bffe17 	ldw	r2,-8(fp)
  813248:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81324c:	e0bffc17 	ldw	r2,-16(fp)
  813250:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813254:	e037883a 	mov	sp,fp
  813258:	dfc00117 	ldw	ra,4(sp)
  81325c:	df000017 	ldw	fp,0(sp)
  813260:	dec00204 	addi	sp,sp,8
  813264:	f800283a 	ret

00813268 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813268:	defff804 	addi	sp,sp,-32
  81326c:	dfc00715 	stw	ra,28(sp)
  813270:	df000615 	stw	fp,24(sp)
  813274:	df000604 	addi	fp,sp,24
  813278:	e13ffc15 	stw	r4,-16(fp)
  81327c:	e17ffd15 	stw	r5,-12(fp)
  813280:	e1bffe15 	stw	r6,-8(fp)
  813284:	e1ffff15 	stw	r7,-4(fp)
  813288:	e0bfff17 	ldw	r2,-4(fp)
  81328c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813290:	008020b4 	movhi	r2,130
  813294:	10a34604 	addi	r2,r2,-29416
  813298:	10800017 	ldw	r2,0(r2)
  81329c:	1004c03a 	cmpne	r2,r2,zero
  8132a0:	1000041e 	bne	r2,zero,8132b4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8132a4:	00c020b4 	movhi	r3,130
  8132a8:	18e34604 	addi	r3,r3,-29416
  8132ac:	e0bffb17 	ldw	r2,-20(fp)
  8132b0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8132b4:	e0bffc17 	ldw	r2,-16(fp)
  8132b8:	10800104 	addi	r2,r2,4
  8132bc:	1007883a 	mov	r3,r2
  8132c0:	008001c4 	movi	r2,7
  8132c4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8132c8:	d8000015 	stw	zero,0(sp)
  8132cc:	e13ffd17 	ldw	r4,-12(fp)
  8132d0:	e17ffe17 	ldw	r5,-8(fp)
  8132d4:	01802074 	movhi	r6,129
  8132d8:	318c7e04 	addi	r6,r6,12792
  8132dc:	e1fffc17 	ldw	r7,-16(fp)
  8132e0:	08141640 	call	814164 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8132e4:	e037883a 	mov	sp,fp
  8132e8:	dfc00117 	ldw	ra,4(sp)
  8132ec:	df000017 	ldw	fp,0(sp)
  8132f0:	dec00204 	addi	sp,sp,8
  8132f4:	f800283a 	ret

008132f8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8132f8:	defffa04 	addi	sp,sp,-24
  8132fc:	dfc00515 	stw	ra,20(sp)
  813300:	df000415 	stw	fp,16(sp)
  813304:	df000404 	addi	fp,sp,16
  813308:	e13ffd15 	stw	r4,-12(fp)
  81330c:	e17ffe15 	stw	r5,-8(fp)
  813310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813314:	e0bffd17 	ldw	r2,-12(fp)
  813318:	10800017 	ldw	r2,0(r2)
  81331c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  813320:	e0bffc17 	ldw	r2,-16(fp)
  813324:	11000a04 	addi	r4,r2,40
  813328:	e0bffd17 	ldw	r2,-12(fp)
  81332c:	11c00217 	ldw	r7,8(r2)
  813330:	e17ffe17 	ldw	r5,-8(fp)
  813334:	e1bfff17 	ldw	r6,-4(fp)
  813338:	08137f00 	call	8137f0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81333c:	e037883a 	mov	sp,fp
  813340:	dfc00117 	ldw	ra,4(sp)
  813344:	df000017 	ldw	fp,0(sp)
  813348:	dec00204 	addi	sp,sp,8
  81334c:	f800283a 	ret

00813350 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813350:	defffa04 	addi	sp,sp,-24
  813354:	dfc00515 	stw	ra,20(sp)
  813358:	df000415 	stw	fp,16(sp)
  81335c:	df000404 	addi	fp,sp,16
  813360:	e13ffd15 	stw	r4,-12(fp)
  813364:	e17ffe15 	stw	r5,-8(fp)
  813368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81336c:	e0bffd17 	ldw	r2,-12(fp)
  813370:	10800017 	ldw	r2,0(r2)
  813374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  813378:	e0bffc17 	ldw	r2,-16(fp)
  81337c:	11000a04 	addi	r4,r2,40
  813380:	e0bffd17 	ldw	r2,-12(fp)
  813384:	11c00217 	ldw	r7,8(r2)
  813388:	e17ffe17 	ldw	r5,-8(fp)
  81338c:	e1bfff17 	ldw	r6,-4(fp)
  813390:	0813a800 	call	813a80 <altera_avalon_uart_write>
      fd->fd_flags);
}
  813394:	e037883a 	mov	sp,fp
  813398:	dfc00117 	ldw	ra,4(sp)
  81339c:	df000017 	ldw	fp,0(sp)
  8133a0:	dec00204 	addi	sp,sp,8
  8133a4:	f800283a 	ret

008133a8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8133a8:	defffc04 	addi	sp,sp,-16
  8133ac:	dfc00315 	stw	ra,12(sp)
  8133b0:	df000215 	stw	fp,8(sp)
  8133b4:	df000204 	addi	fp,sp,8
  8133b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8133bc:	e0bfff17 	ldw	r2,-4(fp)
  8133c0:	10800017 	ldw	r2,0(r2)
  8133c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8133c8:	e0bffe17 	ldw	r2,-8(fp)
  8133cc:	11000a04 	addi	r4,r2,40
  8133d0:	e0bfff17 	ldw	r2,-4(fp)
  8133d4:	11400217 	ldw	r5,8(r2)
  8133d8:	08137900 	call	813790 <altera_avalon_uart_close>
}
  8133dc:	e037883a 	mov	sp,fp
  8133e0:	dfc00117 	ldw	ra,4(sp)
  8133e4:	df000017 	ldw	fp,0(sp)
  8133e8:	dec00204 	addi	sp,sp,8
  8133ec:	f800283a 	ret

008133f0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8133f0:	defff704 	addi	sp,sp,-36
  8133f4:	dfc00815 	stw	ra,32(sp)
  8133f8:	df000715 	stw	fp,28(sp)
  8133fc:	df000704 	addi	fp,sp,28
  813400:	e13ffc15 	stw	r4,-16(fp)
  813404:	e17ffd15 	stw	r5,-12(fp)
  813408:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  81340c:	e0bffc17 	ldw	r2,-16(fp)
  813410:	10800017 	ldw	r2,0(r2)
  813414:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  813418:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81341c:	1004c03a 	cmpne	r2,r2,zero
  813420:	1000061e 	bne	r2,zero,81343c <altera_avalon_uart_init+0x4c>
  813424:	0005883a 	mov	r2,zero
  813428:	1004c03a 	cmpne	r2,r2,zero
  81342c:	1000031e 	bne	r2,zero,81343c <altera_avalon_uart_init+0x4c>
  813430:	0005883a 	mov	r2,zero
  813434:	1005003a 	cmpeq	r2,r2,zero
  813438:	1000031e 	bne	r2,zero,813448 <altera_avalon_uart_init+0x58>
  81343c:	00800044 	movi	r2,1
  813440:	e0bfff15 	stw	r2,-4(fp)
  813444:	00000106 	br	81344c <altera_avalon_uart_init+0x5c>
  813448:	e03fff15 	stw	zero,-4(fp)
  81344c:	e0bfff17 	ldw	r2,-4(fp)
  813450:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  813454:	e0bffa17 	ldw	r2,-24(fp)
  813458:	1004c03a 	cmpne	r2,r2,zero
  81345c:	1000111e 	bne	r2,zero,8134a4 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  813460:	e0fffc17 	ldw	r3,-16(fp)
  813464:	00832004 	movi	r2,3200
  813468:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81346c:	e0bffb17 	ldw	r2,-20(fp)
  813470:	11000304 	addi	r4,r2,12
  813474:	e0bffc17 	ldw	r2,-16(fp)
  813478:	10800117 	ldw	r2,4(r2)
  81347c:	1007883a 	mov	r3,r2
  813480:	2005883a 	mov	r2,r4
  813484:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  813488:	d8000015 	stw	zero,0(sp)
  81348c:	e13ffd17 	ldw	r4,-12(fp)
  813490:	e17ffe17 	ldw	r5,-8(fp)
  813494:	01802074 	movhi	r6,129
  813498:	318d2e04 	addi	r6,r6,13496
  81349c:	e1fffc17 	ldw	r7,-16(fp)
  8134a0:	08141640 	call	814164 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8134a4:	e037883a 	mov	sp,fp
  8134a8:	dfc00117 	ldw	ra,4(sp)
  8134ac:	df000017 	ldw	fp,0(sp)
  8134b0:	dec00204 	addi	sp,sp,8
  8134b4:	f800283a 	ret

008134b8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8134b8:	defffa04 	addi	sp,sp,-24
  8134bc:	dfc00515 	stw	ra,20(sp)
  8134c0:	df000415 	stw	fp,16(sp)
  8134c4:	df000404 	addi	fp,sp,16
  8134c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8134cc:	e0bfff17 	ldw	r2,-4(fp)
  8134d0:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8134d4:	e0bffd17 	ldw	r2,-12(fp)
  8134d8:	10800017 	ldw	r2,0(r2)
  8134dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8134e0:	e0bffc17 	ldw	r2,-16(fp)
  8134e4:	10800204 	addi	r2,r2,8
  8134e8:	10800037 	ldwio	r2,0(r2)
  8134ec:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8134f0:	e0bffc17 	ldw	r2,-16(fp)
  8134f4:	10800204 	addi	r2,r2,8
  8134f8:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8134fc:	e0bffc17 	ldw	r2,-16(fp)
  813500:	10800204 	addi	r2,r2,8
  813504:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  813508:	e0bffe17 	ldw	r2,-8(fp)
  81350c:	1080200c 	andi	r2,r2,128
  813510:	1005003a 	cmpeq	r2,r2,zero
  813514:	1000031e 	bne	r2,zero,813524 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  813518:	e13ffd17 	ldw	r4,-12(fp)
  81351c:	e17ffe17 	ldw	r5,-8(fp)
  813520:	08135540 	call	813554 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  813524:	e0bffe17 	ldw	r2,-8(fp)
  813528:	1081100c 	andi	r2,r2,1088
  81352c:	1005003a 	cmpeq	r2,r2,zero
  813530:	1000031e 	bne	r2,zero,813540 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813534:	e13ffd17 	ldw	r4,-12(fp)
  813538:	e17ffe17 	ldw	r5,-8(fp)
  81353c:	08136340 	call	813634 <altera_avalon_uart_txirq>
  }
  

}
  813540:	e037883a 	mov	sp,fp
  813544:	dfc00117 	ldw	ra,4(sp)
  813548:	df000017 	ldw	fp,0(sp)
  81354c:	dec00204 	addi	sp,sp,8
  813550:	f800283a 	ret

00813554 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813554:	defffc04 	addi	sp,sp,-16
  813558:	df000315 	stw	fp,12(sp)
  81355c:	df000304 	addi	fp,sp,12
  813560:	e13ffe15 	stw	r4,-8(fp)
  813564:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813568:	e0bfff17 	ldw	r2,-4(fp)
  81356c:	108000cc 	andi	r2,r2,3
  813570:	1004c03a 	cmpne	r2,r2,zero
  813574:	10002b1e 	bne	r2,zero,813624 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  813578:	e0bffe17 	ldw	r2,-8(fp)
  81357c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	10800317 	ldw	r2,12(r2)
  813588:	10800044 	addi	r2,r2,1
  81358c:	10800fcc 	andi	r2,r2,63
  813590:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  813594:	e0bffe17 	ldw	r2,-8(fp)
  813598:	11000317 	ldw	r4,12(r2)
  81359c:	e0bffe17 	ldw	r2,-8(fp)
  8135a0:	10800017 	ldw	r2,0(r2)
  8135a4:	10800037 	ldwio	r2,0(r2)
  8135a8:	1007883a 	mov	r3,r2
  8135ac:	e0bffe17 	ldw	r2,-8(fp)
  8135b0:	2085883a 	add	r2,r4,r2
  8135b4:	10800704 	addi	r2,r2,28
  8135b8:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  8135bc:	e0fffe17 	ldw	r3,-8(fp)
  8135c0:	e0bffd17 	ldw	r2,-12(fp)
  8135c4:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8135c8:	e0bffe17 	ldw	r2,-8(fp)
  8135cc:	10800317 	ldw	r2,12(r2)
  8135d0:	10800044 	addi	r2,r2,1
  8135d4:	10800fcc 	andi	r2,r2,63
  8135d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8135dc:	e0bffe17 	ldw	r2,-8(fp)
  8135e0:	10c00217 	ldw	r3,8(r2)
  8135e4:	e0bffd17 	ldw	r2,-12(fp)
  8135e8:	18800e1e 	bne	r3,r2,813624 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8135ec:	e0bffe17 	ldw	r2,-8(fp)
  8135f0:	10c00117 	ldw	r3,4(r2)
  8135f4:	00bfdfc4 	movi	r2,-129
  8135f8:	1886703a 	and	r3,r3,r2
  8135fc:	e0bffe17 	ldw	r2,-8(fp)
  813600:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  813604:	e0bffe17 	ldw	r2,-8(fp)
  813608:	10800017 	ldw	r2,0(r2)
  81360c:	11000304 	addi	r4,r2,12
  813610:	e0bffe17 	ldw	r2,-8(fp)
  813614:	10800117 	ldw	r2,4(r2)
  813618:	1007883a 	mov	r3,r2
  81361c:	2005883a 	mov	r2,r4
  813620:	10c00035 	stwio	r3,0(r2)
  }   
}
  813624:	e037883a 	mov	sp,fp
  813628:	df000017 	ldw	fp,0(sp)
  81362c:	dec00104 	addi	sp,sp,4
  813630:	f800283a 	ret

00813634 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813634:	defffd04 	addi	sp,sp,-12
  813638:	df000215 	stw	fp,8(sp)
  81363c:	df000204 	addi	fp,sp,8
  813640:	e13ffe15 	stw	r4,-8(fp)
  813644:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813648:	e0bffe17 	ldw	r2,-8(fp)
  81364c:	10c00417 	ldw	r3,16(r2)
  813650:	e0bffe17 	ldw	r2,-8(fp)
  813654:	10800517 	ldw	r2,20(r2)
  813658:	18803626 	beq	r3,r2,813734 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81365c:	e0bffe17 	ldw	r2,-8(fp)
  813660:	10800617 	ldw	r2,24(r2)
  813664:	1080008c 	andi	r2,r2,2
  813668:	1005003a 	cmpeq	r2,r2,zero
  81366c:	1000041e 	bne	r2,zero,813680 <altera_avalon_uart_txirq+0x4c>
  813670:	e0bfff17 	ldw	r2,-4(fp)
  813674:	1082000c 	andi	r2,r2,2048
  813678:	1005003a 	cmpeq	r2,r2,zero
  81367c:	10001e1e 	bne	r2,zero,8136f8 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  813680:	e0bffe17 	ldw	r2,-8(fp)
  813684:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813688:	e0bffe17 	ldw	r2,-8(fp)
  81368c:	10800017 	ldw	r2,0(r2)
  813690:	11000104 	addi	r4,r2,4
  813694:	e0bffe17 	ldw	r2,-8(fp)
  813698:	10c00417 	ldw	r3,16(r2)
  81369c:	e0bffe17 	ldw	r2,-8(fp)
  8136a0:	1885883a 	add	r2,r3,r2
  8136a4:	10801704 	addi	r2,r2,92
  8136a8:	10800003 	ldbu	r2,0(r2)
  8136ac:	10c03fcc 	andi	r3,r2,255
  8136b0:	2005883a 	mov	r2,r4
  8136b4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8136b8:	e0bffe17 	ldw	r2,-8(fp)
  8136bc:	10800417 	ldw	r2,16(r2)
  8136c0:	10c00044 	addi	r3,r2,1
  8136c4:	e0bffe17 	ldw	r2,-8(fp)
  8136c8:	10c00415 	stw	r3,16(r2)
  8136cc:	e0bffe17 	ldw	r2,-8(fp)
  8136d0:	10800417 	ldw	r2,16(r2)
  8136d4:	10c00fcc 	andi	r3,r2,63
  8136d8:	e0bffe17 	ldw	r2,-8(fp)
  8136dc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8136e0:	e0bffe17 	ldw	r2,-8(fp)
  8136e4:	10800117 	ldw	r2,4(r2)
  8136e8:	10c01014 	ori	r3,r2,64
  8136ec:	e0bffe17 	ldw	r2,-8(fp)
  8136f0:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8136f4:	00000f06 	br	813734 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8136f8:	e0bffe17 	ldw	r2,-8(fp)
  8136fc:	10800017 	ldw	r2,0(r2)
  813700:	10800204 	addi	r2,r2,8
  813704:	10800037 	ldwio	r2,0(r2)
  813708:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81370c:	e0bfff17 	ldw	r2,-4(fp)
  813710:	1082000c 	andi	r2,r2,2048
  813714:	1004c03a 	cmpne	r2,r2,zero
  813718:	1000061e 	bne	r2,zero,813734 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81371c:	e0bffe17 	ldw	r2,-8(fp)
  813720:	10c00117 	ldw	r3,4(r2)
  813724:	00bfefc4 	movi	r2,-65
  813728:	1886703a 	and	r3,r3,r2
  81372c:	e0bffe17 	ldw	r2,-8(fp)
  813730:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  813734:	e0bffe17 	ldw	r2,-8(fp)
  813738:	10c00417 	ldw	r3,16(r2)
  81373c:	e0bffe17 	ldw	r2,-8(fp)
  813740:	10800517 	ldw	r2,20(r2)
  813744:	1880061e 	bne	r3,r2,813760 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813748:	e0bffe17 	ldw	r2,-8(fp)
  81374c:	10c00117 	ldw	r3,4(r2)
  813750:	00beefc4 	movi	r2,-1089
  813754:	1886703a 	and	r3,r3,r2
  813758:	e0bffe17 	ldw	r2,-8(fp)
  81375c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813760:	e0bffe17 	ldw	r2,-8(fp)
  813764:	10800017 	ldw	r2,0(r2)
  813768:	11000304 	addi	r4,r2,12
  81376c:	e0bffe17 	ldw	r2,-8(fp)
  813770:	10800117 	ldw	r2,4(r2)
  813774:	1007883a 	mov	r3,r2
  813778:	2005883a 	mov	r2,r4
  81377c:	10c00035 	stwio	r3,0(r2)
}
  813780:	e037883a 	mov	sp,fp
  813784:	df000017 	ldw	fp,0(sp)
  813788:	dec00104 	addi	sp,sp,4
  81378c:	f800283a 	ret

00813790 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813790:	defffc04 	addi	sp,sp,-16
  813794:	df000315 	stw	fp,12(sp)
  813798:	df000304 	addi	fp,sp,12
  81379c:	e13ffd15 	stw	r4,-12(fp)
  8137a0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8137a4:	00000706 	br	8137c4 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8137a8:	e0bffe17 	ldw	r2,-8(fp)
  8137ac:	1090000c 	andi	r2,r2,16384
  8137b0:	1005003a 	cmpeq	r2,r2,zero
  8137b4:	1000031e 	bne	r2,zero,8137c4 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  8137b8:	00bffd44 	movi	r2,-11
  8137bc:	e0bfff15 	stw	r2,-4(fp)
  8137c0:	00000606 	br	8137dc <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8137c4:	e0bffd17 	ldw	r2,-12(fp)
  8137c8:	10c00417 	ldw	r3,16(r2)
  8137cc:	e0bffd17 	ldw	r2,-12(fp)
  8137d0:	10800517 	ldw	r2,20(r2)
  8137d4:	18bff41e 	bne	r3,r2,8137a8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8137d8:	e03fff15 	stw	zero,-4(fp)
  8137dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8137e0:	e037883a 	mov	sp,fp
  8137e4:	df000017 	ldw	fp,0(sp)
  8137e8:	dec00104 	addi	sp,sp,4
  8137ec:	f800283a 	ret

008137f0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8137f0:	defff004 	addi	sp,sp,-64
  8137f4:	dfc00f15 	stw	ra,60(sp)
  8137f8:	df000e15 	stw	fp,56(sp)
  8137fc:	df000e04 	addi	fp,sp,56
  813800:	e13ffb15 	stw	r4,-20(fp)
  813804:	e17ffc15 	stw	r5,-16(fp)
  813808:	e1bffd15 	stw	r6,-12(fp)
  81380c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  813810:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  813814:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813818:	e0bffe17 	ldw	r2,-8(fp)
  81381c:	1090000c 	andi	r2,r2,16384
  813820:	1005003a 	cmpeq	r2,r2,zero
  813824:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  813828:	e0bffb17 	ldw	r2,-20(fp)
  81382c:	10800217 	ldw	r2,8(r2)
  813830:	10800044 	addi	r2,r2,1
  813834:	10800fcc 	andi	r2,r2,63
  813838:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81383c:	00001906 	br	8138a4 <altera_avalon_uart_read+0xb4>
    {
      count++;
  813840:	e0bff617 	ldw	r2,-40(fp)
  813844:	10800044 	addi	r2,r2,1
  813848:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  81384c:	e0bffb17 	ldw	r2,-20(fp)
  813850:	10c00217 	ldw	r3,8(r2)
  813854:	e0bffb17 	ldw	r2,-20(fp)
  813858:	1885883a 	add	r2,r3,r2
  81385c:	10800704 	addi	r2,r2,28
  813860:	10800003 	ldbu	r2,0(r2)
  813864:	1007883a 	mov	r3,r2
  813868:	e0bffc17 	ldw	r2,-16(fp)
  81386c:	10c00005 	stb	r3,0(r2)
  813870:	e0bffc17 	ldw	r2,-16(fp)
  813874:	10800044 	addi	r2,r2,1
  813878:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  81387c:	e0bffb17 	ldw	r2,-20(fp)
  813880:	10800217 	ldw	r2,8(r2)
  813884:	10c00044 	addi	r3,r2,1
  813888:	e0bffb17 	ldw	r2,-20(fp)
  81388c:	10c00215 	stw	r3,8(r2)
  813890:	e0bffb17 	ldw	r2,-20(fp)
  813894:	10800217 	ldw	r2,8(r2)
  813898:	10c00fcc 	andi	r3,r2,63
  81389c:	e0bffb17 	ldw	r2,-20(fp)
  8138a0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8138a4:	e0fff617 	ldw	r3,-40(fp)
  8138a8:	e0bffd17 	ldw	r2,-12(fp)
  8138ac:	1880050e 	bge	r3,r2,8138c4 <altera_avalon_uart_read+0xd4>
  8138b0:	e0bffb17 	ldw	r2,-20(fp)
  8138b4:	10c00217 	ldw	r3,8(r2)
  8138b8:	e0bffb17 	ldw	r2,-20(fp)
  8138bc:	10800317 	ldw	r2,12(r2)
  8138c0:	18bfdf1e 	bne	r3,r2,813840 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8138c4:	e0bff617 	ldw	r2,-40(fp)
  8138c8:	1004c03a 	cmpne	r2,r2,zero
  8138cc:	1000271e 	bne	r2,zero,81396c <altera_avalon_uart_read+0x17c>
  8138d0:	e0bffb17 	ldw	r2,-20(fp)
  8138d4:	10c00217 	ldw	r3,8(r2)
  8138d8:	e0bffb17 	ldw	r2,-20(fp)
  8138dc:	10800317 	ldw	r2,12(r2)
  8138e0:	1880221e 	bne	r3,r2,81396c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  8138e4:	e0bff917 	ldw	r2,-28(fp)
  8138e8:	1004c03a 	cmpne	r2,r2,zero
  8138ec:	1000061e 	bne	r2,zero,813908 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8138f0:	0813a200 	call	813a20 <alt_get_errno>
  8138f4:	00c002c4 	movi	r3,11
  8138f8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8138fc:	00800044 	movi	r2,1
  813900:	e0bff705 	stb	r2,-36(fp)
        break;
  813904:	00001f06 	br	813984 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813908:	0005303a 	rdctl	r2,status
  81390c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813910:	e0fff517 	ldw	r3,-44(fp)
  813914:	00bfff84 	movi	r2,-2
  813918:	1884703a 	and	r2,r3,r2
  81391c:	1001703a 	wrctl	status,r2
  
  return context;
  813920:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813924:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813928:	e0bffb17 	ldw	r2,-20(fp)
  81392c:	10800117 	ldw	r2,4(r2)
  813930:	10c02014 	ori	r3,r2,128
  813934:	e0bffb17 	ldw	r2,-20(fp)
  813938:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81393c:	e0bffb17 	ldw	r2,-20(fp)
  813940:	10800017 	ldw	r2,0(r2)
  813944:	11000304 	addi	r4,r2,12
  813948:	e0bffb17 	ldw	r2,-20(fp)
  81394c:	10800117 	ldw	r2,4(r2)
  813950:	1007883a 	mov	r3,r2
  813954:	2005883a 	mov	r2,r4
  813958:	10c00035 	stwio	r3,0(r2)
  81395c:	e0bffa17 	ldw	r2,-24(fp)
  813960:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813964:	e0bff417 	ldw	r2,-48(fp)
  813968:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81396c:	e0bff617 	ldw	r2,-40(fp)
  813970:	1004c03a 	cmpne	r2,r2,zero
  813974:	1000031e 	bne	r2,zero,813984 <altera_avalon_uart_read+0x194>
  813978:	e0bffd17 	ldw	r2,-12(fp)
  81397c:	1004c03a 	cmpne	r2,r2,zero
  813980:	103fc81e 	bne	r2,zero,8138a4 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813984:	0005303a 	rdctl	r2,status
  813988:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81398c:	e0fff317 	ldw	r3,-52(fp)
  813990:	00bfff84 	movi	r2,-2
  813994:	1884703a 	and	r2,r3,r2
  813998:	1001703a 	wrctl	status,r2
  
  return context;
  81399c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8139a0:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8139a4:	e0bffb17 	ldw	r2,-20(fp)
  8139a8:	10800117 	ldw	r2,4(r2)
  8139ac:	10c02014 	ori	r3,r2,128
  8139b0:	e0bffb17 	ldw	r2,-20(fp)
  8139b4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8139b8:	e0bffb17 	ldw	r2,-20(fp)
  8139bc:	10800017 	ldw	r2,0(r2)
  8139c0:	11000304 	addi	r4,r2,12
  8139c4:	e0bffb17 	ldw	r2,-20(fp)
  8139c8:	10800117 	ldw	r2,4(r2)
  8139cc:	1007883a 	mov	r3,r2
  8139d0:	2005883a 	mov	r2,r4
  8139d4:	10c00035 	stwio	r3,0(r2)
  8139d8:	e0bffa17 	ldw	r2,-24(fp)
  8139dc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139e0:	e0bff217 	ldw	r2,-56(fp)
  8139e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8139e8:	e0bff703 	ldbu	r2,-36(fp)
  8139ec:	1005003a 	cmpeq	r2,r2,zero
  8139f0:	1000031e 	bne	r2,zero,813a00 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  8139f4:	00bffd04 	movi	r2,-12
  8139f8:	e0bfff15 	stw	r2,-4(fp)
  8139fc:	00000206 	br	813a08 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  813a00:	e0bff617 	ldw	r2,-40(fp)
  813a04:	e0bfff15 	stw	r2,-4(fp)
  813a08:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813a0c:	e037883a 	mov	sp,fp
  813a10:	dfc00117 	ldw	ra,4(sp)
  813a14:	df000017 	ldw	fp,0(sp)
  813a18:	dec00204 	addi	sp,sp,8
  813a1c:	f800283a 	ret

00813a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813a20:	defffd04 	addi	sp,sp,-12
  813a24:	dfc00215 	stw	ra,8(sp)
  813a28:	df000115 	stw	fp,4(sp)
  813a2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813a30:	00802074 	movhi	r2,129
  813a34:	109bf104 	addi	r2,r2,28612
  813a38:	10800017 	ldw	r2,0(r2)
  813a3c:	1005003a 	cmpeq	r2,r2,zero
  813a40:	1000061e 	bne	r2,zero,813a5c <alt_get_errno+0x3c>
  813a44:	00802074 	movhi	r2,129
  813a48:	109bf104 	addi	r2,r2,28612
  813a4c:	10800017 	ldw	r2,0(r2)
  813a50:	103ee83a 	callr	r2
  813a54:	e0bfff15 	stw	r2,-4(fp)
  813a58:	00000306 	br	813a68 <alt_get_errno+0x48>
  813a5c:	008020b4 	movhi	r2,130
  813a60:	10a33b04 	addi	r2,r2,-29460
  813a64:	e0bfff15 	stw	r2,-4(fp)
  813a68:	e0bfff17 	ldw	r2,-4(fp)
}
  813a6c:	e037883a 	mov	sp,fp
  813a70:	dfc00117 	ldw	ra,4(sp)
  813a74:	df000017 	ldw	fp,0(sp)
  813a78:	dec00204 	addi	sp,sp,8
  813a7c:	f800283a 	ret

00813a80 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813a80:	defff204 	addi	sp,sp,-56
  813a84:	dfc00d15 	stw	ra,52(sp)
  813a88:	df000c15 	stw	fp,48(sp)
  813a8c:	df000c04 	addi	fp,sp,48
  813a90:	e13ffc15 	stw	r4,-16(fp)
  813a94:	e17ffd15 	stw	r5,-12(fp)
  813a98:	e1bffe15 	stw	r6,-8(fp)
  813a9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813aa0:	e0bffe17 	ldw	r2,-8(fp)
  813aa4:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813aa8:	e0bfff17 	ldw	r2,-4(fp)
  813aac:	1090000c 	andi	r2,r2,16384
  813ab0:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813ab4:	00004006 	br	813bb8 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813ab8:	e0bffc17 	ldw	r2,-16(fp)
  813abc:	10800517 	ldw	r2,20(r2)
  813ac0:	10800044 	addi	r2,r2,1
  813ac4:	10800fcc 	andi	r2,r2,63
  813ac8:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813acc:	e0bffc17 	ldw	r2,-16(fp)
  813ad0:	10c00417 	ldw	r3,16(r2)
  813ad4:	e0bff917 	ldw	r2,-28(fp)
  813ad8:	1880251e 	bne	r3,r2,813b70 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813adc:	e0bffa17 	ldw	r2,-24(fp)
  813ae0:	1005003a 	cmpeq	r2,r2,zero
  813ae4:	1000051e 	bne	r2,zero,813afc <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813ae8:	0813c480 	call	813c48 <alt_get_errno>
  813aec:	1007883a 	mov	r3,r2
  813af0:	008002c4 	movi	r2,11
  813af4:	18800015 	stw	r2,0(r3)
        break;
  813af8:	00003206 	br	813bc4 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813afc:	0005303a 	rdctl	r2,status
  813b00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b04:	e0fff717 	ldw	r3,-36(fp)
  813b08:	00bfff84 	movi	r2,-2
  813b0c:	1884703a 	and	r2,r3,r2
  813b10:	1001703a 	wrctl	status,r2
  
  return context;
  813b14:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813b18:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813b1c:	e0bffc17 	ldw	r2,-16(fp)
  813b20:	10800117 	ldw	r2,4(r2)
  813b24:	10c11014 	ori	r3,r2,1088
  813b28:	e0bffc17 	ldw	r2,-16(fp)
  813b2c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b30:	e0bffc17 	ldw	r2,-16(fp)
  813b34:	10800017 	ldw	r2,0(r2)
  813b38:	11000304 	addi	r4,r2,12
  813b3c:	e0bffc17 	ldw	r2,-16(fp)
  813b40:	10800117 	ldw	r2,4(r2)
  813b44:	1007883a 	mov	r3,r2
  813b48:	2005883a 	mov	r2,r4
  813b4c:	10c00035 	stwio	r3,0(r2)
  813b50:	e0bffb17 	ldw	r2,-20(fp)
  813b54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b58:	e0bff617 	ldw	r2,-40(fp)
  813b5c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813b60:	e0bffc17 	ldw	r2,-16(fp)
  813b64:	10c00417 	ldw	r3,16(r2)
  813b68:	e0bff917 	ldw	r2,-28(fp)
  813b6c:	18bffc26 	beq	r3,r2,813b60 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813b70:	e0bff817 	ldw	r2,-32(fp)
  813b74:	10bfffc4 	addi	r2,r2,-1
  813b78:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813b7c:	e0bffc17 	ldw	r2,-16(fp)
  813b80:	10c00517 	ldw	r3,20(r2)
  813b84:	e0bffd17 	ldw	r2,-12(fp)
  813b88:	10800003 	ldbu	r2,0(r2)
  813b8c:	1009883a 	mov	r4,r2
  813b90:	e0bffc17 	ldw	r2,-16(fp)
  813b94:	1885883a 	add	r2,r3,r2
  813b98:	10801704 	addi	r2,r2,92
  813b9c:	11000005 	stb	r4,0(r2)
  813ba0:	e0bffd17 	ldw	r2,-12(fp)
  813ba4:	10800044 	addi	r2,r2,1
  813ba8:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813bac:	e0fffc17 	ldw	r3,-16(fp)
  813bb0:	e0bff917 	ldw	r2,-28(fp)
  813bb4:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813bb8:	e0bff817 	ldw	r2,-32(fp)
  813bbc:	1004c03a 	cmpne	r2,r2,zero
  813bc0:	103fbd1e 	bne	r2,zero,813ab8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813bc4:	0005303a 	rdctl	r2,status
  813bc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bcc:	e0fff517 	ldw	r3,-44(fp)
  813bd0:	00bfff84 	movi	r2,-2
  813bd4:	1884703a 	and	r2,r3,r2
  813bd8:	1001703a 	wrctl	status,r2
  
  return context;
  813bdc:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813be0:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813be4:	e0bffc17 	ldw	r2,-16(fp)
  813be8:	10800117 	ldw	r2,4(r2)
  813bec:	10c11014 	ori	r3,r2,1088
  813bf0:	e0bffc17 	ldw	r2,-16(fp)
  813bf4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813bf8:	e0bffc17 	ldw	r2,-16(fp)
  813bfc:	10800017 	ldw	r2,0(r2)
  813c00:	11000304 	addi	r4,r2,12
  813c04:	e0bffc17 	ldw	r2,-16(fp)
  813c08:	10800117 	ldw	r2,4(r2)
  813c0c:	1007883a 	mov	r3,r2
  813c10:	2005883a 	mov	r2,r4
  813c14:	10c00035 	stwio	r3,0(r2)
  813c18:	e0bffb17 	ldw	r2,-20(fp)
  813c1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c20:	e0bff417 	ldw	r2,-48(fp)
  813c24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813c28:	e0fffe17 	ldw	r3,-8(fp)
  813c2c:	e0bff817 	ldw	r2,-32(fp)
  813c30:	1885c83a 	sub	r2,r3,r2
}
  813c34:	e037883a 	mov	sp,fp
  813c38:	dfc00117 	ldw	ra,4(sp)
  813c3c:	df000017 	ldw	fp,0(sp)
  813c40:	dec00204 	addi	sp,sp,8
  813c44:	f800283a 	ret

00813c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813c48:	defffd04 	addi	sp,sp,-12
  813c4c:	dfc00215 	stw	ra,8(sp)
  813c50:	df000115 	stw	fp,4(sp)
  813c54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813c58:	00802074 	movhi	r2,129
  813c5c:	109bf104 	addi	r2,r2,28612
  813c60:	10800017 	ldw	r2,0(r2)
  813c64:	1005003a 	cmpeq	r2,r2,zero
  813c68:	1000061e 	bne	r2,zero,813c84 <alt_get_errno+0x3c>
  813c6c:	00802074 	movhi	r2,129
  813c70:	109bf104 	addi	r2,r2,28612
  813c74:	10800017 	ldw	r2,0(r2)
  813c78:	103ee83a 	callr	r2
  813c7c:	e0bfff15 	stw	r2,-4(fp)
  813c80:	00000306 	br	813c90 <alt_get_errno+0x48>
  813c84:	008020b4 	movhi	r2,130
  813c88:	10a33b04 	addi	r2,r2,-29460
  813c8c:	e0bfff15 	stw	r2,-4(fp)
  813c90:	e0bfff17 	ldw	r2,-4(fp)
}
  813c94:	e037883a 	mov	sp,fp
  813c98:	dfc00117 	ldw	ra,4(sp)
  813c9c:	df000017 	ldw	fp,0(sp)
  813ca0:	dec00204 	addi	sp,sp,8
  813ca4:	f800283a 	ret

00813ca8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813ca8:	defffe04 	addi	sp,sp,-8
  813cac:	df000115 	stw	fp,4(sp)
  813cb0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813cb4:	e03fff15 	stw	zero,-4(fp)
  813cb8:	00000506 	br	813cd0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813cbc:	e0bfff17 	ldw	r2,-4(fp)
  813cc0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813cc4:	e0bfff17 	ldw	r2,-4(fp)
  813cc8:	10800804 	addi	r2,r2,32
  813ccc:	e0bfff15 	stw	r2,-4(fp)
  813cd0:	e0bfff17 	ldw	r2,-4(fp)
  813cd4:	10820030 	cmpltui	r2,r2,2048
  813cd8:	103ff81e 	bne	r2,zero,813cbc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813cdc:	e037883a 	mov	sp,fp
  813ce0:	df000017 	ldw	fp,0(sp)
  813ce4:	dec00104 	addi	sp,sp,4
  813ce8:	f800283a 	ret

00813cec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813cec:	defff904 	addi	sp,sp,-28
  813cf0:	dfc00615 	stw	ra,24(sp)
  813cf4:	df000515 	stw	fp,20(sp)
  813cf8:	df000504 	addi	fp,sp,20
  813cfc:	e13ffd15 	stw	r4,-12(fp)
  813d00:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813d04:	e0bffd17 	ldw	r2,-12(fp)
  813d08:	1005003a 	cmpeq	r2,r2,zero
  813d0c:	1000041e 	bne	r2,zero,813d20 <alt_dev_llist_insert+0x34>
  813d10:	e0bffd17 	ldw	r2,-12(fp)
  813d14:	10800217 	ldw	r2,8(r2)
  813d18:	1004c03a 	cmpne	r2,r2,zero
  813d1c:	1000071e 	bne	r2,zero,813d3c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813d20:	0813da00 	call	813da0 <alt_get_errno>
  813d24:	1007883a 	mov	r3,r2
  813d28:	00800584 	movi	r2,22
  813d2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813d30:	00bffa84 	movi	r2,-22
  813d34:	e0bfff15 	stw	r2,-4(fp)
  813d38:	00001306 	br	813d88 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813d3c:	e0fffd17 	ldw	r3,-12(fp)
  813d40:	e0bffe17 	ldw	r2,-8(fp)
  813d44:	e0bffb15 	stw	r2,-20(fp)
  813d48:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813d4c:	e0fffc17 	ldw	r3,-16(fp)
  813d50:	e0bffb17 	ldw	r2,-20(fp)
  813d54:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813d58:	e0bffb17 	ldw	r2,-20(fp)
  813d5c:	10c00017 	ldw	r3,0(r2)
  813d60:	e0bffc17 	ldw	r2,-16(fp)
  813d64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813d68:	e0bffb17 	ldw	r2,-20(fp)
  813d6c:	10c00017 	ldw	r3,0(r2)
  813d70:	e0bffc17 	ldw	r2,-16(fp)
  813d74:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813d78:	e0fffb17 	ldw	r3,-20(fp)
  813d7c:	e0bffc17 	ldw	r2,-16(fp)
  813d80:	18800015 	stw	r2,0(r3)

  return 0;  
  813d84:	e03fff15 	stw	zero,-4(fp)
  813d88:	e0bfff17 	ldw	r2,-4(fp)
}
  813d8c:	e037883a 	mov	sp,fp
  813d90:	dfc00117 	ldw	ra,4(sp)
  813d94:	df000017 	ldw	fp,0(sp)
  813d98:	dec00204 	addi	sp,sp,8
  813d9c:	f800283a 	ret

00813da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813da0:	defffd04 	addi	sp,sp,-12
  813da4:	dfc00215 	stw	ra,8(sp)
  813da8:	df000115 	stw	fp,4(sp)
  813dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813db0:	00802074 	movhi	r2,129
  813db4:	109bf104 	addi	r2,r2,28612
  813db8:	10800017 	ldw	r2,0(r2)
  813dbc:	1005003a 	cmpeq	r2,r2,zero
  813dc0:	1000061e 	bne	r2,zero,813ddc <alt_get_errno+0x3c>
  813dc4:	00802074 	movhi	r2,129
  813dc8:	109bf104 	addi	r2,r2,28612
  813dcc:	10800017 	ldw	r2,0(r2)
  813dd0:	103ee83a 	callr	r2
  813dd4:	e0bfff15 	stw	r2,-4(fp)
  813dd8:	00000306 	br	813de8 <alt_get_errno+0x48>
  813ddc:	008020b4 	movhi	r2,130
  813de0:	10a33b04 	addi	r2,r2,-29460
  813de4:	e0bfff15 	stw	r2,-4(fp)
  813de8:	e0bfff17 	ldw	r2,-4(fp)
}
  813dec:	e037883a 	mov	sp,fp
  813df0:	dfc00117 	ldw	ra,4(sp)
  813df4:	df000017 	ldw	fp,0(sp)
  813df8:	dec00204 	addi	sp,sp,8
  813dfc:	f800283a 	ret

00813e00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813e00:	defffd04 	addi	sp,sp,-12
  813e04:	dfc00215 	stw	ra,8(sp)
  813e08:	df000115 	stw	fp,4(sp)
  813e0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813e10:	00bfff04 	movi	r2,-4
  813e14:	00c02074 	movhi	r3,129
  813e18:	18d2e904 	addi	r3,r3,19364
  813e1c:	1885883a 	add	r2,r3,r2
  813e20:	e0bfff15 	stw	r2,-4(fp)
  813e24:	00000606 	br	813e40 <_do_ctors+0x40>
        (*ctor) (); 
  813e28:	e0bfff17 	ldw	r2,-4(fp)
  813e2c:	10800017 	ldw	r2,0(r2)
  813e30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813e34:	e0bfff17 	ldw	r2,-4(fp)
  813e38:	10bfff04 	addi	r2,r2,-4
  813e3c:	e0bfff15 	stw	r2,-4(fp)
  813e40:	e0ffff17 	ldw	r3,-4(fp)
  813e44:	00802074 	movhi	r2,129
  813e48:	1092e804 	addi	r2,r2,19360
  813e4c:	18bff62e 	bgeu	r3,r2,813e28 <_do_ctors+0x28>
        (*ctor) (); 
}
  813e50:	e037883a 	mov	sp,fp
  813e54:	dfc00117 	ldw	ra,4(sp)
  813e58:	df000017 	ldw	fp,0(sp)
  813e5c:	dec00204 	addi	sp,sp,8
  813e60:	f800283a 	ret

00813e64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813e64:	defffd04 	addi	sp,sp,-12
  813e68:	dfc00215 	stw	ra,8(sp)
  813e6c:	df000115 	stw	fp,4(sp)
  813e70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813e74:	00bfff04 	movi	r2,-4
  813e78:	00c02074 	movhi	r3,129
  813e7c:	18d2e904 	addi	r3,r3,19364
  813e80:	1885883a 	add	r2,r3,r2
  813e84:	e0bfff15 	stw	r2,-4(fp)
  813e88:	00000606 	br	813ea4 <_do_dtors+0x40>
        (*dtor) (); 
  813e8c:	e0bfff17 	ldw	r2,-4(fp)
  813e90:	10800017 	ldw	r2,0(r2)
  813e94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813e98:	e0bfff17 	ldw	r2,-4(fp)
  813e9c:	10bfff04 	addi	r2,r2,-4
  813ea0:	e0bfff15 	stw	r2,-4(fp)
  813ea4:	e0ffff17 	ldw	r3,-4(fp)
  813ea8:	00802074 	movhi	r2,129
  813eac:	1092e904 	addi	r2,r2,19364
  813eb0:	18bff62e 	bgeu	r3,r2,813e8c <_do_dtors+0x28>
        (*dtor) (); 
}
  813eb4:	e037883a 	mov	sp,fp
  813eb8:	dfc00117 	ldw	ra,4(sp)
  813ebc:	df000017 	ldw	fp,0(sp)
  813ec0:	dec00204 	addi	sp,sp,8
  813ec4:	f800283a 	ret

00813ec8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813ec8:	defff904 	addi	sp,sp,-28
  813ecc:	dfc00615 	stw	ra,24(sp)
  813ed0:	df000515 	stw	fp,20(sp)
  813ed4:	df000504 	addi	fp,sp,20
  813ed8:	e13ffd15 	stw	r4,-12(fp)
  813edc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813ee0:	e0bffe17 	ldw	r2,-8(fp)
  813ee4:	10800017 	ldw	r2,0(r2)
  813ee8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813eec:	e13ffd17 	ldw	r4,-12(fp)
  813ef0:	080415c0 	call	80415c <strlen>
  813ef4:	10800044 	addi	r2,r2,1
  813ef8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813efc:	00000d06 	br	813f34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813f00:	e0bffc17 	ldw	r2,-16(fp)
  813f04:	11000217 	ldw	r4,8(r2)
  813f08:	e1bffb17 	ldw	r6,-20(fp)
  813f0c:	e17ffd17 	ldw	r5,-12(fp)
  813f10:	08147e40 	call	8147e4 <memcmp>
  813f14:	1004c03a 	cmpne	r2,r2,zero
  813f18:	1000031e 	bne	r2,zero,813f28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813f1c:	e0bffc17 	ldw	r2,-16(fp)
  813f20:	e0bfff15 	stw	r2,-4(fp)
  813f24:	00000706 	br	813f44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813f28:	e0bffc17 	ldw	r2,-16(fp)
  813f2c:	10800017 	ldw	r2,0(r2)
  813f30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813f34:	e0fffe17 	ldw	r3,-8(fp)
  813f38:	e0bffc17 	ldw	r2,-16(fp)
  813f3c:	10fff01e 	bne	r2,r3,813f00 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813f40:	e03fff15 	stw	zero,-4(fp)
  813f44:	e0bfff17 	ldw	r2,-4(fp)
}
  813f48:	e037883a 	mov	sp,fp
  813f4c:	dfc00117 	ldw	ra,4(sp)
  813f50:	df000017 	ldw	fp,0(sp)
  813f54:	dec00204 	addi	sp,sp,8
  813f58:	f800283a 	ret

00813f5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813f5c:	defffa04 	addi	sp,sp,-24
  813f60:	dfc00515 	stw	ra,20(sp)
  813f64:	df000415 	stw	fp,16(sp)
  813f68:	df000404 	addi	fp,sp,16
  813f6c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813f70:	00802074 	movhi	r2,129
  813f74:	109bec04 	addi	r2,r2,28592
  813f78:	10800017 	ldw	r2,0(r2)
  813f7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813f80:	00003306 	br	814050 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813f84:	e0bffd17 	ldw	r2,-12(fp)
  813f88:	11000217 	ldw	r4,8(r2)
  813f8c:	080415c0 	call	80415c <strlen>
  813f90:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813f94:	e0bffd17 	ldw	r2,-12(fp)
  813f98:	10c00217 	ldw	r3,8(r2)
  813f9c:	e0bffc17 	ldw	r2,-16(fp)
  813fa0:	1885883a 	add	r2,r3,r2
  813fa4:	10bfffc4 	addi	r2,r2,-1
  813fa8:	10800003 	ldbu	r2,0(r2)
  813fac:	10803fcc 	andi	r2,r2,255
  813fb0:	1080201c 	xori	r2,r2,128
  813fb4:	10bfe004 	addi	r2,r2,-128
  813fb8:	10800bd8 	cmpnei	r2,r2,47
  813fbc:	1000031e 	bne	r2,zero,813fcc <alt_find_file+0x70>
    {
      len -= 1;
  813fc0:	e0bffc17 	ldw	r2,-16(fp)
  813fc4:	10bfffc4 	addi	r2,r2,-1
  813fc8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813fcc:	e0bffc17 	ldw	r2,-16(fp)
  813fd0:	1007883a 	mov	r3,r2
  813fd4:	e0bffe17 	ldw	r2,-8(fp)
  813fd8:	1885883a 	add	r2,r3,r2
  813fdc:	10800003 	ldbu	r2,0(r2)
  813fe0:	10803fcc 	andi	r2,r2,255
  813fe4:	1080201c 	xori	r2,r2,128
  813fe8:	10bfe004 	addi	r2,r2,-128
  813fec:	10800be0 	cmpeqi	r2,r2,47
  813ff0:	10000a1e 	bne	r2,zero,81401c <alt_find_file+0xc0>
  813ff4:	e0bffc17 	ldw	r2,-16(fp)
  813ff8:	1007883a 	mov	r3,r2
  813ffc:	e0bffe17 	ldw	r2,-8(fp)
  814000:	1885883a 	add	r2,r3,r2
  814004:	10800003 	ldbu	r2,0(r2)
  814008:	10803fcc 	andi	r2,r2,255
  81400c:	1080201c 	xori	r2,r2,128
  814010:	10bfe004 	addi	r2,r2,-128
  814014:	1004c03a 	cmpne	r2,r2,zero
  814018:	10000a1e 	bne	r2,zero,814044 <alt_find_file+0xe8>
  81401c:	e0bffd17 	ldw	r2,-12(fp)
  814020:	11000217 	ldw	r4,8(r2)
  814024:	e1bffc17 	ldw	r6,-16(fp)
  814028:	e17ffe17 	ldw	r5,-8(fp)
  81402c:	08147e40 	call	8147e4 <memcmp>
  814030:	1004c03a 	cmpne	r2,r2,zero
  814034:	1000031e 	bne	r2,zero,814044 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814038:	e0bffd17 	ldw	r2,-12(fp)
  81403c:	e0bfff15 	stw	r2,-4(fp)
  814040:	00000806 	br	814064 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  814044:	e0bffd17 	ldw	r2,-12(fp)
  814048:	10800017 	ldw	r2,0(r2)
  81404c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814050:	00c02074 	movhi	r3,129
  814054:	18dbec04 	addi	r3,r3,28592
  814058:	e0bffd17 	ldw	r2,-12(fp)
  81405c:	10ffc91e 	bne	r2,r3,813f84 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814060:	e03fff15 	stw	zero,-4(fp)
  814064:	e0bfff17 	ldw	r2,-4(fp)
}
  814068:	e037883a 	mov	sp,fp
  81406c:	dfc00117 	ldw	ra,4(sp)
  814070:	df000017 	ldw	fp,0(sp)
  814074:	dec00204 	addi	sp,sp,8
  814078:	f800283a 	ret

0081407c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81407c:	defffc04 	addi	sp,sp,-16
  814080:	df000315 	stw	fp,12(sp)
  814084:	df000304 	addi	fp,sp,12
  814088:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81408c:	00bffa04 	movi	r2,-24
  814090:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814094:	e03ffe15 	stw	zero,-8(fp)
  814098:	00001e06 	br	814114 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81409c:	e0bffe17 	ldw	r2,-8(fp)
  8140a0:	00c02074 	movhi	r3,129
  8140a4:	18d6f204 	addi	r3,r3,23496
  8140a8:	10800324 	muli	r2,r2,12
  8140ac:	10c5883a 	add	r2,r2,r3
  8140b0:	10800017 	ldw	r2,0(r2)
  8140b4:	1004c03a 	cmpne	r2,r2,zero
  8140b8:	1000131e 	bne	r2,zero,814108 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8140bc:	e0bffe17 	ldw	r2,-8(fp)
  8140c0:	00c02074 	movhi	r3,129
  8140c4:	18d6f204 	addi	r3,r3,23496
  8140c8:	10800324 	muli	r2,r2,12
  8140cc:	10c7883a 	add	r3,r2,r3
  8140d0:	e0bfff17 	ldw	r2,-4(fp)
  8140d4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8140d8:	00802074 	movhi	r2,129
  8140dc:	109bf004 	addi	r2,r2,28608
  8140e0:	10c00017 	ldw	r3,0(r2)
  8140e4:	e0bffe17 	ldw	r2,-8(fp)
  8140e8:	1880040e 	bge	r3,r2,8140fc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8140ec:	00c02074 	movhi	r3,129
  8140f0:	18dbf004 	addi	r3,r3,28608
  8140f4:	e0bffe17 	ldw	r2,-8(fp)
  8140f8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8140fc:	e0bffe17 	ldw	r2,-8(fp)
  814100:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  814104:	00000606 	br	814120 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814108:	e0bffe17 	ldw	r2,-8(fp)
  81410c:	10800044 	addi	r2,r2,1
  814110:	e0bffe15 	stw	r2,-8(fp)
  814114:	e0bffe17 	ldw	r2,-8(fp)
  814118:	10800810 	cmplti	r2,r2,32
  81411c:	103fdf1e 	bne	r2,zero,81409c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814120:	e0bffd17 	ldw	r2,-12(fp)
}
  814124:	e037883a 	mov	sp,fp
  814128:	df000017 	ldw	fp,0(sp)
  81412c:	dec00104 	addi	sp,sp,4
  814130:	f800283a 	ret

00814134 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  814134:	defffe04 	addi	sp,sp,-8
  814138:	dfc00115 	stw	ra,4(sp)
  81413c:	df000015 	stw	fp,0(sp)
  814140:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  814144:	0009883a 	mov	r4,zero
  814148:	01440004 	movi	r5,4096
  81414c:	08147080 	call	814708 <alt_icache_flush>
#endif
}
  814150:	e037883a 	mov	sp,fp
  814154:	dfc00117 	ldw	ra,4(sp)
  814158:	df000017 	ldw	fp,0(sp)
  81415c:	dec00204 	addi	sp,sp,8
  814160:	f800283a 	ret

00814164 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814164:	defff904 	addi	sp,sp,-28
  814168:	dfc00615 	stw	ra,24(sp)
  81416c:	df000515 	stw	fp,20(sp)
  814170:	df000504 	addi	fp,sp,20
  814174:	e13ffc15 	stw	r4,-16(fp)
  814178:	e17ffd15 	stw	r5,-12(fp)
  81417c:	e1bffe15 	stw	r6,-8(fp)
  814180:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814184:	e0800217 	ldw	r2,8(fp)
  814188:	d8800015 	stw	r2,0(sp)
  81418c:	e13ffc17 	ldw	r4,-16(fp)
  814190:	e17ffd17 	ldw	r5,-12(fp)
  814194:	e1bffe17 	ldw	r6,-8(fp)
  814198:	e1ffff17 	ldw	r7,-4(fp)
  81419c:	08143380 	call	814338 <alt_iic_isr_register>
}  
  8141a0:	e037883a 	mov	sp,fp
  8141a4:	dfc00117 	ldw	ra,4(sp)
  8141a8:	df000017 	ldw	fp,0(sp)
  8141ac:	dec00204 	addi	sp,sp,8
  8141b0:	f800283a 	ret

008141b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8141b4:	defff904 	addi	sp,sp,-28
  8141b8:	df000615 	stw	fp,24(sp)
  8141bc:	df000604 	addi	fp,sp,24
  8141c0:	e13ffe15 	stw	r4,-8(fp)
  8141c4:	e17fff15 	stw	r5,-4(fp)
  8141c8:	e0bfff17 	ldw	r2,-4(fp)
  8141cc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8141d0:	0005303a 	rdctl	r2,status
  8141d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8141d8:	e0fffb17 	ldw	r3,-20(fp)
  8141dc:	00bfff84 	movi	r2,-2
  8141e0:	1884703a 	and	r2,r3,r2
  8141e4:	1001703a 	wrctl	status,r2
  
  return context;
  8141e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8141ec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8141f0:	e0fffc17 	ldw	r3,-16(fp)
  8141f4:	00800044 	movi	r2,1
  8141f8:	10c4983a 	sll	r2,r2,r3
  8141fc:	1007883a 	mov	r3,r2
  814200:	008020b4 	movhi	r2,130
  814204:	10a34204 	addi	r2,r2,-29432
  814208:	10800017 	ldw	r2,0(r2)
  81420c:	1886b03a 	or	r3,r3,r2
  814210:	008020b4 	movhi	r2,130
  814214:	10a34204 	addi	r2,r2,-29432
  814218:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81421c:	008020b4 	movhi	r2,130
  814220:	10a34204 	addi	r2,r2,-29432
  814224:	10800017 	ldw	r2,0(r2)
  814228:	100170fa 	wrctl	ienable,r2
  81422c:	e0bffd17 	ldw	r2,-12(fp)
  814230:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814234:	e0bffa17 	ldw	r2,-24(fp)
  814238:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81423c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814240:	e037883a 	mov	sp,fp
  814244:	df000017 	ldw	fp,0(sp)
  814248:	dec00104 	addi	sp,sp,4
  81424c:	f800283a 	ret

00814250 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814250:	defff904 	addi	sp,sp,-28
  814254:	df000615 	stw	fp,24(sp)
  814258:	df000604 	addi	fp,sp,24
  81425c:	e13ffe15 	stw	r4,-8(fp)
  814260:	e17fff15 	stw	r5,-4(fp)
  814264:	e0bfff17 	ldw	r2,-4(fp)
  814268:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81426c:	0005303a 	rdctl	r2,status
  814270:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814274:	e0fffb17 	ldw	r3,-20(fp)
  814278:	00bfff84 	movi	r2,-2
  81427c:	1884703a 	and	r2,r3,r2
  814280:	1001703a 	wrctl	status,r2
  
  return context;
  814284:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814288:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  81428c:	e0fffc17 	ldw	r3,-16(fp)
  814290:	00800044 	movi	r2,1
  814294:	10c4983a 	sll	r2,r2,r3
  814298:	0084303a 	nor	r2,zero,r2
  81429c:	1007883a 	mov	r3,r2
  8142a0:	008020b4 	movhi	r2,130
  8142a4:	10a34204 	addi	r2,r2,-29432
  8142a8:	10800017 	ldw	r2,0(r2)
  8142ac:	1886703a 	and	r3,r3,r2
  8142b0:	008020b4 	movhi	r2,130
  8142b4:	10a34204 	addi	r2,r2,-29432
  8142b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8142bc:	008020b4 	movhi	r2,130
  8142c0:	10a34204 	addi	r2,r2,-29432
  8142c4:	10800017 	ldw	r2,0(r2)
  8142c8:	100170fa 	wrctl	ienable,r2
  8142cc:	e0bffd17 	ldw	r2,-12(fp)
  8142d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8142d4:	e0bffa17 	ldw	r2,-24(fp)
  8142d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8142dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8142e0:	e037883a 	mov	sp,fp
  8142e4:	df000017 	ldw	fp,0(sp)
  8142e8:	dec00104 	addi	sp,sp,4
  8142ec:	f800283a 	ret

008142f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8142f0:	defffc04 	addi	sp,sp,-16
  8142f4:	df000315 	stw	fp,12(sp)
  8142f8:	df000304 	addi	fp,sp,12
  8142fc:	e13ffe15 	stw	r4,-8(fp)
  814300:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  814304:	000530fa 	rdctl	r2,ienable
  814308:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81430c:	e0ffff17 	ldw	r3,-4(fp)
  814310:	00800044 	movi	r2,1
  814314:	10c4983a 	sll	r2,r2,r3
  814318:	1007883a 	mov	r3,r2
  81431c:	e0bffd17 	ldw	r2,-12(fp)
  814320:	1884703a 	and	r2,r3,r2
  814324:	1004c03a 	cmpne	r2,r2,zero
}
  814328:	e037883a 	mov	sp,fp
  81432c:	df000017 	ldw	fp,0(sp)
  814330:	dec00104 	addi	sp,sp,4
  814334:	f800283a 	ret

00814338 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814338:	defff404 	addi	sp,sp,-48
  81433c:	dfc00b15 	stw	ra,44(sp)
  814340:	df000a15 	stw	fp,40(sp)
  814344:	df000a04 	addi	fp,sp,40
  814348:	e13ffb15 	stw	r4,-20(fp)
  81434c:	e17ffc15 	stw	r5,-16(fp)
  814350:	e1bffd15 	stw	r6,-12(fp)
  814354:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814358:	00bffa84 	movi	r2,-22
  81435c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814360:	e0bffc17 	ldw	r2,-16(fp)
  814364:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814368:	e0bff917 	ldw	r2,-28(fp)
  81436c:	10800808 	cmpgei	r2,r2,32
  814370:	1000291e 	bne	r2,zero,814418 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814374:	0005303a 	rdctl	r2,status
  814378:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81437c:	e0fff717 	ldw	r3,-36(fp)
  814380:	00bfff84 	movi	r2,-2
  814384:	1884703a 	and	r2,r3,r2
  814388:	1001703a 	wrctl	status,r2
  
  return context;
  81438c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814390:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  814394:	e0bff917 	ldw	r2,-28(fp)
  814398:	00c020b4 	movhi	r3,130
  81439c:	18e39e04 	addi	r3,r3,-29064
  8143a0:	100490fa 	slli	r2,r2,3
  8143a4:	10c7883a 	add	r3,r2,r3
  8143a8:	e0bffd17 	ldw	r2,-12(fp)
  8143ac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8143b0:	e0bff917 	ldw	r2,-28(fp)
  8143b4:	00c020b4 	movhi	r3,130
  8143b8:	18e39e04 	addi	r3,r3,-29064
  8143bc:	100490fa 	slli	r2,r2,3
  8143c0:	10c5883a 	add	r2,r2,r3
  8143c4:	10c00104 	addi	r3,r2,4
  8143c8:	e0bffe17 	ldw	r2,-8(fp)
  8143cc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8143d0:	e0bffd17 	ldw	r2,-12(fp)
  8143d4:	1005003a 	cmpeq	r2,r2,zero
  8143d8:	1000051e 	bne	r2,zero,8143f0 <alt_iic_isr_register+0xb8>
  8143dc:	e17ff917 	ldw	r5,-28(fp)
  8143e0:	e13ffb17 	ldw	r4,-20(fp)
  8143e4:	08141b40 	call	8141b4 <alt_ic_irq_enable>
  8143e8:	e0bfff15 	stw	r2,-4(fp)
  8143ec:	00000406 	br	814400 <alt_iic_isr_register+0xc8>
  8143f0:	e17ff917 	ldw	r5,-28(fp)
  8143f4:	e13ffb17 	ldw	r4,-20(fp)
  8143f8:	08142500 	call	814250 <alt_ic_irq_disable>
  8143fc:	e0bfff15 	stw	r2,-4(fp)
  814400:	e0bfff17 	ldw	r2,-4(fp)
  814404:	e0bffa15 	stw	r2,-24(fp)
  814408:	e0bff817 	ldw	r2,-32(fp)
  81440c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814410:	e0bff617 	ldw	r2,-40(fp)
  814414:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814418:	e0bffa17 	ldw	r2,-24(fp)
}
  81441c:	e037883a 	mov	sp,fp
  814420:	dfc00117 	ldw	ra,4(sp)
  814424:	df000017 	ldw	fp,0(sp)
  814428:	dec00204 	addi	sp,sp,8
  81442c:	f800283a 	ret

00814430 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814430:	defff904 	addi	sp,sp,-28
  814434:	dfc00615 	stw	ra,24(sp)
  814438:	df000515 	stw	fp,20(sp)
  81443c:	df000504 	addi	fp,sp,20
  814440:	e13ffc15 	stw	r4,-16(fp)
  814444:	e17ffd15 	stw	r5,-12(fp)
  814448:	e1bffe15 	stw	r6,-8(fp)
  81444c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814450:	e13ffd17 	ldw	r4,-12(fp)
  814454:	e17ffe17 	ldw	r5,-8(fp)
  814458:	e1bfff17 	ldw	r6,-4(fp)
  81445c:	0810f640 	call	810f64 <open>
  814460:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814464:	e0bffb17 	ldw	r2,-20(fp)
  814468:	1004803a 	cmplt	r2,r2,zero
  81446c:	10001c1e 	bne	r2,zero,8144e0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814470:	e0bffb17 	ldw	r2,-20(fp)
  814474:	00c02074 	movhi	r3,129
  814478:	18d6f204 	addi	r3,r3,23496
  81447c:	10800324 	muli	r2,r2,12
  814480:	10c5883a 	add	r2,r2,r3
  814484:	10c00017 	ldw	r3,0(r2)
  814488:	e0bffc17 	ldw	r2,-16(fp)
  81448c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814490:	e0bffb17 	ldw	r2,-20(fp)
  814494:	00c02074 	movhi	r3,129
  814498:	18d6f204 	addi	r3,r3,23496
  81449c:	10800324 	muli	r2,r2,12
  8144a0:	10c5883a 	add	r2,r2,r3
  8144a4:	10800104 	addi	r2,r2,4
  8144a8:	10c00017 	ldw	r3,0(r2)
  8144ac:	e0bffc17 	ldw	r2,-16(fp)
  8144b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8144b4:	e0bffb17 	ldw	r2,-20(fp)
  8144b8:	00c02074 	movhi	r3,129
  8144bc:	18d6f204 	addi	r3,r3,23496
  8144c0:	10800324 	muli	r2,r2,12
  8144c4:	10c5883a 	add	r2,r2,r3
  8144c8:	10800204 	addi	r2,r2,8
  8144cc:	10c00017 	ldw	r3,0(r2)
  8144d0:	e0bffc17 	ldw	r2,-16(fp)
  8144d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8144d8:	e13ffb17 	ldw	r4,-20(fp)
  8144dc:	08112cc0 	call	8112cc <alt_release_fd>
  }
} 
  8144e0:	e037883a 	mov	sp,fp
  8144e4:	dfc00117 	ldw	ra,4(sp)
  8144e8:	df000017 	ldw	fp,0(sp)
  8144ec:	dec00204 	addi	sp,sp,8
  8144f0:	f800283a 	ret

008144f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8144f4:	defffb04 	addi	sp,sp,-20
  8144f8:	dfc00415 	stw	ra,16(sp)
  8144fc:	df000315 	stw	fp,12(sp)
  814500:	df000304 	addi	fp,sp,12
  814504:	e13ffd15 	stw	r4,-12(fp)
  814508:	e17ffe15 	stw	r5,-8(fp)
  81450c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814510:	01002074 	movhi	r4,129
  814514:	2116f504 	addi	r4,r4,23508
  814518:	e17ffd17 	ldw	r5,-12(fp)
  81451c:	01800044 	movi	r6,1
  814520:	01c07fc4 	movi	r7,511
  814524:	08144300 	call	814430 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814528:	01002074 	movhi	r4,129
  81452c:	2116f204 	addi	r4,r4,23496
  814530:	e17ffe17 	ldw	r5,-8(fp)
  814534:	000d883a 	mov	r6,zero
  814538:	01c07fc4 	movi	r7,511
  81453c:	08144300 	call	814430 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814540:	01002074 	movhi	r4,129
  814544:	2116f804 	addi	r4,r4,23520
  814548:	e17fff17 	ldw	r5,-4(fp)
  81454c:	01800044 	movi	r6,1
  814550:	01c07fc4 	movi	r7,511
  814554:	08144300 	call	814430 <alt_open_fd>
}  
  814558:	e037883a 	mov	sp,fp
  81455c:	dfc00117 	ldw	ra,4(sp)
  814560:	df000017 	ldw	fp,0(sp)
  814564:	dec00204 	addi	sp,sp,8
  814568:	f800283a 	ret

0081456c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81456c:	defffd04 	addi	sp,sp,-12
  814570:	dfc00215 	stw	ra,8(sp)
  814574:	df000115 	stw	fp,4(sp)
  814578:	df000104 	addi	fp,sp,4
  81457c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  814580:	e13fff17 	ldw	r4,-4(fp)
  814584:	08145bc0 	call	8145bc <alt_busy_sleep>
}
  814588:	e037883a 	mov	sp,fp
  81458c:	dfc00117 	ldw	ra,4(sp)
  814590:	df000017 	ldw	fp,0(sp)
  814594:	dec00204 	addi	sp,sp,8
  814598:	f800283a 	ret

0081459c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81459c:	deffff04 	addi	sp,sp,-4
  8145a0:	df000015 	stw	fp,0(sp)
  8145a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8145a8:	000170fa 	wrctl	ienable,zero
}
  8145ac:	e037883a 	mov	sp,fp
  8145b0:	df000017 	ldw	fp,0(sp)
  8145b4:	dec00104 	addi	sp,sp,4
  8145b8:	f800283a 	ret

008145bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8145bc:	defffa04 	addi	sp,sp,-24
  8145c0:	dfc00515 	stw	ra,20(sp)
  8145c4:	df000415 	stw	fp,16(sp)
  8145c8:	df000404 	addi	fp,sp,16
  8145cc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8145d0:	008000c4 	movi	r2,3
  8145d4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  8145d8:	e0fffc17 	ldw	r3,-16(fp)
  8145dc:	008003f4 	movhi	r2,15
  8145e0:	10909004 	addi	r2,r2,16960
  8145e4:	188b383a 	mul	r5,r3,r2
  8145e8:	0100bef4 	movhi	r4,763
  8145ec:	213c2004 	addi	r4,r4,-3968
  8145f0:	080fc100 	call	80fc10 <__udivsi3>
  8145f4:	100b883a 	mov	r5,r2
  8145f8:	01200034 	movhi	r4,32768
  8145fc:	213fffc4 	addi	r4,r4,-1
  814600:	080fc100 	call	80fc10 <__udivsi3>
  814604:	100b883a 	mov	r5,r2
  814608:	e13fff17 	ldw	r4,-4(fp)
  81460c:	080fc100 	call	80fc10 <__udivsi3>
  814610:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  814614:	e0bffd17 	ldw	r2,-12(fp)
  814618:	1005003a 	cmpeq	r2,r2,zero
  81461c:	1000281e 	bne	r2,zero,8146c0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  814620:	e03ffe15 	stw	zero,-8(fp)
  814624:	00001606 	br	814680 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  814628:	00a00034 	movhi	r2,32768
  81462c:	10bfffc4 	addi	r2,r2,-1
  814630:	10bfffc4 	addi	r2,r2,-1
  814634:	103ffe1e 	bne	r2,zero,814630 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814638:	e0fffc17 	ldw	r3,-16(fp)
  81463c:	008003f4 	movhi	r2,15
  814640:	10909004 	addi	r2,r2,16960
  814644:	188b383a 	mul	r5,r3,r2
  814648:	0100bef4 	movhi	r4,763
  81464c:	213c2004 	addi	r4,r4,-3968
  814650:	080fc100 	call	80fc10 <__udivsi3>
  814654:	100b883a 	mov	r5,r2
  814658:	01200034 	movhi	r4,32768
  81465c:	213fffc4 	addi	r4,r4,-1
  814660:	080fc100 	call	80fc10 <__udivsi3>
  814664:	1007883a 	mov	r3,r2
  814668:	e0bfff17 	ldw	r2,-4(fp)
  81466c:	10c5c83a 	sub	r2,r2,r3
  814670:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814674:	e0bffe17 	ldw	r2,-8(fp)
  814678:	10800044 	addi	r2,r2,1
  81467c:	e0bffe15 	stw	r2,-8(fp)
  814680:	e0fffe17 	ldw	r3,-8(fp)
  814684:	e0bffd17 	ldw	r2,-12(fp)
  814688:	18bfe716 	blt	r3,r2,814628 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81468c:	e0fffc17 	ldw	r3,-16(fp)
  814690:	008003f4 	movhi	r2,15
  814694:	10909004 	addi	r2,r2,16960
  814698:	188b383a 	mul	r5,r3,r2
  81469c:	0100bef4 	movhi	r4,763
  8146a0:	213c2004 	addi	r4,r4,-3968
  8146a4:	080fc100 	call	80fc10 <__udivsi3>
  8146a8:	1007883a 	mov	r3,r2
  8146ac:	e0bfff17 	ldw	r2,-4(fp)
  8146b0:	1885383a 	mul	r2,r3,r2
  8146b4:	10bfffc4 	addi	r2,r2,-1
  8146b8:	103ffe1e 	bne	r2,zero,8146b4 <alt_busy_sleep+0xf8>
  8146bc:	00000c06 	br	8146f0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8146c0:	e0fffc17 	ldw	r3,-16(fp)
  8146c4:	008003f4 	movhi	r2,15
  8146c8:	10909004 	addi	r2,r2,16960
  8146cc:	188b383a 	mul	r5,r3,r2
  8146d0:	0100bef4 	movhi	r4,763
  8146d4:	213c2004 	addi	r4,r4,-3968
  8146d8:	080fc100 	call	80fc10 <__udivsi3>
  8146dc:	1007883a 	mov	r3,r2
  8146e0:	e0bfff17 	ldw	r2,-4(fp)
  8146e4:	1885383a 	mul	r2,r3,r2
  8146e8:	10bfffc4 	addi	r2,r2,-1
  8146ec:	00bffe16 	blt	zero,r2,8146e8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8146f0:	0005883a 	mov	r2,zero
}
  8146f4:	e037883a 	mov	sp,fp
  8146f8:	dfc00117 	ldw	ra,4(sp)
  8146fc:	df000017 	ldw	fp,0(sp)
  814700:	dec00204 	addi	sp,sp,8
  814704:	f800283a 	ret

00814708 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814708:	defffb04 	addi	sp,sp,-20
  81470c:	df000415 	stw	fp,16(sp)
  814710:	df000404 	addi	fp,sp,16
  814714:	e13ffe15 	stw	r4,-8(fp)
  814718:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81471c:	e0bfff17 	ldw	r2,-4(fp)
  814720:	10840070 	cmpltui	r2,r2,4097
  814724:	1000021e 	bne	r2,zero,814730 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814728:	00840004 	movi	r2,4096
  81472c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814730:	e0fffe17 	ldw	r3,-8(fp)
  814734:	e0bfff17 	ldw	r2,-4(fp)
  814738:	1885883a 	add	r2,r3,r2
  81473c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814740:	e0bffe17 	ldw	r2,-8(fp)
  814744:	e0bffd15 	stw	r2,-12(fp)
  814748:	00000506 	br	814760 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81474c:	e0bffd17 	ldw	r2,-12(fp)
  814750:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814754:	e0bffd17 	ldw	r2,-12(fp)
  814758:	10800804 	addi	r2,r2,32
  81475c:	e0bffd15 	stw	r2,-12(fp)
  814760:	e0fffd17 	ldw	r3,-12(fp)
  814764:	e0bffc17 	ldw	r2,-16(fp)
  814768:	18bff836 	bltu	r3,r2,81474c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81476c:	e0bffe17 	ldw	r2,-8(fp)
  814770:	108007cc 	andi	r2,r2,31
  814774:	1005003a 	cmpeq	r2,r2,zero
  814778:	1000021e 	bne	r2,zero,814784 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81477c:	e0bffd17 	ldw	r2,-12(fp)
  814780:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814784:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814788:	e037883a 	mov	sp,fp
  81478c:	df000017 	ldw	fp,0(sp)
  814790:	dec00104 	addi	sp,sp,4
  814794:	f800283a 	ret

00814798 <atexit>:
  814798:	200b883a 	mov	r5,r4
  81479c:	000d883a 	mov	r6,zero
  8147a0:	0009883a 	mov	r4,zero
  8147a4:	000f883a 	mov	r7,zero
  8147a8:	08148581 	jmpi	814858 <__register_exitproc>

008147ac <exit>:
  8147ac:	defffe04 	addi	sp,sp,-8
  8147b0:	000b883a 	mov	r5,zero
  8147b4:	dc000015 	stw	r16,0(sp)
  8147b8:	dfc00115 	stw	ra,4(sp)
  8147bc:	2021883a 	mov	r16,r4
  8147c0:	08149900 	call	814990 <__call_exitprocs>
  8147c4:	00802074 	movhi	r2,129
  8147c8:	109be604 	addi	r2,r2,28568
  8147cc:	11000017 	ldw	r4,0(r2)
  8147d0:	20800f17 	ldw	r2,60(r4)
  8147d4:	10000126 	beq	r2,zero,8147dc <exit+0x30>
  8147d8:	103ee83a 	callr	r2
  8147dc:	8009883a 	mov	r4,r16
  8147e0:	0814b800 	call	814b80 <_exit>

008147e4 <memcmp>:
  8147e4:	00c000c4 	movi	r3,3
  8147e8:	1980032e 	bgeu	r3,r6,8147f8 <memcmp+0x14>
  8147ec:	2144b03a 	or	r2,r4,r5
  8147f0:	10c4703a 	and	r2,r2,r3
  8147f4:	10000f26 	beq	r2,zero,814834 <memcmp+0x50>
  8147f8:	31ffffc4 	addi	r7,r6,-1
  8147fc:	3000061e 	bne	r6,zero,814818 <memcmp+0x34>
  814800:	00000a06 	br	81482c <memcmp+0x48>
  814804:	39ffffc4 	addi	r7,r7,-1
  814808:	00bfffc4 	movi	r2,-1
  81480c:	21000044 	addi	r4,r4,1
  814810:	29400044 	addi	r5,r5,1
  814814:	38800526 	beq	r7,r2,81482c <memcmp+0x48>
  814818:	20c00003 	ldbu	r3,0(r4)
  81481c:	28800003 	ldbu	r2,0(r5)
  814820:	18bff826 	beq	r3,r2,814804 <memcmp+0x20>
  814824:	1885c83a 	sub	r2,r3,r2
  814828:	f800283a 	ret
  81482c:	0005883a 	mov	r2,zero
  814830:	f800283a 	ret
  814834:	180f883a 	mov	r7,r3
  814838:	20c00017 	ldw	r3,0(r4)
  81483c:	28800017 	ldw	r2,0(r5)
  814840:	18bfed1e 	bne	r3,r2,8147f8 <memcmp+0x14>
  814844:	31bfff04 	addi	r6,r6,-4
  814848:	21000104 	addi	r4,r4,4
  81484c:	29400104 	addi	r5,r5,4
  814850:	39bff936 	bltu	r7,r6,814838 <memcmp+0x54>
  814854:	003fe806 	br	8147f8 <memcmp+0x14>

00814858 <__register_exitproc>:
  814858:	defffa04 	addi	sp,sp,-24
  81485c:	00802074 	movhi	r2,129
  814860:	109be604 	addi	r2,r2,28568
  814864:	dc000015 	stw	r16,0(sp)
  814868:	14000017 	ldw	r16,0(r2)
  81486c:	dd000415 	stw	r20,16(sp)
  814870:	2829883a 	mov	r20,r5
  814874:	81405217 	ldw	r5,328(r16)
  814878:	dcc00315 	stw	r19,12(sp)
  81487c:	dc800215 	stw	r18,8(sp)
  814880:	dc400115 	stw	r17,4(sp)
  814884:	dfc00515 	stw	ra,20(sp)
  814888:	2023883a 	mov	r17,r4
  81488c:	3027883a 	mov	r19,r6
  814890:	3825883a 	mov	r18,r7
  814894:	28002526 	beq	r5,zero,81492c <__register_exitproc+0xd4>
  814898:	29000117 	ldw	r4,4(r5)
  81489c:	008007c4 	movi	r2,31
  8148a0:	11002716 	blt	r2,r4,814940 <__register_exitproc+0xe8>
  8148a4:	8800101e 	bne	r17,zero,8148e8 <__register_exitproc+0x90>
  8148a8:	2105883a 	add	r2,r4,r4
  8148ac:	1085883a 	add	r2,r2,r2
  8148b0:	20c00044 	addi	r3,r4,1
  8148b4:	1145883a 	add	r2,r2,r5
  8148b8:	0009883a 	mov	r4,zero
  8148bc:	15000215 	stw	r20,8(r2)
  8148c0:	28c00115 	stw	r3,4(r5)
  8148c4:	2005883a 	mov	r2,r4
  8148c8:	dfc00517 	ldw	ra,20(sp)
  8148cc:	dd000417 	ldw	r20,16(sp)
  8148d0:	dcc00317 	ldw	r19,12(sp)
  8148d4:	dc800217 	ldw	r18,8(sp)
  8148d8:	dc400117 	ldw	r17,4(sp)
  8148dc:	dc000017 	ldw	r16,0(sp)
  8148e0:	dec00604 	addi	sp,sp,24
  8148e4:	f800283a 	ret
  8148e8:	29802204 	addi	r6,r5,136
  8148ec:	00800044 	movi	r2,1
  8148f0:	110e983a 	sll	r7,r2,r4
  8148f4:	30c04017 	ldw	r3,256(r6)
  8148f8:	2105883a 	add	r2,r4,r4
  8148fc:	1085883a 	add	r2,r2,r2
  814900:	1185883a 	add	r2,r2,r6
  814904:	19c6b03a 	or	r3,r3,r7
  814908:	14802015 	stw	r18,128(r2)
  81490c:	14c00015 	stw	r19,0(r2)
  814910:	00800084 	movi	r2,2
  814914:	30c04015 	stw	r3,256(r6)
  814918:	88bfe31e 	bne	r17,r2,8148a8 <__register_exitproc+0x50>
  81491c:	30804117 	ldw	r2,260(r6)
  814920:	11c4b03a 	or	r2,r2,r7
  814924:	30804115 	stw	r2,260(r6)
  814928:	003fdf06 	br	8148a8 <__register_exitproc+0x50>
  81492c:	008020b4 	movhi	r2,130
  814930:	10a3de04 	addi	r2,r2,-28808
  814934:	100b883a 	mov	r5,r2
  814938:	80805215 	stw	r2,328(r16)
  81493c:	003fd606 	br	814898 <__register_exitproc+0x40>
  814940:	00800034 	movhi	r2,0
  814944:	10800004 	addi	r2,r2,0
  814948:	1000021e 	bne	r2,zero,814954 <__register_exitproc+0xfc>
  81494c:	013fffc4 	movi	r4,-1
  814950:	003fdc06 	br	8148c4 <__register_exitproc+0x6c>
  814954:	01006404 	movi	r4,400
  814958:	103ee83a 	callr	r2
  81495c:	1007883a 	mov	r3,r2
  814960:	103ffa26 	beq	r2,zero,81494c <__register_exitproc+0xf4>
  814964:	80805217 	ldw	r2,328(r16)
  814968:	180b883a 	mov	r5,r3
  81496c:	18000115 	stw	zero,4(r3)
  814970:	18800015 	stw	r2,0(r3)
  814974:	80c05215 	stw	r3,328(r16)
  814978:	18006215 	stw	zero,392(r3)
  81497c:	18006315 	stw	zero,396(r3)
  814980:	0009883a 	mov	r4,zero
  814984:	883fc826 	beq	r17,zero,8148a8 <__register_exitproc+0x50>
  814988:	003fd706 	br	8148e8 <__register_exitproc+0x90>

0081498c <register_fini>:
  81498c:	f800283a 	ret

00814990 <__call_exitprocs>:
  814990:	00802074 	movhi	r2,129
  814994:	109be604 	addi	r2,r2,28568
  814998:	10800017 	ldw	r2,0(r2)
  81499c:	defff304 	addi	sp,sp,-52
  8149a0:	df000b15 	stw	fp,44(sp)
  8149a4:	d8800115 	stw	r2,4(sp)
  8149a8:	00800034 	movhi	r2,0
  8149ac:	10800004 	addi	r2,r2,0
  8149b0:	1005003a 	cmpeq	r2,r2,zero
  8149b4:	d8800215 	stw	r2,8(sp)
  8149b8:	d8800117 	ldw	r2,4(sp)
  8149bc:	dd400815 	stw	r21,32(sp)
  8149c0:	dd000715 	stw	r20,28(sp)
  8149c4:	10805204 	addi	r2,r2,328
  8149c8:	dfc00c15 	stw	ra,48(sp)
  8149cc:	ddc00a15 	stw	r23,40(sp)
  8149d0:	dd800915 	stw	r22,36(sp)
  8149d4:	dcc00615 	stw	r19,24(sp)
  8149d8:	dc800515 	stw	r18,20(sp)
  8149dc:	dc400415 	stw	r17,16(sp)
  8149e0:	dc000315 	stw	r16,12(sp)
  8149e4:	282b883a 	mov	r21,r5
  8149e8:	2039883a 	mov	fp,r4
  8149ec:	d8800015 	stw	r2,0(sp)
  8149f0:	2829003a 	cmpeq	r20,r5,zero
  8149f4:	d8800117 	ldw	r2,4(sp)
  8149f8:	14405217 	ldw	r17,328(r2)
  8149fc:	88001026 	beq	r17,zero,814a40 <__call_exitprocs+0xb0>
  814a00:	ddc00017 	ldw	r23,0(sp)
  814a04:	88800117 	ldw	r2,4(r17)
  814a08:	8c802204 	addi	r18,r17,136
  814a0c:	143fffc4 	addi	r16,r2,-1
  814a10:	80000916 	blt	r16,zero,814a38 <__call_exitprocs+0xa8>
  814a14:	05bfffc4 	movi	r22,-1
  814a18:	a000151e 	bne	r20,zero,814a70 <__call_exitprocs+0xe0>
  814a1c:	8409883a 	add	r4,r16,r16
  814a20:	2105883a 	add	r2,r4,r4
  814a24:	1485883a 	add	r2,r2,r18
  814a28:	10c02017 	ldw	r3,128(r2)
  814a2c:	a8c01126 	beq	r21,r3,814a74 <__call_exitprocs+0xe4>
  814a30:	843fffc4 	addi	r16,r16,-1
  814a34:	85bff81e 	bne	r16,r22,814a18 <__call_exitprocs+0x88>
  814a38:	d8800217 	ldw	r2,8(sp)
  814a3c:	10003126 	beq	r2,zero,814b04 <__call_exitprocs+0x174>
  814a40:	dfc00c17 	ldw	ra,48(sp)
  814a44:	df000b17 	ldw	fp,44(sp)
  814a48:	ddc00a17 	ldw	r23,40(sp)
  814a4c:	dd800917 	ldw	r22,36(sp)
  814a50:	dd400817 	ldw	r21,32(sp)
  814a54:	dd000717 	ldw	r20,28(sp)
  814a58:	dcc00617 	ldw	r19,24(sp)
  814a5c:	dc800517 	ldw	r18,20(sp)
  814a60:	dc400417 	ldw	r17,16(sp)
  814a64:	dc000317 	ldw	r16,12(sp)
  814a68:	dec00d04 	addi	sp,sp,52
  814a6c:	f800283a 	ret
  814a70:	8409883a 	add	r4,r16,r16
  814a74:	88c00117 	ldw	r3,4(r17)
  814a78:	2105883a 	add	r2,r4,r4
  814a7c:	1445883a 	add	r2,r2,r17
  814a80:	18ffffc4 	addi	r3,r3,-1
  814a84:	11800217 	ldw	r6,8(r2)
  814a88:	1c001526 	beq	r3,r16,814ae0 <__call_exitprocs+0x150>
  814a8c:	10000215 	stw	zero,8(r2)
  814a90:	303fe726 	beq	r6,zero,814a30 <__call_exitprocs+0xa0>
  814a94:	00c00044 	movi	r3,1
  814a98:	1c06983a 	sll	r3,r3,r16
  814a9c:	90804017 	ldw	r2,256(r18)
  814aa0:	8cc00117 	ldw	r19,4(r17)
  814aa4:	1884703a 	and	r2,r3,r2
  814aa8:	10001426 	beq	r2,zero,814afc <__call_exitprocs+0x16c>
  814aac:	90804117 	ldw	r2,260(r18)
  814ab0:	1884703a 	and	r2,r3,r2
  814ab4:	10000c1e 	bne	r2,zero,814ae8 <__call_exitprocs+0x158>
  814ab8:	2105883a 	add	r2,r4,r4
  814abc:	1485883a 	add	r2,r2,r18
  814ac0:	11400017 	ldw	r5,0(r2)
  814ac4:	e009883a 	mov	r4,fp
  814ac8:	303ee83a 	callr	r6
  814acc:	88800117 	ldw	r2,4(r17)
  814ad0:	98bfc81e 	bne	r19,r2,8149f4 <__call_exitprocs+0x64>
  814ad4:	b8800017 	ldw	r2,0(r23)
  814ad8:	147fd526 	beq	r2,r17,814a30 <__call_exitprocs+0xa0>
  814adc:	003fc506 	br	8149f4 <__call_exitprocs+0x64>
  814ae0:	8c000115 	stw	r16,4(r17)
  814ae4:	003fea06 	br	814a90 <__call_exitprocs+0x100>
  814ae8:	2105883a 	add	r2,r4,r4
  814aec:	1485883a 	add	r2,r2,r18
  814af0:	11000017 	ldw	r4,0(r2)
  814af4:	303ee83a 	callr	r6
  814af8:	003ff406 	br	814acc <__call_exitprocs+0x13c>
  814afc:	303ee83a 	callr	r6
  814b00:	003ff206 	br	814acc <__call_exitprocs+0x13c>
  814b04:	88800117 	ldw	r2,4(r17)
  814b08:	1000081e 	bne	r2,zero,814b2c <__call_exitprocs+0x19c>
  814b0c:	89000017 	ldw	r4,0(r17)
  814b10:	20000726 	beq	r4,zero,814b30 <__call_exitprocs+0x1a0>
  814b14:	b9000015 	stw	r4,0(r23)
  814b18:	8809883a 	mov	r4,r17
  814b1c:	00000000 	call	0 <__reset-0x800000>
  814b20:	bc400017 	ldw	r17,0(r23)
  814b24:	883fb71e 	bne	r17,zero,814a04 <__call_exitprocs+0x74>
  814b28:	003fc506 	br	814a40 <__call_exitprocs+0xb0>
  814b2c:	89000017 	ldw	r4,0(r17)
  814b30:	882f883a 	mov	r23,r17
  814b34:	2023883a 	mov	r17,r4
  814b38:	883fb21e 	bne	r17,zero,814a04 <__call_exitprocs+0x74>
  814b3c:	003fc006 	br	814a40 <__call_exitprocs+0xb0>

00814b40 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814b40:	defffd04 	addi	sp,sp,-12
  814b44:	df000215 	stw	fp,8(sp)
  814b48:	df000204 	addi	fp,sp,8
  814b4c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814b50:	e0bfff17 	ldw	r2,-4(fp)
  814b54:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814b58:	e0bffe17 	ldw	r2,-8(fp)
  814b5c:	1005003a 	cmpeq	r2,r2,zero
  814b60:	1000021e 	bne	r2,zero,814b6c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814b64:	002af070 	cmpltui	zero,zero,43969
  814b68:	00000106 	br	814b70 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814b6c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814b70:	e037883a 	mov	sp,fp
  814b74:	df000017 	ldw	fp,0(sp)
  814b78:	dec00104 	addi	sp,sp,4
  814b7c:	f800283a 	ret

00814b80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814b80:	defffd04 	addi	sp,sp,-12
  814b84:	dfc00215 	stw	ra,8(sp)
  814b88:	df000115 	stw	fp,4(sp)
  814b8c:	df000104 	addi	fp,sp,4
  814b90:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814b94:	e13fff17 	ldw	r4,-4(fp)
  814b98:	0814b400 	call	814b40 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814b9c:	003fff06 	br	814b9c <_exit+0x1c>
  814ba0:	0081498c 	andi	r2,zero,1318
