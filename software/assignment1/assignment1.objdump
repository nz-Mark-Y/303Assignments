
assignment1.elf:     file format elf32-littlenios2
assignment1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000151a8 memsz 0x000151a8 flags r-x
    LOAD off    0x000161c8 vaddr 0x008151c8 paddr 0x00816ea4 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00018b80 vaddr 0x00818b80 paddr 0x00818b80 align 2**12
         filesz 0x00000000 memsz 0x00000450 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014920  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006f4  00814ad4  00814ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  008151c8  00816ea4  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000450  00818b80  00818b80  00018b80  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017ea4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00017ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c21  00000000  00000000  000190c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000369a0  00000000  00000000  0001ace1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b9f2  00000000  00000000  00051681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d778  00000000  00000000  0005d073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025a0  00000000  00000000  0007a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d36  00000000  00000000  0007cd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012c20  00000000  00000000  0007fac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000926e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00092748  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000974c5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000974c8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000974cb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000974cc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000974cd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000974d1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000974d5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000974d9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000974e2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000974eb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000974f4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  000974fa  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062390  00000000  00000000  0009752d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814ad4 l    d  .rodata	00000000 .rodata
008151c8 l    d  .rwdata	00000000 .rwdata
00818b80 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 trafficController.c
00818b80 l     O .bss	00000004 tlc_timer_event
00818b84 l     O .bss	00000004 camera_timer_event
00818b88 l     O .bss	00000004 pedestrianNS
00818b8c l     O .bss	00000004 pedestrianEW
00818b90 l     O .bss	00000004 newTimeoutValues
00818b94 l     O .bss	00000004 vehicle_detected
008151c8 l     O .rwdata	00000018 timeout
008151e0 l     O .rwdata	0000001c timeout_buf
00818b98 l     O .bss	00000004 valueCount
008151fc l     O .rwdata	00000018 tempBuffer
00816e54 l     O .rwdata	00000006 traffic_lights
00818b9c l     O .bss	00000004 mode
00815214 l     O .rwdata	00000010 proc_state
00818ba0 l     O .bss	00000004 camera_count
00818be8 l     O .bss	00000018 tlc_timer
00818ba4 l     O .bss	00000004 state.3067
00818ba8 l     O .bss	00000004 c
00818bac l     O .bss	00000004 timeoutValue
00818c00 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801404 l     F .text	00000058 std
00801510 l     F .text	00000008 __fp_lock
00801518 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815224 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00803c6c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00803e2c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804100 l     F .text	00000058 __sprint_r
00814be8 l     O .rodata	00000010 blanks.3452
00814bd8 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814c00 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814d28 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
008079cc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816e74 l     O .rwdata	00000004 charset
00814ec8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
00815010 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080a9ac l     F .text	00000048 match
00815a4c l     O .rwdata	00000014 fpi.1950
0081502c l     O .rodata	00000028 tinytens
00815a38 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080ce24 l     F .text	00000024 htinit
0080ceb0 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d718 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080e7dc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fa04 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00810630 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810690 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810790 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810a70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810b50 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810cac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810db8 l     F .text	000000dc alt_file_locked
0081101c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0081119c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816e94 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008115dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815c08 l     O .rwdata	00001060 jtag_uart
00816c68 l     O .rwdata	00000120 lcd
00816d88 l     O .rwdata	000000c4 uart
00811704 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811944 l     F .text	00000228 altera_avalon_jtag_uart_irq
00811b6c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816ea0 l     O .rwdata	00000004 colstart
008121e8 l     F .text	000000b8 lcd_write_command
008122a0 l     F .text	000000d4 lcd_write_data
00812374 l     F .text	000000c4 lcd_clear_screen
00812438 l     F .text	000001ec lcd_repaint_screen
00812624 l     F .text	000000c8 lcd_scroll_up
008126ec l     F .text	000002d0 lcd_handle_escape
00812ec8 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813128 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008133e8 l     F .text	0000009c altera_avalon_uart_irq
00813484 l     F .text	000000e0 altera_avalon_uart_rxirq
00813564 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813950 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813b78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813cd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814360 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008148bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814a70 l     F .text	00000040 alt_sim_halt
00809b58 g     F .text	00000094 _mprec_log10
00800248 g     F .text	00000068 lcd_set_mode
00809c44 g     F .text	00000088 __any_on
00809474 g     F .text	00000070 _isatty_r
00814fe8 g     O .rodata	00000028 __mprec_tinytens
00810d0c g     F .text	0000006c alt_main
00818d40 g     O .bss	00000100 alt_irq
008095d4 g     F .text	00000078 _lseek_r
00816ea4 g       *ABS*	00000000 __flash_rwdata_start
00809198 g     F .text	000000a0 __sflags
0080f2fc g     F .text	00000088 __eqdf2
00818fd0 g       *ABS*	00000000 __alt_heap_start
00800dc0 g     F .text	00000060 printToUART
0080343c g     F .text	00000044 printf
00803f48 g     F .text	00000068 __sseek
0080146c g     F .text	000000a4 __sinit
00809534 g     F .text	00000084 _setlocale_r
0080156c g     F .text	00000068 __sfmoreglue
0080cd54 g     F .text	0000001c ungetc
00810d98 g     F .text	00000020 __malloc_unlock
0080a9f4 g     F .text	000014e4 _strtod_r
00818bb0 g     O .bss	00000004 fp
0080324c g     F .text	000000e0 memmove
0080155c g     F .text	00000010 _cleanup
00809ccc g     F .text	000000bc _Balloc
00800bb0 g     F .text	00000020 buffer_timeout
0080f40c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802164 g     F .text	00000074 _fstat_r
00818bb4 g     O .bss	00000004 errno
00803cd4 g     F .text	00000014 __srget
008076a8 g     F .text	00000024 __svfscanf
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080fd40 g     F .text	0000002c __make_fp
00818bd8 g     O .bss	00000004 alt_argv
0081ee4c g       *ABS*	00000000 _gp
0081449c g     F .text	00000030 usleep
008003b8 g     F .text	0000002c handle_mode_button
00800560 g     F .text	00000088 tlc_timer_isr
00815a88 g     O .rwdata	00000180 alt_fd_list
00813df8 g     F .text	00000094 alt_find_dev
008031ac g     F .text	000000a0 memcpy
0080d764 g     F .text	00000248 __hexnan
00800bf0 g     F .text	000000b8 camera_timer_isr
00801550 g     F .text	0000000c _cleanup_r
0080f62c g     F .text	000000f8 __floatsidf
00814424 g     F .text	00000078 alt_io_redirect
0080f51c g     F .text	00000088 __ltdf2
00814ad4 g       *ABS*	00000000 __DTOR_END__
008096cc g     F .text	00000040 mbrtowc
008076cc g     F .text	00000068 _vfscanf_r
00809aa8 g     F .text	000000b0 __ratio
00800730 g     F .text	000001dc pedestrian_tlc
00811d84 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803480 g     F .text	00000034 _printf_r
0080fb40 g     F .text	00000008 __udivsi3
008109b0 g     F .text	000000c0 isatty
008094e4 g     F .text	0000002c iswspace
00814ef8 g     O .rodata	000000c8 __mprec_tens
00809510 g     F .text	00000008 __locale_charset
0080da44 g     F .text	000000a4 __fixunsdfsi
00814638 g     F .text	00000090 alt_icache_flush
00818bb8 g     O .bss	00000004 __malloc_top_pad
0080c7c8 g     F .text	00000024 strtoul
00816e70 g     O .rwdata	00000004 __mb_cur_max
00809518 g     F .text	0000000c _localeconv_r
0080c7ec g     F .text	000002f0 _strtoull_r
0080a3c4 g     F .text	0000003c __i2b
008021d8 g     F .text	0000049c __sfvwrite_r
00803ce8 g     F .text	00000070 _sbrk_r
0080090c g     F .text	000000b4 configurable_tlc
0080a740 g     F .text	00000078 _read_r
00815a2c g     O .rwdata	0000000c __lc_ctype
00816e88 g     O .rwdata	00000004 alt_max_fd
00810080 g     F .text	00000138 __unpack_d
00800f88 g     F .text	00000110 _fclose_r
008012a8 g     F .text	00000034 fflush
00800e20 g     F .text	0000003c handle_vehicle_button
00818bbc g     O .bss	00000004 __malloc_max_sbrked_mem
008107f0 g     F .text	000001c0 alt_irq_register
00801374 g     F .text	00000090 _fgetc_r
0080ec6c g     F .text	00000074 __adddf3
0080e674 g     F .text	00000078 __nesf2
00809988 g     F .text	00000120 __b2d
0080e0c4 g     F .text	000005b0 __umoddi3
00810bbc g     F .text	000000f0 lseek
00816e60 g     O .rwdata	00000004 _global_impure_ptr
008034b4 g     F .text	000005f4 _realloc_r
00818fd0 g       *ABS*	00000000 __bss_end
00814268 g     F .text	000000f8 alt_iic_isr_register
008113b0 g     F .text	0000010c alt_tick
00818c40 g     O .bss	00000100 __hexdig
0080dae8 g     F .text	000005dc __udivdi3
00814fc0 g     O .rodata	00000028 __mprec_bigtens
0080a620 g     F .text	00000120 __s2b
0080f870 g     F .text	00000194 __floatunsidf
008098a8 g     F .text	00000060 __mcmp
00813320 g     F .text	000000c8 altera_avalon_uart_init
00816e6c g     O .rwdata	00000004 __ctype_ptr
00801538 g     F .text	00000018 __fp_lock_all
00814220 g     F .text	00000048 alt_ic_irq_enabled
00811318 g     F .text	00000098 alt_alarm_stop
00800ca8 g     F .text	00000118 camera_tlc
0080c25c g     F .text	00000024 strtol
00818bd0 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815a60 g     O .rwdata	00000028 alt_dev_null
0080fbd0 g     F .text	000000c8 __unpack_f
00813bd8 g     F .text	00000044 alt_dcache_flush_all
00809774 g     F .text	00000070 __hi0bits
0080f724 g     F .text	000000d8 __fixdfsi
0080bffc g     F .text	0000001c strtod
00816ea4 g       *ABS*	00000000 __ram_rwdata_end
00816e80 g     O .rwdata	00000008 alt_dev_list
008114bc g     F .text	00000120 write
0080e6ec g     F .text	00000078 __gtsf2
008151c8 g       *ABS*	00000000 __ram_rodata_end
008106bc g     F .text	000000d4 fstat
008017d4 g     F .text	0000002c fprintf
0080f5a4 g     F .text	00000088 __ledf2
0080a500 g     F .text	00000120 __pow5mult
00818bc4 g     O .bss	00000004 __nlocale_changed
0080fb48 g     F .text	00000008 __umodsi3
00818fd0 g       *ABS*	00000000 end
00810280 g     F .text	00000160 __pack_f
008129bc g     F .text	0000050c altera_avalon_lcd_16207_write
008139b0 g     F .text	000001c8 altera_avalon_uart_write
00802140 g     F .text	00000024 fseek
00811884 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814ad0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813198 g     F .text	00000090 alt_avalon_timer_sc_init
00813280 g     F .text	00000058 altera_avalon_uart_write_fd
0080fb50 g     F .text	00000080 __clzsi2
008132d8 g     F .text	00000048 altera_avalon_uart_close_fd
00811fa8 g     F .text	00000240 altera_avalon_jtag_uart_write
0080145c g     F .text	00000004 __sfp_lock_acquire
008030c8 g     F .text	000000e4 memchr
00804158 g     F .text	00001eac ___vfprintf_internal_r
00803dcc g     F .text	00000060 _sprintf_r
008019f0 g     F .text	00000314 _free_r
008148c0 g     F .text	000001b0 __call_exitprocs
00803c88 g     F .text	0000004c __srget_r
00818bc8 g     O .bss	00000004 __mlocale_changed
00816e68 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818be0 g     O .bss	00000004 _alt_tick_rate
0080c280 g     F .text	00000318 _strtoll_r
00816e4c g     O .rwdata	00000005 chararray
0080a090 g     F .text	0000014c __lshift
00818be4 g     O .bss	00000004 _alt_nticks
0081107c g     F .text	00000120 read
00811670 g     F .text	00000094 alt_sys_init
008033c4 g     F .text	00000078 _open_r
00814788 g     F .text	00000134 __register_exitproc
0080a1dc g     F .text	000001e8 __multiply
00811c1c g     F .text	00000074 altera_avalon_jtag_uart_close
008151c8 g       *ABS*	00000000 __ram_rwdata_start
00814ad4 g       *ABS*	00000000 __ram_rodata_start
00818c18 g     O .bss	00000028 __malloc_current_mallinfo
00809d88 g     F .text	0000017c __d2b
0081173c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c598 g     F .text	00000230 _strtoul_r
00813fac g     F .text	000000b8 alt_get_fd
008144ec g     F .text	0000014c alt_busy_sleep
008101b8 g     F .text	000000c8 __fpcmp_parts_d
0080795c g     F .text	00000070 _close_r
00814714 g     F .text	00000074 memcmp
008117ec g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818fd0 g       *ABS*	00000000 __alt_stack_base
00811834 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803ebc g     F .text	00000084 sscanf
00807820 g     F .text	0000013c __swsetup_r
0080f0a4 g     F .text	00000258 __divdf3
008015d4 g     F .text	000000f0 __sfp
00809bec g     F .text	00000058 __copybits
00815624 g     O .rwdata	00000408 __malloc_av_
00801468 g     F .text	00000004 __sinit_lock_release
0080ece0 g     F .text	000003c4 __muldf3
0080402c g     F .text	00000060 __sread
00809434 g     F .text	00000040 fread
00813e8c g     F .text	00000120 alt_find_file
00813c1c g     F .text	000000b4 alt_dev_llist_insert
00810d78 g     F .text	00000020 __malloc_lock
00801800 g     F .text	00000034 _fprintf_r
0081125c g     F .text	000000bc sbrk
008010ac g     F .text	000001fc _fflush_r
0080cd70 g     F .text	000000b4 _calloc_r
008017b8 g     F .text	0000001c fopen
00818b80 g       *ABS*	00000000 __bss_start
0080332c g     F .text	00000098 memset
00800e5c g     F .text	0000012c main
00818bdc g     O .bss	00000004 alt_envp
00818bc0 g     O .bss	00000004 __malloc_max_total_mem
00811794 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080e764 g     F .text	00000078 __ltsf2
00809238 g     F .text	000001fc _fread_r
00812f94 g     F .text	0000013c altera_avalon_lcd_16207_init
008009c0 g     F .text	00000048 config_tlc
00803f40 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00801098 g     F .text	00000014 fclose
0080c018 g     F .text	00000244 _strtol_r
0080f7fc g     F .text	00000074 __truncdfsf2
00818e40 g     O .bss	00000190 _atexit0
008002b0 g     F .text	00000108 buttons_driver
00807be4 g     F .text	000015b4 _dtoa_r
00802988 g     F .text	00000740 _malloc_r
00816e8c g     O .rwdata	00000004 alt_errno
0080cadc g     F .text	000000dc __submore
008005e8 g     F .text	000000e4 NSEW_ped_isr
0080273c g     F .text	000000b8 _fwalk
0080970c g     F .text	00000040 _mbtowc_r
0080fa80 g     F .text	00000060 __divsi3
00815070 g     O .rodata	00000014 __thenan_df
008018c4 g     F .text	0000012c _malloc_trim_r
00800bd0 g     F .text	00000020 update_timeout
00814ad4 g       *ABS*	00000000 __CTOR_END__
0080a8f0 g     F .text	000000bc strcmp
00814ad4 g       *ABS*	00000000 __flash_rodata_start
00814ad4 g       *ABS*	00000000 __DTOR_LIST__
0080f384 g     F .text	00000088 __nedf2
0081163c g     F .text	00000034 alt_irq_init
008111fc g     F .text	00000060 alt_release_fd
008012dc g     F .text	00000098 fgetc
00803d58 g     F .text	00000074 sprintf
00815084 g     O .rodata	00000100 __clz_tab
00818bcc g     O .bss	00000004 _PathLocale
0080bed8 g     F .text	00000124 strtof
008146c8 g     F .text	00000014 atexit
008077a8 g     F .text	00000078 _write_r
008095b8 g     F .text	0000001c setlocale
0080a8e8 g     F .text	00000008 nanf
00816e5c g     O .rwdata	00000004 _impure_ptr
00818bd4 g     O .bss	00000004 alt_argc
0080964c g     F .text	00000080 _mbrtowc_r
00813d94 g     F .text	00000064 _do_dtors
00801d04 g     F .text	0000043c _fseek_r
00800a08 g     F .text	000001a8 timeout_data_handler
00803aa8 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809908 g     F .text	00000080 __ulp
0080a7b8 g     F .text	00000040 __isinfd
00801520 g     F .text	00000018 __fp_unlock_all
008130d0 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00816e78 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00809524 g     F .text	00000010 localeconv
00814094 g     F .text	00000050 alt_ic_isr_register
0080ce48 g     F .text	00000068 __hexdig_init
00803e34 g     F .text	00000088 _sscanf_r
00816ea4 g       *ABS*	00000000 _edata
00813228 g     F .text	00000058 altera_avalon_uart_read_fd
00818fd0 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00807734 g     F .text	00000074 vfscanf
00811c90 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00801834 g     F .text	00000074 _fputs_r
00814180 g     F .text	000000a0 alt_ic_irq_disable
00803fb0 g     F .text	0000007c __swrite
00816e64 g     O .rwdata	00000004 __malloc_trim_threshold
008144cc g     F .text	00000020 altera_nios2_qsys_irq_init
008146dc g     F .text	00000038 exit
00802674 g     F .text	000000c8 _fwalk_reent
00809f04 g     F .text	0000018c __mdiff
008003e4 g     F .text	0000017c simple_tlc
0080fae0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801460 g     F .text	00000004 __sfp_lock_release
0080a828 g     F .text	000000c0 __sccl
00800200 g     F .text	00000048 init_tlc
00814c24 g     O .rodata	00000101 _ctype_
008136c0 g     F .text	00000060 altera_avalon_uart_close
0080fc98 g     F .text	000000a8 __fpcmp_parts_f
008016c4 g     F .text	000000f4 _fopen_r
00814ab0 g     F .text	00000020 _exit
0080a7f8 g     F .text	00000030 __isnand
008103e0 g     F .text	00000154 alt_alarm_start
0080d9ac g     F .text	00000098 __muldi3
008027f4 g     F .text	00000194 __smakebuf_r
0080408c g     F .text	00000074 strlen
00810e94 g     F .text	00000188 open
0080f494 g     F .text	00000088 __gedf2
0080cf60 g     F .text	000007b8 __gethex
00814064 g     F .text	00000030 alt_icache_flush_all
008018a8 g     F .text	0000001c fputs
00816e90 g     O .rwdata	00000004 alt_priority_mask
008140e4 g     F .text	0000009c alt_ic_irq_enable
00806004 g     F .text	00000024 __vfprintf_internal
00813720 g     F .text	00000230 altera_avalon_uart_read
0080ebec g     F .text	00000080 __subdf3
008097e4 g     F .text	000000c4 __lo0bits
00806028 g     F .text	00001680 __svfscanf_r
00816e98 g     O .rwdata	00000008 alt_alarm_list
0080cbb8 g     F .text	0000019c _ungetc_r
00813d30 g     F .text	00000064 _do_ctors
00810534 g     F .text	000000fc close
008006cc g     F .text	00000064 init_buttons_pio
00810ad0 g     F .text	00000080 alt_load
0080fd6c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00801464 g     F .text	00000004 __sinit_lock_acquire
0080a400 g     F .text	00000100 __multadd
0080974c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e35004 	addi	r3,r3,-29376
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e35004 	addi	r3,r3,-29376
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bb9314 	ori	gp,gp,61004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a2e014 	ori	r2,r2,35712

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e3f414 	ori	r3,r3,36816

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0810ad00 	call	810ad0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0810d0c0 	call	810d0c <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1}; // Process states: use -1 as initialisation state
static int camera_count = 0;

// Code =======================================
// Initialise the traffic light controller for all modes
void init_tlc() {
  800200:	defffd04 	addi	sp,sp,-12
  800204:	dfc00215 	stw	ra,8(sp)
  800208:	df000115 	stw	fp,4(sp)
  80020c:	df000104 	addi	fp,sp,4
	void* timerContext = (void*) mode;
  800210:	d0a75417 	ldw	r2,-25264(gp)
  800214:	e0bfff15 	stw	r2,-4(fp)
	alt_alarm_start(&tlc_timer, 1000, tlc_timer_isr, timerContext);
  800218:	010020b4 	movhi	r4,130
  80021c:	2122fa04 	addi	r4,r4,-29720
  800220:	0140fa04 	movi	r5,1000
  800224:	01802034 	movhi	r6,128
  800228:	31815804 	addi	r6,r6,1376
  80022c:	e1ffff17 	ldw	r7,-4(fp)
  800230:	08103e00 	call	8103e0 <alt_alarm_start>
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

00800248 <lcd_set_mode>:

/* DESCRIPTION: Writes the mode to the LCD screen
 * PARAMETER:   mode - the current mode
 * RETURNS:     none
 */
void lcd_set_mode(unsigned int mode, FILE* lcd) {
  800248:	defffc04 	addi	sp,sp,-16
  80024c:	dfc00315 	stw	ra,12(sp)
  800250:	df000215 	stw	fp,8(sp)
  800254:	df000204 	addi	fp,sp,8
  800258:	e13ffe15 	stw	r4,-8(fp)
  80025c:	e17fff15 	stw	r5,-4(fp)
	if(lcd != NULL) {
  800260:	e0bfff17 	ldw	r2,-4(fp)
  800264:	1005003a 	cmpeq	r2,r2,zero
  800268:	10000c1e 	bne	r2,zero,80029c <lcd_set_mode+0x54>
		#define ESC 27
		#define CLEAR_LCD_STRING "[2J"
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  80026c:	e13fff17 	ldw	r4,-4(fp)
  800270:	01402074 	movhi	r5,129
  800274:	2952b504 	addi	r5,r5,19156
  800278:	018006c4 	movi	r6,27
  80027c:	01c02074 	movhi	r7,129
  800280:	39d2b704 	addi	r7,r7,19164
  800284:	08017d40 	call	8017d4 <fprintf>
		fprintf(lcd, "Mode: %d\n",mode);
  800288:	e13fff17 	ldw	r4,-4(fp)
  80028c:	01402074 	movhi	r5,129
  800290:	2952b804 	addi	r5,r5,19168
  800294:	e1bffe17 	ldw	r6,-8(fp)
  800298:	08017d40 	call	8017d4 <fprintf>
	}
}
  80029c:	e037883a 	mov	sp,fp
  8002a0:	dfc00117 	ldw	ra,4(sp)
  8002a4:	df000017 	ldw	fp,0(sp)
  8002a8:	dec00204 	addi	sp,sp,8
  8002ac:	f800283a 	ret

008002b0 <buttons_driver>:

/* DESCRIPTION: Performs button-press detection and debouncing
 * PARAMETER:   button - referenced argument to indicate the state of the button
 * RETURNS:     none
 */
void buttons_driver(unsigned int* button) {
  8002b0:	defffd04 	addi	sp,sp,-12
  8002b4:	dfc00215 	stw	ra,8(sp)
  8002b8:	df000115 	stw	fp,4(sp)
  8002bc:	df000104 	addi	fp,sp,4
  8002c0:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x08) == 0) { // KEY 3
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842804 	addi	r2,r2,4256
  8002cc:	10800037 	ldwio	r2,0(r2)
  8002d0:	1080020c 	andi	r2,r2,8
  8002d4:	1004c03a 	cmpne	r2,r2,zero
  8002d8:	10002b1e 	bne	r2,zero,800388 <buttons_driver+0xd8>
		if ((proc_state[*button] == 0) || (proc_state[*button] == 3)) {
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	00c02074 	movhi	r3,129
  8002e8:	18d48504 	addi	r3,r3,21012
  8002ec:	1085883a 	add	r2,r2,r2
  8002f0:	1085883a 	add	r2,r2,r2
  8002f4:	10c5883a 	add	r2,r2,r3
  8002f8:	10800017 	ldw	r2,0(r2)
  8002fc:	1005003a 	cmpeq	r2,r2,zero
  800300:	10000a1e 	bne	r2,zero,80032c <buttons_driver+0x7c>
  800304:	e0bfff17 	ldw	r2,-4(fp)
  800308:	10800017 	ldw	r2,0(r2)
  80030c:	00c02074 	movhi	r3,129
  800310:	18d48504 	addi	r3,r3,21012
  800314:	1085883a 	add	r2,r2,r2
  800318:	1085883a 	add	r2,r2,r2
  80031c:	10c5883a 	add	r2,r2,r3
  800320:	10800017 	ldw	r2,0(r2)
  800324:	108000d8 	cmpnei	r2,r2,3
  800328:	1000171e 	bne	r2,zero,800388 <buttons_driver+0xd8>
			if (*button < 4) {
  80032c:	e0bfff17 	ldw	r2,-4(fp)
  800330:	10800017 	ldw	r2,0(r2)
  800334:	10800128 	cmpgeui	r2,r2,4
  800338:	1000061e 	bne	r2,zero,800354 <buttons_driver+0xa4>
				*button = *button + 1;
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	10c00044 	addi	r3,r2,1
  800348:	e0bfff17 	ldw	r2,-4(fp)
  80034c:	10c00015 	stw	r3,0(r2)
  800350:	00000206 	br	80035c <buttons_driver+0xac>
			} else {
				*button = 0;
  800354:	e0bfff17 	ldw	r2,-4(fp)
  800358:	10000015 	stw	zero,0(r2)
			}
			proc_state[*button] = -1;
  80035c:	e0bfff17 	ldw	r2,-4(fp)
  800360:	10800017 	ldw	r2,0(r2)
  800364:	00c02074 	movhi	r3,129
  800368:	18d48504 	addi	r3,r3,21012
  80036c:	1085883a 	add	r2,r2,r2
  800370:	1085883a 	add	r2,r2,r2
  800374:	10c7883a 	add	r3,r2,r3
  800378:	00bfffc4 	movi	r2,-1
  80037c:	18800015 	stw	r2,0(r3)
			handle_mode_button(button);
  800380:	e13fff17 	ldw	r4,-4(fp)
  800384:	08003b80 	call	8003b8 <handle_mode_button>
		}
	}

	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x04) == 0) { // KEY 2
  800388:	00804074 	movhi	r2,257
  80038c:	10842804 	addi	r2,r2,4256
  800390:	10800037 	ldwio	r2,0(r2)
  800394:	1080010c 	andi	r2,r2,4
  800398:	1004c03a 	cmpne	r2,r2,zero
  80039c:	1000011e 	bne	r2,zero,8003a4 <buttons_driver+0xf4>
		handle_vehicle_button();
  8003a0:	0800e200 	call	800e20 <handle_vehicle_button>
	}
}
  8003a4:	e037883a 	mov	sp,fp
  8003a8:	dfc00117 	ldw	ra,4(sp)
  8003ac:	df000017 	ldw	fp,0(sp)
  8003b0:	dec00204 	addi	sp,sp,8
  8003b4:	f800283a 	ret

008003b8 <handle_mode_button>:

/* DESCRIPTION: Updates the ID of the task to be executed and the 7-segment display
 * PARAMETER:   buttonState - current button state
 * RETURNS:     none
 */
void handle_mode_button(unsigned int* buttonState) {
  8003b8:	defffe04 	addi	sp,sp,-8
  8003bc:	df000115 	stw	fp,4(sp)
  8003c0:	df000104 	addi	fp,sp,4
  8003c4:	e13fff15 	stw	r4,-4(fp)
	mode = *buttonState;
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	10800017 	ldw	r2,0(r2)
  8003d0:	d0a75415 	stw	r2,-25264(gp)
	// Update Mode-display
}
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	df000017 	ldw	fp,0(sp)
  8003dc:	dec00104 	addi	sp,sp,4
  8003e0:	f800283a 	ret

008003e4 <simple_tlc>:

/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state) {
  8003e4:	defffd04 	addi	sp,sp,-12
  8003e8:	dfc00215 	stw	ra,8(sp)
  8003ec:	df000115 	stw	fp,4(sp)
  8003f0:	df000104 	addi	fp,sp,4
  8003f4:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8003f8:	e0bfff17 	ldw	r2,-4(fp)
  8003fc:	10800017 	ldw	r2,0(r2)
  800400:	10bfffd8 	cmpnei	r2,r2,-1
  800404:	10000b1e 	bne	r2,zero,800434 <simple_tlc+0x50>
		// Process initialisation state
		init_tlc();
  800408:	08002000 	call	800200 <init_tlc>
		(*state)++;
  80040c:	e0bfff17 	ldw	r2,-4(fp)
  800410:	10800017 	ldw	r2,0(r2)
  800414:	10c00044 	addi	r3,r2,1
  800418:	e0bfff17 	ldw	r2,-4(fp)
  80041c:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);//both traffic lights will be red by default
  800420:	00c04074 	movhi	r3,257
  800424:	18c41804 	addi	r3,r3,4192
  800428:	00800904 	movi	r2,36
  80042c:	18800035 	stwio	r2,0(r3)
		return;
  800430:	00004606 	br	80054c <simple_tlc+0x168>
	// If the timeout has occurred
	/*
		// Increase state number (within bounds)
		// Restart timer with new timeout value
	*/
	if (tlc_timer_event == 1) {
  800434:	d0a74d17 	ldw	r2,-25292(gp)
  800438:	10800058 	cmpnei	r2,r2,1
  80043c:	1000431e 	bne	r2,zero,80054c <simple_tlc+0x168>
		if (*state == 0) { // R, R state
  800440:	e0bfff17 	ldw	r2,-4(fp)
  800444:	10800017 	ldw	r2,0(r2)
  800448:	1004c03a 	cmpne	r2,r2,zero
  80044c:	1000081e 	bne	r2,zero,800470 <simple_tlc+0x8c>
			*state = 1; // G, R
  800450:	e0ffff17 	ldw	r3,-4(fp)
  800454:	00800044 	movi	r2,1
  800458:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);			
  80045c:	00c04074 	movhi	r3,257
  800460:	18c41804 	addi	r3,r3,4192
  800464:	00801304 	movi	r2,76
  800468:	18800035 	stwio	r2,0(r3)
  80046c:	00003606 	br	800548 <simple_tlc+0x164>
		} else if (*state == 1) {
  800470:	e0bfff17 	ldw	r2,-4(fp)
  800474:	10800017 	ldw	r2,0(r2)
  800478:	10800058 	cmpnei	r2,r2,1
  80047c:	1000081e 	bne	r2,zero,8004a0 <simple_tlc+0xbc>
			*state = 2; // Y, R
  800480:	e0ffff17 	ldw	r3,-4(fp)
  800484:	00800084 	movi	r2,2
  800488:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  80048c:	00c04074 	movhi	r3,257
  800490:	18c41804 	addi	r3,r3,4192
  800494:	00800504 	movi	r2,20
  800498:	18800035 	stwio	r2,0(r3)
  80049c:	00002a06 	br	800548 <simple_tlc+0x164>
		} else if (*state == 2) {
  8004a0:	e0bfff17 	ldw	r2,-4(fp)
  8004a4:	10800017 	ldw	r2,0(r2)
  8004a8:	10800098 	cmpnei	r2,r2,2
  8004ac:	1000081e 	bne	r2,zero,8004d0 <simple_tlc+0xec>
			*state = 3; // R, R
  8004b0:	e0ffff17 	ldw	r3,-4(fp)
  8004b4:	008000c4 	movi	r2,3
  8004b8:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8004bc:	00c04074 	movhi	r3,257
  8004c0:	18c41804 	addi	r3,r3,4192
  8004c4:	00800904 	movi	r2,36
  8004c8:	18800035 	stwio	r2,0(r3)
  8004cc:	00001e06 	br	800548 <simple_tlc+0x164>
		} else if (*state == 3) {
  8004d0:	e0bfff17 	ldw	r2,-4(fp)
  8004d4:	10800017 	ldw	r2,0(r2)
  8004d8:	108000d8 	cmpnei	r2,r2,3
  8004dc:	1000081e 	bne	r2,zero,800500 <simple_tlc+0x11c>
			*state = 4; // R, G
  8004e0:	e0ffff17 	ldw	r3,-4(fp)
  8004e4:	00800104 	movi	r2,4
  8004e8:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);			
  8004ec:	00c04074 	movhi	r3,257
  8004f0:	18c41804 	addi	r3,r3,4192
  8004f4:	00802844 	movi	r2,161
  8004f8:	18800035 	stwio	r2,0(r3)
  8004fc:	00001206 	br	800548 <simple_tlc+0x164>
		} else if (*state == 4) {
  800500:	e0bfff17 	ldw	r2,-4(fp)
  800504:	10800017 	ldw	r2,0(r2)
  800508:	10800118 	cmpnei	r2,r2,4
  80050c:	1000081e 	bne	r2,zero,800530 <simple_tlc+0x14c>
			*state = 5; // R, Y
  800510:	e0ffff17 	ldw	r3,-4(fp)
  800514:	00800144 	movi	r2,5
  800518:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  80051c:	00c04074 	movhi	r3,257
  800520:	18c41804 	addi	r3,r3,4192
  800524:	00800884 	movi	r2,34
  800528:	18800035 	stwio	r2,0(r3)
  80052c:	00000606 	br	800548 <simple_tlc+0x164>
		} else {
			*state = 0; // R, R
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800538:	00c04074 	movhi	r3,257
  80053c:	18c41804 	addi	r3,r3,4192
  800540:	00800904 	movi	r2,36
  800544:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  800548:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  80054c:	e037883a 	mov	sp,fp
  800550:	dfc00117 	ldw	ra,4(sp)
  800554:	df000017 	ldw	fp,0(sp)
  800558:	dec00204 	addi	sp,sp,8
  80055c:	f800283a 	ret

00800560 <tlc_timer_isr>:
/* DESCRIPTION: Handles the traffic light timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context) {
  800560:	defffb04 	addi	sp,sp,-20
  800564:	dfc00415 	stw	ra,16(sp)
  800568:	df000315 	stw	fp,12(sp)
  80056c:	df000304 	addi	fp,sp,12
  800570:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  800574:	e0bfff17 	ldw	r2,-4(fp)
  800578:	e0bffe15 	stw	r2,-8(fp)
	int	nextTimeout = timeout[proc_state[*trigger]];
  80057c:	e0bffe17 	ldw	r2,-8(fp)
  800580:	10800017 	ldw	r2,0(r2)
  800584:	00c02074 	movhi	r3,129
  800588:	18d48504 	addi	r3,r3,21012
  80058c:	1085883a 	add	r2,r2,r2
  800590:	1085883a 	add	r2,r2,r2
  800594:	10c5883a 	add	r2,r2,r3
  800598:	10800017 	ldw	r2,0(r2)
  80059c:	00c02074 	movhi	r3,129
  8005a0:	18d47204 	addi	r3,r3,20936
  8005a4:	1085883a 	add	r2,r2,r2
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	10c5883a 	add	r2,r2,r3
  8005b0:	10800017 	ldw	r2,0(r2)
  8005b4:	e0bffd15 	stw	r2,-12(fp)
	printf("next timeout:%d\n", nextTimeout);
  8005b8:	01002074 	movhi	r4,129
  8005bc:	2112bb04 	addi	r4,r4,19180
  8005c0:	e17ffd17 	ldw	r5,-12(fp)
  8005c4:	080343c0 	call	80343c <printf>
	tlc_timer_event = 1;
  8005c8:	00800044 	movi	r2,1
  8005cc:	d0a74d15 	stw	r2,-25292(gp)
	return nextTimeout;
  8005d0:	e0bffd17 	ldw	r2,-12(fp)
}
  8005d4:	e037883a 	mov	sp,fp
  8005d8:	dfc00117 	ldw	ra,4(sp)
  8005dc:	df000017 	ldw	fp,0(sp)
  8005e0:	dec00204 	addi	sp,sp,8
  8005e4:	f800283a 	ret

008005e8 <NSEW_ped_isr>:
/* DESCRIPTION: Handles the NSEW pedestrian button interrupt
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id) {
  8005e8:	defffa04 	addi	sp,sp,-24
  8005ec:	dfc00515 	stw	ra,20(sp)
  8005f0:	df000415 	stw	fp,16(sp)
  8005f4:	df000404 	addi	fp,sp,16
  8005f8:	e13ffe15 	stw	r4,-8(fp)
  8005fc:	e17fff15 	stw	r5,-4(fp)
	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x01) == 0) { // KEY 0 = NS Pedestrian button
  800600:	00804074 	movhi	r2,257
  800604:	10842804 	addi	r2,r2,4256
  800608:	10800037 	ldwio	r2,0(r2)
  80060c:	1080004c 	andi	r2,r2,1
  800610:	1004c03a 	cmpne	r2,r2,zero
  800614:	1000111e 	bne	r2,zero,80065c <NSEW_ped_isr+0x74>
		volatile int* temp = (volatile int*) context;
  800618:	e0bffe17 	ldw	r2,-8(fp)
  80061c:	e0bffd15 	stw	r2,-12(fp)
		(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800620:	00804074 	movhi	r2,257
  800624:	10842b04 	addi	r2,r2,4268
  800628:	10c00037 	ldwio	r3,0(r2)
  80062c:	e0bffd17 	ldw	r2,-12(fp)
  800630:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  800634:	00804074 	movhi	r2,257
  800638:	10842b04 	addi	r2,r2,4268
  80063c:	10000035 	stwio	zero,0(r2)
		pedestrianNS = 1;
  800640:	00800044 	movi	r2,1
  800644:	d0a74f15 	stw	r2,-25284(gp)
		printf("button: %i\n", *temp);
  800648:	e0bffd17 	ldw	r2,-12(fp)
  80064c:	11400017 	ldw	r5,0(r2)
  800650:	01002074 	movhi	r4,129
  800654:	2112c004 	addi	r4,r4,19200
  800658:	080343c0 	call	80343c <printf>
	}

	if ((IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 0x02) == 0) {
  80065c:	00804074 	movhi	r2,257
  800660:	10842804 	addi	r2,r2,4256
  800664:	10800037 	ldwio	r2,0(r2)
  800668:	1080008c 	andi	r2,r2,2
  80066c:	1004c03a 	cmpne	r2,r2,zero
  800670:	1000111e 	bne	r2,zero,8006b8 <NSEW_ped_isr+0xd0>
		volatile int* temp = (volatile int*) context;
  800674:	e0bffe17 	ldw	r2,-8(fp)
  800678:	e0bffc15 	stw	r2,-16(fp)
		(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE); // KEY 1 = EW Pedestrian button
  80067c:	00804074 	movhi	r2,257
  800680:	10842b04 	addi	r2,r2,4268
  800684:	10c00037 	ldwio	r3,0(r2)
  800688:	e0bffc17 	ldw	r2,-16(fp)
  80068c:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); // clear the edge capture register
  800690:	00804074 	movhi	r2,257
  800694:	10842b04 	addi	r2,r2,4268
  800698:	10000035 	stwio	zero,0(r2)
		pedestrianEW = 1;
  80069c:	00800044 	movi	r2,1
  8006a0:	d0a75015 	stw	r2,-25280(gp)
		printf("button: %i\n", *temp);
  8006a4:	e0bffc17 	ldw	r2,-16(fp)
  8006a8:	11400017 	ldw	r5,0(r2)
  8006ac:	01002074 	movhi	r4,129
  8006b0:	2112c004 	addi	r4,r4,19200
  8006b4:	080343c0 	call	80343c <printf>
	}
}
  8006b8:	e037883a 	mov	sp,fp
  8006bc:	dfc00117 	ldw	ra,4(sp)
  8006c0:	df000017 	ldw	fp,0(sp)
  8006c4:	dec00204 	addi	sp,sp,8
  8006c8:	f800283a 	ret

008006cc <init_buttons_pio>:

/* DESCRIPTION: Initialise the interrupts for pedestrian buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void) {
  8006cc:	defffc04 	addi	sp,sp,-16
  8006d0:	dfc00315 	stw	ra,12(sp)
  8006d4:	df000215 	stw	fp,8(sp)
  8006d8:	df000204 	addi	fp,sp,8
	int buttonValue = 1;
  8006dc:	00800044 	movi	r2,1
  8006e0:	e0bfff15 	stw	r2,-4(fp)

	void* context_going_to_be_passed = (void*) &buttonValue; 								// cast before passing to ISR
  8006e4:	e0bfff04 	addi	r2,fp,-4
  8006e8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0); 										// clears the edge capture register
  8006ec:	00804074 	movhi	r2,257
  8006f0:	10842b04 	addi	r2,r2,4268
  8006f4:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3); 									// enable interrupts for all buttons
  8006f8:	00c04074 	movhi	r3,257
  8006fc:	18c42a04 	addi	r3,r3,4264
  800700:	008000c4 	movi	r2,3
  800704:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,context_going_to_be_passed, NSEW_ped_isr); 				// register the ISR
  800708:	01000104 	movi	r4,4
  80070c:	e17ffe17 	ldw	r5,-8(fp)
  800710:	01802034 	movhi	r6,128
  800714:	31817a04 	addi	r6,r6,1512
  800718:	08107f00 	call	8107f0 <alt_irq_register>
}
  80071c:	e037883a 	mov	sp,fp
  800720:	dfc00117 	ldw	ra,4(sp)
  800724:	df000017 	ldw	fp,0(sp)
  800728:	dec00204 	addi	sp,sp,8
  80072c:	f800283a 	ret

00800730 <pedestrian_tlc>:

/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state) {
  800730:	defffd04 	addi	sp,sp,-12
  800734:	dfc00215 	stw	ra,8(sp)
  800738:	df000115 	stw	fp,4(sp)
  80073c:	df000104 	addi	fp,sp,4
  800740:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800744:	e0bfff17 	ldw	r2,-4(fp)
  800748:	10800017 	ldw	r2,0(r2)
  80074c:	10bfffd8 	cmpnei	r2,r2,-1
  800750:	10000b1e 	bne	r2,zero,800780 <pedestrian_tlc+0x50>
		init_tlc();
  800754:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800758:	e0bfff17 	ldw	r2,-4(fp)
  80075c:	10800017 	ldw	r2,0(r2)
  800760:	10c00044 	addi	r3,r2,1
  800764:	e0bfff17 	ldw	r2,-4(fp)
  800768:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  80076c:	00c04074 	movhi	r3,257
  800770:	18c41804 	addi	r3,r3,4192
  800774:	00800904 	movi	r2,36
  800778:	18800035 	stwio	r2,0(r3)
		return;
  80077c:	00005e06 	br	8008f8 <pedestrian_tlc+0x1c8>
	}

	if (tlc_timer_event == 1) {
  800780:	d0a74d17 	ldw	r2,-25292(gp)
  800784:	10800058 	cmpnei	r2,r2,1
  800788:	10005b1e 	bne	r2,zero,8008f8 <pedestrian_tlc+0x1c8>
		if (*state == 0) { // R, R state
  80078c:	e0bfff17 	ldw	r2,-4(fp)
  800790:	10800017 	ldw	r2,0(r2)
  800794:	1004c03a 	cmpne	r2,r2,zero
  800798:	1000141e 	bne	r2,zero,8007ec <pedestrian_tlc+0xbc>
			if (pedestrianNS == 0) {
  80079c:	d0a74f17 	ldw	r2,-25284(gp)
  8007a0:	1004c03a 	cmpne	r2,r2,zero
  8007a4:	1000081e 	bne	r2,zero,8007c8 <pedestrian_tlc+0x98>
				*state = 1; // G, R
  8007a8:	e0ffff17 	ldw	r3,-4(fp)
  8007ac:	00800044 	movi	r2,1
  8007b0:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x0C);
  8007b4:	00c04074 	movhi	r3,257
  8007b8:	18c41804 	addi	r3,r3,4192
  8007bc:	00800304 	movi	r2,12
  8007c0:	18800035 	stwio	r2,0(r3)
  8007c4:	00004b06 	br	8008f4 <pedestrian_tlc+0x1c4>
			} else {
				*state = 1; // G, R
  8007c8:	e0ffff17 	ldw	r3,-4(fp)
  8007cc:	00800044 	movi	r2,1
  8007d0:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x4C);
  8007d4:	00c04074 	movhi	r3,257
  8007d8:	18c41804 	addi	r3,r3,4192
  8007dc:	00801304 	movi	r2,76
  8007e0:	18800035 	stwio	r2,0(r3)
				pedestrianNS = 0;
  8007e4:	d0274f15 	stw	zero,-25284(gp)
  8007e8:	00004206 	br	8008f4 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 1) {
  8007ec:	e0bfff17 	ldw	r2,-4(fp)
  8007f0:	10800017 	ldw	r2,0(r2)
  8007f4:	10800058 	cmpnei	r2,r2,1
  8007f8:	1000081e 	bne	r2,zero,80081c <pedestrian_tlc+0xec>
			*state = 2; // Y, R
  8007fc:	e0ffff17 	ldw	r3,-4(fp)
  800800:	00800084 	movi	r2,2
  800804:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x14);
  800808:	00c04074 	movhi	r3,257
  80080c:	18c41804 	addi	r3,r3,4192
  800810:	00800504 	movi	r2,20
  800814:	18800035 	stwio	r2,0(r3)
  800818:	00003606 	br	8008f4 <pedestrian_tlc+0x1c4>
		} else if (*state == 2) {
  80081c:	e0bfff17 	ldw	r2,-4(fp)
  800820:	10800017 	ldw	r2,0(r2)
  800824:	10800098 	cmpnei	r2,r2,2
  800828:	1000081e 	bne	r2,zero,80084c <pedestrian_tlc+0x11c>
			*state = 3; // R, R
  80082c:	e0ffff17 	ldw	r3,-4(fp)
  800830:	008000c4 	movi	r2,3
  800834:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800838:	00c04074 	movhi	r3,257
  80083c:	18c41804 	addi	r3,r3,4192
  800840:	00800904 	movi	r2,36
  800844:	18800035 	stwio	r2,0(r3)
  800848:	00002a06 	br	8008f4 <pedestrian_tlc+0x1c4>
		} else if (*state == 3) {
  80084c:	e0bfff17 	ldw	r2,-4(fp)
  800850:	10800017 	ldw	r2,0(r2)
  800854:	108000d8 	cmpnei	r2,r2,3
  800858:	1000141e 	bne	r2,zero,8008ac <pedestrian_tlc+0x17c>
			if (pedestrianEW == 0) {
  80085c:	d0a75017 	ldw	r2,-25280(gp)
  800860:	1004c03a 	cmpne	r2,r2,zero
  800864:	1000081e 	bne	r2,zero,800888 <pedestrian_tlc+0x158>
				*state = 4; // R, G
  800868:	e0ffff17 	ldw	r3,-4(fp)
  80086c:	00800104 	movi	r2,4
  800870:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x21);
  800874:	00c04074 	movhi	r3,257
  800878:	18c41804 	addi	r3,r3,4192
  80087c:	00800844 	movi	r2,33
  800880:	18800035 	stwio	r2,0(r3)
  800884:	00001b06 	br	8008f4 <pedestrian_tlc+0x1c4>
			} else {
				*state = 4; // R, G, P2
  800888:	e0ffff17 	ldw	r3,-4(fp)
  80088c:	00800104 	movi	r2,4
  800890:	18800015 	stw	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xA1);
  800894:	00c04074 	movhi	r3,257
  800898:	18c41804 	addi	r3,r3,4192
  80089c:	00802844 	movi	r2,161
  8008a0:	18800035 	stwio	r2,0(r3)
				pedestrianEW = 0;
  8008a4:	d0275015 	stw	zero,-25280(gp)
  8008a8:	00001206 	br	8008f4 <pedestrian_tlc+0x1c4>
			}
		} else if (*state == 4) {
  8008ac:	e0bfff17 	ldw	r2,-4(fp)
  8008b0:	10800017 	ldw	r2,0(r2)
  8008b4:	10800118 	cmpnei	r2,r2,4
  8008b8:	1000081e 	bne	r2,zero,8008dc <pedestrian_tlc+0x1ac>
			*state = 5; // R, Y
  8008bc:	e0ffff17 	ldw	r3,-4(fp)
  8008c0:	00800144 	movi	r2,5
  8008c4:	18800015 	stw	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x22);
  8008c8:	00c04074 	movhi	r3,257
  8008cc:	18c41804 	addi	r3,r3,4192
  8008d0:	00800884 	movi	r2,34
  8008d4:	18800035 	stwio	r2,0(r3)
  8008d8:	00000606 	br	8008f4 <pedestrian_tlc+0x1c4>
		} else {	// this accounts for state 5
			*state = 0; // R, R
  8008dc:	e0bfff17 	ldw	r2,-4(fp)
  8008e0:	10000015 	stw	zero,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  8008e4:	00c04074 	movhi	r3,257
  8008e8:	18c41804 	addi	r3,r3,4192
  8008ec:	00800904 	movi	r2,36
  8008f0:	18800035 	stwio	r2,0(r3)
		}
		tlc_timer_event = 0;
  8008f4:	d0274d15 	stw	zero,-25292(gp)
		return;
	}
}
  8008f8:	e037883a 	mov	sp,fp
  8008fc:	dfc00117 	ldw	ra,4(sp)
  800900:	df000017 	ldw	fp,0(sp)
  800904:	dec00204 	addi	sp,sp,8
  800908:	f800283a 	ret

0080090c <configurable_tlc>:
 */
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state) {
  80090c:	defffd04 	addi	sp,sp,-12
  800910:	dfc00215 	stw	ra,8(sp)
  800914:	df000115 	stw	fp,4(sp)
  800918:	df000104 	addi	fp,sp,4
  80091c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800920:	e0bfff17 	ldw	r2,-4(fp)
  800924:	10800017 	ldw	r2,0(r2)
  800928:	10bfffd8 	cmpnei	r2,r2,-1
  80092c:	10000b1e 	bne	r2,zero,80095c <configurable_tlc+0x50>
		init_tlc();
  800930:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800934:	e0bfff17 	ldw	r2,-4(fp)
  800938:	10800017 	ldw	r2,0(r2)
  80093c:	10c00044 	addi	r3,r2,1
  800940:	e0bfff17 	ldw	r2,-4(fp)
  800944:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800948:	00c04074 	movhi	r3,257
  80094c:	18c41804 	addi	r3,r3,4192
  800950:	00800904 	movi	r2,36
  800954:	18800035 	stwio	r2,0(r3)
		return;
  800958:	00001406 	br	8009ac <configurable_tlc+0xa0>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  80095c:	00804074 	movhi	r2,257
  800960:	10842404 	addi	r2,r2,4240
  800964:	10800037 	ldwio	r2,0(r2)
  800968:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  80096c:	e0bfff17 	ldw	r2,-4(fp)
  800970:	10800017 	ldw	r2,0(r2)
  800974:	1005003a 	cmpeq	r2,r2,zero
  800978:	1000041e 	bne	r2,zero,80098c <configurable_tlc+0x80>
  80097c:	e0bfff17 	ldw	r2,-4(fp)
  800980:	10800017 	ldw	r2,0(r2)
  800984:	108000d8 	cmpnei	r2,r2,3
  800988:	1000061e 	bne	r2,zero,8009a4 <configurable_tlc+0x98>
  80098c:	d0a75117 	ldw	r2,-25276(gp)
  800990:	10800050 	cmplti	r2,r2,1
  800994:	1000031e 	bne	r2,zero,8009a4 <configurable_tlc+0x98>
		timeout_data_handler();	
  800998:	0800a080 	call	800a08 <timeout_data_handler>
		newTimeoutValues = 0;
  80099c:	d0275115 	stw	zero,-25276(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  8009a0:	00000206 	br	8009ac <configurable_tlc+0xa0>
		timeout_data_handler();	
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  8009a4:	e13fff17 	ldw	r4,-4(fp)
  8009a8:	08007300 	call	800730 <pedestrian_tlc>
	}
}
  8009ac:	e037883a 	mov	sp,fp
  8009b0:	dfc00117 	ldw	ra,4(sp)
  8009b4:	df000017 	ldw	fp,0(sp)
  8009b8:	dec00204 	addi	sp,sp,8
  8009bc:	f800283a 	ret

008009c0 <config_tlc>:
 * RETURNS:     Returns the state of the configuration phase
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state) {
  8009c0:	defffd04 	addi	sp,sp,-12
  8009c4:	df000215 	stw	fp,8(sp)
  8009c8:	df000204 	addi	fp,sp,8
  8009cc:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  8009d0:	e0bffe17 	ldw	r2,-8(fp)
  8009d4:	10800017 	ldw	r2,0(r2)
  8009d8:	10bfffd8 	cmpnei	r2,r2,-1
  8009dc:	1000031e 	bne	r2,zero,8009ec <config_tlc+0x2c>
		// Process initialisation state
		state = 0;
  8009e0:	d0275615 	stw	zero,-25256(gp)
		return 0;
  8009e4:	e03fff15 	stw	zero,-4(fp)
  8009e8:	00000206 	br	8009f4 <config_tlc+0x34>
	}

	return state;
  8009ec:	d0a75617 	ldw	r2,-25256(gp)
  8009f0:	e0bfff15 	stw	r2,-4(fp)
  8009f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8009f8:	e037883a 	mov	sp,fp
  8009fc:	df000017 	ldw	fp,0(sp)
  800a00:	dec00104 	addi	sp,sp,4
  800a04:	f800283a 	ret

00800a08 <timeout_data_handler>:
 * RETURNS:     none
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void) {
  800a08:	defffc04 	addi	sp,sp,-16
  800a0c:	dfc00315 	stw	ra,12(sp)
  800a10:	df000215 	stw	fp,8(sp)
  800a14:	df000204 	addi	fp,sp,8
	fp = fopen(UART_NAME, "rw"); // open up UART with read and write access
  800a18:	01002074 	movhi	r4,129
  800a1c:	2112c304 	addi	r4,r4,19212
  800a20:	01402074 	movhi	r5,129
  800a24:	2952c604 	addi	r5,r5,19224
  800a28:	08017b80 	call	8017b8 <fopen>
  800a2c:	d0a75915 	stw	r2,-25244(gp)
	if (fp != NULL) {// check if the UART is open successfully
  800a30:	d0a75917 	ldw	r2,-25244(gp)
  800a34:	1005003a 	cmpeq	r2,r2,zero
  800a38:	10003e1e 	bne	r2,zero,800b34 <timeout_data_handler+0x12c>
		int k = 0;
  800a3c:	e03fff15 	stw	zero,-4(fp)
  800a40:	00000006 	br	800a44 <timeout_data_handler+0x3c>
		while(1) {
			c = fgetc(fp);
  800a44:	d1275917 	ldw	r4,-25244(gp)
  800a48:	08012dc0 	call	8012dc <fgetc>
  800a4c:	d0a75715 	stw	r2,-25252(gp)
			if (c== '\n') {
  800a50:	d0a75717 	ldw	r2,-25252(gp)
  800a54:	108002a0 	cmpeqi	r2,r2,10
  800a58:	1000341e 	bne	r2,zero,800b2c <timeout_data_handler+0x124>
				break;
			} 
			if (c == '\r') {
  800a5c:	d0a75717 	ldw	r2,-25252(gp)
  800a60:	10800360 	cmpeqi	r2,r2,13
  800a64:	1000311e 	bne	r2,zero,800b2c <timeout_data_handler+0x124>
				break;
			}
			if (c == ',') {
  800a68:	d0a75717 	ldw	r2,-25252(gp)
  800a6c:	10800b18 	cmpnei	r2,r2,44
  800a70:	1000241e 	bne	r2,zero,800b04 <timeout_data_handler+0xfc>
				sscanf(chararray, "%d", &timeoutValue);
  800a74:	d1200004 	addi	r4,gp,-32768
  800a78:	01402074 	movhi	r5,129
  800a7c:	2952c704 	addi	r5,r5,19228
  800a80:	d1a75804 	addi	r6,gp,-25248
  800a84:	0803ebc0 	call	803ebc <sscanf>
				tempBuffer[valueCount] = timeoutValue;
  800a88:	d0e75317 	ldw	r3,-25268(gp)
  800a8c:	d0a75817 	ldw	r2,-25248(gp)
  800a90:	100b883a 	mov	r5,r2
  800a94:	01002074 	movhi	r4,129
  800a98:	21147f04 	addi	r4,r4,20988
  800a9c:	18c5883a 	add	r2,r3,r3
  800aa0:	1085883a 	add	r2,r2,r2
  800aa4:	1105883a 	add	r2,r2,r4
  800aa8:	11400015 	stw	r5,0(r2)
				chararray[0] = '0';
  800aac:	00800c04 	movi	r2,48
  800ab0:	d0a00005 	stb	r2,-32768(gp)
				chararray[1] = '0';
  800ab4:	00c02074 	movhi	r3,129
  800ab8:	18db9344 	addi	r3,r3,28237
  800abc:	00800c04 	movi	r2,48
  800ac0:	18800005 	stb	r2,0(r3)
				chararray[2] = '0';
  800ac4:	00c02074 	movhi	r3,129
  800ac8:	18db9384 	addi	r3,r3,28238
  800acc:	00800c04 	movi	r2,48
  800ad0:	18800005 	stb	r2,0(r3)
				chararray[3] = '0';
  800ad4:	00c02074 	movhi	r3,129
  800ad8:	18db93c4 	addi	r3,r3,28239
  800adc:	00800c04 	movi	r2,48
  800ae0:	18800005 	stb	r2,0(r3)
				chararray[4] = '\0';
  800ae4:	00802074 	movhi	r2,129
  800ae8:	109b9404 	addi	r2,r2,28240
  800aec:	10000005 	stb	zero,0(r2)
				k = 0;
  800af0:	e03fff15 	stw	zero,-4(fp)
				valueCount += 1;
  800af4:	d0a75317 	ldw	r2,-25268(gp)
  800af8:	10800044 	addi	r2,r2,1
  800afc:	d0a75315 	stw	r2,-25268(gp)
  800b00:	003fd006 	br	800a44 <timeout_data_handler+0x3c>
			} else {
				chararray[k] = c;
  800b04:	e13fff17 	ldw	r4,-4(fp)
  800b08:	d0a75717 	ldw	r2,-25252(gp)
  800b0c:	1007883a 	mov	r3,r2
  800b10:	d0a00004 	addi	r2,gp,-32768
  800b14:	2085883a 	add	r2,r4,r2
  800b18:	10c00005 	stb	r3,0(r2)
				k += 1;
  800b1c:	e0bfff17 	ldw	r2,-4(fp)
  800b20:	10800044 	addi	r2,r2,1
  800b24:	e0bfff15 	stw	r2,-4(fp)
			}
		}
  800b28:	003fc606 	br	800a44 <timeout_data_handler+0x3c>
		fclose(fp); // remember to close the file
  800b2c:	d1275917 	ldw	r4,-25244(gp)
  800b30:	08010980 	call	801098 <fclose>
	}
	if (valueCount == 6) {
  800b34:	d0a75317 	ldw	r2,-25268(gp)
  800b38:	10800198 	cmpnei	r2,r2,6
  800b3c:	1000161e 	bne	r2,zero,800b98 <timeout_data_handler+0x190>
		int j;
		for (j=0; j<6; j++) {
  800b40:	e03ffe15 	stw	zero,-8(fp)
  800b44:	00001106 	br	800b8c <timeout_data_handler+0x184>
			timeout[j]=tempBuffer[j];
  800b48:	e17ffe17 	ldw	r5,-8(fp)
  800b4c:	e0bffe17 	ldw	r2,-8(fp)
  800b50:	00c02074 	movhi	r3,129
  800b54:	18d47f04 	addi	r3,r3,20988
  800b58:	1085883a 	add	r2,r2,r2
  800b5c:	1085883a 	add	r2,r2,r2
  800b60:	10c5883a 	add	r2,r2,r3
  800b64:	11000017 	ldw	r4,0(r2)
  800b68:	00c02074 	movhi	r3,129
  800b6c:	18d47204 	addi	r3,r3,20936
  800b70:	2945883a 	add	r2,r5,r5
  800b74:	1085883a 	add	r2,r2,r2
  800b78:	10c5883a 	add	r2,r2,r3
  800b7c:	11000015 	stw	r4,0(r2)
		}
		fclose(fp); // remember to close the file
	}
	if (valueCount == 6) {
		int j;
		for (j=0; j<6; j++) {
  800b80:	e0bffe17 	ldw	r2,-8(fp)
  800b84:	10800044 	addi	r2,r2,1
  800b88:	e0bffe15 	stw	r2,-8(fp)
  800b8c:	e0bffe17 	ldw	r2,-8(fp)
  800b90:	10800190 	cmplti	r2,r2,6
  800b94:	103fec1e 	bne	r2,zero,800b48 <timeout_data_handler+0x140>
			timeout[j]=tempBuffer[j];
		}
	}
	valueCount = 0;
  800b98:	d0275315 	stw	zero,-25268(gp)
}
  800b9c:	e037883a 	mov	sp,fp
  800ba0:	dfc00117 	ldw	ra,4(sp)
  800ba4:	df000017 	ldw	fp,0(sp)
  800ba8:	dec00204 	addi	sp,sp,8
  800bac:	f800283a 	ret

00800bb0 <buffer_timeout>:
/* DESCRIPTION: Stores the new timeout values in a secondary buffer for atomic
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(int value) {
  800bb0:	defffe04 	addi	sp,sp,-8
  800bb4:	df000115 	stw	fp,4(sp)
  800bb8:	df000104 	addi	fp,sp,4
  800bbc:	e13fff15 	stw	r4,-4(fp)

}
  800bc0:	e037883a 	mov	sp,fp
  800bc4:	df000017 	ldw	fp,0(sp)
  800bc8:	dec00104 	addi	sp,sp,4
  800bcc:	f800283a 	ret

00800bd0 <update_timeout>:
 *              section by ensuring that timeouts are fully received before
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void) {
  800bd0:	deffff04 	addi	sp,sp,-4
  800bd4:	df000015 	stw	fp,0(sp)
  800bd8:	d839883a 	mov	fp,sp

	return 0;
  800bdc:	0005883a 	mov	r2,zero
}
  800be0:	e037883a 	mov	sp,fp
  800be4:	df000017 	ldw	fp,0(sp)
  800be8:	dec00104 	addi	sp,sp,4
  800bec:	f800283a 	ret

00800bf0 <camera_timer_isr>:
/* DESCRIPTION: Handles the red light camera timer interrupt
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context) {
  800bf0:	defff804 	addi	sp,sp,-32
  800bf4:	dfc00715 	stw	ra,28(sp)
  800bf8:	df000615 	stw	fp,24(sp)
  800bfc:	df000604 	addi	fp,sp,24
  800c00:	e13ffe15 	stw	r4,-8(fp)
	volatile int* trigger = (volatile int*)context;
  800c04:	e0bffe17 	ldw	r2,-8(fp)
  800c08:	e0bffa15 	stw	r2,-24(fp)
	(*trigger)++;
  800c0c:	e0bffa17 	ldw	r2,-24(fp)
  800c10:	10800017 	ldw	r2,0(r2)
  800c14:	10c00044 	addi	r3,r2,1
  800c18:	e0bffa17 	ldw	r2,-24(fp)
  800c1c:	10c00015 	stw	r3,0(r2)
	if (*trigger == CAMERA_TIMEOUT) {
  800c20:	e0bffa17 	ldw	r2,-24(fp)
  800c24:	10800017 	ldw	r2,0(r2)
  800c28:	1081f418 	cmpnei	r2,r2,2000
  800c2c:	1000051e 	bne	r2,zero,800c44 <camera_timer_isr+0x54>
		printToUART("Snapshot Taken");
  800c30:	01002074 	movhi	r4,129
  800c34:	2112c804 	addi	r4,r4,19232
  800c38:	0800dc00 	call	800dc0 <printToUART>
		return 0;
  800c3c:	e03fff15 	stw	zero,-4(fp)
  800c40:	00001306 	br	800c90 <camera_timer_isr+0xa0>
	}
	if (vehicle_detected != 2) {
  800c44:	d0a75217 	ldw	r2,-25272(gp)
  800c48:	108000a0 	cmpeqi	r2,r2,2
  800c4c:	10000e1e 	bne	r2,zero,800c88 <camera_timer_isr+0x98>
		char countString[10];
		sprintf(countString, "%d", *trigger);
  800c50:	e0bffa17 	ldw	r2,-24(fp)
  800c54:	11800017 	ldw	r6,0(r2)
  800c58:	e13ffb04 	addi	r4,fp,-20
  800c5c:	01402074 	movhi	r5,129
  800c60:	2952c704 	addi	r5,r5,19228
  800c64:	0803d580 	call	803d58 <sprintf>
		printToUART("Vehicle left at: ");
  800c68:	01002074 	movhi	r4,129
  800c6c:	2112cc04 	addi	r4,r4,19248
  800c70:	0800dc00 	call	800dc0 <printToUART>
		printToUART(countString);
  800c74:	e13ffb04 	addi	r4,fp,-20
  800c78:	0800dc00 	call	800dc0 <printToUART>
		vehicle_detected = 0;
  800c7c:	d0275215 	stw	zero,-25272(gp)
		return 0;
  800c80:	e03fff15 	stw	zero,-4(fp)
  800c84:	00000206 	br	800c90 <camera_timer_isr+0xa0>
	}
	return 1;
  800c88:	00800044 	movi	r2,1
  800c8c:	e0bfff15 	stw	r2,-4(fp)
  800c90:	e0bfff17 	ldw	r2,-4(fp)
}
  800c94:	e037883a 	mov	sp,fp
  800c98:	dfc00117 	ldw	ra,4(sp)
  800c9c:	df000017 	ldw	fp,0(sp)
  800ca0:	dec00204 	addi	sp,sp,8
  800ca4:	f800283a 	ret

00800ca8 <camera_tlc>:
 */
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state) {
  800ca8:	defffc04 	addi	sp,sp,-16
  800cac:	dfc00315 	stw	ra,12(sp)
  800cb0:	df000215 	stw	fp,8(sp)
  800cb4:	df000204 	addi	fp,sp,8
  800cb8:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800cbc:	e0bfff17 	ldw	r2,-4(fp)
  800cc0:	10800017 	ldw	r2,0(r2)
  800cc4:	10bfffd8 	cmpnei	r2,r2,-1
  800cc8:	10000b1e 	bne	r2,zero,800cf8 <camera_tlc+0x50>
		init_tlc();
  800ccc:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800cd0:	e0bfff17 	ldw	r2,-4(fp)
  800cd4:	10800017 	ldw	r2,0(r2)
  800cd8:	10c00044 	addi	r3,r2,1
  800cdc:	e0bfff17 	ldw	r2,-4(fp)
  800ce0:	10c00015 	stw	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
  800ce4:	00c04074 	movhi	r3,257
  800ce8:	18c41804 	addi	r3,r3,4192
  800cec:	00800904 	movi	r2,36
  800cf0:	18800035 	stwio	r2,0(r3)
		return;
  800cf4:	00002d06 	br	800dac <camera_tlc+0x104>
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800cf8:	00804074 	movhi	r2,257
  800cfc:	10842404 	addi	r2,r2,4240
  800d00:	10800037 	ldwio	r2,0(r2)
  800d04:	d0a75115 	stw	r2,-25276(gp)
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800d08:	e0bfff17 	ldw	r2,-4(fp)
  800d0c:	10800017 	ldw	r2,0(r2)
  800d10:	1005003a 	cmpeq	r2,r2,zero
  800d14:	1000041e 	bne	r2,zero,800d28 <camera_tlc+0x80>
  800d18:	e0bfff17 	ldw	r2,-4(fp)
  800d1c:	10800017 	ldw	r2,0(r2)
  800d20:	108000d8 	cmpnei	r2,r2,3
  800d24:	1000061e 	bne	r2,zero,800d40 <camera_tlc+0x98>
  800d28:	d0a75117 	ldw	r2,-25276(gp)
  800d2c:	10800050 	cmplti	r2,r2,1
  800d30:	1000031e 	bne	r2,zero,800d40 <camera_tlc+0x98>
		timeout_data_handler();
  800d34:	0800a080 	call	800a08 <timeout_data_handler>
		newTimeoutValues = 0;
  800d38:	d0275115 	stw	zero,-25276(gp)
		(*state)++;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x24);
		return;
	}
	newTimeoutValues = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	if (((*state == 0) || (*state == 3))&& (newTimeoutValues > 0)){
  800d3c:	00000206 	br	800d48 <camera_tlc+0xa0>
		timeout_data_handler();
		newTimeoutValues = 0;
	} else {
		pedestrian_tlc(state);
  800d40:	e13fff17 	ldw	r4,-4(fp)
  800d44:	08007300 	call	800730 <pedestrian_tlc>
	}

	if (((*state == 2) || (*state == 5)) && (vehicle_detected == 1)) { // One light yellow and vehicle enters
  800d48:	e0bfff17 	ldw	r2,-4(fp)
  800d4c:	10800017 	ldw	r2,0(r2)
  800d50:	108000a0 	cmpeqi	r2,r2,2
  800d54:	1000041e 	bne	r2,zero,800d68 <camera_tlc+0xc0>
  800d58:	e0bfff17 	ldw	r2,-4(fp)
  800d5c:	10800017 	ldw	r2,0(r2)
  800d60:	10800158 	cmpnei	r2,r2,5
  800d64:	1000111e 	bne	r2,zero,800dac <camera_tlc+0x104>
  800d68:	d0a75217 	ldw	r2,-25272(gp)
  800d6c:	10800058 	cmpnei	r2,r2,1
  800d70:	10000e1e 	bne	r2,zero,800dac <camera_tlc+0x104>
		printToUART("Camera Activated");
  800d74:	01002074 	movhi	r4,129
  800d78:	2112d104 	addi	r4,r4,19268
  800d7c:	0800dc00 	call	800dc0 <printToUART>
		vehicle_detected = 2;
  800d80:	00800084 	movi	r2,2
  800d84:	d0a75215 	stw	r2,-25272(gp)
		void* cameraContext = (void*) camera_count;
  800d88:	d0a75517 	ldw	r2,-25260(gp)
  800d8c:	e0bffe15 	stw	r2,-8(fp)
		alt_alarm_start(&camera_timer, 1, camera_timer_isr, cameraContext);
  800d90:	010020b4 	movhi	r4,130
  800d94:	21230004 	addi	r4,r4,-29696
  800d98:	01400044 	movi	r5,1
  800d9c:	01802034 	movhi	r6,128
  800da0:	3182fc04 	addi	r6,r6,3056
  800da4:	e1fffe17 	ldw	r7,-8(fp)
  800da8:	08103e00 	call	8103e0 <alt_alarm_start>
	}
}
  800dac:	e037883a 	mov	sp,fp
  800db0:	dfc00117 	ldw	ra,4(sp)
  800db4:	df000017 	ldw	fp,0(sp)
  800db8:	dec00204 	addi	sp,sp,8
  800dbc:	f800283a 	ret

00800dc0 <printToUART>:

void printToUART(char* stringToPrint) {
  800dc0:	defffd04 	addi	sp,sp,-12
  800dc4:	dfc00215 	stw	ra,8(sp)
  800dc8:	df000115 	stw	fp,4(sp)
  800dcc:	df000104 	addi	fp,sp,4
  800dd0:	e13fff15 	stw	r4,-4(fp)
	fp = fopen(UART_NAME, "w");
  800dd4:	01002074 	movhi	r4,129
  800dd8:	2112c304 	addi	r4,r4,19212
  800ddc:	01402074 	movhi	r5,129
  800de0:	2952d604 	addi	r5,r5,19288
  800de4:	08017b80 	call	8017b8 <fopen>
  800de8:	d0a75915 	stw	r2,-25244(gp)
	if (fp != NULL) {
  800dec:	d0a75917 	ldw	r2,-25244(gp)
  800df0:	1005003a 	cmpeq	r2,r2,zero
  800df4:	1000051e 	bne	r2,zero,800e0c <printToUART+0x4c>
		fprintf(fp, "%s", stringToPrint);
  800df8:	d1675917 	ldw	r5,-25244(gp)
  800dfc:	e13fff17 	ldw	r4,-4(fp)
  800e00:	08018a80 	call	8018a8 <fputs>
		fclose(fp);
  800e04:	d1275917 	ldw	r4,-25244(gp)
  800e08:	08010980 	call	801098 <fclose>
	}
}
  800e0c:	e037883a 	mov	sp,fp
  800e10:	dfc00117 	ldw	ra,4(sp)
  800e14:	df000017 	ldw	fp,0(sp)
  800e18:	dec00204 	addi	sp,sp,8
  800e1c:	f800283a 	ret

00800e20 <handle_vehicle_button>:

/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button(void) {
  800e20:	deffff04 	addi	sp,sp,-4
  800e24:	df000015 	stw	fp,0(sp)
  800e28:	d839883a 	mov	fp,sp
	if (vehicle_detected == 0) {
  800e2c:	d0a75217 	ldw	r2,-25272(gp)
  800e30:	1004c03a 	cmpne	r2,r2,zero
  800e34:	1000031e 	bne	r2,zero,800e44 <handle_vehicle_button+0x24>
		vehicle_detected = 1; // If vehicle absent, button press means vehicle has entered intersection
  800e38:	00800044 	movi	r2,1
  800e3c:	d0a75215 	stw	r2,-25272(gp)
  800e40:	00000206 	br	800e4c <handle_vehicle_button+0x2c>
	} else {
		vehicle_detected = 3; // If at any other time, button press means vehicle has left intersection
  800e44:	008000c4 	movi	r2,3
  800e48:	d0a75215 	stw	r2,-25272(gp)
	}
}
  800e4c:	e037883a 	mov	sp,fp
  800e50:	df000017 	ldw	fp,0(sp)
  800e54:	dec00104 	addi	sp,sp,4
  800e58:	f800283a 	ret

00800e5c <main>:

int main(void) {
  800e5c:	defffb04 	addi	sp,sp,-20
  800e60:	dfc00415 	stw	ra,16(sp)
  800e64:	df000315 	stw	fp,12(sp)
  800e68:	df000304 	addi	fp,sp,12
	unsigned int buttons = 0;			// status of mode button
  800e6c:	e03ffe15 	stw	zero,-8(fp)
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800e70:	01002074 	movhi	r4,129
  800e74:	2112d704 	addi	r4,r4,19292
  800e78:	01402074 	movhi	r5,129
  800e7c:	2952d604 	addi	r5,r5,19288
  800e80:	08017b80 	call	8017b8 <fopen>
  800e84:	e0bffd15 	stw	r2,-12(fp)

	lcd_set_mode(0, lcd);		// initialise lcd
  800e88:	0009883a 	mov	r4,zero
  800e8c:	e17ffd17 	ldw	r5,-12(fp)
  800e90:	08002480 	call	800248 <lcd_set_mode>
	init_buttons_pio();			// initialise buttons
  800e94:	08006cc0 	call	8006cc <init_buttons_pio>
  800e98:	00000006 	br	800e9c <main+0x40>

	while (1) {
		// Button detection & debouncing
		buttons_driver(&buttons);
  800e9c:	e13ffe04 	addi	r4,fp,-8
  800ea0:	08002b00 	call	8002b0 <buttons_driver>

		// Execute the correct TLC
    	switch (mode) {
  800ea4:	d0a75417 	ldw	r2,-25264(gp)
  800ea8:	e0bfff15 	stw	r2,-4(fp)
  800eac:	e0ffff17 	ldw	r3,-4(fp)
  800eb0:	18800060 	cmpeqi	r2,r3,1
  800eb4:	10000e1e 	bne	r2,zero,800ef0 <main+0x94>
  800eb8:	e0ffff17 	ldw	r3,-4(fp)
  800ebc:	18800070 	cmpltui	r2,r3,1
  800ec0:	1000071e 	bne	r2,zero,800ee0 <main+0x84>
  800ec4:	e0ffff17 	ldw	r3,-4(fp)
  800ec8:	188000a0 	cmpeqi	r2,r3,2
  800ecc:	10000c1e 	bne	r2,zero,800f00 <main+0xa4>
  800ed0:	e0ffff17 	ldw	r3,-4(fp)
  800ed4:	188000e0 	cmpeqi	r2,r3,3
  800ed8:	10000d1e 	bne	r2,zero,800f10 <main+0xb4>
  800edc:	00000f06 	br	800f1c <main+0xc0>
			case 0:
				simple_tlc(&proc_state[0]);
  800ee0:	01002074 	movhi	r4,129
  800ee4:	21148504 	addi	r4,r4,21012
  800ee8:	08003e40 	call	8003e4 <simple_tlc>
				break;
  800eec:	00000b06 	br	800f1c <main+0xc0>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  800ef0:	01002074 	movhi	r4,129
  800ef4:	21148604 	addi	r4,r4,21016
  800ef8:	08007300 	call	800730 <pedestrian_tlc>
				break;
  800efc:	00000706 	br	800f1c <main+0xc0>
			case 2:
				configurable_tlc(&proc_state[2]);
  800f00:	01002074 	movhi	r4,129
  800f04:	21148704 	addi	r4,r4,21020
  800f08:	080090c0 	call	80090c <configurable_tlc>
				break;
  800f0c:	00000306 	br	800f1c <main+0xc0>
			case 3:
				camera_tlc(&proc_state[3]);
  800f10:	01002074 	movhi	r4,129
  800f14:	21148804 	addi	r4,r4,21024
  800f18:	0800ca80 	call	800ca8 <camera_tlc>
				break;
		}
    	if(lcd != NULL) {
  800f1c:	e0bffd17 	ldw	r2,-12(fp)
  800f20:	1005003a 	cmpeq	r2,r2,zero
  800f24:	103fdd1e 	bne	r2,zero,800e9c <main+0x40>
    		#define ESC 27
    		#define CLEAR_LCD_STRING "[2J"
    		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800f28:	e13ffd17 	ldw	r4,-12(fp)
  800f2c:	01402074 	movhi	r5,129
  800f30:	2952b504 	addi	r5,r5,19156
  800f34:	018006c4 	movi	r6,27
  800f38:	01c02074 	movhi	r7,129
  800f3c:	39d2b704 	addi	r7,r7,19164
  800f40:	08017d40 	call	8017d4 <fprintf>
    		fprintf(lcd, "Mode: %d\n",mode);
  800f44:	d1a75417 	ldw	r6,-25264(gp)
  800f48:	e13ffd17 	ldw	r4,-12(fp)
  800f4c:	01402074 	movhi	r5,129
  800f50:	2952b804 	addi	r5,r5,19168
  800f54:	08017d40 	call	8017d4 <fprintf>
    		fprintf(lcd, "State: %d\n",proc_state[mode]);
  800f58:	d0a75417 	ldw	r2,-25264(gp)
  800f5c:	00c02074 	movhi	r3,129
  800f60:	18d48504 	addi	r3,r3,21012
  800f64:	1085883a 	add	r2,r2,r2
  800f68:	1085883a 	add	r2,r2,r2
  800f6c:	10c5883a 	add	r2,r2,r3
  800f70:	11800017 	ldw	r6,0(r2)
  800f74:	e13ffd17 	ldw	r4,-12(fp)
  800f78:	01402074 	movhi	r5,129
  800f7c:	2952da04 	addi	r5,r5,19304
  800f80:	08017d40 	call	8017d4 <fprintf>
    	}

	}
  800f84:	003fc506 	br	800e9c <main+0x40>

00800f88 <_fclose_r>:
  800f88:	defffc04 	addi	sp,sp,-16
  800f8c:	dc400115 	stw	r17,4(sp)
  800f90:	dc000015 	stw	r16,0(sp)
  800f94:	dfc00315 	stw	ra,12(sp)
  800f98:	dc800215 	stw	r18,8(sp)
  800f9c:	2821883a 	mov	r16,r5
  800fa0:	2023883a 	mov	r17,r4
  800fa4:	28002926 	beq	r5,zero,80104c <_fclose_r+0xc4>
  800fa8:	080145c0 	call	80145c <__sfp_lock_acquire>
  800fac:	88000226 	beq	r17,zero,800fb8 <_fclose_r+0x30>
  800fb0:	88800e17 	ldw	r2,56(r17)
  800fb4:	10002d26 	beq	r2,zero,80106c <_fclose_r+0xe4>
  800fb8:	8080030f 	ldh	r2,12(r16)
  800fbc:	10002226 	beq	r2,zero,801048 <_fclose_r+0xc0>
  800fc0:	8809883a 	mov	r4,r17
  800fc4:	800b883a 	mov	r5,r16
  800fc8:	08010ac0 	call	8010ac <_fflush_r>
  800fcc:	1025883a 	mov	r18,r2
  800fd0:	80800b17 	ldw	r2,44(r16)
  800fd4:	10000426 	beq	r2,zero,800fe8 <_fclose_r+0x60>
  800fd8:	81400717 	ldw	r5,28(r16)
  800fdc:	8809883a 	mov	r4,r17
  800fe0:	103ee83a 	callr	r2
  800fe4:	10002a16 	blt	r2,zero,801090 <_fclose_r+0x108>
  800fe8:	8080030b 	ldhu	r2,12(r16)
  800fec:	1080200c 	andi	r2,r2,128
  800ff0:	1000231e 	bne	r2,zero,801080 <_fclose_r+0xf8>
  800ff4:	81400c17 	ldw	r5,48(r16)
  800ff8:	28000526 	beq	r5,zero,801010 <_fclose_r+0x88>
  800ffc:	80801004 	addi	r2,r16,64
  801000:	28800226 	beq	r5,r2,80100c <_fclose_r+0x84>
  801004:	8809883a 	mov	r4,r17
  801008:	08019f00 	call	8019f0 <_free_r>
  80100c:	80000c15 	stw	zero,48(r16)
  801010:	81401117 	ldw	r5,68(r16)
  801014:	28000326 	beq	r5,zero,801024 <_fclose_r+0x9c>
  801018:	8809883a 	mov	r4,r17
  80101c:	08019f00 	call	8019f0 <_free_r>
  801020:	80001115 	stw	zero,68(r16)
  801024:	8000030d 	sth	zero,12(r16)
  801028:	08014600 	call	801460 <__sfp_lock_release>
  80102c:	9005883a 	mov	r2,r18
  801030:	dfc00317 	ldw	ra,12(sp)
  801034:	dc800217 	ldw	r18,8(sp)
  801038:	dc400117 	ldw	r17,4(sp)
  80103c:	dc000017 	ldw	r16,0(sp)
  801040:	dec00404 	addi	sp,sp,16
  801044:	f800283a 	ret
  801048:	08014600 	call	801460 <__sfp_lock_release>
  80104c:	0025883a 	mov	r18,zero
  801050:	9005883a 	mov	r2,r18
  801054:	dfc00317 	ldw	ra,12(sp)
  801058:	dc800217 	ldw	r18,8(sp)
  80105c:	dc400117 	ldw	r17,4(sp)
  801060:	dc000017 	ldw	r16,0(sp)
  801064:	dec00404 	addi	sp,sp,16
  801068:	f800283a 	ret
  80106c:	8809883a 	mov	r4,r17
  801070:	080146c0 	call	80146c <__sinit>
  801074:	8080030f 	ldh	r2,12(r16)
  801078:	103fd11e 	bne	r2,zero,800fc0 <_fclose_r+0x38>
  80107c:	003ff206 	br	801048 <_fclose_r+0xc0>
  801080:	81400417 	ldw	r5,16(r16)
  801084:	8809883a 	mov	r4,r17
  801088:	08019f00 	call	8019f0 <_free_r>
  80108c:	003fd906 	br	800ff4 <_fclose_r+0x6c>
  801090:	04bfffc4 	movi	r18,-1
  801094:	003fd406 	br	800fe8 <_fclose_r+0x60>

00801098 <fclose>:
  801098:	00802074 	movhi	r2,129
  80109c:	109b9704 	addi	r2,r2,28252
  8010a0:	200b883a 	mov	r5,r4
  8010a4:	11000017 	ldw	r4,0(r2)
  8010a8:	0800f881 	jmpi	800f88 <_fclose_r>

008010ac <_fflush_r>:
  8010ac:	defffb04 	addi	sp,sp,-20
  8010b0:	dcc00315 	stw	r19,12(sp)
  8010b4:	dc800215 	stw	r18,8(sp)
  8010b8:	dfc00415 	stw	ra,16(sp)
  8010bc:	dc400115 	stw	r17,4(sp)
  8010c0:	dc000015 	stw	r16,0(sp)
  8010c4:	2027883a 	mov	r19,r4
  8010c8:	2825883a 	mov	r18,r5
  8010cc:	20000226 	beq	r4,zero,8010d8 <_fflush_r+0x2c>
  8010d0:	20800e17 	ldw	r2,56(r4)
  8010d4:	10005626 	beq	r2,zero,801230 <_fflush_r+0x184>
  8010d8:	9100030b 	ldhu	r4,12(r18)
  8010dc:	20ffffcc 	andi	r3,r4,65535
  8010e0:	18e0001c 	xori	r3,r3,32768
  8010e4:	18e00004 	addi	r3,r3,-32768
  8010e8:	1880020c 	andi	r2,r3,8
  8010ec:	1000261e 	bne	r2,zero,801188 <_fflush_r+0xdc>
  8010f0:	90c00117 	ldw	r3,4(r18)
  8010f4:	20820014 	ori	r2,r4,2048
  8010f8:	9080030d 	sth	r2,12(r18)
  8010fc:	1009883a 	mov	r4,r2
  801100:	00c0400e 	bge	zero,r3,801204 <_fflush_r+0x158>
  801104:	92000a17 	ldw	r8,40(r18)
  801108:	40004026 	beq	r8,zero,80120c <_fflush_r+0x160>
  80110c:	2084000c 	andi	r2,r4,4096
  801110:	10005326 	beq	r2,zero,801260 <_fflush_r+0x1b4>
  801114:	94001417 	ldw	r16,80(r18)
  801118:	9080030b 	ldhu	r2,12(r18)
  80111c:	1080010c 	andi	r2,r2,4
  801120:	1000481e 	bne	r2,zero,801244 <_fflush_r+0x198>
  801124:	91400717 	ldw	r5,28(r18)
  801128:	9809883a 	mov	r4,r19
  80112c:	800d883a 	mov	r6,r16
  801130:	000f883a 	mov	r7,zero
  801134:	403ee83a 	callr	r8
  801138:	8080261e 	bne	r16,r2,8011d4 <_fflush_r+0x128>
  80113c:	9080030b 	ldhu	r2,12(r18)
  801140:	91000417 	ldw	r4,16(r18)
  801144:	90000115 	stw	zero,4(r18)
  801148:	10bdffcc 	andi	r2,r2,63487
  80114c:	10ffffcc 	andi	r3,r2,65535
  801150:	18c4000c 	andi	r3,r3,4096
  801154:	9080030d 	sth	r2,12(r18)
  801158:	91000015 	stw	r4,0(r18)
  80115c:	18002b26 	beq	r3,zero,80120c <_fflush_r+0x160>
  801160:	0007883a 	mov	r3,zero
  801164:	1805883a 	mov	r2,r3
  801168:	94001415 	stw	r16,80(r18)
  80116c:	dfc00417 	ldw	ra,16(sp)
  801170:	dcc00317 	ldw	r19,12(sp)
  801174:	dc800217 	ldw	r18,8(sp)
  801178:	dc400117 	ldw	r17,4(sp)
  80117c:	dc000017 	ldw	r16,0(sp)
  801180:	dec00504 	addi	sp,sp,20
  801184:	f800283a 	ret
  801188:	94400417 	ldw	r17,16(r18)
  80118c:	88001f26 	beq	r17,zero,80120c <_fflush_r+0x160>
  801190:	90800017 	ldw	r2,0(r18)
  801194:	18c000cc 	andi	r3,r3,3
  801198:	94400015 	stw	r17,0(r18)
  80119c:	1461c83a 	sub	r16,r2,r17
  8011a0:	18002526 	beq	r3,zero,801238 <_fflush_r+0x18c>
  8011a4:	0005883a 	mov	r2,zero
  8011a8:	90800215 	stw	r2,8(r18)
  8011ac:	0400170e 	bge	zero,r16,80120c <_fflush_r+0x160>
  8011b0:	90c00917 	ldw	r3,36(r18)
  8011b4:	91400717 	ldw	r5,28(r18)
  8011b8:	880d883a 	mov	r6,r17
  8011bc:	800f883a 	mov	r7,r16
  8011c0:	9809883a 	mov	r4,r19
  8011c4:	183ee83a 	callr	r3
  8011c8:	88a3883a 	add	r17,r17,r2
  8011cc:	80a1c83a 	sub	r16,r16,r2
  8011d0:	00bff616 	blt	zero,r2,8011ac <_fflush_r+0x100>
  8011d4:	9080030b 	ldhu	r2,12(r18)
  8011d8:	00ffffc4 	movi	r3,-1
  8011dc:	10801014 	ori	r2,r2,64
  8011e0:	9080030d 	sth	r2,12(r18)
  8011e4:	1805883a 	mov	r2,r3
  8011e8:	dfc00417 	ldw	ra,16(sp)
  8011ec:	dcc00317 	ldw	r19,12(sp)
  8011f0:	dc800217 	ldw	r18,8(sp)
  8011f4:	dc400117 	ldw	r17,4(sp)
  8011f8:	dc000017 	ldw	r16,0(sp)
  8011fc:	dec00504 	addi	sp,sp,20
  801200:	f800283a 	ret
  801204:	90800f17 	ldw	r2,60(r18)
  801208:	00bfbe16 	blt	zero,r2,801104 <_fflush_r+0x58>
  80120c:	0007883a 	mov	r3,zero
  801210:	1805883a 	mov	r2,r3
  801214:	dfc00417 	ldw	ra,16(sp)
  801218:	dcc00317 	ldw	r19,12(sp)
  80121c:	dc800217 	ldw	r18,8(sp)
  801220:	dc400117 	ldw	r17,4(sp)
  801224:	dc000017 	ldw	r16,0(sp)
  801228:	dec00504 	addi	sp,sp,20
  80122c:	f800283a 	ret
  801230:	080146c0 	call	80146c <__sinit>
  801234:	003fa806 	br	8010d8 <_fflush_r+0x2c>
  801238:	90800517 	ldw	r2,20(r18)
  80123c:	90800215 	stw	r2,8(r18)
  801240:	003fda06 	br	8011ac <_fflush_r+0x100>
  801244:	90800117 	ldw	r2,4(r18)
  801248:	90c00c17 	ldw	r3,48(r18)
  80124c:	80a1c83a 	sub	r16,r16,r2
  801250:	183fb426 	beq	r3,zero,801124 <_fflush_r+0x78>
  801254:	90800f17 	ldw	r2,60(r18)
  801258:	80a1c83a 	sub	r16,r16,r2
  80125c:	003fb106 	br	801124 <_fflush_r+0x78>
  801260:	91400717 	ldw	r5,28(r18)
  801264:	9809883a 	mov	r4,r19
  801268:	000d883a 	mov	r6,zero
  80126c:	01c00044 	movi	r7,1
  801270:	403ee83a 	callr	r8
  801274:	1021883a 	mov	r16,r2
  801278:	00bfffc4 	movi	r2,-1
  80127c:	80800226 	beq	r16,r2,801288 <_fflush_r+0x1dc>
  801280:	92000a17 	ldw	r8,40(r18)
  801284:	003fa406 	br	801118 <_fflush_r+0x6c>
  801288:	98c00017 	ldw	r3,0(r19)
  80128c:	00800744 	movi	r2,29
  801290:	18bfde26 	beq	r3,r2,80120c <_fflush_r+0x160>
  801294:	9080030b 	ldhu	r2,12(r18)
  801298:	8007883a 	mov	r3,r16
  80129c:	10801014 	ori	r2,r2,64
  8012a0:	9080030d 	sth	r2,12(r18)
  8012a4:	003fcf06 	br	8011e4 <_fflush_r+0x138>

008012a8 <fflush>:
  8012a8:	01402034 	movhi	r5,128
  8012ac:	29442b04 	addi	r5,r5,4268
  8012b0:	2007883a 	mov	r3,r4
  8012b4:	20000526 	beq	r4,zero,8012cc <fflush+0x24>
  8012b8:	00802074 	movhi	r2,129
  8012bc:	109b9704 	addi	r2,r2,28252
  8012c0:	11000017 	ldw	r4,0(r2)
  8012c4:	180b883a 	mov	r5,r3
  8012c8:	08010ac1 	jmpi	8010ac <_fflush_r>
  8012cc:	00802074 	movhi	r2,129
  8012d0:	109b9804 	addi	r2,r2,28256
  8012d4:	11000017 	ldw	r4,0(r2)
  8012d8:	08026741 	jmpi	802674 <_fwalk_reent>

008012dc <fgetc>:
  8012dc:	defffd04 	addi	sp,sp,-12
  8012e0:	dc400115 	stw	r17,4(sp)
  8012e4:	04402074 	movhi	r17,129
  8012e8:	8c5b9704 	addi	r17,r17,28252
  8012ec:	88c00017 	ldw	r3,0(r17)
  8012f0:	dc000015 	stw	r16,0(sp)
  8012f4:	dfc00215 	stw	ra,8(sp)
  8012f8:	2021883a 	mov	r16,r4
  8012fc:	18000326 	beq	r3,zero,80130c <fgetc+0x30>
  801300:	18800e17 	ldw	r2,56(r3)
  801304:	1809883a 	mov	r4,r3
  801308:	10000e26 	beq	r2,zero,801344 <fgetc+0x68>
  80130c:	80800117 	ldw	r2,4(r16)
  801310:	800b883a 	mov	r5,r16
  801314:	10bfffc4 	addi	r2,r2,-1
  801318:	80800115 	stw	r2,4(r16)
  80131c:	10000f16 	blt	r2,zero,80135c <fgetc+0x80>
  801320:	80c00017 	ldw	r3,0(r16)
  801324:	18800003 	ldbu	r2,0(r3)
  801328:	18c00044 	addi	r3,r3,1
  80132c:	80c00015 	stw	r3,0(r16)
  801330:	dfc00217 	ldw	ra,8(sp)
  801334:	dc400117 	ldw	r17,4(sp)
  801338:	dc000017 	ldw	r16,0(sp)
  80133c:	dec00304 	addi	sp,sp,12
  801340:	f800283a 	ret
  801344:	080146c0 	call	80146c <__sinit>
  801348:	80800117 	ldw	r2,4(r16)
  80134c:	800b883a 	mov	r5,r16
  801350:	10bfffc4 	addi	r2,r2,-1
  801354:	80800115 	stw	r2,4(r16)
  801358:	103ff10e 	bge	r2,zero,801320 <fgetc+0x44>
  80135c:	89000017 	ldw	r4,0(r17)
  801360:	dfc00217 	ldw	ra,8(sp)
  801364:	dc400117 	ldw	r17,4(sp)
  801368:	dc000017 	ldw	r16,0(sp)
  80136c:	dec00304 	addi	sp,sp,12
  801370:	0803c881 	jmpi	803c88 <__srget_r>

00801374 <_fgetc_r>:
  801374:	defffd04 	addi	sp,sp,-12
  801378:	dc400115 	stw	r17,4(sp)
  80137c:	dc000015 	stw	r16,0(sp)
  801380:	dfc00215 	stw	ra,8(sp)
  801384:	2021883a 	mov	r16,r4
  801388:	2823883a 	mov	r17,r5
  80138c:	20000226 	beq	r4,zero,801398 <_fgetc_r+0x24>
  801390:	20800e17 	ldw	r2,56(r4)
  801394:	10000f26 	beq	r2,zero,8013d4 <_fgetc_r+0x60>
  801398:	88800117 	ldw	r2,4(r17)
  80139c:	8009883a 	mov	r4,r16
  8013a0:	880b883a 	mov	r5,r17
  8013a4:	10bfffc4 	addi	r2,r2,-1
  8013a8:	88800115 	stw	r2,4(r17)
  8013ac:	10001016 	blt	r2,zero,8013f0 <_fgetc_r+0x7c>
  8013b0:	88c00017 	ldw	r3,0(r17)
  8013b4:	18800003 	ldbu	r2,0(r3)
  8013b8:	18c00044 	addi	r3,r3,1
  8013bc:	88c00015 	stw	r3,0(r17)
  8013c0:	dfc00217 	ldw	ra,8(sp)
  8013c4:	dc400117 	ldw	r17,4(sp)
  8013c8:	dc000017 	ldw	r16,0(sp)
  8013cc:	dec00304 	addi	sp,sp,12
  8013d0:	f800283a 	ret
  8013d4:	080146c0 	call	80146c <__sinit>
  8013d8:	88800117 	ldw	r2,4(r17)
  8013dc:	8009883a 	mov	r4,r16
  8013e0:	880b883a 	mov	r5,r17
  8013e4:	10bfffc4 	addi	r2,r2,-1
  8013e8:	88800115 	stw	r2,4(r17)
  8013ec:	103ff00e 	bge	r2,zero,8013b0 <_fgetc_r+0x3c>
  8013f0:	dfc00217 	ldw	ra,8(sp)
  8013f4:	dc400117 	ldw	r17,4(sp)
  8013f8:	dc000017 	ldw	r16,0(sp)
  8013fc:	dec00304 	addi	sp,sp,12
  801400:	0803c881 	jmpi	803c88 <__srget_r>

00801404 <std>:
  801404:	00802034 	movhi	r2,128
  801408:	108fd004 	addi	r2,r2,16192
  80140c:	20800b15 	stw	r2,44(r4)
  801410:	00802034 	movhi	r2,128
  801414:	10900b04 	addi	r2,r2,16428
  801418:	20800815 	stw	r2,32(r4)
  80141c:	00c02034 	movhi	r3,128
  801420:	18cfec04 	addi	r3,r3,16304
  801424:	00802034 	movhi	r2,128
  801428:	108fd204 	addi	r2,r2,16200
  80142c:	2140030d 	sth	r5,12(r4)
  801430:	2180038d 	sth	r6,14(r4)
  801434:	20c00915 	stw	r3,36(r4)
  801438:	20800a15 	stw	r2,40(r4)
  80143c:	20000015 	stw	zero,0(r4)
  801440:	20000115 	stw	zero,4(r4)
  801444:	20000215 	stw	zero,8(r4)
  801448:	20000415 	stw	zero,16(r4)
  80144c:	20000515 	stw	zero,20(r4)
  801450:	20000615 	stw	zero,24(r4)
  801454:	21000715 	stw	r4,28(r4)
  801458:	f800283a 	ret

0080145c <__sfp_lock_acquire>:
  80145c:	f800283a 	ret

00801460 <__sfp_lock_release>:
  801460:	f800283a 	ret

00801464 <__sinit_lock_acquire>:
  801464:	f800283a 	ret

00801468 <__sinit_lock_release>:
  801468:	f800283a 	ret

0080146c <__sinit>:
  80146c:	20800e17 	ldw	r2,56(r4)
  801470:	defffd04 	addi	sp,sp,-12
  801474:	dc400115 	stw	r17,4(sp)
  801478:	dc000015 	stw	r16,0(sp)
  80147c:	dfc00215 	stw	ra,8(sp)
  801480:	04400044 	movi	r17,1
  801484:	01400104 	movi	r5,4
  801488:	000d883a 	mov	r6,zero
  80148c:	2021883a 	mov	r16,r4
  801490:	2200bb04 	addi	r8,r4,748
  801494:	200f883a 	mov	r7,r4
  801498:	10000526 	beq	r2,zero,8014b0 <__sinit+0x44>
  80149c:	dfc00217 	ldw	ra,8(sp)
  8014a0:	dc400117 	ldw	r17,4(sp)
  8014a4:	dc000017 	ldw	r16,0(sp)
  8014a8:	dec00304 	addi	sp,sp,12
  8014ac:	f800283a 	ret
  8014b0:	21000117 	ldw	r4,4(r4)
  8014b4:	00802034 	movhi	r2,128
  8014b8:	10855404 	addi	r2,r2,5456
  8014bc:	00c000c4 	movi	r3,3
  8014c0:	80800f15 	stw	r2,60(r16)
  8014c4:	80c0b915 	stw	r3,740(r16)
  8014c8:	8200ba15 	stw	r8,744(r16)
  8014cc:	84400e15 	stw	r17,56(r16)
  8014d0:	8000b815 	stw	zero,736(r16)
  8014d4:	08014040 	call	801404 <std>
  8014d8:	81000217 	ldw	r4,8(r16)
  8014dc:	880d883a 	mov	r6,r17
  8014e0:	800f883a 	mov	r7,r16
  8014e4:	01400284 	movi	r5,10
  8014e8:	08014040 	call	801404 <std>
  8014ec:	81000317 	ldw	r4,12(r16)
  8014f0:	800f883a 	mov	r7,r16
  8014f4:	01400484 	movi	r5,18
  8014f8:	01800084 	movi	r6,2
  8014fc:	dfc00217 	ldw	ra,8(sp)
  801500:	dc400117 	ldw	r17,4(sp)
  801504:	dc000017 	ldw	r16,0(sp)
  801508:	dec00304 	addi	sp,sp,12
  80150c:	08014041 	jmpi	801404 <std>

00801510 <__fp_lock>:
  801510:	0005883a 	mov	r2,zero
  801514:	f800283a 	ret

00801518 <__fp_unlock>:
  801518:	0005883a 	mov	r2,zero
  80151c:	f800283a 	ret

00801520 <__fp_unlock_all>:
  801520:	00802074 	movhi	r2,129
  801524:	109b9704 	addi	r2,r2,28252
  801528:	11000017 	ldw	r4,0(r2)
  80152c:	01402034 	movhi	r5,128
  801530:	29454604 	addi	r5,r5,5400
  801534:	080273c1 	jmpi	80273c <_fwalk>

00801538 <__fp_lock_all>:
  801538:	00802074 	movhi	r2,129
  80153c:	109b9704 	addi	r2,r2,28252
  801540:	11000017 	ldw	r4,0(r2)
  801544:	01402034 	movhi	r5,128
  801548:	29454404 	addi	r5,r5,5392
  80154c:	080273c1 	jmpi	80273c <_fwalk>

00801550 <_cleanup_r>:
  801550:	01402034 	movhi	r5,128
  801554:	29442604 	addi	r5,r5,4248
  801558:	080273c1 	jmpi	80273c <_fwalk>

0080155c <_cleanup>:
  80155c:	00802074 	movhi	r2,129
  801560:	109b9804 	addi	r2,r2,28256
  801564:	11000017 	ldw	r4,0(r2)
  801568:	08015501 	jmpi	801550 <_cleanup_r>

0080156c <__sfmoreglue>:
  80156c:	defffc04 	addi	sp,sp,-16
  801570:	dc400115 	stw	r17,4(sp)
  801574:	2c401724 	muli	r17,r5,92
  801578:	dc800215 	stw	r18,8(sp)
  80157c:	2825883a 	mov	r18,r5
  801580:	89400304 	addi	r5,r17,12
  801584:	dc000015 	stw	r16,0(sp)
  801588:	dfc00315 	stw	ra,12(sp)
  80158c:	08029880 	call	802988 <_malloc_r>
  801590:	0021883a 	mov	r16,zero
  801594:	880d883a 	mov	r6,r17
  801598:	000b883a 	mov	r5,zero
  80159c:	10000626 	beq	r2,zero,8015b8 <__sfmoreglue+0x4c>
  8015a0:	11000304 	addi	r4,r2,12
  8015a4:	14800115 	stw	r18,4(r2)
  8015a8:	10000015 	stw	zero,0(r2)
  8015ac:	11000215 	stw	r4,8(r2)
  8015b0:	1021883a 	mov	r16,r2
  8015b4:	080332c0 	call	80332c <memset>
  8015b8:	8005883a 	mov	r2,r16
  8015bc:	dfc00317 	ldw	ra,12(sp)
  8015c0:	dc800217 	ldw	r18,8(sp)
  8015c4:	dc400117 	ldw	r17,4(sp)
  8015c8:	dc000017 	ldw	r16,0(sp)
  8015cc:	dec00404 	addi	sp,sp,16
  8015d0:	f800283a 	ret

008015d4 <__sfp>:
  8015d4:	defffd04 	addi	sp,sp,-12
  8015d8:	00802074 	movhi	r2,129
  8015dc:	109b9804 	addi	r2,r2,28256
  8015e0:	dc000015 	stw	r16,0(sp)
  8015e4:	14000017 	ldw	r16,0(r2)
  8015e8:	dc400115 	stw	r17,4(sp)
  8015ec:	dfc00215 	stw	ra,8(sp)
  8015f0:	80800e17 	ldw	r2,56(r16)
  8015f4:	2023883a 	mov	r17,r4
  8015f8:	10002626 	beq	r2,zero,801694 <__sfp+0xc0>
  8015fc:	8400b804 	addi	r16,r16,736
  801600:	80800117 	ldw	r2,4(r16)
  801604:	81000217 	ldw	r4,8(r16)
  801608:	10ffffc4 	addi	r3,r2,-1
  80160c:	18000916 	blt	r3,zero,801634 <__sfp+0x60>
  801610:	2080030f 	ldh	r2,12(r4)
  801614:	10000b26 	beq	r2,zero,801644 <__sfp+0x70>
  801618:	017fffc4 	movi	r5,-1
  80161c:	00000206 	br	801628 <__sfp+0x54>
  801620:	2080030f 	ldh	r2,12(r4)
  801624:	10000726 	beq	r2,zero,801644 <__sfp+0x70>
  801628:	18ffffc4 	addi	r3,r3,-1
  80162c:	21001704 	addi	r4,r4,92
  801630:	197ffb1e 	bne	r3,r5,801620 <__sfp+0x4c>
  801634:	80800017 	ldw	r2,0(r16)
  801638:	10001926 	beq	r2,zero,8016a0 <__sfp+0xcc>
  80163c:	1021883a 	mov	r16,r2
  801640:	003fef06 	br	801600 <__sfp+0x2c>
  801644:	00bfffc4 	movi	r2,-1
  801648:	00c00044 	movi	r3,1
  80164c:	2080038d 	sth	r2,14(r4)
  801650:	20c0030d 	sth	r3,12(r4)
  801654:	20000015 	stw	zero,0(r4)
  801658:	20000215 	stw	zero,8(r4)
  80165c:	20000115 	stw	zero,4(r4)
  801660:	20000415 	stw	zero,16(r4)
  801664:	20000515 	stw	zero,20(r4)
  801668:	20000615 	stw	zero,24(r4)
  80166c:	20000c15 	stw	zero,48(r4)
  801670:	20000d15 	stw	zero,52(r4)
  801674:	20001115 	stw	zero,68(r4)
  801678:	20001215 	stw	zero,72(r4)
  80167c:	2005883a 	mov	r2,r4
  801680:	dfc00217 	ldw	ra,8(sp)
  801684:	dc400117 	ldw	r17,4(sp)
  801688:	dc000017 	ldw	r16,0(sp)
  80168c:	dec00304 	addi	sp,sp,12
  801690:	f800283a 	ret
  801694:	8009883a 	mov	r4,r16
  801698:	080146c0 	call	80146c <__sinit>
  80169c:	003fd706 	br	8015fc <__sfp+0x28>
  8016a0:	8809883a 	mov	r4,r17
  8016a4:	01400104 	movi	r5,4
  8016a8:	080156c0 	call	80156c <__sfmoreglue>
  8016ac:	80800015 	stw	r2,0(r16)
  8016b0:	103fe21e 	bne	r2,zero,80163c <__sfp+0x68>
  8016b4:	00800304 	movi	r2,12
  8016b8:	0009883a 	mov	r4,zero
  8016bc:	88800015 	stw	r2,0(r17)
  8016c0:	003fee06 	br	80167c <__sfp+0xa8>

008016c4 <_fopen_r>:
  8016c4:	defffa04 	addi	sp,sp,-24
  8016c8:	dcc00415 	stw	r19,16(sp)
  8016cc:	2827883a 	mov	r19,r5
  8016d0:	300b883a 	mov	r5,r6
  8016d4:	d80d883a 	mov	r6,sp
  8016d8:	dc800315 	stw	r18,12(sp)
  8016dc:	dc400215 	stw	r17,8(sp)
  8016e0:	dc000115 	stw	r16,4(sp)
  8016e4:	dfc00515 	stw	ra,20(sp)
  8016e8:	2021883a 	mov	r16,r4
  8016ec:	08091980 	call	809198 <__sflags>
  8016f0:	1025883a 	mov	r18,r2
  8016f4:	8009883a 	mov	r4,r16
  8016f8:	0023883a 	mov	r17,zero
  8016fc:	1000081e 	bne	r2,zero,801720 <_fopen_r+0x5c>
  801700:	8805883a 	mov	r2,r17
  801704:	dfc00517 	ldw	ra,20(sp)
  801708:	dcc00417 	ldw	r19,16(sp)
  80170c:	dc800317 	ldw	r18,12(sp)
  801710:	dc400217 	ldw	r17,8(sp)
  801714:	dc000117 	ldw	r16,4(sp)
  801718:	dec00604 	addi	sp,sp,24
  80171c:	f800283a 	ret
  801720:	08015d40 	call	8015d4 <__sfp>
  801724:	1023883a 	mov	r17,r2
  801728:	980b883a 	mov	r5,r19
  80172c:	8009883a 	mov	r4,r16
  801730:	01c06d84 	movi	r7,438
  801734:	103ff226 	beq	r2,zero,801700 <_fopen_r+0x3c>
  801738:	d9800017 	ldw	r6,0(sp)
  80173c:	08033c40 	call	8033c4 <_open_r>
  801740:	10001816 	blt	r2,zero,8017a4 <_fopen_r+0xe0>
  801744:	00c02034 	movhi	r3,128
  801748:	18cfec04 	addi	r3,r3,16304
  80174c:	923fffcc 	andi	r8,r18,65535
  801750:	8880038d 	sth	r2,14(r17)
  801754:	00802034 	movhi	r2,128
  801758:	10900b04 	addi	r2,r2,16428
  80175c:	88800815 	stw	r2,32(r17)
  801760:	88c00915 	stw	r3,36(r17)
  801764:	00802034 	movhi	r2,128
  801768:	108fd204 	addi	r2,r2,16200
  80176c:	00c02034 	movhi	r3,128
  801770:	18cfd004 	addi	r3,r3,16192
  801774:	4200400c 	andi	r8,r8,256
  801778:	8c80030d 	sth	r18,12(r17)
  80177c:	8009883a 	mov	r4,r16
  801780:	880b883a 	mov	r5,r17
  801784:	000d883a 	mov	r6,zero
  801788:	01c00084 	movi	r7,2
  80178c:	88800a15 	stw	r2,40(r17)
  801790:	88c00b15 	stw	r3,44(r17)
  801794:	8c400715 	stw	r17,28(r17)
  801798:	403fd926 	beq	r8,zero,801700 <_fopen_r+0x3c>
  80179c:	0801d040 	call	801d04 <_fseek_r>
  8017a0:	003fd706 	br	801700 <_fopen_r+0x3c>
  8017a4:	080145c0 	call	80145c <__sfp_lock_acquire>
  8017a8:	8800030d 	sth	zero,12(r17)
  8017ac:	08014600 	call	801460 <__sfp_lock_release>
  8017b0:	0023883a 	mov	r17,zero
  8017b4:	003fd206 	br	801700 <_fopen_r+0x3c>

008017b8 <fopen>:
  8017b8:	01802074 	movhi	r6,129
  8017bc:	319b9704 	addi	r6,r6,28252
  8017c0:	2007883a 	mov	r3,r4
  8017c4:	31000017 	ldw	r4,0(r6)
  8017c8:	280d883a 	mov	r6,r5
  8017cc:	180b883a 	mov	r5,r3
  8017d0:	08016c41 	jmpi	8016c4 <_fopen_r>

008017d4 <fprintf>:
  8017d4:	defffc04 	addi	sp,sp,-16
  8017d8:	dfc00115 	stw	ra,4(sp)
  8017dc:	d9800215 	stw	r6,8(sp)
  8017e0:	d9c00315 	stw	r7,12(sp)
  8017e4:	d8800204 	addi	r2,sp,8
  8017e8:	100d883a 	mov	r6,r2
  8017ec:	d8800015 	stw	r2,0(sp)
  8017f0:	08060040 	call	806004 <__vfprintf_internal>
  8017f4:	dfc00117 	ldw	ra,4(sp)
  8017f8:	dec00404 	addi	sp,sp,16
  8017fc:	f800283a 	ret

00801800 <_fprintf_r>:
  801800:	defffd04 	addi	sp,sp,-12
  801804:	2807883a 	mov	r3,r5
  801808:	dfc00115 	stw	ra,4(sp)
  80180c:	d9c00215 	stw	r7,8(sp)
  801810:	d8800204 	addi	r2,sp,8
  801814:	300b883a 	mov	r5,r6
  801818:	1809883a 	mov	r4,r3
  80181c:	100d883a 	mov	r6,r2
  801820:	d8800015 	stw	r2,0(sp)
  801824:	08060040 	call	806004 <__vfprintf_internal>
  801828:	dfc00117 	ldw	ra,4(sp)
  80182c:	dec00304 	addi	sp,sp,12
  801830:	f800283a 	ret

00801834 <_fputs_r>:
  801834:	defff804 	addi	sp,sp,-32
  801838:	dc000515 	stw	r16,20(sp)
  80183c:	2021883a 	mov	r16,r4
  801840:	2809883a 	mov	r4,r5
  801844:	dc400615 	stw	r17,24(sp)
  801848:	dfc00715 	stw	ra,28(sp)
  80184c:	3023883a 	mov	r17,r6
  801850:	d9400015 	stw	r5,0(sp)
  801854:	080408c0 	call	80408c <strlen>
  801858:	00c00044 	movi	r3,1
  80185c:	d8800115 	stw	r2,4(sp)
  801860:	d8c00315 	stw	r3,12(sp)
  801864:	d8800415 	stw	r2,16(sp)
  801868:	dec00215 	stw	sp,8(sp)
  80186c:	80000326 	beq	r16,zero,80187c <_fputs_r+0x48>
  801870:	80800e17 	ldw	r2,56(r16)
  801874:	8009883a 	mov	r4,r16
  801878:	10000926 	beq	r2,zero,8018a0 <_fputs_r+0x6c>
  80187c:	8009883a 	mov	r4,r16
  801880:	880b883a 	mov	r5,r17
  801884:	d9800204 	addi	r6,sp,8
  801888:	08021d80 	call	8021d8 <__sfvwrite_r>
  80188c:	dfc00717 	ldw	ra,28(sp)
  801890:	dc400617 	ldw	r17,24(sp)
  801894:	dc000517 	ldw	r16,20(sp)
  801898:	dec00804 	addi	sp,sp,32
  80189c:	f800283a 	ret
  8018a0:	080146c0 	call	80146c <__sinit>
  8018a4:	003ff506 	br	80187c <_fputs_r+0x48>

008018a8 <fputs>:
  8018a8:	01802074 	movhi	r6,129
  8018ac:	319b9704 	addi	r6,r6,28252
  8018b0:	2007883a 	mov	r3,r4
  8018b4:	31000017 	ldw	r4,0(r6)
  8018b8:	280d883a 	mov	r6,r5
  8018bc:	180b883a 	mov	r5,r3
  8018c0:	08018341 	jmpi	801834 <_fputs_r>

008018c4 <_malloc_trim_r>:
  8018c4:	defffb04 	addi	sp,sp,-20
  8018c8:	dcc00315 	stw	r19,12(sp)
  8018cc:	04c02074 	movhi	r19,129
  8018d0:	9cd58904 	addi	r19,r19,22052
  8018d4:	dc800215 	stw	r18,8(sp)
  8018d8:	dc400115 	stw	r17,4(sp)
  8018dc:	dc000015 	stw	r16,0(sp)
  8018e0:	2823883a 	mov	r17,r5
  8018e4:	2025883a 	mov	r18,r4
  8018e8:	dfc00415 	stw	ra,16(sp)
  8018ec:	0810d780 	call	810d78 <__malloc_lock>
  8018f0:	98800217 	ldw	r2,8(r19)
  8018f4:	9009883a 	mov	r4,r18
  8018f8:	000b883a 	mov	r5,zero
  8018fc:	10c00117 	ldw	r3,4(r2)
  801900:	00bfff04 	movi	r2,-4
  801904:	18a0703a 	and	r16,r3,r2
  801908:	8463c83a 	sub	r17,r16,r17
  80190c:	8c43fbc4 	addi	r17,r17,4079
  801910:	8822d33a 	srli	r17,r17,12
  801914:	0083ffc4 	movi	r2,4095
  801918:	8c7fffc4 	addi	r17,r17,-1
  80191c:	8822933a 	slli	r17,r17,12
  801920:	1440060e 	bge	r2,r17,80193c <_malloc_trim_r+0x78>
  801924:	0803ce80 	call	803ce8 <_sbrk_r>
  801928:	98c00217 	ldw	r3,8(r19)
  80192c:	9009883a 	mov	r4,r18
  801930:	044bc83a 	sub	r5,zero,r17
  801934:	80c7883a 	add	r3,r16,r3
  801938:	10c00926 	beq	r2,r3,801960 <_malloc_trim_r+0x9c>
  80193c:	0810d980 	call	810d98 <__malloc_unlock>
  801940:	0005883a 	mov	r2,zero
  801944:	dfc00417 	ldw	ra,16(sp)
  801948:	dcc00317 	ldw	r19,12(sp)
  80194c:	dc800217 	ldw	r18,8(sp)
  801950:	dc400117 	ldw	r17,4(sp)
  801954:	dc000017 	ldw	r16,0(sp)
  801958:	dec00504 	addi	sp,sp,20
  80195c:	f800283a 	ret
  801960:	9009883a 	mov	r4,r18
  801964:	0803ce80 	call	803ce8 <_sbrk_r>
  801968:	844dc83a 	sub	r6,r16,r17
  80196c:	00ffffc4 	movi	r3,-1
  801970:	9009883a 	mov	r4,r18
  801974:	000b883a 	mov	r5,zero
  801978:	01c020b4 	movhi	r7,130
  80197c:	39e30604 	addi	r7,r7,-29672
  801980:	31800054 	ori	r6,r6,1
  801984:	10c00926 	beq	r2,r3,8019ac <_malloc_trim_r+0xe8>
  801988:	38800017 	ldw	r2,0(r7)
  80198c:	98c00217 	ldw	r3,8(r19)
  801990:	9009883a 	mov	r4,r18
  801994:	1445c83a 	sub	r2,r2,r17
  801998:	38800015 	stw	r2,0(r7)
  80199c:	19800115 	stw	r6,4(r3)
  8019a0:	0810d980 	call	810d98 <__malloc_unlock>
  8019a4:	00800044 	movi	r2,1
  8019a8:	003fe606 	br	801944 <_malloc_trim_r+0x80>
  8019ac:	0803ce80 	call	803ce8 <_sbrk_r>
  8019b0:	99800217 	ldw	r6,8(r19)
  8019b4:	100f883a 	mov	r7,r2
  8019b8:	9009883a 	mov	r4,r18
  8019bc:	1187c83a 	sub	r3,r2,r6
  8019c0:	008003c4 	movi	r2,15
  8019c4:	19400054 	ori	r5,r3,1
  8019c8:	10ffdc0e 	bge	r2,r3,80193c <_malloc_trim_r+0x78>
  8019cc:	00802074 	movhi	r2,129
  8019d0:	109b9a04 	addi	r2,r2,28264
  8019d4:	10c00017 	ldw	r3,0(r2)
  8019d8:	008020b4 	movhi	r2,130
  8019dc:	10a30604 	addi	r2,r2,-29672
  8019e0:	31400115 	stw	r5,4(r6)
  8019e4:	38c7c83a 	sub	r3,r7,r3
  8019e8:	10c00015 	stw	r3,0(r2)
  8019ec:	003fd306 	br	80193c <_malloc_trim_r+0x78>

008019f0 <_free_r>:
  8019f0:	defffd04 	addi	sp,sp,-12
  8019f4:	dc400115 	stw	r17,4(sp)
  8019f8:	dc000015 	stw	r16,0(sp)
  8019fc:	dfc00215 	stw	ra,8(sp)
  801a00:	2821883a 	mov	r16,r5
  801a04:	2023883a 	mov	r17,r4
  801a08:	28005a26 	beq	r5,zero,801b74 <_free_r+0x184>
  801a0c:	0810d780 	call	810d78 <__malloc_lock>
  801a10:	823ffe04 	addi	r8,r16,-8
  801a14:	41400117 	ldw	r5,4(r8)
  801a18:	00bfff84 	movi	r2,-2
  801a1c:	02802074 	movhi	r10,129
  801a20:	52958904 	addi	r10,r10,22052
  801a24:	288e703a 	and	r7,r5,r2
  801a28:	41cd883a 	add	r6,r8,r7
  801a2c:	30c00117 	ldw	r3,4(r6)
  801a30:	51000217 	ldw	r4,8(r10)
  801a34:	00bfff04 	movi	r2,-4
  801a38:	1892703a 	and	r9,r3,r2
  801a3c:	5017883a 	mov	r11,r10
  801a40:	31006726 	beq	r6,r4,801be0 <_free_r+0x1f0>
  801a44:	2880004c 	andi	r2,r5,1
  801a48:	1005003a 	cmpeq	r2,r2,zero
  801a4c:	32400115 	stw	r9,4(r6)
  801a50:	10001a1e 	bne	r2,zero,801abc <_free_r+0xcc>
  801a54:	000b883a 	mov	r5,zero
  801a58:	3247883a 	add	r3,r6,r9
  801a5c:	18800117 	ldw	r2,4(r3)
  801a60:	1080004c 	andi	r2,r2,1
  801a64:	1000231e 	bne	r2,zero,801af4 <_free_r+0x104>
  801a68:	280ac03a 	cmpne	r5,r5,zero
  801a6c:	3a4f883a 	add	r7,r7,r9
  801a70:	2800451e 	bne	r5,zero,801b88 <_free_r+0x198>
  801a74:	31000217 	ldw	r4,8(r6)
  801a78:	00802074 	movhi	r2,129
  801a7c:	10958b04 	addi	r2,r2,22060
  801a80:	20807b26 	beq	r4,r2,801c70 <_free_r+0x280>
  801a84:	30800317 	ldw	r2,12(r6)
  801a88:	3a07883a 	add	r3,r7,r8
  801a8c:	19c00015 	stw	r7,0(r3)
  801a90:	11000215 	stw	r4,8(r2)
  801a94:	20800315 	stw	r2,12(r4)
  801a98:	38800054 	ori	r2,r7,1
  801a9c:	40800115 	stw	r2,4(r8)
  801aa0:	28001a26 	beq	r5,zero,801b0c <_free_r+0x11c>
  801aa4:	8809883a 	mov	r4,r17
  801aa8:	dfc00217 	ldw	ra,8(sp)
  801aac:	dc400117 	ldw	r17,4(sp)
  801ab0:	dc000017 	ldw	r16,0(sp)
  801ab4:	dec00304 	addi	sp,sp,12
  801ab8:	0810d981 	jmpi	810d98 <__malloc_unlock>
  801abc:	80bffe17 	ldw	r2,-8(r16)
  801ac0:	50c00204 	addi	r3,r10,8
  801ac4:	4091c83a 	sub	r8,r8,r2
  801ac8:	41000217 	ldw	r4,8(r8)
  801acc:	388f883a 	add	r7,r7,r2
  801ad0:	20c06126 	beq	r4,r3,801c58 <_free_r+0x268>
  801ad4:	40800317 	ldw	r2,12(r8)
  801ad8:	3247883a 	add	r3,r6,r9
  801adc:	000b883a 	mov	r5,zero
  801ae0:	11000215 	stw	r4,8(r2)
  801ae4:	20800315 	stw	r2,12(r4)
  801ae8:	18800117 	ldw	r2,4(r3)
  801aec:	1080004c 	andi	r2,r2,1
  801af0:	103fdd26 	beq	r2,zero,801a68 <_free_r+0x78>
  801af4:	38800054 	ori	r2,r7,1
  801af8:	3a07883a 	add	r3,r7,r8
  801afc:	280ac03a 	cmpne	r5,r5,zero
  801b00:	40800115 	stw	r2,4(r8)
  801b04:	19c00015 	stw	r7,0(r3)
  801b08:	283fe61e 	bne	r5,zero,801aa4 <_free_r+0xb4>
  801b0c:	00807fc4 	movi	r2,511
  801b10:	11c01f2e 	bgeu	r2,r7,801b90 <_free_r+0x1a0>
  801b14:	3806d27a 	srli	r3,r7,9
  801b18:	1800481e 	bne	r3,zero,801c3c <_free_r+0x24c>
  801b1c:	3804d0fa 	srli	r2,r7,3
  801b20:	100690fa 	slli	r3,r2,3
  801b24:	1acd883a 	add	r6,r3,r11
  801b28:	31400217 	ldw	r5,8(r6)
  801b2c:	31405926 	beq	r6,r5,801c94 <_free_r+0x2a4>
  801b30:	28800117 	ldw	r2,4(r5)
  801b34:	00ffff04 	movi	r3,-4
  801b38:	10c4703a 	and	r2,r2,r3
  801b3c:	3880022e 	bgeu	r7,r2,801b48 <_free_r+0x158>
  801b40:	29400217 	ldw	r5,8(r5)
  801b44:	317ffa1e 	bne	r6,r5,801b30 <_free_r+0x140>
  801b48:	29800317 	ldw	r6,12(r5)
  801b4c:	41800315 	stw	r6,12(r8)
  801b50:	41400215 	stw	r5,8(r8)
  801b54:	8809883a 	mov	r4,r17
  801b58:	2a000315 	stw	r8,12(r5)
  801b5c:	32000215 	stw	r8,8(r6)
  801b60:	dfc00217 	ldw	ra,8(sp)
  801b64:	dc400117 	ldw	r17,4(sp)
  801b68:	dc000017 	ldw	r16,0(sp)
  801b6c:	dec00304 	addi	sp,sp,12
  801b70:	0810d981 	jmpi	810d98 <__malloc_unlock>
  801b74:	dfc00217 	ldw	ra,8(sp)
  801b78:	dc400117 	ldw	r17,4(sp)
  801b7c:	dc000017 	ldw	r16,0(sp)
  801b80:	dec00304 	addi	sp,sp,12
  801b84:	f800283a 	ret
  801b88:	31000217 	ldw	r4,8(r6)
  801b8c:	003fbd06 	br	801a84 <_free_r+0x94>
  801b90:	3806d0fa 	srli	r3,r7,3
  801b94:	00800044 	movi	r2,1
  801b98:	51400117 	ldw	r5,4(r10)
  801b9c:	180890fa 	slli	r4,r3,3
  801ba0:	1807d0ba 	srai	r3,r3,2
  801ba4:	22c9883a 	add	r4,r4,r11
  801ba8:	21800217 	ldw	r6,8(r4)
  801bac:	10c4983a 	sll	r2,r2,r3
  801bb0:	41000315 	stw	r4,12(r8)
  801bb4:	41800215 	stw	r6,8(r8)
  801bb8:	288ab03a 	or	r5,r5,r2
  801bbc:	22000215 	stw	r8,8(r4)
  801bc0:	8809883a 	mov	r4,r17
  801bc4:	51400115 	stw	r5,4(r10)
  801bc8:	32000315 	stw	r8,12(r6)
  801bcc:	dfc00217 	ldw	ra,8(sp)
  801bd0:	dc400117 	ldw	r17,4(sp)
  801bd4:	dc000017 	ldw	r16,0(sp)
  801bd8:	dec00304 	addi	sp,sp,12
  801bdc:	0810d981 	jmpi	810d98 <__malloc_unlock>
  801be0:	2880004c 	andi	r2,r5,1
  801be4:	3a4d883a 	add	r6,r7,r9
  801be8:	1000071e 	bne	r2,zero,801c08 <_free_r+0x218>
  801bec:	80bffe17 	ldw	r2,-8(r16)
  801bf0:	4091c83a 	sub	r8,r8,r2
  801bf4:	41000317 	ldw	r4,12(r8)
  801bf8:	40c00217 	ldw	r3,8(r8)
  801bfc:	308d883a 	add	r6,r6,r2
  801c00:	20c00215 	stw	r3,8(r4)
  801c04:	19000315 	stw	r4,12(r3)
  801c08:	00802074 	movhi	r2,129
  801c0c:	109b9904 	addi	r2,r2,28260
  801c10:	11000017 	ldw	r4,0(r2)
  801c14:	30c00054 	ori	r3,r6,1
  801c18:	52000215 	stw	r8,8(r10)
  801c1c:	40c00115 	stw	r3,4(r8)
  801c20:	313fa036 	bltu	r6,r4,801aa4 <_free_r+0xb4>
  801c24:	008020b4 	movhi	r2,130
  801c28:	10a2ee04 	addi	r2,r2,-29768
  801c2c:	11400017 	ldw	r5,0(r2)
  801c30:	8809883a 	mov	r4,r17
  801c34:	08018c40 	call	8018c4 <_malloc_trim_r>
  801c38:	003f9a06 	br	801aa4 <_free_r+0xb4>
  801c3c:	00800104 	movi	r2,4
  801c40:	10c0072e 	bgeu	r2,r3,801c60 <_free_r+0x270>
  801c44:	00800504 	movi	r2,20
  801c48:	10c01936 	bltu	r2,r3,801cb0 <_free_r+0x2c0>
  801c4c:	188016c4 	addi	r2,r3,91
  801c50:	100690fa 	slli	r3,r2,3
  801c54:	003fb306 	br	801b24 <_free_r+0x134>
  801c58:	01400044 	movi	r5,1
  801c5c:	003f7e06 	br	801a58 <_free_r+0x68>
  801c60:	3804d1ba 	srli	r2,r7,6
  801c64:	10800e04 	addi	r2,r2,56
  801c68:	100690fa 	slli	r3,r2,3
  801c6c:	003fad06 	br	801b24 <_free_r+0x134>
  801c70:	22000315 	stw	r8,12(r4)
  801c74:	22000215 	stw	r8,8(r4)
  801c78:	3a05883a 	add	r2,r7,r8
  801c7c:	38c00054 	ori	r3,r7,1
  801c80:	11c00015 	stw	r7,0(r2)
  801c84:	41000215 	stw	r4,8(r8)
  801c88:	40c00115 	stw	r3,4(r8)
  801c8c:	41000315 	stw	r4,12(r8)
  801c90:	003f8406 	br	801aa4 <_free_r+0xb4>
  801c94:	1005d0ba 	srai	r2,r2,2
  801c98:	00c00044 	movi	r3,1
  801c9c:	51000117 	ldw	r4,4(r10)
  801ca0:	1886983a 	sll	r3,r3,r2
  801ca4:	20c8b03a 	or	r4,r4,r3
  801ca8:	51000115 	stw	r4,4(r10)
  801cac:	003fa706 	br	801b4c <_free_r+0x15c>
  801cb0:	00801504 	movi	r2,84
  801cb4:	10c00436 	bltu	r2,r3,801cc8 <_free_r+0x2d8>
  801cb8:	3804d33a 	srli	r2,r7,12
  801cbc:	10801b84 	addi	r2,r2,110
  801cc0:	100690fa 	slli	r3,r2,3
  801cc4:	003f9706 	br	801b24 <_free_r+0x134>
  801cc8:	00805504 	movi	r2,340
  801ccc:	10c00436 	bltu	r2,r3,801ce0 <_free_r+0x2f0>
  801cd0:	3804d3fa 	srli	r2,r7,15
  801cd4:	10801dc4 	addi	r2,r2,119
  801cd8:	100690fa 	slli	r3,r2,3
  801cdc:	003f9106 	br	801b24 <_free_r+0x134>
  801ce0:	00815504 	movi	r2,1364
  801ce4:	10c0032e 	bgeu	r2,r3,801cf4 <_free_r+0x304>
  801ce8:	00801f84 	movi	r2,126
  801cec:	00c0fc04 	movi	r3,1008
  801cf0:	003f8c06 	br	801b24 <_free_r+0x134>
  801cf4:	3804d4ba 	srli	r2,r7,18
  801cf8:	10801f04 	addi	r2,r2,124
  801cfc:	100690fa 	slli	r3,r2,3
  801d00:	003f8806 	br	801b24 <_free_r+0x134>

00801d04 <_fseek_r>:
  801d04:	deffe804 	addi	sp,sp,-96
  801d08:	dd801515 	stw	r22,84(sp)
  801d0c:	dcc01215 	stw	r19,72(sp)
  801d10:	dc801115 	stw	r18,68(sp)
  801d14:	dc000f15 	stw	r16,60(sp)
  801d18:	dfc01715 	stw	ra,92(sp)
  801d1c:	ddc01615 	stw	r23,88(sp)
  801d20:	dd401415 	stw	r21,80(sp)
  801d24:	dd001315 	stw	r20,76(sp)
  801d28:	dc401015 	stw	r17,64(sp)
  801d2c:	2025883a 	mov	r18,r4
  801d30:	2821883a 	mov	r16,r5
  801d34:	302d883a 	mov	r22,r6
  801d38:	3827883a 	mov	r19,r7
  801d3c:	20000226 	beq	r4,zero,801d48 <_fseek_r+0x44>
  801d40:	20800e17 	ldw	r2,56(r4)
  801d44:	10007826 	beq	r2,zero,801f28 <_fseek_r+0x224>
  801d48:	8080030b 	ldhu	r2,12(r16)
  801d4c:	00c04204 	movi	r3,264
  801d50:	1080420c 	andi	r2,r2,264
  801d54:	10c07926 	beq	r2,r3,801f3c <_fseek_r+0x238>
  801d58:	85400a17 	ldw	r21,40(r16)
  801d5c:	a800ea26 	beq	r21,zero,802108 <_fseek_r+0x404>
  801d60:	00800044 	movi	r2,1
  801d64:	98805f26 	beq	r19,r2,801ee4 <_fseek_r+0x1e0>
  801d68:	00800084 	movi	r2,2
  801d6c:	98801026 	beq	r19,r2,801db0 <_fseek_r+0xac>
  801d70:	98000f26 	beq	r19,zero,801db0 <_fseek_r+0xac>
  801d74:	00800584 	movi	r2,22
  801d78:	013fffc4 	movi	r4,-1
  801d7c:	90800015 	stw	r2,0(r18)
  801d80:	2005883a 	mov	r2,r4
  801d84:	dfc01717 	ldw	ra,92(sp)
  801d88:	ddc01617 	ldw	r23,88(sp)
  801d8c:	dd801517 	ldw	r22,84(sp)
  801d90:	dd401417 	ldw	r21,80(sp)
  801d94:	dd001317 	ldw	r20,76(sp)
  801d98:	dcc01217 	ldw	r19,72(sp)
  801d9c:	dc801117 	ldw	r18,68(sp)
  801da0:	dc401017 	ldw	r17,64(sp)
  801da4:	dc000f17 	ldw	r16,60(sp)
  801da8:	dec01804 	addi	sp,sp,96
  801dac:	f800283a 	ret
  801db0:	81800417 	ldw	r6,16(r16)
  801db4:	0023883a 	mov	r17,zero
  801db8:	002f883a 	mov	r23,zero
  801dbc:	3000a626 	beq	r6,zero,802058 <_fseek_r+0x354>
  801dc0:	8100030b 	ldhu	r4,12(r16)
  801dc4:	2082068c 	andi	r2,r4,2074
  801dc8:	1000081e 	bne	r2,zero,801dec <_fseek_r+0xe8>
  801dcc:	2081000c 	andi	r2,r4,1024
  801dd0:	10001b1e 	bne	r2,zero,801e40 <_fseek_r+0x13c>
  801dd4:	00802034 	movhi	r2,128
  801dd8:	108fd204 	addi	r2,r2,16200
  801ddc:	a8800926 	beq	r21,r2,801e04 <_fseek_r+0x100>
  801de0:	8080030b 	ldhu	r2,12(r16)
  801de4:	10820014 	ori	r2,r2,2048
  801de8:	8080030d 	sth	r2,12(r16)
  801dec:	9009883a 	mov	r4,r18
  801df0:	800b883a 	mov	r5,r16
  801df4:	08010ac0 	call	8010ac <_fflush_r>
  801df8:	1000a326 	beq	r2,zero,802088 <_fseek_r+0x384>
  801dfc:	013fffc4 	movi	r4,-1
  801e00:	003fdf06 	br	801d80 <_fseek_r+0x7c>
  801e04:	8140038f 	ldh	r5,14(r16)
  801e08:	283ff516 	blt	r5,zero,801de0 <_fseek_r+0xdc>
  801e0c:	9009883a 	mov	r4,r18
  801e10:	d80d883a 	mov	r6,sp
  801e14:	08021640 	call	802164 <_fstat_r>
  801e18:	103ff11e 	bne	r2,zero,801de0 <_fseek_r+0xdc>
  801e1c:	d8800117 	ldw	r2,4(sp)
  801e20:	00e00014 	movui	r3,32768
  801e24:	10bc000c 	andi	r2,r2,61440
  801e28:	10ffed1e 	bne	r2,r3,801de0 <_fseek_r+0xdc>
  801e2c:	80c0030b 	ldhu	r3,12(r16)
  801e30:	00810004 	movi	r2,1024
  801e34:	80801315 	stw	r2,76(r16)
  801e38:	1886b03a 	or	r3,r3,r2
  801e3c:	80c0030d 	sth	r3,12(r16)
  801e40:	9800701e 	bne	r19,zero,802004 <_fseek_r+0x300>
  801e44:	b029883a 	mov	r20,r22
  801e48:	b804c03a 	cmpne	r2,r23,zero
  801e4c:	10003f1e 	bne	r2,zero,801f4c <_fseek_r+0x248>
  801e50:	8100030b 	ldhu	r4,12(r16)
  801e54:	2084000c 	andi	r2,r4,4096
  801e58:	1000a126 	beq	r2,zero,8020e0 <_fseek_r+0x3dc>
  801e5c:	81801417 	ldw	r6,80(r16)
  801e60:	80c00117 	ldw	r3,4(r16)
  801e64:	81400c17 	ldw	r5,48(r16)
  801e68:	30e3c83a 	sub	r17,r6,r3
  801e6c:	28008026 	beq	r5,zero,802070 <_fseek_r+0x36c>
  801e70:	81c00f17 	ldw	r7,60(r16)
  801e74:	89e3c83a 	sub	r17,r17,r7
  801e78:	80800e17 	ldw	r2,56(r16)
  801e7c:	81800417 	ldw	r6,16(r16)
  801e80:	88c7883a 	add	r3,r17,r3
  801e84:	1185c83a 	sub	r2,r2,r6
  801e88:	11cf883a 	add	r7,r2,r7
  801e8c:	1887c83a 	sub	r3,r3,r2
  801e90:	2088000c 	andi	r2,r4,8192
  801e94:	10003e1e 	bne	r2,zero,801f90 <_fseek_r+0x28c>
  801e98:	a0c03d16 	blt	r20,r3,801f90 <_fseek_r+0x28c>
  801e9c:	38c5883a 	add	r2,r7,r3
  801ea0:	a0803b2e 	bgeu	r20,r2,801f90 <_fseek_r+0x28c>
  801ea4:	a0c5c83a 	sub	r2,r20,r3
  801ea8:	3887c83a 	sub	r3,r7,r2
  801eac:	3085883a 	add	r2,r6,r2
  801eb0:	80800015 	stw	r2,0(r16)
  801eb4:	80c00115 	stw	r3,4(r16)
  801eb8:	28000526 	beq	r5,zero,801ed0 <_fseek_r+0x1cc>
  801ebc:	80801004 	addi	r2,r16,64
  801ec0:	28800226 	beq	r5,r2,801ecc <_fseek_r+0x1c8>
  801ec4:	9009883a 	mov	r4,r18
  801ec8:	08019f00 	call	8019f0 <_free_r>
  801ecc:	80000c15 	stw	zero,48(r16)
  801ed0:	8080030b 	ldhu	r2,12(r16)
  801ed4:	0009883a 	mov	r4,zero
  801ed8:	10bff7cc 	andi	r2,r2,65503
  801edc:	8080030d 	sth	r2,12(r16)
  801ee0:	003fa706 	br	801d80 <_fseek_r+0x7c>
  801ee4:	9009883a 	mov	r4,r18
  801ee8:	800b883a 	mov	r5,r16
  801eec:	08010ac0 	call	8010ac <_fflush_r>
  801ef0:	8100030b 	ldhu	r4,12(r16)
  801ef4:	2084000c 	andi	r2,r4,4096
  801ef8:	10008726 	beq	r2,zero,802118 <_fseek_r+0x414>
  801efc:	84401417 	ldw	r17,80(r16)
  801f00:	2080010c 	andi	r2,r4,4
  801f04:	1000171e 	bne	r2,zero,801f64 <_fseek_r+0x260>
  801f08:	2080020c 	andi	r2,r4,8
  801f0c:	10003b26 	beq	r2,zero,801ffc <_fseek_r+0x2f8>
  801f10:	80800017 	ldw	r2,0(r16)
  801f14:	10003926 	beq	r2,zero,801ffc <_fseek_r+0x2f8>
  801f18:	81800417 	ldw	r6,16(r16)
  801f1c:	1185c83a 	sub	r2,r2,r6
  801f20:	88a3883a 	add	r17,r17,r2
  801f24:	00001606 	br	801f80 <_fseek_r+0x27c>
  801f28:	080146c0 	call	80146c <__sinit>
  801f2c:	8080030b 	ldhu	r2,12(r16)
  801f30:	00c04204 	movi	r3,264
  801f34:	1080420c 	andi	r2,r2,264
  801f38:	10ff871e 	bne	r2,r3,801d58 <_fseek_r+0x54>
  801f3c:	9009883a 	mov	r4,r18
  801f40:	800b883a 	mov	r5,r16
  801f44:	08010ac0 	call	8010ac <_fflush_r>
  801f48:	003f8306 	br	801d58 <_fseek_r+0x54>
  801f4c:	81400c17 	ldw	r5,48(r16)
  801f50:	28004526 	beq	r5,zero,802068 <_fseek_r+0x364>
  801f54:	8100030b 	ldhu	r4,12(r16)
  801f58:	80c00117 	ldw	r3,4(r16)
  801f5c:	81c00f17 	ldw	r7,60(r16)
  801f60:	003fc506 	br	801e78 <_fseek_r+0x174>
  801f64:	80c00117 	ldw	r3,4(r16)
  801f68:	80800c17 	ldw	r2,48(r16)
  801f6c:	88e3c83a 	sub	r17,r17,r3
  801f70:	10002226 	beq	r2,zero,801ffc <_fseek_r+0x2f8>
  801f74:	81c00f17 	ldw	r7,60(r16)
  801f78:	81800417 	ldw	r6,16(r16)
  801f7c:	89e3c83a 	sub	r17,r17,r7
  801f80:	b46d883a 	add	r22,r22,r17
  801f84:	0027883a 	mov	r19,zero
  801f88:	05c00044 	movi	r23,1
  801f8c:	003f8b06 	br	801dbc <_fseek_r+0xb8>
  801f90:	80801317 	ldw	r2,76(r16)
  801f94:	81400717 	ldw	r5,28(r16)
  801f98:	9009883a 	mov	r4,r18
  801f9c:	0085c83a 	sub	r2,zero,r2
  801fa0:	a0a2703a 	and	r17,r20,r2
  801fa4:	880d883a 	mov	r6,r17
  801fa8:	000f883a 	mov	r7,zero
  801fac:	a83ee83a 	callr	r21
  801fb0:	00ffffc4 	movi	r3,-1
  801fb4:	10ff8d26 	beq	r2,r3,801dec <_fseek_r+0xe8>
  801fb8:	80800417 	ldw	r2,16(r16)
  801fbc:	81400c17 	ldw	r5,48(r16)
  801fc0:	80000115 	stw	zero,4(r16)
  801fc4:	80800015 	stw	r2,0(r16)
  801fc8:	28000526 	beq	r5,zero,801fe0 <_fseek_r+0x2dc>
  801fcc:	80801004 	addi	r2,r16,64
  801fd0:	28800226 	beq	r5,r2,801fdc <_fseek_r+0x2d8>
  801fd4:	9009883a 	mov	r4,r18
  801fd8:	08019f00 	call	8019f0 <_free_r>
  801fdc:	80000c15 	stw	zero,48(r16)
  801fe0:	8080030b 	ldhu	r2,12(r16)
  801fe4:	a463c83a 	sub	r17,r20,r17
  801fe8:	10bff7cc 	andi	r2,r2,65503
  801fec:	8080030d 	sth	r2,12(r16)
  801ff0:	88000c1e 	bne	r17,zero,802024 <_fseek_r+0x320>
  801ff4:	0009883a 	mov	r4,zero
  801ff8:	003f6106 	br	801d80 <_fseek_r+0x7c>
  801ffc:	81800417 	ldw	r6,16(r16)
  802000:	003fdf06 	br	801f80 <_fseek_r+0x27c>
  802004:	8140038f 	ldh	r5,14(r16)
  802008:	9009883a 	mov	r4,r18
  80200c:	d80d883a 	mov	r6,sp
  802010:	08021640 	call	802164 <_fstat_r>
  802014:	103f751e 	bne	r2,zero,801dec <_fseek_r+0xe8>
  802018:	d8800417 	ldw	r2,16(sp)
  80201c:	b0a9883a 	add	r20,r22,r2
  802020:	003f8906 	br	801e48 <_fseek_r+0x144>
  802024:	9009883a 	mov	r4,r18
  802028:	800b883a 	mov	r5,r16
  80202c:	0803aa80 	call	803aa8 <__srefill_r>
  802030:	103f6e1e 	bne	r2,zero,801dec <_fseek_r+0xe8>
  802034:	80c00117 	ldw	r3,4(r16)
  802038:	1c7f6c36 	bltu	r3,r17,801dec <_fseek_r+0xe8>
  80203c:	80800017 	ldw	r2,0(r16)
  802040:	1c47c83a 	sub	r3,r3,r17
  802044:	0009883a 	mov	r4,zero
  802048:	1445883a 	add	r2,r2,r17
  80204c:	80c00115 	stw	r3,4(r16)
  802050:	80800015 	stw	r2,0(r16)
  802054:	003f4a06 	br	801d80 <_fseek_r+0x7c>
  802058:	9009883a 	mov	r4,r18
  80205c:	800b883a 	mov	r5,r16
  802060:	08027f40 	call	8027f4 <__smakebuf_r>
  802064:	003f5606 	br	801dc0 <_fseek_r+0xbc>
  802068:	8100030b 	ldhu	r4,12(r16)
  80206c:	80c00117 	ldw	r3,4(r16)
  802070:	80800017 	ldw	r2,0(r16)
  802074:	81800417 	ldw	r6,16(r16)
  802078:	1185c83a 	sub	r2,r2,r6
  80207c:	10cf883a 	add	r7,r2,r3
  802080:	8887c83a 	sub	r3,r17,r2
  802084:	003f8206 	br	801e90 <_fseek_r+0x18c>
  802088:	81400717 	ldw	r5,28(r16)
  80208c:	b00d883a 	mov	r6,r22
  802090:	980f883a 	mov	r7,r19
  802094:	9009883a 	mov	r4,r18
  802098:	a83ee83a 	callr	r21
  80209c:	00ffffc4 	movi	r3,-1
  8020a0:	10ff5626 	beq	r2,r3,801dfc <_fseek_r+0xf8>
  8020a4:	81400c17 	ldw	r5,48(r16)
  8020a8:	28000526 	beq	r5,zero,8020c0 <_fseek_r+0x3bc>
  8020ac:	80801004 	addi	r2,r16,64
  8020b0:	28800226 	beq	r5,r2,8020bc <_fseek_r+0x3b8>
  8020b4:	9009883a 	mov	r4,r18
  8020b8:	08019f00 	call	8019f0 <_free_r>
  8020bc:	80000c15 	stw	zero,48(r16)
  8020c0:	8080030b 	ldhu	r2,12(r16)
  8020c4:	80c00417 	ldw	r3,16(r16)
  8020c8:	0009883a 	mov	r4,zero
  8020cc:	10bdf7cc 	andi	r2,r2,63455
  8020d0:	8080030d 	sth	r2,12(r16)
  8020d4:	80c00015 	stw	r3,0(r16)
  8020d8:	80000115 	stw	zero,4(r16)
  8020dc:	003f2806 	br	801d80 <_fseek_r+0x7c>
  8020e0:	81400717 	ldw	r5,28(r16)
  8020e4:	000d883a 	mov	r6,zero
  8020e8:	9009883a 	mov	r4,r18
  8020ec:	01c00044 	movi	r7,1
  8020f0:	a83ee83a 	callr	r21
  8020f4:	100d883a 	mov	r6,r2
  8020f8:	00bfffc4 	movi	r2,-1
  8020fc:	30bf3b26 	beq	r6,r2,801dec <_fseek_r+0xe8>
  802100:	8100030b 	ldhu	r4,12(r16)
  802104:	003f5606 	br	801e60 <_fseek_r+0x15c>
  802108:	00800744 	movi	r2,29
  80210c:	013fffc4 	movi	r4,-1
  802110:	90800015 	stw	r2,0(r18)
  802114:	003f1a06 	br	801d80 <_fseek_r+0x7c>
  802118:	81400717 	ldw	r5,28(r16)
  80211c:	980f883a 	mov	r7,r19
  802120:	9009883a 	mov	r4,r18
  802124:	000d883a 	mov	r6,zero
  802128:	a83ee83a 	callr	r21
  80212c:	1023883a 	mov	r17,r2
  802130:	00bfffc4 	movi	r2,-1
  802134:	88bf3126 	beq	r17,r2,801dfc <_fseek_r+0xf8>
  802138:	8100030b 	ldhu	r4,12(r16)
  80213c:	003f7006 	br	801f00 <_fseek_r+0x1fc>

00802140 <fseek>:
  802140:	00802074 	movhi	r2,129
  802144:	109b9704 	addi	r2,r2,28252
  802148:	2013883a 	mov	r9,r4
  80214c:	11000017 	ldw	r4,0(r2)
  802150:	2805883a 	mov	r2,r5
  802154:	300f883a 	mov	r7,r6
  802158:	480b883a 	mov	r5,r9
  80215c:	100d883a 	mov	r6,r2
  802160:	0801d041 	jmpi	801d04 <_fseek_r>

00802164 <_fstat_r>:
  802164:	defffd04 	addi	sp,sp,-12
  802168:	dc000015 	stw	r16,0(sp)
  80216c:	040020b4 	movhi	r16,130
  802170:	8422ed04 	addi	r16,r16,-29772
  802174:	dc400115 	stw	r17,4(sp)
  802178:	80000015 	stw	zero,0(r16)
  80217c:	2023883a 	mov	r17,r4
  802180:	2809883a 	mov	r4,r5
  802184:	300b883a 	mov	r5,r6
  802188:	dfc00215 	stw	ra,8(sp)
  80218c:	08106bc0 	call	8106bc <fstat>
  802190:	1007883a 	mov	r3,r2
  802194:	00bfffc4 	movi	r2,-1
  802198:	18800626 	beq	r3,r2,8021b4 <_fstat_r+0x50>
  80219c:	1805883a 	mov	r2,r3
  8021a0:	dfc00217 	ldw	ra,8(sp)
  8021a4:	dc400117 	ldw	r17,4(sp)
  8021a8:	dc000017 	ldw	r16,0(sp)
  8021ac:	dec00304 	addi	sp,sp,12
  8021b0:	f800283a 	ret
  8021b4:	80800017 	ldw	r2,0(r16)
  8021b8:	103ff826 	beq	r2,zero,80219c <_fstat_r+0x38>
  8021bc:	88800015 	stw	r2,0(r17)
  8021c0:	1805883a 	mov	r2,r3
  8021c4:	dfc00217 	ldw	ra,8(sp)
  8021c8:	dc400117 	ldw	r17,4(sp)
  8021cc:	dc000017 	ldw	r16,0(sp)
  8021d0:	dec00304 	addi	sp,sp,12
  8021d4:	f800283a 	ret

008021d8 <__sfvwrite_r>:
  8021d8:	30800217 	ldw	r2,8(r6)
  8021dc:	defff504 	addi	sp,sp,-44
  8021e0:	df000915 	stw	fp,36(sp)
  8021e4:	dd800715 	stw	r22,28(sp)
  8021e8:	dc800315 	stw	r18,12(sp)
  8021ec:	dfc00a15 	stw	ra,40(sp)
  8021f0:	ddc00815 	stw	r23,32(sp)
  8021f4:	dd400615 	stw	r21,24(sp)
  8021f8:	dd000515 	stw	r20,20(sp)
  8021fc:	dcc00415 	stw	r19,16(sp)
  802200:	dc400215 	stw	r17,8(sp)
  802204:	dc000115 	stw	r16,4(sp)
  802208:	302d883a 	mov	r22,r6
  80220c:	2039883a 	mov	fp,r4
  802210:	2825883a 	mov	r18,r5
  802214:	10001c26 	beq	r2,zero,802288 <__sfvwrite_r+0xb0>
  802218:	29c0030b 	ldhu	r7,12(r5)
  80221c:	3880020c 	andi	r2,r7,8
  802220:	10002726 	beq	r2,zero,8022c0 <__sfvwrite_r+0xe8>
  802224:	28800417 	ldw	r2,16(r5)
  802228:	10002526 	beq	r2,zero,8022c0 <__sfvwrite_r+0xe8>
  80222c:	3880008c 	andi	r2,r7,2
  802230:	b5400017 	ldw	r21,0(r22)
  802234:	10002826 	beq	r2,zero,8022d8 <__sfvwrite_r+0x100>
  802238:	0021883a 	mov	r16,zero
  80223c:	0023883a 	mov	r17,zero
  802240:	880d883a 	mov	r6,r17
  802244:	e009883a 	mov	r4,fp
  802248:	00810004 	movi	r2,1024
  80224c:	80006e26 	beq	r16,zero,802408 <__sfvwrite_r+0x230>
  802250:	800f883a 	mov	r7,r16
  802254:	91400717 	ldw	r5,28(r18)
  802258:	1400012e 	bgeu	r2,r16,802260 <__sfvwrite_r+0x88>
  80225c:	100f883a 	mov	r7,r2
  802260:	90c00917 	ldw	r3,36(r18)
  802264:	183ee83a 	callr	r3
  802268:	1007883a 	mov	r3,r2
  80226c:	80a1c83a 	sub	r16,r16,r2
  802270:	88a3883a 	add	r17,r17,r2
  802274:	00806d0e 	bge	zero,r2,80242c <__sfvwrite_r+0x254>
  802278:	b0800217 	ldw	r2,8(r22)
  80227c:	10c5c83a 	sub	r2,r2,r3
  802280:	b0800215 	stw	r2,8(r22)
  802284:	103fee1e 	bne	r2,zero,802240 <__sfvwrite_r+0x68>
  802288:	0009883a 	mov	r4,zero
  80228c:	2005883a 	mov	r2,r4
  802290:	dfc00a17 	ldw	ra,40(sp)
  802294:	df000917 	ldw	fp,36(sp)
  802298:	ddc00817 	ldw	r23,32(sp)
  80229c:	dd800717 	ldw	r22,28(sp)
  8022a0:	dd400617 	ldw	r21,24(sp)
  8022a4:	dd000517 	ldw	r20,20(sp)
  8022a8:	dcc00417 	ldw	r19,16(sp)
  8022ac:	dc800317 	ldw	r18,12(sp)
  8022b0:	dc400217 	ldw	r17,8(sp)
  8022b4:	dc000117 	ldw	r16,4(sp)
  8022b8:	dec00b04 	addi	sp,sp,44
  8022bc:	f800283a 	ret
  8022c0:	08078200 	call	807820 <__swsetup_r>
  8022c4:	1000e41e 	bne	r2,zero,802658 <__sfvwrite_r+0x480>
  8022c8:	91c0030b 	ldhu	r7,12(r18)
  8022cc:	b5400017 	ldw	r21,0(r22)
  8022d0:	3880008c 	andi	r2,r7,2
  8022d4:	103fd81e 	bne	r2,zero,802238 <__sfvwrite_r+0x60>
  8022d8:	3880004c 	andi	r2,r7,1
  8022dc:	1005003a 	cmpeq	r2,r2,zero
  8022e0:	10005726 	beq	r2,zero,802440 <__sfvwrite_r+0x268>
  8022e4:	0029883a 	mov	r20,zero
  8022e8:	002f883a 	mov	r23,zero
  8022ec:	a0004226 	beq	r20,zero,8023f8 <__sfvwrite_r+0x220>
  8022f0:	3880800c 	andi	r2,r7,512
  8022f4:	94000217 	ldw	r16,8(r18)
  8022f8:	10008b26 	beq	r2,zero,802528 <__sfvwrite_r+0x350>
  8022fc:	800d883a 	mov	r6,r16
  802300:	a400a536 	bltu	r20,r16,802598 <__sfvwrite_r+0x3c0>
  802304:	3881200c 	andi	r2,r7,1152
  802308:	10002726 	beq	r2,zero,8023a8 <__sfvwrite_r+0x1d0>
  80230c:	90800517 	ldw	r2,20(r18)
  802310:	92000417 	ldw	r8,16(r18)
  802314:	91400017 	ldw	r5,0(r18)
  802318:	1087883a 	add	r3,r2,r2
  80231c:	1887883a 	add	r3,r3,r2
  802320:	1808d7fa 	srli	r4,r3,31
  802324:	2a21c83a 	sub	r16,r5,r8
  802328:	80800044 	addi	r2,r16,1
  80232c:	20c9883a 	add	r4,r4,r3
  802330:	2027d07a 	srai	r19,r4,1
  802334:	a085883a 	add	r2,r20,r2
  802338:	980d883a 	mov	r6,r19
  80233c:	9880022e 	bgeu	r19,r2,802348 <__sfvwrite_r+0x170>
  802340:	1027883a 	mov	r19,r2
  802344:	100d883a 	mov	r6,r2
  802348:	3881000c 	andi	r2,r7,1024
  80234c:	1000b826 	beq	r2,zero,802630 <__sfvwrite_r+0x458>
  802350:	300b883a 	mov	r5,r6
  802354:	e009883a 	mov	r4,fp
  802358:	08029880 	call	802988 <_malloc_r>
  80235c:	10003126 	beq	r2,zero,802424 <__sfvwrite_r+0x24c>
  802360:	91400417 	ldw	r5,16(r18)
  802364:	1009883a 	mov	r4,r2
  802368:	800d883a 	mov	r6,r16
  80236c:	1023883a 	mov	r17,r2
  802370:	08031ac0 	call	8031ac <memcpy>
  802374:	90c0030b 	ldhu	r3,12(r18)
  802378:	00beffc4 	movi	r2,-1025
  80237c:	1886703a 	and	r3,r3,r2
  802380:	18c02014 	ori	r3,r3,128
  802384:	90c0030d 	sth	r3,12(r18)
  802388:	9c07c83a 	sub	r3,r19,r16
  80238c:	8c05883a 	add	r2,r17,r16
  802390:	a00d883a 	mov	r6,r20
  802394:	a021883a 	mov	r16,r20
  802398:	90800015 	stw	r2,0(r18)
  80239c:	90c00215 	stw	r3,8(r18)
  8023a0:	94400415 	stw	r17,16(r18)
  8023a4:	94c00515 	stw	r19,20(r18)
  8023a8:	91000017 	ldw	r4,0(r18)
  8023ac:	b80b883a 	mov	r5,r23
  8023b0:	a023883a 	mov	r17,r20
  8023b4:	080324c0 	call	80324c <memmove>
  8023b8:	90c00217 	ldw	r3,8(r18)
  8023bc:	90800017 	ldw	r2,0(r18)
  8023c0:	a027883a 	mov	r19,r20
  8023c4:	1c07c83a 	sub	r3,r3,r16
  8023c8:	1405883a 	add	r2,r2,r16
  8023cc:	90c00215 	stw	r3,8(r18)
  8023d0:	a021883a 	mov	r16,r20
  8023d4:	90800015 	stw	r2,0(r18)
  8023d8:	b0800217 	ldw	r2,8(r22)
  8023dc:	1405c83a 	sub	r2,r2,r16
  8023e0:	b0800215 	stw	r2,8(r22)
  8023e4:	103fa826 	beq	r2,zero,802288 <__sfvwrite_r+0xb0>
  8023e8:	a469c83a 	sub	r20,r20,r17
  8023ec:	91c0030b 	ldhu	r7,12(r18)
  8023f0:	bcef883a 	add	r23,r23,r19
  8023f4:	a03fbe1e 	bne	r20,zero,8022f0 <__sfvwrite_r+0x118>
  8023f8:	adc00017 	ldw	r23,0(r21)
  8023fc:	ad000117 	ldw	r20,4(r21)
  802400:	ad400204 	addi	r21,r21,8
  802404:	003fb906 	br	8022ec <__sfvwrite_r+0x114>
  802408:	ac400017 	ldw	r17,0(r21)
  80240c:	ac000117 	ldw	r16,4(r21)
  802410:	ad400204 	addi	r21,r21,8
  802414:	003f8a06 	br	802240 <__sfvwrite_r+0x68>
  802418:	91400417 	ldw	r5,16(r18)
  80241c:	e009883a 	mov	r4,fp
  802420:	08019f00 	call	8019f0 <_free_r>
  802424:	00800304 	movi	r2,12
  802428:	e0800015 	stw	r2,0(fp)
  80242c:	9080030b 	ldhu	r2,12(r18)
  802430:	013fffc4 	movi	r4,-1
  802434:	10801014 	ori	r2,r2,64
  802438:	9080030d 	sth	r2,12(r18)
  80243c:	003f9306 	br	80228c <__sfvwrite_r+0xb4>
  802440:	0027883a 	mov	r19,zero
  802444:	002f883a 	mov	r23,zero
  802448:	d8000015 	stw	zero,0(sp)
  80244c:	0029883a 	mov	r20,zero
  802450:	98001e26 	beq	r19,zero,8024cc <__sfvwrite_r+0x2f4>
  802454:	d8c00017 	ldw	r3,0(sp)
  802458:	1804c03a 	cmpne	r2,r3,zero
  80245c:	10005e26 	beq	r2,zero,8025d8 <__sfvwrite_r+0x400>
  802460:	9821883a 	mov	r16,r19
  802464:	a4c0012e 	bgeu	r20,r19,80246c <__sfvwrite_r+0x294>
  802468:	a021883a 	mov	r16,r20
  80246c:	91000017 	ldw	r4,0(r18)
  802470:	90800417 	ldw	r2,16(r18)
  802474:	91800217 	ldw	r6,8(r18)
  802478:	91c00517 	ldw	r7,20(r18)
  80247c:	1100022e 	bgeu	r2,r4,802488 <__sfvwrite_r+0x2b0>
  802480:	31e3883a 	add	r17,r6,r7
  802484:	8c001616 	blt	r17,r16,8024e0 <__sfvwrite_r+0x308>
  802488:	81c03816 	blt	r16,r7,80256c <__sfvwrite_r+0x394>
  80248c:	90c00917 	ldw	r3,36(r18)
  802490:	91400717 	ldw	r5,28(r18)
  802494:	e009883a 	mov	r4,fp
  802498:	b80d883a 	mov	r6,r23
  80249c:	183ee83a 	callr	r3
  8024a0:	1023883a 	mov	r17,r2
  8024a4:	00bfe10e 	bge	zero,r2,80242c <__sfvwrite_r+0x254>
  8024a8:	a469c83a 	sub	r20,r20,r17
  8024ac:	a0001826 	beq	r20,zero,802510 <__sfvwrite_r+0x338>
  8024b0:	b0800217 	ldw	r2,8(r22)
  8024b4:	1445c83a 	sub	r2,r2,r17
  8024b8:	b0800215 	stw	r2,8(r22)
  8024bc:	103f7226 	beq	r2,zero,802288 <__sfvwrite_r+0xb0>
  8024c0:	9c67c83a 	sub	r19,r19,r17
  8024c4:	bc6f883a 	add	r23,r23,r17
  8024c8:	983fe21e 	bne	r19,zero,802454 <__sfvwrite_r+0x27c>
  8024cc:	adc00017 	ldw	r23,0(r21)
  8024d0:	acc00117 	ldw	r19,4(r21)
  8024d4:	ad400204 	addi	r21,r21,8
  8024d8:	d8000015 	stw	zero,0(sp)
  8024dc:	003fdc06 	br	802450 <__sfvwrite_r+0x278>
  8024e0:	b80b883a 	mov	r5,r23
  8024e4:	880d883a 	mov	r6,r17
  8024e8:	080324c0 	call	80324c <memmove>
  8024ec:	90c00017 	ldw	r3,0(r18)
  8024f0:	e009883a 	mov	r4,fp
  8024f4:	900b883a 	mov	r5,r18
  8024f8:	1c47883a 	add	r3,r3,r17
  8024fc:	90c00015 	stw	r3,0(r18)
  802500:	08010ac0 	call	8010ac <_fflush_r>
  802504:	103fc91e 	bne	r2,zero,80242c <__sfvwrite_r+0x254>
  802508:	a469c83a 	sub	r20,r20,r17
  80250c:	a03fe81e 	bne	r20,zero,8024b0 <__sfvwrite_r+0x2d8>
  802510:	e009883a 	mov	r4,fp
  802514:	900b883a 	mov	r5,r18
  802518:	08010ac0 	call	8010ac <_fflush_r>
  80251c:	103fc31e 	bne	r2,zero,80242c <__sfvwrite_r+0x254>
  802520:	d8000015 	stw	zero,0(sp)
  802524:	003fe206 	br	8024b0 <__sfvwrite_r+0x2d8>
  802528:	91000017 	ldw	r4,0(r18)
  80252c:	90800417 	ldw	r2,16(r18)
  802530:	1100022e 	bgeu	r2,r4,80253c <__sfvwrite_r+0x364>
  802534:	8023883a 	mov	r17,r16
  802538:	85003136 	bltu	r16,r20,802600 <__sfvwrite_r+0x428>
  80253c:	91c00517 	ldw	r7,20(r18)
  802540:	a1c01836 	bltu	r20,r7,8025a4 <__sfvwrite_r+0x3cc>
  802544:	90c00917 	ldw	r3,36(r18)
  802548:	91400717 	ldw	r5,28(r18)
  80254c:	e009883a 	mov	r4,fp
  802550:	b80d883a 	mov	r6,r23
  802554:	183ee83a 	callr	r3
  802558:	1021883a 	mov	r16,r2
  80255c:	00bfb30e 	bge	zero,r2,80242c <__sfvwrite_r+0x254>
  802560:	1023883a 	mov	r17,r2
  802564:	1027883a 	mov	r19,r2
  802568:	003f9b06 	br	8023d8 <__sfvwrite_r+0x200>
  80256c:	b80b883a 	mov	r5,r23
  802570:	800d883a 	mov	r6,r16
  802574:	080324c0 	call	80324c <memmove>
  802578:	90c00217 	ldw	r3,8(r18)
  80257c:	90800017 	ldw	r2,0(r18)
  802580:	8023883a 	mov	r17,r16
  802584:	1c07c83a 	sub	r3,r3,r16
  802588:	1405883a 	add	r2,r2,r16
  80258c:	90c00215 	stw	r3,8(r18)
  802590:	90800015 	stw	r2,0(r18)
  802594:	003fc406 	br	8024a8 <__sfvwrite_r+0x2d0>
  802598:	a00d883a 	mov	r6,r20
  80259c:	a021883a 	mov	r16,r20
  8025a0:	003f8106 	br	8023a8 <__sfvwrite_r+0x1d0>
  8025a4:	b80b883a 	mov	r5,r23
  8025a8:	a00d883a 	mov	r6,r20
  8025ac:	080324c0 	call	80324c <memmove>
  8025b0:	90c00217 	ldw	r3,8(r18)
  8025b4:	90800017 	ldw	r2,0(r18)
  8025b8:	a021883a 	mov	r16,r20
  8025bc:	1d07c83a 	sub	r3,r3,r20
  8025c0:	1505883a 	add	r2,r2,r20
  8025c4:	a023883a 	mov	r17,r20
  8025c8:	a027883a 	mov	r19,r20
  8025cc:	90c00215 	stw	r3,8(r18)
  8025d0:	90800015 	stw	r2,0(r18)
  8025d4:	003f8006 	br	8023d8 <__sfvwrite_r+0x200>
  8025d8:	b809883a 	mov	r4,r23
  8025dc:	01400284 	movi	r5,10
  8025e0:	980d883a 	mov	r6,r19
  8025e4:	08030c80 	call	8030c8 <memchr>
  8025e8:	10001726 	beq	r2,zero,802648 <__sfvwrite_r+0x470>
  8025ec:	15c5c83a 	sub	r2,r2,r23
  8025f0:	15000044 	addi	r20,r2,1
  8025f4:	00800044 	movi	r2,1
  8025f8:	d8800015 	stw	r2,0(sp)
  8025fc:	003f9806 	br	802460 <__sfvwrite_r+0x288>
  802600:	b80b883a 	mov	r5,r23
  802604:	800d883a 	mov	r6,r16
  802608:	080324c0 	call	80324c <memmove>
  80260c:	90c00017 	ldw	r3,0(r18)
  802610:	e009883a 	mov	r4,fp
  802614:	900b883a 	mov	r5,r18
  802618:	1c07883a 	add	r3,r3,r16
  80261c:	90c00015 	stw	r3,0(r18)
  802620:	8027883a 	mov	r19,r16
  802624:	08010ac0 	call	8010ac <_fflush_r>
  802628:	103f6b26 	beq	r2,zero,8023d8 <__sfvwrite_r+0x200>
  80262c:	003f7f06 	br	80242c <__sfvwrite_r+0x254>
  802630:	400b883a 	mov	r5,r8
  802634:	e009883a 	mov	r4,fp
  802638:	08034b40 	call	8034b4 <_realloc_r>
  80263c:	103f7626 	beq	r2,zero,802418 <__sfvwrite_r+0x240>
  802640:	1023883a 	mov	r17,r2
  802644:	003f5006 	br	802388 <__sfvwrite_r+0x1b0>
  802648:	00c00044 	movi	r3,1
  80264c:	9d000044 	addi	r20,r19,1
  802650:	d8c00015 	stw	r3,0(sp)
  802654:	003f8206 	br	802460 <__sfvwrite_r+0x288>
  802658:	9080030b 	ldhu	r2,12(r18)
  80265c:	00c00244 	movi	r3,9
  802660:	013fffc4 	movi	r4,-1
  802664:	10801014 	ori	r2,r2,64
  802668:	9080030d 	sth	r2,12(r18)
  80266c:	e0c00015 	stw	r3,0(fp)
  802670:	003f0606 	br	80228c <__sfvwrite_r+0xb4>

00802674 <_fwalk_reent>:
  802674:	defff704 	addi	sp,sp,-36
  802678:	dcc00315 	stw	r19,12(sp)
  80267c:	24c0b804 	addi	r19,r4,736
  802680:	dd800615 	stw	r22,24(sp)
  802684:	dd400515 	stw	r21,20(sp)
  802688:	dfc00815 	stw	ra,32(sp)
  80268c:	ddc00715 	stw	r23,28(sp)
  802690:	dd000415 	stw	r20,16(sp)
  802694:	dc800215 	stw	r18,8(sp)
  802698:	dc400115 	stw	r17,4(sp)
  80269c:	dc000015 	stw	r16,0(sp)
  8026a0:	202b883a 	mov	r21,r4
  8026a4:	282d883a 	mov	r22,r5
  8026a8:	080145c0 	call	80145c <__sfp_lock_acquire>
  8026ac:	98002126 	beq	r19,zero,802734 <_fwalk_reent+0xc0>
  8026b0:	002f883a 	mov	r23,zero
  8026b4:	9c800117 	ldw	r18,4(r19)
  8026b8:	9c000217 	ldw	r16,8(r19)
  8026bc:	90bfffc4 	addi	r2,r18,-1
  8026c0:	10000d16 	blt	r2,zero,8026f8 <_fwalk_reent+0x84>
  8026c4:	0023883a 	mov	r17,zero
  8026c8:	053fffc4 	movi	r20,-1
  8026cc:	8080030f 	ldh	r2,12(r16)
  8026d0:	8c400044 	addi	r17,r17,1
  8026d4:	10000626 	beq	r2,zero,8026f0 <_fwalk_reent+0x7c>
  8026d8:	8080038f 	ldh	r2,14(r16)
  8026dc:	800b883a 	mov	r5,r16
  8026e0:	a809883a 	mov	r4,r21
  8026e4:	15000226 	beq	r2,r20,8026f0 <_fwalk_reent+0x7c>
  8026e8:	b03ee83a 	callr	r22
  8026ec:	b8aeb03a 	or	r23,r23,r2
  8026f0:	84001704 	addi	r16,r16,92
  8026f4:	947ff51e 	bne	r18,r17,8026cc <_fwalk_reent+0x58>
  8026f8:	9cc00017 	ldw	r19,0(r19)
  8026fc:	983fed1e 	bne	r19,zero,8026b4 <_fwalk_reent+0x40>
  802700:	08014600 	call	801460 <__sfp_lock_release>
  802704:	b805883a 	mov	r2,r23
  802708:	dfc00817 	ldw	ra,32(sp)
  80270c:	ddc00717 	ldw	r23,28(sp)
  802710:	dd800617 	ldw	r22,24(sp)
  802714:	dd400517 	ldw	r21,20(sp)
  802718:	dd000417 	ldw	r20,16(sp)
  80271c:	dcc00317 	ldw	r19,12(sp)
  802720:	dc800217 	ldw	r18,8(sp)
  802724:	dc400117 	ldw	r17,4(sp)
  802728:	dc000017 	ldw	r16,0(sp)
  80272c:	dec00904 	addi	sp,sp,36
  802730:	f800283a 	ret
  802734:	002f883a 	mov	r23,zero
  802738:	003ff106 	br	802700 <_fwalk_reent+0x8c>

0080273c <_fwalk>:
  80273c:	defff804 	addi	sp,sp,-32
  802740:	dcc00315 	stw	r19,12(sp)
  802744:	24c0b804 	addi	r19,r4,736
  802748:	dd400515 	stw	r21,20(sp)
  80274c:	dfc00715 	stw	ra,28(sp)
  802750:	dd800615 	stw	r22,24(sp)
  802754:	dd000415 	stw	r20,16(sp)
  802758:	dc800215 	stw	r18,8(sp)
  80275c:	dc400115 	stw	r17,4(sp)
  802760:	dc000015 	stw	r16,0(sp)
  802764:	282b883a 	mov	r21,r5
  802768:	080145c0 	call	80145c <__sfp_lock_acquire>
  80276c:	98001f26 	beq	r19,zero,8027ec <_fwalk+0xb0>
  802770:	002d883a 	mov	r22,zero
  802774:	9c800117 	ldw	r18,4(r19)
  802778:	9c000217 	ldw	r16,8(r19)
  80277c:	90bfffc4 	addi	r2,r18,-1
  802780:	10000c16 	blt	r2,zero,8027b4 <_fwalk+0x78>
  802784:	0023883a 	mov	r17,zero
  802788:	053fffc4 	movi	r20,-1
  80278c:	8080030f 	ldh	r2,12(r16)
  802790:	8c400044 	addi	r17,r17,1
  802794:	10000526 	beq	r2,zero,8027ac <_fwalk+0x70>
  802798:	8080038f 	ldh	r2,14(r16)
  80279c:	8009883a 	mov	r4,r16
  8027a0:	15000226 	beq	r2,r20,8027ac <_fwalk+0x70>
  8027a4:	a83ee83a 	callr	r21
  8027a8:	b0acb03a 	or	r22,r22,r2
  8027ac:	84001704 	addi	r16,r16,92
  8027b0:	947ff61e 	bne	r18,r17,80278c <_fwalk+0x50>
  8027b4:	9cc00017 	ldw	r19,0(r19)
  8027b8:	983fee1e 	bne	r19,zero,802774 <_fwalk+0x38>
  8027bc:	08014600 	call	801460 <__sfp_lock_release>
  8027c0:	b005883a 	mov	r2,r22
  8027c4:	dfc00717 	ldw	ra,28(sp)
  8027c8:	dd800617 	ldw	r22,24(sp)
  8027cc:	dd400517 	ldw	r21,20(sp)
  8027d0:	dd000417 	ldw	r20,16(sp)
  8027d4:	dcc00317 	ldw	r19,12(sp)
  8027d8:	dc800217 	ldw	r18,8(sp)
  8027dc:	dc400117 	ldw	r17,4(sp)
  8027e0:	dc000017 	ldw	r16,0(sp)
  8027e4:	dec00804 	addi	sp,sp,32
  8027e8:	f800283a 	ret
  8027ec:	002d883a 	mov	r22,zero
  8027f0:	003ff206 	br	8027bc <_fwalk+0x80>

008027f4 <__smakebuf_r>:
  8027f4:	2880030b 	ldhu	r2,12(r5)
  8027f8:	deffed04 	addi	sp,sp,-76
  8027fc:	dc401015 	stw	r17,64(sp)
  802800:	1080008c 	andi	r2,r2,2
  802804:	dc000f15 	stw	r16,60(sp)
  802808:	dfc01215 	stw	ra,72(sp)
  80280c:	dc801115 	stw	r18,68(sp)
  802810:	2821883a 	mov	r16,r5
  802814:	2023883a 	mov	r17,r4
  802818:	10000b26 	beq	r2,zero,802848 <__smakebuf_r+0x54>
  80281c:	28c010c4 	addi	r3,r5,67
  802820:	00800044 	movi	r2,1
  802824:	28800515 	stw	r2,20(r5)
  802828:	28c00415 	stw	r3,16(r5)
  80282c:	28c00015 	stw	r3,0(r5)
  802830:	dfc01217 	ldw	ra,72(sp)
  802834:	dc801117 	ldw	r18,68(sp)
  802838:	dc401017 	ldw	r17,64(sp)
  80283c:	dc000f17 	ldw	r16,60(sp)
  802840:	dec01304 	addi	sp,sp,76
  802844:	f800283a 	ret
  802848:	2940038f 	ldh	r5,14(r5)
  80284c:	28002116 	blt	r5,zero,8028d4 <__smakebuf_r+0xe0>
  802850:	d80d883a 	mov	r6,sp
  802854:	08021640 	call	802164 <_fstat_r>
  802858:	10001e16 	blt	r2,zero,8028d4 <__smakebuf_r+0xe0>
  80285c:	d8800117 	ldw	r2,4(sp)
  802860:	00e00014 	movui	r3,32768
  802864:	113c000c 	andi	r4,r2,61440
  802868:	20c03126 	beq	r4,r3,802930 <__smakebuf_r+0x13c>
  80286c:	8080030b 	ldhu	r2,12(r16)
  802870:	00c80004 	movi	r3,8192
  802874:	10820014 	ori	r2,r2,2048
  802878:	8080030d 	sth	r2,12(r16)
  80287c:	20c01e26 	beq	r4,r3,8028f8 <__smakebuf_r+0x104>
  802880:	04810004 	movi	r18,1024
  802884:	8809883a 	mov	r4,r17
  802888:	900b883a 	mov	r5,r18
  80288c:	08029880 	call	802988 <_malloc_r>
  802890:	1009883a 	mov	r4,r2
  802894:	10003126 	beq	r2,zero,80295c <__smakebuf_r+0x168>
  802898:	80c0030b 	ldhu	r3,12(r16)
  80289c:	00802034 	movhi	r2,128
  8028a0:	10855404 	addi	r2,r2,5456
  8028a4:	88800f15 	stw	r2,60(r17)
  8028a8:	18c02014 	ori	r3,r3,128
  8028ac:	84800515 	stw	r18,20(r16)
  8028b0:	80c0030d 	sth	r3,12(r16)
  8028b4:	81000415 	stw	r4,16(r16)
  8028b8:	81000015 	stw	r4,0(r16)
  8028bc:	dfc01217 	ldw	ra,72(sp)
  8028c0:	dc801117 	ldw	r18,68(sp)
  8028c4:	dc401017 	ldw	r17,64(sp)
  8028c8:	dc000f17 	ldw	r16,60(sp)
  8028cc:	dec01304 	addi	sp,sp,76
  8028d0:	f800283a 	ret
  8028d4:	80c0030b 	ldhu	r3,12(r16)
  8028d8:	1880200c 	andi	r2,r3,128
  8028dc:	10000426 	beq	r2,zero,8028f0 <__smakebuf_r+0xfc>
  8028e0:	04801004 	movi	r18,64
  8028e4:	18820014 	ori	r2,r3,2048
  8028e8:	8080030d 	sth	r2,12(r16)
  8028ec:	003fe506 	br	802884 <__smakebuf_r+0x90>
  8028f0:	04810004 	movi	r18,1024
  8028f4:	003ffb06 	br	8028e4 <__smakebuf_r+0xf0>
  8028f8:	8140038f 	ldh	r5,14(r16)
  8028fc:	8809883a 	mov	r4,r17
  802900:	08094740 	call	809474 <_isatty_r>
  802904:	103fde26 	beq	r2,zero,802880 <__smakebuf_r+0x8c>
  802908:	8080030b 	ldhu	r2,12(r16)
  80290c:	80c010c4 	addi	r3,r16,67
  802910:	04810004 	movi	r18,1024
  802914:	10800054 	ori	r2,r2,1
  802918:	8080030d 	sth	r2,12(r16)
  80291c:	00800044 	movi	r2,1
  802920:	80c00415 	stw	r3,16(r16)
  802924:	80800515 	stw	r2,20(r16)
  802928:	80c00015 	stw	r3,0(r16)
  80292c:	003fd506 	br	802884 <__smakebuf_r+0x90>
  802930:	80c00a17 	ldw	r3,40(r16)
  802934:	00802034 	movhi	r2,128
  802938:	108fd204 	addi	r2,r2,16200
  80293c:	18bfcb1e 	bne	r3,r2,80286c <__smakebuf_r+0x78>
  802940:	8080030b 	ldhu	r2,12(r16)
  802944:	00c10004 	movi	r3,1024
  802948:	1825883a 	mov	r18,r3
  80294c:	10c4b03a 	or	r2,r2,r3
  802950:	8080030d 	sth	r2,12(r16)
  802954:	80c01315 	stw	r3,76(r16)
  802958:	003fca06 	br	802884 <__smakebuf_r+0x90>
  80295c:	8100030b 	ldhu	r4,12(r16)
  802960:	2080800c 	andi	r2,r4,512
  802964:	103fb21e 	bne	r2,zero,802830 <__smakebuf_r+0x3c>
  802968:	80c010c4 	addi	r3,r16,67
  80296c:	21000094 	ori	r4,r4,2
  802970:	00800044 	movi	r2,1
  802974:	80800515 	stw	r2,20(r16)
  802978:	8100030d 	sth	r4,12(r16)
  80297c:	80c00415 	stw	r3,16(r16)
  802980:	80c00015 	stw	r3,0(r16)
  802984:	003faa06 	br	802830 <__smakebuf_r+0x3c>

00802988 <_malloc_r>:
  802988:	defff604 	addi	sp,sp,-40
  80298c:	28c002c4 	addi	r3,r5,11
  802990:	00800584 	movi	r2,22
  802994:	dc800215 	stw	r18,8(sp)
  802998:	dfc00915 	stw	ra,36(sp)
  80299c:	df000815 	stw	fp,32(sp)
  8029a0:	ddc00715 	stw	r23,28(sp)
  8029a4:	dd800615 	stw	r22,24(sp)
  8029a8:	dd400515 	stw	r21,20(sp)
  8029ac:	dd000415 	stw	r20,16(sp)
  8029b0:	dcc00315 	stw	r19,12(sp)
  8029b4:	dc400115 	stw	r17,4(sp)
  8029b8:	dc000015 	stw	r16,0(sp)
  8029bc:	2025883a 	mov	r18,r4
  8029c0:	10c01236 	bltu	r2,r3,802a0c <_malloc_r+0x84>
  8029c4:	04400404 	movi	r17,16
  8029c8:	8940142e 	bgeu	r17,r5,802a1c <_malloc_r+0x94>
  8029cc:	00800304 	movi	r2,12
  8029d0:	0007883a 	mov	r3,zero
  8029d4:	90800015 	stw	r2,0(r18)
  8029d8:	1805883a 	mov	r2,r3
  8029dc:	dfc00917 	ldw	ra,36(sp)
  8029e0:	df000817 	ldw	fp,32(sp)
  8029e4:	ddc00717 	ldw	r23,28(sp)
  8029e8:	dd800617 	ldw	r22,24(sp)
  8029ec:	dd400517 	ldw	r21,20(sp)
  8029f0:	dd000417 	ldw	r20,16(sp)
  8029f4:	dcc00317 	ldw	r19,12(sp)
  8029f8:	dc800217 	ldw	r18,8(sp)
  8029fc:	dc400117 	ldw	r17,4(sp)
  802a00:	dc000017 	ldw	r16,0(sp)
  802a04:	dec00a04 	addi	sp,sp,40
  802a08:	f800283a 	ret
  802a0c:	00bffe04 	movi	r2,-8
  802a10:	18a2703a 	and	r17,r3,r2
  802a14:	883fed16 	blt	r17,zero,8029cc <_malloc_r+0x44>
  802a18:	897fec36 	bltu	r17,r5,8029cc <_malloc_r+0x44>
  802a1c:	9009883a 	mov	r4,r18
  802a20:	0810d780 	call	810d78 <__malloc_lock>
  802a24:	00807dc4 	movi	r2,503
  802a28:	14402b2e 	bgeu	r2,r17,802ad8 <_malloc_r+0x150>
  802a2c:	8806d27a 	srli	r3,r17,9
  802a30:	18003f1e 	bne	r3,zero,802b30 <_malloc_r+0x1a8>
  802a34:	880cd0fa 	srli	r6,r17,3
  802a38:	300490fa 	slli	r2,r6,3
  802a3c:	02c02074 	movhi	r11,129
  802a40:	5ad58904 	addi	r11,r11,22052
  802a44:	12cb883a 	add	r5,r2,r11
  802a48:	2c000317 	ldw	r16,12(r5)
  802a4c:	580f883a 	mov	r7,r11
  802a50:	2c00041e 	bne	r5,r16,802a64 <_malloc_r+0xdc>
  802a54:	00000a06 	br	802a80 <_malloc_r+0xf8>
  802a58:	1800860e 	bge	r3,zero,802c74 <_malloc_r+0x2ec>
  802a5c:	84000317 	ldw	r16,12(r16)
  802a60:	2c000726 	beq	r5,r16,802a80 <_malloc_r+0xf8>
  802a64:	80800117 	ldw	r2,4(r16)
  802a68:	00ffff04 	movi	r3,-4
  802a6c:	10c8703a 	and	r4,r2,r3
  802a70:	2447c83a 	sub	r3,r4,r17
  802a74:	008003c4 	movi	r2,15
  802a78:	10fff70e 	bge	r2,r3,802a58 <_malloc_r+0xd0>
  802a7c:	31bfffc4 	addi	r6,r6,-1
  802a80:	32400044 	addi	r9,r6,1
  802a84:	02802074 	movhi	r10,129
  802a88:	52958b04 	addi	r10,r10,22060
  802a8c:	54000217 	ldw	r16,8(r10)
  802a90:	8280a026 	beq	r16,r10,802d14 <_malloc_r+0x38c>
  802a94:	80800117 	ldw	r2,4(r16)
  802a98:	00ffff04 	movi	r3,-4
  802a9c:	10ca703a 	and	r5,r2,r3
  802aa0:	2c4dc83a 	sub	r6,r5,r17
  802aa4:	008003c4 	movi	r2,15
  802aa8:	11808316 	blt	r2,r6,802cb8 <_malloc_r+0x330>
  802aac:	52800315 	stw	r10,12(r10)
  802ab0:	52800215 	stw	r10,8(r10)
  802ab4:	30002916 	blt	r6,zero,802b5c <_malloc_r+0x1d4>
  802ab8:	8147883a 	add	r3,r16,r5
  802abc:	18800117 	ldw	r2,4(r3)
  802ac0:	9009883a 	mov	r4,r18
  802ac4:	10800054 	ori	r2,r2,1
  802ac8:	18800115 	stw	r2,4(r3)
  802acc:	0810d980 	call	810d98 <__malloc_unlock>
  802ad0:	80c00204 	addi	r3,r16,8
  802ad4:	003fc006 	br	8029d8 <_malloc_r+0x50>
  802ad8:	02c02074 	movhi	r11,129
  802adc:	5ad58904 	addi	r11,r11,22052
  802ae0:	8ac5883a 	add	r2,r17,r11
  802ae4:	14000317 	ldw	r16,12(r2)
  802ae8:	580f883a 	mov	r7,r11
  802aec:	8806d0fa 	srli	r3,r17,3
  802af0:	14006c26 	beq	r2,r16,802ca4 <_malloc_r+0x31c>
  802af4:	80c00117 	ldw	r3,4(r16)
  802af8:	00bfff04 	movi	r2,-4
  802afc:	81800317 	ldw	r6,12(r16)
  802b00:	1886703a 	and	r3,r3,r2
  802b04:	80c7883a 	add	r3,r16,r3
  802b08:	18800117 	ldw	r2,4(r3)
  802b0c:	81400217 	ldw	r5,8(r16)
  802b10:	9009883a 	mov	r4,r18
  802b14:	10800054 	ori	r2,r2,1
  802b18:	18800115 	stw	r2,4(r3)
  802b1c:	31400215 	stw	r5,8(r6)
  802b20:	29800315 	stw	r6,12(r5)
  802b24:	0810d980 	call	810d98 <__malloc_unlock>
  802b28:	80c00204 	addi	r3,r16,8
  802b2c:	003faa06 	br	8029d8 <_malloc_r+0x50>
  802b30:	00800104 	movi	r2,4
  802b34:	10c0052e 	bgeu	r2,r3,802b4c <_malloc_r+0x1c4>
  802b38:	00800504 	movi	r2,20
  802b3c:	10c07836 	bltu	r2,r3,802d20 <_malloc_r+0x398>
  802b40:	198016c4 	addi	r6,r3,91
  802b44:	300490fa 	slli	r2,r6,3
  802b48:	003fbc06 	br	802a3c <_malloc_r+0xb4>
  802b4c:	8804d1ba 	srli	r2,r17,6
  802b50:	11800e04 	addi	r6,r2,56
  802b54:	300490fa 	slli	r2,r6,3
  802b58:	003fb806 	br	802a3c <_malloc_r+0xb4>
  802b5c:	00807fc4 	movi	r2,511
  802b60:	1140bb36 	bltu	r2,r5,802e50 <_malloc_r+0x4c8>
  802b64:	2806d0fa 	srli	r3,r5,3
  802b68:	573ffe04 	addi	fp,r10,-8
  802b6c:	00800044 	movi	r2,1
  802b70:	180890fa 	slli	r4,r3,3
  802b74:	1807d0ba 	srai	r3,r3,2
  802b78:	e1c00117 	ldw	r7,4(fp)
  802b7c:	5909883a 	add	r4,r11,r4
  802b80:	21400217 	ldw	r5,8(r4)
  802b84:	10c4983a 	sll	r2,r2,r3
  802b88:	81000315 	stw	r4,12(r16)
  802b8c:	81400215 	stw	r5,8(r16)
  802b90:	388eb03a 	or	r7,r7,r2
  802b94:	2c000315 	stw	r16,12(r5)
  802b98:	24000215 	stw	r16,8(r4)
  802b9c:	e1c00115 	stw	r7,4(fp)
  802ba0:	4807883a 	mov	r3,r9
  802ba4:	4800cd16 	blt	r9,zero,802edc <_malloc_r+0x554>
  802ba8:	1807d0ba 	srai	r3,r3,2
  802bac:	00800044 	movi	r2,1
  802bb0:	10c8983a 	sll	r4,r2,r3
  802bb4:	39004436 	bltu	r7,r4,802cc8 <_malloc_r+0x340>
  802bb8:	21c4703a 	and	r2,r4,r7
  802bbc:	10000a1e 	bne	r2,zero,802be8 <_malloc_r+0x260>
  802bc0:	2109883a 	add	r4,r4,r4
  802bc4:	00bfff04 	movi	r2,-4
  802bc8:	4884703a 	and	r2,r9,r2
  802bcc:	3906703a 	and	r3,r7,r4
  802bd0:	12400104 	addi	r9,r2,4
  802bd4:	1800041e 	bne	r3,zero,802be8 <_malloc_r+0x260>
  802bd8:	2109883a 	add	r4,r4,r4
  802bdc:	3904703a 	and	r2,r7,r4
  802be0:	4a400104 	addi	r9,r9,4
  802be4:	103ffc26 	beq	r2,zero,802bd8 <_malloc_r+0x250>
  802be8:	480490fa 	slli	r2,r9,3
  802bec:	4819883a 	mov	r12,r9
  802bf0:	023fff04 	movi	r8,-4
  802bf4:	589b883a 	add	r13,r11,r2
  802bf8:	6807883a 	mov	r3,r13
  802bfc:	014003c4 	movi	r5,15
  802c00:	1c000317 	ldw	r16,12(r3)
  802c04:	1c00041e 	bne	r3,r16,802c18 <_malloc_r+0x290>
  802c08:	0000a706 	br	802ea8 <_malloc_r+0x520>
  802c0c:	3000ab0e 	bge	r6,zero,802ebc <_malloc_r+0x534>
  802c10:	84000317 	ldw	r16,12(r16)
  802c14:	1c00a426 	beq	r3,r16,802ea8 <_malloc_r+0x520>
  802c18:	80800117 	ldw	r2,4(r16)
  802c1c:	1204703a 	and	r2,r2,r8
  802c20:	144dc83a 	sub	r6,r2,r17
  802c24:	29bff90e 	bge	r5,r6,802c0c <_malloc_r+0x284>
  802c28:	81000317 	ldw	r4,12(r16)
  802c2c:	80c00217 	ldw	r3,8(r16)
  802c30:	89400054 	ori	r5,r17,1
  802c34:	8445883a 	add	r2,r16,r17
  802c38:	20c00215 	stw	r3,8(r4)
  802c3c:	19000315 	stw	r4,12(r3)
  802c40:	81400115 	stw	r5,4(r16)
  802c44:	1187883a 	add	r3,r2,r6
  802c48:	31000054 	ori	r4,r6,1
  802c4c:	50800315 	stw	r2,12(r10)
  802c50:	50800215 	stw	r2,8(r10)
  802c54:	19800015 	stw	r6,0(r3)
  802c58:	11000115 	stw	r4,4(r2)
  802c5c:	12800215 	stw	r10,8(r2)
  802c60:	12800315 	stw	r10,12(r2)
  802c64:	9009883a 	mov	r4,r18
  802c68:	0810d980 	call	810d98 <__malloc_unlock>
  802c6c:	80c00204 	addi	r3,r16,8
  802c70:	003f5906 	br	8029d8 <_malloc_r+0x50>
  802c74:	8109883a 	add	r4,r16,r4
  802c78:	20800117 	ldw	r2,4(r4)
  802c7c:	80c00217 	ldw	r3,8(r16)
  802c80:	81400317 	ldw	r5,12(r16)
  802c84:	10800054 	ori	r2,r2,1
  802c88:	20800115 	stw	r2,4(r4)
  802c8c:	28c00215 	stw	r3,8(r5)
  802c90:	19400315 	stw	r5,12(r3)
  802c94:	9009883a 	mov	r4,r18
  802c98:	0810d980 	call	810d98 <__malloc_unlock>
  802c9c:	80c00204 	addi	r3,r16,8
  802ca0:	003f4d06 	br	8029d8 <_malloc_r+0x50>
  802ca4:	80800204 	addi	r2,r16,8
  802ca8:	14000317 	ldw	r16,12(r2)
  802cac:	143f911e 	bne	r2,r16,802af4 <_malloc_r+0x16c>
  802cb0:	1a400084 	addi	r9,r3,2
  802cb4:	003f7306 	br	802a84 <_malloc_r+0xfc>
  802cb8:	88c00054 	ori	r3,r17,1
  802cbc:	8445883a 	add	r2,r16,r17
  802cc0:	80c00115 	stw	r3,4(r16)
  802cc4:	003fdf06 	br	802c44 <_malloc_r+0x2bc>
  802cc8:	e4000217 	ldw	r16,8(fp)
  802ccc:	00bfff04 	movi	r2,-4
  802cd0:	80c00117 	ldw	r3,4(r16)
  802cd4:	802d883a 	mov	r22,r16
  802cd8:	18aa703a 	and	r21,r3,r2
  802cdc:	ac401636 	bltu	r21,r17,802d38 <_malloc_r+0x3b0>
  802ce0:	ac49c83a 	sub	r4,r21,r17
  802ce4:	008003c4 	movi	r2,15
  802ce8:	1100130e 	bge	r2,r4,802d38 <_malloc_r+0x3b0>
  802cec:	88800054 	ori	r2,r17,1
  802cf0:	8447883a 	add	r3,r16,r17
  802cf4:	80800115 	stw	r2,4(r16)
  802cf8:	20800054 	ori	r2,r4,1
  802cfc:	18800115 	stw	r2,4(r3)
  802d00:	e0c00215 	stw	r3,8(fp)
  802d04:	9009883a 	mov	r4,r18
  802d08:	0810d980 	call	810d98 <__malloc_unlock>
  802d0c:	80c00204 	addi	r3,r16,8
  802d10:	003f3106 	br	8029d8 <_malloc_r+0x50>
  802d14:	39c00117 	ldw	r7,4(r7)
  802d18:	573ffe04 	addi	fp,r10,-8
  802d1c:	003fa006 	br	802ba0 <_malloc_r+0x218>
  802d20:	00801504 	movi	r2,84
  802d24:	10c06736 	bltu	r2,r3,802ec4 <_malloc_r+0x53c>
  802d28:	8804d33a 	srli	r2,r17,12
  802d2c:	11801b84 	addi	r6,r2,110
  802d30:	300490fa 	slli	r2,r6,3
  802d34:	003f4106 	br	802a3c <_malloc_r+0xb4>
  802d38:	d0a75b17 	ldw	r2,-25236(gp)
  802d3c:	d0e00717 	ldw	r3,-32740(gp)
  802d40:	053fffc4 	movi	r20,-1
  802d44:	10800404 	addi	r2,r2,16
  802d48:	88a7883a 	add	r19,r17,r2
  802d4c:	1d000326 	beq	r3,r20,802d5c <_malloc_r+0x3d4>
  802d50:	98c3ffc4 	addi	r3,r19,4095
  802d54:	00bc0004 	movi	r2,-4096
  802d58:	18a6703a 	and	r19,r3,r2
  802d5c:	9009883a 	mov	r4,r18
  802d60:	980b883a 	mov	r5,r19
  802d64:	0803ce80 	call	803ce8 <_sbrk_r>
  802d68:	1009883a 	mov	r4,r2
  802d6c:	15000426 	beq	r2,r20,802d80 <_malloc_r+0x3f8>
  802d70:	854b883a 	add	r5,r16,r21
  802d74:	1029883a 	mov	r20,r2
  802d78:	11405a2e 	bgeu	r2,r5,802ee4 <_malloc_r+0x55c>
  802d7c:	87000c26 	beq	r16,fp,802db0 <_malloc_r+0x428>
  802d80:	e4000217 	ldw	r16,8(fp)
  802d84:	80c00117 	ldw	r3,4(r16)
  802d88:	00bfff04 	movi	r2,-4
  802d8c:	1884703a 	and	r2,r3,r2
  802d90:	14400336 	bltu	r2,r17,802da0 <_malloc_r+0x418>
  802d94:	1449c83a 	sub	r4,r2,r17
  802d98:	008003c4 	movi	r2,15
  802d9c:	113fd316 	blt	r2,r4,802cec <_malloc_r+0x364>
  802da0:	9009883a 	mov	r4,r18
  802da4:	0810d980 	call	810d98 <__malloc_unlock>
  802da8:	0007883a 	mov	r3,zero
  802dac:	003f0a06 	br	8029d8 <_malloc_r+0x50>
  802db0:	05c020b4 	movhi	r23,130
  802db4:	bde30604 	addi	r23,r23,-29672
  802db8:	b8800017 	ldw	r2,0(r23)
  802dbc:	988d883a 	add	r6,r19,r2
  802dc0:	b9800015 	stw	r6,0(r23)
  802dc4:	d0e00717 	ldw	r3,-32740(gp)
  802dc8:	00bfffc4 	movi	r2,-1
  802dcc:	18808e26 	beq	r3,r2,803008 <_malloc_r+0x680>
  802dd0:	2145c83a 	sub	r2,r4,r5
  802dd4:	3085883a 	add	r2,r6,r2
  802dd8:	b8800015 	stw	r2,0(r23)
  802ddc:	20c001cc 	andi	r3,r4,7
  802de0:	18005f1e 	bne	r3,zero,802f60 <_malloc_r+0x5d8>
  802de4:	000b883a 	mov	r5,zero
  802de8:	a4c5883a 	add	r2,r20,r19
  802dec:	1083ffcc 	andi	r2,r2,4095
  802df0:	00c40004 	movi	r3,4096
  802df4:	1887c83a 	sub	r3,r3,r2
  802df8:	28e7883a 	add	r19,r5,r3
  802dfc:	9009883a 	mov	r4,r18
  802e00:	980b883a 	mov	r5,r19
  802e04:	0803ce80 	call	803ce8 <_sbrk_r>
  802e08:	1007883a 	mov	r3,r2
  802e0c:	00bfffc4 	movi	r2,-1
  802e10:	18807a26 	beq	r3,r2,802ffc <_malloc_r+0x674>
  802e14:	1d05c83a 	sub	r2,r3,r20
  802e18:	9885883a 	add	r2,r19,r2
  802e1c:	10c00054 	ori	r3,r2,1
  802e20:	b8800017 	ldw	r2,0(r23)
  802e24:	a021883a 	mov	r16,r20
  802e28:	a0c00115 	stw	r3,4(r20)
  802e2c:	9885883a 	add	r2,r19,r2
  802e30:	b8800015 	stw	r2,0(r23)
  802e34:	e5000215 	stw	r20,8(fp)
  802e38:	b7003626 	beq	r22,fp,802f14 <_malloc_r+0x58c>
  802e3c:	018003c4 	movi	r6,15
  802e40:	35404b36 	bltu	r6,r21,802f70 <_malloc_r+0x5e8>
  802e44:	00800044 	movi	r2,1
  802e48:	a0800115 	stw	r2,4(r20)
  802e4c:	003fcd06 	br	802d84 <_malloc_r+0x3fc>
  802e50:	2808d27a 	srli	r4,r5,9
  802e54:	2000371e 	bne	r4,zero,802f34 <_malloc_r+0x5ac>
  802e58:	2808d0fa 	srli	r4,r5,3
  802e5c:	200690fa 	slli	r3,r4,3
  802e60:	1ad1883a 	add	r8,r3,r11
  802e64:	41800217 	ldw	r6,8(r8)
  802e68:	41805b26 	beq	r8,r6,802fd8 <_malloc_r+0x650>
  802e6c:	30800117 	ldw	r2,4(r6)
  802e70:	00ffff04 	movi	r3,-4
  802e74:	10c4703a 	and	r2,r2,r3
  802e78:	2880022e 	bgeu	r5,r2,802e84 <_malloc_r+0x4fc>
  802e7c:	31800217 	ldw	r6,8(r6)
  802e80:	41bffa1e 	bne	r8,r6,802e6c <_malloc_r+0x4e4>
  802e84:	32000317 	ldw	r8,12(r6)
  802e88:	39c00117 	ldw	r7,4(r7)
  802e8c:	82000315 	stw	r8,12(r16)
  802e90:	81800215 	stw	r6,8(r16)
  802e94:	07002074 	movhi	fp,129
  802e98:	e7158904 	addi	fp,fp,22052
  802e9c:	34000315 	stw	r16,12(r6)
  802ea0:	44000215 	stw	r16,8(r8)
  802ea4:	003f3e06 	br	802ba0 <_malloc_r+0x218>
  802ea8:	63000044 	addi	r12,r12,1
  802eac:	608000cc 	andi	r2,r12,3
  802eb0:	10005d26 	beq	r2,zero,803028 <_malloc_r+0x6a0>
  802eb4:	18c00204 	addi	r3,r3,8
  802eb8:	003f5106 	br	802c00 <_malloc_r+0x278>
  802ebc:	8089883a 	add	r4,r16,r2
  802ec0:	003f6d06 	br	802c78 <_malloc_r+0x2f0>
  802ec4:	00805504 	movi	r2,340
  802ec8:	10c02036 	bltu	r2,r3,802f4c <_malloc_r+0x5c4>
  802ecc:	8804d3fa 	srli	r2,r17,15
  802ed0:	11801dc4 	addi	r6,r2,119
  802ed4:	300490fa 	slli	r2,r6,3
  802ed8:	003ed806 	br	802a3c <_malloc_r+0xb4>
  802edc:	48c000c4 	addi	r3,r9,3
  802ee0:	003f3106 	br	802ba8 <_malloc_r+0x220>
  802ee4:	05c020b4 	movhi	r23,130
  802ee8:	bde30604 	addi	r23,r23,-29672
  802eec:	b8800017 	ldw	r2,0(r23)
  802ef0:	988d883a 	add	r6,r19,r2
  802ef4:	b9800015 	stw	r6,0(r23)
  802ef8:	293fb21e 	bne	r5,r4,802dc4 <_malloc_r+0x43c>
  802efc:	2083ffcc 	andi	r2,r4,4095
  802f00:	103fb01e 	bne	r2,zero,802dc4 <_malloc_r+0x43c>
  802f04:	e4000217 	ldw	r16,8(fp)
  802f08:	9d45883a 	add	r2,r19,r21
  802f0c:	10800054 	ori	r2,r2,1
  802f10:	80800115 	stw	r2,4(r16)
  802f14:	b8c00017 	ldw	r3,0(r23)
  802f18:	d0a75c17 	ldw	r2,-25232(gp)
  802f1c:	10c0012e 	bgeu	r2,r3,802f24 <_malloc_r+0x59c>
  802f20:	d0e75c15 	stw	r3,-25232(gp)
  802f24:	d0a75d17 	ldw	r2,-25228(gp)
  802f28:	10ff962e 	bgeu	r2,r3,802d84 <_malloc_r+0x3fc>
  802f2c:	d0e75d15 	stw	r3,-25228(gp)
  802f30:	003f9406 	br	802d84 <_malloc_r+0x3fc>
  802f34:	00800104 	movi	r2,4
  802f38:	11001e36 	bltu	r2,r4,802fb4 <_malloc_r+0x62c>
  802f3c:	2804d1ba 	srli	r2,r5,6
  802f40:	11000e04 	addi	r4,r2,56
  802f44:	200690fa 	slli	r3,r4,3
  802f48:	003fc506 	br	802e60 <_malloc_r+0x4d8>
  802f4c:	00815504 	movi	r2,1364
  802f50:	10c01d2e 	bgeu	r2,r3,802fc8 <_malloc_r+0x640>
  802f54:	01801f84 	movi	r6,126
  802f58:	0080fc04 	movi	r2,1008
  802f5c:	003eb706 	br	802a3c <_malloc_r+0xb4>
  802f60:	00800204 	movi	r2,8
  802f64:	10cbc83a 	sub	r5,r2,r3
  802f68:	2169883a 	add	r20,r4,r5
  802f6c:	003f9e06 	br	802de8 <_malloc_r+0x460>
  802f70:	00bffe04 	movi	r2,-8
  802f74:	a93ffd04 	addi	r4,r21,-12
  802f78:	2088703a 	and	r4,r4,r2
  802f7c:	b10b883a 	add	r5,r22,r4
  802f80:	00c00144 	movi	r3,5
  802f84:	28c00215 	stw	r3,8(r5)
  802f88:	28c00115 	stw	r3,4(r5)
  802f8c:	b0800117 	ldw	r2,4(r22)
  802f90:	1080004c 	andi	r2,r2,1
  802f94:	2084b03a 	or	r2,r4,r2
  802f98:	b0800115 	stw	r2,4(r22)
  802f9c:	313fdd2e 	bgeu	r6,r4,802f14 <_malloc_r+0x58c>
  802fa0:	b1400204 	addi	r5,r22,8
  802fa4:	9009883a 	mov	r4,r18
  802fa8:	08019f00 	call	8019f0 <_free_r>
  802fac:	e4000217 	ldw	r16,8(fp)
  802fb0:	003fd806 	br	802f14 <_malloc_r+0x58c>
  802fb4:	00800504 	movi	r2,20
  802fb8:	11001536 	bltu	r2,r4,803010 <_malloc_r+0x688>
  802fbc:	210016c4 	addi	r4,r4,91
  802fc0:	200690fa 	slli	r3,r4,3
  802fc4:	003fa606 	br	802e60 <_malloc_r+0x4d8>
  802fc8:	8804d4ba 	srli	r2,r17,18
  802fcc:	11801f04 	addi	r6,r2,124
  802fd0:	300490fa 	slli	r2,r6,3
  802fd4:	003e9906 	br	802a3c <_malloc_r+0xb4>
  802fd8:	2009d0ba 	srai	r4,r4,2
  802fdc:	01402074 	movhi	r5,129
  802fe0:	29558904 	addi	r5,r5,22052
  802fe4:	00c00044 	movi	r3,1
  802fe8:	28800117 	ldw	r2,4(r5)
  802fec:	1906983a 	sll	r3,r3,r4
  802ff0:	10c4b03a 	or	r2,r2,r3
  802ff4:	28800115 	stw	r2,4(r5)
  802ff8:	003fa306 	br	802e88 <_malloc_r+0x500>
  802ffc:	0027883a 	mov	r19,zero
  803000:	00c00044 	movi	r3,1
  803004:	003f8606 	br	802e20 <_malloc_r+0x498>
  803008:	d1200715 	stw	r4,-32740(gp)
  80300c:	003f7306 	br	802ddc <_malloc_r+0x454>
  803010:	00801504 	movi	r2,84
  803014:	11001936 	bltu	r2,r4,80307c <_malloc_r+0x6f4>
  803018:	2804d33a 	srli	r2,r5,12
  80301c:	11001b84 	addi	r4,r2,110
  803020:	200690fa 	slli	r3,r4,3
  803024:	003f8e06 	br	802e60 <_malloc_r+0x4d8>
  803028:	480b883a 	mov	r5,r9
  80302c:	6807883a 	mov	r3,r13
  803030:	288000cc 	andi	r2,r5,3
  803034:	18fffe04 	addi	r3,r3,-8
  803038:	297fffc4 	addi	r5,r5,-1
  80303c:	10001526 	beq	r2,zero,803094 <_malloc_r+0x70c>
  803040:	18800217 	ldw	r2,8(r3)
  803044:	10fffa26 	beq	r2,r3,803030 <_malloc_r+0x6a8>
  803048:	2109883a 	add	r4,r4,r4
  80304c:	393f1e36 	bltu	r7,r4,802cc8 <_malloc_r+0x340>
  803050:	203f1d26 	beq	r4,zero,802cc8 <_malloc_r+0x340>
  803054:	21c4703a 	and	r2,r4,r7
  803058:	10000226 	beq	r2,zero,803064 <_malloc_r+0x6dc>
  80305c:	6013883a 	mov	r9,r12
  803060:	003ee106 	br	802be8 <_malloc_r+0x260>
  803064:	2109883a 	add	r4,r4,r4
  803068:	3904703a 	and	r2,r7,r4
  80306c:	63000104 	addi	r12,r12,4
  803070:	103ffc26 	beq	r2,zero,803064 <_malloc_r+0x6dc>
  803074:	6013883a 	mov	r9,r12
  803078:	003edb06 	br	802be8 <_malloc_r+0x260>
  80307c:	00805504 	movi	r2,340
  803080:	11000836 	bltu	r2,r4,8030a4 <_malloc_r+0x71c>
  803084:	2804d3fa 	srli	r2,r5,15
  803088:	11001dc4 	addi	r4,r2,119
  80308c:	200690fa 	slli	r3,r4,3
  803090:	003f7306 	br	802e60 <_malloc_r+0x4d8>
  803094:	0104303a 	nor	r2,zero,r4
  803098:	388e703a 	and	r7,r7,r2
  80309c:	e1c00115 	stw	r7,4(fp)
  8030a0:	003fe906 	br	803048 <_malloc_r+0x6c0>
  8030a4:	00815504 	movi	r2,1364
  8030a8:	1100032e 	bgeu	r2,r4,8030b8 <_malloc_r+0x730>
  8030ac:	01001f84 	movi	r4,126
  8030b0:	00c0fc04 	movi	r3,1008
  8030b4:	003f6a06 	br	802e60 <_malloc_r+0x4d8>
  8030b8:	2804d4ba 	srli	r2,r5,18
  8030bc:	11001f04 	addi	r4,r2,124
  8030c0:	200690fa 	slli	r3,r4,3
  8030c4:	003f6606 	br	802e60 <_malloc_r+0x4d8>

008030c8 <memchr>:
  8030c8:	008000c4 	movi	r2,3
  8030cc:	29403fcc 	andi	r5,r5,255
  8030d0:	2007883a 	mov	r3,r4
  8030d4:	1180022e 	bgeu	r2,r6,8030e0 <memchr+0x18>
  8030d8:	2084703a 	and	r2,r4,r2
  8030dc:	10000b26 	beq	r2,zero,80310c <memchr+0x44>
  8030e0:	313fffc4 	addi	r4,r6,-1
  8030e4:	3000051e 	bne	r6,zero,8030fc <memchr+0x34>
  8030e8:	00002c06 	br	80319c <memchr+0xd4>
  8030ec:	213fffc4 	addi	r4,r4,-1
  8030f0:	00bfffc4 	movi	r2,-1
  8030f4:	18c00044 	addi	r3,r3,1
  8030f8:	20802826 	beq	r4,r2,80319c <memchr+0xd4>
  8030fc:	18800003 	ldbu	r2,0(r3)
  803100:	28bffa1e 	bne	r5,r2,8030ec <memchr+0x24>
  803104:	1805883a 	mov	r2,r3
  803108:	f800283a 	ret
  80310c:	0011883a 	mov	r8,zero
  803110:	0007883a 	mov	r3,zero
  803114:	01c00104 	movi	r7,4
  803118:	4004923a 	slli	r2,r8,8
  80311c:	18c00044 	addi	r3,r3,1
  803120:	1151883a 	add	r8,r2,r5
  803124:	19fffc1e 	bne	r3,r7,803118 <memchr+0x50>
  803128:	02bfbff4 	movhi	r10,65279
  80312c:	52bfbfc4 	addi	r10,r10,-257
  803130:	02602074 	movhi	r9,32897
  803134:	4a602004 	addi	r9,r9,-32640
  803138:	02c000c4 	movi	r11,3
  80313c:	20800017 	ldw	r2,0(r4)
  803140:	31bfff04 	addi	r6,r6,-4
  803144:	200f883a 	mov	r7,r4
  803148:	1204f03a 	xor	r2,r2,r8
  80314c:	1287883a 	add	r3,r2,r10
  803150:	1a46703a 	and	r3,r3,r9
  803154:	0084303a 	nor	r2,zero,r2
  803158:	10c4703a 	and	r2,r2,r3
  80315c:	10000b26 	beq	r2,zero,80318c <memchr+0xc4>
  803160:	20800003 	ldbu	r2,0(r4)
  803164:	28800f26 	beq	r5,r2,8031a4 <memchr+0xdc>
  803168:	20800043 	ldbu	r2,1(r4)
  80316c:	21c00044 	addi	r7,r4,1
  803170:	28800c26 	beq	r5,r2,8031a4 <memchr+0xdc>
  803174:	20800083 	ldbu	r2,2(r4)
  803178:	21c00084 	addi	r7,r4,2
  80317c:	28800926 	beq	r5,r2,8031a4 <memchr+0xdc>
  803180:	208000c3 	ldbu	r2,3(r4)
  803184:	21c000c4 	addi	r7,r4,3
  803188:	28800626 	beq	r5,r2,8031a4 <memchr+0xdc>
  80318c:	21000104 	addi	r4,r4,4
  803190:	59bfea36 	bltu	r11,r6,80313c <memchr+0x74>
  803194:	2007883a 	mov	r3,r4
  803198:	003fd106 	br	8030e0 <memchr+0x18>
  80319c:	0005883a 	mov	r2,zero
  8031a0:	f800283a 	ret
  8031a4:	3805883a 	mov	r2,r7
  8031a8:	f800283a 	ret

008031ac <memcpy>:
  8031ac:	01c003c4 	movi	r7,15
  8031b0:	2007883a 	mov	r3,r4
  8031b4:	3980032e 	bgeu	r7,r6,8031c4 <memcpy+0x18>
  8031b8:	2904b03a 	or	r2,r5,r4
  8031bc:	108000cc 	andi	r2,r2,3
  8031c0:	10000926 	beq	r2,zero,8031e8 <memcpy+0x3c>
  8031c4:	30000626 	beq	r6,zero,8031e0 <memcpy+0x34>
  8031c8:	30cd883a 	add	r6,r6,r3
  8031cc:	28800003 	ldbu	r2,0(r5)
  8031d0:	29400044 	addi	r5,r5,1
  8031d4:	18800005 	stb	r2,0(r3)
  8031d8:	18c00044 	addi	r3,r3,1
  8031dc:	30fffb1e 	bne	r6,r3,8031cc <memcpy+0x20>
  8031e0:	2005883a 	mov	r2,r4
  8031e4:	f800283a 	ret
  8031e8:	3811883a 	mov	r8,r7
  8031ec:	200f883a 	mov	r7,r4
  8031f0:	28c00017 	ldw	r3,0(r5)
  8031f4:	31bffc04 	addi	r6,r6,-16
  8031f8:	38c00015 	stw	r3,0(r7)
  8031fc:	28800117 	ldw	r2,4(r5)
  803200:	38800115 	stw	r2,4(r7)
  803204:	28c00217 	ldw	r3,8(r5)
  803208:	38c00215 	stw	r3,8(r7)
  80320c:	28800317 	ldw	r2,12(r5)
  803210:	29400404 	addi	r5,r5,16
  803214:	38800315 	stw	r2,12(r7)
  803218:	39c00404 	addi	r7,r7,16
  80321c:	41bff436 	bltu	r8,r6,8031f0 <memcpy+0x44>
  803220:	008000c4 	movi	r2,3
  803224:	1180072e 	bgeu	r2,r6,803244 <memcpy+0x98>
  803228:	1007883a 	mov	r3,r2
  80322c:	28800017 	ldw	r2,0(r5)
  803230:	31bfff04 	addi	r6,r6,-4
  803234:	29400104 	addi	r5,r5,4
  803238:	38800015 	stw	r2,0(r7)
  80323c:	39c00104 	addi	r7,r7,4
  803240:	19bffa36 	bltu	r3,r6,80322c <memcpy+0x80>
  803244:	3807883a 	mov	r3,r7
  803248:	003fde06 	br	8031c4 <memcpy+0x18>

0080324c <memmove>:
  80324c:	2807883a 	mov	r3,r5
  803250:	2011883a 	mov	r8,r4
  803254:	29000c2e 	bgeu	r5,r4,803288 <memmove+0x3c>
  803258:	298f883a 	add	r7,r5,r6
  80325c:	21c00a2e 	bgeu	r4,r7,803288 <memmove+0x3c>
  803260:	30000726 	beq	r6,zero,803280 <memmove+0x34>
  803264:	2187883a 	add	r3,r4,r6
  803268:	198dc83a 	sub	r6,r3,r6
  80326c:	39ffffc4 	addi	r7,r7,-1
  803270:	38800003 	ldbu	r2,0(r7)
  803274:	18ffffc4 	addi	r3,r3,-1
  803278:	18800005 	stb	r2,0(r3)
  80327c:	19bffb1e 	bne	r3,r6,80326c <memmove+0x20>
  803280:	2005883a 	mov	r2,r4
  803284:	f800283a 	ret
  803288:	01c003c4 	movi	r7,15
  80328c:	39800a36 	bltu	r7,r6,8032b8 <memmove+0x6c>
  803290:	303ffb26 	beq	r6,zero,803280 <memmove+0x34>
  803294:	400f883a 	mov	r7,r8
  803298:	320d883a 	add	r6,r6,r8
  80329c:	28800003 	ldbu	r2,0(r5)
  8032a0:	29400044 	addi	r5,r5,1
  8032a4:	38800005 	stb	r2,0(r7)
  8032a8:	39c00044 	addi	r7,r7,1
  8032ac:	39bffb1e 	bne	r7,r6,80329c <memmove+0x50>
  8032b0:	2005883a 	mov	r2,r4
  8032b4:	f800283a 	ret
  8032b8:	1904b03a 	or	r2,r3,r4
  8032bc:	108000cc 	andi	r2,r2,3
  8032c0:	103ff31e 	bne	r2,zero,803290 <memmove+0x44>
  8032c4:	3811883a 	mov	r8,r7
  8032c8:	180b883a 	mov	r5,r3
  8032cc:	200f883a 	mov	r7,r4
  8032d0:	28c00017 	ldw	r3,0(r5)
  8032d4:	31bffc04 	addi	r6,r6,-16
  8032d8:	38c00015 	stw	r3,0(r7)
  8032dc:	28800117 	ldw	r2,4(r5)
  8032e0:	38800115 	stw	r2,4(r7)
  8032e4:	28c00217 	ldw	r3,8(r5)
  8032e8:	38c00215 	stw	r3,8(r7)
  8032ec:	28800317 	ldw	r2,12(r5)
  8032f0:	29400404 	addi	r5,r5,16
  8032f4:	38800315 	stw	r2,12(r7)
  8032f8:	39c00404 	addi	r7,r7,16
  8032fc:	41bff436 	bltu	r8,r6,8032d0 <memmove+0x84>
  803300:	008000c4 	movi	r2,3
  803304:	1180072e 	bgeu	r2,r6,803324 <memmove+0xd8>
  803308:	1007883a 	mov	r3,r2
  80330c:	28800017 	ldw	r2,0(r5)
  803310:	31bfff04 	addi	r6,r6,-4
  803314:	29400104 	addi	r5,r5,4
  803318:	38800015 	stw	r2,0(r7)
  80331c:	39c00104 	addi	r7,r7,4
  803320:	19bffa36 	bltu	r3,r6,80330c <memmove+0xc0>
  803324:	3811883a 	mov	r8,r7
  803328:	003fd906 	br	803290 <memmove+0x44>

0080332c <memset>:
  80332c:	008000c4 	movi	r2,3
  803330:	29403fcc 	andi	r5,r5,255
  803334:	2007883a 	mov	r3,r4
  803338:	1180022e 	bgeu	r2,r6,803344 <memset+0x18>
  80333c:	2084703a 	and	r2,r4,r2
  803340:	10000826 	beq	r2,zero,803364 <memset+0x38>
  803344:	30000526 	beq	r6,zero,80335c <memset+0x30>
  803348:	2805883a 	mov	r2,r5
  80334c:	30cd883a 	add	r6,r6,r3
  803350:	18800005 	stb	r2,0(r3)
  803354:	18c00044 	addi	r3,r3,1
  803358:	19bffd1e 	bne	r3,r6,803350 <memset+0x24>
  80335c:	2005883a 	mov	r2,r4
  803360:	f800283a 	ret
  803364:	2804923a 	slli	r2,r5,8
  803368:	020003c4 	movi	r8,15
  80336c:	200f883a 	mov	r7,r4
  803370:	2884b03a 	or	r2,r5,r2
  803374:	1006943a 	slli	r3,r2,16
  803378:	10c6b03a 	or	r3,r2,r3
  80337c:	41800a2e 	bgeu	r8,r6,8033a8 <memset+0x7c>
  803380:	4005883a 	mov	r2,r8
  803384:	31bffc04 	addi	r6,r6,-16
  803388:	38c00015 	stw	r3,0(r7)
  80338c:	38c00115 	stw	r3,4(r7)
  803390:	38c00215 	stw	r3,8(r7)
  803394:	38c00315 	stw	r3,12(r7)
  803398:	39c00404 	addi	r7,r7,16
  80339c:	11bff936 	bltu	r2,r6,803384 <memset+0x58>
  8033a0:	008000c4 	movi	r2,3
  8033a4:	1180052e 	bgeu	r2,r6,8033bc <memset+0x90>
  8033a8:	31bfff04 	addi	r6,r6,-4
  8033ac:	008000c4 	movi	r2,3
  8033b0:	38c00015 	stw	r3,0(r7)
  8033b4:	39c00104 	addi	r7,r7,4
  8033b8:	11bffb36 	bltu	r2,r6,8033a8 <memset+0x7c>
  8033bc:	3807883a 	mov	r3,r7
  8033c0:	003fe006 	br	803344 <memset+0x18>

008033c4 <_open_r>:
  8033c4:	defffd04 	addi	sp,sp,-12
  8033c8:	dc000015 	stw	r16,0(sp)
  8033cc:	040020b4 	movhi	r16,130
  8033d0:	8422ed04 	addi	r16,r16,-29772
  8033d4:	dc400115 	stw	r17,4(sp)
  8033d8:	80000015 	stw	zero,0(r16)
  8033dc:	2023883a 	mov	r17,r4
  8033e0:	2809883a 	mov	r4,r5
  8033e4:	300b883a 	mov	r5,r6
  8033e8:	380d883a 	mov	r6,r7
  8033ec:	dfc00215 	stw	ra,8(sp)
  8033f0:	0810e940 	call	810e94 <open>
  8033f4:	1007883a 	mov	r3,r2
  8033f8:	00bfffc4 	movi	r2,-1
  8033fc:	18800626 	beq	r3,r2,803418 <_open_r+0x54>
  803400:	1805883a 	mov	r2,r3
  803404:	dfc00217 	ldw	ra,8(sp)
  803408:	dc400117 	ldw	r17,4(sp)
  80340c:	dc000017 	ldw	r16,0(sp)
  803410:	dec00304 	addi	sp,sp,12
  803414:	f800283a 	ret
  803418:	80800017 	ldw	r2,0(r16)
  80341c:	103ff826 	beq	r2,zero,803400 <_open_r+0x3c>
  803420:	88800015 	stw	r2,0(r17)
  803424:	1805883a 	mov	r2,r3
  803428:	dfc00217 	ldw	ra,8(sp)
  80342c:	dc400117 	ldw	r17,4(sp)
  803430:	dc000017 	ldw	r16,0(sp)
  803434:	dec00304 	addi	sp,sp,12
  803438:	f800283a 	ret

0080343c <printf>:
  80343c:	defffb04 	addi	sp,sp,-20
  803440:	dfc00115 	stw	ra,4(sp)
  803444:	d9400215 	stw	r5,8(sp)
  803448:	d9800315 	stw	r6,12(sp)
  80344c:	d9c00415 	stw	r7,16(sp)
  803450:	00802074 	movhi	r2,129
  803454:	109b9704 	addi	r2,r2,28252
  803458:	10c00017 	ldw	r3,0(r2)
  80345c:	200b883a 	mov	r5,r4
  803460:	d8800204 	addi	r2,sp,8
  803464:	19000217 	ldw	r4,8(r3)
  803468:	100d883a 	mov	r6,r2
  80346c:	d8800015 	stw	r2,0(sp)
  803470:	08060040 	call	806004 <__vfprintf_internal>
  803474:	dfc00117 	ldw	ra,4(sp)
  803478:	dec00504 	addi	sp,sp,20
  80347c:	f800283a 	ret

00803480 <_printf_r>:
  803480:	defffc04 	addi	sp,sp,-16
  803484:	dfc00115 	stw	ra,4(sp)
  803488:	d9800215 	stw	r6,8(sp)
  80348c:	d9c00315 	stw	r7,12(sp)
  803490:	280d883a 	mov	r6,r5
  803494:	21400217 	ldw	r5,8(r4)
  803498:	d8c00204 	addi	r3,sp,8
  80349c:	180f883a 	mov	r7,r3
  8034a0:	d8c00015 	stw	r3,0(sp)
  8034a4:	08041580 	call	804158 <___vfprintf_internal_r>
  8034a8:	dfc00117 	ldw	ra,4(sp)
  8034ac:	dec00404 	addi	sp,sp,16
  8034b0:	f800283a 	ret

008034b4 <_realloc_r>:
  8034b4:	defff404 	addi	sp,sp,-48
  8034b8:	dd800815 	stw	r22,32(sp)
  8034bc:	dc800415 	stw	r18,16(sp)
  8034c0:	dc400315 	stw	r17,12(sp)
  8034c4:	dfc00b15 	stw	ra,44(sp)
  8034c8:	df000a15 	stw	fp,40(sp)
  8034cc:	ddc00915 	stw	r23,36(sp)
  8034d0:	dd400715 	stw	r21,28(sp)
  8034d4:	dd000615 	stw	r20,24(sp)
  8034d8:	dcc00515 	stw	r19,20(sp)
  8034dc:	dc000215 	stw	r16,8(sp)
  8034e0:	2825883a 	mov	r18,r5
  8034e4:	3023883a 	mov	r17,r6
  8034e8:	202d883a 	mov	r22,r4
  8034ec:	2800c926 	beq	r5,zero,803814 <_realloc_r+0x360>
  8034f0:	0810d780 	call	810d78 <__malloc_lock>
  8034f4:	943ffe04 	addi	r16,r18,-8
  8034f8:	88c002c4 	addi	r3,r17,11
  8034fc:	00800584 	movi	r2,22
  803500:	82000117 	ldw	r8,4(r16)
  803504:	10c01b2e 	bgeu	r2,r3,803574 <_realloc_r+0xc0>
  803508:	00bffe04 	movi	r2,-8
  80350c:	188e703a 	and	r7,r3,r2
  803510:	3839883a 	mov	fp,r7
  803514:	38001a16 	blt	r7,zero,803580 <_realloc_r+0xcc>
  803518:	e4401936 	bltu	fp,r17,803580 <_realloc_r+0xcc>
  80351c:	013fff04 	movi	r4,-4
  803520:	4126703a 	and	r19,r8,r4
  803524:	99c02616 	blt	r19,r7,8035c0 <_realloc_r+0x10c>
  803528:	802b883a 	mov	r21,r16
  80352c:	9829883a 	mov	r20,r19
  803530:	84000204 	addi	r16,r16,8
  803534:	a80f883a 	mov	r7,r21
  803538:	a70dc83a 	sub	r6,r20,fp
  80353c:	008003c4 	movi	r2,15
  803540:	1180c136 	bltu	r2,r6,803848 <_realloc_r+0x394>
  803544:	38800117 	ldw	r2,4(r7)
  803548:	a549883a 	add	r4,r20,r21
  80354c:	1080004c 	andi	r2,r2,1
  803550:	a084b03a 	or	r2,r20,r2
  803554:	38800115 	stw	r2,4(r7)
  803558:	20c00117 	ldw	r3,4(r4)
  80355c:	18c00054 	ori	r3,r3,1
  803560:	20c00115 	stw	r3,4(r4)
  803564:	b009883a 	mov	r4,r22
  803568:	0810d980 	call	810d98 <__malloc_unlock>
  80356c:	8023883a 	mov	r17,r16
  803570:	00000606 	br	80358c <_realloc_r+0xd8>
  803574:	01c00404 	movi	r7,16
  803578:	3839883a 	mov	fp,r7
  80357c:	e47fe72e 	bgeu	fp,r17,80351c <_realloc_r+0x68>
  803580:	00800304 	movi	r2,12
  803584:	0023883a 	mov	r17,zero
  803588:	b0800015 	stw	r2,0(r22)
  80358c:	8805883a 	mov	r2,r17
  803590:	dfc00b17 	ldw	ra,44(sp)
  803594:	df000a17 	ldw	fp,40(sp)
  803598:	ddc00917 	ldw	r23,36(sp)
  80359c:	dd800817 	ldw	r22,32(sp)
  8035a0:	dd400717 	ldw	r21,28(sp)
  8035a4:	dd000617 	ldw	r20,24(sp)
  8035a8:	dcc00517 	ldw	r19,20(sp)
  8035ac:	dc800417 	ldw	r18,16(sp)
  8035b0:	dc400317 	ldw	r17,12(sp)
  8035b4:	dc000217 	ldw	r16,8(sp)
  8035b8:	dec00c04 	addi	sp,sp,48
  8035bc:	f800283a 	ret
  8035c0:	00802074 	movhi	r2,129
  8035c4:	10958904 	addi	r2,r2,22052
  8035c8:	12400217 	ldw	r9,8(r2)
  8035cc:	84cd883a 	add	r6,r16,r19
  8035d0:	802b883a 	mov	r21,r16
  8035d4:	3240b926 	beq	r6,r9,8038bc <_realloc_r+0x408>
  8035d8:	31400117 	ldw	r5,4(r6)
  8035dc:	00bfff84 	movi	r2,-2
  8035e0:	2884703a 	and	r2,r5,r2
  8035e4:	1185883a 	add	r2,r2,r6
  8035e8:	10c00117 	ldw	r3,4(r2)
  8035ec:	18c0004c 	andi	r3,r3,1
  8035f0:	1807003a 	cmpeq	r3,r3,zero
  8035f4:	1800a326 	beq	r3,zero,803884 <_realloc_r+0x3d0>
  8035f8:	2908703a 	and	r4,r5,r4
  8035fc:	9929883a 	add	r20,r19,r4
  803600:	a1c0a30e 	bge	r20,r7,803890 <_realloc_r+0x3dc>
  803604:	4080004c 	andi	r2,r8,1
  803608:	1000551e 	bne	r2,zero,803760 <_realloc_r+0x2ac>
  80360c:	80800017 	ldw	r2,0(r16)
  803610:	80afc83a 	sub	r23,r16,r2
  803614:	b8c00117 	ldw	r3,4(r23)
  803618:	00bfff04 	movi	r2,-4
  80361c:	1884703a 	and	r2,r3,r2
  803620:	30002e26 	beq	r6,zero,8036dc <_realloc_r+0x228>
  803624:	3240b926 	beq	r6,r9,80390c <_realloc_r+0x458>
  803628:	98a9883a 	add	r20,r19,r2
  80362c:	2509883a 	add	r4,r4,r20
  803630:	d9000015 	stw	r4,0(sp)
  803634:	21c02a16 	blt	r4,r7,8036e0 <_realloc_r+0x22c>
  803638:	30800317 	ldw	r2,12(r6)
  80363c:	30c00217 	ldw	r3,8(r6)
  803640:	01400904 	movi	r5,36
  803644:	99bfff04 	addi	r6,r19,-4
  803648:	18800315 	stw	r2,12(r3)
  80364c:	10c00215 	stw	r3,8(r2)
  803650:	b9000317 	ldw	r4,12(r23)
  803654:	b8800217 	ldw	r2,8(r23)
  803658:	b82b883a 	mov	r21,r23
  80365c:	bc000204 	addi	r16,r23,8
  803660:	20800215 	stw	r2,8(r4)
  803664:	11000315 	stw	r4,12(r2)
  803668:	2980e436 	bltu	r5,r6,8039fc <_realloc_r+0x548>
  80366c:	008004c4 	movi	r2,19
  803670:	9009883a 	mov	r4,r18
  803674:	8011883a 	mov	r8,r16
  803678:	11800f2e 	bgeu	r2,r6,8036b8 <_realloc_r+0x204>
  80367c:	90800017 	ldw	r2,0(r18)
  803680:	ba000404 	addi	r8,r23,16
  803684:	91000204 	addi	r4,r18,8
  803688:	b8800215 	stw	r2,8(r23)
  80368c:	90c00117 	ldw	r3,4(r18)
  803690:	008006c4 	movi	r2,27
  803694:	b8c00315 	stw	r3,12(r23)
  803698:	1180072e 	bgeu	r2,r6,8036b8 <_realloc_r+0x204>
  80369c:	90c00217 	ldw	r3,8(r18)
  8036a0:	ba000604 	addi	r8,r23,24
  8036a4:	91000404 	addi	r4,r18,16
  8036a8:	b8c00415 	stw	r3,16(r23)
  8036ac:	90800317 	ldw	r2,12(r18)
  8036b0:	b8800515 	stw	r2,20(r23)
  8036b4:	3140e726 	beq	r6,r5,803a54 <_realloc_r+0x5a0>
  8036b8:	20800017 	ldw	r2,0(r4)
  8036bc:	dd000017 	ldw	r20,0(sp)
  8036c0:	b80f883a 	mov	r7,r23
  8036c4:	40800015 	stw	r2,0(r8)
  8036c8:	20c00117 	ldw	r3,4(r4)
  8036cc:	40c00115 	stw	r3,4(r8)
  8036d0:	20800217 	ldw	r2,8(r4)
  8036d4:	40800215 	stw	r2,8(r8)
  8036d8:	003f9706 	br	803538 <_realloc_r+0x84>
  8036dc:	98a9883a 	add	r20,r19,r2
  8036e0:	a1c01f16 	blt	r20,r7,803760 <_realloc_r+0x2ac>
  8036e4:	b8c00317 	ldw	r3,12(r23)
  8036e8:	b8800217 	ldw	r2,8(r23)
  8036ec:	99bfff04 	addi	r6,r19,-4
  8036f0:	01400904 	movi	r5,36
  8036f4:	b82b883a 	mov	r21,r23
  8036f8:	18800215 	stw	r2,8(r3)
  8036fc:	10c00315 	stw	r3,12(r2)
  803700:	bc000204 	addi	r16,r23,8
  803704:	2980c336 	bltu	r5,r6,803a14 <_realloc_r+0x560>
  803708:	008004c4 	movi	r2,19
  80370c:	9009883a 	mov	r4,r18
  803710:	8011883a 	mov	r8,r16
  803714:	11800f2e 	bgeu	r2,r6,803754 <_realloc_r+0x2a0>
  803718:	90800017 	ldw	r2,0(r18)
  80371c:	ba000404 	addi	r8,r23,16
  803720:	91000204 	addi	r4,r18,8
  803724:	b8800215 	stw	r2,8(r23)
  803728:	90c00117 	ldw	r3,4(r18)
  80372c:	008006c4 	movi	r2,27
  803730:	b8c00315 	stw	r3,12(r23)
  803734:	1180072e 	bgeu	r2,r6,803754 <_realloc_r+0x2a0>
  803738:	90c00217 	ldw	r3,8(r18)
  80373c:	ba000604 	addi	r8,r23,24
  803740:	91000404 	addi	r4,r18,16
  803744:	b8c00415 	stw	r3,16(r23)
  803748:	90800317 	ldw	r2,12(r18)
  80374c:	b8800515 	stw	r2,20(r23)
  803750:	3140c726 	beq	r6,r5,803a70 <_realloc_r+0x5bc>
  803754:	20800017 	ldw	r2,0(r4)
  803758:	b80f883a 	mov	r7,r23
  80375c:	003fd906 	br	8036c4 <_realloc_r+0x210>
  803760:	880b883a 	mov	r5,r17
  803764:	b009883a 	mov	r4,r22
  803768:	08029880 	call	802988 <_malloc_r>
  80376c:	1023883a 	mov	r17,r2
  803770:	10002526 	beq	r2,zero,803808 <_realloc_r+0x354>
  803774:	80800117 	ldw	r2,4(r16)
  803778:	00ffff84 	movi	r3,-2
  80377c:	893ffe04 	addi	r4,r17,-8
  803780:	10c4703a 	and	r2,r2,r3
  803784:	8085883a 	add	r2,r16,r2
  803788:	20809526 	beq	r4,r2,8039e0 <_realloc_r+0x52c>
  80378c:	99bfff04 	addi	r6,r19,-4
  803790:	01c00904 	movi	r7,36
  803794:	39804536 	bltu	r7,r6,8038ac <_realloc_r+0x3f8>
  803798:	008004c4 	movi	r2,19
  80379c:	9009883a 	mov	r4,r18
  8037a0:	880b883a 	mov	r5,r17
  8037a4:	11800f2e 	bgeu	r2,r6,8037e4 <_realloc_r+0x330>
  8037a8:	90800017 	ldw	r2,0(r18)
  8037ac:	89400204 	addi	r5,r17,8
  8037b0:	91000204 	addi	r4,r18,8
  8037b4:	88800015 	stw	r2,0(r17)
  8037b8:	90c00117 	ldw	r3,4(r18)
  8037bc:	008006c4 	movi	r2,27
  8037c0:	88c00115 	stw	r3,4(r17)
  8037c4:	1180072e 	bgeu	r2,r6,8037e4 <_realloc_r+0x330>
  8037c8:	90c00217 	ldw	r3,8(r18)
  8037cc:	89400404 	addi	r5,r17,16
  8037d0:	91000404 	addi	r4,r18,16
  8037d4:	88c00215 	stw	r3,8(r17)
  8037d8:	90800317 	ldw	r2,12(r18)
  8037dc:	88800315 	stw	r2,12(r17)
  8037e0:	31c09126 	beq	r6,r7,803a28 <_realloc_r+0x574>
  8037e4:	20800017 	ldw	r2,0(r4)
  8037e8:	28800015 	stw	r2,0(r5)
  8037ec:	20c00117 	ldw	r3,4(r4)
  8037f0:	28c00115 	stw	r3,4(r5)
  8037f4:	20800217 	ldw	r2,8(r4)
  8037f8:	28800215 	stw	r2,8(r5)
  8037fc:	900b883a 	mov	r5,r18
  803800:	b009883a 	mov	r4,r22
  803804:	08019f00 	call	8019f0 <_free_r>
  803808:	b009883a 	mov	r4,r22
  80380c:	0810d980 	call	810d98 <__malloc_unlock>
  803810:	003f5e06 	br	80358c <_realloc_r+0xd8>
  803814:	300b883a 	mov	r5,r6
  803818:	dfc00b17 	ldw	ra,44(sp)
  80381c:	df000a17 	ldw	fp,40(sp)
  803820:	ddc00917 	ldw	r23,36(sp)
  803824:	dd800817 	ldw	r22,32(sp)
  803828:	dd400717 	ldw	r21,28(sp)
  80382c:	dd000617 	ldw	r20,24(sp)
  803830:	dcc00517 	ldw	r19,20(sp)
  803834:	dc800417 	ldw	r18,16(sp)
  803838:	dc400317 	ldw	r17,12(sp)
  80383c:	dc000217 	ldw	r16,8(sp)
  803840:	dec00c04 	addi	sp,sp,48
  803844:	08029881 	jmpi	802988 <_malloc_r>
  803848:	38800117 	ldw	r2,4(r7)
  80384c:	e54b883a 	add	r5,fp,r21
  803850:	31000054 	ori	r4,r6,1
  803854:	1080004c 	andi	r2,r2,1
  803858:	1704b03a 	or	r2,r2,fp
  80385c:	38800115 	stw	r2,4(r7)
  803860:	29000115 	stw	r4,4(r5)
  803864:	2987883a 	add	r3,r5,r6
  803868:	18800117 	ldw	r2,4(r3)
  80386c:	29400204 	addi	r5,r5,8
  803870:	b009883a 	mov	r4,r22
  803874:	10800054 	ori	r2,r2,1
  803878:	18800115 	stw	r2,4(r3)
  80387c:	08019f00 	call	8019f0 <_free_r>
  803880:	003f3806 	br	803564 <_realloc_r+0xb0>
  803884:	000d883a 	mov	r6,zero
  803888:	0009883a 	mov	r4,zero
  80388c:	003f5d06 	br	803604 <_realloc_r+0x150>
  803890:	30c00217 	ldw	r3,8(r6)
  803894:	30800317 	ldw	r2,12(r6)
  803898:	800f883a 	mov	r7,r16
  80389c:	84000204 	addi	r16,r16,8
  8038a0:	10c00215 	stw	r3,8(r2)
  8038a4:	18800315 	stw	r2,12(r3)
  8038a8:	003f2306 	br	803538 <_realloc_r+0x84>
  8038ac:	8809883a 	mov	r4,r17
  8038b0:	900b883a 	mov	r5,r18
  8038b4:	080324c0 	call	80324c <memmove>
  8038b8:	003fd006 	br	8037fc <_realloc_r+0x348>
  8038bc:	30800117 	ldw	r2,4(r6)
  8038c0:	e0c00404 	addi	r3,fp,16
  8038c4:	1108703a 	and	r4,r2,r4
  8038c8:	9905883a 	add	r2,r19,r4
  8038cc:	10ff4d16 	blt	r2,r3,803604 <_realloc_r+0x150>
  8038d0:	1705c83a 	sub	r2,r2,fp
  8038d4:	870b883a 	add	r5,r16,fp
  8038d8:	10800054 	ori	r2,r2,1
  8038dc:	28800115 	stw	r2,4(r5)
  8038e0:	80c00117 	ldw	r3,4(r16)
  8038e4:	00802074 	movhi	r2,129
  8038e8:	10958904 	addi	r2,r2,22052
  8038ec:	b009883a 	mov	r4,r22
  8038f0:	18c0004c 	andi	r3,r3,1
  8038f4:	e0c6b03a 	or	r3,fp,r3
  8038f8:	11400215 	stw	r5,8(r2)
  8038fc:	80c00115 	stw	r3,4(r16)
  803900:	0810d980 	call	810d98 <__malloc_unlock>
  803904:	84400204 	addi	r17,r16,8
  803908:	003f2006 	br	80358c <_realloc_r+0xd8>
  80390c:	98a9883a 	add	r20,r19,r2
  803910:	2509883a 	add	r4,r4,r20
  803914:	e0800404 	addi	r2,fp,16
  803918:	d9000115 	stw	r4,4(sp)
  80391c:	20bf7016 	blt	r4,r2,8036e0 <_realloc_r+0x22c>
  803920:	b8c00317 	ldw	r3,12(r23)
  803924:	b8800217 	ldw	r2,8(r23)
  803928:	99bfff04 	addi	r6,r19,-4
  80392c:	01400904 	movi	r5,36
  803930:	18800215 	stw	r2,8(r3)
  803934:	10c00315 	stw	r3,12(r2)
  803938:	bc400204 	addi	r17,r23,8
  80393c:	29804136 	bltu	r5,r6,803a44 <_realloc_r+0x590>
  803940:	008004c4 	movi	r2,19
  803944:	9009883a 	mov	r4,r18
  803948:	880f883a 	mov	r7,r17
  80394c:	11800f2e 	bgeu	r2,r6,80398c <_realloc_r+0x4d8>
  803950:	90800017 	ldw	r2,0(r18)
  803954:	b9c00404 	addi	r7,r23,16
  803958:	91000204 	addi	r4,r18,8
  80395c:	b8800215 	stw	r2,8(r23)
  803960:	90c00117 	ldw	r3,4(r18)
  803964:	008006c4 	movi	r2,27
  803968:	b8c00315 	stw	r3,12(r23)
  80396c:	1180072e 	bgeu	r2,r6,80398c <_realloc_r+0x4d8>
  803970:	90c00217 	ldw	r3,8(r18)
  803974:	b9c00604 	addi	r7,r23,24
  803978:	91000404 	addi	r4,r18,16
  80397c:	b8c00415 	stw	r3,16(r23)
  803980:	90800317 	ldw	r2,12(r18)
  803984:	b8800515 	stw	r2,20(r23)
  803988:	31404026 	beq	r6,r5,803a8c <_realloc_r+0x5d8>
  80398c:	20800017 	ldw	r2,0(r4)
  803990:	38800015 	stw	r2,0(r7)
  803994:	20c00117 	ldw	r3,4(r4)
  803998:	38c00115 	stw	r3,4(r7)
  80399c:	20800217 	ldw	r2,8(r4)
  8039a0:	38800215 	stw	r2,8(r7)
  8039a4:	d8c00117 	ldw	r3,4(sp)
  8039a8:	bf0b883a 	add	r5,r23,fp
  8039ac:	b009883a 	mov	r4,r22
  8039b0:	1f05c83a 	sub	r2,r3,fp
  8039b4:	10800054 	ori	r2,r2,1
  8039b8:	28800115 	stw	r2,4(r5)
  8039bc:	b8c00117 	ldw	r3,4(r23)
  8039c0:	00802074 	movhi	r2,129
  8039c4:	10958904 	addi	r2,r2,22052
  8039c8:	11400215 	stw	r5,8(r2)
  8039cc:	18c0004c 	andi	r3,r3,1
  8039d0:	e0c6b03a 	or	r3,fp,r3
  8039d4:	b8c00115 	stw	r3,4(r23)
  8039d8:	0810d980 	call	810d98 <__malloc_unlock>
  8039dc:	003eeb06 	br	80358c <_realloc_r+0xd8>
  8039e0:	20800117 	ldw	r2,4(r4)
  8039e4:	00ffff04 	movi	r3,-4
  8039e8:	800f883a 	mov	r7,r16
  8039ec:	10c4703a 	and	r2,r2,r3
  8039f0:	98a9883a 	add	r20,r19,r2
  8039f4:	84000204 	addi	r16,r16,8
  8039f8:	003ecf06 	br	803538 <_realloc_r+0x84>
  8039fc:	900b883a 	mov	r5,r18
  803a00:	8009883a 	mov	r4,r16
  803a04:	080324c0 	call	80324c <memmove>
  803a08:	dd000017 	ldw	r20,0(sp)
  803a0c:	b80f883a 	mov	r7,r23
  803a10:	003ec906 	br	803538 <_realloc_r+0x84>
  803a14:	900b883a 	mov	r5,r18
  803a18:	8009883a 	mov	r4,r16
  803a1c:	080324c0 	call	80324c <memmove>
  803a20:	b80f883a 	mov	r7,r23
  803a24:	003ec406 	br	803538 <_realloc_r+0x84>
  803a28:	90c00417 	ldw	r3,16(r18)
  803a2c:	89400604 	addi	r5,r17,24
  803a30:	91000604 	addi	r4,r18,24
  803a34:	88c00415 	stw	r3,16(r17)
  803a38:	90800517 	ldw	r2,20(r18)
  803a3c:	88800515 	stw	r2,20(r17)
  803a40:	003f6806 	br	8037e4 <_realloc_r+0x330>
  803a44:	900b883a 	mov	r5,r18
  803a48:	8809883a 	mov	r4,r17
  803a4c:	080324c0 	call	80324c <memmove>
  803a50:	003fd406 	br	8039a4 <_realloc_r+0x4f0>
  803a54:	90c00417 	ldw	r3,16(r18)
  803a58:	91000604 	addi	r4,r18,24
  803a5c:	ba000804 	addi	r8,r23,32
  803a60:	b8c00615 	stw	r3,24(r23)
  803a64:	90800517 	ldw	r2,20(r18)
  803a68:	b8800715 	stw	r2,28(r23)
  803a6c:	003f1206 	br	8036b8 <_realloc_r+0x204>
  803a70:	90c00417 	ldw	r3,16(r18)
  803a74:	91000604 	addi	r4,r18,24
  803a78:	ba000804 	addi	r8,r23,32
  803a7c:	b8c00615 	stw	r3,24(r23)
  803a80:	90800517 	ldw	r2,20(r18)
  803a84:	b8800715 	stw	r2,28(r23)
  803a88:	003f3206 	br	803754 <_realloc_r+0x2a0>
  803a8c:	90c00417 	ldw	r3,16(r18)
  803a90:	91000604 	addi	r4,r18,24
  803a94:	b9c00804 	addi	r7,r23,32
  803a98:	b8c00615 	stw	r3,24(r23)
  803a9c:	90800517 	ldw	r2,20(r18)
  803aa0:	b8800715 	stw	r2,28(r23)
  803aa4:	003fb906 	br	80398c <_realloc_r+0x4d8>

00803aa8 <__srefill_r>:
  803aa8:	defffd04 	addi	sp,sp,-12
  803aac:	dc400115 	stw	r17,4(sp)
  803ab0:	dc000015 	stw	r16,0(sp)
  803ab4:	dfc00215 	stw	ra,8(sp)
  803ab8:	2023883a 	mov	r17,r4
  803abc:	2821883a 	mov	r16,r5
  803ac0:	20000226 	beq	r4,zero,803acc <__srefill_r+0x24>
  803ac4:	20800e17 	ldw	r2,56(r4)
  803ac8:	10004126 	beq	r2,zero,803bd0 <__srefill_r+0x128>
  803acc:	80c0030b 	ldhu	r3,12(r16)
  803ad0:	80000115 	stw	zero,4(r16)
  803ad4:	1880080c 	andi	r2,r3,32
  803ad8:	1000361e 	bne	r2,zero,803bb4 <__srefill_r+0x10c>
  803adc:	1880010c 	andi	r2,r3,4
  803ae0:	1000211e 	bne	r2,zero,803b68 <__srefill_r+0xc0>
  803ae4:	1880040c 	andi	r2,r3,16
  803ae8:	10005026 	beq	r2,zero,803c2c <__srefill_r+0x184>
  803aec:	1880020c 	andi	r2,r3,8
  803af0:	1000541e 	bne	r2,zero,803c44 <__srefill_r+0x19c>
  803af4:	8080030b 	ldhu	r2,12(r16)
  803af8:	10800114 	ori	r2,r2,4
  803afc:	8080030d 	sth	r2,12(r16)
  803b00:	80800417 	ldw	r2,16(r16)
  803b04:	10004526 	beq	r2,zero,803c1c <__srefill_r+0x174>
  803b08:	8080030b 	ldhu	r2,12(r16)
  803b0c:	108000cc 	andi	r2,r2,3
  803b10:	1000361e 	bne	r2,zero,803bec <__srefill_r+0x144>
  803b14:	81800417 	ldw	r6,16(r16)
  803b18:	80c00817 	ldw	r3,32(r16)
  803b1c:	81400717 	ldw	r5,28(r16)
  803b20:	81c00517 	ldw	r7,20(r16)
  803b24:	8809883a 	mov	r4,r17
  803b28:	81800015 	stw	r6,0(r16)
  803b2c:	183ee83a 	callr	r3
  803b30:	80c0030b 	ldhu	r3,12(r16)
  803b34:	1009883a 	mov	r4,r2
  803b38:	80800115 	stw	r2,4(r16)
  803b3c:	00b7ffc4 	movi	r2,-8193
  803b40:	1884703a 	and	r2,r3,r2
  803b44:	8080030d 	sth	r2,12(r16)
  803b48:	0100230e 	bge	zero,r4,803bd8 <__srefill_r+0x130>
  803b4c:	0009883a 	mov	r4,zero
  803b50:	2005883a 	mov	r2,r4
  803b54:	dfc00217 	ldw	ra,8(sp)
  803b58:	dc400117 	ldw	r17,4(sp)
  803b5c:	dc000017 	ldw	r16,0(sp)
  803b60:	dec00304 	addi	sp,sp,12
  803b64:	f800283a 	ret
  803b68:	81400c17 	ldw	r5,48(r16)
  803b6c:	283fe426 	beq	r5,zero,803b00 <__srefill_r+0x58>
  803b70:	80801004 	addi	r2,r16,64
  803b74:	28800226 	beq	r5,r2,803b80 <__srefill_r+0xd8>
  803b78:	8809883a 	mov	r4,r17
  803b7c:	08019f00 	call	8019f0 <_free_r>
  803b80:	80800f17 	ldw	r2,60(r16)
  803b84:	80000c15 	stw	zero,48(r16)
  803b88:	80800115 	stw	r2,4(r16)
  803b8c:	103fdc26 	beq	r2,zero,803b00 <__srefill_r+0x58>
  803b90:	80800e17 	ldw	r2,56(r16)
  803b94:	0009883a 	mov	r4,zero
  803b98:	80800015 	stw	r2,0(r16)
  803b9c:	2005883a 	mov	r2,r4
  803ba0:	dfc00217 	ldw	ra,8(sp)
  803ba4:	dc400117 	ldw	r17,4(sp)
  803ba8:	dc000017 	ldw	r16,0(sp)
  803bac:	dec00304 	addi	sp,sp,12
  803bb0:	f800283a 	ret
  803bb4:	013fffc4 	movi	r4,-1
  803bb8:	2005883a 	mov	r2,r4
  803bbc:	dfc00217 	ldw	ra,8(sp)
  803bc0:	dc400117 	ldw	r17,4(sp)
  803bc4:	dc000017 	ldw	r16,0(sp)
  803bc8:	dec00304 	addi	sp,sp,12
  803bcc:	f800283a 	ret
  803bd0:	080146c0 	call	80146c <__sinit>
  803bd4:	003fbd06 	br	803acc <__srefill_r+0x24>
  803bd8:	20000b1e 	bne	r4,zero,803c08 <__srefill_r+0x160>
  803bdc:	10800814 	ori	r2,r2,32
  803be0:	013fffc4 	movi	r4,-1
  803be4:	8080030d 	sth	r2,12(r16)
  803be8:	003fd906 	br	803b50 <__srefill_r+0xa8>
  803bec:	00802074 	movhi	r2,129
  803bf0:	109b9804 	addi	r2,r2,28256
  803bf4:	11000017 	ldw	r4,0(r2)
  803bf8:	01402034 	movhi	r5,128
  803bfc:	294f1b04 	addi	r5,r5,15468
  803c00:	080273c0 	call	80273c <_fwalk>
  803c04:	003fc306 	br	803b14 <__srefill_r+0x6c>
  803c08:	10801014 	ori	r2,r2,64
  803c0c:	013fffc4 	movi	r4,-1
  803c10:	8080030d 	sth	r2,12(r16)
  803c14:	80000115 	stw	zero,4(r16)
  803c18:	003fcd06 	br	803b50 <__srefill_r+0xa8>
  803c1c:	8809883a 	mov	r4,r17
  803c20:	800b883a 	mov	r5,r16
  803c24:	08027f40 	call	8027f4 <__smakebuf_r>
  803c28:	003fb706 	br	803b08 <__srefill_r+0x60>
  803c2c:	18c01014 	ori	r3,r3,64
  803c30:	00800244 	movi	r2,9
  803c34:	013fffc4 	movi	r4,-1
  803c38:	88800015 	stw	r2,0(r17)
  803c3c:	80c0030d 	sth	r3,12(r16)
  803c40:	003fc306 	br	803b50 <__srefill_r+0xa8>
  803c44:	8809883a 	mov	r4,r17
  803c48:	800b883a 	mov	r5,r16
  803c4c:	08010ac0 	call	8010ac <_fflush_r>
  803c50:	103fd81e 	bne	r2,zero,803bb4 <__srefill_r+0x10c>
  803c54:	8080030b 	ldhu	r2,12(r16)
  803c58:	80000215 	stw	zero,8(r16)
  803c5c:	80000615 	stw	zero,24(r16)
  803c60:	10bffdcc 	andi	r2,r2,65527
  803c64:	8080030d 	sth	r2,12(r16)
  803c68:	003fa206 	br	803af4 <__srefill_r+0x4c>

00803c6c <lflush>:
  803c6c:	20c0030b 	ldhu	r3,12(r4)
  803c70:	01400244 	movi	r5,9
  803c74:	0005883a 	mov	r2,zero
  803c78:	18c0024c 	andi	r3,r3,9
  803c7c:	19400126 	beq	r3,r5,803c84 <lflush+0x18>
  803c80:	f800283a 	ret
  803c84:	08012a81 	jmpi	8012a8 <fflush>

00803c88 <__srget_r>:
  803c88:	defffe04 	addi	sp,sp,-8
  803c8c:	dc000015 	stw	r16,0(sp)
  803c90:	dfc00115 	stw	ra,4(sp)
  803c94:	2821883a 	mov	r16,r5
  803c98:	0803aa80 	call	803aa8 <__srefill_r>
  803c9c:	013fffc4 	movi	r4,-1
  803ca0:	1000071e 	bne	r2,zero,803cc0 <__srget_r+0x38>
  803ca4:	80800117 	ldw	r2,4(r16)
  803ca8:	81000017 	ldw	r4,0(r16)
  803cac:	10bfffc4 	addi	r2,r2,-1
  803cb0:	20c00044 	addi	r3,r4,1
  803cb4:	80800115 	stw	r2,4(r16)
  803cb8:	21000003 	ldbu	r4,0(r4)
  803cbc:	80c00015 	stw	r3,0(r16)
  803cc0:	2005883a 	mov	r2,r4
  803cc4:	dfc00117 	ldw	ra,4(sp)
  803cc8:	dc000017 	ldw	r16,0(sp)
  803ccc:	dec00204 	addi	sp,sp,8
  803cd0:	f800283a 	ret

00803cd4 <__srget>:
  803cd4:	00802074 	movhi	r2,129
  803cd8:	109b9704 	addi	r2,r2,28252
  803cdc:	200b883a 	mov	r5,r4
  803ce0:	11000017 	ldw	r4,0(r2)
  803ce4:	0803c881 	jmpi	803c88 <__srget_r>

00803ce8 <_sbrk_r>:
  803ce8:	defffd04 	addi	sp,sp,-12
  803cec:	dc000015 	stw	r16,0(sp)
  803cf0:	040020b4 	movhi	r16,130
  803cf4:	8422ed04 	addi	r16,r16,-29772
  803cf8:	dc400115 	stw	r17,4(sp)
  803cfc:	80000015 	stw	zero,0(r16)
  803d00:	2023883a 	mov	r17,r4
  803d04:	2809883a 	mov	r4,r5
  803d08:	dfc00215 	stw	ra,8(sp)
  803d0c:	081125c0 	call	81125c <sbrk>
  803d10:	1007883a 	mov	r3,r2
  803d14:	00bfffc4 	movi	r2,-1
  803d18:	18800626 	beq	r3,r2,803d34 <_sbrk_r+0x4c>
  803d1c:	1805883a 	mov	r2,r3
  803d20:	dfc00217 	ldw	ra,8(sp)
  803d24:	dc400117 	ldw	r17,4(sp)
  803d28:	dc000017 	ldw	r16,0(sp)
  803d2c:	dec00304 	addi	sp,sp,12
  803d30:	f800283a 	ret
  803d34:	80800017 	ldw	r2,0(r16)
  803d38:	103ff826 	beq	r2,zero,803d1c <_sbrk_r+0x34>
  803d3c:	88800015 	stw	r2,0(r17)
  803d40:	1805883a 	mov	r2,r3
  803d44:	dfc00217 	ldw	ra,8(sp)
  803d48:	dc400117 	ldw	r17,4(sp)
  803d4c:	dc000017 	ldw	r16,0(sp)
  803d50:	dec00304 	addi	sp,sp,12
  803d54:	f800283a 	ret

00803d58 <sprintf>:
  803d58:	deffe504 	addi	sp,sp,-108
  803d5c:	2013883a 	mov	r9,r4
  803d60:	dfc01815 	stw	ra,96(sp)
  803d64:	d9801915 	stw	r6,100(sp)
  803d68:	d9c01a15 	stw	r7,104(sp)
  803d6c:	d8801904 	addi	r2,sp,100
  803d70:	d8800015 	stw	r2,0(sp)
  803d74:	00802074 	movhi	r2,129
  803d78:	109b9704 	addi	r2,r2,28252
  803d7c:	11000017 	ldw	r4,0(r2)
  803d80:	d9c00017 	ldw	r7,0(sp)
  803d84:	00808204 	movi	r2,520
  803d88:	00e00034 	movhi	r3,32768
  803d8c:	18ffffc4 	addi	r3,r3,-1
  803d90:	280d883a 	mov	r6,r5
  803d94:	d880040d 	sth	r2,16(sp)
  803d98:	d9400104 	addi	r5,sp,4
  803d9c:	00bfffc4 	movi	r2,-1
  803da0:	d8c00615 	stw	r3,24(sp)
  803da4:	d8c00315 	stw	r3,12(sp)
  803da8:	da400515 	stw	r9,20(sp)
  803dac:	d880048d 	sth	r2,18(sp)
  803db0:	da400115 	stw	r9,4(sp)
  803db4:	08041580 	call	804158 <___vfprintf_internal_r>
  803db8:	d8c00117 	ldw	r3,4(sp)
  803dbc:	18000005 	stb	zero,0(r3)
  803dc0:	dfc01817 	ldw	ra,96(sp)
  803dc4:	dec01b04 	addi	sp,sp,108
  803dc8:	f800283a 	ret

00803dcc <_sprintf_r>:
  803dcc:	deffe604 	addi	sp,sp,-104
  803dd0:	2813883a 	mov	r9,r5
  803dd4:	dfc01815 	stw	ra,96(sp)
  803dd8:	d9c01915 	stw	r7,100(sp)
  803ddc:	d8801904 	addi	r2,sp,100
  803de0:	d8800015 	stw	r2,0(sp)
  803de4:	100f883a 	mov	r7,r2
  803de8:	00808204 	movi	r2,520
  803dec:	00e00034 	movhi	r3,32768
  803df0:	18ffffc4 	addi	r3,r3,-1
  803df4:	d880040d 	sth	r2,16(sp)
  803df8:	d9400104 	addi	r5,sp,4
  803dfc:	00bfffc4 	movi	r2,-1
  803e00:	d8c00615 	stw	r3,24(sp)
  803e04:	d8c00315 	stw	r3,12(sp)
  803e08:	da400515 	stw	r9,20(sp)
  803e0c:	d880048d 	sth	r2,18(sp)
  803e10:	da400115 	stw	r9,4(sp)
  803e14:	08041580 	call	804158 <___vfprintf_internal_r>
  803e18:	d8c00117 	ldw	r3,4(sp)
  803e1c:	18000005 	stb	zero,0(r3)
  803e20:	dfc01817 	ldw	ra,96(sp)
  803e24:	dec01a04 	addi	sp,sp,104
  803e28:	f800283a 	ret

00803e2c <eofread>:
  803e2c:	0005883a 	mov	r2,zero
  803e30:	f800283a 	ret

00803e34 <_sscanf_r>:
  803e34:	deffe404 	addi	sp,sp,-112
  803e38:	dcc01915 	stw	r19,100(sp)
  803e3c:	2027883a 	mov	r19,r4
  803e40:	dfc01a15 	stw	ra,104(sp)
  803e44:	dc401815 	stw	r17,96(sp)
  803e48:	d9c01b15 	stw	r7,108(sp)
  803e4c:	00808104 	movi	r2,516
  803e50:	2809883a 	mov	r4,r5
  803e54:	3023883a 	mov	r17,r6
  803e58:	d9400115 	stw	r5,4(sp)
  803e5c:	d9400515 	stw	r5,20(sp)
  803e60:	d880040d 	sth	r2,16(sp)
  803e64:	080408c0 	call	80408c <strlen>
  803e68:	d8c01b04 	addi	r3,sp,108
  803e6c:	d8c00015 	stw	r3,0(sp)
  803e70:	180f883a 	mov	r7,r3
  803e74:	023fffc4 	movi	r8,-1
  803e78:	00c02034 	movhi	r3,128
  803e7c:	18cf8b04 	addi	r3,r3,15916
  803e80:	9809883a 	mov	r4,r19
  803e84:	880d883a 	mov	r6,r17
  803e88:	d9400104 	addi	r5,sp,4
  803e8c:	d8800615 	stw	r2,24(sp)
  803e90:	d8c00915 	stw	r3,36(sp)
  803e94:	da00048d 	sth	r8,18(sp)
  803e98:	d8800215 	stw	r2,8(sp)
  803e9c:	d8000d15 	stw	zero,52(sp)
  803ea0:	d8001215 	stw	zero,72(sp)
  803ea4:	08060280 	call	806028 <__svfscanf_r>
  803ea8:	dfc01a17 	ldw	ra,104(sp)
  803eac:	dcc01917 	ldw	r19,100(sp)
  803eb0:	dc401817 	ldw	r17,96(sp)
  803eb4:	dec01c04 	addi	sp,sp,112
  803eb8:	f800283a 	ret

00803ebc <sscanf>:
  803ebc:	deffe404 	addi	sp,sp,-112
  803ec0:	dfc01915 	stw	ra,100(sp)
  803ec4:	dc401815 	stw	r17,96(sp)
  803ec8:	d9801a15 	stw	r6,104(sp)
  803ecc:	d9c01b15 	stw	r7,108(sp)
  803ed0:	00808104 	movi	r2,516
  803ed4:	2823883a 	mov	r17,r5
  803ed8:	d9000515 	stw	r4,20(sp)
  803edc:	d9000115 	stw	r4,4(sp)
  803ee0:	d880040d 	sth	r2,16(sp)
  803ee4:	080408c0 	call	80408c <strlen>
  803ee8:	d8c01a04 	addi	r3,sp,104
  803eec:	d8c00015 	stw	r3,0(sp)
  803ef0:	00c02074 	movhi	r3,129
  803ef4:	18db9704 	addi	r3,r3,28252
  803ef8:	19000017 	ldw	r4,0(r3)
  803efc:	d9c00017 	ldw	r7,0(sp)
  803f00:	00c02034 	movhi	r3,128
  803f04:	18cf8b04 	addi	r3,r3,15916
  803f08:	023fffc4 	movi	r8,-1
  803f0c:	880d883a 	mov	r6,r17
  803f10:	d9400104 	addi	r5,sp,4
  803f14:	d8800615 	stw	r2,24(sp)
  803f18:	d8c00915 	stw	r3,36(sp)
  803f1c:	da00048d 	sth	r8,18(sp)
  803f20:	d8800215 	stw	r2,8(sp)
  803f24:	d8000d15 	stw	zero,52(sp)
  803f28:	d8001215 	stw	zero,72(sp)
  803f2c:	08060280 	call	806028 <__svfscanf_r>
  803f30:	dfc01917 	ldw	ra,100(sp)
  803f34:	dc401817 	ldw	r17,96(sp)
  803f38:	dec01c04 	addi	sp,sp,112
  803f3c:	f800283a 	ret

00803f40 <__sclose>:
  803f40:	2940038f 	ldh	r5,14(r5)
  803f44:	080795c1 	jmpi	80795c <_close_r>

00803f48 <__sseek>:
  803f48:	defffe04 	addi	sp,sp,-8
  803f4c:	dc000015 	stw	r16,0(sp)
  803f50:	2821883a 	mov	r16,r5
  803f54:	2940038f 	ldh	r5,14(r5)
  803f58:	dfc00115 	stw	ra,4(sp)
  803f5c:	08095d40 	call	8095d4 <_lseek_r>
  803f60:	1007883a 	mov	r3,r2
  803f64:	00bfffc4 	movi	r2,-1
  803f68:	18800926 	beq	r3,r2,803f90 <__sseek+0x48>
  803f6c:	8080030b 	ldhu	r2,12(r16)
  803f70:	80c01415 	stw	r3,80(r16)
  803f74:	10840014 	ori	r2,r2,4096
  803f78:	8080030d 	sth	r2,12(r16)
  803f7c:	1805883a 	mov	r2,r3
  803f80:	dfc00117 	ldw	ra,4(sp)
  803f84:	dc000017 	ldw	r16,0(sp)
  803f88:	dec00204 	addi	sp,sp,8
  803f8c:	f800283a 	ret
  803f90:	8080030b 	ldhu	r2,12(r16)
  803f94:	10bbffcc 	andi	r2,r2,61439
  803f98:	8080030d 	sth	r2,12(r16)
  803f9c:	1805883a 	mov	r2,r3
  803fa0:	dfc00117 	ldw	ra,4(sp)
  803fa4:	dc000017 	ldw	r16,0(sp)
  803fa8:	dec00204 	addi	sp,sp,8
  803fac:	f800283a 	ret

00803fb0 <__swrite>:
  803fb0:	2880030b 	ldhu	r2,12(r5)
  803fb4:	defffb04 	addi	sp,sp,-20
  803fb8:	dcc00315 	stw	r19,12(sp)
  803fbc:	1080400c 	andi	r2,r2,256
  803fc0:	dc800215 	stw	r18,8(sp)
  803fc4:	dc400115 	stw	r17,4(sp)
  803fc8:	dc000015 	stw	r16,0(sp)
  803fcc:	3027883a 	mov	r19,r6
  803fd0:	3825883a 	mov	r18,r7
  803fd4:	dfc00415 	stw	ra,16(sp)
  803fd8:	2821883a 	mov	r16,r5
  803fdc:	000d883a 	mov	r6,zero
  803fe0:	01c00084 	movi	r7,2
  803fe4:	2023883a 	mov	r17,r4
  803fe8:	10000226 	beq	r2,zero,803ff4 <__swrite+0x44>
  803fec:	2940038f 	ldh	r5,14(r5)
  803ff0:	08095d40 	call	8095d4 <_lseek_r>
  803ff4:	8080030b 	ldhu	r2,12(r16)
  803ff8:	8140038f 	ldh	r5,14(r16)
  803ffc:	8809883a 	mov	r4,r17
  804000:	10bbffcc 	andi	r2,r2,61439
  804004:	980d883a 	mov	r6,r19
  804008:	900f883a 	mov	r7,r18
  80400c:	8080030d 	sth	r2,12(r16)
  804010:	dfc00417 	ldw	ra,16(sp)
  804014:	dcc00317 	ldw	r19,12(sp)
  804018:	dc800217 	ldw	r18,8(sp)
  80401c:	dc400117 	ldw	r17,4(sp)
  804020:	dc000017 	ldw	r16,0(sp)
  804024:	dec00504 	addi	sp,sp,20
  804028:	08077a81 	jmpi	8077a8 <_write_r>

0080402c <__sread>:
  80402c:	defffe04 	addi	sp,sp,-8
  804030:	dc000015 	stw	r16,0(sp)
  804034:	2821883a 	mov	r16,r5
  804038:	2940038f 	ldh	r5,14(r5)
  80403c:	dfc00115 	stw	ra,4(sp)
  804040:	080a7400 	call	80a740 <_read_r>
  804044:	1007883a 	mov	r3,r2
  804048:	10000816 	blt	r2,zero,80406c <__sread+0x40>
  80404c:	80801417 	ldw	r2,80(r16)
  804050:	10c5883a 	add	r2,r2,r3
  804054:	80801415 	stw	r2,80(r16)
  804058:	1805883a 	mov	r2,r3
  80405c:	dfc00117 	ldw	ra,4(sp)
  804060:	dc000017 	ldw	r16,0(sp)
  804064:	dec00204 	addi	sp,sp,8
  804068:	f800283a 	ret
  80406c:	8080030b 	ldhu	r2,12(r16)
  804070:	10bbffcc 	andi	r2,r2,61439
  804074:	8080030d 	sth	r2,12(r16)
  804078:	1805883a 	mov	r2,r3
  80407c:	dfc00117 	ldw	ra,4(sp)
  804080:	dc000017 	ldw	r16,0(sp)
  804084:	dec00204 	addi	sp,sp,8
  804088:	f800283a 	ret

0080408c <strlen>:
  80408c:	208000cc 	andi	r2,r4,3
  804090:	2011883a 	mov	r8,r4
  804094:	1000161e 	bne	r2,zero,8040f0 <strlen+0x64>
  804098:	20c00017 	ldw	r3,0(r4)
  80409c:	017fbff4 	movhi	r5,65279
  8040a0:	297fbfc4 	addi	r5,r5,-257
  8040a4:	01e02074 	movhi	r7,32897
  8040a8:	39e02004 	addi	r7,r7,-32640
  8040ac:	1945883a 	add	r2,r3,r5
  8040b0:	11c4703a 	and	r2,r2,r7
  8040b4:	00c6303a 	nor	r3,zero,r3
  8040b8:	1886703a 	and	r3,r3,r2
  8040bc:	18000c1e 	bne	r3,zero,8040f0 <strlen+0x64>
  8040c0:	280d883a 	mov	r6,r5
  8040c4:	380b883a 	mov	r5,r7
  8040c8:	21000104 	addi	r4,r4,4
  8040cc:	20800017 	ldw	r2,0(r4)
  8040d0:	1187883a 	add	r3,r2,r6
  8040d4:	1946703a 	and	r3,r3,r5
  8040d8:	0084303a 	nor	r2,zero,r2
  8040dc:	10c4703a 	and	r2,r2,r3
  8040e0:	103ff926 	beq	r2,zero,8040c8 <strlen+0x3c>
  8040e4:	20800007 	ldb	r2,0(r4)
  8040e8:	10000326 	beq	r2,zero,8040f8 <strlen+0x6c>
  8040ec:	21000044 	addi	r4,r4,1
  8040f0:	20800007 	ldb	r2,0(r4)
  8040f4:	103ffd1e 	bne	r2,zero,8040ec <strlen+0x60>
  8040f8:	2205c83a 	sub	r2,r4,r8
  8040fc:	f800283a 	ret

00804100 <__sprint_r>:
  804100:	30800217 	ldw	r2,8(r6)
  804104:	defffe04 	addi	sp,sp,-8
  804108:	dc000015 	stw	r16,0(sp)
  80410c:	dfc00115 	stw	ra,4(sp)
  804110:	3021883a 	mov	r16,r6
  804114:	0007883a 	mov	r3,zero
  804118:	1000061e 	bne	r2,zero,804134 <__sprint_r+0x34>
  80411c:	1805883a 	mov	r2,r3
  804120:	30000115 	stw	zero,4(r6)
  804124:	dfc00117 	ldw	ra,4(sp)
  804128:	dc000017 	ldw	r16,0(sp)
  80412c:	dec00204 	addi	sp,sp,8
  804130:	f800283a 	ret
  804134:	08021d80 	call	8021d8 <__sfvwrite_r>
  804138:	1007883a 	mov	r3,r2
  80413c:	1805883a 	mov	r2,r3
  804140:	80000115 	stw	zero,4(r16)
  804144:	80000215 	stw	zero,8(r16)
  804148:	dfc00117 	ldw	ra,4(sp)
  80414c:	dc000017 	ldw	r16,0(sp)
  804150:	dec00204 	addi	sp,sp,8
  804154:	f800283a 	ret

00804158 <___vfprintf_internal_r>:
  804158:	defea304 	addi	sp,sp,-1396
  80415c:	dd815915 	stw	r22,1380(sp)
  804160:	dc015315 	stw	r16,1356(sp)
  804164:	d9c15215 	stw	r7,1352(sp)
  804168:	dfc15c15 	stw	ra,1392(sp)
  80416c:	df015b15 	stw	fp,1388(sp)
  804170:	ddc15a15 	stw	r23,1384(sp)
  804174:	dd415815 	stw	r21,1376(sp)
  804178:	dd015715 	stw	r20,1372(sp)
  80417c:	dcc15615 	stw	r19,1368(sp)
  804180:	dc815515 	stw	r18,1364(sp)
  804184:	dc415415 	stw	r17,1360(sp)
  804188:	282d883a 	mov	r22,r5
  80418c:	3021883a 	mov	r16,r6
  804190:	d9015015 	stw	r4,1344(sp)
  804194:	08095180 	call	809518 <_localeconv_r>
  804198:	10800017 	ldw	r2,0(r2)
  80419c:	d9c15217 	ldw	r7,1352(sp)
  8041a0:	d8814a15 	stw	r2,1320(sp)
  8041a4:	d8815017 	ldw	r2,1344(sp)
  8041a8:	10000226 	beq	r2,zero,8041b4 <___vfprintf_internal_r+0x5c>
  8041ac:	10800e17 	ldw	r2,56(r2)
  8041b0:	10020d26 	beq	r2,zero,8049e8 <___vfprintf_internal_r+0x890>
  8041b4:	b080030b 	ldhu	r2,12(r22)
  8041b8:	1080020c 	andi	r2,r2,8
  8041bc:	10020e26 	beq	r2,zero,8049f8 <___vfprintf_internal_r+0x8a0>
  8041c0:	b0800417 	ldw	r2,16(r22)
  8041c4:	10020c26 	beq	r2,zero,8049f8 <___vfprintf_internal_r+0x8a0>
  8041c8:	b200030b 	ldhu	r8,12(r22)
  8041cc:	00800284 	movi	r2,10
  8041d0:	40c0068c 	andi	r3,r8,26
  8041d4:	18802f1e 	bne	r3,r2,804294 <___vfprintf_internal_r+0x13c>
  8041d8:	b080038f 	ldh	r2,14(r22)
  8041dc:	10002d16 	blt	r2,zero,804294 <___vfprintf_internal_r+0x13c>
  8041e0:	b240038b 	ldhu	r9,14(r22)
  8041e4:	b2800717 	ldw	r10,28(r22)
  8041e8:	b2c00917 	ldw	r11,36(r22)
  8041ec:	d9015017 	ldw	r4,1344(sp)
  8041f0:	dc402a04 	addi	r17,sp,168
  8041f4:	d8804104 	addi	r2,sp,260
  8041f8:	00c10004 	movi	r3,1024
  8041fc:	423fff4c 	andi	r8,r8,65533
  804200:	800d883a 	mov	r6,r16
  804204:	880b883a 	mov	r5,r17
  804208:	da002d0d 	sth	r8,180(sp)
  80420c:	da402d8d 	sth	r9,182(sp)
  804210:	da803115 	stw	r10,196(sp)
  804214:	dac03315 	stw	r11,204(sp)
  804218:	d8802e15 	stw	r2,184(sp)
  80421c:	d8c02f15 	stw	r3,188(sp)
  804220:	d8802a15 	stw	r2,168(sp)
  804224:	d8c02c15 	stw	r3,176(sp)
  804228:	d8003015 	stw	zero,192(sp)
  80422c:	08041580 	call	804158 <___vfprintf_internal_r>
  804230:	d8814c15 	stw	r2,1328(sp)
  804234:	10000416 	blt	r2,zero,804248 <___vfprintf_internal_r+0xf0>
  804238:	d9015017 	ldw	r4,1344(sp)
  80423c:	880b883a 	mov	r5,r17
  804240:	08010ac0 	call	8010ac <_fflush_r>
  804244:	1002321e 	bne	r2,zero,804b10 <___vfprintf_internal_r+0x9b8>
  804248:	d8802d0b 	ldhu	r2,180(sp)
  80424c:	1080100c 	andi	r2,r2,64
  804250:	10000326 	beq	r2,zero,804260 <___vfprintf_internal_r+0x108>
  804254:	b080030b 	ldhu	r2,12(r22)
  804258:	10801014 	ori	r2,r2,64
  80425c:	b080030d 	sth	r2,12(r22)
  804260:	d8814c17 	ldw	r2,1328(sp)
  804264:	dfc15c17 	ldw	ra,1392(sp)
  804268:	df015b17 	ldw	fp,1388(sp)
  80426c:	ddc15a17 	ldw	r23,1384(sp)
  804270:	dd815917 	ldw	r22,1380(sp)
  804274:	dd415817 	ldw	r21,1376(sp)
  804278:	dd015717 	ldw	r20,1372(sp)
  80427c:	dcc15617 	ldw	r19,1368(sp)
  804280:	dc815517 	ldw	r18,1364(sp)
  804284:	dc415417 	ldw	r17,1360(sp)
  804288:	dc015317 	ldw	r16,1356(sp)
  80428c:	dec15d04 	addi	sp,sp,1396
  804290:	f800283a 	ret
  804294:	0005883a 	mov	r2,zero
  804298:	0007883a 	mov	r3,zero
  80429c:	dd401a04 	addi	r21,sp,104
  8042a0:	d8814315 	stw	r2,1292(sp)
  8042a4:	802f883a 	mov	r23,r16
  8042a8:	d8c14415 	stw	r3,1296(sp)
  8042ac:	d8014c15 	stw	zero,1328(sp)
  8042b0:	d8014915 	stw	zero,1316(sp)
  8042b4:	d8014515 	stw	zero,1300(sp)
  8042b8:	d8014815 	stw	zero,1312(sp)
  8042bc:	dd400d15 	stw	r21,52(sp)
  8042c0:	d8000f15 	stw	zero,60(sp)
  8042c4:	d8000e15 	stw	zero,56(sp)
  8042c8:	b8800007 	ldb	r2,0(r23)
  8042cc:	10001926 	beq	r2,zero,804334 <___vfprintf_internal_r+0x1dc>
  8042d0:	00c00944 	movi	r3,37
  8042d4:	10c01726 	beq	r2,r3,804334 <___vfprintf_internal_r+0x1dc>
  8042d8:	b821883a 	mov	r16,r23
  8042dc:	00000106 	br	8042e4 <___vfprintf_internal_r+0x18c>
  8042e0:	10c00326 	beq	r2,r3,8042f0 <___vfprintf_internal_r+0x198>
  8042e4:	84000044 	addi	r16,r16,1
  8042e8:	80800007 	ldb	r2,0(r16)
  8042ec:	103ffc1e 	bne	r2,zero,8042e0 <___vfprintf_internal_r+0x188>
  8042f0:	85e7c83a 	sub	r19,r16,r23
  8042f4:	98000e26 	beq	r19,zero,804330 <___vfprintf_internal_r+0x1d8>
  8042f8:	dc800f17 	ldw	r18,60(sp)
  8042fc:	dc400e17 	ldw	r17,56(sp)
  804300:	008001c4 	movi	r2,7
  804304:	94e5883a 	add	r18,r18,r19
  804308:	8c400044 	addi	r17,r17,1
  80430c:	adc00015 	stw	r23,0(r21)
  804310:	dc800f15 	stw	r18,60(sp)
  804314:	acc00115 	stw	r19,4(r21)
  804318:	dc400e15 	stw	r17,56(sp)
  80431c:	14428b16 	blt	r2,r17,804d4c <___vfprintf_internal_r+0xbf4>
  804320:	ad400204 	addi	r21,r21,8
  804324:	d9014c17 	ldw	r4,1328(sp)
  804328:	24c9883a 	add	r4,r4,r19
  80432c:	d9014c15 	stw	r4,1328(sp)
  804330:	802f883a 	mov	r23,r16
  804334:	b8800007 	ldb	r2,0(r23)
  804338:	10013c26 	beq	r2,zero,80482c <___vfprintf_internal_r+0x6d4>
  80433c:	bdc00044 	addi	r23,r23,1
  804340:	d8000405 	stb	zero,16(sp)
  804344:	b8c00007 	ldb	r3,0(r23)
  804348:	04ffffc4 	movi	r19,-1
  80434c:	d8014d15 	stw	zero,1332(sp)
  804350:	d8014b15 	stw	zero,1324(sp)
  804354:	d8c14e15 	stw	r3,1336(sp)
  804358:	bdc00044 	addi	r23,r23,1
  80435c:	d9414e17 	ldw	r5,1336(sp)
  804360:	00801604 	movi	r2,88
  804364:	28fff804 	addi	r3,r5,-32
  804368:	10c06036 	bltu	r2,r3,8044ec <___vfprintf_internal_r+0x394>
  80436c:	18c5883a 	add	r2,r3,r3
  804370:	1085883a 	add	r2,r2,r2
  804374:	00c02034 	movhi	r3,128
  804378:	18d0e204 	addi	r3,r3,17288
  80437c:	10c5883a 	add	r2,r2,r3
  804380:	11000017 	ldw	r4,0(r2)
  804384:	2000683a 	jmp	r4
  804388:	008052fc 	xorhi	r2,zero,331
  80438c:	008044ec 	andhi	r2,zero,275
  804390:	008044ec 	andhi	r2,zero,275
  804394:	008052e8 	cmpgeui	r2,zero,331
  804398:	008044ec 	andhi	r2,zero,275
  80439c:	008044ec 	andhi	r2,zero,275
  8043a0:	008044ec 	andhi	r2,zero,275
  8043a4:	008044ec 	andhi	r2,zero,275
  8043a8:	008044ec 	andhi	r2,zero,275
  8043ac:	008044ec 	andhi	r2,zero,275
  8043b0:	008050c8 	cmpgei	r2,zero,323
  8043b4:	008052d8 	cmpnei	r2,zero,331
  8043b8:	008044ec 	andhi	r2,zero,275
  8043bc:	008050e0 	cmpeqi	r2,zero,323
  8043c0:	00805374 	movhi	r2,333
  8043c4:	008044ec 	andhi	r2,zero,275
  8043c8:	00805360 	cmpeqi	r2,zero,333
  8043cc:	00805328 	cmpgeui	r2,zero,332
  8043d0:	00805328 	cmpgeui	r2,zero,332
  8043d4:	00805328 	cmpgeui	r2,zero,332
  8043d8:	00805328 	cmpgeui	r2,zero,332
  8043dc:	00805328 	cmpgeui	r2,zero,332
  8043e0:	00805328 	cmpgeui	r2,zero,332
  8043e4:	00805328 	cmpgeui	r2,zero,332
  8043e8:	00805328 	cmpgeui	r2,zero,332
  8043ec:	00805328 	cmpgeui	r2,zero,332
  8043f0:	008044ec 	andhi	r2,zero,275
  8043f4:	008044ec 	andhi	r2,zero,275
  8043f8:	008044ec 	andhi	r2,zero,275
  8043fc:	008044ec 	andhi	r2,zero,275
  804400:	008044ec 	andhi	r2,zero,275
  804404:	008044ec 	andhi	r2,zero,275
  804408:	008044ec 	andhi	r2,zero,275
  80440c:	008044ec 	andhi	r2,zero,275
  804410:	008044ec 	andhi	r2,zero,275
  804414:	008044ec 	andhi	r2,zero,275
  804418:	00804b44 	movi	r2,301
  80441c:	008051b0 	cmpltui	r2,zero,326
  804420:	008044ec 	andhi	r2,zero,275
  804424:	008051b0 	cmpltui	r2,zero,326
  804428:	008044ec 	andhi	r2,zero,275
  80442c:	008044ec 	andhi	r2,zero,275
  804430:	008044ec 	andhi	r2,zero,275
  804434:	008044ec 	andhi	r2,zero,275
  804438:	00805314 	movui	r2,332
  80443c:	008044ec 	andhi	r2,zero,275
  804440:	008044ec 	andhi	r2,zero,275
  804444:	00804bf8 	rdprs	r2,zero,303
  804448:	008044ec 	andhi	r2,zero,275
  80444c:	008044ec 	andhi	r2,zero,275
  804450:	008044ec 	andhi	r2,zero,275
  804454:	008044ec 	andhi	r2,zero,275
  804458:	008044ec 	andhi	r2,zero,275
  80445c:	00804c44 	movi	r2,305
  804460:	008044ec 	andhi	r2,zero,275
  804464:	008044ec 	andhi	r2,zero,275
  804468:	00805264 	muli	r2,zero,329
  80446c:	008044ec 	andhi	r2,zero,275
  804470:	008044ec 	andhi	r2,zero,275
  804474:	008044ec 	andhi	r2,zero,275
  804478:	008044ec 	andhi	r2,zero,275
  80447c:	008044ec 	andhi	r2,zero,275
  804480:	008044ec 	andhi	r2,zero,275
  804484:	008044ec 	andhi	r2,zero,275
  804488:	008044ec 	andhi	r2,zero,275
  80448c:	008044ec 	andhi	r2,zero,275
  804490:	008044ec 	andhi	r2,zero,275
  804494:	00805238 	rdprs	r2,zero,328
  804498:	00804b50 	cmplti	r2,zero,301
  80449c:	008051b0 	cmpltui	r2,zero,326
  8044a0:	008051b0 	cmpltui	r2,zero,326
  8044a4:	008051b0 	cmpltui	r2,zero,326
  8044a8:	0080519c 	xori	r2,zero,326
  8044ac:	00804b50 	cmplti	r2,zero,301
  8044b0:	008044ec 	andhi	r2,zero,275
  8044b4:	008044ec 	andhi	r2,zero,275
  8044b8:	00805124 	muli	r2,zero,324
  8044bc:	008044ec 	andhi	r2,zero,275
  8044c0:	008050f4 	movhi	r2,323
  8044c4:	00804c04 	movi	r2,304
  8044c8:	00805154 	movui	r2,325
  8044cc:	00805140 	call	80514 <__reset-0x77faec>
  8044d0:	008044ec 	andhi	r2,zero,275
  8044d4:	008053d0 	cmplti	r2,zero,335
  8044d8:	008044ec 	andhi	r2,zero,275
  8044dc:	00804c50 	cmplti	r2,zero,305
  8044e0:	008044ec 	andhi	r2,zero,275
  8044e4:	008044ec 	andhi	r2,zero,275
  8044e8:	008052c8 	cmpgei	r2,zero,331
  8044ec:	d9014e17 	ldw	r4,1336(sp)
  8044f0:	2000ce26 	beq	r4,zero,80482c <___vfprintf_internal_r+0x6d4>
  8044f4:	01400044 	movi	r5,1
  8044f8:	d9801004 	addi	r6,sp,64
  8044fc:	d9c14115 	stw	r7,1284(sp)
  804500:	d9414615 	stw	r5,1304(sp)
  804504:	d9814215 	stw	r6,1288(sp)
  804508:	280f883a 	mov	r7,r5
  80450c:	d9001005 	stb	r4,64(sp)
  804510:	d8000405 	stb	zero,16(sp)
  804514:	d8014715 	stw	zero,1308(sp)
  804518:	d8c14d17 	ldw	r3,1332(sp)
  80451c:	1880008c 	andi	r2,r3,2
  804520:	1005003a 	cmpeq	r2,r2,zero
  804524:	d8815115 	stw	r2,1348(sp)
  804528:	1000031e 	bne	r2,zero,804538 <___vfprintf_internal_r+0x3e0>
  80452c:	d9014617 	ldw	r4,1304(sp)
  804530:	21000084 	addi	r4,r4,2
  804534:	d9014615 	stw	r4,1304(sp)
  804538:	d9414d17 	ldw	r5,1332(sp)
  80453c:	2940210c 	andi	r5,r5,132
  804540:	d9414f15 	stw	r5,1340(sp)
  804544:	28002d1e 	bne	r5,zero,8045fc <___vfprintf_internal_r+0x4a4>
  804548:	d9814b17 	ldw	r6,1324(sp)
  80454c:	d8814617 	ldw	r2,1304(sp)
  804550:	30a1c83a 	sub	r16,r6,r2
  804554:	0400290e 	bge	zero,r16,8045fc <___vfprintf_internal_r+0x4a4>
  804558:	00800404 	movi	r2,16
  80455c:	1404580e 	bge	r2,r16,8056c0 <___vfprintf_internal_r+0x1568>
  804560:	dc800f17 	ldw	r18,60(sp)
  804564:	dc400e17 	ldw	r17,56(sp)
  804568:	1027883a 	mov	r19,r2
  80456c:	07002074 	movhi	fp,129
  804570:	e712fa04 	addi	fp,fp,19432
  804574:	050001c4 	movi	r20,7
  804578:	00000306 	br	804588 <___vfprintf_internal_r+0x430>
  80457c:	843ffc04 	addi	r16,r16,-16
  804580:	ad400204 	addi	r21,r21,8
  804584:	9c00130e 	bge	r19,r16,8045d4 <___vfprintf_internal_r+0x47c>
  804588:	94800404 	addi	r18,r18,16
  80458c:	8c400044 	addi	r17,r17,1
  804590:	af000015 	stw	fp,0(r21)
  804594:	acc00115 	stw	r19,4(r21)
  804598:	dc800f15 	stw	r18,60(sp)
  80459c:	dc400e15 	stw	r17,56(sp)
  8045a0:	a47ff60e 	bge	r20,r17,80457c <___vfprintf_internal_r+0x424>
  8045a4:	d9015017 	ldw	r4,1344(sp)
  8045a8:	b00b883a 	mov	r5,r22
  8045ac:	d9800d04 	addi	r6,sp,52
  8045b0:	d9c15215 	stw	r7,1352(sp)
  8045b4:	08041000 	call	804100 <__sprint_r>
  8045b8:	d9c15217 	ldw	r7,1352(sp)
  8045bc:	10009e1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8045c0:	843ffc04 	addi	r16,r16,-16
  8045c4:	dc800f17 	ldw	r18,60(sp)
  8045c8:	dc400e17 	ldw	r17,56(sp)
  8045cc:	dd401a04 	addi	r21,sp,104
  8045d0:	9c3fed16 	blt	r19,r16,804588 <___vfprintf_internal_r+0x430>
  8045d4:	9425883a 	add	r18,r18,r16
  8045d8:	8c400044 	addi	r17,r17,1
  8045dc:	008001c4 	movi	r2,7
  8045e0:	af000015 	stw	fp,0(r21)
  8045e4:	ac000115 	stw	r16,4(r21)
  8045e8:	dc800f15 	stw	r18,60(sp)
  8045ec:	dc400e15 	stw	r17,56(sp)
  8045f0:	1441f516 	blt	r2,r17,804dc8 <___vfprintf_internal_r+0xc70>
  8045f4:	ad400204 	addi	r21,r21,8
  8045f8:	00000206 	br	804604 <___vfprintf_internal_r+0x4ac>
  8045fc:	dc800f17 	ldw	r18,60(sp)
  804600:	dc400e17 	ldw	r17,56(sp)
  804604:	d8800407 	ldb	r2,16(sp)
  804608:	10000b26 	beq	r2,zero,804638 <___vfprintf_internal_r+0x4e0>
  80460c:	00800044 	movi	r2,1
  804610:	94800044 	addi	r18,r18,1
  804614:	8c400044 	addi	r17,r17,1
  804618:	a8800115 	stw	r2,4(r21)
  80461c:	d8c00404 	addi	r3,sp,16
  804620:	008001c4 	movi	r2,7
  804624:	a8c00015 	stw	r3,0(r21)
  804628:	dc800f15 	stw	r18,60(sp)
  80462c:	dc400e15 	stw	r17,56(sp)
  804630:	1441da16 	blt	r2,r17,804d9c <___vfprintf_internal_r+0xc44>
  804634:	ad400204 	addi	r21,r21,8
  804638:	d9015117 	ldw	r4,1348(sp)
  80463c:	20000b1e 	bne	r4,zero,80466c <___vfprintf_internal_r+0x514>
  804640:	d8800504 	addi	r2,sp,20
  804644:	94800084 	addi	r18,r18,2
  804648:	8c400044 	addi	r17,r17,1
  80464c:	a8800015 	stw	r2,0(r21)
  804650:	00c00084 	movi	r3,2
  804654:	008001c4 	movi	r2,7
  804658:	a8c00115 	stw	r3,4(r21)
  80465c:	dc800f15 	stw	r18,60(sp)
  804660:	dc400e15 	stw	r17,56(sp)
  804664:	1441c216 	blt	r2,r17,804d70 <___vfprintf_internal_r+0xc18>
  804668:	ad400204 	addi	r21,r21,8
  80466c:	d9414f17 	ldw	r5,1340(sp)
  804670:	00802004 	movi	r2,128
  804674:	2880b126 	beq	r5,r2,80493c <___vfprintf_internal_r+0x7e4>
  804678:	d8c14717 	ldw	r3,1308(sp)
  80467c:	19e1c83a 	sub	r16,r3,r7
  804680:	0400260e 	bge	zero,r16,80471c <___vfprintf_internal_r+0x5c4>
  804684:	00800404 	movi	r2,16
  804688:	1403c90e 	bge	r2,r16,8055b0 <___vfprintf_internal_r+0x1458>
  80468c:	1027883a 	mov	r19,r2
  804690:	07002074 	movhi	fp,129
  804694:	e712f604 	addi	fp,fp,19416
  804698:	050001c4 	movi	r20,7
  80469c:	00000306 	br	8046ac <___vfprintf_internal_r+0x554>
  8046a0:	843ffc04 	addi	r16,r16,-16
  8046a4:	ad400204 	addi	r21,r21,8
  8046a8:	9c00130e 	bge	r19,r16,8046f8 <___vfprintf_internal_r+0x5a0>
  8046ac:	94800404 	addi	r18,r18,16
  8046b0:	8c400044 	addi	r17,r17,1
  8046b4:	af000015 	stw	fp,0(r21)
  8046b8:	acc00115 	stw	r19,4(r21)
  8046bc:	dc800f15 	stw	r18,60(sp)
  8046c0:	dc400e15 	stw	r17,56(sp)
  8046c4:	a47ff60e 	bge	r20,r17,8046a0 <___vfprintf_internal_r+0x548>
  8046c8:	d9015017 	ldw	r4,1344(sp)
  8046cc:	b00b883a 	mov	r5,r22
  8046d0:	d9800d04 	addi	r6,sp,52
  8046d4:	d9c15215 	stw	r7,1352(sp)
  8046d8:	08041000 	call	804100 <__sprint_r>
  8046dc:	d9c15217 	ldw	r7,1352(sp)
  8046e0:	1000551e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8046e4:	843ffc04 	addi	r16,r16,-16
  8046e8:	dc800f17 	ldw	r18,60(sp)
  8046ec:	dc400e17 	ldw	r17,56(sp)
  8046f0:	dd401a04 	addi	r21,sp,104
  8046f4:	9c3fed16 	blt	r19,r16,8046ac <___vfprintf_internal_r+0x554>
  8046f8:	9425883a 	add	r18,r18,r16
  8046fc:	8c400044 	addi	r17,r17,1
  804700:	008001c4 	movi	r2,7
  804704:	af000015 	stw	fp,0(r21)
  804708:	ac000115 	stw	r16,4(r21)
  80470c:	dc800f15 	stw	r18,60(sp)
  804710:	dc400e15 	stw	r17,56(sp)
  804714:	14418216 	blt	r2,r17,804d20 <___vfprintf_internal_r+0xbc8>
  804718:	ad400204 	addi	r21,r21,8
  80471c:	d9014d17 	ldw	r4,1332(sp)
  804720:	2080400c 	andi	r2,r4,256
  804724:	10004a1e 	bne	r2,zero,804850 <___vfprintf_internal_r+0x6f8>
  804728:	d9414217 	ldw	r5,1288(sp)
  80472c:	91e5883a 	add	r18,r18,r7
  804730:	8c400044 	addi	r17,r17,1
  804734:	008001c4 	movi	r2,7
  804738:	a9400015 	stw	r5,0(r21)
  80473c:	a9c00115 	stw	r7,4(r21)
  804740:	dc800f15 	stw	r18,60(sp)
  804744:	dc400e15 	stw	r17,56(sp)
  804748:	14416716 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0xb90>
  80474c:	a8c00204 	addi	r3,r21,8
  804750:	d9814d17 	ldw	r6,1332(sp)
  804754:	3080010c 	andi	r2,r6,4
  804758:	10002826 	beq	r2,zero,8047fc <___vfprintf_internal_r+0x6a4>
  80475c:	d8814b17 	ldw	r2,1324(sp)
  804760:	d9014617 	ldw	r4,1304(sp)
  804764:	1121c83a 	sub	r16,r2,r4
  804768:	0400240e 	bge	zero,r16,8047fc <___vfprintf_internal_r+0x6a4>
  80476c:	00800404 	movi	r2,16
  804770:	14044f0e 	bge	r2,r16,8058b0 <___vfprintf_internal_r+0x1758>
  804774:	dc400e17 	ldw	r17,56(sp)
  804778:	1027883a 	mov	r19,r2
  80477c:	07002074 	movhi	fp,129
  804780:	e712fa04 	addi	fp,fp,19432
  804784:	050001c4 	movi	r20,7
  804788:	00000306 	br	804798 <___vfprintf_internal_r+0x640>
  80478c:	843ffc04 	addi	r16,r16,-16
  804790:	18c00204 	addi	r3,r3,8
  804794:	9c00110e 	bge	r19,r16,8047dc <___vfprintf_internal_r+0x684>
  804798:	94800404 	addi	r18,r18,16
  80479c:	8c400044 	addi	r17,r17,1
  8047a0:	1f000015 	stw	fp,0(r3)
  8047a4:	1cc00115 	stw	r19,4(r3)
  8047a8:	dc800f15 	stw	r18,60(sp)
  8047ac:	dc400e15 	stw	r17,56(sp)
  8047b0:	a47ff60e 	bge	r20,r17,80478c <___vfprintf_internal_r+0x634>
  8047b4:	d9015017 	ldw	r4,1344(sp)
  8047b8:	b00b883a 	mov	r5,r22
  8047bc:	d9800d04 	addi	r6,sp,52
  8047c0:	08041000 	call	804100 <__sprint_r>
  8047c4:	10001c1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8047c8:	843ffc04 	addi	r16,r16,-16
  8047cc:	dc800f17 	ldw	r18,60(sp)
  8047d0:	dc400e17 	ldw	r17,56(sp)
  8047d4:	d8c01a04 	addi	r3,sp,104
  8047d8:	9c3fef16 	blt	r19,r16,804798 <___vfprintf_internal_r+0x640>
  8047dc:	9425883a 	add	r18,r18,r16
  8047e0:	8c400044 	addi	r17,r17,1
  8047e4:	008001c4 	movi	r2,7
  8047e8:	1f000015 	stw	fp,0(r3)
  8047ec:	1c000115 	stw	r16,4(r3)
  8047f0:	dc800f15 	stw	r18,60(sp)
  8047f4:	dc400e15 	stw	r17,56(sp)
  8047f8:	1440cb16 	blt	r2,r17,804b28 <___vfprintf_internal_r+0x9d0>
  8047fc:	d8814b17 	ldw	r2,1324(sp)
  804800:	d9414617 	ldw	r5,1304(sp)
  804804:	1140010e 	bge	r2,r5,80480c <___vfprintf_internal_r+0x6b4>
  804808:	2805883a 	mov	r2,r5
  80480c:	d9814c17 	ldw	r6,1328(sp)
  804810:	308d883a 	add	r6,r6,r2
  804814:	d9814c15 	stw	r6,1328(sp)
  804818:	90013b1e 	bne	r18,zero,804d08 <___vfprintf_internal_r+0xbb0>
  80481c:	d9c14117 	ldw	r7,1284(sp)
  804820:	dd401a04 	addi	r21,sp,104
  804824:	d8000e15 	stw	zero,56(sp)
  804828:	003ea706 	br	8042c8 <___vfprintf_internal_r+0x170>
  80482c:	d8800f17 	ldw	r2,60(sp)
  804830:	10053f1e 	bne	r2,zero,805d30 <___vfprintf_internal_r+0x1bd8>
  804834:	d8000e15 	stw	zero,56(sp)
  804838:	b080030b 	ldhu	r2,12(r22)
  80483c:	1080100c 	andi	r2,r2,64
  804840:	103e8726 	beq	r2,zero,804260 <___vfprintf_internal_r+0x108>
  804844:	00bfffc4 	movi	r2,-1
  804848:	d8814c15 	stw	r2,1328(sp)
  80484c:	003e8406 	br	804260 <___vfprintf_internal_r+0x108>
  804850:	d9814e17 	ldw	r6,1336(sp)
  804854:	00801944 	movi	r2,101
  804858:	11806e16 	blt	r2,r6,804a14 <___vfprintf_internal_r+0x8bc>
  80485c:	d9414817 	ldw	r5,1312(sp)
  804860:	00c00044 	movi	r3,1
  804864:	1943430e 	bge	r3,r5,805574 <___vfprintf_internal_r+0x141c>
  804868:	d8814217 	ldw	r2,1288(sp)
  80486c:	94800044 	addi	r18,r18,1
  804870:	8c400044 	addi	r17,r17,1
  804874:	a8800015 	stw	r2,0(r21)
  804878:	008001c4 	movi	r2,7
  80487c:	a8c00115 	stw	r3,4(r21)
  804880:	dc800f15 	stw	r18,60(sp)
  804884:	dc400e15 	stw	r17,56(sp)
  804888:	1441ca16 	blt	r2,r17,804fb4 <___vfprintf_internal_r+0xe5c>
  80488c:	a8c00204 	addi	r3,r21,8
  804890:	d9014a17 	ldw	r4,1320(sp)
  804894:	00800044 	movi	r2,1
  804898:	94800044 	addi	r18,r18,1
  80489c:	8c400044 	addi	r17,r17,1
  8048a0:	18800115 	stw	r2,4(r3)
  8048a4:	008001c4 	movi	r2,7
  8048a8:	19000015 	stw	r4,0(r3)
  8048ac:	dc800f15 	stw	r18,60(sp)
  8048b0:	dc400e15 	stw	r17,56(sp)
  8048b4:	1441b616 	blt	r2,r17,804f90 <___vfprintf_internal_r+0xe38>
  8048b8:	1cc00204 	addi	r19,r3,8
  8048bc:	d9014317 	ldw	r4,1292(sp)
  8048c0:	d9414417 	ldw	r5,1296(sp)
  8048c4:	000d883a 	mov	r6,zero
  8048c8:	000f883a 	mov	r7,zero
  8048cc:	080f3840 	call	80f384 <__nedf2>
  8048d0:	10017426 	beq	r2,zero,804ea4 <___vfprintf_internal_r+0xd4c>
  8048d4:	d9414817 	ldw	r5,1312(sp)
  8048d8:	d9814217 	ldw	r6,1288(sp)
  8048dc:	8c400044 	addi	r17,r17,1
  8048e0:	2c85883a 	add	r2,r5,r18
  8048e4:	14bfffc4 	addi	r18,r2,-1
  8048e8:	28bfffc4 	addi	r2,r5,-1
  8048ec:	30c00044 	addi	r3,r6,1
  8048f0:	98800115 	stw	r2,4(r19)
  8048f4:	008001c4 	movi	r2,7
  8048f8:	98c00015 	stw	r3,0(r19)
  8048fc:	dc800f15 	stw	r18,60(sp)
  804900:	dc400e15 	stw	r17,56(sp)
  804904:	14418e16 	blt	r2,r17,804f40 <___vfprintf_internal_r+0xde8>
  804908:	9cc00204 	addi	r19,r19,8
  80490c:	d9414917 	ldw	r5,1316(sp)
  804910:	d8800904 	addi	r2,sp,36
  804914:	8c400044 	addi	r17,r17,1
  804918:	9165883a 	add	r18,r18,r5
  80491c:	98800015 	stw	r2,0(r19)
  804920:	008001c4 	movi	r2,7
  804924:	99400115 	stw	r5,4(r19)
  804928:	dc800f15 	stw	r18,60(sp)
  80492c:	dc400e15 	stw	r17,56(sp)
  804930:	1440ed16 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0xb90>
  804934:	98c00204 	addi	r3,r19,8
  804938:	003f8506 	br	804750 <___vfprintf_internal_r+0x5f8>
  80493c:	d9814b17 	ldw	r6,1324(sp)
  804940:	d8814617 	ldw	r2,1304(sp)
  804944:	30a1c83a 	sub	r16,r6,r2
  804948:	043f4b0e 	bge	zero,r16,804678 <___vfprintf_internal_r+0x520>
  80494c:	00800404 	movi	r2,16
  804950:	1404340e 	bge	r2,r16,805a24 <___vfprintf_internal_r+0x18cc>
  804954:	1027883a 	mov	r19,r2
  804958:	07002074 	movhi	fp,129
  80495c:	e712f604 	addi	fp,fp,19416
  804960:	050001c4 	movi	r20,7
  804964:	00000306 	br	804974 <___vfprintf_internal_r+0x81c>
  804968:	843ffc04 	addi	r16,r16,-16
  80496c:	ad400204 	addi	r21,r21,8
  804970:	9c00130e 	bge	r19,r16,8049c0 <___vfprintf_internal_r+0x868>
  804974:	94800404 	addi	r18,r18,16
  804978:	8c400044 	addi	r17,r17,1
  80497c:	af000015 	stw	fp,0(r21)
  804980:	acc00115 	stw	r19,4(r21)
  804984:	dc800f15 	stw	r18,60(sp)
  804988:	dc400e15 	stw	r17,56(sp)
  80498c:	a47ff60e 	bge	r20,r17,804968 <___vfprintf_internal_r+0x810>
  804990:	d9015017 	ldw	r4,1344(sp)
  804994:	b00b883a 	mov	r5,r22
  804998:	d9800d04 	addi	r6,sp,52
  80499c:	d9c15215 	stw	r7,1352(sp)
  8049a0:	08041000 	call	804100 <__sprint_r>
  8049a4:	d9c15217 	ldw	r7,1352(sp)
  8049a8:	103fa31e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8049ac:	843ffc04 	addi	r16,r16,-16
  8049b0:	dc800f17 	ldw	r18,60(sp)
  8049b4:	dc400e17 	ldw	r17,56(sp)
  8049b8:	dd401a04 	addi	r21,sp,104
  8049bc:	9c3fed16 	blt	r19,r16,804974 <___vfprintf_internal_r+0x81c>
  8049c0:	9425883a 	add	r18,r18,r16
  8049c4:	8c400044 	addi	r17,r17,1
  8049c8:	008001c4 	movi	r2,7
  8049cc:	af000015 	stw	fp,0(r21)
  8049d0:	ac000115 	stw	r16,4(r21)
  8049d4:	dc800f15 	stw	r18,60(sp)
  8049d8:	dc400e15 	stw	r17,56(sp)
  8049dc:	14416116 	blt	r2,r17,804f64 <___vfprintf_internal_r+0xe0c>
  8049e0:	ad400204 	addi	r21,r21,8
  8049e4:	003f2406 	br	804678 <___vfprintf_internal_r+0x520>
  8049e8:	d9015017 	ldw	r4,1344(sp)
  8049ec:	080146c0 	call	80146c <__sinit>
  8049f0:	d9c15217 	ldw	r7,1352(sp)
  8049f4:	003def06 	br	8041b4 <___vfprintf_internal_r+0x5c>
  8049f8:	d9015017 	ldw	r4,1344(sp)
  8049fc:	b00b883a 	mov	r5,r22
  804a00:	d9c15215 	stw	r7,1352(sp)
  804a04:	08078200 	call	807820 <__swsetup_r>
  804a08:	d9c15217 	ldw	r7,1352(sp)
  804a0c:	103dee26 	beq	r2,zero,8041c8 <___vfprintf_internal_r+0x70>
  804a10:	003f8c06 	br	804844 <___vfprintf_internal_r+0x6ec>
  804a14:	d9014317 	ldw	r4,1292(sp)
  804a18:	d9414417 	ldw	r5,1296(sp)
  804a1c:	000d883a 	mov	r6,zero
  804a20:	000f883a 	mov	r7,zero
  804a24:	080f2fc0 	call	80f2fc <__eqdf2>
  804a28:	1000f21e 	bne	r2,zero,804df4 <___vfprintf_internal_r+0xc9c>
  804a2c:	00802074 	movhi	r2,129
  804a30:	1092f504 	addi	r2,r2,19412
  804a34:	94800044 	addi	r18,r18,1
  804a38:	8c400044 	addi	r17,r17,1
  804a3c:	a8800015 	stw	r2,0(r21)
  804a40:	00c00044 	movi	r3,1
  804a44:	008001c4 	movi	r2,7
  804a48:	a8c00115 	stw	r3,4(r21)
  804a4c:	dc800f15 	stw	r18,60(sp)
  804a50:	dc400e15 	stw	r17,56(sp)
  804a54:	1442fa16 	blt	r2,r17,805640 <___vfprintf_internal_r+0x14e8>
  804a58:	a8c00204 	addi	r3,r21,8
  804a5c:	d8800617 	ldw	r2,24(sp)
  804a60:	d9014817 	ldw	r4,1312(sp)
  804a64:	11015c0e 	bge	r2,r4,804fd8 <___vfprintf_internal_r+0xe80>
  804a68:	dc400e17 	ldw	r17,56(sp)
  804a6c:	d9814a17 	ldw	r6,1320(sp)
  804a70:	00800044 	movi	r2,1
  804a74:	94800044 	addi	r18,r18,1
  804a78:	8c400044 	addi	r17,r17,1
  804a7c:	18800115 	stw	r2,4(r3)
  804a80:	008001c4 	movi	r2,7
  804a84:	19800015 	stw	r6,0(r3)
  804a88:	dc800f15 	stw	r18,60(sp)
  804a8c:	dc400e15 	stw	r17,56(sp)
  804a90:	14431016 	blt	r2,r17,8056d4 <___vfprintf_internal_r+0x157c>
  804a94:	18c00204 	addi	r3,r3,8
  804a98:	d8814817 	ldw	r2,1312(sp)
  804a9c:	143fffc4 	addi	r16,r2,-1
  804aa0:	043f2b0e 	bge	zero,r16,804750 <___vfprintf_internal_r+0x5f8>
  804aa4:	00800404 	movi	r2,16
  804aa8:	1402a20e 	bge	r2,r16,805534 <___vfprintf_internal_r+0x13dc>
  804aac:	dc400e17 	ldw	r17,56(sp)
  804ab0:	1027883a 	mov	r19,r2
  804ab4:	07002074 	movhi	fp,129
  804ab8:	e712f604 	addi	fp,fp,19416
  804abc:	050001c4 	movi	r20,7
  804ac0:	00000306 	br	804ad0 <___vfprintf_internal_r+0x978>
  804ac4:	18c00204 	addi	r3,r3,8
  804ac8:	843ffc04 	addi	r16,r16,-16
  804acc:	9c029c0e 	bge	r19,r16,805540 <___vfprintf_internal_r+0x13e8>
  804ad0:	94800404 	addi	r18,r18,16
  804ad4:	8c400044 	addi	r17,r17,1
  804ad8:	1f000015 	stw	fp,0(r3)
  804adc:	1cc00115 	stw	r19,4(r3)
  804ae0:	dc800f15 	stw	r18,60(sp)
  804ae4:	dc400e15 	stw	r17,56(sp)
  804ae8:	a47ff60e 	bge	r20,r17,804ac4 <___vfprintf_internal_r+0x96c>
  804aec:	d9015017 	ldw	r4,1344(sp)
  804af0:	b00b883a 	mov	r5,r22
  804af4:	d9800d04 	addi	r6,sp,52
  804af8:	08041000 	call	804100 <__sprint_r>
  804afc:	103f4e1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804b00:	dc800f17 	ldw	r18,60(sp)
  804b04:	dc400e17 	ldw	r17,56(sp)
  804b08:	d8c01a04 	addi	r3,sp,104
  804b0c:	003fee06 	br	804ac8 <___vfprintf_internal_r+0x970>
  804b10:	d8802d0b 	ldhu	r2,180(sp)
  804b14:	00ffffc4 	movi	r3,-1
  804b18:	d8c14c15 	stw	r3,1328(sp)
  804b1c:	1080100c 	andi	r2,r2,64
  804b20:	103dcc1e 	bne	r2,zero,804254 <___vfprintf_internal_r+0xfc>
  804b24:	003dce06 	br	804260 <___vfprintf_internal_r+0x108>
  804b28:	d9015017 	ldw	r4,1344(sp)
  804b2c:	b00b883a 	mov	r5,r22
  804b30:	d9800d04 	addi	r6,sp,52
  804b34:	08041000 	call	804100 <__sprint_r>
  804b38:	103f3f1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804b3c:	dc800f17 	ldw	r18,60(sp)
  804b40:	003f2e06 	br	8047fc <___vfprintf_internal_r+0x6a4>
  804b44:	d9414d17 	ldw	r5,1332(sp)
  804b48:	29400414 	ori	r5,r5,16
  804b4c:	d9414d15 	stw	r5,1332(sp)
  804b50:	d9814d17 	ldw	r6,1332(sp)
  804b54:	3080080c 	andi	r2,r6,32
  804b58:	10014f1e 	bne	r2,zero,805098 <___vfprintf_internal_r+0xf40>
  804b5c:	d8c14d17 	ldw	r3,1332(sp)
  804b60:	1880040c 	andi	r2,r3,16
  804b64:	1002ea1e 	bne	r2,zero,805710 <___vfprintf_internal_r+0x15b8>
  804b68:	d9014d17 	ldw	r4,1332(sp)
  804b6c:	2080100c 	andi	r2,r4,64
  804b70:	1002e726 	beq	r2,zero,805710 <___vfprintf_internal_r+0x15b8>
  804b74:	3880000f 	ldh	r2,0(r7)
  804b78:	39c00104 	addi	r7,r7,4
  804b7c:	d9c14115 	stw	r7,1284(sp)
  804b80:	1023d7fa 	srai	r17,r2,31
  804b84:	1021883a 	mov	r16,r2
  804b88:	88037216 	blt	r17,zero,805954 <___vfprintf_internal_r+0x17fc>
  804b8c:	01000044 	movi	r4,1
  804b90:	98000416 	blt	r19,zero,804ba4 <___vfprintf_internal_r+0xa4c>
  804b94:	d8c14d17 	ldw	r3,1332(sp)
  804b98:	00bfdfc4 	movi	r2,-129
  804b9c:	1886703a 	and	r3,r3,r2
  804ba0:	d8c14d15 	stw	r3,1332(sp)
  804ba4:	8444b03a 	or	r2,r16,r17
  804ba8:	1002261e 	bne	r2,zero,805444 <___vfprintf_internal_r+0x12ec>
  804bac:	9802251e 	bne	r19,zero,805444 <___vfprintf_internal_r+0x12ec>
  804bb0:	20803fcc 	andi	r2,r4,255
  804bb4:	10029b26 	beq	r2,zero,805624 <___vfprintf_internal_r+0x14cc>
  804bb8:	d8c01a04 	addi	r3,sp,104
  804bbc:	dd001004 	addi	r20,sp,64
  804bc0:	d8c14215 	stw	r3,1288(sp)
  804bc4:	d8c14217 	ldw	r3,1288(sp)
  804bc8:	dcc14615 	stw	r19,1304(sp)
  804bcc:	a0c5c83a 	sub	r2,r20,r3
  804bd0:	11c00a04 	addi	r7,r2,40
  804bd4:	99c0010e 	bge	r19,r7,804bdc <___vfprintf_internal_r+0xa84>
  804bd8:	d9c14615 	stw	r7,1304(sp)
  804bdc:	dcc14715 	stw	r19,1308(sp)
  804be0:	d8800407 	ldb	r2,16(sp)
  804be4:	103e4c26 	beq	r2,zero,804518 <___vfprintf_internal_r+0x3c0>
  804be8:	d8814617 	ldw	r2,1304(sp)
  804bec:	10800044 	addi	r2,r2,1
  804bf0:	d8814615 	stw	r2,1304(sp)
  804bf4:	003e4806 	br	804518 <___vfprintf_internal_r+0x3c0>
  804bf8:	d9814d17 	ldw	r6,1332(sp)
  804bfc:	31800414 	ori	r6,r6,16
  804c00:	d9814d15 	stw	r6,1332(sp)
  804c04:	d8c14d17 	ldw	r3,1332(sp)
  804c08:	1880080c 	andi	r2,r3,32
  804c0c:	1001271e 	bne	r2,zero,8050ac <___vfprintf_internal_r+0xf54>
  804c10:	d9414d17 	ldw	r5,1332(sp)
  804c14:	2880040c 	andi	r2,r5,16
  804c18:	1002b61e 	bne	r2,zero,8056f4 <___vfprintf_internal_r+0x159c>
  804c1c:	d9814d17 	ldw	r6,1332(sp)
  804c20:	3080100c 	andi	r2,r6,64
  804c24:	1002b326 	beq	r2,zero,8056f4 <___vfprintf_internal_r+0x159c>
  804c28:	3c00000b 	ldhu	r16,0(r7)
  804c2c:	0009883a 	mov	r4,zero
  804c30:	39c00104 	addi	r7,r7,4
  804c34:	0023883a 	mov	r17,zero
  804c38:	d9c14115 	stw	r7,1284(sp)
  804c3c:	d8000405 	stb	zero,16(sp)
  804c40:	003fd306 	br	804b90 <___vfprintf_internal_r+0xa38>
  804c44:	d9014d17 	ldw	r4,1332(sp)
  804c48:	21000414 	ori	r4,r4,16
  804c4c:	d9014d15 	stw	r4,1332(sp)
  804c50:	d9414d17 	ldw	r5,1332(sp)
  804c54:	2880080c 	andi	r2,r5,32
  804c58:	1001081e 	bne	r2,zero,80507c <___vfprintf_internal_r+0xf24>
  804c5c:	d8c14d17 	ldw	r3,1332(sp)
  804c60:	1880040c 	andi	r2,r3,16
  804c64:	1002b01e 	bne	r2,zero,805728 <___vfprintf_internal_r+0x15d0>
  804c68:	d9014d17 	ldw	r4,1332(sp)
  804c6c:	2080100c 	andi	r2,r4,64
  804c70:	1002ad26 	beq	r2,zero,805728 <___vfprintf_internal_r+0x15d0>
  804c74:	3c00000b 	ldhu	r16,0(r7)
  804c78:	01000044 	movi	r4,1
  804c7c:	39c00104 	addi	r7,r7,4
  804c80:	0023883a 	mov	r17,zero
  804c84:	d9c14115 	stw	r7,1284(sp)
  804c88:	d8000405 	stb	zero,16(sp)
  804c8c:	003fc006 	br	804b90 <___vfprintf_internal_r+0xa38>
  804c90:	d9015017 	ldw	r4,1344(sp)
  804c94:	b00b883a 	mov	r5,r22
  804c98:	d9800d04 	addi	r6,sp,52
  804c9c:	08041000 	call	804100 <__sprint_r>
  804ca0:	103ee51e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804ca4:	dc800f17 	ldw	r18,60(sp)
  804ca8:	d8c01a04 	addi	r3,sp,104
  804cac:	d9814d17 	ldw	r6,1332(sp)
  804cb0:	3080004c 	andi	r2,r6,1
  804cb4:	1005003a 	cmpeq	r2,r2,zero
  804cb8:	103ea51e 	bne	r2,zero,804750 <___vfprintf_internal_r+0x5f8>
  804cbc:	00800044 	movi	r2,1
  804cc0:	dc400e17 	ldw	r17,56(sp)
  804cc4:	18800115 	stw	r2,4(r3)
  804cc8:	d8814a17 	ldw	r2,1320(sp)
  804ccc:	94800044 	addi	r18,r18,1
  804cd0:	8c400044 	addi	r17,r17,1
  804cd4:	18800015 	stw	r2,0(r3)
  804cd8:	008001c4 	movi	r2,7
  804cdc:	dc800f15 	stw	r18,60(sp)
  804ce0:	dc400e15 	stw	r17,56(sp)
  804ce4:	14421e0e 	bge	r2,r17,805560 <___vfprintf_internal_r+0x1408>
  804ce8:	d9015017 	ldw	r4,1344(sp)
  804cec:	b00b883a 	mov	r5,r22
  804cf0:	d9800d04 	addi	r6,sp,52
  804cf4:	08041000 	call	804100 <__sprint_r>
  804cf8:	103ecf1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804cfc:	dc800f17 	ldw	r18,60(sp)
  804d00:	d8c01a04 	addi	r3,sp,104
  804d04:	003e9206 	br	804750 <___vfprintf_internal_r+0x5f8>
  804d08:	d9015017 	ldw	r4,1344(sp)
  804d0c:	b00b883a 	mov	r5,r22
  804d10:	d9800d04 	addi	r6,sp,52
  804d14:	08041000 	call	804100 <__sprint_r>
  804d18:	103ec026 	beq	r2,zero,80481c <___vfprintf_internal_r+0x6c4>
  804d1c:	003ec606 	br	804838 <___vfprintf_internal_r+0x6e0>
  804d20:	d9015017 	ldw	r4,1344(sp)
  804d24:	b00b883a 	mov	r5,r22
  804d28:	d9800d04 	addi	r6,sp,52
  804d2c:	d9c15215 	stw	r7,1352(sp)
  804d30:	08041000 	call	804100 <__sprint_r>
  804d34:	d9c15217 	ldw	r7,1352(sp)
  804d38:	103ebf1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804d3c:	dc800f17 	ldw	r18,60(sp)
  804d40:	dc400e17 	ldw	r17,56(sp)
  804d44:	dd401a04 	addi	r21,sp,104
  804d48:	003e7406 	br	80471c <___vfprintf_internal_r+0x5c4>
  804d4c:	d9015017 	ldw	r4,1344(sp)
  804d50:	b00b883a 	mov	r5,r22
  804d54:	d9800d04 	addi	r6,sp,52
  804d58:	d9c15215 	stw	r7,1352(sp)
  804d5c:	08041000 	call	804100 <__sprint_r>
  804d60:	d9c15217 	ldw	r7,1352(sp)
  804d64:	103eb41e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804d68:	dd401a04 	addi	r21,sp,104
  804d6c:	003d6d06 	br	804324 <___vfprintf_internal_r+0x1cc>
  804d70:	d9015017 	ldw	r4,1344(sp)
  804d74:	b00b883a 	mov	r5,r22
  804d78:	d9800d04 	addi	r6,sp,52
  804d7c:	d9c15215 	stw	r7,1352(sp)
  804d80:	08041000 	call	804100 <__sprint_r>
  804d84:	d9c15217 	ldw	r7,1352(sp)
  804d88:	103eab1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804d8c:	dc800f17 	ldw	r18,60(sp)
  804d90:	dc400e17 	ldw	r17,56(sp)
  804d94:	dd401a04 	addi	r21,sp,104
  804d98:	003e3406 	br	80466c <___vfprintf_internal_r+0x514>
  804d9c:	d9015017 	ldw	r4,1344(sp)
  804da0:	b00b883a 	mov	r5,r22
  804da4:	d9800d04 	addi	r6,sp,52
  804da8:	d9c15215 	stw	r7,1352(sp)
  804dac:	08041000 	call	804100 <__sprint_r>
  804db0:	d9c15217 	ldw	r7,1352(sp)
  804db4:	103ea01e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804db8:	dc800f17 	ldw	r18,60(sp)
  804dbc:	dc400e17 	ldw	r17,56(sp)
  804dc0:	dd401a04 	addi	r21,sp,104
  804dc4:	003e1c06 	br	804638 <___vfprintf_internal_r+0x4e0>
  804dc8:	d9015017 	ldw	r4,1344(sp)
  804dcc:	b00b883a 	mov	r5,r22
  804dd0:	d9800d04 	addi	r6,sp,52
  804dd4:	d9c15215 	stw	r7,1352(sp)
  804dd8:	08041000 	call	804100 <__sprint_r>
  804ddc:	d9c15217 	ldw	r7,1352(sp)
  804de0:	103e951e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804de4:	dc800f17 	ldw	r18,60(sp)
  804de8:	dc400e17 	ldw	r17,56(sp)
  804dec:	dd401a04 	addi	r21,sp,104
  804df0:	003e0406 	br	804604 <___vfprintf_internal_r+0x4ac>
  804df4:	d9000617 	ldw	r4,24(sp)
  804df8:	0102520e 	bge	zero,r4,805744 <___vfprintf_internal_r+0x15ec>
  804dfc:	d9814817 	ldw	r6,1312(sp)
  804e00:	21807a16 	blt	r4,r6,804fec <___vfprintf_internal_r+0xe94>
  804e04:	d8814217 	ldw	r2,1288(sp)
  804e08:	91a5883a 	add	r18,r18,r6
  804e0c:	8c400044 	addi	r17,r17,1
  804e10:	a8800015 	stw	r2,0(r21)
  804e14:	008001c4 	movi	r2,7
  804e18:	a9800115 	stw	r6,4(r21)
  804e1c:	dc800f15 	stw	r18,60(sp)
  804e20:	dc400e15 	stw	r17,56(sp)
  804e24:	1442f616 	blt	r2,r17,805a00 <___vfprintf_internal_r+0x18a8>
  804e28:	a8c00204 	addi	r3,r21,8
  804e2c:	d9414817 	ldw	r5,1312(sp)
  804e30:	2161c83a 	sub	r16,r4,r5
  804e34:	043f9d0e 	bge	zero,r16,804cac <___vfprintf_internal_r+0xb54>
  804e38:	00800404 	movi	r2,16
  804e3c:	1402130e 	bge	r2,r16,80568c <___vfprintf_internal_r+0x1534>
  804e40:	dc400e17 	ldw	r17,56(sp)
  804e44:	1027883a 	mov	r19,r2
  804e48:	07002074 	movhi	fp,129
  804e4c:	e712f604 	addi	fp,fp,19416
  804e50:	050001c4 	movi	r20,7
  804e54:	00000306 	br	804e64 <___vfprintf_internal_r+0xd0c>
  804e58:	18c00204 	addi	r3,r3,8
  804e5c:	843ffc04 	addi	r16,r16,-16
  804e60:	9c020d0e 	bge	r19,r16,805698 <___vfprintf_internal_r+0x1540>
  804e64:	94800404 	addi	r18,r18,16
  804e68:	8c400044 	addi	r17,r17,1
  804e6c:	1f000015 	stw	fp,0(r3)
  804e70:	1cc00115 	stw	r19,4(r3)
  804e74:	dc800f15 	stw	r18,60(sp)
  804e78:	dc400e15 	stw	r17,56(sp)
  804e7c:	a47ff60e 	bge	r20,r17,804e58 <___vfprintf_internal_r+0xd00>
  804e80:	d9015017 	ldw	r4,1344(sp)
  804e84:	b00b883a 	mov	r5,r22
  804e88:	d9800d04 	addi	r6,sp,52
  804e8c:	08041000 	call	804100 <__sprint_r>
  804e90:	103e691e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804e94:	dc800f17 	ldw	r18,60(sp)
  804e98:	dc400e17 	ldw	r17,56(sp)
  804e9c:	d8c01a04 	addi	r3,sp,104
  804ea0:	003fee06 	br	804e5c <___vfprintf_internal_r+0xd04>
  804ea4:	d8814817 	ldw	r2,1312(sp)
  804ea8:	143fffc4 	addi	r16,r2,-1
  804eac:	043e970e 	bge	zero,r16,80490c <___vfprintf_internal_r+0x7b4>
  804eb0:	00800404 	movi	r2,16
  804eb4:	1400180e 	bge	r2,r16,804f18 <___vfprintf_internal_r+0xdc0>
  804eb8:	1029883a 	mov	r20,r2
  804ebc:	07002074 	movhi	fp,129
  804ec0:	e712f604 	addi	fp,fp,19416
  804ec4:	054001c4 	movi	r21,7
  804ec8:	00000306 	br	804ed8 <___vfprintf_internal_r+0xd80>
  804ecc:	9cc00204 	addi	r19,r19,8
  804ed0:	843ffc04 	addi	r16,r16,-16
  804ed4:	a400120e 	bge	r20,r16,804f20 <___vfprintf_internal_r+0xdc8>
  804ed8:	94800404 	addi	r18,r18,16
  804edc:	8c400044 	addi	r17,r17,1
  804ee0:	9f000015 	stw	fp,0(r19)
  804ee4:	9d000115 	stw	r20,4(r19)
  804ee8:	dc800f15 	stw	r18,60(sp)
  804eec:	dc400e15 	stw	r17,56(sp)
  804ef0:	ac7ff60e 	bge	r21,r17,804ecc <___vfprintf_internal_r+0xd74>
  804ef4:	d9015017 	ldw	r4,1344(sp)
  804ef8:	b00b883a 	mov	r5,r22
  804efc:	d9800d04 	addi	r6,sp,52
  804f00:	08041000 	call	804100 <__sprint_r>
  804f04:	103e4c1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804f08:	dc800f17 	ldw	r18,60(sp)
  804f0c:	dc400e17 	ldw	r17,56(sp)
  804f10:	dcc01a04 	addi	r19,sp,104
  804f14:	003fee06 	br	804ed0 <___vfprintf_internal_r+0xd78>
  804f18:	07002074 	movhi	fp,129
  804f1c:	e712f604 	addi	fp,fp,19416
  804f20:	9425883a 	add	r18,r18,r16
  804f24:	8c400044 	addi	r17,r17,1
  804f28:	008001c4 	movi	r2,7
  804f2c:	9f000015 	stw	fp,0(r19)
  804f30:	9c000115 	stw	r16,4(r19)
  804f34:	dc800f15 	stw	r18,60(sp)
  804f38:	dc400e15 	stw	r17,56(sp)
  804f3c:	147e720e 	bge	r2,r17,804908 <___vfprintf_internal_r+0x7b0>
  804f40:	d9015017 	ldw	r4,1344(sp)
  804f44:	b00b883a 	mov	r5,r22
  804f48:	d9800d04 	addi	r6,sp,52
  804f4c:	08041000 	call	804100 <__sprint_r>
  804f50:	103e391e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804f54:	dc800f17 	ldw	r18,60(sp)
  804f58:	dc400e17 	ldw	r17,56(sp)
  804f5c:	dcc01a04 	addi	r19,sp,104
  804f60:	003e6a06 	br	80490c <___vfprintf_internal_r+0x7b4>
  804f64:	d9015017 	ldw	r4,1344(sp)
  804f68:	b00b883a 	mov	r5,r22
  804f6c:	d9800d04 	addi	r6,sp,52
  804f70:	d9c15215 	stw	r7,1352(sp)
  804f74:	08041000 	call	804100 <__sprint_r>
  804f78:	d9c15217 	ldw	r7,1352(sp)
  804f7c:	103e2e1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804f80:	dc800f17 	ldw	r18,60(sp)
  804f84:	dc400e17 	ldw	r17,56(sp)
  804f88:	dd401a04 	addi	r21,sp,104
  804f8c:	003dba06 	br	804678 <___vfprintf_internal_r+0x520>
  804f90:	d9015017 	ldw	r4,1344(sp)
  804f94:	b00b883a 	mov	r5,r22
  804f98:	d9800d04 	addi	r6,sp,52
  804f9c:	08041000 	call	804100 <__sprint_r>
  804fa0:	103e251e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804fa4:	dc800f17 	ldw	r18,60(sp)
  804fa8:	dc400e17 	ldw	r17,56(sp)
  804fac:	dcc01a04 	addi	r19,sp,104
  804fb0:	003e4206 	br	8048bc <___vfprintf_internal_r+0x764>
  804fb4:	d9015017 	ldw	r4,1344(sp)
  804fb8:	b00b883a 	mov	r5,r22
  804fbc:	d9800d04 	addi	r6,sp,52
  804fc0:	08041000 	call	804100 <__sprint_r>
  804fc4:	103e1c1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  804fc8:	dc800f17 	ldw	r18,60(sp)
  804fcc:	dc400e17 	ldw	r17,56(sp)
  804fd0:	d8c01a04 	addi	r3,sp,104
  804fd4:	003e2e06 	br	804890 <___vfprintf_internal_r+0x738>
  804fd8:	d9414d17 	ldw	r5,1332(sp)
  804fdc:	2880004c 	andi	r2,r5,1
  804fe0:	1005003a 	cmpeq	r2,r2,zero
  804fe4:	103dda1e 	bne	r2,zero,804750 <___vfprintf_internal_r+0x5f8>
  804fe8:	003e9f06 	br	804a68 <___vfprintf_internal_r+0x910>
  804fec:	d8c14217 	ldw	r3,1288(sp)
  804ff0:	9125883a 	add	r18,r18,r4
  804ff4:	8c400044 	addi	r17,r17,1
  804ff8:	008001c4 	movi	r2,7
  804ffc:	a8c00015 	stw	r3,0(r21)
  805000:	a9000115 	stw	r4,4(r21)
  805004:	dc800f15 	stw	r18,60(sp)
  805008:	dc400e15 	stw	r17,56(sp)
  80500c:	14426616 	blt	r2,r17,8059a8 <___vfprintf_internal_r+0x1850>
  805010:	a8c00204 	addi	r3,r21,8
  805014:	d9414a17 	ldw	r5,1320(sp)
  805018:	00800044 	movi	r2,1
  80501c:	94800044 	addi	r18,r18,1
  805020:	8c400044 	addi	r17,r17,1
  805024:	18800115 	stw	r2,4(r3)
  805028:	008001c4 	movi	r2,7
  80502c:	19400015 	stw	r5,0(r3)
  805030:	dc800f15 	stw	r18,60(sp)
  805034:	dc400e15 	stw	r17,56(sp)
  805038:	2021883a 	mov	r16,r4
  80503c:	14425016 	blt	r2,r17,805980 <___vfprintf_internal_r+0x1828>
  805040:	19400204 	addi	r5,r3,8
  805044:	d9814817 	ldw	r6,1312(sp)
  805048:	8c400044 	addi	r17,r17,1
  80504c:	dc400e15 	stw	r17,56(sp)
  805050:	3107c83a 	sub	r3,r6,r4
  805054:	d9014217 	ldw	r4,1288(sp)
  805058:	90e5883a 	add	r18,r18,r3
  80505c:	28c00115 	stw	r3,4(r5)
  805060:	8105883a 	add	r2,r16,r4
  805064:	28800015 	stw	r2,0(r5)
  805068:	008001c4 	movi	r2,7
  80506c:	dc800f15 	stw	r18,60(sp)
  805070:	147f1d16 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0xb90>
  805074:	28c00204 	addi	r3,r5,8
  805078:	003db506 	br	804750 <___vfprintf_internal_r+0x5f8>
  80507c:	3c000017 	ldw	r16,0(r7)
  805080:	3c400117 	ldw	r17,4(r7)
  805084:	39800204 	addi	r6,r7,8
  805088:	01000044 	movi	r4,1
  80508c:	d9814115 	stw	r6,1284(sp)
  805090:	d8000405 	stb	zero,16(sp)
  805094:	003ebe06 	br	804b90 <___vfprintf_internal_r+0xa38>
  805098:	3c000017 	ldw	r16,0(r7)
  80509c:	3c400117 	ldw	r17,4(r7)
  8050a0:	38800204 	addi	r2,r7,8
  8050a4:	d8814115 	stw	r2,1284(sp)
  8050a8:	003eb706 	br	804b88 <___vfprintf_internal_r+0xa30>
  8050ac:	3c000017 	ldw	r16,0(r7)
  8050b0:	3c400117 	ldw	r17,4(r7)
  8050b4:	39000204 	addi	r4,r7,8
  8050b8:	d9014115 	stw	r4,1284(sp)
  8050bc:	0009883a 	mov	r4,zero
  8050c0:	d8000405 	stb	zero,16(sp)
  8050c4:	003eb206 	br	804b90 <___vfprintf_internal_r+0xa38>
  8050c8:	38c00017 	ldw	r3,0(r7)
  8050cc:	39c00104 	addi	r7,r7,4
  8050d0:	d8c14b15 	stw	r3,1324(sp)
  8050d4:	1800d10e 	bge	r3,zero,80541c <___vfprintf_internal_r+0x12c4>
  8050d8:	00c7c83a 	sub	r3,zero,r3
  8050dc:	d8c14b15 	stw	r3,1324(sp)
  8050e0:	d9014d17 	ldw	r4,1332(sp)
  8050e4:	b8c00007 	ldb	r3,0(r23)
  8050e8:	21000114 	ori	r4,r4,4
  8050ec:	d9014d15 	stw	r4,1332(sp)
  8050f0:	003c9806 	br	804354 <___vfprintf_internal_r+0x1fc>
  8050f4:	d9814d17 	ldw	r6,1332(sp)
  8050f8:	3080080c 	andi	r2,r6,32
  8050fc:	1001f026 	beq	r2,zero,8058c0 <___vfprintf_internal_r+0x1768>
  805100:	d9014c17 	ldw	r4,1328(sp)
  805104:	38800017 	ldw	r2,0(r7)
  805108:	39c00104 	addi	r7,r7,4
  80510c:	d9c14115 	stw	r7,1284(sp)
  805110:	2007d7fa 	srai	r3,r4,31
  805114:	d9c14117 	ldw	r7,1284(sp)
  805118:	11000015 	stw	r4,0(r2)
  80511c:	10c00115 	stw	r3,4(r2)
  805120:	003c6906 	br	8042c8 <___vfprintf_internal_r+0x170>
  805124:	b8c00007 	ldb	r3,0(r23)
  805128:	00801b04 	movi	r2,108
  80512c:	18824f26 	beq	r3,r2,805a6c <___vfprintf_internal_r+0x1914>
  805130:	d9414d17 	ldw	r5,1332(sp)
  805134:	29400414 	ori	r5,r5,16
  805138:	d9414d15 	stw	r5,1332(sp)
  80513c:	003c8506 	br	804354 <___vfprintf_internal_r+0x1fc>
  805140:	d9814d17 	ldw	r6,1332(sp)
  805144:	b8c00007 	ldb	r3,0(r23)
  805148:	31800814 	ori	r6,r6,32
  80514c:	d9814d15 	stw	r6,1332(sp)
  805150:	003c8006 	br	804354 <___vfprintf_internal_r+0x1fc>
  805154:	d8814d17 	ldw	r2,1332(sp)
  805158:	3c000017 	ldw	r16,0(r7)
  80515c:	00c01e04 	movi	r3,120
  805160:	10800094 	ori	r2,r2,2
  805164:	d8814d15 	stw	r2,1332(sp)
  805168:	39c00104 	addi	r7,r7,4
  80516c:	01402074 	movhi	r5,129
  805170:	2952de04 	addi	r5,r5,19320
  805174:	00800c04 	movi	r2,48
  805178:	0023883a 	mov	r17,zero
  80517c:	01000084 	movi	r4,2
  805180:	d9c14115 	stw	r7,1284(sp)
  805184:	d8c14e15 	stw	r3,1336(sp)
  805188:	d9414515 	stw	r5,1300(sp)
  80518c:	d8800505 	stb	r2,20(sp)
  805190:	d8c00545 	stb	r3,21(sp)
  805194:	d8000405 	stb	zero,16(sp)
  805198:	003e7d06 	br	804b90 <___vfprintf_internal_r+0xa38>
  80519c:	d8814d17 	ldw	r2,1332(sp)
  8051a0:	b8c00007 	ldb	r3,0(r23)
  8051a4:	10801014 	ori	r2,r2,64
  8051a8:	d8814d15 	stw	r2,1332(sp)
  8051ac:	003c6906 	br	804354 <___vfprintf_internal_r+0x1fc>
  8051b0:	d9414d17 	ldw	r5,1332(sp)
  8051b4:	2880020c 	andi	r2,r5,8
  8051b8:	1001df26 	beq	r2,zero,805938 <___vfprintf_internal_r+0x17e0>
  8051bc:	39800017 	ldw	r6,0(r7)
  8051c0:	38800204 	addi	r2,r7,8
  8051c4:	d8814115 	stw	r2,1284(sp)
  8051c8:	d9814315 	stw	r6,1292(sp)
  8051cc:	39c00117 	ldw	r7,4(r7)
  8051d0:	d9c14415 	stw	r7,1296(sp)
  8051d4:	d9014317 	ldw	r4,1292(sp)
  8051d8:	d9414417 	ldw	r5,1296(sp)
  8051dc:	080a7b80 	call	80a7b8 <__isinfd>
  8051e0:	10021726 	beq	r2,zero,805a40 <___vfprintf_internal_r+0x18e8>
  8051e4:	d9014317 	ldw	r4,1292(sp)
  8051e8:	d9414417 	ldw	r5,1296(sp)
  8051ec:	000d883a 	mov	r6,zero
  8051f0:	000f883a 	mov	r7,zero
  8051f4:	080f51c0 	call	80f51c <__ltdf2>
  8051f8:	1002ca16 	blt	r2,zero,805d24 <___vfprintf_internal_r+0x1bcc>
  8051fc:	d9414e17 	ldw	r5,1336(sp)
  805200:	008011c4 	movi	r2,71
  805204:	11420a16 	blt	r2,r5,805a30 <___vfprintf_internal_r+0x18d8>
  805208:	01802074 	movhi	r6,129
  80520c:	3192e304 	addi	r6,r6,19340
  805210:	d9814215 	stw	r6,1288(sp)
  805214:	d9014d17 	ldw	r4,1332(sp)
  805218:	00c000c4 	movi	r3,3
  80521c:	00bfdfc4 	movi	r2,-129
  805220:	2088703a 	and	r4,r4,r2
  805224:	180f883a 	mov	r7,r3
  805228:	d8c14615 	stw	r3,1304(sp)
  80522c:	d9014d15 	stw	r4,1332(sp)
  805230:	d8014715 	stw	zero,1308(sp)
  805234:	003e6a06 	br	804be0 <___vfprintf_internal_r+0xa88>
  805238:	38800017 	ldw	r2,0(r7)
  80523c:	00c00044 	movi	r3,1
  805240:	39c00104 	addi	r7,r7,4
  805244:	d9c14115 	stw	r7,1284(sp)
  805248:	d9001004 	addi	r4,sp,64
  80524c:	180f883a 	mov	r7,r3
  805250:	d8c14615 	stw	r3,1304(sp)
  805254:	d9014215 	stw	r4,1288(sp)
  805258:	d8801005 	stb	r2,64(sp)
  80525c:	d8000405 	stb	zero,16(sp)
  805260:	003cac06 	br	804514 <___vfprintf_internal_r+0x3bc>
  805264:	01402074 	movhi	r5,129
  805268:	2952e904 	addi	r5,r5,19364
  80526c:	d9414515 	stw	r5,1300(sp)
  805270:	d9814d17 	ldw	r6,1332(sp)
  805274:	3080080c 	andi	r2,r6,32
  805278:	1000f926 	beq	r2,zero,805660 <___vfprintf_internal_r+0x1508>
  80527c:	3c000017 	ldw	r16,0(r7)
  805280:	3c400117 	ldw	r17,4(r7)
  805284:	38800204 	addi	r2,r7,8
  805288:	d8814115 	stw	r2,1284(sp)
  80528c:	d9414d17 	ldw	r5,1332(sp)
  805290:	2880004c 	andi	r2,r5,1
  805294:	1005003a 	cmpeq	r2,r2,zero
  805298:	1000b31e 	bne	r2,zero,805568 <___vfprintf_internal_r+0x1410>
  80529c:	8444b03a 	or	r2,r16,r17
  8052a0:	1000b126 	beq	r2,zero,805568 <___vfprintf_internal_r+0x1410>
  8052a4:	d9814e17 	ldw	r6,1336(sp)
  8052a8:	29400094 	ori	r5,r5,2
  8052ac:	00800c04 	movi	r2,48
  8052b0:	01000084 	movi	r4,2
  8052b4:	d9414d15 	stw	r5,1332(sp)
  8052b8:	d8800505 	stb	r2,20(sp)
  8052bc:	d9800545 	stb	r6,21(sp)
  8052c0:	d8000405 	stb	zero,16(sp)
  8052c4:	003e3206 	br	804b90 <___vfprintf_internal_r+0xa38>
  8052c8:	01802074 	movhi	r6,129
  8052cc:	3192de04 	addi	r6,r6,19320
  8052d0:	d9814515 	stw	r6,1300(sp)
  8052d4:	003fe606 	br	805270 <___vfprintf_internal_r+0x1118>
  8052d8:	00800ac4 	movi	r2,43
  8052dc:	d8800405 	stb	r2,16(sp)
  8052e0:	b8c00007 	ldb	r3,0(r23)
  8052e4:	003c1b06 	br	804354 <___vfprintf_internal_r+0x1fc>
  8052e8:	d8814d17 	ldw	r2,1332(sp)
  8052ec:	b8c00007 	ldb	r3,0(r23)
  8052f0:	10800054 	ori	r2,r2,1
  8052f4:	d8814d15 	stw	r2,1332(sp)
  8052f8:	003c1606 	br	804354 <___vfprintf_internal_r+0x1fc>
  8052fc:	d8800407 	ldb	r2,16(sp)
  805300:	1000461e 	bne	r2,zero,80541c <___vfprintf_internal_r+0x12c4>
  805304:	00800804 	movi	r2,32
  805308:	d8800405 	stb	r2,16(sp)
  80530c:	b8c00007 	ldb	r3,0(r23)
  805310:	003c1006 	br	804354 <___vfprintf_internal_r+0x1fc>
  805314:	d9814d17 	ldw	r6,1332(sp)
  805318:	b8c00007 	ldb	r3,0(r23)
  80531c:	31800214 	ori	r6,r6,8
  805320:	d9814d15 	stw	r6,1332(sp)
  805324:	003c0b06 	br	804354 <___vfprintf_internal_r+0x1fc>
  805328:	0007883a 	mov	r3,zero
  80532c:	01000244 	movi	r4,9
  805330:	188002a4 	muli	r2,r3,10
  805334:	b8c00007 	ldb	r3,0(r23)
  805338:	d9814e17 	ldw	r6,1336(sp)
  80533c:	bdc00044 	addi	r23,r23,1
  805340:	d8c14e15 	stw	r3,1336(sp)
  805344:	d9414e17 	ldw	r5,1336(sp)
  805348:	3085883a 	add	r2,r6,r2
  80534c:	10fff404 	addi	r3,r2,-48
  805350:	28bff404 	addi	r2,r5,-48
  805354:	20bff62e 	bgeu	r4,r2,805330 <___vfprintf_internal_r+0x11d8>
  805358:	d8c14b15 	stw	r3,1324(sp)
  80535c:	003bff06 	br	80435c <___vfprintf_internal_r+0x204>
  805360:	d9414d17 	ldw	r5,1332(sp)
  805364:	b8c00007 	ldb	r3,0(r23)
  805368:	29402014 	ori	r5,r5,128
  80536c:	d9414d15 	stw	r5,1332(sp)
  805370:	003bf806 	br	804354 <___vfprintf_internal_r+0x1fc>
  805374:	b8c00007 	ldb	r3,0(r23)
  805378:	00800a84 	movi	r2,42
  80537c:	bdc00044 	addi	r23,r23,1
  805380:	18831526 	beq	r3,r2,805fd8 <___vfprintf_internal_r+0x1e80>
  805384:	d8c14e15 	stw	r3,1336(sp)
  805388:	18bff404 	addi	r2,r3,-48
  80538c:	00c00244 	movi	r3,9
  805390:	18827836 	bltu	r3,r2,805d74 <___vfprintf_internal_r+0x1c1c>
  805394:	000d883a 	mov	r6,zero
  805398:	308002a4 	muli	r2,r6,10
  80539c:	b9800007 	ldb	r6,0(r23)
  8053a0:	d9414e17 	ldw	r5,1336(sp)
  8053a4:	bdc00044 	addi	r23,r23,1
  8053a8:	d9814e15 	stw	r6,1336(sp)
  8053ac:	d9014e17 	ldw	r4,1336(sp)
  8053b0:	1145883a 	add	r2,r2,r5
  8053b4:	11bff404 	addi	r6,r2,-48
  8053b8:	20bff404 	addi	r2,r4,-48
  8053bc:	18bff62e 	bgeu	r3,r2,805398 <___vfprintf_internal_r+0x1240>
  8053c0:	3027883a 	mov	r19,r6
  8053c4:	303be50e 	bge	r6,zero,80435c <___vfprintf_internal_r+0x204>
  8053c8:	04ffffc4 	movi	r19,-1
  8053cc:	003be306 	br	80435c <___vfprintf_internal_r+0x204>
  8053d0:	d8000405 	stb	zero,16(sp)
  8053d4:	39800017 	ldw	r6,0(r7)
  8053d8:	39c00104 	addi	r7,r7,4
  8053dc:	d9c14115 	stw	r7,1284(sp)
  8053e0:	d9814215 	stw	r6,1288(sp)
  8053e4:	3001c926 	beq	r6,zero,805b0c <___vfprintf_internal_r+0x19b4>
  8053e8:	98000e16 	blt	r19,zero,805424 <___vfprintf_internal_r+0x12cc>
  8053ec:	d9014217 	ldw	r4,1288(sp)
  8053f0:	000b883a 	mov	r5,zero
  8053f4:	980d883a 	mov	r6,r19
  8053f8:	08030c80 	call	8030c8 <memchr>
  8053fc:	10025926 	beq	r2,zero,805d64 <___vfprintf_internal_r+0x1c0c>
  805400:	d8c14217 	ldw	r3,1288(sp)
  805404:	10cfc83a 	sub	r7,r2,r3
  805408:	99c19e16 	blt	r19,r7,805a84 <___vfprintf_internal_r+0x192c>
  80540c:	d9c14615 	stw	r7,1304(sp)
  805410:	38000916 	blt	r7,zero,805438 <___vfprintf_internal_r+0x12e0>
  805414:	d8014715 	stw	zero,1308(sp)
  805418:	003df106 	br	804be0 <___vfprintf_internal_r+0xa88>
  80541c:	b8c00007 	ldb	r3,0(r23)
  805420:	003bcc06 	br	804354 <___vfprintf_internal_r+0x1fc>
  805424:	d9014217 	ldw	r4,1288(sp)
  805428:	080408c0 	call	80408c <strlen>
  80542c:	d8814615 	stw	r2,1304(sp)
  805430:	100f883a 	mov	r7,r2
  805434:	103ff70e 	bge	r2,zero,805414 <___vfprintf_internal_r+0x12bc>
  805438:	d8014615 	stw	zero,1304(sp)
  80543c:	d8014715 	stw	zero,1308(sp)
  805440:	003de706 	br	804be0 <___vfprintf_internal_r+0xa88>
  805444:	20c03fcc 	andi	r3,r4,255
  805448:	00800044 	movi	r2,1
  80544c:	18802d26 	beq	r3,r2,805504 <___vfprintf_internal_r+0x13ac>
  805450:	18800e36 	bltu	r3,r2,80548c <___vfprintf_internal_r+0x1334>
  805454:	00800084 	movi	r2,2
  805458:	1880fa26 	beq	r3,r2,805844 <___vfprintf_internal_r+0x16ec>
  80545c:	01002074 	movhi	r4,129
  805460:	2112ee04 	addi	r4,r4,19384
  805464:	080408c0 	call	80408c <strlen>
  805468:	100f883a 	mov	r7,r2
  80546c:	dcc14615 	stw	r19,1304(sp)
  805470:	9880010e 	bge	r19,r2,805478 <___vfprintf_internal_r+0x1320>
  805474:	d8814615 	stw	r2,1304(sp)
  805478:	00802074 	movhi	r2,129
  80547c:	1092ee04 	addi	r2,r2,19384
  805480:	dcc14715 	stw	r19,1308(sp)
  805484:	d8814215 	stw	r2,1288(sp)
  805488:	003dd506 	br	804be0 <___vfprintf_internal_r+0xa88>
  80548c:	d9401a04 	addi	r5,sp,104
  805490:	dd001004 	addi	r20,sp,64
  805494:	d9414215 	stw	r5,1288(sp)
  805498:	880a977a 	slli	r5,r17,29
  80549c:	d9814217 	ldw	r6,1288(sp)
  8054a0:	8004d0fa 	srli	r2,r16,3
  8054a4:	8806d0fa 	srli	r3,r17,3
  8054a8:	810001cc 	andi	r4,r16,7
  8054ac:	2884b03a 	or	r2,r5,r2
  8054b0:	31bfffc4 	addi	r6,r6,-1
  8054b4:	21000c04 	addi	r4,r4,48
  8054b8:	d9814215 	stw	r6,1288(sp)
  8054bc:	10cab03a 	or	r5,r2,r3
  8054c0:	31000005 	stb	r4,0(r6)
  8054c4:	1021883a 	mov	r16,r2
  8054c8:	1823883a 	mov	r17,r3
  8054cc:	283ff21e 	bne	r5,zero,805498 <___vfprintf_internal_r+0x1340>
  8054d0:	d8c14d17 	ldw	r3,1332(sp)
  8054d4:	1880004c 	andi	r2,r3,1
  8054d8:	1005003a 	cmpeq	r2,r2,zero
  8054dc:	103db91e 	bne	r2,zero,804bc4 <___vfprintf_internal_r+0xa6c>
  8054e0:	20803fcc 	andi	r2,r4,255
  8054e4:	1080201c 	xori	r2,r2,128
  8054e8:	10bfe004 	addi	r2,r2,-128
  8054ec:	00c00c04 	movi	r3,48
  8054f0:	10fdb426 	beq	r2,r3,804bc4 <___vfprintf_internal_r+0xa6c>
  8054f4:	31bfffc4 	addi	r6,r6,-1
  8054f8:	d9814215 	stw	r6,1288(sp)
  8054fc:	30c00005 	stb	r3,0(r6)
  805500:	003db006 	br	804bc4 <___vfprintf_internal_r+0xa6c>
  805504:	88800068 	cmpgeui	r2,r17,1
  805508:	10002c1e 	bne	r2,zero,8055bc <___vfprintf_internal_r+0x1464>
  80550c:	8800021e 	bne	r17,zero,805518 <___vfprintf_internal_r+0x13c0>
  805510:	00800244 	movi	r2,9
  805514:	14002936 	bltu	r2,r16,8055bc <___vfprintf_internal_r+0x1464>
  805518:	d90019c4 	addi	r4,sp,103
  80551c:	dd001004 	addi	r20,sp,64
  805520:	d9014215 	stw	r4,1288(sp)
  805524:	d9014217 	ldw	r4,1288(sp)
  805528:	80800c04 	addi	r2,r16,48
  80552c:	20800005 	stb	r2,0(r4)
  805530:	003da406 	br	804bc4 <___vfprintf_internal_r+0xa6c>
  805534:	dc400e17 	ldw	r17,56(sp)
  805538:	07002074 	movhi	fp,129
  80553c:	e712f604 	addi	fp,fp,19416
  805540:	9425883a 	add	r18,r18,r16
  805544:	8c400044 	addi	r17,r17,1
  805548:	008001c4 	movi	r2,7
  80554c:	1f000015 	stw	fp,0(r3)
  805550:	1c000115 	stw	r16,4(r3)
  805554:	dc800f15 	stw	r18,60(sp)
  805558:	dc400e15 	stw	r17,56(sp)
  80555c:	147de216 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0xb90>
  805560:	18c00204 	addi	r3,r3,8
  805564:	003c7a06 	br	804750 <___vfprintf_internal_r+0x5f8>
  805568:	01000084 	movi	r4,2
  80556c:	d8000405 	stb	zero,16(sp)
  805570:	003d8706 	br	804b90 <___vfprintf_internal_r+0xa38>
  805574:	d9814d17 	ldw	r6,1332(sp)
  805578:	30c4703a 	and	r2,r6,r3
  80557c:	1005003a 	cmpeq	r2,r2,zero
  805580:	103cb926 	beq	r2,zero,804868 <___vfprintf_internal_r+0x710>
  805584:	d9014217 	ldw	r4,1288(sp)
  805588:	94800044 	addi	r18,r18,1
  80558c:	8c400044 	addi	r17,r17,1
  805590:	008001c4 	movi	r2,7
  805594:	a9000015 	stw	r4,0(r21)
  805598:	a8c00115 	stw	r3,4(r21)
  80559c:	dc800f15 	stw	r18,60(sp)
  8055a0:	dc400e15 	stw	r17,56(sp)
  8055a4:	147e6616 	blt	r2,r17,804f40 <___vfprintf_internal_r+0xde8>
  8055a8:	acc00204 	addi	r19,r21,8
  8055ac:	003cd706 	br	80490c <___vfprintf_internal_r+0x7b4>
  8055b0:	07002074 	movhi	fp,129
  8055b4:	e712f604 	addi	fp,fp,19416
  8055b8:	003c4f06 	br	8046f8 <___vfprintf_internal_r+0x5a0>
  8055bc:	dd001004 	addi	r20,sp,64
  8055c0:	dc801a04 	addi	r18,sp,104
  8055c4:	8009883a 	mov	r4,r16
  8055c8:	880b883a 	mov	r5,r17
  8055cc:	01800284 	movi	r6,10
  8055d0:	000f883a 	mov	r7,zero
  8055d4:	080e0c40 	call	80e0c4 <__umoddi3>
  8055d8:	12000c04 	addi	r8,r2,48
  8055dc:	94bfffc4 	addi	r18,r18,-1
  8055e0:	8009883a 	mov	r4,r16
  8055e4:	880b883a 	mov	r5,r17
  8055e8:	01800284 	movi	r6,10
  8055ec:	000f883a 	mov	r7,zero
  8055f0:	92000005 	stb	r8,0(r18)
  8055f4:	080dae80 	call	80dae8 <__udivdi3>
  8055f8:	1009883a 	mov	r4,r2
  8055fc:	1021883a 	mov	r16,r2
  805600:	18800068 	cmpgeui	r2,r3,1
  805604:	1823883a 	mov	r17,r3
  805608:	103fee1e 	bne	r2,zero,8055c4 <___vfprintf_internal_r+0x146c>
  80560c:	1800021e 	bne	r3,zero,805618 <___vfprintf_internal_r+0x14c0>
  805610:	00800244 	movi	r2,9
  805614:	113feb36 	bltu	r2,r4,8055c4 <___vfprintf_internal_r+0x146c>
  805618:	94bfffc4 	addi	r18,r18,-1
  80561c:	dc814215 	stw	r18,1288(sp)
  805620:	003fc006 	br	805524 <___vfprintf_internal_r+0x13cc>
  805624:	d9014d17 	ldw	r4,1332(sp)
  805628:	2080004c 	andi	r2,r4,1
  80562c:	10009a1e 	bne	r2,zero,805898 <___vfprintf_internal_r+0x1740>
  805630:	d9401a04 	addi	r5,sp,104
  805634:	dd001004 	addi	r20,sp,64
  805638:	d9414215 	stw	r5,1288(sp)
  80563c:	003d6106 	br	804bc4 <___vfprintf_internal_r+0xa6c>
  805640:	d9015017 	ldw	r4,1344(sp)
  805644:	b00b883a 	mov	r5,r22
  805648:	d9800d04 	addi	r6,sp,52
  80564c:	08041000 	call	804100 <__sprint_r>
  805650:	103c791e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805654:	dc800f17 	ldw	r18,60(sp)
  805658:	d8c01a04 	addi	r3,sp,104
  80565c:	003cff06 	br	804a5c <___vfprintf_internal_r+0x904>
  805660:	d8c14d17 	ldw	r3,1332(sp)
  805664:	1880040c 	andi	r2,r3,16
  805668:	1000711e 	bne	r2,zero,805830 <___vfprintf_internal_r+0x16d8>
  80566c:	d9014d17 	ldw	r4,1332(sp)
  805670:	2080100c 	andi	r2,r4,64
  805674:	10006e26 	beq	r2,zero,805830 <___vfprintf_internal_r+0x16d8>
  805678:	3c00000b 	ldhu	r16,0(r7)
  80567c:	0023883a 	mov	r17,zero
  805680:	39c00104 	addi	r7,r7,4
  805684:	d9c14115 	stw	r7,1284(sp)
  805688:	003f0006 	br	80528c <___vfprintf_internal_r+0x1134>
  80568c:	dc400e17 	ldw	r17,56(sp)
  805690:	07002074 	movhi	fp,129
  805694:	e712f604 	addi	fp,fp,19416
  805698:	9425883a 	add	r18,r18,r16
  80569c:	8c400044 	addi	r17,r17,1
  8056a0:	008001c4 	movi	r2,7
  8056a4:	1f000015 	stw	fp,0(r3)
  8056a8:	1c000115 	stw	r16,4(r3)
  8056ac:	dc800f15 	stw	r18,60(sp)
  8056b0:	dc400e15 	stw	r17,56(sp)
  8056b4:	147d7616 	blt	r2,r17,804c90 <___vfprintf_internal_r+0xb38>
  8056b8:	18c00204 	addi	r3,r3,8
  8056bc:	003d7b06 	br	804cac <___vfprintf_internal_r+0xb54>
  8056c0:	dc800f17 	ldw	r18,60(sp)
  8056c4:	dc400e17 	ldw	r17,56(sp)
  8056c8:	07002074 	movhi	fp,129
  8056cc:	e712fa04 	addi	fp,fp,19432
  8056d0:	003bc006 	br	8045d4 <___vfprintf_internal_r+0x47c>
  8056d4:	d9015017 	ldw	r4,1344(sp)
  8056d8:	b00b883a 	mov	r5,r22
  8056dc:	d9800d04 	addi	r6,sp,52
  8056e0:	08041000 	call	804100 <__sprint_r>
  8056e4:	103c541e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8056e8:	dc800f17 	ldw	r18,60(sp)
  8056ec:	d8c01a04 	addi	r3,sp,104
  8056f0:	003ce906 	br	804a98 <___vfprintf_internal_r+0x940>
  8056f4:	3c000017 	ldw	r16,0(r7)
  8056f8:	0009883a 	mov	r4,zero
  8056fc:	39c00104 	addi	r7,r7,4
  805700:	0023883a 	mov	r17,zero
  805704:	d9c14115 	stw	r7,1284(sp)
  805708:	d8000405 	stb	zero,16(sp)
  80570c:	003d2006 	br	804b90 <___vfprintf_internal_r+0xa38>
  805710:	38800017 	ldw	r2,0(r7)
  805714:	39c00104 	addi	r7,r7,4
  805718:	d9c14115 	stw	r7,1284(sp)
  80571c:	1023d7fa 	srai	r17,r2,31
  805720:	1021883a 	mov	r16,r2
  805724:	003d1806 	br	804b88 <___vfprintf_internal_r+0xa30>
  805728:	3c000017 	ldw	r16,0(r7)
  80572c:	01000044 	movi	r4,1
  805730:	39c00104 	addi	r7,r7,4
  805734:	0023883a 	mov	r17,zero
  805738:	d9c14115 	stw	r7,1284(sp)
  80573c:	d8000405 	stb	zero,16(sp)
  805740:	003d1306 	br	804b90 <___vfprintf_internal_r+0xa38>
  805744:	00802074 	movhi	r2,129
  805748:	1092f504 	addi	r2,r2,19412
  80574c:	94800044 	addi	r18,r18,1
  805750:	8c400044 	addi	r17,r17,1
  805754:	a8800015 	stw	r2,0(r21)
  805758:	00c00044 	movi	r3,1
  80575c:	008001c4 	movi	r2,7
  805760:	a8c00115 	stw	r3,4(r21)
  805764:	dc800f15 	stw	r18,60(sp)
  805768:	dc400e15 	stw	r17,56(sp)
  80576c:	1440ca16 	blt	r2,r17,805a98 <___vfprintf_internal_r+0x1940>
  805770:	a8c00204 	addi	r3,r21,8
  805774:	2000061e 	bne	r4,zero,805790 <___vfprintf_internal_r+0x1638>
  805778:	d9414817 	ldw	r5,1312(sp)
  80577c:	2800041e 	bne	r5,zero,805790 <___vfprintf_internal_r+0x1638>
  805780:	d9814d17 	ldw	r6,1332(sp)
  805784:	3080004c 	andi	r2,r6,1
  805788:	1005003a 	cmpeq	r2,r2,zero
  80578c:	103bf01e 	bne	r2,zero,804750 <___vfprintf_internal_r+0x5f8>
  805790:	00800044 	movi	r2,1
  805794:	dc400e17 	ldw	r17,56(sp)
  805798:	18800115 	stw	r2,4(r3)
  80579c:	d8814a17 	ldw	r2,1320(sp)
  8057a0:	94800044 	addi	r18,r18,1
  8057a4:	8c400044 	addi	r17,r17,1
  8057a8:	18800015 	stw	r2,0(r3)
  8057ac:	008001c4 	movi	r2,7
  8057b0:	dc800f15 	stw	r18,60(sp)
  8057b4:	dc400e15 	stw	r17,56(sp)
  8057b8:	1440ca16 	blt	r2,r17,805ae4 <___vfprintf_internal_r+0x198c>
  8057bc:	18c00204 	addi	r3,r3,8
  8057c0:	0121c83a 	sub	r16,zero,r4
  8057c4:	0400500e 	bge	zero,r16,805908 <___vfprintf_internal_r+0x17b0>
  8057c8:	00800404 	movi	r2,16
  8057cc:	1400800e 	bge	r2,r16,8059d0 <___vfprintf_internal_r+0x1878>
  8057d0:	1027883a 	mov	r19,r2
  8057d4:	07002074 	movhi	fp,129
  8057d8:	e712f604 	addi	fp,fp,19416
  8057dc:	050001c4 	movi	r20,7
  8057e0:	00000306 	br	8057f0 <___vfprintf_internal_r+0x1698>
  8057e4:	18c00204 	addi	r3,r3,8
  8057e8:	843ffc04 	addi	r16,r16,-16
  8057ec:	9c007a0e 	bge	r19,r16,8059d8 <___vfprintf_internal_r+0x1880>
  8057f0:	94800404 	addi	r18,r18,16
  8057f4:	8c400044 	addi	r17,r17,1
  8057f8:	1f000015 	stw	fp,0(r3)
  8057fc:	1cc00115 	stw	r19,4(r3)
  805800:	dc800f15 	stw	r18,60(sp)
  805804:	dc400e15 	stw	r17,56(sp)
  805808:	a47ff60e 	bge	r20,r17,8057e4 <___vfprintf_internal_r+0x168c>
  80580c:	d9015017 	ldw	r4,1344(sp)
  805810:	b00b883a 	mov	r5,r22
  805814:	d9800d04 	addi	r6,sp,52
  805818:	08041000 	call	804100 <__sprint_r>
  80581c:	103c061e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805820:	dc800f17 	ldw	r18,60(sp)
  805824:	dc400e17 	ldw	r17,56(sp)
  805828:	d8c01a04 	addi	r3,sp,104
  80582c:	003fee06 	br	8057e8 <___vfprintf_internal_r+0x1690>
  805830:	3c000017 	ldw	r16,0(r7)
  805834:	0023883a 	mov	r17,zero
  805838:	39c00104 	addi	r7,r7,4
  80583c:	d9c14115 	stw	r7,1284(sp)
  805840:	003e9206 	br	80528c <___vfprintf_internal_r+0x1134>
  805844:	d9401a04 	addi	r5,sp,104
  805848:	dd001004 	addi	r20,sp,64
  80584c:	d9414215 	stw	r5,1288(sp)
  805850:	d9814517 	ldw	r6,1300(sp)
  805854:	880a973a 	slli	r5,r17,28
  805858:	8004d13a 	srli	r2,r16,4
  80585c:	810003cc 	andi	r4,r16,15
  805860:	3109883a 	add	r4,r6,r4
  805864:	2884b03a 	or	r2,r5,r2
  805868:	21400003 	ldbu	r5,0(r4)
  80586c:	d9014217 	ldw	r4,1288(sp)
  805870:	8806d13a 	srli	r3,r17,4
  805874:	1021883a 	mov	r16,r2
  805878:	213fffc4 	addi	r4,r4,-1
  80587c:	d9014215 	stw	r4,1288(sp)
  805880:	d9814217 	ldw	r6,1288(sp)
  805884:	10c8b03a 	or	r4,r2,r3
  805888:	1823883a 	mov	r17,r3
  80588c:	31400005 	stb	r5,0(r6)
  805890:	203fef1e 	bne	r4,zero,805850 <___vfprintf_internal_r+0x16f8>
  805894:	003ccb06 	br	804bc4 <___vfprintf_internal_r+0xa6c>
  805898:	00800c04 	movi	r2,48
  80589c:	d98019c4 	addi	r6,sp,103
  8058a0:	dd001004 	addi	r20,sp,64
  8058a4:	d88019c5 	stb	r2,103(sp)
  8058a8:	d9814215 	stw	r6,1288(sp)
  8058ac:	003cc506 	br	804bc4 <___vfprintf_internal_r+0xa6c>
  8058b0:	dc400e17 	ldw	r17,56(sp)
  8058b4:	07002074 	movhi	fp,129
  8058b8:	e712fa04 	addi	fp,fp,19432
  8058bc:	003bc706 	br	8047dc <___vfprintf_internal_r+0x684>
  8058c0:	d9414d17 	ldw	r5,1332(sp)
  8058c4:	2880040c 	andi	r2,r5,16
  8058c8:	10007c26 	beq	r2,zero,805abc <___vfprintf_internal_r+0x1964>
  8058cc:	38800017 	ldw	r2,0(r7)
  8058d0:	39c00104 	addi	r7,r7,4
  8058d4:	d9c14115 	stw	r7,1284(sp)
  8058d8:	d9814c17 	ldw	r6,1328(sp)
  8058dc:	d9c14117 	ldw	r7,1284(sp)
  8058e0:	11800015 	stw	r6,0(r2)
  8058e4:	003a7806 	br	8042c8 <___vfprintf_internal_r+0x170>
  8058e8:	d9015017 	ldw	r4,1344(sp)
  8058ec:	b00b883a 	mov	r5,r22
  8058f0:	d9800d04 	addi	r6,sp,52
  8058f4:	08041000 	call	804100 <__sprint_r>
  8058f8:	103bcf1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8058fc:	dc800f17 	ldw	r18,60(sp)
  805900:	dc400e17 	ldw	r17,56(sp)
  805904:	d8c01a04 	addi	r3,sp,104
  805908:	d9014817 	ldw	r4,1312(sp)
  80590c:	d9414217 	ldw	r5,1288(sp)
  805910:	8c400044 	addi	r17,r17,1
  805914:	9125883a 	add	r18,r18,r4
  805918:	008001c4 	movi	r2,7
  80591c:	19400015 	stw	r5,0(r3)
  805920:	19000115 	stw	r4,4(r3)
  805924:	dc800f15 	stw	r18,60(sp)
  805928:	dc400e15 	stw	r17,56(sp)
  80592c:	147cee16 	blt	r2,r17,804ce8 <___vfprintf_internal_r+0xb90>
  805930:	18c00204 	addi	r3,r3,8
  805934:	003b8606 	br	804750 <___vfprintf_internal_r+0x5f8>
  805938:	38c00017 	ldw	r3,0(r7)
  80593c:	39000204 	addi	r4,r7,8
  805940:	d9014115 	stw	r4,1284(sp)
  805944:	d8c14315 	stw	r3,1292(sp)
  805948:	39c00117 	ldw	r7,4(r7)
  80594c:	d9c14415 	stw	r7,1296(sp)
  805950:	003e2006 	br	8051d4 <___vfprintf_internal_r+0x107c>
  805954:	0005883a 	mov	r2,zero
  805958:	1409c83a 	sub	r4,r2,r16
  80595c:	1105803a 	cmpltu	r2,r2,r4
  805960:	044bc83a 	sub	r5,zero,r17
  805964:	2885c83a 	sub	r2,r5,r2
  805968:	2021883a 	mov	r16,r4
  80596c:	1023883a 	mov	r17,r2
  805970:	01000044 	movi	r4,1
  805974:	00800b44 	movi	r2,45
  805978:	d8800405 	stb	r2,16(sp)
  80597c:	003c8406 	br	804b90 <___vfprintf_internal_r+0xa38>
  805980:	d9015017 	ldw	r4,1344(sp)
  805984:	b00b883a 	mov	r5,r22
  805988:	d9800d04 	addi	r6,sp,52
  80598c:	08041000 	call	804100 <__sprint_r>
  805990:	103ba91e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805994:	dc800f17 	ldw	r18,60(sp)
  805998:	dc400e17 	ldw	r17,56(sp)
  80599c:	d9000617 	ldw	r4,24(sp)
  8059a0:	d9401a04 	addi	r5,sp,104
  8059a4:	003da706 	br	805044 <___vfprintf_internal_r+0xeec>
  8059a8:	d9015017 	ldw	r4,1344(sp)
  8059ac:	b00b883a 	mov	r5,r22
  8059b0:	d9800d04 	addi	r6,sp,52
  8059b4:	08041000 	call	804100 <__sprint_r>
  8059b8:	103b9f1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  8059bc:	dc800f17 	ldw	r18,60(sp)
  8059c0:	dc400e17 	ldw	r17,56(sp)
  8059c4:	d9000617 	ldw	r4,24(sp)
  8059c8:	d8c01a04 	addi	r3,sp,104
  8059cc:	003d9106 	br	805014 <___vfprintf_internal_r+0xebc>
  8059d0:	07002074 	movhi	fp,129
  8059d4:	e712f604 	addi	fp,fp,19416
  8059d8:	9425883a 	add	r18,r18,r16
  8059dc:	8c400044 	addi	r17,r17,1
  8059e0:	008001c4 	movi	r2,7
  8059e4:	1f000015 	stw	fp,0(r3)
  8059e8:	1c000115 	stw	r16,4(r3)
  8059ec:	dc800f15 	stw	r18,60(sp)
  8059f0:	dc400e15 	stw	r17,56(sp)
  8059f4:	147fbc16 	blt	r2,r17,8058e8 <___vfprintf_internal_r+0x1790>
  8059f8:	18c00204 	addi	r3,r3,8
  8059fc:	003fc206 	br	805908 <___vfprintf_internal_r+0x17b0>
  805a00:	d9015017 	ldw	r4,1344(sp)
  805a04:	b00b883a 	mov	r5,r22
  805a08:	d9800d04 	addi	r6,sp,52
  805a0c:	08041000 	call	804100 <__sprint_r>
  805a10:	103b891e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805a14:	dc800f17 	ldw	r18,60(sp)
  805a18:	d9000617 	ldw	r4,24(sp)
  805a1c:	d8c01a04 	addi	r3,sp,104
  805a20:	003d0206 	br	804e2c <___vfprintf_internal_r+0xcd4>
  805a24:	07002074 	movhi	fp,129
  805a28:	e712f604 	addi	fp,fp,19416
  805a2c:	003be406 	br	8049c0 <___vfprintf_internal_r+0x868>
  805a30:	00802074 	movhi	r2,129
  805a34:	1092e404 	addi	r2,r2,19344
  805a38:	d8814215 	stw	r2,1288(sp)
  805a3c:	003df506 	br	805214 <___vfprintf_internal_r+0x10bc>
  805a40:	d9014317 	ldw	r4,1292(sp)
  805a44:	d9414417 	ldw	r5,1296(sp)
  805a48:	080a7f80 	call	80a7f8 <__isnand>
  805a4c:	10003926 	beq	r2,zero,805b34 <___vfprintf_internal_r+0x19dc>
  805a50:	d9414e17 	ldw	r5,1336(sp)
  805a54:	008011c4 	movi	r2,71
  805a58:	1140ce16 	blt	r2,r5,805d94 <___vfprintf_internal_r+0x1c3c>
  805a5c:	01802074 	movhi	r6,129
  805a60:	3192e504 	addi	r6,r6,19348
  805a64:	d9814215 	stw	r6,1288(sp)
  805a68:	003dea06 	br	805214 <___vfprintf_internal_r+0x10bc>
  805a6c:	d9014d17 	ldw	r4,1332(sp)
  805a70:	bdc00044 	addi	r23,r23,1
  805a74:	b8c00007 	ldb	r3,0(r23)
  805a78:	21000814 	ori	r4,r4,32
  805a7c:	d9014d15 	stw	r4,1332(sp)
  805a80:	003a3406 	br	804354 <___vfprintf_internal_r+0x1fc>
  805a84:	dcc14615 	stw	r19,1304(sp)
  805a88:	98011016 	blt	r19,zero,805ecc <___vfprintf_internal_r+0x1d74>
  805a8c:	980f883a 	mov	r7,r19
  805a90:	d8014715 	stw	zero,1308(sp)
  805a94:	003c5206 	br	804be0 <___vfprintf_internal_r+0xa88>
  805a98:	d9015017 	ldw	r4,1344(sp)
  805a9c:	b00b883a 	mov	r5,r22
  805aa0:	d9800d04 	addi	r6,sp,52
  805aa4:	08041000 	call	804100 <__sprint_r>
  805aa8:	103b631e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805aac:	dc800f17 	ldw	r18,60(sp)
  805ab0:	d9000617 	ldw	r4,24(sp)
  805ab4:	d8c01a04 	addi	r3,sp,104
  805ab8:	003f2e06 	br	805774 <___vfprintf_internal_r+0x161c>
  805abc:	d8c14d17 	ldw	r3,1332(sp)
  805ac0:	1880100c 	andi	r2,r3,64
  805ac4:	1000a026 	beq	r2,zero,805d48 <___vfprintf_internal_r+0x1bf0>
  805ac8:	38800017 	ldw	r2,0(r7)
  805acc:	39c00104 	addi	r7,r7,4
  805ad0:	d9c14115 	stw	r7,1284(sp)
  805ad4:	d9014c17 	ldw	r4,1328(sp)
  805ad8:	d9c14117 	ldw	r7,1284(sp)
  805adc:	1100000d 	sth	r4,0(r2)
  805ae0:	0039f906 	br	8042c8 <___vfprintf_internal_r+0x170>
  805ae4:	d9015017 	ldw	r4,1344(sp)
  805ae8:	b00b883a 	mov	r5,r22
  805aec:	d9800d04 	addi	r6,sp,52
  805af0:	08041000 	call	804100 <__sprint_r>
  805af4:	103b501e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805af8:	dc800f17 	ldw	r18,60(sp)
  805afc:	dc400e17 	ldw	r17,56(sp)
  805b00:	d9000617 	ldw	r4,24(sp)
  805b04:	d8c01a04 	addi	r3,sp,104
  805b08:	003f2d06 	br	8057c0 <___vfprintf_internal_r+0x1668>
  805b0c:	00800184 	movi	r2,6
  805b10:	14c09a36 	bltu	r2,r19,805d7c <___vfprintf_internal_r+0x1c24>
  805b14:	dcc14615 	stw	r19,1304(sp)
  805b18:	9800010e 	bge	r19,zero,805b20 <___vfprintf_internal_r+0x19c8>
  805b1c:	d8014615 	stw	zero,1304(sp)
  805b20:	00802074 	movhi	r2,129
  805b24:	1092e704 	addi	r2,r2,19356
  805b28:	980f883a 	mov	r7,r19
  805b2c:	d8814215 	stw	r2,1288(sp)
  805b30:	003a7806 	br	804514 <___vfprintf_internal_r+0x3bc>
  805b34:	00bfffc4 	movi	r2,-1
  805b38:	9880e226 	beq	r19,r2,805ec4 <___vfprintf_internal_r+0x1d6c>
  805b3c:	d9414e17 	ldw	r5,1336(sp)
  805b40:	008019c4 	movi	r2,103
  805b44:	2880dc26 	beq	r5,r2,805eb8 <___vfprintf_internal_r+0x1d60>
  805b48:	008011c4 	movi	r2,71
  805b4c:	2880da26 	beq	r5,r2,805eb8 <___vfprintf_internal_r+0x1d60>
  805b50:	d9414d17 	ldw	r5,1332(sp)
  805b54:	d9014417 	ldw	r4,1296(sp)
  805b58:	d9814317 	ldw	r6,1292(sp)
  805b5c:	29404014 	ori	r5,r5,256
  805b60:	d9414d15 	stw	r5,1332(sp)
  805b64:	2000cc16 	blt	r4,zero,805e98 <___vfprintf_internal_r+0x1d40>
  805b68:	3021883a 	mov	r16,r6
  805b6c:	2023883a 	mov	r17,r4
  805b70:	0039883a 	mov	fp,zero
  805b74:	d9414e17 	ldw	r5,1336(sp)
  805b78:	00801984 	movi	r2,102
  805b7c:	2880b726 	beq	r5,r2,805e5c <___vfprintf_internal_r+0x1d04>
  805b80:	00801184 	movi	r2,70
  805b84:	2880b526 	beq	r5,r2,805e5c <___vfprintf_internal_r+0x1d04>
  805b88:	00801944 	movi	r2,101
  805b8c:	2880c826 	beq	r5,r2,805eb0 <___vfprintf_internal_r+0x1d58>
  805b90:	00801144 	movi	r2,69
  805b94:	2880c626 	beq	r5,r2,805eb0 <___vfprintf_internal_r+0x1d58>
  805b98:	9829883a 	mov	r20,r19
  805b9c:	d9015017 	ldw	r4,1344(sp)
  805ba0:	d8800604 	addi	r2,sp,24
  805ba4:	880d883a 	mov	r6,r17
  805ba8:	d8800115 	stw	r2,4(sp)
  805bac:	d8c00704 	addi	r3,sp,28
  805bb0:	d8800804 	addi	r2,sp,32
  805bb4:	800b883a 	mov	r5,r16
  805bb8:	01c00084 	movi	r7,2
  805bbc:	d8c00215 	stw	r3,8(sp)
  805bc0:	d8800315 	stw	r2,12(sp)
  805bc4:	dd000015 	stw	r20,0(sp)
  805bc8:	0807be40 	call	807be4 <_dtoa_r>
  805bcc:	d9814e17 	ldw	r6,1336(sp)
  805bd0:	d8814215 	stw	r2,1288(sp)
  805bd4:	008019c4 	movi	r2,103
  805bd8:	30809526 	beq	r6,r2,805e30 <___vfprintf_internal_r+0x1cd8>
  805bdc:	d8c14e17 	ldw	r3,1336(sp)
  805be0:	008011c4 	movi	r2,71
  805be4:	18809226 	beq	r3,r2,805e30 <___vfprintf_internal_r+0x1cd8>
  805be8:	d9414217 	ldw	r5,1288(sp)
  805bec:	d9814e17 	ldw	r6,1336(sp)
  805bf0:	00801984 	movi	r2,102
  805bf4:	2d25883a 	add	r18,r5,r20
  805bf8:	30808626 	beq	r6,r2,805e14 <___vfprintf_internal_r+0x1cbc>
  805bfc:	00801184 	movi	r2,70
  805c00:	30808426 	beq	r6,r2,805e14 <___vfprintf_internal_r+0x1cbc>
  805c04:	000d883a 	mov	r6,zero
  805c08:	000f883a 	mov	r7,zero
  805c0c:	880b883a 	mov	r5,r17
  805c10:	8009883a 	mov	r4,r16
  805c14:	080f2fc0 	call	80f2fc <__eqdf2>
  805c18:	1000751e 	bne	r2,zero,805df0 <___vfprintf_internal_r+0x1c98>
  805c1c:	9005883a 	mov	r2,r18
  805c20:	dc800815 	stw	r18,32(sp)
  805c24:	d9014217 	ldw	r4,1288(sp)
  805c28:	d9414e17 	ldw	r5,1336(sp)
  805c2c:	00c019c4 	movi	r3,103
  805c30:	1125c83a 	sub	r18,r2,r4
  805c34:	28c06826 	beq	r5,r3,805dd8 <___vfprintf_internal_r+0x1c80>
  805c38:	008011c4 	movi	r2,71
  805c3c:	28806626 	beq	r5,r2,805dd8 <___vfprintf_internal_r+0x1c80>
  805c40:	d9000617 	ldw	r4,24(sp)
  805c44:	d8c14e17 	ldw	r3,1336(sp)
  805c48:	00801944 	movi	r2,101
  805c4c:	10c05516 	blt	r2,r3,805da4 <___vfprintf_internal_r+0x1c4c>
  805c50:	213fffc4 	addi	r4,r4,-1
  805c54:	d9000615 	stw	r4,24(sp)
  805c58:	d8c00905 	stb	r3,36(sp)
  805c5c:	2021883a 	mov	r16,r4
  805c60:	2000c116 	blt	r4,zero,805f68 <___vfprintf_internal_r+0x1e10>
  805c64:	00800ac4 	movi	r2,43
  805c68:	d8800945 	stb	r2,37(sp)
  805c6c:	00800244 	movi	r2,9
  805c70:	1400af0e 	bge	r2,r16,805f30 <___vfprintf_internal_r+0x1dd8>
  805c74:	1027883a 	mov	r19,r2
  805c78:	dc400cc4 	addi	r17,sp,51
  805c7c:	8009883a 	mov	r4,r16
  805c80:	01400284 	movi	r5,10
  805c84:	080fae00 	call	80fae0 <__modsi3>
  805c88:	10800c04 	addi	r2,r2,48
  805c8c:	8c7fffc4 	addi	r17,r17,-1
  805c90:	8009883a 	mov	r4,r16
  805c94:	01400284 	movi	r5,10
  805c98:	88800005 	stb	r2,0(r17)
  805c9c:	080fa800 	call	80fa80 <__divsi3>
  805ca0:	1021883a 	mov	r16,r2
  805ca4:	98bff516 	blt	r19,r2,805c7c <___vfprintf_internal_r+0x1b24>
  805ca8:	10c00c04 	addi	r3,r2,48
  805cac:	d8800b04 	addi	r2,sp,44
  805cb0:	108001c4 	addi	r2,r2,7
  805cb4:	897fffc4 	addi	r5,r17,-1
  805cb8:	88ffffc5 	stb	r3,-1(r17)
  805cbc:	2880a72e 	bgeu	r5,r2,805f5c <___vfprintf_internal_r+0x1e04>
  805cc0:	1009883a 	mov	r4,r2
  805cc4:	d9800904 	addi	r6,sp,36
  805cc8:	d8c00984 	addi	r3,sp,38
  805ccc:	28800003 	ldbu	r2,0(r5)
  805cd0:	29400044 	addi	r5,r5,1
  805cd4:	18800005 	stb	r2,0(r3)
  805cd8:	18c00044 	addi	r3,r3,1
  805cdc:	293ffb36 	bltu	r5,r4,805ccc <___vfprintf_internal_r+0x1b74>
  805ce0:	1987c83a 	sub	r3,r3,r6
  805ce4:	00800044 	movi	r2,1
  805ce8:	d8c14915 	stw	r3,1316(sp)
  805cec:	90cf883a 	add	r7,r18,r3
  805cf0:	1480960e 	bge	r2,r18,805f4c <___vfprintf_internal_r+0x1df4>
  805cf4:	39c00044 	addi	r7,r7,1
  805cf8:	d9c14615 	stw	r7,1304(sp)
  805cfc:	38003416 	blt	r7,zero,805dd0 <___vfprintf_internal_r+0x1c78>
  805d00:	e0803fcc 	andi	r2,fp,255
  805d04:	1080201c 	xori	r2,r2,128
  805d08:	10bfe004 	addi	r2,r2,-128
  805d0c:	10004e26 	beq	r2,zero,805e48 <___vfprintf_internal_r+0x1cf0>
  805d10:	00800b44 	movi	r2,45
  805d14:	dc814815 	stw	r18,1312(sp)
  805d18:	d8014715 	stw	zero,1308(sp)
  805d1c:	d8800405 	stb	r2,16(sp)
  805d20:	003bb106 	br	804be8 <___vfprintf_internal_r+0xa90>
  805d24:	00800b44 	movi	r2,45
  805d28:	d8800405 	stb	r2,16(sp)
  805d2c:	003d3306 	br	8051fc <___vfprintf_internal_r+0x10a4>
  805d30:	d9015017 	ldw	r4,1344(sp)
  805d34:	b00b883a 	mov	r5,r22
  805d38:	d9800d04 	addi	r6,sp,52
  805d3c:	08041000 	call	804100 <__sprint_r>
  805d40:	103abd1e 	bne	r2,zero,804838 <___vfprintf_internal_r+0x6e0>
  805d44:	003abb06 	br	804834 <___vfprintf_internal_r+0x6dc>
  805d48:	38800017 	ldw	r2,0(r7)
  805d4c:	39c00104 	addi	r7,r7,4
  805d50:	d9c14115 	stw	r7,1284(sp)
  805d54:	d9414c17 	ldw	r5,1328(sp)
  805d58:	d9c14117 	ldw	r7,1284(sp)
  805d5c:	11400015 	stw	r5,0(r2)
  805d60:	00395906 	br	8042c8 <___vfprintf_internal_r+0x170>
  805d64:	980f883a 	mov	r7,r19
  805d68:	dcc14615 	stw	r19,1304(sp)
  805d6c:	d8014715 	stw	zero,1308(sp)
  805d70:	003b9b06 	br	804be0 <___vfprintf_internal_r+0xa88>
  805d74:	0027883a 	mov	r19,zero
  805d78:	00397806 	br	80435c <___vfprintf_internal_r+0x204>
  805d7c:	00c02074 	movhi	r3,129
  805d80:	18d2e704 	addi	r3,r3,19356
  805d84:	100f883a 	mov	r7,r2
  805d88:	d8814615 	stw	r2,1304(sp)
  805d8c:	d8c14215 	stw	r3,1288(sp)
  805d90:	0039e006 	br	804514 <___vfprintf_internal_r+0x3bc>
  805d94:	00802074 	movhi	r2,129
  805d98:	1092e604 	addi	r2,r2,19352
  805d9c:	d8814215 	stw	r2,1288(sp)
  805da0:	003d1c06 	br	805214 <___vfprintf_internal_r+0x10bc>
  805da4:	d9414e17 	ldw	r5,1336(sp)
  805da8:	00801984 	movi	r2,102
  805dac:	28804926 	beq	r5,r2,805ed4 <___vfprintf_internal_r+0x1d7c>
  805db0:	200f883a 	mov	r7,r4
  805db4:	24805716 	blt	r4,r18,805f14 <___vfprintf_internal_r+0x1dbc>
  805db8:	d9414d17 	ldw	r5,1332(sp)
  805dbc:	2880004c 	andi	r2,r5,1
  805dc0:	10000126 	beq	r2,zero,805dc8 <___vfprintf_internal_r+0x1c70>
  805dc4:	21c00044 	addi	r7,r4,1
  805dc8:	d9c14615 	stw	r7,1304(sp)
  805dcc:	383fcc0e 	bge	r7,zero,805d00 <___vfprintf_internal_r+0x1ba8>
  805dd0:	d8014615 	stw	zero,1304(sp)
  805dd4:	003fca06 	br	805d00 <___vfprintf_internal_r+0x1ba8>
  805dd8:	d9000617 	ldw	r4,24(sp)
  805ddc:	00bfff04 	movi	r2,-4
  805de0:	1100480e 	bge	r2,r4,805f04 <___vfprintf_internal_r+0x1dac>
  805de4:	99004716 	blt	r19,r4,805f04 <___vfprintf_internal_r+0x1dac>
  805de8:	d8c14e15 	stw	r3,1336(sp)
  805dec:	003ff006 	br	805db0 <___vfprintf_internal_r+0x1c58>
  805df0:	d8800817 	ldw	r2,32(sp)
  805df4:	14bf8b2e 	bgeu	r2,r18,805c24 <___vfprintf_internal_r+0x1acc>
  805df8:	9007883a 	mov	r3,r18
  805dfc:	01000c04 	movi	r4,48
  805e00:	11000005 	stb	r4,0(r2)
  805e04:	10800044 	addi	r2,r2,1
  805e08:	d8800815 	stw	r2,32(sp)
  805e0c:	18bffc1e 	bne	r3,r2,805e00 <___vfprintf_internal_r+0x1ca8>
  805e10:	003f8406 	br	805c24 <___vfprintf_internal_r+0x1acc>
  805e14:	d8814217 	ldw	r2,1288(sp)
  805e18:	10c00007 	ldb	r3,0(r2)
  805e1c:	00800c04 	movi	r2,48
  805e20:	18805b26 	beq	r3,r2,805f90 <___vfprintf_internal_r+0x1e38>
  805e24:	d9000617 	ldw	r4,24(sp)
  805e28:	9125883a 	add	r18,r18,r4
  805e2c:	003f7506 	br	805c04 <___vfprintf_internal_r+0x1aac>
  805e30:	d9014d17 	ldw	r4,1332(sp)
  805e34:	2080004c 	andi	r2,r4,1
  805e38:	1005003a 	cmpeq	r2,r2,zero
  805e3c:	103f6a26 	beq	r2,zero,805be8 <___vfprintf_internal_r+0x1a90>
  805e40:	d8800817 	ldw	r2,32(sp)
  805e44:	003f7706 	br	805c24 <___vfprintf_internal_r+0x1acc>
  805e48:	d9c14615 	stw	r7,1304(sp)
  805e4c:	38004d16 	blt	r7,zero,805f84 <___vfprintf_internal_r+0x1e2c>
  805e50:	dc814815 	stw	r18,1312(sp)
  805e54:	d8014715 	stw	zero,1308(sp)
  805e58:	003b6106 	br	804be0 <___vfprintf_internal_r+0xa88>
  805e5c:	d9015017 	ldw	r4,1344(sp)
  805e60:	d8800604 	addi	r2,sp,24
  805e64:	d8800115 	stw	r2,4(sp)
  805e68:	d8c00704 	addi	r3,sp,28
  805e6c:	d8800804 	addi	r2,sp,32
  805e70:	800b883a 	mov	r5,r16
  805e74:	880d883a 	mov	r6,r17
  805e78:	01c000c4 	movi	r7,3
  805e7c:	d8c00215 	stw	r3,8(sp)
  805e80:	d8800315 	stw	r2,12(sp)
  805e84:	dcc00015 	stw	r19,0(sp)
  805e88:	9829883a 	mov	r20,r19
  805e8c:	0807be40 	call	807be4 <_dtoa_r>
  805e90:	d8814215 	stw	r2,1288(sp)
  805e94:	003f5106 	br	805bdc <___vfprintf_internal_r+0x1a84>
  805e98:	d8c14317 	ldw	r3,1292(sp)
  805e9c:	d9014417 	ldw	r4,1296(sp)
  805ea0:	07000b44 	movi	fp,45
  805ea4:	1821883a 	mov	r16,r3
  805ea8:	2460003c 	xorhi	r17,r4,32768
  805eac:	003f3106 	br	805b74 <___vfprintf_internal_r+0x1a1c>
  805eb0:	9d000044 	addi	r20,r19,1
  805eb4:	003f3906 	br	805b9c <___vfprintf_internal_r+0x1a44>
  805eb8:	983f251e 	bne	r19,zero,805b50 <___vfprintf_internal_r+0x19f8>
  805ebc:	04c00044 	movi	r19,1
  805ec0:	003f2306 	br	805b50 <___vfprintf_internal_r+0x19f8>
  805ec4:	04c00184 	movi	r19,6
  805ec8:	003f2106 	br	805b50 <___vfprintf_internal_r+0x19f8>
  805ecc:	d8014615 	stw	zero,1304(sp)
  805ed0:	003eee06 	br	805a8c <___vfprintf_internal_r+0x1934>
  805ed4:	200f883a 	mov	r7,r4
  805ed8:	0100370e 	bge	zero,r4,805fb8 <___vfprintf_internal_r+0x1e60>
  805edc:	9800031e 	bne	r19,zero,805eec <___vfprintf_internal_r+0x1d94>
  805ee0:	d9814d17 	ldw	r6,1332(sp)
  805ee4:	3080004c 	andi	r2,r6,1
  805ee8:	103fb726 	beq	r2,zero,805dc8 <___vfprintf_internal_r+0x1c70>
  805eec:	20800044 	addi	r2,r4,1
  805ef0:	98a7883a 	add	r19,r19,r2
  805ef4:	dcc14615 	stw	r19,1304(sp)
  805ef8:	980f883a 	mov	r7,r19
  805efc:	983f800e 	bge	r19,zero,805d00 <___vfprintf_internal_r+0x1ba8>
  805f00:	003fb306 	br	805dd0 <___vfprintf_internal_r+0x1c78>
  805f04:	d9814e17 	ldw	r6,1336(sp)
  805f08:	31bfff84 	addi	r6,r6,-2
  805f0c:	d9814e15 	stw	r6,1336(sp)
  805f10:	003f4c06 	br	805c44 <___vfprintf_internal_r+0x1aec>
  805f14:	0100180e 	bge	zero,r4,805f78 <___vfprintf_internal_r+0x1e20>
  805f18:	00800044 	movi	r2,1
  805f1c:	1485883a 	add	r2,r2,r18
  805f20:	d8814615 	stw	r2,1304(sp)
  805f24:	100f883a 	mov	r7,r2
  805f28:	103f750e 	bge	r2,zero,805d00 <___vfprintf_internal_r+0x1ba8>
  805f2c:	003fa806 	br	805dd0 <___vfprintf_internal_r+0x1c78>
  805f30:	80c00c04 	addi	r3,r16,48
  805f34:	00800c04 	movi	r2,48
  805f38:	d8c009c5 	stb	r3,39(sp)
  805f3c:	d9800904 	addi	r6,sp,36
  805f40:	d8c00a04 	addi	r3,sp,40
  805f44:	d8800985 	stb	r2,38(sp)
  805f48:	003f6506 	br	805ce0 <___vfprintf_internal_r+0x1b88>
  805f4c:	d9014d17 	ldw	r4,1332(sp)
  805f50:	2084703a 	and	r2,r4,r2
  805f54:	103f9c26 	beq	r2,zero,805dc8 <___vfprintf_internal_r+0x1c70>
  805f58:	003f6606 	br	805cf4 <___vfprintf_internal_r+0x1b9c>
  805f5c:	d9800904 	addi	r6,sp,36
  805f60:	d8c00984 	addi	r3,sp,38
  805f64:	003f5e06 	br	805ce0 <___vfprintf_internal_r+0x1b88>
  805f68:	00800b44 	movi	r2,45
  805f6c:	0121c83a 	sub	r16,zero,r4
  805f70:	d8800945 	stb	r2,37(sp)
  805f74:	003f3d06 	br	805c6c <___vfprintf_internal_r+0x1b14>
  805f78:	00800084 	movi	r2,2
  805f7c:	1105c83a 	sub	r2,r2,r4
  805f80:	003fe606 	br	805f1c <___vfprintf_internal_r+0x1dc4>
  805f84:	d8014615 	stw	zero,1304(sp)
  805f88:	dc814815 	stw	r18,1312(sp)
  805f8c:	003fb106 	br	805e54 <___vfprintf_internal_r+0x1cfc>
  805f90:	000d883a 	mov	r6,zero
  805f94:	000f883a 	mov	r7,zero
  805f98:	8009883a 	mov	r4,r16
  805f9c:	880b883a 	mov	r5,r17
  805fa0:	080f3840 	call	80f384 <__nedf2>
  805fa4:	103f9f26 	beq	r2,zero,805e24 <___vfprintf_internal_r+0x1ccc>
  805fa8:	00800044 	movi	r2,1
  805fac:	1509c83a 	sub	r4,r2,r20
  805fb0:	d9000615 	stw	r4,24(sp)
  805fb4:	003f9b06 	br	805e24 <___vfprintf_internal_r+0x1ccc>
  805fb8:	98000d1e 	bne	r19,zero,805ff0 <___vfprintf_internal_r+0x1e98>
  805fbc:	d8c14d17 	ldw	r3,1332(sp)
  805fc0:	1880004c 	andi	r2,r3,1
  805fc4:	10000a1e 	bne	r2,zero,805ff0 <___vfprintf_internal_r+0x1e98>
  805fc8:	01000044 	movi	r4,1
  805fcc:	200f883a 	mov	r7,r4
  805fd0:	d9014615 	stw	r4,1304(sp)
  805fd4:	003f4a06 	br	805d00 <___vfprintf_internal_r+0x1ba8>
  805fd8:	3cc00017 	ldw	r19,0(r7)
  805fdc:	39c00104 	addi	r7,r7,4
  805fe0:	983d0e0e 	bge	r19,zero,80541c <___vfprintf_internal_r+0x12c4>
  805fe4:	b8c00007 	ldb	r3,0(r23)
  805fe8:	04ffffc4 	movi	r19,-1
  805fec:	0038d906 	br	804354 <___vfprintf_internal_r+0x1fc>
  805ff0:	9cc00084 	addi	r19,r19,2
  805ff4:	dcc14615 	stw	r19,1304(sp)
  805ff8:	980f883a 	mov	r7,r19
  805ffc:	983f400e 	bge	r19,zero,805d00 <___vfprintf_internal_r+0x1ba8>
  806000:	003f7306 	br	805dd0 <___vfprintf_internal_r+0x1c78>

00806004 <__vfprintf_internal>:
  806004:	00802074 	movhi	r2,129
  806008:	109b9704 	addi	r2,r2,28252
  80600c:	2013883a 	mov	r9,r4
  806010:	11000017 	ldw	r4,0(r2)
  806014:	2805883a 	mov	r2,r5
  806018:	300f883a 	mov	r7,r6
  80601c:	480b883a 	mov	r5,r9
  806020:	100d883a 	mov	r6,r2
  806024:	08041581 	jmpi	804158 <___vfprintf_internal_r>

00806028 <__svfscanf_r>:
  806028:	deff4e04 	addi	sp,sp,-712
  80602c:	dd80ae15 	stw	r22,696(sp)
  806030:	dd00ac15 	stw	r20,688(sp)
  806034:	dc40a915 	stw	r17,676(sp)
  806038:	dc00a815 	stw	r16,672(sp)
  80603c:	dfc0b115 	stw	ra,708(sp)
  806040:	df00b015 	stw	fp,704(sp)
  806044:	ddc0af15 	stw	r23,700(sp)
  806048:	dd40ad15 	stw	r21,692(sp)
  80604c:	dcc0ab15 	stw	r19,684(sp)
  806050:	dc80aa15 	stw	r18,680(sp)
  806054:	202d883a 	mov	r22,r4
  806058:	2821883a 	mov	r16,r5
  80605c:	d9c0a415 	stw	r7,656(sp)
  806060:	3029883a 	mov	r20,r6
  806064:	d800a215 	stw	zero,648(sp)
  806068:	0023883a 	mov	r17,zero
  80606c:	d800a115 	stw	zero,644(sp)
  806070:	d800a015 	stw	zero,640(sp)
  806074:	a1000007 	ldb	r4,0(r20)
  806078:	d9000115 	stw	r4,4(sp)
  80607c:	20001f26 	beq	r4,zero,8060fc <__svfscanf_r+0xd4>
  806080:	04802074 	movhi	r18,129
  806084:	949b9b04 	addi	r18,r18,28268
  806088:	91800017 	ldw	r6,0(r18)
  80608c:	a5000044 	addi	r20,r20,1
  806090:	3107883a 	add	r3,r6,r4
  806094:	18800003 	ldbu	r2,0(r3)
  806098:	1080020c 	andi	r2,r2,8
  80609c:	10002426 	beq	r2,zero,806130 <__svfscanf_r+0x108>
  8060a0:	80c00117 	ldw	r3,4(r16)
  8060a4:	00c00e0e 	bge	zero,r3,8060e0 <__svfscanf_r+0xb8>
  8060a8:	81400017 	ldw	r5,0(r16)
  8060ac:	90800017 	ldw	r2,0(r18)
  8060b0:	28c00003 	ldbu	r3,0(r5)
  8060b4:	1887883a 	add	r3,r3,r2
  8060b8:	19000003 	ldbu	r4,0(r3)
  8060bc:	2100020c 	andi	r4,r4,8
  8060c0:	203fec26 	beq	r4,zero,806074 <__svfscanf_r+0x4c>
  8060c4:	80c00117 	ldw	r3,4(r16)
  8060c8:	29800044 	addi	r6,r5,1
  8060cc:	8c400044 	addi	r17,r17,1
  8060d0:	18ffffc4 	addi	r3,r3,-1
  8060d4:	81800015 	stw	r6,0(r16)
  8060d8:	80c00115 	stw	r3,4(r16)
  8060dc:	00fff216 	blt	zero,r3,8060a8 <__svfscanf_r+0x80>
  8060e0:	b009883a 	mov	r4,r22
  8060e4:	800b883a 	mov	r5,r16
  8060e8:	0803aa80 	call	803aa8 <__srefill_r>
  8060ec:	103fee26 	beq	r2,zero,8060a8 <__svfscanf_r+0x80>
  8060f0:	a1000007 	ldb	r4,0(r20)
  8060f4:	d9000115 	stw	r4,4(sp)
  8060f8:	203fe11e 	bne	r4,zero,806080 <__svfscanf_r+0x58>
  8060fc:	d880a217 	ldw	r2,648(sp)
  806100:	dfc0b117 	ldw	ra,708(sp)
  806104:	df00b017 	ldw	fp,704(sp)
  806108:	ddc0af17 	ldw	r23,700(sp)
  80610c:	dd80ae17 	ldw	r22,696(sp)
  806110:	dd40ad17 	ldw	r21,692(sp)
  806114:	dd00ac17 	ldw	r20,688(sp)
  806118:	dcc0ab17 	ldw	r19,684(sp)
  80611c:	dc80aa17 	ldw	r18,680(sp)
  806120:	dc40a917 	ldw	r17,676(sp)
  806124:	dc00a817 	ldw	r16,672(sp)
  806128:	dec0b204 	addi	sp,sp,712
  80612c:	f800283a 	ret
  806130:	00800944 	movi	r2,37
  806134:	20801626 	beq	r4,r2,806190 <__svfscanf_r+0x168>
  806138:	80800117 	ldw	r2,4(r16)
  80613c:	00800b0e 	bge	zero,r2,80616c <__svfscanf_r+0x144>
  806140:	81000017 	ldw	r4,0(r16)
  806144:	a0ffffc7 	ldb	r3,-1(r20)
  806148:	20800003 	ldbu	r2,0(r4)
  80614c:	10ffeb1e 	bne	r2,r3,8060fc <__svfscanf_r+0xd4>
  806150:	80c00117 	ldw	r3,4(r16)
  806154:	21800044 	addi	r6,r4,1
  806158:	8c400044 	addi	r17,r17,1
  80615c:	18ffffc4 	addi	r3,r3,-1
  806160:	80c00115 	stw	r3,4(r16)
  806164:	81800015 	stw	r6,0(r16)
  806168:	003fc206 	br	806074 <__svfscanf_r+0x4c>
  80616c:	b009883a 	mov	r4,r22
  806170:	800b883a 	mov	r5,r16
  806174:	0803aa80 	call	803aa8 <__srefill_r>
  806178:	103ff126 	beq	r2,zero,806140 <__svfscanf_r+0x118>
  80617c:	d900a217 	ldw	r4,648(sp)
  806180:	2004c91e 	bne	r4,zero,8074a8 <__svfscanf_r+0x1480>
  806184:	00bfffc4 	movi	r2,-1
  806188:	d880a215 	stw	r2,648(sp)
  80618c:	003fdb06 	br	8060fc <__svfscanf_r+0xd4>
  806190:	d800a315 	stw	zero,652(sp)
  806194:	0027883a 	mov	r19,zero
  806198:	a0c00003 	ldbu	r3,0(r20)
  80619c:	00801e04 	movi	r2,120
  8061a0:	a5000044 	addi	r20,r20,1
  8061a4:	19403fcc 	andi	r5,r3,255
  8061a8:	2940201c 	xori	r5,r5,128
  8061ac:	297fe004 	addi	r5,r5,-128
  8061b0:	10c08036 	bltu	r2,r3,8063b4 <__svfscanf_r+0x38c>
  8061b4:	18c5883a 	add	r2,r3,r3
  8061b8:	1085883a 	add	r2,r2,r2
  8061bc:	00c02034 	movhi	r3,128
  8061c0:	18d87404 	addi	r3,r3,25040
  8061c4:	10c5883a 	add	r2,r2,r3
  8061c8:	11000017 	ldw	r4,0(r2)
  8061cc:	2000683a 	jmp	r4
  8061d0:	00806184 	movi	r2,390
  8061d4:	008063b4 	movhi	r2,398
  8061d8:	008063b4 	movhi	r2,398
  8061dc:	008063b4 	movhi	r2,398
  8061e0:	008063b4 	movhi	r2,398
  8061e4:	008063b4 	movhi	r2,398
  8061e8:	008063b4 	movhi	r2,398
  8061ec:	008063b4 	movhi	r2,398
  8061f0:	008063b4 	movhi	r2,398
  8061f4:	008063b4 	movhi	r2,398
  8061f8:	008063b4 	movhi	r2,398
  8061fc:	008063b4 	movhi	r2,398
  806200:	008063b4 	movhi	r2,398
  806204:	008063b4 	movhi	r2,398
  806208:	008063b4 	movhi	r2,398
  80620c:	008063b4 	movhi	r2,398
  806210:	008063b4 	movhi	r2,398
  806214:	008063b4 	movhi	r2,398
  806218:	008063b4 	movhi	r2,398
  80621c:	008063b4 	movhi	r2,398
  806220:	008063b4 	movhi	r2,398
  806224:	008063b4 	movhi	r2,398
  806228:	008063b4 	movhi	r2,398
  80622c:	008063b4 	movhi	r2,398
  806230:	008063b4 	movhi	r2,398
  806234:	008063b4 	movhi	r2,398
  806238:	008063b4 	movhi	r2,398
  80623c:	008063b4 	movhi	r2,398
  806240:	008063b4 	movhi	r2,398
  806244:	008063b4 	movhi	r2,398
  806248:	008063b4 	movhi	r2,398
  80624c:	008063b4 	movhi	r2,398
  806250:	008063b4 	movhi	r2,398
  806254:	008063b4 	movhi	r2,398
  806258:	008063b4 	movhi	r2,398
  80625c:	008063b4 	movhi	r2,398
  806260:	008063b4 	movhi	r2,398
  806264:	00806138 	rdprs	r2,zero,388
  806268:	008063b4 	movhi	r2,398
  80626c:	008063b4 	movhi	r2,398
  806270:	008063b4 	movhi	r2,398
  806274:	008063b4 	movhi	r2,398
  806278:	008073d8 	cmpnei	r2,zero,463
  80627c:	008063b4 	movhi	r2,398
  806280:	008063b4 	movhi	r2,398
  806284:	008063b4 	movhi	r2,398
  806288:	008063b4 	movhi	r2,398
  80628c:	008063b4 	movhi	r2,398
  806290:	00806dd4 	movui	r2,439
  806294:	00806dd4 	movui	r2,439
  806298:	00806dd4 	movui	r2,439
  80629c:	00806dd4 	movui	r2,439
  8062a0:	00806dd4 	movui	r2,439
  8062a4:	00806dd4 	movui	r2,439
  8062a8:	00806dd4 	movui	r2,439
  8062ac:	00806dd4 	movui	r2,439
  8062b0:	00806dd4 	movui	r2,439
  8062b4:	00806dd4 	movui	r2,439
  8062b8:	008063b4 	movhi	r2,398
  8062bc:	008063b4 	movhi	r2,398
  8062c0:	008063b4 	movhi	r2,398
  8062c4:	008063b4 	movhi	r2,398
  8062c8:	008063b4 	movhi	r2,398
  8062cc:	008063b4 	movhi	r2,398
  8062d0:	008063b4 	movhi	r2,398
  8062d4:	008063b4 	movhi	r2,398
  8062d8:	008063b4 	movhi	r2,398
  8062dc:	008063b4 	movhi	r2,398
  8062e0:	00807554 	movui	r2,469
  8062e4:	0080754c 	andi	r2,zero,469
  8062e8:	008063b4 	movhi	r2,398
  8062ec:	0080754c 	andi	r2,zero,469
  8062f0:	008063b4 	movhi	r2,398
  8062f4:	008063b4 	movhi	r2,398
  8062f8:	008063b4 	movhi	r2,398
  8062fc:	008063b4 	movhi	r2,398
  806300:	008075e4 	muli	r2,zero,471
  806304:	008063b4 	movhi	r2,398
  806308:	008063b4 	movhi	r2,398
  80630c:	0080759c 	xori	r2,zero,470
  806310:	008063b4 	movhi	r2,398
  806314:	008063b4 	movhi	r2,398
  806318:	008063b4 	movhi	r2,398
  80631c:	008063b4 	movhi	r2,398
  806320:	008063b4 	movhi	r2,398
  806324:	008063b4 	movhi	r2,398
  806328:	008063b4 	movhi	r2,398
  80632c:	008063b4 	movhi	r2,398
  806330:	008073e0 	cmpeqi	r2,zero,463
  806334:	008063b4 	movhi	r2,398
  806338:	008063b4 	movhi	r2,398
  80633c:	00807580 	call	80758 <__reset-0x77f8a8>
  806340:	008063b4 	movhi	r2,398
  806344:	008063b4 	movhi	r2,398
  806348:	008063b4 	movhi	r2,398
  80634c:	008063b4 	movhi	r2,398
  806350:	008063b4 	movhi	r2,398
  806354:	008063b4 	movhi	r2,398
  806358:	008063b4 	movhi	r2,398
  80635c:	00807574 	movhi	r2,469
  806360:	00807558 	cmpnei	r2,zero,469
  806364:	0080754c 	andi	r2,zero,469
  806368:	0080754c 	andi	r2,zero,469
  80636c:	0080754c 	andi	r2,zero,469
  806370:	00807544 	movi	r2,469
  806374:	00807638 	rdprs	r2,zero,472
  806378:	008063b4 	movhi	r2,398
  80637c:	008063b4 	movhi	r2,398
  806380:	00807624 	muli	r2,zero,472
  806384:	008063b4 	movhi	r2,398
  806388:	008075bc 	xorhi	r2,zero,470
  80638c:	008075a0 	cmpeqi	r2,zero,470
  806390:	008075f4 	movhi	r2,471
  806394:	008063b4 	movhi	r2,398
  806398:	008063b4 	movhi	r2,398
  80639c:	008075ec 	andhi	r2,zero,471
  8063a0:	008063b4 	movhi	r2,398
  8063a4:	00806924 	muli	r2,zero,420
  8063a8:	008063b4 	movhi	r2,398
  8063ac:	008063b4 	movhi	r2,398
  8063b0:	008073e0 	cmpeqi	r2,zero,463
  8063b4:	2987883a 	add	r3,r5,r6
  8063b8:	18800003 	ldbu	r2,0(r3)
  8063bc:	1080004c 	andi	r2,r2,1
  8063c0:	1005003a 	cmpeq	r2,r2,zero
  8063c4:	10002c26 	beq	r2,zero,806478 <__svfscanf_r+0x450>
  8063c8:	01002074 	movhi	r4,129
  8063cc:	21300604 	addi	r4,r4,-16360
  8063d0:	00800284 	movi	r2,10
  8063d4:	d900a015 	stw	r4,640(sp)
  8063d8:	054000c4 	movi	r21,3
  8063dc:	d880a115 	stw	r2,644(sp)
  8063e0:	80c00117 	ldw	r3,4(r16)
  8063e4:	00c14a0e 	bge	zero,r3,806910 <__svfscanf_r+0x8e8>
  8063e8:	9880100c 	andi	r2,r19,64
  8063ec:	10001326 	beq	r2,zero,80643c <__svfscanf_r+0x414>
  8063f0:	00800104 	movi	r2,4
  8063f4:	157f1f36 	bltu	r2,r21,806074 <__svfscanf_r+0x4c>
  8063f8:	ad45883a 	add	r2,r21,r21
  8063fc:	1085883a 	add	r2,r2,r2
  806400:	00c02034 	movhi	r3,128
  806404:	18d90504 	addi	r3,r3,25620
  806408:	10c5883a 	add	r2,r2,r3
  80640c:	11000017 	ldw	r4,0(r2)
  806410:	2000683a 	jmp	r4
  806414:	00806480 	call	80648 <__reset-0x77f9b8>
  806418:	0080658c 	andi	r2,zero,406
  80641c:	00806600 	call	80660 <__reset-0x77f9a0>
  806420:	008068ec 	andhi	r2,zero,419
  806424:	00806738 	rdprs	r2,zero,412
  806428:	b009883a 	mov	r4,r22
  80642c:	800b883a 	mov	r5,r16
  806430:	0803aa80 	call	803aa8 <__srefill_r>
  806434:	103f511e 	bne	r2,zero,80617c <__svfscanf_r+0x154>
  806438:	8c400044 	addi	r17,r17,1
  80643c:	81400017 	ldw	r5,0(r16)
  806440:	90800017 	ldw	r2,0(r18)
  806444:	28c00003 	ldbu	r3,0(r5)
  806448:	1887883a 	add	r3,r3,r2
  80644c:	19000003 	ldbu	r4,0(r3)
  806450:	2100020c 	andi	r4,r4,8
  806454:	203fe626 	beq	r4,zero,8063f0 <__svfscanf_r+0x3c8>
  806458:	80c00117 	ldw	r3,4(r16)
  80645c:	18ffffc4 	addi	r3,r3,-1
  806460:	80c00115 	stw	r3,4(r16)
  806464:	00fff00e 	bge	zero,r3,806428 <__svfscanf_r+0x400>
  806468:	29800044 	addi	r6,r5,1
  80646c:	8c400044 	addi	r17,r17,1
  806470:	81800015 	stw	r6,0(r16)
  806474:	003ff106 	br	80643c <__svfscanf_r+0x414>
  806478:	9cc00054 	ori	r19,r19,1
  80647c:	003fd206 	br	8063c8 <__svfscanf_r+0x3a0>
  806480:	d8c0a317 	ldw	r3,652(sp)
  806484:	1800021e 	bne	r3,zero,806490 <__svfscanf_r+0x468>
  806488:	01000044 	movi	r4,1
  80648c:	d900a315 	stw	r4,652(sp)
  806490:	9880004c 	andi	r2,r19,1
  806494:	1005003a 	cmpeq	r2,r2,zero
  806498:	1003d91e 	bne	r2,zero,807400 <__svfscanf_r+0x13d8>
  80649c:	9d40040c 	andi	r21,r19,16
  8064a0:	a839003a 	cmpeq	fp,r21,zero
  8064a4:	e0042526 	beq	fp,zero,80753c <__svfscanf_r+0x1514>
  8064a8:	d880a417 	ldw	r2,656(sp)
  8064ac:	14c00017 	ldw	r19,0(r2)
  8064b0:	10800104 	addi	r2,r2,4
  8064b4:	d880a415 	stw	r2,656(sp)
  8064b8:	d8c0a317 	ldw	r3,652(sp)
  8064bc:	18041a26 	beq	r3,zero,807528 <__svfscanf_r+0x1500>
  8064c0:	01002074 	movhi	r4,129
  8064c4:	211b9c04 	addi	r4,r4,28272
  8064c8:	20800017 	ldw	r2,0(r4)
  8064cc:	103f2b26 	beq	r2,zero,80617c <__svfscanf_r+0x154>
  8064d0:	d8804404 	addi	r2,sp,272
  8064d4:	0025883a 	mov	r18,zero
  8064d8:	d880a615 	stw	r2,664(sp)
  8064dc:	05ffffc4 	movi	r23,-1
  8064e0:	80800017 	ldw	r2,0(r16)
  8064e4:	80c00117 	ldw	r3,4(r16)
  8064e8:	d900a617 	ldw	r4,664(sp)
  8064ec:	12000003 	ldbu	r8,0(r2)
  8064f0:	18ffffc4 	addi	r3,r3,-1
  8064f4:	11800044 	addi	r6,r2,1
  8064f8:	248f883a 	add	r7,r4,r18
  8064fc:	80c00115 	stw	r3,4(r16)
  806500:	81800015 	stw	r6,0(r16)
  806504:	3a000005 	stb	r8,0(r7)
  806508:	d9000204 	addi	r4,sp,8
  80650c:	000b883a 	mov	r5,zero
  806510:	01800204 	movi	r6,8
  806514:	080332c0 	call	80332c <memset>
  806518:	d980a617 	ldw	r6,664(sp)
  80651c:	94800044 	addi	r18,r18,1
  806520:	d8800204 	addi	r2,sp,8
  806524:	b009883a 	mov	r4,r22
  806528:	980b883a 	mov	r5,r19
  80652c:	900f883a 	mov	r7,r18
  806530:	d8800015 	stw	r2,0(sp)
  806534:	080964c0 	call	80964c <_mbrtowc_r>
  806538:	1007883a 	mov	r3,r2
  80653c:	15ff0f26 	beq	r2,r23,80617c <__svfscanf_r+0x154>
  806540:	1003f11e 	bne	r2,zero,807508 <__svfscanf_r+0x14e0>
  806544:	a800011e 	bne	r21,zero,80654c <__svfscanf_r+0x524>
  806548:	98000015 	stw	zero,0(r19)
  80654c:	d8c0a317 	ldw	r3,652(sp)
  806550:	8ca3883a 	add	r17,r17,r18
  806554:	18ffffc4 	addi	r3,r3,-1
  806558:	d8c0a315 	stw	r3,652(sp)
  80655c:	e0000126 	beq	fp,zero,806564 <__svfscanf_r+0x53c>
  806560:	9cc00104 	addi	r19,r19,4
  806564:	0025883a 	mov	r18,zero
  806568:	80c00117 	ldw	r3,4(r16)
  80656c:	00c3e90e 	bge	zero,r3,807514 <__svfscanf_r+0x14ec>
  806570:	d900a317 	ldw	r4,652(sp)
  806574:	2003ec26 	beq	r4,zero,807528 <__svfscanf_r+0x1500>
  806578:	00c02074 	movhi	r3,129
  80657c:	18db9c04 	addi	r3,r3,28272
  806580:	18800017 	ldw	r2,0(r3)
  806584:	90bfd61e 	bne	r18,r2,8064e0 <__svfscanf_r+0x4b8>
  806588:	003efc06 	br	80617c <__svfscanf_r+0x154>
  80658c:	d880a317 	ldw	r2,652(sp)
  806590:	1000021e 	bne	r2,zero,80659c <__svfscanf_r+0x574>
  806594:	00ffffc4 	movi	r3,-1
  806598:	d8c0a315 	stw	r3,652(sp)
  80659c:	9880040c 	andi	r2,r19,16
  8065a0:	10036526 	beq	r2,zero,807338 <__svfscanf_r+0x1310>
  8065a4:	0027883a 	mov	r19,zero
  8065a8:	dd400404 	addi	r21,sp,16
  8065ac:	81000017 	ldw	r4,0(r16)
  8065b0:	20800003 	ldbu	r2,0(r4)
  8065b4:	a885883a 	add	r2,r21,r2
  8065b8:	10c00007 	ldb	r3,0(r2)
  8065bc:	1803be26 	beq	r3,zero,8074b8 <__svfscanf_r+0x1490>
  8065c0:	80c00117 	ldw	r3,4(r16)
  8065c4:	21800044 	addi	r6,r4,1
  8065c8:	d900a317 	ldw	r4,652(sp)
  8065cc:	18ffffc4 	addi	r3,r3,-1
  8065d0:	9cc00044 	addi	r19,r19,1
  8065d4:	81800015 	stw	r6,0(r16)
  8065d8:	80c00115 	stw	r3,4(r16)
  8065dc:	24c3b626 	beq	r4,r19,8074b8 <__svfscanf_r+0x1490>
  8065e0:	00fff216 	blt	zero,r3,8065ac <__svfscanf_r+0x584>
  8065e4:	b009883a 	mov	r4,r22
  8065e8:	800b883a 	mov	r5,r16
  8065ec:	0803aa80 	call	803aa8 <__srefill_r>
  8065f0:	103fee26 	beq	r2,zero,8065ac <__svfscanf_r+0x584>
  8065f4:	983ee126 	beq	r19,zero,80617c <__svfscanf_r+0x154>
  8065f8:	8ce3883a 	add	r17,r17,r19
  8065fc:	003e9d06 	br	806074 <__svfscanf_r+0x4c>
  806600:	d900a317 	ldw	r4,652(sp)
  806604:	2000021e 	bne	r4,zero,806610 <__svfscanf_r+0x5e8>
  806608:	00bfffc4 	movi	r2,-1
  80660c:	d880a315 	stw	r2,652(sp)
  806610:	9880004c 	andi	r2,r19,1
  806614:	1005003a 	cmpeq	r2,r2,zero
  806618:	1001f41e 	bne	r2,zero,806dec <__svfscanf_r+0xdc4>
  80661c:	9dc0040c 	andi	r23,r19,16
  806620:	b807003a 	cmpeq	r3,r23,zero
  806624:	d8c0a515 	stw	r3,660(sp)
  806628:	1803b21e 	bne	r3,zero,8074f4 <__svfscanf_r+0x14cc>
  80662c:	dd400104 	addi	r21,sp,4
  806630:	0027883a 	mov	r19,zero
  806634:	073fffc4 	movi	fp,-1
  806638:	81400017 	ldw	r5,0(r16)
  80663c:	90800017 	ldw	r2,0(r18)
  806640:	29c00003 	ldbu	r7,0(r5)
  806644:	38c03fcc 	andi	r3,r7,255
  806648:	1887883a 	add	r3,r3,r2
  80664c:	19000003 	ldbu	r4,0(r3)
  806650:	2100020c 	andi	r4,r4,8
  806654:	2000321e 	bne	r4,zero,806720 <__svfscanf_r+0x6f8>
  806658:	d8c0a317 	ldw	r3,652(sp)
  80665c:	18003026 	beq	r3,zero,806720 <__svfscanf_r+0x6f8>
  806660:	00802074 	movhi	r2,129
  806664:	109b9c04 	addi	r2,r2,28272
  806668:	10c00017 	ldw	r3,0(r2)
  80666c:	98fec326 	beq	r19,r3,80617c <__svfscanf_r+0x154>
  806670:	d8c04404 	addi	r3,sp,272
  806674:	80800117 	ldw	r2,4(r16)
  806678:	d8c0a615 	stw	r3,664(sp)
  80667c:	d900a617 	ldw	r4,664(sp)
  806680:	10ffffc4 	addi	r3,r2,-1
  806684:	29800044 	addi	r6,r5,1
  806688:	80c00115 	stw	r3,4(r16)
  80668c:	24c5883a 	add	r2,r4,r19
  806690:	81800015 	stw	r6,0(r16)
  806694:	d9000204 	addi	r4,sp,8
  806698:	000b883a 	mov	r5,zero
  80669c:	01800204 	movi	r6,8
  8066a0:	11c00005 	stb	r7,0(r2)
  8066a4:	080332c0 	call	80332c <memset>
  8066a8:	d980a617 	ldw	r6,664(sp)
  8066ac:	9cc00044 	addi	r19,r19,1
  8066b0:	d8800204 	addi	r2,sp,8
  8066b4:	b009883a 	mov	r4,r22
  8066b8:	a80b883a 	mov	r5,r21
  8066bc:	980f883a 	mov	r7,r19
  8066c0:	d8800015 	stw	r2,0(sp)
  8066c4:	080964c0 	call	80964c <_mbrtowc_r>
  8066c8:	1007883a 	mov	r3,r2
  8066cc:	173eab26 	beq	r2,fp,80617c <__svfscanf_r+0x154>
  8066d0:	1003851e 	bne	r2,zero,8074e8 <__svfscanf_r+0x14c0>
  8066d4:	a8000015 	stw	zero,0(r21)
  8066d8:	a9000017 	ldw	r4,0(r21)
  8066dc:	08094e40 	call	8094e4 <iswspace>
  8066e0:	1003781e 	bne	r2,zero,8074c4 <__svfscanf_r+0x149c>
  8066e4:	d900a317 	ldw	r4,652(sp)
  8066e8:	d880a517 	ldw	r2,660(sp)
  8066ec:	8ce3883a 	add	r17,r17,r19
  8066f0:	213fffc4 	addi	r4,r4,-1
  8066f4:	d900a315 	stw	r4,652(sp)
  8066f8:	10000126 	beq	r2,zero,806700 <__svfscanf_r+0x6d8>
  8066fc:	ad400104 	addi	r21,r21,4
  806700:	0027883a 	mov	r19,zero
  806704:	80c00117 	ldw	r3,4(r16)
  806708:	00ffcb16 	blt	zero,r3,806638 <__svfscanf_r+0x610>
  80670c:	b009883a 	mov	r4,r22
  806710:	800b883a 	mov	r5,r16
  806714:	0803aa80 	call	803aa8 <__srefill_r>
  806718:	103fc726 	beq	r2,zero,806638 <__svfscanf_r+0x610>
  80671c:	983e971e 	bne	r19,zero,80617c <__svfscanf_r+0x154>
  806720:	b83e541e 	bne	r23,zero,806074 <__svfscanf_r+0x4c>
  806724:	d900a217 	ldw	r4,648(sp)
  806728:	a8000015 	stw	zero,0(r21)
  80672c:	21000044 	addi	r4,r4,1
  806730:	d900a215 	stw	r4,648(sp)
  806734:	003e4f06 	br	806074 <__svfscanf_r+0x4c>
  806738:	d900a317 	ldw	r4,652(sp)
  80673c:	00805704 	movi	r2,348
  806740:	20ffffc4 	addi	r3,r4,-1
  806744:	10c1ed2e 	bgeu	r2,r3,806efc <__svfscanf_r+0xed4>
  806748:	00805744 	movi	r2,349
  80674c:	21bfa8c4 	addi	r6,r4,-349
  806750:	9d41e014 	ori	r21,r19,1920
  806754:	d880a315 	stw	r2,652(sp)
  806758:	d8c04404 	addi	r3,sp,272
  80675c:	d8c0a615 	stw	r3,664(sp)
  806760:	182f883a 	mov	r23,r3
  806764:	d8009f15 	stw	zero,636(sp)
  806768:	d8009e15 	stw	zero,632(sp)
  80676c:	d8009d15 	stw	zero,628(sp)
  806770:	d8009c15 	stw	zero,624(sp)
  806774:	0039883a 	mov	fp,zero
  806778:	0025883a 	mov	r18,zero
  80677c:	80800017 	ldw	r2,0(r16)
  806780:	11400003 	ldbu	r5,0(r2)
  806784:	00801384 	movi	r2,78
  806788:	28fff544 	addi	r3,r5,-43
  80678c:	18c03fcc 	andi	r3,r3,255
  806790:	10c07d36 	bltu	r2,r3,806988 <__svfscanf_r+0x960>
  806794:	18c5883a 	add	r2,r3,r3
  806798:	1085883a 	add	r2,r2,r2
  80679c:	00c02034 	movhi	r3,128
  8067a0:	18d9ec04 	addi	r3,r3,26544
  8067a4:	10c5883a 	add	r2,r2,r3
  8067a8:	11000017 	ldw	r4,0(r2)
  8067ac:	2000683a 	jmp	r4
  8067b0:	00806940 	call	80694 <__reset-0x77f96c>
  8067b4:	00806988 	cmpgei	r2,zero,422
  8067b8:	00806940 	call	80694 <__reset-0x77f96c>
  8067bc:	00806ad4 	movui	r2,427
  8067c0:	00806988 	cmpgei	r2,zero,422
  8067c4:	00806b0c 	andi	r2,zero,428
  8067c8:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067cc:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067d0:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067d4:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067d8:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067dc:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067e0:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067e4:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067e8:	00806b40 	call	806b4 <__reset-0x77f94c>
  8067ec:	00806988 	cmpgei	r2,zero,422
  8067f0:	00806988 	cmpgei	r2,zero,422
  8067f4:	00806988 	cmpgei	r2,zero,422
  8067f8:	00806988 	cmpgei	r2,zero,422
  8067fc:	00806988 	cmpgei	r2,zero,422
  806800:	00806988 	cmpgei	r2,zero,422
  806804:	00806988 	cmpgei	r2,zero,422
  806808:	00806b60 	cmpeqi	r2,zero,429
  80680c:	00806988 	cmpgei	r2,zero,422
  806810:	00806988 	cmpgei	r2,zero,422
  806814:	00806988 	cmpgei	r2,zero,422
  806818:	00806b70 	cmpltui	r2,zero,429
  80681c:	00806c0c 	andi	r2,zero,432
  806820:	00806988 	cmpgei	r2,zero,422
  806824:	00806988 	cmpgei	r2,zero,422
  806828:	00806c28 	cmpgeui	r2,zero,432
  80682c:	00806988 	cmpgei	r2,zero,422
  806830:	00806988 	cmpgei	r2,zero,422
  806834:	00806988 	cmpgei	r2,zero,422
  806838:	00806988 	cmpgei	r2,zero,422
  80683c:	00806c54 	movui	r2,433
  806840:	00806988 	cmpgei	r2,zero,422
  806844:	00806988 	cmpgei	r2,zero,422
  806848:	00806988 	cmpgei	r2,zero,422
  80684c:	00806988 	cmpgei	r2,zero,422
  806850:	00806988 	cmpgei	r2,zero,422
  806854:	00806ca8 	cmpgeui	r2,zero,434
  806858:	00806988 	cmpgei	r2,zero,422
  80685c:	00806988 	cmpgei	r2,zero,422
  806860:	00806988 	cmpgei	r2,zero,422
  806864:	00806988 	cmpgei	r2,zero,422
  806868:	00806db8 	rdprs	r2,zero,438
  80686c:	00806988 	cmpgei	r2,zero,422
  806870:	00806988 	cmpgei	r2,zero,422
  806874:	00806988 	cmpgei	r2,zero,422
  806878:	00806988 	cmpgei	r2,zero,422
  80687c:	00806988 	cmpgei	r2,zero,422
  806880:	00806988 	cmpgei	r2,zero,422
  806884:	00806988 	cmpgei	r2,zero,422
  806888:	00806b60 	cmpeqi	r2,zero,429
  80688c:	00806988 	cmpgei	r2,zero,422
  806890:	00806988 	cmpgei	r2,zero,422
  806894:	00806988 	cmpgei	r2,zero,422
  806898:	00806b70 	cmpltui	r2,zero,429
  80689c:	00806c0c 	andi	r2,zero,432
  8068a0:	00806988 	cmpgei	r2,zero,422
  8068a4:	00806988 	cmpgei	r2,zero,422
  8068a8:	00806c28 	cmpgeui	r2,zero,432
  8068ac:	00806988 	cmpgei	r2,zero,422
  8068b0:	00806988 	cmpgei	r2,zero,422
  8068b4:	00806988 	cmpgei	r2,zero,422
  8068b8:	00806988 	cmpgei	r2,zero,422
  8068bc:	00806c54 	movui	r2,433
  8068c0:	00806988 	cmpgei	r2,zero,422
  8068c4:	00806988 	cmpgei	r2,zero,422
  8068c8:	00806988 	cmpgei	r2,zero,422
  8068cc:	00806988 	cmpgei	r2,zero,422
  8068d0:	00806988 	cmpgei	r2,zero,422
  8068d4:	00806ca8 	cmpgeui	r2,zero,434
  8068d8:	00806988 	cmpgei	r2,zero,422
  8068dc:	00806988 	cmpgei	r2,zero,422
  8068e0:	00806988 	cmpgei	r2,zero,422
  8068e4:	00806988 	cmpgei	r2,zero,422
  8068e8:	00806db8 	rdprs	r2,zero,438
  8068ec:	d900a317 	ldw	r4,652(sp)
  8068f0:	00805704 	movi	r2,348
  8068f4:	20ffffc4 	addi	r3,r4,-1
  8068f8:	10c18c2e 	bgeu	r2,r3,806f2c <__svfscanf_r+0xf04>
  8068fc:	00805744 	movi	r2,349
  806900:	257fa8c4 	addi	r21,r4,-349
  806904:	9c836014 	ori	r18,r19,3456
  806908:	d880a315 	stw	r2,652(sp)
  80690c:	0001a106 	br	806f94 <__svfscanf_r+0xf6c>
  806910:	b009883a 	mov	r4,r22
  806914:	800b883a 	mov	r5,r16
  806918:	0803aa80 	call	803aa8 <__srefill_r>
  80691c:	103eb226 	beq	r2,zero,8063e8 <__svfscanf_r+0x3c0>
  806920:	003e1606 	br	80617c <__svfscanf_r+0x154>
  806924:	01000284 	movi	r4,10
  806928:	00802074 	movhi	r2,129
  80692c:	10b16604 	addi	r2,r2,-14952
  806930:	054000c4 	movi	r21,3
  806934:	d900a115 	stw	r4,644(sp)
  806938:	d880a015 	stw	r2,640(sp)
  80693c:	003ea806 	br	8063e0 <__svfscanf_r+0x3b8>
  806940:	a880200c 	andi	r2,r21,128
  806944:	10001026 	beq	r2,zero,806988 <__svfscanf_r+0x960>
  806948:	00bfdfc4 	movi	r2,-129
  80694c:	a8aa703a 	and	r21,r21,r2
  806950:	b9400005 	stb	r5,0(r23)
  806954:	bdc00044 	addi	r23,r23,1
  806958:	80c00117 	ldw	r3,4(r16)
  80695c:	8c400044 	addi	r17,r17,1
  806960:	18bfffc4 	addi	r2,r3,-1
  806964:	80800115 	stw	r2,4(r16)
  806968:	0080610e 	bge	zero,r2,806af0 <__svfscanf_r+0xac8>
  80696c:	80800017 	ldw	r2,0(r16)
  806970:	10800044 	addi	r2,r2,1
  806974:	80800015 	stw	r2,0(r16)
  806978:	d880a317 	ldw	r2,652(sp)
  80697c:	10bfffc4 	addi	r2,r2,-1
  806980:	d880a315 	stw	r2,652(sp)
  806984:	103f7d1e 	bne	r2,zero,80677c <__svfscanf_r+0x754>
  806988:	d8c09e17 	ldw	r3,632(sp)
  80698c:	18000226 	beq	r3,zero,806998 <__svfscanf_r+0x970>
  806990:	00bfbfc4 	movi	r2,-257
  806994:	a8aa703a 	and	r21,r21,r2
  806998:	90ffffc4 	addi	r3,r18,-1
  80699c:	00800044 	movi	r2,1
  8069a0:	10c0cd2e 	bgeu	r2,r3,806cd8 <__svfscanf_r+0xcb0>
  8069a4:	e1003fcc 	andi	r4,fp,255
  8069a8:	2100201c 	xori	r4,r4,128
  8069ac:	213fe004 	addi	r4,r4,-128
  8069b0:	20ffffc4 	addi	r3,r4,-1
  8069b4:	00800184 	movi	r2,6
  8069b8:	10c01736 	bltu	r2,r3,806a18 <__svfscanf_r+0x9f0>
  8069bc:	00c00084 	movi	r3,2
  8069c0:	1900880e 	bge	r3,r4,806be4 <__svfscanf_r+0xbbc>
  8069c4:	008000c4 	movi	r2,3
  8069c8:	1100130e 	bge	r2,r4,806a18 <__svfscanf_r+0x9f0>
  8069cc:	e4ffffc4 	addi	r19,fp,-1
  8069d0:	b825883a 	mov	r18,r23
  8069d4:	94bfffc4 	addi	r18,r18,-1
  8069d8:	91400007 	ldb	r5,0(r18)
  8069dc:	b009883a 	mov	r4,r22
  8069e0:	800d883a 	mov	r6,r16
  8069e4:	080cbb80 	call	80cbb8 <_ungetc_r>
  8069e8:	9cffffc4 	addi	r19,r19,-1
  8069ec:	98c03fcc 	andi	r3,r19,255
  8069f0:	18c0201c 	xori	r3,r3,128
  8069f4:	18ffe004 	addi	r3,r3,-128
  8069f8:	00800084 	movi	r2,2
  8069fc:	18bff51e 	bne	r3,r2,8069d4 <__svfscanf_r+0x9ac>
  806a00:	e0bfff04 	addi	r2,fp,-4
  806a04:	10803fcc 	andi	r2,r2,255
  806a08:	b887c83a 	sub	r3,r23,r2
  806a0c:	8885c83a 	sub	r2,r17,r2
  806a10:	147fffc4 	addi	r17,r2,-1
  806a14:	1dffffc4 	addi	r23,r3,-1
  806a18:	a880400c 	andi	r2,r21,256
  806a1c:	10001226 	beq	r2,zero,806a68 <__svfscanf_r+0xa40>
  806a20:	a881000c 	andi	r2,r21,1024
  806a24:	1000651e 	bne	r2,zero,806bbc <__svfscanf_r+0xb94>
  806a28:	bdffffc4 	addi	r23,r23,-1
  806a2c:	b9400007 	ldb	r5,0(r23)
  806a30:	00801944 	movi	r2,101
  806a34:	8c7fffc4 	addi	r17,r17,-1
  806a38:	28800826 	beq	r5,r2,806a5c <__svfscanf_r+0xa34>
  806a3c:	00801144 	movi	r2,69
  806a40:	28800626 	beq	r5,r2,806a5c <__svfscanf_r+0xa34>
  806a44:	bdffffc4 	addi	r23,r23,-1
  806a48:	b009883a 	mov	r4,r22
  806a4c:	800d883a 	mov	r6,r16
  806a50:	080cbb80 	call	80cbb8 <_ungetc_r>
  806a54:	b9400007 	ldb	r5,0(r23)
  806a58:	8c7fffc4 	addi	r17,r17,-1
  806a5c:	b009883a 	mov	r4,r22
  806a60:	800d883a 	mov	r6,r16
  806a64:	080cbb80 	call	80cbb8 <_ungetc_r>
  806a68:	a880040c 	andi	r2,r21,16
  806a6c:	103d811e 	bne	r2,zero,806074 <__svfscanf_r+0x4c>
  806a70:	a8c1800c 	andi	r3,r21,1536
  806a74:	00810004 	movi	r2,1024
  806a78:	b8000005 	stb	zero,0(r23)
  806a7c:	1880bb26 	beq	r3,r2,806d6c <__svfscanf_r+0xd44>
  806a80:	d8809d17 	ldw	r2,628(sp)
  806a84:	1000a61e 	bne	r2,zero,806d20 <__svfscanf_r+0xcf8>
  806a88:	d940a617 	ldw	r5,664(sp)
  806a8c:	b009883a 	mov	r4,r22
  806a90:	000d883a 	mov	r6,zero
  806a94:	080a9f40 	call	80a9f4 <_strtod_r>
  806a98:	a900004c 	andi	r4,r21,1
  806a9c:	2009003a 	cmpeq	r4,r4,zero
  806aa0:	1025883a 	mov	r18,r2
  806aa4:	1827883a 	mov	r19,r3
  806aa8:	2000951e 	bne	r4,zero,806d00 <__svfscanf_r+0xcd8>
  806aac:	d8c0a417 	ldw	r3,656(sp)
  806ab0:	18800017 	ldw	r2,0(r3)
  806ab4:	1d400104 	addi	r21,r3,4
  806ab8:	14c00115 	stw	r19,4(r2)
  806abc:	14800015 	stw	r18,0(r2)
  806ac0:	d8c0a217 	ldw	r3,648(sp)
  806ac4:	dd40a415 	stw	r21,656(sp)
  806ac8:	18c00044 	addi	r3,r3,1
  806acc:	d8c0a215 	stw	r3,648(sp)
  806ad0:	003d6806 	br	806074 <__svfscanf_r+0x4c>
  806ad4:	a880800c 	andi	r2,r21,512
  806ad8:	103fab26 	beq	r2,zero,806988 <__svfscanf_r+0x960>
  806adc:	d9009e17 	ldw	r4,632(sp)
  806ae0:	00bf5fc4 	movi	r2,-641
  806ae4:	a8aa703a 	and	r21,r21,r2
  806ae8:	d9009f15 	stw	r4,636(sp)
  806aec:	003f9806 	br	806950 <__svfscanf_r+0x928>
  806af0:	b009883a 	mov	r4,r22
  806af4:	800b883a 	mov	r5,r16
  806af8:	d980a715 	stw	r6,668(sp)
  806afc:	0803aa80 	call	803aa8 <__srefill_r>
  806b00:	d980a717 	ldw	r6,668(sp)
  806b04:	103f9c26 	beq	r2,zero,806978 <__svfscanf_r+0x950>
  806b08:	003f9f06 	br	806988 <__svfscanf_r+0x960>
  806b0c:	a880400c 	andi	r2,r21,256
  806b10:	10000b26 	beq	r2,zero,806b40 <__svfscanf_r+0xb18>
  806b14:	00bfdfc4 	movi	r2,-129
  806b18:	a8aa703a 	and	r21,r21,r2
  806b1c:	d8809e17 	ldw	r2,632(sp)
  806b20:	10800044 	addi	r2,r2,1
  806b24:	d8809e15 	stw	r2,632(sp)
  806b28:	303f8b26 	beq	r6,zero,806958 <__svfscanf_r+0x930>
  806b2c:	d8c0a317 	ldw	r3,652(sp)
  806b30:	31bfffc4 	addi	r6,r6,-1
  806b34:	18c00044 	addi	r3,r3,1
  806b38:	d8c0a315 	stw	r3,652(sp)
  806b3c:	003f8606 	br	806958 <__svfscanf_r+0x930>
  806b40:	e0803fcc 	andi	r2,fp,255
  806b44:	1080201c 	xori	r2,r2,128
  806b48:	10bfe004 	addi	r2,r2,-128
  806b4c:	9085883a 	add	r2,r18,r2
  806b50:	103f8d1e 	bne	r2,zero,806988 <__svfscanf_r+0x960>
  806b54:	00bf9fc4 	movi	r2,-385
  806b58:	a8aa703a 	and	r21,r21,r2
  806b5c:	003f7c06 	br	806950 <__svfscanf_r+0x928>
  806b60:	00800044 	movi	r2,1
  806b64:	90bf881e 	bne	r18,r2,806988 <__svfscanf_r+0x960>
  806b68:	04800084 	movi	r18,2
  806b6c:	003f7806 	br	806950 <__svfscanf_r+0x928>
  806b70:	a8c1400c 	andi	r3,r21,1280
  806b74:	00810004 	movi	r2,1024
  806b78:	18800426 	beq	r3,r2,806b8c <__svfscanf_r+0xb64>
  806b7c:	a884703a 	and	r2,r21,r2
  806b80:	103f8126 	beq	r2,zero,806988 <__svfscanf_r+0x960>
  806b84:	d8809e17 	ldw	r2,632(sp)
  806b88:	103f8326 	beq	r2,zero,806998 <__svfscanf_r+0x970>
  806b8c:	a880800c 	andi	r2,r21,512
  806b90:	1000051e 	bne	r2,zero,806ba8 <__svfscanf_r+0xb80>
  806b94:	d8c09e17 	ldw	r3,632(sp)
  806b98:	d9009f17 	ldw	r4,636(sp)
  806b9c:	ddc09c15 	stw	r23,624(sp)
  806ba0:	1907c83a 	sub	r3,r3,r4
  806ba4:	d8c09d15 	stw	r3,628(sp)
  806ba8:	00be7fc4 	movi	r2,-1537
  806bac:	a884703a 	and	r2,r21,r2
  806bb0:	15406014 	ori	r21,r2,384
  806bb4:	d8009e15 	stw	zero,632(sp)
  806bb8:	003f6506 	br	806950 <__svfscanf_r+0x928>
  806bbc:	d900a617 	ldw	r4,664(sp)
  806bc0:	25fd4e2e 	bgeu	r4,r23,8060fc <__svfscanf_r+0xd4>
  806bc4:	bdffffc4 	addi	r23,r23,-1
  806bc8:	b9400007 	ldb	r5,0(r23)
  806bcc:	b009883a 	mov	r4,r22
  806bd0:	800d883a 	mov	r6,r16
  806bd4:	080cbb80 	call	80cbb8 <_ungetc_r>
  806bd8:	d880a617 	ldw	r2,664(sp)
  806bdc:	15fff936 	bltu	r2,r23,806bc4 <__svfscanf_r+0xb9c>
  806be0:	003d4606 	br	8060fc <__svfscanf_r+0xd4>
  806be4:	d900a617 	ldw	r4,664(sp)
  806be8:	25fd442e 	bgeu	r4,r23,8060fc <__svfscanf_r+0xd4>
  806bec:	bdffffc4 	addi	r23,r23,-1
  806bf0:	b9400007 	ldb	r5,0(r23)
  806bf4:	b009883a 	mov	r4,r22
  806bf8:	800d883a 	mov	r6,r16
  806bfc:	080cbb80 	call	80cbb8 <_ungetc_r>
  806c00:	d8c0a617 	ldw	r3,664(sp)
  806c04:	1dfff936 	bltu	r3,r23,806bec <__svfscanf_r+0xbc4>
  806c08:	003d3c06 	br	8060fc <__svfscanf_r+0xd4>
  806c0c:	e0c03fcc 	andi	r3,fp,255
  806c10:	18c0201c 	xori	r3,r3,128
  806c14:	18ffe004 	addi	r3,r3,-128
  806c18:	00800084 	movi	r2,2
  806c1c:	18bf5a1e 	bne	r3,r2,806988 <__svfscanf_r+0x960>
  806c20:	070000c4 	movi	fp,3
  806c24:	003f4a06 	br	806950 <__svfscanf_r+0x928>
  806c28:	e0c03fcc 	andi	r3,fp,255
  806c2c:	18c0201c 	xori	r3,r3,128
  806c30:	18ffe004 	addi	r3,r3,-128
  806c34:	1800231e 	bne	r3,zero,806cc4 <__svfscanf_r+0xc9c>
  806c38:	a8c1c00c 	andi	r3,r21,1792
  806c3c:	0081c004 	movi	r2,1792
  806c40:	18bf511e 	bne	r3,r2,806988 <__svfscanf_r+0x960>
  806c44:	00be1fc4 	movi	r2,-1921
  806c48:	a8aa703a 	and	r21,r21,r2
  806c4c:	07000044 	movi	fp,1
  806c50:	003f3f06 	br	806950 <__svfscanf_r+0x928>
  806c54:	9000101e 	bne	r18,zero,806c98 <__svfscanf_r+0xc70>
  806c58:	a8c1c00c 	andi	r3,r21,1792
  806c5c:	0081c004 	movi	r2,1792
  806c60:	18800926 	beq	r3,r2,806c88 <__svfscanf_r+0xc60>
  806c64:	e0c03fcc 	andi	r3,fp,255
  806c68:	18c0201c 	xori	r3,r3,128
  806c6c:	18ffe004 	addi	r3,r3,-128
  806c70:	00800044 	movi	r2,1
  806c74:	18800226 	beq	r3,r2,806c80 <__svfscanf_r+0xc58>
  806c78:	00800104 	movi	r2,4
  806c7c:	18bf421e 	bne	r3,r2,806988 <__svfscanf_r+0x960>
  806c80:	e7000044 	addi	fp,fp,1
  806c84:	003f3206 	br	806950 <__svfscanf_r+0x928>
  806c88:	00be1fc4 	movi	r2,-1921
  806c8c:	a8aa703a 	and	r21,r21,r2
  806c90:	04800044 	movi	r18,1
  806c94:	003f2e06 	br	806950 <__svfscanf_r+0x928>
  806c98:	00800084 	movi	r2,2
  806c9c:	90bff11e 	bne	r18,r2,806c64 <__svfscanf_r+0xc3c>
  806ca0:	048000c4 	movi	r18,3
  806ca4:	003f2a06 	br	806950 <__svfscanf_r+0x928>
  806ca8:	e0c03fcc 	andi	r3,fp,255
  806cac:	18c0201c 	xori	r3,r3,128
  806cb0:	18ffe004 	addi	r3,r3,-128
  806cb4:	00800184 	movi	r2,6
  806cb8:	18bf331e 	bne	r3,r2,806988 <__svfscanf_r+0x960>
  806cbc:	070001c4 	movi	fp,7
  806cc0:	003f2306 	br	806950 <__svfscanf_r+0x928>
  806cc4:	008000c4 	movi	r2,3
  806cc8:	18bfed26 	beq	r3,r2,806c80 <__svfscanf_r+0xc58>
  806ccc:	00800144 	movi	r2,5
  806cd0:	18bfeb26 	beq	r3,r2,806c80 <__svfscanf_r+0xc58>
  806cd4:	003f2c06 	br	806988 <__svfscanf_r+0x960>
  806cd8:	d900a617 	ldw	r4,664(sp)
  806cdc:	25fd072e 	bgeu	r4,r23,8060fc <__svfscanf_r+0xd4>
  806ce0:	bdffffc4 	addi	r23,r23,-1
  806ce4:	b9400007 	ldb	r5,0(r23)
  806ce8:	b009883a 	mov	r4,r22
  806cec:	800d883a 	mov	r6,r16
  806cf0:	080cbb80 	call	80cbb8 <_ungetc_r>
  806cf4:	d880a617 	ldw	r2,664(sp)
  806cf8:	15fff936 	bltu	r2,r23,806ce0 <__svfscanf_r+0xcb8>
  806cfc:	003cff06 	br	8060fc <__svfscanf_r+0xd4>
  806d00:	a880008c 	andi	r2,r21,2
  806d04:	10002026 	beq	r2,zero,806d88 <__svfscanf_r+0xd60>
  806d08:	d900a417 	ldw	r4,656(sp)
  806d0c:	20800017 	ldw	r2,0(r4)
  806d10:	25400104 	addi	r21,r4,4
  806d14:	10c00115 	stw	r3,4(r2)
  806d18:	14800015 	stw	r18,0(r2)
  806d1c:	003f6806 	br	806ac0 <__svfscanf_r+0xa98>
  806d20:	d8c09c17 	ldw	r3,624(sp)
  806d24:	b009883a 	mov	r4,r22
  806d28:	000d883a 	mov	r6,zero
  806d2c:	19400044 	addi	r5,r3,1
  806d30:	01c00284 	movi	r7,10
  806d34:	080c0180 	call	80c018 <_strtol_r>
  806d38:	d9009d17 	ldw	r4,628(sp)
  806d3c:	110dc83a 	sub	r6,r2,r4
  806d40:	d8c0a617 	ldw	r3,664(sp)
  806d44:	d9009c17 	ldw	r4,624(sp)
  806d48:	188054c4 	addi	r2,r3,339
  806d4c:	20800236 	bltu	r4,r2,806d58 <__svfscanf_r+0xd30>
  806d50:	18805484 	addi	r2,r3,338
  806d54:	d8809c15 	stw	r2,624(sp)
  806d58:	d9009c17 	ldw	r4,624(sp)
  806d5c:	01402074 	movhi	r5,129
  806d60:	2952fe04 	addi	r5,r5,19448
  806d64:	0803d580 	call	803d58 <sprintf>
  806d68:	003f4706 	br	806a88 <__svfscanf_r+0xa60>
  806d6c:	d8c09e17 	ldw	r3,632(sp)
  806d70:	d9009f17 	ldw	r4,636(sp)
  806d74:	1905c83a 	sub	r2,r3,r4
  806d78:	103f4326 	beq	r2,zero,806a88 <__svfscanf_r+0xa60>
  806d7c:	008dc83a 	sub	r6,zero,r2
  806d80:	ddc09c15 	stw	r23,624(sp)
  806d84:	003fee06 	br	806d40 <__svfscanf_r+0xd18>
  806d88:	d880a417 	ldw	r2,656(sp)
  806d8c:	9009883a 	mov	r4,r18
  806d90:	180b883a 	mov	r5,r3
  806d94:	15c00017 	ldw	r23,0(r2)
  806d98:	15400104 	addi	r21,r2,4
  806d9c:	080a7f80 	call	80a7f8 <__isnand>
  806da0:	10021c1e 	bne	r2,zero,807614 <__svfscanf_r+0x15ec>
  806da4:	980b883a 	mov	r5,r19
  806da8:	9009883a 	mov	r4,r18
  806dac:	080f7fc0 	call	80f7fc <__truncdfsf2>
  806db0:	b8800015 	stw	r2,0(r23)
  806db4:	003f4206 	br	806ac0 <__svfscanf_r+0xa98>
  806db8:	e0c03fcc 	andi	r3,fp,255
  806dbc:	18c0201c 	xori	r3,r3,128
  806dc0:	18ffe004 	addi	r3,r3,-128
  806dc4:	008001c4 	movi	r2,7
  806dc8:	18beef1e 	bne	r3,r2,806988 <__svfscanf_r+0x960>
  806dcc:	07000204 	movi	fp,8
  806dd0:	003edf06 	br	806950 <__svfscanf_r+0x928>
  806dd4:	d900a317 	ldw	r4,652(sp)
  806dd8:	208002a4 	muli	r2,r4,10
  806ddc:	1145883a 	add	r2,r2,r5
  806de0:	10bff404 	addi	r2,r2,-48
  806de4:	d880a315 	stw	r2,652(sp)
  806de8:	003ceb06 	br	806198 <__svfscanf_r+0x170>
  806dec:	9880040c 	andi	r2,r19,16
  806df0:	10001426 	beq	r2,zero,806e44 <__svfscanf_r+0xe1c>
  806df4:	0027883a 	mov	r19,zero
  806df8:	00000906 	br	806e20 <__svfscanf_r+0xdf8>
  806dfc:	80c00117 	ldw	r3,4(r16)
  806e00:	d880a317 	ldw	r2,652(sp)
  806e04:	29800044 	addi	r6,r5,1
  806e08:	18ffffc4 	addi	r3,r3,-1
  806e0c:	9cc00044 	addi	r19,r19,1
  806e10:	81800015 	stw	r6,0(r16)
  806e14:	80c00115 	stw	r3,4(r16)
  806e18:	14fdf726 	beq	r2,r19,8065f8 <__svfscanf_r+0x5d0>
  806e1c:	00c02c0e 	bge	zero,r3,806ed0 <__svfscanf_r+0xea8>
  806e20:	81400017 	ldw	r5,0(r16)
  806e24:	90800017 	ldw	r2,0(r18)
  806e28:	28c00003 	ldbu	r3,0(r5)
  806e2c:	1887883a 	add	r3,r3,r2
  806e30:	19000003 	ldbu	r4,0(r3)
  806e34:	2100020c 	andi	r4,r4,8
  806e38:	203ff026 	beq	r4,zero,806dfc <__svfscanf_r+0xdd4>
  806e3c:	8ce3883a 	add	r17,r17,r19
  806e40:	003c8c06 	br	806074 <__svfscanf_r+0x4c>
  806e44:	d8c0a417 	ldw	r3,656(sp)
  806e48:	1d400017 	ldw	r21,0(r3)
  806e4c:	a827883a 	mov	r19,r21
  806e50:	00000e06 	br	806e8c <__svfscanf_r+0xe64>
  806e54:	80800117 	ldw	r2,4(r16)
  806e58:	d900a317 	ldw	r4,652(sp)
  806e5c:	29800044 	addi	r6,r5,1
  806e60:	10ffffc4 	addi	r3,r2,-1
  806e64:	213fffc4 	addi	r4,r4,-1
  806e68:	d900a315 	stw	r4,652(sp)
  806e6c:	80c00115 	stw	r3,4(r16)
  806e70:	28800003 	ldbu	r2,0(r5)
  806e74:	98800005 	stb	r2,0(r19)
  806e78:	81800015 	stw	r6,0(r16)
  806e7c:	9cc00044 	addi	r19,r19,1
  806e80:	20000926 	beq	r4,zero,806ea8 <__svfscanf_r+0xe80>
  806e84:	80800117 	ldw	r2,4(r16)
  806e88:	0080170e 	bge	zero,r2,806ee8 <__svfscanf_r+0xec0>
  806e8c:	81400017 	ldw	r5,0(r16)
  806e90:	90800017 	ldw	r2,0(r18)
  806e94:	28c00003 	ldbu	r3,0(r5)
  806e98:	1887883a 	add	r3,r3,r2
  806e9c:	19000003 	ldbu	r4,0(r3)
  806ea0:	2100020c 	andi	r4,r4,8
  806ea4:	203feb26 	beq	r4,zero,806e54 <__svfscanf_r+0xe2c>
  806ea8:	9d45c83a 	sub	r2,r19,r21
  806eac:	d8c0a217 	ldw	r3,648(sp)
  806eb0:	88a3883a 	add	r17,r17,r2
  806eb4:	d880a417 	ldw	r2,656(sp)
  806eb8:	18c00044 	addi	r3,r3,1
  806ebc:	d8c0a215 	stw	r3,648(sp)
  806ec0:	10800104 	addi	r2,r2,4
  806ec4:	d880a415 	stw	r2,656(sp)
  806ec8:	98000005 	stb	zero,0(r19)
  806ecc:	003c6906 	br	806074 <__svfscanf_r+0x4c>
  806ed0:	b009883a 	mov	r4,r22
  806ed4:	800b883a 	mov	r5,r16
  806ed8:	0803aa80 	call	803aa8 <__srefill_r>
  806edc:	103fd026 	beq	r2,zero,806e20 <__svfscanf_r+0xdf8>
  806ee0:	8ce3883a 	add	r17,r17,r19
  806ee4:	003c6306 	br	806074 <__svfscanf_r+0x4c>
  806ee8:	b009883a 	mov	r4,r22
  806eec:	800b883a 	mov	r5,r16
  806ef0:	0803aa80 	call	803aa8 <__srefill_r>
  806ef4:	103fe526 	beq	r2,zero,806e8c <__svfscanf_r+0xe64>
  806ef8:	003feb06 	br	806ea8 <__svfscanf_r+0xe80>
  806efc:	d900a317 	ldw	r4,652(sp)
  806f00:	9d41e014 	ori	r21,r19,1920
  806f04:	2000821e 	bne	r4,zero,807110 <__svfscanf_r+0x10e8>
  806f08:	d8c04404 	addi	r3,sp,272
  806f0c:	182f883a 	mov	r23,r3
  806f10:	0039883a 	mov	fp,zero
  806f14:	d8c0a615 	stw	r3,664(sp)
  806f18:	d8009c15 	stw	zero,624(sp)
  806f1c:	d8009d15 	stw	zero,628(sp)
  806f20:	d8009f15 	stw	zero,636(sp)
  806f24:	d8009e15 	stw	zero,632(sp)
  806f28:	003e9e06 	br	8069a4 <__svfscanf_r+0x97c>
  806f2c:	d900a317 	ldw	r4,652(sp)
  806f30:	9c836014 	ori	r18,r19,3456
  806f34:	2000161e 	bne	r4,zero,806f90 <__svfscanf_r+0xf68>
  806f38:	d8804404 	addi	r2,sp,272
  806f3c:	d880a615 	stw	r2,664(sp)
  806f40:	002f883a 	mov	r23,zero
  806f44:	1027883a 	mov	r19,r2
  806f48:	9080400c 	andi	r2,r18,256
  806f4c:	10000926 	beq	r2,zero,806f74 <__svfscanf_r+0xf4c>
  806f50:	d8c0a617 	ldw	r3,664(sp)
  806f54:	1cc0052e 	bgeu	r3,r19,806f6c <__svfscanf_r+0xf44>
  806f58:	9cffffc4 	addi	r19,r19,-1
  806f5c:	99400007 	ldb	r5,0(r19)
  806f60:	b009883a 	mov	r4,r22
  806f64:	800d883a 	mov	r6,r16
  806f68:	080cbb80 	call	80cbb8 <_ungetc_r>
  806f6c:	d900a617 	ldw	r4,664(sp)
  806f70:	24fc6226 	beq	r4,r19,8060fc <__svfscanf_r+0xd4>
  806f74:	9080040c 	andi	r2,r18,16
  806f78:	10006726 	beq	r2,zero,807118 <__svfscanf_r+0x10f0>
  806f7c:	d8c0a617 	ldw	r3,664(sp)
  806f80:	98c5c83a 	sub	r2,r19,r3
  806f84:	b885883a 	add	r2,r23,r2
  806f88:	88a3883a 	add	r17,r17,r2
  806f8c:	003c3906 	br	806074 <__svfscanf_r+0x4c>
  806f90:	002b883a 	mov	r21,zero
  806f94:	d8c04404 	addi	r3,sp,272
  806f98:	d8c0a615 	stw	r3,664(sp)
  806f9c:	002f883a 	mov	r23,zero
  806fa0:	1827883a 	mov	r19,r3
  806fa4:	81800017 	ldw	r6,0(r16)
  806fa8:	00c01344 	movi	r3,77
  806fac:	31400003 	ldbu	r5,0(r6)
  806fb0:	28bff544 	addi	r2,r5,-43
  806fb4:	10803fcc 	andi	r2,r2,255
  806fb8:	18bfe336 	bltu	r3,r2,806f48 <__svfscanf_r+0xf20>
  806fbc:	1085883a 	add	r2,r2,r2
  806fc0:	1085883a 	add	r2,r2,r2
  806fc4:	00c02034 	movhi	r3,128
  806fc8:	18dbf604 	addi	r3,r3,28632
  806fcc:	10c5883a 	add	r2,r2,r3
  806fd0:	11000017 	ldw	r4,0(r2)
  806fd4:	2000683a 	jmp	r4
  806fd8:	0080716c 	andhi	r2,zero,453
  806fdc:	00806f48 	cmpgei	r2,zero,445
  806fe0:	0080716c 	andhi	r2,zero,453
  806fe4:	00806f48 	cmpgei	r2,zero,445
  806fe8:	00806f48 	cmpgei	r2,zero,445
  806fec:	008071b0 	cmpltui	r2,zero,454
  806ff0:	008072ac 	andhi	r2,zero,458
  806ff4:	008072ac 	andhi	r2,zero,458
  806ff8:	008072ac 	andhi	r2,zero,458
  806ffc:	008072ac 	andhi	r2,zero,458
  807000:	008072ac 	andhi	r2,zero,458
  807004:	008072ac 	andhi	r2,zero,458
  807008:	008072ac 	andhi	r2,zero,458
  80700c:	008072d4 	movui	r2,459
  807010:	008072d4 	movui	r2,459
  807014:	00806f48 	cmpgei	r2,zero,445
  807018:	00806f48 	cmpgei	r2,zero,445
  80701c:	00806f48 	cmpgei	r2,zero,445
  807020:	00806f48 	cmpgei	r2,zero,445
  807024:	00806f48 	cmpgei	r2,zero,445
  807028:	00806f48 	cmpgei	r2,zero,445
  80702c:	00806f48 	cmpgei	r2,zero,445
  807030:	00807304 	movi	r2,460
  807034:	00807304 	movi	r2,460
  807038:	00807304 	movi	r2,460
  80703c:	00807304 	movi	r2,460
  807040:	00807304 	movi	r2,460
  807044:	00807304 	movi	r2,460
  807048:	00806f48 	cmpgei	r2,zero,445
  80704c:	00806f48 	cmpgei	r2,zero,445
  807050:	00806f48 	cmpgei	r2,zero,445
  807054:	00806f48 	cmpgei	r2,zero,445
  807058:	00806f48 	cmpgei	r2,zero,445
  80705c:	00806f48 	cmpgei	r2,zero,445
  807060:	00806f48 	cmpgei	r2,zero,445
  807064:	00806f48 	cmpgei	r2,zero,445
  807068:	00806f48 	cmpgei	r2,zero,445
  80706c:	00806f48 	cmpgei	r2,zero,445
  807070:	00806f48 	cmpgei	r2,zero,445
  807074:	00806f48 	cmpgei	r2,zero,445
  807078:	00806f48 	cmpgei	r2,zero,445
  80707c:	00806f48 	cmpgei	r2,zero,445
  807080:	00806f48 	cmpgei	r2,zero,445
  807084:	00806f48 	cmpgei	r2,zero,445
  807088:	00806f48 	cmpgei	r2,zero,445
  80708c:	00807314 	movui	r2,460
  807090:	00806f48 	cmpgei	r2,zero,445
  807094:	00806f48 	cmpgei	r2,zero,445
  807098:	00806f48 	cmpgei	r2,zero,445
  80709c:	00806f48 	cmpgei	r2,zero,445
  8070a0:	00806f48 	cmpgei	r2,zero,445
  8070a4:	00806f48 	cmpgei	r2,zero,445
  8070a8:	00806f48 	cmpgei	r2,zero,445
  8070ac:	00806f48 	cmpgei	r2,zero,445
  8070b0:	00807304 	movi	r2,460
  8070b4:	00807304 	movi	r2,460
  8070b8:	00807304 	movi	r2,460
  8070bc:	00807304 	movi	r2,460
  8070c0:	00807304 	movi	r2,460
  8070c4:	00807304 	movi	r2,460
  8070c8:	00806f48 	cmpgei	r2,zero,445
  8070cc:	00806f48 	cmpgei	r2,zero,445
  8070d0:	00806f48 	cmpgei	r2,zero,445
  8070d4:	00806f48 	cmpgei	r2,zero,445
  8070d8:	00806f48 	cmpgei	r2,zero,445
  8070dc:	00806f48 	cmpgei	r2,zero,445
  8070e0:	00806f48 	cmpgei	r2,zero,445
  8070e4:	00806f48 	cmpgei	r2,zero,445
  8070e8:	00806f48 	cmpgei	r2,zero,445
  8070ec:	00806f48 	cmpgei	r2,zero,445
  8070f0:	00806f48 	cmpgei	r2,zero,445
  8070f4:	00806f48 	cmpgei	r2,zero,445
  8070f8:	00806f48 	cmpgei	r2,zero,445
  8070fc:	00806f48 	cmpgei	r2,zero,445
  807100:	00806f48 	cmpgei	r2,zero,445
  807104:	00806f48 	cmpgei	r2,zero,445
  807108:	00806f48 	cmpgei	r2,zero,445
  80710c:	00807314 	movui	r2,460
  807110:	000d883a 	mov	r6,zero
  807114:	003d9006 	br	806758 <__svfscanf_r+0x730>
  807118:	98000005 	stb	zero,0(r19)
  80711c:	d8c0a017 	ldw	r3,640(sp)
  807120:	d940a617 	ldw	r5,664(sp)
  807124:	d9c0a117 	ldw	r7,644(sp)
  807128:	b009883a 	mov	r4,r22
  80712c:	000d883a 	mov	r6,zero
  807130:	183ee83a 	callr	r3
  807134:	1007883a 	mov	r3,r2
  807138:	9080080c 	andi	r2,r18,32
  80713c:	10004d1e 	bne	r2,zero,807274 <__svfscanf_r+0x124c>
  807140:	9080010c 	andi	r2,r18,4
  807144:	10003426 	beq	r2,zero,807218 <__svfscanf_r+0x11f0>
  807148:	d900a417 	ldw	r4,656(sp)
  80714c:	20800017 	ldw	r2,0(r4)
  807150:	21000104 	addi	r4,r4,4
  807154:	d900a415 	stw	r4,656(sp)
  807158:	10c0000d 	sth	r3,0(r2)
  80715c:	d880a217 	ldw	r2,648(sp)
  807160:	10800044 	addi	r2,r2,1
  807164:	d880a215 	stw	r2,648(sp)
  807168:	003f8406 	br	806f7c <__svfscanf_r+0xf54>
  80716c:	9080200c 	andi	r2,r18,128
  807170:	103f7526 	beq	r2,zero,806f48 <__svfscanf_r+0xf20>
  807174:	00bfdfc4 	movi	r2,-129
  807178:	90a4703a 	and	r18,r18,r2
  80717c:	99400005 	stb	r5,0(r19)
  807180:	9cc00044 	addi	r19,r19,1
  807184:	80c00117 	ldw	r3,4(r16)
  807188:	18ffffc4 	addi	r3,r3,-1
  80718c:	80c00115 	stw	r3,4(r16)
  807190:	00c0130e 	bge	zero,r3,8071e0 <__svfscanf_r+0x11b8>
  807194:	31800044 	addi	r6,r6,1
  807198:	81800015 	stw	r6,0(r16)
  80719c:	d880a317 	ldw	r2,652(sp)
  8071a0:	10bfffc4 	addi	r2,r2,-1
  8071a4:	d880a315 	stw	r2,652(sp)
  8071a8:	103f7e1e 	bne	r2,zero,806fa4 <__svfscanf_r+0xf7c>
  8071ac:	003f6606 	br	806f48 <__svfscanf_r+0xf20>
  8071b0:	9082000c 	andi	r2,r18,2048
  8071b4:	103ff126 	beq	r2,zero,80717c <__svfscanf_r+0x1154>
  8071b8:	d8c0a117 	ldw	r3,644(sp)
  8071bc:	1800031e 	bne	r3,zero,8071cc <__svfscanf_r+0x11a4>
  8071c0:	01000204 	movi	r4,8
  8071c4:	94808014 	ori	r18,r18,512
  8071c8:	d900a115 	stw	r4,644(sp)
  8071cc:	9081000c 	andi	r2,r18,1024
  8071d0:	10000826 	beq	r2,zero,8071f4 <__svfscanf_r+0x11cc>
  8071d4:	00be9fc4 	movi	r2,-1409
  8071d8:	90a4703a 	and	r18,r18,r2
  8071dc:	003fe706 	br	80717c <__svfscanf_r+0x1154>
  8071e0:	b009883a 	mov	r4,r22
  8071e4:	800b883a 	mov	r5,r16
  8071e8:	0803aa80 	call	803aa8 <__srefill_r>
  8071ec:	103feb26 	beq	r2,zero,80719c <__svfscanf_r+0x1174>
  8071f0:	003f5506 	br	806f48 <__svfscanf_r+0xf20>
  8071f4:	a8000426 	beq	r21,zero,807208 <__svfscanf_r+0x11e0>
  8071f8:	d880a317 	ldw	r2,652(sp)
  8071fc:	ad7fffc4 	addi	r21,r21,-1
  807200:	10800044 	addi	r2,r2,1
  807204:	d880a315 	stw	r2,652(sp)
  807208:	00bf1fc4 	movi	r2,-897
  80720c:	90a4703a 	and	r18,r18,r2
  807210:	bdc00044 	addi	r23,r23,1
  807214:	003fdb06 	br	807184 <__svfscanf_r+0x115c>
  807218:	9080004c 	andi	r2,r18,1
  80721c:	1005003a 	cmpeq	r2,r2,zero
  807220:	10001426 	beq	r2,zero,807274 <__svfscanf_r+0x124c>
  807224:	9080008c 	andi	r2,r18,2
  807228:	10001226 	beq	r2,zero,807274 <__svfscanf_r+0x124c>
  80722c:	d8c0a017 	ldw	r3,640(sp)
  807230:	00802074 	movhi	r2,129
  807234:	10b16604 	addi	r2,r2,-14952
  807238:	18801426 	beq	r3,r2,80728c <__svfscanf_r+0x1264>
  80723c:	d9c0a117 	ldw	r7,644(sp)
  807240:	d940a617 	ldw	r5,664(sp)
  807244:	000d883a 	mov	r6,zero
  807248:	b009883a 	mov	r4,r22
  80724c:	080c2800 	call	80c280 <_strtoll_r>
  807250:	100d883a 	mov	r6,r2
  807254:	180f883a 	mov	r7,r3
  807258:	d900a417 	ldw	r4,656(sp)
  80725c:	20800017 	ldw	r2,0(r4)
  807260:	21000104 	addi	r4,r4,4
  807264:	d900a415 	stw	r4,656(sp)
  807268:	11c00115 	stw	r7,4(r2)
  80726c:	11800015 	stw	r6,0(r2)
  807270:	003fba06 	br	80715c <__svfscanf_r+0x1134>
  807274:	d900a417 	ldw	r4,656(sp)
  807278:	20800017 	ldw	r2,0(r4)
  80727c:	21000104 	addi	r4,r4,4
  807280:	d900a415 	stw	r4,656(sp)
  807284:	10c00015 	stw	r3,0(r2)
  807288:	003fb406 	br	80715c <__svfscanf_r+0x1134>
  80728c:	d9c0a117 	ldw	r7,644(sp)
  807290:	d940a617 	ldw	r5,664(sp)
  807294:	000d883a 	mov	r6,zero
  807298:	b009883a 	mov	r4,r22
  80729c:	080c7ec0 	call	80c7ec <_strtoull_r>
  8072a0:	100d883a 	mov	r6,r2
  8072a4:	180f883a 	mov	r7,r3
  8072a8:	003feb06 	br	807258 <__svfscanf_r+0x1230>
  8072ac:	d8c0a117 	ldw	r3,644(sp)
  8072b0:	18c5883a 	add	r2,r3,r3
  8072b4:	00c02074 	movhi	r3,129
  8072b8:	18d30004 	addi	r3,r3,19456
  8072bc:	10c5883a 	add	r2,r2,r3
  8072c0:	1080000f 	ldh	r2,0(r2)
  8072c4:	00fd1fc4 	movi	r3,-2945
  8072c8:	90e4703a 	and	r18,r18,r3
  8072cc:	d880a115 	stw	r2,644(sp)
  8072d0:	003faa06 	br	80717c <__svfscanf_r+0x1154>
  8072d4:	d900a117 	ldw	r4,644(sp)
  8072d8:	00c02074 	movhi	r3,129
  8072dc:	18d30004 	addi	r3,r3,19456
  8072e0:	2105883a 	add	r2,r4,r4
  8072e4:	10c5883a 	add	r2,r2,r3
  8072e8:	1080000f 	ldh	r2,0(r2)
  8072ec:	00c00204 	movi	r3,8
  8072f0:	d880a115 	stw	r2,644(sp)
  8072f4:	18bf140e 	bge	r3,r2,806f48 <__svfscanf_r+0xf20>
  8072f8:	00bd1fc4 	movi	r2,-2945
  8072fc:	90a4703a 	and	r18,r18,r2
  807300:	003f9e06 	br	80717c <__svfscanf_r+0x1154>
  807304:	d8c0a117 	ldw	r3,644(sp)
  807308:	00800284 	movi	r2,10
  80730c:	10fffa16 	blt	r2,r3,8072f8 <__svfscanf_r+0x12d0>
  807310:	003f0d06 	br	806f48 <__svfscanf_r+0xf20>
  807314:	90c1800c 	andi	r3,r18,1536
  807318:	00808004 	movi	r2,512
  80731c:	18bf0a1e 	bne	r3,r2,806f48 <__svfscanf_r+0xf20>
  807320:	00bf7fc4 	movi	r2,-513
  807324:	9084703a 	and	r2,r18,r2
  807328:	01000404 	movi	r4,16
  80732c:	14814014 	ori	r18,r2,1280
  807330:	d900a115 	stw	r4,644(sp)
  807334:	003f9106 	br	80717c <__svfscanf_r+0x1154>
  807338:	d880a417 	ldw	r2,656(sp)
  80733c:	dd400404 	addi	r21,sp,16
  807340:	14800017 	ldw	r18,0(r2)
  807344:	9027883a 	mov	r19,r18
  807348:	81000017 	ldw	r4,0(r16)
  80734c:	20800003 	ldbu	r2,0(r4)
  807350:	a885883a 	add	r2,r21,r2
  807354:	10c00007 	ldb	r3,0(r2)
  807358:	18001426 	beq	r3,zero,8073ac <__svfscanf_r+0x1384>
  80735c:	d8c0a317 	ldw	r3,652(sp)
  807360:	80800117 	ldw	r2,4(r16)
  807364:	21800044 	addi	r6,r4,1
  807368:	18ffffc4 	addi	r3,r3,-1
  80736c:	d8c0a315 	stw	r3,652(sp)
  807370:	10ffffc4 	addi	r3,r2,-1
  807374:	80c00115 	stw	r3,4(r16)
  807378:	20800003 	ldbu	r2,0(r4)
  80737c:	90800005 	stb	r2,0(r18)
  807380:	d900a317 	ldw	r4,652(sp)
  807384:	81800015 	stw	r6,0(r16)
  807388:	94800044 	addi	r18,r18,1
  80738c:	20000726 	beq	r4,zero,8073ac <__svfscanf_r+0x1384>
  807390:	80800117 	ldw	r2,4(r16)
  807394:	00bfec16 	blt	zero,r2,807348 <__svfscanf_r+0x1320>
  807398:	b009883a 	mov	r4,r22
  80739c:	800b883a 	mov	r5,r16
  8073a0:	0803aa80 	call	803aa8 <__srefill_r>
  8073a4:	103fe826 	beq	r2,zero,807348 <__svfscanf_r+0x1320>
  8073a8:	9cbb7426 	beq	r19,r18,80617c <__svfscanf_r+0x154>
  8073ac:	94e7c83a 	sub	r19,r18,r19
  8073b0:	983b5226 	beq	r19,zero,8060fc <__svfscanf_r+0xd4>
  8073b4:	90000005 	stb	zero,0(r18)
  8073b8:	d880a417 	ldw	r2,656(sp)
  8073bc:	d8c0a217 	ldw	r3,648(sp)
  8073c0:	8ce3883a 	add	r17,r17,r19
  8073c4:	10800104 	addi	r2,r2,4
  8073c8:	18c00044 	addi	r3,r3,1
  8073cc:	d880a415 	stw	r2,656(sp)
  8073d0:	d8c0a215 	stw	r3,648(sp)
  8073d4:	003b2706 	br	806074 <__svfscanf_r+0x4c>
  8073d8:	9cc00414 	ori	r19,r19,16
  8073dc:	003b6e06 	br	806198 <__svfscanf_r+0x170>
  8073e0:	00c00404 	movi	r3,16
  8073e4:	01002074 	movhi	r4,129
  8073e8:	21316604 	addi	r4,r4,-14952
  8073ec:	9cc08014 	ori	r19,r19,512
  8073f0:	054000c4 	movi	r21,3
  8073f4:	d8c0a115 	stw	r3,644(sp)
  8073f8:	d900a015 	stw	r4,640(sp)
  8073fc:	003bf806 	br	8063e0 <__svfscanf_r+0x3b8>
  807400:	9880040c 	andi	r2,r19,16
  807404:	10001926 	beq	r2,zero,80746c <__svfscanf_r+0x1444>
  807408:	0027883a 	mov	r19,zero
  80740c:	00000b06 	br	80743c <__svfscanf_r+0x1414>
  807410:	80800017 	ldw	r2,0(r16)
  807414:	b009883a 	mov	r4,r22
  807418:	800b883a 	mov	r5,r16
  80741c:	148d883a 	add	r6,r2,r18
  807420:	81800015 	stw	r6,0(r16)
  807424:	9ca7883a 	add	r19,r19,r18
  807428:	0803aa80 	call	803aa8 <__srefill_r>
  80742c:	103c711e 	bne	r2,zero,8065f4 <__svfscanf_r+0x5cc>
  807430:	d900a317 	ldw	r4,652(sp)
  807434:	2489c83a 	sub	r4,r4,r18
  807438:	d900a315 	stw	r4,652(sp)
  80743c:	84800117 	ldw	r18,4(r16)
  807440:	d8c0a317 	ldw	r3,652(sp)
  807444:	90fff216 	blt	r18,r3,807410 <__svfscanf_r+0x13e8>
  807448:	d900a317 	ldw	r4,652(sp)
  80744c:	80800017 	ldw	r2,0(r16)
  807450:	9927883a 	add	r19,r19,r4
  807454:	9107c83a 	sub	r3,r18,r4
  807458:	110d883a 	add	r6,r2,r4
  80745c:	8ce3883a 	add	r17,r17,r19
  807460:	80c00115 	stw	r3,4(r16)
  807464:	81800015 	stw	r6,0(r16)
  807468:	003b0206 	br	806074 <__svfscanf_r+0x4c>
  80746c:	d880a417 	ldw	r2,656(sp)
  807470:	d980a317 	ldw	r6,652(sp)
  807474:	01400044 	movi	r5,1
  807478:	11000017 	ldw	r4,0(r2)
  80747c:	800f883a 	mov	r7,r16
  807480:	08094340 	call	809434 <fread>
  807484:	103b3d26 	beq	r2,zero,80617c <__svfscanf_r+0x154>
  807488:	d8c0a417 	ldw	r3,656(sp)
  80748c:	d900a217 	ldw	r4,648(sp)
  807490:	88a3883a 	add	r17,r17,r2
  807494:	18c00104 	addi	r3,r3,4
  807498:	21000044 	addi	r4,r4,1
  80749c:	d8c0a415 	stw	r3,656(sp)
  8074a0:	d900a215 	stw	r4,648(sp)
  8074a4:	003af306 	br	806074 <__svfscanf_r+0x4c>
  8074a8:	8080030b 	ldhu	r2,12(r16)
  8074ac:	1080100c 	andi	r2,r2,64
  8074b0:	103b1226 	beq	r2,zero,8060fc <__svfscanf_r+0xd4>
  8074b4:	003b3306 	br	806184 <__svfscanf_r+0x15c>
  8074b8:	983b1026 	beq	r19,zero,8060fc <__svfscanf_r+0xd4>
  8074bc:	8ce3883a 	add	r17,r17,r19
  8074c0:	003aec06 	br	806074 <__svfscanf_r+0x4c>
  8074c4:	983c9626 	beq	r19,zero,806720 <__svfscanf_r+0x6f8>
  8074c8:	9cffffc4 	addi	r19,r19,-1
  8074cc:	d8c04404 	addi	r3,sp,272
  8074d0:	1cc5883a 	add	r2,r3,r19
  8074d4:	11400003 	ldbu	r5,0(r2)
  8074d8:	b009883a 	mov	r4,r22
  8074dc:	800d883a 	mov	r6,r16
  8074e0:	080cbb80 	call	80cbb8 <_ungetc_r>
  8074e4:	003ff706 	br	8074c4 <__svfscanf_r+0x149c>
  8074e8:	00bfff84 	movi	r2,-2
  8074ec:	18bc7a1e 	bne	r3,r2,8066d8 <__svfscanf_r+0x6b0>
  8074f0:	003c8406 	br	806704 <__svfscanf_r+0x6dc>
  8074f4:	d900a417 	ldw	r4,656(sp)
  8074f8:	25400017 	ldw	r21,0(r4)
  8074fc:	21000104 	addi	r4,r4,4
  807500:	d900a415 	stw	r4,656(sp)
  807504:	003c4a06 	br	806630 <__svfscanf_r+0x608>
  807508:	00bfff84 	movi	r2,-2
  80750c:	18bc0f1e 	bne	r3,r2,80654c <__svfscanf_r+0x524>
  807510:	003c1506 	br	806568 <__svfscanf_r+0x540>
  807514:	b009883a 	mov	r4,r22
  807518:	800b883a 	mov	r5,r16
  80751c:	0803aa80 	call	803aa8 <__srefill_r>
  807520:	103c1326 	beq	r2,zero,806570 <__svfscanf_r+0x548>
  807524:	903b151e 	bne	r18,zero,80617c <__svfscanf_r+0x154>
  807528:	a83ad21e 	bne	r21,zero,806074 <__svfscanf_r+0x4c>
  80752c:	d880a217 	ldw	r2,648(sp)
  807530:	10800044 	addi	r2,r2,1
  807534:	d880a215 	stw	r2,648(sp)
  807538:	003ace06 	br	806074 <__svfscanf_r+0x4c>
  80753c:	0027883a 	mov	r19,zero
  807540:	003bdd06 	br	8064b8 <__svfscanf_r+0x490>
  807544:	9cc00114 	ori	r19,r19,4
  807548:	003b1306 	br	806198 <__svfscanf_r+0x170>
  80754c:	05400104 	movi	r21,4
  807550:	003ba306 	br	8063e0 <__svfscanf_r+0x3b8>
  807554:	9cc00054 	ori	r19,r19,1
  807558:	00802074 	movhi	r2,129
  80755c:	10b00604 	addi	r2,r2,-16360
  807560:	00c00284 	movi	r3,10
  807564:	054000c4 	movi	r21,3
  807568:	d880a015 	stw	r2,640(sp)
  80756c:	d8c0a115 	stw	r3,644(sp)
  807570:	003b9b06 	br	8063e0 <__svfscanf_r+0x3b8>
  807574:	9cc01014 	ori	r19,r19,64
  807578:	002b883a 	mov	r21,zero
  80757c:	003b9806 	br	8063e0 <__svfscanf_r+0x3b8>
  807580:	a00b883a 	mov	r5,r20
  807584:	d9000404 	addi	r4,sp,16
  807588:	080a8280 	call	80a828 <__sccl>
  80758c:	1029883a 	mov	r20,r2
  807590:	9cc01014 	ori	r19,r19,64
  807594:	05400044 	movi	r21,1
  807598:	003b9106 	br	8063e0 <__svfscanf_r+0x3b8>
  80759c:	9cc00054 	ori	r19,r19,1
  8075a0:	00800204 	movi	r2,8
  8075a4:	00c02074 	movhi	r3,129
  8075a8:	18f16604 	addi	r3,r3,-14952
  8075ac:	054000c4 	movi	r21,3
  8075b0:	d880a115 	stw	r2,644(sp)
  8075b4:	d8c0a015 	stw	r3,640(sp)
  8075b8:	003b8906 	br	8063e0 <__svfscanf_r+0x3b8>
  8075bc:	9880040c 	andi	r2,r19,16
  8075c0:	103aac1e 	bne	r2,zero,806074 <__svfscanf_r+0x4c>
  8075c4:	9880010c 	andi	r2,r19,4
  8075c8:	10002426 	beq	r2,zero,80765c <__svfscanf_r+0x1634>
  8075cc:	d900a417 	ldw	r4,656(sp)
  8075d0:	20800017 	ldw	r2,0(r4)
  8075d4:	21000104 	addi	r4,r4,4
  8075d8:	d900a415 	stw	r4,656(sp)
  8075dc:	1440000d 	sth	r17,0(r2)
  8075e0:	003aa406 	br	806074 <__svfscanf_r+0x4c>
  8075e4:	9cc00094 	ori	r19,r19,2
  8075e8:	003aeb06 	br	806198 <__svfscanf_r+0x170>
  8075ec:	05400084 	movi	r21,2
  8075f0:	003b7b06 	br	8063e0 <__svfscanf_r+0x3b8>
  8075f4:	00800404 	movi	r2,16
  8075f8:	00c02074 	movhi	r3,129
  8075fc:	18f16604 	addi	r3,r3,-14952
  807600:	9cc08814 	ori	r19,r19,544
  807604:	054000c4 	movi	r21,3
  807608:	d880a115 	stw	r2,644(sp)
  80760c:	d8c0a015 	stw	r3,640(sp)
  807610:	003b7306 	br	8063e0 <__svfscanf_r+0x3b8>
  807614:	0009883a 	mov	r4,zero
  807618:	080a8e80 	call	80a8e8 <nanf>
  80761c:	b8800015 	stw	r2,0(r23)
  807620:	003d2706 	br	806ac0 <__svfscanf_r+0xa98>
  807624:	a0c00007 	ldb	r3,0(r20)
  807628:	00801b04 	movi	r2,108
  80762c:	18800826 	beq	r3,r2,807650 <__svfscanf_r+0x1628>
  807630:	9cc00054 	ori	r19,r19,1
  807634:	003ad806 	br	806198 <__svfscanf_r+0x170>
  807638:	01002074 	movhi	r4,129
  80763c:	21300604 	addi	r4,r4,-16360
  807640:	054000c4 	movi	r21,3
  807644:	d900a015 	stw	r4,640(sp)
  807648:	d800a115 	stw	zero,644(sp)
  80764c:	003b6406 	br	8063e0 <__svfscanf_r+0x3b8>
  807650:	a5000044 	addi	r20,r20,1
  807654:	9cc00094 	ori	r19,r19,2
  807658:	003acf06 	br	806198 <__svfscanf_r+0x170>
  80765c:	9880004c 	andi	r2,r19,1
  807660:	1005003a 	cmpeq	r2,r2,zero
  807664:	10000a26 	beq	r2,zero,807690 <__svfscanf_r+0x1668>
  807668:	9880008c 	andi	r2,r19,2
  80766c:	10000826 	beq	r2,zero,807690 <__svfscanf_r+0x1668>
  807670:	d900a417 	ldw	r4,656(sp)
  807674:	8807d7fa 	srai	r3,r17,31
  807678:	20800017 	ldw	r2,0(r4)
  80767c:	21000104 	addi	r4,r4,4
  807680:	d900a415 	stw	r4,656(sp)
  807684:	14400015 	stw	r17,0(r2)
  807688:	10c00115 	stw	r3,4(r2)
  80768c:	003a7906 	br	806074 <__svfscanf_r+0x4c>
  807690:	d8c0a417 	ldw	r3,656(sp)
  807694:	18800017 	ldw	r2,0(r3)
  807698:	18c00104 	addi	r3,r3,4
  80769c:	d8c0a415 	stw	r3,656(sp)
  8076a0:	14400015 	stw	r17,0(r2)
  8076a4:	003a7306 	br	806074 <__svfscanf_r+0x4c>

008076a8 <__svfscanf>:
  8076a8:	00802074 	movhi	r2,129
  8076ac:	109b9704 	addi	r2,r2,28252
  8076b0:	2013883a 	mov	r9,r4
  8076b4:	11000017 	ldw	r4,0(r2)
  8076b8:	2805883a 	mov	r2,r5
  8076bc:	300f883a 	mov	r7,r6
  8076c0:	480b883a 	mov	r5,r9
  8076c4:	100d883a 	mov	r6,r2
  8076c8:	08060281 	jmpi	806028 <__svfscanf_r>

008076cc <_vfscanf_r>:
  8076cc:	defffb04 	addi	sp,sp,-20
  8076d0:	dcc00315 	stw	r19,12(sp)
  8076d4:	dc800215 	stw	r18,8(sp)
  8076d8:	dc400115 	stw	r17,4(sp)
  8076dc:	dc000015 	stw	r16,0(sp)
  8076e0:	dfc00415 	stw	ra,16(sp)
  8076e4:	2021883a 	mov	r16,r4
  8076e8:	2823883a 	mov	r17,r5
  8076ec:	3025883a 	mov	r18,r6
  8076f0:	3827883a 	mov	r19,r7
  8076f4:	20000226 	beq	r4,zero,807700 <_vfscanf_r+0x34>
  8076f8:	20800e17 	ldw	r2,56(r4)
  8076fc:	10000b26 	beq	r2,zero,80772c <_vfscanf_r+0x60>
  807700:	8009883a 	mov	r4,r16
  807704:	880b883a 	mov	r5,r17
  807708:	900d883a 	mov	r6,r18
  80770c:	980f883a 	mov	r7,r19
  807710:	dfc00417 	ldw	ra,16(sp)
  807714:	dcc00317 	ldw	r19,12(sp)
  807718:	dc800217 	ldw	r18,8(sp)
  80771c:	dc400117 	ldw	r17,4(sp)
  807720:	dc000017 	ldw	r16,0(sp)
  807724:	dec00504 	addi	sp,sp,20
  807728:	08060281 	jmpi	806028 <__svfscanf_r>
  80772c:	080146c0 	call	80146c <__sinit>
  807730:	003ff306 	br	807700 <_vfscanf_r+0x34>

00807734 <vfscanf>:
  807734:	defffb04 	addi	sp,sp,-20
  807738:	dcc00315 	stw	r19,12(sp)
  80773c:	04c02074 	movhi	r19,129
  807740:	9cdb9704 	addi	r19,r19,28252
  807744:	98c00017 	ldw	r3,0(r19)
  807748:	dc800215 	stw	r18,8(sp)
  80774c:	dc400115 	stw	r17,4(sp)
  807750:	dc000015 	stw	r16,0(sp)
  807754:	dfc00415 	stw	ra,16(sp)
  807758:	2021883a 	mov	r16,r4
  80775c:	2823883a 	mov	r17,r5
  807760:	3025883a 	mov	r18,r6
  807764:	18000326 	beq	r3,zero,807774 <vfscanf+0x40>
  807768:	18800e17 	ldw	r2,56(r3)
  80776c:	1809883a 	mov	r4,r3
  807770:	10000b26 	beq	r2,zero,8077a0 <vfscanf+0x6c>
  807774:	99000017 	ldw	r4,0(r19)
  807778:	800b883a 	mov	r5,r16
  80777c:	880d883a 	mov	r6,r17
  807780:	900f883a 	mov	r7,r18
  807784:	dfc00417 	ldw	ra,16(sp)
  807788:	dcc00317 	ldw	r19,12(sp)
  80778c:	dc800217 	ldw	r18,8(sp)
  807790:	dc400117 	ldw	r17,4(sp)
  807794:	dc000017 	ldw	r16,0(sp)
  807798:	dec00504 	addi	sp,sp,20
  80779c:	08060281 	jmpi	806028 <__svfscanf_r>
  8077a0:	080146c0 	call	80146c <__sinit>
  8077a4:	003ff306 	br	807774 <vfscanf+0x40>

008077a8 <_write_r>:
  8077a8:	defffd04 	addi	sp,sp,-12
  8077ac:	dc000015 	stw	r16,0(sp)
  8077b0:	040020b4 	movhi	r16,130
  8077b4:	8422ed04 	addi	r16,r16,-29772
  8077b8:	dc400115 	stw	r17,4(sp)
  8077bc:	80000015 	stw	zero,0(r16)
  8077c0:	2023883a 	mov	r17,r4
  8077c4:	2809883a 	mov	r4,r5
  8077c8:	300b883a 	mov	r5,r6
  8077cc:	380d883a 	mov	r6,r7
  8077d0:	dfc00215 	stw	ra,8(sp)
  8077d4:	08114bc0 	call	8114bc <write>
  8077d8:	1007883a 	mov	r3,r2
  8077dc:	00bfffc4 	movi	r2,-1
  8077e0:	18800626 	beq	r3,r2,8077fc <_write_r+0x54>
  8077e4:	1805883a 	mov	r2,r3
  8077e8:	dfc00217 	ldw	ra,8(sp)
  8077ec:	dc400117 	ldw	r17,4(sp)
  8077f0:	dc000017 	ldw	r16,0(sp)
  8077f4:	dec00304 	addi	sp,sp,12
  8077f8:	f800283a 	ret
  8077fc:	80800017 	ldw	r2,0(r16)
  807800:	103ff826 	beq	r2,zero,8077e4 <_write_r+0x3c>
  807804:	88800015 	stw	r2,0(r17)
  807808:	1805883a 	mov	r2,r3
  80780c:	dfc00217 	ldw	ra,8(sp)
  807810:	dc400117 	ldw	r17,4(sp)
  807814:	dc000017 	ldw	r16,0(sp)
  807818:	dec00304 	addi	sp,sp,12
  80781c:	f800283a 	ret

00807820 <__swsetup_r>:
  807820:	00802074 	movhi	r2,129
  807824:	109b9704 	addi	r2,r2,28252
  807828:	10c00017 	ldw	r3,0(r2)
  80782c:	defffd04 	addi	sp,sp,-12
  807830:	dc400115 	stw	r17,4(sp)
  807834:	dc000015 	stw	r16,0(sp)
  807838:	dfc00215 	stw	ra,8(sp)
  80783c:	2023883a 	mov	r17,r4
  807840:	2821883a 	mov	r16,r5
  807844:	18000226 	beq	r3,zero,807850 <__swsetup_r+0x30>
  807848:	18800e17 	ldw	r2,56(r3)
  80784c:	10001f26 	beq	r2,zero,8078cc <__swsetup_r+0xac>
  807850:	8100030b 	ldhu	r4,12(r16)
  807854:	2080020c 	andi	r2,r4,8
  807858:	10002826 	beq	r2,zero,8078fc <__swsetup_r+0xdc>
  80785c:	81400417 	ldw	r5,16(r16)
  807860:	28001d26 	beq	r5,zero,8078d8 <__swsetup_r+0xb8>
  807864:	2080004c 	andi	r2,r4,1
  807868:	1005003a 	cmpeq	r2,r2,zero
  80786c:	10000b26 	beq	r2,zero,80789c <__swsetup_r+0x7c>
  807870:	2080008c 	andi	r2,r4,2
  807874:	10001226 	beq	r2,zero,8078c0 <__swsetup_r+0xa0>
  807878:	0005883a 	mov	r2,zero
  80787c:	80800215 	stw	r2,8(r16)
  807880:	28000b26 	beq	r5,zero,8078b0 <__swsetup_r+0x90>
  807884:	0005883a 	mov	r2,zero
  807888:	dfc00217 	ldw	ra,8(sp)
  80788c:	dc400117 	ldw	r17,4(sp)
  807890:	dc000017 	ldw	r16,0(sp)
  807894:	dec00304 	addi	sp,sp,12
  807898:	f800283a 	ret
  80789c:	80800517 	ldw	r2,20(r16)
  8078a0:	80000215 	stw	zero,8(r16)
  8078a4:	0085c83a 	sub	r2,zero,r2
  8078a8:	80800615 	stw	r2,24(r16)
  8078ac:	283ff51e 	bne	r5,zero,807884 <__swsetup_r+0x64>
  8078b0:	2080200c 	andi	r2,r4,128
  8078b4:	103ff326 	beq	r2,zero,807884 <__swsetup_r+0x64>
  8078b8:	00bfffc4 	movi	r2,-1
  8078bc:	003ff206 	br	807888 <__swsetup_r+0x68>
  8078c0:	80800517 	ldw	r2,20(r16)
  8078c4:	80800215 	stw	r2,8(r16)
  8078c8:	003fed06 	br	807880 <__swsetup_r+0x60>
  8078cc:	1809883a 	mov	r4,r3
  8078d0:	080146c0 	call	80146c <__sinit>
  8078d4:	003fde06 	br	807850 <__swsetup_r+0x30>
  8078d8:	20c0a00c 	andi	r3,r4,640
  8078dc:	00808004 	movi	r2,512
  8078e0:	18bfe026 	beq	r3,r2,807864 <__swsetup_r+0x44>
  8078e4:	8809883a 	mov	r4,r17
  8078e8:	800b883a 	mov	r5,r16
  8078ec:	08027f40 	call	8027f4 <__smakebuf_r>
  8078f0:	8100030b 	ldhu	r4,12(r16)
  8078f4:	81400417 	ldw	r5,16(r16)
  8078f8:	003fda06 	br	807864 <__swsetup_r+0x44>
  8078fc:	2080040c 	andi	r2,r4,16
  807900:	103fed26 	beq	r2,zero,8078b8 <__swsetup_r+0x98>
  807904:	2080010c 	andi	r2,r4,4
  807908:	10001226 	beq	r2,zero,807954 <__swsetup_r+0x134>
  80790c:	81400c17 	ldw	r5,48(r16)
  807910:	28000526 	beq	r5,zero,807928 <__swsetup_r+0x108>
  807914:	80801004 	addi	r2,r16,64
  807918:	28800226 	beq	r5,r2,807924 <__swsetup_r+0x104>
  80791c:	8809883a 	mov	r4,r17
  807920:	08019f00 	call	8019f0 <_free_r>
  807924:	80000c15 	stw	zero,48(r16)
  807928:	8080030b 	ldhu	r2,12(r16)
  80792c:	81400417 	ldw	r5,16(r16)
  807930:	80000115 	stw	zero,4(r16)
  807934:	10bff6cc 	andi	r2,r2,65499
  807938:	8080030d 	sth	r2,12(r16)
  80793c:	81400015 	stw	r5,0(r16)
  807940:	8080030b 	ldhu	r2,12(r16)
  807944:	10800214 	ori	r2,r2,8
  807948:	113fffcc 	andi	r4,r2,65535
  80794c:	8080030d 	sth	r2,12(r16)
  807950:	003fc306 	br	807860 <__swsetup_r+0x40>
  807954:	81400417 	ldw	r5,16(r16)
  807958:	003ff906 	br	807940 <__swsetup_r+0x120>

0080795c <_close_r>:
  80795c:	defffd04 	addi	sp,sp,-12
  807960:	dc000015 	stw	r16,0(sp)
  807964:	040020b4 	movhi	r16,130
  807968:	8422ed04 	addi	r16,r16,-29772
  80796c:	dc400115 	stw	r17,4(sp)
  807970:	80000015 	stw	zero,0(r16)
  807974:	2023883a 	mov	r17,r4
  807978:	2809883a 	mov	r4,r5
  80797c:	dfc00215 	stw	ra,8(sp)
  807980:	08105340 	call	810534 <close>
  807984:	1007883a 	mov	r3,r2
  807988:	00bfffc4 	movi	r2,-1
  80798c:	18800626 	beq	r3,r2,8079a8 <_close_r+0x4c>
  807990:	1805883a 	mov	r2,r3
  807994:	dfc00217 	ldw	ra,8(sp)
  807998:	dc400117 	ldw	r17,4(sp)
  80799c:	dc000017 	ldw	r16,0(sp)
  8079a0:	dec00304 	addi	sp,sp,12
  8079a4:	f800283a 	ret
  8079a8:	80800017 	ldw	r2,0(r16)
  8079ac:	103ff826 	beq	r2,zero,807990 <_close_r+0x34>
  8079b0:	88800015 	stw	r2,0(r17)
  8079b4:	1805883a 	mov	r2,r3
  8079b8:	dfc00217 	ldw	ra,8(sp)
  8079bc:	dc400117 	ldw	r17,4(sp)
  8079c0:	dc000017 	ldw	r16,0(sp)
  8079c4:	dec00304 	addi	sp,sp,12
  8079c8:	f800283a 	ret

008079cc <quorem>:
  8079cc:	28c00417 	ldw	r3,16(r5)
  8079d0:	20800417 	ldw	r2,16(r4)
  8079d4:	defff604 	addi	sp,sp,-40
  8079d8:	ddc00715 	stw	r23,28(sp)
  8079dc:	dd400515 	stw	r21,20(sp)
  8079e0:	dfc00915 	stw	ra,36(sp)
  8079e4:	df000815 	stw	fp,32(sp)
  8079e8:	dd800615 	stw	r22,24(sp)
  8079ec:	dd000415 	stw	r20,16(sp)
  8079f0:	dcc00315 	stw	r19,12(sp)
  8079f4:	dc800215 	stw	r18,8(sp)
  8079f8:	dc400115 	stw	r17,4(sp)
  8079fc:	dc000015 	stw	r16,0(sp)
  807a00:	202f883a 	mov	r23,r4
  807a04:	282b883a 	mov	r21,r5
  807a08:	10c07416 	blt	r2,r3,807bdc <quorem+0x210>
  807a0c:	1c7fffc4 	addi	r17,r3,-1
  807a10:	8c45883a 	add	r2,r17,r17
  807a14:	1085883a 	add	r2,r2,r2
  807a18:	2c000504 	addi	r16,r5,20
  807a1c:	24c00504 	addi	r19,r4,20
  807a20:	14ed883a 	add	r22,r2,r19
  807a24:	80a5883a 	add	r18,r16,r2
  807a28:	b7000017 	ldw	fp,0(r22)
  807a2c:	91400017 	ldw	r5,0(r18)
  807a30:	e009883a 	mov	r4,fp
  807a34:	29400044 	addi	r5,r5,1
  807a38:	080fb400 	call	80fb40 <__udivsi3>
  807a3c:	1029883a 	mov	r20,r2
  807a40:	10003c1e 	bne	r2,zero,807b34 <quorem+0x168>
  807a44:	a80b883a 	mov	r5,r21
  807a48:	b809883a 	mov	r4,r23
  807a4c:	08098a80 	call	8098a8 <__mcmp>
  807a50:	10002b16 	blt	r2,zero,807b00 <quorem+0x134>
  807a54:	a5000044 	addi	r20,r20,1
  807a58:	980f883a 	mov	r7,r19
  807a5c:	0011883a 	mov	r8,zero
  807a60:	0009883a 	mov	r4,zero
  807a64:	81400017 	ldw	r5,0(r16)
  807a68:	38c00017 	ldw	r3,0(r7)
  807a6c:	84000104 	addi	r16,r16,4
  807a70:	28bfffcc 	andi	r2,r5,65535
  807a74:	2085883a 	add	r2,r4,r2
  807a78:	11bfffcc 	andi	r6,r2,65535
  807a7c:	193fffcc 	andi	r4,r3,65535
  807a80:	1004d43a 	srli	r2,r2,16
  807a84:	280ad43a 	srli	r5,r5,16
  807a88:	2189c83a 	sub	r4,r4,r6
  807a8c:	2209883a 	add	r4,r4,r8
  807a90:	1806d43a 	srli	r3,r3,16
  807a94:	288b883a 	add	r5,r5,r2
  807a98:	200dd43a 	srai	r6,r4,16
  807a9c:	28bfffcc 	andi	r2,r5,65535
  807aa0:	1887c83a 	sub	r3,r3,r2
  807aa4:	1987883a 	add	r3,r3,r6
  807aa8:	3900000d 	sth	r4,0(r7)
  807aac:	38c0008d 	sth	r3,2(r7)
  807ab0:	2808d43a 	srli	r4,r5,16
  807ab4:	39c00104 	addi	r7,r7,4
  807ab8:	1811d43a 	srai	r8,r3,16
  807abc:	943fe92e 	bgeu	r18,r16,807a64 <quorem+0x98>
  807ac0:	8c45883a 	add	r2,r17,r17
  807ac4:	1085883a 	add	r2,r2,r2
  807ac8:	9885883a 	add	r2,r19,r2
  807acc:	10c00017 	ldw	r3,0(r2)
  807ad0:	18000b1e 	bne	r3,zero,807b00 <quorem+0x134>
  807ad4:	113fff04 	addi	r4,r2,-4
  807ad8:	9900082e 	bgeu	r19,r4,807afc <quorem+0x130>
  807adc:	10bfff17 	ldw	r2,-4(r2)
  807ae0:	10000326 	beq	r2,zero,807af0 <quorem+0x124>
  807ae4:	00000506 	br	807afc <quorem+0x130>
  807ae8:	20800017 	ldw	r2,0(r4)
  807aec:	1000031e 	bne	r2,zero,807afc <quorem+0x130>
  807af0:	213fff04 	addi	r4,r4,-4
  807af4:	8c7fffc4 	addi	r17,r17,-1
  807af8:	993ffb36 	bltu	r19,r4,807ae8 <quorem+0x11c>
  807afc:	bc400415 	stw	r17,16(r23)
  807b00:	a005883a 	mov	r2,r20
  807b04:	dfc00917 	ldw	ra,36(sp)
  807b08:	df000817 	ldw	fp,32(sp)
  807b0c:	ddc00717 	ldw	r23,28(sp)
  807b10:	dd800617 	ldw	r22,24(sp)
  807b14:	dd400517 	ldw	r21,20(sp)
  807b18:	dd000417 	ldw	r20,16(sp)
  807b1c:	dcc00317 	ldw	r19,12(sp)
  807b20:	dc800217 	ldw	r18,8(sp)
  807b24:	dc400117 	ldw	r17,4(sp)
  807b28:	dc000017 	ldw	r16,0(sp)
  807b2c:	dec00a04 	addi	sp,sp,40
  807b30:	f800283a 	ret
  807b34:	980f883a 	mov	r7,r19
  807b38:	8011883a 	mov	r8,r16
  807b3c:	0013883a 	mov	r9,zero
  807b40:	000d883a 	mov	r6,zero
  807b44:	40c00017 	ldw	r3,0(r8)
  807b48:	39000017 	ldw	r4,0(r7)
  807b4c:	42000104 	addi	r8,r8,4
  807b50:	18bfffcc 	andi	r2,r3,65535
  807b54:	a085383a 	mul	r2,r20,r2
  807b58:	1806d43a 	srli	r3,r3,16
  807b5c:	217fffcc 	andi	r5,r4,65535
  807b60:	3085883a 	add	r2,r6,r2
  807b64:	11bfffcc 	andi	r6,r2,65535
  807b68:	a0c7383a 	mul	r3,r20,r3
  807b6c:	1004d43a 	srli	r2,r2,16
  807b70:	298bc83a 	sub	r5,r5,r6
  807b74:	2a4b883a 	add	r5,r5,r9
  807b78:	2008d43a 	srli	r4,r4,16
  807b7c:	1887883a 	add	r3,r3,r2
  807b80:	280dd43a 	srai	r6,r5,16
  807b84:	18bfffcc 	andi	r2,r3,65535
  807b88:	2089c83a 	sub	r4,r4,r2
  807b8c:	2189883a 	add	r4,r4,r6
  807b90:	3900008d 	sth	r4,2(r7)
  807b94:	3940000d 	sth	r5,0(r7)
  807b98:	180cd43a 	srli	r6,r3,16
  807b9c:	39c00104 	addi	r7,r7,4
  807ba0:	2013d43a 	srai	r9,r4,16
  807ba4:	923fe72e 	bgeu	r18,r8,807b44 <quorem+0x178>
  807ba8:	e03fa61e 	bne	fp,zero,807a44 <quorem+0x78>
  807bac:	b0ffff04 	addi	r3,r22,-4
  807bb0:	98c0082e 	bgeu	r19,r3,807bd4 <quorem+0x208>
  807bb4:	b0bfff17 	ldw	r2,-4(r22)
  807bb8:	10000326 	beq	r2,zero,807bc8 <quorem+0x1fc>
  807bbc:	00000506 	br	807bd4 <quorem+0x208>
  807bc0:	18800017 	ldw	r2,0(r3)
  807bc4:	1000031e 	bne	r2,zero,807bd4 <quorem+0x208>
  807bc8:	18ffff04 	addi	r3,r3,-4
  807bcc:	8c7fffc4 	addi	r17,r17,-1
  807bd0:	98fffb36 	bltu	r19,r3,807bc0 <quorem+0x1f4>
  807bd4:	bc400415 	stw	r17,16(r23)
  807bd8:	003f9a06 	br	807a44 <quorem+0x78>
  807bdc:	0005883a 	mov	r2,zero
  807be0:	003fc806 	br	807b04 <quorem+0x138>

00807be4 <_dtoa_r>:
  807be4:	22001017 	ldw	r8,64(r4)
  807be8:	deffda04 	addi	sp,sp,-152
  807bec:	dd402115 	stw	r21,132(sp)
  807bf0:	dd002015 	stw	r20,128(sp)
  807bf4:	dc801e15 	stw	r18,120(sp)
  807bf8:	dc401d15 	stw	r17,116(sp)
  807bfc:	dfc02515 	stw	ra,148(sp)
  807c00:	df002415 	stw	fp,144(sp)
  807c04:	ddc02315 	stw	r23,140(sp)
  807c08:	dd802215 	stw	r22,136(sp)
  807c0c:	dcc01f15 	stw	r19,124(sp)
  807c10:	dc001c15 	stw	r16,112(sp)
  807c14:	d9001615 	stw	r4,88(sp)
  807c18:	3023883a 	mov	r17,r6
  807c1c:	2829883a 	mov	r20,r5
  807c20:	d9c01715 	stw	r7,92(sp)
  807c24:	dc802817 	ldw	r18,160(sp)
  807c28:	302b883a 	mov	r21,r6
  807c2c:	40000a26 	beq	r8,zero,807c58 <_dtoa_r+0x74>
  807c30:	20801117 	ldw	r2,68(r4)
  807c34:	400b883a 	mov	r5,r8
  807c38:	40800115 	stw	r2,4(r8)
  807c3c:	20c01117 	ldw	r3,68(r4)
  807c40:	00800044 	movi	r2,1
  807c44:	10c4983a 	sll	r2,r2,r3
  807c48:	40800215 	stw	r2,8(r8)
  807c4c:	080974c0 	call	80974c <_Bfree>
  807c50:	d8c01617 	ldw	r3,88(sp)
  807c54:	18001015 	stw	zero,64(r3)
  807c58:	8800a316 	blt	r17,zero,807ee8 <_dtoa_r+0x304>
  807c5c:	90000015 	stw	zero,0(r18)
  807c60:	a8dffc2c 	andhi	r3,r21,32752
  807c64:	009ffc34 	movhi	r2,32752
  807c68:	18809126 	beq	r3,r2,807eb0 <_dtoa_r+0x2cc>
  807c6c:	000d883a 	mov	r6,zero
  807c70:	000f883a 	mov	r7,zero
  807c74:	a009883a 	mov	r4,r20
  807c78:	a80b883a 	mov	r5,r21
  807c7c:	dd001215 	stw	r20,72(sp)
  807c80:	dd401315 	stw	r21,76(sp)
  807c84:	080f3840 	call	80f384 <__nedf2>
  807c88:	1000171e 	bne	r2,zero,807ce8 <_dtoa_r+0x104>
  807c8c:	d9802717 	ldw	r6,156(sp)
  807c90:	00800044 	movi	r2,1
  807c94:	30800015 	stw	r2,0(r6)
  807c98:	d8802917 	ldw	r2,164(sp)
  807c9c:	10029b26 	beq	r2,zero,80870c <_dtoa_r+0xb28>
  807ca0:	d9002917 	ldw	r4,164(sp)
  807ca4:	00802074 	movhi	r2,129
  807ca8:	1092f544 	addi	r2,r2,19413
  807cac:	10ffffc4 	addi	r3,r2,-1
  807cb0:	20800015 	stw	r2,0(r4)
  807cb4:	1805883a 	mov	r2,r3
  807cb8:	dfc02517 	ldw	ra,148(sp)
  807cbc:	df002417 	ldw	fp,144(sp)
  807cc0:	ddc02317 	ldw	r23,140(sp)
  807cc4:	dd802217 	ldw	r22,136(sp)
  807cc8:	dd402117 	ldw	r21,132(sp)
  807ccc:	dd002017 	ldw	r20,128(sp)
  807cd0:	dcc01f17 	ldw	r19,124(sp)
  807cd4:	dc801e17 	ldw	r18,120(sp)
  807cd8:	dc401d17 	ldw	r17,116(sp)
  807cdc:	dc001c17 	ldw	r16,112(sp)
  807ce0:	dec02604 	addi	sp,sp,152
  807ce4:	f800283a 	ret
  807ce8:	d9001617 	ldw	r4,88(sp)
  807cec:	d9401217 	ldw	r5,72(sp)
  807cf0:	d8800104 	addi	r2,sp,4
  807cf4:	a80d883a 	mov	r6,r21
  807cf8:	d9c00204 	addi	r7,sp,8
  807cfc:	d8800015 	stw	r2,0(sp)
  807d00:	0809d880 	call	809d88 <__d2b>
  807d04:	d8800715 	stw	r2,28(sp)
  807d08:	a804d53a 	srli	r2,r21,20
  807d0c:	1101ffcc 	andi	r4,r2,2047
  807d10:	20008626 	beq	r4,zero,807f2c <_dtoa_r+0x348>
  807d14:	d8c01217 	ldw	r3,72(sp)
  807d18:	00800434 	movhi	r2,16
  807d1c:	10bfffc4 	addi	r2,r2,-1
  807d20:	ddc00117 	ldw	r23,4(sp)
  807d24:	a884703a 	and	r2,r21,r2
  807d28:	1811883a 	mov	r8,r3
  807d2c:	124ffc34 	orhi	r9,r2,16368
  807d30:	25bf0044 	addi	r22,r4,-1023
  807d34:	d8000815 	stw	zero,32(sp)
  807d38:	0005883a 	mov	r2,zero
  807d3c:	00cffe34 	movhi	r3,16376
  807d40:	480b883a 	mov	r5,r9
  807d44:	4009883a 	mov	r4,r8
  807d48:	180f883a 	mov	r7,r3
  807d4c:	100d883a 	mov	r6,r2
  807d50:	080ebec0 	call	80ebec <__subdf3>
  807d54:	0218dbf4 	movhi	r8,25455
  807d58:	4210d844 	addi	r8,r8,17249
  807d5c:	024ff4f4 	movhi	r9,16339
  807d60:	4a61e9c4 	addi	r9,r9,-30809
  807d64:	480f883a 	mov	r7,r9
  807d68:	400d883a 	mov	r6,r8
  807d6c:	180b883a 	mov	r5,r3
  807d70:	1009883a 	mov	r4,r2
  807d74:	080ece00 	call	80ece0 <__muldf3>
  807d78:	0222d874 	movhi	r8,35681
  807d7c:	42322cc4 	addi	r8,r8,-14157
  807d80:	024ff1f4 	movhi	r9,16327
  807d84:	4a628a04 	addi	r9,r9,-30168
  807d88:	480f883a 	mov	r7,r9
  807d8c:	400d883a 	mov	r6,r8
  807d90:	180b883a 	mov	r5,r3
  807d94:	1009883a 	mov	r4,r2
  807d98:	080ec6c0 	call	80ec6c <__adddf3>
  807d9c:	b009883a 	mov	r4,r22
  807da0:	1021883a 	mov	r16,r2
  807da4:	1823883a 	mov	r17,r3
  807da8:	080f62c0 	call	80f62c <__floatsidf>
  807dac:	021427f4 	movhi	r8,20639
  807db0:	421e7ec4 	addi	r8,r8,31227
  807db4:	024ff4f4 	movhi	r9,16339
  807db8:	4a5104c4 	addi	r9,r9,17427
  807dbc:	480f883a 	mov	r7,r9
  807dc0:	400d883a 	mov	r6,r8
  807dc4:	180b883a 	mov	r5,r3
  807dc8:	1009883a 	mov	r4,r2
  807dcc:	080ece00 	call	80ece0 <__muldf3>
  807dd0:	180f883a 	mov	r7,r3
  807dd4:	880b883a 	mov	r5,r17
  807dd8:	100d883a 	mov	r6,r2
  807ddc:	8009883a 	mov	r4,r16
  807de0:	080ec6c0 	call	80ec6c <__adddf3>
  807de4:	1009883a 	mov	r4,r2
  807de8:	180b883a 	mov	r5,r3
  807dec:	1021883a 	mov	r16,r2
  807df0:	1823883a 	mov	r17,r3
  807df4:	080f7240 	call	80f724 <__fixdfsi>
  807df8:	000d883a 	mov	r6,zero
  807dfc:	000f883a 	mov	r7,zero
  807e00:	8009883a 	mov	r4,r16
  807e04:	880b883a 	mov	r5,r17
  807e08:	d8800d15 	stw	r2,52(sp)
  807e0c:	080f51c0 	call	80f51c <__ltdf2>
  807e10:	10031716 	blt	r2,zero,808a70 <_dtoa_r+0xe8c>
  807e14:	d8c00d17 	ldw	r3,52(sp)
  807e18:	00800584 	movi	r2,22
  807e1c:	10c1482e 	bgeu	r2,r3,808340 <_dtoa_r+0x75c>
  807e20:	01000044 	movi	r4,1
  807e24:	d9000c15 	stw	r4,48(sp)
  807e28:	bd85c83a 	sub	r2,r23,r22
  807e2c:	11bfffc4 	addi	r6,r2,-1
  807e30:	30030b16 	blt	r6,zero,808a60 <_dtoa_r+0xe7c>
  807e34:	d9800a15 	stw	r6,40(sp)
  807e38:	d8001115 	stw	zero,68(sp)
  807e3c:	d8c00d17 	ldw	r3,52(sp)
  807e40:	1802ff16 	blt	r3,zero,808a40 <_dtoa_r+0xe5c>
  807e44:	d9000a17 	ldw	r4,40(sp)
  807e48:	d8c00915 	stw	r3,36(sp)
  807e4c:	d8001015 	stw	zero,64(sp)
  807e50:	20c9883a 	add	r4,r4,r3
  807e54:	d9000a15 	stw	r4,40(sp)
  807e58:	d9001717 	ldw	r4,92(sp)
  807e5c:	00800244 	movi	r2,9
  807e60:	11004636 	bltu	r2,r4,807f7c <_dtoa_r+0x398>
  807e64:	00800144 	movi	r2,5
  807e68:	11020416 	blt	r2,r4,80867c <_dtoa_r+0xa98>
  807e6c:	04400044 	movi	r17,1
  807e70:	d8c01717 	ldw	r3,92(sp)
  807e74:	00800144 	movi	r2,5
  807e78:	10c1ed36 	bltu	r2,r3,808630 <_dtoa_r+0xa4c>
  807e7c:	18c5883a 	add	r2,r3,r3
  807e80:	1085883a 	add	r2,r2,r2
  807e84:	00c02034 	movhi	r3,128
  807e88:	18dfa604 	addi	r3,r3,32408
  807e8c:	10c5883a 	add	r2,r2,r3
  807e90:	11000017 	ldw	r4,0(r2)
  807e94:	2000683a 	jmp	r4
  807e98:	00807f84 	movi	r2,510
  807e9c:	00807f84 	movi	r2,510
  807ea0:	00808984 	movi	r2,550
  807ea4:	0080895c 	xori	r2,zero,549
  807ea8:	008089a0 	cmpeqi	r2,zero,550
  807eac:	008089ac 	andhi	r2,zero,550
  807eb0:	d9002717 	ldw	r4,156(sp)
  807eb4:	0089c3c4 	movi	r2,9999
  807eb8:	20800015 	stw	r2,0(r4)
  807ebc:	a0001026 	beq	r20,zero,807f00 <_dtoa_r+0x31c>
  807ec0:	00c02074 	movhi	r3,129
  807ec4:	18d3ad04 	addi	r3,r3,20148
  807ec8:	d9802917 	ldw	r6,164(sp)
  807ecc:	303f7926 	beq	r6,zero,807cb4 <_dtoa_r+0xd0>
  807ed0:	188000c7 	ldb	r2,3(r3)
  807ed4:	190000c4 	addi	r4,r3,3
  807ed8:	1000101e 	bne	r2,zero,807f1c <_dtoa_r+0x338>
  807edc:	d8802917 	ldw	r2,164(sp)
  807ee0:	11000015 	stw	r4,0(r2)
  807ee4:	003f7306 	br	807cb4 <_dtoa_r+0xd0>
  807ee8:	00a00034 	movhi	r2,32768
  807eec:	10bfffc4 	addi	r2,r2,-1
  807ef0:	00c00044 	movi	r3,1
  807ef4:	88aa703a 	and	r21,r17,r2
  807ef8:	90c00015 	stw	r3,0(r18)
  807efc:	003f5806 	br	807c60 <_dtoa_r+0x7c>
  807f00:	00800434 	movhi	r2,16
  807f04:	10bfffc4 	addi	r2,r2,-1
  807f08:	a884703a 	and	r2,r21,r2
  807f0c:	103fec1e 	bne	r2,zero,807ec0 <_dtoa_r+0x2dc>
  807f10:	00c02074 	movhi	r3,129
  807f14:	18d3aa04 	addi	r3,r3,20136
  807f18:	003feb06 	br	807ec8 <_dtoa_r+0x2e4>
  807f1c:	d8802917 	ldw	r2,164(sp)
  807f20:	19000204 	addi	r4,r3,8
  807f24:	11000015 	stw	r4,0(r2)
  807f28:	003f6206 	br	807cb4 <_dtoa_r+0xd0>
  807f2c:	ddc00117 	ldw	r23,4(sp)
  807f30:	d8800217 	ldw	r2,8(sp)
  807f34:	01000804 	movi	r4,32
  807f38:	b8c10c84 	addi	r3,r23,1074
  807f3c:	18a3883a 	add	r17,r3,r2
  807f40:	2441b80e 	bge	r4,r17,808624 <_dtoa_r+0xa40>
  807f44:	00c01004 	movi	r3,64
  807f48:	1c47c83a 	sub	r3,r3,r17
  807f4c:	88bff804 	addi	r2,r17,-32
  807f50:	a8c6983a 	sll	r3,r21,r3
  807f54:	a084d83a 	srl	r2,r20,r2
  807f58:	1888b03a 	or	r4,r3,r2
  807f5c:	080f8700 	call	80f870 <__floatunsidf>
  807f60:	1011883a 	mov	r8,r2
  807f64:	00bf8434 	movhi	r2,65040
  807f68:	01000044 	movi	r4,1
  807f6c:	10d3883a 	add	r9,r2,r3
  807f70:	8dbef344 	addi	r22,r17,-1075
  807f74:	d9000815 	stw	r4,32(sp)
  807f78:	003f6f06 	br	807d38 <_dtoa_r+0x154>
  807f7c:	d8001715 	stw	zero,92(sp)
  807f80:	04400044 	movi	r17,1
  807f84:	00bfffc4 	movi	r2,-1
  807f88:	00c00044 	movi	r3,1
  807f8c:	d8800e15 	stw	r2,56(sp)
  807f90:	d8002615 	stw	zero,152(sp)
  807f94:	d8800f15 	stw	r2,60(sp)
  807f98:	d8c00b15 	stw	r3,44(sp)
  807f9c:	1021883a 	mov	r16,r2
  807fa0:	d8801617 	ldw	r2,88(sp)
  807fa4:	10001115 	stw	zero,68(r2)
  807fa8:	d8801617 	ldw	r2,88(sp)
  807fac:	11401117 	ldw	r5,68(r2)
  807fb0:	1009883a 	mov	r4,r2
  807fb4:	0809ccc0 	call	809ccc <_Balloc>
  807fb8:	d8c01617 	ldw	r3,88(sp)
  807fbc:	d8800515 	stw	r2,20(sp)
  807fc0:	18801015 	stw	r2,64(r3)
  807fc4:	00800384 	movi	r2,14
  807fc8:	14006836 	bltu	r2,r16,80816c <_dtoa_r+0x588>
  807fcc:	8805003a 	cmpeq	r2,r17,zero
  807fd0:	1000661e 	bne	r2,zero,80816c <_dtoa_r+0x588>
  807fd4:	d9000d17 	ldw	r4,52(sp)
  807fd8:	0102300e 	bge	zero,r4,80889c <_dtoa_r+0xcb8>
  807fdc:	208003cc 	andi	r2,r4,15
  807fe0:	100490fa 	slli	r2,r2,3
  807fe4:	2025d13a 	srai	r18,r4,4
  807fe8:	00c02074 	movhi	r3,129
  807fec:	18d3be04 	addi	r3,r3,20216
  807ff0:	10c5883a 	add	r2,r2,r3
  807ff4:	90c0040c 	andi	r3,r18,16
  807ff8:	14000017 	ldw	r16,0(r2)
  807ffc:	14400117 	ldw	r17,4(r2)
  808000:	18036a1e 	bne	r3,zero,808dac <_dtoa_r+0x11c8>
  808004:	05800084 	movi	r22,2
  808008:	90001026 	beq	r18,zero,80804c <_dtoa_r+0x468>
  80800c:	04c02074 	movhi	r19,129
  808010:	9cd3f004 	addi	r19,r19,20416
  808014:	9080004c 	andi	r2,r18,1
  808018:	1005003a 	cmpeq	r2,r2,zero
  80801c:	1000081e 	bne	r2,zero,808040 <_dtoa_r+0x45c>
  808020:	99800017 	ldw	r6,0(r19)
  808024:	99c00117 	ldw	r7,4(r19)
  808028:	880b883a 	mov	r5,r17
  80802c:	8009883a 	mov	r4,r16
  808030:	080ece00 	call	80ece0 <__muldf3>
  808034:	1021883a 	mov	r16,r2
  808038:	b5800044 	addi	r22,r22,1
  80803c:	1823883a 	mov	r17,r3
  808040:	9025d07a 	srai	r18,r18,1
  808044:	9cc00204 	addi	r19,r19,8
  808048:	903ff21e 	bne	r18,zero,808014 <_dtoa_r+0x430>
  80804c:	a80b883a 	mov	r5,r21
  808050:	a009883a 	mov	r4,r20
  808054:	880f883a 	mov	r7,r17
  808058:	800d883a 	mov	r6,r16
  80805c:	080f0a40 	call	80f0a4 <__divdf3>
  808060:	1029883a 	mov	r20,r2
  808064:	182b883a 	mov	r21,r3
  808068:	d8c00c17 	ldw	r3,48(sp)
  80806c:	1805003a 	cmpeq	r2,r3,zero
  808070:	1000081e 	bne	r2,zero,808094 <_dtoa_r+0x4b0>
  808074:	0005883a 	mov	r2,zero
  808078:	00cffc34 	movhi	r3,16368
  80807c:	180f883a 	mov	r7,r3
  808080:	a009883a 	mov	r4,r20
  808084:	a80b883a 	mov	r5,r21
  808088:	100d883a 	mov	r6,r2
  80808c:	080f51c0 	call	80f51c <__ltdf2>
  808090:	1003fe16 	blt	r2,zero,80908c <_dtoa_r+0x14a8>
  808094:	b009883a 	mov	r4,r22
  808098:	080f62c0 	call	80f62c <__floatsidf>
  80809c:	180b883a 	mov	r5,r3
  8080a0:	1009883a 	mov	r4,r2
  8080a4:	a00d883a 	mov	r6,r20
  8080a8:	a80f883a 	mov	r7,r21
  8080ac:	080ece00 	call	80ece0 <__muldf3>
  8080b0:	0011883a 	mov	r8,zero
  8080b4:	02500734 	movhi	r9,16412
  8080b8:	1009883a 	mov	r4,r2
  8080bc:	180b883a 	mov	r5,r3
  8080c0:	480f883a 	mov	r7,r9
  8080c4:	400d883a 	mov	r6,r8
  8080c8:	080ec6c0 	call	80ec6c <__adddf3>
  8080cc:	d9000f17 	ldw	r4,60(sp)
  8080d0:	102d883a 	mov	r22,r2
  8080d4:	00bf3034 	movhi	r2,64704
  8080d8:	18b9883a 	add	fp,r3,r2
  8080dc:	e02f883a 	mov	r23,fp
  8080e0:	20028f1e 	bne	r4,zero,808b20 <_dtoa_r+0xf3c>
  8080e4:	0005883a 	mov	r2,zero
  8080e8:	00d00534 	movhi	r3,16404
  8080ec:	a009883a 	mov	r4,r20
  8080f0:	a80b883a 	mov	r5,r21
  8080f4:	180f883a 	mov	r7,r3
  8080f8:	100d883a 	mov	r6,r2
  8080fc:	080ebec0 	call	80ebec <__subdf3>
  808100:	1009883a 	mov	r4,r2
  808104:	e00f883a 	mov	r7,fp
  808108:	180b883a 	mov	r5,r3
  80810c:	b00d883a 	mov	r6,r22
  808110:	1025883a 	mov	r18,r2
  808114:	1827883a 	mov	r19,r3
  808118:	080f40c0 	call	80f40c <__gtdf2>
  80811c:	00834f16 	blt	zero,r2,808e5c <_dtoa_r+0x1278>
  808120:	e0e0003c 	xorhi	r3,fp,32768
  808124:	9009883a 	mov	r4,r18
  808128:	980b883a 	mov	r5,r19
  80812c:	180f883a 	mov	r7,r3
  808130:	b00d883a 	mov	r6,r22
  808134:	080f51c0 	call	80f51c <__ltdf2>
  808138:	1000080e 	bge	r2,zero,80815c <_dtoa_r+0x578>
  80813c:	0027883a 	mov	r19,zero
  808140:	0025883a 	mov	r18,zero
  808144:	d8802617 	ldw	r2,152(sp)
  808148:	df000517 	ldw	fp,20(sp)
  80814c:	d8000615 	stw	zero,24(sp)
  808150:	0084303a 	nor	r2,zero,r2
  808154:	d8800d15 	stw	r2,52(sp)
  808158:	00019b06 	br	8087c8 <_dtoa_r+0xbe4>
  80815c:	d9801217 	ldw	r6,72(sp)
  808160:	d8801317 	ldw	r2,76(sp)
  808164:	3029883a 	mov	r20,r6
  808168:	102b883a 	mov	r21,r2
  80816c:	d8c00217 	ldw	r3,8(sp)
  808170:	18008516 	blt	r3,zero,808388 <_dtoa_r+0x7a4>
  808174:	d9000d17 	ldw	r4,52(sp)
  808178:	00800384 	movi	r2,14
  80817c:	11008216 	blt	r2,r4,808388 <_dtoa_r+0x7a4>
  808180:	200490fa 	slli	r2,r4,3
  808184:	d9802617 	ldw	r6,152(sp)
  808188:	00c02074 	movhi	r3,129
  80818c:	18d3be04 	addi	r3,r3,20216
  808190:	10c5883a 	add	r2,r2,r3
  808194:	14800017 	ldw	r18,0(r2)
  808198:	14c00117 	ldw	r19,4(r2)
  80819c:	30031e16 	blt	r6,zero,808e18 <_dtoa_r+0x1234>
  8081a0:	d9000517 	ldw	r4,20(sp)
  8081a4:	d8c00f17 	ldw	r3,60(sp)
  8081a8:	a823883a 	mov	r17,r21
  8081ac:	a021883a 	mov	r16,r20
  8081b0:	192b883a 	add	r21,r3,r4
  8081b4:	2039883a 	mov	fp,r4
  8081b8:	00000f06 	br	8081f8 <_dtoa_r+0x614>
  8081bc:	0005883a 	mov	r2,zero
  8081c0:	00d00934 	movhi	r3,16420
  8081c4:	5009883a 	mov	r4,r10
  8081c8:	580b883a 	mov	r5,r11
  8081cc:	180f883a 	mov	r7,r3
  8081d0:	100d883a 	mov	r6,r2
  8081d4:	080ece00 	call	80ece0 <__muldf3>
  8081d8:	180b883a 	mov	r5,r3
  8081dc:	000d883a 	mov	r6,zero
  8081e0:	000f883a 	mov	r7,zero
  8081e4:	1009883a 	mov	r4,r2
  8081e8:	1021883a 	mov	r16,r2
  8081ec:	1823883a 	mov	r17,r3
  8081f0:	080f3840 	call	80f384 <__nedf2>
  8081f4:	10004526 	beq	r2,zero,80830c <_dtoa_r+0x728>
  8081f8:	900d883a 	mov	r6,r18
  8081fc:	980f883a 	mov	r7,r19
  808200:	8009883a 	mov	r4,r16
  808204:	880b883a 	mov	r5,r17
  808208:	080f0a40 	call	80f0a4 <__divdf3>
  80820c:	180b883a 	mov	r5,r3
  808210:	1009883a 	mov	r4,r2
  808214:	080f7240 	call	80f724 <__fixdfsi>
  808218:	1009883a 	mov	r4,r2
  80821c:	1029883a 	mov	r20,r2
  808220:	080f62c0 	call	80f62c <__floatsidf>
  808224:	180f883a 	mov	r7,r3
  808228:	9009883a 	mov	r4,r18
  80822c:	980b883a 	mov	r5,r19
  808230:	100d883a 	mov	r6,r2
  808234:	080ece00 	call	80ece0 <__muldf3>
  808238:	180f883a 	mov	r7,r3
  80823c:	880b883a 	mov	r5,r17
  808240:	8009883a 	mov	r4,r16
  808244:	100d883a 	mov	r6,r2
  808248:	080ebec0 	call	80ebec <__subdf3>
  80824c:	1015883a 	mov	r10,r2
  808250:	a0800c04 	addi	r2,r20,48
  808254:	e0800005 	stb	r2,0(fp)
  808258:	e7000044 	addi	fp,fp,1
  80825c:	1817883a 	mov	r11,r3
  808260:	e57fd61e 	bne	fp,r21,8081bc <_dtoa_r+0x5d8>
  808264:	500d883a 	mov	r6,r10
  808268:	180f883a 	mov	r7,r3
  80826c:	5009883a 	mov	r4,r10
  808270:	180b883a 	mov	r5,r3
  808274:	080ec6c0 	call	80ec6c <__adddf3>
  808278:	100d883a 	mov	r6,r2
  80827c:	9009883a 	mov	r4,r18
  808280:	980b883a 	mov	r5,r19
  808284:	180f883a 	mov	r7,r3
  808288:	1021883a 	mov	r16,r2
  80828c:	1823883a 	mov	r17,r3
  808290:	080f51c0 	call	80f51c <__ltdf2>
  808294:	10000816 	blt	r2,zero,8082b8 <_dtoa_r+0x6d4>
  808298:	980b883a 	mov	r5,r19
  80829c:	800d883a 	mov	r6,r16
  8082a0:	880f883a 	mov	r7,r17
  8082a4:	9009883a 	mov	r4,r18
  8082a8:	080f2fc0 	call	80f2fc <__eqdf2>
  8082ac:	1000171e 	bne	r2,zero,80830c <_dtoa_r+0x728>
  8082b0:	a080004c 	andi	r2,r20,1
  8082b4:	10001526 	beq	r2,zero,80830c <_dtoa_r+0x728>
  8082b8:	d8800d17 	ldw	r2,52(sp)
  8082bc:	d8800415 	stw	r2,16(sp)
  8082c0:	e009883a 	mov	r4,fp
  8082c4:	213fffc4 	addi	r4,r4,-1
  8082c8:	20c00007 	ldb	r3,0(r4)
  8082cc:	00800e44 	movi	r2,57
  8082d0:	1880081e 	bne	r3,r2,8082f4 <_dtoa_r+0x710>
  8082d4:	d8800517 	ldw	r2,20(sp)
  8082d8:	113ffa1e 	bne	r2,r4,8082c4 <_dtoa_r+0x6e0>
  8082dc:	d8c00417 	ldw	r3,16(sp)
  8082e0:	d9800517 	ldw	r6,20(sp)
  8082e4:	00800c04 	movi	r2,48
  8082e8:	18c00044 	addi	r3,r3,1
  8082ec:	d8c00415 	stw	r3,16(sp)
  8082f0:	30800005 	stb	r2,0(r6)
  8082f4:	20800003 	ldbu	r2,0(r4)
  8082f8:	d8c00417 	ldw	r3,16(sp)
  8082fc:	27000044 	addi	fp,r4,1
  808300:	10800044 	addi	r2,r2,1
  808304:	d8c00d15 	stw	r3,52(sp)
  808308:	20800005 	stb	r2,0(r4)
  80830c:	d9001617 	ldw	r4,88(sp)
  808310:	d9400717 	ldw	r5,28(sp)
  808314:	080974c0 	call	80974c <_Bfree>
  808318:	e0000005 	stb	zero,0(fp)
  80831c:	d9800d17 	ldw	r6,52(sp)
  808320:	d8c02717 	ldw	r3,156(sp)
  808324:	d9002917 	ldw	r4,164(sp)
  808328:	30800044 	addi	r2,r6,1
  80832c:	18800015 	stw	r2,0(r3)
  808330:	20029c26 	beq	r4,zero,808da4 <_dtoa_r+0x11c0>
  808334:	d8c00517 	ldw	r3,20(sp)
  808338:	27000015 	stw	fp,0(r4)
  80833c:	003e5d06 	br	807cb4 <_dtoa_r+0xd0>
  808340:	d9800d17 	ldw	r6,52(sp)
  808344:	00c02074 	movhi	r3,129
  808348:	18d3be04 	addi	r3,r3,20216
  80834c:	d9001217 	ldw	r4,72(sp)
  808350:	300490fa 	slli	r2,r6,3
  808354:	d9401317 	ldw	r5,76(sp)
  808358:	10c5883a 	add	r2,r2,r3
  80835c:	12000017 	ldw	r8,0(r2)
  808360:	12400117 	ldw	r9,4(r2)
  808364:	400d883a 	mov	r6,r8
  808368:	480f883a 	mov	r7,r9
  80836c:	080f51c0 	call	80f51c <__ltdf2>
  808370:	1000030e 	bge	r2,zero,808380 <_dtoa_r+0x79c>
  808374:	d8800d17 	ldw	r2,52(sp)
  808378:	10bfffc4 	addi	r2,r2,-1
  80837c:	d8800d15 	stw	r2,52(sp)
  808380:	d8000c15 	stw	zero,48(sp)
  808384:	003ea806 	br	807e28 <_dtoa_r+0x244>
  808388:	d9000b17 	ldw	r4,44(sp)
  80838c:	202cc03a 	cmpne	r22,r4,zero
  808390:	b000c71e 	bne	r22,zero,8086b0 <_dtoa_r+0xacc>
  808394:	dc001117 	ldw	r16,68(sp)
  808398:	dc801017 	ldw	r18,64(sp)
  80839c:	0027883a 	mov	r19,zero
  8083a0:	04000b0e 	bge	zero,r16,8083d0 <_dtoa_r+0x7ec>
  8083a4:	d8c00a17 	ldw	r3,40(sp)
  8083a8:	00c0090e 	bge	zero,r3,8083d0 <_dtoa_r+0x7ec>
  8083ac:	8005883a 	mov	r2,r16
  8083b0:	1c011316 	blt	r3,r16,808800 <_dtoa_r+0xc1c>
  8083b4:	d9000a17 	ldw	r4,40(sp)
  8083b8:	d9801117 	ldw	r6,68(sp)
  8083bc:	80a1c83a 	sub	r16,r16,r2
  8083c0:	2089c83a 	sub	r4,r4,r2
  8083c4:	308dc83a 	sub	r6,r6,r2
  8083c8:	d9000a15 	stw	r4,40(sp)
  8083cc:	d9801115 	stw	r6,68(sp)
  8083d0:	d8801017 	ldw	r2,64(sp)
  8083d4:	0080150e 	bge	zero,r2,80842c <_dtoa_r+0x848>
  8083d8:	d8c00b17 	ldw	r3,44(sp)
  8083dc:	1805003a 	cmpeq	r2,r3,zero
  8083e0:	1001c91e 	bne	r2,zero,808b08 <_dtoa_r+0xf24>
  8083e4:	04800e0e 	bge	zero,r18,808420 <_dtoa_r+0x83c>
  8083e8:	d9001617 	ldw	r4,88(sp)
  8083ec:	980b883a 	mov	r5,r19
  8083f0:	900d883a 	mov	r6,r18
  8083f4:	080a5000 	call	80a500 <__pow5mult>
  8083f8:	d9001617 	ldw	r4,88(sp)
  8083fc:	d9800717 	ldw	r6,28(sp)
  808400:	100b883a 	mov	r5,r2
  808404:	1027883a 	mov	r19,r2
  808408:	080a1dc0 	call	80a1dc <__multiply>
  80840c:	d9001617 	ldw	r4,88(sp)
  808410:	d9400717 	ldw	r5,28(sp)
  808414:	1023883a 	mov	r17,r2
  808418:	080974c0 	call	80974c <_Bfree>
  80841c:	dc400715 	stw	r17,28(sp)
  808420:	d9001017 	ldw	r4,64(sp)
  808424:	248dc83a 	sub	r6,r4,r18
  808428:	30010e1e 	bne	r6,zero,808864 <_dtoa_r+0xc80>
  80842c:	d9001617 	ldw	r4,88(sp)
  808430:	04400044 	movi	r17,1
  808434:	880b883a 	mov	r5,r17
  808438:	080a3c40 	call	80a3c4 <__i2b>
  80843c:	d9800917 	ldw	r6,36(sp)
  808440:	1025883a 	mov	r18,r2
  808444:	0180040e 	bge	zero,r6,808458 <_dtoa_r+0x874>
  808448:	d9001617 	ldw	r4,88(sp)
  80844c:	100b883a 	mov	r5,r2
  808450:	080a5000 	call	80a500 <__pow5mult>
  808454:	1025883a 	mov	r18,r2
  808458:	d8801717 	ldw	r2,92(sp)
  80845c:	8880f30e 	bge	r17,r2,80882c <_dtoa_r+0xc48>
  808460:	0023883a 	mov	r17,zero
  808464:	d9800917 	ldw	r6,36(sp)
  808468:	30019e1e 	bne	r6,zero,808ae4 <_dtoa_r+0xf00>
  80846c:	00c00044 	movi	r3,1
  808470:	d9000a17 	ldw	r4,40(sp)
  808474:	20c5883a 	add	r2,r4,r3
  808478:	10c007cc 	andi	r3,r2,31
  80847c:	1800841e 	bne	r3,zero,808690 <_dtoa_r+0xaac>
  808480:	00800704 	movi	r2,28
  808484:	d9000a17 	ldw	r4,40(sp)
  808488:	d9801117 	ldw	r6,68(sp)
  80848c:	80a1883a 	add	r16,r16,r2
  808490:	2089883a 	add	r4,r4,r2
  808494:	308d883a 	add	r6,r6,r2
  808498:	d9000a15 	stw	r4,40(sp)
  80849c:	d9801115 	stw	r6,68(sp)
  8084a0:	d8801117 	ldw	r2,68(sp)
  8084a4:	0080050e 	bge	zero,r2,8084bc <_dtoa_r+0x8d8>
  8084a8:	d9400717 	ldw	r5,28(sp)
  8084ac:	d9001617 	ldw	r4,88(sp)
  8084b0:	100d883a 	mov	r6,r2
  8084b4:	080a0900 	call	80a090 <__lshift>
  8084b8:	d8800715 	stw	r2,28(sp)
  8084bc:	d8c00a17 	ldw	r3,40(sp)
  8084c0:	00c0050e 	bge	zero,r3,8084d8 <_dtoa_r+0x8f4>
  8084c4:	d9001617 	ldw	r4,88(sp)
  8084c8:	900b883a 	mov	r5,r18
  8084cc:	180d883a 	mov	r6,r3
  8084d0:	080a0900 	call	80a090 <__lshift>
  8084d4:	1025883a 	mov	r18,r2
  8084d8:	d9000c17 	ldw	r4,48(sp)
  8084dc:	2005003a 	cmpeq	r2,r4,zero
  8084e0:	10016f26 	beq	r2,zero,808aa0 <_dtoa_r+0xebc>
  8084e4:	d9000f17 	ldw	r4,60(sp)
  8084e8:	0102170e 	bge	zero,r4,808d48 <_dtoa_r+0x1164>
  8084ec:	d9800b17 	ldw	r6,44(sp)
  8084f0:	3005003a 	cmpeq	r2,r6,zero
  8084f4:	1000881e 	bne	r2,zero,808718 <_dtoa_r+0xb34>
  8084f8:	0400050e 	bge	zero,r16,808510 <_dtoa_r+0x92c>
  8084fc:	d9001617 	ldw	r4,88(sp)
  808500:	980b883a 	mov	r5,r19
  808504:	800d883a 	mov	r6,r16
  808508:	080a0900 	call	80a090 <__lshift>
  80850c:	1027883a 	mov	r19,r2
  808510:	8804c03a 	cmpne	r2,r17,zero
  808514:	1002541e 	bne	r2,zero,808e68 <_dtoa_r+0x1284>
  808518:	980b883a 	mov	r5,r19
  80851c:	dd800517 	ldw	r22,20(sp)
  808520:	dcc00615 	stw	r19,24(sp)
  808524:	a700004c 	andi	fp,r20,1
  808528:	2827883a 	mov	r19,r5
  80852c:	d9000717 	ldw	r4,28(sp)
  808530:	900b883a 	mov	r5,r18
  808534:	08079cc0 	call	8079cc <quorem>
  808538:	d9000717 	ldw	r4,28(sp)
  80853c:	d9400617 	ldw	r5,24(sp)
  808540:	1023883a 	mov	r17,r2
  808544:	8dc00c04 	addi	r23,r17,48
  808548:	08098a80 	call	8098a8 <__mcmp>
  80854c:	d9001617 	ldw	r4,88(sp)
  808550:	900b883a 	mov	r5,r18
  808554:	980d883a 	mov	r6,r19
  808558:	1029883a 	mov	r20,r2
  80855c:	0809f040 	call	809f04 <__mdiff>
  808560:	102b883a 	mov	r21,r2
  808564:	10800317 	ldw	r2,12(r2)
  808568:	1001281e 	bne	r2,zero,808a0c <_dtoa_r+0xe28>
  80856c:	d9000717 	ldw	r4,28(sp)
  808570:	a80b883a 	mov	r5,r21
  808574:	08098a80 	call	8098a8 <__mcmp>
  808578:	d9001617 	ldw	r4,88(sp)
  80857c:	1021883a 	mov	r16,r2
  808580:	a80b883a 	mov	r5,r21
  808584:	080974c0 	call	80974c <_Bfree>
  808588:	8000041e 	bne	r16,zero,80859c <_dtoa_r+0x9b8>
  80858c:	d8801717 	ldw	r2,92(sp)
  808590:	1000021e 	bne	r2,zero,80859c <_dtoa_r+0x9b8>
  808594:	e004c03a 	cmpne	r2,fp,zero
  808598:	10011726 	beq	r2,zero,8089f8 <_dtoa_r+0xe14>
  80859c:	a0010616 	blt	r20,zero,8089b8 <_dtoa_r+0xdd4>
  8085a0:	a000041e 	bne	r20,zero,8085b4 <_dtoa_r+0x9d0>
  8085a4:	d8c01717 	ldw	r3,92(sp)
  8085a8:	1800021e 	bne	r3,zero,8085b4 <_dtoa_r+0x9d0>
  8085ac:	e004c03a 	cmpne	r2,fp,zero
  8085b0:	10010126 	beq	r2,zero,8089b8 <_dtoa_r+0xdd4>
  8085b4:	04023d16 	blt	zero,r16,808eac <_dtoa_r+0x12c8>
  8085b8:	b5c00005 	stb	r23,0(r22)
  8085bc:	d9800517 	ldw	r6,20(sp)
  8085c0:	d9000f17 	ldw	r4,60(sp)
  8085c4:	b5800044 	addi	r22,r22,1
  8085c8:	3105883a 	add	r2,r6,r4
  8085cc:	b0806526 	beq	r22,r2,808764 <_dtoa_r+0xb80>
  8085d0:	d9400717 	ldw	r5,28(sp)
  8085d4:	d9001617 	ldw	r4,88(sp)
  8085d8:	01800284 	movi	r6,10
  8085dc:	000f883a 	mov	r7,zero
  8085e0:	080a4000 	call	80a400 <__multadd>
  8085e4:	d8800715 	stw	r2,28(sp)
  8085e8:	d8800617 	ldw	r2,24(sp)
  8085ec:	14c10c26 	beq	r2,r19,808a20 <_dtoa_r+0xe3c>
  8085f0:	d9400617 	ldw	r5,24(sp)
  8085f4:	d9001617 	ldw	r4,88(sp)
  8085f8:	01800284 	movi	r6,10
  8085fc:	000f883a 	mov	r7,zero
  808600:	080a4000 	call	80a400 <__multadd>
  808604:	d9001617 	ldw	r4,88(sp)
  808608:	980b883a 	mov	r5,r19
  80860c:	01800284 	movi	r6,10
  808610:	000f883a 	mov	r7,zero
  808614:	d8800615 	stw	r2,24(sp)
  808618:	080a4000 	call	80a400 <__multadd>
  80861c:	1027883a 	mov	r19,r2
  808620:	003fc206 	br	80852c <_dtoa_r+0x948>
  808624:	2445c83a 	sub	r2,r4,r17
  808628:	a088983a 	sll	r4,r20,r2
  80862c:	003e4b06 	br	807f5c <_dtoa_r+0x378>
  808630:	01bfffc4 	movi	r6,-1
  808634:	00800044 	movi	r2,1
  808638:	d9800e15 	stw	r6,56(sp)
  80863c:	d9800f15 	stw	r6,60(sp)
  808640:	d8800b15 	stw	r2,44(sp)
  808644:	d8c01617 	ldw	r3,88(sp)
  808648:	008005c4 	movi	r2,23
  80864c:	18001115 	stw	zero,68(r3)
  808650:	1580082e 	bgeu	r2,r22,808674 <_dtoa_r+0xa90>
  808654:	00c00104 	movi	r3,4
  808658:	0009883a 	mov	r4,zero
  80865c:	18c7883a 	add	r3,r3,r3
  808660:	18800504 	addi	r2,r3,20
  808664:	21000044 	addi	r4,r4,1
  808668:	b0bffc2e 	bgeu	r22,r2,80865c <_dtoa_r+0xa78>
  80866c:	d9801617 	ldw	r6,88(sp)
  808670:	31001115 	stw	r4,68(r6)
  808674:	dc000f17 	ldw	r16,60(sp)
  808678:	003e4b06 	br	807fa8 <_dtoa_r+0x3c4>
  80867c:	d9801717 	ldw	r6,92(sp)
  808680:	0023883a 	mov	r17,zero
  808684:	31bfff04 	addi	r6,r6,-4
  808688:	d9801715 	stw	r6,92(sp)
  80868c:	003df806 	br	807e70 <_dtoa_r+0x28c>
  808690:	00800804 	movi	r2,32
  808694:	10c9c83a 	sub	r4,r2,r3
  808698:	00c00104 	movi	r3,4
  80869c:	19005a16 	blt	r3,r4,808808 <_dtoa_r+0xc24>
  8086a0:	008000c4 	movi	r2,3
  8086a4:	113f7e16 	blt	r2,r4,8084a0 <_dtoa_r+0x8bc>
  8086a8:	20800704 	addi	r2,r4,28
  8086ac:	003f7506 	br	808484 <_dtoa_r+0x8a0>
  8086b0:	d9801717 	ldw	r6,92(sp)
  8086b4:	00800044 	movi	r2,1
  8086b8:	1180a10e 	bge	r2,r6,808940 <_dtoa_r+0xd5c>
  8086bc:	d9800f17 	ldw	r6,60(sp)
  8086c0:	d8c01017 	ldw	r3,64(sp)
  8086c4:	30bfffc4 	addi	r2,r6,-1
  8086c8:	1881c616 	blt	r3,r2,808de4 <_dtoa_r+0x1200>
  8086cc:	18a5c83a 	sub	r18,r3,r2
  8086d0:	d8800f17 	ldw	r2,60(sp)
  8086d4:	10026216 	blt	r2,zero,809060 <_dtoa_r+0x147c>
  8086d8:	dc001117 	ldw	r16,68(sp)
  8086dc:	1007883a 	mov	r3,r2
  8086e0:	d9800a17 	ldw	r6,40(sp)
  8086e4:	d8801117 	ldw	r2,68(sp)
  8086e8:	d9001617 	ldw	r4,88(sp)
  8086ec:	30cd883a 	add	r6,r6,r3
  8086f0:	10c5883a 	add	r2,r2,r3
  8086f4:	01400044 	movi	r5,1
  8086f8:	d9800a15 	stw	r6,40(sp)
  8086fc:	d8801115 	stw	r2,68(sp)
  808700:	080a3c40 	call	80a3c4 <__i2b>
  808704:	1027883a 	mov	r19,r2
  808708:	003f2506 	br	8083a0 <_dtoa_r+0x7bc>
  80870c:	00c02074 	movhi	r3,129
  808710:	18d2f504 	addi	r3,r3,19412
  808714:	003d6706 	br	807cb4 <_dtoa_r+0xd0>
  808718:	dd800517 	ldw	r22,20(sp)
  80871c:	04000044 	movi	r16,1
  808720:	00000706 	br	808740 <_dtoa_r+0xb5c>
  808724:	d9400717 	ldw	r5,28(sp)
  808728:	d9001617 	ldw	r4,88(sp)
  80872c:	01800284 	movi	r6,10
  808730:	000f883a 	mov	r7,zero
  808734:	080a4000 	call	80a400 <__multadd>
  808738:	d8800715 	stw	r2,28(sp)
  80873c:	84000044 	addi	r16,r16,1
  808740:	d9000717 	ldw	r4,28(sp)
  808744:	900b883a 	mov	r5,r18
  808748:	08079cc0 	call	8079cc <quorem>
  80874c:	15c00c04 	addi	r23,r2,48
  808750:	b5c00005 	stb	r23,0(r22)
  808754:	d8c00f17 	ldw	r3,60(sp)
  808758:	b5800044 	addi	r22,r22,1
  80875c:	80fff116 	blt	r16,r3,808724 <_dtoa_r+0xb40>
  808760:	d8000615 	stw	zero,24(sp)
  808764:	d9400717 	ldw	r5,28(sp)
  808768:	d9001617 	ldw	r4,88(sp)
  80876c:	01800044 	movi	r6,1
  808770:	080a0900 	call	80a090 <__lshift>
  808774:	1009883a 	mov	r4,r2
  808778:	900b883a 	mov	r5,r18
  80877c:	d8800715 	stw	r2,28(sp)
  808780:	08098a80 	call	8098a8 <__mcmp>
  808784:	00803c0e 	bge	zero,r2,808878 <_dtoa_r+0xc94>
  808788:	b009883a 	mov	r4,r22
  80878c:	213fffc4 	addi	r4,r4,-1
  808790:	21400003 	ldbu	r5,0(r4)
  808794:	00800e44 	movi	r2,57
  808798:	28c03fcc 	andi	r3,r5,255
  80879c:	18c0201c 	xori	r3,r3,128
  8087a0:	18ffe004 	addi	r3,r3,-128
  8087a4:	1881981e 	bne	r3,r2,808e08 <_dtoa_r+0x1224>
  8087a8:	d9800517 	ldw	r6,20(sp)
  8087ac:	21bff71e 	bne	r4,r6,80878c <_dtoa_r+0xba8>
  8087b0:	d8800d17 	ldw	r2,52(sp)
  8087b4:	37000044 	addi	fp,r6,1
  8087b8:	10800044 	addi	r2,r2,1
  8087bc:	d8800d15 	stw	r2,52(sp)
  8087c0:	00800c44 	movi	r2,49
  8087c4:	30800005 	stb	r2,0(r6)
  8087c8:	d9001617 	ldw	r4,88(sp)
  8087cc:	900b883a 	mov	r5,r18
  8087d0:	080974c0 	call	80974c <_Bfree>
  8087d4:	983ecd26 	beq	r19,zero,80830c <_dtoa_r+0x728>
  8087d8:	d8c00617 	ldw	r3,24(sp)
  8087dc:	18000426 	beq	r3,zero,8087f0 <_dtoa_r+0xc0c>
  8087e0:	1cc00326 	beq	r3,r19,8087f0 <_dtoa_r+0xc0c>
  8087e4:	d9001617 	ldw	r4,88(sp)
  8087e8:	180b883a 	mov	r5,r3
  8087ec:	080974c0 	call	80974c <_Bfree>
  8087f0:	d9001617 	ldw	r4,88(sp)
  8087f4:	980b883a 	mov	r5,r19
  8087f8:	080974c0 	call	80974c <_Bfree>
  8087fc:	003ec306 	br	80830c <_dtoa_r+0x728>
  808800:	1805883a 	mov	r2,r3
  808804:	003eeb06 	br	8083b4 <_dtoa_r+0x7d0>
  808808:	d9800a17 	ldw	r6,40(sp)
  80880c:	d8c01117 	ldw	r3,68(sp)
  808810:	20bfff04 	addi	r2,r4,-4
  808814:	308d883a 	add	r6,r6,r2
  808818:	1887883a 	add	r3,r3,r2
  80881c:	80a1883a 	add	r16,r16,r2
  808820:	d9800a15 	stw	r6,40(sp)
  808824:	d8c01115 	stw	r3,68(sp)
  808828:	003f1d06 	br	8084a0 <_dtoa_r+0x8bc>
  80882c:	a03f0c1e 	bne	r20,zero,808460 <_dtoa_r+0x87c>
  808830:	00800434 	movhi	r2,16
  808834:	10bfffc4 	addi	r2,r2,-1
  808838:	a884703a 	and	r2,r21,r2
  80883c:	103f081e 	bne	r2,zero,808460 <_dtoa_r+0x87c>
  808840:	a89ffc2c 	andhi	r2,r21,32752
  808844:	103f0626 	beq	r2,zero,808460 <_dtoa_r+0x87c>
  808848:	d8c01117 	ldw	r3,68(sp)
  80884c:	d9000a17 	ldw	r4,40(sp)
  808850:	18c00044 	addi	r3,r3,1
  808854:	21000044 	addi	r4,r4,1
  808858:	d8c01115 	stw	r3,68(sp)
  80885c:	d9000a15 	stw	r4,40(sp)
  808860:	003f0006 	br	808464 <_dtoa_r+0x880>
  808864:	d9400717 	ldw	r5,28(sp)
  808868:	d9001617 	ldw	r4,88(sp)
  80886c:	080a5000 	call	80a500 <__pow5mult>
  808870:	d8800715 	stw	r2,28(sp)
  808874:	003eed06 	br	80842c <_dtoa_r+0x848>
  808878:	1000021e 	bne	r2,zero,808884 <_dtoa_r+0xca0>
  80887c:	b880004c 	andi	r2,r23,1
  808880:	103fc11e 	bne	r2,zero,808788 <_dtoa_r+0xba4>
  808884:	b5bfffc4 	addi	r22,r22,-1
  808888:	b0c00007 	ldb	r3,0(r22)
  80888c:	00800c04 	movi	r2,48
  808890:	18bffc26 	beq	r3,r2,808884 <_dtoa_r+0xca0>
  808894:	b7000044 	addi	fp,r22,1
  808898:	003fcb06 	br	8087c8 <_dtoa_r+0xbe4>
  80889c:	d9800d17 	ldw	r6,52(sp)
  8088a0:	018fc83a 	sub	r7,zero,r6
  8088a4:	3801f726 	beq	r7,zero,809084 <_dtoa_r+0x14a0>
  8088a8:	398003cc 	andi	r6,r7,15
  8088ac:	300c90fa 	slli	r6,r6,3
  8088b0:	01402074 	movhi	r5,129
  8088b4:	2953be04 	addi	r5,r5,20216
  8088b8:	d9001217 	ldw	r4,72(sp)
  8088bc:	314d883a 	add	r6,r6,r5
  8088c0:	30c00117 	ldw	r3,4(r6)
  8088c4:	30800017 	ldw	r2,0(r6)
  8088c8:	d9401317 	ldw	r5,76(sp)
  8088cc:	3821d13a 	srai	r16,r7,4
  8088d0:	100d883a 	mov	r6,r2
  8088d4:	180f883a 	mov	r7,r3
  8088d8:	080ece00 	call	80ece0 <__muldf3>
  8088dc:	1011883a 	mov	r8,r2
  8088e0:	1813883a 	mov	r9,r3
  8088e4:	1029883a 	mov	r20,r2
  8088e8:	182b883a 	mov	r21,r3
  8088ec:	8001e526 	beq	r16,zero,809084 <_dtoa_r+0x14a0>
  8088f0:	05800084 	movi	r22,2
  8088f4:	04402074 	movhi	r17,129
  8088f8:	8c53f004 	addi	r17,r17,20416
  8088fc:	8080004c 	andi	r2,r16,1
  808900:	1005003a 	cmpeq	r2,r2,zero
  808904:	1000081e 	bne	r2,zero,808928 <_dtoa_r+0xd44>
  808908:	89800017 	ldw	r6,0(r17)
  80890c:	89c00117 	ldw	r7,4(r17)
  808910:	480b883a 	mov	r5,r9
  808914:	4009883a 	mov	r4,r8
  808918:	080ece00 	call	80ece0 <__muldf3>
  80891c:	1011883a 	mov	r8,r2
  808920:	b5800044 	addi	r22,r22,1
  808924:	1813883a 	mov	r9,r3
  808928:	8021d07a 	srai	r16,r16,1
  80892c:	8c400204 	addi	r17,r17,8
  808930:	803ff21e 	bne	r16,zero,8088fc <_dtoa_r+0xd18>
  808934:	4029883a 	mov	r20,r8
  808938:	482b883a 	mov	r21,r9
  80893c:	003dca06 	br	808068 <_dtoa_r+0x484>
  808940:	d9000817 	ldw	r4,32(sp)
  808944:	2005003a 	cmpeq	r2,r4,zero
  808948:	1001f61e 	bne	r2,zero,809124 <_dtoa_r+0x1540>
  80894c:	dc001117 	ldw	r16,68(sp)
  808950:	dc801017 	ldw	r18,64(sp)
  808954:	18c10cc4 	addi	r3,r3,1075
  808958:	003f6106 	br	8086e0 <_dtoa_r+0xafc>
  80895c:	d8000b15 	stw	zero,44(sp)
  808960:	d9802617 	ldw	r6,152(sp)
  808964:	d8c00d17 	ldw	r3,52(sp)
  808968:	30800044 	addi	r2,r6,1
  80896c:	18ad883a 	add	r22,r3,r2
  808970:	b13fffc4 	addi	r4,r22,-1
  808974:	d9000e15 	stw	r4,56(sp)
  808978:	0581f60e 	bge	zero,r22,809154 <_dtoa_r+0x1570>
  80897c:	dd800f15 	stw	r22,60(sp)
  808980:	003f3006 	br	808644 <_dtoa_r+0xa60>
  808984:	d8000b15 	stw	zero,44(sp)
  808988:	d9002617 	ldw	r4,152(sp)
  80898c:	0101eb0e 	bge	zero,r4,80913c <_dtoa_r+0x1558>
  808990:	202d883a 	mov	r22,r4
  808994:	d9000e15 	stw	r4,56(sp)
  808998:	d9000f15 	stw	r4,60(sp)
  80899c:	003f2906 	br	808644 <_dtoa_r+0xa60>
  8089a0:	01800044 	movi	r6,1
  8089a4:	d9800b15 	stw	r6,44(sp)
  8089a8:	003ff706 	br	808988 <_dtoa_r+0xda4>
  8089ac:	01000044 	movi	r4,1
  8089b0:	d9000b15 	stw	r4,44(sp)
  8089b4:	003fea06 	br	808960 <_dtoa_r+0xd7c>
  8089b8:	04000c0e 	bge	zero,r16,8089ec <_dtoa_r+0xe08>
  8089bc:	d9400717 	ldw	r5,28(sp)
  8089c0:	d9001617 	ldw	r4,88(sp)
  8089c4:	01800044 	movi	r6,1
  8089c8:	080a0900 	call	80a090 <__lshift>
  8089cc:	1009883a 	mov	r4,r2
  8089d0:	900b883a 	mov	r5,r18
  8089d4:	d8800715 	stw	r2,28(sp)
  8089d8:	08098a80 	call	8098a8 <__mcmp>
  8089dc:	0081e00e 	bge	zero,r2,809160 <_dtoa_r+0x157c>
  8089e0:	bdc00044 	addi	r23,r23,1
  8089e4:	00800e84 	movi	r2,58
  8089e8:	b881a226 	beq	r23,r2,809074 <_dtoa_r+0x1490>
  8089ec:	b7000044 	addi	fp,r22,1
  8089f0:	b5c00005 	stb	r23,0(r22)
  8089f4:	003f7406 	br	8087c8 <_dtoa_r+0xbe4>
  8089f8:	00800e44 	movi	r2,57
  8089fc:	b8819d26 	beq	r23,r2,809074 <_dtoa_r+0x1490>
  808a00:	053ffa0e 	bge	zero,r20,8089ec <_dtoa_r+0xe08>
  808a04:	8dc00c44 	addi	r23,r17,49
  808a08:	003ff806 	br	8089ec <_dtoa_r+0xe08>
  808a0c:	d9001617 	ldw	r4,88(sp)
  808a10:	a80b883a 	mov	r5,r21
  808a14:	04000044 	movi	r16,1
  808a18:	080974c0 	call	80974c <_Bfree>
  808a1c:	003edf06 	br	80859c <_dtoa_r+0x9b8>
  808a20:	d9001617 	ldw	r4,88(sp)
  808a24:	980b883a 	mov	r5,r19
  808a28:	01800284 	movi	r6,10
  808a2c:	000f883a 	mov	r7,zero
  808a30:	080a4000 	call	80a400 <__multadd>
  808a34:	1027883a 	mov	r19,r2
  808a38:	d8800615 	stw	r2,24(sp)
  808a3c:	003ebb06 	br	80852c <_dtoa_r+0x948>
  808a40:	d9801117 	ldw	r6,68(sp)
  808a44:	d8800d17 	ldw	r2,52(sp)
  808a48:	d8000915 	stw	zero,36(sp)
  808a4c:	308dc83a 	sub	r6,r6,r2
  808a50:	0087c83a 	sub	r3,zero,r2
  808a54:	d9801115 	stw	r6,68(sp)
  808a58:	d8c01015 	stw	r3,64(sp)
  808a5c:	003cfe06 	br	807e58 <_dtoa_r+0x274>
  808a60:	018dc83a 	sub	r6,zero,r6
  808a64:	d9801115 	stw	r6,68(sp)
  808a68:	d8000a15 	stw	zero,40(sp)
  808a6c:	003cf306 	br	807e3c <_dtoa_r+0x258>
  808a70:	d9000d17 	ldw	r4,52(sp)
  808a74:	080f62c0 	call	80f62c <__floatsidf>
  808a78:	880b883a 	mov	r5,r17
  808a7c:	8009883a 	mov	r4,r16
  808a80:	180f883a 	mov	r7,r3
  808a84:	100d883a 	mov	r6,r2
  808a88:	080f3840 	call	80f384 <__nedf2>
  808a8c:	103ce126 	beq	r2,zero,807e14 <_dtoa_r+0x230>
  808a90:	d9800d17 	ldw	r6,52(sp)
  808a94:	31bfffc4 	addi	r6,r6,-1
  808a98:	d9800d15 	stw	r6,52(sp)
  808a9c:	003cdd06 	br	807e14 <_dtoa_r+0x230>
  808aa0:	d9000717 	ldw	r4,28(sp)
  808aa4:	900b883a 	mov	r5,r18
  808aa8:	08098a80 	call	8098a8 <__mcmp>
  808aac:	103e8d0e 	bge	r2,zero,8084e4 <_dtoa_r+0x900>
  808ab0:	d9400717 	ldw	r5,28(sp)
  808ab4:	d9001617 	ldw	r4,88(sp)
  808ab8:	01800284 	movi	r6,10
  808abc:	000f883a 	mov	r7,zero
  808ac0:	080a4000 	call	80a400 <__multadd>
  808ac4:	d9800d17 	ldw	r6,52(sp)
  808ac8:	d8800715 	stw	r2,28(sp)
  808acc:	31bfffc4 	addi	r6,r6,-1
  808ad0:	d9800d15 	stw	r6,52(sp)
  808ad4:	b001a71e 	bne	r22,zero,809174 <_dtoa_r+0x1590>
  808ad8:	d8800e17 	ldw	r2,56(sp)
  808adc:	d8800f15 	stw	r2,60(sp)
  808ae0:	003e8006 	br	8084e4 <_dtoa_r+0x900>
  808ae4:	90800417 	ldw	r2,16(r18)
  808ae8:	1085883a 	add	r2,r2,r2
  808aec:	1085883a 	add	r2,r2,r2
  808af0:	1485883a 	add	r2,r2,r18
  808af4:	11000417 	ldw	r4,16(r2)
  808af8:	08097740 	call	809774 <__hi0bits>
  808afc:	00c00804 	movi	r3,32
  808b00:	1887c83a 	sub	r3,r3,r2
  808b04:	003e5a06 	br	808470 <_dtoa_r+0x88c>
  808b08:	d9400717 	ldw	r5,28(sp)
  808b0c:	d9801017 	ldw	r6,64(sp)
  808b10:	d9001617 	ldw	r4,88(sp)
  808b14:	080a5000 	call	80a500 <__pow5mult>
  808b18:	d8800715 	stw	r2,28(sp)
  808b1c:	003e4306 	br	80842c <_dtoa_r+0x848>
  808b20:	d9800f17 	ldw	r6,60(sp)
  808b24:	d8800d17 	ldw	r2,52(sp)
  808b28:	d9800315 	stw	r6,12(sp)
  808b2c:	d8800415 	stw	r2,16(sp)
  808b30:	d8c00b17 	ldw	r3,44(sp)
  808b34:	1805003a 	cmpeq	r2,r3,zero
  808b38:	1000e21e 	bne	r2,zero,808ec4 <_dtoa_r+0x12e0>
  808b3c:	d9000317 	ldw	r4,12(sp)
  808b40:	0005883a 	mov	r2,zero
  808b44:	00cff834 	movhi	r3,16352
  808b48:	200c90fa 	slli	r6,r4,3
  808b4c:	01002074 	movhi	r4,129
  808b50:	2113be04 	addi	r4,r4,20216
  808b54:	180b883a 	mov	r5,r3
  808b58:	310d883a 	add	r6,r6,r4
  808b5c:	327fff17 	ldw	r9,-4(r6)
  808b60:	323ffe17 	ldw	r8,-8(r6)
  808b64:	1009883a 	mov	r4,r2
  808b68:	480f883a 	mov	r7,r9
  808b6c:	400d883a 	mov	r6,r8
  808b70:	080f0a40 	call	80f0a4 <__divdf3>
  808b74:	180b883a 	mov	r5,r3
  808b78:	b00d883a 	mov	r6,r22
  808b7c:	b80f883a 	mov	r7,r23
  808b80:	1009883a 	mov	r4,r2
  808b84:	080ebec0 	call	80ebec <__subdf3>
  808b88:	a80b883a 	mov	r5,r21
  808b8c:	a009883a 	mov	r4,r20
  808b90:	d8c01915 	stw	r3,100(sp)
  808b94:	d8801815 	stw	r2,96(sp)
  808b98:	080f7240 	call	80f724 <__fixdfsi>
  808b9c:	1009883a 	mov	r4,r2
  808ba0:	1027883a 	mov	r19,r2
  808ba4:	080f62c0 	call	80f62c <__floatsidf>
  808ba8:	a80b883a 	mov	r5,r21
  808bac:	a009883a 	mov	r4,r20
  808bb0:	180f883a 	mov	r7,r3
  808bb4:	100d883a 	mov	r6,r2
  808bb8:	080ebec0 	call	80ebec <__subdf3>
  808bbc:	d9801817 	ldw	r6,96(sp)
  808bc0:	1823883a 	mov	r17,r3
  808bc4:	d8801415 	stw	r2,80(sp)
  808bc8:	302d883a 	mov	r22,r6
  808bcc:	d9800517 	ldw	r6,20(sp)
  808bd0:	9cc00c04 	addi	r19,r19,48
  808bd4:	dc401515 	stw	r17,84(sp)
  808bd8:	d8c01917 	ldw	r3,100(sp)
  808bdc:	34c00005 	stb	r19,0(r6)
  808be0:	d8800517 	ldw	r2,20(sp)
  808be4:	d9401917 	ldw	r5,100(sp)
  808be8:	d9801417 	ldw	r6,80(sp)
  808bec:	b009883a 	mov	r4,r22
  808bf0:	880f883a 	mov	r7,r17
  808bf4:	182f883a 	mov	r23,r3
  808bf8:	17000044 	addi	fp,r2,1
  808bfc:	080f40c0 	call	80f40c <__gtdf2>
  808c00:	00804e16 	blt	zero,r2,808d3c <_dtoa_r+0x1158>
  808c04:	d9801417 	ldw	r6,80(sp)
  808c08:	0005883a 	mov	r2,zero
  808c0c:	00cffc34 	movhi	r3,16368
  808c10:	180b883a 	mov	r5,r3
  808c14:	880f883a 	mov	r7,r17
  808c18:	1009883a 	mov	r4,r2
  808c1c:	080ebec0 	call	80ebec <__subdf3>
  808c20:	d9401917 	ldw	r5,100(sp)
  808c24:	180f883a 	mov	r7,r3
  808c28:	b009883a 	mov	r4,r22
  808c2c:	100d883a 	mov	r6,r2
  808c30:	080f40c0 	call	80f40c <__gtdf2>
  808c34:	00bda216 	blt	zero,r2,8082c0 <_dtoa_r+0x6dc>
  808c38:	d8c00317 	ldw	r3,12(sp)
  808c3c:	00800044 	movi	r2,1
  808c40:	10c01216 	blt	r2,r3,808c8c <_dtoa_r+0x10a8>
  808c44:	003d4506 	br	80815c <_dtoa_r+0x578>
  808c48:	d9801417 	ldw	r6,80(sp)
  808c4c:	0005883a 	mov	r2,zero
  808c50:	00cffc34 	movhi	r3,16368
  808c54:	180b883a 	mov	r5,r3
  808c58:	880f883a 	mov	r7,r17
  808c5c:	1009883a 	mov	r4,r2
  808c60:	080ebec0 	call	80ebec <__subdf3>
  808c64:	d9c01b17 	ldw	r7,108(sp)
  808c68:	180b883a 	mov	r5,r3
  808c6c:	1009883a 	mov	r4,r2
  808c70:	b00d883a 	mov	r6,r22
  808c74:	080f51c0 	call	80f51c <__ltdf2>
  808c78:	103d9116 	blt	r2,zero,8082c0 <_dtoa_r+0x6dc>
  808c7c:	d9800517 	ldw	r6,20(sp)
  808c80:	d9000317 	ldw	r4,12(sp)
  808c84:	3105883a 	add	r2,r6,r4
  808c88:	e0bd3426 	beq	fp,r2,80815c <_dtoa_r+0x578>
  808c8c:	04500934 	movhi	r17,16420
  808c90:	0021883a 	mov	r16,zero
  808c94:	b80b883a 	mov	r5,r23
  808c98:	b009883a 	mov	r4,r22
  808c9c:	800d883a 	mov	r6,r16
  808ca0:	880f883a 	mov	r7,r17
  808ca4:	080ece00 	call	80ece0 <__muldf3>
  808ca8:	d9401517 	ldw	r5,84(sp)
  808cac:	d9001417 	ldw	r4,80(sp)
  808cb0:	880f883a 	mov	r7,r17
  808cb4:	000d883a 	mov	r6,zero
  808cb8:	d8801a15 	stw	r2,104(sp)
  808cbc:	d8c01b15 	stw	r3,108(sp)
  808cc0:	080ece00 	call	80ece0 <__muldf3>
  808cc4:	180b883a 	mov	r5,r3
  808cc8:	1009883a 	mov	r4,r2
  808ccc:	1823883a 	mov	r17,r3
  808cd0:	1021883a 	mov	r16,r2
  808cd4:	080f7240 	call	80f724 <__fixdfsi>
  808cd8:	1009883a 	mov	r4,r2
  808cdc:	102b883a 	mov	r21,r2
  808ce0:	080f62c0 	call	80f62c <__floatsidf>
  808ce4:	880b883a 	mov	r5,r17
  808ce8:	8009883a 	mov	r4,r16
  808cec:	180f883a 	mov	r7,r3
  808cf0:	100d883a 	mov	r6,r2
  808cf4:	080ebec0 	call	80ebec <__subdf3>
  808cf8:	1021883a 	mov	r16,r2
  808cfc:	d9001b17 	ldw	r4,108(sp)
  808d00:	1823883a 	mov	r17,r3
  808d04:	dc001415 	stw	r16,80(sp)
  808d08:	ad400c04 	addi	r21,r21,48
  808d0c:	dc401515 	stw	r17,84(sp)
  808d10:	d8801a17 	ldw	r2,104(sp)
  808d14:	e5400005 	stb	r21,0(fp)
  808d18:	202f883a 	mov	r23,r4
  808d1c:	d9c01b17 	ldw	r7,108(sp)
  808d20:	d9001417 	ldw	r4,80(sp)
  808d24:	880b883a 	mov	r5,r17
  808d28:	100d883a 	mov	r6,r2
  808d2c:	102d883a 	mov	r22,r2
  808d30:	e7000044 	addi	fp,fp,1
  808d34:	080f51c0 	call	80f51c <__ltdf2>
  808d38:	103fc30e 	bge	r2,zero,808c48 <_dtoa_r+0x1064>
  808d3c:	d9000417 	ldw	r4,16(sp)
  808d40:	d9000d15 	stw	r4,52(sp)
  808d44:	003d7106 	br	80830c <_dtoa_r+0x728>
  808d48:	d9801717 	ldw	r6,92(sp)
  808d4c:	00800084 	movi	r2,2
  808d50:	11bde60e 	bge	r2,r6,8084ec <_dtoa_r+0x908>
  808d54:	203cfb1e 	bne	r4,zero,808144 <_dtoa_r+0x560>
  808d58:	d9001617 	ldw	r4,88(sp)
  808d5c:	900b883a 	mov	r5,r18
  808d60:	01800144 	movi	r6,5
  808d64:	000f883a 	mov	r7,zero
  808d68:	080a4000 	call	80a400 <__multadd>
  808d6c:	d9000717 	ldw	r4,28(sp)
  808d70:	100b883a 	mov	r5,r2
  808d74:	1025883a 	mov	r18,r2
  808d78:	08098a80 	call	8098a8 <__mcmp>
  808d7c:	00bcf10e 	bge	zero,r2,808144 <_dtoa_r+0x560>
  808d80:	d8c00d17 	ldw	r3,52(sp)
  808d84:	d9000517 	ldw	r4,20(sp)
  808d88:	d8000615 	stw	zero,24(sp)
  808d8c:	18c00044 	addi	r3,r3,1
  808d90:	d8c00d15 	stw	r3,52(sp)
  808d94:	00800c44 	movi	r2,49
  808d98:	27000044 	addi	fp,r4,1
  808d9c:	20800005 	stb	r2,0(r4)
  808da0:	003e8906 	br	8087c8 <_dtoa_r+0xbe4>
  808da4:	d8c00517 	ldw	r3,20(sp)
  808da8:	003bc206 	br	807cb4 <_dtoa_r+0xd0>
  808dac:	01802074 	movhi	r6,129
  808db0:	3193f004 	addi	r6,r6,20416
  808db4:	30c00917 	ldw	r3,36(r6)
  808db8:	30800817 	ldw	r2,32(r6)
  808dbc:	d9001217 	ldw	r4,72(sp)
  808dc0:	d9401317 	ldw	r5,76(sp)
  808dc4:	180f883a 	mov	r7,r3
  808dc8:	100d883a 	mov	r6,r2
  808dcc:	080f0a40 	call	80f0a4 <__divdf3>
  808dd0:	948003cc 	andi	r18,r18,15
  808dd4:	058000c4 	movi	r22,3
  808dd8:	1029883a 	mov	r20,r2
  808ddc:	182b883a 	mov	r21,r3
  808de0:	003c8906 	br	808008 <_dtoa_r+0x424>
  808de4:	d9001017 	ldw	r4,64(sp)
  808de8:	d9800917 	ldw	r6,36(sp)
  808dec:	0025883a 	mov	r18,zero
  808df0:	1105c83a 	sub	r2,r2,r4
  808df4:	2089883a 	add	r4,r4,r2
  808df8:	308d883a 	add	r6,r6,r2
  808dfc:	d9001015 	stw	r4,64(sp)
  808e00:	d9800915 	stw	r6,36(sp)
  808e04:	003e3206 	br	8086d0 <_dtoa_r+0xaec>
  808e08:	28800044 	addi	r2,r5,1
  808e0c:	27000044 	addi	fp,r4,1
  808e10:	20800005 	stb	r2,0(r4)
  808e14:	003e6c06 	br	8087c8 <_dtoa_r+0xbe4>
  808e18:	d8800f17 	ldw	r2,60(sp)
  808e1c:	00bce016 	blt	zero,r2,8081a0 <_dtoa_r+0x5bc>
  808e20:	d9800f17 	ldw	r6,60(sp)
  808e24:	303cc51e 	bne	r6,zero,80813c <_dtoa_r+0x558>
  808e28:	0005883a 	mov	r2,zero
  808e2c:	00d00534 	movhi	r3,16404
  808e30:	980b883a 	mov	r5,r19
  808e34:	180f883a 	mov	r7,r3
  808e38:	9009883a 	mov	r4,r18
  808e3c:	100d883a 	mov	r6,r2
  808e40:	080ece00 	call	80ece0 <__muldf3>
  808e44:	180b883a 	mov	r5,r3
  808e48:	a80f883a 	mov	r7,r21
  808e4c:	1009883a 	mov	r4,r2
  808e50:	a00d883a 	mov	r6,r20
  808e54:	080f4940 	call	80f494 <__gedf2>
  808e58:	103cb80e 	bge	r2,zero,80813c <_dtoa_r+0x558>
  808e5c:	0027883a 	mov	r19,zero
  808e60:	0025883a 	mov	r18,zero
  808e64:	003fc606 	br	808d80 <_dtoa_r+0x119c>
  808e68:	99400117 	ldw	r5,4(r19)
  808e6c:	d9001617 	ldw	r4,88(sp)
  808e70:	0809ccc0 	call	809ccc <_Balloc>
  808e74:	99800417 	ldw	r6,16(r19)
  808e78:	11000304 	addi	r4,r2,12
  808e7c:	99400304 	addi	r5,r19,12
  808e80:	318d883a 	add	r6,r6,r6
  808e84:	318d883a 	add	r6,r6,r6
  808e88:	31800204 	addi	r6,r6,8
  808e8c:	1023883a 	mov	r17,r2
  808e90:	08031ac0 	call	8031ac <memcpy>
  808e94:	d9001617 	ldw	r4,88(sp)
  808e98:	880b883a 	mov	r5,r17
  808e9c:	01800044 	movi	r6,1
  808ea0:	080a0900 	call	80a090 <__lshift>
  808ea4:	100b883a 	mov	r5,r2
  808ea8:	003d9c06 	br	80851c <_dtoa_r+0x938>
  808eac:	00800e44 	movi	r2,57
  808eb0:	b8807026 	beq	r23,r2,809074 <_dtoa_r+0x1490>
  808eb4:	b8800044 	addi	r2,r23,1
  808eb8:	b7000044 	addi	fp,r22,1
  808ebc:	b0800005 	stb	r2,0(r22)
  808ec0:	003e4106 	br	8087c8 <_dtoa_r+0xbe4>
  808ec4:	d8800317 	ldw	r2,12(sp)
  808ec8:	01802074 	movhi	r6,129
  808ecc:	3193be04 	addi	r6,r6,20216
  808ed0:	b009883a 	mov	r4,r22
  808ed4:	100e90fa 	slli	r7,r2,3
  808ed8:	b80b883a 	mov	r5,r23
  808edc:	398f883a 	add	r7,r7,r6
  808ee0:	38bffe17 	ldw	r2,-8(r7)
  808ee4:	d9800517 	ldw	r6,20(sp)
  808ee8:	38ffff17 	ldw	r3,-4(r7)
  808eec:	37000044 	addi	fp,r6,1
  808ef0:	180f883a 	mov	r7,r3
  808ef4:	100d883a 	mov	r6,r2
  808ef8:	080ece00 	call	80ece0 <__muldf3>
  808efc:	a80b883a 	mov	r5,r21
  808f00:	a009883a 	mov	r4,r20
  808f04:	182f883a 	mov	r23,r3
  808f08:	102d883a 	mov	r22,r2
  808f0c:	080f7240 	call	80f724 <__fixdfsi>
  808f10:	1009883a 	mov	r4,r2
  808f14:	1027883a 	mov	r19,r2
  808f18:	080f62c0 	call	80f62c <__floatsidf>
  808f1c:	a80b883a 	mov	r5,r21
  808f20:	a009883a 	mov	r4,r20
  808f24:	180f883a 	mov	r7,r3
  808f28:	100d883a 	mov	r6,r2
  808f2c:	080ebec0 	call	80ebec <__subdf3>
  808f30:	180b883a 	mov	r5,r3
  808f34:	d8c00517 	ldw	r3,20(sp)
  808f38:	9cc00c04 	addi	r19,r19,48
  808f3c:	1009883a 	mov	r4,r2
  808f40:	1cc00005 	stb	r19,0(r3)
  808f44:	2021883a 	mov	r16,r4
  808f48:	d9000317 	ldw	r4,12(sp)
  808f4c:	00800044 	movi	r2,1
  808f50:	2823883a 	mov	r17,r5
  808f54:	20802226 	beq	r4,r2,808fe0 <_dtoa_r+0x13fc>
  808f58:	1029883a 	mov	r20,r2
  808f5c:	0005883a 	mov	r2,zero
  808f60:	00d00934 	movhi	r3,16420
  808f64:	180f883a 	mov	r7,r3
  808f68:	100d883a 	mov	r6,r2
  808f6c:	880b883a 	mov	r5,r17
  808f70:	8009883a 	mov	r4,r16
  808f74:	080ece00 	call	80ece0 <__muldf3>
  808f78:	180b883a 	mov	r5,r3
  808f7c:	1009883a 	mov	r4,r2
  808f80:	1823883a 	mov	r17,r3
  808f84:	1021883a 	mov	r16,r2
  808f88:	080f7240 	call	80f724 <__fixdfsi>
  808f8c:	1009883a 	mov	r4,r2
  808f90:	102b883a 	mov	r21,r2
  808f94:	080f62c0 	call	80f62c <__floatsidf>
  808f98:	880b883a 	mov	r5,r17
  808f9c:	8009883a 	mov	r4,r16
  808fa0:	180f883a 	mov	r7,r3
  808fa4:	100d883a 	mov	r6,r2
  808fa8:	080ebec0 	call	80ebec <__subdf3>
  808fac:	180b883a 	mov	r5,r3
  808fb0:	d8c00517 	ldw	r3,20(sp)
  808fb4:	1009883a 	mov	r4,r2
  808fb8:	ad400c04 	addi	r21,r21,48
  808fbc:	1d05883a 	add	r2,r3,r20
  808fc0:	15400005 	stb	r21,0(r2)
  808fc4:	2021883a 	mov	r16,r4
  808fc8:	d9000317 	ldw	r4,12(sp)
  808fcc:	a5000044 	addi	r20,r20,1
  808fd0:	2823883a 	mov	r17,r5
  808fd4:	a13fe11e 	bne	r20,r4,808f5c <_dtoa_r+0x1378>
  808fd8:	e505883a 	add	r2,fp,r20
  808fdc:	173fffc4 	addi	fp,r2,-1
  808fe0:	0025883a 	mov	r18,zero
  808fe4:	04cff834 	movhi	r19,16352
  808fe8:	b009883a 	mov	r4,r22
  808fec:	b80b883a 	mov	r5,r23
  808ff0:	900d883a 	mov	r6,r18
  808ff4:	980f883a 	mov	r7,r19
  808ff8:	080ec6c0 	call	80ec6c <__adddf3>
  808ffc:	180b883a 	mov	r5,r3
  809000:	1009883a 	mov	r4,r2
  809004:	800d883a 	mov	r6,r16
  809008:	880f883a 	mov	r7,r17
  80900c:	080f51c0 	call	80f51c <__ltdf2>
  809010:	103cab16 	blt	r2,zero,8082c0 <_dtoa_r+0x6dc>
  809014:	0009883a 	mov	r4,zero
  809018:	980b883a 	mov	r5,r19
  80901c:	b80f883a 	mov	r7,r23
  809020:	b00d883a 	mov	r6,r22
  809024:	080ebec0 	call	80ebec <__subdf3>
  809028:	180b883a 	mov	r5,r3
  80902c:	880f883a 	mov	r7,r17
  809030:	1009883a 	mov	r4,r2
  809034:	800d883a 	mov	r6,r16
  809038:	080f40c0 	call	80f40c <__gtdf2>
  80903c:	00bc470e 	bge	zero,r2,80815c <_dtoa_r+0x578>
  809040:	00c00c04 	movi	r3,48
  809044:	e73fffc4 	addi	fp,fp,-1
  809048:	e0800007 	ldb	r2,0(fp)
  80904c:	10fffd26 	beq	r2,r3,809044 <_dtoa_r+0x1460>
  809050:	d9800417 	ldw	r6,16(sp)
  809054:	e7000044 	addi	fp,fp,1
  809058:	d9800d15 	stw	r6,52(sp)
  80905c:	003cab06 	br	80830c <_dtoa_r+0x728>
  809060:	d8c00f17 	ldw	r3,60(sp)
  809064:	d9001117 	ldw	r4,68(sp)
  809068:	20e1c83a 	sub	r16,r4,r3
  80906c:	0007883a 	mov	r3,zero
  809070:	003d9b06 	br	8086e0 <_dtoa_r+0xafc>
  809074:	00800e44 	movi	r2,57
  809078:	b0800005 	stb	r2,0(r22)
  80907c:	b5800044 	addi	r22,r22,1
  809080:	003dc106 	br	808788 <_dtoa_r+0xba4>
  809084:	05800084 	movi	r22,2
  809088:	003bf706 	br	808068 <_dtoa_r+0x484>
  80908c:	d9000f17 	ldw	r4,60(sp)
  809090:	013c000e 	bge	zero,r4,808094 <_dtoa_r+0x4b0>
  809094:	d9800e17 	ldw	r6,56(sp)
  809098:	01bc300e 	bge	zero,r6,80815c <_dtoa_r+0x578>
  80909c:	0005883a 	mov	r2,zero
  8090a0:	00d00934 	movhi	r3,16420
  8090a4:	a80b883a 	mov	r5,r21
  8090a8:	180f883a 	mov	r7,r3
  8090ac:	a009883a 	mov	r4,r20
  8090b0:	100d883a 	mov	r6,r2
  8090b4:	080ece00 	call	80ece0 <__muldf3>
  8090b8:	b1000044 	addi	r4,r22,1
  8090bc:	1021883a 	mov	r16,r2
  8090c0:	1823883a 	mov	r17,r3
  8090c4:	080f62c0 	call	80f62c <__floatsidf>
  8090c8:	880b883a 	mov	r5,r17
  8090cc:	8009883a 	mov	r4,r16
  8090d0:	180f883a 	mov	r7,r3
  8090d4:	100d883a 	mov	r6,r2
  8090d8:	080ece00 	call	80ece0 <__muldf3>
  8090dc:	0011883a 	mov	r8,zero
  8090e0:	02500734 	movhi	r9,16412
  8090e4:	180b883a 	mov	r5,r3
  8090e8:	480f883a 	mov	r7,r9
  8090ec:	1009883a 	mov	r4,r2
  8090f0:	400d883a 	mov	r6,r8
  8090f4:	080ec6c0 	call	80ec6c <__adddf3>
  8090f8:	102d883a 	mov	r22,r2
  8090fc:	00bf3034 	movhi	r2,64704
  809100:	10ef883a 	add	r23,r2,r3
  809104:	d8800d17 	ldw	r2,52(sp)
  809108:	d8c00e17 	ldw	r3,56(sp)
  80910c:	8029883a 	mov	r20,r16
  809110:	10bfffc4 	addi	r2,r2,-1
  809114:	882b883a 	mov	r21,r17
  809118:	d8800415 	stw	r2,16(sp)
  80911c:	d8c00315 	stw	r3,12(sp)
  809120:	003e8306 	br	808b30 <_dtoa_r+0xf4c>
  809124:	d8800117 	ldw	r2,4(sp)
  809128:	dc001117 	ldw	r16,68(sp)
  80912c:	dc801017 	ldw	r18,64(sp)
  809130:	00c00d84 	movi	r3,54
  809134:	1887c83a 	sub	r3,r3,r2
  809138:	003d6906 	br	8086e0 <_dtoa_r+0xafc>
  80913c:	01800044 	movi	r6,1
  809140:	3021883a 	mov	r16,r6
  809144:	d9800f15 	stw	r6,60(sp)
  809148:	d9802615 	stw	r6,152(sp)
  80914c:	d9800e15 	stw	r6,56(sp)
  809150:	003b9306 	br	807fa0 <_dtoa_r+0x3bc>
  809154:	b021883a 	mov	r16,r22
  809158:	dd800f15 	stw	r22,60(sp)
  80915c:	003b9006 	br	807fa0 <_dtoa_r+0x3bc>
  809160:	103e221e 	bne	r2,zero,8089ec <_dtoa_r+0xe08>
  809164:	b880004c 	andi	r2,r23,1
  809168:	1005003a 	cmpeq	r2,r2,zero
  80916c:	103e1f1e 	bne	r2,zero,8089ec <_dtoa_r+0xe08>
  809170:	003e1b06 	br	8089e0 <_dtoa_r+0xdfc>
  809174:	d9001617 	ldw	r4,88(sp)
  809178:	980b883a 	mov	r5,r19
  80917c:	01800284 	movi	r6,10
  809180:	000f883a 	mov	r7,zero
  809184:	080a4000 	call	80a400 <__multadd>
  809188:	d8c00e17 	ldw	r3,56(sp)
  80918c:	1027883a 	mov	r19,r2
  809190:	d8c00f15 	stw	r3,60(sp)
  809194:	003cd306 	br	8084e4 <_dtoa_r+0x900>

00809198 <__sflags>:
  809198:	28c00007 	ldb	r3,0(r5)
  80919c:	00801c84 	movi	r2,114
  8091a0:	18800926 	beq	r3,r2,8091c8 <__sflags+0x30>
  8091a4:	00801dc4 	movi	r2,119
  8091a8:	18801426 	beq	r3,r2,8091fc <__sflags+0x64>
  8091ac:	00801844 	movi	r2,97
  8091b0:	18801626 	beq	r3,r2,80920c <__sflags+0x74>
  8091b4:	0007883a 	mov	r3,zero
  8091b8:	00800584 	movi	r2,22
  8091bc:	20800015 	stw	r2,0(r4)
  8091c0:	1805883a 	mov	r2,r3
  8091c4:	f800283a 	ret
  8091c8:	000f883a 	mov	r7,zero
  8091cc:	0011883a 	mov	r8,zero
  8091d0:	00c00104 	movi	r3,4
  8091d4:	28800047 	ldb	r2,1(r5)
  8091d8:	10000426 	beq	r2,zero,8091ec <__sflags+0x54>
  8091dc:	01000ac4 	movi	r4,43
  8091e0:	11000e26 	beq	r2,r4,80921c <__sflags+0x84>
  8091e4:	28800087 	ldb	r2,2(r5)
  8091e8:	11000c26 	beq	r2,r4,80921c <__sflags+0x84>
  8091ec:	3a04b03a 	or	r2,r7,r8
  8091f0:	30800015 	stw	r2,0(r6)
  8091f4:	1805883a 	mov	r2,r3
  8091f8:	f800283a 	ret
  8091fc:	01c00044 	movi	r7,1
  809200:	02018004 	movi	r8,1536
  809204:	00c00204 	movi	r3,8
  809208:	003ff206 	br	8091d4 <__sflags+0x3c>
  80920c:	01c00044 	movi	r7,1
  809210:	02008204 	movi	r8,520
  809214:	00c04204 	movi	r3,264
  809218:	003fee06 	br	8091d4 <__sflags+0x3c>
  80921c:	00bffcc4 	movi	r2,-13
  809220:	1884703a 	and	r2,r3,r2
  809224:	01c00084 	movi	r7,2
  809228:	10c00414 	ori	r3,r2,16
  80922c:	3a04b03a 	or	r2,r7,r8
  809230:	30800015 	stw	r2,0(r6)
  809234:	003fef06 	br	8091f4 <__sflags+0x5c>

00809238 <_fread_r>:
  809238:	defff504 	addi	sp,sp,-44
  80923c:	ddc00815 	stw	r23,32(sp)
  809240:	39af383a 	mul	r23,r7,r6
  809244:	df000915 	stw	fp,36(sp)
  809248:	dd800715 	stw	r22,28(sp)
  80924c:	dcc00415 	stw	r19,16(sp)
  809250:	dc000115 	stw	r16,4(sp)
  809254:	dfc00a15 	stw	ra,40(sp)
  809258:	dd400615 	stw	r21,24(sp)
  80925c:	dd000515 	stw	r20,20(sp)
  809260:	dc800315 	stw	r18,12(sp)
  809264:	dc400215 	stw	r17,8(sp)
  809268:	d9800015 	stw	r6,0(sp)
  80926c:	3839883a 	mov	fp,r7
  809270:	2821883a 	mov	r16,r5
  809274:	202d883a 	mov	r22,r4
  809278:	dcc00b17 	ldw	r19,44(sp)
  80927c:	b8005926 	beq	r23,zero,8093e4 <_fread_r+0x1ac>
  809280:	20000226 	beq	r4,zero,80928c <_fread_r+0x54>
  809284:	20800e17 	ldw	r2,56(r4)
  809288:	10005826 	beq	r2,zero,8093ec <_fread_r+0x1b4>
  80928c:	9c400117 	ldw	r17,4(r19)
  809290:	88005916 	blt	r17,zero,8093f8 <_fread_r+0x1c0>
  809294:	9880030b 	ldhu	r2,12(r19)
  809298:	8029883a 	mov	r20,r16
  80929c:	1080008c 	andi	r2,r2,2
  8092a0:	1000221e 	bne	r2,zero,80932c <_fread_r+0xf4>
  8092a4:	b825883a 	mov	r18,r23
  8092a8:	00000106 	br	8092b0 <_fread_r+0x78>
  8092ac:	9c400117 	ldw	r17,4(r19)
  8092b0:	a009883a 	mov	r4,r20
  8092b4:	880d883a 	mov	r6,r17
  8092b8:	8c80542e 	bgeu	r17,r18,80940c <_fread_r+0x1d4>
  8092bc:	99400017 	ldw	r5,0(r19)
  8092c0:	a469883a 	add	r20,r20,r17
  8092c4:	9465c83a 	sub	r18,r18,r17
  8092c8:	08031ac0 	call	8031ac <memcpy>
  8092cc:	98800017 	ldw	r2,0(r19)
  8092d0:	b009883a 	mov	r4,r22
  8092d4:	980b883a 	mov	r5,r19
  8092d8:	1461883a 	add	r16,r2,r17
  8092dc:	9c000015 	stw	r16,0(r19)
  8092e0:	0803aa80 	call	803aa8 <__srefill_r>
  8092e4:	103ff126 	beq	r2,zero,8092ac <_fread_r+0x74>
  8092e8:	d9400017 	ldw	r5,0(sp)
  8092ec:	bc89c83a 	sub	r4,r23,r18
  8092f0:	080fb400 	call	80fb40 <__udivsi3>
  8092f4:	1039883a 	mov	fp,r2
  8092f8:	e005883a 	mov	r2,fp
  8092fc:	dfc00a17 	ldw	ra,40(sp)
  809300:	df000917 	ldw	fp,36(sp)
  809304:	ddc00817 	ldw	r23,32(sp)
  809308:	dd800717 	ldw	r22,28(sp)
  80930c:	dd400617 	ldw	r21,24(sp)
  809310:	dd000517 	ldw	r20,20(sp)
  809314:	dcc00417 	ldw	r19,16(sp)
  809318:	dc800317 	ldw	r18,12(sp)
  80931c:	dc400217 	ldw	r17,8(sp)
  809320:	dc000117 	ldw	r16,4(sp)
  809324:	dec00b04 	addi	sp,sp,44
  809328:	f800283a 	ret
  80932c:	b825883a 	mov	r18,r23
  809330:	8dc03436 	bltu	r17,r23,809404 <_fread_r+0x1cc>
  809334:	99400017 	ldw	r5,0(r19)
  809338:	a009883a 	mov	r4,r20
  80933c:	900d883a 	mov	r6,r18
  809340:	08031ac0 	call	8031ac <memcpy>
  809344:	9c000017 	ldw	r16,0(r19)
  809348:	98800117 	ldw	r2,4(r19)
  80934c:	99400c17 	ldw	r5,48(r19)
  809350:	84a1883a 	add	r16,r16,r18
  809354:	14a3c83a 	sub	r17,r2,r18
  809358:	a4ab883a 	add	r21,r20,r18
  80935c:	9c400115 	stw	r17,4(r19)
  809360:	9c000015 	stw	r16,0(r19)
  809364:	bca9c83a 	sub	r20,r23,r18
  809368:	28000826 	beq	r5,zero,80938c <_fread_r+0x154>
  80936c:	a03fe226 	beq	r20,zero,8092f8 <_fread_r+0xc0>
  809370:	98801004 	addi	r2,r19,64
  809374:	28800326 	beq	r5,r2,809384 <_fread_r+0x14c>
  809378:	b009883a 	mov	r4,r22
  80937c:	08019f00 	call	8019f0 <_free_r>
  809380:	9c000017 	ldw	r16,0(r19)
  809384:	98000c15 	stw	zero,48(r19)
  809388:	00000106 	br	809390 <_fread_r+0x158>
  80938c:	a03fda26 	beq	r20,zero,8092f8 <_fread_r+0xc0>
  809390:	9c800417 	ldw	r18,16(r19)
  809394:	9c400517 	ldw	r17,20(r19)
  809398:	9d400015 	stw	r21,0(r19)
  80939c:	9d400415 	stw	r21,16(r19)
  8093a0:	9d000515 	stw	r20,20(r19)
  8093a4:	b009883a 	mov	r4,r22
  8093a8:	980b883a 	mov	r5,r19
  8093ac:	0803aa80 	call	803aa8 <__srefill_r>
  8093b0:	98c00117 	ldw	r3,4(r19)
  8093b4:	9c800415 	stw	r18,16(r19)
  8093b8:	9c400515 	stw	r17,20(r19)
  8093bc:	a8eb883a 	add	r21,r21,r3
  8093c0:	9c000015 	stw	r16,0(r19)
  8093c4:	a0e9c83a 	sub	r20,r20,r3
  8093c8:	98000115 	stw	zero,4(r19)
  8093cc:	103fef26 	beq	r2,zero,80938c <_fread_r+0x154>
  8093d0:	d9400017 	ldw	r5,0(sp)
  8093d4:	bd09c83a 	sub	r4,r23,r20
  8093d8:	080fb400 	call	80fb40 <__udivsi3>
  8093dc:	1039883a 	mov	fp,r2
  8093e0:	003fc506 	br	8092f8 <_fread_r+0xc0>
  8093e4:	0039883a 	mov	fp,zero
  8093e8:	003fc306 	br	8092f8 <_fread_r+0xc0>
  8093ec:	080146c0 	call	80146c <__sinit>
  8093f0:	9c400117 	ldw	r17,4(r19)
  8093f4:	883fa70e 	bge	r17,zero,809294 <_fread_r+0x5c>
  8093f8:	0023883a 	mov	r17,zero
  8093fc:	98000115 	stw	zero,4(r19)
  809400:	003fa406 	br	809294 <_fread_r+0x5c>
  809404:	8825883a 	mov	r18,r17
  809408:	003fca06 	br	809334 <_fread_r+0xfc>
  80940c:	99400017 	ldw	r5,0(r19)
  809410:	900d883a 	mov	r6,r18
  809414:	08031ac0 	call	8031ac <memcpy>
  809418:	98c00117 	ldw	r3,4(r19)
  80941c:	98800017 	ldw	r2,0(r19)
  809420:	1c87c83a 	sub	r3,r3,r18
  809424:	1485883a 	add	r2,r2,r18
  809428:	98800015 	stw	r2,0(r19)
  80942c:	98c00115 	stw	r3,4(r19)
  809430:	003fb106 	br	8092f8 <_fread_r+0xc0>

00809434 <fread>:
  809434:	00802074 	movhi	r2,129
  809438:	109b9704 	addi	r2,r2,28252
  80943c:	2017883a 	mov	r11,r4
  809440:	11000017 	ldw	r4,0(r2)
  809444:	defffe04 	addi	sp,sp,-8
  809448:	3013883a 	mov	r9,r6
  80944c:	2805883a 	mov	r2,r5
  809450:	d9c00015 	stw	r7,0(sp)
  809454:	580b883a 	mov	r5,r11
  809458:	100d883a 	mov	r6,r2
  80945c:	480f883a 	mov	r7,r9
  809460:	dfc00115 	stw	ra,4(sp)
  809464:	08092380 	call	809238 <_fread_r>
  809468:	dfc00117 	ldw	ra,4(sp)
  80946c:	dec00204 	addi	sp,sp,8
  809470:	f800283a 	ret

00809474 <_isatty_r>:
  809474:	defffd04 	addi	sp,sp,-12
  809478:	dc000015 	stw	r16,0(sp)
  80947c:	040020b4 	movhi	r16,130
  809480:	8422ed04 	addi	r16,r16,-29772
  809484:	dc400115 	stw	r17,4(sp)
  809488:	80000015 	stw	zero,0(r16)
  80948c:	2023883a 	mov	r17,r4
  809490:	2809883a 	mov	r4,r5
  809494:	dfc00215 	stw	ra,8(sp)
  809498:	08109b00 	call	8109b0 <isatty>
  80949c:	1007883a 	mov	r3,r2
  8094a0:	00bfffc4 	movi	r2,-1
  8094a4:	18800626 	beq	r3,r2,8094c0 <_isatty_r+0x4c>
  8094a8:	1805883a 	mov	r2,r3
  8094ac:	dfc00217 	ldw	ra,8(sp)
  8094b0:	dc400117 	ldw	r17,4(sp)
  8094b4:	dc000017 	ldw	r16,0(sp)
  8094b8:	dec00304 	addi	sp,sp,12
  8094bc:	f800283a 	ret
  8094c0:	80800017 	ldw	r2,0(r16)
  8094c4:	103ff826 	beq	r2,zero,8094a8 <_isatty_r+0x34>
  8094c8:	88800015 	stw	r2,0(r17)
  8094cc:	1805883a 	mov	r2,r3
  8094d0:	dfc00217 	ldw	ra,8(sp)
  8094d4:	dc400117 	ldw	r17,4(sp)
  8094d8:	dc000017 	ldw	r16,0(sp)
  8094dc:	dec00304 	addi	sp,sp,12
  8094e0:	f800283a 	ret

008094e4 <iswspace>:
  8094e4:	00803fc4 	movi	r2,255
  8094e8:	0007883a 	mov	r3,zero
  8094ec:	11000636 	bltu	r2,r4,809508 <iswspace+0x24>
  8094f0:	00802074 	movhi	r2,129
  8094f4:	109b9b04 	addi	r2,r2,28268
  8094f8:	10c00017 	ldw	r3,0(r2)
  8094fc:	1907883a 	add	r3,r3,r4
  809500:	18800003 	ldbu	r2,0(r3)
  809504:	10c0020c 	andi	r3,r2,8
  809508:	1805883a 	mov	r2,r3
  80950c:	f800283a 	ret

00809510 <__locale_charset>:
  809510:	d0a00a17 	ldw	r2,-32728(gp)
  809514:	f800283a 	ret

00809518 <_localeconv_r>:
  809518:	00802074 	movhi	r2,129
  80951c:	1093b204 	addi	r2,r2,20168
  809520:	f800283a 	ret

00809524 <localeconv>:
  809524:	00802074 	movhi	r2,129
  809528:	109b9704 	addi	r2,r2,28252
  80952c:	11000017 	ldw	r4,0(r2)
  809530:	08095181 	jmpi	809518 <_localeconv_r>

00809534 <_setlocale_r>:
  809534:	defffc04 	addi	sp,sp,-16
  809538:	00c02074 	movhi	r3,129
  80953c:	18d2dd04 	addi	r3,r3,19316
  809540:	dc800215 	stw	r18,8(sp)
  809544:	dc400115 	stw	r17,4(sp)
  809548:	dc000015 	stw	r16,0(sp)
  80954c:	2023883a 	mov	r17,r4
  809550:	2825883a 	mov	r18,r5
  809554:	dfc00315 	stw	ra,12(sp)
  809558:	3021883a 	mov	r16,r6
  80955c:	3009883a 	mov	r4,r6
  809560:	180b883a 	mov	r5,r3
  809564:	30000926 	beq	r6,zero,80958c <_setlocale_r+0x58>
  809568:	080a8f00 	call	80a8f0 <strcmp>
  80956c:	8009883a 	mov	r4,r16
  809570:	01402074 	movhi	r5,129
  809574:	2952ed04 	addi	r5,r5,19380
  809578:	10000b1e 	bne	r2,zero,8095a8 <_setlocale_r+0x74>
  80957c:	8c000d15 	stw	r16,52(r17)
  809580:	8c800c15 	stw	r18,48(r17)
  809584:	00c02074 	movhi	r3,129
  809588:	18d2dd04 	addi	r3,r3,19316
  80958c:	1805883a 	mov	r2,r3
  809590:	dfc00317 	ldw	ra,12(sp)
  809594:	dc800217 	ldw	r18,8(sp)
  809598:	dc400117 	ldw	r17,4(sp)
  80959c:	dc000017 	ldw	r16,0(sp)
  8095a0:	dec00404 	addi	sp,sp,16
  8095a4:	f800283a 	ret
  8095a8:	080a8f00 	call	80a8f0 <strcmp>
  8095ac:	0007883a 	mov	r3,zero
  8095b0:	103ff226 	beq	r2,zero,80957c <_setlocale_r+0x48>
  8095b4:	003ff506 	br	80958c <_setlocale_r+0x58>

008095b8 <setlocale>:
  8095b8:	01802074 	movhi	r6,129
  8095bc:	319b9704 	addi	r6,r6,28252
  8095c0:	2007883a 	mov	r3,r4
  8095c4:	31000017 	ldw	r4,0(r6)
  8095c8:	280d883a 	mov	r6,r5
  8095cc:	180b883a 	mov	r5,r3
  8095d0:	08095341 	jmpi	809534 <_setlocale_r>

008095d4 <_lseek_r>:
  8095d4:	defffd04 	addi	sp,sp,-12
  8095d8:	dc000015 	stw	r16,0(sp)
  8095dc:	040020b4 	movhi	r16,130
  8095e0:	8422ed04 	addi	r16,r16,-29772
  8095e4:	dc400115 	stw	r17,4(sp)
  8095e8:	80000015 	stw	zero,0(r16)
  8095ec:	2023883a 	mov	r17,r4
  8095f0:	2809883a 	mov	r4,r5
  8095f4:	300b883a 	mov	r5,r6
  8095f8:	380d883a 	mov	r6,r7
  8095fc:	dfc00215 	stw	ra,8(sp)
  809600:	0810bbc0 	call	810bbc <lseek>
  809604:	1007883a 	mov	r3,r2
  809608:	00bfffc4 	movi	r2,-1
  80960c:	18800626 	beq	r3,r2,809628 <_lseek_r+0x54>
  809610:	1805883a 	mov	r2,r3
  809614:	dfc00217 	ldw	ra,8(sp)
  809618:	dc400117 	ldw	r17,4(sp)
  80961c:	dc000017 	ldw	r16,0(sp)
  809620:	dec00304 	addi	sp,sp,12
  809624:	f800283a 	ret
  809628:	80800017 	ldw	r2,0(r16)
  80962c:	103ff826 	beq	r2,zero,809610 <_lseek_r+0x3c>
  809630:	88800015 	stw	r2,0(r17)
  809634:	1805883a 	mov	r2,r3
  809638:	dfc00217 	ldw	ra,8(sp)
  80963c:	dc400117 	ldw	r17,4(sp)
  809640:	dc000017 	ldw	r16,0(sp)
  809644:	dec00304 	addi	sp,sp,12
  809648:	f800283a 	ret

0080964c <_mbrtowc_r>:
  80964c:	defffc04 	addi	sp,sp,-16
  809650:	dc400215 	stw	r17,8(sp)
  809654:	dc000115 	stw	r16,4(sp)
  809658:	dfc00315 	stw	ra,12(sp)
  80965c:	dc000417 	ldw	r16,16(sp)
  809660:	2023883a 	mov	r17,r4
  809664:	30000f26 	beq	r6,zero,8096a4 <_mbrtowc_r+0x58>
  809668:	dc000015 	stw	r16,0(sp)
  80966c:	080970c0 	call	80970c <_mbtowc_r>
  809670:	1007883a 	mov	r3,r2
  809674:	00bfffc4 	movi	r2,-1
  809678:	1809883a 	mov	r4,r3
  80967c:	1880111e 	bne	r3,r2,8096c4 <_mbrtowc_r+0x78>
  809680:	80000015 	stw	zero,0(r16)
  809684:	00802284 	movi	r2,138
  809688:	88800015 	stw	r2,0(r17)
  80968c:	2005883a 	mov	r2,r4
  809690:	dfc00317 	ldw	ra,12(sp)
  809694:	dc400217 	ldw	r17,8(sp)
  809698:	dc000117 	ldw	r16,4(sp)
  80969c:	dec00404 	addi	sp,sp,16
  8096a0:	f800283a 	ret
  8096a4:	000b883a 	mov	r5,zero
  8096a8:	01802074 	movhi	r6,129
  8096ac:	3192ed04 	addi	r6,r6,19380
  8096b0:	01c00044 	movi	r7,1
  8096b4:	dc000015 	stw	r16,0(sp)
  8096b8:	080970c0 	call	80970c <_mbtowc_r>
  8096bc:	1007883a 	mov	r3,r2
  8096c0:	003fec06 	br	809674 <_mbrtowc_r+0x28>
  8096c4:	1809883a 	mov	r4,r3
  8096c8:	003ff006 	br	80968c <_mbrtowc_r+0x40>

008096cc <mbrtowc>:
  8096cc:	00802074 	movhi	r2,129
  8096d0:	109b9704 	addi	r2,r2,28252
  8096d4:	2017883a 	mov	r11,r4
  8096d8:	11000017 	ldw	r4,0(r2)
  8096dc:	defffe04 	addi	sp,sp,-8
  8096e0:	3013883a 	mov	r9,r6
  8096e4:	2805883a 	mov	r2,r5
  8096e8:	d9c00015 	stw	r7,0(sp)
  8096ec:	580b883a 	mov	r5,r11
  8096f0:	100d883a 	mov	r6,r2
  8096f4:	480f883a 	mov	r7,r9
  8096f8:	dfc00115 	stw	ra,4(sp)
  8096fc:	080964c0 	call	80964c <_mbrtowc_r>
  809700:	dfc00117 	ldw	ra,4(sp)
  809704:	dec00204 	addi	sp,sp,8
  809708:	f800283a 	ret

0080970c <_mbtowc_r>:
  80970c:	deffff04 	addi	sp,sp,-4
  809710:	0005883a 	mov	r2,zero
  809714:	28000326 	beq	r5,zero,809724 <_mbtowc_r+0x18>
  809718:	3000041e 	bne	r6,zero,80972c <_mbtowc_r+0x20>
  80971c:	dec00104 	addi	sp,sp,4
  809720:	f800283a 	ret
  809724:	d80b883a 	mov	r5,sp
  809728:	303ffc26 	beq	r6,zero,80971c <_mbtowc_r+0x10>
  80972c:	00bfff84 	movi	r2,-2
  809730:	383ffa26 	beq	r7,zero,80971c <_mbtowc_r+0x10>
  809734:	30800003 	ldbu	r2,0(r6)
  809738:	28800015 	stw	r2,0(r5)
  80973c:	30c00003 	ldbu	r3,0(r6)
  809740:	1804c03a 	cmpne	r2,r3,zero
  809744:	dec00104 	addi	sp,sp,4
  809748:	f800283a 	ret

0080974c <_Bfree>:
  80974c:	28000826 	beq	r5,zero,809770 <_Bfree+0x24>
  809750:	28800117 	ldw	r2,4(r5)
  809754:	21001317 	ldw	r4,76(r4)
  809758:	1085883a 	add	r2,r2,r2
  80975c:	1085883a 	add	r2,r2,r2
  809760:	1105883a 	add	r2,r2,r4
  809764:	10c00017 	ldw	r3,0(r2)
  809768:	28c00015 	stw	r3,0(r5)
  80976c:	11400015 	stw	r5,0(r2)
  809770:	f800283a 	ret

00809774 <__hi0bits>:
  809774:	20bfffec 	andhi	r2,r4,65535
  809778:	10001426 	beq	r2,zero,8097cc <__hi0bits+0x58>
  80977c:	0007883a 	mov	r3,zero
  809780:	20bfc02c 	andhi	r2,r4,65280
  809784:	1000021e 	bne	r2,zero,809790 <__hi0bits+0x1c>
  809788:	2008923a 	slli	r4,r4,8
  80978c:	18c00204 	addi	r3,r3,8
  809790:	20bc002c 	andhi	r2,r4,61440
  809794:	1000021e 	bne	r2,zero,8097a0 <__hi0bits+0x2c>
  809798:	2008913a 	slli	r4,r4,4
  80979c:	18c00104 	addi	r3,r3,4
  8097a0:	20b0002c 	andhi	r2,r4,49152
  8097a4:	1000031e 	bne	r2,zero,8097b4 <__hi0bits+0x40>
  8097a8:	2105883a 	add	r2,r4,r4
  8097ac:	18c00084 	addi	r3,r3,2
  8097b0:	1089883a 	add	r4,r2,r2
  8097b4:	20000316 	blt	r4,zero,8097c4 <__hi0bits+0x50>
  8097b8:	2090002c 	andhi	r2,r4,16384
  8097bc:	10000626 	beq	r2,zero,8097d8 <__hi0bits+0x64>
  8097c0:	18c00044 	addi	r3,r3,1
  8097c4:	1805883a 	mov	r2,r3
  8097c8:	f800283a 	ret
  8097cc:	2008943a 	slli	r4,r4,16
  8097d0:	00c00404 	movi	r3,16
  8097d4:	003fea06 	br	809780 <__hi0bits+0xc>
  8097d8:	00c00804 	movi	r3,32
  8097dc:	1805883a 	mov	r2,r3
  8097e0:	f800283a 	ret

008097e4 <__lo0bits>:
  8097e4:	20c00017 	ldw	r3,0(r4)
  8097e8:	188001cc 	andi	r2,r3,7
  8097ec:	10000a26 	beq	r2,zero,809818 <__lo0bits+0x34>
  8097f0:	1880004c 	andi	r2,r3,1
  8097f4:	1005003a 	cmpeq	r2,r2,zero
  8097f8:	10002126 	beq	r2,zero,809880 <__lo0bits+0x9c>
  8097fc:	1880008c 	andi	r2,r3,2
  809800:	1000251e 	bne	r2,zero,809898 <__lo0bits+0xb4>
  809804:	1804d0ba 	srli	r2,r3,2
  809808:	01400084 	movi	r5,2
  80980c:	20800015 	stw	r2,0(r4)
  809810:	2805883a 	mov	r2,r5
  809814:	f800283a 	ret
  809818:	18bfffcc 	andi	r2,r3,65535
  80981c:	10001526 	beq	r2,zero,809874 <__lo0bits+0x90>
  809820:	000b883a 	mov	r5,zero
  809824:	18803fcc 	andi	r2,r3,255
  809828:	1000021e 	bne	r2,zero,809834 <__lo0bits+0x50>
  80982c:	1806d23a 	srli	r3,r3,8
  809830:	29400204 	addi	r5,r5,8
  809834:	188003cc 	andi	r2,r3,15
  809838:	1000021e 	bne	r2,zero,809844 <__lo0bits+0x60>
  80983c:	1806d13a 	srli	r3,r3,4
  809840:	29400104 	addi	r5,r5,4
  809844:	188000cc 	andi	r2,r3,3
  809848:	1000021e 	bne	r2,zero,809854 <__lo0bits+0x70>
  80984c:	1806d0ba 	srli	r3,r3,2
  809850:	29400084 	addi	r5,r5,2
  809854:	1880004c 	andi	r2,r3,1
  809858:	1000031e 	bne	r2,zero,809868 <__lo0bits+0x84>
  80985c:	1806d07a 	srli	r3,r3,1
  809860:	18000a26 	beq	r3,zero,80988c <__lo0bits+0xa8>
  809864:	29400044 	addi	r5,r5,1
  809868:	2805883a 	mov	r2,r5
  80986c:	20c00015 	stw	r3,0(r4)
  809870:	f800283a 	ret
  809874:	1806d43a 	srli	r3,r3,16
  809878:	01400404 	movi	r5,16
  80987c:	003fe906 	br	809824 <__lo0bits+0x40>
  809880:	000b883a 	mov	r5,zero
  809884:	2805883a 	mov	r2,r5
  809888:	f800283a 	ret
  80988c:	01400804 	movi	r5,32
  809890:	2805883a 	mov	r2,r5
  809894:	f800283a 	ret
  809898:	1804d07a 	srli	r2,r3,1
  80989c:	01400044 	movi	r5,1
  8098a0:	20800015 	stw	r2,0(r4)
  8098a4:	003fda06 	br	809810 <__lo0bits+0x2c>

008098a8 <__mcmp>:
  8098a8:	20800417 	ldw	r2,16(r4)
  8098ac:	28c00417 	ldw	r3,16(r5)
  8098b0:	10cfc83a 	sub	r7,r2,r3
  8098b4:	38000c1e 	bne	r7,zero,8098e8 <__mcmp+0x40>
  8098b8:	18c5883a 	add	r2,r3,r3
  8098bc:	1085883a 	add	r2,r2,r2
  8098c0:	10c00504 	addi	r3,r2,20
  8098c4:	21000504 	addi	r4,r4,20
  8098c8:	28cb883a 	add	r5,r5,r3
  8098cc:	2085883a 	add	r2,r4,r2
  8098d0:	10bfff04 	addi	r2,r2,-4
  8098d4:	297fff04 	addi	r5,r5,-4
  8098d8:	11800017 	ldw	r6,0(r2)
  8098dc:	28c00017 	ldw	r3,0(r5)
  8098e0:	30c0031e 	bne	r6,r3,8098f0 <__mcmp+0x48>
  8098e4:	20bffa36 	bltu	r4,r2,8098d0 <__mcmp+0x28>
  8098e8:	3805883a 	mov	r2,r7
  8098ec:	f800283a 	ret
  8098f0:	30c00336 	bltu	r6,r3,809900 <__mcmp+0x58>
  8098f4:	01c00044 	movi	r7,1
  8098f8:	3805883a 	mov	r2,r7
  8098fc:	f800283a 	ret
  809900:	01ffffc4 	movi	r7,-1
  809904:	003ff806 	br	8098e8 <__mcmp+0x40>

00809908 <__ulp>:
  809908:	295ffc2c 	andhi	r5,r5,32752
  80990c:	013f3034 	movhi	r4,64704
  809910:	290b883a 	add	r5,r5,r4
  809914:	0145c83a 	sub	r2,zero,r5
  809918:	1007d53a 	srai	r3,r2,20
  80991c:	000d883a 	mov	r6,zero
  809920:	0140040e 	bge	zero,r5,809934 <__ulp+0x2c>
  809924:	280f883a 	mov	r7,r5
  809928:	3807883a 	mov	r3,r7
  80992c:	3005883a 	mov	r2,r6
  809930:	f800283a 	ret
  809934:	008004c4 	movi	r2,19
  809938:	193ffb04 	addi	r4,r3,-20
  80993c:	10c00c0e 	bge	r2,r3,809970 <__ulp+0x68>
  809940:	008007c4 	movi	r2,31
  809944:	1107c83a 	sub	r3,r2,r4
  809948:	00800784 	movi	r2,30
  80994c:	01400044 	movi	r5,1
  809950:	11000216 	blt	r2,r4,80995c <__ulp+0x54>
  809954:	00800044 	movi	r2,1
  809958:	10ca983a 	sll	r5,r2,r3
  80995c:	000f883a 	mov	r7,zero
  809960:	280d883a 	mov	r6,r5
  809964:	3807883a 	mov	r3,r7
  809968:	3005883a 	mov	r2,r6
  80996c:	f800283a 	ret
  809970:	00800234 	movhi	r2,8
  809974:	10cfd83a 	sra	r7,r2,r3
  809978:	000d883a 	mov	r6,zero
  80997c:	3005883a 	mov	r2,r6
  809980:	3807883a 	mov	r3,r7
  809984:	f800283a 	ret

00809988 <__b2d>:
  809988:	20800417 	ldw	r2,16(r4)
  80998c:	defff904 	addi	sp,sp,-28
  809990:	dd000415 	stw	r20,16(sp)
  809994:	1085883a 	add	r2,r2,r2
  809998:	25000504 	addi	r20,r4,20
  80999c:	1085883a 	add	r2,r2,r2
  8099a0:	dc000015 	stw	r16,0(sp)
  8099a4:	a0a1883a 	add	r16,r20,r2
  8099a8:	dd400515 	stw	r21,20(sp)
  8099ac:	857fff17 	ldw	r21,-4(r16)
  8099b0:	dc400115 	stw	r17,4(sp)
  8099b4:	dfc00615 	stw	ra,24(sp)
  8099b8:	a809883a 	mov	r4,r21
  8099bc:	2823883a 	mov	r17,r5
  8099c0:	dcc00315 	stw	r19,12(sp)
  8099c4:	dc800215 	stw	r18,8(sp)
  8099c8:	08097740 	call	809774 <__hi0bits>
  8099cc:	100b883a 	mov	r5,r2
  8099d0:	00800804 	movi	r2,32
  8099d4:	1145c83a 	sub	r2,r2,r5
  8099d8:	88800015 	stw	r2,0(r17)
  8099dc:	00800284 	movi	r2,10
  8099e0:	80ffff04 	addi	r3,r16,-4
  8099e4:	11401416 	blt	r2,r5,809a38 <__b2d+0xb0>
  8099e8:	008002c4 	movi	r2,11
  8099ec:	1149c83a 	sub	r4,r2,r5
  8099f0:	a0c02736 	bltu	r20,r3,809a90 <__b2d+0x108>
  8099f4:	000d883a 	mov	r6,zero
  8099f8:	28800544 	addi	r2,r5,21
  8099fc:	a906d83a 	srl	r3,r21,r4
  809a00:	a884983a 	sll	r2,r21,r2
  809a04:	1ccffc34 	orhi	r19,r3,16368
  809a08:	11a4b03a 	or	r18,r2,r6
  809a0c:	9005883a 	mov	r2,r18
  809a10:	9807883a 	mov	r3,r19
  809a14:	dfc00617 	ldw	ra,24(sp)
  809a18:	dd400517 	ldw	r21,20(sp)
  809a1c:	dd000417 	ldw	r20,16(sp)
  809a20:	dcc00317 	ldw	r19,12(sp)
  809a24:	dc800217 	ldw	r18,8(sp)
  809a28:	dc400117 	ldw	r17,4(sp)
  809a2c:	dc000017 	ldw	r16,0(sp)
  809a30:	dec00704 	addi	sp,sp,28
  809a34:	f800283a 	ret
  809a38:	a0c00e36 	bltu	r20,r3,809a74 <__b2d+0xec>
  809a3c:	293ffd44 	addi	r4,r5,-11
  809a40:	000d883a 	mov	r6,zero
  809a44:	20000f26 	beq	r4,zero,809a84 <__b2d+0xfc>
  809a48:	00800804 	movi	r2,32
  809a4c:	110bc83a 	sub	r5,r2,r4
  809a50:	a0c01236 	bltu	r20,r3,809a9c <__b2d+0x114>
  809a54:	000f883a 	mov	r7,zero
  809a58:	a904983a 	sll	r2,r21,r4
  809a5c:	3146d83a 	srl	r3,r6,r5
  809a60:	3108983a 	sll	r4,r6,r4
  809a64:	108ffc34 	orhi	r2,r2,16368
  809a68:	18a6b03a 	or	r19,r3,r2
  809a6c:	3924b03a 	or	r18,r7,r4
  809a70:	003fe606 	br	809a0c <__b2d+0x84>
  809a74:	293ffd44 	addi	r4,r5,-11
  809a78:	81bffe17 	ldw	r6,-8(r16)
  809a7c:	80fffe04 	addi	r3,r16,-8
  809a80:	203ff11e 	bne	r4,zero,809a48 <__b2d+0xc0>
  809a84:	accffc34 	orhi	r19,r21,16368
  809a88:	3025883a 	mov	r18,r6
  809a8c:	003fdf06 	br	809a0c <__b2d+0x84>
  809a90:	18bfff17 	ldw	r2,-4(r3)
  809a94:	110cd83a 	srl	r6,r2,r4
  809a98:	003fd706 	br	8099f8 <__b2d+0x70>
  809a9c:	18bfff17 	ldw	r2,-4(r3)
  809aa0:	114ed83a 	srl	r7,r2,r5
  809aa4:	003fec06 	br	809a58 <__b2d+0xd0>

00809aa8 <__ratio>:
  809aa8:	defff904 	addi	sp,sp,-28
  809aac:	dc400215 	stw	r17,8(sp)
  809ab0:	2823883a 	mov	r17,r5
  809ab4:	d80b883a 	mov	r5,sp
  809ab8:	dfc00615 	stw	ra,24(sp)
  809abc:	dd000515 	stw	r20,20(sp)
  809ac0:	dcc00415 	stw	r19,16(sp)
  809ac4:	dc800315 	stw	r18,12(sp)
  809ac8:	2025883a 	mov	r18,r4
  809acc:	08099880 	call	809988 <__b2d>
  809ad0:	8809883a 	mov	r4,r17
  809ad4:	d9400104 	addi	r5,sp,4
  809ad8:	1027883a 	mov	r19,r2
  809adc:	1829883a 	mov	r20,r3
  809ae0:	08099880 	call	809988 <__b2d>
  809ae4:	89000417 	ldw	r4,16(r17)
  809ae8:	91c00417 	ldw	r7,16(r18)
  809aec:	d9800117 	ldw	r6,4(sp)
  809af0:	180b883a 	mov	r5,r3
  809af4:	390fc83a 	sub	r7,r7,r4
  809af8:	1009883a 	mov	r4,r2
  809afc:	d8800017 	ldw	r2,0(sp)
  809b00:	380e917a 	slli	r7,r7,5
  809b04:	2011883a 	mov	r8,r4
  809b08:	1185c83a 	sub	r2,r2,r6
  809b0c:	11c5883a 	add	r2,r2,r7
  809b10:	1006953a 	slli	r3,r2,20
  809b14:	2813883a 	mov	r9,r5
  809b18:	00800d0e 	bge	zero,r2,809b50 <__ratio+0xa8>
  809b1c:	1d29883a 	add	r20,r3,r20
  809b20:	a00b883a 	mov	r5,r20
  809b24:	480f883a 	mov	r7,r9
  809b28:	9809883a 	mov	r4,r19
  809b2c:	400d883a 	mov	r6,r8
  809b30:	080f0a40 	call	80f0a4 <__divdf3>
  809b34:	dfc00617 	ldw	ra,24(sp)
  809b38:	dd000517 	ldw	r20,20(sp)
  809b3c:	dcc00417 	ldw	r19,16(sp)
  809b40:	dc800317 	ldw	r18,12(sp)
  809b44:	dc400217 	ldw	r17,8(sp)
  809b48:	dec00704 	addi	sp,sp,28
  809b4c:	f800283a 	ret
  809b50:	28d3c83a 	sub	r9,r5,r3
  809b54:	003ff206 	br	809b20 <__ratio+0x78>

00809b58 <_mprec_log10>:
  809b58:	defffe04 	addi	sp,sp,-8
  809b5c:	008005c4 	movi	r2,23
  809b60:	dc000015 	stw	r16,0(sp)
  809b64:	dfc00115 	stw	ra,4(sp)
  809b68:	2021883a 	mov	r16,r4
  809b6c:	11000c16 	blt	r2,r4,809ba0 <_mprec_log10+0x48>
  809b70:	200490fa 	slli	r2,r4,3
  809b74:	00c02074 	movhi	r3,129
  809b78:	18d3be04 	addi	r3,r3,20216
  809b7c:	10c5883a 	add	r2,r2,r3
  809b80:	12400117 	ldw	r9,4(r2)
  809b84:	12000017 	ldw	r8,0(r2)
  809b88:	4807883a 	mov	r3,r9
  809b8c:	4005883a 	mov	r2,r8
  809b90:	dfc00117 	ldw	ra,4(sp)
  809b94:	dc000017 	ldw	r16,0(sp)
  809b98:	dec00204 	addi	sp,sp,8
  809b9c:	f800283a 	ret
  809ba0:	0011883a 	mov	r8,zero
  809ba4:	024ffc34 	movhi	r9,16368
  809ba8:	0005883a 	mov	r2,zero
  809bac:	00d00934 	movhi	r3,16420
  809bb0:	480b883a 	mov	r5,r9
  809bb4:	4009883a 	mov	r4,r8
  809bb8:	180f883a 	mov	r7,r3
  809bbc:	100d883a 	mov	r6,r2
  809bc0:	080ece00 	call	80ece0 <__muldf3>
  809bc4:	843fffc4 	addi	r16,r16,-1
  809bc8:	1011883a 	mov	r8,r2
  809bcc:	1813883a 	mov	r9,r3
  809bd0:	803ff51e 	bne	r16,zero,809ba8 <_mprec_log10+0x50>
  809bd4:	4005883a 	mov	r2,r8
  809bd8:	4807883a 	mov	r3,r9
  809bdc:	dfc00117 	ldw	ra,4(sp)
  809be0:	dc000017 	ldw	r16,0(sp)
  809be4:	dec00204 	addi	sp,sp,8
  809be8:	f800283a 	ret

00809bec <__copybits>:
  809bec:	297fffc4 	addi	r5,r5,-1
  809bf0:	30800417 	ldw	r2,16(r6)
  809bf4:	280bd17a 	srai	r5,r5,5
  809bf8:	31800504 	addi	r6,r6,20
  809bfc:	1085883a 	add	r2,r2,r2
  809c00:	294b883a 	add	r5,r5,r5
  809c04:	294b883a 	add	r5,r5,r5
  809c08:	1085883a 	add	r2,r2,r2
  809c0c:	290b883a 	add	r5,r5,r4
  809c10:	3087883a 	add	r3,r6,r2
  809c14:	29400104 	addi	r5,r5,4
  809c18:	30c0052e 	bgeu	r6,r3,809c30 <__copybits+0x44>
  809c1c:	30800017 	ldw	r2,0(r6)
  809c20:	31800104 	addi	r6,r6,4
  809c24:	20800015 	stw	r2,0(r4)
  809c28:	21000104 	addi	r4,r4,4
  809c2c:	30fffb36 	bltu	r6,r3,809c1c <__copybits+0x30>
  809c30:	2140032e 	bgeu	r4,r5,809c40 <__copybits+0x54>
  809c34:	20000015 	stw	zero,0(r4)
  809c38:	21000104 	addi	r4,r4,4
  809c3c:	217ffd36 	bltu	r4,r5,809c34 <__copybits+0x48>
  809c40:	f800283a 	ret

00809c44 <__any_on>:
  809c44:	20800417 	ldw	r2,16(r4)
  809c48:	2807d17a 	srai	r3,r5,5
  809c4c:	21000504 	addi	r4,r4,20
  809c50:	10c00d0e 	bge	r2,r3,809c88 <__any_on+0x44>
  809c54:	1085883a 	add	r2,r2,r2
  809c58:	1085883a 	add	r2,r2,r2
  809c5c:	208d883a 	add	r6,r4,r2
  809c60:	2180182e 	bgeu	r4,r6,809cc4 <__any_on+0x80>
  809c64:	30bfff17 	ldw	r2,-4(r6)
  809c68:	30ffff04 	addi	r3,r6,-4
  809c6c:	1000041e 	bne	r2,zero,809c80 <__any_on+0x3c>
  809c70:	20c0142e 	bgeu	r4,r3,809cc4 <__any_on+0x80>
  809c74:	18ffff04 	addi	r3,r3,-4
  809c78:	18800017 	ldw	r2,0(r3)
  809c7c:	103ffc26 	beq	r2,zero,809c70 <__any_on+0x2c>
  809c80:	00800044 	movi	r2,1
  809c84:	f800283a 	ret
  809c88:	18800a0e 	bge	r3,r2,809cb4 <__any_on+0x70>
  809c8c:	294007cc 	andi	r5,r5,31
  809c90:	28000826 	beq	r5,zero,809cb4 <__any_on+0x70>
  809c94:	18c5883a 	add	r2,r3,r3
  809c98:	1085883a 	add	r2,r2,r2
  809c9c:	208d883a 	add	r6,r4,r2
  809ca0:	30c00017 	ldw	r3,0(r6)
  809ca4:	1944d83a 	srl	r2,r3,r5
  809ca8:	1144983a 	sll	r2,r2,r5
  809cac:	18bff41e 	bne	r3,r2,809c80 <__any_on+0x3c>
  809cb0:	003feb06 	br	809c60 <__any_on+0x1c>
  809cb4:	18c5883a 	add	r2,r3,r3
  809cb8:	1085883a 	add	r2,r2,r2
  809cbc:	208d883a 	add	r6,r4,r2
  809cc0:	003fe706 	br	809c60 <__any_on+0x1c>
  809cc4:	0005883a 	mov	r2,zero
  809cc8:	f800283a 	ret

00809ccc <_Balloc>:
  809ccc:	20c01317 	ldw	r3,76(r4)
  809cd0:	defffb04 	addi	sp,sp,-20
  809cd4:	dcc00315 	stw	r19,12(sp)
  809cd8:	dc800215 	stw	r18,8(sp)
  809cdc:	dfc00415 	stw	ra,16(sp)
  809ce0:	2825883a 	mov	r18,r5
  809ce4:	dc400115 	stw	r17,4(sp)
  809ce8:	dc000015 	stw	r16,0(sp)
  809cec:	2027883a 	mov	r19,r4
  809cf0:	01800404 	movi	r6,16
  809cf4:	01400104 	movi	r5,4
  809cf8:	18001726 	beq	r3,zero,809d58 <_Balloc+0x8c>
  809cfc:	01400044 	movi	r5,1
  809d00:	9485883a 	add	r2,r18,r18
  809d04:	2ca2983a 	sll	r17,r5,r18
  809d08:	1085883a 	add	r2,r2,r2
  809d0c:	10c7883a 	add	r3,r2,r3
  809d10:	1c000017 	ldw	r16,0(r3)
  809d14:	8c4d883a 	add	r6,r17,r17
  809d18:	318d883a 	add	r6,r6,r6
  809d1c:	9809883a 	mov	r4,r19
  809d20:	31800504 	addi	r6,r6,20
  809d24:	80001226 	beq	r16,zero,809d70 <_Balloc+0xa4>
  809d28:	80800017 	ldw	r2,0(r16)
  809d2c:	18800015 	stw	r2,0(r3)
  809d30:	80000415 	stw	zero,16(r16)
  809d34:	80000315 	stw	zero,12(r16)
  809d38:	8005883a 	mov	r2,r16
  809d3c:	dfc00417 	ldw	ra,16(sp)
  809d40:	dcc00317 	ldw	r19,12(sp)
  809d44:	dc800217 	ldw	r18,8(sp)
  809d48:	dc400117 	ldw	r17,4(sp)
  809d4c:	dc000017 	ldw	r16,0(sp)
  809d50:	dec00504 	addi	sp,sp,20
  809d54:	f800283a 	ret
  809d58:	080cd700 	call	80cd70 <_calloc_r>
  809d5c:	1007883a 	mov	r3,r2
  809d60:	0021883a 	mov	r16,zero
  809d64:	98801315 	stw	r2,76(r19)
  809d68:	103fe41e 	bne	r2,zero,809cfc <_Balloc+0x30>
  809d6c:	003ff206 	br	809d38 <_Balloc+0x6c>
  809d70:	080cd700 	call	80cd70 <_calloc_r>
  809d74:	103ff026 	beq	r2,zero,809d38 <_Balloc+0x6c>
  809d78:	1021883a 	mov	r16,r2
  809d7c:	14800115 	stw	r18,4(r2)
  809d80:	14400215 	stw	r17,8(r2)
  809d84:	003fea06 	br	809d30 <_Balloc+0x64>

00809d88 <__d2b>:
  809d88:	defff504 	addi	sp,sp,-44
  809d8c:	dcc00515 	stw	r19,20(sp)
  809d90:	04c00044 	movi	r19,1
  809d94:	dc000215 	stw	r16,8(sp)
  809d98:	2821883a 	mov	r16,r5
  809d9c:	980b883a 	mov	r5,r19
  809da0:	ddc00915 	stw	r23,36(sp)
  809da4:	dd800815 	stw	r22,32(sp)
  809da8:	dd400715 	stw	r21,28(sp)
  809dac:	dd000615 	stw	r20,24(sp)
  809db0:	dc800415 	stw	r18,16(sp)
  809db4:	dc400315 	stw	r17,12(sp)
  809db8:	dfc00a15 	stw	ra,40(sp)
  809dbc:	3023883a 	mov	r17,r6
  809dc0:	382d883a 	mov	r22,r7
  809dc4:	ddc00b17 	ldw	r23,44(sp)
  809dc8:	0809ccc0 	call	809ccc <_Balloc>
  809dcc:	1025883a 	mov	r18,r2
  809dd0:	00a00034 	movhi	r2,32768
  809dd4:	10bfffc4 	addi	r2,r2,-1
  809dd8:	8888703a 	and	r4,r17,r2
  809ddc:	202ad53a 	srli	r21,r4,20
  809de0:	00800434 	movhi	r2,16
  809de4:	10bfffc4 	addi	r2,r2,-1
  809de8:	8886703a 	and	r3,r17,r2
  809dec:	a829003a 	cmpeq	r20,r21,zero
  809df0:	800b883a 	mov	r5,r16
  809df4:	d8c00115 	stw	r3,4(sp)
  809df8:	94000504 	addi	r16,r18,20
  809dfc:	a000021e 	bne	r20,zero,809e08 <__d2b+0x80>
  809e00:	18c00434 	orhi	r3,r3,16
  809e04:	d8c00115 	stw	r3,4(sp)
  809e08:	28002726 	beq	r5,zero,809ea8 <__d2b+0x120>
  809e0c:	d809883a 	mov	r4,sp
  809e10:	d9400015 	stw	r5,0(sp)
  809e14:	08097e40 	call	8097e4 <__lo0bits>
  809e18:	100d883a 	mov	r6,r2
  809e1c:	10003526 	beq	r2,zero,809ef4 <__d2b+0x16c>
  809e20:	d8c00117 	ldw	r3,4(sp)
  809e24:	00800804 	movi	r2,32
  809e28:	1185c83a 	sub	r2,r2,r6
  809e2c:	d9000017 	ldw	r4,0(sp)
  809e30:	1886983a 	sll	r3,r3,r2
  809e34:	1906b03a 	or	r3,r3,r4
  809e38:	90c00515 	stw	r3,20(r18)
  809e3c:	d8c00117 	ldw	r3,4(sp)
  809e40:	1986d83a 	srl	r3,r3,r6
  809e44:	d8c00115 	stw	r3,4(sp)
  809e48:	180b003a 	cmpeq	r5,r3,zero
  809e4c:	00800084 	movi	r2,2
  809e50:	114bc83a 	sub	r5,r2,r5
  809e54:	80c00115 	stw	r3,4(r16)
  809e58:	91400415 	stw	r5,16(r18)
  809e5c:	a0001a1e 	bne	r20,zero,809ec8 <__d2b+0x140>
  809e60:	3545883a 	add	r2,r6,r21
  809e64:	10bef344 	addi	r2,r2,-1075
  809e68:	00c00d44 	movi	r3,53
  809e6c:	b0800015 	stw	r2,0(r22)
  809e70:	1987c83a 	sub	r3,r3,r6
  809e74:	b8c00015 	stw	r3,0(r23)
  809e78:	9005883a 	mov	r2,r18
  809e7c:	dfc00a17 	ldw	ra,40(sp)
  809e80:	ddc00917 	ldw	r23,36(sp)
  809e84:	dd800817 	ldw	r22,32(sp)
  809e88:	dd400717 	ldw	r21,28(sp)
  809e8c:	dd000617 	ldw	r20,24(sp)
  809e90:	dcc00517 	ldw	r19,20(sp)
  809e94:	dc800417 	ldw	r18,16(sp)
  809e98:	dc400317 	ldw	r17,12(sp)
  809e9c:	dc000217 	ldw	r16,8(sp)
  809ea0:	dec00b04 	addi	sp,sp,44
  809ea4:	f800283a 	ret
  809ea8:	d9000104 	addi	r4,sp,4
  809eac:	08097e40 	call	8097e4 <__lo0bits>
  809eb0:	11800804 	addi	r6,r2,32
  809eb4:	d8800117 	ldw	r2,4(sp)
  809eb8:	94c00415 	stw	r19,16(r18)
  809ebc:	980b883a 	mov	r5,r19
  809ec0:	90800515 	stw	r2,20(r18)
  809ec4:	a03fe626 	beq	r20,zero,809e60 <__d2b+0xd8>
  809ec8:	2945883a 	add	r2,r5,r5
  809ecc:	1085883a 	add	r2,r2,r2
  809ed0:	1405883a 	add	r2,r2,r16
  809ed4:	113fff17 	ldw	r4,-4(r2)
  809ed8:	30fef384 	addi	r3,r6,-1074
  809edc:	2820917a 	slli	r16,r5,5
  809ee0:	b0c00015 	stw	r3,0(r22)
  809ee4:	08097740 	call	809774 <__hi0bits>
  809ee8:	80a1c83a 	sub	r16,r16,r2
  809eec:	bc000015 	stw	r16,0(r23)
  809ef0:	003fe106 	br	809e78 <__d2b+0xf0>
  809ef4:	d8800017 	ldw	r2,0(sp)
  809ef8:	90800515 	stw	r2,20(r18)
  809efc:	d8c00117 	ldw	r3,4(sp)
  809f00:	003fd106 	br	809e48 <__d2b+0xc0>

00809f04 <__mdiff>:
  809f04:	defffb04 	addi	sp,sp,-20
  809f08:	dc000015 	stw	r16,0(sp)
  809f0c:	2821883a 	mov	r16,r5
  809f10:	dc800215 	stw	r18,8(sp)
  809f14:	300b883a 	mov	r5,r6
  809f18:	2025883a 	mov	r18,r4
  809f1c:	8009883a 	mov	r4,r16
  809f20:	dc400115 	stw	r17,4(sp)
  809f24:	dfc00415 	stw	ra,16(sp)
  809f28:	dcc00315 	stw	r19,12(sp)
  809f2c:	3023883a 	mov	r17,r6
  809f30:	08098a80 	call	8098a8 <__mcmp>
  809f34:	10004226 	beq	r2,zero,80a040 <__mdiff+0x13c>
  809f38:	10005016 	blt	r2,zero,80a07c <__mdiff+0x178>
  809f3c:	0027883a 	mov	r19,zero
  809f40:	81400117 	ldw	r5,4(r16)
  809f44:	9009883a 	mov	r4,r18
  809f48:	0809ccc0 	call	809ccc <_Balloc>
  809f4c:	1019883a 	mov	r12,r2
  809f50:	82800417 	ldw	r10,16(r16)
  809f54:	88800417 	ldw	r2,16(r17)
  809f58:	81800504 	addi	r6,r16,20
  809f5c:	5287883a 	add	r3,r10,r10
  809f60:	1085883a 	add	r2,r2,r2
  809f64:	18c7883a 	add	r3,r3,r3
  809f68:	1085883a 	add	r2,r2,r2
  809f6c:	8a000504 	addi	r8,r17,20
  809f70:	64c00315 	stw	r19,12(r12)
  809f74:	30db883a 	add	r13,r6,r3
  809f78:	4097883a 	add	r11,r8,r2
  809f7c:	61c00504 	addi	r7,r12,20
  809f80:	0013883a 	mov	r9,zero
  809f84:	31000017 	ldw	r4,0(r6)
  809f88:	41400017 	ldw	r5,0(r8)
  809f8c:	42000104 	addi	r8,r8,4
  809f90:	20bfffcc 	andi	r2,r4,65535
  809f94:	28ffffcc 	andi	r3,r5,65535
  809f98:	10c5c83a 	sub	r2,r2,r3
  809f9c:	1245883a 	add	r2,r2,r9
  809fa0:	2008d43a 	srli	r4,r4,16
  809fa4:	280ad43a 	srli	r5,r5,16
  809fa8:	1007d43a 	srai	r3,r2,16
  809fac:	3880000d 	sth	r2,0(r7)
  809fb0:	2149c83a 	sub	r4,r4,r5
  809fb4:	20c9883a 	add	r4,r4,r3
  809fb8:	3900008d 	sth	r4,2(r7)
  809fbc:	31800104 	addi	r6,r6,4
  809fc0:	39c00104 	addi	r7,r7,4
  809fc4:	2013d43a 	srai	r9,r4,16
  809fc8:	42ffee36 	bltu	r8,r11,809f84 <__mdiff+0x80>
  809fcc:	33400c2e 	bgeu	r6,r13,80a000 <__mdiff+0xfc>
  809fd0:	30800017 	ldw	r2,0(r6)
  809fd4:	31800104 	addi	r6,r6,4
  809fd8:	10ffffcc 	andi	r3,r2,65535
  809fdc:	1a47883a 	add	r3,r3,r9
  809fe0:	1004d43a 	srli	r2,r2,16
  809fe4:	1809d43a 	srai	r4,r3,16
  809fe8:	38c0000d 	sth	r3,0(r7)
  809fec:	1105883a 	add	r2,r2,r4
  809ff0:	3880008d 	sth	r2,2(r7)
  809ff4:	1013d43a 	srai	r9,r2,16
  809ff8:	39c00104 	addi	r7,r7,4
  809ffc:	337ff436 	bltu	r6,r13,809fd0 <__mdiff+0xcc>
  80a000:	38bfff17 	ldw	r2,-4(r7)
  80a004:	38ffff04 	addi	r3,r7,-4
  80a008:	1000041e 	bne	r2,zero,80a01c <__mdiff+0x118>
  80a00c:	18ffff04 	addi	r3,r3,-4
  80a010:	18800017 	ldw	r2,0(r3)
  80a014:	52bfffc4 	addi	r10,r10,-1
  80a018:	103ffc26 	beq	r2,zero,80a00c <__mdiff+0x108>
  80a01c:	6005883a 	mov	r2,r12
  80a020:	62800415 	stw	r10,16(r12)
  80a024:	dfc00417 	ldw	ra,16(sp)
  80a028:	dcc00317 	ldw	r19,12(sp)
  80a02c:	dc800217 	ldw	r18,8(sp)
  80a030:	dc400117 	ldw	r17,4(sp)
  80a034:	dc000017 	ldw	r16,0(sp)
  80a038:	dec00504 	addi	sp,sp,20
  80a03c:	f800283a 	ret
  80a040:	9009883a 	mov	r4,r18
  80a044:	000b883a 	mov	r5,zero
  80a048:	0809ccc0 	call	809ccc <_Balloc>
  80a04c:	1019883a 	mov	r12,r2
  80a050:	00800044 	movi	r2,1
  80a054:	60800415 	stw	r2,16(r12)
  80a058:	6005883a 	mov	r2,r12
  80a05c:	60000515 	stw	zero,20(r12)
  80a060:	dfc00417 	ldw	ra,16(sp)
  80a064:	dcc00317 	ldw	r19,12(sp)
  80a068:	dc800217 	ldw	r18,8(sp)
  80a06c:	dc400117 	ldw	r17,4(sp)
  80a070:	dc000017 	ldw	r16,0(sp)
  80a074:	dec00504 	addi	sp,sp,20
  80a078:	f800283a 	ret
  80a07c:	880d883a 	mov	r6,r17
  80a080:	04c00044 	movi	r19,1
  80a084:	8023883a 	mov	r17,r16
  80a088:	3021883a 	mov	r16,r6
  80a08c:	003fac06 	br	809f40 <__mdiff+0x3c>

0080a090 <__lshift>:
  80a090:	defff904 	addi	sp,sp,-28
  80a094:	28800417 	ldw	r2,16(r5)
  80a098:	dc000015 	stw	r16,0(sp)
  80a09c:	3021d17a 	srai	r16,r6,5
  80a0a0:	28c00217 	ldw	r3,8(r5)
  80a0a4:	10800044 	addi	r2,r2,1
  80a0a8:	dc400115 	stw	r17,4(sp)
  80a0ac:	80a3883a 	add	r17,r16,r2
  80a0b0:	dd400515 	stw	r21,20(sp)
  80a0b4:	dd000415 	stw	r20,16(sp)
  80a0b8:	dc800215 	stw	r18,8(sp)
  80a0bc:	dfc00615 	stw	ra,24(sp)
  80a0c0:	2825883a 	mov	r18,r5
  80a0c4:	dcc00315 	stw	r19,12(sp)
  80a0c8:	3029883a 	mov	r20,r6
  80a0cc:	202b883a 	mov	r21,r4
  80a0d0:	29400117 	ldw	r5,4(r5)
  80a0d4:	1c40030e 	bge	r3,r17,80a0e4 <__lshift+0x54>
  80a0d8:	18c7883a 	add	r3,r3,r3
  80a0dc:	29400044 	addi	r5,r5,1
  80a0e0:	1c7ffd16 	blt	r3,r17,80a0d8 <__lshift+0x48>
  80a0e4:	a809883a 	mov	r4,r21
  80a0e8:	0809ccc0 	call	809ccc <_Balloc>
  80a0ec:	1027883a 	mov	r19,r2
  80a0f0:	11400504 	addi	r5,r2,20
  80a0f4:	0400090e 	bge	zero,r16,80a11c <__lshift+0x8c>
  80a0f8:	2805883a 	mov	r2,r5
  80a0fc:	0007883a 	mov	r3,zero
  80a100:	18c00044 	addi	r3,r3,1
  80a104:	10000015 	stw	zero,0(r2)
  80a108:	10800104 	addi	r2,r2,4
  80a10c:	80fffc1e 	bne	r16,r3,80a100 <__lshift+0x70>
  80a110:	8405883a 	add	r2,r16,r16
  80a114:	1085883a 	add	r2,r2,r2
  80a118:	288b883a 	add	r5,r5,r2
  80a11c:	90800417 	ldw	r2,16(r18)
  80a120:	91000504 	addi	r4,r18,20
  80a124:	a18007cc 	andi	r6,r20,31
  80a128:	1085883a 	add	r2,r2,r2
  80a12c:	1085883a 	add	r2,r2,r2
  80a130:	208f883a 	add	r7,r4,r2
  80a134:	30001e26 	beq	r6,zero,80a1b0 <__lshift+0x120>
  80a138:	00800804 	movi	r2,32
  80a13c:	1191c83a 	sub	r8,r2,r6
  80a140:	0007883a 	mov	r3,zero
  80a144:	20800017 	ldw	r2,0(r4)
  80a148:	1184983a 	sll	r2,r2,r6
  80a14c:	1884b03a 	or	r2,r3,r2
  80a150:	28800015 	stw	r2,0(r5)
  80a154:	20c00017 	ldw	r3,0(r4)
  80a158:	21000104 	addi	r4,r4,4
  80a15c:	29400104 	addi	r5,r5,4
  80a160:	1a06d83a 	srl	r3,r3,r8
  80a164:	21fff736 	bltu	r4,r7,80a144 <__lshift+0xb4>
  80a168:	28c00015 	stw	r3,0(r5)
  80a16c:	18000126 	beq	r3,zero,80a174 <__lshift+0xe4>
  80a170:	8c400044 	addi	r17,r17,1
  80a174:	88bfffc4 	addi	r2,r17,-1
  80a178:	98800415 	stw	r2,16(r19)
  80a17c:	a809883a 	mov	r4,r21
  80a180:	900b883a 	mov	r5,r18
  80a184:	080974c0 	call	80974c <_Bfree>
  80a188:	9805883a 	mov	r2,r19
  80a18c:	dfc00617 	ldw	ra,24(sp)
  80a190:	dd400517 	ldw	r21,20(sp)
  80a194:	dd000417 	ldw	r20,16(sp)
  80a198:	dcc00317 	ldw	r19,12(sp)
  80a19c:	dc800217 	ldw	r18,8(sp)
  80a1a0:	dc400117 	ldw	r17,4(sp)
  80a1a4:	dc000017 	ldw	r16,0(sp)
  80a1a8:	dec00704 	addi	sp,sp,28
  80a1ac:	f800283a 	ret
  80a1b0:	20800017 	ldw	r2,0(r4)
  80a1b4:	21000104 	addi	r4,r4,4
  80a1b8:	28800015 	stw	r2,0(r5)
  80a1bc:	29400104 	addi	r5,r5,4
  80a1c0:	21ffec2e 	bgeu	r4,r7,80a174 <__lshift+0xe4>
  80a1c4:	20800017 	ldw	r2,0(r4)
  80a1c8:	21000104 	addi	r4,r4,4
  80a1cc:	28800015 	stw	r2,0(r5)
  80a1d0:	29400104 	addi	r5,r5,4
  80a1d4:	21fff636 	bltu	r4,r7,80a1b0 <__lshift+0x120>
  80a1d8:	003fe606 	br	80a174 <__lshift+0xe4>

0080a1dc <__multiply>:
  80a1dc:	defff904 	addi	sp,sp,-28
  80a1e0:	dcc00315 	stw	r19,12(sp)
  80a1e4:	dc800215 	stw	r18,8(sp)
  80a1e8:	2cc00417 	ldw	r19,16(r5)
  80a1ec:	34800417 	ldw	r18,16(r6)
  80a1f0:	dd000415 	stw	r20,16(sp)
  80a1f4:	dc400115 	stw	r17,4(sp)
  80a1f8:	dfc00615 	stw	ra,24(sp)
  80a1fc:	dd400515 	stw	r21,20(sp)
  80a200:	dc000015 	stw	r16,0(sp)
  80a204:	2823883a 	mov	r17,r5
  80a208:	3029883a 	mov	r20,r6
  80a20c:	9c80040e 	bge	r19,r18,80a220 <__multiply+0x44>
  80a210:	9027883a 	mov	r19,r18
  80a214:	2c800417 	ldw	r18,16(r5)
  80a218:	2829883a 	mov	r20,r5
  80a21c:	3023883a 	mov	r17,r6
  80a220:	88800217 	ldw	r2,8(r17)
  80a224:	9ca1883a 	add	r16,r19,r18
  80a228:	89400117 	ldw	r5,4(r17)
  80a22c:	1400010e 	bge	r2,r16,80a234 <__multiply+0x58>
  80a230:	29400044 	addi	r5,r5,1
  80a234:	0809ccc0 	call	809ccc <_Balloc>
  80a238:	102b883a 	mov	r21,r2
  80a23c:	8405883a 	add	r2,r16,r16
  80a240:	1085883a 	add	r2,r2,r2
  80a244:	a9000504 	addi	r4,r21,20
  80a248:	209d883a 	add	r14,r4,r2
  80a24c:	2380042e 	bgeu	r4,r14,80a260 <__multiply+0x84>
  80a250:	2005883a 	mov	r2,r4
  80a254:	10000015 	stw	zero,0(r2)
  80a258:	10800104 	addi	r2,r2,4
  80a25c:	13bffd36 	bltu	r2,r14,80a254 <__multiply+0x78>
  80a260:	9485883a 	add	r2,r18,r18
  80a264:	9cc7883a 	add	r3,r19,r19
  80a268:	a1800504 	addi	r6,r20,20
  80a26c:	1085883a 	add	r2,r2,r2
  80a270:	8b400504 	addi	r13,r17,20
  80a274:	18c7883a 	add	r3,r3,r3
  80a278:	309f883a 	add	r15,r6,r2
  80a27c:	68d7883a 	add	r11,r13,r3
  80a280:	33c03b2e 	bgeu	r6,r15,80a370 <__multiply+0x194>
  80a284:	2019883a 	mov	r12,r4
  80a288:	30800017 	ldw	r2,0(r6)
  80a28c:	127fffcc 	andi	r9,r2,65535
  80a290:	48001826 	beq	r9,zero,80a2f4 <__multiply+0x118>
  80a294:	6811883a 	mov	r8,r13
  80a298:	600f883a 	mov	r7,r12
  80a29c:	0015883a 	mov	r10,zero
  80a2a0:	40c00017 	ldw	r3,0(r8)
  80a2a4:	39400017 	ldw	r5,0(r7)
  80a2a8:	42000104 	addi	r8,r8,4
  80a2ac:	193fffcc 	andi	r4,r3,65535
  80a2b0:	4909383a 	mul	r4,r9,r4
  80a2b4:	1806d43a 	srli	r3,r3,16
  80a2b8:	28bfffcc 	andi	r2,r5,65535
  80a2bc:	5085883a 	add	r2,r10,r2
  80a2c0:	2089883a 	add	r4,r4,r2
  80a2c4:	48c7383a 	mul	r3,r9,r3
  80a2c8:	280ad43a 	srli	r5,r5,16
  80a2cc:	2004d43a 	srli	r2,r4,16
  80a2d0:	3900000d 	sth	r4,0(r7)
  80a2d4:	1947883a 	add	r3,r3,r5
  80a2d8:	10c5883a 	add	r2,r2,r3
  80a2dc:	3880008d 	sth	r2,2(r7)
  80a2e0:	1014d43a 	srli	r10,r2,16
  80a2e4:	39c00104 	addi	r7,r7,4
  80a2e8:	42ffed36 	bltu	r8,r11,80a2a0 <__multiply+0xc4>
  80a2ec:	3a800015 	stw	r10,0(r7)
  80a2f0:	30800017 	ldw	r2,0(r6)
  80a2f4:	1012d43a 	srli	r9,r2,16
  80a2f8:	48001926 	beq	r9,zero,80a360 <__multiply+0x184>
  80a2fc:	60800017 	ldw	r2,0(r12)
  80a300:	6811883a 	mov	r8,r13
  80a304:	600f883a 	mov	r7,r12
  80a308:	0015883a 	mov	r10,zero
  80a30c:	100b883a 	mov	r5,r2
  80a310:	41000017 	ldw	r4,0(r8)
  80a314:	2806d43a 	srli	r3,r5,16
  80a318:	3880000d 	sth	r2,0(r7)
  80a31c:	20bfffcc 	andi	r2,r4,65535
  80a320:	4885383a 	mul	r2,r9,r2
  80a324:	50c7883a 	add	r3,r10,r3
  80a328:	2008d43a 	srli	r4,r4,16
  80a32c:	10c5883a 	add	r2,r2,r3
  80a330:	3880008d 	sth	r2,2(r7)
  80a334:	39c00104 	addi	r7,r7,4
  80a338:	39400017 	ldw	r5,0(r7)
  80a33c:	4909383a 	mul	r4,r9,r4
  80a340:	1004d43a 	srli	r2,r2,16
  80a344:	28ffffcc 	andi	r3,r5,65535
  80a348:	20c9883a 	add	r4,r4,r3
  80a34c:	1105883a 	add	r2,r2,r4
  80a350:	42000104 	addi	r8,r8,4
  80a354:	1014d43a 	srli	r10,r2,16
  80a358:	42ffed36 	bltu	r8,r11,80a310 <__multiply+0x134>
  80a35c:	38800015 	stw	r2,0(r7)
  80a360:	31800104 	addi	r6,r6,4
  80a364:	33c0022e 	bgeu	r6,r15,80a370 <__multiply+0x194>
  80a368:	63000104 	addi	r12,r12,4
  80a36c:	003fc606 	br	80a288 <__multiply+0xac>
  80a370:	0400090e 	bge	zero,r16,80a398 <__multiply+0x1bc>
  80a374:	70bfff17 	ldw	r2,-4(r14)
  80a378:	70ffff04 	addi	r3,r14,-4
  80a37c:	10000326 	beq	r2,zero,80a38c <__multiply+0x1b0>
  80a380:	00000506 	br	80a398 <__multiply+0x1bc>
  80a384:	18800017 	ldw	r2,0(r3)
  80a388:	1000031e 	bne	r2,zero,80a398 <__multiply+0x1bc>
  80a38c:	843fffc4 	addi	r16,r16,-1
  80a390:	18ffff04 	addi	r3,r3,-4
  80a394:	803ffb1e 	bne	r16,zero,80a384 <__multiply+0x1a8>
  80a398:	a805883a 	mov	r2,r21
  80a39c:	ac000415 	stw	r16,16(r21)
  80a3a0:	dfc00617 	ldw	ra,24(sp)
  80a3a4:	dd400517 	ldw	r21,20(sp)
  80a3a8:	dd000417 	ldw	r20,16(sp)
  80a3ac:	dcc00317 	ldw	r19,12(sp)
  80a3b0:	dc800217 	ldw	r18,8(sp)
  80a3b4:	dc400117 	ldw	r17,4(sp)
  80a3b8:	dc000017 	ldw	r16,0(sp)
  80a3bc:	dec00704 	addi	sp,sp,28
  80a3c0:	f800283a 	ret

0080a3c4 <__i2b>:
  80a3c4:	defffd04 	addi	sp,sp,-12
  80a3c8:	dc000015 	stw	r16,0(sp)
  80a3cc:	04000044 	movi	r16,1
  80a3d0:	dc800115 	stw	r18,4(sp)
  80a3d4:	2825883a 	mov	r18,r5
  80a3d8:	800b883a 	mov	r5,r16
  80a3dc:	dfc00215 	stw	ra,8(sp)
  80a3e0:	0809ccc0 	call	809ccc <_Balloc>
  80a3e4:	14000415 	stw	r16,16(r2)
  80a3e8:	14800515 	stw	r18,20(r2)
  80a3ec:	dfc00217 	ldw	ra,8(sp)
  80a3f0:	dc800117 	ldw	r18,4(sp)
  80a3f4:	dc000017 	ldw	r16,0(sp)
  80a3f8:	dec00304 	addi	sp,sp,12
  80a3fc:	f800283a 	ret

0080a400 <__multadd>:
  80a400:	defffa04 	addi	sp,sp,-24
  80a404:	dc800215 	stw	r18,8(sp)
  80a408:	2c800417 	ldw	r18,16(r5)
  80a40c:	dd000415 	stw	r20,16(sp)
  80a410:	dcc00315 	stw	r19,12(sp)
  80a414:	dc000015 	stw	r16,0(sp)
  80a418:	dfc00515 	stw	ra,20(sp)
  80a41c:	3821883a 	mov	r16,r7
  80a420:	dc400115 	stw	r17,4(sp)
  80a424:	2827883a 	mov	r19,r5
  80a428:	2029883a 	mov	r20,r4
  80a42c:	2a000504 	addi	r8,r5,20
  80a430:	000f883a 	mov	r7,zero
  80a434:	40800017 	ldw	r2,0(r8)
  80a438:	39c00044 	addi	r7,r7,1
  80a43c:	10ffffcc 	andi	r3,r2,65535
  80a440:	1987383a 	mul	r3,r3,r6
  80a444:	1004d43a 	srli	r2,r2,16
  80a448:	1c07883a 	add	r3,r3,r16
  80a44c:	180ad43a 	srli	r5,r3,16
  80a450:	1185383a 	mul	r2,r2,r6
  80a454:	18ffffcc 	andi	r3,r3,65535
  80a458:	1145883a 	add	r2,r2,r5
  80a45c:	1008943a 	slli	r4,r2,16
  80a460:	1020d43a 	srli	r16,r2,16
  80a464:	20c9883a 	add	r4,r4,r3
  80a468:	41000015 	stw	r4,0(r8)
  80a46c:	42000104 	addi	r8,r8,4
  80a470:	3cbff016 	blt	r7,r18,80a434 <__multadd+0x34>
  80a474:	80000826 	beq	r16,zero,80a498 <__multadd+0x98>
  80a478:	98800217 	ldw	r2,8(r19)
  80a47c:	90800f0e 	bge	r18,r2,80a4bc <__multadd+0xbc>
  80a480:	9485883a 	add	r2,r18,r18
  80a484:	1085883a 	add	r2,r2,r2
  80a488:	14c5883a 	add	r2,r2,r19
  80a48c:	90c00044 	addi	r3,r18,1
  80a490:	14000515 	stw	r16,20(r2)
  80a494:	98c00415 	stw	r3,16(r19)
  80a498:	9805883a 	mov	r2,r19
  80a49c:	dfc00517 	ldw	ra,20(sp)
  80a4a0:	dd000417 	ldw	r20,16(sp)
  80a4a4:	dcc00317 	ldw	r19,12(sp)
  80a4a8:	dc800217 	ldw	r18,8(sp)
  80a4ac:	dc400117 	ldw	r17,4(sp)
  80a4b0:	dc000017 	ldw	r16,0(sp)
  80a4b4:	dec00604 	addi	sp,sp,24
  80a4b8:	f800283a 	ret
  80a4bc:	99400117 	ldw	r5,4(r19)
  80a4c0:	a009883a 	mov	r4,r20
  80a4c4:	29400044 	addi	r5,r5,1
  80a4c8:	0809ccc0 	call	809ccc <_Balloc>
  80a4cc:	99800417 	ldw	r6,16(r19)
  80a4d0:	99400304 	addi	r5,r19,12
  80a4d4:	11000304 	addi	r4,r2,12
  80a4d8:	318d883a 	add	r6,r6,r6
  80a4dc:	318d883a 	add	r6,r6,r6
  80a4e0:	31800204 	addi	r6,r6,8
  80a4e4:	1023883a 	mov	r17,r2
  80a4e8:	08031ac0 	call	8031ac <memcpy>
  80a4ec:	980b883a 	mov	r5,r19
  80a4f0:	a009883a 	mov	r4,r20
  80a4f4:	080974c0 	call	80974c <_Bfree>
  80a4f8:	8827883a 	mov	r19,r17
  80a4fc:	003fe006 	br	80a480 <__multadd+0x80>

0080a500 <__pow5mult>:
  80a500:	defffa04 	addi	sp,sp,-24
  80a504:	308000cc 	andi	r2,r6,3
  80a508:	dd000415 	stw	r20,16(sp)
  80a50c:	dcc00315 	stw	r19,12(sp)
  80a510:	dc000015 	stw	r16,0(sp)
  80a514:	dfc00515 	stw	ra,20(sp)
  80a518:	dc800215 	stw	r18,8(sp)
  80a51c:	dc400115 	stw	r17,4(sp)
  80a520:	3021883a 	mov	r16,r6
  80a524:	2027883a 	mov	r19,r4
  80a528:	2829883a 	mov	r20,r5
  80a52c:	10002b1e 	bne	r2,zero,80a5dc <__pow5mult+0xdc>
  80a530:	8025d0ba 	srai	r18,r16,2
  80a534:	90001b26 	beq	r18,zero,80a5a4 <__pow5mult+0xa4>
  80a538:	9c001217 	ldw	r16,72(r19)
  80a53c:	8000081e 	bne	r16,zero,80a560 <__pow5mult+0x60>
  80a540:	00003006 	br	80a604 <__pow5mult+0x104>
  80a544:	800b883a 	mov	r5,r16
  80a548:	800d883a 	mov	r6,r16
  80a54c:	9809883a 	mov	r4,r19
  80a550:	90001426 	beq	r18,zero,80a5a4 <__pow5mult+0xa4>
  80a554:	80800017 	ldw	r2,0(r16)
  80a558:	10001b26 	beq	r2,zero,80a5c8 <__pow5mult+0xc8>
  80a55c:	1021883a 	mov	r16,r2
  80a560:	9080004c 	andi	r2,r18,1
  80a564:	1005003a 	cmpeq	r2,r2,zero
  80a568:	9025d07a 	srai	r18,r18,1
  80a56c:	800d883a 	mov	r6,r16
  80a570:	9809883a 	mov	r4,r19
  80a574:	a00b883a 	mov	r5,r20
  80a578:	103ff21e 	bne	r2,zero,80a544 <__pow5mult+0x44>
  80a57c:	080a1dc0 	call	80a1dc <__multiply>
  80a580:	a00b883a 	mov	r5,r20
  80a584:	9809883a 	mov	r4,r19
  80a588:	1023883a 	mov	r17,r2
  80a58c:	080974c0 	call	80974c <_Bfree>
  80a590:	8829883a 	mov	r20,r17
  80a594:	800b883a 	mov	r5,r16
  80a598:	800d883a 	mov	r6,r16
  80a59c:	9809883a 	mov	r4,r19
  80a5a0:	903fec1e 	bne	r18,zero,80a554 <__pow5mult+0x54>
  80a5a4:	a005883a 	mov	r2,r20
  80a5a8:	dfc00517 	ldw	ra,20(sp)
  80a5ac:	dd000417 	ldw	r20,16(sp)
  80a5b0:	dcc00317 	ldw	r19,12(sp)
  80a5b4:	dc800217 	ldw	r18,8(sp)
  80a5b8:	dc400117 	ldw	r17,4(sp)
  80a5bc:	dc000017 	ldw	r16,0(sp)
  80a5c0:	dec00604 	addi	sp,sp,24
  80a5c4:	f800283a 	ret
  80a5c8:	080a1dc0 	call	80a1dc <__multiply>
  80a5cc:	80800015 	stw	r2,0(r16)
  80a5d0:	1021883a 	mov	r16,r2
  80a5d4:	10000015 	stw	zero,0(r2)
  80a5d8:	003fe106 	br	80a560 <__pow5mult+0x60>
  80a5dc:	1085883a 	add	r2,r2,r2
  80a5e0:	00c02074 	movhi	r3,129
  80a5e4:	18d40404 	addi	r3,r3,20496
  80a5e8:	1085883a 	add	r2,r2,r2
  80a5ec:	10c5883a 	add	r2,r2,r3
  80a5f0:	11bfff17 	ldw	r6,-4(r2)
  80a5f4:	000f883a 	mov	r7,zero
  80a5f8:	080a4000 	call	80a400 <__multadd>
  80a5fc:	1029883a 	mov	r20,r2
  80a600:	003fcb06 	br	80a530 <__pow5mult+0x30>
  80a604:	9809883a 	mov	r4,r19
  80a608:	01409c44 	movi	r5,625
  80a60c:	080a3c40 	call	80a3c4 <__i2b>
  80a610:	98801215 	stw	r2,72(r19)
  80a614:	1021883a 	mov	r16,r2
  80a618:	10000015 	stw	zero,0(r2)
  80a61c:	003fd006 	br	80a560 <__pow5mult+0x60>

0080a620 <__s2b>:
  80a620:	defff904 	addi	sp,sp,-28
  80a624:	dcc00315 	stw	r19,12(sp)
  80a628:	dc800215 	stw	r18,8(sp)
  80a62c:	2827883a 	mov	r19,r5
  80a630:	2025883a 	mov	r18,r4
  80a634:	01400244 	movi	r5,9
  80a638:	39000204 	addi	r4,r7,8
  80a63c:	dd000415 	stw	r20,16(sp)
  80a640:	dc400115 	stw	r17,4(sp)
  80a644:	dfc00615 	stw	ra,24(sp)
  80a648:	dd400515 	stw	r21,20(sp)
  80a64c:	dc000015 	stw	r16,0(sp)
  80a650:	3829883a 	mov	r20,r7
  80a654:	3023883a 	mov	r17,r6
  80a658:	080fa800 	call	80fa80 <__divsi3>
  80a65c:	00c00044 	movi	r3,1
  80a660:	1880350e 	bge	r3,r2,80a738 <__s2b+0x118>
  80a664:	000b883a 	mov	r5,zero
  80a668:	18c7883a 	add	r3,r3,r3
  80a66c:	29400044 	addi	r5,r5,1
  80a670:	18bffd16 	blt	r3,r2,80a668 <__s2b+0x48>
  80a674:	9009883a 	mov	r4,r18
  80a678:	0809ccc0 	call	809ccc <_Balloc>
  80a67c:	1011883a 	mov	r8,r2
  80a680:	d8800717 	ldw	r2,28(sp)
  80a684:	00c00044 	movi	r3,1
  80a688:	01800244 	movi	r6,9
  80a68c:	40800515 	stw	r2,20(r8)
  80a690:	40c00415 	stw	r3,16(r8)
  80a694:	3440260e 	bge	r6,r17,80a730 <__s2b+0x110>
  80a698:	3021883a 	mov	r16,r6
  80a69c:	99ab883a 	add	r21,r19,r6
  80a6a0:	9c05883a 	add	r2,r19,r16
  80a6a4:	11c00007 	ldb	r7,0(r2)
  80a6a8:	400b883a 	mov	r5,r8
  80a6ac:	9009883a 	mov	r4,r18
  80a6b0:	39fff404 	addi	r7,r7,-48
  80a6b4:	01800284 	movi	r6,10
  80a6b8:	080a4000 	call	80a400 <__multadd>
  80a6bc:	84000044 	addi	r16,r16,1
  80a6c0:	1011883a 	mov	r8,r2
  80a6c4:	8c3ff61e 	bne	r17,r16,80a6a0 <__s2b+0x80>
  80a6c8:	ac45883a 	add	r2,r21,r17
  80a6cc:	117ffe04 	addi	r5,r2,-8
  80a6d0:	880d883a 	mov	r6,r17
  80a6d4:	35000c0e 	bge	r6,r20,80a708 <__s2b+0xe8>
  80a6d8:	a185c83a 	sub	r2,r20,r6
  80a6dc:	2821883a 	mov	r16,r5
  80a6e0:	28a3883a 	add	r17,r5,r2
  80a6e4:	81c00007 	ldb	r7,0(r16)
  80a6e8:	400b883a 	mov	r5,r8
  80a6ec:	9009883a 	mov	r4,r18
  80a6f0:	39fff404 	addi	r7,r7,-48
  80a6f4:	01800284 	movi	r6,10
  80a6f8:	080a4000 	call	80a400 <__multadd>
  80a6fc:	84000044 	addi	r16,r16,1
  80a700:	1011883a 	mov	r8,r2
  80a704:	847ff71e 	bne	r16,r17,80a6e4 <__s2b+0xc4>
  80a708:	4005883a 	mov	r2,r8
  80a70c:	dfc00617 	ldw	ra,24(sp)
  80a710:	dd400517 	ldw	r21,20(sp)
  80a714:	dd000417 	ldw	r20,16(sp)
  80a718:	dcc00317 	ldw	r19,12(sp)
  80a71c:	dc800217 	ldw	r18,8(sp)
  80a720:	dc400117 	ldw	r17,4(sp)
  80a724:	dc000017 	ldw	r16,0(sp)
  80a728:	dec00704 	addi	sp,sp,28
  80a72c:	f800283a 	ret
  80a730:	99400284 	addi	r5,r19,10
  80a734:	003fe706 	br	80a6d4 <__s2b+0xb4>
  80a738:	000b883a 	mov	r5,zero
  80a73c:	003fcd06 	br	80a674 <__s2b+0x54>

0080a740 <_read_r>:
  80a740:	defffd04 	addi	sp,sp,-12
  80a744:	dc000015 	stw	r16,0(sp)
  80a748:	040020b4 	movhi	r16,130
  80a74c:	8422ed04 	addi	r16,r16,-29772
  80a750:	dc400115 	stw	r17,4(sp)
  80a754:	80000015 	stw	zero,0(r16)
  80a758:	2023883a 	mov	r17,r4
  80a75c:	2809883a 	mov	r4,r5
  80a760:	300b883a 	mov	r5,r6
  80a764:	380d883a 	mov	r6,r7
  80a768:	dfc00215 	stw	ra,8(sp)
  80a76c:	081107c0 	call	81107c <read>
  80a770:	1007883a 	mov	r3,r2
  80a774:	00bfffc4 	movi	r2,-1
  80a778:	18800626 	beq	r3,r2,80a794 <_read_r+0x54>
  80a77c:	1805883a 	mov	r2,r3
  80a780:	dfc00217 	ldw	ra,8(sp)
  80a784:	dc400117 	ldw	r17,4(sp)
  80a788:	dc000017 	ldw	r16,0(sp)
  80a78c:	dec00304 	addi	sp,sp,12
  80a790:	f800283a 	ret
  80a794:	80800017 	ldw	r2,0(r16)
  80a798:	103ff826 	beq	r2,zero,80a77c <_read_r+0x3c>
  80a79c:	88800015 	stw	r2,0(r17)
  80a7a0:	1805883a 	mov	r2,r3
  80a7a4:	dfc00217 	ldw	ra,8(sp)
  80a7a8:	dc400117 	ldw	r17,4(sp)
  80a7ac:	dc000017 	ldw	r16,0(sp)
  80a7b0:	dec00304 	addi	sp,sp,12
  80a7b4:	f800283a 	ret

0080a7b8 <__isinfd>:
  80a7b8:	200d883a 	mov	r6,r4
  80a7bc:	0109c83a 	sub	r4,zero,r4
  80a7c0:	2188b03a 	or	r4,r4,r6
  80a7c4:	2008d7fa 	srli	r4,r4,31
  80a7c8:	00a00034 	movhi	r2,32768
  80a7cc:	10bfffc4 	addi	r2,r2,-1
  80a7d0:	1144703a 	and	r2,r2,r5
  80a7d4:	2088b03a 	or	r4,r4,r2
  80a7d8:	009ffc34 	movhi	r2,32752
  80a7dc:	1105c83a 	sub	r2,r2,r4
  80a7e0:	0087c83a 	sub	r3,zero,r2
  80a7e4:	10c4b03a 	or	r2,r2,r3
  80a7e8:	1004d7fa 	srli	r2,r2,31
  80a7ec:	00c00044 	movi	r3,1
  80a7f0:	1885c83a 	sub	r2,r3,r2
  80a7f4:	f800283a 	ret

0080a7f8 <__isnand>:
  80a7f8:	200d883a 	mov	r6,r4
  80a7fc:	0109c83a 	sub	r4,zero,r4
  80a800:	2188b03a 	or	r4,r4,r6
  80a804:	2008d7fa 	srli	r4,r4,31
  80a808:	00a00034 	movhi	r2,32768
  80a80c:	10bfffc4 	addi	r2,r2,-1
  80a810:	1144703a 	and	r2,r2,r5
  80a814:	2088b03a 	or	r4,r4,r2
  80a818:	009ffc34 	movhi	r2,32752
  80a81c:	1105c83a 	sub	r2,r2,r4
  80a820:	1004d7fa 	srli	r2,r2,31
  80a824:	f800283a 	ret

0080a828 <__sccl>:
  80a828:	28c00003 	ldbu	r3,0(r5)
  80a82c:	00801784 	movi	r2,94
  80a830:	2a000044 	addi	r8,r5,1
  80a834:	18802526 	beq	r3,r2,80a8cc <__sccl+0xa4>
  80a838:	180f883a 	mov	r7,r3
  80a83c:	0013883a 	mov	r9,zero
  80a840:	000d883a 	mov	r6,zero
  80a844:	0007883a 	mov	r3,zero
  80a848:	01404004 	movi	r5,256
  80a84c:	1905883a 	add	r2,r3,r4
  80a850:	18c00044 	addi	r3,r3,1
  80a854:	11800005 	stb	r6,0(r2)
  80a858:	197ffc1e 	bne	r3,r5,80a84c <__sccl+0x24>
  80a85c:	38000c26 	beq	r7,zero,80a890 <__sccl+0x68>
  80a860:	00800044 	movi	r2,1
  80a864:	124dc83a 	sub	r6,r2,r9
  80a868:	3905883a 	add	r2,r7,r4
  80a86c:	11800005 	stb	r6,0(r2)
  80a870:	41400044 	addi	r5,r8,1
  80a874:	02400b44 	movi	r9,45
  80a878:	02801744 	movi	r10,93
  80a87c:	28bfffc3 	ldbu	r2,-1(r5)
  80a880:	2811883a 	mov	r8,r5
  80a884:	12400726 	beq	r2,r9,80a8a4 <__sccl+0x7c>
  80a888:	12800226 	beq	r2,r10,80a894 <__sccl+0x6c>
  80a88c:	1000031e 	bne	r2,zero,80a89c <__sccl+0x74>
  80a890:	423fffc4 	addi	r8,r8,-1
  80a894:	4005883a 	mov	r2,r8
  80a898:	f800283a 	ret
  80a89c:	100f883a 	mov	r7,r2
  80a8a0:	003ff106 	br	80a868 <__sccl+0x40>
  80a8a4:	28c00003 	ldbu	r3,0(r5)
  80a8a8:	1a800d26 	beq	r3,r10,80a8e0 <__sccl+0xb8>
  80a8ac:	19c00c16 	blt	r3,r7,80a8e0 <__sccl+0xb8>
  80a8b0:	21c5883a 	add	r2,r4,r7
  80a8b4:	39c00044 	addi	r7,r7,1
  80a8b8:	11800045 	stb	r6,1(r2)
  80a8bc:	10800044 	addi	r2,r2,1
  80a8c0:	38fffc16 	blt	r7,r3,80a8b4 <__sccl+0x8c>
  80a8c4:	29400084 	addi	r5,r5,2
  80a8c8:	003fec06 	br	80a87c <__sccl+0x54>
  80a8cc:	29c00043 	ldbu	r7,1(r5)
  80a8d0:	02400044 	movi	r9,1
  80a8d4:	2a000084 	addi	r8,r5,2
  80a8d8:	480d883a 	mov	r6,r9
  80a8dc:	003fd906 	br	80a844 <__sccl+0x1c>
  80a8e0:	01c00b44 	movi	r7,45
  80a8e4:	003fe006 	br	80a868 <__sccl+0x40>

0080a8e8 <nanf>:
  80a8e8:	009ff034 	movhi	r2,32704
  80a8ec:	f800283a 	ret

0080a8f0 <strcmp>:
  80a8f0:	2144b03a 	or	r2,r4,r5
  80a8f4:	108000cc 	andi	r2,r2,3
  80a8f8:	10001d1e 	bne	r2,zero,80a970 <strcmp+0x80>
  80a8fc:	200f883a 	mov	r7,r4
  80a900:	28800017 	ldw	r2,0(r5)
  80a904:	21000017 	ldw	r4,0(r4)
  80a908:	280d883a 	mov	r6,r5
  80a90c:	2080161e 	bne	r4,r2,80a968 <strcmp+0x78>
  80a910:	023fbff4 	movhi	r8,65279
  80a914:	423fbfc4 	addi	r8,r8,-257
  80a918:	2207883a 	add	r3,r4,r8
  80a91c:	01602074 	movhi	r5,32897
  80a920:	29602004 	addi	r5,r5,-32640
  80a924:	1946703a 	and	r3,r3,r5
  80a928:	0104303a 	nor	r2,zero,r4
  80a92c:	10c4703a 	and	r2,r2,r3
  80a930:	10001c1e 	bne	r2,zero,80a9a4 <strcmp+0xb4>
  80a934:	4013883a 	mov	r9,r8
  80a938:	2811883a 	mov	r8,r5
  80a93c:	00000106 	br	80a944 <strcmp+0x54>
  80a940:	1800181e 	bne	r3,zero,80a9a4 <strcmp+0xb4>
  80a944:	39c00104 	addi	r7,r7,4
  80a948:	39000017 	ldw	r4,0(r7)
  80a94c:	31800104 	addi	r6,r6,4
  80a950:	31400017 	ldw	r5,0(r6)
  80a954:	2245883a 	add	r2,r4,r9
  80a958:	1204703a 	and	r2,r2,r8
  80a95c:	0106303a 	nor	r3,zero,r4
  80a960:	1886703a 	and	r3,r3,r2
  80a964:	217ff626 	beq	r4,r5,80a940 <strcmp+0x50>
  80a968:	3809883a 	mov	r4,r7
  80a96c:	300b883a 	mov	r5,r6
  80a970:	20c00007 	ldb	r3,0(r4)
  80a974:	1800051e 	bne	r3,zero,80a98c <strcmp+0x9c>
  80a978:	00000606 	br	80a994 <strcmp+0xa4>
  80a97c:	21000044 	addi	r4,r4,1
  80a980:	20c00007 	ldb	r3,0(r4)
  80a984:	29400044 	addi	r5,r5,1
  80a988:	18000226 	beq	r3,zero,80a994 <strcmp+0xa4>
  80a98c:	28800007 	ldb	r2,0(r5)
  80a990:	18bffa26 	beq	r3,r2,80a97c <strcmp+0x8c>
  80a994:	20c00003 	ldbu	r3,0(r4)
  80a998:	28800003 	ldbu	r2,0(r5)
  80a99c:	1885c83a 	sub	r2,r3,r2
  80a9a0:	f800283a 	ret
  80a9a4:	0005883a 	mov	r2,zero
  80a9a8:	f800283a 	ret

0080a9ac <match>:
  80a9ac:	21800017 	ldw	r6,0(r4)
  80a9b0:	01c01004 	movi	r7,64
  80a9b4:	02001684 	movi	r8,90
  80a9b8:	28800007 	ldb	r2,0(r5)
  80a9bc:	29400044 	addi	r5,r5,1
  80a9c0:	10000826 	beq	r2,zero,80a9e4 <match+0x38>
  80a9c4:	31800044 	addi	r6,r6,1
  80a9c8:	30c00007 	ldb	r3,0(r6)
  80a9cc:	38c0020e 	bge	r7,r3,80a9d8 <match+0x2c>
  80a9d0:	40c00116 	blt	r8,r3,80a9d8 <match+0x2c>
  80a9d4:	18c00804 	addi	r3,r3,32
  80a9d8:	18bff726 	beq	r3,r2,80a9b8 <match+0xc>
  80a9dc:	0005883a 	mov	r2,zero
  80a9e0:	f800283a 	ret
  80a9e4:	30800044 	addi	r2,r6,1
  80a9e8:	20800015 	stw	r2,0(r4)
  80a9ec:	00800044 	movi	r2,1
  80a9f0:	f800283a 	ret

0080a9f4 <_strtod_r>:
  80a9f4:	deffde04 	addi	sp,sp,-136
  80a9f8:	df002015 	stw	fp,128(sp)
  80a9fc:	dd401d15 	stw	r21,116(sp)
  80aa00:	dc401915 	stw	r17,100(sp)
  80aa04:	dfc02115 	stw	ra,132(sp)
  80aa08:	ddc01f15 	stw	r23,124(sp)
  80aa0c:	dd801e15 	stw	r22,120(sp)
  80aa10:	dd001c15 	stw	r20,112(sp)
  80aa14:	dcc01b15 	stw	r19,108(sp)
  80aa18:	dc801a15 	stw	r18,104(sp)
  80aa1c:	dc001815 	stw	r16,96(sp)
  80aa20:	2823883a 	mov	r17,r5
  80aa24:	202b883a 	mov	r21,r4
  80aa28:	d9801515 	stw	r6,84(sp)
  80aa2c:	d8000915 	stw	zero,36(sp)
  80aa30:	d8000a15 	stw	zero,40(sp)
  80aa34:	d9400415 	stw	r5,16(sp)
  80aa38:	df000904 	addi	fp,sp,36
  80aa3c:	da000417 	ldw	r8,16(sp)
  80aa40:	00800b44 	movi	r2,45
  80aa44:	40c00003 	ldbu	r3,0(r8)
  80aa48:	10c03536 	bltu	r2,r3,80ab20 <_strtod_r+0x12c>
  80aa4c:	18c5883a 	add	r2,r3,r3
  80aa50:	1085883a 	add	r2,r2,r2
  80aa54:	00c02074 	movhi	r3,129
  80aa58:	18ea9a04 	addi	r3,r3,-21912
  80aa5c:	10c5883a 	add	r2,r2,r3
  80aa60:	11000017 	ldw	r4,0(r2)
  80aa64:	2000683a 	jmp	r4
  80aa68:	0080ac5c 	xori	r2,zero,689
  80aa6c:	0080ab20 	cmpeqi	r2,zero,684
  80aa70:	0080ab20 	cmpeqi	r2,zero,684
  80aa74:	0080ab20 	cmpeqi	r2,zero,684
  80aa78:	0080ab20 	cmpeqi	r2,zero,684
  80aa7c:	0080ab20 	cmpeqi	r2,zero,684
  80aa80:	0080ab20 	cmpeqi	r2,zero,684
  80aa84:	0080ab20 	cmpeqi	r2,zero,684
  80aa88:	0080ab20 	cmpeqi	r2,zero,684
  80aa8c:	0080af74 	movhi	r2,701
  80aa90:	0080af74 	movhi	r2,701
  80aa94:	0080af74 	movhi	r2,701
  80aa98:	0080af74 	movhi	r2,701
  80aa9c:	0080af74 	movhi	r2,701
  80aaa0:	0080ab20 	cmpeqi	r2,zero,684
  80aaa4:	0080ab20 	cmpeqi	r2,zero,684
  80aaa8:	0080ab20 	cmpeqi	r2,zero,684
  80aaac:	0080ab20 	cmpeqi	r2,zero,684
  80aab0:	0080ab20 	cmpeqi	r2,zero,684
  80aab4:	0080ab20 	cmpeqi	r2,zero,684
  80aab8:	0080ab20 	cmpeqi	r2,zero,684
  80aabc:	0080ab20 	cmpeqi	r2,zero,684
  80aac0:	0080ab20 	cmpeqi	r2,zero,684
  80aac4:	0080ab20 	cmpeqi	r2,zero,684
  80aac8:	0080ab20 	cmpeqi	r2,zero,684
  80aacc:	0080ab20 	cmpeqi	r2,zero,684
  80aad0:	0080ab20 	cmpeqi	r2,zero,684
  80aad4:	0080ab20 	cmpeqi	r2,zero,684
  80aad8:	0080ab20 	cmpeqi	r2,zero,684
  80aadc:	0080ab20 	cmpeqi	r2,zero,684
  80aae0:	0080ab20 	cmpeqi	r2,zero,684
  80aae4:	0080ab20 	cmpeqi	r2,zero,684
  80aae8:	0080af74 	movhi	r2,701
  80aaec:	0080ab20 	cmpeqi	r2,zero,684
  80aaf0:	0080ab20 	cmpeqi	r2,zero,684
  80aaf4:	0080ab20 	cmpeqi	r2,zero,684
  80aaf8:	0080ab20 	cmpeqi	r2,zero,684
  80aafc:	0080ab20 	cmpeqi	r2,zero,684
  80ab00:	0080ab20 	cmpeqi	r2,zero,684
  80ab04:	0080ab20 	cmpeqi	r2,zero,684
  80ab08:	0080ab20 	cmpeqi	r2,zero,684
  80ab0c:	0080ab20 	cmpeqi	r2,zero,684
  80ab10:	0080ab20 	cmpeqi	r2,zero,684
  80ab14:	0080af54 	movui	r2,701
  80ab18:	0080ab20 	cmpeqi	r2,zero,684
  80ab1c:	0080af80 	call	80af8 <__reset-0x77f508>
  80ab20:	d8001115 	stw	zero,68(sp)
  80ab24:	40c00007 	ldb	r3,0(r8)
  80ab28:	00800c04 	movi	r2,48
  80ab2c:	1880d026 	beq	r3,r2,80ae70 <_strtod_r+0x47c>
  80ab30:	001f883a 	mov	r15,zero
  80ab34:	41000007 	ldb	r4,0(r8)
  80ab38:	00c00bc4 	movi	r3,47
  80ab3c:	402d883a 	mov	r22,r8
  80ab40:	1903470e 	bge	r3,r4,80b860 <_strtod_r+0xe6c>
  80ab44:	00800e44 	movi	r2,57
  80ab48:	11034516 	blt	r2,r4,80b860 <_strtod_r+0xe6c>
  80ab4c:	180f883a 	mov	r7,r3
  80ab50:	1013883a 	mov	r9,r2
  80ab54:	4007883a 	mov	r3,r8
  80ab58:	000d883a 	mov	r6,zero
  80ab5c:	0029883a 	mov	r20,zero
  80ab60:	0021883a 	mov	r16,zero
  80ab64:	01400204 	movi	r5,8
  80ab68:	028003c4 	movi	r10,15
  80ab6c:	29803116 	blt	r5,r6,80ac34 <_strtod_r+0x240>
  80ab70:	a08002a4 	muli	r2,r20,10
  80ab74:	1105883a 	add	r2,r2,r4
  80ab78:	153ff404 	addi	r20,r2,-48
  80ab7c:	1a000044 	addi	r8,r3,1
  80ab80:	da000415 	stw	r8,16(sp)
  80ab84:	41000007 	ldb	r4,0(r8)
  80ab88:	31800044 	addi	r6,r6,1
  80ab8c:	4007883a 	mov	r3,r8
  80ab90:	3900010e 	bge	r7,r4,80ab98 <_strtod_r+0x1a4>
  80ab94:	493ff50e 	bge	r9,r4,80ab6c <_strtod_r+0x178>
  80ab98:	00800b84 	movi	r2,46
  80ab9c:	2080c126 	beq	r4,r2,80aea4 <_strtod_r+0x4b0>
  80aba0:	3027883a 	mov	r19,r6
  80aba4:	0025883a 	mov	r18,zero
  80aba8:	0015883a 	mov	r10,zero
  80abac:	000f883a 	mov	r7,zero
  80abb0:	00801944 	movi	r2,101
  80abb4:	20802426 	beq	r4,r2,80ac48 <_strtod_r+0x254>
  80abb8:	00801144 	movi	r2,69
  80abbc:	20802226 	beq	r4,r2,80ac48 <_strtod_r+0x254>
  80abc0:	9816c03a 	cmpne	r11,r19,zero
  80abc4:	000b883a 	mov	r5,zero
  80abc8:	5800631e 	bne	r11,zero,80ad58 <_strtod_r+0x364>
  80abcc:	3800c126 	beq	r7,zero,80aed4 <_strtod_r+0x4e0>
  80abd0:	d8c01517 	ldw	r3,84(sp)
  80abd4:	18000226 	beq	r3,zero,80abe0 <_strtod_r+0x1ec>
  80abd8:	d8800417 	ldw	r2,16(sp)
  80abdc:	18800015 	stw	r2,0(r3)
  80abe0:	d9001117 	ldw	r4,68(sp)
  80abe4:	2005003a 	cmpeq	r2,r4,zero
  80abe8:	10001f1e 	bne	r2,zero,80ac68 <_strtod_r+0x274>
  80abec:	e0800017 	ldw	r2,0(fp)
  80abf0:	e0c00117 	ldw	r3,4(fp)
  80abf4:	1009883a 	mov	r4,r2
  80abf8:	1960003c 	xorhi	r5,r3,32768
  80abfc:	2005883a 	mov	r2,r4
  80ac00:	2807883a 	mov	r3,r5
  80ac04:	dfc02117 	ldw	ra,132(sp)
  80ac08:	df002017 	ldw	fp,128(sp)
  80ac0c:	ddc01f17 	ldw	r23,124(sp)
  80ac10:	dd801e17 	ldw	r22,120(sp)
  80ac14:	dd401d17 	ldw	r21,116(sp)
  80ac18:	dd001c17 	ldw	r20,112(sp)
  80ac1c:	dcc01b17 	ldw	r19,108(sp)
  80ac20:	dc801a17 	ldw	r18,104(sp)
  80ac24:	dc401917 	ldw	r17,100(sp)
  80ac28:	dc001817 	ldw	r16,96(sp)
  80ac2c:	dec02204 	addi	sp,sp,136
  80ac30:	f800283a 	ret
  80ac34:	51bfd116 	blt	r10,r6,80ab7c <_strtod_r+0x188>
  80ac38:	808002a4 	muli	r2,r16,10
  80ac3c:	1105883a 	add	r2,r2,r4
  80ac40:	143ff404 	addi	r16,r2,-48
  80ac44:	003fcd06 	br	80ab7c <_strtod_r+0x188>
  80ac48:	9816c03a 	cmpne	r11,r19,zero
  80ac4c:	5800091e 	bne	r11,zero,80ac74 <_strtod_r+0x280>
  80ac50:	3800081e 	bne	r7,zero,80ac74 <_strtod_r+0x280>
  80ac54:	7805003a 	cmpeq	r2,r15,zero
  80ac58:	10000626 	beq	r2,zero,80ac74 <_strtod_r+0x280>
  80ac5c:	d8001115 	stw	zero,68(sp)
  80ac60:	dc400415 	stw	r17,16(sp)
  80ac64:	003fda06 	br	80abd0 <_strtod_r+0x1dc>
  80ac68:	e1000017 	ldw	r4,0(fp)
  80ac6c:	e1400117 	ldw	r5,4(fp)
  80ac70:	003fe206 	br	80abfc <_strtod_r+0x208>
  80ac74:	dc400417 	ldw	r17,16(sp)
  80ac78:	00800ac4 	movi	r2,43
  80ac7c:	8a000044 	addi	r8,r17,1
  80ac80:	da000415 	stw	r8,16(sp)
  80ac84:	88c00047 	ldb	r3,1(r17)
  80ac88:	4009883a 	mov	r4,r8
  80ac8c:	1880bf26 	beq	r3,r2,80af8c <_strtod_r+0x598>
  80ac90:	00800b44 	movi	r2,45
  80ac94:	18834526 	beq	r3,r2,80b9ac <_strtod_r+0xfb8>
  80ac98:	1809883a 	mov	r4,r3
  80ac9c:	20fff404 	addi	r3,r4,-48
  80aca0:	00800244 	movi	r2,9
  80aca4:	001d883a 	mov	r14,zero
  80aca8:	10c0bf36 	bltu	r2,r3,80afa8 <_strtod_r+0x5b4>
  80acac:	00800c04 	movi	r2,48
  80acb0:	2080061e 	bne	r4,r2,80accc <_strtod_r+0x2d8>
  80acb4:	da000417 	ldw	r8,16(sp)
  80acb8:	2005883a 	mov	r2,r4
  80acbc:	42000044 	addi	r8,r8,1
  80acc0:	da000415 	stw	r8,16(sp)
  80acc4:	41000007 	ldb	r4,0(r8)
  80acc8:	20bffc26 	beq	r4,r2,80acbc <_strtod_r+0x2c8>
  80accc:	20fff3c4 	addi	r3,r4,-49
  80acd0:	00800204 	movi	r2,8
  80acd4:	10ffbb36 	bltu	r2,r3,80abc4 <_strtod_r+0x1d0>
  80acd8:	da000417 	ldw	r8,16(sp)
  80acdc:	227ff404 	addi	r9,r4,-48
  80ace0:	03000bc4 	movi	r12,47
  80ace4:	4007883a 	mov	r3,r8
  80ace8:	42000044 	addi	r8,r8,1
  80acec:	da000415 	stw	r8,16(sp)
  80acf0:	41000007 	ldb	r4,0(r8)
  80acf4:	61000d0e 	bge	r12,r4,80ad2c <_strtod_r+0x338>
  80acf8:	00800e44 	movi	r2,57
  80acfc:	11000b16 	blt	r2,r4,80ad2c <_strtod_r+0x338>
  80ad00:	601b883a 	mov	r13,r12
  80ad04:	1019883a 	mov	r12,r2
  80ad08:	00000106 	br	80ad10 <_strtod_r+0x31c>
  80ad0c:	61000716 	blt	r12,r4,80ad2c <_strtod_r+0x338>
  80ad10:	488002a4 	muli	r2,r9,10
  80ad14:	42000044 	addi	r8,r8,1
  80ad18:	da000415 	stw	r8,16(sp)
  80ad1c:	2085883a 	add	r2,r4,r2
  80ad20:	41000007 	ldb	r4,0(r8)
  80ad24:	127ff404 	addi	r9,r2,-48
  80ad28:	693ff816 	blt	r13,r4,80ad0c <_strtod_r+0x318>
  80ad2c:	40c7c83a 	sub	r3,r8,r3
  80ad30:	00800204 	movi	r2,8
  80ad34:	10c2e416 	blt	r2,r3,80b8c8 <_strtod_r+0xed4>
  80ad38:	009387c4 	movi	r2,19999
  80ad3c:	480b883a 	mov	r5,r9
  80ad40:	1240010e 	bge	r2,r9,80ad48 <_strtod_r+0x354>
  80ad44:	100b883a 	mov	r5,r2
  80ad48:	7005003a 	cmpeq	r2,r14,zero
  80ad4c:	103f9e1e 	bne	r2,zero,80abc8 <_strtod_r+0x1d4>
  80ad50:	014bc83a 	sub	r5,zero,r5
  80ad54:	583f9d26 	beq	r11,zero,80abcc <_strtod_r+0x1d8>
  80ad58:	2a8bc83a 	sub	r5,r5,r10
  80ad5c:	d9400f15 	stw	r5,60(sp)
  80ad60:	30007a1e 	bne	r6,zero,80af4c <_strtod_r+0x558>
  80ad64:	dcc01215 	stw	r19,72(sp)
  80ad68:	00800404 	movi	r2,16
  80ad6c:	9825883a 	mov	r18,r19
  80ad70:	14c0010e 	bge	r2,r19,80ad78 <_strtod_r+0x384>
  80ad74:	1025883a 	mov	r18,r2
  80ad78:	a009883a 	mov	r4,r20
  80ad7c:	080f8700 	call	80f870 <__floatunsidf>
  80ad80:	100f883a 	mov	r7,r2
  80ad84:	e0800015 	stw	r2,0(fp)
  80ad88:	00800244 	movi	r2,9
  80ad8c:	e0c00115 	stw	r3,4(fp)
  80ad90:	1480160e 	bge	r2,r18,80adec <_strtod_r+0x3f8>
  80ad94:	900c90fa 	slli	r6,r18,3
  80ad98:	01002074 	movhi	r4,129
  80ad9c:	2113be04 	addi	r4,r4,20216
  80ada0:	180b883a 	mov	r5,r3
  80ada4:	310d883a 	add	r6,r6,r4
  80ada8:	30ffef17 	ldw	r3,-68(r6)
  80adac:	30bfee17 	ldw	r2,-72(r6)
  80adb0:	3809883a 	mov	r4,r7
  80adb4:	180f883a 	mov	r7,r3
  80adb8:	100d883a 	mov	r6,r2
  80adbc:	080ece00 	call	80ece0 <__muldf3>
  80adc0:	8009883a 	mov	r4,r16
  80adc4:	1823883a 	mov	r17,r3
  80adc8:	1021883a 	mov	r16,r2
  80adcc:	080f8700 	call	80f870 <__floatunsidf>
  80add0:	880b883a 	mov	r5,r17
  80add4:	180f883a 	mov	r7,r3
  80add8:	8009883a 	mov	r4,r16
  80addc:	100d883a 	mov	r6,r2
  80ade0:	080ec6c0 	call	80ec6c <__adddf3>
  80ade4:	e0c00115 	stw	r3,4(fp)
  80ade8:	e0800015 	stw	r2,0(fp)
  80adec:	010003c4 	movi	r4,15
  80adf0:	24c09816 	blt	r4,r19,80b054 <_strtod_r+0x660>
  80adf4:	d9800f17 	ldw	r6,60(sp)
  80adf8:	303f7526 	beq	r6,zero,80abd0 <_strtod_r+0x1dc>
  80adfc:	0183be0e 	bge	zero,r6,80bcf8 <_strtod_r+0x1304>
  80ae00:	00800584 	movi	r2,22
  80ae04:	1182b20e 	bge	r2,r6,80b8d0 <_strtod_r+0xedc>
  80ae08:	d8c00f17 	ldw	r3,60(sp)
  80ae0c:	24e3c83a 	sub	r17,r4,r19
  80ae10:	88800584 	addi	r2,r17,22
  80ae14:	10c08f16 	blt	r2,r3,80b054 <_strtod_r+0x660>
  80ae18:	880890fa 	slli	r4,r17,3
  80ae1c:	04002074 	movhi	r16,129
  80ae20:	8413be04 	addi	r16,r16,20216
  80ae24:	e0800017 	ldw	r2,0(fp)
  80ae28:	2409883a 	add	r4,r4,r16
  80ae2c:	22000017 	ldw	r8,0(r4)
  80ae30:	22400117 	ldw	r9,4(r4)
  80ae34:	e0c00117 	ldw	r3,4(fp)
  80ae38:	1009883a 	mov	r4,r2
  80ae3c:	480f883a 	mov	r7,r9
  80ae40:	180b883a 	mov	r5,r3
  80ae44:	400d883a 	mov	r6,r8
  80ae48:	080ece00 	call	80ece0 <__muldf3>
  80ae4c:	d9000f17 	ldw	r4,60(sp)
  80ae50:	180b883a 	mov	r5,r3
  80ae54:	2455c83a 	sub	r10,r4,r17
  80ae58:	501490fa 	slli	r10,r10,3
  80ae5c:	1009883a 	mov	r4,r2
  80ae60:	5415883a 	add	r10,r10,r16
  80ae64:	52000017 	ldw	r8,0(r10)
  80ae68:	52400117 	ldw	r9,4(r10)
  80ae6c:	0002a206 	br	80b8f8 <_strtod_r+0xf04>
  80ae70:	40c00047 	ldb	r3,1(r8)
  80ae74:	00801604 	movi	r2,88
  80ae78:	18804e26 	beq	r3,r2,80afb4 <_strtod_r+0x5c0>
  80ae7c:	00801e04 	movi	r2,120
  80ae80:	18804c26 	beq	r3,r2,80afb4 <_strtod_r+0x5c0>
  80ae84:	42000044 	addi	r8,r8,1
  80ae88:	da000415 	stw	r8,16(sp)
  80ae8c:	40c00007 	ldb	r3,0(r8)
  80ae90:	00800c04 	movi	r2,48
  80ae94:	18bffb26 	beq	r3,r2,80ae84 <_strtod_r+0x490>
  80ae98:	183f4d26 	beq	r3,zero,80abd0 <_strtod_r+0x1dc>
  80ae9c:	03c00044 	movi	r15,1
  80aea0:	003f2406 	br	80ab34 <_strtod_r+0x140>
  80aea4:	42000044 	addi	r8,r8,1
  80aea8:	da000415 	stw	r8,16(sp)
  80aeac:	19000047 	ldb	r4,1(r3)
  80aeb0:	3000b726 	beq	r6,zero,80b190 <_strtod_r+0x79c>
  80aeb4:	3027883a 	mov	r19,r6
  80aeb8:	0015883a 	mov	r10,zero
  80aebc:	000f883a 	mov	r7,zero
  80aec0:	227ff404 	addi	r9,r4,-48
  80aec4:	00800244 	movi	r2,9
  80aec8:	1242592e 	bgeu	r2,r9,80b830 <_strtod_r+0xe3c>
  80aecc:	04800044 	movi	r18,1
  80aed0:	003f3706 	br	80abb0 <_strtod_r+0x1bc>
  80aed4:	7804c03a 	cmpne	r2,r15,zero
  80aed8:	103f3d1e 	bne	r2,zero,80abd0 <_strtod_r+0x1dc>
  80aedc:	9004c03a 	cmpne	r2,r18,zero
  80aee0:	103f5e1e 	bne	r2,zero,80ac5c <_strtod_r+0x268>
  80aee4:	00801384 	movi	r2,78
  80aee8:	2083a226 	beq	r4,r2,80bd74 <_strtod_r+0x1380>
  80aeec:	11039d16 	blt	r2,r4,80bd64 <_strtod_r+0x1370>
  80aef0:	00801244 	movi	r2,73
  80aef4:	20bf591e 	bne	r4,r2,80ac5c <_strtod_r+0x268>
  80aef8:	dc000404 	addi	r16,sp,16
  80aefc:	8009883a 	mov	r4,r16
  80af00:	01402074 	movhi	r5,129
  80af04:	29540704 	addi	r5,r5,20508
  80af08:	080a9ac0 	call	80a9ac <match>
  80af0c:	103f5326 	beq	r2,zero,80ac5c <_strtod_r+0x268>
  80af10:	d8800417 	ldw	r2,16(sp)
  80af14:	8009883a 	mov	r4,r16
  80af18:	01402074 	movhi	r5,129
  80af1c:	29540804 	addi	r5,r5,20512
  80af20:	123fffc4 	addi	r8,r2,-1
  80af24:	da000415 	stw	r8,16(sp)
  80af28:	080a9ac0 	call	80a9ac <match>
  80af2c:	1000031e 	bne	r2,zero,80af3c <_strtod_r+0x548>
  80af30:	d8800417 	ldw	r2,16(sp)
  80af34:	12000044 	addi	r8,r2,1
  80af38:	da000415 	stw	r8,16(sp)
  80af3c:	019ffc34 	movhi	r6,32752
  80af40:	e1800115 	stw	r6,4(fp)
  80af44:	e0000015 	stw	zero,0(fp)
  80af48:	003f2106 	br	80abd0 <_strtod_r+0x1dc>
  80af4c:	d9801215 	stw	r6,72(sp)
  80af50:	003f8506 	br	80ad68 <_strtod_r+0x374>
  80af54:	d8001115 	stw	zero,68(sp)
  80af58:	42000044 	addi	r8,r8,1
  80af5c:	da000415 	stw	r8,16(sp)
  80af60:	40800007 	ldb	r2,0(r8)
  80af64:	103eef1e 	bne	r2,zero,80ab24 <_strtod_r+0x130>
  80af68:	d8001115 	stw	zero,68(sp)
  80af6c:	dc400415 	stw	r17,16(sp)
  80af70:	003f1706 	br	80abd0 <_strtod_r+0x1dc>
  80af74:	42000044 	addi	r8,r8,1
  80af78:	da000415 	stw	r8,16(sp)
  80af7c:	003eaf06 	br	80aa3c <_strtod_r+0x48>
  80af80:	00800044 	movi	r2,1
  80af84:	d8801115 	stw	r2,68(sp)
  80af88:	003ff306 	br	80af58 <_strtod_r+0x564>
  80af8c:	001d883a 	mov	r14,zero
  80af90:	42000044 	addi	r8,r8,1
  80af94:	da000415 	stw	r8,16(sp)
  80af98:	21000047 	ldb	r4,1(r4)
  80af9c:	00800244 	movi	r2,9
  80afa0:	20fff404 	addi	r3,r4,-48
  80afa4:	10ff412e 	bgeu	r2,r3,80acac <_strtod_r+0x2b8>
  80afa8:	000b883a 	mov	r5,zero
  80afac:	dc400415 	stw	r17,16(sp)
  80afb0:	003f0506 	br	80abc8 <_strtod_r+0x1d4>
  80afb4:	d8c01117 	ldw	r3,68(sp)
  80afb8:	04802074 	movhi	r18,129
  80afbc:	94969304 	addi	r18,r18,23116
  80afc0:	d8800504 	addi	r2,sp,20
  80afc4:	a809883a 	mov	r4,r21
  80afc8:	d9400404 	addi	r5,sp,16
  80afcc:	900d883a 	mov	r6,r18
  80afd0:	d9c00604 	addi	r7,sp,24
  80afd4:	d8800015 	stw	r2,0(sp)
  80afd8:	d8c00115 	stw	r3,4(sp)
  80afdc:	080cf600 	call	80cf60 <__gethex>
  80afe0:	140001cc 	andi	r16,r2,7
  80afe4:	1027883a 	mov	r19,r2
  80afe8:	803ef926 	beq	r16,zero,80abd0 <_strtod_r+0x1dc>
  80afec:	05000184 	movi	r20,6
  80aff0:	853f1a26 	beq	r16,r20,80ac5c <_strtod_r+0x268>
  80aff4:	d9800517 	ldw	r6,20(sp)
  80aff8:	30000626 	beq	r6,zero,80b014 <_strtod_r+0x620>
  80affc:	91400017 	ldw	r5,0(r18)
  80b000:	d9000d04 	addi	r4,sp,52
  80b004:	0809bec0 	call	809bec <__copybits>
  80b008:	d9400517 	ldw	r5,20(sp)
  80b00c:	a809883a 	mov	r4,r21
  80b010:	080974c0 	call	80974c <_Bfree>
  80b014:	d9400617 	ldw	r5,24(sp)
  80b018:	a4024136 	bltu	r20,r16,80b920 <_strtod_r+0xf2c>
  80b01c:	8405883a 	add	r2,r16,r16
  80b020:	1085883a 	add	r2,r2,r2
  80b024:	00c02074 	movhi	r3,129
  80b028:	18ec0e04 	addi	r3,r3,-20424
  80b02c:	10c5883a 	add	r2,r2,r3
  80b030:	11000017 	ldw	r4,0(r2)
  80b034:	2000683a 	jmp	r4
  80b038:	0080b960 	cmpeqi	r2,zero,741
  80b03c:	0080b96c 	andhi	r2,zero,741
  80b040:	0080b910 	cmplti	r2,zero,740
  80b044:	0080b938 	rdprs	r2,zero,740
  80b048:	0080b948 	cmpgei	r2,zero,741
  80b04c:	0080b96c 	andhi	r2,zero,741
  80b050:	0080b960 	cmpeqi	r2,zero,741
  80b054:	d8c00f17 	ldw	r3,60(sp)
  80b058:	9c85c83a 	sub	r2,r19,r18
  80b05c:	18a1883a 	add	r16,r3,r2
  80b060:	0402d00e 	bge	zero,r16,80bba4 <_strtod_r+0x11b0>
  80b064:	814003cc 	andi	r5,r16,15
  80b068:	28000f26 	beq	r5,zero,80b0a8 <_strtod_r+0x6b4>
  80b06c:	280a90fa 	slli	r5,r5,3
  80b070:	01002074 	movhi	r4,129
  80b074:	2113be04 	addi	r4,r4,20216
  80b078:	e0800017 	ldw	r2,0(fp)
  80b07c:	290b883a 	add	r5,r5,r4
  80b080:	2a000017 	ldw	r8,0(r5)
  80b084:	e0c00117 	ldw	r3,4(fp)
  80b088:	2a400117 	ldw	r9,4(r5)
  80b08c:	1009883a 	mov	r4,r2
  80b090:	180b883a 	mov	r5,r3
  80b094:	480f883a 	mov	r7,r9
  80b098:	400d883a 	mov	r6,r8
  80b09c:	080ece00 	call	80ece0 <__muldf3>
  80b0a0:	e0c00115 	stw	r3,4(fp)
  80b0a4:	e0800015 	stw	r2,0(fp)
  80b0a8:	00bffc04 	movi	r2,-16
  80b0ac:	808c703a 	and	r6,r16,r2
  80b0b0:	30005b26 	beq	r6,zero,80b220 <_strtod_r+0x82c>
  80b0b4:	00804d04 	movi	r2,308
  80b0b8:	1181fd16 	blt	r2,r6,80b8b0 <_strtod_r+0xebc>
  80b0bc:	3021d13a 	srai	r16,r6,4
  80b0c0:	00800044 	movi	r2,1
  80b0c4:	1403610e 	bge	r2,r16,80be4c <_strtod_r+0x1458>
  80b0c8:	102f883a 	mov	r23,r2
  80b0cc:	0025883a 	mov	r18,zero
  80b0d0:	04402074 	movhi	r17,129
  80b0d4:	8c53f004 	addi	r17,r17,20416
  80b0d8:	8080004c 	andi	r2,r16,1
  80b0dc:	1005003a 	cmpeq	r2,r2,zero
  80b0e0:	1000091e 	bne	r2,zero,80b108 <_strtod_r+0x714>
  80b0e4:	e0800017 	ldw	r2,0(fp)
  80b0e8:	e0c00117 	ldw	r3,4(fp)
  80b0ec:	89800017 	ldw	r6,0(r17)
  80b0f0:	89c00117 	ldw	r7,4(r17)
  80b0f4:	180b883a 	mov	r5,r3
  80b0f8:	1009883a 	mov	r4,r2
  80b0fc:	080ece00 	call	80ece0 <__muldf3>
  80b100:	e0c00115 	stw	r3,4(fp)
  80b104:	e0800015 	stw	r2,0(fp)
  80b108:	8021d07a 	srai	r16,r16,1
  80b10c:	94800044 	addi	r18,r18,1
  80b110:	8c400204 	addi	r17,r17,8
  80b114:	bc3ff016 	blt	r23,r16,80b0d8 <_strtod_r+0x6e4>
  80b118:	900e90fa 	slli	r7,r18,3
  80b11c:	01802074 	movhi	r6,129
  80b120:	3193f004 	addi	r6,r6,20416
  80b124:	e2000117 	ldw	r8,4(fp)
  80b128:	398f883a 	add	r7,r7,r6
  80b12c:	38800017 	ldw	r2,0(r7)
  80b130:	38c00117 	ldw	r3,4(r7)
  80b134:	e1000017 	ldw	r4,0(fp)
  80b138:	01bf2c34 	movhi	r6,64688
  80b13c:	418d883a 	add	r6,r8,r6
  80b140:	300b883a 	mov	r5,r6
  80b144:	180f883a 	mov	r7,r3
  80b148:	100d883a 	mov	r6,r2
  80b14c:	080ece00 	call	80ece0 <__muldf3>
  80b150:	1009883a 	mov	r4,r2
  80b154:	180b883a 	mov	r5,r3
  80b158:	199ffc2c 	andhi	r6,r3,32752
  80b15c:	009f2834 	movhi	r2,31904
  80b160:	e1000015 	stw	r4,0(fp)
  80b164:	e1400115 	stw	r5,4(fp)
  80b168:	1181d136 	bltu	r2,r6,80b8b0 <_strtod_r+0xebc>
  80b16c:	009f2434 	movhi	r2,31888
  80b170:	1183202e 	bgeu	r2,r6,80bdf4 <_strtod_r+0x1400>
  80b174:	d8001415 	stw	zero,80(sp)
  80b178:	019ffc34 	movhi	r6,32752
  80b17c:	31bfffc4 	addi	r6,r6,-1
  80b180:	01ffffc4 	movi	r7,-1
  80b184:	e1800115 	stw	r6,4(fp)
  80b188:	e1c00015 	stw	r7,0(fp)
  80b18c:	00002506 	br	80b224 <_strtod_r+0x830>
  80b190:	00800c04 	movi	r2,48
  80b194:	2083151e 	bne	r4,r2,80bdec <_strtod_r+0x13f8>
  80b198:	2005883a 	mov	r2,r4
  80b19c:	000f883a 	mov	r7,zero
  80b1a0:	42000044 	addi	r8,r8,1
  80b1a4:	da000415 	stw	r8,16(sp)
  80b1a8:	41000007 	ldb	r4,0(r8)
  80b1ac:	39c00044 	addi	r7,r7,1
  80b1b0:	20bffb26 	beq	r4,r2,80b1a0 <_strtod_r+0x7ac>
  80b1b4:	20fff3c4 	addi	r3,r4,-49
  80b1b8:	00800204 	movi	r2,8
  80b1bc:	10c1b836 	bltu	r2,r3,80b8a0 <_strtod_r+0xeac>
  80b1c0:	dd800417 	ldw	r22,16(sp)
  80b1c4:	3815883a 	mov	r10,r7
  80b1c8:	227ff404 	addi	r9,r4,-48
  80b1cc:	b011883a 	mov	r8,r22
  80b1d0:	0027883a 	mov	r19,zero
  80b1d4:	01c00044 	movi	r7,1
  80b1d8:	4801fe26 	beq	r9,zero,80b9d4 <_strtod_r+0xfe0>
  80b1dc:	00800044 	movi	r2,1
  80b1e0:	51d5883a 	add	r10,r10,r7
  80b1e4:	11c31f0e 	bge	r2,r7,80be64 <_strtod_r+0x1470>
  80b1e8:	1009883a 	mov	r4,r2
  80b1ec:	9807883a 	mov	r3,r19
  80b1f0:	02c00204 	movi	r11,8
  80b1f4:	03000404 	movi	r12,16
  80b1f8:	00000306 	br	80b208 <_strtod_r+0x814>
  80b1fc:	a50002a4 	muli	r20,r20,10
  80b200:	21000044 	addi	r4,r4,1
  80b204:	21c1eb26 	beq	r4,r7,80b9b4 <_strtod_r+0xfc0>
  80b208:	18c00044 	addi	r3,r3,1
  80b20c:	18bfffc4 	addi	r2,r3,-1
  80b210:	58bffa0e 	bge	r11,r2,80b1fc <_strtod_r+0x808>
  80b214:	60fffa16 	blt	r12,r3,80b200 <_strtod_r+0x80c>
  80b218:	840002a4 	muli	r16,r16,10
  80b21c:	003ff806 	br	80b200 <_strtod_r+0x80c>
  80b220:	d8001415 	stw	zero,80(sp)
  80b224:	d9801217 	ldw	r6,72(sp)
  80b228:	a809883a 	mov	r4,r21
  80b22c:	b00b883a 	mov	r5,r22
  80b230:	980f883a 	mov	r7,r19
  80b234:	dd000015 	stw	r20,0(sp)
  80b238:	080a6200 	call	80a620 <__s2b>
  80b23c:	d9800f17 	ldw	r6,60(sp)
  80b240:	11000304 	addi	r4,r2,12
  80b244:	d8801015 	stw	r2,64(sp)
  80b248:	300c803a 	cmplt	r6,r6,zero
  80b24c:	d9001715 	stw	r4,92(sp)
  80b250:	d9801615 	stw	r6,88(sp)
  80b254:	d8801017 	ldw	r2,64(sp)
  80b258:	a809883a 	mov	r4,r21
  80b25c:	11400117 	ldw	r5,4(r2)
  80b260:	0809ccc0 	call	809ccc <_Balloc>
  80b264:	d8c01017 	ldw	r3,64(sp)
  80b268:	d9401717 	ldw	r5,92(sp)
  80b26c:	11000304 	addi	r4,r2,12
  80b270:	19800417 	ldw	r6,16(r3)
  80b274:	102f883a 	mov	r23,r2
  80b278:	318d883a 	add	r6,r6,r6
  80b27c:	318d883a 	add	r6,r6,r6
  80b280:	31800204 	addi	r6,r6,8
  80b284:	08031ac0 	call	8031ac <memcpy>
  80b288:	e2000017 	ldw	r8,0(fp)
  80b28c:	e2400117 	ldw	r9,4(fp)
  80b290:	d9800304 	addi	r6,sp,12
  80b294:	400b883a 	mov	r5,r8
  80b298:	a809883a 	mov	r4,r21
  80b29c:	d9c00204 	addi	r7,sp,8
  80b2a0:	d9800015 	stw	r6,0(sp)
  80b2a4:	480d883a 	mov	r6,r9
  80b2a8:	0809d880 	call	809d88 <__d2b>
  80b2ac:	a809883a 	mov	r4,r21
  80b2b0:	01400044 	movi	r5,1
  80b2b4:	d8800515 	stw	r2,20(sp)
  80b2b8:	080a3c40 	call	80a3c4 <__i2b>
  80b2bc:	102d883a 	mov	r22,r2
  80b2c0:	d8801617 	ldw	r2,88(sp)
  80b2c4:	1001051e 	bne	r2,zero,80b6dc <_strtod_r+0xce8>
  80b2c8:	dd000f17 	ldw	r20,60(sp)
  80b2cc:	000f883a 	mov	r7,zero
  80b2d0:	0013883a 	mov	r9,zero
  80b2d4:	a011883a 	mov	r8,r20
  80b2d8:	d8800217 	ldw	r2,8(sp)
  80b2dc:	1000fd16 	blt	r2,zero,80b6d4 <_strtod_r+0xce0>
  80b2e0:	388f883a 	add	r7,r7,r2
  80b2e4:	d9801417 	ldw	r6,80(sp)
  80b2e8:	d9400317 	ldw	r5,12(sp)
  80b2ec:	00ff0084 	movi	r3,-1022
  80b2f0:	1189c83a 	sub	r4,r2,r6
  80b2f4:	2145883a 	add	r2,r4,r5
  80b2f8:	10bfffc4 	addi	r2,r2,-1
  80b2fc:	10c09f0e 	bge	r2,r3,80b57c <_strtod_r+0xb88>
  80b300:	21810cc4 	addi	r6,r4,1075
  80b304:	d8c01417 	ldw	r3,80(sp)
  80b308:	4185883a 	add	r2,r8,r6
  80b30c:	39a1883a 	add	r16,r7,r6
  80b310:	18a5883a 	add	r18,r3,r2
  80b314:	3807883a 	mov	r3,r7
  80b318:	81c0010e 	bge	r16,r7,80b320 <_strtod_r+0x92c>
  80b31c:	8007883a 	mov	r3,r16
  80b320:	9005883a 	mov	r2,r18
  80b324:	1c80010e 	bge	r3,r18,80b32c <_strtod_r+0x938>
  80b328:	1805883a 	mov	r2,r3
  80b32c:	0080e70e 	bge	zero,r2,80b6cc <_strtod_r+0xcd8>
  80b330:	38a7c83a 	sub	r19,r7,r2
  80b334:	80a1c83a 	sub	r16,r16,r2
  80b338:	90a5c83a 	sub	r18,r18,r2
  80b33c:	02400e0e 	bge	zero,r9,80b378 <_strtod_r+0x984>
  80b340:	480d883a 	mov	r6,r9
  80b344:	b00b883a 	mov	r5,r22
  80b348:	a809883a 	mov	r4,r21
  80b34c:	080a5000 	call	80a500 <__pow5mult>
  80b350:	d9800517 	ldw	r6,20(sp)
  80b354:	a809883a 	mov	r4,r21
  80b358:	100b883a 	mov	r5,r2
  80b35c:	102d883a 	mov	r22,r2
  80b360:	080a1dc0 	call	80a1dc <__multiply>
  80b364:	d9400517 	ldw	r5,20(sp)
  80b368:	1023883a 	mov	r17,r2
  80b36c:	a809883a 	mov	r4,r21
  80b370:	080974c0 	call	80974c <_Bfree>
  80b374:	dc400515 	stw	r17,20(sp)
  80b378:	0400050e 	bge	zero,r16,80b390 <_strtod_r+0x99c>
  80b37c:	d9400517 	ldw	r5,20(sp)
  80b380:	800d883a 	mov	r6,r16
  80b384:	a809883a 	mov	r4,r21
  80b388:	080a0900 	call	80a090 <__lshift>
  80b38c:	d8800515 	stw	r2,20(sp)
  80b390:	a000741e 	bne	r20,zero,80b564 <_strtod_r+0xb70>
  80b394:	0480050e 	bge	zero,r18,80b3ac <_strtod_r+0x9b8>
  80b398:	b80b883a 	mov	r5,r23
  80b39c:	900d883a 	mov	r6,r18
  80b3a0:	a809883a 	mov	r4,r21
  80b3a4:	080a0900 	call	80a090 <__lshift>
  80b3a8:	102f883a 	mov	r23,r2
  80b3ac:	04c0050e 	bge	zero,r19,80b3c4 <_strtod_r+0x9d0>
  80b3b0:	b00b883a 	mov	r5,r22
  80b3b4:	980d883a 	mov	r6,r19
  80b3b8:	a809883a 	mov	r4,r21
  80b3bc:	080a0900 	call	80a090 <__lshift>
  80b3c0:	102d883a 	mov	r22,r2
  80b3c4:	d9400517 	ldw	r5,20(sp)
  80b3c8:	a809883a 	mov	r4,r21
  80b3cc:	b80d883a 	mov	r6,r23
  80b3d0:	0809f040 	call	809f04 <__mdiff>
  80b3d4:	11000317 	ldw	r4,12(r2)
  80b3d8:	b00b883a 	mov	r5,r22
  80b3dc:	10000315 	stw	zero,12(r2)
  80b3e0:	d9001315 	stw	r4,76(sp)
  80b3e4:	1009883a 	mov	r4,r2
  80b3e8:	1029883a 	mov	r20,r2
  80b3ec:	08098a80 	call	8098a8 <__mcmp>
  80b3f0:	10017c16 	blt	r2,zero,80b9e4 <_strtod_r+0xff0>
  80b3f4:	1001af26 	beq	r2,zero,80bab4 <_strtod_r+0x10c0>
  80b3f8:	a009883a 	mov	r4,r20
  80b3fc:	b00b883a 	mov	r5,r22
  80b400:	0809aa80 	call	809aa8 <__ratio>
  80b404:	0011883a 	mov	r8,zero
  80b408:	02500034 	movhi	r9,16384
  80b40c:	480f883a 	mov	r7,r9
  80b410:	1009883a 	mov	r4,r2
  80b414:	180b883a 	mov	r5,r3
  80b418:	400d883a 	mov	r6,r8
  80b41c:	1021883a 	mov	r16,r2
  80b420:	1823883a 	mov	r17,r3
  80b424:	080f5a40 	call	80f5a4 <__ledf2>
  80b428:	00805716 	blt	zero,r2,80b588 <_strtod_r+0xb94>
  80b42c:	d9801317 	ldw	r6,76(sp)
  80b430:	3025003a 	cmpeq	r18,r6,zero
  80b434:	90008b1e 	bne	r18,zero,80b664 <_strtod_r+0xc70>
  80b438:	008ffc34 	movhi	r2,16368
  80b43c:	0021883a 	mov	r16,zero
  80b440:	1023883a 	mov	r17,r2
  80b444:	d8000715 	stw	zero,28(sp)
  80b448:	d8800815 	stw	r2,32(sp)
  80b44c:	e1c00117 	ldw	r7,4(fp)
  80b450:	009ff834 	movhi	r2,32736
  80b454:	3cdffc2c 	andhi	r19,r7,32752
  80b458:	98805e26 	beq	r19,r2,80b5d4 <_strtod_r+0xbe0>
  80b45c:	d8801417 	ldw	r2,80(sp)
  80b460:	10001b26 	beq	r2,zero,80b4d0 <_strtod_r+0xadc>
  80b464:	0081a834 	movhi	r2,1696
  80b468:	14c01936 	bltu	r2,r19,80b4d0 <_strtod_r+0xadc>
  80b46c:	00bff034 	movhi	r2,65472
  80b470:	00d07834 	movhi	r3,16864
  80b474:	18ffffc4 	addi	r3,r3,-1
  80b478:	180f883a 	mov	r7,r3
  80b47c:	8009883a 	mov	r4,r16
  80b480:	880b883a 	mov	r5,r17
  80b484:	100d883a 	mov	r6,r2
  80b488:	080f5a40 	call	80f5a4 <__ledf2>
  80b48c:	00800b16 	blt	zero,r2,80b4bc <_strtod_r+0xac8>
  80b490:	880b883a 	mov	r5,r17
  80b494:	8009883a 	mov	r4,r16
  80b498:	080da440 	call	80da44 <__fixunsdfsi>
  80b49c:	1000df1e 	bne	r2,zero,80b81c <_strtod_r+0xe28>
  80b4a0:	0021883a 	mov	r16,zero
  80b4a4:	044ffc34 	movhi	r17,16368
  80b4a8:	9000d91e 	bne	r18,zero,80b810 <_strtod_r+0xe1c>
  80b4ac:	8005883a 	mov	r2,r16
  80b4b0:	8807883a 	mov	r3,r17
  80b4b4:	d8c00815 	stw	r3,32(sp)
  80b4b8:	d8800715 	stw	r2,28(sp)
  80b4bc:	d8800817 	ldw	r2,32(sp)
  80b4c0:	00c1ac34 	movhi	r3,1712
  80b4c4:	14c5c83a 	sub	r2,r2,r19
  80b4c8:	10c5883a 	add	r2,r2,r3
  80b4cc:	d8800815 	stw	r2,32(sp)
  80b4d0:	e0800017 	ldw	r2,0(fp)
  80b4d4:	e0c00117 	ldw	r3,4(fp)
  80b4d8:	1009883a 	mov	r4,r2
  80b4dc:	180b883a 	mov	r5,r3
  80b4e0:	08099080 	call	809908 <__ulp>
  80b4e4:	d9800717 	ldw	r6,28(sp)
  80b4e8:	d9c00817 	ldw	r7,32(sp)
  80b4ec:	180b883a 	mov	r5,r3
  80b4f0:	1009883a 	mov	r4,r2
  80b4f4:	080ece00 	call	80ece0 <__muldf3>
  80b4f8:	e2000017 	ldw	r8,0(fp)
  80b4fc:	e2400117 	ldw	r9,4(fp)
  80b500:	180b883a 	mov	r5,r3
  80b504:	1009883a 	mov	r4,r2
  80b508:	480f883a 	mov	r7,r9
  80b50c:	400d883a 	mov	r6,r8
  80b510:	080ec6c0 	call	80ec6c <__adddf3>
  80b514:	e0c00115 	stw	r3,4(fp)
  80b518:	e0800015 	stw	r2,0(fp)
  80b51c:	d8c01417 	ldw	r3,80(sp)
  80b520:	e4800117 	ldw	r18,4(fp)
  80b524:	1800021e 	bne	r3,zero,80b530 <_strtod_r+0xb3c>
  80b528:	909ffc2c 	andhi	r2,r18,32752
  80b52c:	98807b26 	beq	r19,r2,80b71c <_strtod_r+0xd28>
  80b530:	d9400517 	ldw	r5,20(sp)
  80b534:	a809883a 	mov	r4,r21
  80b538:	080974c0 	call	80974c <_Bfree>
  80b53c:	a809883a 	mov	r4,r21
  80b540:	b80b883a 	mov	r5,r23
  80b544:	080974c0 	call	80974c <_Bfree>
  80b548:	a809883a 	mov	r4,r21
  80b54c:	b00b883a 	mov	r5,r22
  80b550:	080974c0 	call	80974c <_Bfree>
  80b554:	a809883a 	mov	r4,r21
  80b558:	a00b883a 	mov	r5,r20
  80b55c:	080974c0 	call	80974c <_Bfree>
  80b560:	003f3c06 	br	80b254 <_strtod_r+0x860>
  80b564:	b80b883a 	mov	r5,r23
  80b568:	a00d883a 	mov	r6,r20
  80b56c:	a809883a 	mov	r4,r21
  80b570:	080a5000 	call	80a500 <__pow5mult>
  80b574:	102f883a 	mov	r23,r2
  80b578:	003f8606 	br	80b394 <_strtod_r+0x9a0>
  80b57c:	00800d84 	movi	r2,54
  80b580:	114dc83a 	sub	r6,r2,r5
  80b584:	003f5f06 	br	80b304 <_strtod_r+0x910>
  80b588:	0005883a 	mov	r2,zero
  80b58c:	00cff834 	movhi	r3,16352
  80b590:	880b883a 	mov	r5,r17
  80b594:	8009883a 	mov	r4,r16
  80b598:	100d883a 	mov	r6,r2
  80b59c:	180f883a 	mov	r7,r3
  80b5a0:	080ece00 	call	80ece0 <__muldf3>
  80b5a4:	d9801317 	ldw	r6,76(sp)
  80b5a8:	1021883a 	mov	r16,r2
  80b5ac:	1823883a 	mov	r17,r3
  80b5b0:	3025003a 	cmpeq	r18,r6,zero
  80b5b4:	90000126 	beq	r18,zero,80b5bc <_strtod_r+0xbc8>
  80b5b8:	18e0003c 	xorhi	r3,r3,32768
  80b5bc:	d8800715 	stw	r2,28(sp)
  80b5c0:	d8c00815 	stw	r3,32(sp)
  80b5c4:	e1c00117 	ldw	r7,4(fp)
  80b5c8:	009ff834 	movhi	r2,32736
  80b5cc:	3cdffc2c 	andhi	r19,r7,32752
  80b5d0:	98bfa21e 	bne	r19,r2,80b45c <_strtod_r+0xa68>
  80b5d4:	e1000017 	ldw	r4,0(fp)
  80b5d8:	01bf2c34 	movhi	r6,64688
  80b5dc:	398d883a 	add	r6,r7,r6
  80b5e0:	d9000b15 	stw	r4,44(sp)
  80b5e4:	d9c00c15 	stw	r7,48(sp)
  80b5e8:	300b883a 	mov	r5,r6
  80b5ec:	e1800115 	stw	r6,4(fp)
  80b5f0:	08099080 	call	809908 <__ulp>
  80b5f4:	d9800717 	ldw	r6,28(sp)
  80b5f8:	d9c00817 	ldw	r7,32(sp)
  80b5fc:	180b883a 	mov	r5,r3
  80b600:	1009883a 	mov	r4,r2
  80b604:	080ece00 	call	80ece0 <__muldf3>
  80b608:	e2000017 	ldw	r8,0(fp)
  80b60c:	e2400117 	ldw	r9,4(fp)
  80b610:	180b883a 	mov	r5,r3
  80b614:	1009883a 	mov	r4,r2
  80b618:	480f883a 	mov	r7,r9
  80b61c:	400d883a 	mov	r6,r8
  80b620:	080ec6c0 	call	80ec6c <__adddf3>
  80b624:	1009883a 	mov	r4,r2
  80b628:	180b883a 	mov	r5,r3
  80b62c:	009f2834 	movhi	r2,31904
  80b630:	10bfffc4 	addi	r2,r2,-1
  80b634:	18dffc2c 	andhi	r3,r3,32752
  80b638:	e1000015 	stw	r4,0(fp)
  80b63c:	e1400115 	stw	r5,4(fp)
  80b640:	10c06f2e 	bgeu	r2,r3,80b800 <_strtod_r+0xe0c>
  80b644:	d8800c17 	ldw	r2,48(sp)
  80b648:	011ffc34 	movhi	r4,32752
  80b64c:	213fffc4 	addi	r4,r4,-1
  80b650:	11007a26 	beq	r2,r4,80b83c <_strtod_r+0xe48>
  80b654:	01ffffc4 	movi	r7,-1
  80b658:	e1000115 	stw	r4,4(fp)
  80b65c:	e1c00015 	stw	r7,0(fp)
  80b660:	003fb306 	br	80b530 <_strtod_r+0xb3c>
  80b664:	e0c00017 	ldw	r3,0(fp)
  80b668:	1800221e 	bne	r3,zero,80b6f4 <_strtod_r+0xd00>
  80b66c:	e0800117 	ldw	r2,4(fp)
  80b670:	00c00434 	movhi	r3,16
  80b674:	18ffffc4 	addi	r3,r3,-1
  80b678:	10c4703a 	and	r2,r2,r3
  80b67c:	1000211e 	bne	r2,zero,80b704 <_strtod_r+0xd10>
  80b680:	0005883a 	mov	r2,zero
  80b684:	00cffc34 	movhi	r3,16368
  80b688:	180f883a 	mov	r7,r3
  80b68c:	8009883a 	mov	r4,r16
  80b690:	880b883a 	mov	r5,r17
  80b694:	100d883a 	mov	r6,r2
  80b698:	080f51c0 	call	80f51c <__ltdf2>
  80b69c:	10013c16 	blt	r2,zero,80bb90 <_strtod_r+0x119c>
  80b6a0:	0005883a 	mov	r2,zero
  80b6a4:	00cff834 	movhi	r3,16352
  80b6a8:	880b883a 	mov	r5,r17
  80b6ac:	8009883a 	mov	r4,r16
  80b6b0:	180f883a 	mov	r7,r3
  80b6b4:	100d883a 	mov	r6,r2
  80b6b8:	080ece00 	call	80ece0 <__muldf3>
  80b6bc:	1823883a 	mov	r17,r3
  80b6c0:	1021883a 	mov	r16,r2
  80b6c4:	18e0003c 	xorhi	r3,r3,32768
  80b6c8:	003fbc06 	br	80b5bc <_strtod_r+0xbc8>
  80b6cc:	3827883a 	mov	r19,r7
  80b6d0:	003f1a06 	br	80b33c <_strtod_r+0x948>
  80b6d4:	4091c83a 	sub	r8,r8,r2
  80b6d8:	003f0206 	br	80b2e4 <_strtod_r+0x8f0>
  80b6dc:	d8c00f17 	ldw	r3,60(sp)
  80b6e0:	0011883a 	mov	r8,zero
  80b6e4:	0029883a 	mov	r20,zero
  80b6e8:	00d3c83a 	sub	r9,zero,r3
  80b6ec:	480f883a 	mov	r7,r9
  80b6f0:	003ef906 	br	80b2d8 <_strtod_r+0x8e4>
  80b6f4:	00800044 	movi	r2,1
  80b6f8:	1880021e 	bne	r3,r2,80b704 <_strtod_r+0xd10>
  80b6fc:	e0800117 	ldw	r2,4(fp)
  80b700:	1000a526 	beq	r2,zero,80b998 <_strtod_r+0xfa4>
  80b704:	00affc34 	movhi	r2,49136
  80b708:	0021883a 	mov	r16,zero
  80b70c:	044ffc34 	movhi	r17,16368
  80b710:	d8800815 	stw	r2,32(sp)
  80b714:	d8000715 	stw	zero,28(sp)
  80b718:	003f4c06 	br	80b44c <_strtod_r+0xa58>
  80b71c:	880b883a 	mov	r5,r17
  80b720:	8009883a 	mov	r4,r16
  80b724:	080f7240 	call	80f724 <__fixdfsi>
  80b728:	1009883a 	mov	r4,r2
  80b72c:	080f62c0 	call	80f62c <__floatsidf>
  80b730:	880b883a 	mov	r5,r17
  80b734:	8009883a 	mov	r4,r16
  80b738:	100d883a 	mov	r6,r2
  80b73c:	180f883a 	mov	r7,r3
  80b740:	080ebec0 	call	80ebec <__subdf3>
  80b744:	d9001317 	ldw	r4,76(sp)
  80b748:	100b883a 	mov	r5,r2
  80b74c:	180d883a 	mov	r6,r3
  80b750:	1021883a 	mov	r16,r2
  80b754:	1823883a 	mov	r17,r3
  80b758:	2000061e 	bne	r4,zero,80b774 <_strtod_r+0xd80>
  80b75c:	e0800017 	ldw	r2,0(fp)
  80b760:	1000041e 	bne	r2,zero,80b774 <_strtod_r+0xd80>
  80b764:	00c00434 	movhi	r3,16
  80b768:	18ffffc4 	addi	r3,r3,-1
  80b76c:	90c4703a 	and	r2,r18,r3
  80b770:	10004026 	beq	r2,zero,80b874 <_strtod_r+0xe80>
  80b774:	00a52834 	movhi	r2,38048
  80b778:	108d6544 	addi	r2,r2,13717
  80b77c:	00cff834 	movhi	r3,16352
  80b780:	18ffffc4 	addi	r3,r3,-1
  80b784:	180f883a 	mov	r7,r3
  80b788:	8009883a 	mov	r4,r16
  80b78c:	880b883a 	mov	r5,r17
  80b790:	100d883a 	mov	r6,r2
  80b794:	080f51c0 	call	80f51c <__ltdf2>
  80b798:	10000916 	blt	r2,zero,80b7c0 <_strtod_r+0xdcc>
  80b79c:	008d6c34 	movhi	r2,13744
  80b7a0:	10b94d44 	addi	r2,r2,-6859
  80b7a4:	00cff834 	movhi	r3,16352
  80b7a8:	880b883a 	mov	r5,r17
  80b7ac:	180f883a 	mov	r7,r3
  80b7b0:	8009883a 	mov	r4,r16
  80b7b4:	100d883a 	mov	r6,r2
  80b7b8:	080f40c0 	call	80f40c <__gtdf2>
  80b7bc:	00bf5c0e 	bge	zero,r2,80b530 <_strtod_r+0xb3c>
  80b7c0:	d9400517 	ldw	r5,20(sp)
  80b7c4:	a809883a 	mov	r4,r21
  80b7c8:	080974c0 	call	80974c <_Bfree>
  80b7cc:	a809883a 	mov	r4,r21
  80b7d0:	b80b883a 	mov	r5,r23
  80b7d4:	080974c0 	call	80974c <_Bfree>
  80b7d8:	a809883a 	mov	r4,r21
  80b7dc:	b00b883a 	mov	r5,r22
  80b7e0:	080974c0 	call	80974c <_Bfree>
  80b7e4:	d9401017 	ldw	r5,64(sp)
  80b7e8:	a809883a 	mov	r4,r21
  80b7ec:	080974c0 	call	80974c <_Bfree>
  80b7f0:	a809883a 	mov	r4,r21
  80b7f4:	a00b883a 	mov	r5,r20
  80b7f8:	080974c0 	call	80974c <_Bfree>
  80b7fc:	003cf406 	br	80abd0 <_strtod_r+0x1dc>
  80b800:	0080d434 	movhi	r2,848
  80b804:	288d883a 	add	r6,r5,r2
  80b808:	e1800115 	stw	r6,4(fp)
  80b80c:	003f4306 	br	80b51c <_strtod_r+0xb28>
  80b810:	8005883a 	mov	r2,r16
  80b814:	88e0003c 	xorhi	r3,r17,32768
  80b818:	003f2606 	br	80b4b4 <_strtod_r+0xac0>
  80b81c:	1009883a 	mov	r4,r2
  80b820:	080f8700 	call	80f870 <__floatunsidf>
  80b824:	1021883a 	mov	r16,r2
  80b828:	1823883a 	mov	r17,r3
  80b82c:	003f1e06 	br	80b4a8 <_strtod_r+0xab4>
  80b830:	da000417 	ldw	r8,16(sp)
  80b834:	39c00044 	addi	r7,r7,1
  80b838:	003e6706 	br	80b1d8 <_strtod_r+0x7e4>
  80b83c:	d8c00b17 	ldw	r3,44(sp)
  80b840:	00bfffc4 	movi	r2,-1
  80b844:	18bf831e 	bne	r3,r2,80b654 <_strtod_r+0xc60>
  80b848:	00c00884 	movi	r3,34
  80b84c:	a8c00015 	stw	r3,0(r21)
  80b850:	009ffc34 	movhi	r2,32752
  80b854:	e0800115 	stw	r2,4(fp)
  80b858:	e0000015 	stw	zero,0(fp)
  80b85c:	003fd806 	br	80b7c0 <_strtod_r+0xdcc>
  80b860:	4007883a 	mov	r3,r8
  80b864:	000d883a 	mov	r6,zero
  80b868:	0029883a 	mov	r20,zero
  80b86c:	0021883a 	mov	r16,zero
  80b870:	003cc906 	br	80ab98 <_strtod_r+0x1a4>
  80b874:	00a52834 	movhi	r2,38048
  80b878:	108d6544 	addi	r2,r2,13717
  80b87c:	00cff434 	movhi	r3,16336
  80b880:	18ffffc4 	addi	r3,r3,-1
  80b884:	2809883a 	mov	r4,r5
  80b888:	180f883a 	mov	r7,r3
  80b88c:	300b883a 	mov	r5,r6
  80b890:	100d883a 	mov	r6,r2
  80b894:	080f51c0 	call	80f51c <__ltdf2>
  80b898:	103f250e 	bge	r2,zero,80b530 <_strtod_r+0xb3c>
  80b89c:	003fc806 	br	80b7c0 <_strtod_r+0xdcc>
  80b8a0:	0027883a 	mov	r19,zero
  80b8a4:	04800044 	movi	r18,1
  80b8a8:	0015883a 	mov	r10,zero
  80b8ac:	003cc006 	br	80abb0 <_strtod_r+0x1bc>
  80b8b0:	00800884 	movi	r2,34
  80b8b4:	a8800015 	stw	r2,0(r21)
  80b8b8:	019ffc34 	movhi	r6,32752
  80b8bc:	e1800115 	stw	r6,4(fp)
  80b8c0:	e0000015 	stw	zero,0(fp)
  80b8c4:	003cc206 	br	80abd0 <_strtod_r+0x1dc>
  80b8c8:	015387c4 	movi	r5,19999
  80b8cc:	003d1e06 	br	80ad48 <_strtod_r+0x354>
  80b8d0:	300a90fa 	slli	r5,r6,3
  80b8d4:	e0800017 	ldw	r2,0(fp)
  80b8d8:	e0c00117 	ldw	r3,4(fp)
  80b8dc:	01002074 	movhi	r4,129
  80b8e0:	2113be04 	addi	r4,r4,20216
  80b8e4:	290b883a 	add	r5,r5,r4
  80b8e8:	2a000017 	ldw	r8,0(r5)
  80b8ec:	2a400117 	ldw	r9,4(r5)
  80b8f0:	1009883a 	mov	r4,r2
  80b8f4:	180b883a 	mov	r5,r3
  80b8f8:	480f883a 	mov	r7,r9
  80b8fc:	400d883a 	mov	r6,r8
  80b900:	080ece00 	call	80ece0 <__muldf3>
  80b904:	e0c00115 	stw	r3,4(fp)
  80b908:	e0800015 	stw	r2,0(fp)
  80b90c:	003cb006 	br	80abd0 <_strtod_r+0x1dc>
  80b910:	d8800d17 	ldw	r2,52(sp)
  80b914:	e0800015 	stw	r2,0(fp)
  80b918:	d8c00e17 	ldw	r3,56(sp)
  80b91c:	e0c00115 	stw	r3,4(fp)
  80b920:	9880020c 	andi	r2,r19,8
  80b924:	103caa26 	beq	r2,zero,80abd0 <_strtod_r+0x1dc>
  80b928:	e0800117 	ldw	r2,4(fp)
  80b92c:	10a00034 	orhi	r2,r2,32768
  80b930:	e0800115 	stw	r2,4(fp)
  80b934:	003ca606 	br	80abd0 <_strtod_r+0x1dc>
  80b938:	009ffc34 	movhi	r2,32752
  80b93c:	e0800115 	stw	r2,4(fp)
  80b940:	e0000015 	stw	zero,0(fp)
  80b944:	003ff606 	br	80b920 <_strtod_r+0xf2c>
  80b948:	00a00034 	movhi	r2,32768
  80b94c:	10bfffc4 	addi	r2,r2,-1
  80b950:	00ffffc4 	movi	r3,-1
  80b954:	e0800115 	stw	r2,4(fp)
  80b958:	e0c00015 	stw	r3,0(fp)
  80b95c:	003ff006 	br	80b920 <_strtod_r+0xf2c>
  80b960:	e0000115 	stw	zero,4(fp)
  80b964:	e0000015 	stw	zero,0(fp)
  80b968:	003fed06 	br	80b920 <_strtod_r+0xf2c>
  80b96c:	d8800e17 	ldw	r2,56(sp)
  80b970:	29010cc4 	addi	r4,r5,1075
  80b974:	00fffc34 	movhi	r3,65520
  80b978:	18ffffc4 	addi	r3,r3,-1
  80b97c:	2008953a 	slli	r4,r4,20
  80b980:	10c4703a 	and	r2,r2,r3
  80b984:	d8c00d17 	ldw	r3,52(sp)
  80b988:	1104b03a 	or	r2,r2,r4
  80b98c:	e0800115 	stw	r2,4(fp)
  80b990:	e0c00015 	stw	r3,0(fp)
  80b994:	003fe206 	br	80b920 <_strtod_r+0xf2c>
  80b998:	00800884 	movi	r2,34
  80b99c:	a8800015 	stw	r2,0(r21)
  80b9a0:	e0000015 	stw	zero,0(fp)
  80b9a4:	e0000115 	stw	zero,4(fp)
  80b9a8:	003f8506 	br	80b7c0 <_strtod_r+0xdcc>
  80b9ac:	03800044 	movi	r14,1
  80b9b0:	003d7706 	br	80af90 <_strtod_r+0x59c>
  80b9b4:	99c5883a 	add	r2,r19,r7
  80b9b8:	11ffffc4 	addi	r7,r2,-1
  80b9bc:	00800204 	movi	r2,8
  80b9c0:	3cc00044 	addi	r19,r7,1
  80b9c4:	11c0df16 	blt	r2,r7,80bd44 <_strtod_r+0x1350>
  80b9c8:	a08002a4 	muli	r2,r20,10
  80b9cc:	000f883a 	mov	r7,zero
  80b9d0:	1269883a 	add	r20,r2,r9
  80b9d4:	42000044 	addi	r8,r8,1
  80b9d8:	da000415 	stw	r8,16(sp)
  80b9dc:	41000007 	ldb	r4,0(r8)
  80b9e0:	003d3706 	br	80aec0 <_strtod_r+0x4cc>
  80b9e4:	d9801317 	ldw	r6,76(sp)
  80b9e8:	3000511e 	bne	r6,zero,80bb30 <_strtod_r+0x113c>
  80b9ec:	e0800017 	ldw	r2,0(fp)
  80b9f0:	1000d81e 	bne	r2,zero,80bd54 <_strtod_r+0x1360>
  80b9f4:	e0c00117 	ldw	r3,4(fp)
  80b9f8:	01000434 	movhi	r4,16
  80b9fc:	213fffc4 	addi	r4,r4,-1
  80ba00:	1904703a 	and	r2,r3,r4
  80ba04:	1000b01e 	bne	r2,zero,80bcc8 <_strtod_r+0x12d4>
  80ba08:	18dffc2c 	andhi	r3,r3,32752
  80ba0c:	0081ac34 	movhi	r2,1712
  80ba10:	10c1102e 	bgeu	r2,r3,80be54 <_strtod_r+0x1460>
  80ba14:	a0800517 	ldw	r2,20(r20)
  80ba18:	1000031e 	bne	r2,zero,80ba28 <_strtod_r+0x1034>
  80ba1c:	a0c00417 	ldw	r3,16(r20)
  80ba20:	00800044 	movi	r2,1
  80ba24:	10c0420e 	bge	r2,r3,80bb30 <_strtod_r+0x113c>
  80ba28:	a00b883a 	mov	r5,r20
  80ba2c:	a809883a 	mov	r4,r21
  80ba30:	01800044 	movi	r6,1
  80ba34:	080a0900 	call	80a090 <__lshift>
  80ba38:	1009883a 	mov	r4,r2
  80ba3c:	b00b883a 	mov	r5,r22
  80ba40:	1029883a 	mov	r20,r2
  80ba44:	08098a80 	call	8098a8 <__mcmp>
  80ba48:	0080c20e 	bge	zero,r2,80bd54 <_strtod_r+0x1360>
  80ba4c:	e1800117 	ldw	r6,4(fp)
  80ba50:	d9001417 	ldw	r4,80(sp)
  80ba54:	2013003a 	cmpeq	r9,r4,zero
  80ba58:	4800ef1e 	bne	r9,zero,80be18 <_strtod_r+0x1424>
  80ba5c:	30dffc2c 	andhi	r3,r6,32752
  80ba60:	0081ac34 	movhi	r2,1712
  80ba64:	10c0ec36 	bltu	r2,r3,80be18 <_strtod_r+0x1424>
  80ba68:	0080dc34 	movhi	r2,880
  80ba6c:	10ffca2e 	bgeu	r2,r3,80b998 <_strtod_r+0xfa4>
  80ba70:	e0800017 	ldw	r2,0(fp)
  80ba74:	e0c00117 	ldw	r3,4(fp)
  80ba78:	020e5434 	movhi	r8,14672
  80ba7c:	000d883a 	mov	r6,zero
  80ba80:	400f883a 	mov	r7,r8
  80ba84:	180b883a 	mov	r5,r3
  80ba88:	1009883a 	mov	r4,r2
  80ba8c:	da000c15 	stw	r8,48(sp)
  80ba90:	d8000b15 	stw	zero,44(sp)
  80ba94:	080ece00 	call	80ece0 <__muldf3>
  80ba98:	e0800015 	stw	r2,0(fp)
  80ba9c:	e0c00115 	stw	r3,4(fp)
  80baa0:	183f471e 	bne	r3,zero,80b7c0 <_strtod_r+0xdcc>
  80baa4:	103f461e 	bne	r2,zero,80b7c0 <_strtod_r+0xdcc>
  80baa8:	00800884 	movi	r2,34
  80baac:	a8800015 	stw	r2,0(r21)
  80bab0:	003f4306 	br	80b7c0 <_strtod_r+0xdcc>
  80bab4:	d8801317 	ldw	r2,76(sp)
  80bab8:	1025003a 	cmpeq	r18,r2,zero
  80babc:	9000861e 	bne	r18,zero,80bcd8 <_strtod_r+0x12e4>
  80bac0:	e1400117 	ldw	r5,4(fp)
  80bac4:	00c00434 	movhi	r3,16
  80bac8:	18ffffc4 	addi	r3,r3,-1
  80bacc:	28c4703a 	and	r2,r5,r3
  80bad0:	10c01b26 	beq	r2,r3,80bb40 <_strtod_r+0x114c>
  80bad4:	e1c00017 	ldw	r7,0(fp)
  80bad8:	3880004c 	andi	r2,r7,1
  80badc:	1005003a 	cmpeq	r2,r2,zero
  80bae0:	1000791e 	bne	r2,zero,80bcc8 <_strtod_r+0x12d4>
  80bae4:	9000b126 	beq	r18,zero,80bdac <_strtod_r+0x13b8>
  80bae8:	e4400117 	ldw	r17,4(fp)
  80baec:	3809883a 	mov	r4,r7
  80baf0:	3821883a 	mov	r16,r7
  80baf4:	880b883a 	mov	r5,r17
  80baf8:	08099080 	call	809908 <__ulp>
  80bafc:	180f883a 	mov	r7,r3
  80bb00:	880b883a 	mov	r5,r17
  80bb04:	8009883a 	mov	r4,r16
  80bb08:	100d883a 	mov	r6,r2
  80bb0c:	080ebec0 	call	80ebec <__subdf3>
  80bb10:	1009883a 	mov	r4,r2
  80bb14:	000d883a 	mov	r6,zero
  80bb18:	000f883a 	mov	r7,zero
  80bb1c:	180b883a 	mov	r5,r3
  80bb20:	e0800015 	stw	r2,0(fp)
  80bb24:	e0c00115 	stw	r3,4(fp)
  80bb28:	080f3840 	call	80f384 <__nedf2>
  80bb2c:	103f9a26 	beq	r2,zero,80b998 <_strtod_r+0xfa4>
  80bb30:	d9001417 	ldw	r4,80(sp)
  80bb34:	2013003a 	cmpeq	r9,r4,zero
  80bb38:	483f211e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80bb3c:	003fcc06 	br	80ba70 <_strtod_r+0x107c>
  80bb40:	d9001417 	ldw	r4,80(sp)
  80bb44:	e1c00017 	ldw	r7,0(fp)
  80bb48:	2013003a 	cmpeq	r9,r4,zero
  80bb4c:	4800bd1e 	bne	r9,zero,80be44 <_strtod_r+0x1450>
  80bb50:	28dffc2c 	andhi	r3,r5,32752
  80bb54:	0081a834 	movhi	r2,1696
  80bb58:	10c0ba36 	bltu	r2,r3,80be44 <_strtod_r+0x1450>
  80bb5c:	1804d53a 	srli	r2,r3,20
  80bb60:	00c01ac4 	movi	r3,107
  80bb64:	013fffc4 	movi	r4,-1
  80bb68:	1887c83a 	sub	r3,r3,r2
  80bb6c:	20c4983a 	sll	r2,r4,r3
  80bb70:	11ffd91e 	bne	r2,r7,80bad8 <_strtod_r+0x10e4>
  80bb74:	28dffc2c 	andhi	r3,r5,32752
  80bb78:	00800434 	movhi	r2,16
  80bb7c:	188d883a 	add	r6,r3,r2
  80bb80:	e1800115 	stw	r6,4(fp)
  80bb84:	e0000015 	stw	zero,0(fp)
  80bb88:	483f0d1e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80bb8c:	003fb806 	br	80ba70 <_strtod_r+0x107c>
  80bb90:	0021883a 	mov	r16,zero
  80bb94:	0005883a 	mov	r2,zero
  80bb98:	044ff834 	movhi	r17,16352
  80bb9c:	00eff834 	movhi	r3,49120
  80bba0:	003e8606 	br	80b5bc <_strtod_r+0xbc8>
  80bba4:	803d9e26 	beq	r16,zero,80b220 <_strtod_r+0x82c>
  80bba8:	0421c83a 	sub	r16,zero,r16
  80bbac:	814003cc 	andi	r5,r16,15
  80bbb0:	28000f26 	beq	r5,zero,80bbf0 <_strtod_r+0x11fc>
  80bbb4:	280a90fa 	slli	r5,r5,3
  80bbb8:	01002074 	movhi	r4,129
  80bbbc:	2113be04 	addi	r4,r4,20216
  80bbc0:	e0800017 	ldw	r2,0(fp)
  80bbc4:	290b883a 	add	r5,r5,r4
  80bbc8:	2a000017 	ldw	r8,0(r5)
  80bbcc:	e0c00117 	ldw	r3,4(fp)
  80bbd0:	2a400117 	ldw	r9,4(r5)
  80bbd4:	1009883a 	mov	r4,r2
  80bbd8:	180b883a 	mov	r5,r3
  80bbdc:	480f883a 	mov	r7,r9
  80bbe0:	400d883a 	mov	r6,r8
  80bbe4:	080f0a40 	call	80f0a4 <__divdf3>
  80bbe8:	e0c00115 	stw	r3,4(fp)
  80bbec:	e0800015 	stw	r2,0(fp)
  80bbf0:	8021d13a 	srai	r16,r16,4
  80bbf4:	803d8a26 	beq	r16,zero,80b220 <_strtod_r+0x82c>
  80bbf8:	008007c4 	movi	r2,31
  80bbfc:	14002d16 	blt	r2,r16,80bcb4 <_strtod_r+0x12c0>
  80bc00:	8080040c 	andi	r2,r16,16
  80bc04:	10009926 	beq	r2,zero,80be6c <_strtod_r+0x1478>
  80bc08:	00801a84 	movi	r2,106
  80bc0c:	d8801415 	stw	r2,80(sp)
  80bc10:	0400110e 	bge	zero,r16,80bc58 <_strtod_r+0x1264>
  80bc14:	04402074 	movhi	r17,129
  80bc18:	8c540b04 	addi	r17,r17,20524
  80bc1c:	8080004c 	andi	r2,r16,1
  80bc20:	1005003a 	cmpeq	r2,r2,zero
  80bc24:	1000091e 	bne	r2,zero,80bc4c <_strtod_r+0x1258>
  80bc28:	e0800017 	ldw	r2,0(fp)
  80bc2c:	e0c00117 	ldw	r3,4(fp)
  80bc30:	89800017 	ldw	r6,0(r17)
  80bc34:	89c00117 	ldw	r7,4(r17)
  80bc38:	180b883a 	mov	r5,r3
  80bc3c:	1009883a 	mov	r4,r2
  80bc40:	080ece00 	call	80ece0 <__muldf3>
  80bc44:	e0c00115 	stw	r3,4(fp)
  80bc48:	e0800015 	stw	r2,0(fp)
  80bc4c:	8021d07a 	srai	r16,r16,1
  80bc50:	8c400204 	addi	r17,r17,8
  80bc54:	043ff116 	blt	zero,r16,80bc1c <_strtod_r+0x1228>
  80bc58:	d8c01417 	ldw	r3,80(sp)
  80bc5c:	18000d26 	beq	r3,zero,80bc94 <_strtod_r+0x12a0>
  80bc60:	e1000117 	ldw	r4,4(fp)
  80bc64:	00c01ac4 	movi	r3,107
  80bc68:	209ffc2c 	andhi	r2,r4,32752
  80bc6c:	1004d53a 	srli	r2,r2,20
  80bc70:	1887c83a 	sub	r3,r3,r2
  80bc74:	00c0070e 	bge	zero,r3,80bc94 <_strtod_r+0x12a0>
  80bc78:	008007c4 	movi	r2,31
  80bc7c:	10c0900e 	bge	r2,r3,80bec0 <_strtod_r+0x14cc>
  80bc80:	00800d04 	movi	r2,52
  80bc84:	e0000015 	stw	zero,0(fp)
  80bc88:	10c0870e 	bge	r2,r3,80bea8 <_strtod_r+0x14b4>
  80bc8c:	0180dc34 	movhi	r6,880
  80bc90:	e1800115 	stw	r6,4(fp)
  80bc94:	e0800017 	ldw	r2,0(fp)
  80bc98:	e0c00117 	ldw	r3,4(fp)
  80bc9c:	000d883a 	mov	r6,zero
  80bca0:	000f883a 	mov	r7,zero
  80bca4:	180b883a 	mov	r5,r3
  80bca8:	1009883a 	mov	r4,r2
  80bcac:	080f3840 	call	80f384 <__nedf2>
  80bcb0:	103d5c1e 	bne	r2,zero,80b224 <_strtod_r+0x830>
  80bcb4:	00800884 	movi	r2,34
  80bcb8:	a8800015 	stw	r2,0(r21)
  80bcbc:	e0000015 	stw	zero,0(fp)
  80bcc0:	e0000115 	stw	zero,4(fp)
  80bcc4:	003bc206 	br	80abd0 <_strtod_r+0x1dc>
  80bcc8:	d8801417 	ldw	r2,80(sp)
  80bccc:	1013003a 	cmpeq	r9,r2,zero
  80bcd0:	483ebb1e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80bcd4:	003f6606 	br	80ba70 <_strtod_r+0x107c>
  80bcd8:	e1800117 	ldw	r6,4(fp)
  80bcdc:	00c00434 	movhi	r3,16
  80bce0:	18ffffc4 	addi	r3,r3,-1
  80bce4:	30c4703a 	and	r2,r6,r3
  80bce8:	103f7a1e 	bne	r2,zero,80bad4 <_strtod_r+0x10e0>
  80bcec:	e1c00017 	ldw	r7,0(fp)
  80bcf0:	383f791e 	bne	r7,zero,80bad8 <_strtod_r+0x10e4>
  80bcf4:	003f5606 	br	80ba50 <_strtod_r+0x105c>
  80bcf8:	d9800f17 	ldw	r6,60(sp)
  80bcfc:	00bffa84 	movi	r2,-22
  80bd00:	30bcd416 	blt	r6,r2,80b054 <_strtod_r+0x660>
  80bd04:	317ffe24 	muli	r5,r6,-8
  80bd08:	01002074 	movhi	r4,129
  80bd0c:	2113be04 	addi	r4,r4,20216
  80bd10:	e0800017 	ldw	r2,0(fp)
  80bd14:	290b883a 	add	r5,r5,r4
  80bd18:	2a000017 	ldw	r8,0(r5)
  80bd1c:	e0c00117 	ldw	r3,4(fp)
  80bd20:	2a400117 	ldw	r9,4(r5)
  80bd24:	1009883a 	mov	r4,r2
  80bd28:	180b883a 	mov	r5,r3
  80bd2c:	480f883a 	mov	r7,r9
  80bd30:	400d883a 	mov	r6,r8
  80bd34:	080f0a40 	call	80f0a4 <__divdf3>
  80bd38:	e0c00115 	stw	r3,4(fp)
  80bd3c:	e0800015 	stw	r2,0(fp)
  80bd40:	003ba306 	br	80abd0 <_strtod_r+0x1dc>
  80bd44:	00800404 	movi	r2,16
  80bd48:	14c02f0e 	bge	r2,r19,80be08 <_strtod_r+0x1414>
  80bd4c:	000f883a 	mov	r7,zero
  80bd50:	003f2006 	br	80b9d4 <_strtod_r+0xfe0>
  80bd54:	d9801417 	ldw	r6,80(sp)
  80bd58:	3013003a 	cmpeq	r9,r6,zero
  80bd5c:	483e981e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80bd60:	003f4306 	br	80ba70 <_strtod_r+0x107c>
  80bd64:	00801a44 	movi	r2,105
  80bd68:	20bc6326 	beq	r4,r2,80aef8 <_strtod_r+0x504>
  80bd6c:	00801b84 	movi	r2,110
  80bd70:	20bbba1e 	bne	r4,r2,80ac5c <_strtod_r+0x268>
  80bd74:	dc000404 	addi	r16,sp,16
  80bd78:	8009883a 	mov	r4,r16
  80bd7c:	01402074 	movhi	r5,129
  80bd80:	29540a04 	addi	r5,r5,20520
  80bd84:	080a9ac0 	call	80a9ac <match>
  80bd88:	103bb426 	beq	r2,zero,80ac5c <_strtod_r+0x268>
  80bd8c:	d8800417 	ldw	r2,16(sp)
  80bd90:	00c00a04 	movi	r3,40
  80bd94:	11000007 	ldb	r4,0(r2)
  80bd98:	20c03626 	beq	r4,r3,80be74 <_strtod_r+0x1480>
  80bd9c:	01bffe34 	movhi	r6,65528
  80bda0:	e1800115 	stw	r6,4(fp)
  80bda4:	e0000015 	stw	zero,0(fp)
  80bda8:	003b8906 	br	80abd0 <_strtod_r+0x1dc>
  80bdac:	e4400117 	ldw	r17,4(fp)
  80bdb0:	3809883a 	mov	r4,r7
  80bdb4:	3821883a 	mov	r16,r7
  80bdb8:	880b883a 	mov	r5,r17
  80bdbc:	08099080 	call	809908 <__ulp>
  80bdc0:	100d883a 	mov	r6,r2
  80bdc4:	880b883a 	mov	r5,r17
  80bdc8:	180f883a 	mov	r7,r3
  80bdcc:	8009883a 	mov	r4,r16
  80bdd0:	080ec6c0 	call	80ec6c <__adddf3>
  80bdd4:	d9801417 	ldw	r6,80(sp)
  80bdd8:	e0c00115 	stw	r3,4(fp)
  80bddc:	e0800015 	stw	r2,0(fp)
  80bde0:	3013003a 	cmpeq	r9,r6,zero
  80bde4:	483e761e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80bde8:	003f2106 	br	80ba70 <_strtod_r+0x107c>
  80bdec:	000f883a 	mov	r7,zero
  80bdf0:	003cf006 	br	80b1b4 <_strtod_r+0x7c0>
  80bdf4:	0080d434 	movhi	r2,848
  80bdf8:	188d883a 	add	r6,r3,r2
  80bdfc:	d8001415 	stw	zero,80(sp)
  80be00:	e1800115 	stw	r6,4(fp)
  80be04:	003d0706 	br	80b224 <_strtod_r+0x830>
  80be08:	808002a4 	muli	r2,r16,10
  80be0c:	000f883a 	mov	r7,zero
  80be10:	1261883a 	add	r16,r2,r9
  80be14:	003eef06 	br	80b9d4 <_strtod_r+0xfe0>
  80be18:	309ffc2c 	andhi	r2,r6,32752
  80be1c:	00fffc34 	movhi	r3,65520
  80be20:	10c5883a 	add	r2,r2,r3
  80be24:	00c00434 	movhi	r3,16
  80be28:	18ffffc4 	addi	r3,r3,-1
  80be2c:	10ccb03a 	or	r6,r2,r3
  80be30:	01ffffc4 	movi	r7,-1
  80be34:	e1800115 	stw	r6,4(fp)
  80be38:	e1c00015 	stw	r7,0(fp)
  80be3c:	483e601e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80be40:	003f0b06 	br	80ba70 <_strtod_r+0x107c>
  80be44:	00bfffc4 	movi	r2,-1
  80be48:	003f4906 	br	80bb70 <_strtod_r+0x117c>
  80be4c:	0025883a 	mov	r18,zero
  80be50:	003cb106 	br	80b118 <_strtod_r+0x724>
  80be54:	d8c01417 	ldw	r3,80(sp)
  80be58:	1813003a 	cmpeq	r9,r3,zero
  80be5c:	483e581e 	bne	r9,zero,80b7c0 <_strtod_r+0xdcc>
  80be60:	003f0306 	br	80ba70 <_strtod_r+0x107c>
  80be64:	980f883a 	mov	r7,r19
  80be68:	003ed406 	br	80b9bc <_strtod_r+0xfc8>
  80be6c:	d8001415 	stw	zero,80(sp)
  80be70:	003f6706 	br	80bc10 <_strtod_r+0x121c>
  80be74:	8009883a 	mov	r4,r16
  80be78:	01402074 	movhi	r5,129
  80be7c:	29568e04 	addi	r5,r5,23096
  80be80:	d9800d04 	addi	r6,sp,52
  80be84:	080d7640 	call	80d764 <__hexnan>
  80be88:	00c00144 	movi	r3,5
  80be8c:	10ffc31e 	bne	r2,r3,80bd9c <_strtod_r+0x13a8>
  80be90:	d8800e17 	ldw	r2,56(sp)
  80be94:	d9c00d17 	ldw	r7,52(sp)
  80be98:	119ffc34 	orhi	r6,r2,32752
  80be9c:	e1800115 	stw	r6,4(fp)
  80bea0:	e1c00015 	stw	r7,0(fp)
  80bea4:	003b4a06 	br	80abd0 <_strtod_r+0x1dc>
  80bea8:	18fff804 	addi	r3,r3,-32
  80beac:	00bfffc4 	movi	r2,-1
  80beb0:	10c4983a 	sll	r2,r2,r3
  80beb4:	208c703a 	and	r6,r4,r2
  80beb8:	e1800115 	stw	r6,4(fp)
  80bebc:	003f7506 	br	80bc94 <_strtod_r+0x12a0>
  80bec0:	00bfffc4 	movi	r2,-1
  80bec4:	10c4983a 	sll	r2,r2,r3
  80bec8:	e0c00017 	ldw	r3,0(fp)
  80becc:	188e703a 	and	r7,r3,r2
  80bed0:	e1c00015 	stw	r7,0(fp)
  80bed4:	003f6f06 	br	80bc94 <_strtod_r+0x12a0>

0080bed8 <strtof>:
  80bed8:	defffa04 	addi	sp,sp,-24
  80bedc:	dd000415 	stw	r20,16(sp)
  80bee0:	05002074 	movhi	r20,129
  80bee4:	a51b9704 	addi	r20,r20,28252
  80bee8:	2007883a 	mov	r3,r4
  80beec:	a1000017 	ldw	r4,0(r20)
  80bef0:	280d883a 	mov	r6,r5
  80bef4:	180b883a 	mov	r5,r3
  80bef8:	dfc00515 	stw	ra,20(sp)
  80befc:	dcc00315 	stw	r19,12(sp)
  80bf00:	dc800215 	stw	r18,8(sp)
  80bf04:	dc400115 	stw	r17,4(sp)
  80bf08:	dc000015 	stw	r16,0(sp)
  80bf0c:	080a9f40 	call	80a9f4 <_strtod_r>
  80bf10:	180b883a 	mov	r5,r3
  80bf14:	1009883a 	mov	r4,r2
  80bf18:	1823883a 	mov	r17,r3
  80bf1c:	1021883a 	mov	r16,r2
  80bf20:	080f7fc0 	call	80f7fc <__truncdfsf2>
  80bf24:	1009883a 	mov	r4,r2
  80bf28:	000b883a 	mov	r5,zero
  80bf2c:	1025883a 	mov	r18,r2
  80bf30:	1027883a 	mov	r19,r2
  80bf34:	080e6740 	call	80e674 <__nesf2>
  80bf38:	000d883a 	mov	r6,zero
  80bf3c:	000f883a 	mov	r7,zero
  80bf40:	8009883a 	mov	r4,r16
  80bf44:	880b883a 	mov	r5,r17
  80bf48:	10000e1e 	bne	r2,zero,80bf84 <strtof+0xac>
  80bf4c:	080f3840 	call	80f384 <__nedf2>
  80bf50:	10000c26 	beq	r2,zero,80bf84 <strtof+0xac>
  80bf54:	a0c00017 	ldw	r3,0(r20)
  80bf58:	00800884 	movi	r2,34
  80bf5c:	18800015 	stw	r2,0(r3)
  80bf60:	9805883a 	mov	r2,r19
  80bf64:	dfc00517 	ldw	ra,20(sp)
  80bf68:	dd000417 	ldw	r20,16(sp)
  80bf6c:	dcc00317 	ldw	r19,12(sp)
  80bf70:	dc800217 	ldw	r18,8(sp)
  80bf74:	dc400117 	ldw	r17,4(sp)
  80bf78:	dc000017 	ldw	r16,0(sp)
  80bf7c:	dec00604 	addi	sp,sp,24
  80bf80:	f800283a 	ret
  80bf84:	9009883a 	mov	r4,r18
  80bf88:	015fe034 	movhi	r5,32640
  80bf8c:	297fffc4 	addi	r5,r5,-1
  80bf90:	080e6ec0 	call	80e6ec <__gtsf2>
  80bf94:	00ffffc4 	movi	r3,-1
  80bf98:	011ffc34 	movhi	r4,32752
  80bf9c:	213fffc4 	addi	r4,r4,-1
  80bfa0:	200f883a 	mov	r7,r4
  80bfa4:	180d883a 	mov	r6,r3
  80bfa8:	8009883a 	mov	r4,r16
  80bfac:	880b883a 	mov	r5,r17
  80bfb0:	00800f16 	blt	zero,r2,80bff0 <strtof+0x118>
  80bfb4:	9009883a 	mov	r4,r18
  80bfb8:	017fe034 	movhi	r5,65408
  80bfbc:	297fffc4 	addi	r5,r5,-1
  80bfc0:	080e7640 	call	80e764 <__ltsf2>
  80bfc4:	023fffc4 	movi	r8,-1
  80bfc8:	027ffc34 	movhi	r9,65520
  80bfcc:	4a7fffc4 	addi	r9,r9,-1
  80bfd0:	880b883a 	mov	r5,r17
  80bfd4:	480f883a 	mov	r7,r9
  80bfd8:	8009883a 	mov	r4,r16
  80bfdc:	400d883a 	mov	r6,r8
  80bfe0:	103fdf0e 	bge	r2,zero,80bf60 <strtof+0x88>
  80bfe4:	080f51c0 	call	80f51c <__ltdf2>
  80bfe8:	103fda0e 	bge	r2,zero,80bf54 <strtof+0x7c>
  80bfec:	003fdc06 	br	80bf60 <strtof+0x88>
  80bff0:	080f40c0 	call	80f40c <__gtdf2>
  80bff4:	00bfd70e 	bge	zero,r2,80bf54 <strtof+0x7c>
  80bff8:	003fee06 	br	80bfb4 <strtof+0xdc>

0080bffc <strtod>:
  80bffc:	01802074 	movhi	r6,129
  80c000:	319b9704 	addi	r6,r6,28252
  80c004:	2007883a 	mov	r3,r4
  80c008:	31000017 	ldw	r4,0(r6)
  80c00c:	280d883a 	mov	r6,r5
  80c010:	180b883a 	mov	r5,r3
  80c014:	080a9f41 	jmpi	80a9f4 <_strtod_r>

0080c018 <_strtol_r>:
  80c018:	defff304 	addi	sp,sp,-52
  80c01c:	00802074 	movhi	r2,129
  80c020:	109b9b04 	addi	r2,r2,28268
  80c024:	dcc00615 	stw	r19,24(sp)
  80c028:	14c00017 	ldw	r19,0(r2)
  80c02c:	ddc00a15 	stw	r23,40(sp)
  80c030:	dc000315 	stw	r16,12(sp)
  80c034:	dfc00c15 	stw	ra,48(sp)
  80c038:	df000b15 	stw	fp,44(sp)
  80c03c:	dd800915 	stw	r22,36(sp)
  80c040:	dd400815 	stw	r21,32(sp)
  80c044:	dd000715 	stw	r20,28(sp)
  80c048:	dc800515 	stw	r18,20(sp)
  80c04c:	dc400415 	stw	r17,16(sp)
  80c050:	282f883a 	mov	r23,r5
  80c054:	d9000015 	stw	r4,0(sp)
  80c058:	d9800115 	stw	r6,4(sp)
  80c05c:	2821883a 	mov	r16,r5
  80c060:	84400007 	ldb	r17,0(r16)
  80c064:	84000044 	addi	r16,r16,1
  80c068:	9c47883a 	add	r3,r19,r17
  80c06c:	18800003 	ldbu	r2,0(r3)
  80c070:	1080020c 	andi	r2,r2,8
  80c074:	103ffa1e 	bne	r2,zero,80c060 <_strtol_r+0x48>
  80c078:	00800b44 	movi	r2,45
  80c07c:	88805c26 	beq	r17,r2,80c1f0 <_strtol_r+0x1d8>
  80c080:	00800ac4 	movi	r2,43
  80c084:	88805726 	beq	r17,r2,80c1e4 <_strtol_r+0x1cc>
  80c088:	0039883a 	mov	fp,zero
  80c08c:	3807003a 	cmpeq	r3,r7,zero
  80c090:	1800431e 	bne	r3,zero,80c1a0 <_strtol_r+0x188>
  80c094:	00800404 	movi	r2,16
  80c098:	38804126 	beq	r7,r2,80c1a0 <_strtol_r+0x188>
  80c09c:	3829883a 	mov	r20,r7
  80c0a0:	e02cc03a 	cmpne	r22,fp,zero
  80c0a4:	b0004b1e 	bne	r22,zero,80c1d4 <_strtol_r+0x1bc>
  80c0a8:	04a00034 	movhi	r18,32768
  80c0ac:	94bfffc4 	addi	r18,r18,-1
  80c0b0:	9009883a 	mov	r4,r18
  80c0b4:	a00b883a 	mov	r5,r20
  80c0b8:	d9c00215 	stw	r7,8(sp)
  80c0bc:	080fb480 	call	80fb48 <__umodsi3>
  80c0c0:	9009883a 	mov	r4,r18
  80c0c4:	a00b883a 	mov	r5,r20
  80c0c8:	102b883a 	mov	r21,r2
  80c0cc:	080fb400 	call	80fb40 <__udivsi3>
  80c0d0:	1011883a 	mov	r8,r2
  80c0d4:	9c45883a 	add	r2,r19,r17
  80c0d8:	11000003 	ldbu	r4,0(r2)
  80c0dc:	000b883a 	mov	r5,zero
  80c0e0:	000d883a 	mov	r6,zero
  80c0e4:	20c0010c 	andi	r3,r4,4
  80c0e8:	d9c00217 	ldw	r7,8(sp)
  80c0ec:	18000e26 	beq	r3,zero,80c128 <_strtol_r+0x110>
  80c0f0:	88fff404 	addi	r3,r17,-48
  80c0f4:	19c0140e 	bge	r3,r7,80c148 <_strtol_r+0x130>
  80c0f8:	30003116 	blt	r6,zero,80c1c0 <_strtol_r+0x1a8>
  80c0fc:	41403036 	bltu	r8,r5,80c1c0 <_strtol_r+0x1a8>
  80c100:	2a002e26 	beq	r5,r8,80c1bc <_strtol_r+0x1a4>
  80c104:	2d05383a 	mul	r2,r5,r20
  80c108:	01800044 	movi	r6,1
  80c10c:	10cb883a 	add	r5,r2,r3
  80c110:	84400007 	ldb	r17,0(r16)
  80c114:	84000044 	addi	r16,r16,1
  80c118:	9c45883a 	add	r2,r19,r17
  80c11c:	11000003 	ldbu	r4,0(r2)
  80c120:	20c0010c 	andi	r3,r4,4
  80c124:	183ff21e 	bne	r3,zero,80c0f0 <_strtol_r+0xd8>
  80c128:	208000cc 	andi	r2,r4,3
  80c12c:	10000626 	beq	r2,zero,80c148 <_strtol_r+0x130>
  80c130:	2080004c 	andi	r2,r4,1
  80c134:	1005003a 	cmpeq	r2,r2,zero
  80c138:	1000231e 	bne	r2,zero,80c1c8 <_strtol_r+0x1b0>
  80c13c:	00800dc4 	movi	r2,55
  80c140:	8887c83a 	sub	r3,r17,r2
  80c144:	19ffec16 	blt	r3,r7,80c0f8 <_strtol_r+0xe0>
  80c148:	30002d16 	blt	r6,zero,80c200 <_strtol_r+0x1e8>
  80c14c:	b000231e 	bne	r22,zero,80c1dc <_strtol_r+0x1c4>
  80c150:	2807883a 	mov	r3,r5
  80c154:	d8800117 	ldw	r2,4(sp)
  80c158:	10000426 	beq	r2,zero,80c16c <_strtol_r+0x154>
  80c15c:	30000126 	beq	r6,zero,80c164 <_strtol_r+0x14c>
  80c160:	85ffffc4 	addi	r23,r16,-1
  80c164:	d9000117 	ldw	r4,4(sp)
  80c168:	25c00015 	stw	r23,0(r4)
  80c16c:	1805883a 	mov	r2,r3
  80c170:	dfc00c17 	ldw	ra,48(sp)
  80c174:	df000b17 	ldw	fp,44(sp)
  80c178:	ddc00a17 	ldw	r23,40(sp)
  80c17c:	dd800917 	ldw	r22,36(sp)
  80c180:	dd400817 	ldw	r21,32(sp)
  80c184:	dd000717 	ldw	r20,28(sp)
  80c188:	dcc00617 	ldw	r19,24(sp)
  80c18c:	dc800517 	ldw	r18,20(sp)
  80c190:	dc400417 	ldw	r17,16(sp)
  80c194:	dc000317 	ldw	r16,12(sp)
  80c198:	dec00d04 	addi	sp,sp,52
  80c19c:	f800283a 	ret
  80c1a0:	00800c04 	movi	r2,48
  80c1a4:	88801d26 	beq	r17,r2,80c21c <_strtol_r+0x204>
  80c1a8:	183fbc26 	beq	r3,zero,80c09c <_strtol_r+0x84>
  80c1ac:	00800c04 	movi	r2,48
  80c1b0:	88802726 	beq	r17,r2,80c250 <_strtol_r+0x238>
  80c1b4:	01c00284 	movi	r7,10
  80c1b8:	003fb806 	br	80c09c <_strtol_r+0x84>
  80c1bc:	a8ffd10e 	bge	r21,r3,80c104 <_strtol_r+0xec>
  80c1c0:	01bfffc4 	movi	r6,-1
  80c1c4:	003fd206 	br	80c110 <_strtol_r+0xf8>
  80c1c8:	008015c4 	movi	r2,87
  80c1cc:	8887c83a 	sub	r3,r17,r2
  80c1d0:	003fdc06 	br	80c144 <_strtol_r+0x12c>
  80c1d4:	04a00034 	movhi	r18,32768
  80c1d8:	003fb506 	br	80c0b0 <_strtol_r+0x98>
  80c1dc:	0147c83a 	sub	r3,zero,r5
  80c1e0:	003fdc06 	br	80c154 <_strtol_r+0x13c>
  80c1e4:	84400007 	ldb	r17,0(r16)
  80c1e8:	84000044 	addi	r16,r16,1
  80c1ec:	003fa606 	br	80c088 <_strtol_r+0x70>
  80c1f0:	84400007 	ldb	r17,0(r16)
  80c1f4:	07000044 	movi	fp,1
  80c1f8:	84000044 	addi	r16,r16,1
  80c1fc:	003fa306 	br	80c08c <_strtol_r+0x74>
  80c200:	e005003a 	cmpeq	r2,fp,zero
  80c204:	10000f1e 	bne	r2,zero,80c244 <_strtol_r+0x22c>
  80c208:	00e00034 	movhi	r3,32768
  80c20c:	d9000017 	ldw	r4,0(sp)
  80c210:	00800884 	movi	r2,34
  80c214:	20800015 	stw	r2,0(r4)
  80c218:	003fce06 	br	80c154 <_strtol_r+0x13c>
  80c21c:	81000007 	ldb	r4,0(r16)
  80c220:	00801e04 	movi	r2,120
  80c224:	20800226 	beq	r4,r2,80c230 <_strtol_r+0x218>
  80c228:	00801604 	movi	r2,88
  80c22c:	20bfde1e 	bne	r4,r2,80c1a8 <_strtol_r+0x190>
  80c230:	84400047 	ldb	r17,1(r16)
  80c234:	01c00404 	movi	r7,16
  80c238:	84000084 	addi	r16,r16,2
  80c23c:	3829883a 	mov	r20,r7
  80c240:	003f9706 	br	80c0a0 <_strtol_r+0x88>
  80c244:	00e00034 	movhi	r3,32768
  80c248:	18ffffc4 	addi	r3,r3,-1
  80c24c:	003fef06 	br	80c20c <_strtol_r+0x1f4>
  80c250:	01c00204 	movi	r7,8
  80c254:	3829883a 	mov	r20,r7
  80c258:	003f9106 	br	80c0a0 <_strtol_r+0x88>

0080c25c <strtol>:
  80c25c:	00802074 	movhi	r2,129
  80c260:	109b9704 	addi	r2,r2,28252
  80c264:	2013883a 	mov	r9,r4
  80c268:	11000017 	ldw	r4,0(r2)
  80c26c:	2805883a 	mov	r2,r5
  80c270:	300f883a 	mov	r7,r6
  80c274:	480b883a 	mov	r5,r9
  80c278:	100d883a 	mov	r6,r2
  80c27c:	080c0181 	jmpi	80c018 <_strtol_r>

0080c280 <_strtoll_r>:
  80c280:	defff004 	addi	sp,sp,-64
  80c284:	00802074 	movhi	r2,129
  80c288:	109b9b04 	addi	r2,r2,28268
  80c28c:	df000e15 	stw	fp,56(sp)
  80c290:	17000017 	ldw	fp,0(r2)
  80c294:	ddc00d15 	stw	r23,52(sp)
  80c298:	dd000a15 	stw	r20,40(sp)
  80c29c:	dfc00f15 	stw	ra,60(sp)
  80c2a0:	dd800c15 	stw	r22,48(sp)
  80c2a4:	dd400b15 	stw	r21,44(sp)
  80c2a8:	dcc00915 	stw	r19,36(sp)
  80c2ac:	dc800815 	stw	r18,32(sp)
  80c2b0:	dc400715 	stw	r17,28(sp)
  80c2b4:	dc000615 	stw	r16,24(sp)
  80c2b8:	d9400315 	stw	r5,12(sp)
  80c2bc:	d9000215 	stw	r4,8(sp)
  80c2c0:	d9800415 	stw	r6,16(sp)
  80c2c4:	382f883a 	mov	r23,r7
  80c2c8:	2829883a 	mov	r20,r5
  80c2cc:	a4c00007 	ldb	r19,0(r20)
  80c2d0:	a5000044 	addi	r20,r20,1
  80c2d4:	e4c7883a 	add	r3,fp,r19
  80c2d8:	18800003 	ldbu	r2,0(r3)
  80c2dc:	1080020c 	andi	r2,r2,8
  80c2e0:	103ffa1e 	bne	r2,zero,80c2cc <_strtoll_r+0x4c>
  80c2e4:	00800b44 	movi	r2,45
  80c2e8:	98808826 	beq	r19,r2,80c50c <_strtoll_r+0x28c>
  80c2ec:	00800ac4 	movi	r2,43
  80c2f0:	98808326 	beq	r19,r2,80c500 <_strtoll_r+0x280>
  80c2f4:	d8000115 	stw	zero,4(sp)
  80c2f8:	b807003a 	cmpeq	r3,r23,zero
  80c2fc:	18005f1e 	bne	r3,zero,80c47c <_strtoll_r+0x1fc>
  80c300:	00800404 	movi	r2,16
  80c304:	b8805d26 	beq	r23,r2,80c47c <_strtoll_r+0x1fc>
  80c308:	b82dd7fa 	srai	r22,r23,31
  80c30c:	b82b883a 	mov	r21,r23
  80c310:	d8c00117 	ldw	r3,4(sp)
  80c314:	1806c03a 	cmpne	r3,r3,zero
  80c318:	d8c00515 	stw	r3,20(sp)
  80c31c:	1800631e 	bne	r3,zero,80c4ac <_strtoll_r+0x22c>
  80c320:	043fffc4 	movi	r16,-1
  80c324:	04600034 	movhi	r17,32768
  80c328:	8c7fffc4 	addi	r17,r17,-1
  80c32c:	880b883a 	mov	r5,r17
  80c330:	8009883a 	mov	r4,r16
  80c334:	a80d883a 	mov	r6,r21
  80c338:	b00f883a 	mov	r7,r22
  80c33c:	080e0c40 	call	80e0c4 <__umoddi3>
  80c340:	880b883a 	mov	r5,r17
  80c344:	8009883a 	mov	r4,r16
  80c348:	b00f883a 	mov	r7,r22
  80c34c:	a80d883a 	mov	r6,r21
  80c350:	d8800015 	stw	r2,0(sp)
  80c354:	080dae80 	call	80dae8 <__udivdi3>
  80c358:	1023883a 	mov	r17,r2
  80c35c:	e4c5883a 	add	r2,fp,r19
  80c360:	11000003 	ldbu	r4,0(r2)
  80c364:	1825883a 	mov	r18,r3
  80c368:	0015883a 	mov	r10,zero
  80c36c:	20c0010c 	andi	r3,r4,4
  80c370:	0017883a 	mov	r11,zero
  80c374:	000f883a 	mov	r7,zero
  80c378:	18001a26 	beq	r3,zero,80c3e4 <_strtoll_r+0x164>
  80c37c:	9c3ff404 	addi	r16,r19,-48
  80c380:	85c0200e 	bge	r16,r23,80c404 <_strtoll_r+0x184>
  80c384:	38003b16 	blt	r7,zero,80c474 <_strtoll_r+0x1f4>
  80c388:	92c03a36 	bltu	r18,r11,80c474 <_strtoll_r+0x1f4>
  80c38c:	5c803826 	beq	r11,r18,80c470 <_strtoll_r+0x1f0>
  80c390:	54404c26 	beq	r10,r17,80c4c4 <_strtoll_r+0x244>
  80c394:	580b883a 	mov	r5,r11
  80c398:	5009883a 	mov	r4,r10
  80c39c:	a80d883a 	mov	r6,r21
  80c3a0:	b00f883a 	mov	r7,r22
  80c3a4:	080d9ac0 	call	80d9ac <__muldi3>
  80c3a8:	8013d7fa 	srai	r9,r16,31
  80c3ac:	100d883a 	mov	r6,r2
  80c3b0:	1405883a 	add	r2,r2,r16
  80c3b4:	118d803a 	cmpltu	r6,r2,r6
  80c3b8:	1a47883a 	add	r3,r3,r9
  80c3bc:	30cd883a 	add	r6,r6,r3
  80c3c0:	1015883a 	mov	r10,r2
  80c3c4:	3017883a 	mov	r11,r6
  80c3c8:	01c00044 	movi	r7,1
  80c3cc:	a4c00007 	ldb	r19,0(r20)
  80c3d0:	a5000044 	addi	r20,r20,1
  80c3d4:	e4c5883a 	add	r2,fp,r19
  80c3d8:	11000003 	ldbu	r4,0(r2)
  80c3dc:	20c0010c 	andi	r3,r4,4
  80c3e0:	183fe61e 	bne	r3,zero,80c37c <_strtoll_r+0xfc>
  80c3e4:	208000cc 	andi	r2,r4,3
  80c3e8:	10000626 	beq	r2,zero,80c404 <_strtoll_r+0x184>
  80c3ec:	2080004c 	andi	r2,r4,1
  80c3f0:	1005003a 	cmpeq	r2,r2,zero
  80c3f4:	1000301e 	bne	r2,zero,80c4b8 <_strtoll_r+0x238>
  80c3f8:	02000dc4 	movi	r8,55
  80c3fc:	9a21c83a 	sub	r16,r19,r8
  80c400:	85ffe016 	blt	r16,r23,80c384 <_strtoll_r+0x104>
  80c404:	38004616 	blt	r7,zero,80c520 <_strtoll_r+0x2a0>
  80c408:	d8800517 	ldw	r2,20(sp)
  80c40c:	1000341e 	bne	r2,zero,80c4e0 <_strtoll_r+0x260>
  80c410:	500b883a 	mov	r5,r10
  80c414:	580d883a 	mov	r6,r11
  80c418:	d8c00417 	ldw	r3,16(sp)
  80c41c:	18000626 	beq	r3,zero,80c438 <_strtoll_r+0x1b8>
  80c420:	38000226 	beq	r7,zero,80c42c <_strtoll_r+0x1ac>
  80c424:	a53fffc4 	addi	r20,r20,-1
  80c428:	dd000315 	stw	r20,12(sp)
  80c42c:	d8c00317 	ldw	r3,12(sp)
  80c430:	d8800417 	ldw	r2,16(sp)
  80c434:	10c00015 	stw	r3,0(r2)
  80c438:	2805883a 	mov	r2,r5
  80c43c:	3007883a 	mov	r3,r6
  80c440:	dfc00f17 	ldw	ra,60(sp)
  80c444:	df000e17 	ldw	fp,56(sp)
  80c448:	ddc00d17 	ldw	r23,52(sp)
  80c44c:	dd800c17 	ldw	r22,48(sp)
  80c450:	dd400b17 	ldw	r21,44(sp)
  80c454:	dd000a17 	ldw	r20,40(sp)
  80c458:	dcc00917 	ldw	r19,36(sp)
  80c45c:	dc800817 	ldw	r18,32(sp)
  80c460:	dc400717 	ldw	r17,28(sp)
  80c464:	dc000617 	ldw	r16,24(sp)
  80c468:	dec01004 	addi	sp,sp,64
  80c46c:	f800283a 	ret
  80c470:	8abfc72e 	bgeu	r17,r10,80c390 <_strtoll_r+0x110>
  80c474:	01ffffc4 	movi	r7,-1
  80c478:	003fd406 	br	80c3cc <_strtoll_r+0x14c>
  80c47c:	00800c04 	movi	r2,48
  80c480:	98803226 	beq	r19,r2,80c54c <_strtoll_r+0x2cc>
  80c484:	183fa026 	beq	r3,zero,80c308 <_strtoll_r+0x88>
  80c488:	00800c04 	movi	r2,48
  80c48c:	98803e26 	beq	r19,r2,80c588 <_strtoll_r+0x308>
  80c490:	d8c00117 	ldw	r3,4(sp)
  80c494:	05c00284 	movi	r23,10
  80c498:	b82b883a 	mov	r21,r23
  80c49c:	1806c03a 	cmpne	r3,r3,zero
  80c4a0:	002d883a 	mov	r22,zero
  80c4a4:	d8c00515 	stw	r3,20(sp)
  80c4a8:	183f9d26 	beq	r3,zero,80c320 <_strtoll_r+0xa0>
  80c4ac:	0021883a 	mov	r16,zero
  80c4b0:	04600034 	movhi	r17,32768
  80c4b4:	003f9d06 	br	80c32c <_strtoll_r+0xac>
  80c4b8:	020015c4 	movi	r8,87
  80c4bc:	9a21c83a 	sub	r16,r19,r8
  80c4c0:	003fcf06 	br	80c400 <_strtoll_r+0x180>
  80c4c4:	5cbfb31e 	bne	r11,r18,80c394 <_strtoll_r+0x114>
  80c4c8:	d8800017 	ldw	r2,0(sp)
  80c4cc:	143fb10e 	bge	r2,r16,80c394 <_strtoll_r+0x114>
  80c4d0:	8815883a 	mov	r10,r17
  80c4d4:	9017883a 	mov	r11,r18
  80c4d8:	01ffffc4 	movi	r7,-1
  80c4dc:	003fbb06 	br	80c3cc <_strtoll_r+0x14c>
  80c4e0:	0009883a 	mov	r4,zero
  80c4e4:	2285c83a 	sub	r2,r4,r10
  80c4e8:	2089803a 	cmpltu	r4,r4,r2
  80c4ec:	02c7c83a 	sub	r3,zero,r11
  80c4f0:	1909c83a 	sub	r4,r3,r4
  80c4f4:	100b883a 	mov	r5,r2
  80c4f8:	200d883a 	mov	r6,r4
  80c4fc:	003fc606 	br	80c418 <_strtoll_r+0x198>
  80c500:	a4c00007 	ldb	r19,0(r20)
  80c504:	a5000044 	addi	r20,r20,1
  80c508:	003f7a06 	br	80c2f4 <_strtoll_r+0x74>
  80c50c:	a4c00007 	ldb	r19,0(r20)
  80c510:	00800044 	movi	r2,1
  80c514:	a5000044 	addi	r20,r20,1
  80c518:	d8800115 	stw	r2,4(sp)
  80c51c:	003f7606 	br	80c2f8 <_strtoll_r+0x78>
  80c520:	d8c00117 	ldw	r3,4(sp)
  80c524:	1805003a 	cmpeq	r2,r3,zero
  80c528:	1000131e 	bne	r2,zero,80c578 <_strtoll_r+0x2f8>
  80c52c:	0005883a 	mov	r2,zero
  80c530:	00e00034 	movhi	r3,32768
  80c534:	100b883a 	mov	r5,r2
  80c538:	180d883a 	mov	r6,r3
  80c53c:	d8c00217 	ldw	r3,8(sp)
  80c540:	00800884 	movi	r2,34
  80c544:	18800015 	stw	r2,0(r3)
  80c548:	003fb306 	br	80c418 <_strtoll_r+0x198>
  80c54c:	a1000007 	ldb	r4,0(r20)
  80c550:	00801e04 	movi	r2,120
  80c554:	20800226 	beq	r4,r2,80c560 <_strtoll_r+0x2e0>
  80c558:	00801604 	movi	r2,88
  80c55c:	20bfc91e 	bne	r4,r2,80c484 <_strtoll_r+0x204>
  80c560:	a4c00047 	ldb	r19,1(r20)
  80c564:	05c00404 	movi	r23,16
  80c568:	b82b883a 	mov	r21,r23
  80c56c:	a5000084 	addi	r20,r20,2
  80c570:	002d883a 	mov	r22,zero
  80c574:	003f6606 	br	80c310 <_strtoll_r+0x90>
  80c578:	017fffc4 	movi	r5,-1
  80c57c:	01a00034 	movhi	r6,32768
  80c580:	31bfffc4 	addi	r6,r6,-1
  80c584:	003fed06 	br	80c53c <_strtoll_r+0x2bc>
  80c588:	05c00204 	movi	r23,8
  80c58c:	b82b883a 	mov	r21,r23
  80c590:	002d883a 	mov	r22,zero
  80c594:	003f5e06 	br	80c310 <_strtoll_r+0x90>

0080c598 <_strtoul_r>:
  80c598:	defff604 	addi	sp,sp,-40
  80c59c:	00802074 	movhi	r2,129
  80c5a0:	109b9b04 	addi	r2,r2,28268
  80c5a4:	dd000415 	stw	r20,16(sp)
  80c5a8:	15000017 	ldw	r20,0(r2)
  80c5ac:	ddc00715 	stw	r23,28(sp)
  80c5b0:	dd800615 	stw	r22,24(sp)
  80c5b4:	dd400515 	stw	r21,20(sp)
  80c5b8:	dc800215 	stw	r18,8(sp)
  80c5bc:	dc000015 	stw	r16,0(sp)
  80c5c0:	dfc00915 	stw	ra,36(sp)
  80c5c4:	df000815 	stw	fp,32(sp)
  80c5c8:	dcc00315 	stw	r19,12(sp)
  80c5cc:	dc400115 	stw	r17,4(sp)
  80c5d0:	282b883a 	mov	r21,r5
  80c5d4:	202f883a 	mov	r23,r4
  80c5d8:	302d883a 	mov	r22,r6
  80c5dc:	3825883a 	mov	r18,r7
  80c5e0:	2821883a 	mov	r16,r5
  80c5e4:	84400007 	ldb	r17,0(r16)
  80c5e8:	84000044 	addi	r16,r16,1
  80c5ec:	a447883a 	add	r3,r20,r17
  80c5f0:	18800003 	ldbu	r2,0(r3)
  80c5f4:	1080020c 	andi	r2,r2,8
  80c5f8:	103ffa1e 	bne	r2,zero,80c5e4 <_strtoul_r+0x4c>
  80c5fc:	00800b44 	movi	r2,45
  80c600:	88805626 	beq	r17,r2,80c75c <_strtoul_r+0x1c4>
  80c604:	00800ac4 	movi	r2,43
  80c608:	88805126 	beq	r17,r2,80c750 <_strtoul_r+0x1b8>
  80c60c:	0039883a 	mov	fp,zero
  80c610:	9007003a 	cmpeq	r3,r18,zero
  80c614:	18003b1e 	bne	r3,zero,80c704 <_strtoul_r+0x16c>
  80c618:	00800404 	movi	r2,16
  80c61c:	90803926 	beq	r18,r2,80c704 <_strtoul_r+0x16c>
  80c620:	013fffc4 	movi	r4,-1
  80c624:	900b883a 	mov	r5,r18
  80c628:	080fb400 	call	80fb40 <__udivsi3>
  80c62c:	013fffc4 	movi	r4,-1
  80c630:	900b883a 	mov	r5,r18
  80c634:	1027883a 	mov	r19,r2
  80c638:	080fb480 	call	80fb48 <__umodsi3>
  80c63c:	1011883a 	mov	r8,r2
  80c640:	900f883a 	mov	r7,r18
  80c644:	a445883a 	add	r2,r20,r17
  80c648:	11000003 	ldbu	r4,0(r2)
  80c64c:	000b883a 	mov	r5,zero
  80c650:	000d883a 	mov	r6,zero
  80c654:	20c0010c 	andi	r3,r4,4
  80c658:	18000e26 	beq	r3,zero,80c694 <_strtoul_r+0xfc>
  80c65c:	88fff404 	addi	r3,r17,-48
  80c660:	1c80140e 	bge	r3,r18,80c6b4 <_strtoul_r+0x11c>
  80c664:	30003316 	blt	r6,zero,80c734 <_strtoul_r+0x19c>
  80c668:	99403236 	bltu	r19,r5,80c734 <_strtoul_r+0x19c>
  80c66c:	2cc03026 	beq	r5,r19,80c730 <_strtoul_r+0x198>
  80c670:	29c5383a 	mul	r2,r5,r7
  80c674:	01800044 	movi	r6,1
  80c678:	10cb883a 	add	r5,r2,r3
  80c67c:	84400007 	ldb	r17,0(r16)
  80c680:	84000044 	addi	r16,r16,1
  80c684:	a445883a 	add	r2,r20,r17
  80c688:	11000003 	ldbu	r4,0(r2)
  80c68c:	20c0010c 	andi	r3,r4,4
  80c690:	183ff21e 	bne	r3,zero,80c65c <_strtoul_r+0xc4>
  80c694:	208000cc 	andi	r2,r4,3
  80c698:	10000626 	beq	r2,zero,80c6b4 <_strtoul_r+0x11c>
  80c69c:	2080004c 	andi	r2,r4,1
  80c6a0:	1005003a 	cmpeq	r2,r2,zero
  80c6a4:	1000251e 	bne	r2,zero,80c73c <_strtoul_r+0x1a4>
  80c6a8:	00800dc4 	movi	r2,55
  80c6ac:	8887c83a 	sub	r3,r17,r2
  80c6b0:	1cbfec16 	blt	r3,r18,80c664 <_strtoul_r+0xcc>
  80c6b4:	3000400e 	bge	r6,zero,80c7b8 <_strtoul_r+0x220>
  80c6b8:	00800884 	movi	r2,34
  80c6bc:	017fffc4 	movi	r5,-1
  80c6c0:	b8800015 	stw	r2,0(r23)
  80c6c4:	b0000226 	beq	r22,zero,80c6d0 <_strtoul_r+0x138>
  80c6c8:	30001f1e 	bne	r6,zero,80c748 <_strtoul_r+0x1b0>
  80c6cc:	b5400015 	stw	r21,0(r22)
  80c6d0:	2805883a 	mov	r2,r5
  80c6d4:	dfc00917 	ldw	ra,36(sp)
  80c6d8:	df000817 	ldw	fp,32(sp)
  80c6dc:	ddc00717 	ldw	r23,28(sp)
  80c6e0:	dd800617 	ldw	r22,24(sp)
  80c6e4:	dd400517 	ldw	r21,20(sp)
  80c6e8:	dd000417 	ldw	r20,16(sp)
  80c6ec:	dcc00317 	ldw	r19,12(sp)
  80c6f0:	dc800217 	ldw	r18,8(sp)
  80c6f4:	dc400117 	ldw	r17,4(sp)
  80c6f8:	dc000017 	ldw	r16,0(sp)
  80c6fc:	dec00a04 	addi	sp,sp,40
  80c700:	f800283a 	ret
  80c704:	00800c04 	movi	r2,48
  80c708:	88801826 	beq	r17,r2,80c76c <_strtoul_r+0x1d4>
  80c70c:	183fc426 	beq	r3,zero,80c620 <_strtoul_r+0x88>
  80c710:	00800c04 	movi	r2,48
  80c714:	88802226 	beq	r17,r2,80c7a0 <_strtoul_r+0x208>
  80c718:	04800284 	movi	r18,10
  80c71c:	900f883a 	mov	r7,r18
  80c720:	04c666b4 	movhi	r19,6554
  80c724:	9ce66644 	addi	r19,r19,-26215
  80c728:	02000144 	movi	r8,5
  80c72c:	003fc506 	br	80c644 <_strtoul_r+0xac>
  80c730:	40ffcf0e 	bge	r8,r3,80c670 <_strtoul_r+0xd8>
  80c734:	01bfffc4 	movi	r6,-1
  80c738:	003fd006 	br	80c67c <_strtoul_r+0xe4>
  80c73c:	008015c4 	movi	r2,87
  80c740:	8887c83a 	sub	r3,r17,r2
  80c744:	003fda06 	br	80c6b0 <_strtoul_r+0x118>
  80c748:	857fffc4 	addi	r21,r16,-1
  80c74c:	003fdf06 	br	80c6cc <_strtoul_r+0x134>
  80c750:	84400007 	ldb	r17,0(r16)
  80c754:	84000044 	addi	r16,r16,1
  80c758:	003fac06 	br	80c60c <_strtoul_r+0x74>
  80c75c:	84400007 	ldb	r17,0(r16)
  80c760:	07000044 	movi	fp,1
  80c764:	84000044 	addi	r16,r16,1
  80c768:	003fa906 	br	80c610 <_strtoul_r+0x78>
  80c76c:	81000007 	ldb	r4,0(r16)
  80c770:	00801e04 	movi	r2,120
  80c774:	20800226 	beq	r4,r2,80c780 <_strtoul_r+0x1e8>
  80c778:	00801604 	movi	r2,88
  80c77c:	20bfe31e 	bne	r4,r2,80c70c <_strtoul_r+0x174>
  80c780:	84400047 	ldb	r17,1(r16)
  80c784:	04800404 	movi	r18,16
  80c788:	84000084 	addi	r16,r16,2
  80c78c:	900f883a 	mov	r7,r18
  80c790:	04c40034 	movhi	r19,4096
  80c794:	9cffffc4 	addi	r19,r19,-1
  80c798:	020003c4 	movi	r8,15
  80c79c:	003fa906 	br	80c644 <_strtoul_r+0xac>
  80c7a0:	04800204 	movi	r18,8
  80c7a4:	900f883a 	mov	r7,r18
  80c7a8:	04c80034 	movhi	r19,8192
  80c7ac:	9cffffc4 	addi	r19,r19,-1
  80c7b0:	020001c4 	movi	r8,7
  80c7b4:	003fa306 	br	80c644 <_strtoul_r+0xac>
  80c7b8:	e005003a 	cmpeq	r2,fp,zero
  80c7bc:	103fc11e 	bne	r2,zero,80c6c4 <_strtoul_r+0x12c>
  80c7c0:	014bc83a 	sub	r5,zero,r5
  80c7c4:	003fbf06 	br	80c6c4 <_strtoul_r+0x12c>

0080c7c8 <strtoul>:
  80c7c8:	00802074 	movhi	r2,129
  80c7cc:	109b9704 	addi	r2,r2,28252
  80c7d0:	2013883a 	mov	r9,r4
  80c7d4:	11000017 	ldw	r4,0(r2)
  80c7d8:	2805883a 	mov	r2,r5
  80c7dc:	300f883a 	mov	r7,r6
  80c7e0:	480b883a 	mov	r5,r9
  80c7e4:	100d883a 	mov	r6,r2
  80c7e8:	080c5981 	jmpi	80c598 <_strtoul_r>

0080c7ec <_strtoull_r>:
  80c7ec:	defff104 	addi	sp,sp,-60
  80c7f0:	00802074 	movhi	r2,129
  80c7f4:	109b9b04 	addi	r2,r2,28268
  80c7f8:	df000d15 	stw	fp,52(sp)
  80c7fc:	17000017 	ldw	fp,0(r2)
  80c800:	ddc00c15 	stw	r23,48(sp)
  80c804:	dcc00815 	stw	r19,32(sp)
  80c808:	dfc00e15 	stw	ra,56(sp)
  80c80c:	dd800b15 	stw	r22,44(sp)
  80c810:	dd400a15 	stw	r21,40(sp)
  80c814:	dd000915 	stw	r20,36(sp)
  80c818:	dc800715 	stw	r18,28(sp)
  80c81c:	dc400615 	stw	r17,24(sp)
  80c820:	dc000515 	stw	r16,20(sp)
  80c824:	d9400215 	stw	r5,8(sp)
  80c828:	d9000115 	stw	r4,4(sp)
  80c82c:	d9800315 	stw	r6,12(sp)
  80c830:	382f883a 	mov	r23,r7
  80c834:	2827883a 	mov	r19,r5
  80c838:	9d000007 	ldb	r20,0(r19)
  80c83c:	9cc00044 	addi	r19,r19,1
  80c840:	e507883a 	add	r3,fp,r20
  80c844:	18800003 	ldbu	r2,0(r3)
  80c848:	1080020c 	andi	r2,r2,8
  80c84c:	103ffa1e 	bne	r2,zero,80c838 <_strtoull_r+0x4c>
  80c850:	00800b44 	movi	r2,45
  80c854:	a0807a26 	beq	r20,r2,80ca40 <_strtoull_r+0x254>
  80c858:	00800ac4 	movi	r2,43
  80c85c:	a0807526 	beq	r20,r2,80ca34 <_strtoull_r+0x248>
  80c860:	d8000015 	stw	zero,0(sp)
  80c864:	b807003a 	cmpeq	r3,r23,zero
  80c868:	18005a1e 	bne	r3,zero,80c9d4 <_strtoull_r+0x1e8>
  80c86c:	00800404 	movi	r2,16
  80c870:	b8805826 	beq	r23,r2,80c9d4 <_strtoull_r+0x1e8>
  80c874:	b82dd7fa 	srai	r22,r23,31
  80c878:	043fffc4 	movi	r16,-1
  80c87c:	8009883a 	mov	r4,r16
  80c880:	800b883a 	mov	r5,r16
  80c884:	b80d883a 	mov	r6,r23
  80c888:	b00f883a 	mov	r7,r22
  80c88c:	080dae80 	call	80dae8 <__udivdi3>
  80c890:	8009883a 	mov	r4,r16
  80c894:	800b883a 	mov	r5,r16
  80c898:	b80d883a 	mov	r6,r23
  80c89c:	b00f883a 	mov	r7,r22
  80c8a0:	1023883a 	mov	r17,r2
  80c8a4:	1825883a 	mov	r18,r3
  80c8a8:	080e0c40 	call	80e0c4 <__umoddi3>
  80c8ac:	b82b883a 	mov	r21,r23
  80c8b0:	1019883a 	mov	r12,r2
  80c8b4:	e505883a 	add	r2,fp,r20
  80c8b8:	11000003 	ldbu	r4,0(r2)
  80c8bc:	0015883a 	mov	r10,zero
  80c8c0:	0017883a 	mov	r11,zero
  80c8c4:	20c0010c 	andi	r3,r4,4
  80c8c8:	000d883a 	mov	r6,zero
  80c8cc:	18001c26 	beq	r3,zero,80c940 <_strtoull_r+0x154>
  80c8d0:	a43ff404 	addi	r16,r20,-48
  80c8d4:	85c0220e 	bge	r16,r23,80c960 <_strtoull_r+0x174>
  80c8d8:	30003c16 	blt	r6,zero,80c9cc <_strtoull_r+0x1e0>
  80c8dc:	92c03b36 	bltu	r18,r11,80c9cc <_strtoull_r+0x1e0>
  80c8e0:	5c803926 	beq	r11,r18,80c9c8 <_strtoull_r+0x1dc>
  80c8e4:	54404c26 	beq	r10,r17,80ca18 <_strtoull_r+0x22c>
  80c8e8:	580b883a 	mov	r5,r11
  80c8ec:	5009883a 	mov	r4,r10
  80c8f0:	a80d883a 	mov	r6,r21
  80c8f4:	b00f883a 	mov	r7,r22
  80c8f8:	db000415 	stw	r12,16(sp)
  80c8fc:	080d9ac0 	call	80d9ac <__muldi3>
  80c900:	8013d7fa 	srai	r9,r16,31
  80c904:	100d883a 	mov	r6,r2
  80c908:	1405883a 	add	r2,r2,r16
  80c90c:	118d803a 	cmpltu	r6,r2,r6
  80c910:	1a47883a 	add	r3,r3,r9
  80c914:	db000417 	ldw	r12,16(sp)
  80c918:	30cd883a 	add	r6,r6,r3
  80c91c:	3017883a 	mov	r11,r6
  80c920:	1015883a 	mov	r10,r2
  80c924:	01800044 	movi	r6,1
  80c928:	9d000007 	ldb	r20,0(r19)
  80c92c:	9cc00044 	addi	r19,r19,1
  80c930:	e505883a 	add	r2,fp,r20
  80c934:	11000003 	ldbu	r4,0(r2)
  80c938:	20c0010c 	andi	r3,r4,4
  80c93c:	183fe41e 	bne	r3,zero,80c8d0 <_strtoull_r+0xe4>
  80c940:	208000cc 	andi	r2,r4,3
  80c944:	10000626 	beq	r2,zero,80c960 <_strtoull_r+0x174>
  80c948:	2080004c 	andi	r2,r4,1
  80c94c:	1005003a 	cmpeq	r2,r2,zero
  80c950:	10002e1e 	bne	r2,zero,80ca0c <_strtoull_r+0x220>
  80c954:	02000dc4 	movi	r8,55
  80c958:	a221c83a 	sub	r16,r20,r8
  80c95c:	85ffde16 	blt	r16,r23,80c8d8 <_strtoull_r+0xec>
  80c960:	3000530e 	bge	r6,zero,80cab0 <_strtoull_r+0x2c4>
  80c964:	d8c00117 	ldw	r3,4(sp)
  80c968:	02bfffc4 	movi	r10,-1
  80c96c:	00800884 	movi	r2,34
  80c970:	5017883a 	mov	r11,r10
  80c974:	18800015 	stw	r2,0(r3)
  80c978:	d8800317 	ldw	r2,12(sp)
  80c97c:	10000426 	beq	r2,zero,80c990 <_strtoull_r+0x1a4>
  80c980:	3000291e 	bne	r6,zero,80ca28 <_strtoull_r+0x23c>
  80c984:	d8800217 	ldw	r2,8(sp)
  80c988:	d8c00317 	ldw	r3,12(sp)
  80c98c:	18800015 	stw	r2,0(r3)
  80c990:	5005883a 	mov	r2,r10
  80c994:	5807883a 	mov	r3,r11
  80c998:	dfc00e17 	ldw	ra,56(sp)
  80c99c:	df000d17 	ldw	fp,52(sp)
  80c9a0:	ddc00c17 	ldw	r23,48(sp)
  80c9a4:	dd800b17 	ldw	r22,44(sp)
  80c9a8:	dd400a17 	ldw	r21,40(sp)
  80c9ac:	dd000917 	ldw	r20,36(sp)
  80c9b0:	dcc00817 	ldw	r19,32(sp)
  80c9b4:	dc800717 	ldw	r18,28(sp)
  80c9b8:	dc400617 	ldw	r17,24(sp)
  80c9bc:	dc000517 	ldw	r16,20(sp)
  80c9c0:	dec00f04 	addi	sp,sp,60
  80c9c4:	f800283a 	ret
  80c9c8:	8abfc62e 	bgeu	r17,r10,80c8e4 <_strtoull_r+0xf8>
  80c9cc:	01bfffc4 	movi	r6,-1
  80c9d0:	003fd506 	br	80c928 <_strtoull_r+0x13c>
  80c9d4:	00800c04 	movi	r2,48
  80c9d8:	a0801e26 	beq	r20,r2,80ca54 <_strtoull_r+0x268>
  80c9dc:	183fa526 	beq	r3,zero,80c874 <_strtoull_r+0x88>
  80c9e0:	00800c04 	movi	r2,48
  80c9e4:	a0802a26 	beq	r20,r2,80ca90 <_strtoull_r+0x2a4>
  80c9e8:	05c00284 	movi	r23,10
  80c9ec:	b82b883a 	mov	r21,r23
  80c9f0:	046666b4 	movhi	r17,39322
  80c9f4:	8c666644 	addi	r17,r17,-26215
  80c9f8:	002d883a 	mov	r22,zero
  80c9fc:	048666b4 	movhi	r18,6554
  80ca00:	94a66644 	addi	r18,r18,-26215
  80ca04:	03000144 	movi	r12,5
  80ca08:	003faa06 	br	80c8b4 <_strtoull_r+0xc8>
  80ca0c:	020015c4 	movi	r8,87
  80ca10:	a221c83a 	sub	r16,r20,r8
  80ca14:	003fd106 	br	80c95c <_strtoull_r+0x170>
  80ca18:	5cbfb31e 	bne	r11,r18,80c8e8 <_strtoull_r+0xfc>
  80ca1c:	643fb20e 	bge	r12,r16,80c8e8 <_strtoull_r+0xfc>
  80ca20:	01bfffc4 	movi	r6,-1
  80ca24:	003fc006 	br	80c928 <_strtoull_r+0x13c>
  80ca28:	9cffffc4 	addi	r19,r19,-1
  80ca2c:	dcc00215 	stw	r19,8(sp)
  80ca30:	003fd406 	br	80c984 <_strtoull_r+0x198>
  80ca34:	9d000007 	ldb	r20,0(r19)
  80ca38:	9cc00044 	addi	r19,r19,1
  80ca3c:	003f8806 	br	80c860 <_strtoull_r+0x74>
  80ca40:	9d000007 	ldb	r20,0(r19)
  80ca44:	00800044 	movi	r2,1
  80ca48:	9cc00044 	addi	r19,r19,1
  80ca4c:	d8800015 	stw	r2,0(sp)
  80ca50:	003f8406 	br	80c864 <_strtoull_r+0x78>
  80ca54:	99000007 	ldb	r4,0(r19)
  80ca58:	00801e04 	movi	r2,120
  80ca5c:	20800226 	beq	r4,r2,80ca68 <_strtoull_r+0x27c>
  80ca60:	00801604 	movi	r2,88
  80ca64:	20bfdd1e 	bne	r4,r2,80c9dc <_strtoull_r+0x1f0>
  80ca68:	9d000047 	ldb	r20,1(r19)
  80ca6c:	05c00404 	movi	r23,16
  80ca70:	b82b883a 	mov	r21,r23
  80ca74:	047fffc4 	movi	r17,-1
  80ca78:	9cc00084 	addi	r19,r19,2
  80ca7c:	002d883a 	mov	r22,zero
  80ca80:	04840034 	movhi	r18,4096
  80ca84:	94bfffc4 	addi	r18,r18,-1
  80ca88:	030003c4 	movi	r12,15
  80ca8c:	003f8906 	br	80c8b4 <_strtoull_r+0xc8>
  80ca90:	05c00204 	movi	r23,8
  80ca94:	b82b883a 	mov	r21,r23
  80ca98:	047fffc4 	movi	r17,-1
  80ca9c:	002d883a 	mov	r22,zero
  80caa0:	04880034 	movhi	r18,8192
  80caa4:	94bfffc4 	addi	r18,r18,-1
  80caa8:	030001c4 	movi	r12,7
  80caac:	003f8106 	br	80c8b4 <_strtoull_r+0xc8>
  80cab0:	d8c00017 	ldw	r3,0(sp)
  80cab4:	1805003a 	cmpeq	r2,r3,zero
  80cab8:	103faf1e 	bne	r2,zero,80c978 <_strtoull_r+0x18c>
  80cabc:	0009883a 	mov	r4,zero
  80cac0:	2285c83a 	sub	r2,r4,r10
  80cac4:	02c7c83a 	sub	r3,zero,r11
  80cac8:	2089803a 	cmpltu	r4,r4,r2
  80cacc:	1909c83a 	sub	r4,r3,r4
  80cad0:	1015883a 	mov	r10,r2
  80cad4:	2017883a 	mov	r11,r4
  80cad8:	003fa706 	br	80c978 <_strtoull_r+0x18c>

0080cadc <__submore>:
  80cadc:	defffa04 	addi	sp,sp,-24
  80cae0:	28c00c17 	ldw	r3,48(r5)
  80cae4:	dc800215 	stw	r18,8(sp)
  80cae8:	2825883a 	mov	r18,r5
  80caec:	dc000015 	stw	r16,0(sp)
  80caf0:	90801004 	addi	r2,r18,64
  80caf4:	04010004 	movi	r16,1024
  80caf8:	dfc00515 	stw	ra,20(sp)
  80cafc:	dd000415 	stw	r20,16(sp)
  80cb00:	dcc00315 	stw	r19,12(sp)
  80cb04:	dc400115 	stw	r17,4(sp)
  80cb08:	800b883a 	mov	r5,r16
  80cb0c:	18801b26 	beq	r3,r2,80cb7c <__submore+0xa0>
  80cb10:	94400d17 	ldw	r17,52(r18)
  80cb14:	180b883a 	mov	r5,r3
  80cb18:	8c69883a 	add	r20,r17,r17
  80cb1c:	a00d883a 	mov	r6,r20
  80cb20:	08034b40 	call	8034b4 <_realloc_r>
  80cb24:	1467883a 	add	r19,r2,r17
  80cb28:	1021883a 	mov	r16,r2
  80cb2c:	880d883a 	mov	r6,r17
  80cb30:	9809883a 	mov	r4,r19
  80cb34:	100b883a 	mov	r5,r2
  80cb38:	10000e26 	beq	r2,zero,80cb74 <__submore+0x98>
  80cb3c:	08031ac0 	call	8031ac <memcpy>
  80cb40:	000d883a 	mov	r6,zero
  80cb44:	95000d15 	stw	r20,52(r18)
  80cb48:	94c00015 	stw	r19,0(r18)
  80cb4c:	94000c15 	stw	r16,48(r18)
  80cb50:	3005883a 	mov	r2,r6
  80cb54:	dfc00517 	ldw	ra,20(sp)
  80cb58:	dd000417 	ldw	r20,16(sp)
  80cb5c:	dcc00317 	ldw	r19,12(sp)
  80cb60:	dc800217 	ldw	r18,8(sp)
  80cb64:	dc400117 	ldw	r17,4(sp)
  80cb68:	dc000017 	ldw	r16,0(sp)
  80cb6c:	dec00604 	addi	sp,sp,24
  80cb70:	f800283a 	ret
  80cb74:	01bfffc4 	movi	r6,-1
  80cb78:	003ff506 	br	80cb50 <__submore+0x74>
  80cb7c:	08029880 	call	802988 <_malloc_r>
  80cb80:	1009883a 	mov	r4,r2
  80cb84:	1140ff44 	addi	r5,r2,1021
  80cb88:	000d883a 	mov	r6,zero
  80cb8c:	103ff926 	beq	r2,zero,80cb74 <__submore+0x98>
  80cb90:	90801083 	ldbu	r2,66(r18)
  80cb94:	94000d15 	stw	r16,52(r18)
  80cb98:	91000c15 	stw	r4,48(r18)
  80cb9c:	28800085 	stb	r2,2(r5)
  80cba0:	90c01043 	ldbu	r3,65(r18)
  80cba4:	28c00045 	stb	r3,1(r5)
  80cba8:	90801003 	ldbu	r2,64(r18)
  80cbac:	2080ff45 	stb	r2,1021(r4)
  80cbb0:	91400015 	stw	r5,0(r18)
  80cbb4:	003fe606 	br	80cb50 <__submore+0x74>

0080cbb8 <_ungetc_r>:
  80cbb8:	defffc04 	addi	sp,sp,-16
  80cbbc:	00bfffc4 	movi	r2,-1
  80cbc0:	dc400215 	stw	r17,8(sp)
  80cbc4:	dc000115 	stw	r16,4(sp)
  80cbc8:	dfc00315 	stw	ra,12(sp)
  80cbcc:	2821883a 	mov	r16,r5
  80cbd0:	2023883a 	mov	r17,r4
  80cbd4:	28801826 	beq	r5,r2,80cc38 <_ungetc_r+0x80>
  80cbd8:	20000226 	beq	r4,zero,80cbe4 <_ungetc_r+0x2c>
  80cbdc:	20800e17 	ldw	r2,56(r4)
  80cbe0:	10001b26 	beq	r2,zero,80cc50 <_ungetc_r+0x98>
  80cbe4:	3100030b 	ldhu	r4,12(r6)
  80cbe8:	00bff7c4 	movi	r2,-33
  80cbec:	2084703a 	and	r2,r4,r2
  80cbf0:	117fffcc 	andi	r5,r2,65535
  80cbf4:	28c0010c 	andi	r3,r5,4
  80cbf8:	1009883a 	mov	r4,r2
  80cbfc:	3080030d 	sth	r2,12(r6)
  80cc00:	18003526 	beq	r3,zero,80ccd8 <_ungetc_r+0x120>
  80cc04:	30800c17 	ldw	r2,48(r6)
  80cc08:	84003fcc 	andi	r16,r16,255
  80cc0c:	10001426 	beq	r2,zero,80cc60 <_ungetc_r+0xa8>
  80cc10:	30c00117 	ldw	r3,4(r6)
  80cc14:	30800d17 	ldw	r2,52(r6)
  80cc18:	1880380e 	bge	r3,r2,80ccfc <_ungetc_r+0x144>
  80cc1c:	30c00017 	ldw	r3,0(r6)
  80cc20:	19ffffc4 	addi	r7,r3,-1
  80cc24:	31c00015 	stw	r7,0(r6)
  80cc28:	1c3fffc5 	stb	r16,-1(r3)
  80cc2c:	30800117 	ldw	r2,4(r6)
  80cc30:	10800044 	addi	r2,r2,1
  80cc34:	30800115 	stw	r2,4(r6)
  80cc38:	8005883a 	mov	r2,r16
  80cc3c:	dfc00317 	ldw	ra,12(sp)
  80cc40:	dc400217 	ldw	r17,8(sp)
  80cc44:	dc000117 	ldw	r16,4(sp)
  80cc48:	dec00404 	addi	sp,sp,16
  80cc4c:	f800283a 	ret
  80cc50:	d9800015 	stw	r6,0(sp)
  80cc54:	080146c0 	call	80146c <__sinit>
  80cc58:	d9800017 	ldw	r6,0(sp)
  80cc5c:	003fe106 	br	80cbe4 <_ungetc_r+0x2c>
  80cc60:	30800417 	ldw	r2,16(r6)
  80cc64:	10002326 	beq	r2,zero,80ccf4 <_ungetc_r+0x13c>
  80cc68:	31c00017 	ldw	r7,0(r6)
  80cc6c:	11c0022e 	bgeu	r2,r7,80cc78 <_ungetc_r+0xc0>
  80cc70:	38bfffc3 	ldbu	r2,-1(r7)
  80cc74:	80801226 	beq	r16,r2,80ccc0 <_ungetc_r+0x108>
  80cc78:	30c00117 	ldw	r3,4(r6)
  80cc7c:	00800044 	movi	r2,1
  80cc80:	30800115 	stw	r2,4(r6)
  80cc84:	008000c4 	movi	r2,3
  80cc88:	31001004 	addi	r4,r6,64
  80cc8c:	31401084 	addi	r5,r6,66
  80cc90:	30800d15 	stw	r2,52(r6)
  80cc94:	8005883a 	mov	r2,r16
  80cc98:	30c00f15 	stw	r3,60(r6)
  80cc9c:	31c00e15 	stw	r7,56(r6)
  80cca0:	31000c15 	stw	r4,48(r6)
  80cca4:	31400015 	stw	r5,0(r6)
  80cca8:	34001085 	stb	r16,66(r6)
  80ccac:	dfc00317 	ldw	ra,12(sp)
  80ccb0:	dc400217 	ldw	r17,8(sp)
  80ccb4:	dc000117 	ldw	r16,4(sp)
  80ccb8:	dec00404 	addi	sp,sp,16
  80ccbc:	f800283a 	ret
  80ccc0:	30800117 	ldw	r2,4(r6)
  80ccc4:	39ffffc4 	addi	r7,r7,-1
  80ccc8:	31c00015 	stw	r7,0(r6)
  80cccc:	10800044 	addi	r2,r2,1
  80ccd0:	30800115 	stw	r2,4(r6)
  80ccd4:	003fd806 	br	80cc38 <_ungetc_r+0x80>
  80ccd8:	2880040c 	andi	r2,r5,16
  80ccdc:	10000d26 	beq	r2,zero,80cd14 <_ungetc_r+0x15c>
  80cce0:	2880020c 	andi	r2,r5,8
  80cce4:	10000d1e 	bne	r2,zero,80cd1c <_ungetc_r+0x164>
  80cce8:	20800114 	ori	r2,r4,4
  80ccec:	3080030d 	sth	r2,12(r6)
  80ccf0:	003fc406 	br	80cc04 <_ungetc_r+0x4c>
  80ccf4:	31c00017 	ldw	r7,0(r6)
  80ccf8:	003fdf06 	br	80cc78 <_ungetc_r+0xc0>
  80ccfc:	300b883a 	mov	r5,r6
  80cd00:	8809883a 	mov	r4,r17
  80cd04:	d9800015 	stw	r6,0(sp)
  80cd08:	080cadc0 	call	80cadc <__submore>
  80cd0c:	d9800017 	ldw	r6,0(sp)
  80cd10:	103fc226 	beq	r2,zero,80cc1c <_ungetc_r+0x64>
  80cd14:	043fffc4 	movi	r16,-1
  80cd18:	003fc706 	br	80cc38 <_ungetc_r+0x80>
  80cd1c:	300b883a 	mov	r5,r6
  80cd20:	8809883a 	mov	r4,r17
  80cd24:	d9800015 	stw	r6,0(sp)
  80cd28:	08010ac0 	call	8010ac <_fflush_r>
  80cd2c:	d9800017 	ldw	r6,0(sp)
  80cd30:	103ff81e 	bne	r2,zero,80cd14 <_ungetc_r+0x15c>
  80cd34:	3100030b 	ldhu	r4,12(r6)
  80cd38:	00bffdc4 	movi	r2,-9
  80cd3c:	30000215 	stw	zero,8(r6)
  80cd40:	2084703a 	and	r2,r4,r2
  80cd44:	1009883a 	mov	r4,r2
  80cd48:	3080030d 	sth	r2,12(r6)
  80cd4c:	30000615 	stw	zero,24(r6)
  80cd50:	003fe506 	br	80cce8 <_ungetc_r+0x130>

0080cd54 <ungetc>:
  80cd54:	01802074 	movhi	r6,129
  80cd58:	319b9704 	addi	r6,r6,28252
  80cd5c:	2007883a 	mov	r3,r4
  80cd60:	31000017 	ldw	r4,0(r6)
  80cd64:	280d883a 	mov	r6,r5
  80cd68:	180b883a 	mov	r5,r3
  80cd6c:	080cbb81 	jmpi	80cbb8 <_ungetc_r>

0080cd70 <_calloc_r>:
  80cd70:	298b383a 	mul	r5,r5,r6
  80cd74:	defffe04 	addi	sp,sp,-8
  80cd78:	dc000015 	stw	r16,0(sp)
  80cd7c:	dfc00115 	stw	ra,4(sp)
  80cd80:	08029880 	call	802988 <_malloc_r>
  80cd84:	1021883a 	mov	r16,r2
  80cd88:	01c00904 	movi	r7,36
  80cd8c:	10000d26 	beq	r2,zero,80cdc4 <_calloc_r+0x54>
  80cd90:	10ffff17 	ldw	r3,-4(r2)
  80cd94:	1009883a 	mov	r4,r2
  80cd98:	00bfff04 	movi	r2,-4
  80cd9c:	1886703a 	and	r3,r3,r2
  80cda0:	1887883a 	add	r3,r3,r2
  80cda4:	180d883a 	mov	r6,r3
  80cda8:	000b883a 	mov	r5,zero
  80cdac:	38c01736 	bltu	r7,r3,80ce0c <_calloc_r+0x9c>
  80cdb0:	008004c4 	movi	r2,19
  80cdb4:	10c00836 	bltu	r2,r3,80cdd8 <_calloc_r+0x68>
  80cdb8:	20000215 	stw	zero,8(r4)
  80cdbc:	20000015 	stw	zero,0(r4)
  80cdc0:	20000115 	stw	zero,4(r4)
  80cdc4:	8005883a 	mov	r2,r16
  80cdc8:	dfc00117 	ldw	ra,4(sp)
  80cdcc:	dc000017 	ldw	r16,0(sp)
  80cdd0:	dec00204 	addi	sp,sp,8
  80cdd4:	f800283a 	ret
  80cdd8:	008006c4 	movi	r2,27
  80cddc:	80000015 	stw	zero,0(r16)
  80cde0:	80000115 	stw	zero,4(r16)
  80cde4:	81000204 	addi	r4,r16,8
  80cde8:	10fff32e 	bgeu	r2,r3,80cdb8 <_calloc_r+0x48>
  80cdec:	80000215 	stw	zero,8(r16)
  80cdf0:	80000315 	stw	zero,12(r16)
  80cdf4:	81000404 	addi	r4,r16,16
  80cdf8:	19ffef1e 	bne	r3,r7,80cdb8 <_calloc_r+0x48>
  80cdfc:	81000604 	addi	r4,r16,24
  80ce00:	80000415 	stw	zero,16(r16)
  80ce04:	80000515 	stw	zero,20(r16)
  80ce08:	003feb06 	br	80cdb8 <_calloc_r+0x48>
  80ce0c:	080332c0 	call	80332c <memset>
  80ce10:	8005883a 	mov	r2,r16
  80ce14:	dfc00117 	ldw	ra,4(sp)
  80ce18:	dc000017 	ldw	r16,0(sp)
  80ce1c:	dec00204 	addi	sp,sp,8
  80ce20:	f800283a 	ret

0080ce24 <htinit>:
  80ce24:	28800003 	ldbu	r2,0(r5)
  80ce28:	10000626 	beq	r2,zero,80ce44 <htinit+0x20>
  80ce2c:	1105883a 	add	r2,r2,r4
  80ce30:	11800005 	stb	r6,0(r2)
  80ce34:	28800043 	ldbu	r2,1(r5)
  80ce38:	31800044 	addi	r6,r6,1
  80ce3c:	29400044 	addi	r5,r5,1
  80ce40:	103ffa1e 	bne	r2,zero,80ce2c <htinit+0x8>
  80ce44:	f800283a 	ret

0080ce48 <__hexdig_init>:
  80ce48:	defffd04 	addi	sp,sp,-12
  80ce4c:	dc400015 	stw	r17,0(sp)
  80ce50:	044020b4 	movhi	r17,130
  80ce54:	8c631004 	addi	r17,r17,-29632
  80ce58:	dcc00115 	stw	r19,4(sp)
  80ce5c:	8809883a 	mov	r4,r17
  80ce60:	04c00684 	movi	r19,26
  80ce64:	01402074 	movhi	r5,129
  80ce68:	29541504 	addi	r5,r5,20564
  80ce6c:	01800404 	movi	r6,16
  80ce70:	dfc00215 	stw	ra,8(sp)
  80ce74:	080ce240 	call	80ce24 <htinit>
  80ce78:	980d883a 	mov	r6,r19
  80ce7c:	8809883a 	mov	r4,r17
  80ce80:	01402074 	movhi	r5,129
  80ce84:	29541804 	addi	r5,r5,20576
  80ce88:	080ce240 	call	80ce24 <htinit>
  80ce8c:	8809883a 	mov	r4,r17
  80ce90:	980d883a 	mov	r6,r19
  80ce94:	01402074 	movhi	r5,129
  80ce98:	29541a04 	addi	r5,r5,20584
  80ce9c:	dfc00217 	ldw	ra,8(sp)
  80cea0:	dcc00117 	ldw	r19,4(sp)
  80cea4:	dc400017 	ldw	r17,0(sp)
  80cea8:	dec00304 	addi	sp,sp,12
  80ceac:	080ce241 	jmpi	80ce24 <htinit>

0080ceb0 <rshift>:
  80ceb0:	2807d17a 	srai	r3,r5,5
  80ceb4:	20800417 	ldw	r2,16(r4)
  80ceb8:	22400504 	addi	r9,r4,20
  80cebc:	480f883a 	mov	r7,r9
  80cec0:	1880190e 	bge	r3,r2,80cf28 <rshift+0x78>
  80cec4:	1085883a 	add	r2,r2,r2
  80cec8:	18c7883a 	add	r3,r3,r3
  80cecc:	1085883a 	add	r2,r2,r2
  80ced0:	18c7883a 	add	r3,r3,r3
  80ced4:	294007cc 	andi	r5,r5,31
  80ced8:	4891883a 	add	r8,r9,r2
  80cedc:	48cd883a 	add	r6,r9,r3
  80cee0:	28001726 	beq	r5,zero,80cf40 <rshift+0x90>
  80cee4:	30c00017 	ldw	r3,0(r6)
  80cee8:	00800804 	movi	r2,32
  80ceec:	31800104 	addi	r6,r6,4
  80cef0:	1155c83a 	sub	r10,r2,r5
  80cef4:	1946d83a 	srl	r3,r3,r5
  80cef8:	3200092e 	bgeu	r6,r8,80cf20 <rshift+0x70>
  80cefc:	30800017 	ldw	r2,0(r6)
  80cf00:	1284983a 	sll	r2,r2,r10
  80cf04:	10c4b03a 	or	r2,r2,r3
  80cf08:	38800015 	stw	r2,0(r7)
  80cf0c:	30c00017 	ldw	r3,0(r6)
  80cf10:	31800104 	addi	r6,r6,4
  80cf14:	39c00104 	addi	r7,r7,4
  80cf18:	1946d83a 	srl	r3,r3,r5
  80cf1c:	323ff736 	bltu	r6,r8,80cefc <rshift+0x4c>
  80cf20:	38c00015 	stw	r3,0(r7)
  80cf24:	18000c1e 	bne	r3,zero,80cf58 <rshift+0xa8>
  80cf28:	3a45c83a 	sub	r2,r7,r9
  80cf2c:	1005d0ba 	srai	r2,r2,2
  80cf30:	20800415 	stw	r2,16(r4)
  80cf34:	1000011e 	bne	r2,zero,80cf3c <rshift+0x8c>
  80cf38:	20000515 	stw	zero,20(r4)
  80cf3c:	f800283a 	ret
  80cf40:	323ff92e 	bgeu	r6,r8,80cf28 <rshift+0x78>
  80cf44:	30800017 	ldw	r2,0(r6)
  80cf48:	31800104 	addi	r6,r6,4
  80cf4c:	38800015 	stw	r2,0(r7)
  80cf50:	39c00104 	addi	r7,r7,4
  80cf54:	003ffa06 	br	80cf40 <rshift+0x90>
  80cf58:	39c00104 	addi	r7,r7,4
  80cf5c:	003ff206 	br	80cf28 <rshift+0x78>

0080cf60 <__gethex>:
  80cf60:	defff304 	addi	sp,sp,-52
  80cf64:	dd400815 	stw	r21,32(sp)
  80cf68:	dd000715 	stw	r20,28(sp)
  80cf6c:	dcc00615 	stw	r19,24(sp)
  80cf70:	dc400415 	stw	r17,16(sp)
  80cf74:	dfc00c15 	stw	ra,48(sp)
  80cf78:	df000b15 	stw	fp,44(sp)
  80cf7c:	ddc00a15 	stw	r23,40(sp)
  80cf80:	dd800915 	stw	r22,36(sp)
  80cf84:	dc800515 	stw	r18,20(sp)
  80cf88:	dc000315 	stw	r16,12(sp)
  80cf8c:	044020b4 	movhi	r17,130
  80cf90:	8c631004 	addi	r17,r17,-29632
  80cf94:	88800c03 	ldbu	r2,48(r17)
  80cf98:	202b883a 	mov	r21,r4
  80cf9c:	2827883a 	mov	r19,r5
  80cfa0:	3029883a 	mov	r20,r6
  80cfa4:	d9c00115 	stw	r7,4(sp)
  80cfa8:	10006e26 	beq	r2,zero,80d164 <__gethex+0x204>
  80cfac:	99800017 	ldw	r6,0(r19)
  80cfb0:	00800c04 	movi	r2,48
  80cfb4:	31000083 	ldbu	r4,2(r6)
  80cfb8:	30c00084 	addi	r3,r6,2
  80cfbc:	20806f1e 	bne	r4,r2,80d17c <__gethex+0x21c>
  80cfc0:	200b883a 	mov	r5,r4
  80cfc4:	3007883a 	mov	r3,r6
  80cfc8:	188000c3 	ldbu	r2,3(r3)
  80cfcc:	18c00044 	addi	r3,r3,1
  80cfd0:	1009883a 	mov	r4,r2
  80cfd4:	117ffc26 	beq	r2,r5,80cfc8 <__gethex+0x68>
  80cfd8:	1997c83a 	sub	r11,r3,r6
  80cfdc:	19400084 	addi	r5,r3,2
  80cfe0:	2445883a 	add	r2,r4,r17
  80cfe4:	10c00003 	ldbu	r3,0(r2)
  80cfe8:	18002d26 	beq	r3,zero,80d0a0 <__gethex+0x140>
  80cfec:	29000003 	ldbu	r4,0(r5)
  80cff0:	2825883a 	mov	r18,r5
  80cff4:	000d883a 	mov	r6,zero
  80cff8:	0013883a 	mov	r9,zero
  80cffc:	21003fcc 	andi	r4,r4,255
  80d000:	2445883a 	add	r2,r4,r17
  80d004:	10c00003 	ldbu	r3,0(r2)
  80d008:	18000526 	beq	r3,zero,80d020 <__gethex+0xc0>
  80d00c:	29400044 	addi	r5,r5,1
  80d010:	29000003 	ldbu	r4,0(r5)
  80d014:	2445883a 	add	r2,r4,r17
  80d018:	10c00003 	ldbu	r3,0(r2)
  80d01c:	183ffb1e 	bne	r3,zero,80d00c <__gethex+0xac>
  80d020:	00800b84 	movi	r2,46
  80d024:	20805826 	beq	r4,r2,80d188 <__gethex+0x228>
  80d028:	30007a26 	beq	r6,zero,80d214 <__gethex+0x2b4>
  80d02c:	2985c83a 	sub	r2,r5,r6
  80d030:	1085883a 	add	r2,r2,r2
  80d034:	1085883a 	add	r2,r2,r2
  80d038:	00adc83a 	sub	r22,zero,r2
  80d03c:	2821883a 	mov	r16,r5
  80d040:	80c00003 	ldbu	r3,0(r16)
  80d044:	00801404 	movi	r2,80
  80d048:	18801e26 	beq	r3,r2,80d0c4 <__gethex+0x164>
  80d04c:	00801c04 	movi	r2,112
  80d050:	18801c26 	beq	r3,r2,80d0c4 <__gethex+0x164>
  80d054:	800d883a 	mov	r6,r16
  80d058:	4805003a 	cmpeq	r2,r9,zero
  80d05c:	99800015 	stw	r6,0(r19)
  80d060:	1000861e 	bne	r2,zero,80d27c <__gethex+0x31c>
  80d064:	58003d26 	beq	r11,zero,80d15c <__gethex+0x1fc>
  80d068:	0025883a 	mov	r18,zero
  80d06c:	9005883a 	mov	r2,r18
  80d070:	dfc00c17 	ldw	ra,48(sp)
  80d074:	df000b17 	ldw	fp,44(sp)
  80d078:	ddc00a17 	ldw	r23,40(sp)
  80d07c:	dd800917 	ldw	r22,36(sp)
  80d080:	dd400817 	ldw	r21,32(sp)
  80d084:	dd000717 	ldw	r20,28(sp)
  80d088:	dcc00617 	ldw	r19,24(sp)
  80d08c:	dc800517 	ldw	r18,20(sp)
  80d090:	dc400417 	ldw	r17,16(sp)
  80d094:	dc000317 	ldw	r16,12(sp)
  80d098:	dec00d04 	addi	sp,sp,52
  80d09c:	f800283a 	ret
  80d0a0:	00800b84 	movi	r2,46
  80d0a4:	20804a26 	beq	r4,r2,80d1d0 <__gethex+0x270>
  80d0a8:	2821883a 	mov	r16,r5
  80d0ac:	80c00003 	ldbu	r3,0(r16)
  80d0b0:	00801404 	movi	r2,80
  80d0b4:	2825883a 	mov	r18,r5
  80d0b8:	02400044 	movi	r9,1
  80d0bc:	002d883a 	mov	r22,zero
  80d0c0:	18bfe21e 	bne	r3,r2,80d04c <__gethex+0xec>
  80d0c4:	80c00043 	ldbu	r3,1(r16)
  80d0c8:	00800ac4 	movi	r2,43
  80d0cc:	81000044 	addi	r4,r16,1
  80d0d0:	18804a26 	beq	r3,r2,80d1fc <__gethex+0x29c>
  80d0d4:	00800b44 	movi	r2,45
  80d0d8:	18804c26 	beq	r3,r2,80d20c <__gethex+0x2ac>
  80d0dc:	0015883a 	mov	r10,zero
  80d0e0:	1c45883a 	add	r2,r3,r17
  80d0e4:	10800003 	ldbu	r2,0(r2)
  80d0e8:	103fda26 	beq	r2,zero,80d054 <__gethex+0xf4>
  80d0ec:	02000644 	movi	r8,25
  80d0f0:	40bfd816 	blt	r8,r2,80d054 <__gethex+0xf4>
  80d0f4:	20c00043 	ldbu	r3,1(r4)
  80d0f8:	11fffc04 	addi	r7,r2,-16
  80d0fc:	008020b4 	movhi	r2,130
  80d100:	10a31004 	addi	r2,r2,-29632
  80d104:	1887883a 	add	r3,r3,r2
  80d108:	18800003 	ldbu	r2,0(r3)
  80d10c:	21800044 	addi	r6,r4,1
  80d110:	10000d26 	beq	r2,zero,80d148 <__gethex+0x1e8>
  80d114:	100b883a 	mov	r5,r2
  80d118:	4080020e 	bge	r8,r2,80d124 <__gethex+0x1c4>
  80d11c:	00000a06 	br	80d148 <__gethex+0x1e8>
  80d120:	41000916 	blt	r8,r4,80d148 <__gethex+0x1e8>
  80d124:	31800044 	addi	r6,r6,1
  80d128:	30800003 	ldbu	r2,0(r6)
  80d12c:	38c002a4 	muli	r3,r7,10
  80d130:	1445883a 	add	r2,r2,r17
  80d134:	11000003 	ldbu	r4,0(r2)
  80d138:	1947883a 	add	r3,r3,r5
  80d13c:	19fffc04 	addi	r7,r3,-16
  80d140:	200b883a 	mov	r5,r4
  80d144:	203ff61e 	bne	r4,zero,80d120 <__gethex+0x1c0>
  80d148:	5005003a 	cmpeq	r2,r10,zero
  80d14c:	1000011e 	bne	r2,zero,80d154 <__gethex+0x1f4>
  80d150:	01cfc83a 	sub	r7,zero,r7
  80d154:	b1ed883a 	add	r22,r22,r7
  80d158:	003fbf06 	br	80d058 <__gethex+0xf8>
  80d15c:	04800184 	movi	r18,6
  80d160:	003fc206 	br	80d06c <__gethex+0x10c>
  80d164:	080ce480 	call	80ce48 <__hexdig_init>
  80d168:	99800017 	ldw	r6,0(r19)
  80d16c:	00800c04 	movi	r2,48
  80d170:	31000083 	ldbu	r4,2(r6)
  80d174:	30c00084 	addi	r3,r6,2
  80d178:	20bf9126 	beq	r4,r2,80cfc0 <__gethex+0x60>
  80d17c:	180b883a 	mov	r5,r3
  80d180:	0017883a 	mov	r11,zero
  80d184:	003f9606 	br	80cfe0 <__gethex+0x80>
  80d188:	303fa81e 	bne	r6,zero,80d02c <__gethex+0xcc>
  80d18c:	29400044 	addi	r5,r5,1
  80d190:	28800003 	ldbu	r2,0(r5)
  80d194:	1445883a 	add	r2,r2,r17
  80d198:	10c00003 	ldbu	r3,0(r2)
  80d19c:	1800ad26 	beq	r3,zero,80d454 <__gethex+0x4f4>
  80d1a0:	2809883a 	mov	r4,r5
  80d1a4:	21000044 	addi	r4,r4,1
  80d1a8:	20800003 	ldbu	r2,0(r4)
  80d1ac:	1445883a 	add	r2,r2,r17
  80d1b0:	10c00003 	ldbu	r3,0(r2)
  80d1b4:	183ffb1e 	bne	r3,zero,80d1a4 <__gethex+0x244>
  80d1b8:	2145c83a 	sub	r2,r4,r5
  80d1bc:	1085883a 	add	r2,r2,r2
  80d1c0:	1085883a 	add	r2,r2,r2
  80d1c4:	00adc83a 	sub	r22,zero,r2
  80d1c8:	200b883a 	mov	r5,r4
  80d1cc:	003f9b06 	br	80d03c <__gethex+0xdc>
  80d1d0:	29000043 	ldbu	r4,1(r5)
  80d1d4:	008020b4 	movhi	r2,130
  80d1d8:	10a31004 	addi	r2,r2,-29632
  80d1dc:	2c000044 	addi	r16,r5,1
  80d1e0:	2085883a 	add	r2,r4,r2
  80d1e4:	10c00003 	ldbu	r3,0(r2)
  80d1e8:	18000d1e 	bne	r3,zero,80d220 <__gethex+0x2c0>
  80d1ec:	2825883a 	mov	r18,r5
  80d1f0:	02400044 	movi	r9,1
  80d1f4:	002d883a 	mov	r22,zero
  80d1f8:	003f9106 	br	80d040 <__gethex+0xe0>
  80d1fc:	0015883a 	mov	r10,zero
  80d200:	21000044 	addi	r4,r4,1
  80d204:	20c00003 	ldbu	r3,0(r4)
  80d208:	003fb506 	br	80d0e0 <__gethex+0x180>
  80d20c:	02800044 	movi	r10,1
  80d210:	003ffb06 	br	80d200 <__gethex+0x2a0>
  80d214:	2821883a 	mov	r16,r5
  80d218:	002d883a 	mov	r22,zero
  80d21c:	003f8806 	br	80d040 <__gethex+0xe0>
  80d220:	00800c04 	movi	r2,48
  80d224:	20800e1e 	bne	r4,r2,80d260 <__gethex+0x300>
  80d228:	2007883a 	mov	r3,r4
  80d22c:	800b883a 	mov	r5,r16
  80d230:	29400044 	addi	r5,r5,1
  80d234:	29000003 	ldbu	r4,0(r5)
  80d238:	20803fcc 	andi	r2,r4,255
  80d23c:	10fffc26 	beq	r2,r3,80d230 <__gethex+0x2d0>
  80d240:	1445883a 	add	r2,r2,r17
  80d244:	10c00003 	ldbu	r3,0(r2)
  80d248:	1800071e 	bne	r3,zero,80d268 <__gethex+0x308>
  80d24c:	02c00044 	movi	r11,1
  80d250:	800d883a 	mov	r6,r16
  80d254:	2825883a 	mov	r18,r5
  80d258:	5813883a 	mov	r9,r11
  80d25c:	003f6706 	br	80cffc <__gethex+0x9c>
  80d260:	81000003 	ldbu	r4,0(r16)
  80d264:	800b883a 	mov	r5,r16
  80d268:	800d883a 	mov	r6,r16
  80d26c:	2825883a 	mov	r18,r5
  80d270:	02c00044 	movi	r11,1
  80d274:	0013883a 	mov	r9,zero
  80d278:	003f6006 	br	80cffc <__gethex+0x9c>
  80d27c:	8485c83a 	sub	r2,r16,r18
  80d280:	10bfffc4 	addi	r2,r2,-1
  80d284:	00c001c4 	movi	r3,7
  80d288:	1880700e 	bge	r3,r2,80d44c <__gethex+0x4ec>
  80d28c:	000b883a 	mov	r5,zero
  80d290:	1005d07a 	srai	r2,r2,1
  80d294:	29400044 	addi	r5,r5,1
  80d298:	18bffd16 	blt	r3,r2,80d290 <__gethex+0x330>
  80d29c:	a809883a 	mov	r4,r21
  80d2a0:	0809ccc0 	call	809ccc <_Balloc>
  80d2a4:	1027883a 	mov	r19,r2
  80d2a8:	10800504 	addi	r2,r2,20
  80d2ac:	d8800215 	stw	r2,8(sp)
  80d2b0:	9400522e 	bgeu	r18,r16,80d3fc <__gethex+0x49c>
  80d2b4:	da000217 	ldw	r8,8(sp)
  80d2b8:	800b883a 	mov	r5,r16
  80d2bc:	000f883a 	mov	r7,zero
  80d2c0:	0009883a 	mov	r4,zero
  80d2c4:	02400b84 	movi	r9,46
  80d2c8:	02800804 	movi	r10,32
  80d2cc:	297fffc4 	addi	r5,r5,-1
  80d2d0:	28c00003 	ldbu	r3,0(r5)
  80d2d4:	1a400826 	beq	r3,r9,80d2f8 <__gethex+0x398>
  80d2d8:	380d883a 	mov	r6,r7
  80d2dc:	3a802726 	beq	r7,r10,80d37c <__gethex+0x41c>
  80d2e0:	39c00104 	addi	r7,r7,4
  80d2e4:	1c47883a 	add	r3,r3,r17
  80d2e8:	18800003 	ldbu	r2,0(r3)
  80d2ec:	108003cc 	andi	r2,r2,15
  80d2f0:	1184983a 	sll	r2,r2,r6
  80d2f4:	2088b03a 	or	r4,r4,r2
  80d2f8:	917ff436 	bltu	r18,r5,80d2cc <__gethex+0x36c>
  80d2fc:	d8c00217 	ldw	r3,8(sp)
  80d300:	40800104 	addi	r2,r8,4
  80d304:	41000015 	stw	r4,0(r8)
  80d308:	10c5c83a 	sub	r2,r2,r3
  80d30c:	1021d0ba 	srai	r16,r2,2
  80d310:	9c000415 	stw	r16,16(r19)
  80d314:	08097740 	call	809774 <__hi0bits>
  80d318:	8006917a 	slli	r3,r16,5
  80d31c:	a5c00017 	ldw	r23,0(r20)
  80d320:	1885c83a 	sub	r2,r3,r2
  80d324:	b8801c16 	blt	r23,r2,80d398 <__gethex+0x438>
  80d328:	15c00a16 	blt	r2,r23,80d354 <__gethex+0x3f4>
  80d32c:	0039883a 	mov	fp,zero
  80d330:	a0800217 	ldw	r2,8(r20)
  80d334:	1580340e 	bge	r2,r22,80d408 <__gethex+0x4a8>
  80d338:	a809883a 	mov	r4,r21
  80d33c:	980b883a 	mov	r5,r19
  80d340:	080974c0 	call	80974c <_Bfree>
  80d344:	d8c00d17 	ldw	r3,52(sp)
  80d348:	048028c4 	movi	r18,163
  80d34c:	18000015 	stw	zero,0(r3)
  80d350:	003f4606 	br	80d06c <__gethex+0x10c>
  80d354:	b8a1c83a 	sub	r16,r23,r2
  80d358:	980b883a 	mov	r5,r19
  80d35c:	a809883a 	mov	r4,r21
  80d360:	800d883a 	mov	r6,r16
  80d364:	080a0900 	call	80a090 <__lshift>
  80d368:	1027883a 	mov	r19,r2
  80d36c:	b42dc83a 	sub	r22,r22,r16
  80d370:	10800504 	addi	r2,r2,20
  80d374:	d8800215 	stw	r2,8(sp)
  80d378:	003fec06 	br	80d32c <__gethex+0x3cc>
  80d37c:	41000015 	stw	r4,0(r8)
  80d380:	28c00003 	ldbu	r3,0(r5)
  80d384:	01c00104 	movi	r7,4
  80d388:	000d883a 	mov	r6,zero
  80d38c:	41d1883a 	add	r8,r8,r7
  80d390:	0009883a 	mov	r4,zero
  80d394:	003fd306 	br	80d2e4 <__gethex+0x384>
  80d398:	15e1c83a 	sub	r16,r2,r23
  80d39c:	9809883a 	mov	r4,r19
  80d3a0:	800b883a 	mov	r5,r16
  80d3a4:	0809c440 	call	809c44 <__any_on>
  80d3a8:	1000061e 	bne	r2,zero,80d3c4 <__gethex+0x464>
  80d3ac:	0039883a 	mov	fp,zero
  80d3b0:	9809883a 	mov	r4,r19
  80d3b4:	800b883a 	mov	r5,r16
  80d3b8:	080ceb00 	call	80ceb0 <rshift>
  80d3bc:	b42d883a 	add	r22,r22,r16
  80d3c0:	003fdb06 	br	80d330 <__gethex+0x3d0>
  80d3c4:	817fffc4 	addi	r5,r16,-1
  80d3c8:	2805d17a 	srai	r2,r5,5
  80d3cc:	d8c00217 	ldw	r3,8(sp)
  80d3d0:	290007cc 	andi	r4,r5,31
  80d3d4:	1085883a 	add	r2,r2,r2
  80d3d8:	1085883a 	add	r2,r2,r2
  80d3dc:	01800044 	movi	r6,1
  80d3e0:	10c5883a 	add	r2,r2,r3
  80d3e4:	3108983a 	sll	r4,r6,r4
  80d3e8:	10c00017 	ldw	r3,0(r2)
  80d3ec:	20c8703a 	and	r4,r4,r3
  80d3f0:	20001a1e 	bne	r4,zero,80d45c <__gethex+0x4fc>
  80d3f4:	3039883a 	mov	fp,r6
  80d3f8:	003fed06 	br	80d3b0 <__gethex+0x450>
  80d3fc:	1011883a 	mov	r8,r2
  80d400:	0009883a 	mov	r4,zero
  80d404:	003fbd06 	br	80d2fc <__gethex+0x39c>
  80d408:	a1000117 	ldw	r4,4(r20)
  80d40c:	b1001a16 	blt	r22,r4,80d478 <__gethex+0x518>
  80d410:	04800044 	movi	r18,1
  80d414:	e0000826 	beq	fp,zero,80d438 <__gethex+0x4d8>
  80d418:	a1000317 	ldw	r4,12(r20)
  80d41c:	00800084 	movi	r2,2
  80d420:	20809426 	beq	r4,r2,80d674 <__gethex+0x714>
  80d424:	008000c4 	movi	r2,3
  80d428:	20805826 	beq	r4,r2,80d58c <__gethex+0x62c>
  80d42c:	00800044 	movi	r2,1
  80d430:	20803f26 	beq	r4,r2,80d530 <__gethex+0x5d0>
  80d434:	94800414 	ori	r18,r18,16
  80d438:	d8800d17 	ldw	r2,52(sp)
  80d43c:	d8c00117 	ldw	r3,4(sp)
  80d440:	14c00015 	stw	r19,0(r2)
  80d444:	1d800015 	stw	r22,0(r3)
  80d448:	003f0806 	br	80d06c <__gethex+0x10c>
  80d44c:	000b883a 	mov	r5,zero
  80d450:	003f9206 	br	80d29c <__gethex+0x33c>
  80d454:	002d883a 	mov	r22,zero
  80d458:	003ef806 	br	80d03c <__gethex+0xdc>
  80d45c:	3140160e 	bge	r6,r5,80d4b8 <__gethex+0x558>
  80d460:	9809883a 	mov	r4,r19
  80d464:	817fff84 	addi	r5,r16,-2
  80d468:	0809c440 	call	809c44 <__any_on>
  80d46c:	10001226 	beq	r2,zero,80d4b8 <__gethex+0x558>
  80d470:	070000c4 	movi	fp,3
  80d474:	003fce06 	br	80d3b0 <__gethex+0x450>
  80d478:	25a3c83a 	sub	r17,r4,r22
  80d47c:	8dc01016 	blt	r17,r23,80d4c0 <__gethex+0x560>
  80d480:	a0c00317 	ldw	r3,12(r20)
  80d484:	00800084 	movi	r2,2
  80d488:	18809326 	beq	r3,r2,80d6d8 <__gethex+0x778>
  80d48c:	008000c4 	movi	r2,3
  80d490:	18808e26 	beq	r3,r2,80d6cc <__gethex+0x76c>
  80d494:	00800044 	movi	r2,1
  80d498:	18807b26 	beq	r3,r2,80d688 <__gethex+0x728>
  80d49c:	a809883a 	mov	r4,r21
  80d4a0:	980b883a 	mov	r5,r19
  80d4a4:	080974c0 	call	80974c <_Bfree>
  80d4a8:	d8c00d17 	ldw	r3,52(sp)
  80d4ac:	04801404 	movi	r18,80
  80d4b0:	18000015 	stw	zero,0(r3)
  80d4b4:	003eed06 	br	80d06c <__gethex+0x10c>
  80d4b8:	07000084 	movi	fp,2
  80d4bc:	003fbc06 	br	80d3b0 <__gethex+0x450>
  80d4c0:	8c3fffc4 	addi	r16,r17,-1
  80d4c4:	e0001426 	beq	fp,zero,80d518 <__gethex+0x5b8>
  80d4c8:	07000044 	movi	fp,1
  80d4cc:	8005d17a 	srai	r2,r16,5
  80d4d0:	d8c00217 	ldw	r3,8(sp)
  80d4d4:	814007cc 	andi	r5,r16,31
  80d4d8:	1085883a 	add	r2,r2,r2
  80d4dc:	1085883a 	add	r2,r2,r2
  80d4e0:	10c5883a 	add	r2,r2,r3
  80d4e4:	00c00044 	movi	r3,1
  80d4e8:	1946983a 	sll	r3,r3,r5
  80d4ec:	11000017 	ldw	r4,0(r2)
  80d4f0:	1906703a 	and	r3,r3,r4
  80d4f4:	18000126 	beq	r3,zero,80d4fc <__gethex+0x59c>
  80d4f8:	e7000094 	ori	fp,fp,2
  80d4fc:	880b883a 	mov	r5,r17
  80d500:	9809883a 	mov	r4,r19
  80d504:	080ceb00 	call	80ceb0 <rshift>
  80d508:	a5800117 	ldw	r22,4(r20)
  80d50c:	bc6fc83a 	sub	r23,r23,r17
  80d510:	04800084 	movi	r18,2
  80d514:	003fbf06 	br	80d414 <__gethex+0x4b4>
  80d518:	043fec0e 	bge	zero,r16,80d4cc <__gethex+0x56c>
  80d51c:	9809883a 	mov	r4,r19
  80d520:	800b883a 	mov	r5,r16
  80d524:	0809c440 	call	809c44 <__any_on>
  80d528:	1039883a 	mov	fp,r2
  80d52c:	003fe706 	br	80d4cc <__gethex+0x56c>
  80d530:	e080008c 	andi	r2,fp,2
  80d534:	103fbf26 	beq	r2,zero,80d434 <__gethex+0x4d4>
  80d538:	d8c00217 	ldw	r3,8(sp)
  80d53c:	18800017 	ldw	r2,0(r3)
  80d540:	e084b03a 	or	r2,fp,r2
  80d544:	1104703a 	and	r2,r2,r4
  80d548:	103fba26 	beq	r2,zero,80d434 <__gethex+0x4d4>
  80d54c:	9c000417 	ldw	r16,16(r19)
  80d550:	d8c00217 	ldw	r3,8(sp)
  80d554:	017fffc4 	movi	r5,-1
  80d558:	8405883a 	add	r2,r16,r16
  80d55c:	10b9883a 	add	fp,r2,r2
  80d560:	1f09883a 	add	r4,r3,fp
  80d564:	dc000015 	stw	r16,0(sp)
  80d568:	00000306 	br	80d578 <__gethex+0x618>
  80d56c:	18000015 	stw	zero,0(r3)
  80d570:	18c00104 	addi	r3,r3,4
  80d574:	1900082e 	bgeu	r3,r4,80d598 <__gethex+0x638>
  80d578:	18800017 	ldw	r2,0(r3)
  80d57c:	117ffb26 	beq	r2,r5,80d56c <__gethex+0x60c>
  80d580:	10800044 	addi	r2,r2,1
  80d584:	18800015 	stw	r2,0(r3)
  80d588:	00001f06 	br	80d608 <__gethex+0x6a8>
  80d58c:	d8800e17 	ldw	r2,56(sp)
  80d590:	103fa826 	beq	r2,zero,80d434 <__gethex+0x4d4>
  80d594:	003fed06 	br	80d54c <__gethex+0x5ec>
  80d598:	98800217 	ldw	r2,8(r19)
  80d59c:	80801316 	blt	r16,r2,80d5ec <__gethex+0x68c>
  80d5a0:	99400117 	ldw	r5,4(r19)
  80d5a4:	a809883a 	mov	r4,r21
  80d5a8:	29400044 	addi	r5,r5,1
  80d5ac:	0809ccc0 	call	809ccc <_Balloc>
  80d5b0:	99800417 	ldw	r6,16(r19)
  80d5b4:	99400304 	addi	r5,r19,12
  80d5b8:	11000304 	addi	r4,r2,12
  80d5bc:	318d883a 	add	r6,r6,r6
  80d5c0:	318d883a 	add	r6,r6,r6
  80d5c4:	31800204 	addi	r6,r6,8
  80d5c8:	1023883a 	mov	r17,r2
  80d5cc:	08031ac0 	call	8031ac <memcpy>
  80d5d0:	980b883a 	mov	r5,r19
  80d5d4:	a809883a 	mov	r4,r21
  80d5d8:	080974c0 	call	80974c <_Bfree>
  80d5dc:	8c000417 	ldw	r16,16(r17)
  80d5e0:	88800504 	addi	r2,r17,20
  80d5e4:	8827883a 	mov	r19,r17
  80d5e8:	d8800215 	stw	r2,8(sp)
  80d5ec:	8405883a 	add	r2,r16,r16
  80d5f0:	1085883a 	add	r2,r2,r2
  80d5f4:	14c5883a 	add	r2,r2,r19
  80d5f8:	84000044 	addi	r16,r16,1
  80d5fc:	00c00044 	movi	r3,1
  80d600:	10c00515 	stw	r3,20(r2)
  80d604:	9c000415 	stw	r16,16(r19)
  80d608:	00800084 	movi	r2,2
  80d60c:	90801426 	beq	r18,r2,80d660 <__gethex+0x700>
  80d610:	d8800017 	ldw	r2,0(sp)
  80d614:	14000b16 	blt	r2,r16,80d644 <__gethex+0x6e4>
  80d618:	bc0007cc 	andi	r16,r23,31
  80d61c:	8000021e 	bne	r16,zero,80d628 <__gethex+0x6c8>
  80d620:	94800814 	ori	r18,r18,32
  80d624:	003f8406 	br	80d438 <__gethex+0x4d8>
  80d628:	d8c00217 	ldw	r3,8(sp)
  80d62c:	1f05883a 	add	r2,r3,fp
  80d630:	113fff17 	ldw	r4,-4(r2)
  80d634:	08097740 	call	809774 <__hi0bits>
  80d638:	00c00804 	movi	r3,32
  80d63c:	1c07c83a 	sub	r3,r3,r16
  80d640:	10fff70e 	bge	r2,r3,80d620 <__gethex+0x6c0>
  80d644:	9809883a 	mov	r4,r19
  80d648:	01400044 	movi	r5,1
  80d64c:	080ceb00 	call	80ceb0 <rshift>
  80d650:	a0800217 	ldw	r2,8(r20)
  80d654:	b5800044 	addi	r22,r22,1
  80d658:	15bf3716 	blt	r2,r22,80d338 <__gethex+0x3d8>
  80d65c:	003ff006 	br	80d620 <__gethex+0x6c0>
  80d660:	a0800017 	ldw	r2,0(r20)
  80d664:	10bfffc4 	addi	r2,r2,-1
  80d668:	b8801e26 	beq	r23,r2,80d6e4 <__gethex+0x784>
  80d66c:	04800884 	movi	r18,34
  80d670:	003f7106 	br	80d438 <__gethex+0x4d8>
  80d674:	d8c00e17 	ldw	r3,56(sp)
  80d678:	00800044 	movi	r2,1
  80d67c:	10c5c83a 	sub	r2,r2,r3
  80d680:	103f6c26 	beq	r2,zero,80d434 <__gethex+0x4d4>
  80d684:	003fb106 	br	80d54c <__gethex+0x5ec>
  80d688:	bc7f841e 	bne	r23,r17,80d49c <__gethex+0x53c>
  80d68c:	1dc0050e 	bge	r3,r23,80d6a4 <__gethex+0x744>
  80d690:	b8cbc83a 	sub	r5,r23,r3
  80d694:	9809883a 	mov	r4,r19
  80d698:	0809c440 	call	809c44 <__any_on>
  80d69c:	103f7f26 	beq	r2,zero,80d49c <__gethex+0x53c>
  80d6a0:	a1000117 	ldw	r4,4(r20)
  80d6a4:	d8800117 	ldw	r2,4(sp)
  80d6a8:	d8c00217 	ldw	r3,8(sp)
  80d6ac:	04000044 	movi	r16,1
  80d6b0:	11000015 	stw	r4,0(r2)
  80d6b4:	d8800d17 	ldw	r2,52(sp)
  80d6b8:	04801884 	movi	r18,98
  80d6bc:	1c000015 	stw	r16,0(r3)
  80d6c0:	14c00015 	stw	r19,0(r2)
  80d6c4:	9c000415 	stw	r16,16(r19)
  80d6c8:	003e6806 	br	80d06c <__gethex+0x10c>
  80d6cc:	d8c00e17 	ldw	r3,56(sp)
  80d6d0:	183f7226 	beq	r3,zero,80d49c <__gethex+0x53c>
  80d6d4:	003ff306 	br	80d6a4 <__gethex+0x744>
  80d6d8:	d8800e17 	ldw	r2,56(sp)
  80d6dc:	103ff126 	beq	r2,zero,80d6a4 <__gethex+0x744>
  80d6e0:	003f6e06 	br	80d49c <__gethex+0x53c>
  80d6e4:	b805d17a 	srai	r2,r23,5
  80d6e8:	d8c00217 	ldw	r3,8(sp)
  80d6ec:	b94007cc 	andi	r5,r23,31
  80d6f0:	1085883a 	add	r2,r2,r2
  80d6f4:	1085883a 	add	r2,r2,r2
  80d6f8:	10c5883a 	add	r2,r2,r3
  80d6fc:	00c00044 	movi	r3,1
  80d700:	1946983a 	sll	r3,r3,r5
  80d704:	11000017 	ldw	r4,0(r2)
  80d708:	1906703a 	and	r3,r3,r4
  80d70c:	183fd726 	beq	r3,zero,80d66c <__gethex+0x70c>
  80d710:	04800844 	movi	r18,33
  80d714:	003f4806 	br	80d438 <__gethex+0x4d8>

0080d718 <L_shift>:
  80d718:	00800204 	movi	r2,8
  80d71c:	1185c83a 	sub	r2,r2,r6
  80d720:	1085883a 	add	r2,r2,r2
  80d724:	21c00017 	ldw	r7,0(r4)
  80d728:	1093883a 	add	r9,r2,r2
  80d72c:	00800804 	movi	r2,32
  80d730:	200d883a 	mov	r6,r4
  80d734:	1251c83a 	sub	r8,r2,r9
  80d738:	31800104 	addi	r6,r6,4
  80d73c:	3805883a 	mov	r2,r7
  80d740:	31c00017 	ldw	r7,0(r6)
  80d744:	3a08983a 	sll	r4,r7,r8
  80d748:	3a46d83a 	srl	r3,r7,r9
  80d74c:	1104b03a 	or	r2,r2,r4
  80d750:	180f883a 	mov	r7,r3
  80d754:	30bfff15 	stw	r2,-4(r6)
  80d758:	30c00015 	stw	r3,0(r6)
  80d75c:	317ff636 	bltu	r6,r5,80d738 <L_shift+0x20>
  80d760:	f800283a 	ret

0080d764 <__hexnan>:
  80d764:	defff404 	addi	sp,sp,-48
  80d768:	dd800815 	stw	r22,32(sp)
  80d76c:	058020b4 	movhi	r22,130
  80d770:	b5a31004 	addi	r22,r22,-29632
  80d774:	b0800c03 	ldbu	r2,48(r22)
  80d778:	dcc00515 	stw	r19,20(sp)
  80d77c:	dc000215 	stw	r16,8(sp)
  80d780:	dfc00b15 	stw	ra,44(sp)
  80d784:	df000a15 	stw	fp,40(sp)
  80d788:	ddc00915 	stw	r23,36(sp)
  80d78c:	dd400715 	stw	r21,28(sp)
  80d790:	dd000615 	stw	r20,24(sp)
  80d794:	dc800415 	stw	r18,16(sp)
  80d798:	dc400315 	stw	r17,12(sp)
  80d79c:	d9000115 	stw	r4,4(sp)
  80d7a0:	2821883a 	mov	r16,r5
  80d7a4:	3027883a 	mov	r19,r6
  80d7a8:	10007426 	beq	r2,zero,80d97c <__hexnan+0x218>
  80d7ac:	80c00017 	ldw	r3,0(r16)
  80d7b0:	1805d17a 	srai	r2,r3,5
  80d7b4:	18c007cc 	andi	r3,r3,31
  80d7b8:	1839003a 	cmpeq	fp,r3,zero
  80d7bc:	1085883a 	add	r2,r2,r2
  80d7c0:	1085883a 	add	r2,r2,r2
  80d7c4:	d8c00015 	stw	r3,0(sp)
  80d7c8:	14c5883a 	add	r2,r2,r19
  80d7cc:	e000011e 	bne	fp,zero,80d7d4 <__hexnan+0x70>
  80d7d0:	10800104 	addi	r2,r2,4
  80d7d4:	d8c00117 	ldw	r3,4(sp)
  80d7d8:	153fff04 	addi	r20,r2,-4
  80d7dc:	a021883a 	mov	r16,r20
  80d7e0:	1c400017 	ldw	r17,0(r3)
  80d7e4:	a02b883a 	mov	r21,r20
  80d7e8:	0025883a 	mov	r18,zero
  80d7ec:	002f883a 	mov	r23,zero
  80d7f0:	000d883a 	mov	r6,zero
  80d7f4:	103fff15 	stw	zero,-4(r2)
  80d7f8:	8c400044 	addi	r17,r17,1
  80d7fc:	89000003 	ldbu	r4,0(r17)
  80d800:	20000e26 	beq	r4,zero,80d83c <__hexnan+0xd8>
  80d804:	2585883a 	add	r2,r4,r22
  80d808:	10c00003 	ldbu	r3,0(r2)
  80d80c:	18002e1e 	bne	r3,zero,80d8c8 <__hexnan+0x164>
  80d810:	00800804 	movi	r2,32
  80d814:	11005536 	bltu	r2,r4,80d96c <__hexnan+0x208>
  80d818:	bcbff70e 	bge	r23,r18,80d7f8 <__hexnan+0x94>
  80d81c:	8540022e 	bgeu	r16,r21,80d828 <__hexnan+0xc4>
  80d820:	008001c4 	movi	r2,7
  80d824:	11803c0e 	bge	r2,r6,80d918 <__hexnan+0x1b4>
  80d828:	9c003536 	bltu	r19,r16,80d900 <__hexnan+0x19c>
  80d82c:	8c400044 	addi	r17,r17,1
  80d830:	89000003 	ldbu	r4,0(r17)
  80d834:	01800204 	movi	r6,8
  80d838:	203ff21e 	bne	r4,zero,80d804 <__hexnan+0xa0>
  80d83c:	90004d26 	beq	r18,zero,80d974 <__hexnan+0x210>
  80d840:	85404336 	bltu	r16,r21,80d950 <__hexnan+0x1ec>
  80d844:	9c00382e 	bgeu	r19,r16,80d928 <__hexnan+0x1c4>
  80d848:	9807883a 	mov	r3,r19
  80d84c:	80800017 	ldw	r2,0(r16)
  80d850:	84000104 	addi	r16,r16,4
  80d854:	18800015 	stw	r2,0(r3)
  80d858:	18c00104 	addi	r3,r3,4
  80d85c:	a43ffb2e 	bgeu	r20,r16,80d84c <__hexnan+0xe8>
  80d860:	18000015 	stw	zero,0(r3)
  80d864:	18c00104 	addi	r3,r3,4
  80d868:	a0fffd2e 	bgeu	r20,r3,80d860 <__hexnan+0xfc>
  80d86c:	a0800017 	ldw	r2,0(r20)
  80d870:	1000071e 	bne	r2,zero,80d890 <__hexnan+0x12c>
  80d874:	9d004326 	beq	r19,r20,80d984 <__hexnan+0x220>
  80d878:	a007883a 	mov	r3,r20
  80d87c:	00000106 	br	80d884 <__hexnan+0x120>
  80d880:	98c04026 	beq	r19,r3,80d984 <__hexnan+0x220>
  80d884:	18ffff04 	addi	r3,r3,-4
  80d888:	18800017 	ldw	r2,0(r3)
  80d88c:	103ffc26 	beq	r2,zero,80d880 <__hexnan+0x11c>
  80d890:	00c00144 	movi	r3,5
  80d894:	1805883a 	mov	r2,r3
  80d898:	dfc00b17 	ldw	ra,44(sp)
  80d89c:	df000a17 	ldw	fp,40(sp)
  80d8a0:	ddc00917 	ldw	r23,36(sp)
  80d8a4:	dd800817 	ldw	r22,32(sp)
  80d8a8:	dd400717 	ldw	r21,28(sp)
  80d8ac:	dd000617 	ldw	r20,24(sp)
  80d8b0:	dcc00517 	ldw	r19,20(sp)
  80d8b4:	dc800417 	ldw	r18,16(sp)
  80d8b8:	dc400317 	ldw	r17,12(sp)
  80d8bc:	dc000217 	ldw	r16,8(sp)
  80d8c0:	dec00c04 	addi	sp,sp,48
  80d8c4:	f800283a 	ret
  80d8c8:	31800044 	addi	r6,r6,1
  80d8cc:	00800204 	movi	r2,8
  80d8d0:	94800044 	addi	r18,r18,1
  80d8d4:	1180040e 	bge	r2,r6,80d8e8 <__hexnan+0x184>
  80d8d8:	9c3fc72e 	bgeu	r19,r16,80d7f8 <__hexnan+0x94>
  80d8dc:	843fff04 	addi	r16,r16,-4
  80d8e0:	80000015 	stw	zero,0(r16)
  80d8e4:	01800044 	movi	r6,1
  80d8e8:	80800017 	ldw	r2,0(r16)
  80d8ec:	18c003cc 	andi	r3,r3,15
  80d8f0:	1004913a 	slli	r2,r2,4
  80d8f4:	10c4b03a 	or	r2,r2,r3
  80d8f8:	80800015 	stw	r2,0(r16)
  80d8fc:	003fbe06 	br	80d7f8 <__hexnan+0x94>
  80d900:	843fff04 	addi	r16,r16,-4
  80d904:	802b883a 	mov	r21,r16
  80d908:	902f883a 	mov	r23,r18
  80d90c:	000d883a 	mov	r6,zero
  80d910:	80000015 	stw	zero,0(r16)
  80d914:	003fb806 	br	80d7f8 <__hexnan+0x94>
  80d918:	8009883a 	mov	r4,r16
  80d91c:	a80b883a 	mov	r5,r21
  80d920:	080d7180 	call	80d718 <L_shift>
  80d924:	003fc006 	br	80d828 <__hexnan+0xc4>
  80d928:	e03fd01e 	bne	fp,zero,80d86c <__hexnan+0x108>
  80d92c:	d8c00017 	ldw	r3,0(sp)
  80d930:	00800804 	movi	r2,32
  80d934:	10c5c83a 	sub	r2,r2,r3
  80d938:	00ffffc4 	movi	r3,-1
  80d93c:	1886d83a 	srl	r3,r3,r2
  80d940:	a0800017 	ldw	r2,0(r20)
  80d944:	10c4703a 	and	r2,r2,r3
  80d948:	a0800015 	stw	r2,0(r20)
  80d94c:	003fc806 	br	80d870 <__hexnan+0x10c>
  80d950:	008001c4 	movi	r2,7
  80d954:	11bfbb16 	blt	r2,r6,80d844 <__hexnan+0xe0>
  80d958:	a80b883a 	mov	r5,r21
  80d95c:	8009883a 	mov	r4,r16
  80d960:	080d7180 	call	80d718 <L_shift>
  80d964:	9c3ff02e 	bgeu	r19,r16,80d928 <__hexnan+0x1c4>
  80d968:	003fb706 	br	80d848 <__hexnan+0xe4>
  80d96c:	00800a44 	movi	r2,41
  80d970:	20800826 	beq	r4,r2,80d994 <__hexnan+0x230>
  80d974:	00c00104 	movi	r3,4
  80d978:	003fc606 	br	80d894 <__hexnan+0x130>
  80d97c:	080ce480 	call	80ce48 <__hexdig_init>
  80d980:	003f8a06 	br	80d7ac <__hexnan+0x48>
  80d984:	00800044 	movi	r2,1
  80d988:	00c00144 	movi	r3,5
  80d98c:	98800015 	stw	r2,0(r19)
  80d990:	003fc006 	br	80d894 <__hexnan+0x130>
  80d994:	903ff726 	beq	r18,zero,80d974 <__hexnan+0x210>
  80d998:	d8c00117 	ldw	r3,4(sp)
  80d99c:	88800044 	addi	r2,r17,1
  80d9a0:	18800015 	stw	r2,0(r3)
  80d9a4:	857fa72e 	bgeu	r16,r21,80d844 <__hexnan+0xe0>
  80d9a8:	003fe906 	br	80d950 <__hexnan+0x1ec>

0080d9ac <__muldi3>:
  80d9ac:	2011883a 	mov	r8,r4
  80d9b0:	427fffcc 	andi	r9,r8,65535
  80d9b4:	4018d43a 	srli	r12,r8,16
  80d9b8:	32bfffcc 	andi	r10,r6,65535
  80d9bc:	3016d43a 	srli	r11,r6,16
  80d9c0:	4a85383a 	mul	r2,r9,r10
  80d9c4:	6295383a 	mul	r10,r12,r10
  80d9c8:	4ad3383a 	mul	r9,r9,r11
  80d9cc:	113fffcc 	andi	r4,r2,65535
  80d9d0:	1004d43a 	srli	r2,r2,16
  80d9d4:	4a93883a 	add	r9,r9,r10
  80d9d8:	3807883a 	mov	r3,r7
  80d9dc:	1245883a 	add	r2,r2,r9
  80d9e0:	280f883a 	mov	r7,r5
  80d9e4:	180b883a 	mov	r5,r3
  80d9e8:	1006943a 	slli	r3,r2,16
  80d9ec:	defffd04 	addi	sp,sp,-12
  80d9f0:	dc800215 	stw	r18,8(sp)
  80d9f4:	1907883a 	add	r3,r3,r4
  80d9f8:	dc400115 	stw	r17,4(sp)
  80d9fc:	dc000015 	stw	r16,0(sp)
  80da00:	4165383a 	mul	r18,r8,r5
  80da04:	31e3383a 	mul	r17,r6,r7
  80da08:	1012d43a 	srli	r9,r2,16
  80da0c:	62d9383a 	mul	r12,r12,r11
  80da10:	181f883a 	mov	r15,r3
  80da14:	1280022e 	bgeu	r2,r10,80da20 <__muldi3+0x74>
  80da18:	00800074 	movhi	r2,1
  80da1c:	6099883a 	add	r12,r12,r2
  80da20:	624d883a 	add	r6,r12,r9
  80da24:	9187883a 	add	r3,r18,r6
  80da28:	88c7883a 	add	r3,r17,r3
  80da2c:	7805883a 	mov	r2,r15
  80da30:	dc800217 	ldw	r18,8(sp)
  80da34:	dc400117 	ldw	r17,4(sp)
  80da38:	dc000017 	ldw	r16,0(sp)
  80da3c:	dec00304 	addi	sp,sp,12
  80da40:	f800283a 	ret

0080da44 <__fixunsdfsi>:
  80da44:	defffb04 	addi	sp,sp,-20
  80da48:	dc400115 	stw	r17,4(sp)
  80da4c:	dc000015 	stw	r16,0(sp)
  80da50:	04507834 	movhi	r17,16864
  80da54:	0021883a 	mov	r16,zero
  80da58:	800d883a 	mov	r6,r16
  80da5c:	880f883a 	mov	r7,r17
  80da60:	dcc00315 	stw	r19,12(sp)
  80da64:	dc800215 	stw	r18,8(sp)
  80da68:	2827883a 	mov	r19,r5
  80da6c:	2025883a 	mov	r18,r4
  80da70:	dfc00415 	stw	ra,16(sp)
  80da74:	080f4940 	call	80f494 <__gedf2>
  80da78:	000d883a 	mov	r6,zero
  80da7c:	880f883a 	mov	r7,r17
  80da80:	980b883a 	mov	r5,r19
  80da84:	9009883a 	mov	r4,r18
  80da88:	10000d16 	blt	r2,zero,80dac0 <__fixunsdfsi+0x7c>
  80da8c:	080ebec0 	call	80ebec <__subdf3>
  80da90:	180b883a 	mov	r5,r3
  80da94:	1009883a 	mov	r4,r2
  80da98:	080f7240 	call	80f724 <__fixdfsi>
  80da9c:	00e00034 	movhi	r3,32768
  80daa0:	10c5883a 	add	r2,r2,r3
  80daa4:	dfc00417 	ldw	ra,16(sp)
  80daa8:	dcc00317 	ldw	r19,12(sp)
  80daac:	dc800217 	ldw	r18,8(sp)
  80dab0:	dc400117 	ldw	r17,4(sp)
  80dab4:	dc000017 	ldw	r16,0(sp)
  80dab8:	dec00504 	addi	sp,sp,20
  80dabc:	f800283a 	ret
  80dac0:	980b883a 	mov	r5,r19
  80dac4:	9009883a 	mov	r4,r18
  80dac8:	080f7240 	call	80f724 <__fixdfsi>
  80dacc:	dfc00417 	ldw	ra,16(sp)
  80dad0:	dcc00317 	ldw	r19,12(sp)
  80dad4:	dc800217 	ldw	r18,8(sp)
  80dad8:	dc400117 	ldw	r17,4(sp)
  80dadc:	dc000017 	ldw	r16,0(sp)
  80dae0:	dec00504 	addi	sp,sp,20
  80dae4:	f800283a 	ret

0080dae8 <__udivdi3>:
  80dae8:	defff004 	addi	sp,sp,-64
  80daec:	2005883a 	mov	r2,r4
  80daf0:	3011883a 	mov	r8,r6
  80daf4:	df000e15 	stw	fp,56(sp)
  80daf8:	dd000a15 	stw	r20,40(sp)
  80dafc:	dc000615 	stw	r16,24(sp)
  80db00:	dfc00f15 	stw	ra,60(sp)
  80db04:	ddc00d15 	stw	r23,52(sp)
  80db08:	dd800c15 	stw	r22,48(sp)
  80db0c:	dd400b15 	stw	r21,44(sp)
  80db10:	dcc00915 	stw	r19,36(sp)
  80db14:	dc800815 	stw	r18,32(sp)
  80db18:	dc400715 	stw	r17,28(sp)
  80db1c:	4021883a 	mov	r16,r8
  80db20:	1039883a 	mov	fp,r2
  80db24:	2829883a 	mov	r20,r5
  80db28:	38003b1e 	bne	r7,zero,80dc18 <__udivdi3+0x130>
  80db2c:	2a005c36 	bltu	r5,r8,80dca0 <__udivdi3+0x1b8>
  80db30:	4000a626 	beq	r8,zero,80ddcc <__udivdi3+0x2e4>
  80db34:	00bfffd4 	movui	r2,65535
  80db38:	14009e36 	bltu	r2,r16,80ddb4 <__udivdi3+0x2cc>
  80db3c:	00803fc4 	movi	r2,255
  80db40:	14013d36 	bltu	r2,r16,80e038 <__udivdi3+0x550>
  80db44:	000b883a 	mov	r5,zero
  80db48:	0005883a 	mov	r2,zero
  80db4c:	8084d83a 	srl	r2,r16,r2
  80db50:	01002074 	movhi	r4,129
  80db54:	21142104 	addi	r4,r4,20612
  80db58:	01800804 	movi	r6,32
  80db5c:	1105883a 	add	r2,r2,r4
  80db60:	10c00003 	ldbu	r3,0(r2)
  80db64:	28c7883a 	add	r3,r5,r3
  80db68:	30edc83a 	sub	r22,r6,r3
  80db6c:	b000ee1e 	bne	r22,zero,80df28 <__udivdi3+0x440>
  80db70:	802ad43a 	srli	r21,r16,16
  80db74:	00800044 	movi	r2,1
  80db78:	a423c83a 	sub	r17,r20,r16
  80db7c:	85ffffcc 	andi	r23,r16,65535
  80db80:	d8800315 	stw	r2,12(sp)
  80db84:	8809883a 	mov	r4,r17
  80db88:	a80b883a 	mov	r5,r21
  80db8c:	080fb400 	call	80fb40 <__udivsi3>
  80db90:	8809883a 	mov	r4,r17
  80db94:	a80b883a 	mov	r5,r21
  80db98:	102d883a 	mov	r22,r2
  80db9c:	080fb480 	call	80fb48 <__umodsi3>
  80dba0:	1004943a 	slli	r2,r2,16
  80dba4:	e006d43a 	srli	r3,fp,16
  80dba8:	bda3383a 	mul	r17,r23,r22
  80dbac:	10c4b03a 	or	r2,r2,r3
  80dbb0:	1440042e 	bgeu	r2,r17,80dbc4 <__udivdi3+0xdc>
  80dbb4:	1405883a 	add	r2,r2,r16
  80dbb8:	b5bfffc4 	addi	r22,r22,-1
  80dbbc:	14000136 	bltu	r2,r16,80dbc4 <__udivdi3+0xdc>
  80dbc0:	14413d36 	bltu	r2,r17,80e0b8 <__udivdi3+0x5d0>
  80dbc4:	1463c83a 	sub	r17,r2,r17
  80dbc8:	8809883a 	mov	r4,r17
  80dbcc:	a80b883a 	mov	r5,r21
  80dbd0:	080fb400 	call	80fb40 <__udivsi3>
  80dbd4:	8809883a 	mov	r4,r17
  80dbd8:	a80b883a 	mov	r5,r21
  80dbdc:	1029883a 	mov	r20,r2
  80dbe0:	080fb480 	call	80fb48 <__umodsi3>
  80dbe4:	1004943a 	slli	r2,r2,16
  80dbe8:	bd09383a 	mul	r4,r23,r20
  80dbec:	e0ffffcc 	andi	r3,fp,65535
  80dbf0:	10c4b03a 	or	r2,r2,r3
  80dbf4:	1100042e 	bgeu	r2,r4,80dc08 <__udivdi3+0x120>
  80dbf8:	8085883a 	add	r2,r16,r2
  80dbfc:	a53fffc4 	addi	r20,r20,-1
  80dc00:	14000136 	bltu	r2,r16,80dc08 <__udivdi3+0x120>
  80dc04:	11012036 	bltu	r2,r4,80e088 <__udivdi3+0x5a0>
  80dc08:	b004943a 	slli	r2,r22,16
  80dc0c:	d9000317 	ldw	r4,12(sp)
  80dc10:	a084b03a 	or	r2,r20,r2
  80dc14:	00001506 	br	80dc6c <__udivdi3+0x184>
  80dc18:	380d883a 	mov	r6,r7
  80dc1c:	29c06236 	bltu	r5,r7,80dda8 <__udivdi3+0x2c0>
  80dc20:	00bfffd4 	movui	r2,65535
  80dc24:	11c05a36 	bltu	r2,r7,80dd90 <__udivdi3+0x2a8>
  80dc28:	00803fc4 	movi	r2,255
  80dc2c:	11c0fc36 	bltu	r2,r7,80e020 <__udivdi3+0x538>
  80dc30:	000b883a 	mov	r5,zero
  80dc34:	0005883a 	mov	r2,zero
  80dc38:	3084d83a 	srl	r2,r6,r2
  80dc3c:	01002074 	movhi	r4,129
  80dc40:	21142104 	addi	r4,r4,20612
  80dc44:	01c00804 	movi	r7,32
  80dc48:	1105883a 	add	r2,r2,r4
  80dc4c:	10c00003 	ldbu	r3,0(r2)
  80dc50:	28c7883a 	add	r3,r5,r3
  80dc54:	38efc83a 	sub	r23,r7,r3
  80dc58:	b800691e 	bne	r23,zero,80de00 <__udivdi3+0x318>
  80dc5c:	35000136 	bltu	r6,r20,80dc64 <__udivdi3+0x17c>
  80dc60:	e4005136 	bltu	fp,r16,80dda8 <__udivdi3+0x2c0>
  80dc64:	00800044 	movi	r2,1
  80dc68:	0009883a 	mov	r4,zero
  80dc6c:	2007883a 	mov	r3,r4
  80dc70:	dfc00f17 	ldw	ra,60(sp)
  80dc74:	df000e17 	ldw	fp,56(sp)
  80dc78:	ddc00d17 	ldw	r23,52(sp)
  80dc7c:	dd800c17 	ldw	r22,48(sp)
  80dc80:	dd400b17 	ldw	r21,44(sp)
  80dc84:	dd000a17 	ldw	r20,40(sp)
  80dc88:	dcc00917 	ldw	r19,36(sp)
  80dc8c:	dc800817 	ldw	r18,32(sp)
  80dc90:	dc400717 	ldw	r17,28(sp)
  80dc94:	dc000617 	ldw	r16,24(sp)
  80dc98:	dec01004 	addi	sp,sp,64
  80dc9c:	f800283a 	ret
  80dca0:	00bfffd4 	movui	r2,65535
  80dca4:	12005036 	bltu	r2,r8,80dde8 <__udivdi3+0x300>
  80dca8:	00803fc4 	movi	r2,255
  80dcac:	1200e836 	bltu	r2,r8,80e050 <__udivdi3+0x568>
  80dcb0:	000b883a 	mov	r5,zero
  80dcb4:	0005883a 	mov	r2,zero
  80dcb8:	8084d83a 	srl	r2,r16,r2
  80dcbc:	01002074 	movhi	r4,129
  80dcc0:	21142104 	addi	r4,r4,20612
  80dcc4:	01800804 	movi	r6,32
  80dcc8:	1105883a 	add	r2,r2,r4
  80dccc:	10c00003 	ldbu	r3,0(r2)
  80dcd0:	28c7883a 	add	r3,r5,r3
  80dcd4:	30cbc83a 	sub	r5,r6,r3
  80dcd8:	28000626 	beq	r5,zero,80dcf4 <__udivdi3+0x20c>
  80dcdc:	3145c83a 	sub	r2,r6,r5
  80dce0:	e084d83a 	srl	r2,fp,r2
  80dce4:	a146983a 	sll	r3,r20,r5
  80dce8:	e178983a 	sll	fp,fp,r5
  80dcec:	8160983a 	sll	r16,r16,r5
  80dcf0:	18a8b03a 	or	r20,r3,r2
  80dcf4:	802ad43a 	srli	r21,r16,16
  80dcf8:	a009883a 	mov	r4,r20
  80dcfc:	85ffffcc 	andi	r23,r16,65535
  80dd00:	a80b883a 	mov	r5,r21
  80dd04:	080fb400 	call	80fb40 <__udivsi3>
  80dd08:	a009883a 	mov	r4,r20
  80dd0c:	a80b883a 	mov	r5,r21
  80dd10:	102d883a 	mov	r22,r2
  80dd14:	080fb480 	call	80fb48 <__umodsi3>
  80dd18:	1004943a 	slli	r2,r2,16
  80dd1c:	e006d43a 	srli	r3,fp,16
  80dd20:	bda3383a 	mul	r17,r23,r22
  80dd24:	10c4b03a 	or	r2,r2,r3
  80dd28:	1440042e 	bgeu	r2,r17,80dd3c <__udivdi3+0x254>
  80dd2c:	1405883a 	add	r2,r2,r16
  80dd30:	b5bfffc4 	addi	r22,r22,-1
  80dd34:	14000136 	bltu	r2,r16,80dd3c <__udivdi3+0x254>
  80dd38:	1440d536 	bltu	r2,r17,80e090 <__udivdi3+0x5a8>
  80dd3c:	1463c83a 	sub	r17,r2,r17
  80dd40:	8809883a 	mov	r4,r17
  80dd44:	a80b883a 	mov	r5,r21
  80dd48:	080fb400 	call	80fb40 <__udivsi3>
  80dd4c:	8809883a 	mov	r4,r17
  80dd50:	a80b883a 	mov	r5,r21
  80dd54:	1029883a 	mov	r20,r2
  80dd58:	080fb480 	call	80fb48 <__umodsi3>
  80dd5c:	1004943a 	slli	r2,r2,16
  80dd60:	bd09383a 	mul	r4,r23,r20
  80dd64:	e0ffffcc 	andi	r3,fp,65535
  80dd68:	10c4b03a 	or	r2,r2,r3
  80dd6c:	1100042e 	bgeu	r2,r4,80dd80 <__udivdi3+0x298>
  80dd70:	8085883a 	add	r2,r16,r2
  80dd74:	a53fffc4 	addi	r20,r20,-1
  80dd78:	14000136 	bltu	r2,r16,80dd80 <__udivdi3+0x298>
  80dd7c:	1100c736 	bltu	r2,r4,80e09c <__udivdi3+0x5b4>
  80dd80:	b004943a 	slli	r2,r22,16
  80dd84:	0009883a 	mov	r4,zero
  80dd88:	a084b03a 	or	r2,r20,r2
  80dd8c:	003fb706 	br	80dc6c <__udivdi3+0x184>
  80dd90:	00804034 	movhi	r2,256
  80dd94:	10bfffc4 	addi	r2,r2,-1
  80dd98:	11c0a436 	bltu	r2,r7,80e02c <__udivdi3+0x544>
  80dd9c:	01400404 	movi	r5,16
  80dda0:	2805883a 	mov	r2,r5
  80dda4:	003fa406 	br	80dc38 <__udivdi3+0x150>
  80dda8:	0005883a 	mov	r2,zero
  80ddac:	0009883a 	mov	r4,zero
  80ddb0:	003fae06 	br	80dc6c <__udivdi3+0x184>
  80ddb4:	00804034 	movhi	r2,256
  80ddb8:	10bfffc4 	addi	r2,r2,-1
  80ddbc:	1400a136 	bltu	r2,r16,80e044 <__udivdi3+0x55c>
  80ddc0:	01400404 	movi	r5,16
  80ddc4:	2805883a 	mov	r2,r5
  80ddc8:	003f6006 	br	80db4c <__udivdi3+0x64>
  80ddcc:	01000044 	movi	r4,1
  80ddd0:	000b883a 	mov	r5,zero
  80ddd4:	080fb400 	call	80fb40 <__udivsi3>
  80ddd8:	1021883a 	mov	r16,r2
  80dddc:	00bfffd4 	movui	r2,65535
  80dde0:	143ff436 	bltu	r2,r16,80ddb4 <__udivdi3+0x2cc>
  80dde4:	003f5506 	br	80db3c <__udivdi3+0x54>
  80dde8:	00804034 	movhi	r2,256
  80ddec:	10bfffc4 	addi	r2,r2,-1
  80ddf0:	12009a36 	bltu	r2,r8,80e05c <__udivdi3+0x574>
  80ddf4:	01400404 	movi	r5,16
  80ddf8:	2805883a 	mov	r2,r5
  80ddfc:	003fae06 	br	80dcb8 <__udivdi3+0x1d0>
  80de00:	3dc5c83a 	sub	r2,r7,r23
  80de04:	35c8983a 	sll	r4,r6,r23
  80de08:	8086d83a 	srl	r3,r16,r2
  80de0c:	a0a2d83a 	srl	r17,r20,r2
  80de10:	e084d83a 	srl	r2,fp,r2
  80de14:	20eab03a 	or	r21,r4,r3
  80de18:	a82cd43a 	srli	r22,r21,16
  80de1c:	a5c6983a 	sll	r3,r20,r23
  80de20:	8809883a 	mov	r4,r17
  80de24:	b00b883a 	mov	r5,r22
  80de28:	1886b03a 	or	r3,r3,r2
  80de2c:	d8c00215 	stw	r3,8(sp)
  80de30:	080fb400 	call	80fb40 <__udivsi3>
  80de34:	8809883a 	mov	r4,r17
  80de38:	b00b883a 	mov	r5,r22
  80de3c:	1029883a 	mov	r20,r2
  80de40:	080fb480 	call	80fb48 <__umodsi3>
  80de44:	a8ffffcc 	andi	r3,r21,65535
  80de48:	d8c00515 	stw	r3,20(sp)
  80de4c:	d9000217 	ldw	r4,8(sp)
  80de50:	d9400517 	ldw	r5,20(sp)
  80de54:	1004943a 	slli	r2,r2,16
  80de58:	2006d43a 	srli	r3,r4,16
  80de5c:	85e0983a 	sll	r16,r16,r23
  80de60:	2d23383a 	mul	r17,r5,r20
  80de64:	10c4b03a 	or	r2,r2,r3
  80de68:	dc000015 	stw	r16,0(sp)
  80de6c:	1440032e 	bgeu	r2,r17,80de7c <__udivdi3+0x394>
  80de70:	1545883a 	add	r2,r2,r21
  80de74:	a53fffc4 	addi	r20,r20,-1
  80de78:	15407f2e 	bgeu	r2,r21,80e078 <__udivdi3+0x590>
  80de7c:	1463c83a 	sub	r17,r2,r17
  80de80:	8809883a 	mov	r4,r17
  80de84:	b00b883a 	mov	r5,r22
  80de88:	080fb400 	call	80fb40 <__udivsi3>
  80de8c:	8809883a 	mov	r4,r17
  80de90:	b00b883a 	mov	r5,r22
  80de94:	1021883a 	mov	r16,r2
  80de98:	080fb480 	call	80fb48 <__umodsi3>
  80de9c:	d8c00517 	ldw	r3,20(sp)
  80dea0:	d9000217 	ldw	r4,8(sp)
  80dea4:	1004943a 	slli	r2,r2,16
  80dea8:	1c0f383a 	mul	r7,r3,r16
  80deac:	20ffffcc 	andi	r3,r4,65535
  80deb0:	10e2b03a 	or	r17,r2,r3
  80deb4:	89c0032e 	bgeu	r17,r7,80dec4 <__udivdi3+0x3dc>
  80deb8:	8d63883a 	add	r17,r17,r21
  80debc:	843fffc4 	addi	r16,r16,-1
  80dec0:	8d40692e 	bgeu	r17,r21,80e068 <__udivdi3+0x580>
  80dec4:	a008943a 	slli	r4,r20,16
  80dec8:	d9400017 	ldw	r5,0(sp)
  80decc:	89e3c83a 	sub	r17,r17,r7
  80ded0:	8110b03a 	or	r8,r16,r4
  80ded4:	280cd43a 	srli	r6,r5,16
  80ded8:	28ffffcc 	andi	r3,r5,65535
  80dedc:	40bfffcc 	andi	r2,r8,65535
  80dee0:	400ad43a 	srli	r5,r8,16
  80dee4:	10d3383a 	mul	r9,r2,r3
  80dee8:	1185383a 	mul	r2,r2,r6
  80deec:	28c7383a 	mul	r3,r5,r3
  80def0:	4808d43a 	srli	r4,r9,16
  80def4:	298b383a 	mul	r5,r5,r6
  80def8:	10c5883a 	add	r2,r2,r3
  80defc:	2089883a 	add	r4,r4,r2
  80df00:	20c0022e 	bgeu	r4,r3,80df0c <__udivdi3+0x424>
  80df04:	00800074 	movhi	r2,1
  80df08:	288b883a 	add	r5,r5,r2
  80df0c:	2004d43a 	srli	r2,r4,16
  80df10:	288b883a 	add	r5,r5,r2
  80df14:	89403f36 	bltu	r17,r5,80e014 <__udivdi3+0x52c>
  80df18:	89403926 	beq	r17,r5,80e000 <__udivdi3+0x518>
  80df1c:	4005883a 	mov	r2,r8
  80df20:	0009883a 	mov	r4,zero
  80df24:	003f5106 	br	80dc6c <__udivdi3+0x184>
  80df28:	85a0983a 	sll	r16,r16,r22
  80df2c:	3585c83a 	sub	r2,r6,r22
  80df30:	a0a2d83a 	srl	r17,r20,r2
  80df34:	802ad43a 	srli	r21,r16,16
  80df38:	e084d83a 	srl	r2,fp,r2
  80df3c:	a586983a 	sll	r3,r20,r22
  80df40:	8809883a 	mov	r4,r17
  80df44:	a80b883a 	mov	r5,r21
  80df48:	1886b03a 	or	r3,r3,r2
  80df4c:	d8c00115 	stw	r3,4(sp)
  80df50:	080fb400 	call	80fb40 <__udivsi3>
  80df54:	8809883a 	mov	r4,r17
  80df58:	a80b883a 	mov	r5,r21
  80df5c:	d8800415 	stw	r2,16(sp)
  80df60:	080fb480 	call	80fb48 <__umodsi3>
  80df64:	d9000117 	ldw	r4,4(sp)
  80df68:	d9400417 	ldw	r5,16(sp)
  80df6c:	1004943a 	slli	r2,r2,16
  80df70:	85ffffcc 	andi	r23,r16,65535
  80df74:	2006d43a 	srli	r3,r4,16
  80df78:	b963383a 	mul	r17,r23,r5
  80df7c:	10c4b03a 	or	r2,r2,r3
  80df80:	1440042e 	bgeu	r2,r17,80df94 <__udivdi3+0x4ac>
  80df84:	297fffc4 	addi	r5,r5,-1
  80df88:	1405883a 	add	r2,r2,r16
  80df8c:	d9400415 	stw	r5,16(sp)
  80df90:	1400442e 	bgeu	r2,r16,80e0a4 <__udivdi3+0x5bc>
  80df94:	1463c83a 	sub	r17,r2,r17
  80df98:	8809883a 	mov	r4,r17
  80df9c:	a80b883a 	mov	r5,r21
  80dfa0:	080fb400 	call	80fb40 <__udivsi3>
  80dfa4:	8809883a 	mov	r4,r17
  80dfa8:	a80b883a 	mov	r5,r21
  80dfac:	1029883a 	mov	r20,r2
  80dfb0:	080fb480 	call	80fb48 <__umodsi3>
  80dfb4:	d9400117 	ldw	r5,4(sp)
  80dfb8:	1004943a 	slli	r2,r2,16
  80dfbc:	bd09383a 	mul	r4,r23,r20
  80dfc0:	28ffffcc 	andi	r3,r5,65535
  80dfc4:	10c6b03a 	or	r3,r2,r3
  80dfc8:	1900062e 	bgeu	r3,r4,80dfe4 <__udivdi3+0x4fc>
  80dfcc:	1c07883a 	add	r3,r3,r16
  80dfd0:	a53fffc4 	addi	r20,r20,-1
  80dfd4:	1c000336 	bltu	r3,r16,80dfe4 <__udivdi3+0x4fc>
  80dfd8:	1900022e 	bgeu	r3,r4,80dfe4 <__udivdi3+0x4fc>
  80dfdc:	a53fffc4 	addi	r20,r20,-1
  80dfe0:	1c07883a 	add	r3,r3,r16
  80dfe4:	d9400417 	ldw	r5,16(sp)
  80dfe8:	e5b8983a 	sll	fp,fp,r22
  80dfec:	1923c83a 	sub	r17,r3,r4
  80dff0:	2804943a 	slli	r2,r5,16
  80dff4:	a0a8b03a 	or	r20,r20,r2
  80dff8:	dd000315 	stw	r20,12(sp)
  80dffc:	003ee106 	br	80db84 <__udivdi3+0x9c>
  80e000:	2004943a 	slli	r2,r4,16
  80e004:	e5c8983a 	sll	r4,fp,r23
  80e008:	48ffffcc 	andi	r3,r9,65535
  80e00c:	10c5883a 	add	r2,r2,r3
  80e010:	20bfc22e 	bgeu	r4,r2,80df1c <__udivdi3+0x434>
  80e014:	40bfffc4 	addi	r2,r8,-1
  80e018:	0009883a 	mov	r4,zero
  80e01c:	003f1306 	br	80dc6c <__udivdi3+0x184>
  80e020:	01400204 	movi	r5,8
  80e024:	2805883a 	mov	r2,r5
  80e028:	003f0306 	br	80dc38 <__udivdi3+0x150>
  80e02c:	01400604 	movi	r5,24
  80e030:	2805883a 	mov	r2,r5
  80e034:	003f0006 	br	80dc38 <__udivdi3+0x150>
  80e038:	01400204 	movi	r5,8
  80e03c:	2805883a 	mov	r2,r5
  80e040:	003ec206 	br	80db4c <__udivdi3+0x64>
  80e044:	01400604 	movi	r5,24
  80e048:	2805883a 	mov	r2,r5
  80e04c:	003ebf06 	br	80db4c <__udivdi3+0x64>
  80e050:	01400204 	movi	r5,8
  80e054:	2805883a 	mov	r2,r5
  80e058:	003f1706 	br	80dcb8 <__udivdi3+0x1d0>
  80e05c:	01400604 	movi	r5,24
  80e060:	2805883a 	mov	r2,r5
  80e064:	003f1406 	br	80dcb8 <__udivdi3+0x1d0>
  80e068:	89ff962e 	bgeu	r17,r7,80dec4 <__udivdi3+0x3dc>
  80e06c:	8d63883a 	add	r17,r17,r21
  80e070:	843fffc4 	addi	r16,r16,-1
  80e074:	003f9306 	br	80dec4 <__udivdi3+0x3dc>
  80e078:	147f802e 	bgeu	r2,r17,80de7c <__udivdi3+0x394>
  80e07c:	a53fffc4 	addi	r20,r20,-1
  80e080:	1545883a 	add	r2,r2,r21
  80e084:	003f7d06 	br	80de7c <__udivdi3+0x394>
  80e088:	a53fffc4 	addi	r20,r20,-1
  80e08c:	003ede06 	br	80dc08 <__udivdi3+0x120>
  80e090:	b5bfffc4 	addi	r22,r22,-1
  80e094:	1405883a 	add	r2,r2,r16
  80e098:	003f2806 	br	80dd3c <__udivdi3+0x254>
  80e09c:	a53fffc4 	addi	r20,r20,-1
  80e0a0:	003f3706 	br	80dd80 <__udivdi3+0x298>
  80e0a4:	147fbb2e 	bgeu	r2,r17,80df94 <__udivdi3+0x4ac>
  80e0a8:	297fffc4 	addi	r5,r5,-1
  80e0ac:	1405883a 	add	r2,r2,r16
  80e0b0:	d9400415 	stw	r5,16(sp)
  80e0b4:	003fb706 	br	80df94 <__udivdi3+0x4ac>
  80e0b8:	b5bfffc4 	addi	r22,r22,-1
  80e0bc:	1405883a 	add	r2,r2,r16
  80e0c0:	003ec006 	br	80dbc4 <__udivdi3+0xdc>

0080e0c4 <__umoddi3>:
  80e0c4:	defff104 	addi	sp,sp,-60
  80e0c8:	dd800b15 	stw	r22,44(sp)
  80e0cc:	dd000915 	stw	r20,36(sp)
  80e0d0:	dc000515 	stw	r16,20(sp)
  80e0d4:	dfc00e15 	stw	ra,56(sp)
  80e0d8:	df000d15 	stw	fp,52(sp)
  80e0dc:	ddc00c15 	stw	r23,48(sp)
  80e0e0:	dd400a15 	stw	r21,40(sp)
  80e0e4:	dcc00815 	stw	r19,32(sp)
  80e0e8:	dc800715 	stw	r18,28(sp)
  80e0ec:	dc400615 	stw	r17,24(sp)
  80e0f0:	3021883a 	mov	r16,r6
  80e0f4:	202d883a 	mov	r22,r4
  80e0f8:	2829883a 	mov	r20,r5
  80e0fc:	38002b1e 	bne	r7,zero,80e1ac <__umoddi3+0xe8>
  80e100:	29805036 	bltu	r5,r6,80e244 <__umoddi3+0x180>
  80e104:	30008a26 	beq	r6,zero,80e330 <__umoddi3+0x26c>
  80e108:	00bfffd4 	movui	r2,65535
  80e10c:	14008236 	bltu	r2,r16,80e318 <__umoddi3+0x254>
  80e110:	00803fc4 	movi	r2,255
  80e114:	14013636 	bltu	r2,r16,80e5f0 <__umoddi3+0x52c>
  80e118:	000b883a 	mov	r5,zero
  80e11c:	0005883a 	mov	r2,zero
  80e120:	8084d83a 	srl	r2,r16,r2
  80e124:	01002074 	movhi	r4,129
  80e128:	21142104 	addi	r4,r4,20612
  80e12c:	01800804 	movi	r6,32
  80e130:	1105883a 	add	r2,r2,r4
  80e134:	10c00003 	ldbu	r3,0(r2)
  80e138:	28c7883a 	add	r3,r5,r3
  80e13c:	30efc83a 	sub	r23,r6,r3
  80e140:	b800941e 	bne	r23,zero,80e394 <__umoddi3+0x2d0>
  80e144:	802ad43a 	srli	r21,r16,16
  80e148:	a423c83a 	sub	r17,r20,r16
  80e14c:	0039883a 	mov	fp,zero
  80e150:	853fffcc 	andi	r20,r16,65535
  80e154:	8809883a 	mov	r4,r17
  80e158:	a80b883a 	mov	r5,r21
  80e15c:	080fb400 	call	80fb40 <__udivsi3>
  80e160:	8809883a 	mov	r4,r17
  80e164:	a80b883a 	mov	r5,r21
  80e168:	a0a3383a 	mul	r17,r20,r2
  80e16c:	080fb480 	call	80fb48 <__umodsi3>
  80e170:	1004943a 	slli	r2,r2,16
  80e174:	b006d43a 	srli	r3,r22,16
  80e178:	10c4b03a 	or	r2,r2,r3
  80e17c:	1440032e 	bgeu	r2,r17,80e18c <__umoddi3+0xc8>
  80e180:	1405883a 	add	r2,r2,r16
  80e184:	14000136 	bltu	r2,r16,80e18c <__umoddi3+0xc8>
  80e188:	14413536 	bltu	r2,r17,80e660 <__umoddi3+0x59c>
  80e18c:	1463c83a 	sub	r17,r2,r17
  80e190:	8809883a 	mov	r4,r17
  80e194:	a80b883a 	mov	r5,r21
  80e198:	080fb400 	call	80fb40 <__udivsi3>
  80e19c:	8809883a 	mov	r4,r17
  80e1a0:	a0a3383a 	mul	r17,r20,r2
  80e1a4:	a80b883a 	mov	r5,r21
  80e1a8:	00004d06 	br	80e2e0 <__umoddi3+0x21c>
  80e1ac:	380d883a 	mov	r6,r7
  80e1b0:	29c0102e 	bgeu	r5,r7,80e1f4 <__umoddi3+0x130>
  80e1b4:	2011883a 	mov	r8,r4
  80e1b8:	2813883a 	mov	r9,r5
  80e1bc:	4005883a 	mov	r2,r8
  80e1c0:	4807883a 	mov	r3,r9
  80e1c4:	dfc00e17 	ldw	ra,56(sp)
  80e1c8:	df000d17 	ldw	fp,52(sp)
  80e1cc:	ddc00c17 	ldw	r23,48(sp)
  80e1d0:	dd800b17 	ldw	r22,44(sp)
  80e1d4:	dd400a17 	ldw	r21,40(sp)
  80e1d8:	dd000917 	ldw	r20,36(sp)
  80e1dc:	dcc00817 	ldw	r19,32(sp)
  80e1e0:	dc800717 	ldw	r18,28(sp)
  80e1e4:	dc400617 	ldw	r17,24(sp)
  80e1e8:	dc000517 	ldw	r16,20(sp)
  80e1ec:	dec00f04 	addi	sp,sp,60
  80e1f0:	f800283a 	ret
  80e1f4:	00bfffd4 	movui	r2,65535
  80e1f8:	11c05a36 	bltu	r2,r7,80e364 <__umoddi3+0x2a0>
  80e1fc:	00803fc4 	movi	r2,255
  80e200:	11c0fe36 	bltu	r2,r7,80e5fc <__umoddi3+0x538>
  80e204:	000b883a 	mov	r5,zero
  80e208:	0005883a 	mov	r2,zero
  80e20c:	3084d83a 	srl	r2,r6,r2
  80e210:	01002074 	movhi	r4,129
  80e214:	21142104 	addi	r4,r4,20612
  80e218:	01c00804 	movi	r7,32
  80e21c:	1105883a 	add	r2,r2,r4
  80e220:	10c00003 	ldbu	r3,0(r2)
  80e224:	28c7883a 	add	r3,r5,r3
  80e228:	38ebc83a 	sub	r21,r7,r3
  80e22c:	a800851e 	bne	r21,zero,80e444 <__umoddi3+0x380>
  80e230:	35005236 	bltu	r6,r20,80e37c <__umoddi3+0x2b8>
  80e234:	b400512e 	bgeu	r22,r16,80e37c <__umoddi3+0x2b8>
  80e238:	b011883a 	mov	r8,r22
  80e23c:	a013883a 	mov	r9,r20
  80e240:	003fde06 	br	80e1bc <__umoddi3+0xf8>
  80e244:	00bfffd4 	movui	r2,65535
  80e248:	11804036 	bltu	r2,r6,80e34c <__umoddi3+0x288>
  80e24c:	00803fc4 	movi	r2,255
  80e250:	1180ed36 	bltu	r2,r6,80e608 <__umoddi3+0x544>
  80e254:	000b883a 	mov	r5,zero
  80e258:	0005883a 	mov	r2,zero
  80e25c:	8084d83a 	srl	r2,r16,r2
  80e260:	01002074 	movhi	r4,129
  80e264:	21142104 	addi	r4,r4,20612
  80e268:	01800804 	movi	r6,32
  80e26c:	1105883a 	add	r2,r2,r4
  80e270:	10c00003 	ldbu	r3,0(r2)
  80e274:	28c7883a 	add	r3,r5,r3
  80e278:	30c7c83a 	sub	r3,r6,r3
  80e27c:	1800bf1e 	bne	r3,zero,80e57c <__umoddi3+0x4b8>
  80e280:	0039883a 	mov	fp,zero
  80e284:	802ad43a 	srli	r21,r16,16
  80e288:	a009883a 	mov	r4,r20
  80e28c:	85ffffcc 	andi	r23,r16,65535
  80e290:	a80b883a 	mov	r5,r21
  80e294:	080fb400 	call	80fb40 <__udivsi3>
  80e298:	a009883a 	mov	r4,r20
  80e29c:	a80b883a 	mov	r5,r21
  80e2a0:	b8a3383a 	mul	r17,r23,r2
  80e2a4:	080fb480 	call	80fb48 <__umodsi3>
  80e2a8:	1004943a 	slli	r2,r2,16
  80e2ac:	b006d43a 	srli	r3,r22,16
  80e2b0:	10c4b03a 	or	r2,r2,r3
  80e2b4:	1440032e 	bgeu	r2,r17,80e2c4 <__umoddi3+0x200>
  80e2b8:	1405883a 	add	r2,r2,r16
  80e2bc:	14000136 	bltu	r2,r16,80e2c4 <__umoddi3+0x200>
  80e2c0:	1440e536 	bltu	r2,r17,80e658 <__umoddi3+0x594>
  80e2c4:	1463c83a 	sub	r17,r2,r17
  80e2c8:	8809883a 	mov	r4,r17
  80e2cc:	a80b883a 	mov	r5,r21
  80e2d0:	080fb400 	call	80fb40 <__udivsi3>
  80e2d4:	8809883a 	mov	r4,r17
  80e2d8:	b8a3383a 	mul	r17,r23,r2
  80e2dc:	a80b883a 	mov	r5,r21
  80e2e0:	080fb480 	call	80fb48 <__umodsi3>
  80e2e4:	1004943a 	slli	r2,r2,16
  80e2e8:	b0ffffcc 	andi	r3,r22,65535
  80e2ec:	10c4b03a 	or	r2,r2,r3
  80e2f0:	1440042e 	bgeu	r2,r17,80e304 <__umoddi3+0x240>
  80e2f4:	1405883a 	add	r2,r2,r16
  80e2f8:	14000236 	bltu	r2,r16,80e304 <__umoddi3+0x240>
  80e2fc:	1440012e 	bgeu	r2,r17,80e304 <__umoddi3+0x240>
  80e300:	1405883a 	add	r2,r2,r16
  80e304:	1445c83a 	sub	r2,r2,r17
  80e308:	1724d83a 	srl	r18,r2,fp
  80e30c:	0013883a 	mov	r9,zero
  80e310:	9011883a 	mov	r8,r18
  80e314:	003fa906 	br	80e1bc <__umoddi3+0xf8>
  80e318:	00804034 	movhi	r2,256
  80e31c:	10bfffc4 	addi	r2,r2,-1
  80e320:	1400b036 	bltu	r2,r16,80e5e4 <__umoddi3+0x520>
  80e324:	01400404 	movi	r5,16
  80e328:	2805883a 	mov	r2,r5
  80e32c:	003f7c06 	br	80e120 <__umoddi3+0x5c>
  80e330:	01000044 	movi	r4,1
  80e334:	000b883a 	mov	r5,zero
  80e338:	080fb400 	call	80fb40 <__udivsi3>
  80e33c:	1021883a 	mov	r16,r2
  80e340:	00bfffd4 	movui	r2,65535
  80e344:	143ff436 	bltu	r2,r16,80e318 <__umoddi3+0x254>
  80e348:	003f7106 	br	80e110 <__umoddi3+0x4c>
  80e34c:	00804034 	movhi	r2,256
  80e350:	10bfffc4 	addi	r2,r2,-1
  80e354:	1180af36 	bltu	r2,r6,80e614 <__umoddi3+0x550>
  80e358:	01400404 	movi	r5,16
  80e35c:	2805883a 	mov	r2,r5
  80e360:	003fbe06 	br	80e25c <__umoddi3+0x198>
  80e364:	00804034 	movhi	r2,256
  80e368:	10bfffc4 	addi	r2,r2,-1
  80e36c:	11c0ac36 	bltu	r2,r7,80e620 <__umoddi3+0x55c>
  80e370:	01400404 	movi	r5,16
  80e374:	2805883a 	mov	r2,r5
  80e378:	003fa406 	br	80e20c <__umoddi3+0x148>
  80e37c:	b409c83a 	sub	r4,r22,r16
  80e380:	b105803a 	cmpltu	r2,r22,r4
  80e384:	a187c83a 	sub	r3,r20,r6
  80e388:	18a9c83a 	sub	r20,r3,r2
  80e38c:	202d883a 	mov	r22,r4
  80e390:	003fa906 	br	80e238 <__umoddi3+0x174>
  80e394:	85e0983a 	sll	r16,r16,r23
  80e398:	35c5c83a 	sub	r2,r6,r23
  80e39c:	a0a2d83a 	srl	r17,r20,r2
  80e3a0:	802ad43a 	srli	r21,r16,16
  80e3a4:	b084d83a 	srl	r2,r22,r2
  80e3a8:	a5c6983a 	sll	r3,r20,r23
  80e3ac:	8809883a 	mov	r4,r17
  80e3b0:	a80b883a 	mov	r5,r21
  80e3b4:	1886b03a 	or	r3,r3,r2
  80e3b8:	d8c00115 	stw	r3,4(sp)
  80e3bc:	853fffcc 	andi	r20,r16,65535
  80e3c0:	080fb400 	call	80fb40 <__udivsi3>
  80e3c4:	8809883a 	mov	r4,r17
  80e3c8:	a80b883a 	mov	r5,r21
  80e3cc:	a0a3383a 	mul	r17,r20,r2
  80e3d0:	080fb480 	call	80fb48 <__umodsi3>
  80e3d4:	d9000117 	ldw	r4,4(sp)
  80e3d8:	1004943a 	slli	r2,r2,16
  80e3dc:	b839883a 	mov	fp,r23
  80e3e0:	2006d43a 	srli	r3,r4,16
  80e3e4:	10c4b03a 	or	r2,r2,r3
  80e3e8:	1440022e 	bgeu	r2,r17,80e3f4 <__umoddi3+0x330>
  80e3ec:	1405883a 	add	r2,r2,r16
  80e3f0:	1400962e 	bgeu	r2,r16,80e64c <__umoddi3+0x588>
  80e3f4:	1463c83a 	sub	r17,r2,r17
  80e3f8:	8809883a 	mov	r4,r17
  80e3fc:	a80b883a 	mov	r5,r21
  80e400:	080fb400 	call	80fb40 <__udivsi3>
  80e404:	8809883a 	mov	r4,r17
  80e408:	a80b883a 	mov	r5,r21
  80e40c:	a0a3383a 	mul	r17,r20,r2
  80e410:	080fb480 	call	80fb48 <__umodsi3>
  80e414:	d9400117 	ldw	r5,4(sp)
  80e418:	1004943a 	slli	r2,r2,16
  80e41c:	28ffffcc 	andi	r3,r5,65535
  80e420:	10c4b03a 	or	r2,r2,r3
  80e424:	1440042e 	bgeu	r2,r17,80e438 <__umoddi3+0x374>
  80e428:	1405883a 	add	r2,r2,r16
  80e42c:	14000236 	bltu	r2,r16,80e438 <__umoddi3+0x374>
  80e430:	1440012e 	bgeu	r2,r17,80e438 <__umoddi3+0x374>
  80e434:	1405883a 	add	r2,r2,r16
  80e438:	b5ec983a 	sll	r22,r22,r23
  80e43c:	1463c83a 	sub	r17,r2,r17
  80e440:	003f4406 	br	80e154 <__umoddi3+0x90>
  80e444:	3d4fc83a 	sub	r7,r7,r21
  80e448:	3546983a 	sll	r3,r6,r21
  80e44c:	81c4d83a 	srl	r2,r16,r7
  80e450:	a1e2d83a 	srl	r17,r20,r7
  80e454:	a54c983a 	sll	r6,r20,r21
  80e458:	18aeb03a 	or	r23,r3,r2
  80e45c:	b828d43a 	srli	r20,r23,16
  80e460:	b1c4d83a 	srl	r2,r22,r7
  80e464:	8809883a 	mov	r4,r17
  80e468:	a00b883a 	mov	r5,r20
  80e46c:	308cb03a 	or	r6,r6,r2
  80e470:	d9c00315 	stw	r7,12(sp)
  80e474:	d9800215 	stw	r6,8(sp)
  80e478:	080fb400 	call	80fb40 <__udivsi3>
  80e47c:	8809883a 	mov	r4,r17
  80e480:	a00b883a 	mov	r5,r20
  80e484:	1039883a 	mov	fp,r2
  80e488:	080fb480 	call	80fb48 <__umodsi3>
  80e48c:	b8ffffcc 	andi	r3,r23,65535
  80e490:	d8c00415 	stw	r3,16(sp)
  80e494:	d9000217 	ldw	r4,8(sp)
  80e498:	d9400417 	ldw	r5,16(sp)
  80e49c:	1004943a 	slli	r2,r2,16
  80e4a0:	2006d43a 	srli	r3,r4,16
  80e4a4:	8560983a 	sll	r16,r16,r21
  80e4a8:	2f23383a 	mul	r17,r5,fp
  80e4ac:	10c4b03a 	or	r2,r2,r3
  80e4b0:	dc000015 	stw	r16,0(sp)
  80e4b4:	b56c983a 	sll	r22,r22,r21
  80e4b8:	1440032e 	bgeu	r2,r17,80e4c8 <__umoddi3+0x404>
  80e4bc:	15c5883a 	add	r2,r2,r23
  80e4c0:	e73fffc4 	addi	fp,fp,-1
  80e4c4:	15c05d2e 	bgeu	r2,r23,80e63c <__umoddi3+0x578>
  80e4c8:	1463c83a 	sub	r17,r2,r17
  80e4cc:	8809883a 	mov	r4,r17
  80e4d0:	a00b883a 	mov	r5,r20
  80e4d4:	080fb400 	call	80fb40 <__udivsi3>
  80e4d8:	8809883a 	mov	r4,r17
  80e4dc:	a00b883a 	mov	r5,r20
  80e4e0:	1021883a 	mov	r16,r2
  80e4e4:	080fb480 	call	80fb48 <__umodsi3>
  80e4e8:	d8c00417 	ldw	r3,16(sp)
  80e4ec:	d9000217 	ldw	r4,8(sp)
  80e4f0:	1004943a 	slli	r2,r2,16
  80e4f4:	1c23383a 	mul	r17,r3,r16
  80e4f8:	20ffffcc 	andi	r3,r4,65535
  80e4fc:	10ceb03a 	or	r7,r2,r3
  80e500:	3c40032e 	bgeu	r7,r17,80e510 <__umoddi3+0x44c>
  80e504:	3dcf883a 	add	r7,r7,r23
  80e508:	843fffc4 	addi	r16,r16,-1
  80e50c:	3dc0472e 	bgeu	r7,r23,80e62c <__umoddi3+0x568>
  80e510:	e004943a 	slli	r2,fp,16
  80e514:	d9400017 	ldw	r5,0(sp)
  80e518:	3c4fc83a 	sub	r7,r7,r17
  80e51c:	8084b03a 	or	r2,r16,r2
  80e520:	28ffffcc 	andi	r3,r5,65535
  80e524:	280cd43a 	srli	r6,r5,16
  80e528:	100ad43a 	srli	r5,r2,16
  80e52c:	10bfffcc 	andi	r2,r2,65535
  80e530:	10d1383a 	mul	r8,r2,r3
  80e534:	28c7383a 	mul	r3,r5,r3
  80e538:	1185383a 	mul	r2,r2,r6
  80e53c:	4008d43a 	srli	r4,r8,16
  80e540:	298b383a 	mul	r5,r5,r6
  80e544:	10c5883a 	add	r2,r2,r3
  80e548:	2089883a 	add	r4,r4,r2
  80e54c:	20c0022e 	bgeu	r4,r3,80e558 <__umoddi3+0x494>
  80e550:	00800074 	movhi	r2,1
  80e554:	288b883a 	add	r5,r5,r2
  80e558:	2004d43a 	srli	r2,r4,16
  80e55c:	2008943a 	slli	r4,r4,16
  80e560:	40ffffcc 	andi	r3,r8,65535
  80e564:	288b883a 	add	r5,r5,r2
  80e568:	20c9883a 	add	r4,r4,r3
  80e56c:	39400b36 	bltu	r7,r5,80e59c <__umoddi3+0x4d8>
  80e570:	39403d26 	beq	r7,r5,80e668 <__umoddi3+0x5a4>
  80e574:	394bc83a 	sub	r5,r7,r5
  80e578:	00000f06 	br	80e5b8 <__umoddi3+0x4f4>
  80e57c:	30c5c83a 	sub	r2,r6,r3
  80e580:	1839883a 	mov	fp,r3
  80e584:	b084d83a 	srl	r2,r22,r2
  80e588:	a0c6983a 	sll	r3,r20,r3
  80e58c:	8720983a 	sll	r16,r16,fp
  80e590:	b72c983a 	sll	r22,r22,fp
  80e594:	18a8b03a 	or	r20,r3,r2
  80e598:	003f3a06 	br	80e284 <__umoddi3+0x1c0>
  80e59c:	d8c00017 	ldw	r3,0(sp)
  80e5a0:	20c5c83a 	sub	r2,r4,r3
  80e5a4:	2089803a 	cmpltu	r4,r4,r2
  80e5a8:	2dc7c83a 	sub	r3,r5,r23
  80e5ac:	1907c83a 	sub	r3,r3,r4
  80e5b0:	38cbc83a 	sub	r5,r7,r3
  80e5b4:	1009883a 	mov	r4,r2
  80e5b8:	b105c83a 	sub	r2,r22,r4
  80e5bc:	b087803a 	cmpltu	r3,r22,r2
  80e5c0:	28c7c83a 	sub	r3,r5,r3
  80e5c4:	d9400317 	ldw	r5,12(sp)
  80e5c8:	1544d83a 	srl	r2,r2,r21
  80e5cc:	1948983a 	sll	r4,r3,r5
  80e5d0:	1d46d83a 	srl	r3,r3,r21
  80e5d4:	20a4b03a 	or	r18,r4,r2
  80e5d8:	9011883a 	mov	r8,r18
  80e5dc:	1813883a 	mov	r9,r3
  80e5e0:	003ef606 	br	80e1bc <__umoddi3+0xf8>
  80e5e4:	01400604 	movi	r5,24
  80e5e8:	2805883a 	mov	r2,r5
  80e5ec:	003ecc06 	br	80e120 <__umoddi3+0x5c>
  80e5f0:	01400204 	movi	r5,8
  80e5f4:	2805883a 	mov	r2,r5
  80e5f8:	003ec906 	br	80e120 <__umoddi3+0x5c>
  80e5fc:	01400204 	movi	r5,8
  80e600:	2805883a 	mov	r2,r5
  80e604:	003f0106 	br	80e20c <__umoddi3+0x148>
  80e608:	01400204 	movi	r5,8
  80e60c:	2805883a 	mov	r2,r5
  80e610:	003f1206 	br	80e25c <__umoddi3+0x198>
  80e614:	01400604 	movi	r5,24
  80e618:	2805883a 	mov	r2,r5
  80e61c:	003f0f06 	br	80e25c <__umoddi3+0x198>
  80e620:	01400604 	movi	r5,24
  80e624:	2805883a 	mov	r2,r5
  80e628:	003ef806 	br	80e20c <__umoddi3+0x148>
  80e62c:	3c7fb82e 	bgeu	r7,r17,80e510 <__umoddi3+0x44c>
  80e630:	843fffc4 	addi	r16,r16,-1
  80e634:	3dcf883a 	add	r7,r7,r23
  80e638:	003fb506 	br	80e510 <__umoddi3+0x44c>
  80e63c:	147fa22e 	bgeu	r2,r17,80e4c8 <__umoddi3+0x404>
  80e640:	e73fffc4 	addi	fp,fp,-1
  80e644:	15c5883a 	add	r2,r2,r23
  80e648:	003f9f06 	br	80e4c8 <__umoddi3+0x404>
  80e64c:	147f692e 	bgeu	r2,r17,80e3f4 <__umoddi3+0x330>
  80e650:	1405883a 	add	r2,r2,r16
  80e654:	003f6706 	br	80e3f4 <__umoddi3+0x330>
  80e658:	1405883a 	add	r2,r2,r16
  80e65c:	003f1906 	br	80e2c4 <__umoddi3+0x200>
  80e660:	1405883a 	add	r2,r2,r16
  80e664:	003ec906 	br	80e18c <__umoddi3+0xc8>
  80e668:	b13fcc36 	bltu	r22,r4,80e59c <__umoddi3+0x4d8>
  80e66c:	000b883a 	mov	r5,zero
  80e670:	003fd106 	br	80e5b8 <__umoddi3+0x4f4>

0080e674 <__nesf2>:
  80e674:	defff304 	addi	sp,sp,-52
  80e678:	dc400b15 	stw	r17,44(sp)
  80e67c:	dc400204 	addi	r17,sp,8
  80e680:	dc000a15 	stw	r16,40(sp)
  80e684:	d9000015 	stw	r4,0(sp)
  80e688:	d9400115 	stw	r5,4(sp)
  80e68c:	d809883a 	mov	r4,sp
  80e690:	880b883a 	mov	r5,r17
  80e694:	dc000604 	addi	r16,sp,24
  80e698:	dfc00c15 	stw	ra,48(sp)
  80e69c:	080fbd00 	call	80fbd0 <__unpack_f>
  80e6a0:	d9000104 	addi	r4,sp,4
  80e6a4:	800b883a 	mov	r5,r16
  80e6a8:	080fbd00 	call	80fbd0 <__unpack_f>
  80e6ac:	d8800217 	ldw	r2,8(sp)
  80e6b0:	00c00044 	movi	r3,1
  80e6b4:	180d883a 	mov	r6,r3
  80e6b8:	1880062e 	bgeu	r3,r2,80e6d4 <__nesf2+0x60>
  80e6bc:	d8800617 	ldw	r2,24(sp)
  80e6c0:	8809883a 	mov	r4,r17
  80e6c4:	800b883a 	mov	r5,r16
  80e6c8:	1880022e 	bgeu	r3,r2,80e6d4 <__nesf2+0x60>
  80e6cc:	080fc980 	call	80fc98 <__fpcmp_parts_f>
  80e6d0:	100d883a 	mov	r6,r2
  80e6d4:	3005883a 	mov	r2,r6
  80e6d8:	dfc00c17 	ldw	ra,48(sp)
  80e6dc:	dc400b17 	ldw	r17,44(sp)
  80e6e0:	dc000a17 	ldw	r16,40(sp)
  80e6e4:	dec00d04 	addi	sp,sp,52
  80e6e8:	f800283a 	ret

0080e6ec <__gtsf2>:
  80e6ec:	defff304 	addi	sp,sp,-52
  80e6f0:	dc400b15 	stw	r17,44(sp)
  80e6f4:	dc400204 	addi	r17,sp,8
  80e6f8:	dc000a15 	stw	r16,40(sp)
  80e6fc:	d9000015 	stw	r4,0(sp)
  80e700:	d9400115 	stw	r5,4(sp)
  80e704:	d809883a 	mov	r4,sp
  80e708:	880b883a 	mov	r5,r17
  80e70c:	dc000604 	addi	r16,sp,24
  80e710:	dfc00c15 	stw	ra,48(sp)
  80e714:	080fbd00 	call	80fbd0 <__unpack_f>
  80e718:	d9000104 	addi	r4,sp,4
  80e71c:	800b883a 	mov	r5,r16
  80e720:	080fbd00 	call	80fbd0 <__unpack_f>
  80e724:	d8800217 	ldw	r2,8(sp)
  80e728:	00c00044 	movi	r3,1
  80e72c:	01bfffc4 	movi	r6,-1
  80e730:	1880062e 	bgeu	r3,r2,80e74c <__gtsf2+0x60>
  80e734:	d8800617 	ldw	r2,24(sp)
  80e738:	8809883a 	mov	r4,r17
  80e73c:	800b883a 	mov	r5,r16
  80e740:	1880022e 	bgeu	r3,r2,80e74c <__gtsf2+0x60>
  80e744:	080fc980 	call	80fc98 <__fpcmp_parts_f>
  80e748:	100d883a 	mov	r6,r2
  80e74c:	3005883a 	mov	r2,r6
  80e750:	dfc00c17 	ldw	ra,48(sp)
  80e754:	dc400b17 	ldw	r17,44(sp)
  80e758:	dc000a17 	ldw	r16,40(sp)
  80e75c:	dec00d04 	addi	sp,sp,52
  80e760:	f800283a 	ret

0080e764 <__ltsf2>:
  80e764:	defff304 	addi	sp,sp,-52
  80e768:	dc400b15 	stw	r17,44(sp)
  80e76c:	dc400204 	addi	r17,sp,8
  80e770:	dc000a15 	stw	r16,40(sp)
  80e774:	d9000015 	stw	r4,0(sp)
  80e778:	d9400115 	stw	r5,4(sp)
  80e77c:	d809883a 	mov	r4,sp
  80e780:	880b883a 	mov	r5,r17
  80e784:	dc000604 	addi	r16,sp,24
  80e788:	dfc00c15 	stw	ra,48(sp)
  80e78c:	080fbd00 	call	80fbd0 <__unpack_f>
  80e790:	d9000104 	addi	r4,sp,4
  80e794:	800b883a 	mov	r5,r16
  80e798:	080fbd00 	call	80fbd0 <__unpack_f>
  80e79c:	d8800217 	ldw	r2,8(sp)
  80e7a0:	00c00044 	movi	r3,1
  80e7a4:	180d883a 	mov	r6,r3
  80e7a8:	1880062e 	bgeu	r3,r2,80e7c4 <__ltsf2+0x60>
  80e7ac:	d8800617 	ldw	r2,24(sp)
  80e7b0:	8809883a 	mov	r4,r17
  80e7b4:	800b883a 	mov	r5,r16
  80e7b8:	1880022e 	bgeu	r3,r2,80e7c4 <__ltsf2+0x60>
  80e7bc:	080fc980 	call	80fc98 <__fpcmp_parts_f>
  80e7c0:	100d883a 	mov	r6,r2
  80e7c4:	3005883a 	mov	r2,r6
  80e7c8:	dfc00c17 	ldw	ra,48(sp)
  80e7cc:	dc400b17 	ldw	r17,44(sp)
  80e7d0:	dc000a17 	ldw	r16,40(sp)
  80e7d4:	dec00d04 	addi	sp,sp,52
  80e7d8:	f800283a 	ret

0080e7dc <_fpadd_parts>:
  80e7dc:	defff804 	addi	sp,sp,-32
  80e7e0:	dcc00315 	stw	r19,12(sp)
  80e7e4:	2027883a 	mov	r19,r4
  80e7e8:	21000017 	ldw	r4,0(r4)
  80e7ec:	00c00044 	movi	r3,1
  80e7f0:	dd400515 	stw	r21,20(sp)
  80e7f4:	dd000415 	stw	r20,16(sp)
  80e7f8:	ddc00715 	stw	r23,28(sp)
  80e7fc:	dd800615 	stw	r22,24(sp)
  80e800:	dc800215 	stw	r18,8(sp)
  80e804:	dc400115 	stw	r17,4(sp)
  80e808:	dc000015 	stw	r16,0(sp)
  80e80c:	282b883a 	mov	r21,r5
  80e810:	3029883a 	mov	r20,r6
  80e814:	1900632e 	bgeu	r3,r4,80e9a4 <_fpadd_parts+0x1c8>
  80e818:	28800017 	ldw	r2,0(r5)
  80e81c:	1880812e 	bgeu	r3,r2,80ea24 <_fpadd_parts+0x248>
  80e820:	00c00104 	movi	r3,4
  80e824:	20c0dc26 	beq	r4,r3,80eb98 <_fpadd_parts+0x3bc>
  80e828:	10c07e26 	beq	r2,r3,80ea24 <_fpadd_parts+0x248>
  80e82c:	00c00084 	movi	r3,2
  80e830:	10c06726 	beq	r2,r3,80e9d0 <_fpadd_parts+0x1f4>
  80e834:	20c07b26 	beq	r4,r3,80ea24 <_fpadd_parts+0x248>
  80e838:	9dc00217 	ldw	r23,8(r19)
  80e83c:	28c00217 	ldw	r3,8(r5)
  80e840:	9c400317 	ldw	r17,12(r19)
  80e844:	2bc00317 	ldw	r15,12(r5)
  80e848:	b8cdc83a 	sub	r6,r23,r3
  80e84c:	9c800417 	ldw	r18,16(r19)
  80e850:	2c000417 	ldw	r16,16(r5)
  80e854:	3009883a 	mov	r4,r6
  80e858:	30009716 	blt	r6,zero,80eab8 <_fpadd_parts+0x2dc>
  80e85c:	00800fc4 	movi	r2,63
  80e860:	11806b16 	blt	r2,r6,80ea10 <_fpadd_parts+0x234>
  80e864:	0100a40e 	bge	zero,r4,80eaf8 <_fpadd_parts+0x31c>
  80e868:	35bff804 	addi	r22,r6,-32
  80e86c:	b000bc16 	blt	r22,zero,80eb60 <_fpadd_parts+0x384>
  80e870:	8596d83a 	srl	r11,r16,r22
  80e874:	0019883a 	mov	r12,zero
  80e878:	0013883a 	mov	r9,zero
  80e87c:	01000044 	movi	r4,1
  80e880:	0015883a 	mov	r10,zero
  80e884:	b000be16 	blt	r22,zero,80eb80 <_fpadd_parts+0x3a4>
  80e888:	2590983a 	sll	r8,r4,r22
  80e88c:	000f883a 	mov	r7,zero
  80e890:	00bfffc4 	movi	r2,-1
  80e894:	3889883a 	add	r4,r7,r2
  80e898:	408b883a 	add	r5,r8,r2
  80e89c:	21cd803a 	cmpltu	r6,r4,r7
  80e8a0:	314b883a 	add	r5,r6,r5
  80e8a4:	7904703a 	and	r2,r15,r4
  80e8a8:	8146703a 	and	r3,r16,r5
  80e8ac:	10c4b03a 	or	r2,r2,r3
  80e8b0:	10000226 	beq	r2,zero,80e8bc <_fpadd_parts+0xe0>
  80e8b4:	02400044 	movi	r9,1
  80e8b8:	0015883a 	mov	r10,zero
  80e8bc:	5a5eb03a 	or	r15,r11,r9
  80e8c0:	62a0b03a 	or	r16,r12,r10
  80e8c4:	99400117 	ldw	r5,4(r19)
  80e8c8:	a8800117 	ldw	r2,4(r21)
  80e8cc:	28806e26 	beq	r5,r2,80ea88 <_fpadd_parts+0x2ac>
  80e8d0:	28006626 	beq	r5,zero,80ea6c <_fpadd_parts+0x290>
  80e8d4:	7c45c83a 	sub	r2,r15,r17
  80e8d8:	7889803a 	cmpltu	r4,r15,r2
  80e8dc:	8487c83a 	sub	r3,r16,r18
  80e8e0:	1909c83a 	sub	r4,r3,r4
  80e8e4:	100d883a 	mov	r6,r2
  80e8e8:	200f883a 	mov	r7,r4
  80e8ec:	38007716 	blt	r7,zero,80eacc <_fpadd_parts+0x2f0>
  80e8f0:	a5c00215 	stw	r23,8(r20)
  80e8f4:	a1c00415 	stw	r7,16(r20)
  80e8f8:	a0000115 	stw	zero,4(r20)
  80e8fc:	a1800315 	stw	r6,12(r20)
  80e900:	a2000317 	ldw	r8,12(r20)
  80e904:	a2400417 	ldw	r9,16(r20)
  80e908:	00bfffc4 	movi	r2,-1
  80e90c:	408b883a 	add	r5,r8,r2
  80e910:	2a09803a 	cmpltu	r4,r5,r8
  80e914:	488d883a 	add	r6,r9,r2
  80e918:	01c40034 	movhi	r7,4096
  80e91c:	39ffffc4 	addi	r7,r7,-1
  80e920:	218d883a 	add	r6,r4,r6
  80e924:	39801736 	bltu	r7,r6,80e984 <_fpadd_parts+0x1a8>
  80e928:	31c06526 	beq	r6,r7,80eac0 <_fpadd_parts+0x2e4>
  80e92c:	a3000217 	ldw	r12,8(r20)
  80e930:	4209883a 	add	r4,r8,r8
  80e934:	00bfffc4 	movi	r2,-1
  80e938:	220f803a 	cmpltu	r7,r4,r8
  80e93c:	4a4b883a 	add	r5,r9,r9
  80e940:	394f883a 	add	r7,r7,r5
  80e944:	2095883a 	add	r10,r4,r2
  80e948:	3897883a 	add	r11,r7,r2
  80e94c:	510d803a 	cmpltu	r6,r10,r4
  80e950:	6099883a 	add	r12,r12,r2
  80e954:	32d7883a 	add	r11,r6,r11
  80e958:	00840034 	movhi	r2,4096
  80e95c:	10bfffc4 	addi	r2,r2,-1
  80e960:	2011883a 	mov	r8,r4
  80e964:	3813883a 	mov	r9,r7
  80e968:	a1000315 	stw	r4,12(r20)
  80e96c:	a1c00415 	stw	r7,16(r20)
  80e970:	a3000215 	stw	r12,8(r20)
  80e974:	12c00336 	bltu	r2,r11,80e984 <_fpadd_parts+0x1a8>
  80e978:	58bfed1e 	bne	r11,r2,80e930 <_fpadd_parts+0x154>
  80e97c:	00bfff84 	movi	r2,-2
  80e980:	12bfeb2e 	bgeu	r2,r10,80e930 <_fpadd_parts+0x154>
  80e984:	a2800417 	ldw	r10,16(r20)
  80e988:	008000c4 	movi	r2,3
  80e98c:	00c80034 	movhi	r3,8192
  80e990:	18ffffc4 	addi	r3,r3,-1
  80e994:	a2400317 	ldw	r9,12(r20)
  80e998:	a0800015 	stw	r2,0(r20)
  80e99c:	1a802336 	bltu	r3,r10,80ea2c <_fpadd_parts+0x250>
  80e9a0:	a027883a 	mov	r19,r20
  80e9a4:	9805883a 	mov	r2,r19
  80e9a8:	ddc00717 	ldw	r23,28(sp)
  80e9ac:	dd800617 	ldw	r22,24(sp)
  80e9b0:	dd400517 	ldw	r21,20(sp)
  80e9b4:	dd000417 	ldw	r20,16(sp)
  80e9b8:	dcc00317 	ldw	r19,12(sp)
  80e9bc:	dc800217 	ldw	r18,8(sp)
  80e9c0:	dc400117 	ldw	r17,4(sp)
  80e9c4:	dc000017 	ldw	r16,0(sp)
  80e9c8:	dec00804 	addi	sp,sp,32
  80e9cc:	f800283a 	ret
  80e9d0:	20fff41e 	bne	r4,r3,80e9a4 <_fpadd_parts+0x1c8>
  80e9d4:	31000015 	stw	r4,0(r6)
  80e9d8:	98800117 	ldw	r2,4(r19)
  80e9dc:	30800115 	stw	r2,4(r6)
  80e9e0:	98c00217 	ldw	r3,8(r19)
  80e9e4:	30c00215 	stw	r3,8(r6)
  80e9e8:	98800317 	ldw	r2,12(r19)
  80e9ec:	30800315 	stw	r2,12(r6)
  80e9f0:	98c00417 	ldw	r3,16(r19)
  80e9f4:	30c00415 	stw	r3,16(r6)
  80e9f8:	98800117 	ldw	r2,4(r19)
  80e9fc:	28c00117 	ldw	r3,4(r5)
  80ea00:	3027883a 	mov	r19,r6
  80ea04:	10c4703a 	and	r2,r2,r3
  80ea08:	30800115 	stw	r2,4(r6)
  80ea0c:	003fe506 	br	80e9a4 <_fpadd_parts+0x1c8>
  80ea10:	1dc02616 	blt	r3,r23,80eaac <_fpadd_parts+0x2d0>
  80ea14:	0023883a 	mov	r17,zero
  80ea18:	182f883a 	mov	r23,r3
  80ea1c:	0025883a 	mov	r18,zero
  80ea20:	003fa806 	br	80e8c4 <_fpadd_parts+0xe8>
  80ea24:	a827883a 	mov	r19,r21
  80ea28:	003fde06 	br	80e9a4 <_fpadd_parts+0x1c8>
  80ea2c:	01800044 	movi	r6,1
  80ea30:	500497fa 	slli	r2,r10,31
  80ea34:	4808d07a 	srli	r4,r9,1
  80ea38:	518ad83a 	srl	r5,r10,r6
  80ea3c:	a2000217 	ldw	r8,8(r20)
  80ea40:	1108b03a 	or	r4,r2,r4
  80ea44:	0007883a 	mov	r3,zero
  80ea48:	4984703a 	and	r2,r9,r6
  80ea4c:	208cb03a 	or	r6,r4,r2
  80ea50:	28ceb03a 	or	r7,r5,r3
  80ea54:	42000044 	addi	r8,r8,1
  80ea58:	a027883a 	mov	r19,r20
  80ea5c:	a1c00415 	stw	r7,16(r20)
  80ea60:	a2000215 	stw	r8,8(r20)
  80ea64:	a1800315 	stw	r6,12(r20)
  80ea68:	003fce06 	br	80e9a4 <_fpadd_parts+0x1c8>
  80ea6c:	8bc5c83a 	sub	r2,r17,r15
  80ea70:	8889803a 	cmpltu	r4,r17,r2
  80ea74:	9407c83a 	sub	r3,r18,r16
  80ea78:	1909c83a 	sub	r4,r3,r4
  80ea7c:	100d883a 	mov	r6,r2
  80ea80:	200f883a 	mov	r7,r4
  80ea84:	003f9906 	br	80e8ec <_fpadd_parts+0x110>
  80ea88:	7c45883a 	add	r2,r15,r17
  80ea8c:	13c9803a 	cmpltu	r4,r2,r15
  80ea90:	8487883a 	add	r3,r16,r18
  80ea94:	20c9883a 	add	r4,r4,r3
  80ea98:	a1400115 	stw	r5,4(r20)
  80ea9c:	a5c00215 	stw	r23,8(r20)
  80eaa0:	a0800315 	stw	r2,12(r20)
  80eaa4:	a1000415 	stw	r4,16(r20)
  80eaa8:	003fb606 	br	80e984 <_fpadd_parts+0x1a8>
  80eaac:	001f883a 	mov	r15,zero
  80eab0:	0021883a 	mov	r16,zero
  80eab4:	003f8306 	br	80e8c4 <_fpadd_parts+0xe8>
  80eab8:	018dc83a 	sub	r6,zero,r6
  80eabc:	003f6706 	br	80e85c <_fpadd_parts+0x80>
  80eac0:	00bfff84 	movi	r2,-2
  80eac4:	117faf36 	bltu	r2,r5,80e984 <_fpadd_parts+0x1a8>
  80eac8:	003f9806 	br	80e92c <_fpadd_parts+0x150>
  80eacc:	0005883a 	mov	r2,zero
  80ead0:	1189c83a 	sub	r4,r2,r6
  80ead4:	1105803a 	cmpltu	r2,r2,r4
  80ead8:	01cbc83a 	sub	r5,zero,r7
  80eadc:	2885c83a 	sub	r2,r5,r2
  80eae0:	01800044 	movi	r6,1
  80eae4:	a1800115 	stw	r6,4(r20)
  80eae8:	a5c00215 	stw	r23,8(r20)
  80eaec:	a1000315 	stw	r4,12(r20)
  80eaf0:	a0800415 	stw	r2,16(r20)
  80eaf4:	003f8206 	br	80e900 <_fpadd_parts+0x124>
  80eaf8:	203f7226 	beq	r4,zero,80e8c4 <_fpadd_parts+0xe8>
  80eafc:	35bff804 	addi	r22,r6,-32
  80eb00:	b9af883a 	add	r23,r23,r6
  80eb04:	b0003116 	blt	r22,zero,80ebcc <_fpadd_parts+0x3f0>
  80eb08:	959ad83a 	srl	r13,r18,r22
  80eb0c:	001d883a 	mov	r14,zero
  80eb10:	000f883a 	mov	r7,zero
  80eb14:	01000044 	movi	r4,1
  80eb18:	0011883a 	mov	r8,zero
  80eb1c:	b0002516 	blt	r22,zero,80ebb4 <_fpadd_parts+0x3d8>
  80eb20:	2594983a 	sll	r10,r4,r22
  80eb24:	0013883a 	mov	r9,zero
  80eb28:	00bfffc4 	movi	r2,-1
  80eb2c:	4889883a 	add	r4,r9,r2
  80eb30:	508b883a 	add	r5,r10,r2
  80eb34:	224d803a 	cmpltu	r6,r4,r9
  80eb38:	314b883a 	add	r5,r6,r5
  80eb3c:	8904703a 	and	r2,r17,r4
  80eb40:	9146703a 	and	r3,r18,r5
  80eb44:	10c4b03a 	or	r2,r2,r3
  80eb48:	10000226 	beq	r2,zero,80eb54 <_fpadd_parts+0x378>
  80eb4c:	01c00044 	movi	r7,1
  80eb50:	0011883a 	mov	r8,zero
  80eb54:	69e2b03a 	or	r17,r13,r7
  80eb58:	7224b03a 	or	r18,r14,r8
  80eb5c:	003f5906 	br	80e8c4 <_fpadd_parts+0xe8>
  80eb60:	8407883a 	add	r3,r16,r16
  80eb64:	008007c4 	movi	r2,31
  80eb68:	1185c83a 	sub	r2,r2,r6
  80eb6c:	1886983a 	sll	r3,r3,r2
  80eb70:	7996d83a 	srl	r11,r15,r6
  80eb74:	8198d83a 	srl	r12,r16,r6
  80eb78:	1ad6b03a 	or	r11,r3,r11
  80eb7c:	003f3e06 	br	80e878 <_fpadd_parts+0x9c>
  80eb80:	2006d07a 	srli	r3,r4,1
  80eb84:	008007c4 	movi	r2,31
  80eb88:	1185c83a 	sub	r2,r2,r6
  80eb8c:	1890d83a 	srl	r8,r3,r2
  80eb90:	218e983a 	sll	r7,r4,r6
  80eb94:	003f3e06 	br	80e890 <_fpadd_parts+0xb4>
  80eb98:	113f821e 	bne	r2,r4,80e9a4 <_fpadd_parts+0x1c8>
  80eb9c:	28c00117 	ldw	r3,4(r5)
  80eba0:	98800117 	ldw	r2,4(r19)
  80eba4:	10ff7f26 	beq	r2,r3,80e9a4 <_fpadd_parts+0x1c8>
  80eba8:	04c02074 	movhi	r19,129
  80ebac:	9cd41c04 	addi	r19,r19,20592
  80ebb0:	003f7c06 	br	80e9a4 <_fpadd_parts+0x1c8>
  80ebb4:	2006d07a 	srli	r3,r4,1
  80ebb8:	008007c4 	movi	r2,31
  80ebbc:	1185c83a 	sub	r2,r2,r6
  80ebc0:	1894d83a 	srl	r10,r3,r2
  80ebc4:	2192983a 	sll	r9,r4,r6
  80ebc8:	003fd706 	br	80eb28 <_fpadd_parts+0x34c>
  80ebcc:	9487883a 	add	r3,r18,r18
  80ebd0:	008007c4 	movi	r2,31
  80ebd4:	1185c83a 	sub	r2,r2,r6
  80ebd8:	1886983a 	sll	r3,r3,r2
  80ebdc:	899ad83a 	srl	r13,r17,r6
  80ebe0:	919cd83a 	srl	r14,r18,r6
  80ebe4:	1b5ab03a 	or	r13,r3,r13
  80ebe8:	003fc906 	br	80eb10 <_fpadd_parts+0x334>

0080ebec <__subdf3>:
  80ebec:	deffea04 	addi	sp,sp,-88
  80ebf0:	dcc01415 	stw	r19,80(sp)
  80ebf4:	dcc00404 	addi	r19,sp,16
  80ebf8:	2011883a 	mov	r8,r4
  80ebfc:	2813883a 	mov	r9,r5
  80ec00:	dc401315 	stw	r17,76(sp)
  80ec04:	d809883a 	mov	r4,sp
  80ec08:	980b883a 	mov	r5,r19
  80ec0c:	dc400904 	addi	r17,sp,36
  80ec10:	dfc01515 	stw	ra,84(sp)
  80ec14:	da400115 	stw	r9,4(sp)
  80ec18:	d9c00315 	stw	r7,12(sp)
  80ec1c:	da000015 	stw	r8,0(sp)
  80ec20:	d9800215 	stw	r6,8(sp)
  80ec24:	08100800 	call	810080 <__unpack_d>
  80ec28:	d9000204 	addi	r4,sp,8
  80ec2c:	880b883a 	mov	r5,r17
  80ec30:	08100800 	call	810080 <__unpack_d>
  80ec34:	d8800a17 	ldw	r2,40(sp)
  80ec38:	880b883a 	mov	r5,r17
  80ec3c:	9809883a 	mov	r4,r19
  80ec40:	d9800e04 	addi	r6,sp,56
  80ec44:	1080005c 	xori	r2,r2,1
  80ec48:	d8800a15 	stw	r2,40(sp)
  80ec4c:	080e7dc0 	call	80e7dc <_fpadd_parts>
  80ec50:	1009883a 	mov	r4,r2
  80ec54:	080fd6c0 	call	80fd6c <__pack_d>
  80ec58:	dfc01517 	ldw	ra,84(sp)
  80ec5c:	dcc01417 	ldw	r19,80(sp)
  80ec60:	dc401317 	ldw	r17,76(sp)
  80ec64:	dec01604 	addi	sp,sp,88
  80ec68:	f800283a 	ret

0080ec6c <__adddf3>:
  80ec6c:	deffea04 	addi	sp,sp,-88
  80ec70:	dcc01415 	stw	r19,80(sp)
  80ec74:	dcc00404 	addi	r19,sp,16
  80ec78:	2011883a 	mov	r8,r4
  80ec7c:	2813883a 	mov	r9,r5
  80ec80:	dc401315 	stw	r17,76(sp)
  80ec84:	d809883a 	mov	r4,sp
  80ec88:	980b883a 	mov	r5,r19
  80ec8c:	dc400904 	addi	r17,sp,36
  80ec90:	dfc01515 	stw	ra,84(sp)
  80ec94:	da400115 	stw	r9,4(sp)
  80ec98:	d9c00315 	stw	r7,12(sp)
  80ec9c:	da000015 	stw	r8,0(sp)
  80eca0:	d9800215 	stw	r6,8(sp)
  80eca4:	08100800 	call	810080 <__unpack_d>
  80eca8:	d9000204 	addi	r4,sp,8
  80ecac:	880b883a 	mov	r5,r17
  80ecb0:	08100800 	call	810080 <__unpack_d>
  80ecb4:	d9800e04 	addi	r6,sp,56
  80ecb8:	9809883a 	mov	r4,r19
  80ecbc:	880b883a 	mov	r5,r17
  80ecc0:	080e7dc0 	call	80e7dc <_fpadd_parts>
  80ecc4:	1009883a 	mov	r4,r2
  80ecc8:	080fd6c0 	call	80fd6c <__pack_d>
  80eccc:	dfc01517 	ldw	ra,84(sp)
  80ecd0:	dcc01417 	ldw	r19,80(sp)
  80ecd4:	dc401317 	ldw	r17,76(sp)
  80ecd8:	dec01604 	addi	sp,sp,88
  80ecdc:	f800283a 	ret

0080ece0 <__muldf3>:
  80ece0:	deffe004 	addi	sp,sp,-128
  80ece4:	dc401815 	stw	r17,96(sp)
  80ece8:	dc400404 	addi	r17,sp,16
  80ecec:	2011883a 	mov	r8,r4
  80ecf0:	2813883a 	mov	r9,r5
  80ecf4:	dc001715 	stw	r16,92(sp)
  80ecf8:	d809883a 	mov	r4,sp
  80ecfc:	880b883a 	mov	r5,r17
  80ed00:	dc000904 	addi	r16,sp,36
  80ed04:	dfc01f15 	stw	ra,124(sp)
  80ed08:	da400115 	stw	r9,4(sp)
  80ed0c:	d9c00315 	stw	r7,12(sp)
  80ed10:	da000015 	stw	r8,0(sp)
  80ed14:	d9800215 	stw	r6,8(sp)
  80ed18:	ddc01e15 	stw	r23,120(sp)
  80ed1c:	dd801d15 	stw	r22,116(sp)
  80ed20:	dd401c15 	stw	r21,112(sp)
  80ed24:	dd001b15 	stw	r20,108(sp)
  80ed28:	dcc01a15 	stw	r19,104(sp)
  80ed2c:	dc801915 	stw	r18,100(sp)
  80ed30:	08100800 	call	810080 <__unpack_d>
  80ed34:	d9000204 	addi	r4,sp,8
  80ed38:	800b883a 	mov	r5,r16
  80ed3c:	08100800 	call	810080 <__unpack_d>
  80ed40:	d9000417 	ldw	r4,16(sp)
  80ed44:	00800044 	movi	r2,1
  80ed48:	1100102e 	bgeu	r2,r4,80ed8c <__muldf3+0xac>
  80ed4c:	d8c00917 	ldw	r3,36(sp)
  80ed50:	10c0062e 	bgeu	r2,r3,80ed6c <__muldf3+0x8c>
  80ed54:	00800104 	movi	r2,4
  80ed58:	20800a26 	beq	r4,r2,80ed84 <__muldf3+0xa4>
  80ed5c:	1880cc26 	beq	r3,r2,80f090 <__muldf3+0x3b0>
  80ed60:	00800084 	movi	r2,2
  80ed64:	20800926 	beq	r4,r2,80ed8c <__muldf3+0xac>
  80ed68:	1880191e 	bne	r3,r2,80edd0 <__muldf3+0xf0>
  80ed6c:	d8c00a17 	ldw	r3,40(sp)
  80ed70:	d8800517 	ldw	r2,20(sp)
  80ed74:	8009883a 	mov	r4,r16
  80ed78:	10c4c03a 	cmpne	r2,r2,r3
  80ed7c:	d8800a15 	stw	r2,40(sp)
  80ed80:	00000706 	br	80eda0 <__muldf3+0xc0>
  80ed84:	00800084 	movi	r2,2
  80ed88:	1880c326 	beq	r3,r2,80f098 <__muldf3+0x3b8>
  80ed8c:	d8800517 	ldw	r2,20(sp)
  80ed90:	d8c00a17 	ldw	r3,40(sp)
  80ed94:	8809883a 	mov	r4,r17
  80ed98:	10c4c03a 	cmpne	r2,r2,r3
  80ed9c:	d8800515 	stw	r2,20(sp)
  80eda0:	080fd6c0 	call	80fd6c <__pack_d>
  80eda4:	dfc01f17 	ldw	ra,124(sp)
  80eda8:	ddc01e17 	ldw	r23,120(sp)
  80edac:	dd801d17 	ldw	r22,116(sp)
  80edb0:	dd401c17 	ldw	r21,112(sp)
  80edb4:	dd001b17 	ldw	r20,108(sp)
  80edb8:	dcc01a17 	ldw	r19,104(sp)
  80edbc:	dc801917 	ldw	r18,100(sp)
  80edc0:	dc401817 	ldw	r17,96(sp)
  80edc4:	dc001717 	ldw	r16,92(sp)
  80edc8:	dec02004 	addi	sp,sp,128
  80edcc:	f800283a 	ret
  80edd0:	dd800717 	ldw	r22,28(sp)
  80edd4:	dc800c17 	ldw	r18,48(sp)
  80edd8:	002b883a 	mov	r21,zero
  80eddc:	0023883a 	mov	r17,zero
  80ede0:	a80b883a 	mov	r5,r21
  80ede4:	b00d883a 	mov	r6,r22
  80ede8:	880f883a 	mov	r7,r17
  80edec:	ddc00817 	ldw	r23,32(sp)
  80edf0:	dcc00d17 	ldw	r19,52(sp)
  80edf4:	9009883a 	mov	r4,r18
  80edf8:	080d9ac0 	call	80d9ac <__muldi3>
  80edfc:	001b883a 	mov	r13,zero
  80ee00:	680f883a 	mov	r7,r13
  80ee04:	b009883a 	mov	r4,r22
  80ee08:	000b883a 	mov	r5,zero
  80ee0c:	980d883a 	mov	r6,r19
  80ee10:	b82d883a 	mov	r22,r23
  80ee14:	002f883a 	mov	r23,zero
  80ee18:	db401615 	stw	r13,88(sp)
  80ee1c:	d8801315 	stw	r2,76(sp)
  80ee20:	d8c01415 	stw	r3,80(sp)
  80ee24:	dcc01515 	stw	r19,84(sp)
  80ee28:	080d9ac0 	call	80d9ac <__muldi3>
  80ee2c:	b00d883a 	mov	r6,r22
  80ee30:	000b883a 	mov	r5,zero
  80ee34:	9009883a 	mov	r4,r18
  80ee38:	b80f883a 	mov	r7,r23
  80ee3c:	1021883a 	mov	r16,r2
  80ee40:	1823883a 	mov	r17,r3
  80ee44:	080d9ac0 	call	80d9ac <__muldi3>
  80ee48:	8085883a 	add	r2,r16,r2
  80ee4c:	140d803a 	cmpltu	r6,r2,r16
  80ee50:	88c7883a 	add	r3,r17,r3
  80ee54:	30cd883a 	add	r6,r6,r3
  80ee58:	1029883a 	mov	r20,r2
  80ee5c:	302b883a 	mov	r21,r6
  80ee60:	da801317 	ldw	r10,76(sp)
  80ee64:	dac01417 	ldw	r11,80(sp)
  80ee68:	db001517 	ldw	r12,84(sp)
  80ee6c:	db401617 	ldw	r13,88(sp)
  80ee70:	3440612e 	bgeu	r6,r17,80eff8 <__muldf3+0x318>
  80ee74:	0009883a 	mov	r4,zero
  80ee78:	5105883a 	add	r2,r10,r4
  80ee7c:	128d803a 	cmpltu	r6,r2,r10
  80ee80:	5d07883a 	add	r3,r11,r20
  80ee84:	30cd883a 	add	r6,r6,r3
  80ee88:	0021883a 	mov	r16,zero
  80ee8c:	04400044 	movi	r17,1
  80ee90:	1025883a 	mov	r18,r2
  80ee94:	3027883a 	mov	r19,r6
  80ee98:	32c06236 	bltu	r6,r11,80f024 <__muldf3+0x344>
  80ee9c:	59807a26 	beq	r11,r6,80f088 <__muldf3+0x3a8>
  80eea0:	680b883a 	mov	r5,r13
  80eea4:	b80f883a 	mov	r7,r23
  80eea8:	6009883a 	mov	r4,r12
  80eeac:	b00d883a 	mov	r6,r22
  80eeb0:	080d9ac0 	call	80d9ac <__muldi3>
  80eeb4:	1009883a 	mov	r4,r2
  80eeb8:	000f883a 	mov	r7,zero
  80eebc:	1545883a 	add	r2,r2,r21
  80eec0:	1111803a 	cmpltu	r8,r2,r4
  80eec4:	19c7883a 	add	r3,r3,r7
  80eec8:	40c7883a 	add	r3,r8,r3
  80eecc:	88cb883a 	add	r5,r17,r3
  80eed0:	d8c00617 	ldw	r3,24(sp)
  80eed4:	8089883a 	add	r4,r16,r2
  80eed8:	d8800b17 	ldw	r2,44(sp)
  80eedc:	18c00104 	addi	r3,r3,4
  80eee0:	240d803a 	cmpltu	r6,r4,r16
  80eee4:	10c7883a 	add	r3,r2,r3
  80eee8:	2013883a 	mov	r9,r4
  80eeec:	d8800a17 	ldw	r2,40(sp)
  80eef0:	d9000517 	ldw	r4,20(sp)
  80eef4:	314d883a 	add	r6,r6,r5
  80eef8:	3015883a 	mov	r10,r6
  80eefc:	2088c03a 	cmpne	r4,r4,r2
  80ef00:	00880034 	movhi	r2,8192
  80ef04:	10bfffc4 	addi	r2,r2,-1
  80ef08:	d9000f15 	stw	r4,60(sp)
  80ef0c:	d8c01015 	stw	r3,64(sp)
  80ef10:	1180162e 	bgeu	r2,r6,80ef6c <__muldf3+0x28c>
  80ef14:	1811883a 	mov	r8,r3
  80ef18:	101f883a 	mov	r15,r2
  80ef1c:	980497fa 	slli	r2,r19,31
  80ef20:	9016d07a 	srli	r11,r18,1
  80ef24:	500697fa 	slli	r3,r10,31
  80ef28:	480cd07a 	srli	r6,r9,1
  80ef2c:	500ed07a 	srli	r7,r10,1
  80ef30:	12d6b03a 	or	r11,r2,r11
  80ef34:	00800044 	movi	r2,1
  80ef38:	198cb03a 	or	r6,r3,r6
  80ef3c:	4888703a 	and	r4,r9,r2
  80ef40:	9818d07a 	srli	r12,r19,1
  80ef44:	001b883a 	mov	r13,zero
  80ef48:	03a00034 	movhi	r14,32768
  80ef4c:	3013883a 	mov	r9,r6
  80ef50:	3815883a 	mov	r10,r7
  80ef54:	4091883a 	add	r8,r8,r2
  80ef58:	20000226 	beq	r4,zero,80ef64 <__muldf3+0x284>
  80ef5c:	5b64b03a 	or	r18,r11,r13
  80ef60:	63a6b03a 	or	r19,r12,r14
  80ef64:	7abfed36 	bltu	r15,r10,80ef1c <__muldf3+0x23c>
  80ef68:	da001015 	stw	r8,64(sp)
  80ef6c:	00840034 	movhi	r2,4096
  80ef70:	10bfffc4 	addi	r2,r2,-1
  80ef74:	12801436 	bltu	r2,r10,80efc8 <__muldf3+0x2e8>
  80ef78:	da001017 	ldw	r8,64(sp)
  80ef7c:	101f883a 	mov	r15,r2
  80ef80:	4a45883a 	add	r2,r9,r9
  80ef84:	124d803a 	cmpltu	r6,r2,r9
  80ef88:	5287883a 	add	r3,r10,r10
  80ef8c:	9497883a 	add	r11,r18,r18
  80ef90:	5c8f803a 	cmpltu	r7,r11,r18
  80ef94:	9cd9883a 	add	r12,r19,r19
  80ef98:	01000044 	movi	r4,1
  80ef9c:	30cd883a 	add	r6,r6,r3
  80efa0:	3b0f883a 	add	r7,r7,r12
  80efa4:	423fffc4 	addi	r8,r8,-1
  80efa8:	1013883a 	mov	r9,r2
  80efac:	3015883a 	mov	r10,r6
  80efb0:	111ab03a 	or	r13,r2,r4
  80efb4:	98003016 	blt	r19,zero,80f078 <__muldf3+0x398>
  80efb8:	5825883a 	mov	r18,r11
  80efbc:	3827883a 	mov	r19,r7
  80efc0:	7abfef2e 	bgeu	r15,r10,80ef80 <__muldf3+0x2a0>
  80efc4:	da001015 	stw	r8,64(sp)
  80efc8:	00803fc4 	movi	r2,255
  80efcc:	488e703a 	and	r7,r9,r2
  80efd0:	00802004 	movi	r2,128
  80efd4:	0007883a 	mov	r3,zero
  80efd8:	0011883a 	mov	r8,zero
  80efdc:	38801826 	beq	r7,r2,80f040 <__muldf3+0x360>
  80efe0:	008000c4 	movi	r2,3
  80efe4:	d9000e04 	addi	r4,sp,56
  80efe8:	da801215 	stw	r10,72(sp)
  80efec:	d8800e15 	stw	r2,56(sp)
  80eff0:	da401115 	stw	r9,68(sp)
  80eff4:	003f6a06 	br	80eda0 <__muldf3+0xc0>
  80eff8:	89802126 	beq	r17,r6,80f080 <__muldf3+0x3a0>
  80effc:	0009883a 	mov	r4,zero
  80f000:	5105883a 	add	r2,r10,r4
  80f004:	128d803a 	cmpltu	r6,r2,r10
  80f008:	5d07883a 	add	r3,r11,r20
  80f00c:	30cd883a 	add	r6,r6,r3
  80f010:	0021883a 	mov	r16,zero
  80f014:	0023883a 	mov	r17,zero
  80f018:	1025883a 	mov	r18,r2
  80f01c:	3027883a 	mov	r19,r6
  80f020:	32ff9e2e 	bgeu	r6,r11,80ee9c <__muldf3+0x1bc>
  80f024:	00800044 	movi	r2,1
  80f028:	8089883a 	add	r4,r16,r2
  80f02c:	240d803a 	cmpltu	r6,r4,r16
  80f030:	344d883a 	add	r6,r6,r17
  80f034:	2021883a 	mov	r16,r4
  80f038:	3023883a 	mov	r17,r6
  80f03c:	003f9806 	br	80eea0 <__muldf3+0x1c0>
  80f040:	403fe71e 	bne	r8,zero,80efe0 <__muldf3+0x300>
  80f044:	01004004 	movi	r4,256
  80f048:	4904703a 	and	r2,r9,r4
  80f04c:	10c4b03a 	or	r2,r2,r3
  80f050:	103fe31e 	bne	r2,zero,80efe0 <__muldf3+0x300>
  80f054:	94c4b03a 	or	r2,r18,r19
  80f058:	103fe126 	beq	r2,zero,80efe0 <__muldf3+0x300>
  80f05c:	49c5883a 	add	r2,r9,r7
  80f060:	1251803a 	cmpltu	r8,r2,r9
  80f064:	4291883a 	add	r8,r8,r10
  80f068:	013fc004 	movi	r4,-256
  80f06c:	1112703a 	and	r9,r2,r4
  80f070:	4015883a 	mov	r10,r8
  80f074:	003fda06 	br	80efe0 <__muldf3+0x300>
  80f078:	6813883a 	mov	r9,r13
  80f07c:	003fce06 	br	80efb8 <__muldf3+0x2d8>
  80f080:	143f7c36 	bltu	r2,r16,80ee74 <__muldf3+0x194>
  80f084:	003fdd06 	br	80effc <__muldf3+0x31c>
  80f088:	12bf852e 	bgeu	r2,r10,80eea0 <__muldf3+0x1c0>
  80f08c:	003fe506 	br	80f024 <__muldf3+0x344>
  80f090:	00800084 	movi	r2,2
  80f094:	20bf351e 	bne	r4,r2,80ed6c <__muldf3+0x8c>
  80f098:	01002074 	movhi	r4,129
  80f09c:	21141c04 	addi	r4,r4,20592
  80f0a0:	003f3f06 	br	80eda0 <__muldf3+0xc0>

0080f0a4 <__divdf3>:
  80f0a4:	deffed04 	addi	sp,sp,-76
  80f0a8:	dcc01115 	stw	r19,68(sp)
  80f0ac:	dcc00404 	addi	r19,sp,16
  80f0b0:	2011883a 	mov	r8,r4
  80f0b4:	2813883a 	mov	r9,r5
  80f0b8:	dc000e15 	stw	r16,56(sp)
  80f0bc:	d809883a 	mov	r4,sp
  80f0c0:	980b883a 	mov	r5,r19
  80f0c4:	dc000904 	addi	r16,sp,36
  80f0c8:	dfc01215 	stw	ra,72(sp)
  80f0cc:	da400115 	stw	r9,4(sp)
  80f0d0:	d9c00315 	stw	r7,12(sp)
  80f0d4:	da000015 	stw	r8,0(sp)
  80f0d8:	d9800215 	stw	r6,8(sp)
  80f0dc:	dc801015 	stw	r18,64(sp)
  80f0e0:	dc400f15 	stw	r17,60(sp)
  80f0e4:	08100800 	call	810080 <__unpack_d>
  80f0e8:	d9000204 	addi	r4,sp,8
  80f0ec:	800b883a 	mov	r5,r16
  80f0f0:	08100800 	call	810080 <__unpack_d>
  80f0f4:	d9000417 	ldw	r4,16(sp)
  80f0f8:	00800044 	movi	r2,1
  80f0fc:	11000b2e 	bgeu	r2,r4,80f12c <__divdf3+0x88>
  80f100:	d9400917 	ldw	r5,36(sp)
  80f104:	1140762e 	bgeu	r2,r5,80f2e0 <__divdf3+0x23c>
  80f108:	d8800517 	ldw	r2,20(sp)
  80f10c:	d8c00a17 	ldw	r3,40(sp)
  80f110:	01800104 	movi	r6,4
  80f114:	10c4f03a 	xor	r2,r2,r3
  80f118:	d8800515 	stw	r2,20(sp)
  80f11c:	21800226 	beq	r4,r6,80f128 <__divdf3+0x84>
  80f120:	00800084 	movi	r2,2
  80f124:	2080141e 	bne	r4,r2,80f178 <__divdf3+0xd4>
  80f128:	29000926 	beq	r5,r4,80f150 <__divdf3+0xac>
  80f12c:	9809883a 	mov	r4,r19
  80f130:	080fd6c0 	call	80fd6c <__pack_d>
  80f134:	dfc01217 	ldw	ra,72(sp)
  80f138:	dcc01117 	ldw	r19,68(sp)
  80f13c:	dc801017 	ldw	r18,64(sp)
  80f140:	dc400f17 	ldw	r17,60(sp)
  80f144:	dc000e17 	ldw	r16,56(sp)
  80f148:	dec01304 	addi	sp,sp,76
  80f14c:	f800283a 	ret
  80f150:	01002074 	movhi	r4,129
  80f154:	21141c04 	addi	r4,r4,20592
  80f158:	080fd6c0 	call	80fd6c <__pack_d>
  80f15c:	dfc01217 	ldw	ra,72(sp)
  80f160:	dcc01117 	ldw	r19,68(sp)
  80f164:	dc801017 	ldw	r18,64(sp)
  80f168:	dc400f17 	ldw	r17,60(sp)
  80f16c:	dc000e17 	ldw	r16,56(sp)
  80f170:	dec01304 	addi	sp,sp,76
  80f174:	f800283a 	ret
  80f178:	29805b26 	beq	r5,r6,80f2e8 <__divdf3+0x244>
  80f17c:	28802d26 	beq	r5,r2,80f234 <__divdf3+0x190>
  80f180:	d8c00617 	ldw	r3,24(sp)
  80f184:	d8800b17 	ldw	r2,44(sp)
  80f188:	d9c00817 	ldw	r7,32(sp)
  80f18c:	dc400d17 	ldw	r17,52(sp)
  80f190:	188bc83a 	sub	r5,r3,r2
  80f194:	d9800717 	ldw	r6,28(sp)
  80f198:	dc000c17 	ldw	r16,48(sp)
  80f19c:	d9400615 	stw	r5,24(sp)
  80f1a0:	3c403836 	bltu	r7,r17,80f284 <__divdf3+0x1e0>
  80f1a4:	89c03626 	beq	r17,r7,80f280 <__divdf3+0x1dc>
  80f1a8:	0015883a 	mov	r10,zero
  80f1ac:	001d883a 	mov	r14,zero
  80f1b0:	02c40034 	movhi	r11,4096
  80f1b4:	001f883a 	mov	r15,zero
  80f1b8:	003f883a 	mov	ra,zero
  80f1bc:	04800f44 	movi	r18,61
  80f1c0:	00000f06 	br	80f200 <__divdf3+0x15c>
  80f1c4:	601d883a 	mov	r14,r12
  80f1c8:	681f883a 	mov	r15,r13
  80f1cc:	400d883a 	mov	r6,r8
  80f1d0:	100f883a 	mov	r7,r2
  80f1d4:	3191883a 	add	r8,r6,r6
  80f1d8:	5808d07a 	srli	r4,r11,1
  80f1dc:	4185803a 	cmpltu	r2,r8,r6
  80f1e0:	39d3883a 	add	r9,r7,r7
  80f1e4:	28c6b03a 	or	r3,r5,r3
  80f1e8:	1245883a 	add	r2,r2,r9
  80f1ec:	1815883a 	mov	r10,r3
  80f1f0:	2017883a 	mov	r11,r4
  80f1f4:	400d883a 	mov	r6,r8
  80f1f8:	100f883a 	mov	r7,r2
  80f1fc:	fc801726 	beq	ra,r18,80f25c <__divdf3+0x1b8>
  80f200:	580a97fa 	slli	r5,r11,31
  80f204:	5006d07a 	srli	r3,r10,1
  80f208:	ffc00044 	addi	ra,ra,1
  80f20c:	3c7ff136 	bltu	r7,r17,80f1d4 <__divdf3+0x130>
  80f210:	3411c83a 	sub	r8,r6,r16
  80f214:	3205803a 	cmpltu	r2,r6,r8
  80f218:	3c53c83a 	sub	r9,r7,r17
  80f21c:	7298b03a 	or	r12,r14,r10
  80f220:	7adab03a 	or	r13,r15,r11
  80f224:	4885c83a 	sub	r2,r9,r2
  80f228:	89ffe61e 	bne	r17,r7,80f1c4 <__divdf3+0x120>
  80f22c:	343fe936 	bltu	r6,r16,80f1d4 <__divdf3+0x130>
  80f230:	003fe406 	br	80f1c4 <__divdf3+0x120>
  80f234:	9809883a 	mov	r4,r19
  80f238:	d9800415 	stw	r6,16(sp)
  80f23c:	080fd6c0 	call	80fd6c <__pack_d>
  80f240:	dfc01217 	ldw	ra,72(sp)
  80f244:	dcc01117 	ldw	r19,68(sp)
  80f248:	dc801017 	ldw	r18,64(sp)
  80f24c:	dc400f17 	ldw	r17,60(sp)
  80f250:	dc000e17 	ldw	r16,56(sp)
  80f254:	dec01304 	addi	sp,sp,76
  80f258:	f800283a 	ret
  80f25c:	00803fc4 	movi	r2,255
  80f260:	7090703a 	and	r8,r14,r2
  80f264:	00802004 	movi	r2,128
  80f268:	0007883a 	mov	r3,zero
  80f26c:	0013883a 	mov	r9,zero
  80f270:	40800d26 	beq	r8,r2,80f2a8 <__divdf3+0x204>
  80f274:	dbc00815 	stw	r15,32(sp)
  80f278:	db800715 	stw	r14,28(sp)
  80f27c:	003fab06 	br	80f12c <__divdf3+0x88>
  80f280:	343fc92e 	bgeu	r6,r16,80f1a8 <__divdf3+0x104>
  80f284:	3185883a 	add	r2,r6,r6
  80f288:	1189803a 	cmpltu	r4,r2,r6
  80f28c:	39c7883a 	add	r3,r7,r7
  80f290:	20c9883a 	add	r4,r4,r3
  80f294:	297fffc4 	addi	r5,r5,-1
  80f298:	100d883a 	mov	r6,r2
  80f29c:	200f883a 	mov	r7,r4
  80f2a0:	d9400615 	stw	r5,24(sp)
  80f2a4:	003fc006 	br	80f1a8 <__divdf3+0x104>
  80f2a8:	483ff21e 	bne	r9,zero,80f274 <__divdf3+0x1d0>
  80f2ac:	01004004 	movi	r4,256
  80f2b0:	7104703a 	and	r2,r14,r4
  80f2b4:	10c4b03a 	or	r2,r2,r3
  80f2b8:	103fee1e 	bne	r2,zero,80f274 <__divdf3+0x1d0>
  80f2bc:	31c4b03a 	or	r2,r6,r7
  80f2c0:	103fec26 	beq	r2,zero,80f274 <__divdf3+0x1d0>
  80f2c4:	7205883a 	add	r2,r14,r8
  80f2c8:	1391803a 	cmpltu	r8,r2,r14
  80f2cc:	43d1883a 	add	r8,r8,r15
  80f2d0:	013fc004 	movi	r4,-256
  80f2d4:	111c703a 	and	r14,r2,r4
  80f2d8:	401f883a 	mov	r15,r8
  80f2dc:	003fe506 	br	80f274 <__divdf3+0x1d0>
  80f2e0:	8009883a 	mov	r4,r16
  80f2e4:	003f9206 	br	80f130 <__divdf3+0x8c>
  80f2e8:	9809883a 	mov	r4,r19
  80f2ec:	d8000715 	stw	zero,28(sp)
  80f2f0:	d8000815 	stw	zero,32(sp)
  80f2f4:	d8000615 	stw	zero,24(sp)
  80f2f8:	003f8d06 	br	80f130 <__divdf3+0x8c>

0080f2fc <__eqdf2>:
  80f2fc:	deffef04 	addi	sp,sp,-68
  80f300:	dc400f15 	stw	r17,60(sp)
  80f304:	dc400404 	addi	r17,sp,16
  80f308:	2005883a 	mov	r2,r4
  80f30c:	2807883a 	mov	r3,r5
  80f310:	dc000e15 	stw	r16,56(sp)
  80f314:	d809883a 	mov	r4,sp
  80f318:	880b883a 	mov	r5,r17
  80f31c:	dc000904 	addi	r16,sp,36
  80f320:	d8c00115 	stw	r3,4(sp)
  80f324:	d8800015 	stw	r2,0(sp)
  80f328:	d9800215 	stw	r6,8(sp)
  80f32c:	dfc01015 	stw	ra,64(sp)
  80f330:	d9c00315 	stw	r7,12(sp)
  80f334:	08100800 	call	810080 <__unpack_d>
  80f338:	d9000204 	addi	r4,sp,8
  80f33c:	800b883a 	mov	r5,r16
  80f340:	08100800 	call	810080 <__unpack_d>
  80f344:	d8800417 	ldw	r2,16(sp)
  80f348:	00c00044 	movi	r3,1
  80f34c:	180d883a 	mov	r6,r3
  80f350:	1880062e 	bgeu	r3,r2,80f36c <__eqdf2+0x70>
  80f354:	d8800917 	ldw	r2,36(sp)
  80f358:	8809883a 	mov	r4,r17
  80f35c:	800b883a 	mov	r5,r16
  80f360:	1880022e 	bgeu	r3,r2,80f36c <__eqdf2+0x70>
  80f364:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f368:	100d883a 	mov	r6,r2
  80f36c:	3005883a 	mov	r2,r6
  80f370:	dfc01017 	ldw	ra,64(sp)
  80f374:	dc400f17 	ldw	r17,60(sp)
  80f378:	dc000e17 	ldw	r16,56(sp)
  80f37c:	dec01104 	addi	sp,sp,68
  80f380:	f800283a 	ret

0080f384 <__nedf2>:
  80f384:	deffef04 	addi	sp,sp,-68
  80f388:	dc400f15 	stw	r17,60(sp)
  80f38c:	dc400404 	addi	r17,sp,16
  80f390:	2005883a 	mov	r2,r4
  80f394:	2807883a 	mov	r3,r5
  80f398:	dc000e15 	stw	r16,56(sp)
  80f39c:	d809883a 	mov	r4,sp
  80f3a0:	880b883a 	mov	r5,r17
  80f3a4:	dc000904 	addi	r16,sp,36
  80f3a8:	d8c00115 	stw	r3,4(sp)
  80f3ac:	d8800015 	stw	r2,0(sp)
  80f3b0:	d9800215 	stw	r6,8(sp)
  80f3b4:	dfc01015 	stw	ra,64(sp)
  80f3b8:	d9c00315 	stw	r7,12(sp)
  80f3bc:	08100800 	call	810080 <__unpack_d>
  80f3c0:	d9000204 	addi	r4,sp,8
  80f3c4:	800b883a 	mov	r5,r16
  80f3c8:	08100800 	call	810080 <__unpack_d>
  80f3cc:	d8800417 	ldw	r2,16(sp)
  80f3d0:	00c00044 	movi	r3,1
  80f3d4:	180d883a 	mov	r6,r3
  80f3d8:	1880062e 	bgeu	r3,r2,80f3f4 <__nedf2+0x70>
  80f3dc:	d8800917 	ldw	r2,36(sp)
  80f3e0:	8809883a 	mov	r4,r17
  80f3e4:	800b883a 	mov	r5,r16
  80f3e8:	1880022e 	bgeu	r3,r2,80f3f4 <__nedf2+0x70>
  80f3ec:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f3f0:	100d883a 	mov	r6,r2
  80f3f4:	3005883a 	mov	r2,r6
  80f3f8:	dfc01017 	ldw	ra,64(sp)
  80f3fc:	dc400f17 	ldw	r17,60(sp)
  80f400:	dc000e17 	ldw	r16,56(sp)
  80f404:	dec01104 	addi	sp,sp,68
  80f408:	f800283a 	ret

0080f40c <__gtdf2>:
  80f40c:	deffef04 	addi	sp,sp,-68
  80f410:	dc400f15 	stw	r17,60(sp)
  80f414:	dc400404 	addi	r17,sp,16
  80f418:	2005883a 	mov	r2,r4
  80f41c:	2807883a 	mov	r3,r5
  80f420:	dc000e15 	stw	r16,56(sp)
  80f424:	d809883a 	mov	r4,sp
  80f428:	880b883a 	mov	r5,r17
  80f42c:	dc000904 	addi	r16,sp,36
  80f430:	d8c00115 	stw	r3,4(sp)
  80f434:	d8800015 	stw	r2,0(sp)
  80f438:	d9800215 	stw	r6,8(sp)
  80f43c:	dfc01015 	stw	ra,64(sp)
  80f440:	d9c00315 	stw	r7,12(sp)
  80f444:	08100800 	call	810080 <__unpack_d>
  80f448:	d9000204 	addi	r4,sp,8
  80f44c:	800b883a 	mov	r5,r16
  80f450:	08100800 	call	810080 <__unpack_d>
  80f454:	d8800417 	ldw	r2,16(sp)
  80f458:	00c00044 	movi	r3,1
  80f45c:	01bfffc4 	movi	r6,-1
  80f460:	1880062e 	bgeu	r3,r2,80f47c <__gtdf2+0x70>
  80f464:	d8800917 	ldw	r2,36(sp)
  80f468:	8809883a 	mov	r4,r17
  80f46c:	800b883a 	mov	r5,r16
  80f470:	1880022e 	bgeu	r3,r2,80f47c <__gtdf2+0x70>
  80f474:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f478:	100d883a 	mov	r6,r2
  80f47c:	3005883a 	mov	r2,r6
  80f480:	dfc01017 	ldw	ra,64(sp)
  80f484:	dc400f17 	ldw	r17,60(sp)
  80f488:	dc000e17 	ldw	r16,56(sp)
  80f48c:	dec01104 	addi	sp,sp,68
  80f490:	f800283a 	ret

0080f494 <__gedf2>:
  80f494:	deffef04 	addi	sp,sp,-68
  80f498:	dc400f15 	stw	r17,60(sp)
  80f49c:	dc400404 	addi	r17,sp,16
  80f4a0:	2005883a 	mov	r2,r4
  80f4a4:	2807883a 	mov	r3,r5
  80f4a8:	dc000e15 	stw	r16,56(sp)
  80f4ac:	d809883a 	mov	r4,sp
  80f4b0:	880b883a 	mov	r5,r17
  80f4b4:	dc000904 	addi	r16,sp,36
  80f4b8:	d8c00115 	stw	r3,4(sp)
  80f4bc:	d8800015 	stw	r2,0(sp)
  80f4c0:	d9800215 	stw	r6,8(sp)
  80f4c4:	dfc01015 	stw	ra,64(sp)
  80f4c8:	d9c00315 	stw	r7,12(sp)
  80f4cc:	08100800 	call	810080 <__unpack_d>
  80f4d0:	d9000204 	addi	r4,sp,8
  80f4d4:	800b883a 	mov	r5,r16
  80f4d8:	08100800 	call	810080 <__unpack_d>
  80f4dc:	d8800417 	ldw	r2,16(sp)
  80f4e0:	00c00044 	movi	r3,1
  80f4e4:	01bfffc4 	movi	r6,-1
  80f4e8:	1880062e 	bgeu	r3,r2,80f504 <__gedf2+0x70>
  80f4ec:	d8800917 	ldw	r2,36(sp)
  80f4f0:	8809883a 	mov	r4,r17
  80f4f4:	800b883a 	mov	r5,r16
  80f4f8:	1880022e 	bgeu	r3,r2,80f504 <__gedf2+0x70>
  80f4fc:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f500:	100d883a 	mov	r6,r2
  80f504:	3005883a 	mov	r2,r6
  80f508:	dfc01017 	ldw	ra,64(sp)
  80f50c:	dc400f17 	ldw	r17,60(sp)
  80f510:	dc000e17 	ldw	r16,56(sp)
  80f514:	dec01104 	addi	sp,sp,68
  80f518:	f800283a 	ret

0080f51c <__ltdf2>:
  80f51c:	deffef04 	addi	sp,sp,-68
  80f520:	dc400f15 	stw	r17,60(sp)
  80f524:	dc400404 	addi	r17,sp,16
  80f528:	2005883a 	mov	r2,r4
  80f52c:	2807883a 	mov	r3,r5
  80f530:	dc000e15 	stw	r16,56(sp)
  80f534:	d809883a 	mov	r4,sp
  80f538:	880b883a 	mov	r5,r17
  80f53c:	dc000904 	addi	r16,sp,36
  80f540:	d8c00115 	stw	r3,4(sp)
  80f544:	d8800015 	stw	r2,0(sp)
  80f548:	d9800215 	stw	r6,8(sp)
  80f54c:	dfc01015 	stw	ra,64(sp)
  80f550:	d9c00315 	stw	r7,12(sp)
  80f554:	08100800 	call	810080 <__unpack_d>
  80f558:	d9000204 	addi	r4,sp,8
  80f55c:	800b883a 	mov	r5,r16
  80f560:	08100800 	call	810080 <__unpack_d>
  80f564:	d8800417 	ldw	r2,16(sp)
  80f568:	00c00044 	movi	r3,1
  80f56c:	180d883a 	mov	r6,r3
  80f570:	1880062e 	bgeu	r3,r2,80f58c <__ltdf2+0x70>
  80f574:	d8800917 	ldw	r2,36(sp)
  80f578:	8809883a 	mov	r4,r17
  80f57c:	800b883a 	mov	r5,r16
  80f580:	1880022e 	bgeu	r3,r2,80f58c <__ltdf2+0x70>
  80f584:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f588:	100d883a 	mov	r6,r2
  80f58c:	3005883a 	mov	r2,r6
  80f590:	dfc01017 	ldw	ra,64(sp)
  80f594:	dc400f17 	ldw	r17,60(sp)
  80f598:	dc000e17 	ldw	r16,56(sp)
  80f59c:	dec01104 	addi	sp,sp,68
  80f5a0:	f800283a 	ret

0080f5a4 <__ledf2>:
  80f5a4:	deffef04 	addi	sp,sp,-68
  80f5a8:	dc400f15 	stw	r17,60(sp)
  80f5ac:	dc400404 	addi	r17,sp,16
  80f5b0:	2005883a 	mov	r2,r4
  80f5b4:	2807883a 	mov	r3,r5
  80f5b8:	dc000e15 	stw	r16,56(sp)
  80f5bc:	d809883a 	mov	r4,sp
  80f5c0:	880b883a 	mov	r5,r17
  80f5c4:	dc000904 	addi	r16,sp,36
  80f5c8:	d8c00115 	stw	r3,4(sp)
  80f5cc:	d8800015 	stw	r2,0(sp)
  80f5d0:	d9800215 	stw	r6,8(sp)
  80f5d4:	dfc01015 	stw	ra,64(sp)
  80f5d8:	d9c00315 	stw	r7,12(sp)
  80f5dc:	08100800 	call	810080 <__unpack_d>
  80f5e0:	d9000204 	addi	r4,sp,8
  80f5e4:	800b883a 	mov	r5,r16
  80f5e8:	08100800 	call	810080 <__unpack_d>
  80f5ec:	d8800417 	ldw	r2,16(sp)
  80f5f0:	00c00044 	movi	r3,1
  80f5f4:	180d883a 	mov	r6,r3
  80f5f8:	1880062e 	bgeu	r3,r2,80f614 <__ledf2+0x70>
  80f5fc:	d8800917 	ldw	r2,36(sp)
  80f600:	8809883a 	mov	r4,r17
  80f604:	800b883a 	mov	r5,r16
  80f608:	1880022e 	bgeu	r3,r2,80f614 <__ledf2+0x70>
  80f60c:	08101b80 	call	8101b8 <__fpcmp_parts_d>
  80f610:	100d883a 	mov	r6,r2
  80f614:	3005883a 	mov	r2,r6
  80f618:	dfc01017 	ldw	ra,64(sp)
  80f61c:	dc400f17 	ldw	r17,60(sp)
  80f620:	dc000e17 	ldw	r16,56(sp)
  80f624:	dec01104 	addi	sp,sp,68
  80f628:	f800283a 	ret

0080f62c <__floatsidf>:
  80f62c:	2006d7fa 	srli	r3,r4,31
  80f630:	defff604 	addi	sp,sp,-40
  80f634:	008000c4 	movi	r2,3
  80f638:	dfc00915 	stw	ra,36(sp)
  80f63c:	dcc00815 	stw	r19,32(sp)
  80f640:	dc800715 	stw	r18,28(sp)
  80f644:	dc400615 	stw	r17,24(sp)
  80f648:	dc000515 	stw	r16,20(sp)
  80f64c:	d8800015 	stw	r2,0(sp)
  80f650:	d8c00115 	stw	r3,4(sp)
  80f654:	20000f1e 	bne	r4,zero,80f694 <__floatsidf+0x68>
  80f658:	00800084 	movi	r2,2
  80f65c:	d8800015 	stw	r2,0(sp)
  80f660:	d809883a 	mov	r4,sp
  80f664:	080fd6c0 	call	80fd6c <__pack_d>
  80f668:	1009883a 	mov	r4,r2
  80f66c:	180b883a 	mov	r5,r3
  80f670:	2005883a 	mov	r2,r4
  80f674:	2807883a 	mov	r3,r5
  80f678:	dfc00917 	ldw	ra,36(sp)
  80f67c:	dcc00817 	ldw	r19,32(sp)
  80f680:	dc800717 	ldw	r18,28(sp)
  80f684:	dc400617 	ldw	r17,24(sp)
  80f688:	dc000517 	ldw	r16,20(sp)
  80f68c:	dec00a04 	addi	sp,sp,40
  80f690:	f800283a 	ret
  80f694:	00800f04 	movi	r2,60
  80f698:	1807003a 	cmpeq	r3,r3,zero
  80f69c:	d8800215 	stw	r2,8(sp)
  80f6a0:	18001126 	beq	r3,zero,80f6e8 <__floatsidf+0xbc>
  80f6a4:	0027883a 	mov	r19,zero
  80f6a8:	2025883a 	mov	r18,r4
  80f6ac:	d9000315 	stw	r4,12(sp)
  80f6b0:	dcc00415 	stw	r19,16(sp)
  80f6b4:	080fb500 	call	80fb50 <__clzsi2>
  80f6b8:	11000744 	addi	r4,r2,29
  80f6bc:	013fe80e 	bge	zero,r4,80f660 <__floatsidf+0x34>
  80f6c0:	10bfff44 	addi	r2,r2,-3
  80f6c4:	10000c16 	blt	r2,zero,80f6f8 <__floatsidf+0xcc>
  80f6c8:	90a2983a 	sll	r17,r18,r2
  80f6cc:	0021883a 	mov	r16,zero
  80f6d0:	d8800217 	ldw	r2,8(sp)
  80f6d4:	dc400415 	stw	r17,16(sp)
  80f6d8:	dc000315 	stw	r16,12(sp)
  80f6dc:	1105c83a 	sub	r2,r2,r4
  80f6e0:	d8800215 	stw	r2,8(sp)
  80f6e4:	003fde06 	br	80f660 <__floatsidf+0x34>
  80f6e8:	00a00034 	movhi	r2,32768
  80f6ec:	20800a26 	beq	r4,r2,80f718 <__floatsidf+0xec>
  80f6f0:	0109c83a 	sub	r4,zero,r4
  80f6f4:	003feb06 	br	80f6a4 <__floatsidf+0x78>
  80f6f8:	9006d07a 	srli	r3,r18,1
  80f6fc:	008007c4 	movi	r2,31
  80f700:	1105c83a 	sub	r2,r2,r4
  80f704:	1886d83a 	srl	r3,r3,r2
  80f708:	9922983a 	sll	r17,r19,r4
  80f70c:	9120983a 	sll	r16,r18,r4
  80f710:	1c62b03a 	or	r17,r3,r17
  80f714:	003fee06 	br	80f6d0 <__floatsidf+0xa4>
  80f718:	0009883a 	mov	r4,zero
  80f71c:	01707834 	movhi	r5,49632
  80f720:	003fd306 	br	80f670 <__floatsidf+0x44>

0080f724 <__fixdfsi>:
  80f724:	defff804 	addi	sp,sp,-32
  80f728:	2005883a 	mov	r2,r4
  80f72c:	2807883a 	mov	r3,r5
  80f730:	d809883a 	mov	r4,sp
  80f734:	d9400204 	addi	r5,sp,8
  80f738:	d8c00115 	stw	r3,4(sp)
  80f73c:	d8800015 	stw	r2,0(sp)
  80f740:	dfc00715 	stw	ra,28(sp)
  80f744:	08100800 	call	810080 <__unpack_d>
  80f748:	d8c00217 	ldw	r3,8(sp)
  80f74c:	00800084 	movi	r2,2
  80f750:	1880051e 	bne	r3,r2,80f768 <__fixdfsi+0x44>
  80f754:	0007883a 	mov	r3,zero
  80f758:	1805883a 	mov	r2,r3
  80f75c:	dfc00717 	ldw	ra,28(sp)
  80f760:	dec00804 	addi	sp,sp,32
  80f764:	f800283a 	ret
  80f768:	00800044 	movi	r2,1
  80f76c:	10fff92e 	bgeu	r2,r3,80f754 <__fixdfsi+0x30>
  80f770:	00800104 	movi	r2,4
  80f774:	18800426 	beq	r3,r2,80f788 <__fixdfsi+0x64>
  80f778:	d8c00417 	ldw	r3,16(sp)
  80f77c:	183ff516 	blt	r3,zero,80f754 <__fixdfsi+0x30>
  80f780:	00800784 	movi	r2,30
  80f784:	10c0080e 	bge	r2,r3,80f7a8 <__fixdfsi+0x84>
  80f788:	d8800317 	ldw	r2,12(sp)
  80f78c:	1000121e 	bne	r2,zero,80f7d8 <__fixdfsi+0xb4>
  80f790:	00e00034 	movhi	r3,32768
  80f794:	18ffffc4 	addi	r3,r3,-1
  80f798:	1805883a 	mov	r2,r3
  80f79c:	dfc00717 	ldw	ra,28(sp)
  80f7a0:	dec00804 	addi	sp,sp,32
  80f7a4:	f800283a 	ret
  80f7a8:	00800f04 	movi	r2,60
  80f7ac:	10d1c83a 	sub	r8,r2,r3
  80f7b0:	40bff804 	addi	r2,r8,-32
  80f7b4:	d9800517 	ldw	r6,20(sp)
  80f7b8:	d9c00617 	ldw	r7,24(sp)
  80f7bc:	10000816 	blt	r2,zero,80f7e0 <__fixdfsi+0xbc>
  80f7c0:	3888d83a 	srl	r4,r7,r2
  80f7c4:	d8800317 	ldw	r2,12(sp)
  80f7c8:	2007883a 	mov	r3,r4
  80f7cc:	103fe226 	beq	r2,zero,80f758 <__fixdfsi+0x34>
  80f7d0:	0107c83a 	sub	r3,zero,r4
  80f7d4:	003fe006 	br	80f758 <__fixdfsi+0x34>
  80f7d8:	00e00034 	movhi	r3,32768
  80f7dc:	003fde06 	br	80f758 <__fixdfsi+0x34>
  80f7e0:	39c7883a 	add	r3,r7,r7
  80f7e4:	008007c4 	movi	r2,31
  80f7e8:	1205c83a 	sub	r2,r2,r8
  80f7ec:	1886983a 	sll	r3,r3,r2
  80f7f0:	3208d83a 	srl	r4,r6,r8
  80f7f4:	1908b03a 	or	r4,r3,r4
  80f7f8:	003ff206 	br	80f7c4 <__fixdfsi+0xa0>

0080f7fc <__truncdfsf2>:
  80f7fc:	defff804 	addi	sp,sp,-32
  80f800:	2005883a 	mov	r2,r4
  80f804:	2807883a 	mov	r3,r5
  80f808:	d809883a 	mov	r4,sp
  80f80c:	d9400204 	addi	r5,sp,8
  80f810:	d8c00115 	stw	r3,4(sp)
  80f814:	d8800015 	stw	r2,0(sp)
  80f818:	dfc00715 	stw	ra,28(sp)
  80f81c:	08100800 	call	810080 <__unpack_d>
  80f820:	d9c00517 	ldw	r7,20(sp)
  80f824:	da000617 	ldw	r8,24(sp)
  80f828:	02d00034 	movhi	r11,16384
  80f82c:	5affffc4 	addi	r11,r11,-1
  80f830:	3812d7ba 	srli	r9,r7,30
  80f834:	401a90ba 	slli	r13,r8,2
  80f838:	3ac4703a 	and	r2,r7,r11
  80f83c:	0007883a 	mov	r3,zero
  80f840:	6a52b03a 	or	r9,r13,r9
  80f844:	10c4b03a 	or	r2,r2,r3
  80f848:	d9000217 	ldw	r4,8(sp)
  80f84c:	d9400317 	ldw	r5,12(sp)
  80f850:	d9800417 	ldw	r6,16(sp)
  80f854:	480f883a 	mov	r7,r9
  80f858:	10000126 	beq	r2,zero,80f860 <__truncdfsf2+0x64>
  80f85c:	49c00054 	ori	r7,r9,1
  80f860:	080fd400 	call	80fd40 <__make_fp>
  80f864:	dfc00717 	ldw	ra,28(sp)
  80f868:	dec00804 	addi	sp,sp,32
  80f86c:	f800283a 	ret

0080f870 <__floatunsidf>:
  80f870:	defff204 	addi	sp,sp,-56
  80f874:	dfc00d15 	stw	ra,52(sp)
  80f878:	ddc00c15 	stw	r23,48(sp)
  80f87c:	dd800b15 	stw	r22,44(sp)
  80f880:	dd400a15 	stw	r21,40(sp)
  80f884:	dd000915 	stw	r20,36(sp)
  80f888:	dcc00815 	stw	r19,32(sp)
  80f88c:	dc800715 	stw	r18,28(sp)
  80f890:	dc400615 	stw	r17,24(sp)
  80f894:	dc000515 	stw	r16,20(sp)
  80f898:	d8000115 	stw	zero,4(sp)
  80f89c:	20000f1e 	bne	r4,zero,80f8dc <__floatunsidf+0x6c>
  80f8a0:	00800084 	movi	r2,2
  80f8a4:	d8800015 	stw	r2,0(sp)
  80f8a8:	d809883a 	mov	r4,sp
  80f8ac:	080fd6c0 	call	80fd6c <__pack_d>
  80f8b0:	dfc00d17 	ldw	ra,52(sp)
  80f8b4:	ddc00c17 	ldw	r23,48(sp)
  80f8b8:	dd800b17 	ldw	r22,44(sp)
  80f8bc:	dd400a17 	ldw	r21,40(sp)
  80f8c0:	dd000917 	ldw	r20,36(sp)
  80f8c4:	dcc00817 	ldw	r19,32(sp)
  80f8c8:	dc800717 	ldw	r18,28(sp)
  80f8cc:	dc400617 	ldw	r17,24(sp)
  80f8d0:	dc000517 	ldw	r16,20(sp)
  80f8d4:	dec00e04 	addi	sp,sp,56
  80f8d8:	f800283a 	ret
  80f8dc:	008000c4 	movi	r2,3
  80f8e0:	00c00f04 	movi	r3,60
  80f8e4:	002f883a 	mov	r23,zero
  80f8e8:	202d883a 	mov	r22,r4
  80f8ec:	d8800015 	stw	r2,0(sp)
  80f8f0:	d8c00215 	stw	r3,8(sp)
  80f8f4:	d9000315 	stw	r4,12(sp)
  80f8f8:	ddc00415 	stw	r23,16(sp)
  80f8fc:	080fb500 	call	80fb50 <__clzsi2>
  80f900:	12400744 	addi	r9,r2,29
  80f904:	48000b16 	blt	r9,zero,80f934 <__floatunsidf+0xc4>
  80f908:	483fe726 	beq	r9,zero,80f8a8 <__floatunsidf+0x38>
  80f90c:	10bfff44 	addi	r2,r2,-3
  80f910:	10002e16 	blt	r2,zero,80f9cc <__floatunsidf+0x15c>
  80f914:	b0a2983a 	sll	r17,r22,r2
  80f918:	0021883a 	mov	r16,zero
  80f91c:	d8800217 	ldw	r2,8(sp)
  80f920:	dc400415 	stw	r17,16(sp)
  80f924:	dc000315 	stw	r16,12(sp)
  80f928:	1245c83a 	sub	r2,r2,r9
  80f92c:	d8800215 	stw	r2,8(sp)
  80f930:	003fdd06 	br	80f8a8 <__floatunsidf+0x38>
  80f934:	0255c83a 	sub	r10,zero,r9
  80f938:	51bff804 	addi	r6,r10,-32
  80f93c:	30001b16 	blt	r6,zero,80f9ac <__floatunsidf+0x13c>
  80f940:	b9a8d83a 	srl	r20,r23,r6
  80f944:	002b883a 	mov	r21,zero
  80f948:	000f883a 	mov	r7,zero
  80f94c:	01000044 	movi	r4,1
  80f950:	0011883a 	mov	r8,zero
  80f954:	30002516 	blt	r6,zero,80f9ec <__floatunsidf+0x17c>
  80f958:	21a6983a 	sll	r19,r4,r6
  80f95c:	0025883a 	mov	r18,zero
  80f960:	00bfffc4 	movi	r2,-1
  80f964:	9089883a 	add	r4,r18,r2
  80f968:	988b883a 	add	r5,r19,r2
  80f96c:	248d803a 	cmpltu	r6,r4,r18
  80f970:	314b883a 	add	r5,r6,r5
  80f974:	b104703a 	and	r2,r22,r4
  80f978:	b946703a 	and	r3,r23,r5
  80f97c:	10c4b03a 	or	r2,r2,r3
  80f980:	10000226 	beq	r2,zero,80f98c <__floatunsidf+0x11c>
  80f984:	01c00044 	movi	r7,1
  80f988:	0011883a 	mov	r8,zero
  80f98c:	d9000217 	ldw	r4,8(sp)
  80f990:	a1c4b03a 	or	r2,r20,r7
  80f994:	aa06b03a 	or	r3,r21,r8
  80f998:	2249c83a 	sub	r4,r4,r9
  80f99c:	d8c00415 	stw	r3,16(sp)
  80f9a0:	d9000215 	stw	r4,8(sp)
  80f9a4:	d8800315 	stw	r2,12(sp)
  80f9a8:	003fbf06 	br	80f8a8 <__floatunsidf+0x38>
  80f9ac:	bdc7883a 	add	r3,r23,r23
  80f9b0:	008007c4 	movi	r2,31
  80f9b4:	1285c83a 	sub	r2,r2,r10
  80f9b8:	1886983a 	sll	r3,r3,r2
  80f9bc:	b2a8d83a 	srl	r20,r22,r10
  80f9c0:	baaad83a 	srl	r21,r23,r10
  80f9c4:	1d28b03a 	or	r20,r3,r20
  80f9c8:	003fdf06 	br	80f948 <__floatunsidf+0xd8>
  80f9cc:	b006d07a 	srli	r3,r22,1
  80f9d0:	008007c4 	movi	r2,31
  80f9d4:	1245c83a 	sub	r2,r2,r9
  80f9d8:	1886d83a 	srl	r3,r3,r2
  80f9dc:	ba62983a 	sll	r17,r23,r9
  80f9e0:	b260983a 	sll	r16,r22,r9
  80f9e4:	1c62b03a 	or	r17,r3,r17
  80f9e8:	003fcc06 	br	80f91c <__floatunsidf+0xac>
  80f9ec:	2006d07a 	srli	r3,r4,1
  80f9f0:	008007c4 	movi	r2,31
  80f9f4:	1285c83a 	sub	r2,r2,r10
  80f9f8:	18a6d83a 	srl	r19,r3,r2
  80f9fc:	22a4983a 	sll	r18,r4,r10
  80fa00:	003fd706 	br	80f960 <__floatunsidf+0xf0>

0080fa04 <udivmodsi4>:
  80fa04:	29001b2e 	bgeu	r5,r4,80fa74 <udivmodsi4+0x70>
  80fa08:	28001a16 	blt	r5,zero,80fa74 <udivmodsi4+0x70>
  80fa0c:	00800044 	movi	r2,1
  80fa10:	0007883a 	mov	r3,zero
  80fa14:	01c007c4 	movi	r7,31
  80fa18:	00000306 	br	80fa28 <udivmodsi4+0x24>
  80fa1c:	19c01326 	beq	r3,r7,80fa6c <udivmodsi4+0x68>
  80fa20:	18c00044 	addi	r3,r3,1
  80fa24:	28000416 	blt	r5,zero,80fa38 <udivmodsi4+0x34>
  80fa28:	294b883a 	add	r5,r5,r5
  80fa2c:	1085883a 	add	r2,r2,r2
  80fa30:	293ffa36 	bltu	r5,r4,80fa1c <udivmodsi4+0x18>
  80fa34:	10000d26 	beq	r2,zero,80fa6c <udivmodsi4+0x68>
  80fa38:	0007883a 	mov	r3,zero
  80fa3c:	21400236 	bltu	r4,r5,80fa48 <udivmodsi4+0x44>
  80fa40:	2149c83a 	sub	r4,r4,r5
  80fa44:	1886b03a 	or	r3,r3,r2
  80fa48:	1004d07a 	srli	r2,r2,1
  80fa4c:	280ad07a 	srli	r5,r5,1
  80fa50:	103ffa1e 	bne	r2,zero,80fa3c <udivmodsi4+0x38>
  80fa54:	30000226 	beq	r6,zero,80fa60 <udivmodsi4+0x5c>
  80fa58:	2005883a 	mov	r2,r4
  80fa5c:	f800283a 	ret
  80fa60:	1809883a 	mov	r4,r3
  80fa64:	2005883a 	mov	r2,r4
  80fa68:	f800283a 	ret
  80fa6c:	0007883a 	mov	r3,zero
  80fa70:	003ff806 	br	80fa54 <udivmodsi4+0x50>
  80fa74:	00800044 	movi	r2,1
  80fa78:	0007883a 	mov	r3,zero
  80fa7c:	003fef06 	br	80fa3c <udivmodsi4+0x38>

0080fa80 <__divsi3>:
  80fa80:	defffe04 	addi	sp,sp,-8
  80fa84:	dc000015 	stw	r16,0(sp)
  80fa88:	dfc00115 	stw	ra,4(sp)
  80fa8c:	0021883a 	mov	r16,zero
  80fa90:	20000c16 	blt	r4,zero,80fac4 <__divsi3+0x44>
  80fa94:	000d883a 	mov	r6,zero
  80fa98:	28000e16 	blt	r5,zero,80fad4 <__divsi3+0x54>
  80fa9c:	080fa040 	call	80fa04 <udivmodsi4>
  80faa0:	1007883a 	mov	r3,r2
  80faa4:	8005003a 	cmpeq	r2,r16,zero
  80faa8:	1000011e 	bne	r2,zero,80fab0 <__divsi3+0x30>
  80faac:	00c7c83a 	sub	r3,zero,r3
  80fab0:	1805883a 	mov	r2,r3
  80fab4:	dfc00117 	ldw	ra,4(sp)
  80fab8:	dc000017 	ldw	r16,0(sp)
  80fabc:	dec00204 	addi	sp,sp,8
  80fac0:	f800283a 	ret
  80fac4:	0109c83a 	sub	r4,zero,r4
  80fac8:	04000044 	movi	r16,1
  80facc:	000d883a 	mov	r6,zero
  80fad0:	283ff20e 	bge	r5,zero,80fa9c <__divsi3+0x1c>
  80fad4:	014bc83a 	sub	r5,zero,r5
  80fad8:	8021003a 	cmpeq	r16,r16,zero
  80fadc:	003fef06 	br	80fa9c <__divsi3+0x1c>

0080fae0 <__modsi3>:
  80fae0:	deffff04 	addi	sp,sp,-4
  80fae4:	dfc00015 	stw	ra,0(sp)
  80fae8:	01800044 	movi	r6,1
  80faec:	2807883a 	mov	r3,r5
  80faf0:	20000416 	blt	r4,zero,80fb04 <__modsi3+0x24>
  80faf4:	28000c16 	blt	r5,zero,80fb28 <__modsi3+0x48>
  80faf8:	dfc00017 	ldw	ra,0(sp)
  80fafc:	dec00104 	addi	sp,sp,4
  80fb00:	080fa041 	jmpi	80fa04 <udivmodsi4>
  80fb04:	0109c83a 	sub	r4,zero,r4
  80fb08:	28000b16 	blt	r5,zero,80fb38 <__modsi3+0x58>
  80fb0c:	180b883a 	mov	r5,r3
  80fb10:	01800044 	movi	r6,1
  80fb14:	080fa040 	call	80fa04 <udivmodsi4>
  80fb18:	0085c83a 	sub	r2,zero,r2
  80fb1c:	dfc00017 	ldw	ra,0(sp)
  80fb20:	dec00104 	addi	sp,sp,4
  80fb24:	f800283a 	ret
  80fb28:	014bc83a 	sub	r5,zero,r5
  80fb2c:	dfc00017 	ldw	ra,0(sp)
  80fb30:	dec00104 	addi	sp,sp,4
  80fb34:	080fa041 	jmpi	80fa04 <udivmodsi4>
  80fb38:	0147c83a 	sub	r3,zero,r5
  80fb3c:	003ff306 	br	80fb0c <__modsi3+0x2c>

0080fb40 <__udivsi3>:
  80fb40:	000d883a 	mov	r6,zero
  80fb44:	080fa041 	jmpi	80fa04 <udivmodsi4>

0080fb48 <__umodsi3>:
  80fb48:	01800044 	movi	r6,1
  80fb4c:	080fa041 	jmpi	80fa04 <udivmodsi4>

0080fb50 <__clzsi2>:
  80fb50:	00bfffd4 	movui	r2,65535
  80fb54:	11000e36 	bltu	r2,r4,80fb90 <__clzsi2+0x40>
  80fb58:	00803fc4 	movi	r2,255
  80fb5c:	01400204 	movi	r5,8
  80fb60:	0007883a 	mov	r3,zero
  80fb64:	11001036 	bltu	r2,r4,80fba8 <__clzsi2+0x58>
  80fb68:	000b883a 	mov	r5,zero
  80fb6c:	20c6d83a 	srl	r3,r4,r3
  80fb70:	00802074 	movhi	r2,129
  80fb74:	10942104 	addi	r2,r2,20612
  80fb78:	1887883a 	add	r3,r3,r2
  80fb7c:	18800003 	ldbu	r2,0(r3)
  80fb80:	00c00804 	movi	r3,32
  80fb84:	2885883a 	add	r2,r5,r2
  80fb88:	1885c83a 	sub	r2,r3,r2
  80fb8c:	f800283a 	ret
  80fb90:	01400404 	movi	r5,16
  80fb94:	00804034 	movhi	r2,256
  80fb98:	10bfffc4 	addi	r2,r2,-1
  80fb9c:	2807883a 	mov	r3,r5
  80fba0:	113ff22e 	bgeu	r2,r4,80fb6c <__clzsi2+0x1c>
  80fba4:	01400604 	movi	r5,24
  80fba8:	2807883a 	mov	r3,r5
  80fbac:	20c6d83a 	srl	r3,r4,r3
  80fbb0:	00802074 	movhi	r2,129
  80fbb4:	10942104 	addi	r2,r2,20612
  80fbb8:	1887883a 	add	r3,r3,r2
  80fbbc:	18800003 	ldbu	r2,0(r3)
  80fbc0:	00c00804 	movi	r3,32
  80fbc4:	2885883a 	add	r2,r5,r2
  80fbc8:	1885c83a 	sub	r2,r3,r2
  80fbcc:	f800283a 	ret

0080fbd0 <__unpack_f>:
  80fbd0:	21800017 	ldw	r6,0(r4)
  80fbd4:	00c02034 	movhi	r3,128
  80fbd8:	18ffffc4 	addi	r3,r3,-1
  80fbdc:	3004d5fa 	srli	r2,r6,23
  80fbe0:	3008d7fa 	srli	r4,r6,31
  80fbe4:	30ce703a 	and	r7,r6,r3
  80fbe8:	10c03fcc 	andi	r3,r2,255
  80fbec:	29000115 	stw	r4,4(r5)
  80fbf0:	1800131e 	bne	r3,zero,80fc40 <__unpack_f+0x70>
  80fbf4:	38000f26 	beq	r7,zero,80fc34 <__unpack_f+0x64>
  80fbf8:	380691fa 	slli	r3,r7,7
  80fbfc:	01bfe084 	movi	r6,-126
  80fc00:	008000c4 	movi	r2,3
  80fc04:	01100034 	movhi	r4,16384
  80fc08:	213fffc4 	addi	r4,r4,-1
  80fc0c:	28800015 	stw	r2,0(r5)
  80fc10:	29800215 	stw	r6,8(r5)
  80fc14:	20c00536 	bltu	r4,r3,80fc2c <__unpack_f+0x5c>
  80fc18:	3005883a 	mov	r2,r6
  80fc1c:	18c7883a 	add	r3,r3,r3
  80fc20:	10bfffc4 	addi	r2,r2,-1
  80fc24:	20fffd2e 	bgeu	r4,r3,80fc1c <__unpack_f+0x4c>
  80fc28:	28800215 	stw	r2,8(r5)
  80fc2c:	28c00315 	stw	r3,12(r5)
  80fc30:	f800283a 	ret
  80fc34:	00800084 	movi	r2,2
  80fc38:	28800015 	stw	r2,0(r5)
  80fc3c:	f800283a 	ret
  80fc40:	00803fc4 	movi	r2,255
  80fc44:	18800826 	beq	r3,r2,80fc68 <__unpack_f+0x98>
  80fc48:	380491fa 	slli	r2,r7,7
  80fc4c:	18ffe044 	addi	r3,r3,-127
  80fc50:	28c00215 	stw	r3,8(r5)
  80fc54:	10900034 	orhi	r2,r2,16384
  80fc58:	28800315 	stw	r2,12(r5)
  80fc5c:	008000c4 	movi	r2,3
  80fc60:	28800015 	stw	r2,0(r5)
  80fc64:	f800283a 	ret
  80fc68:	3800031e 	bne	r7,zero,80fc78 <__unpack_f+0xa8>
  80fc6c:	00800104 	movi	r2,4
  80fc70:	28800015 	stw	r2,0(r5)
  80fc74:	f800283a 	ret
  80fc78:	3080042c 	andhi	r2,r6,16
  80fc7c:	10000426 	beq	r2,zero,80fc90 <__unpack_f+0xc0>
  80fc80:	00800044 	movi	r2,1
  80fc84:	28800015 	stw	r2,0(r5)
  80fc88:	29c00315 	stw	r7,12(r5)
  80fc8c:	f800283a 	ret
  80fc90:	28000015 	stw	zero,0(r5)
  80fc94:	003ffc06 	br	80fc88 <__unpack_f+0xb8>

0080fc98 <__fpcmp_parts_f>:
  80fc98:	21800017 	ldw	r6,0(r4)
  80fc9c:	00c00044 	movi	r3,1
  80fca0:	19800a2e 	bgeu	r3,r6,80fccc <__fpcmp_parts_f+0x34>
  80fca4:	28800017 	ldw	r2,0(r5)
  80fca8:	1880082e 	bgeu	r3,r2,80fccc <__fpcmp_parts_f+0x34>
  80fcac:	00c00104 	movi	r3,4
  80fcb0:	30c01e26 	beq	r6,r3,80fd2c <__fpcmp_parts_f+0x94>
  80fcb4:	10c01a26 	beq	r2,r3,80fd20 <__fpcmp_parts_f+0x88>
  80fcb8:	00c00084 	movi	r3,2
  80fcbc:	30c00526 	beq	r6,r3,80fcd4 <__fpcmp_parts_f+0x3c>
  80fcc0:	10c0071e 	bne	r2,r3,80fce0 <__fpcmp_parts_f+0x48>
  80fcc4:	20800117 	ldw	r2,4(r4)
  80fcc8:	1000091e 	bne	r2,zero,80fcf0 <__fpcmp_parts_f+0x58>
  80fccc:	00800044 	movi	r2,1
  80fcd0:	f800283a 	ret
  80fcd4:	10c0121e 	bne	r2,r3,80fd20 <__fpcmp_parts_f+0x88>
  80fcd8:	0005883a 	mov	r2,zero
  80fcdc:	f800283a 	ret
  80fce0:	20c00117 	ldw	r3,4(r4)
  80fce4:	28800117 	ldw	r2,4(r5)
  80fce8:	18800326 	beq	r3,r2,80fcf8 <__fpcmp_parts_f+0x60>
  80fcec:	183ff726 	beq	r3,zero,80fccc <__fpcmp_parts_f+0x34>
  80fcf0:	00bfffc4 	movi	r2,-1
  80fcf4:	f800283a 	ret
  80fcf8:	21800217 	ldw	r6,8(r4)
  80fcfc:	28800217 	ldw	r2,8(r5)
  80fd00:	11bffa16 	blt	r2,r6,80fcec <__fpcmp_parts_f+0x54>
  80fd04:	30800416 	blt	r6,r2,80fd18 <__fpcmp_parts_f+0x80>
  80fd08:	21000317 	ldw	r4,12(r4)
  80fd0c:	29400317 	ldw	r5,12(r5)
  80fd10:	293ff636 	bltu	r5,r4,80fcec <__fpcmp_parts_f+0x54>
  80fd14:	217ff02e 	bgeu	r4,r5,80fcd8 <__fpcmp_parts_f+0x40>
  80fd18:	183fec1e 	bne	r3,zero,80fccc <__fpcmp_parts_f+0x34>
  80fd1c:	003ff406 	br	80fcf0 <__fpcmp_parts_f+0x58>
  80fd20:	28800117 	ldw	r2,4(r5)
  80fd24:	103fe91e 	bne	r2,zero,80fccc <__fpcmp_parts_f+0x34>
  80fd28:	003ff106 	br	80fcf0 <__fpcmp_parts_f+0x58>
  80fd2c:	11bfe51e 	bne	r2,r6,80fcc4 <__fpcmp_parts_f+0x2c>
  80fd30:	28c00117 	ldw	r3,4(r5)
  80fd34:	20800117 	ldw	r2,4(r4)
  80fd38:	1885c83a 	sub	r2,r3,r2
  80fd3c:	f800283a 	ret

0080fd40 <__make_fp>:
  80fd40:	defffb04 	addi	sp,sp,-20
  80fd44:	d9000015 	stw	r4,0(sp)
  80fd48:	d809883a 	mov	r4,sp
  80fd4c:	dfc00415 	stw	ra,16(sp)
  80fd50:	d9400115 	stw	r5,4(sp)
  80fd54:	d9800215 	stw	r6,8(sp)
  80fd58:	d9c00315 	stw	r7,12(sp)
  80fd5c:	08102800 	call	810280 <__pack_f>
  80fd60:	dfc00417 	ldw	ra,16(sp)
  80fd64:	dec00504 	addi	sp,sp,20
  80fd68:	f800283a 	ret

0080fd6c <__pack_d>:
  80fd6c:	20c00017 	ldw	r3,0(r4)
  80fd70:	defffd04 	addi	sp,sp,-12
  80fd74:	dc000015 	stw	r16,0(sp)
  80fd78:	dc800215 	stw	r18,8(sp)
  80fd7c:	dc400115 	stw	r17,4(sp)
  80fd80:	00800044 	movi	r2,1
  80fd84:	22000317 	ldw	r8,12(r4)
  80fd88:	001f883a 	mov	r15,zero
  80fd8c:	22400417 	ldw	r9,16(r4)
  80fd90:	24000117 	ldw	r16,4(r4)
  80fd94:	10c0552e 	bgeu	r2,r3,80feec <__pack_d+0x180>
  80fd98:	00800104 	movi	r2,4
  80fd9c:	18804f26 	beq	r3,r2,80fedc <__pack_d+0x170>
  80fda0:	00800084 	movi	r2,2
  80fda4:	18800226 	beq	r3,r2,80fdb0 <__pack_d+0x44>
  80fda8:	4244b03a 	or	r2,r8,r9
  80fdac:	10001a1e 	bne	r2,zero,80fe18 <__pack_d+0xac>
  80fdb0:	000d883a 	mov	r6,zero
  80fdb4:	000f883a 	mov	r7,zero
  80fdb8:	0011883a 	mov	r8,zero
  80fdbc:	00800434 	movhi	r2,16
  80fdc0:	10bfffc4 	addi	r2,r2,-1
  80fdc4:	301d883a 	mov	r14,r6
  80fdc8:	3884703a 	and	r2,r7,r2
  80fdcc:	400a953a 	slli	r5,r8,20
  80fdd0:	79bffc2c 	andhi	r6,r15,65520
  80fdd4:	308cb03a 	or	r6,r6,r2
  80fdd8:	00e00434 	movhi	r3,32784
  80fddc:	18ffffc4 	addi	r3,r3,-1
  80fde0:	800497fa 	slli	r2,r16,31
  80fde4:	30c6703a 	and	r3,r6,r3
  80fde8:	1946b03a 	or	r3,r3,r5
  80fdec:	01600034 	movhi	r5,32768
  80fdf0:	297fffc4 	addi	r5,r5,-1
  80fdf4:	194a703a 	and	r5,r3,r5
  80fdf8:	288ab03a 	or	r5,r5,r2
  80fdfc:	2807883a 	mov	r3,r5
  80fe00:	7005883a 	mov	r2,r14
  80fe04:	dc800217 	ldw	r18,8(sp)
  80fe08:	dc400117 	ldw	r17,4(sp)
  80fe0c:	dc000017 	ldw	r16,0(sp)
  80fe10:	dec00304 	addi	sp,sp,12
  80fe14:	f800283a 	ret
  80fe18:	21000217 	ldw	r4,8(r4)
  80fe1c:	00bf0084 	movi	r2,-1022
  80fe20:	20803f16 	blt	r4,r2,80ff20 <__pack_d+0x1b4>
  80fe24:	0080ffc4 	movi	r2,1023
  80fe28:	11002c16 	blt	r2,r4,80fedc <__pack_d+0x170>
  80fe2c:	00803fc4 	movi	r2,255
  80fe30:	408c703a 	and	r6,r8,r2
  80fe34:	00802004 	movi	r2,128
  80fe38:	0007883a 	mov	r3,zero
  80fe3c:	000f883a 	mov	r7,zero
  80fe40:	2280ffc4 	addi	r10,r4,1023
  80fe44:	30801e26 	beq	r6,r2,80fec0 <__pack_d+0x154>
  80fe48:	00801fc4 	movi	r2,127
  80fe4c:	4089883a 	add	r4,r8,r2
  80fe50:	220d803a 	cmpltu	r6,r4,r8
  80fe54:	324d883a 	add	r6,r6,r9
  80fe58:	2011883a 	mov	r8,r4
  80fe5c:	3013883a 	mov	r9,r6
  80fe60:	00880034 	movhi	r2,8192
  80fe64:	10bfffc4 	addi	r2,r2,-1
  80fe68:	12400d36 	bltu	r2,r9,80fea0 <__pack_d+0x134>
  80fe6c:	4804963a 	slli	r2,r9,24
  80fe70:	400cd23a 	srli	r6,r8,8
  80fe74:	480ed23a 	srli	r7,r9,8
  80fe78:	013fffc4 	movi	r4,-1
  80fe7c:	118cb03a 	or	r6,r2,r6
  80fe80:	01400434 	movhi	r5,16
  80fe84:	297fffc4 	addi	r5,r5,-1
  80fe88:	3104703a 	and	r2,r6,r4
  80fe8c:	3946703a 	and	r3,r7,r5
  80fe90:	5201ffcc 	andi	r8,r10,2047
  80fe94:	100d883a 	mov	r6,r2
  80fe98:	180f883a 	mov	r7,r3
  80fe9c:	003fc706 	br	80fdbc <__pack_d+0x50>
  80fea0:	480897fa 	slli	r4,r9,31
  80fea4:	4004d07a 	srli	r2,r8,1
  80fea8:	4806d07a 	srli	r3,r9,1
  80feac:	52800044 	addi	r10,r10,1
  80feb0:	2084b03a 	or	r2,r4,r2
  80feb4:	1011883a 	mov	r8,r2
  80feb8:	1813883a 	mov	r9,r3
  80febc:	003feb06 	br	80fe6c <__pack_d+0x100>
  80fec0:	383fe11e 	bne	r7,zero,80fe48 <__pack_d+0xdc>
  80fec4:	01004004 	movi	r4,256
  80fec8:	4104703a 	and	r2,r8,r4
  80fecc:	10c4b03a 	or	r2,r2,r3
  80fed0:	103fe326 	beq	r2,zero,80fe60 <__pack_d+0xf4>
  80fed4:	3005883a 	mov	r2,r6
  80fed8:	003fdc06 	br	80fe4c <__pack_d+0xe0>
  80fedc:	000d883a 	mov	r6,zero
  80fee0:	000f883a 	mov	r7,zero
  80fee4:	0201ffc4 	movi	r8,2047
  80fee8:	003fb406 	br	80fdbc <__pack_d+0x50>
  80feec:	0005883a 	mov	r2,zero
  80fef0:	00c00234 	movhi	r3,8
  80fef4:	408cb03a 	or	r6,r8,r2
  80fef8:	48ceb03a 	or	r7,r9,r3
  80fefc:	013fffc4 	movi	r4,-1
  80ff00:	01400434 	movhi	r5,16
  80ff04:	297fffc4 	addi	r5,r5,-1
  80ff08:	3104703a 	and	r2,r6,r4
  80ff0c:	3946703a 	and	r3,r7,r5
  80ff10:	100d883a 	mov	r6,r2
  80ff14:	180f883a 	mov	r7,r3
  80ff18:	0201ffc4 	movi	r8,2047
  80ff1c:	003fa706 	br	80fdbc <__pack_d+0x50>
  80ff20:	1109c83a 	sub	r4,r2,r4
  80ff24:	00800e04 	movi	r2,56
  80ff28:	11004316 	blt	r2,r4,810038 <__pack_d+0x2cc>
  80ff2c:	21fff804 	addi	r7,r4,-32
  80ff30:	38004516 	blt	r7,zero,810048 <__pack_d+0x2dc>
  80ff34:	49d8d83a 	srl	r12,r9,r7
  80ff38:	001b883a 	mov	r13,zero
  80ff3c:	0023883a 	mov	r17,zero
  80ff40:	01400044 	movi	r5,1
  80ff44:	0025883a 	mov	r18,zero
  80ff48:	38004716 	blt	r7,zero,810068 <__pack_d+0x2fc>
  80ff4c:	29d6983a 	sll	r11,r5,r7
  80ff50:	0015883a 	mov	r10,zero
  80ff54:	00bfffc4 	movi	r2,-1
  80ff58:	5089883a 	add	r4,r10,r2
  80ff5c:	588b883a 	add	r5,r11,r2
  80ff60:	228d803a 	cmpltu	r6,r4,r10
  80ff64:	314b883a 	add	r5,r6,r5
  80ff68:	4104703a 	and	r2,r8,r4
  80ff6c:	4946703a 	and	r3,r9,r5
  80ff70:	10c4b03a 	or	r2,r2,r3
  80ff74:	10000226 	beq	r2,zero,80ff80 <__pack_d+0x214>
  80ff78:	04400044 	movi	r17,1
  80ff7c:	0025883a 	mov	r18,zero
  80ff80:	00803fc4 	movi	r2,255
  80ff84:	644eb03a 	or	r7,r12,r17
  80ff88:	3892703a 	and	r9,r7,r2
  80ff8c:	00802004 	movi	r2,128
  80ff90:	6c90b03a 	or	r8,r13,r18
  80ff94:	0015883a 	mov	r10,zero
  80ff98:	48801626 	beq	r9,r2,80fff4 <__pack_d+0x288>
  80ff9c:	01001fc4 	movi	r4,127
  80ffa0:	3905883a 	add	r2,r7,r4
  80ffa4:	11cd803a 	cmpltu	r6,r2,r7
  80ffa8:	320d883a 	add	r6,r6,r8
  80ffac:	100f883a 	mov	r7,r2
  80ffb0:	00840034 	movhi	r2,4096
  80ffb4:	10bfffc4 	addi	r2,r2,-1
  80ffb8:	3011883a 	mov	r8,r6
  80ffbc:	0007883a 	mov	r3,zero
  80ffc0:	11801b36 	bltu	r2,r6,810030 <__pack_d+0x2c4>
  80ffc4:	4004963a 	slli	r2,r8,24
  80ffc8:	3808d23a 	srli	r4,r7,8
  80ffcc:	400ad23a 	srli	r5,r8,8
  80ffd0:	1813883a 	mov	r9,r3
  80ffd4:	1108b03a 	or	r4,r2,r4
  80ffd8:	00bfffc4 	movi	r2,-1
  80ffdc:	00c00434 	movhi	r3,16
  80ffe0:	18ffffc4 	addi	r3,r3,-1
  80ffe4:	208c703a 	and	r6,r4,r2
  80ffe8:	28ce703a 	and	r7,r5,r3
  80ffec:	4a01ffcc 	andi	r8,r9,2047
  80fff0:	003f7206 	br	80fdbc <__pack_d+0x50>
  80fff4:	503fe91e 	bne	r10,zero,80ff9c <__pack_d+0x230>
  80fff8:	01004004 	movi	r4,256
  80fffc:	3904703a 	and	r2,r7,r4
  810000:	0007883a 	mov	r3,zero
  810004:	10c4b03a 	or	r2,r2,r3
  810008:	10000626 	beq	r2,zero,810024 <__pack_d+0x2b8>
  81000c:	3a45883a 	add	r2,r7,r9
  810010:	11cd803a 	cmpltu	r6,r2,r7
  810014:	320d883a 	add	r6,r6,r8
  810018:	100f883a 	mov	r7,r2
  81001c:	3011883a 	mov	r8,r6
  810020:	0007883a 	mov	r3,zero
  810024:	00840034 	movhi	r2,4096
  810028:	10bfffc4 	addi	r2,r2,-1
  81002c:	123fe52e 	bgeu	r2,r8,80ffc4 <__pack_d+0x258>
  810030:	00c00044 	movi	r3,1
  810034:	003fe306 	br	80ffc4 <__pack_d+0x258>
  810038:	0009883a 	mov	r4,zero
  81003c:	0013883a 	mov	r9,zero
  810040:	000b883a 	mov	r5,zero
  810044:	003fe406 	br	80ffd8 <__pack_d+0x26c>
  810048:	4a47883a 	add	r3,r9,r9
  81004c:	008007c4 	movi	r2,31
  810050:	1105c83a 	sub	r2,r2,r4
  810054:	1886983a 	sll	r3,r3,r2
  810058:	4118d83a 	srl	r12,r8,r4
  81005c:	491ad83a 	srl	r13,r9,r4
  810060:	1b18b03a 	or	r12,r3,r12
  810064:	003fb506 	br	80ff3c <__pack_d+0x1d0>
  810068:	2806d07a 	srli	r3,r5,1
  81006c:	008007c4 	movi	r2,31
  810070:	1105c83a 	sub	r2,r2,r4
  810074:	1896d83a 	srl	r11,r3,r2
  810078:	2914983a 	sll	r10,r5,r4
  81007c:	003fb506 	br	80ff54 <__pack_d+0x1e8>

00810080 <__unpack_d>:
  810080:	20c00117 	ldw	r3,4(r4)
  810084:	22400017 	ldw	r9,0(r4)
  810088:	00800434 	movhi	r2,16
  81008c:	10bfffc4 	addi	r2,r2,-1
  810090:	1808d53a 	srli	r4,r3,20
  810094:	180cd7fa 	srli	r6,r3,31
  810098:	1894703a 	and	r10,r3,r2
  81009c:	2201ffcc 	andi	r8,r4,2047
  8100a0:	281b883a 	mov	r13,r5
  8100a4:	4817883a 	mov	r11,r9
  8100a8:	29800115 	stw	r6,4(r5)
  8100ac:	5019883a 	mov	r12,r10
  8100b0:	40001e1e 	bne	r8,zero,81012c <__unpack_d+0xac>
  8100b4:	4a84b03a 	or	r2,r9,r10
  8100b8:	10001926 	beq	r2,zero,810120 <__unpack_d+0xa0>
  8100bc:	4804d63a 	srli	r2,r9,24
  8100c0:	500c923a 	slli	r6,r10,8
  8100c4:	013f0084 	movi	r4,-1022
  8100c8:	00c40034 	movhi	r3,4096
  8100cc:	18ffffc4 	addi	r3,r3,-1
  8100d0:	118cb03a 	or	r6,r2,r6
  8100d4:	008000c4 	movi	r2,3
  8100d8:	480a923a 	slli	r5,r9,8
  8100dc:	68800015 	stw	r2,0(r13)
  8100e0:	69000215 	stw	r4,8(r13)
  8100e4:	19800b36 	bltu	r3,r6,810114 <__unpack_d+0x94>
  8100e8:	200f883a 	mov	r7,r4
  8100ec:	1811883a 	mov	r8,r3
  8100f0:	2945883a 	add	r2,r5,r5
  8100f4:	1149803a 	cmpltu	r4,r2,r5
  8100f8:	3187883a 	add	r3,r6,r6
  8100fc:	20c9883a 	add	r4,r4,r3
  810100:	100b883a 	mov	r5,r2
  810104:	200d883a 	mov	r6,r4
  810108:	39ffffc4 	addi	r7,r7,-1
  81010c:	413ff82e 	bgeu	r8,r4,8100f0 <__unpack_d+0x70>
  810110:	69c00215 	stw	r7,8(r13)
  810114:	69800415 	stw	r6,16(r13)
  810118:	69400315 	stw	r5,12(r13)
  81011c:	f800283a 	ret
  810120:	00800084 	movi	r2,2
  810124:	28800015 	stw	r2,0(r5)
  810128:	f800283a 	ret
  81012c:	0081ffc4 	movi	r2,2047
  810130:	40800f26 	beq	r8,r2,810170 <__unpack_d+0xf0>
  810134:	480cd63a 	srli	r6,r9,24
  810138:	5006923a 	slli	r3,r10,8
  81013c:	4804923a 	slli	r2,r9,8
  810140:	0009883a 	mov	r4,zero
  810144:	30c6b03a 	or	r3,r6,r3
  810148:	01440034 	movhi	r5,4096
  81014c:	110cb03a 	or	r6,r2,r4
  810150:	423f0044 	addi	r8,r8,-1023
  810154:	194eb03a 	or	r7,r3,r5
  810158:	008000c4 	movi	r2,3
  81015c:	69c00415 	stw	r7,16(r13)
  810160:	6a000215 	stw	r8,8(r13)
  810164:	68800015 	stw	r2,0(r13)
  810168:	69800315 	stw	r6,12(r13)
  81016c:	f800283a 	ret
  810170:	4a84b03a 	or	r2,r9,r10
  810174:	1000031e 	bne	r2,zero,810184 <__unpack_d+0x104>
  810178:	00800104 	movi	r2,4
  81017c:	28800015 	stw	r2,0(r5)
  810180:	f800283a 	ret
  810184:	0009883a 	mov	r4,zero
  810188:	01400234 	movhi	r5,8
  81018c:	4904703a 	and	r2,r9,r4
  810190:	5146703a 	and	r3,r10,r5
  810194:	10c4b03a 	or	r2,r2,r3
  810198:	10000526 	beq	r2,zero,8101b0 <__unpack_d+0x130>
  81019c:	00800044 	movi	r2,1
  8101a0:	68800015 	stw	r2,0(r13)
  8101a4:	6b000415 	stw	r12,16(r13)
  8101a8:	6ac00315 	stw	r11,12(r13)
  8101ac:	f800283a 	ret
  8101b0:	68000015 	stw	zero,0(r13)
  8101b4:	003ffb06 	br	8101a4 <__unpack_d+0x124>

008101b8 <__fpcmp_parts_d>:
  8101b8:	21800017 	ldw	r6,0(r4)
  8101bc:	00c00044 	movi	r3,1
  8101c0:	19800a2e 	bgeu	r3,r6,8101ec <__fpcmp_parts_d+0x34>
  8101c4:	28800017 	ldw	r2,0(r5)
  8101c8:	1880082e 	bgeu	r3,r2,8101ec <__fpcmp_parts_d+0x34>
  8101cc:	00c00104 	movi	r3,4
  8101d0:	30c02626 	beq	r6,r3,81026c <__fpcmp_parts_d+0xb4>
  8101d4:	10c02226 	beq	r2,r3,810260 <__fpcmp_parts_d+0xa8>
  8101d8:	00c00084 	movi	r3,2
  8101dc:	30c00526 	beq	r6,r3,8101f4 <__fpcmp_parts_d+0x3c>
  8101e0:	10c0071e 	bne	r2,r3,810200 <__fpcmp_parts_d+0x48>
  8101e4:	20800117 	ldw	r2,4(r4)
  8101e8:	1000091e 	bne	r2,zero,810210 <__fpcmp_parts_d+0x58>
  8101ec:	00800044 	movi	r2,1
  8101f0:	f800283a 	ret
  8101f4:	10c01a1e 	bne	r2,r3,810260 <__fpcmp_parts_d+0xa8>
  8101f8:	0005883a 	mov	r2,zero
  8101fc:	f800283a 	ret
  810200:	22000117 	ldw	r8,4(r4)
  810204:	28800117 	ldw	r2,4(r5)
  810208:	40800326 	beq	r8,r2,810218 <__fpcmp_parts_d+0x60>
  81020c:	403ff726 	beq	r8,zero,8101ec <__fpcmp_parts_d+0x34>
  810210:	00bfffc4 	movi	r2,-1
  810214:	f800283a 	ret
  810218:	20c00217 	ldw	r3,8(r4)
  81021c:	28800217 	ldw	r2,8(r5)
  810220:	10fffa16 	blt	r2,r3,81020c <__fpcmp_parts_d+0x54>
  810224:	18800916 	blt	r3,r2,81024c <__fpcmp_parts_d+0x94>
  810228:	21c00417 	ldw	r7,16(r4)
  81022c:	28c00417 	ldw	r3,16(r5)
  810230:	21800317 	ldw	r6,12(r4)
  810234:	28800317 	ldw	r2,12(r5)
  810238:	19fff436 	bltu	r3,r7,81020c <__fpcmp_parts_d+0x54>
  81023c:	38c00526 	beq	r7,r3,810254 <__fpcmp_parts_d+0x9c>
  810240:	38c00236 	bltu	r7,r3,81024c <__fpcmp_parts_d+0x94>
  810244:	19ffec1e 	bne	r3,r7,8101f8 <__fpcmp_parts_d+0x40>
  810248:	30bfeb2e 	bgeu	r6,r2,8101f8 <__fpcmp_parts_d+0x40>
  81024c:	403fe71e 	bne	r8,zero,8101ec <__fpcmp_parts_d+0x34>
  810250:	003fef06 	br	810210 <__fpcmp_parts_d+0x58>
  810254:	11bffa2e 	bgeu	r2,r6,810240 <__fpcmp_parts_d+0x88>
  810258:	403fe426 	beq	r8,zero,8101ec <__fpcmp_parts_d+0x34>
  81025c:	003fec06 	br	810210 <__fpcmp_parts_d+0x58>
  810260:	28800117 	ldw	r2,4(r5)
  810264:	103fe11e 	bne	r2,zero,8101ec <__fpcmp_parts_d+0x34>
  810268:	003fe906 	br	810210 <__fpcmp_parts_d+0x58>
  81026c:	11bfdd1e 	bne	r2,r6,8101e4 <__fpcmp_parts_d+0x2c>
  810270:	28c00117 	ldw	r3,4(r5)
  810274:	20800117 	ldw	r2,4(r4)
  810278:	1885c83a 	sub	r2,r3,r2
  81027c:	f800283a 	ret

00810280 <__pack_f>:
  810280:	20c00017 	ldw	r3,0(r4)
  810284:	01c00044 	movi	r7,1
  810288:	21800317 	ldw	r6,12(r4)
  81028c:	21400117 	ldw	r5,4(r4)
  810290:	38c02d2e 	bgeu	r7,r3,810348 <__pack_f+0xc8>
  810294:	00800104 	movi	r2,4
  810298:	18802826 	beq	r3,r2,81033c <__pack_f+0xbc>
  81029c:	00800084 	movi	r2,2
  8102a0:	18800126 	beq	r3,r2,8102a8 <__pack_f+0x28>
  8102a4:	3000101e 	bne	r6,zero,8102e8 <__pack_f+0x68>
  8102a8:	000d883a 	mov	r6,zero
  8102ac:	0007883a 	mov	r3,zero
  8102b0:	19003fcc 	andi	r4,r3,255
  8102b4:	200895fa 	slli	r4,r4,23
  8102b8:	00c02034 	movhi	r3,128
  8102bc:	18ffffc4 	addi	r3,r3,-1
  8102c0:	30c6703a 	and	r3,r6,r3
  8102c4:	10a0002c 	andhi	r2,r2,32768
  8102c8:	10c4b03a 	or	r2,r2,r3
  8102cc:	280a97fa 	slli	r5,r5,31
  8102d0:	1104b03a 	or	r2,r2,r4
  8102d4:	00e00034 	movhi	r3,32768
  8102d8:	18ffffc4 	addi	r3,r3,-1
  8102dc:	10c4703a 	and	r2,r2,r3
  8102e0:	1144b03a 	or	r2,r2,r5
  8102e4:	f800283a 	ret
  8102e8:	21000217 	ldw	r4,8(r4)
  8102ec:	00bfe084 	movi	r2,-126
  8102f0:	20801b16 	blt	r4,r2,810360 <__pack_f+0xe0>
  8102f4:	00801fc4 	movi	r2,127
  8102f8:	11001016 	blt	r2,r4,81033c <__pack_f+0xbc>
  8102fc:	308e703a 	and	r7,r6,r2
  810300:	2087883a 	add	r3,r4,r2
  810304:	00801004 	movi	r2,64
  810308:	38800526 	beq	r7,r2,810320 <__pack_f+0xa0>
  81030c:	31800fc4 	addi	r6,r6,63
  810310:	30000716 	blt	r6,zero,810330 <__pack_f+0xb0>
  810314:	300490ba 	slli	r2,r6,2
  810318:	100cd27a 	srli	r6,r2,9
  81031c:	003fe406 	br	8102b0 <__pack_f+0x30>
  810320:	3080200c 	andi	r2,r6,128
  810324:	103ffa26 	beq	r2,zero,810310 <__pack_f+0x90>
  810328:	31cd883a 	add	r6,r6,r7
  81032c:	003ff806 	br	810310 <__pack_f+0x90>
  810330:	300cd07a 	srli	r6,r6,1
  810334:	18c00044 	addi	r3,r3,1
  810338:	003ff606 	br	810314 <__pack_f+0x94>
  81033c:	000d883a 	mov	r6,zero
  810340:	00ffffc4 	movi	r3,-1
  810344:	003fda06 	br	8102b0 <__pack_f+0x30>
  810348:	31800434 	orhi	r6,r6,16
  81034c:	00802034 	movhi	r2,128
  810350:	10bfffc4 	addi	r2,r2,-1
  810354:	308c703a 	and	r6,r6,r2
  810358:	00ffffc4 	movi	r3,-1
  81035c:	003fd406 	br	8102b0 <__pack_f+0x30>
  810360:	1109c83a 	sub	r4,r2,r4
  810364:	00800644 	movi	r2,25
  810368:	11001216 	blt	r2,r4,8103b4 <__pack_f+0x134>
  81036c:	3904983a 	sll	r2,r7,r4
  810370:	3106d83a 	srl	r3,r6,r4
  810374:	10bfffc4 	addi	r2,r2,-1
  810378:	3084703a 	and	r2,r6,r2
  81037c:	1004c03a 	cmpne	r2,r2,zero
  810380:	1886b03a 	or	r3,r3,r2
  810384:	19001fcc 	andi	r4,r3,127
  810388:	00801004 	movi	r2,64
  81038c:	20800c26 	beq	r4,r2,8103c0 <__pack_f+0x140>
  810390:	18c00fc4 	addi	r3,r3,63
  810394:	00900034 	movhi	r2,16384
  810398:	10bfffc4 	addi	r2,r2,-1
  81039c:	180cd1fa 	srli	r6,r3,7
  8103a0:	10c7803a 	cmpltu	r3,r2,r3
  8103a4:	00802034 	movhi	r2,128
  8103a8:	10bfffc4 	addi	r2,r2,-1
  8103ac:	308c703a 	and	r6,r6,r2
  8103b0:	003fbf06 	br	8102b0 <__pack_f+0x30>
  8103b4:	0007883a 	mov	r3,zero
  8103b8:	000d883a 	mov	r6,zero
  8103bc:	003ff906 	br	8103a4 <__pack_f+0x124>
  8103c0:	1880200c 	andi	r2,r3,128
  8103c4:	10000126 	beq	r2,zero,8103cc <__pack_f+0x14c>
  8103c8:	1907883a 	add	r3,r3,r4
  8103cc:	180cd1fa 	srli	r6,r3,7
  8103d0:	00900034 	movhi	r2,16384
  8103d4:	10bfffc4 	addi	r2,r2,-1
  8103d8:	10c7803a 	cmpltu	r3,r2,r3
  8103dc:	003ff106 	br	8103a4 <__pack_f+0x124>

008103e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8103e0:	defff404 	addi	sp,sp,-48
  8103e4:	df000b15 	stw	fp,44(sp)
  8103e8:	df000b04 	addi	fp,sp,44
  8103ec:	e13ffb15 	stw	r4,-20(fp)
  8103f0:	e17ffc15 	stw	r5,-16(fp)
  8103f4:	e1bffd15 	stw	r6,-12(fp)
  8103f8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8103fc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810400:	008020b4 	movhi	r2,130
  810404:	10a2f804 	addi	r2,r2,-29728
  810408:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81040c:	1005003a 	cmpeq	r2,r2,zero
  810410:	1000411e 	bne	r2,zero,810518 <alt_alarm_start+0x138>
  {
    if (alarm)
  810414:	e0bffb17 	ldw	r2,-20(fp)
  810418:	1005003a 	cmpeq	r2,r2,zero
  81041c:	10003b1e 	bne	r2,zero,81050c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810420:	e0fffb17 	ldw	r3,-20(fp)
  810424:	e0bffd17 	ldw	r2,-12(fp)
  810428:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81042c:	e0fffb17 	ldw	r3,-20(fp)
  810430:	e0bffe17 	ldw	r2,-8(fp)
  810434:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810438:	0005303a 	rdctl	r2,status
  81043c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810440:	e0fff817 	ldw	r3,-32(fp)
  810444:	00bfff84 	movi	r2,-2
  810448:	1884703a 	and	r2,r3,r2
  81044c:	1001703a 	wrctl	status,r2
  
  return context;
  810450:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810454:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810458:	008020b4 	movhi	r2,130
  81045c:	10a2f904 	addi	r2,r2,-29724
  810460:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810464:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810468:	e0fffc17 	ldw	r3,-16(fp)
  81046c:	e0bff917 	ldw	r2,-28(fp)
  810470:	1885883a 	add	r2,r3,r2
  810474:	10c00044 	addi	r3,r2,1
  810478:	e0bffb17 	ldw	r2,-20(fp)
  81047c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810480:	e0bffb17 	ldw	r2,-20(fp)
  810484:	10c00217 	ldw	r3,8(r2)
  810488:	e0bff917 	ldw	r2,-28(fp)
  81048c:	1880042e 	bgeu	r3,r2,8104a0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810490:	e0fffb17 	ldw	r3,-20(fp)
  810494:	00800044 	movi	r2,1
  810498:	18800405 	stb	r2,16(r3)
  81049c:	00000206 	br	8104a8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8104a0:	e0bffb17 	ldw	r2,-20(fp)
  8104a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8104a8:	e0fffb17 	ldw	r3,-20(fp)
  8104ac:	00802074 	movhi	r2,129
  8104b0:	109ba604 	addi	r2,r2,28312
  8104b4:	e0bff615 	stw	r2,-40(fp)
  8104b8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8104bc:	e0fff717 	ldw	r3,-36(fp)
  8104c0:	e0bff617 	ldw	r2,-40(fp)
  8104c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8104c8:	e0bff617 	ldw	r2,-40(fp)
  8104cc:	10c00017 	ldw	r3,0(r2)
  8104d0:	e0bff717 	ldw	r2,-36(fp)
  8104d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8104d8:	e0bff617 	ldw	r2,-40(fp)
  8104dc:	10c00017 	ldw	r3,0(r2)
  8104e0:	e0bff717 	ldw	r2,-36(fp)
  8104e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8104e8:	e0fff617 	ldw	r3,-40(fp)
  8104ec:	e0bff717 	ldw	r2,-36(fp)
  8104f0:	18800015 	stw	r2,0(r3)
  8104f4:	e0bffa17 	ldw	r2,-24(fp)
  8104f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8104fc:	e0bff517 	ldw	r2,-44(fp)
  810500:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810504:	e03fff15 	stw	zero,-4(fp)
  810508:	00000506 	br	810520 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81050c:	00bffa84 	movi	r2,-22
  810510:	e0bfff15 	stw	r2,-4(fp)
  810514:	00000206 	br	810520 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810518:	00bfde84 	movi	r2,-134
  81051c:	e0bfff15 	stw	r2,-4(fp)
  810520:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  810524:	e037883a 	mov	sp,fp
  810528:	df000017 	ldw	fp,0(sp)
  81052c:	dec00104 	addi	sp,sp,4
  810530:	f800283a 	ret

00810534 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810534:	defff804 	addi	sp,sp,-32
  810538:	dfc00715 	stw	ra,28(sp)
  81053c:	df000615 	stw	fp,24(sp)
  810540:	df000604 	addi	fp,sp,24
  810544:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810548:	e0bffc17 	ldw	r2,-16(fp)
  81054c:	1004803a 	cmplt	r2,r2,zero
  810550:	1000081e 	bne	r2,zero,810574 <close+0x40>
  810554:	e0bffc17 	ldw	r2,-16(fp)
  810558:	10800324 	muli	r2,r2,12
  81055c:	1007883a 	mov	r3,r2
  810560:	00802074 	movhi	r2,129
  810564:	1096a204 	addi	r2,r2,23176
  810568:	1887883a 	add	r3,r3,r2
  81056c:	e0ffff15 	stw	r3,-4(fp)
  810570:	00000106 	br	810578 <close+0x44>
  810574:	e03fff15 	stw	zero,-4(fp)
  810578:	e0bfff17 	ldw	r2,-4(fp)
  81057c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  810580:	e0bffb17 	ldw	r2,-20(fp)
  810584:	1005003a 	cmpeq	r2,r2,zero
  810588:	10001d1e 	bne	r2,zero,810600 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81058c:	e0bffb17 	ldw	r2,-20(fp)
  810590:	10800017 	ldw	r2,0(r2)
  810594:	10800417 	ldw	r2,16(r2)
  810598:	1005003a 	cmpeq	r2,r2,zero
  81059c:	1000071e 	bne	r2,zero,8105bc <close+0x88>
  8105a0:	e0bffb17 	ldw	r2,-20(fp)
  8105a4:	10800017 	ldw	r2,0(r2)
  8105a8:	10800417 	ldw	r2,16(r2)
  8105ac:	e13ffb17 	ldw	r4,-20(fp)
  8105b0:	103ee83a 	callr	r2
  8105b4:	e0bffe15 	stw	r2,-8(fp)
  8105b8:	00000106 	br	8105c0 <close+0x8c>
  8105bc:	e03ffe15 	stw	zero,-8(fp)
  8105c0:	e0bffe17 	ldw	r2,-8(fp)
  8105c4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8105c8:	e13ffc17 	ldw	r4,-16(fp)
  8105cc:	08111fc0 	call	8111fc <alt_release_fd>
    if (rval < 0)
  8105d0:	e0bffa17 	ldw	r2,-24(fp)
  8105d4:	1004403a 	cmpge	r2,r2,zero
  8105d8:	1000071e 	bne	r2,zero,8105f8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8105dc:	08106300 	call	810630 <alt_get_errno>
  8105e0:	e0fffa17 	ldw	r3,-24(fp)
  8105e4:	00c7c83a 	sub	r3,zero,r3
  8105e8:	10c00015 	stw	r3,0(r2)
      return -1;
  8105ec:	00bfffc4 	movi	r2,-1
  8105f0:	e0bffd15 	stw	r2,-12(fp)
  8105f4:	00000806 	br	810618 <close+0xe4>
    }
    return 0;
  8105f8:	e03ffd15 	stw	zero,-12(fp)
  8105fc:	00000606 	br	810618 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810600:	08106300 	call	810630 <alt_get_errno>
  810604:	1007883a 	mov	r3,r2
  810608:	00801444 	movi	r2,81
  81060c:	18800015 	stw	r2,0(r3)
    return -1;
  810610:	00bfffc4 	movi	r2,-1
  810614:	e0bffd15 	stw	r2,-12(fp)
  810618:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  81061c:	e037883a 	mov	sp,fp
  810620:	dfc00117 	ldw	ra,4(sp)
  810624:	df000017 	ldw	fp,0(sp)
  810628:	dec00204 	addi	sp,sp,8
  81062c:	f800283a 	ret

00810630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810630:	defffd04 	addi	sp,sp,-12
  810634:	dfc00215 	stw	ra,8(sp)
  810638:	df000115 	stw	fp,4(sp)
  81063c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810640:	00802074 	movhi	r2,129
  810644:	109ba304 	addi	r2,r2,28300
  810648:	10800017 	ldw	r2,0(r2)
  81064c:	1005003a 	cmpeq	r2,r2,zero
  810650:	1000061e 	bne	r2,zero,81066c <alt_get_errno+0x3c>
  810654:	00802074 	movhi	r2,129
  810658:	109ba304 	addi	r2,r2,28300
  81065c:	10800017 	ldw	r2,0(r2)
  810660:	103ee83a 	callr	r2
  810664:	e0bfff15 	stw	r2,-4(fp)
  810668:	00000306 	br	810678 <alt_get_errno+0x48>
  81066c:	008020b4 	movhi	r2,130
  810670:	10a2ed04 	addi	r2,r2,-29772
  810674:	e0bfff15 	stw	r2,-4(fp)
  810678:	e0bfff17 	ldw	r2,-4(fp)
}
  81067c:	e037883a 	mov	sp,fp
  810680:	dfc00117 	ldw	ra,4(sp)
  810684:	df000017 	ldw	fp,0(sp)
  810688:	dec00204 	addi	sp,sp,8
  81068c:	f800283a 	ret

00810690 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810690:	defffc04 	addi	sp,sp,-16
  810694:	df000315 	stw	fp,12(sp)
  810698:	df000304 	addi	fp,sp,12
  81069c:	e13ffd15 	stw	r4,-12(fp)
  8106a0:	e17ffe15 	stw	r5,-8(fp)
  8106a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8106a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8106ac:	e037883a 	mov	sp,fp
  8106b0:	df000017 	ldw	fp,0(sp)
  8106b4:	dec00104 	addi	sp,sp,4
  8106b8:	f800283a 	ret

008106bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8106bc:	defff904 	addi	sp,sp,-28
  8106c0:	dfc00615 	stw	ra,24(sp)
  8106c4:	df000515 	stw	fp,20(sp)
  8106c8:	df000504 	addi	fp,sp,20
  8106cc:	e13ffc15 	stw	r4,-16(fp)
  8106d0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8106d4:	e0bffc17 	ldw	r2,-16(fp)
  8106d8:	1004803a 	cmplt	r2,r2,zero
  8106dc:	1000081e 	bne	r2,zero,810700 <fstat+0x44>
  8106e0:	e0bffc17 	ldw	r2,-16(fp)
  8106e4:	10800324 	muli	r2,r2,12
  8106e8:	1007883a 	mov	r3,r2
  8106ec:	00802074 	movhi	r2,129
  8106f0:	1096a204 	addi	r2,r2,23176
  8106f4:	1887883a 	add	r3,r3,r2
  8106f8:	e0ffff15 	stw	r3,-4(fp)
  8106fc:	00000106 	br	810704 <fstat+0x48>
  810700:	e03fff15 	stw	zero,-4(fp)
  810704:	e0bfff17 	ldw	r2,-4(fp)
  810708:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81070c:	e0bffb17 	ldw	r2,-20(fp)
  810710:	1005003a 	cmpeq	r2,r2,zero
  810714:	1000121e 	bne	r2,zero,810760 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810718:	e0bffb17 	ldw	r2,-20(fp)
  81071c:	10800017 	ldw	r2,0(r2)
  810720:	10800817 	ldw	r2,32(r2)
  810724:	1005003a 	cmpeq	r2,r2,zero
  810728:	1000081e 	bne	r2,zero,81074c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  81072c:	e0bffb17 	ldw	r2,-20(fp)
  810730:	10800017 	ldw	r2,0(r2)
  810734:	10800817 	ldw	r2,32(r2)
  810738:	e13ffb17 	ldw	r4,-20(fp)
  81073c:	e17ffd17 	ldw	r5,-12(fp)
  810740:	103ee83a 	callr	r2
  810744:	e0bffe15 	stw	r2,-8(fp)
  810748:	00000b06 	br	810778 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81074c:	e0fffd17 	ldw	r3,-12(fp)
  810750:	00880004 	movi	r2,8192
  810754:	18800115 	stw	r2,4(r3)
      return 0;
  810758:	e03ffe15 	stw	zero,-8(fp)
  81075c:	00000606 	br	810778 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810760:	08107900 	call	810790 <alt_get_errno>
  810764:	1007883a 	mov	r3,r2
  810768:	00801444 	movi	r2,81
  81076c:	18800015 	stw	r2,0(r3)
    return -1;
  810770:	00bfffc4 	movi	r2,-1
  810774:	e0bffe15 	stw	r2,-8(fp)
  810778:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81077c:	e037883a 	mov	sp,fp
  810780:	dfc00117 	ldw	ra,4(sp)
  810784:	df000017 	ldw	fp,0(sp)
  810788:	dec00204 	addi	sp,sp,8
  81078c:	f800283a 	ret

00810790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810790:	defffd04 	addi	sp,sp,-12
  810794:	dfc00215 	stw	ra,8(sp)
  810798:	df000115 	stw	fp,4(sp)
  81079c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8107a0:	00802074 	movhi	r2,129
  8107a4:	109ba304 	addi	r2,r2,28300
  8107a8:	10800017 	ldw	r2,0(r2)
  8107ac:	1005003a 	cmpeq	r2,r2,zero
  8107b0:	1000061e 	bne	r2,zero,8107cc <alt_get_errno+0x3c>
  8107b4:	00802074 	movhi	r2,129
  8107b8:	109ba304 	addi	r2,r2,28300
  8107bc:	10800017 	ldw	r2,0(r2)
  8107c0:	103ee83a 	callr	r2
  8107c4:	e0bfff15 	stw	r2,-4(fp)
  8107c8:	00000306 	br	8107d8 <alt_get_errno+0x48>
  8107cc:	008020b4 	movhi	r2,130
  8107d0:	10a2ed04 	addi	r2,r2,-29772
  8107d4:	e0bfff15 	stw	r2,-4(fp)
  8107d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8107dc:	e037883a 	mov	sp,fp
  8107e0:	dfc00117 	ldw	ra,4(sp)
  8107e4:	df000017 	ldw	fp,0(sp)
  8107e8:	dec00204 	addi	sp,sp,8
  8107ec:	f800283a 	ret

008107f0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8107f0:	deffef04 	addi	sp,sp,-68
  8107f4:	df001015 	stw	fp,64(sp)
  8107f8:	df001004 	addi	fp,sp,64
  8107fc:	e13ffc15 	stw	r4,-16(fp)
  810800:	e17ffd15 	stw	r5,-12(fp)
  810804:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  810808:	00bffa84 	movi	r2,-22
  81080c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810810:	e0bffc17 	ldw	r2,-16(fp)
  810814:	10800828 	cmpgeui	r2,r2,32
  810818:	1000601e 	bne	r2,zero,81099c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81081c:	0005303a 	rdctl	r2,status
  810820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810824:	e0fff917 	ldw	r3,-28(fp)
  810828:	00bfff84 	movi	r2,-2
  81082c:	1884703a 	and	r2,r3,r2
  810830:	1001703a 	wrctl	status,r2
  
  return context;
  810834:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810838:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81083c:	e0bffc17 	ldw	r2,-16(fp)
  810840:	00c020b4 	movhi	r3,130
  810844:	18e35004 	addi	r3,r3,-29376
  810848:	100490fa 	slli	r2,r2,3
  81084c:	10c7883a 	add	r3,r2,r3
  810850:	e0bffe17 	ldw	r2,-8(fp)
  810854:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  810858:	e0bffc17 	ldw	r2,-16(fp)
  81085c:	00c020b4 	movhi	r3,130
  810860:	18e35004 	addi	r3,r3,-29376
  810864:	100490fa 	slli	r2,r2,3
  810868:	10c5883a 	add	r2,r2,r3
  81086c:	10c00104 	addi	r3,r2,4
  810870:	e0bffd17 	ldw	r2,-12(fp)
  810874:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810878:	e0bffe17 	ldw	r2,-8(fp)
  81087c:	1005003a 	cmpeq	r2,r2,zero
  810880:	1000201e 	bne	r2,zero,810904 <alt_irq_register+0x114>
  810884:	e0bffc17 	ldw	r2,-16(fp)
  810888:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81088c:	0005303a 	rdctl	r2,status
  810890:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810894:	e0fff617 	ldw	r3,-40(fp)
  810898:	00bfff84 	movi	r2,-2
  81089c:	1884703a 	and	r2,r3,r2
  8108a0:	1001703a 	wrctl	status,r2
  
  return context;
  8108a4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8108a8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8108ac:	e0fff717 	ldw	r3,-36(fp)
  8108b0:	00800044 	movi	r2,1
  8108b4:	10c4983a 	sll	r2,r2,r3
  8108b8:	1007883a 	mov	r3,r2
  8108bc:	008020b4 	movhi	r2,130
  8108c0:	10a2f404 	addi	r2,r2,-29744
  8108c4:	10800017 	ldw	r2,0(r2)
  8108c8:	1886b03a 	or	r3,r3,r2
  8108cc:	008020b4 	movhi	r2,130
  8108d0:	10a2f404 	addi	r2,r2,-29744
  8108d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8108d8:	008020b4 	movhi	r2,130
  8108dc:	10a2f404 	addi	r2,r2,-29744
  8108e0:	10800017 	ldw	r2,0(r2)
  8108e4:	100170fa 	wrctl	ienable,r2
  8108e8:	e0bff817 	ldw	r2,-32(fp)
  8108ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108f0:	e0bff517 	ldw	r2,-44(fp)
  8108f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8108f8:	0005883a 	mov	r2,zero
  8108fc:	e0bfff15 	stw	r2,-4(fp)
  810900:	00002006 	br	810984 <alt_irq_register+0x194>
  810904:	e0bffc17 	ldw	r2,-16(fp)
  810908:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81090c:	0005303a 	rdctl	r2,status
  810910:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810914:	e0fff217 	ldw	r3,-56(fp)
  810918:	00bfff84 	movi	r2,-2
  81091c:	1884703a 	and	r2,r3,r2
  810920:	1001703a 	wrctl	status,r2
  
  return context;
  810924:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810928:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81092c:	e0fff317 	ldw	r3,-52(fp)
  810930:	00800044 	movi	r2,1
  810934:	10c4983a 	sll	r2,r2,r3
  810938:	0084303a 	nor	r2,zero,r2
  81093c:	1007883a 	mov	r3,r2
  810940:	008020b4 	movhi	r2,130
  810944:	10a2f404 	addi	r2,r2,-29744
  810948:	10800017 	ldw	r2,0(r2)
  81094c:	1886703a 	and	r3,r3,r2
  810950:	008020b4 	movhi	r2,130
  810954:	10a2f404 	addi	r2,r2,-29744
  810958:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81095c:	008020b4 	movhi	r2,130
  810960:	10a2f404 	addi	r2,r2,-29744
  810964:	10800017 	ldw	r2,0(r2)
  810968:	100170fa 	wrctl	ienable,r2
  81096c:	e0bff417 	ldw	r2,-48(fp)
  810970:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810974:	e0bff117 	ldw	r2,-60(fp)
  810978:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81097c:	0005883a 	mov	r2,zero
  810980:	e0bfff15 	stw	r2,-4(fp)
  810984:	e0bfff17 	ldw	r2,-4(fp)
  810988:	e0bffb15 	stw	r2,-20(fp)
  81098c:	e0bffa17 	ldw	r2,-24(fp)
  810990:	e0bff015 	stw	r2,-64(fp)
  810994:	e0bff017 	ldw	r2,-64(fp)
  810998:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81099c:	e0bffb17 	ldw	r2,-20(fp)
}
  8109a0:	e037883a 	mov	sp,fp
  8109a4:	df000017 	ldw	fp,0(sp)
  8109a8:	dec00104 	addi	sp,sp,4
  8109ac:	f800283a 	ret

008109b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8109b0:	deffeb04 	addi	sp,sp,-84
  8109b4:	dfc01415 	stw	ra,80(sp)
  8109b8:	df001315 	stw	fp,76(sp)
  8109bc:	df001304 	addi	fp,sp,76
  8109c0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8109c4:	e0bffd17 	ldw	r2,-12(fp)
  8109c8:	1004803a 	cmplt	r2,r2,zero
  8109cc:	1000081e 	bne	r2,zero,8109f0 <isatty+0x40>
  8109d0:	e0bffd17 	ldw	r2,-12(fp)
  8109d4:	10800324 	muli	r2,r2,12
  8109d8:	1007883a 	mov	r3,r2
  8109dc:	00802074 	movhi	r2,129
  8109e0:	1096a204 	addi	r2,r2,23176
  8109e4:	1887883a 	add	r3,r3,r2
  8109e8:	e0ffff15 	stw	r3,-4(fp)
  8109ec:	00000106 	br	8109f4 <isatty+0x44>
  8109f0:	e03fff15 	stw	zero,-4(fp)
  8109f4:	e0bfff17 	ldw	r2,-4(fp)
  8109f8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8109fc:	e0bfed17 	ldw	r2,-76(fp)
  810a00:	1005003a 	cmpeq	r2,r2,zero
  810a04:	10000f1e 	bne	r2,zero,810a44 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810a08:	e0bfed17 	ldw	r2,-76(fp)
  810a0c:	10800017 	ldw	r2,0(r2)
  810a10:	10800817 	ldw	r2,32(r2)
  810a14:	1004c03a 	cmpne	r2,r2,zero
  810a18:	1000031e 	bne	r2,zero,810a28 <isatty+0x78>
    {
      return 1;
  810a1c:	00800044 	movi	r2,1
  810a20:	e0bffe15 	stw	r2,-8(fp)
  810a24:	00000c06 	br	810a58 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810a28:	e17fee04 	addi	r5,fp,-72
  810a2c:	e13ffd17 	ldw	r4,-12(fp)
  810a30:	08106bc0 	call	8106bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810a34:	e0bfef17 	ldw	r2,-68(fp)
  810a38:	10880020 	cmpeqi	r2,r2,8192
  810a3c:	e0bffe15 	stw	r2,-8(fp)
  810a40:	00000506 	br	810a58 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810a44:	0810a700 	call	810a70 <alt_get_errno>
  810a48:	1007883a 	mov	r3,r2
  810a4c:	00801444 	movi	r2,81
  810a50:	18800015 	stw	r2,0(r3)
    return 0;
  810a54:	e03ffe15 	stw	zero,-8(fp)
  810a58:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810a5c:	e037883a 	mov	sp,fp
  810a60:	dfc00117 	ldw	ra,4(sp)
  810a64:	df000017 	ldw	fp,0(sp)
  810a68:	dec00204 	addi	sp,sp,8
  810a6c:	f800283a 	ret

00810a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a70:	defffd04 	addi	sp,sp,-12
  810a74:	dfc00215 	stw	ra,8(sp)
  810a78:	df000115 	stw	fp,4(sp)
  810a7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810a80:	00802074 	movhi	r2,129
  810a84:	109ba304 	addi	r2,r2,28300
  810a88:	10800017 	ldw	r2,0(r2)
  810a8c:	1005003a 	cmpeq	r2,r2,zero
  810a90:	1000061e 	bne	r2,zero,810aac <alt_get_errno+0x3c>
  810a94:	00802074 	movhi	r2,129
  810a98:	109ba304 	addi	r2,r2,28300
  810a9c:	10800017 	ldw	r2,0(r2)
  810aa0:	103ee83a 	callr	r2
  810aa4:	e0bfff15 	stw	r2,-4(fp)
  810aa8:	00000306 	br	810ab8 <alt_get_errno+0x48>
  810aac:	008020b4 	movhi	r2,130
  810ab0:	10a2ed04 	addi	r2,r2,-29772
  810ab4:	e0bfff15 	stw	r2,-4(fp)
  810ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  810abc:	e037883a 	mov	sp,fp
  810ac0:	dfc00117 	ldw	ra,4(sp)
  810ac4:	df000017 	ldw	fp,0(sp)
  810ac8:	dec00204 	addi	sp,sp,8
  810acc:	f800283a 	ret

00810ad0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810ad0:	defffe04 	addi	sp,sp,-8
  810ad4:	dfc00115 	stw	ra,4(sp)
  810ad8:	df000015 	stw	fp,0(sp)
  810adc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810ae0:	01002074 	movhi	r4,129
  810ae4:	211ba904 	addi	r4,r4,28324
  810ae8:	01402074 	movhi	r5,129
  810aec:	29547204 	addi	r5,r5,20936
  810af0:	01802074 	movhi	r6,129
  810af4:	319ba904 	addi	r6,r6,28324
  810af8:	0810b500 	call	810b50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810afc:	01002034 	movhi	r4,128
  810b00:	21000804 	addi	r4,r4,32
  810b04:	01402034 	movhi	r5,128
  810b08:	29400804 	addi	r5,r5,32
  810b0c:	01802034 	movhi	r6,128
  810b10:	31806d04 	addi	r6,r6,436
  810b14:	0810b500 	call	810b50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810b18:	01002074 	movhi	r4,129
  810b1c:	2112b504 	addi	r4,r4,19156
  810b20:	01402074 	movhi	r5,129
  810b24:	2952b504 	addi	r5,r5,19156
  810b28:	01802074 	movhi	r6,129
  810b2c:	31947204 	addi	r6,r6,20936
  810b30:	0810b500 	call	810b50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810b34:	0813bd80 	call	813bd8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810b38:	08140640 	call	814064 <alt_icache_flush_all>
}
  810b3c:	e037883a 	mov	sp,fp
  810b40:	dfc00117 	ldw	ra,4(sp)
  810b44:	df000017 	ldw	fp,0(sp)
  810b48:	dec00204 	addi	sp,sp,8
  810b4c:	f800283a 	ret

00810b50 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810b50:	defffc04 	addi	sp,sp,-16
  810b54:	df000315 	stw	fp,12(sp)
  810b58:	df000304 	addi	fp,sp,12
  810b5c:	e13ffd15 	stw	r4,-12(fp)
  810b60:	e17ffe15 	stw	r5,-8(fp)
  810b64:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810b68:	e0fffe17 	ldw	r3,-8(fp)
  810b6c:	e0bffd17 	ldw	r2,-12(fp)
  810b70:	18800e26 	beq	r3,r2,810bac <alt_load_section+0x5c>
  {
    while( to != end )
  810b74:	00000a06 	br	810ba0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810b78:	e0bffd17 	ldw	r2,-12(fp)
  810b7c:	10c00017 	ldw	r3,0(r2)
  810b80:	e0bffe17 	ldw	r2,-8(fp)
  810b84:	10c00015 	stw	r3,0(r2)
  810b88:	e0bffe17 	ldw	r2,-8(fp)
  810b8c:	10800104 	addi	r2,r2,4
  810b90:	e0bffe15 	stw	r2,-8(fp)
  810b94:	e0bffd17 	ldw	r2,-12(fp)
  810b98:	10800104 	addi	r2,r2,4
  810b9c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810ba0:	e0fffe17 	ldw	r3,-8(fp)
  810ba4:	e0bfff17 	ldw	r2,-4(fp)
  810ba8:	18bff31e 	bne	r3,r2,810b78 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810bac:	e037883a 	mov	sp,fp
  810bb0:	df000017 	ldw	fp,0(sp)
  810bb4:	dec00104 	addi	sp,sp,4
  810bb8:	f800283a 	ret

00810bbc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810bbc:	defff804 	addi	sp,sp,-32
  810bc0:	dfc00715 	stw	ra,28(sp)
  810bc4:	df000615 	stw	fp,24(sp)
  810bc8:	df000604 	addi	fp,sp,24
  810bcc:	e13ffc15 	stw	r4,-16(fp)
  810bd0:	e17ffd15 	stw	r5,-12(fp)
  810bd4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810bd8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810bdc:	e0bffc17 	ldw	r2,-16(fp)
  810be0:	1004803a 	cmplt	r2,r2,zero
  810be4:	1000081e 	bne	r2,zero,810c08 <lseek+0x4c>
  810be8:	e0bffc17 	ldw	r2,-16(fp)
  810bec:	10800324 	muli	r2,r2,12
  810bf0:	1007883a 	mov	r3,r2
  810bf4:	00802074 	movhi	r2,129
  810bf8:	1096a204 	addi	r2,r2,23176
  810bfc:	1887883a 	add	r3,r3,r2
  810c00:	e0ffff15 	stw	r3,-4(fp)
  810c04:	00000106 	br	810c0c <lseek+0x50>
  810c08:	e03fff15 	stw	zero,-4(fp)
  810c0c:	e0bfff17 	ldw	r2,-4(fp)
  810c10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810c14:	e0bffb17 	ldw	r2,-20(fp)
  810c18:	1005003a 	cmpeq	r2,r2,zero
  810c1c:	1000111e 	bne	r2,zero,810c64 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810c20:	e0bffb17 	ldw	r2,-20(fp)
  810c24:	10800017 	ldw	r2,0(r2)
  810c28:	10800717 	ldw	r2,28(r2)
  810c2c:	1005003a 	cmpeq	r2,r2,zero
  810c30:	1000091e 	bne	r2,zero,810c58 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810c34:	e0bffb17 	ldw	r2,-20(fp)
  810c38:	10800017 	ldw	r2,0(r2)
  810c3c:	10800717 	ldw	r2,28(r2)
  810c40:	e13ffb17 	ldw	r4,-20(fp)
  810c44:	e17ffd17 	ldw	r5,-12(fp)
  810c48:	e1bffe17 	ldw	r6,-8(fp)
  810c4c:	103ee83a 	callr	r2
  810c50:	e0bffa15 	stw	r2,-24(fp)
  810c54:	00000506 	br	810c6c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810c58:	00bfde84 	movi	r2,-134
  810c5c:	e0bffa15 	stw	r2,-24(fp)
  810c60:	00000206 	br	810c6c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  810c64:	00bfebc4 	movi	r2,-81
  810c68:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810c6c:	e0bffa17 	ldw	r2,-24(fp)
  810c70:	1004403a 	cmpge	r2,r2,zero
  810c74:	1000071e 	bne	r2,zero,810c94 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  810c78:	0810cac0 	call	810cac <alt_get_errno>
  810c7c:	1007883a 	mov	r3,r2
  810c80:	e0bffa17 	ldw	r2,-24(fp)
  810c84:	0085c83a 	sub	r2,zero,r2
  810c88:	18800015 	stw	r2,0(r3)
    rc = -1;
  810c8c:	00bfffc4 	movi	r2,-1
  810c90:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810c94:	e0bffa17 	ldw	r2,-24(fp)
}
  810c98:	e037883a 	mov	sp,fp
  810c9c:	dfc00117 	ldw	ra,4(sp)
  810ca0:	df000017 	ldw	fp,0(sp)
  810ca4:	dec00204 	addi	sp,sp,8
  810ca8:	f800283a 	ret

00810cac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810cac:	defffd04 	addi	sp,sp,-12
  810cb0:	dfc00215 	stw	ra,8(sp)
  810cb4:	df000115 	stw	fp,4(sp)
  810cb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810cbc:	00802074 	movhi	r2,129
  810cc0:	109ba304 	addi	r2,r2,28300
  810cc4:	10800017 	ldw	r2,0(r2)
  810cc8:	1005003a 	cmpeq	r2,r2,zero
  810ccc:	1000061e 	bne	r2,zero,810ce8 <alt_get_errno+0x3c>
  810cd0:	00802074 	movhi	r2,129
  810cd4:	109ba304 	addi	r2,r2,28300
  810cd8:	10800017 	ldw	r2,0(r2)
  810cdc:	103ee83a 	callr	r2
  810ce0:	e0bfff15 	stw	r2,-4(fp)
  810ce4:	00000306 	br	810cf4 <alt_get_errno+0x48>
  810ce8:	008020b4 	movhi	r2,130
  810cec:	10a2ed04 	addi	r2,r2,-29772
  810cf0:	e0bfff15 	stw	r2,-4(fp)
  810cf4:	e0bfff17 	ldw	r2,-4(fp)
}
  810cf8:	e037883a 	mov	sp,fp
  810cfc:	dfc00117 	ldw	ra,4(sp)
  810d00:	df000017 	ldw	fp,0(sp)
  810d04:	dec00204 	addi	sp,sp,8
  810d08:	f800283a 	ret

00810d0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810d0c:	defffd04 	addi	sp,sp,-12
  810d10:	dfc00215 	stw	ra,8(sp)
  810d14:	df000115 	stw	fp,4(sp)
  810d18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810d1c:	0009883a 	mov	r4,zero
  810d20:	081163c0 	call	81163c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810d24:	08116700 	call	811670 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810d28:	01002074 	movhi	r4,129
  810d2c:	21146404 	addi	r4,r4,20880
  810d30:	01402074 	movhi	r5,129
  810d34:	29546404 	addi	r5,r5,20880
  810d38:	01802074 	movhi	r6,129
  810d3c:	31946404 	addi	r6,r6,20880
  810d40:	08144240 	call	814424 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810d44:	0813d300 	call	813d30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810d48:	01002074 	movhi	r4,129
  810d4c:	210f6504 	addi	r4,r4,15764
  810d50:	08146c80 	call	8146c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810d54:	d1276217 	ldw	r4,-25208(gp)
  810d58:	d1676317 	ldw	r5,-25204(gp)
  810d5c:	d1a76417 	ldw	r6,-25200(gp)
  810d60:	0800e5c0 	call	800e5c <main>
  810d64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810d68:	01000044 	movi	r4,1
  810d6c:	08105340 	call	810534 <close>
  exit (result);
  810d70:	e13fff17 	ldw	r4,-4(fp)
  810d74:	08146dc0 	call	8146dc <exit>

00810d78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810d78:	defffe04 	addi	sp,sp,-8
  810d7c:	df000115 	stw	fp,4(sp)
  810d80:	df000104 	addi	fp,sp,4
  810d84:	e13fff15 	stw	r4,-4(fp)
}
  810d88:	e037883a 	mov	sp,fp
  810d8c:	df000017 	ldw	fp,0(sp)
  810d90:	dec00104 	addi	sp,sp,4
  810d94:	f800283a 	ret

00810d98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810d98:	defffe04 	addi	sp,sp,-8
  810d9c:	df000115 	stw	fp,4(sp)
  810da0:	df000104 	addi	fp,sp,4
  810da4:	e13fff15 	stw	r4,-4(fp)
}
  810da8:	e037883a 	mov	sp,fp
  810dac:	df000017 	ldw	fp,0(sp)
  810db0:	dec00104 	addi	sp,sp,4
  810db4:	f800283a 	ret

00810db8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810db8:	defffc04 	addi	sp,sp,-16
  810dbc:	df000315 	stw	fp,12(sp)
  810dc0:	df000304 	addi	fp,sp,12
  810dc4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810dc8:	e0bffe17 	ldw	r2,-8(fp)
  810dcc:	10800217 	ldw	r2,8(r2)
  810dd0:	10d00034 	orhi	r3,r2,16384
  810dd4:	e0bffe17 	ldw	r2,-8(fp)
  810dd8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810ddc:	e03ffd15 	stw	zero,-12(fp)
  810de0:	00002006 	br	810e64 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810de4:	e0bffd17 	ldw	r2,-12(fp)
  810de8:	00c02074 	movhi	r3,129
  810dec:	18d6a204 	addi	r3,r3,23176
  810df0:	10800324 	muli	r2,r2,12
  810df4:	10c5883a 	add	r2,r2,r3
  810df8:	10c00017 	ldw	r3,0(r2)
  810dfc:	e0bffe17 	ldw	r2,-8(fp)
  810e00:	10800017 	ldw	r2,0(r2)
  810e04:	1880141e 	bne	r3,r2,810e58 <alt_file_locked+0xa0>
  810e08:	e0bffd17 	ldw	r2,-12(fp)
  810e0c:	00c02074 	movhi	r3,129
  810e10:	18d6a204 	addi	r3,r3,23176
  810e14:	10800324 	muli	r2,r2,12
  810e18:	10c5883a 	add	r2,r2,r3
  810e1c:	10800204 	addi	r2,r2,8
  810e20:	10800017 	ldw	r2,0(r2)
  810e24:	1004403a 	cmpge	r2,r2,zero
  810e28:	10000b1e 	bne	r2,zero,810e58 <alt_file_locked+0xa0>
  810e2c:	e0bffd17 	ldw	r2,-12(fp)
  810e30:	10800324 	muli	r2,r2,12
  810e34:	1007883a 	mov	r3,r2
  810e38:	00802074 	movhi	r2,129
  810e3c:	1096a204 	addi	r2,r2,23176
  810e40:	1887883a 	add	r3,r3,r2
  810e44:	e0bffe17 	ldw	r2,-8(fp)
  810e48:	18800326 	beq	r3,r2,810e58 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810e4c:	00bffcc4 	movi	r2,-13
  810e50:	e0bfff15 	stw	r2,-4(fp)
  810e54:	00000a06 	br	810e80 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810e58:	e0bffd17 	ldw	r2,-12(fp)
  810e5c:	10800044 	addi	r2,r2,1
  810e60:	e0bffd15 	stw	r2,-12(fp)
  810e64:	00802074 	movhi	r2,129
  810e68:	109ba204 	addi	r2,r2,28296
  810e6c:	10800017 	ldw	r2,0(r2)
  810e70:	1007883a 	mov	r3,r2
  810e74:	e0bffd17 	ldw	r2,-12(fp)
  810e78:	18bfda2e 	bgeu	r3,r2,810de4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810e7c:	e03fff15 	stw	zero,-4(fp)
  810e80:	e0bfff17 	ldw	r2,-4(fp)
}
  810e84:	e037883a 	mov	sp,fp
  810e88:	df000017 	ldw	fp,0(sp)
  810e8c:	dec00104 	addi	sp,sp,4
  810e90:	f800283a 	ret

00810e94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810e94:	defff404 	addi	sp,sp,-48
  810e98:	dfc00b15 	stw	ra,44(sp)
  810e9c:	df000a15 	stw	fp,40(sp)
  810ea0:	df000a04 	addi	fp,sp,40
  810ea4:	e13ffb15 	stw	r4,-20(fp)
  810ea8:	e17ffc15 	stw	r5,-16(fp)
  810eac:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810eb0:	00bfffc4 	movi	r2,-1
  810eb4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  810eb8:	00bffb44 	movi	r2,-19
  810ebc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  810ec0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810ec4:	e13ffb17 	ldw	r4,-20(fp)
  810ec8:	01402074 	movhi	r5,129
  810ecc:	295ba004 	addi	r5,r5,28288
  810ed0:	0813df80 	call	813df8 <alt_find_dev>
  810ed4:	e0bffa15 	stw	r2,-24(fp)
  810ed8:	e0bffa17 	ldw	r2,-24(fp)
  810edc:	1004c03a 	cmpne	r2,r2,zero
  810ee0:	1000051e 	bne	r2,zero,810ef8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810ee4:	e13ffb17 	ldw	r4,-20(fp)
  810ee8:	0813e8c0 	call	813e8c <alt_find_file>
  810eec:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  810ef0:	00800044 	movi	r2,1
  810ef4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810ef8:	e0bffa17 	ldw	r2,-24(fp)
  810efc:	1005003a 	cmpeq	r2,r2,zero
  810f00:	1000301e 	bne	r2,zero,810fc4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810f04:	e13ffa17 	ldw	r4,-24(fp)
  810f08:	0813fac0 	call	813fac <alt_get_fd>
  810f0c:	e0bff815 	stw	r2,-32(fp)
  810f10:	e0bff817 	ldw	r2,-32(fp)
  810f14:	1004403a 	cmpge	r2,r2,zero
  810f18:	1000031e 	bne	r2,zero,810f28 <open+0x94>
    {
      status = index;
  810f1c:	e0bff817 	ldw	r2,-32(fp)
  810f20:	e0bff715 	stw	r2,-36(fp)
  810f24:	00002906 	br	810fcc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  810f28:	e0bff817 	ldw	r2,-32(fp)
  810f2c:	10800324 	muli	r2,r2,12
  810f30:	1007883a 	mov	r3,r2
  810f34:	00802074 	movhi	r2,129
  810f38:	1096a204 	addi	r2,r2,23176
  810f3c:	1885883a 	add	r2,r3,r2
  810f40:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810f44:	e0fffc17 	ldw	r3,-16(fp)
  810f48:	00900034 	movhi	r2,16384
  810f4c:	10bfffc4 	addi	r2,r2,-1
  810f50:	1886703a 	and	r3,r3,r2
  810f54:	e0bff917 	ldw	r2,-28(fp)
  810f58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810f5c:	e0bff617 	ldw	r2,-40(fp)
  810f60:	1004c03a 	cmpne	r2,r2,zero
  810f64:	1000061e 	bne	r2,zero,810f80 <open+0xec>
  810f68:	e13ff917 	ldw	r4,-28(fp)
  810f6c:	0810db80 	call	810db8 <alt_file_locked>
  810f70:	e0bff715 	stw	r2,-36(fp)
  810f74:	e0bff717 	ldw	r2,-36(fp)
  810f78:	1004803a 	cmplt	r2,r2,zero
  810f7c:	1000131e 	bne	r2,zero,810fcc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810f80:	e0bffa17 	ldw	r2,-24(fp)
  810f84:	10800317 	ldw	r2,12(r2)
  810f88:	1005003a 	cmpeq	r2,r2,zero
  810f8c:	1000091e 	bne	r2,zero,810fb4 <open+0x120>
  810f90:	e0bffa17 	ldw	r2,-24(fp)
  810f94:	10800317 	ldw	r2,12(r2)
  810f98:	e13ff917 	ldw	r4,-28(fp)
  810f9c:	e17ffb17 	ldw	r5,-20(fp)
  810fa0:	e1bffc17 	ldw	r6,-16(fp)
  810fa4:	e1fffd17 	ldw	r7,-12(fp)
  810fa8:	103ee83a 	callr	r2
  810fac:	e0bfff15 	stw	r2,-4(fp)
  810fb0:	00000106 	br	810fb8 <open+0x124>
  810fb4:	e03fff15 	stw	zero,-4(fp)
  810fb8:	e0bfff17 	ldw	r2,-4(fp)
  810fbc:	e0bff715 	stw	r2,-36(fp)
  810fc0:	00000206 	br	810fcc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810fc4:	00bffb44 	movi	r2,-19
  810fc8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810fcc:	e0bff717 	ldw	r2,-36(fp)
  810fd0:	1004403a 	cmpge	r2,r2,zero
  810fd4:	1000091e 	bne	r2,zero,810ffc <open+0x168>
  {
    alt_release_fd (index);  
  810fd8:	e13ff817 	ldw	r4,-32(fp)
  810fdc:	08111fc0 	call	8111fc <alt_release_fd>
    ALT_ERRNO = -status;
  810fe0:	081101c0 	call	81101c <alt_get_errno>
  810fe4:	e0fff717 	ldw	r3,-36(fp)
  810fe8:	00c7c83a 	sub	r3,zero,r3
  810fec:	10c00015 	stw	r3,0(r2)
    return -1;
  810ff0:	00bfffc4 	movi	r2,-1
  810ff4:	e0bffe15 	stw	r2,-8(fp)
  810ff8:	00000206 	br	811004 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  810ffc:	e0bff817 	ldw	r2,-32(fp)
  811000:	e0bffe15 	stw	r2,-8(fp)
  811004:	e0bffe17 	ldw	r2,-8(fp)
}
  811008:	e037883a 	mov	sp,fp
  81100c:	dfc00117 	ldw	ra,4(sp)
  811010:	df000017 	ldw	fp,0(sp)
  811014:	dec00204 	addi	sp,sp,8
  811018:	f800283a 	ret

0081101c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81101c:	defffd04 	addi	sp,sp,-12
  811020:	dfc00215 	stw	ra,8(sp)
  811024:	df000115 	stw	fp,4(sp)
  811028:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81102c:	00802074 	movhi	r2,129
  811030:	109ba304 	addi	r2,r2,28300
  811034:	10800017 	ldw	r2,0(r2)
  811038:	1005003a 	cmpeq	r2,r2,zero
  81103c:	1000061e 	bne	r2,zero,811058 <alt_get_errno+0x3c>
  811040:	00802074 	movhi	r2,129
  811044:	109ba304 	addi	r2,r2,28300
  811048:	10800017 	ldw	r2,0(r2)
  81104c:	103ee83a 	callr	r2
  811050:	e0bfff15 	stw	r2,-4(fp)
  811054:	00000306 	br	811064 <alt_get_errno+0x48>
  811058:	008020b4 	movhi	r2,130
  81105c:	10a2ed04 	addi	r2,r2,-29772
  811060:	e0bfff15 	stw	r2,-4(fp)
  811064:	e0bfff17 	ldw	r2,-4(fp)
}
  811068:	e037883a 	mov	sp,fp
  81106c:	dfc00117 	ldw	ra,4(sp)
  811070:	df000017 	ldw	fp,0(sp)
  811074:	dec00204 	addi	sp,sp,8
  811078:	f800283a 	ret

0081107c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81107c:	defff704 	addi	sp,sp,-36
  811080:	dfc00815 	stw	ra,32(sp)
  811084:	df000715 	stw	fp,28(sp)
  811088:	df000704 	addi	fp,sp,28
  81108c:	e13ffb15 	stw	r4,-20(fp)
  811090:	e17ffc15 	stw	r5,-16(fp)
  811094:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811098:	e0bffb17 	ldw	r2,-20(fp)
  81109c:	1004803a 	cmplt	r2,r2,zero
  8110a0:	1000081e 	bne	r2,zero,8110c4 <read+0x48>
  8110a4:	e0bffb17 	ldw	r2,-20(fp)
  8110a8:	10800324 	muli	r2,r2,12
  8110ac:	1007883a 	mov	r3,r2
  8110b0:	00802074 	movhi	r2,129
  8110b4:	1096a204 	addi	r2,r2,23176
  8110b8:	1887883a 	add	r3,r3,r2
  8110bc:	e0ffff15 	stw	r3,-4(fp)
  8110c0:	00000106 	br	8110c8 <read+0x4c>
  8110c4:	e03fff15 	stw	zero,-4(fp)
  8110c8:	e0bfff17 	ldw	r2,-4(fp)
  8110cc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8110d0:	e0bffa17 	ldw	r2,-24(fp)
  8110d4:	1005003a 	cmpeq	r2,r2,zero
  8110d8:	1000241e 	bne	r2,zero,81116c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8110dc:	e0bffa17 	ldw	r2,-24(fp)
  8110e0:	10800217 	ldw	r2,8(r2)
  8110e4:	108000cc 	andi	r2,r2,3
  8110e8:	10800060 	cmpeqi	r2,r2,1
  8110ec:	10001a1e 	bne	r2,zero,811158 <read+0xdc>
  8110f0:	e0bffa17 	ldw	r2,-24(fp)
  8110f4:	10800017 	ldw	r2,0(r2)
  8110f8:	10800517 	ldw	r2,20(r2)
  8110fc:	1005003a 	cmpeq	r2,r2,zero
  811100:	1000151e 	bne	r2,zero,811158 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811104:	e0bffa17 	ldw	r2,-24(fp)
  811108:	10800017 	ldw	r2,0(r2)
  81110c:	10800517 	ldw	r2,20(r2)
  811110:	e17ffc17 	ldw	r5,-16(fp)
  811114:	e1bffd17 	ldw	r6,-12(fp)
  811118:	e13ffa17 	ldw	r4,-24(fp)
  81111c:	103ee83a 	callr	r2
  811120:	e0bff915 	stw	r2,-28(fp)
  811124:	e0bff917 	ldw	r2,-28(fp)
  811128:	1004403a 	cmpge	r2,r2,zero
  81112c:	1000071e 	bne	r2,zero,81114c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  811130:	081119c0 	call	81119c <alt_get_errno>
  811134:	e0fff917 	ldw	r3,-28(fp)
  811138:	00c7c83a 	sub	r3,zero,r3
  81113c:	10c00015 	stw	r3,0(r2)
          return -1;
  811140:	00bfffc4 	movi	r2,-1
  811144:	e0bffe15 	stw	r2,-8(fp)
  811148:	00000e06 	br	811184 <read+0x108>
        }
        return rval;
  81114c:	e0bff917 	ldw	r2,-28(fp)
  811150:	e0bffe15 	stw	r2,-8(fp)
  811154:	00000b06 	br	811184 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811158:	081119c0 	call	81119c <alt_get_errno>
  81115c:	1007883a 	mov	r3,r2
  811160:	00800344 	movi	r2,13
  811164:	18800015 	stw	r2,0(r3)
  811168:	00000406 	br	81117c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81116c:	081119c0 	call	81119c <alt_get_errno>
  811170:	1007883a 	mov	r3,r2
  811174:	00801444 	movi	r2,81
  811178:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81117c:	00bfffc4 	movi	r2,-1
  811180:	e0bffe15 	stw	r2,-8(fp)
  811184:	e0bffe17 	ldw	r2,-8(fp)
}
  811188:	e037883a 	mov	sp,fp
  81118c:	dfc00117 	ldw	ra,4(sp)
  811190:	df000017 	ldw	fp,0(sp)
  811194:	dec00204 	addi	sp,sp,8
  811198:	f800283a 	ret

0081119c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81119c:	defffd04 	addi	sp,sp,-12
  8111a0:	dfc00215 	stw	ra,8(sp)
  8111a4:	df000115 	stw	fp,4(sp)
  8111a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8111ac:	00802074 	movhi	r2,129
  8111b0:	109ba304 	addi	r2,r2,28300
  8111b4:	10800017 	ldw	r2,0(r2)
  8111b8:	1005003a 	cmpeq	r2,r2,zero
  8111bc:	1000061e 	bne	r2,zero,8111d8 <alt_get_errno+0x3c>
  8111c0:	00802074 	movhi	r2,129
  8111c4:	109ba304 	addi	r2,r2,28300
  8111c8:	10800017 	ldw	r2,0(r2)
  8111cc:	103ee83a 	callr	r2
  8111d0:	e0bfff15 	stw	r2,-4(fp)
  8111d4:	00000306 	br	8111e4 <alt_get_errno+0x48>
  8111d8:	008020b4 	movhi	r2,130
  8111dc:	10a2ed04 	addi	r2,r2,-29772
  8111e0:	e0bfff15 	stw	r2,-4(fp)
  8111e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8111e8:	e037883a 	mov	sp,fp
  8111ec:	dfc00117 	ldw	ra,4(sp)
  8111f0:	df000017 	ldw	fp,0(sp)
  8111f4:	dec00204 	addi	sp,sp,8
  8111f8:	f800283a 	ret

008111fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8111fc:	defffe04 	addi	sp,sp,-8
  811200:	df000115 	stw	fp,4(sp)
  811204:	df000104 	addi	fp,sp,4
  811208:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81120c:	e0bfff17 	ldw	r2,-4(fp)
  811210:	108000d0 	cmplti	r2,r2,3
  811214:	10000d1e 	bne	r2,zero,81124c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  811218:	e0bfff17 	ldw	r2,-4(fp)
  81121c:	00c02074 	movhi	r3,129
  811220:	18d6a204 	addi	r3,r3,23176
  811224:	10800324 	muli	r2,r2,12
  811228:	10c5883a 	add	r2,r2,r3
  81122c:	10800204 	addi	r2,r2,8
  811230:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  811234:	e0bfff17 	ldw	r2,-4(fp)
  811238:	00c02074 	movhi	r3,129
  81123c:	18d6a204 	addi	r3,r3,23176
  811240:	10800324 	muli	r2,r2,12
  811244:	10c5883a 	add	r2,r2,r3
  811248:	10000015 	stw	zero,0(r2)
  }
}
  81124c:	e037883a 	mov	sp,fp
  811250:	df000017 	ldw	fp,0(sp)
  811254:	dec00104 	addi	sp,sp,4
  811258:	f800283a 	ret

0081125c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81125c:	defff804 	addi	sp,sp,-32
  811260:	df000715 	stw	fp,28(sp)
  811264:	df000704 	addi	fp,sp,28
  811268:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81126c:	0005303a 	rdctl	r2,status
  811270:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811274:	e0fffb17 	ldw	r3,-20(fp)
  811278:	00bfff84 	movi	r2,-2
  81127c:	1884703a 	and	r2,r3,r2
  811280:	1001703a 	wrctl	status,r2
  
  return context;
  811284:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811288:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81128c:	d0a01217 	ldw	r2,-32696(gp)
  811290:	10c000c4 	addi	r3,r2,3
  811294:	00bfff04 	movi	r2,-4
  811298:	1884703a 	and	r2,r3,r2
  81129c:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8112a0:	d0e01217 	ldw	r3,-32696(gp)
  8112a4:	e0bffe17 	ldw	r2,-8(fp)
  8112a8:	1887883a 	add	r3,r3,r2
  8112ac:	00804034 	movhi	r2,256
  8112b0:	10800004 	addi	r2,r2,0
  8112b4:	10c0072e 	bgeu	r2,r3,8112d4 <sbrk+0x78>
  8112b8:	e0bffd17 	ldw	r2,-12(fp)
  8112bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112c0:	e0bffa17 	ldw	r2,-24(fp)
  8112c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8112c8:	00bfffc4 	movi	r2,-1
  8112cc:	e0bfff15 	stw	r2,-4(fp)
  8112d0:	00000c06 	br	811304 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8112d4:	d0a01217 	ldw	r2,-32696(gp)
  8112d8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8112dc:	d0e01217 	ldw	r3,-32696(gp)
  8112e0:	e0bffe17 	ldw	r2,-8(fp)
  8112e4:	1885883a 	add	r2,r3,r2
  8112e8:	d0a01215 	stw	r2,-32696(gp)
  8112ec:	e0bffd17 	ldw	r2,-12(fp)
  8112f0:	e0bff915 	stw	r2,-28(fp)
  8112f4:	e0bff917 	ldw	r2,-28(fp)
  8112f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8112fc:	e0bffc17 	ldw	r2,-16(fp)
  811300:	e0bfff15 	stw	r2,-4(fp)
  811304:	e0bfff17 	ldw	r2,-4(fp)
} 
  811308:	e037883a 	mov	sp,fp
  81130c:	df000017 	ldw	fp,0(sp)
  811310:	dec00104 	addi	sp,sp,4
  811314:	f800283a 	ret

00811318 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811318:	defffa04 	addi	sp,sp,-24
  81131c:	df000515 	stw	fp,20(sp)
  811320:	df000504 	addi	fp,sp,20
  811324:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811328:	0005303a 	rdctl	r2,status
  81132c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811330:	e0fffd17 	ldw	r3,-12(fp)
  811334:	00bfff84 	movi	r2,-2
  811338:	1884703a 	and	r2,r3,r2
  81133c:	1001703a 	wrctl	status,r2
  
  return context;
  811340:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811344:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  811348:	e0bfff17 	ldw	r2,-4(fp)
  81134c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811350:	e0bffc17 	ldw	r2,-16(fp)
  811354:	10c00017 	ldw	r3,0(r2)
  811358:	e0bffc17 	ldw	r2,-16(fp)
  81135c:	10800117 	ldw	r2,4(r2)
  811360:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  811364:	e0bffc17 	ldw	r2,-16(fp)
  811368:	10c00117 	ldw	r3,4(r2)
  81136c:	e0bffc17 	ldw	r2,-16(fp)
  811370:	10800017 	ldw	r2,0(r2)
  811374:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811378:	e0fffc17 	ldw	r3,-16(fp)
  81137c:	e0bffc17 	ldw	r2,-16(fp)
  811380:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  811384:	e0fffc17 	ldw	r3,-16(fp)
  811388:	e0bffc17 	ldw	r2,-16(fp)
  81138c:	18800015 	stw	r2,0(r3)
  811390:	e0bffe17 	ldw	r2,-8(fp)
  811394:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811398:	e0bffb17 	ldw	r2,-20(fp)
  81139c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8113a0:	e037883a 	mov	sp,fp
  8113a4:	df000017 	ldw	fp,0(sp)
  8113a8:	dec00104 	addi	sp,sp,4
  8113ac:	f800283a 	ret

008113b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8113b0:	defffb04 	addi	sp,sp,-20
  8113b4:	dfc00415 	stw	ra,16(sp)
  8113b8:	df000315 	stw	fp,12(sp)
  8113bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8113c0:	d0a01317 	ldw	r2,-32692(gp)
  8113c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8113c8:	d0a76617 	ldw	r2,-25192(gp)
  8113cc:	10800044 	addi	r2,r2,1
  8113d0:	d0a76615 	stw	r2,-25192(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8113d4:	00003106 	br	81149c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8113d8:	e0bffe17 	ldw	r2,-8(fp)
  8113dc:	10800017 	ldw	r2,0(r2)
  8113e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8113e4:	e0bffe17 	ldw	r2,-8(fp)
  8113e8:	10800403 	ldbu	r2,16(r2)
  8113ec:	10803fcc 	andi	r2,r2,255
  8113f0:	1005003a 	cmpeq	r2,r2,zero
  8113f4:	1000051e 	bne	r2,zero,81140c <alt_tick+0x5c>
  8113f8:	d0a76617 	ldw	r2,-25192(gp)
  8113fc:	1004c03a 	cmpne	r2,r2,zero
  811400:	1000021e 	bne	r2,zero,81140c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811404:	e0bffe17 	ldw	r2,-8(fp)
  811408:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81140c:	e0bffe17 	ldw	r2,-8(fp)
  811410:	10c00217 	ldw	r3,8(r2)
  811414:	d0a76617 	ldw	r2,-25192(gp)
  811418:	10c01e36 	bltu	r2,r3,811494 <alt_tick+0xe4>
  81141c:	e0bffe17 	ldw	r2,-8(fp)
  811420:	10800403 	ldbu	r2,16(r2)
  811424:	10803fcc 	andi	r2,r2,255
  811428:	1004c03a 	cmpne	r2,r2,zero
  81142c:	1000191e 	bne	r2,zero,811494 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811430:	e0bffe17 	ldw	r2,-8(fp)
  811434:	10c00317 	ldw	r3,12(r2)
  811438:	e0bffe17 	ldw	r2,-8(fp)
  81143c:	11000517 	ldw	r4,20(r2)
  811440:	183ee83a 	callr	r3
  811444:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811448:	e0bffd17 	ldw	r2,-12(fp)
  81144c:	1004c03a 	cmpne	r2,r2,zero
  811450:	1000031e 	bne	r2,zero,811460 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  811454:	e13ffe17 	ldw	r4,-8(fp)
  811458:	08113180 	call	811318 <alt_alarm_stop>
  81145c:	00000d06 	br	811494 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811460:	e0bffe17 	ldw	r2,-8(fp)
  811464:	10c00217 	ldw	r3,8(r2)
  811468:	e0bffd17 	ldw	r2,-12(fp)
  81146c:	1887883a 	add	r3,r3,r2
  811470:	e0bffe17 	ldw	r2,-8(fp)
  811474:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811478:	e0bffe17 	ldw	r2,-8(fp)
  81147c:	10c00217 	ldw	r3,8(r2)
  811480:	d0a76617 	ldw	r2,-25192(gp)
  811484:	1880032e 	bgeu	r3,r2,811494 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811488:	e0fffe17 	ldw	r3,-8(fp)
  81148c:	00800044 	movi	r2,1
  811490:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811494:	e0bfff17 	ldw	r2,-4(fp)
  811498:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81149c:	d0e01304 	addi	r3,gp,-32692
  8114a0:	e0bffe17 	ldw	r2,-8(fp)
  8114a4:	10ffcc1e 	bne	r2,r3,8113d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8114a8:	e037883a 	mov	sp,fp
  8114ac:	dfc00117 	ldw	ra,4(sp)
  8114b0:	df000017 	ldw	fp,0(sp)
  8114b4:	dec00204 	addi	sp,sp,8
  8114b8:	f800283a 	ret

008114bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8114bc:	defff704 	addi	sp,sp,-36
  8114c0:	dfc00815 	stw	ra,32(sp)
  8114c4:	df000715 	stw	fp,28(sp)
  8114c8:	df000704 	addi	fp,sp,28
  8114cc:	e13ffb15 	stw	r4,-20(fp)
  8114d0:	e17ffc15 	stw	r5,-16(fp)
  8114d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8114d8:	e0bffb17 	ldw	r2,-20(fp)
  8114dc:	1004803a 	cmplt	r2,r2,zero
  8114e0:	1000081e 	bne	r2,zero,811504 <write+0x48>
  8114e4:	e0bffb17 	ldw	r2,-20(fp)
  8114e8:	10800324 	muli	r2,r2,12
  8114ec:	1007883a 	mov	r3,r2
  8114f0:	00802074 	movhi	r2,129
  8114f4:	1096a204 	addi	r2,r2,23176
  8114f8:	1887883a 	add	r3,r3,r2
  8114fc:	e0ffff15 	stw	r3,-4(fp)
  811500:	00000106 	br	811508 <write+0x4c>
  811504:	e03fff15 	stw	zero,-4(fp)
  811508:	e0bfff17 	ldw	r2,-4(fp)
  81150c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811510:	e0bffa17 	ldw	r2,-24(fp)
  811514:	1005003a 	cmpeq	r2,r2,zero
  811518:	1000241e 	bne	r2,zero,8115ac <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81151c:	e0bffa17 	ldw	r2,-24(fp)
  811520:	10800217 	ldw	r2,8(r2)
  811524:	108000cc 	andi	r2,r2,3
  811528:	1005003a 	cmpeq	r2,r2,zero
  81152c:	10001a1e 	bne	r2,zero,811598 <write+0xdc>
  811530:	e0bffa17 	ldw	r2,-24(fp)
  811534:	10800017 	ldw	r2,0(r2)
  811538:	10800617 	ldw	r2,24(r2)
  81153c:	1005003a 	cmpeq	r2,r2,zero
  811540:	1000151e 	bne	r2,zero,811598 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811544:	e0bffa17 	ldw	r2,-24(fp)
  811548:	10800017 	ldw	r2,0(r2)
  81154c:	10800617 	ldw	r2,24(r2)
  811550:	e17ffc17 	ldw	r5,-16(fp)
  811554:	e1bffd17 	ldw	r6,-12(fp)
  811558:	e13ffa17 	ldw	r4,-24(fp)
  81155c:	103ee83a 	callr	r2
  811560:	e0bff915 	stw	r2,-28(fp)
  811564:	e0bff917 	ldw	r2,-28(fp)
  811568:	1004403a 	cmpge	r2,r2,zero
  81156c:	1000071e 	bne	r2,zero,81158c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  811570:	08115dc0 	call	8115dc <alt_get_errno>
  811574:	e0fff917 	ldw	r3,-28(fp)
  811578:	00c7c83a 	sub	r3,zero,r3
  81157c:	10c00015 	stw	r3,0(r2)
        return -1;
  811580:	00bfffc4 	movi	r2,-1
  811584:	e0bffe15 	stw	r2,-8(fp)
  811588:	00000e06 	br	8115c4 <write+0x108>
      }
      return rval;
  81158c:	e0bff917 	ldw	r2,-28(fp)
  811590:	e0bffe15 	stw	r2,-8(fp)
  811594:	00000b06 	br	8115c4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811598:	08115dc0 	call	8115dc <alt_get_errno>
  81159c:	1007883a 	mov	r3,r2
  8115a0:	00800344 	movi	r2,13
  8115a4:	18800015 	stw	r2,0(r3)
  8115a8:	00000406 	br	8115bc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8115ac:	08115dc0 	call	8115dc <alt_get_errno>
  8115b0:	1007883a 	mov	r3,r2
  8115b4:	00801444 	movi	r2,81
  8115b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8115bc:	00bfffc4 	movi	r2,-1
  8115c0:	e0bffe15 	stw	r2,-8(fp)
  8115c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8115c8:	e037883a 	mov	sp,fp
  8115cc:	dfc00117 	ldw	ra,4(sp)
  8115d0:	df000017 	ldw	fp,0(sp)
  8115d4:	dec00204 	addi	sp,sp,8
  8115d8:	f800283a 	ret

008115dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8115dc:	defffd04 	addi	sp,sp,-12
  8115e0:	dfc00215 	stw	ra,8(sp)
  8115e4:	df000115 	stw	fp,4(sp)
  8115e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8115ec:	00802074 	movhi	r2,129
  8115f0:	109ba304 	addi	r2,r2,28300
  8115f4:	10800017 	ldw	r2,0(r2)
  8115f8:	1005003a 	cmpeq	r2,r2,zero
  8115fc:	1000061e 	bne	r2,zero,811618 <alt_get_errno+0x3c>
  811600:	00802074 	movhi	r2,129
  811604:	109ba304 	addi	r2,r2,28300
  811608:	10800017 	ldw	r2,0(r2)
  81160c:	103ee83a 	callr	r2
  811610:	e0bfff15 	stw	r2,-4(fp)
  811614:	00000306 	br	811624 <alt_get_errno+0x48>
  811618:	008020b4 	movhi	r2,130
  81161c:	10a2ed04 	addi	r2,r2,-29772
  811620:	e0bfff15 	stw	r2,-4(fp)
  811624:	e0bfff17 	ldw	r2,-4(fp)
}
  811628:	e037883a 	mov	sp,fp
  81162c:	dfc00117 	ldw	ra,4(sp)
  811630:	df000017 	ldw	fp,0(sp)
  811634:	dec00204 	addi	sp,sp,8
  811638:	f800283a 	ret

0081163c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81163c:	defffd04 	addi	sp,sp,-12
  811640:	dfc00215 	stw	ra,8(sp)
  811644:	df000115 	stw	fp,4(sp)
  811648:	df000104 	addi	fp,sp,4
  81164c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  811650:	08144cc0 	call	8144cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  811654:	00800044 	movi	r2,1
  811658:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81165c:	e037883a 	mov	sp,fp
  811660:	dfc00117 	ldw	ra,4(sp)
  811664:	df000017 	ldw	fp,0(sp)
  811668:	dec00204 	addi	sp,sp,8
  81166c:	f800283a 	ret

00811670 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811670:	defffe04 	addi	sp,sp,-8
  811674:	dfc00115 	stw	ra,4(sp)
  811678:	df000015 	stw	fp,0(sp)
  81167c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811680:	01004074 	movhi	r4,257
  811684:	21040804 	addi	r4,r4,4128
  811688:	000b883a 	mov	r5,zero
  81168c:	01800084 	movi	r6,2
  811690:	01c0fa04 	movi	r7,1000
  811694:	08131980 	call	813198 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811698:	01002074 	movhi	r4,129
  81169c:	21170c04 	addi	r4,r4,23600
  8116a0:	000b883a 	mov	r5,zero
  8116a4:	01800044 	movi	r6,1
  8116a8:	08118840 	call	811884 <altera_avalon_jtag_uart_init>
  8116ac:	01002074 	movhi	r4,129
  8116b0:	21170204 	addi	r4,r4,23560
  8116b4:	08117040 	call	811704 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8116b8:	01002074 	movhi	r4,129
  8116bc:	211b2404 	addi	r4,r4,27792
  8116c0:	0812f940 	call	812f94 <altera_avalon_lcd_16207_init>
  8116c4:	01002074 	movhi	r4,129
  8116c8:	211b1a04 	addi	r4,r4,27752
  8116cc:	08117040 	call	811704 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8116d0:	01002074 	movhi	r4,129
  8116d4:	211b6c04 	addi	r4,r4,28080
  8116d8:	000b883a 	mov	r5,zero
  8116dc:	000d883a 	mov	r6,zero
  8116e0:	08133200 	call	813320 <altera_avalon_uart_init>
  8116e4:	01002074 	movhi	r4,129
  8116e8:	211b6204 	addi	r4,r4,28040
  8116ec:	08117040 	call	811704 <alt_dev_reg>
}
  8116f0:	e037883a 	mov	sp,fp
  8116f4:	dfc00117 	ldw	ra,4(sp)
  8116f8:	df000017 	ldw	fp,0(sp)
  8116fc:	dec00204 	addi	sp,sp,8
  811700:	f800283a 	ret

00811704 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811704:	defffd04 	addi	sp,sp,-12
  811708:	dfc00215 	stw	ra,8(sp)
  81170c:	df000115 	stw	fp,4(sp)
  811710:	df000104 	addi	fp,sp,4
  811714:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811718:	e13fff17 	ldw	r4,-4(fp)
  81171c:	01402074 	movhi	r5,129
  811720:	295ba004 	addi	r5,r5,28288
  811724:	0813c1c0 	call	813c1c <alt_dev_llist_insert>
}
  811728:	e037883a 	mov	sp,fp
  81172c:	dfc00117 	ldw	ra,4(sp)
  811730:	df000017 	ldw	fp,0(sp)
  811734:	dec00204 	addi	sp,sp,8
  811738:	f800283a 	ret

0081173c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81173c:	defffa04 	addi	sp,sp,-24
  811740:	dfc00515 	stw	ra,20(sp)
  811744:	df000415 	stw	fp,16(sp)
  811748:	df000404 	addi	fp,sp,16
  81174c:	e13ffd15 	stw	r4,-12(fp)
  811750:	e17ffe15 	stw	r5,-8(fp)
  811754:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811758:	e0bffd17 	ldw	r2,-12(fp)
  81175c:	10800017 	ldw	r2,0(r2)
  811760:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811764:	e0bffc17 	ldw	r2,-16(fp)
  811768:	11000a04 	addi	r4,r2,40
  81176c:	e0bffd17 	ldw	r2,-12(fp)
  811770:	11c00217 	ldw	r7,8(r2)
  811774:	e17ffe17 	ldw	r5,-8(fp)
  811778:	e1bfff17 	ldw	r6,-4(fp)
  81177c:	0811d840 	call	811d84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811780:	e037883a 	mov	sp,fp
  811784:	dfc00117 	ldw	ra,4(sp)
  811788:	df000017 	ldw	fp,0(sp)
  81178c:	dec00204 	addi	sp,sp,8
  811790:	f800283a 	ret

00811794 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811794:	defffa04 	addi	sp,sp,-24
  811798:	dfc00515 	stw	ra,20(sp)
  81179c:	df000415 	stw	fp,16(sp)
  8117a0:	df000404 	addi	fp,sp,16
  8117a4:	e13ffd15 	stw	r4,-12(fp)
  8117a8:	e17ffe15 	stw	r5,-8(fp)
  8117ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8117b0:	e0bffd17 	ldw	r2,-12(fp)
  8117b4:	10800017 	ldw	r2,0(r2)
  8117b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8117bc:	e0bffc17 	ldw	r2,-16(fp)
  8117c0:	11000a04 	addi	r4,r2,40
  8117c4:	e0bffd17 	ldw	r2,-12(fp)
  8117c8:	11c00217 	ldw	r7,8(r2)
  8117cc:	e17ffe17 	ldw	r5,-8(fp)
  8117d0:	e1bfff17 	ldw	r6,-4(fp)
  8117d4:	0811fa80 	call	811fa8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8117d8:	e037883a 	mov	sp,fp
  8117dc:	dfc00117 	ldw	ra,4(sp)
  8117e0:	df000017 	ldw	fp,0(sp)
  8117e4:	dec00204 	addi	sp,sp,8
  8117e8:	f800283a 	ret

008117ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8117ec:	defffc04 	addi	sp,sp,-16
  8117f0:	dfc00315 	stw	ra,12(sp)
  8117f4:	df000215 	stw	fp,8(sp)
  8117f8:	df000204 	addi	fp,sp,8
  8117fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811800:	e0bfff17 	ldw	r2,-4(fp)
  811804:	10800017 	ldw	r2,0(r2)
  811808:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81180c:	e0bffe17 	ldw	r2,-8(fp)
  811810:	11000a04 	addi	r4,r2,40
  811814:	e0bfff17 	ldw	r2,-4(fp)
  811818:	11400217 	ldw	r5,8(r2)
  81181c:	0811c1c0 	call	811c1c <altera_avalon_jtag_uart_close>
}
  811820:	e037883a 	mov	sp,fp
  811824:	dfc00117 	ldw	ra,4(sp)
  811828:	df000017 	ldw	fp,0(sp)
  81182c:	dec00204 	addi	sp,sp,8
  811830:	f800283a 	ret

00811834 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811834:	defffa04 	addi	sp,sp,-24
  811838:	dfc00515 	stw	ra,20(sp)
  81183c:	df000415 	stw	fp,16(sp)
  811840:	df000404 	addi	fp,sp,16
  811844:	e13ffd15 	stw	r4,-12(fp)
  811848:	e17ffe15 	stw	r5,-8(fp)
  81184c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811850:	e0bffd17 	ldw	r2,-12(fp)
  811854:	10800017 	ldw	r2,0(r2)
  811858:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81185c:	e0bffc17 	ldw	r2,-16(fp)
  811860:	11000a04 	addi	r4,r2,40
  811864:	e17ffe17 	ldw	r5,-8(fp)
  811868:	e1bfff17 	ldw	r6,-4(fp)
  81186c:	0811c900 	call	811c90 <altera_avalon_jtag_uart_ioctl>
}
  811870:	e037883a 	mov	sp,fp
  811874:	dfc00117 	ldw	ra,4(sp)
  811878:	df000017 	ldw	fp,0(sp)
  81187c:	dec00204 	addi	sp,sp,8
  811880:	f800283a 	ret

00811884 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811884:	defffa04 	addi	sp,sp,-24
  811888:	dfc00515 	stw	ra,20(sp)
  81188c:	df000415 	stw	fp,16(sp)
  811890:	df000404 	addi	fp,sp,16
  811894:	e13ffd15 	stw	r4,-12(fp)
  811898:	e17ffe15 	stw	r5,-8(fp)
  81189c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8118a0:	e0fffd17 	ldw	r3,-12(fp)
  8118a4:	00800044 	movi	r2,1
  8118a8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8118ac:	e0bffd17 	ldw	r2,-12(fp)
  8118b0:	10800017 	ldw	r2,0(r2)
  8118b4:	11000104 	addi	r4,r2,4
  8118b8:	e0bffd17 	ldw	r2,-12(fp)
  8118bc:	10800817 	ldw	r2,32(r2)
  8118c0:	1007883a 	mov	r3,r2
  8118c4:	2005883a 	mov	r2,r4
  8118c8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8118cc:	e13ffe17 	ldw	r4,-8(fp)
  8118d0:	e17fff17 	ldw	r5,-4(fp)
  8118d4:	d8000015 	stw	zero,0(sp)
  8118d8:	01802074 	movhi	r6,129
  8118dc:	31865104 	addi	r6,r6,6468
  8118e0:	e1fffd17 	ldw	r7,-12(fp)
  8118e4:	08140940 	call	814094 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8118e8:	e0bffd17 	ldw	r2,-12(fp)
  8118ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8118f0:	e0bffd17 	ldw	r2,-12(fp)
  8118f4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8118f8:	008020b4 	movhi	r2,130
  8118fc:	10a2f804 	addi	r2,r2,-29728
  811900:	10800017 	ldw	r2,0(r2)
  811904:	100b883a 	mov	r5,r2
  811908:	01802074 	movhi	r6,129
  81190c:	3186db04 	addi	r6,r6,7020
  811910:	e1fffd17 	ldw	r7,-12(fp)
  811914:	08103e00 	call	8103e0 <alt_alarm_start>
  811918:	1004403a 	cmpge	r2,r2,zero
  81191c:	1000041e 	bne	r2,zero,811930 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811920:	e0fffd17 	ldw	r3,-12(fp)
  811924:	00a00034 	movhi	r2,32768
  811928:	10bfffc4 	addi	r2,r2,-1
  81192c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811930:	e037883a 	mov	sp,fp
  811934:	dfc00117 	ldw	ra,4(sp)
  811938:	df000017 	ldw	fp,0(sp)
  81193c:	dec00204 	addi	sp,sp,8
  811940:	f800283a 	ret

00811944 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811944:	defff804 	addi	sp,sp,-32
  811948:	df000715 	stw	fp,28(sp)
  81194c:	df000704 	addi	fp,sp,28
  811950:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811954:	e0bfff17 	ldw	r2,-4(fp)
  811958:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  81195c:	e0bffe17 	ldw	r2,-8(fp)
  811960:	10800017 	ldw	r2,0(r2)
  811964:	e0bffd15 	stw	r2,-12(fp)
  811968:	00000006 	br	81196c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81196c:	e0bffd17 	ldw	r2,-12(fp)
  811970:	10800104 	addi	r2,r2,4
  811974:	10800037 	ldwio	r2,0(r2)
  811978:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81197c:	e0bffc17 	ldw	r2,-16(fp)
  811980:	1080c00c 	andi	r2,r2,768
  811984:	1005003a 	cmpeq	r2,r2,zero
  811988:	1000741e 	bne	r2,zero,811b5c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81198c:	e0bffc17 	ldw	r2,-16(fp)
  811990:	1080400c 	andi	r2,r2,256
  811994:	1005003a 	cmpeq	r2,r2,zero
  811998:	1000351e 	bne	r2,zero,811a70 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81199c:	00800074 	movhi	r2,1
  8119a0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8119a4:	e0bffe17 	ldw	r2,-8(fp)
  8119a8:	10800a17 	ldw	r2,40(r2)
  8119ac:	10800044 	addi	r2,r2,1
  8119b0:	1081ffcc 	andi	r2,r2,2047
  8119b4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8119b8:	e0bffe17 	ldw	r2,-8(fp)
  8119bc:	10c00b17 	ldw	r3,44(r2)
  8119c0:	e0bffa17 	ldw	r2,-24(fp)
  8119c4:	18801626 	beq	r3,r2,811a20 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8119c8:	e0bffd17 	ldw	r2,-12(fp)
  8119cc:	10800037 	ldwio	r2,0(r2)
  8119d0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8119d4:	e0bffb17 	ldw	r2,-20(fp)
  8119d8:	10a0000c 	andi	r2,r2,32768
  8119dc:	1005003a 	cmpeq	r2,r2,zero
  8119e0:	10000f1e 	bne	r2,zero,811a20 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8119e4:	e0bffe17 	ldw	r2,-8(fp)
  8119e8:	10c00a17 	ldw	r3,40(r2)
  8119ec:	e0bffb17 	ldw	r2,-20(fp)
  8119f0:	1009883a 	mov	r4,r2
  8119f4:	e0bffe17 	ldw	r2,-8(fp)
  8119f8:	1885883a 	add	r2,r3,r2
  8119fc:	10800e04 	addi	r2,r2,56
  811a00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811a04:	e0bffe17 	ldw	r2,-8(fp)
  811a08:	10800a17 	ldw	r2,40(r2)
  811a0c:	10800044 	addi	r2,r2,1
  811a10:	10c1ffcc 	andi	r3,r2,2047
  811a14:	e0bffe17 	ldw	r2,-8(fp)
  811a18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811a1c:	003fe106 	br	8119a4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811a20:	e0bffb17 	ldw	r2,-20(fp)
  811a24:	10bfffec 	andhi	r2,r2,65535
  811a28:	1005003a 	cmpeq	r2,r2,zero
  811a2c:	1000101e 	bne	r2,zero,811a70 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811a30:	e0bffe17 	ldw	r2,-8(fp)
  811a34:	10c00817 	ldw	r3,32(r2)
  811a38:	00bfff84 	movi	r2,-2
  811a3c:	1886703a 	and	r3,r3,r2
  811a40:	e0bffe17 	ldw	r2,-8(fp)
  811a44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811a48:	e0bffd17 	ldw	r2,-12(fp)
  811a4c:	11000104 	addi	r4,r2,4
  811a50:	e0bffe17 	ldw	r2,-8(fp)
  811a54:	10800817 	ldw	r2,32(r2)
  811a58:	1007883a 	mov	r3,r2
  811a5c:	2005883a 	mov	r2,r4
  811a60:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	10800104 	addi	r2,r2,4
  811a6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811a70:	e0bffc17 	ldw	r2,-16(fp)
  811a74:	1080800c 	andi	r2,r2,512
  811a78:	1005003a 	cmpeq	r2,r2,zero
  811a7c:	103fbb1e 	bne	r2,zero,81196c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811a80:	e0bffc17 	ldw	r2,-16(fp)
  811a84:	10bfffec 	andhi	r2,r2,65535
  811a88:	1004d43a 	srli	r2,r2,16
  811a8c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811a90:	00001506 	br	811ae8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811a94:	e13ffd17 	ldw	r4,-12(fp)
  811a98:	e0bffe17 	ldw	r2,-8(fp)
  811a9c:	10c00d17 	ldw	r3,52(r2)
  811aa0:	e0bffe17 	ldw	r2,-8(fp)
  811aa4:	1885883a 	add	r2,r3,r2
  811aa8:	10820e04 	addi	r2,r2,2104
  811aac:	10800003 	ldbu	r2,0(r2)
  811ab0:	10c03fcc 	andi	r3,r2,255
  811ab4:	18c0201c 	xori	r3,r3,128
  811ab8:	18ffe004 	addi	r3,r3,-128
  811abc:	2005883a 	mov	r2,r4
  811ac0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ac4:	e0bffe17 	ldw	r2,-8(fp)
  811ac8:	10800d17 	ldw	r2,52(r2)
  811acc:	10800044 	addi	r2,r2,1
  811ad0:	10c1ffcc 	andi	r3,r2,2047
  811ad4:	e0bffe17 	ldw	r2,-8(fp)
  811ad8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811adc:	e0bff917 	ldw	r2,-28(fp)
  811ae0:	10bfffc4 	addi	r2,r2,-1
  811ae4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811ae8:	e0bff917 	ldw	r2,-28(fp)
  811aec:	1005003a 	cmpeq	r2,r2,zero
  811af0:	1000051e 	bne	r2,zero,811b08 <altera_avalon_jtag_uart_irq+0x1c4>
  811af4:	e0bffe17 	ldw	r2,-8(fp)
  811af8:	10c00d17 	ldw	r3,52(r2)
  811afc:	e0bffe17 	ldw	r2,-8(fp)
  811b00:	10800c17 	ldw	r2,48(r2)
  811b04:	18bfe31e 	bne	r3,r2,811a94 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811b08:	e0bff917 	ldw	r2,-28(fp)
  811b0c:	1005003a 	cmpeq	r2,r2,zero
  811b10:	103f961e 	bne	r2,zero,81196c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811b14:	e0bffe17 	ldw	r2,-8(fp)
  811b18:	10c00817 	ldw	r3,32(r2)
  811b1c:	00bfff44 	movi	r2,-3
  811b20:	1886703a 	and	r3,r3,r2
  811b24:	e0bffe17 	ldw	r2,-8(fp)
  811b28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811b2c:	e0bffe17 	ldw	r2,-8(fp)
  811b30:	10800017 	ldw	r2,0(r2)
  811b34:	11000104 	addi	r4,r2,4
  811b38:	e0bffe17 	ldw	r2,-8(fp)
  811b3c:	10800817 	ldw	r2,32(r2)
  811b40:	1007883a 	mov	r3,r2
  811b44:	2005883a 	mov	r2,r4
  811b48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811b4c:	e0bffd17 	ldw	r2,-12(fp)
  811b50:	10800104 	addi	r2,r2,4
  811b54:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811b58:	003f8406 	br	81196c <altera_avalon_jtag_uart_irq+0x28>
}
  811b5c:	e037883a 	mov	sp,fp
  811b60:	df000017 	ldw	fp,0(sp)
  811b64:	dec00104 	addi	sp,sp,4
  811b68:	f800283a 	ret

00811b6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811b6c:	defffc04 	addi	sp,sp,-16
  811b70:	df000315 	stw	fp,12(sp)
  811b74:	df000304 	addi	fp,sp,12
  811b78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811b7c:	e0bfff17 	ldw	r2,-4(fp)
  811b80:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811b84:	e0bffe17 	ldw	r2,-8(fp)
  811b88:	10800017 	ldw	r2,0(r2)
  811b8c:	10800104 	addi	r2,r2,4
  811b90:	10800037 	ldwio	r2,0(r2)
  811b94:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811b98:	e0bffd17 	ldw	r2,-12(fp)
  811b9c:	1081000c 	andi	r2,r2,1024
  811ba0:	1005003a 	cmpeq	r2,r2,zero
  811ba4:	10000c1e 	bne	r2,zero,811bd8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811ba8:	e0bffe17 	ldw	r2,-8(fp)
  811bac:	10800017 	ldw	r2,0(r2)
  811bb0:	11000104 	addi	r4,r2,4
  811bb4:	e0bffe17 	ldw	r2,-8(fp)
  811bb8:	10800817 	ldw	r2,32(r2)
  811bbc:	10810014 	ori	r2,r2,1024
  811bc0:	1007883a 	mov	r3,r2
  811bc4:	2005883a 	mov	r2,r4
  811bc8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10000915 	stw	zero,36(r2)
  811bd4:	00000a06 	br	811c00 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811bd8:	e0bffe17 	ldw	r2,-8(fp)
  811bdc:	10c00917 	ldw	r3,36(r2)
  811be0:	00a00034 	movhi	r2,32768
  811be4:	10bfff04 	addi	r2,r2,-4
  811be8:	10c00536 	bltu	r2,r3,811c00 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811bec:	e0bffe17 	ldw	r2,-8(fp)
  811bf0:	10800917 	ldw	r2,36(r2)
  811bf4:	10c00044 	addi	r3,r2,1
  811bf8:	e0bffe17 	ldw	r2,-8(fp)
  811bfc:	10c00915 	stw	r3,36(r2)
  811c00:	008020b4 	movhi	r2,130
  811c04:	10a2f804 	addi	r2,r2,-29728
  811c08:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811c0c:	e037883a 	mov	sp,fp
  811c10:	df000017 	ldw	fp,0(sp)
  811c14:	dec00104 	addi	sp,sp,4
  811c18:	f800283a 	ret

00811c1c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811c1c:	defffc04 	addi	sp,sp,-16
  811c20:	df000315 	stw	fp,12(sp)
  811c24:	df000304 	addi	fp,sp,12
  811c28:	e13ffd15 	stw	r4,-12(fp)
  811c2c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811c30:	00000706 	br	811c50 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811c34:	e0bffe17 	ldw	r2,-8(fp)
  811c38:	1090000c 	andi	r2,r2,16384
  811c3c:	1005003a 	cmpeq	r2,r2,zero
  811c40:	1000031e 	bne	r2,zero,811c50 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811c44:	00bffd44 	movi	r2,-11
  811c48:	e0bfff15 	stw	r2,-4(fp)
  811c4c:	00000b06 	br	811c7c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811c50:	e0bffd17 	ldw	r2,-12(fp)
  811c54:	10c00d17 	ldw	r3,52(r2)
  811c58:	e0bffd17 	ldw	r2,-12(fp)
  811c5c:	10800c17 	ldw	r2,48(r2)
  811c60:	18800526 	beq	r3,r2,811c78 <altera_avalon_jtag_uart_close+0x5c>
  811c64:	e0bffd17 	ldw	r2,-12(fp)
  811c68:	10c00917 	ldw	r3,36(r2)
  811c6c:	e0bffd17 	ldw	r2,-12(fp)
  811c70:	10800117 	ldw	r2,4(r2)
  811c74:	18bfef36 	bltu	r3,r2,811c34 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811c78:	e03fff15 	stw	zero,-4(fp)
  811c7c:	e0bfff17 	ldw	r2,-4(fp)
}
  811c80:	e037883a 	mov	sp,fp
  811c84:	df000017 	ldw	fp,0(sp)
  811c88:	dec00104 	addi	sp,sp,4
  811c8c:	f800283a 	ret

00811c90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811c90:	defff804 	addi	sp,sp,-32
  811c94:	df000715 	stw	fp,28(sp)
  811c98:	df000704 	addi	fp,sp,28
  811c9c:	e13ffb15 	stw	r4,-20(fp)
  811ca0:	e17ffc15 	stw	r5,-16(fp)
  811ca4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811ca8:	00bff9c4 	movi	r2,-25
  811cac:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811cb0:	e0bffc17 	ldw	r2,-16(fp)
  811cb4:	e0bfff15 	stw	r2,-4(fp)
  811cb8:	e0ffff17 	ldw	r3,-4(fp)
  811cbc:	189a8060 	cmpeqi	r2,r3,27137
  811cc0:	1000041e 	bne	r2,zero,811cd4 <altera_avalon_jtag_uart_ioctl+0x44>
  811cc4:	e0ffff17 	ldw	r3,-4(fp)
  811cc8:	189a80a0 	cmpeqi	r2,r3,27138
  811ccc:	10001b1e 	bne	r2,zero,811d3c <altera_avalon_jtag_uart_ioctl+0xac>
  811cd0:	00002706 	br	811d70 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811cd4:	e0bffb17 	ldw	r2,-20(fp)
  811cd8:	10c00117 	ldw	r3,4(r2)
  811cdc:	00a00034 	movhi	r2,32768
  811ce0:	10bfffc4 	addi	r2,r2,-1
  811ce4:	18802226 	beq	r3,r2,811d70 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811ce8:	e0bffd17 	ldw	r2,-12(fp)
  811cec:	10800017 	ldw	r2,0(r2)
  811cf0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811cf4:	e0bff917 	ldw	r2,-28(fp)
  811cf8:	10800090 	cmplti	r2,r2,2
  811cfc:	1000071e 	bne	r2,zero,811d1c <altera_avalon_jtag_uart_ioctl+0x8c>
  811d00:	e0fff917 	ldw	r3,-28(fp)
  811d04:	00a00034 	movhi	r2,32768
  811d08:	10bfffc4 	addi	r2,r2,-1
  811d0c:	18800326 	beq	r3,r2,811d1c <altera_avalon_jtag_uart_ioctl+0x8c>
  811d10:	e0bff917 	ldw	r2,-28(fp)
  811d14:	e0bffe15 	stw	r2,-8(fp)
  811d18:	00000306 	br	811d28 <altera_avalon_jtag_uart_ioctl+0x98>
  811d1c:	00e00034 	movhi	r3,32768
  811d20:	18ffff84 	addi	r3,r3,-2
  811d24:	e0fffe15 	stw	r3,-8(fp)
  811d28:	e0bffb17 	ldw	r2,-20(fp)
  811d2c:	e0fffe17 	ldw	r3,-8(fp)
  811d30:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811d34:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811d38:	00000d06 	br	811d70 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811d3c:	e0bffb17 	ldw	r2,-20(fp)
  811d40:	10c00117 	ldw	r3,4(r2)
  811d44:	00a00034 	movhi	r2,32768
  811d48:	10bfffc4 	addi	r2,r2,-1
  811d4c:	18800826 	beq	r3,r2,811d70 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811d50:	e13ffd17 	ldw	r4,-12(fp)
  811d54:	e0bffb17 	ldw	r2,-20(fp)
  811d58:	10c00917 	ldw	r3,36(r2)
  811d5c:	e0bffb17 	ldw	r2,-20(fp)
  811d60:	10800117 	ldw	r2,4(r2)
  811d64:	1885803a 	cmpltu	r2,r3,r2
  811d68:	20800015 	stw	r2,0(r4)
      rc = 0;
  811d6c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811d70:	e0bffa17 	ldw	r2,-24(fp)
}
  811d74:	e037883a 	mov	sp,fp
  811d78:	df000017 	ldw	fp,0(sp)
  811d7c:	dec00104 	addi	sp,sp,4
  811d80:	f800283a 	ret

00811d84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811d84:	defff204 	addi	sp,sp,-56
  811d88:	dfc00d15 	stw	ra,52(sp)
  811d8c:	df000c15 	stw	fp,48(sp)
  811d90:	df000c04 	addi	fp,sp,48
  811d94:	e13ffb15 	stw	r4,-20(fp)
  811d98:	e17ffc15 	stw	r5,-16(fp)
  811d9c:	e1bffd15 	stw	r6,-12(fp)
  811da0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811da4:	e0bffc17 	ldw	r2,-16(fp)
  811da8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811dac:	00004806 	br	811ed0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811db0:	e0bffb17 	ldw	r2,-20(fp)
  811db4:	10800a17 	ldw	r2,40(r2)
  811db8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811dbc:	e0bffb17 	ldw	r2,-20(fp)
  811dc0:	10800b17 	ldw	r2,44(r2)
  811dc4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  811dc8:	e0fff717 	ldw	r3,-36(fp)
  811dcc:	e0bff617 	ldw	r2,-40(fp)
  811dd0:	18800536 	bltu	r3,r2,811de8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811dd4:	e0bff717 	ldw	r2,-36(fp)
  811dd8:	e0fff617 	ldw	r3,-40(fp)
  811ddc:	10c5c83a 	sub	r2,r2,r3
  811de0:	e0bff815 	stw	r2,-32(fp)
  811de4:	00000406 	br	811df8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811de8:	00820004 	movi	r2,2048
  811dec:	e0fff617 	ldw	r3,-40(fp)
  811df0:	10c5c83a 	sub	r2,r2,r3
  811df4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  811df8:	e0bff817 	ldw	r2,-32(fp)
  811dfc:	1005003a 	cmpeq	r2,r2,zero
  811e00:	10001f1e 	bne	r2,zero,811e80 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  811e04:	e0fffd17 	ldw	r3,-12(fp)
  811e08:	e0bff817 	ldw	r2,-32(fp)
  811e0c:	1880022e 	bgeu	r3,r2,811e18 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  811e10:	e0bffd17 	ldw	r2,-12(fp)
  811e14:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811e18:	e0bffb17 	ldw	r2,-20(fp)
  811e1c:	10c00e04 	addi	r3,r2,56
  811e20:	e0bff617 	ldw	r2,-40(fp)
  811e24:	1887883a 	add	r3,r3,r2
  811e28:	e0bffa17 	ldw	r2,-24(fp)
  811e2c:	1009883a 	mov	r4,r2
  811e30:	180b883a 	mov	r5,r3
  811e34:	e1bff817 	ldw	r6,-32(fp)
  811e38:	08031ac0 	call	8031ac <memcpy>
      ptr   += n;
  811e3c:	e0fff817 	ldw	r3,-32(fp)
  811e40:	e0bffa17 	ldw	r2,-24(fp)
  811e44:	10c5883a 	add	r2,r2,r3
  811e48:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  811e4c:	e0fffd17 	ldw	r3,-12(fp)
  811e50:	e0bff817 	ldw	r2,-32(fp)
  811e54:	1885c83a 	sub	r2,r3,r2
  811e58:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811e5c:	e0fff617 	ldw	r3,-40(fp)
  811e60:	e0bff817 	ldw	r2,-32(fp)
  811e64:	1885883a 	add	r2,r3,r2
  811e68:	10c1ffcc 	andi	r3,r2,2047
  811e6c:	e0bffb17 	ldw	r2,-20(fp)
  811e70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811e74:	e0bffd17 	ldw	r2,-12(fp)
  811e78:	10800048 	cmpgei	r2,r2,1
  811e7c:	103fcc1e 	bne	r2,zero,811db0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  811e80:	e0fffa17 	ldw	r3,-24(fp)
  811e84:	e0bffc17 	ldw	r2,-16(fp)
  811e88:	1880141e 	bne	r3,r2,811edc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811e8c:	e0bffe17 	ldw	r2,-8(fp)
  811e90:	1090000c 	andi	r2,r2,16384
  811e94:	1004c03a 	cmpne	r2,r2,zero
  811e98:	1000101e 	bne	r2,zero,811edc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811e9c:	e0bffb17 	ldw	r2,-20(fp)
  811ea0:	10c00a17 	ldw	r3,40(r2)
  811ea4:	e0bff717 	ldw	r2,-36(fp)
  811ea8:	1880051e 	bne	r3,r2,811ec0 <altera_avalon_jtag_uart_read+0x13c>
  811eac:	e0bffb17 	ldw	r2,-20(fp)
  811eb0:	10c00917 	ldw	r3,36(r2)
  811eb4:	e0bffb17 	ldw	r2,-20(fp)
  811eb8:	10800117 	ldw	r2,4(r2)
  811ebc:	18bff736 	bltu	r3,r2,811e9c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811ec0:	e0bffb17 	ldw	r2,-20(fp)
  811ec4:	10c00a17 	ldw	r3,40(r2)
  811ec8:	e0bff717 	ldw	r2,-36(fp)
  811ecc:	18800326 	beq	r3,r2,811edc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811ed0:	e0bffd17 	ldw	r2,-12(fp)
  811ed4:	10800048 	cmpgei	r2,r2,1
  811ed8:	103fb51e 	bne	r2,zero,811db0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811edc:	e0fffa17 	ldw	r3,-24(fp)
  811ee0:	e0bffc17 	ldw	r2,-16(fp)
  811ee4:	18801926 	beq	r3,r2,811f4c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ee8:	0005303a 	rdctl	r2,status
  811eec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ef0:	e0fff517 	ldw	r3,-44(fp)
  811ef4:	00bfff84 	movi	r2,-2
  811ef8:	1884703a 	and	r2,r3,r2
  811efc:	1001703a 	wrctl	status,r2
  
  return context;
  811f00:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811f04:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811f08:	e0bffb17 	ldw	r2,-20(fp)
  811f0c:	10800817 	ldw	r2,32(r2)
  811f10:	10c00054 	ori	r3,r2,1
  811f14:	e0bffb17 	ldw	r2,-20(fp)
  811f18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811f1c:	e0bffb17 	ldw	r2,-20(fp)
  811f20:	10800017 	ldw	r2,0(r2)
  811f24:	11000104 	addi	r4,r2,4
  811f28:	e0bffb17 	ldw	r2,-20(fp)
  811f2c:	10800817 	ldw	r2,32(r2)
  811f30:	1007883a 	mov	r3,r2
  811f34:	2005883a 	mov	r2,r4
  811f38:	10c00035 	stwio	r3,0(r2)
  811f3c:	e0bff917 	ldw	r2,-28(fp)
  811f40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f44:	e0bff417 	ldw	r2,-48(fp)
  811f48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811f4c:	e0fffa17 	ldw	r3,-24(fp)
  811f50:	e0bffc17 	ldw	r2,-16(fp)
  811f54:	18800526 	beq	r3,r2,811f6c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  811f58:	e0fffa17 	ldw	r3,-24(fp)
  811f5c:	e0bffc17 	ldw	r2,-16(fp)
  811f60:	1887c83a 	sub	r3,r3,r2
  811f64:	e0ffff15 	stw	r3,-4(fp)
  811f68:	00000906 	br	811f90 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  811f6c:	e0bffe17 	ldw	r2,-8(fp)
  811f70:	1090000c 	andi	r2,r2,16384
  811f74:	1005003a 	cmpeq	r2,r2,zero
  811f78:	1000031e 	bne	r2,zero,811f88 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811f7c:	00bffd44 	movi	r2,-11
  811f80:	e0bfff15 	stw	r2,-4(fp)
  811f84:	00000206 	br	811f90 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  811f88:	00bffec4 	movi	r2,-5
  811f8c:	e0bfff15 	stw	r2,-4(fp)
  811f90:	e0bfff17 	ldw	r2,-4(fp)
}
  811f94:	e037883a 	mov	sp,fp
  811f98:	dfc00117 	ldw	ra,4(sp)
  811f9c:	df000017 	ldw	fp,0(sp)
  811fa0:	dec00204 	addi	sp,sp,8
  811fa4:	f800283a 	ret

00811fa8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811fa8:	defff204 	addi	sp,sp,-56
  811fac:	dfc00d15 	stw	ra,52(sp)
  811fb0:	df000c15 	stw	fp,48(sp)
  811fb4:	df000c04 	addi	fp,sp,48
  811fb8:	e13ffb15 	stw	r4,-20(fp)
  811fbc:	e17ffc15 	stw	r5,-16(fp)
  811fc0:	e1bffd15 	stw	r6,-12(fp)
  811fc4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  811fc8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  811fcc:	e0bffc17 	ldw	r2,-16(fp)
  811fd0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811fd4:	00003a06 	br	8120c0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811fd8:	e0bffb17 	ldw	r2,-20(fp)
  811fdc:	10800c17 	ldw	r2,48(r2)
  811fe0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  811fe4:	e0bffb17 	ldw	r2,-20(fp)
  811fe8:	10800d17 	ldw	r2,52(r2)
  811fec:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  811ff0:	e0fffa17 	ldw	r3,-24(fp)
  811ff4:	e0bff917 	ldw	r2,-28(fp)
  811ff8:	1880062e 	bgeu	r3,r2,812014 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  811ffc:	e0fff917 	ldw	r3,-28(fp)
  812000:	e0bffa17 	ldw	r2,-24(fp)
  812004:	1885c83a 	sub	r2,r3,r2
  812008:	10bfffc4 	addi	r2,r2,-1
  81200c:	e0bff815 	stw	r2,-32(fp)
  812010:	00000c06 	br	812044 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  812014:	e0bff917 	ldw	r2,-28(fp)
  812018:	1005003a 	cmpeq	r2,r2,zero
  81201c:	1000051e 	bne	r2,zero,812034 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812020:	00820004 	movi	r2,2048
  812024:	e0fffa17 	ldw	r3,-24(fp)
  812028:	10c5c83a 	sub	r2,r2,r3
  81202c:	e0bff815 	stw	r2,-32(fp)
  812030:	00000406 	br	812044 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812034:	0081ffc4 	movi	r2,2047
  812038:	e0fffa17 	ldw	r3,-24(fp)
  81203c:	10c5c83a 	sub	r2,r2,r3
  812040:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812044:	e0bff817 	ldw	r2,-32(fp)
  812048:	1005003a 	cmpeq	r2,r2,zero
  81204c:	10001f1e 	bne	r2,zero,8120cc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812050:	e0fffd17 	ldw	r3,-12(fp)
  812054:	e0bff817 	ldw	r2,-32(fp)
  812058:	1880022e 	bgeu	r3,r2,812064 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  81205c:	e0bffd17 	ldw	r2,-12(fp)
  812060:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812064:	e0bffb17 	ldw	r2,-20(fp)
  812068:	10c20e04 	addi	r3,r2,2104
  81206c:	e0bffa17 	ldw	r2,-24(fp)
  812070:	1885883a 	add	r2,r3,r2
  812074:	e0fffc17 	ldw	r3,-16(fp)
  812078:	1009883a 	mov	r4,r2
  81207c:	180b883a 	mov	r5,r3
  812080:	e1bff817 	ldw	r6,-32(fp)
  812084:	08031ac0 	call	8031ac <memcpy>
      ptr   += n;
  812088:	e0fff817 	ldw	r3,-32(fp)
  81208c:	e0bffc17 	ldw	r2,-16(fp)
  812090:	10c5883a 	add	r2,r2,r3
  812094:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812098:	e0fffd17 	ldw	r3,-12(fp)
  81209c:	e0bff817 	ldw	r2,-32(fp)
  8120a0:	1885c83a 	sub	r2,r3,r2
  8120a4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8120a8:	e0fffa17 	ldw	r3,-24(fp)
  8120ac:	e0bff817 	ldw	r2,-32(fp)
  8120b0:	1885883a 	add	r2,r3,r2
  8120b4:	10c1ffcc 	andi	r3,r2,2047
  8120b8:	e0bffb17 	ldw	r2,-20(fp)
  8120bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8120c0:	e0bffd17 	ldw	r2,-12(fp)
  8120c4:	10800048 	cmpgei	r2,r2,1
  8120c8:	103fc31e 	bne	r2,zero,811fd8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120cc:	0005303a 	rdctl	r2,status
  8120d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120d4:	e0fff517 	ldw	r3,-44(fp)
  8120d8:	00bfff84 	movi	r2,-2
  8120dc:	1884703a 	and	r2,r3,r2
  8120e0:	1001703a 	wrctl	status,r2
  
  return context;
  8120e4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8120e8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8120ec:	e0bffb17 	ldw	r2,-20(fp)
  8120f0:	10800817 	ldw	r2,32(r2)
  8120f4:	10c00094 	ori	r3,r2,2
  8120f8:	e0bffb17 	ldw	r2,-20(fp)
  8120fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812100:	e0bffb17 	ldw	r2,-20(fp)
  812104:	10800017 	ldw	r2,0(r2)
  812108:	11000104 	addi	r4,r2,4
  81210c:	e0bffb17 	ldw	r2,-20(fp)
  812110:	10800817 	ldw	r2,32(r2)
  812114:	1007883a 	mov	r3,r2
  812118:	2005883a 	mov	r2,r4
  81211c:	10c00035 	stwio	r3,0(r2)
  812120:	e0bff717 	ldw	r2,-36(fp)
  812124:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812128:	e0bff417 	ldw	r2,-48(fp)
  81212c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812130:	e0bffd17 	ldw	r2,-12(fp)
  812134:	10800050 	cmplti	r2,r2,1
  812138:	1000111e 	bne	r2,zero,812180 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  81213c:	e0bffe17 	ldw	r2,-8(fp)
  812140:	1090000c 	andi	r2,r2,16384
  812144:	1004c03a 	cmpne	r2,r2,zero
  812148:	1000101e 	bne	r2,zero,81218c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81214c:	e0bffb17 	ldw	r2,-20(fp)
  812150:	10c00d17 	ldw	r3,52(r2)
  812154:	e0bff917 	ldw	r2,-28(fp)
  812158:	1880051e 	bne	r3,r2,812170 <altera_avalon_jtag_uart_write+0x1c8>
  81215c:	e0bffb17 	ldw	r2,-20(fp)
  812160:	10c00917 	ldw	r3,36(r2)
  812164:	e0bffb17 	ldw	r2,-20(fp)
  812168:	10800117 	ldw	r2,4(r2)
  81216c:	18bff736 	bltu	r3,r2,81214c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812170:	e0bffb17 	ldw	r2,-20(fp)
  812174:	10c00d17 	ldw	r3,52(r2)
  812178:	e0bff917 	ldw	r2,-28(fp)
  81217c:	18800326 	beq	r3,r2,81218c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  812180:	e0bffd17 	ldw	r2,-12(fp)
  812184:	10800048 	cmpgei	r2,r2,1
  812188:	103fcd1e 	bne	r2,zero,8120c0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81218c:	e0fffc17 	ldw	r3,-16(fp)
  812190:	e0bff617 	ldw	r2,-40(fp)
  812194:	18800526 	beq	r3,r2,8121ac <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812198:	e0fffc17 	ldw	r3,-16(fp)
  81219c:	e0bff617 	ldw	r2,-40(fp)
  8121a0:	1887c83a 	sub	r3,r3,r2
  8121a4:	e0ffff15 	stw	r3,-4(fp)
  8121a8:	00000906 	br	8121d0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8121ac:	e0bffe17 	ldw	r2,-8(fp)
  8121b0:	1090000c 	andi	r2,r2,16384
  8121b4:	1005003a 	cmpeq	r2,r2,zero
  8121b8:	1000031e 	bne	r2,zero,8121c8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8121bc:	00bffd44 	movi	r2,-11
  8121c0:	e0bfff15 	stw	r2,-4(fp)
  8121c4:	00000206 	br	8121d0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8121c8:	00bffec4 	movi	r2,-5
  8121cc:	e0bfff15 	stw	r2,-4(fp)
  8121d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8121d4:	e037883a 	mov	sp,fp
  8121d8:	dfc00117 	ldw	ra,4(sp)
  8121dc:	df000017 	ldw	fp,0(sp)
  8121e0:	dec00204 	addi	sp,sp,8
  8121e4:	f800283a 	ret

008121e8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8121e8:	defffa04 	addi	sp,sp,-24
  8121ec:	dfc00515 	stw	ra,20(sp)
  8121f0:	df000415 	stw	fp,16(sp)
  8121f4:	df000404 	addi	fp,sp,16
  8121f8:	e13ffe15 	stw	r4,-8(fp)
  8121fc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  812200:	e0bffe17 	ldw	r2,-8(fp)
  812204:	10800017 	ldw	r2,0(r2)
  812208:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81220c:	008003f4 	movhi	r2,15
  812210:	10909004 	addi	r2,r2,16960
  812214:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812218:	e0bffe17 	ldw	r2,-8(fp)
  81221c:	10800803 	ldbu	r2,32(r2)
  812220:	10803fcc 	andi	r2,r2,255
  812224:	1080201c 	xori	r2,r2,128
  812228:	10bfe004 	addi	r2,r2,-128
  81222c:	1004c03a 	cmpne	r2,r2,zero
  812230:	1000161e 	bne	r2,zero,81228c <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812234:	00000a06 	br	812260 <lcd_write_command+0x78>
    if (--i == 0)
  812238:	e0bffc17 	ldw	r2,-16(fp)
  81223c:	10bfffc4 	addi	r2,r2,-1
  812240:	e0bffc15 	stw	r2,-16(fp)
  812244:	e0bffc17 	ldw	r2,-16(fp)
  812248:	1004c03a 	cmpne	r2,r2,zero
  81224c:	1000041e 	bne	r2,zero,812260 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  812250:	e0fffe17 	ldw	r3,-8(fp)
  812254:	00800044 	movi	r2,1
  812258:	18800805 	stb	r2,32(r3)
      return;
  81225c:	00000b06 	br	81228c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812260:	e0bffd17 	ldw	r2,-12(fp)
  812264:	10800104 	addi	r2,r2,4
  812268:	10800037 	ldwio	r2,0(r2)
  81226c:	1080200c 	andi	r2,r2,128
  812270:	1004c03a 	cmpne	r2,r2,zero
  812274:	103ff01e 	bne	r2,zero,812238 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812278:	01001904 	movi	r4,100
  81227c:	081449c0 	call	81449c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  812280:	e0bffd17 	ldw	r2,-12(fp)
  812284:	e0ffff03 	ldbu	r3,-4(fp)
  812288:	10c00035 	stwio	r3,0(r2)
}
  81228c:	e037883a 	mov	sp,fp
  812290:	dfc00117 	ldw	ra,4(sp)
  812294:	df000017 	ldw	fp,0(sp)
  812298:	dec00204 	addi	sp,sp,8
  81229c:	f800283a 	ret

008122a0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8122a0:	defffa04 	addi	sp,sp,-24
  8122a4:	dfc00515 	stw	ra,20(sp)
  8122a8:	df000415 	stw	fp,16(sp)
  8122ac:	df000404 	addi	fp,sp,16
  8122b0:	e13ffe15 	stw	r4,-8(fp)
  8122b4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8122b8:	e0bffe17 	ldw	r2,-8(fp)
  8122bc:	10800017 	ldw	r2,0(r2)
  8122c0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8122c4:	008003f4 	movhi	r2,15
  8122c8:	10909004 	addi	r2,r2,16960
  8122cc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8122d0:	e0bffe17 	ldw	r2,-8(fp)
  8122d4:	10800803 	ldbu	r2,32(r2)
  8122d8:	10803fcc 	andi	r2,r2,255
  8122dc:	1080201c 	xori	r2,r2,128
  8122e0:	10bfe004 	addi	r2,r2,-128
  8122e4:	1004c03a 	cmpne	r2,r2,zero
  8122e8:	10001d1e 	bne	r2,zero,812360 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8122ec:	00000a06 	br	812318 <lcd_write_data+0x78>
    if (--i == 0)
  8122f0:	e0bffc17 	ldw	r2,-16(fp)
  8122f4:	10bfffc4 	addi	r2,r2,-1
  8122f8:	e0bffc15 	stw	r2,-16(fp)
  8122fc:	e0bffc17 	ldw	r2,-16(fp)
  812300:	1004c03a 	cmpne	r2,r2,zero
  812304:	1000041e 	bne	r2,zero,812318 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  812308:	e0fffe17 	ldw	r3,-8(fp)
  81230c:	00800044 	movi	r2,1
  812310:	18800805 	stb	r2,32(r3)
      return;
  812314:	00001206 	br	812360 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812318:	e0bffd17 	ldw	r2,-12(fp)
  81231c:	10800104 	addi	r2,r2,4
  812320:	10800037 	ldwio	r2,0(r2)
  812324:	1080200c 	andi	r2,r2,128
  812328:	1004c03a 	cmpne	r2,r2,zero
  81232c:	103ff01e 	bne	r2,zero,8122f0 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812330:	01001904 	movi	r4,100
  812334:	081449c0 	call	81449c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812338:	e0bffd17 	ldw	r2,-12(fp)
  81233c:	10800204 	addi	r2,r2,8
  812340:	e0ffff03 	ldbu	r3,-4(fp)
  812344:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  812348:	e0bffe17 	ldw	r2,-8(fp)
  81234c:	108008c3 	ldbu	r2,35(r2)
  812350:	10800044 	addi	r2,r2,1
  812354:	1007883a 	mov	r3,r2
  812358:	e0bffe17 	ldw	r2,-8(fp)
  81235c:	10c008c5 	stb	r3,35(r2)
}
  812360:	e037883a 	mov	sp,fp
  812364:	dfc00117 	ldw	ra,4(sp)
  812368:	df000017 	ldw	fp,0(sp)
  81236c:	dec00204 	addi	sp,sp,8
  812370:	f800283a 	ret

00812374 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  812374:	defffc04 	addi	sp,sp,-16
  812378:	dfc00315 	stw	ra,12(sp)
  81237c:	df000215 	stw	fp,8(sp)
  812380:	df000204 	addi	fp,sp,8
  812384:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812388:	e13fff17 	ldw	r4,-4(fp)
  81238c:	01400044 	movi	r5,1
  812390:	08121e80 	call	8121e8 <lcd_write_command>

  sp->x = 0;
  812394:	e0bfff17 	ldw	r2,-4(fp)
  812398:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81239c:	e0bfff17 	ldw	r2,-4(fp)
  8123a0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8123a4:	e0bfff17 	ldw	r2,-4(fp)
  8123a8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8123ac:	e03ffe15 	stw	zero,-8(fp)
  8123b0:	00001906 	br	812418 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8123b4:	e0bffe17 	ldw	r2,-8(fp)
  8123b8:	10801924 	muli	r2,r2,100
  8123bc:	10c01004 	addi	r3,r2,64
  8123c0:	e0bfff17 	ldw	r2,-4(fp)
  8123c4:	1889883a 	add	r4,r3,r2
  8123c8:	01400804 	movi	r5,32
  8123cc:	01801444 	movi	r6,81
  8123d0:	080332c0 	call	80332c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8123d4:	e0bffe17 	ldw	r2,-8(fp)
  8123d8:	10801924 	muli	r2,r2,100
  8123dc:	10c00c04 	addi	r3,r2,48
  8123e0:	e0bfff17 	ldw	r2,-4(fp)
  8123e4:	1889883a 	add	r4,r3,r2
  8123e8:	01400804 	movi	r5,32
  8123ec:	01800404 	movi	r6,16
  8123f0:	080332c0 	call	80332c <memset>
    sp->line[y].width = 0;
  8123f4:	e0bffe17 	ldw	r2,-8(fp)
  8123f8:	e0ffff17 	ldw	r3,-4(fp)
  8123fc:	10801924 	muli	r2,r2,100
  812400:	10c5883a 	add	r2,r2,r3
  812404:	10802404 	addi	r2,r2,144
  812408:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81240c:	e0bffe17 	ldw	r2,-8(fp)
  812410:	10800044 	addi	r2,r2,1
  812414:	e0bffe15 	stw	r2,-8(fp)
  812418:	e0bffe17 	ldw	r2,-8(fp)
  81241c:	10800090 	cmplti	r2,r2,2
  812420:	103fe41e 	bne	r2,zero,8123b4 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  812424:	e037883a 	mov	sp,fp
  812428:	dfc00117 	ldw	ra,4(sp)
  81242c:	df000017 	ldw	fp,0(sp)
  812430:	dec00204 	addi	sp,sp,8
  812434:	f800283a 	ret

00812438 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812438:	defff604 	addi	sp,sp,-40
  81243c:	dfc00915 	stw	ra,36(sp)
  812440:	df000815 	stw	fp,32(sp)
  812444:	dc000715 	stw	r16,28(sp)
  812448:	df000704 	addi	fp,sp,28
  81244c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812450:	e0bfff17 	ldw	r2,-4(fp)
  812454:	10800943 	ldbu	r2,37(r2)
  812458:	10803fcc 	andi	r2,r2,255
  81245c:	1080201c 	xori	r2,r2,128
  812460:	10bfe004 	addi	r2,r2,-128
  812464:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812468:	e03ffe15 	stw	zero,-8(fp)
  81246c:	00006406 	br	812600 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  812470:	e0bffe17 	ldw	r2,-8(fp)
  812474:	e0ffff17 	ldw	r3,-4(fp)
  812478:	10801924 	muli	r2,r2,100
  81247c:	10c5883a 	add	r2,r2,r3
  812480:	10802404 	addi	r2,r2,144
  812484:	10800043 	ldbu	r2,1(r2)
  812488:	10803fcc 	andi	r2,r2,255
  81248c:	1080201c 	xori	r2,r2,128
  812490:	10bfe004 	addi	r2,r2,-128
  812494:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812498:	e0bffe17 	ldw	r2,-8(fp)
  81249c:	e0ffff17 	ldw	r3,-4(fp)
  8124a0:	10801924 	muli	r2,r2,100
  8124a4:	10c5883a 	add	r2,r2,r3
  8124a8:	10802404 	addi	r2,r2,144
  8124ac:	10800083 	ldbu	r2,2(r2)
  8124b0:	10c03fcc 	andi	r3,r2,255
  8124b4:	e0bffc17 	ldw	r2,-16(fp)
  8124b8:	1885383a 	mul	r2,r3,r2
  8124bc:	1005d23a 	srai	r2,r2,8
  8124c0:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8124c4:	e0fffa17 	ldw	r3,-24(fp)
  8124c8:	e0bffb17 	ldw	r2,-20(fp)
  8124cc:	18800116 	blt	r3,r2,8124d4 <lcd_repaint_screen+0x9c>
      offset = 0;
  8124d0:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8124d4:	e03ffd15 	stw	zero,-12(fp)
  8124d8:	00004306 	br	8125e8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8124dc:	e43ffe17 	ldw	r16,-8(fp)
  8124e0:	e0fffd17 	ldw	r3,-12(fp)
  8124e4:	e0bffa17 	ldw	r2,-24(fp)
  8124e8:	1889883a 	add	r4,r3,r2
  8124ec:	e17ffb17 	ldw	r5,-20(fp)
  8124f0:	080fae00 	call	80fae0 <__modsi3>
  8124f4:	1009883a 	mov	r4,r2
  8124f8:	e0ffff17 	ldw	r3,-4(fp)
  8124fc:	80801924 	muli	r2,r16,100
  812500:	10c5883a 	add	r2,r2,r3
  812504:	1105883a 	add	r2,r2,r4
  812508:	10801004 	addi	r2,r2,64
  81250c:	10800003 	ldbu	r2,0(r2)
  812510:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812514:	e0bffe17 	ldw	r2,-8(fp)
  812518:	e13ffd17 	ldw	r4,-12(fp)
  81251c:	e0ffff17 	ldw	r3,-4(fp)
  812520:	10801924 	muli	r2,r2,100
  812524:	10c5883a 	add	r2,r2,r3
  812528:	1105883a 	add	r2,r2,r4
  81252c:	10800c04 	addi	r2,r2,48
  812530:	10800003 	ldbu	r2,0(r2)
  812534:	10c03fcc 	andi	r3,r2,255
  812538:	18c0201c 	xori	r3,r3,128
  81253c:	18ffe004 	addi	r3,r3,-128
  812540:	e0bff947 	ldb	r2,-27(fp)
  812544:	18802526 	beq	r3,r2,8125dc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812548:	e0fffe17 	ldw	r3,-8(fp)
  81254c:	d0a01504 	addi	r2,gp,-32684
  812550:	1885883a 	add	r2,r3,r2
  812554:	10800003 	ldbu	r2,0(r2)
  812558:	1007883a 	mov	r3,r2
  81255c:	e0bffd17 	ldw	r2,-12(fp)
  812560:	1885883a 	add	r2,r3,r2
  812564:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812568:	e0fff903 	ldbu	r3,-28(fp)
  81256c:	e0bfff17 	ldw	r2,-4(fp)
  812570:	108008c3 	ldbu	r2,35(r2)
  812574:	10803fcc 	andi	r2,r2,255
  812578:	1080201c 	xori	r2,r2,128
  81257c:	10bfe004 	addi	r2,r2,-128
  812580:	18800926 	beq	r3,r2,8125a8 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812584:	e0fff903 	ldbu	r3,-28(fp)
  812588:	00bfe004 	movi	r2,-128
  81258c:	1884b03a 	or	r2,r3,r2
  812590:	11403fcc 	andi	r5,r2,255
  812594:	e13fff17 	ldw	r4,-4(fp)
  812598:	08121e80 	call	8121e8 <lcd_write_command>
          sp->address = address;
  81259c:	e0fff903 	ldbu	r3,-28(fp)
  8125a0:	e0bfff17 	ldw	r2,-4(fp)
  8125a4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8125a8:	e0bff943 	ldbu	r2,-27(fp)
  8125ac:	11403fcc 	andi	r5,r2,255
  8125b0:	e13fff17 	ldw	r4,-4(fp)
  8125b4:	08122a00 	call	8122a0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8125b8:	e0bffe17 	ldw	r2,-8(fp)
  8125bc:	e13ffd17 	ldw	r4,-12(fp)
  8125c0:	e0ffff17 	ldw	r3,-4(fp)
  8125c4:	10801924 	muli	r2,r2,100
  8125c8:	10c5883a 	add	r2,r2,r3
  8125cc:	1105883a 	add	r2,r2,r4
  8125d0:	10c00c04 	addi	r3,r2,48
  8125d4:	e0bff943 	ldbu	r2,-27(fp)
  8125d8:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8125dc:	e0bffd17 	ldw	r2,-12(fp)
  8125e0:	10800044 	addi	r2,r2,1
  8125e4:	e0bffd15 	stw	r2,-12(fp)
  8125e8:	e0bffd17 	ldw	r2,-12(fp)
  8125ec:	10800410 	cmplti	r2,r2,16
  8125f0:	103fba1e 	bne	r2,zero,8124dc <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8125f4:	e0bffe17 	ldw	r2,-8(fp)
  8125f8:	10800044 	addi	r2,r2,1
  8125fc:	e0bffe15 	stw	r2,-8(fp)
  812600:	e0bffe17 	ldw	r2,-8(fp)
  812604:	10800090 	cmplti	r2,r2,2
  812608:	103f991e 	bne	r2,zero,812470 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  81260c:	e037883a 	mov	sp,fp
  812610:	dfc00217 	ldw	ra,8(sp)
  812614:	df000117 	ldw	fp,4(sp)
  812618:	dc000017 	ldw	r16,0(sp)
  81261c:	dec00304 	addi	sp,sp,12
  812620:	f800283a 	ret

00812624 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812624:	defffc04 	addi	sp,sp,-16
  812628:	dfc00315 	stw	ra,12(sp)
  81262c:	df000215 	stw	fp,8(sp)
  812630:	df000204 	addi	fp,sp,8
  812634:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812638:	e03ffe15 	stw	zero,-8(fp)
  81263c:	00001d06 	br	8126b4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812640:	e0bffe17 	ldw	r2,-8(fp)
  812644:	10800048 	cmpgei	r2,r2,1
  812648:	10000f1e 	bne	r2,zero,812688 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81264c:	e0bffe17 	ldw	r2,-8(fp)
  812650:	10801924 	muli	r2,r2,100
  812654:	10c01004 	addi	r3,r2,64
  812658:	e0bfff17 	ldw	r2,-4(fp)
  81265c:	1889883a 	add	r4,r3,r2
  812660:	e0bffe17 	ldw	r2,-8(fp)
  812664:	10800044 	addi	r2,r2,1
  812668:	10801924 	muli	r2,r2,100
  81266c:	10c01004 	addi	r3,r2,64
  812670:	e0bfff17 	ldw	r2,-4(fp)
  812674:	1885883a 	add	r2,r3,r2
  812678:	100b883a 	mov	r5,r2
  81267c:	01801404 	movi	r6,80
  812680:	08031ac0 	call	8031ac <memcpy>
  812684:	00000806 	br	8126a8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812688:	e0bffe17 	ldw	r2,-8(fp)
  81268c:	10801924 	muli	r2,r2,100
  812690:	10c01004 	addi	r3,r2,64
  812694:	e0bfff17 	ldw	r2,-4(fp)
  812698:	1889883a 	add	r4,r3,r2
  81269c:	01400804 	movi	r5,32
  8126a0:	01801404 	movi	r6,80
  8126a4:	080332c0 	call	80332c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126a8:	e0bffe17 	ldw	r2,-8(fp)
  8126ac:	10800044 	addi	r2,r2,1
  8126b0:	e0bffe15 	stw	r2,-8(fp)
  8126b4:	e0bffe17 	ldw	r2,-8(fp)
  8126b8:	10800090 	cmplti	r2,r2,2
  8126bc:	103fe01e 	bne	r2,zero,812640 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8126c0:	e0bfff17 	ldw	r2,-4(fp)
  8126c4:	10800883 	ldbu	r2,34(r2)
  8126c8:	10bfffc4 	addi	r2,r2,-1
  8126cc:	1007883a 	mov	r3,r2
  8126d0:	e0bfff17 	ldw	r2,-4(fp)
  8126d4:	10c00885 	stb	r3,34(r2)
}
  8126d8:	e037883a 	mov	sp,fp
  8126dc:	dfc00117 	ldw	ra,4(sp)
  8126e0:	df000017 	ldw	fp,0(sp)
  8126e4:	dec00204 	addi	sp,sp,8
  8126e8:	f800283a 	ret

008126ec <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8126ec:	defff804 	addi	sp,sp,-32
  8126f0:	dfc00715 	stw	ra,28(sp)
  8126f4:	df000615 	stw	fp,24(sp)
  8126f8:	df000604 	addi	fp,sp,24
  8126fc:	e13ffd15 	stw	r4,-12(fp)
  812700:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  812704:	e03ffc15 	stw	zero,-16(fp)
  812708:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  81270c:	e0bffd17 	ldw	r2,-12(fp)
  812710:	10800a03 	ldbu	r2,40(r2)
  812714:	10803fcc 	andi	r2,r2,255
  812718:	1080201c 	xori	r2,r2,128
  81271c:	10bfe004 	addi	r2,r2,-128
  812720:	108016d8 	cmpnei	r2,r2,91
  812724:	1000491e 	bne	r2,zero,81284c <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  812728:	e0bffd17 	ldw	r2,-12(fp)
  81272c:	10800a04 	addi	r2,r2,40
  812730:	10800044 	addi	r2,r2,1
  812734:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  812738:	00000d06 	br	812770 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81273c:	e0bffc17 	ldw	r2,-16(fp)
  812740:	10c002a4 	muli	r3,r2,10
  812744:	e0bffa17 	ldw	r2,-24(fp)
  812748:	10800003 	ldbu	r2,0(r2)
  81274c:	10803fcc 	andi	r2,r2,255
  812750:	1080201c 	xori	r2,r2,128
  812754:	10bfe004 	addi	r2,r2,-128
  812758:	1885883a 	add	r2,r3,r2
  81275c:	10bff404 	addi	r2,r2,-48
  812760:	e0bffc15 	stw	r2,-16(fp)
  812764:	e0bffa17 	ldw	r2,-24(fp)
  812768:	10800044 	addi	r2,r2,1
  81276c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812770:	e0bffa17 	ldw	r2,-24(fp)
  812774:	10800003 	ldbu	r2,0(r2)
  812778:	10803fcc 	andi	r2,r2,255
  81277c:	1080201c 	xori	r2,r2,128
  812780:	10bfe004 	addi	r2,r2,-128
  812784:	1007883a 	mov	r3,r2
  812788:	00802074 	movhi	r2,129
  81278c:	109b9b04 	addi	r2,r2,28268
  812790:	10800017 	ldw	r2,0(r2)
  812794:	1885883a 	add	r2,r3,r2
  812798:	10800003 	ldbu	r2,0(r2)
  81279c:	10803fcc 	andi	r2,r2,255
  8127a0:	1080010c 	andi	r2,r2,4
  8127a4:	1004c03a 	cmpne	r2,r2,zero
  8127a8:	103fe41e 	bne	r2,zero,81273c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8127ac:	e0bffa17 	ldw	r2,-24(fp)
  8127b0:	10800003 	ldbu	r2,0(r2)
  8127b4:	10803fcc 	andi	r2,r2,255
  8127b8:	1080201c 	xori	r2,r2,128
  8127bc:	10bfe004 	addi	r2,r2,-128
  8127c0:	10800ed8 	cmpnei	r2,r2,59
  8127c4:	1000231e 	bne	r2,zero,812854 <lcd_handle_escape+0x168>
    {
      ptr++;
  8127c8:	e0bffa17 	ldw	r2,-24(fp)
  8127cc:	10800044 	addi	r2,r2,1
  8127d0:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  8127d4:	00000d06 	br	81280c <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8127d8:	e0bffb17 	ldw	r2,-20(fp)
  8127dc:	10c002a4 	muli	r3,r2,10
  8127e0:	e0bffa17 	ldw	r2,-24(fp)
  8127e4:	10800003 	ldbu	r2,0(r2)
  8127e8:	10803fcc 	andi	r2,r2,255
  8127ec:	1080201c 	xori	r2,r2,128
  8127f0:	10bfe004 	addi	r2,r2,-128
  8127f4:	1885883a 	add	r2,r3,r2
  8127f8:	10bff404 	addi	r2,r2,-48
  8127fc:	e0bffb15 	stw	r2,-20(fp)
  812800:	e0bffa17 	ldw	r2,-24(fp)
  812804:	10800044 	addi	r2,r2,1
  812808:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  81280c:	e0bffa17 	ldw	r2,-24(fp)
  812810:	10800003 	ldbu	r2,0(r2)
  812814:	10803fcc 	andi	r2,r2,255
  812818:	1080201c 	xori	r2,r2,128
  81281c:	10bfe004 	addi	r2,r2,-128
  812820:	1007883a 	mov	r3,r2
  812824:	00802074 	movhi	r2,129
  812828:	109b9b04 	addi	r2,r2,28268
  81282c:	10800017 	ldw	r2,0(r2)
  812830:	1885883a 	add	r2,r3,r2
  812834:	10800003 	ldbu	r2,0(r2)
  812838:	10803fcc 	andi	r2,r2,255
  81283c:	1080010c 	andi	r2,r2,4
  812840:	1004c03a 	cmpne	r2,r2,zero
  812844:	103fe41e 	bne	r2,zero,8127d8 <lcd_handle_escape+0xec>
  812848:	00000206 	br	812854 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  81284c:	00bfffc4 	movi	r2,-1
  812850:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812854:	e0bffe07 	ldb	r2,-8(fp)
  812858:	e0bfff15 	stw	r2,-4(fp)
  81285c:	e0ffff17 	ldw	r3,-4(fp)
  812860:	188012a0 	cmpeqi	r2,r3,74
  812864:	10002f1e 	bne	r2,zero,812924 <lcd_handle_escape+0x238>
  812868:	e0ffff17 	ldw	r3,-4(fp)
  81286c:	188012c8 	cmpgei	r2,r3,75
  812870:	1000041e 	bne	r2,zero,812884 <lcd_handle_escape+0x198>
  812874:	e0ffff17 	ldw	r3,-4(fp)
  812878:	18801220 	cmpeqi	r2,r3,72
  81287c:	1000081e 	bne	r2,zero,8128a0 <lcd_handle_escape+0x1b4>
  812880:	00004906 	br	8129a8 <lcd_handle_escape+0x2bc>
  812884:	e0ffff17 	ldw	r3,-4(fp)
  812888:	188012e0 	cmpeqi	r2,r3,75
  81288c:	10002b1e 	bne	r2,zero,81293c <lcd_handle_escape+0x250>
  812890:	e0ffff17 	ldw	r3,-4(fp)
  812894:	188019a0 	cmpeqi	r2,r3,102
  812898:	1000011e 	bne	r2,zero,8128a0 <lcd_handle_escape+0x1b4>
  81289c:	00004206 	br	8129a8 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8128a0:	e0bffb17 	ldw	r2,-20(fp)
  8128a4:	10800050 	cmplti	r2,r2,1
  8128a8:	1000051e 	bne	r2,zero,8128c0 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  8128ac:	e0bffb17 	ldw	r2,-20(fp)
  8128b0:	10bfffc4 	addi	r2,r2,-1
  8128b4:	1007883a 	mov	r3,r2
  8128b8:	e0bffd17 	ldw	r2,-12(fp)
  8128bc:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8128c0:	e0bffc17 	ldw	r2,-16(fp)
  8128c4:	10800050 	cmplti	r2,r2,1
  8128c8:	1000371e 	bne	r2,zero,8129a8 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  8128cc:	e0bffc17 	ldw	r2,-16(fp)
  8128d0:	10bfffc4 	addi	r2,r2,-1
  8128d4:	1007883a 	mov	r3,r2
  8128d8:	e0bffd17 	ldw	r2,-12(fp)
  8128dc:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8128e0:	e0bffd17 	ldw	r2,-12(fp)
  8128e4:	10800883 	ldbu	r2,34(r2)
  8128e8:	10803fcc 	andi	r2,r2,255
  8128ec:	10800170 	cmpltui	r2,r2,5
  8128f0:	1000061e 	bne	r2,zero,81290c <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  8128f4:	e0fffd17 	ldw	r3,-12(fp)
  8128f8:	00800104 	movi	r2,4
  8128fc:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812900:	00000206 	br	81290c <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  812904:	e13ffd17 	ldw	r4,-12(fp)
  812908:	08126240 	call	812624 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  81290c:	e0bffd17 	ldw	r2,-12(fp)
  812910:	10800883 	ldbu	r2,34(r2)
  812914:	10803fcc 	andi	r2,r2,255
  812918:	108000e8 	cmpgeui	r2,r2,3
  81291c:	103ff91e 	bne	r2,zero,812904 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  812920:	00002106 	br	8129a8 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812924:	e0bffc17 	ldw	r2,-16(fp)
  812928:	10800098 	cmpnei	r2,r2,2
  81292c:	10001e1e 	bne	r2,zero,8129a8 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  812930:	e13ffd17 	ldw	r4,-12(fp)
  812934:	08123740 	call	812374 <lcd_clear_screen>
    break;
  812938:	00001b06 	br	8129a8 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  81293c:	e0bffc17 	ldw	r2,-16(fp)
  812940:	10800048 	cmpgei	r2,r2,1
  812944:	1000181e 	bne	r2,zero,8129a8 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812948:	e0bffd17 	ldw	r2,-12(fp)
  81294c:	10800843 	ldbu	r2,33(r2)
  812950:	10803fcc 	andi	r2,r2,255
  812954:	10801428 	cmpgeui	r2,r2,80
  812958:	1000131e 	bne	r2,zero,8129a8 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  81295c:	e0bffd17 	ldw	r2,-12(fp)
  812960:	10800883 	ldbu	r2,34(r2)
  812964:	10803fcc 	andi	r2,r2,255
  812968:	10801924 	muli	r2,r2,100
  81296c:	10c01004 	addi	r3,r2,64
  812970:	e0bffd17 	ldw	r2,-12(fp)
  812974:	1887883a 	add	r3,r3,r2
  812978:	e0bffd17 	ldw	r2,-12(fp)
  81297c:	10800843 	ldbu	r2,33(r2)
  812980:	10803fcc 	andi	r2,r2,255
  812984:	1889883a 	add	r4,r3,r2
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10800843 	ldbu	r2,33(r2)
  812990:	10c03fcc 	andi	r3,r2,255
  812994:	00801404 	movi	r2,80
  812998:	10c5c83a 	sub	r2,r2,r3
  81299c:	100d883a 	mov	r6,r2
  8129a0:	01400804 	movi	r5,32
  8129a4:	080332c0 	call	80332c <memset>
    }
    break;
  }
}
  8129a8:	e037883a 	mov	sp,fp
  8129ac:	dfc00117 	ldw	ra,4(sp)
  8129b0:	df000017 	ldw	fp,0(sp)
  8129b4:	dec00204 	addi	sp,sp,8
  8129b8:	f800283a 	ret

008129bc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8129bc:	defff204 	addi	sp,sp,-56
  8129c0:	dfc00d15 	stw	ra,52(sp)
  8129c4:	df000c15 	stw	fp,48(sp)
  8129c8:	dc000b15 	stw	r16,44(sp)
  8129cc:	df000b04 	addi	fp,sp,44
  8129d0:	e13ffc15 	stw	r4,-16(fp)
  8129d4:	e17ffd15 	stw	r5,-12(fp)
  8129d8:	e1bffe15 	stw	r6,-8(fp)
  8129dc:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8129e0:	e0bffe17 	ldw	r2,-8(fp)
  8129e4:	1007883a 	mov	r3,r2
  8129e8:	e0bffd17 	ldw	r2,-12(fp)
  8129ec:	10c5883a 	add	r2,r2,r3
  8129f0:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8129f4:	e0fffc17 	ldw	r3,-16(fp)
  8129f8:	00800044 	movi	r2,1
  8129fc:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812a00:	0000a206 	br	812c8c <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  812a04:	e0bffd17 	ldw	r2,-12(fp)
  812a08:	10800003 	ldbu	r2,0(r2)
  812a0c:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812a10:	e0bffc17 	ldw	r2,-16(fp)
  812a14:	10800903 	ldbu	r2,36(r2)
  812a18:	10803fcc 	andi	r2,r2,255
  812a1c:	1080201c 	xori	r2,r2,128
  812a20:	10bfe004 	addi	r2,r2,-128
  812a24:	1004803a 	cmplt	r2,r2,zero
  812a28:	10003b1e 	bne	r2,zero,812b18 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  812a2c:	e0bffc17 	ldw	r2,-16(fp)
  812a30:	10800903 	ldbu	r2,36(r2)
  812a34:	10803fcc 	andi	r2,r2,255
  812a38:	1080201c 	xori	r2,r2,128
  812a3c:	10bfe004 	addi	r2,r2,-128
  812a40:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812a44:	e0bff717 	ldw	r2,-36(fp)
  812a48:	1004c03a 	cmpne	r2,r2,zero
  812a4c:	1000031e 	bne	r2,zero,812a5c <altera_avalon_lcd_16207_write+0xa0>
  812a50:	e0bff807 	ldb	r2,-32(fp)
  812a54:	108016d8 	cmpnei	r2,r2,91
  812a58:	1000111e 	bne	r2,zero,812aa0 <altera_avalon_lcd_16207_write+0xe4>
  812a5c:	e0bff717 	ldw	r2,-36(fp)
  812a60:	1005003a 	cmpeq	r2,r2,zero
  812a64:	10001a1e 	bne	r2,zero,812ad0 <altera_avalon_lcd_16207_write+0x114>
  812a68:	e0bff807 	ldb	r2,-32(fp)
  812a6c:	1007883a 	mov	r3,r2
  812a70:	00802074 	movhi	r2,129
  812a74:	109b9b04 	addi	r2,r2,28268
  812a78:	10800017 	ldw	r2,0(r2)
  812a7c:	1885883a 	add	r2,r3,r2
  812a80:	10800003 	ldbu	r2,0(r2)
  812a84:	10803fcc 	andi	r2,r2,255
  812a88:	1080010c 	andi	r2,r2,4
  812a8c:	1004c03a 	cmpne	r2,r2,zero
  812a90:	10000f1e 	bne	r2,zero,812ad0 <altera_avalon_lcd_16207_write+0x114>
  812a94:	e0bff807 	ldb	r2,-32(fp)
  812a98:	10800ee0 	cmpeqi	r2,r2,59
  812a9c:	10000c1e 	bne	r2,zero,812ad0 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812aa0:	e0fff717 	ldw	r3,-36(fp)
  812aa4:	e0bffc17 	ldw	r2,-16(fp)
  812aa8:	1885883a 	add	r2,r3,r2
  812aac:	10800a04 	addi	r2,r2,40
  812ab0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812ab4:	e17ff807 	ldb	r5,-32(fp)
  812ab8:	e13ffc17 	ldw	r4,-16(fp)
  812abc:	08126ec0 	call	8126ec <lcd_handle_escape>

        sp->esccount = -1;
  812ac0:	e0fffc17 	ldw	r3,-16(fp)
  812ac4:	00bfffc4 	movi	r2,-1
  812ac8:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812acc:	00006c06 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812ad0:	e0bffc17 	ldw	r2,-16(fp)
  812ad4:	10800903 	ldbu	r2,36(r2)
  812ad8:	10803fcc 	andi	r2,r2,255
  812adc:	108001e8 	cmpgeui	r2,r2,7
  812ae0:	1000671e 	bne	r2,zero,812c80 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  812ae4:	e0fff717 	ldw	r3,-36(fp)
  812ae8:	e0bffc17 	ldw	r2,-16(fp)
  812aec:	1885883a 	add	r2,r3,r2
  812af0:	10c00a04 	addi	r3,r2,40
  812af4:	e0bff803 	ldbu	r2,-32(fp)
  812af8:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812afc:	e0bffc17 	ldw	r2,-16(fp)
  812b00:	10800903 	ldbu	r2,36(r2)
  812b04:	10800044 	addi	r2,r2,1
  812b08:	1007883a 	mov	r3,r2
  812b0c:	e0bffc17 	ldw	r2,-16(fp)
  812b10:	10c00905 	stb	r3,36(r2)
  812b14:	00005a06 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  812b18:	e0bff807 	ldb	r2,-32(fp)
  812b1c:	108006d8 	cmpnei	r2,r2,27
  812b20:	1000031e 	bne	r2,zero,812b30 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  812b24:	e0bffc17 	ldw	r2,-16(fp)
  812b28:	10000905 	stb	zero,36(r2)
  812b2c:	00005406 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  812b30:	e0bff807 	ldb	r2,-32(fp)
  812b34:	10800358 	cmpnei	r2,r2,13
  812b38:	1000031e 	bne	r2,zero,812b48 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  812b3c:	e0bffc17 	ldw	r2,-16(fp)
  812b40:	10000845 	stb	zero,33(r2)
  812b44:	00004e06 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  812b48:	e0bff807 	ldb	r2,-32(fp)
  812b4c:	10800298 	cmpnei	r2,r2,10
  812b50:	1000101e 	bne	r2,zero,812b94 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  812b54:	e0bffc17 	ldw	r2,-16(fp)
  812b58:	10000845 	stb	zero,33(r2)
      sp->y++;
  812b5c:	e0bffc17 	ldw	r2,-16(fp)
  812b60:	10800883 	ldbu	r2,34(r2)
  812b64:	10800044 	addi	r2,r2,1
  812b68:	1007883a 	mov	r3,r2
  812b6c:	e0bffc17 	ldw	r2,-16(fp)
  812b70:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812b74:	e0bffc17 	ldw	r2,-16(fp)
  812b78:	10800883 	ldbu	r2,34(r2)
  812b7c:	10803fcc 	andi	r2,r2,255
  812b80:	108000f0 	cmpltui	r2,r2,3
  812b84:	10003e1e 	bne	r2,zero,812c80 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  812b88:	e13ffc17 	ldw	r4,-16(fp)
  812b8c:	08126240 	call	812624 <lcd_scroll_up>
  812b90:	00003b06 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  812b94:	e0bff807 	ldb	r2,-32(fp)
  812b98:	10800218 	cmpnei	r2,r2,8
  812b9c:	10000c1e 	bne	r2,zero,812bd0 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  812ba0:	e0bffc17 	ldw	r2,-16(fp)
  812ba4:	10800843 	ldbu	r2,33(r2)
  812ba8:	10803fcc 	andi	r2,r2,255
  812bac:	1005003a 	cmpeq	r2,r2,zero
  812bb0:	1000331e 	bne	r2,zero,812c80 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  812bb4:	e0bffc17 	ldw	r2,-16(fp)
  812bb8:	10800843 	ldbu	r2,33(r2)
  812bbc:	10bfffc4 	addi	r2,r2,-1
  812bc0:	1007883a 	mov	r3,r2
  812bc4:	e0bffc17 	ldw	r2,-16(fp)
  812bc8:	10c00845 	stb	r3,33(r2)
  812bcc:	00002c06 	br	812c80 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  812bd0:	e0bff807 	ldb	r2,-32(fp)
  812bd4:	1007883a 	mov	r3,r2
  812bd8:	00802074 	movhi	r2,129
  812bdc:	109b9b04 	addi	r2,r2,28268
  812be0:	10800017 	ldw	r2,0(r2)
  812be4:	1885883a 	add	r2,r3,r2
  812be8:	10800003 	ldbu	r2,0(r2)
  812bec:	10803fcc 	andi	r2,r2,255
  812bf0:	1080201c 	xori	r2,r2,128
  812bf4:	10bfe004 	addi	r2,r2,-128
  812bf8:	108025cc 	andi	r2,r2,151
  812bfc:	1005003a 	cmpeq	r2,r2,zero
  812c00:	10001f1e 	bne	r2,zero,812c80 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812c04:	e0bffc17 	ldw	r2,-16(fp)
  812c08:	10800883 	ldbu	r2,34(r2)
  812c0c:	10803fcc 	andi	r2,r2,255
  812c10:	108000b0 	cmpltui	r2,r2,2
  812c14:	1000021e 	bne	r2,zero,812c20 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  812c18:	e13ffc17 	ldw	r4,-16(fp)
  812c1c:	08126240 	call	812624 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812c20:	e0bffc17 	ldw	r2,-16(fp)
  812c24:	10800843 	ldbu	r2,33(r2)
  812c28:	10803fcc 	andi	r2,r2,255
  812c2c:	10801428 	cmpgeui	r2,r2,80
  812c30:	10000d1e 	bne	r2,zero,812c68 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  812c34:	e0bffc17 	ldw	r2,-16(fp)
  812c38:	10800883 	ldbu	r2,34(r2)
  812c3c:	11003fcc 	andi	r4,r2,255
  812c40:	e0bffc17 	ldw	r2,-16(fp)
  812c44:	10800843 	ldbu	r2,33(r2)
  812c48:	11403fcc 	andi	r5,r2,255
  812c4c:	e0fffc17 	ldw	r3,-16(fp)
  812c50:	20801924 	muli	r2,r4,100
  812c54:	10c5883a 	add	r2,r2,r3
  812c58:	1145883a 	add	r2,r2,r5
  812c5c:	10c01004 	addi	r3,r2,64
  812c60:	e0bff803 	ldbu	r2,-32(fp)
  812c64:	18800005 	stb	r2,0(r3)

      sp->x++;
  812c68:	e0bffc17 	ldw	r2,-16(fp)
  812c6c:	10800843 	ldbu	r2,33(r2)
  812c70:	10800044 	addi	r2,r2,1
  812c74:	1007883a 	mov	r3,r2
  812c78:	e0bffc17 	ldw	r2,-16(fp)
  812c7c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812c80:	e0bffd17 	ldw	r2,-12(fp)
  812c84:	10800044 	addi	r2,r2,1
  812c88:	e0bffd15 	stw	r2,-12(fp)
  812c8c:	e0fffd17 	ldw	r3,-12(fp)
  812c90:	e0bffb17 	ldw	r2,-20(fp)
  812c94:	18bf5b36 	bltu	r3,r2,812a04 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812c98:	00800404 	movi	r2,16
  812c9c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ca0:	e03ffa15 	stw	zero,-24(fp)
  812ca4:	00003606 	br	812d80 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812ca8:	00801404 	movi	r2,80
  812cac:	e0bff615 	stw	r2,-40(fp)
  812cb0:	00001106 	br	812cf8 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  812cb4:	e13ffa17 	ldw	r4,-24(fp)
  812cb8:	e0bff617 	ldw	r2,-40(fp)
  812cbc:	117fffc4 	addi	r5,r2,-1
  812cc0:	e0fffc17 	ldw	r3,-16(fp)
  812cc4:	20801924 	muli	r2,r4,100
  812cc8:	10c5883a 	add	r2,r2,r3
  812ccc:	1145883a 	add	r2,r2,r5
  812cd0:	10801004 	addi	r2,r2,64
  812cd4:	10800003 	ldbu	r2,0(r2)
  812cd8:	10803fcc 	andi	r2,r2,255
  812cdc:	1080201c 	xori	r2,r2,128
  812ce0:	10bfe004 	addi	r2,r2,-128
  812ce4:	10800818 	cmpnei	r2,r2,32
  812ce8:	1000061e 	bne	r2,zero,812d04 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812cec:	e0bff617 	ldw	r2,-40(fp)
  812cf0:	10bfffc4 	addi	r2,r2,-1
  812cf4:	e0bff615 	stw	r2,-40(fp)
  812cf8:	e0bff617 	ldw	r2,-40(fp)
  812cfc:	10800048 	cmpgei	r2,r2,1
  812d00:	103fec1e 	bne	r2,zero,812cb4 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812d04:	e0bff617 	ldw	r2,-40(fp)
  812d08:	10800448 	cmpgei	r2,r2,17
  812d0c:	1000031e 	bne	r2,zero,812d1c <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  812d10:	00800404 	movi	r2,16
  812d14:	e0bff615 	stw	r2,-40(fp)
  812d18:	00000306 	br	812d28 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  812d1c:	e0bff617 	ldw	r2,-40(fp)
  812d20:	10800044 	addi	r2,r2,1
  812d24:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812d28:	e13ffa17 	ldw	r4,-24(fp)
  812d2c:	e0bff617 	ldw	r2,-40(fp)
  812d30:	100b883a 	mov	r5,r2
  812d34:	e0fffc17 	ldw	r3,-16(fp)
  812d38:	20801924 	muli	r2,r4,100
  812d3c:	10c5883a 	add	r2,r2,r3
  812d40:	10802404 	addi	r2,r2,144
  812d44:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  812d48:	e0fff917 	ldw	r3,-28(fp)
  812d4c:	e0bff617 	ldw	r2,-40(fp)
  812d50:	1880020e 	bge	r3,r2,812d5c <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  812d54:	e0bff617 	ldw	r2,-40(fp)
  812d58:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812d5c:	e0bffa17 	ldw	r2,-24(fp)
  812d60:	e0fffc17 	ldw	r3,-16(fp)
  812d64:	10801924 	muli	r2,r2,100
  812d68:	10c5883a 	add	r2,r2,r3
  812d6c:	10802404 	addi	r2,r2,144
  812d70:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812d74:	e0bffa17 	ldw	r2,-24(fp)
  812d78:	10800044 	addi	r2,r2,1
  812d7c:	e0bffa15 	stw	r2,-24(fp)
  812d80:	e0bffa17 	ldw	r2,-24(fp)
  812d84:	10800090 	cmplti	r2,r2,2
  812d88:	103fc71e 	bne	r2,zero,812ca8 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812d8c:	e0bff917 	ldw	r2,-28(fp)
  812d90:	10800448 	cmpgei	r2,r2,17
  812d94:	1000031e 	bne	r2,zero,812da4 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  812d98:	e0bffc17 	ldw	r2,-16(fp)
  812d9c:	10000985 	stb	zero,38(r2)
  812da0:	00002d06 	br	812e58 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  812da4:	e0bff917 	ldw	r2,-28(fp)
  812da8:	1085883a 	add	r2,r2,r2
  812dac:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  812db0:	e0bff917 	ldw	r2,-28(fp)
  812db4:	1007883a 	mov	r3,r2
  812db8:	e0bffc17 	ldw	r2,-16(fp)
  812dbc:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812dc0:	e03ffa15 	stw	zero,-24(fp)
  812dc4:	00002106 	br	812e4c <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812dc8:	e0bffa17 	ldw	r2,-24(fp)
  812dcc:	e0fffc17 	ldw	r3,-16(fp)
  812dd0:	10801924 	muli	r2,r2,100
  812dd4:	10c5883a 	add	r2,r2,r3
  812dd8:	10802404 	addi	r2,r2,144
  812ddc:	10800043 	ldbu	r2,1(r2)
  812de0:	10803fcc 	andi	r2,r2,255
  812de4:	1080201c 	xori	r2,r2,128
  812de8:	10bfe004 	addi	r2,r2,-128
  812dec:	10800450 	cmplti	r2,r2,17
  812df0:	1000131e 	bne	r2,zero,812e40 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812df4:	e43ffa17 	ldw	r16,-24(fp)
  812df8:	e0bffa17 	ldw	r2,-24(fp)
  812dfc:	e0fffc17 	ldw	r3,-16(fp)
  812e00:	10801924 	muli	r2,r2,100
  812e04:	10c5883a 	add	r2,r2,r3
  812e08:	10802404 	addi	r2,r2,144
  812e0c:	10800043 	ldbu	r2,1(r2)
  812e10:	10803fcc 	andi	r2,r2,255
  812e14:	1080201c 	xori	r2,r2,128
  812e18:	10bfe004 	addi	r2,r2,-128
  812e1c:	1008923a 	slli	r4,r2,8
  812e20:	e17ff917 	ldw	r5,-28(fp)
  812e24:	080fa800 	call	80fa80 <__divsi3>
  812e28:	1009883a 	mov	r4,r2
  812e2c:	e0fffc17 	ldw	r3,-16(fp)
  812e30:	80801924 	muli	r2,r16,100
  812e34:	10c5883a 	add	r2,r2,r3
  812e38:	10802404 	addi	r2,r2,144
  812e3c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812e40:	e0bffa17 	ldw	r2,-24(fp)
  812e44:	10800044 	addi	r2,r2,1
  812e48:	e0bffa15 	stw	r2,-24(fp)
  812e4c:	e0bffa17 	ldw	r2,-24(fp)
  812e50:	10800090 	cmplti	r2,r2,2
  812e54:	103fdc1e 	bne	r2,zero,812dc8 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812e58:	e0bffc17 	ldw	r2,-16(fp)
  812e5c:	10800943 	ldbu	r2,37(r2)
  812e60:	10803fcc 	andi	r2,r2,255
  812e64:	1080201c 	xori	r2,r2,128
  812e68:	10bfe004 	addi	r2,r2,-128
  812e6c:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  812e70:	e13ffc17 	ldw	r4,-16(fp)
  812e74:	08124380 	call	812438 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812e78:	e0bffc17 	ldw	r2,-16(fp)
  812e7c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812e80:	e0bffc17 	ldw	r2,-16(fp)
  812e84:	10800943 	ldbu	r2,37(r2)
  812e88:	10c03fcc 	andi	r3,r2,255
  812e8c:	18c0201c 	xori	r3,r3,128
  812e90:	18ffe004 	addi	r3,r3,-128
  812e94:	e0bff517 	ldw	r2,-44(fp)
  812e98:	18800426 	beq	r3,r2,812eac <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812e9c:	e0fffc17 	ldw	r3,-16(fp)
  812ea0:	00800044 	movi	r2,1
  812ea4:	188009c5 	stb	r2,39(r3)
  }
  812ea8:	003feb06 	br	812e58 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812eac:	e0bffe17 	ldw	r2,-8(fp)
}
  812eb0:	e037883a 	mov	sp,fp
  812eb4:	dfc00217 	ldw	ra,8(sp)
  812eb8:	df000117 	ldw	fp,4(sp)
  812ebc:	dc000017 	ldw	r16,0(sp)
  812ec0:	dec00304 	addi	sp,sp,12
  812ec4:	f800283a 	ret

00812ec8 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812ec8:	defffc04 	addi	sp,sp,-16
  812ecc:	dfc00315 	stw	ra,12(sp)
  812ed0:	df000215 	stw	fp,8(sp)
  812ed4:	df000204 	addi	fp,sp,8
  812ed8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812edc:	e0bfff17 	ldw	r2,-4(fp)
  812ee0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812ee4:	e0bffe17 	ldw	r2,-8(fp)
  812ee8:	10800943 	ldbu	r2,37(r2)
  812eec:	10803fcc 	andi	r2,r2,255
  812ef0:	1080201c 	xori	r2,r2,128
  812ef4:	10bfe004 	addi	r2,r2,-128
  812ef8:	10c00044 	addi	r3,r2,1
  812efc:	e0bffe17 	ldw	r2,-8(fp)
  812f00:	10800983 	ldbu	r2,38(r2)
  812f04:	10803fcc 	andi	r2,r2,255
  812f08:	1080201c 	xori	r2,r2,128
  812f0c:	10bfe004 	addi	r2,r2,-128
  812f10:	18800316 	blt	r3,r2,812f20 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  812f14:	e0bffe17 	ldw	r2,-8(fp)
  812f18:	10000945 	stb	zero,37(r2)
  812f1c:	00000606 	br	812f38 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812f20:	e0bffe17 	ldw	r2,-8(fp)
  812f24:	10800943 	ldbu	r2,37(r2)
  812f28:	10800044 	addi	r2,r2,1
  812f2c:	1007883a 	mov	r3,r2
  812f30:	e0bffe17 	ldw	r2,-8(fp)
  812f34:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  812f38:	e0bffe17 	ldw	r2,-8(fp)
  812f3c:	10800983 	ldbu	r2,38(r2)
  812f40:	10803fcc 	andi	r2,r2,255
  812f44:	1080201c 	xori	r2,r2,128
  812f48:	10bfe004 	addi	r2,r2,-128
  812f4c:	10800050 	cmplti	r2,r2,1
  812f50:	1000091e 	bne	r2,zero,812f78 <alt_lcd_16207_timeout+0xb0>
  812f54:	e0bffe17 	ldw	r2,-8(fp)
  812f58:	108009c3 	ldbu	r2,39(r2)
  812f5c:	10803fcc 	andi	r2,r2,255
  812f60:	1080201c 	xori	r2,r2,128
  812f64:	10bfe004 	addi	r2,r2,-128
  812f68:	1004c03a 	cmpne	r2,r2,zero
  812f6c:	1000021e 	bne	r2,zero,812f78 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  812f70:	e13ffe17 	ldw	r4,-8(fp)
  812f74:	08124380 	call	812438 <lcd_repaint_screen>

  return sp->period;
  812f78:	e0bffe17 	ldw	r2,-8(fp)
  812f7c:	10800717 	ldw	r2,28(r2)
}
  812f80:	e037883a 	mov	sp,fp
  812f84:	dfc00117 	ldw	ra,4(sp)
  812f88:	df000017 	ldw	fp,0(sp)
  812f8c:	dec00204 	addi	sp,sp,8
  812f90:	f800283a 	ret

00812f94 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  812f94:	defffc04 	addi	sp,sp,-16
  812f98:	dfc00315 	stw	ra,12(sp)
  812f9c:	df000215 	stw	fp,8(sp)
  812fa0:	df000204 	addi	fp,sp,8
  812fa4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  812fa8:	e0bfff17 	ldw	r2,-4(fp)
  812fac:	10800017 	ldw	r2,0(r2)
  812fb0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  812fb4:	e0bfff17 	ldw	r2,-4(fp)
  812fb8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  812fbc:	010ea604 	movi	r4,15000
  812fc0:	081449c0 	call	81449c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812fc4:	e0bffe17 	ldw	r2,-8(fp)
  812fc8:	1007883a 	mov	r3,r2
  812fcc:	00800c04 	movi	r2,48
  812fd0:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  812fd4:	01040104 	movi	r4,4100
  812fd8:	081449c0 	call	81449c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812fdc:	e0bffe17 	ldw	r2,-8(fp)
  812fe0:	1007883a 	mov	r3,r2
  812fe4:	00800c04 	movi	r2,48
  812fe8:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  812fec:	0100fa04 	movi	r4,1000
  812ff0:	081449c0 	call	81449c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812ff4:	e0bffe17 	ldw	r2,-8(fp)
  812ff8:	1007883a 	mov	r3,r2
  812ffc:	00800c04 	movi	r2,48
  813000:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  813004:	e13fff17 	ldw	r4,-4(fp)
  813008:	01400e04 	movi	r5,56
  81300c:	08121e80 	call	8121e8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  813010:	e13fff17 	ldw	r4,-4(fp)
  813014:	01400204 	movi	r5,8
  813018:	08121e80 	call	8121e8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81301c:	e13fff17 	ldw	r4,-4(fp)
  813020:	08123740 	call	812374 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  813024:	e13fff17 	ldw	r4,-4(fp)
  813028:	01400184 	movi	r5,6
  81302c:	08121e80 	call	8121e8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  813030:	e13fff17 	ldw	r4,-4(fp)
  813034:	01400304 	movi	r5,12
  813038:	08121e80 	call	8121e8 <lcd_write_command>

  sp->esccount = -1;
  81303c:	e0ffff17 	ldw	r3,-4(fp)
  813040:	00bfffc4 	movi	r2,-1
  813044:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  813048:	e0bfff17 	ldw	r2,-4(fp)
  81304c:	11000a04 	addi	r4,r2,40
  813050:	000b883a 	mov	r5,zero
  813054:	01800204 	movi	r6,8
  813058:	080332c0 	call	80332c <memset>

  sp->scrollpos = 0;
  81305c:	e0bfff17 	ldw	r2,-4(fp)
  813060:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  813064:	e0bfff17 	ldw	r2,-4(fp)
  813068:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81306c:	e0bfff17 	ldw	r2,-4(fp)
  813070:	100009c5 	stb	zero,39(r2)
  813074:	008020b4 	movhi	r2,130
  813078:	10a2f804 	addi	r2,r2,-29728
  81307c:	10800017 	ldw	r2,0(r2)
  813080:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813084:	01400284 	movi	r5,10
  813088:	080fb400 	call	80fb40 <__udivsi3>
  81308c:	1007883a 	mov	r3,r2
  813090:	e0bfff17 	ldw	r2,-4(fp)
  813094:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813098:	e0bfff17 	ldw	r2,-4(fp)
  81309c:	11000104 	addi	r4,r2,4
  8130a0:	e0bfff17 	ldw	r2,-4(fp)
  8130a4:	10800717 	ldw	r2,28(r2)
  8130a8:	100b883a 	mov	r5,r2
  8130ac:	01802074 	movhi	r6,129
  8130b0:	318bb204 	addi	r6,r6,11976
  8130b4:	e1ffff17 	ldw	r7,-4(fp)
  8130b8:	08103e00 	call	8103e0 <alt_alarm_start>
}
  8130bc:	e037883a 	mov	sp,fp
  8130c0:	dfc00117 	ldw	ra,4(sp)
  8130c4:	df000017 	ldw	fp,0(sp)
  8130c8:	dec00204 	addi	sp,sp,8
  8130cc:	f800283a 	ret

008130d0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8130d0:	defffa04 	addi	sp,sp,-24
  8130d4:	dfc00515 	stw	ra,20(sp)
  8130d8:	df000415 	stw	fp,16(sp)
  8130dc:	df000404 	addi	fp,sp,16
  8130e0:	e13ffd15 	stw	r4,-12(fp)
  8130e4:	e17ffe15 	stw	r5,-8(fp)
  8130e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8130ec:	e0bffd17 	ldw	r2,-12(fp)
  8130f0:	10800017 	ldw	r2,0(r2)
  8130f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8130f8:	e0bffc17 	ldw	r2,-16(fp)
  8130fc:	11000a04 	addi	r4,r2,40
  813100:	e0bffd17 	ldw	r2,-12(fp)
  813104:	11c00217 	ldw	r7,8(r2)
  813108:	e17ffe17 	ldw	r5,-8(fp)
  81310c:	e1bfff17 	ldw	r6,-4(fp)
  813110:	08129bc0 	call	8129bc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  813114:	e037883a 	mov	sp,fp
  813118:	dfc00117 	ldw	ra,4(sp)
  81311c:	df000017 	ldw	fp,0(sp)
  813120:	dec00204 	addi	sp,sp,8
  813124:	f800283a 	ret

00813128 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813128:	defffa04 	addi	sp,sp,-24
  81312c:	dfc00515 	stw	ra,20(sp)
  813130:	df000415 	stw	fp,16(sp)
  813134:	df000404 	addi	fp,sp,16
  813138:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81313c:	e0bfff17 	ldw	r2,-4(fp)
  813140:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813144:	e0bfff17 	ldw	r2,-4(fp)
  813148:	10800104 	addi	r2,r2,4
  81314c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813150:	0005303a 	rdctl	r2,status
  813154:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813158:	e0fffd17 	ldw	r3,-12(fp)
  81315c:	00bfff84 	movi	r2,-2
  813160:	1884703a 	and	r2,r3,r2
  813164:	1001703a 	wrctl	status,r2
  
  return context;
  813168:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81316c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  813170:	08113b00 	call	8113b0 <alt_tick>
  813174:	e0bffe17 	ldw	r2,-8(fp)
  813178:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81317c:	e0bffc17 	ldw	r2,-16(fp)
  813180:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813184:	e037883a 	mov	sp,fp
  813188:	dfc00117 	ldw	ra,4(sp)
  81318c:	df000017 	ldw	fp,0(sp)
  813190:	dec00204 	addi	sp,sp,8
  813194:	f800283a 	ret

00813198 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813198:	defff804 	addi	sp,sp,-32
  81319c:	dfc00715 	stw	ra,28(sp)
  8131a0:	df000615 	stw	fp,24(sp)
  8131a4:	df000604 	addi	fp,sp,24
  8131a8:	e13ffc15 	stw	r4,-16(fp)
  8131ac:	e17ffd15 	stw	r5,-12(fp)
  8131b0:	e1bffe15 	stw	r6,-8(fp)
  8131b4:	e1ffff15 	stw	r7,-4(fp)
  8131b8:	e0bfff17 	ldw	r2,-4(fp)
  8131bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8131c0:	008020b4 	movhi	r2,130
  8131c4:	10a2f804 	addi	r2,r2,-29728
  8131c8:	10800017 	ldw	r2,0(r2)
  8131cc:	1004c03a 	cmpne	r2,r2,zero
  8131d0:	1000041e 	bne	r2,zero,8131e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8131d4:	00c020b4 	movhi	r3,130
  8131d8:	18e2f804 	addi	r3,r3,-29728
  8131dc:	e0bffb17 	ldw	r2,-20(fp)
  8131e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8131e4:	e0bffc17 	ldw	r2,-16(fp)
  8131e8:	10800104 	addi	r2,r2,4
  8131ec:	1007883a 	mov	r3,r2
  8131f0:	008001c4 	movi	r2,7
  8131f4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8131f8:	d8000015 	stw	zero,0(sp)
  8131fc:	e13ffd17 	ldw	r4,-12(fp)
  813200:	e17ffe17 	ldw	r5,-8(fp)
  813204:	01802074 	movhi	r6,129
  813208:	318c4a04 	addi	r6,r6,12584
  81320c:	e1fffc17 	ldw	r7,-16(fp)
  813210:	08140940 	call	814094 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813214:	e037883a 	mov	sp,fp
  813218:	dfc00117 	ldw	ra,4(sp)
  81321c:	df000017 	ldw	fp,0(sp)
  813220:	dec00204 	addi	sp,sp,8
  813224:	f800283a 	ret

00813228 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813228:	defffa04 	addi	sp,sp,-24
  81322c:	dfc00515 	stw	ra,20(sp)
  813230:	df000415 	stw	fp,16(sp)
  813234:	df000404 	addi	fp,sp,16
  813238:	e13ffd15 	stw	r4,-12(fp)
  81323c:	e17ffe15 	stw	r5,-8(fp)
  813240:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813244:	e0bffd17 	ldw	r2,-12(fp)
  813248:	10800017 	ldw	r2,0(r2)
  81324c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  813250:	e0bffc17 	ldw	r2,-16(fp)
  813254:	11000a04 	addi	r4,r2,40
  813258:	e0bffd17 	ldw	r2,-12(fp)
  81325c:	11c00217 	ldw	r7,8(r2)
  813260:	e17ffe17 	ldw	r5,-8(fp)
  813264:	e1bfff17 	ldw	r6,-4(fp)
  813268:	08137200 	call	813720 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81326c:	e037883a 	mov	sp,fp
  813270:	dfc00117 	ldw	ra,4(sp)
  813274:	df000017 	ldw	fp,0(sp)
  813278:	dec00204 	addi	sp,sp,8
  81327c:	f800283a 	ret

00813280 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813280:	defffa04 	addi	sp,sp,-24
  813284:	dfc00515 	stw	ra,20(sp)
  813288:	df000415 	stw	fp,16(sp)
  81328c:	df000404 	addi	fp,sp,16
  813290:	e13ffd15 	stw	r4,-12(fp)
  813294:	e17ffe15 	stw	r5,-8(fp)
  813298:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81329c:	e0bffd17 	ldw	r2,-12(fp)
  8132a0:	10800017 	ldw	r2,0(r2)
  8132a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8132a8:	e0bffc17 	ldw	r2,-16(fp)
  8132ac:	11000a04 	addi	r4,r2,40
  8132b0:	e0bffd17 	ldw	r2,-12(fp)
  8132b4:	11c00217 	ldw	r7,8(r2)
  8132b8:	e17ffe17 	ldw	r5,-8(fp)
  8132bc:	e1bfff17 	ldw	r6,-4(fp)
  8132c0:	08139b00 	call	8139b0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8132c4:	e037883a 	mov	sp,fp
  8132c8:	dfc00117 	ldw	ra,4(sp)
  8132cc:	df000017 	ldw	fp,0(sp)
  8132d0:	dec00204 	addi	sp,sp,8
  8132d4:	f800283a 	ret

008132d8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8132d8:	defffc04 	addi	sp,sp,-16
  8132dc:	dfc00315 	stw	ra,12(sp)
  8132e0:	df000215 	stw	fp,8(sp)
  8132e4:	df000204 	addi	fp,sp,8
  8132e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8132ec:	e0bfff17 	ldw	r2,-4(fp)
  8132f0:	10800017 	ldw	r2,0(r2)
  8132f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8132f8:	e0bffe17 	ldw	r2,-8(fp)
  8132fc:	11000a04 	addi	r4,r2,40
  813300:	e0bfff17 	ldw	r2,-4(fp)
  813304:	11400217 	ldw	r5,8(r2)
  813308:	08136c00 	call	8136c0 <altera_avalon_uart_close>
}
  81330c:	e037883a 	mov	sp,fp
  813310:	dfc00117 	ldw	ra,4(sp)
  813314:	df000017 	ldw	fp,0(sp)
  813318:	dec00204 	addi	sp,sp,8
  81331c:	f800283a 	ret

00813320 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  813320:	defff704 	addi	sp,sp,-36
  813324:	dfc00815 	stw	ra,32(sp)
  813328:	df000715 	stw	fp,28(sp)
  81332c:	df000704 	addi	fp,sp,28
  813330:	e13ffc15 	stw	r4,-16(fp)
  813334:	e17ffd15 	stw	r5,-12(fp)
  813338:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  81333c:	e0bffc17 	ldw	r2,-16(fp)
  813340:	10800017 	ldw	r2,0(r2)
  813344:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  813348:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81334c:	1004c03a 	cmpne	r2,r2,zero
  813350:	1000061e 	bne	r2,zero,81336c <altera_avalon_uart_init+0x4c>
  813354:	0005883a 	mov	r2,zero
  813358:	1004c03a 	cmpne	r2,r2,zero
  81335c:	1000031e 	bne	r2,zero,81336c <altera_avalon_uart_init+0x4c>
  813360:	0005883a 	mov	r2,zero
  813364:	1005003a 	cmpeq	r2,r2,zero
  813368:	1000031e 	bne	r2,zero,813378 <altera_avalon_uart_init+0x58>
  81336c:	00800044 	movi	r2,1
  813370:	e0bfff15 	stw	r2,-4(fp)
  813374:	00000106 	br	81337c <altera_avalon_uart_init+0x5c>
  813378:	e03fff15 	stw	zero,-4(fp)
  81337c:	e0bfff17 	ldw	r2,-4(fp)
  813380:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  813384:	e0bffa17 	ldw	r2,-24(fp)
  813388:	1004c03a 	cmpne	r2,r2,zero
  81338c:	1000111e 	bne	r2,zero,8133d4 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  813390:	e0fffc17 	ldw	r3,-16(fp)
  813394:	00832004 	movi	r2,3200
  813398:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81339c:	e0bffb17 	ldw	r2,-20(fp)
  8133a0:	11000304 	addi	r4,r2,12
  8133a4:	e0bffc17 	ldw	r2,-16(fp)
  8133a8:	10800117 	ldw	r2,4(r2)
  8133ac:	1007883a 	mov	r3,r2
  8133b0:	2005883a 	mov	r2,r4
  8133b4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8133b8:	d8000015 	stw	zero,0(sp)
  8133bc:	e13ffd17 	ldw	r4,-12(fp)
  8133c0:	e17ffe17 	ldw	r5,-8(fp)
  8133c4:	01802074 	movhi	r6,129
  8133c8:	318cfa04 	addi	r6,r6,13288
  8133cc:	e1fffc17 	ldw	r7,-16(fp)
  8133d0:	08140940 	call	814094 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8133d4:	e037883a 	mov	sp,fp
  8133d8:	dfc00117 	ldw	ra,4(sp)
  8133dc:	df000017 	ldw	fp,0(sp)
  8133e0:	dec00204 	addi	sp,sp,8
  8133e4:	f800283a 	ret

008133e8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8133e8:	defffa04 	addi	sp,sp,-24
  8133ec:	dfc00515 	stw	ra,20(sp)
  8133f0:	df000415 	stw	fp,16(sp)
  8133f4:	df000404 	addi	fp,sp,16
  8133f8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8133fc:	e0bfff17 	ldw	r2,-4(fp)
  813400:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  813404:	e0bffd17 	ldw	r2,-12(fp)
  813408:	10800017 	ldw	r2,0(r2)
  81340c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  813410:	e0bffc17 	ldw	r2,-16(fp)
  813414:	10800204 	addi	r2,r2,8
  813418:	10800037 	ldwio	r2,0(r2)
  81341c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  813420:	e0bffc17 	ldw	r2,-16(fp)
  813424:	10800204 	addi	r2,r2,8
  813428:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  81342c:	e0bffc17 	ldw	r2,-16(fp)
  813430:	10800204 	addi	r2,r2,8
  813434:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  813438:	e0bffe17 	ldw	r2,-8(fp)
  81343c:	1080200c 	andi	r2,r2,128
  813440:	1005003a 	cmpeq	r2,r2,zero
  813444:	1000031e 	bne	r2,zero,813454 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  813448:	e13ffd17 	ldw	r4,-12(fp)
  81344c:	e17ffe17 	ldw	r5,-8(fp)
  813450:	08134840 	call	813484 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  813454:	e0bffe17 	ldw	r2,-8(fp)
  813458:	1081100c 	andi	r2,r2,1088
  81345c:	1005003a 	cmpeq	r2,r2,zero
  813460:	1000031e 	bne	r2,zero,813470 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813464:	e13ffd17 	ldw	r4,-12(fp)
  813468:	e17ffe17 	ldw	r5,-8(fp)
  81346c:	08135640 	call	813564 <altera_avalon_uart_txirq>
  }
  

}
  813470:	e037883a 	mov	sp,fp
  813474:	dfc00117 	ldw	ra,4(sp)
  813478:	df000017 	ldw	fp,0(sp)
  81347c:	dec00204 	addi	sp,sp,8
  813480:	f800283a 	ret

00813484 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813484:	defffc04 	addi	sp,sp,-16
  813488:	df000315 	stw	fp,12(sp)
  81348c:	df000304 	addi	fp,sp,12
  813490:	e13ffe15 	stw	r4,-8(fp)
  813494:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813498:	e0bfff17 	ldw	r2,-4(fp)
  81349c:	108000cc 	andi	r2,r2,3
  8134a0:	1004c03a 	cmpne	r2,r2,zero
  8134a4:	10002b1e 	bne	r2,zero,813554 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8134a8:	e0bffe17 	ldw	r2,-8(fp)
  8134ac:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8134b0:	e0bffe17 	ldw	r2,-8(fp)
  8134b4:	10800317 	ldw	r2,12(r2)
  8134b8:	10800044 	addi	r2,r2,1
  8134bc:	10800fcc 	andi	r2,r2,63
  8134c0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8134c4:	e0bffe17 	ldw	r2,-8(fp)
  8134c8:	11000317 	ldw	r4,12(r2)
  8134cc:	e0bffe17 	ldw	r2,-8(fp)
  8134d0:	10800017 	ldw	r2,0(r2)
  8134d4:	10800037 	ldwio	r2,0(r2)
  8134d8:	1007883a 	mov	r3,r2
  8134dc:	e0bffe17 	ldw	r2,-8(fp)
  8134e0:	2085883a 	add	r2,r4,r2
  8134e4:	10800704 	addi	r2,r2,28
  8134e8:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  8134ec:	e0fffe17 	ldw	r3,-8(fp)
  8134f0:	e0bffd17 	ldw	r2,-12(fp)
  8134f4:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8134f8:	e0bffe17 	ldw	r2,-8(fp)
  8134fc:	10800317 	ldw	r2,12(r2)
  813500:	10800044 	addi	r2,r2,1
  813504:	10800fcc 	andi	r2,r2,63
  813508:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  81350c:	e0bffe17 	ldw	r2,-8(fp)
  813510:	10c00217 	ldw	r3,8(r2)
  813514:	e0bffd17 	ldw	r2,-12(fp)
  813518:	18800e1e 	bne	r3,r2,813554 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81351c:	e0bffe17 	ldw	r2,-8(fp)
  813520:	10c00117 	ldw	r3,4(r2)
  813524:	00bfdfc4 	movi	r2,-129
  813528:	1886703a 	and	r3,r3,r2
  81352c:	e0bffe17 	ldw	r2,-8(fp)
  813530:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  813534:	e0bffe17 	ldw	r2,-8(fp)
  813538:	10800017 	ldw	r2,0(r2)
  81353c:	11000304 	addi	r4,r2,12
  813540:	e0bffe17 	ldw	r2,-8(fp)
  813544:	10800117 	ldw	r2,4(r2)
  813548:	1007883a 	mov	r3,r2
  81354c:	2005883a 	mov	r2,r4
  813550:	10c00035 	stwio	r3,0(r2)
  }   
}
  813554:	e037883a 	mov	sp,fp
  813558:	df000017 	ldw	fp,0(sp)
  81355c:	dec00104 	addi	sp,sp,4
  813560:	f800283a 	ret

00813564 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813564:	defffd04 	addi	sp,sp,-12
  813568:	df000215 	stw	fp,8(sp)
  81356c:	df000204 	addi	fp,sp,8
  813570:	e13ffe15 	stw	r4,-8(fp)
  813574:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813578:	e0bffe17 	ldw	r2,-8(fp)
  81357c:	10c00417 	ldw	r3,16(r2)
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	10800517 	ldw	r2,20(r2)
  813588:	18803626 	beq	r3,r2,813664 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81358c:	e0bffe17 	ldw	r2,-8(fp)
  813590:	10800617 	ldw	r2,24(r2)
  813594:	1080008c 	andi	r2,r2,2
  813598:	1005003a 	cmpeq	r2,r2,zero
  81359c:	1000041e 	bne	r2,zero,8135b0 <altera_avalon_uart_txirq+0x4c>
  8135a0:	e0bfff17 	ldw	r2,-4(fp)
  8135a4:	1082000c 	andi	r2,r2,2048
  8135a8:	1005003a 	cmpeq	r2,r2,zero
  8135ac:	10001e1e 	bne	r2,zero,813628 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8135b0:	e0bffe17 	ldw	r2,-8(fp)
  8135b4:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8135b8:	e0bffe17 	ldw	r2,-8(fp)
  8135bc:	10800017 	ldw	r2,0(r2)
  8135c0:	11000104 	addi	r4,r2,4
  8135c4:	e0bffe17 	ldw	r2,-8(fp)
  8135c8:	10c00417 	ldw	r3,16(r2)
  8135cc:	e0bffe17 	ldw	r2,-8(fp)
  8135d0:	1885883a 	add	r2,r3,r2
  8135d4:	10801704 	addi	r2,r2,92
  8135d8:	10800003 	ldbu	r2,0(r2)
  8135dc:	10c03fcc 	andi	r3,r2,255
  8135e0:	2005883a 	mov	r2,r4
  8135e4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8135e8:	e0bffe17 	ldw	r2,-8(fp)
  8135ec:	10800417 	ldw	r2,16(r2)
  8135f0:	10c00044 	addi	r3,r2,1
  8135f4:	e0bffe17 	ldw	r2,-8(fp)
  8135f8:	10c00415 	stw	r3,16(r2)
  8135fc:	e0bffe17 	ldw	r2,-8(fp)
  813600:	10800417 	ldw	r2,16(r2)
  813604:	10c00fcc 	andi	r3,r2,63
  813608:	e0bffe17 	ldw	r2,-8(fp)
  81360c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813610:	e0bffe17 	ldw	r2,-8(fp)
  813614:	10800117 	ldw	r2,4(r2)
  813618:	10c01014 	ori	r3,r2,64
  81361c:	e0bffe17 	ldw	r2,-8(fp)
  813620:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813624:	00000f06 	br	813664 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  813628:	e0bffe17 	ldw	r2,-8(fp)
  81362c:	10800017 	ldw	r2,0(r2)
  813630:	10800204 	addi	r2,r2,8
  813634:	10800037 	ldwio	r2,0(r2)
  813638:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81363c:	e0bfff17 	ldw	r2,-4(fp)
  813640:	1082000c 	andi	r2,r2,2048
  813644:	1004c03a 	cmpne	r2,r2,zero
  813648:	1000061e 	bne	r2,zero,813664 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81364c:	e0bffe17 	ldw	r2,-8(fp)
  813650:	10c00117 	ldw	r3,4(r2)
  813654:	00bfefc4 	movi	r2,-65
  813658:	1886703a 	and	r3,r3,r2
  81365c:	e0bffe17 	ldw	r2,-8(fp)
  813660:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  813664:	e0bffe17 	ldw	r2,-8(fp)
  813668:	10c00417 	ldw	r3,16(r2)
  81366c:	e0bffe17 	ldw	r2,-8(fp)
  813670:	10800517 	ldw	r2,20(r2)
  813674:	1880061e 	bne	r3,r2,813690 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813678:	e0bffe17 	ldw	r2,-8(fp)
  81367c:	10c00117 	ldw	r3,4(r2)
  813680:	00beefc4 	movi	r2,-1089
  813684:	1886703a 	and	r3,r3,r2
  813688:	e0bffe17 	ldw	r2,-8(fp)
  81368c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813690:	e0bffe17 	ldw	r2,-8(fp)
  813694:	10800017 	ldw	r2,0(r2)
  813698:	11000304 	addi	r4,r2,12
  81369c:	e0bffe17 	ldw	r2,-8(fp)
  8136a0:	10800117 	ldw	r2,4(r2)
  8136a4:	1007883a 	mov	r3,r2
  8136a8:	2005883a 	mov	r2,r4
  8136ac:	10c00035 	stwio	r3,0(r2)
}
  8136b0:	e037883a 	mov	sp,fp
  8136b4:	df000017 	ldw	fp,0(sp)
  8136b8:	dec00104 	addi	sp,sp,4
  8136bc:	f800283a 	ret

008136c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8136c0:	defffc04 	addi	sp,sp,-16
  8136c4:	df000315 	stw	fp,12(sp)
  8136c8:	df000304 	addi	fp,sp,12
  8136cc:	e13ffd15 	stw	r4,-12(fp)
  8136d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8136d4:	00000706 	br	8136f4 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8136d8:	e0bffe17 	ldw	r2,-8(fp)
  8136dc:	1090000c 	andi	r2,r2,16384
  8136e0:	1005003a 	cmpeq	r2,r2,zero
  8136e4:	1000031e 	bne	r2,zero,8136f4 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  8136e8:	00bffd44 	movi	r2,-11
  8136ec:	e0bfff15 	stw	r2,-4(fp)
  8136f0:	00000606 	br	81370c <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8136f4:	e0bffd17 	ldw	r2,-12(fp)
  8136f8:	10c00417 	ldw	r3,16(r2)
  8136fc:	e0bffd17 	ldw	r2,-12(fp)
  813700:	10800517 	ldw	r2,20(r2)
  813704:	18bff41e 	bne	r3,r2,8136d8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813708:	e03fff15 	stw	zero,-4(fp)
  81370c:	e0bfff17 	ldw	r2,-4(fp)
}
  813710:	e037883a 	mov	sp,fp
  813714:	df000017 	ldw	fp,0(sp)
  813718:	dec00104 	addi	sp,sp,4
  81371c:	f800283a 	ret

00813720 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813720:	defff004 	addi	sp,sp,-64
  813724:	dfc00f15 	stw	ra,60(sp)
  813728:	df000e15 	stw	fp,56(sp)
  81372c:	df000e04 	addi	fp,sp,56
  813730:	e13ffb15 	stw	r4,-20(fp)
  813734:	e17ffc15 	stw	r5,-16(fp)
  813738:	e1bffd15 	stw	r6,-12(fp)
  81373c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  813740:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  813744:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813748:	e0bffe17 	ldw	r2,-8(fp)
  81374c:	1090000c 	andi	r2,r2,16384
  813750:	1005003a 	cmpeq	r2,r2,zero
  813754:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  813758:	e0bffb17 	ldw	r2,-20(fp)
  81375c:	10800217 	ldw	r2,8(r2)
  813760:	10800044 	addi	r2,r2,1
  813764:	10800fcc 	andi	r2,r2,63
  813768:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81376c:	00001906 	br	8137d4 <altera_avalon_uart_read+0xb4>
    {
      count++;
  813770:	e0bff617 	ldw	r2,-40(fp)
  813774:	10800044 	addi	r2,r2,1
  813778:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  81377c:	e0bffb17 	ldw	r2,-20(fp)
  813780:	10c00217 	ldw	r3,8(r2)
  813784:	e0bffb17 	ldw	r2,-20(fp)
  813788:	1885883a 	add	r2,r3,r2
  81378c:	10800704 	addi	r2,r2,28
  813790:	10800003 	ldbu	r2,0(r2)
  813794:	1007883a 	mov	r3,r2
  813798:	e0bffc17 	ldw	r2,-16(fp)
  81379c:	10c00005 	stb	r3,0(r2)
  8137a0:	e0bffc17 	ldw	r2,-16(fp)
  8137a4:	10800044 	addi	r2,r2,1
  8137a8:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8137ac:	e0bffb17 	ldw	r2,-20(fp)
  8137b0:	10800217 	ldw	r2,8(r2)
  8137b4:	10c00044 	addi	r3,r2,1
  8137b8:	e0bffb17 	ldw	r2,-20(fp)
  8137bc:	10c00215 	stw	r3,8(r2)
  8137c0:	e0bffb17 	ldw	r2,-20(fp)
  8137c4:	10800217 	ldw	r2,8(r2)
  8137c8:	10c00fcc 	andi	r3,r2,63
  8137cc:	e0bffb17 	ldw	r2,-20(fp)
  8137d0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8137d4:	e0fff617 	ldw	r3,-40(fp)
  8137d8:	e0bffd17 	ldw	r2,-12(fp)
  8137dc:	1880050e 	bge	r3,r2,8137f4 <altera_avalon_uart_read+0xd4>
  8137e0:	e0bffb17 	ldw	r2,-20(fp)
  8137e4:	10c00217 	ldw	r3,8(r2)
  8137e8:	e0bffb17 	ldw	r2,-20(fp)
  8137ec:	10800317 	ldw	r2,12(r2)
  8137f0:	18bfdf1e 	bne	r3,r2,813770 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8137f4:	e0bff617 	ldw	r2,-40(fp)
  8137f8:	1004c03a 	cmpne	r2,r2,zero
  8137fc:	1000271e 	bne	r2,zero,81389c <altera_avalon_uart_read+0x17c>
  813800:	e0bffb17 	ldw	r2,-20(fp)
  813804:	10c00217 	ldw	r3,8(r2)
  813808:	e0bffb17 	ldw	r2,-20(fp)
  81380c:	10800317 	ldw	r2,12(r2)
  813810:	1880221e 	bne	r3,r2,81389c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  813814:	e0bff917 	ldw	r2,-28(fp)
  813818:	1004c03a 	cmpne	r2,r2,zero
  81381c:	1000061e 	bne	r2,zero,813838 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813820:	08139500 	call	813950 <alt_get_errno>
  813824:	00c002c4 	movi	r3,11
  813828:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  81382c:	00800044 	movi	r2,1
  813830:	e0bff705 	stb	r2,-36(fp)
        break;
  813834:	00001f06 	br	8138b4 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813838:	0005303a 	rdctl	r2,status
  81383c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813840:	e0fff517 	ldw	r3,-44(fp)
  813844:	00bfff84 	movi	r2,-2
  813848:	1884703a 	and	r2,r3,r2
  81384c:	1001703a 	wrctl	status,r2
  
  return context;
  813850:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813854:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813858:	e0bffb17 	ldw	r2,-20(fp)
  81385c:	10800117 	ldw	r2,4(r2)
  813860:	10c02014 	ori	r3,r2,128
  813864:	e0bffb17 	ldw	r2,-20(fp)
  813868:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81386c:	e0bffb17 	ldw	r2,-20(fp)
  813870:	10800017 	ldw	r2,0(r2)
  813874:	11000304 	addi	r4,r2,12
  813878:	e0bffb17 	ldw	r2,-20(fp)
  81387c:	10800117 	ldw	r2,4(r2)
  813880:	1007883a 	mov	r3,r2
  813884:	2005883a 	mov	r2,r4
  813888:	10c00035 	stwio	r3,0(r2)
  81388c:	e0bffa17 	ldw	r2,-24(fp)
  813890:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813894:	e0bff417 	ldw	r2,-48(fp)
  813898:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81389c:	e0bff617 	ldw	r2,-40(fp)
  8138a0:	1004c03a 	cmpne	r2,r2,zero
  8138a4:	1000031e 	bne	r2,zero,8138b4 <altera_avalon_uart_read+0x194>
  8138a8:	e0bffd17 	ldw	r2,-12(fp)
  8138ac:	1004c03a 	cmpne	r2,r2,zero
  8138b0:	103fc81e 	bne	r2,zero,8137d4 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8138b4:	0005303a 	rdctl	r2,status
  8138b8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8138bc:	e0fff317 	ldw	r3,-52(fp)
  8138c0:	00bfff84 	movi	r2,-2
  8138c4:	1884703a 	and	r2,r3,r2
  8138c8:	1001703a 	wrctl	status,r2
  
  return context;
  8138cc:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8138d0:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8138d4:	e0bffb17 	ldw	r2,-20(fp)
  8138d8:	10800117 	ldw	r2,4(r2)
  8138dc:	10c02014 	ori	r3,r2,128
  8138e0:	e0bffb17 	ldw	r2,-20(fp)
  8138e4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8138e8:	e0bffb17 	ldw	r2,-20(fp)
  8138ec:	10800017 	ldw	r2,0(r2)
  8138f0:	11000304 	addi	r4,r2,12
  8138f4:	e0bffb17 	ldw	r2,-20(fp)
  8138f8:	10800117 	ldw	r2,4(r2)
  8138fc:	1007883a 	mov	r3,r2
  813900:	2005883a 	mov	r2,r4
  813904:	10c00035 	stwio	r3,0(r2)
  813908:	e0bffa17 	ldw	r2,-24(fp)
  81390c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813910:	e0bff217 	ldw	r2,-56(fp)
  813914:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813918:	e0bff703 	ldbu	r2,-36(fp)
  81391c:	1005003a 	cmpeq	r2,r2,zero
  813920:	1000031e 	bne	r2,zero,813930 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  813924:	00bffd04 	movi	r2,-12
  813928:	e0bfff15 	stw	r2,-4(fp)
  81392c:	00000206 	br	813938 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  813930:	e0bff617 	ldw	r2,-40(fp)
  813934:	e0bfff15 	stw	r2,-4(fp)
  813938:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81393c:	e037883a 	mov	sp,fp
  813940:	dfc00117 	ldw	ra,4(sp)
  813944:	df000017 	ldw	fp,0(sp)
  813948:	dec00204 	addi	sp,sp,8
  81394c:	f800283a 	ret

00813950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813950:	defffd04 	addi	sp,sp,-12
  813954:	dfc00215 	stw	ra,8(sp)
  813958:	df000115 	stw	fp,4(sp)
  81395c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813960:	00802074 	movhi	r2,129
  813964:	109ba304 	addi	r2,r2,28300
  813968:	10800017 	ldw	r2,0(r2)
  81396c:	1005003a 	cmpeq	r2,r2,zero
  813970:	1000061e 	bne	r2,zero,81398c <alt_get_errno+0x3c>
  813974:	00802074 	movhi	r2,129
  813978:	109ba304 	addi	r2,r2,28300
  81397c:	10800017 	ldw	r2,0(r2)
  813980:	103ee83a 	callr	r2
  813984:	e0bfff15 	stw	r2,-4(fp)
  813988:	00000306 	br	813998 <alt_get_errno+0x48>
  81398c:	008020b4 	movhi	r2,130
  813990:	10a2ed04 	addi	r2,r2,-29772
  813994:	e0bfff15 	stw	r2,-4(fp)
  813998:	e0bfff17 	ldw	r2,-4(fp)
}
  81399c:	e037883a 	mov	sp,fp
  8139a0:	dfc00117 	ldw	ra,4(sp)
  8139a4:	df000017 	ldw	fp,0(sp)
  8139a8:	dec00204 	addi	sp,sp,8
  8139ac:	f800283a 	ret

008139b0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8139b0:	defff204 	addi	sp,sp,-56
  8139b4:	dfc00d15 	stw	ra,52(sp)
  8139b8:	df000c15 	stw	fp,48(sp)
  8139bc:	df000c04 	addi	fp,sp,48
  8139c0:	e13ffc15 	stw	r4,-16(fp)
  8139c4:	e17ffd15 	stw	r5,-12(fp)
  8139c8:	e1bffe15 	stw	r6,-8(fp)
  8139cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8139d0:	e0bffe17 	ldw	r2,-8(fp)
  8139d4:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8139d8:	e0bfff17 	ldw	r2,-4(fp)
  8139dc:	1090000c 	andi	r2,r2,16384
  8139e0:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8139e4:	00004006 	br	813ae8 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8139e8:	e0bffc17 	ldw	r2,-16(fp)
  8139ec:	10800517 	ldw	r2,20(r2)
  8139f0:	10800044 	addi	r2,r2,1
  8139f4:	10800fcc 	andi	r2,r2,63
  8139f8:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8139fc:	e0bffc17 	ldw	r2,-16(fp)
  813a00:	10c00417 	ldw	r3,16(r2)
  813a04:	e0bff917 	ldw	r2,-28(fp)
  813a08:	1880251e 	bne	r3,r2,813aa0 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  813a0c:	e0bffa17 	ldw	r2,-24(fp)
  813a10:	1005003a 	cmpeq	r2,r2,zero
  813a14:	1000051e 	bne	r2,zero,813a2c <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813a18:	0813b780 	call	813b78 <alt_get_errno>
  813a1c:	1007883a 	mov	r3,r2
  813a20:	008002c4 	movi	r2,11
  813a24:	18800015 	stw	r2,0(r3)
        break;
  813a28:	00003206 	br	813af4 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a2c:	0005303a 	rdctl	r2,status
  813a30:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a34:	e0fff717 	ldw	r3,-36(fp)
  813a38:	00bfff84 	movi	r2,-2
  813a3c:	1884703a 	and	r2,r3,r2
  813a40:	1001703a 	wrctl	status,r2
  
  return context;
  813a44:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813a48:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813a4c:	e0bffc17 	ldw	r2,-16(fp)
  813a50:	10800117 	ldw	r2,4(r2)
  813a54:	10c11014 	ori	r3,r2,1088
  813a58:	e0bffc17 	ldw	r2,-16(fp)
  813a5c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813a60:	e0bffc17 	ldw	r2,-16(fp)
  813a64:	10800017 	ldw	r2,0(r2)
  813a68:	11000304 	addi	r4,r2,12
  813a6c:	e0bffc17 	ldw	r2,-16(fp)
  813a70:	10800117 	ldw	r2,4(r2)
  813a74:	1007883a 	mov	r3,r2
  813a78:	2005883a 	mov	r2,r4
  813a7c:	10c00035 	stwio	r3,0(r2)
  813a80:	e0bffb17 	ldw	r2,-20(fp)
  813a84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a88:	e0bff617 	ldw	r2,-40(fp)
  813a8c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813a90:	e0bffc17 	ldw	r2,-16(fp)
  813a94:	10c00417 	ldw	r3,16(r2)
  813a98:	e0bff917 	ldw	r2,-28(fp)
  813a9c:	18bffc26 	beq	r3,r2,813a90 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  813aa0:	e0bff817 	ldw	r2,-32(fp)
  813aa4:	10bfffc4 	addi	r2,r2,-1
  813aa8:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813aac:	e0bffc17 	ldw	r2,-16(fp)
  813ab0:	10c00517 	ldw	r3,20(r2)
  813ab4:	e0bffd17 	ldw	r2,-12(fp)
  813ab8:	10800003 	ldbu	r2,0(r2)
  813abc:	1009883a 	mov	r4,r2
  813ac0:	e0bffc17 	ldw	r2,-16(fp)
  813ac4:	1885883a 	add	r2,r3,r2
  813ac8:	10801704 	addi	r2,r2,92
  813acc:	11000005 	stb	r4,0(r2)
  813ad0:	e0bffd17 	ldw	r2,-12(fp)
  813ad4:	10800044 	addi	r2,r2,1
  813ad8:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  813adc:	e0fffc17 	ldw	r3,-16(fp)
  813ae0:	e0bff917 	ldw	r2,-28(fp)
  813ae4:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813ae8:	e0bff817 	ldw	r2,-32(fp)
  813aec:	1004c03a 	cmpne	r2,r2,zero
  813af0:	103fbd1e 	bne	r2,zero,8139e8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813af4:	0005303a 	rdctl	r2,status
  813af8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813afc:	e0fff517 	ldw	r3,-44(fp)
  813b00:	00bfff84 	movi	r2,-2
  813b04:	1884703a 	and	r2,r3,r2
  813b08:	1001703a 	wrctl	status,r2
  
  return context;
  813b0c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813b10:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813b14:	e0bffc17 	ldw	r2,-16(fp)
  813b18:	10800117 	ldw	r2,4(r2)
  813b1c:	10c11014 	ori	r3,r2,1088
  813b20:	e0bffc17 	ldw	r2,-16(fp)
  813b24:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b28:	e0bffc17 	ldw	r2,-16(fp)
  813b2c:	10800017 	ldw	r2,0(r2)
  813b30:	11000304 	addi	r4,r2,12
  813b34:	e0bffc17 	ldw	r2,-16(fp)
  813b38:	10800117 	ldw	r2,4(r2)
  813b3c:	1007883a 	mov	r3,r2
  813b40:	2005883a 	mov	r2,r4
  813b44:	10c00035 	stwio	r3,0(r2)
  813b48:	e0bffb17 	ldw	r2,-20(fp)
  813b4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b50:	e0bff417 	ldw	r2,-48(fp)
  813b54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813b58:	e0fffe17 	ldw	r3,-8(fp)
  813b5c:	e0bff817 	ldw	r2,-32(fp)
  813b60:	1885c83a 	sub	r2,r3,r2
}
  813b64:	e037883a 	mov	sp,fp
  813b68:	dfc00117 	ldw	ra,4(sp)
  813b6c:	df000017 	ldw	fp,0(sp)
  813b70:	dec00204 	addi	sp,sp,8
  813b74:	f800283a 	ret

00813b78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813b78:	defffd04 	addi	sp,sp,-12
  813b7c:	dfc00215 	stw	ra,8(sp)
  813b80:	df000115 	stw	fp,4(sp)
  813b84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813b88:	00802074 	movhi	r2,129
  813b8c:	109ba304 	addi	r2,r2,28300
  813b90:	10800017 	ldw	r2,0(r2)
  813b94:	1005003a 	cmpeq	r2,r2,zero
  813b98:	1000061e 	bne	r2,zero,813bb4 <alt_get_errno+0x3c>
  813b9c:	00802074 	movhi	r2,129
  813ba0:	109ba304 	addi	r2,r2,28300
  813ba4:	10800017 	ldw	r2,0(r2)
  813ba8:	103ee83a 	callr	r2
  813bac:	e0bfff15 	stw	r2,-4(fp)
  813bb0:	00000306 	br	813bc0 <alt_get_errno+0x48>
  813bb4:	008020b4 	movhi	r2,130
  813bb8:	10a2ed04 	addi	r2,r2,-29772
  813bbc:	e0bfff15 	stw	r2,-4(fp)
  813bc0:	e0bfff17 	ldw	r2,-4(fp)
}
  813bc4:	e037883a 	mov	sp,fp
  813bc8:	dfc00117 	ldw	ra,4(sp)
  813bcc:	df000017 	ldw	fp,0(sp)
  813bd0:	dec00204 	addi	sp,sp,8
  813bd4:	f800283a 	ret

00813bd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813bd8:	defffe04 	addi	sp,sp,-8
  813bdc:	df000115 	stw	fp,4(sp)
  813be0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813be4:	e03fff15 	stw	zero,-4(fp)
  813be8:	00000506 	br	813c00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813bec:	e0bfff17 	ldw	r2,-4(fp)
  813bf0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813bf4:	e0bfff17 	ldw	r2,-4(fp)
  813bf8:	10800804 	addi	r2,r2,32
  813bfc:	e0bfff15 	stw	r2,-4(fp)
  813c00:	e0bfff17 	ldw	r2,-4(fp)
  813c04:	10820030 	cmpltui	r2,r2,2048
  813c08:	103ff81e 	bne	r2,zero,813bec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813c0c:	e037883a 	mov	sp,fp
  813c10:	df000017 	ldw	fp,0(sp)
  813c14:	dec00104 	addi	sp,sp,4
  813c18:	f800283a 	ret

00813c1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813c1c:	defff904 	addi	sp,sp,-28
  813c20:	dfc00615 	stw	ra,24(sp)
  813c24:	df000515 	stw	fp,20(sp)
  813c28:	df000504 	addi	fp,sp,20
  813c2c:	e13ffd15 	stw	r4,-12(fp)
  813c30:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813c34:	e0bffd17 	ldw	r2,-12(fp)
  813c38:	1005003a 	cmpeq	r2,r2,zero
  813c3c:	1000041e 	bne	r2,zero,813c50 <alt_dev_llist_insert+0x34>
  813c40:	e0bffd17 	ldw	r2,-12(fp)
  813c44:	10800217 	ldw	r2,8(r2)
  813c48:	1004c03a 	cmpne	r2,r2,zero
  813c4c:	1000071e 	bne	r2,zero,813c6c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813c50:	0813cd00 	call	813cd0 <alt_get_errno>
  813c54:	1007883a 	mov	r3,r2
  813c58:	00800584 	movi	r2,22
  813c5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813c60:	00bffa84 	movi	r2,-22
  813c64:	e0bfff15 	stw	r2,-4(fp)
  813c68:	00001306 	br	813cb8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813c6c:	e0fffd17 	ldw	r3,-12(fp)
  813c70:	e0bffe17 	ldw	r2,-8(fp)
  813c74:	e0bffb15 	stw	r2,-20(fp)
  813c78:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813c7c:	e0fffc17 	ldw	r3,-16(fp)
  813c80:	e0bffb17 	ldw	r2,-20(fp)
  813c84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813c88:	e0bffb17 	ldw	r2,-20(fp)
  813c8c:	10c00017 	ldw	r3,0(r2)
  813c90:	e0bffc17 	ldw	r2,-16(fp)
  813c94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813c98:	e0bffb17 	ldw	r2,-20(fp)
  813c9c:	10c00017 	ldw	r3,0(r2)
  813ca0:	e0bffc17 	ldw	r2,-16(fp)
  813ca4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813ca8:	e0fffb17 	ldw	r3,-20(fp)
  813cac:	e0bffc17 	ldw	r2,-16(fp)
  813cb0:	18800015 	stw	r2,0(r3)

  return 0;  
  813cb4:	e03fff15 	stw	zero,-4(fp)
  813cb8:	e0bfff17 	ldw	r2,-4(fp)
}
  813cbc:	e037883a 	mov	sp,fp
  813cc0:	dfc00117 	ldw	ra,4(sp)
  813cc4:	df000017 	ldw	fp,0(sp)
  813cc8:	dec00204 	addi	sp,sp,8
  813ccc:	f800283a 	ret

00813cd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813cd0:	defffd04 	addi	sp,sp,-12
  813cd4:	dfc00215 	stw	ra,8(sp)
  813cd8:	df000115 	stw	fp,4(sp)
  813cdc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813ce0:	00802074 	movhi	r2,129
  813ce4:	109ba304 	addi	r2,r2,28300
  813ce8:	10800017 	ldw	r2,0(r2)
  813cec:	1005003a 	cmpeq	r2,r2,zero
  813cf0:	1000061e 	bne	r2,zero,813d0c <alt_get_errno+0x3c>
  813cf4:	00802074 	movhi	r2,129
  813cf8:	109ba304 	addi	r2,r2,28300
  813cfc:	10800017 	ldw	r2,0(r2)
  813d00:	103ee83a 	callr	r2
  813d04:	e0bfff15 	stw	r2,-4(fp)
  813d08:	00000306 	br	813d18 <alt_get_errno+0x48>
  813d0c:	008020b4 	movhi	r2,130
  813d10:	10a2ed04 	addi	r2,r2,-29772
  813d14:	e0bfff15 	stw	r2,-4(fp)
  813d18:	e0bfff17 	ldw	r2,-4(fp)
}
  813d1c:	e037883a 	mov	sp,fp
  813d20:	dfc00117 	ldw	ra,4(sp)
  813d24:	df000017 	ldw	fp,0(sp)
  813d28:	dec00204 	addi	sp,sp,8
  813d2c:	f800283a 	ret

00813d30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813d30:	defffd04 	addi	sp,sp,-12
  813d34:	dfc00215 	stw	ra,8(sp)
  813d38:	df000115 	stw	fp,4(sp)
  813d3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813d40:	00bfff04 	movi	r2,-4
  813d44:	00c02074 	movhi	r3,129
  813d48:	18d2b504 	addi	r3,r3,19156
  813d4c:	1885883a 	add	r2,r3,r2
  813d50:	e0bfff15 	stw	r2,-4(fp)
  813d54:	00000606 	br	813d70 <_do_ctors+0x40>
        (*ctor) (); 
  813d58:	e0bfff17 	ldw	r2,-4(fp)
  813d5c:	10800017 	ldw	r2,0(r2)
  813d60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813d64:	e0bfff17 	ldw	r2,-4(fp)
  813d68:	10bfff04 	addi	r2,r2,-4
  813d6c:	e0bfff15 	stw	r2,-4(fp)
  813d70:	e0ffff17 	ldw	r3,-4(fp)
  813d74:	00802074 	movhi	r2,129
  813d78:	1092b404 	addi	r2,r2,19152
  813d7c:	18bff62e 	bgeu	r3,r2,813d58 <_do_ctors+0x28>
        (*ctor) (); 
}
  813d80:	e037883a 	mov	sp,fp
  813d84:	dfc00117 	ldw	ra,4(sp)
  813d88:	df000017 	ldw	fp,0(sp)
  813d8c:	dec00204 	addi	sp,sp,8
  813d90:	f800283a 	ret

00813d94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813d94:	defffd04 	addi	sp,sp,-12
  813d98:	dfc00215 	stw	ra,8(sp)
  813d9c:	df000115 	stw	fp,4(sp)
  813da0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813da4:	00bfff04 	movi	r2,-4
  813da8:	00c02074 	movhi	r3,129
  813dac:	18d2b504 	addi	r3,r3,19156
  813db0:	1885883a 	add	r2,r3,r2
  813db4:	e0bfff15 	stw	r2,-4(fp)
  813db8:	00000606 	br	813dd4 <_do_dtors+0x40>
        (*dtor) (); 
  813dbc:	e0bfff17 	ldw	r2,-4(fp)
  813dc0:	10800017 	ldw	r2,0(r2)
  813dc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813dc8:	e0bfff17 	ldw	r2,-4(fp)
  813dcc:	10bfff04 	addi	r2,r2,-4
  813dd0:	e0bfff15 	stw	r2,-4(fp)
  813dd4:	e0ffff17 	ldw	r3,-4(fp)
  813dd8:	00802074 	movhi	r2,129
  813ddc:	1092b504 	addi	r2,r2,19156
  813de0:	18bff62e 	bgeu	r3,r2,813dbc <_do_dtors+0x28>
        (*dtor) (); 
}
  813de4:	e037883a 	mov	sp,fp
  813de8:	dfc00117 	ldw	ra,4(sp)
  813dec:	df000017 	ldw	fp,0(sp)
  813df0:	dec00204 	addi	sp,sp,8
  813df4:	f800283a 	ret

00813df8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813df8:	defff904 	addi	sp,sp,-28
  813dfc:	dfc00615 	stw	ra,24(sp)
  813e00:	df000515 	stw	fp,20(sp)
  813e04:	df000504 	addi	fp,sp,20
  813e08:	e13ffd15 	stw	r4,-12(fp)
  813e0c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813e10:	e0bffe17 	ldw	r2,-8(fp)
  813e14:	10800017 	ldw	r2,0(r2)
  813e18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813e1c:	e13ffd17 	ldw	r4,-12(fp)
  813e20:	080408c0 	call	80408c <strlen>
  813e24:	10800044 	addi	r2,r2,1
  813e28:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813e2c:	00000d06 	br	813e64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813e30:	e0bffc17 	ldw	r2,-16(fp)
  813e34:	11000217 	ldw	r4,8(r2)
  813e38:	e1bffb17 	ldw	r6,-20(fp)
  813e3c:	e17ffd17 	ldw	r5,-12(fp)
  813e40:	08147140 	call	814714 <memcmp>
  813e44:	1004c03a 	cmpne	r2,r2,zero
  813e48:	1000031e 	bne	r2,zero,813e58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813e4c:	e0bffc17 	ldw	r2,-16(fp)
  813e50:	e0bfff15 	stw	r2,-4(fp)
  813e54:	00000706 	br	813e74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813e58:	e0bffc17 	ldw	r2,-16(fp)
  813e5c:	10800017 	ldw	r2,0(r2)
  813e60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813e64:	e0fffe17 	ldw	r3,-8(fp)
  813e68:	e0bffc17 	ldw	r2,-16(fp)
  813e6c:	10fff01e 	bne	r2,r3,813e30 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813e70:	e03fff15 	stw	zero,-4(fp)
  813e74:	e0bfff17 	ldw	r2,-4(fp)
}
  813e78:	e037883a 	mov	sp,fp
  813e7c:	dfc00117 	ldw	ra,4(sp)
  813e80:	df000017 	ldw	fp,0(sp)
  813e84:	dec00204 	addi	sp,sp,8
  813e88:	f800283a 	ret

00813e8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813e8c:	defffa04 	addi	sp,sp,-24
  813e90:	dfc00515 	stw	ra,20(sp)
  813e94:	df000415 	stw	fp,16(sp)
  813e98:	df000404 	addi	fp,sp,16
  813e9c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813ea0:	00802074 	movhi	r2,129
  813ea4:	109b9e04 	addi	r2,r2,28280
  813ea8:	10800017 	ldw	r2,0(r2)
  813eac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813eb0:	00003306 	br	813f80 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813eb4:	e0bffd17 	ldw	r2,-12(fp)
  813eb8:	11000217 	ldw	r4,8(r2)
  813ebc:	080408c0 	call	80408c <strlen>
  813ec0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813ec4:	e0bffd17 	ldw	r2,-12(fp)
  813ec8:	10c00217 	ldw	r3,8(r2)
  813ecc:	e0bffc17 	ldw	r2,-16(fp)
  813ed0:	1885883a 	add	r2,r3,r2
  813ed4:	10bfffc4 	addi	r2,r2,-1
  813ed8:	10800003 	ldbu	r2,0(r2)
  813edc:	10803fcc 	andi	r2,r2,255
  813ee0:	1080201c 	xori	r2,r2,128
  813ee4:	10bfe004 	addi	r2,r2,-128
  813ee8:	10800bd8 	cmpnei	r2,r2,47
  813eec:	1000031e 	bne	r2,zero,813efc <alt_find_file+0x70>
    {
      len -= 1;
  813ef0:	e0bffc17 	ldw	r2,-16(fp)
  813ef4:	10bfffc4 	addi	r2,r2,-1
  813ef8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813efc:	e0bffc17 	ldw	r2,-16(fp)
  813f00:	1007883a 	mov	r3,r2
  813f04:	e0bffe17 	ldw	r2,-8(fp)
  813f08:	1885883a 	add	r2,r3,r2
  813f0c:	10800003 	ldbu	r2,0(r2)
  813f10:	10803fcc 	andi	r2,r2,255
  813f14:	1080201c 	xori	r2,r2,128
  813f18:	10bfe004 	addi	r2,r2,-128
  813f1c:	10800be0 	cmpeqi	r2,r2,47
  813f20:	10000a1e 	bne	r2,zero,813f4c <alt_find_file+0xc0>
  813f24:	e0bffc17 	ldw	r2,-16(fp)
  813f28:	1007883a 	mov	r3,r2
  813f2c:	e0bffe17 	ldw	r2,-8(fp)
  813f30:	1885883a 	add	r2,r3,r2
  813f34:	10800003 	ldbu	r2,0(r2)
  813f38:	10803fcc 	andi	r2,r2,255
  813f3c:	1080201c 	xori	r2,r2,128
  813f40:	10bfe004 	addi	r2,r2,-128
  813f44:	1004c03a 	cmpne	r2,r2,zero
  813f48:	10000a1e 	bne	r2,zero,813f74 <alt_find_file+0xe8>
  813f4c:	e0bffd17 	ldw	r2,-12(fp)
  813f50:	11000217 	ldw	r4,8(r2)
  813f54:	e1bffc17 	ldw	r6,-16(fp)
  813f58:	e17ffe17 	ldw	r5,-8(fp)
  813f5c:	08147140 	call	814714 <memcmp>
  813f60:	1004c03a 	cmpne	r2,r2,zero
  813f64:	1000031e 	bne	r2,zero,813f74 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813f68:	e0bffd17 	ldw	r2,-12(fp)
  813f6c:	e0bfff15 	stw	r2,-4(fp)
  813f70:	00000806 	br	813f94 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813f74:	e0bffd17 	ldw	r2,-12(fp)
  813f78:	10800017 	ldw	r2,0(r2)
  813f7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813f80:	00c02074 	movhi	r3,129
  813f84:	18db9e04 	addi	r3,r3,28280
  813f88:	e0bffd17 	ldw	r2,-12(fp)
  813f8c:	10ffc91e 	bne	r2,r3,813eb4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813f90:	e03fff15 	stw	zero,-4(fp)
  813f94:	e0bfff17 	ldw	r2,-4(fp)
}
  813f98:	e037883a 	mov	sp,fp
  813f9c:	dfc00117 	ldw	ra,4(sp)
  813fa0:	df000017 	ldw	fp,0(sp)
  813fa4:	dec00204 	addi	sp,sp,8
  813fa8:	f800283a 	ret

00813fac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813fac:	defffc04 	addi	sp,sp,-16
  813fb0:	df000315 	stw	fp,12(sp)
  813fb4:	df000304 	addi	fp,sp,12
  813fb8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813fbc:	00bffa04 	movi	r2,-24
  813fc0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813fc4:	e03ffe15 	stw	zero,-8(fp)
  813fc8:	00001e06 	br	814044 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  813fcc:	e0bffe17 	ldw	r2,-8(fp)
  813fd0:	00c02074 	movhi	r3,129
  813fd4:	18d6a204 	addi	r3,r3,23176
  813fd8:	10800324 	muli	r2,r2,12
  813fdc:	10c5883a 	add	r2,r2,r3
  813fe0:	10800017 	ldw	r2,0(r2)
  813fe4:	1004c03a 	cmpne	r2,r2,zero
  813fe8:	1000131e 	bne	r2,zero,814038 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  813fec:	e0bffe17 	ldw	r2,-8(fp)
  813ff0:	00c02074 	movhi	r3,129
  813ff4:	18d6a204 	addi	r3,r3,23176
  813ff8:	10800324 	muli	r2,r2,12
  813ffc:	10c7883a 	add	r3,r2,r3
  814000:	e0bfff17 	ldw	r2,-4(fp)
  814004:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  814008:	00802074 	movhi	r2,129
  81400c:	109ba204 	addi	r2,r2,28296
  814010:	10c00017 	ldw	r3,0(r2)
  814014:	e0bffe17 	ldw	r2,-8(fp)
  814018:	1880040e 	bge	r3,r2,81402c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81401c:	00c02074 	movhi	r3,129
  814020:	18dba204 	addi	r3,r3,28296
  814024:	e0bffe17 	ldw	r2,-8(fp)
  814028:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81402c:	e0bffe17 	ldw	r2,-8(fp)
  814030:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  814034:	00000606 	br	814050 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814038:	e0bffe17 	ldw	r2,-8(fp)
  81403c:	10800044 	addi	r2,r2,1
  814040:	e0bffe15 	stw	r2,-8(fp)
  814044:	e0bffe17 	ldw	r2,-8(fp)
  814048:	10800810 	cmplti	r2,r2,32
  81404c:	103fdf1e 	bne	r2,zero,813fcc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814050:	e0bffd17 	ldw	r2,-12(fp)
}
  814054:	e037883a 	mov	sp,fp
  814058:	df000017 	ldw	fp,0(sp)
  81405c:	dec00104 	addi	sp,sp,4
  814060:	f800283a 	ret

00814064 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  814064:	defffe04 	addi	sp,sp,-8
  814068:	dfc00115 	stw	ra,4(sp)
  81406c:	df000015 	stw	fp,0(sp)
  814070:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  814074:	0009883a 	mov	r4,zero
  814078:	01440004 	movi	r5,4096
  81407c:	08146380 	call	814638 <alt_icache_flush>
#endif
}
  814080:	e037883a 	mov	sp,fp
  814084:	dfc00117 	ldw	ra,4(sp)
  814088:	df000017 	ldw	fp,0(sp)
  81408c:	dec00204 	addi	sp,sp,8
  814090:	f800283a 	ret

00814094 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814094:	defff904 	addi	sp,sp,-28
  814098:	dfc00615 	stw	ra,24(sp)
  81409c:	df000515 	stw	fp,20(sp)
  8140a0:	df000504 	addi	fp,sp,20
  8140a4:	e13ffc15 	stw	r4,-16(fp)
  8140a8:	e17ffd15 	stw	r5,-12(fp)
  8140ac:	e1bffe15 	stw	r6,-8(fp)
  8140b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8140b4:	e0800217 	ldw	r2,8(fp)
  8140b8:	d8800015 	stw	r2,0(sp)
  8140bc:	e13ffc17 	ldw	r4,-16(fp)
  8140c0:	e17ffd17 	ldw	r5,-12(fp)
  8140c4:	e1bffe17 	ldw	r6,-8(fp)
  8140c8:	e1ffff17 	ldw	r7,-4(fp)
  8140cc:	08142680 	call	814268 <alt_iic_isr_register>
}  
  8140d0:	e037883a 	mov	sp,fp
  8140d4:	dfc00117 	ldw	ra,4(sp)
  8140d8:	df000017 	ldw	fp,0(sp)
  8140dc:	dec00204 	addi	sp,sp,8
  8140e0:	f800283a 	ret

008140e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8140e4:	defff904 	addi	sp,sp,-28
  8140e8:	df000615 	stw	fp,24(sp)
  8140ec:	df000604 	addi	fp,sp,24
  8140f0:	e13ffe15 	stw	r4,-8(fp)
  8140f4:	e17fff15 	stw	r5,-4(fp)
  8140f8:	e0bfff17 	ldw	r2,-4(fp)
  8140fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814100:	0005303a 	rdctl	r2,status
  814104:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814108:	e0fffb17 	ldw	r3,-20(fp)
  81410c:	00bfff84 	movi	r2,-2
  814110:	1884703a 	and	r2,r3,r2
  814114:	1001703a 	wrctl	status,r2
  
  return context;
  814118:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81411c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  814120:	e0fffc17 	ldw	r3,-16(fp)
  814124:	00800044 	movi	r2,1
  814128:	10c4983a 	sll	r2,r2,r3
  81412c:	1007883a 	mov	r3,r2
  814130:	008020b4 	movhi	r2,130
  814134:	10a2f404 	addi	r2,r2,-29744
  814138:	10800017 	ldw	r2,0(r2)
  81413c:	1886b03a 	or	r3,r3,r2
  814140:	008020b4 	movhi	r2,130
  814144:	10a2f404 	addi	r2,r2,-29744
  814148:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81414c:	008020b4 	movhi	r2,130
  814150:	10a2f404 	addi	r2,r2,-29744
  814154:	10800017 	ldw	r2,0(r2)
  814158:	100170fa 	wrctl	ienable,r2
  81415c:	e0bffd17 	ldw	r2,-12(fp)
  814160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814164:	e0bffa17 	ldw	r2,-24(fp)
  814168:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81416c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814170:	e037883a 	mov	sp,fp
  814174:	df000017 	ldw	fp,0(sp)
  814178:	dec00104 	addi	sp,sp,4
  81417c:	f800283a 	ret

00814180 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814180:	defff904 	addi	sp,sp,-28
  814184:	df000615 	stw	fp,24(sp)
  814188:	df000604 	addi	fp,sp,24
  81418c:	e13ffe15 	stw	r4,-8(fp)
  814190:	e17fff15 	stw	r5,-4(fp)
  814194:	e0bfff17 	ldw	r2,-4(fp)
  814198:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81419c:	0005303a 	rdctl	r2,status
  8141a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8141a4:	e0fffb17 	ldw	r3,-20(fp)
  8141a8:	00bfff84 	movi	r2,-2
  8141ac:	1884703a 	and	r2,r3,r2
  8141b0:	1001703a 	wrctl	status,r2
  
  return context;
  8141b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8141b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8141bc:	e0fffc17 	ldw	r3,-16(fp)
  8141c0:	00800044 	movi	r2,1
  8141c4:	10c4983a 	sll	r2,r2,r3
  8141c8:	0084303a 	nor	r2,zero,r2
  8141cc:	1007883a 	mov	r3,r2
  8141d0:	008020b4 	movhi	r2,130
  8141d4:	10a2f404 	addi	r2,r2,-29744
  8141d8:	10800017 	ldw	r2,0(r2)
  8141dc:	1886703a 	and	r3,r3,r2
  8141e0:	008020b4 	movhi	r2,130
  8141e4:	10a2f404 	addi	r2,r2,-29744
  8141e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8141ec:	008020b4 	movhi	r2,130
  8141f0:	10a2f404 	addi	r2,r2,-29744
  8141f4:	10800017 	ldw	r2,0(r2)
  8141f8:	100170fa 	wrctl	ienable,r2
  8141fc:	e0bffd17 	ldw	r2,-12(fp)
  814200:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814204:	e0bffa17 	ldw	r2,-24(fp)
  814208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81420c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814210:	e037883a 	mov	sp,fp
  814214:	df000017 	ldw	fp,0(sp)
  814218:	dec00104 	addi	sp,sp,4
  81421c:	f800283a 	ret

00814220 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814220:	defffc04 	addi	sp,sp,-16
  814224:	df000315 	stw	fp,12(sp)
  814228:	df000304 	addi	fp,sp,12
  81422c:	e13ffe15 	stw	r4,-8(fp)
  814230:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  814234:	000530fa 	rdctl	r2,ienable
  814238:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81423c:	e0ffff17 	ldw	r3,-4(fp)
  814240:	00800044 	movi	r2,1
  814244:	10c4983a 	sll	r2,r2,r3
  814248:	1007883a 	mov	r3,r2
  81424c:	e0bffd17 	ldw	r2,-12(fp)
  814250:	1884703a 	and	r2,r3,r2
  814254:	1004c03a 	cmpne	r2,r2,zero
}
  814258:	e037883a 	mov	sp,fp
  81425c:	df000017 	ldw	fp,0(sp)
  814260:	dec00104 	addi	sp,sp,4
  814264:	f800283a 	ret

00814268 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814268:	defff404 	addi	sp,sp,-48
  81426c:	dfc00b15 	stw	ra,44(sp)
  814270:	df000a15 	stw	fp,40(sp)
  814274:	df000a04 	addi	fp,sp,40
  814278:	e13ffb15 	stw	r4,-20(fp)
  81427c:	e17ffc15 	stw	r5,-16(fp)
  814280:	e1bffd15 	stw	r6,-12(fp)
  814284:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814288:	00bffa84 	movi	r2,-22
  81428c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814290:	e0bffc17 	ldw	r2,-16(fp)
  814294:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814298:	e0bff917 	ldw	r2,-28(fp)
  81429c:	10800808 	cmpgei	r2,r2,32
  8142a0:	1000291e 	bne	r2,zero,814348 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142a4:	0005303a 	rdctl	r2,status
  8142a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142ac:	e0fff717 	ldw	r3,-36(fp)
  8142b0:	00bfff84 	movi	r2,-2
  8142b4:	1884703a 	and	r2,r3,r2
  8142b8:	1001703a 	wrctl	status,r2
  
  return context;
  8142bc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8142c0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8142c4:	e0bff917 	ldw	r2,-28(fp)
  8142c8:	00c020b4 	movhi	r3,130
  8142cc:	18e35004 	addi	r3,r3,-29376
  8142d0:	100490fa 	slli	r2,r2,3
  8142d4:	10c7883a 	add	r3,r2,r3
  8142d8:	e0bffd17 	ldw	r2,-12(fp)
  8142dc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8142e0:	e0bff917 	ldw	r2,-28(fp)
  8142e4:	00c020b4 	movhi	r3,130
  8142e8:	18e35004 	addi	r3,r3,-29376
  8142ec:	100490fa 	slli	r2,r2,3
  8142f0:	10c5883a 	add	r2,r2,r3
  8142f4:	10c00104 	addi	r3,r2,4
  8142f8:	e0bffe17 	ldw	r2,-8(fp)
  8142fc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814300:	e0bffd17 	ldw	r2,-12(fp)
  814304:	1005003a 	cmpeq	r2,r2,zero
  814308:	1000051e 	bne	r2,zero,814320 <alt_iic_isr_register+0xb8>
  81430c:	e17ff917 	ldw	r5,-28(fp)
  814310:	e13ffb17 	ldw	r4,-20(fp)
  814314:	08140e40 	call	8140e4 <alt_ic_irq_enable>
  814318:	e0bfff15 	stw	r2,-4(fp)
  81431c:	00000406 	br	814330 <alt_iic_isr_register+0xc8>
  814320:	e17ff917 	ldw	r5,-28(fp)
  814324:	e13ffb17 	ldw	r4,-20(fp)
  814328:	08141800 	call	814180 <alt_ic_irq_disable>
  81432c:	e0bfff15 	stw	r2,-4(fp)
  814330:	e0bfff17 	ldw	r2,-4(fp)
  814334:	e0bffa15 	stw	r2,-24(fp)
  814338:	e0bff817 	ldw	r2,-32(fp)
  81433c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814340:	e0bff617 	ldw	r2,-40(fp)
  814344:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814348:	e0bffa17 	ldw	r2,-24(fp)
}
  81434c:	e037883a 	mov	sp,fp
  814350:	dfc00117 	ldw	ra,4(sp)
  814354:	df000017 	ldw	fp,0(sp)
  814358:	dec00204 	addi	sp,sp,8
  81435c:	f800283a 	ret

00814360 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814360:	defff904 	addi	sp,sp,-28
  814364:	dfc00615 	stw	ra,24(sp)
  814368:	df000515 	stw	fp,20(sp)
  81436c:	df000504 	addi	fp,sp,20
  814370:	e13ffc15 	stw	r4,-16(fp)
  814374:	e17ffd15 	stw	r5,-12(fp)
  814378:	e1bffe15 	stw	r6,-8(fp)
  81437c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814380:	e13ffd17 	ldw	r4,-12(fp)
  814384:	e17ffe17 	ldw	r5,-8(fp)
  814388:	e1bfff17 	ldw	r6,-4(fp)
  81438c:	0810e940 	call	810e94 <open>
  814390:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814394:	e0bffb17 	ldw	r2,-20(fp)
  814398:	1004803a 	cmplt	r2,r2,zero
  81439c:	10001c1e 	bne	r2,zero,814410 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8143a0:	e0bffb17 	ldw	r2,-20(fp)
  8143a4:	00c02074 	movhi	r3,129
  8143a8:	18d6a204 	addi	r3,r3,23176
  8143ac:	10800324 	muli	r2,r2,12
  8143b0:	10c5883a 	add	r2,r2,r3
  8143b4:	10c00017 	ldw	r3,0(r2)
  8143b8:	e0bffc17 	ldw	r2,-16(fp)
  8143bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8143c0:	e0bffb17 	ldw	r2,-20(fp)
  8143c4:	00c02074 	movhi	r3,129
  8143c8:	18d6a204 	addi	r3,r3,23176
  8143cc:	10800324 	muli	r2,r2,12
  8143d0:	10c5883a 	add	r2,r2,r3
  8143d4:	10800104 	addi	r2,r2,4
  8143d8:	10c00017 	ldw	r3,0(r2)
  8143dc:	e0bffc17 	ldw	r2,-16(fp)
  8143e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8143e4:	e0bffb17 	ldw	r2,-20(fp)
  8143e8:	00c02074 	movhi	r3,129
  8143ec:	18d6a204 	addi	r3,r3,23176
  8143f0:	10800324 	muli	r2,r2,12
  8143f4:	10c5883a 	add	r2,r2,r3
  8143f8:	10800204 	addi	r2,r2,8
  8143fc:	10c00017 	ldw	r3,0(r2)
  814400:	e0bffc17 	ldw	r2,-16(fp)
  814404:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  814408:	e13ffb17 	ldw	r4,-20(fp)
  81440c:	08111fc0 	call	8111fc <alt_release_fd>
  }
} 
  814410:	e037883a 	mov	sp,fp
  814414:	dfc00117 	ldw	ra,4(sp)
  814418:	df000017 	ldw	fp,0(sp)
  81441c:	dec00204 	addi	sp,sp,8
  814420:	f800283a 	ret

00814424 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  814424:	defffb04 	addi	sp,sp,-20
  814428:	dfc00415 	stw	ra,16(sp)
  81442c:	df000315 	stw	fp,12(sp)
  814430:	df000304 	addi	fp,sp,12
  814434:	e13ffd15 	stw	r4,-12(fp)
  814438:	e17ffe15 	stw	r5,-8(fp)
  81443c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814440:	01002074 	movhi	r4,129
  814444:	2116a504 	addi	r4,r4,23188
  814448:	e17ffd17 	ldw	r5,-12(fp)
  81444c:	01800044 	movi	r6,1
  814450:	01c07fc4 	movi	r7,511
  814454:	08143600 	call	814360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814458:	01002074 	movhi	r4,129
  81445c:	2116a204 	addi	r4,r4,23176
  814460:	e17ffe17 	ldw	r5,-8(fp)
  814464:	000d883a 	mov	r6,zero
  814468:	01c07fc4 	movi	r7,511
  81446c:	08143600 	call	814360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814470:	01002074 	movhi	r4,129
  814474:	2116a804 	addi	r4,r4,23200
  814478:	e17fff17 	ldw	r5,-4(fp)
  81447c:	01800044 	movi	r6,1
  814480:	01c07fc4 	movi	r7,511
  814484:	08143600 	call	814360 <alt_open_fd>
}  
  814488:	e037883a 	mov	sp,fp
  81448c:	dfc00117 	ldw	ra,4(sp)
  814490:	df000017 	ldw	fp,0(sp)
  814494:	dec00204 	addi	sp,sp,8
  814498:	f800283a 	ret

0081449c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81449c:	defffd04 	addi	sp,sp,-12
  8144a0:	dfc00215 	stw	ra,8(sp)
  8144a4:	df000115 	stw	fp,4(sp)
  8144a8:	df000104 	addi	fp,sp,4
  8144ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8144b0:	e13fff17 	ldw	r4,-4(fp)
  8144b4:	08144ec0 	call	8144ec <alt_busy_sleep>
}
  8144b8:	e037883a 	mov	sp,fp
  8144bc:	dfc00117 	ldw	ra,4(sp)
  8144c0:	df000017 	ldw	fp,0(sp)
  8144c4:	dec00204 	addi	sp,sp,8
  8144c8:	f800283a 	ret

008144cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8144cc:	deffff04 	addi	sp,sp,-4
  8144d0:	df000015 	stw	fp,0(sp)
  8144d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8144d8:	000170fa 	wrctl	ienable,zero
}
  8144dc:	e037883a 	mov	sp,fp
  8144e0:	df000017 	ldw	fp,0(sp)
  8144e4:	dec00104 	addi	sp,sp,4
  8144e8:	f800283a 	ret

008144ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8144ec:	defffa04 	addi	sp,sp,-24
  8144f0:	dfc00515 	stw	ra,20(sp)
  8144f4:	df000415 	stw	fp,16(sp)
  8144f8:	df000404 	addi	fp,sp,16
  8144fc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  814500:	008000c4 	movi	r2,3
  814504:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  814508:	e0fffc17 	ldw	r3,-16(fp)
  81450c:	008003f4 	movhi	r2,15
  814510:	10909004 	addi	r2,r2,16960
  814514:	188b383a 	mul	r5,r3,r2
  814518:	0100bef4 	movhi	r4,763
  81451c:	213c2004 	addi	r4,r4,-3968
  814520:	080fb400 	call	80fb40 <__udivsi3>
  814524:	100b883a 	mov	r5,r2
  814528:	01200034 	movhi	r4,32768
  81452c:	213fffc4 	addi	r4,r4,-1
  814530:	080fb400 	call	80fb40 <__udivsi3>
  814534:	100b883a 	mov	r5,r2
  814538:	e13fff17 	ldw	r4,-4(fp)
  81453c:	080fb400 	call	80fb40 <__udivsi3>
  814540:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  814544:	e0bffd17 	ldw	r2,-12(fp)
  814548:	1005003a 	cmpeq	r2,r2,zero
  81454c:	1000281e 	bne	r2,zero,8145f0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  814550:	e03ffe15 	stw	zero,-8(fp)
  814554:	00001606 	br	8145b0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  814558:	00a00034 	movhi	r2,32768
  81455c:	10bfffc4 	addi	r2,r2,-1
  814560:	10bfffc4 	addi	r2,r2,-1
  814564:	103ffe1e 	bne	r2,zero,814560 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814568:	e0fffc17 	ldw	r3,-16(fp)
  81456c:	008003f4 	movhi	r2,15
  814570:	10909004 	addi	r2,r2,16960
  814574:	188b383a 	mul	r5,r3,r2
  814578:	0100bef4 	movhi	r4,763
  81457c:	213c2004 	addi	r4,r4,-3968
  814580:	080fb400 	call	80fb40 <__udivsi3>
  814584:	100b883a 	mov	r5,r2
  814588:	01200034 	movhi	r4,32768
  81458c:	213fffc4 	addi	r4,r4,-1
  814590:	080fb400 	call	80fb40 <__udivsi3>
  814594:	1007883a 	mov	r3,r2
  814598:	e0bfff17 	ldw	r2,-4(fp)
  81459c:	10c5c83a 	sub	r2,r2,r3
  8145a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8145a4:	e0bffe17 	ldw	r2,-8(fp)
  8145a8:	10800044 	addi	r2,r2,1
  8145ac:	e0bffe15 	stw	r2,-8(fp)
  8145b0:	e0fffe17 	ldw	r3,-8(fp)
  8145b4:	e0bffd17 	ldw	r2,-12(fp)
  8145b8:	18bfe716 	blt	r3,r2,814558 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8145bc:	e0fffc17 	ldw	r3,-16(fp)
  8145c0:	008003f4 	movhi	r2,15
  8145c4:	10909004 	addi	r2,r2,16960
  8145c8:	188b383a 	mul	r5,r3,r2
  8145cc:	0100bef4 	movhi	r4,763
  8145d0:	213c2004 	addi	r4,r4,-3968
  8145d4:	080fb400 	call	80fb40 <__udivsi3>
  8145d8:	1007883a 	mov	r3,r2
  8145dc:	e0bfff17 	ldw	r2,-4(fp)
  8145e0:	1885383a 	mul	r2,r3,r2
  8145e4:	10bfffc4 	addi	r2,r2,-1
  8145e8:	103ffe1e 	bne	r2,zero,8145e4 <alt_busy_sleep+0xf8>
  8145ec:	00000c06 	br	814620 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8145f0:	e0fffc17 	ldw	r3,-16(fp)
  8145f4:	008003f4 	movhi	r2,15
  8145f8:	10909004 	addi	r2,r2,16960
  8145fc:	188b383a 	mul	r5,r3,r2
  814600:	0100bef4 	movhi	r4,763
  814604:	213c2004 	addi	r4,r4,-3968
  814608:	080fb400 	call	80fb40 <__udivsi3>
  81460c:	1007883a 	mov	r3,r2
  814610:	e0bfff17 	ldw	r2,-4(fp)
  814614:	1885383a 	mul	r2,r3,r2
  814618:	10bfffc4 	addi	r2,r2,-1
  81461c:	00bffe16 	blt	zero,r2,814618 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  814620:	0005883a 	mov	r2,zero
}
  814624:	e037883a 	mov	sp,fp
  814628:	dfc00117 	ldw	ra,4(sp)
  81462c:	df000017 	ldw	fp,0(sp)
  814630:	dec00204 	addi	sp,sp,8
  814634:	f800283a 	ret

00814638 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814638:	defffb04 	addi	sp,sp,-20
  81463c:	df000415 	stw	fp,16(sp)
  814640:	df000404 	addi	fp,sp,16
  814644:	e13ffe15 	stw	r4,-8(fp)
  814648:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81464c:	e0bfff17 	ldw	r2,-4(fp)
  814650:	10840070 	cmpltui	r2,r2,4097
  814654:	1000021e 	bne	r2,zero,814660 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814658:	00840004 	movi	r2,4096
  81465c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814660:	e0fffe17 	ldw	r3,-8(fp)
  814664:	e0bfff17 	ldw	r2,-4(fp)
  814668:	1885883a 	add	r2,r3,r2
  81466c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814670:	e0bffe17 	ldw	r2,-8(fp)
  814674:	e0bffd15 	stw	r2,-12(fp)
  814678:	00000506 	br	814690 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81467c:	e0bffd17 	ldw	r2,-12(fp)
  814680:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814684:	e0bffd17 	ldw	r2,-12(fp)
  814688:	10800804 	addi	r2,r2,32
  81468c:	e0bffd15 	stw	r2,-12(fp)
  814690:	e0fffd17 	ldw	r3,-12(fp)
  814694:	e0bffc17 	ldw	r2,-16(fp)
  814698:	18bff836 	bltu	r3,r2,81467c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81469c:	e0bffe17 	ldw	r2,-8(fp)
  8146a0:	108007cc 	andi	r2,r2,31
  8146a4:	1005003a 	cmpeq	r2,r2,zero
  8146a8:	1000021e 	bne	r2,zero,8146b4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8146ac:	e0bffd17 	ldw	r2,-12(fp)
  8146b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8146b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8146b8:	e037883a 	mov	sp,fp
  8146bc:	df000017 	ldw	fp,0(sp)
  8146c0:	dec00104 	addi	sp,sp,4
  8146c4:	f800283a 	ret

008146c8 <atexit>:
  8146c8:	200b883a 	mov	r5,r4
  8146cc:	000d883a 	mov	r6,zero
  8146d0:	0009883a 	mov	r4,zero
  8146d4:	000f883a 	mov	r7,zero
  8146d8:	08147881 	jmpi	814788 <__register_exitproc>

008146dc <exit>:
  8146dc:	defffe04 	addi	sp,sp,-8
  8146e0:	000b883a 	mov	r5,zero
  8146e4:	dc000015 	stw	r16,0(sp)
  8146e8:	dfc00115 	stw	ra,4(sp)
  8146ec:	2021883a 	mov	r16,r4
  8146f0:	08148c00 	call	8148c0 <__call_exitprocs>
  8146f4:	00802074 	movhi	r2,129
  8146f8:	109b9804 	addi	r2,r2,28256
  8146fc:	11000017 	ldw	r4,0(r2)
  814700:	20800f17 	ldw	r2,60(r4)
  814704:	10000126 	beq	r2,zero,81470c <exit+0x30>
  814708:	103ee83a 	callr	r2
  81470c:	8009883a 	mov	r4,r16
  814710:	0814ab00 	call	814ab0 <_exit>

00814714 <memcmp>:
  814714:	00c000c4 	movi	r3,3
  814718:	1980032e 	bgeu	r3,r6,814728 <memcmp+0x14>
  81471c:	2144b03a 	or	r2,r4,r5
  814720:	10c4703a 	and	r2,r2,r3
  814724:	10000f26 	beq	r2,zero,814764 <memcmp+0x50>
  814728:	31ffffc4 	addi	r7,r6,-1
  81472c:	3000061e 	bne	r6,zero,814748 <memcmp+0x34>
  814730:	00000a06 	br	81475c <memcmp+0x48>
  814734:	39ffffc4 	addi	r7,r7,-1
  814738:	00bfffc4 	movi	r2,-1
  81473c:	21000044 	addi	r4,r4,1
  814740:	29400044 	addi	r5,r5,1
  814744:	38800526 	beq	r7,r2,81475c <memcmp+0x48>
  814748:	20c00003 	ldbu	r3,0(r4)
  81474c:	28800003 	ldbu	r2,0(r5)
  814750:	18bff826 	beq	r3,r2,814734 <memcmp+0x20>
  814754:	1885c83a 	sub	r2,r3,r2
  814758:	f800283a 	ret
  81475c:	0005883a 	mov	r2,zero
  814760:	f800283a 	ret
  814764:	180f883a 	mov	r7,r3
  814768:	20c00017 	ldw	r3,0(r4)
  81476c:	28800017 	ldw	r2,0(r5)
  814770:	18bfed1e 	bne	r3,r2,814728 <memcmp+0x14>
  814774:	31bfff04 	addi	r6,r6,-4
  814778:	21000104 	addi	r4,r4,4
  81477c:	29400104 	addi	r5,r5,4
  814780:	39bff936 	bltu	r7,r6,814768 <memcmp+0x54>
  814784:	003fe806 	br	814728 <memcmp+0x14>

00814788 <__register_exitproc>:
  814788:	defffa04 	addi	sp,sp,-24
  81478c:	00802074 	movhi	r2,129
  814790:	109b9804 	addi	r2,r2,28256
  814794:	dc000015 	stw	r16,0(sp)
  814798:	14000017 	ldw	r16,0(r2)
  81479c:	dd000415 	stw	r20,16(sp)
  8147a0:	2829883a 	mov	r20,r5
  8147a4:	81405217 	ldw	r5,328(r16)
  8147a8:	dcc00315 	stw	r19,12(sp)
  8147ac:	dc800215 	stw	r18,8(sp)
  8147b0:	dc400115 	stw	r17,4(sp)
  8147b4:	dfc00515 	stw	ra,20(sp)
  8147b8:	2023883a 	mov	r17,r4
  8147bc:	3027883a 	mov	r19,r6
  8147c0:	3825883a 	mov	r18,r7
  8147c4:	28002526 	beq	r5,zero,81485c <__register_exitproc+0xd4>
  8147c8:	29000117 	ldw	r4,4(r5)
  8147cc:	008007c4 	movi	r2,31
  8147d0:	11002716 	blt	r2,r4,814870 <__register_exitproc+0xe8>
  8147d4:	8800101e 	bne	r17,zero,814818 <__register_exitproc+0x90>
  8147d8:	2105883a 	add	r2,r4,r4
  8147dc:	1085883a 	add	r2,r2,r2
  8147e0:	20c00044 	addi	r3,r4,1
  8147e4:	1145883a 	add	r2,r2,r5
  8147e8:	0009883a 	mov	r4,zero
  8147ec:	15000215 	stw	r20,8(r2)
  8147f0:	28c00115 	stw	r3,4(r5)
  8147f4:	2005883a 	mov	r2,r4
  8147f8:	dfc00517 	ldw	ra,20(sp)
  8147fc:	dd000417 	ldw	r20,16(sp)
  814800:	dcc00317 	ldw	r19,12(sp)
  814804:	dc800217 	ldw	r18,8(sp)
  814808:	dc400117 	ldw	r17,4(sp)
  81480c:	dc000017 	ldw	r16,0(sp)
  814810:	dec00604 	addi	sp,sp,24
  814814:	f800283a 	ret
  814818:	29802204 	addi	r6,r5,136
  81481c:	00800044 	movi	r2,1
  814820:	110e983a 	sll	r7,r2,r4
  814824:	30c04017 	ldw	r3,256(r6)
  814828:	2105883a 	add	r2,r4,r4
  81482c:	1085883a 	add	r2,r2,r2
  814830:	1185883a 	add	r2,r2,r6
  814834:	19c6b03a 	or	r3,r3,r7
  814838:	14802015 	stw	r18,128(r2)
  81483c:	14c00015 	stw	r19,0(r2)
  814840:	00800084 	movi	r2,2
  814844:	30c04015 	stw	r3,256(r6)
  814848:	88bfe31e 	bne	r17,r2,8147d8 <__register_exitproc+0x50>
  81484c:	30804117 	ldw	r2,260(r6)
  814850:	11c4b03a 	or	r2,r2,r7
  814854:	30804115 	stw	r2,260(r6)
  814858:	003fdf06 	br	8147d8 <__register_exitproc+0x50>
  81485c:	008020b4 	movhi	r2,130
  814860:	10a39004 	addi	r2,r2,-29120
  814864:	100b883a 	mov	r5,r2
  814868:	80805215 	stw	r2,328(r16)
  81486c:	003fd606 	br	8147c8 <__register_exitproc+0x40>
  814870:	00800034 	movhi	r2,0
  814874:	10800004 	addi	r2,r2,0
  814878:	1000021e 	bne	r2,zero,814884 <__register_exitproc+0xfc>
  81487c:	013fffc4 	movi	r4,-1
  814880:	003fdc06 	br	8147f4 <__register_exitproc+0x6c>
  814884:	01006404 	movi	r4,400
  814888:	103ee83a 	callr	r2
  81488c:	1007883a 	mov	r3,r2
  814890:	103ffa26 	beq	r2,zero,81487c <__register_exitproc+0xf4>
  814894:	80805217 	ldw	r2,328(r16)
  814898:	180b883a 	mov	r5,r3
  81489c:	18000115 	stw	zero,4(r3)
  8148a0:	18800015 	stw	r2,0(r3)
  8148a4:	80c05215 	stw	r3,328(r16)
  8148a8:	18006215 	stw	zero,392(r3)
  8148ac:	18006315 	stw	zero,396(r3)
  8148b0:	0009883a 	mov	r4,zero
  8148b4:	883fc826 	beq	r17,zero,8147d8 <__register_exitproc+0x50>
  8148b8:	003fd706 	br	814818 <__register_exitproc+0x90>

008148bc <register_fini>:
  8148bc:	f800283a 	ret

008148c0 <__call_exitprocs>:
  8148c0:	00802074 	movhi	r2,129
  8148c4:	109b9804 	addi	r2,r2,28256
  8148c8:	10800017 	ldw	r2,0(r2)
  8148cc:	defff304 	addi	sp,sp,-52
  8148d0:	df000b15 	stw	fp,44(sp)
  8148d4:	d8800115 	stw	r2,4(sp)
  8148d8:	00800034 	movhi	r2,0
  8148dc:	10800004 	addi	r2,r2,0
  8148e0:	1005003a 	cmpeq	r2,r2,zero
  8148e4:	d8800215 	stw	r2,8(sp)
  8148e8:	d8800117 	ldw	r2,4(sp)
  8148ec:	dd400815 	stw	r21,32(sp)
  8148f0:	dd000715 	stw	r20,28(sp)
  8148f4:	10805204 	addi	r2,r2,328
  8148f8:	dfc00c15 	stw	ra,48(sp)
  8148fc:	ddc00a15 	stw	r23,40(sp)
  814900:	dd800915 	stw	r22,36(sp)
  814904:	dcc00615 	stw	r19,24(sp)
  814908:	dc800515 	stw	r18,20(sp)
  81490c:	dc400415 	stw	r17,16(sp)
  814910:	dc000315 	stw	r16,12(sp)
  814914:	282b883a 	mov	r21,r5
  814918:	2039883a 	mov	fp,r4
  81491c:	d8800015 	stw	r2,0(sp)
  814920:	2829003a 	cmpeq	r20,r5,zero
  814924:	d8800117 	ldw	r2,4(sp)
  814928:	14405217 	ldw	r17,328(r2)
  81492c:	88001026 	beq	r17,zero,814970 <__call_exitprocs+0xb0>
  814930:	ddc00017 	ldw	r23,0(sp)
  814934:	88800117 	ldw	r2,4(r17)
  814938:	8c802204 	addi	r18,r17,136
  81493c:	143fffc4 	addi	r16,r2,-1
  814940:	80000916 	blt	r16,zero,814968 <__call_exitprocs+0xa8>
  814944:	05bfffc4 	movi	r22,-1
  814948:	a000151e 	bne	r20,zero,8149a0 <__call_exitprocs+0xe0>
  81494c:	8409883a 	add	r4,r16,r16
  814950:	2105883a 	add	r2,r4,r4
  814954:	1485883a 	add	r2,r2,r18
  814958:	10c02017 	ldw	r3,128(r2)
  81495c:	a8c01126 	beq	r21,r3,8149a4 <__call_exitprocs+0xe4>
  814960:	843fffc4 	addi	r16,r16,-1
  814964:	85bff81e 	bne	r16,r22,814948 <__call_exitprocs+0x88>
  814968:	d8800217 	ldw	r2,8(sp)
  81496c:	10003126 	beq	r2,zero,814a34 <__call_exitprocs+0x174>
  814970:	dfc00c17 	ldw	ra,48(sp)
  814974:	df000b17 	ldw	fp,44(sp)
  814978:	ddc00a17 	ldw	r23,40(sp)
  81497c:	dd800917 	ldw	r22,36(sp)
  814980:	dd400817 	ldw	r21,32(sp)
  814984:	dd000717 	ldw	r20,28(sp)
  814988:	dcc00617 	ldw	r19,24(sp)
  81498c:	dc800517 	ldw	r18,20(sp)
  814990:	dc400417 	ldw	r17,16(sp)
  814994:	dc000317 	ldw	r16,12(sp)
  814998:	dec00d04 	addi	sp,sp,52
  81499c:	f800283a 	ret
  8149a0:	8409883a 	add	r4,r16,r16
  8149a4:	88c00117 	ldw	r3,4(r17)
  8149a8:	2105883a 	add	r2,r4,r4
  8149ac:	1445883a 	add	r2,r2,r17
  8149b0:	18ffffc4 	addi	r3,r3,-1
  8149b4:	11800217 	ldw	r6,8(r2)
  8149b8:	1c001526 	beq	r3,r16,814a10 <__call_exitprocs+0x150>
  8149bc:	10000215 	stw	zero,8(r2)
  8149c0:	303fe726 	beq	r6,zero,814960 <__call_exitprocs+0xa0>
  8149c4:	00c00044 	movi	r3,1
  8149c8:	1c06983a 	sll	r3,r3,r16
  8149cc:	90804017 	ldw	r2,256(r18)
  8149d0:	8cc00117 	ldw	r19,4(r17)
  8149d4:	1884703a 	and	r2,r3,r2
  8149d8:	10001426 	beq	r2,zero,814a2c <__call_exitprocs+0x16c>
  8149dc:	90804117 	ldw	r2,260(r18)
  8149e0:	1884703a 	and	r2,r3,r2
  8149e4:	10000c1e 	bne	r2,zero,814a18 <__call_exitprocs+0x158>
  8149e8:	2105883a 	add	r2,r4,r4
  8149ec:	1485883a 	add	r2,r2,r18
  8149f0:	11400017 	ldw	r5,0(r2)
  8149f4:	e009883a 	mov	r4,fp
  8149f8:	303ee83a 	callr	r6
  8149fc:	88800117 	ldw	r2,4(r17)
  814a00:	98bfc81e 	bne	r19,r2,814924 <__call_exitprocs+0x64>
  814a04:	b8800017 	ldw	r2,0(r23)
  814a08:	147fd526 	beq	r2,r17,814960 <__call_exitprocs+0xa0>
  814a0c:	003fc506 	br	814924 <__call_exitprocs+0x64>
  814a10:	8c000115 	stw	r16,4(r17)
  814a14:	003fea06 	br	8149c0 <__call_exitprocs+0x100>
  814a18:	2105883a 	add	r2,r4,r4
  814a1c:	1485883a 	add	r2,r2,r18
  814a20:	11000017 	ldw	r4,0(r2)
  814a24:	303ee83a 	callr	r6
  814a28:	003ff406 	br	8149fc <__call_exitprocs+0x13c>
  814a2c:	303ee83a 	callr	r6
  814a30:	003ff206 	br	8149fc <__call_exitprocs+0x13c>
  814a34:	88800117 	ldw	r2,4(r17)
  814a38:	1000081e 	bne	r2,zero,814a5c <__call_exitprocs+0x19c>
  814a3c:	89000017 	ldw	r4,0(r17)
  814a40:	20000726 	beq	r4,zero,814a60 <__call_exitprocs+0x1a0>
  814a44:	b9000015 	stw	r4,0(r23)
  814a48:	8809883a 	mov	r4,r17
  814a4c:	00000000 	call	0 <__reset-0x800000>
  814a50:	bc400017 	ldw	r17,0(r23)
  814a54:	883fb71e 	bne	r17,zero,814934 <__call_exitprocs+0x74>
  814a58:	003fc506 	br	814970 <__call_exitprocs+0xb0>
  814a5c:	89000017 	ldw	r4,0(r17)
  814a60:	882f883a 	mov	r23,r17
  814a64:	2023883a 	mov	r17,r4
  814a68:	883fb21e 	bne	r17,zero,814934 <__call_exitprocs+0x74>
  814a6c:	003fc006 	br	814970 <__call_exitprocs+0xb0>

00814a70 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814a70:	defffd04 	addi	sp,sp,-12
  814a74:	df000215 	stw	fp,8(sp)
  814a78:	df000204 	addi	fp,sp,8
  814a7c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814a80:	e0bfff17 	ldw	r2,-4(fp)
  814a84:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814a88:	e0bffe17 	ldw	r2,-8(fp)
  814a8c:	1005003a 	cmpeq	r2,r2,zero
  814a90:	1000021e 	bne	r2,zero,814a9c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814a94:	002af070 	cmpltui	zero,zero,43969
  814a98:	00000106 	br	814aa0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814a9c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814aa0:	e037883a 	mov	sp,fp
  814aa4:	df000017 	ldw	fp,0(sp)
  814aa8:	dec00104 	addi	sp,sp,4
  814aac:	f800283a 	ret

00814ab0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814ab0:	defffd04 	addi	sp,sp,-12
  814ab4:	dfc00215 	stw	ra,8(sp)
  814ab8:	df000115 	stw	fp,4(sp)
  814abc:	df000104 	addi	fp,sp,4
  814ac0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814ac4:	e13fff17 	ldw	r4,-4(fp)
  814ac8:	0814a700 	call	814a70 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814acc:	003fff06 	br	814acc <_exit+0x1c>
  814ad0:	008148bc 	xorhi	r2,zero,1314
